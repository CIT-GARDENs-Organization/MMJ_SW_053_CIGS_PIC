CCS PCH C Compiler, Version 5.104, 57077               19-10-25 18:32

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\cigs\build\mmj_cigs_main.lst

               ROM used:   72492 bytes (55%)
                           Largest free fragment is 58480
               RAM used:   410 (11%) at main() level
                           2862 (80%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   11640
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   014E
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   01D6
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   0240
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA 00,00
000FE:  DATA FF,0F
00100:  DATA 00,00
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,00
00108:  DATA 01,00
0010A:  DATA FF,0F
0010C:  DATA 14,00
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA 14,00
00116:  DATA FF,0F
00118:  DATA 28,00
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA 28,00
00122:  DATA FF,0F
00124:  DATA 32,00
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA 32,00
0012E:  DATA FF,0F
00130:  DATA 72,00
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA 72,00
0013A:  DATA FF,0F
0013C:  DATA 7C,00
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 7C,00
00146:  DATA FF,0F
00148:  DATA BC,00
0014A:  DATA 00,00
0014C:  DATA 40,00
*
001F8:  DATA 54,69
001FA:  DATA 6D,65
001FC:  DATA 72,20
001FE:  DATA 49,6E
00200:  DATA 69,74
00202:  DATA 69,61
00204:  DATA 6C,69
00206:  DATA 7A,65
00208:  DATA 0D,0A
0020A:  DATA 00,00
0020C:  DATA 09,43
0020E:  DATA 6F,6D
00210:  DATA 70,6C
00212:  DATA 65,74
00214:  DATA 65,0D
00216:  DATA 0A,00
*
00288:  DATA 55,41
0028A:  DATA 52,54
0028C:  DATA 20,49
0028E:  DATA 6E,69
00290:  DATA 74,69
00292:  DATA 61,6C
00294:  DATA 69,7A
00296:  DATA 65,0D
00298:  DATA 0A,00
0029A:  DATA 09,43
0029C:  DATA 6F,6D
0029E:  DATA 70,6C
002A0:  DATA 65,74
002A2:  DATA 65,0D
002A4:  DATA 0A,00
002A6:  DATA 41,44
002A8:  DATA 37,34
002AA:  DATA 39,30
002AC:  DATA 20,49
002AE:  DATA 6E,69
002B0:  DATA 74,69
002B2:  DATA 61,6C
002B4:  DATA 69,7A
002B6:  DATA 65,0D
002B8:  DATA 0A,00
002BA:  DATA 09,43
002BC:  DATA 6F,6E
002BE:  DATA 6E,65
002C0:  DATA 63,74
002C2:  DATA 20,65
002C4:  DATA 72,72
002C6:  DATA 6F,72
002C8:  DATA 21,0D
002CA:  DATA 0A,00
002CC:  DATA 09,43
002CE:  DATA 6F,6E
002D0:  DATA 6E,65
002D2:  DATA 63,74
002D4:  DATA 20,73
002D6:  DATA 75,63
002D8:  DATA 63,65
002DA:  DATA 73,73
002DC:  DATA 66,75
002DE:  DATA 6C,0D
002E0:  DATA 0A,00
002E2:  DATA 09,43
002E4:  DATA 6F,6D
002E6:  DATA 70,6C
002E8:  DATA 65,74
002EA:  DATA 65,0D
002EC:  DATA 0A,00
002EE:  DATA 4D,43
002F0:  DATA 50,34
002F2:  DATA 39,30
002F4:  DATA 31,20
002F6:  DATA 49,6E
002F8:  DATA 69,74
002FA:  DATA 69,61
002FC:  DATA 6C,69
002FE:  DATA 7A,65
00300:  DATA 0D,0A
00302:  DATA 00,00
00304:  DATA 09,5B
00306:  DATA 44,41
00308:  DATA 43,20
0030A:  DATA 50,6F
0030C:  DATA 72,74
0030E:  DATA 20,31
00310:  DATA 5D,20
00312:  DATA 43,6F
00314:  DATA 6E,6E
00316:  DATA 65,63
00318:  DATA 74,20
0031A:  DATA 65,72
0031C:  DATA 72,6F
0031E:  DATA 72,21
00320:  DATA 0D,0A
00322:  DATA 00,00
00324:  DATA 09,5B
00326:  DATA 44,41
00328:  DATA 43,20
0032A:  DATA 50,6F
0032C:  DATA 72,74
0032E:  DATA 20,31
00330:  DATA 5D,20
00332:  DATA 43,6F
00334:  DATA 6E,6E
00336:  DATA 65,63
00338:  DATA 74,20
0033A:  DATA 73,75
0033C:  DATA 63,63
0033E:  DATA 65,73
00340:  DATA 73,66
00342:  DATA 75,6C
00344:  DATA 0D,0A
00346:  DATA 00,00
00348:  DATA 09,5B
0034A:  DATA 44,41
0034C:  DATA 43,20
0034E:  DATA 50,6F
00350:  DATA 72,74
00352:  DATA 20,32
00354:  DATA 5D,20
00356:  DATA 43,6F
00358:  DATA 6E,6E
0035A:  DATA 65,63
0035C:  DATA 74,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,32
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 73,75
00380:  DATA 63,63
00382:  DATA 65,73
00384:  DATA 73,66
00386:  DATA 75,6C
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,43
0038E:  DATA 6F,6D
00390:  DATA 70,6C
00392:  DATA 65,74
00394:  DATA 65,0D
00396:  DATA 0A,00
00398:  DATA 45,6E
0039A:  DATA 71,75
0039C:  DATA 65,75
0039E:  DATA 65,20
003A0:  DATA 46,6C
003A2:  DATA 61,73
003A4:  DATA 68,20
003A6:  DATA 4F,70
003A8:  DATA 65,72
003AA:  DATA 61,74
003AC:  DATA 69,6F
003AE:  DATA 6E,0D
003B0:  DATA 0A,00
003B2:  DATA 46,6C
003B4:  DATA 61,73
003B6:  DATA 68,20
003B8:  DATA 71,75
003BA:  DATA 65,75
003BC:  DATA 65,20
003BE:  DATA 69,73
003C0:  DATA 20,66
003C2:  DATA 75,6C
003C4:  DATA 6C,21
003C6:  DATA 21,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 46,6C
003CE:  DATA 61,73
003D0:  DATA 68,20
003D2:  DATA 71,75
003D4:  DATA 65,75
003D6:  DATA 65,20
003D8:  DATA 69,73
003DA:  DATA 20,65
003DC:  DATA 6D,70
003DE:  DATA 74,79
003E0:  DATA 0D,0A
003E2:  DATA 00,00
003E4:  DATA 0D,0A
003E6:  DATA 53,74
003E8:  DATA 61,72
003EA:  DATA 74,20
003EC:  DATA 6D,61
003EE:  DATA 6B,65
003F0:  DATA 5F,72
003F2:  DATA 65,63
003F4:  DATA 65,69
003F6:  DATA 76,65
003F8:  DATA 5F,63
003FA:  DATA 6F,6D
003FC:  DATA 6D,61
003FE:  DATA 6E,64
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 09,5B
00406:  DATA 42,4F
00408:  DATA 53,53
0040A:  DATA 5D,20
0040C:  DATA 3E,3E
0040E:  DATA 3E,20
00410:  DATA 00,00
00412:  DATA 45,6E
00414:  DATA 64,20
00416:  DATA 6D,61
00418:  DATA 6B,65
0041A:  DATA 5F,72
0041C:  DATA 65,63
0041E:  DATA 69,76
00420:  DATA 65,5F
00422:  DATA 63,6F
00424:  DATA 6D,6D
00426:  DATA 61,6E
00428:  DATA 64,0D
0042A:  DATA 0A,0D
0042C:  DATA 0A,00
0042E:  DATA 73,69
00430:  DATA 67,6E
00432:  DATA 61,6C
00434:  DATA 20,65
00436:  DATA 6E,64
00438:  DATA 20,77
0043A:  DATA 69,74
0043C:  DATA 68,20
0043E:  DATA 53,46
00440:  DATA 44,0D
00442:  DATA 0A,00
00444:  DATA 64,6F
00446:  DATA 6E,27
00448:  DATA 74,20
0044A:  DATA 66,69
0044C:  DATA 6E,64
0044E:  DATA 20,53
00450:  DATA 46,44
00452:  DATA 0D,0A
00454:  DATA 00,00
00456:  DATA 09,2D
00458:  DATA 3E,20
0045A:  DATA 49,6E
0045C:  DATA 76,61
0045E:  DATA 6C,69
00460:  DATA 64,20
00462:  DATA 46,72
00464:  DATA 61,6D
00466:  DATA 65,20
00468:  DATA 49,44
0046A:  DATA 20,72
0046C:  DATA 65,63
0046E:  DATA 65,69
00470:  DATA 76,65
00472:  DATA 64,3A
00474:  DATA 20,25
00476:  DATA 58,0D
00478:  DATA 0A,00
0047A:  DATA 09,2D
0047C:  DATA 3E,20
0047E:  DATA 43,52
00480:  DATA 43,20
00482:  DATA 65,72
00484:  DATA 72,6F
00486:  DATA 72,21
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 09,09
0048E:  DATA 2D,3E
00490:  DATA 20,72
00492:  DATA 65,63
00494:  DATA 65,69
00496:  DATA 76,65
00498:  DATA 64,20
0049A:  DATA 43,52
0049C:  DATA 43,3A
0049E:  DATA 20,25
004A0:  DATA 58,0D
004A2:  DATA 0A,00
004A4:  DATA 09,09
004A6:  DATA 20,20
004A8:  DATA 20,63
004AA:  DATA 6F,6C
004AC:  DATA 6C,65
004AE:  DATA 63,74
004B0:  DATA 20,43
004B2:  DATA 52,43
004B4:  DATA 20,3A
004B6:  DATA 20,25
004B8:  DATA 58,0D
004BA:  DATA 0A,00
004BC:  DATA 09,2D
004BE:  DATA 3E,20
004C0:  DATA 49,6E
004C2:  DATA 76,61
004C4:  DATA 6C,69
004C6:  DATA 64,20
004C8:  DATA 64,65
004CA:  DATA 76,69
004CC:  DATA 63,65
004CE:  DATA 20,49
004D0:  DATA 44,20
004D2:  DATA 72,65
004D4:  DATA 63,65
004D6:  DATA 69,76
004D8:  DATA 65,64
004DA:  DATA 0D,0A
004DC:  DATA 00,00
004DE:  DATA 09,09
004E0:  DATA 2D,3E
004E2:  DATA 20,72
004E4:  DATA 65,63
004E6:  DATA 65,69
004E8:  DATA 76,65
004EA:  DATA 64,3A
004EC:  DATA 20,20
004EE:  DATA 20,20
004F0:  DATA 20,25
004F2:  DATA 58,0D
004F4:  DATA 0A,00
004F6:  DATA 09,09
004F8:  DATA 20,20
004FA:  DATA 20,4D
004FC:  DATA 79,20
004FE:  DATA 64,65
00500:  DATA 76,69
00502:  DATA 63,65
00504:  DATA 20,49
00506:  DATA 44,3A
00508:  DATA 20,25
0050A:  DATA 58,0D
0050C:  DATA 0A,00
0050E:  DATA 09,5B
00510:  DATA 42,4F
00512:  DATA 53,53
00514:  DATA 5D,20
00516:  DATA 3C,3C
00518:  DATA 3C,20
0051A:  DATA 00,00
0051C:  DATA 53,74
0051E:  DATA 61,72
00520:  DATA 74,20
00522:  DATA 53,4D
00524:  DATA 46,20
00526:  DATA 75,73
00528:  DATA 69,6E
0052A:  DATA 67,20
0052C:  DATA 72,65
0052E:  DATA 71,65
00530:  DATA 73,74
00532:  DATA 20,73
00534:  DATA 65,61
00536:  DATA 71,75
00538:  DATA 65,6E
0053A:  DATA 63,65
0053C:  DATA 0D,0A
0053E:  DATA 00,00
00540:  DATA 45,72
00542:  DATA 72,6F
00544:  DATA 72,21
00546:  DATA 20,52
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,69
0054E:  DATA 6E,67
00550:  DATA 20,63
00552:  DATA 6F,6D
00554:  DATA 6D,61
00556:  DATA 6E,64
00558:  DATA 20,69
0055A:  DATA 6E,63
0055C:  DATA 6F,6E
0055E:  DATA 73,69
00560:  DATA 73,74
00562:  DATA 65,6E
00564:  DATA 74,20
00566:  DATA 77,69
00568:  DATA 74,68
0056A:  DATA 20,74
0056C:  DATA 68,65
0056E:  DATA 20,64
00570:  DATA 65,73
00572:  DATA 69,67
00574:  DATA 6E,0D
00576:  DATA 0A,00
00578:  DATA 53,4D
0057A:  DATA 46,20
0057C:  DATA 75,73
0057E:  DATA 65,20
00580:  DATA 72,65
00582:  DATA 71,75
00584:  DATA 65,73
00586:  DATA 74,20
00588:  DATA 61,6C
0058A:  DATA 6C,6F
0058C:  DATA 77,65
0058E:  DATA 64,0D
00590:  DATA 0A,00
00592:  DATA 53,4D
00594:  DATA 46,20
00596:  DATA 75,73
00598:  DATA 65,20
0059A:  DATA 72,65
0059C:  DATA 71,75
0059E:  DATA 65,73
005A0:  DATA 74,20
005A2:  DATA 64,65
005A4:  DATA 6E,79
005A6:  DATA 65,64
005A8:  DATA 0D,0A
005AA:  DATA 00,00
005AC:  DATA 52,65
005AE:  DATA 74,72
005B0:  DATA 79,20
005B2:  DATA 72,65
005B4:  DATA 71,75
005B6:  DATA 65,73
005B8:  DATA 74,20
005BA:  DATA 74,6F
005BC:  DATA 20,42
005BE:  DATA 4F,53
005C0:  DATA 53,20
005C2:  DATA 50,49
005C4:  DATA 43,0D
005C6:  DATA 0A,00
005C8:  DATA 45,72
005CA:  DATA 72,6F
005CC:  DATA 72,21
005CE:  DATA 20,52
005D0:  DATA 65,63
005D2:  DATA 65,69
005D4:  DATA 76,69
005D6:  DATA 6E,67
005D8:  DATA 20,63
005DA:  DATA 6F,6D
005DC:  DATA 6D,61
005DE:  DATA 6E,64
005E0:  DATA 20,69
005E2:  DATA 6E,63
005E4:  DATA 6F,6E
005E6:  DATA 73,69
005E8:  DATA 73,74
005EA:  DATA 65,6E
005EC:  DATA 74,20
005EE:  DATA 77,69
005F0:  DATA 74,68
005F2:  DATA 20,74
005F4:  DATA 68,65
005F6:  DATA 20,64
005F8:  DATA 65,73
005FA:  DATA 69,67
005FC:  DATA 6E,0D
005FE:  DATA 0A,00
00600:  DATA 45,6E
00602:  DATA 64,20
00604:  DATA 53,4D
00606:  DATA 46,20
00608:  DATA 75,73
0060A:  DATA 69,6E
0060C:  DATA 67,20
0060E:  DATA 72,65
00610:  DATA 71,65
00612:  DATA 73,74
00614:  DATA 20,73
00616:  DATA 65,61
00618:  DATA 71,75
0061A:  DATA 65,6E
0061C:  DATA 63,65
0061E:  DATA 0D,0A
00620:  DATA 00,00
00622:  DATA 74,65
00624:  DATA 6D,70
00626:  DATA 5F,74
00628:  DATA 6F,70
0062A:  DATA 3A,25
0062C:  DATA 30,34
0062E:  DATA 4C,58
00630:  DATA 0D,0A
00632:  DATA 00,00
00634:  DATA 74,65
00636:  DATA 6D,70
00638:  DATA 5F,62
0063A:  DATA 6F,74
0063C:  DATA 3A,25
0063E:  DATA 30,34
00640:  DATA 4C,58
00642:  DATA 0D,0A
00644:  DATA 00,00
00646:  DATA 74,65
00648:  DATA 6D,70
0064A:  DATA 5F,6D
0064C:  DATA 69,73
0064E:  DATA 37,3A
00650:  DATA 25,30
00652:  DATA 34,4C
00654:  DATA 58,0D
00656:  DATA 0A,00
00658:  DATA 70,64
0065A:  DATA 3A,25
0065C:  DATA 30,34
0065E:  DATA 4C,58
00660:  DATA 0D,0A
00662:  DATA 00,00
00664:  DATA 56,6F
00666:  DATA 6C,74
00668:  DATA 31,2C
0066A:  DATA 43,75
0066C:  DATA 72,72
0066E:  DATA 31,2C
00670:  DATA 56,6F
00672:  DATA 6C,74
00674:  DATA 32,2C
00676:  DATA 43,75
00678:  DATA 72,72
0067A:  DATA 32,0D
0067C:  DATA 0A,00
0067E:  DATA 5B,50
00680:  DATA 49,43
00682:  DATA 4C,4F
00684:  DATA 47,5D
00686:  DATA 20,3A
00688:  DATA 20,00
0068A:  DATA 53,4D
0068C:  DATA 46,20
0068E:  DATA 44,61
00690:  DATA 74,61
00692:  DATA 20,54
00694:  DATA 61,62
00696:  DATA 6C,65
00698:  DATA 20,49
0069A:  DATA 6E,69
0069C:  DATA 74,69
0069E:  DATA 61,6C
006A0:  DATA 69,7A
006A2:  DATA 65,0D
006A4:  DATA 0A,00
006A6:  DATA 43,52
006A8:  DATA 43,20
006AA:  DATA 45,52
006AC:  DATA 52,4F
006AE:  DATA 52,20
006B0:  DATA 25,64
006B2:  DATA 0D,0A
006B4:  DATA 00,00
006B6:  DATA 43,52
006B8:  DATA 43,20
006BA:  DATA 76,65
006BC:  DATA 72,69
006BE:  DATA 66,69
006C0:  DATA 63,61
006C2:  DATA 74,69
006C4:  DATA 6F,6E
006C6:  DATA 20,66
006C8:  DATA 61,69
006CA:  DATA 6C,65
006CC:  DATA 64,20
006CE:  DATA 61,66
006D0:  DATA 74,65
006D2:  DATA 72,20
006D4:  DATA 25,64
006D6:  DATA 20,61
006D8:  DATA 74,74
006DA:  DATA 65,6D
006DC:  DATA 70,74
006DE:  DATA 73,0D
006E0:  DATA 0A,00
006E2:  DATA 45,72
006E4:  DATA 72,6F
006E6:  DATA 72,3A
006E8:  DATA 20,43
006EA:  DATA 52,43
006EC:  DATA 20,76
006EE:  DATA 65,72
006F0:  DATA 69,66
006F2:  DATA 69,63
006F4:  DATA 61,74
006F6:  DATA 69,6F
006F8:  DATA 6E,20
006FA:  DATA 66,61
006FC:  DATA 69,6C
006FE:  DATA 65,64
00700:  DATA 20,61
00702:  DATA 66,74
00704:  DATA 65,72
00706:  DATA 20,25
00708:  DATA 64,20
0070A:  DATA 61,74
0070C:  DATA 74,65
0070E:  DATA 6D,70
00710:  DATA 74,73
00712:  DATA 0D,0A
00714:  DATA 00,00
00716:  DATA 0D,0A
00718:  DATA 5B,53
0071A:  DATA 4D,46
0071C:  DATA 20,43
0071E:  DATA 6F,75
00720:  DATA 6E,74
00722:  DATA 65,72
00724:  DATA 20,53
00726:  DATA 74,61
00728:  DATA 74,75
0072A:  DATA 73,5D
0072C:  DATA 0D,0A
0072E:  DATA 00,00
00730:  DATA 09,50
00732:  DATA 41,52
00734:  DATA 54,49
00736:  DATA 54,49
00738:  DATA 4F,4E
0073A:  DATA 09,55
0073C:  DATA 53,45
0073E:  DATA 44,09
00740:  DATA 09,52
00742:  DATA 45,53
00744:  DATA 45,52
00746:  DATA 56,45
00748:  DATA 0D,0A
0074A:  DATA 00,00
0074C:  DATA 09,2D
0074E:  DATA 2D,2D
00750:  DATA 2D,2D
00752:  DATA 2D,2D
00754:  DATA 2D,2D
00756:  DATA 09,2D
00758:  DATA 2D,2D
0075A:  DATA 2D,2D
0075C:  DATA 2D,2D
0075E:  DATA 2D,2D
00760:  DATA 2D,09
00762:  DATA 2D,2D
00764:  DATA 2D,2D
00766:  DATA 2D,2D
00768:  DATA 2D,2D
0076A:  DATA 2D,2D
0076C:  DATA 0D,0A
0076E:  DATA 00,00
00770:  DATA 09,50
00772:  DATA 49,43
00774:  DATA 4C,4F
00776:  DATA 47,09
00778:  DATA 09,30
0077A:  DATA 78,25
0077C:  DATA 30,38
0077E:  DATA 4C,58
00780:  DATA 09,30
00782:  DATA 78,25
00784:  DATA 30,38
00786:  DATA 4C,58
00788:  DATA 0D,0A
0078A:  DATA 00,00
0078C:  DATA 09,45
0078E:  DATA 4E,56
00790:  DATA 49,52
00792:  DATA 4F,09
00794:  DATA 09,30
00796:  DATA 78,25
00798:  DATA 30,38
0079A:  DATA 4C,58
0079C:  DATA 09,30
0079E:  DATA 78,25
007A0:  DATA 30,38
007A2:  DATA 4C,58
007A4:  DATA 0D,0A
007A6:  DATA 00,00
007A8:  DATA 09,49
007AA:  DATA 56,31
007AC:  DATA 5F,48
007AE:  DATA 45,41
007B0:  DATA 44,45
007B2:  DATA 52,09
007B4:  DATA 30,78
007B6:  DATA 25,30
007B8:  DATA 38,4C
007BA:  DATA 58,09
007BC:  DATA 30,78
007BE:  DATA 25,30
007C0:  DATA 38,4C
007C2:  DATA 58,0D
007C4:  DATA 0A,00
007C6:  DATA 09,49
007C8:  DATA 56,31
007CA:  DATA 5F,44
007CC:  DATA 41,54
007CE:  DATA 41,09
007D0:  DATA 30,78
007D2:  DATA 25,30
007D4:  DATA 38,4C
007D6:  DATA 58,09
007D8:  DATA 30,78
007DA:  DATA 25,30
007DC:  DATA 38,4C
007DE:  DATA 58,0D
007E0:  DATA 0A,00
007E2:  DATA 09,49
007E4:  DATA 56,32
007E6:  DATA 5F,48
007E8:  DATA 45,41
007EA:  DATA 44,45
007EC:  DATA 52,09
007EE:  DATA 30,78
007F0:  DATA 25,30
007F2:  DATA 38,4C
007F4:  DATA 58,09
007F6:  DATA 30,78
007F8:  DATA 25,30
007FA:  DATA 38,4C
007FC:  DATA 58,0D
007FE:  DATA 0A,00
00800:  DATA 09,49
00802:  DATA 56,32
00804:  DATA 5F,44
00806:  DATA 41,54
00808:  DATA 41,09
0080A:  DATA 30,78
0080C:  DATA 25,30
0080E:  DATA 38,4C
00810:  DATA 58,09
00812:  DATA 30,78
00814:  DATA 25,30
00816:  DATA 38,4C
00818:  DATA 58,0D
0081A:  DATA 0A,00
0081C:  DATA 09,3D
0081E:  DATA 3D,3D
00820:  DATA 3D,3D
00822:  DATA 3D,3D
00824:  DATA 3D,3D
00826:  DATA 3D,3D
00828:  DATA 3D,3D
0082A:  DATA 3D,3D
0082C:  DATA 3D,3D
0082E:  DATA 3D,3D
00830:  DATA 3D,3D
00832:  DATA 3D,3D
00834:  DATA 3D,3D
00836:  DATA 3D,3D
00838:  DATA 3D,3D
0083A:  DATA 3D,3D
0083C:  DATA 3D,3D
0083E:  DATA 3D,3D
00840:  DATA 3D,3D
00842:  DATA 3D,3D
00844:  DATA 3D,3D
00846:  DATA 3D,0D
00848:  DATA 0A,0D
0084A:  DATA 0A,00
0084C:  DATA 0D,0A
0084E:  DATA 5F,5F
00850:  DATA 5F,5F
00852:  DATA 5F,5F
00854:  DATA 5F,5F
00856:  DATA 5F,5F
00858:  DATA 5F,5F
0085A:  DATA 5F,5F
0085C:  DATA 5F,5F
0085E:  DATA 5F,5F
00860:  DATA 5F,5F
00862:  DATA 5F,5F
00864:  DATA 5F,5F
00866:  DATA 5F,5F
00868:  DATA 5F,5F
0086A:  DATA 5F,5F
0086C:  DATA 5F,0D
0086E:  DATA 0A,00
00870:  DATA 5F,5F
00872:  DATA 5F,5F
00874:  DATA 5F,5F
00876:  DATA 5F,5F
00878:  DATA 5F,53
0087A:  DATA 74,61
0087C:  DATA 72,74
0087E:  DATA 20,63
00880:  DATA 6F,70
00882:  DATA 79,5F
00884:  DATA 64,61
00886:  DATA 74,61
00888:  DATA 5F,5F
0088A:  DATA 5F,5F
0088C:  DATA 5F,5F
0088E:  DATA 5F,5F
00890:  DATA 5F,0D
00892:  DATA 0A,00
00894:  DATA 45,72
00896:  DATA 72,6F
00898:  DATA 72,3A
0089A:  DATA 20,4D
0089C:  DATA 49,53
0089E:  DATA 20,46
008A0:  DATA 4D,20
008A2:  DATA 69,73
008A4:  DATA 20,6E
008A6:  DATA 6F,74
008A8:  DATA 20,63
008AA:  DATA 6F,6E
008AC:  DATA 6E,65
008AE:  DATA 63,74
008B0:  DATA 65,64
008B2:  DATA 0D,0A
008B4:  DATA 00,00
008B6:  DATA 45,72
008B8:  DATA 72,6F
008BA:  DATA 72,3A
008BC:  DATA 20,53
008BE:  DATA 4D,46
008C0:  DATA 20,69
008C2:  DATA 73,20
008C4:  DATA 6E,6F
008C6:  DATA 74,20
008C8:  DATA 63,6F
008CA:  DATA 6E,6E
008CC:  DATA 65,63
008CE:  DATA 74,65
008D0:  DATA 64,0D
008D2:  DATA 0A,00
008D4:  DATA 46,4C
008D6:  DATA 41,53
008D8:  DATA 48,20
008DA:  DATA 49,44
008DC:  DATA 3A,20
008DE:  DATA 43,49
008E0:  DATA 47,53
008E2:  DATA 5F,44
008E4:  DATA 41,54
008E6:  DATA 41,5F
008E8:  DATA 54,41
008EA:  DATA 42,4C
008EC:  DATA 45,0D
008EE:  DATA 0A,00
008F0:  DATA 46,4C
008F2:  DATA 41,53
008F4:  DATA 48,20
008F6:  DATA 49,44
008F8:  DATA 3A,20
008FA:  DATA 43,49
008FC:  DATA 47,53
008FE:  DATA 5F,50
00900:  DATA 49,43
00902:  DATA 4C,4F
00904:  DATA 47,5F
00906:  DATA 44,41
00908:  DATA 54,41
0090A:  DATA 0D,0A
0090C:  DATA 00,00
0090E:  DATA 46,4C
00910:  DATA 41,53
00912:  DATA 48,20
00914:  DATA 49,44
00916:  DATA 3A,20
00918:  DATA 43,49
0091A:  DATA 47,53
0091C:  DATA 5F,45
0091E:  DATA 4E,56
00920:  DATA 49,52
00922:  DATA 4F,5F
00924:  DATA 44,41
00926:  DATA 54,41
00928:  DATA 0D,0A
0092A:  DATA 00,00
0092C:  DATA 46,4C
0092E:  DATA 41,53
00930:  DATA 48,20
00932:  DATA 49,44
00934:  DATA 3A,20
00936:  DATA 43,49
00938:  DATA 47,53
0093A:  DATA 5F,49
0093C:  DATA 56,31
0093E:  DATA 5F,48
00940:  DATA 45,41
00942:  DATA 44,45
00944:  DATA 52,0D
00946:  DATA 0A,00
00948:  DATA 46,4C
0094A:  DATA 41,53
0094C:  DATA 48,20
0094E:  DATA 49,44
00950:  DATA 3A,20
00952:  DATA 43,49
00954:  DATA 47,53
00956:  DATA 5F,49
00958:  DATA 56,31
0095A:  DATA 5F,44
0095C:  DATA 41,54
0095E:  DATA 41,0D
00960:  DATA 0A,00
00962:  DATA 46,4C
00964:  DATA 41,53
00966:  DATA 48,20
00968:  DATA 49,44
0096A:  DATA 3A,20
0096C:  DATA 43,49
0096E:  DATA 47,53
00970:  DATA 5F,49
00972:  DATA 56,32
00974:  DATA 5F,48
00976:  DATA 45,41
00978:  DATA 44,45
0097A:  DATA 52,0D
0097C:  DATA 0A,00
0097E:  DATA 46,4C
00980:  DATA 41,53
00982:  DATA 48,20
00984:  DATA 49,44
00986:  DATA 3A,20
00988:  DATA 43,49
0098A:  DATA 47,53
0098C:  DATA 5F,49
0098E:  DATA 56,32
00990:  DATA 5F,44
00992:  DATA 41,54
00994:  DATA 41,0D
00996:  DATA 0A,00
00998:  DATA 45,72
0099A:  DATA 72,6F
0099C:  DATA 72,3A
0099E:  DATA 20,49
009A0:  DATA 6E,76
009A2:  DATA 61,6C
009A4:  DATA 69,64
009A6:  DATA 20,6D
009A8:  DATA 69,73
009AA:  DATA 73,69
009AC:  DATA 6F,6E
009AE:  DATA 20,49
009B0:  DATA 44,20
009B2:  DATA 25,64
009B4:  DATA 0D,0A
009B6:  DATA 00,00
009B8:  DATA 5B,4D
009BA:  DATA 49,53
009BC:  DATA 46,20
009BE:  DATA 41,44
009C0:  DATA 44,52
009C2:  DATA 45,53
009C4:  DATA 53,5D
009C6:  DATA 0D,0A
009C8:  DATA 00,00
009CA:  DATA 09,50
009CC:  DATA 61,72
009CE:  DATA 61,6D
009D0:  DATA 09,44
009D2:  DATA 61,74
009D4:  DATA 61,0D
009D6:  DATA 0A,00
009D8:  DATA 09,2D
009DA:  DATA 2D,2D
009DC:  DATA 2D,2D
009DE:  DATA 09,2D
009E0:  DATA 2D,2D
009E2:  DATA 2D,2D
009E4:  DATA 2D,2D
009E6:  DATA 2D,2D
009E8:  DATA 2D,0D
009EA:  DATA 0A,00
009EC:  DATA 09,53
009EE:  DATA 54,41
009F0:  DATA 52,54
009F2:  DATA 09,30
009F4:  DATA 78,25
009F6:  DATA 30,38
009F8:  DATA 4C,58
009FA:  DATA 0D,0A
009FC:  DATA 00,00
009FE:  DATA 09,45
00A00:  DATA 4E,44
00A02:  DATA 09,30
00A04:  DATA 78,25
00A06:  DATA 30,38
00A08:  DATA 4C,58
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 09,53
00A10:  DATA 52,43
00A12:  DATA 09,30
00A14:  DATA 78,25
00A16:  DATA 30,38
00A18:  DATA 4C,58
00A1A:  DATA 0D,0A
00A1C:  DATA 00,00
00A1E:  DATA 09,53
00A20:  DATA 49,5A
00A22:  DATA 45,09
00A24:  DATA 30,78
00A26:  DATA 25,30
00A28:  DATA 38,4C
00A2A:  DATA 58,0D
00A2C:  DATA 0A,00
00A2E:  DATA 09,2D
00A30:  DATA 2D,2D
00A32:  DATA 2D,2D
00A34:  DATA 09,2D
00A36:  DATA 2D,2D
00A38:  DATA 2D,2D
00A3A:  DATA 2D,2D
00A3C:  DATA 2D,2D
00A3E:  DATA 2D,0D
00A40:  DATA 0A,00
00A42:  DATA 5B,53
00A44:  DATA 4D,46
00A46:  DATA 20,41
00A48:  DATA 44,44
00A4A:  DATA 52,45
00A4C:  DATA 53,53
00A4E:  DATA 5D,0D
00A50:  DATA 0A,00
00A52:  DATA 09,50
00A54:  DATA 61,72
00A56:  DATA 61,6D
00A58:  DATA 09,44
00A5A:  DATA 61,74
00A5C:  DATA 61,0D
00A5E:  DATA 0A,00
00A60:  DATA 09,2D
00A62:  DATA 2D,2D
00A64:  DATA 2D,2D
00A66:  DATA 09,2D
00A68:  DATA 2D,2D
00A6A:  DATA 2D,2D
00A6C:  DATA 2D,2D
00A6E:  DATA 2D,2D
00A70:  DATA 2D,0D
00A72:  DATA 0A,00
00A74:  DATA 09,53
00A76:  DATA 54,41
00A78:  DATA 52,54
00A7A:  DATA 09,30
00A7C:  DATA 78,25
00A7E:  DATA 30,38
00A80:  DATA 4C,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,45
00A88:  DATA 4E,44
00A8A:  DATA 09,30
00A8C:  DATA 78,25
00A8E:  DATA 30,38
00A90:  DATA 4C,58
00A92:  DATA 0D,0A
00A94:  DATA 00,00
00A96:  DATA 09,2D
00A98:  DATA 2D,2D
00A9A:  DATA 2D,2D
00A9C:  DATA 09,2D
00A9E:  DATA 2D,2D
00AA0:  DATA 2D,2D
00AA2:  DATA 2D,2D
00AA4:  DATA 2D,2D
00AA6:  DATA 2D,0D
00AA8:  DATA 0A,00
00AAA:  DATA 45,52
00AAC:  DATA 41,53
00AAE:  DATA 45,20
00AB0:  DATA 53,4D
00AB2:  DATA 46,20
00AB4:  DATA 41,52
00AB6:  DATA 45,41
00AB8:  DATA 0D,0A
00ABA:  DATA 00,00
00ABC:  DATA 09,45
00ABE:  DATA 52,41
00AC0:  DATA 53,45
00AC2:  DATA 20,53
00AC4:  DATA 4D,46
00AC6:  DATA 20,41
00AC8:  DATA 52,45
00ACA:  DATA 41,20
00ACC:  DATA 44,4F
00ACE:  DATA 4E,45
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 57,52
00AD6:  DATA 49,54
00AD8:  DATA 45,20
00ADA:  DATA 44,41
00ADC:  DATA 54,41
00ADE:  DATA 20,54
00AE0:  DATA 4F,20
00AE2:  DATA 53,4D
00AE4:  DATA 46,0D
00AE6:  DATA 0A,00
00AE8:  DATA 55,50
00AEA:  DATA 44,41
00AEC:  DATA 54,45
00AEE:  DATA 20,53
00AF0:  DATA 4D,46
00AF2:  DATA 20,43
00AF4:  DATA 4F,55
00AF6:  DATA 4E,54
00AF8:  DATA 45,52
00AFA:  DATA 20,53
00AFC:  DATA 54,41
00AFE:  DATA 54,55
00B00:  DATA 53,0D
00B02:  DATA 0A,00
00B04:  DATA 0D,0A
00B06:  DATA 5F,5F
00B08:  DATA 5F,5F
00B0A:  DATA 5F,5F
00B0C:  DATA 5F,5F
00B0E:  DATA 5F,45
00B10:  DATA 6E,64
00B12:  DATA 20,63
00B14:  DATA 6F,70
00B16:  DATA 79,5F
00B18:  DATA 64,61
00B1A:  DATA 74,61
00B1C:  DATA 5F,5F
00B1E:  DATA 5F,5F
00B20:  DATA 5F,5F
00B22:  DATA 5F,5F
00B24:  DATA 5F,5F
00B26:  DATA 0D,0A
00B28:  DATA 00,00
00B2A:  DATA 5F,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,5F
00B32:  DATA 5F,5F
00B34:  DATA 5F,5F
00B36:  DATA 5F,5F
00B38:  DATA 5F,5F
00B3A:  DATA 5F,5F
00B3C:  DATA 5F,5F
00B3E:  DATA 5F,5F
00B40:  DATA 5F,5F
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,5F
00B48:  DATA 5F,0D
00B4A:  DATA 0A,0D
00B4C:  DATA 0A,00
00B4E:  DATA 0D,0A
00B50:  DATA 5F,5F
00B52:  DATA 5F,5F
00B54:  DATA 5F,5F
00B56:  DATA 5F,5F
00B58:  DATA 5F,5F
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,5F
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 5F,5F
00B6A:  DATA 5F,53
00B6C:  DATA 74,61
00B6E:  DATA 72,74
00B70:  DATA 20,53
00B72:  DATA 4D,46
00B74:  DATA 20,52
00B76:  DATA 65,61
00B78:  DATA 64,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,0D
00B7E:  DATA 0A,00
00B80:  DATA 45,72
00B82:  DATA 72,6F
00B84:  DATA 72,3A
00B86:  DATA 20,52
00B88:  DATA 65,61
00B8A:  DATA 64,20
00B8C:  DATA 61,64
00B8E:  DATA 64,72
00B90:  DATA 65,73
00B92:  DATA 73,20
00B94:  DATA 30,78
00B96:  DATA 25,30
00B98:  DATA 38,4C
00B9A:  DATA 58,20
00B9C:  DATA 6F,75
00B9E:  DATA 74,20
00BA0:  DATA 6F,66
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,6D
00BA8:  DATA 69,73
00BAA:  DATA 73,69
00BAC:  DATA 6F,6E
00BAE:  DATA 20,72
00BB0:  DATA 61,6E
00BB2:  DATA 67,65
00BB4:  DATA 20,5B
00BB6:  DATA 30,78
00BB8:  DATA 25,30
00BBA:  DATA 38,4C
00BBC:  DATA 58,20
00BBE:  DATA 2D,20
00BC0:  DATA 30,78
00BC2:  DATA 25,30
00BC4:  DATA 38,4C
00BC6:  DATA 58,29
00BC8:  DATA 0D,0A
00BCA:  DATA 00,00
00BCC:  DATA 57,61
00BCE:  DATA 72,6E
00BD0:  DATA 3A,20
00BD2:  DATA 41,64
00BD4:  DATA 6A,75
00BD6:  DATA 73,74
00BD8:  DATA 20,72
00BDA:  DATA 65,61
00BDC:  DATA 64,20
00BDE:  DATA 73,69
00BE0:  DATA 7A,65
00BE2:  DATA 20,66
00BE4:  DATA 72,6F
00BE6:  DATA 6D,20
00BE8:  DATA 25,6C
00BEA:  DATA 75,20
00BEC:  DATA 74,6F
00BEE:  DATA 20,25
00BF0:  DATA 6C,75
00BF2:  DATA 20,28
00BF4:  DATA 6D,69
00BF6:  DATA 73,73
00BF8:  DATA 69,6F
00BFA:  DATA 6E,20
00BFC:  DATA 65,6E
00BFE:  DATA 64,29
00C00:  DATA 0D,0A
00C02:  DATA 00,00
00C04:  DATA 49,6E
00C06:  DATA 66,6F
00C08:  DATA 3A,20
00C0A:  DATA 4E,6F
00C0C:  DATA 74,68
00C0E:  DATA 69,6E
00C10:  DATA 67,20
00C12:  DATA 74,6F
00C14:  DATA 20,72
00C16:  DATA 65,61
00C18:  DATA 64,20
00C1A:  DATA 28,73
00C1C:  DATA 69,7A
00C1E:  DATA 65,3D
00C20:  DATA 30,29
00C22:  DATA 0D,0A
00C24:  DATA 00,00
00C26:  DATA 49,6E
00C28:  DATA 20,53
00C2A:  DATA 4D,46
00C2C:  DATA 20,52
00C2E:  DATA 65,61
00C30:  DATA 64,20
00C32:  DATA 73,6F
00C34:  DATA 75,72
00C36:  DATA 63,65
00C38:  DATA 20,64
00C3A:  DATA 61,74
00C3C:  DATA 61,20
00C3E:  DATA 61,64
00C40:  DATA 64,72
00C42:  DATA 65,73
00C44:  DATA 73,3A
00C46:  DATA 20,25
00C48:  DATA 4C,58
00C4A:  DATA 0D,0A
00C4C:  DATA 00,00
00C4E:  DATA 49,6E
00C50:  DATA 20,53
00C52:  DATA 4D,46
00C54:  DATA 20,52
00C56:  DATA 65,61
00C58:  DATA 64,20
00C5A:  DATA 64,61
00C5C:  DATA 74,61
00C5E:  DATA 20,73
00C60:  DATA 69,7A
00C62:  DATA 65,20
00C64:  DATA 20,20
00C66:  DATA 20,20
00C68:  DATA 20,20
00C6A:  DATA 20,20
00C6C:  DATA 20,3A
00C6E:  DATA 20,25
00C70:  DATA 6C,75
00C72:  DATA 20,28
00C74:  DATA 30,78
00C76:  DATA 25,6C
00C78:  DATA 78,29
00C7A:  DATA 0D,0A
00C7C:  DATA 0D,0A
00C7E:  DATA 00,00
00C80:  DATA 45,72
00C82:  DATA 72,6F
00C84:  DATA 72,3A
00C86:  DATA 20,53
00C88:  DATA 4D,46
00C8A:  DATA 20,69
00C8C:  DATA 73,20
00C8E:  DATA 6E,6F
00C90:  DATA 74,20
00C92:  DATA 63,6F
00C94:  DATA 6E,6E
00C96:  DATA 65,63
00C98:  DATA 74,65
00C9A:  DATA 64,0D
00C9C:  DATA 0A,00
00C9E:  DATA 52,45
00CA0:  DATA 41,44
00CA2:  DATA 20,44
00CA4:  DATA 41,54
00CA6:  DATA 41,20
00CA8:  DATA 46,52
00CAA:  DATA 4F,4D
00CAC:  DATA 20,53
00CAE:  DATA 4D,46
00CB0:  DATA 2E,2E
00CB2:  DATA 2E,0D
00CB4:  DATA 0A,00
00CB6:  DATA 0D,0A
00CB8:  DATA 5F,5F
00CBA:  DATA 5F,45
00CBC:  DATA 6E,64
00CBE:  DATA 20,53
00CC0:  DATA 4D,46
00CC2:  DATA 20,52
00CC4:  DATA 65,61
00CC6:  DATA 64,5F
00CC8:  DATA 5F,5F
00CCA:  DATA 5F,0D
00CCC:  DATA 0A,00
00CCE:  DATA 5F,5F
00CD0:  DATA 5F,5F
00CD2:  DATA 5F,5F
00CD4:  DATA 5F,5F
00CD6:  DATA 5F,5F
00CD8:  DATA 5F,5F
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,5F
00CDE:  DATA 5F,5F
00CE0:  DATA 5F,5F
00CE2:  DATA 0D,0A
00CE4:  DATA 0D,0A
00CE6:  DATA 00,00
00CE8:  DATA 0D,0A
00CEA:  DATA 5F,5F
00CEC:  DATA 5F,5F
00CEE:  DATA 5F,5F
00CF0:  DATA 5F,5F
00CF2:  DATA 5F,5F
00CF4:  DATA 5F,5F
00CF6:  DATA 5F,5F
00CF8:  DATA 5F,5F
00CFA:  DATA 5F,5F
00CFC:  DATA 5F,5F
00CFE:  DATA 0D,0A
00D00:  DATA 00,00
00D02:  DATA 5F,5F
00D04:  DATA 5F,53
00D06:  DATA 74,61
00D08:  DATA 72,74
00D0A:  DATA 20,73
00D0C:  DATA 6D,66
00D0E:  DATA 5F,65
00D10:  DATA 72,61
00D12:  DATA 73,65
00D14:  DATA 5F,5F
00D16:  DATA 5F,5F
00D18:  DATA 0D,0A
00D1A:  DATA 00,00
00D1C:  DATA 5B,53
00D1E:  DATA 4D,46
00D20:  DATA 5D,20
00D22:  DATA 45,72
00D24:  DATA 61,73
00D26:  DATA 65,20
00D28:  DATA 61,64
00D2A:  DATA 64,72
00D2C:  DATA 65,73
00D2E:  DATA 73,20
00D30:  DATA 20,20
00D32:  DATA 3A,20
00D34:  DATA 25,4C
00D36:  DATA 58,0D
00D38:  DATA 0A,00
00D3A:  DATA 5B,53
00D3C:  DATA 4D,46
00D3E:  DATA 5D,20
00D40:  DATA 45,72
00D42:  DATA 61,73
00D44:  DATA 65,20
00D46:  DATA 64,61
00D48:  DATA 74,61
00D4A:  DATA 20,73
00D4C:  DATA 69,7A
00D4E:  DATA 65,20
00D50:  DATA 3A,20
00D52:  DATA 25,6C
00D54:  DATA 75,20
00D56:  DATA 28,30
00D58:  DATA 78,25
00D5A:  DATA 6C,78
00D5C:  DATA 29,0D
00D5E:  DATA 0A,0D
00D60:  DATA 0A,00
00D62:  DATA 45,72
00D64:  DATA 72,6F
00D66:  DATA 72,3A
00D68:  DATA 20,53
00D6A:  DATA 4D,46
00D6C:  DATA 20,69
00D6E:  DATA 73,20
00D70:  DATA 6E,6F
00D72:  DATA 74,20
00D74:  DATA 63,6F
00D76:  DATA 6E,6E
00D78:  DATA 65,63
00D7A:  DATA 74,65
00D7C:  DATA 64,0D
00D7E:  DATA 0A,00
00D80:  DATA 45,72
00D82:  DATA 72,6F
00D84:  DATA 72,3A
00D86:  DATA 20,45
00D88:  DATA 72,61
00D8A:  DATA 73,65
00D8C:  DATA 20,73
00D8E:  DATA 6F,75
00D90:  DATA 72,63
00D92:  DATA 65,20
00D94:  DATA 61,64
00D96:  DATA 64,72
00D98:  DATA 65,73
00D9A:  DATA 73,20
00D9C:  DATA 30,78
00D9E:  DATA 25,4C
00DA0:  DATA 58,20
00DA2:  DATA 69,73
00DA4:  DATA 20,6F
00DA6:  DATA 75,74
00DA8:  DATA 73,69
00DAA:  DATA 64,65
00DAC:  DATA 20,6D
00DAE:  DATA 69,73
00DB0:  DATA 73,69
00DB2:  DATA 6F,6E
00DB4:  DATA 20,72
00DB6:  DATA 61,6E
00DB8:  DATA 67,65
00DBA:  DATA 20,5B
00DBC:  DATA 30,78
00DBE:  DATA 25,4C
00DC0:  DATA 58,20
00DC2:  DATA 2D,20
00DC4:  DATA 30,78
00DC6:  DATA 25,4C
00DC8:  DATA 58,5D
00DCA:  DATA 0D,0A
00DCC:  DATA 00,00
00DCE:  DATA 45,72
00DD0:  DATA 72,6F
00DD2:  DATA 72,3A
00DD4:  DATA 20,45
00DD6:  DATA 72,61
00DD8:  DATA 73,65
00DDA:  DATA 20,6F
00DDC:  DATA 70,65
00DDE:  DATA 72,61
00DE0:  DATA 74,69
00DE2:  DATA 6F,6E
00DE4:  DATA 20,77
00DE6:  DATA 6F,75
00DE8:  DATA 6C,64
00DEA:  DATA 20,65
00DEC:  DATA 78,63
00DEE:  DATA 65,65
00DF0:  DATA 64,20
00DF2:  DATA 6D,69
00DF4:  DATA 73,73
00DF6:  DATA 69,6F
00DF8:  DATA 6E,20
00DFA:  DATA 65,6E
00DFC:  DATA 64,20
00DFE:  DATA 61,64
00E00:  DATA 64,72
00E02:  DATA 65,73
00E04:  DATA 73,20
00E06:  DATA 30,78
00E08:  DATA 25,4C
00E0A:  DATA 58,0D
00E0C:  DATA 0A,00
00E0E:  DATA 4C,69
00E10:  DATA 6D,69
00E12:  DATA 74,69
00E14:  DATA 6E,67
00E16:  DATA 20,65
00E18:  DATA 72,61
00E1A:  DATA 73,65
00E1C:  DATA 20,73
00E1E:  DATA 69,7A
00E20:  DATA 65,20
00E22:  DATA 74,6F
00E24:  DATA 20,73
00E26:  DATA 74,61
00E28:  DATA 79,20
00E2A:  DATA 77,69
00E2C:  DATA 74,68
00E2E:  DATA 69,6E
00E30:  DATA 20,6D
00E32:  DATA 69,73
00E34:  DATA 73,69
00E36:  DATA 6F,6E
00E38:  DATA 20,62
00E3A:  DATA 6F,75
00E3C:  DATA 6E,64
00E3E:  DATA 73,0D
00E40:  DATA 0A,00
00E42:  DATA 45,72
00E44:  DATA 61,73
00E46:  DATA 65,20
00E48:  DATA 6F,70
00E4A:  DATA 65,72
00E4C:  DATA 61,74
00E4E:  DATA 69,6F
00E50:  DATA 6E,20
00E52:  DATA 76,61
00E54:  DATA 6C,69
00E56:  DATA 64,61
00E58:  DATA 74,65
00E5A:  DATA 64,20
00E5C:  DATA 77,69
00E5E:  DATA 74,68
00E60:  DATA 69,6E
00E62:  DATA 20,6D
00E64:  DATA 69,73
00E66:  DATA 73,69
00E68:  DATA 6F,6E
00E6A:  DATA 20,72
00E6C:  DATA 61,6E
00E6E:  DATA 67,65
00E70:  DATA 0D,0A
00E72:  DATA 00,00
00E74:  DATA 45,72
00E76:  DATA 61,73
00E78:  DATA 65,64
00E7A:  DATA 20,25
00E7C:  DATA 6C,75
00E7E:  DATA 20,62
00E80:  DATA 79,74
00E82:  DATA 65,73
00E84:  DATA 20,28
00E86:  DATA 61,6C
00E88:  DATA 69,67
00E8A:  DATA 6E,65
00E8C:  DATA 64,29
00E8E:  DATA 0D,0A
00E90:  DATA 00,00
00E92:  DATA 0D,0A
00E94:  DATA 5F,5F
00E96:  DATA 5F,45
00E98:  DATA 6E,64
00E9A:  DATA 20,73
00E9C:  DATA 6D,66
00E9E:  DATA 5F,65
00EA0:  DATA 72,61
00EA2:  DATA 73,65
00EA4:  DATA 5F,5F
00EA6:  DATA 5F,5F
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 5F,5F
00EAE:  DATA 5F,5F
00EB0:  DATA 5F,5F
00EB2:  DATA 5F,5F
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,5F
00EBA:  DATA 5F,5F
00EBC:  DATA 5F,5F
00EBE:  DATA 5F,5F
00EC0:  DATA 0D,0A
00EC2:  DATA 0D,0A
00EC4:  DATA 00,00
00EC6:  DATA 4D,49
00EC8:  DATA 53,53
00ECA:  DATA 49,4F
00ECC:  DATA 4E,20
00ECE:  DATA 46,4C
00ED0:  DATA 41,53
00ED2:  DATA 48,20
00ED4:  DATA 49,6E
00ED6:  DATA 69,74
00ED8:  DATA 69,61
00EDA:  DATA 6C,69
00EDC:  DATA 7A,65
00EDE:  DATA 0D,0A
00EE0:  DATA 00,00
00EE2:  DATA 09,5B
00EE4:  DATA 4D,49
00EE6:  DATA 53,20
00EE8:  DATA 46,4D
00EEA:  DATA 5D,20
00EEC:  DATA 43,6F
00EEE:  DATA 6E,6E
00EF0:  DATA 65,63
00EF2:  DATA 74,65
00EF4:  DATA 64,0D
00EF6:  DATA 0A,00
00EF8:  DATA 09,5B
00EFA:  DATA 4D,49
00EFC:  DATA 53,20
00EFE:  DATA 46,4D
00F00:  DATA 5D,20
00F02:  DATA 4E,6F
00F04:  DATA 74,20
00F06:  DATA 43,6F
00F08:  DATA 6E,6E
00F0A:  DATA 65,63
00F0C:  DATA 74,65
00F0E:  DATA 64,0D
00F10:  DATA 0A,00
00F12:  DATA 09,5B
00F14:  DATA 53,4D
00F16:  DATA 46,5D
00F18:  DATA 20,43
00F1A:  DATA 6F,6E
00F1C:  DATA 6E,65
00F1E:  DATA 63,74
00F20:  DATA 65,64
00F22:  DATA 0D,0A
00F24:  DATA 00,00
00F26:  DATA 09,5B
00F28:  DATA 53,4D
00F2A:  DATA 46,5D
00F2C:  DATA 20,4E
00F2E:  DATA 6F,74
00F30:  DATA 20,43
00F32:  DATA 6F,6E
00F34:  DATA 6E,65
00F36:  DATA 63,74
00F38:  DATA 65,64
00F3A:  DATA 0D,0A
00F3C:  DATA 00,00
00F3E:  DATA 09,5B
00F40:  DATA 4D,49
00F42:  DATA 53,20
00F44:  DATA 46,4D
00F46:  DATA 5D,20
00F48:  DATA 25,30
00F4A:  DATA 38,4C
00F4C:  DATA 58,0D
00F4E:  DATA 0A,00
00F50:  DATA 09,5B
00F52:  DATA 4D,49
00F54:  DATA 53,20
00F56:  DATA 46,4D
00F58:  DATA 5D,20
00F5A:  DATA 43,52
00F5C:  DATA 43,20
00F5E:  DATA 65,72
00F60:  DATA 72,6F
00F62:  DATA 72,20
00F64:  DATA 2D,3E
00F66:  DATA 20,69
00F68:  DATA 6E,69
00F6A:  DATA 74,69
00F6C:  DATA 61,6C
00F6E:  DATA 69,7A
00F70:  DATA 65,20
00F72:  DATA 63,6F
00F74:  DATA 75,6E
00F76:  DATA 74,65
00F78:  DATA 72,73
00F7A:  DATA 0D,0A
00F7C:  DATA 00,00
00F7E:  DATA 09,43
00F80:  DATA 6F,6D
00F82:  DATA 70,6C
00F84:  DATA 65,74
00F86:  DATA 65,0D
00F88:  DATA 0A,00
00F8A:  DATA 09,46
00F8C:  DATA 69,65
00F8E:  DATA 6C,64
00F90:  DATA 09,09
00F92:  DATA 43,6F
00F94:  DATA 75,6E
00F96:  DATA 74,65
00F98:  DATA 72,4E
00F9A:  DATA 61,6D
00F9C:  DATA 65,09
00F9E:  DATA 56,61
00FA0:  DATA 6C,75
00FA2:  DATA 65,0D
00FA4:  DATA 0A,00
00FA6:  DATA 09,2D
00FA8:  DATA 2D,2D
00FAA:  DATA 2D,2D
00FAC:  DATA 2D,2D
00FAE:  DATA 2D,2D
00FB0:  DATA 2D,2D
00FB2:  DATA 2D,09
00FB4:  DATA 2D,2D
00FB6:  DATA 2D,2D
00FB8:  DATA 2D,2D
00FBA:  DATA 2D,2D
00FBC:  DATA 2D,2D
00FBE:  DATA 2D,2D
00FC0:  DATA 2D,09
00FC2:  DATA 2D,2D
00FC4:  DATA 2D,2D
00FC6:  DATA 2D,2D
00FC8:  DATA 2D,2D
00FCA:  DATA 2D,2D
00FCC:  DATA 2D,2D
00FCE:  DATA 2D,0D
00FD0:  DATA 0A,00
00FD2:  DATA 09,50
00FD4:  DATA 49,43
00FD6:  DATA 4C,4F
00FD8:  DATA 47,09
00FDA:  DATA 09,55
00FDC:  DATA 73,65
00FDE:  DATA 64,09
00FE0:  DATA 09,30
00FE2:  DATA 78,25
00FE4:  DATA 30,38
00FE6:  DATA 4C,58
00FE8:  DATA 0D,0A
00FEA:  DATA 00,00
00FEC:  DATA 09,09
00FEE:  DATA 09,55
00FF0:  DATA 6E,63
00FF2:  DATA 6F,70
00FF4:  DATA 79,65
00FF6:  DATA 64,09
00FF8:  DATA 30,78
00FFA:  DATA 25,30
00FFC:  DATA 38,4C
00FFE:  DATA 58,0D
01000:  DATA 0A,00
01002:  DATA 09,09
01004:  DATA 09,52
01006:  DATA 65,73
01008:  DATA 65,72
0100A:  DATA 76,65
0100C:  DATA 09,09
0100E:  DATA 30,78
01010:  DATA 25,30
01012:  DATA 32,58
01014:  DATA 2F,20
01016:  DATA 30,78
01018:  DATA 25,30
0101A:  DATA 32,58
0101C:  DATA 0D,0A
0101E:  DATA 00,00
01020:  DATA 09,45
01022:  DATA 4E,56
01024:  DATA 49,52
01026:  DATA 4F,09
01028:  DATA 09,55
0102A:  DATA 73,65
0102C:  DATA 64,09
0102E:  DATA 09,30
01030:  DATA 78,25
01032:  DATA 30,38
01034:  DATA 4C,58
01036:  DATA 0D,0A
01038:  DATA 00,00
0103A:  DATA 09,09
0103C:  DATA 09,55
0103E:  DATA 6E,63
01040:  DATA 6F,70
01042:  DATA 79,65
01044:  DATA 64,09
01046:  DATA 30,78
01048:  DATA 25,30
0104A:  DATA 38,4C
0104C:  DATA 58,0D
0104E:  DATA 0A,00
01050:  DATA 09,09
01052:  DATA 09,52
01054:  DATA 65,73
01056:  DATA 65,72
01058:  DATA 76,65
0105A:  DATA 09,09
0105C:  DATA 30,78
0105E:  DATA 25,30
01060:  DATA 32,58
01062:  DATA 2F,20
01064:  DATA 30,78
01066:  DATA 25,30
01068:  DATA 32,58
0106A:  DATA 0D,0A
0106C:  DATA 00,00
0106E:  DATA 09,49
01070:  DATA 56,31
01072:  DATA 20,48
01074:  DATA 45,41
01076:  DATA 44,45
01078:  DATA 52,09
0107A:  DATA 55,73
0107C:  DATA 65,64
0107E:  DATA 09,09
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 38,4C
01086:  DATA 58,0D
01088:  DATA 0A,00
0108A:  DATA 09,09
0108C:  DATA 09,55
0108E:  DATA 6E,63
01090:  DATA 6F,70
01092:  DATA 79,65
01094:  DATA 64,09
01096:  DATA 30,78
01098:  DATA 25,30
0109A:  DATA 38,4C
0109C:  DATA 58,0D
0109E:  DATA 0A,00
010A0:  DATA 09,09
010A2:  DATA 09,52
010A4:  DATA 65,73
010A6:  DATA 65,72
010A8:  DATA 76,65
010AA:  DATA 09,09
010AC:  DATA 30,78
010AE:  DATA 25,30
010B0:  DATA 32,58
010B2:  DATA 2F,20
010B4:  DATA 30,78
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 0D,0A
010BC:  DATA 00,00
010BE:  DATA 09,49
010C0:  DATA 56,31
010C2:  DATA 20,44
010C4:  DATA 41,54
010C6:  DATA 41,09
010C8:  DATA 55,73
010CA:  DATA 65,64
010CC:  DATA 09,09
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 38,4C
010D4:  DATA 58,0D
010D6:  DATA 0A,00
010D8:  DATA 09,09
010DA:  DATA 09,55
010DC:  DATA 6E,63
010DE:  DATA 6F,70
010E0:  DATA 79,65
010E2:  DATA 64,09
010E4:  DATA 30,78
010E6:  DATA 25,30
010E8:  DATA 38,4C
010EA:  DATA 58,0D
010EC:  DATA 0A,00
010EE:  DATA 09,09
010F0:  DATA 09,52
010F2:  DATA 65,73
010F4:  DATA 65,72
010F6:  DATA 76,65
010F8:  DATA 09,09
010FA:  DATA 30,78
010FC:  DATA 25,30
010FE:  DATA 32,58
01100:  DATA 2F,20
01102:  DATA 30,78
01104:  DATA 25,30
01106:  DATA 32,58
01108:  DATA 0D,0A
0110A:  DATA 00,00
0110C:  DATA 09,49
0110E:  DATA 56,32
01110:  DATA 20,48
01112:  DATA 45,41
01114:  DATA 44,45
01116:  DATA 52,09
01118:  DATA 55,73
0111A:  DATA 65,64
0111C:  DATA 09,09
0111E:  DATA 30,78
01120:  DATA 25,30
01122:  DATA 38,4C
01124:  DATA 58,0D
01126:  DATA 0A,00
01128:  DATA 09,09
0112A:  DATA 09,55
0112C:  DATA 6E,63
0112E:  DATA 6F,70
01130:  DATA 79,65
01132:  DATA 64,09
01134:  DATA 30,78
01136:  DATA 25,30
01138:  DATA 38,4C
0113A:  DATA 58,0D
0113C:  DATA 0A,00
0113E:  DATA 09,09
01140:  DATA 09,52
01142:  DATA 65,73
01144:  DATA 65,72
01146:  DATA 76,65
01148:  DATA 09,09
0114A:  DATA 30,78
0114C:  DATA 25,30
0114E:  DATA 32,58
01150:  DATA 2F,20
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 0D,0A
0115A:  DATA 00,00
0115C:  DATA 09,49
0115E:  DATA 56,32
01160:  DATA 20,44
01162:  DATA 41,54
01164:  DATA 41,09
01166:  DATA 55,73
01168:  DATA 65,64
0116A:  DATA 09,09
0116C:  DATA 30,78
0116E:  DATA 25,30
01170:  DATA 38,4C
01172:  DATA 58,0D
01174:  DATA 0A,00
01176:  DATA 09,09
01178:  DATA 09,55
0117A:  DATA 6E,63
0117C:  DATA 6F,70
0117E:  DATA 79,65
01180:  DATA 64,09
01182:  DATA 30,78
01184:  DATA 25,30
01186:  DATA 38,4C
01188:  DATA 58,0D
0118A:  DATA 0A,00
0118C:  DATA 09,09
0118E:  DATA 09,52
01190:  DATA 65,73
01192:  DATA 65,72
01194:  DATA 76,65
01196:  DATA 09,09
01198:  DATA 30,78
0119A:  DATA 25,30
0119C:  DATA 32,58
0119E:  DATA 2F,20
011A0:  DATA 30,78
011A2:  DATA 25,30
011A4:  DATA 32,58
011A6:  DATA 0D,0A
011A8:  DATA 00,00
011AA:  DATA 09,3D
011AC:  DATA 3D,3D
011AE:  DATA 3D,3D
011B0:  DATA 3D,3D
011B2:  DATA 3D,3D
011B4:  DATA 3D,3D
011B6:  DATA 3D,3D
011B8:  DATA 3D,3D
011BA:  DATA 3D,3D
011BC:  DATA 3D,3D
011BE:  DATA 3D,3D
011C0:  DATA 3D,3D
011C2:  DATA 3D,3D
011C4:  DATA 3D,3D
011C6:  DATA 3D,3D
011C8:  DATA 3D,3D
011CA:  DATA 3D,3D
011CC:  DATA 3D,3D
011CE:  DATA 3D,3D
011D0:  DATA 3D,3D
011D2:  DATA 3D,3D
011D4:  DATA 3D,3D
011D6:  DATA 3D,3D
011D8:  DATA 3D,3D
011DA:  DATA 3D,3D
011DC:  DATA 3D,0D
011DE:  DATA 0A,00
011E0:  DATA 43,52
011E2:  DATA 43,20
011E4:  DATA 76,65
011E6:  DATA 72,69
011E8:  DATA 66,69
011EA:  DATA 63,61
011EC:  DATA 74,69
011EE:  DATA 6F,6E
011F0:  DATA 20,70
011F2:  DATA 61,73
011F4:  DATA 73,65
011F6:  DATA 64,20
011F8:  DATA 6F,6E
011FA:  DATA 20,61
011FC:  DATA 74,74
011FE:  DATA 65,6D
01200:  DATA 70,74
01202:  DATA 20,25
01204:  DATA 64,0D
01206:  DATA 0A,00
01208:  DATA 45,72
0120A:  DATA 72,6F
0120C:  DATA 72,3A
0120E:  DATA 20,43
01210:  DATA 52,43
01212:  DATA 20,76
01214:  DATA 65,72
01216:  DATA 69,66
01218:  DATA 69,63
0121A:  DATA 61,74
0121C:  DATA 69,6F
0121E:  DATA 6E,20
01220:  DATA 66,61
01222:  DATA 69,6C
01224:  DATA 65,64
01226:  DATA 20,61
01228:  DATA 66,74
0122A:  DATA 65,72
0122C:  DATA 20,25
0122E:  DATA 64,20
01230:  DATA 61,74
01232:  DATA 74,65
01234:  DATA 6D,70
01236:  DATA 74,73
01238:  DATA 0D,0A
0123A:  DATA 00,00
0123C:  DATA 0D,0A
0123E:  DATA 5F,5F
01240:  DATA 5F,5F
01242:  DATA 5F,5F
01244:  DATA 5F,5F
01246:  DATA 5F,5F
01248:  DATA 5F,5F
0124A:  DATA 5F,5F
0124C:  DATA 5F,5F
0124E:  DATA 5F,5F
01250:  DATA 5F,5F
01252:  DATA 5F,5F
01254:  DATA 5F,5F
01256:  DATA 5F,5F
01258:  DATA 5F,5F
0125A:  DATA 5F,5F
0125C:  DATA 0D,0A
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,53
01264:  DATA 74,61
01266:  DATA 72,74
01268:  DATA 20,65
0126A:  DATA 78,65
0126C:  DATA 63,75
0126E:  DATA 74,65
01270:  DATA 5F,6D
01272:  DATA 69,73
01274:  DATA 73,69
01276:  DATA 6F,6E
01278:  DATA 5F,5F
0127A:  DATA 5F,5F
0127C:  DATA 5F,0D
0127E:  DATA 0A,0D
01280:  DATA 0A,00
01282:  DATA 43,6F
01284:  DATA 6D,6D
01286:  DATA 61,6E
01288:  DATA 64,20
0128A:  DATA 49,44
0128C:  DATA 3A,20
0128E:  DATA 25,58
01290:  DATA 0D,0A
01292:  DATA 0D,0A
01294:  DATA 00,00
01296:  DATA 09,09
01298:  DATA 2D,3E
0129A:  DATA 20,47
0129C:  DATA 65,74
0129E:  DATA 20,74
012A0:  DATA 69,6D
012A2:  DATA 65,20
012A4:  DATA 74,6F
012A6:  DATA 20,25
012A8:  DATA 6C,75
012AA:  DATA 20,64
012AC:  DATA 61,79
012AE:  DATA 73,2C
012B0:  DATA 20,25
012B2:  DATA 30,32
012B4:  DATA 75,3A
012B6:  DATA 25,30
012B8:  DATA 32,75
012BA:  DATA 3A,25
012BC:  DATA 30,32
012BE:  DATA 75,0D
012C0:  DATA 0A,00
012C2:  DATA 09,09
012C4:  DATA 2D,3E
012C6:  DATA 20,49
012C8:  DATA 6E,76
012CA:  DATA 61,6C
012CC:  DATA 69,64
012CE:  DATA 20,43
012D0:  DATA 4D,44
012D2:  DATA 20,49
012D4:  DATA 44,21
012D6:  DATA 0D,0A
012D8:  DATA 00,00
012DA:  DATA 0D,0A
012DC:  DATA 5F,5F
012DE:  DATA 5F,5F
012E0:  DATA 5F,5F
012E2:  DATA 45,6E
012E4:  DATA 64,20
012E6:  DATA 65,78
012E8:  DATA 65,63
012EA:  DATA 75,74
012EC:  DATA 65,5F
012EE:  DATA 6D,69
012F0:  DATA 73,73
012F2:  DATA 69,6F
012F4:  DATA 6E,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,0D
012FC:  DATA 0A,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 5F,5F
01306:  DATA 5F,5F
01308:  DATA 5F,5F
0130A:  DATA 5F,5F
0130C:  DATA 5F,5F
0130E:  DATA 5F,5F
01310:  DATA 5F,5F
01312:  DATA 5F,5F
01314:  DATA 5F,5F
01316:  DATA 5F,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 0D,0A
0131E:  DATA 00,00
01320:  DATA 53,74
01322:  DATA 61,72
01324:  DATA 74,20
01326:  DATA 65,78
01328:  DATA 65,63
0132A:  DATA 75,74
0132C:  DATA 65,5F
0132E:  DATA 63,6F
01330:  DATA 6D,6D
01332:  DATA 61,6E
01334:  DATA 64,0D
01336:  DATA 0A,00
01338:  DATA 09,2D
0133A:  DATA 3E,20
0133C:  DATA 55,70
0133E:  DATA 6C,69
01340:  DATA 6E,6B
01342:  DATA 20,63
01344:  DATA 6F,6D
01346:  DATA 6D,61
01348:  DATA 6E,64
0134A:  DATA 0D,0A
0134C:  DATA 00,00
0134E:  DATA 09,20
01350:  DATA 20,20
01352:  DATA 54,72
01354:  DATA 61,6E
01356:  DATA 73,6D
01358:  DATA 69,74
0135A:  DATA 20,41
0135C:  DATA 63,6B
0135E:  DATA 6E,6F
01360:  DATA 6C,65
01362:  DATA 67,64
01364:  DATA 65,0D
01366:  DATA 0A,00
01368:  DATA 09,2D
0136A:  DATA 3E,20
0136C:  DATA 53,74
0136E:  DATA 61,74
01370:  DATA 75,73
01372:  DATA 20,63
01374:  DATA 68,65
01376:  DATA 63,6B
01378:  DATA 0D,0A
0137A:  DATA 00,00
0137C:  DATA 09,20
0137E:  DATA 20,20
01380:  DATA 54,72
01382:  DATA 61,6E
01384:  DATA 73,6D
01386:  DATA 69,74
01388:  DATA 20,4D
0138A:  DATA 49,53
0138C:  DATA 20,4D
0138E:  DATA 43,55
01390:  DATA 20,53
01392:  DATA 74,61
01394:  DATA 74,75
01396:  DATA 73,0D
01398:  DATA 0A,00
0139A:  DATA 66,69
0139C:  DATA 6E,69
0139E:  DATA 73,68
013A0:  DATA 65,64
013A2:  DATA 20,69
013A4:  DATA 6E,20
013A6:  DATA 73,74
013A8:  DATA 61,74
013AA:  DATA 75,73
013AC:  DATA 5F,63
013AE:  DATA 68,65
013B0:  DATA 63,6B
013B2:  DATA 0D,0A
013B4:  DATA 00,00
013B6:  DATA 09,2D
013B8:  DATA 3E,20
013BA:  DATA 53,4D
013BC:  DATA 46,20
013BE:  DATA 61,76
013C0:  DATA 61,69
013C2:  DATA 6C,61
013C4:  DATA 62,6C
013C6:  DATA 65,20
013C8:  DATA 63,68
013CA:  DATA 65,63
013CC:  DATA 6B,0D
013CE:  DATA 0A,00
013D0:  DATA 09,20
013D2:  DATA 20,20
013D4:  DATA 54,72
013D6:  DATA 61,6E
013D8:  DATA 73,6D
013DA:  DATA 69,74
013DC:  DATA 20,41
013DE:  DATA 63,6B
013E0:  DATA 6E,6F
013E2:  DATA 77,6C
013E4:  DATA 65,64
013E6:  DATA 67,65
013E8:  DATA 6D,65
013EA:  DATA 6E,74
013EC:  DATA 0D,0A
013EE:  DATA 00,00
013F0:  DATA 09,09
013F2:  DATA 2D,3E
013F4:  DATA 20,64
013F6:  DATA 65,6E
013F8:  DATA 69,65
013FA:  DATA 64,0D
013FC:  DATA 0A,00
013FE:  DATA 09,09
01400:  DATA 2D,3E
01402:  DATA 20,61
01404:  DATA 6C,6C
01406:  DATA 6F,77
01408:  DATA 65,64
0140A:  DATA 0D,0A
0140C:  DATA 00,00
0140E:  DATA 09,09
01410:  DATA 2D,3E
01412:  DATA 20,44
01414:  DATA 65,71
01416:  DATA 75,65
01418:  DATA 75,65
0141A:  DATA 64,3A
0141C:  DATA 20,66
0141E:  DATA 75,6E
01420:  DATA 63,3D
01422:  DATA 25,75
01424:  DATA 20,6D
01426:  DATA 69,73
01428:  DATA 73,69
0142A:  DATA 6F,6E
0142C:  DATA 3D,25
0142E:  DATA 75,20
01430:  DATA 73,69
01432:  DATA 7A,65
01434:  DATA 3D,25
01436:  DATA 6C,64
01438:  DATA 20,61
0143A:  DATA 64,64
0143C:  DATA 72,3D
0143E:  DATA 25,6C
01440:  DATA 64,0D
01442:  DATA 0A,00
01444:  DATA 09,09
01446:  DATA 20,20
01448:  DATA 20,55
0144A:  DATA 6E,6B
0144C:  DATA 6E,6F
0144E:  DATA 77,6E
01450:  DATA 20,66
01452:  DATA 75,6E
01454:  DATA 63,5F
01456:  DATA 74,79
01458:  DATA 70,65
0145A:  DATA 3D,25
0145C:  DATA 75,0D
0145E:  DATA 0A,00
01460:  DATA 09,09
01462:  DATA 2D,3E
01464:  DATA 20,43
01466:  DATA 6F,6D
01468:  DATA 70,6C
0146A:  DATA 65,74
0146C:  DATA 65,64
0146E:  DATA 20,25
01470:  DATA 75,20
01472:  DATA 6F,70
01474:  DATA 65,72
01476:  DATA 61,74
01478:  DATA 69,6F
0147A:  DATA 6E,73
0147C:  DATA 0D,0A
0147E:  DATA 00,00
01480:  DATA 09,2D
01482:  DATA 3E,20
01484:  DATA 54,49
01486:  DATA 4D,45
01488:  DATA 20,52
0148A:  DATA 65,63
0148C:  DATA 65,69
0148E:  DATA 76,65
01490:  DATA 0D,0A
01492:  DATA 00,00
01494:  DATA 09,20
01496:  DATA 20,20
01498:  DATA 54,72
0149A:  DATA 61,6E
0149C:  DATA 73,6D
0149E:  DATA 69,74
014A0:  DATA 20,41
014A2:  DATA 63,6B
014A4:  DATA 6E,6F
014A6:  DATA 6C,65
014A8:  DATA 67,64
014AA:  DATA 65,0D
014AC:  DATA 0A,00
014AE:  DATA 09,09
014B0:  DATA 2D,3E
014B2:  DATA 20,53
014B4:  DATA 65,74
014B6:  DATA 20,74
014B8:  DATA 69,6D
014BA:  DATA 65,20
014BC:  DATA 74,6F
014BE:  DATA 20,25
014C0:  DATA 6C,75
014C2:  DATA 20,64
014C4:  DATA 61,79
014C6:  DATA 73,2C
014C8:  DATA 20,25
014CA:  DATA 30,32
014CC:  DATA 75,3A
014CE:  DATA 25,30
014D0:  DATA 32,75
014D2:  DATA 3A,25
014D4:  DATA 30,32
014D6:  DATA 75,0D
014D8:  DATA 0A,00
014DA:  DATA 53,74
014DC:  DATA 61,72
014DE:  DATA 74,20
014E0:  DATA 4D,4F
014E2:  DATA 44,45
014E4:  DATA 20,4D
014E6:  DATA 45,41
014E8:  DATA 53,20
014EA:  DATA 49,56
014EC:  DATA 0D,0A
014EE:  DATA 00,00
014F0:  DATA 0D,0A
014F2:  DATA 41,44
014F4:  DATA 44,20
014F6:  DATA 53,4D
014F8:  DATA 46,20
014FA:  DATA 51,55
014FC:  DATA 45,55
014FE:  DATA 45,0D
01500:  DATA 0A,00
01502:  DATA 09,4D
01504:  DATA 69,73
01506:  DATA 73,69
01508:  DATA 6F,6E
0150A:  DATA 20,49
0150C:  DATA 44,3A
0150E:  DATA 20,20
01510:  DATA 20,25
01512:  DATA 30,32
01514:  DATA 58,0D
01516:  DATA 0A,00
01518:  DATA 09,46
0151A:  DATA 75,6E
0151C:  DATA 63,74
0151E:  DATA 69,6F
01520:  DATA 6E,20
01522:  DATA 54,79
01524:  DATA 70,65
01526:  DATA 3A,25
01528:  DATA 30,32
0152A:  DATA 58,0D
0152C:  DATA 0A,00
0152E:  DATA 09,57
01530:  DATA 72,69
01532:  DATA 74,65
01534:  DATA 20,4D
01536:  DATA 6F,64
01538:  DATA 65,3A
0153A:  DATA 20,20
0153C:  DATA 20,25
0153E:  DATA 30,32
01540:  DATA 58,0D
01542:  DATA 0A,00
01544:  DATA 09,53
01546:  DATA 6F,75
01548:  DATA 72,63
0154A:  DATA 65,20
0154C:  DATA 54,79
0154E:  DATA 70,65
01550:  DATA 3A,20
01552:  DATA 20,25
01554:  DATA 30,32
01556:  DATA 58,0D
01558:  DATA 0A,00
0155A:  DATA 09,53
0155C:  DATA 74,61
0155E:  DATA 72,74
01560:  DATA 20,41
01562:  DATA 64,64
01564:  DATA 72,65
01566:  DATA 73,73
01568:  DATA 3A,25
0156A:  DATA 30,34
0156C:  DATA 58,0D
0156E:  DATA 0A,00
01570:  DATA 09,53
01572:  DATA 69,7A
01574:  DATA 65,3A
01576:  DATA 20,20
01578:  DATA 20,20
0157A:  DATA 20,20
0157C:  DATA 20,20
0157E:  DATA 20,25
01580:  DATA 30,34
01582:  DATA 58,0D
01584:  DATA 0A,00
01586:  DATA 0D,0A
01588:  DATA 41,44
0158A:  DATA 44,20
0158C:  DATA 53,4D
0158E:  DATA 46,20
01590:  DATA 51,55
01592:  DATA 45,55
01594:  DATA 45,0D
01596:  DATA 0A,00
01598:  DATA 09,4D
0159A:  DATA 69,73
0159C:  DATA 73,69
0159E:  DATA 6F,6E
015A0:  DATA 20,49
015A2:  DATA 44,3A
015A4:  DATA 20,20
015A6:  DATA 20,25
015A8:  DATA 30,32
015AA:  DATA 58,0D
015AC:  DATA 0A,00
015AE:  DATA 09,46
015B0:  DATA 75,6E
015B2:  DATA 63,74
015B4:  DATA 69,6F
015B6:  DATA 6E,20
015B8:  DATA 54,79
015BA:  DATA 70,65
015BC:  DATA 3A,25
015BE:  DATA 30,32
015C0:  DATA 58,0D
015C2:  DATA 0A,00
015C4:  DATA 09,57
015C6:  DATA 72,69
015C8:  DATA 74,65
015CA:  DATA 20,4D
015CC:  DATA 6F,64
015CE:  DATA 65,3A
015D0:  DATA 20,20
015D2:  DATA 20,25
015D4:  DATA 30,32
015D6:  DATA 58,0D
015D8:  DATA 0A,00
015DA:  DATA 09,53
015DC:  DATA 6F,75
015DE:  DATA 72,63
015E0:  DATA 65,20
015E2:  DATA 54,79
015E4:  DATA 70,65
015E6:  DATA 3A,20
015E8:  DATA 20,25
015EA:  DATA 30,32
015EC:  DATA 58,0D
015EE:  DATA 0A,00
015F0:  DATA 09,53
015F2:  DATA 74,61
015F4:  DATA 72,74
015F6:  DATA 20,41
015F8:  DATA 64,64
015FA:  DATA 72,65
015FC:  DATA 73,73
015FE:  DATA 3A,25
01600:  DATA 30,34
01602:  DATA 58,0D
01604:  DATA 0A,00
01606:  DATA 09,53
01608:  DATA 69,7A
0160A:  DATA 65,3A
0160C:  DATA 20,20
0160E:  DATA 20,20
01610:  DATA 20,20
01612:  DATA 20,20
01614:  DATA 20,25
01616:  DATA 30,34
01618:  DATA 58,0D
0161A:  DATA 0A,00
0161C:  DATA 0D,0A
0161E:  DATA 41,44
01620:  DATA 44,20
01622:  DATA 53,4D
01624:  DATA 46,20
01626:  DATA 51,55
01628:  DATA 45,55
0162A:  DATA 45,0D
0162C:  DATA 0A,00
0162E:  DATA 09,4D
01630:  DATA 69,73
01632:  DATA 73,69
01634:  DATA 6F,6E
01636:  DATA 20,49
01638:  DATA 44,3A
0163A:  DATA 20,20
0163C:  DATA 20,25
0163E:  DATA 30,32
01640:  DATA 58,0D
01642:  DATA 0A,00
01644:  DATA 09,46
01646:  DATA 75,6E
01648:  DATA 63,74
0164A:  DATA 69,6F
0164C:  DATA 6E,20
0164E:  DATA 54,79
01650:  DATA 70,65
01652:  DATA 3A,25
01654:  DATA 30,32
01656:  DATA 58,0D
01658:  DATA 0A,00
0165A:  DATA 09,57
0165C:  DATA 72,69
0165E:  DATA 74,65
01660:  DATA 20,4D
01662:  DATA 6F,64
01664:  DATA 65,3A
01666:  DATA 20,20
01668:  DATA 20,25
0166A:  DATA 30,32
0166C:  DATA 58,0D
0166E:  DATA 0A,00
01670:  DATA 09,53
01672:  DATA 6F,75
01674:  DATA 72,63
01676:  DATA 65,20
01678:  DATA 54,79
0167A:  DATA 70,65
0167C:  DATA 3A,20
0167E:  DATA 20,25
01680:  DATA 30,32
01682:  DATA 58,0D
01684:  DATA 0A,00
01686:  DATA 09,53
01688:  DATA 74,61
0168A:  DATA 72,74
0168C:  DATA 20,41
0168E:  DATA 64,64
01690:  DATA 72,65
01692:  DATA 73,73
01694:  DATA 3A,25
01696:  DATA 30,34
01698:  DATA 58,0D
0169A:  DATA 0A,00
0169C:  DATA 09,53
0169E:  DATA 69,7A
016A0:  DATA 65,3A
016A2:  DATA 20,20
016A4:  DATA 20,20
016A6:  DATA 20,20
016A8:  DATA 20,20
016AA:  DATA 20,25
016AC:  DATA 30,34
016AE:  DATA 58,0D
016B0:  DATA 0A,00
016B2:  DATA 45,6E
016B4:  DATA 64,20
016B6:  DATA 4D,4F
016B8:  DATA 44,45
016BA:  DATA 20,4D
016BC:  DATA 45,41
016BE:  DATA 53,20
016C0:  DATA 49,56
016C2:  DATA 20,6D
016C4:  DATA 69,73
016C6:  DATA 73,69
016C8:  DATA 6F,6E
016CA:  DATA 0D,0A
016CC:  DATA 00,00
016CE:  DATA 53,74
016D0:  DATA 61,72
016D2:  DATA 74,20
016D4:  DATA 4D,4F
016D6:  DATA 44,45
016D8:  DATA 20,49
016DA:  DATA 56,20
016DC:  DATA 44,45
016DE:  DATA 42,55
016E0:  DATA 47,0D
016E2:  DATA 0A,00
016E4:  DATA 09,49
016E6:  DATA 44,3A
016E8:  DATA 20,25
016EA:  DATA 30,32
016EC:  DATA 58,0D
016EE:  DATA 0A,00
016F0:  DATA 09,53
016F2:  DATA 6C,65
016F4:  DATA 65,70
016F6:  DATA 54,69
016F8:  DATA 6D,65
016FA:  DATA 3A,20
016FC:  DATA 20,20
016FE:  DATA 20,20
01700:  DATA 20,20
01702:  DATA 20,30
01704:  DATA 78,25
01706:  DATA 30,34
01708:  DATA 58,0D
0170A:  DATA 0A,00
0170C:  DATA 09,4C
0170E:  DATA 6F,67
01710:  DATA 43,75
01712:  DATA 72,72
01714:  DATA 54,68
01716:  DATA 72,65
01718:  DATA 73,68
0171A:  DATA 6F,6C
0171C:  DATA 64,3A
0171E:  DATA 20,30
01720:  DATA 78,25
01722:  DATA 30,34
01724:  DATA 58,0D
01726:  DATA 0A,00
01728:  DATA 09,50
0172A:  DATA 44,54
0172C:  DATA 68,72
0172E:  DATA 65,73
01730:  DATA 68,6F
01732:  DATA 6C,64
01734:  DATA 3A,20
01736:  DATA 20,20
01738:  DATA 20,20
0173A:  DATA 20,30
0173C:  DATA 78,25
0173E:  DATA 30,34
01740:  DATA 58,0D
01742:  DATA 0A,00
01744:  DATA 09,43
01746:  DATA 75,72
01748:  DATA 72,65
0174A:  DATA 6E,74
0174C:  DATA 4C,69
0174E:  DATA 6D,69
01750:  DATA 74,3A
01752:  DATA 20,20
01754:  DATA 20,20
01756:  DATA 20,30
01758:  DATA 78,25
0175A:  DATA 30,34
0175C:  DATA 58,0D
0175E:  DATA 0A,00
01760:  DATA 09,4D
01762:  DATA 65,61
01764:  DATA 73,75
01766:  DATA 72,65
01768:  DATA 6D,65
0176A:  DATA 6E,74
0176C:  DATA 54,69
0176E:  DATA 6D,65
01770:  DATA 3A,20
01772:  DATA 20,30
01774:  DATA 78,25
01776:  DATA 30,34
01778:  DATA 58,0D
0177A:  DATA 0A,00
0177C:  DATA 5B,49
0177E:  DATA 56,44
01780:  DATA 42,47
01782:  DATA 5D,20
01784:  DATA 45,6E
01786:  DATA 64,20
01788:  DATA 4D,4F
0178A:  DATA 44,45
0178C:  DATA 20,49
0178E:  DATA 56,20
01790:  DATA 44,45
01792:  DATA 42,55
01794:  DATA 47,0D
01796:  DATA 0A,00
01798:  DATA 74,65
0179A:  DATA 6D,70
0179C:  DATA 5F,74
0179E:  DATA 6F,70
017A0:  DATA 2C,20
017A2:  DATA 74,65
017A4:  DATA 6D,70
017A6:  DATA 5F,62
017A8:  DATA 6F,74
017AA:  DATA 2C,20
017AC:  DATA 74,65
017AE:  DATA 6D,70
017B0:  DATA 5F,6D
017B2:  DATA 69,73
017B4:  DATA 37,2C
017B6:  DATA 20,70
017B8:  DATA 64,0D
017BA:  DATA 0A,00
017BC:  DATA 4D,45
017BE:  DATA 41,53
017C0:  DATA 20,49
017C2:  DATA 56,20
017C4:  DATA 43,6F
017C6:  DATA 6D,6D
017C8:  DATA 61,6E
017CA:  DATA 64,20
017CC:  DATA 50,61
017CE:  DATA 72,61
017D0:  DATA 6D,65
017D2:  DATA 74,65
017D4:  DATA 72,73
017D6:  DATA 3A,0D
017D8:  DATA 0A,00
017DA:  DATA 09,49
017DC:  DATA 44,3A
017DE:  DATA 20,25
017E0:  DATA 30,32
017E2:  DATA 58,0D
017E4:  DATA 0A,00
017E6:  DATA 09,53
017E8:  DATA 77,65
017EA:  DATA 65,70
017EC:  DATA 49,6E
017EE:  DATA 74,65
017F0:  DATA 72,76
017F2:  DATA 61,6C
017F4:  DATA 20,20
017F6:  DATA 20,3A
017F8:  DATA 25,6C
017FA:  DATA 75,5B
017FC:  DATA 6D,73
017FE:  DATA 5D,0D
01800:  DATA 0A,00
01802:  DATA 09,50
01804:  DATA 44,20
01806:  DATA 54,68
01808:  DATA 72,65
0180A:  DATA 73,68
0180C:  DATA 6F,6C
0180E:  DATA 64,20
01810:  DATA 20,20
01812:  DATA 20,3A
01814:  DATA 25,6C
01816:  DATA 75,5B
01818:  DATA 57,2F
0181A:  DATA 6D,32
0181C:  DATA 5D,0D
0181E:  DATA 0A,00
01820:  DATA 09,53
01822:  DATA 77,65
01824:  DATA 65,70
01826:  DATA 4C,69
01828:  DATA 6D,69
0182A:  DATA 74,20
0182C:  DATA 20,20
0182E:  DATA 20,20
01830:  DATA 20,3A
01832:  DATA 25,6C
01834:  DATA 75,5B
01836:  DATA 6D,41
01838:  DATA 5D,0D
0183A:  DATA 0A,00
0183C:  DATA 09,4C
0183E:  DATA 6F,67
01840:  DATA 54,68
01842:  DATA 72,65
01844:  DATA 73,68
01846:  DATA 6F,6C
01848:  DATA 64,20
0184A:  DATA 20,20
0184C:  DATA 20,3A
0184E:  DATA 25,6C
01850:  DATA 75,5B
01852:  DATA 6D,41
01854:  DATA 5D,0D
01856:  DATA 0A,00
01858:  DATA 09,4D
0185A:  DATA 65,61
0185C:  DATA 73,75
0185E:  DATA 72,65
01860:  DATA 6D,65
01862:  DATA 6E,74
01864:  DATA 54,69
01866:  DATA 6D,65
01868:  DATA 20,3A
0186A:  DATA 25,6C
0186C:  DATA 75,5B
0186E:  DATA 73,5D
01870:  DATA 0D,0A
01872:  DATA 0D,0A
01874:  DATA 00,00
01876:  DATA 53,74
01878:  DATA 61,72
0187A:  DATA 74,20
0187C:  DATA 4D,4F
0187E:  DATA 44,45
01880:  DATA 20,4D
01882:  DATA 45,41
01884:  DATA 53,20
01886:  DATA 50,44
01888:  DATA 0D,0A
0188A:  DATA 00,00
0188C:  DATA 45,6E
0188E:  DATA 64,20
01890:  DATA 4D,4F
01892:  DATA 44,45
01894:  DATA 20,4D
01896:  DATA 45,41
01898:  DATA 53,20
0189A:  DATA 50,44
0189C:  DATA 0D,0A
0189E:  DATA 00,00
018A0:  DATA 53,74
018A2:  DATA 61,72
018A4:  DATA 74,20
018A6:  DATA 46,6C
018A8:  DATA 61,73
018AA:  DATA 68,20
018AC:  DATA 45,72
018AE:  DATA 61,73
018B0:  DATA 65,20
018B2:  DATA 41,6C
018B4:  DATA 6C,0D
018B6:  DATA 0A,00
018B8:  DATA 45,6E
018BA:  DATA 64,20
018BC:  DATA 46,6C
018BE:  DATA 61,73
018C0:  DATA 68,20
018C2:  DATA 45,72
018C4:  DATA 61,73
018C6:  DATA 65,20
018C8:  DATA 41,6C
018CA:  DATA 6C,0D
018CC:  DATA 0A,00
018CE:  DATA 53,74
018D0:  DATA 61,72
018D2:  DATA 74,20
018D4:  DATA 46,6C
018D6:  DATA 61,73
018D8:  DATA 68,20
018DA:  DATA 45,72
018DC:  DATA 61,73
018DE:  DATA 65,20
018E0:  DATA 31,20
018E2:  DATA 53,65
018E4:  DATA 63,74
018E6:  DATA 6F,72
018E8:  DATA 0D,0A
018EA:  DATA 00,00
018EC:  DATA 09,53
018EE:  DATA 65,63
018F0:  DATA 74,6F
018F2:  DATA 72,20
018F4:  DATA 41,64
018F6:  DATA 64,72
018F8:  DATA 65,73
018FA:  DATA 73,3A
018FC:  DATA 20,30
018FE:  DATA 78,25
01900:  DATA 30,38
01902:  DATA 4C,58
01904:  DATA 0D,0A
01906:  DATA 00,00
01908:  DATA 45,6E
0190A:  DATA 64,20
0190C:  DATA 46,6C
0190E:  DATA 61,73
01910:  DATA 68,20
01912:  DATA 45,72
01914:  DATA 61,73
01916:  DATA 65,20
01918:  DATA 31,20
0191A:  DATA 53,65
0191C:  DATA 63,74
0191E:  DATA 6F,72
01920:  DATA 0D,0A
01922:  DATA 00,00
01924:  DATA 53,74
01926:  DATA 61,72
01928:  DATA 74,20
0192A:  DATA 46,6C
0192C:  DATA 61,73
0192E:  DATA 68,20
01930:  DATA 45,72
01932:  DATA 61,73
01934:  DATA 65,20
01936:  DATA 34,6B
01938:  DATA 42,79
0193A:  DATA 74,65
0193C:  DATA 20,53
0193E:  DATA 75,62
01940:  DATA 73,65
01942:  DATA 63,74
01944:  DATA 6F,72
01946:  DATA 0D,0A
01948:  DATA 00,00
0194A:  DATA 09,53
0194C:  DATA 75,62
0194E:  DATA 73,65
01950:  DATA 63,74
01952:  DATA 6F,72
01954:  DATA 20,41
01956:  DATA 64,64
01958:  DATA 72,65
0195A:  DATA 73,73
0195C:  DATA 3A,20
0195E:  DATA 30,78
01960:  DATA 25,30
01962:  DATA 38,4C
01964:  DATA 58,0D
01966:  DATA 0A,00
01968:  DATA 45,6E
0196A:  DATA 64,20
0196C:  DATA 46,6C
0196E:  DATA 61,73
01970:  DATA 68,20
01972:  DATA 45,72
01974:  DATA 61,73
01976:  DATA 65,20
01978:  DATA 34,6B
0197A:  DATA 42,79
0197C:  DATA 74,65
0197E:  DATA 20,53
01980:  DATA 75,62
01982:  DATA 73,65
01984:  DATA 63,74
01986:  DATA 6F,72
01988:  DATA 0D,0A
0198A:  DATA 00,00
0198C:  DATA 53,74
0198E:  DATA 61,72
01990:  DATA 74,20
01992:  DATA 46,6C
01994:  DATA 61,73
01996:  DATA 68,20
01998:  DATA 45,72
0199A:  DATA 61,73
0199C:  DATA 65,20
0199E:  DATA 36,34
019A0:  DATA 6B,42
019A2:  DATA 79,74
019A4:  DATA 65,20
019A6:  DATA 53,75
019A8:  DATA 62,73
019AA:  DATA 65,63
019AC:  DATA 74,6F
019AE:  DATA 72,0D
019B0:  DATA 0A,00
019B2:  DATA 09,53
019B4:  DATA 75,62
019B6:  DATA 73,65
019B8:  DATA 63,74
019BA:  DATA 6F,72
019BC:  DATA 20,41
019BE:  DATA 64,64
019C0:  DATA 72,65
019C2:  DATA 73,73
019C4:  DATA 3A,20
019C6:  DATA 30,78
019C8:  DATA 25,30
019CA:  DATA 38,4C
019CC:  DATA 58,0D
019CE:  DATA 0A,00
019D0:  DATA 45,6E
019D2:  DATA 64,20
019D4:  DATA 46,6C
019D6:  DATA 61,73
019D8:  DATA 68,20
019DA:  DATA 45,72
019DC:  DATA 61,73
019DE:  DATA 65,20
019E0:  DATA 36,34
019E2:  DATA 6B,42
019E4:  DATA 79,74
019E6:  DATA 65,20
019E8:  DATA 53,75
019EA:  DATA 62,73
019EC:  DATA 65,63
019EE:  DATA 74,6F
019F0:  DATA 72,0D
019F2:  DATA 0A,00
019F4:  DATA 53,74
019F6:  DATA 61,72
019F8:  DATA 74,20
019FA:  DATA 46,6C
019FC:  DATA 61,73
019FE:  DATA 68,20
01A00:  DATA 57,72
01A02:  DATA 69,74
01A04:  DATA 65,20
01A06:  DATA 44,65
01A08:  DATA 6D,6F
01A0A:  DATA 0D,0A
01A0C:  DATA 00,00
01A0E:  DATA 09,4D
01A10:  DATA 4F,44
01A12:  DATA 45,20
01A14:  DATA 20,20
01A16:  DATA 20,20
01A18:  DATA 3A,20
01A1A:  DATA 25,30
01A1C:  DATA 32,58
01A1E:  DATA 0D,0A
01A20:  DATA 00,00
01A22:  DATA 09,41
01A24:  DATA 64,64
01A26:  DATA 72,65
01A28:  DATA 73,73
01A2A:  DATA 20,20
01A2C:  DATA 3A,20
01A2E:  DATA 30,78
01A30:  DATA 25,30
01A32:  DATA 38,4C
01A34:  DATA 58,0D
01A36:  DATA 0A,00
01A38:  DATA 09,50
01A3A:  DATA 61,63
01A3C:  DATA 6B,65
01A3E:  DATA 74,4E
01A40:  DATA 75,6D
01A42:  DATA 3A,20
01A44:  DATA 30,78
01A46:  DATA 25,30
01A48:  DATA 34,4C
01A4A:  DATA 58,0D
01A4C:  DATA 0A,00
01A4E:  DATA 57,72
01A50:  DATA 69,74
01A52:  DATA 65,20
01A54:  DATA 44,61
01A56:  DATA 74,61
01A58:  DATA 0D,0A
01A5A:  DATA 00,00
01A5C:  DATA 0D,0A
01A5E:  DATA 5B,46
01A60:  DATA 4C,41
01A62:  DATA 53,48
01A64:  DATA 5D,20
01A66:  DATA 57,72
01A68:  DATA 69,74
01A6A:  DATA 65,20
01A6C:  DATA 61,64
01A6E:  DATA 64,72
01A70:  DATA 65,73
01A72:  DATA 73,20
01A74:  DATA 30,78
01A76:  DATA 25,30
01A78:  DATA 38,4C
01A7A:  DATA 58,20
01A7C:  DATA 65,78
01A7E:  DATA 63,65
01A80:  DATA 65,64
01A82:  DATA 73,20
01A84:  DATA 64,65
01A86:  DATA 76,69
01A88:  DATA 63,65
01A8A:  DATA 20,65
01A8C:  DATA 6E,64
01A8E:  DATA 20,30
01A90:  DATA 78,25
01A92:  DATA 30,38
01A94:  DATA 4C,58
01A96:  DATA 20,2D
01A98:  DATA 3E,20
01A9A:  DATA 61,62
01A9C:  DATA 6F,72
01A9E:  DATA 74,0D
01AA0:  DATA 0A,00
01AA2:  DATA 0D,0A
01AA4:  DATA 5B,46
01AA6:  DATA 4C,41
01AA8:  DATA 53,48
01AAA:  DATA 5D,20
01AAC:  DATA 52,65
01AAE:  DATA 61,63
01AB0:  DATA 68,65
01AB2:  DATA 64,20
01AB4:  DATA 65,6E
01AB6:  DATA 64,2E
01AB8:  DATA 20,50
01ABA:  DATA 61,72
01ABC:  DATA 74,69
01ABE:  DATA 61,6C
01AC0:  DATA 20,77
01AC2:  DATA 72,69
01AC4:  DATA 74,65
01AC6:  DATA 20,25
01AC8:  DATA 6C,75
01ACA:  DATA 20,62
01ACC:  DATA 79,74
01ACE:  DATA 65,73
01AD0:  DATA 20,28
01AD2:  DATA 70,61
01AD4:  DATA 63,6B
01AD6:  DATA 65,74
01AD8:  DATA 20,74
01ADA:  DATA 72,75
01ADC:  DATA 6E,63
01ADE:  DATA 61,74
01AE0:  DATA 65,64
01AE2:  DATA 29,2E
01AE4:  DATA 0D,0A
01AE6:  DATA 00,00
01AE8:  DATA 45,6E
01AEA:  DATA 64,20
01AEC:  DATA 46,6C
01AEE:  DATA 61,73
01AF0:  DATA 68,20
01AF2:  DATA 57,72
01AF4:  DATA 69,74
01AF6:  DATA 65,20
01AF8:  DATA 44,65
01AFA:  DATA 6D,6F
01AFC:  DATA 0D,0A
01AFE:  DATA 00,00
01B00:  DATA 53,74
01B02:  DATA 61,72
01B04:  DATA 74,20
01B06:  DATA 46,6C
01B08:  DATA 61,73
01B0A:  DATA 68,20
01B0C:  DATA 57,72
01B0E:  DATA 69,74
01B10:  DATA 65,20
01B12:  DATA 34,6B
01B14:  DATA 42,79
01B16:  DATA 74,65
01B18:  DATA 20,53
01B1A:  DATA 75,62
01B1C:  DATA 73,65
01B1E:  DATA 63,74
01B20:  DATA 6F,72
01B22:  DATA 0D,0A
01B24:  DATA 00,00
01B26:  DATA 45,6E
01B28:  DATA 64,20
01B2A:  DATA 46,6C
01B2C:  DATA 61,73
01B2E:  DATA 68,20
01B30:  DATA 57,72
01B32:  DATA 69,74
01B34:  DATA 65,20
01B36:  DATA 34,6B
01B38:  DATA 42,79
01B3A:  DATA 74,65
01B3C:  DATA 20,53
01B3E:  DATA 75,62
01B40:  DATA 73,65
01B42:  DATA 63,74
01B44:  DATA 6F,72
01B46:  DATA 0D,0A
01B48:  DATA 00,00
01B4A:  DATA 53,74
01B4C:  DATA 61,72
01B4E:  DATA 74,20
01B50:  DATA 46,6C
01B52:  DATA 61,73
01B54:  DATA 68,20
01B56:  DATA 52,65
01B58:  DATA 61,64
01B5A:  DATA 0D,0A
01B5C:  DATA 00,00
01B5E:  DATA 09,4D
01B60:  DATA 4F,44
01B62:  DATA 45,20
01B64:  DATA 20,20
01B66:  DATA 20,20
01B68:  DATA 3A,20
01B6A:  DATA 25,30
01B6C:  DATA 32,58
01B6E:  DATA 0D,0A
01B70:  DATA 00,00
01B72:  DATA 09,41
01B74:  DATA 64,64
01B76:  DATA 72,65
01B78:  DATA 73,73
01B7A:  DATA 20,20
01B7C:  DATA 3A,20
01B7E:  DATA 30,78
01B80:  DATA 25,30
01B82:  DATA 38,4C
01B84:  DATA 58,0D
01B86:  DATA 0A,00
01B88:  DATA 09,50
01B8A:  DATA 61,63
01B8C:  DATA 6B,65
01B8E:  DATA 74,4E
01B90:  DATA 75,6D
01B92:  DATA 3A,20
01B94:  DATA 30,78
01B96:  DATA 25,30
01B98:  DATA 34,4C
01B9A:  DATA 58,0D
01B9C:  DATA 0A,00
01B9E:  DATA 41,44
01BA0:  DATA 44,52
01BA2:  DATA 45,53
01BA4:  DATA 53,20
01BA6:  DATA 20,3A
01BA8:  DATA 0D,0A
01BAA:  DATA 00,00
01BAC:  DATA 4D,69
01BAE:  DATA 73,73
01BB0:  DATA 69,6F
01BB2:  DATA 6E,20
01BB4:  DATA 46,6C
01BB6:  DATA 61,73
01BB8:  DATA 68,20
01BBA:  DATA 69,73
01BBC:  DATA 20,6E
01BBE:  DATA 6F,74
01BC0:  DATA 20,63
01BC2:  DATA 6F,6E
01BC4:  DATA 6E,65
01BC6:  DATA 63,74
01BC8:  DATA 65,64
01BCA:  DATA 0D,0A
01BCC:  DATA 00,00
01BCE:  DATA 5B,46
01BD0:  DATA 4C,41
01BD2:  DATA 53,48
01BD4:  DATA 5D,20
01BD6:  DATA 52,65
01BD8:  DATA 61,64
01BDA:  DATA 20,61
01BDC:  DATA 64,64
01BDE:  DATA 72,65
01BE0:  DATA 73,73
01BE2:  DATA 20,30
01BE4:  DATA 78,25
01BE6:  DATA 30,38
01BE8:  DATA 4C,58
01BEA:  DATA 20,65
01BEC:  DATA 78,63
01BEE:  DATA 65,65
01BF0:  DATA 64,73
01BF2:  DATA 20,64
01BF4:  DATA 65,76
01BF6:  DATA 69,63
01BF8:  DATA 65,20
01BFA:  DATA 65,6E
01BFC:  DATA 64,20
01BFE:  DATA 30,78
01C00:  DATA 25,30
01C02:  DATA 38,4C
01C04:  DATA 58,20
01C06:  DATA 2D,3E
01C08:  DATA 20,73
01C0A:  DATA 74,6F
01C0C:  DATA 70,0D
01C0E:  DATA 0A,00
01C10:  DATA 5B,46
01C12:  DATA 4C,41
01C14:  DATA 53,48
01C16:  DATA 5D,20
01C18:  DATA 45,6E
01C1A:  DATA 64,20
01C1C:  DATA 72,65
01C1E:  DATA 61,63
01C20:  DATA 68,65
01C22:  DATA 64,2E
01C24:  DATA 20,50
01C26:  DATA 61,72
01C28:  DATA 74,69
01C2A:  DATA 61,6C
01C2C:  DATA 20,72
01C2E:  DATA 65,61
01C30:  DATA 64,20
01C32:  DATA 25,6C
01C34:  DATA 75,20
01C36:  DATA 62,79
01C38:  DATA 74,65
01C3A:  DATA 73,2E
01C3C:  DATA 0D,0A
01C3E:  DATA 00,00
01C40:  DATA 25,30
01C42:  DATA 38,4C
01C44:  DATA 58,20
01C46:  DATA 3A,20
01C48:  DATA 00,00
01C4A:  DATA 45,6E
01C4C:  DATA 64,20
01C4E:  DATA 46,6C
01C50:  DATA 61,73
01C52:  DATA 68,20
01C54:  DATA 52,65
01C56:  DATA 61,64
01C58:  DATA 0D,0A
01C5A:  DATA 00,00
01C5C:  DATA 53,74
01C5E:  DATA 61,72
01C60:  DATA 74,20
01C62:  DATA 46,6C
01C64:  DATA 61,73
01C66:  DATA 68,20
01C68:  DATA 52,65
01C6A:  DATA 61,64
01C6C:  DATA 20,41
01C6E:  DATA 64,64
01C70:  DATA 72,65
01C72:  DATA 73,73
01C74:  DATA 0D,0A
01C76:  DATA 00,00
01C78:  DATA 52,65
01C7A:  DATA 61,64
01C7C:  DATA 20,44
01C7E:  DATA 61,74
01C80:  DATA 61,3A
01C82:  DATA 20,25
01C84:  DATA 30,32
01C86:  DATA 58,20
01C88:  DATA 25,30
01C8A:  DATA 32,58
01C8C:  DATA 20,25
01C8E:  DATA 30,32
01C90:  DATA 58,20
01C92:  DATA 25,30
01C94:  DATA 32,58
01C96:  DATA 0D,0A
01C98:  DATA 00,00
01C9A:  DATA 45,6E
01C9C:  DATA 64,20
01C9E:  DATA 46,6C
01CA0:  DATA 61,73
01CA2:  DATA 68,20
01CA4:  DATA 52,65
01CA6:  DATA 61,64
01CA8:  DATA 20,41
01CAA:  DATA 64,64
01CAC:  DATA 72,65
01CAE:  DATA 73,73
01CB0:  DATA 0D,0A
01CB2:  DATA 00,00
01CB4:  DATA 53,74
01CB6:  DATA 61,72
01CB8:  DATA 74,20
01CBA:  DATA 46,6C
01CBC:  DATA 61,73
01CBE:  DATA 68,20
01CC0:  DATA 45,72
01CC2:  DATA 61,73
01CC4:  DATA 65,20
01CC6:  DATA 61,6E
01CC8:  DATA 64,20
01CCA:  DATA 52,65
01CCC:  DATA 73,65
01CCE:  DATA 74,0D
01CD0:  DATA 0A,00
01CD2:  DATA 45,6E
01CD4:  DATA 64,20
01CD6:  DATA 46,6C
01CD8:  DATA 61,73
01CDA:  DATA 68,20
01CDC:  DATA 45,72
01CDE:  DATA 61,73
01CE0:  DATA 65,20
01CE2:  DATA 61,6E
01CE4:  DATA 64,20
01CE6:  DATA 52,65
01CE8:  DATA 73,65
01CEA:  DATA 74,0D
01CEC:  DATA 0A,00
01CEE:  DATA 53,74
01CF0:  DATA 61,72
01CF2:  DATA 74,20
01CF4:  DATA 46,6C
01CF6:  DATA 61,73
01CF8:  DATA 68,20
01CFA:  DATA 53,4D
01CFC:  DATA 46,20
01CFE:  DATA 43,6F
01D00:  DATA 70,79
01D02:  DATA 0D,0A
01D04:  DATA 00,00
01D06:  DATA 45,6E
01D08:  DATA 64,20
01D0A:  DATA 46,6C
01D0C:  DATA 61,73
01D0E:  DATA 68,20
01D10:  DATA 53,4D
01D12:  DATA 46,20
01D14:  DATA 43,6F
01D16:  DATA 70,79
01D18:  DATA 0D,0A
01D1A:  DATA 00,00
01D1C:  DATA 53,74
01D1E:  DATA 61,72
01D20:  DATA 74,20
01D22:  DATA 46,6C
01D24:  DATA 61,73
01D26:  DATA 68,20
01D28:  DATA 53,4D
01D2A:  DATA 46,20
01D2C:  DATA 52,65
01D2E:  DATA 61,64
01D30:  DATA 0D,0A
01D32:  DATA 00,00
01D34:  DATA 09,41
01D36:  DATA 64,64
01D38:  DATA 72,65
01D3A:  DATA 73,73
01D3C:  DATA 20,20
01D3E:  DATA 3A,20
01D40:  DATA 30,78
01D42:  DATA 25,30
01D44:  DATA 38,4C
01D46:  DATA 58,0D
01D48:  DATA 0A,00
01D4A:  DATA 09,50
01D4C:  DATA 61,63
01D4E:  DATA 6B,65
01D50:  DATA 74,4E
01D52:  DATA 75,6D
01D54:  DATA 3A,20
01D56:  DATA 30,78
01D58:  DATA 25,30
01D5A:  DATA 34,4C
01D5C:  DATA 58,0D
01D5E:  DATA 0A,00
01D60:  DATA 52,65
01D62:  DATA 61,64
01D64:  DATA 20,44
01D66:  DATA 61,74
01D68:  DATA 61,0D
01D6A:  DATA 0A,00
01D6C:  DATA 0D,0A
01D6E:  DATA 45,6E
01D70:  DATA 64,20
01D72:  DATA 46,6C
01D74:  DATA 61,73
01D76:  DATA 68,20
01D78:  DATA 53,4D
01D7A:  DATA 46,20
01D7C:  DATA 52,65
01D7E:  DATA 61,64
01D80:  DATA 0D,0A
01D82:  DATA 00,00
01D84:  DATA 53,74
01D86:  DATA 61,72
01D88:  DATA 74,20
01D8A:  DATA 46,6C
01D8C:  DATA 61,73
01D8E:  DATA 68,20
01D90:  DATA 53,4D
01D92:  DATA 46,20
01D94:  DATA 45,72
01D96:  DATA 61,73
01D98:  DATA 65,0D
01D9A:  DATA 0A,00
01D9C:  DATA 45,6E
01D9E:  DATA 64,20
01DA0:  DATA 46,6C
01DA2:  DATA 61,73
01DA4:  DATA 68,20
01DA6:  DATA 53,4D
01DA8:  DATA 46,20
01DAA:  DATA 45,72
01DAC:  DATA 61,73
01DAE:  DATA 65,0D
01DB0:  DATA 0A,00
01DB2:  DATA 53,74
01DB4:  DATA 61,72
01DB6:  DATA 74,20
01DB8:  DATA 46,6C
01DBA:  DATA 61,73
01DBC:  DATA 68,20
01DBE:  DATA 41,64
01DC0:  DATA 64,72
01DC2:  DATA 65,73
01DC4:  DATA 73,20
01DC6:  DATA 52,65
01DC8:  DATA 73,65
01DCA:  DATA 74,0D
01DCC:  DATA 0A,00
01DCE:  DATA 45,6E
01DD0:  DATA 64,20
01DD2:  DATA 46,6C
01DD4:  DATA 61,73
01DD6:  DATA 68,20
01DD8:  DATA 41,64
01DDA:  DATA 64,72
01DDC:  DATA 65,73
01DDE:  DATA 73,20
01DE0:  DATA 52,65
01DE2:  DATA 73,65
01DE4:  DATA 74,0D
01DE6:  DATA 0A,00
01DE8:  DATA 53,4D
01DEA:  DATA 46,20
01DEC:  DATA 69,73
01DEE:  DATA 20,6E
01DF0:  DATA 6F,74
01DF2:  DATA 20,63
01DF4:  DATA 6F,6E
01DF6:  DATA 6E,65
01DF8:  DATA 63,74
01DFA:  DATA 65,64
01DFC:  DATA 0D,0A
01DFE:  DATA 00,00
01E00:  DATA 53,74
01E02:  DATA 61,72
01E04:  DATA 74,20
01E06:  DATA 46,6C
01E08:  DATA 61,73
01E0A:  DATA 68,20
01E0C:  DATA 53,4D
01E0E:  DATA 46,20
01E10:  DATA 52,65
01E12:  DATA 61,64
01E14:  DATA 20,46
01E16:  DATA 6F,72
01E18:  DATA 63,65
01E1A:  DATA 0D,0A
01E1C:  DATA 00,00
01E1E:  DATA 09,41
01E20:  DATA 64,64
01E22:  DATA 72,65
01E24:  DATA 73,73
01E26:  DATA 20,20
01E28:  DATA 3A,20
01E2A:  DATA 30,78
01E2C:  DATA 25,30
01E2E:  DATA 38,4C
01E30:  DATA 58,0D
01E32:  DATA 0A,00
01E34:  DATA 09,50
01E36:  DATA 61,63
01E38:  DATA 6B,65
01E3A:  DATA 74,4E
01E3C:  DATA 75,6D
01E3E:  DATA 3A,20
01E40:  DATA 30,78
01E42:  DATA 25,30
01E44:  DATA 34,4C
01E46:  DATA 58,0D
01E48:  DATA 0A,00
01E4A:  DATA 72,65
01E4C:  DATA 61,64
01E4E:  DATA 20,64
01E50:  DATA 61,74
01E52:  DATA 61,0D
01E54:  DATA 0A,00
01E56:  DATA 0D,0A
01E58:  DATA 45,6E
01E5A:  DATA 64,20
01E5C:  DATA 46,6C
01E5E:  DATA 61,73
01E60:  DATA 68,20
01E62:  DATA 53,4D
01E64:  DATA 46,20
01E66:  DATA 52,65
01E68:  DATA 61,64
01E6A:  DATA 20,46
01E6C:  DATA 6F,72
01E6E:  DATA 63,65
01E70:  DATA 0D,0A
01E72:  DATA 00,00
01E74:  DATA 53,74
01E76:  DATA 61,72
01E78:  DATA 74,20
01E7A:  DATA 53,4D
01E7C:  DATA 46,20
01E7E:  DATA 45,72
01E80:  DATA 61,73
01E82:  DATA 65,20
01E84:  DATA 41,6C
01E86:  DATA 6C,0D
01E88:  DATA 0A,00
01E8A:  DATA 45,6E
01E8C:  DATA 64,20
01E8E:  DATA 53,4D
01E90:  DATA 46,20
01E92:  DATA 45,72
01E94:  DATA 61,73
01E96:  DATA 65,20
01E98:  DATA 41,6C
01E9A:  DATA 6C,0D
01E9C:  DATA 0A,00
01E9E:  DATA 53,74
01EA0:  DATA 61,72
01EA2:  DATA 74,20
01EA4:  DATA 53,4D
01EA6:  DATA 46,20
01EA8:  DATA 52,65
01EAA:  DATA 73,65
01EAC:  DATA 74,0D
01EAE:  DATA 0A,00
01EB0:  DATA 45,6E
01EB2:  DATA 64,20
01EB4:  DATA 53,4D
01EB6:  DATA 46,20
01EB8:  DATA 52,65
01EBA:  DATA 73,65
01EBC:  DATA 74,0D
01EBE:  DATA 0A,00
01EC0:  DATA 0D,0A
01EC2:  DATA 0D,0A
01EC4:  DATA 0D,0A
01EC6:  DATA 3D,3D
01EC8:  DATA 3D,3D
01ECA:  DATA 3D,3D
01ECC:  DATA 3D,3D
01ECE:  DATA 3D,3D
01ED0:  DATA 3D,3D
01ED2:  DATA 3D,3D
01ED4:  DATA 3D,3D
01ED6:  DATA 3D,3D
01ED8:  DATA 3D,3D
01EDA:  DATA 3D,3D
01EDC:  DATA 3D,3D
01EDE:  DATA 3D,3D
01EE0:  DATA 3D,3D
01EE2:  DATA 3D,3D
01EE4:  DATA 3D,3D
01EE6:  DATA 3D,3D
01EE8:  DATA 3D,3D
01EEA:  DATA 3D,3D
01EEC:  DATA 3D,3D
01EEE:  DATA 3D,3D
01EF0:  DATA 3D,3D
01EF2:  DATA 3D,3D
01EF4:  DATA 3D,3D
01EF6:  DATA 3D,3D
01EF8:  DATA 3D,3D
01EFA:  DATA 3D,3D
01EFC:  DATA 3D,3D
01EFE:  DATA 3D,3D
01F00:  DATA 3D,3D
01F02:  DATA 0D,0A
01F04:  DATA 00,00
01F06:  DATA 54,68
01F08:  DATA 69,73
01F0A:  DATA 20,69
01F0C:  DATA 73,20
01F0E:  DATA 4D,4F
01F10:  DATA 4D,49
01F12:  DATA 4A,49
01F14:  DATA 20,43
01F16:  DATA 49,47
01F18:  DATA 53,20
01F1A:  DATA 50,49
01F1C:  DATA 43,20
01F1E:  DATA 42,42
01F20:  DATA 4D,20
01F22:  DATA 66,6F
01F24:  DATA 72,20
01F26:  DATA 4D,49
01F28:  DATA 53,37
01F2A:  DATA 5F,42
01F2C:  DATA 42,4D
01F2E:  DATA 36,2E
01F30:  DATA 0D,0A
01F32:  DATA 00,00
01F34:  DATA 4C,61
01F36:  DATA 73,74
01F38:  DATA 20,75
01F3A:  DATA 70,64
01F3C:  DATA 61,74
01F3E:  DATA 65,64
01F40:  DATA 20,6F
01F42:  DATA 6E,20
01F44:  DATA 25,73
01F46:  DATA 20,25
01F48:  DATA 73,2C
01F4A:  DATA 20,62
01F4C:  DATA 79,20
01F4E:  DATA 49,6E
01F50:  DATA 6F,75
01F52:  DATA 65,2E
01F54:  DATA 0D,0A
01F56:  DATA 0D,0A
01F58:  DATA 00,00
01F5A:  DATA 31,39
01F5C:  DATA 2D,4F
01F5E:  DATA 63,74
01F60:  DATA 2D,32
01F62:  DATA 35,00
01F64:  DATA 31,38
01F66:  DATA 3A,33
01F68:  DATA 32,3A
01F6A:  DATA 35,36
01F6C:  DATA 00,00
01F6E:  DATA 5F,5F
01F70:  DATA 5F,5F
01F72:  DATA 43,49
01F74:  DATA 47,53
01F76:  DATA 20,50
01F78:  DATA 49,43
01F7A:  DATA 20,53
01F7C:  DATA 74,61
01F7E:  DATA 72,74
01F80:  DATA 20,4F
01F82:  DATA 70,65
01F84:  DATA 72,61
01F86:  DATA 74,69
01F88:  DATA 6F,6E
01F8A:  DATA 5F,5F
01F8C:  DATA 5F,5F
01F8E:  DATA 5F,0D
01F90:  DATA 0A,0D
01F92:  DATA 0A,00
01F94:  DATA 77,61
01F96:  DATA 69,74
01F98:  DATA 69,6E
01F9A:  DATA 67,20
01F9C:  DATA 66,6F
01F9E:  DATA 72,20
01FA0:  DATA 42,4F
01FA2:  DATA 53,53
01FA4:  DATA 20,50
01FA6:  DATA 49,43
01FA8:  DATA 20,63
01FAA:  DATA 6F,6D
01FAC:  DATA 6D,61
01FAE:  DATA 6E,64
01FB0:  DATA 00,00
01FB2:  DATA 0D,0A
01FB4:  DATA 0D,0A
01FB6:  DATA 3D,3D
01FB8:  DATA 3D,3D
01FBA:  DATA 3D,3D
01FBC:  DATA 0D,0A
01FBE:  DATA 0D,0A
01FC0:  DATA 46,69
01FC2:  DATA 6E,69
01FC4:  DATA 73,68
01FC6:  DATA 65,64
01FC8:  DATA 20,70
01FCA:  DATA 72,6F
01FCC:  DATA 63,65
01FCE:  DATA 73,73
01FD0:  DATA 2E,0D
01FD2:  DATA 0A,00
01FD4:  DATA 0D,0A
01FD6:  DATA 77,61
01FD8:  DATA 69,74
01FDA:  DATA 69,6E
01FDC:  DATA 67,20
01FDE:  DATA 66,6F
01FE0:  DATA 72,20
01FE2:  DATA 42,4F
01FE4:  DATA 53,53
01FE6:  DATA 20,50
01FE8:  DATA 49,43
01FEA:  DATA 20,63
01FEC:  DATA 6F,6D
01FEE:  DATA 6D,61
01FF0:  DATA 6E,64
01FF2:  DATA 00,00
01FF4:  DATA 45,6E
01FF6:  DATA 64,20
01FF8:  DATA 6D,61
01FFA:  DATA 69,6E
01FFC:  DATA 0D,0A
01FFE:  DATA 00,00
*
0202E:  TBLRD*+
02030:  MOVF   FF5,F
02032:  BTFSC  FD8.2
02034:  GOTO   2062
02038:  MOVFF  FF6,9C2
0203C:  MOVFF  FF7,9C3
02040:  MOVFF  FF8,9C4
02044:  MOVF   FF5,W
02046:  BTFSS  FA6.6
02048:  GOTO   2046
0204C:  MOVLB  E
0204E:  MOVWF  xF9
02050:  MOVFF  9C2,FF6
02054:  MOVFF  9C3,FF7
02058:  MOVFF  9C4,FF8
0205C:  MOVLB  0
0205E:  GOTO   202E
02062:  RETURN 0
02064:  TBLRD*+
02066:  MOVFF  FF6,9C3
0206A:  MOVFF  FF7,9C4
0206E:  MOVFF  FF8,9C5
02072:  MOVF   FF5,W
02074:  BTFSS  FA6.6
02076:  GOTO   2074
0207A:  MOVLB  E
0207C:  MOVWF  xF9
0207E:  MOVFF  9C3,FF6
02082:  MOVFF  9C4,FF7
02086:  MOVFF  9C5,FF8
0208A:  MOVLB  9
0208C:  DECFSZ xC2,F
0208E:  BRA    2094
02090:  BRA    209A
02092:  MOVLB  0
02094:  MOVLB  0
02096:  GOTO   2064
0209A:  MOVLB  0
0209C:  RETURN 0
0209E:  TSTFSZ 01
020A0:  GOTO   20AE
020A4:  TSTFSZ 02
020A6:  GOTO   20B0
020AA:  GOTO   20C0
020AE:  INCF   02,F
020B0:  MOVFF  00,FEE
020B4:  DECFSZ 01,F
020B6:  GOTO   20B0
020BA:  DECFSZ 02,F
020BC:  GOTO   20B0
020C0:  RETURN 0
*
02294:  MOVLB  9
02296:  BTFSS  xE9.7
02298:  BRA    22A0
0229A:  MOVLB  0
0229C:  GOTO   22D6
022A0:  MOVLW  0F
022A2:  MOVWF  00
022A4:  SWAPF  xE8,W
022A6:  ANDWF  00,F
022A8:  MOVLW  0A
022AA:  SUBWF  00,W
022AC:  BTFSS  FD8.0
022AE:  BRA    22B6
022B0:  MOVLB  0
022B2:  GOTO   22C0
022B6:  MOVLW  30
022B8:  ADDWF  00,F
022BA:  MOVLB  0
022BC:  GOTO   22C8
022C0:  MOVLB  9
022C2:  MOVF   xE9,W
022C4:  ADDWF  00,F
022C6:  MOVLB  0
022C8:  MOVF   00,W
022CA:  BTFSS  FA6.6
022CC:  GOTO   22CA
022D0:  MOVLB  E
022D2:  MOVWF  xF9
022D4:  MOVLB  0
022D6:  MOVLW  0F
022D8:  MOVLB  9
022DA:  ANDWF  xE8,F
022DC:  MOVLW  0A
022DE:  SUBWF  xE8,W
022E0:  BTFSS  FD8.0
022E2:  BRA    22EA
022E4:  MOVLB  0
022E6:  GOTO   22F2
022EA:  MOVLW  30
022EC:  MOVLB  0
022EE:  GOTO   22FA
022F2:  MOVLB  9
022F4:  BCF    xE9.7
022F6:  MOVF   xE9,W
022F8:  MOVLB  0
022FA:  MOVLB  9
022FC:  ADDWF  xE8,F
022FE:  MOVF   xE8,W
02300:  MOVLB  0
02302:  BTFSS  FA6.6
02304:  GOTO   2302
02308:  MOVLB  E
0230A:  MOVWF  xF9
0230C:  MOVLB  0
0230E:  RETURN 0
*
0280C:  MOVLB  B
0280E:  MOVF   x08,W
02810:  ANDLW  07
02812:  MOVWF  00
02814:  RRCF   x08,W
02816:  MOVWF  01
02818:  RRCF   01,F
0281A:  RRCF   01,F
0281C:  MOVLW  1F
0281E:  ANDWF  01,F
02820:  MOVF   01,W
02822:  ADDWF  x0A,W
02824:  MOVWF  FE9
02826:  MOVLW  00
02828:  ADDWFC x0B,W
0282A:  MOVWF  FEA
0282C:  CLRF   01
0282E:  INCF   01,F
02830:  INCF   00,F
02832:  MOVLB  0
02834:  GOTO   283A
02838:  RLCF   01,F
0283A:  DECFSZ 00,F
0283C:  GOTO   2838
02840:  MOVLB  B
02842:  MOVF   x09,F
02844:  BTFSS  FD8.2
02846:  BRA    284E
02848:  MOVLB  0
0284A:  GOTO   2858
0284E:  MOVF   01,W
02850:  IORWF  FEF,F
02852:  MOVLB  0
02854:  GOTO   285E
02858:  COMF   01,F
0285A:  MOVF   01,W
0285C:  ANDWF  FEF,F
0285E:  RETURN 0
*
05F4A:  BTFSC  FD8.1
05F4C:  GOTO   5F58
05F50:  MOVLW  02
05F52:  MOVWF  FEA
05F54:  MOVLW  1A
05F56:  MOVWF  FE9
05F58:  CLRF   00
05F5A:  CLRF   01
05F5C:  CLRF   02
05F5E:  CLRF   03
05F60:  MOVLB  2
05F62:  CLRF   x1A
05F64:  CLRF   x1B
05F66:  CLRF   x1C
05F68:  CLRF   x1D
05F6A:  MOVF   x19,W
05F6C:  IORWF  x18,W
05F6E:  IORWF  x17,W
05F70:  IORWF  x16,W
05F72:  BTFSS  FD8.2
05F74:  BRA    5F7C
05F76:  MOVLB  0
05F78:  GOTO   600C
05F7C:  MOVLB  0
05F7E:  MOVLW  20
05F80:  MOVLB  2
05F82:  MOVWF  x1E
05F84:  MOVLB  0
05F86:  BCF    FD8.0
05F88:  MOVLB  2
05F8A:  RLCF   x12,F
05F8C:  RLCF   x13,F
05F8E:  RLCF   x14,F
05F90:  RLCF   x15,F
05F92:  RLCF   x1A,F
05F94:  RLCF   x1B,F
05F96:  RLCF   x1C,F
05F98:  RLCF   x1D,F
05F9A:  MOVF   x19,W
05F9C:  SUBWF  x1D,W
05F9E:  BTFSC  FD8.2
05FA0:  BRA    5FA8
05FA2:  MOVLB  0
05FA4:  GOTO   5FCA
05FA8:  MOVF   x18,W
05FAA:  SUBWF  x1C,W
05FAC:  BTFSC  FD8.2
05FAE:  BRA    5FB6
05FB0:  MOVLB  0
05FB2:  GOTO   5FCA
05FB6:  MOVF   x17,W
05FB8:  SUBWF  x1B,W
05FBA:  BTFSC  FD8.2
05FBC:  BRA    5FC4
05FBE:  MOVLB  0
05FC0:  GOTO   5FCA
05FC4:  MOVF   x16,W
05FC6:  SUBWF  x1A,W
05FC8:  MOVLB  0
05FCA:  BTFSS  FD8.0
05FCC:  GOTO   5FF2
05FD0:  MOVLB  2
05FD2:  MOVF   x16,W
05FD4:  SUBWF  x1A,F
05FD6:  MOVF   x17,W
05FD8:  BTFSS  FD8.0
05FDA:  INCFSZ x17,W
05FDC:  SUBWF  x1B,F
05FDE:  MOVF   x18,W
05FE0:  BTFSS  FD8.0
05FE2:  INCFSZ x18,W
05FE4:  SUBWF  x1C,F
05FE6:  MOVF   x19,W
05FE8:  BTFSS  FD8.0
05FEA:  INCFSZ x19,W
05FEC:  SUBWF  x1D,F
05FEE:  BSF    FD8.0
05FF0:  MOVLB  0
05FF2:  RLCF   00,F
05FF4:  RLCF   01,F
05FF6:  RLCF   02,F
05FF8:  RLCF   03,F
05FFA:  MOVLB  2
05FFC:  DECFSZ x1E,F
05FFE:  BRA    6004
06000:  BRA    600A
06002:  MOVLB  0
06004:  MOVLB  0
06006:  GOTO   5F86
0600A:  MOVLB  0
0600C:  MOVFF  21A,FEF
06010:  MOVFF  21B,FEC
06014:  MOVFF  21C,FEC
06018:  MOVFF  21D,FEC
0601C:  MOVF   FED,F
0601E:  MOVF   FED,F
06020:  MOVF   FED,F
06022:  RETURN 0
06024:  MOVF   FE9,W
06026:  MOVLB  2
06028:  MOVWF  x0A
0602A:  MOVLW  3B
0602C:  MOVWF  x11
0602E:  MOVLW  9A
06030:  MOVWF  x10
06032:  MOVLW  CA
06034:  MOVWF  x0F
06036:  CLRF   x0E
06038:  MOVLW  0A
0603A:  MOVWF  x0C
0603C:  MOVLB  0
0603E:  BSF    FD8.1
06040:  MOVLW  02
06042:  MOVWF  FEA
06044:  MOVLW  06
06046:  MOVWF  FE9
06048:  MOVFF  209,215
0604C:  MOVFF  208,214
06050:  MOVFF  207,213
06054:  MOVFF  206,212
06058:  MOVFF  211,219
0605C:  MOVFF  210,218
06060:  MOVFF  20F,217
06064:  MOVFF  20E,216
06068:  CALL   5F4A
0606C:  MOVF   01,W
0606E:  MOVF   00,F
06070:  BTFSS  FD8.2
06072:  GOTO   60CA
06076:  MOVLB  2
06078:  MOVF   x0C,W
0607A:  XORLW  01
0607C:  BTFSS  FD8.2
0607E:  BRA    6086
06080:  MOVLB  0
06082:  GOTO   60CA
06086:  MOVF   x0A,W
06088:  BTFSS  FD8.2
0608A:  BRA    6092
0608C:  MOVLB  0
0608E:  GOTO   60D0
06092:  ANDLW  0F
06094:  SUBWF  x0C,W
06096:  BTFSS  FD8.2
06098:  BRA    60A0
0609A:  MOVLB  0
0609C:  GOTO   60AC
060A0:  BTFSS  FD8.0
060A2:  BRA    60AA
060A4:  MOVLB  0
060A6:  GOTO   60E2
060AA:  MOVLB  0
060AC:  MOVLB  2
060AE:  BTFSS  x0A.7
060B0:  BRA    60B8
060B2:  MOVLB  0
060B4:  GOTO   60E2
060B8:  BTFSS  x0A.6
060BA:  BRA    60C2
060BC:  MOVLB  0
060BE:  GOTO   60D0
060C2:  MOVLW  20
060C4:  MOVLB  0
060C6:  GOTO   60D2
060CA:  MOVLB  2
060CC:  CLRF   x0A
060CE:  MOVLB  0
060D0:  MOVLW  30
060D2:  ADDWF  00,F
060D4:  MOVF   00,W
060D6:  BTFSS  FA6.6
060D8:  GOTO   60D6
060DC:  MOVLB  E
060DE:  MOVWF  xF9
060E0:  MOVLB  0
060E2:  BCF    FD8.1
060E4:  MOVFF  211,215
060E8:  MOVFF  210,214
060EC:  MOVFF  20F,213
060F0:  MOVFF  20E,212
060F4:  MOVLB  2
060F6:  CLRF   x19
060F8:  CLRF   x18
060FA:  CLRF   x17
060FC:  MOVLW  0A
060FE:  MOVWF  x16
06100:  MOVLB  0
06102:  CALL   5F4A
06106:  MOVFF  03,211
0610A:  MOVFF  02,210
0610E:  MOVFF  01,20F
06112:  MOVFF  00,20E
06116:  MOVLB  2
06118:  DECFSZ x0C,F
0611A:  BRA    6120
0611C:  BRA    6126
0611E:  MOVLB  0
06120:  MOVLB  0
06122:  GOTO   603E
06126:  MOVLB  0
06128:  RETURN 0
*
07F94:  MOVLB  A
07F96:  MOVF   x51,W
07F98:  MULWF  x53
07F9A:  MOVFF  FF3,01
07F9E:  MOVFF  FF4,00
07FA2:  MULWF  x54
07FA4:  MOVF   FF3,W
07FA6:  ADDWF  00,F
07FA8:  MOVF   x52,W
07FAA:  MULWF  x53
07FAC:  MOVF   FF3,W
07FAE:  ADDWFC 00,W
07FB0:  MOVWF  02
07FB2:  MOVLB  0
07FB4:  RETURN 0
*
080BE:  MOVLW  8E
080C0:  MOVWF  00
080C2:  MOVFF  1F4,01
080C6:  MOVFF  1F3,02
080CA:  CLRF   03
080CC:  MOVF   01,F
080CE:  BTFSS  FD8.2
080D0:  GOTO   80EC
080D4:  MOVFF  02,01
080D8:  CLRF   02
080DA:  MOVLW  08
080DC:  SUBWF  00,F
080DE:  MOVF   01,F
080E0:  BTFSS  FD8.2
080E2:  GOTO   80EC
080E6:  CLRF   00
080E8:  GOTO   8100
080EC:  BCF    FD8.0
080EE:  BTFSC  01.7
080F0:  GOTO   80FE
080F4:  RLCF   02,F
080F6:  RLCF   01,F
080F8:  DECF   00,F
080FA:  GOTO   80EC
080FE:  BCF    01.7
08100:  GOTO   8AB0 (RETURN)
08104:  MOVLB  1
08106:  MOVF   xF7,W
08108:  BTFSS  FD8.2
0810A:  BRA    8112
0810C:  MOVLB  0
0810E:  GOTO   8256
08112:  MOVWF  00
08114:  MOVF   xFB,W
08116:  BTFSS  FD8.2
08118:  BRA    8120
0811A:  MOVLB  0
0811C:  GOTO   8256
08120:  ADDWF  00,F
08122:  BTFSC  FD8.0
08124:  BRA    812C
08126:  MOVLB  0
08128:  GOTO   813C
0812C:  MOVLB  0
0812E:  MOVLW  81
08130:  ADDWF  00,F
08132:  BTFSC  FD8.0
08134:  GOTO   8256
08138:  GOTO   814C
0813C:  MOVLW  7F
0813E:  SUBWF  00,F
08140:  BTFSS  FD8.0
08142:  GOTO   8256
08146:  BTFSC  FD8.2
08148:  GOTO   8256
0814C:  MOVFF  1F8,1FF
08150:  MOVLB  1
08152:  MOVF   xFC,W
08154:  XORWF  xFF,F
08156:  BSF    xF8.7
08158:  BSF    xFC.7
0815A:  MOVF   xFA,W
0815C:  MULWF  xFE
0815E:  MOVFF  FF4,201
08162:  MOVF   xF9,W
08164:  MULWF  xFD
08166:  MOVFF  FF4,03
0816A:  MOVFF  FF3,200
0816E:  MULWF  xFE
08170:  MOVF   FF3,W
08172:  MOVLB  2
08174:  ADDWF  x01,F
08176:  MOVF   FF4,W
08178:  ADDWFC x00,F
0817A:  MOVLW  00
0817C:  ADDWFC 03,F
0817E:  MOVLB  1
08180:  MOVF   xFA,W
08182:  MULWF  xFD
08184:  MOVF   FF3,W
08186:  MOVLB  2
08188:  ADDWF  x01,F
0818A:  MOVF   FF4,W
0818C:  ADDWFC x00,F
0818E:  MOVLW  00
08190:  CLRF   02
08192:  ADDWFC 03,F
08194:  ADDWFC 02,F
08196:  MOVLB  1
08198:  MOVF   xF8,W
0819A:  MULWF  xFE
0819C:  MOVF   FF3,W
0819E:  MOVLB  2
081A0:  ADDWF  x00,F
081A2:  MOVF   FF4,W
081A4:  ADDWFC 03,F
081A6:  MOVLW  00
081A8:  ADDWFC 02,F
081AA:  MOVLB  1
081AC:  MOVF   xF8,W
081AE:  MULWF  xFD
081B0:  MOVF   FF3,W
081B2:  ADDWF  03,F
081B4:  MOVF   FF4,W
081B6:  ADDWFC 02,F
081B8:  MOVLW  00
081BA:  CLRF   01
081BC:  ADDWFC 01,F
081BE:  MOVF   xFA,W
081C0:  MULWF  xFC
081C2:  MOVF   FF3,W
081C4:  MOVLB  2
081C6:  ADDWF  x00,F
081C8:  MOVF   FF4,W
081CA:  ADDWFC 03,F
081CC:  MOVLW  00
081CE:  ADDWFC 02,F
081D0:  ADDWFC 01,F
081D2:  MOVLB  1
081D4:  MOVF   xF9,W
081D6:  MULWF  xFC
081D8:  MOVF   FF3,W
081DA:  ADDWF  03,F
081DC:  MOVF   FF4,W
081DE:  ADDWFC 02,F
081E0:  MOVLW  00
081E2:  ADDWFC 01,F
081E4:  MOVF   xF8,W
081E6:  MULWF  xFC
081E8:  MOVF   FF3,W
081EA:  ADDWF  02,F
081EC:  MOVF   FF4,W
081EE:  ADDWFC 01,F
081F0:  INCF   00,F
081F2:  BTFSS  01.7
081F4:  BRA    81FC
081F6:  MOVLB  0
081F8:  GOTO   820A
081FC:  MOVLB  2
081FE:  RLCF   x00,F
08200:  RLCF   03,F
08202:  RLCF   02,F
08204:  RLCF   01,F
08206:  DECF   00,F
08208:  MOVLB  0
0820A:  MOVLW  00
0820C:  MOVLB  2
0820E:  BTFSC  x00.7
08210:  BRA    8218
08212:  MOVLB  0
08214:  GOTO   8246
08218:  INCF   03,F
0821A:  ADDWFC 02,F
0821C:  ADDWFC 01,F
0821E:  MOVF   01,W
08220:  BTFSC  FD8.2
08222:  BRA    822A
08224:  MOVLB  0
08226:  GOTO   8246
0822A:  MOVF   02,W
0822C:  BTFSC  FD8.2
0822E:  BRA    8236
08230:  MOVLB  0
08232:  GOTO   8246
08236:  MOVF   03,W
08238:  BTFSC  FD8.2
0823A:  BRA    8242
0823C:  MOVLB  0
0823E:  GOTO   8246
08242:  INCF   00,F
08244:  MOVLB  0
08246:  MOVLB  1
08248:  BTFSC  xFF.7
0824A:  BSF    01.7
0824C:  BTFSS  xFF.7
0824E:  BCF    01.7
08250:  MOVLB  0
08252:  GOTO   825E
08256:  CLRF   00
08258:  CLRF   01
0825A:  CLRF   02
0825C:  CLRF   03
0825E:  GOTO   8AE6 (RETURN)
08262:  MOVLB  1
08264:  MOVF   xF7,W
08266:  BTFSS  FD8.2
08268:  BRA    8270
0826A:  MOVLB  0
0826C:  GOTO   8546
08270:  MOVLB  2
08272:  MOVWF  x03
08274:  MOVLB  1
08276:  MOVF   xFB,W
08278:  BTFSS  FD8.2
0827A:  BRA    8282
0827C:  MOVLB  0
0827E:  GOTO   8546
08282:  MOVLB  2
08284:  SUBWF  x03,F
08286:  BTFSS  FD8.0
08288:  BRA    8290
0828A:  MOVLB  0
0828C:  GOTO   8296
08290:  MOVLB  0
08292:  GOTO   82AC
08296:  MOVLW  7F
08298:  MOVLB  2
0829A:  ADDWF  x03,F
0829C:  BTFSS  FD8.0
0829E:  BRA    82A6
082A0:  MOVLB  0
082A2:  GOTO   8546
082A6:  MOVLB  0
082A8:  GOTO   82C8
082AC:  MOVLW  81
082AE:  MOVLB  2
082B0:  SUBWF  x03,F
082B2:  BTFSC  FD8.0
082B4:  BRA    82BC
082B6:  MOVLB  0
082B8:  GOTO   8546
082BC:  BTFSS  FD8.2
082BE:  BRA    82C6
082C0:  MOVLB  0
082C2:  GOTO   8546
082C6:  MOVLB  0
082C8:  MOVFF  203,00
082CC:  CLRF   01
082CE:  CLRF   02
082D0:  CLRF   03
082D2:  MOVLB  2
082D4:  CLRF   x02
082D6:  MOVFF  1F8,201
082DA:  BSF    x01.7
082DC:  MOVFF  1F9,200
082E0:  MOVFF  1FA,1FF
082E4:  MOVLW  19
082E6:  MOVWF  x03
082E8:  MOVLB  0
082EA:  MOVLB  1
082EC:  MOVF   xFE,W
082EE:  SUBWF  xFF,F
082F0:  BTFSS  FD8.0
082F2:  BRA    82FA
082F4:  MOVLB  0
082F6:  GOTO   8334
082FA:  MOVLW  01
082FC:  MOVLB  2
082FE:  SUBWF  x00,F
08300:  BTFSS  FD8.0
08302:  BRA    830A
08304:  MOVLB  0
08306:  GOTO   8334
0830A:  SUBWF  x01,F
0830C:  BTFSS  FD8.0
0830E:  BRA    8316
08310:  MOVLB  0
08312:  GOTO   8334
08316:  SUBWF  x02,F
08318:  BTFSS  FD8.0
0831A:  BRA    8322
0831C:  MOVLB  0
0831E:  GOTO   8334
08322:  INCF   x02,F
08324:  INCF   x01,F
08326:  INCF   x00,F
08328:  MOVLB  1
0832A:  MOVF   xFE,W
0832C:  ADDWF  xFF,F
0832E:  MOVLB  0
08330:  GOTO   83FA
08334:  MOVLB  1
08336:  MOVF   xFD,W
08338:  MOVLB  2
0833A:  SUBWF  x00,F
0833C:  BTFSS  FD8.0
0833E:  BRA    8346
08340:  MOVLB  0
08342:  GOTO   83A4
08346:  MOVLW  01
08348:  SUBWF  x01,F
0834A:  BTFSS  FD8.0
0834C:  BRA    8354
0834E:  MOVLB  0
08350:  GOTO   83A4
08354:  SUBWF  x02,F
08356:  BTFSS  FD8.0
08358:  BRA    8360
0835A:  MOVLB  0
0835C:  GOTO   83A4
08360:  MOVLB  0
08362:  MOVLB  2
08364:  INCF   x02,F
08366:  INCF   x01,F
08368:  MOVLB  1
0836A:  MOVF   xFD,W
0836C:  MOVLB  2
0836E:  ADDWF  x00,F
08370:  MOVLB  0
08372:  MOVLB  1
08374:  MOVF   xFE,W
08376:  ADDWF  xFF,F
08378:  BTFSC  FD8.0
0837A:  BRA    8382
0837C:  MOVLB  0
0837E:  GOTO   83FA
08382:  MOVLB  2
08384:  INCF   x00,F
08386:  BTFSC  FD8.2
08388:  BRA    8390
0838A:  MOVLB  0
0838C:  GOTO   83FA
08390:  INCF   x01,F
08392:  BTFSC  FD8.2
08394:  BRA    839C
08396:  MOVLB  0
08398:  GOTO   83FA
0839C:  INCF   x02,F
0839E:  MOVLB  0
083A0:  GOTO   83FA
083A4:  MOVLB  1
083A6:  MOVF   xFC,W
083A8:  IORLW  80
083AA:  MOVLB  2
083AC:  SUBWF  x01,F
083AE:  BTFSS  FD8.0
083B0:  BRA    83B8
083B2:  MOVLB  0
083B4:  GOTO   83F8
083B8:  MOVLW  01
083BA:  SUBWF  x02,F
083BC:  BTFSS  FD8.0
083BE:  BRA    83C6
083C0:  MOVLB  0
083C2:  GOTO   83F8
083C6:  INCF   x02,F
083C8:  MOVLB  1
083CA:  MOVF   xFC,W
083CC:  IORLW  80
083CE:  MOVLB  2
083D0:  ADDWF  x01,F
083D2:  MOVLB  1
083D4:  MOVF   xFD,W
083D6:  MOVLB  2
083D8:  ADDWF  x00,F
083DA:  BTFSC  FD8.0
083DC:  BRA    83E4
083DE:  MOVLB  0
083E0:  GOTO   8372
083E4:  INCF   x01,F
083E6:  BTFSC  FD8.2
083E8:  BRA    83F0
083EA:  MOVLB  0
083EC:  GOTO   8372
083F0:  INCF   x02,F
083F2:  MOVLB  0
083F4:  GOTO   8372
083F8:  BSF    03.0
083FA:  MOVLB  2
083FC:  DECFSZ x03,F
083FE:  BRA    8404
08400:  BRA    840A
08402:  MOVLB  0
08404:  MOVLB  0
08406:  GOTO   8410
0840A:  MOVLB  0
0840C:  GOTO   842E
08410:  BCF    FD8.0
08412:  MOVLB  1
08414:  RLCF   xFF,F
08416:  MOVLB  2
08418:  RLCF   x00,F
0841A:  RLCF   x01,F
0841C:  RLCF   x02,F
0841E:  BCF    FD8.0
08420:  RLCF   03,F
08422:  RLCF   02,F
08424:  RLCF   01,F
08426:  RLCF   x04,F
08428:  MOVLB  0
0842A:  GOTO   82EA
0842E:  MOVLB  2
08430:  BTFSC  x04.0
08432:  BRA    843A
08434:  MOVLB  0
08436:  GOTO   844A
0843A:  BCF    FD8.0
0843C:  RRCF   01,F
0843E:  RRCF   02,F
08440:  RRCF   03,F
08442:  RRCF   x04,F
08444:  MOVLB  0
08446:  GOTO   8452
0844A:  DECF   00,F
0844C:  BTFSC  FD8.2
0844E:  GOTO   8546
08452:  MOVLB  2
08454:  BTFSS  x04.7
08456:  BRA    845E
08458:  MOVLB  0
0845A:  GOTO   84FC
0845E:  BCF    FD8.0
08460:  MOVLB  1
08462:  RLCF   xFF,F
08464:  MOVLB  2
08466:  RLCF   x00,F
08468:  RLCF   x01,F
0846A:  RLCF   x02,F
0846C:  MOVLB  0
0846E:  MOVLB  1
08470:  MOVF   xFE,W
08472:  SUBWF  xFF,F
08474:  BTFSS  FD8.0
08476:  BRA    847E
08478:  MOVLB  0
0847A:  GOTO   84A8
0847E:  MOVLW  01
08480:  MOVLB  2
08482:  SUBWF  x00,F
08484:  BTFSS  FD8.0
08486:  BRA    848E
08488:  MOVLB  0
0848A:  GOTO   84A8
0848E:  SUBWF  x01,F
08490:  BTFSS  FD8.0
08492:  BRA    849A
08494:  MOVLB  0
08496:  GOTO   84A8
0849A:  SUBWF  x02,F
0849C:  BTFSC  FD8.0
0849E:  BRA    84A6
084A0:  MOVLB  0
084A2:  GOTO   8522
084A6:  MOVLB  0
084A8:  MOVLB  1
084AA:  MOVF   xFD,W
084AC:  MOVLB  2
084AE:  SUBWF  x00,F
084B0:  BTFSS  FD8.0
084B2:  BRA    84BA
084B4:  MOVLB  0
084B6:  GOTO   84D6
084BA:  MOVLW  01
084BC:  SUBWF  x01,F
084BE:  BTFSS  FD8.0
084C0:  BRA    84C8
084C2:  MOVLB  0
084C4:  GOTO   84D6
084C8:  SUBWF  x02,F
084CA:  BTFSC  FD8.0
084CC:  BRA    84D4
084CE:  MOVLB  0
084D0:  GOTO   8522
084D4:  MOVLB  0
084D6:  MOVLB  1
084D8:  MOVF   xFC,W
084DA:  IORLW  80
084DC:  MOVLB  0
084DE:  MOVLB  2
084E0:  SUBWF  x01,F
084E2:  BTFSS  FD8.0
084E4:  BRA    84EC
084E6:  MOVLB  0
084E8:  GOTO   84FC
084EC:  MOVLW  01
084EE:  SUBWF  x02,F
084F0:  BTFSC  FD8.0
084F2:  BRA    84FA
084F4:  MOVLB  0
084F6:  GOTO   8522
084FA:  MOVLB  0
084FC:  INCF   03,F
084FE:  BTFSS  FD8.2
08500:  GOTO   8522
08504:  INCF   02,F
08506:  BTFSS  FD8.2
08508:  GOTO   8522
0850C:  INCF   01,F
0850E:  BTFSS  FD8.2
08510:  GOTO   8522
08514:  INCF   00,F
08516:  BTFSC  FD8.2
08518:  GOTO   8546
0851C:  RRCF   01,F
0851E:  RRCF   02,F
08520:  RRCF   03,F
08522:  MOVFF  1F8,203
08526:  MOVLB  1
08528:  MOVF   xFC,W
0852A:  MOVLB  2
0852C:  XORWF  x03,F
0852E:  BTFSC  x03.7
08530:  BRA    8538
08532:  MOVLB  0
08534:  GOTO   8540
08538:  BSF    01.7
0853A:  MOVLB  0
0853C:  GOTO   854E
08540:  BCF    01.7
08542:  GOTO   854E
08546:  CLRF   00
08548:  CLRF   01
0854A:  CLRF   02
0854C:  CLRF   03
0854E:  RETURN 0
08550:  MOVLW  80
08552:  BTFSS  FD8.1
08554:  BRA    855C
08556:  MOVLB  1
08558:  XORWF  xF8,F
0855A:  MOVLB  0
0855C:  MOVLB  1
0855E:  CLRF   xFD
08560:  CLRF   xFE
08562:  MOVFF  1F4,1FC
08566:  MOVF   xF8,W
08568:  XORWF  xFC,F
0856A:  MOVF   xF3,W
0856C:  BTFSS  FD8.2
0856E:  BRA    8576
08570:  MOVLB  0
08572:  GOTO   8924
08576:  MOVWF  xFB
08578:  MOVFF  1FB,00
0857C:  MOVF   xF7,W
0857E:  BTFSS  FD8.2
08580:  BRA    8588
08582:  MOVLB  0
08584:  GOTO   8938
08588:  SUBWF  xFB,F
0858A:  BTFSS  FD8.2
0858C:  BRA    8594
0858E:  MOVLB  0
08590:  GOTO   879E
08594:  BTFSS  FD8.0
08596:  BRA    859E
08598:  MOVLB  0
0859A:  GOTO   85A4
0859E:  MOVLB  0
085A0:  GOTO   869A
085A4:  MOVFF  1F8,201
085A8:  MOVLB  2
085AA:  BSF    x01.7
085AC:  MOVFF  1F9,200
085B0:  MOVFF  1FA,1FF
085B4:  MOVLB  0
085B6:  MOVLB  1
085B8:  CLRF   xFE
085BA:  BCF    FD8.0
085BC:  MOVLB  2
085BE:  RRCF   x01,F
085C0:  RRCF   x00,F
085C2:  MOVLB  1
085C4:  RRCF   xFF,F
085C6:  RRCF   xFE,F
085C8:  DECFSZ xFB,F
085CA:  BRA    85D0
085CC:  BRA    85D6
085CE:  MOVLB  0
085D0:  MOVLB  0
085D2:  GOTO   85B6
085D6:  MOVLB  0
085D8:  MOVLB  1
085DA:  BTFSC  xFC.7
085DC:  BRA    85E4
085DE:  MOVLB  0
085E0:  GOTO   85F2
085E4:  BSF    xFD.0
085E6:  MOVLB  0
085E8:  GOTO   8964
085EC:  MOVLB  1
085EE:  BCF    xFD.0
085F0:  MOVLB  0
085F2:  MOVLB  1
085F4:  BCF    xFB.0
085F6:  BSF    xFD.4
085F8:  MOVLW  01
085FA:  MOVWF  FEA
085FC:  MOVLW  F6
085FE:  MOVWF  FE9
08600:  MOVLB  0
08602:  GOTO   89C4
08606:  MOVLB  1
08608:  BCF    xFD.4
0860A:  BTFSS  xFC.7
0860C:  BRA    8614
0860E:  MOVLB  0
08610:  GOTO   863C
08614:  BTFSC  xFB.0
08616:  BRA    861E
08618:  MOVLB  0
0861A:  GOTO   8666
0861E:  MOVLB  2
08620:  RRCF   x01,F
08622:  RRCF   x00,F
08624:  MOVLB  1
08626:  RRCF   xFF,F
08628:  RRCF   xFE,F
0862A:  INCF   00,F
0862C:  BTFSS  FD8.2
0862E:  BRA    8636
08630:  MOVLB  0
08632:  GOTO   8958
08636:  MOVLB  0
08638:  GOTO   8666
0863C:  MOVLB  2
0863E:  BTFSS  x01.7
08640:  BRA    8648
08642:  MOVLB  0
08644:  GOTO   8676
08648:  BCF    FD8.0
0864A:  MOVLB  1
0864C:  RLCF   xFE,F
0864E:  RLCF   xFF,F
08650:  MOVLB  2
08652:  RLCF   x00,F
08654:  RLCF   x01,F
08656:  DECFSZ 00,F
08658:  BRA    8660
0865A:  MOVLB  0
0865C:  GOTO   8958
08660:  MOVLB  0
08662:  GOTO   863C
08666:  MOVLB  1
08668:  BSF    xFD.6
0866A:  MOVLB  0
0866C:  GOTO   881A
08670:  MOVLB  1
08672:  BCF    xFD.6
08674:  MOVLB  0
08676:  MOVFF  1F4,1FC
0867A:  MOVLB  1
0867C:  BTFSC  xFC.7
0867E:  BRA    8686
08680:  MOVLB  0
08682:  GOTO   8690
08686:  MOVLB  2
08688:  BSF    x01.7
0868A:  MOVLB  0
0868C:  GOTO   8948
08690:  MOVLB  2
08692:  BCF    x01.7
08694:  MOVLB  0
08696:  GOTO   8948
0869A:  MOVFF  1F7,1FB
0869E:  MOVFF  1FB,00
086A2:  MOVLB  1
086A4:  MOVF   xF3,W
086A6:  SUBWF  xFB,F
086A8:  MOVFF  1F4,201
086AC:  MOVLB  2
086AE:  BSF    x01.7
086B0:  MOVFF  1F5,200
086B4:  MOVFF  1F6,1FF
086B8:  MOVLB  0
086BA:  MOVLB  1
086BC:  CLRF   xFE
086BE:  BCF    FD8.0
086C0:  MOVLB  2
086C2:  RRCF   x01,F
086C4:  RRCF   x00,F
086C6:  MOVLB  1
086C8:  RRCF   xFF,F
086CA:  RRCF   xFE,F
086CC:  DECFSZ xFB,F
086CE:  BRA    86D4
086D0:  BRA    86DA
086D2:  MOVLB  0
086D4:  MOVLB  0
086D6:  GOTO   86BA
086DA:  MOVLB  0
086DC:  MOVLB  1
086DE:  BTFSC  xFC.7
086E0:  BRA    86E8
086E2:  MOVLB  0
086E4:  GOTO   86F6
086E8:  BSF    xFD.1
086EA:  MOVLB  0
086EC:  GOTO   8964
086F0:  MOVLB  1
086F2:  BCF    xFD.1
086F4:  MOVLB  0
086F6:  MOVLB  1
086F8:  BCF    xFB.0
086FA:  BSF    xFD.5
086FC:  MOVLW  01
086FE:  MOVWF  FEA
08700:  MOVLW  FA
08702:  MOVWF  FE9
08704:  MOVLB  0
08706:  GOTO   89C4
0870A:  MOVLB  1
0870C:  BCF    xFD.5
0870E:  BTFSS  xFC.7
08710:  BRA    8718
08712:  MOVLB  0
08714:  GOTO   8740
08718:  BTFSC  xFB.0
0871A:  BRA    8722
0871C:  MOVLB  0
0871E:  GOTO   876A
08722:  MOVLB  2
08724:  RRCF   x01,F
08726:  RRCF   x00,F
08728:  MOVLB  1
0872A:  RRCF   xFF,F
0872C:  RRCF   xFE,F
0872E:  INCF   00,F
08730:  BTFSS  FD8.2
08732:  BRA    873A
08734:  MOVLB  0
08736:  GOTO   8958
0873A:  MOVLB  0
0873C:  GOTO   876A
08740:  MOVLB  2
08742:  BTFSS  x01.7
08744:  BRA    874C
08746:  MOVLB  0
08748:  GOTO   877A
0874C:  BCF    FD8.0
0874E:  MOVLB  1
08750:  RLCF   xFE,F
08752:  RLCF   xFF,F
08754:  MOVLB  2
08756:  RLCF   x00,F
08758:  RLCF   x01,F
0875A:  DECFSZ 00,F
0875C:  BRA    8764
0875E:  MOVLB  0
08760:  GOTO   8958
08764:  MOVLB  0
08766:  GOTO   8740
0876A:  MOVLB  1
0876C:  BSF    xFD.7
0876E:  MOVLB  0
08770:  GOTO   881A
08774:  MOVLB  1
08776:  BCF    xFD.7
08778:  MOVLB  0
0877A:  MOVFF  1F8,1FC
0877E:  MOVLB  1
08780:  BTFSC  xFC.7
08782:  BRA    878A
08784:  MOVLB  0
08786:  GOTO   8794
0878A:  MOVLB  2
0878C:  BSF    x01.7
0878E:  MOVLB  0
08790:  GOTO   8948
08794:  MOVLB  2
08796:  BCF    x01.7
08798:  MOVLB  0
0879A:  GOTO   8948
0879E:  MOVFF  1F8,201
087A2:  MOVLB  2
087A4:  BSF    x01.7
087A6:  MOVFF  1F9,200
087AA:  MOVFF  1FA,1FF
087AE:  MOVLB  1
087B0:  BTFSC  xFC.7
087B2:  BRA    87BA
087B4:  MOVLB  0
087B6:  GOTO   87CE
087BA:  MOVLB  2
087BC:  BCF    x01.7
087BE:  MOVLB  1
087C0:  BSF    xFD.2
087C2:  MOVLB  0
087C4:  GOTO   8964
087C8:  MOVLB  1
087CA:  BCF    xFD.2
087CC:  MOVLB  0
087CE:  MOVLB  1
087D0:  CLRF   xFE
087D2:  BCF    xFB.0
087D4:  MOVLW  01
087D6:  MOVWF  FEA
087D8:  MOVLW  F6
087DA:  MOVWF  FE9
087DC:  MOVLB  0
087DE:  GOTO   89C4
087E2:  MOVLB  1
087E4:  BTFSS  xFC.7
087E6:  BRA    87EE
087E8:  MOVLB  0
087EA:  GOTO   887E
087EE:  MOVFF  1F4,1FC
087F2:  MOVLB  0
087F4:  MOVLB  1
087F6:  BTFSC  xFB.0
087F8:  BRA    8800
087FA:  MOVLB  0
087FC:  GOTO   881A
08800:  MOVLB  2
08802:  RRCF   x01,F
08804:  RRCF   x00,F
08806:  MOVLB  1
08808:  RRCF   xFF,F
0880A:  RRCF   xFE,F
0880C:  INCF   00,F
0880E:  BTFSS  FD8.2
08810:  BRA    8818
08812:  MOVLB  0
08814:  GOTO   8958
08818:  MOVLB  0
0881A:  MOVLB  1
0881C:  BTFSC  xFE.7
0881E:  BRA    8826
08820:  MOVLB  0
08822:  GOTO   8862
08826:  INCF   xFF,F
08828:  BTFSC  FD8.2
0882A:  BRA    8832
0882C:  MOVLB  0
0882E:  GOTO   8862
08832:  MOVLB  2
08834:  INCF   x00,F
08836:  BTFSC  FD8.2
08838:  BRA    8840
0883A:  MOVLB  0
0883C:  GOTO   8862
08840:  INCF   x01,F
08842:  BTFSC  FD8.2
08844:  BRA    884C
08846:  MOVLB  0
08848:  GOTO   8862
0884C:  RRCF   x01,F
0884E:  RRCF   x00,F
08850:  MOVLB  1
08852:  RRCF   xFF,F
08854:  INCF   00,F
08856:  BTFSS  FD8.2
08858:  BRA    8860
0885A:  MOVLB  0
0885C:  GOTO   8958
08860:  MOVLB  0
08862:  MOVLB  1
08864:  BTFSS  xFD.6
08866:  BRA    886E
08868:  MOVLB  0
0886A:  GOTO   8670
0886E:  BTFSS  xFD.7
08870:  BRA    8878
08872:  MOVLB  0
08874:  GOTO   8774
08878:  MOVLB  0
0887A:  GOTO   8904
0887E:  MOVLW  80
08880:  MOVLB  2
08882:  XORWF  x01,F
08884:  BTFSC  x01.7
08886:  BRA    888E
08888:  MOVLB  0
0888A:  GOTO   889C
0888E:  MOVLB  0
08890:  GOTO   8964
08894:  MOVFF  1F8,1FC
08898:  GOTO   88D6
0889C:  MOVFF  1F4,1FC
088A0:  MOVLB  2
088A2:  MOVF   x01,F
088A4:  BTFSC  FD8.2
088A6:  BRA    88AE
088A8:  MOVLB  0
088AA:  GOTO   88D6
088AE:  MOVLB  0
088B0:  MOVLB  2
088B2:  MOVF   x00,F
088B4:  BTFSC  FD8.2
088B6:  BRA    88BE
088B8:  MOVLB  0
088BA:  GOTO   88D6
088BE:  MOVLB  0
088C0:  MOVLB  1
088C2:  MOVF   xFF,F
088C4:  BTFSC  FD8.2
088C6:  BRA    88CE
088C8:  MOVLB  0
088CA:  GOTO   88D6
088CE:  MOVLB  0
088D0:  CLRF   00
088D2:  GOTO   8948
088D6:  MOVLB  2
088D8:  BTFSS  x01.7
088DA:  BRA    88E2
088DC:  MOVLB  0
088DE:  GOTO   8904
088E2:  BCF    FD8.0
088E4:  MOVLB  1
088E6:  RLCF   xFE,F
088E8:  RLCF   xFF,F
088EA:  MOVLB  2
088EC:  RLCF   x00,F
088EE:  RLCF   x01,F
088F0:  DECFSZ 00,F
088F2:  BRA    88F8
088F4:  BRA    88FE
088F6:  MOVLB  0
088F8:  MOVLB  0
088FA:  GOTO   88D6
088FE:  MOVLB  0
08900:  GOTO   8958
08904:  MOVLB  1
08906:  BTFSC  xFC.7
08908:  BRA    8910
0890A:  MOVLB  0
0890C:  GOTO   891A
08910:  MOVLB  2
08912:  BSF    x01.7
08914:  MOVLB  0
08916:  GOTO   8948
0891A:  MOVLB  2
0891C:  BCF    x01.7
0891E:  MOVLB  0
08920:  GOTO   8948
08924:  MOVFF  1F7,00
08928:  MOVFF  1F8,201
0892C:  MOVFF  1F9,200
08930:  MOVFF  1FA,1FF
08934:  GOTO   8948
08938:  MOVFF  1F3,00
0893C:  MOVFF  1F4,201
08940:  MOVFF  1F5,200
08944:  MOVFF  1F6,1FF
08948:  MOVFF  201,01
0894C:  MOVFF  200,02
08950:  MOVFF  1FF,03
08954:  GOTO   8A46
08958:  CLRF   00
0895A:  CLRF   01
0895C:  CLRF   02
0895E:  CLRF   03
08960:  GOTO   8A46
08964:  MOVLB  1
08966:  CLRF   xFE
08968:  COMF   xFF,F
0896A:  MOVLB  2
0896C:  COMF   x00,F
0896E:  COMF   x01,F
08970:  MOVLB  1
08972:  COMF   xFE,F
08974:  INCF   xFE,F
08976:  BTFSC  FD8.2
08978:  BRA    8980
0897A:  MOVLB  0
0897C:  GOTO   899E
08980:  INCF   xFF,F
08982:  BTFSC  FD8.2
08984:  BRA    898C
08986:  MOVLB  0
08988:  GOTO   899E
0898C:  MOVLB  2
0898E:  INCF   x00,F
08990:  BTFSC  FD8.2
08992:  BRA    899A
08994:  MOVLB  0
08996:  GOTO   899E
0899A:  INCF   x01,F
0899C:  MOVLB  0
0899E:  MOVLB  1
089A0:  BTFSS  xFD.0
089A2:  BRA    89AA
089A4:  MOVLB  0
089A6:  GOTO   85EC
089AA:  BTFSS  xFD.1
089AC:  BRA    89B4
089AE:  MOVLB  0
089B0:  GOTO   86F0
089B4:  BTFSS  xFD.2
089B6:  BRA    89BE
089B8:  MOVLB  0
089BA:  GOTO   87C8
089BE:  MOVLB  0
089C0:  GOTO   8894
089C4:  MOVF   FEF,W
089C6:  MOVLB  1
089C8:  ADDWF  xFF,F
089CA:  BTFSC  FD8.0
089CC:  BRA    89D4
089CE:  MOVLB  0
089D0:  GOTO   89F0
089D4:  MOVLB  2
089D6:  INCF   x00,F
089D8:  BTFSC  FD8.2
089DA:  BRA    89E2
089DC:  MOVLB  0
089DE:  GOTO   89F0
089E2:  INCF   x01,F
089E4:  BTFSS  FD8.2
089E6:  BRA    89EE
089E8:  MOVLB  1
089EA:  BSF    xFB.0
089EC:  MOVLB  2
089EE:  MOVLB  0
089F0:  MOVF   FED,F
089F2:  MOVF   FEF,W
089F4:  MOVLB  2
089F6:  ADDWF  x00,F
089F8:  BTFSC  FD8.0
089FA:  BRA    8A02
089FC:  MOVLB  0
089FE:  GOTO   8A10
08A02:  INCF   x01,F
08A04:  BTFSS  FD8.2
08A06:  BRA    8A0E
08A08:  MOVLB  1
08A0A:  BSF    xFB.0
08A0C:  MOVLB  2
08A0E:  MOVLB  0
08A10:  MOVF   FED,F
08A12:  MOVF   FEF,W
08A14:  BTFSC  FEF.7
08A16:  GOTO   8A1C
08A1A:  XORLW  80
08A1C:  MOVLB  2
08A1E:  ADDWF  x01,F
08A20:  BTFSS  FD8.0
08A22:  BRA    8A2A
08A24:  MOVLB  1
08A26:  BSF    xFB.0
08A28:  MOVLB  2
08A2A:  MOVLB  1
08A2C:  BTFSS  xFD.4
08A2E:  BRA    8A36
08A30:  MOVLB  0
08A32:  GOTO   8606
08A36:  BTFSS  xFD.5
08A38:  BRA    8A40
08A3A:  MOVLB  0
08A3C:  GOTO   870A
08A40:  MOVLB  0
08A42:  GOTO   87E2
08A46:  GOTO   8B54 (RETURN)
08A4A:  MOVLW  8E
08A4C:  MOVWF  00
08A4E:  MOVLB  1
08A50:  MOVF   xF3,W
08A52:  SUBWF  00,F
08A54:  MOVFF  1F4,02
08A58:  MOVFF  1F5,01
08A5C:  BSF    02.7
08A5E:  MOVF   00,F
08A60:  BTFSS  FD8.2
08A62:  BRA    8A6A
08A64:  MOVLB  0
08A66:  GOTO   8A88
08A6A:  MOVLB  0
08A6C:  BCF    FD8.0
08A6E:  MOVF   02,F
08A70:  BTFSS  FD8.2
08A72:  GOTO   8A7E
08A76:  MOVF   01,F
08A78:  BTFSC  FD8.2
08A7A:  GOTO   8A88
08A7E:  RRCF   02,F
08A80:  RRCF   01,F
08A82:  DECFSZ 00,F
08A84:  GOTO   8A6C
08A88:  MOVLB  1
08A8A:  BTFSC  xF4.7
08A8C:  BRA    8A94
08A8E:  MOVLB  0
08A90:  GOTO   8AA0
08A94:  MOVLB  0
08A96:  COMF   01,F
08A98:  COMF   02,F
08A9A:  INCF   01,F
08A9C:  BTFSC  FD8.2
08A9E:  INCF   02,F
08AA0:  GOTO   8BAC (RETURN)
*
08BB6:  MOVFF  FEA,1F1
08BBA:  MOVFF  FE9,1F0
08BBE:  MOVLB  1
08BC0:  SWAPF  xEA,W
08BC2:  IORLW  F0
08BC4:  MOVWF  xEC
08BC6:  ADDWF  xEC,F
08BC8:  ADDLW  E2
08BCA:  MOVWF  xED
08BCC:  ADDLW  32
08BCE:  MOVWF  xEF
08BD0:  MOVF   xEA,W
08BD2:  ANDLW  0F
08BD4:  ADDWF  xED,F
08BD6:  ADDWF  xED,F
08BD8:  ADDWF  xEF,F
08BDA:  ADDLW  E9
08BDC:  MOVWF  xEE
08BDE:  ADDWF  xEE,F
08BE0:  ADDWF  xEE,F
08BE2:  SWAPF  xE9,W
08BE4:  ANDLW  0F
08BE6:  ADDWF  xEE,F
08BE8:  ADDWF  xEF,F
08BEA:  RLCF   xEE,F
08BEC:  RLCF   xEF,F
08BEE:  COMF   xEF,F
08BF0:  RLCF   xEF,F
08BF2:  MOVF   xE9,W
08BF4:  ANDLW  0F
08BF6:  ADDWF  xEF,F
08BF8:  RLCF   xEC,F
08BFA:  MOVLW  07
08BFC:  MOVWF  xEB
08BFE:  MOVLW  0A
08C00:  MOVLB  0
08C02:  MOVLB  1
08C04:  DECF   xEE,F
08C06:  ADDWF  xEF,F
08C08:  BTFSC  FD8.0
08C0A:  BRA    8C12
08C0C:  MOVLB  0
08C0E:  GOTO   8C02
08C12:  MOVLB  0
08C14:  MOVLB  1
08C16:  DECF   xED,F
08C18:  ADDWF  xEE,F
08C1A:  BTFSC  FD8.0
08C1C:  BRA    8C24
08C1E:  MOVLB  0
08C20:  GOTO   8C14
08C24:  MOVLB  0
08C26:  MOVLB  1
08C28:  DECF   xEC,F
08C2A:  ADDWF  xED,F
08C2C:  BTFSC  FD8.0
08C2E:  BRA    8C36
08C30:  MOVLB  0
08C32:  GOTO   8C26
08C36:  MOVLB  0
08C38:  MOVLB  1
08C3A:  DECF   xEB,F
08C3C:  ADDWF  xEC,F
08C3E:  BTFSC  FD8.0
08C40:  BRA    8C48
08C42:  MOVLB  0
08C44:  GOTO   8C38
08C48:  MOVLW  01
08C4A:  MOVWF  FEA
08C4C:  MOVLW  EB
08C4E:  MOVWF  FE9
08C50:  MOVLW  07
08C52:  ANDWF  xF0,W
08C54:  BCF    xF0.6
08C56:  MOVLB  0
08C58:  ADDWF  FE9,F
08C5A:  MOVLW  00
08C5C:  ADDWFC FEA,F
08C5E:  MOVF   FE9,W
08C60:  SUBLW  EF
08C62:  BTFSS  FD8.2
08C64:  GOTO   8C74
08C68:  DECFSZ FEA,W
08C6A:  GOTO   8C74
08C6E:  MOVLB  1
08C70:  BSF    xF0.6
08C72:  MOVLB  0
08C74:  MOVF   FEF,W
08C76:  MOVWF  00
08C78:  BTFSS  FD8.2
08C7A:  GOTO   8CA6
08C7E:  MOVLB  1
08C80:  BTFSS  xF0.6
08C82:  BRA    8C8A
08C84:  MOVLB  0
08C86:  GOTO   8CA6
08C8A:  BTFSS  xF0.4
08C8C:  BRA    8C94
08C8E:  MOVLB  0
08C90:  GOTO   8CC0
08C94:  BTFSS  xF0.3
08C96:  BRA    8C9E
08C98:  MOVLB  0
08C9A:  GOTO   8CA6
08C9E:  MOVLW  20
08CA0:  MOVLB  0
08CA2:  GOTO   8CB0
08CA6:  MOVLB  1
08CA8:  BSF    xF0.3
08CAA:  BCF    xF0.4
08CAC:  MOVLW  30
08CAE:  MOVLB  0
08CB0:  ADDWF  00,F
08CB2:  MOVF   00,W
08CB4:  BTFSS  FA6.6
08CB6:  GOTO   8CB4
08CBA:  MOVLB  E
08CBC:  MOVWF  xF9
08CBE:  MOVLB  0
08CC0:  MOVF   FEE,W
08CC2:  MOVLB  1
08CC4:  BTFSC  xF0.6
08CC6:  BRA    8CCE
08CC8:  MOVLB  0
08CCA:  GOTO   8C5E
08CCE:  MOVLB  0
08CD0:  RETURN 0
*
0E004:  MOVLB  1
0E006:  CLRF   xD1
0E008:  CLRF   xD2
0E00A:  MOVLW  01
0E00C:  MOVWF  xD3
0E00E:  CLRF   FDA
0E010:  CLRF   FD9
0E012:  MOVLW  01
0E014:  MOVWF  xD6
0E016:  MOVLW  C9
0E018:  MOVWF  xD5
0E01A:  MOVLB  0
0E01C:  MOVLW  01
0E01E:  MOVWF  FEA
0E020:  MOVLW  CD
0E022:  MOVWF  FE9
0E024:  MOVFF  1D6,FE2
0E028:  MOVFF  1D5,FE1
0E02C:  MOVFF  1D3,1D4
0E030:  BCF    FD8.0
0E032:  MOVF   FE5,W
0E034:  MULWF  FEE
0E036:  MOVF   FF3,W
0E038:  MOVLB  1
0E03A:  ADDWFC xD1,F
0E03C:  MOVF   FF4,W
0E03E:  ADDWFC xD2,F
0E040:  DECFSZ xD4,F
0E042:  BRA    E048
0E044:  BRA    E04E
0E046:  MOVLB  0
0E048:  MOVLB  0
0E04A:  GOTO   E030
0E04E:  MOVFF  1D1,FDE
0E052:  MOVFF  1D2,1D1
0E056:  CLRF   xD2
0E058:  BTFSC  FD8.0
0E05A:  INCF   xD2,F
0E05C:  INCF   xD5,F
0E05E:  BTFSC  FD8.2
0E060:  INCF   xD6,F
0E062:  INCF   xD3,F
0E064:  MOVF   xD3,W
0E066:  SUBLW  05
0E068:  BTFSC  FD8.2
0E06A:  BRA    E072
0E06C:  MOVLB  0
0E06E:  GOTO   E01C
0E072:  MOVLB  0
0E074:  GOTO   E138 (RETURN)
*
0E270:  MOVLB  2
0E272:  MOVF   x18,W
0E274:  CLRF   01
0E276:  SUBWF  x17,W
0E278:  BTFSS  FD8.0
0E27A:  BRA    E282
0E27C:  MOVLB  0
0E27E:  GOTO   E28C
0E282:  MOVF   x17,W
0E284:  MOVWF  00
0E286:  MOVLB  0
0E288:  GOTO   E2B6
0E28C:  CLRF   00
0E28E:  MOVLW  08
0E290:  MOVLB  2
0E292:  MOVWF  x19
0E294:  MOVLB  0
0E296:  MOVLB  2
0E298:  RLCF   x17,F
0E29A:  RLCF   00,F
0E29C:  MOVF   x18,W
0E29E:  SUBWF  00,W
0E2A0:  BTFSC  FD8.0
0E2A2:  MOVWF  00
0E2A4:  RLCF   01,F
0E2A6:  DECFSZ x19,F
0E2A8:  BRA    E2AE
0E2AA:  BRA    E2B4
0E2AC:  MOVLB  0
0E2AE:  MOVLB  0
0E2B0:  GOTO   E296
0E2B4:  MOVLB  0
0E2B6:  RETURN 0
0E2B8:  MOVF   01,W
0E2BA:  MOVFF  1AF,217
0E2BE:  MOVLW  64
0E2C0:  MOVLB  2
0E2C2:  MOVWF  x18
0E2C4:  MOVLB  0
0E2C6:  CALL   E270
0E2CA:  MOVFF  00,1AF
0E2CE:  MOVF   01,W
0E2D0:  MOVLW  30
0E2D2:  BTFSS  FD8.2
0E2D4:  GOTO   E2F8
0E2D8:  MOVLB  1
0E2DA:  BTFSC  xB0.1
0E2DC:  BRA    E2E4
0E2DE:  MOVLB  0
0E2E0:  GOTO   E312
0E2E4:  BTFSS  xB0.3
0E2E6:  BRA    E2EE
0E2E8:  MOVLB  0
0E2EA:  GOTO   E312
0E2EE:  BTFSC  xB0.4
0E2F0:  MOVLW  20
0E2F2:  MOVLB  0
0E2F4:  GOTO   E302
0E2F8:  MOVLB  1
0E2FA:  BCF    xB0.3
0E2FC:  BCF    xB0.4
0E2FE:  BSF    xB0.0
0E300:  MOVLB  0
0E302:  ADDWF  01,F
0E304:  MOVF   01,W
0E306:  BTFSS  FA6.6
0E308:  GOTO   E306
0E30C:  MOVLB  E
0E30E:  MOVWF  xF9
0E310:  MOVLB  0
0E312:  MOVFF  1AF,217
0E316:  MOVLW  0A
0E318:  MOVLB  2
0E31A:  MOVWF  x18
0E31C:  MOVLB  0
0E31E:  CALL   E270
0E322:  MOVFF  00,1AF
0E326:  MOVF   01,W
0E328:  MOVLW  30
0E32A:  BTFSS  FD8.2
0E32C:  GOTO   E34C
0E330:  MOVLB  1
0E332:  BTFSS  xB0.3
0E334:  BRA    E33C
0E336:  MOVLB  0
0E338:  GOTO   E35C
0E33C:  BTFSC  xB0.0
0E33E:  BRA    E346
0E340:  MOVLB  0
0E342:  GOTO   E35C
0E346:  BTFSC  xB0.4
0E348:  MOVLW  20
0E34A:  MOVLB  0
0E34C:  ADDWF  01,F
0E34E:  MOVF   01,W
0E350:  BTFSS  FA6.6
0E352:  GOTO   E350
0E356:  MOVLB  E
0E358:  MOVWF  xF9
0E35A:  MOVLB  0
0E35C:  MOVLW  30
0E35E:  MOVLB  1
0E360:  ADDWF  xAF,F
0E362:  MOVF   xAF,W
0E364:  MOVLB  0
0E366:  BTFSS  FA6.6
0E368:  GOTO   E366
0E36C:  MOVLB  E
0E36E:  MOVWF  xF9
0E370:  MOVLB  0
0E372:  RETURN 0
*
0EA6E:  MOVF   FE9,W
0EA70:  MOVLB  1
0EA72:  MOVWF  xAF
0EA74:  BTFSC  xAE.7
0EA76:  BRA    EA7E
0EA78:  MOVLB  0
0EA7A:  GOTO   EA9A
0EA7E:  DECF   xAF,F
0EA80:  BSF    xAF.5
0EA82:  COMF   xAB,F
0EA84:  COMF   xAC,F
0EA86:  COMF   xAD,F
0EA88:  COMF   xAE,F
0EA8A:  INCF   xAB,F
0EA8C:  BTFSC  FD8.2
0EA8E:  INCF   xAC,F
0EA90:  BTFSC  FD8.2
0EA92:  INCF   xAD,F
0EA94:  BTFSC  FD8.2
0EA96:  INCF   xAE,F
0EA98:  MOVLB  0
0EA9A:  MOVLW  3B
0EA9C:  MOVLB  1
0EA9E:  MOVWF  xB6
0EAA0:  MOVLW  9A
0EAA2:  MOVWF  xB5
0EAA4:  MOVLW  CA
0EAA6:  MOVWF  xB4
0EAA8:  CLRF   xB3
0EAAA:  MOVLW  0A
0EAAC:  MOVWF  xB1
0EAAE:  MOVLB  0
0EAB0:  BSF    FD8.1
0EAB2:  MOVLW  01
0EAB4:  MOVWF  FEA
0EAB6:  MOVLW  AB
0EAB8:  MOVWF  FE9
0EABA:  MOVFF  1AE,215
0EABE:  MOVFF  1AD,214
0EAC2:  MOVFF  1AC,213
0EAC6:  MOVFF  1AB,212
0EACA:  MOVFF  1B6,219
0EACE:  MOVFF  1B5,218
0EAD2:  MOVFF  1B4,217
0EAD6:  MOVFF  1B3,216
0EADA:  CALL   5F4A
0EADE:  MOVF   01,W
0EAE0:  MOVF   00,F
0EAE2:  BTFSS  FD8.2
0EAE4:  GOTO   EB3C
0EAE8:  MOVLB  1
0EAEA:  MOVF   xB1,W
0EAEC:  XORLW  01
0EAEE:  BTFSS  FD8.2
0EAF0:  BRA    EAF8
0EAF2:  MOVLB  0
0EAF4:  GOTO   EB3C
0EAF8:  MOVF   xAF,W
0EAFA:  BTFSS  FD8.2
0EAFC:  BRA    EB04
0EAFE:  MOVLB  0
0EB00:  GOTO   EB44
0EB04:  ANDLW  0F
0EB06:  SUBWF  xB1,W
0EB08:  BTFSS  FD8.2
0EB0A:  BRA    EB12
0EB0C:  MOVLB  0
0EB0E:  GOTO   EB1E
0EB12:  BTFSS  FD8.0
0EB14:  BRA    EB1C
0EB16:  MOVLB  0
0EB18:  GOTO   EBAC
0EB1C:  MOVLB  0
0EB1E:  MOVLB  1
0EB20:  BTFSS  xAF.7
0EB22:  BRA    EB2A
0EB24:  MOVLB  0
0EB26:  GOTO   EBAC
0EB2A:  BTFSS  xAF.6
0EB2C:  BRA    EB34
0EB2E:  MOVLB  0
0EB30:  GOTO   EB44
0EB34:  MOVLW  20
0EB36:  MOVLB  0
0EB38:  GOTO   EB9C
0EB3C:  MOVLW  20
0EB3E:  MOVLB  1
0EB40:  ANDWF  xAF,F
0EB42:  MOVLB  0
0EB44:  MOVLB  1
0EB46:  BTFSC  xAF.5
0EB48:  BRA    EB50
0EB4A:  MOVLB  0
0EB4C:  GOTO   EB6E
0EB50:  BCF    xAF.5
0EB52:  MOVF   00,W
0EB54:  MOVWF  xAF
0EB56:  MOVLW  2D
0EB58:  MOVLB  0
0EB5A:  BTFSS  FA6.6
0EB5C:  GOTO   EB5A
0EB60:  MOVLB  E
0EB62:  MOVWF  xF9
0EB64:  MOVLB  1
0EB66:  MOVF   xAF,W
0EB68:  MOVWF  00
0EB6A:  CLRF   xAF
0EB6C:  MOVLB  0
0EB6E:  MOVLW  30
0EB70:  MOVLB  1
0EB72:  BTFSC  xAF.5
0EB74:  BRA    EB7C
0EB76:  MOVLB  0
0EB78:  GOTO   EB9C
0EB7C:  BCF    xAF.5
0EB7E:  MOVF   00,W
0EB80:  MOVWF  xAF
0EB82:  MOVLW  2D
0EB84:  MOVLB  0
0EB86:  BTFSS  FA6.6
0EB88:  GOTO   EB86
0EB8C:  MOVLB  E
0EB8E:  MOVWF  xF9
0EB90:  MOVLB  1
0EB92:  MOVF   xAF,W
0EB94:  MOVWF  00
0EB96:  CLRF   xAF
0EB98:  MOVLW  30
0EB9A:  MOVLB  0
0EB9C:  ADDWF  00,F
0EB9E:  MOVF   00,W
0EBA0:  BTFSS  FA6.6
0EBA2:  GOTO   EBA0
0EBA6:  MOVLB  E
0EBA8:  MOVWF  xF9
0EBAA:  MOVLB  0
0EBAC:  BCF    FD8.1
0EBAE:  MOVFF  1B6,215
0EBB2:  MOVFF  1B5,214
0EBB6:  MOVFF  1B4,213
0EBBA:  MOVFF  1B3,212
0EBBE:  MOVLB  2
0EBC0:  CLRF   x19
0EBC2:  CLRF   x18
0EBC4:  CLRF   x17
0EBC6:  MOVLW  0A
0EBC8:  MOVWF  x16
0EBCA:  MOVLB  0
0EBCC:  CALL   5F4A
0EBD0:  MOVFF  03,1B6
0EBD4:  MOVFF  02,1B5
0EBD8:  MOVFF  01,1B4
0EBDC:  MOVFF  00,1B3
0EBE0:  MOVLB  1
0EBE2:  DECFSZ xB1,F
0EBE4:  BRA    EBEA
0EBE6:  BRA    EBF0
0EBE8:  MOVLB  0
0EBEA:  MOVLB  0
0EBEC:  GOTO   EAB0
0EBF0:  MOVLB  0
0EBF2:  RETURN 0
0EBF4:  MOVLW  20
0EBF6:  MOVLB  2
0EBF8:  BTFSS  x12.4
0EBFA:  MOVLW  30
0EBFC:  MOVWF  x13
0EBFE:  MOVFF  211,00
0EC02:  BTFSC  00.7
0EC04:  BRA    EC0C
0EC06:  MOVLB  0
0EC08:  GOTO   EC1E
0EC0C:  COMF   00,F
0EC0E:  INCF   00,F
0EC10:  MOVFF  00,211
0EC14:  MOVLW  2D
0EC16:  MOVWF  x13
0EC18:  BSF    x12.7
0EC1A:  BSF    x12.0
0EC1C:  MOVLB  0
0EC1E:  MOVF   01,W
0EC20:  MOVFF  211,217
0EC24:  MOVLW  64
0EC26:  MOVLB  2
0EC28:  MOVWF  x18
0EC2A:  MOVLB  0
0EC2C:  CALL   E270
0EC30:  MOVFF  00,211
0EC34:  MOVLW  30
0EC36:  ADDWF  01,W
0EC38:  MOVLB  2
0EC3A:  MOVWF  x14
0EC3C:  MOVFF  211,217
0EC40:  MOVLW  0A
0EC42:  MOVWF  x18
0EC44:  MOVLB  0
0EC46:  CALL   E270
0EC4A:  MOVLW  30
0EC4C:  ADDWF  00,W
0EC4E:  MOVLB  2
0EC50:  MOVWF  x16
0EC52:  MOVLW  30
0EC54:  ADDWF  01,W
0EC56:  MOVWF  x15
0EC58:  MOVFF  213,00
0EC5C:  MOVLB  0
0EC5E:  MOVLW  30
0EC60:  MOVLB  2
0EC62:  SUBWF  x14,W
0EC64:  BTFSS  FD8.2
0EC66:  BRA    EC6E
0EC68:  MOVLB  0
0EC6A:  GOTO   EC7A
0EC6E:  BSF    x12.1
0EC70:  BTFSC  x12.7
0EC72:  BSF    x12.2
0EC74:  MOVLB  0
0EC76:  GOTO   ECBA
0EC7A:  MOVFF  213,214
0EC7E:  MOVLW  20
0EC80:  MOVLB  2
0EC82:  MOVWF  x13
0EC84:  MOVLW  30
0EC86:  SUBWF  x15,W
0EC88:  BTFSS  FD8.2
0EC8A:  BRA    EC92
0EC8C:  MOVLB  0
0EC8E:  GOTO   EC9E
0EC92:  BSF    x12.0
0EC94:  BTFSC  x12.7
0EC96:  BSF    x12.1
0EC98:  MOVLB  0
0EC9A:  GOTO   ECBA
0EC9E:  BTFSC  FD8.2
0ECA0:  BRA    ECA8
0ECA2:  MOVLB  2
0ECA4:  BSF    x12.0
0ECA6:  MOVLB  0
0ECA8:  BTFSS  FD8.2
0ECAA:  GOTO   ECBA
0ECAE:  MOVFF  214,215
0ECB2:  MOVLW  20
0ECB4:  MOVLB  2
0ECB6:  MOVWF  x14
0ECB8:  MOVLB  0
0ECBA:  MOVLB  2
0ECBC:  BTFSS  x12.2
0ECBE:  BRA    ECC6
0ECC0:  MOVLB  0
0ECC2:  GOTO   ECE0
0ECC6:  BTFSS  x12.1
0ECC8:  BRA    ECD0
0ECCA:  MOVLB  0
0ECCC:  GOTO   ECF2
0ECD0:  BTFSS  x12.0
0ECD2:  BRA    ECDA
0ECD4:  MOVLB  0
0ECD6:  GOTO   ED04
0ECDA:  MOVLB  0
0ECDC:  GOTO   ED16
0ECE0:  MOVLB  2
0ECE2:  MOVF   x13,W
0ECE4:  MOVLB  0
0ECE6:  BTFSS  FA6.6
0ECE8:  GOTO   ECE6
0ECEC:  MOVLB  E
0ECEE:  MOVWF  xF9
0ECF0:  MOVLB  0
0ECF2:  MOVLB  2
0ECF4:  MOVF   x14,W
0ECF6:  MOVLB  0
0ECF8:  BTFSS  FA6.6
0ECFA:  GOTO   ECF8
0ECFE:  MOVLB  E
0ED00:  MOVWF  xF9
0ED02:  MOVLB  0
0ED04:  MOVLB  2
0ED06:  MOVF   x15,W
0ED08:  MOVLB  0
0ED0A:  BTFSS  FA6.6
0ED0C:  GOTO   ED0A
0ED10:  MOVLB  E
0ED12:  MOVWF  xF9
0ED14:  MOVLB  0
0ED16:  MOVLB  2
0ED18:  MOVF   x16,W
0ED1A:  MOVLB  0
0ED1C:  BTFSS  FA6.6
0ED1E:  GOTO   ED1C
0ED22:  MOVLB  E
0ED24:  MOVWF  xF9
0ED26:  MOVLB  0
0ED28:  GOTO   F60A (RETURN)
*
11618:  ADDWF  FE8,W
1161A:  CLRF   FF7
1161C:  RLCF   FF7,F
1161E:  ADDLW  39
11620:  MOVWF  FF6
11622:  MOVLW  16
11624:  ADDWFC FF7,F
11626:  MOVLW  01
11628:  MOVWF  FF8
1162A:  MOVWF  FFB
1162C:  TBLRD*-
1162E:  MOVF   FF5,W
11630:  MOVWF  FFA
11632:  TBLRD*
11634:  MOVF   FF5,W
11636:  MOVWF  FF9
11638:  DATA C0,15
1163A:  DATA D0,15
1163C:  DATA F0,15
1163E:  DATA 00,16
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
02000:  MOVLW  0B
02002:  MOVWF  FEA
02004:  MOVLW  02
02006:  MOVWF  FE9
02008:  MOVF   FEF,W
0200A:  BTFSC  FD8.2
0200C:  GOTO   202C
02010:  MOVLW  05
02012:  MOVWF  01
02014:  CLRF   00
02016:  DECFSZ 00,F
02018:  BRA    2016
0201A:  DECFSZ 01,F
0201C:  BRA    2014
0201E:  MOVLW  2E
02020:  MOVWF  00
02022:  DECFSZ 00,F
02024:  BRA    2022
02026:  BRA    2028
02028:  DECFSZ FEF,F
0202A:  BRA    2010
0202C:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00218:  BTFSS  FA6.5
0021A:  GOTO   0218
0021E:  MOVLB  F
00220:  MOVF   x2F,W
00222:  MOVWF  1B
00224:  MOVLB  0
00226:  MOVLB  F
00228:  MOVF   x2A,W
0022A:  MOVWF  01
0022C:  BTFSC  1B.1
0022E:  BRA    0236
00230:  MOVLB  0
00232:  GOTO   023A
00236:  BCF    x2F.4
00238:  BSF    x2F.4
0023A:  MOVLB  0
0023C:  GOTO   0276 (RETURN)
*
054F0:  BTFSS  FA6.4
054F2:  GOTO   54F0
054F6:  MOVLB  F
054F8:  MOVWF  x29
054FA:  MOVLB  0
054FC:  GOTO   5532 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
08F30:  BTFSS  FA6.6
08F32:  GOTO   8F30
08F36:  MOVLB  E
08F38:  MOVWF  xF9
08F3A:  MOVLB  0
08F3C:  GOTO   98B8 (RETURN)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
028C0:  MOVLB  B
028C2:  MOVF   x25,W
028C4:  SUBLW  08
028C6:  BTFSS  FD8.2
028C8:  BRA    28D0
028CA:  MOVLB  0
028CC:  GOTO   28E8
028D0:  MOVWF  x27
028D2:  MOVLB  0
028D4:  MOVLB  B
028D6:  RLCF   x24,F
028D8:  DECFSZ x27,F
028DA:  BRA    28E0
028DC:  BRA    28E6
028DE:  MOVLB  0
028E0:  MOVLB  0
028E2:  GOTO   28D4
028E6:  MOVLB  0
028E8:  BSF    F92.1
028EA:  BCF    F92.0
028EC:  BCF    F92.3
028EE:  BCF    F89.3
028F0:  MOVFF  B25,B27
028F4:  MOVLB  B
028F6:  BTFSS  x24.7
028F8:  BCF    F89.0
028FA:  BTFSC  x24.7
028FC:  BSF    F89.0
028FE:  RLCF   x24,F
02900:  BSF    F89.3
02902:  RLCF   01,F
02904:  BTFSS  F80.1
02906:  BCF    01.0
02908:  BTFSC  F80.1
0290A:  BSF    01.0
0290C:  BCF    F89.3
0290E:  DECFSZ x27,F
02910:  BRA    2916
02912:  BRA    291C
02914:  MOVLB  0
02916:  MOVLB  0
02918:  GOTO   28F4
0291C:  MOVLB  0
0291E:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02860:  MOVLB  B
02862:  MOVF   x25,W
02864:  SUBLW  08
02866:  BTFSS  FD8.2
02868:  BRA    2870
0286A:  MOVLB  0
0286C:  GOTO   2888
02870:  MOVWF  x27
02872:  MOVLB  0
02874:  MOVLB  B
02876:  RLCF   x24,F
02878:  DECFSZ x27,F
0287A:  BRA    2880
0287C:  BRA    2886
0287E:  MOVLB  0
02880:  MOVLB  0
02882:  GOTO   2874
02886:  MOVLB  0
02888:  BSF    F96.0
0288A:  BCF    F96.6
0288C:  BCF    F96.1
0288E:  BCF    F8D.1
02890:  MOVFF  B25,B27
02894:  MOVLB  B
02896:  BTFSS  x24.7
02898:  BCF    F8D.6
0289A:  BTFSC  x24.7
0289C:  BSF    F8D.6
0289E:  RLCF   x24,F
028A0:  BSF    F8D.1
028A2:  RLCF   01,F
028A4:  BTFSS  F84.0
028A6:  BCF    01.0
028A8:  BTFSC  F84.0
028AA:  BSF    01.0
028AC:  BCF    F8D.1
028AE:  DECFSZ x27,F
028B0:  BRA    28B6
028B2:  BRA    28BC
028B4:  MOVLB  0
028B6:  MOVLB  0
028B8:  GOTO   2894
028BC:  MOVLB  0
028BE:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
021AE:  MOVLB  9
021B0:  MOVF   xF7,W
021B2:  SUBLW  10
021B4:  BTFSS  FD8.2
021B6:  BRA    21BE
021B8:  MOVLB  0
021BA:  GOTO   21D8
021BE:  MOVWF  xF9
021C0:  MOVLB  0
021C2:  MOVLB  9
021C4:  RLCF   xF5,F
021C6:  RLCF   xF6,F
021C8:  DECFSZ xF9,F
021CA:  BRA    21D0
021CC:  BRA    21D6
021CE:  MOVLB  0
021D0:  MOVLB  0
021D2:  GOTO   21C2
021D6:  MOVLB  0
021D8:  BSF    F93.4
021DA:  BCF    F93.5
021DC:  BCF    F93.2
021DE:  BSF    F8A.2
021E0:  MOVFF  9F7,9F9
021E4:  MOVLB  9
021E6:  BTFSS  xF6.7
021E8:  BCF    F8A.5
021EA:  BTFSC  xF6.7
021EC:  BSF    F8A.5
021EE:  RLCF   xF5,F
021F0:  RLCF   xF6,F
021F2:  BCF    F8A.2
021F4:  RLCF   01,F
021F6:  RLCF   02,F
021F8:  BTFSS  F81.4
021FA:  BCF    01.0
021FC:  BTFSC  F81.4
021FE:  BSF    01.0
02200:  BSF    F8A.2
02202:  DECFSZ xF9,F
02204:  BRA    220A
02206:  BRA    2210
02208:  MOVLB  0
0220A:  MOVLB  0
0220C:  GOTO   21E4
02210:  MOVLB  0
02212:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0256C:  MOVLB  9
0256E:  MOVF   xE2,W
02570:  SUBLW  10
02572:  BTFSS  FD8.2
02574:  BRA    257C
02576:  MOVLB  0
02578:  GOTO   2596
0257C:  MOVWF  xE4
0257E:  MOVLB  0
02580:  MOVLB  9
02582:  RLCF   xE0,F
02584:  RLCF   xE1,F
02586:  DECFSZ xE4,F
02588:  BRA    258E
0258A:  BRA    2594
0258C:  MOVLB  0
0258E:  MOVLB  0
02590:  GOTO   2580
02594:  MOVLB  0
02596:  BCF    F95.4
02598:  BCF    F95.5
0259A:  BSF    F8C.5
0259C:  MOVFF  9E2,9E4
025A0:  MOVLB  9
025A2:  BTFSS  xE1.7
025A4:  BCF    F8C.4
025A6:  BTFSC  xE1.7
025A8:  BSF    F8C.4
025AA:  RLCF   xE0,F
025AC:  RLCF   xE1,F
025AE:  BCF    F8C.5
025B0:  BSF    F8C.5
025B2:  DECFSZ xE4,F
025B4:  BRA    25BA
025B6:  BRA    25C0
025B8:  MOVLB  0
025BA:  MOVLB  0
025BC:  GOTO   25A0
025C0:  MOVLB  0
025C2:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
0014E:  CLRF   FD7
00150:  CLRF   FD6
00152:  NOP   
....................    time_ms += 4;
00154:  MOVLW  04
00156:  MOVLB  1
00158:  ADDWF  x7E,F
0015A:  MOVLW  00
0015C:  ADDWFC x7F,F
0015E:  MOVLW  00
00160:  ADDWFC x80,F
00162:  MOVLW  00
00164:  ADDWFC x81,F
....................    if (time_ms >= 4294967290) {
00166:  MOVF   x81,W
00168:  SUBLW  FE
0016A:  BTFSS  FD8.0
0016C:  BRA    0174
0016E:  MOVLB  0
00170:  GOTO   01D0
00174:  MOVLB  0
00176:  XORLW  FF
00178:  BTFSS  FD8.2
0017A:  GOTO   01C4
0017E:  MOVLB  1
00180:  MOVF   x80,W
00182:  SUBLW  FE
00184:  BTFSS  FD8.0
00186:  BRA    018E
00188:  MOVLB  0
0018A:  GOTO   01D0
0018E:  MOVLB  0
00190:  XORLW  FF
00192:  BTFSS  FD8.2
00194:  GOTO   01C4
00198:  MOVLB  1
0019A:  MOVF   x7F,W
0019C:  SUBLW  FE
0019E:  BTFSS  FD8.0
001A0:  BRA    01A8
001A2:  MOVLB  0
001A4:  GOTO   01D0
001A8:  MOVLB  0
001AA:  XORLW  FF
001AC:  BTFSS  FD8.2
001AE:  GOTO   01C4
001B2:  MOVLB  1
001B4:  MOVF   x7E,W
001B6:  SUBLW  F9
001B8:  BTFSS  FD8.0
001BA:  BRA    01C2
001BC:  MOVLB  0
001BE:  GOTO   01D0
001C2:  MOVLB  0
....................       time_ms = 0;
001C4:  MOVLB  1
001C6:  CLRF   x81
001C8:  CLRF   x80
001CA:  CLRF   x7F
001CC:  CLRF   x7E
001CE:  MOVLB  0
....................    }
.................... }
.................... 
001D0:  BCF    FF2.2
001D2:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
001D6:  MOVLW  80
001D8:  MOVWF  FCF
001DA:  CLRF   FCE
001DC:  NOP   
....................    time_sec++;
001DE:  MOVLW  01
001E0:  MOVLB  1
001E2:  ADDWF  x82,F
001E4:  BTFSC  FD8.0
001E6:  INCF   x83,F
001E8:  BTFSC  FD8.2
001EA:  INCF   x84,F
001EC:  BTFSC  FD8.2
001EE:  INCF   x85,F
001F0:  MOVLB  0
001F2:  BCF    F9E.0
001F4:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
020EC:  MOVLW  F8
020EE:  MOVWF  FF6
020F0:  MOVLW  01
020F2:  MOVWF  FF7
020F4:  MOVLW  00
020F6:  MOVWF  FF8
020F8:  CALL   202E
....................    clear_interrupt(INT_TIMER1);
020FC:  BCF    F9E.0
....................    time_ms = 0;
020FE:  MOVLB  1
02100:  CLRF   x81
02102:  CLRF   x80
02104:  CLRF   x7F
02106:  CLRF   x7E
....................    time_sec = 0;
02108:  CLRF   x85
0210A:  CLRF   x84
0210C:  CLRF   x83
0210E:  CLRF   x82
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
02110:  MOVLW  8F
02112:  MOVWF  FCD
02114:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
02116:  MOVLW  D7
02118:  MOVWF  FD5
....................    set_timer1(0); 
0211A:  CLRF   FCF
0211C:  CLRF   FCE
0211E:  NOP   
....................    enable_interrupts(INT_TIMER1);   
02120:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
02122:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
02124:  MOVLW  C0
02126:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02128:  MOVLW  0C
0212A:  MOVWF  FF6
0212C:  MOVLW  02
0212E:  MOVWF  FF7
02130:  MOVLW  00
02132:  MOVWF  FF8
02134:  MOVLB  0
02136:  CALL   202E
0213A:  GOTO   11A28 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FF9A:  MOVFF  1A9,185
0FF9E:  MOVFF  1A8,184
0FFA2:  MOVFF  1A7,183
0FFA6:  MOVFF  1A6,182
0FFAA:  GOTO   11398 (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
0396A:  MOVFF  182,00
0396E:  MOVFF  183,01
03972:  MOVFF  184,02
03976:  MOVFF  185,03
0397A:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
09890:  MOVLB  1
09892:  MOVF   x7E,W
09894:  MOVWF  01
09896:  MOVF   x7F,W
09898:  MOVWF  02
0989A:  MOVLB  0
0989C:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00240:  GOTO   0244
00244:  GOTO   024E
00248:  BTFSS  4B.0
0024A:  GOTO   0282
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0024E:  MOVF   4A,W
00250:  SUBLW  1F
00252:  BTFSS  FD8.0
00254:  GOTO   0282
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00258:  MOVF   4A,W
0025A:  INCF   4A,F
0025C:  ANDLW  1F
0025E:  CLRF   03
00260:  ADDLW  2A
00262:  MOVWF  FE9
00264:  MOVLW  00
00266:  ADDWFC 03,W
00268:  MOVWF  FEA
0026A:  MOVFF  FEA,B2D
0026E:  MOVFF  FE9,B2C
00272:  GOTO   0218
00276:  MOVFF  B2D,FEA
0027A:  MOVFF  B2C,FE9
0027E:  MOVF   01,W
00280:  MOVWF  FEF
00282:  BCF    FA6.5
00284:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
020C2:  MOVLW  88
020C4:  MOVWF  FF6
020C6:  MOVLW  02
020C8:  MOVWF  FF7
020CA:  MOVLW  00
020CC:  MOVWF  FF8
020CE:  CALL   202E
....................    enable_interrupts(INT_RDA3);
020D2:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
020D4:  MOVLW  C0
020D6:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
020D8:  MOVLW  9A
020DA:  MOVWF  FF6
020DC:  MOVLW  02
020DE:  MOVWF  FF7
020E0:  MOVLW  00
020E2:  MOVWF  FF8
020E4:  CALL   202E
020E8:  GOTO   11A24 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
054B4:  MOVFF  1E2,03
054B8:  MOVLB  1
054BA:  MOVF   xE1,W
054BC:  MOVWF  FE9
054BE:  MOVFF  03,FEA
054C2:  MOVFF  FEF,1E3
054C6:  MOVFF  1E0,FEA
054CA:  MOVFF  1DF,FE9
054CE:  CLRF   00
054D0:  CLRF   02
054D2:  MOVFF  1E3,01
054D6:  MOVLB  0
054D8:  CALL   209E
....................    *receive_signal_size = 0;
054DC:  MOVFF  1E2,03
054E0:  MOVLB  1
054E2:  MOVF   xE1,W
054E4:  MOVWF  FE9
054E6:  MOVFF  03,FEA
054EA:  CLRF   FEF
054EC:  MOVLB  0
054EE:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
04F76:  MOVLB  1
04F78:  MOVF   x99,F
04F7A:  BTFSS  FD8.2
04F7C:  BRA    4F84
04F7E:  MOVLB  0
04F80:  GOTO   4F90
04F84:  MOVLB  0
....................         output_low(EN_NPWR1);
04F86:  MOVLW  17
04F88:  MOVWF  F94
04F8A:  BCF    F8B.7
....................     } else {
04F8C:  GOTO   4F96
....................         output_high(EN_NPWR1);
04F90:  MOVLW  17
04F92:  MOVWF  F94
04F94:  BSF    F8B.7
....................     }
04F96:  GOTO   11A82 (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04F66:  MOVLW  17
04F68:  MOVWF  F94
04F6A:  BSF    F8B.3
04F6C:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
08FC2:  MOVLW  17
08FC4:  MOVWF  F94
08FC6:  BCF    F8B.3
08FC8:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04F6E:  MOVLW  17
04F70:  MOVWF  F94
04F72:  BSF    F8B.5
04F74:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
08FCA:  MOVLW  17
08FCC:  MOVWF  F94
08FCE:  BCF    F8B.5
08FD0:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
02310:  MOVLW  A6
02312:  MOVWF  FF6
02314:  MOVLW  02
02316:  MOVWF  FF7
02318:  MOVLW  00
0231A:  MOVWF  FF8
0231C:  CALL   202E
....................     output_high(ADC_CS); 
02320:  MOVLW  FD
02322:  MOVWF  F93
02324:  BSF    F8A.1
....................     delay_ms(10); 
02326:  MOVLW  0A
02328:  MOVLB  B
0232A:  MOVWF  x02
0232C:  MOVLB  0
0232E:  CALL   2000
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS1_CURR);
02332:  MOVLW  01
02334:  MOVLB  9
02336:  MOVWF  xEE
02338:  MOVLB  0
0233A:  CALL   2214
0233E:  MOVFF  02,19A
02342:  MOVFF  01,199
....................     delay_ms(1);
02346:  MOVLW  01
02348:  MOVLB  B
0234A:  MOVWF  x02
0234C:  MOVLB  0
0234E:  CALL   2000
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02352:  MOVLW  09
02354:  BTFSS  FA6.6
02356:  GOTO   2354
0235A:  MOVLB  E
0235C:  MOVWF  xF9
0235E:  MOVFF  19A,9E8
02362:  MOVLW  37
02364:  MOVLB  9
02366:  MOVWF  xE9
02368:  MOVLB  0
0236A:  CALL   2294
0236E:  MOVFF  199,9E8
02372:  MOVLW  37
02374:  MOVLB  9
02376:  MOVWF  xE9
02378:  MOVLB  0
0237A:  CALL   2294
0237E:  MOVLW  0D
02380:  BTFSS  FA6.6
02382:  GOTO   2380
02386:  MOVLB  E
02388:  MOVWF  xF9
0238A:  MOVLW  0A
0238C:  MOVLB  0
0238E:  BTFSS  FA6.6
02390:  GOTO   238E
02394:  MOVLB  E
02396:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02398:  MOVLB  1
0239A:  INCFSZ x99,W
0239C:  BRA    23A2
0239E:  BRA    23A8
023A0:  MOVLB  0
023A2:  MOVLB  0
023A4:  GOTO   23C0
023A8:  MOVLB  0
023AA:  MOVLB  1
023AC:  INCFSZ x9A,W
023AE:  BRA    23B4
023B0:  BRA    23BA
023B2:  MOVLB  0
023B4:  MOVLB  0
023B6:  GOTO   23C0
023BA:  MOVLB  0
023BC:  GOTO   23E0
023C0:  MOVLB  1
023C2:  MOVF   x99,F
023C4:  BTFSC  FD8.2
023C6:  BRA    23CE
023C8:  MOVLB  0
023CA:  GOTO   23F4
023CE:  MOVLB  0
023D0:  MOVLB  1
023D2:  MOVF   x9A,F
023D4:  BTFSC  FD8.2
023D6:  BRA    23DE
023D8:  MOVLB  0
023DA:  GOTO   23F4
023DE:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
023E0:  MOVLW  BA
023E2:  MOVWF  FF6
023E4:  MOVLW  02
023E6:  MOVWF  FF7
023E8:  MOVLW  00
023EA:  MOVWF  FF8
023EC:  CALL   202E
....................     } else {
023F0:  GOTO   2404
....................         fprintf(PC, "\tConnect successful\r\n");
023F4:  MOVLW  CC
023F6:  MOVWF  FF6
023F8:  MOVLW  02
023FA:  MOVWF  FF7
023FC:  MOVLW  00
023FE:  MOVWF  FF8
02400:  CALL   202E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02404:  MOVLW  E2
02406:  MOVWF  FF6
02408:  MOVLW  02
0240A:  MOVWF  FF7
0240C:  MOVLW  00
0240E:  MOVWF  FF8
02410:  CALL   202E
02414:  GOTO   11A2C (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
02214:  MOVFF  9EE,9F5
02218:  GOTO   213E
0221C:  MOVFF  02,9F0
02220:  MOVFF  01,9EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
02224:  MOVLW  FD
02226:  MOVWF  F93
02228:  BCF    F8A.1
....................     delay_us(1); 
0222A:  BRA    222C
0222C:  BRA    222E
....................     spi_xfer(ADC_STREAM, cmd); 
0222E:  MOVFF  9F0,9F6
02232:  MOVFF  9EF,9F5
02236:  MOVLW  10
02238:  MOVLB  9
0223A:  MOVWF  xF7
0223C:  MOVLW  01
0223E:  MOVWF  xF8
02240:  MOVLB  0
02242:  CALL   21AE
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
02246:  MOVLW  FD
02248:  MOVWF  F93
0224A:  BSF    F8A.1
....................     delay_us(1);
0224C:  BRA    224E
0224E:  BRA    2250
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
02250:  MOVLW  FD
02252:  MOVWF  F93
02254:  BCF    F8A.1
....................     delay_us(1);
02256:  BRA    2258
02258:  BRA    225A
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
0225A:  MOVLB  9
0225C:  CLRF   xF6
0225E:  CLRF   xF5
02260:  MOVLW  10
02262:  MOVWF  xF7
02264:  MOVLW  01
02266:  MOVWF  xF8
02268:  MOVLB  0
0226A:  CALL   21AE
0226E:  MOVFF  02,9F2
02272:  MOVFF  01,9F1
....................     output_high(ADC_CS); 
02276:  MOVLW  FD
02278:  MOVWF  F93
0227A:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0227C:  MOVLB  9
0227E:  MOVF   xF1,W
02280:  MOVWF  xF3
02282:  MOVF   xF2,W
02284:  ANDLW  0F
02286:  MOVWF  xF4
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02288:  MOVF   xF3,W
0228A:  MOVWF  01
0228C:  MOVF   xF4,W
0228E:  MOVWF  02
02290:  MOVLB  0
02292:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
02640:  MOVLW  EE
02642:  MOVWF  FF6
02644:  MOVLW  02
02646:  MOVWF  FF7
02648:  MOVLW  00
0264A:  MOVWF  FF8
0264C:  CALL   202E
....................     output_high(DAC1_CS); 
02650:  MOVLW  3F
02652:  MOVWF  F95
02654:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02656:  MOVLW  3F
02658:  MOVWF  F95
0265A:  BSF    F8C.6
....................     delay_ms(10); 
0265C:  MOVLW  0A
0265E:  MOVLB  B
02660:  MOVWF  x02
02662:  MOVLB  0
02664:  CALL   2000
....................     mcp4901_1_write(10); 
02668:  MOVLB  9
0266A:  CLRF   xDD
0266C:  MOVLW  0A
0266E:  MOVWF  xDC
02670:  MOVLB  0
02672:  CALL   25C4
....................     mcp4901_2_write(10); 
02676:  MOVLB  9
02678:  CLRF   xDD
0267A:  MOVLW  0A
0267C:  MOVWF  xDC
0267E:  MOVLB  0
02680:  CALL   2602
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_CURR); 
02684:  MOVLW  01
02686:  MOVLB  9
02688:  MOVWF  xEE
0268A:  MOVLB  0
0268C:  CALL   2214
02690:  MOVFF  02,19A
02694:  MOVFF  01,199
....................     fprintf(PC, "%04LX\r\n", readdata);
02698:  MOVFF  19A,9E8
0269C:  MOVLW  37
0269E:  MOVLB  9
026A0:  MOVWF  xE9
026A2:  MOVLB  0
026A4:  CALL   2294
026A8:  MOVFF  199,9E8
026AC:  MOVLW  37
026AE:  MOVLB  9
026B0:  MOVWF  xE9
026B2:  MOVLB  0
026B4:  CALL   2294
026B8:  MOVLW  0D
026BA:  BTFSS  FA6.6
026BC:  GOTO   26BA
026C0:  MOVLB  E
026C2:  MOVWF  xF9
026C4:  MOVLW  0A
026C6:  MOVLB  0
026C8:  BTFSS  FA6.6
026CA:  GOTO   26C8
026CE:  MOVLB  E
026D0:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
026D2:  MOVLB  1
026D4:  INCFSZ x99,W
026D6:  BRA    26DC
026D8:  BRA    26E2
026DA:  MOVLB  0
026DC:  MOVLB  0
026DE:  GOTO   26FA
026E2:  MOVLB  0
026E4:  MOVLB  1
026E6:  INCFSZ x9A,W
026E8:  BRA    26EE
026EA:  BRA    26F4
026EC:  MOVLB  0
026EE:  MOVLB  0
026F0:  GOTO   26FA
026F4:  MOVLB  0
026F6:  GOTO   271A
026FA:  MOVLB  1
026FC:  MOVF   x99,F
026FE:  BTFSC  FD8.2
02700:  BRA    2708
02702:  MOVLB  0
02704:  GOTO   272E
02708:  MOVLB  0
0270A:  MOVLB  1
0270C:  MOVF   x9A,F
0270E:  BTFSC  FD8.2
02710:  BRA    2718
02712:  MOVLB  0
02714:  GOTO   272E
02718:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
0271A:  MOVLW  04
0271C:  MOVWF  FF6
0271E:  MOVLW  03
02720:  MOVWF  FF7
02722:  MOVLW  00
02724:  MOVWF  FF8
02726:  CALL   202E
....................     } else {
0272A:  GOTO   273E
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
0272E:  MOVLW  24
02730:  MOVWF  FF6
02732:  MOVLW  03
02734:  MOVWF  FF7
02736:  MOVLW  00
02738:  MOVWF  FF8
0273A:  CALL   202E
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
0273E:  MOVFF  19A,9E8
02742:  MOVLW  37
02744:  MOVLB  9
02746:  MOVWF  xE9
02748:  MOVLB  0
0274A:  CALL   2294
0274E:  MOVFF  199,9E8
02752:  MOVLW  37
02754:  MOVLB  9
02756:  MOVWF  xE9
02758:  MOVLB  0
0275A:  CALL   2294
0275E:  MOVLW  0D
02760:  BTFSS  FA6.6
02762:  GOTO   2760
02766:  MOVLB  E
02768:  MOVWF  xF9
0276A:  MOVLW  0A
0276C:  MOVLB  0
0276E:  BTFSS  FA6.6
02770:  GOTO   276E
02774:  MOVLB  E
02776:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_CURR); 
02778:  MOVLW  05
0277A:  MOVLB  9
0277C:  MOVWF  xEE
0277E:  MOVLB  0
02780:  CALL   2214
02784:  MOVFF  02,19A
02788:  MOVFF  01,199
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0278C:  MOVLB  1
0278E:  INCFSZ x99,W
02790:  BRA    2796
02792:  BRA    279C
02794:  MOVLB  0
02796:  MOVLB  0
02798:  GOTO   27B4
0279C:  MOVLB  0
0279E:  MOVLB  1
027A0:  INCFSZ x9A,W
027A2:  BRA    27A8
027A4:  BRA    27AE
027A6:  MOVLB  0
027A8:  MOVLB  0
027AA:  GOTO   27B4
027AE:  MOVLB  0
027B0:  GOTO   27D4
027B4:  MOVLB  1
027B6:  MOVF   x99,F
027B8:  BTFSC  FD8.2
027BA:  BRA    27C2
027BC:  MOVLB  0
027BE:  GOTO   27E8
027C2:  MOVLB  0
027C4:  MOVLB  1
027C6:  MOVF   x9A,F
027C8:  BTFSC  FD8.2
027CA:  BRA    27D2
027CC:  MOVLB  0
027CE:  GOTO   27E8
027D2:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
027D4:  MOVLW  48
027D6:  MOVWF  FF6
027D8:  MOVLW  03
027DA:  MOVWF  FF7
027DC:  MOVLW  00
027DE:  MOVWF  FF8
027E0:  CALL   202E
....................     } else {
027E4:  GOTO   27F8
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
027E8:  MOVLW  68
027EA:  MOVWF  FF6
027EC:  MOVLW  03
027EE:  MOVWF  FF7
027F0:  MOVLW  00
027F2:  MOVWF  FF8
027F4:  CALL   202E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
027F8:  MOVLW  8C
027FA:  MOVWF  FF6
027FC:  MOVLW  03
027FE:  MOVWF  FF7
02800:  MOVLW  00
02802:  MOVWF  FF8
02804:  CALL   202E
02808:  GOTO   11A30 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
025C4:  MOVFF  9DD,9E1
025C8:  MOVFF  9DC,9E0
025CC:  CALL   2418
025D0:  MOVFF  02,9DF
025D4:  MOVFF  01,9DE
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
025D8:  MOVLW  3F
025DA:  MOVWF  F95
025DC:  BCF    F8C.7
....................     delay_us(1); 
025DE:  BRA    25E0
025E0:  BRA    25E2
....................     spi_xfer(DAC_STREAM, cmd); 
025E2:  MOVFF  9DF,9E1
025E6:  MOVFF  9DE,9E0
025EA:  MOVLW  10
025EC:  MOVLB  9
025EE:  MOVWF  xE2
025F0:  MOVLW  01
025F2:  MOVWF  xE3
025F4:  MOVLB  0
025F6:  CALL   256C
....................     output_high(DAC1_CS); 
025FA:  MOVLW  3F
025FC:  MOVWF  F95
025FE:  BSF    F8C.7
02600:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
02602:  MOVFF  9DD,9E1
02606:  MOVFF  9DC,9E0
0260A:  CALL   2418
0260E:  MOVFF  02,9DF
02612:  MOVFF  01,9DE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
02616:  MOVLW  3F
02618:  MOVWF  F95
0261A:  BCF    F8C.6
....................    delay_us(1); 
0261C:  BRA    261E
0261E:  BRA    2620
....................    spi_xfer(DAC_STREAM, cmd); 
02620:  MOVFF  9DF,9E1
02624:  MOVFF  9DE,9E0
02628:  MOVLW  10
0262A:  MOVLB  9
0262C:  MOVWF  xE2
0262E:  MOVLW  01
02630:  MOVWF  xE3
02632:  MOVLB  0
02634:  CALL   256C
....................    output_high(DAC2_CS); 
02638:  MOVLW  3F
0263A:  MOVWF  F95
0263C:  BSF    F8C.6
0263E:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
0213E:  MOVLB  9
02140:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
02142:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
02144:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
02146:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
02148:  BSF    xF6.4
....................     cmd.fields.range = 0; // Normal mode
0214A:  BCF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
0214C:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
0214E:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
02150:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
02152:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02154:  MOVF   xF5,W
02156:  ANDLW  01
02158:  MOVWF  01
0215A:  BCF    xF7.2
0215C:  BTFSC  01.0
0215E:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
02160:  BCF    FD8.0
02162:  RRCF   xF5,W
02164:  ANDLW  01
02166:  MOVWF  01
02168:  BCF    xF7.3
0216A:  BTFSC  01.0
0216C:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0216E:  RRCF   xF5,W
02170:  MOVWF  00
02172:  RRCF   00,F
02174:  MOVLW  3F
02176:  ANDWF  00,F
02178:  MOVF   00,W
0217A:  ANDLW  01
0217C:  MOVWF  01
0217E:  BCF    xF7.4
02180:  BTFSC  01.0
02182:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02184:  RRCF   xF5,W
02186:  MOVWF  00
02188:  RRCF   00,F
0218A:  RRCF   00,F
0218C:  MOVLW  1F
0218E:  ANDWF  00,F
02190:  MOVF   00,W
02192:  ANDLW  01
02194:  MOVWF  01
02196:  BCF    xF7.5
02198:  BTFSC  01.0
0219A:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
0219C:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
0219E:  BSF    xF7.7
....................     return cmd.value;
021A0:  MOVF   xF6,W
021A2:  MOVWF  01
021A4:  MOVF   xF7,W
021A6:  MOVWF  02
021A8:  MOVLB  0
021AA:  GOTO   221C (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
02418:  MOVLB  9
0241A:  BCF    xE3.7
....................    cmd.fields.buffer = 1; // Buffer used
0241C:  BSF    xE3.6
....................    cmd.fields.gain = 1; // Gain 1x
0241E:  BSF    xE3.5
....................    cmd.fields.shutdown = 1; // Normal operation
02420:  BSF    xE3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
02422:  RRCF   xE1,W
02424:  MOVWF  xE5
02426:  RRCF   xE0,W
02428:  MOVWF  xE4
0242A:  RRCF   xE5,F
0242C:  RRCF   xE4,F
0242E:  RRCF   xE5,F
02430:  RRCF   xE4,F
02432:  RRCF   xE5,F
02434:  RRCF   xE4,F
02436:  RRCF   xE5,F
02438:  RRCF   xE4,F
0243A:  RRCF   xE5,F
0243C:  RRCF   xE4,F
0243E:  RRCF   xE5,F
02440:  RRCF   xE4,F
02442:  MOVLW  01
02444:  ANDWF  xE5,F
02446:  MOVF   xE4,W
02448:  ANDLW  01
0244A:  MOVWF  00
0244C:  CLRF   03
0244E:  MOVF   00,W
02450:  MOVWF  01
02452:  BCF    xE3.3
02454:  BTFSC  01.0
02456:  BSF    xE3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02458:  RRCF   xE1,W
0245A:  MOVWF  xE5
0245C:  RRCF   xE0,W
0245E:  MOVWF  xE4
02460:  RRCF   xE5,F
02462:  RRCF   xE4,F
02464:  RRCF   xE5,F
02466:  RRCF   xE4,F
02468:  RRCF   xE5,F
0246A:  RRCF   xE4,F
0246C:  RRCF   xE5,F
0246E:  RRCF   xE4,F
02470:  RRCF   xE5,F
02472:  RRCF   xE4,F
02474:  MOVLW  03
02476:  ANDWF  xE5,F
02478:  MOVF   xE4,W
0247A:  ANDLW  01
0247C:  MOVWF  00
0247E:  CLRF   03
02480:  MOVF   00,W
02482:  MOVWF  01
02484:  BCF    xE3.2
02486:  BTFSC  01.0
02488:  BSF    xE3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0248A:  RRCF   xE1,W
0248C:  MOVWF  xE5
0248E:  RRCF   xE0,W
02490:  MOVWF  xE4
02492:  RRCF   xE5,F
02494:  RRCF   xE4,F
02496:  RRCF   xE5,F
02498:  RRCF   xE4,F
0249A:  RRCF   xE5,F
0249C:  RRCF   xE4,F
0249E:  RRCF   xE5,F
024A0:  RRCF   xE4,F
024A2:  MOVLW  07
024A4:  ANDWF  xE5,F
024A6:  MOVF   xE4,W
024A8:  ANDLW  01
024AA:  MOVWF  00
024AC:  CLRF   03
024AE:  MOVF   00,W
024B0:  MOVWF  01
024B2:  BCF    xE3.1
024B4:  BTFSC  01.0
024B6:  BSF    xE3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
024B8:  RRCF   xE1,W
024BA:  MOVWF  xE5
024BC:  RRCF   xE0,W
024BE:  MOVWF  xE4
024C0:  RRCF   xE5,F
024C2:  RRCF   xE4,F
024C4:  RRCF   xE5,F
024C6:  RRCF   xE4,F
024C8:  RRCF   xE5,F
024CA:  RRCF   xE4,F
024CC:  MOVLW  0F
024CE:  ANDWF  xE5,F
024D0:  MOVF   xE4,W
024D2:  ANDLW  01
024D4:  MOVWF  00
024D6:  CLRF   03
024D8:  MOVF   00,W
024DA:  MOVWF  01
024DC:  BCF    xE3.0
024DE:  BTFSC  01.0
024E0:  BSF    xE3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
024E2:  RRCF   xE1,W
024E4:  MOVWF  xE5
024E6:  RRCF   xE0,W
024E8:  MOVWF  xE4
024EA:  RRCF   xE5,F
024EC:  RRCF   xE4,F
024EE:  RRCF   xE5,F
024F0:  RRCF   xE4,F
024F2:  MOVLW  1F
024F4:  ANDWF  xE5,F
024F6:  MOVF   xE4,W
024F8:  ANDLW  01
024FA:  MOVWF  00
024FC:  CLRF   03
024FE:  MOVF   00,W
02500:  MOVWF  01
02502:  BCF    xE2.7
02504:  BTFSC  01.0
02506:  BSF    xE2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
02508:  RRCF   xE1,W
0250A:  MOVWF  xE5
0250C:  RRCF   xE0,W
0250E:  MOVWF  xE4
02510:  RRCF   xE5,F
02512:  RRCF   xE4,F
02514:  MOVLW  3F
02516:  ANDWF  xE5,F
02518:  MOVF   xE4,W
0251A:  ANDLW  01
0251C:  MOVWF  00
0251E:  CLRF   03
02520:  MOVF   00,W
02522:  MOVWF  01
02524:  BCF    xE2.6
02526:  BTFSC  01.0
02528:  BSF    xE2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
0252A:  BCF    FD8.0
0252C:  RRCF   xE1,W
0252E:  MOVWF  xE5
02530:  RRCF   xE0,W
02532:  MOVWF  xE4
02534:  MOVF   xE4,W
02536:  ANDLW  01
02538:  MOVWF  00
0253A:  CLRF   03
0253C:  MOVF   00,W
0253E:  MOVWF  01
02540:  BCF    xE2.5
02542:  BTFSC  01.0
02544:  BSF    xE2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
02546:  MOVF   xE0,W
02548:  ANDLW  01
0254A:  MOVWF  00
0254C:  CLRF   03
0254E:  MOVF   00,W
02550:  MOVWF  01
02552:  BCF    xE2.4
02554:  BTFSC  01.0
02556:  BSF    xE2.4
....................    cmd.fields.reserved = 0; // Reserved bits
02558:  BCF    xE2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
0255A:  BCF    xE2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0255C:  BCF    xE2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0255E:  BCF    xE2.0
.................... 
....................    return cmd.value;
02560:  MOVF   xE2,W
02562:  MOVWF  01
02564:  MOVF   xE3,W
02566:  MOVWF  02
02568:  MOVLB  0
0256A:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0397C:  MOVLB  B
0397E:  MOVF   x02,W
03980:  XORLW  00
03982:  MOVLB  0
03984:  BTFSC  FD8.2
03986:  GOTO   3996
0398A:  XORLW  01
0398C:  BTFSC  FD8.2
0398E:  GOTO   39FE
03992:  GOTO   3A66
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03996:  MOVLB  B
03998:  CLRF   x0B
0399A:  CLRF   x0A
0399C:  MOVLB  0
0399E:  MOVLB  B
039A0:  MOVF   x0B,W
039A2:  SUBWF  x09,W
039A4:  BTFSC  FD8.0
039A6:  BRA    39AE
039A8:  MOVLB  0
039AA:  GOTO   39FA
039AE:  MOVLB  0
039B0:  BTFSS  FD8.2
039B2:  GOTO   39C8
039B6:  MOVLB  B
039B8:  MOVF   x08,W
039BA:  SUBWF  x0A,W
039BC:  BTFSS  FD8.0
039BE:  BRA    39C6
039C0:  MOVLB  0
039C2:  GOTO   39FA
039C6:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
039C8:  MOVLB  B
039CA:  MOVF   x06,W
039CC:  ADDWF  x0A,W
039CE:  MOVWF  FE9
039D0:  MOVF   x07,W
039D2:  ADDWFC x0B,W
039D4:  MOVWF  FEA
039D6:  MOVFF  FEF,B0E
039DA:  MOVFF  B0E,B24
039DE:  MOVLW  08
039E0:  MOVWF  x25
039E2:  MOVLW  01
039E4:  MOVWF  x26
039E6:  MOVLB  0
039E8:  CALL   2860
039EC:  MOVLB  B
039EE:  INCF   x0A,F
039F0:  BTFSC  FD8.2
039F2:  INCF   x0B,F
039F4:  MOVLB  0
039F6:  GOTO   399E
....................          break;
039FA:  GOTO   3A6A
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
039FE:  MOVLB  B
03A00:  CLRF   x0D
03A02:  CLRF   x0C
03A04:  MOVLB  0
03A06:  MOVLB  B
03A08:  MOVF   x0D,W
03A0A:  SUBWF  x09,W
03A0C:  BTFSC  FD8.0
03A0E:  BRA    3A16
03A10:  MOVLB  0
03A12:  GOTO   3A62
03A16:  MOVLB  0
03A18:  BTFSS  FD8.2
03A1A:  GOTO   3A30
03A1E:  MOVLB  B
03A20:  MOVF   x08,W
03A22:  SUBWF  x0C,W
03A24:  BTFSS  FD8.0
03A26:  BRA    3A2E
03A28:  MOVLB  0
03A2A:  GOTO   3A62
03A2E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03A30:  MOVLB  B
03A32:  MOVF   x06,W
03A34:  ADDWF  x0C,W
03A36:  MOVWF  FE9
03A38:  MOVF   x07,W
03A3A:  ADDWFC x0D,W
03A3C:  MOVWF  FEA
03A3E:  MOVFF  FEF,B0E
03A42:  MOVFF  B0E,B24
03A46:  MOVLW  08
03A48:  MOVWF  x25
03A4A:  MOVLW  01
03A4C:  MOVWF  x26
03A4E:  MOVLB  0
03A50:  CALL   28C0
03A54:  MOVLB  B
03A56:  INCF   x0C,F
03A58:  BTFSC  FD8.2
03A5A:  INCF   x0D,F
03A5C:  MOVLB  0
03A5E:  GOTO   3A06
....................          break;
03A62:  GOTO   3A6A
....................          
....................       default:
....................          break;
03A66:  GOTO   3A6A
....................    }
....................    return;
03A6A:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02920:  MOVLB  B
02922:  MOVF   x08,W
02924:  XORLW  00
02926:  MOVLB  0
02928:  BTFSC  FD8.2
0292A:  GOTO   293A
0292E:  XORLW  01
02930:  BTFSC  FD8.2
02932:  GOTO   2A44
02936:  GOTO   2B4E
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0293A:  MOVLB  B
0293C:  CLRF   x17
0293E:  CLRF   x16
02940:  MOVLB  0
02942:  MOVLB  B
02944:  MOVF   x17,W
02946:  SUBWF  x0F,W
02948:  BTFSC  FD8.0
0294A:  BRA    2952
0294C:  MOVLB  0
0294E:  GOTO   299E
02952:  MOVLB  0
02954:  BTFSS  FD8.2
02956:  GOTO   296C
0295A:  MOVLB  B
0295C:  MOVF   x0E,W
0295E:  SUBWF  x16,W
02960:  BTFSS  FD8.0
02962:  BRA    296A
02964:  MOVLB  0
02966:  GOTO   299E
0296A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0296C:  MOVLB  B
0296E:  MOVF   x0C,W
02970:  ADDWF  x16,W
02972:  MOVWF  FE9
02974:  MOVF   x0D,W
02976:  ADDWFC x17,W
02978:  MOVWF  FEA
0297A:  MOVFF  FEF,B22
0297E:  MOVFF  B22,B24
02982:  MOVLW  08
02984:  MOVWF  x25
02986:  MOVLW  01
02988:  MOVWF  x26
0298A:  MOVLB  0
0298C:  CALL   2860
02990:  MOVLB  B
02992:  INCF   x16,F
02994:  BTFSC  FD8.2
02996:  INCF   x17,F
02998:  MOVLB  0
0299A:  GOTO   2942
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0299E:  MOVLB  B
029A0:  CLRF   x1B
029A2:  CLRF   x1A
029A4:  CLRF   x19
029A6:  CLRF   x18
029A8:  MOVLB  0
029AA:  MOVLB  B
029AC:  MOVF   x1B,W
029AE:  SUBWF  x15,W
029B0:  BTFSC  FD8.0
029B2:  BRA    29BA
029B4:  MOVLB  0
029B6:  GOTO   2A40
029BA:  MOVLB  0
029BC:  BTFSS  FD8.2
029BE:  GOTO   2A04
029C2:  MOVLB  B
029C4:  MOVF   x1A,W
029C6:  SUBWF  x14,W
029C8:  BTFSC  FD8.0
029CA:  BRA    29D2
029CC:  MOVLB  0
029CE:  GOTO   2A40
029D2:  MOVLB  0
029D4:  BTFSS  FD8.2
029D6:  GOTO   2A04
029DA:  MOVLB  B
029DC:  MOVF   x19,W
029DE:  SUBWF  x13,W
029E0:  BTFSC  FD8.0
029E2:  BRA    29EA
029E4:  MOVLB  0
029E6:  GOTO   2A40
029EA:  MOVLB  0
029EC:  BTFSS  FD8.2
029EE:  GOTO   2A04
029F2:  MOVLB  B
029F4:  MOVF   x12,W
029F6:  SUBWF  x18,W
029F8:  BTFSS  FD8.0
029FA:  BRA    2A02
029FC:  MOVLB  0
029FE:  GOTO   2A40
02A02:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02A04:  MOVLB  B
02A06:  MOVF   x10,W
02A08:  ADDWF  x18,W
02A0A:  MOVWF  FE9
02A0C:  MOVF   x11,W
02A0E:  ADDWFC x19,W
02A10:  MOVWF  FEA
02A12:  MOVLW  02
02A14:  MOVWF  x24
02A16:  MOVLW  08
02A18:  MOVWF  x25
02A1A:  MOVLW  01
02A1C:  MOVWF  x26
02A1E:  MOVLB  0
02A20:  CALL   2860
02A24:  MOVFF  01,FEF
02A28:  MOVLW  01
02A2A:  MOVLB  B
02A2C:  ADDWF  x18,F
02A2E:  BTFSC  FD8.0
02A30:  INCF   x19,F
02A32:  BTFSC  FD8.2
02A34:  INCF   x1A,F
02A36:  BTFSC  FD8.2
02A38:  INCF   x1B,F
02A3A:  MOVLB  0
02A3C:  GOTO   29AA
....................          break;
02A40:  GOTO   2B52
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02A44:  MOVLB  B
02A46:  CLRF   x1D
02A48:  CLRF   x1C
02A4A:  MOVLB  0
02A4C:  MOVLB  B
02A4E:  MOVF   x1D,W
02A50:  SUBWF  x0F,W
02A52:  BTFSC  FD8.0
02A54:  BRA    2A5C
02A56:  MOVLB  0
02A58:  GOTO   2AA8
02A5C:  MOVLB  0
02A5E:  BTFSS  FD8.2
02A60:  GOTO   2A76
02A64:  MOVLB  B
02A66:  MOVF   x0E,W
02A68:  SUBWF  x1C,W
02A6A:  BTFSS  FD8.0
02A6C:  BRA    2A74
02A6E:  MOVLB  0
02A70:  GOTO   2AA8
02A74:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02A76:  MOVLB  B
02A78:  MOVF   x0C,W
02A7A:  ADDWF  x1C,W
02A7C:  MOVWF  FE9
02A7E:  MOVF   x0D,W
02A80:  ADDWFC x1D,W
02A82:  MOVWF  FEA
02A84:  MOVFF  FEF,B22
02A88:  MOVFF  B22,B24
02A8C:  MOVLW  08
02A8E:  MOVWF  x25
02A90:  MOVLW  01
02A92:  MOVWF  x26
02A94:  MOVLB  0
02A96:  CALL   28C0
02A9A:  MOVLB  B
02A9C:  INCF   x1C,F
02A9E:  BTFSC  FD8.2
02AA0:  INCF   x1D,F
02AA2:  MOVLB  0
02AA4:  GOTO   2A4C
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02AA8:  MOVLB  B
02AAA:  CLRF   x21
02AAC:  CLRF   x20
02AAE:  CLRF   x1F
02AB0:  CLRF   x1E
02AB2:  MOVLB  0
02AB4:  MOVLB  B
02AB6:  MOVF   x21,W
02AB8:  SUBWF  x15,W
02ABA:  BTFSC  FD8.0
02ABC:  BRA    2AC4
02ABE:  MOVLB  0
02AC0:  GOTO   2B4A
02AC4:  MOVLB  0
02AC6:  BTFSS  FD8.2
02AC8:  GOTO   2B0E
02ACC:  MOVLB  B
02ACE:  MOVF   x20,W
02AD0:  SUBWF  x14,W
02AD2:  BTFSC  FD8.0
02AD4:  BRA    2ADC
02AD6:  MOVLB  0
02AD8:  GOTO   2B4A
02ADC:  MOVLB  0
02ADE:  BTFSS  FD8.2
02AE0:  GOTO   2B0E
02AE4:  MOVLB  B
02AE6:  MOVF   x1F,W
02AE8:  SUBWF  x13,W
02AEA:  BTFSC  FD8.0
02AEC:  BRA    2AF4
02AEE:  MOVLB  0
02AF0:  GOTO   2B4A
02AF4:  MOVLB  0
02AF6:  BTFSS  FD8.2
02AF8:  GOTO   2B0E
02AFC:  MOVLB  B
02AFE:  MOVF   x12,W
02B00:  SUBWF  x1E,W
02B02:  BTFSS  FD8.0
02B04:  BRA    2B0C
02B06:  MOVLB  0
02B08:  GOTO   2B4A
02B0C:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02B0E:  MOVLB  B
02B10:  MOVF   x10,W
02B12:  ADDWF  x1E,W
02B14:  MOVWF  FE9
02B16:  MOVF   x11,W
02B18:  ADDWFC x1F,W
02B1A:  MOVWF  FEA
02B1C:  MOVLW  01
02B1E:  MOVWF  x24
02B20:  MOVLW  08
02B22:  MOVWF  x25
02B24:  MOVLW  01
02B26:  MOVWF  x26
02B28:  MOVLB  0
02B2A:  CALL   28C0
02B2E:  MOVFF  01,FEF
02B32:  MOVLW  01
02B34:  MOVLB  B
02B36:  ADDWF  x1E,F
02B38:  BTFSC  FD8.0
02B3A:  INCF   x1F,F
02B3C:  BTFSC  FD8.2
02B3E:  INCF   x20,F
02B40:  BTFSC  FD8.2
02B42:  INCF   x21,F
02B44:  MOVLB  0
02B46:  GOTO   2AB4
....................          break;
02B4A:  GOTO   2B52
....................    
....................          
....................       default:
....................          break;
02B4E:  GOTO   2B52
....................    }
....................    return;
02B52:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03A6C:  MOVLB  B
03A6E:  MOVF   x02,W
03A70:  XORLW  00
03A72:  MOVLB  0
03A74:  BTFSC  FD8.2
03A76:  GOTO   3A86
03A7A:  XORLW  01
03A7C:  BTFSC  FD8.2
03A7E:  GOTO   3B34
03A82:  GOTO   3BE2
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03A86:  MOVLB  B
03A88:  CLRF   x0D
03A8A:  MOVLB  0
03A8C:  MOVLB  B
03A8E:  MOVF   x08,W
03A90:  SUBWF  x0D,W
03A92:  BTFSS  FD8.0
03A94:  BRA    3A9C
03A96:  MOVLB  0
03A98:  GOTO   3ACC
03A9C:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03A9E:  MOVLB  B
03AA0:  MOVF   x0D,W
03AA2:  ADDWF  x06,W
03AA4:  MOVWF  FE9
03AA6:  MOVLW  00
03AA8:  ADDWFC x07,W
03AAA:  MOVWF  FEA
03AAC:  MOVFF  FEF,B13
03AB0:  MOVFF  B13,B24
03AB4:  MOVLW  08
03AB6:  MOVWF  x25
03AB8:  MOVLW  01
03ABA:  MOVWF  x26
03ABC:  MOVLB  0
03ABE:  CALL   2860
03AC2:  MOVLB  B
03AC4:  INCF   x0D,F
03AC6:  MOVLB  0
03AC8:  GOTO   3A8C
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03ACC:  MOVLB  B
03ACE:  CLRF   x0F
03AD0:  CLRF   x0E
03AD2:  MOVLB  0
03AD4:  MOVLB  B
03AD6:  MOVF   x0F,W
03AD8:  SUBWF  x0C,W
03ADA:  BTFSC  FD8.0
03ADC:  BRA    3AE4
03ADE:  MOVLB  0
03AE0:  GOTO   3B30
03AE4:  MOVLB  0
03AE6:  BTFSS  FD8.2
03AE8:  GOTO   3AFE
03AEC:  MOVLB  B
03AEE:  MOVF   x0B,W
03AF0:  SUBWF  x0E,W
03AF2:  BTFSS  FD8.0
03AF4:  BRA    3AFC
03AF6:  MOVLB  0
03AF8:  GOTO   3B30
03AFC:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03AFE:  MOVLB  B
03B00:  MOVF   x09,W
03B02:  ADDWF  x0E,W
03B04:  MOVWF  FE9
03B06:  MOVF   x0A,W
03B08:  ADDWFC x0F,W
03B0A:  MOVWF  FEA
03B0C:  MOVFF  FEF,B13
03B10:  MOVFF  B13,B24
03B14:  MOVLW  08
03B16:  MOVWF  x25
03B18:  MOVLW  01
03B1A:  MOVWF  x26
03B1C:  MOVLB  0
03B1E:  CALL   2860
03B22:  MOVLB  B
03B24:  INCF   x0E,F
03B26:  BTFSC  FD8.2
03B28:  INCF   x0F,F
03B2A:  MOVLB  0
03B2C:  GOTO   3AD4
....................          break;
03B30:  GOTO   3BE6
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03B34:  MOVLB  B
03B36:  CLRF   x10
03B38:  MOVLB  0
03B3A:  MOVLB  B
03B3C:  MOVF   x08,W
03B3E:  SUBWF  x10,W
03B40:  BTFSS  FD8.0
03B42:  BRA    3B4A
03B44:  MOVLB  0
03B46:  GOTO   3B7A
03B4A:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03B4C:  MOVLB  B
03B4E:  MOVF   x10,W
03B50:  ADDWF  x06,W
03B52:  MOVWF  FE9
03B54:  MOVLW  00
03B56:  ADDWFC x07,W
03B58:  MOVWF  FEA
03B5A:  MOVFF  FEF,B13
03B5E:  MOVFF  B13,B24
03B62:  MOVLW  08
03B64:  MOVWF  x25
03B66:  MOVLW  01
03B68:  MOVWF  x26
03B6A:  MOVLB  0
03B6C:  CALL   28C0
03B70:  MOVLB  B
03B72:  INCF   x10,F
03B74:  MOVLB  0
03B76:  GOTO   3B3A
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03B7A:  MOVLB  B
03B7C:  CLRF   x12
03B7E:  CLRF   x11
03B80:  MOVLB  0
03B82:  MOVLB  B
03B84:  MOVF   x12,W
03B86:  SUBWF  x0C,W
03B88:  BTFSC  FD8.0
03B8A:  BRA    3B92
03B8C:  MOVLB  0
03B8E:  GOTO   3BDE
03B92:  MOVLB  0
03B94:  BTFSS  FD8.2
03B96:  GOTO   3BAC
03B9A:  MOVLB  B
03B9C:  MOVF   x0B,W
03B9E:  SUBWF  x11,W
03BA0:  BTFSS  FD8.0
03BA2:  BRA    3BAA
03BA4:  MOVLB  0
03BA6:  GOTO   3BDE
03BAA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03BAC:  MOVLB  B
03BAE:  MOVF   x09,W
03BB0:  ADDWF  x11,W
03BB2:  MOVWF  FE9
03BB4:  MOVF   x0A,W
03BB6:  ADDWFC x12,W
03BB8:  MOVWF  FEA
03BBA:  MOVFF  FEF,B13
03BBE:  MOVFF  B13,B24
03BC2:  MOVLW  08
03BC4:  MOVWF  x25
03BC6:  MOVLW  01
03BC8:  MOVWF  x26
03BCA:  MOVLB  0
03BCC:  CALL   28C0
03BD0:  MOVLB  B
03BD2:  INCF   x11,F
03BD4:  BTFSC  FD8.2
03BD6:  INCF   x12,F
03BD8:  MOVLB  0
03BDA:  GOTO   3B82
....................          break;
03BDE:  GOTO   3BE6
....................          
....................       default:
....................          break;
03BE2:  GOTO   3BE6
....................    }
....................    return;
03BE6:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06774:  MOVFF  2BC,B08
06778:  MOVLW  01
0677A:  MOVLB  B
0677C:  MOVWF  x09
0677E:  MOVLW  0F
06780:  MOVWF  x0B
06782:  MOVLW  89
06784:  MOVWF  x0A
06786:  MOVLB  0
06788:  CALL   280C
0678C:  MOVFF  2BC,B08
06790:  MOVLB  B
06792:  CLRF   x09
06794:  MOVLW  0F
06796:  MOVWF  x0B
06798:  MOVLW  92
0679A:  MOVWF  x0A
0679C:  MOVLB  0
0679E:  CALL   280C
067A2:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03BE8:  MOVLW  05
03BEA:  MOVLB  B
03BEC:  MOVWF  x06
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03BEE:  MOVFF  B04,B08
03BF2:  CLRF   x09
03BF4:  MOVLW  0F
03BF6:  MOVWF  x0B
03BF8:  MOVLW  89
03BFA:  MOVWF  x0A
03BFC:  MOVLB  0
03BFE:  CALL   280C
03C02:  MOVFF  B04,B08
03C06:  MOVLB  B
03C08:  CLRF   x09
03C0A:  MOVLW  0F
03C0C:  MOVWF  x0B
03C0E:  MOVLW  92
03C10:  MOVWF  x0A
03C12:  MOVLB  0
03C14:  CALL   280C
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03C18:  MOVFF  B05,B0B
03C1C:  MOVFF  B04,B0A
03C20:  MOVFF  B03,B09
03C24:  MOVFF  B02,B08
03C28:  MOVLW  0B
03C2A:  MOVLB  B
03C2C:  MOVWF  x0D
03C2E:  MOVLW  06
03C30:  MOVWF  x0C
03C32:  CLRF   x0F
03C34:  MOVLW  01
03C36:  MOVWF  x0E
03C38:  MOVLW  0B
03C3A:  MOVWF  x11
03C3C:  MOVLW  07
03C3E:  MOVWF  x10
03C40:  CLRF   x15
03C42:  CLRF   x14
03C44:  CLRF   x13
03C46:  MOVLW  01
03C48:  MOVWF  x12
03C4A:  MOVLB  0
03C4C:  CALL   2920
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03C50:  MOVFF  B04,B08
03C54:  MOVLW  01
03C56:  MOVLB  B
03C58:  MOVWF  x09
03C5A:  MOVLW  0F
03C5C:  MOVWF  x0B
03C5E:  MOVLW  89
03C60:  MOVWF  x0A
03C62:  MOVLB  0
03C64:  CALL   280C
03C68:  MOVFF  B04,B08
03C6C:  MOVLB  B
03C6E:  CLRF   x09
03C70:  MOVLW  0F
03C72:  MOVWF  x0B
03C74:  MOVLW  92
03C76:  MOVWF  x0A
03C78:  MOVLB  0
03C7A:  CALL   280C
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03C7E:  MOVLB  B
03C80:  MOVF   x07,W
03C82:  MOVWF  01
03C84:  MOVLB  0
03C86:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05666:  MOVLB  1
05668:  MOVF   xF6,F
0566A:  BTFSC  FD8.2
0566C:  BRA    5674
0566E:  MOVLB  0
05670:  GOTO   57D0
05674:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05676:  MOVLW  06
05678:  MOVLB  1
0567A:  MOVWF  xFD
0567C:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0567E:  MOVLW  D8
05680:  MOVLB  1
05682:  MOVWF  xFE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05684:  MOVFF  1FB,20A
05688:  MOVFF  1FC,20B
0568C:  MOVLB  2
0568E:  CLRF   x0C
05690:  CLRF   x0D
05692:  MOVF   x0A,W
05694:  MOVWF  00
05696:  CLRF   01
05698:  CLRF   02
0569A:  CLRF   03
0569C:  MOVFF  00,1FF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
056A0:  MOVFF  1FA,20A
056A4:  MOVFF  1FB,20B
056A8:  MOVFF  1FC,20C
056AC:  CLRF   x0D
056AE:  MOVF   x0A,W
056B0:  MOVWF  00
056B2:  CLRF   01
056B4:  CLRF   02
056B6:  CLRF   03
056B8:  MOVFF  00,200
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
056BC:  MOVLB  1
056BE:  MOVF   xF9,W
056C0:  MOVWF  00
056C2:  CLRF   01
056C4:  CLRF   02
056C6:  CLRF   03
056C8:  MOVFF  00,201
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
056CC:  MOVFF  1F7,B08
056D0:  MOVLB  B
056D2:  CLRF   x09
056D4:  MOVLW  0F
056D6:  MOVWF  x0B
056D8:  MOVLW  89
056DA:  MOVWF  x0A
056DC:  MOVLB  0
056DE:  CALL   280C
056E2:  MOVFF  1F7,B08
056E6:  MOVLB  B
056E8:  CLRF   x09
056EA:  MOVLW  0F
056EC:  MOVWF  x0B
056EE:  MOVLW  92
056F0:  MOVWF  x0A
056F2:  MOVLB  0
056F4:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
056F8:  MOVFF  1F8,B05
056FC:  MOVFF  1F7,B04
05700:  MOVFF  1F6,B03
05704:  MOVFF  1F5,B02
05708:  MOVLW  01
0570A:  MOVLB  B
0570C:  MOVWF  x07
0570E:  MOVLW  FD
05710:  MOVWF  x06
05712:  CLRF   x09
05714:  MOVLW  01
05716:  MOVWF  x08
05718:  MOVLB  0
0571A:  CALL   397C
....................       output_high(flash_stream.cs_pin);
0571E:  MOVFF  1F7,B08
05722:  MOVLW  01
05724:  MOVLB  B
05726:  MOVWF  x09
05728:  MOVLW  0F
0572A:  MOVWF  x0B
0572C:  MOVLW  89
0572E:  MOVWF  x0A
05730:  MOVLB  0
05732:  CALL   280C
05736:  MOVFF  1F7,B08
0573A:  MOVLB  B
0573C:  CLRF   x09
0573E:  MOVLW  0F
05740:  MOVWF  x0B
05742:  MOVLW  92
05744:  MOVWF  x0A
05746:  MOVLB  0
05748:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0574C:  MOVFF  1F7,B08
05750:  MOVLB  B
05752:  CLRF   x09
05754:  MOVLW  0F
05756:  MOVWF  x0B
05758:  MOVLW  89
0575A:  MOVWF  x0A
0575C:  MOVLB  0
0575E:  CALL   280C
05762:  MOVFF  1F7,B08
05766:  MOVLB  B
05768:  CLRF   x09
0576A:  MOVLW  0F
0576C:  MOVWF  x0B
0576E:  MOVLW  92
05770:  MOVWF  x0A
05772:  MOVLB  0
05774:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05778:  MOVFF  1F8,B05
0577C:  MOVFF  1F7,B04
05780:  MOVFF  1F6,B03
05784:  MOVFF  1F5,B02
05788:  MOVLW  01
0578A:  MOVLB  B
0578C:  MOVWF  x07
0578E:  MOVLW  FE
05790:  MOVWF  x06
05792:  CLRF   x09
05794:  MOVLW  04
05796:  MOVWF  x08
05798:  MOVLB  0
0579A:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0579E:  MOVFF  1F7,B08
057A2:  MOVLW  01
057A4:  MOVLB  B
057A6:  MOVWF  x09
057A8:  MOVLW  0F
057AA:  MOVWF  x0B
057AC:  MOVLW  89
057AE:  MOVWF  x0A
057B0:  MOVLB  0
057B2:  CALL   280C
057B6:  MOVFF  1F7,B08
057BA:  MOVLB  B
057BC:  CLRF   x09
057BE:  MOVLW  0F
057C0:  MOVWF  x0B
057C2:  MOVLW  92
057C4:  MOVWF  x0A
057C6:  MOVLB  0
057C8:  CALL   280C
....................    }
057CC:  GOTO   5952
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
057D0:  MOVLB  1
057D2:  DECFSZ xF6,W
057D4:  BRA    57DA
057D6:  BRA    57E0
057D8:  MOVLB  0
057DA:  MOVLB  0
057DC:  GOTO   5952
057E0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
057E2:  MOVLW  06
057E4:  MOVLB  2
057E6:  MOVWF  x02
057E8:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
057EA:  MOVLW  DC
057EC:  MOVLB  2
057EE:  MOVWF  x03
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
057F0:  MOVFF  1FC,20A
057F4:  CLRF   x0B
057F6:  CLRF   x0C
057F8:  CLRF   x0D
057FA:  MOVF   x0A,W
057FC:  MOVWF  00
057FE:  CLRF   01
05800:  CLRF   02
05802:  CLRF   03
05804:  MOVFF  00,204
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05808:  MOVFF  1FB,20A
0580C:  MOVFF  1FC,20B
05810:  CLRF   x0C
05812:  CLRF   x0D
05814:  MOVF   x0A,W
05816:  MOVWF  00
05818:  CLRF   01
0581A:  CLRF   02
0581C:  CLRF   03
0581E:  MOVFF  00,205
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05822:  MOVFF  1FA,20A
05826:  MOVFF  1FB,20B
0582A:  MOVFF  1FC,20C
0582E:  CLRF   x0D
05830:  MOVF   x0A,W
05832:  MOVWF  00
05834:  CLRF   01
05836:  CLRF   02
05838:  CLRF   03
0583A:  MOVFF  00,206
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0583E:  MOVLB  1
05840:  MOVF   xF9,W
05842:  MOVWF  00
05844:  CLRF   01
05846:  CLRF   02
05848:  CLRF   03
0584A:  MOVFF  00,207
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0584E:  MOVFF  1F7,B08
05852:  MOVLB  B
05854:  CLRF   x09
05856:  MOVLW  0F
05858:  MOVWF  x0B
0585A:  MOVLW  89
0585C:  MOVWF  x0A
0585E:  MOVLB  0
05860:  CALL   280C
05864:  MOVFF  1F7,B08
05868:  MOVLB  B
0586A:  CLRF   x09
0586C:  MOVLW  0F
0586E:  MOVWF  x0B
05870:  MOVLW  92
05872:  MOVWF  x0A
05874:  MOVLB  0
05876:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0587A:  MOVFF  1F8,B05
0587E:  MOVFF  1F7,B04
05882:  MOVFF  1F6,B03
05886:  MOVFF  1F5,B02
0588A:  MOVLW  02
0588C:  MOVLB  B
0588E:  MOVWF  x07
05890:  MOVLW  02
05892:  MOVWF  x06
05894:  CLRF   x09
05896:  MOVLW  01
05898:  MOVWF  x08
0589A:  MOVLB  0
0589C:  CALL   397C
....................       output_high(flash_stream.cs_pin);
058A0:  MOVFF  1F7,B08
058A4:  MOVLW  01
058A6:  MOVLB  B
058A8:  MOVWF  x09
058AA:  MOVLW  0F
058AC:  MOVWF  x0B
058AE:  MOVLW  89
058B0:  MOVWF  x0A
058B2:  MOVLB  0
058B4:  CALL   280C
058B8:  MOVFF  1F7,B08
058BC:  MOVLB  B
058BE:  CLRF   x09
058C0:  MOVLW  0F
058C2:  MOVWF  x0B
058C4:  MOVLW  92
058C6:  MOVWF  x0A
058C8:  MOVLB  0
058CA:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
058CE:  MOVFF  1F7,B08
058D2:  MOVLB  B
058D4:  CLRF   x09
058D6:  MOVLW  0F
058D8:  MOVWF  x0B
058DA:  MOVLW  89
058DC:  MOVWF  x0A
058DE:  MOVLB  0
058E0:  CALL   280C
058E4:  MOVFF  1F7,B08
058E8:  MOVLB  B
058EA:  CLRF   x09
058EC:  MOVLW  0F
058EE:  MOVWF  x0B
058F0:  MOVLW  92
058F2:  MOVWF  x0A
058F4:  MOVLB  0
058F6:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
058FA:  MOVFF  1F8,B05
058FE:  MOVFF  1F7,B04
05902:  MOVFF  1F6,B03
05906:  MOVFF  1F5,B02
0590A:  MOVLW  02
0590C:  MOVLB  B
0590E:  MOVWF  x07
05910:  MOVLW  03
05912:  MOVWF  x06
05914:  CLRF   x09
05916:  MOVLW  05
05918:  MOVWF  x08
0591A:  MOVLB  0
0591C:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05920:  MOVFF  1F7,B08
05924:  MOVLW  01
05926:  MOVLB  B
05928:  MOVWF  x09
0592A:  MOVLW  0F
0592C:  MOVWF  x0B
0592E:  MOVLW  89
05930:  MOVWF  x0A
05932:  MOVLB  0
05934:  CALL   280C
05938:  MOVFF  1F7,B08
0593C:  MOVLB  B
0593E:  CLRF   x09
05940:  MOVLW  0F
05942:  MOVWF  x0B
05944:  MOVLW  92
05946:  MOVWF  x0A
05948:  MOVLB  0
0594A:  CALL   280C
....................    }
0594E:  GOTO   5952
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05952:  MOVLB  2
05954:  CLRF   x08
05956:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05958:  MOVFF  1F8,B05
0595C:  MOVFF  1F7,B04
05960:  MOVFF  1F6,B03
05964:  MOVFF  1F5,B02
05968:  CALL   3BE8
0596C:  MOVF   01,W
0596E:  ANDLW  01
05970:  SUBLW  01
05972:  BTFSS  FD8.2
05974:  GOTO   59C6
....................       if(timeout_counter > 10)
05978:  MOVLB  2
0597A:  MOVF   x08,W
0597C:  SUBLW  0A
0597E:  BTFSS  FD8.0
05980:  BRA    5988
05982:  MOVLB  0
05984:  GOTO   599A
05988:  MOVLB  0
....................          delay_ms(200);
0598A:  MOVLW  C8
0598C:  MOVLB  B
0598E:  MOVWF  x02
05990:  MOVLB  0
05992:  CALL   2000
05996:  GOTO   59A6
....................       else
....................          delay_ms(10);   
0599A:  MOVLW  0A
0599C:  MOVLB  B
0599E:  MOVWF  x02
059A0:  MOVLB  0
059A2:  CALL   2000
....................       
....................       if(timeout_counter > 100){
059A6:  MOVLB  2
059A8:  MOVF   x08,W
059AA:  SUBLW  64
059AC:  BTFSS  FD8.0
059AE:  BRA    59B6
059B0:  MOVLB  0
059B2:  GOTO   59BC
059B6:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
059B8:  GOTO   59C6
....................       }  
....................       timeout_counter++;
059BC:  MOVLB  2
059BE:  INCF   x08,F
059C0:  MOVLB  0
059C2:  GOTO   5958
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
059C6:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04A8C:  MOVLB  A
04A8E:  MOVF   x05,F
04A90:  BTFSC  FD8.2
04A92:  BRA    4A9A
04A94:  MOVLB  0
04A96:  GOTO   4BF2
04A9A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04A9C:  MOVLW  06
04A9E:  MOVLB  A
04AA0:  MOVWF  x0C
04AA2:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04AA4:  MOVLW  20
04AA6:  MOVLB  A
04AA8:  MOVWF  x0D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04AAA:  MOVFF  A0A,A19
04AAE:  MOVFF  A0B,A1A
04AB2:  CLRF   x1B
04AB4:  CLRF   x1C
04AB6:  MOVF   x19,W
04AB8:  MOVWF  00
04ABA:  CLRF   01
04ABC:  CLRF   02
04ABE:  CLRF   03
04AC0:  MOVFF  00,A0E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04AC4:  MOVFF  A09,A19
04AC8:  MOVFF  A0A,A1A
04ACC:  MOVFF  A0B,A1B
04AD0:  CLRF   x1C
04AD2:  MOVF   x19,W
04AD4:  MOVWF  00
04AD6:  CLRF   01
04AD8:  CLRF   02
04ADA:  CLRF   03
04ADC:  MOVFF  00,A0F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04AE0:  MOVF   x08,W
04AE2:  MOVWF  00
04AE4:  CLRF   01
04AE6:  CLRF   02
04AE8:  CLRF   03
04AEA:  MOVFF  00,A10
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04AEE:  MOVFF  A06,B08
04AF2:  MOVLB  B
04AF4:  CLRF   x09
04AF6:  MOVLW  0F
04AF8:  MOVWF  x0B
04AFA:  MOVLW  89
04AFC:  MOVWF  x0A
04AFE:  MOVLB  0
04B00:  CALL   280C
04B04:  MOVFF  A06,B08
04B08:  MOVLB  B
04B0A:  CLRF   x09
04B0C:  MOVLW  0F
04B0E:  MOVWF  x0B
04B10:  MOVLW  92
04B12:  MOVWF  x0A
04B14:  MOVLB  0
04B16:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04B1A:  MOVFF  A07,B05
04B1E:  MOVFF  A06,B04
04B22:  MOVFF  A05,B03
04B26:  MOVFF  A04,B02
04B2A:  MOVLW  0A
04B2C:  MOVLB  B
04B2E:  MOVWF  x07
04B30:  MOVLW  0C
04B32:  MOVWF  x06
04B34:  CLRF   x09
04B36:  MOVLW  01
04B38:  MOVWF  x08
04B3A:  MOVLB  0
04B3C:  CALL   397C
....................       output_high(flash_stream.cs_pin);
04B40:  MOVFF  A06,B08
04B44:  MOVLW  01
04B46:  MOVLB  B
04B48:  MOVWF  x09
04B4A:  MOVLW  0F
04B4C:  MOVWF  x0B
04B4E:  MOVLW  89
04B50:  MOVWF  x0A
04B52:  MOVLB  0
04B54:  CALL   280C
04B58:  MOVFF  A06,B08
04B5C:  MOVLB  B
04B5E:  CLRF   x09
04B60:  MOVLW  0F
04B62:  MOVWF  x0B
04B64:  MOVLW  92
04B66:  MOVWF  x0A
04B68:  MOVLB  0
04B6A:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04B6E:  MOVFF  A06,B08
04B72:  MOVLB  B
04B74:  CLRF   x09
04B76:  MOVLW  0F
04B78:  MOVWF  x0B
04B7A:  MOVLW  89
04B7C:  MOVWF  x0A
04B7E:  MOVLB  0
04B80:  CALL   280C
04B84:  MOVFF  A06,B08
04B88:  MOVLB  B
04B8A:  CLRF   x09
04B8C:  MOVLW  0F
04B8E:  MOVWF  x0B
04B90:  MOVLW  92
04B92:  MOVWF  x0A
04B94:  MOVLB  0
04B96:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04B9A:  MOVFF  A07,B05
04B9E:  MOVFF  A06,B04
04BA2:  MOVFF  A05,B03
04BA6:  MOVFF  A04,B02
04BAA:  MOVLW  0A
04BAC:  MOVLB  B
04BAE:  MOVWF  x07
04BB0:  MOVLW  0D
04BB2:  MOVWF  x06
04BB4:  CLRF   x09
04BB6:  MOVLW  04
04BB8:  MOVWF  x08
04BBA:  MOVLB  0
04BBC:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04BC0:  MOVFF  A06,B08
04BC4:  MOVLW  01
04BC6:  MOVLB  B
04BC8:  MOVWF  x09
04BCA:  MOVLW  0F
04BCC:  MOVWF  x0B
04BCE:  MOVLW  89
04BD0:  MOVWF  x0A
04BD2:  MOVLB  0
04BD4:  CALL   280C
04BD8:  MOVFF  A06,B08
04BDC:  MOVLB  B
04BDE:  CLRF   x09
04BE0:  MOVLW  0F
04BE2:  MOVWF  x0B
04BE4:  MOVLW  92
04BE6:  MOVWF  x0A
04BE8:  MOVLB  0
04BEA:  CALL   280C
....................    }
04BEE:  GOTO   4D72
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04BF2:  MOVLB  A
04BF4:  DECFSZ x05,W
04BF6:  BRA    4BFC
04BF8:  BRA    4C02
04BFA:  MOVLB  0
04BFC:  MOVLB  0
04BFE:  GOTO   4D72
04C02:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04C04:  MOVLW  06
04C06:  MOVLB  A
04C08:  MOVWF  x11
04C0A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04C0C:  MOVLW  21
04C0E:  MOVLB  A
04C10:  MOVWF  x12
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04C12:  MOVFF  A0B,A19
04C16:  CLRF   x1A
04C18:  CLRF   x1B
04C1A:  CLRF   x1C
04C1C:  MOVF   x19,W
04C1E:  MOVWF  00
04C20:  CLRF   01
04C22:  CLRF   02
04C24:  CLRF   03
04C26:  MOVFF  00,A13
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04C2A:  MOVFF  A0A,A19
04C2E:  MOVFF  A0B,A1A
04C32:  CLRF   x1B
04C34:  CLRF   x1C
04C36:  MOVF   x19,W
04C38:  MOVWF  00
04C3A:  CLRF   01
04C3C:  CLRF   02
04C3E:  CLRF   03
04C40:  MOVFF  00,A14
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04C44:  MOVFF  A09,A19
04C48:  MOVFF  A0A,A1A
04C4C:  MOVFF  A0B,A1B
04C50:  CLRF   x1C
04C52:  MOVF   x19,W
04C54:  MOVWF  00
04C56:  CLRF   01
04C58:  CLRF   02
04C5A:  CLRF   03
04C5C:  MOVFF  00,A15
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04C60:  MOVF   x08,W
04C62:  MOVWF  00
04C64:  CLRF   01
04C66:  CLRF   02
04C68:  CLRF   03
04C6A:  MOVFF  00,A16
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04C6E:  MOVFF  A06,B08
04C72:  MOVLB  B
04C74:  CLRF   x09
04C76:  MOVLW  0F
04C78:  MOVWF  x0B
04C7A:  MOVLW  89
04C7C:  MOVWF  x0A
04C7E:  MOVLB  0
04C80:  CALL   280C
04C84:  MOVFF  A06,B08
04C88:  MOVLB  B
04C8A:  CLRF   x09
04C8C:  MOVLW  0F
04C8E:  MOVWF  x0B
04C90:  MOVLW  92
04C92:  MOVWF  x0A
04C94:  MOVLB  0
04C96:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04C9A:  MOVFF  A07,B05
04C9E:  MOVFF  A06,B04
04CA2:  MOVFF  A05,B03
04CA6:  MOVFF  A04,B02
04CAA:  MOVLW  0A
04CAC:  MOVLB  B
04CAE:  MOVWF  x07
04CB0:  MOVLW  11
04CB2:  MOVWF  x06
04CB4:  CLRF   x09
04CB6:  MOVLW  01
04CB8:  MOVWF  x08
04CBA:  MOVLB  0
04CBC:  CALL   397C
....................       output_high(flash_stream.cs_pin);
04CC0:  MOVFF  A06,B08
04CC4:  MOVLW  01
04CC6:  MOVLB  B
04CC8:  MOVWF  x09
04CCA:  MOVLW  0F
04CCC:  MOVWF  x0B
04CCE:  MOVLW  89
04CD0:  MOVWF  x0A
04CD2:  MOVLB  0
04CD4:  CALL   280C
04CD8:  MOVFF  A06,B08
04CDC:  MOVLB  B
04CDE:  CLRF   x09
04CE0:  MOVLW  0F
04CE2:  MOVWF  x0B
04CE4:  MOVLW  92
04CE6:  MOVWF  x0A
04CE8:  MOVLB  0
04CEA:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04CEE:  MOVFF  A06,B08
04CF2:  MOVLB  B
04CF4:  CLRF   x09
04CF6:  MOVLW  0F
04CF8:  MOVWF  x0B
04CFA:  MOVLW  89
04CFC:  MOVWF  x0A
04CFE:  MOVLB  0
04D00:  CALL   280C
04D04:  MOVFF  A06,B08
04D08:  MOVLB  B
04D0A:  CLRF   x09
04D0C:  MOVLW  0F
04D0E:  MOVWF  x0B
04D10:  MOVLW  92
04D12:  MOVWF  x0A
04D14:  MOVLB  0
04D16:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04D1A:  MOVFF  A07,B05
04D1E:  MOVFF  A06,B04
04D22:  MOVFF  A05,B03
04D26:  MOVFF  A04,B02
04D2A:  MOVLW  0A
04D2C:  MOVLB  B
04D2E:  MOVWF  x07
04D30:  MOVLW  12
04D32:  MOVWF  x06
04D34:  CLRF   x09
04D36:  MOVLW  05
04D38:  MOVWF  x08
04D3A:  MOVLB  0
04D3C:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04D40:  MOVFF  A06,B08
04D44:  MOVLW  01
04D46:  MOVLB  B
04D48:  MOVWF  x09
04D4A:  MOVLW  0F
04D4C:  MOVWF  x0B
04D4E:  MOVLW  89
04D50:  MOVWF  x0A
04D52:  MOVLB  0
04D54:  CALL   280C
04D58:  MOVFF  A06,B08
04D5C:  MOVLB  B
04D5E:  CLRF   x09
04D60:  MOVLW  0F
04D62:  MOVWF  x0B
04D64:  MOVLW  92
04D66:  MOVWF  x0A
04D68:  MOVLB  0
04D6A:  CALL   280C
....................    }
04D6E:  GOTO   4D72
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04D72:  MOVLB  A
04D74:  CLRF   x17
04D76:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04D78:  MOVFF  A07,B05
04D7C:  MOVFF  A06,B04
04D80:  MOVFF  A05,B03
04D84:  MOVFF  A04,B02
04D88:  CALL   3BE8
04D8C:  MOVF   01,W
04D8E:  ANDLW  01
04D90:  SUBLW  01
04D92:  BTFSS  FD8.2
04D94:  GOTO   4DAE
....................       delay_ms(1);   
04D98:  MOVLW  01
04D9A:  MOVLB  B
04D9C:  MOVWF  x02
04D9E:  MOVLB  0
04DA0:  CALL   2000
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
04DA4:  MOVLB  A
04DA6:  INCF   x17,F
04DA8:  MOVLB  0
04DAA:  GOTO   4D78
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
04DAE:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02C1C:  MOVLB  A
02C1E:  MOVF   xEB,F
02C20:  BTFSC  FD8.2
02C22:  BRA    2C2A
02C24:  MOVLB  0
02C26:  GOTO   2D20
02C2A:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02C2C:  MOVLW  03
02C2E:  MOVLB  A
02C30:  MOVWF  xF8
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02C32:  MOVFF  AF0,B02
02C36:  MOVFF  AF1,B03
02C3A:  MOVLB  B
02C3C:  CLRF   x04
02C3E:  CLRF   x05
02C40:  MOVF   x02,W
02C42:  MOVWF  00
02C44:  CLRF   01
02C46:  CLRF   02
02C48:  CLRF   03
02C4A:  MOVFF  00,AF9
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02C4E:  MOVFF  AEF,B02
02C52:  MOVFF  AF0,B03
02C56:  MOVFF  AF1,B04
02C5A:  CLRF   x05
02C5C:  MOVF   x02,W
02C5E:  MOVWF  00
02C60:  CLRF   01
02C62:  CLRF   02
02C64:  CLRF   03
02C66:  MOVFF  00,AFA
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02C6A:  MOVLB  A
02C6C:  MOVF   xEE,W
02C6E:  MOVWF  00
02C70:  CLRF   01
02C72:  CLRF   02
02C74:  CLRF   03
02C76:  MOVFF  00,AFB
....................             
....................       output_low(flash_stream.cs_pin);
02C7A:  MOVFF  AEC,B08
02C7E:  MOVLB  B
02C80:  CLRF   x09
02C82:  MOVLW  0F
02C84:  MOVWF  x0B
02C86:  MOVLW  89
02C88:  MOVWF  x0A
02C8A:  MOVLB  0
02C8C:  CALL   280C
02C90:  MOVFF  AEC,B08
02C94:  MOVLB  B
02C96:  CLRF   x09
02C98:  MOVLW  0F
02C9A:  MOVWF  x0B
02C9C:  MOVLW  92
02C9E:  MOVWF  x0A
02CA0:  MOVLB  0
02CA2:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02CA6:  MOVFF  AED,B0B
02CAA:  MOVFF  AEC,B0A
02CAE:  MOVFF  AEB,B09
02CB2:  MOVFF  AEA,B08
02CB6:  MOVLW  0A
02CB8:  MOVLB  B
02CBA:  MOVWF  x0D
02CBC:  MOVLW  F8
02CBE:  MOVWF  x0C
02CC0:  CLRF   x0F
02CC2:  MOVLW  04
02CC4:  MOVWF  x0E
02CC6:  MOVFF  AF3,B11
02CCA:  MOVFF  AF2,B10
02CCE:  MOVFF  AF7,B15
02CD2:  MOVFF  AF6,B14
02CD6:  MOVFF  AF5,B13
02CDA:  MOVFF  AF4,B12
02CDE:  MOVLB  0
02CE0:  CALL   2920
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02CE4:  MOVLW  02
02CE6:  MOVWF  00
02CE8:  DECFSZ 00,F
02CEA:  BRA    2CE8
02CEC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02CEE:  MOVFF  AEC,B08
02CF2:  MOVLW  01
02CF4:  MOVLB  B
02CF6:  MOVWF  x09
02CF8:  MOVLW  0F
02CFA:  MOVWF  x0B
02CFC:  MOVLW  89
02CFE:  MOVWF  x0A
02D00:  MOVLB  0
02D02:  CALL   280C
02D06:  MOVFF  AEC,B08
02D0A:  MOVLB  B
02D0C:  CLRF   x09
02D0E:  MOVLW  0F
02D10:  MOVWF  x0B
02D12:  MOVLW  92
02D14:  MOVWF  x0A
02D16:  MOVLB  0
02D18:  CALL   280C
....................    }
02D1C:  GOTO   2E3A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02D20:  MOVLB  A
02D22:  DECFSZ xEB,W
02D24:  BRA    2D2A
02D26:  BRA    2D30
02D28:  MOVLB  0
02D2A:  MOVLB  0
02D2C:  GOTO   2E3A
02D30:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02D32:  MOVLW  13
02D34:  MOVLB  A
02D36:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02D38:  MOVFF  AF1,B02
02D3C:  MOVLB  B
02D3E:  CLRF   x03
02D40:  CLRF   x04
02D42:  CLRF   x05
02D44:  MOVF   x02,W
02D46:  MOVWF  00
02D48:  CLRF   01
02D4A:  CLRF   02
02D4C:  CLRF   03
02D4E:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02D52:  MOVFF  AF0,B02
02D56:  MOVFF  AF1,B03
02D5A:  CLRF   x04
02D5C:  CLRF   x05
02D5E:  MOVF   x02,W
02D60:  MOVWF  00
02D62:  CLRF   01
02D64:  CLRF   02
02D66:  CLRF   03
02D68:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02D6C:  MOVFF  AEF,B02
02D70:  MOVFF  AF0,B03
02D74:  MOVFF  AF1,B04
02D78:  CLRF   x05
02D7A:  MOVF   x02,W
02D7C:  MOVWF  00
02D7E:  CLRF   01
02D80:  CLRF   02
02D82:  CLRF   03
02D84:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02D88:  MOVLB  A
02D8A:  MOVF   xEE,W
02D8C:  MOVWF  00
02D8E:  CLRF   01
02D90:  CLRF   02
02D92:  CLRF   03
02D94:  MOVFF  00,B00
....................    
....................       output_low(flash_stream.cs_pin);
02D98:  MOVFF  AEC,B08
02D9C:  MOVLB  B
02D9E:  CLRF   x09
02DA0:  MOVLW  0F
02DA2:  MOVWF  x0B
02DA4:  MOVLW  89
02DA6:  MOVWF  x0A
02DA8:  MOVLB  0
02DAA:  CALL   280C
02DAE:  MOVFF  AEC,B08
02DB2:  MOVLB  B
02DB4:  CLRF   x09
02DB6:  MOVLW  0F
02DB8:  MOVWF  x0B
02DBA:  MOVLW  92
02DBC:  MOVWF  x0A
02DBE:  MOVLB  0
02DC0:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02DC4:  MOVFF  AED,B0B
02DC8:  MOVFF  AEC,B0A
02DCC:  MOVFF  AEB,B09
02DD0:  MOVFF  AEA,B08
02DD4:  MOVLW  0A
02DD6:  MOVLB  B
02DD8:  MOVWF  x0D
02DDA:  MOVLW  FC
02DDC:  MOVWF  x0C
02DDE:  CLRF   x0F
02DE0:  MOVLW  05
02DE2:  MOVWF  x0E
02DE4:  MOVFF  AF3,B11
02DE8:  MOVFF  AF2,B10
02DEC:  MOVFF  AF7,B15
02DF0:  MOVFF  AF6,B14
02DF4:  MOVFF  AF5,B13
02DF8:  MOVFF  AF4,B12
02DFC:  MOVLB  0
02DFE:  CALL   2920
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02E02:  MOVLW  02
02E04:  MOVWF  00
02E06:  DECFSZ 00,F
02E08:  BRA    2E06
02E0A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02E0C:  MOVFF  AEC,B08
02E10:  MOVLW  01
02E12:  MOVLB  B
02E14:  MOVWF  x09
02E16:  MOVLW  0F
02E18:  MOVWF  x0B
02E1A:  MOVLW  89
02E1C:  MOVWF  x0A
02E1E:  MOVLB  0
02E20:  CALL   280C
02E24:  MOVFF  AEC,B08
02E28:  MOVLB  B
02E2A:  CLRF   x09
02E2C:  MOVLW  0F
02E2E:  MOVWF  x0B
02E30:  MOVLW  92
02E32:  MOVWF  x0A
02E34:  MOVLB  0
02E36:  CALL   280C
....................    }
....................    return;
02E3A:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0ED2C:  MOVLB  2
0ED2E:  MOVF   x1A,F
0ED30:  BTFSC  FD8.2
0ED32:  BRA    ED3A
0ED34:  MOVLB  0
0ED36:  GOTO   EEA0
0ED3A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0ED3C:  MOVLW  06
0ED3E:  MOVLB  2
0ED40:  MOVWF  x22
0ED42:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0ED44:  MOVLW  02
0ED46:  MOVLB  2
0ED48:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0ED4A:  MOVFF  21F,231
0ED4E:  MOVFF  220,232
0ED52:  CLRF   x33
0ED54:  CLRF   x34
0ED56:  MOVF   x31,W
0ED58:  MOVWF  00
0ED5A:  CLRF   01
0ED5C:  CLRF   02
0ED5E:  CLRF   03
0ED60:  MOVFF  00,224
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0ED64:  MOVFF  21E,231
0ED68:  MOVFF  21F,232
0ED6C:  MOVFF  220,233
0ED70:  CLRF   x34
0ED72:  MOVF   x31,W
0ED74:  MOVWF  00
0ED76:  CLRF   01
0ED78:  CLRF   02
0ED7A:  CLRF   03
0ED7C:  MOVFF  00,225
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
0ED80:  MOVF   x1D,W
0ED82:  MOVWF  00
0ED84:  CLRF   01
0ED86:  CLRF   02
0ED88:  CLRF   03
0ED8A:  MOVFF  00,226
....................       flash_cmd[4] = write_data;
0ED8E:  MOVFF  221,227
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0ED92:  MOVFF  21B,B08
0ED96:  MOVLB  B
0ED98:  CLRF   x09
0ED9A:  MOVLW  0F
0ED9C:  MOVWF  x0B
0ED9E:  MOVLW  89
0EDA0:  MOVWF  x0A
0EDA2:  MOVLB  0
0EDA4:  CALL   280C
0EDA8:  MOVFF  21B,B08
0EDAC:  MOVLB  B
0EDAE:  CLRF   x09
0EDB0:  MOVLW  0F
0EDB2:  MOVWF  x0B
0EDB4:  MOVLW  92
0EDB6:  MOVWF  x0A
0EDB8:  MOVLB  0
0EDBA:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0EDBE:  MOVFF  21C,B05
0EDC2:  MOVFF  21B,B04
0EDC6:  MOVFF  21A,B03
0EDCA:  MOVFF  219,B02
0EDCE:  MOVLW  02
0EDD0:  MOVLB  B
0EDD2:  MOVWF  x07
0EDD4:  MOVLW  22
0EDD6:  MOVWF  x06
0EDD8:  CLRF   x09
0EDDA:  MOVLW  01
0EDDC:  MOVWF  x08
0EDDE:  MOVLB  0
0EDE0:  CALL   397C
....................       output_high(flash_stream.cs_pin);
0EDE4:  MOVFF  21B,B08
0EDE8:  MOVLW  01
0EDEA:  MOVLB  B
0EDEC:  MOVWF  x09
0EDEE:  MOVLW  0F
0EDF0:  MOVWF  x0B
0EDF2:  MOVLW  89
0EDF4:  MOVWF  x0A
0EDF6:  MOVLB  0
0EDF8:  CALL   280C
0EDFC:  MOVFF  21B,B08
0EE00:  MOVLB  B
0EE02:  CLRF   x09
0EE04:  MOVLW  0F
0EE06:  MOVWF  x0B
0EE08:  MOVLW  92
0EE0A:  MOVWF  x0A
0EE0C:  MOVLB  0
0EE0E:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0EE12:  MOVFF  21B,B08
0EE16:  MOVLB  B
0EE18:  CLRF   x09
0EE1A:  MOVLW  0F
0EE1C:  MOVWF  x0B
0EE1E:  MOVLW  89
0EE20:  MOVWF  x0A
0EE22:  MOVLB  0
0EE24:  CALL   280C
0EE28:  MOVFF  21B,B08
0EE2C:  MOVLB  B
0EE2E:  CLRF   x09
0EE30:  MOVLW  0F
0EE32:  MOVWF  x0B
0EE34:  MOVLW  92
0EE36:  MOVWF  x0A
0EE38:  MOVLB  0
0EE3A:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0EE3E:  MOVFF  21C,B05
0EE42:  MOVFF  21B,B04
0EE46:  MOVFF  21A,B03
0EE4A:  MOVFF  219,B02
0EE4E:  MOVLW  02
0EE50:  MOVLB  B
0EE52:  MOVWF  x07
0EE54:  MOVLW  23
0EE56:  MOVWF  x06
0EE58:  CLRF   x09
0EE5A:  MOVLW  05
0EE5C:  MOVWF  x08
0EE5E:  MOVLB  0
0EE60:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0EE64:  MOVLW  02
0EE66:  MOVWF  00
0EE68:  DECFSZ 00,F
0EE6A:  BRA    EE68
0EE6C:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0EE6E:  MOVFF  21B,B08
0EE72:  MOVLW  01
0EE74:  MOVLB  B
0EE76:  MOVWF  x09
0EE78:  MOVLW  0F
0EE7A:  MOVWF  x0B
0EE7C:  MOVLW  89
0EE7E:  MOVWF  x0A
0EE80:  MOVLB  0
0EE82:  CALL   280C
0EE86:  MOVFF  21B,B08
0EE8A:  MOVLB  B
0EE8C:  CLRF   x09
0EE8E:  MOVLW  0F
0EE90:  MOVWF  x0B
0EE92:  MOVLW  92
0EE94:  MOVWF  x0A
0EE96:  MOVLB  0
0EE98:  CALL   280C
....................    }
0EE9C:  GOTO   F02A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0EEA0:  MOVLB  2
0EEA2:  DECFSZ x1A,W
0EEA4:  BRA    EEAA
0EEA6:  BRA    EEB0
0EEA8:  MOVLB  0
0EEAA:  MOVLB  0
0EEAC:  GOTO   F02A
0EEB0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
0EEB2:  MOVLW  06
0EEB4:  MOVLB  2
0EEB6:  MOVWF  x28
0EEB8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
0EEBA:  MOVLW  12
0EEBC:  MOVLB  2
0EEBE:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
0EEC0:  MOVFF  220,231
0EEC4:  CLRF   x32
0EEC6:  CLRF   x33
0EEC8:  CLRF   x34
0EECA:  MOVF   x31,W
0EECC:  MOVWF  00
0EECE:  CLRF   01
0EED0:  CLRF   02
0EED2:  CLRF   03
0EED4:  MOVFF  00,22A
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0EED8:  MOVFF  21F,231
0EEDC:  MOVFF  220,232
0EEE0:  CLRF   x33
0EEE2:  CLRF   x34
0EEE4:  MOVF   x31,W
0EEE6:  MOVWF  00
0EEE8:  CLRF   01
0EEEA:  CLRF   02
0EEEC:  CLRF   03
0EEEE:  MOVFF  00,22B
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0EEF2:  MOVFF  21E,231
0EEF6:  MOVFF  21F,232
0EEFA:  MOVFF  220,233
0EEFE:  CLRF   x34
0EF00:  MOVF   x31,W
0EF02:  MOVWF  00
0EF04:  CLRF   01
0EF06:  CLRF   02
0EF08:  CLRF   03
0EF0A:  MOVFF  00,22C
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
0EF0E:  MOVF   x1D,W
0EF10:  MOVWF  00
0EF12:  CLRF   01
0EF14:  CLRF   02
0EF16:  CLRF   03
0EF18:  MOVFF  00,22D
....................       flash_cmd[5] = write_data;
0EF1C:  MOVFF  221,22E
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0EF20:  MOVFF  21B,B08
0EF24:  MOVLB  B
0EF26:  CLRF   x09
0EF28:  MOVLW  0F
0EF2A:  MOVWF  x0B
0EF2C:  MOVLW  89
0EF2E:  MOVWF  x0A
0EF30:  MOVLB  0
0EF32:  CALL   280C
0EF36:  MOVFF  21B,B08
0EF3A:  MOVLB  B
0EF3C:  CLRF   x09
0EF3E:  MOVLW  0F
0EF40:  MOVWF  x0B
0EF42:  MOVLW  92
0EF44:  MOVWF  x0A
0EF46:  MOVLB  0
0EF48:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0EF4C:  MOVFF  21C,B05
0EF50:  MOVFF  21B,B04
0EF54:  MOVFF  21A,B03
0EF58:  MOVFF  219,B02
0EF5C:  MOVLW  02
0EF5E:  MOVLB  B
0EF60:  MOVWF  x07
0EF62:  MOVLW  28
0EF64:  MOVWF  x06
0EF66:  CLRF   x09
0EF68:  MOVLW  01
0EF6A:  MOVWF  x08
0EF6C:  MOVLB  0
0EF6E:  CALL   397C
....................       output_high(flash_stream.cs_pin);
0EF72:  MOVFF  21B,B08
0EF76:  MOVLW  01
0EF78:  MOVLB  B
0EF7A:  MOVWF  x09
0EF7C:  MOVLW  0F
0EF7E:  MOVWF  x0B
0EF80:  MOVLW  89
0EF82:  MOVWF  x0A
0EF84:  MOVLB  0
0EF86:  CALL   280C
0EF8A:  MOVFF  21B,B08
0EF8E:  MOVLB  B
0EF90:  CLRF   x09
0EF92:  MOVLW  0F
0EF94:  MOVWF  x0B
0EF96:  MOVLW  92
0EF98:  MOVWF  x0A
0EF9A:  MOVLB  0
0EF9C:  CALL   280C
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
0EFA0:  MOVFF  21B,B08
0EFA4:  MOVLB  B
0EFA6:  CLRF   x09
0EFA8:  MOVLW  0F
0EFAA:  MOVWF  x0B
0EFAC:  MOVLW  89
0EFAE:  MOVWF  x0A
0EFB0:  MOVLB  0
0EFB2:  CALL   280C
0EFB6:  MOVFF  21B,B08
0EFBA:  MOVLB  B
0EFBC:  CLRF   x09
0EFBE:  MOVLW  0F
0EFC0:  MOVWF  x0B
0EFC2:  MOVLW  92
0EFC4:  MOVWF  x0A
0EFC6:  MOVLB  0
0EFC8:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
0EFCC:  MOVFF  21C,B05
0EFD0:  MOVFF  21B,B04
0EFD4:  MOVFF  21A,B03
0EFD8:  MOVFF  219,B02
0EFDC:  MOVLW  02
0EFDE:  MOVLB  B
0EFE0:  MOVWF  x07
0EFE2:  MOVLW  29
0EFE4:  MOVWF  x06
0EFE6:  CLRF   x09
0EFE8:  MOVLW  06
0EFEA:  MOVWF  x08
0EFEC:  MOVLB  0
0EFEE:  CALL   397C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0EFF2:  MOVLW  02
0EFF4:  MOVWF  00
0EFF6:  DECFSZ 00,F
0EFF8:  BRA    EFF6
0EFFA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0EFFC:  MOVFF  21B,B08
0F000:  MOVLW  01
0F002:  MOVLB  B
0F004:  MOVWF  x09
0F006:  MOVLW  0F
0F008:  MOVWF  x0B
0F00A:  MOVLW  89
0F00C:  MOVWF  x0A
0F00E:  MOVLB  0
0F010:  CALL   280C
0F014:  MOVFF  21B,B08
0F018:  MOVLB  B
0F01A:  CLRF   x09
0F01C:  MOVLW  0F
0F01E:  MOVWF  x0B
0F020:  MOVLW  92
0F022:  MOVWF  x0A
0F024:  MOVLB  0
0F026:  CALL   280C
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0F02A:  MOVLB  2
0F02C:  CLRF   x2F
0F02E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0F030:  MOVFF  21C,B05
0F034:  MOVFF  21B,B04
0F038:  MOVFF  21A,B03
0F03C:  MOVFF  219,B02
0F040:  CALL   3BE8
0F044:  MOVF   01,W
0F046:  ANDLW  01
0F048:  SUBLW  01
0F04A:  BTFSS  FD8.2
0F04C:  GOTO   F066
....................       delay_ms(1);   
0F050:  MOVLW  01
0F052:  MOVLB  B
0F054:  MOVWF  x02
0F056:  MOVLB  0
0F058:  CALL   2000
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
0F05C:  MOVLB  2
0F05E:  INCF   x2F,F
0F060:  MOVLB  0
0F062:  GOTO   F030
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
0F066:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03C88:  MOVLB  A
03C8A:  MOVF   xEB,F
03C8C:  BTFSC  FD8.2
03C8E:  BRA    3C96
03C90:  MOVLB  0
03C92:  GOTO   3E0A
03C96:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03C98:  MOVLW  06
03C9A:  MOVLB  A
03C9C:  MOVWF  xF6
03C9E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03CA0:  MOVLW  02
03CA2:  MOVLB  A
03CA4:  MOVWF  xF7
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03CA6:  MOVFF  AF0,B03
03CAA:  MOVFF  AF1,B04
03CAE:  MOVLB  B
03CB0:  CLRF   x05
03CB2:  CLRF   x06
03CB4:  MOVF   x03,W
03CB6:  MOVWF  00
03CB8:  CLRF   01
03CBA:  CLRF   02
03CBC:  CLRF   03
03CBE:  MOVFF  00,AF8
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03CC2:  MOVFF  AEF,B03
03CC6:  MOVFF  AF0,B04
03CCA:  MOVFF  AF1,B05
03CCE:  CLRF   x06
03CD0:  MOVF   x03,W
03CD2:  MOVWF  00
03CD4:  CLRF   01
03CD6:  CLRF   02
03CD8:  CLRF   03
03CDA:  MOVFF  00,AF9
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03CDE:  MOVLB  A
03CE0:  MOVF   xEE,W
03CE2:  MOVWF  00
03CE4:  CLRF   01
03CE6:  CLRF   02
03CE8:  CLRF   03
03CEA:  MOVFF  00,AFA
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03CEE:  MOVFF  AEC,B08
03CF2:  MOVLB  B
03CF4:  CLRF   x09
03CF6:  MOVLW  0F
03CF8:  MOVWF  x0B
03CFA:  MOVLW  89
03CFC:  MOVWF  x0A
03CFE:  MOVLB  0
03D00:  CALL   280C
03D04:  MOVFF  AEC,B08
03D08:  MOVLB  B
03D0A:  CLRF   x09
03D0C:  MOVLW  0F
03D0E:  MOVWF  x0B
03D10:  MOVLW  92
03D12:  MOVWF  x0A
03D14:  MOVLB  0
03D16:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03D1A:  MOVFF  AED,B05
03D1E:  MOVFF  AEC,B04
03D22:  MOVFF  AEB,B03
03D26:  MOVFF  AEA,B02
03D2A:  MOVLW  0A
03D2C:  MOVLB  B
03D2E:  MOVWF  x07
03D30:  MOVLW  F6
03D32:  MOVWF  x06
03D34:  CLRF   x09
03D36:  MOVLW  01
03D38:  MOVWF  x08
03D3A:  MOVLB  0
03D3C:  CALL   397C
....................       output_high(flash_stream.cs_pin);
03D40:  MOVFF  AEC,B08
03D44:  MOVLW  01
03D46:  MOVLB  B
03D48:  MOVWF  x09
03D4A:  MOVLW  0F
03D4C:  MOVWF  x0B
03D4E:  MOVLW  89
03D50:  MOVWF  x0A
03D52:  MOVLB  0
03D54:  CALL   280C
03D58:  MOVFF  AEC,B08
03D5C:  MOVLB  B
03D5E:  CLRF   x09
03D60:  MOVLW  0F
03D62:  MOVWF  x0B
03D64:  MOVLW  92
03D66:  MOVWF  x0A
03D68:  MOVLB  0
03D6A:  CALL   280C
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03D6E:  MOVFF  AEC,B08
03D72:  MOVLB  B
03D74:  CLRF   x09
03D76:  MOVLW  0F
03D78:  MOVWF  x0B
03D7A:  MOVLW  89
03D7C:  MOVWF  x0A
03D7E:  MOVLB  0
03D80:  CALL   280C
03D84:  MOVFF  AEC,B08
03D88:  MOVLB  B
03D8A:  CLRF   x09
03D8C:  MOVLW  0F
03D8E:  MOVWF  x0B
03D90:  MOVLW  92
03D92:  MOVWF  x0A
03D94:  MOVLB  0
03D96:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03D9A:  MOVFF  AED,B05
03D9E:  MOVFF  AEC,B04
03DA2:  MOVFF  AEB,B03
03DA6:  MOVFF  AEA,B02
03DAA:  MOVLW  0A
03DAC:  MOVLB  B
03DAE:  MOVWF  x07
03DB0:  MOVLW  F7
03DB2:  MOVWF  x06
03DB4:  MOVLW  04
03DB6:  MOVWF  x08
03DB8:  MOVFF  AF3,B0A
03DBC:  MOVFF  AF2,B09
03DC0:  MOVFF  AF5,B0C
03DC4:  MOVFF  AF4,B0B
03DC8:  MOVLB  0
03DCA:  CALL   3A6C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03DCE:  MOVLW  02
03DD0:  MOVWF  00
03DD2:  DECFSZ 00,F
03DD4:  BRA    3DD2
03DD6:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03DD8:  MOVFF  AEC,B08
03DDC:  MOVLW  01
03DDE:  MOVLB  B
03DE0:  MOVWF  x09
03DE2:  MOVLW  0F
03DE4:  MOVWF  x0B
03DE6:  MOVLW  89
03DE8:  MOVWF  x0A
03DEA:  MOVLB  0
03DEC:  CALL   280C
03DF0:  MOVFF  AEC,B08
03DF4:  MOVLB  B
03DF6:  CLRF   x09
03DF8:  MOVLW  0F
03DFA:  MOVWF  x0B
03DFC:  MOVLW  92
03DFE:  MOVWF  x0A
03E00:  MOVLB  0
03E02:  CALL   280C
....................    }
03E06:  GOTO   3FA2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03E0A:  MOVLB  A
03E0C:  DECFSZ xEB,W
03E0E:  BRA    3E14
03E10:  BRA    3E1A
03E12:  MOVLB  0
03E14:  MOVLB  0
03E16:  GOTO   3FA2
03E1A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03E1C:  MOVLW  06
03E1E:  MOVLB  A
03E20:  MOVWF  xFB
03E22:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03E24:  MOVLW  12
03E26:  MOVLB  A
03E28:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03E2A:  MOVFF  AF1,B03
03E2E:  MOVLB  B
03E30:  CLRF   x04
03E32:  CLRF   x05
03E34:  CLRF   x06
03E36:  MOVF   x03,W
03E38:  MOVWF  00
03E3A:  CLRF   01
03E3C:  CLRF   02
03E3E:  CLRF   03
03E40:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03E44:  MOVFF  AF0,B03
03E48:  MOVFF  AF1,B04
03E4C:  CLRF   x05
03E4E:  CLRF   x06
03E50:  MOVF   x03,W
03E52:  MOVWF  00
03E54:  CLRF   01
03E56:  CLRF   02
03E58:  CLRF   03
03E5A:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03E5E:  MOVFF  AEF,B03
03E62:  MOVFF  AF0,B04
03E66:  MOVFF  AF1,B05
03E6A:  CLRF   x06
03E6C:  MOVF   x03,W
03E6E:  MOVWF  00
03E70:  CLRF   01
03E72:  CLRF   02
03E74:  CLRF   03
03E76:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03E7A:  MOVLB  A
03E7C:  MOVF   xEE,W
03E7E:  MOVWF  00
03E80:  CLRF   01
03E82:  CLRF   02
03E84:  CLRF   03
03E86:  MOVFF  00,B00
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03E8A:  MOVFF  AEC,B08
03E8E:  MOVLB  B
03E90:  CLRF   x09
03E92:  MOVLW  0F
03E94:  MOVWF  x0B
03E96:  MOVLW  89
03E98:  MOVWF  x0A
03E9A:  MOVLB  0
03E9C:  CALL   280C
03EA0:  MOVFF  AEC,B08
03EA4:  MOVLB  B
03EA6:  CLRF   x09
03EA8:  MOVLW  0F
03EAA:  MOVWF  x0B
03EAC:  MOVLW  92
03EAE:  MOVWF  x0A
03EB0:  MOVLB  0
03EB2:  CALL   280C
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03EB6:  MOVFF  AED,B05
03EBA:  MOVFF  AEC,B04
03EBE:  MOVFF  AEB,B03
03EC2:  MOVFF  AEA,B02
03EC6:  MOVLW  0A
03EC8:  MOVLB  B
03ECA:  MOVWF  x07
03ECC:  MOVLW  FB
03ECE:  MOVWF  x06
03ED0:  CLRF   x09
03ED2:  MOVLW  01
03ED4:  MOVWF  x08
03ED6:  MOVLB  0
03ED8:  CALL   397C
....................       output_high(flash_stream.cs_pin);
03EDC:  MOVFF  AEC,B08
03EE0:  MOVLW  01
03EE2:  MOVLB  B
03EE4:  MOVWF  x09
03EE6:  MOVLW  0F
03EE8:  MOVWF  x0B
03EEA:  MOVLW  89
03EEC:  MOVWF  x0A
03EEE:  MOVLB  0
03EF0:  CALL   280C
03EF4:  MOVFF  AEC,B08
03EF8:  MOVLB  B
03EFA:  CLRF   x09
03EFC:  MOVLW  0F
03EFE:  MOVWF  x0B
03F00:  MOVLW  92
03F02:  MOVWF  x0A
03F04:  MOVLB  0
03F06:  CALL   280C
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03F0A:  MOVFF  AEC,B08
03F0E:  MOVLB  B
03F10:  CLRF   x09
03F12:  MOVLW  0F
03F14:  MOVWF  x0B
03F16:  MOVLW  89
03F18:  MOVWF  x0A
03F1A:  MOVLB  0
03F1C:  CALL   280C
03F20:  MOVFF  AEC,B08
03F24:  MOVLB  B
03F26:  CLRF   x09
03F28:  MOVLW  0F
03F2A:  MOVWF  x0B
03F2C:  MOVLW  92
03F2E:  MOVWF  x0A
03F30:  MOVLB  0
03F32:  CALL   280C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03F36:  MOVFF  AED,B05
03F3A:  MOVFF  AEC,B04
03F3E:  MOVFF  AEB,B03
03F42:  MOVFF  AEA,B02
03F46:  MOVLW  0A
03F48:  MOVLB  B
03F4A:  MOVWF  x07
03F4C:  MOVLW  FC
03F4E:  MOVWF  x06
03F50:  MOVLW  05
03F52:  MOVWF  x08
03F54:  MOVFF  AF3,B0A
03F58:  MOVFF  AF2,B09
03F5C:  MOVFF  AF5,B0C
03F60:  MOVFF  AF4,B0B
03F64:  MOVLB  0
03F66:  CALL   3A6C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03F6A:  MOVLW  02
03F6C:  MOVWF  00
03F6E:  DECFSZ 00,F
03F70:  BRA    3F6E
03F72:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03F74:  MOVFF  AEC,B08
03F78:  MOVLW  01
03F7A:  MOVLB  B
03F7C:  MOVWF  x09
03F7E:  MOVLW  0F
03F80:  MOVWF  x0B
03F82:  MOVLW  89
03F84:  MOVWF  x0A
03F86:  MOVLB  0
03F88:  CALL   280C
03F8C:  MOVFF  AEC,B08
03F90:  MOVLB  B
03F92:  CLRF   x09
03F94:  MOVLW  0F
03F96:  MOVWF  x0B
03F98:  MOVLW  92
03F9A:  MOVWF  x0A
03F9C:  MOVLB  0
03F9E:  CALL   280C
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03FA2:  MOVLB  B
03FA4:  CLRF   x01
03FA6:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03FA8:  MOVFF  AED,B05
03FAC:  MOVFF  AEC,B04
03FB0:  MOVFF  AEB,B03
03FB4:  MOVFF  AEA,B02
03FB8:  CALL   3BE8
03FBC:  MOVF   01,W
03FBE:  ANDLW  01
03FC0:  SUBLW  01
03FC2:  BTFSS  FD8.2
03FC4:  GOTO   3FDE
....................       delay_ms(1);
03FC8:  MOVLW  01
03FCA:  MOVLB  B
03FCC:  MOVWF  x02
03FCE:  MOVLB  0
03FD0:  CALL   2000
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
03FD4:  MOVLB  B
03FD6:  INCF   x01,F
03FD8:  MOVLB  0
03FDA:  GOTO   3FA8
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03FDE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02B54:  MOVLW  9F
02B56:  MOVLB  2
02B58:  MOVWF  x4F
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02B5A:  MOVFF  239,B08
02B5E:  MOVLB  B
02B60:  CLRF   x09
02B62:  MOVLW  0F
02B64:  MOVWF  x0B
02B66:  MOVLW  89
02B68:  MOVWF  x0A
02B6A:  MOVLB  0
02B6C:  CALL   280C
02B70:  MOVFF  239,B08
02B74:  MOVLB  B
02B76:  CLRF   x09
02B78:  MOVLW  0F
02B7A:  MOVWF  x0B
02B7C:  MOVLW  92
02B7E:  MOVWF  x0A
02B80:  MOVLB  0
02B82:  CALL   280C
....................    delay_us(10);  
02B86:  MOVLW  0D
02B88:  MOVWF  00
02B8A:  DECFSZ 00,F
02B8C:  BRA    2B8A
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02B8E:  MOVFF  23A,B0B
02B92:  MOVFF  239,B0A
02B96:  MOVFF  238,B09
02B9A:  MOVFF  237,B08
02B9E:  MOVLW  02
02BA0:  MOVLB  B
02BA2:  MOVWF  x0D
02BA4:  MOVLW  4F
02BA6:  MOVWF  x0C
02BA8:  CLRF   x0F
02BAA:  MOVLW  01
02BAC:  MOVWF  x0E
02BAE:  MOVLW  02
02BB0:  MOVWF  x11
02BB2:  MOVLW  3B
02BB4:  MOVWF  x10
02BB6:  CLRF   x15
02BB8:  CLRF   x14
02BBA:  CLRF   x13
02BBC:  MOVLW  14
02BBE:  MOVWF  x12
02BC0:  MOVLB  0
02BC2:  CALL   2920
....................    output_high(flash_stream.cs_pin);
02BC6:  MOVFF  239,B08
02BCA:  MOVLW  01
02BCC:  MOVLB  B
02BCE:  MOVWF  x09
02BD0:  MOVLW  0F
02BD2:  MOVWF  x0B
02BD4:  MOVLW  89
02BD6:  MOVWF  x0A
02BD8:  MOVLB  0
02BDA:  CALL   280C
02BDE:  MOVFF  239,B08
02BE2:  MOVLB  B
02BE4:  CLRF   x09
02BE6:  MOVLW  0F
02BE8:  MOVWF  x0B
02BEA:  MOVLW  92
02BEC:  MOVWF  x0A
02BEE:  MOVLB  0
02BF0:  CALL   280C
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02BF4:  MOVLB  2
02BF6:  MOVF   x3B,W
02BF8:  SUBLW  20
02BFA:  BTFSC  FD8.2
02BFC:  BRA    2C04
02BFE:  MOVLB  0
02C00:  GOTO   2C12
02C04:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02C06:  MOVLW  01
02C08:  MOVWF  01
02C0A:  GOTO   2C1A
....................    }
02C0E:  GOTO   2C1A
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02C12:  MOVLW  00
02C14:  MOVWF  01
02C16:  GOTO   2C1A
....................    }
02C1A:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02E3C:  MOVLB  A
02E3E:  MOVF   xEC,F
02E40:  BTFSC  FD8.2
02E42:  BRA    2E4A
02E44:  MOVLB  0
02E46:  GOTO   2E54
02E4A:  MOVLB  0
02E4C:  MOVLW  00
02E4E:  MOVWF  01
02E50:  GOTO   2EA6
.................... 
....................    unsigned int8 crc = *frame++;
02E54:  MOVLB  A
02E56:  MOVF   xEB,W
02E58:  MOVWF  03
02E5A:  MOVF   xEA,W
02E5C:  INCF   xEA,F
02E5E:  BTFSC  FD8.2
02E60:  INCF   xEB,F
02E62:  MOVWF  FE9
02E64:  MOVFF  03,FEA
02E68:  MOVFF  FEF,AED
02E6C:  MOVLB  0
....................    while (--payload_size > 0)
02E6E:  MOVLB  A
02E70:  DECF   xEC,F
02E72:  MOVF   xEC,F
02E74:  BTFSS  FD8.2
02E76:  BRA    2E7E
02E78:  MOVLB  0
02E7A:  GOTO   2E9E
02E7E:  MOVLB  0
....................       crc ^= *frame++;
02E80:  MOVLB  A
02E82:  MOVF   xEB,W
02E84:  MOVWF  03
02E86:  MOVF   xEA,W
02E88:  INCF   xEA,F
02E8A:  BTFSC  FD8.2
02E8C:  INCF   xEB,F
02E8E:  MOVWF  FE9
02E90:  MOVFF  03,FEA
02E94:  MOVF   FEF,W
02E96:  XORWF  xED,F
02E98:  MOVLB  0
02E9A:  GOTO   2E6E
.................... 
....................    return crc;
02E9E:  MOVLB  A
02EA0:  MOVF   xED,W
02EA2:  MOVWF  01
02EA4:  MOVLB  0
02EA6:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A584:  MOVLW  98
0A586:  MOVWF  FF6
0A588:  MOVLW  03
0A58A:  MOVWF  FF7
0A58C:  MOVLW  00
0A58E:  MOVWF  FF8
0A590:  CALL   202E
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A594:  MOVLW  01
0A596:  MOVLB  1
0A598:  ADDWF  x11,W
0A59A:  ANDLW  0F
0A59C:  MOVWF  xE1
.................... 
....................    if(next_tail == flash_queue.head_index)
0A59E:  MOVF   x10,W
0A5A0:  SUBWF  xE1,W
0A5A2:  BTFSC  FD8.2
0A5A4:  BRA    A5AC
0A5A6:  MOVLB  0
0A5A8:  GOTO   A5C2
0A5AC:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A5AE:  MOVLW  B2
0A5B0:  MOVWF  FF6
0A5B2:  MOVLW  03
0A5B4:  MOVWF  FF7
0A5B6:  MOVLW  00
0A5B8:  MOVWF  FF8
0A5BA:  CALL   202E
0A5BE:  GOTO   A7E2
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A5C2:  MOVLB  1
0A5C4:  MOVF   x11,W
0A5C6:  MULLW  0C
0A5C8:  MOVF   FF3,W
0A5CA:  CLRF   xE3
0A5CC:  MOVWF  xE2
0A5CE:  MOVLW  50
0A5D0:  ADDWF  xE2,W
0A5D2:  MOVWF  01
0A5D4:  MOVLW  00
0A5D6:  ADDWFC xE3,W
0A5D8:  MOVWF  03
0A5DA:  MOVF   01,W
0A5DC:  MOVWF  xE4
0A5DE:  MOVFF  03,1E5
0A5E2:  MOVF   xDF,W
0A5E4:  MOVWF  FE9
0A5E6:  MOVF   xE0,W
0A5E8:  MOVWF  FEA
0A5EA:  MOVF   FEF,W
0A5EC:  MOVWF  xE6
0A5EE:  MOVFF  1E5,FEA
0A5F2:  MOVFF  1E4,FE9
0A5F6:  MOVFF  1E6,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A5FA:  MOVF   x11,W
0A5FC:  MULLW  0C
0A5FE:  MOVF   FF3,W
0A600:  CLRF   xE3
0A602:  MOVWF  xE2
0A604:  MOVLW  01
0A606:  ADDWF  xE2,W
0A608:  MOVWF  01
0A60A:  MOVLW  00
0A60C:  ADDWFC xE3,W
0A60E:  MOVWF  03
0A610:  MOVF   01,W
0A612:  ADDLW  50
0A614:  MOVWF  01
0A616:  MOVLW  00
0A618:  ADDWFC 03,F
0A61A:  MOVF   01,W
0A61C:  MOVWF  xE2
0A61E:  MOVFF  03,1E3
0A622:  MOVLW  01
0A624:  ADDWF  xDF,W
0A626:  MOVWF  FE9
0A628:  MOVLW  00
0A62A:  ADDWFC xE0,W
0A62C:  MOVWF  FEA
0A62E:  MOVF   FEF,W
0A630:  MOVWF  xE4
0A632:  MOVFF  1E3,FEA
0A636:  MOVFF  1E2,FE9
0A63A:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A63E:  MOVF   x11,W
0A640:  MULLW  0C
0A642:  MOVF   FF3,W
0A644:  CLRF   xE3
0A646:  MOVWF  xE2
0A648:  MOVLW  02
0A64A:  ADDWF  xE2,W
0A64C:  MOVWF  01
0A64E:  MOVLW  00
0A650:  ADDWFC xE3,W
0A652:  MOVWF  03
0A654:  MOVF   01,W
0A656:  ADDLW  50
0A658:  MOVWF  01
0A65A:  MOVLW  00
0A65C:  ADDWFC 03,F
0A65E:  MOVF   01,W
0A660:  MOVWF  xE2
0A662:  MOVFF  03,1E3
0A666:  MOVLW  02
0A668:  ADDWF  xDF,W
0A66A:  MOVWF  FE9
0A66C:  MOVLW  00
0A66E:  ADDWFC xE0,W
0A670:  MOVWF  FEA
0A672:  MOVF   FEF,W
0A674:  MOVWF  xE4
0A676:  MOVFF  1E3,FEA
0A67A:  MOVFF  1E2,FE9
0A67E:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A682:  MOVF   x11,W
0A684:  MULLW  0C
0A686:  MOVF   FF3,W
0A688:  CLRF   xE3
0A68A:  MOVWF  xE2
0A68C:  MOVLW  03
0A68E:  ADDWF  xE2,W
0A690:  MOVWF  01
0A692:  MOVLW  00
0A694:  ADDWFC xE3,W
0A696:  MOVWF  03
0A698:  MOVF   01,W
0A69A:  ADDLW  50
0A69C:  MOVWF  01
0A69E:  MOVLW  00
0A6A0:  ADDWFC 03,F
0A6A2:  MOVF   01,W
0A6A4:  MOVWF  xE2
0A6A6:  MOVFF  03,1E3
0A6AA:  MOVLW  03
0A6AC:  ADDWF  xDF,W
0A6AE:  MOVWF  01
0A6B0:  MOVLW  00
0A6B2:  ADDWFC xE0,W
0A6B4:  MOVWF  03
0A6B6:  MOVF   01,W
0A6B8:  MOVWF  FE9
0A6BA:  MOVFF  03,FEA
0A6BE:  MOVLW  00
0A6C0:  BTFSC  FEF.0
0A6C2:  MOVLW  01
0A6C4:  MOVWF  01
0A6C6:  BTFSS  01.0
0A6C8:  BRA    A6D0
0A6CA:  MOVLB  0
0A6CC:  GOTO   A6E0
0A6D0:  MOVLB  0
0A6D2:  MOVFF  1E3,FEA
0A6D6:  MOVFF  1E2,FE9
0A6DA:  BCF    FEF.0
0A6DC:  GOTO   A6EA
0A6E0:  MOVFF  1E3,FEA
0A6E4:  MOVFF  1E2,FE9
0A6E8:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A6EA:  MOVLB  1
0A6EC:  MOVF   x11,W
0A6EE:  MULLW  0C
0A6F0:  MOVF   FF3,W
0A6F2:  CLRF   xE3
0A6F4:  MOVWF  xE2
0A6F6:  MOVLW  04
0A6F8:  ADDWF  xE2,W
0A6FA:  MOVWF  01
0A6FC:  MOVLW  00
0A6FE:  ADDWFC xE3,W
0A700:  MOVWF  03
0A702:  MOVF   01,W
0A704:  ADDLW  50
0A706:  MOVWF  01
0A708:  MOVLW  00
0A70A:  ADDWFC 03,F
0A70C:  MOVF   01,W
0A70E:  MOVWF  xE2
0A710:  MOVFF  03,1E3
0A714:  MOVLW  04
0A716:  ADDWF  xDF,W
0A718:  MOVWF  FE9
0A71A:  MOVLW  00
0A71C:  ADDWFC xE0,W
0A71E:  MOVWF  FEA
0A720:  MOVFF  FEF,00
0A724:  MOVFF  FEC,01
0A728:  MOVFF  FEC,02
0A72C:  MOVFF  FEC,03
0A730:  MOVF   FED,F
0A732:  MOVF   FED,F
0A734:  MOVF   FED,F
0A736:  MOVFF  03,1E7
0A73A:  MOVFF  02,1E6
0A73E:  MOVFF  01,1E5
0A742:  MOVFF  00,1E4
0A746:  MOVFF  1E3,FEA
0A74A:  MOVFF  1E2,FE9
0A74E:  MOVFF  1E4,FEF
0A752:  MOVFF  1E5,FEC
0A756:  MOVFF  1E6,FEC
0A75A:  MOVFF  1E7,FEC
0A75E:  MOVF   FED,F
0A760:  MOVF   FED,F
0A762:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0A764:  MOVF   x11,W
0A766:  MULLW  0C
0A768:  MOVF   FF3,W
0A76A:  CLRF   xE3
0A76C:  MOVWF  xE2
0A76E:  MOVLW  08
0A770:  ADDWF  xE2,W
0A772:  MOVWF  01
0A774:  MOVLW  00
0A776:  ADDWFC xE3,W
0A778:  MOVWF  03
0A77A:  MOVF   01,W
0A77C:  ADDLW  50
0A77E:  MOVWF  01
0A780:  MOVLW  00
0A782:  ADDWFC 03,F
0A784:  MOVF   01,W
0A786:  MOVWF  xE2
0A788:  MOVFF  03,1E3
0A78C:  MOVLW  08
0A78E:  ADDWF  xDF,W
0A790:  MOVWF  FE9
0A792:  MOVLW  00
0A794:  ADDWFC xE0,W
0A796:  MOVWF  FEA
0A798:  MOVFF  FEF,00
0A79C:  MOVFF  FEC,01
0A7A0:  MOVFF  FEC,02
0A7A4:  MOVFF  FEC,03
0A7A8:  MOVF   FED,F
0A7AA:  MOVF   FED,F
0A7AC:  MOVF   FED,F
0A7AE:  MOVFF  03,1E7
0A7B2:  MOVFF  02,1E6
0A7B6:  MOVFF  01,1E5
0A7BA:  MOVFF  00,1E4
0A7BE:  MOVFF  1E3,FEA
0A7C2:  MOVFF  1E2,FE9
0A7C6:  MOVFF  1E4,FEF
0A7CA:  MOVFF  1E5,FEC
0A7CE:  MOVFF  1E6,FEC
0A7D2:  MOVFF  1E7,FEC
0A7D6:  MOVF   FED,F
0A7D8:  MOVF   FED,F
0A7DA:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0A7DC:  MOVFF  1E1,111
0A7E0:  MOVLB  0
....................    }
0A7E2:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0EA0C:  MOVLB  1
0EA0E:  MOVF   x11,W
0EA10:  SUBWF  x10,W
0EA12:  BTFSC  FD8.2
0EA14:  BRA    EA1C
0EA16:  MOVLB  0
0EA18:  GOTO   EA3E
0EA1C:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0EA1E:  MOVLW  CC
0EA20:  MOVWF  FF6
0EA22:  MOVLW  03
0EA24:  MOVWF  FF7
0EA26:  MOVLW  00
0EA28:  MOVWF  FF8
0EA2A:  CALL   202E
....................       return 0x00;
0EA2E:  MOVLW  00
0EA30:  MOVWF  01
0EA32:  MOVLW  00
0EA34:  MOVWF  02
0EA36:  GOTO   EA6A
....................    }
0EA3A:  GOTO   EA6A
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0EA3E:  MOVFF  110,1A1
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0EA42:  MOVLW  01
0EA44:  MOVLB  1
0EA46:  ADDWF  x10,W
0EA48:  ANDLW  0F
0EA4A:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0EA4C:  MOVF   xA1,W
0EA4E:  MULLW  0C
0EA50:  MOVF   FF3,W
0EA52:  CLRF   03
0EA54:  ADDLW  50
0EA56:  MOVWF  01
0EA58:  MOVLW  00
0EA5A:  ADDWFC 03,F
0EA5C:  MOVF   01,W
0EA5E:  MOVWF  01
0EA60:  MOVF   03,W
0EA62:  MOVWF  02
0EA64:  MOVLB  0
0EA66:  GOTO   EA6A
....................    }
0EA6A:  GOTO   10FC8 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0E930:  MOVLB  1
0E932:  MOVF   x11,W
0E934:  SUBWF  x10,W
0E936:  BTFSS  FD8.2
0E938:  BRA    E940
0E93A:  MOVLB  0
0E93C:  GOTO   E948
0E940:  MOVLB  0
0E942:  MOVLW  00
0E944:  GOTO   E94A
0E948:  MOVLW  01
0E94A:  MOVWF  01
0E94C:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
10000:  MOVLB  2
10002:  CLRF   x0B
10004:  CLRF   x0C
10006:  CLRF   x0D
10008:  CLRF   x0E
1000A:  CLRF   x0F
1000C:  CLRF   x10
1000E:  CLRF   x11
10010:  CLRF   x12
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
10012:  MOVF   x0A,F
10014:  BTFSC  FD8.2
10016:  BRA    1001E
10018:  MOVLB  0
1001A:  GOTO   10042
1001E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
10020:  MOVLW  06
10022:  MOVLB  2
10024:  MOVWF  x0E
10026:  MOVLW  AA
10028:  MOVWF  x0D
1002A:  CLRF   x0C
1002C:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
1002E:  MOVLW  06
10030:  MOVWF  x12
10032:  MOVLW  AA
10034:  MOVWF  x11
10036:  MOVLW  0F
10038:  MOVWF  x10
1003A:  SETF   x0F
1003C:  MOVLB  0
....................    }
1003E:  GOTO   1017E
....................    else if (mission_id == CIGS_PICLOG_DATA)
10042:  MOVLB  2
10044:  DECFSZ x0A,W
10046:  BRA    1004C
10048:  BRA    10052
1004A:  MOVLB  0
1004C:  MOVLB  0
1004E:  GOTO   10078
10052:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
10054:  MOVLW  06
10056:  MOVLB  2
10058:  MOVWF  x0E
1005A:  MOVLW  AA
1005C:  MOVWF  x0D
1005E:  MOVLW  10
10060:  MOVWF  x0C
10062:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
10064:  MOVLW  06
10066:  MOVWF  x12
10068:  MOVLW  AB
1006A:  MOVWF  x11
1006C:  MOVLW  0F
1006E:  MOVWF  x10
10070:  SETF   x0F
10072:  MOVLB  0
....................    }
10074:  GOTO   1017E
....................    else if (mission_id == CIGS_ENVIRO_DATA)
10078:  MOVLB  2
1007A:  MOVF   x0A,W
1007C:  SUBLW  02
1007E:  BTFSC  FD8.2
10080:  BRA    10088
10082:  MOVLB  0
10084:  GOTO   100AE
10088:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
1008A:  MOVLW  06
1008C:  MOVLB  2
1008E:  MOVWF  x0E
10090:  MOVLW  AA
10092:  MOVWF  x0D
10094:  MOVLW  10
10096:  MOVWF  x0C
10098:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
1009A:  MOVLW  06
1009C:  MOVWF  x12
1009E:  MOVLW  AB
100A0:  MOVWF  x11
100A2:  MOVLW  0F
100A4:  MOVWF  x10
100A6:  SETF   x0F
100A8:  MOVLB  0
....................    }
100AA:  GOTO   1017E
....................    else if (mission_id == CIGS_IV1_HEADER)
100AE:  MOVLB  2
100B0:  MOVF   x0A,W
100B2:  SUBLW  03
100B4:  BTFSC  FD8.2
100B6:  BRA    100BE
100B8:  MOVLB  0
100BA:  GOTO   100E4
100BE:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
100C0:  MOVLW  06
100C2:  MOVLB  2
100C4:  MOVWF  x0E
100C6:  MOVLW  B5
100C8:  MOVWF  x0D
100CA:  MOVLW  10
100CC:  MOVWF  x0C
100CE:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
100D0:  MOVLW  06
100D2:  MOVWF  x12
100D4:  MOVLW  BF
100D6:  MOVWF  x11
100D8:  MOVLW  0F
100DA:  MOVWF  x10
100DC:  SETF   x0F
100DE:  MOVLB  0
....................    }
100E0:  GOTO   1017E
....................    else if (mission_id == CIGS_IV1_DATA)
100E4:  MOVLB  2
100E6:  MOVF   x0A,W
100E8:  SUBLW  04
100EA:  BTFSC  FD8.2
100EC:  BRA    100F4
100EE:  MOVLB  0
100F0:  GOTO   10118
100F4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
100F6:  MOVLW  06
100F8:  MOVLB  2
100FA:  MOVWF  x0E
100FC:  MOVLW  BF
100FE:  MOVWF  x0D
10100:  MOVLW  10
10102:  MOVWF  x0C
10104:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
10106:  MOVLW  06
10108:  MOVWF  x12
1010A:  SETF   x11
1010C:  MOVLW  0F
1010E:  MOVWF  x10
10110:  SETF   x0F
10112:  MOVLB  0
....................    }
10114:  GOTO   1017E
....................       else if (mission_id == CIGS_IV2_HEADER)
10118:  MOVLB  2
1011A:  MOVF   x0A,W
1011C:  SUBLW  05
1011E:  BTFSC  FD8.2
10120:  BRA    10128
10122:  MOVLB  0
10124:  GOTO   1014C
10128:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
1012A:  MOVLW  06
1012C:  MOVLB  2
1012E:  MOVWF  x0E
10130:  SETF   x0D
10132:  MOVLW  10
10134:  MOVWF  x0C
10136:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
10138:  MOVLW  07
1013A:  MOVWF  x12
1013C:  MOVLW  09
1013E:  MOVWF  x11
10140:  MOVLW  0F
10142:  MOVWF  x10
10144:  SETF   x0F
10146:  MOVLB  0
....................    }
10148:  GOTO   1017E
....................    else if (mission_id == CIGS_IV2_DATA)
1014C:  MOVLB  2
1014E:  MOVF   x0A,W
10150:  SUBLW  06
10152:  BTFSC  FD8.2
10154:  BRA    1015C
10156:  MOVLB  0
10158:  GOTO   1017E
1015C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
1015E:  MOVLW  07
10160:  MOVLB  2
10162:  MOVWF  x0E
10164:  MOVLW  09
10166:  MOVWF  x0D
10168:  MOVLW  10
1016A:  MOVWF  x0C
1016C:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
1016E:  MOVLW  07
10170:  MOVWF  x12
10172:  MOVLW  49
10174:  MOVWF  x11
10176:  MOVLW  0F
10178:  MOVWF  x10
1017A:  SETF   x0F
1017C:  MOVLB  0
....................    }
....................    return mis_struct;
1017E:  MOVLW  0B
10180:  MOVWF  01
10182:  MOVLW  02
10184:  MOVWF  02
10186:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
052B2:  MOVLB  1
052B4:  CLRF   xA2
052B6:  CLRF   xA3
052B8:  CLRF   xA4
052BA:  CLRF   xA5
052BC:  CLRF   xA6
052BE:  CLRF   xA7
052C0:  CLRF   xA8
052C2:  CLRF   xA9
052C4:  CLRF   xAA
052C6:  CLRF   xAB
052C8:  CLRF   xAC
052CA:  CLRF   xAD
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
052CC:  MOVLW  E4
052CE:  MOVWF  FF6
052D0:  MOVLW  03
052D2:  MOVWF  FF7
052D4:  MOVLW  00
052D6:  MOVWF  FF8
052D8:  MOVLB  0
052DA:  CALL   202E
....................    fprintf(PC, "\t[BOSS] >>> ");
052DE:  MOVLW  04
052E0:  MOVWF  FF6
052E2:  MOVLW  04
052E4:  MOVWF  FF7
052E6:  MOVLW  00
052E8:  MOVWF  FF8
052EA:  CALL   202E
....................    for (int8 i = 0; i < receive_signal_size; i++)
052EE:  MOVLB  1
052F0:  CLRF   xAE
052F2:  MOVLB  0
052F4:  MOVLB  1
052F6:  MOVF   xA1,W
052F8:  SUBWF  xAE,W
052FA:  BTFSS  FD8.0
052FC:  BRA    5304
052FE:  MOVLB  0
05300:  GOTO   5340
05304:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
05306:  MOVLB  1
05308:  MOVF   xAE,W
0530A:  ADDWF  x9F,W
0530C:  MOVWF  FE9
0530E:  MOVLW  00
05310:  ADDWFC xA0,W
05312:  MOVWF  FEA
05314:  MOVFF  FEF,1B5
05318:  MOVFF  1B5,9E8
0531C:  MOVLW  37
0531E:  MOVLB  9
05320:  MOVWF  xE9
05322:  MOVLB  0
05324:  CALL   2294
05328:  MOVLW  20
0532A:  BTFSS  FA6.6
0532C:  GOTO   532A
05330:  MOVLB  E
05332:  MOVWF  xF9
05334:  MOVLB  0
05336:  MOVLB  1
05338:  INCF   xAE,F
0533A:  MOVLB  0
0533C:  GOTO   52F4
....................    fprintf(PC, "\r\n");
05340:  MOVLW  0D
05342:  BTFSS  FA6.6
05344:  GOTO   5342
05348:  MOVLB  E
0534A:  MOVWF  xF9
0534C:  MOVLW  0A
0534E:  MOVLB  0
05350:  BTFSS  FA6.6
05352:  GOTO   5350
05356:  MOVLB  E
05358:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
0535A:  MOVFF  1A0,1B6
0535E:  MOVFF  19F,1B5
05362:  MOVFF  1A1,1B7
05366:  MOVLB  0
05368:  GOTO   4F9A
0536C:  MOVFF  01,1AF
....................    if (frame_start_position == -1)
05370:  MOVLB  1
05372:  MOVF   xAF,W
05374:  SUBLW  FF
05376:  BTFSC  FD8.2
05378:  BRA    5380
0537A:  MOVLB  0
0537C:  GOTO   538E
05380:  MOVLB  0
....................       return command;
05382:  MOVLW  A2
05384:  MOVWF  01
05386:  MOVLW  01
05388:  MOVWF  02
0538A:  GOTO   54B0
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0538E:  MOVLB  1
05390:  MOVF   xAF,W
05392:  ADDWF  x9F,W
05394:  MOVWF  01
05396:  MOVLW  00
05398:  ADDWFC xA0,W
0539A:  MOVWF  03
0539C:  MOVF   01,W
0539E:  MOVWF  xB0
053A0:  MOVFF  03,1B1
053A4:  MOVF   xB0,W
053A6:  MOVWF  FE9
053A8:  MOVF   xB1,W
053AA:  MOVWF  FEA
053AC:  MOVF   FEF,W
053AE:  ANDLW  0F
053B0:  MOVWF  xB2
053B2:  MOVFF  1B2,1B5
053B6:  MOVLB  0
053B8:  GOTO   5042
053BC:  MOVFF  01,1B3
....................    if (content_size == -1)
053C0:  MOVLB  1
053C2:  MOVF   xB3,W
053C4:  SUBLW  FF
053C6:  BTFSC  FD8.2
053C8:  BRA    53D0
053CA:  MOVLB  0
053CC:  GOTO   53DE
053D0:  MOVLB  0
....................       return command;
053D2:  MOVLW  A2
053D4:  MOVWF  01
053D6:  MOVLW  01
053D8:  MOVWF  02
053DA:  GOTO   54B0
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
053DE:  MOVLB  1
053E0:  MOVF   xAF,W
053E2:  SUBWF  xA1,W
053E4:  MOVWF  xB4
....................    
....................    if (!check_crc(frame, receive_frame_size))
053E6:  MOVFF  1B1,1B6
053EA:  MOVFF  1B0,1B5
053EE:  MOVFF  1B4,1B7
053F2:  MOVLB  0
053F4:  GOTO   5102
053F8:  MOVF   01,F
053FA:  BTFSS  FD8.2
053FC:  GOTO   540C
....................       return command;
05400:  MOVLW  A2
05402:  MOVWF  01
05404:  MOVLW  01
05406:  MOVWF  02
05408:  GOTO   54B0
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
0540C:  MOVLB  1
0540E:  MOVF   xB0,W
05410:  MOVWF  FE9
05412:  MOVF   xB1,W
05414:  MOVWF  FEA
05416:  MOVF   FEF,W
05418:  ANDLW  F0
0541A:  MOVWF  00
0541C:  SWAPF  00,W
0541E:  MOVWF  xB5
05420:  MOVLW  0F
05422:  ANDWF  xB5,F
05424:  MOVFF  1B5,1B6
05428:  MOVLB  0
0542A:  GOTO   51F2
0542E:  MOVF   01,F
05430:  BTFSS  FD8.2
05432:  GOTO   5442
....................       return command;
05436:  MOVLW  A2
05438:  MOVWF  01
0543A:  MOVLW  01
0543C:  MOVWF  02
0543E:  GOTO   54B0
.................... 
....................    command.frame_id = frame_id;
05442:  MOVFF  1B2,1A2
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
05446:  MOVLW  01
05448:  MOVLB  1
0544A:  ADDWF  xB0,W
0544C:  MOVWF  01
0544E:  MOVLW  00
05450:  ADDWFC xB1,W
05452:  MOVWF  03
05454:  MOVF   01,W
05456:  MOVWF  xB5
05458:  MOVFF  03,1B6
0545C:  MOVLW  02
0545E:  SUBWF  xB4,W
05460:  MOVWF  xB7
05462:  MOVLW  01
05464:  MOVWF  FEA
05466:  MOVLW  A5
05468:  MOVWF  FE9
0546A:  MOVFF  1B6,FE2
0546E:  MOVFF  1B5,FE1
05472:  MOVF   xB7,W
05474:  MOVWF  01
05476:  BTFSS  FD8.2
05478:  BRA    5480
0547A:  MOVLB  0
0547C:  GOTO   548C
05480:  MOVLB  0
05482:  MOVFF  FE6,FEE
05486:  DECFSZ 01,F
05488:  GOTO   5482
....................    command.size = receive_frame_size-2;
0548C:  MOVLW  02
0548E:  MOVLB  1
05490:  SUBWF  xB4,W
05492:  MOVWF  xA3
....................    command.is_exist = TRUE;
05494:  BSF    xA4.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05496:  MOVLW  12
05498:  MOVWF  FF6
0549A:  MOVLW  04
0549C:  MOVWF  FF7
0549E:  MOVLW  00
054A0:  MOVWF  FF8
054A2:  MOVLB  0
054A4:  CALL   202E
....................    return command;
054A8:  MOVLW  A2
054AA:  MOVWF  01
054AC:  MOVLW  01
054AE:  MOVWF  02
054B0:  GOTO   11AAC (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04F9A:  MOVLB  1
04F9C:  CLRF   xB8
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04F9E:  CLRF   xB8
04FA0:  MOVLB  0
04FA2:  MOVLW  01
04FA4:  MOVLB  1
04FA6:  SUBWF  xB7,W
04FA8:  SUBWF  xB8,W
04FAA:  BTFSS  FD8.0
04FAC:  BRA    4FB4
04FAE:  MOVLB  0
04FB0:  GOTO   4FEC
04FB4:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04FB6:  MOVLB  1
04FB8:  MOVF   xB8,W
04FBA:  ADDWF  xB5,W
04FBC:  MOVWF  FE9
04FBE:  MOVLW  00
04FC0:  ADDWFC xB6,W
04FC2:  MOVWF  FEA
04FC4:  MOVF   FEF,W
04FC6:  SUBLW  AA
04FC8:  BTFSC  FD8.2
04FCA:  BRA    4FD2
04FCC:  MOVLB  0
04FCE:  GOTO   4FE2
04FD2:  MOVLB  0
....................          return i+1;
04FD4:  MOVLW  01
04FD6:  MOVLB  1
04FD8:  ADDWF  xB8,W
04FDA:  MOVWF  01
04FDC:  MOVLB  0
04FDE:  GOTO   503E
04FE2:  MOVLB  1
04FE4:  INCF   xB8,F
04FE6:  MOVLB  0
04FE8:  GOTO   4FA2
....................    if (receive_signal[i] == SFD)
04FEC:  MOVLB  1
04FEE:  MOVF   xB8,W
04FF0:  ADDWF  xB5,W
04FF2:  MOVWF  FE9
04FF4:  MOVLW  00
04FF6:  ADDWFC xB6,W
04FF8:  MOVWF  FEA
04FFA:  MOVF   FEF,W
04FFC:  SUBLW  AA
04FFE:  BTFSC  FD8.2
05000:  BRA    5008
05002:  MOVLB  0
05004:  GOTO   5026
05008:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
0500A:  MOVLW  2E
0500C:  MOVWF  FF6
0500E:  MOVLW  04
05010:  MOVWF  FF7
05012:  MOVLW  00
05014:  MOVWF  FF8
05016:  CALL   202E
....................       return -1;
0501A:  MOVLW  FF
0501C:  MOVWF  01
0501E:  GOTO   503E
....................    }
05022:  GOTO   503E
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
05026:  MOVLW  44
05028:  MOVWF  FF6
0502A:  MOVLW  04
0502C:  MOVWF  FF7
0502E:  MOVLW  00
05030:  MOVWF  FF8
05032:  CALL   202E
....................       return -1;
05036:  MOVLW  FF
05038:  MOVWF  01
0503A:  GOTO   503E
....................    }
0503E:  GOTO   536C (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
05042:  MOVLB  1
05044:  CLRF   xB6
05046:  MOVLB  0
05048:  MOVLB  1
0504A:  MOVF   xB6,W
0504C:  SUBLW  03
0504E:  BTFSC  FD8.0
05050:  BRA    5058
05052:  MOVLB  0
05054:  GOTO   50B6
05058:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
0505A:  BCF    FD8.0
0505C:  MOVLB  1
0505E:  RLCF   xB6,W
05060:  CLRF   xB8
05062:  MOVWF  xB7
05064:  MOVLW  1A
05066:  ADDWF  xB7,W
05068:  MOVWF  FE9
0506A:  MOVLW  01
0506C:  ADDWFC xB8,W
0506E:  MOVWF  FEA
05070:  MOVF   FEF,W
05072:  SUBWF  xB5,W
05074:  BTFSC  FD8.2
05076:  BRA    507E
05078:  MOVLB  0
0507A:  GOTO   50AC
0507E:  MOVLB  0
....................          return frame_ids[i].length;
05080:  BCF    FD8.0
05082:  MOVLB  1
05084:  RLCF   xB6,W
05086:  CLRF   xB8
05088:  MOVWF  xB7
0508A:  MOVLW  01
0508C:  ADDWF  xB7,W
0508E:  MOVWF  01
05090:  MOVLW  00
05092:  ADDWFC xB8,W
05094:  MOVWF  03
05096:  MOVF   01,W
05098:  ADDLW  1A
0509A:  MOVWF  FE9
0509C:  MOVLW  01
0509E:  ADDWFC 03,W
050A0:  MOVWF  FEA
050A2:  MOVF   FEF,W
050A4:  MOVWF  01
050A6:  MOVLB  0
050A8:  GOTO   50FC
050AC:  MOVLB  1
050AE:  INCF   xB6,F
050B0:  MOVLB  0
050B2:  GOTO   5048
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
050B6:  MOVLW  56
050B8:  MOVWF  FF6
050BA:  MOVLW  04
050BC:  MOVWF  FF7
050BE:  MOVLW  00
050C0:  MOVWF  FF8
050C2:  MOVLW  1F
050C4:  MOVLB  9
050C6:  MOVWF  xC2
050C8:  MOVLB  0
050CA:  CALL   2064
050CE:  MOVFF  1B5,9E8
050D2:  MOVLW  37
050D4:  MOVLB  9
050D6:  MOVWF  xE9
050D8:  MOVLB  0
050DA:  CALL   2294
050DE:  MOVLW  0D
050E0:  BTFSS  FA6.6
050E2:  GOTO   50E0
050E6:  MOVLB  E
050E8:  MOVWF  xF9
050EA:  MOVLW  0A
050EC:  MOVLB  0
050EE:  BTFSS  FA6.6
050F0:  GOTO   50EE
050F4:  MOVLB  E
050F6:  MOVWF  xF9
....................    return -1;
050F8:  MOVLW  FF
050FA:  MOVWF  01
050FC:  MOVLB  0
050FE:  GOTO   53BC (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
05102:  MOVLW  01
05104:  MOVLB  1
05106:  SUBWF  xB7,W
05108:  ADDWF  xB5,W
0510A:  MOVWF  FE9
0510C:  MOVLW  00
0510E:  ADDWFC xB6,W
05110:  MOVWF  FEA
05112:  MOVFF  FEF,1B8
05116:  MOVLW  01
05118:  SUBWF  xB7,W
0511A:  MOVWF  xBA
0511C:  MOVFF  1B6,AEB
05120:  MOVFF  1B5,AEA
05124:  MOVFF  1BA,AEC
05128:  MOVLB  0
0512A:  CALL   2E3C
0512E:  MOVFF  01,1B9
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
05132:  MOVLB  1
05134:  MOVF   xB9,W
05136:  SUBWF  xB8,W
05138:  BTFSC  FD8.2
0513A:  BRA    5142
0513C:  MOVLB  0
0513E:  GOTO   5150
05142:  MOVLB  0
....................       return TRUE;
05144:  MOVLW  01
05146:  MOVWF  01
05148:  GOTO   51EE
0514C:  GOTO   51EE
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
05150:  MOVLW  7A
05152:  MOVWF  FF6
05154:  MOVLW  04
05156:  MOVWF  FF7
05158:  MOVLW  00
0515A:  MOVWF  FF8
0515C:  CALL   202E
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
05160:  MOVLW  8C
05162:  MOVWF  FF6
05164:  MOVLW  04
05166:  MOVWF  FF7
05168:  MOVLW  00
0516A:  MOVWF  FF8
0516C:  MOVLW  13
0516E:  MOVLB  9
05170:  MOVWF  xC2
05172:  MOVLB  0
05174:  CALL   2064
05178:  MOVFF  1B8,9E8
0517C:  MOVLW  37
0517E:  MOVLB  9
05180:  MOVWF  xE9
05182:  MOVLB  0
05184:  CALL   2294
05188:  MOVLW  0D
0518A:  BTFSS  FA6.6
0518C:  GOTO   518A
05190:  MOVLB  E
05192:  MOVWF  xF9
05194:  MOVLW  0A
05196:  MOVLB  0
05198:  BTFSS  FA6.6
0519A:  GOTO   5198
0519E:  MOVLB  E
051A0:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
051A2:  MOVLW  A4
051A4:  MOVWF  FF6
051A6:  MOVLW  04
051A8:  MOVWF  FF7
051AA:  MOVLW  00
051AC:  MOVWF  FF8
051AE:  MOVLW  13
051B0:  MOVLB  9
051B2:  MOVWF  xC2
051B4:  MOVLB  0
051B6:  CALL   2064
051BA:  MOVFF  1B9,9E8
051BE:  MOVLW  37
051C0:  MOVLB  9
051C2:  MOVWF  xE9
051C4:  MOVLB  0
051C6:  CALL   2294
051CA:  MOVLW  0D
051CC:  BTFSS  FA6.6
051CE:  GOTO   51CC
051D2:  MOVLB  E
051D4:  MOVWF  xF9
051D6:  MOVLW  0A
051D8:  MOVLB  0
051DA:  BTFSS  FA6.6
051DC:  GOTO   51DA
051E0:  MOVLB  E
051E2:  MOVWF  xF9
....................       return FALSE;
051E4:  MOVLW  00
051E6:  MOVWF  01
051E8:  MOVLB  0
051EA:  GOTO   51EE
....................    }
051EE:  GOTO   53F8 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
051F2:  MOVLB  1
051F4:  MOVF   xB6,W
051F6:  SUBLW  0C
051F8:  BTFSC  FD8.2
051FA:  BRA    5202
051FC:  MOVLB  0
051FE:  GOTO   5210
05202:  MOVLB  0
....................       return TRUE;
05204:  MOVLW  01
05206:  MOVWF  01
05208:  GOTO   52AE
0520C:  GOTO   52AE
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
05210:  MOVLW  BC
05212:  MOVWF  FF6
05214:  MOVLW  04
05216:  MOVWF  FF7
05218:  MOVLW  00
0521A:  MOVWF  FF8
0521C:  CALL   202E
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
05220:  MOVLW  DE
05222:  MOVWF  FF6
05224:  MOVLW  04
05226:  MOVWF  FF7
05228:  MOVLW  00
0522A:  MOVWF  FF8
0522C:  MOVLW  13
0522E:  MOVLB  9
05230:  MOVWF  xC2
05232:  MOVLB  0
05234:  CALL   2064
05238:  MOVFF  1B6,9E8
0523C:  MOVLW  37
0523E:  MOVLB  9
05240:  MOVWF  xE9
05242:  MOVLB  0
05244:  CALL   2294
05248:  MOVLW  0D
0524A:  BTFSS  FA6.6
0524C:  GOTO   524A
05250:  MOVLB  E
05252:  MOVWF  xF9
05254:  MOVLW  0A
05256:  MOVLB  0
05258:  BTFSS  FA6.6
0525A:  GOTO   5258
0525E:  MOVLB  E
05260:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
05262:  MOVLW  F6
05264:  MOVWF  FF6
05266:  MOVLW  04
05268:  MOVWF  FF7
0526A:  MOVLW  00
0526C:  MOVWF  FF8
0526E:  MOVLW  13
05270:  MOVLB  9
05272:  MOVWF  xC2
05274:  MOVLB  0
05276:  CALL   2064
0527A:  MOVLW  0C
0527C:  MOVLB  9
0527E:  MOVWF  xE8
05280:  MOVLW  37
05282:  MOVWF  xE9
05284:  MOVLB  0
05286:  CALL   2294
0528A:  MOVLW  0D
0528C:  BTFSS  FA6.6
0528E:  GOTO   528C
05292:  MOVLB  E
05294:  MOVWF  xF9
05296:  MOVLW  0A
05298:  MOVLB  0
0529A:  BTFSS  FA6.6
0529C:  GOTO   529A
052A0:  MOVLB  E
052A2:  MOVWF  xF9
....................       return FALSE;  
052A4:  MOVLW  00
052A6:  MOVWF  01
052A8:  MOVLB  0
052AA:  GOTO   52AE
....................    }
052AE:  GOTO   542E (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
055BE:  MOVLW  AA
055C0:  MOVLB  1
055C2:  MOVWF  xE3
....................    data[1] = (BOSS_PIC << 4) | frame_id;
055C4:  MOVF   xDF,W
055C6:  IORLW  50
055C8:  MOVWF  xE4
....................    memcpy(&data[2], content, size);
055CA:  MOVLW  01
055CC:  MOVWF  FEA
055CE:  MOVLW  E5
055D0:  MOVWF  FE9
055D2:  MOVFF  1E1,FE2
055D6:  MOVFF  1E0,FE1
055DA:  MOVF   xE2,W
055DC:  MOVWF  01
055DE:  BTFSS  FD8.2
055E0:  BRA    55E8
055E2:  MOVLB  0
055E4:  GOTO   55F4
055E8:  MOVLB  0
055EA:  MOVFF  FE6,FEE
055EE:  DECFSZ 01,F
055F0:  GOTO   55EA
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
055F4:  MOVLW  02
055F6:  MOVLB  1
055F8:  ADDWF  xE2,W
055FA:  MOVWF  xF3
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
055FC:  CLRF   03
055FE:  MOVF   xF3,W
05600:  ADDLW  E3
05602:  MOVWF  01
05604:  MOVLW  01
05606:  ADDWFC 03,F
05608:  MOVF   01,W
0560A:  MOVWF  xF5
0560C:  MOVFF  03,1F6
05610:  MOVLW  01
05612:  SUBWF  xF3,W
05614:  MOVWF  xF7
05616:  MOVLW  01
05618:  MOVLB  A
0561A:  MOVWF  xEB
0561C:  MOVLW  E4
0561E:  MOVWF  xEA
05620:  MOVFF  1F7,AEC
05624:  MOVLB  0
05626:  CALL   2E3C
0562A:  MOVFF  1F6,FEA
0562E:  MOVFF  1F5,FE9
05632:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
05636:  MOVLW  01
05638:  MOVLB  1
0563A:  ADDWF  xF3,W
0563C:  MOVWF  xF4
....................    
....................    transmit(data, data_size);
0563E:  MOVLW  01
05640:  MOVWF  xF6
05642:  MOVLW  E3
05644:  MOVWF  xF5
05646:  MOVFF  1F4,1F7
0564A:  MOVLB  0
0564C:  GOTO   5500
05650:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
05500:  MOVLB  1
05502:  CLRF   xF8
05504:  MOVLB  0
05506:  MOVLB  1
05508:  MOVF   xF7,W
0550A:  SUBWF  xF8,W
0550C:  BTFSS  FD8.0
0550E:  BRA    5516
05510:  MOVLB  0
05512:  GOTO   553C
05516:  MOVLB  0
....................       fputc(data[i], BOSS);
05518:  MOVLB  1
0551A:  MOVF   xF8,W
0551C:  ADDWF  xF5,W
0551E:  MOVWF  FE9
05520:  MOVLW  00
05522:  ADDWFC xF6,W
05524:  MOVWF  FEA
05526:  MOVFF  FEF,1FA
0552A:  MOVF   xFA,W
0552C:  MOVLB  0
0552E:  GOTO   54F0
05532:  MOVLB  1
05534:  INCF   xF8,F
05536:  MOVLB  0
05538:  GOTO   5506
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
0553C:  MOVLW  0E
0553E:  MOVWF  FF6
05540:  MOVLW  05
05542:  MOVWF  FF7
05544:  MOVLW  00
05546:  MOVWF  FF8
05548:  CALL   202E
....................    for(int i = 0; i < data_size; i++)
0554C:  MOVLB  1
0554E:  CLRF   xF9
05550:  MOVLB  0
05552:  MOVLB  1
05554:  MOVF   xF7,W
05556:  SUBWF  xF9,W
05558:  BTFSS  FD8.0
0555A:  BRA    5562
0555C:  MOVLB  0
0555E:  GOTO   559E
05562:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05564:  MOVLB  1
05566:  MOVF   xF9,W
05568:  ADDWF  xF5,W
0556A:  MOVWF  FE9
0556C:  MOVLW  00
0556E:  ADDWFC xF6,W
05570:  MOVWF  FEA
05572:  MOVFF  FEF,1FA
05576:  MOVFF  1FA,9E8
0557A:  MOVLW  37
0557C:  MOVLB  9
0557E:  MOVWF  xE9
05580:  MOVLB  0
05582:  CALL   2294
05586:  MOVLW  20
05588:  BTFSS  FA6.6
0558A:  GOTO   5588
0558E:  MOVLB  E
05590:  MOVWF  xF9
05592:  MOVLB  0
05594:  MOVLB  1
05596:  INCF   xF9,F
05598:  MOVLB  0
0559A:  GOTO   5552
....................    fprintf(PC, "\r\n");
0559E:  MOVLW  0D
055A0:  BTFSS  FA6.6
055A2:  GOTO   55A0
055A6:  MOVLB  E
055A8:  MOVWF  xF9
055AA:  MOVLW  0A
055AC:  MOVLB  0
055AE:  BTFSS  FA6.6
055B0:  GOTO   55AE
055B4:  MOVLB  E
055B6:  MOVWF  xF9
055B8:  MOVLB  0
055BA:  GOTO   5650 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
05652:  MOVLW  0F
05654:  MOVLB  1
05656:  MOVWF  xDF
05658:  CLRF   xE1
0565A:  CLRF   xE0
0565C:  CLRF   xE2
0565E:  MOVLB  0
05660:  CALL   55BE
05664:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0A52C:  MOVLW  03
0A52E:  MOVLB  1
0A530:  MOVWF  xDF
0A532:  CLRF   xE1
0A534:  MOVLW  4C
0A536:  MOVWF  xE0
0A538:  MOVLW  04
0A53A:  MOVWF  xE2
0A53C:  MOVLB  0
0A53E:  CALL   55BE
0A542:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0A544:  MOVF   4A,F
0A546:  BTFSC  FD8.2
0A548:  GOTO   A580
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A54C:  MOVLB  1
0A54E:  CLRF   xE0
0A550:  MOVLW  2A
0A552:  MOVWF  xDF
0A554:  CLRF   xE2
0A556:  MOVLW  4A
0A558:  MOVWF  xE1
0A55A:  MOVLB  0
0A55C:  CALL   54B4
....................       fprintf(PC, "\r\n");
0A560:  MOVLW  0D
0A562:  BTFSS  FA6.6
0A564:  GOTO   A562
0A568:  MOVLB  E
0A56A:  MOVWF  xF9
0A56C:  MOVLW  0A
0A56E:  MOVLB  0
0A570:  BTFSS  FA6.6
0A572:  GOTO   A570
0A576:  MOVLB  E
0A578:  MOVWF  xF9
....................       transmit_status();
0A57A:  MOVLB  0
0A57C:  CALL   A52C
....................    }
0A580:  GOTO   A8CE (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/cigs_iv.c"
.................... #include "cigs_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0C8FC:  MOVLW  03
0C8FE:  MOVLB  1
0C900:  MOVWF  xB0
0C902:  CLRF   xAF
0C904:  MOVLW  07
0C906:  MOVWF  xB2
0C908:  MOVLW  E0
0C90A:  MOVWF  xB1
.................... {
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x7E0;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0C90C:  MOVLB  0
0C90E:  CALL   4F66
....................     connect_port2();
0C912:  CALL   4F6E
....................     mcp4901_1_write(0); 
0C916:  MOVLB  9
0C918:  CLRF   xDD
0C91A:  CLRF   xDC
0C91C:  MOVLB  0
0C91E:  CALL   25C4
....................     mcp4901_2_write(0);
0C922:  MOVLB  9
0C924:  CLRF   xDD
0C926:  CLRF   xDC
0C928:  MOVLB  0
0C92A:  CALL   2602
....................     delay_ms(100);
0C92E:  MOVLW  64
0C930:  MOVLB  B
0C932:  MOVWF  x02
0C934:  MOVLB  0
0C936:  CALL   2000
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0C93A:  MOVLB  1
0C93C:  CLRF   xB3
0C93E:  CLRF   xB4
0C940:  CLRF   xB5
0C942:  CLRF   xB6
0C944:  CLRF   xB7
0C946:  CLRF   xB8
0C948:  CLRF   xB9
0C94A:  CLRF   xBA
0C94C:  CLRF   xBB
0C94E:  CLRF   xBC
0C950:  CLRF   xBD
0C952:  CLRF   xBE
0C954:  CLRF   xBF
0C956:  CLRF   xC0
0C958:  CLRF   xC1
0C95A:  CLRF   xC2
0C95C:  CLRF   xC3
0C95E:  CLRF   xC4
0C960:  CLRF   xC5
0C962:  CLRF   xC6
0C964:  CLRF   xC7
0C966:  CLRF   xC8
0C968:  CLRF   xC9
0C96A:  CLRF   xCA
0C96C:  CLRF   xCB
0C96E:  CLRF   xCC
0C970:  CLRF   xCD
0C972:  CLRF   xCE
0C974:  CLRF   xCF
0C976:  CLRF   xD0
0C978:  CLRF   xD1
0C97A:  CLRF   xD2
0C97C:  CLRF   xD3
0C97E:  CLRF   xD4
0C980:  CLRF   xD5
0C982:  CLRF   xD6
0C984:  CLRF   xD7
0C986:  CLRF   xD8
0C988:  CLRF   xD9
0C98A:  CLRF   xDA
0C98C:  CLRF   xDB
0C98E:  CLRF   xDC
0C990:  CLRF   xDD
0C992:  CLRF   xDE
0C994:  CLRF   xDF
0C996:  CLRF   xE0
0C998:  CLRF   xE1
0C99A:  CLRF   xE2
0C99C:  CLRF   xE3
0C99E:  CLRF   xE4
0C9A0:  CLRF   xE5
0C9A2:  CLRF   xE6
0C9A4:  CLRF   xE7
0C9A6:  CLRF   xE8
0C9A8:  CLRF   xE9
0C9AA:  CLRF   xEA
0C9AC:  CLRF   xEB
0C9AE:  CLRF   xEC
0C9B0:  CLRF   xED
0C9B2:  CLRF   xEE
0C9B4:  CLRF   xEF
0C9B6:  CLRF   xF0
0C9B8:  CLRF   xF1
0C9BA:  CLRF   xF2
0C9BC:  CLRF   xF3
0C9BE:  CLRF   xF4
0C9C0:  CLRF   xF5
0C9C2:  CLRF   xF6
0C9C4:  CLRF   xF7
0C9C6:  CLRF   xF8
0C9C8:  CLRF   xF9
0C9CA:  CLRF   xFA
0C9CC:  CLRF   xFB
0C9CE:  CLRF   xFC
0C9D0:  CLRF   xFD
0C9D2:  CLRF   xFE
0C9D4:  CLRF   xFF
0C9D6:  MOVLB  2
0C9D8:  CLRF   x00
0C9DA:  CLRF   x01
0C9DC:  CLRF   x02
0C9DE:  CLRF   x03
0C9E0:  CLRF   x04
0C9E2:  CLRF   x05
0C9E4:  CLRF   x06
0C9E6:  CLRF   x07
0C9E8:  CLRF   x08
0C9EA:  CLRF   x09
0C9EC:  CLRF   x0A
0C9EE:  CLRF   x0B
0C9F0:  CLRF   x0C
0C9F2:  CLRF   x0D
0C9F4:  CLRF   x0E
0C9F6:  CLRF   x0F
0C9F8:  CLRF   x10
0C9FA:  CLRF   x11
0C9FC:  CLRF   x12
0C9FE:  CLRF   x13
0CA00:  CLRF   x14
0CA02:  CLRF   x15
0CA04:  CLRF   x16
0CA06:  CLRF   x17
0CA08:  CLRF   x18
0CA0A:  CLRF   x19
0CA0C:  CLRF   x1A
0CA0E:  CLRF   x1B
0CA10:  CLRF   x1C
0CA12:  CLRF   x1D
0CA14:  CLRF   x1E
0CA16:  CLRF   x1F
0CA18:  CLRF   x20
0CA1A:  CLRF   x21
0CA1C:  CLRF   x22
0CA1E:  CLRF   x23
0CA20:  CLRF   x24
0CA22:  CLRF   x25
0CA24:  CLRF   x26
0CA26:  CLRF   x27
0CA28:  CLRF   x28
0CA2A:  CLRF   x29
0CA2C:  CLRF   x2A
0CA2E:  CLRF   x2B
0CA30:  CLRF   x2C
0CA32:  CLRF   x2D
0CA34:  CLRF   x2E
0CA36:  CLRF   x2F
0CA38:  CLRF   x30
0CA3A:  CLRF   x31
0CA3C:  CLRF   x32
0CA3E:  CLRF   x33
0CA40:  CLRF   x34
0CA42:  CLRF   x35
0CA44:  CLRF   x36
0CA46:  CLRF   x37
0CA48:  CLRF   x38
0CA4A:  CLRF   x39
0CA4C:  CLRF   x3A
0CA4E:  CLRF   x3B
0CA50:  CLRF   x3C
0CA52:  CLRF   x3D
0CA54:  CLRF   x3E
0CA56:  CLRF   x3F
0CA58:  CLRF   x40
0CA5A:  CLRF   x41
0CA5C:  CLRF   x42
0CA5E:  CLRF   x43
0CA60:  CLRF   x44
0CA62:  CLRF   x45
0CA64:  CLRF   x46
0CA66:  CLRF   x47
0CA68:  CLRF   x48
0CA6A:  CLRF   x49
0CA6C:  CLRF   x4A
0CA6E:  CLRF   x4B
0CA70:  CLRF   x4C
0CA72:  CLRF   x4D
0CA74:  CLRF   x4E
0CA76:  CLRF   x4F
0CA78:  CLRF   x50
0CA7A:  CLRF   x51
0CA7C:  CLRF   x52
0CA7E:  CLRF   x53
0CA80:  CLRF   x54
0CA82:  CLRF   x55
0CA84:  CLRF   x56
0CA86:  CLRF   x57
0CA88:  CLRF   x58
0CA8A:  CLRF   x59
0CA8C:  CLRF   x5A
0CA8E:  CLRF   x5B
0CA90:  CLRF   x5C
0CA92:  CLRF   x5D
0CA94:  CLRF   x5E
0CA96:  CLRF   x5F
0CA98:  CLRF   x60
0CA9A:  CLRF   x61
0CA9C:  CLRF   x62
0CA9E:  CLRF   x63
0CAA0:  CLRF   x64
0CAA2:  CLRF   x65
0CAA4:  CLRF   x66
0CAA6:  CLRF   x67
0CAA8:  CLRF   x68
0CAAA:  CLRF   x69
0CAAC:  CLRF   x6A
0CAAE:  CLRF   x6B
0CAB0:  CLRF   x6C
0CAB2:  CLRF   x6D
0CAB4:  CLRF   x6E
0CAB6:  CLRF   x6F
0CAB8:  CLRF   x70
0CABA:  CLRF   x71
0CABC:  CLRF   x72
0CABE:  CLRF   x73
0CAC0:  CLRF   x74
0CAC2:  CLRF   x75
0CAC4:  CLRF   x76
0CAC6:  CLRF   x77
0CAC8:  CLRF   x78
0CACA:  CLRF   x79
0CACC:  CLRF   x7A
0CACE:  CLRF   x7B
0CAD0:  CLRF   x7C
0CAD2:  CLRF   x7D
0CAD4:  CLRF   x7E
0CAD6:  CLRF   x7F
0CAD8:  CLRF   x80
0CADA:  CLRF   x81
0CADC:  CLRF   x82
0CADE:  CLRF   x83
0CAE0:  CLRF   x84
0CAE2:  CLRF   x85
0CAE4:  CLRF   x86
0CAE6:  CLRF   x87
0CAE8:  CLRF   x88
0CAEA:  CLRF   x89
0CAEC:  CLRF   x8A
0CAEE:  CLRF   x8B
0CAF0:  CLRF   x8C
0CAF2:  CLRF   x8D
0CAF4:  CLRF   x8E
0CAF6:  CLRF   x8F
0CAF8:  CLRF   x90
0CAFA:  CLRF   x91
0CAFC:  CLRF   x92
0CAFE:  CLRF   x93
0CB00:  CLRF   x94
0CB02:  CLRF   x95
0CB04:  CLRF   x96
0CB06:  CLRF   x97
0CB08:  CLRF   x98
0CB0A:  CLRF   x99
0CB0C:  CLRF   x9A
0CB0E:  CLRF   x9B
0CB10:  CLRF   x9C
0CB12:  CLRF   x9D
0CB14:  CLRF   x9E
0CB16:  CLRF   x9F
0CB18:  CLRF   xA0
0CB1A:  CLRF   xA1
0CB1C:  CLRF   xA2
0CB1E:  CLRF   xA3
0CB20:  CLRF   xA4
0CB22:  CLRF   xA5
0CB24:  CLRF   xA6
0CB26:  CLRF   xA7
0CB28:  CLRF   xA8
0CB2A:  CLRF   xA9
0CB2C:  CLRF   xAA
0CB2E:  CLRF   xAB
0CB30:  CLRF   xAC
0CB32:  CLRF   xAD
0CB34:  CLRF   xAE
0CB36:  CLRF   xAF
0CB38:  CLRF   xB0
0CB3A:  CLRF   xB1
0CB3C:  CLRF   xB2
0CB3E:  CLRF   xB3
0CB40:  CLRF   xB4
0CB42:  CLRF   xB5
0CB44:  CLRF   xB6
0CB46:  CLRF   xB7
0CB48:  CLRF   xB8
0CB4A:  CLRF   xB9
0CB4C:  CLRF   xBA
0CB4E:  CLRF   xBB
0CB50:  CLRF   xBC
0CB52:  CLRF   xBD
0CB54:  CLRF   xBE
0CB56:  CLRF   xBF
0CB58:  CLRF   xC0
0CB5A:  CLRF   xC1
0CB5C:  CLRF   xC2
0CB5E:  CLRF   xC3
0CB60:  CLRF   xC4
0CB62:  CLRF   xC5
0CB64:  CLRF   xC6
0CB66:  CLRF   xC7
0CB68:  CLRF   xC8
0CB6A:  CLRF   xC9
0CB6C:  CLRF   xCA
0CB6E:  CLRF   xCB
0CB70:  CLRF   xCC
0CB72:  CLRF   xCD
0CB74:  CLRF   xCE
0CB76:  CLRF   xCF
0CB78:  CLRF   xD0
0CB7A:  CLRF   xD1
0CB7C:  CLRF   xD2
0CB7E:  CLRF   xD3
0CB80:  CLRF   xD4
0CB82:  CLRF   xD5
0CB84:  CLRF   xD6
0CB86:  CLRF   xD7
0CB88:  CLRF   xD8
0CB8A:  CLRF   xD9
0CB8C:  CLRF   xDA
0CB8E:  CLRF   xDB
0CB90:  CLRF   xDC
0CB92:  CLRF   xDD
0CB94:  CLRF   xDE
0CB96:  CLRF   xDF
0CB98:  CLRF   xE0
0CB9A:  CLRF   xE1
0CB9C:  CLRF   xE2
0CB9E:  CLRF   xE3
0CBA0:  CLRF   xE4
0CBA2:  CLRF   xE5
0CBA4:  CLRF   xE6
0CBA6:  CLRF   xE7
0CBA8:  CLRF   xE8
0CBAA:  CLRF   xE9
0CBAC:  CLRF   xEA
0CBAE:  CLRF   xEB
0CBB0:  CLRF   xEC
0CBB2:  CLRF   xED
0CBB4:  CLRF   xEE
0CBB6:  CLRF   xEF
0CBB8:  CLRF   xF0
0CBBA:  CLRF   xF1
0CBBC:  CLRF   xF2
0CBBE:  CLRF   xF3
0CBC0:  CLRF   xF4
0CBC2:  CLRF   xF5
0CBC4:  CLRF   xF6
0CBC6:  CLRF   xF7
0CBC8:  CLRF   xF8
0CBCA:  CLRF   xF9
0CBCC:  CLRF   xFA
0CBCE:  CLRF   xFB
0CBD0:  CLRF   xFC
0CBD2:  CLRF   xFD
0CBD4:  CLRF   xFE
0CBD6:  CLRF   xFF
0CBD8:  MOVLB  3
0CBDA:  CLRF   x00
0CBDC:  CLRF   x01
0CBDE:  CLRF   x02
0CBE0:  CLRF   x03
0CBE2:  CLRF   x04
0CBE4:  CLRF   x05
0CBE6:  CLRF   x06
0CBE8:  CLRF   x07
0CBEA:  CLRF   x08
0CBEC:  CLRF   x09
0CBEE:  CLRF   x0A
0CBF0:  CLRF   x0B
0CBF2:  CLRF   x0C
0CBF4:  CLRF   x0D
0CBF6:  CLRF   x0E
0CBF8:  CLRF   x0F
0CBFA:  CLRF   x10
0CBFC:  CLRF   x11
0CBFE:  CLRF   x12
0CC00:  CLRF   x13
0CC02:  CLRF   x14
0CC04:  CLRF   x15
0CC06:  CLRF   x16
0CC08:  CLRF   x17
0CC0A:  CLRF   x18
0CC0C:  CLRF   x19
0CC0E:  CLRF   x1A
0CC10:  CLRF   x1B
0CC12:  CLRF   x1C
0CC14:  CLRF   x1D
0CC16:  CLRF   x1E
0CC18:  CLRF   x1F
0CC1A:  CLRF   x20
0CC1C:  CLRF   x21
0CC1E:  CLRF   x22
0CC20:  CLRF   x23
0CC22:  CLRF   x24
0CC24:  CLRF   x25
0CC26:  CLRF   x26
0CC28:  CLRF   x27
0CC2A:  CLRF   x28
0CC2C:  CLRF   x29
0CC2E:  CLRF   x2A
0CC30:  CLRF   x2B
0CC32:  CLRF   x2C
0CC34:  CLRF   x2D
0CC36:  CLRF   x2E
0CC38:  CLRF   x2F
0CC3A:  CLRF   x30
0CC3C:  CLRF   x31
0CC3E:  CLRF   x32
0CC40:  CLRF   x33
0CC42:  CLRF   x34
0CC44:  CLRF   x35
0CC46:  CLRF   x36
0CC48:  CLRF   x37
0CC4A:  CLRF   x38
0CC4C:  CLRF   x39
0CC4E:  CLRF   x3A
0CC50:  CLRF   x3B
0CC52:  CLRF   x3C
0CC54:  CLRF   x3D
0CC56:  CLRF   x3E
0CC58:  CLRF   x3F
0CC5A:  CLRF   x40
0CC5C:  CLRF   x41
0CC5E:  CLRF   x42
0CC60:  CLRF   x43
0CC62:  CLRF   x44
0CC64:  CLRF   x45
0CC66:  CLRF   x46
0CC68:  CLRF   x47
0CC6A:  CLRF   x48
0CC6C:  CLRF   x49
0CC6E:  CLRF   x4A
0CC70:  CLRF   x4B
0CC72:  CLRF   x4C
0CC74:  CLRF   x4D
0CC76:  CLRF   x4E
0CC78:  CLRF   x4F
0CC7A:  CLRF   x50
0CC7C:  CLRF   x51
0CC7E:  CLRF   x52
0CC80:  CLRF   x53
0CC82:  CLRF   x54
0CC84:  CLRF   x55
0CC86:  CLRF   x56
0CC88:  CLRF   x57
0CC8A:  CLRF   x58
0CC8C:  CLRF   x59
0CC8E:  CLRF   x5A
0CC90:  CLRF   x5B
0CC92:  CLRF   x5C
0CC94:  CLRF   x5D
0CC96:  CLRF   x5E
0CC98:  CLRF   x5F
0CC9A:  CLRF   x60
0CC9C:  CLRF   x61
0CC9E:  CLRF   x62
0CCA0:  CLRF   x63
0CCA2:  CLRF   x64
0CCA4:  CLRF   x65
0CCA6:  CLRF   x66
0CCA8:  CLRF   x67
0CCAA:  CLRF   x68
0CCAC:  CLRF   x69
0CCAE:  CLRF   x6A
0CCB0:  CLRF   x6B
0CCB2:  CLRF   x6C
0CCB4:  CLRF   x6D
0CCB6:  CLRF   x6E
0CCB8:  CLRF   x6F
0CCBA:  CLRF   x70
0CCBC:  CLRF   x71
0CCBE:  CLRF   x72
0CCC0:  CLRF   x73
0CCC2:  CLRF   x74
0CCC4:  CLRF   x75
0CCC6:  CLRF   x76
0CCC8:  CLRF   x77
0CCCA:  CLRF   x78
0CCCC:  CLRF   x79
0CCCE:  CLRF   x7A
0CCD0:  CLRF   x7B
0CCD2:  CLRF   x7C
0CCD4:  CLRF   x7D
0CCD6:  CLRF   x7E
0CCD8:  CLRF   x7F
0CCDA:  CLRF   x80
0CCDC:  CLRF   x81
0CCDE:  CLRF   x82
0CCE0:  CLRF   x83
0CCE2:  CLRF   x84
0CCE4:  CLRF   x85
0CCE6:  CLRF   x86
0CCE8:  CLRF   x87
0CCEA:  CLRF   x88
0CCEC:  CLRF   x89
0CCEE:  CLRF   x8A
0CCF0:  CLRF   x8B
0CCF2:  CLRF   x8C
0CCF4:  CLRF   x8D
0CCF6:  CLRF   x8E
0CCF8:  CLRF   x8F
0CCFA:  CLRF   x90
0CCFC:  CLRF   x91
0CCFE:  CLRF   x92
0CD00:  CLRF   x93
0CD02:  CLRF   x94
0CD04:  CLRF   x95
0CD06:  CLRF   x96
0CD08:  CLRF   x97
0CD0A:  CLRF   x98
0CD0C:  CLRF   x99
0CD0E:  CLRF   x9A
0CD10:  CLRF   x9B
0CD12:  CLRF   x9C
0CD14:  CLRF   x9D
0CD16:  CLRF   x9E
0CD18:  CLRF   x9F
0CD1A:  CLRF   xA0
0CD1C:  CLRF   xA1
0CD1E:  CLRF   xA2
0CD20:  CLRF   xA3
0CD22:  CLRF   xA4
0CD24:  CLRF   xA5
0CD26:  CLRF   xA6
0CD28:  CLRF   xA7
0CD2A:  CLRF   xA8
0CD2C:  CLRF   xA9
0CD2E:  CLRF   xAA
0CD30:  CLRF   xAB
0CD32:  CLRF   xAC
0CD34:  CLRF   xAD
0CD36:  CLRF   xAE
0CD38:  CLRF   xAF
0CD3A:  CLRF   xB0
0CD3C:  CLRF   xB1
0CD3E:  CLRF   xB2
0CD40:  CLRF   xB3
0CD42:  CLRF   xB4
0CD44:  CLRF   xB5
0CD46:  CLRF   xB6
0CD48:  CLRF   xB7
0CD4A:  CLRF   xB8
0CD4C:  CLRF   xB9
0CD4E:  CLRF   xBA
0CD50:  CLRF   xBB
0CD52:  CLRF   xBC
0CD54:  CLRF   xBD
0CD56:  CLRF   xBE
0CD58:  CLRF   xBF
0CD5A:  CLRF   xC0
0CD5C:  CLRF   xC1
0CD5E:  CLRF   xC2
0CD60:  CLRF   xC3
0CD62:  CLRF   xC4
0CD64:  CLRF   xC5
0CD66:  CLRF   xC6
0CD68:  CLRF   xC7
0CD6A:  CLRF   xC8
0CD6C:  CLRF   xC9
0CD6E:  CLRF   xCA
0CD70:  CLRF   xCB
0CD72:  CLRF   xCC
0CD74:  CLRF   xCD
0CD76:  CLRF   xCE
0CD78:  CLRF   xCF
0CD7A:  CLRF   xD0
0CD7C:  CLRF   xD1
0CD7E:  CLRF   xD2
0CD80:  CLRF   xD3
0CD82:  CLRF   xD4
0CD84:  CLRF   xD5
0CD86:  CLRF   xD6
0CD88:  CLRF   xD7
0CD8A:  CLRF   xD8
0CD8C:  CLRF   xD9
0CD8E:  CLRF   xDA
0CD90:  CLRF   xDB
0CD92:  CLRF   xDC
0CD94:  CLRF   xDD
0CD96:  CLRF   xDE
0CD98:  CLRF   xDF
0CD9A:  CLRF   xE0
0CD9C:  CLRF   xE1
0CD9E:  CLRF   xE2
0CDA0:  CLRF   xE3
0CDA2:  CLRF   xE4
0CDA4:  CLRF   xE5
0CDA6:  CLRF   xE6
0CDA8:  CLRF   xE7
0CDAA:  CLRF   xE8
0CDAC:  CLRF   xE9
0CDAE:  CLRF   xEA
0CDB0:  CLRF   xEB
0CDB2:  CLRF   xEC
0CDB4:  CLRF   xED
0CDB6:  CLRF   xEE
0CDB8:  CLRF   xEF
0CDBA:  CLRF   xF0
0CDBC:  CLRF   xF1
0CDBE:  CLRF   xF2
0CDC0:  CLRF   xF3
0CDC2:  CLRF   xF4
0CDC4:  CLRF   xF5
0CDC6:  CLRF   xF6
0CDC8:  CLRF   xF7
0CDCA:  CLRF   xF8
0CDCC:  CLRF   xF9
0CDCE:  CLRF   xFA
0CDD0:  CLRF   xFB
0CDD2:  CLRF   xFC
0CDD4:  CLRF   xFD
0CDD6:  CLRF   xFE
0CDD8:  CLRF   xFF
0CDDA:  MOVLB  4
0CDDC:  CLRF   x00
0CDDE:  CLRF   x01
0CDE0:  CLRF   x02
0CDE2:  CLRF   x03
0CDE4:  CLRF   x04
0CDE6:  CLRF   x05
0CDE8:  CLRF   x06
0CDEA:  CLRF   x07
0CDEC:  CLRF   x08
0CDEE:  CLRF   x09
0CDF0:  CLRF   x0A
0CDF2:  CLRF   x0B
0CDF4:  CLRF   x0C
0CDF6:  CLRF   x0D
0CDF8:  CLRF   x0E
0CDFA:  CLRF   x0F
0CDFC:  CLRF   x10
0CDFE:  CLRF   x11
0CE00:  CLRF   x12
0CE02:  CLRF   x13
0CE04:  CLRF   x14
0CE06:  CLRF   x15
0CE08:  CLRF   x16
0CE0A:  CLRF   x17
0CE0C:  CLRF   x18
0CE0E:  CLRF   x19
0CE10:  CLRF   x1A
0CE12:  CLRF   x1B
0CE14:  CLRF   x1C
0CE16:  CLRF   x1D
0CE18:  CLRF   x1E
0CE1A:  CLRF   x1F
0CE1C:  CLRF   x20
0CE1E:  CLRF   x21
0CE20:  CLRF   x22
0CE22:  CLRF   x23
0CE24:  CLRF   x24
0CE26:  CLRF   x25
0CE28:  CLRF   x26
0CE2A:  CLRF   x27
0CE2C:  CLRF   x28
0CE2E:  CLRF   x29
0CE30:  CLRF   x2A
0CE32:  CLRF   x2B
0CE34:  CLRF   x2C
0CE36:  CLRF   x2D
0CE38:  CLRF   x2E
0CE3A:  CLRF   x2F
0CE3C:  CLRF   x30
0CE3E:  CLRF   x31
0CE40:  CLRF   x32
0CE42:  CLRF   x33
0CE44:  CLRF   x34
0CE46:  CLRF   x35
0CE48:  CLRF   x36
0CE4A:  CLRF   x37
0CE4C:  CLRF   x38
0CE4E:  CLRF   x39
0CE50:  CLRF   x3A
0CE52:  CLRF   x3B
0CE54:  CLRF   x3C
0CE56:  CLRF   x3D
0CE58:  CLRF   x3E
0CE5A:  CLRF   x3F
0CE5C:  CLRF   x40
0CE5E:  CLRF   x41
0CE60:  CLRF   x42
0CE62:  CLRF   x43
0CE64:  CLRF   x44
0CE66:  CLRF   x45
0CE68:  CLRF   x46
0CE6A:  CLRF   x47
0CE6C:  CLRF   x48
0CE6E:  CLRF   x49
0CE70:  CLRF   x4A
0CE72:  CLRF   x4B
0CE74:  CLRF   x4C
0CE76:  CLRF   x4D
0CE78:  CLRF   x4E
0CE7A:  CLRF   x4F
0CE7C:  CLRF   x50
0CE7E:  CLRF   x51
0CE80:  CLRF   x52
0CE82:  CLRF   x53
0CE84:  CLRF   x54
0CE86:  CLRF   x55
0CE88:  CLRF   x56
0CE8A:  CLRF   x57
0CE8C:  CLRF   x58
0CE8E:  CLRF   x59
0CE90:  CLRF   x5A
0CE92:  CLRF   x5B
0CE94:  CLRF   x5C
0CE96:  CLRF   x5D
0CE98:  CLRF   x5E
0CE9A:  CLRF   x5F
0CE9C:  CLRF   x60
0CE9E:  CLRF   x61
0CEA0:  CLRF   x62
0CEA2:  CLRF   x63
0CEA4:  CLRF   x64
0CEA6:  CLRF   x65
0CEA8:  CLRF   x66
0CEAA:  CLRF   x67
0CEAC:  CLRF   x68
0CEAE:  CLRF   x69
0CEB0:  CLRF   x6A
0CEB2:  CLRF   x6B
0CEB4:  CLRF   x6C
0CEB6:  CLRF   x6D
0CEB8:  CLRF   x6E
0CEBA:  CLRF   x6F
0CEBC:  CLRF   x70
0CEBE:  CLRF   x71
0CEC0:  CLRF   x72
0CEC2:  CLRF   x73
0CEC4:  CLRF   x74
0CEC6:  CLRF   x75
0CEC8:  CLRF   x76
0CECA:  CLRF   x77
0CECC:  CLRF   x78
0CECE:  CLRF   x79
0CED0:  CLRF   x7A
0CED2:  CLRF   x7B
0CED4:  CLRF   x7C
0CED6:  CLRF   x7D
0CED8:  CLRF   x7E
0CEDA:  CLRF   x7F
0CEDC:  CLRF   x80
0CEDE:  CLRF   x81
0CEE0:  CLRF   x82
0CEE2:  CLRF   x83
0CEE4:  CLRF   x84
0CEE6:  CLRF   x85
0CEE8:  CLRF   x86
0CEEA:  CLRF   x87
0CEEC:  CLRF   x88
0CEEE:  CLRF   x89
0CEF0:  CLRF   x8A
0CEF2:  CLRF   x8B
0CEF4:  CLRF   x8C
0CEF6:  CLRF   x8D
0CEF8:  CLRF   x8E
0CEFA:  CLRF   x8F
0CEFC:  CLRF   x90
0CEFE:  CLRF   x91
0CF00:  CLRF   x92
0CF02:  CLRF   x93
0CF04:  CLRF   x94
0CF06:  CLRF   x95
0CF08:  CLRF   x96
0CF0A:  CLRF   x97
0CF0C:  CLRF   x98
0CF0E:  CLRF   x99
0CF10:  CLRF   x9A
0CF12:  CLRF   x9B
0CF14:  CLRF   x9C
0CF16:  CLRF   x9D
0CF18:  CLRF   x9E
0CF1A:  CLRF   x9F
0CF1C:  CLRF   xA0
0CF1E:  CLRF   xA1
0CF20:  CLRF   xA2
0CF22:  CLRF   xA3
0CF24:  CLRF   xA4
0CF26:  CLRF   xA5
0CF28:  CLRF   xA6
0CF2A:  CLRF   xA7
0CF2C:  CLRF   xA8
0CF2E:  CLRF   xA9
0CF30:  CLRF   xAA
0CF32:  CLRF   xAB
0CF34:  CLRF   xAC
0CF36:  CLRF   xAD
0CF38:  CLRF   xAE
0CF3A:  CLRF   xAF
0CF3C:  CLRF   xB0
0CF3E:  CLRF   xB1
0CF40:  CLRF   xB2
0CF42:  CLRF   xB3
0CF44:  CLRF   xB4
0CF46:  CLRF   xB5
0CF48:  CLRF   xB6
0CF4A:  CLRF   xB7
0CF4C:  CLRF   xB8
0CF4E:  CLRF   xB9
0CF50:  CLRF   xBA
0CF52:  CLRF   xBB
0CF54:  CLRF   xBC
0CF56:  CLRF   xBD
0CF58:  CLRF   xBE
0CF5A:  CLRF   xBF
0CF5C:  CLRF   xC0
0CF5E:  CLRF   xC1
0CF60:  CLRF   xC2
0CF62:  CLRF   xC3
0CF64:  CLRF   xC4
0CF66:  CLRF   xC5
0CF68:  CLRF   xC6
0CF6A:  CLRF   xC7
0CF6C:  CLRF   xC8
0CF6E:  CLRF   xC9
0CF70:  CLRF   xCA
0CF72:  CLRF   xCB
0CF74:  CLRF   xCC
0CF76:  CLRF   xCD
0CF78:  CLRF   xCE
0CF7A:  CLRF   xCF
0CF7C:  CLRF   xD0
0CF7E:  CLRF   xD1
0CF80:  CLRF   xD2
0CF82:  CLRF   xD3
0CF84:  CLRF   xD4
0CF86:  CLRF   xD5
0CF88:  CLRF   xD6
0CF8A:  CLRF   xD7
0CF8C:  CLRF   xD8
0CF8E:  CLRF   xD9
0CF90:  CLRF   xDA
0CF92:  CLRF   xDB
0CF94:  CLRF   xDC
0CF96:  CLRF   xDD
0CF98:  CLRF   xDE
0CF9A:  CLRF   xDF
0CF9C:  CLRF   xE0
0CF9E:  CLRF   xE1
0CFA0:  CLRF   xE2
0CFA2:  CLRF   xE3
0CFA4:  CLRF   xE4
0CFA6:  CLRF   xE5
0CFA8:  CLRF   xE6
0CFAA:  CLRF   xE7
0CFAC:  CLRF   xE8
0CFAE:  CLRF   xE9
0CFB0:  CLRF   xEA
0CFB2:  CLRF   xEB
0CFB4:  CLRF   xEC
0CFB6:  CLRF   xED
0CFB8:  CLRF   xEE
0CFBA:  CLRF   xEF
0CFBC:  CLRF   xF0
0CFBE:  CLRF   xF1
0CFC0:  CLRF   xF2
0CFC2:  CLRF   xF3
0CFC4:  CLRF   xF4
0CFC6:  CLRF   xF5
0CFC8:  CLRF   xF6
0CFCA:  CLRF   xF7
0CFCC:  CLRF   xF8
0CFCE:  CLRF   xF9
0CFD0:  CLRF   xFA
0CFD2:  CLRF   xFB
0CFD4:  CLRF   xFC
0CFD6:  CLRF   xFD
0CFD8:  CLRF   xFE
0CFDA:  CLRF   xFF
0CFDC:  MOVLB  5
0CFDE:  CLRF   x00
0CFE0:  CLRF   x01
0CFE2:  CLRF   x02
0CFE4:  CLRF   x03
0CFE6:  CLRF   x04
0CFE8:  CLRF   x05
0CFEA:  CLRF   x06
0CFEC:  CLRF   x07
0CFEE:  CLRF   x08
0CFF0:  CLRF   x09
0CFF2:  CLRF   x0A
0CFF4:  CLRF   x0B
0CFF6:  CLRF   x0C
0CFF8:  CLRF   x0D
0CFFA:  CLRF   x0E
0CFFC:  CLRF   x0F
0CFFE:  CLRF   x10
0D000:  CLRF   x11
0D002:  CLRF   x12
0D004:  CLRF   x13
0D006:  CLRF   x14
0D008:  CLRF   x15
0D00A:  CLRF   x16
0D00C:  CLRF   x17
0D00E:  CLRF   x18
0D010:  CLRF   x19
0D012:  CLRF   x1A
0D014:  CLRF   x1B
0D016:  CLRF   x1C
0D018:  CLRF   x1D
0D01A:  CLRF   x1E
0D01C:  CLRF   x1F
0D01E:  CLRF   x20
0D020:  CLRF   x21
0D022:  CLRF   x22
0D024:  CLRF   x23
0D026:  CLRF   x24
0D028:  CLRF   x25
0D02A:  CLRF   x26
0D02C:  CLRF   x27
0D02E:  CLRF   x28
0D030:  CLRF   x29
0D032:  CLRF   x2A
0D034:  CLRF   x2B
0D036:  CLRF   x2C
0D038:  CLRF   x2D
0D03A:  CLRF   x2E
0D03C:  CLRF   x2F
0D03E:  CLRF   x30
0D040:  CLRF   x31
0D042:  CLRF   x32
0D044:  CLRF   x33
0D046:  CLRF   x34
0D048:  CLRF   x35
0D04A:  CLRF   x36
0D04C:  CLRF   x37
0D04E:  CLRF   x38
0D050:  CLRF   x39
0D052:  CLRF   x3A
0D054:  CLRF   x3B
0D056:  CLRF   x3C
0D058:  CLRF   x3D
0D05A:  CLRF   x3E
0D05C:  CLRF   x3F
0D05E:  CLRF   x40
0D060:  CLRF   x41
0D062:  CLRF   x42
0D064:  CLRF   x43
0D066:  CLRF   x44
0D068:  CLRF   x45
0D06A:  CLRF   x46
0D06C:  CLRF   x47
0D06E:  CLRF   x48
0D070:  CLRF   x49
0D072:  CLRF   x4A
0D074:  CLRF   x4B
0D076:  CLRF   x4C
0D078:  CLRF   x4D
0D07A:  CLRF   x4E
0D07C:  CLRF   x4F
0D07E:  CLRF   x50
0D080:  CLRF   x51
0D082:  CLRF   x52
0D084:  CLRF   x53
0D086:  CLRF   x54
0D088:  CLRF   x55
0D08A:  CLRF   x56
0D08C:  CLRF   x57
0D08E:  CLRF   x58
0D090:  CLRF   x59
0D092:  CLRF   x5A
0D094:  CLRF   x5B
0D096:  CLRF   x5C
0D098:  CLRF   x5D
0D09A:  CLRF   x5E
0D09C:  CLRF   x5F
0D09E:  CLRF   x60
0D0A0:  CLRF   x61
0D0A2:  CLRF   x62
0D0A4:  CLRF   x63
0D0A6:  CLRF   x64
0D0A8:  CLRF   x65
0D0AA:  CLRF   x66
0D0AC:  CLRF   x67
0D0AE:  CLRF   x68
0D0B0:  CLRF   x69
0D0B2:  CLRF   x6A
0D0B4:  CLRF   x6B
0D0B6:  CLRF   x6C
0D0B8:  CLRF   x6D
0D0BA:  CLRF   x6E
0D0BC:  CLRF   x6F
0D0BE:  CLRF   x70
0D0C0:  CLRF   x71
0D0C2:  CLRF   x72
0D0C4:  CLRF   x73
0D0C6:  CLRF   x74
0D0C8:  CLRF   x75
0D0CA:  CLRF   x76
0D0CC:  CLRF   x77
0D0CE:  CLRF   x78
0D0D0:  CLRF   x79
0D0D2:  CLRF   x7A
0D0D4:  CLRF   x7B
0D0D6:  CLRF   x7C
0D0D8:  CLRF   x7D
0D0DA:  CLRF   x7E
0D0DC:  CLRF   x7F
0D0DE:  CLRF   x80
0D0E0:  CLRF   x81
0D0E2:  CLRF   x82
0D0E4:  CLRF   x83
0D0E6:  CLRF   x84
0D0E8:  CLRF   x85
0D0EA:  CLRF   x86
0D0EC:  CLRF   x87
0D0EE:  CLRF   x88
0D0F0:  CLRF   x89
0D0F2:  CLRF   x8A
0D0F4:  CLRF   x8B
0D0F6:  CLRF   x8C
0D0F8:  CLRF   x8D
0D0FA:  CLRF   x8E
0D0FC:  CLRF   x8F
0D0FE:  CLRF   x90
0D100:  CLRF   x91
0D102:  CLRF   x92
0D104:  CLRF   x93
0D106:  CLRF   x94
0D108:  CLRF   x95
0D10A:  CLRF   x96
0D10C:  CLRF   x97
0D10E:  CLRF   x98
0D110:  CLRF   x99
0D112:  CLRF   x9A
0D114:  CLRF   x9B
0D116:  CLRF   x9C
0D118:  CLRF   x9D
0D11A:  CLRF   x9E
0D11C:  CLRF   x9F
0D11E:  CLRF   xA0
0D120:  CLRF   xA1
0D122:  CLRF   xA2
0D124:  CLRF   xA3
0D126:  CLRF   xA4
0D128:  CLRF   xA5
0D12A:  CLRF   xA6
0D12C:  CLRF   xA7
0D12E:  CLRF   xA8
0D130:  CLRF   xA9
0D132:  CLRF   xAA
0D134:  CLRF   xAB
0D136:  CLRF   xAC
0D138:  CLRF   xAD
0D13A:  CLRF   xAE
0D13C:  CLRF   xAF
0D13E:  CLRF   xB0
0D140:  CLRF   xB1
0D142:  CLRF   xB2
....................     port1.port_num = 1;
0D144:  MOVLW  01
0D146:  MOVLB  1
0D148:  MOVWF  xB3
....................     port1.sweep_step = 0;
0D14A:  CLRF   xB5
0D14C:  CLRF   xB4
....................     port1.active = 1;
0D14E:  MOVLB  5
0D150:  BSF    xB2.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0D152:  CLRF   xB3
0D154:  CLRF   xB4
0D156:  CLRF   xB5
0D158:  CLRF   xB6
0D15A:  CLRF   xB7
0D15C:  CLRF   xB8
0D15E:  CLRF   xB9
0D160:  CLRF   xBA
0D162:  CLRF   xBB
0D164:  CLRF   xBC
0D166:  CLRF   xBD
0D168:  CLRF   xBE
0D16A:  CLRF   xBF
0D16C:  CLRF   xC0
0D16E:  CLRF   xC1
0D170:  CLRF   xC2
0D172:  CLRF   xC3
0D174:  CLRF   xC4
0D176:  CLRF   xC5
0D178:  CLRF   xC6
0D17A:  CLRF   xC7
0D17C:  CLRF   xC8
0D17E:  CLRF   xC9
0D180:  CLRF   xCA
0D182:  CLRF   xCB
0D184:  CLRF   xCC
0D186:  CLRF   xCD
0D188:  CLRF   xCE
0D18A:  CLRF   xCF
0D18C:  CLRF   xD0
0D18E:  CLRF   xD1
0D190:  CLRF   xD2
0D192:  CLRF   xD3
0D194:  CLRF   xD4
0D196:  CLRF   xD5
0D198:  CLRF   xD6
0D19A:  CLRF   xD7
0D19C:  CLRF   xD8
0D19E:  CLRF   xD9
0D1A0:  CLRF   xDA
0D1A2:  CLRF   xDB
0D1A4:  CLRF   xDC
0D1A6:  CLRF   xDD
0D1A8:  CLRF   xDE
0D1AA:  CLRF   xDF
0D1AC:  CLRF   xE0
0D1AE:  CLRF   xE1
0D1B0:  CLRF   xE2
0D1B2:  CLRF   xE3
0D1B4:  CLRF   xE4
0D1B6:  CLRF   xE5
0D1B8:  CLRF   xE6
0D1BA:  CLRF   xE7
0D1BC:  CLRF   xE8
0D1BE:  CLRF   xE9
0D1C0:  CLRF   xEA
0D1C2:  CLRF   xEB
0D1C4:  CLRF   xEC
0D1C6:  CLRF   xED
0D1C8:  CLRF   xEE
0D1CA:  CLRF   xEF
0D1CC:  CLRF   xF0
0D1CE:  CLRF   xF1
0D1D0:  CLRF   xF2
0D1D2:  CLRF   xF3
0D1D4:  CLRF   xF4
0D1D6:  CLRF   xF5
0D1D8:  CLRF   xF6
0D1DA:  CLRF   xF7
0D1DC:  CLRF   xF8
0D1DE:  CLRF   xF9
0D1E0:  CLRF   xFA
0D1E2:  CLRF   xFB
0D1E4:  CLRF   xFC
0D1E6:  CLRF   xFD
0D1E8:  CLRF   xFE
0D1EA:  CLRF   xFF
0D1EC:  MOVLB  6
0D1EE:  CLRF   x00
0D1F0:  CLRF   x01
0D1F2:  CLRF   x02
0D1F4:  CLRF   x03
0D1F6:  CLRF   x04
0D1F8:  CLRF   x05
0D1FA:  CLRF   x06
0D1FC:  CLRF   x07
0D1FE:  CLRF   x08
0D200:  CLRF   x09
0D202:  CLRF   x0A
0D204:  CLRF   x0B
0D206:  CLRF   x0C
0D208:  CLRF   x0D
0D20A:  CLRF   x0E
0D20C:  CLRF   x0F
0D20E:  CLRF   x10
0D210:  CLRF   x11
0D212:  CLRF   x12
0D214:  CLRF   x13
0D216:  CLRF   x14
0D218:  CLRF   x15
0D21A:  CLRF   x16
0D21C:  CLRF   x17
0D21E:  CLRF   x18
0D220:  CLRF   x19
0D222:  CLRF   x1A
0D224:  CLRF   x1B
0D226:  CLRF   x1C
0D228:  CLRF   x1D
0D22A:  CLRF   x1E
0D22C:  CLRF   x1F
0D22E:  CLRF   x20
0D230:  CLRF   x21
0D232:  CLRF   x22
0D234:  CLRF   x23
0D236:  CLRF   x24
0D238:  CLRF   x25
0D23A:  CLRF   x26
0D23C:  CLRF   x27
0D23E:  CLRF   x28
0D240:  CLRF   x29
0D242:  CLRF   x2A
0D244:  CLRF   x2B
0D246:  CLRF   x2C
0D248:  CLRF   x2D
0D24A:  CLRF   x2E
0D24C:  CLRF   x2F
0D24E:  CLRF   x30
0D250:  CLRF   x31
0D252:  CLRF   x32
0D254:  CLRF   x33
0D256:  CLRF   x34
0D258:  CLRF   x35
0D25A:  CLRF   x36
0D25C:  CLRF   x37
0D25E:  CLRF   x38
0D260:  CLRF   x39
0D262:  CLRF   x3A
0D264:  CLRF   x3B
0D266:  CLRF   x3C
0D268:  CLRF   x3D
0D26A:  CLRF   x3E
0D26C:  CLRF   x3F
0D26E:  CLRF   x40
0D270:  CLRF   x41
0D272:  CLRF   x42
0D274:  CLRF   x43
0D276:  CLRF   x44
0D278:  CLRF   x45
0D27A:  CLRF   x46
0D27C:  CLRF   x47
0D27E:  CLRF   x48
0D280:  CLRF   x49
0D282:  CLRF   x4A
0D284:  CLRF   x4B
0D286:  CLRF   x4C
0D288:  CLRF   x4D
0D28A:  CLRF   x4E
0D28C:  CLRF   x4F
0D28E:  CLRF   x50
0D290:  CLRF   x51
0D292:  CLRF   x52
0D294:  CLRF   x53
0D296:  CLRF   x54
0D298:  CLRF   x55
0D29A:  CLRF   x56
0D29C:  CLRF   x57
0D29E:  CLRF   x58
0D2A0:  CLRF   x59
0D2A2:  CLRF   x5A
0D2A4:  CLRF   x5B
0D2A6:  CLRF   x5C
0D2A8:  CLRF   x5D
0D2AA:  CLRF   x5E
0D2AC:  CLRF   x5F
0D2AE:  CLRF   x60
0D2B0:  CLRF   x61
0D2B2:  CLRF   x62
0D2B4:  CLRF   x63
0D2B6:  CLRF   x64
0D2B8:  CLRF   x65
0D2BA:  CLRF   x66
0D2BC:  CLRF   x67
0D2BE:  CLRF   x68
0D2C0:  CLRF   x69
0D2C2:  CLRF   x6A
0D2C4:  CLRF   x6B
0D2C6:  CLRF   x6C
0D2C8:  CLRF   x6D
0D2CA:  CLRF   x6E
0D2CC:  CLRF   x6F
0D2CE:  CLRF   x70
0D2D0:  CLRF   x71
0D2D2:  CLRF   x72
0D2D4:  CLRF   x73
0D2D6:  CLRF   x74
0D2D8:  CLRF   x75
0D2DA:  CLRF   x76
0D2DC:  CLRF   x77
0D2DE:  CLRF   x78
0D2E0:  CLRF   x79
0D2E2:  CLRF   x7A
0D2E4:  CLRF   x7B
0D2E6:  CLRF   x7C
0D2E8:  CLRF   x7D
0D2EA:  CLRF   x7E
0D2EC:  CLRF   x7F
0D2EE:  CLRF   x80
0D2F0:  CLRF   x81
0D2F2:  CLRF   x82
0D2F4:  CLRF   x83
0D2F6:  CLRF   x84
0D2F8:  CLRF   x85
0D2FA:  CLRF   x86
0D2FC:  CLRF   x87
0D2FE:  CLRF   x88
0D300:  CLRF   x89
0D302:  CLRF   x8A
0D304:  CLRF   x8B
0D306:  CLRF   x8C
0D308:  CLRF   x8D
0D30A:  CLRF   x8E
0D30C:  CLRF   x8F
0D30E:  CLRF   x90
0D310:  CLRF   x91
0D312:  CLRF   x92
0D314:  CLRF   x93
0D316:  CLRF   x94
0D318:  CLRF   x95
0D31A:  CLRF   x96
0D31C:  CLRF   x97
0D31E:  CLRF   x98
0D320:  CLRF   x99
0D322:  CLRF   x9A
0D324:  CLRF   x9B
0D326:  CLRF   x9C
0D328:  CLRF   x9D
0D32A:  CLRF   x9E
0D32C:  CLRF   x9F
0D32E:  CLRF   xA0
0D330:  CLRF   xA1
0D332:  CLRF   xA2
0D334:  CLRF   xA3
0D336:  CLRF   xA4
0D338:  CLRF   xA5
0D33A:  CLRF   xA6
0D33C:  CLRF   xA7
0D33E:  CLRF   xA8
0D340:  CLRF   xA9
0D342:  CLRF   xAA
0D344:  CLRF   xAB
0D346:  CLRF   xAC
0D348:  CLRF   xAD
0D34A:  CLRF   xAE
0D34C:  CLRF   xAF
0D34E:  CLRF   xB0
0D350:  CLRF   xB1
0D352:  CLRF   xB2
0D354:  CLRF   xB3
0D356:  CLRF   xB4
0D358:  CLRF   xB5
0D35A:  CLRF   xB6
0D35C:  CLRF   xB7
0D35E:  CLRF   xB8
0D360:  CLRF   xB9
0D362:  CLRF   xBA
0D364:  CLRF   xBB
0D366:  CLRF   xBC
0D368:  CLRF   xBD
0D36A:  CLRF   xBE
0D36C:  CLRF   xBF
0D36E:  CLRF   xC0
0D370:  CLRF   xC1
0D372:  CLRF   xC2
0D374:  CLRF   xC3
0D376:  CLRF   xC4
0D378:  CLRF   xC5
0D37A:  CLRF   xC6
0D37C:  CLRF   xC7
0D37E:  CLRF   xC8
0D380:  CLRF   xC9
0D382:  CLRF   xCA
0D384:  CLRF   xCB
0D386:  CLRF   xCC
0D388:  CLRF   xCD
0D38A:  CLRF   xCE
0D38C:  CLRF   xCF
0D38E:  CLRF   xD0
0D390:  CLRF   xD1
0D392:  CLRF   xD2
0D394:  CLRF   xD3
0D396:  CLRF   xD4
0D398:  CLRF   xD5
0D39A:  CLRF   xD6
0D39C:  CLRF   xD7
0D39E:  CLRF   xD8
0D3A0:  CLRF   xD9
0D3A2:  CLRF   xDA
0D3A4:  CLRF   xDB
0D3A6:  CLRF   xDC
0D3A8:  CLRF   xDD
0D3AA:  CLRF   xDE
0D3AC:  CLRF   xDF
0D3AE:  CLRF   xE0
0D3B0:  CLRF   xE1
0D3B2:  CLRF   xE2
0D3B4:  CLRF   xE3
0D3B6:  CLRF   xE4
0D3B8:  CLRF   xE5
0D3BA:  CLRF   xE6
0D3BC:  CLRF   xE7
0D3BE:  CLRF   xE8
0D3C0:  CLRF   xE9
0D3C2:  CLRF   xEA
0D3C4:  CLRF   xEB
0D3C6:  CLRF   xEC
0D3C8:  CLRF   xED
0D3CA:  CLRF   xEE
0D3CC:  CLRF   xEF
0D3CE:  CLRF   xF0
0D3D0:  CLRF   xF1
0D3D2:  CLRF   xF2
0D3D4:  CLRF   xF3
0D3D6:  CLRF   xF4
0D3D8:  CLRF   xF5
0D3DA:  CLRF   xF6
0D3DC:  CLRF   xF7
0D3DE:  CLRF   xF8
0D3E0:  CLRF   xF9
0D3E2:  CLRF   xFA
0D3E4:  CLRF   xFB
0D3E6:  CLRF   xFC
0D3E8:  CLRF   xFD
0D3EA:  CLRF   xFE
0D3EC:  CLRF   xFF
0D3EE:  MOVLB  7
0D3F0:  CLRF   x00
0D3F2:  CLRF   x01
0D3F4:  CLRF   x02
0D3F6:  CLRF   x03
0D3F8:  CLRF   x04
0D3FA:  CLRF   x05
0D3FC:  CLRF   x06
0D3FE:  CLRF   x07
0D400:  CLRF   x08
0D402:  CLRF   x09
0D404:  CLRF   x0A
0D406:  CLRF   x0B
0D408:  CLRF   x0C
0D40A:  CLRF   x0D
0D40C:  CLRF   x0E
0D40E:  CLRF   x0F
0D410:  CLRF   x10
0D412:  CLRF   x11
0D414:  CLRF   x12
0D416:  CLRF   x13
0D418:  CLRF   x14
0D41A:  CLRF   x15
0D41C:  CLRF   x16
0D41E:  CLRF   x17
0D420:  CLRF   x18
0D422:  CLRF   x19
0D424:  CLRF   x1A
0D426:  CLRF   x1B
0D428:  CLRF   x1C
0D42A:  CLRF   x1D
0D42C:  CLRF   x1E
0D42E:  CLRF   x1F
0D430:  CLRF   x20
0D432:  CLRF   x21
0D434:  CLRF   x22
0D436:  CLRF   x23
0D438:  CLRF   x24
0D43A:  CLRF   x25
0D43C:  CLRF   x26
0D43E:  CLRF   x27
0D440:  CLRF   x28
0D442:  CLRF   x29
0D444:  CLRF   x2A
0D446:  CLRF   x2B
0D448:  CLRF   x2C
0D44A:  CLRF   x2D
0D44C:  CLRF   x2E
0D44E:  CLRF   x2F
0D450:  CLRF   x30
0D452:  CLRF   x31
0D454:  CLRF   x32
0D456:  CLRF   x33
0D458:  CLRF   x34
0D45A:  CLRF   x35
0D45C:  CLRF   x36
0D45E:  CLRF   x37
0D460:  CLRF   x38
0D462:  CLRF   x39
0D464:  CLRF   x3A
0D466:  CLRF   x3B
0D468:  CLRF   x3C
0D46A:  CLRF   x3D
0D46C:  CLRF   x3E
0D46E:  CLRF   x3F
0D470:  CLRF   x40
0D472:  CLRF   x41
0D474:  CLRF   x42
0D476:  CLRF   x43
0D478:  CLRF   x44
0D47A:  CLRF   x45
0D47C:  CLRF   x46
0D47E:  CLRF   x47
0D480:  CLRF   x48
0D482:  CLRF   x49
0D484:  CLRF   x4A
0D486:  CLRF   x4B
0D488:  CLRF   x4C
0D48A:  CLRF   x4D
0D48C:  CLRF   x4E
0D48E:  CLRF   x4F
0D490:  CLRF   x50
0D492:  CLRF   x51
0D494:  CLRF   x52
0D496:  CLRF   x53
0D498:  CLRF   x54
0D49A:  CLRF   x55
0D49C:  CLRF   x56
0D49E:  CLRF   x57
0D4A0:  CLRF   x58
0D4A2:  CLRF   x59
0D4A4:  CLRF   x5A
0D4A6:  CLRF   x5B
0D4A8:  CLRF   x5C
0D4AA:  CLRF   x5D
0D4AC:  CLRF   x5E
0D4AE:  CLRF   x5F
0D4B0:  CLRF   x60
0D4B2:  CLRF   x61
0D4B4:  CLRF   x62
0D4B6:  CLRF   x63
0D4B8:  CLRF   x64
0D4BA:  CLRF   x65
0D4BC:  CLRF   x66
0D4BE:  CLRF   x67
0D4C0:  CLRF   x68
0D4C2:  CLRF   x69
0D4C4:  CLRF   x6A
0D4C6:  CLRF   x6B
0D4C8:  CLRF   x6C
0D4CA:  CLRF   x6D
0D4CC:  CLRF   x6E
0D4CE:  CLRF   x6F
0D4D0:  CLRF   x70
0D4D2:  CLRF   x71
0D4D4:  CLRF   x72
0D4D6:  CLRF   x73
0D4D8:  CLRF   x74
0D4DA:  CLRF   x75
0D4DC:  CLRF   x76
0D4DE:  CLRF   x77
0D4E0:  CLRF   x78
0D4E2:  CLRF   x79
0D4E4:  CLRF   x7A
0D4E6:  CLRF   x7B
0D4E8:  CLRF   x7C
0D4EA:  CLRF   x7D
0D4EC:  CLRF   x7E
0D4EE:  CLRF   x7F
0D4F0:  CLRF   x80
0D4F2:  CLRF   x81
0D4F4:  CLRF   x82
0D4F6:  CLRF   x83
0D4F8:  CLRF   x84
0D4FA:  CLRF   x85
0D4FC:  CLRF   x86
0D4FE:  CLRF   x87
0D500:  CLRF   x88
0D502:  CLRF   x89
0D504:  CLRF   x8A
0D506:  CLRF   x8B
0D508:  CLRF   x8C
0D50A:  CLRF   x8D
0D50C:  CLRF   x8E
0D50E:  CLRF   x8F
0D510:  CLRF   x90
0D512:  CLRF   x91
0D514:  CLRF   x92
0D516:  CLRF   x93
0D518:  CLRF   x94
0D51A:  CLRF   x95
0D51C:  CLRF   x96
0D51E:  CLRF   x97
0D520:  CLRF   x98
0D522:  CLRF   x99
0D524:  CLRF   x9A
0D526:  CLRF   x9B
0D528:  CLRF   x9C
0D52A:  CLRF   x9D
0D52C:  CLRF   x9E
0D52E:  CLRF   x9F
0D530:  CLRF   xA0
0D532:  CLRF   xA1
0D534:  CLRF   xA2
0D536:  CLRF   xA3
0D538:  CLRF   xA4
0D53A:  CLRF   xA5
0D53C:  CLRF   xA6
0D53E:  CLRF   xA7
0D540:  CLRF   xA8
0D542:  CLRF   xA9
0D544:  CLRF   xAA
0D546:  CLRF   xAB
0D548:  CLRF   xAC
0D54A:  CLRF   xAD
0D54C:  CLRF   xAE
0D54E:  CLRF   xAF
0D550:  CLRF   xB0
0D552:  CLRF   xB1
0D554:  CLRF   xB2
0D556:  CLRF   xB3
0D558:  CLRF   xB4
0D55A:  CLRF   xB5
0D55C:  CLRF   xB6
0D55E:  CLRF   xB7
0D560:  CLRF   xB8
0D562:  CLRF   xB9
0D564:  CLRF   xBA
0D566:  CLRF   xBB
0D568:  CLRF   xBC
0D56A:  CLRF   xBD
0D56C:  CLRF   xBE
0D56E:  CLRF   xBF
0D570:  CLRF   xC0
0D572:  CLRF   xC1
0D574:  CLRF   xC2
0D576:  CLRF   xC3
0D578:  CLRF   xC4
0D57A:  CLRF   xC5
0D57C:  CLRF   xC6
0D57E:  CLRF   xC7
0D580:  CLRF   xC8
0D582:  CLRF   xC9
0D584:  CLRF   xCA
0D586:  CLRF   xCB
0D588:  CLRF   xCC
0D58A:  CLRF   xCD
0D58C:  CLRF   xCE
0D58E:  CLRF   xCF
0D590:  CLRF   xD0
0D592:  CLRF   xD1
0D594:  CLRF   xD2
0D596:  CLRF   xD3
0D598:  CLRF   xD4
0D59A:  CLRF   xD5
0D59C:  CLRF   xD6
0D59E:  CLRF   xD7
0D5A0:  CLRF   xD8
0D5A2:  CLRF   xD9
0D5A4:  CLRF   xDA
0D5A6:  CLRF   xDB
0D5A8:  CLRF   xDC
0D5AA:  CLRF   xDD
0D5AC:  CLRF   xDE
0D5AE:  CLRF   xDF
0D5B0:  CLRF   xE0
0D5B2:  CLRF   xE1
0D5B4:  CLRF   xE2
0D5B6:  CLRF   xE3
0D5B8:  CLRF   xE4
0D5BA:  CLRF   xE5
0D5BC:  CLRF   xE6
0D5BE:  CLRF   xE7
0D5C0:  CLRF   xE8
0D5C2:  CLRF   xE9
0D5C4:  CLRF   xEA
0D5C6:  CLRF   xEB
0D5C8:  CLRF   xEC
0D5CA:  CLRF   xED
0D5CC:  CLRF   xEE
0D5CE:  CLRF   xEF
0D5D0:  CLRF   xF0
0D5D2:  CLRF   xF1
0D5D4:  CLRF   xF2
0D5D6:  CLRF   xF3
0D5D8:  CLRF   xF4
0D5DA:  CLRF   xF5
0D5DC:  CLRF   xF6
0D5DE:  CLRF   xF7
0D5E0:  CLRF   xF8
0D5E2:  CLRF   xF9
0D5E4:  CLRF   xFA
0D5E6:  CLRF   xFB
0D5E8:  CLRF   xFC
0D5EA:  CLRF   xFD
0D5EC:  CLRF   xFE
0D5EE:  CLRF   xFF
0D5F0:  MOVLB  8
0D5F2:  CLRF   x00
0D5F4:  CLRF   x01
0D5F6:  CLRF   x02
0D5F8:  CLRF   x03
0D5FA:  CLRF   x04
0D5FC:  CLRF   x05
0D5FE:  CLRF   x06
0D600:  CLRF   x07
0D602:  CLRF   x08
0D604:  CLRF   x09
0D606:  CLRF   x0A
0D608:  CLRF   x0B
0D60A:  CLRF   x0C
0D60C:  CLRF   x0D
0D60E:  CLRF   x0E
0D610:  CLRF   x0F
0D612:  CLRF   x10
0D614:  CLRF   x11
0D616:  CLRF   x12
0D618:  CLRF   x13
0D61A:  CLRF   x14
0D61C:  CLRF   x15
0D61E:  CLRF   x16
0D620:  CLRF   x17
0D622:  CLRF   x18
0D624:  CLRF   x19
0D626:  CLRF   x1A
0D628:  CLRF   x1B
0D62A:  CLRF   x1C
0D62C:  CLRF   x1D
0D62E:  CLRF   x1E
0D630:  CLRF   x1F
0D632:  CLRF   x20
0D634:  CLRF   x21
0D636:  CLRF   x22
0D638:  CLRF   x23
0D63A:  CLRF   x24
0D63C:  CLRF   x25
0D63E:  CLRF   x26
0D640:  CLRF   x27
0D642:  CLRF   x28
0D644:  CLRF   x29
0D646:  CLRF   x2A
0D648:  CLRF   x2B
0D64A:  CLRF   x2C
0D64C:  CLRF   x2D
0D64E:  CLRF   x2E
0D650:  CLRF   x2F
0D652:  CLRF   x30
0D654:  CLRF   x31
0D656:  CLRF   x32
0D658:  CLRF   x33
0D65A:  CLRF   x34
0D65C:  CLRF   x35
0D65E:  CLRF   x36
0D660:  CLRF   x37
0D662:  CLRF   x38
0D664:  CLRF   x39
0D666:  CLRF   x3A
0D668:  CLRF   x3B
0D66A:  CLRF   x3C
0D66C:  CLRF   x3D
0D66E:  CLRF   x3E
0D670:  CLRF   x3F
0D672:  CLRF   x40
0D674:  CLRF   x41
0D676:  CLRF   x42
0D678:  CLRF   x43
0D67A:  CLRF   x44
0D67C:  CLRF   x45
0D67E:  CLRF   x46
0D680:  CLRF   x47
0D682:  CLRF   x48
0D684:  CLRF   x49
0D686:  CLRF   x4A
0D688:  CLRF   x4B
0D68A:  CLRF   x4C
0D68C:  CLRF   x4D
0D68E:  CLRF   x4E
0D690:  CLRF   x4F
0D692:  CLRF   x50
0D694:  CLRF   x51
0D696:  CLRF   x52
0D698:  CLRF   x53
0D69A:  CLRF   x54
0D69C:  CLRF   x55
0D69E:  CLRF   x56
0D6A0:  CLRF   x57
0D6A2:  CLRF   x58
0D6A4:  CLRF   x59
0D6A6:  CLRF   x5A
0D6A8:  CLRF   x5B
0D6AA:  CLRF   x5C
0D6AC:  CLRF   x5D
0D6AE:  CLRF   x5E
0D6B0:  CLRF   x5F
0D6B2:  CLRF   x60
0D6B4:  CLRF   x61
0D6B6:  CLRF   x62
0D6B8:  CLRF   x63
0D6BA:  CLRF   x64
0D6BC:  CLRF   x65
0D6BE:  CLRF   x66
0D6C0:  CLRF   x67
0D6C2:  CLRF   x68
0D6C4:  CLRF   x69
0D6C6:  CLRF   x6A
0D6C8:  CLRF   x6B
0D6CA:  CLRF   x6C
0D6CC:  CLRF   x6D
0D6CE:  CLRF   x6E
0D6D0:  CLRF   x6F
0D6D2:  CLRF   x70
0D6D4:  CLRF   x71
0D6D6:  CLRF   x72
0D6D8:  CLRF   x73
0D6DA:  CLRF   x74
0D6DC:  CLRF   x75
0D6DE:  CLRF   x76
0D6E0:  CLRF   x77
0D6E2:  CLRF   x78
0D6E4:  CLRF   x79
0D6E6:  CLRF   x7A
0D6E8:  CLRF   x7B
0D6EA:  CLRF   x7C
0D6EC:  CLRF   x7D
0D6EE:  CLRF   x7E
0D6F0:  CLRF   x7F
0D6F2:  CLRF   x80
0D6F4:  CLRF   x81
0D6F6:  CLRF   x82
0D6F8:  CLRF   x83
0D6FA:  CLRF   x84
0D6FC:  CLRF   x85
0D6FE:  CLRF   x86
0D700:  CLRF   x87
0D702:  CLRF   x88
0D704:  CLRF   x89
0D706:  CLRF   x8A
0D708:  CLRF   x8B
0D70A:  CLRF   x8C
0D70C:  CLRF   x8D
0D70E:  CLRF   x8E
0D710:  CLRF   x8F
0D712:  CLRF   x90
0D714:  CLRF   x91
0D716:  CLRF   x92
0D718:  CLRF   x93
0D71A:  CLRF   x94
0D71C:  CLRF   x95
0D71E:  CLRF   x96
0D720:  CLRF   x97
0D722:  CLRF   x98
0D724:  CLRF   x99
0D726:  CLRF   x9A
0D728:  CLRF   x9B
0D72A:  CLRF   x9C
0D72C:  CLRF   x9D
0D72E:  CLRF   x9E
0D730:  CLRF   x9F
0D732:  CLRF   xA0
0D734:  CLRF   xA1
0D736:  CLRF   xA2
0D738:  CLRF   xA3
0D73A:  CLRF   xA4
0D73C:  CLRF   xA5
0D73E:  CLRF   xA6
0D740:  CLRF   xA7
0D742:  CLRF   xA8
0D744:  CLRF   xA9
0D746:  CLRF   xAA
0D748:  CLRF   xAB
0D74A:  CLRF   xAC
0D74C:  CLRF   xAD
0D74E:  CLRF   xAE
0D750:  CLRF   xAF
0D752:  CLRF   xB0
0D754:  CLRF   xB1
0D756:  CLRF   xB2
0D758:  CLRF   xB3
0D75A:  CLRF   xB4
0D75C:  CLRF   xB5
0D75E:  CLRF   xB6
0D760:  CLRF   xB7
0D762:  CLRF   xB8
0D764:  CLRF   xB9
0D766:  CLRF   xBA
0D768:  CLRF   xBB
0D76A:  CLRF   xBC
0D76C:  CLRF   xBD
0D76E:  CLRF   xBE
0D770:  CLRF   xBF
0D772:  CLRF   xC0
0D774:  CLRF   xC1
0D776:  CLRF   xC2
0D778:  CLRF   xC3
0D77A:  CLRF   xC4
0D77C:  CLRF   xC5
0D77E:  CLRF   xC6
0D780:  CLRF   xC7
0D782:  CLRF   xC8
0D784:  CLRF   xC9
0D786:  CLRF   xCA
0D788:  CLRF   xCB
0D78A:  CLRF   xCC
0D78C:  CLRF   xCD
0D78E:  CLRF   xCE
0D790:  CLRF   xCF
0D792:  CLRF   xD0
0D794:  CLRF   xD1
0D796:  CLRF   xD2
0D798:  CLRF   xD3
0D79A:  CLRF   xD4
0D79C:  CLRF   xD5
0D79E:  CLRF   xD6
0D7A0:  CLRF   xD7
0D7A2:  CLRF   xD8
0D7A4:  CLRF   xD9
0D7A6:  CLRF   xDA
0D7A8:  CLRF   xDB
0D7AA:  CLRF   xDC
0D7AC:  CLRF   xDD
0D7AE:  CLRF   xDE
0D7B0:  CLRF   xDF
0D7B2:  CLRF   xE0
0D7B4:  CLRF   xE1
0D7B6:  CLRF   xE2
0D7B8:  CLRF   xE3
0D7BA:  CLRF   xE4
0D7BC:  CLRF   xE5
0D7BE:  CLRF   xE6
0D7C0:  CLRF   xE7
0D7C2:  CLRF   xE8
0D7C4:  CLRF   xE9
0D7C6:  CLRF   xEA
0D7C8:  CLRF   xEB
0D7CA:  CLRF   xEC
0D7CC:  CLRF   xED
0D7CE:  CLRF   xEE
0D7D0:  CLRF   xEF
0D7D2:  CLRF   xF0
0D7D4:  CLRF   xF1
0D7D6:  CLRF   xF2
0D7D8:  CLRF   xF3
0D7DA:  CLRF   xF4
0D7DC:  CLRF   xF5
0D7DE:  CLRF   xF6
0D7E0:  CLRF   xF7
0D7E2:  CLRF   xF8
0D7E4:  CLRF   xF9
0D7E6:  CLRF   xFA
0D7E8:  CLRF   xFB
0D7EA:  CLRF   xFC
0D7EC:  CLRF   xFD
0D7EE:  CLRF   xFE
0D7F0:  CLRF   xFF
0D7F2:  MOVLB  9
0D7F4:  CLRF   x00
0D7F6:  CLRF   x01
0D7F8:  CLRF   x02
0D7FA:  CLRF   x03
0D7FC:  CLRF   x04
0D7FE:  CLRF   x05
0D800:  CLRF   x06
0D802:  CLRF   x07
0D804:  CLRF   x08
0D806:  CLRF   x09
0D808:  CLRF   x0A
0D80A:  CLRF   x0B
0D80C:  CLRF   x0C
0D80E:  CLRF   x0D
0D810:  CLRF   x0E
0D812:  CLRF   x0F
0D814:  CLRF   x10
0D816:  CLRF   x11
0D818:  CLRF   x12
0D81A:  CLRF   x13
0D81C:  CLRF   x14
0D81E:  CLRF   x15
0D820:  CLRF   x16
0D822:  CLRF   x17
0D824:  CLRF   x18
0D826:  CLRF   x19
0D828:  CLRF   x1A
0D82A:  CLRF   x1B
0D82C:  CLRF   x1C
0D82E:  CLRF   x1D
0D830:  CLRF   x1E
0D832:  CLRF   x1F
0D834:  CLRF   x20
0D836:  CLRF   x21
0D838:  CLRF   x22
0D83A:  CLRF   x23
0D83C:  CLRF   x24
0D83E:  CLRF   x25
0D840:  CLRF   x26
0D842:  CLRF   x27
0D844:  CLRF   x28
0D846:  CLRF   x29
0D848:  CLRF   x2A
0D84A:  CLRF   x2B
0D84C:  CLRF   x2C
0D84E:  CLRF   x2D
0D850:  CLRF   x2E
0D852:  CLRF   x2F
0D854:  CLRF   x30
0D856:  CLRF   x31
0D858:  CLRF   x32
0D85A:  CLRF   x33
0D85C:  CLRF   x34
0D85E:  CLRF   x35
0D860:  CLRF   x36
0D862:  CLRF   x37
0D864:  CLRF   x38
0D866:  CLRF   x39
0D868:  CLRF   x3A
0D86A:  CLRF   x3B
0D86C:  CLRF   x3C
0D86E:  CLRF   x3D
0D870:  CLRF   x3E
0D872:  CLRF   x3F
0D874:  CLRF   x40
0D876:  CLRF   x41
0D878:  CLRF   x42
0D87A:  CLRF   x43
0D87C:  CLRF   x44
0D87E:  CLRF   x45
0D880:  CLRF   x46
0D882:  CLRF   x47
0D884:  CLRF   x48
0D886:  CLRF   x49
0D888:  CLRF   x4A
0D88A:  CLRF   x4B
0D88C:  CLRF   x4C
0D88E:  CLRF   x4D
0D890:  CLRF   x4E
0D892:  CLRF   x4F
0D894:  CLRF   x50
0D896:  CLRF   x51
0D898:  CLRF   x52
0D89A:  CLRF   x53
0D89C:  CLRF   x54
0D89E:  CLRF   x55
0D8A0:  CLRF   x56
0D8A2:  CLRF   x57
0D8A4:  CLRF   x58
0D8A6:  CLRF   x59
0D8A8:  CLRF   x5A
0D8AA:  CLRF   x5B
0D8AC:  CLRF   x5C
0D8AE:  CLRF   x5D
0D8B0:  CLRF   x5E
0D8B2:  CLRF   x5F
0D8B4:  CLRF   x60
0D8B6:  CLRF   x61
0D8B8:  CLRF   x62
0D8BA:  CLRF   x63
0D8BC:  CLRF   x64
0D8BE:  CLRF   x65
0D8C0:  CLRF   x66
0D8C2:  CLRF   x67
0D8C4:  CLRF   x68
0D8C6:  CLRF   x69
0D8C8:  CLRF   x6A
0D8CA:  CLRF   x6B
0D8CC:  CLRF   x6C
0D8CE:  CLRF   x6D
0D8D0:  CLRF   x6E
0D8D2:  CLRF   x6F
0D8D4:  CLRF   x70
0D8D6:  CLRF   x71
0D8D8:  CLRF   x72
0D8DA:  CLRF   x73
0D8DC:  CLRF   x74
0D8DE:  CLRF   x75
0D8E0:  CLRF   x76
0D8E2:  CLRF   x77
0D8E4:  CLRF   x78
0D8E6:  CLRF   x79
0D8E8:  CLRF   x7A
0D8EA:  CLRF   x7B
0D8EC:  CLRF   x7C
0D8EE:  CLRF   x7D
0D8F0:  CLRF   x7E
0D8F2:  CLRF   x7F
0D8F4:  CLRF   x80
0D8F6:  CLRF   x81
0D8F8:  CLRF   x82
0D8FA:  CLRF   x83
0D8FC:  CLRF   x84
0D8FE:  CLRF   x85
0D900:  CLRF   x86
0D902:  CLRF   x87
0D904:  CLRF   x88
0D906:  CLRF   x89
0D908:  CLRF   x8A
0D90A:  CLRF   x8B
0D90C:  CLRF   x8C
0D90E:  CLRF   x8D
0D910:  CLRF   x8E
0D912:  CLRF   x8F
0D914:  CLRF   x90
0D916:  CLRF   x91
0D918:  CLRF   x92
0D91A:  CLRF   x93
0D91C:  CLRF   x94
0D91E:  CLRF   x95
0D920:  CLRF   x96
0D922:  CLRF   x97
0D924:  CLRF   x98
0D926:  CLRF   x99
0D928:  CLRF   x9A
0D92A:  CLRF   x9B
0D92C:  CLRF   x9C
0D92E:  CLRF   x9D
0D930:  CLRF   x9E
0D932:  CLRF   x9F
0D934:  CLRF   xA0
0D936:  CLRF   xA1
0D938:  CLRF   xA2
0D93A:  CLRF   xA3
0D93C:  CLRF   xA4
0D93E:  CLRF   xA5
0D940:  CLRF   xA6
0D942:  CLRF   xA7
0D944:  CLRF   xA8
0D946:  CLRF   xA9
0D948:  CLRF   xAA
0D94A:  CLRF   xAB
0D94C:  CLRF   xAC
0D94E:  CLRF   xAD
0D950:  CLRF   xAE
0D952:  CLRF   xAF
0D954:  CLRF   xB0
0D956:  CLRF   xB1
0D958:  CLRF   xB2
....................     port2.port_num = 2; 
0D95A:  MOVLW  02
0D95C:  MOVLB  5
0D95E:  MOVWF  xB3
....................     port2.sweep_step = 0;
0D960:  CLRF   xB5
0D962:  CLRF   xB4
....................     port2.active = 1;
0D964:  MOVLB  9
0D966:  BSF    xB2.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0D968:  CLRF   xB4
0D96A:  MOVLW  01
0D96C:  MOVWF  xB3
0D96E:  MOVLB  0
0D970:  CALL   8F40
0D974:  MOVFF  02,03
0D978:  MOVF   01,W
0D97A:  MOVWF  FE1
0D97C:  MOVFF  03,FE2
0D980:  MOVLW  09
0D982:  MOVWF  FEA
0D984:  MOVLW  B5
0D986:  MOVWF  FE9
0D988:  MOVLW  0C
0D98A:  MOVWF  01
0D98C:  MOVFF  FE6,FEE
0D990:  DECFSZ 01,F
0D992:  GOTO   D98C
.................... 
....................     while (port1.active || port2.active)
0D996:  MOVLB  5
0D998:  BTFSS  xB2.0
0D99A:  BRA    D9A2
0D99C:  MOVLB  0
0D99E:  GOTO   D9B2
0D9A2:  MOVLB  0
0D9A4:  MOVLB  9
0D9A6:  BTFSC  xB2.0
0D9A8:  BRA    D9B0
0D9AA:  MOVLB  0
0D9AC:  GOTO   DC96
0D9B0:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0D9B2:  MOVLB  5
0D9B4:  BTFSC  xB2.0
0D9B6:  BRA    D9BE
0D9B8:  MOVLB  0
0D9BA:  GOTO   D9D0
0D9BE:  MOVLB  0
....................             mcp4901_1_write(count);
0D9C0:  MOVFF  9B4,9DD
0D9C4:  MOVFF  9B3,9DC
0D9C8:  CALL   25C4
....................         } else {
0D9CC:  GOTO   D9DC
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0D9D0:  MOVLB  9
0D9D2:  CLRF   xDD
0D9D4:  CLRF   xDC
0D9D6:  MOVLB  0
0D9D8:  CALL   25C4
....................         }
.................... 
....................         if (port2.active) {
0D9DC:  MOVLB  9
0D9DE:  BTFSC  xB2.0
0D9E0:  BRA    D9E8
0D9E2:  MOVLB  0
0D9E4:  GOTO   D9FA
0D9E8:  MOVLB  0
....................             mcp4901_2_write(count);
0D9EA:  MOVFF  9B4,9DD
0D9EE:  MOVFF  9B3,9DC
0D9F2:  CALL   2602
....................         } else {
0D9F6:  GOTO   DA06
....................             mcp4901_2_write(0);
0D9FA:  MOVLB  9
0D9FC:  CLRF   xDD
0D9FE:  CLRF   xDC
0DA00:  MOVLB  0
0DA02:  CALL   2602
....................         }
.................... 
....................         delay_us(100);
0DA06:  MOVLW  85
0DA08:  MOVWF  00
0DA0A:  DECFSZ 00,F
0DA0C:  BRA    DA0A
.................... 
....................         // データ取得
....................         if (port1.active) {
0DA0E:  MOVLB  5
0DA10:  BTFSC  xB2.0
0DA12:  BRA    DA1A
0DA14:  MOVLB  0
0DA16:  GOTO   DB3A
0DA1A:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DA1C:  MOVLB  9
0DA1E:  RLCF   xB3,W
0DA20:  MOVWF  02
0DA22:  RLCF   xB4,W
0DA24:  MOVWF  03
0DA26:  RLCF   02,F
0DA28:  RLCF   03,F
0DA2A:  MOVLW  FC
0DA2C:  ANDWF  02,F
0DA2E:  MOVF   02,W
0DA30:  ADDLW  B6
0DA32:  MOVWF  01
0DA34:  MOVLW  01
0DA36:  ADDWFC 03,F
0DA38:  MOVF   01,W
0DA3A:  MOVWF  xC4
0DA3C:  MOVFF  03,9C5
0DA40:  MOVLW  02
0DA42:  MOVWF  xEE
0DA44:  MOVLB  0
0DA46:  CALL   2214
0DA4A:  MOVFF  9C5,FEA
0DA4E:  MOVFF  9C4,FE9
0DA52:  MOVFF  02,FEC
0DA56:  MOVF   FED,F
0DA58:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DA5C:  MOVLB  9
0DA5E:  RLCF   xB3,W
0DA60:  MOVWF  02
0DA62:  RLCF   xB4,W
0DA64:  MOVWF  03
0DA66:  RLCF   02,F
0DA68:  RLCF   03,F
0DA6A:  MOVLW  FC
0DA6C:  ANDWF  02,F
0DA6E:  MOVF   02,W
0DA70:  ADDLW  03
0DA72:  MOVWF  xC2
0DA74:  MOVLW  00
0DA76:  ADDWFC 03,W
0DA78:  MOVWF  xC3
0DA7A:  MOVLW  02
0DA7C:  ADDWF  xC2,W
0DA7E:  MOVWF  01
0DA80:  MOVLW  00
0DA82:  ADDWFC xC3,W
0DA84:  MOVWF  03
0DA86:  MOVF   01,W
0DA88:  ADDLW  B3
0DA8A:  MOVWF  01
0DA8C:  MOVLW  01
0DA8E:  ADDWFC 03,F
0DA90:  MOVF   01,W
0DA92:  MOVWF  xC2
0DA94:  MOVFF  03,9C3
0DA98:  MOVLW  01
0DA9A:  MOVWF  xEE
0DA9C:  MOVLB  0
0DA9E:  CALL   2214
0DAA2:  MOVFF  9C3,FEA
0DAA6:  MOVFF  9C2,FE9
0DAAA:  MOVFF  02,FEC
0DAAE:  MOVF   FED,F
0DAB0:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DAB4:  MOVLW  01
0DAB6:  MOVLB  9
0DAB8:  ADDWF  xB3,W
0DABA:  MOVLB  1
0DABC:  MOVWF  xB4
0DABE:  MOVLW  00
0DAC0:  MOVLB  9
0DAC2:  ADDWFC xB4,W
0DAC4:  MOVLB  1
0DAC6:  MOVWF  xB5
....................             if (port1.data_buffer[count].current < curr_limit) {
0DAC8:  MOVLB  9
0DACA:  RLCF   xB3,W
0DACC:  MOVWF  02
0DACE:  RLCF   xB4,W
0DAD0:  MOVWF  03
0DAD2:  RLCF   02,F
0DAD4:  RLCF   03,F
0DAD6:  MOVLW  FC
0DAD8:  ANDWF  02,F
0DADA:  MOVF   02,W
0DADC:  ADDLW  03
0DADE:  MOVWF  xC2
0DAE0:  MOVLW  00
0DAE2:  ADDWFC 03,W
0DAE4:  MOVWF  xC3
0DAE6:  MOVLW  02
0DAE8:  ADDWF  xC2,W
0DAEA:  MOVWF  01
0DAEC:  MOVLW  00
0DAEE:  ADDWFC xC3,W
0DAF0:  MOVWF  03
0DAF2:  MOVF   01,W
0DAF4:  ADDLW  B3
0DAF6:  MOVWF  FE9
0DAF8:  MOVLW  01
0DAFA:  ADDWFC 03,W
0DAFC:  MOVWF  FEA
0DAFE:  MOVFF  FEC,9C3
0DB02:  MOVF   FED,F
0DB04:  MOVFF  FEF,9C2
0DB08:  MOVF   xC3,W
0DB0A:  MOVLB  1
0DB0C:  SUBWF  xB2,W
0DB0E:  BTFSC  FD8.0
0DB10:  BRA    DB18
0DB12:  MOVLB  0
0DB14:  GOTO   DB3A
0DB18:  MOVLB  0
0DB1A:  BTFSS  FD8.2
0DB1C:  GOTO   DB34
0DB20:  MOVLB  1
0DB22:  MOVF   xB1,W
0DB24:  MOVLB  9
0DB26:  SUBWF  xC2,W
0DB28:  BTFSS  FD8.0
0DB2A:  BRA    DB32
0DB2C:  MOVLB  0
0DB2E:  GOTO   DB3A
0DB32:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DB34:  MOVLB  5
0DB36:  BCF    xB2.0
0DB38:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DB3A:  MOVLB  9
0DB3C:  BTFSC  xB2.0
0DB3E:  BRA    DB46
0DB40:  MOVLB  0
0DB42:  GOTO   DC66
0DB46:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DB48:  MOVLB  9
0DB4A:  RLCF   xB3,W
0DB4C:  MOVWF  02
0DB4E:  RLCF   xB4,W
0DB50:  MOVWF  03
0DB52:  RLCF   02,F
0DB54:  RLCF   03,F
0DB56:  MOVLW  FC
0DB58:  ANDWF  02,F
0DB5A:  MOVF   02,W
0DB5C:  ADDLW  B6
0DB5E:  MOVWF  01
0DB60:  MOVLW  05
0DB62:  ADDWFC 03,F
0DB64:  MOVF   01,W
0DB66:  MOVWF  xC4
0DB68:  MOVFF  03,9C5
0DB6C:  MOVLW  06
0DB6E:  MOVWF  xEE
0DB70:  MOVLB  0
0DB72:  CALL   2214
0DB76:  MOVFF  9C5,FEA
0DB7A:  MOVFF  9C4,FE9
0DB7E:  MOVFF  02,FEC
0DB82:  MOVF   FED,F
0DB84:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DB88:  MOVLB  9
0DB8A:  RLCF   xB3,W
0DB8C:  MOVWF  02
0DB8E:  RLCF   xB4,W
0DB90:  MOVWF  03
0DB92:  RLCF   02,F
0DB94:  RLCF   03,F
0DB96:  MOVLW  FC
0DB98:  ANDWF  02,F
0DB9A:  MOVF   02,W
0DB9C:  ADDLW  03
0DB9E:  MOVWF  xC2
0DBA0:  MOVLW  00
0DBA2:  ADDWFC 03,W
0DBA4:  MOVWF  xC3
0DBA6:  MOVLW  02
0DBA8:  ADDWF  xC2,W
0DBAA:  MOVWF  01
0DBAC:  MOVLW  00
0DBAE:  ADDWFC xC3,W
0DBB0:  MOVWF  03
0DBB2:  MOVF   01,W
0DBB4:  ADDLW  B3
0DBB6:  MOVWF  01
0DBB8:  MOVLW  05
0DBBA:  ADDWFC 03,F
0DBBC:  MOVF   01,W
0DBBE:  MOVWF  xC2
0DBC0:  MOVFF  03,9C3
0DBC4:  MOVLW  05
0DBC6:  MOVWF  xEE
0DBC8:  MOVLB  0
0DBCA:  CALL   2214
0DBCE:  MOVFF  9C3,FEA
0DBD2:  MOVFF  9C2,FE9
0DBD6:  MOVFF  02,FEC
0DBDA:  MOVF   FED,F
0DBDC:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0DBE0:  MOVLW  01
0DBE2:  MOVLB  9
0DBE4:  ADDWF  xB3,W
0DBE6:  MOVLB  5
0DBE8:  MOVWF  xB4
0DBEA:  MOVLW  00
0DBEC:  MOVLB  9
0DBEE:  ADDWFC xB4,W
0DBF0:  MOVLB  5
0DBF2:  MOVWF  xB5
....................             if (port2.data_buffer[count].current < curr_limit) {
0DBF4:  MOVLB  9
0DBF6:  RLCF   xB3,W
0DBF8:  MOVWF  02
0DBFA:  RLCF   xB4,W
0DBFC:  MOVWF  03
0DBFE:  RLCF   02,F
0DC00:  RLCF   03,F
0DC02:  MOVLW  FC
0DC04:  ANDWF  02,F
0DC06:  MOVF   02,W
0DC08:  ADDLW  03
0DC0A:  MOVWF  xC2
0DC0C:  MOVLW  00
0DC0E:  ADDWFC 03,W
0DC10:  MOVWF  xC3
0DC12:  MOVLW  02
0DC14:  ADDWF  xC2,W
0DC16:  MOVWF  01
0DC18:  MOVLW  00
0DC1A:  ADDWFC xC3,W
0DC1C:  MOVWF  03
0DC1E:  MOVF   01,W
0DC20:  ADDLW  B3
0DC22:  MOVWF  FE9
0DC24:  MOVLW  05
0DC26:  ADDWFC 03,W
0DC28:  MOVWF  FEA
0DC2A:  MOVFF  FEC,9C3
0DC2E:  MOVF   FED,F
0DC30:  MOVFF  FEF,9C2
0DC34:  MOVF   xC3,W
0DC36:  MOVLB  1
0DC38:  SUBWF  xB2,W
0DC3A:  BTFSC  FD8.0
0DC3C:  BRA    DC44
0DC3E:  MOVLB  0
0DC40:  GOTO   DC66
0DC44:  MOVLB  0
0DC46:  BTFSS  FD8.2
0DC48:  GOTO   DC60
0DC4C:  MOVLB  1
0DC4E:  MOVF   xB1,W
0DC50:  MOVLB  9
0DC52:  SUBWF  xC2,W
0DC54:  BTFSS  FD8.0
0DC56:  BRA    DC5E
0DC58:  MOVLB  0
0DC5A:  GOTO   DC66
0DC5E:  MOVLB  0
....................                 port2.active = 0;
0DC60:  MOVLB  9
0DC62:  BCF    xB2.0
0DC64:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DC66:  MOVLB  9
0DC68:  INCF   xB3,F
0DC6A:  BTFSC  FD8.2
0DC6C:  INCF   xB4,F
....................         if (count >= 255) {
0DC6E:  MOVF   xB4,F
0DC70:  BTFSC  FD8.2
0DC72:  BRA    DC7A
0DC74:  MOVLB  0
0DC76:  GOTO   DC8E
0DC7A:  MOVLB  0
0DC7C:  MOVLB  9
0DC7E:  MOVF   xB3,W
0DC80:  SUBLW  FE
0DC82:  BTFSS  FD8.0
0DC84:  BRA    DC8C
0DC86:  MOVLB  0
0DC88:  GOTO   DC92
0DC8C:  MOVLB  0
....................             break;
0DC8E:  GOTO   DC96
....................         }
0DC92:  GOTO   D996
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0DC96:  MOVLW  22
0DC98:  MOVWF  FF6
0DC9A:  MOVLW  06
0DC9C:  MOVWF  FF7
0DC9E:  MOVLW  00
0DCA0:  MOVWF  FF8
0DCA2:  MOVLW  09
0DCA4:  MOVLB  9
0DCA6:  MOVWF  xC2
0DCA8:  MOVLB  0
0DCAA:  CALL   2064
0DCAE:  MOVFF  9BC,9E8
0DCB2:  MOVLW  37
0DCB4:  MOVLB  9
0DCB6:  MOVWF  xE9
0DCB8:  MOVLB  0
0DCBA:  CALL   2294
0DCBE:  MOVFF  9BB,9E8
0DCC2:  MOVLW  37
0DCC4:  MOVLB  9
0DCC6:  MOVWF  xE9
0DCC8:  MOVLB  0
0DCCA:  CALL   2294
0DCCE:  MOVLW  0D
0DCD0:  BTFSS  FA6.6
0DCD2:  GOTO   DCD0
0DCD6:  MOVLB  E
0DCD8:  MOVWF  xF9
0DCDA:  MOVLW  0A
0DCDC:  MOVLB  0
0DCDE:  BTFSS  FA6.6
0DCE0:  GOTO   DCDE
0DCE4:  MOVLB  E
0DCE6:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0DCE8:  MOVLW  34
0DCEA:  MOVWF  FF6
0DCEC:  MOVLW  06
0DCEE:  MOVWF  FF7
0DCF0:  MOVLW  00
0DCF2:  MOVWF  FF8
0DCF4:  MOVLW  09
0DCF6:  MOVLB  9
0DCF8:  MOVWF  xC2
0DCFA:  MOVLB  0
0DCFC:  CALL   2064
0DD00:  MOVFF  9BE,9E8
0DD04:  MOVLW  37
0DD06:  MOVLB  9
0DD08:  MOVWF  xE9
0DD0A:  MOVLB  0
0DD0C:  CALL   2294
0DD10:  MOVFF  9BD,9E8
0DD14:  MOVLW  37
0DD16:  MOVLB  9
0DD18:  MOVWF  xE9
0DD1A:  MOVLB  0
0DD1C:  CALL   2294
0DD20:  MOVLW  0D
0DD22:  BTFSS  FA6.6
0DD24:  GOTO   DD22
0DD28:  MOVLB  E
0DD2A:  MOVWF  xF9
0DD2C:  MOVLW  0A
0DD2E:  MOVLB  0
0DD30:  BTFSS  FA6.6
0DD32:  GOTO   DD30
0DD36:  MOVLB  E
0DD38:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0DD3A:  MOVLW  46
0DD3C:  MOVWF  FF6
0DD3E:  MOVLW  06
0DD40:  MOVWF  FF7
0DD42:  MOVLW  00
0DD44:  MOVWF  FF8
0DD46:  MOVLW  0A
0DD48:  MOVLB  9
0DD4A:  MOVWF  xC2
0DD4C:  MOVLB  0
0DD4E:  CALL   2064
0DD52:  MOVFF  9C0,9E8
0DD56:  MOVLW  37
0DD58:  MOVLB  9
0DD5A:  MOVWF  xE9
0DD5C:  MOVLB  0
0DD5E:  CALL   2294
0DD62:  MOVFF  9BF,9E8
0DD66:  MOVLW  37
0DD68:  MOVLB  9
0DD6A:  MOVWF  xE9
0DD6C:  MOVLB  0
0DD6E:  CALL   2294
0DD72:  MOVLW  0D
0DD74:  BTFSS  FA6.6
0DD76:  GOTO   DD74
0DD7A:  MOVLB  E
0DD7C:  MOVWF  xF9
0DD7E:  MOVLW  0A
0DD80:  MOVLB  0
0DD82:  BTFSS  FA6.6
0DD84:  GOTO   DD82
0DD88:  MOVLB  E
0DD8A:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0DD8C:  MOVLW  58
0DD8E:  MOVWF  FF6
0DD90:  MOVLW  06
0DD92:  MOVWF  FF7
0DD94:  MOVLW  00
0DD96:  MOVWF  FF8
0DD98:  MOVLW  03
0DD9A:  MOVLB  9
0DD9C:  MOVWF  xC2
0DD9E:  MOVLB  0
0DDA0:  CALL   2064
0DDA4:  MOVFF  9BA,9E8
0DDA8:  MOVLW  37
0DDAA:  MOVLB  9
0DDAC:  MOVWF  xE9
0DDAE:  MOVLB  0
0DDB0:  CALL   2294
0DDB4:  MOVFF  9B9,9E8
0DDB8:  MOVLW  37
0DDBA:  MOVLB  9
0DDBC:  MOVWF  xE9
0DDBE:  MOVLB  0
0DDC0:  CALL   2294
0DDC4:  MOVLW  0D
0DDC6:  BTFSS  FA6.6
0DDC8:  GOTO   DDC6
0DDCC:  MOVLB  E
0DDCE:  MOVWF  xF9
0DDD0:  MOVLW  0A
0DDD2:  MOVLB  0
0DDD4:  BTFSS  FA6.6
0DDD6:  GOTO   DDD4
0DDDA:  MOVLB  E
0DDDC:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0DDDE:  MOVLW  64
0DDE0:  MOVWF  FF6
0DDE2:  MOVLW  06
0DDE4:  MOVWF  FF7
0DDE6:  MOVLW  00
0DDE8:  MOVWF  FF8
0DDEA:  MOVLB  0
0DDEC:  CALL   202E
....................     for (int i = 0; i < count; i++) {
0DDF0:  MOVLB  9
0DDF2:  CLRF   xC1
0DDF4:  MOVLB  0
0DDF6:  MOVLB  9
0DDF8:  MOVF   xB4,F
0DDFA:  BTFSC  FD8.2
0DDFC:  BRA    DE04
0DDFE:  MOVLB  0
0DE00:  GOTO   DE18
0DE04:  MOVLB  0
0DE06:  MOVLB  9
0DE08:  MOVF   xB3,W
0DE0A:  SUBWF  xC1,W
0DE0C:  BTFSS  FD8.0
0DE0E:  BRA    DE16
0DE10:  MOVLB  0
0DE12:  GOTO   DFCC
0DE16:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0DE18:  MOVLB  A
0DE1A:  CLRF   x52
0DE1C:  MOVFF  9C1,A51
0DE20:  CLRF   x54
0DE22:  MOVLW  04
0DE24:  MOVWF  x53
0DE26:  MOVLB  0
0DE28:  CALL   7F94
0DE2C:  MOVFF  02,03
0DE30:  MOVF   01,W
0DE32:  ADDLW  B6
0DE34:  MOVWF  FE9
0DE36:  MOVLW  01
0DE38:  ADDWFC 03,W
0DE3A:  MOVWF  FEA
0DE3C:  MOVFF  FEC,9C5
0DE40:  MOVF   FED,F
0DE42:  MOVFF  FEF,9C4
0DE46:  MOVLB  A
0DE48:  CLRF   x52
0DE4A:  MOVFF  9C1,A51
0DE4E:  CLRF   x54
0DE50:  MOVLW  04
0DE52:  MOVWF  x53
0DE54:  MOVLB  0
0DE56:  CALL   7F94
0DE5A:  MOVFF  02,03
0DE5E:  MOVF   01,W
0DE60:  ADDLW  03
0DE62:  MOVLB  9
0DE64:  MOVWF  xC6
0DE66:  MOVLW  00
0DE68:  ADDWFC 03,W
0DE6A:  MOVWF  xC7
0DE6C:  MOVLW  02
0DE6E:  ADDWF  xC6,W
0DE70:  MOVWF  01
0DE72:  MOVLW  00
0DE74:  ADDWFC xC7,W
0DE76:  MOVWF  03
0DE78:  MOVF   01,W
0DE7A:  ADDLW  B3
0DE7C:  MOVWF  FE9
0DE7E:  MOVLW  01
0DE80:  ADDWFC 03,W
0DE82:  MOVWF  FEA
0DE84:  MOVFF  FEC,9C7
0DE88:  MOVF   FED,F
0DE8A:  MOVFF  FEF,9C6
0DE8E:  MOVLB  A
0DE90:  CLRF   x52
0DE92:  MOVFF  9C1,A51
0DE96:  CLRF   x54
0DE98:  MOVLW  04
0DE9A:  MOVWF  x53
0DE9C:  MOVLB  0
0DE9E:  CALL   7F94
0DEA2:  MOVFF  02,03
0DEA6:  MOVF   01,W
0DEA8:  ADDLW  B6
0DEAA:  MOVWF  FE9
0DEAC:  MOVLW  05
0DEAE:  ADDWFC 03,W
0DEB0:  MOVWF  FEA
0DEB2:  MOVFF  FEC,9CB
0DEB6:  MOVF   FED,F
0DEB8:  MOVFF  FEF,9CA
0DEBC:  MOVLB  A
0DEBE:  CLRF   x52
0DEC0:  MOVFF  9C1,A51
0DEC4:  CLRF   x54
0DEC6:  MOVLW  04
0DEC8:  MOVWF  x53
0DECA:  MOVLB  0
0DECC:  CALL   7F94
0DED0:  MOVFF  02,03
0DED4:  MOVF   01,W
0DED6:  ADDLW  03
0DED8:  MOVLB  9
0DEDA:  MOVWF  xCC
0DEDC:  MOVLW  00
0DEDE:  ADDWFC 03,W
0DEE0:  MOVWF  xCD
0DEE2:  MOVLW  02
0DEE4:  ADDWF  xCC,W
0DEE6:  MOVWF  01
0DEE8:  MOVLW  00
0DEEA:  ADDWFC xCD,W
0DEEC:  MOVWF  03
0DEEE:  MOVF   01,W
0DEF0:  ADDLW  B3
0DEF2:  MOVWF  FE9
0DEF4:  MOVLW  05
0DEF6:  ADDWFC 03,W
0DEF8:  MOVWF  FEA
0DEFA:  MOVFF  FEC,9CD
0DEFE:  MOVF   FED,F
0DF00:  MOVFF  FEF,9CC
0DF04:  MOVFF  9C5,9E8
0DF08:  MOVLW  37
0DF0A:  MOVWF  xE9
0DF0C:  MOVLB  0
0DF0E:  CALL   2294
0DF12:  MOVFF  9C4,9E8
0DF16:  MOVLW  37
0DF18:  MOVLB  9
0DF1A:  MOVWF  xE9
0DF1C:  MOVLB  0
0DF1E:  CALL   2294
0DF22:  MOVLW  2C
0DF24:  BTFSS  FA6.6
0DF26:  GOTO   DF24
0DF2A:  MOVLB  E
0DF2C:  MOVWF  xF9
0DF2E:  MOVFF  9C7,9E8
0DF32:  MOVLW  37
0DF34:  MOVLB  9
0DF36:  MOVWF  xE9
0DF38:  MOVLB  0
0DF3A:  CALL   2294
0DF3E:  MOVFF  9C6,9E8
0DF42:  MOVLW  37
0DF44:  MOVLB  9
0DF46:  MOVWF  xE9
0DF48:  MOVLB  0
0DF4A:  CALL   2294
0DF4E:  MOVLW  2C
0DF50:  BTFSS  FA6.6
0DF52:  GOTO   DF50
0DF56:  MOVLB  E
0DF58:  MOVWF  xF9
0DF5A:  MOVFF  9CB,9E8
0DF5E:  MOVLW  37
0DF60:  MOVLB  9
0DF62:  MOVWF  xE9
0DF64:  MOVLB  0
0DF66:  CALL   2294
0DF6A:  MOVFF  9CA,9E8
0DF6E:  MOVLW  37
0DF70:  MOVLB  9
0DF72:  MOVWF  xE9
0DF74:  MOVLB  0
0DF76:  CALL   2294
0DF7A:  MOVLW  2C
0DF7C:  BTFSS  FA6.6
0DF7E:  GOTO   DF7C
0DF82:  MOVLB  E
0DF84:  MOVWF  xF9
0DF86:  MOVFF  9CD,9E8
0DF8A:  MOVLW  37
0DF8C:  MOVLB  9
0DF8E:  MOVWF  xE9
0DF90:  MOVLB  0
0DF92:  CALL   2294
0DF96:  MOVFF  9CC,9E8
0DF9A:  MOVLW  37
0DF9C:  MOVLB  9
0DF9E:  MOVWF  xE9
0DFA0:  MOVLB  0
0DFA2:  CALL   2294
0DFA6:  MOVLW  0D
0DFA8:  BTFSS  FA6.6
0DFAA:  GOTO   DFA8
0DFAE:  MOVLB  E
0DFB0:  MOVWF  xF9
0DFB2:  MOVLW  0A
0DFB4:  MOVLB  0
0DFB6:  BTFSS  FA6.6
0DFB8:  GOTO   DFB6
0DFBC:  MOVLB  E
0DFBE:  MOVWF  xF9
0DFC0:  MOVLB  0
0DFC2:  MOVLB  9
0DFC4:  INCF   xC1,F
0DFC6:  MOVLB  0
0DFC8:  GOTO   DDF6
....................     }
....................     log_meas_data(&measured_data, &port1);
0DFCC:  MOVLW  09
0DFCE:  MOVLB  9
0DFD0:  MOVWF  xC3
0DFD2:  MOVLW  B5
0DFD4:  MOVWF  xC2
0DFD6:  MOVLW  01
0DFD8:  MOVWF  xC5
0DFDA:  MOVLW  B3
0DFDC:  MOVWF  xC4
0DFDE:  MOVLB  0
0DFE0:  CALL   8FD2
....................     log_meas_data(&measured_data, &port2);
0DFE4:  MOVLW  09
0DFE6:  MOVLB  9
0DFE8:  MOVWF  xC3
0DFEA:  MOVLW  B5
0DFEC:  MOVWF  xC2
0DFEE:  MOVLW  05
0DFF0:  MOVWF  xC5
0DFF2:  MOVLW  B3
0DFF4:  MOVWF  xC4
0DFF6:  MOVLB  0
0DFF8:  CALL   8FD2
....................     misf_update_address_area();
0DFFC:  CALL   4DB0
0E000:  GOTO   E60A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0AFBC:  MOVLW  2E
0AFBE:  BTFSS  FA6.6
0AFC0:  GOTO   AFBE
0AFC4:  MOVLB  E
0AFC6:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0AFC8:  MOVLB  0
0AFCA:  CALL   4F66
....................     connect_port2();
0AFCE:  CALL   4F6E
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0AFD2:  MOVLB  9
0AFD4:  CLRF   xDD
0AFD6:  CLRF   xDC
0AFD8:  MOVLB  0
0AFDA:  CALL   25C4
....................     mcp4901_2_write(0);
0AFDE:  MOVLB  9
0AFE0:  CLRF   xDD
0AFE2:  CLRF   xDC
0AFE4:  MOVLB  0
0AFE6:  CALL   2602
....................     connect_port1();
0AFEA:  CALL   4F66
....................     connect_port2();
0AFEE:  CALL   4F6E
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0AFF2:  MOVLW  64
0AFF4:  MOVLB  B
0AFF6:  MOVWF  x02
0AFF8:  MOVLB  0
0AFFA:  CALL   2000
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0AFFE:  MOVLB  1
0B000:  CLRF   xC9
0B002:  CLRF   xCA
0B004:  CLRF   xCB
0B006:  CLRF   xCC
0B008:  CLRF   xCD
0B00A:  CLRF   xCE
0B00C:  CLRF   xCF
0B00E:  CLRF   xD0
0B010:  CLRF   xD1
0B012:  CLRF   xD2
0B014:  CLRF   xD3
0B016:  CLRF   xD4
0B018:  CLRF   xD5
0B01A:  CLRF   xD6
0B01C:  CLRF   xD7
0B01E:  CLRF   xD8
0B020:  CLRF   xD9
0B022:  CLRF   xDA
0B024:  CLRF   xDB
0B026:  CLRF   xDC
0B028:  CLRF   xDD
0B02A:  CLRF   xDE
0B02C:  CLRF   xDF
0B02E:  CLRF   xE0
0B030:  CLRF   xE1
0B032:  CLRF   xE2
0B034:  CLRF   xE3
0B036:  CLRF   xE4
0B038:  CLRF   xE5
0B03A:  CLRF   xE6
0B03C:  CLRF   xE7
0B03E:  CLRF   xE8
0B040:  CLRF   xE9
0B042:  CLRF   xEA
0B044:  CLRF   xEB
0B046:  CLRF   xEC
0B048:  CLRF   xED
0B04A:  CLRF   xEE
0B04C:  CLRF   xEF
0B04E:  CLRF   xF0
0B050:  CLRF   xF1
0B052:  CLRF   xF2
0B054:  CLRF   xF3
0B056:  CLRF   xF4
0B058:  CLRF   xF5
0B05A:  CLRF   xF6
0B05C:  CLRF   xF7
0B05E:  CLRF   xF8
0B060:  CLRF   xF9
0B062:  CLRF   xFA
0B064:  CLRF   xFB
0B066:  CLRF   xFC
0B068:  CLRF   xFD
0B06A:  CLRF   xFE
0B06C:  CLRF   xFF
0B06E:  MOVLB  2
0B070:  CLRF   x00
0B072:  CLRF   x01
0B074:  CLRF   x02
0B076:  CLRF   x03
0B078:  CLRF   x04
0B07A:  CLRF   x05
0B07C:  CLRF   x06
0B07E:  CLRF   x07
0B080:  CLRF   x08
0B082:  CLRF   x09
0B084:  CLRF   x0A
0B086:  CLRF   x0B
0B088:  CLRF   x0C
0B08A:  CLRF   x0D
0B08C:  CLRF   x0E
0B08E:  CLRF   x0F
0B090:  CLRF   x10
0B092:  CLRF   x11
0B094:  CLRF   x12
0B096:  CLRF   x13
0B098:  CLRF   x14
0B09A:  CLRF   x15
0B09C:  CLRF   x16
0B09E:  CLRF   x17
0B0A0:  CLRF   x18
0B0A2:  CLRF   x19
0B0A4:  CLRF   x1A
0B0A6:  CLRF   x1B
0B0A8:  CLRF   x1C
0B0AA:  CLRF   x1D
0B0AC:  CLRF   x1E
0B0AE:  CLRF   x1F
0B0B0:  CLRF   x20
0B0B2:  CLRF   x21
0B0B4:  CLRF   x22
0B0B6:  CLRF   x23
0B0B8:  CLRF   x24
0B0BA:  CLRF   x25
0B0BC:  CLRF   x26
0B0BE:  CLRF   x27
0B0C0:  CLRF   x28
0B0C2:  CLRF   x29
0B0C4:  CLRF   x2A
0B0C6:  CLRF   x2B
0B0C8:  CLRF   x2C
0B0CA:  CLRF   x2D
0B0CC:  CLRF   x2E
0B0CE:  CLRF   x2F
0B0D0:  CLRF   x30
0B0D2:  CLRF   x31
0B0D4:  CLRF   x32
0B0D6:  CLRF   x33
0B0D8:  CLRF   x34
0B0DA:  CLRF   x35
0B0DC:  CLRF   x36
0B0DE:  CLRF   x37
0B0E0:  CLRF   x38
0B0E2:  CLRF   x39
0B0E4:  CLRF   x3A
0B0E6:  CLRF   x3B
0B0E8:  CLRF   x3C
0B0EA:  CLRF   x3D
0B0EC:  CLRF   x3E
0B0EE:  CLRF   x3F
0B0F0:  CLRF   x40
0B0F2:  CLRF   x41
0B0F4:  CLRF   x42
0B0F6:  CLRF   x43
0B0F8:  CLRF   x44
0B0FA:  CLRF   x45
0B0FC:  CLRF   x46
0B0FE:  CLRF   x47
0B100:  CLRF   x48
0B102:  CLRF   x49
0B104:  CLRF   x4A
0B106:  CLRF   x4B
0B108:  CLRF   x4C
0B10A:  CLRF   x4D
0B10C:  CLRF   x4E
0B10E:  CLRF   x4F
0B110:  CLRF   x50
0B112:  CLRF   x51
0B114:  CLRF   x52
0B116:  CLRF   x53
0B118:  CLRF   x54
0B11A:  CLRF   x55
0B11C:  CLRF   x56
0B11E:  CLRF   x57
0B120:  CLRF   x58
0B122:  CLRF   x59
0B124:  CLRF   x5A
0B126:  CLRF   x5B
0B128:  CLRF   x5C
0B12A:  CLRF   x5D
0B12C:  CLRF   x5E
0B12E:  CLRF   x5F
0B130:  CLRF   x60
0B132:  CLRF   x61
0B134:  CLRF   x62
0B136:  CLRF   x63
0B138:  CLRF   x64
0B13A:  CLRF   x65
0B13C:  CLRF   x66
0B13E:  CLRF   x67
0B140:  CLRF   x68
0B142:  CLRF   x69
0B144:  CLRF   x6A
0B146:  CLRF   x6B
0B148:  CLRF   x6C
0B14A:  CLRF   x6D
0B14C:  CLRF   x6E
0B14E:  CLRF   x6F
0B150:  CLRF   x70
0B152:  CLRF   x71
0B154:  CLRF   x72
0B156:  CLRF   x73
0B158:  CLRF   x74
0B15A:  CLRF   x75
0B15C:  CLRF   x76
0B15E:  CLRF   x77
0B160:  CLRF   x78
0B162:  CLRF   x79
0B164:  CLRF   x7A
0B166:  CLRF   x7B
0B168:  CLRF   x7C
0B16A:  CLRF   x7D
0B16C:  CLRF   x7E
0B16E:  CLRF   x7F
0B170:  CLRF   x80
0B172:  CLRF   x81
0B174:  CLRF   x82
0B176:  CLRF   x83
0B178:  CLRF   x84
0B17A:  CLRF   x85
0B17C:  CLRF   x86
0B17E:  CLRF   x87
0B180:  CLRF   x88
0B182:  CLRF   x89
0B184:  CLRF   x8A
0B186:  CLRF   x8B
0B188:  CLRF   x8C
0B18A:  CLRF   x8D
0B18C:  CLRF   x8E
0B18E:  CLRF   x8F
0B190:  CLRF   x90
0B192:  CLRF   x91
0B194:  CLRF   x92
0B196:  CLRF   x93
0B198:  CLRF   x94
0B19A:  CLRF   x95
0B19C:  CLRF   x96
0B19E:  CLRF   x97
0B1A0:  CLRF   x98
0B1A2:  CLRF   x99
0B1A4:  CLRF   x9A
0B1A6:  CLRF   x9B
0B1A8:  CLRF   x9C
0B1AA:  CLRF   x9D
0B1AC:  CLRF   x9E
0B1AE:  CLRF   x9F
0B1B0:  CLRF   xA0
0B1B2:  CLRF   xA1
0B1B4:  CLRF   xA2
0B1B6:  CLRF   xA3
0B1B8:  CLRF   xA4
0B1BA:  CLRF   xA5
0B1BC:  CLRF   xA6
0B1BE:  CLRF   xA7
0B1C0:  CLRF   xA8
0B1C2:  CLRF   xA9
0B1C4:  CLRF   xAA
0B1C6:  CLRF   xAB
0B1C8:  CLRF   xAC
0B1CA:  CLRF   xAD
0B1CC:  CLRF   xAE
0B1CE:  CLRF   xAF
0B1D0:  CLRF   xB0
0B1D2:  CLRF   xB1
0B1D4:  CLRF   xB2
0B1D6:  CLRF   xB3
0B1D8:  CLRF   xB4
0B1DA:  CLRF   xB5
0B1DC:  CLRF   xB6
0B1DE:  CLRF   xB7
0B1E0:  CLRF   xB8
0B1E2:  CLRF   xB9
0B1E4:  CLRF   xBA
0B1E6:  CLRF   xBB
0B1E8:  CLRF   xBC
0B1EA:  CLRF   xBD
0B1EC:  CLRF   xBE
0B1EE:  CLRF   xBF
0B1F0:  CLRF   xC0
0B1F2:  CLRF   xC1
0B1F4:  CLRF   xC2
0B1F6:  CLRF   xC3
0B1F8:  CLRF   xC4
0B1FA:  CLRF   xC5
0B1FC:  CLRF   xC6
0B1FE:  CLRF   xC7
0B200:  CLRF   xC8
0B202:  CLRF   xC9
0B204:  CLRF   xCA
0B206:  CLRF   xCB
0B208:  CLRF   xCC
0B20A:  CLRF   xCD
0B20C:  CLRF   xCE
0B20E:  CLRF   xCF
0B210:  CLRF   xD0
0B212:  CLRF   xD1
0B214:  CLRF   xD2
0B216:  CLRF   xD3
0B218:  CLRF   xD4
0B21A:  CLRF   xD5
0B21C:  CLRF   xD6
0B21E:  CLRF   xD7
0B220:  CLRF   xD8
0B222:  CLRF   xD9
0B224:  CLRF   xDA
0B226:  CLRF   xDB
0B228:  CLRF   xDC
0B22A:  CLRF   xDD
0B22C:  CLRF   xDE
0B22E:  CLRF   xDF
0B230:  CLRF   xE0
0B232:  CLRF   xE1
0B234:  CLRF   xE2
0B236:  CLRF   xE3
0B238:  CLRF   xE4
0B23A:  CLRF   xE5
0B23C:  CLRF   xE6
0B23E:  CLRF   xE7
0B240:  CLRF   xE8
0B242:  CLRF   xE9
0B244:  CLRF   xEA
0B246:  CLRF   xEB
0B248:  CLRF   xEC
0B24A:  CLRF   xED
0B24C:  CLRF   xEE
0B24E:  CLRF   xEF
0B250:  CLRF   xF0
0B252:  CLRF   xF1
0B254:  CLRF   xF2
0B256:  CLRF   xF3
0B258:  CLRF   xF4
0B25A:  CLRF   xF5
0B25C:  CLRF   xF6
0B25E:  CLRF   xF7
0B260:  CLRF   xF8
0B262:  CLRF   xF9
0B264:  CLRF   xFA
0B266:  CLRF   xFB
0B268:  CLRF   xFC
0B26A:  CLRF   xFD
0B26C:  CLRF   xFE
0B26E:  CLRF   xFF
0B270:  MOVLB  3
0B272:  CLRF   x00
0B274:  CLRF   x01
0B276:  CLRF   x02
0B278:  CLRF   x03
0B27A:  CLRF   x04
0B27C:  CLRF   x05
0B27E:  CLRF   x06
0B280:  CLRF   x07
0B282:  CLRF   x08
0B284:  CLRF   x09
0B286:  CLRF   x0A
0B288:  CLRF   x0B
0B28A:  CLRF   x0C
0B28C:  CLRF   x0D
0B28E:  CLRF   x0E
0B290:  CLRF   x0F
0B292:  CLRF   x10
0B294:  CLRF   x11
0B296:  CLRF   x12
0B298:  CLRF   x13
0B29A:  CLRF   x14
0B29C:  CLRF   x15
0B29E:  CLRF   x16
0B2A0:  CLRF   x17
0B2A2:  CLRF   x18
0B2A4:  CLRF   x19
0B2A6:  CLRF   x1A
0B2A8:  CLRF   x1B
0B2AA:  CLRF   x1C
0B2AC:  CLRF   x1D
0B2AE:  CLRF   x1E
0B2B0:  CLRF   x1F
0B2B2:  CLRF   x20
0B2B4:  CLRF   x21
0B2B6:  CLRF   x22
0B2B8:  CLRF   x23
0B2BA:  CLRF   x24
0B2BC:  CLRF   x25
0B2BE:  CLRF   x26
0B2C0:  CLRF   x27
0B2C2:  CLRF   x28
0B2C4:  CLRF   x29
0B2C6:  CLRF   x2A
0B2C8:  CLRF   x2B
0B2CA:  CLRF   x2C
0B2CC:  CLRF   x2D
0B2CE:  CLRF   x2E
0B2D0:  CLRF   x2F
0B2D2:  CLRF   x30
0B2D4:  CLRF   x31
0B2D6:  CLRF   x32
0B2D8:  CLRF   x33
0B2DA:  CLRF   x34
0B2DC:  CLRF   x35
0B2DE:  CLRF   x36
0B2E0:  CLRF   x37
0B2E2:  CLRF   x38
0B2E4:  CLRF   x39
0B2E6:  CLRF   x3A
0B2E8:  CLRF   x3B
0B2EA:  CLRF   x3C
0B2EC:  CLRF   x3D
0B2EE:  CLRF   x3E
0B2F0:  CLRF   x3F
0B2F2:  CLRF   x40
0B2F4:  CLRF   x41
0B2F6:  CLRF   x42
0B2F8:  CLRF   x43
0B2FA:  CLRF   x44
0B2FC:  CLRF   x45
0B2FE:  CLRF   x46
0B300:  CLRF   x47
0B302:  CLRF   x48
0B304:  CLRF   x49
0B306:  CLRF   x4A
0B308:  CLRF   x4B
0B30A:  CLRF   x4C
0B30C:  CLRF   x4D
0B30E:  CLRF   x4E
0B310:  CLRF   x4F
0B312:  CLRF   x50
0B314:  CLRF   x51
0B316:  CLRF   x52
0B318:  CLRF   x53
0B31A:  CLRF   x54
0B31C:  CLRF   x55
0B31E:  CLRF   x56
0B320:  CLRF   x57
0B322:  CLRF   x58
0B324:  CLRF   x59
0B326:  CLRF   x5A
0B328:  CLRF   x5B
0B32A:  CLRF   x5C
0B32C:  CLRF   x5D
0B32E:  CLRF   x5E
0B330:  CLRF   x5F
0B332:  CLRF   x60
0B334:  CLRF   x61
0B336:  CLRF   x62
0B338:  CLRF   x63
0B33A:  CLRF   x64
0B33C:  CLRF   x65
0B33E:  CLRF   x66
0B340:  CLRF   x67
0B342:  CLRF   x68
0B344:  CLRF   x69
0B346:  CLRF   x6A
0B348:  CLRF   x6B
0B34A:  CLRF   x6C
0B34C:  CLRF   x6D
0B34E:  CLRF   x6E
0B350:  CLRF   x6F
0B352:  CLRF   x70
0B354:  CLRF   x71
0B356:  CLRF   x72
0B358:  CLRF   x73
0B35A:  CLRF   x74
0B35C:  CLRF   x75
0B35E:  CLRF   x76
0B360:  CLRF   x77
0B362:  CLRF   x78
0B364:  CLRF   x79
0B366:  CLRF   x7A
0B368:  CLRF   x7B
0B36A:  CLRF   x7C
0B36C:  CLRF   x7D
0B36E:  CLRF   x7E
0B370:  CLRF   x7F
0B372:  CLRF   x80
0B374:  CLRF   x81
0B376:  CLRF   x82
0B378:  CLRF   x83
0B37A:  CLRF   x84
0B37C:  CLRF   x85
0B37E:  CLRF   x86
0B380:  CLRF   x87
0B382:  CLRF   x88
0B384:  CLRF   x89
0B386:  CLRF   x8A
0B388:  CLRF   x8B
0B38A:  CLRF   x8C
0B38C:  CLRF   x8D
0B38E:  CLRF   x8E
0B390:  CLRF   x8F
0B392:  CLRF   x90
0B394:  CLRF   x91
0B396:  CLRF   x92
0B398:  CLRF   x93
0B39A:  CLRF   x94
0B39C:  CLRF   x95
0B39E:  CLRF   x96
0B3A0:  CLRF   x97
0B3A2:  CLRF   x98
0B3A4:  CLRF   x99
0B3A6:  CLRF   x9A
0B3A8:  CLRF   x9B
0B3AA:  CLRF   x9C
0B3AC:  CLRF   x9D
0B3AE:  CLRF   x9E
0B3B0:  CLRF   x9F
0B3B2:  CLRF   xA0
0B3B4:  CLRF   xA1
0B3B6:  CLRF   xA2
0B3B8:  CLRF   xA3
0B3BA:  CLRF   xA4
0B3BC:  CLRF   xA5
0B3BE:  CLRF   xA6
0B3C0:  CLRF   xA7
0B3C2:  CLRF   xA8
0B3C4:  CLRF   xA9
0B3C6:  CLRF   xAA
0B3C8:  CLRF   xAB
0B3CA:  CLRF   xAC
0B3CC:  CLRF   xAD
0B3CE:  CLRF   xAE
0B3D0:  CLRF   xAF
0B3D2:  CLRF   xB0
0B3D4:  CLRF   xB1
0B3D6:  CLRF   xB2
0B3D8:  CLRF   xB3
0B3DA:  CLRF   xB4
0B3DC:  CLRF   xB5
0B3DE:  CLRF   xB6
0B3E0:  CLRF   xB7
0B3E2:  CLRF   xB8
0B3E4:  CLRF   xB9
0B3E6:  CLRF   xBA
0B3E8:  CLRF   xBB
0B3EA:  CLRF   xBC
0B3EC:  CLRF   xBD
0B3EE:  CLRF   xBE
0B3F0:  CLRF   xBF
0B3F2:  CLRF   xC0
0B3F4:  CLRF   xC1
0B3F6:  CLRF   xC2
0B3F8:  CLRF   xC3
0B3FA:  CLRF   xC4
0B3FC:  CLRF   xC5
0B3FE:  CLRF   xC6
0B400:  CLRF   xC7
0B402:  CLRF   xC8
0B404:  CLRF   xC9
0B406:  CLRF   xCA
0B408:  CLRF   xCB
0B40A:  CLRF   xCC
0B40C:  CLRF   xCD
0B40E:  CLRF   xCE
0B410:  CLRF   xCF
0B412:  CLRF   xD0
0B414:  CLRF   xD1
0B416:  CLRF   xD2
0B418:  CLRF   xD3
0B41A:  CLRF   xD4
0B41C:  CLRF   xD5
0B41E:  CLRF   xD6
0B420:  CLRF   xD7
0B422:  CLRF   xD8
0B424:  CLRF   xD9
0B426:  CLRF   xDA
0B428:  CLRF   xDB
0B42A:  CLRF   xDC
0B42C:  CLRF   xDD
0B42E:  CLRF   xDE
0B430:  CLRF   xDF
0B432:  CLRF   xE0
0B434:  CLRF   xE1
0B436:  CLRF   xE2
0B438:  CLRF   xE3
0B43A:  CLRF   xE4
0B43C:  CLRF   xE5
0B43E:  CLRF   xE6
0B440:  CLRF   xE7
0B442:  CLRF   xE8
0B444:  CLRF   xE9
0B446:  CLRF   xEA
0B448:  CLRF   xEB
0B44A:  CLRF   xEC
0B44C:  CLRF   xED
0B44E:  CLRF   xEE
0B450:  CLRF   xEF
0B452:  CLRF   xF0
0B454:  CLRF   xF1
0B456:  CLRF   xF2
0B458:  CLRF   xF3
0B45A:  CLRF   xF4
0B45C:  CLRF   xF5
0B45E:  CLRF   xF6
0B460:  CLRF   xF7
0B462:  CLRF   xF8
0B464:  CLRF   xF9
0B466:  CLRF   xFA
0B468:  CLRF   xFB
0B46A:  CLRF   xFC
0B46C:  CLRF   xFD
0B46E:  CLRF   xFE
0B470:  CLRF   xFF
0B472:  MOVLB  4
0B474:  CLRF   x00
0B476:  CLRF   x01
0B478:  CLRF   x02
0B47A:  CLRF   x03
0B47C:  CLRF   x04
0B47E:  CLRF   x05
0B480:  CLRF   x06
0B482:  CLRF   x07
0B484:  CLRF   x08
0B486:  CLRF   x09
0B488:  CLRF   x0A
0B48A:  CLRF   x0B
0B48C:  CLRF   x0C
0B48E:  CLRF   x0D
0B490:  CLRF   x0E
0B492:  CLRF   x0F
0B494:  CLRF   x10
0B496:  CLRF   x11
0B498:  CLRF   x12
0B49A:  CLRF   x13
0B49C:  CLRF   x14
0B49E:  CLRF   x15
0B4A0:  CLRF   x16
0B4A2:  CLRF   x17
0B4A4:  CLRF   x18
0B4A6:  CLRF   x19
0B4A8:  CLRF   x1A
0B4AA:  CLRF   x1B
0B4AC:  CLRF   x1C
0B4AE:  CLRF   x1D
0B4B0:  CLRF   x1E
0B4B2:  CLRF   x1F
0B4B4:  CLRF   x20
0B4B6:  CLRF   x21
0B4B8:  CLRF   x22
0B4BA:  CLRF   x23
0B4BC:  CLRF   x24
0B4BE:  CLRF   x25
0B4C0:  CLRF   x26
0B4C2:  CLRF   x27
0B4C4:  CLRF   x28
0B4C6:  CLRF   x29
0B4C8:  CLRF   x2A
0B4CA:  CLRF   x2B
0B4CC:  CLRF   x2C
0B4CE:  CLRF   x2D
0B4D0:  CLRF   x2E
0B4D2:  CLRF   x2F
0B4D4:  CLRF   x30
0B4D6:  CLRF   x31
0B4D8:  CLRF   x32
0B4DA:  CLRF   x33
0B4DC:  CLRF   x34
0B4DE:  CLRF   x35
0B4E0:  CLRF   x36
0B4E2:  CLRF   x37
0B4E4:  CLRF   x38
0B4E6:  CLRF   x39
0B4E8:  CLRF   x3A
0B4EA:  CLRF   x3B
0B4EC:  CLRF   x3C
0B4EE:  CLRF   x3D
0B4F0:  CLRF   x3E
0B4F2:  CLRF   x3F
0B4F4:  CLRF   x40
0B4F6:  CLRF   x41
0B4F8:  CLRF   x42
0B4FA:  CLRF   x43
0B4FC:  CLRF   x44
0B4FE:  CLRF   x45
0B500:  CLRF   x46
0B502:  CLRF   x47
0B504:  CLRF   x48
0B506:  CLRF   x49
0B508:  CLRF   x4A
0B50A:  CLRF   x4B
0B50C:  CLRF   x4C
0B50E:  CLRF   x4D
0B510:  CLRF   x4E
0B512:  CLRF   x4F
0B514:  CLRF   x50
0B516:  CLRF   x51
0B518:  CLRF   x52
0B51A:  CLRF   x53
0B51C:  CLRF   x54
0B51E:  CLRF   x55
0B520:  CLRF   x56
0B522:  CLRF   x57
0B524:  CLRF   x58
0B526:  CLRF   x59
0B528:  CLRF   x5A
0B52A:  CLRF   x5B
0B52C:  CLRF   x5C
0B52E:  CLRF   x5D
0B530:  CLRF   x5E
0B532:  CLRF   x5F
0B534:  CLRF   x60
0B536:  CLRF   x61
0B538:  CLRF   x62
0B53A:  CLRF   x63
0B53C:  CLRF   x64
0B53E:  CLRF   x65
0B540:  CLRF   x66
0B542:  CLRF   x67
0B544:  CLRF   x68
0B546:  CLRF   x69
0B548:  CLRF   x6A
0B54A:  CLRF   x6B
0B54C:  CLRF   x6C
0B54E:  CLRF   x6D
0B550:  CLRF   x6E
0B552:  CLRF   x6F
0B554:  CLRF   x70
0B556:  CLRF   x71
0B558:  CLRF   x72
0B55A:  CLRF   x73
0B55C:  CLRF   x74
0B55E:  CLRF   x75
0B560:  CLRF   x76
0B562:  CLRF   x77
0B564:  CLRF   x78
0B566:  CLRF   x79
0B568:  CLRF   x7A
0B56A:  CLRF   x7B
0B56C:  CLRF   x7C
0B56E:  CLRF   x7D
0B570:  CLRF   x7E
0B572:  CLRF   x7F
0B574:  CLRF   x80
0B576:  CLRF   x81
0B578:  CLRF   x82
0B57A:  CLRF   x83
0B57C:  CLRF   x84
0B57E:  CLRF   x85
0B580:  CLRF   x86
0B582:  CLRF   x87
0B584:  CLRF   x88
0B586:  CLRF   x89
0B588:  CLRF   x8A
0B58A:  CLRF   x8B
0B58C:  CLRF   x8C
0B58E:  CLRF   x8D
0B590:  CLRF   x8E
0B592:  CLRF   x8F
0B594:  CLRF   x90
0B596:  CLRF   x91
0B598:  CLRF   x92
0B59A:  CLRF   x93
0B59C:  CLRF   x94
0B59E:  CLRF   x95
0B5A0:  CLRF   x96
0B5A2:  CLRF   x97
0B5A4:  CLRF   x98
0B5A6:  CLRF   x99
0B5A8:  CLRF   x9A
0B5AA:  CLRF   x9B
0B5AC:  CLRF   x9C
0B5AE:  CLRF   x9D
0B5B0:  CLRF   x9E
0B5B2:  CLRF   x9F
0B5B4:  CLRF   xA0
0B5B6:  CLRF   xA1
0B5B8:  CLRF   xA2
0B5BA:  CLRF   xA3
0B5BC:  CLRF   xA4
0B5BE:  CLRF   xA5
0B5C0:  CLRF   xA6
0B5C2:  CLRF   xA7
0B5C4:  CLRF   xA8
0B5C6:  CLRF   xA9
0B5C8:  CLRF   xAA
0B5CA:  CLRF   xAB
0B5CC:  CLRF   xAC
0B5CE:  CLRF   xAD
0B5D0:  CLRF   xAE
0B5D2:  CLRF   xAF
0B5D4:  CLRF   xB0
0B5D6:  CLRF   xB1
0B5D8:  CLRF   xB2
0B5DA:  CLRF   xB3
0B5DC:  CLRF   xB4
0B5DE:  CLRF   xB5
0B5E0:  CLRF   xB6
0B5E2:  CLRF   xB7
0B5E4:  CLRF   xB8
0B5E6:  CLRF   xB9
0B5E8:  CLRF   xBA
0B5EA:  CLRF   xBB
0B5EC:  CLRF   xBC
0B5EE:  CLRF   xBD
0B5F0:  CLRF   xBE
0B5F2:  CLRF   xBF
0B5F4:  CLRF   xC0
0B5F6:  CLRF   xC1
0B5F8:  CLRF   xC2
0B5FA:  CLRF   xC3
0B5FC:  CLRF   xC4
0B5FE:  CLRF   xC5
0B600:  CLRF   xC6
0B602:  CLRF   xC7
0B604:  CLRF   xC8
0B606:  CLRF   xC9
0B608:  CLRF   xCA
0B60A:  CLRF   xCB
0B60C:  CLRF   xCC
0B60E:  CLRF   xCD
0B610:  CLRF   xCE
0B612:  CLRF   xCF
0B614:  CLRF   xD0
0B616:  CLRF   xD1
0B618:  CLRF   xD2
0B61A:  CLRF   xD3
0B61C:  CLRF   xD4
0B61E:  CLRF   xD5
0B620:  CLRF   xD6
0B622:  CLRF   xD7
0B624:  CLRF   xD8
0B626:  CLRF   xD9
0B628:  CLRF   xDA
0B62A:  CLRF   xDB
0B62C:  CLRF   xDC
0B62E:  CLRF   xDD
0B630:  CLRF   xDE
0B632:  CLRF   xDF
0B634:  CLRF   xE0
0B636:  CLRF   xE1
0B638:  CLRF   xE2
0B63A:  CLRF   xE3
0B63C:  CLRF   xE4
0B63E:  CLRF   xE5
0B640:  CLRF   xE6
0B642:  CLRF   xE7
0B644:  CLRF   xE8
0B646:  CLRF   xE9
0B648:  CLRF   xEA
0B64A:  CLRF   xEB
0B64C:  CLRF   xEC
0B64E:  CLRF   xED
0B650:  CLRF   xEE
0B652:  CLRF   xEF
0B654:  CLRF   xF0
0B656:  CLRF   xF1
0B658:  CLRF   xF2
0B65A:  CLRF   xF3
0B65C:  CLRF   xF4
0B65E:  CLRF   xF5
0B660:  CLRF   xF6
0B662:  CLRF   xF7
0B664:  CLRF   xF8
0B666:  CLRF   xF9
0B668:  CLRF   xFA
0B66A:  CLRF   xFB
0B66C:  CLRF   xFC
0B66E:  CLRF   xFD
0B670:  CLRF   xFE
0B672:  CLRF   xFF
0B674:  MOVLB  5
0B676:  CLRF   x00
0B678:  CLRF   x01
0B67A:  CLRF   x02
0B67C:  CLRF   x03
0B67E:  CLRF   x04
0B680:  CLRF   x05
0B682:  CLRF   x06
0B684:  CLRF   x07
0B686:  CLRF   x08
0B688:  CLRF   x09
0B68A:  CLRF   x0A
0B68C:  CLRF   x0B
0B68E:  CLRF   x0C
0B690:  CLRF   x0D
0B692:  CLRF   x0E
0B694:  CLRF   x0F
0B696:  CLRF   x10
0B698:  CLRF   x11
0B69A:  CLRF   x12
0B69C:  CLRF   x13
0B69E:  CLRF   x14
0B6A0:  CLRF   x15
0B6A2:  CLRF   x16
0B6A4:  CLRF   x17
0B6A6:  CLRF   x18
0B6A8:  CLRF   x19
0B6AA:  CLRF   x1A
0B6AC:  CLRF   x1B
0B6AE:  CLRF   x1C
0B6B0:  CLRF   x1D
0B6B2:  CLRF   x1E
0B6B4:  CLRF   x1F
0B6B6:  CLRF   x20
0B6B8:  CLRF   x21
0B6BA:  CLRF   x22
0B6BC:  CLRF   x23
0B6BE:  CLRF   x24
0B6C0:  CLRF   x25
0B6C2:  CLRF   x26
0B6C4:  CLRF   x27
0B6C6:  CLRF   x28
0B6C8:  CLRF   x29
0B6CA:  CLRF   x2A
0B6CC:  CLRF   x2B
0B6CE:  CLRF   x2C
0B6D0:  CLRF   x2D
0B6D2:  CLRF   x2E
0B6D4:  CLRF   x2F
0B6D6:  CLRF   x30
0B6D8:  CLRF   x31
0B6DA:  CLRF   x32
0B6DC:  CLRF   x33
0B6DE:  CLRF   x34
0B6E0:  CLRF   x35
0B6E2:  CLRF   x36
0B6E4:  CLRF   x37
0B6E6:  CLRF   x38
0B6E8:  CLRF   x39
0B6EA:  CLRF   x3A
0B6EC:  CLRF   x3B
0B6EE:  CLRF   x3C
0B6F0:  CLRF   x3D
0B6F2:  CLRF   x3E
0B6F4:  CLRF   x3F
0B6F6:  CLRF   x40
0B6F8:  CLRF   x41
0B6FA:  CLRF   x42
0B6FC:  CLRF   x43
0B6FE:  CLRF   x44
0B700:  CLRF   x45
0B702:  CLRF   x46
0B704:  CLRF   x47
0B706:  CLRF   x48
0B708:  CLRF   x49
0B70A:  CLRF   x4A
0B70C:  CLRF   x4B
0B70E:  CLRF   x4C
0B710:  CLRF   x4D
0B712:  CLRF   x4E
0B714:  CLRF   x4F
0B716:  CLRF   x50
0B718:  CLRF   x51
0B71A:  CLRF   x52
0B71C:  CLRF   x53
0B71E:  CLRF   x54
0B720:  CLRF   x55
0B722:  CLRF   x56
0B724:  CLRF   x57
0B726:  CLRF   x58
0B728:  CLRF   x59
0B72A:  CLRF   x5A
0B72C:  CLRF   x5B
0B72E:  CLRF   x5C
0B730:  CLRF   x5D
0B732:  CLRF   x5E
0B734:  CLRF   x5F
0B736:  CLRF   x60
0B738:  CLRF   x61
0B73A:  CLRF   x62
0B73C:  CLRF   x63
0B73E:  CLRF   x64
0B740:  CLRF   x65
0B742:  CLRF   x66
0B744:  CLRF   x67
0B746:  CLRF   x68
0B748:  CLRF   x69
0B74A:  CLRF   x6A
0B74C:  CLRF   x6B
0B74E:  CLRF   x6C
0B750:  CLRF   x6D
0B752:  CLRF   x6E
0B754:  CLRF   x6F
0B756:  CLRF   x70
0B758:  CLRF   x71
0B75A:  CLRF   x72
0B75C:  CLRF   x73
0B75E:  CLRF   x74
0B760:  CLRF   x75
0B762:  CLRF   x76
0B764:  CLRF   x77
0B766:  CLRF   x78
0B768:  CLRF   x79
0B76A:  CLRF   x7A
0B76C:  CLRF   x7B
0B76E:  CLRF   x7C
0B770:  CLRF   x7D
0B772:  CLRF   x7E
0B774:  CLRF   x7F
0B776:  CLRF   x80
0B778:  CLRF   x81
0B77A:  CLRF   x82
0B77C:  CLRF   x83
0B77E:  CLRF   x84
0B780:  CLRF   x85
0B782:  CLRF   x86
0B784:  CLRF   x87
0B786:  CLRF   x88
0B788:  CLRF   x89
0B78A:  CLRF   x8A
0B78C:  CLRF   x8B
0B78E:  CLRF   x8C
0B790:  CLRF   x8D
0B792:  CLRF   x8E
0B794:  CLRF   x8F
0B796:  CLRF   x90
0B798:  CLRF   x91
0B79A:  CLRF   x92
0B79C:  CLRF   x93
0B79E:  CLRF   x94
0B7A0:  CLRF   x95
0B7A2:  CLRF   x96
0B7A4:  CLRF   x97
0B7A6:  CLRF   x98
0B7A8:  CLRF   x99
0B7AA:  CLRF   x9A
0B7AC:  CLRF   x9B
0B7AE:  CLRF   x9C
0B7B0:  CLRF   x9D
0B7B2:  CLRF   x9E
0B7B4:  CLRF   x9F
0B7B6:  CLRF   xA0
0B7B8:  CLRF   xA1
0B7BA:  CLRF   xA2
0B7BC:  CLRF   xA3
0B7BE:  CLRF   xA4
0B7C0:  CLRF   xA5
0B7C2:  CLRF   xA6
0B7C4:  CLRF   xA7
0B7C6:  CLRF   xA8
0B7C8:  CLRF   xA9
0B7CA:  CLRF   xAA
0B7CC:  CLRF   xAB
0B7CE:  CLRF   xAC
0B7D0:  CLRF   xAD
0B7D2:  CLRF   xAE
0B7D4:  CLRF   xAF
0B7D6:  CLRF   xB0
0B7D8:  CLRF   xB1
0B7DA:  CLRF   xB2
0B7DC:  CLRF   xB3
0B7DE:  CLRF   xB4
0B7E0:  CLRF   xB5
0B7E2:  CLRF   xB6
0B7E4:  CLRF   xB7
0B7E6:  CLRF   xB8
0B7E8:  CLRF   xB9
0B7EA:  CLRF   xBA
0B7EC:  CLRF   xBB
0B7EE:  CLRF   xBC
0B7F0:  CLRF   xBD
0B7F2:  CLRF   xBE
0B7F4:  CLRF   xBF
0B7F6:  CLRF   xC0
0B7F8:  CLRF   xC1
0B7FA:  CLRF   xC2
0B7FC:  CLRF   xC3
0B7FE:  CLRF   xC4
0B800:  CLRF   xC5
0B802:  CLRF   xC6
0B804:  CLRF   xC7
0B806:  CLRF   xC8
....................     port1.port_num = 1;
0B808:  MOVLW  01
0B80A:  MOVLB  1
0B80C:  MOVWF  xC9
....................     port1.sweep_step = 0;
0B80E:  CLRF   xCB
0B810:  CLRF   xCA
....................     port1.active = 1;
0B812:  MOVLB  5
0B814:  BSF    xC8.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0B816:  CLRF   xC9
0B818:  CLRF   xCA
0B81A:  CLRF   xCB
0B81C:  CLRF   xCC
0B81E:  CLRF   xCD
0B820:  CLRF   xCE
0B822:  CLRF   xCF
0B824:  CLRF   xD0
0B826:  CLRF   xD1
0B828:  CLRF   xD2
0B82A:  CLRF   xD3
0B82C:  CLRF   xD4
0B82E:  CLRF   xD5
0B830:  CLRF   xD6
0B832:  CLRF   xD7
0B834:  CLRF   xD8
0B836:  CLRF   xD9
0B838:  CLRF   xDA
0B83A:  CLRF   xDB
0B83C:  CLRF   xDC
0B83E:  CLRF   xDD
0B840:  CLRF   xDE
0B842:  CLRF   xDF
0B844:  CLRF   xE0
0B846:  CLRF   xE1
0B848:  CLRF   xE2
0B84A:  CLRF   xE3
0B84C:  CLRF   xE4
0B84E:  CLRF   xE5
0B850:  CLRF   xE6
0B852:  CLRF   xE7
0B854:  CLRF   xE8
0B856:  CLRF   xE9
0B858:  CLRF   xEA
0B85A:  CLRF   xEB
0B85C:  CLRF   xEC
0B85E:  CLRF   xED
0B860:  CLRF   xEE
0B862:  CLRF   xEF
0B864:  CLRF   xF0
0B866:  CLRF   xF1
0B868:  CLRF   xF2
0B86A:  CLRF   xF3
0B86C:  CLRF   xF4
0B86E:  CLRF   xF5
0B870:  CLRF   xF6
0B872:  CLRF   xF7
0B874:  CLRF   xF8
0B876:  CLRF   xF9
0B878:  CLRF   xFA
0B87A:  CLRF   xFB
0B87C:  CLRF   xFC
0B87E:  CLRF   xFD
0B880:  CLRF   xFE
0B882:  CLRF   xFF
0B884:  MOVLB  6
0B886:  CLRF   x00
0B888:  CLRF   x01
0B88A:  CLRF   x02
0B88C:  CLRF   x03
0B88E:  CLRF   x04
0B890:  CLRF   x05
0B892:  CLRF   x06
0B894:  CLRF   x07
0B896:  CLRF   x08
0B898:  CLRF   x09
0B89A:  CLRF   x0A
0B89C:  CLRF   x0B
0B89E:  CLRF   x0C
0B8A0:  CLRF   x0D
0B8A2:  CLRF   x0E
0B8A4:  CLRF   x0F
0B8A6:  CLRF   x10
0B8A8:  CLRF   x11
0B8AA:  CLRF   x12
0B8AC:  CLRF   x13
0B8AE:  CLRF   x14
0B8B0:  CLRF   x15
0B8B2:  CLRF   x16
0B8B4:  CLRF   x17
0B8B6:  CLRF   x18
0B8B8:  CLRF   x19
0B8BA:  CLRF   x1A
0B8BC:  CLRF   x1B
0B8BE:  CLRF   x1C
0B8C0:  CLRF   x1D
0B8C2:  CLRF   x1E
0B8C4:  CLRF   x1F
0B8C6:  CLRF   x20
0B8C8:  CLRF   x21
0B8CA:  CLRF   x22
0B8CC:  CLRF   x23
0B8CE:  CLRF   x24
0B8D0:  CLRF   x25
0B8D2:  CLRF   x26
0B8D4:  CLRF   x27
0B8D6:  CLRF   x28
0B8D8:  CLRF   x29
0B8DA:  CLRF   x2A
0B8DC:  CLRF   x2B
0B8DE:  CLRF   x2C
0B8E0:  CLRF   x2D
0B8E2:  CLRF   x2E
0B8E4:  CLRF   x2F
0B8E6:  CLRF   x30
0B8E8:  CLRF   x31
0B8EA:  CLRF   x32
0B8EC:  CLRF   x33
0B8EE:  CLRF   x34
0B8F0:  CLRF   x35
0B8F2:  CLRF   x36
0B8F4:  CLRF   x37
0B8F6:  CLRF   x38
0B8F8:  CLRF   x39
0B8FA:  CLRF   x3A
0B8FC:  CLRF   x3B
0B8FE:  CLRF   x3C
0B900:  CLRF   x3D
0B902:  CLRF   x3E
0B904:  CLRF   x3F
0B906:  CLRF   x40
0B908:  CLRF   x41
0B90A:  CLRF   x42
0B90C:  CLRF   x43
0B90E:  CLRF   x44
0B910:  CLRF   x45
0B912:  CLRF   x46
0B914:  CLRF   x47
0B916:  CLRF   x48
0B918:  CLRF   x49
0B91A:  CLRF   x4A
0B91C:  CLRF   x4B
0B91E:  CLRF   x4C
0B920:  CLRF   x4D
0B922:  CLRF   x4E
0B924:  CLRF   x4F
0B926:  CLRF   x50
0B928:  CLRF   x51
0B92A:  CLRF   x52
0B92C:  CLRF   x53
0B92E:  CLRF   x54
0B930:  CLRF   x55
0B932:  CLRF   x56
0B934:  CLRF   x57
0B936:  CLRF   x58
0B938:  CLRF   x59
0B93A:  CLRF   x5A
0B93C:  CLRF   x5B
0B93E:  CLRF   x5C
0B940:  CLRF   x5D
0B942:  CLRF   x5E
0B944:  CLRF   x5F
0B946:  CLRF   x60
0B948:  CLRF   x61
0B94A:  CLRF   x62
0B94C:  CLRF   x63
0B94E:  CLRF   x64
0B950:  CLRF   x65
0B952:  CLRF   x66
0B954:  CLRF   x67
0B956:  CLRF   x68
0B958:  CLRF   x69
0B95A:  CLRF   x6A
0B95C:  CLRF   x6B
0B95E:  CLRF   x6C
0B960:  CLRF   x6D
0B962:  CLRF   x6E
0B964:  CLRF   x6F
0B966:  CLRF   x70
0B968:  CLRF   x71
0B96A:  CLRF   x72
0B96C:  CLRF   x73
0B96E:  CLRF   x74
0B970:  CLRF   x75
0B972:  CLRF   x76
0B974:  CLRF   x77
0B976:  CLRF   x78
0B978:  CLRF   x79
0B97A:  CLRF   x7A
0B97C:  CLRF   x7B
0B97E:  CLRF   x7C
0B980:  CLRF   x7D
0B982:  CLRF   x7E
0B984:  CLRF   x7F
0B986:  CLRF   x80
0B988:  CLRF   x81
0B98A:  CLRF   x82
0B98C:  CLRF   x83
0B98E:  CLRF   x84
0B990:  CLRF   x85
0B992:  CLRF   x86
0B994:  CLRF   x87
0B996:  CLRF   x88
0B998:  CLRF   x89
0B99A:  CLRF   x8A
0B99C:  CLRF   x8B
0B99E:  CLRF   x8C
0B9A0:  CLRF   x8D
0B9A2:  CLRF   x8E
0B9A4:  CLRF   x8F
0B9A6:  CLRF   x90
0B9A8:  CLRF   x91
0B9AA:  CLRF   x92
0B9AC:  CLRF   x93
0B9AE:  CLRF   x94
0B9B0:  CLRF   x95
0B9B2:  CLRF   x96
0B9B4:  CLRF   x97
0B9B6:  CLRF   x98
0B9B8:  CLRF   x99
0B9BA:  CLRF   x9A
0B9BC:  CLRF   x9B
0B9BE:  CLRF   x9C
0B9C0:  CLRF   x9D
0B9C2:  CLRF   x9E
0B9C4:  CLRF   x9F
0B9C6:  CLRF   xA0
0B9C8:  CLRF   xA1
0B9CA:  CLRF   xA2
0B9CC:  CLRF   xA3
0B9CE:  CLRF   xA4
0B9D0:  CLRF   xA5
0B9D2:  CLRF   xA6
0B9D4:  CLRF   xA7
0B9D6:  CLRF   xA8
0B9D8:  CLRF   xA9
0B9DA:  CLRF   xAA
0B9DC:  CLRF   xAB
0B9DE:  CLRF   xAC
0B9E0:  CLRF   xAD
0B9E2:  CLRF   xAE
0B9E4:  CLRF   xAF
0B9E6:  CLRF   xB0
0B9E8:  CLRF   xB1
0B9EA:  CLRF   xB2
0B9EC:  CLRF   xB3
0B9EE:  CLRF   xB4
0B9F0:  CLRF   xB5
0B9F2:  CLRF   xB6
0B9F4:  CLRF   xB7
0B9F6:  CLRF   xB8
0B9F8:  CLRF   xB9
0B9FA:  CLRF   xBA
0B9FC:  CLRF   xBB
0B9FE:  CLRF   xBC
0BA00:  CLRF   xBD
0BA02:  CLRF   xBE
0BA04:  CLRF   xBF
0BA06:  CLRF   xC0
0BA08:  CLRF   xC1
0BA0A:  CLRF   xC2
0BA0C:  CLRF   xC3
0BA0E:  CLRF   xC4
0BA10:  CLRF   xC5
0BA12:  CLRF   xC6
0BA14:  CLRF   xC7
0BA16:  CLRF   xC8
0BA18:  CLRF   xC9
0BA1A:  CLRF   xCA
0BA1C:  CLRF   xCB
0BA1E:  CLRF   xCC
0BA20:  CLRF   xCD
0BA22:  CLRF   xCE
0BA24:  CLRF   xCF
0BA26:  CLRF   xD0
0BA28:  CLRF   xD1
0BA2A:  CLRF   xD2
0BA2C:  CLRF   xD3
0BA2E:  CLRF   xD4
0BA30:  CLRF   xD5
0BA32:  CLRF   xD6
0BA34:  CLRF   xD7
0BA36:  CLRF   xD8
0BA38:  CLRF   xD9
0BA3A:  CLRF   xDA
0BA3C:  CLRF   xDB
0BA3E:  CLRF   xDC
0BA40:  CLRF   xDD
0BA42:  CLRF   xDE
0BA44:  CLRF   xDF
0BA46:  CLRF   xE0
0BA48:  CLRF   xE1
0BA4A:  CLRF   xE2
0BA4C:  CLRF   xE3
0BA4E:  CLRF   xE4
0BA50:  CLRF   xE5
0BA52:  CLRF   xE6
0BA54:  CLRF   xE7
0BA56:  CLRF   xE8
0BA58:  CLRF   xE9
0BA5A:  CLRF   xEA
0BA5C:  CLRF   xEB
0BA5E:  CLRF   xEC
0BA60:  CLRF   xED
0BA62:  CLRF   xEE
0BA64:  CLRF   xEF
0BA66:  CLRF   xF0
0BA68:  CLRF   xF1
0BA6A:  CLRF   xF2
0BA6C:  CLRF   xF3
0BA6E:  CLRF   xF4
0BA70:  CLRF   xF5
0BA72:  CLRF   xF6
0BA74:  CLRF   xF7
0BA76:  CLRF   xF8
0BA78:  CLRF   xF9
0BA7A:  CLRF   xFA
0BA7C:  CLRF   xFB
0BA7E:  CLRF   xFC
0BA80:  CLRF   xFD
0BA82:  CLRF   xFE
0BA84:  CLRF   xFF
0BA86:  MOVLB  7
0BA88:  CLRF   x00
0BA8A:  CLRF   x01
0BA8C:  CLRF   x02
0BA8E:  CLRF   x03
0BA90:  CLRF   x04
0BA92:  CLRF   x05
0BA94:  CLRF   x06
0BA96:  CLRF   x07
0BA98:  CLRF   x08
0BA9A:  CLRF   x09
0BA9C:  CLRF   x0A
0BA9E:  CLRF   x0B
0BAA0:  CLRF   x0C
0BAA2:  CLRF   x0D
0BAA4:  CLRF   x0E
0BAA6:  CLRF   x0F
0BAA8:  CLRF   x10
0BAAA:  CLRF   x11
0BAAC:  CLRF   x12
0BAAE:  CLRF   x13
0BAB0:  CLRF   x14
0BAB2:  CLRF   x15
0BAB4:  CLRF   x16
0BAB6:  CLRF   x17
0BAB8:  CLRF   x18
0BABA:  CLRF   x19
0BABC:  CLRF   x1A
0BABE:  CLRF   x1B
0BAC0:  CLRF   x1C
0BAC2:  CLRF   x1D
0BAC4:  CLRF   x1E
0BAC6:  CLRF   x1F
0BAC8:  CLRF   x20
0BACA:  CLRF   x21
0BACC:  CLRF   x22
0BACE:  CLRF   x23
0BAD0:  CLRF   x24
0BAD2:  CLRF   x25
0BAD4:  CLRF   x26
0BAD6:  CLRF   x27
0BAD8:  CLRF   x28
0BADA:  CLRF   x29
0BADC:  CLRF   x2A
0BADE:  CLRF   x2B
0BAE0:  CLRF   x2C
0BAE2:  CLRF   x2D
0BAE4:  CLRF   x2E
0BAE6:  CLRF   x2F
0BAE8:  CLRF   x30
0BAEA:  CLRF   x31
0BAEC:  CLRF   x32
0BAEE:  CLRF   x33
0BAF0:  CLRF   x34
0BAF2:  CLRF   x35
0BAF4:  CLRF   x36
0BAF6:  CLRF   x37
0BAF8:  CLRF   x38
0BAFA:  CLRF   x39
0BAFC:  CLRF   x3A
0BAFE:  CLRF   x3B
0BB00:  CLRF   x3C
0BB02:  CLRF   x3D
0BB04:  CLRF   x3E
0BB06:  CLRF   x3F
0BB08:  CLRF   x40
0BB0A:  CLRF   x41
0BB0C:  CLRF   x42
0BB0E:  CLRF   x43
0BB10:  CLRF   x44
0BB12:  CLRF   x45
0BB14:  CLRF   x46
0BB16:  CLRF   x47
0BB18:  CLRF   x48
0BB1A:  CLRF   x49
0BB1C:  CLRF   x4A
0BB1E:  CLRF   x4B
0BB20:  CLRF   x4C
0BB22:  CLRF   x4D
0BB24:  CLRF   x4E
0BB26:  CLRF   x4F
0BB28:  CLRF   x50
0BB2A:  CLRF   x51
0BB2C:  CLRF   x52
0BB2E:  CLRF   x53
0BB30:  CLRF   x54
0BB32:  CLRF   x55
0BB34:  CLRF   x56
0BB36:  CLRF   x57
0BB38:  CLRF   x58
0BB3A:  CLRF   x59
0BB3C:  CLRF   x5A
0BB3E:  CLRF   x5B
0BB40:  CLRF   x5C
0BB42:  CLRF   x5D
0BB44:  CLRF   x5E
0BB46:  CLRF   x5F
0BB48:  CLRF   x60
0BB4A:  CLRF   x61
0BB4C:  CLRF   x62
0BB4E:  CLRF   x63
0BB50:  CLRF   x64
0BB52:  CLRF   x65
0BB54:  CLRF   x66
0BB56:  CLRF   x67
0BB58:  CLRF   x68
0BB5A:  CLRF   x69
0BB5C:  CLRF   x6A
0BB5E:  CLRF   x6B
0BB60:  CLRF   x6C
0BB62:  CLRF   x6D
0BB64:  CLRF   x6E
0BB66:  CLRF   x6F
0BB68:  CLRF   x70
0BB6A:  CLRF   x71
0BB6C:  CLRF   x72
0BB6E:  CLRF   x73
0BB70:  CLRF   x74
0BB72:  CLRF   x75
0BB74:  CLRF   x76
0BB76:  CLRF   x77
0BB78:  CLRF   x78
0BB7A:  CLRF   x79
0BB7C:  CLRF   x7A
0BB7E:  CLRF   x7B
0BB80:  CLRF   x7C
0BB82:  CLRF   x7D
0BB84:  CLRF   x7E
0BB86:  CLRF   x7F
0BB88:  CLRF   x80
0BB8A:  CLRF   x81
0BB8C:  CLRF   x82
0BB8E:  CLRF   x83
0BB90:  CLRF   x84
0BB92:  CLRF   x85
0BB94:  CLRF   x86
0BB96:  CLRF   x87
0BB98:  CLRF   x88
0BB9A:  CLRF   x89
0BB9C:  CLRF   x8A
0BB9E:  CLRF   x8B
0BBA0:  CLRF   x8C
0BBA2:  CLRF   x8D
0BBA4:  CLRF   x8E
0BBA6:  CLRF   x8F
0BBA8:  CLRF   x90
0BBAA:  CLRF   x91
0BBAC:  CLRF   x92
0BBAE:  CLRF   x93
0BBB0:  CLRF   x94
0BBB2:  CLRF   x95
0BBB4:  CLRF   x96
0BBB6:  CLRF   x97
0BBB8:  CLRF   x98
0BBBA:  CLRF   x99
0BBBC:  CLRF   x9A
0BBBE:  CLRF   x9B
0BBC0:  CLRF   x9C
0BBC2:  CLRF   x9D
0BBC4:  CLRF   x9E
0BBC6:  CLRF   x9F
0BBC8:  CLRF   xA0
0BBCA:  CLRF   xA1
0BBCC:  CLRF   xA2
0BBCE:  CLRF   xA3
0BBD0:  CLRF   xA4
0BBD2:  CLRF   xA5
0BBD4:  CLRF   xA6
0BBD6:  CLRF   xA7
0BBD8:  CLRF   xA8
0BBDA:  CLRF   xA9
0BBDC:  CLRF   xAA
0BBDE:  CLRF   xAB
0BBE0:  CLRF   xAC
0BBE2:  CLRF   xAD
0BBE4:  CLRF   xAE
0BBE6:  CLRF   xAF
0BBE8:  CLRF   xB0
0BBEA:  CLRF   xB1
0BBEC:  CLRF   xB2
0BBEE:  CLRF   xB3
0BBF0:  CLRF   xB4
0BBF2:  CLRF   xB5
0BBF4:  CLRF   xB6
0BBF6:  CLRF   xB7
0BBF8:  CLRF   xB8
0BBFA:  CLRF   xB9
0BBFC:  CLRF   xBA
0BBFE:  CLRF   xBB
0BC00:  CLRF   xBC
0BC02:  CLRF   xBD
0BC04:  CLRF   xBE
0BC06:  CLRF   xBF
0BC08:  CLRF   xC0
0BC0A:  CLRF   xC1
0BC0C:  CLRF   xC2
0BC0E:  CLRF   xC3
0BC10:  CLRF   xC4
0BC12:  CLRF   xC5
0BC14:  CLRF   xC6
0BC16:  CLRF   xC7
0BC18:  CLRF   xC8
0BC1A:  CLRF   xC9
0BC1C:  CLRF   xCA
0BC1E:  CLRF   xCB
0BC20:  CLRF   xCC
0BC22:  CLRF   xCD
0BC24:  CLRF   xCE
0BC26:  CLRF   xCF
0BC28:  CLRF   xD0
0BC2A:  CLRF   xD1
0BC2C:  CLRF   xD2
0BC2E:  CLRF   xD3
0BC30:  CLRF   xD4
0BC32:  CLRF   xD5
0BC34:  CLRF   xD6
0BC36:  CLRF   xD7
0BC38:  CLRF   xD8
0BC3A:  CLRF   xD9
0BC3C:  CLRF   xDA
0BC3E:  CLRF   xDB
0BC40:  CLRF   xDC
0BC42:  CLRF   xDD
0BC44:  CLRF   xDE
0BC46:  CLRF   xDF
0BC48:  CLRF   xE0
0BC4A:  CLRF   xE1
0BC4C:  CLRF   xE2
0BC4E:  CLRF   xE3
0BC50:  CLRF   xE4
0BC52:  CLRF   xE5
0BC54:  CLRF   xE6
0BC56:  CLRF   xE7
0BC58:  CLRF   xE8
0BC5A:  CLRF   xE9
0BC5C:  CLRF   xEA
0BC5E:  CLRF   xEB
0BC60:  CLRF   xEC
0BC62:  CLRF   xED
0BC64:  CLRF   xEE
0BC66:  CLRF   xEF
0BC68:  CLRF   xF0
0BC6A:  CLRF   xF1
0BC6C:  CLRF   xF2
0BC6E:  CLRF   xF3
0BC70:  CLRF   xF4
0BC72:  CLRF   xF5
0BC74:  CLRF   xF6
0BC76:  CLRF   xF7
0BC78:  CLRF   xF8
0BC7A:  CLRF   xF9
0BC7C:  CLRF   xFA
0BC7E:  CLRF   xFB
0BC80:  CLRF   xFC
0BC82:  CLRF   xFD
0BC84:  CLRF   xFE
0BC86:  CLRF   xFF
0BC88:  MOVLB  8
0BC8A:  CLRF   x00
0BC8C:  CLRF   x01
0BC8E:  CLRF   x02
0BC90:  CLRF   x03
0BC92:  CLRF   x04
0BC94:  CLRF   x05
0BC96:  CLRF   x06
0BC98:  CLRF   x07
0BC9A:  CLRF   x08
0BC9C:  CLRF   x09
0BC9E:  CLRF   x0A
0BCA0:  CLRF   x0B
0BCA2:  CLRF   x0C
0BCA4:  CLRF   x0D
0BCA6:  CLRF   x0E
0BCA8:  CLRF   x0F
0BCAA:  CLRF   x10
0BCAC:  CLRF   x11
0BCAE:  CLRF   x12
0BCB0:  CLRF   x13
0BCB2:  CLRF   x14
0BCB4:  CLRF   x15
0BCB6:  CLRF   x16
0BCB8:  CLRF   x17
0BCBA:  CLRF   x18
0BCBC:  CLRF   x19
0BCBE:  CLRF   x1A
0BCC0:  CLRF   x1B
0BCC2:  CLRF   x1C
0BCC4:  CLRF   x1D
0BCC6:  CLRF   x1E
0BCC8:  CLRF   x1F
0BCCA:  CLRF   x20
0BCCC:  CLRF   x21
0BCCE:  CLRF   x22
0BCD0:  CLRF   x23
0BCD2:  CLRF   x24
0BCD4:  CLRF   x25
0BCD6:  CLRF   x26
0BCD8:  CLRF   x27
0BCDA:  CLRF   x28
0BCDC:  CLRF   x29
0BCDE:  CLRF   x2A
0BCE0:  CLRF   x2B
0BCE2:  CLRF   x2C
0BCE4:  CLRF   x2D
0BCE6:  CLRF   x2E
0BCE8:  CLRF   x2F
0BCEA:  CLRF   x30
0BCEC:  CLRF   x31
0BCEE:  CLRF   x32
0BCF0:  CLRF   x33
0BCF2:  CLRF   x34
0BCF4:  CLRF   x35
0BCF6:  CLRF   x36
0BCF8:  CLRF   x37
0BCFA:  CLRF   x38
0BCFC:  CLRF   x39
0BCFE:  CLRF   x3A
0BD00:  CLRF   x3B
0BD02:  CLRF   x3C
0BD04:  CLRF   x3D
0BD06:  CLRF   x3E
0BD08:  CLRF   x3F
0BD0A:  CLRF   x40
0BD0C:  CLRF   x41
0BD0E:  CLRF   x42
0BD10:  CLRF   x43
0BD12:  CLRF   x44
0BD14:  CLRF   x45
0BD16:  CLRF   x46
0BD18:  CLRF   x47
0BD1A:  CLRF   x48
0BD1C:  CLRF   x49
0BD1E:  CLRF   x4A
0BD20:  CLRF   x4B
0BD22:  CLRF   x4C
0BD24:  CLRF   x4D
0BD26:  CLRF   x4E
0BD28:  CLRF   x4F
0BD2A:  CLRF   x50
0BD2C:  CLRF   x51
0BD2E:  CLRF   x52
0BD30:  CLRF   x53
0BD32:  CLRF   x54
0BD34:  CLRF   x55
0BD36:  CLRF   x56
0BD38:  CLRF   x57
0BD3A:  CLRF   x58
0BD3C:  CLRF   x59
0BD3E:  CLRF   x5A
0BD40:  CLRF   x5B
0BD42:  CLRF   x5C
0BD44:  CLRF   x5D
0BD46:  CLRF   x5E
0BD48:  CLRF   x5F
0BD4A:  CLRF   x60
0BD4C:  CLRF   x61
0BD4E:  CLRF   x62
0BD50:  CLRF   x63
0BD52:  CLRF   x64
0BD54:  CLRF   x65
0BD56:  CLRF   x66
0BD58:  CLRF   x67
0BD5A:  CLRF   x68
0BD5C:  CLRF   x69
0BD5E:  CLRF   x6A
0BD60:  CLRF   x6B
0BD62:  CLRF   x6C
0BD64:  CLRF   x6D
0BD66:  CLRF   x6E
0BD68:  CLRF   x6F
0BD6A:  CLRF   x70
0BD6C:  CLRF   x71
0BD6E:  CLRF   x72
0BD70:  CLRF   x73
0BD72:  CLRF   x74
0BD74:  CLRF   x75
0BD76:  CLRF   x76
0BD78:  CLRF   x77
0BD7A:  CLRF   x78
0BD7C:  CLRF   x79
0BD7E:  CLRF   x7A
0BD80:  CLRF   x7B
0BD82:  CLRF   x7C
0BD84:  CLRF   x7D
0BD86:  CLRF   x7E
0BD88:  CLRF   x7F
0BD8A:  CLRF   x80
0BD8C:  CLRF   x81
0BD8E:  CLRF   x82
0BD90:  CLRF   x83
0BD92:  CLRF   x84
0BD94:  CLRF   x85
0BD96:  CLRF   x86
0BD98:  CLRF   x87
0BD9A:  CLRF   x88
0BD9C:  CLRF   x89
0BD9E:  CLRF   x8A
0BDA0:  CLRF   x8B
0BDA2:  CLRF   x8C
0BDA4:  CLRF   x8D
0BDA6:  CLRF   x8E
0BDA8:  CLRF   x8F
0BDAA:  CLRF   x90
0BDAC:  CLRF   x91
0BDAE:  CLRF   x92
0BDB0:  CLRF   x93
0BDB2:  CLRF   x94
0BDB4:  CLRF   x95
0BDB6:  CLRF   x96
0BDB8:  CLRF   x97
0BDBA:  CLRF   x98
0BDBC:  CLRF   x99
0BDBE:  CLRF   x9A
0BDC0:  CLRF   x9B
0BDC2:  CLRF   x9C
0BDC4:  CLRF   x9D
0BDC6:  CLRF   x9E
0BDC8:  CLRF   x9F
0BDCA:  CLRF   xA0
0BDCC:  CLRF   xA1
0BDCE:  CLRF   xA2
0BDD0:  CLRF   xA3
0BDD2:  CLRF   xA4
0BDD4:  CLRF   xA5
0BDD6:  CLRF   xA6
0BDD8:  CLRF   xA7
0BDDA:  CLRF   xA8
0BDDC:  CLRF   xA9
0BDDE:  CLRF   xAA
0BDE0:  CLRF   xAB
0BDE2:  CLRF   xAC
0BDE4:  CLRF   xAD
0BDE6:  CLRF   xAE
0BDE8:  CLRF   xAF
0BDEA:  CLRF   xB0
0BDEC:  CLRF   xB1
0BDEE:  CLRF   xB2
0BDF0:  CLRF   xB3
0BDF2:  CLRF   xB4
0BDF4:  CLRF   xB5
0BDF6:  CLRF   xB6
0BDF8:  CLRF   xB7
0BDFA:  CLRF   xB8
0BDFC:  CLRF   xB9
0BDFE:  CLRF   xBA
0BE00:  CLRF   xBB
0BE02:  CLRF   xBC
0BE04:  CLRF   xBD
0BE06:  CLRF   xBE
0BE08:  CLRF   xBF
0BE0A:  CLRF   xC0
0BE0C:  CLRF   xC1
0BE0E:  CLRF   xC2
0BE10:  CLRF   xC3
0BE12:  CLRF   xC4
0BE14:  CLRF   xC5
0BE16:  CLRF   xC6
0BE18:  CLRF   xC7
0BE1A:  CLRF   xC8
0BE1C:  CLRF   xC9
0BE1E:  CLRF   xCA
0BE20:  CLRF   xCB
0BE22:  CLRF   xCC
0BE24:  CLRF   xCD
0BE26:  CLRF   xCE
0BE28:  CLRF   xCF
0BE2A:  CLRF   xD0
0BE2C:  CLRF   xD1
0BE2E:  CLRF   xD2
0BE30:  CLRF   xD3
0BE32:  CLRF   xD4
0BE34:  CLRF   xD5
0BE36:  CLRF   xD6
0BE38:  CLRF   xD7
0BE3A:  CLRF   xD8
0BE3C:  CLRF   xD9
0BE3E:  CLRF   xDA
0BE40:  CLRF   xDB
0BE42:  CLRF   xDC
0BE44:  CLRF   xDD
0BE46:  CLRF   xDE
0BE48:  CLRF   xDF
0BE4A:  CLRF   xE0
0BE4C:  CLRF   xE1
0BE4E:  CLRF   xE2
0BE50:  CLRF   xE3
0BE52:  CLRF   xE4
0BE54:  CLRF   xE5
0BE56:  CLRF   xE6
0BE58:  CLRF   xE7
0BE5A:  CLRF   xE8
0BE5C:  CLRF   xE9
0BE5E:  CLRF   xEA
0BE60:  CLRF   xEB
0BE62:  CLRF   xEC
0BE64:  CLRF   xED
0BE66:  CLRF   xEE
0BE68:  CLRF   xEF
0BE6A:  CLRF   xF0
0BE6C:  CLRF   xF1
0BE6E:  CLRF   xF2
0BE70:  CLRF   xF3
0BE72:  CLRF   xF4
0BE74:  CLRF   xF5
0BE76:  CLRF   xF6
0BE78:  CLRF   xF7
0BE7A:  CLRF   xF8
0BE7C:  CLRF   xF9
0BE7E:  CLRF   xFA
0BE80:  CLRF   xFB
0BE82:  CLRF   xFC
0BE84:  CLRF   xFD
0BE86:  CLRF   xFE
0BE88:  CLRF   xFF
0BE8A:  MOVLB  9
0BE8C:  CLRF   x00
0BE8E:  CLRF   x01
0BE90:  CLRF   x02
0BE92:  CLRF   x03
0BE94:  CLRF   x04
0BE96:  CLRF   x05
0BE98:  CLRF   x06
0BE9A:  CLRF   x07
0BE9C:  CLRF   x08
0BE9E:  CLRF   x09
0BEA0:  CLRF   x0A
0BEA2:  CLRF   x0B
0BEA4:  CLRF   x0C
0BEA6:  CLRF   x0D
0BEA8:  CLRF   x0E
0BEAA:  CLRF   x0F
0BEAC:  CLRF   x10
0BEAE:  CLRF   x11
0BEB0:  CLRF   x12
0BEB2:  CLRF   x13
0BEB4:  CLRF   x14
0BEB6:  CLRF   x15
0BEB8:  CLRF   x16
0BEBA:  CLRF   x17
0BEBC:  CLRF   x18
0BEBE:  CLRF   x19
0BEC0:  CLRF   x1A
0BEC2:  CLRF   x1B
0BEC4:  CLRF   x1C
0BEC6:  CLRF   x1D
0BEC8:  CLRF   x1E
0BECA:  CLRF   x1F
0BECC:  CLRF   x20
0BECE:  CLRF   x21
0BED0:  CLRF   x22
0BED2:  CLRF   x23
0BED4:  CLRF   x24
0BED6:  CLRF   x25
0BED8:  CLRF   x26
0BEDA:  CLRF   x27
0BEDC:  CLRF   x28
0BEDE:  CLRF   x29
0BEE0:  CLRF   x2A
0BEE2:  CLRF   x2B
0BEE4:  CLRF   x2C
0BEE6:  CLRF   x2D
0BEE8:  CLRF   x2E
0BEEA:  CLRF   x2F
0BEEC:  CLRF   x30
0BEEE:  CLRF   x31
0BEF0:  CLRF   x32
0BEF2:  CLRF   x33
0BEF4:  CLRF   x34
0BEF6:  CLRF   x35
0BEF8:  CLRF   x36
0BEFA:  CLRF   x37
0BEFC:  CLRF   x38
0BEFE:  CLRF   x39
0BF00:  CLRF   x3A
0BF02:  CLRF   x3B
0BF04:  CLRF   x3C
0BF06:  CLRF   x3D
0BF08:  CLRF   x3E
0BF0A:  CLRF   x3F
0BF0C:  CLRF   x40
0BF0E:  CLRF   x41
0BF10:  CLRF   x42
0BF12:  CLRF   x43
0BF14:  CLRF   x44
0BF16:  CLRF   x45
0BF18:  CLRF   x46
0BF1A:  CLRF   x47
0BF1C:  CLRF   x48
0BF1E:  CLRF   x49
0BF20:  CLRF   x4A
0BF22:  CLRF   x4B
0BF24:  CLRF   x4C
0BF26:  CLRF   x4D
0BF28:  CLRF   x4E
0BF2A:  CLRF   x4F
0BF2C:  CLRF   x50
0BF2E:  CLRF   x51
0BF30:  CLRF   x52
0BF32:  CLRF   x53
0BF34:  CLRF   x54
0BF36:  CLRF   x55
0BF38:  CLRF   x56
0BF3A:  CLRF   x57
0BF3C:  CLRF   x58
0BF3E:  CLRF   x59
0BF40:  CLRF   x5A
0BF42:  CLRF   x5B
0BF44:  CLRF   x5C
0BF46:  CLRF   x5D
0BF48:  CLRF   x5E
0BF4A:  CLRF   x5F
0BF4C:  CLRF   x60
0BF4E:  CLRF   x61
0BF50:  CLRF   x62
0BF52:  CLRF   x63
0BF54:  CLRF   x64
0BF56:  CLRF   x65
0BF58:  CLRF   x66
0BF5A:  CLRF   x67
0BF5C:  CLRF   x68
0BF5E:  CLRF   x69
0BF60:  CLRF   x6A
0BF62:  CLRF   x6B
0BF64:  CLRF   x6C
0BF66:  CLRF   x6D
0BF68:  CLRF   x6E
0BF6A:  CLRF   x6F
0BF6C:  CLRF   x70
0BF6E:  CLRF   x71
0BF70:  CLRF   x72
0BF72:  CLRF   x73
0BF74:  CLRF   x74
0BF76:  CLRF   x75
0BF78:  CLRF   x76
0BF7A:  CLRF   x77
0BF7C:  CLRF   x78
0BF7E:  CLRF   x79
0BF80:  CLRF   x7A
0BF82:  CLRF   x7B
0BF84:  CLRF   x7C
0BF86:  CLRF   x7D
0BF88:  CLRF   x7E
0BF8A:  CLRF   x7F
0BF8C:  CLRF   x80
0BF8E:  CLRF   x81
0BF90:  CLRF   x82
0BF92:  CLRF   x83
0BF94:  CLRF   x84
0BF96:  CLRF   x85
0BF98:  CLRF   x86
0BF9A:  CLRF   x87
0BF9C:  CLRF   x88
0BF9E:  CLRF   x89
0BFA0:  CLRF   x8A
0BFA2:  CLRF   x8B
0BFA4:  CLRF   x8C
0BFA6:  CLRF   x8D
0BFA8:  CLRF   x8E
0BFAA:  CLRF   x8F
0BFAC:  CLRF   x90
0BFAE:  CLRF   x91
0BFB0:  CLRF   x92
0BFB2:  CLRF   x93
0BFB4:  CLRF   x94
0BFB6:  CLRF   x95
0BFB8:  CLRF   x96
0BFBA:  CLRF   x97
0BFBC:  CLRF   x98
0BFBE:  CLRF   x99
0BFC0:  CLRF   x9A
0BFC2:  CLRF   x9B
0BFC4:  CLRF   x9C
0BFC6:  CLRF   x9D
0BFC8:  CLRF   x9E
0BFCA:  CLRF   x9F
0BFCC:  CLRF   xA0
0BFCE:  CLRF   xA1
0BFD0:  CLRF   xA2
0BFD2:  CLRF   xA3
0BFD4:  CLRF   xA4
0BFD6:  CLRF   xA5
0BFD8:  CLRF   xA6
0BFDA:  CLRF   xA7
0BFDC:  CLRF   xA8
0BFDE:  CLRF   xA9
0BFE0:  CLRF   xAA
0BFE2:  CLRF   xAB
0BFE4:  CLRF   xAC
0BFE6:  CLRF   xAD
0BFE8:  CLRF   xAE
0BFEA:  CLRF   xAF
0BFEC:  CLRF   xB0
0BFEE:  CLRF   xB1
0BFF0:  CLRF   xB2
0BFF2:  CLRF   xB3
0BFF4:  CLRF   xB4
0BFF6:  CLRF   xB5
0BFF8:  CLRF   xB6
0BFFA:  CLRF   xB7
0BFFC:  CLRF   xB8
0BFFE:  CLRF   xB9
0C000:  CLRF   xBA
0C002:  CLRF   xBB
0C004:  CLRF   xBC
0C006:  CLRF   xBD
0C008:  CLRF   xBE
0C00A:  CLRF   xBF
0C00C:  CLRF   xC0
0C00E:  CLRF   xC1
0C010:  CLRF   xC2
0C012:  CLRF   xC3
0C014:  CLRF   xC4
0C016:  CLRF   xC5
0C018:  CLRF   xC6
0C01A:  CLRF   xC7
0C01C:  CLRF   xC8
....................     port2.port_num = 2; 
0C01E:  MOVLW  02
0C020:  MOVLB  5
0C022:  MOVWF  xC9
....................     port2.sweep_step = 0;
0C024:  CLRF   xCB
0C026:  CLRF   xCA
....................     port2.active = 1;
0C028:  MOVLB  9
0C02A:  BSF    xC8.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C02C:  CLRF   xCA
0C02E:  MOVLW  01
0C030:  MOVWF  xC9
0C032:  MOVLB  0
0C034:  CALL   8F40
0C038:  MOVFF  02,03
0C03C:  MOVF   01,W
0C03E:  MOVWF  FE1
0C040:  MOVFF  03,FE2
0C044:  MOVLW  09
0C046:  MOVWF  FEA
0C048:  MOVLW  CB
0C04A:  MOVWF  FE9
0C04C:  MOVLW  0C
0C04E:  MOVWF  01
0C050:  MOVFF  FE6,FEE
0C054:  DECFSZ 01,F
0C056:  GOTO   C050
....................     while (port1.active || port2.active)
0C05A:  MOVLB  5
0C05C:  BTFSS  xC8.0
0C05E:  BRA    C066
0C060:  MOVLB  0
0C062:  GOTO   C076
0C066:  MOVLB  0
0C068:  MOVLB  9
0C06A:  BTFSC  xC8.0
0C06C:  BRA    C074
0C06E:  MOVLB  0
0C070:  GOTO   C352
0C074:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C076:  MOVFF  9CA,9DD
0C07A:  MOVFF  9C9,9DC
0C07E:  CALL   25C4
....................         mcp4901_2_write(count);
0C082:  MOVFF  9CA,9DD
0C086:  MOVFF  9C9,9DC
0C08A:  CALL   2602
....................         delay_us(10); 
0C08E:  MOVLW  0D
0C090:  MOVWF  00
0C092:  DECFSZ 00,F
0C094:  BRA    C092
....................         if (port1.active) {
0C096:  MOVLB  5
0C098:  BTFSC  xC8.0
0C09A:  BRA    C0A2
0C09C:  MOVLB  0
0C09E:  GOTO   C1F2
0C0A2:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C0A4:  MOVLW  01
0C0A6:  MOVLB  9
0C0A8:  MOVWF  xEE
0C0AA:  MOVLB  0
0C0AC:  CALL   2214
0C0B0:  MOVLB  9
0C0B2:  CLRF   xDA
0C0B4:  CLRF   xD9
0C0B6:  MOVFF  02,9D8
0C0BA:  MOVFF  01,9D7
0C0BE:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C0C0:  MOVLW  01
0C0C2:  MOVLB  9
0C0C4:  MOVWF  xEE
0C0C6:  MOVLB  0
0C0C8:  CALL   2214
0C0CC:  MOVFF  02,03
0C0D0:  MOVF   01,W
0C0D2:  MOVLB  9
0C0D4:  ADDWF  xD7,F
0C0D6:  MOVF   03,W
0C0D8:  ADDWFC xD8,F
0C0DA:  MOVLW  00
0C0DC:  ADDWFC xD9,F
0C0DE:  MOVLW  00
0C0E0:  ADDWFC xDA,F
....................             ans = ans/2;
0C0E2:  BCF    FD8.0
0C0E4:  RRCF   xDA,F
0C0E6:  RRCF   xD9,F
0C0E8:  RRCF   xD8,F
0C0EA:  RRCF   xD7,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C0EC:  RLCF   xC9,W
0C0EE:  MOVWF  02
0C0F0:  RLCF   xCA,W
0C0F2:  MOVWF  03
0C0F4:  RLCF   02,F
0C0F6:  RLCF   03,F
0C0F8:  MOVLW  FC
0C0FA:  ANDWF  02,F
0C0FC:  MOVF   02,W
0C0FE:  ADDLW  CC
0C100:  MOVWF  01
0C102:  MOVLW  01
0C104:  ADDWFC 03,F
0C106:  MOVF   01,W
0C108:  MOVWF  xDE
0C10A:  MOVFF  03,9DF
0C10E:  MOVLW  02
0C110:  MOVWF  xEE
0C112:  MOVLB  0
0C114:  CALL   2214
0C118:  MOVFF  9DF,FEA
0C11C:  MOVFF  9DE,FE9
0C120:  MOVFF  02,FEC
0C124:  MOVF   FED,F
0C126:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0C12A:  MOVLB  9
0C12C:  RLCF   xC9,W
0C12E:  MOVWF  02
0C130:  RLCF   xCA,W
0C132:  MOVWF  03
0C134:  RLCF   02,F
0C136:  RLCF   03,F
0C138:  MOVLW  FC
0C13A:  ANDWF  02,F
0C13C:  MOVF   02,W
0C13E:  ADDLW  03
0C140:  MOVWF  xDC
0C142:  MOVLW  00
0C144:  ADDWFC 03,W
0C146:  MOVWF  xDD
0C148:  MOVLW  02
0C14A:  ADDWF  xDC,W
0C14C:  MOVWF  01
0C14E:  MOVLW  00
0C150:  ADDWFC xDD,W
0C152:  MOVWF  03
0C154:  MOVF   01,W
0C156:  ADDLW  C9
0C158:  MOVWF  FE9
0C15A:  MOVLW  01
0C15C:  ADDWFC 03,W
0C15E:  MOVWF  FEA
0C160:  MOVFF  9D7,FEF
0C164:  MOVFF  9D8,FEC
0C168:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0C16A:  MOVLW  01
0C16C:  ADDWF  xC9,W
0C16E:  MOVLB  1
0C170:  MOVWF  xCA
0C172:  MOVLW  00
0C174:  MOVLB  9
0C176:  ADDWFC xCA,W
0C178:  MOVLB  1
0C17A:  MOVWF  xCB
....................             if (port1.data_buffer[count].current < curr_limit) {
0C17C:  MOVLB  9
0C17E:  RLCF   xC9,W
0C180:  MOVWF  02
0C182:  RLCF   xCA,W
0C184:  MOVWF  03
0C186:  RLCF   02,F
0C188:  RLCF   03,F
0C18A:  MOVLW  FC
0C18C:  ANDWF  02,F
0C18E:  MOVF   02,W
0C190:  ADDLW  03
0C192:  MOVWF  xDC
0C194:  MOVLW  00
0C196:  ADDWFC 03,W
0C198:  MOVWF  xDD
0C19A:  MOVLW  02
0C19C:  ADDWF  xDC,W
0C19E:  MOVWF  01
0C1A0:  MOVLW  00
0C1A2:  ADDWFC xDD,W
0C1A4:  MOVWF  03
0C1A6:  MOVF   01,W
0C1A8:  ADDLW  C9
0C1AA:  MOVWF  FE9
0C1AC:  MOVLW  01
0C1AE:  ADDWFC 03,W
0C1B0:  MOVWF  FEA
0C1B2:  MOVFF  FEC,9DD
0C1B6:  MOVF   FED,F
0C1B8:  MOVFF  FEF,9DC
0C1BC:  MOVF   xDD,W
0C1BE:  MOVLB  1
0C1C0:  SUBWF  xC8,W
0C1C2:  BTFSC  FD8.0
0C1C4:  BRA    C1CC
0C1C6:  MOVLB  0
0C1C8:  GOTO   C1F2
0C1CC:  MOVLB  0
0C1CE:  BTFSS  FD8.2
0C1D0:  GOTO   C1E8
0C1D4:  MOVLB  1
0C1D6:  MOVF   xC7,W
0C1D8:  MOVLB  9
0C1DA:  SUBWF  xDC,W
0C1DC:  BTFSS  FD8.0
0C1DE:  BRA    C1E6
0C1E0:  MOVLB  0
0C1E2:  GOTO   C1F2
0C1E6:  MOVLB  0
....................                 port1.active = 0;
0C1E8:  MOVLB  5
0C1EA:  BCF    xC8.0
....................                 disconnect_port1();
0C1EC:  MOVLB  0
0C1EE:  CALL   8FC2
....................             }
....................         }
....................         if (port2.active) {
0C1F2:  MOVLB  9
0C1F4:  BTFSC  xC8.0
0C1F6:  BRA    C1FE
0C1F8:  MOVLB  0
0C1FA:  GOTO   C322
0C1FE:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C200:  MOVLB  9
0C202:  RLCF   xC9,W
0C204:  MOVWF  02
0C206:  RLCF   xCA,W
0C208:  MOVWF  03
0C20A:  RLCF   02,F
0C20C:  RLCF   03,F
0C20E:  MOVLW  FC
0C210:  ANDWF  02,F
0C212:  MOVF   02,W
0C214:  ADDLW  CC
0C216:  MOVWF  01
0C218:  MOVLW  05
0C21A:  ADDWFC 03,F
0C21C:  MOVF   01,W
0C21E:  MOVWF  xDE
0C220:  MOVFF  03,9DF
0C224:  MOVLW  06
0C226:  MOVWF  xEE
0C228:  MOVLB  0
0C22A:  CALL   2214
0C22E:  MOVFF  9DF,FEA
0C232:  MOVFF  9DE,FE9
0C236:  MOVFF  02,FEC
0C23A:  MOVF   FED,F
0C23C:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C240:  MOVLB  9
0C242:  RLCF   xC9,W
0C244:  MOVWF  02
0C246:  RLCF   xCA,W
0C248:  MOVWF  03
0C24A:  RLCF   02,F
0C24C:  RLCF   03,F
0C24E:  MOVLW  FC
0C250:  ANDWF  02,F
0C252:  MOVF   02,W
0C254:  ADDLW  03
0C256:  MOVWF  xDC
0C258:  MOVLW  00
0C25A:  ADDWFC 03,W
0C25C:  MOVWF  xDD
0C25E:  MOVLW  02
0C260:  ADDWF  xDC,W
0C262:  MOVWF  01
0C264:  MOVLW  00
0C266:  ADDWFC xDD,W
0C268:  MOVWF  03
0C26A:  MOVF   01,W
0C26C:  ADDLW  C9
0C26E:  MOVWF  01
0C270:  MOVLW  05
0C272:  ADDWFC 03,F
0C274:  MOVF   01,W
0C276:  MOVWF  xDC
0C278:  MOVFF  03,9DD
0C27C:  MOVLW  05
0C27E:  MOVWF  xEE
0C280:  MOVLB  0
0C282:  CALL   2214
0C286:  MOVFF  9DD,FEA
0C28A:  MOVFF  9DC,FE9
0C28E:  MOVFF  02,FEC
0C292:  MOVF   FED,F
0C294:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C298:  MOVLW  01
0C29A:  MOVLB  9
0C29C:  ADDWF  xC9,W
0C29E:  MOVLB  5
0C2A0:  MOVWF  xCA
0C2A2:  MOVLW  00
0C2A4:  MOVLB  9
0C2A6:  ADDWFC xCA,W
0C2A8:  MOVLB  5
0C2AA:  MOVWF  xCB
....................             if (port2.data_buffer[count].current < curr_limit) {
0C2AC:  MOVLB  9
0C2AE:  RLCF   xC9,W
0C2B0:  MOVWF  02
0C2B2:  RLCF   xCA,W
0C2B4:  MOVWF  03
0C2B6:  RLCF   02,F
0C2B8:  RLCF   03,F
0C2BA:  MOVLW  FC
0C2BC:  ANDWF  02,F
0C2BE:  MOVF   02,W
0C2C0:  ADDLW  03
0C2C2:  MOVWF  xDC
0C2C4:  MOVLW  00
0C2C6:  ADDWFC 03,W
0C2C8:  MOVWF  xDD
0C2CA:  MOVLW  02
0C2CC:  ADDWF  xDC,W
0C2CE:  MOVWF  01
0C2D0:  MOVLW  00
0C2D2:  ADDWFC xDD,W
0C2D4:  MOVWF  03
0C2D6:  MOVF   01,W
0C2D8:  ADDLW  C9
0C2DA:  MOVWF  FE9
0C2DC:  MOVLW  05
0C2DE:  ADDWFC 03,W
0C2E0:  MOVWF  FEA
0C2E2:  MOVFF  FEC,9DD
0C2E6:  MOVF   FED,F
0C2E8:  MOVFF  FEF,9DC
0C2EC:  MOVF   xDD,W
0C2EE:  MOVLB  1
0C2F0:  SUBWF  xC8,W
0C2F2:  BTFSC  FD8.0
0C2F4:  BRA    C2FC
0C2F6:  MOVLB  0
0C2F8:  GOTO   C322
0C2FC:  MOVLB  0
0C2FE:  BTFSS  FD8.2
0C300:  GOTO   C318
0C304:  MOVLB  1
0C306:  MOVF   xC7,W
0C308:  MOVLB  9
0C30A:  SUBWF  xDC,W
0C30C:  BTFSS  FD8.0
0C30E:  BRA    C316
0C310:  MOVLB  0
0C312:  GOTO   C322
0C316:  MOVLB  0
....................                 port2.active = 0;
0C318:  MOVLB  9
0C31A:  BCF    xC8.0
....................                 disconnect_port2();
0C31C:  MOVLB  0
0C31E:  CALL   8FCA
....................             } 
....................         }
....................         count++;
0C322:  MOVLB  9
0C324:  INCF   xC9,F
0C326:  BTFSC  FD8.2
0C328:  INCF   xCA,F
....................         if (count >= 255) {
0C32A:  MOVF   xCA,F
0C32C:  BTFSC  FD8.2
0C32E:  BRA    C336
0C330:  MOVLB  0
0C332:  GOTO   C34A
0C336:  MOVLB  0
0C338:  MOVLB  9
0C33A:  MOVF   xC9,W
0C33C:  SUBLW  FE
0C33E:  BTFSS  FD8.0
0C340:  BRA    C348
0C342:  MOVLB  0
0C344:  GOTO   C34E
0C348:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C34A:  GOTO   C352
....................         }
0C34E:  GOTO   C05A
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C352:  MOVLB  9
0C354:  CLRF   xDB
0C356:  MOVLB  0
0C358:  MOVLB  9
0C35A:  MOVF   xCA,F
0C35C:  BTFSC  FD8.2
0C35E:  BRA    C366
0C360:  MOVLB  0
0C362:  GOTO   C37A
0C366:  MOVLB  0
0C368:  MOVLB  9
0C36A:  MOVF   xC9,W
0C36C:  SUBWF  xDB,W
0C36E:  BTFSS  FD8.0
0C370:  BRA    C378
0C372:  MOVLB  0
0C374:  GOTO   C52E
0C378:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C37A:  MOVLB  A
0C37C:  CLRF   x52
0C37E:  MOVFF  9DB,A51
0C382:  CLRF   x54
0C384:  MOVLW  04
0C386:  MOVWF  x53
0C388:  MOVLB  0
0C38A:  CALL   7F94
0C38E:  MOVFF  02,03
0C392:  MOVF   01,W
0C394:  ADDLW  CC
0C396:  MOVWF  FE9
0C398:  MOVLW  01
0C39A:  ADDWFC 03,W
0C39C:  MOVWF  FEA
0C39E:  MOVFF  FEC,9DF
0C3A2:  MOVF   FED,F
0C3A4:  MOVFF  FEF,9DE
0C3A8:  MOVLB  A
0C3AA:  CLRF   x52
0C3AC:  MOVFF  9DB,A51
0C3B0:  CLRF   x54
0C3B2:  MOVLW  04
0C3B4:  MOVWF  x53
0C3B6:  MOVLB  0
0C3B8:  CALL   7F94
0C3BC:  MOVFF  02,03
0C3C0:  MOVF   01,W
0C3C2:  ADDLW  03
0C3C4:  MOVLB  9
0C3C6:  MOVWF  xE0
0C3C8:  MOVLW  00
0C3CA:  ADDWFC 03,W
0C3CC:  MOVWF  xE1
0C3CE:  MOVLW  02
0C3D0:  ADDWF  xE0,W
0C3D2:  MOVWF  01
0C3D4:  MOVLW  00
0C3D6:  ADDWFC xE1,W
0C3D8:  MOVWF  03
0C3DA:  MOVF   01,W
0C3DC:  ADDLW  C9
0C3DE:  MOVWF  FE9
0C3E0:  MOVLW  01
0C3E2:  ADDWFC 03,W
0C3E4:  MOVWF  FEA
0C3E6:  MOVFF  FEC,9E1
0C3EA:  MOVF   FED,F
0C3EC:  MOVFF  FEF,9E0
0C3F0:  MOVLB  A
0C3F2:  CLRF   x52
0C3F4:  MOVFF  9DB,A51
0C3F8:  CLRF   x54
0C3FA:  MOVLW  04
0C3FC:  MOVWF  x53
0C3FE:  MOVLB  0
0C400:  CALL   7F94
0C404:  MOVFF  02,03
0C408:  MOVF   01,W
0C40A:  ADDLW  CC
0C40C:  MOVWF  FE9
0C40E:  MOVLW  05
0C410:  ADDWFC 03,W
0C412:  MOVWF  FEA
0C414:  MOVFF  FEC,9E5
0C418:  MOVF   FED,F
0C41A:  MOVFF  FEF,9E4
0C41E:  MOVLB  A
0C420:  CLRF   x52
0C422:  MOVFF  9DB,A51
0C426:  CLRF   x54
0C428:  MOVLW  04
0C42A:  MOVWF  x53
0C42C:  MOVLB  0
0C42E:  CALL   7F94
0C432:  MOVFF  02,03
0C436:  MOVF   01,W
0C438:  ADDLW  03
0C43A:  MOVLB  9
0C43C:  MOVWF  xE6
0C43E:  MOVLW  00
0C440:  ADDWFC 03,W
0C442:  MOVWF  xE7
0C444:  MOVLW  02
0C446:  ADDWF  xE6,W
0C448:  MOVWF  01
0C44A:  MOVLW  00
0C44C:  ADDWFC xE7,W
0C44E:  MOVWF  03
0C450:  MOVF   01,W
0C452:  ADDLW  C9
0C454:  MOVWF  FE9
0C456:  MOVLW  05
0C458:  ADDWFC 03,W
0C45A:  MOVWF  FEA
0C45C:  MOVFF  FEC,9E7
0C460:  MOVF   FED,F
0C462:  MOVFF  FEF,9E6
0C466:  MOVFF  9DF,9E8
0C46A:  MOVLW  37
0C46C:  MOVWF  xE9
0C46E:  MOVLB  0
0C470:  CALL   2294
0C474:  MOVFF  9DE,9E8
0C478:  MOVLW  37
0C47A:  MOVLB  9
0C47C:  MOVWF  xE9
0C47E:  MOVLB  0
0C480:  CALL   2294
0C484:  MOVLW  2C
0C486:  BTFSS  FA6.6
0C488:  GOTO   C486
0C48C:  MOVLB  E
0C48E:  MOVWF  xF9
0C490:  MOVFF  9E1,9E8
0C494:  MOVLW  37
0C496:  MOVLB  9
0C498:  MOVWF  xE9
0C49A:  MOVLB  0
0C49C:  CALL   2294
0C4A0:  MOVFF  9E0,9E8
0C4A4:  MOVLW  37
0C4A6:  MOVLB  9
0C4A8:  MOVWF  xE9
0C4AA:  MOVLB  0
0C4AC:  CALL   2294
0C4B0:  MOVLW  2C
0C4B2:  BTFSS  FA6.6
0C4B4:  GOTO   C4B2
0C4B8:  MOVLB  E
0C4BA:  MOVWF  xF9
0C4BC:  MOVFF  9E5,9E8
0C4C0:  MOVLW  37
0C4C2:  MOVLB  9
0C4C4:  MOVWF  xE9
0C4C6:  MOVLB  0
0C4C8:  CALL   2294
0C4CC:  MOVFF  9E4,9E8
0C4D0:  MOVLW  37
0C4D2:  MOVLB  9
0C4D4:  MOVWF  xE9
0C4D6:  MOVLB  0
0C4D8:  CALL   2294
0C4DC:  MOVLW  2C
0C4DE:  BTFSS  FA6.6
0C4E0:  GOTO   C4DE
0C4E4:  MOVLB  E
0C4E6:  MOVWF  xF9
0C4E8:  MOVFF  9E7,9E8
0C4EC:  MOVLW  37
0C4EE:  MOVLB  9
0C4F0:  MOVWF  xE9
0C4F2:  MOVLB  0
0C4F4:  CALL   2294
0C4F8:  MOVFF  9E6,9E8
0C4FC:  MOVLW  37
0C4FE:  MOVLB  9
0C500:  MOVWF  xE9
0C502:  MOVLB  0
0C504:  CALL   2294
0C508:  MOVLW  0D
0C50A:  BTFSS  FA6.6
0C50C:  GOTO   C50A
0C510:  MOVLB  E
0C512:  MOVWF  xF9
0C514:  MOVLW  0A
0C516:  MOVLB  0
0C518:  BTFSS  FA6.6
0C51A:  GOTO   C518
0C51E:  MOVLB  E
0C520:  MOVWF  xF9
0C522:  MOVLB  0
0C524:  MOVLB  9
0C526:  INCF   xDB,F
0C528:  MOVLB  0
0C52A:  GOTO   C358
....................     }
0C52E:  GOTO   C7F2 (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
*
0989E:  CALL   396A
098A2:  MOVFF  03,1E8
098A6:  MOVFF  02,1E7
098AA:  MOVFF  01,1E6
098AE:  MOVFF  00,1E5
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
098B2:  MOVLW  2E
098B4:  GOTO   8F30
....................     // Enable both CIGS ports
....................     connect_port1();
098B8:  CALL   4F66
....................     connect_port2();
098BC:  CALL   4F6E
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
098C0:  MOVLB  1
098C2:  CLRF   xE9
098C4:  CLRF   xEA
098C6:  CLRF   xEB
098C8:  CLRF   xEC
098CA:  CLRF   xED
098CC:  CLRF   xEE
098CE:  CLRF   xEF
098D0:  CLRF   xF0
098D2:  CLRF   xF1
098D4:  CLRF   xF2
098D6:  CLRF   xF3
098D8:  CLRF   xF4
098DA:  CLRF   xF5
098DC:  CLRF   xF6
098DE:  CLRF   xF7
098E0:  CLRF   xF8
098E2:  CLRF   xF9
098E4:  CLRF   xFA
098E6:  CLRF   xFB
098E8:  CLRF   xFC
098EA:  CLRF   xFD
098EC:  CLRF   xFE
098EE:  CLRF   xFF
098F0:  MOVLB  2
098F2:  CLRF   x00
098F4:  CLRF   x01
098F6:  CLRF   x02
098F8:  CLRF   x03
098FA:  CLRF   x04
098FC:  CLRF   x05
098FE:  CLRF   x06
09900:  CLRF   x07
09902:  CLRF   x08
09904:  CLRF   x09
09906:  CLRF   x0A
09908:  CLRF   x0B
0990A:  CLRF   x0C
0990C:  CLRF   x0D
0990E:  CLRF   x0E
09910:  CLRF   x0F
09912:  CLRF   x10
09914:  CLRF   x11
09916:  CLRF   x12
09918:  CLRF   x13
0991A:  CLRF   x14
0991C:  CLRF   x15
0991E:  CLRF   x16
09920:  CLRF   x17
09922:  CLRF   x18
09924:  CLRF   x19
09926:  CLRF   x1A
09928:  CLRF   x1B
0992A:  CLRF   x1C
0992C:  CLRF   x1D
0992E:  CLRF   x1E
09930:  CLRF   x1F
09932:  CLRF   x20
09934:  CLRF   x21
09936:  CLRF   x22
09938:  CLRF   x23
0993A:  CLRF   x24
0993C:  CLRF   x25
0993E:  CLRF   x26
09940:  CLRF   x27
09942:  CLRF   x28
09944:  CLRF   x29
09946:  CLRF   x2A
09948:  CLRF   x2B
0994A:  CLRF   x2C
0994C:  CLRF   x2D
0994E:  CLRF   x2E
09950:  CLRF   x2F
09952:  CLRF   x30
09954:  CLRF   x31
09956:  CLRF   x32
09958:  CLRF   x33
0995A:  CLRF   x34
0995C:  CLRF   x35
0995E:  CLRF   x36
09960:  CLRF   x37
09962:  CLRF   x38
09964:  CLRF   x39
09966:  CLRF   x3A
09968:  CLRF   x3B
0996A:  CLRF   x3C
0996C:  CLRF   x3D
0996E:  CLRF   x3E
09970:  CLRF   x3F
09972:  CLRF   x40
09974:  CLRF   x41
09976:  CLRF   x42
09978:  CLRF   x43
0997A:  CLRF   x44
0997C:  CLRF   x45
0997E:  CLRF   x46
09980:  CLRF   x47
09982:  CLRF   x48
09984:  CLRF   x49
09986:  CLRF   x4A
09988:  CLRF   x4B
0998A:  CLRF   x4C
0998C:  CLRF   x4D
0998E:  CLRF   x4E
09990:  CLRF   x4F
09992:  CLRF   x50
09994:  CLRF   x51
09996:  CLRF   x52
09998:  CLRF   x53
0999A:  CLRF   x54
0999C:  CLRF   x55
0999E:  CLRF   x56
099A0:  CLRF   x57
099A2:  CLRF   x58
099A4:  CLRF   x59
099A6:  CLRF   x5A
099A8:  CLRF   x5B
099AA:  CLRF   x5C
099AC:  CLRF   x5D
099AE:  CLRF   x5E
099B0:  CLRF   x5F
099B2:  CLRF   x60
099B4:  CLRF   x61
099B6:  CLRF   x62
099B8:  CLRF   x63
099BA:  CLRF   x64
099BC:  CLRF   x65
099BE:  CLRF   x66
099C0:  CLRF   x67
099C2:  CLRF   x68
099C4:  CLRF   x69
099C6:  CLRF   x6A
099C8:  CLRF   x6B
099CA:  CLRF   x6C
099CC:  CLRF   x6D
099CE:  CLRF   x6E
099D0:  CLRF   x6F
099D2:  CLRF   x70
099D4:  CLRF   x71
099D6:  CLRF   x72
099D8:  CLRF   x73
099DA:  CLRF   x74
099DC:  CLRF   x75
099DE:  CLRF   x76
099E0:  CLRF   x77
099E2:  CLRF   x78
099E4:  CLRF   x79
099E6:  CLRF   x7A
099E8:  CLRF   x7B
099EA:  CLRF   x7C
099EC:  CLRF   x7D
099EE:  CLRF   x7E
099F0:  CLRF   x7F
099F2:  CLRF   x80
099F4:  CLRF   x81
099F6:  CLRF   x82
099F8:  CLRF   x83
099FA:  CLRF   x84
099FC:  CLRF   x85
099FE:  CLRF   x86
09A00:  CLRF   x87
09A02:  CLRF   x88
09A04:  CLRF   x89
09A06:  CLRF   x8A
09A08:  CLRF   x8B
09A0A:  CLRF   x8C
09A0C:  CLRF   x8D
09A0E:  CLRF   x8E
09A10:  CLRF   x8F
09A12:  CLRF   x90
09A14:  CLRF   x91
09A16:  CLRF   x92
09A18:  CLRF   x93
09A1A:  CLRF   x94
09A1C:  CLRF   x95
09A1E:  CLRF   x96
09A20:  CLRF   x97
09A22:  CLRF   x98
09A24:  CLRF   x99
09A26:  CLRF   x9A
09A28:  CLRF   x9B
09A2A:  CLRF   x9C
09A2C:  CLRF   x9D
09A2E:  CLRF   x9E
09A30:  CLRF   x9F
09A32:  CLRF   xA0
09A34:  CLRF   xA1
09A36:  CLRF   xA2
09A38:  CLRF   xA3
09A3A:  CLRF   xA4
09A3C:  CLRF   xA5
09A3E:  CLRF   xA6
09A40:  CLRF   xA7
09A42:  CLRF   xA8
09A44:  CLRF   xA9
09A46:  CLRF   xAA
09A48:  CLRF   xAB
09A4A:  CLRF   xAC
09A4C:  CLRF   xAD
09A4E:  CLRF   xAE
09A50:  CLRF   xAF
09A52:  CLRF   xB0
09A54:  CLRF   xB1
09A56:  CLRF   xB2
09A58:  CLRF   xB3
09A5A:  CLRF   xB4
09A5C:  CLRF   xB5
09A5E:  CLRF   xB6
09A60:  CLRF   xB7
09A62:  CLRF   xB8
09A64:  CLRF   xB9
09A66:  CLRF   xBA
09A68:  CLRF   xBB
09A6A:  CLRF   xBC
09A6C:  CLRF   xBD
09A6E:  CLRF   xBE
09A70:  CLRF   xBF
09A72:  CLRF   xC0
09A74:  CLRF   xC1
09A76:  CLRF   xC2
09A78:  CLRF   xC3
09A7A:  CLRF   xC4
09A7C:  CLRF   xC5
09A7E:  CLRF   xC6
09A80:  CLRF   xC7
09A82:  CLRF   xC8
09A84:  CLRF   xC9
09A86:  CLRF   xCA
09A88:  CLRF   xCB
09A8A:  CLRF   xCC
09A8C:  CLRF   xCD
09A8E:  CLRF   xCE
09A90:  CLRF   xCF
09A92:  CLRF   xD0
09A94:  CLRF   xD1
09A96:  CLRF   xD2
09A98:  CLRF   xD3
09A9A:  CLRF   xD4
09A9C:  CLRF   xD5
09A9E:  CLRF   xD6
09AA0:  CLRF   xD7
09AA2:  CLRF   xD8
09AA4:  CLRF   xD9
09AA6:  CLRF   xDA
09AA8:  CLRF   xDB
09AAA:  CLRF   xDC
09AAC:  CLRF   xDD
09AAE:  CLRF   xDE
09AB0:  CLRF   xDF
09AB2:  CLRF   xE0
09AB4:  CLRF   xE1
09AB6:  CLRF   xE2
09AB8:  CLRF   xE3
09ABA:  CLRF   xE4
09ABC:  CLRF   xE5
09ABE:  CLRF   xE6
09AC0:  CLRF   xE7
09AC2:  CLRF   xE8
09AC4:  CLRF   xE9
09AC6:  CLRF   xEA
09AC8:  CLRF   xEB
09ACA:  CLRF   xEC
09ACC:  CLRF   xED
09ACE:  CLRF   xEE
09AD0:  CLRF   xEF
09AD2:  CLRF   xF0
09AD4:  CLRF   xF1
09AD6:  CLRF   xF2
09AD8:  CLRF   xF3
09ADA:  CLRF   xF4
09ADC:  CLRF   xF5
09ADE:  CLRF   xF6
09AE0:  CLRF   xF7
09AE2:  CLRF   xF8
09AE4:  CLRF   xF9
09AE6:  CLRF   xFA
09AE8:  CLRF   xFB
09AEA:  CLRF   xFC
09AEC:  CLRF   xFD
09AEE:  CLRF   xFE
09AF0:  CLRF   xFF
09AF2:  MOVLB  3
09AF4:  CLRF   x00
09AF6:  CLRF   x01
09AF8:  CLRF   x02
09AFA:  CLRF   x03
09AFC:  CLRF   x04
09AFE:  CLRF   x05
09B00:  CLRF   x06
09B02:  CLRF   x07
09B04:  CLRF   x08
09B06:  CLRF   x09
09B08:  CLRF   x0A
09B0A:  CLRF   x0B
09B0C:  CLRF   x0C
09B0E:  CLRF   x0D
09B10:  CLRF   x0E
09B12:  CLRF   x0F
09B14:  CLRF   x10
09B16:  CLRF   x11
09B18:  CLRF   x12
09B1A:  CLRF   x13
09B1C:  CLRF   x14
09B1E:  CLRF   x15
09B20:  CLRF   x16
09B22:  CLRF   x17
09B24:  CLRF   x18
09B26:  CLRF   x19
09B28:  CLRF   x1A
09B2A:  CLRF   x1B
09B2C:  CLRF   x1C
09B2E:  CLRF   x1D
09B30:  CLRF   x1E
09B32:  CLRF   x1F
09B34:  CLRF   x20
09B36:  CLRF   x21
09B38:  CLRF   x22
09B3A:  CLRF   x23
09B3C:  CLRF   x24
09B3E:  CLRF   x25
09B40:  CLRF   x26
09B42:  CLRF   x27
09B44:  CLRF   x28
09B46:  CLRF   x29
09B48:  CLRF   x2A
09B4A:  CLRF   x2B
09B4C:  CLRF   x2C
09B4E:  CLRF   x2D
09B50:  CLRF   x2E
09B52:  CLRF   x2F
09B54:  CLRF   x30
09B56:  CLRF   x31
09B58:  CLRF   x32
09B5A:  CLRF   x33
09B5C:  CLRF   x34
09B5E:  CLRF   x35
09B60:  CLRF   x36
09B62:  CLRF   x37
09B64:  CLRF   x38
09B66:  CLRF   x39
09B68:  CLRF   x3A
09B6A:  CLRF   x3B
09B6C:  CLRF   x3C
09B6E:  CLRF   x3D
09B70:  CLRF   x3E
09B72:  CLRF   x3F
09B74:  CLRF   x40
09B76:  CLRF   x41
09B78:  CLRF   x42
09B7A:  CLRF   x43
09B7C:  CLRF   x44
09B7E:  CLRF   x45
09B80:  CLRF   x46
09B82:  CLRF   x47
09B84:  CLRF   x48
09B86:  CLRF   x49
09B88:  CLRF   x4A
09B8A:  CLRF   x4B
09B8C:  CLRF   x4C
09B8E:  CLRF   x4D
09B90:  CLRF   x4E
09B92:  CLRF   x4F
09B94:  CLRF   x50
09B96:  CLRF   x51
09B98:  CLRF   x52
09B9A:  CLRF   x53
09B9C:  CLRF   x54
09B9E:  CLRF   x55
09BA0:  CLRF   x56
09BA2:  CLRF   x57
09BA4:  CLRF   x58
09BA6:  CLRF   x59
09BA8:  CLRF   x5A
09BAA:  CLRF   x5B
09BAC:  CLRF   x5C
09BAE:  CLRF   x5D
09BB0:  CLRF   x5E
09BB2:  CLRF   x5F
09BB4:  CLRF   x60
09BB6:  CLRF   x61
09BB8:  CLRF   x62
09BBA:  CLRF   x63
09BBC:  CLRF   x64
09BBE:  CLRF   x65
09BC0:  CLRF   x66
09BC2:  CLRF   x67
09BC4:  CLRF   x68
09BC6:  CLRF   x69
09BC8:  CLRF   x6A
09BCA:  CLRF   x6B
09BCC:  CLRF   x6C
09BCE:  CLRF   x6D
09BD0:  CLRF   x6E
09BD2:  CLRF   x6F
09BD4:  CLRF   x70
09BD6:  CLRF   x71
09BD8:  CLRF   x72
09BDA:  CLRF   x73
09BDC:  CLRF   x74
09BDE:  CLRF   x75
09BE0:  CLRF   x76
09BE2:  CLRF   x77
09BE4:  CLRF   x78
09BE6:  CLRF   x79
09BE8:  CLRF   x7A
09BEA:  CLRF   x7B
09BEC:  CLRF   x7C
09BEE:  CLRF   x7D
09BF0:  CLRF   x7E
09BF2:  CLRF   x7F
09BF4:  CLRF   x80
09BF6:  CLRF   x81
09BF8:  CLRF   x82
09BFA:  CLRF   x83
09BFC:  CLRF   x84
09BFE:  CLRF   x85
09C00:  CLRF   x86
09C02:  CLRF   x87
09C04:  CLRF   x88
09C06:  CLRF   x89
09C08:  CLRF   x8A
09C0A:  CLRF   x8B
09C0C:  CLRF   x8C
09C0E:  CLRF   x8D
09C10:  CLRF   x8E
09C12:  CLRF   x8F
09C14:  CLRF   x90
09C16:  CLRF   x91
09C18:  CLRF   x92
09C1A:  CLRF   x93
09C1C:  CLRF   x94
09C1E:  CLRF   x95
09C20:  CLRF   x96
09C22:  CLRF   x97
09C24:  CLRF   x98
09C26:  CLRF   x99
09C28:  CLRF   x9A
09C2A:  CLRF   x9B
09C2C:  CLRF   x9C
09C2E:  CLRF   x9D
09C30:  CLRF   x9E
09C32:  CLRF   x9F
09C34:  CLRF   xA0
09C36:  CLRF   xA1
09C38:  CLRF   xA2
09C3A:  CLRF   xA3
09C3C:  CLRF   xA4
09C3E:  CLRF   xA5
09C40:  CLRF   xA6
09C42:  CLRF   xA7
09C44:  CLRF   xA8
09C46:  CLRF   xA9
09C48:  CLRF   xAA
09C4A:  CLRF   xAB
09C4C:  CLRF   xAC
09C4E:  CLRF   xAD
09C50:  CLRF   xAE
09C52:  CLRF   xAF
09C54:  CLRF   xB0
09C56:  CLRF   xB1
09C58:  CLRF   xB2
09C5A:  CLRF   xB3
09C5C:  CLRF   xB4
09C5E:  CLRF   xB5
09C60:  CLRF   xB6
09C62:  CLRF   xB7
09C64:  CLRF   xB8
09C66:  CLRF   xB9
09C68:  CLRF   xBA
09C6A:  CLRF   xBB
09C6C:  CLRF   xBC
09C6E:  CLRF   xBD
09C70:  CLRF   xBE
09C72:  CLRF   xBF
09C74:  CLRF   xC0
09C76:  CLRF   xC1
09C78:  CLRF   xC2
09C7A:  CLRF   xC3
09C7C:  CLRF   xC4
09C7E:  CLRF   xC5
09C80:  CLRF   xC6
09C82:  CLRF   xC7
09C84:  CLRF   xC8
09C86:  CLRF   xC9
09C88:  CLRF   xCA
09C8A:  CLRF   xCB
09C8C:  CLRF   xCC
09C8E:  CLRF   xCD
09C90:  CLRF   xCE
09C92:  CLRF   xCF
09C94:  CLRF   xD0
09C96:  CLRF   xD1
09C98:  CLRF   xD2
09C9A:  CLRF   xD3
09C9C:  CLRF   xD4
09C9E:  CLRF   xD5
09CA0:  CLRF   xD6
09CA2:  CLRF   xD7
09CA4:  CLRF   xD8
09CA6:  CLRF   xD9
09CA8:  CLRF   xDA
09CAA:  CLRF   xDB
09CAC:  CLRF   xDC
09CAE:  CLRF   xDD
09CB0:  CLRF   xDE
09CB2:  CLRF   xDF
09CB4:  CLRF   xE0
09CB6:  CLRF   xE1
09CB8:  CLRF   xE2
09CBA:  CLRF   xE3
09CBC:  CLRF   xE4
09CBE:  CLRF   xE5
09CC0:  CLRF   xE6
09CC2:  CLRF   xE7
09CC4:  CLRF   xE8
09CC6:  CLRF   xE9
09CC8:  CLRF   xEA
09CCA:  CLRF   xEB
09CCC:  CLRF   xEC
....................     port1.port_num = 1;
09CCE:  MOVLW  01
09CD0:  MOVLB  1
09CD2:  MOVWF  xE9
....................     port1.sweep_step = 0;
09CD4:  CLRF   xEB
09CD6:  CLRF   xEA
....................     port1.active = 1;
09CD8:  MOVLB  3
09CDA:  BSF    xEC.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09CDC:  CLRF   xED
09CDE:  CLRF   xEE
09CE0:  CLRF   xEF
09CE2:  CLRF   xF0
09CE4:  CLRF   xF1
09CE6:  CLRF   xF2
09CE8:  CLRF   xF3
09CEA:  CLRF   xF4
09CEC:  CLRF   xF5
09CEE:  CLRF   xF6
09CF0:  CLRF   xF7
09CF2:  CLRF   xF8
09CF4:  CLRF   xF9
09CF6:  CLRF   xFA
09CF8:  CLRF   xFB
09CFA:  CLRF   xFC
09CFC:  CLRF   xFD
09CFE:  CLRF   xFE
09D00:  CLRF   xFF
09D02:  MOVLB  4
09D04:  CLRF   x00
09D06:  CLRF   x01
09D08:  CLRF   x02
09D0A:  CLRF   x03
09D0C:  CLRF   x04
09D0E:  CLRF   x05
09D10:  CLRF   x06
09D12:  CLRF   x07
09D14:  CLRF   x08
09D16:  CLRF   x09
09D18:  CLRF   x0A
09D1A:  CLRF   x0B
09D1C:  CLRF   x0C
09D1E:  CLRF   x0D
09D20:  CLRF   x0E
09D22:  CLRF   x0F
09D24:  CLRF   x10
09D26:  CLRF   x11
09D28:  CLRF   x12
09D2A:  CLRF   x13
09D2C:  CLRF   x14
09D2E:  CLRF   x15
09D30:  CLRF   x16
09D32:  CLRF   x17
09D34:  CLRF   x18
09D36:  CLRF   x19
09D38:  CLRF   x1A
09D3A:  CLRF   x1B
09D3C:  CLRF   x1C
09D3E:  CLRF   x1D
09D40:  CLRF   x1E
09D42:  CLRF   x1F
09D44:  CLRF   x20
09D46:  CLRF   x21
09D48:  CLRF   x22
09D4A:  CLRF   x23
09D4C:  CLRF   x24
09D4E:  CLRF   x25
09D50:  CLRF   x26
09D52:  CLRF   x27
09D54:  CLRF   x28
09D56:  CLRF   x29
09D58:  CLRF   x2A
09D5A:  CLRF   x2B
09D5C:  CLRF   x2C
09D5E:  CLRF   x2D
09D60:  CLRF   x2E
09D62:  CLRF   x2F
09D64:  CLRF   x30
09D66:  CLRF   x31
09D68:  CLRF   x32
09D6A:  CLRF   x33
09D6C:  CLRF   x34
09D6E:  CLRF   x35
09D70:  CLRF   x36
09D72:  CLRF   x37
09D74:  CLRF   x38
09D76:  CLRF   x39
09D78:  CLRF   x3A
09D7A:  CLRF   x3B
09D7C:  CLRF   x3C
09D7E:  CLRF   x3D
09D80:  CLRF   x3E
09D82:  CLRF   x3F
09D84:  CLRF   x40
09D86:  CLRF   x41
09D88:  CLRF   x42
09D8A:  CLRF   x43
09D8C:  CLRF   x44
09D8E:  CLRF   x45
09D90:  CLRF   x46
09D92:  CLRF   x47
09D94:  CLRF   x48
09D96:  CLRF   x49
09D98:  CLRF   x4A
09D9A:  CLRF   x4B
09D9C:  CLRF   x4C
09D9E:  CLRF   x4D
09DA0:  CLRF   x4E
09DA2:  CLRF   x4F
09DA4:  CLRF   x50
09DA6:  CLRF   x51
09DA8:  CLRF   x52
09DAA:  CLRF   x53
09DAC:  CLRF   x54
09DAE:  CLRF   x55
09DB0:  CLRF   x56
09DB2:  CLRF   x57
09DB4:  CLRF   x58
09DB6:  CLRF   x59
09DB8:  CLRF   x5A
09DBA:  CLRF   x5B
09DBC:  CLRF   x5C
09DBE:  CLRF   x5D
09DC0:  CLRF   x5E
09DC2:  CLRF   x5F
09DC4:  CLRF   x60
09DC6:  CLRF   x61
09DC8:  CLRF   x62
09DCA:  CLRF   x63
09DCC:  CLRF   x64
09DCE:  CLRF   x65
09DD0:  CLRF   x66
09DD2:  CLRF   x67
09DD4:  CLRF   x68
09DD6:  CLRF   x69
09DD8:  CLRF   x6A
09DDA:  CLRF   x6B
09DDC:  CLRF   x6C
09DDE:  CLRF   x6D
09DE0:  CLRF   x6E
09DE2:  CLRF   x6F
09DE4:  CLRF   x70
09DE6:  CLRF   x71
09DE8:  CLRF   x72
09DEA:  CLRF   x73
09DEC:  CLRF   x74
09DEE:  CLRF   x75
09DF0:  CLRF   x76
09DF2:  CLRF   x77
09DF4:  CLRF   x78
09DF6:  CLRF   x79
09DF8:  CLRF   x7A
09DFA:  CLRF   x7B
09DFC:  CLRF   x7C
09DFE:  CLRF   x7D
09E00:  CLRF   x7E
09E02:  CLRF   x7F
09E04:  CLRF   x80
09E06:  CLRF   x81
09E08:  CLRF   x82
09E0A:  CLRF   x83
09E0C:  CLRF   x84
09E0E:  CLRF   x85
09E10:  CLRF   x86
09E12:  CLRF   x87
09E14:  CLRF   x88
09E16:  CLRF   x89
09E18:  CLRF   x8A
09E1A:  CLRF   x8B
09E1C:  CLRF   x8C
09E1E:  CLRF   x8D
09E20:  CLRF   x8E
09E22:  CLRF   x8F
09E24:  CLRF   x90
09E26:  CLRF   x91
09E28:  CLRF   x92
09E2A:  CLRF   x93
09E2C:  CLRF   x94
09E2E:  CLRF   x95
09E30:  CLRF   x96
09E32:  CLRF   x97
09E34:  CLRF   x98
09E36:  CLRF   x99
09E38:  CLRF   x9A
09E3A:  CLRF   x9B
09E3C:  CLRF   x9C
09E3E:  CLRF   x9D
09E40:  CLRF   x9E
09E42:  CLRF   x9F
09E44:  CLRF   xA0
09E46:  CLRF   xA1
09E48:  CLRF   xA2
09E4A:  CLRF   xA3
09E4C:  CLRF   xA4
09E4E:  CLRF   xA5
09E50:  CLRF   xA6
09E52:  CLRF   xA7
09E54:  CLRF   xA8
09E56:  CLRF   xA9
09E58:  CLRF   xAA
09E5A:  CLRF   xAB
09E5C:  CLRF   xAC
09E5E:  CLRF   xAD
09E60:  CLRF   xAE
09E62:  CLRF   xAF
09E64:  CLRF   xB0
09E66:  CLRF   xB1
09E68:  CLRF   xB2
09E6A:  CLRF   xB3
09E6C:  CLRF   xB4
09E6E:  CLRF   xB5
09E70:  CLRF   xB6
09E72:  CLRF   xB7
09E74:  CLRF   xB8
09E76:  CLRF   xB9
09E78:  CLRF   xBA
09E7A:  CLRF   xBB
09E7C:  CLRF   xBC
09E7E:  CLRF   xBD
09E80:  CLRF   xBE
09E82:  CLRF   xBF
09E84:  CLRF   xC0
09E86:  CLRF   xC1
09E88:  CLRF   xC2
09E8A:  CLRF   xC3
09E8C:  CLRF   xC4
09E8E:  CLRF   xC5
09E90:  CLRF   xC6
09E92:  CLRF   xC7
09E94:  CLRF   xC8
09E96:  CLRF   xC9
09E98:  CLRF   xCA
09E9A:  CLRF   xCB
09E9C:  CLRF   xCC
09E9E:  CLRF   xCD
09EA0:  CLRF   xCE
09EA2:  CLRF   xCF
09EA4:  CLRF   xD0
09EA6:  CLRF   xD1
09EA8:  CLRF   xD2
09EAA:  CLRF   xD3
09EAC:  CLRF   xD4
09EAE:  CLRF   xD5
09EB0:  CLRF   xD6
09EB2:  CLRF   xD7
09EB4:  CLRF   xD8
09EB6:  CLRF   xD9
09EB8:  CLRF   xDA
09EBA:  CLRF   xDB
09EBC:  CLRF   xDC
09EBE:  CLRF   xDD
09EC0:  CLRF   xDE
09EC2:  CLRF   xDF
09EC4:  CLRF   xE0
09EC6:  CLRF   xE1
09EC8:  CLRF   xE2
09ECA:  CLRF   xE3
09ECC:  CLRF   xE4
09ECE:  CLRF   xE5
09ED0:  CLRF   xE6
09ED2:  CLRF   xE7
09ED4:  CLRF   xE8
09ED6:  CLRF   xE9
09ED8:  CLRF   xEA
09EDA:  CLRF   xEB
09EDC:  CLRF   xEC
09EDE:  CLRF   xED
09EE0:  CLRF   xEE
09EE2:  CLRF   xEF
09EE4:  CLRF   xF0
09EE6:  CLRF   xF1
09EE8:  CLRF   xF2
09EEA:  CLRF   xF3
09EEC:  CLRF   xF4
09EEE:  CLRF   xF5
09EF0:  CLRF   xF6
09EF2:  CLRF   xF7
09EF4:  CLRF   xF8
09EF6:  CLRF   xF9
09EF8:  CLRF   xFA
09EFA:  CLRF   xFB
09EFC:  CLRF   xFC
09EFE:  CLRF   xFD
09F00:  CLRF   xFE
09F02:  CLRF   xFF
09F04:  MOVLB  5
09F06:  CLRF   x00
09F08:  CLRF   x01
09F0A:  CLRF   x02
09F0C:  CLRF   x03
09F0E:  CLRF   x04
09F10:  CLRF   x05
09F12:  CLRF   x06
09F14:  CLRF   x07
09F16:  CLRF   x08
09F18:  CLRF   x09
09F1A:  CLRF   x0A
09F1C:  CLRF   x0B
09F1E:  CLRF   x0C
09F20:  CLRF   x0D
09F22:  CLRF   x0E
09F24:  CLRF   x0F
09F26:  CLRF   x10
09F28:  CLRF   x11
09F2A:  CLRF   x12
09F2C:  CLRF   x13
09F2E:  CLRF   x14
09F30:  CLRF   x15
09F32:  CLRF   x16
09F34:  CLRF   x17
09F36:  CLRF   x18
09F38:  CLRF   x19
09F3A:  CLRF   x1A
09F3C:  CLRF   x1B
09F3E:  CLRF   x1C
09F40:  CLRF   x1D
09F42:  CLRF   x1E
09F44:  CLRF   x1F
09F46:  CLRF   x20
09F48:  CLRF   x21
09F4A:  CLRF   x22
09F4C:  CLRF   x23
09F4E:  CLRF   x24
09F50:  CLRF   x25
09F52:  CLRF   x26
09F54:  CLRF   x27
09F56:  CLRF   x28
09F58:  CLRF   x29
09F5A:  CLRF   x2A
09F5C:  CLRF   x2B
09F5E:  CLRF   x2C
09F60:  CLRF   x2D
09F62:  CLRF   x2E
09F64:  CLRF   x2F
09F66:  CLRF   x30
09F68:  CLRF   x31
09F6A:  CLRF   x32
09F6C:  CLRF   x33
09F6E:  CLRF   x34
09F70:  CLRF   x35
09F72:  CLRF   x36
09F74:  CLRF   x37
09F76:  CLRF   x38
09F78:  CLRF   x39
09F7A:  CLRF   x3A
09F7C:  CLRF   x3B
09F7E:  CLRF   x3C
09F80:  CLRF   x3D
09F82:  CLRF   x3E
09F84:  CLRF   x3F
09F86:  CLRF   x40
09F88:  CLRF   x41
09F8A:  CLRF   x42
09F8C:  CLRF   x43
09F8E:  CLRF   x44
09F90:  CLRF   x45
09F92:  CLRF   x46
09F94:  CLRF   x47
09F96:  CLRF   x48
09F98:  CLRF   x49
09F9A:  CLRF   x4A
09F9C:  CLRF   x4B
09F9E:  CLRF   x4C
09FA0:  CLRF   x4D
09FA2:  CLRF   x4E
09FA4:  CLRF   x4F
09FA6:  CLRF   x50
09FA8:  CLRF   x51
09FAA:  CLRF   x52
09FAC:  CLRF   x53
09FAE:  CLRF   x54
09FB0:  CLRF   x55
09FB2:  CLRF   x56
09FB4:  CLRF   x57
09FB6:  CLRF   x58
09FB8:  CLRF   x59
09FBA:  CLRF   x5A
09FBC:  CLRF   x5B
09FBE:  CLRF   x5C
09FC0:  CLRF   x5D
09FC2:  CLRF   x5E
09FC4:  CLRF   x5F
09FC6:  CLRF   x60
09FC8:  CLRF   x61
09FCA:  CLRF   x62
09FCC:  CLRF   x63
09FCE:  CLRF   x64
09FD0:  CLRF   x65
09FD2:  CLRF   x66
09FD4:  CLRF   x67
09FD6:  CLRF   x68
09FD8:  CLRF   x69
09FDA:  CLRF   x6A
09FDC:  CLRF   x6B
09FDE:  CLRF   x6C
09FE0:  CLRF   x6D
09FE2:  CLRF   x6E
09FE4:  CLRF   x6F
09FE6:  CLRF   x70
09FE8:  CLRF   x71
09FEA:  CLRF   x72
09FEC:  CLRF   x73
09FEE:  CLRF   x74
09FF0:  CLRF   x75
09FF2:  CLRF   x76
09FF4:  CLRF   x77
09FF6:  CLRF   x78
09FF8:  CLRF   x79
09FFA:  CLRF   x7A
09FFC:  CLRF   x7B
09FFE:  CLRF   x7C
0A000:  CLRF   x7D
0A002:  CLRF   x7E
0A004:  CLRF   x7F
0A006:  CLRF   x80
0A008:  CLRF   x81
0A00A:  CLRF   x82
0A00C:  CLRF   x83
0A00E:  CLRF   x84
0A010:  CLRF   x85
0A012:  CLRF   x86
0A014:  CLRF   x87
0A016:  CLRF   x88
0A018:  CLRF   x89
0A01A:  CLRF   x8A
0A01C:  CLRF   x8B
0A01E:  CLRF   x8C
0A020:  CLRF   x8D
0A022:  CLRF   x8E
0A024:  CLRF   x8F
0A026:  CLRF   x90
0A028:  CLRF   x91
0A02A:  CLRF   x92
0A02C:  CLRF   x93
0A02E:  CLRF   x94
0A030:  CLRF   x95
0A032:  CLRF   x96
0A034:  CLRF   x97
0A036:  CLRF   x98
0A038:  CLRF   x99
0A03A:  CLRF   x9A
0A03C:  CLRF   x9B
0A03E:  CLRF   x9C
0A040:  CLRF   x9D
0A042:  CLRF   x9E
0A044:  CLRF   x9F
0A046:  CLRF   xA0
0A048:  CLRF   xA1
0A04A:  CLRF   xA2
0A04C:  CLRF   xA3
0A04E:  CLRF   xA4
0A050:  CLRF   xA5
0A052:  CLRF   xA6
0A054:  CLRF   xA7
0A056:  CLRF   xA8
0A058:  CLRF   xA9
0A05A:  CLRF   xAA
0A05C:  CLRF   xAB
0A05E:  CLRF   xAC
0A060:  CLRF   xAD
0A062:  CLRF   xAE
0A064:  CLRF   xAF
0A066:  CLRF   xB0
0A068:  CLRF   xB1
0A06A:  CLRF   xB2
0A06C:  CLRF   xB3
0A06E:  CLRF   xB4
0A070:  CLRF   xB5
0A072:  CLRF   xB6
0A074:  CLRF   xB7
0A076:  CLRF   xB8
0A078:  CLRF   xB9
0A07A:  CLRF   xBA
0A07C:  CLRF   xBB
0A07E:  CLRF   xBC
0A080:  CLRF   xBD
0A082:  CLRF   xBE
0A084:  CLRF   xBF
0A086:  CLRF   xC0
0A088:  CLRF   xC1
0A08A:  CLRF   xC2
0A08C:  CLRF   xC3
0A08E:  CLRF   xC4
0A090:  CLRF   xC5
0A092:  CLRF   xC6
0A094:  CLRF   xC7
0A096:  CLRF   xC8
0A098:  CLRF   xC9
0A09A:  CLRF   xCA
0A09C:  CLRF   xCB
0A09E:  CLRF   xCC
0A0A0:  CLRF   xCD
0A0A2:  CLRF   xCE
0A0A4:  CLRF   xCF
0A0A6:  CLRF   xD0
0A0A8:  CLRF   xD1
0A0AA:  CLRF   xD2
0A0AC:  CLRF   xD3
0A0AE:  CLRF   xD4
0A0B0:  CLRF   xD5
0A0B2:  CLRF   xD6
0A0B4:  CLRF   xD7
0A0B6:  CLRF   xD8
0A0B8:  CLRF   xD9
0A0BA:  CLRF   xDA
0A0BC:  CLRF   xDB
0A0BE:  CLRF   xDC
0A0C0:  CLRF   xDD
0A0C2:  CLRF   xDE
0A0C4:  CLRF   xDF
0A0C6:  CLRF   xE0
0A0C8:  CLRF   xE1
0A0CA:  CLRF   xE2
0A0CC:  CLRF   xE3
0A0CE:  CLRF   xE4
0A0D0:  CLRF   xE5
0A0D2:  CLRF   xE6
0A0D4:  CLRF   xE7
0A0D6:  CLRF   xE8
0A0D8:  CLRF   xE9
0A0DA:  CLRF   xEA
0A0DC:  CLRF   xEB
0A0DE:  CLRF   xEC
0A0E0:  CLRF   xED
0A0E2:  CLRF   xEE
0A0E4:  CLRF   xEF
0A0E6:  CLRF   xF0
....................     port2.port_num = 2;
0A0E8:  MOVLW  02
0A0EA:  MOVLB  3
0A0EC:  MOVWF  xED
....................     port2.sweep_step = 0;
0A0EE:  CLRF   xEF
0A0F0:  CLRF   xEE
....................     port2.active = 1;
0A0F2:  MOVLB  5
0A0F4:  BSF    xF0.0
.................... 
....................     int16 count = 0;
0A0F6:  CLRF   xF2
0A0F8:  CLRF   xF1
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A0FA:  MOVLB  9
0A0FC:  CLRF   xDD
0A0FE:  MOVLW  01
0A100:  MOVWF  xDC
0A102:  MOVLB  0
0A104:  CALL   25C4
....................     mcp4901_2_write(1);
0A108:  MOVLB  9
0A10A:  CLRF   xDD
0A10C:  MOVLW  01
0A10E:  MOVWF  xDC
0A110:  MOVLB  0
0A112:  CALL   2602
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0A116:  CALL   8F40
0A11A:  MOVFF  02,03
0A11E:  MOVF   01,W
0A120:  MOVWF  FE1
0A122:  MOVFF  03,FE2
0A126:  MOVLW  05
0A128:  MOVWF  FEA
0A12A:  MOVLW  F7
0A12C:  MOVWF  FE9
0A12E:  MOVLW  0C
0A130:  MOVWF  01
0A132:  MOVFF  FE6,FEE
0A136:  DECFSZ 01,F
0A138:  GOTO   A132
....................     while (port1.active || port2.active)
0A13C:  MOVLB  3
0A13E:  BTFSS  xEC.0
0A140:  BRA    A148
0A142:  MOVLB  0
0A144:  GOTO   A158
0A148:  MOVLB  0
0A14A:  MOVLB  5
0A14C:  BTFSC  xF0.0
0A14E:  BRA    A156
0A150:  MOVLB  0
0A152:  GOTO   A4B4
0A156:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A158:  MOVFF  5F2,9DD
0A15C:  MOVFF  5F1,9DC
0A160:  CALL   25C4
....................         mcp4901_2_write(count);
0A164:  MOVFF  5F2,9DD
0A168:  MOVFF  5F1,9DC
0A16C:  CALL   2602
....................         delay_us(1); 
0A170:  BRA    A172
0A172:  BRA    A174
....................         if (port1.active) {
0A174:  MOVLB  3
0A176:  BTFSC  xEC.0
0A178:  BRA    A180
0A17A:  MOVLB  0
0A17C:  GOTO   A2FC
0A180:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0A182:  MOVLW  02
0A184:  MOVLB  9
0A186:  MOVWF  xEE
0A188:  MOVLB  0
0A18A:  CALL   2214
0A18E:  MOVFF  02,5F4
0A192:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0A196:  MOVLW  01
0A198:  MOVLB  9
0A19A:  MOVWF  xEE
0A19C:  MOVLB  0
0A19E:  CALL   2214
0A1A2:  MOVFF  02,5F6
0A1A6:  MOVFF  01,5F5
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A1AA:  MOVFF  5F2,A52
0A1AE:  MOVFF  5F1,A51
0A1B2:  MOVLB  A
0A1B4:  CLRF   x54
0A1B6:  MOVLW  03
0A1B8:  MOVWF  x53
0A1BA:  MOVLB  0
0A1BC:  CALL   7F94
0A1C0:  MOVFF  02,60C
0A1C4:  MOVFF  01,60B
0A1C8:  MOVLW  EC
0A1CA:  MOVLB  6
0A1CC:  ADDWF  x0B,W
0A1CE:  MOVWF  FE9
0A1D0:  MOVLW  01
0A1D2:  ADDWFC x0C,W
0A1D4:  MOVWF  FEA
0A1D6:  MOVLB  5
0A1D8:  RRCF   xF4,W
0A1DA:  MOVLB  6
0A1DC:  MOVWF  x10
0A1DE:  MOVLB  5
0A1E0:  RRCF   xF3,W
0A1E2:  MOVLB  6
0A1E4:  MOVWF  x0F
0A1E6:  RRCF   x10,F
0A1E8:  RRCF   x0F,F
0A1EA:  RRCF   x10,F
0A1EC:  RRCF   x0F,F
0A1EE:  RRCF   x10,F
0A1F0:  RRCF   x0F,F
0A1F2:  MOVLW  0F
0A1F4:  ANDWF  x10,F
0A1F6:  MOVF   x0F,W
0A1F8:  MOVWF  00
0A1FA:  CLRF   03
0A1FC:  MOVF   00,W
0A1FE:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A200:  MOVFF  5F2,A52
0A204:  MOVFF  5F1,A51
0A208:  MOVLB  A
0A20A:  CLRF   x54
0A20C:  MOVLW  03
0A20E:  MOVWF  x53
0A210:  MOVLB  0
0A212:  CALL   7F94
0A216:  MOVFF  02,60C
0A21A:  MOVFF  01,60B
0A21E:  MOVLW  01
0A220:  MOVLB  6
0A222:  ADDWF  x0B,F
0A224:  MOVLW  00
0A226:  ADDWFC x0C,F
0A228:  MOVLW  EC
0A22A:  ADDWF  x0B,W
0A22C:  MOVWF  FE9
0A22E:  MOVLW  01
0A230:  ADDWFC x0C,W
0A232:  MOVWF  FEA
0A234:  MOVLB  5
0A236:  MOVF   xF3,W
0A238:  ANDLW  0F
0A23A:  MOVLB  6
0A23C:  MOVWF  x0F
0A23E:  CLRF   x10
0A240:  RLCF   x0F,F
0A242:  RLCF   x10,F
0A244:  RLCF   x0F,F
0A246:  RLCF   x10,F
0A248:  RLCF   x0F,F
0A24A:  RLCF   x10,F
0A24C:  RLCF   x0F,F
0A24E:  RLCF   x10,F
0A250:  MOVLW  F0
0A252:  ANDWF  x0F,F
0A254:  MOVFF  5F6,611
0A258:  CLRF   x12
0A25A:  MOVF   x11,W
0A25C:  ANDLW  0F
0A25E:  MOVWF  00
0A260:  CLRF   03
0A262:  MOVF   00,W
0A264:  IORWF  x0F,W
0A266:  MOVWF  00
0A268:  MOVF   03,W
0A26A:  IORWF  x10,W
0A26C:  MOVWF  03
0A26E:  MOVF   00,W
0A270:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0A272:  MOVFF  5F2,A52
0A276:  MOVFF  5F1,A51
0A27A:  MOVLB  A
0A27C:  CLRF   x54
0A27E:  MOVLW  03
0A280:  MOVWF  x53
0A282:  MOVLB  0
0A284:  CALL   7F94
0A288:  MOVFF  02,60C
0A28C:  MOVFF  01,60B
0A290:  MOVLW  02
0A292:  MOVLB  6
0A294:  ADDWF  x0B,F
0A296:  MOVLW  00
0A298:  ADDWFC x0C,F
0A29A:  MOVLW  EC
0A29C:  ADDWF  x0B,W
0A29E:  MOVWF  FE9
0A2A0:  MOVLW  01
0A2A2:  ADDWFC x0C,W
0A2A4:  MOVWF  FEA
0A2A6:  MOVLB  5
0A2A8:  MOVF   xF5,W
0A2AA:  MOVWF  00
0A2AC:  CLRF   03
0A2AE:  MOVF   00,W
0A2B0:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0A2B2:  MOVLW  01
0A2B4:  ADDWF  xF1,W
0A2B6:  MOVLB  1
0A2B8:  MOVWF  xEA
0A2BA:  MOVLW  00
0A2BC:  MOVLB  5
0A2BE:  ADDWFC xF2,W
0A2C0:  MOVLB  1
0A2C2:  MOVWF  xEB
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0A2C4:  MOVLB  5
0A2C6:  MOVF   xF6,W
0A2C8:  MOVLB  1
0A2CA:  SUBWF  xE2,W
0A2CC:  BTFSC  FD8.0
0A2CE:  BRA    A2D6
0A2D0:  MOVLB  0
0A2D2:  GOTO   A2FC
0A2D6:  MOVLB  0
0A2D8:  BTFSS  FD8.2
0A2DA:  GOTO   A2F2
0A2DE:  MOVLB  1
0A2E0:  MOVF   xE1,W
0A2E2:  MOVLB  5
0A2E4:  SUBWF  xF5,W
0A2E6:  BTFSS  FD8.0
0A2E8:  BRA    A2F0
0A2EA:  MOVLB  0
0A2EC:  GOTO   A2FC
0A2F0:  MOVLB  0
....................                 port1.active = 0;
0A2F2:  MOVLB  3
0A2F4:  BCF    xEC.0
....................                 disconnect_port1();
0A2F6:  MOVLB  0
0A2F8:  CALL   8FC2
....................             }
....................         }
....................         if (port2.active) {
0A2FC:  MOVLB  5
0A2FE:  BTFSC  xF0.0
0A300:  BRA    A308
0A302:  MOVLB  0
0A304:  GOTO   A484
0A308:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0A30A:  MOVLW  06
0A30C:  MOVLB  9
0A30E:  MOVWF  xEE
0A310:  MOVLB  0
0A312:  CALL   2214
0A316:  MOVFF  02,5F4
0A31A:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0A31E:  MOVLW  05
0A320:  MOVLB  9
0A322:  MOVWF  xEE
0A324:  MOVLB  0
0A326:  CALL   2214
0A32A:  MOVFF  02,5F6
0A32E:  MOVFF  01,5F5
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A332:  MOVFF  5F2,A52
0A336:  MOVFF  5F1,A51
0A33A:  MOVLB  A
0A33C:  CLRF   x54
0A33E:  MOVLW  03
0A340:  MOVWF  x53
0A342:  MOVLB  0
0A344:  CALL   7F94
0A348:  MOVFF  02,60C
0A34C:  MOVFF  01,60B
0A350:  MOVLW  F0
0A352:  MOVLB  6
0A354:  ADDWF  x0B,W
0A356:  MOVWF  FE9
0A358:  MOVLW  03
0A35A:  ADDWFC x0C,W
0A35C:  MOVWF  FEA
0A35E:  MOVLB  5
0A360:  RRCF   xF4,W
0A362:  MOVLB  6
0A364:  MOVWF  x10
0A366:  MOVLB  5
0A368:  RRCF   xF3,W
0A36A:  MOVLB  6
0A36C:  MOVWF  x0F
0A36E:  RRCF   x10,F
0A370:  RRCF   x0F,F
0A372:  RRCF   x10,F
0A374:  RRCF   x0F,F
0A376:  RRCF   x10,F
0A378:  RRCF   x0F,F
0A37A:  MOVLW  0F
0A37C:  ANDWF  x10,F
0A37E:  MOVF   x0F,W
0A380:  MOVWF  00
0A382:  CLRF   03
0A384:  MOVF   00,W
0A386:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A388:  MOVFF  5F2,A52
0A38C:  MOVFF  5F1,A51
0A390:  MOVLB  A
0A392:  CLRF   x54
0A394:  MOVLW  03
0A396:  MOVWF  x53
0A398:  MOVLB  0
0A39A:  CALL   7F94
0A39E:  MOVFF  02,60C
0A3A2:  MOVFF  01,60B
0A3A6:  MOVLW  01
0A3A8:  MOVLB  6
0A3AA:  ADDWF  x0B,F
0A3AC:  MOVLW  00
0A3AE:  ADDWFC x0C,F
0A3B0:  MOVLW  F0
0A3B2:  ADDWF  x0B,W
0A3B4:  MOVWF  FE9
0A3B6:  MOVLW  03
0A3B8:  ADDWFC x0C,W
0A3BA:  MOVWF  FEA
0A3BC:  MOVLB  5
0A3BE:  MOVF   xF3,W
0A3C0:  ANDLW  0F
0A3C2:  MOVLB  6
0A3C4:  MOVWF  x0F
0A3C6:  CLRF   x10
0A3C8:  RLCF   x0F,F
0A3CA:  RLCF   x10,F
0A3CC:  RLCF   x0F,F
0A3CE:  RLCF   x10,F
0A3D0:  RLCF   x0F,F
0A3D2:  RLCF   x10,F
0A3D4:  RLCF   x0F,F
0A3D6:  RLCF   x10,F
0A3D8:  MOVLW  F0
0A3DA:  ANDWF  x0F,F
0A3DC:  MOVFF  5F6,611
0A3E0:  CLRF   x12
0A3E2:  MOVF   x11,W
0A3E4:  ANDLW  0F
0A3E6:  MOVWF  00
0A3E8:  CLRF   03
0A3EA:  MOVF   00,W
0A3EC:  IORWF  x0F,W
0A3EE:  MOVWF  00
0A3F0:  MOVF   03,W
0A3F2:  IORWF  x10,W
0A3F4:  MOVWF  03
0A3F6:  MOVF   00,W
0A3F8:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0A3FA:  MOVFF  5F2,A52
0A3FE:  MOVFF  5F1,A51
0A402:  MOVLB  A
0A404:  CLRF   x54
0A406:  MOVLW  03
0A408:  MOVWF  x53
0A40A:  MOVLB  0
0A40C:  CALL   7F94
0A410:  MOVFF  02,60C
0A414:  MOVFF  01,60B
0A418:  MOVLW  02
0A41A:  MOVLB  6
0A41C:  ADDWF  x0B,F
0A41E:  MOVLW  00
0A420:  ADDWFC x0C,F
0A422:  MOVLW  F0
0A424:  ADDWF  x0B,W
0A426:  MOVWF  FE9
0A428:  MOVLW  03
0A42A:  ADDWFC x0C,W
0A42C:  MOVWF  FEA
0A42E:  MOVLB  5
0A430:  MOVF   xF5,W
0A432:  MOVWF  00
0A434:  CLRF   03
0A436:  MOVF   00,W
0A438:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0A43A:  MOVLW  01
0A43C:  ADDWF  xF1,W
0A43E:  MOVLB  3
0A440:  MOVWF  xEE
0A442:  MOVLW  00
0A444:  MOVLB  5
0A446:  ADDWFC xF2,W
0A448:  MOVLB  3
0A44A:  MOVWF  xEF
....................             if (curr < curr_limit) {
0A44C:  MOVLB  5
0A44E:  MOVF   xF6,W
0A450:  MOVLB  1
0A452:  SUBWF  xE2,W
0A454:  BTFSC  FD8.0
0A456:  BRA    A45E
0A458:  MOVLB  0
0A45A:  GOTO   A484
0A45E:  MOVLB  0
0A460:  BTFSS  FD8.2
0A462:  GOTO   A47A
0A466:  MOVLB  1
0A468:  MOVF   xE1,W
0A46A:  MOVLB  5
0A46C:  SUBWF  xF5,W
0A46E:  BTFSS  FD8.0
0A470:  BRA    A478
0A472:  MOVLB  0
0A474:  GOTO   A484
0A478:  MOVLB  0
....................                 port2.active = 0;
0A47A:  MOVLB  5
0A47C:  BCF    xF0.0
....................                 disconnect_port2();
0A47E:  MOVLB  0
0A480:  CALL   8FCA
....................             } 
....................         }
....................         count++;
0A484:  MOVLB  5
0A486:  INCF   xF1,F
0A488:  BTFSC  FD8.2
0A48A:  INCF   xF2,F
....................         if (count >= 255) {
0A48C:  MOVF   xF2,F
0A48E:  BTFSC  FD8.2
0A490:  BRA    A498
0A492:  MOVLB  0
0A494:  GOTO   A4AC
0A498:  MOVLB  0
0A49A:  MOVLB  5
0A49C:  MOVF   xF1,W
0A49E:  SUBLW  FE
0A4A0:  BTFSS  FD8.0
0A4A2:  BRA    A4AA
0A4A4:  MOVLB  0
0A4A6:  GOTO   A4B0
0A4AA:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A4AC:  GOTO   A4B4
....................         }
0A4B0:  GOTO   A13C
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0A4B4:  CALL   8FC2
....................     disconnect_port2();
0A4B8:  CALL   8FCA
....................     log_meas_data(&measured_data, &port1);
0A4BC:  MOVLW  05
0A4BE:  MOVLB  9
0A4C0:  MOVWF  xC3
0A4C2:  MOVLW  F7
0A4C4:  MOVWF  xC2
0A4C6:  MOVLW  01
0A4C8:  MOVWF  xC5
0A4CA:  MOVLW  E9
0A4CC:  MOVWF  xC4
0A4CE:  MOVLB  0
0A4D0:  CALL   8FD2
....................     log_meas_data(&measured_data, &port2);
0A4D4:  MOVLW  05
0A4D6:  MOVLB  9
0A4D8:  MOVWF  xC3
0A4DA:  MOVLW  F7
0A4DC:  MOVWF  xC2
0A4DE:  MOVLW  03
0A4E0:  MOVWF  xC5
0A4E2:  MOVLW  ED
0A4E4:  MOVWF  xC4
0A4E6:  MOVLB  0
0A4E8:  CALL   8FD2
....................     // misf_update_address_area();
....................     unsigned int32 end_time_ms = get_current_msec();
....................     unsigned int32 elapsed_time_ms = end_time_ms - start_time_ms;
0A4EC:  CALL   9890
0A4F0:  MOVLB  6
0A4F2:  CLRF   x06
0A4F4:  CLRF   x05
0A4F6:  MOVFF  02,604
0A4FA:  MOVFF  01,603
0A4FE:  MOVLB  1
0A500:  MOVF   xE5,W
0A502:  MOVLB  6
0A504:  SUBWF  x03,W
0A506:  MOVWF  x07
0A508:  MOVLB  1
0A50A:  MOVF   xE6,W
0A50C:  MOVLB  6
0A50E:  SUBWFB x04,W
0A510:  MOVWF  x08
0A512:  MOVLB  1
0A514:  MOVF   xE7,W
0A516:  MOVLB  6
0A518:  SUBWFB x05,W
0A51A:  MOVWF  x09
0A51C:  MOVLB  1
0A51E:  MOVF   xE8,W
0A520:  MOVLB  6
0A522:  SUBWFB x06,W
0A524:  MOVWF  x0A
0A526:  MOVLB  0
0A528:  GOTO   A882 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
09056:  MOVLW  09
09058:  MOVWF  x07
0905A:  MOVLW  C6
0905C:  MOVWF  x06
.................... {
....................     iv_data_packet_t data_packet = {0};
*
08FD2:  MOVLB  9
08FD4:  CLRF   xC6
08FD6:  CLRF   xC7
08FD8:  CLRF   xC8
08FDA:  CLRF   xC9
08FDC:  CLRF   xCA
08FDE:  CLRF   xCB
08FE0:  CLRF   xCC
08FE2:  CLRF   xCD
08FE4:  CLRF   xCE
08FE6:  CLRF   xCF
08FE8:  CLRF   xD0
08FEA:  CLRF   xD1
08FEC:  CLRF   xD2
08FEE:  CLRF   xD3
08FF0:  CLRF   xD4
08FF2:  CLRF   xD5
08FF4:  CLRF   xD6
08FF6:  CLRF   xD7
08FF8:  CLRF   xD8
08FFA:  CLRF   xD9
08FFC:  CLRF   xDA
08FFE:  CLRF   xDB
09000:  CLRF   xDC
09002:  CLRF   xDD
09004:  CLRF   xDE
09006:  CLRF   xDF
09008:  CLRF   xE0
0900A:  CLRF   xE1
0900C:  CLRF   xE2
0900E:  CLRF   xE3
09010:  CLRF   xE4
09012:  CLRF   xE5
09014:  CLRF   xE6
09016:  CLRF   xE7
09018:  CLRF   xE8
0901A:  CLRF   xE9
0901C:  CLRF   xEA
0901E:  CLRF   xEB
09020:  CLRF   xEC
09022:  CLRF   xED
09024:  CLRF   xEE
09026:  CLRF   xEF
09028:  CLRF   xF0
0902A:  CLRF   xF1
0902C:  CLRF   xF2
0902E:  CLRF   xF3
09030:  CLRF   xF4
09032:  CLRF   xF5
09034:  CLRF   xF6
09036:  CLRF   xF7
09038:  CLRF   xF8
0903A:  CLRF   xF9
0903C:  CLRF   xFA
0903E:  CLRF   xFB
09040:  CLRF   xFC
09042:  CLRF   xFD
09044:  CLRF   xFE
09046:  CLRF   xFF
09048:  MOVLB  A
0904A:  CLRF   x00
0904C:  CLRF   x01
0904E:  CLRF   x02
09050:  CLRF   x03
09052:  CLRF   x04
09054:  CLRF   x05
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
0905E:  MOVLB  9
09060:  SETF   xC6
....................     data_packet.header.time_sec  = measured_data_ptr->time;
09062:  MOVF   xC2,W
09064:  MOVWF  FE9
09066:  MOVF   xC3,W
09068:  MOVWF  FEA
0906A:  MOVFF  FEF,9C7
0906E:  MOVFF  FEC,9C8
09072:  MOVFF  FEC,9C9
09076:  MOVFF  FEC,9CA
0907A:  MOVF   FED,F
0907C:  MOVF   FED,F
0907E:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
09080:  MOVF   xC2,W
09082:  MOVWF  FE9
09084:  MOVF   xC3,W
09086:  MOVWF  FEA
09088:  MOVFF  FEF,A4D
0908C:  MOVFF  FEC,A4E
09090:  MOVFF  FEC,A4F
09094:  MOVFF  FEC,A50
09098:  MOVF   FED,F
0909A:  MOVF   FED,F
0909C:  MOVF   FED,F
0909E:  MOVLB  A
090A0:  RRCF   x50,F
090A2:  RRCF   x4F,F
090A4:  RRCF   x4E,F
090A6:  RRCF   x4D,F
090A8:  RRCF   x50,F
090AA:  RRCF   x4F,F
090AC:  RRCF   x4E,F
090AE:  RRCF   x4D,F
090B0:  RRCF   x50,F
090B2:  RRCF   x4F,F
090B4:  RRCF   x4E,F
090B6:  RRCF   x4D,F
090B8:  RRCF   x50,F
090BA:  RRCF   x4F,F
090BC:  RRCF   x4E,F
090BE:  RRCF   x4D,F
090C0:  MOVLW  0F
090C2:  ANDWF  x50,F
090C4:  MOVF   x4D,W
090C6:  MOVWF  00
090C8:  CLRF   01
090CA:  CLRF   02
090CC:  CLRF   03
090CE:  MOVFF  00,9CB
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
090D2:  MOVLW  04
090D4:  MOVLB  9
090D6:  ADDWF  xC2,W
090D8:  MOVWF  FE9
090DA:  MOVLW  00
090DC:  ADDWFC xC3,W
090DE:  MOVWF  FEA
090E0:  MOVFF  FEC,A4E
090E4:  MOVF   FED,F
090E6:  MOVFF  FEF,A4D
090EA:  MOVLB  A
090EC:  RRCF   x4E,F
090EE:  RRCF   x4D,F
090F0:  RRCF   x4E,F
090F2:  RRCF   x4D,F
090F4:  RRCF   x4E,F
090F6:  RRCF   x4D,F
090F8:  RRCF   x4E,F
090FA:  RRCF   x4D,F
090FC:  MOVLW  0F
090FE:  ANDWF  x4E,F
09100:  MOVF   x4D,W
09102:  MOVLB  9
09104:  MOVWF  xCC
....................     data_packet.header.env_data[0].data[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
09106:  MOVLW  04
09108:  ADDWF  xC2,W
0910A:  MOVWF  FE9
0910C:  MOVLW  00
0910E:  ADDWFC xC3,W
09110:  MOVWF  FEA
09112:  MOVFF  FEC,A4E
09116:  MOVF   FED,F
09118:  MOVFF  FEF,A4D
0911C:  MOVLW  0F
0911E:  MOVLB  A
09120:  ANDWF  x4D,F
09122:  CLRF   x4E
09124:  RLCF   x4D,F
09126:  RLCF   x4E,F
09128:  RLCF   x4D,F
0912A:  RLCF   x4E,F
0912C:  RLCF   x4D,F
0912E:  RLCF   x4E,F
09130:  RLCF   x4D,F
09132:  RLCF   x4E,F
09134:  MOVLW  F0
09136:  ANDWF  x4D,F
09138:  MOVLW  06
0913A:  MOVLB  9
0913C:  ADDWF  xC2,W
0913E:  MOVWF  FE9
09140:  MOVLW  00
09142:  ADDWFC xC3,W
09144:  MOVWF  FEA
09146:  MOVFF  FEC,A50
0914A:  MOVF   FED,F
0914C:  MOVFF  FEF,A4F
09150:  MOVFF  A50,A4F
09154:  MOVLB  A
09156:  CLRF   x50
09158:  MOVF   x4F,W
0915A:  ANDLW  0F
0915C:  MOVWF  00
0915E:  CLRF   03
09160:  MOVF   00,W
09162:  IORWF  x4D,W
09164:  MOVLB  9
09166:  MOVWF  xCD
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
09168:  MOVLW  06
0916A:  ADDWF  xC2,W
0916C:  MOVWF  FE9
0916E:  MOVLW  00
09170:  ADDWFC xC3,W
09172:  MOVWF  FEA
09174:  MOVFF  FEC,A4E
09178:  MOVF   FED,F
0917A:  MOVFF  FEF,A4D
0917E:  MOVLB  A
09180:  MOVF   x4D,W
09182:  MOVLB  9
09184:  MOVWF  xCE
.................... 
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
09186:  MOVLW  08
09188:  ADDWF  xC2,W
0918A:  MOVWF  FE9
0918C:  MOVLW  00
0918E:  ADDWFC xC3,W
09190:  MOVWF  FEA
09192:  MOVFF  FEC,A4E
09196:  MOVF   FED,F
09198:  MOVFF  FEF,A4D
0919C:  MOVLB  A
0919E:  RRCF   x4E,F
091A0:  RRCF   x4D,F
091A2:  RRCF   x4E,F
091A4:  RRCF   x4D,F
091A6:  RRCF   x4E,F
091A8:  RRCF   x4D,F
091AA:  RRCF   x4E,F
091AC:  RRCF   x4D,F
091AE:  MOVLW  0F
091B0:  ANDWF  x4E,F
091B2:  MOVF   x4D,W
091B4:  MOVLB  9
091B6:  MOVWF  xCF
....................     data_packet.header.env_data[1].data[1] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
091B8:  MOVLW  08
091BA:  ADDWF  xC2,W
091BC:  MOVWF  FE9
091BE:  MOVLW  00
091C0:  ADDWFC xC3,W
091C2:  MOVWF  FEA
091C4:  MOVFF  FEC,A4E
091C8:  MOVF   FED,F
091CA:  MOVFF  FEF,A4D
091CE:  MOVLW  0F
091D0:  MOVLB  A
091D2:  ANDWF  x4D,F
091D4:  CLRF   x4E
091D6:  RLCF   x4D,F
091D8:  RLCF   x4E,F
091DA:  RLCF   x4D,F
091DC:  RLCF   x4E,F
091DE:  RLCF   x4D,F
091E0:  RLCF   x4E,F
091E2:  RLCF   x4D,F
091E4:  RLCF   x4E,F
091E6:  MOVLW  F0
091E8:  ANDWF  x4D,F
091EA:  MOVLW  0A
091EC:  MOVLB  9
091EE:  ADDWF  xC2,W
091F0:  MOVWF  FE9
091F2:  MOVLW  00
091F4:  ADDWFC xC3,W
091F6:  MOVWF  FEA
091F8:  MOVFF  FEC,A50
091FC:  MOVF   FED,F
091FE:  MOVFF  FEF,A4F
09202:  MOVFF  A50,A4F
09206:  MOVLB  A
09208:  CLRF   x50
0920A:  MOVF   x4F,W
0920C:  ANDLW  0F
0920E:  MOVWF  00
09210:  CLRF   03
09212:  MOVF   00,W
09214:  IORWF  x4D,W
09216:  MOVLB  9
09218:  MOVWF  xD0
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
0921A:  MOVLW  0A
0921C:  ADDWF  xC2,W
0921E:  MOVWF  FE9
09220:  MOVLW  00
09222:  ADDWFC xC3,W
09224:  MOVWF  FEA
09226:  MOVFF  FEC,A4E
0922A:  MOVF   FED,F
0922C:  MOVFF  FEF,A4D
09230:  MOVLB  A
09232:  MOVF   x4D,W
09234:  MOVLB  9
09236:  MOVWF  xD1
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
09238:  MOVLB  A
0923A:  CLRF   x08
0923C:  MOVLB  0
0923E:  MOVLB  A
09240:  MOVF   x08,W
09242:  SUBLW  10
09244:  BTFSC  FD8.0
09246:  BRA    924E
09248:  MOVLB  0
0924A:  GOTO   93A0
0924E:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
09250:  MOVLW  01
09252:  MOVLB  9
09254:  ADDWF  xC4,W
09256:  MOVWF  FE9
09258:  MOVLW  00
0925A:  ADDWFC xC5,W
0925C:  MOVWF  FEA
0925E:  MOVFF  FEC,03
09262:  MOVF   FED,F
09264:  MOVF   FEF,W
09266:  MOVWF  01
09268:  MOVF   03,F
0926A:  BTFSC  FD8.2
0926C:  BRA    9274
0926E:  MOVLB  0
09270:  GOTO   9288
09274:  MOVLB  0
09276:  MOVF   01,W
09278:  MOVLB  A
0927A:  SUBWF  x08,W
0927C:  BTFSS  FD8.0
0927E:  BRA    9286
09280:  MOVLB  0
09282:  GOTO   9352
09286:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
09288:  MOVLB  A
0928A:  MOVF   x08,W
0928C:  MULLW  03
0928E:  MOVF   FF3,W
09290:  CLRF   03
09292:  ADDLW  D2
09294:  MOVWF  01
09296:  MOVLW  09
09298:  ADDWFC 03,F
0929A:  MOVF   01,W
0929C:  MOVWF  x4D
0929E:  MOVFF  03,A4E
092A2:  MOVF   x08,W
092A4:  MULLW  03
092A6:  MOVF   FF3,W
092A8:  ADDLW  03
092AA:  MOVLB  9
092AC:  ADDWF  xC4,W
092AE:  MOVWF  FE9
092B0:  MOVLW  00
092B2:  ADDWFC xC5,W
092B4:  MOVWF  FEA
092B6:  MOVF   FEF,W
092B8:  MOVLB  A
092BA:  MOVWF  x4F
092BC:  MOVFF  A4E,FEA
092C0:  MOVFF  A4D,FE9
092C4:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
092C8:  MOVF   x08,W
092CA:  MULLW  03
092CC:  MOVF   FF3,W
092CE:  ADDLW  01
092D0:  CLRF   03
092D2:  ADDLW  D2
092D4:  MOVWF  01
092D6:  MOVLW  09
092D8:  ADDWFC 03,F
092DA:  MOVF   01,W
092DC:  MOVWF  x4D
092DE:  MOVFF  03,A4E
092E2:  MOVF   x08,W
092E4:  MULLW  03
092E6:  MOVF   FF3,W
092E8:  ADDLW  01
092EA:  ADDLW  03
092EC:  MOVLB  9
092EE:  ADDWF  xC4,W
092F0:  MOVWF  FE9
092F2:  MOVLW  00
092F4:  ADDWFC xC5,W
092F6:  MOVWF  FEA
092F8:  MOVF   FEF,W
092FA:  MOVLB  A
092FC:  MOVWF  x4F
092FE:  MOVFF  A4E,FEA
09302:  MOVFF  A4D,FE9
09306:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
0930A:  MOVF   x08,W
0930C:  MULLW  03
0930E:  MOVF   FF3,W
09310:  ADDLW  02
09312:  CLRF   03
09314:  ADDLW  D2
09316:  MOVWF  01
09318:  MOVLW  09
0931A:  ADDWFC 03,F
0931C:  MOVF   01,W
0931E:  MOVWF  x4D
09320:  MOVFF  03,A4E
09324:  MOVF   x08,W
09326:  MULLW  03
09328:  MOVF   FF3,W
0932A:  ADDLW  02
0932C:  ADDLW  03
0932E:  MOVLB  9
09330:  ADDWF  xC4,W
09332:  MOVWF  FE9
09334:  MOVLW  00
09336:  ADDWFC xC5,W
09338:  MOVWF  FEA
0933A:  MOVF   FEF,W
0933C:  MOVLB  A
0933E:  MOVWF  x4F
09340:  MOVFF  A4E,FEA
09344:  MOVFF  A4D,FE9
09348:  MOVFF  A4F,FEF
0934C:  MOVLB  0
....................         } else {
0934E:  GOTO   9396
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
09352:  MOVLB  A
09354:  MOVF   x08,W
09356:  MULLW  03
09358:  MOVF   FF3,W
0935A:  CLRF   03
0935C:  ADDLW  D2
0935E:  MOVWF  FE9
09360:  MOVLW  09
09362:  ADDWFC 03,W
09364:  MOVWF  FEA
09366:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
09368:  MOVF   x08,W
0936A:  MULLW  03
0936C:  MOVF   FF3,W
0936E:  ADDLW  01
09370:  CLRF   03
09372:  ADDLW  D2
09374:  MOVWF  FE9
09376:  MOVLW  09
09378:  ADDWFC 03,W
0937A:  MOVWF  FEA
0937C:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
0937E:  MOVF   x08,W
09380:  MULLW  03
09382:  MOVF   FF3,W
09384:  ADDLW  02
09386:  CLRF   03
09388:  ADDLW  D2
0938A:  MOVWF  FE9
0938C:  MOVLW  09
0938E:  ADDWFC 03,W
09390:  MOVWF  FEA
09392:  CLRF   FEF
09394:  MOVLB  0
....................         }
09396:  MOVLB  A
09398:  INCF   x08,F
0939A:  MOVLB  0
0939C:  GOTO   923E
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
093A0:  MOVLB  9
093A2:  MOVF   xC4,W
093A4:  MOVWF  FE9
093A6:  MOVF   xC5,W
093A8:  MOVWF  FEA
093AA:  DECFSZ FEF,W
093AC:  BRA    93B2
093AE:  BRA    93B8
093B0:  MOVLB  0
093B2:  MOVLB  0
093B4:  GOTO   9410
093B8:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
093BA:  MOVLB  A
093BC:  MOVF   x06,W
093BE:  MOVWF  01
093C0:  MOVF   x07,W
093C2:  MOVWF  03
093C4:  MOVF   01,W
093C6:  MOVWF  x4D
093C8:  MOVFF  03,A4E
093CC:  MOVFF  A4E,AEB
093D0:  MOVFF  A4D,AEA
093D4:  MOVLW  3F
093D6:  MOVWF  xEC
093D8:  MOVLB  0
093DA:  CALL   2E3C
093DE:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
093E2:  MOVLB  A
093E4:  MOVF   x06,W
093E6:  MOVWF  01
093E8:  MOVF   x07,W
093EA:  MOVWF  03
093EC:  MOVF   01,W
093EE:  MOVWF  x4D
093F0:  MOVFF  03,A4E
093F4:  MOVLW  04
093F6:  MOVWF  x4F
093F8:  MOVFF  A4E,A51
093FC:  MOVFF  A4D,A50
09400:  CLRF   x53
09402:  MOVLW  40
09404:  MOVWF  x52
09406:  MOVLB  0
09408:  CALL   3FE0
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
0940C:  GOTO   947C
09410:  MOVLB  9
09412:  MOVF   xC4,W
09414:  MOVWF  FE9
09416:  MOVF   xC5,W
09418:  MOVWF  FEA
0941A:  MOVF   FEF,W
0941C:  SUBLW  02
0941E:  BTFSC  FD8.2
09420:  BRA    9428
09422:  MOVLB  0
09424:  GOTO   947C
09428:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
0942A:  MOVLB  A
0942C:  MOVF   x06,W
0942E:  MOVWF  01
09430:  MOVF   x07,W
09432:  MOVWF  03
09434:  MOVF   01,W
09436:  MOVWF  x4D
09438:  MOVFF  03,A4E
0943C:  MOVFF  A4E,AEB
09440:  MOVFF  A4D,AEA
09444:  MOVLW  3F
09446:  MOVWF  xEC
09448:  MOVLB  0
0944A:  CALL   2E3C
0944E:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09452:  MOVLB  A
09454:  MOVF   x06,W
09456:  MOVWF  01
09458:  MOVF   x07,W
0945A:  MOVWF  03
0945C:  MOVF   01,W
0945E:  MOVWF  x4D
09460:  MOVFF  03,A4E
09464:  MOVLW  06
09466:  MOVWF  x4F
09468:  MOVFF  A4E,A51
0946C:  MOVFF  A4D,A50
09470:  CLRF   x53
09472:  MOVLW  40
09474:  MOVWF  x52
09476:  MOVLB  0
09478:  CALL   3FE0
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = PACKET_IV_HEADER_SIZE;
0947C:  MOVLB  A
0947E:  CLRF   x4A
09480:  MOVLW  33
09482:  MOVWF  x49
09484:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
09486:  MOVLW  01
09488:  MOVLB  9
0948A:  ADDWF  xC4,W
0948C:  MOVWF  FE9
0948E:  MOVLW  00
09490:  ADDWFC xC5,W
09492:  MOVWF  FEA
09494:  MOVFF  FEC,03
09498:  MOVF   FED,F
0949A:  MOVF   FEF,W
0949C:  MOVWF  01
0949E:  MOVLB  A
094A0:  MOVF   x4A,W
094A2:  SUBWF  03,W
094A4:  BTFSC  FD8.0
094A6:  BRA    94AE
094A8:  MOVLB  0
094AA:  GOTO   988E
094AE:  MOVLB  0
094B0:  BTFSS  FD8.2
094B2:  GOTO   94C8
094B6:  MOVF   01,W
094B8:  MOVLB  A
094BA:  SUBWF  x49,W
094BC:  BTFSS  FD8.0
094BE:  BRA    94C6
094C0:  MOVLB  0
094C2:  GOTO   988E
094C6:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
094C8:  MOVLB  A
094CA:  CLRF   x4C
094CC:  CLRF   x4B
094CE:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
094D0:  MOVLB  A
094D2:  MOVF   x4C,F
094D4:  BTFSC  FD8.2
094D6:  BRA    94DE
094D8:  MOVLB  0
094DA:  GOTO   96E6
094DE:  MOVLB  0
094E0:  MOVLB  A
094E2:  MOVF   x4B,W
094E4:  SUBLW  14
094E6:  BTFSC  FD8.0
094E8:  BRA    94F0
094EA:  MOVLB  0
094EC:  GOTO   96E6
094F0:  MOVLB  0
094F2:  MOVLW  01
094F4:  MOVLB  9
094F6:  ADDWF  xC4,W
094F8:  MOVWF  FE9
094FA:  MOVLW  00
094FC:  ADDWFC xC5,W
094FE:  MOVWF  FEA
09500:  MOVFF  FEC,03
09504:  MOVF   FED,F
09506:  MOVF   FEF,W
09508:  MOVWF  01
0950A:  MOVLB  A
0950C:  MOVF   x4A,W
0950E:  SUBWF  03,W
09510:  BTFSC  FD8.0
09512:  BRA    951A
09514:  MOVLB  0
09516:  GOTO   96E6
0951A:  MOVLB  0
0951C:  BTFSS  FD8.2
0951E:  GOTO   9534
09522:  MOVF   01,W
09524:  MOVLB  A
09526:  SUBWF  x49,W
09528:  BTFSS  FD8.0
0952A:  BRA    9532
0952C:  MOVLB  0
0952E:  GOTO   96E6
09532:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
09534:  MOVFF  A4C,A52
09538:  MOVFF  A4B,A51
0953C:  MOVLB  A
0953E:  CLRF   x54
09540:  MOVLW  03
09542:  MOVWF  x53
09544:  MOVLB  0
09546:  CALL   7F94
0954A:  MOVFF  02,A4E
0954E:  MOVFF  01,A4D
09552:  MOVLW  C6
09554:  MOVLB  A
09556:  ADDWF  x4D,W
09558:  MOVWF  01
0955A:  MOVLW  09
0955C:  ADDWFC x4E,W
0955E:  MOVWF  03
09560:  MOVF   01,W
09562:  MOVWF  x4F
09564:  MOVFF  03,A50
09568:  MOVFF  A4A,A52
0956C:  MOVFF  A49,A51
09570:  CLRF   x54
09572:  MOVLW  03
09574:  MOVWF  x53
09576:  MOVLB  0
09578:  CALL   7F94
0957C:  MOVFF  02,A52
09580:  MOVFF  01,A51
09584:  MOVLW  03
09586:  MOVLB  A
09588:  ADDWF  x51,W
0958A:  MOVWF  01
0958C:  MOVLW  00
0958E:  ADDWFC x52,W
09590:  MOVWF  03
09592:  MOVF   01,W
09594:  MOVLB  9
09596:  ADDWF  xC4,W
09598:  MOVWF  FE9
0959A:  MOVF   xC5,W
0959C:  ADDWFC 03,W
0959E:  MOVWF  FEA
095A0:  MOVF   FEF,W
095A2:  MOVLB  A
095A4:  MOVWF  x53
095A6:  MOVFF  A50,FEA
095AA:  MOVFF  A4F,FE9
095AE:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
095B2:  MOVFF  A4C,A52
095B6:  MOVFF  A4B,A51
095BA:  CLRF   x54
095BC:  MOVLW  03
095BE:  MOVWF  x53
095C0:  MOVLB  0
095C2:  CALL   7F94
095C6:  MOVFF  02,A4E
095CA:  MOVFF  01,A4D
095CE:  MOVLW  01
095D0:  MOVLB  A
095D2:  ADDWF  x4D,F
095D4:  MOVLW  00
095D6:  ADDWFC x4E,F
095D8:  MOVLW  C6
095DA:  ADDWF  x4D,W
095DC:  MOVWF  01
095DE:  MOVLW  09
095E0:  ADDWFC x4E,W
095E2:  MOVWF  03
095E4:  MOVF   01,W
095E6:  MOVWF  x4F
095E8:  MOVFF  03,A50
095EC:  MOVFF  A4A,A52
095F0:  MOVFF  A49,A51
095F4:  CLRF   x54
095F6:  MOVLW  03
095F8:  MOVWF  x53
095FA:  MOVLB  0
095FC:  CALL   7F94
09600:  MOVFF  02,A52
09604:  MOVFF  01,A51
09608:  MOVLW  01
0960A:  MOVLB  A
0960C:  ADDWF  x51,F
0960E:  MOVLW  00
09610:  ADDWFC x52,F
09612:  MOVLW  03
09614:  ADDWF  x51,W
09616:  MOVWF  01
09618:  MOVLW  00
0961A:  ADDWFC x52,W
0961C:  MOVWF  03
0961E:  MOVF   01,W
09620:  MOVLB  9
09622:  ADDWF  xC4,W
09624:  MOVWF  FE9
09626:  MOVF   xC5,W
09628:  ADDWFC 03,W
0962A:  MOVWF  FEA
0962C:  MOVF   FEF,W
0962E:  MOVLB  A
09630:  MOVWF  x53
09632:  MOVFF  A50,FEA
09636:  MOVFF  A4F,FE9
0963A:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
0963E:  MOVFF  A4C,A52
09642:  MOVFF  A4B,A51
09646:  CLRF   x54
09648:  MOVLW  03
0964A:  MOVWF  x53
0964C:  MOVLB  0
0964E:  CALL   7F94
09652:  MOVFF  02,A4E
09656:  MOVFF  01,A4D
0965A:  MOVLW  02
0965C:  MOVLB  A
0965E:  ADDWF  x4D,F
09660:  MOVLW  00
09662:  ADDWFC x4E,F
09664:  MOVLW  C6
09666:  ADDWF  x4D,W
09668:  MOVWF  01
0966A:  MOVLW  09
0966C:  ADDWFC x4E,W
0966E:  MOVWF  03
09670:  MOVF   01,W
09672:  MOVWF  x4F
09674:  MOVFF  03,A50
09678:  MOVFF  A4A,A52
0967C:  MOVFF  A49,A51
09680:  CLRF   x54
09682:  MOVLW  03
09684:  MOVWF  x53
09686:  MOVLB  0
09688:  CALL   7F94
0968C:  MOVFF  02,A52
09690:  MOVFF  01,A51
09694:  MOVLW  02
09696:  MOVLB  A
09698:  ADDWF  x51,F
0969A:  MOVLW  00
0969C:  ADDWFC x52,F
0969E:  MOVLW  03
096A0:  ADDWF  x51,W
096A2:  MOVWF  01
096A4:  MOVLW  00
096A6:  ADDWFC x52,W
096A8:  MOVWF  03
096AA:  MOVF   01,W
096AC:  MOVLB  9
096AE:  ADDWF  xC4,W
096B0:  MOVWF  FE9
096B2:  MOVF   xC5,W
096B4:  ADDWFC 03,W
096B6:  MOVWF  FEA
096B8:  MOVF   FEF,W
096BA:  MOVLB  A
096BC:  MOVWF  x53
096BE:  MOVFF  A50,FEA
096C2:  MOVFF  A4F,FE9
096C6:  MOVFF  A53,FEF
096CA:  MOVLB  0
096CC:  MOVLB  A
096CE:  MOVF   x4C,W
096D0:  MOVWF  03
096D2:  MOVF   x4B,W
096D4:  INCF   x4B,F
096D6:  BTFSC  FD8.2
096D8:  INCF   x4C,F
096DA:  INCF   x49,F
096DC:  BTFSC  FD8.2
096DE:  INCF   x4A,F
096E0:  MOVLB  0
096E2:  GOTO   94D0
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
096E6:  MOVLB  A
096E8:  MOVF   x4C,F
096EA:  BTFSC  FD8.2
096EC:  BRA    96F4
096EE:  MOVLB  0
096F0:  GOTO   97AE
096F4:  MOVLB  0
096F6:  MOVLB  A
096F8:  MOVF   x4B,W
096FA:  SUBLW  14
096FC:  BTFSC  FD8.0
096FE:  BRA    9706
09700:  MOVLB  0
09702:  GOTO   97AE
09706:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
09708:  MOVFF  A4C,A52
0970C:  MOVFF  A4B,A51
09710:  MOVLB  A
09712:  CLRF   x54
09714:  MOVLW  03
09716:  MOVWF  x53
09718:  MOVLB  0
0971A:  CALL   7F94
0971E:  MOVFF  02,A4E
09722:  MOVFF  01,A4D
09726:  MOVLW  C6
09728:  MOVLB  A
0972A:  ADDWF  x4D,W
0972C:  MOVWF  FE9
0972E:  MOVLW  09
09730:  ADDWFC x4E,W
09732:  MOVWF  FEA
09734:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
09736:  MOVFF  A4C,A52
0973A:  MOVFF  A4B,A51
0973E:  CLRF   x54
09740:  MOVLW  03
09742:  MOVWF  x53
09744:  MOVLB  0
09746:  CALL   7F94
0974A:  MOVFF  02,A4E
0974E:  MOVFF  01,A4D
09752:  MOVLW  01
09754:  MOVLB  A
09756:  ADDWF  x4D,F
09758:  MOVLW  00
0975A:  ADDWFC x4E,F
0975C:  MOVLW  C6
0975E:  ADDWF  x4D,W
09760:  MOVWF  FE9
09762:  MOVLW  09
09764:  ADDWFC x4E,W
09766:  MOVWF  FEA
09768:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
0976A:  MOVFF  A4C,A52
0976E:  MOVFF  A4B,A51
09772:  CLRF   x54
09774:  MOVLW  03
09776:  MOVWF  x53
09778:  MOVLB  0
0977A:  CALL   7F94
0977E:  MOVFF  02,A4E
09782:  MOVFF  01,A4D
09786:  MOVLW  02
09788:  MOVLB  A
0978A:  ADDWF  x4D,F
0978C:  MOVLW  00
0978E:  ADDWFC x4E,F
09790:  MOVLW  C6
09792:  ADDWF  x4D,W
09794:  MOVWF  FE9
09796:  MOVLW  09
09798:  ADDWFC x4E,W
0979A:  MOVWF  FEA
0979C:  CLRF   FEF
0979E:  MOVLB  0
097A0:  MOVLB  A
097A2:  INCF   x4B,F
097A4:  BTFSC  FD8.2
097A6:  INCF   x4C,F
097A8:  MOVLB  0
097AA:  GOTO   96E6
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
097AE:  MOVLB  9
097B0:  MOVF   xC4,W
097B2:  MOVWF  FE9
097B4:  MOVF   xC5,W
097B6:  MOVWF  FEA
097B8:  DECFSZ FEF,W
097BA:  BRA    97C0
097BC:  BRA    97C6
097BE:  MOVLB  0
097C0:  MOVLB  0
097C2:  GOTO   981E
097C6:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
097C8:  MOVLB  A
097CA:  MOVF   x06,W
097CC:  MOVWF  01
097CE:  MOVF   x07,W
097D0:  MOVWF  03
097D2:  MOVF   01,W
097D4:  MOVWF  x4D
097D6:  MOVFF  03,A4E
097DA:  MOVFF  A4E,AEB
097DE:  MOVFF  A4D,AEA
097E2:  MOVLW  3F
097E4:  MOVWF  xEC
097E6:  MOVLB  0
097E8:  CALL   2E3C
097EC:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
097F0:  MOVLB  A
097F2:  MOVF   x06,W
097F4:  MOVWF  01
097F6:  MOVF   x07,W
097F8:  MOVWF  03
097FA:  MOVF   01,W
097FC:  MOVWF  x4D
097FE:  MOVFF  03,A4E
09802:  MOVLW  04
09804:  MOVWF  x4F
09806:  MOVFF  A4E,A51
0980A:  MOVFF  A4D,A50
0980E:  CLRF   x53
09810:  MOVLW  40
09812:  MOVWF  x52
09814:  MOVLB  0
09816:  CALL   3FE0
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
0981A:  GOTO   988A
0981E:  MOVLB  9
09820:  MOVF   xC4,W
09822:  MOVWF  FE9
09824:  MOVF   xC5,W
09826:  MOVWF  FEA
09828:  MOVF   FEF,W
0982A:  SUBLW  02
0982C:  BTFSC  FD8.2
0982E:  BRA    9836
09830:  MOVLB  0
09832:  GOTO   988A
09836:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09838:  MOVLB  A
0983A:  MOVF   x06,W
0983C:  MOVWF  01
0983E:  MOVF   x07,W
09840:  MOVWF  03
09842:  MOVF   01,W
09844:  MOVWF  x4D
09846:  MOVFF  03,A4E
0984A:  MOVFF  A4E,AEB
0984E:  MOVFF  A4D,AEA
09852:  MOVLW  3F
09854:  MOVWF  xEC
09856:  MOVLB  0
09858:  CALL   2E3C
0985C:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09860:  MOVLB  A
09862:  MOVF   x06,W
09864:  MOVWF  01
09866:  MOVF   x07,W
09868:  MOVWF  03
0986A:  MOVF   01,W
0986C:  MOVWF  x4D
0986E:  MOVFF  03,A4E
09872:  MOVLW  06
09874:  MOVWF  x4F
09876:  MOVFF  A4E,A51
0987A:  MOVFF  A4D,A50
0987E:  CLRF   x53
09880:  MOVLW  40
09882:  MOVWF  x52
09884:  MOVLB  0
09886:  CALL   3FE0
....................         }
0988A:  GOTO   9486
....................     }
0988E:  RETURN 0
.................... 
....................     // misf_update_address_area(); // 必要なら有効化
.................... }
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
08F40:  MOVLW  09
08F42:  MOVWF  FEA
08F44:  MOVLW  E2
08F46:  MOVWF  FE9
08F48:  CLRF   00
08F4A:  CLRF   02
08F4C:  MOVLW  0C
08F4E:  MOVWF  01
08F50:  CALL   209E
....................     data.time           = get_current_sec();
08F54:  CALL   396A
08F58:  MOVFF  03,9E5
08F5C:  MOVFF  02,9E4
08F60:  MOVFF  01,9E3
08F64:  MOVFF  00,9E2
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
08F68:  MOVLW  0D
08F6A:  MOVLB  9
08F6C:  MOVWF  xEE
08F6E:  MOVLB  0
08F70:  CALL   2214
08F74:  MOVFF  02,9E9
08F78:  MOVFF  01,9E8
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
08F7C:  MOVLW  0E
08F7E:  MOVLB  9
08F80:  MOVWF  xEE
08F82:  MOVLB  0
08F84:  CALL   2214
08F88:  MOVFF  02,9EB
08F8C:  MOVFF  01,9EA
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
08F90:  MOVLW  0C
08F92:  MOVLB  9
08F94:  MOVWF  xEE
08F96:  MOVLB  0
08F98:  CALL   2214
08F9C:  MOVFF  02,9ED
08FA0:  MOVFF  01,9EC
....................     data.pd             = ad7490_read(ADC_PD);
08FA4:  MOVLW  0F
08FA6:  MOVLB  9
08FA8:  MOVWF  xEE
08FAA:  MOVLB  0
08FAC:  CALL   2214
08FB0:  MOVFF  02,9E7
08FB4:  MOVFF  01,9E6
....................     return data;
08FB8:  MOVLW  E2
08FBA:  MOVWF  01
08FBC:  MOVLW  09
08FBE:  MOVWF  02
08FC0:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
080AE:  MOVLB  1
080B0:  MOVF   xE9,W
080B2:  MOVWF  01
080B4:  MOVF   xEA,W
080B6:  MOVWF  02
080B8:  MOVLB  0
080BA:  GOTO   8CF8 (RETURN)
.................... }
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08AA4:  MOVFF  1EA,1F4
08AA8:  MOVFF  1E9,1F3
08AAC:  GOTO   80BE
08AB0:  MOVFF  03,1F6
08AB4:  MOVFF  02,1F5
08AB8:  MOVFF  01,1F4
08ABC:  MOVFF  00,1F3
08AC0:  MOVFF  1F6,1FA
08AC4:  MOVFF  1F5,1F9
08AC8:  MOVFF  1F4,1F8
08ACC:  MOVFF  1F3,1F7
08AD0:  MOVLB  1
08AD2:  CLRF   xFE
08AD4:  MOVLW  40
08AD6:  MOVWF  xFD
08AD8:  MOVLW  1C
08ADA:  MOVWF  xFC
08ADC:  MOVLW  8A
08ADE:  MOVWF  xFB
08AE0:  MOVLB  0
08AE2:  GOTO   8104
08AE6:  MOVFF  03,1F6
08AEA:  MOVFF  02,1F5
08AEE:  MOVFF  01,1F4
08AF2:  MOVFF  00,1F3
08AF6:  MOVFF  1F6,1FA
08AFA:  MOVFF  1F5,1F9
08AFE:  MOVFF  1F4,1F8
08B02:  MOVFF  1F3,1F7
08B06:  MOVLB  1
08B08:  CLRF   xFE
08B0A:  MOVLW  F0
08B0C:  MOVWF  xFD
08B0E:  MOVLW  7F
08B10:  MOVWF  xFC
08B12:  MOVLW  8A
08B14:  MOVWF  xFB
08B16:  MOVLB  0
08B18:  CALL   8262
08B1C:  MOVFF  03,1EE
08B20:  MOVFF  02,1ED
08B24:  MOVFF  01,1EC
08B28:  MOVFF  00,1EB
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08B2C:  BSF    FD8.1
08B2E:  MOVFF  1EE,1F6
08B32:  MOVFF  1ED,1F5
08B36:  MOVFF  1EC,1F4
08B3A:  MOVFF  1EB,1F3
08B3E:  MOVLB  1
08B40:  CLRF   xFA
08B42:  MOVLW  40
08B44:  MOVWF  xF9
08B46:  MOVLW  1C
08B48:  MOVWF  xF8
08B4A:  MOVLW  89
08B4C:  MOVWF  xF7
08B4E:  MOVLB  0
08B50:  GOTO   8550
08B54:  MOVFF  03,1F6
08B58:  MOVFF  02,1F5
08B5C:  MOVFF  01,1F4
08B60:  MOVFF  00,1F3
08B64:  MOVFF  1F6,1FA
08B68:  MOVFF  1F5,1F9
08B6C:  MOVFF  1F4,1F8
08B70:  MOVFF  1F3,1F7
08B74:  MOVLB  1
08B76:  CLRF   xFE
08B78:  CLRF   xFD
08B7A:  MOVLW  20
08B7C:  MOVWF  xFC
08B7E:  MOVLW  82
08B80:  MOVWF  xFB
08B82:  MOVLB  0
08B84:  CALL   8262
08B88:  MOVFF  03,1F2
08B8C:  MOVFF  02,1F1
08B90:  MOVFF  01,1F0
08B94:  MOVFF  00,1EF
.................... 
....................     return (int16)current_ma;
08B98:  MOVFF  1F2,1F6
08B9C:  MOVFF  1F1,1F5
08BA0:  MOVFF  1F0,1F4
08BA4:  MOVFF  1EF,1F3
08BA8:  GOTO   8A4A
08BAC:  MOVF   01,W
08BAE:  MOVWF  01
08BB0:  MOVF   02,W
08BB2:  MOVWF  02
08BB4:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_piclog.c"
.................... #include "cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04E3E:  MOVLW  02
04E40:  MOVLB  2
04E42:  MOVWF  x0F
04E44:  MOVLW  08
04E46:  MOVWF  x0E
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04E48:  MOVFF  20F,FEA
04E4C:  MOVFF  20E,FE9
04E50:  CLRF   00
04E52:  CLRF   02
04E54:  MOVLW  06
04E56:  MOVWF  01
04E58:  MOVLB  0
04E5A:  CALL   209E
....................     piclog_ptr->fields.time = get_current_sec();
04E5E:  MOVLB  2
04E60:  MOVF   x0E,W
04E62:  MOVWF  01
04E64:  MOVF   x0F,W
04E66:  MOVWF  03
04E68:  MOVF   01,W
04E6A:  MOVWF  x11
04E6C:  MOVFF  03,212
04E70:  MOVLB  0
04E72:  CALL   396A
04E76:  MOVFF  212,FEA
04E7A:  MOVFF  211,FE9
04E7E:  MOVFF  00,FEF
04E82:  MOVFF  01,FEC
04E86:  MOVFF  02,FEC
04E8A:  MOVFF  03,FEC
04E8E:  MOVF   FED,F
04E90:  MOVF   FED,F
04E92:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04E94:  MOVLW  04
04E96:  MOVLB  2
04E98:  ADDWF  x0E,W
04E9A:  MOVWF  FE9
04E9C:  MOVLW  00
04E9E:  ADDWFC x0F,W
04EA0:  MOVWF  FEA
04EA2:  MOVFF  206,FEF
....................     piclog_ptr->fields.parameter = parameter;
04EA6:  MOVLW  05
04EA8:  ADDWF  x0E,W
04EAA:  MOVWF  FE9
04EAC:  MOVLW  00
04EAE:  ADDWFC x0F,W
04EB0:  MOVWF  FEA
04EB2:  MOVFF  207,FEF
.................... 
....................     printf("[PICLOG] : ");
04EB6:  MOVLW  7E
04EB8:  MOVWF  FF6
04EBA:  MOVLW  06
04EBC:  MOVWF  FF7
04EBE:  MOVLW  00
04EC0:  MOVWF  FF8
04EC2:  MOVLB  0
04EC4:  CALL   202E
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04EC8:  MOVLB  2
04ECA:  CLRF   x10
04ECC:  MOVLB  0
04ECE:  MOVLB  2
04ED0:  MOVF   x10,W
04ED2:  SUBLW  05
04ED4:  BTFSC  FD8.0
04ED6:  BRA    4EDE
04ED8:  MOVLB  0
04EDA:  GOTO   4F1A
04EDE:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04EE0:  MOVLB  2
04EE2:  MOVF   x10,W
04EE4:  ADDWF  x0E,W
04EE6:  MOVWF  FE9
04EE8:  MOVLW  00
04EEA:  ADDWFC x0F,W
04EEC:  MOVWF  FEA
04EEE:  MOVFF  FEF,211
04EF2:  MOVFF  211,9E8
04EF6:  MOVLW  37
04EF8:  MOVLB  9
04EFA:  MOVWF  xE9
04EFC:  MOVLB  0
04EFE:  CALL   2294
04F02:  MOVLW  20
04F04:  BTFSS  FA6.6
04F06:  GOTO   4F04
04F0A:  MOVLB  E
04F0C:  MOVWF  xF9
04F0E:  MOVLB  0
04F10:  MOVLB  2
04F12:  INCF   x10,F
04F14:  MOVLB  0
04F16:  GOTO   4ECE
....................     }
....................     printf("\r\n");
04F1A:  MOVLW  0D
04F1C:  BTFSS  FA6.6
04F1E:  GOTO   4F1C
04F22:  MOVLB  E
04F24:  MOVWF  xF9
04F26:  MOVLW  0A
04F28:  MOVLB  0
04F2A:  BTFSS  FA6.6
04F2C:  GOTO   4F2A
04F30:  MOVLB  E
04F32:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04F34:  MOVLB  2
04F36:  MOVF   x0E,W
04F38:  MOVWF  01
04F3A:  MOVF   x0F,W
04F3C:  MOVWF  03
04F3E:  MOVF   01,W
04F40:  MOVWF  x11
04F42:  MOVFF  03,212
04F46:  MOVLW  01
04F48:  MOVLB  A
04F4A:  MOVWF  x4F
04F4C:  MOVFF  212,A51
04F50:  MOVFF  211,A50
04F54:  CLRF   x53
04F56:  MOVLW  06
04F58:  MOVWF  x52
04F5A:  MOVLB  0
04F5C:  CALL   3FE0
....................     misf_update_address_area();
04F60:  CALL   4DB0
04F64:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_smf.c"
.................... #include "cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... int1 smf_update_flag[10];
.................... 
.................... void update_smf_header()
.................... {
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07796:  MOVLW  8A
07798:  MOVWF  FF6
0779A:  MOVLW  06
0779C:  MOVWF  FF7
0779E:  MOVLW  00
077A0:  MOVWF  FF8
077A2:  CALL   202E
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
077A6:  MOVLW  06
077A8:  MOVLB  1
077AA:  MOVWF  xF8
077AC:  MOVLW  AA
077AE:  MOVWF  xF7
077B0:  CLRF   xF6
077B2:  CLRF   xF5
077B4:  MOVLB  0
077B6:  MOVLB  1
077B8:  MOVF   xF8,W
077BA:  SUBLW  07
077BC:  BTFSC  FD8.0
077BE:  BRA    77C6
077C0:  MOVLB  0
077C2:  GOTO   7848
077C6:  MOVLB  0
077C8:  BTFSS  FD8.2
077CA:  GOTO   7810
077CE:  MOVLB  1
077D0:  MOVF   xF7,W
077D2:  SUBLW  49
077D4:  BTFSC  FD8.0
077D6:  BRA    77DE
077D8:  MOVLB  0
077DA:  GOTO   7848
077DE:  MOVLB  0
077E0:  BTFSS  FD8.2
077E2:  GOTO   7810
077E6:  MOVLB  1
077E8:  MOVF   xF6,W
077EA:  SUBLW  0F
077EC:  BTFSC  FD8.0
077EE:  BRA    77F6
077F0:  MOVLB  0
077F2:  GOTO   7848
077F6:  MOVLB  0
077F8:  BTFSS  FD8.2
077FA:  GOTO   7810
077FE:  MOVLB  1
07800:  MOVF   xF5,W
07802:  SUBLW  FE
07804:  BTFSC  FD8.0
07806:  BRA    780E
07808:  MOVLB  0
0780A:  GOTO   7848
0780E:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07810:  MOVFF  119,A07
07814:  MOVFF  118,A06
07818:  MOVFF  117,A05
0781C:  MOVFF  116,A04
07820:  MOVFF  1F8,A0B
07824:  MOVFF  1F7,A0A
07828:  MOVFF  1F6,A09
0782C:  MOVFF  1F5,A08
07830:  CALL   4A8C
07834:  MOVLW  10
07836:  MOVLB  1
07838:  ADDWF  xF6,F
0783A:  MOVLW  00
0783C:  ADDWFC xF7,F
0783E:  MOVLW  00
07840:  ADDWFC xF8,F
07842:  MOVLB  0
07844:  GOTO   77B6
....................     }
....................     smf_data_table_t smf_data_table = {0};
07848:  MOVLB  1
0784A:  CLRF   xF9
0784C:  CLRF   xFA
0784E:  CLRF   xFB
07850:  CLRF   xFC
07852:  CLRF   xFD
07854:  CLRF   xFE
07856:  CLRF   xFF
07858:  MOVLB  2
0785A:  CLRF   x00
0785C:  CLRF   x01
0785E:  CLRF   x02
07860:  CLRF   x03
07862:  CLRF   x04
07864:  CLRF   x05
07866:  CLRF   x06
07868:  CLRF   x07
0786A:  CLRF   x08
0786C:  CLRF   x09
0786E:  CLRF   x0A
07870:  CLRF   x0B
07872:  CLRF   x0C
07874:  CLRF   x0D
07876:  CLRF   x0E
07878:  CLRF   x0F
0787A:  CLRF   x10
0787C:  CLRF   x11
0787E:  CLRF   x12
07880:  CLRF   x13
07882:  CLRF   x14
07884:  CLRF   x15
07886:  CLRF   x16
07888:  CLRF   x17
0788A:  CLRF   x18
0788C:  CLRF   x19
0788E:  CLRF   x1A
07890:  CLRF   x1B
07892:  CLRF   x1C
07894:  CLRF   x1D
07896:  CLRF   x1E
07898:  CLRF   x1F
0789A:  CLRF   x20
0789C:  CLRF   x21
0789E:  CLRF   x22
078A0:  CLRF   x23
078A2:  CLRF   x24
078A4:  CLRF   x25
078A6:  CLRF   x26
078A8:  CLRF   x27
078AA:  CLRF   x28
078AC:  CLRF   x29
078AE:  CLRF   x2A
078B0:  CLRF   x2B
078B2:  CLRF   x2C
078B4:  CLRF   x2D
078B6:  CLRF   x2E
078B8:  CLRF   x2F
078BA:  CLRF   x30
078BC:  CLRF   x31
078BE:  CLRF   x32
078C0:  CLRF   x33
078C2:  CLRF   x34
078C4:  CLRF   x35
078C6:  CLRF   x36
078C8:  CLRF   x37
078CA:  CLRF   x38
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
078CC:  MOVLW  01
078CE:  MOVLB  A
078D0:  MOVWF  xEB
078D2:  MOVLW  F9
078D4:  MOVWF  xEA
078D6:  MOVLW  3F
078D8:  MOVWF  xEC
078DA:  MOVLB  0
078DC:  CALL   2E3C
078E0:  MOVFF  01,238
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
078E4:  MOVFF  119,AED
078E8:  MOVFF  118,AEC
078EC:  MOVFF  117,AEB
078F0:  MOVFF  116,AEA
078F4:  MOVLW  06
078F6:  MOVLB  A
078F8:  MOVWF  xF1
078FA:  MOVLW  AA
078FC:  MOVWF  xF0
078FE:  CLRF   xEF
07900:  CLRF   xEE
07902:  MOVLW  01
07904:  MOVWF  xF3
07906:  MOVLW  F9
07908:  MOVWF  xF2
0790A:  CLRF   xF5
0790C:  MOVLW  40
0790E:  MOVWF  xF4
07910:  MOVLB  0
07912:  CALL   3C88
07916:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         print_smf_counter_status(smf_data_table);
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
....................         {
....................             return; // 成功したら終了
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
.................... 
....................     return;
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE))
....................         {
....................             crc_valid = 1; // FIX            break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
....................     fprintf(PC, "\t==========================================\r\n\r\n");
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
0F068:  MOVLW  4C
0F06A:  MOVWF  FF6
0F06C:  MOVLW  08
0F06E:  MOVWF  FF7
0F070:  MOVLW  00
0F072:  MOVWF  FF8
0F074:  CALL   202E
....................     fprintf(PC, "_________Start copy_data_________\r\n");
0F078:  MOVLW  70
0F07A:  MOVWF  FF6
0F07C:  MOVLW  08
0F07E:  MOVWF  FF7
0F080:  MOVLW  00
0F082:  MOVWF  FF8
0F084:  CALL   202E
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
0F088:  MOVFF  115,23A
0F08C:  MOVFF  114,239
0F090:  MOVFF  113,238
0F094:  MOVFF  112,237
0F098:  CALL   2B54
0F09C:  MOVF   01,F
0F09E:  BTFSS  FD8.2
0F0A0:  GOTO   F0B8
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0F0A4:  MOVLW  94
0F0A6:  MOVWF  FF6
0F0A8:  MOVLW  08
0F0AA:  MOVWF  FF7
0F0AC:  MOVLW  00
0F0AE:  MOVWF  FF8
0F0B0:  CALL   202E
....................         return;
0F0B4:  GOTO   FF96
....................     }    
....................     if (!is_connect(smf))
0F0B8:  MOVFF  119,23A
0F0BC:  MOVFF  118,239
0F0C0:  MOVFF  117,238
0F0C4:  MOVFF  116,237
0F0C8:  CALL   2B54
0F0CC:  MOVF   01,F
0F0CE:  BTFSS  FD8.2
0F0D0:  GOTO   F0E8
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0F0D4:  MOVLW  B6
0F0D6:  MOVWF  FF6
0F0D8:  MOVLW  08
0F0DA:  MOVWF  FF7
0F0DC:  MOVLW  00
0F0DE:  MOVWF  FF8
0F0E0:  CALL   202E
....................         return;
0F0E4:  GOTO   FF96
....................     }    
.................... 
.................... 
....................     // smf_data_table_t smf_data_table;
....................     // read_smf_header(&smf_data_table);
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
....................     unsigned int32 used_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
0F0E8:  MOVLB  1
0F0EA:  MOVF   xA1,W
0F0EC:  MOVWF  FE9
0F0EE:  MOVF   xA2,W
0F0F0:  MOVWF  FEA
0F0F2:  MOVF   FEF,W
0F0F4:  MULLW  0A
0F0F6:  MOVF   FF3,W
0F0F8:  MOVLB  2
0F0FA:  CLRF   x11
0F0FC:  MOVWF  x10
0F0FE:  MOVLW  04
0F100:  ADDWF  x10,W
0F102:  MOVWF  01
0F104:  MOVLW  00
0F106:  ADDWFC x11,W
0F108:  MOVWF  03
0F10A:  MOVF   01,W
0F10C:  ADDLW  22
0F10E:  MOVWF  FE9
0F110:  MOVLW  01
0F112:  ADDWFC 03,W
0F114:  MOVWF  FEA
0F116:  MOVFF  FEF,1AB
0F11A:  MOVFF  FEC,1AC
0F11E:  MOVFF  FEC,1AD
0F122:  MOVFF  FEC,1AE
0F126:  MOVF   FED,F
0F128:  MOVF   FED,F
0F12A:  MOVF   FED,F
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
0F12C:  MOVLW  03
0F12E:  MOVLB  1
0F130:  ADDWF  xA1,W
0F132:  MOVWF  01
0F134:  MOVLW  00
0F136:  ADDWFC xA2,W
0F138:  MOVWF  03
0F13A:  MOVF   01,W
0F13C:  MOVWF  FE9
0F13E:  MOVFF  03,FEA
0F142:  BTFSS  FEF.0
0F144:  BRA    F14C
0F146:  MOVLB  0
0F148:  GOTO   F28E
0F14C:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
0F14E:  MOVLB  1
0F150:  MOVF   xA1,W
0F152:  MOVWF  FE9
0F154:  MOVF   xA2,W
0F156:  MOVWF  FEA
0F158:  MOVF   FEF,W
0F15A:  MULLW  0C
0F15C:  MOVF   FF3,W
0F15E:  MOVLB  2
0F160:  CLRF   x11
0F162:  MOVWF  x10
0F164:  MOVFF  211,03
0F168:  MOVF   x10,W
0F16A:  MOVLB  0
0F16C:  CALL   00E6
0F170:  MOVWF  00
0F172:  TBLRD*+
0F174:  MOVFF  FF5,01
0F178:  TBLRD*+
0F17A:  MOVFF  FF5,02
0F17E:  TBLRD*+
0F180:  MOVFF  FF5,03
0F184:  MOVFF  03,215
0F188:  MOVFF  02,214
0F18C:  MOVFF  01,213
0F190:  MOVFF  00,212
0F194:  MOVLB  1
0F196:  MOVF   xA1,W
0F198:  MOVWF  FE9
0F19A:  MOVF   xA2,W
0F19C:  MOVWF  FEA
0F19E:  MOVF   FEF,W
0F1A0:  MULLW  0A
0F1A2:  MOVF   FF3,W
0F1A4:  MOVLB  2
0F1A6:  CLRF   x17
0F1A8:  MOVWF  x16
0F1AA:  MOVLW  22
0F1AC:  ADDWF  x16,W
0F1AE:  MOVWF  FE9
0F1B0:  MOVLW  01
0F1B2:  ADDWFC x17,W
0F1B4:  MOVWF  FEA
0F1B6:  MOVFF  FEF,00
0F1BA:  MOVFF  FEC,01
0F1BE:  MOVFF  FEC,02
0F1C2:  MOVFF  FEC,03
0F1C6:  MOVF   FED,F
0F1C8:  MOVF   FED,F
0F1CA:  MOVF   FED,F
0F1CC:  MOVF   00,W
0F1CE:  ADDWF  x12,F
0F1D0:  MOVF   01,W
0F1D2:  ADDWFC x13,F
0F1D4:  MOVF   02,W
0F1D6:  ADDWFC x14,F
0F1D8:  MOVF   03,W
0F1DA:  ADDWFC x15,F
0F1DC:  MOVLB  1
0F1DE:  MOVF   xA1,W
0F1E0:  MOVWF  FE9
0F1E2:  MOVF   xA2,W
0F1E4:  MOVWF  FEA
0F1E6:  MOVF   FEF,W
0F1E8:  MULLW  0A
0F1EA:  MOVF   FF3,W
0F1EC:  MOVLB  2
0F1EE:  CLRF   x19
0F1F0:  MOVWF  x18
0F1F2:  MOVLW  04
0F1F4:  ADDWF  x18,W
0F1F6:  MOVWF  01
0F1F8:  MOVLW  00
0F1FA:  ADDWFC x19,W
0F1FC:  MOVWF  03
0F1FE:  MOVF   01,W
0F200:  ADDLW  22
0F202:  MOVWF  FE9
0F204:  MOVLW  01
0F206:  ADDWFC 03,W
0F208:  MOVWF  FEA
0F20A:  MOVFF  FEF,00
0F20E:  MOVFF  FEC,01
0F212:  MOVFF  FEC,02
0F216:  MOVFF  FEC,03
0F21A:  MOVF   FED,F
0F21C:  MOVF   FED,F
0F21E:  MOVF   FED,F
0F220:  MOVF   00,W
0F222:  SUBWF  x12,W
0F224:  MOVLB  1
0F226:  MOVWF  xA3
0F228:  MOVF   01,W
0F22A:  MOVLB  2
0F22C:  SUBWFB x13,W
0F22E:  MOVLB  1
0F230:  MOVWF  xA4
0F232:  MOVF   02,W
0F234:  MOVLB  2
0F236:  SUBWFB x14,W
0F238:  MOVLB  1
0F23A:  MOVWF  xA5
0F23C:  MOVF   03,W
0F23E:  MOVLB  2
0F240:  SUBWFB x15,W
0F242:  MOVLB  1
0F244:  MOVWF  xA6
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
0F246:  MOVF   xA1,W
0F248:  MOVWF  FE9
0F24A:  MOVF   xA2,W
0F24C:  MOVWF  FEA
0F24E:  MOVF   FEF,W
0F250:  MULLW  0A
0F252:  MOVF   FF3,W
0F254:  MOVLB  2
0F256:  CLRF   x11
0F258:  MOVWF  x10
0F25A:  MOVLW  04
0F25C:  ADDWF  x10,W
0F25E:  MOVWF  01
0F260:  MOVLW  00
0F262:  ADDWFC x11,W
0F264:  MOVWF  03
0F266:  MOVF   01,W
0F268:  ADDLW  22
0F26A:  MOVWF  FE9
0F26C:  MOVLW  01
0F26E:  ADDWFC 03,W
0F270:  MOVWF  FEA
0F272:  MOVFF  FEF,1A7
0F276:  MOVFF  FEC,1A8
0F27A:  MOVFF  FEC,1A9
0F27E:  MOVFF  FEC,1AA
0F282:  MOVF   FED,F
0F284:  MOVF   FED,F
0F286:  MOVF   FED,F
0F288:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
0F28A:  GOTO   F2F8
0F28E:  MOVLW  03
0F290:  MOVLB  1
0F292:  ADDWF  xA1,W
0F294:  MOVWF  01
0F296:  MOVLW  00
0F298:  ADDWFC xA2,W
0F29A:  MOVWF  03
0F29C:  MOVF   01,W
0F29E:  MOVWF  FE9
0F2A0:  MOVFF  03,FEA
0F2A4:  BTFSC  FEF.0
0F2A6:  BRA    F2AE
0F2A8:  MOVLB  0
0F2AA:  GOTO   F2F8
0F2AE:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
0F2B0:  MOVLW  04
0F2B2:  MOVLB  1
0F2B4:  ADDWF  xA1,W
0F2B6:  MOVWF  FE9
0F2B8:  MOVLW  00
0F2BA:  ADDWFC xA2,W
0F2BC:  MOVWF  FEA
0F2BE:  MOVFF  FEF,1A3
0F2C2:  MOVFF  FEC,1A4
0F2C6:  MOVFF  FEC,1A5
0F2CA:  MOVFF  FEC,1A6
0F2CE:  MOVF   FED,F
0F2D0:  MOVF   FED,F
0F2D2:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
0F2D4:  MOVLW  08
0F2D6:  ADDWF  xA1,W
0F2D8:  MOVWF  FE9
0F2DA:  MOVLW  00
0F2DC:  ADDWFC xA2,W
0F2DE:  MOVWF  FEA
0F2E0:  MOVFF  FEF,1A7
0F2E4:  MOVFF  FEC,1A8
0F2E8:  MOVFF  FEC,1A9
0F2EC:  MOVFF  FEC,1AA
0F2F0:  MOVF   FED,F
0F2F2:  MOVF   FED,F
0F2F4:  MOVF   FED,F
0F2F6:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_header_address_start;
....................     unsigned int32 smf_data_address_start;
....................     unsigned int32 smf_data_address_end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
0F2F8:  MOVLB  1
0F2FA:  MOVF   xA1,W
0F2FC:  MOVWF  FE9
0F2FE:  MOVF   xA2,W
0F300:  MOVWF  FEA
0F302:  MOVF   FEF,W
0F304:  MULLW  0C
0F306:  MOVF   FF3,W
0F308:  MOVLB  2
0F30A:  CLRF   x11
0F30C:  MOVWF  x10
0F30E:  MOVFF  211,03
0F312:  MOVF   x10,W
0F314:  MOVLB  0
0F316:  CALL   00E6
0F31A:  MOVWF  00
0F31C:  TBLRD*+
0F31E:  MOVFF  FF5,01
0F322:  TBLRD*+
0F324:  MOVFF  FF5,02
0F328:  TBLRD*+
0F32A:  MOVFF  FF5,03
0F32E:  MOVFF  03,1BE
0F332:  MOVFF  02,1BD
0F336:  MOVFF  01,1BC
0F33A:  MOVFF  00,1BB
0F33E:  MOVLB  1
0F340:  MOVF   xA1,W
0F342:  MOVWF  FE9
0F344:  MOVF   xA2,W
0F346:  MOVWF  FEA
0F348:  MOVF   FEF,W
0F34A:  MULLW  0C
0F34C:  MOVF   FF3,W
0F34E:  MOVLB  2
0F350:  CLRF   x13
0F352:  MOVWF  x12
0F354:  MOVLW  04
0F356:  ADDWF  x12,W
0F358:  MOVWF  01
0F35A:  MOVLW  00
0F35C:  ADDWFC x13,W
0F35E:  MOVWF  03
0F360:  MOVF   01,W
0F362:  MOVLB  0
0F364:  CALL   00E6
0F368:  MOVWF  00
0F36A:  TBLRD*+
0F36C:  MOVFF  FF5,01
0F370:  TBLRD*+
0F372:  MOVFF  FF5,02
0F376:  TBLRD*+
0F378:  MOVFF  FF5,03
0F37C:  MOVFF  03,1C2
0F380:  MOVFF  02,1C1
0F384:  MOVFF  01,1C0
0F388:  MOVFF  00,1BF
.................... 
....................     smf_update_flag[smf_queue_ptr->mission_id] = 1;
0F38C:  MOVLB  1
0F38E:  MOVF   xA1,W
0F390:  MOVWF  FE9
0F392:  MOVF   xA2,W
0F394:  MOVWF  FEA
0F396:  MOVFF  FEA,211
0F39A:  MOVFF  FE9,210
0F39E:  MOVFF  FEF,B08
0F3A2:  MOVLW  01
0F3A4:  MOVLB  B
0F3A6:  MOVWF  x09
0F3A8:  MOVLW  01
0F3AA:  MOVWF  x0B
0F3AC:  MOVLW  7A
0F3AE:  MOVWF  x0A
0F3B0:  MOVLB  0
0F3B2:  CALL   280C
0F3B6:  MOVFF  211,FEA
0F3BA:  MOVFF  210,FE9
....................     switch ( smf_queue_ptr->mission_id )
0F3BE:  MOVLB  1
0F3C0:  MOVF   xA1,W
0F3C2:  MOVWF  FE9
0F3C4:  MOVF   xA2,W
0F3C6:  MOVWF  FEA
0F3C8:  MOVF   FEF,W
0F3CA:  XORLW  00
0F3CC:  MOVLB  0
0F3CE:  BTFSC  FD8.2
0F3D0:  GOTO   F408
0F3D4:  XORLW  01
0F3D6:  BTFSC  FD8.2
0F3D8:  GOTO   F448
0F3DC:  XORLW  03
0F3DE:  BTFSC  FD8.2
0F3E0:  GOTO   F48A
0F3E4:  XORLW  01
0F3E6:  BTFSC  FD8.2
0F3E8:  GOTO   F4CC
0F3EC:  XORLW  07
0F3EE:  BTFSC  FD8.2
0F3F0:  GOTO   F50E
0F3F4:  XORLW  01
0F3F6:  BTFSC  FD8.2
0F3F8:  GOTO   F550
0F3FC:  XORLW  03
0F3FE:  BTFSC  FD8.2
0F400:  GOTO   F592
0F404:  GOTO   F5D4
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
0F408:  MOVLW  D4
0F40A:  MOVWF  FF6
0F40C:  MOVLW  08
0F40E:  MOVWF  FF7
0F410:  MOVLW  00
0F412:  MOVWF  FF8
0F414:  CALL   202E
....................             smf_header_address_start = SMF_DATA_TABLE_HEADER_START_ADDRESS;
0F418:  MOVLW  07
0F41A:  MOVLB  1
0F41C:  MOVWF  xB2
0F41E:  MOVLW  3B
0F420:  MOVWF  xB1
0F422:  CLRF   xB0
0F424:  CLRF   xAF
....................             smf_data_address_start = SMF_DATA_TABLE_DATA_START_ADDRESS;
0F426:  MOVLW  07
0F428:  MOVWF  xB6
0F42A:  MOVLW  3B
0F42C:  MOVWF  xB5
0F42E:  MOVLW  10
0F430:  MOVWF  xB4
0F432:  CLRF   xB3
....................             smf_data_address_end = SMF_DATA_TABLE_DATA_END_ADDRESS;
0F434:  MOVLW  07
0F436:  MOVWF  xBA
0F438:  MOVLW  3B
0F43A:  MOVWF  xB9
0F43C:  MOVLW  1F
0F43E:  MOVWF  xB8
0F440:  SETF   xB7
....................             break;
0F442:  MOVLB  0
0F444:  GOTO   F62A
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
0F448:  MOVLW  F0
0F44A:  MOVWF  FF6
0F44C:  MOVLW  08
0F44E:  MOVWF  FF7
0F450:  MOVLW  00
0F452:  MOVWF  FF8
0F454:  CALL   202E
....................             smf_header_address_start = SMF_PICLOG_HEADER_START_ADDRESS;
0F458:  MOVLW  07
0F45A:  MOVLB  1
0F45C:  MOVWF  xB2
0F45E:  MOVLW  3B
0F460:  MOVWF  xB1
0F462:  MOVLW  20
0F464:  MOVWF  xB0
0F466:  CLRF   xAF
....................             smf_data_address_start = SMF_PICLOG_DATA_START_ADDRESS;
0F468:  MOVLW  07
0F46A:  MOVWF  xB6
0F46C:  MOVLW  3B
0F46E:  MOVWF  xB5
0F470:  MOVLW  30
0F472:  MOVWF  xB4
0F474:  CLRF   xB3
....................             smf_data_address_end = SMF_PICLOG_DATA_END_ADDRESS;
0F476:  MOVLW  07
0F478:  MOVWF  xBA
0F47A:  MOVLW  3C
0F47C:  MOVWF  xB9
0F47E:  MOVLW  2F
0F480:  MOVWF  xB8
0F482:  SETF   xB7
....................             break;
0F484:  MOVLB  0
0F486:  GOTO   F62A
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
0F48A:  MOVLW  0E
0F48C:  MOVWF  FF6
0F48E:  MOVLW  09
0F490:  MOVWF  FF7
0F492:  MOVLW  00
0F494:  MOVWF  FF8
0F496:  CALL   202E
....................             smf_header_address_start = SMF_ENVIRO_HEADER_START_ADDRESS;
0F49A:  MOVLW  07
0F49C:  MOVLB  1
0F49E:  MOVWF  xB2
0F4A0:  MOVLW  3C
0F4A2:  MOVWF  xB1
0F4A4:  MOVLW  30
0F4A6:  MOVWF  xB0
0F4A8:  CLRF   xAF
....................             smf_data_address_start = SMF_ENVIRO_DATA_START_ADDRESS;
0F4AA:  MOVLW  07
0F4AC:  MOVWF  xB6
0F4AE:  MOVLW  3C
0F4B0:  MOVWF  xB5
0F4B2:  MOVLW  40
0F4B4:  MOVWF  xB4
0F4B6:  CLRF   xB3
....................             smf_data_address_end = SMF_ENVIRO_DATA_END_ADDRESS;
0F4B8:  MOVLW  07
0F4BA:  MOVWF  xBA
0F4BC:  MOVLW  46
0F4BE:  MOVWF  xB9
0F4C0:  MOVLW  3F
0F4C2:  MOVWF  xB8
0F4C4:  SETF   xB7
....................             break;
0F4C6:  MOVLB  0
0F4C8:  GOTO   F62A
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
0F4CC:  MOVLW  2C
0F4CE:  MOVWF  FF6
0F4D0:  MOVLW  09
0F4D2:  MOVWF  FF7
0F4D4:  MOVLW  00
0F4D6:  MOVWF  FF8
0F4D8:  CALL   202E
....................             smf_header_address_start = SMF_IV1_HEADER_HEADER_START_ADDRESS;
0F4DC:  MOVLW  07
0F4DE:  MOVLB  1
0F4E0:  MOVWF  xB2
0F4E2:  MOVLW  46
0F4E4:  MOVWF  xB1
0F4E6:  MOVLW  40
0F4E8:  MOVWF  xB0
0F4EA:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_HEADER_DATA_START_ADDRESS;
0F4EC:  MOVLW  07
0F4EE:  MOVWF  xB6
0F4F0:  MOVLW  46
0F4F2:  MOVWF  xB5
0F4F4:  MOVLW  50
0F4F6:  MOVWF  xB4
0F4F8:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_HEADER_DATA_END_ADDRESS;
0F4FA:  MOVLW  07
0F4FC:  MOVWF  xBA
0F4FE:  MOVLW  50
0F500:  MOVWF  xB9
0F502:  MOVLW  4F
0F504:  MOVWF  xB8
0F506:  SETF   xB7
....................             break;
0F508:  MOVLB  0
0F50A:  GOTO   F62A
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
0F50E:  MOVLW  48
0F510:  MOVWF  FF6
0F512:  MOVLW  09
0F514:  MOVWF  FF7
0F516:  MOVLW  00
0F518:  MOVWF  FF8
0F51A:  CALL   202E
....................             smf_header_address_start = SMF_IV1_DATA_HEADER_START_ADDRESS;
0F51E:  MOVLW  07
0F520:  MOVLB  1
0F522:  MOVWF  xB2
0F524:  MOVLW  50
0F526:  MOVWF  xB1
0F528:  MOVLW  50
0F52A:  MOVWF  xB0
0F52C:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_DATA_DATA_START_ADDRESS;
0F52E:  MOVLW  07
0F530:  MOVWF  xB6
0F532:  MOVLW  50
0F534:  MOVWF  xB5
0F536:  MOVLW  60
0F538:  MOVWF  xB4
0F53A:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_DATA_DATA_END_ADDRESS;
0F53C:  MOVLW  07
0F53E:  MOVWF  xBA
0F540:  MOVLW  90
0F542:  MOVWF  xB9
0F544:  MOVLW  5F
0F546:  MOVWF  xB8
0F548:  SETF   xB7
....................             break;
0F54A:  MOVLB  0
0F54C:  GOTO   F62A
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
0F550:  MOVLW  62
0F552:  MOVWF  FF6
0F554:  MOVLW  09
0F556:  MOVWF  FF7
0F558:  MOVLW  00
0F55A:  MOVWF  FF8
0F55C:  CALL   202E
....................             smf_header_address_start = SMF_IV2_HEADER_HEADER_START_ADDRESS;
0F560:  MOVLW  07
0F562:  MOVLB  1
0F564:  MOVWF  xB2
0F566:  MOVLW  90
0F568:  MOVWF  xB1
0F56A:  MOVLW  60
0F56C:  MOVWF  xB0
0F56E:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_HEADER_DATA_START_ADDRESS;
0F570:  MOVLW  07
0F572:  MOVWF  xB6
0F574:  MOVLW  90
0F576:  MOVWF  xB5
0F578:  MOVLW  70
0F57A:  MOVWF  xB4
0F57C:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_HEADER_DATA_END_ADDRESS;
0F57E:  MOVLW  07
0F580:  MOVWF  xBA
0F582:  MOVLW  9A
0F584:  MOVWF  xB9
0F586:  MOVLW  6F
0F588:  MOVWF  xB8
0F58A:  SETF   xB7
....................             break;
0F58C:  MOVLB  0
0F58E:  GOTO   F62A
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
0F592:  MOVLW  7E
0F594:  MOVWF  FF6
0F596:  MOVLW  09
0F598:  MOVWF  FF7
0F59A:  MOVLW  00
0F59C:  MOVWF  FF8
0F59E:  CALL   202E
....................             smf_header_address_start = SMF_IV2_DATA_HEADER_START_ADDRESS;
0F5A2:  MOVLW  07
0F5A4:  MOVLB  1
0F5A6:  MOVWF  xB2
0F5A8:  MOVLW  9A
0F5AA:  MOVWF  xB1
0F5AC:  MOVLW  70
0F5AE:  MOVWF  xB0
0F5B0:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_DATA_DATA_START_ADDRESS;
0F5B2:  MOVLW  07
0F5B4:  MOVWF  xB6
0F5B6:  MOVLW  9A
0F5B8:  MOVWF  xB5
0F5BA:  MOVLW  80
0F5BC:  MOVWF  xB4
0F5BE:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_DATA_DATA_END_ADDRESS;
0F5C0:  MOVLW  07
0F5C2:  MOVWF  xBA
0F5C4:  MOVLW  DA
0F5C6:  MOVWF  xB9
0F5C8:  MOVLW  7F
0F5CA:  MOVWF  xB8
0F5CC:  SETF   xB7
....................             break;
0F5CE:  MOVLB  0
0F5D0:  GOTO   F62A
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
0F5D4:  MOVLB  1
0F5D6:  MOVF   xA1,W
0F5D8:  MOVWF  FE9
0F5DA:  MOVF   xA2,W
0F5DC:  MOVWF  FEA
0F5DE:  MOVFF  FEF,210
0F5E2:  MOVLW  98
0F5E4:  MOVWF  FF6
0F5E6:  MOVLW  09
0F5E8:  MOVWF  FF7
0F5EA:  MOVLW  00
0F5EC:  MOVWF  FF8
0F5EE:  MOVLW  1A
0F5F0:  MOVLB  9
0F5F2:  MOVWF  xC2
0F5F4:  MOVLB  0
0F5F6:  CALL   2064
0F5FA:  MOVFF  210,211
0F5FE:  MOVLW  18
0F600:  MOVLB  2
0F602:  MOVWF  x12
0F604:  MOVLB  0
0F606:  GOTO   EBF4
0F60A:  MOVLW  0D
0F60C:  BTFSS  FA6.6
0F60E:  GOTO   F60C
0F612:  MOVLB  E
0F614:  MOVWF  xF9
0F616:  MOVLW  0A
0F618:  MOVLB  0
0F61A:  BTFSS  FA6.6
0F61C:  GOTO   F61A
0F620:  MOVLB  E
0F622:  MOVWF  xF9
....................             return;
0F624:  MOVLB  0
0F626:  GOTO   FF96
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
0F62A:  MOVLW  B8
0F62C:  MOVWF  FF6
0F62E:  MOVLW  09
0F630:  MOVWF  FF7
0F632:  MOVLW  00
0F634:  MOVWF  FF8
0F636:  CALL   202E
....................     fprintf(PC, "\tParam\tData\r\n");
0F63A:  MOVLW  CA
0F63C:  MOVWF  FF6
0F63E:  MOVLW  09
0F640:  MOVWF  FF7
0F642:  MOVLW  00
0F644:  MOVWF  FF8
0F646:  CALL   202E
....................     fprintf(PC, "\t-----\t----------\r\n");
0F64A:  MOVLW  D8
0F64C:  MOVWF  FF6
0F64E:  MOVLW  09
0F650:  MOVWF  FF7
0F652:  MOVLW  00
0F654:  MOVWF  FF8
0F656:  CALL   202E
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
0F65A:  MOVLW  EC
0F65C:  MOVWF  FF6
0F65E:  MOVLW  09
0F660:  MOVWF  FF7
0F662:  MOVLW  00
0F664:  MOVWF  FF8
0F666:  MOVLW  09
0F668:  MOVLB  9
0F66A:  MOVWF  xC2
0F66C:  MOVLB  0
0F66E:  CALL   2064
0F672:  MOVFF  1BE,9E8
0F676:  MOVLW  37
0F678:  MOVLB  9
0F67A:  MOVWF  xE9
0F67C:  MOVLB  0
0F67E:  CALL   2294
0F682:  MOVFF  1BD,9E8
0F686:  MOVLW  37
0F688:  MOVLB  9
0F68A:  MOVWF  xE9
0F68C:  MOVLB  0
0F68E:  CALL   2294
0F692:  MOVFF  1BC,9E8
0F696:  MOVLW  37
0F698:  MOVLB  9
0F69A:  MOVWF  xE9
0F69C:  MOVLB  0
0F69E:  CALL   2294
0F6A2:  MOVFF  1BB,9E8
0F6A6:  MOVLW  37
0F6A8:  MOVLB  9
0F6AA:  MOVWF  xE9
0F6AC:  MOVLB  0
0F6AE:  CALL   2294
0F6B2:  MOVLW  0D
0F6B4:  BTFSS  FA6.6
0F6B6:  GOTO   F6B4
0F6BA:  MOVLB  E
0F6BC:  MOVWF  xF9
0F6BE:  MOVLW  0A
0F6C0:  MOVLB  0
0F6C2:  BTFSS  FA6.6
0F6C4:  GOTO   F6C2
0F6C8:  MOVLB  E
0F6CA:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
0F6CC:  MOVLW  FE
0F6CE:  MOVWF  FF6
0F6D0:  MOVLW  09
0F6D2:  MOVWF  FF7
0F6D4:  MOVLW  00
0F6D6:  MOVWF  FF8
0F6D8:  MOVLW  07
0F6DA:  MOVLB  9
0F6DC:  MOVWF  xC2
0F6DE:  MOVLB  0
0F6E0:  CALL   2064
0F6E4:  MOVFF  1C2,9E8
0F6E8:  MOVLW  37
0F6EA:  MOVLB  9
0F6EC:  MOVWF  xE9
0F6EE:  MOVLB  0
0F6F0:  CALL   2294
0F6F4:  MOVFF  1C1,9E8
0F6F8:  MOVLW  37
0F6FA:  MOVLB  9
0F6FC:  MOVWF  xE9
0F6FE:  MOVLB  0
0F700:  CALL   2294
0F704:  MOVFF  1C0,9E8
0F708:  MOVLW  37
0F70A:  MOVLB  9
0F70C:  MOVWF  xE9
0F70E:  MOVLB  0
0F710:  CALL   2294
0F714:  MOVFF  1BF,9E8
0F718:  MOVLW  37
0F71A:  MOVLB  9
0F71C:  MOVWF  xE9
0F71E:  MOVLB  0
0F720:  CALL   2294
0F724:  MOVLW  0D
0F726:  BTFSS  FA6.6
0F728:  GOTO   F726
0F72C:  MOVLB  E
0F72E:  MOVWF  xF9
0F730:  MOVLW  0A
0F732:  MOVLB  0
0F734:  BTFSS  FA6.6
0F736:  GOTO   F734
0F73A:  MOVLB  E
0F73C:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
0F73E:  MOVLW  0E
0F740:  MOVWF  FF6
0F742:  MOVLW  0A
0F744:  MOVWF  FF7
0F746:  MOVLW  00
0F748:  MOVWF  FF8
0F74A:  MOVLW  07
0F74C:  MOVLB  9
0F74E:  MOVWF  xC2
0F750:  MOVLB  0
0F752:  CALL   2064
0F756:  MOVFF  1A6,9E8
0F75A:  MOVLW  37
0F75C:  MOVLB  9
0F75E:  MOVWF  xE9
0F760:  MOVLB  0
0F762:  CALL   2294
0F766:  MOVFF  1A5,9E8
0F76A:  MOVLW  37
0F76C:  MOVLB  9
0F76E:  MOVWF  xE9
0F770:  MOVLB  0
0F772:  CALL   2294
0F776:  MOVFF  1A4,9E8
0F77A:  MOVLW  37
0F77C:  MOVLB  9
0F77E:  MOVWF  xE9
0F780:  MOVLB  0
0F782:  CALL   2294
0F786:  MOVFF  1A3,9E8
0F78A:  MOVLW  37
0F78C:  MOVLB  9
0F78E:  MOVWF  xE9
0F790:  MOVLB  0
0F792:  CALL   2294
0F796:  MOVLW  0D
0F798:  BTFSS  FA6.6
0F79A:  GOTO   F798
0F79E:  MOVLB  E
0F7A0:  MOVWF  xF9
0F7A2:  MOVLW  0A
0F7A4:  MOVLB  0
0F7A6:  BTFSS  FA6.6
0F7A8:  GOTO   F7A6
0F7AC:  MOVLB  E
0F7AE:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
0F7B0:  MOVLW  1E
0F7B2:  MOVWF  FF6
0F7B4:  MOVLW  0A
0F7B6:  MOVWF  FF7
0F7B8:  MOVLW  00
0F7BA:  MOVWF  FF8
0F7BC:  MOVLW  08
0F7BE:  MOVLB  9
0F7C0:  MOVWF  xC2
0F7C2:  MOVLB  0
0F7C4:  CALL   2064
0F7C8:  MOVFF  1AA,9E8
0F7CC:  MOVLW  37
0F7CE:  MOVLB  9
0F7D0:  MOVWF  xE9
0F7D2:  MOVLB  0
0F7D4:  CALL   2294
0F7D8:  MOVFF  1A9,9E8
0F7DC:  MOVLW  37
0F7DE:  MOVLB  9
0F7E0:  MOVWF  xE9
0F7E2:  MOVLB  0
0F7E4:  CALL   2294
0F7E8:  MOVFF  1A8,9E8
0F7EC:  MOVLW  37
0F7EE:  MOVLB  9
0F7F0:  MOVWF  xE9
0F7F2:  MOVLB  0
0F7F4:  CALL   2294
0F7F8:  MOVFF  1A7,9E8
0F7FC:  MOVLW  37
0F7FE:  MOVLB  9
0F800:  MOVWF  xE9
0F802:  MOVLB  0
0F804:  CALL   2294
0F808:  MOVLW  0D
0F80A:  BTFSS  FA6.6
0F80C:  GOTO   F80A
0F810:  MOVLB  E
0F812:  MOVWF  xF9
0F814:  MOVLW  0A
0F816:  MOVLB  0
0F818:  BTFSS  FA6.6
0F81A:  GOTO   F818
0F81E:  MOVLB  E
0F820:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
0F822:  MOVLW  2E
0F824:  MOVWF  FF6
0F826:  MOVLW  0A
0F828:  MOVWF  FF7
0F82A:  MOVLW  00
0F82C:  MOVWF  FF8
0F82E:  MOVLB  0
0F830:  CALL   202E
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
0F834:  MOVLW  42
0F836:  MOVWF  FF6
0F838:  MOVLW  0A
0F83A:  MOVWF  FF7
0F83C:  MOVLW  00
0F83E:  MOVWF  FF8
0F840:  CALL   202E
....................     fprintf(PC, "\tParam\tData\r\n");
0F844:  MOVLW  52
0F846:  MOVWF  FF6
0F848:  MOVLW  0A
0F84A:  MOVWF  FF7
0F84C:  MOVLW  00
0F84E:  MOVWF  FF8
0F850:  CALL   202E
....................     fprintf(PC, "\t-----\t----------\r\n");
0F854:  MOVLW  60
0F856:  MOVWF  FF6
0F858:  MOVLW  0A
0F85A:  MOVWF  FF7
0F85C:  MOVLW  00
0F85E:  MOVWF  FF8
0F860:  CALL   202E
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_data_address_start);
0F864:  MOVLW  74
0F866:  MOVWF  FF6
0F868:  MOVLW  0A
0F86A:  MOVWF  FF7
0F86C:  MOVLW  00
0F86E:  MOVWF  FF8
0F870:  MOVLW  09
0F872:  MOVLB  9
0F874:  MOVWF  xC2
0F876:  MOVLB  0
0F878:  CALL   2064
0F87C:  MOVFF  1B6,9E8
0F880:  MOVLW  37
0F882:  MOVLB  9
0F884:  MOVWF  xE9
0F886:  MOVLB  0
0F888:  CALL   2294
0F88C:  MOVFF  1B5,9E8
0F890:  MOVLW  37
0F892:  MOVLB  9
0F894:  MOVWF  xE9
0F896:  MOVLB  0
0F898:  CALL   2294
0F89C:  MOVFF  1B4,9E8
0F8A0:  MOVLW  37
0F8A2:  MOVLB  9
0F8A4:  MOVWF  xE9
0F8A6:  MOVLB  0
0F8A8:  CALL   2294
0F8AC:  MOVFF  1B3,9E8
0F8B0:  MOVLW  37
0F8B2:  MOVLB  9
0F8B4:  MOVWF  xE9
0F8B6:  MOVLB  0
0F8B8:  CALL   2294
0F8BC:  MOVLW  0D
0F8BE:  BTFSS  FA6.6
0F8C0:  GOTO   F8BE
0F8C4:  MOVLB  E
0F8C6:  MOVWF  xF9
0F8C8:  MOVLW  0A
0F8CA:  MOVLB  0
0F8CC:  BTFSS  FA6.6
0F8CE:  GOTO   F8CC
0F8D2:  MOVLB  E
0F8D4:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_data_address_end);
0F8D6:  MOVLW  86
0F8D8:  MOVWF  FF6
0F8DA:  MOVLW  0A
0F8DC:  MOVWF  FF7
0F8DE:  MOVLW  00
0F8E0:  MOVWF  FF8
0F8E2:  MOVLW  07
0F8E4:  MOVLB  9
0F8E6:  MOVWF  xC2
0F8E8:  MOVLB  0
0F8EA:  CALL   2064
0F8EE:  MOVFF  1BA,9E8
0F8F2:  MOVLW  37
0F8F4:  MOVLB  9
0F8F6:  MOVWF  xE9
0F8F8:  MOVLB  0
0F8FA:  CALL   2294
0F8FE:  MOVFF  1B9,9E8
0F902:  MOVLW  37
0F904:  MOVLB  9
0F906:  MOVWF  xE9
0F908:  MOVLB  0
0F90A:  CALL   2294
0F90E:  MOVFF  1B8,9E8
0F912:  MOVLW  37
0F914:  MOVLB  9
0F916:  MOVWF  xE9
0F918:  MOVLB  0
0F91A:  CALL   2294
0F91E:  MOVFF  1B7,9E8
0F922:  MOVLW  37
0F924:  MOVLB  9
0F926:  MOVWF  xE9
0F928:  MOVLB  0
0F92A:  CALL   2294
0F92E:  MOVLW  0D
0F930:  BTFSS  FA6.6
0F932:  GOTO   F930
0F936:  MOVLB  E
0F938:  MOVWF  xF9
0F93A:  MOVLW  0A
0F93C:  MOVLB  0
0F93E:  BTFSS  FA6.6
0F940:  GOTO   F93E
0F944:  MOVLB  E
0F946:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
0F948:  MOVLW  96
0F94A:  MOVWF  FF6
0F94C:  MOVLW  0A
0F94E:  MOVWF  FF7
0F950:  MOVLW  00
0F952:  MOVWF  FF8
0F954:  MOVLB  0
0F956:  CALL   202E
.................... 
.................... 
....................     // Erase Area
....................     fprintf(PC, "ERASE SMF AREA\r\n");
0F95A:  MOVLW  AA
0F95C:  MOVWF  FF6
0F95E:  MOVLW  0A
0F960:  MOVWF  FF7
0F962:  MOVLW  00
0F964:  MOVWF  FF8
0F966:  CALL   202E
....................     for ( unsigned int32 address = smf_data_address_start; address < smf_data_address_end; address += SUBSECTOR_SIZE )
0F96A:  MOVFF  1B6,1C6
0F96E:  MOVFF  1B5,1C5
0F972:  MOVFF  1B4,1C4
0F976:  MOVFF  1B3,1C3
0F97A:  MOVLB  1
0F97C:  MOVF   xC6,W
0F97E:  SUBWF  xBA,W
0F980:  BTFSC  FD8.0
0F982:  BRA    F98A
0F984:  MOVLB  0
0F986:  GOTO   FA0C
0F98A:  MOVLB  0
0F98C:  BTFSS  FD8.2
0F98E:  GOTO   F9D4
0F992:  MOVLB  1
0F994:  MOVF   xC5,W
0F996:  SUBWF  xB9,W
0F998:  BTFSC  FD8.0
0F99A:  BRA    F9A2
0F99C:  MOVLB  0
0F99E:  GOTO   FA0C
0F9A2:  MOVLB  0
0F9A4:  BTFSS  FD8.2
0F9A6:  GOTO   F9D4
0F9AA:  MOVLB  1
0F9AC:  MOVF   xC4,W
0F9AE:  SUBWF  xB8,W
0F9B0:  BTFSC  FD8.0
0F9B2:  BRA    F9BA
0F9B4:  MOVLB  0
0F9B6:  GOTO   FA0C
0F9BA:  MOVLB  0
0F9BC:  BTFSS  FD8.2
0F9BE:  GOTO   F9D4
0F9C2:  MOVLB  1
0F9C4:  MOVF   xB7,W
0F9C6:  SUBWF  xC3,W
0F9C8:  BTFSS  FD8.0
0F9CA:  BRA    F9D2
0F9CC:  MOVLB  0
0F9CE:  GOTO   FA0C
0F9D2:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
0F9D4:  MOVFF  119,A07
0F9D8:  MOVFF  118,A06
0F9DC:  MOVFF  117,A05
0F9E0:  MOVFF  116,A04
0F9E4:  MOVFF  1C6,A0B
0F9E8:  MOVFF  1C5,A0A
0F9EC:  MOVFF  1C4,A09
0F9F0:  MOVFF  1C3,A08
0F9F4:  CALL   4A8C
0F9F8:  MOVLW  10
0F9FA:  MOVLB  1
0F9FC:  ADDWF  xC4,F
0F9FE:  MOVLW  00
0FA00:  ADDWFC xC5,F
0FA02:  MOVLW  00
0FA04:  ADDWFC xC6,F
0FA06:  MOVLB  0
0FA08:  GOTO   F97A
....................     }
....................     fprintf(PC, "\tERASE SMF AREA DONE\r\n");
0FA0C:  MOVLW  BC
0FA0E:  MOVWF  FF6
0FA10:  MOVLW  0A
0FA12:  MOVWF  FF7
0FA14:  MOVLW  00
0FA16:  MOVWF  FF8
0FA18:  CALL   202E
.................... 
....................     // Write Data
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address = smf_data_address_start;
....................     unsigned int32 misf_read_address = misf_write_src;
0FA1C:  MOVFF  1B6,20A
0FA20:  MOVFF  1B5,209
0FA24:  MOVFF  1B4,208
0FA28:  MOVFF  1B3,207
0FA2C:  MOVFF  1A6,20E
0FA30:  MOVFF  1A5,20D
0FA34:  MOVFF  1A4,20C
0FA38:  MOVFF  1A3,20B
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
0FA3C:  MOVLW  D4
0FA3E:  MOVWF  FF6
0FA40:  MOVLW  0A
0FA42:  MOVWF  FF7
0FA44:  MOVLW  00
0FA46:  MOVWF  FF8
0FA48:  CALL   202E
....................     while (misf_write_size > 0)
0FA4C:  MOVLB  1
0FA4E:  MOVF   xA7,F
0FA50:  BTFSC  FD8.2
0FA52:  BRA    FA5A
0FA54:  MOVLB  0
0FA56:  GOTO   FA8C
0FA5A:  MOVLB  0
0FA5C:  MOVLB  1
0FA5E:  MOVF   xA8,F
0FA60:  BTFSC  FD8.2
0FA62:  BRA    FA6A
0FA64:  MOVLB  0
0FA66:  GOTO   FA8C
0FA6A:  MOVLB  0
0FA6C:  MOVLB  1
0FA6E:  MOVF   xA9,F
0FA70:  BTFSC  FD8.2
0FA72:  BRA    FA7A
0FA74:  MOVLB  0
0FA76:  GOTO   FA8C
0FA7A:  MOVLB  0
0FA7C:  MOVLB  1
0FA7E:  MOVF   xAA,F
0FA80:  BTFSS  FD8.2
0FA82:  BRA    FA8A
0FA84:  MOVLB  0
0FA86:  GOTO   FDB4
0FA8A:  MOVLB  0
....................     {
....................         memset(buffer, 0x11, PACKET_SIZE);
0FA8C:  MOVLW  01
0FA8E:  MOVWF  FEA
0FA90:  MOVLW  C7
0FA92:  MOVWF  FE9
0FA94:  MOVLW  11
0FA96:  MOVWF  00
0FA98:  CLRF   02
0FA9A:  MOVLW  40
0FA9C:  MOVWF  01
0FA9E:  CALL   209E
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
0FAA2:  MOVFF  115,AED
0FAA6:  MOVFF  114,AEC
0FAAA:  MOVFF  113,AEB
0FAAE:  MOVFF  112,AEA
0FAB2:  MOVFF  20E,AF1
0FAB6:  MOVFF  20D,AF0
0FABA:  MOVFF  20C,AEF
0FABE:  MOVFF  20B,AEE
0FAC2:  MOVLW  01
0FAC4:  MOVLB  A
0FAC6:  MOVWF  xF3
0FAC8:  MOVLW  C7
0FACA:  MOVWF  xF2
0FACC:  CLRF   xF7
0FACE:  CLRF   xF6
0FAD0:  CLRF   xF5
0FAD2:  MOVLW  40
0FAD4:  MOVWF  xF4
0FAD6:  MOVLB  0
0FAD8:  CALL   2C1C
....................         fprintf(PC," ");
0FADC:  MOVLW  20
0FADE:  BTFSS  FA6.6
0FAE0:  GOTO   FADE
0FAE4:  MOVLB  E
0FAE6:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
0FAE8:  MOVFF  119,AED
0FAEC:  MOVFF  118,AEC
0FAF0:  MOVFF  117,AEB
0FAF4:  MOVFF  116,AEA
0FAF8:  MOVFF  20A,AF1
0FAFC:  MOVFF  209,AF0
0FB00:  MOVFF  208,AEF
0FB04:  MOVFF  207,AEE
0FB08:  MOVLW  01
0FB0A:  MOVLB  A
0FB0C:  MOVWF  xF3
0FB0E:  MOVLW  C7
0FB10:  MOVWF  xF2
0FB12:  CLRF   xF5
0FB14:  MOVLW  40
0FB16:  MOVWF  xF4
0FB18:  MOVLB  0
0FB1A:  CALL   3C88
....................         fprintf(PC,".");
0FB1E:  MOVLW  2E
0FB20:  BTFSS  FA6.6
0FB22:  GOTO   FB20
0FB26:  MOVLB  E
0FB28:  MOVWF  xF9
....................         // counter update
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
0FB2A:  MOVLB  1
0FB2C:  MOVF   xA1,W
0FB2E:  MOVWF  FE9
0FB30:  MOVF   xA2,W
0FB32:  MOVWF  FEA
0FB34:  MOVF   FEF,W
0FB36:  MULLW  0A
0FB38:  MOVF   FF3,W
0FB3A:  MOVLB  2
0FB3C:  CLRF   x11
0FB3E:  MOVWF  x10
0FB40:  MOVLW  04
0FB42:  ADDWF  x10,W
0FB44:  MOVWF  01
0FB46:  MOVLW  00
0FB48:  ADDWFC x11,W
0FB4A:  MOVWF  03
0FB4C:  MOVF   01,W
0FB4E:  ADDLW  22
0FB50:  MOVWF  FE9
0FB52:  MOVLW  01
0FB54:  ADDWFC 03,W
0FB56:  MOVWF  FEA
0FB58:  MOVFF  FEF,210
0FB5C:  MOVFF  FEC,211
0FB60:  MOVFF  FEC,212
0FB64:  MOVFF  FEC,213
0FB68:  MOVF   FED,F
0FB6A:  MOVF   FED,F
0FB6C:  MOVF   FED,F
0FB6E:  MOVF   x13,F
0FB70:  BTFSC  FD8.2
0FB72:  BRA    FB7A
0FB74:  MOVLB  0
0FB76:  GOTO   FBAE
0FB7A:  MOVLB  0
0FB7C:  MOVLB  2
0FB7E:  MOVF   x12,F
0FB80:  BTFSC  FD8.2
0FB82:  BRA    FB8A
0FB84:  MOVLB  0
0FB86:  GOTO   FBAE
0FB8A:  MOVLB  0
0FB8C:  MOVLB  2
0FB8E:  MOVF   x11,F
0FB90:  BTFSC  FD8.2
0FB92:  BRA    FB9A
0FB94:  MOVLB  0
0FB96:  GOTO   FBAE
0FB9A:  MOVLB  0
0FB9C:  MOVLB  2
0FB9E:  MOVF   x10,W
0FBA0:  SUBLW  3F
0FBA2:  BTFSS  FD8.0
0FBA4:  BRA    FBAC
0FBA6:  MOVLB  0
0FBA8:  GOTO   FC16
0FBAC:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
0FBAE:  MOVLB  1
0FBB0:  MOVF   xA1,W
0FBB2:  MOVWF  FE9
0FBB4:  MOVF   xA2,W
0FBB6:  MOVWF  FEA
0FBB8:  MOVF   FEF,W
0FBBA:  MULLW  0A
0FBBC:  MOVF   FF3,W
0FBBE:  MOVLB  2
0FBC0:  CLRF   x11
0FBC2:  MOVWF  x10
0FBC4:  MOVLW  04
0FBC6:  ADDWF  x10,W
0FBC8:  MOVWF  01
0FBCA:  MOVLW  00
0FBCC:  ADDWFC x11,W
0FBCE:  MOVWF  03
0FBD0:  MOVF   01,W
0FBD2:  ADDLW  22
0FBD4:  MOVWF  FE9
0FBD6:  MOVLW  01
0FBD8:  ADDWFC 03,W
0FBDA:  MOVWF  FEA
0FBDC:  MOVLW  40
0FBDE:  SUBWF  FEF,W
0FBE0:  MOVWF  00
0FBE2:  MOVLW  00
0FBE4:  SUBWFB FEC,W
0FBE6:  MOVWF  01
0FBE8:  MOVLW  00
0FBEA:  SUBWFB FEC,W
0FBEC:  MOVWF  02
0FBEE:  MOVLW  00
0FBF0:  SUBWFB FEC,W
0FBF2:  MOVWF  03
0FBF4:  MOVF   FED,F
0FBF6:  MOVF   FED,F
0FBF8:  MOVF   FED,F
0FBFA:  MOVFF  00,FEF
0FBFE:  MOVFF  01,FEC
0FC02:  MOVFF  02,FEC
0FC06:  MOVFF  03,FEC
0FC0A:  MOVF   FED,F
0FC0C:  MOVF   FED,F
0FC0E:  MOVF   FED,F
0FC10:  MOVLB  0
....................         }else{
0FC12:  GOTO   FD28
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
0FC16:  MOVLB  1
0FC18:  MOVF   xA1,W
0FC1A:  MOVWF  FE9
0FC1C:  MOVF   xA2,W
0FC1E:  MOVWF  FEA
0FC20:  MOVF   FEF,W
0FC22:  MULLW  0A
0FC24:  MOVF   FF3,W
0FC26:  MOVLB  2
0FC28:  CLRF   x11
0FC2A:  MOVWF  x10
0FC2C:  MOVLW  04
0FC2E:  ADDWF  x10,W
0FC30:  MOVWF  01
0FC32:  MOVLW  00
0FC34:  ADDWFC x11,W
0FC36:  MOVWF  03
0FC38:  MOVF   01,W
0FC3A:  ADDLW  22
0FC3C:  MOVWF  FE9
0FC3E:  MOVLW  01
0FC40:  ADDWFC 03,W
0FC42:  MOVWF  FEA
0FC44:  MOVFF  FEF,00
0FC48:  MOVFF  FEC,01
0FC4C:  MOVFF  FEC,02
0FC50:  MOVFF  FEC,03
0FC54:  MOVF   FED,F
0FC56:  MOVF   FED,F
0FC58:  MOVF   FED,F
0FC5A:  MOVLW  40
0FC5C:  BSF    FD8.0
0FC5E:  SUBFWB 00,W
0FC60:  MOVWF  x0F
0FC62:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
0FC64:  MOVLB  1
0FC66:  MOVF   xA1,W
0FC68:  MOVWF  FE9
0FC6A:  MOVF   xA2,W
0FC6C:  MOVWF  FEA
0FC6E:  MOVF   FEF,W
0FC70:  MULLW  0A
0FC72:  MOVF   FF3,W
0FC74:  MOVLB  2
0FC76:  CLRF   x11
0FC78:  MOVWF  x10
0FC7A:  MOVLW  04
0FC7C:  ADDWF  x10,W
0FC7E:  MOVWF  01
0FC80:  MOVLW  00
0FC82:  ADDWFC x11,W
0FC84:  MOVWF  03
0FC86:  MOVF   01,W
0FC88:  ADDLW  22
0FC8A:  MOVWF  FE9
0FC8C:  MOVLW  01
0FC8E:  ADDWFC 03,W
0FC90:  MOVWF  FEA
0FC92:  CLRF   FEF
0FC94:  CLRF   FEC
0FC96:  CLRF   FEC
0FC98:  CLRF   FEC
0FC9A:  MOVF   FED,F
0FC9C:  MOVF   FED,F
0FC9E:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
0FCA0:  MOVLB  1
0FCA2:  MOVF   xA1,W
0FCA4:  MOVWF  FE9
0FCA6:  MOVF   xA2,W
0FCA8:  MOVWF  FEA
0FCAA:  MOVF   FEF,W
0FCAC:  MULLW  0A
0FCAE:  MOVF   FF3,W
0FCB0:  MOVLB  2
0FCB2:  CLRF   x11
0FCB4:  MOVWF  x10
0FCB6:  MOVLW  22
0FCB8:  ADDWF  x10,W
0FCBA:  MOVWF  FE9
0FCBC:  MOVLW  01
0FCBE:  ADDWFC x11,W
0FCC0:  MOVWF  FEA
0FCC2:  MOVF   x0F,W
0FCC4:  ADDWF  FEF,W
0FCC6:  MOVWF  00
0FCC8:  MOVLW  00
0FCCA:  ADDWFC FEC,W
0FCCC:  MOVWF  01
0FCCE:  MOVLW  00
0FCD0:  ADDWFC FEC,W
0FCD2:  MOVWF  02
0FCD4:  MOVLW  00
0FCD6:  ADDWFC FEC,W
0FCD8:  MOVWF  03
0FCDA:  MOVF   FED,F
0FCDC:  MOVF   FED,F
0FCDE:  MOVF   FED,F
0FCE0:  MOVFF  00,FEF
0FCE4:  MOVFF  01,FEC
0FCE8:  MOVFF  02,FEC
0FCEC:  MOVFF  03,FEC
0FCF0:  MOVF   FED,F
0FCF2:  MOVF   FED,F
0FCF4:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
0FCF6:  MOVLB  1
0FCF8:  MOVF   xA1,W
0FCFA:  MOVWF  FE9
0FCFC:  MOVF   xA2,W
0FCFE:  MOVWF  FEA
0FD00:  MOVF   FEF,W
0FD02:  MULLW  0A
0FD04:  MOVF   FF3,W
0FD06:  MOVLB  2
0FD08:  CLRF   x11
0FD0A:  MOVWF  x10
0FD0C:  MOVLW  08
0FD0E:  ADDWF  x10,W
0FD10:  MOVWF  01
0FD12:  MOVLW  00
0FD14:  ADDWFC x11,W
0FD16:  MOVWF  03
0FD18:  MOVF   01,W
0FD1A:  ADDLW  22
0FD1C:  MOVWF  FE9
0FD1E:  MOVLW  01
0FD20:  ADDWFC 03,W
0FD22:  MOVWF  FEA
0FD24:  CLRF   FEF
0FD26:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
0FD28:  MOVLW  40
0FD2A:  MOVLB  2
0FD2C:  ADDWF  x0B,F
0FD2E:  MOVLW  00
0FD30:  ADDWFC x0C,F
0FD32:  MOVLW  00
0FD34:  ADDWFC x0D,F
0FD36:  MOVLW  00
0FD38:  ADDWFC x0E,F
....................         smf_write_address += PACKET_SIZE;
0FD3A:  MOVLW  40
0FD3C:  ADDWF  x07,F
0FD3E:  MOVLW  00
0FD40:  ADDWFC x08,F
0FD42:  MOVLW  00
0FD44:  ADDWFC x09,F
0FD46:  MOVLW  00
0FD48:  ADDWFC x0A,F
....................         if (misf_write_size > PACKET_SIZE){
0FD4A:  MOVLB  1
0FD4C:  MOVF   xAA,F
0FD4E:  BTFSC  FD8.2
0FD50:  BRA    FD58
0FD52:  MOVLB  0
0FD54:  GOTO   FD8C
0FD58:  MOVLB  0
0FD5A:  MOVLB  1
0FD5C:  MOVF   xA9,F
0FD5E:  BTFSC  FD8.2
0FD60:  BRA    FD68
0FD62:  MOVLB  0
0FD64:  GOTO   FD8C
0FD68:  MOVLB  0
0FD6A:  MOVLB  1
0FD6C:  MOVF   xA8,F
0FD6E:  BTFSC  FD8.2
0FD70:  BRA    FD78
0FD72:  MOVLB  0
0FD74:  GOTO   FD8C
0FD78:  MOVLB  0
0FD7A:  MOVLB  1
0FD7C:  MOVF   xA7,W
0FD7E:  SUBLW  40
0FD80:  BTFSS  FD8.0
0FD82:  BRA    FD8A
0FD84:  MOVLB  0
0FD86:  GOTO   FDA4
0FD8A:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
0FD8C:  MOVLW  40
0FD8E:  MOVLB  1
0FD90:  SUBWF  xA7,F
0FD92:  MOVLW  00
0FD94:  SUBWFB xA8,F
0FD96:  MOVLW  00
0FD98:  SUBWFB xA9,F
0FD9A:  MOVLW  00
0FD9C:  SUBWFB xAA,F
0FD9E:  MOVLB  0
....................         }else{
0FDA0:  GOTO   FDB0
....................             misf_write_size = 0;
0FDA4:  MOVLB  1
0FDA6:  CLRF   xAA
0FDA8:  CLRF   xA9
0FDAA:  CLRF   xA8
0FDAC:  CLRF   xA7
0FDAE:  MOVLB  0
....................         }
0FDB0:  GOTO   FA4C
....................         
....................     }
....................     fprintf(PC, "\r\n");
0FDB4:  MOVLW  0D
0FDB6:  BTFSS  FA6.6
0FDB8:  GOTO   FDB6
0FDBC:  MOVLB  E
0FDBE:  MOVWF  xF9
0FDC0:  MOVLW  0A
0FDC2:  MOVLB  0
0FDC4:  BTFSS  FA6.6
0FDC6:  GOTO   FDC4
0FDCA:  MOVLB  E
0FDCC:  MOVWF  xF9
.................... 
....................     // Update SMF Counter Status
....................     fprintf(PC, "UPDATE SMF COUNTER STATUS\r\n");
0FDCE:  MOVLW  E8
0FDD0:  MOVWF  FF6
0FDD2:  MOVLW  0A
0FDD4:  MOVWF  FF7
0FDD6:  MOVLW  00
0FDD8:  MOVWF  FF8
0FDDA:  MOVLB  0
0FDDC:  CALL   202E
....................     subsector_4kByte_erase(SMF, smf_header_address_start);
0FDE0:  MOVFF  119,A07
0FDE4:  MOVFF  118,A06
0FDE8:  MOVFF  117,A05
0FDEC:  MOVFF  116,A04
0FDF0:  MOVFF  1B2,A0B
0FDF4:  MOVFF  1B1,A0A
0FDF8:  MOVFF  1B0,A09
0FDFC:  MOVFF  1AF,A08
0FE00:  CALL   4A8C
....................     write_data_byte(SMF, smf_header_address_start + 0, (used_size >> 24)  & 0xFF);
0FE04:  MOVFF  1AE,211
0FE08:  MOVLB  2
0FE0A:  CLRF   x12
0FE0C:  CLRF   x13
0FE0E:  CLRF   x14
0FE10:  CLRF   x12
0FE12:  CLRF   x13
0FE14:  CLRF   x14
0FE16:  MOVFF  119,21C
0FE1A:  MOVFF  118,21B
0FE1E:  MOVFF  117,21A
0FE22:  MOVFF  116,219
0FE26:  MOVFF  1B2,220
0FE2A:  MOVFF  1B1,21F
0FE2E:  MOVFF  1B0,21E
0FE32:  MOVFF  1AF,21D
0FE36:  MOVFF  211,221
0FE3A:  MOVLB  0
0FE3C:  CALL   ED2C
....................     write_data_byte(SMF, smf_header_address_start + 1, (used_size >> 16)  & 0xFF);
0FE40:  MOVLW  01
0FE42:  MOVLB  1
0FE44:  ADDWF  xAF,W
0FE46:  MOVLB  2
0FE48:  MOVWF  x10
0FE4A:  MOVLW  00
0FE4C:  MOVLB  1
0FE4E:  ADDWFC xB0,W
0FE50:  MOVLB  2
0FE52:  MOVWF  x11
0FE54:  MOVLW  00
0FE56:  MOVLB  1
0FE58:  ADDWFC xB1,W
0FE5A:  MOVLB  2
0FE5C:  MOVWF  x12
0FE5E:  MOVLW  00
0FE60:  MOVLB  1
0FE62:  ADDWFC xB2,W
0FE64:  MOVLB  2
0FE66:  MOVWF  x13
0FE68:  MOVFF  1AD,215
0FE6C:  MOVFF  1AE,216
0FE70:  CLRF   x17
0FE72:  CLRF   x18
0FE74:  CLRF   x16
0FE76:  CLRF   x17
0FE78:  CLRF   x18
0FE7A:  MOVFF  119,21C
0FE7E:  MOVFF  118,21B
0FE82:  MOVFF  117,21A
0FE86:  MOVFF  116,219
0FE8A:  MOVFF  213,220
0FE8E:  MOVFF  212,21F
0FE92:  MOVFF  211,21E
0FE96:  MOVFF  210,21D
0FE9A:  MOVFF  215,221
0FE9E:  MOVLB  0
0FEA0:  CALL   ED2C
....................     write_data_byte(SMF, smf_header_address_start + 2, (used_size >> 8) & 0xFF);
0FEA4:  MOVLW  02
0FEA6:  MOVLB  1
0FEA8:  ADDWF  xAF,W
0FEAA:  MOVLB  2
0FEAC:  MOVWF  x10
0FEAE:  MOVLW  00
0FEB0:  MOVLB  1
0FEB2:  ADDWFC xB0,W
0FEB4:  MOVLB  2
0FEB6:  MOVWF  x11
0FEB8:  MOVLW  00
0FEBA:  MOVLB  1
0FEBC:  ADDWFC xB1,W
0FEBE:  MOVLB  2
0FEC0:  MOVWF  x12
0FEC2:  MOVLW  00
0FEC4:  MOVLB  1
0FEC6:  ADDWFC xB2,W
0FEC8:  MOVLB  2
0FECA:  MOVWF  x13
0FECC:  MOVFF  1AC,215
0FED0:  MOVFF  1AD,216
0FED4:  MOVFF  1AE,217
0FED8:  CLRF   x18
0FEDA:  CLRF   x16
0FEDC:  CLRF   x17
0FEDE:  CLRF   x18
0FEE0:  MOVFF  119,21C
0FEE4:  MOVFF  118,21B
0FEE8:  MOVFF  117,21A
0FEEC:  MOVFF  116,219
0FEF0:  MOVFF  213,220
0FEF4:  MOVFF  212,21F
0FEF8:  MOVFF  211,21E
0FEFC:  MOVFF  210,21D
0FF00:  MOVFF  215,221
0FF04:  MOVLB  0
0FF06:  CALL   ED2C
....................     write_data_byte(SMF, smf_header_address_start + 3, (used_size >> 0) & 0xFF);
0FF0A:  MOVLW  03
0FF0C:  MOVLB  1
0FF0E:  ADDWF  xAF,W
0FF10:  MOVLB  2
0FF12:  MOVWF  x10
0FF14:  MOVLW  00
0FF16:  MOVLB  1
0FF18:  ADDWFC xB0,W
0FF1A:  MOVLB  2
0FF1C:  MOVWF  x11
0FF1E:  MOVLW  00
0FF20:  MOVLB  1
0FF22:  ADDWFC xB1,W
0FF24:  MOVLB  2
0FF26:  MOVWF  x12
0FF28:  MOVLW  00
0FF2A:  MOVLB  1
0FF2C:  ADDWFC xB2,W
0FF2E:  MOVLB  2
0FF30:  MOVWF  x13
0FF32:  MOVFF  1AE,218
0FF36:  MOVFF  1AD,217
0FF3A:  MOVFF  1AC,216
0FF3E:  MOVFF  1AB,215
0FF42:  CLRF   x16
0FF44:  CLRF   x17
0FF46:  CLRF   x18
0FF48:  MOVFF  119,21C
0FF4C:  MOVFF  118,21B
0FF50:  MOVFF  117,21A
0FF54:  MOVFF  116,219
0FF58:  MOVFF  213,220
0FF5C:  MOVFF  212,21F
0FF60:  MOVFF  211,21E
0FF64:  MOVFF  210,21D
0FF68:  MOVFF  215,221
0FF6C:  MOVLB  0
0FF6E:  CALL   ED2C
.................... 
....................     // print_smf_counter_status(&smf_data_table);
....................     // write size area
....................     // smf_write_header(&smf_data_table);
....................     misf_update_address_area();
0FF72:  CALL   4DB0
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
0FF76:  MOVLW  04
0FF78:  MOVWF  FF6
0FF7A:  MOVLW  0B
0FF7C:  MOVWF  FF7
0FF7E:  MOVLW  00
0FF80:  MOVWF  FF8
0FF82:  CALL   202E
....................     fprintf(PC, "_______________________________\r\n\r\n");
0FF86:  MOVLW  2A
0FF88:  MOVWF  FF6
0FF8A:  MOVLW  0B
0FF8C:  MOVWF  FF7
0FF8E:  MOVLW  00
0FF90:  MOVWF  FF8
0FF92:  CALL   202E
0FF96:  GOTO   11136 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
10188:  MOVLW  4E
1018A:  MOVWF  FF6
1018C:  MOVLW  0B
1018E:  MOVWF  FF7
10190:  MOVLW  00
10192:  MOVWF  FF8
10194:  CALL   202E
....................     fprintf(PC, "___Start SMF Read____\r\n");
10198:  MOVLW  68
1019A:  MOVWF  FF6
1019C:  MOVLW  0B
1019E:  MOVWF  FF7
101A0:  MOVLW  00
101A2:  MOVWF  FF8
101A4:  CALL   202E
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
101A8:  MOVLB  1
101AA:  MOVF   xA1,W
101AC:  MOVWF  FE9
101AE:  MOVF   xA2,W
101B0:  MOVWF  FEA
101B2:  MOVFF  FEF,203
101B6:  MOVFF  203,20A
101BA:  MOVLB  0
101BC:  CALL   10000
101C0:  MOVFF  02,03
101C4:  MOVF   01,W
101C6:  MOVWF  FE1
101C8:  MOVFF  03,FE2
101CC:  MOVLW  01
101CE:  MOVWF  FEA
101D0:  MOVLW  E3
101D2:  MOVWF  FE9
101D4:  MOVLW  08
101D6:  MOVWF  01
101D8:  MOVFF  FE6,FEE
101DC:  DECFSZ 01,F
101DE:  GOTO   101D8
101E2:  MOVLW  04
101E4:  MOVLB  1
101E6:  ADDWF  xA1,W
101E8:  MOVWF  FE9
101EA:  MOVLW  00
101EC:  ADDWFC xA2,W
101EE:  MOVWF  FEA
101F0:  MOVFF  FEF,1EB
101F4:  MOVFF  FEC,1EC
101F8:  MOVFF  FEC,1ED
101FC:  MOVFF  FEC,1EE
10200:  MOVF   FED,F
10202:  MOVF   FED,F
10204:  MOVF   FED,F
10206:  MOVLW  08
10208:  ADDWF  xA1,W
1020A:  MOVWF  FE9
1020C:  MOVLW  00
1020E:  ADDWFC xA2,W
10210:  MOVWF  FEA
10212:  MOVFF  FEF,1EF
10216:  MOVFF  FEC,1F0
1021A:  MOVFF  FEC,1F1
1021E:  MOVFF  FEC,1F2
10222:  MOVF   FED,F
10224:  MOVF   FED,F
10226:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
10228:  MOVF   xEE,W
1022A:  SUBWF  xE6,W
1022C:  BTFSC  FD8.0
1022E:  BRA    10236
10230:  MOVLB  0
10232:  GOTO   10280
10236:  MOVLB  0
10238:  BTFSS  FD8.2
1023A:  GOTO   102DA
1023E:  MOVLB  1
10240:  MOVF   xED,W
10242:  SUBWF  xE5,W
10244:  BTFSC  FD8.0
10246:  BRA    1024E
10248:  MOVLB  0
1024A:  GOTO   10280
1024E:  MOVLB  0
10250:  BTFSS  FD8.2
10252:  GOTO   102DA
10256:  MOVLB  1
10258:  MOVF   xEC,W
1025A:  SUBWF  xE4,W
1025C:  BTFSC  FD8.0
1025E:  BRA    10266
10260:  MOVLB  0
10262:  GOTO   10280
10266:  MOVLB  0
10268:  BTFSS  FD8.2
1026A:  GOTO   102DA
1026E:  MOVLB  1
10270:  MOVF   xE3,W
10272:  SUBWF  xEB,W
10274:  BTFSC  FD8.0
10276:  BRA    1027E
10278:  MOVLB  0
1027A:  GOTO   102DA
1027E:  MOVLB  0
10280:  MOVLB  1
10282:  MOVF   xEA,W
10284:  SUBWF  xEE,W
10286:  BTFSC  FD8.0
10288:  BRA    10290
1028A:  MOVLB  0
1028C:  GOTO   103FE
10290:  MOVLB  0
10292:  BTFSS  FD8.2
10294:  GOTO   102DA
10298:  MOVLB  1
1029A:  MOVF   xE9,W
1029C:  SUBWF  xED,W
1029E:  BTFSC  FD8.0
102A0:  BRA    102A8
102A2:  MOVLB  0
102A4:  GOTO   103FE
102A8:  MOVLB  0
102AA:  BTFSS  FD8.2
102AC:  GOTO   102DA
102B0:  MOVLB  1
102B2:  MOVF   xE8,W
102B4:  SUBWF  xEC,W
102B6:  BTFSC  FD8.0
102B8:  BRA    102C0
102BA:  MOVLB  0
102BC:  GOTO   103FE
102C0:  MOVLB  0
102C2:  BTFSS  FD8.2
102C4:  GOTO   102DA
102C8:  MOVLB  1
102CA:  MOVF   xE7,W
102CC:  SUBWF  xEB,W
102CE:  BTFSC  FD8.0
102D0:  BRA    102D8
102D2:  MOVLB  0
102D4:  GOTO   103FE
102D8:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
102DA:  MOVLW  80
102DC:  MOVWF  FF6
102DE:  MOVLW  0B
102E0:  MOVWF  FF7
102E2:  MOVLW  00
102E4:  MOVWF  FF8
102E6:  MOVLW  16
102E8:  MOVLB  9
102EA:  MOVWF  xC2
102EC:  MOVLB  0
102EE:  CALL   2064
102F2:  MOVFF  1EE,9E8
102F6:  MOVLW  37
102F8:  MOVLB  9
102FA:  MOVWF  xE9
102FC:  MOVLB  0
102FE:  CALL   2294
10302:  MOVFF  1ED,9E8
10306:  MOVLW  37
10308:  MOVLB  9
1030A:  MOVWF  xE9
1030C:  MOVLB  0
1030E:  CALL   2294
10312:  MOVFF  1EC,9E8
10316:  MOVLW  37
10318:  MOVLB  9
1031A:  MOVWF  xE9
1031C:  MOVLB  0
1031E:  CALL   2294
10322:  MOVFF  1EB,9E8
10326:  MOVLW  37
10328:  MOVLB  9
1032A:  MOVWF  xE9
1032C:  MOVLB  0
1032E:  CALL   2294
10332:  MOVLW  9B
10334:  MOVWF  FF6
10336:  MOVLW  0B
10338:  MOVWF  FF7
1033A:  MOVLW  00
1033C:  MOVWF  FF8
1033E:  MOVLW  1D
10340:  MOVLB  9
10342:  MOVWF  xC2
10344:  MOVLB  0
10346:  CALL   2064
1034A:  MOVFF  1E6,9E8
1034E:  MOVLW  37
10350:  MOVLB  9
10352:  MOVWF  xE9
10354:  MOVLB  0
10356:  CALL   2294
1035A:  MOVFF  1E5,9E8
1035E:  MOVLW  37
10360:  MOVLB  9
10362:  MOVWF  xE9
10364:  MOVLB  0
10366:  CALL   2294
1036A:  MOVFF  1E4,9E8
1036E:  MOVLW  37
10370:  MOVLB  9
10372:  MOVWF  xE9
10374:  MOVLB  0
10376:  CALL   2294
1037A:  MOVFF  1E3,9E8
1037E:  MOVLW  37
10380:  MOVLB  9
10382:  MOVWF  xE9
10384:  MOVLB  0
10386:  CALL   2294
1038A:  MOVLW  BD
1038C:  MOVWF  FF6
1038E:  MOVLW  0B
10390:  MOVWF  FF7
10392:  MOVLW  00
10394:  MOVWF  FF8
10396:  MOVLW  05
10398:  MOVLB  9
1039A:  MOVWF  xC2
1039C:  MOVLB  0
1039E:  CALL   2064
103A2:  MOVFF  1EA,9E8
103A6:  MOVLW  37
103A8:  MOVLB  9
103AA:  MOVWF  xE9
103AC:  MOVLB  0
103AE:  CALL   2294
103B2:  MOVFF  1E9,9E8
103B6:  MOVLW  37
103B8:  MOVLB  9
103BA:  MOVWF  xE9
103BC:  MOVLB  0
103BE:  CALL   2294
103C2:  MOVFF  1E8,9E8
103C6:  MOVLW  37
103C8:  MOVLB  9
103CA:  MOVWF  xE9
103CC:  MOVLB  0
103CE:  CALL   2294
103D2:  MOVFF  1E7,9E8
103D6:  MOVLW  37
103D8:  MOVLB  9
103DA:  MOVWF  xE9
103DC:  MOVLB  0
103DE:  CALL   2294
103E2:  MOVLW  C7
103E4:  MOVWF  FF6
103E6:  MOVLW  0B
103E8:  MOVWF  FF7
103EA:  MOVLW  00
103EC:  MOVWF  FF8
103EE:  MOVLW  03
103F0:  MOVLB  9
103F2:  MOVWF  xC2
103F4:  MOVLB  0
103F6:  CALL   2064
....................         return;
103FA:  GOTO   108BE
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
103FE:  MOVLB  1
10400:  MOVF   xEB,W
10402:  SUBWF  xE7,W
10404:  MOVWF  xF3
10406:  MOVF   xEC,W
10408:  SUBWFB xE8,W
1040A:  MOVWF  xF4
1040C:  MOVF   xED,W
1040E:  SUBWFB xE9,W
10410:  MOVWF  xF5
10412:  MOVF   xEE,W
10414:  SUBWFB xEA,W
10416:  MOVWF  xF6
....................     if (read_size > mission_remaining) {
10418:  MOVF   xF6,W
1041A:  SUBWF  xF2,W
1041C:  BTFSC  FD8.0
1041E:  BRA    10426
10420:  MOVLB  0
10422:  GOTO   104F8
10426:  MOVLB  0
10428:  BTFSS  FD8.2
1042A:  GOTO   10470
1042E:  MOVLB  1
10430:  MOVF   xF5,W
10432:  SUBWF  xF1,W
10434:  BTFSC  FD8.0
10436:  BRA    1043E
10438:  MOVLB  0
1043A:  GOTO   104F8
1043E:  MOVLB  0
10440:  BTFSS  FD8.2
10442:  GOTO   10470
10446:  MOVLB  1
10448:  MOVF   xF4,W
1044A:  SUBWF  xF0,W
1044C:  BTFSC  FD8.0
1044E:  BRA    10456
10450:  MOVLB  0
10452:  GOTO   104F8
10456:  MOVLB  0
10458:  BTFSS  FD8.2
1045A:  GOTO   10470
1045E:  MOVLB  1
10460:  MOVF   xEF,W
10462:  SUBWF  xF3,W
10464:  BTFSS  FD8.0
10466:  BRA    1046E
10468:  MOVLB  0
1046A:  GOTO   104F8
1046E:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
10470:  MOVLW  CC
10472:  MOVWF  FF6
10474:  MOVLW  0B
10476:  MOVWF  FF7
10478:  MOVLW  00
1047A:  MOVWF  FF8
1047C:  MOVLW  1C
1047E:  MOVLB  9
10480:  MOVWF  xC2
10482:  MOVLB  0
10484:  CALL   2064
10488:  MOVLW  41
1048A:  MOVWF  FE9
1048C:  MOVFF  1F2,209
10490:  MOVFF  1F1,208
10494:  MOVFF  1F0,207
10498:  MOVFF  1EF,206
1049C:  CALL   6024
104A0:  MOVLW  EB
104A2:  MOVWF  FF6
104A4:  MOVLW  0B
104A6:  MOVWF  FF7
104A8:  MOVLW  00
104AA:  MOVWF  FF8
104AC:  MOVLW  04
104AE:  MOVLB  9
104B0:  MOVWF  xC2
104B2:  MOVLB  0
104B4:  CALL   2064
104B8:  MOVLW  41
104BA:  MOVWF  FE9
104BC:  MOVFF  1F6,209
104C0:  MOVFF  1F5,208
104C4:  MOVFF  1F4,207
104C8:  MOVFF  1F3,206
104CC:  CALL   6024
104D0:  MOVLW  F2
104D2:  MOVWF  FF6
104D4:  MOVLW  0B
104D6:  MOVWF  FF7
104D8:  MOVLW  00
104DA:  MOVWF  FF8
104DC:  MOVLW  10
104DE:  MOVLB  9
104E0:  MOVWF  xC2
104E2:  MOVLB  0
104E4:  CALL   2064
....................         read_size = mission_remaining;
104E8:  MOVFF  1F6,1F2
104EC:  MOVFF  1F5,1F1
104F0:  MOVFF  1F4,1F0
104F4:  MOVFF  1F3,1EF
....................     }
....................     if (read_size == 0) {
104F8:  MOVLB  1
104FA:  MOVF   xEF,F
104FC:  BTFSC  FD8.2
104FE:  BRA    10506
10500:  MOVLB  0
10502:  GOTO   1054C
10506:  MOVLB  0
10508:  MOVLB  1
1050A:  MOVF   xF0,F
1050C:  BTFSC  FD8.2
1050E:  BRA    10516
10510:  MOVLB  0
10512:  GOTO   1054C
10516:  MOVLB  0
10518:  MOVLB  1
1051A:  MOVF   xF1,F
1051C:  BTFSC  FD8.2
1051E:  BRA    10526
10520:  MOVLB  0
10522:  GOTO   1054C
10526:  MOVLB  0
10528:  MOVLB  1
1052A:  MOVF   xF2,F
1052C:  BTFSC  FD8.2
1052E:  BRA    10536
10530:  MOVLB  0
10532:  GOTO   1054C
10536:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
10538:  MOVLW  04
1053A:  MOVWF  FF6
1053C:  MOVLW  0C
1053E:  MOVWF  FF7
10540:  MOVLW  00
10542:  MOVWF  FF8
10544:  CALL   202E
....................         return;
10548:  GOTO   108BE
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
1054C:  MOVLW  26
1054E:  MOVWF  FF6
10550:  MOVLW  0C
10552:  MOVWF  FF7
10554:  MOVLW  00
10556:  MOVWF  FF8
10558:  MOVLW  21
1055A:  MOVLB  9
1055C:  MOVWF  xC2
1055E:  MOVLB  0
10560:  CALL   2064
10564:  MOVFF  1EE,9E8
10568:  MOVLW  37
1056A:  MOVLB  9
1056C:  MOVWF  xE9
1056E:  MOVLB  0
10570:  CALL   2294
10574:  MOVFF  1ED,9E8
10578:  MOVLW  37
1057A:  MOVLB  9
1057C:  MOVWF  xE9
1057E:  MOVLB  0
10580:  CALL   2294
10584:  MOVFF  1EC,9E8
10588:  MOVLW  37
1058A:  MOVLB  9
1058C:  MOVWF  xE9
1058E:  MOVLB  0
10590:  CALL   2294
10594:  MOVFF  1EB,9E8
10598:  MOVLW  37
1059A:  MOVLB  9
1059C:  MOVWF  xE9
1059E:  MOVLB  0
105A0:  CALL   2294
105A4:  MOVLW  0D
105A6:  BTFSS  FA6.6
105A8:  GOTO   105A6
105AC:  MOVLB  E
105AE:  MOVWF  xF9
105B0:  MOVLW  0A
105B2:  MOVLB  0
105B4:  BTFSS  FA6.6
105B6:  GOTO   105B4
105BA:  MOVLB  E
105BC:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
105BE:  MOVLW  4E
105C0:  MOVWF  FF6
105C2:  MOVLW  0C
105C4:  MOVWF  FF7
105C6:  MOVLW  00
105C8:  MOVWF  FF8
105CA:  MOVLW  21
105CC:  MOVLB  9
105CE:  MOVWF  xC2
105D0:  MOVLB  0
105D2:  CALL   2064
105D6:  MOVLW  41
105D8:  MOVWF  FE9
105DA:  MOVFF  1F2,209
105DE:  MOVFF  1F1,208
105E2:  MOVFF  1F0,207
105E6:  MOVFF  1EF,206
105EA:  CALL   6024
105EE:  MOVLW  72
105F0:  MOVWF  FF6
105F2:  MOVLW  0C
105F4:  MOVWF  FF7
105F6:  MOVLW  00
105F8:  MOVWF  FF8
105FA:  MOVLW  04
105FC:  MOVLB  9
105FE:  MOVWF  xC2
10600:  MOVLB  0
10602:  CALL   2064
10606:  MOVFF  1F2,9E8
1060A:  MOVLW  57
1060C:  MOVLB  9
1060E:  MOVWF  xE9
10610:  MOVLB  0
10612:  CALL   2294
10616:  MOVFF  1F1,9E8
1061A:  MOVLW  57
1061C:  MOVLB  9
1061E:  MOVWF  xE9
10620:  MOVLB  0
10622:  CALL   2294
10626:  MOVFF  1F0,9E8
1062A:  MOVLW  57
1062C:  MOVLB  9
1062E:  MOVWF  xE9
10630:  MOVLB  0
10632:  CALL   2294
10636:  MOVFF  1EF,9E8
1063A:  MOVLW  57
1063C:  MOVLB  9
1063E:  MOVWF  xE9
10640:  MOVLB  0
10642:  CALL   2294
10646:  MOVLW  79
10648:  MOVWF  FF6
1064A:  MOVLW  0C
1064C:  MOVWF  FF7
1064E:  MOVLW  00
10650:  MOVWF  FF8
10652:  MOVLW  05
10654:  MOVLB  9
10656:  MOVWF  xC2
10658:  MOVLB  0
1065A:  CALL   2064
.................... 
....................     if (!is_connect(smf)){
1065E:  MOVFF  119,23A
10662:  MOVFF  118,239
10666:  MOVFF  117,238
1066A:  MOVFF  116,237
1066E:  CALL   2B54
10672:  MOVF   01,F
10674:  BTFSS  FD8.2
10676:  GOTO   1068A
....................         fprintf(PC, "Error: SMF is not connected\r\n");
1067A:  MOVLW  80
1067C:  MOVWF  FF6
1067E:  MOVLW  0C
10680:  MOVWF  FF7
10682:  MOVLW  00
10684:  MOVWF  FF8
10686:  CALL   202E
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
1068A:  MOVLW  9E
1068C:  MOVWF  FF6
1068E:  MOVLW  0C
10690:  MOVWF  FF7
10692:  MOVLW  00
10694:  MOVWF  FF8
10696:  CALL   202E
....................     unsigned int32 end_address = read_address + read_size;
1069A:  MOVLB  1
1069C:  MOVF   xEF,W
1069E:  ADDWF  xEB,W
106A0:  MOVWF  xF7
106A2:  MOVF   xF0,W
106A4:  ADDWFC xEC,W
106A6:  MOVWF  xF8
106A8:  MOVF   xF1,W
106AA:  ADDWFC xED,W
106AC:  MOVWF  xF9
106AE:  MOVF   xF2,W
106B0:  ADDWFC xEE,W
106B2:  MOVWF  xFA
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
106B4:  MOVFF  1EE,1FE
106B8:  MOVFF  1ED,1FD
106BC:  MOVFF  1EC,1FC
106C0:  MOVFF  1EB,1FB
106C4:  MOVLB  0
106C6:  MOVLB  1
106C8:  MOVF   xFE,W
106CA:  SUBWF  xFA,W
106CC:  BTFSC  FD8.0
106CE:  BRA    106D6
106D0:  MOVLB  0
106D2:  GOTO   1089E
106D6:  MOVLB  0
106D8:  BTFSS  FD8.2
106DA:  GOTO   10720
106DE:  MOVLB  1
106E0:  MOVF   xFD,W
106E2:  SUBWF  xF9,W
106E4:  BTFSC  FD8.0
106E6:  BRA    106EE
106E8:  MOVLB  0
106EA:  GOTO   1089E
106EE:  MOVLB  0
106F0:  BTFSS  FD8.2
106F2:  GOTO   10720
106F6:  MOVLB  1
106F8:  MOVF   xFC,W
106FA:  SUBWF  xF8,W
106FC:  BTFSC  FD8.0
106FE:  BRA    10706
10700:  MOVLB  0
10702:  GOTO   1089E
10706:  MOVLB  0
10708:  BTFSS  FD8.2
1070A:  GOTO   10720
1070E:  MOVLB  1
10710:  MOVF   xF7,W
10712:  SUBWF  xFB,W
10714:  BTFSS  FD8.0
10716:  BRA    1071E
10718:  MOVLB  0
1071A:  GOTO   1089E
1071E:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
10720:  MOVLB  1
10722:  MOVF   xFB,W
10724:  SUBWF  xF7,W
10726:  MOVLB  2
10728:  MOVWF  x03
1072A:  MOVLB  1
1072C:  MOVF   xFC,W
1072E:  SUBWFB xF8,W
10730:  MOVLB  2
10732:  MOVWF  x04
10734:  MOVLB  1
10736:  MOVF   xFD,W
10738:  SUBWFB xF9,W
1073A:  MOVLB  2
1073C:  MOVWF  x05
1073E:  MOVLB  1
10740:  MOVF   xFE,W
10742:  SUBWFB xFA,W
10744:  MOVLB  2
10746:  MOVWF  x06
10748:  MOVF   x06,F
1074A:  BTFSC  FD8.2
1074C:  BRA    10754
1074E:  MOVLB  0
10750:  GOTO   10788
10754:  MOVLB  0
10756:  MOVLB  2
10758:  MOVF   x05,F
1075A:  BTFSC  FD8.2
1075C:  BRA    10764
1075E:  MOVLB  0
10760:  GOTO   10788
10764:  MOVLB  0
10766:  MOVLB  2
10768:  MOVF   x04,F
1076A:  BTFSC  FD8.2
1076C:  BRA    10774
1076E:  MOVLB  0
10770:  GOTO   10788
10774:  MOVLB  0
10776:  MOVLB  2
10778:  MOVF   x03,W
1077A:  SUBLW  3F
1077C:  BTFSS  FD8.0
1077E:  BRA    10786
10780:  MOVLB  0
10782:  GOTO   10790
10786:  MOVLB  0
10788:  CLRF   03
1078A:  MOVLW  40
1078C:  GOTO   107B2
10790:  MOVLB  1
10792:  MOVF   xFB,W
10794:  SUBWF  xF7,W
10796:  MOVWF  00
10798:  MOVF   xFC,W
1079A:  SUBWFB xF8,W
1079C:  MOVWF  01
1079E:  MOVF   xFD,W
107A0:  SUBWFB xF9,W
107A2:  MOVWF  02
107A4:  MOVF   xFE,W
107A6:  SUBWFB xFA,W
107A8:  MOVWF  03
107AA:  MOVFF  01,03
107AE:  MOVF   00,W
107B0:  MOVLB  0
107B2:  MOVLB  1
107B4:  MOVWF  xFF
107B6:  MOVFF  03,200
107BA:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
107BC:  MOVFF  119,AED
107C0:  MOVFF  118,AEC
107C4:  MOVFF  117,AEB
107C8:  MOVFF  116,AEA
107CC:  MOVFF  1FE,AF1
107D0:  MOVFF  1FD,AF0
107D4:  MOVFF  1FC,AEF
107D8:  MOVFF  1FB,AEE
107DC:  MOVLW  01
107DE:  MOVLB  A
107E0:  MOVWF  xF3
107E2:  MOVLW  A3
107E4:  MOVWF  xF2
107E6:  CLRF   xF7
107E8:  CLRF   xF6
107EA:  MOVFF  200,AF5
107EE:  MOVFF  1FF,AF4
107F2:  MOVLB  0
107F4:  CALL   2C1C
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
107F8:  MOVLB  2
107FA:  CLRF   x02
107FC:  CLRF   x01
107FE:  MOVLB  0
10800:  MOVLB  2
10802:  MOVF   x02,W
10804:  SUBWF  x00,W
10806:  BTFSC  FD8.0
10808:  BRA    10810
1080A:  MOVLB  0
1080C:  GOTO   1086A
10810:  MOVLB  0
10812:  BTFSS  FD8.2
10814:  GOTO   1082C
10818:  MOVLB  1
1081A:  MOVF   xFF,W
1081C:  MOVLB  2
1081E:  SUBWF  x01,W
10820:  BTFSS  FD8.0
10822:  BRA    1082A
10824:  MOVLB  0
10826:  GOTO   1086A
1082A:  MOVLB  0
1082C:  MOVLW  A3
1082E:  MOVLB  2
10830:  ADDWF  x01,W
10832:  MOVWF  FE9
10834:  MOVLW  01
10836:  ADDWFC x02,W
10838:  MOVWF  FEA
1083A:  MOVFF  FEF,203
1083E:  MOVFF  203,9E8
10842:  MOVLW  37
10844:  MOVLB  9
10846:  MOVWF  xE9
10848:  MOVLB  0
1084A:  CALL   2294
1084E:  MOVLW  20
10850:  BTFSS  FA6.6
10852:  GOTO   10850
10856:  MOVLB  E
10858:  MOVWF  xF9
1085A:  MOVLB  0
1085C:  MOVLB  2
1085E:  INCF   x01,F
10860:  BTFSC  FD8.2
10862:  INCF   x02,F
10864:  MOVLB  0
10866:  GOTO   10800
....................         fprintf(PC, "\r\n");
1086A:  MOVLW  0D
1086C:  BTFSS  FA6.6
1086E:  GOTO   1086C
10872:  MOVLB  E
10874:  MOVWF  xF9
10876:  MOVLW  0A
10878:  MOVLB  0
1087A:  BTFSS  FA6.6
1087C:  GOTO   1087A
10880:  MOVLB  E
10882:  MOVWF  xF9
10884:  MOVLB  0
10886:  MOVLW  40
10888:  MOVLB  1
1088A:  ADDWF  xFB,F
1088C:  MOVLW  00
1088E:  ADDWFC xFC,F
10890:  MOVLW  00
10892:  ADDWFC xFD,F
10894:  MOVLW  00
10896:  ADDWFC xFE,F
10898:  MOVLB  0
1089A:  GOTO   106C6
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
1089E:  MOVLW  B6
108A0:  MOVWF  FF6
108A2:  MOVLW  0C
108A4:  MOVWF  FF7
108A6:  MOVLW  00
108A8:  MOVWF  FF8
108AA:  CALL   202E
....................     fprintf(PC, "____________________\r\n\r\n");
108AE:  MOVLW  CE
108B0:  MOVWF  FF6
108B2:  MOVLW  0C
108B4:  MOVWF  FF7
108B6:  MOVLW  00
108B8:  MOVWF  FF8
108BA:  CALL   202E
108BE:  GOTO   11146 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
108C2:  MOVLW  E8
108C4:  MOVWF  FF6
108C6:  MOVLW  0C
108C8:  MOVWF  FF7
108CA:  MOVLW  00
108CC:  MOVWF  FF8
108CE:  CALL   202E
....................     fprintf(PC, "___Start smf_erase____\r\n");
108D2:  MOVLW  02
108D4:  MOVWF  FF6
108D6:  MOVLW  0D
108D8:  MOVWF  FF7
108DA:  MOVLW  00
108DC:  MOVWF  FF8
108DE:  CALL   202E
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
108E2:  MOVLB  1
108E4:  MOVF   xA1,W
108E6:  MOVWF  FE9
108E8:  MOVF   xA2,W
108EA:  MOVWF  FEA
108EC:  MOVFF  FEF,1BB
108F0:  MOVFF  1BB,20A
108F4:  MOVLB  0
108F6:  CALL   10000
108FA:  MOVFF  02,03
108FE:  MOVF   01,W
10900:  MOVWF  FE1
10902:  MOVFF  03,FE2
10906:  MOVLW  01
10908:  MOVWF  FEA
1090A:  MOVLW  A3
1090C:  MOVWF  FE9
1090E:  MOVLW  08
10910:  MOVWF  01
10912:  MOVFF  FE6,FEE
10916:  DECFSZ 01,F
10918:  GOTO   10912
1091C:  MOVLW  04
1091E:  MOVLB  1
10920:  ADDWF  xA1,W
10922:  MOVWF  FE9
10924:  MOVLW  00
10926:  ADDWFC xA2,W
10928:  MOVWF  FEA
1092A:  MOVFF  FEF,1AB
1092E:  MOVFF  FEC,1AC
10932:  MOVFF  FEC,1AD
10936:  MOVFF  FEC,1AE
1093A:  MOVF   FED,F
1093C:  MOVF   FED,F
1093E:  MOVF   FED,F
10940:  MOVLW  08
10942:  ADDWF  xA1,W
10944:  MOVWF  FE9
10946:  MOVLW  00
10948:  ADDWFC xA2,W
1094A:  MOVWF  FEA
1094C:  MOVFF  FEF,1AF
10950:  MOVFF  FEC,1B0
10954:  MOVFF  FEC,1B1
10958:  MOVFF  FEC,1B2
1095C:  MOVF   FED,F
1095E:  MOVF   FED,F
10960:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
10962:  MOVLW  1C
10964:  MOVWF  FF6
10966:  MOVLW  0D
10968:  MOVWF  FF7
1096A:  MOVLW  00
1096C:  MOVWF  FF8
1096E:  MOVLW  18
10970:  MOVLB  9
10972:  MOVWF  xC2
10974:  MOVLB  0
10976:  CALL   2064
1097A:  MOVFF  1AE,9E8
1097E:  MOVLW  37
10980:  MOVLB  9
10982:  MOVWF  xE9
10984:  MOVLB  0
10986:  CALL   2294
1098A:  MOVFF  1AD,9E8
1098E:  MOVLW  37
10990:  MOVLB  9
10992:  MOVWF  xE9
10994:  MOVLB  0
10996:  CALL   2294
1099A:  MOVFF  1AC,9E8
1099E:  MOVLW  37
109A0:  MOVLB  9
109A2:  MOVWF  xE9
109A4:  MOVLB  0
109A6:  CALL   2294
109AA:  MOVFF  1AB,9E8
109AE:  MOVLW  37
109B0:  MOVLB  9
109B2:  MOVWF  xE9
109B4:  MOVLB  0
109B6:  CALL   2294
109BA:  MOVLW  0D
109BC:  BTFSS  FA6.6
109BE:  GOTO   109BC
109C2:  MOVLB  E
109C4:  MOVWF  xF9
109C6:  MOVLW  0A
109C8:  MOVLB  0
109CA:  BTFSS  FA6.6
109CC:  GOTO   109CA
109D0:  MOVLB  E
109D2:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
109D4:  MOVLW  3A
109D6:  MOVWF  FF6
109D8:  MOVLW  0D
109DA:  MOVWF  FF7
109DC:  MOVLW  00
109DE:  MOVWF  FF8
109E0:  MOVLW  18
109E2:  MOVLB  9
109E4:  MOVWF  xC2
109E6:  MOVLB  0
109E8:  CALL   2064
109EC:  MOVLW  41
109EE:  MOVWF  FE9
109F0:  MOVFF  1B2,209
109F4:  MOVFF  1B1,208
109F8:  MOVFF  1B0,207
109FC:  MOVFF  1AF,206
10A00:  CALL   6024
10A04:  MOVLW  55
10A06:  MOVWF  FF6
10A08:  MOVLW  0D
10A0A:  MOVWF  FF7
10A0C:  MOVLW  00
10A0E:  MOVWF  FF8
10A10:  MOVLW  04
10A12:  MOVLB  9
10A14:  MOVWF  xC2
10A16:  MOVLB  0
10A18:  CALL   2064
10A1C:  MOVFF  1B2,9E8
10A20:  MOVLW  57
10A22:  MOVLB  9
10A24:  MOVWF  xE9
10A26:  MOVLB  0
10A28:  CALL   2294
10A2C:  MOVFF  1B1,9E8
10A30:  MOVLW  57
10A32:  MOVLB  9
10A34:  MOVWF  xE9
10A36:  MOVLB  0
10A38:  CALL   2294
10A3C:  MOVFF  1B0,9E8
10A40:  MOVLW  57
10A42:  MOVLB  9
10A44:  MOVWF  xE9
10A46:  MOVLB  0
10A48:  CALL   2294
10A4C:  MOVFF  1AF,9E8
10A50:  MOVLW  57
10A52:  MOVLB  9
10A54:  MOVWF  xE9
10A56:  MOVLB  0
10A58:  CALL   2294
10A5C:  MOVLW  5C
10A5E:  MOVWF  FF6
10A60:  MOVLW  0D
10A62:  MOVWF  FF7
10A64:  MOVLW  00
10A66:  MOVWF  FF8
10A68:  MOVLW  05
10A6A:  MOVLB  9
10A6C:  MOVWF  xC2
10A6E:  MOVLB  0
10A70:  CALL   2064
.................... 
....................     if (!is_connect(smf)){
10A74:  MOVFF  119,23A
10A78:  MOVFF  118,239
10A7C:  MOVFF  117,238
10A80:  MOVFF  116,237
10A84:  CALL   2B54
10A88:  MOVF   01,F
10A8A:  BTFSS  FD8.2
10A8C:  GOTO   10AA4
....................         fprintf(PC, "Error: SMF is not connected\r\n");
10A90:  MOVLW  62
10A92:  MOVWF  FF6
10A94:  MOVLW  0D
10A96:  MOVWF  FF7
10A98:  MOVLW  00
10A9A:  MOVWF  FF8
10A9C:  CALL   202E
....................         return;
10AA0:  GOTO   10F40
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
10AA4:  MOVLB  1
10AA6:  MOVF   xAE,W
10AA8:  SUBWF  xA6,W
10AAA:  BTFSC  FD8.0
10AAC:  BRA    10AB4
10AAE:  MOVLB  0
10AB0:  GOTO   10AFE
10AB4:  MOVLB  0
10AB6:  BTFSS  FD8.2
10AB8:  GOTO   10B58
10ABC:  MOVLB  1
10ABE:  MOVF   xAD,W
10AC0:  SUBWF  xA5,W
10AC2:  BTFSC  FD8.0
10AC4:  BRA    10ACC
10AC6:  MOVLB  0
10AC8:  GOTO   10AFE
10ACC:  MOVLB  0
10ACE:  BTFSS  FD8.2
10AD0:  GOTO   10B58
10AD4:  MOVLB  1
10AD6:  MOVF   xAC,W
10AD8:  SUBWF  xA4,W
10ADA:  BTFSC  FD8.0
10ADC:  BRA    10AE4
10ADE:  MOVLB  0
10AE0:  GOTO   10AFE
10AE4:  MOVLB  0
10AE6:  BTFSS  FD8.2
10AE8:  GOTO   10B58
10AEC:  MOVLB  1
10AEE:  MOVF   xA3,W
10AF0:  SUBWF  xAB,W
10AF2:  BTFSC  FD8.0
10AF4:  BRA    10AFC
10AF6:  MOVLB  0
10AF8:  GOTO   10B58
10AFC:  MOVLB  0
10AFE:  MOVLB  1
10B00:  MOVF   xAA,W
10B02:  SUBWF  xAE,W
10B04:  BTFSC  FD8.0
10B06:  BRA    10B0E
10B08:  MOVLB  0
10B0A:  GOTO   10C7C
10B0E:  MOVLB  0
10B10:  BTFSS  FD8.2
10B12:  GOTO   10B58
10B16:  MOVLB  1
10B18:  MOVF   xA9,W
10B1A:  SUBWF  xAD,W
10B1C:  BTFSC  FD8.0
10B1E:  BRA    10B26
10B20:  MOVLB  0
10B22:  GOTO   10C7C
10B26:  MOVLB  0
10B28:  BTFSS  FD8.2
10B2A:  GOTO   10B58
10B2E:  MOVLB  1
10B30:  MOVF   xA8,W
10B32:  SUBWF  xAC,W
10B34:  BTFSC  FD8.0
10B36:  BRA    10B3E
10B38:  MOVLB  0
10B3A:  GOTO   10C7C
10B3E:  MOVLB  0
10B40:  BTFSS  FD8.2
10B42:  GOTO   10B58
10B46:  MOVLB  1
10B48:  MOVF   xA7,W
10B4A:  SUBWF  xAB,W
10B4C:  BTFSC  FD8.0
10B4E:  BRA    10B56
10B50:  MOVLB  0
10B52:  GOTO   10C7C
10B56:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
10B58:  MOVLW  80
10B5A:  MOVWF  FF6
10B5C:  MOVLW  0D
10B5E:  MOVWF  FF7
10B60:  MOVLW  00
10B62:  MOVWF  FF8
10B64:  MOVLW  1E
10B66:  MOVLB  9
10B68:  MOVWF  xC2
10B6A:  MOVLB  0
10B6C:  CALL   2064
10B70:  MOVFF  1AE,9E8
10B74:  MOVLW  37
10B76:  MOVLB  9
10B78:  MOVWF  xE9
10B7A:  MOVLB  0
10B7C:  CALL   2294
10B80:  MOVFF  1AD,9E8
10B84:  MOVLW  37
10B86:  MOVLB  9
10B88:  MOVWF  xE9
10B8A:  MOVLB  0
10B8C:  CALL   2294
10B90:  MOVFF  1AC,9E8
10B94:  MOVLW  37
10B96:  MOVLB  9
10B98:  MOVWF  xE9
10B9A:  MOVLB  0
10B9C:  CALL   2294
10BA0:  MOVFF  1AB,9E8
10BA4:  MOVLW  37
10BA6:  MOVLB  9
10BA8:  MOVWF  xE9
10BAA:  MOVLB  0
10BAC:  CALL   2294
10BB0:  MOVLW  A1
10BB2:  MOVWF  FF6
10BB4:  MOVLW  0D
10BB6:  MOVWF  FF7
10BB8:  MOVLW  00
10BBA:  MOVWF  FF8
10BBC:  MOVLW  1D
10BBE:  MOVLB  9
10BC0:  MOVWF  xC2
10BC2:  MOVLB  0
10BC4:  CALL   2064
10BC8:  MOVFF  1A6,9E8
10BCC:  MOVLW  37
10BCE:  MOVLB  9
10BD0:  MOVWF  xE9
10BD2:  MOVLB  0
10BD4:  CALL   2294
10BD8:  MOVFF  1A5,9E8
10BDC:  MOVLW  37
10BDE:  MOVLB  9
10BE0:  MOVWF  xE9
10BE2:  MOVLB  0
10BE4:  CALL   2294
10BE8:  MOVFF  1A4,9E8
10BEC:  MOVLW  37
10BEE:  MOVLB  9
10BF0:  MOVWF  xE9
10BF2:  MOVLB  0
10BF4:  CALL   2294
10BF8:  MOVFF  1A3,9E8
10BFC:  MOVLW  37
10BFE:  MOVLB  9
10C00:  MOVWF  xE9
10C02:  MOVLB  0
10C04:  CALL   2294
10C08:  MOVLW  C1
10C0A:  MOVWF  FF6
10C0C:  MOVLW  0D
10C0E:  MOVWF  FF7
10C10:  MOVLW  00
10C12:  MOVWF  FF8
10C14:  MOVLW  05
10C16:  MOVLB  9
10C18:  MOVWF  xC2
10C1A:  MOVLB  0
10C1C:  CALL   2064
10C20:  MOVFF  1AA,9E8
10C24:  MOVLW  37
10C26:  MOVLB  9
10C28:  MOVWF  xE9
10C2A:  MOVLB  0
10C2C:  CALL   2294
10C30:  MOVFF  1A9,9E8
10C34:  MOVLW  37
10C36:  MOVLB  9
10C38:  MOVWF  xE9
10C3A:  MOVLB  0
10C3C:  CALL   2294
10C40:  MOVFF  1A8,9E8
10C44:  MOVLW  37
10C46:  MOVLB  9
10C48:  MOVWF  xE9
10C4A:  MOVLB  0
10C4C:  CALL   2294
10C50:  MOVFF  1A7,9E8
10C54:  MOVLW  37
10C56:  MOVLB  9
10C58:  MOVWF  xE9
10C5A:  MOVLB  0
10C5C:  CALL   2294
10C60:  MOVLW  C9
10C62:  MOVWF  FF6
10C64:  MOVLW  0D
10C66:  MOVWF  FF7
10C68:  MOVLW  00
10C6A:  MOVWF  FF8
10C6C:  MOVLW  03
10C6E:  MOVLB  9
10C70:  MOVWF  xC2
10C72:  MOVLB  0
10C74:  CALL   2064
....................         return;
10C78:  GOTO   10F40
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
10C7C:  MOVLB  1
10C7E:  MOVF   xAF,W
10C80:  ADDWF  xAB,W
10C82:  MOVWF  xBB
10C84:  MOVF   xB0,W
10C86:  ADDWFC xAC,W
10C88:  MOVWF  xBC
10C8A:  MOVF   xB1,W
10C8C:  ADDWFC xAD,W
10C8E:  MOVWF  xBD
10C90:  MOVF   xB2,W
10C92:  ADDWFC xAE,W
10C94:  MOVWF  xBE
10C96:  MOVF   xAA,W
10C98:  SUBWF  xBE,W
10C9A:  BTFSC  FD8.0
10C9C:  BRA    10CA4
10C9E:  MOVLB  0
10CA0:  GOTO   10D8E
10CA4:  MOVLB  0
10CA6:  BTFSS  FD8.2
10CA8:  GOTO   10CEE
10CAC:  MOVLB  1
10CAE:  MOVF   xA9,W
10CB0:  SUBWF  xBD,W
10CB2:  BTFSC  FD8.0
10CB4:  BRA    10CBC
10CB6:  MOVLB  0
10CB8:  GOTO   10D8E
10CBC:  MOVLB  0
10CBE:  BTFSS  FD8.2
10CC0:  GOTO   10CEE
10CC4:  MOVLB  1
10CC6:  MOVF   xA8,W
10CC8:  SUBWF  xBC,W
10CCA:  BTFSC  FD8.0
10CCC:  BRA    10CD4
10CCE:  MOVLB  0
10CD0:  GOTO   10D8E
10CD4:  MOVLB  0
10CD6:  BTFSS  FD8.2
10CD8:  GOTO   10CEE
10CDC:  MOVLB  1
10CDE:  MOVF   xBB,W
10CE0:  SUBWF  xA7,W
10CE2:  BTFSS  FD8.0
10CE4:  BRA    10CEC
10CE6:  MOVLB  0
10CE8:  GOTO   10D8E
10CEC:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
10CEE:  MOVLW  CE
10CF0:  MOVWF  FF6
10CF2:  MOVLW  0D
10CF4:  MOVWF  FF7
10CF6:  MOVLW  00
10CF8:  MOVWF  FF8
10CFA:  MOVLW  3A
10CFC:  MOVLB  9
10CFE:  MOVWF  xC2
10D00:  MOVLB  0
10D02:  CALL   2064
10D06:  MOVFF  1AA,9E8
10D0A:  MOVLW  37
10D0C:  MOVLB  9
10D0E:  MOVWF  xE9
10D10:  MOVLB  0
10D12:  CALL   2294
10D16:  MOVFF  1A9,9E8
10D1A:  MOVLW  37
10D1C:  MOVLB  9
10D1E:  MOVWF  xE9
10D20:  MOVLB  0
10D22:  CALL   2294
10D26:  MOVFF  1A8,9E8
10D2A:  MOVLW  37
10D2C:  MOVLB  9
10D2E:  MOVWF  xE9
10D30:  MOVLB  0
10D32:  CALL   2294
10D36:  MOVFF  1A7,9E8
10D3A:  MOVLW  37
10D3C:  MOVLB  9
10D3E:  MOVWF  xE9
10D40:  MOVLB  0
10D42:  CALL   2294
10D46:  MOVLW  0D
10D48:  BTFSS  FA6.6
10D4A:  GOTO   10D48
10D4E:  MOVLB  E
10D50:  MOVWF  xF9
10D52:  MOVLW  0A
10D54:  MOVLB  0
10D56:  BTFSS  FA6.6
10D58:  GOTO   10D56
10D5C:  MOVLB  E
10D5E:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
10D60:  MOVLW  0E
10D62:  MOVWF  FF6
10D64:  MOVLW  0E
10D66:  MOVWF  FF7
10D68:  MOVLW  00
10D6A:  MOVWF  FF8
10D6C:  MOVLB  0
10D6E:  CALL   202E
....................         erase_size = mission_type.end_address - erase_address;
10D72:  MOVLB  1
10D74:  MOVF   xAB,W
10D76:  SUBWF  xA7,W
10D78:  MOVWF  xAF
10D7A:  MOVF   xAC,W
10D7C:  SUBWFB xA8,W
10D7E:  MOVWF  xB0
10D80:  MOVF   xAD,W
10D82:  SUBWFB xA9,W
10D84:  MOVWF  xB1
10D86:  MOVF   xAE,W
10D88:  SUBWFB xAA,W
10D8A:  MOVWF  xB2
10D8C:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
10D8E:  MOVLW  42
10D90:  MOVWF  FF6
10D92:  MOVLW  0E
10D94:  MOVWF  FF7
10D96:  MOVLW  00
10D98:  MOVWF  FF8
10D9A:  CALL   202E
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
10D9E:  MOVLB  1
10DA0:  MOVF   xAF,W
10DA2:  ADDWF  xAB,W
10DA4:  MOVWF  xB3
10DA6:  MOVF   xB0,W
10DA8:  ADDWFC xAC,W
10DAA:  MOVWF  xB4
10DAC:  MOVF   xB1,W
10DAE:  ADDWFC xAD,W
10DB0:  MOVWF  xB5
10DB2:  MOVF   xB2,W
10DB4:  ADDWFC xAE,W
10DB6:  MOVWF  xB6
10DB8:  CLRF   xB7
10DBA:  MOVF   xAC,W
10DBC:  ANDLW  F0
10DBE:  MOVWF  xB8
10DC0:  CLRF   xB9
10DC2:  CLRF   xBA
10DC4:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
10DC6:  MOVLB  1
10DC8:  MOVF   xBA,W
10DCA:  SUBWF  xB6,W
10DCC:  BTFSC  FD8.0
10DCE:  BRA    10DD6
10DD0:  MOVLB  0
10DD2:  GOTO   10EB2
10DD6:  MOVLB  0
10DD8:  BTFSS  FD8.2
10DDA:  GOTO   10E20
10DDE:  MOVLB  1
10DE0:  MOVF   xB9,W
10DE2:  SUBWF  xB5,W
10DE4:  BTFSC  FD8.0
10DE6:  BRA    10DEE
10DE8:  MOVLB  0
10DEA:  GOTO   10EB2
10DEE:  MOVLB  0
10DF0:  BTFSS  FD8.2
10DF2:  GOTO   10E20
10DF6:  MOVLB  1
10DF8:  MOVF   xB8,W
10DFA:  SUBWF  xB4,W
10DFC:  BTFSC  FD8.0
10DFE:  BRA    10E06
10E00:  MOVLB  0
10E02:  GOTO   10EB2
10E06:  MOVLB  0
10E08:  BTFSS  FD8.2
10E0A:  GOTO   10E20
10E0E:  MOVLB  1
10E10:  MOVF   xB3,W
10E12:  SUBWF  xB7,W
10E14:  BTFSS  FD8.0
10E16:  BRA    10E1E
10E18:  MOVLB  0
10E1A:  GOTO   10EB2
10E1E:  MOVLB  0
10E20:  MOVLB  1
10E22:  MOVF   xBA,W
10E24:  SUBWF  xAA,W
10E26:  BTFSC  FD8.0
10E28:  BRA    10E30
10E2A:  MOVLB  0
10E2C:  GOTO   10EB2
10E30:  MOVLB  0
10E32:  BTFSS  FD8.2
10E34:  GOTO   10E7A
10E38:  MOVLB  1
10E3A:  MOVF   xB9,W
10E3C:  SUBWF  xA9,W
10E3E:  BTFSC  FD8.0
10E40:  BRA    10E48
10E42:  MOVLB  0
10E44:  GOTO   10EB2
10E48:  MOVLB  0
10E4A:  BTFSS  FD8.2
10E4C:  GOTO   10E7A
10E50:  MOVLB  1
10E52:  MOVF   xB8,W
10E54:  SUBWF  xA8,W
10E56:  BTFSC  FD8.0
10E58:  BRA    10E60
10E5A:  MOVLB  0
10E5C:  GOTO   10EB2
10E60:  MOVLB  0
10E62:  BTFSS  FD8.2
10E64:  GOTO   10E7A
10E68:  MOVLB  1
10E6A:  MOVF   xA7,W
10E6C:  SUBWF  xB7,W
10E6E:  BTFSS  FD8.0
10E70:  BRA    10E78
10E72:  MOVLB  0
10E74:  GOTO   10EB2
10E78:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
10E7A:  MOVFF  119,A07
10E7E:  MOVFF  118,A06
10E82:  MOVFF  117,A05
10E86:  MOVFF  116,A04
10E8A:  MOVFF  1BA,A0B
10E8E:  MOVFF  1B9,A0A
10E92:  MOVFF  1B8,A09
10E96:  MOVFF  1B7,A08
10E9A:  CALL   4A8C
....................         current += SUBSECTOR_SIZE;
10E9E:  MOVLW  10
10EA0:  MOVLB  1
10EA2:  ADDWF  xB8,F
10EA4:  MOVLW  00
10EA6:  ADDWFC xB9,F
10EA8:  MOVLW  00
10EAA:  ADDWFC xBA,F
10EAC:  MOVLB  0
10EAE:  GOTO   10DC6
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
10EB2:  CLRF   00
10EB4:  MOVLB  1
10EB6:  MOVF   xAC,W
10EB8:  ANDLW  F0
10EBA:  MOVWF  01
10EBC:  CLRF   02
10EBE:  CLRF   03
10EC0:  MOVF   00,W
10EC2:  SUBWF  xB7,W
10EC4:  MOVWF  xBB
10EC6:  MOVF   01,W
10EC8:  SUBWFB xB8,W
10ECA:  MOVWF  xBC
10ECC:  MOVF   02,W
10ECE:  SUBWFB xB9,W
10ED0:  MOVWF  xBD
10ED2:  MOVF   03,W
10ED4:  SUBWFB xBA,W
10ED6:  MOVWF  xBE
10ED8:  MOVLW  74
10EDA:  MOVWF  FF6
10EDC:  MOVLW  0E
10EDE:  MOVWF  FF7
10EE0:  MOVLW  00
10EE2:  MOVWF  FF8
10EE4:  MOVLW  07
10EE6:  MOVLB  9
10EE8:  MOVWF  xC2
10EEA:  MOVLB  0
10EEC:  CALL   2064
10EF0:  MOVLW  41
10EF2:  MOVWF  FE9
10EF4:  MOVFF  1BE,209
10EF8:  MOVFF  1BD,208
10EFC:  MOVFF  1BC,207
10F00:  MOVFF  1BB,206
10F04:  CALL   6024
10F08:  MOVLW  7E
10F0A:  MOVWF  FF6
10F0C:  MOVLW  0E
10F0E:  MOVWF  FF7
10F10:  MOVLW  00
10F12:  MOVWF  FF8
10F14:  MOVLW  12
10F16:  MOVLB  9
10F18:  MOVWF  xC2
10F1A:  MOVLB  0
10F1C:  CALL   2064
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
10F20:  MOVLW  92
10F22:  MOVWF  FF6
10F24:  MOVLW  0E
10F26:  MOVWF  FF7
10F28:  MOVLW  00
10F2A:  MOVWF  FF8
10F2C:  CALL   202E
....................     fprintf(PC, "____________________\r\n\r\n");
10F30:  MOVLW  AC
10F32:  MOVWF  FF6
10F34:  MOVLW  0E
10F36:  MOVWF  FF7
10F38:  MOVLW  00
10F3A:  MOVWF  FF8
10F3C:  CALL   202E
10F40:  GOTO   11156 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "domain/cigs_flash.c"
.................... #include "cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
036B2:  MOVLW  C6
036B4:  MOVWF  FF6
036B6:  MOVLW  0E
036B8:  MOVWF  FF7
036BA:  MOVLW  00
036BC:  MOVWF  FF8
036BE:  CALL   202E
....................     output_high(MIS_FM_CS);
036C2:  MOVLW  FE
036C4:  MOVWF  F98
036C6:  BSF    F8F.0
....................     output_high(SMF_CS);
036C8:  MOVLW  FB
036CA:  MOVWF  F92
036CC:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
036CE:  MOVFF  115,23A
036D2:  MOVFF  114,239
036D6:  MOVFF  113,238
036DA:  MOVFF  112,237
036DE:  CALL   2B54
036E2:  MOVF   01,F
036E4:  BTFSC  FD8.2
036E6:  GOTO   36FE
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
036EA:  MOVLW  E2
036EC:  MOVWF  FF6
036EE:  MOVLW  0E
036F0:  MOVWF  FF7
036F2:  MOVLW  00
036F4:  MOVWF  FF8
036F6:  CALL   202E
....................     } else {
036FA:  GOTO   370E
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
036FE:  MOVLW  F8
03700:  MOVWF  FF6
03702:  MOVLW  0E
03704:  MOVWF  FF7
03706:  MOVLW  00
03708:  MOVWF  FF8
0370A:  CALL   202E
....................     }
....................     if (is_connect(smf)) {
0370E:  MOVFF  119,23A
03712:  MOVFF  118,239
03716:  MOVFF  117,238
0371A:  MOVFF  116,237
0371E:  CALL   2B54
03722:  MOVF   01,F
03724:  BTFSC  FD8.2
03726:  GOTO   373E
....................         fprintf(PC, "\t[SMF] Connected\r\n");
0372A:  MOVLW  12
0372C:  MOVWF  FF6
0372E:  MOVLW  0F
03730:  MOVWF  FF7
03732:  MOVLW  00
03734:  MOVWF  FF8
03736:  CALL   202E
....................     } else {
0373A:  GOTO   374E
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
0373E:  MOVLW  26
03740:  MOVWF  FF6
03742:  MOVLW  0F
03744:  MOVWF  FF7
03746:  MOVLW  00
03748:  MOVWF  FF8
0374A:  CALL   202E
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
0374E:  MOVLW  01
03750:  MOVLB  2
03752:  MOVWF  x36
03754:  MOVLW  F5
03756:  MOVWF  x35
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
03758:  MOVFF  236,FEA
0375C:  MOVFF  235,FE9
03760:  CLRF   00
03762:  CLRF   02
03764:  MOVLW  40
03766:  MOVWF  01
03768:  MOVLB  0
0376A:  CALL   209E
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
0376E:  MOVLW  3E
03770:  MOVWF  FF6
03772:  MOVLW  0F
03774:  MOVWF  FF7
03776:  MOVLW  00
03778:  MOVWF  FF8
0377A:  MOVLW  0A
0377C:  MOVLB  9
0377E:  MOVWF  xC2
03780:  MOVLB  0
03782:  CALL   2064
03786:  MOVLB  9
03788:  CLRF   xE8
0378A:  MOVLW  37
0378C:  MOVWF  xE9
0378E:  MOVLB  0
03790:  CALL   2294
03794:  MOVLB  9
03796:  CLRF   xE8
03798:  MOVLW  37
0379A:  MOVWF  xE9
0379C:  MOVLB  0
0379E:  CALL   2294
037A2:  MOVLB  9
037A4:  CLRF   xE8
037A6:  MOVLW  37
037A8:  MOVWF  xE9
037AA:  MOVLB  0
037AC:  CALL   2294
037B0:  MOVLB  9
037B2:  CLRF   xE8
037B4:  MOVLW  37
037B6:  MOVWF  xE9
037B8:  MOVLB  0
037BA:  CALL   2294
037BE:  MOVLW  0D
037C0:  BTFSS  FA6.6
037C2:  GOTO   37C0
037C6:  MOVLB  E
037C8:  MOVWF  xF9
037CA:  MOVLW  0A
037CC:  MOVLB  0
037CE:  BTFSS  FA6.6
037D0:  GOTO   37CE
037D4:  MOVLB  E
037D6:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
037D8:  MOVLB  2
037DA:  MOVF   x35,W
037DC:  MOVWF  01
037DE:  MOVF   x36,W
037E0:  MOVWF  03
037E2:  MOVF   01,W
037E4:  MOVWF  x37
037E6:  MOVFF  03,238
037EA:  MOVFF  115,AED
037EE:  MOVFF  114,AEC
037F2:  MOVFF  113,AEB
037F6:  MOVFF  112,AEA
037FA:  MOVLB  A
037FC:  CLRF   xF1
037FE:  CLRF   xF0
03800:  CLRF   xEF
03802:  CLRF   xEE
03804:  MOVFF  238,AF3
03808:  MOVFF  237,AF2
0380C:  CLRF   xF7
0380E:  CLRF   xF6
03810:  CLRF   xF5
03812:  MOVLW  40
03814:  MOVWF  xF4
03816:  MOVLB  0
03818:  CALL   2C1C
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
0381C:  MOVLW  3F
0381E:  MOVLB  2
03820:  ADDWF  x35,W
03822:  MOVWF  FE9
03824:  MOVLW  00
03826:  ADDWFC x36,W
03828:  MOVWF  FEA
0382A:  MOVFF  FEF,237
0382E:  MOVF   x35,W
03830:  MOVWF  01
03832:  MOVF   x36,W
03834:  MOVWF  03
03836:  MOVF   01,W
03838:  MOVWF  x38
0383A:  MOVFF  03,239
0383E:  MOVFF  239,AEB
03842:  MOVFF  238,AEA
03846:  MOVLW  3F
03848:  MOVLB  A
0384A:  MOVWF  xEC
0384C:  MOVLB  0
0384E:  CALL   2E3C
03852:  MOVF   01,W
03854:  MOVLB  2
03856:  SUBWF  x37,W
03858:  BTFSS  FD8.2
0385A:  BRA    3862
0385C:  MOVLB  0
0385E:  GOTO   3874
03862:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03864:  MOVLW  50
03866:  MOVWF  FF6
03868:  MOVLW  0F
0386A:  MOVWF  FF7
0386C:  MOVLW  00
0386E:  MOVWF  FF8
03870:  CALL   202E
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03874:  MOVLB  2
03876:  MOVF   x35,W
03878:  MOVWF  FE1
0387A:  MOVF   x36,W
0387C:  MOVWF  FE2
0387E:  MOVLW  01
03880:  MOVWF  FEA
03882:  MOVLW  2C
03884:  MOVWF  FE9
03886:  MOVLW  0A
03888:  MOVWF  01
0388A:  MOVLB  0
0388C:  MOVFF  FE6,FEE
03890:  DECFSZ 01,F
03892:  GOTO   388C
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03896:  MOVLW  0A
03898:  MOVLB  2
0389A:  ADDWF  x35,W
0389C:  MOVWF  FE1
0389E:  MOVLW  00
038A0:  ADDWFC x36,W
038A2:  MOVWF  FE2
038A4:  MOVLW  01
038A6:  MOVWF  FEA
038A8:  MOVLW  36
038AA:  MOVWF  FE9
038AC:  MOVLW  0A
038AE:  MOVWF  01
038B0:  MOVLB  0
038B2:  MOVFF  FE6,FEE
038B6:  DECFSZ 01,F
038B8:  GOTO   38B2
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
038BC:  MOVLW  14
038BE:  MOVLB  2
038C0:  ADDWF  x35,W
038C2:  MOVWF  FE1
038C4:  MOVLW  00
038C6:  ADDWFC x36,W
038C8:  MOVWF  FE2
038CA:  MOVLW  01
038CC:  MOVWF  FEA
038CE:  MOVLW  40
038D0:  MOVWF  FE9
038D2:  MOVLW  0A
038D4:  MOVWF  01
038D6:  MOVLB  0
038D8:  MOVFF  FE6,FEE
038DC:  DECFSZ 01,F
038DE:  GOTO   38D8
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
038E2:  MOVLW  1E
038E4:  MOVLB  2
038E6:  ADDWF  x35,W
038E8:  MOVWF  FE1
038EA:  MOVLW  00
038EC:  ADDWFC x36,W
038EE:  MOVWF  FE2
038F0:  MOVLW  01
038F2:  MOVWF  FEA
038F4:  MOVLW  4A
038F6:  MOVWF  FE9
038F8:  MOVLW  0A
038FA:  MOVWF  01
038FC:  MOVLB  0
038FE:  MOVFF  FE6,FEE
03902:  DECFSZ 01,F
03904:  GOTO   38FE
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03908:  MOVLW  28
0390A:  MOVLB  2
0390C:  ADDWF  x35,W
0390E:  MOVWF  FE1
03910:  MOVLW  00
03912:  ADDWFC x36,W
03914:  MOVWF  FE2
03916:  MOVLW  01
03918:  MOVWF  FEA
0391A:  MOVLW  54
0391C:  MOVWF  FE9
0391E:  MOVLW  0A
03920:  MOVWF  01
03922:  MOVLB  0
03924:  MOVFF  FE6,FEE
03928:  DECFSZ 01,F
0392A:  GOTO   3924
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
0392E:  MOVLW  32
03930:  MOVLB  2
03932:  ADDWF  x35,W
03934:  MOVWF  FE1
03936:  MOVLW  00
03938:  ADDWFC x36,W
0393A:  MOVWF  FE2
0393C:  MOVLW  01
0393E:  MOVWF  FEA
03940:  MOVLW  5E
03942:  MOVWF  FE9
03944:  MOVLW  0A
03946:  MOVWF  01
03948:  MOVLB  0
0394A:  MOVFF  FE6,FEE
0394E:  DECFSZ 01,F
03950:  GOTO   394A
.................... 
....................     print_misf_address_table();
03954:  GOTO   2EA8
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03958:  MOVLW  7E
0395A:  MOVWF  FF6
0395C:  MOVLW  0F
0395E:  MOVWF  FF7
03960:  MOVLW  00
03962:  MOVWF  FF8
03964:  CALL   202E
03968:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02EA8:  MOVLW  8A
02EAA:  MOVWF  FF6
02EAC:  MOVLW  0F
02EAE:  MOVWF  FF7
02EB0:  MOVLW  00
02EB2:  MOVWF  FF8
02EB4:  CALL   202E
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02EB8:  MOVLW  A6
02EBA:  MOVWF  FF6
02EBC:  MOVLW  0F
02EBE:  MOVWF  FF7
02EC0:  MOVLW  00
02EC2:  MOVWF  FF8
02EC4:  CALL   202E
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
02EC8:  MOVLW  D2
02ECA:  MOVWF  FF6
02ECC:  MOVLW  0F
02ECE:  MOVWF  FF7
02ED0:  MOVLW  00
02ED2:  MOVWF  FF8
02ED4:  MOVLW  11
02ED6:  MOVLB  9
02ED8:  MOVWF  xC2
02EDA:  MOVLB  0
02EDC:  CALL   2064
02EE0:  MOVFF  12F,9E8
02EE4:  MOVLW  37
02EE6:  MOVLB  9
02EE8:  MOVWF  xE9
02EEA:  MOVLB  0
02EEC:  CALL   2294
02EF0:  MOVFF  12E,9E8
02EF4:  MOVLW  37
02EF6:  MOVLB  9
02EF8:  MOVWF  xE9
02EFA:  MOVLB  0
02EFC:  CALL   2294
02F00:  MOVFF  12D,9E8
02F04:  MOVLW  37
02F06:  MOVLB  9
02F08:  MOVWF  xE9
02F0A:  MOVLB  0
02F0C:  CALL   2294
02F10:  MOVFF  12C,9E8
02F14:  MOVLW  37
02F16:  MOVLB  9
02F18:  MOVWF  xE9
02F1A:  MOVLB  0
02F1C:  CALL   2294
02F20:  MOVLW  0D
02F22:  BTFSS  FA6.6
02F24:  GOTO   2F22
02F28:  MOVLB  E
02F2A:  MOVWF  xF9
02F2C:  MOVLW  0A
02F2E:  MOVLB  0
02F30:  BTFSS  FA6.6
02F32:  GOTO   2F30
02F36:  MOVLB  E
02F38:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02F3A:  MOVLW  EC
02F3C:  MOVWF  FF6
02F3E:  MOVLW  0F
02F40:  MOVWF  FF7
02F42:  MOVLW  00
02F44:  MOVWF  FF8
02F46:  MOVLW  0E
02F48:  MOVLB  9
02F4A:  MOVWF  xC2
02F4C:  MOVLB  0
02F4E:  CALL   2064
02F52:  MOVFF  133,9E8
02F56:  MOVLW  37
02F58:  MOVLB  9
02F5A:  MOVWF  xE9
02F5C:  MOVLB  0
02F5E:  CALL   2294
02F62:  MOVFF  132,9E8
02F66:  MOVLW  37
02F68:  MOVLB  9
02F6A:  MOVWF  xE9
02F6C:  MOVLB  0
02F6E:  CALL   2294
02F72:  MOVFF  131,9E8
02F76:  MOVLW  37
02F78:  MOVLB  9
02F7A:  MOVWF  xE9
02F7C:  MOVLB  0
02F7E:  CALL   2294
02F82:  MOVFF  130,9E8
02F86:  MOVLW  37
02F88:  MOVLB  9
02F8A:  MOVWF  xE9
02F8C:  MOVLB  0
02F8E:  CALL   2294
02F92:  MOVLW  0D
02F94:  BTFSS  FA6.6
02F96:  GOTO   2F94
02F9A:  MOVLB  E
02F9C:  MOVWF  xF9
02F9E:  MOVLW  0A
02FA0:  MOVLB  0
02FA2:  BTFSS  FA6.6
02FA4:  GOTO   2FA2
02FA8:  MOVLB  E
02FAA:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
02FAC:  MOVLW  02
02FAE:  MOVWF  FF6
02FB0:  MOVLW  10
02FB2:  MOVWF  FF7
02FB4:  MOVLW  00
02FB6:  MOVWF  FF8
02FB8:  MOVLW  0E
02FBA:  MOVLB  9
02FBC:  MOVWF  xC2
02FBE:  MOVLB  0
02FC0:  CALL   2064
02FC4:  MOVFF  134,9E8
02FC8:  MOVLW  37
02FCA:  MOVLB  9
02FCC:  MOVWF  xE9
02FCE:  MOVLB  0
02FD0:  CALL   2294
02FD4:  MOVLW  14
02FD6:  MOVWF  FF6
02FD8:  MOVLW  10
02FDA:  MOVWF  FF7
02FDC:  MOVLW  00
02FDE:  MOVWF  FF8
02FE0:  MOVLW  04
02FE2:  MOVLB  9
02FE4:  MOVWF  xC2
02FE6:  MOVLB  0
02FE8:  CALL   2064
02FEC:  MOVFF  135,9E8
02FF0:  MOVLW  37
02FF2:  MOVLB  9
02FF4:  MOVWF  xE9
02FF6:  MOVLB  0
02FF8:  CALL   2294
02FFC:  MOVLW  0D
02FFE:  BTFSS  FA6.6
03000:  GOTO   2FFE
03004:  MOVLB  E
03006:  MOVWF  xF9
03008:  MOVLW  0A
0300A:  MOVLB  0
0300C:  BTFSS  FA6.6
0300E:  GOTO   300C
03012:  MOVLB  E
03014:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
03016:  MOVLW  20
03018:  MOVWF  FF6
0301A:  MOVLW  10
0301C:  MOVWF  FF7
0301E:  MOVLW  00
03020:  MOVWF  FF8
03022:  MOVLW  11
03024:  MOVLB  9
03026:  MOVWF  xC2
03028:  MOVLB  0
0302A:  CALL   2064
0302E:  MOVFF  139,9E8
03032:  MOVLW  37
03034:  MOVLB  9
03036:  MOVWF  xE9
03038:  MOVLB  0
0303A:  CALL   2294
0303E:  MOVFF  138,9E8
03042:  MOVLW  37
03044:  MOVLB  9
03046:  MOVWF  xE9
03048:  MOVLB  0
0304A:  CALL   2294
0304E:  MOVFF  137,9E8
03052:  MOVLW  37
03054:  MOVLB  9
03056:  MOVWF  xE9
03058:  MOVLB  0
0305A:  CALL   2294
0305E:  MOVFF  136,9E8
03062:  MOVLW  37
03064:  MOVLB  9
03066:  MOVWF  xE9
03068:  MOVLB  0
0306A:  CALL   2294
0306E:  MOVLW  0D
03070:  BTFSS  FA6.6
03072:  GOTO   3070
03076:  MOVLB  E
03078:  MOVWF  xF9
0307A:  MOVLW  0A
0307C:  MOVLB  0
0307E:  BTFSS  FA6.6
03080:  GOTO   307E
03084:  MOVLB  E
03086:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
03088:  MOVLW  3A
0308A:  MOVWF  FF6
0308C:  MOVLW  10
0308E:  MOVWF  FF7
03090:  MOVLW  00
03092:  MOVWF  FF8
03094:  MOVLW  0E
03096:  MOVLB  9
03098:  MOVWF  xC2
0309A:  MOVLB  0
0309C:  CALL   2064
030A0:  MOVFF  13D,9E8
030A4:  MOVLW  37
030A6:  MOVLB  9
030A8:  MOVWF  xE9
030AA:  MOVLB  0
030AC:  CALL   2294
030B0:  MOVFF  13C,9E8
030B4:  MOVLW  37
030B6:  MOVLB  9
030B8:  MOVWF  xE9
030BA:  MOVLB  0
030BC:  CALL   2294
030C0:  MOVFF  13B,9E8
030C4:  MOVLW  37
030C6:  MOVLB  9
030C8:  MOVWF  xE9
030CA:  MOVLB  0
030CC:  CALL   2294
030D0:  MOVFF  13A,9E8
030D4:  MOVLW  37
030D6:  MOVLB  9
030D8:  MOVWF  xE9
030DA:  MOVLB  0
030DC:  CALL   2294
030E0:  MOVLW  0D
030E2:  BTFSS  FA6.6
030E4:  GOTO   30E2
030E8:  MOVLB  E
030EA:  MOVWF  xF9
030EC:  MOVLW  0A
030EE:  MOVLB  0
030F0:  BTFSS  FA6.6
030F2:  GOTO   30F0
030F6:  MOVLB  E
030F8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
030FA:  MOVLW  50
030FC:  MOVWF  FF6
030FE:  MOVLW  10
03100:  MOVWF  FF7
03102:  MOVLW  00
03104:  MOVWF  FF8
03106:  MOVLW  0E
03108:  MOVLB  9
0310A:  MOVWF  xC2
0310C:  MOVLB  0
0310E:  CALL   2064
03112:  MOVFF  13E,9E8
03116:  MOVLW  37
03118:  MOVLB  9
0311A:  MOVWF  xE9
0311C:  MOVLB  0
0311E:  CALL   2294
03122:  MOVLW  62
03124:  MOVWF  FF6
03126:  MOVLW  10
03128:  MOVWF  FF7
0312A:  MOVLW  00
0312C:  MOVWF  FF8
0312E:  MOVLW  04
03130:  MOVLB  9
03132:  MOVWF  xC2
03134:  MOVLB  0
03136:  CALL   2064
0313A:  MOVFF  13F,9E8
0313E:  MOVLW  37
03140:  MOVLB  9
03142:  MOVWF  xE9
03144:  MOVLB  0
03146:  CALL   2294
0314A:  MOVLW  0D
0314C:  BTFSS  FA6.6
0314E:  GOTO   314C
03152:  MOVLB  E
03154:  MOVWF  xF9
03156:  MOVLW  0A
03158:  MOVLB  0
0315A:  BTFSS  FA6.6
0315C:  GOTO   315A
03160:  MOVLB  E
03162:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03164:  MOVLW  6E
03166:  MOVWF  FF6
03168:  MOVLW  10
0316A:  MOVWF  FF7
0316C:  MOVLW  00
0316E:  MOVWF  FF8
03170:  MOVLW  14
03172:  MOVLB  9
03174:  MOVWF  xC2
03176:  MOVLB  0
03178:  CALL   2064
0317C:  MOVFF  143,9E8
03180:  MOVLW  37
03182:  MOVLB  9
03184:  MOVWF  xE9
03186:  MOVLB  0
03188:  CALL   2294
0318C:  MOVFF  142,9E8
03190:  MOVLW  37
03192:  MOVLB  9
03194:  MOVWF  xE9
03196:  MOVLB  0
03198:  CALL   2294
0319C:  MOVFF  141,9E8
031A0:  MOVLW  37
031A2:  MOVLB  9
031A4:  MOVWF  xE9
031A6:  MOVLB  0
031A8:  CALL   2294
031AC:  MOVFF  140,9E8
031B0:  MOVLW  37
031B2:  MOVLB  9
031B4:  MOVWF  xE9
031B6:  MOVLB  0
031B8:  CALL   2294
031BC:  MOVLW  0D
031BE:  BTFSS  FA6.6
031C0:  GOTO   31BE
031C4:  MOVLB  E
031C6:  MOVWF  xF9
031C8:  MOVLW  0A
031CA:  MOVLB  0
031CC:  BTFSS  FA6.6
031CE:  GOTO   31CC
031D2:  MOVLB  E
031D4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
031D6:  MOVLW  8A
031D8:  MOVWF  FF6
031DA:  MOVLW  10
031DC:  MOVWF  FF7
031DE:  MOVLW  00
031E0:  MOVWF  FF8
031E2:  MOVLW  0E
031E4:  MOVLB  9
031E6:  MOVWF  xC2
031E8:  MOVLB  0
031EA:  CALL   2064
031EE:  MOVFF  147,9E8
031F2:  MOVLW  37
031F4:  MOVLB  9
031F6:  MOVWF  xE9
031F8:  MOVLB  0
031FA:  CALL   2294
031FE:  MOVFF  146,9E8
03202:  MOVLW  37
03204:  MOVLB  9
03206:  MOVWF  xE9
03208:  MOVLB  0
0320A:  CALL   2294
0320E:  MOVFF  145,9E8
03212:  MOVLW  37
03214:  MOVLB  9
03216:  MOVWF  xE9
03218:  MOVLB  0
0321A:  CALL   2294
0321E:  MOVFF  144,9E8
03222:  MOVLW  37
03224:  MOVLB  9
03226:  MOVWF  xE9
03228:  MOVLB  0
0322A:  CALL   2294
0322E:  MOVLW  0D
03230:  BTFSS  FA6.6
03232:  GOTO   3230
03236:  MOVLB  E
03238:  MOVWF  xF9
0323A:  MOVLW  0A
0323C:  MOVLB  0
0323E:  BTFSS  FA6.6
03240:  GOTO   323E
03244:  MOVLB  E
03246:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
03248:  MOVLW  A0
0324A:  MOVWF  FF6
0324C:  MOVLW  10
0324E:  MOVWF  FF7
03250:  MOVLW  00
03252:  MOVWF  FF8
03254:  MOVLW  0E
03256:  MOVLB  9
03258:  MOVWF  xC2
0325A:  MOVLB  0
0325C:  CALL   2064
03260:  MOVFF  148,9E8
03264:  MOVLW  37
03266:  MOVLB  9
03268:  MOVWF  xE9
0326A:  MOVLB  0
0326C:  CALL   2294
03270:  MOVLW  B2
03272:  MOVWF  FF6
03274:  MOVLW  10
03276:  MOVWF  FF7
03278:  MOVLW  00
0327A:  MOVWF  FF8
0327C:  MOVLW  04
0327E:  MOVLB  9
03280:  MOVWF  xC2
03282:  MOVLB  0
03284:  CALL   2064
03288:  MOVFF  149,9E8
0328C:  MOVLW  37
0328E:  MOVLB  9
03290:  MOVWF  xE9
03292:  MOVLB  0
03294:  CALL   2294
03298:  MOVLW  0D
0329A:  BTFSS  FA6.6
0329C:  GOTO   329A
032A0:  MOVLB  E
032A2:  MOVWF  xF9
032A4:  MOVLW  0A
032A6:  MOVLB  0
032A8:  BTFSS  FA6.6
032AA:  GOTO   32A8
032AE:  MOVLB  E
032B0:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
032B2:  MOVLW  BE
032B4:  MOVWF  FF6
032B6:  MOVLW  10
032B8:  MOVWF  FF7
032BA:  MOVLW  00
032BC:  MOVWF  FF8
032BE:  MOVLW  12
032C0:  MOVLB  9
032C2:  MOVWF  xC2
032C4:  MOVLB  0
032C6:  CALL   2064
032CA:  MOVFF  14D,9E8
032CE:  MOVLW  37
032D0:  MOVLB  9
032D2:  MOVWF  xE9
032D4:  MOVLB  0
032D6:  CALL   2294
032DA:  MOVFF  14C,9E8
032DE:  MOVLW  37
032E0:  MOVLB  9
032E2:  MOVWF  xE9
032E4:  MOVLB  0
032E6:  CALL   2294
032EA:  MOVFF  14B,9E8
032EE:  MOVLW  37
032F0:  MOVLB  9
032F2:  MOVWF  xE9
032F4:  MOVLB  0
032F6:  CALL   2294
032FA:  MOVFF  14A,9E8
032FE:  MOVLW  37
03300:  MOVLB  9
03302:  MOVWF  xE9
03304:  MOVLB  0
03306:  CALL   2294
0330A:  MOVLW  0D
0330C:  BTFSS  FA6.6
0330E:  GOTO   330C
03312:  MOVLB  E
03314:  MOVWF  xF9
03316:  MOVLW  0A
03318:  MOVLB  0
0331A:  BTFSS  FA6.6
0331C:  GOTO   331A
03320:  MOVLB  E
03322:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
03324:  MOVLW  D8
03326:  MOVWF  FF6
03328:  MOVLW  10
0332A:  MOVWF  FF7
0332C:  MOVLW  00
0332E:  MOVWF  FF8
03330:  MOVLW  0E
03332:  MOVLB  9
03334:  MOVWF  xC2
03336:  MOVLB  0
03338:  CALL   2064
0333C:  MOVFF  151,9E8
03340:  MOVLW  37
03342:  MOVLB  9
03344:  MOVWF  xE9
03346:  MOVLB  0
03348:  CALL   2294
0334C:  MOVFF  150,9E8
03350:  MOVLW  37
03352:  MOVLB  9
03354:  MOVWF  xE9
03356:  MOVLB  0
03358:  CALL   2294
0335C:  MOVFF  14F,9E8
03360:  MOVLW  37
03362:  MOVLB  9
03364:  MOVWF  xE9
03366:  MOVLB  0
03368:  CALL   2294
0336C:  MOVFF  14E,9E8
03370:  MOVLW  37
03372:  MOVLB  9
03374:  MOVWF  xE9
03376:  MOVLB  0
03378:  CALL   2294
0337C:  MOVLW  0D
0337E:  BTFSS  FA6.6
03380:  GOTO   337E
03384:  MOVLB  E
03386:  MOVWF  xF9
03388:  MOVLW  0A
0338A:  MOVLB  0
0338C:  BTFSS  FA6.6
0338E:  GOTO   338C
03392:  MOVLB  E
03394:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03396:  MOVLW  EE
03398:  MOVWF  FF6
0339A:  MOVLW  10
0339C:  MOVWF  FF7
0339E:  MOVLW  00
033A0:  MOVWF  FF8
033A2:  MOVLW  0E
033A4:  MOVLB  9
033A6:  MOVWF  xC2
033A8:  MOVLB  0
033AA:  CALL   2064
033AE:  MOVFF  152,9E8
033B2:  MOVLW  37
033B4:  MOVLB  9
033B6:  MOVWF  xE9
033B8:  MOVLB  0
033BA:  CALL   2294
033BE:  MOVLW  00
033C0:  MOVWF  FF6
033C2:  MOVLW  11
033C4:  MOVWF  FF7
033C6:  MOVLW  00
033C8:  MOVWF  FF8
033CA:  MOVLW  04
033CC:  MOVLB  9
033CE:  MOVWF  xC2
033D0:  MOVLB  0
033D2:  CALL   2064
033D6:  MOVFF  153,9E8
033DA:  MOVLW  37
033DC:  MOVLB  9
033DE:  MOVWF  xE9
033E0:  MOVLB  0
033E2:  CALL   2294
033E6:  MOVLW  0D
033E8:  BTFSS  FA6.6
033EA:  GOTO   33E8
033EE:  MOVLB  E
033F0:  MOVWF  xF9
033F2:  MOVLW  0A
033F4:  MOVLB  0
033F6:  BTFSS  FA6.6
033F8:  GOTO   33F6
033FC:  MOVLB  E
033FE:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
03400:  MOVLW  0C
03402:  MOVWF  FF6
03404:  MOVLW  11
03406:  MOVWF  FF7
03408:  MOVLW  00
0340A:  MOVWF  FF8
0340C:  MOVLW  14
0340E:  MOVLB  9
03410:  MOVWF  xC2
03412:  MOVLB  0
03414:  CALL   2064
03418:  MOVFF  157,9E8
0341C:  MOVLW  37
0341E:  MOVLB  9
03420:  MOVWF  xE9
03422:  MOVLB  0
03424:  CALL   2294
03428:  MOVFF  156,9E8
0342C:  MOVLW  37
0342E:  MOVLB  9
03430:  MOVWF  xE9
03432:  MOVLB  0
03434:  CALL   2294
03438:  MOVFF  155,9E8
0343C:  MOVLW  37
0343E:  MOVLB  9
03440:  MOVWF  xE9
03442:  MOVLB  0
03444:  CALL   2294
03448:  MOVFF  154,9E8
0344C:  MOVLW  37
0344E:  MOVLB  9
03450:  MOVWF  xE9
03452:  MOVLB  0
03454:  CALL   2294
03458:  MOVLW  0D
0345A:  BTFSS  FA6.6
0345C:  GOTO   345A
03460:  MOVLB  E
03462:  MOVWF  xF9
03464:  MOVLW  0A
03466:  MOVLB  0
03468:  BTFSS  FA6.6
0346A:  GOTO   3468
0346E:  MOVLB  E
03470:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03472:  MOVLW  28
03474:  MOVWF  FF6
03476:  MOVLW  11
03478:  MOVWF  FF7
0347A:  MOVLW  00
0347C:  MOVWF  FF8
0347E:  MOVLW  0E
03480:  MOVLB  9
03482:  MOVWF  xC2
03484:  MOVLB  0
03486:  CALL   2064
0348A:  MOVFF  15B,9E8
0348E:  MOVLW  37
03490:  MOVLB  9
03492:  MOVWF  xE9
03494:  MOVLB  0
03496:  CALL   2294
0349A:  MOVFF  15A,9E8
0349E:  MOVLW  37
034A0:  MOVLB  9
034A2:  MOVWF  xE9
034A4:  MOVLB  0
034A6:  CALL   2294
034AA:  MOVFF  159,9E8
034AE:  MOVLW  37
034B0:  MOVLB  9
034B2:  MOVWF  xE9
034B4:  MOVLB  0
034B6:  CALL   2294
034BA:  MOVFF  158,9E8
034BE:  MOVLW  37
034C0:  MOVLB  9
034C2:  MOVWF  xE9
034C4:  MOVLB  0
034C6:  CALL   2294
034CA:  MOVLW  0D
034CC:  BTFSS  FA6.6
034CE:  GOTO   34CC
034D2:  MOVLB  E
034D4:  MOVWF  xF9
034D6:  MOVLW  0A
034D8:  MOVLB  0
034DA:  BTFSS  FA6.6
034DC:  GOTO   34DA
034E0:  MOVLB  E
034E2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
034E4:  MOVLW  3E
034E6:  MOVWF  FF6
034E8:  MOVLW  11
034EA:  MOVWF  FF7
034EC:  MOVLW  00
034EE:  MOVWF  FF8
034F0:  MOVLW  0E
034F2:  MOVLB  9
034F4:  MOVWF  xC2
034F6:  MOVLB  0
034F8:  CALL   2064
034FC:  MOVFF  15C,9E8
03500:  MOVLW  37
03502:  MOVLB  9
03504:  MOVWF  xE9
03506:  MOVLB  0
03508:  CALL   2294
0350C:  MOVLW  50
0350E:  MOVWF  FF6
03510:  MOVLW  11
03512:  MOVWF  FF7
03514:  MOVLW  00
03516:  MOVWF  FF8
03518:  MOVLW  04
0351A:  MOVLB  9
0351C:  MOVWF  xC2
0351E:  MOVLB  0
03520:  CALL   2064
03524:  MOVFF  15D,9E8
03528:  MOVLW  37
0352A:  MOVLB  9
0352C:  MOVWF  xE9
0352E:  MOVLB  0
03530:  CALL   2294
03534:  MOVLW  0D
03536:  BTFSS  FA6.6
03538:  GOTO   3536
0353C:  MOVLB  E
0353E:  MOVWF  xF9
03540:  MOVLW  0A
03542:  MOVLB  0
03544:  BTFSS  FA6.6
03546:  GOTO   3544
0354A:  MOVLB  E
0354C:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
0354E:  MOVLW  5C
03550:  MOVWF  FF6
03552:  MOVLW  11
03554:  MOVWF  FF7
03556:  MOVLW  00
03558:  MOVWF  FF8
0355A:  MOVLW  12
0355C:  MOVLB  9
0355E:  MOVWF  xC2
03560:  MOVLB  0
03562:  CALL   2064
03566:  MOVFF  161,9E8
0356A:  MOVLW  37
0356C:  MOVLB  9
0356E:  MOVWF  xE9
03570:  MOVLB  0
03572:  CALL   2294
03576:  MOVFF  160,9E8
0357A:  MOVLW  37
0357C:  MOVLB  9
0357E:  MOVWF  xE9
03580:  MOVLB  0
03582:  CALL   2294
03586:  MOVFF  15F,9E8
0358A:  MOVLW  37
0358C:  MOVLB  9
0358E:  MOVWF  xE9
03590:  MOVLB  0
03592:  CALL   2294
03596:  MOVFF  15E,9E8
0359A:  MOVLW  37
0359C:  MOVLB  9
0359E:  MOVWF  xE9
035A0:  MOVLB  0
035A2:  CALL   2294
035A6:  MOVLW  0D
035A8:  BTFSS  FA6.6
035AA:  GOTO   35A8
035AE:  MOVLB  E
035B0:  MOVWF  xF9
035B2:  MOVLW  0A
035B4:  MOVLB  0
035B6:  BTFSS  FA6.6
035B8:  GOTO   35B6
035BC:  MOVLB  E
035BE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
035C0:  MOVLW  76
035C2:  MOVWF  FF6
035C4:  MOVLW  11
035C6:  MOVWF  FF7
035C8:  MOVLW  00
035CA:  MOVWF  FF8
035CC:  MOVLW  0E
035CE:  MOVLB  9
035D0:  MOVWF  xC2
035D2:  MOVLB  0
035D4:  CALL   2064
035D8:  MOVFF  165,9E8
035DC:  MOVLW  37
035DE:  MOVLB  9
035E0:  MOVWF  xE9
035E2:  MOVLB  0
035E4:  CALL   2294
035E8:  MOVFF  164,9E8
035EC:  MOVLW  37
035EE:  MOVLB  9
035F0:  MOVWF  xE9
035F2:  MOVLB  0
035F4:  CALL   2294
035F8:  MOVFF  163,9E8
035FC:  MOVLW  37
035FE:  MOVLB  9
03600:  MOVWF  xE9
03602:  MOVLB  0
03604:  CALL   2294
03608:  MOVFF  162,9E8
0360C:  MOVLW  37
0360E:  MOVLB  9
03610:  MOVWF  xE9
03612:  MOVLB  0
03614:  CALL   2294
03618:  MOVLW  0D
0361A:  BTFSS  FA6.6
0361C:  GOTO   361A
03620:  MOVLB  E
03622:  MOVWF  xF9
03624:  MOVLW  0A
03626:  MOVLB  0
03628:  BTFSS  FA6.6
0362A:  GOTO   3628
0362E:  MOVLB  E
03630:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03632:  MOVLW  8C
03634:  MOVWF  FF6
03636:  MOVLW  11
03638:  MOVWF  FF7
0363A:  MOVLW  00
0363C:  MOVWF  FF8
0363E:  MOVLW  0E
03640:  MOVLB  9
03642:  MOVWF  xC2
03644:  MOVLB  0
03646:  CALL   2064
0364A:  MOVFF  166,9E8
0364E:  MOVLW  37
03650:  MOVLB  9
03652:  MOVWF  xE9
03654:  MOVLB  0
03656:  CALL   2294
0365A:  MOVLW  9E
0365C:  MOVWF  FF6
0365E:  MOVLW  11
03660:  MOVWF  FF7
03662:  MOVLW  00
03664:  MOVWF  FF8
03666:  MOVLW  04
03668:  MOVLB  9
0366A:  MOVWF  xC2
0366C:  MOVLB  0
0366E:  CALL   2064
03672:  MOVFF  167,9E8
03676:  MOVLW  37
03678:  MOVLB  9
0367A:  MOVWF  xE9
0367C:  MOVLB  0
0367E:  CALL   2294
03682:  MOVLW  0D
03684:  BTFSS  FA6.6
03686:  GOTO   3684
0368A:  MOVLB  E
0368C:  MOVWF  xF9
0368E:  MOVLW  0A
03690:  MOVLB  0
03692:  BTFSS  FA6.6
03694:  GOTO   3692
03698:  MOVLB  E
0369A:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
0369C:  MOVLW  AA
0369E:  MOVWF  FF6
036A0:  MOVLW  11
036A2:  MOVWF  FF7
036A4:  MOVLW  00
036A6:  MOVWF  FF8
036A8:  MOVLB  0
036AA:  CALL   202E
036AE:  GOTO   3958 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
03FE0:  MOVLB  A
03FE2:  MOVF   x52,W
03FE4:  SUBLW  40
03FE6:  BTFSC  FD8.2
03FE8:  BRA    3FF0
03FEA:  MOVLB  0
03FEC:  GOTO   4166
03FF0:  MOVLB  0
03FF2:  MOVLB  A
03FF4:  MOVF   x53,F
03FF6:  BTFSC  FD8.2
03FF8:  BRA    4000
03FFA:  MOVLB  0
03FFC:  GOTO   4166
04000:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04002:  MOVLB  A
04004:  MOVF   x4F,W
04006:  MULLW  0C
04008:  MOVF   FF3,W
0400A:  CLRF   xEB
0400C:  MOVWF  xEA
0400E:  MOVFF  AEB,03
04012:  MOVF   xEA,W
04014:  MOVLB  0
04016:  CALL   00E6
0401A:  MOVWF  00
0401C:  TBLRD*+
0401E:  MOVFF  FF5,01
04022:  TBLRD*+
04024:  MOVFF  FF5,02
04028:  TBLRD*+
0402A:  MOVFF  FF5,03
0402E:  MOVFF  03,AEF
04032:  MOVFF  02,AEE
04036:  MOVFF  01,AED
0403A:  MOVFF  00,AEC
0403E:  MOVLB  A
04040:  MOVF   x4F,W
04042:  MULLW  0A
04044:  MOVF   FF3,W
04046:  CLRF   xF1
04048:  MOVWF  xF0
0404A:  MOVLW  22
0404C:  ADDWF  xF0,W
0404E:  MOVWF  FE9
04050:  MOVLW  01
04052:  ADDWFC xF1,W
04054:  MOVWF  FEA
04056:  MOVFF  FEF,00
0405A:  MOVFF  FEC,01
0405E:  MOVFF  FEC,02
04062:  MOVFF  FEC,03
04066:  MOVF   FED,F
04068:  MOVF   FED,F
0406A:  MOVF   FED,F
0406C:  MOVF   00,W
0406E:  ADDWF  xEC,W
04070:  MOVWF  x54
04072:  MOVF   01,W
04074:  ADDWFC xED,W
04076:  MOVWF  x55
04078:  MOVF   02,W
0407A:  ADDWFC xEE,W
0407C:  MOVWF  x56
0407E:  MOVF   03,W
04080:  ADDWFC xEF,W
04082:  MOVWF  x57
04084:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04086:  MOVFF  115,AED
0408A:  MOVFF  114,AEC
0408E:  MOVFF  113,AEB
04092:  MOVFF  112,AEA
04096:  MOVFF  A57,AF1
0409A:  MOVFF  A56,AF0
0409E:  MOVFF  A55,AEF
040A2:  MOVFF  A54,AEE
040A6:  MOVFF  A51,AF3
040AA:  MOVFF  A50,AF2
040AE:  MOVFF  A53,AF5
040B2:  MOVFF  A52,AF4
040B6:  CALL   3C88
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
040BA:  MOVLB  A
040BC:  MOVF   x4F,W
040BE:  MULLW  0A
040C0:  MOVF   FF3,W
040C2:  CLRF   xEB
040C4:  MOVWF  xEA
040C6:  MOVLW  22
040C8:  ADDWF  xEA,W
040CA:  MOVWF  FE9
040CC:  MOVLW  01
040CE:  ADDWFC xEB,W
040D0:  MOVWF  FEA
040D2:  MOVF   x52,W
040D4:  ADDWF  FEF,W
040D6:  MOVWF  00
040D8:  MOVF   x53,W
040DA:  ADDWFC FEC,W
040DC:  MOVWF  01
040DE:  MOVLW  00
040E0:  ADDWFC FEC,W
040E2:  MOVWF  02
040E4:  MOVLW  00
040E6:  ADDWFC FEC,W
040E8:  MOVWF  03
040EA:  MOVF   FED,F
040EC:  MOVF   FED,F
040EE:  MOVF   FED,F
040F0:  MOVFF  00,FEF
040F4:  MOVFF  01,FEC
040F8:  MOVFF  02,FEC
040FC:  MOVFF  03,FEC
04100:  MOVF   FED,F
04102:  MOVF   FED,F
04104:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
04106:  MOVF   x4F,W
04108:  MULLW  0A
0410A:  MOVF   FF3,W
0410C:  CLRF   xEB
0410E:  MOVWF  xEA
04110:  MOVLW  04
04112:  ADDWF  xEA,W
04114:  MOVWF  01
04116:  MOVLW  00
04118:  ADDWFC xEB,W
0411A:  MOVWF  03
0411C:  MOVF   01,W
0411E:  ADDLW  22
04120:  MOVWF  FE9
04122:  MOVLW  01
04124:  ADDWFC 03,W
04126:  MOVWF  FEA
04128:  MOVF   x52,W
0412A:  ADDWF  FEF,W
0412C:  MOVWF  00
0412E:  MOVF   x53,W
04130:  ADDWFC FEC,W
04132:  MOVWF  01
04134:  MOVLW  00
04136:  ADDWFC FEC,W
04138:  MOVWF  02
0413A:  MOVLW  00
0413C:  ADDWFC FEC,W
0413E:  MOVWF  03
04140:  MOVF   FED,F
04142:  MOVF   FED,F
04144:  MOVF   FED,F
04146:  MOVFF  00,FEF
0414A:  MOVFF  01,FEC
0414E:  MOVFF  02,FEC
04152:  MOVFF  03,FEC
04156:  MOVF   FED,F
04158:  MOVF   FED,F
0415A:  MOVF   FED,F
.................... 
....................         return;
0415C:  MOVLB  0
0415E:  GOTO   492A
....................     }
04162:  GOTO   479C
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
04166:  MOVLB  A
04168:  MOVF   x4F,W
0416A:  MULLW  0A
0416C:  MOVF   FF3,W
0416E:  CLRF   xEB
04170:  MOVWF  xEA
04172:  MOVLW  08
04174:  ADDWF  xEA,W
04176:  MOVWF  01
04178:  MOVLW  00
0417A:  ADDWFC xEB,W
0417C:  MOVWF  03
0417E:  MOVF   01,W
04180:  ADDLW  22
04182:  MOVWF  FE9
04184:  MOVLW  01
04186:  ADDWFC 03,W
04188:  MOVWF  FEA
0418A:  MOVF   FEF,W
0418C:  ADDWF  x52,W
0418E:  MOVWF  xEA
04190:  MOVLW  00
04192:  ADDWFC x53,W
04194:  MOVWF  xEB
04196:  MOVF   xEA,W
04198:  SUBLW  3F
0419A:  BTFSC  FD8.2
0419C:  BRA    41A4
0419E:  MOVLB  0
041A0:  GOTO   445A
041A4:  MOVLB  0
041A6:  MOVLB  A
041A8:  MOVF   xEB,F
041AA:  BTFSC  FD8.2
041AC:  BRA    41B4
041AE:  MOVLB  0
041B0:  GOTO   445A
041B4:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
041B6:  MOVLB  A
041B8:  MOVF   x4F,W
041BA:  MULLW  0A
041BC:  MOVF   FF3,W
041BE:  CLRF   xEB
041C0:  MOVWF  xEA
041C2:  MOVLW  08
041C4:  ADDWF  xEA,W
041C6:  MOVWF  01
041C8:  MOVLW  00
041CA:  ADDWFC xEB,W
041CC:  MOVWF  03
041CE:  MOVF   01,W
041D0:  ADDLW  22
041D2:  MOVWF  FE9
041D4:  MOVLW  01
041D6:  ADDWFC 03,W
041D8:  MOVWF  FEA
041DA:  MOVF   FEF,W
041DC:  XORLW  FF
041DE:  ADDLW  40
041E0:  MOVWF  x58
041E2:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
041E4:  MOVLW  0A
041E6:  MOVWF  FEA
041E8:  MOVLW  59
041EA:  MOVWF  FE9
041EC:  CLRF   00
041EE:  CLRF   02
041F0:  MOVFF  A58,01
041F4:  CALL   209E
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
041F8:  MOVLB  A
041FA:  MOVF   x4F,W
041FC:  MULLW  0C
041FE:  MOVF   FF3,W
04200:  CLRF   xEB
04202:  MOVWF  xEA
04204:  MOVFF  AEB,03
04208:  MOVF   xEA,W
0420A:  MOVLB  0
0420C:  CALL   00E6
04210:  MOVWF  00
04212:  TBLRD*+
04214:  MOVFF  FF5,01
04218:  TBLRD*+
0421A:  MOVFF  FF5,02
0421E:  TBLRD*+
04220:  MOVFF  FF5,03
04224:  MOVFF  03,AEF
04228:  MOVFF  02,AEE
0422C:  MOVFF  01,AED
04230:  MOVFF  00,AEC
04234:  MOVLB  A
04236:  MOVF   x4F,W
04238:  MULLW  0A
0423A:  MOVF   FF3,W
0423C:  CLRF   xF1
0423E:  MOVWF  xF0
04240:  MOVLW  22
04242:  ADDWF  xF0,W
04244:  MOVWF  FE9
04246:  MOVLW  01
04248:  ADDWFC xF1,W
0424A:  MOVWF  FEA
0424C:  MOVFF  FEF,00
04250:  MOVFF  FEC,01
04254:  MOVFF  FEC,02
04258:  MOVFF  FEC,03
0425C:  MOVF   FED,F
0425E:  MOVF   FED,F
04260:  MOVF   FED,F
04262:  MOVF   00,W
04264:  ADDWF  xEC,W
04266:  MOVWF  x99
04268:  MOVF   01,W
0426A:  ADDWFC xED,W
0426C:  MOVWF  x9A
0426E:  MOVF   02,W
04270:  ADDWFC xEE,W
04272:  MOVWF  x9B
04274:  MOVF   03,W
04276:  ADDWFC xEF,W
04278:  MOVWF  x9C
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
0427A:  MOVFF  115,AED
0427E:  MOVFF  114,AEC
04282:  MOVFF  113,AEB
04286:  MOVFF  112,AEA
0428A:  MOVFF  A9C,AF1
0428E:  MOVFF  A9B,AF0
04292:  MOVFF  A9A,AEF
04296:  MOVFF  A99,AEE
0429A:  MOVLW  0A
0429C:  MOVWF  xF3
0429E:  MOVLW  59
042A0:  MOVWF  xF2
042A2:  CLRF   xF5
042A4:  MOVFF  A58,AF4
042A8:  MOVLB  0
042AA:  CALL   3C88
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
042AE:  MOVLB  A
042B0:  MOVF   x58,W
042B2:  ADDWF  x99,W
042B4:  MOVWF  xEA
042B6:  MOVLW  00
042B8:  ADDWFC x9A,W
042BA:  MOVWF  xEB
042BC:  MOVLW  00
042BE:  ADDWFC x9B,W
042C0:  MOVWF  xEC
042C2:  MOVLW  00
042C4:  ADDWFC x9C,W
042C6:  MOVWF  xED
042C8:  MOVLW  40
042CA:  SUBWF  xEA,F
042CC:  MOVLW  00
042CE:  SUBWFB xEB,F
042D0:  MOVLW  00
042D2:  SUBWFB xEC,F
042D4:  MOVLW  00
042D6:  SUBWFB xED,F
042D8:  MOVLW  01
042DA:  SUBWF  xEA,W
042DC:  MOVWF  xDC
042DE:  MOVLW  00
042E0:  SUBWFB xEB,W
042E2:  MOVWF  xDD
042E4:  MOVLW  00
042E6:  SUBWFB xEC,W
042E8:  MOVWF  xDE
042EA:  MOVLW  00
042EC:  SUBWFB xED,W
042EE:  MOVWF  xDF
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
042F0:  MOVFF  115,AED
042F4:  MOVFF  114,AEC
042F8:  MOVFF  113,AEB
042FC:  MOVFF  112,AEA
04300:  MOVFF  ADF,AF1
04304:  MOVFF  ADE,AF0
04308:  MOVFF  ADD,AEF
0430C:  MOVFF  ADC,AEE
04310:  MOVLW  0A
04312:  MOVWF  xF3
04314:  MOVLW  9D
04316:  MOVWF  xF2
04318:  CLRF   xF7
0431A:  CLRF   xF6
0431C:  CLRF   xF5
0431E:  MOVLW  3F
04320:  MOVWF  xF4
04322:  MOVLB  0
04324:  CALL   2C1C
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
04328:  MOVLW  0A
0432A:  MOVLB  A
0432C:  MOVWF  xEB
0432E:  MOVLW  9D
04330:  MOVWF  xEA
04332:  MOVLW  3F
04334:  MOVWF  xEC
04336:  MOVLB  0
04338:  CALL   2E3C
0433C:  MOVFF  01,AE0
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
04340:  MOVLB  A
04342:  MOVF   x58,W
04344:  ADDWF  x99,F
04346:  MOVLW  00
04348:  ADDWFC x9A,F
0434A:  MOVLW  00
0434C:  ADDWFC x9B,F
0434E:  MOVLW  00
04350:  ADDWFC x9C,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04352:  MOVFF  115,AED
04356:  MOVFF  114,AEC
0435A:  MOVFF  113,AEB
0435E:  MOVFF  112,AEA
04362:  MOVFF  A9C,AF1
04366:  MOVFF  A9B,AF0
0436A:  MOVFF  A9A,AEF
0436E:  MOVFF  A99,AEE
04372:  MOVLW  0A
04374:  MOVWF  xF3
04376:  MOVLW  E0
04378:  MOVWF  xF2
0437A:  CLRF   xF5
0437C:  MOVLW  01
0437E:  MOVWF  xF4
04380:  MOVLB  0
04382:  CALL   3C88
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04386:  MOVLB  A
04388:  MOVF   x4F,W
0438A:  MULLW  0A
0438C:  MOVF   FF3,W
0438E:  CLRF   xEB
04390:  MOVWF  xEA
04392:  MOVLW  22
04394:  ADDWF  xEA,W
04396:  MOVWF  FE9
04398:  MOVLW  01
0439A:  ADDWFC xEB,W
0439C:  MOVWF  FEA
0439E:  MOVLW  01
043A0:  ADDWF  x58,W
043A2:  ADDWF  FEF,W
043A4:  MOVWF  00
043A6:  MOVLW  00
043A8:  ADDWFC FEC,W
043AA:  MOVWF  01
043AC:  MOVLW  00
043AE:  ADDWFC FEC,W
043B0:  MOVWF  02
043B2:  MOVLW  00
043B4:  ADDWFC FEC,W
043B6:  MOVWF  03
043B8:  MOVF   FED,F
043BA:  MOVF   FED,F
043BC:  MOVF   FED,F
043BE:  MOVFF  00,FEF
043C2:  MOVFF  01,FEC
043C6:  MOVFF  02,FEC
043CA:  MOVFF  03,FEC
043CE:  MOVF   FED,F
043D0:  MOVF   FED,F
043D2:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
043D4:  MOVF   x4F,W
043D6:  MULLW  0A
043D8:  MOVF   FF3,W
043DA:  CLRF   xEB
043DC:  MOVWF  xEA
043DE:  MOVLW  04
043E0:  ADDWF  xEA,W
043E2:  MOVWF  01
043E4:  MOVLW  00
043E6:  ADDWFC xEB,W
043E8:  MOVWF  03
043EA:  MOVF   01,W
043EC:  ADDLW  22
043EE:  MOVWF  FE9
043F0:  MOVLW  01
043F2:  ADDWFC 03,W
043F4:  MOVWF  FEA
043F6:  MOVLW  01
043F8:  ADDWF  x58,W
043FA:  ADDWF  FEF,W
043FC:  MOVWF  00
043FE:  MOVLW  00
04400:  ADDWFC FEC,W
04402:  MOVWF  01
04404:  MOVLW  00
04406:  ADDWFC FEC,W
04408:  MOVWF  02
0440A:  MOVLW  00
0440C:  ADDWFC FEC,W
0440E:  MOVWF  03
04410:  MOVF   FED,F
04412:  MOVF   FED,F
04414:  MOVF   FED,F
04416:  MOVFF  00,FEF
0441A:  MOVFF  01,FEC
0441E:  MOVFF  02,FEC
04422:  MOVFF  03,FEC
04426:  MOVF   FED,F
04428:  MOVF   FED,F
0442A:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
0442C:  MOVF   x4F,W
0442E:  MULLW  0A
04430:  MOVF   FF3,W
04432:  CLRF   xEB
04434:  MOVWF  xEA
04436:  MOVLW  08
04438:  ADDWF  xEA,W
0443A:  MOVWF  01
0443C:  MOVLW  00
0443E:  ADDWFC xEB,W
04440:  MOVWF  03
04442:  MOVF   01,W
04444:  ADDLW  22
04446:  MOVWF  FE9
04448:  MOVLW  01
0444A:  ADDWFC 03,W
0444C:  MOVWF  FEA
0444E:  CLRF   FEF
....................         return;
04450:  MOVLB  0
04452:  GOTO   492A
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04456:  GOTO   479C
0445A:  MOVLB  A
0445C:  MOVF   x4F,W
0445E:  MULLW  0A
04460:  MOVF   FF3,W
04462:  CLRF   xEB
04464:  MOVWF  xEA
04466:  MOVLW  08
04468:  ADDWF  xEA,W
0446A:  MOVWF  01
0446C:  MOVLW  00
0446E:  ADDWFC xEB,W
04470:  MOVWF  03
04472:  MOVF   01,W
04474:  ADDLW  22
04476:  MOVWF  FE9
04478:  MOVLW  01
0447A:  ADDWFC 03,W
0447C:  MOVWF  FEA
0447E:  MOVF   FEF,W
04480:  ADDWF  x52,W
04482:  MOVWF  xEA
04484:  MOVLW  00
04486:  ADDWFC x53,W
04488:  MOVWF  xEB
0448A:  MOVF   xEA,W
0448C:  SUBLW  3F
0448E:  BTFSC  FD8.2
04490:  BRA    4498
04492:  MOVLB  0
04494:  GOTO   479C
04498:  MOVLB  0
0449A:  MOVLB  A
0449C:  MOVF   xEB,F
0449E:  BTFSC  FD8.2
044A0:  BRA    44A8
044A2:  MOVLB  0
044A4:  GOTO   479C
044A8:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044AA:  MOVLB  A
044AC:  MOVF   x4F,W
044AE:  MULLW  0C
044B0:  MOVF   FF3,W
044B2:  CLRF   xEB
044B4:  MOVWF  xEA
044B6:  MOVFF  AEB,03
044BA:  MOVF   xEA,W
044BC:  MOVLB  0
044BE:  CALL   00E6
044C2:  MOVWF  00
044C4:  TBLRD*+
044C6:  MOVFF  FF5,01
044CA:  TBLRD*+
044CC:  MOVFF  FF5,02
044D0:  TBLRD*+
044D2:  MOVFF  FF5,03
044D6:  MOVFF  03,AEF
044DA:  MOVFF  02,AEE
044DE:  MOVFF  01,AED
044E2:  MOVFF  00,AEC
044E6:  MOVLB  A
044E8:  MOVF   x4F,W
044EA:  MULLW  0A
044EC:  MOVF   FF3,W
044EE:  CLRF   xF1
044F0:  MOVWF  xF0
044F2:  MOVLW  22
044F4:  ADDWF  xF0,W
044F6:  MOVWF  FE9
044F8:  MOVLW  01
044FA:  ADDWFC xF1,W
044FC:  MOVWF  FEA
044FE:  MOVFF  FEF,00
04502:  MOVFF  FEC,01
04506:  MOVFF  FEC,02
0450A:  MOVFF  FEC,03
0450E:  MOVF   FED,F
04510:  MOVF   FED,F
04512:  MOVF   FED,F
04514:  MOVF   00,W
04516:  ADDWF  xEC,W
04518:  MOVWF  xE1
0451A:  MOVF   01,W
0451C:  ADDWFC xED,W
0451E:  MOVWF  xE2
04520:  MOVF   02,W
04522:  ADDWFC xEE,W
04524:  MOVWF  xE3
04526:  MOVF   03,W
04528:  ADDWFC xEF,W
0452A:  MOVWF  xE4
0452C:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
0452E:  MOVFF  115,AED
04532:  MOVFF  114,AEC
04536:  MOVFF  113,AEB
0453A:  MOVFF  112,AEA
0453E:  MOVFF  AE4,AF1
04542:  MOVFF  AE3,AF0
04546:  MOVFF  AE2,AEF
0454A:  MOVFF  AE1,AEE
0454E:  MOVFF  A51,AF3
04552:  MOVFF  A50,AF2
04556:  MOVFF  A53,AF5
0455A:  MOVFF  A52,AF4
0455E:  CALL   3C88
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04562:  MOVLB  A
04564:  MOVF   x4F,W
04566:  MULLW  0A
04568:  MOVF   FF3,W
0456A:  CLRF   xEB
0456C:  MOVWF  xEA
0456E:  MOVLW  22
04570:  ADDWF  xEA,W
04572:  MOVWF  FE9
04574:  MOVLW  01
04576:  ADDWFC xEB,W
04578:  MOVWF  FEA
0457A:  MOVF   x52,W
0457C:  ADDWF  FEF,W
0457E:  MOVWF  00
04580:  MOVF   x53,W
04582:  ADDWFC FEC,W
04584:  MOVWF  01
04586:  MOVLW  00
04588:  ADDWFC FEC,W
0458A:  MOVWF  02
0458C:  MOVLW  00
0458E:  ADDWFC FEC,W
04590:  MOVWF  03
04592:  MOVF   FED,F
04594:  MOVF   FED,F
04596:  MOVF   FED,F
04598:  MOVFF  00,FEF
0459C:  MOVFF  01,FEC
045A0:  MOVFF  02,FEC
045A4:  MOVFF  03,FEC
045A8:  MOVF   FED,F
045AA:  MOVF   FED,F
045AC:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
045AE:  MOVF   x4F,W
045B0:  MULLW  0A
045B2:  MOVF   FF3,W
045B4:  CLRF   xEB
045B6:  MOVWF  xEA
045B8:  MOVLW  04
045BA:  ADDWF  xEA,W
045BC:  MOVWF  01
045BE:  MOVLW  00
045C0:  ADDWFC xEB,W
045C2:  MOVWF  03
045C4:  MOVF   01,W
045C6:  ADDLW  22
045C8:  MOVWF  FE9
045CA:  MOVLW  01
045CC:  ADDWFC 03,W
045CE:  MOVWF  FEA
045D0:  MOVF   x52,W
045D2:  ADDWF  FEF,W
045D4:  MOVWF  00
045D6:  MOVF   x53,W
045D8:  ADDWFC FEC,W
045DA:  MOVWF  01
045DC:  MOVLW  00
045DE:  ADDWFC FEC,W
045E0:  MOVWF  02
045E2:  MOVLW  00
045E4:  ADDWFC FEC,W
045E6:  MOVWF  03
045E8:  MOVF   FED,F
045EA:  MOVF   FED,F
045EC:  MOVF   FED,F
045EE:  MOVFF  00,FEF
045F2:  MOVFF  01,FEC
045F6:  MOVFF  02,FEC
045FA:  MOVFF  03,FEC
045FE:  MOVF   FED,F
04600:  MOVF   FED,F
04602:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
04604:  MOVFF  A51,AEB
04608:  MOVFF  A50,AEA
0460C:  MOVFF  A52,AEC
04610:  MOVLB  0
04612:  CALL   2E3C
04616:  MOVFF  01,AE5
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
0461A:  MOVLB  A
0461C:  MOVF   x4F,W
0461E:  MULLW  0C
04620:  MOVF   FF3,W
04622:  CLRF   xEB
04624:  MOVWF  xEA
04626:  MOVFF  AEB,03
0462A:  MOVF   xEA,W
0462C:  MOVLB  0
0462E:  CALL   00E6
04632:  MOVWF  00
04634:  TBLRD*+
04636:  MOVFF  FF5,01
0463A:  TBLRD*+
0463C:  MOVFF  FF5,02
04640:  TBLRD*+
04642:  MOVFF  FF5,03
04646:  MOVFF  03,AEF
0464A:  MOVFF  02,AEE
0464E:  MOVFF  01,AED
04652:  MOVFF  00,AEC
04656:  MOVLB  A
04658:  MOVF   x4F,W
0465A:  MULLW  0A
0465C:  MOVF   FF3,W
0465E:  CLRF   xF1
04660:  MOVWF  xF0
04662:  MOVLW  22
04664:  ADDWF  xF0,W
04666:  MOVWF  FE9
04668:  MOVLW  01
0466A:  ADDWFC xF1,W
0466C:  MOVWF  FEA
0466E:  MOVFF  FEF,00
04672:  MOVFF  FEC,01
04676:  MOVFF  FEC,02
0467A:  MOVFF  FEC,03
0467E:  MOVF   FED,F
04680:  MOVF   FED,F
04682:  MOVF   FED,F
04684:  MOVF   00,W
04686:  ADDWF  xEC,W
04688:  MOVWF  xE1
0468A:  MOVF   01,W
0468C:  ADDWFC xED,W
0468E:  MOVWF  xE2
04690:  MOVF   02,W
04692:  ADDWFC xEE,W
04694:  MOVWF  xE3
04696:  MOVF   03,W
04698:  ADDWFC xEF,W
0469A:  MOVWF  xE4
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
0469C:  MOVFF  115,AED
046A0:  MOVFF  114,AEC
046A4:  MOVFF  113,AEB
046A8:  MOVFF  112,AEA
046AC:  MOVFF  AE4,AF1
046B0:  MOVFF  AE3,AF0
046B4:  MOVFF  AE2,AEF
046B8:  MOVFF  AE1,AEE
046BC:  MOVLW  0A
046BE:  MOVWF  xF3
046C0:  MOVLW  E5
046C2:  MOVWF  xF2
046C4:  CLRF   xF5
046C6:  MOVLW  01
046C8:  MOVWF  xF4
046CA:  MOVLB  0
046CC:  CALL   3C88
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
046D0:  MOVLB  A
046D2:  MOVF   x4F,W
046D4:  MULLW  0A
046D6:  MOVF   FF3,W
046D8:  CLRF   xEB
046DA:  MOVWF  xEA
046DC:  MOVLW  22
046DE:  ADDWF  xEA,W
046E0:  MOVWF  FE9
046E2:  MOVLW  01
046E4:  ADDWFC xEB,W
046E6:  MOVWF  FEA
046E8:  MOVLW  01
046EA:  ADDWF  FEF,W
046EC:  MOVWF  00
046EE:  MOVLW  00
046F0:  ADDWFC FEC,W
046F2:  MOVWF  01
046F4:  MOVLW  00
046F6:  ADDWFC FEC,W
046F8:  MOVWF  02
046FA:  MOVLW  00
046FC:  ADDWFC FEC,W
046FE:  MOVWF  03
04700:  MOVF   FED,F
04702:  MOVF   FED,F
04704:  MOVF   FED,F
04706:  MOVFF  00,FEF
0470A:  MOVFF  01,FEC
0470E:  MOVFF  02,FEC
04712:  MOVFF  03,FEC
04716:  MOVF   FED,F
04718:  MOVF   FED,F
0471A:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
0471C:  MOVF   x4F,W
0471E:  MULLW  0A
04720:  MOVF   FF3,W
04722:  CLRF   xEB
04724:  MOVWF  xEA
04726:  MOVLW  04
04728:  ADDWF  xEA,W
0472A:  MOVWF  01
0472C:  MOVLW  00
0472E:  ADDWFC xEB,W
04730:  MOVWF  03
04732:  MOVF   01,W
04734:  ADDLW  22
04736:  MOVWF  FE9
04738:  MOVLW  01
0473A:  ADDWFC 03,W
0473C:  MOVWF  FEA
0473E:  MOVLW  01
04740:  ADDWF  FEF,W
04742:  MOVWF  00
04744:  MOVLW  00
04746:  ADDWFC FEC,W
04748:  MOVWF  01
0474A:  MOVLW  00
0474C:  ADDWFC FEC,W
0474E:  MOVWF  02
04750:  MOVLW  00
04752:  ADDWFC FEC,W
04754:  MOVWF  03
04756:  MOVF   FED,F
04758:  MOVF   FED,F
0475A:  MOVF   FED,F
0475C:  MOVFF  00,FEF
04760:  MOVFF  01,FEC
04764:  MOVFF  02,FEC
04768:  MOVFF  03,FEC
0476C:  MOVF   FED,F
0476E:  MOVF   FED,F
04770:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04772:  MOVF   x4F,W
04774:  MULLW  0A
04776:  MOVF   FF3,W
04778:  CLRF   xEB
0477A:  MOVWF  xEA
0477C:  MOVLW  08
0477E:  ADDWF  xEA,W
04780:  MOVWF  01
04782:  MOVLW  00
04784:  ADDWFC xEB,W
04786:  MOVWF  03
04788:  MOVF   01,W
0478A:  ADDLW  22
0478C:  MOVWF  FE9
0478E:  MOVLW  01
04790:  ADDWFC 03,W
04792:  MOVWF  FEA
04794:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
04796:  MOVLB  0
04798:  GOTO   492A
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
0479C:  MOVLB  A
0479E:  MOVF   x4F,W
047A0:  MULLW  0C
047A2:  MOVF   FF3,W
047A4:  CLRF   xEB
047A6:  MOVWF  xEA
047A8:  MOVFF  AEB,03
047AC:  MOVF   xEA,W
047AE:  MOVLB  0
047B0:  CALL   00E6
047B4:  MOVWF  00
047B6:  TBLRD*+
047B8:  MOVFF  FF5,01
047BC:  TBLRD*+
047BE:  MOVFF  FF5,02
047C2:  TBLRD*+
047C4:  MOVFF  FF5,03
047C8:  MOVFF  03,AEF
047CC:  MOVFF  02,AEE
047D0:  MOVFF  01,AED
047D4:  MOVFF  00,AEC
047D8:  MOVLB  A
047DA:  MOVF   x4F,W
047DC:  MULLW  0A
047DE:  MOVF   FF3,W
047E0:  CLRF   xF1
047E2:  MOVWF  xF0
047E4:  MOVLW  22
047E6:  ADDWF  xF0,W
047E8:  MOVWF  FE9
047EA:  MOVLW  01
047EC:  ADDWFC xF1,W
047EE:  MOVWF  FEA
047F0:  MOVFF  FEF,00
047F4:  MOVFF  FEC,01
047F8:  MOVFF  FEC,02
047FC:  MOVFF  FEC,03
04800:  MOVF   FED,F
04802:  MOVF   FED,F
04804:  MOVF   FED,F
04806:  MOVF   00,W
04808:  ADDWF  xEC,W
0480A:  MOVWF  xE6
0480C:  MOVF   01,W
0480E:  ADDWFC xED,W
04810:  MOVWF  xE7
04812:  MOVF   02,W
04814:  ADDWFC xEE,W
04816:  MOVWF  xE8
04818:  MOVF   03,W
0481A:  ADDWFC xEF,W
0481C:  MOVWF  xE9
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
0481E:  MOVFF  115,AED
04822:  MOVFF  114,AEC
04826:  MOVFF  113,AEB
0482A:  MOVFF  112,AEA
0482E:  MOVFF  AE9,AF1
04832:  MOVFF  AE8,AF0
04836:  MOVFF  AE7,AEF
0483A:  MOVFF  AE6,AEE
0483E:  MOVFF  A51,AF3
04842:  MOVFF  A50,AF2
04846:  MOVFF  A53,AF5
0484A:  MOVFF  A52,AF4
0484E:  MOVLB  0
04850:  CALL   3C88
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04854:  MOVLB  A
04856:  MOVF   x4F,W
04858:  MULLW  0A
0485A:  MOVF   FF3,W
0485C:  CLRF   xEB
0485E:  MOVWF  xEA
04860:  MOVLW  22
04862:  ADDWF  xEA,W
04864:  MOVWF  FE9
04866:  MOVLW  01
04868:  ADDWFC xEB,W
0486A:  MOVWF  FEA
0486C:  MOVF   x52,W
0486E:  ADDWF  FEF,W
04870:  MOVWF  00
04872:  MOVF   x53,W
04874:  ADDWFC FEC,W
04876:  MOVWF  01
04878:  MOVLW  00
0487A:  ADDWFC FEC,W
0487C:  MOVWF  02
0487E:  MOVLW  00
04880:  ADDWFC FEC,W
04882:  MOVWF  03
04884:  MOVF   FED,F
04886:  MOVF   FED,F
04888:  MOVF   FED,F
0488A:  MOVFF  00,FEF
0488E:  MOVFF  01,FEC
04892:  MOVFF  02,FEC
04896:  MOVFF  03,FEC
0489A:  MOVF   FED,F
0489C:  MOVF   FED,F
0489E:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
048A0:  MOVF   x4F,W
048A2:  MULLW  0A
048A4:  MOVF   FF3,W
048A6:  CLRF   xEB
048A8:  MOVWF  xEA
048AA:  MOVLW  04
048AC:  ADDWF  xEA,W
048AE:  MOVWF  01
048B0:  MOVLW  00
048B2:  ADDWFC xEB,W
048B4:  MOVWF  03
048B6:  MOVF   01,W
048B8:  ADDLW  22
048BA:  MOVWF  FE9
048BC:  MOVLW  01
048BE:  ADDWFC 03,W
048C0:  MOVWF  FEA
048C2:  MOVF   x52,W
048C4:  ADDWF  FEF,W
048C6:  MOVWF  00
048C8:  MOVF   x53,W
048CA:  ADDWFC FEC,W
048CC:  MOVWF  01
048CE:  MOVLW  00
048D0:  ADDWFC FEC,W
048D2:  MOVWF  02
048D4:  MOVLW  00
048D6:  ADDWFC FEC,W
048D8:  MOVWF  03
048DA:  MOVF   FED,F
048DC:  MOVF   FED,F
048DE:  MOVF   FED,F
048E0:  MOVFF  00,FEF
048E4:  MOVFF  01,FEC
048E8:  MOVFF  02,FEC
048EC:  MOVFF  03,FEC
048F0:  MOVF   FED,F
048F2:  MOVF   FED,F
048F4:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
048F6:  MOVF   x4F,W
048F8:  MULLW  0A
048FA:  MOVF   FF3,W
048FC:  CLRF   xEB
048FE:  MOVWF  xEA
04900:  MOVLW  08
04902:  ADDWF  xEA,W
04904:  MOVWF  01
04906:  MOVLW  00
04908:  ADDWFC xEB,W
0490A:  MOVWF  03
0490C:  MOVF   01,W
0490E:  ADDLW  22
04910:  MOVWF  FE9
04912:  MOVLW  01
04914:  ADDWFC 03,W
04916:  MOVWF  FEA
04918:  MOVF   FEF,W
0491A:  ADDWF  x52,W
0491C:  MOVWF  01
0491E:  MOVLW  00
04920:  ADDWFC x53,W
04922:  MOVWF  03
04924:  MOVF   01,W
04926:  MOVWF  FEF
04928:  MOVLB  0
0492A:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
0492C:  MOVLW  0A
0492E:  MOVLB  A
04930:  MOVWF  x4B
04932:  MOVLW  0A
04934:  MOVWF  x4A
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
04936:  MOVF   x4A,W
04938:  MOVWF  01
0493A:  MOVF   x4B,W
0493C:  MOVWF  03
0493E:  MOVF   01,W
04940:  MOVWF  x4C
04942:  MOVFF  03,A4D
04946:  MOVFF  A4D,FEA
0494A:  MOVFF  A4C,FE9
0494E:  CLRF   00
04950:  CLRF   02
04952:  MOVLW  40
04954:  MOVWF  01
04956:  MOVLB  0
04958:  CALL   209E
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
0495C:  MOVLB  A
0495E:  MOVF   x4A,W
04960:  MOVWF  FE9
04962:  MOVF   x4B,W
04964:  MOVWF  FEA
04966:  MOVLW  01
04968:  MOVWF  FE2
0496A:  MOVLW  2C
0496C:  MOVWF  FE1
0496E:  MOVLW  0A
04970:  MOVWF  01
04972:  MOVLB  0
04974:  MOVFF  FE6,FEE
04978:  DECFSZ 01,F
0497A:  GOTO   4974
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
0497E:  MOVLW  0A
04980:  MOVLB  A
04982:  ADDWF  x4A,W
04984:  MOVWF  FE9
04986:  MOVLW  00
04988:  ADDWFC x4B,W
0498A:  MOVWF  FEA
0498C:  MOVLW  01
0498E:  MOVWF  FE2
04990:  MOVLW  36
04992:  MOVWF  FE1
04994:  MOVLW  0A
04996:  MOVWF  01
04998:  MOVLB  0
0499A:  MOVFF  FE6,FEE
0499E:  DECFSZ 01,F
049A0:  GOTO   499A
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
049A4:  MOVLW  14
049A6:  MOVLB  A
049A8:  ADDWF  x4A,W
049AA:  MOVWF  FE9
049AC:  MOVLW  00
049AE:  ADDWFC x4B,W
049B0:  MOVWF  FEA
049B2:  MOVLW  01
049B4:  MOVWF  FE2
049B6:  MOVLW  40
049B8:  MOVWF  FE1
049BA:  MOVLW  0A
049BC:  MOVWF  01
049BE:  MOVLB  0
049C0:  MOVFF  FE6,FEE
049C4:  DECFSZ 01,F
049C6:  GOTO   49C0
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
049CA:  MOVLW  1E
049CC:  MOVLB  A
049CE:  ADDWF  x4A,W
049D0:  MOVWF  FE9
049D2:  MOVLW  00
049D4:  ADDWFC x4B,W
049D6:  MOVWF  FEA
049D8:  MOVLW  01
049DA:  MOVWF  FE2
049DC:  MOVLW  4A
049DE:  MOVWF  FE1
049E0:  MOVLW  0A
049E2:  MOVWF  01
049E4:  MOVLB  0
049E6:  MOVFF  FE6,FEE
049EA:  DECFSZ 01,F
049EC:  GOTO   49E6
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
049F0:  MOVLW  28
049F2:  MOVLB  A
049F4:  ADDWF  x4A,W
049F6:  MOVWF  FE9
049F8:  MOVLW  00
049FA:  ADDWFC x4B,W
049FC:  MOVWF  FEA
049FE:  MOVLW  01
04A00:  MOVWF  FE2
04A02:  MOVLW  54
04A04:  MOVWF  FE1
04A06:  MOVLW  0A
04A08:  MOVWF  01
04A0A:  MOVLB  0
04A0C:  MOVFF  FE6,FEE
04A10:  DECFSZ 01,F
04A12:  GOTO   4A0C
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04A16:  MOVLW  32
04A18:  MOVLB  A
04A1A:  ADDWF  x4A,W
04A1C:  MOVWF  FE9
04A1E:  MOVLW  00
04A20:  ADDWFC x4B,W
04A22:  MOVWF  FEA
04A24:  MOVLW  01
04A26:  MOVWF  FE2
04A28:  MOVLW  5E
04A2A:  MOVWF  FE1
04A2C:  MOVLW  0A
04A2E:  MOVWF  01
04A30:  MOVLB  0
04A32:  MOVFF  FE6,FEE
04A36:  DECFSZ 01,F
04A38:  GOTO   4A32
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04A3C:  MOVLW  3F
04A3E:  MOVLB  A
04A40:  ADDWF  x4A,W
04A42:  MOVWF  01
04A44:  MOVLW  00
04A46:  ADDWFC x4B,W
04A48:  MOVWF  03
04A4A:  MOVF   01,W
04A4C:  MOVWF  x4C
04A4E:  MOVFF  03,A4D
04A52:  MOVF   x4A,W
04A54:  MOVWF  01
04A56:  MOVF   x4B,W
04A58:  MOVWF  03
04A5A:  MOVF   01,W
04A5C:  MOVWF  x4E
04A5E:  MOVFF  03,A4F
04A62:  MOVFF  A4F,AEB
04A66:  MOVFF  A4E,AEA
04A6A:  MOVLW  3F
04A6C:  MOVWF  xEC
04A6E:  MOVLB  0
04A70:  CALL   2E3C
04A74:  MOVFF  A4D,FEA
04A78:  MOVFF  A4C,FE9
04A7C:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04A80:  MOVLW  0A
04A82:  MOVWF  01
04A84:  MOVLW  0A
04A86:  MOVWF  02
04A88:  GOTO   4DB4 (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
04DB0:  GOTO   492C
04DB4:  MOVFF  02,03
04DB8:  MOVF   01,W
04DBA:  MOVWF  FE1
04DBC:  MOVFF  03,FE2
04DC0:  MOVLW  09
04DC2:  MOVWF  FEA
04DC4:  MOVLW  C2
04DC6:  MOVWF  FE9
04DC8:  MOVLW  40
04DCA:  MOVWF  01
04DCC:  MOVFF  FE6,FEE
04DD0:  DECFSZ 01,F
04DD2:  GOTO   4DCC
04DD6:  MOVLW  09
04DD8:  MOVLB  A
04DDA:  MOVWF  x03
04DDC:  MOVLW  C2
04DDE:  MOVWF  x02
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
04DE0:  MOVFF  115,A07
04DE4:  MOVFF  114,A06
04DE8:  MOVFF  113,A05
04DEC:  MOVFF  112,A04
04DF0:  CLRF   x0B
04DF2:  CLRF   x0A
04DF4:  CLRF   x09
04DF6:  CLRF   x08
04DF8:  MOVLB  0
04DFA:  CALL   4A8C
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
04DFE:  MOVLB  A
04E00:  MOVF   x02,W
04E02:  MOVWF  01
04E04:  MOVF   x03,W
04E06:  MOVWF  03
04E08:  MOVF   01,W
04E0A:  MOVWF  x04
04E0C:  MOVFF  03,A05
04E10:  MOVFF  115,AED
04E14:  MOVFF  114,AEC
04E18:  MOVFF  113,AEB
04E1C:  MOVFF  112,AEA
04E20:  CLRF   xF1
04E22:  CLRF   xF0
04E24:  CLRF   xEF
04E26:  CLRF   xEE
04E28:  MOVFF  A05,AF3
04E2C:  MOVFF  A04,AF2
04E30:  CLRF   xF5
04E32:  MOVLW  40
04E34:  MOVWF  xF4
04E36:  MOVLB  0
04E38:  CALL   3C88
04E3C:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
0E374:  MOVLB  1
0E376:  MOVF   x9F,W
0E378:  MOVWF  FE9
0E37A:  MOVF   xA0,W
0E37C:  MOVWF  FEA
0E37E:  MOVFF  FEF,1A1
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0E382:  MOVLW  3C
0E384:  MOVWF  FF6
0E386:  MOVLW  12
0E388:  MOVWF  FF7
0E38A:  MOVLW  00
0E38C:  MOVWF  FF8
0E38E:  MOVLB  0
0E390:  CALL   202E
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0E394:  MOVLW  82
0E396:  MOVWF  FF6
0E398:  MOVLW  12
0E39A:  MOVWF  FF7
0E39C:  MOVLW  00
0E39E:  MOVWF  FF8
0E3A0:  MOVLW  0C
0E3A2:  MOVLB  9
0E3A4:  MOVWF  xC2
0E3A6:  MOVLB  0
0E3A8:  CALL   2064
0E3AC:  MOVFF  1A1,9E8
0E3B0:  MOVLW  37
0E3B2:  MOVLB  9
0E3B4:  MOVWF  xE9
0E3B6:  MOVLB  0
0E3B8:  CALL   2294
0E3BC:  MOVLW  90
0E3BE:  MOVWF  FF6
0E3C0:  MOVLW  12
0E3C2:  MOVWF  FF7
0E3C4:  MOVLW  00
0E3C6:  MOVWF  FF8
0E3C8:  MOVLW  04
0E3CA:  MOVLB  9
0E3CC:  MOVWF  xC2
0E3CE:  MOVLB  0
0E3D0:  CALL   2064
....................    switch(command_id)
0E3D4:  MOVLB  1
0E3D6:  MOVF   xA1,W
0E3D8:  XORLW  10
0E3DA:  MOVLB  0
0E3DC:  BTFSC  FD8.2
0E3DE:  GOTO   E4C6
0E3E2:  XORLW  01
0E3E4:  BTFSC  FD8.2
0E3E6:  GOTO   E4CA
0E3EA:  XORLW  03
0E3EC:  BTFSC  FD8.2
0E3EE:  GOTO   E4CE
0E3F2:  XORLW  13
0E3F4:  BTFSC  FD8.2
0E3F6:  GOTO   E4D2
0E3FA:  XORLW  12
0E3FC:  BTFSC  FD8.2
0E3FE:  GOTO   E4D6
0E402:  XORLW  93
0E404:  BTFSC  FD8.2
0E406:  GOTO   E4DA
0E40A:  XORLW  01
0E40C:  BTFSC  FD8.2
0E40E:  GOTO   E4EA
0E412:  XORLW  03
0E414:  BTFSC  FD8.2
0E416:  GOTO   E4FA
0E41A:  XORLW  01
0E41C:  BTFSC  FD8.2
0E41E:  GOTO   E50A
0E422:  XORLW  07
0E424:  BTFSC  FD8.2
0E426:  GOTO   E51A
0E42A:  XORLW  01
0E42C:  BTFSC  FD8.2
0E42E:  GOTO   E52A
0E432:  XORLW  03
0E434:  BTFSC  FD8.2
0E436:  GOTO   E53A
0E43A:  XORLW  01
0E43C:  BTFSC  FD8.2
0E43E:  GOTO   E54A
0E442:  XORLW  0F
0E444:  BTFSC  FD8.2
0E446:  GOTO   E55A
0E44A:  XORLW  18
0E44C:  BTFSC  FD8.2
0E44E:  GOTO   E56A
0E452:  XORLW  01
0E454:  BTFSC  FD8.2
0E456:  GOTO   E57A
0E45A:  XORLW  03
0E45C:  BTFSC  FD8.2
0E45E:  GOTO   E58A
0E462:  XORLW  01
0E464:  BTFSC  FD8.2
0E466:  GOTO   E59A
0E46A:  XORLW  07
0E46C:  BTFSC  FD8.2
0E46E:  GOTO   E5AA
0E472:  XORLW  01
0E474:  BTFSC  FD8.2
0E476:  GOTO   E5BA
0E47A:  XORLW  03
0E47C:  BTFSC  FD8.2
0E47E:  GOTO   E5CA
0E482:  XORLW  36
0E484:  BTFSC  FD8.2
0E486:  GOTO   E5D2
0E48A:  XORLW  01
0E48C:  BTFSC  FD8.2
0E48E:  GOTO   E5E2
0E492:  XORLW  03
0E494:  BTFSC  FD8.2
0E496:  GOTO   E5F2
0E49A:  XORLW  01
0E49C:  BTFSC  FD8.2
0E49E:  GOTO   E602
0E4A2:  XORLW  07
0E4A4:  BTFSC  FD8.2
0E4A6:  GOTO   E606
0E4AA:  XORLW  01
0E4AC:  BTFSC  FD8.2
0E4AE:  GOTO   E60E
0E4B2:  XORLW  03
0E4B4:  BTFSC  FD8.2
0E4B6:  GOTO   E61E
0E4BA:  XORLW  16
0E4BC:  BTFSC  FD8.2
0E4BE:  GOTO   E6FC
0E4C2:  GOTO   E908
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0E4C6:  GOTO   E91C
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0E4CA:  GOTO   E91C
....................       case 0x12:
....................          // test_adc();
....................          break;
0E4CE:  GOTO   E91C
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0E4D2:  GOTO   E91C
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0E4D6:  GOTO   E91C
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(uplink_cmt_ptr);
0E4DA:  MOVFF  1A0,1B2
0E4DE:  MOVFF  19F,1B1
0E4E2:  CALL   59C8
....................          break;
0E4E6:  GOTO   E91C
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
0E4EA:  MOVFF  1A0,1B0
0E4EE:  MOVFF  19F,1AF
0E4F2:  GOTO   5AA6
....................          break;
0E4F6:  GOTO   E91C
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
0E4FA:  MOVFF  1A0,1B0
0E4FE:  MOVFF  19F,1AF
0E502:  GOTO   5C3E
....................          break;
0E506:  GOTO   E91C
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
0E50A:  MOVFF  1A0,1B0
0E50E:  MOVFF  19F,1AF
0E512:  GOTO   5DD6
....................          break;
0E516:  GOTO   E91C
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
0E51A:  MOVFF  1A0,1B0
0E51E:  MOVFF  19F,1AF
0E522:  GOTO   612A
....................          break;
0E526:  GOTO   E91C
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
0E52A:  MOVFF  1A0,1B0
0E52E:  MOVFF  19F,1AF
0E532:  GOTO   67A4
....................          break;
0E536:  GOTO   E91C
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
0E53A:  MOVFF  1A0,1B0
0E53E:  MOVFF  19F,1AF
0E542:  GOTO   681C
....................          break;
0E546:  GOTO   E91C
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
0E54A:  MOVFF  1A0,1B0
0E54E:  MOVFF  19F,1AF
0E552:  GOTO   7020
....................          break;
0E556:  GOTO   E91C
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
0E55A:  MOVFF  1A0,1B0
0E55E:  MOVFF  19F,1AF
0E562:  GOTO   7328
....................          break;
0E566:  GOTO   E91C
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(uplink_cmt_ptr);
0E56A:  MOVFF  1A0,1B0
0E56E:  MOVFF  19F,1AF
0E572:  GOTO   7380
....................          break;
0E576:  GOTO   E91C
....................       case ID_SMF_READ:
....................          mode_smf_read(uplink_cmt_ptr);
0E57A:  MOVFF  1A0,1B0
0E57E:  MOVFF  19F,1AF
0E582:  GOTO   745C
....................          break;
0E586:  GOTO   E91C
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
0E58A:  MOVFF  1A0,1B0
0E58E:  MOVFF  19F,1AF
0E592:  GOTO   772E
....................          break;
0E596:  GOTO   E91C
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
0E59A:  MOVFF  1A0,1B0
0E59E:  MOVFF  19F,1AF
0E5A2:  GOTO   7918
....................          break;
0E5A6:  GOTO   E91C
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
0E5AA:  MOVFF  1A0,1B0
0E5AE:  MOVFF  19F,1AF
0E5B2:  GOTO   7A96
....................          break;
0E5B6:  GOTO   E91C
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
0E5BA:  MOVFF  1A0,1B0
0E5BE:  MOVFF  19F,1AF
0E5C2:  GOTO   7EA8
....................          break;
0E5C6:  GOTO   E91C
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0E5CA:  CALL   7796
....................          break;
0E5CE:  GOTO   E91C
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
0E5D2:  MOVFF  1A0,1B0
0E5D6:  MOVFF  19F,1AF
0E5DA:  GOTO   A7E4
....................          break;
0E5DE:  GOTO   E91C
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
0E5E2:  MOVFF  1A0,1B0
0E5E6:  MOVFF  19F,1AF
0E5EA:  GOTO   C532
....................          break;
0E5EE:  GOTO   E91C
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
0E5F2:  MOVFF  1A0,1B0
0E5F6:  MOVFF  19F,1AF
0E5FA:  GOTO   C814
....................          break;
0E5FE:  GOTO   E91C
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
0E602:  GOTO   E91C
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
0E606:  GOTO   C8FC
....................          break;
0E60A:  GOTO   E91C
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
0E60E:  MOVFF  1A0,1B0
0E612:  MOVFF  19F,1AF
0E616:  GOTO   E078
....................          break;
0E61A:  GOTO   E91C
....................       case 0xA6:
....................          connect_port1();
0E61E:  CALL   4F66
....................          connect_port2();
0E622:  CALL   4F6E
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
0E626:  MOVLB  9
0E628:  CLRF   xDD
0E62A:  MOVLW  0A
0E62C:  MOVWF  xDC
0E62E:  MOVLB  0
0E630:  CALL   25C4
....................          mcp4901_2_write(10);
0E634:  MOVLB  9
0E636:  CLRF   xDD
0E638:  MOVLW  0A
0E63A:  MOVWF  xDC
0E63C:  MOVLB  0
0E63E:  CALL   2602
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
0E642:  MOVLW  01
0E644:  MOVLB  9
0E646:  MOVWF  xEE
0E648:  MOVLB  0
0E64A:  CALL   2214
0E64E:  MOVFF  02,1A3
0E652:  MOVFF  01,1A2
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
0E656:  MOVLW  05
0E658:  MOVLB  9
0E65A:  MOVWF  xEE
0E65C:  MOVLB  0
0E65E:  CALL   2214
0E662:  MOVFF  02,1A5
0E666:  MOVFF  01,1A4
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
0E66A:  MOVFF  1A3,9E8
0E66E:  MOVLW  37
0E670:  MOVLB  9
0E672:  MOVWF  xE9
0E674:  MOVLB  0
0E676:  CALL   2294
0E67A:  MOVFF  1A2,9E8
0E67E:  MOVLW  37
0E680:  MOVLB  9
0E682:  MOVWF  xE9
0E684:  MOVLB  0
0E686:  CALL   2294
0E68A:  MOVLW  2C
0E68C:  BTFSS  FA6.6
0E68E:  GOTO   E68C
0E692:  MOVLB  E
0E694:  MOVWF  xF9
0E696:  MOVFF  1A5,9E8
0E69A:  MOVLW  37
0E69C:  MOVLB  9
0E69E:  MOVWF  xE9
0E6A0:  MOVLB  0
0E6A2:  CALL   2294
0E6A6:  MOVFF  1A4,9E8
0E6AA:  MOVLW  37
0E6AC:  MOVLB  9
0E6AE:  MOVWF  xE9
0E6B0:  MOVLB  0
0E6B2:  CALL   2294
0E6B6:  MOVLW  0D
0E6B8:  BTFSS  FA6.6
0E6BA:  GOTO   E6B8
0E6BE:  MOVLB  E
0E6C0:  MOVWF  xF9
0E6C2:  MOVLW  0A
0E6C4:  MOVLB  0
0E6C6:  BTFSS  FA6.6
0E6C8:  GOTO   E6C6
0E6CC:  MOVLB  E
0E6CE:  MOVWF  xF9
....................             delay_ms(1000);
0E6D0:  MOVLW  04
0E6D2:  MOVLB  1
0E6D4:  MOVWF  xAF
0E6D6:  MOVLB  0
0E6D8:  MOVLW  FA
0E6DA:  MOVLB  B
0E6DC:  MOVWF  x02
0E6DE:  MOVLB  0
0E6E0:  CALL   2000
0E6E4:  MOVLB  1
0E6E6:  DECFSZ xAF,F
0E6E8:  BRA    E6EE
0E6EA:  BRA    E6F2
0E6EC:  MOVLB  0
0E6EE:  MOVLB  0
0E6F0:  BRA    E6D8
0E6F2:  MOVLB  0
0E6F4:  GOTO   E642
....................          }
....................          break;
0E6F8:  GOTO   E91C
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0E6FC:  CALL   396A
0E700:  MOVFF  03,1A9
0E704:  MOVFF  02,1A8
0E708:  MOVFF  01,1A7
0E70C:  MOVFF  00,1A6
....................          days    = total_seconds / 86400;
0E710:  BCF    FD8.1
0E712:  MOVFF  1A9,215
0E716:  MOVFF  1A8,214
0E71A:  MOVFF  1A7,213
0E71E:  MOVFF  1A6,212
0E722:  MOVLB  2
0E724:  CLRF   x19
0E726:  MOVLW  01
0E728:  MOVWF  x18
0E72A:  MOVLW  51
0E72C:  MOVWF  x17
0E72E:  MOVLW  80
0E730:  MOVWF  x16
0E732:  MOVLB  0
0E734:  CALL   5F4A
0E738:  MOVFF  01,1AB
0E73C:  MOVFF  00,1AA
....................          hours   = (total_seconds % 86400) / 3600;
0E740:  BSF    FD8.1
0E742:  MOVLW  01
0E744:  MOVWF  FEA
0E746:  MOVLW  AF
0E748:  MOVWF  FE9
0E74A:  MOVFF  1A9,215
0E74E:  MOVFF  1A8,214
0E752:  MOVFF  1A7,213
0E756:  MOVFF  1A6,212
0E75A:  MOVLB  2
0E75C:  CLRF   x19
0E75E:  MOVLW  01
0E760:  MOVWF  x18
0E762:  MOVLW  51
0E764:  MOVWF  x17
0E766:  MOVLW  80
0E768:  MOVWF  x16
0E76A:  MOVLB  0
0E76C:  CALL   5F4A
0E770:  MOVFF  1B2,1B6
0E774:  MOVFF  1B1,1B5
0E778:  MOVFF  1B0,1B4
0E77C:  MOVFF  1AF,1B3
0E780:  MOVFF  FEA,1B8
0E784:  MOVFF  FE9,1B7
0E788:  BCF    FD8.1
0E78A:  MOVFF  1B6,215
0E78E:  MOVFF  1B5,214
0E792:  MOVFF  1B4,213
0E796:  MOVFF  1B3,212
0E79A:  MOVLB  2
0E79C:  CLRF   x19
0E79E:  CLRF   x18
0E7A0:  MOVLW  0E
0E7A2:  MOVWF  x17
0E7A4:  MOVLW  10
0E7A6:  MOVWF  x16
0E7A8:  MOVLB  0
0E7AA:  CALL   5F4A
0E7AE:  MOVFF  1B8,FEA
0E7B2:  MOVFF  1B7,FE9
0E7B6:  MOVFF  00,1AC
....................          minutes = (total_seconds % 3600) / 60;
0E7BA:  BSF    FD8.1
0E7BC:  MOVLW  01
0E7BE:  MOVWF  FEA
0E7C0:  MOVLW  AF
0E7C2:  MOVWF  FE9
0E7C4:  MOVFF  1A9,215
0E7C8:  MOVFF  1A8,214
0E7CC:  MOVFF  1A7,213
0E7D0:  MOVFF  1A6,212
0E7D4:  MOVLB  2
0E7D6:  CLRF   x19
0E7D8:  CLRF   x18
0E7DA:  MOVLW  0E
0E7DC:  MOVWF  x17
0E7DE:  MOVLW  10
0E7E0:  MOVWF  x16
0E7E2:  MOVLB  0
0E7E4:  CALL   5F4A
0E7E8:  MOVFF  1B2,1B6
0E7EC:  MOVFF  1B1,1B5
0E7F0:  MOVFF  1B0,1B4
0E7F4:  MOVFF  1AF,1B3
0E7F8:  MOVFF  FEA,1B8
0E7FC:  MOVFF  FE9,1B7
0E800:  BCF    FD8.1
0E802:  MOVFF  1B6,215
0E806:  MOVFF  1B5,214
0E80A:  MOVFF  1B4,213
0E80E:  MOVFF  1B3,212
0E812:  MOVLB  2
0E814:  CLRF   x19
0E816:  CLRF   x18
0E818:  CLRF   x17
0E81A:  MOVLW  3C
0E81C:  MOVWF  x16
0E81E:  MOVLB  0
0E820:  CALL   5F4A
0E824:  MOVFF  1B8,FEA
0E828:  MOVFF  1B7,FE9
0E82C:  MOVFF  00,1AD
....................          seconds = total_seconds % 60;
0E830:  BSF    FD8.1
0E832:  MOVLW  01
0E834:  MOVWF  FEA
0E836:  MOVLW  AF
0E838:  MOVWF  FE9
0E83A:  MOVFF  1A9,215
0E83E:  MOVFF  1A8,214
0E842:  MOVFF  1A7,213
0E846:  MOVFF  1A6,212
0E84A:  MOVLB  2
0E84C:  CLRF   x19
0E84E:  CLRF   x18
0E850:  CLRF   x17
0E852:  MOVLW  3C
0E854:  MOVWF  x16
0E856:  MOVLB  0
0E858:  CALL   5F4A
0E85C:  MOVFF  1AF,1AE
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0E860:  MOVLW  96
0E862:  MOVWF  FF6
0E864:  MOVLW  12
0E866:  MOVWF  FF7
0E868:  MOVLW  00
0E86A:  MOVWF  FF8
0E86C:  MOVLW  11
0E86E:  MOVLB  9
0E870:  MOVWF  xC2
0E872:  MOVLB  0
0E874:  CALL   2064
0E878:  MOVLW  10
0E87A:  MOVWF  FE9
0E87C:  MOVFF  1AB,1EA
0E880:  MOVFF  1AA,1E9
0E884:  CALL   8BB6
0E888:  MOVLW  AA
0E88A:  MOVWF  FF6
0E88C:  MOVLW  12
0E88E:  MOVWF  FF7
0E890:  MOVLW  00
0E892:  MOVWF  FF8
0E894:  MOVLW  07
0E896:  MOVLB  9
0E898:  MOVWF  xC2
0E89A:  MOVLB  0
0E89C:  CALL   2064
0E8A0:  MOVFF  1AC,1AF
0E8A4:  MOVLW  01
0E8A6:  MOVLB  1
0E8A8:  MOVWF  xB0
0E8AA:  MOVLB  0
0E8AC:  CALL   E2B8
0E8B0:  MOVLW  3A
0E8B2:  BTFSS  FA6.6
0E8B4:  GOTO   E8B2
0E8B8:  MOVLB  E
0E8BA:  MOVWF  xF9
0E8BC:  MOVFF  1AD,1AF
0E8C0:  MOVLW  01
0E8C2:  MOVLB  1
0E8C4:  MOVWF  xB0
0E8C6:  MOVLB  0
0E8C8:  CALL   E2B8
0E8CC:  MOVLW  3A
0E8CE:  BTFSS  FA6.6
0E8D0:  GOTO   E8CE
0E8D4:  MOVLB  E
0E8D6:  MOVWF  xF9
0E8D8:  MOVFF  1AE,1AF
0E8DC:  MOVLW  01
0E8DE:  MOVLB  1
0E8E0:  MOVWF  xB0
0E8E2:  MOVLB  0
0E8E4:  CALL   E2B8
0E8E8:  MOVLW  0D
0E8EA:  BTFSS  FA6.6
0E8EC:  GOTO   E8EA
0E8F0:  MOVLB  E
0E8F2:  MOVWF  xF9
0E8F4:  MOVLW  0A
0E8F6:  MOVLB  0
0E8F8:  BTFSS  FA6.6
0E8FA:  GOTO   E8F8
0E8FE:  MOVLB  E
0E900:  MOVWF  xF9
....................          break;
0E902:  MOVLB  0
0E904:  GOTO   E91C
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0E908:  MOVLW  C2
0E90A:  MOVWF  FF6
0E90C:  MOVLW  12
0E90E:  MOVWF  FF7
0E910:  MOVLW  00
0E912:  MOVWF  FF8
0E914:  CALL   202E
....................          break;
0E918:  GOTO   E91C
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0E91C:  MOVLW  DA
0E91E:  MOVWF  FF6
0E920:  MOVLW  12
0E922:  MOVWF  FF7
0E924:  MOVLW  00
0E926:  MOVWF  FF8
0E928:  CALL   202E
0E92C:  GOTO   E99A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
11590:  MOVLW  20
11592:  MOVWF  FF6
11594:  MOVLW  13
11596:  MOVWF  FF7
11598:  MOVLW  00
1159A:  MOVWF  FF8
1159C:  CALL   202E
....................    
....................    switch(command->frame_id)
115A0:  MOVLB  1
115A2:  MOVF   x99,W
115A4:  MOVWF  FE9
115A6:  MOVF   x9A,W
115A8:  MOVWF  FEA
115AA:  MOVF   FEF,W
115AC:  ADDLW  FC
115AE:  BTFSS  FD8.0
115B0:  BRA    115B8
115B2:  MOVLB  0
115B4:  GOTO   11610
115B8:  ADDLW  04
115BA:  MOVLB  0
115BC:  GOTO   11618
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
115C0:  MOVFF  19A,19C
115C4:  MOVFF  199,19B
115C8:  GOTO   E94E
....................          break;
115CC:  GOTO   11610
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
115D0:  MOVFF  19A,19C
115D4:  MOVFF  199,19B
115D8:  GOTO   E9B6
115DC:  MOVF   01,F
115DE:  BTFSC  FD8.2
115E0:  GOTO   115EC
....................             return TRUE; // if status is finished, return TRUE
115E4:  MOVLW  01
115E6:  MOVWF  01
115E8:  GOTO   11614
....................          }        
....................          break;
115EC:  GOTO   11610
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
115F0:  MOVFF  19A,19C
115F4:  MOVFF  199,19B
115F8:  GOTO   10F44
....................          break;
115FC:  GOTO   11610
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
11600:  MOVFF  19A,19C
11604:  MOVFF  199,19B
11608:  GOTO   112A8
....................          break;
1160C:  GOTO   11610
....................    }
....................    return FALSE;
11610:  MOVLW  00
11612:  MOVWF  01
11614:  GOTO   11B00 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0E94E:  MOVLW  38
0E950:  MOVWF  FF6
0E952:  MOVLW  13
0E954:  MOVWF  FF7
0E956:  MOVLW  00
0E958:  MOVWF  FF8
0E95A:  CALL   202E
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0E95E:  MOVLW  4E
0E960:  MOVWF  FF6
0E962:  MOVLW  13
0E964:  MOVWF  FF7
0E966:  MOVLW  00
0E968:  MOVWF  FF8
0E96A:  CALL   202E
....................    transmit_ack();
0E96E:  CALL   5652
.................... 
....................    status[0] = EXECUTING_MISSION;
0E972:  MOVLW  02
0E974:  MOVWF  4C
....................    execute_mission(command->content);
0E976:  MOVLW  03
0E978:  MOVLB  1
0E97A:  ADDWF  x9B,W
0E97C:  MOVWF  01
0E97E:  MOVLW  00
0E980:  ADDWFC x9C,W
0E982:  MOVWF  03
0E984:  MOVF   01,W
0E986:  MOVWF  x9D
0E988:  MOVFF  03,19E
0E98C:  MOVFF  19E,1A0
0E990:  MOVFF  19D,19F
0E994:  MOVLB  0
0E996:  GOTO   E374
....................    if (is_empty_flash_queue())
0E99A:  CALL   E930
0E99E:  MOVF   01,F
0E9A0:  BTFSC  FD8.2
0E9A2:  GOTO   E9AE
....................       status[0] = FINISHED;
0E9A6:  MOVLW  06
0E9A8:  MOVWF  4C
0E9AA:  GOTO   E9B2
....................    else
....................       status[0] = SMF_USE_REQ;
0E9AE:  MOVLW  04
0E9B0:  MOVWF  4C
0E9B2:  GOTO   115CC (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0E9B6:  MOVLW  68
0E9B8:  MOVWF  FF6
0E9BA:  MOVLW  13
0E9BC:  MOVWF  FF7
0E9BE:  MOVLW  00
0E9C0:  MOVWF  FF8
0E9C2:  CALL   202E
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0E9C6:  MOVLW  7C
0E9C8:  MOVWF  FF6
0E9CA:  MOVLW  13
0E9CC:  MOVWF  FF7
0E9CE:  MOVLW  00
0E9D0:  MOVWF  FF8
0E9D2:  CALL   202E
....................    transmit_status();
0E9D6:  CALL   A52C
....................    if (status[0] == FINISHED)
0E9DA:  MOVF   4C,W
0E9DC:  SUBLW  06
0E9DE:  BTFSS  FD8.2
0E9E0:  GOTO   EA00
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0E9E4:  MOVLW  9A
0E9E6:  MOVWF  FF6
0E9E8:  MOVLW  13
0E9EA:  MOVWF  FF7
0E9EC:  MOVLW  00
0E9EE:  MOVWF  FF8
0E9F0:  CALL   202E
....................       return TRUE;
0E9F4:  MOVLW  01
0E9F6:  MOVWF  01
0E9F8:  GOTO   EA08
....................    }
0E9FC:  GOTO   EA08
....................    else{
....................       return FALSE;
0EA00:  MOVLW  00
0EA02:  MOVWF  01
0EA04:  GOTO   EA08
....................    }
0EA08:  GOTO   115DC (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
10F44:  MOVLW  B6
10F46:  MOVWF  FF6
10F48:  MOVLW  13
10F4A:  MOVWF  FF7
10F4C:  MOVLW  00
10F4E:  MOVWF  FF8
10F50:  CALL   202E
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
10F54:  MOVLW  D0
10F56:  MOVWF  FF6
10F58:  MOVLW  13
10F5A:  MOVWF  FF7
10F5C:  MOVLW  00
10F5E:  MOVWF  FF8
10F60:  CALL   202E
....................     transmit_ack();
10F64:  CALL   5652
.................... 
....................     if (command->content[0] != ALLOW) {
10F68:  MOVLW  03
10F6A:  MOVLB  1
10F6C:  ADDWF  x9B,W
10F6E:  MOVWF  FE9
10F70:  MOVLW  00
10F72:  ADDWFC x9C,W
10F74:  MOVWF  FEA
10F76:  DECFSZ FEF,W
10F78:  BRA    10F7E
10F7A:  BRA    10F84
10F7C:  MOVLB  0
10F7E:  MOVLB  0
10F80:  GOTO   10F8A
10F84:  MOVLB  0
10F86:  GOTO   10F9E
....................         fprintf(PC, "\t\t-> denied\r\n");
10F8A:  MOVLW  F0
10F8C:  MOVWF  FF6
10F8E:  MOVLW  13
10F90:  MOVWF  FF7
10F92:  MOVLW  00
10F94:  MOVWF  FF8
10F96:  CALL   202E
....................         return;
10F9A:  GOTO   112A4
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
10F9E:  MOVLW  FE
10FA0:  MOVWF  FF6
10FA2:  MOVLW  13
10FA4:  MOVWF  FF7
10FA6:  MOVLW  00
10FA8:  MOVWF  FF8
10FAA:  CALL   202E
....................     status[0] = COPYING;
10FAE:  MOVLW  05
10FB0:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
10FB2:  MOVLB  1
10FB4:  CLRF   x9D
10FB6:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
10FB8:  CALL   E930
10FBC:  MOVF   01,F
10FBE:  BTFSS  FD8.2
10FC0:  GOTO   1125C
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
10FC4:  GOTO   EA0C
10FC8:  MOVFF  02,19F
10FCC:  MOVFF  01,19E
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
10FD0:  MOVLW  01
10FD2:  MOVLB  1
10FD4:  ADDWF  x9E,W
10FD6:  MOVWF  FE9
10FD8:  MOVLW  00
10FDA:  ADDWFC x9F,W
10FDC:  MOVWF  FEA
10FDE:  MOVFF  FEF,1A1
10FE2:  MOVF   x9E,W
10FE4:  MOVWF  FE9
10FE6:  MOVF   x9F,W
10FE8:  MOVWF  FEA
10FEA:  MOVFF  FEF,1A2
10FEE:  MOVLW  08
10FF0:  ADDWF  x9E,W
10FF2:  MOVWF  FE9
10FF4:  MOVLW  00
10FF6:  ADDWFC x9F,W
10FF8:  MOVWF  FEA
10FFA:  MOVFF  FEF,1A3
10FFE:  MOVFF  FEC,1A4
11002:  MOVFF  FEC,1A5
11006:  MOVFF  FEC,1A6
1100A:  MOVF   FED,F
1100C:  MOVF   FED,F
1100E:  MOVF   FED,F
11010:  MOVLW  04
11012:  ADDWF  x9E,W
11014:  MOVWF  FE9
11016:  MOVLW  00
11018:  ADDWFC x9F,W
1101A:  MOVWF  FEA
1101C:  MOVFF  FEF,1A7
11020:  MOVFF  FEC,1A8
11024:  MOVFF  FEC,1A9
11028:  MOVFF  FEC,1AA
1102C:  MOVF   FED,F
1102E:  MOVF   FED,F
11030:  MOVF   FED,F
11032:  MOVLW  0E
11034:  MOVWF  FF6
11036:  MOVLW  14
11038:  MOVWF  FF7
1103A:  MOVLW  00
1103C:  MOVWF  FF8
1103E:  MOVLW  14
11040:  MOVLB  9
11042:  MOVWF  xC2
11044:  MOVLB  0
11046:  CALL   2064
1104A:  MOVFF  1A1,1AF
1104E:  MOVLW  1B
11050:  MOVLB  1
11052:  MOVWF  xB0
11054:  MOVLB  0
11056:  CALL   E2B8
1105A:  MOVLW  24
1105C:  MOVWF  FF6
1105E:  MOVLW  14
11060:  MOVWF  FF7
11062:  MOVLW  00
11064:  MOVWF  FF8
11066:  MOVLW  09
11068:  MOVLB  9
1106A:  MOVWF  xC2
1106C:  MOVLB  0
1106E:  CALL   2064
11072:  MOVFF  1A2,1AF
11076:  MOVLW  1B
11078:  MOVLB  1
1107A:  MOVWF  xB0
1107C:  MOVLB  0
1107E:  CALL   E2B8
11082:  MOVLW  2F
11084:  MOVWF  FF6
11086:  MOVLW  14
11088:  MOVWF  FF7
1108A:  MOVLW  00
1108C:  MOVWF  FF8
1108E:  MOVLW  06
11090:  MOVLB  9
11092:  MOVWF  xC2
11094:  MOVLB  0
11096:  CALL   2064
1109A:  MOVLW  41
1109C:  MOVWF  FE9
1109E:  MOVFF  1A6,1AE
110A2:  MOVFF  1A5,1AD
110A6:  MOVFF  1A4,1AC
110AA:  MOVFF  1A3,1AB
110AE:  CALL   EA6E
110B2:  MOVLW  38
110B4:  MOVWF  FF6
110B6:  MOVLW  14
110B8:  MOVWF  FF7
110BA:  MOVLW  00
110BC:  MOVWF  FF8
110BE:  MOVLW  06
110C0:  MOVLB  9
110C2:  MOVWF  xC2
110C4:  MOVLB  0
110C6:  CALL   2064
110CA:  MOVLW  41
110CC:  MOVWF  FE9
110CE:  MOVFF  1AA,1AE
110D2:  MOVFF  1A9,1AD
110D6:  MOVFF  1A8,1AC
110DA:  MOVFF  1A7,1AB
110DE:  CALL   EA6E
110E2:  MOVLW  0D
110E4:  BTFSS  FA6.6
110E6:  GOTO   110E4
110EA:  MOVLB  E
110EC:  MOVWF  xF9
110EE:  MOVLW  0A
110F0:  MOVLB  0
110F2:  BTFSS  FA6.6
110F4:  GOTO   110F2
110F8:  MOVLB  E
110FA:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
110FC:  MOVLW  01
110FE:  MOVLB  1
11100:  ADDWF  x9E,W
11102:  MOVWF  FE9
11104:  MOVLW  00
11106:  ADDWFC x9F,W
11108:  MOVWF  FEA
1110A:  MOVF   FEF,W
1110C:  XORLW  00
1110E:  MOVLB  0
11110:  BTFSC  FD8.2
11112:  GOTO   1112A
11116:  XORLW  01
11118:  BTFSC  FD8.2
1111A:  GOTO   1113A
1111E:  XORLW  03
11120:  BTFSC  FD8.2
11122:  GOTO   1114A
11126:  GOTO   1115A
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
1112A:  MOVFF  19F,1A2
1112E:  MOVFF  19E,1A1
11132:  GOTO   F068
....................                 break;
11136:  GOTO   111B4
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
1113A:  MOVFF  19F,1A2
1113E:  MOVFF  19E,1A1
11142:  GOTO   10188
....................                 break;
11146:  GOTO   111B4
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
1114A:  MOVFF  19F,1A2
1114E:  MOVFF  19E,1A1
11152:  GOTO   108C2
....................                 break;
11156:  GOTO   111B4
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
1115A:  MOVLW  01
1115C:  MOVLB  1
1115E:  ADDWF  x9E,W
11160:  MOVWF  FE9
11162:  MOVLW  00
11164:  ADDWFC x9F,W
11166:  MOVWF  FEA
11168:  MOVFF  FEF,1A1
1116C:  MOVLW  44
1116E:  MOVWF  FF6
11170:  MOVLW  14
11172:  MOVWF  FF7
11174:  MOVLW  00
11176:  MOVWF  FF8
11178:  MOVLW  17
1117A:  MOVLB  9
1117C:  MOVWF  xC2
1117E:  MOVLB  0
11180:  CALL   2064
11184:  MOVFF  1A1,1AF
11188:  MOVLW  1B
1118A:  MOVLB  1
1118C:  MOVWF  xB0
1118E:  MOVLB  0
11190:  CALL   E2B8
11194:  MOVLW  0D
11196:  BTFSS  FA6.6
11198:  GOTO   11196
1119C:  MOVLB  E
1119E:  MOVWF  xF9
111A0:  MOVLW  0A
111A2:  MOVLB  0
111A4:  BTFSS  FA6.6
111A6:  GOTO   111A4
111AA:  MOVLB  E
111AC:  MOVWF  xF9
....................                 break;
111AE:  MOVLB  0
111B0:  GOTO   111B4
....................         }
....................          processed_count++;
111B4:  MOVLB  1
111B6:  INCF   x9D,F
....................          unsigned int8 smf_id;
....................          switch (smf_data->mission_id) {
111B8:  MOVF   x9E,W
111BA:  MOVWF  FE9
111BC:  MOVF   x9F,W
111BE:  MOVWF  FEA
111C0:  MOVF   FEF,W
111C2:  XORLW  00
111C4:  MOVLB  0
111C6:  BTFSC  FD8.2
111C8:  GOTO   11200
111CC:  XORLW  01
111CE:  BTFSC  FD8.2
111D0:  GOTO   1120C
111D4:  XORLW  03
111D6:  BTFSC  FD8.2
111D8:  GOTO   11218
111DC:  XORLW  01
111DE:  BTFSC  FD8.2
111E0:  GOTO   11224
111E4:  XORLW  07
111E6:  BTFSC  FD8.2
111E8:  GOTO   11230
111EC:  XORLW  01
111EE:  BTFSC  FD8.2
111F0:  GOTO   1123C
111F4:  XORLW  03
111F6:  BTFSC  FD8.2
111F8:  GOTO   11248
111FC:  GOTO   11254
....................             case CIGS_DATA_TABLE:
....................                smf_id = DATA_ID_CIGS_DATA_TABLE;
11200:  MOVLW  C0
11202:  MOVLB  1
11204:  MOVWF  xA0
....................                break;
11206:  MOVLB  0
11208:  GOTO   11258
....................             case CIGS_PICLOG_DATA:
....................                smf_id = DATA_ID_CIGS_PICLOG;
1120C:  MOVLW  C1
1120E:  MOVLB  1
11210:  MOVWF  xA0
....................                break;
11212:  MOVLB  0
11214:  GOTO   11258
....................             case CIGS_ENVIRO_DATA:
....................                smf_id = DATA_ID_CIGS_ENVIRO;
11218:  MOVLW  C2
1121A:  MOVLB  1
1121C:  MOVWF  xA0
....................                break;
1121E:  MOVLB  0
11220:  GOTO   11258
....................             case CIGS_IV1_HEADER:
....................                smf_id = DATA_ID_CIGS_IV1_HEADER;
11224:  MOVLW  C3
11226:  MOVLB  1
11228:  MOVWF  xA0
....................                break;
1122A:  MOVLB  0
1122C:  GOTO   11258
....................             case CIGS_IV1_DATA:
....................                smf_id = DATA_ID_CIGS_IV1_DATA;
11230:  MOVLW  C4
11232:  MOVLB  1
11234:  MOVWF  xA0
....................                break;
11236:  MOVLB  0
11238:  GOTO   11258
....................             case CIGS_IV2_HEADER:
....................                smf_id = DATA_ID_CIGS_IV2_HEADER;
1123C:  MOVLW  C5
1123E:  MOVLB  1
11240:  MOVWF  xA0
....................                break;
11242:  MOVLB  0
11244:  GOTO   11258
....................             case CIGS_IV2_DATA:
....................                smf_id = DATA_ID_CIGS_IV2_DATA;
11248:  MOVLW  C6
1124A:  MOVLB  1
1124C:  MOVWF  xA0
....................                 break;
1124E:  MOVLB  0
11250:  GOTO   11258
....................             default:
....................                 break;
11254:  GOTO   11258
....................          }
11258:  GOTO   10FB8
....................          
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
1125C:  MOVLW  60
1125E:  MOVWF  FF6
11260:  MOVLW  14
11262:  MOVWF  FF7
11264:  MOVLW  00
11266:  MOVWF  FF8
11268:  MOVLW  0F
1126A:  MOVLB  9
1126C:  MOVWF  xC2
1126E:  MOVLB  0
11270:  CALL   2064
11274:  MOVFF  19D,1AF
11278:  MOVLW  1B
1127A:  MOVLB  1
1127C:  MOVWF  xB0
1127E:  MOVLB  0
11280:  CALL   E2B8
11284:  MOVLW  71
11286:  MOVWF  FF6
11288:  MOVLW  14
1128A:  MOVWF  FF7
1128C:  MOVLW  00
1128E:  MOVWF  FF8
11290:  MOVLW  0D
11292:  MOVLB  9
11294:  MOVWF  xC2
11296:  MOVLB  0
11298:  CALL   2064
....................       status[1] = 0xC0;
1129C:  MOVLW  C0
1129E:  MOVWF  4D
....................       status[0] = FINISHED;
112A0:  MOVLW  06
112A2:  MOVWF  4C
112A4:  GOTO   115FC (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
112A8:  MOVLW  80
112AA:  MOVWF  FF6
112AC:  MOVLW  14
112AE:  MOVWF  FF7
112B0:  MOVLW  00
112B2:  MOVWF  FF8
112B4:  CALL   202E
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
112B8:  MOVLW  94
112BA:  MOVWF  FF6
112BC:  MOVLW  14
112BE:  MOVWF  FF7
112C0:  MOVLW  00
112C2:  MOVWF  FF8
112C4:  CALL   202E
....................    transmit_ack();
112C8:  CALL   5652
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
112CC:  MOVLW  03
112CE:  MOVLB  1
112D0:  ADDWF  x9B,W
112D2:  MOVWF  FE9
112D4:  MOVLW  00
112D6:  ADDWFC x9C,W
112D8:  MOVWF  FEA
112DA:  MOVF   FEF,W
112DC:  CLRF   xA9
112DE:  CLRF   xA8
112E0:  CLRF   xA7
112E2:  MOVWF  xA6
112E4:  MOVFF  1A6,1A9
112E8:  CLRF   xA6
112EA:  CLRF   xA7
112EC:  CLRF   xA8
112EE:  MOVLW  04
112F0:  ADDWF  x9B,W
112F2:  MOVWF  FE9
112F4:  MOVLW  00
112F6:  ADDWFC x9C,W
112F8:  MOVWF  FEA
112FA:  MOVF   FEF,W
112FC:  CLRF   xAE
112FE:  CLRF   xAD
11300:  CLRF   xAC
11302:  MOVWF  xAB
11304:  MOVFF  1AC,03
11308:  MOVFF  1AB,02
1130C:  CLRF   00
1130E:  CLRF   01
11310:  MOVF   00,W
11312:  IORWF  xA6,F
11314:  MOVF   01,W
11316:  IORWF  xA7,F
11318:  MOVF   02,W
1131A:  IORWF  xA8,F
1131C:  MOVF   03,W
1131E:  IORWF  xA9,F
11320:  MOVLW  05
11322:  ADDWF  x9B,W
11324:  MOVWF  FE9
11326:  MOVLW  00
11328:  ADDWFC x9C,W
1132A:  MOVWF  FEA
1132C:  MOVF   FEF,W
1132E:  CLRF   xAE
11330:  CLRF   xAD
11332:  CLRF   xAC
11334:  MOVWF  xAB
11336:  MOVFF  1AD,03
1133A:  MOVFF  1AC,02
1133E:  MOVFF  1AB,01
11342:  CLRF   00
11344:  MOVF   00,W
11346:  IORWF  xA6,F
11348:  MOVF   01,W
1134A:  IORWF  xA7,F
1134C:  MOVF   02,W
1134E:  IORWF  xA8,F
11350:  MOVF   03,W
11352:  IORWF  xA9,F
11354:  MOVLW  06
11356:  ADDWF  x9B,W
11358:  MOVWF  FE9
1135A:  MOVLW  00
1135C:  ADDWFC x9C,W
1135E:  MOVWF  FEA
11360:  MOVF   FEF,W
11362:  MOVWF  00
11364:  CLRF   01
11366:  CLRF   02
11368:  CLRF   03
1136A:  MOVF   00,W
1136C:  IORWF  xA6,W
1136E:  MOVWF  x9D
11370:  MOVF   01,W
11372:  IORWF  xA7,W
11374:  MOVWF  x9E
11376:  MOVF   02,W
11378:  IORWF  xA8,W
1137A:  MOVWF  x9F
1137C:  MOVF   03,W
1137E:  IORWF  xA9,W
11380:  MOVWF  xA0
.................... 
....................    set_current_sec(total_seconds);
11382:  MOVFF  1A0,1A9
11386:  MOVFF  19F,1A8
1138A:  MOVFF  19E,1A7
1138E:  MOVFF  19D,1A6
11392:  MOVLB  0
11394:  GOTO   FF9A
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
11398:  BCF    FD8.1
1139A:  MOVFF  1A0,215
1139E:  MOVFF  19F,214
113A2:  MOVFF  19E,213
113A6:  MOVFF  19D,212
113AA:  MOVLB  2
113AC:  CLRF   x19
113AE:  MOVLW  01
113B0:  MOVWF  x18
113B2:  MOVLW  51
113B4:  MOVWF  x17
113B6:  MOVLW  80
113B8:  MOVWF  x16
113BA:  MOVLB  0
113BC:  CALL   5F4A
113C0:  MOVFF  01,1A2
113C4:  MOVFF  00,1A1
....................    hours   = (total_seconds % 86400) / 3600;
113C8:  BSF    FD8.1
113CA:  MOVLW  01
113CC:  MOVWF  FEA
113CE:  MOVLW  A6
113D0:  MOVWF  FE9
113D2:  MOVFF  1A0,215
113D6:  MOVFF  19F,214
113DA:  MOVFF  19E,213
113DE:  MOVFF  19D,212
113E2:  MOVLB  2
113E4:  CLRF   x19
113E6:  MOVLW  01
113E8:  MOVWF  x18
113EA:  MOVLW  51
113EC:  MOVWF  x17
113EE:  MOVLW  80
113F0:  MOVWF  x16
113F2:  MOVLB  0
113F4:  CALL   5F4A
113F8:  MOVFF  1A9,1AD
113FC:  MOVFF  1A8,1AC
11400:  MOVFF  1A7,1AB
11404:  MOVFF  1A6,1AA
11408:  MOVFF  FEA,1AF
1140C:  MOVFF  FE9,1AE
11410:  BCF    FD8.1
11412:  MOVFF  1AD,215
11416:  MOVFF  1AC,214
1141A:  MOVFF  1AB,213
1141E:  MOVFF  1AA,212
11422:  MOVLB  2
11424:  CLRF   x19
11426:  CLRF   x18
11428:  MOVLW  0E
1142A:  MOVWF  x17
1142C:  MOVLW  10
1142E:  MOVWF  x16
11430:  MOVLB  0
11432:  CALL   5F4A
11436:  MOVFF  1AF,FEA
1143A:  MOVFF  1AE,FE9
1143E:  MOVFF  00,1A3
....................    minutes = (total_seconds % 3600) / 60;
11442:  BSF    FD8.1
11444:  MOVLW  01
11446:  MOVWF  FEA
11448:  MOVLW  A6
1144A:  MOVWF  FE9
1144C:  MOVFF  1A0,215
11450:  MOVFF  19F,214
11454:  MOVFF  19E,213
11458:  MOVFF  19D,212
1145C:  MOVLB  2
1145E:  CLRF   x19
11460:  CLRF   x18
11462:  MOVLW  0E
11464:  MOVWF  x17
11466:  MOVLW  10
11468:  MOVWF  x16
1146A:  MOVLB  0
1146C:  CALL   5F4A
11470:  MOVFF  1A9,1AD
11474:  MOVFF  1A8,1AC
11478:  MOVFF  1A7,1AB
1147C:  MOVFF  1A6,1AA
11480:  MOVFF  FEA,1AF
11484:  MOVFF  FE9,1AE
11488:  BCF    FD8.1
1148A:  MOVFF  1AD,215
1148E:  MOVFF  1AC,214
11492:  MOVFF  1AB,213
11496:  MOVFF  1AA,212
1149A:  MOVLB  2
1149C:  CLRF   x19
1149E:  CLRF   x18
114A0:  CLRF   x17
114A2:  MOVLW  3C
114A4:  MOVWF  x16
114A6:  MOVLB  0
114A8:  CALL   5F4A
114AC:  MOVFF  1AF,FEA
114B0:  MOVFF  1AE,FE9
114B4:  MOVFF  00,1A4
....................    seconds = total_seconds % 60;
114B8:  BSF    FD8.1
114BA:  MOVLW  01
114BC:  MOVWF  FEA
114BE:  MOVLW  A6
114C0:  MOVWF  FE9
114C2:  MOVFF  1A0,215
114C6:  MOVFF  19F,214
114CA:  MOVFF  19E,213
114CE:  MOVFF  19D,212
114D2:  MOVLB  2
114D4:  CLRF   x19
114D6:  CLRF   x18
114D8:  CLRF   x17
114DA:  MOVLW  3C
114DC:  MOVWF  x16
114DE:  MOVLB  0
114E0:  CALL   5F4A
114E4:  MOVFF  1A6,1A5
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
114E8:  MOVLW  AE
114EA:  MOVWF  FF6
114EC:  MOVLW  14
114EE:  MOVWF  FF7
114F0:  MOVLW  00
114F2:  MOVWF  FF8
114F4:  MOVLW  11
114F6:  MOVLB  9
114F8:  MOVWF  xC2
114FA:  MOVLB  0
114FC:  CALL   2064
11500:  MOVLW  10
11502:  MOVWF  FE9
11504:  MOVFF  1A2,1EA
11508:  MOVFF  1A1,1E9
1150C:  CALL   8BB6
11510:  MOVLW  C2
11512:  MOVWF  FF6
11514:  MOVLW  14
11516:  MOVWF  FF7
11518:  MOVLW  00
1151A:  MOVWF  FF8
1151C:  MOVLW  07
1151E:  MOVLB  9
11520:  MOVWF  xC2
11522:  MOVLB  0
11524:  CALL   2064
11528:  MOVFF  1A3,1AF
1152C:  MOVLW  01
1152E:  MOVLB  1
11530:  MOVWF  xB0
11532:  MOVLB  0
11534:  CALL   E2B8
11538:  MOVLW  3A
1153A:  BTFSS  FA6.6
1153C:  GOTO   1153A
11540:  MOVLB  E
11542:  MOVWF  xF9
11544:  MOVFF  1A4,1AF
11548:  MOVLW  01
1154A:  MOVLB  1
1154C:  MOVWF  xB0
1154E:  MOVLB  0
11550:  CALL   E2B8
11554:  MOVLW  3A
11556:  BTFSS  FA6.6
11558:  GOTO   11556
1155C:  MOVLB  E
1155E:  MOVWF  xF9
11560:  MOVFF  1A5,1AF
11564:  MOVLW  01
11566:  MOVLB  1
11568:  MOVWF  xB0
1156A:  MOVLB  0
1156C:  CALL   E2B8
11570:  MOVLW  0D
11572:  BTFSS  FA6.6
11574:  GOTO   11572
11578:  MOVLB  E
1157A:  MOVWF  xF9
1157C:  MOVLW  0A
1157E:  MOVLB  0
11580:  BTFSS  FA6.6
11582:  GOTO   11580
11586:  MOVLB  E
11588:  MOVWF  xF9
1158A:  MOVLB  0
1158C:  GOTO   1160C (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/cigs_mode_mission.c"
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0A7E4:  MOVLW  DA
0A7E6:  MOVWF  FF6
0A7E8:  MOVLW  14
0A7EA:  MOVWF  FF7
0A7EC:  MOVLW  00
0A7EE:  MOVWF  FF8
0A7F0:  CALL   202E
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0A7F4:  MOVFF  1B0,1E6
0A7F8:  MOVFF  1AF,1E5
0A7FC:  CALL   7FB6
0A800:  MOVFF  02,03
0A804:  MOVF   01,W
0A806:  MOVWF  FE1
0A808:  MOVFF  03,FE2
0A80C:  MOVLW  01
0A80E:  MOVWF  FEA
0A810:  MOVLW  B1
0A812:  MOVWF  FE9
0A814:  MOVLW  0B
0A816:  MOVWF  01
0A818:  MOVFF  FE6,FEE
0A81C:  DECFSZ 01,F
0A81E:  GOTO   A818
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0A822:  MOVLW  01
0A824:  MOVLB  1
0A826:  MOVWF  xE0
0A828:  MOVLW  B1
0A82A:  MOVWF  xDF
0A82C:  MOVLB  0
0A82E:  GOTO   8CD2
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0A832:  MOVFF  1B1,206
0A836:  MOVLB  2
0A838:  CLRF   x07
0A83A:  MOVLB  0
0A83C:  CALL   4E3E
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0A840:  CALL   396A
0A844:  MOVFF  03,1BF
0A848:  MOVFF  02,1BE
0A84C:  MOVFF  01,1BD
0A850:  MOVFF  00,1BC
0A854:  MOVLB  1
0A856:  CLRF   xC3
0A858:  CLRF   xC2
0A85A:  CLRF   xC1
0A85C:  CLRF   xC0
0A85E:  CLRF   xC5
0A860:  CLRF   xC4
0A862:  CLRF   xC6
0A864:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0A866:  MOVFF  1B9,1E0
0A86A:  MOVFF  1B8,1DF
0A86E:  MOVFF  1BB,1E2
0A872:  MOVFF  1BA,1E1
0A876:  MOVFF  1B5,1E4
0A87A:  MOVFF  1B4,1E3
0A87E:  GOTO   989E
....................       if (cmd.interval > 0){
0A882:  MOVLB  1
0A884:  MOVF   xB2,F
0A886:  BTFSC  FD8.2
0A888:  BRA    A890
0A88A:  MOVLB  0
0A88C:  GOTO   A8A2
0A890:  MOVLB  0
0A892:  MOVLB  1
0A894:  MOVF   xB3,F
0A896:  BTFSS  FD8.2
0A898:  BRA    A8A0
0A89A:  MOVLB  0
0A89C:  GOTO   A8CA
0A8A0:  MOVLB  0
....................          delay_ms(cmd.interval);
0A8A2:  MOVFF  1B3,1DF
0A8A6:  MOVLB  1
0A8A8:  INCF   xDF,F
0A8AA:  MOVLB  0
0A8AC:  MOVLB  1
0A8AE:  DECFSZ xDF,F
0A8B0:  BRA    A8B6
0A8B2:  MOVLB  0
0A8B4:  BRA    A8C2
0A8B6:  MOVLB  B
0A8B8:  SETF   x02
0A8BA:  MOVLB  0
0A8BC:  CALL   2000
0A8C0:  BRA    A8AC
0A8C2:  MOVFF  1B2,B02
0A8C6:  CALL   2000
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0A8CA:  GOTO   A544
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0A8CE:  CALL   396A
0A8D2:  MOVFF  03,1E2
0A8D6:  MOVFF  02,1E1
0A8DA:  MOVFF  01,1E0
0A8DE:  MOVFF  00,1DF
0A8E2:  MOVLB  1
0A8E4:  MOVF   xBC,W
0A8E6:  SUBWF  xDF,F
0A8E8:  MOVF   xBD,W
0A8EA:  SUBWFB xE0,F
0A8EC:  MOVF   xBE,W
0A8EE:  SUBWFB xE1,F
0A8F0:  MOVF   xBF,W
0A8F2:  SUBWFB xE2,F
0A8F4:  MOVF   xE2,F
0A8F6:  BTFSC  FD8.2
0A8F8:  BRA    A900
0A8FA:  MOVLB  0
0A8FC:  GOTO   A93C
0A900:  MOVLB  0
0A902:  MOVLB  1
0A904:  MOVF   xE1,F
0A906:  BTFSC  FD8.2
0A908:  BRA    A910
0A90A:  MOVLB  0
0A90C:  GOTO   A93C
0A910:  MOVLB  0
0A912:  MOVLB  1
0A914:  MOVF   xE0,W
0A916:  SUBWF  xB7,W
0A918:  BTFSC  FD8.0
0A91A:  BRA    A922
0A91C:  MOVLB  0
0A91E:  GOTO   A93C
0A922:  MOVLB  0
0A924:  BTFSS  FD8.2
0A926:  GOTO   A866
0A92A:  MOVLB  1
0A92C:  MOVF   xB6,W
0A92E:  SUBWF  xDF,W
0A930:  BTFSC  FD8.0
0A932:  BRA    A93A
0A934:  MOVLB  0
0A936:  GOTO   A866
0A93A:  MOVLB  0
....................    misf_update_address_area();
0A93C:  CALL   4DB0
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0A940:  MOVFF  1B1,206
0A944:  MOVLB  2
0A946:  SETF   x07
0A948:  MOVLB  0
0A94A:  CALL   4E3E
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0A94E:  MOVLB  1
0A950:  CLRF   xC7
0A952:  CLRF   xC8
0A954:  CLRF   xC9
0A956:  CLRF   xCA
0A958:  CLRF   xCB
0A95A:  CLRF   xCC
0A95C:  CLRF   xCD
0A95E:  CLRF   xCE
0A960:  CLRF   xCF
0A962:  CLRF   xD0
0A964:  CLRF   xD1
0A966:  CLRF   xD2
....................    data.func_type = ENUM_SMF_WRITE;
0A968:  CLRF   xC8
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0A96A:  MOVLW  04
0A96C:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0A96E:  MOVLW  02
0A970:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0A972:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0A974:  MOVLW  F0
0A976:  MOVWF  FF6
0A978:  MOVLW  14
0A97A:  MOVWF  FF7
0A97C:  MOVLW  00
0A97E:  MOVWF  FF8
0A980:  MOVLB  0
0A982:  CALL   202E
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0A986:  MOVLW  02
0A988:  MOVWF  FF6
0A98A:  MOVLW  15
0A98C:  MOVWF  FF7
0A98E:  MOVLW  00
0A990:  MOVWF  FF8
0A992:  MOVLW  0F
0A994:  MOVLB  9
0A996:  MOVWF  xC2
0A998:  MOVLB  0
0A99A:  CALL   2064
0A99E:  MOVFF  1C7,9E8
0A9A2:  MOVLW  37
0A9A4:  MOVLB  9
0A9A6:  MOVWF  xE9
0A9A8:  MOVLB  0
0A9AA:  CALL   2294
0A9AE:  MOVLW  0D
0A9B0:  BTFSS  FA6.6
0A9B2:  GOTO   A9B0
0A9B6:  MOVLB  E
0A9B8:  MOVWF  xF9
0A9BA:  MOVLW  0A
0A9BC:  MOVLB  0
0A9BE:  BTFSS  FA6.6
0A9C0:  GOTO   A9BE
0A9C4:  MOVLB  E
0A9C6:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0A9C8:  MOVLW  18
0A9CA:  MOVWF  FF6
0A9CC:  MOVLW  15
0A9CE:  MOVWF  FF7
0A9D0:  MOVLW  00
0A9D2:  MOVWF  FF8
0A9D4:  MOVLW  0F
0A9D6:  MOVLB  9
0A9D8:  MOVWF  xC2
0A9DA:  MOVLB  0
0A9DC:  CALL   2064
0A9E0:  MOVFF  1C8,9E8
0A9E4:  MOVLW  37
0A9E6:  MOVLB  9
0A9E8:  MOVWF  xE9
0A9EA:  MOVLB  0
0A9EC:  CALL   2294
0A9F0:  MOVLW  0D
0A9F2:  BTFSS  FA6.6
0A9F4:  GOTO   A9F2
0A9F8:  MOVLB  E
0A9FA:  MOVWF  xF9
0A9FC:  MOVLW  0A
0A9FE:  MOVLB  0
0AA00:  BTFSS  FA6.6
0AA02:  GOTO   AA00
0AA06:  MOVLB  E
0AA08:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0AA0A:  MOVLW  2E
0AA0C:  MOVWF  FF6
0AA0E:  MOVLW  15
0AA10:  MOVWF  FF7
0AA12:  MOVLW  00
0AA14:  MOVWF  FF8
0AA16:  MOVLW  0F
0AA18:  MOVLB  9
0AA1A:  MOVWF  xC2
0AA1C:  MOVLB  0
0AA1E:  CALL   2064
0AA22:  MOVFF  1C9,9E8
0AA26:  MOVLW  37
0AA28:  MOVLB  9
0AA2A:  MOVWF  xE9
0AA2C:  MOVLB  0
0AA2E:  CALL   2294
0AA32:  MOVLW  0D
0AA34:  BTFSS  FA6.6
0AA36:  GOTO   AA34
0AA3A:  MOVLB  E
0AA3C:  MOVWF  xF9
0AA3E:  MOVLW  0A
0AA40:  MOVLB  0
0AA42:  BTFSS  FA6.6
0AA44:  GOTO   AA42
0AA48:  MOVLB  E
0AA4A:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AA4C:  MOVLW  00
0AA4E:  MOVLB  1
0AA50:  BTFSC  xCA.0
0AA52:  MOVLW  01
0AA54:  MOVWF  xDF
0AA56:  MOVLW  44
0AA58:  MOVWF  FF6
0AA5A:  MOVLW  15
0AA5C:  MOVWF  FF7
0AA5E:  MOVLW  00
0AA60:  MOVWF  FF8
0AA62:  MOVLW  0F
0AA64:  MOVLB  9
0AA66:  MOVWF  xC2
0AA68:  MOVLB  0
0AA6A:  CALL   2064
0AA6E:  MOVFF  1DF,9E8
0AA72:  MOVLW  37
0AA74:  MOVLB  9
0AA76:  MOVWF  xE9
0AA78:  MOVLB  0
0AA7A:  CALL   2294
0AA7E:  MOVLW  0D
0AA80:  BTFSS  FA6.6
0AA82:  GOTO   AA80
0AA86:  MOVLB  E
0AA88:  MOVWF  xF9
0AA8A:  MOVLW  0A
0AA8C:  MOVLB  0
0AA8E:  BTFSS  FA6.6
0AA90:  GOTO   AA8E
0AA94:  MOVLB  E
0AA96:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AA98:  MOVLW  5A
0AA9A:  MOVWF  FF6
0AA9C:  MOVLW  15
0AA9E:  MOVWF  FF7
0AAA0:  MOVLW  00
0AAA2:  MOVWF  FF8
0AAA4:  MOVLW  0F
0AAA6:  MOVLB  9
0AAA8:  MOVWF  xC2
0AAAA:  MOVLB  0
0AAAC:  CALL   2064
0AAB0:  MOVLW  02
0AAB2:  MOVLB  1
0AAB4:  MOVWF  xDF
0AAB6:  MOVLB  0
0AAB8:  MOVLW  30
0AABA:  BTFSS  FA6.6
0AABC:  GOTO   AABA
0AAC0:  MOVLB  E
0AAC2:  MOVWF  xF9
0AAC4:  MOVLB  1
0AAC6:  DECFSZ xDF,F
0AAC8:  BRA    AACE
0AACA:  BRA    AAD4
0AACC:  MOVLB  0
0AACE:  MOVLB  0
0AAD0:  GOTO   AAB8
0AAD4:  MOVFF  1CB,9E8
0AAD8:  MOVLW  37
0AADA:  MOVLB  9
0AADC:  MOVWF  xE9
0AADE:  MOVLB  0
0AAE0:  CALL   2294
0AAE4:  MOVLW  0D
0AAE6:  BTFSS  FA6.6
0AAE8:  GOTO   AAE6
0AAEC:  MOVLB  E
0AAEE:  MOVWF  xF9
0AAF0:  MOVLW  0A
0AAF2:  MOVLB  0
0AAF4:  BTFSS  FA6.6
0AAF6:  GOTO   AAF4
0AAFA:  MOVLB  E
0AAFC:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0AAFE:  MOVLW  70
0AB00:  MOVWF  FF6
0AB02:  MOVLW  15
0AB04:  MOVWF  FF7
0AB06:  MOVLW  00
0AB08:  MOVWF  FF8
0AB0A:  MOVLW  0F
0AB0C:  MOVLB  9
0AB0E:  MOVWF  xC2
0AB10:  MOVLB  0
0AB12:  CALL   2064
0AB16:  MOVLW  02
0AB18:  MOVLB  1
0AB1A:  MOVWF  xDF
0AB1C:  MOVLB  0
0AB1E:  MOVLW  30
0AB20:  BTFSS  FA6.6
0AB22:  GOTO   AB20
0AB26:  MOVLB  E
0AB28:  MOVWF  xF9
0AB2A:  MOVLB  1
0AB2C:  DECFSZ xDF,F
0AB2E:  BRA    AB34
0AB30:  BRA    AB3A
0AB32:  MOVLB  0
0AB34:  MOVLB  0
0AB36:  GOTO   AB1E
0AB3A:  MOVFF  14E,9E8
0AB3E:  MOVLW  37
0AB40:  MOVLB  9
0AB42:  MOVWF  xE9
0AB44:  MOVLB  0
0AB46:  CALL   2294
0AB4A:  MOVLW  0D
0AB4C:  BTFSS  FA6.6
0AB4E:  GOTO   AB4C
0AB52:  MOVLB  E
0AB54:  MOVWF  xF9
0AB56:  MOVLW  0A
0AB58:  MOVLB  0
0AB5A:  BTFSS  FA6.6
0AB5C:  GOTO   AB5A
0AB60:  MOVLB  E
0AB62:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AB64:  MOVLW  01
0AB66:  MOVLB  1
0AB68:  MOVWF  xE0
0AB6A:  MOVLW  C7
0AB6C:  MOVWF  xDF
0AB6E:  MOVLB  0
0AB70:  CALL   A584
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0AB74:  MOVLB  1
0AB76:  CLRF   xC8
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AB78:  MOVLW  06
0AB7A:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AB7C:  MOVLW  02
0AB7E:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AB80:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AB82:  MOVLW  86
0AB84:  MOVWF  FF6
0AB86:  MOVLW  15
0AB88:  MOVWF  FF7
0AB8A:  MOVLW  00
0AB8C:  MOVWF  FF8
0AB8E:  MOVLB  0
0AB90:  CALL   202E
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AB94:  MOVLW  98
0AB96:  MOVWF  FF6
0AB98:  MOVLW  15
0AB9A:  MOVWF  FF7
0AB9C:  MOVLW  00
0AB9E:  MOVWF  FF8
0ABA0:  MOVLW  0F
0ABA2:  MOVLB  9
0ABA4:  MOVWF  xC2
0ABA6:  MOVLB  0
0ABA8:  CALL   2064
0ABAC:  MOVFF  1C7,9E8
0ABB0:  MOVLW  37
0ABB2:  MOVLB  9
0ABB4:  MOVWF  xE9
0ABB6:  MOVLB  0
0ABB8:  CALL   2294
0ABBC:  MOVLW  0D
0ABBE:  BTFSS  FA6.6
0ABC0:  GOTO   ABBE
0ABC4:  MOVLB  E
0ABC6:  MOVWF  xF9
0ABC8:  MOVLW  0A
0ABCA:  MOVLB  0
0ABCC:  BTFSS  FA6.6
0ABCE:  GOTO   ABCC
0ABD2:  MOVLB  E
0ABD4:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0ABD6:  MOVLW  AE
0ABD8:  MOVWF  FF6
0ABDA:  MOVLW  15
0ABDC:  MOVWF  FF7
0ABDE:  MOVLW  00
0ABE0:  MOVWF  FF8
0ABE2:  MOVLW  0F
0ABE4:  MOVLB  9
0ABE6:  MOVWF  xC2
0ABE8:  MOVLB  0
0ABEA:  CALL   2064
0ABEE:  MOVFF  1C8,9E8
0ABF2:  MOVLW  37
0ABF4:  MOVLB  9
0ABF6:  MOVWF  xE9
0ABF8:  MOVLB  0
0ABFA:  CALL   2294
0ABFE:  MOVLW  0D
0AC00:  BTFSS  FA6.6
0AC02:  GOTO   AC00
0AC06:  MOVLB  E
0AC08:  MOVWF  xF9
0AC0A:  MOVLW  0A
0AC0C:  MOVLB  0
0AC0E:  BTFSS  FA6.6
0AC10:  GOTO   AC0E
0AC14:  MOVLB  E
0AC16:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0AC18:  MOVLW  C4
0AC1A:  MOVWF  FF6
0AC1C:  MOVLW  15
0AC1E:  MOVWF  FF7
0AC20:  MOVLW  00
0AC22:  MOVWF  FF8
0AC24:  MOVLW  0F
0AC26:  MOVLB  9
0AC28:  MOVWF  xC2
0AC2A:  MOVLB  0
0AC2C:  CALL   2064
0AC30:  MOVFF  1C9,9E8
0AC34:  MOVLW  37
0AC36:  MOVLB  9
0AC38:  MOVWF  xE9
0AC3A:  MOVLB  0
0AC3C:  CALL   2294
0AC40:  MOVLW  0D
0AC42:  BTFSS  FA6.6
0AC44:  GOTO   AC42
0AC48:  MOVLB  E
0AC4A:  MOVWF  xF9
0AC4C:  MOVLW  0A
0AC4E:  MOVLB  0
0AC50:  BTFSS  FA6.6
0AC52:  GOTO   AC50
0AC56:  MOVLB  E
0AC58:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AC5A:  MOVLW  00
0AC5C:  MOVLB  1
0AC5E:  BTFSC  xCA.0
0AC60:  MOVLW  01
0AC62:  MOVWF  xDF
0AC64:  MOVLW  DA
0AC66:  MOVWF  FF6
0AC68:  MOVLW  15
0AC6A:  MOVWF  FF7
0AC6C:  MOVLW  00
0AC6E:  MOVWF  FF8
0AC70:  MOVLW  0F
0AC72:  MOVLB  9
0AC74:  MOVWF  xC2
0AC76:  MOVLB  0
0AC78:  CALL   2064
0AC7C:  MOVFF  1DF,9E8
0AC80:  MOVLW  37
0AC82:  MOVLB  9
0AC84:  MOVWF  xE9
0AC86:  MOVLB  0
0AC88:  CALL   2294
0AC8C:  MOVLW  0D
0AC8E:  BTFSS  FA6.6
0AC90:  GOTO   AC8E
0AC94:  MOVLB  E
0AC96:  MOVWF  xF9
0AC98:  MOVLW  0A
0AC9A:  MOVLB  0
0AC9C:  BTFSS  FA6.6
0AC9E:  GOTO   AC9C
0ACA2:  MOVLB  E
0ACA4:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0ACA6:  MOVLW  F0
0ACA8:  MOVWF  FF6
0ACAA:  MOVLW  15
0ACAC:  MOVWF  FF7
0ACAE:  MOVLW  00
0ACB0:  MOVWF  FF8
0ACB2:  MOVLW  0F
0ACB4:  MOVLB  9
0ACB6:  MOVWF  xC2
0ACB8:  MOVLB  0
0ACBA:  CALL   2064
0ACBE:  MOVLW  02
0ACC0:  MOVLB  1
0ACC2:  MOVWF  xDF
0ACC4:  MOVLB  0
0ACC6:  MOVLW  30
0ACC8:  BTFSS  FA6.6
0ACCA:  GOTO   ACC8
0ACCE:  MOVLB  E
0ACD0:  MOVWF  xF9
0ACD2:  MOVLB  1
0ACD4:  DECFSZ xDF,F
0ACD6:  BRA    ACDC
0ACD8:  BRA    ACE2
0ACDA:  MOVLB  0
0ACDC:  MOVLB  0
0ACDE:  GOTO   ACC6
0ACE2:  MOVFF  1CB,9E8
0ACE6:  MOVLW  37
0ACE8:  MOVLB  9
0ACEA:  MOVWF  xE9
0ACEC:  MOVLB  0
0ACEE:  CALL   2294
0ACF2:  MOVLW  0D
0ACF4:  BTFSS  FA6.6
0ACF6:  GOTO   ACF4
0ACFA:  MOVLB  E
0ACFC:  MOVWF  xF9
0ACFE:  MOVLW  0A
0AD00:  MOVLB  0
0AD02:  BTFSS  FA6.6
0AD04:  GOTO   AD02
0AD08:  MOVLB  E
0AD0A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0AD0C:  MOVLW  06
0AD0E:  MOVWF  FF6
0AD10:  MOVLW  16
0AD12:  MOVWF  FF7
0AD14:  MOVLW  00
0AD16:  MOVWF  FF8
0AD18:  MOVLW  0F
0AD1A:  MOVLB  9
0AD1C:  MOVWF  xC2
0AD1E:  MOVLB  0
0AD20:  CALL   2064
0AD24:  MOVLW  02
0AD26:  MOVLB  1
0AD28:  MOVWF  xDF
0AD2A:  MOVLB  0
0AD2C:  MOVLW  30
0AD2E:  BTFSS  FA6.6
0AD30:  GOTO   AD2E
0AD34:  MOVLB  E
0AD36:  MOVWF  xF9
0AD38:  MOVLB  1
0AD3A:  DECFSZ xDF,F
0AD3C:  BRA    AD42
0AD3E:  BRA    AD48
0AD40:  MOVLB  0
0AD42:  MOVLB  0
0AD44:  GOTO   AD2C
0AD48:  MOVFF  162,9E8
0AD4C:  MOVLW  37
0AD4E:  MOVLB  9
0AD50:  MOVWF  xE9
0AD52:  MOVLB  0
0AD54:  CALL   2294
0AD58:  MOVLW  0D
0AD5A:  BTFSS  FA6.6
0AD5C:  GOTO   AD5A
0AD60:  MOVLB  E
0AD62:  MOVWF  xF9
0AD64:  MOVLW  0A
0AD66:  MOVLB  0
0AD68:  BTFSS  FA6.6
0AD6A:  GOTO   AD68
0AD6E:  MOVLB  E
0AD70:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AD72:  MOVLW  01
0AD74:  MOVLB  1
0AD76:  MOVWF  xE0
0AD78:  MOVLW  C7
0AD7A:  MOVWF  xDF
0AD7C:  MOVLB  0
0AD7E:  CALL   A584
.................... 
.................... 
....................    FlashOperationStruct piclog = {0};
0AD82:  MOVLB  1
0AD84:  CLRF   xD3
0AD86:  CLRF   xD4
0AD88:  CLRF   xD5
0AD8A:  CLRF   xD6
0AD8C:  CLRF   xD7
0AD8E:  CLRF   xD8
0AD90:  CLRF   xD9
0AD92:  CLRF   xDA
0AD94:  CLRF   xDB
0AD96:  CLRF   xDC
0AD98:  CLRF   xDD
0AD9A:  CLRF   xDE
....................    piclog.func_type = ENUM_SMF_WRITE;
0AD9C:  CLRF   xD4
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AD9E:  MOVLW  01
0ADA0:  MOVWF  xD3
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0ADA2:  MOVLW  02
0ADA4:  MOVWF  xD5
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0ADA6:  BCF    xD6.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0ADA8:  MOVLW  1C
0ADAA:  MOVWF  FF6
0ADAC:  MOVLW  16
0ADAE:  MOVWF  FF7
0ADB0:  MOVLW  00
0ADB2:  MOVWF  FF8
0ADB4:  MOVLB  0
0ADB6:  CALL   202E
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0ADBA:  MOVLW  2E
0ADBC:  MOVWF  FF6
0ADBE:  MOVLW  16
0ADC0:  MOVWF  FF7
0ADC2:  MOVLW  00
0ADC4:  MOVWF  FF8
0ADC6:  MOVLW  0F
0ADC8:  MOVLB  9
0ADCA:  MOVWF  xC2
0ADCC:  MOVLB  0
0ADCE:  CALL   2064
0ADD2:  MOVFF  1D3,9E8
0ADD6:  MOVLW  37
0ADD8:  MOVLB  9
0ADDA:  MOVWF  xE9
0ADDC:  MOVLB  0
0ADDE:  CALL   2294
0ADE2:  MOVLW  0D
0ADE4:  BTFSS  FA6.6
0ADE6:  GOTO   ADE4
0ADEA:  MOVLB  E
0ADEC:  MOVWF  xF9
0ADEE:  MOVLW  0A
0ADF0:  MOVLB  0
0ADF2:  BTFSS  FA6.6
0ADF4:  GOTO   ADF2
0ADF8:  MOVLB  E
0ADFA:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0ADFC:  MOVLW  44
0ADFE:  MOVWF  FF6
0AE00:  MOVLW  16
0AE02:  MOVWF  FF7
0AE04:  MOVLW  00
0AE06:  MOVWF  FF8
0AE08:  MOVLW  0F
0AE0A:  MOVLB  9
0AE0C:  MOVWF  xC2
0AE0E:  MOVLB  0
0AE10:  CALL   2064
0AE14:  MOVFF  1D4,9E8
0AE18:  MOVLW  37
0AE1A:  MOVLB  9
0AE1C:  MOVWF  xE9
0AE1E:  MOVLB  0
0AE20:  CALL   2294
0AE24:  MOVLW  0D
0AE26:  BTFSS  FA6.6
0AE28:  GOTO   AE26
0AE2C:  MOVLB  E
0AE2E:  MOVWF  xF9
0AE30:  MOVLW  0A
0AE32:  MOVLB  0
0AE34:  BTFSS  FA6.6
0AE36:  GOTO   AE34
0AE3A:  MOVLB  E
0AE3C:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0AE3E:  MOVLW  5A
0AE40:  MOVWF  FF6
0AE42:  MOVLW  16
0AE44:  MOVWF  FF7
0AE46:  MOVLW  00
0AE48:  MOVWF  FF8
0AE4A:  MOVLW  0F
0AE4C:  MOVLB  9
0AE4E:  MOVWF  xC2
0AE50:  MOVLB  0
0AE52:  CALL   2064
0AE56:  MOVFF  1D5,9E8
0AE5A:  MOVLW  37
0AE5C:  MOVLB  9
0AE5E:  MOVWF  xE9
0AE60:  MOVLB  0
0AE62:  CALL   2294
0AE66:  MOVLW  0D
0AE68:  BTFSS  FA6.6
0AE6A:  GOTO   AE68
0AE6E:  MOVLB  E
0AE70:  MOVWF  xF9
0AE72:  MOVLW  0A
0AE74:  MOVLB  0
0AE76:  BTFSS  FA6.6
0AE78:  GOTO   AE76
0AE7C:  MOVLB  E
0AE7E:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0AE80:  MOVLW  00
0AE82:  MOVLB  1
0AE84:  BTFSC  xD6.0
0AE86:  MOVLW  01
0AE88:  MOVWF  xDF
0AE8A:  MOVLW  70
0AE8C:  MOVWF  FF6
0AE8E:  MOVLW  16
0AE90:  MOVWF  FF7
0AE92:  MOVLW  00
0AE94:  MOVWF  FF8
0AE96:  MOVLW  0F
0AE98:  MOVLB  9
0AE9A:  MOVWF  xC2
0AE9C:  MOVLB  0
0AE9E:  CALL   2064
0AEA2:  MOVFF  1DF,9E8
0AEA6:  MOVLW  37
0AEA8:  MOVLB  9
0AEAA:  MOVWF  xE9
0AEAC:  MOVLB  0
0AEAE:  CALL   2294
0AEB2:  MOVLW  0D
0AEB4:  BTFSS  FA6.6
0AEB6:  GOTO   AEB4
0AEBA:  MOVLB  E
0AEBC:  MOVWF  xF9
0AEBE:  MOVLW  0A
0AEC0:  MOVLB  0
0AEC2:  BTFSS  FA6.6
0AEC4:  GOTO   AEC2
0AEC8:  MOVLB  E
0AECA:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0AECC:  MOVLW  86
0AECE:  MOVWF  FF6
0AED0:  MOVLW  16
0AED2:  MOVWF  FF7
0AED4:  MOVLW  00
0AED6:  MOVWF  FF8
0AED8:  MOVLW  0F
0AEDA:  MOVLB  9
0AEDC:  MOVWF  xC2
0AEDE:  MOVLB  0
0AEE0:  CALL   2064
0AEE4:  MOVLW  02
0AEE6:  MOVLB  1
0AEE8:  MOVWF  xDF
0AEEA:  MOVLB  0
0AEEC:  MOVLW  30
0AEEE:  BTFSS  FA6.6
0AEF0:  GOTO   AEEE
0AEF4:  MOVLB  E
0AEF6:  MOVWF  xF9
0AEF8:  MOVLB  1
0AEFA:  DECFSZ xDF,F
0AEFC:  BRA    AF02
0AEFE:  BRA    AF08
0AF00:  MOVLB  0
0AF02:  MOVLB  0
0AF04:  GOTO   AEEC
0AF08:  MOVFF  1D7,9E8
0AF0C:  MOVLW  37
0AF0E:  MOVLB  9
0AF10:  MOVWF  xE9
0AF12:  MOVLB  0
0AF14:  CALL   2294
0AF18:  MOVLW  0D
0AF1A:  BTFSS  FA6.6
0AF1C:  GOTO   AF1A
0AF20:  MOVLB  E
0AF22:  MOVWF  xF9
0AF24:  MOVLW  0A
0AF26:  MOVLB  0
0AF28:  BTFSS  FA6.6
0AF2A:  GOTO   AF28
0AF2E:  MOVLB  E
0AF30:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0AF32:  MOVLW  9C
0AF34:  MOVWF  FF6
0AF36:  MOVLW  16
0AF38:  MOVWF  FF7
0AF3A:  MOVLW  00
0AF3C:  MOVWF  FF8
0AF3E:  MOVLW  0F
0AF40:  MOVLB  9
0AF42:  MOVWF  xC2
0AF44:  MOVLB  0
0AF46:  CALL   2064
0AF4A:  MOVLW  02
0AF4C:  MOVLB  1
0AF4E:  MOVWF  xDF
0AF50:  MOVLB  0
0AF52:  MOVLW  30
0AF54:  BTFSS  FA6.6
0AF56:  GOTO   AF54
0AF5A:  MOVLB  E
0AF5C:  MOVWF  xF9
0AF5E:  MOVLB  1
0AF60:  DECFSZ xDF,F
0AF62:  BRA    AF68
0AF64:  BRA    AF6E
0AF66:  MOVLB  0
0AF68:  MOVLB  0
0AF6A:  GOTO   AF52
0AF6E:  MOVFF  130,9E8
0AF72:  MOVLW  37
0AF74:  MOVLB  9
0AF76:  MOVWF  xE9
0AF78:  MOVLB  0
0AF7A:  CALL   2294
0AF7E:  MOVLW  0D
0AF80:  BTFSS  FA6.6
0AF82:  GOTO   AF80
0AF86:  MOVLB  E
0AF88:  MOVWF  xF9
0AF8A:  MOVLW  0A
0AF8C:  MOVLB  0
0AF8E:  BTFSS  FA6.6
0AF90:  GOTO   AF8E
0AF94:  MOVLB  E
0AF96:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0AF98:  MOVLW  01
0AF9A:  MOVLB  1
0AF9C:  MOVWF  xE0
0AF9E:  MOVLW  D3
0AFA0:  MOVWF  xDF
0AFA2:  MOVLB  0
0AFA4:  CALL   A584
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0AFA8:  MOVLW  B2
0AFAA:  MOVWF  FF6
0AFAC:  MOVLW  16
0AFAE:  MOVWF  FF7
0AFB0:  MOVLW  00
0AFB2:  MOVWF  FF8
0AFB4:  CALL   202E
0AFB8:  GOTO   E5DE (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C532:  MOVLW  CE
0C534:  MOVWF  FF6
0C536:  MOVLW  16
0C538:  MOVWF  FF7
0C53A:  MOVLW  00
0C53C:  MOVWF  FF8
0C53E:  CALL   202E
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C542:  MOVFF  1B0,1E6
0C546:  MOVFF  1AF,1E5
0C54A:  CALL   7FB6
0C54E:  MOVFF  02,03
0C552:  MOVF   01,W
0C554:  MOVWF  FE1
0C556:  MOVFF  03,FE2
0C55A:  MOVLW  01
0C55C:  MOVWF  FEA
0C55E:  MOVLW  B1
0C560:  MOVWF  FE9
0C562:  MOVLW  0C
0C564:  MOVWF  01
0C566:  MOVFF  FE6,FEE
0C56A:  DECFSZ 01,F
0C56C:  GOTO   C566
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C570:  MOVLW  E4
0C572:  MOVWF  FF6
0C574:  MOVLW  16
0C576:  MOVWF  FF7
0C578:  MOVLW  00
0C57A:  MOVWF  FF8
0C57C:  MOVLW  05
0C57E:  MOVLB  9
0C580:  MOVWF  xC2
0C582:  MOVLB  0
0C584:  CALL   2064
0C588:  MOVFF  1B1,9E8
0C58C:  MOVLW  37
0C58E:  MOVLB  9
0C590:  MOVWF  xE9
0C592:  MOVLB  0
0C594:  CALL   2294
0C598:  MOVLW  0D
0C59A:  BTFSS  FA6.6
0C59C:  GOTO   C59A
0C5A0:  MOVLB  E
0C5A2:  MOVWF  xF9
0C5A4:  MOVLW  0A
0C5A6:  MOVLB  0
0C5A8:  BTFSS  FA6.6
0C5AA:  GOTO   C5A8
0C5AE:  MOVLB  E
0C5B0:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C5B2:  MOVLW  F0
0C5B4:  MOVWF  FF6
0C5B6:  MOVLW  16
0C5B8:  MOVWF  FF7
0C5BA:  MOVLW  00
0C5BC:  MOVWF  FF8
0C5BE:  MOVLW  15
0C5C0:  MOVLB  9
0C5C2:  MOVWF  xC2
0C5C4:  MOVLB  0
0C5C6:  CALL   2064
0C5CA:  MOVLW  02
0C5CC:  MOVLB  1
0C5CE:  MOVWF  xC5
0C5D0:  MOVLB  0
0C5D2:  MOVLW  30
0C5D4:  BTFSS  FA6.6
0C5D6:  GOTO   C5D4
0C5DA:  MOVLB  E
0C5DC:  MOVWF  xF9
0C5DE:  MOVLB  1
0C5E0:  DECFSZ xC5,F
0C5E2:  BRA    C5E8
0C5E4:  BRA    C5EE
0C5E6:  MOVLB  0
0C5E8:  MOVLB  0
0C5EA:  GOTO   C5D2
0C5EE:  MOVFF  1B2,9E8
0C5F2:  MOVLW  37
0C5F4:  MOVLB  9
0C5F6:  MOVWF  xE9
0C5F8:  MOVLB  0
0C5FA:  CALL   2294
0C5FE:  MOVLW  0D
0C600:  BTFSS  FA6.6
0C602:  GOTO   C600
0C606:  MOVLB  E
0C608:  MOVWF  xF9
0C60A:  MOVLW  0A
0C60C:  MOVLB  0
0C60E:  BTFSS  FA6.6
0C610:  GOTO   C60E
0C614:  MOVLB  E
0C616:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C618:  MOVLW  0C
0C61A:  MOVWF  FF6
0C61C:  MOVLW  17
0C61E:  MOVWF  FF7
0C620:  MOVLW  00
0C622:  MOVWF  FF8
0C624:  MOVLW  15
0C626:  MOVLB  9
0C628:  MOVWF  xC2
0C62A:  MOVLB  0
0C62C:  CALL   2064
0C630:  MOVLW  02
0C632:  MOVLB  1
0C634:  MOVWF  xC5
0C636:  MOVLB  0
0C638:  MOVLW  30
0C63A:  BTFSS  FA6.6
0C63C:  GOTO   C63A
0C640:  MOVLB  E
0C642:  MOVWF  xF9
0C644:  MOVLB  1
0C646:  DECFSZ xC5,F
0C648:  BRA    C64E
0C64A:  BRA    C654
0C64C:  MOVLB  0
0C64E:  MOVLB  0
0C650:  GOTO   C638
0C654:  MOVFF  1B4,9E8
0C658:  MOVLW  37
0C65A:  MOVLB  9
0C65C:  MOVWF  xE9
0C65E:  MOVLB  0
0C660:  CALL   2294
0C664:  MOVLW  0D
0C666:  BTFSS  FA6.6
0C668:  GOTO   C666
0C66C:  MOVLB  E
0C66E:  MOVWF  xF9
0C670:  MOVLW  0A
0C672:  MOVLB  0
0C674:  BTFSS  FA6.6
0C676:  GOTO   C674
0C67A:  MOVLB  E
0C67C:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C67E:  MOVLW  28
0C680:  MOVWF  FF6
0C682:  MOVLW  17
0C684:  MOVWF  FF7
0C686:  MOVLW  00
0C688:  MOVWF  FF8
0C68A:  MOVLW  15
0C68C:  MOVLB  9
0C68E:  MOVWF  xC2
0C690:  MOVLB  0
0C692:  CALL   2064
0C696:  MOVLW  02
0C698:  MOVLB  1
0C69A:  MOVWF  xC5
0C69C:  MOVLB  0
0C69E:  MOVLW  30
0C6A0:  BTFSS  FA6.6
0C6A2:  GOTO   C6A0
0C6A6:  MOVLB  E
0C6A8:  MOVWF  xF9
0C6AA:  MOVLB  1
0C6AC:  DECFSZ xC5,F
0C6AE:  BRA    C6B4
0C6B0:  BRA    C6BA
0C6B2:  MOVLB  0
0C6B4:  MOVLB  0
0C6B6:  GOTO   C69E
0C6BA:  MOVFF  1B6,9E8
0C6BE:  MOVLW  37
0C6C0:  MOVLB  9
0C6C2:  MOVWF  xE9
0C6C4:  MOVLB  0
0C6C6:  CALL   2294
0C6CA:  MOVLW  0D
0C6CC:  BTFSS  FA6.6
0C6CE:  GOTO   C6CC
0C6D2:  MOVLB  E
0C6D4:  MOVWF  xF9
0C6D6:  MOVLW  0A
0C6D8:  MOVLB  0
0C6DA:  BTFSS  FA6.6
0C6DC:  GOTO   C6DA
0C6E0:  MOVLB  E
0C6E2:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C6E4:  MOVLW  44
0C6E6:  MOVWF  FF6
0C6E8:  MOVLW  17
0C6EA:  MOVWF  FF7
0C6EC:  MOVLW  00
0C6EE:  MOVWF  FF8
0C6F0:  MOVLW  15
0C6F2:  MOVLB  9
0C6F4:  MOVWF  xC2
0C6F6:  MOVLB  0
0C6F8:  CALL   2064
0C6FC:  MOVLW  02
0C6FE:  MOVLB  1
0C700:  MOVWF  xC5
0C702:  MOVLB  0
0C704:  MOVLW  30
0C706:  BTFSS  FA6.6
0C708:  GOTO   C706
0C70C:  MOVLB  E
0C70E:  MOVWF  xF9
0C710:  MOVLB  1
0C712:  DECFSZ xC5,F
0C714:  BRA    C71A
0C716:  BRA    C720
0C718:  MOVLB  0
0C71A:  MOVLB  0
0C71C:  GOTO   C704
0C720:  MOVFF  1B8,9E8
0C724:  MOVLW  37
0C726:  MOVLB  9
0C728:  MOVWF  xE9
0C72A:  MOVLB  0
0C72C:  CALL   2294
0C730:  MOVLW  0D
0C732:  BTFSS  FA6.6
0C734:  GOTO   C732
0C738:  MOVLB  E
0C73A:  MOVWF  xF9
0C73C:  MOVLW  0A
0C73E:  MOVLB  0
0C740:  BTFSS  FA6.6
0C742:  GOTO   C740
0C746:  MOVLB  E
0C748:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C74A:  MOVLW  60
0C74C:  MOVWF  FF6
0C74E:  MOVLW  17
0C750:  MOVWF  FF7
0C752:  MOVLW  00
0C754:  MOVWF  FF8
0C756:  MOVLW  15
0C758:  MOVLB  9
0C75A:  MOVWF  xC2
0C75C:  MOVLB  0
0C75E:  CALL   2064
0C762:  MOVLW  02
0C764:  MOVLB  1
0C766:  MOVWF  xC5
0C768:  MOVLB  0
0C76A:  MOVLW  30
0C76C:  BTFSS  FA6.6
0C76E:  GOTO   C76C
0C772:  MOVLB  E
0C774:  MOVWF  xF9
0C776:  MOVLB  1
0C778:  DECFSZ xC5,F
0C77A:  BRA    C780
0C77C:  BRA    C786
0C77E:  MOVLB  0
0C780:  MOVLB  0
0C782:  GOTO   C76A
0C786:  MOVFF  1BA,9E8
0C78A:  MOVLW  37
0C78C:  MOVLB  9
0C78E:  MOVWF  xE9
0C790:  MOVLB  0
0C792:  CALL   2294
0C796:  MOVLW  0D
0C798:  BTFSS  FA6.6
0C79A:  GOTO   C798
0C79E:  MOVLB  E
0C7A0:  MOVWF  xF9
0C7A2:  MOVLW  0A
0C7A4:  MOVLB  0
0C7A6:  BTFSS  FA6.6
0C7A8:  GOTO   C7A6
0C7AC:  MOVLB  E
0C7AE:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0C7B0:  MOVFF  1B1,206
0C7B4:  MOVLB  2
0C7B6:  CLRF   x07
0C7B8:  MOVLB  0
0C7BA:  CALL   4E3E
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0C7BE:  CALL   396A
0C7C2:  MOVFF  03,1C0
0C7C6:  MOVFF  02,1BF
0C7CA:  MOVFF  01,1BE
0C7CE:  MOVFF  00,1BD
0C7D2:  MOVLB  1
0C7D4:  CLRF   xC4
0C7D6:  CLRF   xC3
0C7D8:  CLRF   xC2
0C7DA:  CLRF   xC1
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0C7DC:  MOVFF  1B5,1C6
0C7E0:  MOVFF  1B4,1C5
0C7E4:  MOVFF  1B9,1C8
0C7E8:  MOVFF  1B8,1C7
0C7EC:  MOVLB  0
0C7EE:  GOTO   AFBC
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0C7F2:  MOVFF  1B1,206
0C7F6:  MOVLB  2
0C7F8:  SETF   x07
0C7FA:  MOVLB  0
0C7FC:  CALL   4E3E
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0C800:  MOVLW  7C
0C802:  MOVWF  FF6
0C804:  MOVLW  17
0C806:  MOVWF  FF7
0C808:  MOVLW  00
0C80A:  MOVWF  FF8
0C80C:  CALL   202E
0C810:  GOTO   E5EE (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0C814:  MOVLB  1
0C816:  CLRF   xB2
0C818:  MOVLW  64
0C81A:  MOVWF  xB1
0C81C:  SETF   xB4
0C81E:  SETF   xB3
0C820:  MOVLB  0
0C822:  CALL   396A
0C826:  MOVFF  03,1B8
0C82A:  MOVFF  02,1B7
0C82E:  MOVFF  01,1B6
0C832:  MOVFF  00,1B5
0C836:  MOVLB  1
0C838:  MOVF   xB1,W
0C83A:  SUBWF  xB5,W
0C83C:  MOVWF  xB9
0C83E:  MOVF   xB2,W
0C840:  SUBWFB xB6,W
0C842:  MOVWF  xBA
0C844:  MOVLW  00
0C846:  SUBWFB xB7,W
0C848:  MOVWF  xBB
0C84A:  MOVLW  00
0C84C:  SUBWFB xB8,W
0C84E:  MOVWF  xBC
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0C850:  MOVLW  98
0C852:  MOVWF  FF6
0C854:  MOVLW  17
0C856:  MOVWF  FF7
0C858:  MOVLW  00
0C85A:  MOVWF  FF8
0C85C:  MOVLB  0
0C85E:  CALL   202E
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0C862:  CALL   396A
0C866:  MOVFF  03,1B8
0C86A:  MOVFF  02,1B7
0C86E:  MOVFF  01,1B6
0C872:  MOVFF  00,1B5
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0C876:  MOVLB  1
0C878:  MOVF   xB9,W
0C87A:  SUBWF  xB5,W
0C87C:  MOVWF  xCF
0C87E:  MOVF   xBA,W
0C880:  SUBWFB xB6,W
0C882:  MOVWF  xD0
0C884:  MOVF   xBB,W
0C886:  SUBWFB xB7,W
0C888:  MOVWF  xD1
0C88A:  MOVF   xBC,W
0C88C:  SUBWFB xB8,W
0C88E:  MOVWF  xD2
0C890:  MOVF   xD2,F
0C892:  BTFSC  FD8.2
0C894:  BRA    C89C
0C896:  MOVLB  0
0C898:  GOTO   C8D8
0C89C:  MOVLB  0
0C89E:  MOVLB  1
0C8A0:  MOVF   xD1,F
0C8A2:  BTFSC  FD8.2
0C8A4:  BRA    C8AC
0C8A6:  MOVLB  0
0C8A8:  GOTO   C8D8
0C8AC:  MOVLB  0
0C8AE:  MOVLB  1
0C8B0:  MOVF   xB2,W
0C8B2:  SUBWF  xD0,W
0C8B4:  BTFSC  FD8.0
0C8B6:  BRA    C8BE
0C8B8:  MOVLB  0
0C8BA:  GOTO   C8F4
0C8BE:  MOVLB  0
0C8C0:  BTFSS  FD8.2
0C8C2:  GOTO   C8D8
0C8C6:  MOVLB  1
0C8C8:  MOVF   xB1,W
0C8CA:  SUBWF  xCF,W
0C8CC:  BTFSC  FD8.0
0C8CE:  BRA    C8D6
0C8D0:  MOVLB  0
0C8D2:  GOTO   C8F4
0C8D6:  MOVLB  0
....................            last_time = current_time;
0C8D8:  MOVFF  1B8,1BC
0C8DC:  MOVFF  1B7,1BB
0C8E0:  MOVFF  1B6,1BA
0C8E4:  MOVFF  1B5,1B9
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0C8E8:  MOVLW  01
0C8EA:  MOVLB  B
0C8EC:  MOVWF  x02
0C8EE:  MOVLB  0
0C8F0:  CALL   2000
....................    }
0C8F4:  GOTO   C862
.................... }
0C8F8:  GOTO   E5FE (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
07FB6:  MOVLB  1
07FB8:  MOVF   xE5,W
07FBA:  MOVWF  FE9
07FBC:  MOVF   xE6,W
07FBE:  MOVWF  FEA
07FC0:  MOVFF  FEF,1E7
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
07FC4:  MOVLW  01
07FC6:  ADDWF  xE5,W
07FC8:  MOVWF  FE9
07FCA:  MOVLW  00
07FCC:  ADDWFC xE6,W
07FCE:  MOVWF  FEA
07FD0:  MOVF   FEF,W
07FD2:  CLRF   xF3
07FD4:  MOVWF  xF2
07FD6:  MOVFF  1F2,1F3
07FDA:  CLRF   xF2
07FDC:  MOVLW  02
07FDE:  ADDWF  xE5,W
07FE0:  MOVWF  FE9
07FE2:  MOVLW  00
07FE4:  ADDWFC xE6,W
07FE6:  MOVWF  FEA
07FE8:  MOVF   FEF,W
07FEA:  CLRF   03
07FEC:  IORWF  xF2,W
07FEE:  MOVWF  xE8
07FF0:  MOVF   03,W
07FF2:  IORWF  xF3,W
07FF4:  MOVWF  xE9
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
07FF6:  MOVLW  03
07FF8:  ADDWF  xE5,W
07FFA:  MOVWF  FE9
07FFC:  MOVLW  00
07FFE:  ADDWFC xE6,W
08000:  MOVWF  FEA
08002:  MOVF   FEF,W
08004:  CLRF   xF3
08006:  MOVWF  xF2
08008:  RLCF   xF2,W
0800A:  MOVWF  xEE
0800C:  RLCF   xF3,W
0800E:  MOVWF  xEF
08010:  RLCF   xEE,F
08012:  RLCF   xEF,F
08014:  RLCF   xEE,F
08016:  RLCF   xEF,F
08018:  RLCF   xEE,F
0801A:  RLCF   xEF,F
0801C:  MOVLW  F0
0801E:  ANDWF  xEE,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
08020:  MOVLW  04
08022:  ADDWF  xE5,W
08024:  MOVWF  FE9
08026:  MOVLW  00
08028:  ADDWFC xE6,W
0802A:  MOVWF  FEA
0802C:  MOVF   FEF,W
0802E:  CLRF   xF3
08030:  MOVWF  xF2
08032:  RLCF   xF2,W
08034:  MOVWF  xF0
08036:  RLCF   xF3,W
08038:  MOVWF  xF1
0803A:  RLCF   xF0,F
0803C:  RLCF   xF1,F
0803E:  RLCF   xF0,F
08040:  RLCF   xF1,F
08042:  RLCF   xF0,F
08044:  RLCF   xF1,F
08046:  MOVLW  F0
08048:  ANDWF  xF0,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
0804A:  MOVLW  05
0804C:  ADDWF  xE5,W
0804E:  MOVWF  FE9
08050:  MOVLW  00
08052:  ADDWFC xE6,W
08054:  MOVWF  FEA
08056:  MOVF   FEF,W
08058:  CLRF   xF3
0805A:  MOVWF  xF2
0805C:  RLCF   xF2,W
0805E:  MOVWF  xEA
08060:  RLCF   xF3,W
08062:  MOVWF  xEB
08064:  RLCF   xEA,F
08066:  RLCF   xEB,F
08068:  RLCF   xEA,F
0806A:  RLCF   xEB,F
0806C:  RLCF   xEA,F
0806E:  RLCF   xEB,F
08070:  MOVLW  F0
08072:  ANDWF  xEA,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
08074:  MOVLW  06
08076:  ADDWF  xE5,W
08078:  MOVWF  FE9
0807A:  MOVLW  00
0807C:  ADDWFC xE6,W
0807E:  MOVWF  FEA
08080:  MOVF   FEF,W
08082:  CLRF   xF3
08084:  MOVWF  xF2
08086:  MOVFF  1F3,A52
0808A:  MOVFF  1F2,A51
0808E:  MOVLB  A
08090:  CLRF   x54
08092:  MOVLW  3C
08094:  MOVWF  x53
08096:  MOVLB  0
08098:  CALL   7F94
0809C:  MOVFF  02,1ED
080A0:  MOVFF  01,1EC
....................    return cmd;
080A4:  MOVLW  E7
080A6:  MOVWF  01
080A8:  MOVLW  01
080AA:  MOVWF  02
080AC:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08CD2:  MOVLW  03
08CD4:  MOVLB  1
08CD6:  ADDWF  xDF,W
08CD8:  MOVWF  FE9
08CDA:  MOVLW  00
08CDC:  ADDWFC xE0,W
08CDE:  MOVWF  FEA
08CE0:  MOVFF  FEC,1E8
08CE4:  MOVF   FED,F
08CE6:  MOVFF  FEF,1E7
08CEA:  MOVFF  1E8,1EA
08CEE:  MOVFF  1E7,1E9
08CF2:  MOVLB  0
08CF4:  GOTO   80AE
08CF8:  MOVFF  02,1E2
08CFC:  MOVFF  01,1E1
08D00:  MOVLW  09
08D02:  MOVLB  1
08D04:  ADDWF  xDF,W
08D06:  MOVWF  FE9
08D08:  MOVLW  00
08D0A:  ADDWFC xE0,W
08D0C:  MOVWF  FEA
08D0E:  MOVFF  FEC,1E8
08D12:  MOVF   FED,F
08D14:  MOVFF  FEF,1E7
08D18:  MOVFF  1E8,1EA
08D1C:  MOVFF  1E7,1E9
08D20:  MOVLB  0
08D22:  CALL   8AA4
08D26:  MOVFF  02,1E4
08D2A:  MOVFF  01,1E3
08D2E:  MOVLW  07
08D30:  MOVLB  1
08D32:  ADDWF  xDF,W
08D34:  MOVWF  FE9
08D36:  MOVLW  00
08D38:  ADDWFC xE0,W
08D3A:  MOVWF  FEA
08D3C:  MOVFF  FEC,1E8
08D40:  MOVF   FED,F
08D42:  MOVFF  FEF,1E7
08D46:  MOVFF  1E8,1EA
08D4A:  MOVFF  1E7,1E9
08D4E:  MOVLB  0
08D50:  CALL   8AA4
08D54:  MOVFF  02,1E6
08D58:  MOVFF  01,1E5
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
08D5C:  MOVLW  BC
08D5E:  MOVWF  FF6
08D60:  MOVLW  17
08D62:  MOVWF  FF7
08D64:  MOVLW  00
08D66:  MOVWF  FF8
08D68:  CALL   202E
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
08D6C:  MOVLB  1
08D6E:  MOVF   xDF,W
08D70:  MOVWF  FE9
08D72:  MOVF   xE0,W
08D74:  MOVWF  FEA
08D76:  MOVFF  FEF,1E7
08D7A:  MOVLW  DA
08D7C:  MOVWF  FF6
08D7E:  MOVLW  17
08D80:  MOVWF  FF7
08D82:  MOVLW  00
08D84:  MOVWF  FF8
08D86:  MOVLW  05
08D88:  MOVLB  9
08D8A:  MOVWF  xC2
08D8C:  MOVLB  0
08D8E:  CALL   2064
08D92:  MOVFF  1E7,9E8
08D96:  MOVLW  37
08D98:  MOVLB  9
08D9A:  MOVWF  xE9
08D9C:  MOVLB  0
08D9E:  CALL   2294
08DA2:  MOVLW  0D
08DA4:  BTFSS  FA6.6
08DA6:  GOTO   8DA4
08DAA:  MOVLB  E
08DAC:  MOVWF  xF9
08DAE:  MOVLW  0A
08DB0:  MOVLB  0
08DB2:  BTFSS  FA6.6
08DB4:  GOTO   8DB2
08DB8:  MOVLB  E
08DBA:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
08DBC:  MOVLW  01
08DBE:  MOVLB  1
08DC0:  ADDWF  xDF,W
08DC2:  MOVWF  FE9
08DC4:  MOVLW  00
08DC6:  ADDWFC xE0,W
08DC8:  MOVWF  FEA
08DCA:  MOVFF  FEC,1E8
08DCE:  MOVF   FED,F
08DD0:  MOVFF  FEF,1E7
08DD4:  MOVLW  E6
08DD6:  MOVWF  FF6
08DD8:  MOVLW  17
08DDA:  MOVWF  FF7
08DDC:  MOVLW  00
08DDE:  MOVWF  FF8
08DE0:  MOVLW  12
08DE2:  MOVLB  9
08DE4:  MOVWF  xC2
08DE6:  MOVLB  0
08DE8:  CALL   2064
08DEC:  MOVLW  10
08DEE:  MOVWF  FE9
08DF0:  MOVFF  1E8,1EA
08DF4:  MOVFF  1E7,1E9
08DF8:  CALL   8BB6
08DFC:  MOVLW  FB
08DFE:  MOVWF  FF6
08E00:  MOVLW  17
08E02:  MOVWF  FF7
08E04:  MOVLW  00
08E06:  MOVWF  FF8
08E08:  MOVLW  06
08E0A:  MOVLB  9
08E0C:  MOVWF  xC2
08E0E:  MOVLB  0
08E10:  CALL   2064
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
08E14:  MOVLW  02
08E16:  MOVWF  FF6
08E18:  MOVLW  18
08E1A:  MOVWF  FF7
08E1C:  MOVLW  00
08E1E:  MOVWF  FF8
08E20:  MOVLW  12
08E22:  MOVLB  9
08E24:  MOVWF  xC2
08E26:  MOVLB  0
08E28:  CALL   2064
08E2C:  MOVLW  10
08E2E:  MOVWF  FE9
08E30:  MOVFF  1E2,1EA
08E34:  MOVFF  1E1,1E9
08E38:  CALL   8BB6
08E3C:  MOVLW  17
08E3E:  MOVWF  FF6
08E40:  MOVLW  18
08E42:  MOVWF  FF7
08E44:  MOVLW  00
08E46:  MOVWF  FF8
08E48:  MOVLW  08
08E4A:  MOVLB  9
08E4C:  MOVWF  xC2
08E4E:  MOVLB  0
08E50:  CALL   2064
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
08E54:  MOVLW  20
08E56:  MOVWF  FF6
08E58:  MOVLW  18
08E5A:  MOVWF  FF7
08E5C:  MOVLW  00
08E5E:  MOVWF  FF8
08E60:  MOVLW  12
08E62:  MOVLB  9
08E64:  MOVWF  xC2
08E66:  MOVLB  0
08E68:  CALL   2064
08E6C:  MOVLW  10
08E6E:  MOVWF  FE9
08E70:  MOVFF  1E4,1EA
08E74:  MOVFF  1E3,1E9
08E78:  CALL   8BB6
08E7C:  MOVLW  35
08E7E:  MOVWF  FF6
08E80:  MOVLW  18
08E82:  MOVWF  FF7
08E84:  MOVLW  00
08E86:  MOVWF  FF8
08E88:  MOVLW  06
08E8A:  MOVLB  9
08E8C:  MOVWF  xC2
08E8E:  MOVLB  0
08E90:  CALL   2064
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
08E94:  MOVLW  3C
08E96:  MOVWF  FF6
08E98:  MOVLW  18
08E9A:  MOVWF  FF7
08E9C:  MOVLW  00
08E9E:  MOVWF  FF8
08EA0:  MOVLW  12
08EA2:  MOVLB  9
08EA4:  MOVWF  xC2
08EA6:  MOVLB  0
08EA8:  CALL   2064
08EAC:  MOVLW  10
08EAE:  MOVWF  FE9
08EB0:  MOVFF  1E6,1EA
08EB4:  MOVFF  1E5,1E9
08EB8:  CALL   8BB6
08EBC:  MOVLW  51
08EBE:  MOVWF  FF6
08EC0:  MOVLW  18
08EC2:  MOVWF  FF7
08EC4:  MOVLW  00
08EC6:  MOVWF  FF8
08EC8:  MOVLW  06
08ECA:  MOVLB  9
08ECC:  MOVWF  xC2
08ECE:  MOVLB  0
08ED0:  CALL   2064
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
08ED4:  MOVLW  05
08ED6:  MOVLB  1
08ED8:  ADDWF  xDF,W
08EDA:  MOVWF  FE9
08EDC:  MOVLW  00
08EDE:  ADDWFC xE0,W
08EE0:  MOVWF  FEA
08EE2:  MOVFF  FEC,1E8
08EE6:  MOVF   FED,F
08EE8:  MOVFF  FEF,1E7
08EEC:  MOVLW  58
08EEE:  MOVWF  FF6
08EF0:  MOVLW  18
08EF2:  MOVWF  FF7
08EF4:  MOVLW  00
08EF6:  MOVWF  FF8
08EF8:  MOVLW  12
08EFA:  MOVLB  9
08EFC:  MOVWF  xC2
08EFE:  MOVLB  0
08F00:  CALL   2064
08F04:  MOVLW  10
08F06:  MOVWF  FE9
08F08:  MOVFF  1E8,1EA
08F0C:  MOVFF  1E7,1E9
08F10:  CALL   8BB6
08F14:  MOVLW  6D
08F16:  MOVWF  FF6
08F18:  MOVLW  18
08F1A:  MOVWF  FF7
08F1C:  MOVLW  00
08F1E:  MOVWF  FF8
08F20:  MOVLW  07
08F22:  MOVLB  9
08F24:  MOVWF  xC2
08F26:  MOVLB  0
08F28:  CALL   2064
08F2C:  GOTO   A832 (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0E078:  MOVLW  76
0E07A:  MOVWF  FF6
0E07C:  MOVLW  18
0E07E:  MOVWF  FF7
0E080:  MOVLW  00
0E082:  MOVWF  FF8
0E084:  CALL   202E
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0E088:  MOVLW  01
0E08A:  MOVLB  1
0E08C:  ADDWF  xAF,W
0E08E:  MOVWF  FE9
0E090:  MOVLW  00
0E092:  ADDWFC xB0,W
0E094:  MOVWF  FEA
0E096:  MOVF   FEF,W
0E098:  CLRF   xC4
0E09A:  MOVWF  xC3
0E09C:  MOVFF  1C3,1C4
0E0A0:  CLRF   xC3
0E0A2:  MOVLW  02
0E0A4:  ADDWF  xAF,W
0E0A6:  MOVWF  FE9
0E0A8:  MOVLW  00
0E0AA:  ADDWFC xB0,W
0E0AC:  MOVWF  FEA
0E0AE:  MOVF   FEF,W
0E0B0:  IORWF  xC3,W
0E0B2:  MOVWF  xB1
0E0B4:  MOVF   xC4,W
0E0B6:  MOVWF  xB2
0E0B8:  MOVLW  06
0E0BA:  ADDWF  xAF,W
0E0BC:  MOVWF  FE9
0E0BE:  MOVLW  00
0E0C0:  ADDWFC xB0,W
0E0C2:  MOVWF  FEA
0E0C4:  MOVF   FEF,W
0E0C6:  CLRF   xC4
0E0C8:  MOVWF  xC3
0E0CA:  MOVFF  1C4,A52
0E0CE:  MOVFF  1C3,A51
0E0D2:  MOVLB  A
0E0D4:  CLRF   x54
0E0D6:  MOVLW  3C
0E0D8:  MOVWF  x53
0E0DA:  MOVLB  0
0E0DC:  CALL   7F94
0E0E0:  MOVFF  02,1B4
0E0E4:  MOVFF  01,1B3
0E0E8:  CALL   9890
0E0EC:  MOVLB  1
0E0EE:  CLRF   xB8
0E0F0:  CLRF   xB7
0E0F2:  MOVFF  02,1B6
0E0F6:  MOVFF  01,1B5
0E0FA:  CLRF   xBC
0E0FC:  CLRF   xBB
0E0FE:  CLRF   xBA
0E100:  CLRF   xB9
0E102:  CLRF   xC6
0E104:  CLRF   xC5
0E106:  MOVFF  1B4,1C4
0E10A:  MOVFF  1B3,1C3
0E10E:  MOVFF  FEA,1C8
0E112:  MOVFF  FE9,1C7
0E116:  MOVFF  1C6,1CC
0E11A:  MOVFF  1C5,1CB
0E11E:  MOVFF  1C4,1CA
0E122:  MOVFF  1C3,1C9
0E126:  CLRF   xD0
0E128:  CLRF   xCF
0E12A:  MOVLW  03
0E12C:  MOVWF  xCE
0E12E:  MOVLW  E8
0E130:  MOVWF  xCD
0E132:  MOVLB  0
0E134:  GOTO   E004
0E138:  MOVFF  1C8,FEA
0E13C:  MOVFF  1C7,FE9
0E140:  MOVFF  03,1C0
0E144:  MOVFF  02,1BF
0E148:  MOVFF  01,1BE
0E14C:  MOVFF  00,1BD
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0E150:  MOVLB  1
0E152:  MOVF   xB5,W
0E154:  SUBWF  xB9,W
0E156:  MOVWF  xC3
0E158:  MOVF   xB6,W
0E15A:  SUBWFB xBA,W
0E15C:  MOVWF  xC4
0E15E:  MOVF   xB7,W
0E160:  SUBWFB xBB,W
0E162:  MOVWF  xC5
0E164:  MOVF   xB8,W
0E166:  SUBWFB xBC,W
0E168:  MOVWF  xC6
0E16A:  MOVF   xC6,W
0E16C:  SUBWF  xC0,W
0E16E:  BTFSC  FD8.0
0E170:  BRA    E178
0E172:  MOVLB  0
0E174:  GOTO   E25C
0E178:  MOVLB  0
0E17A:  BTFSS  FD8.2
0E17C:  GOTO   E1C2
0E180:  MOVLB  1
0E182:  MOVF   xC5,W
0E184:  SUBWF  xBF,W
0E186:  BTFSC  FD8.0
0E188:  BRA    E190
0E18A:  MOVLB  0
0E18C:  GOTO   E25C
0E190:  MOVLB  0
0E192:  BTFSS  FD8.2
0E194:  GOTO   E1C2
0E198:  MOVLB  1
0E19A:  MOVF   xC4,W
0E19C:  SUBWF  xBE,W
0E19E:  BTFSC  FD8.0
0E1A0:  BRA    E1A8
0E1A2:  MOVLB  0
0E1A4:  GOTO   E25C
0E1A8:  MOVLB  0
0E1AA:  BTFSS  FD8.2
0E1AC:  GOTO   E1C2
0E1B0:  MOVLB  1
0E1B2:  MOVF   xBD,W
0E1B4:  SUBWF  xC3,W
0E1B6:  BTFSS  FD8.0
0E1B8:  BRA    E1C0
0E1BA:  MOVLB  0
0E1BC:  GOTO   E25C
0E1C0:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0E1C2:  CALL   9890
0E1C6:  MOVLB  1
0E1C8:  CLRF   xBC
0E1CA:  CLRF   xBB
0E1CC:  MOVFF  02,1BA
0E1D0:  MOVFF  01,1B9
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0E1D4:  MOVF   x88,W
0E1D6:  SUBWF  xB9,W
0E1D8:  MOVWF  xC3
0E1DA:  MOVF   x89,W
0E1DC:  SUBWFB xBA,W
0E1DE:  MOVWF  xC4
0E1E0:  MOVF   x8A,W
0E1E2:  SUBWFB xBB,W
0E1E4:  MOVWF  xC5
0E1E6:  MOVF   x8B,W
0E1E8:  SUBWFB xBC,W
0E1EA:  MOVWF  xC6
0E1EC:  MOVF   xC6,F
0E1EE:  BTFSC  FD8.2
0E1F0:  BRA    E1F8
0E1F2:  MOVLB  0
0E1F4:  GOTO   E234
0E1F8:  MOVLB  0
0E1FA:  MOVLB  1
0E1FC:  MOVF   xC5,F
0E1FE:  BTFSC  FD8.2
0E200:  BRA    E208
0E202:  MOVLB  0
0E204:  GOTO   E234
0E208:  MOVLB  0
0E20A:  MOVLB  1
0E20C:  MOVF   xB2,W
0E20E:  SUBWF  xC4,W
0E210:  BTFSC  FD8.0
0E212:  BRA    E21A
0E214:  MOVLB  0
0E216:  GOTO   E258
0E21A:  MOVLB  0
0E21C:  BTFSS  FD8.2
0E21E:  GOTO   E234
0E222:  MOVLB  1
0E224:  MOVF   xB1,W
0E226:  SUBWF  xC3,W
0E228:  BTFSC  FD8.0
0E22A:  BRA    E232
0E22C:  MOVLB  0
0E22E:  GOTO   E258
0E232:  MOVLB  0
....................          last_meas_time = current_time_ms;
0E234:  MOVFF  1BC,18B
0E238:  MOVFF  1BB,18A
0E23C:  MOVFF  1BA,189
0E240:  MOVFF  1B9,188
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0E244:  MOVLW  0F
0E246:  MOVLB  9
0E248:  MOVWF  xEE
0E24A:  MOVLB  0
0E24C:  CALL   2214
0E250:  MOVFF  02,1C2
0E254:  MOVFF  01,1C1
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0E258:  GOTO   E150
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0E25C:  MOVLW  8C
0E25E:  MOVWF  FF6
0E260:  MOVLW  18
0E262:  MOVWF  FF7
0E264:  MOVLW  00
0E266:  MOVWF  FF8
0E268:  CALL   202E
0E26C:  GOTO   E61A (RETURN)
.................... }
.................... 
.................... #include "application/cigs_mode_flash.c"
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
059C8:  MOVLW  A0
059CA:  MOVWF  FF6
059CC:  MOVLW  18
059CE:  MOVWF  FF7
059D0:  MOVLW  00
059D2:  MOVWF  FF8
059D4:  CALL   202E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
059D8:  MOVLB  1
059DA:  MOVF   xB1,W
059DC:  MOVWF  FE9
059DE:  MOVF   xB2,W
059E0:  MOVWF  FEA
059E2:  MOVFF  FEF,1B3
....................    piclog_make(cmd, 0x00); // Log the command execution
059E6:  MOVFF  1B3,206
059EA:  MOVLB  2
059EC:  CLRF   x07
059EE:  MOVLB  0
059F0:  CALL   4E3E
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
059F4:  MOVLB  1
059F6:  CLRF   xB7
059F8:  CLRF   xB6
059FA:  CLRF   xB5
059FC:  CLRF   xB4
059FE:  MOVLB  0
05A00:  MOVLB  1
05A02:  MOVF   xB7,F
05A04:  BTFSC  FD8.2
05A06:  BRA    5A0E
05A08:  MOVLB  0
05A0A:  GOTO   5A86
05A0E:  MOVLB  0
05A10:  MOVLB  1
05A12:  MOVF   xB6,W
05A14:  SUBLW  BC
05A16:  BTFSC  FD8.0
05A18:  BRA    5A20
05A1A:  MOVLB  0
05A1C:  GOTO   5A86
05A20:  MOVLB  0
05A22:  BTFSS  FD8.2
05A24:  GOTO   5A52
05A28:  MOVLB  1
05A2A:  MOVF   xB5,W
05A2C:  SUBLW  0F
05A2E:  BTFSC  FD8.0
05A30:  BRA    5A38
05A32:  MOVLB  0
05A34:  GOTO   5A86
05A38:  MOVLB  0
05A3A:  BTFSS  FD8.2
05A3C:  GOTO   5A52
05A40:  MOVLB  1
05A42:  MOVF   xB4,W
05A44:  SUBLW  FE
05A46:  BTFSC  FD8.0
05A48:  BRA    5A50
05A4A:  MOVLB  0
05A4C:  GOTO   5A86
05A50:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05A52:  MOVFF  115,1F8
05A56:  MOVFF  114,1F7
05A5A:  MOVFF  113,1F6
05A5E:  MOVFF  112,1F5
05A62:  MOVFF  1B7,1FC
05A66:  MOVFF  1B6,1FB
05A6A:  MOVFF  1B5,1FA
05A6E:  MOVFF  1B4,1F9
05A72:  CALL   5666
05A76:  MOVLW  01
05A78:  MOVLB  1
05A7A:  ADDWF  xB6,F
05A7C:  MOVLW  00
05A7E:  ADDWFC xB7,F
05A80:  MOVLB  0
05A82:  GOTO   5A00
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05A86:  MOVFF  1B3,206
05A8A:  MOVLB  2
05A8C:  SETF   x07
05A8E:  MOVLB  0
05A90:  CALL   4E3E
....................    printf("End Flash Erase All\r\n");
05A94:  MOVLW  B8
05A96:  MOVWF  FF6
05A98:  MOVLW  18
05A9A:  MOVWF  FF7
05A9C:  MOVLW  00
05A9E:  MOVWF  FF8
05AA0:  CALL   202E
05AA4:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05AA6:  MOVLW  CE
05AA8:  MOVWF  FF6
05AAA:  MOVLW  18
05AAC:  MOVWF  FF7
05AAE:  MOVLW  00
05AB0:  MOVWF  FF8
05AB2:  CALL   202E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05AB6:  MOVLB  1
05AB8:  MOVF   xAF,W
05ABA:  MOVWF  FE9
05ABC:  MOVF   xB0,W
05ABE:  MOVWF  FEA
05AC0:  MOVFF  FEF,1B1
05AC4:  MOVLW  01
05AC6:  ADDWF  xAF,W
05AC8:  MOVWF  FE9
05ACA:  MOVLW  00
05ACC:  ADDWFC xB0,W
05ACE:  MOVWF  FEA
05AD0:  MOVF   FEF,W
05AD2:  CLRF   xB9
05AD4:  CLRF   xB8
05AD6:  CLRF   xB7
05AD8:  MOVWF  xB6
05ADA:  MOVFF  1B6,1B9
05ADE:  CLRF   xB6
05AE0:  CLRF   xB7
05AE2:  CLRF   xB8
05AE4:  MOVLW  02
05AE6:  ADDWF  xAF,W
05AE8:  MOVWF  FE9
05AEA:  MOVLW  00
05AEC:  ADDWFC xB0,W
05AEE:  MOVWF  FEA
05AF0:  MOVF   FEF,W
05AF2:  CLRF   xBE
05AF4:  CLRF   xBD
05AF6:  CLRF   xBC
05AF8:  MOVWF  xBB
05AFA:  MOVFF  1BC,03
05AFE:  MOVFF  1BB,02
05B02:  CLRF   00
05B04:  CLRF   01
05B06:  MOVF   00,W
05B08:  IORWF  xB6,F
05B0A:  MOVF   01,W
05B0C:  IORWF  xB7,F
05B0E:  MOVF   02,W
05B10:  IORWF  xB8,F
05B12:  MOVF   03,W
05B14:  IORWF  xB9,F
05B16:  MOVLW  03
05B18:  ADDWF  xAF,W
05B1A:  MOVWF  FE9
05B1C:  MOVLW  00
05B1E:  ADDWFC xB0,W
05B20:  MOVWF  FEA
05B22:  MOVF   FEF,W
05B24:  CLRF   xBE
05B26:  CLRF   xBD
05B28:  CLRF   xBC
05B2A:  MOVWF  xBB
05B2C:  MOVFF  1BD,03
05B30:  MOVFF  1BC,02
05B34:  MOVFF  1BB,01
05B38:  CLRF   00
05B3A:  MOVF   00,W
05B3C:  IORWF  xB6,F
05B3E:  MOVF   01,W
05B40:  IORWF  xB7,F
05B42:  MOVF   02,W
05B44:  IORWF  xB8,F
05B46:  MOVF   03,W
05B48:  IORWF  xB9,F
05B4A:  MOVLW  04
05B4C:  ADDWF  xAF,W
05B4E:  MOVWF  FE9
05B50:  MOVLW  00
05B52:  ADDWFC xB0,W
05B54:  MOVWF  FEA
05B56:  MOVF   FEF,W
05B58:  MOVWF  00
05B5A:  CLRF   01
05B5C:  CLRF   02
05B5E:  CLRF   03
05B60:  MOVF   00,W
05B62:  IORWF  xB6,W
05B64:  MOVWF  xB2
05B66:  MOVF   01,W
05B68:  IORWF  xB7,W
05B6A:  MOVWF  xB3
05B6C:  MOVF   02,W
05B6E:  IORWF  xB8,W
05B70:  MOVWF  xB4
05B72:  MOVF   03,W
05B74:  IORWF  xB9,W
05B76:  MOVWF  xB5
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05B78:  MOVLW  EC
05B7A:  MOVWF  FF6
05B7C:  MOVLW  18
05B7E:  MOVWF  FF7
05B80:  MOVLW  00
05B82:  MOVWF  FF8
05B84:  MOVLW  13
05B86:  MOVLB  9
05B88:  MOVWF  xC2
05B8A:  MOVLB  0
05B8C:  CALL   2064
05B90:  MOVFF  1B5,9E8
05B94:  MOVLW  37
05B96:  MOVLB  9
05B98:  MOVWF  xE9
05B9A:  MOVLB  0
05B9C:  CALL   2294
05BA0:  MOVFF  1B4,9E8
05BA4:  MOVLW  37
05BA6:  MOVLB  9
05BA8:  MOVWF  xE9
05BAA:  MOVLB  0
05BAC:  CALL   2294
05BB0:  MOVFF  1B3,9E8
05BB4:  MOVLW  37
05BB6:  MOVLB  9
05BB8:  MOVWF  xE9
05BBA:  MOVLB  0
05BBC:  CALL   2294
05BC0:  MOVFF  1B2,9E8
05BC4:  MOVLW  37
05BC6:  MOVLB  9
05BC8:  MOVWF  xE9
05BCA:  MOVLB  0
05BCC:  CALL   2294
05BD0:  MOVLW  0D
05BD2:  BTFSS  FA6.6
05BD4:  GOTO   5BD2
05BD8:  MOVLB  E
05BDA:  MOVWF  xF9
05BDC:  MOVLW  0A
05BDE:  MOVLB  0
05BE0:  BTFSS  FA6.6
05BE2:  GOTO   5BE0
05BE6:  MOVLB  E
05BE8:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05BEA:  MOVFF  1B1,206
05BEE:  MOVLB  2
05BF0:  CLRF   x07
05BF2:  MOVLB  0
05BF4:  CALL   4E3E
....................    
....................    sector_erase(mis_fm, sector_address);
05BF8:  MOVFF  115,1F8
05BFC:  MOVFF  114,1F7
05C00:  MOVFF  113,1F6
05C04:  MOVFF  112,1F5
05C08:  MOVFF  1B5,1FC
05C0C:  MOVFF  1B4,1FB
05C10:  MOVFF  1B3,1FA
05C14:  MOVFF  1B2,1F9
05C18:  CALL   5666
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05C1C:  MOVFF  1B1,206
05C20:  MOVLB  2
05C22:  SETF   x07
05C24:  MOVLB  0
05C26:  CALL   4E3E
....................    printf("End Flash Erase 1 Sector\r\n");
05C2A:  MOVLW  08
05C2C:  MOVWF  FF6
05C2E:  MOVLW  19
05C30:  MOVWF  FF7
05C32:  MOVLW  00
05C34:  MOVWF  FF8
05C36:  CALL   202E
05C3A:  GOTO   E4F6 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05C3E:  MOVLW  24
05C40:  MOVWF  FF6
05C42:  MOVLW  19
05C44:  MOVWF  FF7
05C46:  MOVLW  00
05C48:  MOVWF  FF8
05C4A:  CALL   202E
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05C4E:  MOVLB  1
05C50:  MOVF   xAF,W
05C52:  MOVWF  FE9
05C54:  MOVF   xB0,W
05C56:  MOVWF  FEA
05C58:  MOVFF  FEF,1B1
05C5C:  MOVLW  01
05C5E:  ADDWF  xAF,W
05C60:  MOVWF  FE9
05C62:  MOVLW  00
05C64:  ADDWFC xB0,W
05C66:  MOVWF  FEA
05C68:  MOVF   FEF,W
05C6A:  CLRF   xB9
05C6C:  CLRF   xB8
05C6E:  CLRF   xB7
05C70:  MOVWF  xB6
05C72:  MOVFF  1B6,1B9
05C76:  CLRF   xB6
05C78:  CLRF   xB7
05C7A:  CLRF   xB8
05C7C:  MOVLW  02
05C7E:  ADDWF  xAF,W
05C80:  MOVWF  FE9
05C82:  MOVLW  00
05C84:  ADDWFC xB0,W
05C86:  MOVWF  FEA
05C88:  MOVF   FEF,W
05C8A:  CLRF   xBE
05C8C:  CLRF   xBD
05C8E:  CLRF   xBC
05C90:  MOVWF  xBB
05C92:  MOVFF  1BC,03
05C96:  MOVFF  1BB,02
05C9A:  CLRF   00
05C9C:  CLRF   01
05C9E:  MOVF   00,W
05CA0:  IORWF  xB6,F
05CA2:  MOVF   01,W
05CA4:  IORWF  xB7,F
05CA6:  MOVF   02,W
05CA8:  IORWF  xB8,F
05CAA:  MOVF   03,W
05CAC:  IORWF  xB9,F
05CAE:  MOVLW  03
05CB0:  ADDWF  xAF,W
05CB2:  MOVWF  FE9
05CB4:  MOVLW  00
05CB6:  ADDWFC xB0,W
05CB8:  MOVWF  FEA
05CBA:  MOVF   FEF,W
05CBC:  CLRF   xBE
05CBE:  CLRF   xBD
05CC0:  CLRF   xBC
05CC2:  MOVWF  xBB
05CC4:  MOVFF  1BD,03
05CC8:  MOVFF  1BC,02
05CCC:  MOVFF  1BB,01
05CD0:  CLRF   00
05CD2:  MOVF   00,W
05CD4:  IORWF  xB6,F
05CD6:  MOVF   01,W
05CD8:  IORWF  xB7,F
05CDA:  MOVF   02,W
05CDC:  IORWF  xB8,F
05CDE:  MOVF   03,W
05CE0:  IORWF  xB9,F
05CE2:  MOVLW  04
05CE4:  ADDWF  xAF,W
05CE6:  MOVWF  FE9
05CE8:  MOVLW  00
05CEA:  ADDWFC xB0,W
05CEC:  MOVWF  FEA
05CEE:  MOVF   FEF,W
05CF0:  MOVWF  00
05CF2:  CLRF   01
05CF4:  CLRF   02
05CF6:  CLRF   03
05CF8:  MOVF   00,W
05CFA:  IORWF  xB6,W
05CFC:  MOVWF  xB2
05CFE:  MOVF   01,W
05D00:  IORWF  xB7,W
05D02:  MOVWF  xB3
05D04:  MOVF   02,W
05D06:  IORWF  xB8,W
05D08:  MOVWF  xB4
05D0A:  MOVF   03,W
05D0C:  IORWF  xB9,W
05D0E:  MOVWF  xB5
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05D10:  MOVLW  4A
05D12:  MOVWF  FF6
05D14:  MOVLW  19
05D16:  MOVWF  FF7
05D18:  MOVLW  00
05D1A:  MOVWF  FF8
05D1C:  MOVLW  16
05D1E:  MOVLB  9
05D20:  MOVWF  xC2
05D22:  MOVLB  0
05D24:  CALL   2064
05D28:  MOVFF  1B5,9E8
05D2C:  MOVLW  37
05D2E:  MOVLB  9
05D30:  MOVWF  xE9
05D32:  MOVLB  0
05D34:  CALL   2294
05D38:  MOVFF  1B4,9E8
05D3C:  MOVLW  37
05D3E:  MOVLB  9
05D40:  MOVWF  xE9
05D42:  MOVLB  0
05D44:  CALL   2294
05D48:  MOVFF  1B3,9E8
05D4C:  MOVLW  37
05D4E:  MOVLB  9
05D50:  MOVWF  xE9
05D52:  MOVLB  0
05D54:  CALL   2294
05D58:  MOVFF  1B2,9E8
05D5C:  MOVLW  37
05D5E:  MOVLB  9
05D60:  MOVWF  xE9
05D62:  MOVLB  0
05D64:  CALL   2294
05D68:  MOVLW  0D
05D6A:  BTFSS  FA6.6
05D6C:  GOTO   5D6A
05D70:  MOVLB  E
05D72:  MOVWF  xF9
05D74:  MOVLW  0A
05D76:  MOVLB  0
05D78:  BTFSS  FA6.6
05D7A:  GOTO   5D78
05D7E:  MOVLB  E
05D80:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05D82:  MOVFF  1B1,206
05D86:  MOVLB  2
05D88:  CLRF   x07
05D8A:  MOVLB  0
05D8C:  CALL   4E3E
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05D90:  MOVFF  115,A07
05D94:  MOVFF  114,A06
05D98:  MOVFF  113,A05
05D9C:  MOVFF  112,A04
05DA0:  MOVFF  1B5,A0B
05DA4:  MOVFF  1B4,A0A
05DA8:  MOVFF  1B3,A09
05DAC:  MOVFF  1B2,A08
05DB0:  CALL   4A8C
....................    piclog_make(cmd, PICLOG_PARAM_END);
05DB4:  MOVFF  1B1,206
05DB8:  MOVLB  2
05DBA:  SETF   x07
05DBC:  MOVLB  0
05DBE:  CALL   4E3E
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05DC2:  MOVLW  68
05DC4:  MOVWF  FF6
05DC6:  MOVLW  19
05DC8:  MOVWF  FF7
05DCA:  MOVLW  00
05DCC:  MOVWF  FF8
05DCE:  CALL   202E
05DD2:  GOTO   E506 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05DD6:  MOVLW  8C
05DD8:  MOVWF  FF6
05DDA:  MOVLW  19
05DDC:  MOVWF  FF7
05DDE:  MOVLW  00
05DE0:  MOVWF  FF8
05DE2:  CALL   202E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05DE6:  MOVLB  1
05DE8:  MOVF   xAF,W
05DEA:  MOVWF  FE9
05DEC:  MOVF   xB0,W
05DEE:  MOVWF  FEA
05DF0:  MOVFF  FEF,1B1
05DF4:  MOVLW  01
05DF6:  ADDWF  xAF,W
05DF8:  MOVWF  FE9
05DFA:  MOVLW  00
05DFC:  ADDWFC xB0,W
05DFE:  MOVWF  FEA
05E00:  MOVF   FEF,W
05E02:  CLRF   xB9
05E04:  CLRF   xB8
05E06:  CLRF   xB7
05E08:  MOVWF  xB6
05E0A:  MOVFF  1B6,1B9
05E0E:  CLRF   xB6
05E10:  CLRF   xB7
05E12:  CLRF   xB8
05E14:  MOVLW  02
05E16:  ADDWF  xAF,W
05E18:  MOVWF  FE9
05E1A:  MOVLW  00
05E1C:  ADDWFC xB0,W
05E1E:  MOVWF  FEA
05E20:  MOVF   FEF,W
05E22:  CLRF   xBE
05E24:  CLRF   xBD
05E26:  CLRF   xBC
05E28:  MOVWF  xBB
05E2A:  MOVFF  1BC,03
05E2E:  MOVFF  1BB,02
05E32:  CLRF   00
05E34:  CLRF   01
05E36:  MOVF   00,W
05E38:  IORWF  xB6,F
05E3A:  MOVF   01,W
05E3C:  IORWF  xB7,F
05E3E:  MOVF   02,W
05E40:  IORWF  xB8,F
05E42:  MOVF   03,W
05E44:  IORWF  xB9,F
05E46:  MOVLW  03
05E48:  ADDWF  xAF,W
05E4A:  MOVWF  FE9
05E4C:  MOVLW  00
05E4E:  ADDWFC xB0,W
05E50:  MOVWF  FEA
05E52:  MOVF   FEF,W
05E54:  CLRF   xBE
05E56:  CLRF   xBD
05E58:  CLRF   xBC
05E5A:  MOVWF  xBB
05E5C:  MOVFF  1BD,03
05E60:  MOVFF  1BC,02
05E64:  MOVFF  1BB,01
05E68:  CLRF   00
05E6A:  MOVF   00,W
05E6C:  IORWF  xB6,F
05E6E:  MOVF   01,W
05E70:  IORWF  xB7,F
05E72:  MOVF   02,W
05E74:  IORWF  xB8,F
05E76:  MOVF   03,W
05E78:  IORWF  xB9,F
05E7A:  MOVLW  04
05E7C:  ADDWF  xAF,W
05E7E:  MOVWF  FE9
05E80:  MOVLW  00
05E82:  ADDWFC xB0,W
05E84:  MOVWF  FEA
05E86:  MOVF   FEF,W
05E88:  MOVWF  00
05E8A:  CLRF   01
05E8C:  CLRF   02
05E8E:  CLRF   03
05E90:  MOVF   00,W
05E92:  IORWF  xB6,W
05E94:  MOVWF  xB2
05E96:  MOVF   01,W
05E98:  IORWF  xB7,W
05E9A:  MOVWF  xB3
05E9C:  MOVF   02,W
05E9E:  IORWF  xB8,W
05EA0:  MOVWF  xB4
05EA2:  MOVF   03,W
05EA4:  IORWF  xB9,W
05EA6:  MOVWF  xB5
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05EA8:  MOVLW  B2
05EAA:  MOVWF  FF6
05EAC:  MOVLW  19
05EAE:  MOVWF  FF7
05EB0:  MOVLW  00
05EB2:  MOVWF  FF8
05EB4:  MOVLW  16
05EB6:  MOVLB  9
05EB8:  MOVWF  xC2
05EBA:  MOVLB  0
05EBC:  CALL   2064
05EC0:  MOVFF  1B5,9E8
05EC4:  MOVLW  37
05EC6:  MOVLB  9
05EC8:  MOVWF  xE9
05ECA:  MOVLB  0
05ECC:  CALL   2294
05ED0:  MOVFF  1B4,9E8
05ED4:  MOVLW  37
05ED6:  MOVLB  9
05ED8:  MOVWF  xE9
05EDA:  MOVLB  0
05EDC:  CALL   2294
05EE0:  MOVFF  1B3,9E8
05EE4:  MOVLW  37
05EE6:  MOVLB  9
05EE8:  MOVWF  xE9
05EEA:  MOVLB  0
05EEC:  CALL   2294
05EF0:  MOVFF  1B2,9E8
05EF4:  MOVLW  37
05EF6:  MOVLB  9
05EF8:  MOVWF  xE9
05EFA:  MOVLB  0
05EFC:  CALL   2294
05F00:  MOVLW  0D
05F02:  BTFSS  FA6.6
05F04:  GOTO   5F02
05F08:  MOVLB  E
05F0A:  MOVWF  xF9
05F0C:  MOVLW  0A
05F0E:  MOVLB  0
05F10:  BTFSS  FA6.6
05F12:  GOTO   5F10
05F16:  MOVLB  E
05F18:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05F1A:  MOVFF  1B1,206
05F1E:  MOVLB  2
05F20:  CLRF   x07
05F22:  MOVLB  0
05F24:  CALL   4E3E
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05F28:  MOVFF  1B1,206
05F2C:  MOVLB  2
05F2E:  SETF   x07
05F30:  MOVLB  0
05F32:  CALL   4E3E
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05F36:  MOVLW  D0
05F38:  MOVWF  FF6
05F3A:  MOVLW  19
05F3C:  MOVWF  FF7
05F3E:  MOVLW  00
05F40:  MOVWF  FF8
05F42:  CALL   202E
05F46:  GOTO   E516 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
0612A:  MOVLW  F4
0612C:  MOVWF  FF6
0612E:  MOVLW  19
06130:  MOVWF  FF7
06132:  MOVLW  00
06134:  MOVWF  FF8
06136:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0613A:  MOVLB  1
0613C:  MOVF   xAF,W
0613E:  MOVWF  FE9
06140:  MOVF   xB0,W
06142:  MOVWF  FEA
06144:  MOVFF  FEF,205
06148:  MOVFF  205,206
0614C:  MOVLB  2
0614E:  CLRF   x07
06150:  MOVLB  0
06152:  CALL   4E3E
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06156:  MOVLB  1
06158:  CLRF   xB1
0615A:  CLRF   xB2
0615C:  CLRF   xB3
0615E:  CLRF   xB4
06160:  CLRF   xB5
06162:  CLRF   xB6
06164:  CLRF   xB7
....................    
....................    flash_write_param.id = parameter[0];
06166:  MOVF   xAF,W
06168:  MOVWF  FE9
0616A:  MOVF   xB0,W
0616C:  MOVWF  FEA
0616E:  MOVFF  FEF,1B1
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
06172:  MOVLW  01
06174:  ADDWF  xAF,W
06176:  MOVWF  FE9
06178:  MOVLW  00
0617A:  ADDWFC xB0,W
0617C:  MOVWF  FEA
0617E:  MOVF   FEF,W
06180:  MOVLB  2
06182:  CLRF   x08
06184:  CLRF   x07
06186:  CLRF   x06
06188:  MOVWF  x05
0618A:  MOVFF  205,208
0618E:  CLRF   x05
06190:  CLRF   x06
06192:  CLRF   x07
06194:  MOVLW  02
06196:  MOVLB  1
06198:  ADDWF  xAF,W
0619A:  MOVWF  FE9
0619C:  MOVLW  00
0619E:  ADDWFC xB0,W
061A0:  MOVWF  FEA
061A2:  MOVF   FEF,W
061A4:  MOVLB  2
061A6:  CLRF   x0D
061A8:  CLRF   x0C
061AA:  CLRF   x0B
061AC:  MOVWF  x0A
061AE:  MOVFF  20B,03
061B2:  MOVFF  20A,02
061B6:  CLRF   00
061B8:  CLRF   01
061BA:  MOVF   00,W
061BC:  IORWF  x05,F
061BE:  MOVF   01,W
061C0:  IORWF  x06,F
061C2:  MOVF   02,W
061C4:  IORWF  x07,F
061C6:  MOVF   03,W
061C8:  IORWF  x08,F
061CA:  MOVLW  03
061CC:  MOVLB  1
061CE:  ADDWF  xAF,W
061D0:  MOVWF  FE9
061D2:  MOVLW  00
061D4:  ADDWFC xB0,W
061D6:  MOVWF  FEA
061D8:  MOVF   FEF,W
061DA:  MOVLB  2
061DC:  CLRF   x0D
061DE:  CLRF   x0C
061E0:  CLRF   x0B
061E2:  MOVWF  x0A
061E4:  MOVFF  20C,03
061E8:  MOVFF  20B,02
061EC:  MOVFF  20A,01
061F0:  CLRF   00
061F2:  MOVF   00,W
061F4:  IORWF  x05,F
061F6:  MOVF   01,W
061F8:  IORWF  x06,F
061FA:  MOVF   02,W
061FC:  IORWF  x07,F
061FE:  MOVF   03,W
06200:  IORWF  x08,F
06202:  MOVLW  04
06204:  MOVLB  1
06206:  ADDWF  xAF,W
06208:  MOVWF  FE9
0620A:  MOVLW  00
0620C:  ADDWFC xB0,W
0620E:  MOVWF  FEA
06210:  MOVF   FEF,W
06212:  MOVWF  00
06214:  CLRF   01
06216:  CLRF   02
06218:  CLRF   03
0621A:  MOVF   00,W
0621C:  MOVLB  2
0621E:  IORWF  x05,W
06220:  MOVLB  1
06222:  MOVWF  xB2
06224:  MOVF   01,W
06226:  MOVLB  2
06228:  IORWF  x06,W
0622A:  MOVLB  1
0622C:  MOVWF  xB3
0622E:  MOVF   02,W
06230:  MOVLB  2
06232:  IORWF  x07,W
06234:  MOVLB  1
06236:  MOVWF  xB4
06238:  MOVF   03,W
0623A:  MOVLB  2
0623C:  IORWF  x08,W
0623E:  MOVLB  1
06240:  MOVWF  xB5
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
06242:  MOVLW  07
06244:  ADDWF  xAF,W
06246:  MOVWF  FE9
06248:  MOVLW  00
0624A:  ADDWFC xB0,W
0624C:  MOVWF  FEA
0624E:  MOVF   FEF,W
06250:  MOVLB  2
06252:  CLRF   x06
06254:  MOVWF  x05
06256:  MOVFF  205,206
0625A:  CLRF   x05
0625C:  MOVLW  08
0625E:  MOVLB  1
06260:  ADDWF  xAF,W
06262:  MOVWF  FE9
06264:  MOVLW  00
06266:  ADDWFC xB0,W
06268:  MOVWF  FEA
0626A:  MOVF   FEF,W
0626C:  CLRF   03
0626E:  MOVLB  2
06270:  IORWF  x05,W
06272:  MOVLB  1
06274:  MOVWF  xB6
06276:  MOVF   03,W
06278:  MOVLB  2
0627A:  IORWF  x06,W
0627C:  MOVLB  1
0627E:  MOVWF  xB7
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
06280:  MOVLW  0E
06282:  MOVWF  FF6
06284:  MOVLW  1A
06286:  MOVWF  FF7
06288:  MOVLW  00
0628A:  MOVWF  FF8
0628C:  MOVLW  0C
0628E:  MOVLB  9
06290:  MOVWF  xC2
06292:  MOVLB  0
06294:  CALL   2064
06298:  MOVFF  1B1,9E8
0629C:  MOVLW  37
0629E:  MOVLB  9
062A0:  MOVWF  xE9
062A2:  MOVLB  0
062A4:  CALL   2294
062A8:  MOVLW  0D
062AA:  BTFSS  FA6.6
062AC:  GOTO   62AA
062B0:  MOVLB  E
062B2:  MOVWF  xF9
062B4:  MOVLW  0A
062B6:  MOVLB  0
062B8:  BTFSS  FA6.6
062BA:  GOTO   62B8
062BE:  MOVLB  E
062C0:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
062C2:  MOVLW  22
062C4:  MOVWF  FF6
062C6:  MOVLW  1A
062C8:  MOVWF  FF7
062CA:  MOVLW  00
062CC:  MOVWF  FF8
062CE:  MOVLW  0E
062D0:  MOVLB  9
062D2:  MOVWF  xC2
062D4:  MOVLB  0
062D6:  CALL   2064
062DA:  MOVFF  1B5,9E8
062DE:  MOVLW  37
062E0:  MOVLB  9
062E2:  MOVWF  xE9
062E4:  MOVLB  0
062E6:  CALL   2294
062EA:  MOVFF  1B4,9E8
062EE:  MOVLW  37
062F0:  MOVLB  9
062F2:  MOVWF  xE9
062F4:  MOVLB  0
062F6:  CALL   2294
062FA:  MOVFF  1B3,9E8
062FE:  MOVLW  37
06300:  MOVLB  9
06302:  MOVWF  xE9
06304:  MOVLB  0
06306:  CALL   2294
0630A:  MOVFF  1B2,9E8
0630E:  MOVLW  37
06310:  MOVLB  9
06312:  MOVWF  xE9
06314:  MOVLB  0
06316:  CALL   2294
0631A:  MOVLW  0D
0631C:  BTFSS  FA6.6
0631E:  GOTO   631C
06322:  MOVLB  E
06324:  MOVWF  xF9
06326:  MOVLW  0A
06328:  MOVLB  0
0632A:  BTFSS  FA6.6
0632C:  GOTO   632A
06330:  MOVLB  E
06332:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
06334:  MOVLW  38
06336:  MOVWF  FF6
06338:  MOVLW  1A
0633A:  MOVWF  FF7
0633C:  MOVLW  00
0633E:  MOVWF  FF8
06340:  MOVLW  0E
06342:  MOVLB  9
06344:  MOVWF  xC2
06346:  MOVLB  0
06348:  CALL   2064
0634C:  MOVFF  1B7,9E8
06350:  MOVLW  37
06352:  MOVLB  9
06354:  MOVWF  xE9
06356:  MOVLB  0
06358:  CALL   2294
0635C:  MOVFF  1B6,9E8
06360:  MOVLW  37
06362:  MOVLB  9
06364:  MOVWF  xE9
06366:  MOVLB  0
06368:  CALL   2294
0636C:  MOVLW  0D
0636E:  BTFSS  FA6.6
06370:  GOTO   636E
06374:  MOVLB  E
06376:  MOVWF  xF9
06378:  MOVLW  0A
0637A:  MOVLB  0
0637C:  BTFSS  FA6.6
0637E:  GOTO   637C
06382:  MOVLB  E
06384:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
06386:  MOVFF  1B1,206
0638A:  MOVLB  2
0638C:  CLRF   x07
0638E:  MOVLB  0
06390:  CALL   4E3E
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06394:  MOVLW  4E
06396:  MOVWF  FF6
06398:  MOVLW  1A
0639A:  MOVWF  FF7
0639C:  MOVLW  00
0639E:  MOVWF  FF8
063A0:  CALL   202E
....................    for (p = 0; p < flash_write_param.packetnum; p++)
063A4:  MOVLB  1
063A6:  CLRF   xF9
063A8:  CLRF   xF8
063AA:  MOVLB  0
063AC:  MOVLB  1
063AE:  MOVF   xF9,W
063B0:  SUBWF  xB7,W
063B2:  BTFSC  FD8.0
063B4:  BRA    63BC
063B6:  MOVLB  0
063B8:  GOTO   6736
063BC:  MOVLB  0
063BE:  BTFSS  FD8.2
063C0:  GOTO   63D6
063C4:  MOVLB  1
063C6:  MOVF   xB6,W
063C8:  SUBWF  xF8,W
063CA:  BTFSS  FD8.0
063CC:  BRA    63D4
063CE:  MOVLB  0
063D0:  GOTO   6736
063D4:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
063D6:  MOVLB  1
063D8:  RLCF   xF8,W
063DA:  MOVWF  xFA
063DC:  RLCF   xF9,W
063DE:  MOVWF  xFB
063E0:  RLCF   xFA,F
063E2:  RLCF   xFB,F
063E4:  RLCF   xFA,F
063E6:  RLCF   xFB,F
063E8:  RLCF   xFA,F
063EA:  RLCF   xFB,F
063EC:  RLCF   xFA,F
063EE:  RLCF   xFB,F
063F0:  RLCF   xFA,F
063F2:  RLCF   xFB,F
063F4:  MOVLW  C0
063F6:  ANDWF  xFA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
063F8:  CLRF   xFC
063FA:  MOVLB  0
063FC:  MOVLB  1
063FE:  MOVF   xFC,W
06400:  SUBLW  3F
06402:  BTFSC  FD8.0
06404:  BRA    640C
06406:  MOVLB  0
06408:  GOTO   6476
0640C:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
0640E:  CLRF   03
06410:  MOVLB  1
06412:  MOVF   xFC,W
06414:  ADDLW  B8
06416:  MOVWF  FE9
06418:  MOVLW  01
0641A:  ADDWFC 03,W
0641C:  MOVWF  FEA
0641E:  MOVF   xFC,W
06420:  ADDWF  xFA,W
06422:  MOVLB  2
06424:  MOVWF  x07
06426:  MOVLW  00
06428:  MOVLB  1
0642A:  ADDWFC xFB,W
0642C:  MOVLB  2
0642E:  MOVWF  x08
06430:  MOVF   x07,W
06432:  MOVWF  00
06434:  CLRF   03
06436:  MOVF   00,W
06438:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
0643A:  CLRF   03
0643C:  MOVLB  1
0643E:  MOVF   xFC,W
06440:  ADDLW  B8
06442:  MOVWF  FE9
06444:  MOVLW  01
06446:  ADDWFC 03,W
06448:  MOVWF  FEA
0644A:  MOVFF  FEF,205
0644E:  MOVFF  205,9E8
06452:  MOVLW  37
06454:  MOVLB  9
06456:  MOVWF  xE9
06458:  MOVLB  0
0645A:  CALL   2294
0645E:  MOVLW  20
06460:  BTFSS  FA6.6
06462:  GOTO   6460
06466:  MOVLB  E
06468:  MOVWF  xF9
0646A:  MOVLB  0
0646C:  MOVLB  1
0646E:  INCF   xFC,F
06470:  MOVLB  0
06472:  GOTO   63FC
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06476:  MOVLB  1
06478:  RLCF   xF8,W
0647A:  MOVWF  02
0647C:  RLCF   xF9,W
0647E:  MOVWF  03
06480:  RLCF   02,F
06482:  RLCF   03,F
06484:  RLCF   02,F
06486:  RLCF   03,F
06488:  RLCF   02,F
0648A:  RLCF   03,F
0648C:  RLCF   02,F
0648E:  RLCF   03,F
06490:  RLCF   02,F
06492:  RLCF   03,F
06494:  MOVLW  C0
06496:  ANDWF  02,F
06498:  MOVF   02,W
0649A:  ADDWF  xB2,W
0649C:  MOVWF  xFD
0649E:  MOVF   03,W
064A0:  ADDWFC xB3,W
064A2:  MOVWF  xFE
064A4:  MOVLW  00
064A6:  ADDWFC xB4,W
064A8:  MOVWF  xFF
064AA:  MOVLW  00
064AC:  ADDWFC xB5,W
064AE:  MOVLB  2
064B0:  MOVWF  x00
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
064B2:  MOVF   x00,F
064B4:  BTFSC  FD8.2
064B6:  BRA    64BE
064B8:  MOVLB  0
064BA:  GOTO   64EC
064BE:  MOVLB  0
064C0:  MOVLB  1
064C2:  MOVF   xFF,W
064C4:  SUBLW  BB
064C6:  BTFSS  FD8.0
064C8:  BRA    64D0
064CA:  MOVLB  0
064CC:  GOTO   65C2
064D0:  MOVLB  0
064D2:  XORLW  FF
064D4:  BTFSS  FD8.2
064D6:  GOTO   64EC
064DA:  MOVLB  1
064DC:  MOVF   xFE,W
064DE:  SUBLW  0F
064E0:  BTFSS  FD8.0
064E2:  BRA    64EA
064E4:  MOVLB  0
064E6:  GOTO   65C2
064EA:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
064EC:  MOVLW  5C
064EE:  MOVWF  FF6
064F0:  MOVLW  1A
064F2:  MOVWF  FF7
064F4:  MOVLW  00
064F6:  MOVWF  FF8
064F8:  MOVLW  1A
064FA:  MOVLB  9
064FC:  MOVWF  xC2
064FE:  MOVLB  0
06500:  CALL   2064
06504:  MOVFF  200,9E8
06508:  MOVLW  37
0650A:  MOVLB  9
0650C:  MOVWF  xE9
0650E:  MOVLB  0
06510:  CALL   2294
06514:  MOVFF  1FF,9E8
06518:  MOVLW  37
0651A:  MOVLB  9
0651C:  MOVWF  xE9
0651E:  MOVLB  0
06520:  CALL   2294
06524:  MOVFF  1FE,9E8
06528:  MOVLW  37
0652A:  MOVLB  9
0652C:  MOVWF  xE9
0652E:  MOVLB  0
06530:  CALL   2294
06534:  MOVFF  1FD,9E8
06538:  MOVLW  37
0653A:  MOVLB  9
0653C:  MOVWF  xE9
0653E:  MOVLB  0
06540:  CALL   2294
06544:  MOVLW  7B
06546:  MOVWF  FF6
06548:  MOVLW  1A
0654A:  MOVWF  FF7
0654C:  MOVLW  00
0654E:  MOVWF  FF8
06550:  MOVLW  16
06552:  MOVLB  9
06554:  MOVWF  xC2
06556:  MOVLB  0
06558:  CALL   2064
0655C:  MOVLB  9
0655E:  CLRF   xE8
06560:  MOVLW  37
06562:  MOVWF  xE9
06564:  MOVLB  0
06566:  CALL   2294
0656A:  MOVLW  BC
0656C:  MOVLB  9
0656E:  MOVWF  xE8
06570:  MOVLW  37
06572:  MOVWF  xE9
06574:  MOVLB  0
06576:  CALL   2294
0657A:  MOVLW  0F
0657C:  MOVLB  9
0657E:  MOVWF  xE8
06580:  MOVLW  37
06582:  MOVWF  xE9
06584:  MOVLB  0
06586:  CALL   2294
0658A:  MOVLB  9
0658C:  SETF   xE8
0658E:  MOVLW  37
06590:  MOVWF  xE9
06592:  MOVLB  0
06594:  CALL   2294
06598:  MOVLW  96
0659A:  MOVWF  FF6
0659C:  MOVLW  1A
0659E:  MOVWF  FF7
065A0:  MOVLW  00
065A2:  MOVWF  FF8
065A4:  MOVLW  0B
065A6:  MOVLB  9
065A8:  MOVWF  xC2
065AA:  MOVLB  0
065AC:  CALL   2064
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
065B0:  MOVFF  1B1,206
065B4:  MOVLB  2
065B6:  SETF   x07
065B8:  MOVLB  0
065BA:  CALL   4E3E
....................          break;
065BE:  GOTO   6736
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
065C2:  MOVLW  3F
065C4:  MOVLB  1
065C6:  ADDWF  xFD,W
065C8:  MOVLB  2
065CA:  MOVWF  x05
065CC:  MOVLW  00
065CE:  MOVLB  1
065D0:  ADDWFC xFE,W
065D2:  MOVLB  2
065D4:  MOVWF  x06
065D6:  MOVLW  00
065D8:  MOVLB  1
065DA:  ADDWFC xFF,W
065DC:  MOVLB  2
065DE:  MOVWF  x07
065E0:  MOVLW  00
065E2:  ADDWFC x00,W
065E4:  MOVWF  x08
065E6:  MOVF   x08,F
065E8:  BTFSC  FD8.2
065EA:  BRA    65F2
065EC:  MOVLB  0
065EE:  GOTO   6620
065F2:  MOVLB  0
065F4:  MOVLB  2
065F6:  MOVF   x07,W
065F8:  SUBLW  BB
065FA:  BTFSS  FD8.0
065FC:  BRA    6604
065FE:  MOVLB  0
06600:  GOTO   66F2
06604:  MOVLB  0
06606:  XORLW  FF
06608:  BTFSS  FD8.2
0660A:  GOTO   6620
0660E:  MOVLB  2
06610:  MOVF   x06,W
06612:  SUBLW  0F
06614:  BTFSS  FD8.0
06616:  BRA    661E
06618:  MOVLB  0
0661A:  GOTO   66F2
0661E:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
06620:  MOVLW  FF
06622:  BSF    FD8.0
06624:  MOVLB  1
06626:  SUBFWB xFD,W
06628:  MOVLB  2
0662A:  MOVWF  x05
0662C:  MOVLW  0F
0662E:  MOVLB  1
06630:  SUBFWB xFE,W
06632:  MOVLB  2
06634:  MOVWF  x06
06636:  MOVLW  BC
06638:  MOVLB  1
0663A:  SUBFWB xFF,W
0663C:  MOVLB  2
0663E:  MOVWF  x07
06640:  MOVLW  00
06642:  SUBFWB x00,W
06644:  MOVWF  x08
06646:  MOVLW  01
06648:  ADDWF  x05,W
0664A:  MOVWF  x01
0664C:  MOVLW  00
0664E:  ADDWFC x06,W
06650:  MOVWF  x02
06652:  MOVLW  00
06654:  ADDWFC x07,W
06656:  MOVWF  x03
06658:  MOVLW  00
0665A:  ADDWFC x08,W
0665C:  MOVWF  x04
0665E:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
06660:  MOVLW  A2
06662:  MOVWF  FF6
06664:  MOVLW  1A
06666:  MOVWF  FF7
06668:  MOVLW  00
0666A:  MOVWF  FF8
0666C:  MOVLW  25
0666E:  MOVLB  9
06670:  MOVWF  xC2
06672:  MOVLB  0
06674:  CALL   2064
06678:  MOVLW  41
0667A:  MOVWF  FE9
0667C:  MOVFF  204,209
06680:  MOVFF  203,208
06684:  MOVFF  202,207
06688:  MOVFF  201,206
0668C:  CALL   6024
06690:  MOVLW  CA
06692:  MOVWF  FF6
06694:  MOVLW  1A
06696:  MOVWF  FF7
06698:  MOVLW  00
0669A:  MOVWF  FF8
0669C:  MOVLW  1C
0669E:  MOVLB  9
066A0:  MOVWF  xC2
066A2:  MOVLB  0
066A4:  CALL   2064
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
066A8:  MOVFF  115,AED
066AC:  MOVFF  114,AEC
066B0:  MOVFF  113,AEB
066B4:  MOVFF  112,AEA
066B8:  MOVFF  200,AF1
066BC:  MOVFF  1FF,AF0
066C0:  MOVFF  1FE,AEF
066C4:  MOVFF  1FD,AEE
066C8:  MOVLW  01
066CA:  MOVLB  A
066CC:  MOVWF  xF3
066CE:  MOVLW  B8
066D0:  MOVWF  xF2
066D2:  MOVFF  202,AF5
066D6:  MOVFF  201,AF4
066DA:  MOVLB  0
066DC:  CALL   3C88
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
066E0:  MOVFF  1B1,206
066E4:  MOVLB  2
066E6:  SETF   x07
066E8:  MOVLB  0
066EA:  CALL   4E3E
....................          break;
066EE:  GOTO   6736
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
066F2:  MOVFF  115,AED
066F6:  MOVFF  114,AEC
066FA:  MOVFF  113,AEB
066FE:  MOVFF  112,AEA
06702:  MOVFF  200,AF1
06706:  MOVFF  1FF,AF0
0670A:  MOVFF  1FE,AEF
0670E:  MOVFF  1FD,AEE
06712:  MOVLW  01
06714:  MOVLB  A
06716:  MOVWF  xF3
06718:  MOVLW  B8
0671A:  MOVWF  xF2
0671C:  CLRF   xF5
0671E:  MOVLW  40
06720:  MOVWF  xF4
06722:  MOVLB  0
06724:  CALL   3C88
06728:  MOVLB  1
0672A:  INCF   xF8,F
0672C:  BTFSC  FD8.2
0672E:  INCF   xF9,F
06730:  MOVLB  0
06732:  GOTO   63AC
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06736:  MOVFF  1B1,206
0673A:  MOVLB  2
0673C:  SETF   x07
0673E:  MOVLB  0
06740:  CALL   4E3E
....................    fprintf(PC, "\r\n");
06744:  MOVLW  0D
06746:  BTFSS  FA6.6
06748:  GOTO   6746
0674C:  MOVLB  E
0674E:  MOVWF  xF9
06750:  MOVLW  0A
06752:  MOVLB  0
06754:  BTFSS  FA6.6
06756:  GOTO   6754
0675A:  MOVLB  E
0675C:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
0675E:  MOVLW  E8
06760:  MOVWF  FF6
06762:  MOVLW  1A
06764:  MOVWF  FF7
06766:  MOVLW  00
06768:  MOVWF  FF8
0676A:  MOVLB  0
0676C:  CALL   202E
06770:  GOTO   E526 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
067A4:  MOVLW  00
067A6:  MOVWF  FF6
067A8:  MOVLW  1B
067AA:  MOVWF  FF7
067AC:  MOVLW  00
067AE:  MOVWF  FF8
067B0:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
067B4:  MOVLB  1
067B6:  MOVF   xAF,W
067B8:  MOVWF  FE9
067BA:  MOVF   xB0,W
067BC:  MOVWF  FEA
067BE:  MOVFF  FEF,1B5
067C2:  MOVFF  1B5,206
067C6:  MOVLB  2
067C8:  CLRF   x07
067CA:  MOVLB  0
067CC:  CALL   4E3E
....................    flash_setting(mis_fm);
067D0:  MOVFF  115,2BD
067D4:  MOVFF  114,2BC
067D8:  MOVFF  113,2BB
067DC:  MOVFF  112,2BA
067E0:  CALL   6774
....................    unsigned int32 write_address = 0x00000000;
067E4:  MOVLB  1
067E6:  CLRF   xB4
067E8:  CLRF   xB3
067EA:  CLRF   xB2
067EC:  CLRF   xB1
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
067EE:  MOVF   xAF,W
067F0:  MOVWF  FE9
067F2:  MOVF   xB0,W
067F4:  MOVWF  FEA
067F6:  MOVFF  FEF,1B5
067FA:  MOVFF  1B5,206
067FE:  MOVLB  2
06800:  SETF   x07
06802:  MOVLB  0
06804:  CALL   4E3E
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06808:  MOVLW  26
0680A:  MOVWF  FF6
0680C:  MOVLW  1B
0680E:  MOVWF  FF7
06810:  MOVLW  00
06812:  MOVWF  FF8
06814:  CALL   202E
06818:  GOTO   E536 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
0681C:  MOVLW  4A
0681E:  MOVWF  FF6
06820:  MOVLW  1B
06822:  MOVWF  FF7
06824:  MOVLW  00
06826:  MOVWF  FF8
06828:  CALL   202E
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
0682C:  MOVLB  1
0682E:  CLRF   xB1
06830:  CLRF   xB2
06832:  CLRF   xB3
06834:  CLRF   xB4
06836:  CLRF   xB5
06838:  CLRF   xB6
0683A:  CLRF   xB7
....................    flash_param.id = uplinkcmd_ptr[0];
0683C:  MOVF   xAF,W
0683E:  MOVWF  FE9
06840:  MOVF   xB0,W
06842:  MOVWF  FEA
06844:  MOVFF  FEF,1B1
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06848:  MOVLW  01
0684A:  ADDWF  xAF,W
0684C:  MOVWF  FE9
0684E:  MOVLW  00
06850:  ADDWFC xB0,W
06852:  MOVWF  FEA
06854:  MOVF   FEF,W
06856:  MOVLB  2
06858:  CLRF   x09
0685A:  CLRF   x08
0685C:  CLRF   x07
0685E:  MOVWF  x06
06860:  MOVFF  206,03
06864:  CLRF   00
06866:  CLRF   01
06868:  CLRF   02
0686A:  MOVLW  00
0686C:  BSF    FD8.0
0686E:  SUBFWB 00,W
06870:  MOVWF  x06
06872:  MOVLW  00
06874:  SUBFWB 01,W
06876:  MOVWF  x07
06878:  MOVLW  00
0687A:  SUBFWB 02,W
0687C:  MOVWF  x08
0687E:  MOVLW  00
06880:  SUBFWB 03,W
06882:  MOVWF  x09
06884:  MOVLW  02
06886:  MOVLB  1
06888:  ADDWF  xAF,W
0688A:  MOVWF  FE9
0688C:  MOVLW  00
0688E:  ADDWFC xB0,W
06890:  MOVWF  FEA
06892:  MOVF   FEF,W
06894:  MOVLB  2
06896:  CLRF   x0E
06898:  CLRF   x0D
0689A:  CLRF   x0C
0689C:  MOVWF  x0B
0689E:  MOVFF  20C,03
068A2:  MOVFF  20B,02
068A6:  CLRF   00
068A8:  CLRF   01
068AA:  MOVF   00,W
068AC:  IORWF  x06,F
068AE:  MOVF   01,W
068B0:  IORWF  x07,F
068B2:  MOVF   02,W
068B4:  IORWF  x08,F
068B6:  MOVF   03,W
068B8:  IORWF  x09,F
068BA:  MOVLW  03
068BC:  MOVLB  1
068BE:  ADDWF  xAF,W
068C0:  MOVWF  FE9
068C2:  MOVLW  00
068C4:  ADDWFC xB0,W
068C6:  MOVWF  FEA
068C8:  MOVF   FEF,W
068CA:  MOVLB  2
068CC:  CLRF   x0E
068CE:  CLRF   x0D
068D0:  CLRF   x0C
068D2:  MOVWF  x0B
068D4:  MOVFF  20D,03
068D8:  MOVFF  20C,02
068DC:  MOVFF  20B,01
068E0:  CLRF   00
068E2:  MOVF   00,W
068E4:  IORWF  x06,F
068E6:  MOVF   01,W
068E8:  IORWF  x07,F
068EA:  MOVF   02,W
068EC:  IORWF  x08,F
068EE:  MOVF   03,W
068F0:  IORWF  x09,F
068F2:  MOVLW  04
068F4:  MOVLB  1
068F6:  ADDWF  xAF,W
068F8:  MOVWF  FE9
068FA:  MOVLW  00
068FC:  ADDWFC xB0,W
068FE:  MOVWF  FEA
06900:  MOVF   FEF,W
06902:  MOVWF  00
06904:  CLRF   01
06906:  CLRF   02
06908:  CLRF   03
0690A:  MOVF   00,W
0690C:  MOVLB  2
0690E:  IORWF  x06,W
06910:  MOVLB  1
06912:  MOVWF  xB4
06914:  MOVF   01,W
06916:  MOVLB  2
06918:  IORWF  x07,W
0691A:  MOVLB  1
0691C:  MOVWF  xB5
0691E:  MOVF   02,W
06920:  MOVLB  2
06922:  IORWF  x08,W
06924:  MOVLB  1
06926:  MOVWF  xB6
06928:  MOVF   03,W
0692A:  MOVLB  2
0692C:  IORWF  x09,W
0692E:  MOVLB  1
06930:  MOVWF  xB7
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
06932:  MOVLW  06
06934:  ADDWF  xAF,W
06936:  MOVWF  FE9
06938:  MOVLW  00
0693A:  ADDWFC xB0,W
0693C:  MOVWF  FEA
0693E:  MOVF   FEF,W
06940:  MOVLB  2
06942:  CLRF   x07
06944:  MOVWF  x06
06946:  MOVFF  206,207
0694A:  CLRF   x06
0694C:  MOVLW  07
0694E:  MOVLB  1
06950:  ADDWF  xAF,W
06952:  MOVWF  FE9
06954:  MOVLW  00
06956:  ADDWFC xB0,W
06958:  MOVWF  FEA
0695A:  MOVF   FEF,W
0695C:  CLRF   03
0695E:  MOVLB  2
06960:  IORWF  x06,W
06962:  MOVLB  1
06964:  MOVWF  xB2
06966:  MOVF   03,W
06968:  MOVLB  2
0696A:  IORWF  x07,W
0696C:  MOVLB  1
0696E:  MOVWF  xB3
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06970:  MOVFF  1B1,206
06974:  MOVLB  2
06976:  CLRF   x07
06978:  MOVLB  0
0697A:  CALL   4E3E
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
0697E:  MOVLW  5E
06980:  MOVWF  FF6
06982:  MOVLW  1B
06984:  MOVWF  FF7
06986:  MOVLW  00
06988:  MOVWF  FF8
0698A:  MOVLW  0C
0698C:  MOVLB  9
0698E:  MOVWF  xC2
06990:  MOVLB  0
06992:  CALL   2064
06996:  MOVFF  1B1,9E8
0699A:  MOVLW  37
0699C:  MOVLB  9
0699E:  MOVWF  xE9
069A0:  MOVLB  0
069A2:  CALL   2294
069A6:  MOVLW  0D
069A8:  BTFSS  FA6.6
069AA:  GOTO   69A8
069AE:  MOVLB  E
069B0:  MOVWF  xF9
069B2:  MOVLW  0A
069B4:  MOVLB  0
069B6:  BTFSS  FA6.6
069B8:  GOTO   69B6
069BC:  MOVLB  E
069BE:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
069C0:  MOVLW  72
069C2:  MOVWF  FF6
069C4:  MOVLW  1B
069C6:  MOVWF  FF7
069C8:  MOVLW  00
069CA:  MOVWF  FF8
069CC:  MOVLW  0E
069CE:  MOVLB  9
069D0:  MOVWF  xC2
069D2:  MOVLB  0
069D4:  CALL   2064
069D8:  MOVFF  1B7,9E8
069DC:  MOVLW  37
069DE:  MOVLB  9
069E0:  MOVWF  xE9
069E2:  MOVLB  0
069E4:  CALL   2294
069E8:  MOVFF  1B6,9E8
069EC:  MOVLW  37
069EE:  MOVLB  9
069F0:  MOVWF  xE9
069F2:  MOVLB  0
069F4:  CALL   2294
069F8:  MOVFF  1B5,9E8
069FC:  MOVLW  37
069FE:  MOVLB  9
06A00:  MOVWF  xE9
06A02:  MOVLB  0
06A04:  CALL   2294
06A08:  MOVFF  1B4,9E8
06A0C:  MOVLW  37
06A0E:  MOVLB  9
06A10:  MOVWF  xE9
06A12:  MOVLB  0
06A14:  CALL   2294
06A18:  MOVLW  0D
06A1A:  BTFSS  FA6.6
06A1C:  GOTO   6A1A
06A20:  MOVLB  E
06A22:  MOVWF  xF9
06A24:  MOVLW  0A
06A26:  MOVLB  0
06A28:  BTFSS  FA6.6
06A2A:  GOTO   6A28
06A2E:  MOVLB  E
06A30:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06A32:  MOVLW  88
06A34:  MOVWF  FF6
06A36:  MOVLW  1B
06A38:  MOVWF  FF7
06A3A:  MOVLW  00
06A3C:  MOVWF  FF8
06A3E:  MOVLW  0E
06A40:  MOVLB  9
06A42:  MOVWF  xC2
06A44:  MOVLB  0
06A46:  CALL   2064
06A4A:  MOVFF  1B3,9E8
06A4E:  MOVLW  37
06A50:  MOVLB  9
06A52:  MOVWF  xE9
06A54:  MOVLB  0
06A56:  CALL   2294
06A5A:  MOVFF  1B2,9E8
06A5E:  MOVLW  37
06A60:  MOVLB  9
06A62:  MOVWF  xE9
06A64:  MOVLB  0
06A66:  CALL   2294
06A6A:  MOVLW  0D
06A6C:  BTFSS  FA6.6
06A6E:  GOTO   6A6C
06A72:  MOVLB  E
06A74:  MOVWF  xF9
06A76:  MOVLW  0A
06A78:  MOVLB  0
06A7A:  BTFSS  FA6.6
06A7C:  GOTO   6A7A
06A80:  MOVLB  E
06A82:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06A84:  MOVFF  1B1,206
06A88:  MOVLB  2
06A8A:  CLRF   x07
06A8C:  MOVLB  0
06A8E:  CALL   4E3E
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06A92:  MOVLB  1
06A94:  CLRF   xB8
06A96:  CLRF   xB9
06A98:  CLRF   xBA
06A9A:  CLRF   xBB
06A9C:  CLRF   xBC
06A9E:  CLRF   xBD
06AA0:  CLRF   xBE
06AA2:  CLRF   xBF
06AA4:  CLRF   xC0
06AA6:  CLRF   xC1
06AA8:  CLRF   xC2
06AAA:  CLRF   xC3
06AAC:  CLRF   xC4
06AAE:  CLRF   xC5
06AB0:  CLRF   xC6
06AB2:  CLRF   xC7
06AB4:  CLRF   xC8
06AB6:  CLRF   xC9
06AB8:  CLRF   xCA
06ABA:  CLRF   xCB
06ABC:  CLRF   xCC
06ABE:  CLRF   xCD
06AC0:  CLRF   xCE
06AC2:  CLRF   xCF
06AC4:  CLRF   xD0
06AC6:  CLRF   xD1
06AC8:  CLRF   xD2
06ACA:  CLRF   xD3
06ACC:  CLRF   xD4
06ACE:  CLRF   xD5
06AD0:  CLRF   xD6
06AD2:  CLRF   xD7
06AD4:  CLRF   xD8
06AD6:  CLRF   xD9
06AD8:  CLRF   xDA
06ADA:  CLRF   xDB
06ADC:  CLRF   xDC
06ADE:  CLRF   xDD
06AE0:  CLRF   xDE
06AE2:  CLRF   xDF
06AE4:  CLRF   xE0
06AE6:  CLRF   xE1
06AE8:  CLRF   xE2
06AEA:  CLRF   xE3
06AEC:  CLRF   xE4
06AEE:  CLRF   xE5
06AF0:  CLRF   xE6
06AF2:  CLRF   xE7
06AF4:  CLRF   xE8
06AF6:  CLRF   xE9
06AF8:  CLRF   xEA
06AFA:  CLRF   xEB
06AFC:  CLRF   xEC
06AFE:  CLRF   xED
06B00:  CLRF   xEE
06B02:  CLRF   xEF
06B04:  CLRF   xF0
06B06:  CLRF   xF1
06B08:  CLRF   xF2
06B0A:  CLRF   xF3
06B0C:  CLRF   xF4
06B0E:  CLRF   xF5
06B10:  CLRF   xF6
06B12:  CLRF   xF7
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06B14:  MOVLW  9E
06B16:  MOVWF  FF6
06B18:  MOVLW  1B
06B1A:  MOVWF  FF7
06B1C:  MOVLW  00
06B1E:  MOVWF  FF8
06B20:  MOVLB  0
06B22:  CALL   202E
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06B26:  MOVFF  115,23A
06B2A:  MOVFF  114,239
06B2E:  MOVFF  113,238
06B32:  MOVFF  112,237
06B36:  CALL   2B54
06B3A:  MOVF   01,F
06B3C:  BTFSS  FD8.2
06B3E:  GOTO   6B64
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06B42:  MOVLW  AC
06B44:  MOVWF  FF6
06B46:  MOVLW  1B
06B48:  MOVWF  FF7
06B4A:  MOVLW  00
06B4C:  MOVWF  FF8
06B4E:  CALL   202E
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06B52:  MOVFF  1B1,206
06B56:  MOVLB  2
06B58:  SETF   x07
06B5A:  MOVLB  0
06B5C:  CALL   4E3E
....................       return; // FIX: 接続失敗時終了
06B60:  GOTO   701C
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06B64:  MOVLB  1
06B66:  CLRF   xFF
06B68:  CLRF   xFE
06B6A:  CLRF   xFD
06B6C:  CLRF   xFC
06B6E:  MOVLB  0
06B70:  MOVLB  1
06B72:  MOVF   xFF,F
06B74:  BTFSC  FD8.2
06B76:  BRA    6B7E
06B78:  MOVLB  0
06B7A:  GOTO   6FFE
06B7E:  MOVLB  0
06B80:  MOVLB  1
06B82:  MOVF   xFE,F
06B84:  BTFSC  FD8.2
06B86:  BRA    6B8E
06B88:  MOVLB  0
06B8A:  GOTO   6FFE
06B8E:  MOVLB  0
06B90:  MOVLB  1
06B92:  MOVF   xFD,W
06B94:  SUBWF  xB3,W
06B96:  BTFSC  FD8.0
06B98:  BRA    6BA0
06B9A:  MOVLB  0
06B9C:  GOTO   6FFE
06BA0:  MOVLB  0
06BA2:  BTFSS  FD8.2
06BA4:  GOTO   6BBA
06BA8:  MOVLB  1
06BAA:  MOVF   xB2,W
06BAC:  SUBWF  xFC,W
06BAE:  BTFSS  FD8.0
06BB0:  BRA    6BB8
06BB2:  MOVLB  0
06BB4:  GOTO   6FFE
06BB8:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06BBA:  MOVLB  1
06BBC:  RLCF   xFC,W
06BBE:  MOVWF  00
06BC0:  RLCF   xFD,W
06BC2:  MOVWF  01
06BC4:  RLCF   xFE,W
06BC6:  MOVWF  02
06BC8:  RLCF   xFF,W
06BCA:  MOVWF  03
06BCC:  RLCF   00,F
06BCE:  RLCF   01,F
06BD0:  RLCF   02,F
06BD2:  RLCF   03,F
06BD4:  RLCF   00,F
06BD6:  RLCF   01,F
06BD8:  RLCF   02,F
06BDA:  RLCF   03,F
06BDC:  RLCF   00,F
06BDE:  RLCF   01,F
06BE0:  RLCF   02,F
06BE2:  RLCF   03,F
06BE4:  RLCF   00,F
06BE6:  RLCF   01,F
06BE8:  RLCF   02,F
06BEA:  RLCF   03,F
06BEC:  RLCF   00,F
06BEE:  RLCF   01,F
06BF0:  RLCF   02,F
06BF2:  RLCF   03,F
06BF4:  MOVLW  C0
06BF6:  ANDWF  00,F
06BF8:  MOVF   00,W
06BFA:  ADDWF  xB4,W
06BFC:  MOVWF  xF8
06BFE:  MOVF   01,W
06C00:  ADDWFC xB5,W
06C02:  MOVWF  xF9
06C04:  MOVF   02,W
06C06:  ADDWFC xB6,W
06C08:  MOVWF  xFA
06C0A:  MOVF   03,W
06C0C:  ADDWFC xB7,W
06C0E:  MOVWF  xFB
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06C10:  MOVF   xFB,F
06C12:  BTFSC  FD8.2
06C14:  BRA    6C1C
06C16:  MOVLB  0
06C18:  GOTO   6C4A
06C1C:  MOVLB  0
06C1E:  MOVLB  1
06C20:  MOVF   xFA,W
06C22:  SUBLW  BB
06C24:  BTFSS  FD8.0
06C26:  BRA    6C2E
06C28:  MOVLB  0
06C2A:  GOTO   6D12
06C2E:  MOVLB  0
06C30:  XORLW  FF
06C32:  BTFSS  FD8.2
06C34:  GOTO   6C4A
06C38:  MOVLB  1
06C3A:  MOVF   xF9,W
06C3C:  SUBLW  0F
06C3E:  BTFSS  FD8.0
06C40:  BRA    6C48
06C42:  MOVLB  0
06C44:  GOTO   6D12
06C48:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06C4A:  MOVLW  CE
06C4C:  MOVWF  FF6
06C4E:  MOVLW  1B
06C50:  MOVWF  FF7
06C52:  MOVLW  00
06C54:  MOVWF  FF8
06C56:  MOVLW  17
06C58:  MOVLB  9
06C5A:  MOVWF  xC2
06C5C:  MOVLB  0
06C5E:  CALL   2064
06C62:  MOVFF  1FB,9E8
06C66:  MOVLW  37
06C68:  MOVLB  9
06C6A:  MOVWF  xE9
06C6C:  MOVLB  0
06C6E:  CALL   2294
06C72:  MOVFF  1FA,9E8
06C76:  MOVLW  37
06C78:  MOVLB  9
06C7A:  MOVWF  xE9
06C7C:  MOVLB  0
06C7E:  CALL   2294
06C82:  MOVFF  1F9,9E8
06C86:  MOVLW  37
06C88:  MOVLB  9
06C8A:  MOVWF  xE9
06C8C:  MOVLB  0
06C8E:  CALL   2294
06C92:  MOVFF  1F8,9E8
06C96:  MOVLW  37
06C98:  MOVLB  9
06C9A:  MOVWF  xE9
06C9C:  MOVLB  0
06C9E:  CALL   2294
06CA2:  MOVLW  EA
06CA4:  MOVWF  FF6
06CA6:  MOVLW  1B
06CA8:  MOVWF  FF7
06CAA:  MOVLW  00
06CAC:  MOVWF  FF8
06CAE:  MOVLW  16
06CB0:  MOVLB  9
06CB2:  MOVWF  xC2
06CB4:  MOVLB  0
06CB6:  CALL   2064
06CBA:  MOVLB  9
06CBC:  CLRF   xE8
06CBE:  MOVLW  37
06CC0:  MOVWF  xE9
06CC2:  MOVLB  0
06CC4:  CALL   2294
06CC8:  MOVLW  BC
06CCA:  MOVLB  9
06CCC:  MOVWF  xE8
06CCE:  MOVLW  37
06CD0:  MOVWF  xE9
06CD2:  MOVLB  0
06CD4:  CALL   2294
06CD8:  MOVLW  0F
06CDA:  MOVLB  9
06CDC:  MOVWF  xE8
06CDE:  MOVLW  37
06CE0:  MOVWF  xE9
06CE2:  MOVLB  0
06CE4:  CALL   2294
06CE8:  MOVLB  9
06CEA:  SETF   xE8
06CEC:  MOVLW  37
06CEE:  MOVWF  xE9
06CF0:  MOVLB  0
06CF2:  CALL   2294
06CF6:  MOVLW  05
06CF8:  MOVWF  FF6
06CFA:  MOVLW  1C
06CFC:  MOVWF  FF7
06CFE:  MOVLW  00
06D00:  MOVWF  FF8
06D02:  MOVLW  0A
06D04:  MOVLB  9
06D06:  MOVWF  xC2
06D08:  MOVLB  0
06D0A:  CALL   2064
....................          break;
06D0E:  GOTO   6FFE
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06D12:  MOVLW  3F
06D14:  MOVLB  1
06D16:  ADDWF  xF8,W
06D18:  MOVLB  2
06D1A:  MOVWF  x06
06D1C:  MOVLW  00
06D1E:  MOVLB  1
06D20:  ADDWFC xF9,W
06D22:  MOVLB  2
06D24:  MOVWF  x07
06D26:  MOVLW  00
06D28:  MOVLB  1
06D2A:  ADDWFC xFA,W
06D2C:  MOVLB  2
06D2E:  MOVWF  x08
06D30:  MOVLW  00
06D32:  MOVLB  1
06D34:  ADDWFC xFB,W
06D36:  MOVLB  2
06D38:  MOVWF  x09
06D3A:  MOVF   x09,F
06D3C:  BTFSC  FD8.2
06D3E:  BRA    6D46
06D40:  MOVLB  0
06D42:  GOTO   6D74
06D46:  MOVLB  0
06D48:  MOVLB  2
06D4A:  MOVF   x08,W
06D4C:  SUBLW  BB
06D4E:  BTFSS  FD8.0
06D50:  BRA    6D58
06D52:  MOVLB  0
06D54:  GOTO   6EE4
06D58:  MOVLB  0
06D5A:  XORLW  FF
06D5C:  BTFSS  FD8.2
06D5E:  GOTO   6D74
06D62:  MOVLB  2
06D64:  MOVF   x07,W
06D66:  SUBLW  0F
06D68:  BTFSS  FD8.0
06D6A:  BRA    6D72
06D6C:  MOVLB  0
06D6E:  GOTO   6EE4
06D72:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06D74:  MOVLW  FF
06D76:  BSF    FD8.0
06D78:  MOVLB  1
06D7A:  SUBFWB xF8,W
06D7C:  MOVLB  2
06D7E:  MOVWF  x06
06D80:  MOVLW  0F
06D82:  MOVLB  1
06D84:  SUBFWB xF9,W
06D86:  MOVLB  2
06D88:  MOVWF  x07
06D8A:  MOVLW  BC
06D8C:  MOVLB  1
06D8E:  SUBFWB xFA,W
06D90:  MOVLB  2
06D92:  MOVWF  x08
06D94:  MOVLW  00
06D96:  MOVLB  1
06D98:  SUBFWB xFB,W
06D9A:  MOVLB  2
06D9C:  MOVWF  x09
06D9E:  MOVLW  01
06DA0:  ADDWF  x06,W
06DA2:  MOVWF  x00
06DA4:  MOVLW  00
06DA6:  ADDWFC x07,W
06DA8:  MOVWF  x01
06DAA:  MOVLW  00
06DAC:  ADDWFC x08,W
06DAE:  MOVWF  x02
06DB0:  MOVLW  00
06DB2:  ADDWFC x09,W
06DB4:  MOVWF  x03
06DB6:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06DB8:  MOVLW  10
06DBA:  MOVWF  FF6
06DBC:  MOVLW  1C
06DBE:  MOVWF  FF7
06DC0:  MOVLW  00
06DC2:  MOVWF  FF8
06DC4:  MOVLW  22
06DC6:  MOVLB  9
06DC8:  MOVWF  xC2
06DCA:  MOVLB  0
06DCC:  CALL   2064
06DD0:  MOVLW  41
06DD2:  MOVWF  FE9
06DD4:  MOVFF  203,209
06DD8:  MOVFF  202,208
06DDC:  MOVFF  201,207
06DE0:  MOVFF  200,206
06DE4:  CALL   6024
06DE8:  MOVLW  35
06DEA:  MOVWF  FF6
06DEC:  MOVLW  1C
06DEE:  MOVWF  FF7
06DF0:  MOVLW  00
06DF2:  MOVWF  FF8
06DF4:  MOVLW  09
06DF6:  MOVLB  9
06DF8:  MOVWF  xC2
06DFA:  MOVLB  0
06DFC:  CALL   2064
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
06E00:  MOVFF  115,AED
06E04:  MOVFF  114,AEC
06E08:  MOVFF  113,AEB
06E0C:  MOVFF  112,AEA
06E10:  MOVFF  1FB,AF1
06E14:  MOVFF  1FA,AF0
06E18:  MOVFF  1F9,AEF
06E1C:  MOVFF  1F8,AEE
06E20:  MOVLW  01
06E22:  MOVLB  A
06E24:  MOVWF  xF3
06E26:  MOVLW  B8
06E28:  MOVWF  xF2
06E2A:  MOVFF  203,AF7
06E2E:  MOVFF  202,AF6
06E32:  MOVFF  201,AF5
06E36:  MOVFF  200,AF4
06E3A:  MOVLB  0
06E3C:  CALL   2C1C
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
06E40:  MOVLB  2
06E42:  CLRF   x04
06E44:  MOVLB  0
06E46:  MOVLB  2
06E48:  MOVF   x03,F
06E4A:  BTFSC  FD8.2
06E4C:  BRA    6E54
06E4E:  MOVLB  0
06E50:  GOTO   6E88
06E54:  MOVLB  0
06E56:  MOVLB  2
06E58:  MOVF   x02,F
06E5A:  BTFSC  FD8.2
06E5C:  BRA    6E64
06E5E:  MOVLB  0
06E60:  GOTO   6E88
06E64:  MOVLB  0
06E66:  MOVLB  2
06E68:  MOVF   x01,F
06E6A:  BTFSC  FD8.2
06E6C:  BRA    6E74
06E6E:  MOVLB  0
06E70:  GOTO   6E88
06E74:  MOVLB  0
06E76:  MOVLB  2
06E78:  MOVF   x00,W
06E7A:  SUBWF  x04,W
06E7C:  BTFSS  FD8.0
06E7E:  BRA    6E86
06E80:  MOVLB  0
06E82:  GOTO   6EC4
06E86:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06E88:  CLRF   03
06E8A:  MOVLB  2
06E8C:  MOVF   x04,W
06E8E:  ADDLW  B8
06E90:  MOVWF  FE9
06E92:  MOVLW  01
06E94:  ADDWFC 03,W
06E96:  MOVWF  FEA
06E98:  MOVFF  FEF,206
06E9C:  MOVFF  206,9E8
06EA0:  MOVLW  37
06EA2:  MOVLB  9
06EA4:  MOVWF  xE9
06EA6:  MOVLB  0
06EA8:  CALL   2294
06EAC:  MOVLW  20
06EAE:  BTFSS  FA6.6
06EB0:  GOTO   6EAE
06EB4:  MOVLB  E
06EB6:  MOVWF  xF9
06EB8:  MOVLB  0
06EBA:  MOVLB  2
06EBC:  INCF   x04,F
06EBE:  MOVLB  0
06EC0:  GOTO   6E46
....................          fprintf(PC, "\r\n");
06EC4:  MOVLW  0D
06EC6:  BTFSS  FA6.6
06EC8:  GOTO   6EC6
06ECC:  MOVLB  E
06ECE:  MOVWF  xF9
06ED0:  MOVLW  0A
06ED2:  MOVLB  0
06ED4:  BTFSS  FA6.6
06ED6:  GOTO   6ED4
06EDA:  MOVLB  E
06EDC:  MOVWF  xF9
....................          break;
06EDE:  MOVLB  0
06EE0:  GOTO   6FFE
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06EE4:  MOVFF  115,AED
06EE8:  MOVFF  114,AEC
06EEC:  MOVFF  113,AEB
06EF0:  MOVFF  112,AEA
06EF4:  MOVFF  1FB,AF1
06EF8:  MOVFF  1FA,AF0
06EFC:  MOVFF  1F9,AEF
06F00:  MOVFF  1F8,AEE
06F04:  MOVLW  01
06F06:  MOVLB  A
06F08:  MOVWF  xF3
06F0A:  MOVLW  B8
06F0C:  MOVWF  xF2
06F0E:  CLRF   xF7
06F10:  CLRF   xF6
06F12:  CLRF   xF5
06F14:  MOVLW  40
06F16:  MOVWF  xF4
06F18:  MOVLB  0
06F1A:  CALL   2C1C
....................       fprintf(PC, "%08LX : ",read_address);
06F1E:  MOVFF  1FB,9E8
06F22:  MOVLW  37
06F24:  MOVLB  9
06F26:  MOVWF  xE9
06F28:  MOVLB  0
06F2A:  CALL   2294
06F2E:  MOVFF  1FA,9E8
06F32:  MOVLW  37
06F34:  MOVLB  9
06F36:  MOVWF  xE9
06F38:  MOVLB  0
06F3A:  CALL   2294
06F3E:  MOVFF  1F9,9E8
06F42:  MOVLW  37
06F44:  MOVLB  9
06F46:  MOVWF  xE9
06F48:  MOVLB  0
06F4A:  CALL   2294
06F4E:  MOVFF  1F8,9E8
06F52:  MOVLW  37
06F54:  MOVLB  9
06F56:  MOVWF  xE9
06F58:  MOVLB  0
06F5A:  CALL   2294
06F5E:  MOVLW  45
06F60:  MOVWF  FF6
06F62:  MOVLW  1C
06F64:  MOVWF  FF7
06F66:  MOVLW  00
06F68:  MOVWF  FF8
06F6A:  MOVLW  03
06F6C:  MOVLB  9
06F6E:  MOVWF  xC2
06F70:  MOVLB  0
06F72:  CALL   2064
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06F76:  MOVLB  2
06F78:  CLRF   x05
06F7A:  MOVLB  0
06F7C:  MOVLB  2
06F7E:  MOVF   x05,W
06F80:  SUBLW  3F
06F82:  BTFSC  FD8.0
06F84:  BRA    6F8C
06F86:  MOVLB  0
06F88:  GOTO   6FCA
06F8C:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06F8E:  CLRF   03
06F90:  MOVLB  2
06F92:  MOVF   x05,W
06F94:  ADDLW  B8
06F96:  MOVWF  FE9
06F98:  MOVLW  01
06F9A:  ADDWFC 03,W
06F9C:  MOVWF  FEA
06F9E:  MOVFF  FEF,206
06FA2:  MOVFF  206,9E8
06FA6:  MOVLW  37
06FA8:  MOVLB  9
06FAA:  MOVWF  xE9
06FAC:  MOVLB  0
06FAE:  CALL   2294
06FB2:  MOVLW  20
06FB4:  BTFSS  FA6.6
06FB6:  GOTO   6FB4
06FBA:  MOVLB  E
06FBC:  MOVWF  xF9
06FBE:  MOVLB  0
06FC0:  MOVLB  2
06FC2:  INCF   x05,F
06FC4:  MOVLB  0
06FC6:  GOTO   6F7C
....................       }
....................       fprintf(PC,"\r\n");
06FCA:  MOVLW  0D
06FCC:  BTFSS  FA6.6
06FCE:  GOTO   6FCC
06FD2:  MOVLB  E
06FD4:  MOVWF  xF9
06FD6:  MOVLW  0A
06FD8:  MOVLB  0
06FDA:  BTFSS  FA6.6
06FDC:  GOTO   6FDA
06FE0:  MOVLB  E
06FE2:  MOVWF  xF9
06FE4:  MOVLB  0
06FE6:  MOVLW  01
06FE8:  MOVLB  1
06FEA:  ADDWF  xFC,F
06FEC:  BTFSC  FD8.0
06FEE:  INCF   xFD,F
06FF0:  BTFSC  FD8.2
06FF2:  INCF   xFE,F
06FF4:  BTFSC  FD8.2
06FF6:  INCF   xFF,F
06FF8:  MOVLB  0
06FFA:  GOTO   6B70
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06FFE:  MOVFF  1B1,206
07002:  MOVLB  2
07004:  SETF   x07
07006:  MOVLB  0
07008:  CALL   4E3E
....................    fprintf(PC, "End Flash Read\r\n");
0700C:  MOVLW  4A
0700E:  MOVWF  FF6
07010:  MOVLW  1C
07012:  MOVWF  FF7
07014:  MOVLW  00
07016:  MOVWF  FF8
07018:  CALL   202E
0701C:  GOTO   E546 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
07020:  MOVLW  5C
07022:  MOVWF  FF6
07024:  MOVLW  1C
07026:  MOVWF  FF7
07028:  MOVLW  00
0702A:  MOVWF  FF8
0702C:  CALL   202E
....................    flash_setting(mis_fm);
07030:  MOVFF  115,2BD
07034:  MOVFF  114,2BC
07038:  MOVFF  113,2BB
0703C:  MOVFF  112,2BA
07040:  CALL   6774
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
07044:  MOVLB  1
07046:  CLRF   xB4
07048:  CLRF   xB3
0704A:  CLRF   xB2
0704C:  CLRF   xB1
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
0704E:  MOVFF  115,AED
07052:  MOVFF  114,AEC
07056:  MOVFF  113,AEB
0705A:  MOVFF  112,AEA
0705E:  MOVFF  1B4,AF1
07062:  MOVFF  1B3,AF0
07066:  MOVFF  1B2,AEF
0706A:  MOVFF  1B1,AEE
0706E:  MOVLW  01
07070:  MOVLB  A
07072:  MOVWF  xF3
07074:  MOVLW  B5
07076:  MOVWF  xF2
07078:  CLRF   xF7
0707A:  CLRF   xF6
0707C:  CLRF   xF5
0707E:  MOVLW  04
07080:  MOVWF  xF4
07082:  MOVLB  0
07084:  CALL   2C1C
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
07088:  MOVLW  78
0708A:  MOVWF  FF6
0708C:  MOVLW  1C
0708E:  MOVWF  FF7
07090:  MOVLW  00
07092:  MOVWF  FF8
07094:  MOVLW  0B
07096:  MOVLB  9
07098:  MOVWF  xC2
0709A:  MOVLB  0
0709C:  CALL   2064
070A0:  MOVFF  1B5,9E8
070A4:  MOVLW  37
070A6:  MOVLB  9
070A8:  MOVWF  xE9
070AA:  MOVLB  0
070AC:  CALL   2294
070B0:  MOVLW  20
070B2:  BTFSS  FA6.6
070B4:  GOTO   70B2
070B8:  MOVLB  E
070BA:  MOVWF  xF9
070BC:  MOVFF  1B6,9E8
070C0:  MOVLW  37
070C2:  MOVLB  9
070C4:  MOVWF  xE9
070C6:  MOVLB  0
070C8:  CALL   2294
070CC:  MOVLW  20
070CE:  BTFSS  FA6.6
070D0:  GOTO   70CE
070D4:  MOVLB  E
070D6:  MOVWF  xF9
070D8:  MOVFF  1B7,9E8
070DC:  MOVLW  37
070DE:  MOVLB  9
070E0:  MOVWF  xE9
070E2:  MOVLB  0
070E4:  CALL   2294
070E8:  MOVLW  20
070EA:  BTFSS  FA6.6
070EC:  GOTO   70EA
070F0:  MOVLB  E
070F2:  MOVWF  xF9
070F4:  MOVFF  1B8,9E8
070F8:  MOVLW  37
070FA:  MOVLB  9
070FC:  MOVWF  xE9
070FE:  MOVLB  0
07100:  CALL   2294
07104:  MOVLW  0D
07106:  BTFSS  FA6.6
07108:  GOTO   7106
0710C:  MOVLB  E
0710E:  MOVWF  xF9
07110:  MOVLW  0A
07112:  MOVLB  0
07114:  BTFSS  FA6.6
07116:  GOTO   7114
0711A:  MOVLB  E
0711C:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
0711E:  MOVLW  9A
07120:  MOVWF  FF6
07122:  MOVLW  1C
07124:  MOVWF  FF7
07126:  MOVLW  00
07128:  MOVWF  FF8
0712A:  MOVLB  0
0712C:  CALL   202E
07130:  GOTO   E556 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
07328:  MOVLW  B4
0732A:  MOVWF  FF6
0732C:  MOVLW  1C
0732E:  MOVWF  FF7
07330:  MOVLW  00
07332:  MOVWF  FF8
07334:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07338:  MOVLB  1
0733A:  MOVF   xAF,W
0733C:  MOVWF  FE9
0733E:  MOVF   xB0,W
07340:  MOVWF  FEA
07342:  MOVFF  FEF,1B1
07346:  MOVFF  1B1,206
0734A:  MOVLB  2
0734C:  CLRF   x07
0734E:  MOVLB  0
07350:  CALL   4E3E
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07354:  MOVFF  1B0,1B2
07358:  MOVFF  1AF,1B1
0735C:  CALL   59C8
....................    mode_misf_address_reset(parameter); // Reset the address area
07360:  MOVFF  1B0,1B2
07364:  MOVFF  1AF,1B1
07368:  GOTO   7134
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0736C:  MOVLW  D2
0736E:  MOVWF  FF6
07370:  MOVLW  1C
07372:  MOVWF  FF7
07374:  MOVLW  00
07376:  MOVWF  FF8
07378:  CALL   202E
0737C:  GOTO   E566 (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
07380:  MOVLW  EE
07382:  MOVWF  FF6
07384:  MOVLW  1C
07386:  MOVWF  FF7
07388:  MOVLW  00
0738A:  MOVWF  FF8
0738C:  CALL   202E
....................    flash_setting(mis_fm);
07390:  MOVFF  115,2BD
07394:  MOVFF  114,2BC
07398:  MOVFF  113,2BB
0739C:  MOVFF  112,2BA
073A0:  CALL   6774
....................    flash_setting(smf);
073A4:  MOVFF  119,2BD
073A8:  MOVFF  118,2BC
073AC:  MOVFF  117,2BB
073B0:  MOVFF  116,2BA
073B4:  CALL   6774
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
073B8:  MOVLB  1
073BA:  MOVF   xAF,W
073BC:  MOVWF  FE9
073BE:  MOVF   xB0,W
073C0:  MOVWF  FEA
073C2:  MOVFF  FEF,1B1
073C6:  CLRF   xB5
073C8:  CLRF   xB4
073CA:  CLRF   xB3
073CC:  CLRF   xB2
073CE:  CLRF   xB9
073D0:  CLRF   xB8
073D2:  MOVLW  10
073D4:  MOVWF  xB7
073D6:  CLRF   xB6
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
073D8:  MOVFF  115,AED
073DC:  MOVFF  114,AEC
073E0:  MOVFF  113,AEB
073E4:  MOVFF  112,AEA
073E8:  MOVFF  1B5,AF1
073EC:  MOVFF  1B4,AF0
073F0:  MOVFF  1B3,AEF
073F4:  MOVFF  1B2,AEE
073F8:  MOVLW  01
073FA:  MOVLB  A
073FC:  MOVWF  xF3
073FE:  MOVLW  BA
07400:  MOVWF  xF2
07402:  CLRF   xF7
07404:  CLRF   xF6
07406:  MOVLW  01
07408:  MOVWF  xF5
0740A:  CLRF   xF4
0740C:  MOVLB  0
0740E:  CALL   2C1C
....................    write_data_bytes(smf, dest_address, read_data, 256);
07412:  MOVFF  119,AED
07416:  MOVFF  118,AEC
0741A:  MOVFF  117,AEB
0741E:  MOVFF  116,AEA
07422:  MOVFF  1B9,AF1
07426:  MOVFF  1B8,AF0
0742A:  MOVFF  1B7,AEF
0742E:  MOVFF  1B6,AEE
07432:  MOVLW  01
07434:  MOVLB  A
07436:  MOVWF  xF3
07438:  MOVLW  BA
0743A:  MOVWF  xF2
0743C:  MOVLW  01
0743E:  MOVWF  xF5
07440:  CLRF   xF4
07442:  MOVLB  0
07444:  CALL   3C88
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
07448:  MOVLW  06
0744A:  MOVWF  FF6
0744C:  MOVLW  1D
0744E:  MOVWF  FF7
07450:  MOVLW  00
07452:  MOVWF  FF8
07454:  CALL   202E
07458:  GOTO   E576 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
0745C:  MOVLW  1C
0745E:  MOVWF  FF6
07460:  MOVLW  1D
07462:  MOVWF  FF7
07464:  MOVLW  00
07466:  MOVWF  FF8
07468:  CALL   202E
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
0746C:  MOVLW  01
0746E:  MOVLB  1
07470:  ADDWF  xAF,W
07472:  MOVWF  FE9
07474:  MOVLW  00
07476:  ADDWFC xB0,W
07478:  MOVWF  FEA
0747A:  MOVF   FEF,W
0747C:  CLRF   xFB
0747E:  CLRF   xFA
07480:  CLRF   xF9
07482:  MOVWF  xF8
07484:  MOVFF  1F8,1FB
07488:  CLRF   xF8
0748A:  CLRF   xF9
0748C:  CLRF   xFA
0748E:  MOVLW  02
07490:  ADDWF  xAF,W
07492:  MOVWF  FE9
07494:  MOVLW  00
07496:  ADDWFC xB0,W
07498:  MOVWF  FEA
0749A:  MOVF   FEF,W
0749C:  MOVLB  2
0749E:  CLRF   x00
074A0:  MOVLB  1
074A2:  CLRF   xFF
074A4:  CLRF   xFE
074A6:  MOVWF  xFD
074A8:  MOVFF  1FE,03
074AC:  MOVFF  1FD,02
074B0:  CLRF   00
074B2:  CLRF   01
074B4:  MOVF   00,W
074B6:  IORWF  xF8,F
074B8:  MOVF   01,W
074BA:  IORWF  xF9,F
074BC:  MOVF   02,W
074BE:  IORWF  xFA,F
074C0:  MOVF   03,W
074C2:  IORWF  xFB,F
074C4:  MOVLW  03
074C6:  ADDWF  xAF,W
074C8:  MOVWF  FE9
074CA:  MOVLW  00
074CC:  ADDWFC xB0,W
074CE:  MOVWF  FEA
074D0:  MOVF   FEF,W
074D2:  MOVLB  2
074D4:  CLRF   x00
074D6:  MOVLB  1
074D8:  CLRF   xFF
074DA:  CLRF   xFE
074DC:  MOVWF  xFD
074DE:  MOVFF  1FF,03
074E2:  MOVFF  1FE,02
074E6:  MOVFF  1FD,01
074EA:  CLRF   00
074EC:  MOVF   00,W
074EE:  IORWF  xF8,F
074F0:  MOVF   01,W
074F2:  IORWF  xF9,F
074F4:  MOVF   02,W
074F6:  IORWF  xFA,F
074F8:  MOVF   03,W
074FA:  IORWF  xFB,F
074FC:  MOVLW  04
074FE:  ADDWF  xAF,W
07500:  MOVWF  FE9
07502:  MOVLW  00
07504:  ADDWFC xB0,W
07506:  MOVWF  FEA
07508:  MOVF   FEF,W
0750A:  MOVWF  00
0750C:  CLRF   01
0750E:  CLRF   02
07510:  CLRF   03
07512:  MOVF   00,W
07514:  IORWF  xF8,W
07516:  MOVWF  xB1
07518:  MOVF   01,W
0751A:  IORWF  xF9,W
0751C:  MOVWF  xB2
0751E:  MOVF   02,W
07520:  IORWF  xFA,W
07522:  MOVWF  xB3
07524:  MOVF   03,W
07526:  IORWF  xFB,W
07528:  MOVWF  xB4
0752A:  MOVLW  06
0752C:  ADDWF  xAF,W
0752E:  MOVWF  FE9
07530:  MOVLW  00
07532:  ADDWFC xB0,W
07534:  MOVWF  FEA
07536:  MOVF   FEF,W
07538:  CLRF   xF9
0753A:  MOVWF  xF8
0753C:  MOVFF  1F8,1F9
07540:  CLRF   xF8
07542:  MOVLW  07
07544:  ADDWF  xAF,W
07546:  MOVWF  FE9
07548:  MOVLW  00
0754A:  ADDWFC xB0,W
0754C:  MOVWF  FEA
0754E:  MOVF   FEF,W
07550:  CLRF   03
07552:  IORWF  xF8,W
07554:  MOVWF  xB5
07556:  MOVF   03,W
07558:  IORWF  xF9,W
0755A:  MOVWF  xB6
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
0755C:  MOVLW  34
0755E:  MOVWF  FF6
07560:  MOVLW  1D
07562:  MOVWF  FF7
07564:  MOVLW  00
07566:  MOVWF  FF8
07568:  MOVLW  0E
0756A:  MOVLB  9
0756C:  MOVWF  xC2
0756E:  MOVLB  0
07570:  CALL   2064
07574:  MOVFF  1B4,9E8
07578:  MOVLW  37
0757A:  MOVLB  9
0757C:  MOVWF  xE9
0757E:  MOVLB  0
07580:  CALL   2294
07584:  MOVFF  1B3,9E8
07588:  MOVLW  37
0758A:  MOVLB  9
0758C:  MOVWF  xE9
0758E:  MOVLB  0
07590:  CALL   2294
07594:  MOVFF  1B2,9E8
07598:  MOVLW  37
0759A:  MOVLB  9
0759C:  MOVWF  xE9
0759E:  MOVLB  0
075A0:  CALL   2294
075A4:  MOVFF  1B1,9E8
075A8:  MOVLW  37
075AA:  MOVLB  9
075AC:  MOVWF  xE9
075AE:  MOVLB  0
075B0:  CALL   2294
075B4:  MOVLW  0D
075B6:  BTFSS  FA6.6
075B8:  GOTO   75B6
075BC:  MOVLB  E
075BE:  MOVWF  xF9
075C0:  MOVLW  0A
075C2:  MOVLB  0
075C4:  BTFSS  FA6.6
075C6:  GOTO   75C4
075CA:  MOVLB  E
075CC:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
075CE:  MOVLW  4A
075D0:  MOVWF  FF6
075D2:  MOVLW  1D
075D4:  MOVWF  FF7
075D6:  MOVLW  00
075D8:  MOVWF  FF8
075DA:  MOVLW  0E
075DC:  MOVLB  9
075DE:  MOVWF  xC2
075E0:  MOVLB  0
075E2:  CALL   2064
075E6:  MOVFF  1B6,9E8
075EA:  MOVLW  37
075EC:  MOVLB  9
075EE:  MOVWF  xE9
075F0:  MOVLB  0
075F2:  CALL   2294
075F6:  MOVFF  1B5,9E8
075FA:  MOVLW  37
075FC:  MOVLB  9
075FE:  MOVWF  xE9
07600:  MOVLB  0
07602:  CALL   2294
07606:  MOVLW  0D
07608:  BTFSS  FA6.6
0760A:  GOTO   7608
0760E:  MOVLB  E
07610:  MOVWF  xF9
07612:  MOVLW  0A
07614:  MOVLB  0
07616:  BTFSS  FA6.6
07618:  GOTO   7616
0761C:  MOVLB  E
0761E:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
07620:  MOVLW  60
07622:  MOVWF  FF6
07624:  MOVLW  1D
07626:  MOVWF  FF7
07628:  MOVLW  00
0762A:  MOVWF  FF8
0762C:  MOVLB  0
0762E:  CALL   202E
.................... 
....................    while (read_packetnum > 0) {
07632:  MOVLB  1
07634:  MOVF   xB5,F
07636:  BTFSC  FD8.2
07638:  BRA    7640
0763A:  MOVLB  0
0763C:  GOTO   7652
07640:  MOVLB  0
07642:  MOVLB  1
07644:  MOVF   xB6,F
07646:  BTFSS  FD8.2
07648:  BRA    7650
0764A:  MOVLB  0
0764C:  GOTO   771A
07650:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
07652:  MOVFF  119,AED
07656:  MOVFF  118,AEC
0765A:  MOVFF  117,AEB
0765E:  MOVFF  116,AEA
07662:  MOVFF  1B4,AF1
07666:  MOVFF  1B3,AF0
0766A:  MOVFF  1B2,AEF
0766E:  MOVFF  1B1,AEE
07672:  MOVLW  01
07674:  MOVLB  A
07676:  MOVWF  xF3
07678:  MOVLW  B7
0767A:  MOVWF  xF2
0767C:  CLRF   xF7
0767E:  CLRF   xF6
07680:  CLRF   xF5
07682:  MOVLW  40
07684:  MOVWF  xF4
07686:  MOVLB  0
07688:  CALL   2C1C
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
0768C:  MOVLB  1
0768E:  CLRF   xF7
07690:  MOVLB  0
07692:  MOVLB  1
07694:  MOVF   xF7,W
07696:  SUBLW  3F
07698:  BTFSC  FD8.0
0769A:  BRA    76A2
0769C:  MOVLB  0
0769E:  GOTO   76E0
076A2:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
076A4:  CLRF   03
076A6:  MOVLB  1
076A8:  MOVF   xF7,W
076AA:  ADDLW  B7
076AC:  MOVWF  FE9
076AE:  MOVLW  01
076B0:  ADDWFC 03,W
076B2:  MOVWF  FEA
076B4:  MOVFF  FEF,1F8
076B8:  MOVFF  1F8,9E8
076BC:  MOVLW  37
076BE:  MOVLB  9
076C0:  MOVWF  xE9
076C2:  MOVLB  0
076C4:  CALL   2294
076C8:  MOVLW  20
076CA:  BTFSS  FA6.6
076CC:  GOTO   76CA
076D0:  MOVLB  E
076D2:  MOVWF  xF9
076D4:  MOVLB  0
076D6:  MOVLB  1
076D8:  INCF   xF7,F
076DA:  MOVLB  0
076DC:  GOTO   7692
....................       }
....................       fprintf(PC, "\r\n");
076E0:  MOVLW  0D
076E2:  BTFSS  FA6.6
076E4:  GOTO   76E2
076E8:  MOVLB  E
076EA:  MOVWF  xF9
076EC:  MOVLW  0A
076EE:  MOVLB  0
076F0:  BTFSS  FA6.6
076F2:  GOTO   76F0
076F6:  MOVLB  E
076F8:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
076FA:  MOVLW  40
076FC:  MOVLB  1
076FE:  ADDWF  xB1,F
07700:  MOVLW  00
07702:  ADDWFC xB2,F
07704:  MOVLW  00
07706:  ADDWFC xB3,F
07708:  MOVLW  00
0770A:  ADDWFC xB4,F
....................       read_packetnum--;
0770C:  MOVF   xB5,W
0770E:  BTFSC  FD8.2
07710:  DECF   xB6,F
07712:  DECF   xB5,F
07714:  MOVLB  0
07716:  GOTO   7632
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
0771A:  MOVLW  6C
0771C:  MOVWF  FF6
0771E:  MOVLW  1D
07720:  MOVWF  FF7
07722:  MOVLW  00
07724:  MOVWF  FF8
07726:  CALL   202E
0772A:  GOTO   E586 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
0772E:  MOVLW  84
07730:  MOVWF  FF6
07732:  MOVLW  1D
07734:  MOVWF  FF7
07736:  MOVLW  00
07738:  MOVWF  FF8
0773A:  CALL   202E
....................    flash_setting(smf);
0773E:  MOVFF  119,2BD
07742:  MOVFF  118,2BC
07746:  MOVFF  117,2BB
0774A:  MOVFF  116,2BA
0774E:  CALL   6774
....................    unsigned int32 erase_address = 0x00000000; // Example address
07752:  MOVLB  1
07754:  CLRF   xB4
07756:  CLRF   xB3
07758:  CLRF   xB2
0775A:  CLRF   xB1
....................    sector_erase(smf, erase_address); // Erase the sector
0775C:  MOVFF  119,1F8
07760:  MOVFF  118,1F7
07764:  MOVFF  117,1F6
07768:  MOVFF  116,1F5
0776C:  MOVFF  1B4,1FC
07770:  MOVFF  1B3,1FB
07774:  MOVFF  1B2,1FA
07778:  MOVFF  1B1,1F9
0777C:  MOVLB  0
0777E:  CALL   5666
....................    fprintf(PC, "End Flash SMF Erase\r\n");
07782:  MOVLW  9C
07784:  MOVWF  FF6
07786:  MOVLW  1D
07788:  MOVWF  FF7
0778A:  MOVLW  00
0778C:  MOVWF  FF8
0778E:  CALL   202E
07792:  GOTO   E596 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
07134:  MOVLW  B2
07136:  MOVWF  FF6
07138:  MOVLW  1D
0713A:  MOVWF  FF7
0713C:  MOVLW  00
0713E:  MOVWF  FF8
07140:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
07144:  MOVLB  1
07146:  MOVF   xB1,W
07148:  MOVWF  FE9
0714A:  MOVF   xB2,W
0714C:  MOVWF  FEA
0714E:  MOVFF  FEF,1F5
07152:  MOVFF  1F5,206
07156:  MOVLB  2
07158:  CLRF   x07
0715A:  MOVLB  0
0715C:  CALL   4E3E
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07160:  MOVLW  01
07162:  MOVWF  FEA
07164:  MOVLW  B3
07166:  MOVWF  FE9
07168:  CLRF   00
0716A:  CLRF   02
0716C:  MOVLW  40
0716E:  MOVWF  01
07170:  CALL   209E
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
07174:  MOVLW  0D
07176:  BTFSS  FA6.6
07178:  GOTO   7176
0717C:  MOVLB  E
0717E:  MOVWF  xF9
07180:  MOVLW  0A
07182:  MOVLB  0
07184:  BTFSS  FA6.6
07186:  GOTO   7184
0718A:  MOVLB  E
0718C:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
0718E:  MOVLW  01
07190:  MOVLB  A
07192:  MOVWF  xEB
07194:  MOVLW  B3
07196:  MOVWF  xEA
07198:  MOVLW  3F
0719A:  MOVWF  xEC
0719C:  MOVLB  0
0719E:  CALL   2E3C
071A2:  MOVFF  01,1F2
....................    for (int i = 0; i < PACKET_SIZE; i++) {
071A6:  MOVLB  1
071A8:  CLRF   xF3
071AA:  MOVLB  0
071AC:  MOVLB  1
071AE:  MOVF   xF3,W
071B0:  SUBLW  3F
071B2:  BTFSC  FD8.0
071B4:  BRA    71BC
071B6:  MOVLB  0
071B8:  GOTO   71FA
071BC:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
071BE:  CLRF   03
071C0:  MOVLB  1
071C2:  MOVF   xF3,W
071C4:  ADDLW  B3
071C6:  MOVWF  FE9
071C8:  MOVLW  01
071CA:  ADDWFC 03,W
071CC:  MOVWF  FEA
071CE:  MOVFF  FEF,1F5
071D2:  MOVFF  1F5,9E8
071D6:  MOVLW  37
071D8:  MOVLB  9
071DA:  MOVWF  xE9
071DC:  MOVLB  0
071DE:  CALL   2294
071E2:  MOVLW  20
071E4:  BTFSS  FA6.6
071E6:  GOTO   71E4
071EA:  MOVLB  E
071EC:  MOVWF  xF9
071EE:  MOVLB  0
071F0:  MOVLB  1
071F2:  INCF   xF3,F
071F4:  MOVLB  0
071F6:  GOTO   71AC
....................    }
....................    fprintf(PC, "\r\n");
071FA:  MOVLW  0D
071FC:  BTFSS  FA6.6
071FE:  GOTO   71FC
07202:  MOVLB  E
07204:  MOVWF  xF9
07206:  MOVLW  0A
07208:  MOVLB  0
0720A:  BTFSS  FA6.6
0720C:  GOTO   720A
07210:  MOVLB  E
07212:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07214:  MOVFF  115,AED
07218:  MOVFF  114,AEC
0721C:  MOVFF  113,AEB
07220:  MOVFF  112,AEA
07224:  MOVLB  A
07226:  CLRF   xF1
07228:  CLRF   xF0
0722A:  CLRF   xEF
0722C:  CLRF   xEE
0722E:  MOVLW  01
07230:  MOVWF  xF3
07232:  MOVLW  B3
07234:  MOVWF  xF2
07236:  CLRF   xF5
07238:  MOVLW  40
0723A:  MOVWF  xF4
0723C:  MOVLB  0
0723E:  CALL   3C88
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07242:  MOVLW  01
07244:  MOVWF  FEA
07246:  MOVLW  B3
07248:  MOVWF  FE9
0724A:  CLRF   00
0724C:  CLRF   02
0724E:  MOVLW  40
07250:  MOVWF  01
07252:  CALL   209E
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07256:  MOVFF  115,AED
0725A:  MOVFF  114,AEC
0725E:  MOVFF  113,AEB
07262:  MOVFF  112,AEA
07266:  MOVLB  A
07268:  CLRF   xF1
0726A:  CLRF   xF0
0726C:  CLRF   xEF
0726E:  CLRF   xEE
07270:  MOVLW  01
07272:  MOVWF  xF3
07274:  MOVLW  B3
07276:  MOVWF  xF2
07278:  CLRF   xF7
0727A:  CLRF   xF6
0727C:  CLRF   xF5
0727E:  MOVLW  40
07280:  MOVWF  xF4
07282:  MOVLB  0
07284:  CALL   2C1C
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07288:  MOVLW  01
0728A:  MOVLB  A
0728C:  MOVWF  xEB
0728E:  MOVLW  B3
07290:  MOVWF  xEA
07292:  MOVLW  3F
07294:  MOVWF  xEC
07296:  MOVLB  0
07298:  CALL   2E3C
0729C:  MOVFF  01,1F2
....................    for (int i = 0; i < PACKET_SIZE; i++) {
072A0:  MOVLB  1
072A2:  CLRF   xF4
072A4:  MOVLB  0
072A6:  MOVLB  1
072A8:  MOVF   xF4,W
072AA:  SUBLW  3F
072AC:  BTFSC  FD8.0
072AE:  BRA    72B6
072B0:  MOVLB  0
072B2:  GOTO   72F4
072B6:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
072B8:  CLRF   03
072BA:  MOVLB  1
072BC:  MOVF   xF4,W
072BE:  ADDLW  B3
072C0:  MOVWF  FE9
072C2:  MOVLW  01
072C4:  ADDWFC 03,W
072C6:  MOVWF  FEA
072C8:  MOVFF  FEF,1F5
072CC:  MOVFF  1F5,9E8
072D0:  MOVLW  37
072D2:  MOVLB  9
072D4:  MOVWF  xE9
072D6:  MOVLB  0
072D8:  CALL   2294
072DC:  MOVLW  20
072DE:  BTFSS  FA6.6
072E0:  GOTO   72DE
072E4:  MOVLB  E
072E6:  MOVWF  xF9
072E8:  MOVLB  0
072EA:  MOVLB  1
072EC:  INCF   xF4,F
072EE:  MOVLB  0
072F0:  GOTO   72A6
....................    }
....................    misf_init(); // Update the address area after writing
072F4:  CALL   36B2
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
072F8:  MOVLB  1
072FA:  MOVF   xB1,W
072FC:  MOVWF  FE9
072FE:  MOVF   xB2,W
07300:  MOVWF  FEA
07302:  MOVFF  FEF,1F5
07306:  MOVFF  1F5,206
0730A:  MOVLB  2
0730C:  SETF   x07
0730E:  MOVLB  0
07310:  CALL   4E3E
....................    fprintf(PC, "End Flash Address Reset\r\n");
07314:  MOVLW  CE
07316:  MOVWF  FF6
07318:  MOVLW  1D
0731A:  MOVWF  FF7
0731C:  MOVLW  00
0731E:  MOVWF  FF8
07320:  CALL   202E
07324:  GOTO   736C (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07A96:  MOVLW  01
07A98:  MOVLB  1
07A9A:  ADDWF  xAF,W
07A9C:  MOVWF  FE9
07A9E:  MOVLW  00
07AA0:  ADDWFC xB0,W
07AA2:  MOVWF  FEA
07AA4:  MOVF   FEF,W
07AA6:  MOVLB  2
07AA8:  CLRF   x01
07AAA:  CLRF   x00
07AAC:  MOVLB  1
07AAE:  CLRF   xFF
07AB0:  MOVWF  xFE
07AB2:  MOVFF  1FE,201
07AB6:  CLRF   xFE
07AB8:  CLRF   xFF
07ABA:  MOVLB  2
07ABC:  CLRF   x00
07ABE:  MOVLW  02
07AC0:  MOVLB  1
07AC2:  ADDWF  xAF,W
07AC4:  MOVWF  FE9
07AC6:  MOVLW  00
07AC8:  ADDWFC xB0,W
07ACA:  MOVWF  FEA
07ACC:  MOVF   FEF,W
07ACE:  MOVLB  2
07AD0:  CLRF   x06
07AD2:  CLRF   x05
07AD4:  CLRF   x04
07AD6:  MOVWF  x03
07AD8:  MOVFF  204,03
07ADC:  MOVFF  203,02
07AE0:  CLRF   00
07AE2:  CLRF   01
07AE4:  MOVF   00,W
07AE6:  MOVLB  1
07AE8:  IORWF  xFE,F
07AEA:  MOVF   01,W
07AEC:  IORWF  xFF,F
07AEE:  MOVF   02,W
07AF0:  MOVLB  2
07AF2:  IORWF  x00,F
07AF4:  MOVF   03,W
07AF6:  IORWF  x01,F
07AF8:  MOVLW  03
07AFA:  MOVLB  1
07AFC:  ADDWF  xAF,W
07AFE:  MOVWF  FE9
07B00:  MOVLW  00
07B02:  ADDWFC xB0,W
07B04:  MOVWF  FEA
07B06:  MOVF   FEF,W
07B08:  MOVLB  2
07B0A:  CLRF   x06
07B0C:  CLRF   x05
07B0E:  CLRF   x04
07B10:  MOVWF  x03
07B12:  MOVFF  205,03
07B16:  MOVFF  204,02
07B1A:  MOVFF  203,01
07B1E:  CLRF   00
07B20:  MOVF   00,W
07B22:  MOVLB  1
07B24:  IORWF  xFE,F
07B26:  MOVF   01,W
07B28:  IORWF  xFF,F
07B2A:  MOVF   02,W
07B2C:  MOVLB  2
07B2E:  IORWF  x00,F
07B30:  MOVF   03,W
07B32:  IORWF  x01,F
07B34:  MOVLW  04
07B36:  MOVLB  1
07B38:  ADDWF  xAF,W
07B3A:  MOVWF  FE9
07B3C:  MOVLW  00
07B3E:  ADDWFC xB0,W
07B40:  MOVWF  FEA
07B42:  MOVF   FEF,W
07B44:  MOVWF  00
07B46:  CLRF   01
07B48:  CLRF   02
07B4A:  CLRF   03
07B4C:  MOVF   00,W
07B4E:  IORWF  xFE,W
07B50:  MOVWF  xB1
07B52:  MOVF   01,W
07B54:  IORWF  xFF,W
07B56:  MOVWF  xB2
07B58:  MOVF   02,W
07B5A:  MOVLB  2
07B5C:  IORWF  x00,W
07B5E:  MOVLB  1
07B60:  MOVWF  xB3
07B62:  MOVF   03,W
07B64:  MOVLB  2
07B66:  IORWF  x01,W
07B68:  MOVLB  1
07B6A:  MOVWF  xB4
07B6C:  MOVLW  07
07B6E:  ADDWF  xAF,W
07B70:  MOVWF  FE9
07B72:  MOVLW  00
07B74:  ADDWFC xB0,W
07B76:  MOVWF  FEA
07B78:  MOVF   FEF,W
07B7A:  CLRF   xFF
07B7C:  MOVWF  xFE
07B7E:  MOVFF  1FE,1FF
07B82:  CLRF   xFE
07B84:  MOVLW  08
07B86:  ADDWF  xAF,W
07B88:  MOVWF  FE9
07B8A:  MOVLW  00
07B8C:  ADDWFC xB0,W
07B8E:  MOVWF  FEA
07B90:  MOVF   FEF,W
07B92:  CLRF   03
07B94:  IORWF  xFE,W
07B96:  MOVWF  xB5
07B98:  MOVF   03,W
07B9A:  IORWF  xFF,W
07B9C:  MOVWF  xB6
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07B9E:  CLRF   xB7
07BA0:  CLRF   xB8
07BA2:  CLRF   xB9
07BA4:  CLRF   xBA
07BA6:  CLRF   xBB
07BA8:  CLRF   xBC
07BAA:  CLRF   xBD
07BAC:  CLRF   xBE
07BAE:  CLRF   xBF
07BB0:  CLRF   xC0
07BB2:  CLRF   xC1
07BB4:  CLRF   xC2
07BB6:  CLRF   xC3
07BB8:  CLRF   xC4
07BBA:  CLRF   xC5
07BBC:  CLRF   xC6
07BBE:  CLRF   xC7
07BC0:  CLRF   xC8
07BC2:  CLRF   xC9
07BC4:  CLRF   xCA
07BC6:  CLRF   xCB
07BC8:  CLRF   xCC
07BCA:  CLRF   xCD
07BCC:  CLRF   xCE
07BCE:  CLRF   xCF
07BD0:  CLRF   xD0
07BD2:  CLRF   xD1
07BD4:  CLRF   xD2
07BD6:  CLRF   xD3
07BD8:  CLRF   xD4
07BDA:  CLRF   xD5
07BDC:  CLRF   xD6
07BDE:  CLRF   xD7
07BE0:  CLRF   xD8
07BE2:  CLRF   xD9
07BE4:  CLRF   xDA
07BE6:  CLRF   xDB
07BE8:  CLRF   xDC
07BEA:  CLRF   xDD
07BEC:  CLRF   xDE
07BEE:  CLRF   xDF
07BF0:  CLRF   xE0
07BF2:  CLRF   xE1
07BF4:  CLRF   xE2
07BF6:  CLRF   xE3
07BF8:  CLRF   xE4
07BFA:  CLRF   xE5
07BFC:  CLRF   xE6
07BFE:  CLRF   xE7
07C00:  CLRF   xE8
07C02:  CLRF   xE9
07C04:  CLRF   xEA
07C06:  CLRF   xEB
07C08:  CLRF   xEC
07C0A:  CLRF   xED
07C0C:  CLRF   xEE
07C0E:  CLRF   xEF
07C10:  CLRF   xF0
07C12:  CLRF   xF1
07C14:  CLRF   xF2
07C16:  CLRF   xF3
07C18:  CLRF   xF4
07C1A:  CLRF   xF5
07C1C:  CLRF   xF6
....................    if(!is_connect(smf)) {
07C1E:  MOVFF  119,23A
07C22:  MOVFF  118,239
07C26:  MOVFF  117,238
07C2A:  MOVFF  116,237
07C2E:  MOVLB  0
07C30:  CALL   2B54
07C34:  MOVF   01,F
07C36:  BTFSS  FD8.2
07C38:  GOTO   7C50
....................       printf("SMF is not connected\r\n");
07C3C:  MOVLW  E8
07C3E:  MOVWF  FF6
07C40:  MOVLW  1D
07C42:  MOVWF  FF7
07C44:  MOVLW  00
07C46:  MOVWF  FF8
07C48:  CALL   202E
....................       return;
07C4C:  GOTO   7EA4
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07C50:  MOVLW  00
07C52:  MOVWF  FF6
07C54:  MOVLW  1E
07C56:  MOVWF  FF7
07C58:  MOVLW  00
07C5A:  MOVWF  FF8
07C5C:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07C60:  MOVLB  1
07C62:  MOVF   xAF,W
07C64:  MOVWF  FE9
07C66:  MOVF   xB0,W
07C68:  MOVWF  FEA
07C6A:  MOVFF  FEF,1FE
07C6E:  MOVFF  1FE,206
07C72:  MOVLB  2
07C74:  CLRF   x07
07C76:  MOVLB  0
07C78:  CALL   4E3E
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07C7C:  MOVLW  1E
07C7E:  MOVWF  FF6
07C80:  MOVLW  1E
07C82:  MOVWF  FF7
07C84:  MOVLW  00
07C86:  MOVWF  FF8
07C88:  MOVLW  0E
07C8A:  MOVLB  9
07C8C:  MOVWF  xC2
07C8E:  MOVLB  0
07C90:  CALL   2064
07C94:  MOVFF  1B4,9E8
07C98:  MOVLW  37
07C9A:  MOVLB  9
07C9C:  MOVWF  xE9
07C9E:  MOVLB  0
07CA0:  CALL   2294
07CA4:  MOVFF  1B3,9E8
07CA8:  MOVLW  37
07CAA:  MOVLB  9
07CAC:  MOVWF  xE9
07CAE:  MOVLB  0
07CB0:  CALL   2294
07CB4:  MOVFF  1B2,9E8
07CB8:  MOVLW  37
07CBA:  MOVLB  9
07CBC:  MOVWF  xE9
07CBE:  MOVLB  0
07CC0:  CALL   2294
07CC4:  MOVFF  1B1,9E8
07CC8:  MOVLW  37
07CCA:  MOVLB  9
07CCC:  MOVWF  xE9
07CCE:  MOVLB  0
07CD0:  CALL   2294
07CD4:  MOVLW  0D
07CD6:  BTFSS  FA6.6
07CD8:  GOTO   7CD6
07CDC:  MOVLB  E
07CDE:  MOVWF  xF9
07CE0:  MOVLW  0A
07CE2:  MOVLB  0
07CE4:  BTFSS  FA6.6
07CE6:  GOTO   7CE4
07CEA:  MOVLB  E
07CEC:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07CEE:  MOVLW  34
07CF0:  MOVWF  FF6
07CF2:  MOVLW  1E
07CF4:  MOVWF  FF7
07CF6:  MOVLW  00
07CF8:  MOVWF  FF8
07CFA:  MOVLW  0E
07CFC:  MOVLB  9
07CFE:  MOVWF  xC2
07D00:  MOVLB  0
07D02:  CALL   2064
07D06:  MOVFF  1B6,9E8
07D0A:  MOVLW  37
07D0C:  MOVLB  9
07D0E:  MOVWF  xE9
07D10:  MOVLB  0
07D12:  CALL   2294
07D16:  MOVFF  1B5,9E8
07D1A:  MOVLW  37
07D1C:  MOVLB  9
07D1E:  MOVWF  xE9
07D20:  MOVLB  0
07D22:  CALL   2294
07D26:  MOVLW  0D
07D28:  BTFSS  FA6.6
07D2A:  GOTO   7D28
07D2E:  MOVLB  E
07D30:  MOVWF  xF9
07D32:  MOVLW  0A
07D34:  MOVLB  0
07D36:  BTFSS  FA6.6
07D38:  GOTO   7D36
07D3C:  MOVLB  E
07D3E:  MOVWF  xF9
....................    printf("read data\r\n");
07D40:  MOVLW  4A
07D42:  MOVWF  FF6
07D44:  MOVLW  1E
07D46:  MOVWF  FF7
07D48:  MOVLW  00
07D4A:  MOVWF  FF8
07D4C:  MOVLB  0
07D4E:  CALL   202E
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07D52:  MOVLB  1
07D54:  CLRF   xF8
07D56:  CLRF   xF7
07D58:  MOVLB  0
07D5A:  MOVLB  1
07D5C:  MOVF   xF8,W
07D5E:  SUBWF  xB6,W
07D60:  BTFSC  FD8.0
07D62:  BRA    7D6A
07D64:  MOVLB  0
07D66:  GOTO   7E78
07D6A:  MOVLB  0
07D6C:  BTFSS  FD8.2
07D6E:  GOTO   7D84
07D72:  MOVLB  1
07D74:  MOVF   xB5,W
07D76:  SUBWF  xF7,W
07D78:  BTFSS  FD8.0
07D7A:  BRA    7D82
07D7C:  MOVLB  0
07D7E:  GOTO   7E78
07D82:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07D84:  MOVLB  1
07D86:  RLCF   xF7,W
07D88:  MOVWF  02
07D8A:  RLCF   xF8,W
07D8C:  MOVWF  03
07D8E:  RLCF   02,F
07D90:  RLCF   03,F
07D92:  RLCF   02,F
07D94:  RLCF   03,F
07D96:  RLCF   02,F
07D98:  RLCF   03,F
07D9A:  RLCF   02,F
07D9C:  RLCF   03,F
07D9E:  RLCF   02,F
07DA0:  RLCF   03,F
07DA2:  MOVLW  C0
07DA4:  ANDWF  02,F
07DA6:  MOVF   02,W
07DA8:  ADDWF  xB1,W
07DAA:  MOVWF  xF9
07DAC:  MOVF   03,W
07DAE:  ADDWFC xB2,W
07DB0:  MOVWF  xFA
07DB2:  MOVLW  00
07DB4:  ADDWFC xB3,W
07DB6:  MOVWF  xFB
07DB8:  MOVLW  00
07DBA:  ADDWFC xB4,W
07DBC:  MOVWF  xFC
07DBE:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07DC0:  MOVFF  119,AED
07DC4:  MOVFF  118,AEC
07DC8:  MOVFF  117,AEB
07DCC:  MOVFF  116,AEA
07DD0:  MOVFF  1FC,AF1
07DD4:  MOVFF  1FB,AF0
07DD8:  MOVFF  1FA,AEF
07DDC:  MOVFF  1F9,AEE
07DE0:  MOVLW  01
07DE2:  MOVLB  A
07DE4:  MOVWF  xF3
07DE6:  MOVLW  B7
07DE8:  MOVWF  xF2
07DEA:  CLRF   xF7
07DEC:  CLRF   xF6
07DEE:  CLRF   xF5
07DF0:  MOVLW  40
07DF2:  MOVWF  xF4
07DF4:  MOVLB  0
07DF6:  CALL   2C1C
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07DFA:  MOVLB  1
07DFC:  CLRF   xFD
07DFE:  MOVLB  0
07E00:  MOVLB  1
07E02:  MOVF   xFD,W
07E04:  SUBLW  3F
07E06:  BTFSC  FD8.0
07E08:  BRA    7E10
07E0A:  MOVLB  0
07E0C:  GOTO   7E4E
07E10:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
07E12:  CLRF   03
07E14:  MOVLB  1
07E16:  MOVF   xFD,W
07E18:  ADDLW  B7
07E1A:  MOVWF  FE9
07E1C:  MOVLW  01
07E1E:  ADDWFC 03,W
07E20:  MOVWF  FEA
07E22:  MOVFF  FEF,1FE
07E26:  MOVFF  1FE,9E8
07E2A:  MOVLW  37
07E2C:  MOVLB  9
07E2E:  MOVWF  xE9
07E30:  MOVLB  0
07E32:  CALL   2294
07E36:  MOVLW  20
07E38:  BTFSS  FA6.6
07E3A:  GOTO   7E38
07E3E:  MOVLB  E
07E40:  MOVWF  xF9
07E42:  MOVLB  0
07E44:  MOVLB  1
07E46:  INCF   xFD,F
07E48:  MOVLB  0
07E4A:  GOTO   7E00
....................       }
....................       printf("\r\n");
07E4E:  MOVLW  0D
07E50:  BTFSS  FA6.6
07E52:  GOTO   7E50
07E56:  MOVLB  E
07E58:  MOVWF  xF9
07E5A:  MOVLW  0A
07E5C:  MOVLB  0
07E5E:  BTFSS  FA6.6
07E60:  GOTO   7E5E
07E64:  MOVLB  E
07E66:  MOVWF  xF9
07E68:  MOVLB  0
07E6A:  MOVLB  1
07E6C:  INCF   xF7,F
07E6E:  BTFSC  FD8.2
07E70:  INCF   xF8,F
07E72:  MOVLB  0
07E74:  GOTO   7D5A
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
07E78:  MOVLW  56
07E7A:  MOVWF  FF6
07E7C:  MOVLW  1E
07E7E:  MOVWF  FF7
07E80:  MOVLW  00
07E82:  MOVWF  FF8
07E84:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07E88:  MOVLB  1
07E8A:  MOVF   xAF,W
07E8C:  MOVWF  FE9
07E8E:  MOVF   xB0,W
07E90:  MOVWF  FEA
07E92:  MOVFF  FEF,1FE
07E96:  MOVFF  1FE,206
07E9A:  MOVLB  2
07E9C:  SETF   x07
07E9E:  MOVLB  0
07EA0:  CALL   4E3E
07EA4:  GOTO   E5B6 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07EA8:  MOVLW  74
07EAA:  MOVWF  FF6
07EAC:  MOVLW  1E
07EAE:  MOVWF  FF7
07EB0:  MOVLW  00
07EB2:  MOVWF  FF8
07EB4:  CALL   202E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07EB8:  MOVLB  1
07EBA:  MOVF   xAF,W
07EBC:  MOVWF  FE9
07EBE:  MOVF   xB0,W
07EC0:  MOVWF  FEA
07EC2:  MOVFF  FEF,1B1
....................    piclog_make(cmd, 0x00); // Log the command execution
07EC6:  MOVFF  1B1,206
07ECA:  MOVLB  2
07ECC:  CLRF   x07
07ECE:  MOVLB  0
07ED0:  CALL   4E3E
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07ED4:  MOVLW  06
07ED6:  MOVLB  1
07ED8:  MOVWF  xB5
07EDA:  MOVLW  AA
07EDC:  MOVWF  xB4
07EDE:  CLRF   xB3
07EE0:  CLRF   xB2
07EE2:  MOVLB  0
07EE4:  MOVLB  1
07EE6:  MOVF   xB5,W
07EE8:  SUBLW  07
07EEA:  BTFSC  FD8.0
07EEC:  BRA    7EF4
07EEE:  MOVLB  0
07EF0:  GOTO   7F72
07EF4:  MOVLB  0
07EF6:  BTFSS  FD8.2
07EF8:  GOTO   7F3E
07EFC:  MOVLB  1
07EFE:  MOVF   xB4,W
07F00:  SUBLW  49
07F02:  BTFSC  FD8.0
07F04:  BRA    7F0C
07F06:  MOVLB  0
07F08:  GOTO   7F72
07F0C:  MOVLB  0
07F0E:  BTFSS  FD8.2
07F10:  GOTO   7F3E
07F14:  MOVLB  1
07F16:  MOVF   xB3,W
07F18:  SUBLW  0F
07F1A:  BTFSC  FD8.0
07F1C:  BRA    7F24
07F1E:  MOVLB  0
07F20:  GOTO   7F72
07F24:  MOVLB  0
07F26:  BTFSS  FD8.2
07F28:  GOTO   7F3E
07F2C:  MOVLB  1
07F2E:  MOVF   xB2,W
07F30:  SUBLW  FE
07F32:  BTFSC  FD8.0
07F34:  BRA    7F3C
07F36:  MOVLB  0
07F38:  GOTO   7F72
07F3C:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07F3E:  MOVFF  119,1F8
07F42:  MOVFF  118,1F7
07F46:  MOVFF  117,1F6
07F4A:  MOVFF  116,1F5
07F4E:  MOVFF  1B5,1FC
07F52:  MOVFF  1B4,1FB
07F56:  MOVFF  1B3,1FA
07F5A:  MOVFF  1B2,1F9
07F5E:  CALL   5666
07F62:  MOVLW  01
07F64:  MOVLB  1
07F66:  ADDWF  xB4,F
07F68:  MOVLW  00
07F6A:  ADDWFC xB5,F
07F6C:  MOVLB  0
07F6E:  GOTO   7EE4
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
07F72:  MOVFF  1B1,206
07F76:  MOVLB  2
07F78:  SETF   x07
07F7A:  MOVLB  0
07F7C:  CALL   4E3E
....................    printf("End SMF Erase All\r\n");
07F80:  MOVLW  8A
07F82:  MOVWF  FF6
07F84:  MOVLW  1E
07F86:  MOVWF  FF7
07F88:  MOVLW  00
07F8A:  MOVWF  FF8
07F8C:  CALL   202E
07F90:  GOTO   E5C6 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07918:  MOVLW  9E
0791A:  MOVWF  FF6
0791C:  MOVLW  1E
0791E:  MOVWF  FF7
07920:  MOVLW  00
07922:  MOVWF  FF8
07924:  CALL   202E
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07928:  MOVLB  1
0792A:  MOVF   xAF,W
0792C:  MOVWF  FE9
0792E:  MOVF   xB0,W
07930:  MOVWF  FEA
07932:  MOVFF  FEF,1F5
07936:  MOVFF  1F5,206
0793A:  MOVLB  2
0793C:  CLRF   x07
0793E:  MOVLB  0
07940:  CALL   4E3E
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07944:  MOVLB  1
07946:  CLRF   xB1
07948:  CLRF   xB2
0794A:  CLRF   xB3
0794C:  CLRF   xB4
0794E:  CLRF   xB5
07950:  CLRF   xB6
07952:  CLRF   xB7
07954:  CLRF   xB8
07956:  CLRF   xB9
07958:  CLRF   xBA
0795A:  CLRF   xBB
0795C:  CLRF   xBC
0795E:  CLRF   xBD
07960:  CLRF   xBE
07962:  CLRF   xBF
07964:  CLRF   xC0
07966:  CLRF   xC1
07968:  CLRF   xC2
0796A:  CLRF   xC3
0796C:  CLRF   xC4
0796E:  CLRF   xC5
07970:  CLRF   xC6
07972:  CLRF   xC7
07974:  CLRF   xC8
07976:  CLRF   xC9
07978:  CLRF   xCA
0797A:  CLRF   xCB
0797C:  CLRF   xCC
0797E:  CLRF   xCD
07980:  CLRF   xCE
07982:  CLRF   xCF
07984:  CLRF   xD0
07986:  CLRF   xD1
07988:  CLRF   xD2
0798A:  CLRF   xD3
0798C:  CLRF   xD4
0798E:  CLRF   xD5
07990:  CLRF   xD6
07992:  CLRF   xD7
07994:  CLRF   xD8
07996:  CLRF   xD9
07998:  CLRF   xDA
0799A:  CLRF   xDB
0799C:  CLRF   xDC
0799E:  CLRF   xDD
079A0:  CLRF   xDE
079A2:  CLRF   xDF
079A4:  CLRF   xE0
079A6:  CLRF   xE1
079A8:  CLRF   xE2
079AA:  CLRF   xE3
079AC:  CLRF   xE4
079AE:  CLRF   xE5
079B0:  CLRF   xE6
079B2:  CLRF   xE7
079B4:  CLRF   xE8
079B6:  CLRF   xE9
079B8:  CLRF   xEA
079BA:  CLRF   xEB
079BC:  CLRF   xEC
079BE:  CLRF   xED
079C0:  CLRF   xEE
079C2:  CLRF   xEF
079C4:  CLRF   xF0
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
079C6:  MOVLW  06
079C8:  MOVWF  xF4
079CA:  MOVLW  AA
079CC:  MOVWF  xF3
079CE:  CLRF   xF2
079D0:  CLRF   xF1
079D2:  MOVLB  0
079D4:  MOVLB  1
079D6:  MOVF   xF4,W
079D8:  SUBLW  07
079DA:  BTFSC  FD8.0
079DC:  BRA    79E4
079DE:  MOVLB  0
079E0:  GOTO   7A62
079E4:  MOVLB  0
079E6:  BTFSS  FD8.2
079E8:  GOTO   7A2E
079EC:  MOVLB  1
079EE:  MOVF   xF3,W
079F0:  SUBLW  49
079F2:  BTFSC  FD8.0
079F4:  BRA    79FC
079F6:  MOVLB  0
079F8:  GOTO   7A62
079FC:  MOVLB  0
079FE:  BTFSS  FD8.2
07A00:  GOTO   7A2E
07A04:  MOVLB  1
07A06:  MOVF   xF2,W
07A08:  SUBLW  0F
07A0A:  BTFSC  FD8.0
07A0C:  BRA    7A14
07A0E:  MOVLB  0
07A10:  GOTO   7A62
07A14:  MOVLB  0
07A16:  BTFSS  FD8.2
07A18:  GOTO   7A2E
07A1C:  MOVLB  1
07A1E:  MOVF   xF1,W
07A20:  SUBLW  FE
07A22:  BTFSC  FD8.0
07A24:  BRA    7A2C
07A26:  MOVLB  0
07A28:  GOTO   7A62
07A2C:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07A2E:  MOVFF  119,1F8
07A32:  MOVFF  118,1F7
07A36:  MOVFF  117,1F6
07A3A:  MOVFF  116,1F5
07A3E:  MOVFF  1F4,1FC
07A42:  MOVFF  1F3,1FB
07A46:  MOVFF  1F2,1FA
07A4A:  MOVFF  1F1,1F9
07A4E:  CALL   5666
07A52:  MOVLW  01
07A54:  MOVLB  1
07A56:  ADDWF  xF3,F
07A58:  MOVLW  00
07A5A:  ADDWFC xF4,F
07A5C:  MOVLB  0
07A5E:  GOTO   79D4
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07A62:  CALL   7796
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07A66:  MOVLB  1
07A68:  MOVF   xAF,W
07A6A:  MOVWF  FE9
07A6C:  MOVF   xB0,W
07A6E:  MOVWF  FEA
07A70:  MOVFF  FEF,1F5
07A74:  MOVFF  1F5,206
07A78:  MOVLB  2
07A7A:  SETF   x07
07A7C:  MOVLB  0
07A7E:  CALL   4E3E
....................    printf("End SMF Reset\r\n");
07A82:  MOVLW  B0
07A84:  MOVWF  FF6
07A86:  MOVLW  1E
07A88:  MOVWF  FF7
07A8A:  MOVLW  00
07A8C:  MOVWF  FF8
07A8E:  CALL   202E
07A92:  GOTO   E5A6 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
11640:  CLRF   FF8
11642:  BCF    FF1.2
11644:  BCF    F9F.0
11646:  BCF    FA9.5
11648:  BSF    FD0.7
1164A:  BSF    07.7
1164C:  MOVLB  E
1164E:  MOVLW  55
11650:  MOVWF  F7E
11652:  MOVLW  AA
11654:  MOVWF  F7E
11656:  BCF    F66.6
11658:  MOVLW  F9
1165A:  MOVWF  x2C
1165C:  MOVLW  F6
1165E:  MOVWF  x2D
11660:  MOVLW  0F
11662:  MOVWF  x2E
11664:  MOVLW  40
11666:  MOVWF  x12
11668:  MOVLW  30
1166A:  MOVWF  x13
1166C:  MOVLW  20
1166E:  MOVWF  x22
11670:  MOVLW  30
11672:  MOVWF  x24
11674:  MOVLW  55
11676:  MOVWF  F7E
11678:  MOVLW  AA
1167A:  MOVWF  F7E
1167C:  BSF    F66.6
1167E:  CLRF   F9B
11680:  CLRF   F64
11682:  CLRF   F65
11684:  CLRF   F66
11686:  MOVLW  02
11688:  MOVWF  FD3
1168A:  CLRF   1B
1168C:  MOVLB  F
1168E:  BSF    x2D.3
11690:  MOVLW  A0
11692:  MOVWF  x2B
11694:  MOVLW  01
11696:  MOVWF  x2C
11698:  MOVLW  A6
1169A:  MOVWF  x2E
1169C:  MOVLW  90
1169E:  MOVWF  x2F
116A0:  MOVLB  E
116A2:  BSF    xFD.3
116A4:  MOVLW  A0
116A6:  MOVWF  xFB
116A8:  MOVLW  01
116AA:  MOVWF  xFC
116AC:  MOVLW  A6
116AE:  MOVWF  xFE
116B0:  MOVLW  90
116B2:  MOVWF  xFF
116B4:  BSF    F92.1
116B6:  BCF    F92.0
116B8:  BCF    F92.3
116BA:  BCF    F89.3
116BC:  BSF    F96.0
116BE:  BCF    F96.6
116C0:  BCF    F96.1
116C2:  BCF    F8D.1
116C4:  BSF    F93.4
116C6:  BCF    F93.5
116C8:  BCF    F93.2
116CA:  BSF    F8A.2
116CC:  BCF    F95.4
116CE:  BCF    F95.5
116D0:  BSF    F8C.5
116D2:  CLRF   1F
116D4:  CLRF   1E
116D6:  CLRF   1D
116D8:  CLRF   1C
116DA:  CLRF   23
116DC:  CLRF   22
116DE:  CLRF   21
116E0:  CLRF   20
116E2:  CLRF   27
116E4:  CLRF   26
116E6:  CLRF   25
116E8:  CLRF   24
116EA:  CLRF   29
116EC:  CLRF   28
116EE:  CLRF   4A
116F0:  BCF    4B.0
116F2:  MOVLW  1E
116F4:  MOVLB  1
116F6:  MOVWF  x7C
116F8:  CLRF   x81
116FA:  CLRF   x80
116FC:  CLRF   x7F
116FE:  CLRF   x7E
11700:  CLRF   x85
11702:  CLRF   x84
11704:  CLRF   x83
11706:  CLRF   x82
11708:  CLRF   x87
1170A:  CLRF   x86
1170C:  MOVLB  E
1170E:  CLRF   xD9
11710:  CLRF   xDA
11712:  CLRF   xCE
11714:  CLRF   xCF
11716:  CLRF   xD0
11718:  CLRF   xD1
1171A:  CLRF   xD2
1171C:  CLRF   xD3
1171E:  CLRF   xD4
11720:  CLRF   xD5
11722:  CLRF   x45
11724:  CLRF   x46
11726:  CLRF   x47
11728:  BCF    x8D.7
1172A:  BCF    x8D.6
1172C:  BCF    x8D.5
1172E:  MOVLB  F
11730:  CLRF   x53
11732:  CLRF   x38
11734:  CLRF   x37
11736:  MOVLB  0
11738:  CLRF   2A
1173A:  CLRF   2B
1173C:  CLRF   2C
1173E:  CLRF   2D
11740:  CLRF   2E
11742:  CLRF   2F
11744:  CLRF   30
11746:  CLRF   31
11748:  CLRF   32
1174A:  CLRF   33
1174C:  CLRF   34
1174E:  CLRF   35
11750:  CLRF   36
11752:  CLRF   37
11754:  CLRF   38
11756:  CLRF   39
11758:  CLRF   3A
1175A:  CLRF   3B
1175C:  CLRF   3C
1175E:  CLRF   3D
11760:  CLRF   3E
11762:  CLRF   3F
11764:  CLRF   40
11766:  CLRF   41
11768:  CLRF   42
1176A:  CLRF   43
1176C:  CLRF   44
1176E:  CLRF   45
11770:  CLRF   46
11772:  CLRF   47
11774:  CLRF   48
11776:  CLRF   49
11778:  MOVLW  03
1177A:  MOVWF  4C
1177C:  CLRF   4D
1177E:  CLRF   4E
11780:  CLRF   4F
11782:  CLRF   50
11784:  CLRF   51
11786:  CLRF   52
11788:  CLRF   53
1178A:  CLRF   54
1178C:  CLRF   55
1178E:  CLRF   56
11790:  CLRF   57
11792:  CLRF   58
11794:  CLRF   59
11796:  CLRF   5A
11798:  CLRF   5B
1179A:  CLRF   5C
1179C:  CLRF   5D
1179E:  CLRF   5E
117A0:  CLRF   5F
117A2:  CLRF   x60
117A4:  CLRF   x61
117A6:  CLRF   x62
117A8:  CLRF   x63
117AA:  CLRF   x64
117AC:  CLRF   x65
117AE:  CLRF   x66
117B0:  CLRF   x67
117B2:  CLRF   x68
117B4:  CLRF   x69
117B6:  CLRF   x6A
117B8:  CLRF   x6B
117BA:  CLRF   x6C
117BC:  CLRF   x6D
117BE:  CLRF   x6E
117C0:  CLRF   x6F
117C2:  CLRF   x70
117C4:  CLRF   x71
117C6:  CLRF   x72
117C8:  CLRF   x73
117CA:  CLRF   x74
117CC:  CLRF   x75
117CE:  CLRF   x76
117D0:  CLRF   x77
117D2:  CLRF   x78
117D4:  CLRF   x79
117D6:  CLRF   x7A
117D8:  CLRF   x7B
117DA:  CLRF   x7C
117DC:  CLRF   x7D
117DE:  CLRF   x7E
117E0:  CLRF   x7F
117E2:  CLRF   x80
117E4:  CLRF   x81
117E6:  CLRF   x82
117E8:  CLRF   x83
117EA:  CLRF   x84
117EC:  CLRF   x85
117EE:  CLRF   x86
117F0:  CLRF   x87
117F2:  CLRF   x88
117F4:  CLRF   x89
117F6:  CLRF   x8A
117F8:  CLRF   x8B
117FA:  CLRF   x8C
117FC:  CLRF   x8D
117FE:  CLRF   x8E
11800:  CLRF   x8F
11802:  CLRF   x90
11804:  CLRF   x91
11806:  CLRF   x92
11808:  CLRF   x93
1180A:  CLRF   x94
1180C:  CLRF   x95
1180E:  CLRF   x96
11810:  CLRF   x97
11812:  CLRF   x98
11814:  CLRF   x99
11816:  CLRF   x9A
11818:  CLRF   x9B
1181A:  CLRF   x9C
1181C:  CLRF   x9D
1181E:  CLRF   x9E
11820:  CLRF   x9F
11822:  CLRF   xA0
11824:  CLRF   xA1
11826:  CLRF   xA2
11828:  CLRF   xA3
1182A:  CLRF   xA4
1182C:  CLRF   xA5
1182E:  CLRF   xA6
11830:  CLRF   xA7
11832:  CLRF   xA8
11834:  CLRF   xA9
11836:  CLRF   xAA
11838:  CLRF   xAB
1183A:  CLRF   xAC
1183C:  CLRF   xAD
1183E:  CLRF   xAE
11840:  CLRF   xAF
11842:  CLRF   xB0
11844:  CLRF   xB1
11846:  CLRF   xB2
11848:  CLRF   xB3
1184A:  CLRF   xB4
1184C:  CLRF   xB5
1184E:  CLRF   xB6
11850:  CLRF   xB7
11852:  CLRF   xB8
11854:  CLRF   xB9
11856:  CLRF   xBA
11858:  CLRF   xBB
1185A:  CLRF   xBC
1185C:  CLRF   xBD
1185E:  CLRF   xBE
11860:  CLRF   xBF
11862:  CLRF   xC0
11864:  CLRF   xC1
11866:  CLRF   xC2
11868:  CLRF   xC3
1186A:  CLRF   xC4
1186C:  CLRF   xC5
1186E:  CLRF   xC6
11870:  CLRF   xC7
11872:  CLRF   xC8
11874:  CLRF   xC9
11876:  CLRF   xCA
11878:  CLRF   xCB
1187A:  CLRF   xCC
1187C:  CLRF   xCD
1187E:  CLRF   xCE
11880:  CLRF   xCF
11882:  CLRF   xD0
11884:  CLRF   xD1
11886:  CLRF   xD2
11888:  CLRF   xD3
1188A:  CLRF   xD4
1188C:  CLRF   xD5
1188E:  CLRF   xD6
11890:  CLRF   xD7
11892:  CLRF   xD8
11894:  CLRF   xD9
11896:  CLRF   xDA
11898:  CLRF   xDB
1189A:  CLRF   xDC
1189C:  CLRF   xDD
1189E:  CLRF   xDE
118A0:  CLRF   xDF
118A2:  CLRF   xE0
118A4:  CLRF   xE1
118A6:  CLRF   xE2
118A8:  CLRF   xE3
118AA:  CLRF   xE4
118AC:  CLRF   xE5
118AE:  CLRF   xE6
118B0:  CLRF   xE7
118B2:  CLRF   xE8
118B4:  CLRF   xE9
118B6:  CLRF   xEA
118B8:  CLRF   xEB
118BA:  CLRF   xEC
118BC:  CLRF   xED
118BE:  CLRF   xEE
118C0:  CLRF   xEF
118C2:  CLRF   xF0
118C4:  CLRF   xF1
118C6:  CLRF   xF2
118C8:  CLRF   xF3
118CA:  CLRF   xF4
118CC:  CLRF   xF5
118CE:  CLRF   xF6
118D0:  CLRF   xF7
118D2:  CLRF   xF8
118D4:  CLRF   xF9
118D6:  CLRF   xFA
118D8:  CLRF   xFB
118DA:  CLRF   xFC
118DC:  CLRF   xFD
118DE:  CLRF   xFE
118E0:  CLRF   xFF
118E2:  MOVLB  1
118E4:  CLRF   x00
118E6:  CLRF   x01
118E8:  CLRF   x02
118EA:  CLRF   x03
118EC:  CLRF   x04
118EE:  CLRF   x05
118F0:  CLRF   x06
118F2:  CLRF   x07
118F4:  CLRF   x08
118F6:  CLRF   x09
118F8:  CLRF   x0A
118FA:  CLRF   x0B
118FC:  CLRF   x0C
118FE:  CLRF   x0D
11900:  CLRF   x0E
11902:  CLRF   x0F
11904:  CLRF   x10
11906:  CLRF   x11
11908:  CLRF   x12
1190A:  CLRF   x13
1190C:  MOVLW  30
1190E:  MOVWF  x14
11910:  MOVLW  7C
11912:  MOVWF  x15
11914:  MOVLW  01
11916:  MOVWF  x16
11918:  MOVLW  01
1191A:  MOVWF  x17
1191C:  MOVLW  02
1191E:  MOVWF  x18
11920:  MOVLW  7C
11922:  MOVWF  x19
11924:  CLRF   x1A
11926:  MOVLW  09
11928:  MOVWF  x1B
1192A:  MOVLW  01
1192C:  MOVWF  x1C
1192E:  CLRF   x1D
11930:  MOVLW  02
11932:  MOVWF  x1E
11934:  MOVLW  01
11936:  MOVWF  x1F
11938:  MOVLW  03
1193A:  MOVWF  x20
1193C:  MOVLW  04
1193E:  MOVWF  x21
11940:  MOVLW  01
11942:  MOVWF  x69
11944:  MOVLW  22
11946:  MOVWF  x68
11948:  MOVLW  01
1194A:  MOVWF  x6B
1194C:  MOVLW  2C
1194E:  MOVWF  x6A
11950:  MOVLW  01
11952:  MOVWF  x6D
11954:  MOVLW  36
11956:  MOVWF  x6C
11958:  MOVLW  01
1195A:  MOVWF  x6F
1195C:  MOVLW  40
1195E:  MOVWF  x6E
11960:  MOVLW  01
11962:  MOVWF  x71
11964:  MOVLW  4A
11966:  MOVWF  x70
11968:  MOVLW  01
1196A:  MOVWF  x73
1196C:  MOVLW  54
1196E:  MOVWF  x72
11970:  MOVLW  01
11972:  MOVWF  x75
11974:  MOVLW  5E
11976:  MOVWF  x74
11978:  CLRF   x88
1197A:  CLRF   x89
1197C:  CLRF   x8A
1197E:  CLRF   x8B
11980:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
11982:  MOVLW  64
11984:  MOVLB  B
11986:  MOVWF  x02
11988:  MOVLB  0
1198A:  CALL   2000
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
1198E:  MOVLW  C0
11990:  MOVWF  FF6
11992:  MOVLW  1E
11994:  MOVWF  FF7
11996:  MOVLW  00
11998:  MOVWF  FF8
1199A:  CALL   202E
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
1199E:  MOVLW  06
119A0:  MOVWF  FF6
119A2:  MOVLW  1F
119A4:  MOVWF  FF7
119A6:  MOVLW  00
119A8:  MOVWF  FF8
119AA:  CALL   202E
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
119AE:  MOVLW  34
119B0:  MOVWF  FF6
119B2:  MOVLW  1F
119B4:  MOVWF  FF7
119B6:  MOVLW  00
119B8:  MOVWF  FF8
119BA:  MOVLW  10
119BC:  MOVLB  9
119BE:  MOVWF  xC2
119C0:  MOVLB  0
119C2:  CALL   2064
119C6:  MOVLW  5A
119C8:  MOVWF  FF6
119CA:  MOVLW  1F
119CC:  MOVWF  FF7
119CE:  MOVLW  00
119D0:  MOVWF  FF8
119D2:  CALL   202E
119D6:  MOVLW  20
119D8:  BTFSS  FA6.6
119DA:  GOTO   119D8
119DE:  MOVLB  E
119E0:  MOVWF  xF9
119E2:  MOVLW  64
119E4:  MOVWF  FF6
119E6:  MOVLW  1F
119E8:  MOVWF  FF7
119EA:  MOVLW  00
119EC:  MOVWF  FF8
119EE:  MOVLB  0
119F0:  CALL   202E
119F4:  MOVLW  49
119F6:  MOVWF  FF6
119F8:  MOVLW  1F
119FA:  MOVWF  FF7
119FC:  MOVLW  00
119FE:  MOVWF  FF8
11A00:  MOVLW  0F
11A02:  MOVLB  9
11A04:  MOVWF  xC2
11A06:  MOVLB  0
11A08:  CALL   2064
....................    memset(smf_update_flag, 0, sizeof(smf_update_flag));
11A0C:  MOVLW  01
11A0E:  MOVWF  FEA
11A10:  MOVLW  7A
11A12:  MOVWF  FE9
11A14:  CLRF   00
11A16:  CLRF   02
11A18:  MOVLW  02
11A1A:  MOVWF  01
11A1C:  CALL   209E
....................    // io_init();
....................    setup_uart_to_boss();
11A20:  GOTO   20C2
....................    timer_init();
11A24:  GOTO   20EC
....................    ad7490_init();
11A28:  GOTO   2310
....................    mcp4901_init();
11A2C:  GOTO   2640
....................    misf_init();
11A30:  CALL   36B2
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
11A34:  MOVLB  2
11A36:  CLRF   x06
11A38:  CLRF   x07
11A3A:  MOVLB  0
11A3C:  CALL   4E3E
.................... 
....................    int1 is_finished = FALSE;
11A40:  MOVLB  1
11A42:  BCF    x8C.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
11A44:  MOVLW  6E
11A46:  MOVWF  FF6
11A48:  MOVLW  1F
11A4A:  MOVWF  FF7
11A4C:  MOVLW  00
11A4E:  MOVWF  FF8
11A50:  MOVLB  0
11A52:  CALL   202E
....................    
....................    //enable_negative_power();
....................    connect_port1();
11A56:  CALL   4F66
....................    connect_port2();
11A5A:  CALL   4F6E
....................    mcp4901_1_write(0);
11A5E:  MOVLB  9
11A60:  CLRF   xDD
11A62:  CLRF   xDC
11A64:  MOVLB  0
11A66:  CALL   25C4
....................    mcp4901_2_write(0);
11A6A:  MOVLB  9
11A6C:  CLRF   xDD
11A6E:  CLRF   xDC
11A70:  MOVLB  0
11A72:  CALL   2602
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
11A76:  MOVLW  01
11A78:  MOVLB  1
11A7A:  MOVWF  x99
11A7C:  MOVLB  0
11A7E:  GOTO   4F76
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
11A82:  MOVLW  94
11A84:  MOVWF  FF6
11A86:  MOVLW  1F
11A88:  MOVWF  FF7
11A8A:  MOVLW  00
11A8C:  MOVWF  FF8
11A8E:  CALL   202E
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
11A92:  MOVF   4A,F
11A94:  BTFSC  FD8.2
11A96:  GOTO   11B38
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
11A9A:  MOVLB  1
11A9C:  CLRF   xA0
11A9E:  MOVLW  2A
11AA0:  MOVWF  x9F
11AA2:  MOVFF  4A,1A1
11AA6:  MOVLB  0
11AA8:  GOTO   52B2
11AAC:  MOVFF  02,03
11AB0:  MOVF   01,W
11AB2:  MOVWF  FE1
11AB4:  MOVFF  03,FE2
11AB8:  MOVLW  01
11ABA:  MOVWF  FEA
11ABC:  MOVLW  8D
11ABE:  MOVWF  FE9
11AC0:  MOVLW  0C
11AC2:  MOVWF  01
11AC4:  MOVFF  FE6,FEE
11AC8:  DECFSZ 01,F
11ACA:  GOTO   11AC4
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
11ACE:  MOVLB  1
11AD0:  CLRF   xE0
11AD2:  MOVLW  2A
11AD4:  MOVWF  xDF
11AD6:  CLRF   xE2
11AD8:  MOVLW  4A
11ADA:  MOVWF  xE1
11ADC:  MOVLB  0
11ADE:  CALL   54B4
....................          
....................          if(recieve_cmd.is_exist){
11AE2:  MOVLB  1
11AE4:  BTFSC  x8F.0
11AE6:  BRA    11AEE
11AE8:  MOVLB  0
11AEA:  GOTO   11B38
11AEE:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
11AF0:  MOVLW  01
11AF2:  MOVLB  1
11AF4:  MOVWF  x9A
11AF6:  MOVLW  8D
11AF8:  MOVWF  x99
11AFA:  MOVLB  0
11AFC:  GOTO   11590
11B00:  MOVLB  1
11B02:  BCF    x8C.0
11B04:  BTFSC  01.0
11B06:  BSF    x8C.0
....................             if (is_finished == TRUE)
11B08:  BTFSC  x8C.0
11B0A:  BRA    11B12
11B0C:  MOVLB  0
11B0E:  GOTO   11B28
11B12:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
11B14:  MOVLW  B2
11B16:  MOVWF  FF6
11B18:  MOVLW  1F
11B1A:  MOVWF  FF7
11B1C:  MOVLW  00
11B1E:  MOVWF  FF8
11B20:  CALL   202E
....................                
.................... 
....................             }else{
11B24:  GOTO   11B38
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
11B28:  MOVLW  D4
11B2A:  MOVWF  FF6
11B2C:  MOVLW  1F
11B2E:  MOVWF  FF7
11B30:  MOVLW  00
11B32:  MOVWF  FF8
11B34:  CALL   202E
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
11B38:  MOVLW  02
11B3A:  MOVLB  1
11B3C:  MOVWF  x99
11B3E:  MOVLB  0
11B40:  MOVLW  FA
11B42:  MOVLB  B
11B44:  MOVWF  x02
11B46:  MOVLB  0
11B48:  CALL   2000
11B4C:  MOVLB  1
11B4E:  DECFSZ x99,F
11B50:  BRA    11B56
11B52:  BRA    11B5A
11B54:  MOVLB  0
11B56:  MOVLB  0
11B58:  BRA    11B40
....................       fprintf(PC, ".");
11B5A:  MOVLW  2E
11B5C:  MOVLB  0
11B5E:  BTFSS  FA6.6
11B60:  GOTO   11B5E
11B64:  MOVLB  E
11B66:  MOVWF  xF9
11B68:  MOVLB  0
11B6A:  GOTO   11A92
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
11B6E:  MOVLW  F4
11B70:  MOVWF  FF6
11B72:  MOVLW  1F
11B74:  MOVWF  FF7
11B76:  MOVLW  00
11B78:  MOVWF  FF8
11B7A:  CALL   202E
....................    
.................... }
.................... // End of files
11B7E:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
