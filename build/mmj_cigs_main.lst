CCS PCH C Compiler, Version 5.104, 57077               28-7-25 17:39

               Filename:   build\mmj_cigs_main.lst

               ROM used:   41174 bytes (31%)
                           Largest free fragment is 65520
               RAM used:   953 (27%) at main() level
                           2215 (62%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   9734
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,43
001AE:  DATA 6F,6E
001B0:  DATA 6E,65
001B2:  DATA 63,74
001B4:  DATA 20,65
001B6:  DATA 72,72
001B8:  DATA 6F,72
001BA:  DATA 21,0D
001BC:  DATA 0A,00
001BE:  DATA 09,43
001C0:  DATA 6F,6E
001C2:  DATA 6E,65
001C4:  DATA 63,74
001C6:  DATA 20,73
001C8:  DATA 75,63
001CA:  DATA 63,65
001CC:  DATA 73,73
001CE:  DATA 66,75
001D0:  DATA 6C,0D
001D2:  DATA 0A,00
001D4:  DATA 09,43
001D6:  DATA 6F,6D
001D8:  DATA 70,6C
001DA:  DATA 65,74
001DC:  DATA 65,0D
001DE:  DATA 0A,00
001E0:  DATA 4D,43
001E2:  DATA 50,34
001E4:  DATA 39,30
001E6:  DATA 31,20
001E8:  DATA 49,6E
001EA:  DATA 69,74
001EC:  DATA 69,61
001EE:  DATA 6C,69
001F0:  DATA 7A,65
001F2:  DATA 0D,0A
001F4:  DATA 00,00
001F6:  DATA 09,5B
001F8:  DATA 44,41
001FA:  DATA 43,20
001FC:  DATA 50,6F
001FE:  DATA 72,74
00200:  DATA 20,31
00202:  DATA 5D,20
00204:  DATA 43,6F
00206:  DATA 6E,6E
00208:  DATA 65,63
0020A:  DATA 74,20
0020C:  DATA 65,72
0020E:  DATA 72,6F
00210:  DATA 72,21
00212:  DATA 0D,0A
00214:  DATA 00,00
00216:  DATA 09,5B
00218:  DATA 44,41
0021A:  DATA 43,20
0021C:  DATA 50,6F
0021E:  DATA 72,74
00220:  DATA 20,31
00222:  DATA 5D,20
00224:  DATA 43,6F
00226:  DATA 6E,6E
00228:  DATA 65,63
0022A:  DATA 74,20
0022C:  DATA 73,75
0022E:  DATA 63,63
00230:  DATA 65,73
00232:  DATA 73,66
00234:  DATA 75,6C
00236:  DATA 0D,0A
00238:  DATA 00,00
0023A:  DATA 09,5B
0023C:  DATA 44,41
0023E:  DATA 43,20
00240:  DATA 50,6F
00242:  DATA 72,74
00244:  DATA 20,32
00246:  DATA 5D,20
00248:  DATA 43,6F
0024A:  DATA 6E,6E
0024C:  DATA 65,63
0024E:  DATA 74,20
00250:  DATA 65,72
00252:  DATA 72,6F
00254:  DATA 72,21
00256:  DATA 0D,0A
00258:  DATA 00,00
0025A:  DATA 09,5B
0025C:  DATA 44,41
0025E:  DATA 43,20
00260:  DATA 50,6F
00262:  DATA 72,74
00264:  DATA 20,32
00266:  DATA 5D,20
00268:  DATA 43,6F
0026A:  DATA 6E,6E
0026C:  DATA 65,63
0026E:  DATA 74,20
00270:  DATA 73,75
00272:  DATA 63,63
00274:  DATA 65,73
00276:  DATA 73,66
00278:  DATA 75,6C
0027A:  DATA 0D,0A
0027C:  DATA 00,00
0027E:  DATA 09,43
00280:  DATA 6F,6D
00282:  DATA 70,6C
00284:  DATA 65,74
00286:  DATA 65,0D
00288:  DATA 0A,00
0028A:  DATA 53,4D
0028C:  DATA 46,20
0028E:  DATA 64,61
00290:  DATA 74,61
00292:  DATA 20,6C
00294:  DATA 69,73
00296:  DATA 74,20
00298:  DATA 69,73
0029A:  DATA 20,66
0029C:  DATA 75,6C
0029E:  DATA 6C,21
002A0:  DATA 21,21
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 53,4D
002A8:  DATA 46,20
002AA:  DATA 64,61
002AC:  DATA 74,61
002AE:  DATA 20,6C
002B0:  DATA 69,73
002B2:  DATA 74,20
002B4:  DATA 69,73
002B6:  DATA 20,65
002B8:  DATA 6D,70
002BA:  DATA 74,79
002BC:  DATA 0D,0A
002BE:  DATA 00,00
002C0:  DATA 0D,0A
002C2:  DATA 53,74
002C4:  DATA 61,72
002C6:  DATA 74,20
002C8:  DATA 6D,61
002CA:  DATA 6B,65
002CC:  DATA 5F,72
002CE:  DATA 65,63
002D0:  DATA 65,69
002D2:  DATA 76,65
002D4:  DATA 5F,63
002D6:  DATA 6F,6D
002D8:  DATA 6D,61
002DA:  DATA 6E,64
002DC:  DATA 0D,0A
002DE:  DATA 00,00
002E0:  DATA 09,5B
002E2:  DATA 42,4F
002E4:  DATA 53,53
002E6:  DATA 5D,20
002E8:  DATA 3E,3E
002EA:  DATA 3E,20
002EC:  DATA 00,00
002EE:  DATA 45,6E
002F0:  DATA 64,20
002F2:  DATA 6D,61
002F4:  DATA 6B,65
002F6:  DATA 5F,72
002F8:  DATA 65,63
002FA:  DATA 69,76
002FC:  DATA 65,5F
002FE:  DATA 63,6F
00300:  DATA 6D,6D
00302:  DATA 61,6E
00304:  DATA 64,0D
00306:  DATA 0A,0D
00308:  DATA 0A,00
0030A:  DATA 73,69
0030C:  DATA 67,6E
0030E:  DATA 61,6C
00310:  DATA 20,65
00312:  DATA 6E,64
00314:  DATA 20,77
00316:  DATA 69,74
00318:  DATA 68,20
0031A:  DATA 53,46
0031C:  DATA 44,0D
0031E:  DATA 0A,00
00320:  DATA 64,6F
00322:  DATA 6E,27
00324:  DATA 74,20
00326:  DATA 66,69
00328:  DATA 6E,64
0032A:  DATA 20,53
0032C:  DATA 46,44
0032E:  DATA 0D,0A
00330:  DATA 00,00
00332:  DATA 09,2D
00334:  DATA 3E,20
00336:  DATA 49,6E
00338:  DATA 76,61
0033A:  DATA 6C,69
0033C:  DATA 64,20
0033E:  DATA 46,72
00340:  DATA 61,6D
00342:  DATA 65,20
00344:  DATA 49,44
00346:  DATA 20,72
00348:  DATA 65,63
0034A:  DATA 65,69
0034C:  DATA 76,65
0034E:  DATA 64,3A
00350:  DATA 20,25
00352:  DATA 58,0D
00354:  DATA 0A,00
00356:  DATA 09,2D
00358:  DATA 3E,20
0035A:  DATA 43,52
0035C:  DATA 43,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,09
0036A:  DATA 2D,3E
0036C:  DATA 20,72
0036E:  DATA 65,63
00370:  DATA 65,69
00372:  DATA 76,65
00374:  DATA 64,20
00376:  DATA 43,52
00378:  DATA 43,3A
0037A:  DATA 20,25
0037C:  DATA 58,0D
0037E:  DATA 0A,00
00380:  DATA 09,09
00382:  DATA 20,20
00384:  DATA 20,63
00386:  DATA 6F,6C
00388:  DATA 6C,65
0038A:  DATA 63,74
0038C:  DATA 20,43
0038E:  DATA 52,43
00390:  DATA 20,3A
00392:  DATA 20,25
00394:  DATA 58,0D
00396:  DATA 0A,00
00398:  DATA 09,2D
0039A:  DATA 3E,20
0039C:  DATA 49,6E
0039E:  DATA 76,61
003A0:  DATA 6C,69
003A2:  DATA 64,20
003A4:  DATA 64,65
003A6:  DATA 76,69
003A8:  DATA 63,65
003AA:  DATA 20,49
003AC:  DATA 44,20
003AE:  DATA 72,65
003B0:  DATA 63,65
003B2:  DATA 69,76
003B4:  DATA 65,64
003B6:  DATA 0D,0A
003B8:  DATA 00,00
003BA:  DATA 09,09
003BC:  DATA 2D,3E
003BE:  DATA 20,72
003C0:  DATA 65,63
003C2:  DATA 65,69
003C4:  DATA 76,65
003C6:  DATA 64,3A
003C8:  DATA 20,20
003CA:  DATA 20,20
003CC:  DATA 20,25
003CE:  DATA 58,0D
003D0:  DATA 0A,00
003D2:  DATA 09,09
003D4:  DATA 20,20
003D6:  DATA 20,4D
003D8:  DATA 79,20
003DA:  DATA 64,65
003DC:  DATA 76,69
003DE:  DATA 63,65
003E0:  DATA 20,49
003E2:  DATA 44,3A
003E4:  DATA 20,25
003E6:  DATA 58,0D
003E8:  DATA 0A,00
003EA:  DATA 09,5B
003EC:  DATA 42,4F
003EE:  DATA 53,53
003F0:  DATA 5D,20
003F2:  DATA 3C,3C
003F4:  DATA 3C,20
003F6:  DATA 00,00
003F8:  DATA 53,74
003FA:  DATA 61,72
003FC:  DATA 74,20
003FE:  DATA 53,4D
00400:  DATA 46,20
00402:  DATA 75,73
00404:  DATA 69,6E
00406:  DATA 67,20
00408:  DATA 72,65
0040A:  DATA 71,65
0040C:  DATA 73,74
0040E:  DATA 20,73
00410:  DATA 65,61
00412:  DATA 71,75
00414:  DATA 65,6E
00416:  DATA 63,65
00418:  DATA 0D,0A
0041A:  DATA 00,00
0041C:  DATA 45,72
0041E:  DATA 72,6F
00420:  DATA 72,21
00422:  DATA 20,52
00424:  DATA 65,63
00426:  DATA 65,69
00428:  DATA 76,69
0042A:  DATA 6E,67
0042C:  DATA 20,63
0042E:  DATA 6F,6D
00430:  DATA 6D,61
00432:  DATA 6E,64
00434:  DATA 20,69
00436:  DATA 6E,63
00438:  DATA 6F,6E
0043A:  DATA 73,69
0043C:  DATA 73,74
0043E:  DATA 65,6E
00440:  DATA 74,20
00442:  DATA 77,69
00444:  DATA 74,68
00446:  DATA 20,74
00448:  DATA 68,65
0044A:  DATA 20,64
0044C:  DATA 65,73
0044E:  DATA 69,67
00450:  DATA 6E,0D
00452:  DATA 0A,00
00454:  DATA 53,4D
00456:  DATA 46,20
00458:  DATA 75,73
0045A:  DATA 65,20
0045C:  DATA 72,65
0045E:  DATA 71,75
00460:  DATA 65,73
00462:  DATA 74,20
00464:  DATA 61,6C
00466:  DATA 6C,6F
00468:  DATA 77,65
0046A:  DATA 64,0D
0046C:  DATA 0A,00
0046E:  DATA 53,4D
00470:  DATA 46,20
00472:  DATA 75,73
00474:  DATA 65,20
00476:  DATA 72,65
00478:  DATA 71,75
0047A:  DATA 65,73
0047C:  DATA 74,20
0047E:  DATA 64,65
00480:  DATA 6E,79
00482:  DATA 65,64
00484:  DATA 0D,0A
00486:  DATA 00,00
00488:  DATA 52,65
0048A:  DATA 74,72
0048C:  DATA 79,20
0048E:  DATA 72,65
00490:  DATA 71,75
00492:  DATA 65,73
00494:  DATA 74,20
00496:  DATA 74,6F
00498:  DATA 20,42
0049A:  DATA 4F,53
0049C:  DATA 53,20
0049E:  DATA 50,49
004A0:  DATA 43,0D
004A2:  DATA 0A,00
004A4:  DATA 45,72
004A6:  DATA 72,6F
004A8:  DATA 72,21
004AA:  DATA 20,52
004AC:  DATA 65,63
004AE:  DATA 65,69
004B0:  DATA 76,69
004B2:  DATA 6E,67
004B4:  DATA 20,63
004B6:  DATA 6F,6D
004B8:  DATA 6D,61
004BA:  DATA 6E,64
004BC:  DATA 20,69
004BE:  DATA 6E,63
004C0:  DATA 6F,6E
004C2:  DATA 73,69
004C4:  DATA 73,74
004C6:  DATA 65,6E
004C8:  DATA 74,20
004CA:  DATA 77,69
004CC:  DATA 74,68
004CE:  DATA 20,74
004D0:  DATA 68,65
004D2:  DATA 20,64
004D4:  DATA 65,73
004D6:  DATA 69,67
004D8:  DATA 6E,0D
004DA:  DATA 0A,00
004DC:  DATA 45,6E
004DE:  DATA 64,20
004E0:  DATA 53,4D
004E2:  DATA 46,20
004E4:  DATA 75,73
004E6:  DATA 69,6E
004E8:  DATA 67,20
004EA:  DATA 72,65
004EC:  DATA 71,65
004EE:  DATA 73,74
004F0:  DATA 20,73
004F2:  DATA 65,61
004F4:  DATA 71,75
004F6:  DATA 65,6E
004F8:  DATA 63,65
004FA:  DATA 0D,0A
004FC:  DATA 00,00
004FE:  DATA 49,4F
00500:  DATA 20,49
00502:  DATA 6E,69
00504:  DATA 74,69
00506:  DATA 61,6C
00508:  DATA 69,7A
0050A:  DATA 65,0D
0050C:  DATA 0A,00
0050E:  DATA 09,43
00510:  DATA 6F,6D
00512:  DATA 70,6C
00514:  DATA 65,74
00516:  DATA 65,0D
00518:  DATA 0A,00
0051A:  DATA 41,44
0051C:  DATA 43,20
0051E:  DATA 49,6E
00520:  DATA 69,74
00522:  DATA 69,61
00524:  DATA 6C,69
00526:  DATA 7A,65
00528:  DATA 0D,0A
0052A:  DATA 00,00
0052C:  DATA 09,43
0052E:  DATA 6F,6D
00530:  DATA 70,6C
00532:  DATA 65,74
00534:  DATA 65,0D
00536:  DATA 0A,00
00538:  DATA 53,74
0053A:  DATA 61,72
0053C:  DATA 74,20
0053E:  DATA 53,57
00540:  DATA 45,45
00542:  DATA 50,0D
00544:  DATA 0A,00
00546:  DATA 09,53
00548:  DATA 77,65
0054A:  DATA 65,70
0054C:  DATA 20,73
0054E:  DATA 74,65
00550:  DATA 70,20
00552:  DATA 3A,20
00554:  DATA 25,75
00556:  DATA 0D,0A
00558:  DATA 00,00
0055A:  DATA 53,74
0055C:  DATA 61,72
0055E:  DATA 74,20
00560:  DATA 54,45
00562:  DATA 53,54
00564:  DATA 20,53
00566:  DATA 57,45
00568:  DATA 45,50
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 73,74
00570:  DATA 65,70
00572:  DATA 2C,20
00574:  DATA 76,6F
00576:  DATA 6C,74
00578:  DATA 61,67
0057A:  DATA 65,2C
0057C:  DATA 20,63
0057E:  DATA 75,72
00580:  DATA 72,65
00582:  DATA 6E,74
00584:  DATA 0D,0A
00586:  DATA 00,00
00588:  DATA 53,74
0058A:  DATA 61,72
0058C:  DATA 74,20
0058E:  DATA 41,44
00590:  DATA 43,20
00592:  DATA 54,45
00594:  DATA 53,54
00596:  DATA 0D,0A
00598:  DATA 00,00
0059A:  DATA 41,44
0059C:  DATA 43,20
0059E:  DATA 56,6F
005A0:  DATA 6C,74
005A2:  DATA 61,67
005A4:  DATA 65,3A
005A6:  DATA 20,25
005A8:  DATA 30,34
005AA:  DATA 4C,58
005AC:  DATA 0D,0A
005AE:  DATA 00,00
005B0:  DATA 41,44
005B2:  DATA 43,20
005B4:  DATA 43,75
005B6:  DATA 72,72
005B8:  DATA 65,6E
005BA:  DATA 74,3A
005BC:  DATA 20,25
005BE:  DATA 30,34
005C0:  DATA 4C,58
005C2:  DATA 0D,0A
005C4:  DATA 00,00
005C6:  DATA 41,44
005C8:  DATA 43,20
005CA:  DATA 43,49
005CC:  DATA 47,53
005CE:  DATA 31,20
005D0:  DATA 41,6D
005D2:  DATA 70,3A
005D4:  DATA 20,25
005D6:  DATA 30,34
005D8:  DATA 4C,58
005DA:  DATA 0D,0A
005DC:  DATA 00,00
005DE:  DATA 41,44
005E0:  DATA 43,20
005E2:  DATA 43,49
005E4:  DATA 47,53
005E6:  DATA 31,20
005E8:  DATA 56,52
005EA:  DATA 45,46
005EC:  DATA 3A,20
005EE:  DATA 25,30
005F0:  DATA 34,4C
005F2:  DATA 58,0D
005F4:  DATA 0A,00
005F6:  DATA 53,74
005F8:  DATA 61,72
005FA:  DATA 74,20
005FC:  DATA 53,57
005FE:  DATA 45,45
00600:  DATA 50,20
00602:  DATA 32,70
00604:  DATA 6F,72
00606:  DATA 74,73
00608:  DATA 0D,0A
0060A:  DATA 00,00
0060C:  DATA 09,53
0060E:  DATA 77,65
00610:  DATA 65,70
00612:  DATA 20,73
00614:  DATA 74,65
00616:  DATA 70,20
00618:  DATA 3A,20
0061A:  DATA 25,75
0061C:  DATA 0D,0A
0061E:  DATA 00,00
00620:  DATA 45,4E
00622:  DATA 44,20
00624:  DATA 53,57
00626:  DATA 45,45
00628:  DATA 50,20
0062A:  DATA 32,70
0062C:  DATA 6F,72
0062E:  DATA 74,0D
00630:  DATA 0A,00
00632:  DATA 53,74
00634:  DATA 61,72
00636:  DATA 74,20
00638:  DATA 43,49
0063A:  DATA 47,53
0063C:  DATA 20,64
0063E:  DATA 61,74
00640:  DATA 61,20
00642:  DATA 63,6F
00644:  DATA 6E,76
00646:  DATA 65,72
00648:  DATA 73,69
0064A:  DATA 6F,6E
0064C:  DATA 0D,0A
0064E:  DATA 00,00
00650:  DATA 53,74
00652:  DATA 61,72
00654:  DATA 74,20
00656:  DATA 53,57
00658:  DATA 45,45
0065A:  DATA 50,20
0065C:  DATA 50,4F
0065E:  DATA 52,54
00660:  DATA 31,0D
00662:  DATA 0A,00
00664:  DATA 09,53
00666:  DATA 77,65
00668:  DATA 65,70
0066A:  DATA 20,73
0066C:  DATA 74,65
0066E:  DATA 70,20
00670:  DATA 3A,20
00672:  DATA 25,75
00674:  DATA 0D,0A
00676:  DATA 00,00
00678:  DATA 45,4E
0067A:  DATA 44,20
0067C:  DATA 53,57
0067E:  DATA 45,45
00680:  DATA 50,20
00682:  DATA 50,4F
00684:  DATA 52,54
00686:  DATA 31,0D
00688:  DATA 0A,00
0068A:  DATA 53,74
0068C:  DATA 61,72
0068E:  DATA 74,20
00690:  DATA 43,49
00692:  DATA 47,53
00694:  DATA 20,64
00696:  DATA 61,74
00698:  DATA 61,20
0069A:  DATA 63,6F
0069C:  DATA 6E,76
0069E:  DATA 65,72
006A0:  DATA 73,69
006A2:  DATA 6F,6E
006A4:  DATA 0D,0A
006A6:  DATA 00,00
006A8:  DATA 45,6E
006AA:  DATA 64,20
006AC:  DATA 43,49
006AE:  DATA 47,53
006B0:  DATA 20,64
006B2:  DATA 61,74
006B4:  DATA 61,20
006B6:  DATA 63,6F
006B8:  DATA 6E,76
006BA:  DATA 65,72
006BC:  DATA 73,69
006BE:  DATA 6F,6E
006C0:  DATA 0D,0A
006C2:  DATA 00,00
006C4:  DATA 53,74
006C6:  DATA 61,72
006C8:  DATA 74,20
006CA:  DATA 53,57
006CC:  DATA 45,45
006CE:  DATA 50,20
006D0:  DATA 50,4F
006D2:  DATA 52,54
006D4:  DATA 32,0D
006D6:  DATA 0A,00
006D8:  DATA 09,53
006DA:  DATA 77,65
006DC:  DATA 65,70
006DE:  DATA 20,73
006E0:  DATA 74,65
006E2:  DATA 70,20
006E4:  DATA 3A,20
006E6:  DATA 25,75
006E8:  DATA 0D,0A
006EA:  DATA 00,00
006EC:  DATA 45,4E
006EE:  DATA 44,20
006F0:  DATA 53,57
006F2:  DATA 45,45
006F4:  DATA 50,20
006F6:  DATA 50,4F
006F8:  DATA 52,54
006FA:  DATA 32,0D
006FC:  DATA 0A,00
006FE:  DATA 53,74
00700:  DATA 61,72
00702:  DATA 74,20
00704:  DATA 43,49
00706:  DATA 47,53
00708:  DATA 20,64
0070A:  DATA 61,74
0070C:  DATA 61,20
0070E:  DATA 63,6F
00710:  DATA 6E,76
00712:  DATA 65,72
00714:  DATA 73,69
00716:  DATA 6F,6E
00718:  DATA 0D,0A
0071A:  DATA 00,00
0071C:  DATA 4D,69
0071E:  DATA 73,73
00720:  DATA 69,6F
00722:  DATA 6E,20
00724:  DATA 46,6C
00726:  DATA 61,73
00728:  DATA 68,20
0072A:  DATA 69,73
0072C:  DATA 20,6E
0072E:  DATA 6F,74
00730:  DATA 20,63
00732:  DATA 6F,6E
00734:  DATA 6E,65
00736:  DATA 63,74
00738:  DATA 65,64
0073A:  DATA 0D,0A
0073C:  DATA 00,00
0073E:  DATA 43,52
00740:  DATA 43,20
00742:  DATA 76,65
00744:  DATA 72,69
00746:  DATA 66,69
00748:  DATA 63,61
0074A:  DATA 74,69
0074C:  DATA 6F,6E
0074E:  DATA 20,70
00750:  DATA 61,73
00752:  DATA 73,65
00754:  DATA 64,20
00756:  DATA 6F,6E
00758:  DATA 20,61
0075A:  DATA 74,74
0075C:  DATA 65,6D
0075E:  DATA 70,74
00760:  DATA 20,25
00762:  DATA 64,0D
00764:  DATA 0A,00
00766:  DATA 43,52
00768:  DATA 43,20
0076A:  DATA 76,65
0076C:  DATA 72,69
0076E:  DATA 66,69
00770:  DATA 63,61
00772:  DATA 74,69
00774:  DATA 6F,6E
00776:  DATA 20,70
00778:  DATA 61,73
0077A:  DATA 73,65
0077C:  DATA 64,20
0077E:  DATA 6F,6E
00780:  DATA 20,61
00782:  DATA 74,74
00784:  DATA 65,6D
00786:  DATA 70,74
00788:  DATA 20,25
0078A:  DATA 64,0D
0078C:  DATA 0A,00
0078E:  DATA 45,72
00790:  DATA 72,6F
00792:  DATA 72,3A
00794:  DATA 20,43
00796:  DATA 52,43
00798:  DATA 20,76
0079A:  DATA 65,72
0079C:  DATA 69,66
0079E:  DATA 69,63
007A0:  DATA 61,74
007A2:  DATA 69,6F
007A4:  DATA 6E,20
007A6:  DATA 66,61
007A8:  DATA 69,6C
007AA:  DATA 65,64
007AC:  DATA 20,61
007AE:  DATA 66,74
007B0:  DATA 65,72
007B2:  DATA 20,25
007B4:  DATA 64,20
007B6:  DATA 61,74
007B8:  DATA 74,65
007BA:  DATA 6D,70
007BC:  DATA 74,73
007BE:  DATA 0D,0A
007C0:  DATA 00,00
007C2:  DATA 0D,0A
007C4:  DATA 5F,5F
007C6:  DATA 5F,5F
007C8:  DATA 5F,5F
007CA:  DATA 5F,5F
007CC:  DATA 5F,5F
007CE:  DATA 5F,5F
007D0:  DATA 5F,5F
007D2:  DATA 5F,5F
007D4:  DATA 5F,5F
007D6:  DATA 5F,5F
007D8:  DATA 0D,0A
007DA:  DATA 00,00
007DC:  DATA 5F,5F
007DE:  DATA 5F,53
007E0:  DATA 74,61
007E2:  DATA 72,74
007E4:  DATA 20,63
007E6:  DATA 6F,70
007E8:  DATA 79,5F
007EA:  DATA 64,61
007EC:  DATA 74,61
007EE:  DATA 5F,5F
007F0:  DATA 0D,0A
007F2:  DATA 00,00
007F4:  DATA 49,6E
007F6:  DATA 20,53
007F8:  DATA 4D,46
007FA:  DATA 20,6D
007FC:  DATA 69,73
007FE:  DATA 73,69
00800:  DATA 6F,6E
00802:  DATA 20,64
00804:  DATA 61,74
00806:  DATA 61,20
00808:  DATA 73,74
0080A:  DATA 61,72
0080C:  DATA 74,20
0080E:  DATA 20,20
00810:  DATA 61,64
00812:  DATA 64,72
00814:  DATA 65,73
00816:  DATA 73,3A
00818:  DATA 20,25
0081A:  DATA 4C,58
0081C:  DATA 0D,0A
0081E:  DATA 00,00
00820:  DATA 49,6E
00822:  DATA 20,53
00824:  DATA 4D,46
00826:  DATA 20,6D
00828:  DATA 69,73
0082A:  DATA 73,69
0082C:  DATA 6F,6E
0082E:  DATA 20,64
00830:  DATA 61,74
00832:  DATA 61,20
00834:  DATA 65,6E
00836:  DATA 64,20
00838:  DATA 20,20
0083A:  DATA 20,20
0083C:  DATA 61,64
0083E:  DATA 64,72
00840:  DATA 65,73
00842:  DATA 73,3A
00844:  DATA 20,25
00846:  DATA 4C,58
00848:  DATA 0D,0A
0084A:  DATA 00,00
0084C:  DATA 49,6E
0084E:  DATA 20,4D
00850:  DATA 49,53
00852:  DATA 20,46
00854:  DATA 4D,20
00856:  DATA 57,72
00858:  DATA 69,74
0085A:  DATA 65,20
0085C:  DATA 73,6F
0085E:  DATA 75,72
00860:  DATA 63,65
00862:  DATA 20,64
00864:  DATA 61,74
00866:  DATA 61,20
00868:  DATA 61,64
0086A:  DATA 64,72
0086C:  DATA 65,73
0086E:  DATA 73,3A
00870:  DATA 20,25
00872:  DATA 4C,58
00874:  DATA 0D,0A
00876:  DATA 00,00
00878:  DATA 49,6E
0087A:  DATA 20,4D
0087C:  DATA 49,53
0087E:  DATA 20,46
00880:  DATA 4D,20
00882:  DATA 57,72
00884:  DATA 69,74
00886:  DATA 65,20
00888:  DATA 64,61
0088A:  DATA 74,61
0088C:  DATA 20,73
0088E:  DATA 69,7A
00890:  DATA 65,20
00892:  DATA 20,20
00894:  DATA 20,20
00896:  DATA 20,20
00898:  DATA 20,20
0089A:  DATA 20,3A
0089C:  DATA 20,25
0089E:  DATA 6C,75
008A0:  DATA 20,28
008A2:  DATA 30,78
008A4:  DATA 25,6C
008A6:  DATA 78,29
008A8:  DATA 0D,0A
008AA:  DATA 0D,0A
008AC:  DATA 00,00
008AE:  DATA 45,72
008B0:  DATA 72,6F
008B2:  DATA 72,3A
008B4:  DATA 20,4D
008B6:  DATA 49,53
008B8:  DATA 20,46
008BA:  DATA 4D,20
008BC:  DATA 69,73
008BE:  DATA 20,6E
008C0:  DATA 6F,74
008C2:  DATA 20,63
008C4:  DATA 6F,6E
008C6:  DATA 6E,65
008C8:  DATA 63,74
008CA:  DATA 65,64
008CC:  DATA 0D,0A
008CE:  DATA 00,00
008D0:  DATA 45,72
008D2:  DATA 72,6F
008D4:  DATA 72,3A
008D6:  DATA 20,53
008D8:  DATA 4D,46
008DA:  DATA 20,69
008DC:  DATA 73,20
008DE:  DATA 6E,6F
008E0:  DATA 74,20
008E2:  DATA 63,6F
008E4:  DATA 6E,6E
008E6:  DATA 65,63
008E8:  DATA 74,65
008EA:  DATA 64,0D
008EC:  DATA 0A,00
008EE:  DATA 53,69
008F0:  DATA 7A,65
008F2:  DATA 20,61
008F4:  DATA 72,65
008F6:  DATA 61,20
008F8:  DATA 72,65
008FA:  DATA 61,64
008FC:  DATA 0D,0A
008FE:  DATA 00,00
00900:  DATA 75,73
00902:  DATA 65,64
00904:  DATA 5F,73
00906:  DATA 69,7A
00908:  DATA 65,20
0090A:  DATA 3D,20
0090C:  DATA 25,6C
0090E:  DATA 64,20
00910:  DATA 28,73
00912:  DATA 72,63
00914:  DATA 20,30
00916:  DATA 78,25
00918:  DATA 30,38
0091A:  DATA 4C,58
0091C:  DATA 29,0D
0091E:  DATA 0A,00
00920:  DATA 6C,6F
00922:  DATA 6F,70
00924:  DATA 20,63
00926:  DATA 6F,75
00928:  DATA 6E,74
0092A:  DATA 3D,20
0092C:  DATA 25,64
0092E:  DATA 20,20
00930:  DATA 28,73
00932:  DATA 72,63
00934:  DATA 20,30
00936:  DATA 78,25
00938:  DATA 30,38
0093A:  DATA 4C,58
0093C:  DATA 29,0D
0093E:  DATA 0A,0D
00940:  DATA 0A,00
00942:  DATA 57,72
00944:  DATA 61,70
00946:  DATA 20,74
00948:  DATA 72,69
0094A:  DATA 67,67
0094C:  DATA 65,72
0094E:  DATA 65,64
00950:  DATA 3A,20
00952:  DATA 52,65
00954:  DATA 73,65
00956:  DATA 74,74
00958:  DATA 69,6E
0095A:  DATA 67,20
0095C:  DATA 64,61
0095E:  DATA 74,61
00960:  DATA 5F,77
00962:  DATA 72,69
00964:  DATA 74,65
00966:  DATA 5F,61
00968:  DATA 64,64
0096A:  DATA 72,20
0096C:  DATA 74,6F
0096E:  DATA 20,73
00970:  DATA 74,61
00972:  DATA 72,74
00974:  DATA 0D,0A
00976:  DATA 00,00
00978:  DATA 75,73
0097A:  DATA 65,64
0097C:  DATA 5F,73
0097E:  DATA 69,7A
00980:  DATA 65,20
00982:  DATA 3D,20
00984:  DATA 25,6C
00986:  DATA 64,0D
00988:  DATA 0A,00
0098A:  DATA 6C,6F
0098C:  DATA 6F,70
0098E:  DATA 5F,63
00990:  DATA 6F,75
00992:  DATA 6E,74
00994:  DATA 20,3D
00996:  DATA 20,25
00998:  DATA 75,0D
0099A:  DATA 0A,0D
0099C:  DATA 0A,00
0099E:  DATA 0D,0A
009A0:  DATA 5F,5F
009A2:  DATA 5F,45
009A4:  DATA 6E,64
009A6:  DATA 20,63
009A8:  DATA 6F,70
009AA:  DATA 79,5F
009AC:  DATA 64,61
009AE:  DATA 74,61
009B0:  DATA 5F,5F
009B2:  DATA 5F,5F
009B4:  DATA 0D,0A
009B6:  DATA 00,00
009B8:  DATA 5F,5F
009BA:  DATA 5F,5F
009BC:  DATA 5F,5F
009BE:  DATA 5F,5F
009C0:  DATA 5F,5F
009C2:  DATA 5F,5F
009C4:  DATA 5F,5F
009C6:  DATA 5F,5F
009C8:  DATA 5F,5F
009CA:  DATA 5F,5F
009CC:  DATA 0D,0A
009CE:  DATA 0D,0A
009D0:  DATA 00,00
009D2:  DATA 0D,0A
009D4:  DATA 5F,5F
009D6:  DATA 5F,5F
009D8:  DATA 5F,5F
009DA:  DATA 5F,5F
009DC:  DATA 5F,5F
009DE:  DATA 5F,5F
009E0:  DATA 5F,5F
009E2:  DATA 5F,5F
009E4:  DATA 5F,5F
009E6:  DATA 5F,5F
009E8:  DATA 0D,0A
009EA:  DATA 00,00
009EC:  DATA 5F,5F
009EE:  DATA 5F,53
009F0:  DATA 74,61
009F2:  DATA 72,74
009F4:  DATA 20,53
009F6:  DATA 4D,46
009F8:  DATA 20,52
009FA:  DATA 65,61
009FC:  DATA 64,5F
009FE:  DATA 5F,5F
00A00:  DATA 5F,0D
00A02:  DATA 0A,00
00A04:  DATA 49,6E
00A06:  DATA 20,53
00A08:  DATA 4D,46
00A0A:  DATA 20,52
00A0C:  DATA 65,61
00A0E:  DATA 64,20
00A10:  DATA 73,6F
00A12:  DATA 75,72
00A14:  DATA 63,65
00A16:  DATA 20,64
00A18:  DATA 61,74
00A1A:  DATA 61,20
00A1C:  DATA 61,64
00A1E:  DATA 64,72
00A20:  DATA 65,73
00A22:  DATA 73,3A
00A24:  DATA 20,25
00A26:  DATA 4C,58
00A28:  DATA 0D,0A
00A2A:  DATA 00,00
00A2C:  DATA 49,6E
00A2E:  DATA 20,53
00A30:  DATA 4D,46
00A32:  DATA 20,52
00A34:  DATA 65,61
00A36:  DATA 64,20
00A38:  DATA 64,61
00A3A:  DATA 74,61
00A3C:  DATA 20,73
00A3E:  DATA 69,7A
00A40:  DATA 65,20
00A42:  DATA 20,20
00A44:  DATA 20,20
00A46:  DATA 20,20
00A48:  DATA 20,20
00A4A:  DATA 20,3A
00A4C:  DATA 20,25
00A4E:  DATA 6C,75
00A50:  DATA 20,28
00A52:  DATA 30,78
00A54:  DATA 25,6C
00A56:  DATA 78,29
00A58:  DATA 0D,0A
00A5A:  DATA 0D,0A
00A5C:  DATA 00,00
00A5E:  DATA 45,72
00A60:  DATA 72,6F
00A62:  DATA 72,3A
00A64:  DATA 20,53
00A66:  DATA 4D,46
00A68:  DATA 20,69
00A6A:  DATA 73,20
00A6C:  DATA 6E,6F
00A6E:  DATA 74,20
00A70:  DATA 63,6F
00A72:  DATA 6E,6E
00A74:  DATA 65,63
00A76:  DATA 74,65
00A78:  DATA 64,0D
00A7A:  DATA 0A,00
00A7C:  DATA 52,45
00A7E:  DATA 41,44
00A80:  DATA 20,44
00A82:  DATA 41,54
00A84:  DATA 41,20
00A86:  DATA 46,52
00A88:  DATA 4F,4D
00A8A:  DATA 20,53
00A8C:  DATA 4D,46
00A8E:  DATA 2E,2E
00A90:  DATA 2E,0D
00A92:  DATA 0A,00
00A94:  DATA 0D,0A
00A96:  DATA 5F,5F
00A98:  DATA 5F,45
00A9A:  DATA 6E,64
00A9C:  DATA 20,53
00A9E:  DATA 4D,46
00AA0:  DATA 20,52
00AA2:  DATA 65,61
00AA4:  DATA 64,5F
00AA6:  DATA 5F,5F
00AA8:  DATA 5F,0D
00AAA:  DATA 0A,00
00AAC:  DATA 5F,5F
00AAE:  DATA 5F,5F
00AB0:  DATA 5F,5F
00AB2:  DATA 5F,5F
00AB4:  DATA 5F,5F
00AB6:  DATA 5F,5F
00AB8:  DATA 5F,5F
00ABA:  DATA 5F,5F
00ABC:  DATA 5F,5F
00ABE:  DATA 5F,5F
00AC0:  DATA 0D,0A
00AC2:  DATA 0D,0A
00AC4:  DATA 00,00
00AC6:  DATA 0D,0A
00AC8:  DATA 5F,5F
00ACA:  DATA 5F,5F
00ACC:  DATA 5F,5F
00ACE:  DATA 5F,5F
00AD0:  DATA 5F,5F
00AD2:  DATA 5F,5F
00AD4:  DATA 5F,5F
00AD6:  DATA 5F,5F
00AD8:  DATA 5F,5F
00ADA:  DATA 5F,5F
00ADC:  DATA 0D,0A
00ADE:  DATA 00,00
00AE0:  DATA 5F,5F
00AE2:  DATA 5F,53
00AE4:  DATA 74,61
00AE6:  DATA 72,74
00AE8:  DATA 20,73
00AEA:  DATA 6D,66
00AEC:  DATA 5F,65
00AEE:  DATA 72,61
00AF0:  DATA 73,65
00AF2:  DATA 5F,5F
00AF4:  DATA 5F,5F
00AF6:  DATA 0D,0A
00AF8:  DATA 00,00
00AFA:  DATA 49,6E
00AFC:  DATA 20,53
00AFE:  DATA 4D,46
00B00:  DATA 20,6D
00B02:  DATA 69,73
00B04:  DATA 73,69
00B06:  DATA 6F,6E
00B08:  DATA 20,64
00B0A:  DATA 61,74
00B0C:  DATA 61,20
00B0E:  DATA 73,74
00B10:  DATA 61,72
00B12:  DATA 74,20
00B14:  DATA 20,20
00B16:  DATA 61,64
00B18:  DATA 64,72
00B1A:  DATA 65,73
00B1C:  DATA 73,3A
00B1E:  DATA 20,25
00B20:  DATA 4C,58
00B22:  DATA 0D,0A
00B24:  DATA 00,00
00B26:  DATA 49,6E
00B28:  DATA 20,53
00B2A:  DATA 4D,46
00B2C:  DATA 20,6D
00B2E:  DATA 69,73
00B30:  DATA 73,69
00B32:  DATA 6F,6E
00B34:  DATA 20,64
00B36:  DATA 61,74
00B38:  DATA 61,20
00B3A:  DATA 65,6E
00B3C:  DATA 64,20
00B3E:  DATA 20,20
00B40:  DATA 20,20
00B42:  DATA 61,64
00B44:  DATA 64,72
00B46:  DATA 65,73
00B48:  DATA 73,3A
00B4A:  DATA 20,25
00B4C:  DATA 4C,58
00B4E:  DATA 0D,0A
00B50:  DATA 00,00
00B52:  DATA 49,6E
00B54:  DATA 20,53
00B56:  DATA 4D,46
00B58:  DATA 20,45
00B5A:  DATA 72,61
00B5C:  DATA 73,65
00B5E:  DATA 20,73
00B60:  DATA 6F,75
00B62:  DATA 72,63
00B64:  DATA 65,20
00B66:  DATA 64,61
00B68:  DATA 74,61
00B6A:  DATA 20,61
00B6C:  DATA 64,64
00B6E:  DATA 72,65
00B70:  DATA 73,73
00B72:  DATA 3A,20
00B74:  DATA 25,4C
00B76:  DATA 58,0D
00B78:  DATA 0A,00
00B7A:  DATA 49,6E
00B7C:  DATA 20,53
00B7E:  DATA 4D,46
00B80:  DATA 20,45
00B82:  DATA 72,61
00B84:  DATA 73,65
00B86:  DATA 20,64
00B88:  DATA 61,74
00B8A:  DATA 61,20
00B8C:  DATA 73,69
00B8E:  DATA 7A,65
00B90:  DATA 20,20
00B92:  DATA 20,20
00B94:  DATA 20,20
00B96:  DATA 20,20
00B98:  DATA 20,20
00B9A:  DATA 3A,20
00B9C:  DATA 25,6C
00B9E:  DATA 75,20
00BA0:  DATA 28,30
00BA2:  DATA 78,25
00BA4:  DATA 6C,78
00BA6:  DATA 29,0D
00BA8:  DATA 0A,0D
00BAA:  DATA 0A,00
00BAC:  DATA 45,72
00BAE:  DATA 72,6F
00BB0:  DATA 72,3A
00BB2:  DATA 20,53
00BB4:  DATA 4D,46
00BB6:  DATA 20,69
00BB8:  DATA 73,20
00BBA:  DATA 6E,6F
00BBC:  DATA 74,20
00BBE:  DATA 63,6F
00BC0:  DATA 6E,6E
00BC2:  DATA 65,63
00BC4:  DATA 74,65
00BC6:  DATA 64,0D
00BC8:  DATA 0A,00
00BCA:  DATA 45,72
00BCC:  DATA 72,6F
00BCE:  DATA 72,3A
00BD0:  DATA 20,45
00BD2:  DATA 72,61
00BD4:  DATA 73,65
00BD6:  DATA 20,73
00BD8:  DATA 6F,75
00BDA:  DATA 72,63
00BDC:  DATA 65,20
00BDE:  DATA 61,64
00BE0:  DATA 64,72
00BE2:  DATA 65,73
00BE4:  DATA 73,20
00BE6:  DATA 30,78
00BE8:  DATA 25,4C
00BEA:  DATA 58,20
00BEC:  DATA 69,73
00BEE:  DATA 20,6F
00BF0:  DATA 75,74
00BF2:  DATA 73,69
00BF4:  DATA 64,65
00BF6:  DATA 20,6D
00BF8:  DATA 69,73
00BFA:  DATA 73,69
00BFC:  DATA 6F,6E
00BFE:  DATA 20,72
00C00:  DATA 61,6E
00C02:  DATA 67,65
00C04:  DATA 20,5B
00C06:  DATA 30,78
00C08:  DATA 25,4C
00C0A:  DATA 58,20
00C0C:  DATA 2D,20
00C0E:  DATA 30,78
00C10:  DATA 25,4C
00C12:  DATA 58,5D
00C14:  DATA 0D,0A
00C16:  DATA 00,00
00C18:  DATA 45,72
00C1A:  DATA 72,6F
00C1C:  DATA 72,3A
00C1E:  DATA 20,45
00C20:  DATA 72,61
00C22:  DATA 73,65
00C24:  DATA 20,6F
00C26:  DATA 70,65
00C28:  DATA 72,61
00C2A:  DATA 74,69
00C2C:  DATA 6F,6E
00C2E:  DATA 20,77
00C30:  DATA 6F,75
00C32:  DATA 6C,64
00C34:  DATA 20,65
00C36:  DATA 78,63
00C38:  DATA 65,65
00C3A:  DATA 64,20
00C3C:  DATA 6D,69
00C3E:  DATA 73,73
00C40:  DATA 69,6F
00C42:  DATA 6E,20
00C44:  DATA 65,6E
00C46:  DATA 64,20
00C48:  DATA 61,64
00C4A:  DATA 64,72
00C4C:  DATA 65,73
00C4E:  DATA 73,20
00C50:  DATA 30,78
00C52:  DATA 25,4C
00C54:  DATA 58,0D
00C56:  DATA 0A,00
00C58:  DATA 4C,69
00C5A:  DATA 6D,69
00C5C:  DATA 74,69
00C5E:  DATA 6E,67
00C60:  DATA 20,65
00C62:  DATA 72,61
00C64:  DATA 73,65
00C66:  DATA 20,73
00C68:  DATA 69,7A
00C6A:  DATA 65,20
00C6C:  DATA 74,6F
00C6E:  DATA 20,73
00C70:  DATA 74,61
00C72:  DATA 79,20
00C74:  DATA 77,69
00C76:  DATA 74,68
00C78:  DATA 69,6E
00C7A:  DATA 20,6D
00C7C:  DATA 69,73
00C7E:  DATA 73,69
00C80:  DATA 6F,6E
00C82:  DATA 20,62
00C84:  DATA 6F,75
00C86:  DATA 6E,64
00C88:  DATA 73,0D
00C8A:  DATA 0A,00
00C8C:  DATA 45,72
00C8E:  DATA 61,73
00C90:  DATA 65,20
00C92:  DATA 6F,70
00C94:  DATA 65,72
00C96:  DATA 61,74
00C98:  DATA 69,6F
00C9A:  DATA 6E,20
00C9C:  DATA 76,61
00C9E:  DATA 6C,69
00CA0:  DATA 64,61
00CA2:  DATA 74,65
00CA4:  DATA 64,20
00CA6:  DATA 77,69
00CA8:  DATA 74,68
00CAA:  DATA 69,6E
00CAC:  DATA 20,6D
00CAE:  DATA 69,73
00CB0:  DATA 73,69
00CB2:  DATA 6F,6E
00CB4:  DATA 20,72
00CB6:  DATA 61,6E
00CB8:  DATA 67,65
00CBA:  DATA 0D,0A
00CBC:  DATA 00,00
00CBE:  DATA 0D,0A
00CC0:  DATA 5F,5F
00CC2:  DATA 5F,45
00CC4:  DATA 6E,64
00CC6:  DATA 20,73
00CC8:  DATA 6D,66
00CCA:  DATA 5F,65
00CCC:  DATA 72,61
00CCE:  DATA 73,65
00CD0:  DATA 5F,5F
00CD2:  DATA 5F,5F
00CD4:  DATA 0D,0A
00CD6:  DATA 00,00
00CD8:  DATA 5F,5F
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,5F
00CDE:  DATA 5F,5F
00CE0:  DATA 5F,5F
00CE2:  DATA 5F,5F
00CE4:  DATA 5F,5F
00CE6:  DATA 5F,5F
00CE8:  DATA 5F,5F
00CEA:  DATA 5F,5F
00CEC:  DATA 0D,0A
00CEE:  DATA 0D,0A
00CF0:  DATA 00,00
00CF2:  DATA 45,72
00CF4:  DATA 72,6F
00CF6:  DATA 72,3A
00CF8:  DATA 20,55
00CFA:  DATA 6E,6B
00CFC:  DATA 6E,6F
00CFE:  DATA 77,6E
00D00:  DATA 20,6D
00D02:  DATA 69,73
00D04:  DATA 73,69
00D06:  DATA 6F,6E
00D08:  DATA 5F,69
00D0A:  DATA 64,3A
00D0C:  DATA 20,25
00D0E:  DATA 30,32
00D10:  DATA 58,0D
00D12:  DATA 0A,00
00D14:  DATA 55,70
00D16:  DATA 64,61
00D18:  DATA 74,65
00D1A:  DATA 64,20
00D1C:  DATA 70,61
00D1E:  DATA 72,74
00D20:  DATA 69,74
00D22:  DATA 69,6F
00D24:  DATA 6E,20
00D26:  DATA 66,6F
00D28:  DATA 72,20
00D2A:  DATA 6D,69
00D2C:  DATA 73,73
00D2E:  DATA 69,6F
00D30:  DATA 6E,5F
00D32:  DATA 69,64
00D34:  DATA 20,25
00D36:  DATA 30,32
00D38:  DATA 58,3A
00D3A:  DATA 20,75
00D3C:  DATA 73,65
00D3E:  DATA 64,5F
00D40:  DATA 73,69
00D42:  DATA 7A,65
00D44:  DATA 3D,25
00D46:  DATA 6C,64
00D48:  DATA 2C,20
00D4A:  DATA 6C,6F
00D4C:  DATA 6F,70
00D4E:  DATA 5F,63
00D50:  DATA 6F,75
00D52:  DATA 6E,74
00D54:  DATA 65,72
00D56:  DATA 3D,25
00D58:  DATA 6C,64
00D5A:  DATA 0D,0A
00D5C:  DATA 00,00
00D5E:  DATA 4D,49
00D60:  DATA 53,53
00D62:  DATA 49,4F
00D64:  DATA 4E,20
00D66:  DATA 46,4C
00D68:  DATA 41,53
00D6A:  DATA 48,20
00D6C:  DATA 49,6E
00D6E:  DATA 69,74
00D70:  DATA 69,61
00D72:  DATA 6C,69
00D74:  DATA 7A,65
00D76:  DATA 0D,0A
00D78:  DATA 00,00
00D7A:  DATA 09,5B
00D7C:  DATA 4D,49
00D7E:  DATA 53,20
00D80:  DATA 46,4D
00D82:  DATA 5D,52
00D84:  DATA 45,41
00D86:  DATA 44,20
00D88:  DATA 49,44
00D8A:  DATA 3A,00
00D8C:  DATA 09,5B
00D8E:  DATA 53,4D
00D90:  DATA 46,5D
00D92:  DATA 09,52
00D94:  DATA 45,41
00D96:  DATA 44,20
00D98:  DATA 49,44
00D9A:  DATA 3A,00
00D9C:  DATA 09,5B
00D9E:  DATA 53,4D
00DA0:  DATA 46,5D
00DA2:  DATA 09,63
00DA4:  DATA 6F,6E
00DA6:  DATA 6E,65
00DA8:  DATA 63,74
00DAA:  DATA 20,65
00DAC:  DATA 72,72
00DAE:  DATA 6F,72
00DB0:  DATA 21,0D
00DB2:  DATA 0A,00
00DB4:  DATA 09,5B
00DB6:  DATA 53,4D
00DB8:  DATA 46,5D
00DBA:  DATA 09,69
00DBC:  DATA 73,20
00DBE:  DATA 63,6F
00DC0:  DATA 6E,6E
00DC2:  DATA 65,63
00DC4:  DATA 74,65
00DC6:  DATA 64,0D
00DC8:  DATA 0A,00
00DCA:  DATA 09,5B
00DCC:  DATA 4D,49
00DCE:  DATA 53,20
00DD0:  DATA 46,4D
00DD2:  DATA 5D,63
00DD4:  DATA 6F,6E
00DD6:  DATA 6E,65
00DD8:  DATA 63,74
00DDA:  DATA 20,65
00DDC:  DATA 72,72
00DDE:  DATA 6F,72
00DE0:  DATA 21,0D
00DE2:  DATA 0A,00
00DE4:  DATA 09,5B
00DE6:  DATA 4D,49
00DE8:  DATA 53,20
00DEA:  DATA 46,4D
00DEC:  DATA 5D,69
00DEE:  DATA 73,20
00DF0:  DATA 63,6F
00DF2:  DATA 6E,6E
00DF4:  DATA 65,63
00DF6:  DATA 74,65
00DF8:  DATA 64,0D
00DFA:  DATA 0A,00
00DFC:  DATA 09,7C
00DFE:  DATA 20,53
00E00:  DATA 4D,46
00E02:  DATA 20,20
00E04:  DATA 7C,20
00E06:  DATA 50,49
00E08:  DATA 43,4C
00E0A:  DATA 4F,47
00E0C:  DATA 20,7C
00E0E:  DATA 20,55
00E10:  DATA 73,65
00E12:  DATA 20,43
00E14:  DATA 6F,75
00E16:  DATA 6E,74
00E18:  DATA 65,72
00E1A:  DATA 20,20
00E1C:  DATA 20,20
00E1E:  DATA 20,20
00E20:  DATA 3A,20
00E22:  DATA 30,78
00E24:  DATA 25,30
00E26:  DATA 38,4C
00E28:  DATA 58,0D
00E2A:  DATA 0A,00
00E2C:  DATA 09,7C
00E2E:  DATA 20,53
00E30:  DATA 4D,46
00E32:  DATA 20,20
00E34:  DATA 7C,20
00E36:  DATA 50,49
00E38:  DATA 43,4C
00E3A:  DATA 4F,47
00E3C:  DATA 20,7C
00E3E:  DATA 20,4C
00E40:  DATA 6F,6F
00E42:  DATA 70,20
00E44:  DATA 43,6F
00E46:  DATA 75,6E
00E48:  DATA 74,65
00E4A:  DATA 72,20
00E4C:  DATA 20,20
00E4E:  DATA 20,20
00E50:  DATA 3A,20
00E52:  DATA 30,78
00E54:  DATA 25,30
00E56:  DATA 32,58
00E58:  DATA 0D,0A
00E5A:  DATA 00,00
00E5C:  DATA 09,7C
00E5E:  DATA 20,53
00E60:  DATA 4D,46
00E62:  DATA 20,20
00E64:  DATA 7C,20
00E66:  DATA 4D,45
00E68:  DATA 41,53
00E6A:  DATA 20,20
00E6C:  DATA 20,7C
00E6E:  DATA 20,55
00E70:  DATA 73,65
00E72:  DATA 20,43
00E74:  DATA 6F,75
00E76:  DATA 6E,74
00E78:  DATA 65,72
00E7A:  DATA 20,20
00E7C:  DATA 20,20
00E7E:  DATA 20,20
00E80:  DATA 3A,20
00E82:  DATA 30,78
00E84:  DATA 25,30
00E86:  DATA 38,4C
00E88:  DATA 58,0D
00E8A:  DATA 0A,00
00E8C:  DATA 09,7C
00E8E:  DATA 20,53
00E90:  DATA 4D,46
00E92:  DATA 20,20
00E94:  DATA 7C,20
00E96:  DATA 4D,45
00E98:  DATA 41,53
00E9A:  DATA 20,20
00E9C:  DATA 20,7C
00E9E:  DATA 20,4C
00EA0:  DATA 6F,6F
00EA2:  DATA 70,20
00EA4:  DATA 43,6F
00EA6:  DATA 75,6E
00EA8:  DATA 74,65
00EAA:  DATA 72,20
00EAC:  DATA 20,20
00EAE:  DATA 20,20
00EB0:  DATA 3A,20
00EB2:  DATA 30,78
00EB4:  DATA 25,30
00EB6:  DATA 32,58
00EB8:  DATA 0D,0A
00EBA:  DATA 00,00
00EBC:  DATA 09,7C
00EBE:  DATA 20,4D
00EC0:  DATA 49,53
00EC2:  DATA 46,20
00EC4:  DATA 7C,20
00EC6:  DATA 50,49
00EC8:  DATA 43,4C
00ECA:  DATA 4F,47
00ECC:  DATA 20,7C
00ECE:  DATA 20,55
00ED0:  DATA 73,65
00ED2:  DATA 20,43
00ED4:  DATA 6F,75
00ED6:  DATA 6E,74
00ED8:  DATA 65,72
00EDA:  DATA 20,20
00EDC:  DATA 20,20
00EDE:  DATA 20,20
00EE0:  DATA 3A,20
00EE2:  DATA 30,78
00EE4:  DATA 25,30
00EE6:  DATA 38,4C
00EE8:  DATA 58,0D
00EEA:  DATA 0A,00
00EEC:  DATA 09,7C
00EEE:  DATA 20,4D
00EF0:  DATA 49,53
00EF2:  DATA 46,20
00EF4:  DATA 7C,20
00EF6:  DATA 50,49
00EF8:  DATA 43,4C
00EFA:  DATA 4F,47
00EFC:  DATA 20,7C
00EFE:  DATA 20,55
00F00:  DATA 6E,63
00F02:  DATA 6F,70
00F04:  DATA 79,65
00F06:  DATA 64,20
00F08:  DATA 43,6F
00F0A:  DATA 75,6E
00F0C:  DATA 74,65
00F0E:  DATA 72,20
00F10:  DATA 3A,20
00F12:  DATA 30,78
00F14:  DATA 25,30
00F16:  DATA 38,4C
00F18:  DATA 58,0D
00F1A:  DATA 0A,00
00F1C:  DATA 09,7C
00F1E:  DATA 20,4D
00F20:  DATA 49,53
00F22:  DATA 46,20
00F24:  DATA 7C,20
00F26:  DATA 50,49
00F28:  DATA 43,4C
00F2A:  DATA 4F,47
00F2C:  DATA 20,7C
00F2E:  DATA 20,4C
00F30:  DATA 6F,6F
00F32:  DATA 70,20
00F34:  DATA 43,6F
00F36:  DATA 75,6E
00F38:  DATA 74,65
00F3A:  DATA 72,20
00F3C:  DATA 20,20
00F3E:  DATA 20,20
00F40:  DATA 3A,20
00F42:  DATA 30,78
00F44:  DATA 25,30
00F46:  DATA 32,58
00F48:  DATA 0D,0A
00F4A:  DATA 00,00
00F4C:  DATA 09,7C
00F4E:  DATA 20,4D
00F50:  DATA 49,53
00F52:  DATA 46,20
00F54:  DATA 7C,20
00F56:  DATA 50,49
00F58:  DATA 43,4C
00F5A:  DATA 4F,47
00F5C:  DATA 20,7C
00F5E:  DATA 20,57
00F60:  DATA 72,69
00F62:  DATA 74,65
00F64:  DATA 20,43
00F66:  DATA 6F,75
00F68:  DATA 6E,74
00F6A:  DATA 65,72
00F6C:  DATA 20,20
00F6E:  DATA 20,20
00F70:  DATA 3A,20
00F72:  DATA 30,78
00F74:  DATA 25,30
00F76:  DATA 32,58
00F78:  DATA 0D,0A
00F7A:  DATA 00,00
00F7C:  DATA 09,7C
00F7E:  DATA 20,4D
00F80:  DATA 49,53
00F82:  DATA 46,20
00F84:  DATA 7C,20
00F86:  DATA 4D,45
00F88:  DATA 41,53
00F8A:  DATA 20,20
00F8C:  DATA 20,7C
00F8E:  DATA 20,55
00F90:  DATA 73,65
00F92:  DATA 20,43
00F94:  DATA 6F,75
00F96:  DATA 6E,74
00F98:  DATA 65,72
00F9A:  DATA 20,20
00F9C:  DATA 20,20
00F9E:  DATA 20,20
00FA0:  DATA 3A,20
00FA2:  DATA 30,78
00FA4:  DATA 25,30
00FA6:  DATA 38,4C
00FA8:  DATA 58,0D
00FAA:  DATA 0A,00
00FAC:  DATA 09,7C
00FAE:  DATA 20,4D
00FB0:  DATA 49,53
00FB2:  DATA 46,20
00FB4:  DATA 7C,20
00FB6:  DATA 4D,45
00FB8:  DATA 41,53
00FBA:  DATA 20,20
00FBC:  DATA 20,7C
00FBE:  DATA 20,55
00FC0:  DATA 6E,63
00FC2:  DATA 6F,70
00FC4:  DATA 79,65
00FC6:  DATA 64,20
00FC8:  DATA 43,6F
00FCA:  DATA 75,6E
00FCC:  DATA 74,65
00FCE:  DATA 72,20
00FD0:  DATA 3A,20
00FD2:  DATA 30,78
00FD4:  DATA 25,30
00FD6:  DATA 38,4C
00FD8:  DATA 58,0D
00FDA:  DATA 0A,00
00FDC:  DATA 09,7C
00FDE:  DATA 20,4D
00FE0:  DATA 49,53
00FE2:  DATA 46,20
00FE4:  DATA 7C,20
00FE6:  DATA 4D,45
00FE8:  DATA 41,53
00FEA:  DATA 20,20
00FEC:  DATA 20,7C
00FEE:  DATA 20,4C
00FF0:  DATA 6F,6F
00FF2:  DATA 70,20
00FF4:  DATA 43,6F
00FF6:  DATA 75,6E
00FF8:  DATA 74,65
00FFA:  DATA 72,20
00FFC:  DATA 20,20
00FFE:  DATA 20,20
01000:  DATA 3A,20
01002:  DATA 30,78
01004:  DATA 25,30
01006:  DATA 32,58
01008:  DATA 0D,0A
0100A:  DATA 00,00
0100C:  DATA 09,43
0100E:  DATA 6F,6D
01010:  DATA 70,6C
01012:  DATA 65,74
01014:  DATA 65,0D
01016:  DATA 0A,00
01018:  DATA 4D,69
0101A:  DATA 73,73
0101C:  DATA 69,6F
0101E:  DATA 6E,20
01020:  DATA 46,6C
01022:  DATA 61,73
01024:  DATA 68,20
01026:  DATA 69,73
01028:  DATA 20,6E
0102A:  DATA 6F,74
0102C:  DATA 20,63
0102E:  DATA 6F,6E
01030:  DATA 6E,65
01032:  DATA 63,74
01034:  DATA 65,64
01036:  DATA 0D,0A
01038:  DATA 00,00
0103A:  DATA 4D,69
0103C:  DATA 73,73
0103E:  DATA 69,6F
01040:  DATA 6E,20
01042:  DATA 46,6C
01044:  DATA 61,73
01046:  DATA 68,20
01048:  DATA 69,73
0104A:  DATA 20,6E
0104C:  DATA 6F,74
0104E:  DATA 20,63
01050:  DATA 6F,6E
01052:  DATA 6E,65
01054:  DATA 63,74
01056:  DATA 65,64
01058:  DATA 0D,0A
0105A:  DATA 00,00
0105C:  DATA 0D,0A
0105E:  DATA 5F,5F
01060:  DATA 5F,5F
01062:  DATA 5F,5F
01064:  DATA 5F,5F
01066:  DATA 5F,5F
01068:  DATA 5F,5F
0106A:  DATA 5F,5F
0106C:  DATA 5F,5F
0106E:  DATA 5F,5F
01070:  DATA 5F,5F
01072:  DATA 5F,5F
01074:  DATA 5F,5F
01076:  DATA 5F,5F
01078:  DATA 5F,5F
0107A:  DATA 5F,5F
0107C:  DATA 0D,0A
0107E:  DATA 5F,5F
01080:  DATA 5F,5F
01082:  DATA 5F,53
01084:  DATA 74,61
01086:  DATA 72,74
01088:  DATA 20,65
0108A:  DATA 78,65
0108C:  DATA 63,75
0108E:  DATA 74,65
01090:  DATA 5F,6D
01092:  DATA 69,73
01094:  DATA 73,69
01096:  DATA 6F,6E
01098:  DATA 5F,5F
0109A:  DATA 5F,5F
0109C:  DATA 5F,0D
0109E:  DATA 0A,0D
010A0:  DATA 0A,00
010A2:  DATA 43,6F
010A4:  DATA 6D,6D
010A6:  DATA 61,6E
010A8:  DATA 64,20
010AA:  DATA 49,44
010AC:  DATA 3A,20
010AE:  DATA 25,58
010B0:  DATA 0D,0A
010B2:  DATA 0D,0A
010B4:  DATA 00,00
010B6:  DATA 09,09
010B8:  DATA 2D,3E
010BA:  DATA 20,49
010BC:  DATA 6E,76
010BE:  DATA 61,6C
010C0:  DATA 69,64
010C2:  DATA 20,43
010C4:  DATA 4D,44
010C6:  DATA 20,49
010C8:  DATA 44,21
010CA:  DATA 0D,0A
010CC:  DATA 00,00
010CE:  DATA 0D,0A
010D0:  DATA 5F,5F
010D2:  DATA 5F,5F
010D4:  DATA 5F,5F
010D6:  DATA 45,6E
010D8:  DATA 64,20
010DA:  DATA 65,78
010DC:  DATA 65,63
010DE:  DATA 75,74
010E0:  DATA 65,5F
010E2:  DATA 6D,69
010E4:  DATA 73,73
010E6:  DATA 69,6F
010E8:  DATA 6E,5F
010EA:  DATA 5F,5F
010EC:  DATA 5F,5F
010EE:  DATA 5F,0D
010F0:  DATA 0A,5F
010F2:  DATA 5F,5F
010F4:  DATA 5F,5F
010F6:  DATA 5F,5F
010F8:  DATA 5F,5F
010FA:  DATA 5F,5F
010FC:  DATA 5F,5F
010FE:  DATA 5F,5F
01100:  DATA 5F,5F
01102:  DATA 5F,5F
01104:  DATA 5F,5F
01106:  DATA 5F,5F
01108:  DATA 5F,5F
0110A:  DATA 5F,5F
0110C:  DATA 5F,5F
0110E:  DATA 5F,5F
01110:  DATA 0D,0A
01112:  DATA 00,00
01114:  DATA 53,74
01116:  DATA 61,72
01118:  DATA 74,20
0111A:  DATA 65,78
0111C:  DATA 65,63
0111E:  DATA 75,74
01120:  DATA 65,5F
01122:  DATA 63,6F
01124:  DATA 6D,6D
01126:  DATA 61,6E
01128:  DATA 64,0D
0112A:  DATA 0A,00
0112C:  DATA 09,2D
0112E:  DATA 3E,20
01130:  DATA 55,70
01132:  DATA 6C,69
01134:  DATA 6E,6B
01136:  DATA 20,63
01138:  DATA 6F,6D
0113A:  DATA 6D,61
0113C:  DATA 6E,64
0113E:  DATA 0D,0A
01140:  DATA 00,00
01142:  DATA 09,20
01144:  DATA 20,20
01146:  DATA 54,72
01148:  DATA 61,6E
0114A:  DATA 73,6D
0114C:  DATA 69,74
0114E:  DATA 20,41
01150:  DATA 63,6B
01152:  DATA 6E,6F
01154:  DATA 6C,65
01156:  DATA 67,64
01158:  DATA 65,0D
0115A:  DATA 0A,00
0115C:  DATA 09,2D
0115E:  DATA 3E,20
01160:  DATA 53,74
01162:  DATA 61,74
01164:  DATA 75,73
01166:  DATA 20,63
01168:  DATA 68,65
0116A:  DATA 63,6B
0116C:  DATA 0D,0A
0116E:  DATA 00,00
01170:  DATA 09,20
01172:  DATA 20,20
01174:  DATA 54,72
01176:  DATA 61,6E
01178:  DATA 73,6D
0117A:  DATA 69,74
0117C:  DATA 20,4D
0117E:  DATA 49,53
01180:  DATA 20,4D
01182:  DATA 43,55
01184:  DATA 20,53
01186:  DATA 74,61
01188:  DATA 74,75
0118A:  DATA 73,0D
0118C:  DATA 0A,00
0118E:  DATA 66,69
01190:  DATA 6E,69
01192:  DATA 73,68
01194:  DATA 65,64
01196:  DATA 20,69
01198:  DATA 6E,20
0119A:  DATA 73,74
0119C:  DATA 61,74
0119E:  DATA 75,73
011A0:  DATA 5F,63
011A2:  DATA 68,65
011A4:  DATA 63,6B
011A6:  DATA 0D,0A
011A8:  DATA 00,00
011AA:  DATA 09,2D
011AC:  DATA 3E,20
011AE:  DATA 53,4D
011B0:  DATA 46,20
011B2:  DATA 61,76
011B4:  DATA 61,69
011B6:  DATA 6C,61
011B8:  DATA 62,6C
011BA:  DATA 65,20
011BC:  DATA 63,68
011BE:  DATA 65,63
011C0:  DATA 6B,0D
011C2:  DATA 0A,00
011C4:  DATA 09,20
011C6:  DATA 20,20
011C8:  DATA 54,72
011CA:  DATA 61,6E
011CC:  DATA 73,6D
011CE:  DATA 69,74
011D0:  DATA 20,41
011D2:  DATA 63,6B
011D4:  DATA 6E,6F
011D6:  DATA 77,6C
011D8:  DATA 65,64
011DA:  DATA 67,65
011DC:  DATA 6D,65
011DE:  DATA 6E,74
011E0:  DATA 0D,0A
011E2:  DATA 00,00
011E4:  DATA 09,09
011E6:  DATA 2D,3E
011E8:  DATA 20,61
011EA:  DATA 6C,6C
011EC:  DATA 6F,77
011EE:  DATA 65,64
011F0:  DATA 0D,0A
011F2:  DATA 00,00
011F4:  DATA 09,09
011F6:  DATA 2D,3E
011F8:  DATA 20,50
011FA:  DATA 72,6F
011FC:  DATA 63,65
011FE:  DATA 73,73
01200:  DATA 69,6E
01202:  DATA 67,20
01204:  DATA 53,4D
01206:  DATA 46,20
01208:  DATA 64,61
0120A:  DATA 74,61
0120C:  DATA 20,5B
0120E:  DATA 25,64
01210:  DATA 5D,0D
01212:  DATA 0A,00
01214:  DATA 09,09
01216:  DATA 2D,3E
01218:  DATA 20,45
0121A:  DATA 78,65
0121C:  DATA 63,75
0121E:  DATA 74,69
01220:  DATA 6E,67
01222:  DATA 20,53
01224:  DATA 4D,46
01226:  DATA 20,57
01228:  DATA 52,49
0122A:  DATA 54,45
0122C:  DATA 20,28
0122E:  DATA 73,69
01230:  DATA 6E,67
01232:  DATA 6C,65
01234:  DATA 29,0D
01236:  DATA 0A,00
01238:  DATA 09,09
0123A:  DATA 2D,3E
0123C:  DATA 20,45
0123E:  DATA 78,65
01240:  DATA 63,75
01242:  DATA 74,69
01244:  DATA 6E,67
01246:  DATA 20,53
01248:  DATA 4D,46
0124A:  DATA 20,52
0124C:  DATA 45,41
0124E:  DATA 44,20
01250:  DATA 28,73
01252:  DATA 69,6E
01254:  DATA 67,6C
01256:  DATA 65,29
01258:  DATA 0D,0A
0125A:  DATA 00,00
0125C:  DATA 09,09
0125E:  DATA 2D,3E
01260:  DATA 20,45
01262:  DATA 78,65
01264:  DATA 63,75
01266:  DATA 74,69
01268:  DATA 6E,67
0126A:  DATA 20,53
0126C:  DATA 4D,46
0126E:  DATA 20,45
01270:  DATA 52,41
01272:  DATA 53,45
01274:  DATA 20,28
01276:  DATA 73,69
01278:  DATA 6E,67
0127A:  DATA 6C,65
0127C:  DATA 29,0D
0127E:  DATA 0A,00
01280:  DATA 09,09
01282:  DATA 2D,3E
01284:  DATA 20,55
01286:  DATA 6E,6B
01288:  DATA 6E,6F
0128A:  DATA 77,6E
0128C:  DATA 20,53
0128E:  DATA 4D,46
01290:  DATA 20,66
01292:  DATA 75,6E
01294:  DATA 63,74
01296:  DATA 69,6F
01298:  DATA 6E,20
0129A:  DATA 74,79
0129C:  DATA 70,65
0129E:  DATA 0D,0A
012A0:  DATA 00,00
012A2:  DATA 09,09
012A4:  DATA 2D,3E
012A6:  DATA 20,45
012A8:  DATA 72,72
012AA:  DATA 6F,72
012AC:  DATA 3A,20
012AE:  DATA 46,61
012B0:  DATA 69,6C
012B2:  DATA 65,64
012B4:  DATA 20,74
012B6:  DATA 6F,20
012B8:  DATA 64,65
012BA:  DATA 71,75
012BC:  DATA 65,75
012BE:  DATA 65,20
012C0:  DATA 53,4D
012C2:  DATA 46,20
012C4:  DATA 64,61
012C6:  DATA 74,61
012C8:  DATA 0D,0A
012CA:  DATA 00,00
012CC:  DATA 09,09
012CE:  DATA 2D,3E
012D0:  DATA 20,43
012D2:  DATA 6F,6D
012D4:  DATA 70,6C
012D6:  DATA 65,74
012D8:  DATA 65,64
012DA:  DATA 20,70
012DC:  DATA 72,6F
012DE:  DATA 63,65
012E0:  DATA 73,73
012E2:  DATA 69,6E
012E4:  DATA 67,20
012E6:  DATA 25,64
012E8:  DATA 20,53
012EA:  DATA 4D,46
012EC:  DATA 20,6F
012EE:  DATA 70,65
012F0:  DATA 72,61
012F2:  DATA 74,69
012F4:  DATA 6F,6E
012F6:  DATA 73,0D
012F8:  DATA 0A,00
012FA:  DATA 09,09
012FC:  DATA 2D,3E
012FE:  DATA 20,64
01300:  DATA 65,6E
01302:  DATA 69,65
01304:  DATA 64,0D
01306:  DATA 0A,00
01308:  DATA 53,74
0130A:  DATA 61,72
0130C:  DATA 74,20
0130E:  DATA 4D,4F
01310:  DATA 44,45
01312:  DATA 20,44
01314:  DATA 55,4D
01316:  DATA 4D,59
01318:  DATA 0D,0A
0131A:  DATA 00,00
0131C:  DATA 09,4D
0131E:  DATA 4F,44
01320:  DATA 45,20
01322:  DATA 20,20
01324:  DATA 20,20
01326:  DATA 3A,20
01328:  DATA 25,30
0132A:  DATA 32,58
0132C:  DATA 0D,0A
0132E:  DATA 00,00
01330:  DATA 09,50
01332:  DATA 61,72
01334:  DATA 61,6D
01336:  DATA 31,20
01338:  DATA 20,20
0133A:  DATA 3A,20
0133C:  DATA 30,78
0133E:  DATA 25,30
01340:  DATA 38,4C
01342:  DATA 58,0D
01344:  DATA 0A,00
01346:  DATA 09,50
01348:  DATA 61,72
0134A:  DATA 61,6D
0134C:  DATA 32,20
0134E:  DATA 20,20
01350:  DATA 3A,20
01352:  DATA 30,78
01354:  DATA 25,30
01356:  DATA 34,4C
01358:  DATA 58,0D
0135A:  DATA 0A,00
0135C:  DATA 45,6E
0135E:  DATA 64,20
01360:  DATA 4D,4F
01362:  DATA 44,45
01364:  DATA 20,44
01366:  DATA 55,4D
01368:  DATA 4D,59
0136A:  DATA 0D,0A
0136C:  DATA 00,00
0136E:  DATA 53,74
01370:  DATA 61,72
01372:  DATA 74,20
01374:  DATA 4D,4F
01376:  DATA 44,45
01378:  DATA 20,54
0137A:  DATA 45,53
0137C:  DATA 54,20
0137E:  DATA 49,56
01380:  DATA 0D,0A
01382:  DATA 00,00
01384:  DATA 09,53
01386:  DATA 77,65
01388:  DATA 65,70
0138A:  DATA 20,73
0138C:  DATA 74,65
0138E:  DATA 70,20
01390:  DATA 3A,20
01392:  DATA 25,75
01394:  DATA 0D,0A
01396:  DATA 00,00
01398:  DATA 45,6E
0139A:  DATA 64,20
0139C:  DATA 4D,4F
0139E:  DATA 44,45
013A0:  DATA 20,54
013A2:  DATA 45,53
013A4:  DATA 54,20
013A6:  DATA 49,56
013A8:  DATA 0D,0A
013AA:  DATA 00,00
013AC:  DATA 53,74
013AE:  DATA 61,72
013B0:  DATA 74,20
013B2:  DATA 4D,4F
013B4:  DATA 44,45
013B6:  DATA 20,4D
013B8:  DATA 45,41
013BA:  DATA 53,55
013BC:  DATA 52,45
013BE:  DATA 0D,0A
013C0:  DATA 00,00
013C2:  DATA 53,74
013C4:  DATA 61,72
013C6:  DATA 74,20
013C8:  DATA 53,57
013CA:  DATA 45,45
013CC:  DATA 50,0D
013CE:  DATA 0A,00
013D0:  DATA 09,53
013D2:  DATA 77,65
013D4:  DATA 65,70
013D6:  DATA 20,73
013D8:  DATA 74,65
013DA:  DATA 70,20
013DC:  DATA 3A,20
013DE:  DATA 25,75
013E0:  DATA 0D,0A
013E2:  DATA 00,00
013E4:  DATA 45,4E
013E6:  DATA 44,20
013E8:  DATA 53,57
013EA:  DATA 45,45
013EC:  DATA 50,0D
013EE:  DATA 0A,00
013F0:  DATA 53,74
013F2:  DATA 61,72
013F4:  DATA 74,20
013F6:  DATA 46,6C
013F8:  DATA 61,73
013FA:  DATA 68,20
013FC:  DATA 45,72
013FE:  DATA 61,73
01400:  DATA 65,20
01402:  DATA 41,6C
01404:  DATA 6C,0D
01406:  DATA 0A,00
01408:  DATA 45,6E
0140A:  DATA 64,20
0140C:  DATA 46,6C
0140E:  DATA 61,73
01410:  DATA 68,20
01412:  DATA 45,72
01414:  DATA 61,73
01416:  DATA 65,20
01418:  DATA 41,6C
0141A:  DATA 6C,0D
0141C:  DATA 0A,00
0141E:  DATA 53,74
01420:  DATA 61,72
01422:  DATA 74,20
01424:  DATA 46,6C
01426:  DATA 61,73
01428:  DATA 68,20
0142A:  DATA 45,72
0142C:  DATA 61,73
0142E:  DATA 65,20
01430:  DATA 31,20
01432:  DATA 53,65
01434:  DATA 63,74
01436:  DATA 6F,72
01438:  DATA 0D,0A
0143A:  DATA 00,00
0143C:  DATA 09,53
0143E:  DATA 65,63
01440:  DATA 74,6F
01442:  DATA 72,20
01444:  DATA 41,64
01446:  DATA 64,72
01448:  DATA 65,73
0144A:  DATA 73,3A
0144C:  DATA 20,30
0144E:  DATA 78,25
01450:  DATA 30,38
01452:  DATA 4C,58
01454:  DATA 0D,0A
01456:  DATA 00,00
01458:  DATA 45,6E
0145A:  DATA 64,20
0145C:  DATA 46,6C
0145E:  DATA 61,73
01460:  DATA 68,20
01462:  DATA 45,72
01464:  DATA 61,73
01466:  DATA 65,20
01468:  DATA 31,20
0146A:  DATA 53,65
0146C:  DATA 63,74
0146E:  DATA 6F,72
01470:  DATA 0D,0A
01472:  DATA 00,00
01474:  DATA 53,74
01476:  DATA 61,72
01478:  DATA 74,20
0147A:  DATA 46,6C
0147C:  DATA 61,73
0147E:  DATA 68,20
01480:  DATA 43,6F
01482:  DATA 70,79
01484:  DATA 20,31
01486:  DATA 20,53
01488:  DATA 65,63
0148A:  DATA 74,6F
0148C:  DATA 72,0D
0148E:  DATA 0A,00
01490:  DATA 09,53
01492:  DATA 75,62
01494:  DATA 73,65
01496:  DATA 63,74
01498:  DATA 6F,72
0149A:  DATA 20,41
0149C:  DATA 64,64
0149E:  DATA 72,65
014A0:  DATA 73,73
014A2:  DATA 3A,20
014A4:  DATA 30,78
014A6:  DATA 25,30
014A8:  DATA 38,4C
014AA:  DATA 58,0D
014AC:  DATA 0A,00
014AE:  DATA 45,6E
014B0:  DATA 64,20
014B2:  DATA 46,6C
014B4:  DATA 61,73
014B6:  DATA 68,20
014B8:  DATA 43,6F
014BA:  DATA 70,79
014BC:  DATA 20,31
014BE:  DATA 20,53
014C0:  DATA 65,63
014C2:  DATA 74,6F
014C4:  DATA 72,0D
014C6:  DATA 0A,00
014C8:  DATA 53,74
014CA:  DATA 61,72
014CC:  DATA 74,20
014CE:  DATA 46,6C
014D0:  DATA 61,73
014D2:  DATA 68,20
014D4:  DATA 45,72
014D6:  DATA 61,73
014D8:  DATA 65,20
014DA:  DATA 36,34
014DC:  DATA 6B,42
014DE:  DATA 79,74
014E0:  DATA 65,20
014E2:  DATA 53,75
014E4:  DATA 62,73
014E6:  DATA 65,63
014E8:  DATA 74,6F
014EA:  DATA 72,0D
014EC:  DATA 0A,00
014EE:  DATA 09,53
014F0:  DATA 75,62
014F2:  DATA 73,65
014F4:  DATA 63,74
014F6:  DATA 6F,72
014F8:  DATA 20,41
014FA:  DATA 64,64
014FC:  DATA 72,65
014FE:  DATA 73,73
01500:  DATA 3A,20
01502:  DATA 30,78
01504:  DATA 25,30
01506:  DATA 38,4C
01508:  DATA 58,0D
0150A:  DATA 0A,00
0150C:  DATA 45,6E
0150E:  DATA 64,20
01510:  DATA 46,6C
01512:  DATA 61,73
01514:  DATA 68,20
01516:  DATA 45,72
01518:  DATA 61,73
0151A:  DATA 65,20
0151C:  DATA 36,34
0151E:  DATA 6B,42
01520:  DATA 79,74
01522:  DATA 65,20
01524:  DATA 53,75
01526:  DATA 62,73
01528:  DATA 65,63
0152A:  DATA 74,6F
0152C:  DATA 72,0D
0152E:  DATA 0A,00
01530:  DATA 53,74
01532:  DATA 61,72
01534:  DATA 74,20
01536:  DATA 46,6C
01538:  DATA 61,73
0153A:  DATA 68,20
0153C:  DATA 57,72
0153E:  DATA 69,74
01540:  DATA 65,20
01542:  DATA 44,65
01544:  DATA 6D,6F
01546:  DATA 0D,0A
01548:  DATA 00,00
0154A:  DATA 09,4D
0154C:  DATA 4F,44
0154E:  DATA 45,20
01550:  DATA 20,20
01552:  DATA 20,20
01554:  DATA 3A,20
01556:  DATA 25,30
01558:  DATA 32,58
0155A:  DATA 0D,0A
0155C:  DATA 00,00
0155E:  DATA 09,41
01560:  DATA 64,64
01562:  DATA 72,65
01564:  DATA 73,73
01566:  DATA 20,20
01568:  DATA 3A,20
0156A:  DATA 30,78
0156C:  DATA 25,30
0156E:  DATA 38,4C
01570:  DATA 58,0D
01572:  DATA 0A,00
01574:  DATA 09,50
01576:  DATA 61,63
01578:  DATA 6B,65
0157A:  DATA 74,4E
0157C:  DATA 75,6D
0157E:  DATA 3A,20
01580:  DATA 30,78
01582:  DATA 25,30
01584:  DATA 34,4C
01586:  DATA 58,0D
01588:  DATA 0A,00
0158A:  DATA 57,72
0158C:  DATA 69,74
0158E:  DATA 65,20
01590:  DATA 44,61
01592:  DATA 74,61
01594:  DATA 0D,0A
01596:  DATA 00,00
01598:  DATA 45,6E
0159A:  DATA 64,20
0159C:  DATA 46,6C
0159E:  DATA 61,73
015A0:  DATA 68,20
015A2:  DATA 57,72
015A4:  DATA 69,74
015A6:  DATA 65,20
015A8:  DATA 44,65
015AA:  DATA 6D,6F
015AC:  DATA 0D,0A
015AE:  DATA 00,00
015B0:  DATA 53,74
015B2:  DATA 61,72
015B4:  DATA 74,20
015B6:  DATA 46,6C
015B8:  DATA 61,73
015BA:  DATA 68,20
015BC:  DATA 57,72
015BE:  DATA 69,74
015C0:  DATA 65,20
015C2:  DATA 34,6B
015C4:  DATA 42,79
015C6:  DATA 74,65
015C8:  DATA 20,53
015CA:  DATA 75,62
015CC:  DATA 73,65
015CE:  DATA 63,74
015D0:  DATA 6F,72
015D2:  DATA 0D,0A
015D4:  DATA 00,00
015D6:  DATA 45,6E
015D8:  DATA 64,20
015DA:  DATA 46,6C
015DC:  DATA 61,73
015DE:  DATA 68,20
015E0:  DATA 57,72
015E2:  DATA 69,74
015E4:  DATA 65,20
015E6:  DATA 34,6B
015E8:  DATA 42,79
015EA:  DATA 74,65
015EC:  DATA 20,53
015EE:  DATA 75,62
015F0:  DATA 73,65
015F2:  DATA 63,74
015F4:  DATA 6F,72
015F6:  DATA 0D,0A
015F8:  DATA 00,00
015FA:  DATA 53,74
015FC:  DATA 61,72
015FE:  DATA 74,20
01600:  DATA 46,6C
01602:  DATA 61,73
01604:  DATA 68,20
01606:  DATA 52,65
01608:  DATA 61,64
0160A:  DATA 0D,0A
0160C:  DATA 00,00
0160E:  DATA 09,4D
01610:  DATA 4F,44
01612:  DATA 45,20
01614:  DATA 20,20
01616:  DATA 20,20
01618:  DATA 3A,20
0161A:  DATA 25,30
0161C:  DATA 32,58
0161E:  DATA 0D,0A
01620:  DATA 00,00
01622:  DATA 09,41
01624:  DATA 64,64
01626:  DATA 72,65
01628:  DATA 73,73
0162A:  DATA 20,20
0162C:  DATA 3A,20
0162E:  DATA 30,78
01630:  DATA 25,30
01632:  DATA 38,4C
01634:  DATA 58,0D
01636:  DATA 0A,00
01638:  DATA 09,50
0163A:  DATA 61,63
0163C:  DATA 6B,65
0163E:  DATA 74,4E
01640:  DATA 75,6D
01642:  DATA 3A,20
01644:  DATA 30,78
01646:  DATA 25,30
01648:  DATA 34,4C
0164A:  DATA 58,0D
0164C:  DATA 0A,00
0164E:  DATA 52,45
01650:  DATA 41,44
01652:  DATA 20,44
01654:  DATA 41,54
01656:  DATA 41,0D
01658:  DATA 0A,00
0165A:  DATA 4D,69
0165C:  DATA 73,73
0165E:  DATA 69,6F
01660:  DATA 6E,20
01662:  DATA 46,6C
01664:  DATA 61,73
01666:  DATA 68,20
01668:  DATA 69,73
0166A:  DATA 20,6E
0166C:  DATA 6F,74
0166E:  DATA 20,63
01670:  DATA 6F,6E
01672:  DATA 6E,65
01674:  DATA 63,74
01676:  DATA 65,64
01678:  DATA 0D,0A
0167A:  DATA 00,00
0167C:  DATA 45,6E
0167E:  DATA 64,20
01680:  DATA 46,6C
01682:  DATA 61,73
01684:  DATA 68,20
01686:  DATA 52,65
01688:  DATA 61,64
0168A:  DATA 0D,0A
0168C:  DATA 00,00
0168E:  DATA 53,74
01690:  DATA 61,72
01692:  DATA 74,20
01694:  DATA 46,6C
01696:  DATA 61,73
01698:  DATA 68,20
0169A:  DATA 52,65
0169C:  DATA 61,64
0169E:  DATA 20,41
016A0:  DATA 64,64
016A2:  DATA 72,65
016A4:  DATA 73,73
016A6:  DATA 0D,0A
016A8:  DATA 00,00
016AA:  DATA 52,65
016AC:  DATA 61,64
016AE:  DATA 20,44
016B0:  DATA 61,74
016B2:  DATA 61,3A
016B4:  DATA 20,25
016B6:  DATA 30,32
016B8:  DATA 58,20
016BA:  DATA 25,30
016BC:  DATA 32,58
016BE:  DATA 20,25
016C0:  DATA 30,32
016C2:  DATA 58,20
016C4:  DATA 25,30
016C6:  DATA 32,58
016C8:  DATA 0D,0A
016CA:  DATA 00,00
016CC:  DATA 45,6E
016CE:  DATA 64,20
016D0:  DATA 46,6C
016D2:  DATA 61,73
016D4:  DATA 68,20
016D6:  DATA 52,65
016D8:  DATA 61,64
016DA:  DATA 20,41
016DC:  DATA 64,64
016DE:  DATA 72,65
016E0:  DATA 73,73
016E2:  DATA 0D,0A
016E4:  DATA 00,00
016E6:  DATA 53,74
016E8:  DATA 61,72
016EA:  DATA 74,20
016EC:  DATA 46,6C
016EE:  DATA 61,73
016F0:  DATA 68,20
016F2:  DATA 45,72
016F4:  DATA 61,73
016F6:  DATA 65,20
016F8:  DATA 61,6E
016FA:  DATA 64,20
016FC:  DATA 52,65
016FE:  DATA 73,65
01700:  DATA 74,0D
01702:  DATA 0A,00
01704:  DATA 45,6E
01706:  DATA 64,20
01708:  DATA 46,6C
0170A:  DATA 61,73
0170C:  DATA 68,20
0170E:  DATA 45,72
01710:  DATA 61,73
01712:  DATA 65,20
01714:  DATA 61,6E
01716:  DATA 64,20
01718:  DATA 52,65
0171A:  DATA 73,65
0171C:  DATA 74,0D
0171E:  DATA 0A,00
01720:  DATA 53,74
01722:  DATA 61,72
01724:  DATA 74,20
01726:  DATA 46,6C
01728:  DATA 61,73
0172A:  DATA 68,20
0172C:  DATA 41,64
0172E:  DATA 64,72
01730:  DATA 65,73
01732:  DATA 73,20
01734:  DATA 52,65
01736:  DATA 73,65
01738:  DATA 74,0D
0173A:  DATA 0A,00
0173C:  DATA 45,6E
0173E:  DATA 64,20
01740:  DATA 46,6C
01742:  DATA 61,73
01744:  DATA 68,20
01746:  DATA 41,64
01748:  DATA 64,72
0174A:  DATA 65,73
0174C:  DATA 73,20
0174E:  DATA 52,65
01750:  DATA 73,65
01752:  DATA 74,0D
01754:  DATA 0A,00
01756:  DATA 53,74
01758:  DATA 61,72
0175A:  DATA 74,20
0175C:  DATA 46,6C
0175E:  DATA 61,73
01760:  DATA 68,20
01762:  DATA 53,4D
01764:  DATA 46,20
01766:  DATA 43,6F
01768:  DATA 70,79
0176A:  DATA 0D,0A
0176C:  DATA 00,00
0176E:  DATA 45,6E
01770:  DATA 64,20
01772:  DATA 46,6C
01774:  DATA 61,73
01776:  DATA 68,20
01778:  DATA 53,4D
0177A:  DATA 46,20
0177C:  DATA 43,6F
0177E:  DATA 70,79
01780:  DATA 0D,0A
01782:  DATA 00,00
01784:  DATA 53,74
01786:  DATA 61,72
01788:  DATA 74,20
0178A:  DATA 46,6C
0178C:  DATA 61,73
0178E:  DATA 68,20
01790:  DATA 53,4D
01792:  DATA 46,20
01794:  DATA 52,65
01796:  DATA 61,64
01798:  DATA 0D,0A
0179A:  DATA 00,00
0179C:  DATA 52,65
0179E:  DATA 61,64
017A0:  DATA 20,44
017A2:  DATA 61,74
017A4:  DATA 61,3A
017A6:  DATA 20,00
017A8:  DATA 0D,0A
017AA:  DATA 45,6E
017AC:  DATA 64,20
017AE:  DATA 46,6C
017B0:  DATA 61,73
017B2:  DATA 68,20
017B4:  DATA 53,4D
017B6:  DATA 46,20
017B8:  DATA 52,65
017BA:  DATA 61,64
017BC:  DATA 0D,0A
017BE:  DATA 00,00
017C0:  DATA 53,74
017C2:  DATA 61,72
017C4:  DATA 74,20
017C6:  DATA 46,6C
017C8:  DATA 61,73
017CA:  DATA 68,20
017CC:  DATA 53,4D
017CE:  DATA 46,20
017D0:  DATA 45,72
017D2:  DATA 61,73
017D4:  DATA 65,0D
017D6:  DATA 0A,00
017D8:  DATA 45,6E
017DA:  DATA 64,20
017DC:  DATA 46,6C
017DE:  DATA 61,73
017E0:  DATA 68,20
017E2:  DATA 53,4D
017E4:  DATA 46,20
017E6:  DATA 45,72
017E8:  DATA 61,73
017EA:  DATA 65,0D
017EC:  DATA 0A,00
017EE:  DATA 53,74
017F0:  DATA 61,72
017F2:  DATA 74,20
017F4:  DATA 46,6C
017F6:  DATA 61,73
017F8:  DATA 68,20
017FA:  DATA 41,64
017FC:  DATA 64,72
017FE:  DATA 65,73
01800:  DATA 73,20
01802:  DATA 52,65
01804:  DATA 73,65
01806:  DATA 74,0D
01808:  DATA 0A,00
0180A:  DATA 45,6E
0180C:  DATA 64,20
0180E:  DATA 46,6C
01810:  DATA 61,73
01812:  DATA 68,20
01814:  DATA 41,64
01816:  DATA 64,72
01818:  DATA 65,73
0181A:  DATA 73,20
0181C:  DATA 52,65
0181E:  DATA 73,65
01820:  DATA 74,0D
01822:  DATA 0A,00
01824:  DATA 53,4D
01826:  DATA 46,20
01828:  DATA 69,73
0182A:  DATA 20,6E
0182C:  DATA 6F,74
0182E:  DATA 20,63
01830:  DATA 6F,6E
01832:  DATA 6E,65
01834:  DATA 63,74
01836:  DATA 65,64
01838:  DATA 0D,0A
0183A:  DATA 00,00
0183C:  DATA 53,74
0183E:  DATA 61,72
01840:  DATA 74,20
01842:  DATA 46,6C
01844:  DATA 61,73
01846:  DATA 68,20
01848:  DATA 53,4D
0184A:  DATA 46,20
0184C:  DATA 52,65
0184E:  DATA 61,64
01850:  DATA 20,46
01852:  DATA 6F,72
01854:  DATA 63,65
01856:  DATA 0D,0A
01858:  DATA 00,00
0185A:  DATA 09,41
0185C:  DATA 64,64
0185E:  DATA 72,65
01860:  DATA 73,73
01862:  DATA 20,20
01864:  DATA 3A,20
01866:  DATA 30,78
01868:  DATA 25,30
0186A:  DATA 38,4C
0186C:  DATA 58,0D
0186E:  DATA 0A,00
01870:  DATA 09,50
01872:  DATA 61,63
01874:  DATA 6B,65
01876:  DATA 74,4E
01878:  DATA 75,6D
0187A:  DATA 3A,20
0187C:  DATA 30,78
0187E:  DATA 25,30
01880:  DATA 34,4C
01882:  DATA 58,0D
01884:  DATA 0A,00
01886:  DATA 72,65
01888:  DATA 61,64
0188A:  DATA 20,64
0188C:  DATA 61,74
0188E:  DATA 61,0D
01890:  DATA 0A,00
01892:  DATA 0D,0A
01894:  DATA 45,6E
01896:  DATA 64,20
01898:  DATA 46,6C
0189A:  DATA 61,73
0189C:  DATA 68,20
0189E:  DATA 53,4D
018A0:  DATA 46,20
018A2:  DATA 52,65
018A4:  DATA 61,64
018A6:  DATA 20,46
018A8:  DATA 6F,72
018AA:  DATA 63,65
018AC:  DATA 0D,0A
018AE:  DATA 00,00
018B0:  DATA 53,74
018B2:  DATA 61,72
018B4:  DATA 74,20
018B6:  DATA 53,4D
018B8:  DATA 46,20
018BA:  DATA 45,72
018BC:  DATA 61,73
018BE:  DATA 65,20
018C0:  DATA 41,6C
018C2:  DATA 6C,0D
018C4:  DATA 0A,00
018C6:  DATA 45,6E
018C8:  DATA 64,20
018CA:  DATA 53,4D
018CC:  DATA 46,20
018CE:  DATA 45,72
018D0:  DATA 61,73
018D2:  DATA 65,20
018D4:  DATA 41,6C
018D6:  DATA 6C,0D
018D8:  DATA 0A,00
018DA:  DATA 53,74
018DC:  DATA 61,72
018DE:  DATA 74,20
018E0:  DATA 53,4D
018E2:  DATA 46,20
018E4:  DATA 52,65
018E6:  DATA 73,65
018E8:  DATA 74,0D
018EA:  DATA 0A,00
018EC:  DATA 45,6E
018EE:  DATA 64,20
018F0:  DATA 53,4D
018F2:  DATA 46,20
018F4:  DATA 52,65
018F6:  DATA 73,65
018F8:  DATA 74,0D
018FA:  DATA 0A,00
018FC:  DATA 0D,0A
018FE:  DATA 0D,0A
01900:  DATA 0D,0A
01902:  DATA 3D,3D
01904:  DATA 3D,3D
01906:  DATA 3D,3D
01908:  DATA 3D,3D
0190A:  DATA 3D,3D
0190C:  DATA 3D,3D
0190E:  DATA 3D,3D
01910:  DATA 3D,3D
01912:  DATA 3D,3D
01914:  DATA 3D,3D
01916:  DATA 3D,3D
01918:  DATA 3D,3D
0191A:  DATA 3D,3D
0191C:  DATA 3D,3D
0191E:  DATA 3D,3D
01920:  DATA 3D,3D
01922:  DATA 3D,3D
01924:  DATA 3D,3D
01926:  DATA 3D,3D
01928:  DATA 3D,3D
0192A:  DATA 3D,3D
0192C:  DATA 3D,3D
0192E:  DATA 3D,3D
01930:  DATA 3D,3D
01932:  DATA 3D,3D
01934:  DATA 3D,3D
01936:  DATA 3D,3D
01938:  DATA 3D,3D
0193A:  DATA 3D,3D
0193C:  DATA 3D,3D
0193E:  DATA 0D,0A
01940:  DATA 00,00
01942:  DATA 54,68
01944:  DATA 69,73
01946:  DATA 20,69
01948:  DATA 73,20
0194A:  DATA 4D,4F
0194C:  DATA 4D,49
0194E:  DATA 4A,49
01950:  DATA 20,43
01952:  DATA 49,47
01954:  DATA 53,20
01956:  DATA 50,49
01958:  DATA 43,20
0195A:  DATA 42,42
0195C:  DATA 4D,20
0195E:  DATA 66,6F
01960:  DATA 72,20
01962:  DATA 4D,49
01964:  DATA 53,37
01966:  DATA 5F,42
01968:  DATA 42,4D
0196A:  DATA 34,2E
0196C:  DATA 0D,0A
0196E:  DATA 00,00
01970:  DATA 4C,61
01972:  DATA 73,74
01974:  DATA 20,75
01976:  DATA 70,64
01978:  DATA 61,74
0197A:  DATA 65,64
0197C:  DATA 20,6F
0197E:  DATA 6E,20
01980:  DATA 25,73
01982:  DATA 20,25
01984:  DATA 73,2C
01986:  DATA 20,62
01988:  DATA 79,20
0198A:  DATA 49,6E
0198C:  DATA 6F,75
0198E:  DATA 65,2E
01990:  DATA 0D,0A
01992:  DATA 0D,0A
01994:  DATA 00,00
01996:  DATA 32,38
01998:  DATA 2D,4A
0199A:  DATA 75,6C
0199C:  DATA 2D,32
0199E:  DATA 35,00
019A0:  DATA 31,37
019A2:  DATA 3A,33
019A4:  DATA 39,3A
019A6:  DATA 30,39
019A8:  DATA 00,00
019AA:  DATA 5F,5F
019AC:  DATA 5F,5F
019AE:  DATA 43,49
019B0:  DATA 47,53
019B2:  DATA 20,50
019B4:  DATA 49,43
019B6:  DATA 20,53
019B8:  DATA 74,61
019BA:  DATA 72,74
019BC:  DATA 20,4F
019BE:  DATA 70,65
019C0:  DATA 72,61
019C2:  DATA 74,69
019C4:  DATA 6F,6E
019C6:  DATA 5F,5F
019C8:  DATA 5F,5F
019CA:  DATA 5F,0D
019CC:  DATA 0A,0D
019CE:  DATA 0A,00
019D0:  DATA 77,61
019D2:  DATA 69,74
019D4:  DATA 69,6E
019D6:  DATA 67,20
019D8:  DATA 66,6F
019DA:  DATA 72,20
019DC:  DATA 42,4F
019DE:  DATA 53,53
019E0:  DATA 20,50
019E2:  DATA 49,43
019E4:  DATA 20,63
019E6:  DATA 6F,6D
019E8:  DATA 6D,61
019EA:  DATA 6E,64
019EC:  DATA 00,00
019EE:  DATA 0D,0A
019F0:  DATA 77,61
019F2:  DATA 69,74
019F4:  DATA 69,6E
019F6:  DATA 67,20
019F8:  DATA 66,6F
019FA:  DATA 72,20
019FC:  DATA 42,4F
019FE:  DATA 53,53
01A00:  DATA 20,50
01A02:  DATA 49,43
01A04:  DATA 20,63
01A06:  DATA 6F,6D
01A08:  DATA 6D,61
01A0A:  DATA 6E,64
01A0C:  DATA 00,00
01A0E:  DATA 0D,0A
01A10:  DATA 0D,0A
01A12:  DATA 3D,3D
01A14:  DATA 3D,3D
01A16:  DATA 3D,3D
01A18:  DATA 0D,0A
01A1A:  DATA 0D,0A
01A1C:  DATA 46,69
01A1E:  DATA 6E,69
01A20:  DATA 73,68
01A22:  DATA 65,64
01A24:  DATA 20,70
01A26:  DATA 72,6F
01A28:  DATA 63,65
01A2A:  DATA 73,73
01A2C:  DATA 2E,0D
01A2E:  DATA 0A,57
01A30:  DATA 61,69
01A32:  DATA 74,20
01A34:  DATA 66,6F
01A36:  DATA 72,20
01A38:  DATA 42,4F
01A3A:  DATA 53,53
01A3C:  DATA 20,50
01A3E:  DATA 49,43
01A40:  DATA 20,74
01A42:  DATA 75,72
01A44:  DATA 6E,20
01A46:  DATA 6F,66
01A48:  DATA 66,20
01A4A:  DATA 6D,65
01A4C:  DATA 00,00
01A4E:  DATA 45,6E
01A50:  DATA 64,20
01A52:  DATA 6D,61
01A54:  DATA 69,6E
01A56:  DATA 0D,0A
01A58:  DATA 00,00
*
01ADA:  TBLRD*+
01ADC:  MOVF   FF5,F
01ADE:  BTFSC  FD8.2
01AE0:  GOTO   1B08
01AE4:  MOVFF  FF6,863
01AE8:  MOVFF  FF7,864
01AEC:  MOVFF  FF8,865
01AF0:  MOVFF  FF5,866
01AF4:  CALL   1A88
01AF8:  MOVFF  863,FF6
01AFC:  MOVFF  864,FF7
01B00:  MOVFF  865,FF8
01B04:  GOTO   1ADA
01B08:  RETURN 0
01B0A:  TBLRD*+
01B0C:  MOVFF  FF6,824
01B10:  MOVFF  FF7,825
01B14:  MOVFF  FF8,826
01B18:  MOVFF  FF5,866
01B1C:  CALL   1A88
01B20:  MOVFF  824,FF6
01B24:  MOVFF  825,FF7
01B28:  MOVFF  826,FF8
01B2C:  MOVLB  8
01B2E:  DECFSZ x23,F
01B30:  BRA    1B36
01B32:  BRA    1B3C
01B34:  MOVLB  0
01B36:  MOVLB  0
01B38:  GOTO   1B0A
01B3C:  MOVLB  0
01B3E:  RETURN 0
*
01CCC:  MOVLB  4
01CCE:  BTFSS  xC6.7
01CD0:  BRA    1CD8
01CD2:  MOVLB  0
01CD4:  GOTO   1D08
01CD8:  MOVLW  0F
01CDA:  MOVWF  00
01CDC:  SWAPF  xC5,W
01CDE:  ANDWF  00,F
01CE0:  MOVLW  0A
01CE2:  SUBWF  00,W
01CE4:  BTFSS  FD8.0
01CE6:  BRA    1CEE
01CE8:  MOVLB  0
01CEA:  GOTO   1CF8
01CEE:  MOVLW  30
01CF0:  ADDWF  00,F
01CF2:  MOVLB  0
01CF4:  GOTO   1D00
01CF8:  MOVLB  4
01CFA:  MOVF   xC6,W
01CFC:  ADDWF  00,F
01CFE:  MOVLB  0
01D00:  MOVFF  00,866
01D04:  CALL   1A88
01D08:  MOVLW  0F
01D0A:  MOVLB  4
01D0C:  ANDWF  xC5,F
01D0E:  MOVLW  0A
01D10:  SUBWF  xC5,W
01D12:  BTFSS  FD8.0
01D14:  BRA    1D1C
01D16:  MOVLB  0
01D18:  GOTO   1D24
01D1C:  MOVLW  30
01D1E:  MOVLB  0
01D20:  GOTO   1D2C
01D24:  MOVLB  4
01D26:  BCF    xC6.7
01D28:  MOVF   xC6,W
01D2A:  MOVLB  0
01D2C:  MOVLB  4
01D2E:  ADDWF  xC5,F
01D30:  MOVFF  4C5,866
01D34:  MOVLB  0
01D36:  CALL   1A88
01D3A:  RETURN 0
*
01E34:  MOVLB  8
01E36:  MOVF   x81,W
01E38:  ANDLW  07
01E3A:  MOVWF  00
01E3C:  RRCF   x81,W
01E3E:  MOVWF  01
01E40:  RRCF   01,F
01E42:  RRCF   01,F
01E44:  MOVLW  1F
01E46:  ANDWF  01,F
01E48:  MOVF   01,W
01E4A:  ADDWF  x83,W
01E4C:  MOVWF  FE9
01E4E:  MOVLW  00
01E50:  ADDWFC x84,W
01E52:  MOVWF  FEA
01E54:  CLRF   01
01E56:  INCF   01,F
01E58:  INCF   00,F
01E5A:  MOVLB  0
01E5C:  GOTO   1E62
01E60:  RLCF   01,F
01E62:  DECFSZ 00,F
01E64:  GOTO   1E60
01E68:  MOVLB  8
01E6A:  MOVF   x82,F
01E6C:  BTFSS  FD8.2
01E6E:  BRA    1E76
01E70:  MOVLB  0
01E72:  GOTO   1E80
01E76:  MOVF   01,W
01E78:  IORWF  FEF,F
01E7A:  MOVLB  0
01E7C:  GOTO   1E86
01E80:  COMF   01,F
01E82:  MOVF   01,W
01E84:  ANDWF  FEF,F
01E86:  RETURN 0
*
04254:  TSTFSZ 01
04256:  GOTO   4264
0425A:  TSTFSZ 02
0425C:  GOTO   4266
04260:  GOTO   4276
04264:  INCF   02,F
04266:  MOVFF  00,FEE
0426A:  DECFSZ 01,F
0426C:  GOTO   4266
04270:  DECFSZ 02,F
04272:  GOTO   4266
04276:  RETURN 0
*
0465E:  MOVLB  8
04660:  MOVF   x26,W
04662:  CLRF   01
04664:  SUBWF  x25,W
04666:  BTFSS  FD8.0
04668:  BRA    4670
0466A:  MOVLB  0
0466C:  GOTO   467A
04670:  MOVF   x25,W
04672:  MOVWF  00
04674:  MOVLB  0
04676:  GOTO   46A4
0467A:  CLRF   00
0467C:  MOVLW  08
0467E:  MOVLB  8
04680:  MOVWF  x27
04682:  MOVLB  0
04684:  MOVLB  8
04686:  RLCF   x25,F
04688:  RLCF   00,F
0468A:  MOVF   x26,W
0468C:  SUBWF  00,W
0468E:  BTFSC  FD8.0
04690:  MOVWF  00
04692:  RLCF   01,F
04694:  DECFSZ x27,F
04696:  BRA    469C
04698:  BRA    46A2
0469A:  MOVLB  0
0469C:  MOVLB  0
0469E:  GOTO   4684
046A2:  MOVLB  0
046A4:  RETURN 0
046A6:  MOVF   01,W
046A8:  MOVFF  823,825
046AC:  MOVLW  64
046AE:  MOVLB  8
046B0:  MOVWF  x26
046B2:  MOVLB  0
046B4:  CALL   465E
046B8:  MOVFF  00,823
046BC:  MOVF   01,W
046BE:  MOVLW  30
046C0:  BTFSS  FD8.2
046C2:  GOTO   46E6
046C6:  MOVLB  8
046C8:  BTFSC  x24.1
046CA:  BRA    46D2
046CC:  MOVLB  0
046CE:  GOTO   46FA
046D2:  BTFSS  x24.3
046D4:  BRA    46DC
046D6:  MOVLB  0
046D8:  GOTO   46FA
046DC:  BTFSC  x24.4
046DE:  MOVLW  20
046E0:  MOVLB  0
046E2:  GOTO   46F0
046E6:  MOVLB  8
046E8:  BCF    x24.3
046EA:  BCF    x24.4
046EC:  BSF    x24.0
046EE:  MOVLB  0
046F0:  ADDWF  01,F
046F2:  MOVFF  01,866
046F6:  CALL   1A88
046FA:  MOVFF  823,825
046FE:  MOVLW  0A
04700:  MOVLB  8
04702:  MOVWF  x26
04704:  MOVLB  0
04706:  CALL   465E
0470A:  MOVFF  00,823
0470E:  MOVF   01,W
04710:  MOVLW  30
04712:  BTFSS  FD8.2
04714:  GOTO   4734
04718:  MOVLB  8
0471A:  BTFSS  x24.3
0471C:  BRA    4724
0471E:  MOVLB  0
04720:  GOTO   473E
04724:  BTFSC  x24.0
04726:  BRA    472E
04728:  MOVLB  0
0472A:  GOTO   473E
0472E:  BTFSC  x24.4
04730:  MOVLW  20
04732:  MOVLB  0
04734:  ADDWF  01,F
04736:  MOVFF  01,866
0473A:  CALL   1A88
0473E:  MOVLW  30
04740:  MOVLB  8
04742:  ADDWF  x23,F
04744:  MOVFF  823,866
04748:  MOVLB  0
0474A:  CALL   1A88
0474E:  RETURN 0
*
048E4:  MOVFF  FEA,3D4
048E8:  MOVFF  FE9,3D3
048EC:  MOVLB  3
048EE:  SWAPF  xCD,W
048F0:  IORLW  F0
048F2:  MOVWF  xCF
048F4:  ADDWF  xCF,F
048F6:  ADDLW  E2
048F8:  MOVWF  xD0
048FA:  ADDLW  32
048FC:  MOVWF  xD2
048FE:  MOVF   xCD,W
04900:  ANDLW  0F
04902:  ADDWF  xD0,F
04904:  ADDWF  xD0,F
04906:  ADDWF  xD2,F
04908:  ADDLW  E9
0490A:  MOVWF  xD1
0490C:  ADDWF  xD1,F
0490E:  ADDWF  xD1,F
04910:  SWAPF  xCC,W
04912:  ANDLW  0F
04914:  ADDWF  xD1,F
04916:  ADDWF  xD2,F
04918:  RLCF   xD1,F
0491A:  RLCF   xD2,F
0491C:  COMF   xD2,F
0491E:  RLCF   xD2,F
04920:  MOVF   xCC,W
04922:  ANDLW  0F
04924:  ADDWF  xD2,F
04926:  RLCF   xCF,F
04928:  MOVLW  07
0492A:  MOVWF  xCE
0492C:  MOVLW  0A
0492E:  MOVLB  0
04930:  MOVLB  3
04932:  DECF   xD1,F
04934:  ADDWF  xD2,F
04936:  BTFSC  FD8.0
04938:  BRA    4940
0493A:  MOVLB  0
0493C:  GOTO   4930
04940:  MOVLB  0
04942:  MOVLB  3
04944:  DECF   xD0,F
04946:  ADDWF  xD1,F
04948:  BTFSC  FD8.0
0494A:  BRA    4952
0494C:  MOVLB  0
0494E:  GOTO   4942
04952:  MOVLB  0
04954:  MOVLB  3
04956:  DECF   xCF,F
04958:  ADDWF  xD0,F
0495A:  BTFSC  FD8.0
0495C:  BRA    4964
0495E:  MOVLB  0
04960:  GOTO   4954
04964:  MOVLB  0
04966:  MOVLB  3
04968:  DECF   xCE,F
0496A:  ADDWF  xCF,F
0496C:  BTFSC  FD8.0
0496E:  BRA    4976
04970:  MOVLB  0
04972:  GOTO   4966
04976:  MOVLW  03
04978:  MOVWF  FEA
0497A:  MOVLW  CE
0497C:  MOVWF  FE9
0497E:  MOVLW  07
04980:  ANDWF  xD3,W
04982:  BCF    xD3.6
04984:  MOVLB  0
04986:  ADDWF  FE9,F
04988:  MOVLW  00
0498A:  ADDWFC FEA,F
0498C:  MOVF   FE9,W
0498E:  SUBLW  D2
04990:  BTFSS  FD8.2
04992:  GOTO   49A6
04996:  MOVF   FEA,W
04998:  SUBLW  03
0499A:  BTFSS  FD8.2
0499C:  GOTO   49A6
049A0:  MOVLB  3
049A2:  BSF    xD3.6
049A4:  MOVLB  0
049A6:  MOVF   FEF,W
049A8:  MOVWF  00
049AA:  BTFSS  FD8.2
049AC:  GOTO   49D8
049B0:  MOVLB  3
049B2:  BTFSS  xD3.6
049B4:  BRA    49BC
049B6:  MOVLB  0
049B8:  GOTO   49D8
049BC:  BTFSS  xD3.4
049BE:  BRA    49C6
049C0:  MOVLB  0
049C2:  GOTO   49FC
049C6:  BTFSS  xD3.3
049C8:  BRA    49D0
049CA:  MOVLB  0
049CC:  GOTO   49D8
049D0:  MOVLW  20
049D2:  MOVLB  0
049D4:  GOTO   49E2
049D8:  MOVLB  3
049DA:  BSF    xD3.3
049DC:  BCF    xD3.4
049DE:  MOVLW  30
049E0:  MOVLB  0
049E2:  ADDWF  00,F
049E4:  MOVFF  FEA,3CD
049E8:  MOVFF  FE9,3CC
049EC:  MOVFF  00,866
049F0:  CALL   1A88
049F4:  MOVFF  3CD,FEA
049F8:  MOVFF  3CC,FE9
049FC:  MOVF   FEE,W
049FE:  MOVLB  3
04A00:  BTFSC  xD3.6
04A02:  BRA    4A0A
04A04:  MOVLB  0
04A06:  GOTO   498C
04A0A:  MOVLB  0
04A0C:  RETURN 0
*
0774E:  MOVLW  20
07750:  MOVLB  4
07752:  BTFSS  xCD.4
07754:  MOVLW  30
07756:  MOVWF  xCE
07758:  MOVFF  4CC,00
0775C:  BTFSC  00.7
0775E:  BRA    7766
07760:  MOVLB  0
07762:  GOTO   7778
07766:  COMF   00,F
07768:  INCF   00,F
0776A:  MOVFF  00,4CC
0776E:  MOVLW  2D
07770:  MOVWF  xCE
07772:  BSF    xCD.7
07774:  BSF    xCD.0
07776:  MOVLB  0
07778:  MOVF   01,W
0777A:  MOVFF  4CC,825
0777E:  MOVLW  64
07780:  MOVLB  8
07782:  MOVWF  x26
07784:  MOVLB  0
07786:  CALL   465E
0778A:  MOVFF  00,4CC
0778E:  MOVLW  30
07790:  ADDWF  01,W
07792:  MOVLB  4
07794:  MOVWF  xCF
07796:  MOVFF  4CC,825
0779A:  MOVLW  0A
0779C:  MOVLB  8
0779E:  MOVWF  x26
077A0:  MOVLB  0
077A2:  CALL   465E
077A6:  MOVLW  30
077A8:  ADDWF  00,W
077AA:  MOVLB  4
077AC:  MOVWF  xD1
077AE:  MOVLW  30
077B0:  ADDWF  01,W
077B2:  MOVWF  xD0
077B4:  MOVFF  4CE,00
077B8:  MOVLB  0
077BA:  MOVLW  30
077BC:  MOVLB  4
077BE:  SUBWF  xCF,W
077C0:  BTFSS  FD8.2
077C2:  BRA    77CA
077C4:  MOVLB  0
077C6:  GOTO   77D6
077CA:  BSF    xCD.1
077CC:  BTFSC  xCD.7
077CE:  BSF    xCD.2
077D0:  MOVLB  0
077D2:  GOTO   7816
077D6:  MOVFF  4CE,4CF
077DA:  MOVLW  20
077DC:  MOVLB  4
077DE:  MOVWF  xCE
077E0:  MOVLW  30
077E2:  SUBWF  xD0,W
077E4:  BTFSS  FD8.2
077E6:  BRA    77EE
077E8:  MOVLB  0
077EA:  GOTO   77FA
077EE:  BSF    xCD.0
077F0:  BTFSC  xCD.7
077F2:  BSF    xCD.1
077F4:  MOVLB  0
077F6:  GOTO   7816
077FA:  BTFSC  FD8.2
077FC:  BRA    7804
077FE:  MOVLB  4
07800:  BSF    xCD.0
07802:  MOVLB  0
07804:  BTFSS  FD8.2
07806:  GOTO   7816
0780A:  MOVFF  4CF,4D0
0780E:  MOVLW  20
07810:  MOVLB  4
07812:  MOVWF  xCF
07814:  MOVLB  0
07816:  MOVLB  4
07818:  BTFSS  xCD.2
0781A:  BRA    7822
0781C:  MOVLB  0
0781E:  GOTO   783C
07822:  BTFSS  xCD.1
07824:  BRA    782C
07826:  MOVLB  0
07828:  GOTO   7844
0782C:  BTFSS  xCD.0
0782E:  BRA    7836
07830:  MOVLB  0
07832:  GOTO   784C
07836:  MOVLB  0
07838:  GOTO   7854
0783C:  MOVFF  4CE,866
07840:  CALL   1A88
07844:  MOVFF  4CF,866
07848:  CALL   1A88
0784C:  MOVFF  4D0,866
07850:  CALL   1A88
07854:  MOVFF  4D1,866
07858:  CALL   1A88
0785C:  RETURN 0
*
0796E:  BTFSC  FD8.1
07970:  GOTO   797C
07974:  MOVLW  04
07976:  MOVWF  FEA
07978:  MOVLW  5D
0797A:  MOVWF  FE9
0797C:  CLRF   00
0797E:  CLRF   01
07980:  CLRF   02
07982:  CLRF   03
07984:  MOVLB  4
07986:  CLRF   x5D
07988:  CLRF   x5E
0798A:  CLRF   x5F
0798C:  CLRF   x60
0798E:  MOVF   x5C,W
07990:  IORWF  x5B,W
07992:  IORWF  x5A,W
07994:  IORWF  x59,W
07996:  BTFSS  FD8.2
07998:  BRA    79A0
0799A:  MOVLB  0
0799C:  GOTO   7A30
079A0:  MOVLB  0
079A2:  MOVLW  20
079A4:  MOVLB  4
079A6:  MOVWF  x61
079A8:  MOVLB  0
079AA:  BCF    FD8.0
079AC:  MOVLB  4
079AE:  RLCF   x55,F
079B0:  RLCF   x56,F
079B2:  RLCF   x57,F
079B4:  RLCF   x58,F
079B6:  RLCF   x5D,F
079B8:  RLCF   x5E,F
079BA:  RLCF   x5F,F
079BC:  RLCF   x60,F
079BE:  MOVF   x5C,W
079C0:  SUBWF  x60,W
079C2:  BTFSC  FD8.2
079C4:  BRA    79CC
079C6:  MOVLB  0
079C8:  GOTO   79EE
079CC:  MOVF   x5B,W
079CE:  SUBWF  x5F,W
079D0:  BTFSC  FD8.2
079D2:  BRA    79DA
079D4:  MOVLB  0
079D6:  GOTO   79EE
079DA:  MOVF   x5A,W
079DC:  SUBWF  x5E,W
079DE:  BTFSC  FD8.2
079E0:  BRA    79E8
079E2:  MOVLB  0
079E4:  GOTO   79EE
079E8:  MOVF   x59,W
079EA:  SUBWF  x5D,W
079EC:  MOVLB  0
079EE:  BTFSS  FD8.0
079F0:  GOTO   7A16
079F4:  MOVLB  4
079F6:  MOVF   x59,W
079F8:  SUBWF  x5D,F
079FA:  MOVF   x5A,W
079FC:  BTFSS  FD8.0
079FE:  INCFSZ x5A,W
07A00:  SUBWF  x5E,F
07A02:  MOVF   x5B,W
07A04:  BTFSS  FD8.0
07A06:  INCFSZ x5B,W
07A08:  SUBWF  x5F,F
07A0A:  MOVF   x5C,W
07A0C:  BTFSS  FD8.0
07A0E:  INCFSZ x5C,W
07A10:  SUBWF  x60,F
07A12:  BSF    FD8.0
07A14:  MOVLB  0
07A16:  RLCF   00,F
07A18:  RLCF   01,F
07A1A:  RLCF   02,F
07A1C:  RLCF   03,F
07A1E:  MOVLB  4
07A20:  DECFSZ x61,F
07A22:  BRA    7A28
07A24:  BRA    7A2E
07A26:  MOVLB  0
07A28:  MOVLB  0
07A2A:  GOTO   79AA
07A2E:  MOVLB  0
07A30:  MOVFF  45D,FEF
07A34:  MOVFF  45E,FEC
07A38:  MOVFF  45F,FEC
07A3C:  MOVFF  460,FEC
07A40:  MOVF   FED,F
07A42:  MOVF   FED,F
07A44:  MOVF   FED,F
07A46:  RETURN 0
07A48:  MOVF   FE9,W
07A4A:  MOVLB  4
07A4C:  MOVWF  x4D
07A4E:  MOVLW  3B
07A50:  MOVWF  x54
07A52:  MOVLW  9A
07A54:  MOVWF  x53
07A56:  MOVLW  CA
07A58:  MOVWF  x52
07A5A:  CLRF   x51
07A5C:  MOVLW  0A
07A5E:  MOVWF  x4F
07A60:  MOVLB  0
07A62:  BSF    FD8.1
07A64:  MOVLW  04
07A66:  MOVWF  FEA
07A68:  MOVLW  49
07A6A:  MOVWF  FE9
07A6C:  MOVFF  44C,458
07A70:  MOVFF  44B,457
07A74:  MOVFF  44A,456
07A78:  MOVFF  449,455
07A7C:  MOVFF  454,45C
07A80:  MOVFF  453,45B
07A84:  MOVFF  452,45A
07A88:  MOVFF  451,459
07A8C:  CALL   796E
07A90:  MOVF   01,W
07A92:  MOVF   00,F
07A94:  BTFSS  FD8.2
07A96:  GOTO   7AEE
07A9A:  MOVLB  4
07A9C:  MOVF   x4F,W
07A9E:  XORLW  01
07AA0:  BTFSS  FD8.2
07AA2:  BRA    7AAA
07AA4:  MOVLB  0
07AA6:  GOTO   7AEE
07AAA:  MOVF   x4D,W
07AAC:  BTFSS  FD8.2
07AAE:  BRA    7AB6
07AB0:  MOVLB  0
07AB2:  GOTO   7AF4
07AB6:  ANDLW  0F
07AB8:  SUBWF  x4F,W
07ABA:  BTFSS  FD8.2
07ABC:  BRA    7AC4
07ABE:  MOVLB  0
07AC0:  GOTO   7AD0
07AC4:  BTFSS  FD8.0
07AC6:  BRA    7ACE
07AC8:  MOVLB  0
07ACA:  GOTO   7B00
07ACE:  MOVLB  0
07AD0:  MOVLB  4
07AD2:  BTFSS  x4D.7
07AD4:  BRA    7ADC
07AD6:  MOVLB  0
07AD8:  GOTO   7B00
07ADC:  BTFSS  x4D.6
07ADE:  BRA    7AE6
07AE0:  MOVLB  0
07AE2:  GOTO   7AF4
07AE6:  MOVLW  20
07AE8:  MOVLB  0
07AEA:  GOTO   7AF6
07AEE:  MOVLB  4
07AF0:  CLRF   x4D
07AF2:  MOVLB  0
07AF4:  MOVLW  30
07AF6:  ADDWF  00,F
07AF8:  MOVFF  00,866
07AFC:  CALL   1A88
07B00:  BCF    FD8.1
07B02:  MOVFF  454,458
07B06:  MOVFF  453,457
07B0A:  MOVFF  452,456
07B0E:  MOVFF  451,455
07B12:  MOVLB  4
07B14:  CLRF   x5C
07B16:  CLRF   x5B
07B18:  CLRF   x5A
07B1A:  MOVLW  0A
07B1C:  MOVWF  x59
07B1E:  MOVLB  0
07B20:  CALL   796E
07B24:  MOVFF  03,454
07B28:  MOVFF  02,453
07B2C:  MOVFF  01,452
07B30:  MOVFF  00,451
07B34:  MOVLB  4
07B36:  DECFSZ x4F,F
07B38:  BRA    7B3E
07B3A:  BRA    7B44
07B3C:  MOVLB  0
07B3E:  MOVLB  0
07B40:  GOTO   7A62
07B44:  MOVLB  0
07B46:  RETURN 0
*
07D7A:  MOVF   FE9,W
07D7C:  MOVLB  4
07D7E:  MOVWF  x4D
07D80:  BTFSC  x4C.7
07D82:  BRA    7D8A
07D84:  MOVLB  0
07D86:  GOTO   7DA6
07D8A:  DECF   x4D,F
07D8C:  BSF    x4D.5
07D8E:  COMF   x49,F
07D90:  COMF   x4A,F
07D92:  COMF   x4B,F
07D94:  COMF   x4C,F
07D96:  INCF   x49,F
07D98:  BTFSC  FD8.2
07D9A:  INCF   x4A,F
07D9C:  BTFSC  FD8.2
07D9E:  INCF   x4B,F
07DA0:  BTFSC  FD8.2
07DA2:  INCF   x4C,F
07DA4:  MOVLB  0
07DA6:  MOVLW  3B
07DA8:  MOVLB  4
07DAA:  MOVWF  x54
07DAC:  MOVLW  9A
07DAE:  MOVWF  x53
07DB0:  MOVLW  CA
07DB2:  MOVWF  x52
07DB4:  CLRF   x51
07DB6:  MOVLW  0A
07DB8:  MOVWF  x4F
07DBA:  MOVLB  0
07DBC:  BSF    FD8.1
07DBE:  MOVLW  04
07DC0:  MOVWF  FEA
07DC2:  MOVLW  49
07DC4:  MOVWF  FE9
07DC6:  MOVFF  44C,458
07DCA:  MOVFF  44B,457
07DCE:  MOVFF  44A,456
07DD2:  MOVFF  449,455
07DD6:  MOVFF  454,45C
07DDA:  MOVFF  453,45B
07DDE:  MOVFF  452,45A
07DE2:  MOVFF  451,459
07DE6:  CALL   796E
07DEA:  MOVF   01,W
07DEC:  MOVF   00,F
07DEE:  BTFSS  FD8.2
07DF0:  GOTO   7E48
07DF4:  MOVLB  4
07DF6:  MOVF   x4F,W
07DF8:  XORLW  01
07DFA:  BTFSS  FD8.2
07DFC:  BRA    7E04
07DFE:  MOVLB  0
07E00:  GOTO   7E48
07E04:  MOVF   x4D,W
07E06:  BTFSS  FD8.2
07E08:  BRA    7E10
07E0A:  MOVLB  0
07E0C:  GOTO   7E50
07E10:  ANDLW  0F
07E12:  SUBWF  x4F,W
07E14:  BTFSS  FD8.2
07E16:  BRA    7E1E
07E18:  MOVLB  0
07E1A:  GOTO   7E2A
07E1E:  BTFSS  FD8.0
07E20:  BRA    7E28
07E22:  MOVLB  0
07E24:  GOTO   7EAE
07E28:  MOVLB  0
07E2A:  MOVLB  4
07E2C:  BTFSS  x4D.7
07E2E:  BRA    7E36
07E30:  MOVLB  0
07E32:  GOTO   7EAE
07E36:  BTFSS  x4D.6
07E38:  BRA    7E40
07E3A:  MOVLB  0
07E3C:  GOTO   7E50
07E40:  MOVLW  20
07E42:  MOVLB  0
07E44:  GOTO   7EA4
07E48:  MOVLW  20
07E4A:  MOVLB  4
07E4C:  ANDWF  x4D,F
07E4E:  MOVLB  0
07E50:  MOVLB  4
07E52:  BTFSC  x4D.5
07E54:  BRA    7E5C
07E56:  MOVLB  0
07E58:  GOTO   7E78
07E5C:  BCF    x4D.5
07E5E:  MOVF   00,W
07E60:  MOVWF  x4D
07E62:  MOVLW  2D
07E64:  MOVLB  8
07E66:  MOVWF  x66
07E68:  MOVLB  0
07E6A:  CALL   1A88
07E6E:  MOVLB  4
07E70:  MOVF   x4D,W
07E72:  MOVWF  00
07E74:  CLRF   x4D
07E76:  MOVLB  0
07E78:  MOVLW  30
07E7A:  MOVLB  4
07E7C:  BTFSC  x4D.5
07E7E:  BRA    7E86
07E80:  MOVLB  0
07E82:  GOTO   7EA4
07E86:  BCF    x4D.5
07E88:  MOVF   00,W
07E8A:  MOVWF  x4D
07E8C:  MOVLW  2D
07E8E:  MOVLB  8
07E90:  MOVWF  x66
07E92:  MOVLB  0
07E94:  CALL   1A88
07E98:  MOVLB  4
07E9A:  MOVF   x4D,W
07E9C:  MOVWF  00
07E9E:  CLRF   x4D
07EA0:  MOVLW  30
07EA2:  MOVLB  0
07EA4:  ADDWF  00,F
07EA6:  MOVFF  00,866
07EAA:  CALL   1A88
07EAE:  BCF    FD8.1
07EB0:  MOVFF  454,458
07EB4:  MOVFF  453,457
07EB8:  MOVFF  452,456
07EBC:  MOVFF  451,455
07EC0:  MOVLB  4
07EC2:  CLRF   x5C
07EC4:  CLRF   x5B
07EC6:  CLRF   x5A
07EC8:  MOVLW  0A
07ECA:  MOVWF  x59
07ECC:  MOVLB  0
07ECE:  CALL   796E
07ED2:  MOVFF  03,454
07ED6:  MOVFF  02,453
07EDA:  MOVFF  01,452
07EDE:  MOVFF  00,451
07EE2:  MOVLB  4
07EE4:  DECFSZ x4F,F
07EE6:  BRA    7EEC
07EE8:  BRA    7EF2
07EEA:  MOVLB  0
07EEC:  MOVLB  0
07EEE:  GOTO   7DBC
07EF2:  MOVLB  0
07EF4:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01A5A:  MOVLW  08
01A5C:  MOVWF  FEA
01A5E:  MOVLW  7B
01A60:  MOVWF  FE9
01A62:  MOVF   FEF,W
01A64:  BTFSC  FD8.2
01A66:  GOTO   1A86
01A6A:  MOVLW  05
01A6C:  MOVWF  01
01A6E:  CLRF   00
01A70:  DECFSZ 00,F
01A72:  BRA    1A70
01A74:  DECFSZ 01,F
01A76:  BRA    1A6E
01A78:  MOVLW  2E
01A7A:  MOVWF  00
01A7C:  DECFSZ 00,F
01A7E:  BRA    1A7C
01A80:  BRA    1A82
01A82:  DECFSZ FEF,F
01A84:  BRA    1A6A
01A86:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
042B6:  BTFSS  FA6.4
042B8:  GOTO   42B6
042BC:  MOVLB  F
042BE:  MOVWF  x29
042C0:  MOVLB  0
042C2:  GOTO   42F8 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01A88:  BCF    F93.6
01A8A:  BCF    F8A.6
01A8C:  MOVLW  08
01A8E:  MOVWF  01
01A90:  BRA    1A92
01A92:  NOP   
01A94:  BSF    01.7
01A96:  GOTO   1ABE
01A9A:  BCF    01.7
01A9C:  MOVLB  8
01A9E:  RRCF   x66,F
01AA0:  MOVLB  0
01AA2:  BTFSC  FD8.0
01AA4:  BSF    F8A.6
01AA6:  BTFSS  FD8.0
01AA8:  BCF    F8A.6
01AAA:  BSF    01.6
01AAC:  GOTO   1ABE
01AB0:  BCF    01.6
01AB2:  DECFSZ 01,F
01AB4:  GOTO   1A9C
01AB8:  BRA    1ABA
01ABA:  NOP   
01ABC:  BSF    F8A.6
01ABE:  MOVLW  84
01AC0:  MOVWF  FE9
01AC2:  DECFSZ FE9,F
01AC4:  GOTO   1AC2
01AC8:  BRA    1ACA
01ACA:  NOP   
01ACC:  BTFSC  01.7
01ACE:  GOTO   1A9A
01AD2:  BTFSC  01.6
01AD4:  GOTO   1AB0
01AD8:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
01F04:  MOVF   FC9,W
01F06:  MOVFF  89D,FC9
01F0A:  RRCF   FC7,W
01F0C:  BTFSS  FD8.0
01F0E:  GOTO   1F0A
01F12:  MOVFF  FC9,00
01F16:  RETURN 0
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01E88:  MOVLB  8
01E8A:  MOVF   x9E,W
01E8C:  SUBLW  08
01E8E:  BTFSS  FD8.2
01E90:  BRA    1E98
01E92:  MOVLB  0
01E94:  GOTO   1EB0
01E98:  MOVWF  xA0
01E9A:  MOVLB  0
01E9C:  MOVLB  8
01E9E:  RLCF   x9D,F
01EA0:  DECFSZ xA0,F
01EA2:  BRA    1EA8
01EA4:  BRA    1EAE
01EA6:  MOVLB  0
01EA8:  MOVLB  0
01EAA:  GOTO   1E9C
01EAE:  MOVLB  0
01EB0:  BSF    F96.4
01EB2:  BCF    F96.1
01EB4:  BCF    F95.7
01EB6:  BCF    F8C.7
01EB8:  MOVFF  89E,8A0
01EBC:  MOVLB  8
01EBE:  BTFSS  x9D.7
01EC0:  BCF    F8D.1
01EC2:  BTFSC  x9D.7
01EC4:  BSF    F8D.1
01EC6:  RLCF   x9D,F
01EC8:  BSF    F8C.7
01ECA:  MOVLW  02
01ECC:  MOVWF  xA1
01ECE:  MOVLB  0
01ED0:  MOVLB  8
01ED2:  DECFSZ xA1,F
01ED4:  BRA    1EDA
01ED6:  BRA    1EE0
01ED8:  MOVLB  0
01EDA:  MOVLB  0
01EDC:  GOTO   1ED0
01EE0:  RLCF   01,F
01EE2:  BTFSS  F84.4
01EE4:  BCF    01.0
01EE6:  BTFSC  F84.4
01EE8:  BSF    01.0
01EEA:  BCF    F8C.7
01EEC:  MOVLB  0
01EEE:  BRA    1EF0
01EF0:  MOVLB  8
01EF2:  DECFSZ xA0,F
01EF4:  BRA    1EFA
01EF6:  BRA    1F00
01EF8:  MOVLB  0
01EFA:  MOVLB  0
01EFC:  GOTO   1EBC
01F00:  MOVLB  0
01F02:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01BDA:  MOVLB  8
01BDC:  MOVF   x2E,W
01BDE:  SUBLW  10
01BE0:  BTFSS  FD8.2
01BE2:  BRA    1BEA
01BE4:  MOVLB  0
01BE6:  GOTO   1C04
01BEA:  MOVWF  x30
01BEC:  MOVLB  0
01BEE:  MOVLB  8
01BF0:  RLCF   x2C,F
01BF2:  RLCF   x2D,F
01BF4:  DECFSZ x30,F
01BF6:  BRA    1BFC
01BF8:  BRA    1C02
01BFA:  MOVLB  0
01BFC:  MOVLB  0
01BFE:  GOTO   1BEE
01C02:  MOVLB  0
01C04:  BSF    F93.4
01C06:  BCF    F93.5
01C08:  BCF    F93.2
01C0A:  BCF    F8A.2
01C0C:  MOVFF  82E,830
01C10:  MOVLB  8
01C12:  BTFSS  x2D.7
01C14:  BCF    F8A.5
01C16:  BTFSC  x2D.7
01C18:  BSF    F8A.5
01C1A:  RLCF   x2C,F
01C1C:  RLCF   x2D,F
01C1E:  BSF    F8A.2
01C20:  RLCF   01,F
01C22:  RLCF   02,F
01C24:  BTFSS  F81.4
01C26:  BCF    01.0
01C28:  BTFSC  F81.4
01C2A:  BSF    01.0
01C2C:  BCF    F8A.2
01C2E:  DECFSZ x30,F
01C30:  BRA    1C36
01C32:  BRA    1C3C
01C34:  MOVLB  0
01C36:  MOVLB  0
01C38:  GOTO   1C10
01C3C:  MOVLB  0
01C3E:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02F08:  MOVFF  20,00
02F0C:  MOVFF  21,01
02F10:  MOVFF  22,02
02F14:  MOVFF  23,03
02F18:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,8A6
00160:  MOVFF  FE9,8A5
00164:  GOTO   010A
00168:  MOVFF  8A6,FEA
0016C:  MOVFF  8A5,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01B40:  MOVLW  7A
01B42:  MOVWF  FF6
01B44:  MOVLW  01
01B46:  MOVWF  FF7
01B48:  MOVLW  00
01B4A:  MOVWF  FF8
01B4C:  CALL   1ADA
....................    enable_interrupts(INT_RDA3);
01B50:  BSF    F61.5
....................    enable_interrupts(global);
01B52:  MOVLW  C0
01B54:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01B56:  MOVLW  8C
01B58:  MOVWF  FF6
01B5A:  MOVLW  01
01B5C:  MOVWF  FF7
01B5E:  MOVLW  00
01B60:  MOVWF  FF8
01B62:  CALL   1ADA
01B66:  GOTO   9F6C (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
04278:  MOVFF  3BB,03
0427C:  MOVLB  3
0427E:  MOVF   xBA,W
04280:  MOVWF  FE9
04282:  MOVFF  03,FEA
04286:  MOVFF  FEF,3BC
0428A:  MOVFF  3B9,FEA
0428E:  MOVFF  3B8,FE9
04292:  CLRF   00
04294:  CLRF   02
04296:  MOVFF  3BC,01
0429A:  MOVLB  0
0429C:  CALL   4254
....................    *receive_signal_size = 0;
042A0:  MOVFF  3BB,03
042A4:  MOVLB  3
042A6:  MOVF   xBA,W
042A8:  MOVWF  FE9
042AA:  MOVFF  03,FEA
042AE:  CLRF   FEF
042B0:  MOVLB  0
042B2:  GOTO   A006 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01D3C:  MOVLW  98
01D3E:  MOVWF  FF6
01D40:  MOVLW  01
01D42:  MOVWF  FF7
01D44:  MOVLW  00
01D46:  MOVWF  FF8
01D48:  CALL   1ADA
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
01D4C:  BCF    F93.1
01D4E:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
01D50:  MOVLW  0A
01D52:  MOVLB  8
01D54:  MOVWF  x7B
01D56:  MOVLB  0
01D58:  CALL   1A5A
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
01D5C:  MOVLW  0D
01D5E:  MOVLB  8
01D60:  MOVWF  x25
01D62:  MOVLB  0
01D64:  CALL   1C40
01D68:  MOVFF  02,3B9
01D6C:  MOVFF  01,3B8
....................     fprintf(PC, "\t%04LX\r\n", readdata);
01D70:  MOVLW  09
01D72:  MOVLB  8
01D74:  MOVWF  x66
01D76:  MOVLB  0
01D78:  CALL   1A88
01D7C:  MOVFF  3B9,4C5
01D80:  MOVLW  37
01D82:  MOVLB  4
01D84:  MOVWF  xC6
01D86:  MOVLB  0
01D88:  CALL   1CCC
01D8C:  MOVFF  3B8,4C5
01D90:  MOVLW  37
01D92:  MOVLB  4
01D94:  MOVWF  xC6
01D96:  MOVLB  0
01D98:  CALL   1CCC
01D9C:  MOVLW  0D
01D9E:  MOVLB  8
01DA0:  MOVWF  x66
01DA2:  MOVLB  0
01DA4:  CALL   1A88
01DA8:  MOVLW  0A
01DAA:  MOVLB  8
01DAC:  MOVWF  x66
01DAE:  MOVLB  0
01DB0:  CALL   1A88
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
01DB4:  MOVLB  3
01DB6:  INCFSZ xB8,W
01DB8:  BRA    1DBE
01DBA:  BRA    1DC4
01DBC:  MOVLB  0
01DBE:  MOVLB  0
01DC0:  GOTO   1DDC
01DC4:  MOVLB  0
01DC6:  MOVLB  3
01DC8:  INCFSZ xB9,W
01DCA:  BRA    1DD0
01DCC:  BRA    1DD6
01DCE:  MOVLB  0
01DD0:  MOVLB  0
01DD2:  GOTO   1DDC
01DD6:  MOVLB  0
01DD8:  GOTO   1DFC
01DDC:  MOVLB  3
01DDE:  MOVF   xB8,F
01DE0:  BTFSC  FD8.2
01DE2:  BRA    1DEA
01DE4:  MOVLB  0
01DE6:  GOTO   1E10
01DEA:  MOVLB  0
01DEC:  MOVLB  3
01DEE:  MOVF   xB9,F
01DF0:  BTFSC  FD8.2
01DF2:  BRA    1DFA
01DF4:  MOVLB  0
01DF6:  GOTO   1E10
01DFA:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
01DFC:  MOVLW  AC
01DFE:  MOVWF  FF6
01E00:  MOVLW  01
01E02:  MOVWF  FF7
01E04:  MOVLW  00
01E06:  MOVWF  FF8
01E08:  CALL   1ADA
....................     } else {
01E0C:  GOTO   1E20
....................         fprintf(PC, "\tConnect successful\r\n");
01E10:  MOVLW  BE
01E12:  MOVWF  FF6
01E14:  MOVLW  01
01E16:  MOVWF  FF7
01E18:  MOVLW  00
01E1A:  MOVWF  FF8
01E1C:  CALL   1ADA
....................     }
....................     fprintf(PC, "\tComplete\r\n");
01E20:  MOVLW  D4
01E22:  MOVWF  FF6
01E24:  MOVLW  01
01E26:  MOVWF  FF7
01E28:  MOVLW  00
01E2A:  MOVWF  FF8
01E2C:  CALL   1ADA
01E30:  GOTO   9F70 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
01C40:  MOVFF  825,82C
01C44:  GOTO   1B6A
01C48:  MOVFF  02,827
01C4C:  MOVFF  01,826
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
01C50:  BCF    F93.1
01C52:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01C54:  MOVLW  0D
01C56:  MOVWF  00
01C58:  DECFSZ 00,F
01C5A:  BRA    1C58
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
01C5C:  MOVFF  827,82D
01C60:  MOVFF  826,82C
01C64:  MOVLW  10
01C66:  MOVLB  8
01C68:  MOVWF  x2E
01C6A:  MOVLW  01
01C6C:  MOVWF  x2F
01C6E:  MOVLB  0
01C70:  CALL   1BDA
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
01C74:  MOVLW  0D
01C76:  MOVWF  00
01C78:  DECFSZ 00,F
01C7A:  BRA    1C78
....................     output_high(ADC_CS); // Set CS pin high to end communication
01C7C:  BCF    F93.1
01C7E:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
01C80:  MOVLW  0D
01C82:  MOVWF  00
01C84:  DECFSZ 00,F
01C86:  BRA    1C84
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01C88:  BCF    F93.1
01C8A:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01C8C:  MOVLW  0D
01C8E:  MOVWF  00
01C90:  DECFSZ 00,F
01C92:  BRA    1C90
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
01C94:  MOVLB  8
01C96:  CLRF   x2D
01C98:  CLRF   x2C
01C9A:  MOVLW  10
01C9C:  MOVWF  x2E
01C9E:  MOVLW  01
01CA0:  MOVWF  x2F
01CA2:  MOVLB  0
01CA4:  CALL   1BDA
01CA8:  MOVFF  02,829
01CAC:  MOVFF  01,828
....................     output_high(ADC_CS); 
01CB0:  BCF    F93.1
01CB2:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01CB4:  MOVLB  8
01CB6:  MOVF   x28,W
01CB8:  MOVWF  x2A
01CBA:  MOVF   x29,W
01CBC:  ANDLW  0F
01CBE:  MOVWF  x2B
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01CC0:  MOVF   x2A,W
01CC2:  MOVWF  01
01CC4:  MOVF   x2B,W
01CC6:  MOVWF  02
01CC8:  MOVLB  0
01CCA:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); 
....................     output_high(DAC2_CS); 
....................     delay_ms(10); 
....................     mcp4901_1_write(0); 
....................     mcp4901_2_write(0); 
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); 
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); 
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
048A6:  MOVFF  824,828
048AA:  MOVFF  823,827
048AE:  GOTO   4750
048B2:  MOVFF  02,826
048B6:  MOVFF  01,825
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); 
048BA:  BCF    F93.3
048BC:  BCF    F8A.3
....................    delay_us(10); 
048BE:  MOVLW  0D
048C0:  MOVWF  00
048C2:  DECFSZ 00,F
048C4:  BRA    48C2
....................    spi_xfer(ADCDAC_STREAM, cmd); 
048C6:  MOVFF  826,82D
048CA:  MOVFF  825,82C
048CE:  MOVLW  10
048D0:  MOVLB  8
048D2:  MOVWF  x2E
048D4:  MOVLW  01
048D6:  MOVWF  x2F
048D8:  MOVLB  0
048DA:  CALL   1BDA
....................    output_high(DAC1_CS); 
048DE:  BCF    F93.3
048E0:  BSF    F8A.3
048E2:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
....................    delay_us(10); 
....................    spi_xfer(ADCDAC_STREAM, cmd); 
....................    output_high(DAC2_CS); 
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01B6A:  MOVLB  8
01B6C:  BCF    x2D.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01B6E:  BCF    x2D.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01B70:  BCF    x2D.2
....................     cmd.fields.reserved3 = 0;
01B72:  BCF    x2D.3
....................     cmd.fields.coding = 1; // Two's complement
01B74:  BSF    x2D.4
....................     cmd.fields.range = 1; // Normal mode
01B76:  BSF    x2D.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01B78:  BCF    x2D.6
....................     cmd.fields.shadow = 0; // Direct access
01B7A:  BCF    x2D.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01B7C:  BSF    x2E.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01B7E:  BSF    x2E.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01B80:  MOVF   x2C,W
01B82:  ANDLW  01
01B84:  MOVWF  01
01B86:  BCF    x2E.2
01B88:  BTFSC  01.0
01B8A:  BSF    x2E.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01B8C:  BCF    FD8.0
01B8E:  RRCF   x2C,W
01B90:  ANDLW  01
01B92:  MOVWF  01
01B94:  BCF    x2E.3
01B96:  BTFSC  01.0
01B98:  BSF    x2E.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01B9A:  RRCF   x2C,W
01B9C:  MOVWF  00
01B9E:  RRCF   00,F
01BA0:  MOVLW  3F
01BA2:  ANDWF  00,F
01BA4:  MOVF   00,W
01BA6:  ANDLW  01
01BA8:  MOVWF  01
01BAA:  BCF    x2E.4
01BAC:  BTFSC  01.0
01BAE:  BSF    x2E.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01BB0:  RRCF   x2C,W
01BB2:  MOVWF  00
01BB4:  RRCF   00,F
01BB6:  RRCF   00,F
01BB8:  MOVLW  1F
01BBA:  ANDWF  00,F
01BBC:  MOVF   00,W
01BBE:  ANDLW  01
01BC0:  MOVWF  01
01BC2:  BCF    x2E.5
01BC4:  BTFSC  01.0
01BC6:  BSF    x2E.5
....................     cmd.fields.seq = 0; // Random mode
01BC8:  BCF    x2E.6
....................     cmd.fields.write = 1; // Read operation
01BCA:  BSF    x2E.7
.................... 
.................... 
....................     return cmd.value;
01BCC:  MOVF   x2D,W
01BCE:  MOVWF  01
01BD0:  MOVF   x2E,W
01BD2:  MOVWF  02
01BD4:  MOVLB  0
01BD6:  GOTO   1C48 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
04750:  MOVLB  8
04752:  BCF    x2A.7
....................    cmd.fields.buffer = 1; // Buffer used
04754:  BSF    x2A.6
....................    cmd.fields.gain = 1; // Gain 1x
04756:  BSF    x2A.5
....................    cmd.fields.shutdown = 1; // Normal operation
04758:  BSF    x2A.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
0475A:  RRCF   x28,W
0475C:  MOVWF  x2C
0475E:  RRCF   x27,W
04760:  MOVWF  x2B
04762:  RRCF   x2C,F
04764:  RRCF   x2B,F
04766:  RRCF   x2C,F
04768:  RRCF   x2B,F
0476A:  RRCF   x2C,F
0476C:  RRCF   x2B,F
0476E:  RRCF   x2C,F
04770:  RRCF   x2B,F
04772:  RRCF   x2C,F
04774:  RRCF   x2B,F
04776:  RRCF   x2C,F
04778:  RRCF   x2B,F
0477A:  MOVLW  01
0477C:  ANDWF  x2C,F
0477E:  MOVF   x2B,W
04780:  ANDLW  01
04782:  MOVWF  00
04784:  CLRF   03
04786:  MOVF   00,W
04788:  MOVWF  01
0478A:  BCF    x2A.3
0478C:  BTFSC  01.0
0478E:  BSF    x2A.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
04790:  RRCF   x28,W
04792:  MOVWF  x2C
04794:  RRCF   x27,W
04796:  MOVWF  x2B
04798:  RRCF   x2C,F
0479A:  RRCF   x2B,F
0479C:  RRCF   x2C,F
0479E:  RRCF   x2B,F
047A0:  RRCF   x2C,F
047A2:  RRCF   x2B,F
047A4:  RRCF   x2C,F
047A6:  RRCF   x2B,F
047A8:  RRCF   x2C,F
047AA:  RRCF   x2B,F
047AC:  MOVLW  03
047AE:  ANDWF  x2C,F
047B0:  MOVF   x2B,W
047B2:  ANDLW  01
047B4:  MOVWF  00
047B6:  CLRF   03
047B8:  MOVF   00,W
047BA:  MOVWF  01
047BC:  BCF    x2A.2
047BE:  BTFSC  01.0
047C0:  BSF    x2A.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
047C2:  RRCF   x28,W
047C4:  MOVWF  x2C
047C6:  RRCF   x27,W
047C8:  MOVWF  x2B
047CA:  RRCF   x2C,F
047CC:  RRCF   x2B,F
047CE:  RRCF   x2C,F
047D0:  RRCF   x2B,F
047D2:  RRCF   x2C,F
047D4:  RRCF   x2B,F
047D6:  RRCF   x2C,F
047D8:  RRCF   x2B,F
047DA:  MOVLW  07
047DC:  ANDWF  x2C,F
047DE:  MOVF   x2B,W
047E0:  ANDLW  01
047E2:  MOVWF  00
047E4:  CLRF   03
047E6:  MOVF   00,W
047E8:  MOVWF  01
047EA:  BCF    x2A.1
047EC:  BTFSC  01.0
047EE:  BSF    x2A.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
047F0:  RRCF   x28,W
047F2:  MOVWF  x2C
047F4:  RRCF   x27,W
047F6:  MOVWF  x2B
047F8:  RRCF   x2C,F
047FA:  RRCF   x2B,F
047FC:  RRCF   x2C,F
047FE:  RRCF   x2B,F
04800:  RRCF   x2C,F
04802:  RRCF   x2B,F
04804:  MOVLW  0F
04806:  ANDWF  x2C,F
04808:  MOVF   x2B,W
0480A:  ANDLW  01
0480C:  MOVWF  00
0480E:  CLRF   03
04810:  MOVF   00,W
04812:  MOVWF  01
04814:  BCF    x2A.0
04816:  BTFSC  01.0
04818:  BSF    x2A.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
0481A:  RRCF   x28,W
0481C:  MOVWF  x2C
0481E:  RRCF   x27,W
04820:  MOVWF  x2B
04822:  RRCF   x2C,F
04824:  RRCF   x2B,F
04826:  RRCF   x2C,F
04828:  RRCF   x2B,F
0482A:  MOVLW  1F
0482C:  ANDWF  x2C,F
0482E:  MOVF   x2B,W
04830:  ANDLW  01
04832:  MOVWF  00
04834:  CLRF   03
04836:  MOVF   00,W
04838:  MOVWF  01
0483A:  BCF    x29.7
0483C:  BTFSC  01.0
0483E:  BSF    x29.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
04840:  RRCF   x28,W
04842:  MOVWF  x2C
04844:  RRCF   x27,W
04846:  MOVWF  x2B
04848:  RRCF   x2C,F
0484A:  RRCF   x2B,F
0484C:  MOVLW  3F
0484E:  ANDWF  x2C,F
04850:  MOVF   x2B,W
04852:  ANDLW  01
04854:  MOVWF  00
04856:  CLRF   03
04858:  MOVF   00,W
0485A:  MOVWF  01
0485C:  BCF    x29.6
0485E:  BTFSC  01.0
04860:  BSF    x29.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
04862:  BCF    FD8.0
04864:  RRCF   x28,W
04866:  MOVWF  x2C
04868:  RRCF   x27,W
0486A:  MOVWF  x2B
0486C:  MOVF   x2B,W
0486E:  ANDLW  01
04870:  MOVWF  00
04872:  CLRF   03
04874:  MOVF   00,W
04876:  MOVWF  01
04878:  BCF    x29.5
0487A:  BTFSC  01.0
0487C:  BSF    x29.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
0487E:  MOVF   x27,W
04880:  ANDLW  01
04882:  MOVWF  00
04884:  CLRF   03
04886:  MOVF   00,W
04888:  MOVWF  01
0488A:  BCF    x29.4
0488C:  BTFSC  01.0
0488E:  BSF    x29.4
....................    cmd.fields.reserved = 0; // Reserved bits
04890:  BCF    x29.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
04892:  BCF    x29.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
04894:  BCF    x29.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
04896:  BCF    x29.0
.................... 
....................    return cmd.value;
04898:  MOVF   x29,W
0489A:  MOVWF  01
0489C:  MOVF   x2A,W
0489E:  MOVWF  02
048A0:  MOVLB  0
048A2:  GOTO   48B2 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02F1A:  MOVLB  8
02F1C:  MOVF   x7B,W
02F1E:  XORLW  00
02F20:  MOVLB  0
02F22:  BTFSC  FD8.2
02F24:  GOTO   2F34
02F28:  XORLW  01
02F2A:  BTFSC  FD8.2
02F2C:  GOTO   2F9C
02F30:  GOTO   2FFC
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02F34:  MOVLB  8
02F36:  CLRF   x84
02F38:  CLRF   x83
02F3A:  MOVLB  0
02F3C:  MOVLB  8
02F3E:  MOVF   x84,W
02F40:  SUBWF  x82,W
02F42:  BTFSC  FD8.0
02F44:  BRA    2F4C
02F46:  MOVLB  0
02F48:  GOTO   2F98
02F4C:  MOVLB  0
02F4E:  BTFSS  FD8.2
02F50:  GOTO   2F66
02F54:  MOVLB  8
02F56:  MOVF   x81,W
02F58:  SUBWF  x83,W
02F5A:  BTFSS  FD8.0
02F5C:  BRA    2F64
02F5E:  MOVLB  0
02F60:  GOTO   2F98
02F64:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02F66:  MOVLB  8
02F68:  MOVF   x7F,W
02F6A:  ADDWF  x83,W
02F6C:  MOVWF  FE9
02F6E:  MOVF   x80,W
02F70:  ADDWFC x84,W
02F72:  MOVWF  FEA
02F74:  MOVFF  FEF,887
02F78:  MOVFF  887,89D
02F7C:  MOVLW  08
02F7E:  MOVWF  x9E
02F80:  MOVLW  01
02F82:  MOVWF  x9F
02F84:  MOVLB  0
02F86:  CALL   1E88
02F8A:  MOVLB  8
02F8C:  INCF   x83,F
02F8E:  BTFSC  FD8.2
02F90:  INCF   x84,F
02F92:  MOVLB  0
02F94:  GOTO   2F3C
....................          break;
02F98:  GOTO   3000
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02F9C:  MOVLB  8
02F9E:  CLRF   x86
02FA0:  CLRF   x85
02FA2:  MOVLB  0
02FA4:  MOVLB  8
02FA6:  MOVF   x86,W
02FA8:  SUBWF  x82,W
02FAA:  BTFSC  FD8.0
02FAC:  BRA    2FB4
02FAE:  MOVLB  0
02FB0:  GOTO   2FF8
02FB4:  MOVLB  0
02FB6:  BTFSS  FD8.2
02FB8:  GOTO   2FCE
02FBC:  MOVLB  8
02FBE:  MOVF   x81,W
02FC0:  SUBWF  x85,W
02FC2:  BTFSS  FD8.0
02FC4:  BRA    2FCC
02FC6:  MOVLB  0
02FC8:  GOTO   2FF8
02FCC:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02FCE:  MOVLB  8
02FD0:  MOVF   x7F,W
02FD2:  ADDWF  x85,W
02FD4:  MOVWF  FE9
02FD6:  MOVF   x80,W
02FD8:  ADDWFC x86,W
02FDA:  MOVWF  FEA
02FDC:  MOVFF  FEF,887
02FE0:  MOVFF  887,89D
02FE4:  MOVLB  0
02FE6:  CALL   1F04
02FEA:  MOVLB  8
02FEC:  INCF   x85,F
02FEE:  BTFSC  FD8.2
02FF0:  INCF   x86,F
02FF2:  MOVLB  0
02FF4:  GOTO   2FA4
....................          break;
02FF8:  GOTO   3000
....................          
....................       default:
....................          break;
02FFC:  GOTO   3000
....................    }
....................    return;
03000:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01F18:  MOVLB  8
01F1A:  MOVF   x81,W
01F1C:  XORLW  00
01F1E:  MOVLB  0
01F20:  BTFSC  FD8.2
01F22:  GOTO   1F32
01F26:  XORLW  01
01F28:  BTFSC  FD8.2
01F2A:  GOTO   203C
01F2E:  GOTO   2138
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01F32:  MOVLB  8
01F34:  CLRF   x90
01F36:  CLRF   x8F
01F38:  MOVLB  0
01F3A:  MOVLB  8
01F3C:  MOVF   x90,W
01F3E:  SUBWF  x88,W
01F40:  BTFSC  FD8.0
01F42:  BRA    1F4A
01F44:  MOVLB  0
01F46:  GOTO   1F96
01F4A:  MOVLB  0
01F4C:  BTFSS  FD8.2
01F4E:  GOTO   1F64
01F52:  MOVLB  8
01F54:  MOVF   x87,W
01F56:  SUBWF  x8F,W
01F58:  BTFSS  FD8.0
01F5A:  BRA    1F62
01F5C:  MOVLB  0
01F5E:  GOTO   1F96
01F62:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01F64:  MOVLB  8
01F66:  MOVF   x85,W
01F68:  ADDWF  x8F,W
01F6A:  MOVWF  FE9
01F6C:  MOVF   x86,W
01F6E:  ADDWFC x90,W
01F70:  MOVWF  FEA
01F72:  MOVFF  FEF,89B
01F76:  MOVFF  89B,89D
01F7A:  MOVLW  08
01F7C:  MOVWF  x9E
01F7E:  MOVLW  01
01F80:  MOVWF  x9F
01F82:  MOVLB  0
01F84:  CALL   1E88
01F88:  MOVLB  8
01F8A:  INCF   x8F,F
01F8C:  BTFSC  FD8.2
01F8E:  INCF   x90,F
01F90:  MOVLB  0
01F92:  GOTO   1F3A
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01F96:  MOVLB  8
01F98:  CLRF   x94
01F9A:  CLRF   x93
01F9C:  CLRF   x92
01F9E:  CLRF   x91
01FA0:  MOVLB  0
01FA2:  MOVLB  8
01FA4:  MOVF   x94,W
01FA6:  SUBWF  x8E,W
01FA8:  BTFSC  FD8.0
01FAA:  BRA    1FB2
01FAC:  MOVLB  0
01FAE:  GOTO   2038
01FB2:  MOVLB  0
01FB4:  BTFSS  FD8.2
01FB6:  GOTO   1FFC
01FBA:  MOVLB  8
01FBC:  MOVF   x93,W
01FBE:  SUBWF  x8D,W
01FC0:  BTFSC  FD8.0
01FC2:  BRA    1FCA
01FC4:  MOVLB  0
01FC6:  GOTO   2038
01FCA:  MOVLB  0
01FCC:  BTFSS  FD8.2
01FCE:  GOTO   1FFC
01FD2:  MOVLB  8
01FD4:  MOVF   x92,W
01FD6:  SUBWF  x8C,W
01FD8:  BTFSC  FD8.0
01FDA:  BRA    1FE2
01FDC:  MOVLB  0
01FDE:  GOTO   2038
01FE2:  MOVLB  0
01FE4:  BTFSS  FD8.2
01FE6:  GOTO   1FFC
01FEA:  MOVLB  8
01FEC:  MOVF   x8B,W
01FEE:  SUBWF  x91,W
01FF0:  BTFSS  FD8.0
01FF2:  BRA    1FFA
01FF4:  MOVLB  0
01FF6:  GOTO   2038
01FFA:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
01FFC:  MOVLB  8
01FFE:  MOVF   x89,W
02000:  ADDWF  x91,W
02002:  MOVWF  FE9
02004:  MOVF   x8A,W
02006:  ADDWFC x92,W
02008:  MOVWF  FEA
0200A:  MOVLW  02
0200C:  MOVWF  x9D
0200E:  MOVLW  08
02010:  MOVWF  x9E
02012:  MOVLW  01
02014:  MOVWF  x9F
02016:  MOVLB  0
02018:  CALL   1E88
0201C:  MOVFF  01,FEF
02020:  MOVLW  01
02022:  MOVLB  8
02024:  ADDWF  x91,F
02026:  BTFSC  FD8.0
02028:  INCF   x92,F
0202A:  BTFSC  FD8.2
0202C:  INCF   x93,F
0202E:  BTFSC  FD8.2
02030:  INCF   x94,F
02032:  MOVLB  0
02034:  GOTO   1FA2
....................          break;
02038:  GOTO   213C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0203C:  MOVLB  8
0203E:  CLRF   x96
02040:  CLRF   x95
02042:  MOVLB  0
02044:  MOVLB  8
02046:  MOVF   x96,W
02048:  SUBWF  x88,W
0204A:  BTFSC  FD8.0
0204C:  BRA    2054
0204E:  MOVLB  0
02050:  GOTO   2098
02054:  MOVLB  0
02056:  BTFSS  FD8.2
02058:  GOTO   206E
0205C:  MOVLB  8
0205E:  MOVF   x87,W
02060:  SUBWF  x95,W
02062:  BTFSS  FD8.0
02064:  BRA    206C
02066:  MOVLB  0
02068:  GOTO   2098
0206C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0206E:  MOVLB  8
02070:  MOVF   x85,W
02072:  ADDWF  x95,W
02074:  MOVWF  FE9
02076:  MOVF   x86,W
02078:  ADDWFC x96,W
0207A:  MOVWF  FEA
0207C:  MOVFF  FEF,89B
02080:  MOVFF  89B,89D
02084:  MOVLB  0
02086:  CALL   1F04
0208A:  MOVLB  8
0208C:  INCF   x95,F
0208E:  BTFSC  FD8.2
02090:  INCF   x96,F
02092:  MOVLB  0
02094:  GOTO   2044
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02098:  MOVLB  8
0209A:  CLRF   x9A
0209C:  CLRF   x99
0209E:  CLRF   x98
020A0:  CLRF   x97
020A2:  MOVLB  0
020A4:  MOVLB  8
020A6:  MOVF   x9A,W
020A8:  SUBWF  x8E,W
020AA:  BTFSC  FD8.0
020AC:  BRA    20B4
020AE:  MOVLB  0
020B0:  GOTO   2134
020B4:  MOVLB  0
020B6:  BTFSS  FD8.2
020B8:  GOTO   20FE
020BC:  MOVLB  8
020BE:  MOVF   x99,W
020C0:  SUBWF  x8D,W
020C2:  BTFSC  FD8.0
020C4:  BRA    20CC
020C6:  MOVLB  0
020C8:  GOTO   2134
020CC:  MOVLB  0
020CE:  BTFSS  FD8.2
020D0:  GOTO   20FE
020D4:  MOVLB  8
020D6:  MOVF   x98,W
020D8:  SUBWF  x8C,W
020DA:  BTFSC  FD8.0
020DC:  BRA    20E4
020DE:  MOVLB  0
020E0:  GOTO   2134
020E4:  MOVLB  0
020E6:  BTFSS  FD8.2
020E8:  GOTO   20FE
020EC:  MOVLB  8
020EE:  MOVF   x8B,W
020F0:  SUBWF  x97,W
020F2:  BTFSS  FD8.0
020F4:  BRA    20FC
020F6:  MOVLB  0
020F8:  GOTO   2134
020FC:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
020FE:  MOVLB  8
02100:  MOVF   x89,W
02102:  ADDWF  x97,W
02104:  MOVWF  FE9
02106:  MOVF   x8A,W
02108:  ADDWFC x98,W
0210A:  MOVWF  FEA
0210C:  MOVLW  01
0210E:  MOVWF  x9D
02110:  MOVLB  0
02112:  CALL   1F04
02116:  MOVF   01,W
02118:  MOVFF  00,FEF
0211C:  MOVLW  01
0211E:  MOVLB  8
02120:  ADDWF  x97,F
02122:  BTFSC  FD8.0
02124:  INCF   x98,F
02126:  BTFSC  FD8.2
02128:  INCF   x99,F
0212A:  BTFSC  FD8.2
0212C:  INCF   x9A,F
0212E:  MOVLB  0
02130:  GOTO   20A4
....................          break;
02134:  GOTO   213C
....................    
....................          
....................       default:
....................          break;
02138:  GOTO   213C
....................    }
....................    return;
0213C:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03002:  MOVLB  8
03004:  MOVF   x7B,W
03006:  XORLW  00
03008:  MOVLB  0
0300A:  BTFSC  FD8.2
0300C:  GOTO   301C
03010:  XORLW  01
03012:  BTFSC  FD8.2
03014:  GOTO   30CA
03018:  GOTO   3168
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0301C:  MOVLB  8
0301E:  CLRF   x86
03020:  MOVLB  0
03022:  MOVLB  8
03024:  MOVF   x81,W
03026:  SUBWF  x86,W
03028:  BTFSS  FD8.0
0302A:  BRA    3032
0302C:  MOVLB  0
0302E:  GOTO   3062
03032:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03034:  MOVLB  8
03036:  MOVF   x86,W
03038:  ADDWF  x7F,W
0303A:  MOVWF  FE9
0303C:  MOVLW  00
0303E:  ADDWFC x80,W
03040:  MOVWF  FEA
03042:  MOVFF  FEF,88C
03046:  MOVFF  88C,89D
0304A:  MOVLW  08
0304C:  MOVWF  x9E
0304E:  MOVLW  01
03050:  MOVWF  x9F
03052:  MOVLB  0
03054:  CALL   1E88
03058:  MOVLB  8
0305A:  INCF   x86,F
0305C:  MOVLB  0
0305E:  GOTO   3022
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03062:  MOVLB  8
03064:  CLRF   x88
03066:  CLRF   x87
03068:  MOVLB  0
0306A:  MOVLB  8
0306C:  MOVF   x88,W
0306E:  SUBWF  x85,W
03070:  BTFSC  FD8.0
03072:  BRA    307A
03074:  MOVLB  0
03076:  GOTO   30C6
0307A:  MOVLB  0
0307C:  BTFSS  FD8.2
0307E:  GOTO   3094
03082:  MOVLB  8
03084:  MOVF   x84,W
03086:  SUBWF  x87,W
03088:  BTFSS  FD8.0
0308A:  BRA    3092
0308C:  MOVLB  0
0308E:  GOTO   30C6
03092:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03094:  MOVLB  8
03096:  MOVF   x82,W
03098:  ADDWF  x87,W
0309A:  MOVWF  FE9
0309C:  MOVF   x83,W
0309E:  ADDWFC x88,W
030A0:  MOVWF  FEA
030A2:  MOVFF  FEF,88C
030A6:  MOVFF  88C,89D
030AA:  MOVLW  08
030AC:  MOVWF  x9E
030AE:  MOVLW  01
030B0:  MOVWF  x9F
030B2:  MOVLB  0
030B4:  CALL   1E88
030B8:  MOVLB  8
030BA:  INCF   x87,F
030BC:  BTFSC  FD8.2
030BE:  INCF   x88,F
030C0:  MOVLB  0
030C2:  GOTO   306A
....................          break;
030C6:  GOTO   316C
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
030CA:  MOVLB  8
030CC:  CLRF   x89
030CE:  MOVLB  0
030D0:  MOVLB  8
030D2:  MOVF   x81,W
030D4:  SUBWF  x89,W
030D6:  BTFSS  FD8.0
030D8:  BRA    30E0
030DA:  MOVLB  0
030DC:  GOTO   3108
030E0:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
030E2:  MOVLB  8
030E4:  MOVF   x89,W
030E6:  ADDWF  x7F,W
030E8:  MOVWF  FE9
030EA:  MOVLW  00
030EC:  ADDWFC x80,W
030EE:  MOVWF  FEA
030F0:  MOVFF  FEF,88C
030F4:  MOVFF  88C,89D
030F8:  MOVLB  0
030FA:  CALL   1F04
030FE:  MOVLB  8
03100:  INCF   x89,F
03102:  MOVLB  0
03104:  GOTO   30D0
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03108:  MOVLB  8
0310A:  CLRF   x8B
0310C:  CLRF   x8A
0310E:  MOVLB  0
03110:  MOVLB  8
03112:  MOVF   x8B,W
03114:  SUBWF  x85,W
03116:  BTFSC  FD8.0
03118:  BRA    3120
0311A:  MOVLB  0
0311C:  GOTO   3164
03120:  MOVLB  0
03122:  BTFSS  FD8.2
03124:  GOTO   313A
03128:  MOVLB  8
0312A:  MOVF   x84,W
0312C:  SUBWF  x8A,W
0312E:  BTFSS  FD8.0
03130:  BRA    3138
03132:  MOVLB  0
03134:  GOTO   3164
03138:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0313A:  MOVLB  8
0313C:  MOVF   x82,W
0313E:  ADDWF  x8A,W
03140:  MOVWF  FE9
03142:  MOVF   x83,W
03144:  ADDWFC x8B,W
03146:  MOVWF  FEA
03148:  MOVFF  FEF,88C
0314C:  MOVFF  88C,89D
03150:  MOVLB  0
03152:  CALL   1F04
03156:  MOVLB  8
03158:  INCF   x8A,F
0315A:  BTFSC  FD8.2
0315C:  INCF   x8B,F
0315E:  MOVLB  0
03160:  GOTO   3110
....................          break;
03164:  GOTO   316C
....................          
....................       default:
....................          break;
03168:  GOTO   316C
....................    }
....................    return;
0316C:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0615A:  MOVFF  4CD,881
0615E:  MOVLW  01
06160:  MOVLB  8
06162:  MOVWF  x82
06164:  MOVLW  0F
06166:  MOVWF  x84
06168:  MOVLW  89
0616A:  MOVWF  x83
0616C:  MOVLB  0
0616E:  CALL   1E34
06172:  MOVFF  4CD,881
06176:  MOVLB  8
06178:  CLRF   x82
0617A:  MOVLW  0F
0617C:  MOVWF  x84
0617E:  MOVLW  92
06180:  MOVWF  x83
06182:  MOVLB  0
06184:  CALL   1E34
06188:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
0316E:  MOVLW  05
03170:  MOVLB  8
03172:  MOVWF  x7F
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03174:  MOVFF  87D,881
03178:  CLRF   x82
0317A:  MOVLW  0F
0317C:  MOVWF  x84
0317E:  MOVLW  89
03180:  MOVWF  x83
03182:  MOVLB  0
03184:  CALL   1E34
03188:  MOVFF  87D,881
0318C:  MOVLB  8
0318E:  CLRF   x82
03190:  MOVLW  0F
03192:  MOVWF  x84
03194:  MOVLW  92
03196:  MOVWF  x83
03198:  MOVLB  0
0319A:  CALL   1E34
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0319E:  MOVFF  87E,884
031A2:  MOVFF  87D,883
031A6:  MOVFF  87C,882
031AA:  MOVFF  87B,881
031AE:  MOVLW  08
031B0:  MOVLB  8
031B2:  MOVWF  x86
031B4:  MOVLW  7F
031B6:  MOVWF  x85
031B8:  CLRF   x88
031BA:  MOVLW  01
031BC:  MOVWF  x87
031BE:  MOVLW  08
031C0:  MOVWF  x8A
031C2:  MOVLW  80
031C4:  MOVWF  x89
031C6:  CLRF   x8E
031C8:  CLRF   x8D
031CA:  CLRF   x8C
031CC:  MOVLW  01
031CE:  MOVWF  x8B
031D0:  MOVLB  0
031D2:  CALL   1F18
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
031D6:  MOVFF  87D,881
031DA:  MOVLW  01
031DC:  MOVLB  8
031DE:  MOVWF  x82
031E0:  MOVLW  0F
031E2:  MOVWF  x84
031E4:  MOVLW  89
031E6:  MOVWF  x83
031E8:  MOVLB  0
031EA:  CALL   1E34
031EE:  MOVFF  87D,881
031F2:  MOVLB  8
031F4:  CLRF   x82
031F6:  MOVLW  0F
031F8:  MOVWF  x84
031FA:  MOVLW  92
031FC:  MOVWF  x83
031FE:  MOVLB  0
03200:  CALL   1E34
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03204:  MOVLB  8
03206:  MOVF   x80,W
03208:  MOVWF  01
0320A:  MOVLB  0
0320C:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05486:  MOVLB  4
05488:  MOVF   x08,F
0548A:  BTFSC  FD8.2
0548C:  BRA    5494
0548E:  MOVLB  0
05490:  GOTO   55EC
05494:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05496:  MOVLW  06
05498:  MOVLB  4
0549A:  MOVWF  x0F
0549C:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0549E:  MOVLW  D8
054A0:  MOVLB  4
054A2:  MOVWF  x10
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
054A4:  MOVFF  40D,41C
054A8:  MOVFF  40E,41D
054AC:  CLRF   x1E
054AE:  CLRF   x1F
054B0:  MOVF   x1C,W
054B2:  MOVWF  00
054B4:  CLRF   01
054B6:  CLRF   02
054B8:  CLRF   03
054BA:  MOVFF  00,411
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
054BE:  MOVFF  40C,41C
054C2:  MOVFF  40D,41D
054C6:  MOVFF  40E,41E
054CA:  CLRF   x1F
054CC:  MOVF   x1C,W
054CE:  MOVWF  00
054D0:  CLRF   01
054D2:  CLRF   02
054D4:  CLRF   03
054D6:  MOVFF  00,412
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
054DA:  MOVF   x0B,W
054DC:  MOVWF  00
054DE:  CLRF   01
054E0:  CLRF   02
054E2:  CLRF   03
054E4:  MOVFF  00,413
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
054E8:  MOVFF  409,881
054EC:  MOVLB  8
054EE:  CLRF   x82
054F0:  MOVLW  0F
054F2:  MOVWF  x84
054F4:  MOVLW  89
054F6:  MOVWF  x83
054F8:  MOVLB  0
054FA:  CALL   1E34
054FE:  MOVFF  409,881
05502:  MOVLB  8
05504:  CLRF   x82
05506:  MOVLW  0F
05508:  MOVWF  x84
0550A:  MOVLW  92
0550C:  MOVWF  x83
0550E:  MOVLB  0
05510:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05514:  MOVFF  40A,87E
05518:  MOVFF  409,87D
0551C:  MOVFF  408,87C
05520:  MOVFF  407,87B
05524:  MOVLW  04
05526:  MOVLB  8
05528:  MOVWF  x80
0552A:  MOVLW  0F
0552C:  MOVWF  x7F
0552E:  CLRF   x82
05530:  MOVLW  01
05532:  MOVWF  x81
05534:  MOVLB  0
05536:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
0553A:  MOVFF  409,881
0553E:  MOVLW  01
05540:  MOVLB  8
05542:  MOVWF  x82
05544:  MOVLW  0F
05546:  MOVWF  x84
05548:  MOVLW  89
0554A:  MOVWF  x83
0554C:  MOVLB  0
0554E:  CALL   1E34
05552:  MOVFF  409,881
05556:  MOVLB  8
05558:  CLRF   x82
0555A:  MOVLW  0F
0555C:  MOVWF  x84
0555E:  MOVLW  92
05560:  MOVWF  x83
05562:  MOVLB  0
05564:  CALL   1E34
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05568:  MOVFF  409,881
0556C:  MOVLB  8
0556E:  CLRF   x82
05570:  MOVLW  0F
05572:  MOVWF  x84
05574:  MOVLW  89
05576:  MOVWF  x83
05578:  MOVLB  0
0557A:  CALL   1E34
0557E:  MOVFF  409,881
05582:  MOVLB  8
05584:  CLRF   x82
05586:  MOVLW  0F
05588:  MOVWF  x84
0558A:  MOVLW  92
0558C:  MOVWF  x83
0558E:  MOVLB  0
05590:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05594:  MOVFF  40A,87E
05598:  MOVFF  409,87D
0559C:  MOVFF  408,87C
055A0:  MOVFF  407,87B
055A4:  MOVLW  04
055A6:  MOVLB  8
055A8:  MOVWF  x80
055AA:  MOVLW  10
055AC:  MOVWF  x7F
055AE:  CLRF   x82
055B0:  MOVLW  04
055B2:  MOVWF  x81
055B4:  MOVLB  0
055B6:  CALL   2F1A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
055BA:  MOVFF  409,881
055BE:  MOVLW  01
055C0:  MOVLB  8
055C2:  MOVWF  x82
055C4:  MOVLW  0F
055C6:  MOVWF  x84
055C8:  MOVLW  89
055CA:  MOVWF  x83
055CC:  MOVLB  0
055CE:  CALL   1E34
055D2:  MOVFF  409,881
055D6:  MOVLB  8
055D8:  CLRF   x82
055DA:  MOVLW  0F
055DC:  MOVWF  x84
055DE:  MOVLW  92
055E0:  MOVWF  x83
055E2:  MOVLB  0
055E4:  CALL   1E34
....................    }
055E8:  GOTO   576C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
055EC:  MOVLB  4
055EE:  DECFSZ x08,W
055F0:  BRA    55F6
055F2:  BRA    55FC
055F4:  MOVLB  0
055F6:  MOVLB  0
055F8:  GOTO   576C
055FC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
055FE:  MOVLW  06
05600:  MOVLB  4
05602:  MOVWF  x14
05604:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05606:  MOVLW  DC
05608:  MOVLB  4
0560A:  MOVWF  x15
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
0560C:  MOVFF  40E,41C
05610:  CLRF   x1D
05612:  CLRF   x1E
05614:  CLRF   x1F
05616:  MOVF   x1C,W
05618:  MOVWF  00
0561A:  CLRF   01
0561C:  CLRF   02
0561E:  CLRF   03
05620:  MOVFF  00,416
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05624:  MOVFF  40D,41C
05628:  MOVFF  40E,41D
0562C:  CLRF   x1E
0562E:  CLRF   x1F
05630:  MOVF   x1C,W
05632:  MOVWF  00
05634:  CLRF   01
05636:  CLRF   02
05638:  CLRF   03
0563A:  MOVFF  00,417
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0563E:  MOVFF  40C,41C
05642:  MOVFF  40D,41D
05646:  MOVFF  40E,41E
0564A:  CLRF   x1F
0564C:  MOVF   x1C,W
0564E:  MOVWF  00
05650:  CLRF   01
05652:  CLRF   02
05654:  CLRF   03
05656:  MOVFF  00,418
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0565A:  MOVF   x0B,W
0565C:  MOVWF  00
0565E:  CLRF   01
05660:  CLRF   02
05662:  CLRF   03
05664:  MOVFF  00,419
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05668:  MOVFF  409,881
0566C:  MOVLB  8
0566E:  CLRF   x82
05670:  MOVLW  0F
05672:  MOVWF  x84
05674:  MOVLW  89
05676:  MOVWF  x83
05678:  MOVLB  0
0567A:  CALL   1E34
0567E:  MOVFF  409,881
05682:  MOVLB  8
05684:  CLRF   x82
05686:  MOVLW  0F
05688:  MOVWF  x84
0568A:  MOVLW  92
0568C:  MOVWF  x83
0568E:  MOVLB  0
05690:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05694:  MOVFF  40A,87E
05698:  MOVFF  409,87D
0569C:  MOVFF  408,87C
056A0:  MOVFF  407,87B
056A4:  MOVLW  04
056A6:  MOVLB  8
056A8:  MOVWF  x80
056AA:  MOVLW  14
056AC:  MOVWF  x7F
056AE:  CLRF   x82
056B0:  MOVLW  01
056B2:  MOVWF  x81
056B4:  MOVLB  0
056B6:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
056BA:  MOVFF  409,881
056BE:  MOVLW  01
056C0:  MOVLB  8
056C2:  MOVWF  x82
056C4:  MOVLW  0F
056C6:  MOVWF  x84
056C8:  MOVLW  89
056CA:  MOVWF  x83
056CC:  MOVLB  0
056CE:  CALL   1E34
056D2:  MOVFF  409,881
056D6:  MOVLB  8
056D8:  CLRF   x82
056DA:  MOVLW  0F
056DC:  MOVWF  x84
056DE:  MOVLW  92
056E0:  MOVWF  x83
056E2:  MOVLB  0
056E4:  CALL   1E34
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
056E8:  MOVFF  409,881
056EC:  MOVLB  8
056EE:  CLRF   x82
056F0:  MOVLW  0F
056F2:  MOVWF  x84
056F4:  MOVLW  89
056F6:  MOVWF  x83
056F8:  MOVLB  0
056FA:  CALL   1E34
056FE:  MOVFF  409,881
05702:  MOVLB  8
05704:  CLRF   x82
05706:  MOVLW  0F
05708:  MOVWF  x84
0570A:  MOVLW  92
0570C:  MOVWF  x83
0570E:  MOVLB  0
05710:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05714:  MOVFF  40A,87E
05718:  MOVFF  409,87D
0571C:  MOVFF  408,87C
05720:  MOVFF  407,87B
05724:  MOVLW  04
05726:  MOVLB  8
05728:  MOVWF  x80
0572A:  MOVLW  15
0572C:  MOVWF  x7F
0572E:  CLRF   x82
05730:  MOVLW  05
05732:  MOVWF  x81
05734:  MOVLB  0
05736:  CALL   2F1A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0573A:  MOVFF  409,881
0573E:  MOVLW  01
05740:  MOVLB  8
05742:  MOVWF  x82
05744:  MOVLW  0F
05746:  MOVWF  x84
05748:  MOVLW  89
0574A:  MOVWF  x83
0574C:  MOVLB  0
0574E:  CALL   1E34
05752:  MOVFF  409,881
05756:  MOVLB  8
05758:  CLRF   x82
0575A:  MOVLW  0F
0575C:  MOVWF  x84
0575E:  MOVLW  92
05760:  MOVWF  x83
05762:  MOVLB  0
05764:  CALL   1E34
....................    }
05768:  GOTO   576C
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0576C:  MOVLB  4
0576E:  CLRF   x1A
05770:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05772:  MOVFF  40A,87E
05776:  MOVFF  409,87D
0577A:  MOVFF  408,87C
0577E:  MOVFF  407,87B
05782:  CALL   316E
05786:  MOVF   01,W
05788:  ANDLW  01
0578A:  SUBLW  01
0578C:  BTFSS  FD8.2
0578E:  GOTO   57E0
....................       if(timeout_counter > 10)
05792:  MOVLB  4
05794:  MOVF   x1A,W
05796:  SUBLW  0A
05798:  BTFSS  FD8.0
0579A:  BRA    57A2
0579C:  MOVLB  0
0579E:  GOTO   57B4
057A2:  MOVLB  0
....................          delay_ms(200);
057A4:  MOVLW  C8
057A6:  MOVLB  8
057A8:  MOVWF  x7B
057AA:  MOVLB  0
057AC:  CALL   1A5A
057B0:  GOTO   57C0
....................       else
....................          delay_ms(10);   
057B4:  MOVLW  0A
057B6:  MOVLB  8
057B8:  MOVWF  x7B
057BA:  MOVLB  0
057BC:  CALL   1A5A
....................       
....................       if(timeout_counter > 100){
057C0:  MOVLB  4
057C2:  MOVF   x1A,W
057C4:  SUBLW  64
057C6:  BTFSS  FD8.0
057C8:  BRA    57D0
057CA:  MOVLB  0
057CC:  GOTO   57D6
057D0:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
057D2:  GOTO   57E0
....................       }  
....................       timeout_counter++;
057D6:  MOVLB  4
057D8:  INCF   x1A,F
057DA:  MOVLB  0
057DC:  GOTO   5772
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
057E0:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03592:  MOVLB  8
03594:  MOVF   x64,F
03596:  BTFSC  FD8.2
03598:  BRA    35A0
0359A:  MOVLB  0
0359C:  GOTO   36F6
035A0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
035A2:  MOVLW  06
035A4:  MOVLB  8
035A6:  MOVWF  x6B
035A8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
035AA:  MOVLW  20
035AC:  MOVLB  8
035AE:  MOVWF  x6C
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
035B0:  MOVFF  869,878
035B4:  MOVFF  86A,879
035B8:  CLRF   x7A
035BA:  CLRF   x7B
035BC:  MOVF   x78,W
035BE:  MOVWF  00
035C0:  CLRF   01
035C2:  CLRF   02
035C4:  CLRF   03
035C6:  MOVFF  00,86D
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
035CA:  MOVFF  868,878
035CE:  MOVFF  869,879
035D2:  MOVFF  86A,87A
035D6:  CLRF   x7B
035D8:  MOVF   x78,W
035DA:  MOVWF  00
035DC:  CLRF   01
035DE:  CLRF   02
035E0:  CLRF   03
035E2:  MOVFF  00,86E
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
035E6:  MOVF   x67,W
035E8:  MOVWF  00
035EA:  CLRF   01
035EC:  CLRF   02
035EE:  CLRF   03
035F0:  MOVFF  00,86F
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
035F4:  MOVFF  865,881
035F8:  CLRF   x82
035FA:  MOVLW  0F
035FC:  MOVWF  x84
035FE:  MOVLW  89
03600:  MOVWF  x83
03602:  MOVLB  0
03604:  CALL   1E34
03608:  MOVFF  865,881
0360C:  MOVLB  8
0360E:  CLRF   x82
03610:  MOVLW  0F
03612:  MOVWF  x84
03614:  MOVLW  92
03616:  MOVWF  x83
03618:  MOVLB  0
0361A:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0361E:  MOVFF  866,87E
03622:  MOVFF  865,87D
03626:  MOVFF  864,87C
0362A:  MOVFF  863,87B
0362E:  MOVLW  08
03630:  MOVLB  8
03632:  MOVWF  x80
03634:  MOVLW  6B
03636:  MOVWF  x7F
03638:  CLRF   x82
0363A:  MOVLW  01
0363C:  MOVWF  x81
0363E:  MOVLB  0
03640:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
03644:  MOVFF  865,881
03648:  MOVLW  01
0364A:  MOVLB  8
0364C:  MOVWF  x82
0364E:  MOVLW  0F
03650:  MOVWF  x84
03652:  MOVLW  89
03654:  MOVWF  x83
03656:  MOVLB  0
03658:  CALL   1E34
0365C:  MOVFF  865,881
03660:  MOVLB  8
03662:  CLRF   x82
03664:  MOVLW  0F
03666:  MOVWF  x84
03668:  MOVLW  92
0366A:  MOVWF  x83
0366C:  MOVLB  0
0366E:  CALL   1E34
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03672:  MOVFF  865,881
03676:  MOVLB  8
03678:  CLRF   x82
0367A:  MOVLW  0F
0367C:  MOVWF  x84
0367E:  MOVLW  89
03680:  MOVWF  x83
03682:  MOVLB  0
03684:  CALL   1E34
03688:  MOVFF  865,881
0368C:  MOVLB  8
0368E:  CLRF   x82
03690:  MOVLW  0F
03692:  MOVWF  x84
03694:  MOVLW  92
03696:  MOVWF  x83
03698:  MOVLB  0
0369A:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0369E:  MOVFF  866,87E
036A2:  MOVFF  865,87D
036A6:  MOVFF  864,87C
036AA:  MOVFF  863,87B
036AE:  MOVLW  08
036B0:  MOVLB  8
036B2:  MOVWF  x80
036B4:  MOVLW  6C
036B6:  MOVWF  x7F
036B8:  CLRF   x82
036BA:  MOVLW  04
036BC:  MOVWF  x81
036BE:  MOVLB  0
036C0:  CALL   2F1A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
036C4:  MOVFF  865,881
036C8:  MOVLW  01
036CA:  MOVLB  8
036CC:  MOVWF  x82
036CE:  MOVLW  0F
036D0:  MOVWF  x84
036D2:  MOVLW  89
036D4:  MOVWF  x83
036D6:  MOVLB  0
036D8:  CALL   1E34
036DC:  MOVFF  865,881
036E0:  MOVLB  8
036E2:  CLRF   x82
036E4:  MOVLW  0F
036E6:  MOVWF  x84
036E8:  MOVLW  92
036EA:  MOVWF  x83
036EC:  MOVLB  0
036EE:  CALL   1E34
....................    }
036F2:  GOTO   3874
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
036F6:  MOVLB  8
036F8:  DECFSZ x64,W
036FA:  BRA    3700
036FC:  BRA    3706
036FE:  MOVLB  0
03700:  MOVLB  0
03702:  GOTO   3874
03706:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03708:  MOVLW  06
0370A:  MOVLB  8
0370C:  MOVWF  x70
0370E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
03710:  MOVLW  21
03712:  MOVLB  8
03714:  MOVWF  x71
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
03716:  MOVFF  86A,878
0371A:  CLRF   x79
0371C:  CLRF   x7A
0371E:  CLRF   x7B
03720:  MOVF   x78,W
03722:  MOVWF  00
03724:  CLRF   01
03726:  CLRF   02
03728:  CLRF   03
0372A:  MOVFF  00,872
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0372E:  MOVFF  869,878
03732:  MOVFF  86A,879
03736:  CLRF   x7A
03738:  CLRF   x7B
0373A:  MOVF   x78,W
0373C:  MOVWF  00
0373E:  CLRF   01
03740:  CLRF   02
03742:  CLRF   03
03744:  MOVFF  00,873
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03748:  MOVFF  868,878
0374C:  MOVFF  869,879
03750:  MOVFF  86A,87A
03754:  CLRF   x7B
03756:  MOVF   x78,W
03758:  MOVWF  00
0375A:  CLRF   01
0375C:  CLRF   02
0375E:  CLRF   03
03760:  MOVFF  00,874
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03764:  MOVF   x67,W
03766:  MOVWF  00
03768:  CLRF   01
0376A:  CLRF   02
0376C:  CLRF   03
0376E:  MOVFF  00,875
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03772:  MOVFF  865,881
03776:  CLRF   x82
03778:  MOVLW  0F
0377A:  MOVWF  x84
0377C:  MOVLW  89
0377E:  MOVWF  x83
03780:  MOVLB  0
03782:  CALL   1E34
03786:  MOVFF  865,881
0378A:  MOVLB  8
0378C:  CLRF   x82
0378E:  MOVLW  0F
03790:  MOVWF  x84
03792:  MOVLW  92
03794:  MOVWF  x83
03796:  MOVLB  0
03798:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0379C:  MOVFF  866,87E
037A0:  MOVFF  865,87D
037A4:  MOVFF  864,87C
037A8:  MOVFF  863,87B
037AC:  MOVLW  08
037AE:  MOVLB  8
037B0:  MOVWF  x80
037B2:  MOVLW  70
037B4:  MOVWF  x7F
037B6:  CLRF   x82
037B8:  MOVLW  01
037BA:  MOVWF  x81
037BC:  MOVLB  0
037BE:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
037C2:  MOVFF  865,881
037C6:  MOVLW  01
037C8:  MOVLB  8
037CA:  MOVWF  x82
037CC:  MOVLW  0F
037CE:  MOVWF  x84
037D0:  MOVLW  89
037D2:  MOVWF  x83
037D4:  MOVLB  0
037D6:  CALL   1E34
037DA:  MOVFF  865,881
037DE:  MOVLB  8
037E0:  CLRF   x82
037E2:  MOVLW  0F
037E4:  MOVWF  x84
037E6:  MOVLW  92
037E8:  MOVWF  x83
037EA:  MOVLB  0
037EC:  CALL   1E34
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
037F0:  MOVFF  865,881
037F4:  MOVLB  8
037F6:  CLRF   x82
037F8:  MOVLW  0F
037FA:  MOVWF  x84
037FC:  MOVLW  89
037FE:  MOVWF  x83
03800:  MOVLB  0
03802:  CALL   1E34
03806:  MOVFF  865,881
0380A:  MOVLB  8
0380C:  CLRF   x82
0380E:  MOVLW  0F
03810:  MOVWF  x84
03812:  MOVLW  92
03814:  MOVWF  x83
03816:  MOVLB  0
03818:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0381C:  MOVFF  866,87E
03820:  MOVFF  865,87D
03824:  MOVFF  864,87C
03828:  MOVFF  863,87B
0382C:  MOVLW  08
0382E:  MOVLB  8
03830:  MOVWF  x80
03832:  MOVLW  71
03834:  MOVWF  x7F
03836:  CLRF   x82
03838:  MOVLW  05
0383A:  MOVWF  x81
0383C:  MOVLB  0
0383E:  CALL   2F1A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03842:  MOVFF  865,881
03846:  MOVLW  01
03848:  MOVLB  8
0384A:  MOVWF  x82
0384C:  MOVLW  0F
0384E:  MOVWF  x84
03850:  MOVLW  89
03852:  MOVWF  x83
03854:  MOVLB  0
03856:  CALL   1E34
0385A:  MOVFF  865,881
0385E:  MOVLB  8
03860:  CLRF   x82
03862:  MOVLW  0F
03864:  MOVWF  x84
03866:  MOVLW  92
03868:  MOVWF  x83
0386A:  MOVLB  0
0386C:  CALL   1E34
....................    }
03870:  GOTO   3874
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03874:  MOVLB  8
03876:  CLRF   x76
03878:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0387A:  MOVFF  866,87E
0387E:  MOVFF  865,87D
03882:  MOVFF  864,87C
03886:  MOVFF  863,87B
0388A:  CALL   316E
0388E:  MOVF   01,W
03890:  ANDLW  01
03892:  SUBLW  01
03894:  BTFSS  FD8.2
03896:  GOTO   38E8
....................       if(timeout_counter > 10)
0389A:  MOVLB  8
0389C:  MOVF   x76,W
0389E:  SUBLW  0A
038A0:  BTFSS  FD8.0
038A2:  BRA    38AA
038A4:  MOVLB  0
038A6:  GOTO   38BC
038AA:  MOVLB  0
....................          delay_ms(200);
038AC:  MOVLW  C8
038AE:  MOVLB  8
038B0:  MOVWF  x7B
038B2:  MOVLB  0
038B4:  CALL   1A5A
038B8:  GOTO   38C8
....................       else
....................          delay_ms(10);   
038BC:  MOVLW  0A
038BE:  MOVLB  8
038C0:  MOVWF  x7B
038C2:  MOVLB  0
038C4:  CALL   1A5A
....................       
....................       if(timeout_counter > 100){
038C8:  MOVLB  8
038CA:  MOVF   x76,W
038CC:  SUBLW  64
038CE:  BTFSS  FD8.0
038D0:  BRA    38D8
038D2:  MOVLB  0
038D4:  GOTO   38DE
038D8:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
038DA:  GOTO   38E8
....................       }  
....................       timeout_counter++;
038DE:  MOVLB  8
038E0:  INCF   x76,F
038E2:  MOVLB  0
038E4:  GOTO   387A
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
038E8:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02204:  MOVLB  4
02206:  MOVF   xCC,F
02208:  BTFSC  FD8.2
0220A:  BRA    2212
0220C:  MOVLB  0
0220E:  GOTO   2304
02212:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02214:  MOVLW  03
02216:  MOVLB  4
02218:  MOVWF  xD9
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0221A:  MOVFF  4D1,4E3
0221E:  MOVFF  4D2,4E4
02222:  CLRF   xE5
02224:  CLRF   xE6
02226:  MOVF   xE3,W
02228:  MOVWF  00
0222A:  CLRF   01
0222C:  CLRF   02
0222E:  CLRF   03
02230:  MOVFF  00,4DA
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02234:  MOVFF  4D0,4E3
02238:  MOVFF  4D1,4E4
0223C:  MOVFF  4D2,4E5
02240:  CLRF   xE6
02242:  MOVF   xE3,W
02244:  MOVWF  00
02246:  CLRF   01
02248:  CLRF   02
0224A:  CLRF   03
0224C:  MOVFF  00,4DB
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02250:  MOVF   xCF,W
02252:  MOVWF  00
02254:  CLRF   01
02256:  CLRF   02
02258:  CLRF   03
0225A:  MOVFF  00,4DC
....................             
....................       output_low(flash_stream.cs_pin);
0225E:  MOVFF  4CD,881
02262:  MOVLB  8
02264:  CLRF   x82
02266:  MOVLW  0F
02268:  MOVWF  x84
0226A:  MOVLW  89
0226C:  MOVWF  x83
0226E:  MOVLB  0
02270:  CALL   1E34
02274:  MOVFF  4CD,881
02278:  MOVLB  8
0227A:  CLRF   x82
0227C:  MOVLW  0F
0227E:  MOVWF  x84
02280:  MOVLW  92
02282:  MOVWF  x83
02284:  MOVLB  0
02286:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0228A:  MOVFF  4CE,884
0228E:  MOVFF  4CD,883
02292:  MOVFF  4CC,882
02296:  MOVFF  4CB,881
0229A:  MOVLW  04
0229C:  MOVLB  8
0229E:  MOVWF  x86
022A0:  MOVLW  D9
022A2:  MOVWF  x85
022A4:  CLRF   x88
022A6:  MOVLW  04
022A8:  MOVWF  x87
022AA:  MOVFF  4D4,88A
022AE:  MOVFF  4D3,889
022B2:  MOVFF  4D8,88E
022B6:  MOVFF  4D7,88D
022BA:  MOVFF  4D6,88C
022BE:  MOVFF  4D5,88B
022C2:  MOVLB  0
022C4:  CALL   1F18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
022C8:  MOVLW  02
022CA:  MOVWF  00
022CC:  DECFSZ 00,F
022CE:  BRA    22CC
022D0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
022D2:  MOVFF  4CD,881
022D6:  MOVLW  01
022D8:  MOVLB  8
022DA:  MOVWF  x82
022DC:  MOVLW  0F
022DE:  MOVWF  x84
022E0:  MOVLW  89
022E2:  MOVWF  x83
022E4:  MOVLB  0
022E6:  CALL   1E34
022EA:  MOVFF  4CD,881
022EE:  MOVLB  8
022F0:  CLRF   x82
022F2:  MOVLW  0F
022F4:  MOVWF  x84
022F6:  MOVLW  92
022F8:  MOVWF  x83
022FA:  MOVLB  0
022FC:  CALL   1E34
....................    }
02300:  GOTO   241A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02304:  MOVLB  4
02306:  DECFSZ xCC,W
02308:  BRA    230E
0230A:  BRA    2314
0230C:  MOVLB  0
0230E:  MOVLB  0
02310:  GOTO   241A
02314:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02316:  MOVLW  13
02318:  MOVLB  4
0231A:  MOVWF  xDD
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0231C:  MOVFF  4D2,4E3
02320:  CLRF   xE4
02322:  CLRF   xE5
02324:  CLRF   xE6
02326:  MOVF   xE3,W
02328:  MOVWF  00
0232A:  CLRF   01
0232C:  CLRF   02
0232E:  CLRF   03
02330:  MOVFF  00,4DE
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02334:  MOVFF  4D1,4E3
02338:  MOVFF  4D2,4E4
0233C:  CLRF   xE5
0233E:  CLRF   xE6
02340:  MOVF   xE3,W
02342:  MOVWF  00
02344:  CLRF   01
02346:  CLRF   02
02348:  CLRF   03
0234A:  MOVFF  00,4DF
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0234E:  MOVFF  4D0,4E3
02352:  MOVFF  4D1,4E4
02356:  MOVFF  4D2,4E5
0235A:  CLRF   xE6
0235C:  MOVF   xE3,W
0235E:  MOVWF  00
02360:  CLRF   01
02362:  CLRF   02
02364:  CLRF   03
02366:  MOVFF  00,4E0
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0236A:  MOVF   xCF,W
0236C:  MOVWF  00
0236E:  CLRF   01
02370:  CLRF   02
02372:  CLRF   03
02374:  MOVFF  00,4E1
....................    
....................       output_low(flash_stream.cs_pin);
02378:  MOVFF  4CD,881
0237C:  MOVLB  8
0237E:  CLRF   x82
02380:  MOVLW  0F
02382:  MOVWF  x84
02384:  MOVLW  89
02386:  MOVWF  x83
02388:  MOVLB  0
0238A:  CALL   1E34
0238E:  MOVFF  4CD,881
02392:  MOVLB  8
02394:  CLRF   x82
02396:  MOVLW  0F
02398:  MOVWF  x84
0239A:  MOVLW  92
0239C:  MOVWF  x83
0239E:  MOVLB  0
023A0:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
023A4:  MOVFF  4CE,884
023A8:  MOVFF  4CD,883
023AC:  MOVFF  4CC,882
023B0:  MOVFF  4CB,881
023B4:  MOVLW  04
023B6:  MOVLB  8
023B8:  MOVWF  x86
023BA:  MOVLW  DD
023BC:  MOVWF  x85
023BE:  CLRF   x88
023C0:  MOVLW  05
023C2:  MOVWF  x87
023C4:  MOVFF  4D4,88A
023C8:  MOVFF  4D3,889
023CC:  MOVFF  4D8,88E
023D0:  MOVFF  4D7,88D
023D4:  MOVFF  4D6,88C
023D8:  MOVFF  4D5,88B
023DC:  MOVLB  0
023DE:  CALL   1F18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
023E2:  MOVLW  02
023E4:  MOVWF  00
023E6:  DECFSZ 00,F
023E8:  BRA    23E6
023EA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
023EC:  MOVFF  4CD,881
023F0:  MOVLW  01
023F2:  MOVLB  8
023F4:  MOVWF  x82
023F6:  MOVLW  0F
023F8:  MOVWF  x84
023FA:  MOVLW  89
023FC:  MOVWF  x83
023FE:  MOVLB  0
02400:  CALL   1E34
02404:  MOVFF  4CD,881
02408:  MOVLB  8
0240A:  CLRF   x82
0240C:  MOVLW  0F
0240E:  MOVWF  x84
02410:  MOVLW  92
02412:  MOVWF  x83
02414:  MOVLB  0
02416:  CALL   1E34
....................    }
....................    return;
0241A:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0320E:  MOVLB  8
03210:  MOVF   x64,F
03212:  BTFSC  FD8.2
03214:  BRA    321C
03216:  MOVLB  0
03218:  GOTO   338A
0321C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0321E:  MOVLW  06
03220:  MOVLB  8
03222:  MOVWF  x6F
03224:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03226:  MOVLW  02
03228:  MOVLB  8
0322A:  MOVWF  x70
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0322C:  MOVFF  869,87C
03230:  MOVFF  86A,87D
03234:  CLRF   x7E
03236:  CLRF   x7F
03238:  MOVF   x7C,W
0323A:  MOVWF  00
0323C:  CLRF   01
0323E:  CLRF   02
03240:  CLRF   03
03242:  MOVFF  00,871
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03246:  MOVFF  868,87C
0324A:  MOVFF  869,87D
0324E:  MOVFF  86A,87E
03252:  CLRF   x7F
03254:  MOVF   x7C,W
03256:  MOVWF  00
03258:  CLRF   01
0325A:  CLRF   02
0325C:  CLRF   03
0325E:  MOVFF  00,872
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03262:  MOVF   x67,W
03264:  MOVWF  00
03266:  CLRF   01
03268:  CLRF   02
0326A:  CLRF   03
0326C:  MOVFF  00,873
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03270:  MOVFF  865,881
03274:  CLRF   x82
03276:  MOVLW  0F
03278:  MOVWF  x84
0327A:  MOVLW  89
0327C:  MOVWF  x83
0327E:  MOVLB  0
03280:  CALL   1E34
03284:  MOVFF  865,881
03288:  MOVLB  8
0328A:  CLRF   x82
0328C:  MOVLW  0F
0328E:  MOVWF  x84
03290:  MOVLW  92
03292:  MOVWF  x83
03294:  MOVLB  0
03296:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0329A:  MOVFF  866,87E
0329E:  MOVFF  865,87D
032A2:  MOVFF  864,87C
032A6:  MOVFF  863,87B
032AA:  MOVLW  08
032AC:  MOVLB  8
032AE:  MOVWF  x80
032B0:  MOVLW  6F
032B2:  MOVWF  x7F
032B4:  CLRF   x82
032B6:  MOVLW  01
032B8:  MOVWF  x81
032BA:  MOVLB  0
032BC:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
032C0:  MOVFF  865,881
032C4:  MOVLW  01
032C6:  MOVLB  8
032C8:  MOVWF  x82
032CA:  MOVLW  0F
032CC:  MOVWF  x84
032CE:  MOVLW  89
032D0:  MOVWF  x83
032D2:  MOVLB  0
032D4:  CALL   1E34
032D8:  MOVFF  865,881
032DC:  MOVLB  8
032DE:  CLRF   x82
032E0:  MOVLW  0F
032E2:  MOVWF  x84
032E4:  MOVLW  92
032E6:  MOVWF  x83
032E8:  MOVLB  0
032EA:  CALL   1E34
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
032EE:  MOVFF  865,881
032F2:  MOVLB  8
032F4:  CLRF   x82
032F6:  MOVLW  0F
032F8:  MOVWF  x84
032FA:  MOVLW  89
032FC:  MOVWF  x83
032FE:  MOVLB  0
03300:  CALL   1E34
03304:  MOVFF  865,881
03308:  MOVLB  8
0330A:  CLRF   x82
0330C:  MOVLW  0F
0330E:  MOVWF  x84
03310:  MOVLW  92
03312:  MOVWF  x83
03314:  MOVLB  0
03316:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0331A:  MOVFF  866,87E
0331E:  MOVFF  865,87D
03322:  MOVFF  864,87C
03326:  MOVFF  863,87B
0332A:  MOVLW  08
0332C:  MOVLB  8
0332E:  MOVWF  x80
03330:  MOVLW  70
03332:  MOVWF  x7F
03334:  MOVLW  04
03336:  MOVWF  x81
03338:  MOVFF  86C,883
0333C:  MOVFF  86B,882
03340:  MOVFF  86E,885
03344:  MOVFF  86D,884
03348:  MOVLB  0
0334A:  CALL   3002
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0334E:  MOVLW  02
03350:  MOVWF  00
03352:  DECFSZ 00,F
03354:  BRA    3352
03356:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03358:  MOVFF  865,881
0335C:  MOVLW  01
0335E:  MOVLB  8
03360:  MOVWF  x82
03362:  MOVLW  0F
03364:  MOVWF  x84
03366:  MOVLW  89
03368:  MOVWF  x83
0336A:  MOVLB  0
0336C:  CALL   1E34
03370:  MOVFF  865,881
03374:  MOVLB  8
03376:  CLRF   x82
03378:  MOVLW  0F
0337A:  MOVWF  x84
0337C:  MOVLW  92
0337E:  MOVWF  x83
03380:  MOVLB  0
03382:  CALL   1E34
....................    }
03386:  GOTO   351C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0338A:  MOVLB  8
0338C:  DECFSZ x64,W
0338E:  BRA    3394
03390:  BRA    339A
03392:  MOVLB  0
03394:  MOVLB  0
03396:  GOTO   351C
0339A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0339C:  MOVLW  06
0339E:  MOVLB  8
033A0:  MOVWF  x74
033A2:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
033A4:  MOVLW  12
033A6:  MOVLB  8
033A8:  MOVWF  x75
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
033AA:  MOVFF  86A,87C
033AE:  CLRF   x7D
033B0:  CLRF   x7E
033B2:  CLRF   x7F
033B4:  MOVF   x7C,W
033B6:  MOVWF  00
033B8:  CLRF   01
033BA:  CLRF   02
033BC:  CLRF   03
033BE:  MOVFF  00,876
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
033C2:  MOVFF  869,87C
033C6:  MOVFF  86A,87D
033CA:  CLRF   x7E
033CC:  CLRF   x7F
033CE:  MOVF   x7C,W
033D0:  MOVWF  00
033D2:  CLRF   01
033D4:  CLRF   02
033D6:  CLRF   03
033D8:  MOVFF  00,877
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
033DC:  MOVFF  868,87C
033E0:  MOVFF  869,87D
033E4:  MOVFF  86A,87E
033E8:  CLRF   x7F
033EA:  MOVF   x7C,W
033EC:  MOVWF  00
033EE:  CLRF   01
033F0:  CLRF   02
033F2:  CLRF   03
033F4:  MOVFF  00,878
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
033F8:  MOVF   x67,W
033FA:  MOVWF  00
033FC:  CLRF   01
033FE:  CLRF   02
03400:  CLRF   03
03402:  MOVFF  00,879
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03406:  MOVFF  865,881
0340A:  CLRF   x82
0340C:  MOVLW  0F
0340E:  MOVWF  x84
03410:  MOVLW  89
03412:  MOVWF  x83
03414:  MOVLB  0
03416:  CALL   1E34
0341A:  MOVFF  865,881
0341E:  MOVLB  8
03420:  CLRF   x82
03422:  MOVLW  0F
03424:  MOVWF  x84
03426:  MOVLW  92
03428:  MOVWF  x83
0342A:  MOVLB  0
0342C:  CALL   1E34
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03430:  MOVFF  866,87E
03434:  MOVFF  865,87D
03438:  MOVFF  864,87C
0343C:  MOVFF  863,87B
03440:  MOVLW  08
03442:  MOVLB  8
03444:  MOVWF  x80
03446:  MOVLW  74
03448:  MOVWF  x7F
0344A:  CLRF   x82
0344C:  MOVLW  01
0344E:  MOVWF  x81
03450:  MOVLB  0
03452:  CALL   2F1A
....................       output_high(flash_stream.cs_pin);
03456:  MOVFF  865,881
0345A:  MOVLW  01
0345C:  MOVLB  8
0345E:  MOVWF  x82
03460:  MOVLW  0F
03462:  MOVWF  x84
03464:  MOVLW  89
03466:  MOVWF  x83
03468:  MOVLB  0
0346A:  CALL   1E34
0346E:  MOVFF  865,881
03472:  MOVLB  8
03474:  CLRF   x82
03476:  MOVLW  0F
03478:  MOVWF  x84
0347A:  MOVLW  92
0347C:  MOVWF  x83
0347E:  MOVLB  0
03480:  CALL   1E34
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03484:  MOVFF  865,881
03488:  MOVLB  8
0348A:  CLRF   x82
0348C:  MOVLW  0F
0348E:  MOVWF  x84
03490:  MOVLW  89
03492:  MOVWF  x83
03494:  MOVLB  0
03496:  CALL   1E34
0349A:  MOVFF  865,881
0349E:  MOVLB  8
034A0:  CLRF   x82
034A2:  MOVLW  0F
034A4:  MOVWF  x84
034A6:  MOVLW  92
034A8:  MOVWF  x83
034AA:  MOVLB  0
034AC:  CALL   1E34
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
034B0:  MOVFF  866,87E
034B4:  MOVFF  865,87D
034B8:  MOVFF  864,87C
034BC:  MOVFF  863,87B
034C0:  MOVLW  08
034C2:  MOVLB  8
034C4:  MOVWF  x80
034C6:  MOVLW  75
034C8:  MOVWF  x7F
034CA:  MOVLW  05
034CC:  MOVWF  x81
034CE:  MOVFF  86C,883
034D2:  MOVFF  86B,882
034D6:  MOVFF  86E,885
034DA:  MOVFF  86D,884
034DE:  MOVLB  0
034E0:  CALL   3002
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
034E4:  MOVLW  02
034E6:  MOVWF  00
034E8:  DECFSZ 00,F
034EA:  BRA    34E8
034EC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
034EE:  MOVFF  865,881
034F2:  MOVLW  01
034F4:  MOVLB  8
034F6:  MOVWF  x82
034F8:  MOVLW  0F
034FA:  MOVWF  x84
034FC:  MOVLW  89
034FE:  MOVWF  x83
03500:  MOVLB  0
03502:  CALL   1E34
03506:  MOVFF  865,881
0350A:  MOVLB  8
0350C:  CLRF   x82
0350E:  MOVLW  0F
03510:  MOVWF  x84
03512:  MOVLW  92
03514:  MOVWF  x83
03516:  MOVLB  0
03518:  CALL   1E34
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0351C:  MOVLB  8
0351E:  CLRF   x7A
03520:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03522:  MOVFF  866,87E
03526:  MOVFF  865,87D
0352A:  MOVFF  864,87C
0352E:  MOVFF  863,87B
03532:  CALL   316E
03536:  MOVF   01,W
03538:  ANDLW  01
0353A:  SUBLW  01
0353C:  BTFSS  FD8.2
0353E:  GOTO   3590
....................       if(timeout_counter > 10)
03542:  MOVLB  8
03544:  MOVF   x7A,W
03546:  SUBLW  0A
03548:  BTFSS  FD8.0
0354A:  BRA    3552
0354C:  MOVLB  0
0354E:  GOTO   3564
03552:  MOVLB  0
....................          delay_ms(200);
03554:  MOVLW  C8
03556:  MOVLB  8
03558:  MOVWF  x7B
0355A:  MOVLB  0
0355C:  CALL   1A5A
03560:  GOTO   3570
....................       else
....................          delay_ms(10);   
03564:  MOVLW  0A
03566:  MOVLB  8
03568:  MOVWF  x7B
0356A:  MOVLB  0
0356C:  CALL   1A5A
....................       
....................       if(timeout_counter > 100){
03570:  MOVLB  8
03572:  MOVF   x7A,W
03574:  SUBLW  64
03576:  BTFSS  FD8.0
03578:  BRA    3580
0357A:  MOVLB  0
0357C:  GOTO   3586
03580:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03582:  GOTO   3590
....................       }  
....................       timeout_counter++;
03586:  MOVLB  8
03588:  INCF   x7A,F
0358A:  MOVLB  0
0358C:  GOTO   3522
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03590:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
0213E:  MOVLW  9F
02140:  MOVLB  8
02142:  MOVWF  x7B
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02144:  MOVFF  865,881
02148:  CLRF   x82
0214A:  MOVLW  0F
0214C:  MOVWF  x84
0214E:  MOVLW  89
02150:  MOVWF  x83
02152:  MOVLB  0
02154:  CALL   1E34
02158:  MOVFF  865,881
0215C:  MOVLB  8
0215E:  CLRF   x82
02160:  MOVLW  0F
02162:  MOVWF  x84
02164:  MOVLW  92
02166:  MOVWF  x83
02168:  MOVLB  0
0216A:  CALL   1E34
....................    delay_us(10);  
0216E:  MOVLW  0D
02170:  MOVWF  00
02172:  DECFSZ 00,F
02174:  BRA    2172
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02176:  MOVFF  866,884
0217A:  MOVFF  865,883
0217E:  MOVFF  864,882
02182:  MOVFF  863,881
02186:  MOVLW  08
02188:  MOVLB  8
0218A:  MOVWF  x86
0218C:  MOVLW  7B
0218E:  MOVWF  x85
02190:  CLRF   x88
02192:  MOVLW  01
02194:  MOVWF  x87
02196:  MOVLW  08
02198:  MOVWF  x8A
0219A:  MOVLW  67
0219C:  MOVWF  x89
0219E:  CLRF   x8E
021A0:  CLRF   x8D
021A2:  CLRF   x8C
021A4:  MOVLW  14
021A6:  MOVWF  x8B
021A8:  MOVLB  0
021AA:  CALL   1F18
....................    output_high(flash_stream.cs_pin);
021AE:  MOVFF  865,881
021B2:  MOVLW  01
021B4:  MOVLB  8
021B6:  MOVWF  x82
021B8:  MOVLW  0F
021BA:  MOVWF  x84
021BC:  MOVLW  89
021BE:  MOVWF  x83
021C0:  MOVLB  0
021C2:  CALL   1E34
021C6:  MOVFF  865,881
021CA:  MOVLB  8
021CC:  CLRF   x82
021CE:  MOVLW  0F
021D0:  MOVWF  x84
021D2:  MOVLW  92
021D4:  MOVWF  x83
021D6:  MOVLB  0
021D8:  CALL   1E34
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
021DC:  MOVLB  8
021DE:  MOVF   x67,W
021E0:  SUBLW  20
021E2:  BTFSC  FD8.2
021E4:  BRA    21EC
021E6:  MOVLB  0
021E8:  GOTO   21FA
021EC:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
021EE:  MOVLW  01
021F0:  MOVWF  01
021F2:  GOTO   2202
....................    }
021F6:  GOTO   2202
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
021FA:  MOVLW  00
021FC:  MOVWF  01
021FE:  GOTO   2202
....................    }
02202:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03E6A:  MOVLB  8
03E6C:  MOVF   x23,W
03E6E:  MOVWF  FE9
03E70:  MOVF   x24,W
03E72:  MOVWF  FEA
03E74:  MOVFF  FEF,826
03E78:  MOVLW  01
03E7A:  MOVWF  x27
03E7C:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03E7E:  MOVLB  8
03E80:  MOVF   x25,W
03E82:  SUBWF  x27,W
03E84:  BTFSS  FD8.0
03E86:  BRA    3E8E
03E88:  MOVLB  0
03E8A:  GOTO   3EAA
03E8E:  MOVLB  0
....................       crc ^= frame[i++];
03E90:  MOVLB  8
03E92:  MOVF   x27,W
03E94:  INCF   x27,F
03E96:  ADDWF  x23,W
03E98:  MOVWF  FE9
03E9A:  MOVLW  00
03E9C:  ADDWFC x24,W
03E9E:  MOVWF  FEA
03EA0:  MOVF   FEF,W
03EA2:  XORWF  x26,F
03EA4:  MOVLB  0
03EA6:  GOTO   3E7E
....................    return crc;
03EAA:  MOVLB  8
03EAC:  MOVF   x26,W
03EAE:  MOVWF  01
03EB0:  MOVLB  0
03EB2:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size)
*
07B48:  MOVLW  01
07B4A:  MOVLB  4
07B4C:  SUBWF  xCD,W
07B4E:  ADDWF  xCB,W
07B50:  MOVWF  FE9
07B52:  MOVLW  00
07B54:  ADDWFC xCC,W
07B56:  MOVWF  FEA
07B58:  MOVFF  FEF,4CE
07B5C:  MOVLW  01
07B5E:  SUBWF  xCD,W
07B60:  MOVWF  xD0
07B62:  MOVFF  4CC,824
07B66:  MOVFF  4CB,823
07B6A:  MOVFF  4D0,825
07B6E:  MOVLB  0
07B70:  CALL   3E6A
07B74:  MOVFF  01,4CF
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
07B78:  MOVLB  4
07B7A:  MOVF   xCF,W
07B7C:  SUBWF  xCE,W
07B7E:  BTFSS  FD8.2
07B80:  BRA    7B88
07B82:  MOVLB  0
07B84:  GOTO   7B90
07B88:  MOVLB  0
07B8A:  MOVLW  00
07B8C:  GOTO   7B92
07B90:  MOVLW  01
07B92:  MOVWF  01
07B94:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
*
07EF6:  MOVLB  4
07EF8:  MOVF   xD1,W
07EFA:  ADDWF  xCF,W
07EFC:  MOVWF  FE9
07EFE:  MOVLW  00
07F00:  ADDWFC xD0,W
07F02:  MOVWF  FEA
07F04:  MOVFF  4CE,00
07F08:  CLRF   01
07F0A:  CLRF   02
07F0C:  CLRF   03
07F0E:  MOVFF  00,FEF
....................     buf[index + 1] = (int8)(value >> 16);
07F12:  MOVLW  01
07F14:  ADDWF  xD1,W
07F16:  ADDWF  xCF,W
07F18:  MOVWF  FE9
07F1A:  MOVLW  00
07F1C:  ADDWFC xD0,W
07F1E:  MOVWF  FEA
07F20:  MOVFF  4CD,00
07F24:  MOVFF  4CE,01
07F28:  CLRF   02
07F2A:  CLRF   03
07F2C:  MOVFF  00,FEF
....................     buf[index + 2] = (int8)(value >>  8);
07F30:  MOVLW  02
07F32:  ADDWF  xD1,W
07F34:  ADDWF  xCF,W
07F36:  MOVWF  FE9
07F38:  MOVLW  00
07F3A:  ADDWFC xD0,W
07F3C:  MOVWF  FEA
07F3E:  MOVFF  4CC,00
07F42:  MOVFF  4CD,01
07F46:  MOVFF  4CE,02
07F4A:  CLRF   03
07F4C:  MOVFF  00,FEF
....................     buf[index + 3] = (int8)(value      );   // LSB
07F50:  MOVLW  03
07F52:  ADDWF  xD1,W
07F54:  ADDWF  xCF,W
07F56:  MOVWF  FE9
07F58:  MOVLW  00
07F5A:  ADDWFC xD0,W
07F5C:  MOVWF  FEA
07F5E:  MOVFF  4CB,FEF
07F62:  MOVLB  0
07F64:  RETURN 0
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
*
07B96:  MOVLB  4
07B98:  MOVF   x8C,W
07B9A:  ADDWF  x8A,W
07B9C:  MOVWF  FE9
07B9E:  MOVLW  00
07BA0:  ADDWFC x8B,W
07BA2:  MOVWF  FEA
07BA4:  MOVF   FEF,W
07BA6:  CLRF   x90
07BA8:  CLRF   x8F
07BAA:  CLRF   x8E
07BAC:  MOVWF  x8D
07BAE:  MOVLW  01
07BB0:  ADDWF  x8C,W
07BB2:  ADDWF  x8A,W
07BB4:  MOVWF  FE9
07BB6:  MOVLW  00
07BB8:  ADDWFC x8B,W
07BBA:  MOVWF  FEA
07BBC:  MOVF   FEF,W
07BBE:  CLRF   x95
07BC0:  CLRF   x94
07BC2:  CLRF   x93
07BC4:  MOVWF  x92
07BC6:  MOVFF  494,03
07BCA:  MOVFF  493,02
07BCE:  MOVFF  492,01
07BD2:  CLRF   00
07BD4:  MOVF   00,W
07BD6:  IORWF  x8D,F
07BD8:  MOVF   01,W
07BDA:  IORWF  x8E,F
07BDC:  MOVF   02,W
07BDE:  IORWF  x8F,F
07BE0:  MOVF   03,W
07BE2:  IORWF  x90,F
07BE4:  MOVLW  02
07BE6:  ADDWF  x8C,W
07BE8:  ADDWF  x8A,W
07BEA:  MOVWF  FE9
07BEC:  MOVLW  00
07BEE:  ADDWFC x8B,W
07BF0:  MOVWF  FEA
07BF2:  MOVF   FEF,W
07BF4:  CLRF   x95
07BF6:  CLRF   x94
07BF8:  CLRF   x93
07BFA:  MOVWF  x92
07BFC:  MOVFF  493,03
07C00:  MOVFF  492,02
07C04:  CLRF   00
07C06:  CLRF   01
07C08:  MOVF   00,W
07C0A:  IORWF  x8D,F
07C0C:  MOVF   01,W
07C0E:  IORWF  x8E,F
07C10:  MOVF   02,W
07C12:  IORWF  x8F,F
07C14:  MOVF   03,W
07C16:  IORWF  x90,F
07C18:  MOVLW  03
07C1A:  ADDWF  x8C,W
07C1C:  ADDWF  x8A,W
07C1E:  MOVWF  FE9
07C20:  MOVLW  00
07C22:  ADDWFC x8B,W
07C24:  MOVWF  FEA
07C26:  MOVF   FEF,W
07C28:  CLRF   x95
07C2A:  CLRF   x94
07C2C:  CLRF   x93
07C2E:  MOVWF  x92
07C30:  MOVFF  492,03
07C34:  CLRF   00
07C36:  CLRF   01
07C38:  CLRF   02
07C3A:  MOVF   00,W
07C3C:  IORWF  x8D,W
07C3E:  MOVWF  00
07C40:  MOVF   01,W
07C42:  IORWF  x8E,W
07C44:  MOVWF  01
07C46:  MOVF   02,W
07C48:  IORWF  x8F,W
07C4A:  MOVWF  02
07C4C:  MOVF   03,W
07C4E:  IORWF  x90,W
07C50:  MOVWF  03
07C52:  MOVLB  0
07C54:  RETURN 0
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
052BE:  MOVLW  01
052C0:  ADDWF  xED,W
052C2:  ANDLW  0F
052C4:  MOVLB  3
052C6:  MOVWF  xCF
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
052C8:  MOVLB  0
052CA:  MOVF   xEC,W
052CC:  MOVLB  3
052CE:  SUBWF  xCF,W
052D0:  BTFSC  FD8.2
052D2:  BRA    52DA
052D4:  MOVLB  0
052D6:  GOTO   52F0
052DA:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
052DC:  MOVLW  8A
052DE:  MOVWF  FF6
052E0:  MOVLW  02
052E2:  MOVWF  FF7
052E4:  MOVLW  00
052E6:  MOVWF  FF8
052E8:  CALL   1ADA
052EC:  GOTO   5424
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].func_type = data->func_type;
052F0:  MOVF   xED,W
052F2:  MULLW  0A
052F4:  MOVF   FF3,W
052F6:  MOVLB  3
052F8:  CLRF   xD1
052FA:  MOVWF  xD0
052FC:  MOVLW  4C
052FE:  ADDWF  xD0,W
05300:  MOVWF  01
05302:  MOVLW  00
05304:  ADDWFC xD1,W
05306:  MOVWF  03
05308:  MOVF   01,W
0530A:  MOVWF  xD2
0530C:  MOVFF  03,3D3
05310:  MOVF   xCD,W
05312:  MOVWF  FE9
05314:  MOVF   xCE,W
05316:  MOVWF  FEA
05318:  MOVF   FEF,W
0531A:  MOVWF  xD4
0531C:  MOVFF  3D3,FEA
05320:  MOVFF  3D2,FE9
05324:  MOVFF  3D4,FEF
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src       = data->src;
05328:  MOVLB  0
0532A:  MOVF   xED,W
0532C:  MULLW  0A
0532E:  MOVF   FF3,W
05330:  MOVLB  3
05332:  CLRF   xD1
05334:  MOVWF  xD0
05336:  MOVLW  02
05338:  ADDWF  xD0,W
0533A:  MOVWF  01
0533C:  MOVLW  00
0533E:  ADDWFC xD1,W
05340:  MOVWF  03
05342:  MOVF   01,W
05344:  ADDLW  4C
05346:  MOVWF  01
05348:  MOVLW  00
0534A:  ADDWFC 03,F
0534C:  MOVF   01,W
0534E:  MOVWF  xD0
05350:  MOVFF  03,3D1
05354:  MOVLW  02
05356:  ADDWF  xCD,W
05358:  MOVWF  FE9
0535A:  MOVLW  00
0535C:  ADDWFC xCE,W
0535E:  MOVWF  FEA
05360:  MOVFF  FEF,00
05364:  MOVFF  FEC,01
05368:  MOVFF  FEC,02
0536C:  MOVFF  FEC,03
05370:  MOVF   FED,F
05372:  MOVF   FED,F
05374:  MOVF   FED,F
05376:  MOVFF  03,3D5
0537A:  MOVFF  02,3D4
0537E:  MOVFF  01,3D3
05382:  MOVFF  00,3D2
05386:  MOVFF  3D1,FEA
0538A:  MOVFF  3D0,FE9
0538E:  MOVFF  3D2,FEF
05392:  MOVFF  3D3,FEC
05396:  MOVFF  3D4,FEC
0539A:  MOVFF  3D5,FEC
0539E:  MOVF   FED,F
053A0:  MOVF   FED,F
053A2:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size      = data->size;
053A4:  MOVLB  0
053A6:  MOVF   xED,W
053A8:  MULLW  0A
053AA:  MOVF   FF3,W
053AC:  MOVLB  3
053AE:  CLRF   xD1
053B0:  MOVWF  xD0
053B2:  MOVLW  06
053B4:  ADDWF  xD0,W
053B6:  MOVWF  01
053B8:  MOVLW  00
053BA:  ADDWFC xD1,W
053BC:  MOVWF  03
053BE:  MOVF   01,W
053C0:  ADDLW  4C
053C2:  MOVWF  01
053C4:  MOVLW  00
053C6:  ADDWFC 03,F
053C8:  MOVF   01,W
053CA:  MOVWF  xD0
053CC:  MOVFF  03,3D1
053D0:  MOVLW  06
053D2:  ADDWF  xCD,W
053D4:  MOVWF  FE9
053D6:  MOVLW  00
053D8:  ADDWFC xCE,W
053DA:  MOVWF  FEA
053DC:  MOVFF  FEF,00
053E0:  MOVFF  FEC,01
053E4:  MOVFF  FEC,02
053E8:  MOVFF  FEC,03
053EC:  MOVF   FED,F
053EE:  MOVF   FED,F
053F0:  MOVF   FED,F
053F2:  MOVFF  03,3D5
053F6:  MOVFF  02,3D4
053FA:  MOVFF  01,3D3
053FE:  MOVFF  00,3D2
05402:  MOVFF  3D1,FEA
05406:  MOVFF  3D0,FE9
0540A:  MOVFF  3D2,FEF
0540E:  MOVFF  3D3,FEC
05412:  MOVFF  3D4,FEC
05416:  MOVFF  3D5,FEC
0541A:  MOVF   FED,F
0541C:  MOVF   FED,F
0541E:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
05420:  MOVFF  3CF,ED
05424:  MOVLB  0
....................    }
05426:  GOTO   5482 (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
0785E:  MOVF   xED,W
07860:  SUBWF  xEC,W
07862:  BTFSS  FD8.2
07864:  GOTO   7888
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
07868:  MOVLW  A6
0786A:  MOVWF  FF6
0786C:  MOVLW  02
0786E:  MOVWF  FF7
07870:  MOVLW  00
07872:  MOVWF  FF8
07874:  CALL   1ADA
....................       return 0x00;
07878:  MOVLW  00
0787A:  MOVWF  01
0787C:  MOVLW  00
0787E:  MOVWF  02
07880:  GOTO   78B4
....................    }
07884:  GOTO   78B4
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
07888:  MOVFF  EC,3C0
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
0788C:  MOVLW  01
0788E:  ADDWF  xEC,W
07890:  ANDLW  0F
07892:  MOVWF  xEC
....................       return &smf_queue.smf_data[current_head];
07894:  MOVLB  3
07896:  MOVF   xC0,W
07898:  MULLW  0A
0789A:  MOVF   FF3,W
0789C:  CLRF   03
0789E:  ADDLW  4C
078A0:  MOVWF  01
078A2:  MOVLW  00
078A4:  ADDWFC 03,F
078A6:  MOVF   01,W
078A8:  MOVWF  01
078AA:  MOVF   03,W
078AC:  MOVWF  02
078AE:  MOVLB  0
078B0:  GOTO   78B4
....................    }
078B4:  GOTO   9552 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
07660:  MOVF   xED,W
07662:  SUBWF  xEC,W
07664:  BTFSC  FD8.2
07666:  GOTO   7670
0766A:  MOVLW  00
0766C:  GOTO   7672
07670:  MOVLW  01
07672:  MOVWF  01
07674:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(mission_id)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
078B8:  MOVLB  4
078BA:  CLRF   x51
078BC:  CLRF   x52
078BE:  CLRF   x53
078C0:  CLRF   x54
078C2:  CLRF   x55
078C4:  CLRF   x56
078C6:  CLRF   x57
078C8:  CLRF   x58
....................    
....................    if (mission_id == ID_CIGS_DATA_TABLE)
078CA:  MOVF   x50,W
078CC:  SUBLW  C0
078CE:  BTFSC  FD8.2
078D0:  BRA    78D8
078D2:  MOVLB  0
078D4:  GOTO   78FC
078D8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
078DA:  MOVLW  06
078DC:  MOVLB  4
078DE:  MOVWF  x54
078E0:  MOVLW  AA
078E2:  MOVWF  x53
078E4:  CLRF   x52
078E6:  CLRF   x51
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
078E8:  MOVLW  06
078EA:  MOVWF  x58
078EC:  MOVLW  AA
078EE:  MOVWF  x57
078F0:  MOVLW  0F
078F2:  MOVWF  x56
078F4:  SETF   x55
078F6:  MOVLB  0
....................    }
078F8:  GOTO   7964
....................    else if (mission_id == ID_CIGS_MEASURE_DATA)
078FC:  MOVLB  4
078FE:  MOVF   x50,W
07900:  SUBLW  C1
07902:  BTFSC  FD8.2
07904:  BRA    790C
07906:  MOVLB  0
07908:  GOTO   7932
0790C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_MEASURE_DATA_START_ADDRESS;
0790E:  MOVLW  06
07910:  MOVLB  4
07912:  MOVWF  x54
07914:  MOVLW  AA
07916:  MOVWF  x53
07918:  MOVLW  10
0791A:  MOVWF  x52
0791C:  CLRF   x51
....................       mis_struct.end_address   = CIGS_MEASURE_DATA_END_ADDRESS;
0791E:  MOVLW  07
07920:  MOVWF  x58
07922:  MOVLW  AA
07924:  MOVWF  x57
07926:  MOVLW  0F
07928:  MOVWF  x56
0792A:  SETF   x55
0792C:  MOVLB  0
....................    }
0792E:  GOTO   7964
....................    else if (mission_id == ID_CIGS_PICLOG)
07932:  MOVLB  4
07934:  MOVF   x50,W
07936:  SUBLW  CF
07938:  BTFSC  FD8.2
0793A:  BRA    7942
0793C:  MOVLB  0
0793E:  GOTO   7964
07942:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
07944:  MOVLW  07
07946:  MOVLB  4
07948:  MOVWF  x54
0794A:  MOVLW  AA
0794C:  MOVWF  x53
0794E:  MOVLW  10
07950:  MOVWF  x52
07952:  CLRF   x51
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
07954:  MOVLW  07
07956:  MOVWF  x58
07958:  MOVLW  AA
0795A:  MOVWF  x57
0795C:  MOVLW  1F
0795E:  MOVWF  x56
07960:  SETF   x55
07962:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
07964:  MOVLW  51
07966:  MOVWF  01
07968:  MOVLW  04
0796A:  MOVWF  02
0796C:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
04058:  MOVLB  3
0405A:  CLRF   xC1
0405C:  CLRF   xC2
0405E:  CLRF   xC3
04060:  CLRF   xC4
04062:  CLRF   xC5
04064:  CLRF   xC6
04066:  CLRF   xC7
04068:  CLRF   xC8
0406A:  CLRF   xC9
0406C:  CLRF   xCA
0406E:  CLRF   xCB
04070:  CLRF   xCC
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
04072:  MOVLW  C0
04074:  MOVWF  FF6
04076:  MOVLW  02
04078:  MOVWF  FF7
0407A:  MOVLW  00
0407C:  MOVWF  FF8
0407E:  MOVLB  0
04080:  CALL   1ADA
....................    fprintf(PC, "\t[BOSS] >>> ");
04084:  MOVLW  E0
04086:  MOVWF  FF6
04088:  MOVLW  02
0408A:  MOVWF  FF7
0408C:  MOVLW  00
0408E:  MOVWF  FF8
04090:  CALL   1ADA
....................    for (int8 i = 0; i < receive_signal_size; i++)
04094:  MOVLB  3
04096:  CLRF   xCD
04098:  MOVLB  0
0409A:  MOVLB  3
0409C:  MOVF   xC0,W
0409E:  SUBWF  xCD,W
040A0:  BTFSS  FD8.0
040A2:  BRA    40AA
040A4:  MOVLB  0
040A6:  GOTO   40E4
040AA:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
040AC:  MOVLB  3
040AE:  MOVF   xCD,W
040B0:  ADDWF  xBE,W
040B2:  MOVWF  FE9
040B4:  MOVLW  00
040B6:  ADDWFC xBF,W
040B8:  MOVWF  FEA
040BA:  MOVFF  FEF,3D4
040BE:  MOVFF  3D4,4C5
040C2:  MOVLW  37
040C4:  MOVLB  4
040C6:  MOVWF  xC6
040C8:  MOVLB  0
040CA:  CALL   1CCC
040CE:  MOVLW  20
040D0:  MOVLB  8
040D2:  MOVWF  x66
040D4:  MOVLB  0
040D6:  CALL   1A88
040DA:  MOVLB  3
040DC:  INCF   xCD,F
040DE:  MOVLB  0
040E0:  GOTO   409A
....................    fprintf(PC, "\r\n");
040E4:  MOVLW  0D
040E6:  MOVLB  8
040E8:  MOVWF  x66
040EA:  MOVLB  0
040EC:  CALL   1A88
040F0:  MOVLW  0A
040F2:  MOVLB  8
040F4:  MOVWF  x66
040F6:  MOVLB  0
040F8:  CALL   1A88
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
040FC:  MOVFF  3BF,3D5
04100:  MOVFF  3BE,3D4
04104:  MOVFF  3C0,3D6
04108:  GOTO   3D06
0410C:  MOVFF  01,3CE
....................    if (frame_start_position == -1)
04110:  MOVLB  3
04112:  MOVF   xCE,W
04114:  SUBLW  FF
04116:  BTFSC  FD8.2
04118:  BRA    4120
0411A:  MOVLB  0
0411C:  GOTO   412E
04120:  MOVLB  0
....................       return command;
04122:  MOVLW  C1
04124:  MOVWF  01
04126:  MOVLW  03
04128:  MOVWF  02
0412A:  GOTO   4250
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0412E:  MOVLB  3
04130:  MOVF   xCE,W
04132:  ADDWF  xBE,W
04134:  MOVWF  01
04136:  MOVLW  00
04138:  ADDWFC xBF,W
0413A:  MOVWF  03
0413C:  MOVF   01,W
0413E:  MOVWF  xCF
04140:  MOVFF  03,3D0
04144:  MOVF   xCF,W
04146:  MOVWF  FE9
04148:  MOVF   xD0,W
0414A:  MOVWF  FEA
0414C:  MOVF   FEF,W
0414E:  ANDLW  0F
04150:  MOVWF  xD1
04152:  MOVFF  3D1,3D4
04156:  MOVLB  0
04158:  GOTO   3DAE
0415C:  MOVFF  01,3D2
....................    if (content_size == -1)
04160:  MOVLB  3
04162:  MOVF   xD2,W
04164:  SUBLW  FF
04166:  BTFSC  FD8.2
04168:  BRA    4170
0416A:  MOVLB  0
0416C:  GOTO   417E
04170:  MOVLB  0
....................       return command;
04172:  MOVLW  C1
04174:  MOVWF  01
04176:  MOVLW  03
04178:  MOVWF  02
0417A:  GOTO   4250
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0417E:  MOVLB  3
04180:  MOVF   xCE,W
04182:  SUBWF  xC0,W
04184:  MOVWF  xD3
....................    
....................    if (!check_crc(frame, receive_frame_size))
04186:  MOVFF  3D0,3D5
0418A:  MOVFF  3CF,3D4
0418E:  MOVFF  3D3,3D6
04192:  MOVLB  0
04194:  GOTO   3EB4
04198:  MOVF   01,F
0419A:  BTFSS  FD8.2
0419C:  GOTO   41AC
....................       return command;
041A0:  MOVLW  C1
041A2:  MOVWF  01
041A4:  MOVLW  03
041A6:  MOVWF  02
041A8:  GOTO   4250
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
041AC:  MOVLB  3
041AE:  MOVF   xCF,W
041B0:  MOVWF  FE9
041B2:  MOVF   xD0,W
041B4:  MOVWF  FEA
041B6:  MOVF   FEF,W
041B8:  ANDLW  F0
041BA:  MOVWF  00
041BC:  SWAPF  00,W
041BE:  MOVWF  xD4
041C0:  MOVLW  0F
041C2:  ANDWF  xD4,F
041C4:  MOVFF  3D4,3D5
041C8:  MOVLB  0
041CA:  GOTO   3F9E
041CE:  MOVF   01,F
041D0:  BTFSS  FD8.2
041D2:  GOTO   41E2
....................       return command;
041D6:  MOVLW  C1
041D8:  MOVWF  01
041DA:  MOVLW  03
041DC:  MOVWF  02
041DE:  GOTO   4250
.................... 
....................    command.frame_id = frame_id;
041E2:  MOVFF  3D1,3C1
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
041E6:  MOVLW  01
041E8:  MOVLB  3
041EA:  ADDWF  xCF,W
041EC:  MOVWF  01
041EE:  MOVLW  00
041F0:  ADDWFC xD0,W
041F2:  MOVWF  03
041F4:  MOVF   01,W
041F6:  MOVWF  xD4
041F8:  MOVFF  03,3D5
041FC:  MOVLW  02
041FE:  SUBWF  xD3,W
04200:  MOVWF  xD6
04202:  MOVLW  03
04204:  MOVWF  FEA
04206:  MOVLW  C4
04208:  MOVWF  FE9
0420A:  MOVFF  3D5,FE2
0420E:  MOVFF  3D4,FE1
04212:  MOVF   xD6,W
04214:  MOVWF  01
04216:  BTFSS  FD8.2
04218:  BRA    4220
0421A:  MOVLB  0
0421C:  GOTO   422C
04220:  MOVLB  0
04222:  MOVFF  FE6,FEE
04226:  DECFSZ 01,F
04228:  GOTO   4222
....................    command.size = receive_frame_size-2;
0422C:  MOVLW  02
0422E:  MOVLB  3
04230:  SUBWF  xD3,W
04232:  MOVWF  xC2
....................    command.is_exist = TRUE;
04234:  BSF    xC3.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
04236:  MOVLW  EE
04238:  MOVWF  FF6
0423A:  MOVLW  02
0423C:  MOVWF  FF7
0423E:  MOVLW  00
04240:  MOVWF  FF8
04242:  MOVLB  0
04244:  CALL   1ADA
....................    return command;
04248:  MOVLW  C1
0424A:  MOVWF  01
0424C:  MOVLW  03
0424E:  MOVWF  02
04250:  GOTO   9FD0 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03D06:  MOVLB  3
03D08:  CLRF   xD7
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03D0A:  CLRF   xD7
03D0C:  MOVLB  0
03D0E:  MOVLW  01
03D10:  MOVLB  3
03D12:  SUBWF  xD6,W
03D14:  SUBWF  xD7,W
03D16:  BTFSS  FD8.0
03D18:  BRA    3D20
03D1A:  MOVLB  0
03D1C:  GOTO   3D58
03D20:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03D22:  MOVLB  3
03D24:  MOVF   xD7,W
03D26:  ADDWF  xD4,W
03D28:  MOVWF  FE9
03D2A:  MOVLW  00
03D2C:  ADDWFC xD5,W
03D2E:  MOVWF  FEA
03D30:  MOVF   FEF,W
03D32:  SUBLW  AA
03D34:  BTFSC  FD8.2
03D36:  BRA    3D3E
03D38:  MOVLB  0
03D3A:  GOTO   3D4E
03D3E:  MOVLB  0
....................          return i+1;
03D40:  MOVLW  01
03D42:  MOVLB  3
03D44:  ADDWF  xD7,W
03D46:  MOVWF  01
03D48:  MOVLB  0
03D4A:  GOTO   3DAA
03D4E:  MOVLB  3
03D50:  INCF   xD7,F
03D52:  MOVLB  0
03D54:  GOTO   3D0E
....................    if (receive_signal[i] == SFD)
03D58:  MOVLB  3
03D5A:  MOVF   xD7,W
03D5C:  ADDWF  xD4,W
03D5E:  MOVWF  FE9
03D60:  MOVLW  00
03D62:  ADDWFC xD5,W
03D64:  MOVWF  FEA
03D66:  MOVF   FEF,W
03D68:  SUBLW  AA
03D6A:  BTFSC  FD8.2
03D6C:  BRA    3D74
03D6E:  MOVLB  0
03D70:  GOTO   3D92
03D74:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03D76:  MOVLW  0A
03D78:  MOVWF  FF6
03D7A:  MOVLW  03
03D7C:  MOVWF  FF7
03D7E:  MOVLW  00
03D80:  MOVWF  FF8
03D82:  CALL   1ADA
....................       return -1;
03D86:  MOVLW  FF
03D88:  MOVWF  01
03D8A:  GOTO   3DAA
....................    }
03D8E:  GOTO   3DAA
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03D92:  MOVLW  20
03D94:  MOVWF  FF6
03D96:  MOVLW  03
03D98:  MOVWF  FF7
03D9A:  MOVLW  00
03D9C:  MOVWF  FF8
03D9E:  CALL   1ADA
....................       return -1;
03DA2:  MOVLW  FF
03DA4:  MOVWF  01
03DA6:  GOTO   3DAA
....................    }
03DAA:  GOTO   410C (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03DAE:  MOVLB  3
03DB0:  CLRF   xD5
03DB2:  MOVLB  0
03DB4:  MOVLB  3
03DB6:  MOVF   xD5,W
03DB8:  SUBLW  02
03DBA:  BTFSC  FD8.0
03DBC:  BRA    3DC4
03DBE:  MOVLB  0
03DC0:  GOTO   3E22
03DC4:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03DC6:  BCF    FD8.0
03DC8:  MOVLB  3
03DCA:  RLCF   xD5,W
03DCC:  CLRF   xD7
03DCE:  MOVWF  xD6
03DD0:  MOVLW  F6
03DD2:  ADDWF  xD6,W
03DD4:  MOVWF  FE9
03DD6:  MOVLW  00
03DD8:  ADDWFC xD7,W
03DDA:  MOVWF  FEA
03DDC:  MOVF   FEF,W
03DDE:  SUBWF  xD4,W
03DE0:  BTFSC  FD8.2
03DE2:  BRA    3DEA
03DE4:  MOVLB  0
03DE6:  GOTO   3E18
03DEA:  MOVLB  0
....................          return frame_ids[i].length;
03DEC:  BCF    FD8.0
03DEE:  MOVLB  3
03DF0:  RLCF   xD5,W
03DF2:  CLRF   xD7
03DF4:  MOVWF  xD6
03DF6:  MOVLW  01
03DF8:  ADDWF  xD6,W
03DFA:  MOVWF  01
03DFC:  MOVLW  00
03DFE:  ADDWFC xD7,W
03E00:  MOVWF  03
03E02:  MOVF   01,W
03E04:  ADDLW  F6
03E06:  MOVWF  FE9
03E08:  MOVLW  00
03E0A:  ADDWFC 03,W
03E0C:  MOVWF  FEA
03E0E:  MOVF   FEF,W
03E10:  MOVWF  01
03E12:  MOVLB  0
03E14:  GOTO   3E66
03E18:  MOVLB  3
03E1A:  INCF   xD5,F
03E1C:  MOVLB  0
03E1E:  GOTO   3DB4
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
03E22:  MOVLW  32
03E24:  MOVWF  FF6
03E26:  MOVLW  03
03E28:  MOVWF  FF7
03E2A:  MOVLW  00
03E2C:  MOVWF  FF8
03E2E:  MOVLW  1F
03E30:  MOVLB  8
03E32:  MOVWF  x23
03E34:  MOVLB  0
03E36:  CALL   1B0A
03E3A:  MOVFF  3D4,4C5
03E3E:  MOVLW  37
03E40:  MOVLB  4
03E42:  MOVWF  xC6
03E44:  MOVLB  0
03E46:  CALL   1CCC
03E4A:  MOVLW  0D
03E4C:  MOVLB  8
03E4E:  MOVWF  x66
03E50:  MOVLB  0
03E52:  CALL   1A88
03E56:  MOVLW  0A
03E58:  MOVLB  8
03E5A:  MOVWF  x66
03E5C:  MOVLB  0
03E5E:  CALL   1A88
....................    return -1;
03E62:  MOVLW  FF
03E64:  MOVWF  01
03E66:  GOTO   415C (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03EB4:  MOVLW  01
03EB6:  MOVLB  3
03EB8:  SUBWF  xD6,W
03EBA:  ADDWF  xD4,W
03EBC:  MOVWF  FE9
03EBE:  MOVLW  00
03EC0:  ADDWFC xD5,W
03EC2:  MOVWF  FEA
03EC4:  MOVFF  FEF,3D7
03EC8:  MOVLW  01
03ECA:  SUBWF  xD6,W
03ECC:  MOVWF  xD9
03ECE:  MOVFF  3D5,824
03ED2:  MOVFF  3D4,823
03ED6:  MOVFF  3D9,825
03EDA:  MOVLB  0
03EDC:  CALL   3E6A
03EE0:  MOVFF  01,3D8
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03EE4:  MOVLB  3
03EE6:  MOVF   xD8,W
03EE8:  SUBWF  xD7,W
03EEA:  BTFSC  FD8.2
03EEC:  BRA    3EF4
03EEE:  MOVLB  0
03EF0:  GOTO   3F02
03EF4:  MOVLB  0
....................       return TRUE;
03EF6:  MOVLW  01
03EF8:  MOVWF  01
03EFA:  GOTO   3F9A
03EFE:  GOTO   3F9A
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03F02:  MOVLW  56
03F04:  MOVWF  FF6
03F06:  MOVLW  03
03F08:  MOVWF  FF7
03F0A:  MOVLW  00
03F0C:  MOVWF  FF8
03F0E:  CALL   1ADA
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03F12:  MOVLW  68
03F14:  MOVWF  FF6
03F16:  MOVLW  03
03F18:  MOVWF  FF7
03F1A:  MOVLW  00
03F1C:  MOVWF  FF8
03F1E:  MOVLW  13
03F20:  MOVLB  8
03F22:  MOVWF  x23
03F24:  MOVLB  0
03F26:  CALL   1B0A
03F2A:  MOVFF  3D7,4C5
03F2E:  MOVLW  37
03F30:  MOVLB  4
03F32:  MOVWF  xC6
03F34:  MOVLB  0
03F36:  CALL   1CCC
03F3A:  MOVLW  0D
03F3C:  MOVLB  8
03F3E:  MOVWF  x66
03F40:  MOVLB  0
03F42:  CALL   1A88
03F46:  MOVLW  0A
03F48:  MOVLB  8
03F4A:  MOVWF  x66
03F4C:  MOVLB  0
03F4E:  CALL   1A88
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03F52:  MOVLW  80
03F54:  MOVWF  FF6
03F56:  MOVLW  03
03F58:  MOVWF  FF7
03F5A:  MOVLW  00
03F5C:  MOVWF  FF8
03F5E:  MOVLW  13
03F60:  MOVLB  8
03F62:  MOVWF  x23
03F64:  MOVLB  0
03F66:  CALL   1B0A
03F6A:  MOVFF  3D8,4C5
03F6E:  MOVLW  37
03F70:  MOVLB  4
03F72:  MOVWF  xC6
03F74:  MOVLB  0
03F76:  CALL   1CCC
03F7A:  MOVLW  0D
03F7C:  MOVLB  8
03F7E:  MOVWF  x66
03F80:  MOVLB  0
03F82:  CALL   1A88
03F86:  MOVLW  0A
03F88:  MOVLB  8
03F8A:  MOVWF  x66
03F8C:  MOVLB  0
03F8E:  CALL   1A88
....................       return FALSE;
03F92:  MOVLW  00
03F94:  MOVWF  01
03F96:  GOTO   3F9A
....................    }
03F9A:  GOTO   4198 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03F9E:  MOVLB  3
03FA0:  MOVF   xD5,W
03FA2:  SUBLW  0C
03FA4:  BTFSC  FD8.2
03FA6:  BRA    3FAE
03FA8:  MOVLB  0
03FAA:  GOTO   3FBC
03FAE:  MOVLB  0
....................       return TRUE;
03FB0:  MOVLW  01
03FB2:  MOVWF  01
03FB4:  GOTO   4054
03FB8:  GOTO   4054
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03FBC:  MOVLW  98
03FBE:  MOVWF  FF6
03FC0:  MOVLW  03
03FC2:  MOVWF  FF7
03FC4:  MOVLW  00
03FC6:  MOVWF  FF8
03FC8:  CALL   1ADA
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03FCC:  MOVLW  BA
03FCE:  MOVWF  FF6
03FD0:  MOVLW  03
03FD2:  MOVWF  FF7
03FD4:  MOVLW  00
03FD6:  MOVWF  FF8
03FD8:  MOVLW  13
03FDA:  MOVLB  8
03FDC:  MOVWF  x23
03FDE:  MOVLB  0
03FE0:  CALL   1B0A
03FE4:  MOVFF  3D5,4C5
03FE8:  MOVLW  37
03FEA:  MOVLB  4
03FEC:  MOVWF  xC6
03FEE:  MOVLB  0
03FF0:  CALL   1CCC
03FF4:  MOVLW  0D
03FF6:  MOVLB  8
03FF8:  MOVWF  x66
03FFA:  MOVLB  0
03FFC:  CALL   1A88
04000:  MOVLW  0A
04002:  MOVLB  8
04004:  MOVWF  x66
04006:  MOVLB  0
04008:  CALL   1A88
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0400C:  MOVLW  D2
0400E:  MOVWF  FF6
04010:  MOVLW  03
04012:  MOVWF  FF7
04014:  MOVLW  00
04016:  MOVWF  FF8
04018:  MOVLW  13
0401A:  MOVLB  8
0401C:  MOVWF  x23
0401E:  MOVLB  0
04020:  CALL   1B0A
04024:  MOVLW  0C
04026:  MOVLB  4
04028:  MOVWF  xC5
0402A:  MOVLW  37
0402C:  MOVWF  xC6
0402E:  MOVLB  0
04030:  CALL   1CCC
04034:  MOVLW  0D
04036:  MOVLB  8
04038:  MOVWF  x66
0403A:  MOVLB  0
0403C:  CALL   1A88
04040:  MOVLW  0A
04042:  MOVLB  8
04044:  MOVWF  x66
04046:  MOVLB  0
04048:  CALL   1A88
....................       return FALSE;  
0404C:  MOVLW  00
0404E:  MOVWF  01
04050:  GOTO   4054
....................    }
04054:  GOTO   41CE (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0437E:  MOVLW  AA
04380:  MOVLB  3
04382:  MOVWF  xC4
....................    data[1] = (BOSS_PIC << 4) | frame_id;
04384:  MOVF   xC0,W
04386:  IORLW  50
04388:  MOVWF  xC5
....................    memcpy(&data[2], content, size);
0438A:  MOVLW  03
0438C:  MOVWF  FEA
0438E:  MOVLW  C6
04390:  MOVWF  FE9
04392:  MOVFF  3C2,FE2
04396:  MOVFF  3C1,FE1
0439A:  MOVF   xC3,W
0439C:  MOVWF  01
0439E:  BTFSS  FD8.2
043A0:  BRA    43A8
043A2:  MOVLB  0
043A4:  GOTO   43B4
043A8:  MOVLB  0
043AA:  MOVFF  FE6,FEE
043AE:  DECFSZ 01,F
043B0:  GOTO   43AA
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
043B4:  MOVLW  02
043B6:  MOVLB  3
043B8:  ADDWF  xC3,W
043BA:  MOVWF  xD4
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
043BC:  CLRF   03
043BE:  MOVF   xD4,W
043C0:  ADDLW  C4
043C2:  MOVWF  01
043C4:  MOVLW  03
043C6:  ADDWFC 03,F
043C8:  MOVF   01,W
043CA:  MOVWF  xD6
043CC:  MOVFF  03,3D7
043D0:  MOVLW  01
043D2:  SUBWF  xD4,W
043D4:  MOVWF  xD8
043D6:  MOVLW  03
043D8:  MOVLB  8
043DA:  MOVWF  x24
043DC:  MOVLW  C5
043DE:  MOVWF  x23
043E0:  MOVFF  3D8,825
043E4:  MOVLB  0
043E6:  CALL   3E6A
043EA:  MOVFF  3D7,FEA
043EE:  MOVFF  3D6,FE9
043F2:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
043F6:  MOVLW  01
043F8:  MOVLB  3
043FA:  ADDWF  xD4,W
043FC:  MOVWF  xD5
....................    
....................    transmit(data, data_size);
043FE:  MOVLW  03
04400:  MOVWF  xD7
04402:  MOVLW  C4
04404:  MOVWF  xD6
04406:  MOVFF  3D5,3D8
0440A:  MOVLB  0
0440C:  GOTO   42C6
04410:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
042C6:  MOVLB  3
042C8:  CLRF   xD9
042CA:  MOVLB  0
042CC:  MOVLB  3
042CE:  MOVF   xD8,W
042D0:  SUBWF  xD9,W
042D2:  BTFSS  FD8.0
042D4:  BRA    42DC
042D6:  MOVLB  0
042D8:  GOTO   4302
042DC:  MOVLB  0
....................       fputc(data[i], BOSS);
042DE:  MOVLB  3
042E0:  MOVF   xD9,W
042E2:  ADDWF  xD6,W
042E4:  MOVWF  FE9
042E6:  MOVLW  00
042E8:  ADDWFC xD7,W
042EA:  MOVWF  FEA
042EC:  MOVFF  FEF,3DB
042F0:  MOVF   xDB,W
042F2:  MOVLB  0
042F4:  GOTO   42B6
042F8:  MOVLB  3
042FA:  INCF   xD9,F
042FC:  MOVLB  0
042FE:  GOTO   42CC
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04302:  MOVLW  EA
04304:  MOVWF  FF6
04306:  MOVLW  03
04308:  MOVWF  FF7
0430A:  MOVLW  00
0430C:  MOVWF  FF8
0430E:  CALL   1ADA
....................    for(int i = 0; i < data_size; i++)
04312:  MOVLB  3
04314:  CLRF   xDA
04316:  MOVLB  0
04318:  MOVLB  3
0431A:  MOVF   xD8,W
0431C:  SUBWF  xDA,W
0431E:  BTFSS  FD8.0
04320:  BRA    4328
04322:  MOVLB  0
04324:  GOTO   4362
04328:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0432A:  MOVLB  3
0432C:  MOVF   xDA,W
0432E:  ADDWF  xD6,W
04330:  MOVWF  FE9
04332:  MOVLW  00
04334:  ADDWFC xD7,W
04336:  MOVWF  FEA
04338:  MOVFF  FEF,3DB
0433C:  MOVFF  3DB,4C5
04340:  MOVLW  37
04342:  MOVLB  4
04344:  MOVWF  xC6
04346:  MOVLB  0
04348:  CALL   1CCC
0434C:  MOVLW  20
0434E:  MOVLB  8
04350:  MOVWF  x66
04352:  MOVLB  0
04354:  CALL   1A88
04358:  MOVLB  3
0435A:  INCF   xDA,F
0435C:  MOVLB  0
0435E:  GOTO   4318
....................    fprintf(PC, "\r\n");
04362:  MOVLW  0D
04364:  MOVLB  8
04366:  MOVWF  x66
04368:  MOVLB  0
0436A:  CALL   1A88
0436E:  MOVLW  0A
04370:  MOVLB  8
04372:  MOVWF  x66
04374:  MOVLB  0
04376:  CALL   1A88
0437A:  GOTO   4410 (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04412:  MOVLW  0F
04414:  MOVLB  3
04416:  MOVWF  xC0
04418:  CLRF   xC2
0441A:  CLRF   xC1
0441C:  CLRF   xC3
0441E:  MOVLB  0
04420:  CALL   437E
04424:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
076DE:  MOVLW  03
076E0:  MOVLB  3
076E2:  MOVWF  xC0
076E4:  CLRF   xC2
076E6:  MOVLW  48
076E8:  MOVWF  xC1
076EA:  MOVLW  04
076EC:  MOVWF  xC3
076EE:  MOVLB  0
076F0:  CALL   437E
076F4:  GOTO   771C (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_func.c"
.................... #include "mmj_cigs_func.h"               // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
04A0E:  MOVLW  5A
04A10:  MOVWF  FF6
04A12:  MOVLW  05
04A14:  MOVWF  FF7
04A16:  MOVLW  00
04A18:  MOVWF  FF8
04A1A:  CALL   1ADA
....................     output_high(CONNECT_CIGS1);
04A1E:  BCF    F94.0
04A20:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04A22:  BCF    F94.7
04A24:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
04A26:  MOVLW  85
04A28:  MOVWF  00
04A2A:  DECFSZ 00,F
04A2C:  BRA    4A2A
....................     fprintf(PC, "step, voltage, current\r\n");
04A2E:  MOVLW  6E
04A30:  MOVWF  FF6
04A32:  MOVLW  05
04A34:  MOVWF  FF7
04A36:  MOVLW  00
04A38:  MOVWF  FF8
04A3A:  CALL   1ADA
....................     mcp4901_1_write(0); // Initialize DAC to 0
04A3E:  MOVLB  8
04A40:  CLRF   x24
04A42:  CLRF   x23
04A44:  MOVLB  0
04A46:  CALL   48A6
....................     delay_ms(100); // wait for the DAC to stabilize
04A4A:  MOVLW  64
04A4C:  MOVLB  8
04A4E:  MOVWF  x7B
04A50:  MOVLB  0
04A52:  CALL   1A5A
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
04A56:  MOVLB  3
04A58:  CLRF   xCB
04A5A:  MOVLB  0
04A5C:  MOVLB  3
04A5E:  MOVF   xC6,W
04A60:  SUBWF  xCB,W
04A62:  BTFSS  FD8.0
04A64:  BRA    4A6C
04A66:  MOVLB  0
04A68:  GOTO   4B32
04A6C:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04A6E:  MOVLB  8
04A70:  CLRF   x24
04A72:  MOVFF  3CB,823
04A76:  MOVLB  0
04A78:  CALL   48A6
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
04A7C:  MOVLW  02
04A7E:  MOVLB  8
04A80:  MOVWF  x25
04A82:  MOVLB  0
04A84:  CALL   1C40
04A88:  MOVFF  02,3C8
04A8C:  MOVFF  01,3C7
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
04A90:  MOVLW  01
04A92:  MOVLB  8
04A94:  MOVWF  x25
04A96:  MOVLB  0
04A98:  CALL   1C40
04A9C:  MOVFF  02,3CA
04AA0:  MOVFF  01,3C9
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
04AA4:  MOVFF  3CB,823
04AA8:  MOVLW  1B
04AAA:  MOVLB  8
04AAC:  MOVWF  x24
04AAE:  MOVLB  0
04AB0:  CALL   46A6
04AB4:  MOVLW  2C
04AB6:  MOVLB  8
04AB8:  MOVWF  x66
04ABA:  MOVLB  0
04ABC:  CALL   1A88
04AC0:  MOVLW  20
04AC2:  MOVLB  8
04AC4:  MOVWF  x66
04AC6:  MOVLB  0
04AC8:  CALL   1A88
04ACC:  MOVLW  10
04ACE:  MOVWF  FE9
04AD0:  MOVFF  3C8,3CD
04AD4:  MOVFF  3C7,3CC
04AD8:  CALL   48E4
04ADC:  MOVLW  2C
04ADE:  MOVLB  8
04AE0:  MOVWF  x66
04AE2:  MOVLB  0
04AE4:  CALL   1A88
04AE8:  MOVLW  20
04AEA:  MOVLB  8
04AEC:  MOVWF  x66
04AEE:  MOVLB  0
04AF0:  CALL   1A88
04AF4:  MOVLW  10
04AF6:  MOVWF  FE9
04AF8:  MOVFF  3CA,3CD
04AFC:  MOVFF  3C9,3CC
04B00:  CALL   48E4
04B04:  MOVLW  0D
04B06:  MOVLB  8
04B08:  MOVWF  x66
04B0A:  MOVLB  0
04B0C:  CALL   1A88
04B10:  MOVLW  0A
04B12:  MOVLB  8
04B14:  MOVWF  x66
04B16:  MOVLB  0
04B18:  CALL   1A88
....................         delay_ms(1); // wait for the ADC to stabilize
04B1C:  MOVLW  01
04B1E:  MOVLB  8
04B20:  MOVWF  x7B
04B22:  MOVLB  0
04B24:  CALL   1A5A
04B28:  MOVLB  3
04B2A:  INCF   xCB,F
04B2C:  MOVLB  0
04B2E:  GOTO   4A5C
....................     }
04B32:  GOTO   4BAA (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
04BC6:  MOVLB  8
04BC8:  CLRF   x24
04BCA:  CLRF   x23
04BCC:  MOVLB  0
04BCE:  CALL   48A6
....................     fprintf(PC, "Start ADC TEST\r\n");
04BD2:  MOVLW  88
04BD4:  MOVWF  FF6
04BD6:  MOVLW  05
04BD8:  MOVWF  FF7
04BDA:  MOVLW  00
04BDC:  MOVWF  FF8
04BDE:  CALL   1ADA
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
04BE2:  MOVLB  8
04BE4:  CLRF   x25
04BE6:  MOVLB  0
04BE8:  CALL   1C40
04BEC:  MOVFF  02,3C2
04BF0:  MOVFF  01,3C1
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04BF4:  MOVLW  9A
04BF6:  MOVWF  FF6
04BF8:  MOVLW  05
04BFA:  MOVWF  FF7
04BFC:  MOVLW  00
04BFE:  MOVWF  FF8
04C00:  MOVLW  0D
04C02:  MOVLB  8
04C04:  MOVWF  x23
04C06:  MOVLB  0
04C08:  CALL   1B0A
04C0C:  MOVFF  3C2,4C5
04C10:  MOVLW  37
04C12:  MOVLB  4
04C14:  MOVWF  xC6
04C16:  MOVLB  0
04C18:  CALL   1CCC
04C1C:  MOVFF  3C1,4C5
04C20:  MOVLW  37
04C22:  MOVLB  4
04C24:  MOVWF  xC6
04C26:  MOVLB  0
04C28:  CALL   1CCC
04C2C:  MOVLW  0D
04C2E:  MOVLB  8
04C30:  MOVWF  x66
04C32:  MOVLB  0
04C34:  CALL   1A88
04C38:  MOVLW  0A
04C3A:  MOVLB  8
04C3C:  MOVWF  x66
04C3E:  MOVLB  0
04C40:  CALL   1A88
....................     ans = ad7490_read(ADC_CIGS1_CURR);
04C44:  MOVLW  01
04C46:  MOVLB  8
04C48:  MOVWF  x25
04C4A:  MOVLB  0
04C4C:  CALL   1C40
04C50:  MOVFF  02,3C2
04C54:  MOVFF  01,3C1
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04C58:  MOVLW  B0
04C5A:  MOVWF  FF6
04C5C:  MOVLW  05
04C5E:  MOVWF  FF7
04C60:  MOVLW  00
04C62:  MOVWF  FF8
04C64:  MOVLW  0D
04C66:  MOVLB  8
04C68:  MOVWF  x23
04C6A:  MOVLB  0
04C6C:  CALL   1B0A
04C70:  MOVFF  3C2,4C5
04C74:  MOVLW  37
04C76:  MOVLB  4
04C78:  MOVWF  xC6
04C7A:  MOVLB  0
04C7C:  CALL   1CCC
04C80:  MOVFF  3C1,4C5
04C84:  MOVLW  37
04C86:  MOVLB  4
04C88:  MOVWF  xC6
04C8A:  MOVLB  0
04C8C:  CALL   1CCC
04C90:  MOVLW  0D
04C92:  MOVLB  8
04C94:  MOVWF  x66
04C96:  MOVLB  0
04C98:  CALL   1A88
04C9C:  MOVLW  0A
04C9E:  MOVLB  8
04CA0:  MOVWF  x66
04CA2:  MOVLB  0
04CA4:  CALL   1A88
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04CA8:  MOVLW  02
04CAA:  MOVLB  8
04CAC:  MOVWF  x25
04CAE:  MOVLB  0
04CB0:  CALL   1C40
04CB4:  MOVFF  02,3C2
04CB8:  MOVFF  01,3C1
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
04CBC:  MOVLW  C6
04CBE:  MOVWF  FF6
04CC0:  MOVLW  05
04CC2:  MOVWF  FF7
04CC4:  MOVLW  00
04CC6:  MOVWF  FF8
04CC8:  MOVLW  0F
04CCA:  MOVLB  8
04CCC:  MOVWF  x23
04CCE:  MOVLB  0
04CD0:  CALL   1B0A
04CD4:  MOVFF  3C2,4C5
04CD8:  MOVLW  37
04CDA:  MOVLB  4
04CDC:  MOVWF  xC6
04CDE:  MOVLB  0
04CE0:  CALL   1CCC
04CE4:  MOVFF  3C1,4C5
04CE8:  MOVLW  37
04CEA:  MOVLB  4
04CEC:  MOVWF  xC6
04CEE:  MOVLB  0
04CF0:  CALL   1CCC
04CF4:  MOVLW  0D
04CF6:  MOVLB  8
04CF8:  MOVWF  x66
04CFA:  MOVLB  0
04CFC:  CALL   1A88
04D00:  MOVLW  0A
04D02:  MOVLB  8
04D04:  MOVWF  x66
04D06:  MOVLB  0
04D08:  CALL   1A88
....................     ans = ad7490_read(ADC_CIGS1_VREF);
04D0C:  MOVLW  03
04D0E:  MOVLB  8
04D10:  MOVWF  x25
04D12:  MOVLB  0
04D14:  CALL   1C40
04D18:  MOVFF  02,3C2
04D1C:  MOVFF  01,3C1
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04D20:  MOVLW  DE
04D22:  MOVWF  FF6
04D24:  MOVLW  05
04D26:  MOVWF  FF7
04D28:  MOVLW  00
04D2A:  MOVWF  FF8
04D2C:  MOVLW  10
04D2E:  MOVLB  8
04D30:  MOVWF  x23
04D32:  MOVLB  0
04D34:  CALL   1B0A
04D38:  MOVFF  3C2,4C5
04D3C:  MOVLW  37
04D3E:  MOVLB  4
04D40:  MOVWF  xC6
04D42:  MOVLB  0
04D44:  CALL   1CCC
04D48:  MOVFF  3C1,4C5
04D4C:  MOVLW  37
04D4E:  MOVLB  4
04D50:  MOVWF  xC6
04D52:  MOVLB  0
04D54:  CALL   1CCC
04D58:  MOVLW  0D
04D5A:  MOVLB  8
04D5C:  MOVWF  x66
04D5E:  MOVLB  0
04D60:  CALL   1A88
04D64:  MOVLW  0A
04D66:  MOVLB  8
04D68:  MOVWF  x66
04D6A:  MOVLB  0
04D6C:  CALL   1A88
04D70:  GOTO   7514 (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
04D74:  MOVLW  50
04D76:  MOVWF  FF6
04D78:  MOVLW  06
04D7A:  MOVWF  FF7
04D7C:  MOVLW  00
04D7E:  MOVWF  FF8
04D80:  CALL   1ADA
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04D84:  MOVLW  64
04D86:  MOVWF  FF6
04D88:  MOVLW  06
04D8A:  MOVWF  FF7
04D8C:  MOVLW  00
04D8E:  MOVWF  FF8
04D90:  MOVLW  0E
04D92:  MOVLB  8
04D94:  MOVWF  x23
04D96:  MOVLB  0
04D98:  CALL   1B0A
04D9C:  MOVFF  3CD,823
04DA0:  MOVLW  1B
04DA2:  MOVLB  8
04DA4:  MOVWF  x24
04DA6:  MOVLB  0
04DA8:  CALL   46A6
04DAC:  MOVLW  0D
04DAE:  MOVLB  8
04DB0:  MOVWF  x66
04DB2:  MOVLB  0
04DB4:  CALL   1A88
04DB8:  MOVLW  0A
04DBA:  MOVLB  8
04DBC:  MOVWF  x66
04DBE:  MOVLB  0
04DC0:  CALL   1A88
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
04DC4:  BCF    F94.0
04DC6:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
04DC8:  BCF    F94.5
04DCA:  BCF    F8B.5
....................     output_low(EN_NPWR); 
04DCC:  BCF    F94.7
04DCE:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
04DD0:  CALL   2F08
04DD4:  MOVFF  03,3D1
04DD8:  MOVFF  02,3D0
04DDC:  MOVFF  01,3CF
04DE0:  MOVFF  00,3CE
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
04DE4:  MOVLW  0D
04DE6:  MOVLB  8
04DE8:  MOVWF  x25
04DEA:  MOVLB  0
04DEC:  CALL   1C40
04DF0:  MOVFF  02,3D3
04DF4:  MOVFF  01,3D2
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
04DF8:  MOVLW  0E
04DFA:  MOVLB  8
04DFC:  MOVWF  x25
04DFE:  MOVLB  0
04E00:  CALL   1C40
04E04:  MOVFF  02,3D5
04E08:  MOVFF  01,3D4
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
04E0C:  MOVLW  0C
04E0E:  MOVLB  8
04E10:  MOVWF  x25
04E12:  MOVLB  0
04E14:  CALL   1C40
04E18:  MOVFF  02,3D7
04E1C:  MOVFF  01,3D6
....................     measured_data.pd = ad7490_read(ADC_PD); 
04E20:  MOVLW  0F
04E22:  MOVLB  8
04E24:  MOVWF  x25
04E26:  MOVLB  0
04E28:  CALL   1C40
04E2C:  MOVFF  02,3D9
04E30:  MOVFF  01,3D8
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
04E34:  MOVLB  7
04E36:  CLRF   xD6
04E38:  MOVLB  0
04E3A:  MOVLB  3
04E3C:  MOVF   xCD,W
04E3E:  MOVLB  7
04E40:  SUBWF  xD6,W
04E42:  BTFSS  FD8.0
04E44:  BRA    4E4C
04E46:  MOVLB  0
04E48:  GOTO   4EEE
04E4C:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04E4E:  MOVLB  8
04E50:  CLRF   x24
04E52:  MOVFF  7D6,823
04E56:  MOVLB  0
04E58:  CALL   48A6
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
04E5C:  MOVLW  0A
04E5E:  MOVLB  8
04E60:  MOVWF  x7B
04E62:  MOVLB  0
04E64:  CALL   1A5A
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
04E68:  CLRF   03
04E6A:  MOVLB  7
04E6C:  MOVF   xD6,W
04E6E:  MOVWF  02
04E70:  BCF    FD8.0
04E72:  RLCF   02,F
04E74:  RLCF   03,F
04E76:  MOVF   02,W
04E78:  ADDLW  DA
04E7A:  MOVWF  01
04E7C:  MOVLW  03
04E7E:  ADDWFC 03,F
04E80:  MOVF   01,W
04E82:  MOVLB  8
04E84:  MOVWF  x23
04E86:  MOVFF  03,824
04E8A:  MOVLW  02
04E8C:  MOVWF  x25
04E8E:  MOVLB  0
04E90:  CALL   1C40
04E94:  MOVFF  824,FEA
04E98:  MOVFF  823,FE9
04E9C:  MOVFF  02,FEC
04EA0:  MOVF   FED,F
04EA2:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
04EA6:  CLRF   03
04EA8:  MOVLB  7
04EAA:  MOVF   xD6,W
04EAC:  MOVWF  02
04EAE:  BCF    FD8.0
04EB0:  RLCF   02,F
04EB2:  RLCF   03,F
04EB4:  MOVF   02,W
04EB6:  ADDLW  D8
04EB8:  MOVWF  01
04EBA:  MOVLW  05
04EBC:  ADDWFC 03,F
04EBE:  MOVF   01,W
04EC0:  MOVLB  8
04EC2:  MOVWF  x23
04EC4:  MOVFF  03,824
04EC8:  MOVLW  01
04ECA:  MOVWF  x25
04ECC:  MOVLB  0
04ECE:  CALL   1C40
04ED2:  MOVFF  824,FEA
04ED6:  MOVFF  823,FE9
04EDA:  MOVFF  02,FEC
04EDE:  MOVF   FED,F
04EE0:  MOVFF  01,FEF
04EE4:  MOVLB  7
04EE6:  INCF   xD6,F
04EE8:  MOVLB  0
04EEA:  GOTO   4E3A
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
04EEE:  BCF    F94.0
04EF0:  BCF    F8B.0
....................     output_high(EN_NPWR);
04EF2:  BCF    F94.7
04EF4:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
04EF6:  MOVLW  78
04EF8:  MOVWF  FF6
04EFA:  MOVLW  06
04EFC:  MOVWF  FF7
04EFE:  MOVLW  00
04F00:  MOVWF  FF8
04F02:  CALL   1ADA
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
04F06:  MOVLW  8A
04F08:  MOVWF  FF6
04F0A:  MOVLW  06
04F0C:  MOVWF  FF7
04F0E:  MOVLW  00
04F10:  MOVWF  FF8
04F12:  CALL   1ADA
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
04F16:  MOVLB  7
04F18:  CLRF   xD7
04F1A:  CLRF   xD8
04F1C:  CLRF   xD9
04F1E:  CLRF   xDA
04F20:  CLRF   xDB
04F22:  CLRF   xDC
04F24:  CLRF   xDD
04F26:  CLRF   xDE
04F28:  CLRF   xDF
04F2A:  CLRF   xE0
04F2C:  CLRF   xE1
04F2E:  CLRF   xE2
04F30:  CLRF   xE3
04F32:  CLRF   xE4
04F34:  CLRF   xE5
04F36:  CLRF   xE6
04F38:  CLRF   xE7
04F3A:  CLRF   xE8
04F3C:  CLRF   xE9
04F3E:  CLRF   xEA
04F40:  CLRF   xEB
04F42:  CLRF   xEC
04F44:  CLRF   xED
04F46:  CLRF   xEE
04F48:  CLRF   xEF
04F4A:  CLRF   xF0
04F4C:  CLRF   xF1
04F4E:  CLRF   xF2
04F50:  CLRF   xF3
04F52:  CLRF   xF4
04F54:  CLRF   xF5
04F56:  CLRF   xF6
04F58:  CLRF   xF7
04F5A:  CLRF   xF8
04F5C:  CLRF   xF9
04F5E:  CLRF   xFA
04F60:  CLRF   xFB
04F62:  CLRF   xFC
04F64:  CLRF   xFD
04F66:  CLRF   xFE
04F68:  CLRF   xFF
04F6A:  MOVLB  8
04F6C:  CLRF   x00
04F6E:  CLRF   x01
04F70:  CLRF   x02
04F72:  CLRF   x03
04F74:  CLRF   x04
04F76:  CLRF   x05
04F78:  CLRF   x06
04F7A:  CLRF   x07
04F7C:  CLRF   x08
04F7E:  CLRF   x09
04F80:  CLRF   x0A
04F82:  CLRF   x0B
04F84:  CLRF   x0C
04F86:  CLRF   x0D
04F88:  CLRF   x0E
04F8A:  CLRF   x0F
04F8C:  CLRF   x10
04F8E:  CLRF   x11
04F90:  CLRF   x12
04F92:  CLRF   x13
04F94:  CLRF   x14
04F96:  CLRF   x15
04F98:  CLRF   x16
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
04F9A:  CLRF   x17
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
04F9C:  CLRF   x19
04F9E:  CLRF   x18
04FA0:  MOVLB  0
04FA2:  MOVLB  8
04FA4:  MOVF   x19,F
04FA6:  BTFSC  FD8.2
04FA8:  BRA    4FB0
04FAA:  MOVLB  0
04FAC:  GOTO   51E4
04FB0:  MOVLB  0
04FB2:  MOVLB  3
04FB4:  MOVF   xCD,W
04FB6:  MOVLB  8
04FB8:  SUBWF  x18,W
04FBA:  BTFSS  FD8.0
04FBC:  BRA    4FC4
04FBE:  MOVLB  0
04FC0:  GOTO   51E4
04FC4:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
04FC6:  CLRF   03
04FC8:  MOVLB  8
04FCA:  MOVF   x17,W
04FCC:  ADDLW  D7
04FCE:  MOVWF  01
04FD0:  MOVLW  07
04FD2:  ADDWFC 03,F
04FD4:  MOVF   01,W
04FD6:  MOVWF  x23
04FD8:  MOVFF  03,824
04FDC:  BCF    FD8.0
04FDE:  RLCF   x18,W
04FE0:  MOVWF  02
04FE2:  RLCF   x19,W
04FE4:  MOVWF  03
04FE6:  MOVF   02,W
04FE8:  ADDLW  DA
04FEA:  MOVWF  FE9
04FEC:  MOVLW  03
04FEE:  ADDWFC 03,W
04FF0:  MOVWF  FEA
04FF2:  MOVFF  FEC,826
04FF6:  MOVF   FED,F
04FF8:  MOVFF  FEF,825
04FFC:  RRCF   x26,F
04FFE:  RRCF   x25,F
05000:  RRCF   x26,F
05002:  RRCF   x25,F
05004:  RRCF   x26,F
05006:  RRCF   x25,F
05008:  RRCF   x26,F
0500A:  RRCF   x25,F
0500C:  MOVLW  0F
0500E:  ANDWF  x26,F
05010:  MOVF   x25,W
05012:  MOVWF  00
05014:  CLRF   03
05016:  MOVF   00,W
05018:  MOVWF  x25
0501A:  MOVFF  03,826
0501E:  MOVFF  824,FEA
05022:  MOVFF  823,FE9
05026:  MOVFF  825,FEF
....................         packetdata_index++; 
0502A:  INCF   x17,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
0502C:  CLRF   03
0502E:  MOVF   x17,W
05030:  ADDLW  D7
05032:  MOVWF  01
05034:  MOVLW  07
05036:  ADDWFC 03,F
05038:  MOVF   01,W
0503A:  MOVWF  x23
0503C:  MOVFF  03,824
05040:  BCF    FD8.0
05042:  RLCF   x18,W
05044:  MOVWF  02
05046:  RLCF   x19,W
05048:  MOVWF  03
0504A:  MOVF   02,W
0504C:  ADDLW  DA
0504E:  MOVWF  FE9
05050:  MOVLW  03
05052:  ADDWFC 03,W
05054:  MOVWF  FEA
05056:  MOVFF  FEC,826
0505A:  MOVF   FED,F
0505C:  MOVFF  FEF,825
05060:  MOVLW  0F
05062:  ANDWF  x25,F
05064:  CLRF   x26
05066:  RLCF   x25,F
05068:  RLCF   x26,F
0506A:  RLCF   x25,F
0506C:  RLCF   x26,F
0506E:  RLCF   x25,F
05070:  RLCF   x26,F
05072:  RLCF   x25,F
05074:  RLCF   x26,F
05076:  MOVLW  F0
05078:  ANDWF  x25,F
0507A:  BCF    FD8.0
0507C:  RLCF   x18,W
0507E:  MOVWF  02
05080:  RLCF   x19,W
05082:  MOVWF  03
05084:  MOVF   02,W
05086:  ADDLW  D8
05088:  MOVWF  FE9
0508A:  MOVLW  05
0508C:  ADDWFC 03,W
0508E:  MOVWF  FEA
05090:  MOVFF  FEC,828
05094:  MOVF   FED,F
05096:  MOVFF  FEF,827
0509A:  MOVFF  828,827
0509E:  CLRF   x28
050A0:  MOVF   x27,W
050A2:  ANDLW  0F
050A4:  MOVWF  00
050A6:  CLRF   03
050A8:  MOVF   00,W
050AA:  IORWF  x25,W
050AC:  MOVWF  00
050AE:  MOVF   03,W
050B0:  IORWF  x26,W
050B2:  MOVWF  03
050B4:  MOVF   00,W
050B6:  MOVWF  x25
050B8:  MOVFF  03,826
050BC:  MOVFF  824,FEA
050C0:  MOVFF  823,FE9
050C4:  MOVFF  825,FEF
....................         packetdata_index++; 
050C8:  INCF   x17,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
050CA:  CLRF   03
050CC:  MOVF   x17,W
050CE:  ADDLW  D7
050D0:  MOVWF  01
050D2:  MOVLW  07
050D4:  ADDWFC 03,F
050D6:  MOVF   01,W
050D8:  MOVWF  x23
050DA:  MOVFF  03,824
050DE:  BCF    FD8.0
050E0:  RLCF   x18,W
050E2:  MOVWF  02
050E4:  RLCF   x19,W
050E6:  MOVWF  03
050E8:  MOVF   02,W
050EA:  ADDLW  D8
050EC:  MOVWF  FE9
050EE:  MOVLW  05
050F0:  ADDWFC 03,W
050F2:  MOVWF  FEA
050F4:  MOVFF  FEC,826
050F8:  MOVF   FED,F
050FA:  MOVFF  FEF,825
050FE:  MOVF   x25,W
05100:  MOVWF  00
05102:  CLRF   03
05104:  MOVF   00,W
05106:  MOVWF  x25
05108:  MOVFF  03,826
0510C:  MOVFF  824,FEA
05110:  MOVFF  823,FE9
05114:  MOVFF  825,FEF
....................         packetdata_index++; 
05118:  INCF   x17,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
0511A:  MOVF   x17,W
0511C:  SUBLW  3F
0511E:  BTFSC  FD8.2
05120:  BRA    5128
05122:  MOVLB  0
05124:  GOTO   51D6
05128:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
0512A:  MOVLW  07
0512C:  MOVLB  8
0512E:  MOVWF  x24
05130:  MOVLW  D7
05132:  MOVWF  x23
05134:  MOVLW  3F
05136:  MOVWF  x25
05138:  MOVLB  0
0513A:  CALL   3E6A
0513E:  MOVFF  01,816
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
05142:  MOVLB  3
05144:  MOVF   x74,W
05146:  MOVLB  8
05148:  MOVWF  x1A
0514A:  MOVLB  3
0514C:  MOVF   x75,W
0514E:  MOVLB  8
05150:  MOVWF  x1B
05152:  MOVLW  16
05154:  MOVLB  3
05156:  ADDWF  x76,W
05158:  MOVLB  8
0515A:  MOVWF  x1C
0515C:  MOVLW  00
0515E:  MOVLB  3
05160:  ADDWFC x77,W
05162:  MOVLB  8
05164:  MOVWF  x1D
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
05166:  MOVFF  F1,866
0516A:  MOVFF  F0,865
0516E:  MOVFF  EF,864
05172:  MOVFF  EE,863
05176:  MOVFF  81D,86A
0517A:  MOVFF  81C,869
0517E:  MOVFF  81B,868
05182:  MOVFF  81A,867
05186:  MOVLW  07
05188:  MOVWF  x6C
0518A:  MOVLW  D7
0518C:  MOVWF  x6B
0518E:  CLRF   x6E
05190:  MOVLW  40
05192:  MOVWF  x6D
05194:  MOVLB  0
05196:  CALL   320E
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
0519A:  MOVLW  40
0519C:  MOVLB  3
0519E:  ADDWF  x74,F
051A0:  MOVLW  00
051A2:  ADDWFC x75,F
051A4:  MOVLW  00
051A6:  ADDWFC x76,F
051A8:  MOVLW  00
051AA:  ADDWFC x77,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
051AC:  MOVLW  40
051AE:  ADDWF  x79,F
051B0:  MOVLW  00
051B2:  ADDWFC x7A,F
051B4:  MOVLW  00
051B6:  ADDWFC x7B,F
051B8:  MOVLW  00
051BA:  ADDWFC x7C,F
....................             packetdata_index = 0; // Reset packet byte counter
051BC:  MOVLB  8
051BE:  CLRF   x17
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
051C0:  MOVLW  07
051C2:  MOVWF  FEA
051C4:  MOVLW  D7
051C6:  MOVWF  FE9
051C8:  CLRF   00
051CA:  CLRF   02
051CC:  MOVLW  40
051CE:  MOVWF  01
051D0:  MOVLB  0
051D2:  CALL   4254
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
051D6:  MOVLB  8
051D8:  INCF   x18,F
051DA:  BTFSC  FD8.2
051DC:  INCF   x19,F
051DE:  MOVLB  0
051E0:  GOTO   4FA2
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
051E4:  MOVLB  8
051E6:  MOVF   x17,W
051E8:  SUBLW  3E
051EA:  BTFSC  FD8.0
051EC:  BRA    51F4
051EE:  MOVLB  0
051F0:  GOTO   52A6
051F4:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
051F6:  MOVFF  817,81E
051FA:  MOVLB  8
051FC:  MOVF   x1E,W
051FE:  SUBLW  3E
05200:  BTFSC  FD8.0
05202:  BRA    520A
05204:  MOVLB  0
05206:  GOTO   522A
0520A:  MOVLB  0
....................             packetdata[j] = 0x00;
0520C:  CLRF   03
0520E:  MOVLB  8
05210:  MOVF   x1E,W
05212:  ADDLW  D7
05214:  MOVWF  FE9
05216:  MOVLW  07
05218:  ADDWFC 03,W
0521A:  MOVWF  FEA
0521C:  CLRF   FEF
0521E:  MOVLB  0
05220:  MOVLB  8
05222:  INCF   x1E,F
05224:  MOVLB  0
05226:  GOTO   51FA
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
0522A:  MOVLB  3
0522C:  MOVF   x74,W
0522E:  MOVLB  8
05230:  MOVWF  x1F
05232:  MOVLB  3
05234:  MOVF   x75,W
05236:  MOVLB  8
05238:  MOVWF  x20
0523A:  MOVLW  16
0523C:  MOVLB  3
0523E:  ADDWF  x76,W
05240:  MOVLB  8
05242:  MOVWF  x21
05244:  MOVLW  00
05246:  MOVLB  3
05248:  ADDWFC x77,W
0524A:  MOVLB  8
0524C:  MOVWF  x22
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0524E:  MOVFF  F1,866
05252:  MOVFF  F0,865
05256:  MOVFF  EF,864
0525A:  MOVFF  EE,863
0525E:  MOVFF  822,86A
05262:  MOVFF  821,869
05266:  MOVFF  820,868
0526A:  MOVFF  81F,867
0526E:  MOVLW  07
05270:  MOVWF  x6C
05272:  MOVLW  D7
05274:  MOVWF  x6B
05276:  CLRF   x6E
05278:  MOVLW  40
0527A:  MOVWF  x6D
0527C:  MOVLB  0
0527E:  CALL   320E
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
05282:  MOVLW  40
05284:  MOVLB  3
05286:  ADDWF  x74,F
05288:  MOVLW  00
0528A:  ADDWFC x75,F
0528C:  MOVLW  00
0528E:  ADDWFC x76,F
05290:  MOVLW  00
05292:  ADDWFC x77,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
05294:  MOVLW  40
05296:  ADDWF  x79,F
05298:  MOVLW  00
0529A:  ADDWFC x7A,F
0529C:  MOVLW  00
0529E:  ADDWFC x7B,F
052A0:  MOVLW  00
052A2:  ADDWFC x7C,F
052A4:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
052A6:  CALL   38EA
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
052AA:  MOVLW  A8
052AC:  MOVWF  FF6
052AE:  MOVLW  06
052B0:  MOVWF  FF7
052B2:  MOVLW  00
052B4:  MOVWF  FF8
052B6:  CALL   1ADA
052BA:  GOTO   5436 (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... /*
.................... void add_smf_queue_data()
.................... {
....................     SmfDataStruct smf_data;
....................     smf_data.type = SMF_DATA_TYPE_CIGS;
....................     smf_data.length = PACKET_SIZE;
....................     memcpy(smf_data.data, packetdata, PACKET_SIZE);
....................     enqueue_smf_data(&smf_data);
.................... }
.................... */
.................... void add_smf_queue_piclog()
.................... {}
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03B8E:  CALL   2F08
03B92:  MOVFF  03,4D3
03B96:  MOVFF  02,4D2
03B9A:  MOVFF  01,4D1
03B9E:  MOVFF  00,4D0
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03BA2:  MOVFF  4D3,4D9
03BA6:  MOVLB  4
03BA8:  CLRF   xDA
03BAA:  CLRF   xDB
03BAC:  CLRF   xDC
03BAE:  MOVF   xD9,W
03BB0:  MOVWF  xCA
....................     piclog[1] = (time >> 16) & 0xFF;
03BB2:  MOVFF  4D2,4D9
03BB6:  MOVFF  4D3,4DA
03BBA:  CLRF   xDB
03BBC:  CLRF   xDC
03BBE:  MOVF   xD9,W
03BC0:  MOVWF  xCB
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03BC2:  MOVFF  4D1,4D9
03BC6:  MOVFF  4D2,4DA
03BCA:  MOVFF  4D3,4DB
03BCE:  CLRF   xDC
03BD0:  MOVF   xD9,W
03BD2:  MOVWF  xCC
....................     piclog[3] = time & 0xFF;         // Time low byte
03BD4:  MOVF   xD0,W
03BD6:  MOVWF  xCD
....................     piclog[4] = function;            // Function code
03BD8:  MOVFF  4C8,4CE
....................     piclog[5] = parameter;           // Parameter code
03BDC:  MOVFF  4C9,4CF
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03BE0:  MOVLB  3
03BE2:  MOVF   x6A,W
03BE4:  MOVLB  4
03BE6:  MOVWF  xD4
03BE8:  MOVLB  3
03BEA:  MOVF   x6B,W
03BEC:  MOVLB  4
03BEE:  MOVWF  xD5
03BF0:  MOVLW  02
03BF2:  MOVLB  3
03BF4:  ADDWF  x6C,W
03BF6:  MOVLB  4
03BF8:  MOVWF  xD6
03BFA:  MOVLW  00
03BFC:  MOVLB  3
03BFE:  ADDWFC x6D,W
03C00:  MOVLB  4
03C02:  MOVWF  xD7
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03C04:  MOVFF  F1,866
03C08:  MOVFF  F0,865
03C0C:  MOVFF  EF,864
03C10:  MOVFF  EE,863
03C14:  MOVLB  0
03C16:  CALL   213E
03C1A:  MOVF   01,F
03C1C:  BTFSS  FD8.2
03C1E:  GOTO   3C32
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03C22:  MOVLW  1C
03C24:  MOVWF  FF6
03C26:  MOVLW  07
03C28:  MOVWF  FF7
03C2A:  MOVLW  00
03C2C:  MOVWF  FF8
03C2E:  CALL   1ADA
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03C32:  MOVFF  F1,866
03C36:  MOVFF  F0,865
03C3A:  MOVFF  EF,864
03C3E:  MOVFF  EE,863
03C42:  MOVFF  4D7,86A
03C46:  MOVFF  4D6,869
03C4A:  MOVFF  4D5,868
03C4E:  MOVFF  4D4,867
03C52:  MOVLW  04
03C54:  MOVLB  8
03C56:  MOVWF  x6C
03C58:  MOVLW  CA
03C5A:  MOVWF  x6B
03C5C:  CLRF   x6E
03C5E:  MOVLW  06
03C60:  MOVWF  x6D
03C62:  MOVLB  0
03C64:  CALL   320E
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03C68:  MOVLW  06
03C6A:  MOVLB  3
03C6C:  ADDWF  x6A,F
03C6E:  MOVLW  00
03C70:  ADDWFC x6B,F
03C72:  MOVLW  00
03C74:  ADDWFC x6C,F
03C76:  MOVLW  00
03C78:  ADDWFC x6D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03C7A:  MOVLW  06
03C7C:  ADDWF  x6F,F
03C7E:  MOVLW  00
03C80:  ADDWFC x70,F
03C82:  MOVLW  00
03C84:  ADDWFC x71,F
03C86:  MOVLW  00
03C88:  ADDWFC x72,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03C8A:  MOVLW  06
03C8C:  ADDWF  x73,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03C8E:  MOVLW  06
03C90:  ADDWF  x73,W
03C92:  SUBLW  3F
03C94:  BTFSS  FD8.0
03C96:  BRA    3C9E
03C98:  MOVLB  0
03C9A:  GOTO   3D00
03C9E:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03CA0:  MOVLB  3
03CA2:  MOVF   x6A,W
03CA4:  MOVLB  4
03CA6:  MOVWF  xD4
03CA8:  MOVLB  3
03CAA:  MOVF   x6B,W
03CAC:  MOVLB  4
03CAE:  MOVWF  xD5
03CB0:  MOVLW  02
03CB2:  MOVLB  3
03CB4:  ADDWF  x6C,W
03CB6:  MOVLB  4
03CB8:  MOVWF  xD6
03CBA:  MOVLW  00
03CBC:  MOVLB  3
03CBE:  ADDWFC x6D,W
03CC0:  MOVLB  4
03CC2:  MOVWF  xD7
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03CC4:  MOVFF  F1,866
03CC8:  MOVFF  F0,865
03CCC:  MOVFF  EF,864
03CD0:  MOVFF  EE,863
03CD4:  MOVFF  4D7,86A
03CD8:  MOVFF  4D6,869
03CDC:  MOVFF  4D5,868
03CE0:  MOVFF  4D4,867
03CE4:  MOVLW  03
03CE6:  MOVLB  8
03CE8:  MOVWF  x6C
03CEA:  MOVLW  7E
03CEC:  MOVWF  x6B
03CEE:  CLRF   x6E
03CF0:  MOVLW  06
03CF2:  MOVWF  x6D
03CF4:  MOVLB  0
03CF6:  CALL   320E
....................         misf_piclog_write_counter = 0;
03CFA:  MOVLB  3
03CFC:  CLRF   x73
03CFE:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03D00:  CALL   38EA
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03D04:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"         // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"        // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数
.................... 
.................... void read_smf_header()
.................... {
....................     int8 read_data[PACKET_SIZE];
....................     int8 retry_count;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
07C56:  MOVLB  4
07C58:  CLRF   x89
07C5A:  MOVLB  0
07C5C:  MOVLB  4
07C5E:  MOVF   x89,W
07C60:  SUBLW  04
07C62:  BTFSC  FD8.0
07C64:  BRA    7C6C
07C66:  MOVLB  0
07C68:  GOTO   7D16
07C6C:  MOVLB  0
....................     {
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, read_data, PACKET_SIZE);
07C6E:  MOVFF  F5,4CE
07C72:  MOVFF  F4,4CD
07C76:  MOVFF  F3,4CC
07C7A:  MOVFF  F2,4CB
07C7E:  MOVLW  06
07C80:  MOVLB  4
07C82:  MOVWF  xD2
07C84:  MOVLW  AA
07C86:  MOVWF  xD1
07C88:  CLRF   xD0
07C8A:  CLRF   xCF
07C8C:  MOVLW  04
07C8E:  MOVWF  xD4
07C90:  MOVLW  49
07C92:  MOVWF  xD3
07C94:  CLRF   xD8
07C96:  CLRF   xD7
07C98:  CLRF   xD6
07C9A:  MOVLW  40
07C9C:  MOVWF  xD5
07C9E:  MOVLB  0
07CA0:  CALL   2204
....................         if (is_crc_valid(read_data, PACKET_SIZE-1))
07CA4:  MOVLW  04
07CA6:  MOVLB  4
07CA8:  MOVWF  xCC
07CAA:  MOVLW  49
07CAC:  MOVWF  xCB
07CAE:  MOVLW  3F
07CB0:  MOVWF  xCD
07CB2:  MOVLB  0
07CB4:  CALL   7B48
07CB8:  MOVF   01,F
07CBA:  BTFSC  FD8.2
07CBC:  GOTO   7D0C
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
07CC0:  MOVLW  01
07CC2:  MOVLB  4
07CC4:  ADDWF  x89,W
07CC6:  MOVWF  x8A
07CC8:  MOVLW  3E
07CCA:  MOVWF  FF6
07CCC:  MOVLW  07
07CCE:  MOVWF  FF7
07CD0:  MOVLW  00
07CD2:  MOVWF  FF8
07CD4:  MOVLW  23
07CD6:  MOVLB  8
07CD8:  MOVWF  x23
07CDA:  MOVLB  0
07CDC:  CALL   1B0A
07CE0:  MOVFF  48A,4CC
07CE4:  MOVLW  18
07CE6:  MOVLB  4
07CE8:  MOVWF  xCD
07CEA:  MOVLB  0
07CEC:  CALL   774E
07CF0:  MOVLW  0D
07CF2:  MOVLB  8
07CF4:  MOVWF  x66
07CF6:  MOVLB  0
07CF8:  CALL   1A88
07CFC:  MOVLW  0A
07CFE:  MOVLB  8
07D00:  MOVWF  x66
07D02:  MOVLB  0
07D04:  CALL   1A88
....................             break;
07D08:  GOTO   7D16
....................         }
07D0C:  MOVLB  4
07D0E:  INCF   x89,F
07D10:  MOVLB  0
07D12:  GOTO   7C5C
....................     }
....................     param.meas.used_size = lsb_array_to_int32(read_data, 0);
07D16:  MOVLW  04
07D18:  MOVLB  4
07D1A:  MOVWF  x8B
07D1C:  MOVLW  49
07D1E:  MOVWF  x8A
07D20:  CLRF   x8C
07D22:  MOVLB  0
07D24:  CALL   7B96
07D28:  MOVFF  03,388
07D2C:  MOVFF  02,387
07D30:  MOVFF  01,386
07D34:  MOVFF  00,385
....................     param.meas.loop_counter = read_data[4];
07D38:  MOVLB  3
07D3A:  CLRF   x8C
07D3C:  CLRF   x8B
07D3E:  CLRF   x8A
07D40:  MOVFF  44D,389
....................     param.piclog.used_size = lsb_array_to_int32(read_data, 5);
07D44:  MOVLW  04
07D46:  MOVLB  4
07D48:  MOVWF  x8B
07D4A:  MOVLW  49
07D4C:  MOVWF  x8A
07D4E:  MOVLW  05
07D50:  MOVWF  x8C
07D52:  MOVLB  0
07D54:  CALL   7B96
07D58:  MOVFF  03,393
07D5C:  MOVFF  02,392
07D60:  MOVFF  01,391
07D64:  MOVFF  00,390
....................     param.piclog.loop_counter = read_data[9];
07D68:  MOVLB  3
07D6A:  CLRF   x97
07D6C:  CLRF   x96
07D6E:  CLRF   x95
07D70:  MOVFF  452,394
07D74:  MOVLB  0
07D76:  GOTO   845A (RETURN)
.................... }
.................... 
.................... void write_smf_header()
.................... {
....................     int8 writedata[PACKET_SIZE];
.................... 
....................     // ヘッダー情報をwritedataに設定
....................     int32_to_be_array(param.meas.used_size, writedata, 0);
*
07F66:  MOVFF  388,4CE
07F6A:  MOVFF  387,4CD
07F6E:  MOVFF  386,4CC
07F72:  MOVFF  385,4CB
07F76:  MOVLW  04
07F78:  MOVLB  4
07F7A:  MOVWF  xD0
07F7C:  MOVLW  49
07F7E:  MOVWF  xCF
07F80:  CLRF   xD1
07F82:  MOVLB  0
07F84:  CALL   7EF6
....................     writedata[4] = param.meas.loop_counter;
07F88:  MOVFF  389,44D
....................     int32_to_be_array(param.piclog.used_size, writedata, 5);
07F8C:  MOVFF  393,4CE
07F90:  MOVFF  392,4CD
07F94:  MOVFF  391,4CC
07F98:  MOVFF  390,4CB
07F9C:  MOVLW  04
07F9E:  MOVLB  4
07FA0:  MOVWF  xD0
07FA2:  MOVLW  49
07FA4:  MOVWF  xCF
07FA6:  MOVLW  05
07FA8:  MOVWF  xD1
07FAA:  MOVLB  0
07FAC:  CALL   7EF6
....................     writedata[9] = param.piclog.loop_counter;
07FB0:  MOVFF  394,452
.................... 
....................     writedata[63] = calc_crc8(writedata, PACKET_SIZE-1); // CRCを計算してバッファに書き込み
07FB4:  MOVLW  04
07FB6:  MOVLB  8
07FB8:  MOVWF  x24
07FBA:  MOVLW  49
07FBC:  MOVWF  x23
07FBE:  MOVLW  3F
07FC0:  MOVWF  x25
07FC2:  MOVLB  0
07FC4:  CALL   3E6A
07FC8:  MOVFF  01,488
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
07FCC:  MOVLB  4
07FCE:  BCF    xCA.0
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
07FD0:  CLRF   xC9
07FD2:  MOVLB  0
07FD4:  MOVLB  4
07FD6:  MOVF   xC9,W
07FD8:  SUBLW  04
07FDA:  BTFSC  FD8.0
07FDC:  BRA    7FE4
07FDE:  MOVLB  0
07FE0:  GOTO   80E4
07FE4:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
07FE6:  MOVFF  F5,866
07FEA:  MOVFF  F4,865
07FEE:  MOVFF  F3,864
07FF2:  MOVFF  F2,863
07FF6:  MOVLW  06
07FF8:  MOVLB  8
07FFA:  MOVWF  x6A
07FFC:  MOVLW  AA
07FFE:  MOVWF  x69
08000:  CLRF   x68
08002:  CLRF   x67
08004:  MOVLB  0
08006:  CALL   3592
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, writedata, PACKET_SIZE); // ヘッダーを書き込み
0800A:  MOVFF  F5,866
0800E:  MOVFF  F4,865
08012:  MOVFF  F3,864
08016:  MOVFF  F2,863
0801A:  MOVLW  06
0801C:  MOVLB  8
0801E:  MOVWF  x6A
08020:  MOVLW  AA
08022:  MOVWF  x69
08024:  CLRF   x68
08026:  CLRF   x67
08028:  MOVLW  04
0802A:  MOVWF  x6C
0802C:  MOVLW  49
0802E:  MOVWF  x6B
08030:  CLRF   x6E
08032:  MOVLW  40
08034:  MOVWF  x6D
08036:  MOVLB  0
08038:  CALL   320E
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0803C:  MOVFF  F5,4CE
08040:  MOVFF  F4,4CD
08044:  MOVFF  F3,4CC
08048:  MOVFF  F2,4CB
0804C:  MOVLW  06
0804E:  MOVLB  4
08050:  MOVWF  xD2
08052:  MOVLW  AA
08054:  MOVWF  xD1
08056:  CLRF   xD0
08058:  CLRF   xCF
0805A:  MOVLW  04
0805C:  MOVWF  xD4
0805E:  MOVLW  89
08060:  MOVWF  xD3
08062:  CLRF   xD8
08064:  CLRF   xD7
08066:  CLRF   xD6
08068:  MOVLW  40
0806A:  MOVWF  xD5
0806C:  MOVLB  0
0806E:  CALL   2204
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
08072:  MOVLW  04
08074:  MOVLB  4
08076:  MOVWF  xCC
08078:  MOVLW  89
0807A:  MOVWF  xCB
0807C:  MOVLW  3F
0807E:  MOVWF  xCD
08080:  MOVLB  0
08082:  CALL   7B48
08086:  MOVF   01,F
08088:  BTFSC  FD8.2
0808A:  GOTO   80DA
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0808E:  MOVLW  01
08090:  MOVLB  4
08092:  ADDWF  xC9,W
08094:  MOVWF  xCB
08096:  MOVLW  66
08098:  MOVWF  FF6
0809A:  MOVLW  07
0809C:  MOVWF  FF7
0809E:  MOVLW  00
080A0:  MOVWF  FF8
080A2:  MOVLW  23
080A4:  MOVLB  8
080A6:  MOVWF  x23
080A8:  MOVLB  0
080AA:  CALL   1B0A
080AE:  MOVFF  4CB,4CC
080B2:  MOVLW  18
080B4:  MOVLB  4
080B6:  MOVWF  xCD
080B8:  MOVLB  0
080BA:  CALL   774E
080BE:  MOVLW  0D
080C0:  MOVLB  8
080C2:  MOVWF  x66
080C4:  MOVLB  0
080C6:  CALL   1A88
080CA:  MOVLW  0A
080CC:  MOVLB  8
080CE:  MOVWF  x66
080D0:  MOVLB  0
080D2:  CALL   1A88
....................             break;
080D6:  GOTO   80E4
....................         }
080DA:  MOVLB  4
080DC:  INCF   xC9,F
080DE:  MOVLB  0
080E0:  GOTO   7FD4
....................     }
....................     if (!crc_valid)
080E4:  MOVLB  4
080E6:  BTFSS  xCA.0
080E8:  BRA    80F0
080EA:  MOVLB  0
080EC:  GOTO   8136
080F0:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
080F2:  MOVLW  8E
080F4:  MOVWF  FF6
080F6:  MOVLW  07
080F8:  MOVWF  FF7
080FA:  MOVLW  00
080FC:  MOVWF  FF8
080FE:  MOVLW  25
08100:  MOVLB  8
08102:  MOVWF  x23
08104:  MOVLB  0
08106:  CALL   1B0A
0810A:  MOVLW  05
0810C:  MOVLB  4
0810E:  MOVWF  xCC
08110:  MOVLW  18
08112:  MOVWF  xCD
08114:  MOVLB  0
08116:  CALL   774E
0811A:  MOVLW  B5
0811C:  MOVWF  FF6
0811E:  MOVLW  07
08120:  MOVWF  FF7
08122:  MOVLW  00
08124:  MOVWF  FF8
08126:  MOVLW  0B
08128:  MOVLB  8
0812A:  MOVWF  x23
0812C:  MOVLB  0
0812E:  CALL   1B0A
....................         return; 
08132:  GOTO   8136
....................     }
08136:  GOTO   8A26 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0813A:  MOVLW  C2
0813C:  MOVWF  FF6
0813E:  MOVLW  07
08140:  MOVWF  FF7
08142:  MOVLW  00
08144:  MOVWF  FF8
08146:  CALL   1ADA
....................     fprintf(PC, "___Start copy_data__\r\n");
0814A:  MOVLW  DC
0814C:  MOVWF  FF6
0814E:  MOVLW  07
08150:  MOVWF  FF7
08152:  MOVLW  00
08154:  MOVWF  FF8
08156:  CALL   1ADA
....................     
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
0815A:  MOVLW  01
0815C:  MOVLB  3
0815E:  ADDWF  xC0,W
08160:  MOVWF  FE9
08162:  MOVLW  00
08164:  ADDWFC xC1,W
08166:  MOVWF  FEA
08168:  MOVFF  FEF,449
0816C:  MOVFF  449,450
08170:  MOVLB  0
08172:  CALL   78B8
08176:  MOVFF  02,03
0817A:  MOVF   01,W
0817C:  MOVWF  FE1
0817E:  MOVFF  03,FE2
08182:  MOVLW  04
08184:  MOVWF  FEA
08186:  MOVLW  02
08188:  MOVWF  FE9
0818A:  MOVLW  08
0818C:  MOVWF  01
0818E:  MOVFF  FE6,FEE
08192:  DECFSZ 01,F
08194:  GOTO   818E
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
08198:  MOVLW  01
0819A:  MOVLB  3
0819C:  ADDWF  xC0,W
0819E:  MOVWF  FE9
081A0:  MOVLW  00
081A2:  ADDWFC xC1,W
081A4:  MOVWF  FEA
081A6:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 write_src = smf_data->src;
....................     unsigned int32 write_size = smf_data->size;
081AA:  MOVFF  405,40D
081AE:  MOVFF  404,40C
081B2:  MOVFF  403,40B
081B6:  MOVFF  402,40A
081BA:  MOVFF  409,411
081BE:  MOVFF  408,410
081C2:  MOVFF  407,40F
081C6:  MOVFF  406,40E
081CA:  MOVLW  02
081CC:  ADDWF  xC0,W
081CE:  MOVWF  FE9
081D0:  MOVLW  00
081D2:  ADDWFC xC1,W
081D4:  MOVWF  FEA
081D6:  MOVFF  FEF,412
081DA:  MOVFF  FEC,413
081DE:  MOVFF  FEC,414
081E2:  MOVFF  FEC,415
081E6:  MOVF   FED,F
081E8:  MOVF   FED,F
081EA:  MOVF   FED,F
081EC:  MOVLW  06
081EE:  ADDWF  xC0,W
081F0:  MOVWF  FE9
081F2:  MOVLW  00
081F4:  ADDWFC xC1,W
081F6:  MOVWF  FEA
081F8:  MOVFF  FEF,416
081FC:  MOVFF  FEC,417
08200:  MOVFF  FEC,418
08204:  MOVFF  FEC,419
08208:  MOVF   FED,F
0820A:  MOVF   FED,F
0820C:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
0820E:  MOVLW  F4
08210:  MOVWF  FF6
08212:  MOVLW  07
08214:  MOVWF  FF7
08216:  MOVLW  00
08218:  MOVWF  FF8
0821A:  MOVLW  25
0821C:  MOVLB  8
0821E:  MOVWF  x23
08220:  MOVLB  0
08222:  CALL   1B0A
08226:  MOVFF  40D,4C5
0822A:  MOVLW  37
0822C:  MOVLB  4
0822E:  MOVWF  xC6
08230:  MOVLB  0
08232:  CALL   1CCC
08236:  MOVFF  40C,4C5
0823A:  MOVLW  37
0823C:  MOVLB  4
0823E:  MOVWF  xC6
08240:  MOVLB  0
08242:  CALL   1CCC
08246:  MOVFF  40B,4C5
0824A:  MOVLW  37
0824C:  MOVLB  4
0824E:  MOVWF  xC6
08250:  MOVLB  0
08252:  CALL   1CCC
08256:  MOVFF  40A,4C5
0825A:  MOVLW  37
0825C:  MOVLB  4
0825E:  MOVWF  xC6
08260:  MOVLB  0
08262:  CALL   1CCC
08266:  MOVLW  0D
08268:  MOVLB  8
0826A:  MOVWF  x66
0826C:  MOVLB  0
0826E:  CALL   1A88
08272:  MOVLW  0A
08274:  MOVLB  8
08276:  MOVWF  x66
08278:  MOVLB  0
0827A:  CALL   1A88
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0827E:  MOVLW  20
08280:  MOVWF  FF6
08282:  MOVLW  08
08284:  MOVWF  FF7
08286:  MOVLW  00
08288:  MOVWF  FF8
0828A:  MOVLW  25
0828C:  MOVLB  8
0828E:  MOVWF  x23
08290:  MOVLB  0
08292:  CALL   1B0A
08296:  MOVFF  411,4C5
0829A:  MOVLW  37
0829C:  MOVLB  4
0829E:  MOVWF  xC6
082A0:  MOVLB  0
082A2:  CALL   1CCC
082A6:  MOVFF  410,4C5
082AA:  MOVLW  37
082AC:  MOVLB  4
082AE:  MOVWF  xC6
082B0:  MOVLB  0
082B2:  CALL   1CCC
082B6:  MOVFF  40F,4C5
082BA:  MOVLW  37
082BC:  MOVLB  4
082BE:  MOVWF  xC6
082C0:  MOVLB  0
082C2:  CALL   1CCC
082C6:  MOVFF  40E,4C5
082CA:  MOVLW  37
082CC:  MOVLB  4
082CE:  MOVWF  xC6
082D0:  MOVLB  0
082D2:  CALL   1CCC
082D6:  MOVLW  0D
082D8:  MOVLB  8
082DA:  MOVWF  x66
082DC:  MOVLB  0
082DE:  CALL   1A88
082E2:  MOVLW  0A
082E4:  MOVLB  8
082E6:  MOVWF  x66
082E8:  MOVLB  0
082EA:  CALL   1A88
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
082EE:  MOVLW  4C
082F0:  MOVWF  FF6
082F2:  MOVLW  08
082F4:  MOVWF  FF7
082F6:  MOVLW  00
082F8:  MOVWF  FF8
082FA:  MOVLW  25
082FC:  MOVLB  8
082FE:  MOVWF  x23
08300:  MOVLB  0
08302:  CALL   1B0A
08306:  MOVFF  415,4C5
0830A:  MOVLW  37
0830C:  MOVLB  4
0830E:  MOVWF  xC6
08310:  MOVLB  0
08312:  CALL   1CCC
08316:  MOVFF  414,4C5
0831A:  MOVLW  37
0831C:  MOVLB  4
0831E:  MOVWF  xC6
08320:  MOVLB  0
08322:  CALL   1CCC
08326:  MOVFF  413,4C5
0832A:  MOVLW  37
0832C:  MOVLB  4
0832E:  MOVWF  xC6
08330:  MOVLB  0
08332:  CALL   1CCC
08336:  MOVFF  412,4C5
0833A:  MOVLW  37
0833C:  MOVLB  4
0833E:  MOVWF  xC6
08340:  MOVLB  0
08342:  CALL   1CCC
08346:  MOVLW  0D
08348:  MOVLB  8
0834A:  MOVWF  x66
0834C:  MOVLB  0
0834E:  CALL   1A88
08352:  MOVLW  0A
08354:  MOVLB  8
08356:  MOVWF  x66
08358:  MOVLB  0
0835A:  CALL   1A88
....................     fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
0835E:  MOVLW  78
08360:  MOVWF  FF6
08362:  MOVLW  08
08364:  MOVWF  FF7
08366:  MOVLW  00
08368:  MOVWF  FF8
0836A:  MOVLW  25
0836C:  MOVLB  8
0836E:  MOVWF  x23
08370:  MOVLB  0
08372:  CALL   1B0A
08376:  MOVLW  41
08378:  MOVWF  FE9
0837A:  MOVFF  419,44C
0837E:  MOVFF  418,44B
08382:  MOVFF  417,44A
08386:  MOVFF  416,449
0838A:  CALL   7A48
0838E:  MOVLW  A0
08390:  MOVWF  FF6
08392:  MOVLW  08
08394:  MOVWF  FF7
08396:  MOVLW  00
08398:  MOVWF  FF8
0839A:  MOVLW  04
0839C:  MOVLB  8
0839E:  MOVWF  x23
083A0:  MOVLB  0
083A2:  CALL   1B0A
083A6:  MOVFF  419,4C5
083AA:  MOVLW  57
083AC:  MOVLB  4
083AE:  MOVWF  xC6
083B0:  MOVLB  0
083B2:  CALL   1CCC
083B6:  MOVFF  418,4C5
083BA:  MOVLW  57
083BC:  MOVLB  4
083BE:  MOVWF  xC6
083C0:  MOVLB  0
083C2:  CALL   1CCC
083C6:  MOVFF  417,4C5
083CA:  MOVLW  57
083CC:  MOVLB  4
083CE:  MOVWF  xC6
083D0:  MOVLB  0
083D2:  CALL   1CCC
083D6:  MOVFF  416,4C5
083DA:  MOVLW  57
083DC:  MOVLB  4
083DE:  MOVWF  xC6
083E0:  MOVLB  0
083E2:  CALL   1CCC
083E6:  MOVLW  A7
083E8:  MOVWF  FF6
083EA:  MOVLW  08
083EC:  MOVWF  FF7
083EE:  MOVLW  00
083F0:  MOVWF  FF8
083F2:  MOVLW  05
083F4:  MOVLB  8
083F6:  MOVWF  x23
083F8:  MOVLB  0
083FA:  CALL   1B0A
.................... 
....................     if (!is_connect(mis_fm))
083FE:  MOVFF  F1,866
08402:  MOVFF  F0,865
08406:  MOVFF  EF,864
0840A:  MOVFF  EE,863
0840E:  CALL   213E
08412:  MOVF   01,F
08414:  BTFSS  FD8.2
08416:  GOTO   842A
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0841A:  MOVLW  AE
0841C:  MOVWF  FF6
0841E:  MOVLW  08
08420:  MOVWF  FF7
08422:  MOVLW  00
08424:  MOVWF  FF8
08426:  CALL   1ADA
....................     }    
.................... 
....................     if (!is_connect(smf))
0842A:  MOVFF  F5,866
0842E:  MOVFF  F4,865
08432:  MOVFF  F3,864
08436:  MOVFF  F2,863
0843A:  CALL   213E
0843E:  MOVF   01,F
08440:  BTFSS  FD8.2
08442:  GOTO   8456
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
08446:  MOVLW  D0
08448:  MOVWF  FF6
0844A:  MOVLW  08
0844C:  MOVWF  FF7
0844E:  MOVLW  00
08450:  MOVWF  FF8
08452:  CALL   1ADA
....................     }    
....................     /*
....................     while (!is_connect(smf))
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
....................         delay_ms(100);
....................     }
....................     */
.................... 
....................     // read size area with CRC verification retry
....................     read_smf_header();
08456:  GOTO   7C56
.................... 
....................     // PartitionParamから値を取得
....................     int32 used_size = param.meas.used_size;
....................     int8 loop_count = param.meas.loop_counter;
0845A:  MOVFF  388,41D
0845E:  MOVFF  387,41C
08462:  MOVFF  386,41B
08466:  MOVFF  385,41A
0846A:  MOVFF  389,41E
....................     fprintf(PC, "Size area read\r\n");
0846E:  MOVLW  EE
08470:  MOVWF  FF6
08472:  MOVLW  08
08474:  MOVWF  FF7
08476:  MOVLW  00
08478:  MOVWF  FF8
0847A:  CALL   1ADA
....................     fprintf(PC, "used_size = %ld (src 0x%08LX)\r\n", used_size, mis_start_address);
0847E:  MOVLW  00
08480:  MOVWF  FF6
08482:  MOVLW  09
08484:  MOVWF  FF7
08486:  MOVLW  00
08488:  MOVWF  FF8
0848A:  MOVLW  0C
0848C:  MOVLB  8
0848E:  MOVWF  x23
08490:  MOVLB  0
08492:  CALL   1B0A
08496:  MOVLW  41
08498:  MOVWF  FE9
0849A:  MOVFF  41D,44C
0849E:  MOVFF  41C,44B
084A2:  MOVFF  41B,44A
084A6:  MOVFF  41A,449
084AA:  CALL   7D7A
084AE:  MOVLW  0F
084B0:  MOVWF  FF6
084B2:  MOVLW  09
084B4:  MOVWF  FF7
084B6:  MOVLW  00
084B8:  MOVWF  FF8
084BA:  MOVLW  08
084BC:  MOVLB  8
084BE:  MOVWF  x23
084C0:  MOVLB  0
084C2:  CALL   1B0A
084C6:  MOVFF  40D,4C5
084CA:  MOVLW  37
084CC:  MOVLB  4
084CE:  MOVWF  xC6
084D0:  MOVLB  0
084D2:  CALL   1CCC
084D6:  MOVFF  40C,4C5
084DA:  MOVLW  37
084DC:  MOVLB  4
084DE:  MOVWF  xC6
084E0:  MOVLB  0
084E2:  CALL   1CCC
084E6:  MOVFF  40B,4C5
084EA:  MOVLW  37
084EC:  MOVLB  4
084EE:  MOVWF  xC6
084F0:  MOVLB  0
084F2:  CALL   1CCC
084F6:  MOVFF  40A,4C5
084FA:  MOVLW  37
084FC:  MOVLB  4
084FE:  MOVWF  xC6
08500:  MOVLB  0
08502:  CALL   1CCC
08506:  MOVLW  1C
08508:  MOVWF  FF6
0850A:  MOVLW  09
0850C:  MOVWF  FF7
0850E:  MOVLW  00
08510:  MOVWF  FF8
08512:  MOVLW  03
08514:  MOVLB  8
08516:  MOVWF  x23
08518:  MOVLB  0
0851A:  CALL   1B0A
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
0851E:  MOVLW  04
08520:  MOVLB  4
08522:  ADDWF  x0A,W
08524:  MOVWF  x49
08526:  MOVLW  00
08528:  ADDWFC x0B,W
0852A:  MOVWF  x4A
0852C:  MOVLW  00
0852E:  ADDWFC x0C,W
08530:  MOVWF  x4B
08532:  MOVLW  00
08534:  ADDWFC x0D,W
08536:  MOVWF  x4C
08538:  MOVLW  20
0853A:  MOVWF  FF6
0853C:  MOVLW  09
0853E:  MOVWF  FF7
08540:  MOVLW  00
08542:  MOVWF  FF8
08544:  MOVLW  0C
08546:  MOVLB  8
08548:  MOVWF  x23
0854A:  MOVLB  0
0854C:  CALL   1B0A
08550:  MOVFF  41E,4CC
08554:  MOVLW  18
08556:  MOVLB  4
08558:  MOVWF  xCD
0855A:  MOVLB  0
0855C:  CALL   774E
08560:  MOVLW  2E
08562:  MOVWF  FF6
08564:  MOVLW  09
08566:  MOVWF  FF7
08568:  MOVLW  00
0856A:  MOVWF  FF8
0856C:  MOVLW  09
0856E:  MOVLB  8
08570:  MOVWF  x23
08572:  MOVLB  0
08574:  CALL   1B0A
08578:  MOVFF  44C,4C5
0857C:  MOVLW  37
0857E:  MOVLB  4
08580:  MOVWF  xC6
08582:  MOVLB  0
08584:  CALL   1CCC
08588:  MOVFF  44B,4C5
0858C:  MOVLW  37
0858E:  MOVLB  4
08590:  MOVWF  xC6
08592:  MOVLB  0
08594:  CALL   1CCC
08598:  MOVFF  44A,4C5
0859C:  MOVLW  37
0859E:  MOVLB  4
085A0:  MOVWF  xC6
085A2:  MOVLB  0
085A4:  CALL   1CCC
085A8:  MOVFF  449,4C5
085AC:  MOVLW  37
085AE:  MOVLB  4
085B0:  MOVWF  xC6
085B2:  MOVLB  0
085B4:  CALL   1CCC
085B8:  MOVLW  3C
085BA:  MOVWF  FF6
085BC:  MOVLW  09
085BE:  MOVWF  FF7
085C0:  MOVLW  00
085C2:  MOVWF  FF8
085C4:  MOVLW  05
085C6:  MOVLB  8
085C8:  MOVWF  x23
085CA:  MOVLB  0
085CC:  CALL   1B0A
....................     
.................... 
....................     // Calculate data write address and check for wrap-around
....................     unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................     unsigned int32 data_region_end = mis_end_address;
....................     unsigned int32 data_region_size = data_region_end - data_region_start;
....................     unsigned int32 data_write_addr = data_region_start + used_size;
085D0:  MOVLB  4
085D2:  MOVF   x0A,W
085D4:  MOVWF  x1F
085D6:  MOVLW  10
085D8:  ADDWF  x0B,W
085DA:  MOVWF  x20
085DC:  MOVLW  00
085DE:  ADDWFC x0C,W
085E0:  MOVWF  x21
085E2:  MOVLW  00
085E4:  ADDWFC x0D,W
085E6:  MOVWF  x22
085E8:  MOVFF  411,426
085EC:  MOVFF  410,425
085F0:  MOVFF  40F,424
085F4:  MOVFF  40E,423
085F8:  MOVF   x1F,W
085FA:  SUBWF  x23,W
085FC:  MOVWF  x27
085FE:  MOVF   x20,W
08600:  SUBWFB x24,W
08602:  MOVWF  x28
08604:  MOVF   x21,W
08606:  SUBWFB x25,W
08608:  MOVWF  x29
0860A:  MOVF   x22,W
0860C:  SUBWFB x26,W
0860E:  MOVWF  x2A
08610:  MOVF   x1A,W
08612:  ADDWF  x1F,W
08614:  MOVWF  x2B
08616:  MOVF   x1B,W
08618:  ADDWFC x20,W
0861A:  MOVWF  x2C
0861C:  MOVF   x1C,W
0861E:  ADDWFC x21,W
08620:  MOVWF  x2D
08622:  MOVF   x1D,W
08624:  ADDWFC x22,W
08626:  MOVWF  x2E
.................... 
.................... 
....................     // Delete the first part in advance in case of looping
....................     if ((used_size + write_size) > data_region_size)
08628:  MOVF   x16,W
0862A:  ADDWF  x1A,W
0862C:  MOVWF  x49
0862E:  MOVF   x17,W
08630:  ADDWFC x1B,W
08632:  MOVWF  x4A
08634:  MOVF   x18,W
08636:  ADDWFC x1C,W
08638:  MOVWF  x4B
0863A:  MOVF   x19,W
0863C:  ADDWFC x1D,W
0863E:  MOVWF  x4C
08640:  MOVF   x2A,W
08642:  SUBWF  x4C,W
08644:  BTFSC  FD8.0
08646:  BRA    864E
08648:  MOVLB  0
0864A:  GOTO   8768
0864E:  MOVLB  0
08650:  BTFSS  FD8.2
08652:  GOTO   8698
08656:  MOVLB  4
08658:  MOVF   x29,W
0865A:  SUBWF  x4B,W
0865C:  BTFSC  FD8.0
0865E:  BRA    8666
08660:  MOVLB  0
08662:  GOTO   8768
08666:  MOVLB  0
08668:  BTFSS  FD8.2
0866A:  GOTO   8698
0866E:  MOVLB  4
08670:  MOVF   x28,W
08672:  SUBWF  x4A,W
08674:  BTFSC  FD8.0
08676:  BRA    867E
08678:  MOVLB  0
0867A:  GOTO   8768
0867E:  MOVLB  0
08680:  BTFSS  FD8.2
08682:  GOTO   8698
08686:  MOVLB  4
08688:  MOVF   x49,W
0868A:  SUBWF  x27,W
0868C:  BTFSS  FD8.0
0868E:  BRA    8696
08690:  MOVLB  0
08692:  GOTO   8768
08696:  MOVLB  0
....................     {
....................         fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
08698:  MOVLW  42
0869A:  MOVWF  FF6
0869C:  MOVLW  09
0869E:  MOVWF  FF7
086A0:  MOVLW  00
086A2:  MOVWF  FF8
086A4:  CALL   1ADA
....................         loop_count++;
086A8:  MOVLB  4
086AA:  INCF   x1E,F
....................         used_size = 0;
086AC:  CLRF   x1D
086AE:  CLRF   x1C
086B0:  CLRF   x1B
086B2:  CLRF   x1A
....................         data_write_addr = data_region_start;
086B4:  MOVFF  422,42E
086B8:  MOVFF  421,42D
086BC:  MOVFF  420,42C
086C0:  MOVFF  41F,42B
....................         unsigned int32 erase_ptr = data_region_start;
086C4:  MOVFF  422,432
086C8:  MOVFF  421,431
086CC:  MOVFF  420,430
086D0:  MOVFF  41F,42F
086D4:  MOVLB  0
....................         while (erase_ptr < data_region_end)
086D6:  MOVLB  4
086D8:  MOVF   x32,W
086DA:  SUBWF  x26,W
086DC:  BTFSC  FD8.0
086DE:  BRA    86E6
086E0:  MOVLB  0
086E2:  GOTO   8768
086E6:  MOVLB  0
086E8:  BTFSS  FD8.2
086EA:  GOTO   8730
086EE:  MOVLB  4
086F0:  MOVF   x31,W
086F2:  SUBWF  x25,W
086F4:  BTFSC  FD8.0
086F6:  BRA    86FE
086F8:  MOVLB  0
086FA:  GOTO   8768
086FE:  MOVLB  0
08700:  BTFSS  FD8.2
08702:  GOTO   8730
08706:  MOVLB  4
08708:  MOVF   x30,W
0870A:  SUBWF  x24,W
0870C:  BTFSC  FD8.0
0870E:  BRA    8716
08710:  MOVLB  0
08712:  GOTO   8768
08716:  MOVLB  0
08718:  BTFSS  FD8.2
0871A:  GOTO   8730
0871E:  MOVLB  4
08720:  MOVF   x23,W
08722:  SUBWF  x2F,W
08724:  BTFSS  FD8.0
08726:  BRA    872E
08728:  MOVLB  0
0872A:  GOTO   8768
0872E:  MOVLB  0
....................         {
....................             subsector_4kByte_erase(smf, erase_ptr);
08730:  MOVFF  F5,866
08734:  MOVFF  F4,865
08738:  MOVFF  F3,864
0873C:  MOVFF  F2,863
08740:  MOVFF  432,86A
08744:  MOVFF  431,869
08748:  MOVFF  430,868
0874C:  MOVFF  42F,867
08750:  CALL   3592
....................             erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
08754:  MOVLW  10
08756:  MOVLB  4
08758:  ADDWF  x30,F
0875A:  MOVLW  00
0875C:  ADDWFC x31,F
0875E:  MOVLW  00
08760:  ADDWFC x32,F
08762:  MOVLB  0
08764:  GOTO   86D6
....................         }
....................     }
.................... 
.................... 
....................     // Erase the space you will be writing in now
....................     unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................     unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
08768:  MOVLB  4
0876A:  CLRF   x33
0876C:  MOVF   x2C,W
0876E:  ANDLW  F0
08770:  MOVWF  x34
08772:  CLRF   x35
08774:  CLRF   x36
08776:  MOVF   x16,W
08778:  ADDWF  x2B,W
0877A:  MOVWF  x49
0877C:  MOVF   x17,W
0877E:  ADDWFC x2C,W
08780:  MOVWF  x4A
08782:  MOVF   x18,W
08784:  ADDWFC x2D,W
08786:  MOVWF  x4B
08788:  MOVF   x19,W
0878A:  ADDWFC x2E,W
0878C:  MOVWF  x4C
0878E:  MOVLW  FF
08790:  ADDWF  x49,F
08792:  MOVLW  0F
08794:  ADDWFC x4A,F
08796:  MOVLW  00
08798:  ADDWFC x4B,F
0879A:  MOVLW  00
0879C:  ADDWFC x4C,F
0879E:  CLRF   x37
087A0:  MOVF   x4A,W
087A2:  ANDLW  F0
087A4:  MOVWF  x38
087A6:  CLRF   x39
087A8:  CLRF   x3A
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
087AA:  MOVFF  436,43E
087AE:  MOVFF  435,43D
087B2:  MOVFF  434,43C
087B6:  MOVFF  433,43B
087BA:  MOVLB  0
087BC:  MOVLB  4
087BE:  MOVF   x3E,W
087C0:  SUBWF  x3A,W
087C2:  BTFSC  FD8.0
087C4:  BRA    87CC
087C6:  MOVLB  0
087C8:  GOTO   88A8
087CC:  MOVLB  0
087CE:  BTFSS  FD8.2
087D0:  GOTO   8816
087D4:  MOVLB  4
087D6:  MOVF   x3D,W
087D8:  SUBWF  x39,W
087DA:  BTFSC  FD8.0
087DC:  BRA    87E4
087DE:  MOVLB  0
087E0:  GOTO   88A8
087E4:  MOVLB  0
087E6:  BTFSS  FD8.2
087E8:  GOTO   8816
087EC:  MOVLB  4
087EE:  MOVF   x3C,W
087F0:  SUBWF  x38,W
087F2:  BTFSC  FD8.0
087F4:  BRA    87FC
087F6:  MOVLB  0
087F8:  GOTO   88A8
087FC:  MOVLB  0
087FE:  BTFSS  FD8.2
08800:  GOTO   8816
08804:  MOVLB  4
08806:  MOVF   x37,W
08808:  SUBWF  x3B,W
0880A:  BTFSS  FD8.0
0880C:  BRA    8814
0880E:  MOVLB  0
08810:  GOTO   88A8
08814:  MOVLB  0
08816:  MOVLB  4
08818:  MOVF   x3E,W
0881A:  SUBWF  x11,W
0881C:  BTFSC  FD8.0
0881E:  BRA    8826
08820:  MOVLB  0
08822:  GOTO   88A8
08826:  MOVLB  0
08828:  BTFSS  FD8.2
0882A:  GOTO   8870
0882E:  MOVLB  4
08830:  MOVF   x3D,W
08832:  SUBWF  x10,W
08834:  BTFSC  FD8.0
08836:  BRA    883E
08838:  MOVLB  0
0883A:  GOTO   88A8
0883E:  MOVLB  0
08840:  BTFSS  FD8.2
08842:  GOTO   8870
08846:  MOVLB  4
08848:  MOVF   x3C,W
0884A:  SUBWF  x0F,W
0884C:  BTFSC  FD8.0
0884E:  BRA    8856
08850:  MOVLB  0
08852:  GOTO   88A8
08856:  MOVLB  0
08858:  BTFSS  FD8.2
0885A:  GOTO   8870
0885E:  MOVLB  4
08860:  MOVF   x0E,W
08862:  SUBWF  x3B,W
08864:  BTFSS  FD8.0
08866:  BRA    886E
08868:  MOVLB  0
0886A:  GOTO   88A8
0886E:  MOVLB  0
....................         subsector_4kByte_erase(smf, addr);
08870:  MOVFF  F5,866
08874:  MOVFF  F4,865
08878:  MOVFF  F3,864
0887C:  MOVFF  F2,863
08880:  MOVFF  43E,86A
08884:  MOVFF  43D,869
08888:  MOVFF  43C,868
0888C:  MOVFF  43B,867
08890:  CALL   3592
08894:  MOVLW  10
08896:  MOVLB  4
08898:  ADDWF  x3C,F
0889A:  MOVLW  00
0889C:  ADDWFC x3D,F
0889E:  MOVLW  00
088A0:  ADDWFC x3E,F
088A2:  MOVLB  0
088A4:  GOTO   87BC
.................... 
....................     unsigned int32 remaining = write_size;
....................     unsigned int32 src_addr = write_src;
088A8:  MOVFF  419,442
088AC:  MOVFF  418,441
088B0:  MOVFF  417,440
088B4:  MOVFF  416,43F
088B8:  MOVFF  415,446
088BC:  MOVFF  414,445
088C0:  MOVFF  413,444
088C4:  MOVFF  412,443
....................     while (remaining > 0)
088C8:  MOVLB  4
088CA:  MOVF   x3F,F
088CC:  BTFSC  FD8.2
088CE:  BRA    88D6
088D0:  MOVLB  0
088D2:  GOTO   8908
088D6:  MOVLB  0
088D8:  MOVLB  4
088DA:  MOVF   x40,F
088DC:  BTFSC  FD8.2
088DE:  BRA    88E6
088E0:  MOVLB  0
088E2:  GOTO   8908
088E6:  MOVLB  0
088E8:  MOVLB  4
088EA:  MOVF   x41,F
088EC:  BTFSC  FD8.2
088EE:  BRA    88F6
088F0:  MOVLB  0
088F2:  GOTO   8908
088F6:  MOVLB  0
088F8:  MOVLB  4
088FA:  MOVF   x42,F
088FC:  BTFSS  FD8.2
088FE:  BRA    8906
08900:  MOVLB  0
08902:  GOTO   8A22
08906:  MOVLB  0
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
08908:  MOVLB  4
0890A:  MOVF   x42,F
0890C:  BTFSC  FD8.2
0890E:  BRA    8916
08910:  MOVLB  0
08912:  GOTO   894A
08916:  MOVLB  0
08918:  MOVLB  4
0891A:  MOVF   x41,F
0891C:  BTFSC  FD8.2
0891E:  BRA    8926
08920:  MOVLB  0
08922:  GOTO   894A
08926:  MOVLB  0
08928:  MOVLB  4
0892A:  MOVF   x40,F
0892C:  BTFSC  FD8.2
0892E:  BRA    8936
08930:  MOVLB  0
08932:  GOTO   894A
08936:  MOVLB  0
08938:  MOVLB  4
0893A:  MOVF   x3F,W
0893C:  SUBLW  40
0893E:  BTFSS  FD8.0
08940:  BRA    8948
08942:  MOVLB  0
08944:  GOTO   8952
08948:  MOVLB  0
0894A:  CLRF   03
0894C:  MOVLW  40
0894E:  GOTO   895C
08952:  MOVFF  440,03
08956:  MOVLB  4
08958:  MOVF   x3F,W
0895A:  MOVLB  0
0895C:  MOVLB  4
0895E:  MOVWF  x47
08960:  MOVFF  03,448
08964:  MOVLB  0
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
08966:  MOVFF  F1,4CE
0896A:  MOVFF  F0,4CD
0896E:  MOVFF  EF,4CC
08972:  MOVFF  EE,4CB
08976:  MOVFF  446,4D2
0897A:  MOVFF  445,4D1
0897E:  MOVFF  444,4D0
08982:  MOVFF  443,4CF
08986:  MOVLW  03
08988:  MOVLB  4
0898A:  MOVWF  xD4
0898C:  MOVLW  C2
0898E:  MOVWF  xD3
08990:  CLRF   xD8
08992:  CLRF   xD7
08994:  MOVFF  448,4D6
08998:  MOVFF  447,4D5
0899C:  MOVLB  0
0899E:  CALL   2204
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
089A2:  MOVFF  F5,866
089A6:  MOVFF  F4,865
089AA:  MOVFF  F3,864
089AE:  MOVFF  F2,863
089B2:  MOVFF  42E,86A
089B6:  MOVFF  42D,869
089BA:  MOVFF  42C,868
089BE:  MOVFF  42B,867
089C2:  MOVLW  03
089C4:  MOVLB  8
089C6:  MOVWF  x6C
089C8:  MOVLW  C2
089CA:  MOVWF  x6B
089CC:  MOVFF  448,86E
089D0:  MOVFF  447,86D
089D4:  MOVLB  0
089D6:  CALL   320E
....................         src_addr += chunk;
089DA:  MOVLB  4
089DC:  MOVF   x47,W
089DE:  ADDWF  x43,F
089E0:  MOVF   x48,W
089E2:  ADDWFC x44,F
089E4:  MOVLW  00
089E6:  ADDWFC x45,F
089E8:  MOVLW  00
089EA:  ADDWFC x46,F
....................         data_write_addr += chunk;
089EC:  MOVF   x47,W
089EE:  ADDWF  x2B,F
089F0:  MOVF   x48,W
089F2:  ADDWFC x2C,F
089F4:  MOVLW  00
089F6:  ADDWFC x2D,F
089F8:  MOVLW  00
089FA:  ADDWFC x2E,F
....................         used_size += chunk;
089FC:  MOVF   x47,W
089FE:  ADDWF  x1A,F
08A00:  MOVF   x48,W
08A02:  ADDWFC x1B,F
08A04:  MOVLW  00
08A06:  ADDWFC x1C,F
08A08:  MOVLW  00
08A0A:  ADDWFC x1D,F
....................         remaining -= chunk;
08A0C:  MOVF   x47,W
08A0E:  SUBWF  x3F,F
08A10:  MOVF   x48,W
08A12:  SUBWFB x40,F
08A14:  MOVLW  00
08A16:  SUBWFB x41,F
08A18:  MOVLW  00
08A1A:  SUBWFB x42,F
08A1C:  MOVLB  0
08A1E:  GOTO   88C8
....................     }
....................     // write size area
....................     write_smf_header();
08A22:  GOTO   7F66
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
08A26:  MOVLW  78
08A28:  MOVWF  FF6
08A2A:  MOVLW  09
08A2C:  MOVWF  FF7
08A2E:  MOVLW  00
08A30:  MOVWF  FF8
08A32:  MOVLW  0C
08A34:  MOVLB  8
08A36:  MOVWF  x23
08A38:  MOVLB  0
08A3A:  CALL   1B0A
08A3E:  MOVLW  41
08A40:  MOVWF  FE9
08A42:  MOVFF  41D,44C
08A46:  MOVFF  41C,44B
08A4A:  MOVFF  41B,44A
08A4E:  MOVFF  41A,449
08A52:  CALL   7D7A
08A56:  MOVLW  0D
08A58:  MOVLB  8
08A5A:  MOVWF  x66
08A5C:  MOVLB  0
08A5E:  CALL   1A88
08A62:  MOVLW  0A
08A64:  MOVLB  8
08A66:  MOVWF  x66
08A68:  MOVLB  0
08A6A:  CALL   1A88
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
08A6E:  MOVLW  8A
08A70:  MOVWF  FF6
08A72:  MOVLW  09
08A74:  MOVWF  FF7
08A76:  MOVLW  00
08A78:  MOVWF  FF8
08A7A:  MOVLW  0D
08A7C:  MOVLB  8
08A7E:  MOVWF  x23
08A80:  MOVLB  0
08A82:  CALL   1B0A
08A86:  MOVFF  41E,823
08A8A:  MOVLW  1B
08A8C:  MOVLB  8
08A8E:  MOVWF  x24
08A90:  MOVLB  0
08A92:  CALL   46A6
08A96:  MOVLW  99
08A98:  MOVWF  FF6
08A9A:  MOVLW  09
08A9C:  MOVWF  FF7
08A9E:  MOVLW  00
08AA0:  MOVWF  FF8
08AA2:  MOVLW  04
08AA4:  MOVLB  8
08AA6:  MOVWF  x23
08AA8:  MOVLB  0
08AAA:  CALL   1B0A
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
08AAE:  MOVLW  9E
08AB0:  MOVWF  FF6
08AB2:  MOVLW  09
08AB4:  MOVWF  FF7
08AB6:  MOVLW  00
08AB8:  MOVWF  FF8
08ABA:  CALL   1ADA
....................     fprintf(PC, "____________________\r\n\r\n");
08ABE:  MOVLW  B8
08AC0:  MOVWF  FF6
08AC2:  MOVLW  09
08AC4:  MOVWF  FF7
08AC6:  MOVLW  00
08AC8:  MOVWF  FF8
08ACA:  CALL   1ADA
08ACE:  GOTO   95B6 (RETURN)
.................... }
.................... 
.................... void smf_read(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
08AD2:  MOVLW  D2
08AD4:  MOVWF  FF6
08AD6:  MOVLW  09
08AD8:  MOVWF  FF7
08ADA:  MOVLW  00
08ADC:  MOVWF  FF8
08ADE:  CALL   1ADA
....................     fprintf(PC, "___Start SMF Read____\r\n");
08AE2:  MOVLW  EC
08AE4:  MOVWF  FF6
08AE6:  MOVLW  09
08AE8:  MOVWF  FF7
08AEA:  MOVLW  00
08AEC:  MOVWF  FF8
08AEE:  CALL   1ADA
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
08AF2:  MOVLW  01
08AF4:  MOVLB  3
08AF6:  ADDWF  xC0,W
08AF8:  MOVWF  FE9
08AFA:  MOVLW  00
08AFC:  ADDWFC xC1,W
08AFE:  MOVWF  FEA
08B00:  MOVFF  FEF,41A
08B04:  MOVFF  41A,450
08B08:  MOVLB  0
08B0A:  CALL   78B8
08B0E:  MOVFF  02,03
08B12:  MOVF   01,W
08B14:  MOVWF  FE1
08B16:  MOVFF  03,FE2
08B1A:  MOVLW  04
08B1C:  MOVWF  FEA
08B1E:  MOVLW  02
08B20:  MOVWF  FE9
08B22:  MOVLW  08
08B24:  MOVWF  01
08B26:  MOVFF  FE6,FEE
08B2A:  DECFSZ 01,F
08B2C:  GOTO   8B26
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
08B30:  MOVLW  01
08B32:  MOVLB  3
08B34:  ADDWF  xC0,W
08B36:  MOVWF  FE9
08B38:  MOVLW  00
08B3A:  ADDWFC xC1,W
08B3C:  MOVWF  FEA
08B3E:  MOVFF  FEF,49
....................     unsigned int32 read_src = smf_data->src;
....................     unsigned int32 read_size = smf_data->size;
08B42:  MOVLW  02
08B44:  ADDWF  xC0,W
08B46:  MOVWF  FE9
08B48:  MOVLW  00
08B4A:  ADDWFC xC1,W
08B4C:  MOVWF  FEA
08B4E:  MOVFF  FEF,40A
08B52:  MOVFF  FEC,40B
08B56:  MOVFF  FEC,40C
08B5A:  MOVFF  FEC,40D
08B5E:  MOVF   FED,F
08B60:  MOVF   FED,F
08B62:  MOVF   FED,F
08B64:  MOVLW  06
08B66:  ADDWF  xC0,W
08B68:  MOVWF  FE9
08B6A:  MOVLW  00
08B6C:  ADDWFC xC1,W
08B6E:  MOVWF  FEA
08B70:  MOVFF  FEF,40E
08B74:  MOVFF  FEC,40F
08B78:  MOVFF  FEC,410
08B7C:  MOVFF  FEC,411
08B80:  MOVF   FED,F
08B82:  MOVF   FED,F
08B84:  MOVF   FED,F
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_src);
08B86:  MOVLW  04
08B88:  MOVWF  FF6
08B8A:  MOVLW  0A
08B8C:  MOVWF  FF7
08B8E:  MOVLW  00
08B90:  MOVWF  FF8
08B92:  MOVLW  21
08B94:  MOVLB  8
08B96:  MOVWF  x23
08B98:  MOVLB  0
08B9A:  CALL   1B0A
08B9E:  MOVFF  40D,4C5
08BA2:  MOVLW  37
08BA4:  MOVLB  4
08BA6:  MOVWF  xC6
08BA8:  MOVLB  0
08BAA:  CALL   1CCC
08BAE:  MOVFF  40C,4C5
08BB2:  MOVLW  37
08BB4:  MOVLB  4
08BB6:  MOVWF  xC6
08BB8:  MOVLB  0
08BBA:  CALL   1CCC
08BBE:  MOVFF  40B,4C5
08BC2:  MOVLW  37
08BC4:  MOVLB  4
08BC6:  MOVWF  xC6
08BC8:  MOVLB  0
08BCA:  CALL   1CCC
08BCE:  MOVFF  40A,4C5
08BD2:  MOVLW  37
08BD4:  MOVLB  4
08BD6:  MOVWF  xC6
08BD8:  MOVLB  0
08BDA:  CALL   1CCC
08BDE:  MOVLW  0D
08BE0:  MOVLB  8
08BE2:  MOVWF  x66
08BE4:  MOVLB  0
08BE6:  CALL   1A88
08BEA:  MOVLW  0A
08BEC:  MOVLB  8
08BEE:  MOVWF  x66
08BF0:  MOVLB  0
08BF2:  CALL   1A88
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
08BF6:  MOVLW  2C
08BF8:  MOVWF  FF6
08BFA:  MOVLW  0A
08BFC:  MOVWF  FF7
08BFE:  MOVLW  00
08C00:  MOVWF  FF8
08C02:  MOVLW  21
08C04:  MOVLB  8
08C06:  MOVWF  x23
08C08:  MOVLB  0
08C0A:  CALL   1B0A
08C0E:  MOVLW  41
08C10:  MOVWF  FE9
08C12:  MOVFF  411,44C
08C16:  MOVFF  410,44B
08C1A:  MOVFF  40F,44A
08C1E:  MOVFF  40E,449
08C22:  CALL   7A48
08C26:  MOVLW  50
08C28:  MOVWF  FF6
08C2A:  MOVLW  0A
08C2C:  MOVWF  FF7
08C2E:  MOVLW  00
08C30:  MOVWF  FF8
08C32:  MOVLW  04
08C34:  MOVLB  8
08C36:  MOVWF  x23
08C38:  MOVLB  0
08C3A:  CALL   1B0A
08C3E:  MOVFF  411,4C5
08C42:  MOVLW  57
08C44:  MOVLB  4
08C46:  MOVWF  xC6
08C48:  MOVLB  0
08C4A:  CALL   1CCC
08C4E:  MOVFF  410,4C5
08C52:  MOVLW  57
08C54:  MOVLB  4
08C56:  MOVWF  xC6
08C58:  MOVLB  0
08C5A:  CALL   1CCC
08C5E:  MOVFF  40F,4C5
08C62:  MOVLW  57
08C64:  MOVLB  4
08C66:  MOVWF  xC6
08C68:  MOVLB  0
08C6A:  CALL   1CCC
08C6E:  MOVFF  40E,4C5
08C72:  MOVLW  57
08C74:  MOVLB  4
08C76:  MOVWF  xC6
08C78:  MOVLB  0
08C7A:  CALL   1CCC
08C7E:  MOVLW  57
08C80:  MOVWF  FF6
08C82:  MOVLW  0A
08C84:  MOVWF  FF7
08C86:  MOVLW  00
08C88:  MOVWF  FF8
08C8A:  MOVLW  05
08C8C:  MOVLB  8
08C8E:  MOVWF  x23
08C90:  MOVLB  0
08C92:  CALL   1B0A
.................... 
....................     if (!is_connect(smf)){
08C96:  MOVFF  F5,866
08C9A:  MOVFF  F4,865
08C9E:  MOVFF  F3,864
08CA2:  MOVFF  F2,863
08CA6:  CALL   213E
08CAA:  MOVF   01,F
08CAC:  BTFSS  FD8.2
08CAE:  GOTO   8CC2
....................         fprintf(PC, "Error: SMF is not connected\r\n");
08CB2:  MOVLW  5E
08CB4:  MOVWF  FF6
08CB6:  MOVLW  0A
08CB8:  MOVWF  FF7
08CBA:  MOVLW  00
08CBC:  MOVWF  FF8
08CBE:  CALL   1ADA
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
08CC2:  MOVLW  7C
08CC4:  MOVWF  FF6
08CC6:  MOVLW  0A
08CC8:  MOVWF  FF7
08CCA:  MOVLW  00
08CCC:  MOVWF  FF8
08CCE:  CALL   1ADA
....................     for (unsigned int32 addr = read_src; addr < read_src + read_size; addr += PACKET_SIZE)
08CD2:  MOVFF  40D,415
08CD6:  MOVFF  40C,414
08CDA:  MOVFF  40B,413
08CDE:  MOVFF  40A,412
08CE2:  MOVLB  4
08CE4:  MOVF   x0E,W
08CE6:  ADDWF  x0A,W
08CE8:  MOVWF  00
08CEA:  MOVF   x0F,W
08CEC:  ADDWFC x0B,W
08CEE:  MOVWF  01
08CF0:  MOVF   x10,W
08CF2:  ADDWFC x0C,W
08CF4:  MOVWF  02
08CF6:  MOVF   x11,W
08CF8:  ADDWFC x0D,W
08CFA:  MOVWF  03
08CFC:  MOVF   x15,W
08CFE:  SUBWF  03,W
08D00:  BTFSC  FD8.0
08D02:  BRA    8D0A
08D04:  MOVLB  0
08D06:  GOTO   8E50
08D0A:  MOVLB  0
08D0C:  BTFSS  FD8.2
08D0E:  GOTO   8D54
08D12:  MOVLB  4
08D14:  MOVF   x14,W
08D16:  SUBWF  02,W
08D18:  BTFSC  FD8.0
08D1A:  BRA    8D22
08D1C:  MOVLB  0
08D1E:  GOTO   8E50
08D22:  MOVLB  0
08D24:  BTFSS  FD8.2
08D26:  GOTO   8D54
08D2A:  MOVLB  4
08D2C:  MOVF   x13,W
08D2E:  SUBWF  01,W
08D30:  BTFSC  FD8.0
08D32:  BRA    8D3A
08D34:  MOVLB  0
08D36:  GOTO   8E50
08D3A:  MOVLB  0
08D3C:  BTFSS  FD8.2
08D3E:  GOTO   8D54
08D42:  MOVF   00,W
08D44:  MOVLB  4
08D46:  SUBWF  x12,W
08D48:  BTFSS  FD8.0
08D4A:  BRA    8D52
08D4C:  MOVLB  0
08D4E:  GOTO   8E50
08D52:  MOVLB  0
....................     {
....................         read_data_bytes(smf, addr, buffer, PACKET_SIZE);
08D54:  MOVFF  F5,4CE
08D58:  MOVFF  F4,4CD
08D5C:  MOVFF  F3,4CC
08D60:  MOVFF  F2,4CB
08D64:  MOVFF  415,4D2
08D68:  MOVFF  414,4D1
08D6C:  MOVFF  413,4D0
08D70:  MOVFF  412,4CF
08D74:  MOVLW  03
08D76:  MOVLB  4
08D78:  MOVWF  xD4
08D7A:  MOVLW  C2
08D7C:  MOVWF  xD3
08D7E:  CLRF   xD8
08D80:  CLRF   xD7
08D82:  CLRF   xD6
08D84:  MOVLW  40
08D86:  MOVWF  xD5
08D88:  MOVLB  0
08D8A:  CALL   2204
....................         for (unsigned int32 i = 0; i < PACKET_SIZE; i++)
08D8E:  MOVLB  4
08D90:  CLRF   x19
08D92:  CLRF   x18
08D94:  CLRF   x17
08D96:  CLRF   x16
08D98:  MOVLB  0
08D9A:  MOVLB  4
08D9C:  MOVF   x19,F
08D9E:  BTFSC  FD8.2
08DA0:  BRA    8DA8
08DA2:  MOVLB  0
08DA4:  GOTO   8E20
08DA8:  MOVLB  0
08DAA:  MOVLB  4
08DAC:  MOVF   x18,F
08DAE:  BTFSC  FD8.2
08DB0:  BRA    8DB8
08DB2:  MOVLB  0
08DB4:  GOTO   8E20
08DB8:  MOVLB  0
08DBA:  MOVLB  4
08DBC:  MOVF   x17,F
08DBE:  BTFSC  FD8.2
08DC0:  BRA    8DC8
08DC2:  MOVLB  0
08DC4:  GOTO   8E20
08DC8:  MOVLB  0
08DCA:  MOVLB  4
08DCC:  MOVF   x16,W
08DCE:  SUBLW  3F
08DD0:  BTFSC  FD8.0
08DD2:  BRA    8DDA
08DD4:  MOVLB  0
08DD6:  GOTO   8E20
08DDA:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
08DDC:  MOVLW  C2
08DDE:  MOVLB  4
08DE0:  ADDWF  x16,W
08DE2:  MOVWF  FE9
08DE4:  MOVLW  03
08DE6:  ADDWFC x17,W
08DE8:  MOVWF  FEA
08DEA:  MOVFF  FEF,41A
08DEE:  MOVFF  41A,4C5
08DF2:  MOVLW  37
08DF4:  MOVWF  xC6
08DF6:  MOVLB  0
08DF8:  CALL   1CCC
08DFC:  MOVLW  20
08DFE:  MOVLB  8
08E00:  MOVWF  x66
08E02:  MOVLB  0
08E04:  CALL   1A88
08E08:  MOVLW  01
08E0A:  MOVLB  4
08E0C:  ADDWF  x16,F
08E0E:  BTFSC  FD8.0
08E10:  INCF   x17,F
08E12:  BTFSC  FD8.2
08E14:  INCF   x18,F
08E16:  BTFSC  FD8.2
08E18:  INCF   x19,F
08E1A:  MOVLB  0
08E1C:  GOTO   8D9A
....................         }
....................         fprintf(PC, "\r\n");
08E20:  MOVLW  0D
08E22:  MOVLB  8
08E24:  MOVWF  x66
08E26:  MOVLB  0
08E28:  CALL   1A88
08E2C:  MOVLW  0A
08E2E:  MOVLB  8
08E30:  MOVWF  x66
08E32:  MOVLB  0
08E34:  CALL   1A88
08E38:  MOVLW  40
08E3A:  MOVLB  4
08E3C:  ADDWF  x12,F
08E3E:  MOVLW  00
08E40:  ADDWFC x13,F
08E42:  MOVLW  00
08E44:  ADDWFC x14,F
08E46:  MOVLW  00
08E48:  ADDWFC x15,F
08E4A:  MOVLB  0
08E4C:  GOTO   8CE2
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
08E50:  MOVLW  94
08E52:  MOVWF  FF6
08E54:  MOVLW  0A
08E56:  MOVWF  FF7
08E58:  MOVLW  00
08E5A:  MOVWF  FF8
08E5C:  CALL   1ADA
....................     fprintf(PC, "____________________\r\n\r\n");
08E60:  MOVLW  AC
08E62:  MOVWF  FF6
08E64:  MOVLW  0A
08E66:  MOVWF  FF7
08E68:  MOVLW  00
08E6A:  MOVWF  FF8
08E6C:  CALL   1ADA
08E70:  GOTO   95E4 (RETURN)
.................... }
.................... 
.................... void smf_erase(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
08E74:  MOVLW  C6
08E76:  MOVWF  FF6
08E78:  MOVLW  0A
08E7A:  MOVWF  FF7
08E7C:  MOVLW  00
08E7E:  MOVWF  FF8
08E80:  CALL   1ADA
....................     fprintf(PC, "___Start smf_erase____\r\n");
08E84:  MOVLW  E0
08E86:  MOVWF  FF6
08E88:  MOVLW  0A
08E8A:  MOVWF  FF7
08E8C:  MOVLW  00
08E8E:  MOVWF  FF8
08E90:  CALL   1ADA
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
08E94:  MOVLW  01
08E96:  MOVLB  3
08E98:  ADDWF  xC0,W
08E9A:  MOVWF  FE9
08E9C:  MOVLW  00
08E9E:  ADDWFC xC1,W
08EA0:  MOVWF  FEA
08EA2:  MOVFF  FEF,3DA
08EA6:  MOVFF  3DA,450
08EAA:  MOVLB  0
08EAC:  CALL   78B8
08EB0:  MOVFF  02,03
08EB4:  MOVF   01,W
08EB6:  MOVWF  FE1
08EB8:  MOVFF  03,FE2
08EBC:  MOVLW  03
08EBE:  MOVWF  FEA
08EC0:  MOVLW  C2
08EC2:  MOVWF  FE9
08EC4:  MOVLW  08
08EC6:  MOVWF  01
08EC8:  MOVFF  FE6,FEE
08ECC:  DECFSZ 01,F
08ECE:  GOTO   8EC8
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
08ED2:  MOVLW  01
08ED4:  MOVLB  3
08ED6:  ADDWF  xC0,W
08ED8:  MOVWF  FE9
08EDA:  MOVLW  00
08EDC:  ADDWFC xC1,W
08EDE:  MOVWF  FEA
08EE0:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 erase_src = smf_data->src;
....................     unsigned int32 erase_size = smf_data->size;
08EE4:  MOVFF  3C5,3CD
08EE8:  MOVFF  3C4,3CC
08EEC:  MOVFF  3C3,3CB
08EF0:  MOVFF  3C2,3CA
08EF4:  MOVFF  3C9,3D1
08EF8:  MOVFF  3C8,3D0
08EFC:  MOVFF  3C7,3CF
08F00:  MOVFF  3C6,3CE
08F04:  MOVLW  02
08F06:  ADDWF  xC0,W
08F08:  MOVWF  FE9
08F0A:  MOVLW  00
08F0C:  ADDWFC xC1,W
08F0E:  MOVWF  FEA
08F10:  MOVFF  FEF,3D2
08F14:  MOVFF  FEC,3D3
08F18:  MOVFF  FEC,3D4
08F1C:  MOVFF  FEC,3D5
08F20:  MOVF   FED,F
08F22:  MOVF   FED,F
08F24:  MOVF   FED,F
08F26:  MOVLW  06
08F28:  ADDWF  xC0,W
08F2A:  MOVWF  FE9
08F2C:  MOVLW  00
08F2E:  ADDWFC xC1,W
08F30:  MOVWF  FEA
08F32:  MOVFF  FEF,3D6
08F36:  MOVFF  FEC,3D7
08F3A:  MOVFF  FEC,3D8
08F3E:  MOVFF  FEC,3D9
08F42:  MOVF   FED,F
08F44:  MOVF   FED,F
08F46:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
08F48:  MOVLW  FA
08F4A:  MOVWF  FF6
08F4C:  MOVLW  0A
08F4E:  MOVWF  FF7
08F50:  MOVLW  00
08F52:  MOVWF  FF8
08F54:  MOVLW  25
08F56:  MOVLB  8
08F58:  MOVWF  x23
08F5A:  MOVLB  0
08F5C:  CALL   1B0A
08F60:  MOVFF  3CD,4C5
08F64:  MOVLW  37
08F66:  MOVLB  4
08F68:  MOVWF  xC6
08F6A:  MOVLB  0
08F6C:  CALL   1CCC
08F70:  MOVFF  3CC,4C5
08F74:  MOVLW  37
08F76:  MOVLB  4
08F78:  MOVWF  xC6
08F7A:  MOVLB  0
08F7C:  CALL   1CCC
08F80:  MOVFF  3CB,4C5
08F84:  MOVLW  37
08F86:  MOVLB  4
08F88:  MOVWF  xC6
08F8A:  MOVLB  0
08F8C:  CALL   1CCC
08F90:  MOVFF  3CA,4C5
08F94:  MOVLW  37
08F96:  MOVLB  4
08F98:  MOVWF  xC6
08F9A:  MOVLB  0
08F9C:  CALL   1CCC
08FA0:  MOVLW  0D
08FA2:  MOVLB  8
08FA4:  MOVWF  x66
08FA6:  MOVLB  0
08FA8:  CALL   1A88
08FAC:  MOVLW  0A
08FAE:  MOVLB  8
08FB0:  MOVWF  x66
08FB2:  MOVLB  0
08FB4:  CALL   1A88
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
08FB8:  MOVLW  26
08FBA:  MOVWF  FF6
08FBC:  MOVLW  0B
08FBE:  MOVWF  FF7
08FC0:  MOVLW  00
08FC2:  MOVWF  FF8
08FC4:  MOVLW  25
08FC6:  MOVLB  8
08FC8:  MOVWF  x23
08FCA:  MOVLB  0
08FCC:  CALL   1B0A
08FD0:  MOVFF  3D1,4C5
08FD4:  MOVLW  37
08FD6:  MOVLB  4
08FD8:  MOVWF  xC6
08FDA:  MOVLB  0
08FDC:  CALL   1CCC
08FE0:  MOVFF  3D0,4C5
08FE4:  MOVLW  37
08FE6:  MOVLB  4
08FE8:  MOVWF  xC6
08FEA:  MOVLB  0
08FEC:  CALL   1CCC
08FF0:  MOVFF  3CF,4C5
08FF4:  MOVLW  37
08FF6:  MOVLB  4
08FF8:  MOVWF  xC6
08FFA:  MOVLB  0
08FFC:  CALL   1CCC
09000:  MOVFF  3CE,4C5
09004:  MOVLW  37
09006:  MOVLB  4
09008:  MOVWF  xC6
0900A:  MOVLB  0
0900C:  CALL   1CCC
09010:  MOVLW  0D
09012:  MOVLB  8
09014:  MOVWF  x66
09016:  MOVLB  0
09018:  CALL   1A88
0901C:  MOVLW  0A
0901E:  MOVLB  8
09020:  MOVWF  x66
09022:  MOVLB  0
09024:  CALL   1A88
....................     fprintf(PC, "In SMF Erase source data address: %LX\r\n", erase_src);
09028:  MOVLW  52
0902A:  MOVWF  FF6
0902C:  MOVLW  0B
0902E:  MOVWF  FF7
09030:  MOVLW  00
09032:  MOVWF  FF8
09034:  MOVLW  22
09036:  MOVLB  8
09038:  MOVWF  x23
0903A:  MOVLB  0
0903C:  CALL   1B0A
09040:  MOVFF  3D5,4C5
09044:  MOVLW  37
09046:  MOVLB  4
09048:  MOVWF  xC6
0904A:  MOVLB  0
0904C:  CALL   1CCC
09050:  MOVFF  3D4,4C5
09054:  MOVLW  37
09056:  MOVLB  4
09058:  MOVWF  xC6
0905A:  MOVLB  0
0905C:  CALL   1CCC
09060:  MOVFF  3D3,4C5
09064:  MOVLW  37
09066:  MOVLB  4
09068:  MOVWF  xC6
0906A:  MOVLB  0
0906C:  CALL   1CCC
09070:  MOVFF  3D2,4C5
09074:  MOVLW  37
09076:  MOVLB  4
09078:  MOVWF  xC6
0907A:  MOVLB  0
0907C:  CALL   1CCC
09080:  MOVLW  0D
09082:  MOVLB  8
09084:  MOVWF  x66
09086:  MOVLB  0
09088:  CALL   1A88
0908C:  MOVLW  0A
0908E:  MOVLB  8
09090:  MOVWF  x66
09092:  MOVLB  0
09094:  CALL   1A88
....................     fprintf(PC, "In SMF Erase data size          : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
09098:  MOVLW  7A
0909A:  MOVWF  FF6
0909C:  MOVLW  0B
0909E:  MOVWF  FF7
090A0:  MOVLW  00
090A2:  MOVWF  FF8
090A4:  MOVLW  22
090A6:  MOVLB  8
090A8:  MOVWF  x23
090AA:  MOVLB  0
090AC:  CALL   1B0A
090B0:  MOVLW  41
090B2:  MOVWF  FE9
090B4:  MOVFF  3D9,44C
090B8:  MOVFF  3D8,44B
090BC:  MOVFF  3D7,44A
090C0:  MOVFF  3D6,449
090C4:  CALL   7A48
090C8:  MOVLW  9F
090CA:  MOVWF  FF6
090CC:  MOVLW  0B
090CE:  MOVWF  FF7
090D0:  MOVLW  00
090D2:  MOVWF  FF8
090D4:  MOVLW  04
090D6:  MOVLB  8
090D8:  MOVWF  x23
090DA:  MOVLB  0
090DC:  CALL   1B0A
090E0:  MOVFF  3D9,4C5
090E4:  MOVLW  57
090E6:  MOVLB  4
090E8:  MOVWF  xC6
090EA:  MOVLB  0
090EC:  CALL   1CCC
090F0:  MOVFF  3D8,4C5
090F4:  MOVLW  57
090F6:  MOVLB  4
090F8:  MOVWF  xC6
090FA:  MOVLB  0
090FC:  CALL   1CCC
09100:  MOVFF  3D7,4C5
09104:  MOVLW  57
09106:  MOVLB  4
09108:  MOVWF  xC6
0910A:  MOVLB  0
0910C:  CALL   1CCC
09110:  MOVFF  3D6,4C5
09114:  MOVLW  57
09116:  MOVLB  4
09118:  MOVWF  xC6
0911A:  MOVLB  0
0911C:  CALL   1CCC
09120:  MOVLW  A6
09122:  MOVWF  FF6
09124:  MOVLW  0B
09126:  MOVWF  FF7
09128:  MOVLW  00
0912A:  MOVWF  FF8
0912C:  MOVLW  05
0912E:  MOVLB  8
09130:  MOVWF  x23
09132:  MOVLB  0
09134:  CALL   1B0A
.................... 
....................     if (!is_connect(smf)){
09138:  MOVFF  F5,866
0913C:  MOVFF  F4,865
09140:  MOVFF  F3,864
09144:  MOVFF  F2,863
09148:  CALL   213E
0914C:  MOVF   01,F
0914E:  BTFSS  FD8.2
09150:  GOTO   9168
....................         fprintf(PC, "Error: SMF is not connected\r\n");
09154:  MOVLW  AC
09156:  MOVWF  FF6
09158:  MOVLW  0B
0915A:  MOVWF  FF7
0915C:  MOVLW  00
0915E:  MOVWF  FF8
09160:  CALL   1ADA
....................         return;
09164:  GOTO   94A2
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_src < mis_start_address || erase_src >= mis_end_address) {
09168:  MOVLB  3
0916A:  MOVF   xD5,W
0916C:  SUBWF  xCD,W
0916E:  BTFSC  FD8.0
09170:  BRA    9178
09172:  MOVLB  0
09174:  GOTO   91C2
09178:  MOVLB  0
0917A:  BTFSS  FD8.2
0917C:  GOTO   921C
09180:  MOVLB  3
09182:  MOVF   xD4,W
09184:  SUBWF  xCC,W
09186:  BTFSC  FD8.0
09188:  BRA    9190
0918A:  MOVLB  0
0918C:  GOTO   91C2
09190:  MOVLB  0
09192:  BTFSS  FD8.2
09194:  GOTO   921C
09198:  MOVLB  3
0919A:  MOVF   xD3,W
0919C:  SUBWF  xCB,W
0919E:  BTFSC  FD8.0
091A0:  BRA    91A8
091A2:  MOVLB  0
091A4:  GOTO   91C2
091A8:  MOVLB  0
091AA:  BTFSS  FD8.2
091AC:  GOTO   921C
091B0:  MOVLB  3
091B2:  MOVF   xCA,W
091B4:  SUBWF  xD2,W
091B6:  BTFSC  FD8.0
091B8:  BRA    91C0
091BA:  MOVLB  0
091BC:  GOTO   921C
091C0:  MOVLB  0
091C2:  MOVLB  3
091C4:  MOVF   xD1,W
091C6:  SUBWF  xD5,W
091C8:  BTFSC  FD8.0
091CA:  BRA    91D2
091CC:  MOVLB  0
091CE:  GOTO   9340
091D2:  MOVLB  0
091D4:  BTFSS  FD8.2
091D6:  GOTO   921C
091DA:  MOVLB  3
091DC:  MOVF   xD0,W
091DE:  SUBWF  xD4,W
091E0:  BTFSC  FD8.0
091E2:  BRA    91EA
091E4:  MOVLB  0
091E6:  GOTO   9340
091EA:  MOVLB  0
091EC:  BTFSS  FD8.2
091EE:  GOTO   921C
091F2:  MOVLB  3
091F4:  MOVF   xCF,W
091F6:  SUBWF  xD3,W
091F8:  BTFSC  FD8.0
091FA:  BRA    9202
091FC:  MOVLB  0
091FE:  GOTO   9340
09202:  MOVLB  0
09204:  BTFSS  FD8.2
09206:  GOTO   921C
0920A:  MOVLB  3
0920C:  MOVF   xCE,W
0920E:  SUBWF  xD2,W
09210:  BTFSC  FD8.0
09212:  BRA    921A
09214:  MOVLB  0
09216:  GOTO   9340
0921A:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_src, mis_start_address, mis_end_address);
0921C:  MOVLW  CA
0921E:  MOVWF  FF6
09220:  MOVLW  0B
09222:  MOVWF  FF7
09224:  MOVLW  00
09226:  MOVWF  FF8
09228:  MOVLW  1E
0922A:  MOVLB  8
0922C:  MOVWF  x23
0922E:  MOVLB  0
09230:  CALL   1B0A
09234:  MOVFF  3D5,4C5
09238:  MOVLW  37
0923A:  MOVLB  4
0923C:  MOVWF  xC6
0923E:  MOVLB  0
09240:  CALL   1CCC
09244:  MOVFF  3D4,4C5
09248:  MOVLW  37
0924A:  MOVLB  4
0924C:  MOVWF  xC6
0924E:  MOVLB  0
09250:  CALL   1CCC
09254:  MOVFF  3D3,4C5
09258:  MOVLW  37
0925A:  MOVLB  4
0925C:  MOVWF  xC6
0925E:  MOVLB  0
09260:  CALL   1CCC
09264:  MOVFF  3D2,4C5
09268:  MOVLW  37
0926A:  MOVLB  4
0926C:  MOVWF  xC6
0926E:  MOVLB  0
09270:  CALL   1CCC
09274:  MOVLW  EB
09276:  MOVWF  FF6
09278:  MOVLW  0B
0927A:  MOVWF  FF7
0927C:  MOVLW  00
0927E:  MOVWF  FF8
09280:  MOVLW  1D
09282:  MOVLB  8
09284:  MOVWF  x23
09286:  MOVLB  0
09288:  CALL   1B0A
0928C:  MOVFF  3CD,4C5
09290:  MOVLW  37
09292:  MOVLB  4
09294:  MOVWF  xC6
09296:  MOVLB  0
09298:  CALL   1CCC
0929C:  MOVFF  3CC,4C5
092A0:  MOVLW  37
092A2:  MOVLB  4
092A4:  MOVWF  xC6
092A6:  MOVLB  0
092A8:  CALL   1CCC
092AC:  MOVFF  3CB,4C5
092B0:  MOVLW  37
092B2:  MOVLB  4
092B4:  MOVWF  xC6
092B6:  MOVLB  0
092B8:  CALL   1CCC
092BC:  MOVFF  3CA,4C5
092C0:  MOVLW  37
092C2:  MOVLB  4
092C4:  MOVWF  xC6
092C6:  MOVLB  0
092C8:  CALL   1CCC
092CC:  MOVLW  0B
092CE:  MOVWF  FF6
092D0:  MOVLW  0C
092D2:  MOVWF  FF7
092D4:  MOVLW  00
092D6:  MOVWF  FF8
092D8:  MOVLW  05
092DA:  MOVLB  8
092DC:  MOVWF  x23
092DE:  MOVLB  0
092E0:  CALL   1B0A
092E4:  MOVFF  3D1,4C5
092E8:  MOVLW  37
092EA:  MOVLB  4
092EC:  MOVWF  xC6
092EE:  MOVLB  0
092F0:  CALL   1CCC
092F4:  MOVFF  3D0,4C5
092F8:  MOVLW  37
092FA:  MOVLB  4
092FC:  MOVWF  xC6
092FE:  MOVLB  0
09300:  CALL   1CCC
09304:  MOVFF  3CF,4C5
09308:  MOVLW  37
0930A:  MOVLB  4
0930C:  MOVWF  xC6
0930E:  MOVLB  0
09310:  CALL   1CCC
09314:  MOVFF  3CE,4C5
09318:  MOVLW  37
0931A:  MOVLB  4
0931C:  MOVWF  xC6
0931E:  MOVLB  0
09320:  CALL   1CCC
09324:  MOVLW  13
09326:  MOVWF  FF6
09328:  MOVLW  0C
0932A:  MOVWF  FF7
0932C:  MOVLW  00
0932E:  MOVWF  FF8
09330:  MOVLW  03
09332:  MOVLB  8
09334:  MOVWF  x23
09336:  MOVLB  0
09338:  CALL   1B0A
....................         return;
0933C:  GOTO   94A2
....................     }
....................     
....................     if ((erase_src + erase_size) > mis_end_address) {
09340:  MOVLB  3
09342:  MOVF   xD6,W
09344:  ADDWF  xD2,W
09346:  MOVWF  xDA
09348:  MOVF   xD7,W
0934A:  ADDWFC xD3,W
0934C:  MOVWF  xDB
0934E:  MOVF   xD8,W
09350:  ADDWFC xD4,W
09352:  MOVWF  xDC
09354:  MOVF   xD9,W
09356:  ADDWFC xD5,W
09358:  MOVWF  xDD
0935A:  MOVF   xD1,W
0935C:  SUBWF  xDD,W
0935E:  BTFSC  FD8.0
09360:  BRA    9368
09362:  MOVLB  0
09364:  GOTO   944E
09368:  MOVLB  0
0936A:  BTFSS  FD8.2
0936C:  GOTO   93B2
09370:  MOVLB  3
09372:  MOVF   xD0,W
09374:  SUBWF  xDC,W
09376:  BTFSC  FD8.0
09378:  BRA    9380
0937A:  MOVLB  0
0937C:  GOTO   944E
09380:  MOVLB  0
09382:  BTFSS  FD8.2
09384:  GOTO   93B2
09388:  MOVLB  3
0938A:  MOVF   xCF,W
0938C:  SUBWF  xDB,W
0938E:  BTFSC  FD8.0
09390:  BRA    9398
09392:  MOVLB  0
09394:  GOTO   944E
09398:  MOVLB  0
0939A:  BTFSS  FD8.2
0939C:  GOTO   93B2
093A0:  MOVLB  3
093A2:  MOVF   xDA,W
093A4:  SUBWF  xCE,W
093A6:  BTFSS  FD8.0
093A8:  BRA    93B0
093AA:  MOVLB  0
093AC:  GOTO   944E
093B0:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mis_end_address);
093B2:  MOVLW  18
093B4:  MOVWF  FF6
093B6:  MOVLW  0C
093B8:  MOVWF  FF7
093BA:  MOVLW  00
093BC:  MOVWF  FF8
093BE:  MOVLW  3A
093C0:  MOVLB  8
093C2:  MOVWF  x23
093C4:  MOVLB  0
093C6:  CALL   1B0A
093CA:  MOVFF  3D1,4C5
093CE:  MOVLW  37
093D0:  MOVLB  4
093D2:  MOVWF  xC6
093D4:  MOVLB  0
093D6:  CALL   1CCC
093DA:  MOVFF  3D0,4C5
093DE:  MOVLW  37
093E0:  MOVLB  4
093E2:  MOVWF  xC6
093E4:  MOVLB  0
093E6:  CALL   1CCC
093EA:  MOVFF  3CF,4C5
093EE:  MOVLW  37
093F0:  MOVLB  4
093F2:  MOVWF  xC6
093F4:  MOVLB  0
093F6:  CALL   1CCC
093FA:  MOVFF  3CE,4C5
093FE:  MOVLW  37
09400:  MOVLB  4
09402:  MOVWF  xC6
09404:  MOVLB  0
09406:  CALL   1CCC
0940A:  MOVLW  0D
0940C:  MOVLB  8
0940E:  MOVWF  x66
09410:  MOVLB  0
09412:  CALL   1A88
09416:  MOVLW  0A
09418:  MOVLB  8
0941A:  MOVWF  x66
0941C:  MOVLB  0
0941E:  CALL   1A88
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
09422:  MOVLW  58
09424:  MOVWF  FF6
09426:  MOVLW  0C
09428:  MOVWF  FF7
0942A:  MOVLW  00
0942C:  MOVWF  FF8
0942E:  CALL   1ADA
....................         erase_size = mis_end_address - erase_src;
09432:  MOVLB  3
09434:  MOVF   xD2,W
09436:  SUBWF  xCE,W
09438:  MOVWF  xD6
0943A:  MOVF   xD3,W
0943C:  SUBWFB xCF,W
0943E:  MOVWF  xD7
09440:  MOVF   xD4,W
09442:  SUBWFB xD0,W
09444:  MOVWF  xD8
09446:  MOVF   xD5,W
09448:  SUBWFB xD1,W
0944A:  MOVWF  xD9
0944C:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0944E:  MOVLW  8C
09450:  MOVWF  FF6
09452:  MOVLW  0C
09454:  MOVWF  FF7
09456:  MOVLW  00
09458:  MOVWF  FF8
0945A:  CALL   1ADA
....................     subsector_4kByte_erase(smf, erase_src);
0945E:  MOVFF  F5,866
09462:  MOVFF  F4,865
09466:  MOVFF  F3,864
0946A:  MOVFF  F2,863
0946E:  MOVFF  3D5,86A
09472:  MOVFF  3D4,869
09476:  MOVFF  3D3,868
0947A:  MOVFF  3D2,867
0947E:  CALL   3592
....................     
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
09482:  MOVLW  BE
09484:  MOVWF  FF6
09486:  MOVLW  0C
09488:  MOVWF  FF7
0948A:  MOVLW  00
0948C:  MOVWF  FF8
0948E:  CALL   1ADA
....................     fprintf(PC, "____________________\r\n\r\n");
09492:  MOVLW  D8
09494:  MOVWF  FF6
09496:  MOVLW  0C
09498:  MOVWF  FF7
0949A:  MOVLW  00
0949C:  MOVWF  FF8
0949E:  CALL   1ADA
094A2:  GOTO   9612 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.meas;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0241C:  MOVLW  5E
0241E:  MOVWF  FF6
02420:  MOVLW  0D
02422:  MOVWF  FF7
02424:  MOVLW  00
02426:  MOVWF  FF8
02428:  CALL   1ADA
.................... 
....................     output_high(MIS_FM_CS);
0242C:  BCF    F92.5
0242E:  BSF    F89.5
....................     output_high(SMF_CS);
02430:  BCF    F92.2
02432:  BSF    F89.2
....................     delay_ms(100); 
02434:  MOVLW  64
02436:  MOVLB  8
02438:  MOVWF  x7B
0243A:  MOVLB  0
0243C:  CALL   1A5A
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
02440:  MOVLW  9F
02442:  MOVLB  4
02444:  MOVWF  x19
....................     output_low(mis_fm.cs_pin);
02446:  MOVFF  F0,881
0244A:  MOVLB  8
0244C:  CLRF   x82
0244E:  MOVLW  0F
02450:  MOVWF  x84
02452:  MOVLW  89
02454:  MOVWF  x83
02456:  MOVLB  0
02458:  CALL   1E34
0245C:  MOVFF  F0,881
02460:  MOVLB  8
02462:  CLRF   x82
02464:  MOVLW  0F
02466:  MOVWF  x84
02468:  MOVLW  92
0246A:  MOVWF  x83
0246C:  MOVLB  0
0246E:  CALL   1E34
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02472:  MOVFF  F1,884
02476:  MOVFF  F0,883
0247A:  MOVFF  EF,882
0247E:  MOVFF  EE,881
02482:  MOVLW  04
02484:  MOVLB  8
02486:  MOVWF  x86
02488:  MOVLW  19
0248A:  MOVWF  x85
0248C:  CLRF   x88
0248E:  MOVLW  01
02490:  MOVWF  x87
02492:  MOVLW  04
02494:  MOVWF  x8A
02496:  MOVLW  05
02498:  MOVWF  x89
0249A:  CLRF   x8E
0249C:  CLRF   x8D
0249E:  CLRF   x8C
024A0:  MOVLW  14
024A2:  MOVWF  x8B
024A4:  MOVLB  0
024A6:  CALL   1F18
....................     output_high(mis_fm.cs_pin);
024AA:  MOVFF  F0,881
024AE:  MOVLW  01
024B0:  MOVLB  8
024B2:  MOVWF  x82
024B4:  MOVLW  0F
024B6:  MOVWF  x84
024B8:  MOVLW  89
024BA:  MOVWF  x83
024BC:  MOVLB  0
024BE:  CALL   1E34
024C2:  MOVFF  F0,881
024C6:  MOVLB  8
024C8:  CLRF   x82
024CA:  MOVLW  0F
024CC:  MOVWF  x84
024CE:  MOVLW  92
024D0:  MOVWF  x83
024D2:  MOVLB  0
024D4:  CALL   1E34
....................     fprintf(PC, "\t[MIS FM]READ ID:");
024D8:  MOVLW  7A
024DA:  MOVWF  FF6
024DC:  MOVLW  0D
024DE:  MOVWF  FF7
024E0:  MOVLW  00
024E2:  MOVWF  FF8
024E4:  CALL   1ADA
....................     for (unsigned int8 index = 0; index < 4; index++)
024E8:  MOVLB  4
024EA:  CLRF   x1A
024EC:  MOVLB  0
024EE:  MOVLB  4
024F0:  MOVF   x1A,W
024F2:  SUBLW  03
024F4:  BTFSC  FD8.0
024F6:  BRA    24FE
024F8:  MOVLB  0
024FA:  GOTO   2538
024FE:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02500:  CLRF   03
02502:  MOVLB  4
02504:  MOVF   x1A,W
02506:  ADDLW  05
02508:  MOVWF  FE9
0250A:  MOVLW  04
0250C:  ADDWFC 03,W
0250E:  MOVWF  FEA
02510:  MOVFF  FEF,45C
02514:  MOVFF  45C,4C5
02518:  MOVLW  37
0251A:  MOVWF  xC6
0251C:  MOVLB  0
0251E:  CALL   1CCC
02522:  MOVLW  20
02524:  MOVLB  8
02526:  MOVWF  x66
02528:  MOVLB  0
0252A:  CALL   1A88
0252E:  MOVLB  4
02530:  INCF   x1A,F
02532:  MOVLB  0
02534:  GOTO   24EE
....................     }
....................     fprintf(PC,"\r\n");
02538:  MOVLW  0D
0253A:  MOVLB  8
0253C:  MOVWF  x66
0253E:  MOVLB  0
02540:  CALL   1A88
02544:  MOVLW  0A
02546:  MOVLB  8
02548:  MOVWF  x66
0254A:  MOVLB  0
0254C:  CALL   1A88
.................... 
....................     output_low(smf.cs_pin);
02550:  MOVFF  F4,881
02554:  MOVLB  8
02556:  CLRF   x82
02558:  MOVLW  0F
0255A:  MOVWF  x84
0255C:  MOVLW  89
0255E:  MOVWF  x83
02560:  MOVLB  0
02562:  CALL   1E34
02566:  MOVFF  F4,881
0256A:  MOVLB  8
0256C:  CLRF   x82
0256E:  MOVLW  0F
02570:  MOVWF  x84
02572:  MOVLW  92
02574:  MOVWF  x83
02576:  MOVLB  0
02578:  CALL   1E34
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
0257C:  MOVFF  F5,884
02580:  MOVFF  F4,883
02584:  MOVFF  F3,882
02588:  MOVFF  F2,881
0258C:  MOVLW  04
0258E:  MOVLB  8
02590:  MOVWF  x86
02592:  MOVLW  19
02594:  MOVWF  x85
02596:  CLRF   x88
02598:  MOVLW  01
0259A:  MOVWF  x87
0259C:  MOVLW  04
0259E:  MOVWF  x8A
025A0:  MOVLW  05
025A2:  MOVWF  x89
025A4:  CLRF   x8E
025A6:  CLRF   x8D
025A8:  CLRF   x8C
025AA:  MOVLW  14
025AC:  MOVWF  x8B
025AE:  MOVLB  0
025B0:  CALL   1F18
....................     output_high(smf.cs_pin);
025B4:  MOVFF  F4,881
025B8:  MOVLW  01
025BA:  MOVLB  8
025BC:  MOVWF  x82
025BE:  MOVLW  0F
025C0:  MOVWF  x84
025C2:  MOVLW  89
025C4:  MOVWF  x83
025C6:  MOVLB  0
025C8:  CALL   1E34
025CC:  MOVFF  F4,881
025D0:  MOVLB  8
025D2:  CLRF   x82
025D4:  MOVLW  0F
025D6:  MOVWF  x84
025D8:  MOVLW  92
025DA:  MOVWF  x83
025DC:  MOVLB  0
025DE:  CALL   1E34
....................     fprintf(PC, "\t[SMF]\tREAD ID:");
025E2:  MOVLW  8C
025E4:  MOVWF  FF6
025E6:  MOVLW  0D
025E8:  MOVWF  FF7
025EA:  MOVLW  00
025EC:  MOVWF  FF8
025EE:  CALL   1ADA
....................     for (unsigned int8 index = 0; index < 4; index++)
025F2:  MOVLB  4
025F4:  CLRF   x1B
025F6:  MOVLB  0
025F8:  MOVLB  4
025FA:  MOVF   x1B,W
025FC:  SUBLW  03
025FE:  BTFSC  FD8.0
02600:  BRA    2608
02602:  MOVLB  0
02604:  GOTO   2642
02608:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
0260A:  CLRF   03
0260C:  MOVLB  4
0260E:  MOVF   x1B,W
02610:  ADDLW  05
02612:  MOVWF  FE9
02614:  MOVLW  04
02616:  ADDWFC 03,W
02618:  MOVWF  FEA
0261A:  MOVFF  FEF,45C
0261E:  MOVFF  45C,4C5
02622:  MOVLW  37
02624:  MOVWF  xC6
02626:  MOVLB  0
02628:  CALL   1CCC
0262C:  MOVLW  20
0262E:  MOVLB  8
02630:  MOVWF  x66
02632:  MOVLB  0
02634:  CALL   1A88
02638:  MOVLB  4
0263A:  INCF   x1B,F
0263C:  MOVLB  0
0263E:  GOTO   25F8
....................     }
....................     fprintf(PC,"\r\n");
02642:  MOVLW  0D
02644:  MOVLB  8
02646:  MOVWF  x66
02648:  MOVLB  0
0264A:  CALL   1A88
0264E:  MOVLW  0A
02650:  MOVLB  8
02652:  MOVWF  x66
02654:  MOVLB  0
02656:  CALL   1A88
.................... 
....................     if (!is_connect(smf)) {
0265A:  MOVFF  F5,866
0265E:  MOVFF  F4,865
02662:  MOVFF  F3,864
02666:  MOVFF  F2,863
0266A:  CALL   213E
0266E:  MOVF   01,F
02670:  BTFSS  FD8.2
02672:  GOTO   268A
....................         fprintf(PC, "\t[SMF]\tconnect error!\r\n");
02676:  MOVLW  9C
02678:  MOVWF  FF6
0267A:  MOVLW  0D
0267C:  MOVWF  FF7
0267E:  MOVLW  00
02680:  MOVWF  FF8
02682:  CALL   1ADA
....................         // return;
....................     }else {
02686:  GOTO   269A
....................         fprintf(PC, "\t[SMF]\tis connected\r\n");
0268A:  MOVLW  B4
0268C:  MOVWF  FF6
0268E:  MOVLW  0D
02690:  MOVWF  FF7
02692:  MOVLW  00
02694:  MOVWF  FF8
02696:  CALL   1ADA
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
0269A:  MOVLW  64
0269C:  MOVLB  8
0269E:  MOVWF  x7B
026A0:  MOVLB  0
026A2:  CALL   1A5A
....................     if (!is_connect(mis_fm)) {
026A6:  MOVFF  F1,866
026AA:  MOVFF  F0,865
026AE:  MOVFF  EF,864
026B2:  MOVFF  EE,863
026B6:  CALL   213E
026BA:  MOVF   01,F
026BC:  BTFSS  FD8.2
026BE:  GOTO   26D6
....................         fprintf(PC, "\t[MIS FM]connect error!\r\n");
026C2:  MOVLW  CA
026C4:  MOVWF  FF6
026C6:  MOVLW  0D
026C8:  MOVWF  FF7
026CA:  MOVLW  00
026CC:  MOVWF  FF8
026CE:  CALL   1ADA
....................     }else {
026D2:  GOTO   26E6
....................         fprintf(PC, "\t[MIS FM]is connected\r\n");
026D6:  MOVLW  E4
026D8:  MOVWF  FF6
026DA:  MOVLW  0D
026DC:  MOVWF  FF7
026DE:  MOVLW  00
026E0:  MOVWF  FF8
026E2:  CALL   1ADA
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
026E6:  MOVFF  F1,4CE
026EA:  MOVFF  F0,4CD
026EE:  MOVFF  EF,4CC
026F2:  MOVFF  EE,4CB
026F6:  MOVLB  4
026F8:  CLRF   xD2
026FA:  CLRF   xD1
026FC:  CLRF   xD0
026FE:  CLRF   xCF
02700:  MOVLW  04
02702:  MOVWF  xD4
02704:  MOVLW  1C
02706:  MOVWF  xD3
02708:  CLRF   xD8
0270A:  CLRF   xD7
0270C:  CLRF   xD6
0270E:  MOVLW  40
02710:  MOVWF  xD5
02712:  MOVLB  0
02714:  CALL   2204
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
02718:  MOVLB  4
0271A:  CLRF   x5F
0271C:  CLRF   x5E
0271E:  CLRF   x5D
02720:  MOVFF  41C,45C
02724:  MOVFF  45C,45F
02728:  CLRF   x5C
0272A:  CLRF   x5D
0272C:  CLRF   x5E
0272E:  CLRF   x64
02730:  CLRF   x63
02732:  CLRF   x62
02734:  MOVFF  41D,461
02738:  MOVFF  462,03
0273C:  MOVFF  461,02
02740:  CLRF   00
02742:  CLRF   01
02744:  MOVF   00,W
02746:  IORWF  x5C,F
02748:  MOVF   01,W
0274A:  IORWF  x5D,F
0274C:  MOVF   02,W
0274E:  IORWF  x5E,F
02750:  MOVF   03,W
02752:  IORWF  x5F,F
02754:  CLRF   x64
02756:  CLRF   x63
02758:  CLRF   x62
0275A:  MOVFF  41E,461
0275E:  MOVFF  463,03
02762:  MOVFF  462,02
02766:  MOVFF  461,01
0276A:  CLRF   00
0276C:  MOVF   00,W
0276E:  IORWF  x5C,F
02770:  MOVF   01,W
02772:  IORWF  x5D,F
02774:  MOVF   02,W
02776:  IORWF  x5E,F
02778:  MOVF   03,W
0277A:  IORWF  x5F,F
0277C:  MOVFF  41F,00
02780:  CLRF   01
02782:  CLRF   02
02784:  CLRF   03
02786:  MOVF   00,W
02788:  IORWF  x5C,W
0278A:  MOVLB  3
0278C:  MOVWF  x60
0278E:  MOVF   01,W
02790:  MOVLB  4
02792:  IORWF  x5D,W
02794:  MOVLB  3
02796:  MOVWF  x61
02798:  MOVF   02,W
0279A:  MOVLB  4
0279C:  IORWF  x5E,W
0279E:  MOVLB  3
027A0:  MOVWF  x62
027A2:  MOVF   03,W
027A4:  MOVLB  4
027A6:  IORWF  x5F,W
027A8:  MOVLB  3
027AA:  MOVWF  x63
....................     smf_piclog_loop_counter = readdata[4];
027AC:  MOVFF  420,364
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
027B0:  MOVLB  4
027B2:  CLRF   x5F
027B4:  CLRF   x5E
027B6:  CLRF   x5D
027B8:  MOVFF  421,45C
027BC:  MOVFF  45C,45F
027C0:  CLRF   x5C
027C2:  CLRF   x5D
027C4:  CLRF   x5E
027C6:  CLRF   x64
027C8:  CLRF   x63
027CA:  CLRF   x62
027CC:  MOVFF  422,461
027D0:  MOVFF  462,03
027D4:  MOVFF  461,02
027D8:  CLRF   00
027DA:  CLRF   01
027DC:  MOVF   00,W
027DE:  IORWF  x5C,F
027E0:  MOVF   01,W
027E2:  IORWF  x5D,F
027E4:  MOVF   02,W
027E6:  IORWF  x5E,F
027E8:  MOVF   03,W
027EA:  IORWF  x5F,F
027EC:  CLRF   x64
027EE:  CLRF   x63
027F0:  CLRF   x62
027F2:  MOVFF  423,461
027F6:  MOVFF  463,03
027FA:  MOVFF  462,02
027FE:  MOVFF  461,01
02802:  CLRF   00
02804:  MOVF   00,W
02806:  IORWF  x5C,F
02808:  MOVF   01,W
0280A:  IORWF  x5D,F
0280C:  MOVF   02,W
0280E:  IORWF  x5E,F
02810:  MOVF   03,W
02812:  IORWF  x5F,F
02814:  MOVFF  424,00
02818:  CLRF   01
0281A:  CLRF   02
0281C:  CLRF   03
0281E:  MOVF   00,W
02820:  IORWF  x5C,W
02822:  MOVLB  3
02824:  MOVWF  x65
02826:  MOVF   01,W
02828:  MOVLB  4
0282A:  IORWF  x5D,W
0282C:  MOVLB  3
0282E:  MOVWF  x66
02830:  MOVF   02,W
02832:  MOVLB  4
02834:  IORWF  x5E,W
02836:  MOVLB  3
02838:  MOVWF  x67
0283A:  MOVF   03,W
0283C:  MOVLB  4
0283E:  IORWF  x5F,W
02840:  MOVLB  3
02842:  MOVWF  x68
....................     smf_meas_loop_counter = readdata[9];
02844:  MOVFF  425,369
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
02848:  MOVLB  4
0284A:  CLRF   x5F
0284C:  CLRF   x5E
0284E:  CLRF   x5D
02850:  MOVFF  426,45C
02854:  MOVFF  45C,45F
02858:  CLRF   x5C
0285A:  CLRF   x5D
0285C:  CLRF   x5E
0285E:  CLRF   x64
02860:  CLRF   x63
02862:  CLRF   x62
02864:  MOVFF  427,461
02868:  MOVFF  462,03
0286C:  MOVFF  461,02
02870:  CLRF   00
02872:  CLRF   01
02874:  MOVF   00,W
02876:  IORWF  x5C,F
02878:  MOVF   01,W
0287A:  IORWF  x5D,F
0287C:  MOVF   02,W
0287E:  IORWF  x5E,F
02880:  MOVF   03,W
02882:  IORWF  x5F,F
02884:  CLRF   x64
02886:  CLRF   x63
02888:  CLRF   x62
0288A:  MOVFF  428,461
0288E:  MOVFF  463,03
02892:  MOVFF  462,02
02896:  MOVFF  461,01
0289A:  CLRF   00
0289C:  MOVF   00,W
0289E:  IORWF  x5C,F
028A0:  MOVF   01,W
028A2:  IORWF  x5D,F
028A4:  MOVF   02,W
028A6:  IORWF  x5E,F
028A8:  MOVF   03,W
028AA:  IORWF  x5F,F
028AC:  MOVFF  429,00
028B0:  CLRF   01
028B2:  CLRF   02
028B4:  CLRF   03
028B6:  MOVF   00,W
028B8:  IORWF  x5C,W
028BA:  MOVLB  3
028BC:  MOVWF  x6A
028BE:  MOVF   01,W
028C0:  MOVLB  4
028C2:  IORWF  x5D,W
028C4:  MOVLB  3
028C6:  MOVWF  x6B
028C8:  MOVF   02,W
028CA:  MOVLB  4
028CC:  IORWF  x5E,W
028CE:  MOVLB  3
028D0:  MOVWF  x6C
028D2:  MOVF   03,W
028D4:  MOVLB  4
028D6:  IORWF  x5F,W
028D8:  MOVLB  3
028DA:  MOVWF  x6D
....................     misf_piclog_loop_counter = readdata[14];
028DC:  MOVFF  42A,36E
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
028E0:  MOVLB  4
028E2:  CLRF   x5F
028E4:  CLRF   x5E
028E6:  CLRF   x5D
028E8:  MOVFF  42B,45C
028EC:  MOVFF  45C,45F
028F0:  CLRF   x5C
028F2:  CLRF   x5D
028F4:  CLRF   x5E
028F6:  CLRF   x64
028F8:  CLRF   x63
028FA:  CLRF   x62
028FC:  MOVFF  42C,461
02900:  MOVFF  462,03
02904:  MOVFF  461,02
02908:  CLRF   00
0290A:  CLRF   01
0290C:  MOVF   00,W
0290E:  IORWF  x5C,F
02910:  MOVF   01,W
02912:  IORWF  x5D,F
02914:  MOVF   02,W
02916:  IORWF  x5E,F
02918:  MOVF   03,W
0291A:  IORWF  x5F,F
0291C:  CLRF   x64
0291E:  CLRF   x63
02920:  CLRF   x62
02922:  MOVFF  42D,461
02926:  MOVFF  463,03
0292A:  MOVFF  462,02
0292E:  MOVFF  461,01
02932:  CLRF   00
02934:  MOVF   00,W
02936:  IORWF  x5C,F
02938:  MOVF   01,W
0293A:  IORWF  x5D,F
0293C:  MOVF   02,W
0293E:  IORWF  x5E,F
02940:  MOVF   03,W
02942:  IORWF  x5F,F
02944:  MOVFF  42E,00
02948:  CLRF   01
0294A:  CLRF   02
0294C:  CLRF   03
0294E:  MOVF   00,W
02950:  IORWF  x5C,W
02952:  MOVLB  3
02954:  MOVWF  x6F
02956:  MOVF   01,W
02958:  MOVLB  4
0295A:  IORWF  x5D,W
0295C:  MOVLB  3
0295E:  MOVWF  x70
02960:  MOVF   02,W
02962:  MOVLB  4
02964:  IORWF  x5E,W
02966:  MOVLB  3
02968:  MOVWF  x71
0296A:  MOVF   03,W
0296C:  MOVLB  4
0296E:  IORWF  x5F,W
02970:  MOVLB  3
02972:  MOVWF  x72
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
02974:  MOVLB  4
02976:  CLRF   x5F
02978:  CLRF   x5E
0297A:  CLRF   x5D
0297C:  MOVFF  42F,45C
02980:  MOVFF  45C,45F
02984:  CLRF   x5C
02986:  CLRF   x5D
02988:  CLRF   x5E
0298A:  CLRF   x64
0298C:  CLRF   x63
0298E:  CLRF   x62
02990:  MOVFF  430,461
02994:  MOVFF  462,03
02998:  MOVFF  461,02
0299C:  CLRF   00
0299E:  CLRF   01
029A0:  MOVF   00,W
029A2:  IORWF  x5C,F
029A4:  MOVF   01,W
029A6:  IORWF  x5D,F
029A8:  MOVF   02,W
029AA:  IORWF  x5E,F
029AC:  MOVF   03,W
029AE:  IORWF  x5F,F
029B0:  CLRF   x64
029B2:  CLRF   x63
029B4:  CLRF   x62
029B6:  MOVFF  431,461
029BA:  MOVFF  463,03
029BE:  MOVFF  462,02
029C2:  MOVFF  461,01
029C6:  CLRF   00
029C8:  MOVF   00,W
029CA:  IORWF  x5C,F
029CC:  MOVF   01,W
029CE:  IORWF  x5D,F
029D0:  MOVF   02,W
029D2:  IORWF  x5E,F
029D4:  MOVF   03,W
029D6:  IORWF  x5F,F
029D8:  MOVFF  432,00
029DC:  CLRF   01
029DE:  CLRF   02
029E0:  CLRF   03
029E2:  MOVF   00,W
029E4:  IORWF  x5C,W
029E6:  MOVLB  3
029E8:  MOVWF  x73
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
029EA:  MOVLB  4
029EC:  CLRF   x5F
029EE:  CLRF   x5E
029F0:  CLRF   x5D
029F2:  MOVFF  433,45C
029F6:  MOVFF  45C,45F
029FA:  CLRF   x5C
029FC:  CLRF   x5D
029FE:  CLRF   x5E
02A00:  CLRF   x64
02A02:  CLRF   x63
02A04:  CLRF   x62
02A06:  MOVFF  434,461
02A0A:  MOVFF  462,03
02A0E:  MOVFF  461,02
02A12:  CLRF   00
02A14:  CLRF   01
02A16:  MOVF   00,W
02A18:  IORWF  x5C,F
02A1A:  MOVF   01,W
02A1C:  IORWF  x5D,F
02A1E:  MOVF   02,W
02A20:  IORWF  x5E,F
02A22:  MOVF   03,W
02A24:  IORWF  x5F,F
02A26:  CLRF   x64
02A28:  CLRF   x63
02A2A:  CLRF   x62
02A2C:  MOVFF  435,461
02A30:  MOVFF  463,03
02A34:  MOVFF  462,02
02A38:  MOVFF  461,01
02A3C:  CLRF   00
02A3E:  MOVF   00,W
02A40:  IORWF  x5C,F
02A42:  MOVF   01,W
02A44:  IORWF  x5D,F
02A46:  MOVF   02,W
02A48:  IORWF  x5E,F
02A4A:  MOVF   03,W
02A4C:  IORWF  x5F,F
02A4E:  MOVFF  436,00
02A52:  CLRF   01
02A54:  CLRF   02
02A56:  CLRF   03
02A58:  MOVF   00,W
02A5A:  IORWF  x5C,W
02A5C:  MOVLB  3
02A5E:  MOVWF  x74
02A60:  MOVF   01,W
02A62:  MOVLB  4
02A64:  IORWF  x5D,W
02A66:  MOVLB  3
02A68:  MOVWF  x75
02A6A:  MOVF   02,W
02A6C:  MOVLB  4
02A6E:  IORWF  x5E,W
02A70:  MOVLB  3
02A72:  MOVWF  x76
02A74:  MOVF   03,W
02A76:  MOVLB  4
02A78:  IORWF  x5F,W
02A7A:  MOVLB  3
02A7C:  MOVWF  x77
....................     misf_meas_loop_counter = readdata[27];
02A7E:  MOVFF  437,378
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
02A82:  MOVLB  4
02A84:  CLRF   x5F
02A86:  CLRF   x5E
02A88:  CLRF   x5D
02A8A:  MOVFF  438,45C
02A8E:  MOVFF  45C,45F
02A92:  CLRF   x5C
02A94:  CLRF   x5D
02A96:  CLRF   x5E
02A98:  CLRF   x64
02A9A:  CLRF   x63
02A9C:  CLRF   x62
02A9E:  MOVFF  439,461
02AA2:  MOVFF  462,03
02AA6:  MOVFF  461,02
02AAA:  CLRF   00
02AAC:  CLRF   01
02AAE:  MOVF   00,W
02AB0:  IORWF  x5C,F
02AB2:  MOVF   01,W
02AB4:  IORWF  x5D,F
02AB6:  MOVF   02,W
02AB8:  IORWF  x5E,F
02ABA:  MOVF   03,W
02ABC:  IORWF  x5F,F
02ABE:  CLRF   x64
02AC0:  CLRF   x63
02AC2:  CLRF   x62
02AC4:  MOVFF  43A,461
02AC8:  MOVFF  463,03
02ACC:  MOVFF  462,02
02AD0:  MOVFF  461,01
02AD4:  CLRF   00
02AD6:  MOVF   00,W
02AD8:  IORWF  x5C,F
02ADA:  MOVF   01,W
02ADC:  IORWF  x5D,F
02ADE:  MOVF   02,W
02AE0:  IORWF  x5E,F
02AE2:  MOVF   03,W
02AE4:  IORWF  x5F,F
02AE6:  MOVFF  43B,00
02AEA:  CLRF   01
02AEC:  CLRF   02
02AEE:  CLRF   03
02AF0:  MOVF   00,W
02AF2:  IORWF  x5C,W
02AF4:  MOVLB  3
02AF6:  MOVWF  x79
02AF8:  MOVF   01,W
02AFA:  MOVLB  4
02AFC:  IORWF  x5D,W
02AFE:  MOVLB  3
02B00:  MOVWF  x7A
02B02:  MOVF   02,W
02B04:  MOVLB  4
02B06:  IORWF  x5E,W
02B08:  MOVLB  3
02B0A:  MOVWF  x7B
02B0C:  MOVF   03,W
02B0E:  MOVLB  4
02B10:  IORWF  x5F,W
02B12:  MOVLB  3
02B14:  MOVWF  x7C
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02B16:  MOVLW  FC
02B18:  MOVWF  FF6
02B1A:  MOVLW  0D
02B1C:  MOVWF  FF7
02B1E:  MOVLW  00
02B20:  MOVWF  FF8
02B22:  MOVLW  28
02B24:  MOVLB  8
02B26:  MOVWF  x23
02B28:  MOVLB  0
02B2A:  CALL   1B0A
02B2E:  MOVFF  363,4C5
02B32:  MOVLW  37
02B34:  MOVLB  4
02B36:  MOVWF  xC6
02B38:  MOVLB  0
02B3A:  CALL   1CCC
02B3E:  MOVFF  362,4C5
02B42:  MOVLW  37
02B44:  MOVLB  4
02B46:  MOVWF  xC6
02B48:  MOVLB  0
02B4A:  CALL   1CCC
02B4E:  MOVFF  361,4C5
02B52:  MOVLW  37
02B54:  MOVLB  4
02B56:  MOVWF  xC6
02B58:  MOVLB  0
02B5A:  CALL   1CCC
02B5E:  MOVFF  360,4C5
02B62:  MOVLW  37
02B64:  MOVLB  4
02B66:  MOVWF  xC6
02B68:  MOVLB  0
02B6A:  CALL   1CCC
02B6E:  MOVLW  0D
02B70:  MOVLB  8
02B72:  MOVWF  x66
02B74:  MOVLB  0
02B76:  CALL   1A88
02B7A:  MOVLW  0A
02B7C:  MOVLB  8
02B7E:  MOVWF  x66
02B80:  MOVLB  0
02B82:  CALL   1A88
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02B86:  MOVLW  2C
02B88:  MOVWF  FF6
02B8A:  MOVLW  0E
02B8C:  MOVWF  FF7
02B8E:  MOVLW  00
02B90:  MOVWF  FF8
02B92:  MOVLW  28
02B94:  MOVLB  8
02B96:  MOVWF  x23
02B98:  MOVLB  0
02B9A:  CALL   1B0A
02B9E:  MOVFF  364,4C5
02BA2:  MOVLW  37
02BA4:  MOVLB  4
02BA6:  MOVWF  xC6
02BA8:  MOVLB  0
02BAA:  CALL   1CCC
02BAE:  MOVLW  0D
02BB0:  MOVLB  8
02BB2:  MOVWF  x66
02BB4:  MOVLB  0
02BB6:  CALL   1A88
02BBA:  MOVLW  0A
02BBC:  MOVLB  8
02BBE:  MOVWF  x66
02BC0:  MOVLB  0
02BC2:  CALL   1A88
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02BC6:  MOVLW  5C
02BC8:  MOVWF  FF6
02BCA:  MOVLW  0E
02BCC:  MOVWF  FF7
02BCE:  MOVLW  00
02BD0:  MOVWF  FF8
02BD2:  MOVLW  28
02BD4:  MOVLB  8
02BD6:  MOVWF  x23
02BD8:  MOVLB  0
02BDA:  CALL   1B0A
02BDE:  MOVFF  368,4C5
02BE2:  MOVLW  37
02BE4:  MOVLB  4
02BE6:  MOVWF  xC6
02BE8:  MOVLB  0
02BEA:  CALL   1CCC
02BEE:  MOVFF  367,4C5
02BF2:  MOVLW  37
02BF4:  MOVLB  4
02BF6:  MOVWF  xC6
02BF8:  MOVLB  0
02BFA:  CALL   1CCC
02BFE:  MOVFF  366,4C5
02C02:  MOVLW  37
02C04:  MOVLB  4
02C06:  MOVWF  xC6
02C08:  MOVLB  0
02C0A:  CALL   1CCC
02C0E:  MOVFF  365,4C5
02C12:  MOVLW  37
02C14:  MOVLB  4
02C16:  MOVWF  xC6
02C18:  MOVLB  0
02C1A:  CALL   1CCC
02C1E:  MOVLW  0D
02C20:  MOVLB  8
02C22:  MOVWF  x66
02C24:  MOVLB  0
02C26:  CALL   1A88
02C2A:  MOVLW  0A
02C2C:  MOVLB  8
02C2E:  MOVWF  x66
02C30:  MOVLB  0
02C32:  CALL   1A88
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02C36:  MOVLW  8C
02C38:  MOVWF  FF6
02C3A:  MOVLW  0E
02C3C:  MOVWF  FF7
02C3E:  MOVLW  00
02C40:  MOVWF  FF8
02C42:  MOVLW  28
02C44:  MOVLB  8
02C46:  MOVWF  x23
02C48:  MOVLB  0
02C4A:  CALL   1B0A
02C4E:  MOVFF  369,4C5
02C52:  MOVLW  37
02C54:  MOVLB  4
02C56:  MOVWF  xC6
02C58:  MOVLB  0
02C5A:  CALL   1CCC
02C5E:  MOVLW  0D
02C60:  MOVLB  8
02C62:  MOVWF  x66
02C64:  MOVLB  0
02C66:  CALL   1A88
02C6A:  MOVLW  0A
02C6C:  MOVLB  8
02C6E:  MOVWF  x66
02C70:  MOVLB  0
02C72:  CALL   1A88
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02C76:  MOVLW  BC
02C78:  MOVWF  FF6
02C7A:  MOVLW  0E
02C7C:  MOVWF  FF7
02C7E:  MOVLW  00
02C80:  MOVWF  FF8
02C82:  MOVLW  28
02C84:  MOVLB  8
02C86:  MOVWF  x23
02C88:  MOVLB  0
02C8A:  CALL   1B0A
02C8E:  MOVFF  36D,4C5
02C92:  MOVLW  37
02C94:  MOVLB  4
02C96:  MOVWF  xC6
02C98:  MOVLB  0
02C9A:  CALL   1CCC
02C9E:  MOVFF  36C,4C5
02CA2:  MOVLW  37
02CA4:  MOVLB  4
02CA6:  MOVWF  xC6
02CA8:  MOVLB  0
02CAA:  CALL   1CCC
02CAE:  MOVFF  36B,4C5
02CB2:  MOVLW  37
02CB4:  MOVLB  4
02CB6:  MOVWF  xC6
02CB8:  MOVLB  0
02CBA:  CALL   1CCC
02CBE:  MOVFF  36A,4C5
02CC2:  MOVLW  37
02CC4:  MOVLB  4
02CC6:  MOVWF  xC6
02CC8:  MOVLB  0
02CCA:  CALL   1CCC
02CCE:  MOVLW  0D
02CD0:  MOVLB  8
02CD2:  MOVWF  x66
02CD4:  MOVLB  0
02CD6:  CALL   1A88
02CDA:  MOVLW  0A
02CDC:  MOVLB  8
02CDE:  MOVWF  x66
02CE0:  MOVLB  0
02CE2:  CALL   1A88
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02CE6:  MOVLW  EC
02CE8:  MOVWF  FF6
02CEA:  MOVLW  0E
02CEC:  MOVWF  FF7
02CEE:  MOVLW  00
02CF0:  MOVWF  FF8
02CF2:  MOVLW  28
02CF4:  MOVLB  8
02CF6:  MOVWF  x23
02CF8:  MOVLB  0
02CFA:  CALL   1B0A
02CFE:  MOVFF  372,4C5
02D02:  MOVLW  37
02D04:  MOVLB  4
02D06:  MOVWF  xC6
02D08:  MOVLB  0
02D0A:  CALL   1CCC
02D0E:  MOVFF  371,4C5
02D12:  MOVLW  37
02D14:  MOVLB  4
02D16:  MOVWF  xC6
02D18:  MOVLB  0
02D1A:  CALL   1CCC
02D1E:  MOVFF  370,4C5
02D22:  MOVLW  37
02D24:  MOVLB  4
02D26:  MOVWF  xC6
02D28:  MOVLB  0
02D2A:  CALL   1CCC
02D2E:  MOVFF  36F,4C5
02D32:  MOVLW  37
02D34:  MOVLB  4
02D36:  MOVWF  xC6
02D38:  MOVLB  0
02D3A:  CALL   1CCC
02D3E:  MOVLW  0D
02D40:  MOVLB  8
02D42:  MOVWF  x66
02D44:  MOVLB  0
02D46:  CALL   1A88
02D4A:  MOVLW  0A
02D4C:  MOVLB  8
02D4E:  MOVWF  x66
02D50:  MOVLB  0
02D52:  CALL   1A88
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02D56:  MOVLW  1C
02D58:  MOVWF  FF6
02D5A:  MOVLW  0F
02D5C:  MOVWF  FF7
02D5E:  MOVLW  00
02D60:  MOVWF  FF8
02D62:  MOVLW  28
02D64:  MOVLB  8
02D66:  MOVWF  x23
02D68:  MOVLB  0
02D6A:  CALL   1B0A
02D6E:  MOVFF  36E,4C5
02D72:  MOVLW  37
02D74:  MOVLB  4
02D76:  MOVWF  xC6
02D78:  MOVLB  0
02D7A:  CALL   1CCC
02D7E:  MOVLW  0D
02D80:  MOVLB  8
02D82:  MOVWF  x66
02D84:  MOVLB  0
02D86:  CALL   1A88
02D8A:  MOVLW  0A
02D8C:  MOVLB  8
02D8E:  MOVWF  x66
02D90:  MOVLB  0
02D92:  CALL   1A88
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02D96:  MOVLW  4C
02D98:  MOVWF  FF6
02D9A:  MOVLW  0F
02D9C:  MOVWF  FF7
02D9E:  MOVLW  00
02DA0:  MOVWF  FF8
02DA2:  MOVLW  28
02DA4:  MOVLB  8
02DA6:  MOVWF  x23
02DA8:  MOVLB  0
02DAA:  CALL   1B0A
02DAE:  MOVFF  373,4C5
02DB2:  MOVLW  37
02DB4:  MOVLB  4
02DB6:  MOVWF  xC6
02DB8:  MOVLB  0
02DBA:  CALL   1CCC
02DBE:  MOVLW  0D
02DC0:  MOVLB  8
02DC2:  MOVWF  x66
02DC4:  MOVLB  0
02DC6:  CALL   1A88
02DCA:  MOVLW  0A
02DCC:  MOVLB  8
02DCE:  MOVWF  x66
02DD0:  MOVLB  0
02DD2:  CALL   1A88
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02DD6:  MOVLW  7C
02DD8:  MOVWF  FF6
02DDA:  MOVLW  0F
02DDC:  MOVWF  FF7
02DDE:  MOVLW  00
02DE0:  MOVWF  FF8
02DE2:  MOVLW  28
02DE4:  MOVLB  8
02DE6:  MOVWF  x23
02DE8:  MOVLB  0
02DEA:  CALL   1B0A
02DEE:  MOVFF  377,4C5
02DF2:  MOVLW  37
02DF4:  MOVLB  4
02DF6:  MOVWF  xC6
02DF8:  MOVLB  0
02DFA:  CALL   1CCC
02DFE:  MOVFF  376,4C5
02E02:  MOVLW  37
02E04:  MOVLB  4
02E06:  MOVWF  xC6
02E08:  MOVLB  0
02E0A:  CALL   1CCC
02E0E:  MOVFF  375,4C5
02E12:  MOVLW  37
02E14:  MOVLB  4
02E16:  MOVWF  xC6
02E18:  MOVLB  0
02E1A:  CALL   1CCC
02E1E:  MOVFF  374,4C5
02E22:  MOVLW  37
02E24:  MOVLB  4
02E26:  MOVWF  xC6
02E28:  MOVLB  0
02E2A:  CALL   1CCC
02E2E:  MOVLW  0D
02E30:  MOVLB  8
02E32:  MOVWF  x66
02E34:  MOVLB  0
02E36:  CALL   1A88
02E3A:  MOVLW  0A
02E3C:  MOVLB  8
02E3E:  MOVWF  x66
02E40:  MOVLB  0
02E42:  CALL   1A88
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02E46:  MOVLW  AC
02E48:  MOVWF  FF6
02E4A:  MOVLW  0F
02E4C:  MOVWF  FF7
02E4E:  MOVLW  00
02E50:  MOVWF  FF8
02E52:  MOVLW  28
02E54:  MOVLB  8
02E56:  MOVWF  x23
02E58:  MOVLB  0
02E5A:  CALL   1B0A
02E5E:  MOVFF  37C,4C5
02E62:  MOVLW  37
02E64:  MOVLB  4
02E66:  MOVWF  xC6
02E68:  MOVLB  0
02E6A:  CALL   1CCC
02E6E:  MOVFF  37B,4C5
02E72:  MOVLW  37
02E74:  MOVLB  4
02E76:  MOVWF  xC6
02E78:  MOVLB  0
02E7A:  CALL   1CCC
02E7E:  MOVFF  37A,4C5
02E82:  MOVLW  37
02E84:  MOVLB  4
02E86:  MOVWF  xC6
02E88:  MOVLB  0
02E8A:  CALL   1CCC
02E8E:  MOVFF  379,4C5
02E92:  MOVLW  37
02E94:  MOVLB  4
02E96:  MOVWF  xC6
02E98:  MOVLB  0
02E9A:  CALL   1CCC
02E9E:  MOVLW  0D
02EA0:  MOVLB  8
02EA2:  MOVWF  x66
02EA4:  MOVLB  0
02EA6:  CALL   1A88
02EAA:  MOVLW  0A
02EAC:  MOVLB  8
02EAE:  MOVWF  x66
02EB0:  MOVLB  0
02EB2:  CALL   1A88
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
02EB6:  MOVLW  DC
02EB8:  MOVWF  FF6
02EBA:  MOVLW  0F
02EBC:  MOVWF  FF7
02EBE:  MOVLW  00
02EC0:  MOVWF  FF8
02EC2:  MOVLW  28
02EC4:  MOVLB  8
02EC6:  MOVWF  x23
02EC8:  MOVLB  0
02ECA:  CALL   1B0A
02ECE:  MOVFF  378,4C5
02ED2:  MOVLW  37
02ED4:  MOVLB  4
02ED6:  MOVWF  xC6
02ED8:  MOVLB  0
02EDA:  CALL   1CCC
02EDE:  MOVLW  0D
02EE0:  MOVLB  8
02EE2:  MOVWF  x66
02EE4:  MOVLB  0
02EE6:  CALL   1A88
02EEA:  MOVLW  0A
02EEC:  MOVLB  8
02EEE:  MOVWF  x66
02EF0:  MOVLB  0
02EF2:  CALL   1A88
....................     fprintf(PC, "\tComplete\r\n");
02EF6:  MOVLW  0C
02EF8:  MOVWF  FF6
02EFA:  MOVLW  10
02EFC:  MOVWF  FF7
02EFE:  MOVLW  00
02F00:  MOVWF  FF8
02F02:  CALL   1ADA
02F06:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
06D36:  GOTO   6EBE (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
038EA:  MOVFF  F1,866
038EE:  MOVFF  F0,865
038F2:  MOVFF  EF,864
038F6:  MOVFF  EE,863
038FA:  CALL   213E
038FE:  MOVF   01,F
03900:  BTFSS  FD8.2
03902:  GOTO   391A
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03906:  MOVLW  18
03908:  MOVWF  FF6
0390A:  MOVLW  10
0390C:  MOVWF  FF7
0390E:  MOVLW  00
03910:  MOVWF  FF8
03912:  CALL   1ADA
....................         return;
03916:  GOTO   3B8C
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
0391A:  MOVLB  8
0391C:  CLRF   x23
0391E:  CLRF   x24
03920:  CLRF   x25
03922:  CLRF   x26
03924:  CLRF   x27
03926:  CLRF   x28
03928:  CLRF   x29
0392A:  CLRF   x2A
0392C:  CLRF   x2B
0392E:  CLRF   x2C
03930:  CLRF   x2D
03932:  CLRF   x2E
03934:  CLRF   x2F
03936:  CLRF   x30
03938:  CLRF   x31
0393A:  CLRF   x32
0393C:  CLRF   x33
0393E:  CLRF   x34
03940:  CLRF   x35
03942:  CLRF   x36
03944:  CLRF   x37
03946:  CLRF   x38
03948:  CLRF   x39
0394A:  CLRF   x3A
0394C:  CLRF   x3B
0394E:  CLRF   x3C
03950:  CLRF   x3D
03952:  CLRF   x3E
03954:  CLRF   x3F
03956:  CLRF   x40
03958:  CLRF   x41
0395A:  CLRF   x42
0395C:  CLRF   x43
0395E:  CLRF   x44
03960:  CLRF   x45
03962:  CLRF   x46
03964:  CLRF   x47
03966:  CLRF   x48
03968:  CLRF   x49
0396A:  CLRF   x4A
0396C:  CLRF   x4B
0396E:  CLRF   x4C
03970:  CLRF   x4D
03972:  CLRF   x4E
03974:  CLRF   x4F
03976:  CLRF   x50
03978:  CLRF   x51
0397A:  CLRF   x52
0397C:  CLRF   x53
0397E:  CLRF   x54
03980:  CLRF   x55
03982:  CLRF   x56
03984:  CLRF   x57
03986:  CLRF   x58
03988:  CLRF   x59
0398A:  CLRF   x5A
0398C:  CLRF   x5B
0398E:  CLRF   x5C
03990:  CLRF   x5D
03992:  CLRF   x5E
03994:  CLRF   x5F
03996:  CLRF   x60
03998:  CLRF   x61
0399A:  CLRF   x62
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
0399C:  MOVFF  363,864
039A0:  CLRF   x65
039A2:  CLRF   x66
039A4:  CLRF   x67
039A6:  MOVF   x64,W
039A8:  MOVWF  x23
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
039AA:  MOVFF  362,864
039AE:  MOVFF  363,865
039B2:  CLRF   x66
039B4:  CLRF   x67
039B6:  MOVF   x64,W
039B8:  MOVWF  x24
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
039BA:  MOVFF  361,864
039BE:  MOVFF  362,865
039C2:  MOVFF  363,866
039C6:  CLRF   x67
039C8:  MOVF   x64,W
039CA:  MOVWF  x25
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
039CC:  MOVLB  3
039CE:  MOVF   x60,W
039D0:  MOVLB  8
039D2:  MOVWF  x26
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
039D4:  MOVFF  364,827
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
039D8:  MOVFF  368,864
039DC:  CLRF   x65
039DE:  CLRF   x66
039E0:  CLRF   x67
039E2:  MOVF   x64,W
039E4:  MOVWF  x28
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
039E6:  MOVFF  367,864
039EA:  MOVFF  368,865
039EE:  CLRF   x66
039F0:  CLRF   x67
039F2:  MOVF   x64,W
039F4:  MOVWF  x29
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
039F6:  MOVFF  366,864
039FA:  MOVFF  367,865
039FE:  MOVFF  368,866
03A02:  CLRF   x67
03A04:  MOVF   x64,W
03A06:  MOVWF  x2A
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03A08:  MOVLB  3
03A0A:  MOVF   x65,W
03A0C:  MOVLB  8
03A0E:  MOVWF  x2B
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
03A10:  MOVFF  369,82C
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
03A14:  MOVFF  36D,864
03A18:  CLRF   x65
03A1A:  CLRF   x66
03A1C:  CLRF   x67
03A1E:  MOVF   x64,W
03A20:  MOVWF  x2D
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03A22:  MOVFF  36C,864
03A26:  MOVFF  36D,865
03A2A:  CLRF   x66
03A2C:  CLRF   x67
03A2E:  MOVF   x64,W
03A30:  MOVWF  x2E
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03A32:  MOVFF  36B,864
03A36:  MOVFF  36C,865
03A3A:  MOVFF  36D,866
03A3E:  CLRF   x67
03A40:  MOVF   x64,W
03A42:  MOVWF  x2F
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
03A44:  MOVLB  3
03A46:  MOVF   x6A,W
03A48:  MOVLB  8
03A4A:  MOVWF  x30
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03A4C:  MOVFF  36E,831
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03A50:  MOVFF  372,864
03A54:  CLRF   x65
03A56:  CLRF   x66
03A58:  CLRF   x67
03A5A:  MOVF   x64,W
03A5C:  MOVWF  x32
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03A5E:  MOVFF  371,864
03A62:  MOVFF  372,865
03A66:  CLRF   x66
03A68:  CLRF   x67
03A6A:  MOVF   x64,W
03A6C:  MOVWF  x33
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
03A6E:  MOVFF  370,864
03A72:  MOVFF  371,865
03A76:  MOVFF  372,866
03A7A:  CLRF   x67
03A7C:  MOVF   x64,W
03A7E:  MOVWF  x34
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03A80:  MOVLB  3
03A82:  MOVF   x6F,W
03A84:  MOVLB  8
03A86:  MOVWF  x35
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
03A88:  MOVLW  00
03A8A:  MOVWF  x36
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
03A8C:  MOVLW  00
03A8E:  MOVWF  x37
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03A90:  MOVLW  00
03A92:  MOVWF  x38
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03A94:  MOVLB  3
03A96:  MOVF   x73,W
03A98:  MOVLB  8
03A9A:  MOVWF  x39
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03A9C:  MOVFF  377,864
03AA0:  CLRF   x65
03AA2:  CLRF   x66
03AA4:  CLRF   x67
03AA6:  MOVF   x64,W
03AA8:  MOVWF  x3A
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
03AAA:  MOVFF  376,864
03AAE:  MOVFF  377,865
03AB2:  CLRF   x66
03AB4:  CLRF   x67
03AB6:  MOVF   x64,W
03AB8:  MOVWF  x3B
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03ABA:  MOVFF  375,864
03ABE:  MOVFF  376,865
03AC2:  MOVFF  377,866
03AC6:  CLRF   x67
03AC8:  MOVF   x64,W
03ACA:  MOVWF  x3C
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03ACC:  MOVLB  3
03ACE:  MOVF   x74,W
03AD0:  MOVLB  8
03AD2:  MOVWF  x3D
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03AD4:  MOVFF  378,83E
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03AD8:  MOVFF  37C,864
03ADC:  CLRF   x65
03ADE:  CLRF   x66
03AE0:  CLRF   x67
03AE2:  MOVF   x64,W
03AE4:  MOVWF  x3F
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03AE6:  MOVFF  37B,864
03AEA:  MOVFF  37C,865
03AEE:  CLRF   x66
03AF0:  CLRF   x67
03AF2:  MOVF   x64,W
03AF4:  MOVWF  x40
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03AF6:  MOVFF  37A,864
03AFA:  MOVFF  37B,865
03AFE:  MOVFF  37C,866
03B02:  CLRF   x67
03B04:  MOVF   x64,W
03B06:  MOVWF  x41
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03B08:  MOVLB  3
03B0A:  MOVF   x79,W
03B0C:  MOVLB  8
03B0E:  MOVWF  x42
.................... 
....................     if (!is_connect(mis_fm)) {
03B10:  MOVFF  F1,866
03B14:  MOVFF  F0,865
03B18:  MOVFF  EF,864
03B1C:  MOVFF  EE,863
03B20:  MOVLB  0
03B22:  CALL   213E
03B26:  MOVF   01,F
03B28:  BTFSS  FD8.2
03B2A:  GOTO   3B3E
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03B2E:  MOVLW  3A
03B30:  MOVWF  FF6
03B32:  MOVLW  10
03B34:  MOVWF  FF7
03B36:  MOVLW  00
03B38:  MOVWF  FF8
03B3A:  CALL   1ADA
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03B3E:  MOVFF  F1,866
03B42:  MOVFF  F0,865
03B46:  MOVFF  EF,864
03B4A:  MOVFF  EE,863
03B4E:  MOVLB  8
03B50:  CLRF   x6A
03B52:  CLRF   x69
03B54:  CLRF   x68
03B56:  CLRF   x67
03B58:  MOVLB  0
03B5A:  CALL   3592
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03B5E:  MOVFF  F1,866
03B62:  MOVFF  F0,865
03B66:  MOVFF  EF,864
03B6A:  MOVFF  EE,863
03B6E:  MOVLB  8
03B70:  CLRF   x6A
03B72:  CLRF   x69
03B74:  CLRF   x68
03B76:  CLRF   x67
03B78:  MOVLW  08
03B7A:  MOVWF  x6C
03B7C:  MOVLW  23
03B7E:  MOVWF  x6B
03B80:  CLRF   x6E
03B82:  MOVLW  40
03B84:  MOVWF  x6D
03B86:  MOVLB  0
03B88:  CALL   320E
03B8C:  RETURN 0
....................     //fprintf(PC, "Write MISF Address Area Complete\r\n");
.................... 
.................... }
.................... 
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
073DE:  MOVLB  3
073E0:  MOVF   xBE,W
073E2:  MOVWF  FE9
073E4:  MOVF   xBF,W
073E6:  MOVWF  FEA
073E8:  MOVFF  FEF,3C0
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
073EC:  MOVLW  5C
073EE:  MOVWF  FF6
073F0:  MOVLW  10
073F2:  MOVWF  FF7
073F4:  MOVLW  00
073F6:  MOVWF  FF8
073F8:  MOVLB  0
073FA:  CALL   1ADA
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
073FE:  MOVLW  A2
07400:  MOVWF  FF6
07402:  MOVLW  10
07404:  MOVWF  FF7
07406:  MOVLW  00
07408:  MOVWF  FF8
0740A:  MOVLW  0C
0740C:  MOVLB  8
0740E:  MOVWF  x23
07410:  MOVLB  0
07412:  CALL   1B0A
07416:  MOVFF  3C0,4C5
0741A:  MOVLW  37
0741C:  MOVLB  4
0741E:  MOVWF  xC6
07420:  MOVLB  0
07422:  CALL   1CCC
07426:  MOVLW  B0
07428:  MOVWF  FF6
0742A:  MOVLW  10
0742C:  MOVWF  FF7
0742E:  MOVLW  00
07430:  MOVWF  FF8
07432:  MOVLW  04
07434:  MOVLB  8
07436:  MOVWF  x23
07438:  MOVLB  0
0743A:  CALL   1B0A
....................    switch(command_id)
0743E:  MOVLB  3
07440:  MOVF   xC0,W
07442:  XORLW  10
07444:  MOVLB  0
07446:  BTFSC  FD8.2
07448:  GOTO   74F0
0744C:  XORLW  01
0744E:  BTFSC  FD8.2
07450:  GOTO   7500
07454:  XORLW  03
07456:  BTFSC  FD8.2
07458:  GOTO   7510
0745C:  XORLW  13
0745E:  BTFSC  FD8.2
07460:  GOTO   7518
07464:  XORLW  12
07466:  BTFSC  FD8.2
07468:  GOTO   751C
0746C:  XORLW  93
0746E:  BTFSC  FD8.2
07470:  GOTO   753C
07474:  XORLW  01
07476:  BTFSC  FD8.2
07478:  GOTO   754C
0747C:  XORLW  03
0747E:  BTFSC  FD8.2
07480:  GOTO   755C
07484:  XORLW  01
07486:  BTFSC  FD8.2
07488:  GOTO   756C
0748C:  XORLW  07
0748E:  BTFSC  FD8.2
07490:  GOTO   757C
07494:  XORLW  01
07496:  BTFSC  FD8.2
07498:  GOTO   758C
0749C:  XORLW  03
0749E:  BTFSC  FD8.2
074A0:  GOTO   759C
074A4:  XORLW  01
074A6:  BTFSC  FD8.2
074A8:  GOTO   75AC
074AC:  XORLW  0F
074AE:  BTFSC  FD8.2
074B0:  GOTO   75BC
074B4:  XORLW  18
074B6:  BTFSC  FD8.2
074B8:  GOTO   75CC
074BC:  XORLW  01
074BE:  BTFSC  FD8.2
074C0:  GOTO   75DC
074C4:  XORLW  03
074C6:  BTFSC  FD8.2
074C8:  GOTO   75EC
074CC:  XORLW  01
074CE:  BTFSC  FD8.2
074D0:  GOTO   75FC
074D4:  XORLW  07
074D6:  BTFSC  FD8.2
074D8:  GOTO   760C
074DC:  XORLW  01
074DE:  BTFSC  FD8.2
074E0:  GOTO   761C
074E4:  XORLW  03
074E6:  BTFSC  FD8.2
074E8:  GOTO   762C
074EC:  GOTO   763C
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
074F0:  MOVFF  3BF,3C2
074F4:  MOVFF  3BE,3C1
074F8:  GOTO   4426
....................          //mode_iv_meas_adc();
....................          break;
074FC:  GOTO   764C
....................       case 0x11:
....................          mode_test_iv(content);
07500:  MOVFF  3BF,3C2
07504:  MOVFF  3BE,3C1
07508:  GOTO   4B36
....................          break;
0750C:  GOTO   764C
....................       case 0x12:
....................          test_adc();
07510:  GOTO   4BC6
....................          break;
07514:  GOTO   764C
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
07518:  GOTO   764C
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
0751C:  MOVLW  01
0751E:  MOVLB  3
07520:  ADDWF  xBE,W
07522:  MOVWF  FE9
07524:  MOVLW  00
07526:  ADDWFC xBF,W
07528:  MOVWF  FEA
0752A:  MOVFF  FEF,3C1
0752E:  MOVFF  3C1,3C2
07532:  MOVLB  0
07534:  GOTO   542A
....................          break;
07538:  GOTO   764C
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
0753C:  MOVFF  3BF,3C4
07540:  MOVFF  3BE,3C3
07544:  CALL   57E2
....................          break;
07548:  GOTO   764C
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
0754C:  MOVFF  3BF,3C2
07550:  MOVFF  3BE,3C1
07554:  GOTO   58AA
....................          break;
07558:  GOTO   764C
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
0755C:  MOVFF  3BF,3C2
07560:  MOVFF  3BE,3C1
07564:  GOTO   5A44
....................          break;
07568:  GOTO   764C
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
0756C:  MOVFF  3BF,3C2
07570:  MOVFF  3BE,3C1
07574:  GOTO   5BDA
....................          break;
07578:  GOTO   764C
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
0757C:  MOVFF  3BF,3C2
07580:  MOVFF  3BE,3C1
07584:  GOTO   5D50
....................          break;
07588:  GOTO   764C
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
0758C:  MOVFF  3BF,3C2
07590:  MOVFF  3BE,3C1
07594:  GOTO   618A
....................          break;
07598:  GOTO   764C
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
0759C:  MOVFF  3BF,3C2
075A0:  MOVFF  3BE,3C1
075A4:  GOTO   6448
....................          break;
075A8:  GOTO   764C
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
075AC:  MOVFF  3BF,3C2
075B0:  MOVFF  3BE,3C1
075B4:  GOTO   690C
....................          break;
075B8:  GOTO   764C
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
075BC:  MOVFF  3BF,3C2
075C0:  MOVFF  3BE,3C1
075C4:  GOTO   6B32
....................          break;
075C8:  GOTO   764C
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
075CC:  MOVFF  3BF,3C2
075D0:  MOVFF  3BE,3C1
075D4:  GOTO   6B8C
....................          break;
075D8:  GOTO   764C
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
075DC:  MOVFF  3BF,3C2
075E0:  MOVFF  3BE,3C1
075E4:  GOTO   6C5C
....................          break;
075E8:  GOTO   764C
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
075EC:  MOVFF  3BF,3C2
075F0:  MOVFF  3BE,3C1
075F4:  GOTO   6CCE
....................          break;
075F8:  GOTO   764C
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
075FC:  MOVFF  3BF,3C2
07600:  MOVFF  3BE,3C1
07604:  CALL   6D3A
....................          break;
07608:  GOTO   764C
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
0760C:  MOVFF  3BF,3C2
07610:  MOVFF  3BE,3C1
07614:  GOTO   6EEE
....................          break;
07618:  GOTO   764C
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
0761C:  MOVFF  3BF,3C2
07620:  MOVFF  3BE,3C1
07624:  GOTO   7314
....................          break;
07628:  GOTO   764C
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
0762C:  MOVFF  3BF,3C2
07630:  MOVFF  3BE,3C1
07634:  CALL   6D3A
....................          break;
07638:  GOTO   764C
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0763C:  MOVLW  B6
0763E:  MOVWF  FF6
07640:  MOVLW  10
07642:  MOVWF  FF7
07644:  MOVLW  00
07646:  MOVWF  FF8
07648:  CALL   1ADA
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0764C:  MOVLW  CE
0764E:  MOVWF  FF6
07650:  MOVLW  10
07652:  MOVWF  FF7
07654:  MOVLW  00
07656:  MOVWF  FF8
07658:  CALL   1ADA
0765C:  GOTO   76C2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
096B2:  MOVLW  14
096B4:  MOVWF  FF6
096B6:  MOVLW  11
096B8:  MOVWF  FF7
096BA:  MOVLW  00
096BC:  MOVWF  FF8
096BE:  CALL   1ADA
....................    
....................    switch(command->frame_id)
096C2:  MOVLB  3
096C4:  MOVF   xB8,W
096C6:  MOVWF  FE9
096C8:  MOVF   xB9,W
096CA:  MOVWF  FEA
096CC:  MOVF   FEF,W
096CE:  XORLW  00
096D0:  MOVLB  0
096D2:  BTFSC  FD8.2
096D4:  GOTO   96EC
096D8:  XORLW  01
096DA:  BTFSC  FD8.2
096DC:  GOTO   96FC
096E0:  XORLW  03
096E2:  BTFSC  FD8.2
096E4:  GOTO   971C
096E8:  GOTO   972C
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
096EC:  MOVFF  3B9,3BB
096F0:  MOVFF  3B8,3BA
096F4:  GOTO   7676
....................          break;
096F8:  GOTO   972C
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
096FC:  MOVFF  3B9,3BB
09700:  MOVFF  3B8,3BA
09704:  GOTO   76F8
09708:  MOVF   01,F
0970A:  BTFSC  FD8.2
0970C:  GOTO   9718
....................             return TRUE; // if status is finished, return TRUE
09710:  MOVLW  01
09712:  MOVWF  01
09714:  GOTO   9730
....................          }        
....................          break;
09718:  GOTO   972C
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0971C:  MOVFF  3B9,3BB
09720:  MOVFF  3B8,3BA
09724:  GOTO   94A6
....................          break;
09728:  GOTO   972C
....................    }
....................    return FALSE;
0972C:  MOVLW  00
0972E:  MOVWF  01
09730:  GOTO   A024 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
07676:  MOVLW  2C
07678:  MOVWF  FF6
0767A:  MOVLW  11
0767C:  MOVWF  FF7
0767E:  MOVLW  00
07680:  MOVWF  FF8
07682:  CALL   1ADA
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
07686:  MOVLW  42
07688:  MOVWF  FF6
0768A:  MOVLW  11
0768C:  MOVWF  FF7
0768E:  MOVLW  00
07690:  MOVWF  FF8
07692:  CALL   1ADA
....................    transmit_ack();
07696:  CALL   4412
.................... 
....................    status[0] = EXECUTING_MISSION;
0769A:  MOVLW  02
0769C:  MOVWF  48
....................    execute_mission(command->content);
0769E:  MOVLW  03
076A0:  MOVLB  3
076A2:  ADDWF  xBA,W
076A4:  MOVWF  01
076A6:  MOVLW  00
076A8:  ADDWFC xBB,W
076AA:  MOVWF  03
076AC:  MOVF   01,W
076AE:  MOVWF  xBC
076B0:  MOVFF  03,3BD
076B4:  MOVFF  3BD,3BF
076B8:  MOVFF  3BC,3BE
076BC:  MOVLB  0
076BE:  GOTO   73DE
....................    if (is_empty_smf_data())
076C2:  CALL   7660
076C6:  MOVF   01,F
076C8:  BTFSC  FD8.2
076CA:  GOTO   76D6
....................       status[0] = FINISHED;
076CE:  MOVLW  06
076D0:  MOVWF  48
076D2:  GOTO   76DA
....................    else
....................       status[0] = SMF_USE_REQ;
076D6:  MOVLW  04
076D8:  MOVWF  48
076DA:  GOTO   96F8 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
076F8:  MOVLW  5C
076FA:  MOVWF  FF6
076FC:  MOVLW  11
076FE:  MOVWF  FF7
07700:  MOVLW  00
07702:  MOVWF  FF8
07704:  CALL   1ADA
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
07708:  MOVLW  70
0770A:  MOVWF  FF6
0770C:  MOVLW  11
0770E:  MOVWF  FF7
07710:  MOVLW  00
07712:  MOVWF  FF8
07714:  CALL   1ADA
....................    transmit_status();
07718:  GOTO   76DE
....................    if (status[0] == FINISHED)
0771C:  MOVF   48,W
0771E:  SUBLW  06
07720:  BTFSS  FD8.2
07722:  GOTO   7742
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
07726:  MOVLW  8E
07728:  MOVWF  FF6
0772A:  MOVLW  11
0772C:  MOVWF  FF7
0772E:  MOVLW  00
07730:  MOVWF  FF8
07732:  CALL   1ADA
....................       return TRUE;
07736:  MOVLW  01
07738:  MOVWF  01
0773A:  GOTO   774A
....................    }
0773E:  GOTO   774A
....................    else{
....................       return FALSE;
07742:  MOVLW  00
07744:  MOVWF  01
07746:  GOTO   774A
....................    }
0774A:  GOTO   9708 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................    fprintf(PC, "\t-> SMF available check\r\n");
*
094A6:  MOVLW  AA
094A8:  MOVWF  FF6
094AA:  MOVLW  11
094AC:  MOVWF  FF7
094AE:  MOVLW  00
094B0:  MOVWF  FF8
094B2:  CALL   1ADA
....................    fprintf(PC, "\t   Transmit Acknowledgement\r\n");
094B6:  MOVLW  C4
094B8:  MOVWF  FF6
094BA:  MOVLW  11
094BC:  MOVWF  FF7
094BE:  MOVLW  00
094C0:  MOVWF  FF8
094C2:  CALL   1ADA
....................    transmit_ack();
094C6:  CALL   4412
....................    
....................    if (command->content[0] == ALLOW) {
094CA:  MOVLW  03
094CC:  MOVLB  3
094CE:  ADDWF  xBA,W
094D0:  MOVWF  FE9
094D2:  MOVLW  00
094D4:  ADDWFC xBB,W
094D6:  MOVWF  FEA
094D8:  DECFSZ FEF,W
094DA:  BRA    94E0
094DC:  BRA    94E6
094DE:  MOVLB  0
094E0:  MOVLB  0
094E2:  GOTO   969E
094E6:  MOVLB  0
....................       fprintf(PC, "\t\t-> allowed\r\n");
094E8:  MOVLW  E4
094EA:  MOVWF  FF6
094EC:  MOVLW  11
094EE:  MOVWF  FF7
094F0:  MOVLW  00
094F2:  MOVWF  FF8
094F4:  CALL   1ADA
....................       status[0] = COPYING;
094F8:  MOVLW  05
094FA:  MOVWF  48
.................... 
....................       // キューが空になるまでループ処理
....................       int8 processed_count = 0;
094FC:  MOVLB  3
094FE:  CLRF   xBC
09500:  MOVLB  0
....................       while (!is_empty_smf_data()) {
09502:  CALL   7660
09506:  MOVF   01,F
09508:  BTFSS  FD8.2
0950A:  GOTO   9656
....................          fprintf(PC, "\t\t-> Processing SMF data [%d]\r\n", processed_count);
0950E:  MOVLW  F4
09510:  MOVWF  FF6
09512:  MOVLW  11
09514:  MOVWF  FF7
09516:  MOVLW  00
09518:  MOVWF  FF8
0951A:  MOVLW  1A
0951C:  MOVLB  8
0951E:  MOVWF  x23
09520:  MOVLB  0
09522:  CALL   1B0A
09526:  MOVFF  3BC,4CC
0952A:  MOVLW  18
0952C:  MOVLB  4
0952E:  MOVWF  xCD
09530:  MOVLB  0
09532:  CALL   774E
09536:  MOVLW  10
09538:  MOVWF  FF6
0953A:  MOVLW  12
0953C:  MOVWF  FF7
0953E:  MOVLW  00
09540:  MOVWF  FF8
09542:  MOVLW  03
09544:  MOVLB  8
09546:  MOVWF  x23
09548:  MOVLB  0
0954A:  CALL   1B0A
....................          
....................          SmfDataStruct *smf_data = dequeue_smf_data();
0954E:  GOTO   785E
09552:  MOVFF  02,3BE
09556:  MOVFF  01,3BD
....................          if (smf_data != 0x00) {
0955A:  MOVLB  3
0955C:  MOVF   xBD,F
0955E:  BTFSC  FD8.2
09560:  BRA    9568
09562:  MOVLB  0
09564:  GOTO   957A
09568:  MOVLB  0
0956A:  MOVLB  3
0956C:  MOVF   xBE,F
0956E:  BTFSS  FD8.2
09570:  BRA    9578
09572:  MOVLB  0
09574:  GOTO   963E
09578:  MOVLB  0
....................             int8 func_type = smf_data->func_type;
0957A:  MOVLB  3
0957C:  MOVF   xBD,W
0957E:  MOVWF  FE9
09580:  MOVF   xBE,W
09582:  MOVWF  FEA
09584:  MOVFF  FEF,3BF
09588:  MOVLB  0
....................             if (func_type == 0) {  // SMF_WRITE
0958A:  MOVLB  3
0958C:  MOVF   xBF,F
0958E:  BTFSC  FD8.2
09590:  BRA    9598
09592:  MOVLB  0
09594:  GOTO   95B6
09598:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF WRITE (single)\r\n");
0959A:  MOVLW  14
0959C:  MOVWF  FF6
0959E:  MOVLW  12
095A0:  MOVWF  FF7
095A2:  MOVLW  00
095A4:  MOVWF  FF8
095A6:  CALL   1ADA
....................                smf_write(smf_data);
095AA:  MOVFF  3BE,3C1
095AE:  MOVFF  3BD,3C0
095B2:  GOTO   813A
....................             }
....................             if (func_type == 1) {  // SMF_READ
095B6:  MOVLB  3
095B8:  DECFSZ xBF,W
095BA:  BRA    95C0
095BC:  BRA    95C6
095BE:  MOVLB  0
095C0:  MOVLB  0
095C2:  GOTO   95E4
095C6:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF READ (single)\r\n");
095C8:  MOVLW  38
095CA:  MOVWF  FF6
095CC:  MOVLW  12
095CE:  MOVWF  FF7
095D0:  MOVLW  00
095D2:  MOVWF  FF8
095D4:  CALL   1ADA
....................                smf_read(smf_data);
095D8:  MOVFF  3BE,3C1
095DC:  MOVFF  3BD,3C0
095E0:  GOTO   8AD2
....................             }
....................             if (func_type == 2) {  // SMF_ERASE
095E4:  MOVLB  3
095E6:  MOVF   xBF,W
095E8:  SUBLW  02
095EA:  BTFSC  FD8.2
095EC:  BRA    95F4
095EE:  MOVLB  0
095F0:  GOTO   9612
095F4:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF ERASE (single)\r\n");
095F6:  MOVLW  5C
095F8:  MOVWF  FF6
095FA:  MOVLW  12
095FC:  MOVWF  FF7
095FE:  MOVLW  00
09600:  MOVWF  FF8
09602:  CALL   1ADA
....................                smf_erase(smf_data);
09606:  MOVFF  3BE,3C1
0960A:  MOVFF  3BD,3C0
0960E:  GOTO   8E74
....................             }
....................             if (func_type > 2) {
09612:  MOVLB  3
09614:  MOVF   xBF,W
09616:  SUBLW  02
09618:  BTFSS  FD8.0
0961A:  BRA    9622
0961C:  MOVLB  0
0961E:  GOTO   9634
09622:  MOVLB  0
....................                fprintf(PC, "\t\t-> Unknown SMF function type\r\n");
09624:  MOVLW  80
09626:  MOVWF  FF6
09628:  MOVLW  12
0962A:  MOVWF  FF7
0962C:  MOVLW  00
0962E:  MOVWF  FF8
09630:  CALL   1ADA
....................             }
....................             processed_count++;
09634:  MOVLB  3
09636:  INCF   xBC,F
09638:  MOVLB  0
....................          } else {
0963A:  GOTO   9652
....................             fprintf(PC, "\t\t-> Error: Failed to dequeue SMF data\r\n");
0963E:  MOVLW  A2
09640:  MOVWF  FF6
09642:  MOVLW  12
09644:  MOVWF  FF7
09646:  MOVLW  00
09648:  MOVWF  FF8
0964A:  CALL   1ADA
....................             break;
0964E:  GOTO   9656
....................          }
09652:  GOTO   9502
....................       }
....................       
....................       fprintf(PC, "\t\t-> Completed processing %d SMF operations\r\n", processed_count);
09656:  MOVLW  CC
09658:  MOVWF  FF6
0965A:  MOVLW  12
0965C:  MOVWF  FF7
0965E:  MOVLW  00
09660:  MOVWF  FF8
09662:  MOVLW  1A
09664:  MOVLB  8
09666:  MOVWF  x23
09668:  MOVLB  0
0966A:  CALL   1B0A
0966E:  MOVFF  3BC,4CC
09672:  MOVLW  18
09674:  MOVLB  4
09676:  MOVWF  xCD
09678:  MOVLB  0
0967A:  CALL   774E
0967E:  MOVLW  E8
09680:  MOVWF  FF6
09682:  MOVLW  12
09684:  MOVWF  FF7
09686:  MOVLW  00
09688:  MOVWF  FF8
0968A:  MOVLW  11
0968C:  MOVLB  8
0968E:  MOVWF  x23
09690:  MOVLB  0
09692:  CALL   1B0A
....................       status[0] = FINISHED;
09696:  MOVLW  06
09698:  MOVWF  48
....................    } else {
0969A:  GOTO   96AE
....................       fprintf(PC, "\t\t-> denied\r\n");
0969E:  MOVLW  FA
096A0:  MOVWF  FF6
096A2:  MOVLW  12
096A4:  MOVWF  FF7
096A6:  MOVLW  00
096A8:  MOVWF  FF8
096AA:  CALL   1ADA
....................    }
096AE:  GOTO   9728 (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
04426:  MOVLW  08
04428:  MOVWF  FF6
0442A:  MOVLW  13
0442C:  MOVWF  FF7
0442E:  MOVLW  00
04430:  MOVWF  FF8
04432:  CALL   1ADA
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
04436:  MOVLB  3
04438:  MOVF   xC1,W
0443A:  MOVWF  FE9
0443C:  MOVF   xC2,W
0443E:  MOVWF  FEA
04440:  MOVFF  FEF,3C3
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
04444:  MOVLW  01
04446:  ADDWF  xC1,W
04448:  MOVWF  FE9
0444A:  MOVLW  00
0444C:  ADDWFC xC2,W
0444E:  MOVWF  FEA
04450:  MOVF   FEF,W
04452:  CLRF   xCD
04454:  CLRF   xCC
04456:  CLRF   xCB
04458:  MOVWF  xCA
0445A:  MOVFF  3CA,3CD
0445E:  CLRF   xCA
04460:  CLRF   xCB
04462:  CLRF   xCC
04464:  MOVLW  02
04466:  ADDWF  xC1,W
04468:  MOVWF  FE9
0446A:  MOVLW  00
0446C:  ADDWFC xC2,W
0446E:  MOVWF  FEA
04470:  MOVF   FEF,W
04472:  CLRF   xD2
04474:  CLRF   xD1
04476:  CLRF   xD0
04478:  MOVWF  xCF
0447A:  MOVFF  3D0,03
0447E:  MOVFF  3CF,02
04482:  CLRF   00
04484:  CLRF   01
04486:  MOVF   00,W
04488:  IORWF  xCA,F
0448A:  MOVF   01,W
0448C:  IORWF  xCB,F
0448E:  MOVF   02,W
04490:  IORWF  xCC,F
04492:  MOVF   03,W
04494:  IORWF  xCD,F
04496:  MOVLW  03
04498:  ADDWF  xC1,W
0449A:  MOVWF  FE9
0449C:  MOVLW  00
0449E:  ADDWFC xC2,W
044A0:  MOVWF  FEA
044A2:  MOVF   FEF,W
044A4:  CLRF   xD2
044A6:  CLRF   xD1
044A8:  CLRF   xD0
044AA:  MOVWF  xCF
044AC:  MOVFF  3D1,03
044B0:  MOVFF  3D0,02
044B4:  MOVFF  3CF,01
044B8:  CLRF   00
044BA:  MOVF   00,W
044BC:  IORWF  xCA,F
044BE:  MOVF   01,W
044C0:  IORWF  xCB,F
044C2:  MOVF   02,W
044C4:  IORWF  xCC,F
044C6:  MOVF   03,W
044C8:  IORWF  xCD,F
044CA:  MOVLW  04
044CC:  ADDWF  xC1,W
044CE:  MOVWF  FE9
044D0:  MOVLW  00
044D2:  ADDWFC xC2,W
044D4:  MOVWF  FEA
044D6:  MOVF   FEF,W
044D8:  MOVWF  00
044DA:  CLRF   01
044DC:  CLRF   02
044DE:  CLRF   03
044E0:  MOVF   00,W
044E2:  IORWF  xCA,W
044E4:  MOVWF  xC4
044E6:  MOVF   01,W
044E8:  IORWF  xCB,W
044EA:  MOVWF  xC5
044EC:  MOVF   02,W
044EE:  IORWF  xCC,W
044F0:  MOVWF  xC6
044F2:  MOVF   03,W
044F4:  IORWF  xCD,W
044F6:  MOVWF  xC7
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
044F8:  MOVLW  05
044FA:  ADDWF  xC1,W
044FC:  MOVWF  FE9
044FE:  MOVLW  00
04500:  ADDWFC xC2,W
04502:  MOVWF  FEA
04504:  MOVF   FEF,W
04506:  CLRF   xCB
04508:  MOVWF  xCA
0450A:  MOVFF  3CA,3CB
0450E:  CLRF   xCA
04510:  MOVLW  06
04512:  ADDWF  xC1,W
04514:  MOVWF  FE9
04516:  MOVLW  00
04518:  ADDWFC xC2,W
0451A:  MOVWF  FEA
0451C:  MOVF   FEF,W
0451E:  CLRF   03
04520:  IORWF  xCA,W
04522:  MOVWF  xC8
04524:  MOVF   03,W
04526:  IORWF  xCB,W
04528:  MOVWF  xC9
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
0452A:  MOVLW  1C
0452C:  MOVWF  FF6
0452E:  MOVLW  13
04530:  MOVWF  FF7
04532:  MOVLW  00
04534:  MOVWF  FF8
04536:  MOVLW  0C
04538:  MOVLB  8
0453A:  MOVWF  x23
0453C:  MOVLB  0
0453E:  CALL   1B0A
04542:  MOVFF  3C3,4C5
04546:  MOVLW  37
04548:  MOVLB  4
0454A:  MOVWF  xC6
0454C:  MOVLB  0
0454E:  CALL   1CCC
04552:  MOVLW  0D
04554:  MOVLB  8
04556:  MOVWF  x66
04558:  MOVLB  0
0455A:  CALL   1A88
0455E:  MOVLW  0A
04560:  MOVLB  8
04562:  MOVWF  x66
04564:  MOVLB  0
04566:  CALL   1A88
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
0456A:  MOVLW  30
0456C:  MOVWF  FF6
0456E:  MOVLW  13
04570:  MOVWF  FF7
04572:  MOVLW  00
04574:  MOVWF  FF8
04576:  MOVLW  0E
04578:  MOVLB  8
0457A:  MOVWF  x23
0457C:  MOVLB  0
0457E:  CALL   1B0A
04582:  MOVFF  3C7,4C5
04586:  MOVLW  37
04588:  MOVLB  4
0458A:  MOVWF  xC6
0458C:  MOVLB  0
0458E:  CALL   1CCC
04592:  MOVFF  3C6,4C5
04596:  MOVLW  37
04598:  MOVLB  4
0459A:  MOVWF  xC6
0459C:  MOVLB  0
0459E:  CALL   1CCC
045A2:  MOVFF  3C5,4C5
045A6:  MOVLW  37
045A8:  MOVLB  4
045AA:  MOVWF  xC6
045AC:  MOVLB  0
045AE:  CALL   1CCC
045B2:  MOVFF  3C4,4C5
045B6:  MOVLW  37
045B8:  MOVLB  4
045BA:  MOVWF  xC6
045BC:  MOVLB  0
045BE:  CALL   1CCC
045C2:  MOVLW  0D
045C4:  MOVLB  8
045C6:  MOVWF  x66
045C8:  MOVLB  0
045CA:  CALL   1A88
045CE:  MOVLW  0A
045D0:  MOVLB  8
045D2:  MOVWF  x66
045D4:  MOVLB  0
045D6:  CALL   1A88
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
045DA:  MOVLW  46
045DC:  MOVWF  FF6
045DE:  MOVLW  13
045E0:  MOVWF  FF7
045E2:  MOVLW  00
045E4:  MOVWF  FF8
045E6:  MOVLW  0E
045E8:  MOVLB  8
045EA:  MOVWF  x23
045EC:  MOVLB  0
045EE:  CALL   1B0A
045F2:  MOVFF  3C9,4C5
045F6:  MOVLW  37
045F8:  MOVLB  4
045FA:  MOVWF  xC6
045FC:  MOVLB  0
045FE:  CALL   1CCC
04602:  MOVFF  3C8,4C5
04606:  MOVLW  37
04608:  MOVLB  4
0460A:  MOVWF  xC6
0460C:  MOVLB  0
0460E:  CALL   1CCC
04612:  MOVLW  0D
04614:  MOVLB  8
04616:  MOVWF  x66
04618:  MOVLB  0
0461A:  CALL   1A88
0461E:  MOVLW  0A
04620:  MOVLB  8
04622:  MOVWF  x66
04624:  MOVLB  0
04626:  CALL   1A88
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
0462A:  MOVFF  3C3,4C8
0462E:  MOVLW  01
04630:  MOVLB  4
04632:  MOVWF  xC9
04634:  MOVLB  0
04636:  CALL   3B8E
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0463A:  MOVFF  3C3,4C8
0463E:  MOVLW  02
04640:  MOVLB  4
04642:  MOVWF  xC9
04644:  MOVLB  0
04646:  CALL   3B8E
....................    fprintf(PC, "End MODE DUMMY\r\n");
0464A:  MOVLW  5C
0464C:  MOVWF  FF6
0464E:  MOVLW  13
04650:  MOVWF  FF7
04652:  MOVLW  00
04654:  MOVWF  FF8
04656:  CALL   1ADA
0465A:  GOTO   74FC (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
04B36:  MOVLW  01
04B38:  MOVLB  3
04B3A:  ADDWF  xC1,W
04B3C:  MOVWF  FE9
04B3E:  MOVLW  00
04B40:  ADDWFC xC2,W
04B42:  MOVWF  FEA
04B44:  MOVFF  FEF,3C3
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
04B48:  MOVLW  6E
04B4A:  MOVWF  FF6
04B4C:  MOVLW  13
04B4E:  MOVWF  FF7
04B50:  MOVLW  00
04B52:  MOVWF  FF8
04B54:  MOVLB  0
04B56:  CALL   1ADA
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04B5A:  MOVLW  84
04B5C:  MOVWF  FF6
04B5E:  MOVLW  13
04B60:  MOVWF  FF7
04B62:  MOVLW  00
04B64:  MOVWF  FF8
04B66:  MOVLW  0E
04B68:  MOVLB  8
04B6A:  MOVWF  x23
04B6C:  MOVLB  0
04B6E:  CALL   1B0A
04B72:  MOVFF  3C3,823
04B76:  MOVLW  1B
04B78:  MOVLB  8
04B7A:  MOVWF  x24
04B7C:  MOVLB  0
04B7E:  CALL   46A6
04B82:  MOVLW  0D
04B84:  MOVLB  8
04B86:  MOVWF  x66
04B88:  MOVLB  0
04B8A:  CALL   1A88
04B8E:  MOVLW  0A
04B90:  MOVLB  8
04B92:  MOVWF  x66
04B94:  MOVLB  0
04B96:  CALL   1A88
....................    output_high(CONNECT_CIGS1);
04B9A:  BCF    F94.0
04B9C:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
04B9E:  BCF    F94.7
04BA0:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
04BA2:  MOVFF  3C1,3C6
04BA6:  GOTO   4A0E
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
04BAA:  MOVLW  98
04BAC:  MOVWF  FF6
04BAE:  MOVLW  13
04BB0:  MOVWF  FF7
04BB2:  MOVLW  00
04BB4:  MOVWF  FF8
04BB6:  CALL   1ADA
....................    output_low(CONNECT_CIGS1);
04BBA:  BCF    F94.0
04BBC:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
04BBE:  BCF    F94.7
04BC0:  BSF    F8B.7
04BC2:  GOTO   750C (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
0542A:  MOVLW  50
0542C:  MOVLB  3
0542E:  MOVWF  xCD
05430:  MOVLB  0
05432:  GOTO   4D74
....................    SmfDataStruct data;
....................    //data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
05436:  MOVLB  3
05438:  MOVF   x74,W
0543A:  MOVWF  xCD
0543C:  MOVF   x75,W
0543E:  MOVWF  xCE
05440:  MOVLW  16
05442:  ADDWF  x76,W
05444:  MOVWF  xCF
05446:  MOVLW  00
05448:  ADDWFC x77,W
0544A:  MOVWF  xD0
0544C:  MOVF   x79,W
0544E:  SUBWF  xCD,W
05450:  MOVWF  xC5
05452:  MOVF   x7A,W
05454:  SUBWFB xCE,W
05456:  MOVWF  xC6
05458:  MOVF   x7B,W
0545A:  SUBWFB xCF,W
0545C:  MOVWF  xC7
0545E:  MOVF   x7C,W
05460:  SUBWFB xD0,W
05462:  MOVWF  xC8
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
05464:  MOVFF  37C,3CC
05468:  MOVFF  37B,3CB
0546C:  MOVFF  37A,3CA
05470:  MOVFF  379,3C9
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
05474:  MOVLW  03
05476:  MOVWF  xCE
05478:  MOVLW  C3
0547A:  MOVWF  xCD
0547C:  MOVLB  0
0547E:  GOTO   52BE
05482:  GOTO   7538 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
057E2:  MOVLW  F0
057E4:  MOVWF  FF6
057E6:  MOVLW  13
057E8:  MOVWF  FF7
057EA:  MOVLW  00
057EC:  MOVWF  FF8
057EE:  CALL   1ADA
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
057F2:  MOVLB  3
057F4:  MOVF   xC3,W
057F6:  MOVWF  FE9
057F8:  MOVF   xC4,W
057FA:  MOVWF  FEA
057FC:  MOVFF  FEF,3C5
....................    piclog_make(cmd, 0x00); // Log the command execution
05800:  MOVFF  3C5,4C8
05804:  MOVLB  4
05806:  CLRF   xC9
05808:  MOVLB  0
0580A:  CALL   3B8E
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
0580E:  MOVLB  3
05810:  CLRF   xC9
05812:  CLRF   xC8
05814:  CLRF   xC7
05816:  CLRF   xC6
05818:  MOVLB  0
0581A:  MOVLB  3
0581C:  MOVF   xC9,F
0581E:  BTFSC  FD8.2
05820:  BRA    5828
05822:  MOVLB  0
05824:  GOTO   5888
05828:  MOVLB  0
0582A:  MOVLB  3
0582C:  MOVF   xC8,W
0582E:  SUBLW  F4
05830:  BTFSC  FD8.0
05832:  BRA    583A
05834:  MOVLB  0
05836:  GOTO   5888
0583A:  MOVLB  0
0583C:  BTFSS  FD8.2
0583E:  GOTO   5854
05842:  MOVLB  3
05844:  MOVF   xC7,W
05846:  SUBLW  23
05848:  BTFSC  FD8.0
0584A:  BRA    5852
0584C:  MOVLB  0
0584E:  GOTO   5888
05852:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05854:  MOVFF  F1,40A
05858:  MOVFF  F0,409
0585C:  MOVFF  EF,408
05860:  MOVFF  EE,407
05864:  MOVFF  3C9,40E
05868:  MOVFF  3C8,40D
0586C:  MOVFF  3C7,40C
05870:  MOVFF  3C6,40B
05874:  CALL   5486
05878:  MOVLW  01
0587A:  MOVLB  3
0587C:  ADDWF  xC8,F
0587E:  MOVLW  00
05880:  ADDWFC xC9,F
05882:  MOVLB  0
05884:  GOTO   581A
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05888:  MOVFF  3C5,4C8
0588C:  MOVLW  02
0588E:  MOVLB  4
05890:  MOVWF  xC9
05892:  MOVLB  0
05894:  CALL   3B8E
....................    fprintf(PC, "End Flash Erase All\r\n");
05898:  MOVLW  08
0589A:  MOVWF  FF6
0589C:  MOVLW  14
0589E:  MOVWF  FF7
058A0:  MOVLW  00
058A2:  MOVWF  FF8
058A4:  CALL   1ADA
058A8:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
058AA:  MOVLW  1E
058AC:  MOVWF  FF6
058AE:  MOVLW  14
058B0:  MOVWF  FF7
058B2:  MOVLW  00
058B4:  MOVWF  FF8
058B6:  CALL   1ADA
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
058BA:  MOVLB  3
058BC:  MOVF   xC1,W
058BE:  MOVWF  FE9
058C0:  MOVF   xC2,W
058C2:  MOVWF  FEA
058C4:  MOVFF  FEF,3C3
058C8:  MOVLW  01
058CA:  ADDWF  xC1,W
058CC:  MOVWF  FE9
058CE:  MOVLW  00
058D0:  ADDWFC xC2,W
058D2:  MOVWF  FEA
058D4:  MOVF   FEF,W
058D6:  CLRF   xCB
058D8:  CLRF   xCA
058DA:  CLRF   xC9
058DC:  MOVWF  xC8
058DE:  MOVFF  3C8,3CB
058E2:  CLRF   xC8
058E4:  CLRF   xC9
058E6:  CLRF   xCA
058E8:  MOVLW  02
058EA:  ADDWF  xC1,W
058EC:  MOVWF  FE9
058EE:  MOVLW  00
058F0:  ADDWFC xC2,W
058F2:  MOVWF  FEA
058F4:  MOVF   FEF,W
058F6:  CLRF   xD0
058F8:  CLRF   xCF
058FA:  CLRF   xCE
058FC:  MOVWF  xCD
058FE:  MOVFF  3CE,03
05902:  MOVFF  3CD,02
05906:  CLRF   00
05908:  CLRF   01
0590A:  MOVF   00,W
0590C:  IORWF  xC8,F
0590E:  MOVF   01,W
05910:  IORWF  xC9,F
05912:  MOVF   02,W
05914:  IORWF  xCA,F
05916:  MOVF   03,W
05918:  IORWF  xCB,F
0591A:  MOVLW  03
0591C:  ADDWF  xC1,W
0591E:  MOVWF  FE9
05920:  MOVLW  00
05922:  ADDWFC xC2,W
05924:  MOVWF  FEA
05926:  MOVF   FEF,W
05928:  CLRF   xD0
0592A:  CLRF   xCF
0592C:  CLRF   xCE
0592E:  MOVWF  xCD
05930:  MOVFF  3CF,03
05934:  MOVFF  3CE,02
05938:  MOVFF  3CD,01
0593C:  CLRF   00
0593E:  MOVF   00,W
05940:  IORWF  xC8,F
05942:  MOVF   01,W
05944:  IORWF  xC9,F
05946:  MOVF   02,W
05948:  IORWF  xCA,F
0594A:  MOVF   03,W
0594C:  IORWF  xCB,F
0594E:  MOVLW  04
05950:  ADDWF  xC1,W
05952:  MOVWF  FE9
05954:  MOVLW  00
05956:  ADDWFC xC2,W
05958:  MOVWF  FEA
0595A:  MOVF   FEF,W
0595C:  MOVWF  00
0595E:  CLRF   01
05960:  CLRF   02
05962:  CLRF   03
05964:  MOVF   00,W
05966:  IORWF  xC8,W
05968:  MOVWF  xC4
0596A:  MOVF   01,W
0596C:  IORWF  xC9,W
0596E:  MOVWF  xC5
05970:  MOVF   02,W
05972:  IORWF  xCA,W
05974:  MOVWF  xC6
05976:  MOVF   03,W
05978:  IORWF  xCB,W
0597A:  MOVWF  xC7
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
0597C:  MOVLW  3C
0597E:  MOVWF  FF6
05980:  MOVLW  14
05982:  MOVWF  FF7
05984:  MOVLW  00
05986:  MOVWF  FF8
05988:  MOVLW  13
0598A:  MOVLB  8
0598C:  MOVWF  x23
0598E:  MOVLB  0
05990:  CALL   1B0A
05994:  MOVFF  3C7,4C5
05998:  MOVLW  37
0599A:  MOVLB  4
0599C:  MOVWF  xC6
0599E:  MOVLB  0
059A0:  CALL   1CCC
059A4:  MOVFF  3C6,4C5
059A8:  MOVLW  37
059AA:  MOVLB  4
059AC:  MOVWF  xC6
059AE:  MOVLB  0
059B0:  CALL   1CCC
059B4:  MOVFF  3C5,4C5
059B8:  MOVLW  37
059BA:  MOVLB  4
059BC:  MOVWF  xC6
059BE:  MOVLB  0
059C0:  CALL   1CCC
059C4:  MOVFF  3C4,4C5
059C8:  MOVLW  37
059CA:  MOVLB  4
059CC:  MOVWF  xC6
059CE:  MOVLB  0
059D0:  CALL   1CCC
059D4:  MOVLW  0D
059D6:  MOVLB  8
059D8:  MOVWF  x66
059DA:  MOVLB  0
059DC:  CALL   1A88
059E0:  MOVLW  0A
059E2:  MOVLB  8
059E4:  MOVWF  x66
059E6:  MOVLB  0
059E8:  CALL   1A88
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
059EC:  MOVFF  3C3,4C8
059F0:  MOVLW  01
059F2:  MOVLB  4
059F4:  MOVWF  xC9
059F6:  MOVLB  0
059F8:  CALL   3B8E
....................    
....................    sector_erase(mis_fm, sector_address);
059FC:  MOVFF  F1,40A
05A00:  MOVFF  F0,409
05A04:  MOVFF  EF,408
05A08:  MOVFF  EE,407
05A0C:  MOVFF  3C7,40E
05A10:  MOVFF  3C6,40D
05A14:  MOVFF  3C5,40C
05A18:  MOVFF  3C4,40B
05A1C:  CALL   5486
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05A20:  MOVFF  3C3,4C8
05A24:  MOVLW  02
05A26:  MOVLB  4
05A28:  MOVWF  xC9
05A2A:  MOVLB  0
05A2C:  CALL   3B8E
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
05A30:  MOVLW  58
05A32:  MOVWF  FF6
05A34:  MOVLW  14
05A36:  MOVWF  FF7
05A38:  MOVLW  00
05A3A:  MOVWF  FF8
05A3C:  CALL   1ADA
05A40:  GOTO   7558 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
05A44:  MOVLW  74
05A46:  MOVWF  FF6
05A48:  MOVLW  14
05A4A:  MOVWF  FF7
05A4C:  MOVLW  00
05A4E:  MOVWF  FF8
05A50:  CALL   1ADA
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05A54:  MOVLB  3
05A56:  MOVF   xC1,W
05A58:  MOVWF  FE9
05A5A:  MOVF   xC2,W
05A5C:  MOVWF  FEA
05A5E:  MOVFF  FEF,3C3
05A62:  MOVLW  01
05A64:  ADDWF  xC1,W
05A66:  MOVWF  FE9
05A68:  MOVLW  00
05A6A:  ADDWFC xC2,W
05A6C:  MOVWF  FEA
05A6E:  MOVF   FEF,W
05A70:  CLRF   xCB
05A72:  CLRF   xCA
05A74:  CLRF   xC9
05A76:  MOVWF  xC8
05A78:  MOVFF  3C8,3CB
05A7C:  CLRF   xC8
05A7E:  CLRF   xC9
05A80:  CLRF   xCA
05A82:  MOVLW  02
05A84:  ADDWF  xC1,W
05A86:  MOVWF  FE9
05A88:  MOVLW  00
05A8A:  ADDWFC xC2,W
05A8C:  MOVWF  FEA
05A8E:  MOVF   FEF,W
05A90:  CLRF   xD0
05A92:  CLRF   xCF
05A94:  CLRF   xCE
05A96:  MOVWF  xCD
05A98:  MOVFF  3CE,03
05A9C:  MOVFF  3CD,02
05AA0:  CLRF   00
05AA2:  CLRF   01
05AA4:  MOVF   00,W
05AA6:  IORWF  xC8,F
05AA8:  MOVF   01,W
05AAA:  IORWF  xC9,F
05AAC:  MOVF   02,W
05AAE:  IORWF  xCA,F
05AB0:  MOVF   03,W
05AB2:  IORWF  xCB,F
05AB4:  MOVLW  03
05AB6:  ADDWF  xC1,W
05AB8:  MOVWF  FE9
05ABA:  MOVLW  00
05ABC:  ADDWFC xC2,W
05ABE:  MOVWF  FEA
05AC0:  MOVF   FEF,W
05AC2:  CLRF   xD0
05AC4:  CLRF   xCF
05AC6:  CLRF   xCE
05AC8:  MOVWF  xCD
05ACA:  MOVFF  3CF,03
05ACE:  MOVFF  3CE,02
05AD2:  MOVFF  3CD,01
05AD6:  CLRF   00
05AD8:  MOVF   00,W
05ADA:  IORWF  xC8,F
05ADC:  MOVF   01,W
05ADE:  IORWF  xC9,F
05AE0:  MOVF   02,W
05AE2:  IORWF  xCA,F
05AE4:  MOVF   03,W
05AE6:  IORWF  xCB,F
05AE8:  MOVLW  04
05AEA:  ADDWF  xC1,W
05AEC:  MOVWF  FE9
05AEE:  MOVLW  00
05AF0:  ADDWFC xC2,W
05AF2:  MOVWF  FEA
05AF4:  MOVF   FEF,W
05AF6:  MOVWF  00
05AF8:  CLRF   01
05AFA:  CLRF   02
05AFC:  CLRF   03
05AFE:  MOVF   00,W
05B00:  IORWF  xC8,W
05B02:  MOVWF  xC4
05B04:  MOVF   01,W
05B06:  IORWF  xC9,W
05B08:  MOVWF  xC5
05B0A:  MOVF   02,W
05B0C:  IORWF  xCA,W
05B0E:  MOVWF  xC6
05B10:  MOVF   03,W
05B12:  IORWF  xCB,W
05B14:  MOVWF  xC7
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05B16:  MOVLW  90
05B18:  MOVWF  FF6
05B1A:  MOVLW  14
05B1C:  MOVWF  FF7
05B1E:  MOVLW  00
05B20:  MOVWF  FF8
05B22:  MOVLW  16
05B24:  MOVLB  8
05B26:  MOVWF  x23
05B28:  MOVLB  0
05B2A:  CALL   1B0A
05B2E:  MOVFF  3C7,4C5
05B32:  MOVLW  37
05B34:  MOVLB  4
05B36:  MOVWF  xC6
05B38:  MOVLB  0
05B3A:  CALL   1CCC
05B3E:  MOVFF  3C6,4C5
05B42:  MOVLW  37
05B44:  MOVLB  4
05B46:  MOVWF  xC6
05B48:  MOVLB  0
05B4A:  CALL   1CCC
05B4E:  MOVFF  3C5,4C5
05B52:  MOVLW  37
05B54:  MOVLB  4
05B56:  MOVWF  xC6
05B58:  MOVLB  0
05B5A:  CALL   1CCC
05B5E:  MOVFF  3C4,4C5
05B62:  MOVLW  37
05B64:  MOVLB  4
05B66:  MOVWF  xC6
05B68:  MOVLB  0
05B6A:  CALL   1CCC
05B6E:  MOVLW  0D
05B70:  MOVLB  8
05B72:  MOVWF  x66
05B74:  MOVLB  0
05B76:  CALL   1A88
05B7A:  MOVLW  0A
05B7C:  MOVLB  8
05B7E:  MOVWF  x66
05B80:  MOVLB  0
05B82:  CALL   1A88
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05B86:  MOVFF  3C3,4C8
05B8A:  MOVLW  01
05B8C:  MOVLB  4
05B8E:  MOVWF  xC9
05B90:  MOVLB  0
05B92:  CALL   3B8E
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
05B96:  MOVFF  F1,866
05B9A:  MOVFF  F0,865
05B9E:  MOVFF  EF,864
05BA2:  MOVFF  EE,863
05BA6:  MOVLB  8
05BA8:  CLRF   x6A
05BAA:  CLRF   x69
05BAC:  CLRF   x68
05BAE:  CLRF   x67
05BB0:  MOVLB  0
05BB2:  CALL   3592
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05BB6:  MOVFF  3C3,4C8
05BBA:  MOVLW  02
05BBC:  MOVLB  4
05BBE:  MOVWF  xC9
05BC0:  MOVLB  0
05BC2:  CALL   3B8E
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
05BC6:  MOVLW  AE
05BC8:  MOVWF  FF6
05BCA:  MOVLW  14
05BCC:  MOVWF  FF7
05BCE:  MOVLW  00
05BD0:  MOVWF  FF8
05BD2:  CALL   1ADA
05BD6:  GOTO   7568 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05BDA:  MOVLW  C8
05BDC:  MOVWF  FF6
05BDE:  MOVLW  14
05BE0:  MOVWF  FF7
05BE2:  MOVLW  00
05BE4:  MOVWF  FF8
05BE6:  CALL   1ADA
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05BEA:  MOVLB  3
05BEC:  MOVF   xC1,W
05BEE:  MOVWF  FE9
05BF0:  MOVF   xC2,W
05BF2:  MOVWF  FEA
05BF4:  MOVFF  FEF,3C3
05BF8:  MOVLW  01
05BFA:  ADDWF  xC1,W
05BFC:  MOVWF  FE9
05BFE:  MOVLW  00
05C00:  ADDWFC xC2,W
05C02:  MOVWF  FEA
05C04:  MOVF   FEF,W
05C06:  CLRF   xCB
05C08:  CLRF   xCA
05C0A:  CLRF   xC9
05C0C:  MOVWF  xC8
05C0E:  MOVFF  3C8,3CB
05C12:  CLRF   xC8
05C14:  CLRF   xC9
05C16:  CLRF   xCA
05C18:  MOVLW  02
05C1A:  ADDWF  xC1,W
05C1C:  MOVWF  FE9
05C1E:  MOVLW  00
05C20:  ADDWFC xC2,W
05C22:  MOVWF  FEA
05C24:  MOVF   FEF,W
05C26:  CLRF   xD0
05C28:  CLRF   xCF
05C2A:  CLRF   xCE
05C2C:  MOVWF  xCD
05C2E:  MOVFF  3CE,03
05C32:  MOVFF  3CD,02
05C36:  CLRF   00
05C38:  CLRF   01
05C3A:  MOVF   00,W
05C3C:  IORWF  xC8,F
05C3E:  MOVF   01,W
05C40:  IORWF  xC9,F
05C42:  MOVF   02,W
05C44:  IORWF  xCA,F
05C46:  MOVF   03,W
05C48:  IORWF  xCB,F
05C4A:  MOVLW  03
05C4C:  ADDWF  xC1,W
05C4E:  MOVWF  FE9
05C50:  MOVLW  00
05C52:  ADDWFC xC2,W
05C54:  MOVWF  FEA
05C56:  MOVF   FEF,W
05C58:  CLRF   xD0
05C5A:  CLRF   xCF
05C5C:  CLRF   xCE
05C5E:  MOVWF  xCD
05C60:  MOVFF  3CF,03
05C64:  MOVFF  3CE,02
05C68:  MOVFF  3CD,01
05C6C:  CLRF   00
05C6E:  MOVF   00,W
05C70:  IORWF  xC8,F
05C72:  MOVF   01,W
05C74:  IORWF  xC9,F
05C76:  MOVF   02,W
05C78:  IORWF  xCA,F
05C7A:  MOVF   03,W
05C7C:  IORWF  xCB,F
05C7E:  MOVLW  04
05C80:  ADDWF  xC1,W
05C82:  MOVWF  FE9
05C84:  MOVLW  00
05C86:  ADDWFC xC2,W
05C88:  MOVWF  FEA
05C8A:  MOVF   FEF,W
05C8C:  MOVWF  00
05C8E:  CLRF   01
05C90:  CLRF   02
05C92:  CLRF   03
05C94:  MOVF   00,W
05C96:  IORWF  xC8,W
05C98:  MOVWF  xC4
05C9A:  MOVF   01,W
05C9C:  IORWF  xC9,W
05C9E:  MOVWF  xC5
05CA0:  MOVF   02,W
05CA2:  IORWF  xCA,W
05CA4:  MOVWF  xC6
05CA6:  MOVF   03,W
05CA8:  IORWF  xCB,W
05CAA:  MOVWF  xC7
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05CAC:  MOVLW  EE
05CAE:  MOVWF  FF6
05CB0:  MOVLW  14
05CB2:  MOVWF  FF7
05CB4:  MOVLW  00
05CB6:  MOVWF  FF8
05CB8:  MOVLW  16
05CBA:  MOVLB  8
05CBC:  MOVWF  x23
05CBE:  MOVLB  0
05CC0:  CALL   1B0A
05CC4:  MOVFF  3C7,4C5
05CC8:  MOVLW  37
05CCA:  MOVLB  4
05CCC:  MOVWF  xC6
05CCE:  MOVLB  0
05CD0:  CALL   1CCC
05CD4:  MOVFF  3C6,4C5
05CD8:  MOVLW  37
05CDA:  MOVLB  4
05CDC:  MOVWF  xC6
05CDE:  MOVLB  0
05CE0:  CALL   1CCC
05CE4:  MOVFF  3C5,4C5
05CE8:  MOVLW  37
05CEA:  MOVLB  4
05CEC:  MOVWF  xC6
05CEE:  MOVLB  0
05CF0:  CALL   1CCC
05CF4:  MOVFF  3C4,4C5
05CF8:  MOVLW  37
05CFA:  MOVLB  4
05CFC:  MOVWF  xC6
05CFE:  MOVLB  0
05D00:  CALL   1CCC
05D04:  MOVLW  0D
05D06:  MOVLB  8
05D08:  MOVWF  x66
05D0A:  MOVLB  0
05D0C:  CALL   1A88
05D10:  MOVLW  0A
05D12:  MOVLB  8
05D14:  MOVWF  x66
05D16:  MOVLB  0
05D18:  CALL   1A88
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05D1C:  MOVFF  3C3,4C8
05D20:  MOVLW  01
05D22:  MOVLB  4
05D24:  MOVWF  xC9
05D26:  MOVLB  0
05D28:  CALL   3B8E
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05D2C:  MOVFF  3C3,4C8
05D30:  MOVLW  02
05D32:  MOVLB  4
05D34:  MOVWF  xC9
05D36:  MOVLB  0
05D38:  CALL   3B8E
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05D3C:  MOVLW  0C
05D3E:  MOVWF  FF6
05D40:  MOVLW  15
05D42:  MOVWF  FF7
05D44:  MOVLW  00
05D46:  MOVWF  FF8
05D48:  CALL   1ADA
05D4C:  GOTO   7578 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
05D50:  MOVLW  30
05D52:  MOVWF  FF6
05D54:  MOVLW  15
05D56:  MOVWF  FF7
05D58:  MOVLW  00
05D5A:  MOVWF  FF8
05D5C:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05D60:  MOVLB  3
05D62:  MOVF   xC1,W
05D64:  MOVWF  FE9
05D66:  MOVF   xC2,W
05D68:  MOVWF  FEA
05D6A:  MOVFF  FEF,413
05D6E:  MOVFF  413,4C8
05D72:  MOVLW  01
05D74:  MOVLB  4
05D76:  MOVWF  xC9
05D78:  MOVLB  0
05D7A:  CALL   3B8E
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05D7E:  MOVLB  3
05D80:  CLRF   xC3
05D82:  CLRF   xC4
05D84:  CLRF   xC5
05D86:  CLRF   xC6
05D88:  CLRF   xC7
05D8A:  CLRF   xC8
05D8C:  CLRF   xC9
....................    
....................    flash_write_param.id = parameter[0];
05D8E:  MOVF   xC1,W
05D90:  MOVWF  FE9
05D92:  MOVF   xC2,W
05D94:  MOVWF  FEA
05D96:  MOVFF  FEF,3C3
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05D9A:  MOVLW  01
05D9C:  ADDWF  xC1,W
05D9E:  MOVWF  FE9
05DA0:  MOVLW  00
05DA2:  ADDWFC xC2,W
05DA4:  MOVWF  FEA
05DA6:  MOVF   FEF,W
05DA8:  MOVLB  4
05DAA:  CLRF   x16
05DAC:  CLRF   x15
05DAE:  CLRF   x14
05DB0:  MOVWF  x13
05DB2:  MOVFF  413,416
05DB6:  CLRF   x13
05DB8:  CLRF   x14
05DBA:  CLRF   x15
05DBC:  MOVLW  02
05DBE:  MOVLB  3
05DC0:  ADDWF  xC1,W
05DC2:  MOVWF  FE9
05DC4:  MOVLW  00
05DC6:  ADDWFC xC2,W
05DC8:  MOVWF  FEA
05DCA:  MOVF   FEF,W
05DCC:  MOVLB  4
05DCE:  CLRF   x1B
05DD0:  CLRF   x1A
05DD2:  CLRF   x19
05DD4:  MOVWF  x18
05DD6:  MOVFF  419,03
05DDA:  MOVFF  418,02
05DDE:  CLRF   00
05DE0:  CLRF   01
05DE2:  MOVF   00,W
05DE4:  IORWF  x13,F
05DE6:  MOVF   01,W
05DE8:  IORWF  x14,F
05DEA:  MOVF   02,W
05DEC:  IORWF  x15,F
05DEE:  MOVF   03,W
05DF0:  IORWF  x16,F
05DF2:  MOVLW  03
05DF4:  MOVLB  3
05DF6:  ADDWF  xC1,W
05DF8:  MOVWF  FE9
05DFA:  MOVLW  00
05DFC:  ADDWFC xC2,W
05DFE:  MOVWF  FEA
05E00:  MOVF   FEF,W
05E02:  MOVLB  4
05E04:  CLRF   x1B
05E06:  CLRF   x1A
05E08:  CLRF   x19
05E0A:  MOVWF  x18
05E0C:  MOVFF  41A,03
05E10:  MOVFF  419,02
05E14:  MOVFF  418,01
05E18:  CLRF   00
05E1A:  MOVF   00,W
05E1C:  IORWF  x13,F
05E1E:  MOVF   01,W
05E20:  IORWF  x14,F
05E22:  MOVF   02,W
05E24:  IORWF  x15,F
05E26:  MOVF   03,W
05E28:  IORWF  x16,F
05E2A:  MOVLW  04
05E2C:  MOVLB  3
05E2E:  ADDWF  xC1,W
05E30:  MOVWF  FE9
05E32:  MOVLW  00
05E34:  ADDWFC xC2,W
05E36:  MOVWF  FEA
05E38:  MOVF   FEF,W
05E3A:  MOVWF  00
05E3C:  CLRF   01
05E3E:  CLRF   02
05E40:  CLRF   03
05E42:  MOVF   00,W
05E44:  MOVLB  4
05E46:  IORWF  x13,W
05E48:  MOVLB  3
05E4A:  MOVWF  xC4
05E4C:  MOVF   01,W
05E4E:  MOVLB  4
05E50:  IORWF  x14,W
05E52:  MOVLB  3
05E54:  MOVWF  xC5
05E56:  MOVF   02,W
05E58:  MOVLB  4
05E5A:  IORWF  x15,W
05E5C:  MOVLB  3
05E5E:  MOVWF  xC6
05E60:  MOVF   03,W
05E62:  MOVLB  4
05E64:  IORWF  x16,W
05E66:  MOVLB  3
05E68:  MOVWF  xC7
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05E6A:  MOVLW  07
05E6C:  ADDWF  xC1,W
05E6E:  MOVWF  FE9
05E70:  MOVLW  00
05E72:  ADDWFC xC2,W
05E74:  MOVWF  FEA
05E76:  MOVF   FEF,W
05E78:  MOVLB  4
05E7A:  CLRF   x14
05E7C:  MOVWF  x13
05E7E:  MOVFF  413,414
05E82:  CLRF   x13
05E84:  MOVLW  08
05E86:  MOVLB  3
05E88:  ADDWF  xC1,W
05E8A:  MOVWF  FE9
05E8C:  MOVLW  00
05E8E:  ADDWFC xC2,W
05E90:  MOVWF  FEA
05E92:  MOVF   FEF,W
05E94:  CLRF   03
05E96:  MOVLB  4
05E98:  IORWF  x13,W
05E9A:  MOVLB  3
05E9C:  MOVWF  xC8
05E9E:  MOVF   03,W
05EA0:  MOVLB  4
05EA2:  IORWF  x14,W
05EA4:  MOVLB  3
05EA6:  MOVWF  xC9
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05EA8:  MOVLW  4A
05EAA:  MOVWF  FF6
05EAC:  MOVLW  15
05EAE:  MOVWF  FF7
05EB0:  MOVLW  00
05EB2:  MOVWF  FF8
05EB4:  MOVLW  0C
05EB6:  MOVLB  8
05EB8:  MOVWF  x23
05EBA:  MOVLB  0
05EBC:  CALL   1B0A
05EC0:  MOVFF  3C3,4C5
05EC4:  MOVLW  37
05EC6:  MOVLB  4
05EC8:  MOVWF  xC6
05ECA:  MOVLB  0
05ECC:  CALL   1CCC
05ED0:  MOVLW  0D
05ED2:  MOVLB  8
05ED4:  MOVWF  x66
05ED6:  MOVLB  0
05ED8:  CALL   1A88
05EDC:  MOVLW  0A
05EDE:  MOVLB  8
05EE0:  MOVWF  x66
05EE2:  MOVLB  0
05EE4:  CALL   1A88
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05EE8:  MOVLW  5E
05EEA:  MOVWF  FF6
05EEC:  MOVLW  15
05EEE:  MOVWF  FF7
05EF0:  MOVLW  00
05EF2:  MOVWF  FF8
05EF4:  MOVLW  0E
05EF6:  MOVLB  8
05EF8:  MOVWF  x23
05EFA:  MOVLB  0
05EFC:  CALL   1B0A
05F00:  MOVFF  3C7,4C5
05F04:  MOVLW  37
05F06:  MOVLB  4
05F08:  MOVWF  xC6
05F0A:  MOVLB  0
05F0C:  CALL   1CCC
05F10:  MOVFF  3C6,4C5
05F14:  MOVLW  37
05F16:  MOVLB  4
05F18:  MOVWF  xC6
05F1A:  MOVLB  0
05F1C:  CALL   1CCC
05F20:  MOVFF  3C5,4C5
05F24:  MOVLW  37
05F26:  MOVLB  4
05F28:  MOVWF  xC6
05F2A:  MOVLB  0
05F2C:  CALL   1CCC
05F30:  MOVFF  3C4,4C5
05F34:  MOVLW  37
05F36:  MOVLB  4
05F38:  MOVWF  xC6
05F3A:  MOVLB  0
05F3C:  CALL   1CCC
05F40:  MOVLW  0D
05F42:  MOVLB  8
05F44:  MOVWF  x66
05F46:  MOVLB  0
05F48:  CALL   1A88
05F4C:  MOVLW  0A
05F4E:  MOVLB  8
05F50:  MOVWF  x66
05F52:  MOVLB  0
05F54:  CALL   1A88
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05F58:  MOVLW  74
05F5A:  MOVWF  FF6
05F5C:  MOVLW  15
05F5E:  MOVWF  FF7
05F60:  MOVLW  00
05F62:  MOVWF  FF8
05F64:  MOVLW  0E
05F66:  MOVLB  8
05F68:  MOVWF  x23
05F6A:  MOVLB  0
05F6C:  CALL   1B0A
05F70:  MOVFF  3C9,4C5
05F74:  MOVLW  37
05F76:  MOVLB  4
05F78:  MOVWF  xC6
05F7A:  MOVLB  0
05F7C:  CALL   1CCC
05F80:  MOVFF  3C8,4C5
05F84:  MOVLW  37
05F86:  MOVLB  4
05F88:  MOVWF  xC6
05F8A:  MOVLB  0
05F8C:  CALL   1CCC
05F90:  MOVLW  0D
05F92:  MOVLB  8
05F94:  MOVWF  x66
05F96:  MOVLB  0
05F98:  CALL   1A88
05F9C:  MOVLW  0A
05F9E:  MOVLB  8
05FA0:  MOVWF  x66
05FA2:  MOVLB  0
05FA4:  CALL   1A88
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05FA8:  MOVFF  3C3,4C8
05FAC:  MOVLB  4
05FAE:  CLRF   xC9
05FB0:  MOVLB  0
05FB2:  CALL   3B8E
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05FB6:  MOVLW  8A
05FB8:  MOVWF  FF6
05FBA:  MOVLW  15
05FBC:  MOVWF  FF7
05FBE:  MOVLW  00
05FC0:  MOVWF  FF8
05FC2:  CALL   1ADA
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05FC6:  MOVLB  4
05FC8:  CLRF   x0B
05FCA:  CLRF   x0A
05FCC:  MOVLB  0
05FCE:  MOVLB  4
05FD0:  MOVF   x0B,W
05FD2:  MOVLB  3
05FD4:  SUBWF  xC9,W
05FD6:  BTFSC  FD8.0
05FD8:  BRA    5FE0
05FDA:  MOVLB  0
05FDC:  GOTO   611E
05FE0:  MOVLB  0
05FE2:  BTFSS  FD8.2
05FE4:  GOTO   5FFC
05FE8:  MOVLB  3
05FEA:  MOVF   xC8,W
05FEC:  MOVLB  4
05FEE:  SUBWF  x0A,W
05FF0:  BTFSS  FD8.0
05FF2:  BRA    5FFA
05FF4:  MOVLB  0
05FF6:  GOTO   611E
05FFA:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
05FFC:  MOVLB  4
05FFE:  RLCF   x0A,W
06000:  MOVWF  x0C
06002:  RLCF   x0B,W
06004:  MOVWF  x0D
06006:  RLCF   x0C,F
06008:  RLCF   x0D,F
0600A:  RLCF   x0C,F
0600C:  RLCF   x0D,F
0600E:  RLCF   x0C,F
06010:  RLCF   x0D,F
06012:  RLCF   x0C,F
06014:  RLCF   x0D,F
06016:  RLCF   x0C,F
06018:  RLCF   x0D,F
0601A:  MOVLW  C0
0601C:  ANDWF  x0C,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
0601E:  CLRF   x0E
06020:  MOVLB  0
06022:  MOVLB  4
06024:  MOVF   x0E,W
06026:  SUBLW  3F
06028:  BTFSC  FD8.0
0602A:  BRA    6032
0602C:  MOVLB  0
0602E:  GOTO   6090
06032:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
06034:  CLRF   03
06036:  MOVLB  4
06038:  MOVF   x0E,W
0603A:  ADDLW  CA
0603C:  MOVWF  FE9
0603E:  MOVLW  03
06040:  ADDWFC 03,W
06042:  MOVWF  FEA
06044:  MOVF   x0E,W
06046:  ADDWF  x0C,W
06048:  MOVWF  x15
0604A:  MOVLW  00
0604C:  ADDWFC x0D,W
0604E:  MOVWF  x16
06050:  MOVF   x15,W
06052:  MOVWF  00
06054:  CLRF   03
06056:  MOVF   00,W
06058:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
0605A:  CLRF   03
0605C:  MOVF   x0E,W
0605E:  ADDLW  CA
06060:  MOVWF  FE9
06062:  MOVLW  03
06064:  ADDWFC 03,W
06066:  MOVWF  FEA
06068:  MOVFF  FEF,413
0606C:  MOVFF  413,4C5
06070:  MOVLW  37
06072:  MOVWF  xC6
06074:  MOVLB  0
06076:  CALL   1CCC
0607A:  MOVLW  20
0607C:  MOVLB  8
0607E:  MOVWF  x66
06080:  MOVLB  0
06082:  CALL   1A88
06086:  MOVLB  4
06088:  INCF   x0E,F
0608A:  MOVLB  0
0608C:  GOTO   6022
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06090:  MOVLB  4
06092:  RLCF   x0A,W
06094:  MOVWF  02
06096:  RLCF   x0B,W
06098:  MOVWF  03
0609A:  RLCF   02,F
0609C:  RLCF   03,F
0609E:  RLCF   02,F
060A0:  RLCF   03,F
060A2:  RLCF   02,F
060A4:  RLCF   03,F
060A6:  RLCF   02,F
060A8:  RLCF   03,F
060AA:  RLCF   02,F
060AC:  RLCF   03,F
060AE:  MOVLW  C0
060B0:  ANDWF  02,F
060B2:  MOVF   02,W
060B4:  MOVLB  3
060B6:  ADDWF  xC4,W
060B8:  MOVLB  4
060BA:  MOVWF  x0F
060BC:  MOVF   03,W
060BE:  MOVLB  3
060C0:  ADDWFC xC5,W
060C2:  MOVLB  4
060C4:  MOVWF  x10
060C6:  MOVLW  00
060C8:  MOVLB  3
060CA:  ADDWFC xC6,W
060CC:  MOVLB  4
060CE:  MOVWF  x11
060D0:  MOVLW  00
060D2:  MOVLB  3
060D4:  ADDWFC xC7,W
060D6:  MOVLB  4
060D8:  MOVWF  x12
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
060DA:  MOVFF  F1,866
060DE:  MOVFF  F0,865
060E2:  MOVFF  EF,864
060E6:  MOVFF  EE,863
060EA:  MOVFF  412,86A
060EE:  MOVFF  411,869
060F2:  MOVFF  410,868
060F6:  MOVFF  40F,867
060FA:  MOVLW  03
060FC:  MOVLB  8
060FE:  MOVWF  x6C
06100:  MOVLW  CA
06102:  MOVWF  x6B
06104:  CLRF   x6E
06106:  MOVLW  40
06108:  MOVWF  x6D
0610A:  MOVLB  0
0610C:  CALL   320E
06110:  MOVLB  4
06112:  INCF   x0A,F
06114:  BTFSC  FD8.2
06116:  INCF   x0B,F
06118:  MOVLB  0
0611A:  GOTO   5FCE
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
0611E:  MOVFF  3C3,4C8
06122:  MOVLW  02
06124:  MOVLB  4
06126:  MOVWF  xC9
06128:  MOVLB  0
0612A:  CALL   3B8E
....................    fprintf(PC, "\r\n");
0612E:  MOVLW  0D
06130:  MOVLB  8
06132:  MOVWF  x66
06134:  MOVLB  0
06136:  CALL   1A88
0613A:  MOVLW  0A
0613C:  MOVLB  8
0613E:  MOVWF  x66
06140:  MOVLB  0
06142:  CALL   1A88
....................    fprintf(PC, "End Flash Write Demo\r\n");
06146:  MOVLW  98
06148:  MOVWF  FF6
0614A:  MOVLW  15
0614C:  MOVWF  FF7
0614E:  MOVLW  00
06150:  MOVWF  FF8
06152:  CALL   1ADA
06156:  GOTO   7588 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
0618A:  MOVLW  B0
0618C:  MOVWF  FF6
0618E:  MOVLW  15
06190:  MOVWF  FF7
06192:  MOVLW  00
06194:  MOVWF  FF8
06196:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0619A:  MOVLB  3
0619C:  MOVF   xC1,W
0619E:  MOVWF  FE9
061A0:  MOVF   xC2,W
061A2:  MOVWF  FEA
061A4:  MOVFF  FEF,4C7
061A8:  MOVFF  4C7,4C8
061AC:  MOVLW  01
061AE:  MOVLB  4
061B0:  MOVWF  xC9
061B2:  MOVLB  0
061B4:  CALL   3B8E
....................    flash_setting(mis_fm);
061B8:  MOVFF  F1,4CE
061BC:  MOVFF  F0,4CD
061C0:  MOVFF  EF,4CC
061C4:  MOVFF  EE,4CB
061C8:  CALL   615A
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
061CC:  MOVLB  3
061CE:  CLRF   xC6
061D0:  CLRF   xC5
061D2:  CLRF   xC4
061D4:  CLRF   xC3
061D6:  MOVLW  01
061D8:  MOVWF  xC7
061DA:  MOVLW  02
061DC:  MOVWF  xC8
061DE:  MOVLW  03
061E0:  MOVWF  xC9
061E2:  MOVLW  04
061E4:  MOVWF  xCA
061E6:  CLRF   xCB
061E8:  CLRF   xCC
061EA:  CLRF   xCD
061EC:  CLRF   xCE
061EE:  CLRF   xCF
061F0:  CLRF   xD0
061F2:  CLRF   xD1
061F4:  CLRF   xD2
061F6:  CLRF   xD3
061F8:  CLRF   xD4
061FA:  CLRF   xD5
061FC:  CLRF   xD6
061FE:  CLRF   xD7
06200:  CLRF   xD8
06202:  CLRF   xD9
06204:  CLRF   xDA
06206:  CLRF   xDB
06208:  CLRF   xDC
0620A:  CLRF   xDD
0620C:  CLRF   xDE
0620E:  CLRF   xDF
06210:  CLRF   xE0
06212:  CLRF   xE1
06214:  CLRF   xE2
06216:  CLRF   xE3
06218:  CLRF   xE4
0621A:  CLRF   xE5
0621C:  CLRF   xE6
0621E:  CLRF   xE7
06220:  CLRF   xE8
06222:  CLRF   xE9
06224:  CLRF   xEA
06226:  CLRF   xEB
06228:  CLRF   xEC
0622A:  CLRF   xED
0622C:  CLRF   xEE
0622E:  CLRF   xEF
06230:  CLRF   xF0
06232:  CLRF   xF1
06234:  CLRF   xF2
06236:  CLRF   xF3
06238:  CLRF   xF4
0623A:  CLRF   xF5
0623C:  CLRF   xF6
0623E:  CLRF   xF7
06240:  CLRF   xF8
06242:  CLRF   xF9
06244:  CLRF   xFA
06246:  CLRF   xFB
06248:  CLRF   xFC
0624A:  CLRF   xFD
0624C:  CLRF   xFE
0624E:  CLRF   xFF
06250:  MOVLB  4
06252:  CLRF   x00
06254:  CLRF   x01
06256:  CLRF   x02
06258:  CLRF   x03
0625A:  CLRF   x04
0625C:  CLRF   x05
0625E:  CLRF   x06
06260:  CLRF   x07
06262:  CLRF   x08
06264:  CLRF   x09
06266:  CLRF   x0A
06268:  CLRF   x0B
0626A:  CLRF   x0C
0626C:  CLRF   x0D
0626E:  CLRF   x0E
06270:  CLRF   x0F
06272:  CLRF   x10
06274:  CLRF   x11
06276:  CLRF   x12
06278:  CLRF   x13
0627A:  CLRF   x14
0627C:  CLRF   x15
0627E:  CLRF   x16
06280:  CLRF   x17
06282:  CLRF   x18
06284:  CLRF   x19
06286:  CLRF   x1A
06288:  CLRF   x1B
0628A:  CLRF   x1C
0628C:  CLRF   x1D
0628E:  CLRF   x1E
06290:  CLRF   x1F
06292:  CLRF   x20
06294:  CLRF   x21
06296:  CLRF   x22
06298:  CLRF   x23
0629A:  CLRF   x24
0629C:  CLRF   x25
0629E:  CLRF   x26
062A0:  CLRF   x27
062A2:  CLRF   x28
062A4:  CLRF   x29
062A6:  CLRF   x2A
062A8:  CLRF   x2B
062AA:  CLRF   x2C
062AC:  CLRF   x2D
062AE:  CLRF   x2E
062B0:  CLRF   x2F
062B2:  CLRF   x30
062B4:  CLRF   x31
062B6:  CLRF   x32
062B8:  CLRF   x33
062BA:  CLRF   x34
062BC:  CLRF   x35
062BE:  CLRF   x36
062C0:  CLRF   x37
062C2:  CLRF   x38
062C4:  CLRF   x39
062C6:  CLRF   x3A
062C8:  CLRF   x3B
062CA:  CLRF   x3C
062CC:  CLRF   x3D
062CE:  CLRF   x3E
062D0:  CLRF   x3F
062D2:  CLRF   x40
062D4:  CLRF   x41
062D6:  CLRF   x42
062D8:  CLRF   x43
062DA:  CLRF   x44
062DC:  CLRF   x45
062DE:  CLRF   x46
062E0:  CLRF   x47
062E2:  CLRF   x48
062E4:  CLRF   x49
062E6:  CLRF   x4A
062E8:  CLRF   x4B
062EA:  CLRF   x4C
062EC:  CLRF   x4D
062EE:  CLRF   x4E
062F0:  CLRF   x4F
062F2:  CLRF   x50
062F4:  CLRF   x51
062F6:  CLRF   x52
062F8:  CLRF   x53
062FA:  CLRF   x54
062FC:  CLRF   x55
062FE:  CLRF   x56
06300:  CLRF   x57
06302:  CLRF   x58
06304:  CLRF   x59
06306:  CLRF   x5A
06308:  CLRF   x5B
0630A:  CLRF   x5C
0630C:  CLRF   x5D
0630E:  CLRF   x5E
06310:  CLRF   x5F
06312:  CLRF   x60
06314:  CLRF   x61
06316:  CLRF   x62
06318:  CLRF   x63
0631A:  CLRF   x64
0631C:  CLRF   x65
0631E:  CLRF   x66
06320:  CLRF   x67
06322:  CLRF   x68
06324:  CLRF   x69
06326:  CLRF   x6A
06328:  CLRF   x6B
0632A:  CLRF   x6C
0632C:  CLRF   x6D
0632E:  CLRF   x6E
06330:  CLRF   x6F
06332:  CLRF   x70
06334:  CLRF   x71
06336:  CLRF   x72
06338:  CLRF   x73
0633A:  CLRF   x74
0633C:  CLRF   x75
0633E:  CLRF   x76
06340:  CLRF   x77
06342:  CLRF   x78
06344:  CLRF   x79
06346:  CLRF   x7A
06348:  CLRF   x7B
0634A:  CLRF   x7C
0634C:  CLRF   x7D
0634E:  CLRF   x7E
06350:  CLRF   x7F
06352:  CLRF   x80
06354:  CLRF   x81
06356:  CLRF   x82
06358:  CLRF   x83
0635A:  CLRF   x84
0635C:  CLRF   x85
0635E:  CLRF   x86
06360:  CLRF   x87
06362:  CLRF   x88
06364:  CLRF   x89
06366:  CLRF   x8A
06368:  CLRF   x8B
0636A:  CLRF   x8C
0636C:  CLRF   x8D
0636E:  CLRF   x8E
06370:  CLRF   x8F
06372:  CLRF   x90
06374:  CLRF   x91
06376:  CLRF   x92
06378:  CLRF   x93
0637A:  CLRF   x94
0637C:  CLRF   x95
0637E:  CLRF   x96
06380:  CLRF   x97
06382:  CLRF   x98
06384:  CLRF   x99
06386:  CLRF   x9A
06388:  CLRF   x9B
0638A:  CLRF   x9C
0638C:  CLRF   x9D
0638E:  CLRF   x9E
06390:  CLRF   x9F
06392:  CLRF   xA0
06394:  CLRF   xA1
06396:  CLRF   xA2
06398:  CLRF   xA3
0639A:  CLRF   xA4
0639C:  CLRF   xA5
0639E:  CLRF   xA6
063A0:  CLRF   xA7
063A2:  CLRF   xA8
063A4:  CLRF   xA9
063A6:  CLRF   xAA
063A8:  CLRF   xAB
063AA:  CLRF   xAC
063AC:  CLRF   xAD
063AE:  CLRF   xAE
063B0:  CLRF   xAF
063B2:  CLRF   xB0
063B4:  CLRF   xB1
063B6:  CLRF   xB2
063B8:  CLRF   xB3
063BA:  CLRF   xB4
063BC:  CLRF   xB5
063BE:  CLRF   xB6
063C0:  CLRF   xB7
063C2:  CLRF   xB8
063C4:  CLRF   xB9
063C6:  CLRF   xBA
063C8:  CLRF   xBB
063CA:  CLRF   xBC
063CC:  CLRF   xBD
063CE:  CLRF   xBE
063D0:  CLRF   xBF
063D2:  CLRF   xC0
063D4:  CLRF   xC1
063D6:  CLRF   xC2
063D8:  CLRF   xC3
063DA:  CLRF   xC4
063DC:  CLRF   xC5
063DE:  CLRF   xC6
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
063E0:  MOVFF  F1,866
063E4:  MOVFF  F0,865
063E8:  MOVFF  EF,864
063EC:  MOVFF  EE,863
063F0:  MOVFF  3C6,86A
063F4:  MOVFF  3C5,869
063F8:  MOVFF  3C4,868
063FC:  MOVFF  3C3,867
06400:  MOVLW  03
06402:  MOVLB  8
06404:  MOVWF  x6C
06406:  MOVLW  C7
06408:  MOVWF  x6B
0640A:  MOVLW  01
0640C:  MOVWF  x6E
0640E:  CLRF   x6D
06410:  MOVLB  0
06412:  CALL   320E
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06416:  MOVLB  3
06418:  MOVF   xC1,W
0641A:  MOVWF  FE9
0641C:  MOVF   xC2,W
0641E:  MOVWF  FEA
06420:  MOVFF  FEF,4C7
06424:  MOVFF  4C7,4C8
06428:  MOVLW  02
0642A:  MOVLB  4
0642C:  MOVWF  xC9
0642E:  MOVLB  0
06430:  CALL   3B8E
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06434:  MOVLW  D6
06436:  MOVWF  FF6
06438:  MOVLW  15
0643A:  MOVWF  FF7
0643C:  MOVLW  00
0643E:  MOVWF  FF8
06440:  CALL   1ADA
06444:  GOTO   7598 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06448:  MOVLW  FA
0644A:  MOVWF  FF6
0644C:  MOVLW  15
0644E:  MOVWF  FF7
06450:  MOVLW  00
06452:  MOVWF  FF8
06454:  CALL   1ADA
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
06458:  MOVLB  3
0645A:  MOVF   xC1,W
0645C:  MOVWF  FE9
0645E:  MOVF   xC2,W
06460:  MOVWF  FEA
06462:  MOVFF  FEF,413
06466:  MOVFF  413,4C8
0646A:  MOVLW  01
0646C:  MOVLB  4
0646E:  MOVWF  xC9
06470:  MOVLB  0
06472:  CALL   3B8E
....................    FLASH_PARAM flash_param = {0};
06476:  MOVLB  3
06478:  CLRF   xC3
0647A:  CLRF   xC4
0647C:  CLRF   xC5
0647E:  CLRF   xC6
06480:  CLRF   xC7
06482:  CLRF   xC8
06484:  CLRF   xC9
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
06486:  MOVF   xC1,W
06488:  MOVWF  FE9
0648A:  MOVF   xC2,W
0648C:  MOVWF  FEA
0648E:  MOVFF  FEF,3C3
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
06492:  MOVLW  01
06494:  ADDWF  xC1,W
06496:  MOVWF  FE9
06498:  MOVLW  00
0649A:  ADDWFC xC2,W
0649C:  MOVWF  FEA
0649E:  MOVF   FEF,W
064A0:  MOVLB  4
064A2:  CLRF   x16
064A4:  CLRF   x15
064A6:  CLRF   x14
064A8:  MOVWF  x13
064AA:  MOVFF  413,416
064AE:  CLRF   x13
064B0:  CLRF   x14
064B2:  CLRF   x15
064B4:  MOVLW  02
064B6:  MOVLB  3
064B8:  ADDWF  xC1,W
064BA:  MOVWF  FE9
064BC:  MOVLW  00
064BE:  ADDWFC xC2,W
064C0:  MOVWF  FEA
064C2:  MOVF   FEF,W
064C4:  MOVLB  4
064C6:  CLRF   x1B
064C8:  CLRF   x1A
064CA:  CLRF   x19
064CC:  MOVWF  x18
064CE:  MOVFF  419,03
064D2:  MOVFF  418,02
064D6:  CLRF   00
064D8:  CLRF   01
064DA:  MOVF   00,W
064DC:  IORWF  x13,F
064DE:  MOVF   01,W
064E0:  IORWF  x14,F
064E2:  MOVF   02,W
064E4:  IORWF  x15,F
064E6:  MOVF   03,W
064E8:  IORWF  x16,F
064EA:  MOVLW  03
064EC:  MOVLB  3
064EE:  ADDWF  xC1,W
064F0:  MOVWF  FE9
064F2:  MOVLW  00
064F4:  ADDWFC xC2,W
064F6:  MOVWF  FEA
064F8:  MOVF   FEF,W
064FA:  MOVLB  4
064FC:  CLRF   x1B
064FE:  CLRF   x1A
06500:  CLRF   x19
06502:  MOVWF  x18
06504:  MOVFF  41A,03
06508:  MOVFF  419,02
0650C:  MOVFF  418,01
06510:  CLRF   00
06512:  MOVF   00,W
06514:  IORWF  x13,F
06516:  MOVF   01,W
06518:  IORWF  x14,F
0651A:  MOVF   02,W
0651C:  IORWF  x15,F
0651E:  MOVF   03,W
06520:  IORWF  x16,F
06522:  MOVLW  04
06524:  MOVLB  3
06526:  ADDWF  xC1,W
06528:  MOVWF  FE9
0652A:  MOVLW  00
0652C:  ADDWFC xC2,W
0652E:  MOVWF  FEA
06530:  MOVF   FEF,W
06532:  MOVWF  00
06534:  CLRF   01
06536:  CLRF   02
06538:  CLRF   03
0653A:  MOVF   00,W
0653C:  MOVLB  4
0653E:  IORWF  x13,W
06540:  MOVLB  3
06542:  MOVWF  xC6
06544:  MOVF   01,W
06546:  MOVLB  4
06548:  IORWF  x14,W
0654A:  MOVLB  3
0654C:  MOVWF  xC7
0654E:  MOVF   02,W
06550:  MOVLB  4
06552:  IORWF  x15,W
06554:  MOVLB  3
06556:  MOVWF  xC8
06558:  MOVF   03,W
0655A:  MOVLB  4
0655C:  IORWF  x16,W
0655E:  MOVLB  3
06560:  MOVWF  xC9
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
06562:  MOVLW  07
06564:  ADDWF  xC1,W
06566:  MOVWF  FE9
06568:  MOVLW  00
0656A:  ADDWFC xC2,W
0656C:  MOVWF  FEA
0656E:  MOVF   FEF,W
06570:  MOVLB  4
06572:  CLRF   x14
06574:  MOVWF  x13
06576:  MOVFF  413,414
0657A:  CLRF   x13
0657C:  MOVLW  08
0657E:  MOVLB  3
06580:  ADDWF  xC1,W
06582:  MOVWF  FE9
06584:  MOVLW  00
06586:  ADDWFC xC2,W
06588:  MOVWF  FEA
0658A:  MOVF   FEF,W
0658C:  CLRF   03
0658E:  MOVLB  4
06590:  IORWF  x13,W
06592:  MOVLB  3
06594:  MOVWF  xC4
06596:  MOVF   03,W
06598:  MOVLB  4
0659A:  IORWF  x14,W
0659C:  MOVLB  3
0659E:  MOVWF  xC5
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
065A0:  MOVLW  0E
065A2:  MOVWF  FF6
065A4:  MOVLW  16
065A6:  MOVWF  FF7
065A8:  MOVLW  00
065AA:  MOVWF  FF8
065AC:  MOVLW  0C
065AE:  MOVLB  8
065B0:  MOVWF  x23
065B2:  MOVLB  0
065B4:  CALL   1B0A
065B8:  MOVFF  3C3,4C5
065BC:  MOVLW  37
065BE:  MOVLB  4
065C0:  MOVWF  xC6
065C2:  MOVLB  0
065C4:  CALL   1CCC
065C8:  MOVLW  0D
065CA:  MOVLB  8
065CC:  MOVWF  x66
065CE:  MOVLB  0
065D0:  CALL   1A88
065D4:  MOVLW  0A
065D6:  MOVLB  8
065D8:  MOVWF  x66
065DA:  MOVLB  0
065DC:  CALL   1A88
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
065E0:  MOVLW  22
065E2:  MOVWF  FF6
065E4:  MOVLW  16
065E6:  MOVWF  FF7
065E8:  MOVLW  00
065EA:  MOVWF  FF8
065EC:  MOVLW  0E
065EE:  MOVLB  8
065F0:  MOVWF  x23
065F2:  MOVLB  0
065F4:  CALL   1B0A
065F8:  MOVFF  3C9,4C5
065FC:  MOVLW  37
065FE:  MOVLB  4
06600:  MOVWF  xC6
06602:  MOVLB  0
06604:  CALL   1CCC
06608:  MOVFF  3C8,4C5
0660C:  MOVLW  37
0660E:  MOVLB  4
06610:  MOVWF  xC6
06612:  MOVLB  0
06614:  CALL   1CCC
06618:  MOVFF  3C7,4C5
0661C:  MOVLW  37
0661E:  MOVLB  4
06620:  MOVWF  xC6
06622:  MOVLB  0
06624:  CALL   1CCC
06628:  MOVFF  3C6,4C5
0662C:  MOVLW  37
0662E:  MOVLB  4
06630:  MOVWF  xC6
06632:  MOVLB  0
06634:  CALL   1CCC
06638:  MOVLW  0D
0663A:  MOVLB  8
0663C:  MOVWF  x66
0663E:  MOVLB  0
06640:  CALL   1A88
06644:  MOVLW  0A
06646:  MOVLB  8
06648:  MOVWF  x66
0664A:  MOVLB  0
0664C:  CALL   1A88
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06650:  MOVLW  38
06652:  MOVWF  FF6
06654:  MOVLW  16
06656:  MOVWF  FF7
06658:  MOVLW  00
0665A:  MOVWF  FF8
0665C:  MOVLW  0E
0665E:  MOVLB  8
06660:  MOVWF  x23
06662:  MOVLB  0
06664:  CALL   1B0A
06668:  MOVFF  3C5,4C5
0666C:  MOVLW  37
0666E:  MOVLB  4
06670:  MOVWF  xC6
06672:  MOVLB  0
06674:  CALL   1CCC
06678:  MOVFF  3C4,4C5
0667C:  MOVLW  37
0667E:  MOVLB  4
06680:  MOVWF  xC6
06682:  MOVLB  0
06684:  CALL   1CCC
06688:  MOVLW  0D
0668A:  MOVLB  8
0668C:  MOVWF  x66
0668E:  MOVLB  0
06690:  CALL   1A88
06694:  MOVLW  0A
06696:  MOVLB  8
06698:  MOVWF  x66
0669A:  MOVLB  0
0669C:  CALL   1A88
....................    
....................    piclog_make(flash_param.id, 0x00);
066A0:  MOVFF  3C3,4C8
066A4:  MOVLB  4
066A6:  CLRF   xC9
066A8:  MOVLB  0
066AA:  CALL   3B8E
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
066AE:  MOVLB  3
066B0:  CLRF   xCA
066B2:  CLRF   xCB
066B4:  CLRF   xCC
066B6:  CLRF   xCD
066B8:  CLRF   xCE
066BA:  CLRF   xCF
066BC:  CLRF   xD0
066BE:  CLRF   xD1
066C0:  CLRF   xD2
066C2:  CLRF   xD3
066C4:  CLRF   xD4
066C6:  CLRF   xD5
066C8:  CLRF   xD6
066CA:  CLRF   xD7
066CC:  CLRF   xD8
066CE:  CLRF   xD9
066D0:  CLRF   xDA
066D2:  CLRF   xDB
066D4:  CLRF   xDC
066D6:  CLRF   xDD
066D8:  CLRF   xDE
066DA:  CLRF   xDF
066DC:  CLRF   xE0
066DE:  CLRF   xE1
066E0:  CLRF   xE2
066E2:  CLRF   xE3
066E4:  CLRF   xE4
066E6:  CLRF   xE5
066E8:  CLRF   xE6
066EA:  CLRF   xE7
066EC:  CLRF   xE8
066EE:  CLRF   xE9
066F0:  CLRF   xEA
066F2:  CLRF   xEB
066F4:  CLRF   xEC
066F6:  CLRF   xED
066F8:  CLRF   xEE
066FA:  CLRF   xEF
066FC:  CLRF   xF0
066FE:  CLRF   xF1
06700:  CLRF   xF2
06702:  CLRF   xF3
06704:  CLRF   xF4
06706:  CLRF   xF5
06708:  CLRF   xF6
0670A:  CLRF   xF7
0670C:  CLRF   xF8
0670E:  CLRF   xF9
06710:  CLRF   xFA
06712:  CLRF   xFB
06714:  CLRF   xFC
06716:  CLRF   xFD
06718:  CLRF   xFE
0671A:  CLRF   xFF
0671C:  MOVLB  4
0671E:  CLRF   x00
06720:  CLRF   x01
06722:  CLRF   x02
06724:  CLRF   x03
06726:  CLRF   x04
06728:  CLRF   x05
0672A:  CLRF   x06
0672C:  CLRF   x07
0672E:  CLRF   x08
06730:  CLRF   x09
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06732:  MOVLW  4E
06734:  MOVWF  FF6
06736:  MOVLW  16
06738:  MOVWF  FF7
0673A:  MOVLW  00
0673C:  MOVWF  FF8
0673E:  MOVLB  0
06740:  CALL   1ADA
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06744:  MOVFF  F1,866
06748:  MOVFF  F0,865
0674C:  MOVFF  EF,864
06750:  MOVFF  EE,863
06754:  CALL   213E
06758:  MOVF   01,F
0675A:  BTFSS  FD8.2
0675C:  GOTO   6770
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06760:  MOVLW  5A
06762:  MOVWF  FF6
06764:  MOVLW  16
06766:  MOVWF  FF7
06768:  MOVLW  00
0676A:  MOVWF  FF8
0676C:  CALL   1ADA
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06770:  MOVLB  4
06772:  CLRF   x11
06774:  CLRF   x10
06776:  CLRF   x0F
06778:  CLRF   x0E
0677A:  MOVLB  0
0677C:  MOVLB  4
0677E:  MOVF   x11,F
06780:  BTFSC  FD8.2
06782:  BRA    678A
06784:  MOVLB  0
06786:  GOTO   68E8
0678A:  MOVLB  0
0678C:  MOVLB  4
0678E:  MOVF   x10,F
06790:  BTFSC  FD8.2
06792:  BRA    679A
06794:  MOVLB  0
06796:  GOTO   68E8
0679A:  MOVLB  0
0679C:  MOVLB  4
0679E:  MOVF   x0F,W
067A0:  MOVLB  3
067A2:  SUBWF  xC5,W
067A4:  BTFSC  FD8.0
067A6:  BRA    67AE
067A8:  MOVLB  0
067AA:  GOTO   68E8
067AE:  MOVLB  0
067B0:  BTFSS  FD8.2
067B2:  GOTO   67CA
067B6:  MOVLB  3
067B8:  MOVF   xC4,W
067BA:  MOVLB  4
067BC:  SUBWF  x0E,W
067BE:  BTFSS  FD8.0
067C0:  BRA    67C8
067C2:  MOVLB  0
067C4:  GOTO   68E8
067C8:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
067CA:  MOVLB  4
067CC:  RLCF   x0E,W
067CE:  MOVWF  00
067D0:  RLCF   x0F,W
067D2:  MOVWF  01
067D4:  RLCF   x10,W
067D6:  MOVWF  02
067D8:  RLCF   x11,W
067DA:  MOVWF  03
067DC:  RLCF   00,F
067DE:  RLCF   01,F
067E0:  RLCF   02,F
067E2:  RLCF   03,F
067E4:  RLCF   00,F
067E6:  RLCF   01,F
067E8:  RLCF   02,F
067EA:  RLCF   03,F
067EC:  RLCF   00,F
067EE:  RLCF   01,F
067F0:  RLCF   02,F
067F2:  RLCF   03,F
067F4:  RLCF   00,F
067F6:  RLCF   01,F
067F8:  RLCF   02,F
067FA:  RLCF   03,F
067FC:  RLCF   00,F
067FE:  RLCF   01,F
06800:  RLCF   02,F
06802:  RLCF   03,F
06804:  MOVLW  C0
06806:  ANDWF  00,F
06808:  MOVF   00,W
0680A:  MOVLB  3
0680C:  ADDWF  xC6,W
0680E:  MOVLB  4
06810:  MOVWF  x0A
06812:  MOVF   01,W
06814:  MOVLB  3
06816:  ADDWFC xC7,W
06818:  MOVLB  4
0681A:  MOVWF  x0B
0681C:  MOVF   02,W
0681E:  MOVLB  3
06820:  ADDWFC xC8,W
06822:  MOVLB  4
06824:  MOVWF  x0C
06826:  MOVF   03,W
06828:  MOVLB  3
0682A:  ADDWFC xC9,W
0682C:  MOVLB  4
0682E:  MOVWF  x0D
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06830:  MOVFF  F1,4CE
06834:  MOVFF  F0,4CD
06838:  MOVFF  EF,4CC
0683C:  MOVFF  EE,4CB
06840:  MOVFF  40D,4D2
06844:  MOVFF  40C,4D1
06848:  MOVFF  40B,4D0
0684C:  MOVFF  40A,4CF
06850:  MOVLW  03
06852:  MOVWF  xD4
06854:  MOVLW  CA
06856:  MOVWF  xD3
06858:  CLRF   xD8
0685A:  CLRF   xD7
0685C:  CLRF   xD6
0685E:  MOVLW  40
06860:  MOVWF  xD5
06862:  MOVLB  0
06864:  CALL   2204
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06868:  MOVLB  4
0686A:  CLRF   x12
0686C:  MOVLB  0
0686E:  MOVLB  4
06870:  MOVF   x12,W
06872:  SUBLW  3F
06874:  BTFSC  FD8.0
06876:  BRA    687E
06878:  MOVLB  0
0687A:  GOTO   68B8
0687E:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06880:  CLRF   03
06882:  MOVLB  4
06884:  MOVF   x12,W
06886:  ADDLW  CA
06888:  MOVWF  FE9
0688A:  MOVLW  03
0688C:  ADDWFC 03,W
0688E:  MOVWF  FEA
06890:  MOVFF  FEF,413
06894:  MOVFF  413,4C5
06898:  MOVLW  37
0689A:  MOVWF  xC6
0689C:  MOVLB  0
0689E:  CALL   1CCC
068A2:  MOVLW  20
068A4:  MOVLB  8
068A6:  MOVWF  x66
068A8:  MOVLB  0
068AA:  CALL   1A88
068AE:  MOVLB  4
068B0:  INCF   x12,F
068B2:  MOVLB  0
068B4:  GOTO   686E
....................       }
....................       fprintf(PC,"\r\n");
068B8:  MOVLW  0D
068BA:  MOVLB  8
068BC:  MOVWF  x66
068BE:  MOVLB  0
068C0:  CALL   1A88
068C4:  MOVLW  0A
068C6:  MOVLB  8
068C8:  MOVWF  x66
068CA:  MOVLB  0
068CC:  CALL   1A88
068D0:  MOVLW  01
068D2:  MOVLB  4
068D4:  ADDWF  x0E,F
068D6:  BTFSC  FD8.0
068D8:  INCF   x0F,F
068DA:  BTFSC  FD8.2
068DC:  INCF   x10,F
068DE:  BTFSC  FD8.2
068E0:  INCF   x11,F
068E2:  MOVLB  0
068E4:  GOTO   677C
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
068E8:  MOVFF  3C3,4C8
068EC:  MOVLW  02
068EE:  MOVLB  4
068F0:  MOVWF  xC9
068F2:  MOVLB  0
068F4:  CALL   3B8E
....................    fprintf(PC, "End Flash Read\r\n");
068F8:  MOVLW  7C
068FA:  MOVWF  FF6
068FC:  MOVLW  16
068FE:  MOVWF  FF7
06900:  MOVLW  00
06902:  MOVWF  FF8
06904:  CALL   1ADA
06908:  GOTO   75A8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
0690C:  MOVLW  8E
0690E:  MOVWF  FF6
06910:  MOVLW  16
06912:  MOVWF  FF7
06914:  MOVLW  00
06916:  MOVWF  FF8
06918:  CALL   1ADA
....................    flash_setting(mis_fm);
0691C:  MOVFF  F1,4CE
06920:  MOVFF  F0,4CD
06924:  MOVFF  EF,4CC
06928:  MOVFF  EE,4CB
0692C:  CALL   615A
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06930:  MOVLB  3
06932:  CLRF   xC6
06934:  CLRF   xC5
06936:  CLRF   xC4
06938:  CLRF   xC3
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
0693A:  MOVFF  F1,4CE
0693E:  MOVFF  F0,4CD
06942:  MOVFF  EF,4CC
06946:  MOVFF  EE,4CB
0694A:  MOVFF  3C6,4D2
0694E:  MOVFF  3C5,4D1
06952:  MOVFF  3C4,4D0
06956:  MOVFF  3C3,4CF
0695A:  MOVLW  03
0695C:  MOVLB  4
0695E:  MOVWF  xD4
06960:  MOVLW  C7
06962:  MOVWF  xD3
06964:  CLRF   xD8
06966:  CLRF   xD7
06968:  CLRF   xD6
0696A:  MOVLW  04
0696C:  MOVWF  xD5
0696E:  MOVLB  0
06970:  CALL   2204
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06974:  MOVLW  AA
06976:  MOVWF  FF6
06978:  MOVLW  16
0697A:  MOVWF  FF7
0697C:  MOVLW  00
0697E:  MOVWF  FF8
06980:  MOVLW  0B
06982:  MOVLB  8
06984:  MOVWF  x23
06986:  MOVLB  0
06988:  CALL   1B0A
0698C:  MOVFF  3C7,4C5
06990:  MOVLW  37
06992:  MOVLB  4
06994:  MOVWF  xC6
06996:  MOVLB  0
06998:  CALL   1CCC
0699C:  MOVLW  20
0699E:  MOVLB  8
069A0:  MOVWF  x66
069A2:  MOVLB  0
069A4:  CALL   1A88
069A8:  MOVFF  3C8,4C5
069AC:  MOVLW  37
069AE:  MOVLB  4
069B0:  MOVWF  xC6
069B2:  MOVLB  0
069B4:  CALL   1CCC
069B8:  MOVLW  20
069BA:  MOVLB  8
069BC:  MOVWF  x66
069BE:  MOVLB  0
069C0:  CALL   1A88
069C4:  MOVFF  3C9,4C5
069C8:  MOVLW  37
069CA:  MOVLB  4
069CC:  MOVWF  xC6
069CE:  MOVLB  0
069D0:  CALL   1CCC
069D4:  MOVLW  20
069D6:  MOVLB  8
069D8:  MOVWF  x66
069DA:  MOVLB  0
069DC:  CALL   1A88
069E0:  MOVFF  3CA,4C5
069E4:  MOVLW  37
069E6:  MOVLB  4
069E8:  MOVWF  xC6
069EA:  MOVLB  0
069EC:  CALL   1CCC
069F0:  MOVLW  0D
069F2:  MOVLB  8
069F4:  MOVWF  x66
069F6:  MOVLB  0
069F8:  CALL   1A88
069FC:  MOVLW  0A
069FE:  MOVLB  8
06A00:  MOVWF  x66
06A02:  MOVLB  0
06A04:  CALL   1A88
....................    fprintf(PC, "End Flash Read Address\r\n");
06A08:  MOVLW  CC
06A0A:  MOVWF  FF6
06A0C:  MOVLW  16
06A0E:  MOVWF  FF7
06A10:  MOVLW  00
06A12:  MOVWF  FF8
06A14:  CALL   1ADA
06A18:  GOTO   75B8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06B32:  MOVLW  E6
06B34:  MOVWF  FF6
06B36:  MOVLW  16
06B38:  MOVWF  FF7
06B3A:  MOVLW  00
06B3C:  MOVWF  FF8
06B3E:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06B42:  MOVLB  3
06B44:  MOVF   xC1,W
06B46:  MOVWF  FE9
06B48:  MOVF   xC2,W
06B4A:  MOVWF  FEA
06B4C:  MOVFF  FEF,3C3
06B50:  MOVFF  3C3,4C8
06B54:  MOVLW  01
06B56:  MOVLB  4
06B58:  MOVWF  xC9
06B5A:  MOVLB  0
06B5C:  CALL   3B8E
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
06B60:  MOVFF  3C2,3C4
06B64:  MOVFF  3C1,3C3
06B68:  CALL   57E2
....................    mode_misf_address_reset(parameter); // Reset the address area
06B6C:  MOVFF  3C2,3C4
06B70:  MOVFF  3C1,3C3
06B74:  GOTO   6A1C
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
06B78:  MOVLW  04
06B7A:  MOVWF  FF6
06B7C:  MOVLW  17
06B7E:  MOVWF  FF7
06B80:  MOVLW  00
06B82:  MOVWF  FF8
06B84:  CALL   1ADA
06B88:  GOTO   75C8 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
06B8C:  MOVLW  56
06B8E:  MOVWF  FF6
06B90:  MOVLW  17
06B92:  MOVWF  FF7
06B94:  MOVLW  00
06B96:  MOVWF  FF8
06B98:  CALL   1ADA
....................    flash_setting(mis_fm);
06B9C:  MOVFF  F1,4CE
06BA0:  MOVFF  F0,4CD
06BA4:  MOVFF  EF,4CC
06BA8:  MOVFF  EE,4CB
06BAC:  CALL   615A
....................    flash_setting(smf);
06BB0:  MOVFF  F5,4CE
06BB4:  MOVFF  F4,4CD
06BB8:  MOVFF  F3,4CC
06BBC:  MOVFF  F2,4CB
06BC0:  CALL   615A
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
06BC4:  MOVLB  3
06BC6:  CLRF   xC6
06BC8:  CLRF   xC5
06BCA:  CLRF   xC4
06BCC:  CLRF   xC3
06BCE:  CLRF   xCA
06BD0:  CLRF   xC9
06BD2:  MOVLW  10
06BD4:  MOVWF  xC8
06BD6:  CLRF   xC7
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
06BD8:  MOVFF  F1,4CE
06BDC:  MOVFF  F0,4CD
06BE0:  MOVFF  EF,4CC
06BE4:  MOVFF  EE,4CB
06BE8:  MOVFF  3C6,4D2
06BEC:  MOVFF  3C5,4D1
06BF0:  MOVFF  3C4,4D0
06BF4:  MOVFF  3C3,4CF
06BF8:  MOVLW  03
06BFA:  MOVLB  4
06BFC:  MOVWF  xD4
06BFE:  MOVLW  CB
06C00:  MOVWF  xD3
06C02:  CLRF   xD8
06C04:  CLRF   xD7
06C06:  MOVLW  01
06C08:  MOVWF  xD6
06C0A:  CLRF   xD5
06C0C:  MOVLB  0
06C0E:  CALL   2204
....................    write_data_bytes(smf, dest_address, read_data, 256);
06C12:  MOVFF  F5,866
06C16:  MOVFF  F4,865
06C1A:  MOVFF  F3,864
06C1E:  MOVFF  F2,863
06C22:  MOVFF  3CA,86A
06C26:  MOVFF  3C9,869
06C2A:  MOVFF  3C8,868
06C2E:  MOVFF  3C7,867
06C32:  MOVLW  03
06C34:  MOVLB  8
06C36:  MOVWF  x6C
06C38:  MOVLW  CB
06C3A:  MOVWF  x6B
06C3C:  MOVLW  01
06C3E:  MOVWF  x6E
06C40:  CLRF   x6D
06C42:  MOVLB  0
06C44:  CALL   320E
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
06C48:  MOVLW  6E
06C4A:  MOVWF  FF6
06C4C:  MOVLW  17
06C4E:  MOVWF  FF7
06C50:  MOVLW  00
06C52:  MOVWF  FF8
06C54:  CALL   1ADA
06C58:  GOTO   75D8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
06C5C:  MOVLW  84
06C5E:  MOVWF  FF6
06C60:  MOVLW  17
06C62:  MOVWF  FF7
06C64:  MOVLW  00
06C66:  MOVWF  FF8
06C68:  CALL   1ADA
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
06C6C:  MOVLW  9C
06C6E:  MOVWF  FF6
06C70:  MOVLW  17
06C72:  MOVWF  FF7
06C74:  MOVLW  00
06C76:  MOVWF  FF8
06C78:  CALL   1ADA
....................    for (int i = 0; i < 256; i++)
06C7C:  MOVLB  4
06C7E:  CLRF   xC3
06C80:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
06C82:  CLRF   03
06C84:  MOVLB  4
06C86:  MOVF   xC3,W
06C88:  ADDLW  C3
06C8A:  MOVWF  FE9
06C8C:  MOVLW  03
06C8E:  ADDWFC 03,W
06C90:  MOVWF  FEA
06C92:  MOVFF  FEF,4C4
06C96:  MOVFF  4C4,4C5
06C9A:  MOVLW  37
06C9C:  MOVWF  xC6
06C9E:  MOVLB  0
06CA0:  CALL   1CCC
06CA4:  MOVLW  20
06CA6:  MOVLB  8
06CA8:  MOVWF  x66
06CAA:  MOVLB  0
06CAC:  CALL   1A88
06CB0:  MOVLB  4
06CB2:  INCF   xC3,F
06CB4:  MOVLB  0
06CB6:  GOTO   6C82
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
06CBA:  MOVLW  A8
06CBC:  MOVWF  FF6
06CBE:  MOVLW  17
06CC0:  MOVWF  FF7
06CC2:  MOVLW  00
06CC4:  MOVWF  FF8
06CC6:  CALL   1ADA
06CCA:  GOTO   75E8 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
06CCE:  MOVLW  C0
06CD0:  MOVWF  FF6
06CD2:  MOVLW  17
06CD4:  MOVWF  FF7
06CD6:  MOVLW  00
06CD8:  MOVWF  FF8
06CDA:  CALL   1ADA
....................    flash_setting(smf);
06CDE:  MOVFF  F5,4CE
06CE2:  MOVFF  F4,4CD
06CE6:  MOVFF  F3,4CC
06CEA:  MOVFF  F2,4CB
06CEE:  CALL   615A
....................    unsigned int32 erase_address = 0x00000000; // Example address
06CF2:  MOVLB  3
06CF4:  CLRF   xC6
06CF6:  CLRF   xC5
06CF8:  CLRF   xC4
06CFA:  CLRF   xC3
....................    sector_erase(smf, erase_address); // Erase the sector
06CFC:  MOVFF  F5,40A
06D00:  MOVFF  F4,409
06D04:  MOVFF  F3,408
06D08:  MOVFF  F2,407
06D0C:  MOVFF  3C6,40E
06D10:  MOVFF  3C5,40D
06D14:  MOVFF  3C4,40C
06D18:  MOVFF  3C3,40B
06D1C:  MOVLB  0
06D1E:  CALL   5486
....................    fprintf(PC, "End Flash SMF Erase\r\n");
06D22:  MOVLW  D8
06D24:  MOVWF  FF6
06D26:  MOVLW  17
06D28:  MOVWF  FF7
06D2A:  MOVLW  00
06D2C:  MOVWF  FF8
06D2E:  CALL   1ADA
06D32:  GOTO   75F8 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06A1C:  MOVLW  EE
06A1E:  MOVWF  FF6
06A20:  MOVLW  17
06A22:  MOVWF  FF7
06A24:  MOVLW  00
06A26:  MOVWF  FF8
06A28:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A2C:  MOVLB  3
06A2E:  MOVF   xC3,W
06A30:  MOVWF  FE9
06A32:  MOVF   xC4,W
06A34:  MOVWF  FEA
06A36:  MOVFF  FEF,405
06A3A:  MOVFF  405,4C8
06A3E:  MOVLW  01
06A40:  MOVLB  4
06A42:  MOVWF  xC9
06A44:  MOVLB  0
06A46:  CALL   3B8E
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06A4A:  MOVLB  3
06A4C:  CLRF   xC5
06A4E:  CLRF   xC6
06A50:  CLRF   xC7
06A52:  CLRF   xC8
06A54:  CLRF   xC9
06A56:  CLRF   xCA
06A58:  CLRF   xCB
06A5A:  CLRF   xCC
06A5C:  CLRF   xCD
06A5E:  CLRF   xCE
06A60:  CLRF   xCF
06A62:  CLRF   xD0
06A64:  CLRF   xD1
06A66:  CLRF   xD2
06A68:  CLRF   xD3
06A6A:  CLRF   xD4
06A6C:  CLRF   xD5
06A6E:  CLRF   xD6
06A70:  CLRF   xD7
06A72:  CLRF   xD8
06A74:  CLRF   xD9
06A76:  CLRF   xDA
06A78:  CLRF   xDB
06A7A:  CLRF   xDC
06A7C:  CLRF   xDD
06A7E:  CLRF   xDE
06A80:  CLRF   xDF
06A82:  CLRF   xE0
06A84:  CLRF   xE1
06A86:  CLRF   xE2
06A88:  CLRF   xE3
06A8A:  CLRF   xE4
06A8C:  CLRF   xE5
06A8E:  CLRF   xE6
06A90:  CLRF   xE7
06A92:  CLRF   xE8
06A94:  CLRF   xE9
06A96:  CLRF   xEA
06A98:  CLRF   xEB
06A9A:  CLRF   xEC
06A9C:  CLRF   xED
06A9E:  CLRF   xEE
06AA0:  CLRF   xEF
06AA2:  CLRF   xF0
06AA4:  CLRF   xF1
06AA6:  CLRF   xF2
06AA8:  CLRF   xF3
06AAA:  CLRF   xF4
06AAC:  CLRF   xF5
06AAE:  CLRF   xF6
06AB0:  CLRF   xF7
06AB2:  CLRF   xF8
06AB4:  CLRF   xF9
06AB6:  CLRF   xFA
06AB8:  CLRF   xFB
06ABA:  CLRF   xFC
06ABC:  CLRF   xFD
06ABE:  CLRF   xFE
06AC0:  CLRF   xFF
06AC2:  MOVLB  4
06AC4:  CLRF   x00
06AC6:  CLRF   x01
06AC8:  CLRF   x02
06ACA:  CLRF   x03
06ACC:  CLRF   x04
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
06ACE:  MOVFF  F1,866
06AD2:  MOVFF  F0,865
06AD6:  MOVFF  EF,864
06ADA:  MOVFF  EE,863
06ADE:  MOVLB  8
06AE0:  CLRF   x6A
06AE2:  CLRF   x69
06AE4:  CLRF   x68
06AE6:  CLRF   x67
06AE8:  MOVLW  03
06AEA:  MOVWF  x6C
06AEC:  MOVLW  C5
06AEE:  MOVWF  x6B
06AF0:  CLRF   x6E
06AF2:  MOVLW  40
06AF4:  MOVWF  x6D
06AF6:  MOVLB  0
06AF8:  CALL   320E
....................    misf_init(); // Update the address area after writing
06AFC:  CALL   241C
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06B00:  MOVLB  3
06B02:  MOVF   xC3,W
06B04:  MOVWF  FE9
06B06:  MOVF   xC4,W
06B08:  MOVWF  FEA
06B0A:  MOVFF  FEF,405
06B0E:  MOVFF  405,4C8
06B12:  MOVLW  02
06B14:  MOVLB  4
06B16:  MOVWF  xC9
06B18:  MOVLB  0
06B1A:  CALL   3B8E
....................    fprintf(PC, "End Flash Address Reset\r\n");
06B1E:  MOVLW  0A
06B20:  MOVWF  FF6
06B22:  MOVLW  18
06B24:  MOVWF  FF7
06B26:  MOVLW  00
06B28:  MOVWF  FF8
06B2A:  CALL   1ADA
06B2E:  GOTO   6B78 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
06EEE:  MOVLW  01
06EF0:  MOVLB  3
06EF2:  ADDWF  xC1,W
06EF4:  MOVWF  FE9
06EF6:  MOVLW  00
06EF8:  ADDWFC xC2,W
06EFA:  MOVWF  FEA
06EFC:  MOVF   FEF,W
06EFE:  MOVLB  4
06F00:  CLRF   x13
06F02:  CLRF   x12
06F04:  CLRF   x11
06F06:  MOVWF  x10
06F08:  MOVFF  410,413
06F0C:  CLRF   x10
06F0E:  CLRF   x11
06F10:  CLRF   x12
06F12:  MOVLW  02
06F14:  MOVLB  3
06F16:  ADDWF  xC1,W
06F18:  MOVWF  FE9
06F1A:  MOVLW  00
06F1C:  ADDWFC xC2,W
06F1E:  MOVWF  FEA
06F20:  MOVF   FEF,W
06F22:  MOVLB  4
06F24:  CLRF   x18
06F26:  CLRF   x17
06F28:  CLRF   x16
06F2A:  MOVWF  x15
06F2C:  MOVFF  416,03
06F30:  MOVFF  415,02
06F34:  CLRF   00
06F36:  CLRF   01
06F38:  MOVF   00,W
06F3A:  IORWF  x10,F
06F3C:  MOVF   01,W
06F3E:  IORWF  x11,F
06F40:  MOVF   02,W
06F42:  IORWF  x12,F
06F44:  MOVF   03,W
06F46:  IORWF  x13,F
06F48:  MOVLW  03
06F4A:  MOVLB  3
06F4C:  ADDWF  xC1,W
06F4E:  MOVWF  FE9
06F50:  MOVLW  00
06F52:  ADDWFC xC2,W
06F54:  MOVWF  FEA
06F56:  MOVF   FEF,W
06F58:  MOVLB  4
06F5A:  CLRF   x18
06F5C:  CLRF   x17
06F5E:  CLRF   x16
06F60:  MOVWF  x15
06F62:  MOVFF  417,03
06F66:  MOVFF  416,02
06F6A:  MOVFF  415,01
06F6E:  CLRF   00
06F70:  MOVF   00,W
06F72:  IORWF  x10,F
06F74:  MOVF   01,W
06F76:  IORWF  x11,F
06F78:  MOVF   02,W
06F7A:  IORWF  x12,F
06F7C:  MOVF   03,W
06F7E:  IORWF  x13,F
06F80:  MOVLW  04
06F82:  MOVLB  3
06F84:  ADDWF  xC1,W
06F86:  MOVWF  FE9
06F88:  MOVLW  00
06F8A:  ADDWFC xC2,W
06F8C:  MOVWF  FEA
06F8E:  MOVF   FEF,W
06F90:  MOVWF  00
06F92:  CLRF   01
06F94:  CLRF   02
06F96:  CLRF   03
06F98:  MOVF   00,W
06F9A:  MOVLB  4
06F9C:  IORWF  x10,W
06F9E:  MOVLB  3
06FA0:  MOVWF  xC3
06FA2:  MOVF   01,W
06FA4:  MOVLB  4
06FA6:  IORWF  x11,W
06FA8:  MOVLB  3
06FAA:  MOVWF  xC4
06FAC:  MOVF   02,W
06FAE:  MOVLB  4
06FB0:  IORWF  x12,W
06FB2:  MOVLB  3
06FB4:  MOVWF  xC5
06FB6:  MOVF   03,W
06FB8:  MOVLB  4
06FBA:  IORWF  x13,W
06FBC:  MOVLB  3
06FBE:  MOVWF  xC6
06FC0:  MOVLW  07
06FC2:  ADDWF  xC1,W
06FC4:  MOVWF  FE9
06FC6:  MOVLW  00
06FC8:  ADDWFC xC2,W
06FCA:  MOVWF  FEA
06FCC:  MOVF   FEF,W
06FCE:  MOVLB  4
06FD0:  CLRF   x11
06FD2:  MOVWF  x10
06FD4:  MOVFF  410,411
06FD8:  CLRF   x10
06FDA:  MOVLW  08
06FDC:  MOVLB  3
06FDE:  ADDWF  xC1,W
06FE0:  MOVWF  FE9
06FE2:  MOVLW  00
06FE4:  ADDWFC xC2,W
06FE6:  MOVWF  FEA
06FE8:  MOVF   FEF,W
06FEA:  CLRF   03
06FEC:  MOVLB  4
06FEE:  IORWF  x10,W
06FF0:  MOVLB  3
06FF2:  MOVWF  xC7
06FF4:  MOVF   03,W
06FF6:  MOVLB  4
06FF8:  IORWF  x11,W
06FFA:  MOVLB  3
06FFC:  MOVWF  xC8
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06FFE:  CLRF   xC9
07000:  CLRF   xCA
07002:  CLRF   xCB
07004:  CLRF   xCC
07006:  CLRF   xCD
07008:  CLRF   xCE
0700A:  CLRF   xCF
0700C:  CLRF   xD0
0700E:  CLRF   xD1
07010:  CLRF   xD2
07012:  CLRF   xD3
07014:  CLRF   xD4
07016:  CLRF   xD5
07018:  CLRF   xD6
0701A:  CLRF   xD7
0701C:  CLRF   xD8
0701E:  CLRF   xD9
07020:  CLRF   xDA
07022:  CLRF   xDB
07024:  CLRF   xDC
07026:  CLRF   xDD
07028:  CLRF   xDE
0702A:  CLRF   xDF
0702C:  CLRF   xE0
0702E:  CLRF   xE1
07030:  CLRF   xE2
07032:  CLRF   xE3
07034:  CLRF   xE4
07036:  CLRF   xE5
07038:  CLRF   xE6
0703A:  CLRF   xE7
0703C:  CLRF   xE8
0703E:  CLRF   xE9
07040:  CLRF   xEA
07042:  CLRF   xEB
07044:  CLRF   xEC
07046:  CLRF   xED
07048:  CLRF   xEE
0704A:  CLRF   xEF
0704C:  CLRF   xF0
0704E:  CLRF   xF1
07050:  CLRF   xF2
07052:  CLRF   xF3
07054:  CLRF   xF4
07056:  CLRF   xF5
07058:  CLRF   xF6
0705A:  CLRF   xF7
0705C:  CLRF   xF8
0705E:  CLRF   xF9
07060:  CLRF   xFA
07062:  CLRF   xFB
07064:  CLRF   xFC
07066:  CLRF   xFD
07068:  CLRF   xFE
0706A:  CLRF   xFF
0706C:  MOVLB  4
0706E:  CLRF   x00
07070:  CLRF   x01
07072:  CLRF   x02
07074:  CLRF   x03
07076:  CLRF   x04
07078:  CLRF   x05
0707A:  CLRF   x06
0707C:  CLRF   x07
0707E:  CLRF   x08
....................    if(!is_connect(smf)) {
07080:  MOVFF  F5,866
07084:  MOVFF  F4,865
07088:  MOVFF  F3,864
0708C:  MOVFF  F2,863
07090:  MOVLB  0
07092:  CALL   213E
07096:  MOVF   01,F
07098:  BTFSS  FD8.2
0709A:  GOTO   70B2
....................       fprintf(PC, "SMF is not connected\r\n");
0709E:  MOVLW  24
070A0:  MOVWF  FF6
070A2:  MOVLW  18
070A4:  MOVWF  FF7
070A6:  MOVLW  00
070A8:  MOVWF  FF8
070AA:  CALL   1ADA
....................       return;
070AE:  GOTO   7310
....................    }
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
070B2:  MOVLW  3C
070B4:  MOVWF  FF6
070B6:  MOVLW  18
070B8:  MOVWF  FF7
070BA:  MOVLW  00
070BC:  MOVWF  FF8
070BE:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
070C2:  MOVLB  3
070C4:  MOVF   xC1,W
070C6:  MOVWF  FE9
070C8:  MOVF   xC2,W
070CA:  MOVWF  FEA
070CC:  MOVFF  FEF,410
070D0:  MOVFF  410,4C8
070D4:  MOVLW  01
070D6:  MOVLB  4
070D8:  MOVWF  xC9
070DA:  MOVLB  0
070DC:  CALL   3B8E
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
070E0:  MOVLW  5A
070E2:  MOVWF  FF6
070E4:  MOVLW  18
070E6:  MOVWF  FF7
070E8:  MOVLW  00
070EA:  MOVWF  FF8
070EC:  MOVLW  0E
070EE:  MOVLB  8
070F0:  MOVWF  x23
070F2:  MOVLB  0
070F4:  CALL   1B0A
070F8:  MOVFF  3C6,4C5
070FC:  MOVLW  37
070FE:  MOVLB  4
07100:  MOVWF  xC6
07102:  MOVLB  0
07104:  CALL   1CCC
07108:  MOVFF  3C5,4C5
0710C:  MOVLW  37
0710E:  MOVLB  4
07110:  MOVWF  xC6
07112:  MOVLB  0
07114:  CALL   1CCC
07118:  MOVFF  3C4,4C5
0711C:  MOVLW  37
0711E:  MOVLB  4
07120:  MOVWF  xC6
07122:  MOVLB  0
07124:  CALL   1CCC
07128:  MOVFF  3C3,4C5
0712C:  MOVLW  37
0712E:  MOVLB  4
07130:  MOVWF  xC6
07132:  MOVLB  0
07134:  CALL   1CCC
07138:  MOVLW  0D
0713A:  MOVLB  8
0713C:  MOVWF  x66
0713E:  MOVLB  0
07140:  CALL   1A88
07144:  MOVLW  0A
07146:  MOVLB  8
07148:  MOVWF  x66
0714A:  MOVLB  0
0714C:  CALL   1A88
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
07150:  MOVLW  70
07152:  MOVWF  FF6
07154:  MOVLW  18
07156:  MOVWF  FF7
07158:  MOVLW  00
0715A:  MOVWF  FF8
0715C:  MOVLW  0E
0715E:  MOVLB  8
07160:  MOVWF  x23
07162:  MOVLB  0
07164:  CALL   1B0A
07168:  MOVFF  3C8,4C5
0716C:  MOVLW  37
0716E:  MOVLB  4
07170:  MOVWF  xC6
07172:  MOVLB  0
07174:  CALL   1CCC
07178:  MOVFF  3C7,4C5
0717C:  MOVLW  37
0717E:  MOVLB  4
07180:  MOVWF  xC6
07182:  MOVLB  0
07184:  CALL   1CCC
07188:  MOVLW  0D
0718A:  MOVLB  8
0718C:  MOVWF  x66
0718E:  MOVLB  0
07190:  CALL   1A88
07194:  MOVLW  0A
07196:  MOVLB  8
07198:  MOVWF  x66
0719A:  MOVLB  0
0719C:  CALL   1A88
....................    fprintf(PC, "read data\r\n");
071A0:  MOVLW  86
071A2:  MOVWF  FF6
071A4:  MOVLW  18
071A6:  MOVWF  FF7
071A8:  MOVLW  00
071AA:  MOVWF  FF8
071AC:  CALL   1ADA
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
071B0:  MOVLB  4
071B2:  CLRF   x0A
071B4:  CLRF   x09
071B6:  MOVLB  0
071B8:  MOVLB  4
071BA:  MOVF   x0A,W
071BC:  MOVLB  3
071BE:  SUBWF  xC8,W
071C0:  BTFSC  FD8.0
071C2:  BRA    71CA
071C4:  MOVLB  0
071C6:  GOTO   72E2
071CA:  MOVLB  0
071CC:  BTFSS  FD8.2
071CE:  GOTO   71E6
071D2:  MOVLB  3
071D4:  MOVF   xC7,W
071D6:  MOVLB  4
071D8:  SUBWF  x09,W
071DA:  BTFSS  FD8.0
071DC:  BRA    71E4
071DE:  MOVLB  0
071E0:  GOTO   72E2
071E4:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
071E6:  MOVLB  4
071E8:  RLCF   x09,W
071EA:  MOVWF  02
071EC:  RLCF   x0A,W
071EE:  MOVWF  03
071F0:  RLCF   02,F
071F2:  RLCF   03,F
071F4:  RLCF   02,F
071F6:  RLCF   03,F
071F8:  RLCF   02,F
071FA:  RLCF   03,F
071FC:  RLCF   02,F
071FE:  RLCF   03,F
07200:  RLCF   02,F
07202:  RLCF   03,F
07204:  MOVLW  C0
07206:  ANDWF  02,F
07208:  MOVF   02,W
0720A:  MOVLB  3
0720C:  ADDWF  xC3,W
0720E:  MOVLB  4
07210:  MOVWF  x0B
07212:  MOVF   03,W
07214:  MOVLB  3
07216:  ADDWFC xC4,W
07218:  MOVLB  4
0721A:  MOVWF  x0C
0721C:  MOVLW  00
0721E:  MOVLB  3
07220:  ADDWFC xC5,W
07222:  MOVLB  4
07224:  MOVWF  x0D
07226:  MOVLW  00
07228:  MOVLB  3
0722A:  ADDWFC xC6,W
0722C:  MOVLB  4
0722E:  MOVWF  x0E
07230:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07232:  MOVFF  F5,4CE
07236:  MOVFF  F4,4CD
0723A:  MOVFF  F3,4CC
0723E:  MOVFF  F2,4CB
07242:  MOVFF  40E,4D2
07246:  MOVFF  40D,4D1
0724A:  MOVFF  40C,4D0
0724E:  MOVFF  40B,4CF
07252:  MOVLW  03
07254:  MOVLB  4
07256:  MOVWF  xD4
07258:  MOVLW  C9
0725A:  MOVWF  xD3
0725C:  CLRF   xD8
0725E:  CLRF   xD7
07260:  CLRF   xD6
07262:  MOVLW  40
07264:  MOVWF  xD5
07266:  MOVLB  0
07268:  CALL   2204
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
0726C:  MOVLB  4
0726E:  CLRF   x0F
07270:  MOVLB  0
07272:  MOVLB  4
07274:  MOVF   x0F,W
07276:  SUBLW  3F
07278:  BTFSC  FD8.0
0727A:  BRA    7282
0727C:  MOVLB  0
0727E:  GOTO   72BC
07282:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
07284:  CLRF   03
07286:  MOVLB  4
07288:  MOVF   x0F,W
0728A:  ADDLW  C9
0728C:  MOVWF  FE9
0728E:  MOVLW  03
07290:  ADDWFC 03,W
07292:  MOVWF  FEA
07294:  MOVFF  FEF,410
07298:  MOVFF  410,4C5
0729C:  MOVLW  37
0729E:  MOVWF  xC6
072A0:  MOVLB  0
072A2:  CALL   1CCC
072A6:  MOVLW  20
072A8:  MOVLB  8
072AA:  MOVWF  x66
072AC:  MOVLB  0
072AE:  CALL   1A88
072B2:  MOVLB  4
072B4:  INCF   x0F,F
072B6:  MOVLB  0
072B8:  GOTO   7272
....................       }
....................       fprintf(PC, "\r\n");
072BC:  MOVLW  0D
072BE:  MOVLB  8
072C0:  MOVWF  x66
072C2:  MOVLB  0
072C4:  CALL   1A88
072C8:  MOVLW  0A
072CA:  MOVLB  8
072CC:  MOVWF  x66
072CE:  MOVLB  0
072D0:  CALL   1A88
072D4:  MOVLB  4
072D6:  INCF   x09,F
072D8:  BTFSC  FD8.2
072DA:  INCF   x0A,F
072DC:  MOVLB  0
072DE:  GOTO   71B8
....................    }
.................... 
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
072E2:  MOVLW  92
072E4:  MOVWF  FF6
072E6:  MOVLW  18
072E8:  MOVWF  FF7
072EA:  MOVLW  00
072EC:  MOVWF  FF8
072EE:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
072F2:  MOVLB  3
072F4:  MOVF   xC1,W
072F6:  MOVWF  FE9
072F8:  MOVF   xC2,W
072FA:  MOVWF  FEA
072FC:  MOVFF  FEF,410
07300:  MOVFF  410,4C8
07304:  MOVLW  02
07306:  MOVLB  4
07308:  MOVWF  xC9
0730A:  MOVLB  0
0730C:  CALL   3B8E
07310:  GOTO   7618 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
07314:  MOVLW  B0
07316:  MOVWF  FF6
07318:  MOVLW  18
0731A:  MOVWF  FF7
0731C:  MOVLW  00
0731E:  MOVWF  FF8
07320:  CALL   1ADA
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
07324:  MOVLB  3
07326:  MOVF   xC1,W
07328:  MOVWF  FE9
0732A:  MOVF   xC2,W
0732C:  MOVWF  FEA
0732E:  MOVFF  FEF,3C3
....................    piclog_make(cmd, 0x00); // Log the command execution
07332:  MOVFF  3C3,4C8
07336:  MOVLB  4
07338:  CLRF   xC9
0733A:  MOVLB  0
0733C:  CALL   3B8E
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
07340:  MOVLB  3
07342:  CLRF   xC7
07344:  CLRF   xC6
07346:  CLRF   xC5
07348:  CLRF   xC4
0734A:  MOVLB  0
0734C:  MOVLB  3
0734E:  MOVF   xC7,F
07350:  BTFSC  FD8.2
07352:  BRA    735A
07354:  MOVLB  0
07356:  GOTO   73BA
0735A:  MOVLB  0
0735C:  MOVLB  3
0735E:  MOVF   xC6,W
07360:  SUBLW  F4
07362:  BTFSC  FD8.0
07364:  BRA    736C
07366:  MOVLB  0
07368:  GOTO   73BA
0736C:  MOVLB  0
0736E:  BTFSS  FD8.2
07370:  GOTO   7386
07374:  MOVLB  3
07376:  MOVF   xC5,W
07378:  SUBLW  23
0737A:  BTFSC  FD8.0
0737C:  BRA    7384
0737E:  MOVLB  0
07380:  GOTO   73BA
07384:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07386:  MOVFF  F5,40A
0738A:  MOVFF  F4,409
0738E:  MOVFF  F3,408
07392:  MOVFF  F2,407
07396:  MOVFF  3C7,40E
0739A:  MOVFF  3C6,40D
0739E:  MOVFF  3C5,40C
073A2:  MOVFF  3C4,40B
073A6:  CALL   5486
073AA:  MOVLW  01
073AC:  MOVLB  3
073AE:  ADDWF  xC6,F
073B0:  MOVLW  00
073B2:  ADDWFC xC7,F
073B4:  MOVLB  0
073B6:  GOTO   734C
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
073BA:  MOVFF  3C3,4C8
073BE:  MOVLW  02
073C0:  MOVLB  4
073C2:  MOVWF  xC9
073C4:  MOVLB  0
073C6:  CALL   3B8E
....................    fprintf(PC, "End SMF Erase All\r\n");
073CA:  MOVLW  C6
073CC:  MOVWF  FF6
073CE:  MOVLW  18
073D0:  MOVWF  FF7
073D2:  MOVLW  00
073D4:  MOVWF  FF8
073D6:  CALL   1ADA
073DA:  GOTO   7628 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
06D3A:  MOVLW  DA
06D3C:  MOVWF  FF6
06D3E:  MOVLW  18
06D40:  MOVWF  FF7
06D42:  MOVLW  00
06D44:  MOVWF  FF8
06D46:  CALL   1ADA
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06D4A:  MOVLB  3
06D4C:  MOVF   xC1,W
06D4E:  MOVWF  FE9
06D50:  MOVF   xC2,W
06D52:  MOVWF  FEA
06D54:  MOVFF  FEF,407
06D58:  MOVFF  407,4C8
06D5C:  MOVLW  01
06D5E:  MOVLB  4
06D60:  MOVWF  xC9
06D62:  MOVLB  0
06D64:  CALL   3B8E
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06D68:  MOVLB  3
06D6A:  CLRF   xC3
06D6C:  CLRF   xC4
06D6E:  CLRF   xC5
06D70:  CLRF   xC6
06D72:  CLRF   xC7
06D74:  CLRF   xC8
06D76:  CLRF   xC9
06D78:  CLRF   xCA
06D7A:  CLRF   xCB
06D7C:  CLRF   xCC
06D7E:  CLRF   xCD
06D80:  CLRF   xCE
06D82:  CLRF   xCF
06D84:  CLRF   xD0
06D86:  CLRF   xD1
06D88:  CLRF   xD2
06D8A:  CLRF   xD3
06D8C:  CLRF   xD4
06D8E:  CLRF   xD5
06D90:  CLRF   xD6
06D92:  CLRF   xD7
06D94:  CLRF   xD8
06D96:  CLRF   xD9
06D98:  CLRF   xDA
06D9A:  CLRF   xDB
06D9C:  CLRF   xDC
06D9E:  CLRF   xDD
06DA0:  CLRF   xDE
06DA2:  CLRF   xDF
06DA4:  CLRF   xE0
06DA6:  CLRF   xE1
06DA8:  CLRF   xE2
06DAA:  CLRF   xE3
06DAC:  CLRF   xE4
06DAE:  CLRF   xE5
06DB0:  CLRF   xE6
06DB2:  CLRF   xE7
06DB4:  CLRF   xE8
06DB6:  CLRF   xE9
06DB8:  CLRF   xEA
06DBA:  CLRF   xEB
06DBC:  CLRF   xEC
06DBE:  CLRF   xED
06DC0:  CLRF   xEE
06DC2:  CLRF   xEF
06DC4:  CLRF   xF0
06DC6:  CLRF   xF1
06DC8:  CLRF   xF2
06DCA:  CLRF   xF3
06DCC:  CLRF   xF4
06DCE:  CLRF   xF5
06DD0:  CLRF   xF6
06DD2:  CLRF   xF7
06DD4:  CLRF   xF8
06DD6:  CLRF   xF9
06DD8:  CLRF   xFA
06DDA:  CLRF   xFB
06DDC:  CLRF   xFC
06DDE:  CLRF   xFD
06DE0:  CLRF   xFE
06DE2:  CLRF   xFF
06DE4:  MOVLB  4
06DE6:  CLRF   x00
06DE8:  CLRF   x01
06DEA:  CLRF   x02
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
06DEC:  MOVLW  04
06DEE:  MOVWF  x06
06DF0:  MOVLW  EC
06DF2:  MOVWF  x05
06DF4:  CLRF   x04
06DF6:  CLRF   x03
06DF8:  MOVLB  0
06DFA:  MOVLB  4
06DFC:  MOVF   x06,W
06DFE:  SUBLW  05
06E00:  BTFSC  FD8.0
06E02:  BRA    6E0A
06E04:  MOVLB  0
06E06:  GOTO   6E88
06E0A:  MOVLB  0
06E0C:  BTFSS  FD8.2
06E0E:  GOTO   6E54
06E12:  MOVLB  4
06E14:  MOVF   x05,W
06E16:  SUBLW  6B
06E18:  BTFSC  FD8.0
06E1A:  BRA    6E22
06E1C:  MOVLB  0
06E1E:  GOTO   6E88
06E22:  MOVLB  0
06E24:  BTFSS  FD8.2
06E26:  GOTO   6E54
06E2A:  MOVLB  4
06E2C:  MOVF   x04,W
06E2E:  SUBLW  FF
06E30:  BTFSC  FD8.0
06E32:  BRA    6E3A
06E34:  MOVLB  0
06E36:  GOTO   6E88
06E3A:  MOVLB  0
06E3C:  BTFSS  FD8.2
06E3E:  GOTO   6E54
06E42:  MOVLB  4
06E44:  MOVF   x03,W
06E46:  SUBLW  FE
06E48:  BTFSC  FD8.0
06E4A:  BRA    6E52
06E4C:  MOVLB  0
06E4E:  GOTO   6E88
06E52:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06E54:  MOVFF  F5,40A
06E58:  MOVFF  F4,409
06E5C:  MOVFF  F3,408
06E60:  MOVFF  F2,407
06E64:  MOVFF  406,40E
06E68:  MOVFF  405,40D
06E6C:  MOVFF  404,40C
06E70:  MOVFF  403,40B
06E74:  CALL   5486
06E78:  MOVLW  01
06E7A:  MOVLB  4
06E7C:  ADDWF  x05,F
06E7E:  MOVLW  00
06E80:  ADDWFC x06,F
06E82:  MOVLB  0
06E84:  GOTO   6DFA
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
06E88:  MOVFF  F5,866
06E8C:  MOVFF  F4,865
06E90:  MOVFF  F3,864
06E94:  MOVFF  F2,863
06E98:  MOVLW  04
06E9A:  MOVLB  8
06E9C:  MOVWF  x6A
06E9E:  MOVLW  EC
06EA0:  MOVWF  x69
06EA2:  CLRF   x68
06EA4:  CLRF   x67
06EA6:  MOVLW  03
06EA8:  MOVWF  x6C
06EAA:  MOVLW  C3
06EAC:  MOVWF  x6B
06EAE:  CLRF   x6E
06EB0:  MOVLW  40
06EB2:  MOVWF  x6D
06EB4:  MOVLB  0
06EB6:  CALL   320E
....................    smf_init(); // Update the address area after writing
06EBA:  GOTO   6D36
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06EBE:  MOVLB  3
06EC0:  MOVF   xC1,W
06EC2:  MOVWF  FE9
06EC4:  MOVF   xC2,W
06EC6:  MOVWF  FEA
06EC8:  MOVFF  FEF,407
06ECC:  MOVFF  407,4C8
06ED0:  MOVLW  02
06ED2:  MOVLB  4
06ED4:  MOVWF  xC9
06ED6:  MOVLB  0
06ED8:  CALL   3B8E
....................    fprintf(PC, "End SMF Reset\r\n");
06EDC:  MOVLW  EC
06EDE:  MOVWF  FF6
06EE0:  MOVLW  18
06EE2:  MOVWF  FF7
06EE4:  MOVLW  00
06EE6:  MOVWF  FF8
06EE8:  CALL   1ADA
06EEC:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
09734:  CLRF   FF8
09736:  BCF    FD0.7
09738:  BSF    07.7
0973A:  MOVLB  E
0973C:  MOVLW  55
0973E:  MOVWF  F7E
09740:  MOVLW  AA
09742:  MOVWF  F7E
09744:  BCF    F66.6
09746:  MOVLW  F9
09748:  MOVWF  x2C
0974A:  MOVLW  00
0974C:  MOVWF  x2E
0974E:  MOVLW  40
09750:  MOVWF  x12
09752:  MOVLW  30
09754:  MOVWF  x13
09756:  MOVLW  20
09758:  MOVWF  x22
0975A:  MOVLW  55
0975C:  MOVWF  F7E
0975E:  MOVLW  AA
09760:  MOVWF  F7E
09762:  BSF    F66.6
09764:  CLRF   F9B
09766:  CLRF   F64
09768:  CLRF   F65
0976A:  CLRF   F66
0976C:  MOVLW  02
0976E:  MOVWF  FD3
09770:  CLRF   1B
09772:  MOVLB  F
09774:  BSF    x2D.3
09776:  MOVLW  A0
09778:  MOVWF  x2B
0977A:  MOVLW  01
0977C:  MOVWF  x2C
0977E:  MOVLW  A6
09780:  MOVWF  x2E
09782:  MOVLW  90
09784:  MOVWF  x2F
09786:  BCF    F93.6
09788:  BSF    F8A.6
0978A:  BCF    FC6.5
0978C:  MOVLW  40
0978E:  MOVWF  FC7
09790:  MOVLW  13
09792:  MOVWF  FC8
09794:  MOVLW  2A
09796:  MOVWF  FC6
09798:  BCF    F92.1
0979A:  BSF    F92.0
0979C:  BCF    F92.3
0979E:  BSF    F96.4
097A0:  BCF    F96.1
097A2:  BCF    F95.7
097A4:  BCF    F8C.7
097A6:  BSF    F93.4
097A8:  BCF    F93.5
097AA:  BCF    F93.2
097AC:  BCF    F8A.2
097AE:  CLRF   1F
097B0:  CLRF   1E
097B2:  CLRF   1D
097B4:  CLRF   1C
097B6:  CLRF   23
097B8:  CLRF   22
097BA:  CLRF   21
097BC:  CLRF   20
097BE:  CLRF   25
097C0:  CLRF   24
097C2:  CLRF   46
097C4:  BCF    47.0
097C6:  MOVLB  3
097C8:  CLRF   x57
097CA:  CLRF   x56
097CC:  CLRF   x55
097CE:  CLRF   x54
097D0:  CLRF   x59
097D2:  CLRF   x58
097D4:  CLRF   x5B
097D6:  CLRF   x5A
097D8:  CLRF   x5D
097DA:  CLRF   x5C
097DC:  CLRF   x5F
097DE:  CLRF   x5E
097E0:  CLRF   x7D
097E2:  MOVLW  1E
097E4:  MOVWF  x82
097E6:  CLRF   x84
097E8:  CLRF   x83
097EA:  MOVLB  E
097EC:  CLRF   xD9
097EE:  CLRF   xDA
097F0:  CLRF   xCE
097F2:  CLRF   xCF
097F4:  CLRF   xD0
097F6:  CLRF   xD1
097F8:  CLRF   xD2
097FA:  CLRF   xD3
097FC:  CLRF   xD4
097FE:  CLRF   xD5
09800:  CLRF   x45
09802:  CLRF   x46
09804:  CLRF   x47
09806:  BCF    x8D.7
09808:  BCF    x8D.6
0980A:  BCF    x8D.5
0980C:  MOVLB  F
0980E:  CLRF   x53
09810:  CLRF   x38
09812:  CLRF   x37
09814:  MOVLB  0
09816:  CLRF   26
09818:  CLRF   27
0981A:  CLRF   28
0981C:  CLRF   29
0981E:  CLRF   2A
09820:  CLRF   2B
09822:  CLRF   2C
09824:  CLRF   2D
09826:  CLRF   2E
09828:  CLRF   2F
0982A:  CLRF   30
0982C:  CLRF   31
0982E:  CLRF   32
09830:  CLRF   33
09832:  CLRF   34
09834:  CLRF   35
09836:  CLRF   36
09838:  CLRF   37
0983A:  CLRF   38
0983C:  CLRF   39
0983E:  CLRF   3A
09840:  CLRF   3B
09842:  CLRF   3C
09844:  CLRF   3D
09846:  CLRF   3E
09848:  CLRF   3F
0984A:  CLRF   40
0984C:  CLRF   41
0984E:  CLRF   42
09850:  CLRF   43
09852:  CLRF   44
09854:  CLRF   45
09856:  MOVLW  03
09858:  MOVWF  48
0985A:  CLRF   49
0985C:  CLRF   4A
0985E:  CLRF   4B
09860:  CLRF   4C
09862:  CLRF   4D
09864:  CLRF   4E
09866:  CLRF   4F
09868:  CLRF   50
0986A:  CLRF   51
0986C:  CLRF   52
0986E:  CLRF   53
09870:  CLRF   54
09872:  CLRF   55
09874:  CLRF   56
09876:  CLRF   57
09878:  CLRF   58
0987A:  CLRF   59
0987C:  CLRF   5A
0987E:  CLRF   5B
09880:  CLRF   5C
09882:  CLRF   5D
09884:  CLRF   5E
09886:  CLRF   5F
09888:  CLRF   x60
0988A:  CLRF   x61
0988C:  CLRF   x62
0988E:  CLRF   x63
09890:  CLRF   x64
09892:  CLRF   x65
09894:  CLRF   x66
09896:  CLRF   x67
09898:  CLRF   x68
0989A:  CLRF   x69
0989C:  CLRF   x6A
0989E:  CLRF   x6B
098A0:  CLRF   x6C
098A2:  CLRF   x6D
098A4:  CLRF   x6E
098A6:  CLRF   x6F
098A8:  CLRF   x70
098AA:  CLRF   x71
098AC:  CLRF   x72
098AE:  CLRF   x73
098B0:  CLRF   x74
098B2:  CLRF   x75
098B4:  CLRF   x76
098B6:  CLRF   x77
098B8:  CLRF   x78
098BA:  CLRF   x79
098BC:  CLRF   x7A
098BE:  CLRF   x7B
098C0:  CLRF   x7C
098C2:  CLRF   x7D
098C4:  CLRF   x7E
098C6:  CLRF   x7F
098C8:  CLRF   x80
098CA:  CLRF   x81
098CC:  CLRF   x82
098CE:  CLRF   x83
098D0:  CLRF   x84
098D2:  CLRF   x85
098D4:  CLRF   x86
098D6:  CLRF   x87
098D8:  CLRF   x88
098DA:  CLRF   x89
098DC:  CLRF   x8A
098DE:  CLRF   x8B
098E0:  CLRF   x8C
098E2:  CLRF   x8D
098E4:  CLRF   x8E
098E6:  CLRF   x8F
098E8:  CLRF   x90
098EA:  CLRF   x91
098EC:  CLRF   x92
098EE:  CLRF   x93
098F0:  CLRF   x94
098F2:  CLRF   x95
098F4:  CLRF   x96
098F6:  CLRF   x97
098F8:  CLRF   x98
098FA:  CLRF   x99
098FC:  CLRF   x9A
098FE:  CLRF   x9B
09900:  CLRF   x9C
09902:  CLRF   x9D
09904:  CLRF   x9E
09906:  CLRF   x9F
09908:  CLRF   xA0
0990A:  CLRF   xA1
0990C:  CLRF   xA2
0990E:  CLRF   xA3
09910:  CLRF   xA4
09912:  CLRF   xA5
09914:  CLRF   xA6
09916:  CLRF   xA7
09918:  CLRF   xA8
0991A:  CLRF   xA9
0991C:  CLRF   xAA
0991E:  CLRF   xAB
09920:  CLRF   xAC
09922:  CLRF   xAD
09924:  CLRF   xAE
09926:  CLRF   xAF
09928:  CLRF   xB0
0992A:  CLRF   xB1
0992C:  CLRF   xB2
0992E:  CLRF   xB3
09930:  CLRF   xB4
09932:  CLRF   xB5
09934:  CLRF   xB6
09936:  CLRF   xB7
09938:  CLRF   xB8
0993A:  CLRF   xB9
0993C:  CLRF   xBA
0993E:  CLRF   xBB
09940:  CLRF   xBC
09942:  CLRF   xBD
09944:  CLRF   xBE
09946:  CLRF   xBF
09948:  CLRF   xC0
0994A:  CLRF   xC1
0994C:  CLRF   xC2
0994E:  CLRF   xC3
09950:  CLRF   xC4
09952:  CLRF   xC5
09954:  CLRF   xC6
09956:  CLRF   xC7
09958:  CLRF   xC8
0995A:  CLRF   xC9
0995C:  CLRF   xCA
0995E:  CLRF   xCB
09960:  CLRF   xCC
09962:  CLRF   xCD
09964:  CLRF   xCE
09966:  CLRF   xCF
09968:  CLRF   xD0
0996A:  CLRF   xD1
0996C:  CLRF   xD2
0996E:  CLRF   xD3
09970:  CLRF   xD4
09972:  CLRF   xD5
09974:  CLRF   xD6
09976:  CLRF   xD7
09978:  CLRF   xD8
0997A:  CLRF   xD9
0997C:  CLRF   xDA
0997E:  CLRF   xDB
09980:  CLRF   xDC
09982:  CLRF   xDD
09984:  CLRF   xDE
09986:  CLRF   xDF
09988:  CLRF   xE0
0998A:  CLRF   xE1
0998C:  CLRF   xE2
0998E:  CLRF   xE3
09990:  CLRF   xE4
09992:  CLRF   xE5
09994:  CLRF   xE6
09996:  CLRF   xE7
09998:  CLRF   xE8
0999A:  CLRF   xE9
0999C:  CLRF   xEA
0999E:  CLRF   xEB
099A0:  CLRF   xEC
099A2:  CLRF   xED
099A4:  CLRF   xEE
099A6:  CLRF   xEF
099A8:  MOVLW  05
099AA:  MOVWF  xF0
099AC:  MOVLW  7C
099AE:  MOVWF  xF1
099B0:  MOVLW  01
099B2:  MOVWF  xF2
099B4:  MOVLW  01
099B6:  MOVWF  xF3
099B8:  MOVLW  02
099BA:  MOVWF  xF4
099BC:  MOVLW  7C
099BE:  MOVWF  xF5
099C0:  CLRF   xF6
099C2:  MOVLW  09
099C4:  MOVWF  xF7
099C6:  MOVLW  01
099C8:  MOVWF  xF8
099CA:  CLRF   xF9
099CC:  MOVLW  02
099CE:  MOVWF  xFA
099D0:  MOVLW  01
099D2:  MOVWF  xFB
099D4:  CLRF   xFC
099D6:  CLRF   xFD
099D8:  CLRF   xFE
099DA:  CLRF   xFF
099DC:  MOVLB  1
099DE:  CLRF   x00
099E0:  CLRF   x01
099E2:  CLRF   x02
099E4:  CLRF   x03
099E6:  CLRF   x04
099E8:  CLRF   x05
099EA:  CLRF   x06
099EC:  CLRF   x07
099EE:  CLRF   x08
099F0:  CLRF   x09
099F2:  CLRF   x0A
099F4:  CLRF   x0B
099F6:  CLRF   x0C
099F8:  CLRF   x0D
099FA:  CLRF   x0E
099FC:  CLRF   x0F
099FE:  CLRF   x10
09A00:  CLRF   x11
09A02:  CLRF   x12
09A04:  CLRF   x13
09A06:  CLRF   x14
09A08:  CLRF   x15
09A0A:  CLRF   x16
09A0C:  CLRF   x17
09A0E:  CLRF   x18
09A10:  CLRF   x19
09A12:  CLRF   x1A
09A14:  CLRF   x1B
09A16:  CLRF   x1C
09A18:  CLRF   x1D
09A1A:  CLRF   x1E
09A1C:  CLRF   x1F
09A1E:  CLRF   x20
09A20:  CLRF   x21
09A22:  CLRF   x22
09A24:  CLRF   x23
09A26:  CLRF   x24
09A28:  CLRF   x25
09A2A:  CLRF   x26
09A2C:  CLRF   x27
09A2E:  CLRF   x28
09A30:  CLRF   x29
09A32:  CLRF   x2A
09A34:  CLRF   x2B
09A36:  CLRF   x2C
09A38:  CLRF   x2D
09A3A:  CLRF   x2E
09A3C:  CLRF   x2F
09A3E:  CLRF   x30
09A40:  CLRF   x31
09A42:  CLRF   x32
09A44:  CLRF   x33
09A46:  CLRF   x34
09A48:  CLRF   x35
09A4A:  CLRF   x36
09A4C:  CLRF   x37
09A4E:  CLRF   x38
09A50:  CLRF   x39
09A52:  CLRF   x3A
09A54:  CLRF   x3B
09A56:  CLRF   x3C
09A58:  CLRF   x3D
09A5A:  CLRF   x3E
09A5C:  CLRF   x3F
09A5E:  CLRF   x40
09A60:  CLRF   x41
09A62:  CLRF   x42
09A64:  CLRF   x43
09A66:  CLRF   x44
09A68:  CLRF   x45
09A6A:  CLRF   x46
09A6C:  CLRF   x47
09A6E:  CLRF   x48
09A70:  CLRF   x49
09A72:  CLRF   x4A
09A74:  CLRF   x4B
09A76:  CLRF   x4C
09A78:  CLRF   x4D
09A7A:  CLRF   x4E
09A7C:  CLRF   x4F
09A7E:  CLRF   x50
09A80:  CLRF   x51
09A82:  CLRF   x52
09A84:  CLRF   x53
09A86:  CLRF   x54
09A88:  CLRF   x55
09A8A:  CLRF   x56
09A8C:  CLRF   x57
09A8E:  CLRF   x58
09A90:  CLRF   x59
09A92:  CLRF   x5A
09A94:  CLRF   x5B
09A96:  CLRF   x5C
09A98:  CLRF   x5D
09A9A:  CLRF   x5E
09A9C:  CLRF   x5F
09A9E:  CLRF   x60
09AA0:  CLRF   x61
09AA2:  CLRF   x62
09AA4:  CLRF   x63
09AA6:  CLRF   x64
09AA8:  CLRF   x65
09AAA:  CLRF   x66
09AAC:  CLRF   x67
09AAE:  CLRF   x68
09AB0:  CLRF   x69
09AB2:  CLRF   x6A
09AB4:  CLRF   x6B
09AB6:  CLRF   x6C
09AB8:  CLRF   x6D
09ABA:  CLRF   x6E
09ABC:  CLRF   x6F
09ABE:  CLRF   x70
09AC0:  CLRF   x71
09AC2:  CLRF   x72
09AC4:  CLRF   x73
09AC6:  CLRF   x74
09AC8:  CLRF   x75
09ACA:  CLRF   x76
09ACC:  CLRF   x77
09ACE:  CLRF   x78
09AD0:  CLRF   x79
09AD2:  CLRF   x7A
09AD4:  CLRF   x7B
09AD6:  CLRF   x7C
09AD8:  CLRF   x7D
09ADA:  CLRF   x7E
09ADC:  CLRF   x7F
09ADE:  CLRF   x80
09AE0:  CLRF   x81
09AE2:  CLRF   x82
09AE4:  CLRF   x83
09AE6:  CLRF   x84
09AE8:  CLRF   x85
09AEA:  CLRF   x86
09AEC:  CLRF   x87
09AEE:  CLRF   x88
09AF0:  CLRF   x89
09AF2:  CLRF   x8A
09AF4:  CLRF   x8B
09AF6:  CLRF   x8C
09AF8:  CLRF   x8D
09AFA:  CLRF   x8E
09AFC:  CLRF   x8F
09AFE:  CLRF   x90
09B00:  CLRF   x91
09B02:  CLRF   x92
09B04:  CLRF   x93
09B06:  CLRF   x94
09B08:  CLRF   x95
09B0A:  CLRF   x96
09B0C:  CLRF   x97
09B0E:  CLRF   x98
09B10:  CLRF   x99
09B12:  CLRF   x9A
09B14:  CLRF   x9B
09B16:  CLRF   x9C
09B18:  CLRF   x9D
09B1A:  CLRF   x9E
09B1C:  CLRF   x9F
09B1E:  CLRF   xA0
09B20:  CLRF   xA1
09B22:  CLRF   xA2
09B24:  CLRF   xA3
09B26:  CLRF   xA4
09B28:  CLRF   xA5
09B2A:  CLRF   xA6
09B2C:  CLRF   xA7
09B2E:  CLRF   xA8
09B30:  CLRF   xA9
09B32:  CLRF   xAA
09B34:  CLRF   xAB
09B36:  CLRF   xAC
09B38:  CLRF   xAD
09B3A:  CLRF   xAE
09B3C:  CLRF   xAF
09B3E:  CLRF   xB0
09B40:  CLRF   xB1
09B42:  CLRF   xB2
09B44:  CLRF   xB3
09B46:  CLRF   xB4
09B48:  CLRF   xB5
09B4A:  CLRF   xB6
09B4C:  CLRF   xB7
09B4E:  CLRF   xB8
09B50:  CLRF   xB9
09B52:  CLRF   xBA
09B54:  CLRF   xBB
09B56:  CLRF   xBC
09B58:  CLRF   xBD
09B5A:  CLRF   xBE
09B5C:  CLRF   xBF
09B5E:  CLRF   xC0
09B60:  CLRF   xC1
09B62:  CLRF   xC2
09B64:  CLRF   xC3
09B66:  CLRF   xC4
09B68:  CLRF   xC5
09B6A:  CLRF   xC6
09B6C:  CLRF   xC7
09B6E:  CLRF   xC8
09B70:  CLRF   xC9
09B72:  CLRF   xCA
09B74:  CLRF   xCB
09B76:  CLRF   xCC
09B78:  CLRF   xCD
09B7A:  CLRF   xCE
09B7C:  CLRF   xCF
09B7E:  CLRF   xD0
09B80:  CLRF   xD1
09B82:  CLRF   xD2
09B84:  CLRF   xD3
09B86:  CLRF   xD4
09B88:  CLRF   xD5
09B8A:  CLRF   xD6
09B8C:  CLRF   xD7
09B8E:  CLRF   xD8
09B90:  CLRF   xD9
09B92:  CLRF   xDA
09B94:  CLRF   xDB
09B96:  CLRF   xDC
09B98:  CLRF   xDD
09B9A:  CLRF   xDE
09B9C:  CLRF   xDF
09B9E:  CLRF   xE0
09BA0:  CLRF   xE1
09BA2:  CLRF   xE2
09BA4:  CLRF   xE3
09BA6:  CLRF   xE4
09BA8:  CLRF   xE5
09BAA:  CLRF   xE6
09BAC:  CLRF   xE7
09BAE:  CLRF   xE8
09BB0:  CLRF   xE9
09BB2:  CLRF   xEA
09BB4:  CLRF   xEB
09BB6:  CLRF   xEC
09BB8:  CLRF   xED
09BBA:  CLRF   xEE
09BBC:  CLRF   xEF
09BBE:  CLRF   xF0
09BC0:  CLRF   xF1
09BC2:  CLRF   xF2
09BC4:  CLRF   xF3
09BC6:  CLRF   xF4
09BC8:  CLRF   xF5
09BCA:  CLRF   xF6
09BCC:  CLRF   xF7
09BCE:  CLRF   xF8
09BD0:  CLRF   xF9
09BD2:  CLRF   xFA
09BD4:  CLRF   xFB
09BD6:  CLRF   xFC
09BD8:  CLRF   xFD
09BDA:  CLRF   xFE
09BDC:  CLRF   xFF
09BDE:  MOVLB  2
09BE0:  CLRF   x00
09BE2:  CLRF   x01
09BE4:  CLRF   x02
09BE6:  CLRF   x03
09BE8:  CLRF   x04
09BEA:  CLRF   x05
09BEC:  CLRF   x06
09BEE:  CLRF   x07
09BF0:  CLRF   x08
09BF2:  CLRF   x09
09BF4:  CLRF   x0A
09BF6:  CLRF   x0B
09BF8:  CLRF   x0C
09BFA:  CLRF   x0D
09BFC:  CLRF   x0E
09BFE:  CLRF   x0F
09C00:  CLRF   x10
09C02:  CLRF   x11
09C04:  CLRF   x12
09C06:  CLRF   x13
09C08:  CLRF   x14
09C0A:  CLRF   x15
09C0C:  CLRF   x16
09C0E:  CLRF   x17
09C10:  CLRF   x18
09C12:  CLRF   x19
09C14:  CLRF   x1A
09C16:  CLRF   x1B
09C18:  CLRF   x1C
09C1A:  CLRF   x1D
09C1C:  CLRF   x1E
09C1E:  CLRF   x1F
09C20:  CLRF   x20
09C22:  CLRF   x21
09C24:  CLRF   x22
09C26:  CLRF   x23
09C28:  CLRF   x24
09C2A:  CLRF   x25
09C2C:  CLRF   x26
09C2E:  CLRF   x27
09C30:  CLRF   x28
09C32:  CLRF   x29
09C34:  CLRF   x2A
09C36:  CLRF   x2B
09C38:  CLRF   x2C
09C3A:  CLRF   x2D
09C3C:  CLRF   x2E
09C3E:  CLRF   x2F
09C40:  CLRF   x30
09C42:  CLRF   x31
09C44:  CLRF   x32
09C46:  CLRF   x33
09C48:  CLRF   x34
09C4A:  CLRF   x35
09C4C:  CLRF   x36
09C4E:  CLRF   x37
09C50:  CLRF   x38
09C52:  CLRF   x39
09C54:  CLRF   x3A
09C56:  CLRF   x3B
09C58:  CLRF   x3C
09C5A:  CLRF   x3D
09C5C:  CLRF   x3E
09C5E:  CLRF   x3F
09C60:  CLRF   x40
09C62:  CLRF   x41
09C64:  CLRF   x42
09C66:  CLRF   x43
09C68:  CLRF   x44
09C6A:  CLRF   x45
09C6C:  CLRF   x46
09C6E:  CLRF   x47
09C70:  CLRF   x48
09C72:  CLRF   x49
09C74:  CLRF   x4A
09C76:  CLRF   x4B
09C78:  CLRF   x4C
09C7A:  CLRF   x4D
09C7C:  CLRF   x4E
09C7E:  CLRF   x4F
09C80:  CLRF   x50
09C82:  CLRF   x51
09C84:  CLRF   x52
09C86:  CLRF   x53
09C88:  CLRF   x54
09C8A:  CLRF   x55
09C8C:  CLRF   x56
09C8E:  CLRF   x57
09C90:  CLRF   x58
09C92:  CLRF   x59
09C94:  CLRF   x5A
09C96:  CLRF   x5B
09C98:  CLRF   x5C
09C9A:  CLRF   x5D
09C9C:  CLRF   x5E
09C9E:  CLRF   x5F
09CA0:  CLRF   x60
09CA2:  CLRF   x61
09CA4:  CLRF   x62
09CA6:  CLRF   x63
09CA8:  CLRF   x64
09CAA:  CLRF   x65
09CAC:  CLRF   x66
09CAE:  CLRF   x67
09CB0:  CLRF   x68
09CB2:  CLRF   x69
09CB4:  CLRF   x6A
09CB6:  CLRF   x6B
09CB8:  CLRF   x6C
09CBA:  CLRF   x6D
09CBC:  CLRF   x6E
09CBE:  CLRF   x6F
09CC0:  CLRF   x70
09CC2:  CLRF   x71
09CC4:  CLRF   x72
09CC6:  CLRF   x73
09CC8:  CLRF   x74
09CCA:  CLRF   x75
09CCC:  CLRF   x76
09CCE:  CLRF   x77
09CD0:  CLRF   x78
09CD2:  CLRF   x79
09CD4:  CLRF   x7A
09CD6:  CLRF   x7B
09CD8:  CLRF   x7C
09CDA:  CLRF   x7D
09CDC:  CLRF   x7E
09CDE:  CLRF   x7F
09CE0:  CLRF   x80
09CE2:  CLRF   x81
09CE4:  CLRF   x82
09CE6:  CLRF   x83
09CE8:  CLRF   x84
09CEA:  CLRF   x85
09CEC:  CLRF   x86
09CEE:  CLRF   x87
09CF0:  CLRF   x88
09CF2:  CLRF   x89
09CF4:  CLRF   x8A
09CF6:  CLRF   x8B
09CF8:  CLRF   x8C
09CFA:  CLRF   x8D
09CFC:  CLRF   x8E
09CFE:  CLRF   x8F
09D00:  CLRF   x90
09D02:  CLRF   x91
09D04:  CLRF   x92
09D06:  CLRF   x93
09D08:  CLRF   x94
09D0A:  CLRF   x95
09D0C:  CLRF   x96
09D0E:  CLRF   x97
09D10:  CLRF   x98
09D12:  CLRF   x99
09D14:  CLRF   x9A
09D16:  CLRF   x9B
09D18:  CLRF   x9C
09D1A:  CLRF   x9D
09D1C:  CLRF   x9E
09D1E:  CLRF   x9F
09D20:  CLRF   xA0
09D22:  CLRF   xA1
09D24:  CLRF   xA2
09D26:  CLRF   xA3
09D28:  CLRF   xA4
09D2A:  CLRF   xA5
09D2C:  CLRF   xA6
09D2E:  CLRF   xA7
09D30:  CLRF   xA8
09D32:  CLRF   xA9
09D34:  CLRF   xAA
09D36:  CLRF   xAB
09D38:  CLRF   xAC
09D3A:  CLRF   xAD
09D3C:  CLRF   xAE
09D3E:  CLRF   xAF
09D40:  CLRF   xB0
09D42:  CLRF   xB1
09D44:  CLRF   xB2
09D46:  CLRF   xB3
09D48:  CLRF   xB4
09D4A:  CLRF   xB5
09D4C:  CLRF   xB6
09D4E:  CLRF   xB7
09D50:  CLRF   xB8
09D52:  CLRF   xB9
09D54:  CLRF   xBA
09D56:  CLRF   xBB
09D58:  CLRF   xBC
09D5A:  CLRF   xBD
09D5C:  CLRF   xBE
09D5E:  CLRF   xBF
09D60:  CLRF   xC0
09D62:  CLRF   xC1
09D64:  CLRF   xC2
09D66:  CLRF   xC3
09D68:  CLRF   xC4
09D6A:  CLRF   xC5
09D6C:  CLRF   xC6
09D6E:  CLRF   xC7
09D70:  CLRF   xC8
09D72:  CLRF   xC9
09D74:  CLRF   xCA
09D76:  CLRF   xCB
09D78:  CLRF   xCC
09D7A:  CLRF   xCD
09D7C:  CLRF   xCE
09D7E:  CLRF   xCF
09D80:  CLRF   xD0
09D82:  CLRF   xD1
09D84:  CLRF   xD2
09D86:  CLRF   xD3
09D88:  CLRF   xD4
09D8A:  CLRF   xD5
09D8C:  CLRF   xD6
09D8E:  CLRF   xD7
09D90:  CLRF   xD8
09D92:  CLRF   xD9
09D94:  CLRF   xDA
09D96:  CLRF   xDB
09D98:  CLRF   xDC
09D9A:  CLRF   xDD
09D9C:  CLRF   xDE
09D9E:  CLRF   xDF
09DA0:  CLRF   xE0
09DA2:  CLRF   xE1
09DA4:  CLRF   xE2
09DA6:  CLRF   xE3
09DA8:  CLRF   xE4
09DAA:  CLRF   xE5
09DAC:  CLRF   xE6
09DAE:  CLRF   xE7
09DB0:  CLRF   xE8
09DB2:  CLRF   xE9
09DB4:  CLRF   xEA
09DB6:  CLRF   xEB
09DB8:  CLRF   xEC
09DBA:  CLRF   xED
09DBC:  CLRF   xEE
09DBE:  CLRF   xEF
09DC0:  CLRF   xF0
09DC2:  CLRF   xF1
09DC4:  CLRF   xF2
09DC6:  CLRF   xF3
09DC8:  CLRF   xF4
09DCA:  CLRF   xF5
09DCC:  CLRF   xF6
09DCE:  CLRF   xF7
09DD0:  CLRF   xF8
09DD2:  CLRF   xF9
09DD4:  CLRF   xFA
09DD6:  CLRF   xFB
09DD8:  CLRF   xFC
09DDA:  CLRF   xFD
09DDC:  CLRF   xFE
09DDE:  CLRF   xFF
09DE0:  MOVLB  3
09DE2:  CLRF   x00
09DE4:  CLRF   x01
09DE6:  CLRF   x02
09DE8:  CLRF   x03
09DEA:  CLRF   x04
09DEC:  CLRF   x05
09DEE:  CLRF   x06
09DF0:  CLRF   x07
09DF2:  CLRF   x08
09DF4:  CLRF   x09
09DF6:  CLRF   x0A
09DF8:  CLRF   x0B
09DFA:  CLRF   x0C
09DFC:  CLRF   x0D
09DFE:  CLRF   x0E
09E00:  CLRF   x0F
09E02:  CLRF   x10
09E04:  CLRF   x11
09E06:  CLRF   x12
09E08:  CLRF   x13
09E0A:  CLRF   x14
09E0C:  CLRF   x15
09E0E:  CLRF   x16
09E10:  CLRF   x17
09E12:  CLRF   x18
09E14:  CLRF   x19
09E16:  CLRF   x1A
09E18:  CLRF   x1B
09E1A:  CLRF   x1C
09E1C:  CLRF   x1D
09E1E:  CLRF   x1E
09E20:  CLRF   x1F
09E22:  CLRF   x20
09E24:  CLRF   x21
09E26:  CLRF   x22
09E28:  CLRF   x23
09E2A:  CLRF   x24
09E2C:  CLRF   x25
09E2E:  CLRF   x26
09E30:  CLRF   x27
09E32:  CLRF   x28
09E34:  CLRF   x29
09E36:  CLRF   x2A
09E38:  CLRF   x2B
09E3A:  CLRF   x2C
09E3C:  CLRF   x2D
09E3E:  CLRF   x2E
09E40:  CLRF   x2F
09E42:  CLRF   x30
09E44:  CLRF   x31
09E46:  CLRF   x32
09E48:  CLRF   x33
09E4A:  CLRF   x34
09E4C:  CLRF   x35
09E4E:  CLRF   x36
09E50:  CLRF   x37
09E52:  CLRF   x38
09E54:  CLRF   x39
09E56:  CLRF   x3A
09E58:  CLRF   x3B
09E5A:  CLRF   x3C
09E5C:  CLRF   x3D
09E5E:  CLRF   x3E
09E60:  CLRF   x3F
09E62:  CLRF   x40
09E64:  CLRF   x41
09E66:  CLRF   x42
09E68:  CLRF   x43
09E6A:  CLRF   x44
09E6C:  CLRF   x45
09E6E:  CLRF   x46
09E70:  CLRF   x47
09E72:  CLRF   x48
09E74:  CLRF   x49
09E76:  CLRF   x4A
09E78:  CLRF   x4B
09E7A:  CLRF   x4C
09E7C:  CLRF   x4D
09E7E:  CLRF   x4E
09E80:  CLRF   x4F
09E82:  CLRF   x50
09E84:  CLRF   x51
09E86:  CLRF   x52
09E88:  CLRF   x53
09E8A:  CLRF   x7E
09E8C:  CLRF   x7F
09E8E:  CLRF   x80
09E90:  CLRF   x81
09E92:  CLRF   x85
09E94:  CLRF   x86
09E96:  CLRF   x87
09E98:  CLRF   x88
09E9A:  CLRF   x89
09E9C:  CLRF   x8A
09E9E:  CLRF   x8B
09EA0:  CLRF   x8C
09EA2:  CLRF   x8D
09EA4:  CLRF   x8E
09EA6:  CLRF   x8F
09EA8:  CLRF   x90
09EAA:  CLRF   x91
09EAC:  CLRF   x92
09EAE:  CLRF   x93
09EB0:  CLRF   x94
09EB2:  CLRF   x95
09EB4:  CLRF   x96
09EB6:  CLRF   x97
09EB8:  CLRF   x98
09EBA:  CLRF   x99
09EBC:  CLRF   x9A
09EBE:  CLRF   x9B
09EC0:  CLRF   x9C
09EC2:  CLRF   x9D
09EC4:  CLRF   x9E
09EC6:  CLRF   x9F
09EC8:  CLRF   xA0
09ECA:  CLRF   xA1
09ECC:  CLRF   xA2
09ECE:  CLRF   xA3
09ED0:  CLRF   xA4
09ED2:  CLRF   xA5
09ED4:  CLRF   xA6
09ED6:  CLRF   xA7
09ED8:  CLRF   xA8
09EDA:  CLRF   xA9
09EDC:  CLRF   xAA
09EDE:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
09EE0:  MOVLW  64
09EE2:  MOVLB  8
09EE4:  MOVWF  x7B
09EE6:  MOVLB  0
09EE8:  CALL   1A5A
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
09EEC:  MOVLW  FC
09EEE:  MOVWF  FF6
09EF0:  MOVLW  18
09EF2:  MOVWF  FF7
09EF4:  MOVLW  00
09EF6:  MOVWF  FF8
09EF8:  CALL   1ADA
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM4.\r\n");
09EFC:  MOVLW  42
09EFE:  MOVWF  FF6
09F00:  MOVLW  19
09F02:  MOVWF  FF7
09F04:  MOVLW  00
09F06:  MOVWF  FF8
09F08:  CALL   1ADA
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
09F0C:  MOVLW  70
09F0E:  MOVWF  FF6
09F10:  MOVLW  19
09F12:  MOVWF  FF7
09F14:  MOVLW  00
09F16:  MOVWF  FF8
09F18:  MOVLW  10
09F1A:  MOVLB  8
09F1C:  MOVWF  x23
09F1E:  MOVLB  0
09F20:  CALL   1B0A
09F24:  MOVLW  96
09F26:  MOVWF  FF6
09F28:  MOVLW  19
09F2A:  MOVWF  FF7
09F2C:  MOVLW  00
09F2E:  MOVWF  FF8
09F30:  CALL   1ADA
09F34:  MOVLW  20
09F36:  MOVLB  8
09F38:  MOVWF  x66
09F3A:  MOVLB  0
09F3C:  CALL   1A88
09F40:  MOVLW  A0
09F42:  MOVWF  FF6
09F44:  MOVLW  19
09F46:  MOVWF  FF7
09F48:  MOVLW  00
09F4A:  MOVWF  FF8
09F4C:  CALL   1ADA
09F50:  MOVLW  85
09F52:  MOVWF  FF6
09F54:  MOVLW  19
09F56:  MOVWF  FF7
09F58:  MOVLW  00
09F5A:  MOVWF  FF8
09F5C:  MOVLW  0F
09F5E:  MOVLB  8
09F60:  MOVWF  x23
09F62:  MOVLB  0
09F64:  CALL   1B0A
....................    
....................    //io_init();
....................    setup_uart_to_boss();
09F68:  GOTO   1B40
....................    //setup_timer();
....................    ad7490_init();
09F6C:  GOTO   1D3C
....................    misf_init();
09F70:  CALL   241C
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
09F74:  MOVFF  37D,4C8
09F78:  MOVLB  4
09F7A:  CLRF   xC9
09F7C:  MOVLB  0
09F7E:  CALL   3B8E
.................... 
....................    int1 is_finished = FALSE;
09F82:  MOVLB  3
09F84:  BCF    xAB.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
09F86:  MOVLW  AA
09F88:  MOVWF  FF6
09F8A:  MOVLW  19
09F8C:  MOVWF  FF7
09F8E:  MOVLW  00
09F90:  MOVWF  FF8
09F92:  MOVLB  0
09F94:  CALL   1ADA
....................    
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
09F98:  MOVLW  D0
09F9A:  MOVWF  FF6
09F9C:  MOVLW  19
09F9E:  MOVWF  FF7
09FA0:  MOVLW  00
09FA2:  MOVWF  FF8
09FA4:  CALL   1ADA
....................    
....................    //Start loop
....................    while(!is_finished)
09FA8:  MOVLB  3
09FAA:  BTFSS  xAB.0
09FAC:  BRA    9FB4
09FAE:  MOVLB  0
09FB0:  GOTO   A082
09FB4:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
09FB6:  MOVF   46,F
09FB8:  BTFSC  FD8.2
09FBA:  GOTO   A03E
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
09FBE:  MOVLB  3
09FC0:  CLRF   xBF
09FC2:  MOVLW  26
09FC4:  MOVWF  xBE
09FC6:  MOVFF  46,3C0
09FCA:  MOVLB  0
09FCC:  GOTO   4058
09FD0:  MOVFF  02,03
09FD4:  MOVF   01,W
09FD6:  MOVWF  FE1
09FD8:  MOVFF  03,FE2
09FDC:  MOVLW  03
09FDE:  MOVWF  FEA
09FE0:  MOVLW  AC
09FE2:  MOVWF  FE9
09FE4:  MOVLW  0C
09FE6:  MOVWF  01
09FE8:  MOVFF  FE6,FEE
09FEC:  DECFSZ 01,F
09FEE:  GOTO   9FE8
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
09FF2:  MOVLB  3
09FF4:  CLRF   xB9
09FF6:  MOVLW  26
09FF8:  MOVWF  xB8
09FFA:  CLRF   xBB
09FFC:  MOVLW  46
09FFE:  MOVWF  xBA
0A000:  MOVLB  0
0A002:  GOTO   4278
....................          
....................          if(recieve_cmd.is_exist)
0A006:  MOVLB  3
0A008:  BTFSC  xAE.0
0A00A:  BRA    A012
0A00C:  MOVLB  0
0A00E:  GOTO   A02E
0A012:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0A014:  MOVLW  03
0A016:  MOVLB  3
0A018:  MOVWF  xB9
0A01A:  MOVLW  AC
0A01C:  MOVWF  xB8
0A01E:  MOVLB  0
0A020:  GOTO   96B2
0A024:  MOVLB  3
0A026:  BCF    xAB.1
0A028:  BTFSC  01.0
0A02A:  BSF    xAB.1
0A02C:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0A02E:  MOVLW  EE
0A030:  MOVWF  FF6
0A032:  MOVLW  19
0A034:  MOVWF  FF7
0A036:  MOVLW  00
0A038:  MOVWF  FF8
0A03A:  CALL   1ADA
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0A03E:  MOVLB  3
0A040:  BTFSC  xAB.0
0A042:  BRA    A04A
0A044:  MOVLB  0
0A046:  GOTO   A050
0A04A:  MOVLB  0
....................          break;
0A04C:  GOTO   A082
....................          
....................       delay_ms(400);
0A050:  MOVLW  02
0A052:  MOVLB  3
0A054:  MOVWF  xB8
0A056:  MOVLB  0
0A058:  MOVLW  C8
0A05A:  MOVLB  8
0A05C:  MOVWF  x7B
0A05E:  MOVLB  0
0A060:  CALL   1A5A
0A064:  MOVLB  3
0A066:  DECFSZ xB8,F
0A068:  BRA    A06E
0A06A:  BRA    A072
0A06C:  MOVLB  0
0A06E:  MOVLB  0
0A070:  BRA    A058
....................       fprintf(PC, ".");
0A072:  MOVLW  2E
0A074:  MOVLB  8
0A076:  MOVWF  x66
0A078:  MOVLB  0
0A07A:  CALL   1A88
0A07E:  GOTO   9FA8
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0A082:  MOVLW  0E
0A084:  MOVWF  FF6
0A086:  MOVLW  1A
0A088:  MOVWF  FF7
0A08A:  MOVLW  00
0A08C:  MOVWF  FF8
0A08E:  CALL   1ADA
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0A092:  MOVLW  2E
0A094:  MOVLB  8
0A096:  MOVWF  x66
0A098:  MOVLB  0
0A09A:  CALL   1A88
....................       delay_ms(1000);
0A09E:  MOVLW  04
0A0A0:  MOVLB  3
0A0A2:  MOVWF  xB8
0A0A4:  MOVLB  0
0A0A6:  MOVLW  FA
0A0A8:  MOVLB  8
0A0AA:  MOVWF  x7B
0A0AC:  MOVLB  0
0A0AE:  CALL   1A5A
0A0B2:  MOVLB  3
0A0B4:  DECFSZ xB8,F
0A0B6:  BRA    A0BC
0A0B8:  BRA    A0C0
0A0BA:  MOVLB  0
0A0BC:  MOVLB  0
0A0BE:  BRA    A0A6
0A0C0:  MOVLB  0
0A0C2:  GOTO   A092
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0A0C6:  MOVLW  4E
0A0C8:  MOVWF  FF6
0A0CA:  MOVLW  1A
0A0CC:  MOVWF  FF7
0A0CE:  MOVLW  00
0A0D0:  MOVWF  FF8
0A0D2:  CALL   1ADA
....................    
.................... }
.................... 
0A0D6:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
