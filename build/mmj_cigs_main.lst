CCS PCH C Compiler, Version 5.104, 57077               07-8-25 00:59

               Filename:   build\mmj_cigs_main.lst

               ROM used:   46920 bytes (36%)
                           Largest free fragment is 65520
               RAM used:   343 (10%) at main() level
                           2672 (75%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   B26A
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,43
001AE:  DATA 6F,6E
001B0:  DATA 6E,65
001B2:  DATA 63,74
001B4:  DATA 20,65
001B6:  DATA 72,72
001B8:  DATA 6F,72
001BA:  DATA 21,0D
001BC:  DATA 0A,00
001BE:  DATA 09,43
001C0:  DATA 6F,6E
001C2:  DATA 6E,65
001C4:  DATA 63,74
001C6:  DATA 20,73
001C8:  DATA 75,63
001CA:  DATA 63,65
001CC:  DATA 73,73
001CE:  DATA 66,75
001D0:  DATA 6C,0D
001D2:  DATA 0A,00
001D4:  DATA 09,43
001D6:  DATA 6F,6D
001D8:  DATA 70,6C
001DA:  DATA 65,74
001DC:  DATA 65,0D
001DE:  DATA 0A,00
001E0:  DATA 4D,43
001E2:  DATA 50,34
001E4:  DATA 39,30
001E6:  DATA 31,20
001E8:  DATA 49,6E
001EA:  DATA 69,74
001EC:  DATA 69,61
001EE:  DATA 6C,69
001F0:  DATA 7A,65
001F2:  DATA 0D,0A
001F4:  DATA 00,00
001F6:  DATA 09,5B
001F8:  DATA 44,41
001FA:  DATA 43,20
001FC:  DATA 50,6F
001FE:  DATA 72,74
00200:  DATA 20,31
00202:  DATA 5D,20
00204:  DATA 43,6F
00206:  DATA 6E,6E
00208:  DATA 65,63
0020A:  DATA 74,20
0020C:  DATA 65,72
0020E:  DATA 72,6F
00210:  DATA 72,21
00212:  DATA 0D,0A
00214:  DATA 00,00
00216:  DATA 09,5B
00218:  DATA 44,41
0021A:  DATA 43,20
0021C:  DATA 50,6F
0021E:  DATA 72,74
00220:  DATA 20,31
00222:  DATA 5D,20
00224:  DATA 43,6F
00226:  DATA 6E,6E
00228:  DATA 65,63
0022A:  DATA 74,20
0022C:  DATA 73,75
0022E:  DATA 63,63
00230:  DATA 65,73
00232:  DATA 73,66
00234:  DATA 75,6C
00236:  DATA 0D,0A
00238:  DATA 00,00
0023A:  DATA 09,5B
0023C:  DATA 44,41
0023E:  DATA 43,20
00240:  DATA 50,6F
00242:  DATA 72,74
00244:  DATA 20,32
00246:  DATA 5D,20
00248:  DATA 43,6F
0024A:  DATA 6E,6E
0024C:  DATA 65,63
0024E:  DATA 74,20
00250:  DATA 65,72
00252:  DATA 72,6F
00254:  DATA 72,21
00256:  DATA 0D,0A
00258:  DATA 00,00
0025A:  DATA 09,5B
0025C:  DATA 44,41
0025E:  DATA 43,20
00260:  DATA 50,6F
00262:  DATA 72,74
00264:  DATA 20,32
00266:  DATA 5D,20
00268:  DATA 43,6F
0026A:  DATA 6E,6E
0026C:  DATA 65,63
0026E:  DATA 74,20
00270:  DATA 73,75
00272:  DATA 63,63
00274:  DATA 65,73
00276:  DATA 73,66
00278:  DATA 75,6C
0027A:  DATA 0D,0A
0027C:  DATA 00,00
0027E:  DATA 09,43
00280:  DATA 6F,6D
00282:  DATA 70,6C
00284:  DATA 65,74
00286:  DATA 65,0D
00288:  DATA 0A,00
0028A:  DATA 53,4D
0028C:  DATA 46,20
0028E:  DATA 71,75
00290:  DATA 65,75
00292:  DATA 65,20
00294:  DATA 69,73
00296:  DATA 20,66
00298:  DATA 75,6C
0029A:  DATA 6C,21
0029C:  DATA 21,21
0029E:  DATA 0D,0A
002A0:  DATA 00,00
002A2:  DATA 53,4D
002A4:  DATA 46,20
002A6:  DATA 71,75
002A8:  DATA 65,75
002AA:  DATA 65,20
002AC:  DATA 69,73
002AE:  DATA 20,65
002B0:  DATA 6D,70
002B2:  DATA 74,79
002B4:  DATA 0D,0A
002B6:  DATA 00,00
002B8:  DATA 0D,0A
002BA:  DATA 53,74
002BC:  DATA 61,72
002BE:  DATA 74,20
002C0:  DATA 6D,61
002C2:  DATA 6B,65
002C4:  DATA 5F,72
002C6:  DATA 65,63
002C8:  DATA 65,69
002CA:  DATA 76,65
002CC:  DATA 5F,63
002CE:  DATA 6F,6D
002D0:  DATA 6D,61
002D2:  DATA 6E,64
002D4:  DATA 0D,0A
002D6:  DATA 00,00
002D8:  DATA 09,5B
002DA:  DATA 42,4F
002DC:  DATA 53,53
002DE:  DATA 5D,20
002E0:  DATA 3E,3E
002E2:  DATA 3E,20
002E4:  DATA 00,00
002E6:  DATA 45,6E
002E8:  DATA 64,20
002EA:  DATA 6D,61
002EC:  DATA 6B,65
002EE:  DATA 5F,72
002F0:  DATA 65,63
002F2:  DATA 69,76
002F4:  DATA 65,5F
002F6:  DATA 63,6F
002F8:  DATA 6D,6D
002FA:  DATA 61,6E
002FC:  DATA 64,0D
002FE:  DATA 0A,0D
00300:  DATA 0A,00
00302:  DATA 73,69
00304:  DATA 67,6E
00306:  DATA 61,6C
00308:  DATA 20,65
0030A:  DATA 6E,64
0030C:  DATA 20,77
0030E:  DATA 69,74
00310:  DATA 68,20
00312:  DATA 53,46
00314:  DATA 44,0D
00316:  DATA 0A,00
00318:  DATA 64,6F
0031A:  DATA 6E,27
0031C:  DATA 74,20
0031E:  DATA 66,69
00320:  DATA 6E,64
00322:  DATA 20,53
00324:  DATA 46,44
00326:  DATA 0D,0A
00328:  DATA 00,00
0032A:  DATA 09,2D
0032C:  DATA 3E,20
0032E:  DATA 49,6E
00330:  DATA 76,61
00332:  DATA 6C,69
00334:  DATA 64,20
00336:  DATA 46,72
00338:  DATA 61,6D
0033A:  DATA 65,20
0033C:  DATA 49,44
0033E:  DATA 20,72
00340:  DATA 65,63
00342:  DATA 65,69
00344:  DATA 76,65
00346:  DATA 64,3A
00348:  DATA 20,25
0034A:  DATA 58,0D
0034C:  DATA 0A,00
0034E:  DATA 09,2D
00350:  DATA 3E,20
00352:  DATA 43,52
00354:  DATA 43,20
00356:  DATA 65,72
00358:  DATA 72,6F
0035A:  DATA 72,21
0035C:  DATA 0D,0A
0035E:  DATA 00,00
00360:  DATA 09,09
00362:  DATA 2D,3E
00364:  DATA 20,72
00366:  DATA 65,63
00368:  DATA 65,69
0036A:  DATA 76,65
0036C:  DATA 64,20
0036E:  DATA 43,52
00370:  DATA 43,3A
00372:  DATA 20,25
00374:  DATA 58,0D
00376:  DATA 0A,00
00378:  DATA 09,09
0037A:  DATA 20,20
0037C:  DATA 20,63
0037E:  DATA 6F,6C
00380:  DATA 6C,65
00382:  DATA 63,74
00384:  DATA 20,43
00386:  DATA 52,43
00388:  DATA 20,3A
0038A:  DATA 20,25
0038C:  DATA 58,0D
0038E:  DATA 0A,00
00390:  DATA 09,2D
00392:  DATA 3E,20
00394:  DATA 49,6E
00396:  DATA 76,61
00398:  DATA 6C,69
0039A:  DATA 64,20
0039C:  DATA 64,65
0039E:  DATA 76,69
003A0:  DATA 63,65
003A2:  DATA 20,49
003A4:  DATA 44,20
003A6:  DATA 72,65
003A8:  DATA 63,65
003AA:  DATA 69,76
003AC:  DATA 65,64
003AE:  DATA 0D,0A
003B0:  DATA 00,00
003B2:  DATA 09,09
003B4:  DATA 2D,3E
003B6:  DATA 20,72
003B8:  DATA 65,63
003BA:  DATA 65,69
003BC:  DATA 76,65
003BE:  DATA 64,3A
003C0:  DATA 20,20
003C2:  DATA 20,20
003C4:  DATA 20,25
003C6:  DATA 58,0D
003C8:  DATA 0A,00
003CA:  DATA 09,09
003CC:  DATA 20,20
003CE:  DATA 20,4D
003D0:  DATA 79,20
003D2:  DATA 64,65
003D4:  DATA 76,69
003D6:  DATA 63,65
003D8:  DATA 20,49
003DA:  DATA 44,3A
003DC:  DATA 20,25
003DE:  DATA 58,0D
003E0:  DATA 0A,00
003E2:  DATA 09,5B
003E4:  DATA 42,4F
003E6:  DATA 53,53
003E8:  DATA 5D,20
003EA:  DATA 3C,3C
003EC:  DATA 3C,20
003EE:  DATA 00,00
003F0:  DATA 53,74
003F2:  DATA 61,72
003F4:  DATA 74,20
003F6:  DATA 53,4D
003F8:  DATA 46,20
003FA:  DATA 75,73
003FC:  DATA 69,6E
003FE:  DATA 67,20
00400:  DATA 72,65
00402:  DATA 71,65
00404:  DATA 73,74
00406:  DATA 20,73
00408:  DATA 65,61
0040A:  DATA 71,75
0040C:  DATA 65,6E
0040E:  DATA 63,65
00410:  DATA 0D,0A
00412:  DATA 00,00
00414:  DATA 45,72
00416:  DATA 72,6F
00418:  DATA 72,21
0041A:  DATA 20,52
0041C:  DATA 65,63
0041E:  DATA 65,69
00420:  DATA 76,69
00422:  DATA 6E,67
00424:  DATA 20,63
00426:  DATA 6F,6D
00428:  DATA 6D,61
0042A:  DATA 6E,64
0042C:  DATA 20,69
0042E:  DATA 6E,63
00430:  DATA 6F,6E
00432:  DATA 73,69
00434:  DATA 73,74
00436:  DATA 65,6E
00438:  DATA 74,20
0043A:  DATA 77,69
0043C:  DATA 74,68
0043E:  DATA 20,74
00440:  DATA 68,65
00442:  DATA 20,64
00444:  DATA 65,73
00446:  DATA 69,67
00448:  DATA 6E,0D
0044A:  DATA 0A,00
0044C:  DATA 53,4D
0044E:  DATA 46,20
00450:  DATA 75,73
00452:  DATA 65,20
00454:  DATA 72,65
00456:  DATA 71,75
00458:  DATA 65,73
0045A:  DATA 74,20
0045C:  DATA 61,6C
0045E:  DATA 6C,6F
00460:  DATA 77,65
00462:  DATA 64,0D
00464:  DATA 0A,00
00466:  DATA 53,4D
00468:  DATA 46,20
0046A:  DATA 75,73
0046C:  DATA 65,20
0046E:  DATA 72,65
00470:  DATA 71,75
00472:  DATA 65,73
00474:  DATA 74,20
00476:  DATA 64,65
00478:  DATA 6E,79
0047A:  DATA 65,64
0047C:  DATA 0D,0A
0047E:  DATA 00,00
00480:  DATA 52,65
00482:  DATA 74,72
00484:  DATA 79,20
00486:  DATA 72,65
00488:  DATA 71,75
0048A:  DATA 65,73
0048C:  DATA 74,20
0048E:  DATA 74,6F
00490:  DATA 20,42
00492:  DATA 4F,53
00494:  DATA 53,20
00496:  DATA 50,49
00498:  DATA 43,0D
0049A:  DATA 0A,00
0049C:  DATA 45,72
0049E:  DATA 72,6F
004A0:  DATA 72,21
004A2:  DATA 20,52
004A4:  DATA 65,63
004A6:  DATA 65,69
004A8:  DATA 76,69
004AA:  DATA 6E,67
004AC:  DATA 20,63
004AE:  DATA 6F,6D
004B0:  DATA 6D,61
004B2:  DATA 6E,64
004B4:  DATA 20,69
004B6:  DATA 6E,63
004B8:  DATA 6F,6E
004BA:  DATA 73,69
004BC:  DATA 73,74
004BE:  DATA 65,6E
004C0:  DATA 74,20
004C2:  DATA 77,69
004C4:  DATA 74,68
004C6:  DATA 20,74
004C8:  DATA 68,65
004CA:  DATA 20,64
004CC:  DATA 65,73
004CE:  DATA 69,67
004D0:  DATA 6E,0D
004D2:  DATA 0A,00
004D4:  DATA 45,6E
004D6:  DATA 64,20
004D8:  DATA 53,4D
004DA:  DATA 46,20
004DC:  DATA 75,73
004DE:  DATA 69,6E
004E0:  DATA 67,20
004E2:  DATA 72,65
004E4:  DATA 71,65
004E6:  DATA 73,74
004E8:  DATA 20,73
004EA:  DATA 65,61
004EC:  DATA 71,75
004EE:  DATA 65,6E
004F0:  DATA 63,65
004F2:  DATA 0D,0A
004F4:  DATA 00,00
004F6:  DATA 49,4F
004F8:  DATA 20,49
004FA:  DATA 6E,69
004FC:  DATA 74,69
004FE:  DATA 61,6C
00500:  DATA 69,7A
00502:  DATA 65,0D
00504:  DATA 0A,00
00506:  DATA 09,43
00508:  DATA 6F,6D
0050A:  DATA 70,6C
0050C:  DATA 65,74
0050E:  DATA 65,0D
00510:  DATA 0A,00
00512:  DATA 41,44
00514:  DATA 43,20
00516:  DATA 49,6E
00518:  DATA 69,74
0051A:  DATA 69,61
0051C:  DATA 6C,69
0051E:  DATA 7A,65
00520:  DATA 0D,0A
00522:  DATA 00,00
00524:  DATA 09,43
00526:  DATA 6F,6D
00528:  DATA 70,6C
0052A:  DATA 65,74
0052C:  DATA 65,0D
0052E:  DATA 0A,00
00530:  DATA 53,74
00532:  DATA 61,72
00534:  DATA 74,20
00536:  DATA 53,57
00538:  DATA 45,45
0053A:  DATA 50,0D
0053C:  DATA 0A,00
0053E:  DATA 09,53
00540:  DATA 77,65
00542:  DATA 65,70
00544:  DATA 20,73
00546:  DATA 74,65
00548:  DATA 70,20
0054A:  DATA 3A,20
0054C:  DATA 25,75
0054E:  DATA 0D,0A
00550:  DATA 00,00
00552:  DATA 53,74
00554:  DATA 61,72
00556:  DATA 74,20
00558:  DATA 54,45
0055A:  DATA 53,54
0055C:  DATA 20,53
0055E:  DATA 57,45
00560:  DATA 45,50
00562:  DATA 0D,0A
00564:  DATA 00,00
00566:  DATA 73,74
00568:  DATA 65,70
0056A:  DATA 2C,20
0056C:  DATA 76,6F
0056E:  DATA 6C,74
00570:  DATA 61,67
00572:  DATA 65,2C
00574:  DATA 20,63
00576:  DATA 75,72
00578:  DATA 72,65
0057A:  DATA 6E,74
0057C:  DATA 0D,0A
0057E:  DATA 00,00
00580:  DATA 53,74
00582:  DATA 61,72
00584:  DATA 74,20
00586:  DATA 41,44
00588:  DATA 43,20
0058A:  DATA 54,45
0058C:  DATA 53,54
0058E:  DATA 0D,0A
00590:  DATA 00,00
00592:  DATA 41,44
00594:  DATA 43,20
00596:  DATA 56,6F
00598:  DATA 6C,74
0059A:  DATA 61,67
0059C:  DATA 65,3A
0059E:  DATA 20,25
005A0:  DATA 30,34
005A2:  DATA 4C,58
005A4:  DATA 0D,0A
005A6:  DATA 00,00
005A8:  DATA 41,44
005AA:  DATA 43,20
005AC:  DATA 43,75
005AE:  DATA 72,72
005B0:  DATA 65,6E
005B2:  DATA 74,3A
005B4:  DATA 20,25
005B6:  DATA 30,34
005B8:  DATA 4C,58
005BA:  DATA 0D,0A
005BC:  DATA 00,00
005BE:  DATA 41,44
005C0:  DATA 43,20
005C2:  DATA 43,49
005C4:  DATA 47,53
005C6:  DATA 31,20
005C8:  DATA 41,6D
005CA:  DATA 70,3A
005CC:  DATA 20,25
005CE:  DATA 30,34
005D0:  DATA 4C,58
005D2:  DATA 0D,0A
005D4:  DATA 00,00
005D6:  DATA 41,44
005D8:  DATA 43,20
005DA:  DATA 43,49
005DC:  DATA 47,53
005DE:  DATA 31,20
005E0:  DATA 56,52
005E2:  DATA 45,46
005E4:  DATA 3A,20
005E6:  DATA 25,30
005E8:  DATA 34,4C
005EA:  DATA 58,0D
005EC:  DATA 0A,00
005EE:  DATA 53,74
005F0:  DATA 61,72
005F2:  DATA 74,20
005F4:  DATA 53,57
005F6:  DATA 45,45
005F8:  DATA 50,20
005FA:  DATA 32,70
005FC:  DATA 6F,72
005FE:  DATA 74,73
00600:  DATA 0D,0A
00602:  DATA 00,00
00604:  DATA 09,53
00606:  DATA 77,65
00608:  DATA 65,70
0060A:  DATA 20,73
0060C:  DATA 74,65
0060E:  DATA 70,20
00610:  DATA 3A,20
00612:  DATA 25,75
00614:  DATA 0D,0A
00616:  DATA 00,00
00618:  DATA 45,4E
0061A:  DATA 44,20
0061C:  DATA 53,57
0061E:  DATA 45,45
00620:  DATA 50,20
00622:  DATA 32,70
00624:  DATA 6F,72
00626:  DATA 74,0D
00628:  DATA 0A,00
0062A:  DATA 53,74
0062C:  DATA 61,72
0062E:  DATA 74,20
00630:  DATA 43,49
00632:  DATA 47,53
00634:  DATA 20,64
00636:  DATA 61,74
00638:  DATA 61,20
0063A:  DATA 63,6F
0063C:  DATA 6E,76
0063E:  DATA 65,72
00640:  DATA 73,69
00642:  DATA 6F,6E
00644:  DATA 0D,0A
00646:  DATA 00,00
00648:  DATA 53,74
0064A:  DATA 61,72
0064C:  DATA 74,20
0064E:  DATA 53,57
00650:  DATA 45,45
00652:  DATA 50,20
00654:  DATA 50,4F
00656:  DATA 52,54
00658:  DATA 31,0D
0065A:  DATA 0A,00
0065C:  DATA 09,53
0065E:  DATA 77,65
00660:  DATA 65,70
00662:  DATA 20,73
00664:  DATA 74,65
00666:  DATA 70,20
00668:  DATA 3A,20
0066A:  DATA 25,75
0066C:  DATA 0D,0A
0066E:  DATA 00,00
00670:  DATA 45,4E
00672:  DATA 44,20
00674:  DATA 53,57
00676:  DATA 45,45
00678:  DATA 50,20
0067A:  DATA 50,4F
0067C:  DATA 52,54
0067E:  DATA 31,0D
00680:  DATA 0A,00
00682:  DATA 53,74
00684:  DATA 61,72
00686:  DATA 74,20
00688:  DATA 43,49
0068A:  DATA 47,53
0068C:  DATA 20,64
0068E:  DATA 61,74
00690:  DATA 61,20
00692:  DATA 63,6F
00694:  DATA 6E,76
00696:  DATA 65,72
00698:  DATA 73,69
0069A:  DATA 6F,6E
0069C:  DATA 0D,0A
0069E:  DATA 00,00
006A0:  DATA 45,6E
006A2:  DATA 64,20
006A4:  DATA 43,49
006A6:  DATA 47,53
006A8:  DATA 20,64
006AA:  DATA 61,74
006AC:  DATA 61,20
006AE:  DATA 63,6F
006B0:  DATA 6E,76
006B2:  DATA 65,72
006B4:  DATA 73,69
006B6:  DATA 6F,6E
006B8:  DATA 0D,0A
006BA:  DATA 00,00
006BC:  DATA 53,74
006BE:  DATA 61,72
006C0:  DATA 74,20
006C2:  DATA 53,57
006C4:  DATA 45,45
006C6:  DATA 50,20
006C8:  DATA 50,4F
006CA:  DATA 52,54
006CC:  DATA 32,0D
006CE:  DATA 0A,00
006D0:  DATA 09,53
006D2:  DATA 77,65
006D4:  DATA 65,70
006D6:  DATA 20,73
006D8:  DATA 74,65
006DA:  DATA 70,20
006DC:  DATA 3A,20
006DE:  DATA 25,75
006E0:  DATA 0D,0A
006E2:  DATA 00,00
006E4:  DATA 45,4E
006E6:  DATA 44,20
006E8:  DATA 53,57
006EA:  DATA 45,45
006EC:  DATA 50,20
006EE:  DATA 50,4F
006F0:  DATA 52,54
006F2:  DATA 32,0D
006F4:  DATA 0A,00
006F6:  DATA 53,74
006F8:  DATA 61,72
006FA:  DATA 74,20
006FC:  DATA 43,49
006FE:  DATA 47,53
00700:  DATA 20,64
00702:  DATA 61,74
00704:  DATA 61,20
00706:  DATA 63,6F
00708:  DATA 6E,76
0070A:  DATA 65,72
0070C:  DATA 73,69
0070E:  DATA 6F,6E
00710:  DATA 0D,0A
00712:  DATA 00,00
00714:  DATA 53,74
00716:  DATA 61,72
00718:  DATA 74,20
0071A:  DATA 53,57
0071C:  DATA 45,45
0071E:  DATA 50,20
00720:  DATA 77,69
00722:  DATA 74,68
00724:  DATA 20,74
00726:  DATA 68,72
00728:  DATA 65,73
0072A:  DATA 68,6F
0072C:  DATA 6C,64
0072E:  DATA 0D,0A
00730:  DATA 00,00
00732:  DATA 43,49
00734:  DATA 47,53
00736:  DATA 32,20
00738:  DATA 64,61
0073A:  DATA 74,61
0073C:  DATA 3A,20
0073E:  DATA 25,30
00740:  DATA 34,4C
00742:  DATA 58,2C
00744:  DATA 20,25
00746:  DATA 30,34
00748:  DATA 4C,58
0074A:  DATA 0D,0A
0074C:  DATA 00,00
0074E:  DATA 4D,61
00750:  DATA 78,69
00752:  DATA 6D,75
00754:  DATA 6D,20
00756:  DATA 73,74
00758:  DATA 65,70
0075A:  DATA 20,63
0075C:  DATA 6F,75
0075E:  DATA 6E,74
00760:  DATA 20,72
00762:  DATA 65,61
00764:  DATA 63,68
00766:  DATA 65,64
00768:  DATA 3A,20
0076A:  DATA 25,6C
0076C:  DATA 64,0D
0076E:  DATA 0A,00
00770:  DATA 43,49
00772:  DATA 47,53
00774:  DATA 31,20
00776:  DATA 63,75
00778:  DATA 72,72
0077A:  DATA 65,6E
0077C:  DATA 74,20
0077E:  DATA 6C,69
00780:  DATA 6D,69
00782:  DATA 74,20
00784:  DATA 72,65
00786:  DATA 61,63
00788:  DATA 68,65
0078A:  DATA 64,3A
0078C:  DATA 00,00
0078E:  DATA 43,49
00790:  DATA 47,53
00792:  DATA 31,20
00794:  DATA 63,75
00796:  DATA 72,72
00798:  DATA 65,6E
0079A:  DATA 74,20
0079C:  DATA 62,65
0079E:  DATA 6C,6F
007A0:  DATA 77,20
007A2:  DATA 74,68
007A4:  DATA 72,65
007A6:  DATA 73,68
007A8:  DATA 6F,6C
007AA:  DATA 64,00
007AC:  DATA 43,49
007AE:  DATA 47,53
007B0:  DATA 32,20
007B2:  DATA 63,75
007B4:  DATA 72,72
007B6:  DATA 65,6E
007B8:  DATA 74,20
007BA:  DATA 6C,69
007BC:  DATA 6D,69
007BE:  DATA 74,20
007C0:  DATA 72,65
007C2:  DATA 61,63
007C4:  DATA 68,65
007C6:  DATA 64,3A
007C8:  DATA 20,00
007CA:  DATA 43,49
007CC:  DATA 47,53
007CE:  DATA 32,20
007D0:  DATA 63,75
007D2:  DATA 72,72
007D4:  DATA 65,6E
007D6:  DATA 74,20
007D8:  DATA 62,65
007DA:  DATA 6C,6F
007DC:  DATA 77,20
007DE:  DATA 74,68
007E0:  DATA 72,65
007E2:  DATA 73,68
007E4:  DATA 6F,6C
007E6:  DATA 64,3A
007E8:  DATA 00,00
007EA:  DATA 45,6E
007EC:  DATA 64,20
007EE:  DATA 53,57
007F0:  DATA 45,45
007F2:  DATA 50,20
007F4:  DATA 77,69
007F6:  DATA 74,68
007F8:  DATA 20,74
007FA:  DATA 68,72
007FC:  DATA 65,73
007FE:  DATA 68,6F
00800:  DATA 6C,64
00802:  DATA 0D,0A
00804:  DATA 00,00
00806:  DATA 45,6E
00808:  DATA 64,20
0080A:  DATA 43,49
0080C:  DATA 47,53
0080E:  DATA 20,64
00810:  DATA 61,74
00812:  DATA 61,20
00814:  DATA 63,6F
00816:  DATA 6E,76
00818:  DATA 65,72
0081A:  DATA 73,69
0081C:  DATA 6F,6E
0081E:  DATA 0D,0A
00820:  DATA 00,00
00822:  DATA 4D,69
00824:  DATA 73,73
00826:  DATA 69,6F
00828:  DATA 6E,20
0082A:  DATA 46,6C
0082C:  DATA 61,73
0082E:  DATA 68,20
00830:  DATA 69,73
00832:  DATA 20,6E
00834:  DATA 6F,74
00836:  DATA 20,63
00838:  DATA 6F,6E
0083A:  DATA 6E,65
0083C:  DATA 63,74
0083E:  DATA 65,64
00840:  DATA 0D,0A
00842:  DATA 00,00
00844:  DATA 43,52
00846:  DATA 43,20
00848:  DATA 76,65
0084A:  DATA 72,69
0084C:  DATA 66,69
0084E:  DATA 63,61
00850:  DATA 74,69
00852:  DATA 6F,6E
00854:  DATA 20,70
00856:  DATA 61,73
00858:  DATA 73,65
0085A:  DATA 64,20
0085C:  DATA 6F,6E
0085E:  DATA 20,61
00860:  DATA 74,74
00862:  DATA 65,6D
00864:  DATA 70,74
00866:  DATA 20,25
00868:  DATA 64,0D
0086A:  DATA 0A,00
0086C:  DATA 43,52
0086E:  DATA 43,20
00870:  DATA 76,65
00872:  DATA 72,69
00874:  DATA 66,69
00876:  DATA 63,61
00878:  DATA 74,69
0087A:  DATA 6F,6E
0087C:  DATA 20,70
0087E:  DATA 61,73
00880:  DATA 73,65
00882:  DATA 64,20
00884:  DATA 6F,6E
00886:  DATA 20,61
00888:  DATA 74,74
0088A:  DATA 65,6D
0088C:  DATA 70,74
0088E:  DATA 20,25
00890:  DATA 64,0D
00892:  DATA 0A,00
00894:  DATA 45,72
00896:  DATA 72,6F
00898:  DATA 72,3A
0089A:  DATA 20,43
0089C:  DATA 52,43
0089E:  DATA 20,76
008A0:  DATA 65,72
008A2:  DATA 69,66
008A4:  DATA 69,63
008A6:  DATA 61,74
008A8:  DATA 69,6F
008AA:  DATA 6E,20
008AC:  DATA 66,61
008AE:  DATA 69,6C
008B0:  DATA 65,64
008B2:  DATA 20,61
008B4:  DATA 66,74
008B6:  DATA 65,72
008B8:  DATA 20,25
008BA:  DATA 64,20
008BC:  DATA 61,74
008BE:  DATA 74,65
008C0:  DATA 6D,70
008C2:  DATA 74,73
008C4:  DATA 0D,0A
008C6:  DATA 00,00
008C8:  DATA 0D,0A
008CA:  DATA 5F,5F
008CC:  DATA 5F,5F
008CE:  DATA 5F,5F
008D0:  DATA 5F,5F
008D2:  DATA 5F,5F
008D4:  DATA 5F,5F
008D6:  DATA 5F,5F
008D8:  DATA 5F,5F
008DA:  DATA 5F,5F
008DC:  DATA 5F,5F
008DE:  DATA 0D,0A
008E0:  DATA 00,00
008E2:  DATA 5F,5F
008E4:  DATA 5F,53
008E6:  DATA 74,61
008E8:  DATA 72,74
008EA:  DATA 20,63
008EC:  DATA 6F,70
008EE:  DATA 79,5F
008F0:  DATA 64,61
008F2:  DATA 74,61
008F4:  DATA 5F,5F
008F6:  DATA 0D,0A
008F8:  DATA 00,00
008FA:  DATA 49,6E
008FC:  DATA 20,53
008FE:  DATA 4D,46
00900:  DATA 20,6D
00902:  DATA 69,73
00904:  DATA 73,69
00906:  DATA 6F,6E
00908:  DATA 20,64
0090A:  DATA 61,74
0090C:  DATA 61,20
0090E:  DATA 73,74
00910:  DATA 61,72
00912:  DATA 74,20
00914:  DATA 20,20
00916:  DATA 61,64
00918:  DATA 64,72
0091A:  DATA 65,73
0091C:  DATA 73,3A
0091E:  DATA 20,25
00920:  DATA 4C,58
00922:  DATA 0D,0A
00924:  DATA 00,00
00926:  DATA 49,6E
00928:  DATA 20,53
0092A:  DATA 4D,46
0092C:  DATA 20,6D
0092E:  DATA 69,73
00930:  DATA 73,69
00932:  DATA 6F,6E
00934:  DATA 20,64
00936:  DATA 61,74
00938:  DATA 61,20
0093A:  DATA 65,6E
0093C:  DATA 64,20
0093E:  DATA 20,20
00940:  DATA 20,20
00942:  DATA 61,64
00944:  DATA 64,72
00946:  DATA 65,73
00948:  DATA 73,3A
0094A:  DATA 20,25
0094C:  DATA 4C,58
0094E:  DATA 0D,0A
00950:  DATA 00,00
00952:  DATA 49,6E
00954:  DATA 20,4D
00956:  DATA 49,53
00958:  DATA 20,46
0095A:  DATA 4D,20
0095C:  DATA 57,72
0095E:  DATA 69,74
00960:  DATA 65,20
00962:  DATA 73,6F
00964:  DATA 75,72
00966:  DATA 63,65
00968:  DATA 20,64
0096A:  DATA 61,74
0096C:  DATA 61,20
0096E:  DATA 61,64
00970:  DATA 64,72
00972:  DATA 65,73
00974:  DATA 73,3A
00976:  DATA 20,25
00978:  DATA 4C,58
0097A:  DATA 0D,0A
0097C:  DATA 00,00
0097E:  DATA 49,6E
00980:  DATA 20,4D
00982:  DATA 49,53
00984:  DATA 20,46
00986:  DATA 4D,20
00988:  DATA 57,72
0098A:  DATA 69,74
0098C:  DATA 65,20
0098E:  DATA 64,61
00990:  DATA 74,61
00992:  DATA 20,73
00994:  DATA 69,7A
00996:  DATA 65,20
00998:  DATA 20,20
0099A:  DATA 20,20
0099C:  DATA 20,20
0099E:  DATA 20,20
009A0:  DATA 20,3A
009A2:  DATA 20,25
009A4:  DATA 6C,75
009A6:  DATA 20,28
009A8:  DATA 30,78
009AA:  DATA 25,6C
009AC:  DATA 78,29
009AE:  DATA 0D,0A
009B0:  DATA 0D,0A
009B2:  DATA 00,00
009B4:  DATA 45,72
009B6:  DATA 72,6F
009B8:  DATA 72,3A
009BA:  DATA 20,4D
009BC:  DATA 49,53
009BE:  DATA 20,46
009C0:  DATA 4D,20
009C2:  DATA 69,73
009C4:  DATA 20,6E
009C6:  DATA 6F,74
009C8:  DATA 20,63
009CA:  DATA 6F,6E
009CC:  DATA 6E,65
009CE:  DATA 63,74
009D0:  DATA 65,64
009D2:  DATA 0D,0A
009D4:  DATA 00,00
009D6:  DATA 45,72
009D8:  DATA 72,6F
009DA:  DATA 72,3A
009DC:  DATA 20,53
009DE:  DATA 4D,46
009E0:  DATA 20,69
009E2:  DATA 73,20
009E4:  DATA 6E,6F
009E6:  DATA 74,20
009E8:  DATA 63,6F
009EA:  DATA 6E,6E
009EC:  DATA 65,63
009EE:  DATA 74,65
009F0:  DATA 64,0D
009F2:  DATA 0A,00
009F4:  DATA 53,69
009F6:  DATA 7A,65
009F8:  DATA 20,61
009FA:  DATA 72,65
009FC:  DATA 61,20
009FE:  DATA 72,65
00A00:  DATA 61,64
00A02:  DATA 0D,0A
00A04:  DATA 00,00
00A06:  DATA 75,73
00A08:  DATA 65,64
00A0A:  DATA 5F,73
00A0C:  DATA 69,7A
00A0E:  DATA 65,20
00A10:  DATA 3D,20
00A12:  DATA 25,6C
00A14:  DATA 64,20
00A16:  DATA 28,73
00A18:  DATA 72,63
00A1A:  DATA 20,30
00A1C:  DATA 78,25
00A1E:  DATA 30,38
00A20:  DATA 4C,58
00A22:  DATA 29,0D
00A24:  DATA 0A,00
00A26:  DATA 6C,6F
00A28:  DATA 6F,70
00A2A:  DATA 20,63
00A2C:  DATA 6F,75
00A2E:  DATA 6E,74
00A30:  DATA 3D,20
00A32:  DATA 25,64
00A34:  DATA 20,20
00A36:  DATA 28,73
00A38:  DATA 72,63
00A3A:  DATA 20,30
00A3C:  DATA 78,25
00A3E:  DATA 30,38
00A40:  DATA 4C,58
00A42:  DATA 29,0D
00A44:  DATA 0A,0D
00A46:  DATA 0A,00
00A48:  DATA 57,72
00A4A:  DATA 61,70
00A4C:  DATA 20,74
00A4E:  DATA 72,69
00A50:  DATA 67,67
00A52:  DATA 65,72
00A54:  DATA 65,64
00A56:  DATA 3A,20
00A58:  DATA 52,65
00A5A:  DATA 73,65
00A5C:  DATA 74,74
00A5E:  DATA 69,6E
00A60:  DATA 67,20
00A62:  DATA 64,61
00A64:  DATA 74,61
00A66:  DATA 5F,77
00A68:  DATA 72,69
00A6A:  DATA 74,65
00A6C:  DATA 5F,61
00A6E:  DATA 64,64
00A70:  DATA 72,20
00A72:  DATA 74,6F
00A74:  DATA 20,73
00A76:  DATA 74,61
00A78:  DATA 72,74
00A7A:  DATA 0D,0A
00A7C:  DATA 00,00
00A7E:  DATA 75,73
00A80:  DATA 65,64
00A82:  DATA 5F,73
00A84:  DATA 69,7A
00A86:  DATA 65,20
00A88:  DATA 3D,20
00A8A:  DATA 25,6C
00A8C:  DATA 64,0D
00A8E:  DATA 0A,00
00A90:  DATA 6C,6F
00A92:  DATA 6F,70
00A94:  DATA 5F,63
00A96:  DATA 6F,75
00A98:  DATA 6E,74
00A9A:  DATA 20,3D
00A9C:  DATA 20,25
00A9E:  DATA 75,0D
00AA0:  DATA 0A,0D
00AA2:  DATA 0A,00
00AA4:  DATA 0D,0A
00AA6:  DATA 5F,5F
00AA8:  DATA 5F,45
00AAA:  DATA 6E,64
00AAC:  DATA 20,63
00AAE:  DATA 6F,70
00AB0:  DATA 79,5F
00AB2:  DATA 64,61
00AB4:  DATA 74,61
00AB6:  DATA 5F,5F
00AB8:  DATA 5F,5F
00ABA:  DATA 0D,0A
00ABC:  DATA 00,00
00ABE:  DATA 5F,5F
00AC0:  DATA 5F,5F
00AC2:  DATA 5F,5F
00AC4:  DATA 5F,5F
00AC6:  DATA 5F,5F
00AC8:  DATA 5F,5F
00ACA:  DATA 5F,5F
00ACC:  DATA 5F,5F
00ACE:  DATA 5F,5F
00AD0:  DATA 5F,5F
00AD2:  DATA 0D,0A
00AD4:  DATA 0D,0A
00AD6:  DATA 00,00
00AD8:  DATA 0D,0A
00ADA:  DATA 5F,5F
00ADC:  DATA 5F,5F
00ADE:  DATA 5F,5F
00AE0:  DATA 5F,5F
00AE2:  DATA 5F,5F
00AE4:  DATA 5F,5F
00AE6:  DATA 5F,5F
00AE8:  DATA 5F,5F
00AEA:  DATA 5F,5F
00AEC:  DATA 5F,5F
00AEE:  DATA 0D,0A
00AF0:  DATA 00,00
00AF2:  DATA 5F,5F
00AF4:  DATA 5F,53
00AF6:  DATA 74,61
00AF8:  DATA 72,74
00AFA:  DATA 20,53
00AFC:  DATA 4D,46
00AFE:  DATA 20,52
00B00:  DATA 65,61
00B02:  DATA 64,5F
00B04:  DATA 5F,5F
00B06:  DATA 5F,0D
00B08:  DATA 0A,00
00B0A:  DATA 49,6E
00B0C:  DATA 20,53
00B0E:  DATA 4D,46
00B10:  DATA 20,52
00B12:  DATA 65,61
00B14:  DATA 64,20
00B16:  DATA 73,6F
00B18:  DATA 75,72
00B1A:  DATA 63,65
00B1C:  DATA 20,64
00B1E:  DATA 61,74
00B20:  DATA 61,20
00B22:  DATA 61,64
00B24:  DATA 64,72
00B26:  DATA 65,73
00B28:  DATA 73,3A
00B2A:  DATA 20,25
00B2C:  DATA 4C,58
00B2E:  DATA 0D,0A
00B30:  DATA 00,00
00B32:  DATA 49,6E
00B34:  DATA 20,53
00B36:  DATA 4D,46
00B38:  DATA 20,52
00B3A:  DATA 65,61
00B3C:  DATA 64,20
00B3E:  DATA 64,61
00B40:  DATA 74,61
00B42:  DATA 20,73
00B44:  DATA 69,7A
00B46:  DATA 65,20
00B48:  DATA 20,20
00B4A:  DATA 20,20
00B4C:  DATA 20,20
00B4E:  DATA 20,20
00B50:  DATA 20,3A
00B52:  DATA 20,25
00B54:  DATA 6C,75
00B56:  DATA 20,28
00B58:  DATA 30,78
00B5A:  DATA 25,6C
00B5C:  DATA 78,29
00B5E:  DATA 0D,0A
00B60:  DATA 0D,0A
00B62:  DATA 00,00
00B64:  DATA 45,72
00B66:  DATA 72,6F
00B68:  DATA 72,3A
00B6A:  DATA 20,53
00B6C:  DATA 4D,46
00B6E:  DATA 20,69
00B70:  DATA 73,20
00B72:  DATA 6E,6F
00B74:  DATA 74,20
00B76:  DATA 63,6F
00B78:  DATA 6E,6E
00B7A:  DATA 65,63
00B7C:  DATA 74,65
00B7E:  DATA 64,0D
00B80:  DATA 0A,00
00B82:  DATA 52,45
00B84:  DATA 41,44
00B86:  DATA 20,44
00B88:  DATA 41,54
00B8A:  DATA 41,20
00B8C:  DATA 46,52
00B8E:  DATA 4F,4D
00B90:  DATA 20,53
00B92:  DATA 4D,46
00B94:  DATA 2E,2E
00B96:  DATA 2E,0D
00B98:  DATA 0A,00
00B9A:  DATA 0D,0A
00B9C:  DATA 5F,5F
00B9E:  DATA 5F,45
00BA0:  DATA 6E,64
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,52
00BA8:  DATA 65,61
00BAA:  DATA 64,5F
00BAC:  DATA 5F,5F
00BAE:  DATA 5F,0D
00BB0:  DATA 0A,00
00BB2:  DATA 5F,5F
00BB4:  DATA 5F,5F
00BB6:  DATA 5F,5F
00BB8:  DATA 5F,5F
00BBA:  DATA 5F,5F
00BBC:  DATA 5F,5F
00BBE:  DATA 5F,5F
00BC0:  DATA 5F,5F
00BC2:  DATA 5F,5F
00BC4:  DATA 5F,5F
00BC6:  DATA 0D,0A
00BC8:  DATA 0D,0A
00BCA:  DATA 00,00
00BCC:  DATA 0D,0A
00BCE:  DATA 5F,5F
00BD0:  DATA 5F,5F
00BD2:  DATA 5F,5F
00BD4:  DATA 5F,5F
00BD6:  DATA 5F,5F
00BD8:  DATA 5F,5F
00BDA:  DATA 5F,5F
00BDC:  DATA 5F,5F
00BDE:  DATA 5F,5F
00BE0:  DATA 5F,5F
00BE2:  DATA 0D,0A
00BE4:  DATA 00,00
00BE6:  DATA 5F,5F
00BE8:  DATA 5F,53
00BEA:  DATA 74,61
00BEC:  DATA 72,74
00BEE:  DATA 20,73
00BF0:  DATA 6D,66
00BF2:  DATA 5F,65
00BF4:  DATA 72,61
00BF6:  DATA 73,65
00BF8:  DATA 5F,5F
00BFA:  DATA 5F,5F
00BFC:  DATA 0D,0A
00BFE:  DATA 00,00
00C00:  DATA 49,6E
00C02:  DATA 20,53
00C04:  DATA 4D,46
00C06:  DATA 20,6D
00C08:  DATA 69,73
00C0A:  DATA 73,69
00C0C:  DATA 6F,6E
00C0E:  DATA 20,64
00C10:  DATA 61,74
00C12:  DATA 61,20
00C14:  DATA 73,74
00C16:  DATA 61,72
00C18:  DATA 74,20
00C1A:  DATA 20,20
00C1C:  DATA 61,64
00C1E:  DATA 64,72
00C20:  DATA 65,73
00C22:  DATA 73,3A
00C24:  DATA 20,25
00C26:  DATA 4C,58
00C28:  DATA 0D,0A
00C2A:  DATA 00,00
00C2C:  DATA 49,6E
00C2E:  DATA 20,53
00C30:  DATA 4D,46
00C32:  DATA 20,6D
00C34:  DATA 69,73
00C36:  DATA 73,69
00C38:  DATA 6F,6E
00C3A:  DATA 20,64
00C3C:  DATA 61,74
00C3E:  DATA 61,20
00C40:  DATA 65,6E
00C42:  DATA 64,20
00C44:  DATA 20,20
00C46:  DATA 20,20
00C48:  DATA 61,64
00C4A:  DATA 64,72
00C4C:  DATA 65,73
00C4E:  DATA 73,3A
00C50:  DATA 20,25
00C52:  DATA 4C,58
00C54:  DATA 0D,0A
00C56:  DATA 00,00
00C58:  DATA 49,6E
00C5A:  DATA 20,53
00C5C:  DATA 4D,46
00C5E:  DATA 20,45
00C60:  DATA 72,61
00C62:  DATA 73,65
00C64:  DATA 20,73
00C66:  DATA 6F,75
00C68:  DATA 72,63
00C6A:  DATA 65,20
00C6C:  DATA 64,61
00C6E:  DATA 74,61
00C70:  DATA 20,61
00C72:  DATA 64,64
00C74:  DATA 72,65
00C76:  DATA 73,73
00C78:  DATA 3A,20
00C7A:  DATA 25,4C
00C7C:  DATA 58,0D
00C7E:  DATA 0A,00
00C80:  DATA 49,6E
00C82:  DATA 20,53
00C84:  DATA 4D,46
00C86:  DATA 20,45
00C88:  DATA 72,61
00C8A:  DATA 73,65
00C8C:  DATA 20,64
00C8E:  DATA 61,74
00C90:  DATA 61,20
00C92:  DATA 73,69
00C94:  DATA 7A,65
00C96:  DATA 20,20
00C98:  DATA 20,20
00C9A:  DATA 20,20
00C9C:  DATA 20,20
00C9E:  DATA 20,20
00CA0:  DATA 3A,20
00CA2:  DATA 25,6C
00CA4:  DATA 75,20
00CA6:  DATA 28,30
00CA8:  DATA 78,25
00CAA:  DATA 6C,78
00CAC:  DATA 29,0D
00CAE:  DATA 0A,0D
00CB0:  DATA 0A,00
00CB2:  DATA 45,72
00CB4:  DATA 72,6F
00CB6:  DATA 72,3A
00CB8:  DATA 20,53
00CBA:  DATA 4D,46
00CBC:  DATA 20,69
00CBE:  DATA 73,20
00CC0:  DATA 6E,6F
00CC2:  DATA 74,20
00CC4:  DATA 63,6F
00CC6:  DATA 6E,6E
00CC8:  DATA 65,63
00CCA:  DATA 74,65
00CCC:  DATA 64,0D
00CCE:  DATA 0A,00
00CD0:  DATA 45,72
00CD2:  DATA 72,6F
00CD4:  DATA 72,3A
00CD6:  DATA 20,45
00CD8:  DATA 72,61
00CDA:  DATA 73,65
00CDC:  DATA 20,73
00CDE:  DATA 6F,75
00CE0:  DATA 72,63
00CE2:  DATA 65,20
00CE4:  DATA 61,64
00CE6:  DATA 64,72
00CE8:  DATA 65,73
00CEA:  DATA 73,20
00CEC:  DATA 30,78
00CEE:  DATA 25,4C
00CF0:  DATA 58,20
00CF2:  DATA 69,73
00CF4:  DATA 20,6F
00CF6:  DATA 75,74
00CF8:  DATA 73,69
00CFA:  DATA 64,65
00CFC:  DATA 20,6D
00CFE:  DATA 69,73
00D00:  DATA 73,69
00D02:  DATA 6F,6E
00D04:  DATA 20,72
00D06:  DATA 61,6E
00D08:  DATA 67,65
00D0A:  DATA 20,5B
00D0C:  DATA 30,78
00D0E:  DATA 25,4C
00D10:  DATA 58,20
00D12:  DATA 2D,20
00D14:  DATA 30,78
00D16:  DATA 25,4C
00D18:  DATA 58,5D
00D1A:  DATA 0D,0A
00D1C:  DATA 00,00
00D1E:  DATA 45,72
00D20:  DATA 72,6F
00D22:  DATA 72,3A
00D24:  DATA 20,45
00D26:  DATA 72,61
00D28:  DATA 73,65
00D2A:  DATA 20,6F
00D2C:  DATA 70,65
00D2E:  DATA 72,61
00D30:  DATA 74,69
00D32:  DATA 6F,6E
00D34:  DATA 20,77
00D36:  DATA 6F,75
00D38:  DATA 6C,64
00D3A:  DATA 20,65
00D3C:  DATA 78,63
00D3E:  DATA 65,65
00D40:  DATA 64,20
00D42:  DATA 6D,69
00D44:  DATA 73,73
00D46:  DATA 69,6F
00D48:  DATA 6E,20
00D4A:  DATA 65,6E
00D4C:  DATA 64,20
00D4E:  DATA 61,64
00D50:  DATA 64,72
00D52:  DATA 65,73
00D54:  DATA 73,20
00D56:  DATA 30,78
00D58:  DATA 25,4C
00D5A:  DATA 58,0D
00D5C:  DATA 0A,00
00D5E:  DATA 4C,69
00D60:  DATA 6D,69
00D62:  DATA 74,69
00D64:  DATA 6E,67
00D66:  DATA 20,65
00D68:  DATA 72,61
00D6A:  DATA 73,65
00D6C:  DATA 20,73
00D6E:  DATA 69,7A
00D70:  DATA 65,20
00D72:  DATA 74,6F
00D74:  DATA 20,73
00D76:  DATA 74,61
00D78:  DATA 79,20
00D7A:  DATA 77,69
00D7C:  DATA 74,68
00D7E:  DATA 69,6E
00D80:  DATA 20,6D
00D82:  DATA 69,73
00D84:  DATA 73,69
00D86:  DATA 6F,6E
00D88:  DATA 20,62
00D8A:  DATA 6F,75
00D8C:  DATA 6E,64
00D8E:  DATA 73,0D
00D90:  DATA 0A,00
00D92:  DATA 45,72
00D94:  DATA 61,73
00D96:  DATA 65,20
00D98:  DATA 6F,70
00D9A:  DATA 65,72
00D9C:  DATA 61,74
00D9E:  DATA 69,6F
00DA0:  DATA 6E,20
00DA2:  DATA 76,61
00DA4:  DATA 6C,69
00DA6:  DATA 64,61
00DA8:  DATA 74,65
00DAA:  DATA 64,20
00DAC:  DATA 77,69
00DAE:  DATA 74,68
00DB0:  DATA 69,6E
00DB2:  DATA 20,6D
00DB4:  DATA 69,73
00DB6:  DATA 73,69
00DB8:  DATA 6F,6E
00DBA:  DATA 20,72
00DBC:  DATA 61,6E
00DBE:  DATA 67,65
00DC0:  DATA 0D,0A
00DC2:  DATA 00,00
00DC4:  DATA 0D,0A
00DC6:  DATA 5F,5F
00DC8:  DATA 5F,45
00DCA:  DATA 6E,64
00DCC:  DATA 20,73
00DCE:  DATA 6D,66
00DD0:  DATA 5F,65
00DD2:  DATA 72,61
00DD4:  DATA 73,65
00DD6:  DATA 5F,5F
00DD8:  DATA 5F,5F
00DDA:  DATA 0D,0A
00DDC:  DATA 00,00
00DDE:  DATA 5F,5F
00DE0:  DATA 5F,5F
00DE2:  DATA 5F,5F
00DE4:  DATA 5F,5F
00DE6:  DATA 5F,5F
00DE8:  DATA 5F,5F
00DEA:  DATA 5F,5F
00DEC:  DATA 5F,5F
00DEE:  DATA 5F,5F
00DF0:  DATA 5F,5F
00DF2:  DATA 0D,0A
00DF4:  DATA 0D,0A
00DF6:  DATA 00,00
00DF8:  DATA 45,72
00DFA:  DATA 72,6F
00DFC:  DATA 72,3A
00DFE:  DATA 20,55
00E00:  DATA 6E,6B
00E02:  DATA 6E,6F
00E04:  DATA 77,6E
00E06:  DATA 20,6D
00E08:  DATA 69,73
00E0A:  DATA 73,69
00E0C:  DATA 6F,6E
00E0E:  DATA 5F,69
00E10:  DATA 64,3A
00E12:  DATA 20,25
00E14:  DATA 30,32
00E16:  DATA 58,0D
00E18:  DATA 0A,00
00E1A:  DATA 55,70
00E1C:  DATA 64,61
00E1E:  DATA 74,65
00E20:  DATA 64,20
00E22:  DATA 70,61
00E24:  DATA 72,74
00E26:  DATA 69,74
00E28:  DATA 69,6F
00E2A:  DATA 6E,20
00E2C:  DATA 66,6F
00E2E:  DATA 72,20
00E30:  DATA 6D,69
00E32:  DATA 73,73
00E34:  DATA 69,6F
00E36:  DATA 6E,5F
00E38:  DATA 69,64
00E3A:  DATA 20,25
00E3C:  DATA 30,32
00E3E:  DATA 58,3A
00E40:  DATA 20,75
00E42:  DATA 73,65
00E44:  DATA 64,5F
00E46:  DATA 73,69
00E48:  DATA 7A,65
00E4A:  DATA 3D,25
00E4C:  DATA 6C,64
00E4E:  DATA 2C,20
00E50:  DATA 6C,6F
00E52:  DATA 6F,70
00E54:  DATA 5F,63
00E56:  DATA 6F,75
00E58:  DATA 6E,74
00E5A:  DATA 65,72
00E5C:  DATA 3D,25
00E5E:  DATA 6C,64
00E60:  DATA 0D,0A
00E62:  DATA 00,00
00E64:  DATA 4D,49
00E66:  DATA 53,46
00E68:  DATA 20,43
00E6A:  DATA 6F,75
00E6C:  DATA 6E,74
00E6E:  DATA 65,72
00E70:  DATA 20,55
00E72:  DATA 70,64
00E74:  DATA 61,74
00E76:  DATA 65,20
00E78:  DATA 2D,20
00E7A:  DATA 4D,65
00E7C:  DATA 61,73
00E7E:  DATA 75,72
00E80:  DATA 65,6D
00E82:  DATA 65,6E
00E84:  DATA 74,3A
00E86:  DATA 20,2B
00E88:  DATA 25,6C
00E8A:  DATA 64,2C
00E8C:  DATA 20,54
00E8E:  DATA 6F,74
00E90:  DATA 61,6C
00E92:  DATA 3A,20
00E94:  DATA 25,6C
00E96:  DATA 75,0D
00E98:  DATA 0A,00
00E9A:  DATA 4D,49
00E9C:  DATA 53,46
00E9E:  DATA 20,43
00EA0:  DATA 6F,75
00EA2:  DATA 6E,74
00EA4:  DATA 65,72
00EA6:  DATA 20,55
00EA8:  DATA 70,64
00EAA:  DATA 61,74
00EAC:  DATA 65,20
00EAE:  DATA 2D,20
00EB0:  DATA 50,69
00EB2:  DATA 63,6C
00EB4:  DATA 6F,67
00EB6:  DATA 3A,20
00EB8:  DATA 2B,25
00EBA:  DATA 6C,64
00EBC:  DATA 2C,20
00EBE:  DATA 54,6F
00EC0:  DATA 74,61
00EC2:  DATA 6C,3A
00EC4:  DATA 20,25
00EC6:  DATA 6C,75
00EC8:  DATA 0D,0A
00ECA:  DATA 00,00
00ECC:  DATA 57,61
00ECE:  DATA 72,6E
00ED0:  DATA 69,6E
00ED2:  DATA 67,3A
00ED4:  DATA 20,55
00ED6:  DATA 6E,6B
00ED8:  DATA 6E,6F
00EDA:  DATA 77,6E
00EDC:  DATA 20,6D
00EDE:  DATA 69,73
00EE0:  DATA 73,69
00EE2:  DATA 6F,6E
00EE4:  DATA 5F,69
00EE6:  DATA 64,20
00EE8:  DATA 25,30
00EEA:  DATA 32,58
00EEC:  DATA 20,66
00EEE:  DATA 6F,72
00EF0:  DATA 20,63
00EF2:  DATA 6F,75
00EF4:  DATA 6E,74
00EF6:  DATA 65,72
00EF8:  DATA 20,75
00EFA:  DATA 70,64
00EFC:  DATA 61,74
00EFE:  DATA 65,0D
00F00:  DATA 0A,00
00F02:  DATA 52,65
00F04:  DATA 73,65
00F06:  DATA 74,20
00F08:  DATA 6D,69
00F0A:  DATA 73,66
00F0C:  DATA 5F,6D
00F0E:  DATA 65,61
00F10:  DATA 73,5F
00F12:  DATA 75,6E
00F14:  DATA 63,6F
00F16:  DATA 70,79
00F18:  DATA 65,64
00F1A:  DATA 5F,63
00F1C:  DATA 6F,75
00F1E:  DATA 6E,74
00F20:  DATA 65,72
00F22:  DATA 0D,0A
00F24:  DATA 00,00
00F26:  DATA 52,65
00F28:  DATA 73,65
00F2A:  DATA 74,20
00F2C:  DATA 6D,69
00F2E:  DATA 73,66
00F30:  DATA 5F,70
00F32:  DATA 69,63
00F34:  DATA 6C,6F
00F36:  DATA 67,5F
00F38:  DATA 75,6E
00F3A:  DATA 63,6F
00F3C:  DATA 70,79
00F3E:  DATA 65,64
00F40:  DATA 5F,63
00F42:  DATA 6F,75
00F44:  DATA 6E,74
00F46:  DATA 65,72
00F48:  DATA 0D,0A
00F4A:  DATA 00,00
00F4C:  DATA 57,61
00F4E:  DATA 72,6E
00F50:  DATA 69,6E
00F52:  DATA 67,3A
00F54:  DATA 20,55
00F56:  DATA 6E,6B
00F58:  DATA 6E,6F
00F5A:  DATA 77,6E
00F5C:  DATA 20,6D
00F5E:  DATA 69,73
00F60:  DATA 73,69
00F62:  DATA 6F,6E
00F64:  DATA 5F,69
00F66:  DATA 64,20
00F68:  DATA 25,30
00F6A:  DATA 32,58
00F6C:  DATA 20,66
00F6E:  DATA 6F,72
00F70:  DATA 20,63
00F72:  DATA 6F,75
00F74:  DATA 6E,74
00F76:  DATA 65,72
00F78:  DATA 20,72
00F7A:  DATA 65,73
00F7C:  DATA 65,74
00F7E:  DATA 0D,0A
00F80:  DATA 00,00
00F82:  DATA 4D,49
00F84:  DATA 53,46
00F86:  DATA 20,4D
00F88:  DATA 65,61
00F8A:  DATA 73,75
00F8C:  DATA 72,65
00F8E:  DATA 6D,65
00F90:  DATA 6E,74
00F92:  DATA 20,43
00F94:  DATA 6F,75
00F96:  DATA 6E,74
00F98:  DATA 65,72
00F9A:  DATA 73,3A
00F9C:  DATA 0D,0A
00F9E:  DATA 00,00
00FA0:  DATA 20,20
00FA2:  DATA 55,73
00FA4:  DATA 65,20
00FA6:  DATA 43,6F
00FA8:  DATA 75,6E
00FAA:  DATA 74,65
00FAC:  DATA 72,3A
00FAE:  DATA 20,25
00FB0:  DATA 6C,75
00FB2:  DATA 0D,0A
00FB4:  DATA 00,00
00FB6:  DATA 20,20
00FB8:  DATA 55,6E
00FBA:  DATA 63,6F
00FBC:  DATA 70,69
00FBE:  DATA 65,64
00FC0:  DATA 20,43
00FC2:  DATA 6F,75
00FC4:  DATA 6E,74
00FC6:  DATA 65,72
00FC8:  DATA 3A,20
00FCA:  DATA 25,6C
00FCC:  DATA 75,0D
00FCE:  DATA 0A,00
00FD0:  DATA 20,20
00FD2:  DATA 4C,6F
00FD4:  DATA 6F,70
00FD6:  DATA 20,43
00FD8:  DATA 6F,75
00FDA:  DATA 6E,74
00FDC:  DATA 65,72
00FDE:  DATA 3A,20
00FE0:  DATA 25,75
00FE2:  DATA 0D,0A
00FE4:  DATA 00,00
00FE6:  DATA 4D,49
00FE8:  DATA 53,46
00FEA:  DATA 20,50
00FEC:  DATA 69,63
00FEE:  DATA 6C,6F
00FF0:  DATA 67,20
00FF2:  DATA 43,6F
00FF4:  DATA 75,6E
00FF6:  DATA 74,65
00FF8:  DATA 72,73
00FFA:  DATA 3A,0D
00FFC:  DATA 0A,00
00FFE:  DATA 20,20
01000:  DATA 55,73
01002:  DATA 65,20
01004:  DATA 43,6F
01006:  DATA 75,6E
01008:  DATA 74,65
0100A:  DATA 72,3A
0100C:  DATA 20,25
0100E:  DATA 6C,75
01010:  DATA 0D,0A
01012:  DATA 00,00
01014:  DATA 20,20
01016:  DATA 55,6E
01018:  DATA 63,6F
0101A:  DATA 70,69
0101C:  DATA 65,64
0101E:  DATA 20,43
01020:  DATA 6F,75
01022:  DATA 6E,74
01024:  DATA 65,72
01026:  DATA 3A,20
01028:  DATA 25,6C
0102A:  DATA 75,0D
0102C:  DATA 0A,00
0102E:  DATA 20,20
01030:  DATA 4C,6F
01032:  DATA 6F,70
01034:  DATA 20,43
01036:  DATA 6F,75
01038:  DATA 6E,74
0103A:  DATA 65,72
0103C:  DATA 3A,20
0103E:  DATA 25,75
01040:  DATA 0D,0A
01042:  DATA 00,00
01044:  DATA 20,20
01046:  DATA 57,72
01048:  DATA 69,74
0104A:  DATA 65,20
0104C:  DATA 43,6F
0104E:  DATA 75,6E
01050:  DATA 74,65
01052:  DATA 72,3A
01054:  DATA 20,25
01056:  DATA 75,0D
01058:  DATA 0A,00
0105A:  DATA 57,61
0105C:  DATA 72,6E
0105E:  DATA 69,6E
01060:  DATA 67,3A
01062:  DATA 20,55
01064:  DATA 6E,6B
01066:  DATA 6E,6F
01068:  DATA 77,6E
0106A:  DATA 20,6D
0106C:  DATA 69,73
0106E:  DATA 73,69
01070:  DATA 6F,6E
01072:  DATA 5F,69
01074:  DATA 64,20
01076:  DATA 25,30
01078:  DATA 32,58
0107A:  DATA 20,66
0107C:  DATA 6F,72
0107E:  DATA 20,63
01080:  DATA 6F,75
01082:  DATA 6E,74
01084:  DATA 65,72
01086:  DATA 20,73
01088:  DATA 74,61
0108A:  DATA 74,75
0108C:  DATA 73,0D
0108E:  DATA 0A,00
01090:  DATA 4D,49
01092:  DATA 53,53
01094:  DATA 49,4F
01096:  DATA 4E,20
01098:  DATA 46,4C
0109A:  DATA 41,53
0109C:  DATA 48,20
0109E:  DATA 49,6E
010A0:  DATA 69,74
010A2:  DATA 69,61
010A4:  DATA 6C,69
010A6:  DATA 7A,65
010A8:  DATA 0D,0A
010AA:  DATA 00,00
010AC:  DATA 09,5B
010AE:  DATA 4D,49
010B0:  DATA 53,20
010B2:  DATA 46,4D
010B4:  DATA 5D,52
010B6:  DATA 45,41
010B8:  DATA 44,20
010BA:  DATA 49,44
010BC:  DATA 3A,00
010BE:  DATA 09,5B
010C0:  DATA 53,4D
010C2:  DATA 46,5D
010C4:  DATA 09,52
010C6:  DATA 45,41
010C8:  DATA 44,20
010CA:  DATA 49,44
010CC:  DATA 3A,00
010CE:  DATA 09,5B
010D0:  DATA 53,4D
010D2:  DATA 46,5D
010D4:  DATA 09,63
010D6:  DATA 6F,6E
010D8:  DATA 6E,65
010DA:  DATA 63,74
010DC:  DATA 20,65
010DE:  DATA 72,72
010E0:  DATA 6F,72
010E2:  DATA 21,0D
010E4:  DATA 0A,00
010E6:  DATA 09,5B
010E8:  DATA 53,4D
010EA:  DATA 46,5D
010EC:  DATA 09,69
010EE:  DATA 73,20
010F0:  DATA 63,6F
010F2:  DATA 6E,6E
010F4:  DATA 65,63
010F6:  DATA 74,65
010F8:  DATA 64,0D
010FA:  DATA 0A,00
010FC:  DATA 09,5B
010FE:  DATA 4D,49
01100:  DATA 53,20
01102:  DATA 46,4D
01104:  DATA 5D,63
01106:  DATA 6F,6E
01108:  DATA 6E,65
0110A:  DATA 63,74
0110C:  DATA 20,65
0110E:  DATA 72,72
01110:  DATA 6F,72
01112:  DATA 21,0D
01114:  DATA 0A,00
01116:  DATA 09,5B
01118:  DATA 4D,49
0111A:  DATA 53,20
0111C:  DATA 46,4D
0111E:  DATA 5D,69
01120:  DATA 73,20
01122:  DATA 63,6F
01124:  DATA 6E,6E
01126:  DATA 65,63
01128:  DATA 74,65
0112A:  DATA 64,0D
0112C:  DATA 0A,00
0112E:  DATA 09,7C
01130:  DATA 20,53
01132:  DATA 4D,46
01134:  DATA 20,20
01136:  DATA 7C,20
01138:  DATA 50,49
0113A:  DATA 43,4C
0113C:  DATA 4F,47
0113E:  DATA 20,7C
01140:  DATA 20,55
01142:  DATA 73,65
01144:  DATA 20,43
01146:  DATA 6F,75
01148:  DATA 6E,74
0114A:  DATA 65,72
0114C:  DATA 20,20
0114E:  DATA 20,20
01150:  DATA 20,20
01152:  DATA 3A,20
01154:  DATA 30,78
01156:  DATA 25,30
01158:  DATA 38,4C
0115A:  DATA 58,0D
0115C:  DATA 0A,00
0115E:  DATA 09,7C
01160:  DATA 20,53
01162:  DATA 4D,46
01164:  DATA 20,20
01166:  DATA 7C,20
01168:  DATA 50,49
0116A:  DATA 43,4C
0116C:  DATA 4F,47
0116E:  DATA 20,7C
01170:  DATA 20,4C
01172:  DATA 6F,6F
01174:  DATA 70,20
01176:  DATA 43,6F
01178:  DATA 75,6E
0117A:  DATA 74,65
0117C:  DATA 72,20
0117E:  DATA 20,20
01180:  DATA 20,20
01182:  DATA 3A,20
01184:  DATA 30,78
01186:  DATA 25,30
01188:  DATA 32,58
0118A:  DATA 0D,0A
0118C:  DATA 00,00
0118E:  DATA 09,7C
01190:  DATA 20,53
01192:  DATA 4D,46
01194:  DATA 20,20
01196:  DATA 7C,20
01198:  DATA 4D,45
0119A:  DATA 41,53
0119C:  DATA 20,20
0119E:  DATA 20,7C
011A0:  DATA 20,55
011A2:  DATA 73,65
011A4:  DATA 20,43
011A6:  DATA 6F,75
011A8:  DATA 6E,74
011AA:  DATA 65,72
011AC:  DATA 20,20
011AE:  DATA 20,20
011B0:  DATA 20,20
011B2:  DATA 3A,20
011B4:  DATA 30,78
011B6:  DATA 25,30
011B8:  DATA 38,4C
011BA:  DATA 58,0D
011BC:  DATA 0A,00
011BE:  DATA 09,7C
011C0:  DATA 20,53
011C2:  DATA 4D,46
011C4:  DATA 20,20
011C6:  DATA 7C,20
011C8:  DATA 4D,45
011CA:  DATA 41,53
011CC:  DATA 20,20
011CE:  DATA 20,7C
011D0:  DATA 20,4C
011D2:  DATA 6F,6F
011D4:  DATA 70,20
011D6:  DATA 43,6F
011D8:  DATA 75,6E
011DA:  DATA 74,65
011DC:  DATA 72,20
011DE:  DATA 20,20
011E0:  DATA 20,20
011E2:  DATA 3A,20
011E4:  DATA 30,78
011E6:  DATA 25,30
011E8:  DATA 32,58
011EA:  DATA 0D,0A
011EC:  DATA 00,00
011EE:  DATA 09,7C
011F0:  DATA 20,4D
011F2:  DATA 49,53
011F4:  DATA 46,20
011F6:  DATA 7C,20
011F8:  DATA 50,49
011FA:  DATA 43,4C
011FC:  DATA 4F,47
011FE:  DATA 20,7C
01200:  DATA 20,55
01202:  DATA 73,65
01204:  DATA 20,43
01206:  DATA 6F,75
01208:  DATA 6E,74
0120A:  DATA 65,72
0120C:  DATA 20,20
0120E:  DATA 20,20
01210:  DATA 20,20
01212:  DATA 3A,20
01214:  DATA 30,78
01216:  DATA 25,30
01218:  DATA 38,4C
0121A:  DATA 58,0D
0121C:  DATA 0A,00
0121E:  DATA 09,7C
01220:  DATA 20,4D
01222:  DATA 49,53
01224:  DATA 46,20
01226:  DATA 7C,20
01228:  DATA 50,49
0122A:  DATA 43,4C
0122C:  DATA 4F,47
0122E:  DATA 20,7C
01230:  DATA 20,55
01232:  DATA 6E,63
01234:  DATA 6F,70
01236:  DATA 79,65
01238:  DATA 64,20
0123A:  DATA 43,6F
0123C:  DATA 75,6E
0123E:  DATA 74,65
01240:  DATA 72,20
01242:  DATA 3A,20
01244:  DATA 30,78
01246:  DATA 25,30
01248:  DATA 38,4C
0124A:  DATA 58,0D
0124C:  DATA 0A,00
0124E:  DATA 09,7C
01250:  DATA 20,4D
01252:  DATA 49,53
01254:  DATA 46,20
01256:  DATA 7C,20
01258:  DATA 50,49
0125A:  DATA 43,4C
0125C:  DATA 4F,47
0125E:  DATA 20,7C
01260:  DATA 20,4C
01262:  DATA 6F,6F
01264:  DATA 70,20
01266:  DATA 43,6F
01268:  DATA 75,6E
0126A:  DATA 74,65
0126C:  DATA 72,20
0126E:  DATA 20,20
01270:  DATA 20,20
01272:  DATA 3A,20
01274:  DATA 30,78
01276:  DATA 25,30
01278:  DATA 32,58
0127A:  DATA 0D,0A
0127C:  DATA 00,00
0127E:  DATA 09,7C
01280:  DATA 20,4D
01282:  DATA 49,53
01284:  DATA 46,20
01286:  DATA 7C,20
01288:  DATA 50,49
0128A:  DATA 43,4C
0128C:  DATA 4F,47
0128E:  DATA 20,7C
01290:  DATA 20,57
01292:  DATA 72,69
01294:  DATA 74,65
01296:  DATA 20,43
01298:  DATA 6F,75
0129A:  DATA 6E,74
0129C:  DATA 65,72
0129E:  DATA 20,20
012A0:  DATA 20,20
012A2:  DATA 3A,20
012A4:  DATA 30,78
012A6:  DATA 25,30
012A8:  DATA 32,58
012AA:  DATA 0D,0A
012AC:  DATA 00,00
012AE:  DATA 09,7C
012B0:  DATA 20,4D
012B2:  DATA 49,53
012B4:  DATA 46,20
012B6:  DATA 7C,20
012B8:  DATA 4D,45
012BA:  DATA 41,53
012BC:  DATA 20,20
012BE:  DATA 20,7C
012C0:  DATA 20,55
012C2:  DATA 73,65
012C4:  DATA 20,43
012C6:  DATA 6F,75
012C8:  DATA 6E,74
012CA:  DATA 65,72
012CC:  DATA 20,20
012CE:  DATA 20,20
012D0:  DATA 20,20
012D2:  DATA 3A,20
012D4:  DATA 30,78
012D6:  DATA 25,30
012D8:  DATA 38,4C
012DA:  DATA 58,0D
012DC:  DATA 0A,00
012DE:  DATA 09,7C
012E0:  DATA 20,4D
012E2:  DATA 49,53
012E4:  DATA 46,20
012E6:  DATA 7C,20
012E8:  DATA 4D,45
012EA:  DATA 41,53
012EC:  DATA 20,20
012EE:  DATA 20,7C
012F0:  DATA 20,55
012F2:  DATA 6E,63
012F4:  DATA 6F,70
012F6:  DATA 79,65
012F8:  DATA 64,20
012FA:  DATA 43,6F
012FC:  DATA 75,6E
012FE:  DATA 74,65
01300:  DATA 72,20
01302:  DATA 3A,20
01304:  DATA 30,78
01306:  DATA 25,30
01308:  DATA 38,4C
0130A:  DATA 58,0D
0130C:  DATA 0A,00
0130E:  DATA 09,7C
01310:  DATA 20,4D
01312:  DATA 49,53
01314:  DATA 46,20
01316:  DATA 7C,20
01318:  DATA 4D,45
0131A:  DATA 41,53
0131C:  DATA 20,20
0131E:  DATA 20,7C
01320:  DATA 20,4C
01322:  DATA 6F,6F
01324:  DATA 70,20
01326:  DATA 43,6F
01328:  DATA 75,6E
0132A:  DATA 74,65
0132C:  DATA 72,20
0132E:  DATA 20,20
01330:  DATA 20,20
01332:  DATA 3A,20
01334:  DATA 30,78
01336:  DATA 25,30
01338:  DATA 32,58
0133A:  DATA 0D,0A
0133C:  DATA 00,00
0133E:  DATA 09,43
01340:  DATA 6F,6D
01342:  DATA 70,6C
01344:  DATA 65,74
01346:  DATA 65,0D
01348:  DATA 0A,00
0134A:  DATA 4D,69
0134C:  DATA 73,73
0134E:  DATA 69,6F
01350:  DATA 6E,20
01352:  DATA 46,6C
01354:  DATA 61,73
01356:  DATA 68,20
01358:  DATA 69,73
0135A:  DATA 20,6E
0135C:  DATA 6F,74
0135E:  DATA 20,63
01360:  DATA 6F,6E
01362:  DATA 6E,65
01364:  DATA 63,74
01366:  DATA 65,64
01368:  DATA 0D,0A
0136A:  DATA 00,00
0136C:  DATA 4D,69
0136E:  DATA 73,73
01370:  DATA 69,6F
01372:  DATA 6E,20
01374:  DATA 46,6C
01376:  DATA 61,73
01378:  DATA 68,20
0137A:  DATA 69,73
0137C:  DATA 20,6E
0137E:  DATA 6F,74
01380:  DATA 20,63
01382:  DATA 6F,6E
01384:  DATA 6E,65
01386:  DATA 63,74
01388:  DATA 65,64
0138A:  DATA 0D,0A
0138C:  DATA 00,00
0138E:  DATA 0D,0A
01390:  DATA 5F,5F
01392:  DATA 5F,5F
01394:  DATA 5F,5F
01396:  DATA 5F,5F
01398:  DATA 5F,5F
0139A:  DATA 5F,5F
0139C:  DATA 5F,5F
0139E:  DATA 5F,5F
013A0:  DATA 5F,5F
013A2:  DATA 5F,5F
013A4:  DATA 5F,5F
013A6:  DATA 5F,5F
013A8:  DATA 5F,5F
013AA:  DATA 5F,5F
013AC:  DATA 5F,5F
013AE:  DATA 0D,0A
013B0:  DATA 5F,5F
013B2:  DATA 5F,5F
013B4:  DATA 5F,53
013B6:  DATA 74,61
013B8:  DATA 72,74
013BA:  DATA 20,65
013BC:  DATA 78,65
013BE:  DATA 63,75
013C0:  DATA 74,65
013C2:  DATA 5F,6D
013C4:  DATA 69,73
013C6:  DATA 73,69
013C8:  DATA 6F,6E
013CA:  DATA 5F,5F
013CC:  DATA 5F,5F
013CE:  DATA 5F,0D
013D0:  DATA 0A,0D
013D2:  DATA 0A,00
013D4:  DATA 43,6F
013D6:  DATA 6D,6D
013D8:  DATA 61,6E
013DA:  DATA 64,20
013DC:  DATA 49,44
013DE:  DATA 3A,20
013E0:  DATA 25,58
013E2:  DATA 0D,0A
013E4:  DATA 0D,0A
013E6:  DATA 00,00
013E8:  DATA 09,09
013EA:  DATA 2D,3E
013EC:  DATA 20,49
013EE:  DATA 6E,76
013F0:  DATA 61,6C
013F2:  DATA 69,64
013F4:  DATA 20,43
013F6:  DATA 4D,44
013F8:  DATA 20,49
013FA:  DATA 44,21
013FC:  DATA 0D,0A
013FE:  DATA 00,00
01400:  DATA 0D,0A
01402:  DATA 5F,5F
01404:  DATA 5F,5F
01406:  DATA 5F,5F
01408:  DATA 45,6E
0140A:  DATA 64,20
0140C:  DATA 65,78
0140E:  DATA 65,63
01410:  DATA 75,74
01412:  DATA 65,5F
01414:  DATA 6D,69
01416:  DATA 73,73
01418:  DATA 69,6F
0141A:  DATA 6E,5F
0141C:  DATA 5F,5F
0141E:  DATA 5F,5F
01420:  DATA 5F,0D
01422:  DATA 0A,5F
01424:  DATA 5F,5F
01426:  DATA 5F,5F
01428:  DATA 5F,5F
0142A:  DATA 5F,5F
0142C:  DATA 5F,5F
0142E:  DATA 5F,5F
01430:  DATA 5F,5F
01432:  DATA 5F,5F
01434:  DATA 5F,5F
01436:  DATA 5F,5F
01438:  DATA 5F,5F
0143A:  DATA 5F,5F
0143C:  DATA 5F,5F
0143E:  DATA 5F,5F
01440:  DATA 5F,5F
01442:  DATA 0D,0A
01444:  DATA 00,00
01446:  DATA 53,74
01448:  DATA 61,72
0144A:  DATA 74,20
0144C:  DATA 65,78
0144E:  DATA 65,63
01450:  DATA 75,74
01452:  DATA 65,5F
01454:  DATA 63,6F
01456:  DATA 6D,6D
01458:  DATA 61,6E
0145A:  DATA 64,0D
0145C:  DATA 0A,00
0145E:  DATA 09,2D
01460:  DATA 3E,20
01462:  DATA 55,70
01464:  DATA 6C,69
01466:  DATA 6E,6B
01468:  DATA 20,63
0146A:  DATA 6F,6D
0146C:  DATA 6D,61
0146E:  DATA 6E,64
01470:  DATA 0D,0A
01472:  DATA 00,00
01474:  DATA 09,20
01476:  DATA 20,20
01478:  DATA 54,72
0147A:  DATA 61,6E
0147C:  DATA 73,6D
0147E:  DATA 69,74
01480:  DATA 20,41
01482:  DATA 63,6B
01484:  DATA 6E,6F
01486:  DATA 6C,65
01488:  DATA 67,64
0148A:  DATA 65,0D
0148C:  DATA 0A,00
0148E:  DATA 09,2D
01490:  DATA 3E,20
01492:  DATA 53,74
01494:  DATA 61,74
01496:  DATA 75,73
01498:  DATA 20,63
0149A:  DATA 68,65
0149C:  DATA 63,6B
0149E:  DATA 0D,0A
014A0:  DATA 00,00
014A2:  DATA 09,20
014A4:  DATA 20,20
014A6:  DATA 54,72
014A8:  DATA 61,6E
014AA:  DATA 73,6D
014AC:  DATA 69,74
014AE:  DATA 20,4D
014B0:  DATA 49,53
014B2:  DATA 20,4D
014B4:  DATA 43,55
014B6:  DATA 20,53
014B8:  DATA 74,61
014BA:  DATA 74,75
014BC:  DATA 73,0D
014BE:  DATA 0A,00
014C0:  DATA 66,69
014C2:  DATA 6E,69
014C4:  DATA 73,68
014C6:  DATA 65,64
014C8:  DATA 20,69
014CA:  DATA 6E,20
014CC:  DATA 73,74
014CE:  DATA 61,74
014D0:  DATA 75,73
014D2:  DATA 5F,63
014D4:  DATA 68,65
014D6:  DATA 63,6B
014D8:  DATA 0D,0A
014DA:  DATA 00,00
014DC:  DATA 09,2D
014DE:  DATA 3E,20
014E0:  DATA 53,4D
014E2:  DATA 46,20
014E4:  DATA 61,76
014E6:  DATA 61,69
014E8:  DATA 6C,61
014EA:  DATA 62,6C
014EC:  DATA 65,20
014EE:  DATA 63,68
014F0:  DATA 65,63
014F2:  DATA 6B,0D
014F4:  DATA 0A,00
014F6:  DATA 09,20
014F8:  DATA 20,20
014FA:  DATA 54,72
014FC:  DATA 61,6E
014FE:  DATA 73,6D
01500:  DATA 69,74
01502:  DATA 20,41
01504:  DATA 63,6B
01506:  DATA 6E,6F
01508:  DATA 77,6C
0150A:  DATA 65,64
0150C:  DATA 67,65
0150E:  DATA 6D,65
01510:  DATA 6E,74
01512:  DATA 0D,0A
01514:  DATA 00,00
01516:  DATA 09,09
01518:  DATA 2D,3E
0151A:  DATA 20,61
0151C:  DATA 6C,6C
0151E:  DATA 6F,77
01520:  DATA 65,64
01522:  DATA 0D,0A
01524:  DATA 00,00
01526:  DATA 09,09
01528:  DATA 2D,3E
0152A:  DATA 20,50
0152C:  DATA 72,6F
0152E:  DATA 63,65
01530:  DATA 73,73
01532:  DATA 69,6E
01534:  DATA 67,20
01536:  DATA 53,4D
01538:  DATA 46,20
0153A:  DATA 64,61
0153C:  DATA 74,61
0153E:  DATA 20,5B
01540:  DATA 25,64
01542:  DATA 5D,0D
01544:  DATA 0A,00
01546:  DATA 66,75
01548:  DATA 6E,63
0154A:  DATA 20,74
0154C:  DATA 79,70
0154E:  DATA 65,20
01550:  DATA 3A,20
01552:  DATA 30,78
01554:  DATA 25,30
01556:  DATA 32,58
01558:  DATA 00,00
0155A:  DATA 09,09
0155C:  DATA 2D,3E
0155E:  DATA 20,45
01560:  DATA 78,65
01562:  DATA 63,75
01564:  DATA 74,69
01566:  DATA 6E,67
01568:  DATA 20,53
0156A:  DATA 4D,46
0156C:  DATA 20,57
0156E:  DATA 52,49
01570:  DATA 54,45
01572:  DATA 20,28
01574:  DATA 73,69
01576:  DATA 6E,67
01578:  DATA 6C,65
0157A:  DATA 29,0D
0157C:  DATA 0A,00
0157E:  DATA 09,09
01580:  DATA 2D,3E
01582:  DATA 20,45
01584:  DATA 78,65
01586:  DATA 63,75
01588:  DATA 74,69
0158A:  DATA 6E,67
0158C:  DATA 20,53
0158E:  DATA 4D,46
01590:  DATA 20,52
01592:  DATA 45,41
01594:  DATA 44,20
01596:  DATA 28,73
01598:  DATA 69,6E
0159A:  DATA 67,6C
0159C:  DATA 65,29
0159E:  DATA 0D,0A
015A0:  DATA 00,00
015A2:  DATA 09,09
015A4:  DATA 2D,3E
015A6:  DATA 20,45
015A8:  DATA 78,65
015AA:  DATA 63,75
015AC:  DATA 74,69
015AE:  DATA 6E,67
015B0:  DATA 20,53
015B2:  DATA 4D,46
015B4:  DATA 20,45
015B6:  DATA 52,41
015B8:  DATA 53,45
015BA:  DATA 20,28
015BC:  DATA 73,69
015BE:  DATA 6E,67
015C0:  DATA 6C,65
015C2:  DATA 29,0D
015C4:  DATA 0A,00
015C6:  DATA 09,09
015C8:  DATA 2D,3E
015CA:  DATA 20,55
015CC:  DATA 6E,6B
015CE:  DATA 6E,6F
015D0:  DATA 77,6E
015D2:  DATA 20,53
015D4:  DATA 4D,46
015D6:  DATA 20,66
015D8:  DATA 75,6E
015DA:  DATA 63,74
015DC:  DATA 69,6F
015DE:  DATA 6E,20
015E0:  DATA 74,79
015E2:  DATA 70,65
015E4:  DATA 0D,0A
015E6:  DATA 00,00
015E8:  DATA 09,09
015EA:  DATA 2D,3E
015EC:  DATA 20,45
015EE:  DATA 72,72
015F0:  DATA 6F,72
015F2:  DATA 3A,20
015F4:  DATA 46,61
015F6:  DATA 69,6C
015F8:  DATA 65,64
015FA:  DATA 20,74
015FC:  DATA 6F,20
015FE:  DATA 64,65
01600:  DATA 71,75
01602:  DATA 65,75
01604:  DATA 65,20
01606:  DATA 53,4D
01608:  DATA 46,20
0160A:  DATA 64,61
0160C:  DATA 74,61
0160E:  DATA 0D,0A
01610:  DATA 00,00
01612:  DATA 09,09
01614:  DATA 2D,3E
01616:  DATA 20,43
01618:  DATA 6F,6D
0161A:  DATA 70,6C
0161C:  DATA 65,74
0161E:  DATA 65,64
01620:  DATA 20,70
01622:  DATA 72,6F
01624:  DATA 63,65
01626:  DATA 73,73
01628:  DATA 69,6E
0162A:  DATA 67,20
0162C:  DATA 25,64
0162E:  DATA 20,53
01630:  DATA 4D,46
01632:  DATA 20,6F
01634:  DATA 70,65
01636:  DATA 72,61
01638:  DATA 74,69
0163A:  DATA 6F,6E
0163C:  DATA 73,0D
0163E:  DATA 0A,00
01640:  DATA 09,09
01642:  DATA 2D,3E
01644:  DATA 20,64
01646:  DATA 65,6E
01648:  DATA 69,65
0164A:  DATA 64,0D
0164C:  DATA 0A,00
0164E:  DATA 53,74
01650:  DATA 61,72
01652:  DATA 74,20
01654:  DATA 4D,4F
01656:  DATA 44,45
01658:  DATA 20,44
0165A:  DATA 55,4D
0165C:  DATA 4D,59
0165E:  DATA 0D,0A
01660:  DATA 00,00
01662:  DATA 09,4D
01664:  DATA 4F,44
01666:  DATA 45,20
01668:  DATA 20,20
0166A:  DATA 20,20
0166C:  DATA 3A,20
0166E:  DATA 25,30
01670:  DATA 32,58
01672:  DATA 0D,0A
01674:  DATA 00,00
01676:  DATA 09,50
01678:  DATA 61,72
0167A:  DATA 61,6D
0167C:  DATA 31,20
0167E:  DATA 20,20
01680:  DATA 3A,20
01682:  DATA 30,78
01684:  DATA 25,30
01686:  DATA 38,4C
01688:  DATA 58,0D
0168A:  DATA 0A,00
0168C:  DATA 09,50
0168E:  DATA 61,72
01690:  DATA 61,6D
01692:  DATA 32,20
01694:  DATA 20,20
01696:  DATA 3A,20
01698:  DATA 30,78
0169A:  DATA 25,30
0169C:  DATA 34,4C
0169E:  DATA 58,0D
016A0:  DATA 0A,00
016A2:  DATA 45,6E
016A4:  DATA 64,20
016A6:  DATA 4D,4F
016A8:  DATA 44,45
016AA:  DATA 20,44
016AC:  DATA 55,4D
016AE:  DATA 4D,59
016B0:  DATA 0D,0A
016B2:  DATA 00,00
016B4:  DATA 53,74
016B6:  DATA 61,72
016B8:  DATA 74,20
016BA:  DATA 4D,4F
016BC:  DATA 44,45
016BE:  DATA 20,54
016C0:  DATA 45,53
016C2:  DATA 54,20
016C4:  DATA 49,56
016C6:  DATA 0D,0A
016C8:  DATA 00,00
016CA:  DATA 09,53
016CC:  DATA 77,65
016CE:  DATA 65,70
016D0:  DATA 20,73
016D2:  DATA 74,65
016D4:  DATA 70,20
016D6:  DATA 3A,20
016D8:  DATA 25,75
016DA:  DATA 0D,0A
016DC:  DATA 00,00
016DE:  DATA 45,6E
016E0:  DATA 64,20
016E2:  DATA 4D,4F
016E4:  DATA 44,45
016E6:  DATA 20,54
016E8:  DATA 45,53
016EA:  DATA 54,20
016EC:  DATA 49,56
016EE:  DATA 0D,0A
016F0:  DATA 00,00
016F2:  DATA 53,74
016F4:  DATA 61,72
016F6:  DATA 74,20
016F8:  DATA 4D,4F
016FA:  DATA 44,45
016FC:  DATA 20,4D
016FE:  DATA 45,41
01700:  DATA 53,20
01702:  DATA 49,56
01704:  DATA 0D,0A
01706:  DATA 00,00
01708:  DATA 09,49
0170A:  DATA 44,3A
0170C:  DATA 20,25
0170E:  DATA 30,32
01710:  DATA 58,0D
01712:  DATA 0A,00
01714:  DATA 09,53
01716:  DATA 6C,65
01718:  DATA 65,70
0171A:  DATA 20,54
0171C:  DATA 69,6D
0171E:  DATA 65,3A
01720:  DATA 20,25
01722:  DATA 30,34
01724:  DATA 4C,58
01726:  DATA 20,6D
01728:  DATA 73,0D
0172A:  DATA 0A,00
0172C:  DATA 09,43
0172E:  DATA 75,72
01730:  DATA 72,65
01732:  DATA 6E,74
01734:  DATA 20,54
01736:  DATA 68,72
01738:  DATA 65,73
0173A:  DATA 68,6F
0173C:  DATA 6C,64
0173E:  DATA 3A,20
01740:  DATA 25,30
01742:  DATA 34,4C
01744:  DATA 58,20
01746:  DATA 6D,41
01748:  DATA 0D,0A
0174A:  DATA 00,00
0174C:  DATA 09,50
0174E:  DATA 44,20
01750:  DATA 54,68
01752:  DATA 72,65
01754:  DATA 73,68
01756:  DATA 6F,6C
01758:  DATA 64,3A
0175A:  DATA 20,25
0175C:  DATA 30,34
0175E:  DATA 4C,58
01760:  DATA 20,6D
01762:  DATA 41,0D
01764:  DATA 0A,00
01766:  DATA 09,43
01768:  DATA 75,72
0176A:  DATA 72,65
0176C:  DATA 6E,74
0176E:  DATA 20,4C
01770:  DATA 69,6D
01772:  DATA 69,74
01774:  DATA 3A,20
01776:  DATA 25,30
01778:  DATA 34,4C
0177A:  DATA 58,20
0177C:  DATA 6D,41
0177E:  DATA 0D,0A
01780:  DATA 00,00
01782:  DATA 09,4D
01784:  DATA 65,61
01786:  DATA 73,75
01788:  DATA 72,65
0178A:  DATA 6D,65
0178C:  DATA 6E,74
0178E:  DATA 20,54
01790:  DATA 69,6D
01792:  DATA 65,3A
01794:  DATA 20,25
01796:  DATA 30,34
01798:  DATA 4C,58
0179A:  DATA 20,73
0179C:  DATA 0D,0A
0179E:  DATA 00,00
017A0:  DATA 09,49
017A2:  DATA 73,20
017A4:  DATA 46,69
017A6:  DATA 6E,69
017A8:  DATA 73,68
017AA:  DATA 65,64
017AC:  DATA 3A,20
017AE:  DATA 25,75
017B0:  DATA 0D,0A
017B2:  DATA 00,00
017B4:  DATA 45,6E
017B6:  DATA 64,20
017B8:  DATA 4D,4F
017BA:  DATA 44,45
017BC:  DATA 20,4D
017BE:  DATA 45,41
017C0:  DATA 53,20
017C2:  DATA 49,56
017C4:  DATA 0D,0A
017C6:  DATA 00,00
017C8:  DATA 53,74
017CA:  DATA 61,72
017CC:  DATA 74,20
017CE:  DATA 46,6C
017D0:  DATA 61,73
017D2:  DATA 68,20
017D4:  DATA 45,72
017D6:  DATA 61,73
017D8:  DATA 65,20
017DA:  DATA 41,6C
017DC:  DATA 6C,0D
017DE:  DATA 0A,00
017E0:  DATA 45,6E
017E2:  DATA 64,20
017E4:  DATA 46,6C
017E6:  DATA 61,73
017E8:  DATA 68,20
017EA:  DATA 45,72
017EC:  DATA 61,73
017EE:  DATA 65,20
017F0:  DATA 41,6C
017F2:  DATA 6C,0D
017F4:  DATA 0A,00
017F6:  DATA 53,74
017F8:  DATA 61,72
017FA:  DATA 74,20
017FC:  DATA 46,6C
017FE:  DATA 61,73
01800:  DATA 68,20
01802:  DATA 45,72
01804:  DATA 61,73
01806:  DATA 65,20
01808:  DATA 31,20
0180A:  DATA 53,65
0180C:  DATA 63,74
0180E:  DATA 6F,72
01810:  DATA 0D,0A
01812:  DATA 00,00
01814:  DATA 09,53
01816:  DATA 65,63
01818:  DATA 74,6F
0181A:  DATA 72,20
0181C:  DATA 41,64
0181E:  DATA 64,72
01820:  DATA 65,73
01822:  DATA 73,3A
01824:  DATA 20,30
01826:  DATA 78,25
01828:  DATA 30,38
0182A:  DATA 4C,58
0182C:  DATA 0D,0A
0182E:  DATA 00,00
01830:  DATA 45,6E
01832:  DATA 64,20
01834:  DATA 46,6C
01836:  DATA 61,73
01838:  DATA 68,20
0183A:  DATA 45,72
0183C:  DATA 61,73
0183E:  DATA 65,20
01840:  DATA 31,20
01842:  DATA 53,65
01844:  DATA 63,74
01846:  DATA 6F,72
01848:  DATA 0D,0A
0184A:  DATA 00,00
0184C:  DATA 53,74
0184E:  DATA 61,72
01850:  DATA 74,20
01852:  DATA 46,6C
01854:  DATA 61,73
01856:  DATA 68,20
01858:  DATA 43,6F
0185A:  DATA 70,79
0185C:  DATA 20,31
0185E:  DATA 20,53
01860:  DATA 65,63
01862:  DATA 74,6F
01864:  DATA 72,0D
01866:  DATA 0A,00
01868:  DATA 09,53
0186A:  DATA 75,62
0186C:  DATA 73,65
0186E:  DATA 63,74
01870:  DATA 6F,72
01872:  DATA 20,41
01874:  DATA 64,64
01876:  DATA 72,65
01878:  DATA 73,73
0187A:  DATA 3A,20
0187C:  DATA 30,78
0187E:  DATA 25,30
01880:  DATA 38,4C
01882:  DATA 58,0D
01884:  DATA 0A,00
01886:  DATA 45,6E
01888:  DATA 64,20
0188A:  DATA 46,6C
0188C:  DATA 61,73
0188E:  DATA 68,20
01890:  DATA 43,6F
01892:  DATA 70,79
01894:  DATA 20,31
01896:  DATA 20,53
01898:  DATA 65,63
0189A:  DATA 74,6F
0189C:  DATA 72,0D
0189E:  DATA 0A,00
018A0:  DATA 53,74
018A2:  DATA 61,72
018A4:  DATA 74,20
018A6:  DATA 46,6C
018A8:  DATA 61,73
018AA:  DATA 68,20
018AC:  DATA 45,72
018AE:  DATA 61,73
018B0:  DATA 65,20
018B2:  DATA 36,34
018B4:  DATA 6B,42
018B6:  DATA 79,74
018B8:  DATA 65,20
018BA:  DATA 53,75
018BC:  DATA 62,73
018BE:  DATA 65,63
018C0:  DATA 74,6F
018C2:  DATA 72,0D
018C4:  DATA 0A,00
018C6:  DATA 09,53
018C8:  DATA 75,62
018CA:  DATA 73,65
018CC:  DATA 63,74
018CE:  DATA 6F,72
018D0:  DATA 20,41
018D2:  DATA 64,64
018D4:  DATA 72,65
018D6:  DATA 73,73
018D8:  DATA 3A,20
018DA:  DATA 30,78
018DC:  DATA 25,30
018DE:  DATA 38,4C
018E0:  DATA 58,0D
018E2:  DATA 0A,00
018E4:  DATA 45,6E
018E6:  DATA 64,20
018E8:  DATA 46,6C
018EA:  DATA 61,73
018EC:  DATA 68,20
018EE:  DATA 45,72
018F0:  DATA 61,73
018F2:  DATA 65,20
018F4:  DATA 36,34
018F6:  DATA 6B,42
018F8:  DATA 79,74
018FA:  DATA 65,20
018FC:  DATA 53,75
018FE:  DATA 62,73
01900:  DATA 65,63
01902:  DATA 74,6F
01904:  DATA 72,0D
01906:  DATA 0A,00
01908:  DATA 53,74
0190A:  DATA 61,72
0190C:  DATA 74,20
0190E:  DATA 46,6C
01910:  DATA 61,73
01912:  DATA 68,20
01914:  DATA 57,72
01916:  DATA 69,74
01918:  DATA 65,20
0191A:  DATA 44,65
0191C:  DATA 6D,6F
0191E:  DATA 0D,0A
01920:  DATA 00,00
01922:  DATA 09,4D
01924:  DATA 4F,44
01926:  DATA 45,20
01928:  DATA 20,20
0192A:  DATA 20,20
0192C:  DATA 3A,20
0192E:  DATA 25,30
01930:  DATA 32,58
01932:  DATA 0D,0A
01934:  DATA 00,00
01936:  DATA 09,41
01938:  DATA 64,64
0193A:  DATA 72,65
0193C:  DATA 73,73
0193E:  DATA 20,20
01940:  DATA 3A,20
01942:  DATA 30,78
01944:  DATA 25,30
01946:  DATA 38,4C
01948:  DATA 58,0D
0194A:  DATA 0A,00
0194C:  DATA 09,50
0194E:  DATA 61,63
01950:  DATA 6B,65
01952:  DATA 74,4E
01954:  DATA 75,6D
01956:  DATA 3A,20
01958:  DATA 30,78
0195A:  DATA 25,30
0195C:  DATA 34,4C
0195E:  DATA 58,0D
01960:  DATA 0A,00
01962:  DATA 57,72
01964:  DATA 69,74
01966:  DATA 65,20
01968:  DATA 44,61
0196A:  DATA 74,61
0196C:  DATA 0D,0A
0196E:  DATA 00,00
01970:  DATA 45,6E
01972:  DATA 64,20
01974:  DATA 46,6C
01976:  DATA 61,73
01978:  DATA 68,20
0197A:  DATA 57,72
0197C:  DATA 69,74
0197E:  DATA 65,20
01980:  DATA 44,65
01982:  DATA 6D,6F
01984:  DATA 0D,0A
01986:  DATA 00,00
01988:  DATA 53,74
0198A:  DATA 61,72
0198C:  DATA 74,20
0198E:  DATA 46,6C
01990:  DATA 61,73
01992:  DATA 68,20
01994:  DATA 57,72
01996:  DATA 69,74
01998:  DATA 65,20
0199A:  DATA 34,6B
0199C:  DATA 42,79
0199E:  DATA 74,65
019A0:  DATA 20,53
019A2:  DATA 75,62
019A4:  DATA 73,65
019A6:  DATA 63,74
019A8:  DATA 6F,72
019AA:  DATA 0D,0A
019AC:  DATA 00,00
019AE:  DATA 45,6E
019B0:  DATA 64,20
019B2:  DATA 46,6C
019B4:  DATA 61,73
019B6:  DATA 68,20
019B8:  DATA 57,72
019BA:  DATA 69,74
019BC:  DATA 65,20
019BE:  DATA 34,6B
019C0:  DATA 42,79
019C2:  DATA 74,65
019C4:  DATA 20,53
019C6:  DATA 75,62
019C8:  DATA 73,65
019CA:  DATA 63,74
019CC:  DATA 6F,72
019CE:  DATA 0D,0A
019D0:  DATA 00,00
019D2:  DATA 53,74
019D4:  DATA 61,72
019D6:  DATA 74,20
019D8:  DATA 46,6C
019DA:  DATA 61,73
019DC:  DATA 68,20
019DE:  DATA 52,65
019E0:  DATA 61,64
019E2:  DATA 0D,0A
019E4:  DATA 00,00
019E6:  DATA 09,4D
019E8:  DATA 4F,44
019EA:  DATA 45,20
019EC:  DATA 20,20
019EE:  DATA 20,20
019F0:  DATA 3A,20
019F2:  DATA 25,30
019F4:  DATA 32,58
019F6:  DATA 0D,0A
019F8:  DATA 00,00
019FA:  DATA 09,41
019FC:  DATA 64,64
019FE:  DATA 72,65
01A00:  DATA 73,73
01A02:  DATA 20,20
01A04:  DATA 3A,20
01A06:  DATA 30,78
01A08:  DATA 25,30
01A0A:  DATA 38,4C
01A0C:  DATA 58,0D
01A0E:  DATA 0A,00
01A10:  DATA 09,50
01A12:  DATA 61,63
01A14:  DATA 6B,65
01A16:  DATA 74,4E
01A18:  DATA 75,6D
01A1A:  DATA 3A,20
01A1C:  DATA 30,78
01A1E:  DATA 25,30
01A20:  DATA 34,4C
01A22:  DATA 58,0D
01A24:  DATA 0A,00
01A26:  DATA 52,45
01A28:  DATA 41,44
01A2A:  DATA 20,44
01A2C:  DATA 41,54
01A2E:  DATA 41,0D
01A30:  DATA 0A,00
01A32:  DATA 4D,69
01A34:  DATA 73,73
01A36:  DATA 69,6F
01A38:  DATA 6E,20
01A3A:  DATA 46,6C
01A3C:  DATA 61,73
01A3E:  DATA 68,20
01A40:  DATA 69,73
01A42:  DATA 20,6E
01A44:  DATA 6F,74
01A46:  DATA 20,63
01A48:  DATA 6F,6E
01A4A:  DATA 6E,65
01A4C:  DATA 63,74
01A4E:  DATA 65,64
01A50:  DATA 0D,0A
01A52:  DATA 00,00
01A54:  DATA 45,6E
01A56:  DATA 64,20
01A58:  DATA 46,6C
01A5A:  DATA 61,73
01A5C:  DATA 68,20
01A5E:  DATA 52,65
01A60:  DATA 61,64
01A62:  DATA 0D,0A
01A64:  DATA 00,00
01A66:  DATA 53,74
01A68:  DATA 61,72
01A6A:  DATA 74,20
01A6C:  DATA 46,6C
01A6E:  DATA 61,73
01A70:  DATA 68,20
01A72:  DATA 52,65
01A74:  DATA 61,64
01A76:  DATA 20,41
01A78:  DATA 64,64
01A7A:  DATA 72,65
01A7C:  DATA 73,73
01A7E:  DATA 0D,0A
01A80:  DATA 00,00
01A82:  DATA 52,65
01A84:  DATA 61,64
01A86:  DATA 20,44
01A88:  DATA 61,74
01A8A:  DATA 61,3A
01A8C:  DATA 20,25
01A8E:  DATA 30,32
01A90:  DATA 58,20
01A92:  DATA 25,30
01A94:  DATA 32,58
01A96:  DATA 20,25
01A98:  DATA 30,32
01A9A:  DATA 58,20
01A9C:  DATA 25,30
01A9E:  DATA 32,58
01AA0:  DATA 0D,0A
01AA2:  DATA 00,00
01AA4:  DATA 45,6E
01AA6:  DATA 64,20
01AA8:  DATA 46,6C
01AAA:  DATA 61,73
01AAC:  DATA 68,20
01AAE:  DATA 52,65
01AB0:  DATA 61,64
01AB2:  DATA 20,41
01AB4:  DATA 64,64
01AB6:  DATA 72,65
01AB8:  DATA 73,73
01ABA:  DATA 0D,0A
01ABC:  DATA 00,00
01ABE:  DATA 53,74
01AC0:  DATA 61,72
01AC2:  DATA 74,20
01AC4:  DATA 46,6C
01AC6:  DATA 61,73
01AC8:  DATA 68,20
01ACA:  DATA 45,72
01ACC:  DATA 61,73
01ACE:  DATA 65,20
01AD0:  DATA 61,6E
01AD2:  DATA 64,20
01AD4:  DATA 52,65
01AD6:  DATA 73,65
01AD8:  DATA 74,0D
01ADA:  DATA 0A,00
01ADC:  DATA 45,6E
01ADE:  DATA 64,20
01AE0:  DATA 46,6C
01AE2:  DATA 61,73
01AE4:  DATA 68,20
01AE6:  DATA 45,72
01AE8:  DATA 61,73
01AEA:  DATA 65,20
01AEC:  DATA 61,6E
01AEE:  DATA 64,20
01AF0:  DATA 52,65
01AF2:  DATA 73,65
01AF4:  DATA 74,0D
01AF6:  DATA 0A,00
01AF8:  DATA 53,74
01AFA:  DATA 61,72
01AFC:  DATA 74,20
01AFE:  DATA 46,6C
01B00:  DATA 61,73
01B02:  DATA 68,20
01B04:  DATA 41,64
01B06:  DATA 64,72
01B08:  DATA 65,73
01B0A:  DATA 73,20
01B0C:  DATA 52,65
01B0E:  DATA 73,65
01B10:  DATA 74,0D
01B12:  DATA 0A,00
01B14:  DATA 45,6E
01B16:  DATA 64,20
01B18:  DATA 46,6C
01B1A:  DATA 61,73
01B1C:  DATA 68,20
01B1E:  DATA 41,64
01B20:  DATA 64,72
01B22:  DATA 65,73
01B24:  DATA 73,20
01B26:  DATA 52,65
01B28:  DATA 73,65
01B2A:  DATA 74,0D
01B2C:  DATA 0A,00
01B2E:  DATA 53,74
01B30:  DATA 61,72
01B32:  DATA 74,20
01B34:  DATA 46,6C
01B36:  DATA 61,73
01B38:  DATA 68,20
01B3A:  DATA 53,4D
01B3C:  DATA 46,20
01B3E:  DATA 43,6F
01B40:  DATA 70,79
01B42:  DATA 0D,0A
01B44:  DATA 00,00
01B46:  DATA 45,6E
01B48:  DATA 64,20
01B4A:  DATA 46,6C
01B4C:  DATA 61,73
01B4E:  DATA 68,20
01B50:  DATA 53,4D
01B52:  DATA 46,20
01B54:  DATA 43,6F
01B56:  DATA 70,79
01B58:  DATA 0D,0A
01B5A:  DATA 00,00
01B5C:  DATA 53,74
01B5E:  DATA 61,72
01B60:  DATA 74,20
01B62:  DATA 46,6C
01B64:  DATA 61,73
01B66:  DATA 68,20
01B68:  DATA 53,4D
01B6A:  DATA 46,20
01B6C:  DATA 52,65
01B6E:  DATA 61,64
01B70:  DATA 0D,0A
01B72:  DATA 00,00
01B74:  DATA 52,65
01B76:  DATA 61,64
01B78:  DATA 20,44
01B7A:  DATA 61,74
01B7C:  DATA 61,3A
01B7E:  DATA 20,00
01B80:  DATA 0D,0A
01B82:  DATA 45,6E
01B84:  DATA 64,20
01B86:  DATA 46,6C
01B88:  DATA 61,73
01B8A:  DATA 68,20
01B8C:  DATA 53,4D
01B8E:  DATA 46,20
01B90:  DATA 52,65
01B92:  DATA 61,64
01B94:  DATA 0D,0A
01B96:  DATA 00,00
01B98:  DATA 53,74
01B9A:  DATA 61,72
01B9C:  DATA 74,20
01B9E:  DATA 46,6C
01BA0:  DATA 61,73
01BA2:  DATA 68,20
01BA4:  DATA 53,4D
01BA6:  DATA 46,20
01BA8:  DATA 45,72
01BAA:  DATA 61,73
01BAC:  DATA 65,0D
01BAE:  DATA 0A,00
01BB0:  DATA 45,6E
01BB2:  DATA 64,20
01BB4:  DATA 46,6C
01BB6:  DATA 61,73
01BB8:  DATA 68,20
01BBA:  DATA 53,4D
01BBC:  DATA 46,20
01BBE:  DATA 45,72
01BC0:  DATA 61,73
01BC2:  DATA 65,0D
01BC4:  DATA 0A,00
01BC6:  DATA 53,74
01BC8:  DATA 61,72
01BCA:  DATA 74,20
01BCC:  DATA 46,6C
01BCE:  DATA 61,73
01BD0:  DATA 68,20
01BD2:  DATA 41,64
01BD4:  DATA 64,72
01BD6:  DATA 65,73
01BD8:  DATA 73,20
01BDA:  DATA 52,65
01BDC:  DATA 73,65
01BDE:  DATA 74,0D
01BE0:  DATA 0A,00
01BE2:  DATA 45,6E
01BE4:  DATA 64,20
01BE6:  DATA 46,6C
01BE8:  DATA 61,73
01BEA:  DATA 68,20
01BEC:  DATA 41,64
01BEE:  DATA 64,72
01BF0:  DATA 65,73
01BF2:  DATA 73,20
01BF4:  DATA 52,65
01BF6:  DATA 73,65
01BF8:  DATA 74,0D
01BFA:  DATA 0A,00
01BFC:  DATA 53,4D
01BFE:  DATA 46,20
01C00:  DATA 69,73
01C02:  DATA 20,6E
01C04:  DATA 6F,74
01C06:  DATA 20,63
01C08:  DATA 6F,6E
01C0A:  DATA 6E,65
01C0C:  DATA 63,74
01C0E:  DATA 65,64
01C10:  DATA 0D,0A
01C12:  DATA 00,00
01C14:  DATA 53,74
01C16:  DATA 61,72
01C18:  DATA 74,20
01C1A:  DATA 46,6C
01C1C:  DATA 61,73
01C1E:  DATA 68,20
01C20:  DATA 53,4D
01C22:  DATA 46,20
01C24:  DATA 52,65
01C26:  DATA 61,64
01C28:  DATA 20,46
01C2A:  DATA 6F,72
01C2C:  DATA 63,65
01C2E:  DATA 0D,0A
01C30:  DATA 00,00
01C32:  DATA 09,41
01C34:  DATA 64,64
01C36:  DATA 72,65
01C38:  DATA 73,73
01C3A:  DATA 20,20
01C3C:  DATA 3A,20
01C3E:  DATA 30,78
01C40:  DATA 25,30
01C42:  DATA 38,4C
01C44:  DATA 58,0D
01C46:  DATA 0A,00
01C48:  DATA 09,50
01C4A:  DATA 61,63
01C4C:  DATA 6B,65
01C4E:  DATA 74,4E
01C50:  DATA 75,6D
01C52:  DATA 3A,20
01C54:  DATA 30,78
01C56:  DATA 25,30
01C58:  DATA 34,4C
01C5A:  DATA 58,0D
01C5C:  DATA 0A,00
01C5E:  DATA 72,65
01C60:  DATA 61,64
01C62:  DATA 20,64
01C64:  DATA 61,74
01C66:  DATA 61,0D
01C68:  DATA 0A,00
01C6A:  DATA 0D,0A
01C6C:  DATA 45,6E
01C6E:  DATA 64,20
01C70:  DATA 46,6C
01C72:  DATA 61,73
01C74:  DATA 68,20
01C76:  DATA 53,4D
01C78:  DATA 46,20
01C7A:  DATA 52,65
01C7C:  DATA 61,64
01C7E:  DATA 20,46
01C80:  DATA 6F,72
01C82:  DATA 63,65
01C84:  DATA 0D,0A
01C86:  DATA 00,00
01C88:  DATA 53,74
01C8A:  DATA 61,72
01C8C:  DATA 74,20
01C8E:  DATA 53,4D
01C90:  DATA 46,20
01C92:  DATA 45,72
01C94:  DATA 61,73
01C96:  DATA 65,20
01C98:  DATA 41,6C
01C9A:  DATA 6C,0D
01C9C:  DATA 0A,00
01C9E:  DATA 45,6E
01CA0:  DATA 64,20
01CA2:  DATA 53,4D
01CA4:  DATA 46,20
01CA6:  DATA 45,72
01CA8:  DATA 61,73
01CAA:  DATA 65,20
01CAC:  DATA 41,6C
01CAE:  DATA 6C,0D
01CB0:  DATA 0A,00
01CB2:  DATA 53,74
01CB4:  DATA 61,72
01CB6:  DATA 74,20
01CB8:  DATA 53,4D
01CBA:  DATA 46,20
01CBC:  DATA 52,65
01CBE:  DATA 73,65
01CC0:  DATA 74,0D
01CC2:  DATA 0A,00
01CC4:  DATA 45,6E
01CC6:  DATA 64,20
01CC8:  DATA 53,4D
01CCA:  DATA 46,20
01CCC:  DATA 52,65
01CCE:  DATA 73,65
01CD0:  DATA 74,0D
01CD2:  DATA 0A,00
01CD4:  DATA 0D,0A
01CD6:  DATA 0D,0A
01CD8:  DATA 0D,0A
01CDA:  DATA 3D,3D
01CDC:  DATA 3D,3D
01CDE:  DATA 3D,3D
01CE0:  DATA 3D,3D
01CE2:  DATA 3D,3D
01CE4:  DATA 3D,3D
01CE6:  DATA 3D,3D
01CE8:  DATA 3D,3D
01CEA:  DATA 3D,3D
01CEC:  DATA 3D,3D
01CEE:  DATA 3D,3D
01CF0:  DATA 3D,3D
01CF2:  DATA 3D,3D
01CF4:  DATA 3D,3D
01CF6:  DATA 3D,3D
01CF8:  DATA 3D,3D
01CFA:  DATA 3D,3D
01CFC:  DATA 3D,3D
01CFE:  DATA 3D,3D
01D00:  DATA 3D,3D
01D02:  DATA 3D,3D
01D04:  DATA 3D,3D
01D06:  DATA 3D,3D
01D08:  DATA 3D,3D
01D0A:  DATA 3D,3D
01D0C:  DATA 3D,3D
01D0E:  DATA 3D,3D
01D10:  DATA 3D,3D
01D12:  DATA 3D,3D
01D14:  DATA 3D,3D
01D16:  DATA 0D,0A
01D18:  DATA 00,00
01D1A:  DATA 54,68
01D1C:  DATA 69,73
01D1E:  DATA 20,69
01D20:  DATA 73,20
01D22:  DATA 4D,4F
01D24:  DATA 4D,49
01D26:  DATA 4A,49
01D28:  DATA 20,43
01D2A:  DATA 49,47
01D2C:  DATA 53,20
01D2E:  DATA 50,49
01D30:  DATA 43,20
01D32:  DATA 42,42
01D34:  DATA 4D,20
01D36:  DATA 66,6F
01D38:  DATA 72,20
01D3A:  DATA 4D,49
01D3C:  DATA 53,37
01D3E:  DATA 5F,42
01D40:  DATA 42,4D
01D42:  DATA 34,2E
01D44:  DATA 0D,0A
01D46:  DATA 00,00
01D48:  DATA 4C,61
01D4A:  DATA 73,74
01D4C:  DATA 20,75
01D4E:  DATA 70,64
01D50:  DATA 61,74
01D52:  DATA 65,64
01D54:  DATA 20,6F
01D56:  DATA 6E,20
01D58:  DATA 25,73
01D5A:  DATA 20,25
01D5C:  DATA 73,2C
01D5E:  DATA 20,62
01D60:  DATA 79,20
01D62:  DATA 49,6E
01D64:  DATA 6F,75
01D66:  DATA 65,2E
01D68:  DATA 0D,0A
01D6A:  DATA 0D,0A
01D6C:  DATA 00,00
01D6E:  DATA 37,2D
01D70:  DATA 41,75
01D72:  DATA 67,2D
01D74:  DATA 32,35
01D76:  DATA 00,00
01D78:  DATA 30,30
01D7A:  DATA 3A,35
01D7C:  DATA 39,3A
01D7E:  DATA 32,36
01D80:  DATA 00,00
01D82:  DATA 5F,5F
01D84:  DATA 5F,5F
01D86:  DATA 43,49
01D88:  DATA 47,53
01D8A:  DATA 20,50
01D8C:  DATA 49,43
01D8E:  DATA 20,53
01D90:  DATA 74,61
01D92:  DATA 72,74
01D94:  DATA 20,4F
01D96:  DATA 70,65
01D98:  DATA 72,61
01D9A:  DATA 74,69
01D9C:  DATA 6F,6E
01D9E:  DATA 5F,5F
01DA0:  DATA 5F,5F
01DA2:  DATA 5F,0D
01DA4:  DATA 0A,0D
01DA6:  DATA 0A,00
01DA8:  DATA 77,61
01DAA:  DATA 69,74
01DAC:  DATA 69,6E
01DAE:  DATA 67,20
01DB0:  DATA 66,6F
01DB2:  DATA 72,20
01DB4:  DATA 42,4F
01DB6:  DATA 53,53
01DB8:  DATA 20,50
01DBA:  DATA 49,43
01DBC:  DATA 20,63
01DBE:  DATA 6F,6D
01DC0:  DATA 6D,61
01DC2:  DATA 6E,64
01DC4:  DATA 00,00
01DC6:  DATA 0D,0A
01DC8:  DATA 77,61
01DCA:  DATA 69,74
01DCC:  DATA 69,6E
01DCE:  DATA 67,20
01DD0:  DATA 66,6F
01DD2:  DATA 72,20
01DD4:  DATA 42,4F
01DD6:  DATA 53,53
01DD8:  DATA 20,50
01DDA:  DATA 49,43
01DDC:  DATA 20,63
01DDE:  DATA 6F,6D
01DE0:  DATA 6D,61
01DE2:  DATA 6E,64
01DE4:  DATA 00,00
01DE6:  DATA 0D,0A
01DE8:  DATA 0D,0A
01DEA:  DATA 3D,3D
01DEC:  DATA 3D,3D
01DEE:  DATA 3D,3D
01DF0:  DATA 0D,0A
01DF2:  DATA 0D,0A
01DF4:  DATA 46,69
01DF6:  DATA 6E,69
01DF8:  DATA 73,68
01DFA:  DATA 65,64
01DFC:  DATA 20,70
01DFE:  DATA 72,6F
01E00:  DATA 63,65
01E02:  DATA 73,73
01E04:  DATA 2E,0D
01E06:  DATA 0A,57
01E08:  DATA 61,69
01E0A:  DATA 74,20
01E0C:  DATA 66,6F
01E0E:  DATA 72,20
01E10:  DATA 42,4F
01E12:  DATA 53,53
01E14:  DATA 20,50
01E16:  DATA 49,43
01E18:  DATA 20,74
01E1A:  DATA 75,72
01E1C:  DATA 6E,20
01E1E:  DATA 6F,66
01E20:  DATA 66,20
01E22:  DATA 6D,65
01E24:  DATA 00,00
01E26:  DATA 45,6E
01E28:  DATA 64,20
01E2A:  DATA 6D,61
01E2C:  DATA 69,6E
01E2E:  DATA 0D,0A
01E30:  DATA 00,00
*
01EB2:  TBLRD*+
01EB4:  MOVF   FF5,F
01EB6:  BTFSC  FD8.2
01EB8:  GOTO   1EE0
01EBC:  MOVFF  FF6,A26
01EC0:  MOVFF  FF7,A27
01EC4:  MOVFF  FF8,A28
01EC8:  MOVFF  FF5,A29
01ECC:  CALL   1E60
01ED0:  MOVFF  A26,FF6
01ED4:  MOVFF  A27,FF7
01ED8:  MOVFF  A28,FF8
01EDC:  GOTO   1EB2
01EE0:  RETURN 0
01EE2:  TBLRD*+
01EE4:  MOVFF  FF6,997
01EE8:  MOVFF  FF7,998
01EEC:  MOVFF  FF8,999
01EF0:  MOVFF  FF5,A29
01EF4:  CALL   1E60
01EF8:  MOVFF  997,FF6
01EFC:  MOVFF  998,FF7
01F00:  MOVFF  999,FF8
01F04:  MOVLB  9
01F06:  DECFSZ x96,F
01F08:  BRA    1F0E
01F0A:  BRA    1F14
01F0C:  MOVLB  0
01F0E:  MOVLB  0
01F10:  GOTO   1EE2
01F14:  MOVLB  0
01F16:  RETURN 0
*
020E0:  MOVLB  9
020E2:  BTFSS  x97.7
020E4:  BRA    20EC
020E6:  MOVLB  0
020E8:  GOTO   211C
020EC:  MOVLW  0F
020EE:  MOVWF  00
020F0:  SWAPF  x96,W
020F2:  ANDWF  00,F
020F4:  MOVLW  0A
020F6:  SUBWF  00,W
020F8:  BTFSS  FD8.0
020FA:  BRA    2102
020FC:  MOVLB  0
020FE:  GOTO   210C
02102:  MOVLW  30
02104:  ADDWF  00,F
02106:  MOVLB  0
02108:  GOTO   2114
0210C:  MOVLB  9
0210E:  MOVF   x97,W
02110:  ADDWF  00,F
02112:  MOVLB  0
02114:  MOVFF  00,A29
02118:  CALL   1E60
0211C:  MOVLW  0F
0211E:  MOVLB  9
02120:  ANDWF  x96,F
02122:  MOVLW  0A
02124:  SUBWF  x96,W
02126:  BTFSS  FD8.0
02128:  BRA    2130
0212A:  MOVLB  0
0212C:  GOTO   2138
02130:  MOVLW  30
02132:  MOVLB  0
02134:  GOTO   2140
02138:  MOVLB  9
0213A:  BCF    x97.7
0213C:  MOVF   x97,W
0213E:  MOVLB  0
02140:  MOVLB  9
02142:  ADDWF  x96,F
02144:  MOVFF  996,A29
02148:  MOVLB  0
0214A:  CALL   1E60
0214E:  RETURN 0
*
02248:  MOVLB  A
0224A:  MOVF   x44,W
0224C:  ANDLW  07
0224E:  MOVWF  00
02250:  RRCF   x44,W
02252:  MOVWF  01
02254:  RRCF   01,F
02256:  RRCF   01,F
02258:  MOVLW  1F
0225A:  ANDWF  01,F
0225C:  MOVF   01,W
0225E:  ADDWF  x46,W
02260:  MOVWF  FE9
02262:  MOVLW  00
02264:  ADDWFC x47,W
02266:  MOVWF  FEA
02268:  CLRF   01
0226A:  INCF   01,F
0226C:  INCF   00,F
0226E:  MOVLB  0
02270:  GOTO   2276
02274:  RLCF   01,F
02276:  DECFSZ 00,F
02278:  GOTO   2274
0227C:  MOVLB  A
0227E:  MOVF   x45,F
02280:  BTFSS  FD8.2
02282:  BRA    228A
02284:  MOVLB  0
02286:  GOTO   2294
0228A:  MOVF   01,W
0228C:  IORWF  FEF,F
0228E:  MOVLB  0
02290:  GOTO   229A
02294:  COMF   01,F
02296:  MOVF   01,W
02298:  ANDWF  FEF,F
0229A:  RETURN 0
*
04488:  TSTFSZ 01
0448A:  GOTO   4498
0448E:  TSTFSZ 02
04490:  GOTO   449A
04494:  GOTO   44AA
04498:  INCF   02,F
0449A:  MOVFF  00,FEE
0449E:  DECFSZ 01,F
044A0:  GOTO   449A
044A4:  DECFSZ 02,F
044A6:  GOTO   449A
044AA:  RETURN 0
*
0660E:  MOVLB  2
06610:  MOVF   x75,W
06612:  CLRF   01
06614:  SUBWF  x74,W
06616:  BTFSS  FD8.0
06618:  BRA    6620
0661A:  MOVLB  0
0661C:  GOTO   662A
06620:  MOVF   x74,W
06622:  MOVWF  00
06624:  MOVLB  0
06626:  GOTO   6654
0662A:  CLRF   00
0662C:  MOVLW  08
0662E:  MOVLB  2
06630:  MOVWF  x76
06632:  MOVLB  0
06634:  MOVLB  2
06636:  RLCF   x74,F
06638:  RLCF   00,F
0663A:  MOVF   x75,W
0663C:  SUBWF  00,W
0663E:  BTFSC  FD8.0
06640:  MOVWF  00
06642:  RLCF   01,F
06644:  DECFSZ x76,F
06646:  BRA    664C
06648:  BRA    6652
0664A:  MOVLB  0
0664C:  MOVLB  0
0664E:  GOTO   6634
06652:  MOVLB  0
06654:  RETURN 0
06656:  MOVF   01,W
06658:  MOVFF  1EB,274
0665C:  MOVLW  64
0665E:  MOVLB  2
06660:  MOVWF  x75
06662:  MOVLB  0
06664:  CALL   660E
06668:  MOVFF  00,1EB
0666C:  MOVF   01,W
0666E:  MOVLW  30
06670:  BTFSS  FD8.2
06672:  GOTO   6696
06676:  MOVLB  1
06678:  BTFSC  xEC.1
0667A:  BRA    6682
0667C:  MOVLB  0
0667E:  GOTO   66AA
06682:  BTFSS  xEC.3
06684:  BRA    668C
06686:  MOVLB  0
06688:  GOTO   66AA
0668C:  BTFSC  xEC.4
0668E:  MOVLW  20
06690:  MOVLB  0
06692:  GOTO   66A0
06696:  MOVLB  1
06698:  BCF    xEC.3
0669A:  BCF    xEC.4
0669C:  BSF    xEC.0
0669E:  MOVLB  0
066A0:  ADDWF  01,F
066A2:  MOVFF  01,A29
066A6:  CALL   1E60
066AA:  MOVFF  1EB,274
066AE:  MOVLW  0A
066B0:  MOVLB  2
066B2:  MOVWF  x75
066B4:  MOVLB  0
066B6:  CALL   660E
066BA:  MOVFF  00,1EB
066BE:  MOVF   01,W
066C0:  MOVLW  30
066C2:  BTFSS  FD8.2
066C4:  GOTO   66E4
066C8:  MOVLB  1
066CA:  BTFSS  xEC.3
066CC:  BRA    66D4
066CE:  MOVLB  0
066D0:  GOTO   66EE
066D4:  BTFSC  xEC.0
066D6:  BRA    66DE
066D8:  MOVLB  0
066DA:  GOTO   66EE
066DE:  BTFSC  xEC.4
066E0:  MOVLW  20
066E2:  MOVLB  0
066E4:  ADDWF  01,F
066E6:  MOVFF  01,A29
066EA:  CALL   1E60
066EE:  MOVLW  30
066F0:  MOVLB  1
066F2:  ADDWF  xEB,F
066F4:  MOVFF  1EB,A29
066F8:  MOVLB  0
066FA:  CALL   1E60
066FE:  RETURN 0
*
068D0:  BTFSC  FD8.1
068D2:  GOTO   68DE
068D6:  MOVLW  09
068D8:  MOVWF  FEA
068DA:  MOVLW  AF
068DC:  MOVWF  FE9
068DE:  CLRF   00
068E0:  CLRF   01
068E2:  CLRF   02
068E4:  CLRF   03
068E6:  MOVLB  9
068E8:  CLRF   xAF
068EA:  CLRF   xB0
068EC:  CLRF   xB1
068EE:  CLRF   xB2
068F0:  MOVF   xAE,W
068F2:  IORWF  xAD,W
068F4:  IORWF  xAC,W
068F6:  IORWF  xAB,W
068F8:  BTFSS  FD8.2
068FA:  BRA    6902
068FC:  MOVLB  0
068FE:  GOTO   6992
06902:  MOVLB  0
06904:  MOVLW  20
06906:  MOVLB  9
06908:  MOVWF  xB3
0690A:  MOVLB  0
0690C:  BCF    FD8.0
0690E:  MOVLB  9
06910:  RLCF   xA7,F
06912:  RLCF   xA8,F
06914:  RLCF   xA9,F
06916:  RLCF   xAA,F
06918:  RLCF   xAF,F
0691A:  RLCF   xB0,F
0691C:  RLCF   xB1,F
0691E:  RLCF   xB2,F
06920:  MOVF   xAE,W
06922:  SUBWF  xB2,W
06924:  BTFSC  FD8.2
06926:  BRA    692E
06928:  MOVLB  0
0692A:  GOTO   6950
0692E:  MOVF   xAD,W
06930:  SUBWF  xB1,W
06932:  BTFSC  FD8.2
06934:  BRA    693C
06936:  MOVLB  0
06938:  GOTO   6950
0693C:  MOVF   xAC,W
0693E:  SUBWF  xB0,W
06940:  BTFSC  FD8.2
06942:  BRA    694A
06944:  MOVLB  0
06946:  GOTO   6950
0694A:  MOVF   xAB,W
0694C:  SUBWF  xAF,W
0694E:  MOVLB  0
06950:  BTFSS  FD8.0
06952:  GOTO   6978
06956:  MOVLB  9
06958:  MOVF   xAB,W
0695A:  SUBWF  xAF,F
0695C:  MOVF   xAC,W
0695E:  BTFSS  FD8.0
06960:  INCFSZ xAC,W
06962:  SUBWF  xB0,F
06964:  MOVF   xAD,W
06966:  BTFSS  FD8.0
06968:  INCFSZ xAD,W
0696A:  SUBWF  xB1,F
0696C:  MOVF   xAE,W
0696E:  BTFSS  FD8.0
06970:  INCFSZ xAE,W
06972:  SUBWF  xB2,F
06974:  BSF    FD8.0
06976:  MOVLB  0
06978:  RLCF   00,F
0697A:  RLCF   01,F
0697C:  RLCF   02,F
0697E:  RLCF   03,F
06980:  MOVLB  9
06982:  DECFSZ xB3,F
06984:  BRA    698A
06986:  BRA    6990
06988:  MOVLB  0
0698A:  MOVLB  0
0698C:  GOTO   690C
06990:  MOVLB  0
06992:  MOVFF  9AF,FEF
06996:  MOVFF  9B0,FEC
0699A:  MOVFF  9B1,FEC
0699E:  MOVFF  9B2,FEC
069A2:  MOVF   FED,F
069A4:  MOVF   FED,F
069A6:  MOVF   FED,F
069A8:  RETURN 0
*
06A64:  MOVFF  FEA,99A
06A68:  MOVFF  FE9,999
06A6C:  MOVLB  9
06A6E:  BTFSC  x93.7
06A70:  BRA    6A78
06A72:  MOVLB  0
06A74:  GOTO   6A8A
06A78:  BSF    x99.7
06A7A:  BTFSS  x99.4
06A7C:  INCF   x99,F
06A7E:  COMF   x92,F
06A80:  COMF   x93,F
06A82:  INCF   x92,F
06A84:  BTFSC  FD8.2
06A86:  INCF   x93,F
06A88:  MOVLB  0
06A8A:  MOVLB  9
06A8C:  SWAPF  x93,W
06A8E:  IORLW  F0
06A90:  MOVWF  x95
06A92:  ADDWF  x95,F
06A94:  ADDLW  E2
06A96:  MOVWF  x96
06A98:  ADDLW  32
06A9A:  MOVWF  x98
06A9C:  MOVF   x93,W
06A9E:  ANDLW  0F
06AA0:  ADDWF  x96,F
06AA2:  ADDWF  x96,F
06AA4:  ADDWF  x98,F
06AA6:  ADDLW  E9
06AA8:  MOVWF  x97
06AAA:  ADDWF  x97,F
06AAC:  ADDWF  x97,F
06AAE:  SWAPF  x92,W
06AB0:  ANDLW  0F
06AB2:  ADDWF  x97,F
06AB4:  ADDWF  x98,F
06AB6:  RLCF   x97,F
06AB8:  RLCF   x98,F
06ABA:  COMF   x98,F
06ABC:  RLCF   x98,F
06ABE:  MOVF   x92,W
06AC0:  ANDLW  0F
06AC2:  ADDWF  x98,F
06AC4:  RLCF   x95,F
06AC6:  MOVLW  07
06AC8:  MOVWF  x94
06ACA:  MOVLW  0A
06ACC:  MOVLB  0
06ACE:  MOVLB  9
06AD0:  DECF   x97,F
06AD2:  ADDWF  x98,F
06AD4:  BTFSC  FD8.0
06AD6:  BRA    6ADE
06AD8:  MOVLB  0
06ADA:  GOTO   6ACE
06ADE:  MOVLB  0
06AE0:  MOVLB  9
06AE2:  DECF   x96,F
06AE4:  ADDWF  x97,F
06AE6:  BTFSC  FD8.0
06AE8:  BRA    6AF0
06AEA:  MOVLB  0
06AEC:  GOTO   6AE0
06AF0:  MOVLB  0
06AF2:  MOVLB  9
06AF4:  DECF   x95,F
06AF6:  ADDWF  x96,F
06AF8:  BTFSC  FD8.0
06AFA:  BRA    6B02
06AFC:  MOVLB  0
06AFE:  GOTO   6AF2
06B02:  MOVLB  0
06B04:  MOVLB  9
06B06:  DECF   x94,F
06B08:  ADDWF  x95,F
06B0A:  BTFSC  FD8.0
06B0C:  BRA    6B14
06B0E:  MOVLB  0
06B10:  GOTO   6B04
06B14:  MOVLW  09
06B16:  MOVWF  FEA
06B18:  MOVLW  94
06B1A:  MOVWF  FE9
06B1C:  MOVLW  07
06B1E:  ANDWF  x99,W
06B20:  BCF    x99.6
06B22:  MOVF   FED,F
06B24:  ANDWF  x99,W
06B26:  BTFSC  FD8.2
06B28:  BRA    6B30
06B2A:  MOVLB  0
06B2C:  GOTO   6B48
06B30:  BTFSC  x99.4
06B32:  MOVF   FEE,F
06B34:  BTFSS  x99.4
06B36:  BRA    6B3E
06B38:  MOVLB  0
06B3A:  GOTO   6B48
06B3E:  MOVLW  20
06B40:  MOVWF  00
06B42:  MOVLB  0
06B44:  GOTO   6BC2
06B48:  ADDWF  FE9,F
06B4A:  MOVLW  00
06B4C:  ADDWFC FEA,F
06B4E:  MOVF   FE9,W
06B50:  SUBLW  98
06B52:  BTFSS  FD8.2
06B54:  GOTO   6B68
06B58:  MOVF   FEA,W
06B5A:  SUBLW  09
06B5C:  BTFSS  FD8.2
06B5E:  GOTO   6B68
06B62:  MOVLB  9
06B64:  BSF    x99.6
06B66:  MOVLB  0
06B68:  MOVF   FEF,W
06B6A:  MOVWF  00
06B6C:  BTFSS  FD8.2
06B6E:  GOTO   6B9A
06B72:  MOVLB  9
06B74:  BTFSS  x99.6
06B76:  BRA    6B7E
06B78:  MOVLB  0
06B7A:  GOTO   6B9A
06B7E:  BTFSS  x99.4
06B80:  BRA    6B88
06B82:  MOVLB  0
06B84:  GOTO   6BDA
06B88:  BTFSS  x99.3
06B8A:  BRA    6B92
06B8C:  MOVLB  0
06B8E:  GOTO   6B9A
06B92:  MOVLW  20
06B94:  MOVLB  0
06B96:  GOTO   6BC0
06B9A:  MOVLB  9
06B9C:  BTFSC  x99.7
06B9E:  BRA    6BA6
06BA0:  MOVLB  0
06BA2:  GOTO   6BB6
06BA6:  MOVLW  2D
06BA8:  MOVWF  00
06BAA:  MOVF   FED,W
06BAC:  BCF    x99.6
06BAE:  BCF    x99.7
06BB0:  MOVLB  0
06BB2:  GOTO   6BC2
06BB6:  MOVLB  9
06BB8:  BSF    x99.3
06BBA:  BCF    x99.4
06BBC:  MOVLW  30
06BBE:  MOVLB  0
06BC0:  ADDWF  00,F
06BC2:  MOVFF  FEA,993
06BC6:  MOVFF  FE9,992
06BCA:  MOVFF  00,A29
06BCE:  CALL   1E60
06BD2:  MOVFF  993,FEA
06BD6:  MOVFF  992,FE9
06BDA:  MOVF   FEE,W
06BDC:  MOVLB  9
06BDE:  BTFSC  x99.6
06BE0:  BRA    6BE8
06BE2:  MOVLB  0
06BE4:  GOTO   6B4E
06BE8:  MOVLB  0
06BEA:  GOTO   850E (RETURN)
*
09056:  MOVLW  20
09058:  MOVLB  2
0905A:  BTFSS  x6F.4
0905C:  MOVLW  30
0905E:  MOVWF  x70
09060:  MOVFF  26E,00
09064:  BTFSC  00.7
09066:  BRA    906E
09068:  MOVLB  0
0906A:  GOTO   9080
0906E:  COMF   00,F
09070:  INCF   00,F
09072:  MOVFF  00,26E
09076:  MOVLW  2D
09078:  MOVWF  x70
0907A:  BSF    x6F.7
0907C:  BSF    x6F.0
0907E:  MOVLB  0
09080:  MOVF   01,W
09082:  MOVFF  26E,274
09086:  MOVLW  64
09088:  MOVLB  2
0908A:  MOVWF  x75
0908C:  MOVLB  0
0908E:  CALL   660E
09092:  MOVFF  00,26E
09096:  MOVLW  30
09098:  ADDWF  01,W
0909A:  MOVLB  2
0909C:  MOVWF  x71
0909E:  MOVFF  26E,274
090A2:  MOVLW  0A
090A4:  MOVWF  x75
090A6:  MOVLB  0
090A8:  CALL   660E
090AC:  MOVLW  30
090AE:  ADDWF  00,W
090B0:  MOVLB  2
090B2:  MOVWF  x73
090B4:  MOVLW  30
090B6:  ADDWF  01,W
090B8:  MOVWF  x72
090BA:  MOVFF  270,00
090BE:  MOVLB  0
090C0:  MOVLW  30
090C2:  MOVLB  2
090C4:  SUBWF  x71,W
090C6:  BTFSS  FD8.2
090C8:  BRA    90D0
090CA:  MOVLB  0
090CC:  GOTO   90DC
090D0:  BSF    x6F.1
090D2:  BTFSC  x6F.7
090D4:  BSF    x6F.2
090D6:  MOVLB  0
090D8:  GOTO   911C
090DC:  MOVFF  270,271
090E0:  MOVLW  20
090E2:  MOVLB  2
090E4:  MOVWF  x70
090E6:  MOVLW  30
090E8:  SUBWF  x72,W
090EA:  BTFSS  FD8.2
090EC:  BRA    90F4
090EE:  MOVLB  0
090F0:  GOTO   9100
090F4:  BSF    x6F.0
090F6:  BTFSC  x6F.7
090F8:  BSF    x6F.1
090FA:  MOVLB  0
090FC:  GOTO   911C
09100:  BTFSC  FD8.2
09102:  BRA    910A
09104:  MOVLB  2
09106:  BSF    x6F.0
09108:  MOVLB  0
0910A:  BTFSS  FD8.2
0910C:  GOTO   911C
09110:  MOVFF  271,272
09114:  MOVLW  20
09116:  MOVLB  2
09118:  MOVWF  x71
0911A:  MOVLB  0
0911C:  MOVLB  2
0911E:  BTFSS  x6F.2
09120:  BRA    9128
09122:  MOVLB  0
09124:  GOTO   9142
09128:  BTFSS  x6F.1
0912A:  BRA    9132
0912C:  MOVLB  0
0912E:  GOTO   914A
09132:  BTFSS  x6F.0
09134:  BRA    913C
09136:  MOVLB  0
09138:  GOTO   9152
0913C:  MOVLB  0
0913E:  GOTO   915A
09142:  MOVFF  270,A29
09146:  CALL   1E60
0914A:  MOVFF  271,A29
0914E:  CALL   1E60
09152:  MOVFF  272,A29
09156:  CALL   1E60
0915A:  MOVFF  273,A29
0915E:  CALL   1E60
09162:  RETURN 0
*
09274:  MOVF   FE9,W
09276:  MOVLB  1
09278:  MOVWF  xF5
0927A:  MOVLW  3B
0927C:  MOVWF  xFC
0927E:  MOVLW  9A
09280:  MOVWF  xFB
09282:  MOVLW  CA
09284:  MOVWF  xFA
09286:  CLRF   xF9
09288:  MOVLW  0A
0928A:  MOVWF  xF7
0928C:  MOVLB  0
0928E:  BSF    FD8.1
09290:  MOVLW  01
09292:  MOVWF  FEA
09294:  MOVLW  F1
09296:  MOVWF  FE9
09298:  MOVFF  1F4,9AA
0929C:  MOVFF  1F3,9A9
092A0:  MOVFF  1F2,9A8
092A4:  MOVFF  1F1,9A7
092A8:  MOVFF  1FC,9AE
092AC:  MOVFF  1FB,9AD
092B0:  MOVFF  1FA,9AC
092B4:  MOVFF  1F9,9AB
092B8:  CALL   68D0
092BC:  MOVF   01,W
092BE:  MOVF   00,F
092C0:  BTFSS  FD8.2
092C2:  GOTO   931A
092C6:  MOVLB  1
092C8:  MOVF   xF7,W
092CA:  XORLW  01
092CC:  BTFSS  FD8.2
092CE:  BRA    92D6
092D0:  MOVLB  0
092D2:  GOTO   931A
092D6:  MOVF   xF5,W
092D8:  BTFSS  FD8.2
092DA:  BRA    92E2
092DC:  MOVLB  0
092DE:  GOTO   9320
092E2:  ANDLW  0F
092E4:  SUBWF  xF7,W
092E6:  BTFSS  FD8.2
092E8:  BRA    92F0
092EA:  MOVLB  0
092EC:  GOTO   92FC
092F0:  BTFSS  FD8.0
092F2:  BRA    92FA
092F4:  MOVLB  0
092F6:  GOTO   932C
092FA:  MOVLB  0
092FC:  MOVLB  1
092FE:  BTFSS  xF5.7
09300:  BRA    9308
09302:  MOVLB  0
09304:  GOTO   932C
09308:  BTFSS  xF5.6
0930A:  BRA    9312
0930C:  MOVLB  0
0930E:  GOTO   9320
09312:  MOVLW  20
09314:  MOVLB  0
09316:  GOTO   9322
0931A:  MOVLB  1
0931C:  CLRF   xF5
0931E:  MOVLB  0
09320:  MOVLW  30
09322:  ADDWF  00,F
09324:  MOVFF  00,A29
09328:  CALL   1E60
0932C:  BCF    FD8.1
0932E:  MOVFF  1FC,9AA
09332:  MOVFF  1FB,9A9
09336:  MOVFF  1FA,9A8
0933A:  MOVFF  1F9,9A7
0933E:  MOVLB  9
09340:  CLRF   xAE
09342:  CLRF   xAD
09344:  CLRF   xAC
09346:  MOVLW  0A
09348:  MOVWF  xAB
0934A:  MOVLB  0
0934C:  CALL   68D0
09350:  MOVFF  03,1FC
09354:  MOVFF  02,1FB
09358:  MOVFF  01,1FA
0935C:  MOVFF  00,1F9
09360:  MOVLB  1
09362:  DECFSZ xF7,F
09364:  BRA    936A
09366:  BRA    9370
09368:  MOVLB  0
0936A:  MOVLB  0
0936C:  GOTO   928E
09370:  MOVLB  0
09372:  RETURN 0
*
095A6:  MOVF   FE9,W
095A8:  MOVLB  1
095AA:  MOVWF  xF5
095AC:  BTFSC  xF4.7
095AE:  BRA    95B6
095B0:  MOVLB  0
095B2:  GOTO   95D2
095B6:  DECF   xF5,F
095B8:  BSF    xF5.5
095BA:  COMF   xF1,F
095BC:  COMF   xF2,F
095BE:  COMF   xF3,F
095C0:  COMF   xF4,F
095C2:  INCF   xF1,F
095C4:  BTFSC  FD8.2
095C6:  INCF   xF2,F
095C8:  BTFSC  FD8.2
095CA:  INCF   xF3,F
095CC:  BTFSC  FD8.2
095CE:  INCF   xF4,F
095D0:  MOVLB  0
095D2:  MOVLW  3B
095D4:  MOVLB  1
095D6:  MOVWF  xFC
095D8:  MOVLW  9A
095DA:  MOVWF  xFB
095DC:  MOVLW  CA
095DE:  MOVWF  xFA
095E0:  CLRF   xF9
095E2:  MOVLW  0A
095E4:  MOVWF  xF7
095E6:  MOVLB  0
095E8:  BSF    FD8.1
095EA:  MOVLW  01
095EC:  MOVWF  FEA
095EE:  MOVLW  F1
095F0:  MOVWF  FE9
095F2:  MOVFF  1F4,9AA
095F6:  MOVFF  1F3,9A9
095FA:  MOVFF  1F2,9A8
095FE:  MOVFF  1F1,9A7
09602:  MOVFF  1FC,9AE
09606:  MOVFF  1FB,9AD
0960A:  MOVFF  1FA,9AC
0960E:  MOVFF  1F9,9AB
09612:  CALL   68D0
09616:  MOVF   01,W
09618:  MOVF   00,F
0961A:  BTFSS  FD8.2
0961C:  GOTO   9674
09620:  MOVLB  1
09622:  MOVF   xF7,W
09624:  XORLW  01
09626:  BTFSS  FD8.2
09628:  BRA    9630
0962A:  MOVLB  0
0962C:  GOTO   9674
09630:  MOVF   xF5,W
09632:  BTFSS  FD8.2
09634:  BRA    963C
09636:  MOVLB  0
09638:  GOTO   967C
0963C:  ANDLW  0F
0963E:  SUBWF  xF7,W
09640:  BTFSS  FD8.2
09642:  BRA    964A
09644:  MOVLB  0
09646:  GOTO   9656
0964A:  BTFSS  FD8.0
0964C:  BRA    9654
0964E:  MOVLB  0
09650:  GOTO   96DA
09654:  MOVLB  0
09656:  MOVLB  1
09658:  BTFSS  xF5.7
0965A:  BRA    9662
0965C:  MOVLB  0
0965E:  GOTO   96DA
09662:  BTFSS  xF5.6
09664:  BRA    966C
09666:  MOVLB  0
09668:  GOTO   967C
0966C:  MOVLW  20
0966E:  MOVLB  0
09670:  GOTO   96D0
09674:  MOVLW  20
09676:  MOVLB  1
09678:  ANDWF  xF5,F
0967A:  MOVLB  0
0967C:  MOVLB  1
0967E:  BTFSC  xF5.5
09680:  BRA    9688
09682:  MOVLB  0
09684:  GOTO   96A4
09688:  BCF    xF5.5
0968A:  MOVF   00,W
0968C:  MOVWF  xF5
0968E:  MOVLW  2D
09690:  MOVLB  A
09692:  MOVWF  x29
09694:  MOVLB  0
09696:  CALL   1E60
0969A:  MOVLB  1
0969C:  MOVF   xF5,W
0969E:  MOVWF  00
096A0:  CLRF   xF5
096A2:  MOVLB  0
096A4:  MOVLW  30
096A6:  MOVLB  1
096A8:  BTFSC  xF5.5
096AA:  BRA    96B2
096AC:  MOVLB  0
096AE:  GOTO   96D0
096B2:  BCF    xF5.5
096B4:  MOVF   00,W
096B6:  MOVWF  xF5
096B8:  MOVLW  2D
096BA:  MOVLB  A
096BC:  MOVWF  x29
096BE:  MOVLB  0
096C0:  CALL   1E60
096C4:  MOVLB  1
096C6:  MOVF   xF5,W
096C8:  MOVWF  00
096CA:  CLRF   xF5
096CC:  MOVLW  30
096CE:  MOVLB  0
096D0:  ADDWF  00,F
096D2:  MOVFF  00,A29
096D6:  CALL   1E60
096DA:  BCF    FD8.1
096DC:  MOVFF  1FC,9AA
096E0:  MOVFF  1FB,9A9
096E4:  MOVFF  1FA,9A8
096E8:  MOVFF  1F9,9A7
096EC:  MOVLB  9
096EE:  CLRF   xAE
096F0:  CLRF   xAD
096F2:  CLRF   xAC
096F4:  MOVLW  0A
096F6:  MOVWF  xAB
096F8:  MOVLB  0
096FA:  CALL   68D0
096FE:  MOVFF  03,1FC
09702:  MOVFF  02,1FB
09706:  MOVFF  01,1FA
0970A:  MOVFF  00,1F9
0970E:  MOVLB  1
09710:  DECFSZ xF7,F
09712:  BRA    9718
09714:  BRA    971E
09716:  MOVLB  0
09718:  MOVLB  0
0971A:  GOTO   95E8
0971E:  MOVLB  0
09720:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01E32:  MOVLW  0A
01E34:  MOVWF  FEA
01E36:  MOVLW  3E
01E38:  MOVWF  FE9
01E3A:  MOVF   FEF,W
01E3C:  BTFSC  FD8.2
01E3E:  GOTO   1E5E
01E42:  MOVLW  05
01E44:  MOVWF  01
01E46:  CLRF   00
01E48:  DECFSZ 00,F
01E4A:  BRA    1E48
01E4C:  DECFSZ 01,F
01E4E:  BRA    1E46
01E50:  MOVLW  2E
01E52:  MOVWF  00
01E54:  DECFSZ 00,F
01E56:  BRA    1E54
01E58:  BRA    1E5A
01E5A:  DECFSZ FEF,F
01E5C:  BRA    1E42
01E5E:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
044EA:  BTFSS  FA6.4
044EC:  GOTO   44EA
044F0:  MOVLB  F
044F2:  MOVWF  x29
044F4:  MOVLB  0
044F6:  GOTO   452C (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01E60:  BCF    F93.6
01E62:  BCF    F8A.6
01E64:  MOVLW  08
01E66:  MOVWF  01
01E68:  BRA    1E6A
01E6A:  NOP   
01E6C:  BSF    01.7
01E6E:  GOTO   1E96
01E72:  BCF    01.7
01E74:  MOVLB  A
01E76:  RRCF   x29,F
01E78:  MOVLB  0
01E7A:  BTFSC  FD8.0
01E7C:  BSF    F8A.6
01E7E:  BTFSS  FD8.0
01E80:  BCF    F8A.6
01E82:  BSF    01.6
01E84:  GOTO   1E96
01E88:  BCF    01.6
01E8A:  DECFSZ 01,F
01E8C:  GOTO   1E74
01E90:  BRA    1E92
01E92:  NOP   
01E94:  BSF    F8A.6
01E96:  MOVLW  84
01E98:  MOVWF  FE9
01E9A:  DECFSZ FE9,F
01E9C:  GOTO   1E9A
01EA0:  BRA    1EA2
01EA2:  NOP   
01EA4:  BTFSC  01.7
01EA6:  GOTO   1E72
01EAA:  BTFSC  01.6
01EAC:  GOTO   1E88
01EB0:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
0229C:  MOVLB  A
0229E:  MOVF   x61,W
022A0:  SUBLW  08
022A2:  BTFSS  FD8.2
022A4:  BRA    22AC
022A6:  MOVLB  0
022A8:  GOTO   22C4
022AC:  MOVWF  x63
022AE:  MOVLB  0
022B0:  MOVLB  A
022B2:  RLCF   x60,F
022B4:  DECFSZ x63,F
022B6:  BRA    22BC
022B8:  BRA    22C2
022BA:  MOVLB  0
022BC:  MOVLB  0
022BE:  GOTO   22B0
022C2:  MOVLB  0
022C4:  BSF    F96.4
022C6:  BCF    F96.1
022C8:  BCF    F95.7
022CA:  BCF    F8C.7
022CC:  MOVFF  A61,A63
022D0:  MOVLB  A
022D2:  BTFSS  x60.7
022D4:  BCF    F8D.1
022D6:  BTFSC  x60.7
022D8:  BSF    F8D.1
022DA:  RLCF   x60,F
022DC:  BSF    F8C.7
022DE:  MOVLW  02
022E0:  MOVWF  x64
022E2:  MOVLB  0
022E4:  MOVLB  A
022E6:  DECFSZ x64,F
022E8:  BRA    22EE
022EA:  BRA    22F4
022EC:  MOVLB  0
022EE:  MOVLB  0
022F0:  GOTO   22E4
022F4:  RLCF   01,F
022F6:  BTFSS  F84.4
022F8:  BCF    01.0
022FA:  BTFSC  F84.4
022FC:  BSF    01.0
022FE:  BCF    F8C.7
02300:  MOVLB  0
02302:  BRA    2304
02304:  MOVLB  A
02306:  DECFSZ x63,F
02308:  BRA    230E
0230A:  BRA    2314
0230C:  MOVLB  0
0230E:  MOVLB  0
02310:  GOTO   22D0
02314:  MOVLB  0
02316:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01FEE:  MOVLB  9
01FF0:  MOVF   xB0,W
01FF2:  SUBLW  10
01FF4:  BTFSS  FD8.2
01FF6:  BRA    1FFE
01FF8:  MOVLB  0
01FFA:  GOTO   2018
01FFE:  MOVWF  xB2
02000:  MOVLB  0
02002:  MOVLB  9
02004:  RLCF   xAE,F
02006:  RLCF   xAF,F
02008:  DECFSZ xB2,F
0200A:  BRA    2010
0200C:  BRA    2016
0200E:  MOVLB  0
02010:  MOVLB  0
02012:  GOTO   2002
02016:  MOVLB  0
02018:  BSF    F93.4
0201A:  BCF    F93.5
0201C:  BCF    F93.2
0201E:  BCF    F8A.2
02020:  MOVFF  9B0,9B2
02024:  MOVLB  9
02026:  BTFSS  xAF.7
02028:  BCF    F8A.5
0202A:  BTFSC  xAF.7
0202C:  BSF    F8A.5
0202E:  RLCF   xAE,F
02030:  RLCF   xAF,F
02032:  BSF    F8A.2
02034:  RLCF   01,F
02036:  RLCF   02,F
02038:  BTFSS  F81.4
0203A:  BCF    01.0
0203C:  BTFSC  F81.4
0203E:  BSF    01.0
02040:  BCF    F8A.2
02042:  DECFSZ xB2,F
02044:  BRA    204A
02046:  BRA    2050
02048:  MOVLB  0
0204A:  MOVLB  0
0204C:  GOTO   2024
02050:  MOVLB  0
02052:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01F42:  MOVLW  EA
01F44:  MOVWF  FF6
01F46:  MOVLW  00
01F48:  MOVWF  FF7
01F4A:  MOVLW  00
01F4C:  MOVWF  FF8
01F4E:  CALL   1EB2
....................    clear_interrupt(INT_TIMER1);
01F52:  BCF    F9E.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01F54:  MOVLW  8F
01F56:  MOVWF  FCD
01F58:  CLRF   FAA
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
01F5A:  MOVLW  80
01F5C:  MOVWF  FCF
01F5E:  MOVLW  12
01F60:  MOVWF  FCE
01F62:  NOP   
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
01F64:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
01F66:  MOVLW  C0
01F68:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01F6A:  MOVLW  FE
01F6C:  MOVWF  FF6
01F6E:  MOVLW  00
01F70:  MOVWF  FF7
01F72:  MOVLW  00
01F74:  MOVWF  FF8
01F76:  CALL   1EB2
01F7A:  GOTO   B5DA (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
030E8:  MOVFF  20,00
030EC:  MOVFF  21,01
030F0:  MOVFF  22,02
030F4:  MOVFF  23,03
030F8:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
*
069AA:  BCF    FD8.1
069AC:  MOVFF  1F,9AA
069B0:  MOVFF  1E,9A9
069B4:  MOVFF  1D,9A8
069B8:  MOVFF  1C,9A7
069BC:  MOVLB  9
069BE:  CLRF   xAE
069C0:  CLRF   xAD
069C2:  CLRF   xAC
069C4:  MOVLW  0A
069C6:  MOVWF  xAB
069C8:  MOVLB  0
069CA:  CALL   68D0
069CE:  MOVF   01,W
069D0:  MOVWF  02
069D2:  MOVF   00,W
069D4:  MOVWF  01
069D6:  GOTO   69F2 (RETURN)
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,A6F
00160:  MOVFF  FE9,A6E
00164:  GOTO   010A
00168:  MOVFF  A6F,FEA
0016C:  MOVFF  A6E,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01F18:  MOVLW  7A
01F1A:  MOVWF  FF6
01F1C:  MOVLW  01
01F1E:  MOVWF  FF7
01F20:  MOVLW  00
01F22:  MOVWF  FF8
01F24:  CALL   1EB2
....................    enable_interrupts(INT_RDA3);
01F28:  BSF    F61.5
....................    enable_interrupts(global);
01F2A:  MOVLW  C0
01F2C:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01F2E:  MOVLW  8C
01F30:  MOVWF  FF6
01F32:  MOVLW  01
01F34:  MOVWF  FF7
01F36:  MOVLW  00
01F38:  MOVWF  FF8
01F3A:  CALL   1EB2
01F3E:  GOTO   B5D6 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
044AC:  MOVFF  159,03
044B0:  MOVLB  1
044B2:  MOVF   x58,W
044B4:  MOVWF  FE9
044B6:  MOVFF  03,FEA
044BA:  MOVFF  FEF,15A
044BE:  MOVFF  157,FEA
044C2:  MOVFF  156,FE9
044C6:  CLRF   00
044C8:  CLRF   02
044CA:  MOVFF  15A,01
044CE:  MOVLB  0
044D0:  CALL   4488
....................    *receive_signal_size = 0;
044D4:  MOVFF  159,03
044D8:  MOVLB  1
044DA:  MOVF   x58,W
044DC:  MOVWF  FE9
044DE:  MOVFF  03,FEA
044E2:  CLRF   FEF
044E4:  MOVLB  0
044E6:  GOTO   B678 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
02150:  MOVLW  98
02152:  MOVWF  FF6
02154:  MOVLW  01
02156:  MOVWF  FF7
02158:  MOVLW  00
0215A:  MOVWF  FF8
0215C:  CALL   1EB2
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
02160:  BCF    F93.1
02162:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
02164:  MOVLW  0A
02166:  MOVLB  A
02168:  MOVWF  x3E
0216A:  MOVLB  0
0216C:  CALL   1E32
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
02170:  MOVLW  0D
02172:  MOVLB  9
02174:  MOVWF  xA7
02176:  MOVLB  0
02178:  CALL   2054
0217C:  MOVFF  02,157
02180:  MOVFF  01,156
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02184:  MOVLW  09
02186:  MOVLB  A
02188:  MOVWF  x29
0218A:  MOVLB  0
0218C:  CALL   1E60
02190:  MOVFF  157,996
02194:  MOVLW  37
02196:  MOVLB  9
02198:  MOVWF  x97
0219A:  MOVLB  0
0219C:  CALL   20E0
021A0:  MOVFF  156,996
021A4:  MOVLW  37
021A6:  MOVLB  9
021A8:  MOVWF  x97
021AA:  MOVLB  0
021AC:  CALL   20E0
021B0:  MOVLW  0D
021B2:  MOVLB  A
021B4:  MOVWF  x29
021B6:  MOVLB  0
021B8:  CALL   1E60
021BC:  MOVLW  0A
021BE:  MOVLB  A
021C0:  MOVWF  x29
021C2:  MOVLB  0
021C4:  CALL   1E60
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
021C8:  MOVLB  1
021CA:  INCFSZ x56,W
021CC:  BRA    21D2
021CE:  BRA    21D8
021D0:  MOVLB  0
021D2:  MOVLB  0
021D4:  GOTO   21F0
021D8:  MOVLB  0
021DA:  MOVLB  1
021DC:  INCFSZ x57,W
021DE:  BRA    21E4
021E0:  BRA    21EA
021E2:  MOVLB  0
021E4:  MOVLB  0
021E6:  GOTO   21F0
021EA:  MOVLB  0
021EC:  GOTO   2210
021F0:  MOVLB  1
021F2:  MOVF   x56,F
021F4:  BTFSC  FD8.2
021F6:  BRA    21FE
021F8:  MOVLB  0
021FA:  GOTO   2224
021FE:  MOVLB  0
02200:  MOVLB  1
02202:  MOVF   x57,F
02204:  BTFSC  FD8.2
02206:  BRA    220E
02208:  MOVLB  0
0220A:  GOTO   2224
0220E:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
02210:  MOVLW  AC
02212:  MOVWF  FF6
02214:  MOVLW  01
02216:  MOVWF  FF7
02218:  MOVLW  00
0221A:  MOVWF  FF8
0221C:  CALL   1EB2
....................     } else {
02220:  GOTO   2234
....................         fprintf(PC, "\tConnect successful\r\n");
02224:  MOVLW  BE
02226:  MOVWF  FF6
02228:  MOVLW  01
0222A:  MOVWF  FF7
0222C:  MOVLW  00
0222E:  MOVWF  FF8
02230:  CALL   1EB2
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02234:  MOVLW  D4
02236:  MOVWF  FF6
02238:  MOVLW  01
0223A:  MOVWF  FF7
0223C:  MOVLW  00
0223E:  MOVWF  FF8
02240:  CALL   1EB2
02244:  GOTO   B5DE (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
02054:  MOVFF  9A7,9AE
02058:  GOTO   1F7E
0205C:  MOVFF  02,9A9
02060:  MOVFF  01,9A8
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
02064:  BCF    F93.1
02066:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
02068:  MOVLW  0D
0206A:  MOVWF  00
0206C:  DECFSZ 00,F
0206E:  BRA    206C
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
02070:  MOVFF  9A9,9AF
02074:  MOVFF  9A8,9AE
02078:  MOVLW  10
0207A:  MOVLB  9
0207C:  MOVWF  xB0
0207E:  MOVLW  01
02080:  MOVWF  xB1
02082:  MOVLB  0
02084:  CALL   1FEE
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
02088:  MOVLW  0D
0208A:  MOVWF  00
0208C:  DECFSZ 00,F
0208E:  BRA    208C
....................     output_high(ADC_CS); // Set CS pin high to end communication
02090:  BCF    F93.1
02092:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
02094:  MOVLW  0D
02096:  MOVWF  00
02098:  DECFSZ 00,F
0209A:  BRA    2098
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
0209C:  BCF    F93.1
0209E:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
020A0:  MOVLW  0D
020A2:  MOVWF  00
020A4:  DECFSZ 00,F
020A6:  BRA    20A4
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
020A8:  MOVLB  9
020AA:  CLRF   xAF
020AC:  CLRF   xAE
020AE:  MOVLW  10
020B0:  MOVWF  xB0
020B2:  MOVLW  01
020B4:  MOVWF  xB1
020B6:  MOVLB  0
020B8:  CALL   1FEE
020BC:  MOVFF  02,9AB
020C0:  MOVFF  01,9AA
....................     output_high(ADC_CS); 
020C4:  BCF    F93.1
020C6:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
020C8:  MOVLB  9
020CA:  MOVF   xAA,W
020CC:  MOVWF  xAC
020CE:  MOVF   xAB,W
020D0:  ANDLW  0F
020D2:  MOVWF  xAD
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
020D4:  MOVF   xAC,W
020D6:  MOVWF  01
020D8:  MOVF   xAD,W
020DA:  MOVWF  02
020DC:  MOVLB  0
020DE:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); 
....................     output_high(DAC2_CS); 
....................     delay_ms(10); 
....................     mcp4901_1_write(0); 
....................     mcp4901_2_write(0); 
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); 
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); 
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
06854:  MOVFF  993,997
06858:  MOVFF  992,996
0685C:  CALL   6700
06860:  MOVFF  02,995
06864:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); 
06868:  BCF    F93.3
0686A:  BCF    F8A.3
....................    delay_us(10); 
0686C:  MOVLW  0D
0686E:  MOVWF  00
06870:  DECFSZ 00,F
06872:  BRA    6870
....................    spi_xfer(ADCDAC_STREAM, cmd); 
06874:  MOVFF  995,9AF
06878:  MOVFF  994,9AE
0687C:  MOVLW  10
0687E:  MOVLB  9
06880:  MOVWF  xB0
06882:  MOVLW  01
06884:  MOVWF  xB1
06886:  MOVLB  0
06888:  CALL   1FEE
....................    output_high(DAC1_CS); 
0688C:  BCF    F93.3
0688E:  BSF    F8A.3
06890:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
06892:  MOVFF  993,997
06896:  MOVFF  992,996
0689A:  CALL   6700
0689E:  MOVFF  02,995
068A2:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
068A6:  BCF    F93.0
068A8:  BCF    F8A.0
....................    delay_us(10); 
068AA:  MOVLW  0D
068AC:  MOVWF  00
068AE:  DECFSZ 00,F
068B0:  BRA    68AE
....................    spi_xfer(ADCDAC_STREAM, cmd); 
068B2:  MOVFF  995,9AF
068B6:  MOVFF  994,9AE
068BA:  MOVLW  10
068BC:  MOVLB  9
068BE:  MOVWF  xB0
068C0:  MOVLW  01
068C2:  MOVWF  xB1
068C4:  MOVLB  0
068C6:  CALL   1FEE
....................    output_high(DAC2_CS); 
068CA:  BCF    F93.0
068CC:  BSF    F8A.0
068CE:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01F7E:  MOVLB  9
01F80:  BCF    xAF.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01F82:  BCF    xAF.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01F84:  BCF    xAF.2
....................     cmd.fields.reserved3 = 0;
01F86:  BCF    xAF.3
....................     cmd.fields.coding = 1; // Two's complement
01F88:  BSF    xAF.4
....................     cmd.fields.range = 1; // Normal mode
01F8A:  BSF    xAF.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01F8C:  BCF    xAF.6
....................     cmd.fields.shadow = 0; // Direct access
01F8E:  BCF    xAF.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01F90:  BSF    xB0.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01F92:  BSF    xB0.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01F94:  MOVF   xAE,W
01F96:  ANDLW  01
01F98:  MOVWF  01
01F9A:  BCF    xB0.2
01F9C:  BTFSC  01.0
01F9E:  BSF    xB0.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01FA0:  BCF    FD8.0
01FA2:  RRCF   xAE,W
01FA4:  ANDLW  01
01FA6:  MOVWF  01
01FA8:  BCF    xB0.3
01FAA:  BTFSC  01.0
01FAC:  BSF    xB0.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01FAE:  RRCF   xAE,W
01FB0:  MOVWF  00
01FB2:  RRCF   00,F
01FB4:  MOVLW  3F
01FB6:  ANDWF  00,F
01FB8:  MOVF   00,W
01FBA:  ANDLW  01
01FBC:  MOVWF  01
01FBE:  BCF    xB0.4
01FC0:  BTFSC  01.0
01FC2:  BSF    xB0.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01FC4:  RRCF   xAE,W
01FC6:  MOVWF  00
01FC8:  RRCF   00,F
01FCA:  RRCF   00,F
01FCC:  MOVLW  1F
01FCE:  ANDWF  00,F
01FD0:  MOVF   00,W
01FD2:  ANDLW  01
01FD4:  MOVWF  01
01FD6:  BCF    xB0.5
01FD8:  BTFSC  01.0
01FDA:  BSF    xB0.5
....................     cmd.fields.seq = 0; // Random mode
01FDC:  BCF    xB0.6
....................     cmd.fields.write = 1; // Read operation
01FDE:  BSF    xB0.7
.................... 
.................... 
....................     return cmd.value;
01FE0:  MOVF   xAF,W
01FE2:  MOVWF  01
01FE4:  MOVF   xB0,W
01FE6:  MOVWF  02
01FE8:  MOVLB  0
01FEA:  GOTO   205C (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
06700:  MOVLB  9
06702:  BCF    x99.7
....................    cmd.fields.buffer = 1; // Buffer used
06704:  BSF    x99.6
....................    cmd.fields.gain = 1; // Gain 1x
06706:  BSF    x99.5
....................    cmd.fields.shutdown = 1; // Normal operation
06708:  BSF    x99.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
0670A:  RRCF   x97,W
0670C:  MOVWF  x9B
0670E:  RRCF   x96,W
06710:  MOVWF  x9A
06712:  RRCF   x9B,F
06714:  RRCF   x9A,F
06716:  RRCF   x9B,F
06718:  RRCF   x9A,F
0671A:  RRCF   x9B,F
0671C:  RRCF   x9A,F
0671E:  RRCF   x9B,F
06720:  RRCF   x9A,F
06722:  RRCF   x9B,F
06724:  RRCF   x9A,F
06726:  RRCF   x9B,F
06728:  RRCF   x9A,F
0672A:  MOVLW  01
0672C:  ANDWF  x9B,F
0672E:  MOVF   x9A,W
06730:  ANDLW  01
06732:  MOVWF  00
06734:  CLRF   03
06736:  MOVF   00,W
06738:  MOVWF  01
0673A:  BCF    x99.3
0673C:  BTFSC  01.0
0673E:  BSF    x99.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
06740:  RRCF   x97,W
06742:  MOVWF  x9B
06744:  RRCF   x96,W
06746:  MOVWF  x9A
06748:  RRCF   x9B,F
0674A:  RRCF   x9A,F
0674C:  RRCF   x9B,F
0674E:  RRCF   x9A,F
06750:  RRCF   x9B,F
06752:  RRCF   x9A,F
06754:  RRCF   x9B,F
06756:  RRCF   x9A,F
06758:  RRCF   x9B,F
0675A:  RRCF   x9A,F
0675C:  MOVLW  03
0675E:  ANDWF  x9B,F
06760:  MOVF   x9A,W
06762:  ANDLW  01
06764:  MOVWF  00
06766:  CLRF   03
06768:  MOVF   00,W
0676A:  MOVWF  01
0676C:  BCF    x99.2
0676E:  BTFSC  01.0
06770:  BSF    x99.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
06772:  RRCF   x97,W
06774:  MOVWF  x9B
06776:  RRCF   x96,W
06778:  MOVWF  x9A
0677A:  RRCF   x9B,F
0677C:  RRCF   x9A,F
0677E:  RRCF   x9B,F
06780:  RRCF   x9A,F
06782:  RRCF   x9B,F
06784:  RRCF   x9A,F
06786:  RRCF   x9B,F
06788:  RRCF   x9A,F
0678A:  MOVLW  07
0678C:  ANDWF  x9B,F
0678E:  MOVF   x9A,W
06790:  ANDLW  01
06792:  MOVWF  00
06794:  CLRF   03
06796:  MOVF   00,W
06798:  MOVWF  01
0679A:  BCF    x99.1
0679C:  BTFSC  01.0
0679E:  BSF    x99.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
067A0:  RRCF   x97,W
067A2:  MOVWF  x9B
067A4:  RRCF   x96,W
067A6:  MOVWF  x9A
067A8:  RRCF   x9B,F
067AA:  RRCF   x9A,F
067AC:  RRCF   x9B,F
067AE:  RRCF   x9A,F
067B0:  RRCF   x9B,F
067B2:  RRCF   x9A,F
067B4:  MOVLW  0F
067B6:  ANDWF  x9B,F
067B8:  MOVF   x9A,W
067BA:  ANDLW  01
067BC:  MOVWF  00
067BE:  CLRF   03
067C0:  MOVF   00,W
067C2:  MOVWF  01
067C4:  BCF    x99.0
067C6:  BTFSC  01.0
067C8:  BSF    x99.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
067CA:  RRCF   x97,W
067CC:  MOVWF  x9B
067CE:  RRCF   x96,W
067D0:  MOVWF  x9A
067D2:  RRCF   x9B,F
067D4:  RRCF   x9A,F
067D6:  RRCF   x9B,F
067D8:  RRCF   x9A,F
067DA:  MOVLW  1F
067DC:  ANDWF  x9B,F
067DE:  MOVF   x9A,W
067E0:  ANDLW  01
067E2:  MOVWF  00
067E4:  CLRF   03
067E6:  MOVF   00,W
067E8:  MOVWF  01
067EA:  BCF    x98.7
067EC:  BTFSC  01.0
067EE:  BSF    x98.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
067F0:  RRCF   x97,W
067F2:  MOVWF  x9B
067F4:  RRCF   x96,W
067F6:  MOVWF  x9A
067F8:  RRCF   x9B,F
067FA:  RRCF   x9A,F
067FC:  MOVLW  3F
067FE:  ANDWF  x9B,F
06800:  MOVF   x9A,W
06802:  ANDLW  01
06804:  MOVWF  00
06806:  CLRF   03
06808:  MOVF   00,W
0680A:  MOVWF  01
0680C:  BCF    x98.6
0680E:  BTFSC  01.0
06810:  BSF    x98.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
06812:  BCF    FD8.0
06814:  RRCF   x97,W
06816:  MOVWF  x9B
06818:  RRCF   x96,W
0681A:  MOVWF  x9A
0681C:  MOVF   x9A,W
0681E:  ANDLW  01
06820:  MOVWF  00
06822:  CLRF   03
06824:  MOVF   00,W
06826:  MOVWF  01
06828:  BCF    x98.5
0682A:  BTFSC  01.0
0682C:  BSF    x98.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
0682E:  MOVF   x96,W
06830:  ANDLW  01
06832:  MOVWF  00
06834:  CLRF   03
06836:  MOVF   00,W
06838:  MOVWF  01
0683A:  BCF    x98.4
0683C:  BTFSC  01.0
0683E:  BSF    x98.4
....................    cmd.fields.reserved = 0; // Reserved bits
06840:  BCF    x98.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
06842:  BCF    x98.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
06844:  BCF    x98.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
06846:  BCF    x98.0
.................... 
....................    return cmd.value;
06848:  MOVF   x98,W
0684A:  MOVWF  01
0684C:  MOVF   x99,W
0684E:  MOVWF  02
06850:  MOVLB  0
06852:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
030FA:  MOVLB  A
030FC:  MOVF   x3E,W
030FE:  XORLW  00
03100:  MOVLB  0
03102:  BTFSC  FD8.2
03104:  GOTO   3114
03108:  XORLW  01
0310A:  BTFSC  FD8.2
0310C:  GOTO   317C
03110:  GOTO   31E4
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03114:  MOVLB  A
03116:  CLRF   x47
03118:  CLRF   x46
0311A:  MOVLB  0
0311C:  MOVLB  A
0311E:  MOVF   x47,W
03120:  SUBWF  x45,W
03122:  BTFSC  FD8.0
03124:  BRA    312C
03126:  MOVLB  0
03128:  GOTO   3178
0312C:  MOVLB  0
0312E:  BTFSS  FD8.2
03130:  GOTO   3146
03134:  MOVLB  A
03136:  MOVF   x44,W
03138:  SUBWF  x46,W
0313A:  BTFSS  FD8.0
0313C:  BRA    3144
0313E:  MOVLB  0
03140:  GOTO   3178
03144:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
03146:  MOVLB  A
03148:  MOVF   x42,W
0314A:  ADDWF  x46,W
0314C:  MOVWF  FE9
0314E:  MOVF   x43,W
03150:  ADDWFC x47,W
03152:  MOVWF  FEA
03154:  MOVFF  FEF,A4A
03158:  MOVFF  A4A,A60
0315C:  MOVLW  08
0315E:  MOVWF  x61
03160:  MOVLW  01
03162:  MOVWF  x62
03164:  MOVLB  0
03166:  CALL   229C
0316A:  MOVLB  A
0316C:  INCF   x46,F
0316E:  BTFSC  FD8.2
03170:  INCF   x47,F
03172:  MOVLB  0
03174:  GOTO   311C
....................          break;
03178:  GOTO   31E8
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0317C:  MOVLB  A
0317E:  CLRF   x49
03180:  CLRF   x48
03182:  MOVLB  0
03184:  MOVLB  A
03186:  MOVF   x49,W
03188:  SUBWF  x45,W
0318A:  BTFSC  FD8.0
0318C:  BRA    3194
0318E:  MOVLB  0
03190:  GOTO   31E0
03194:  MOVLB  0
03196:  BTFSS  FD8.2
03198:  GOTO   31AE
0319C:  MOVLB  A
0319E:  MOVF   x44,W
031A0:  SUBWF  x48,W
031A2:  BTFSS  FD8.0
031A4:  BRA    31AC
031A6:  MOVLB  0
031A8:  GOTO   31E0
031AC:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
031AE:  MOVLB  A
031B0:  MOVF   x42,W
031B2:  ADDWF  x48,W
031B4:  MOVWF  FE9
031B6:  MOVF   x43,W
031B8:  ADDWFC x49,W
031BA:  MOVWF  FEA
031BC:  MOVFF  FEF,A4A
031C0:  MOVFF  A4A,A60
031C4:  MOVLW  08
031C6:  MOVWF  x61
031C8:  MOVLW  01
031CA:  MOVWF  x62
031CC:  MOVLB  0
031CE:  CALL   229C
031D2:  MOVLB  A
031D4:  INCF   x48,F
031D6:  BTFSC  FD8.2
031D8:  INCF   x49,F
031DA:  MOVLB  0
031DC:  GOTO   3184
....................          break;
031E0:  GOTO   31E8
....................          
....................       default:
....................          break;
031E4:  GOTO   31E8
....................    }
....................    return;
031E8:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02318:  MOVLB  A
0231A:  MOVF   x44,W
0231C:  XORLW  00
0231E:  MOVLB  0
02320:  BTFSC  FD8.2
02322:  GOTO   2332
02326:  XORLW  01
02328:  BTFSC  FD8.2
0232A:  GOTO   243C
0232E:  GOTO   2546
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02332:  MOVLB  A
02334:  CLRF   x53
02336:  CLRF   x52
02338:  MOVLB  0
0233A:  MOVLB  A
0233C:  MOVF   x53,W
0233E:  SUBWF  x4B,W
02340:  BTFSC  FD8.0
02342:  BRA    234A
02344:  MOVLB  0
02346:  GOTO   2396
0234A:  MOVLB  0
0234C:  BTFSS  FD8.2
0234E:  GOTO   2364
02352:  MOVLB  A
02354:  MOVF   x4A,W
02356:  SUBWF  x52,W
02358:  BTFSS  FD8.0
0235A:  BRA    2362
0235C:  MOVLB  0
0235E:  GOTO   2396
02362:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02364:  MOVLB  A
02366:  MOVF   x48,W
02368:  ADDWF  x52,W
0236A:  MOVWF  FE9
0236C:  MOVF   x49,W
0236E:  ADDWFC x53,W
02370:  MOVWF  FEA
02372:  MOVFF  FEF,A5E
02376:  MOVFF  A5E,A60
0237A:  MOVLW  08
0237C:  MOVWF  x61
0237E:  MOVLW  01
02380:  MOVWF  x62
02382:  MOVLB  0
02384:  CALL   229C
02388:  MOVLB  A
0238A:  INCF   x52,F
0238C:  BTFSC  FD8.2
0238E:  INCF   x53,F
02390:  MOVLB  0
02392:  GOTO   233A
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02396:  MOVLB  A
02398:  CLRF   x57
0239A:  CLRF   x56
0239C:  CLRF   x55
0239E:  CLRF   x54
023A0:  MOVLB  0
023A2:  MOVLB  A
023A4:  MOVF   x57,W
023A6:  SUBWF  x51,W
023A8:  BTFSC  FD8.0
023AA:  BRA    23B2
023AC:  MOVLB  0
023AE:  GOTO   2438
023B2:  MOVLB  0
023B4:  BTFSS  FD8.2
023B6:  GOTO   23FC
023BA:  MOVLB  A
023BC:  MOVF   x56,W
023BE:  SUBWF  x50,W
023C0:  BTFSC  FD8.0
023C2:  BRA    23CA
023C4:  MOVLB  0
023C6:  GOTO   2438
023CA:  MOVLB  0
023CC:  BTFSS  FD8.2
023CE:  GOTO   23FC
023D2:  MOVLB  A
023D4:  MOVF   x55,W
023D6:  SUBWF  x4F,W
023D8:  BTFSC  FD8.0
023DA:  BRA    23E2
023DC:  MOVLB  0
023DE:  GOTO   2438
023E2:  MOVLB  0
023E4:  BTFSS  FD8.2
023E6:  GOTO   23FC
023EA:  MOVLB  A
023EC:  MOVF   x4E,W
023EE:  SUBWF  x54,W
023F0:  BTFSS  FD8.0
023F2:  BRA    23FA
023F4:  MOVLB  0
023F6:  GOTO   2438
023FA:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
023FC:  MOVLB  A
023FE:  MOVF   x4C,W
02400:  ADDWF  x54,W
02402:  MOVWF  FE9
02404:  MOVF   x4D,W
02406:  ADDWFC x55,W
02408:  MOVWF  FEA
0240A:  MOVLW  02
0240C:  MOVWF  x60
0240E:  MOVLW  08
02410:  MOVWF  x61
02412:  MOVLW  01
02414:  MOVWF  x62
02416:  MOVLB  0
02418:  CALL   229C
0241C:  MOVFF  01,FEF
02420:  MOVLW  01
02422:  MOVLB  A
02424:  ADDWF  x54,F
02426:  BTFSC  FD8.0
02428:  INCF   x55,F
0242A:  BTFSC  FD8.2
0242C:  INCF   x56,F
0242E:  BTFSC  FD8.2
02430:  INCF   x57,F
02432:  MOVLB  0
02434:  GOTO   23A2
....................          break;
02438:  GOTO   254A
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0243C:  MOVLB  A
0243E:  CLRF   x59
02440:  CLRF   x58
02442:  MOVLB  0
02444:  MOVLB  A
02446:  MOVF   x59,W
02448:  SUBWF  x4B,W
0244A:  BTFSC  FD8.0
0244C:  BRA    2454
0244E:  MOVLB  0
02450:  GOTO   24A0
02454:  MOVLB  0
02456:  BTFSS  FD8.2
02458:  GOTO   246E
0245C:  MOVLB  A
0245E:  MOVF   x4A,W
02460:  SUBWF  x58,W
02462:  BTFSS  FD8.0
02464:  BRA    246C
02466:  MOVLB  0
02468:  GOTO   24A0
0246C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0246E:  MOVLB  A
02470:  MOVF   x48,W
02472:  ADDWF  x58,W
02474:  MOVWF  FE9
02476:  MOVF   x49,W
02478:  ADDWFC x59,W
0247A:  MOVWF  FEA
0247C:  MOVFF  FEF,A5E
02480:  MOVFF  A5E,A60
02484:  MOVLW  08
02486:  MOVWF  x61
02488:  MOVLW  01
0248A:  MOVWF  x62
0248C:  MOVLB  0
0248E:  CALL   229C
02492:  MOVLB  A
02494:  INCF   x58,F
02496:  BTFSC  FD8.2
02498:  INCF   x59,F
0249A:  MOVLB  0
0249C:  GOTO   2444
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
024A0:  MOVLB  A
024A2:  CLRF   x5D
024A4:  CLRF   x5C
024A6:  CLRF   x5B
024A8:  CLRF   x5A
024AA:  MOVLB  0
024AC:  MOVLB  A
024AE:  MOVF   x5D,W
024B0:  SUBWF  x51,W
024B2:  BTFSC  FD8.0
024B4:  BRA    24BC
024B6:  MOVLB  0
024B8:  GOTO   2542
024BC:  MOVLB  0
024BE:  BTFSS  FD8.2
024C0:  GOTO   2506
024C4:  MOVLB  A
024C6:  MOVF   x5C,W
024C8:  SUBWF  x50,W
024CA:  BTFSC  FD8.0
024CC:  BRA    24D4
024CE:  MOVLB  0
024D0:  GOTO   2542
024D4:  MOVLB  0
024D6:  BTFSS  FD8.2
024D8:  GOTO   2506
024DC:  MOVLB  A
024DE:  MOVF   x5B,W
024E0:  SUBWF  x4F,W
024E2:  BTFSC  FD8.0
024E4:  BRA    24EC
024E6:  MOVLB  0
024E8:  GOTO   2542
024EC:  MOVLB  0
024EE:  BTFSS  FD8.2
024F0:  GOTO   2506
024F4:  MOVLB  A
024F6:  MOVF   x4E,W
024F8:  SUBWF  x5A,W
024FA:  BTFSS  FD8.0
024FC:  BRA    2504
024FE:  MOVLB  0
02500:  GOTO   2542
02504:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02506:  MOVLB  A
02508:  MOVF   x4C,W
0250A:  ADDWF  x5A,W
0250C:  MOVWF  FE9
0250E:  MOVF   x4D,W
02510:  ADDWFC x5B,W
02512:  MOVWF  FEA
02514:  MOVLW  02
02516:  MOVWF  x60
02518:  MOVLW  08
0251A:  MOVWF  x61
0251C:  MOVLW  01
0251E:  MOVWF  x62
02520:  MOVLB  0
02522:  CALL   229C
02526:  MOVFF  01,FEF
0252A:  MOVLW  01
0252C:  MOVLB  A
0252E:  ADDWF  x5A,F
02530:  BTFSC  FD8.0
02532:  INCF   x5B,F
02534:  BTFSC  FD8.2
02536:  INCF   x5C,F
02538:  BTFSC  FD8.2
0253A:  INCF   x5D,F
0253C:  MOVLB  0
0253E:  GOTO   24AC
....................          break;
02542:  GOTO   254A
....................    
....................          
....................       default:
....................          break;
02546:  GOTO   254A
....................    }
....................    return;
0254A:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
031EA:  MOVLB  A
031EC:  MOVF   x3E,W
031EE:  XORLW  00
031F0:  MOVLB  0
031F2:  BTFSC  FD8.2
031F4:  GOTO   3204
031F8:  XORLW  01
031FA:  BTFSC  FD8.2
031FC:  GOTO   32B2
03200:  GOTO   3360
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03204:  MOVLB  A
03206:  CLRF   x49
03208:  MOVLB  0
0320A:  MOVLB  A
0320C:  MOVF   x44,W
0320E:  SUBWF  x49,W
03210:  BTFSS  FD8.0
03212:  BRA    321A
03214:  MOVLB  0
03216:  GOTO   324A
0321A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0321C:  MOVLB  A
0321E:  MOVF   x49,W
03220:  ADDWF  x42,W
03222:  MOVWF  FE9
03224:  MOVLW  00
03226:  ADDWFC x43,W
03228:  MOVWF  FEA
0322A:  MOVFF  FEF,A4F
0322E:  MOVFF  A4F,A60
03232:  MOVLW  08
03234:  MOVWF  x61
03236:  MOVLW  01
03238:  MOVWF  x62
0323A:  MOVLB  0
0323C:  CALL   229C
03240:  MOVLB  A
03242:  INCF   x49,F
03244:  MOVLB  0
03246:  GOTO   320A
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0324A:  MOVLB  A
0324C:  CLRF   x4B
0324E:  CLRF   x4A
03250:  MOVLB  0
03252:  MOVLB  A
03254:  MOVF   x4B,W
03256:  SUBWF  x48,W
03258:  BTFSC  FD8.0
0325A:  BRA    3262
0325C:  MOVLB  0
0325E:  GOTO   32AE
03262:  MOVLB  0
03264:  BTFSS  FD8.2
03266:  GOTO   327C
0326A:  MOVLB  A
0326C:  MOVF   x47,W
0326E:  SUBWF  x4A,W
03270:  BTFSS  FD8.0
03272:  BRA    327A
03274:  MOVLB  0
03276:  GOTO   32AE
0327A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0327C:  MOVLB  A
0327E:  MOVF   x45,W
03280:  ADDWF  x4A,W
03282:  MOVWF  FE9
03284:  MOVF   x46,W
03286:  ADDWFC x4B,W
03288:  MOVWF  FEA
0328A:  MOVFF  FEF,A4F
0328E:  MOVFF  A4F,A60
03292:  MOVLW  08
03294:  MOVWF  x61
03296:  MOVLW  01
03298:  MOVWF  x62
0329A:  MOVLB  0
0329C:  CALL   229C
032A0:  MOVLB  A
032A2:  INCF   x4A,F
032A4:  BTFSC  FD8.2
032A6:  INCF   x4B,F
032A8:  MOVLB  0
032AA:  GOTO   3252
....................          break;
032AE:  GOTO   3364
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
032B2:  MOVLB  A
032B4:  CLRF   x4C
032B6:  MOVLB  0
032B8:  MOVLB  A
032BA:  MOVF   x44,W
032BC:  SUBWF  x4C,W
032BE:  BTFSS  FD8.0
032C0:  BRA    32C8
032C2:  MOVLB  0
032C4:  GOTO   32F8
032C8:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
032CA:  MOVLB  A
032CC:  MOVF   x4C,W
032CE:  ADDWF  x42,W
032D0:  MOVWF  FE9
032D2:  MOVLW  00
032D4:  ADDWFC x43,W
032D6:  MOVWF  FEA
032D8:  MOVFF  FEF,A4F
032DC:  MOVFF  A4F,A60
032E0:  MOVLW  08
032E2:  MOVWF  x61
032E4:  MOVLW  01
032E6:  MOVWF  x62
032E8:  MOVLB  0
032EA:  CALL   229C
032EE:  MOVLB  A
032F0:  INCF   x4C,F
032F2:  MOVLB  0
032F4:  GOTO   32B8
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
032F8:  MOVLB  A
032FA:  CLRF   x4E
032FC:  CLRF   x4D
032FE:  MOVLB  0
03300:  MOVLB  A
03302:  MOVF   x4E,W
03304:  SUBWF  x48,W
03306:  BTFSC  FD8.0
03308:  BRA    3310
0330A:  MOVLB  0
0330C:  GOTO   335C
03310:  MOVLB  0
03312:  BTFSS  FD8.2
03314:  GOTO   332A
03318:  MOVLB  A
0331A:  MOVF   x47,W
0331C:  SUBWF  x4D,W
0331E:  BTFSS  FD8.0
03320:  BRA    3328
03322:  MOVLB  0
03324:  GOTO   335C
03328:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0332A:  MOVLB  A
0332C:  MOVF   x45,W
0332E:  ADDWF  x4D,W
03330:  MOVWF  FE9
03332:  MOVF   x46,W
03334:  ADDWFC x4E,W
03336:  MOVWF  FEA
03338:  MOVFF  FEF,A4F
0333C:  MOVFF  A4F,A60
03340:  MOVLW  08
03342:  MOVWF  x61
03344:  MOVLW  01
03346:  MOVWF  x62
03348:  MOVLB  0
0334A:  CALL   229C
0334E:  MOVLB  A
03350:  INCF   x4D,F
03352:  BTFSC  FD8.2
03354:  INCF   x4E,F
03356:  MOVLB  0
03358:  GOTO   3300
....................          break;
0335C:  GOTO   3364
....................          
....................       default:
....................          break;
03360:  GOTO   3364
....................    }
....................    return;
03364:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
052F4:  MOVFF  26B,A44
052F8:  MOVLW  01
052FA:  MOVLB  A
052FC:  MOVWF  x45
052FE:  MOVLW  0F
05300:  MOVWF  x47
05302:  MOVLW  89
05304:  MOVWF  x46
05306:  MOVLB  0
05308:  CALL   2248
0530C:  MOVFF  26B,A44
05310:  MOVLB  A
05312:  CLRF   x45
05314:  MOVLW  0F
05316:  MOVWF  x47
05318:  MOVLW  92
0531A:  MOVWF  x46
0531C:  MOVLB  0
0531E:  CALL   2248
05322:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03366:  MOVLW  05
03368:  MOVLB  A
0336A:  MOVWF  x42
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0336C:  MOVFF  A40,A44
03370:  CLRF   x45
03372:  MOVLW  0F
03374:  MOVWF  x47
03376:  MOVLW  89
03378:  MOVWF  x46
0337A:  MOVLB  0
0337C:  CALL   2248
03380:  MOVFF  A40,A44
03384:  MOVLB  A
03386:  CLRF   x45
03388:  MOVLW  0F
0338A:  MOVWF  x47
0338C:  MOVLW  92
0338E:  MOVWF  x46
03390:  MOVLB  0
03392:  CALL   2248
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03396:  MOVFF  A41,A47
0339A:  MOVFF  A40,A46
0339E:  MOVFF  A3F,A45
033A2:  MOVFF  A3E,A44
033A6:  MOVLW  0A
033A8:  MOVLB  A
033AA:  MOVWF  x49
033AC:  MOVLW  42
033AE:  MOVWF  x48
033B0:  CLRF   x4B
033B2:  MOVLW  01
033B4:  MOVWF  x4A
033B6:  MOVLW  0A
033B8:  MOVWF  x4D
033BA:  MOVLW  43
033BC:  MOVWF  x4C
033BE:  CLRF   x51
033C0:  CLRF   x50
033C2:  CLRF   x4F
033C4:  MOVLW  01
033C6:  MOVWF  x4E
033C8:  MOVLB  0
033CA:  CALL   2318
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
033CE:  MOVFF  A40,A44
033D2:  MOVLW  01
033D4:  MOVLB  A
033D6:  MOVWF  x45
033D8:  MOVLW  0F
033DA:  MOVWF  x47
033DC:  MOVLW  89
033DE:  MOVWF  x46
033E0:  MOVLB  0
033E2:  CALL   2248
033E6:  MOVFF  A40,A44
033EA:  MOVLB  A
033EC:  CLRF   x45
033EE:  MOVLW  0F
033F0:  MOVWF  x47
033F2:  MOVLW  92
033F4:  MOVWF  x46
033F6:  MOVLB  0
033F8:  CALL   2248
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
033FC:  MOVLB  A
033FE:  MOVF   x43,W
03400:  MOVWF  01
03402:  MOVLB  0
03404:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0465A:  MOVLB  1
0465C:  MOVF   xA6,F
0465E:  BTFSC  FD8.2
04660:  BRA    4668
04662:  MOVLB  0
04664:  GOTO   47C0
04668:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0466A:  MOVLW  06
0466C:  MOVLB  1
0466E:  MOVWF  xAD
04670:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04672:  MOVLW  D8
04674:  MOVLB  1
04676:  MOVWF  xAE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04678:  MOVFF  1AB,1BA
0467C:  MOVFF  1AC,1BB
04680:  CLRF   xBC
04682:  CLRF   xBD
04684:  MOVF   xBA,W
04686:  MOVWF  00
04688:  CLRF   01
0468A:  CLRF   02
0468C:  CLRF   03
0468E:  MOVFF  00,1AF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04692:  MOVFF  1AA,1BA
04696:  MOVFF  1AB,1BB
0469A:  MOVFF  1AC,1BC
0469E:  CLRF   xBD
046A0:  MOVF   xBA,W
046A2:  MOVWF  00
046A4:  CLRF   01
046A6:  CLRF   02
046A8:  CLRF   03
046AA:  MOVFF  00,1B0
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
046AE:  MOVF   xA9,W
046B0:  MOVWF  00
046B2:  CLRF   01
046B4:  CLRF   02
046B6:  CLRF   03
046B8:  MOVFF  00,1B1
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
046BC:  MOVFF  1A7,A44
046C0:  MOVLB  A
046C2:  CLRF   x45
046C4:  MOVLW  0F
046C6:  MOVWF  x47
046C8:  MOVLW  89
046CA:  MOVWF  x46
046CC:  MOVLB  0
046CE:  CALL   2248
046D2:  MOVFF  1A7,A44
046D6:  MOVLB  A
046D8:  CLRF   x45
046DA:  MOVLW  0F
046DC:  MOVWF  x47
046DE:  MOVLW  92
046E0:  MOVWF  x46
046E2:  MOVLB  0
046E4:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
046E8:  MOVFF  1A8,A41
046EC:  MOVFF  1A7,A40
046F0:  MOVFF  1A6,A3F
046F4:  MOVFF  1A5,A3E
046F8:  MOVLW  01
046FA:  MOVLB  A
046FC:  MOVWF  x43
046FE:  MOVLW  AD
04700:  MOVWF  x42
04702:  CLRF   x45
04704:  MOVLW  01
04706:  MOVWF  x44
04708:  MOVLB  0
0470A:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
0470E:  MOVFF  1A7,A44
04712:  MOVLW  01
04714:  MOVLB  A
04716:  MOVWF  x45
04718:  MOVLW  0F
0471A:  MOVWF  x47
0471C:  MOVLW  89
0471E:  MOVWF  x46
04720:  MOVLB  0
04722:  CALL   2248
04726:  MOVFF  1A7,A44
0472A:  MOVLB  A
0472C:  CLRF   x45
0472E:  MOVLW  0F
04730:  MOVWF  x47
04732:  MOVLW  92
04734:  MOVWF  x46
04736:  MOVLB  0
04738:  CALL   2248
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0473C:  MOVFF  1A7,A44
04740:  MOVLB  A
04742:  CLRF   x45
04744:  MOVLW  0F
04746:  MOVWF  x47
04748:  MOVLW  89
0474A:  MOVWF  x46
0474C:  MOVLB  0
0474E:  CALL   2248
04752:  MOVFF  1A7,A44
04756:  MOVLB  A
04758:  CLRF   x45
0475A:  MOVLW  0F
0475C:  MOVWF  x47
0475E:  MOVLW  92
04760:  MOVWF  x46
04762:  MOVLB  0
04764:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04768:  MOVFF  1A8,A41
0476C:  MOVFF  1A7,A40
04770:  MOVFF  1A6,A3F
04774:  MOVFF  1A5,A3E
04778:  MOVLW  01
0477A:  MOVLB  A
0477C:  MOVWF  x43
0477E:  MOVLW  AE
04780:  MOVWF  x42
04782:  CLRF   x45
04784:  MOVLW  04
04786:  MOVWF  x44
04788:  MOVLB  0
0478A:  CALL   30FA
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0478E:  MOVFF  1A7,A44
04792:  MOVLW  01
04794:  MOVLB  A
04796:  MOVWF  x45
04798:  MOVLW  0F
0479A:  MOVWF  x47
0479C:  MOVLW  89
0479E:  MOVWF  x46
047A0:  MOVLB  0
047A2:  CALL   2248
047A6:  MOVFF  1A7,A44
047AA:  MOVLB  A
047AC:  CLRF   x45
047AE:  MOVLW  0F
047B0:  MOVWF  x47
047B2:  MOVLW  92
047B4:  MOVWF  x46
047B6:  MOVLB  0
047B8:  CALL   2248
....................    }
047BC:  GOTO   4940
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
047C0:  MOVLB  1
047C2:  DECFSZ xA6,W
047C4:  BRA    47CA
047C6:  BRA    47D0
047C8:  MOVLB  0
047CA:  MOVLB  0
047CC:  GOTO   4940
047D0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
047D2:  MOVLW  06
047D4:  MOVLB  1
047D6:  MOVWF  xB2
047D8:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
047DA:  MOVLW  DC
047DC:  MOVLB  1
047DE:  MOVWF  xB3
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
047E0:  MOVFF  1AC,1BA
047E4:  CLRF   xBB
047E6:  CLRF   xBC
047E8:  CLRF   xBD
047EA:  MOVF   xBA,W
047EC:  MOVWF  00
047EE:  CLRF   01
047F0:  CLRF   02
047F2:  CLRF   03
047F4:  MOVFF  00,1B4
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
047F8:  MOVFF  1AB,1BA
047FC:  MOVFF  1AC,1BB
04800:  CLRF   xBC
04802:  CLRF   xBD
04804:  MOVF   xBA,W
04806:  MOVWF  00
04808:  CLRF   01
0480A:  CLRF   02
0480C:  CLRF   03
0480E:  MOVFF  00,1B5
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04812:  MOVFF  1AA,1BA
04816:  MOVFF  1AB,1BB
0481A:  MOVFF  1AC,1BC
0481E:  CLRF   xBD
04820:  MOVF   xBA,W
04822:  MOVWF  00
04824:  CLRF   01
04826:  CLRF   02
04828:  CLRF   03
0482A:  MOVFF  00,1B6
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0482E:  MOVF   xA9,W
04830:  MOVWF  00
04832:  CLRF   01
04834:  CLRF   02
04836:  CLRF   03
04838:  MOVFF  00,1B7
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0483C:  MOVFF  1A7,A44
04840:  MOVLB  A
04842:  CLRF   x45
04844:  MOVLW  0F
04846:  MOVWF  x47
04848:  MOVLW  89
0484A:  MOVWF  x46
0484C:  MOVLB  0
0484E:  CALL   2248
04852:  MOVFF  1A7,A44
04856:  MOVLB  A
04858:  CLRF   x45
0485A:  MOVLW  0F
0485C:  MOVWF  x47
0485E:  MOVLW  92
04860:  MOVWF  x46
04862:  MOVLB  0
04864:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04868:  MOVFF  1A8,A41
0486C:  MOVFF  1A7,A40
04870:  MOVFF  1A6,A3F
04874:  MOVFF  1A5,A3E
04878:  MOVLW  01
0487A:  MOVLB  A
0487C:  MOVWF  x43
0487E:  MOVLW  B2
04880:  MOVWF  x42
04882:  CLRF   x45
04884:  MOVLW  01
04886:  MOVWF  x44
04888:  MOVLB  0
0488A:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
0488E:  MOVFF  1A7,A44
04892:  MOVLW  01
04894:  MOVLB  A
04896:  MOVWF  x45
04898:  MOVLW  0F
0489A:  MOVWF  x47
0489C:  MOVLW  89
0489E:  MOVWF  x46
048A0:  MOVLB  0
048A2:  CALL   2248
048A6:  MOVFF  1A7,A44
048AA:  MOVLB  A
048AC:  CLRF   x45
048AE:  MOVLW  0F
048B0:  MOVWF  x47
048B2:  MOVLW  92
048B4:  MOVWF  x46
048B6:  MOVLB  0
048B8:  CALL   2248
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
048BC:  MOVFF  1A7,A44
048C0:  MOVLB  A
048C2:  CLRF   x45
048C4:  MOVLW  0F
048C6:  MOVWF  x47
048C8:  MOVLW  89
048CA:  MOVWF  x46
048CC:  MOVLB  0
048CE:  CALL   2248
048D2:  MOVFF  1A7,A44
048D6:  MOVLB  A
048D8:  CLRF   x45
048DA:  MOVLW  0F
048DC:  MOVWF  x47
048DE:  MOVLW  92
048E0:  MOVWF  x46
048E2:  MOVLB  0
048E4:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
048E8:  MOVFF  1A8,A41
048EC:  MOVFF  1A7,A40
048F0:  MOVFF  1A6,A3F
048F4:  MOVFF  1A5,A3E
048F8:  MOVLW  01
048FA:  MOVLB  A
048FC:  MOVWF  x43
048FE:  MOVLW  B3
04900:  MOVWF  x42
04902:  CLRF   x45
04904:  MOVLW  05
04906:  MOVWF  x44
04908:  MOVLB  0
0490A:  CALL   30FA
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0490E:  MOVFF  1A7,A44
04912:  MOVLW  01
04914:  MOVLB  A
04916:  MOVWF  x45
04918:  MOVLW  0F
0491A:  MOVWF  x47
0491C:  MOVLW  89
0491E:  MOVWF  x46
04920:  MOVLB  0
04922:  CALL   2248
04926:  MOVFF  1A7,A44
0492A:  MOVLB  A
0492C:  CLRF   x45
0492E:  MOVLW  0F
04930:  MOVWF  x47
04932:  MOVLW  92
04934:  MOVWF  x46
04936:  MOVLB  0
04938:  CALL   2248
....................    }
0493C:  GOTO   4940
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04940:  MOVLB  1
04942:  CLRF   xB8
04944:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04946:  MOVFF  1A8,A41
0494A:  MOVFF  1A7,A40
0494E:  MOVFF  1A6,A3F
04952:  MOVFF  1A5,A3E
04956:  CALL   3366
0495A:  MOVF   01,W
0495C:  ANDLW  01
0495E:  SUBLW  01
04960:  BTFSS  FD8.2
04962:  GOTO   49B4
....................       if(timeout_counter > 10)
04966:  MOVLB  1
04968:  MOVF   xB8,W
0496A:  SUBLW  0A
0496C:  BTFSS  FD8.0
0496E:  BRA    4976
04970:  MOVLB  0
04972:  GOTO   4988
04976:  MOVLB  0
....................          delay_ms(200);
04978:  MOVLW  C8
0497A:  MOVLB  A
0497C:  MOVWF  x3E
0497E:  MOVLB  0
04980:  CALL   1E32
04984:  GOTO   4994
....................       else
....................          delay_ms(10);   
04988:  MOVLW  0A
0498A:  MOVLB  A
0498C:  MOVWF  x3E
0498E:  MOVLB  0
04990:  CALL   1E32
....................       
....................       if(timeout_counter > 100){
04994:  MOVLB  1
04996:  MOVF   xB8,W
04998:  SUBLW  64
0499A:  BTFSS  FD8.0
0499C:  BRA    49A4
0499E:  MOVLB  0
049A0:  GOTO   49AA
049A4:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
049A6:  GOTO   49B4
....................       }  
....................       timeout_counter++;
049AA:  MOVLB  1
049AC:  INCF   xB8,F
049AE:  MOVLB  0
049B0:  GOTO   4946
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
049B4:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0378A:  MOVLB  A
0378C:  MOVF   x27,F
0378E:  BTFSC  FD8.2
03790:  BRA    3798
03792:  MOVLB  0
03794:  GOTO   38EE
03798:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0379A:  MOVLW  06
0379C:  MOVLB  A
0379E:  MOVWF  x2E
037A0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
037A2:  MOVLW  20
037A4:  MOVLB  A
037A6:  MOVWF  x2F
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
037A8:  MOVFF  A2C,A3B
037AC:  MOVFF  A2D,A3C
037B0:  CLRF   x3D
037B2:  CLRF   x3E
037B4:  MOVF   x3B,W
037B6:  MOVWF  00
037B8:  CLRF   01
037BA:  CLRF   02
037BC:  CLRF   03
037BE:  MOVFF  00,A30
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
037C2:  MOVFF  A2B,A3B
037C6:  MOVFF  A2C,A3C
037CA:  MOVFF  A2D,A3D
037CE:  CLRF   x3E
037D0:  MOVF   x3B,W
037D2:  MOVWF  00
037D4:  CLRF   01
037D6:  CLRF   02
037D8:  CLRF   03
037DA:  MOVFF  00,A31
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
037DE:  MOVF   x2A,W
037E0:  MOVWF  00
037E2:  CLRF   01
037E4:  CLRF   02
037E6:  CLRF   03
037E8:  MOVFF  00,A32
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
037EC:  MOVFF  A28,A44
037F0:  CLRF   x45
037F2:  MOVLW  0F
037F4:  MOVWF  x47
037F6:  MOVLW  89
037F8:  MOVWF  x46
037FA:  MOVLB  0
037FC:  CALL   2248
03800:  MOVFF  A28,A44
03804:  MOVLB  A
03806:  CLRF   x45
03808:  MOVLW  0F
0380A:  MOVWF  x47
0380C:  MOVLW  92
0380E:  MOVWF  x46
03810:  MOVLB  0
03812:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03816:  MOVFF  A29,A41
0381A:  MOVFF  A28,A40
0381E:  MOVFF  A27,A3F
03822:  MOVFF  A26,A3E
03826:  MOVLW  0A
03828:  MOVLB  A
0382A:  MOVWF  x43
0382C:  MOVLW  2E
0382E:  MOVWF  x42
03830:  CLRF   x45
03832:  MOVLW  01
03834:  MOVWF  x44
03836:  MOVLB  0
03838:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
0383C:  MOVFF  A28,A44
03840:  MOVLW  01
03842:  MOVLB  A
03844:  MOVWF  x45
03846:  MOVLW  0F
03848:  MOVWF  x47
0384A:  MOVLW  89
0384C:  MOVWF  x46
0384E:  MOVLB  0
03850:  CALL   2248
03854:  MOVFF  A28,A44
03858:  MOVLB  A
0385A:  CLRF   x45
0385C:  MOVLW  0F
0385E:  MOVWF  x47
03860:  MOVLW  92
03862:  MOVWF  x46
03864:  MOVLB  0
03866:  CALL   2248
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0386A:  MOVFF  A28,A44
0386E:  MOVLB  A
03870:  CLRF   x45
03872:  MOVLW  0F
03874:  MOVWF  x47
03876:  MOVLW  89
03878:  MOVWF  x46
0387A:  MOVLB  0
0387C:  CALL   2248
03880:  MOVFF  A28,A44
03884:  MOVLB  A
03886:  CLRF   x45
03888:  MOVLW  0F
0388A:  MOVWF  x47
0388C:  MOVLW  92
0388E:  MOVWF  x46
03890:  MOVLB  0
03892:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
03896:  MOVFF  A29,A41
0389A:  MOVFF  A28,A40
0389E:  MOVFF  A27,A3F
038A2:  MOVFF  A26,A3E
038A6:  MOVLW  0A
038A8:  MOVLB  A
038AA:  MOVWF  x43
038AC:  MOVLW  2F
038AE:  MOVWF  x42
038B0:  CLRF   x45
038B2:  MOVLW  04
038B4:  MOVWF  x44
038B6:  MOVLB  0
038B8:  CALL   30FA
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
038BC:  MOVFF  A28,A44
038C0:  MOVLW  01
038C2:  MOVLB  A
038C4:  MOVWF  x45
038C6:  MOVLW  0F
038C8:  MOVWF  x47
038CA:  MOVLW  89
038CC:  MOVWF  x46
038CE:  MOVLB  0
038D0:  CALL   2248
038D4:  MOVFF  A28,A44
038D8:  MOVLB  A
038DA:  CLRF   x45
038DC:  MOVLW  0F
038DE:  MOVWF  x47
038E0:  MOVLW  92
038E2:  MOVWF  x46
038E4:  MOVLB  0
038E6:  CALL   2248
....................    }
038EA:  GOTO   3A6C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
038EE:  MOVLB  A
038F0:  DECFSZ x27,W
038F2:  BRA    38F8
038F4:  BRA    38FE
038F6:  MOVLB  0
038F8:  MOVLB  0
038FA:  GOTO   3A6C
038FE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03900:  MOVLW  06
03902:  MOVLB  A
03904:  MOVWF  x33
03906:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
03908:  MOVLW  21
0390A:  MOVLB  A
0390C:  MOVWF  x34
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
0390E:  MOVFF  A2D,A3B
03912:  CLRF   x3C
03914:  CLRF   x3D
03916:  CLRF   x3E
03918:  MOVF   x3B,W
0391A:  MOVWF  00
0391C:  CLRF   01
0391E:  CLRF   02
03920:  CLRF   03
03922:  MOVFF  00,A35
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03926:  MOVFF  A2C,A3B
0392A:  MOVFF  A2D,A3C
0392E:  CLRF   x3D
03930:  CLRF   x3E
03932:  MOVF   x3B,W
03934:  MOVWF  00
03936:  CLRF   01
03938:  CLRF   02
0393A:  CLRF   03
0393C:  MOVFF  00,A36
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03940:  MOVFF  A2B,A3B
03944:  MOVFF  A2C,A3C
03948:  MOVFF  A2D,A3D
0394C:  CLRF   x3E
0394E:  MOVF   x3B,W
03950:  MOVWF  00
03952:  CLRF   01
03954:  CLRF   02
03956:  CLRF   03
03958:  MOVFF  00,A37
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
0395C:  MOVF   x2A,W
0395E:  MOVWF  00
03960:  CLRF   01
03962:  CLRF   02
03964:  CLRF   03
03966:  MOVFF  00,A38
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0396A:  MOVFF  A28,A44
0396E:  CLRF   x45
03970:  MOVLW  0F
03972:  MOVWF  x47
03974:  MOVLW  89
03976:  MOVWF  x46
03978:  MOVLB  0
0397A:  CALL   2248
0397E:  MOVFF  A28,A44
03982:  MOVLB  A
03984:  CLRF   x45
03986:  MOVLW  0F
03988:  MOVWF  x47
0398A:  MOVLW  92
0398C:  MOVWF  x46
0398E:  MOVLB  0
03990:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03994:  MOVFF  A29,A41
03998:  MOVFF  A28,A40
0399C:  MOVFF  A27,A3F
039A0:  MOVFF  A26,A3E
039A4:  MOVLW  0A
039A6:  MOVLB  A
039A8:  MOVWF  x43
039AA:  MOVLW  33
039AC:  MOVWF  x42
039AE:  CLRF   x45
039B0:  MOVLW  01
039B2:  MOVWF  x44
039B4:  MOVLB  0
039B6:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
039BA:  MOVFF  A28,A44
039BE:  MOVLW  01
039C0:  MOVLB  A
039C2:  MOVWF  x45
039C4:  MOVLW  0F
039C6:  MOVWF  x47
039C8:  MOVLW  89
039CA:  MOVWF  x46
039CC:  MOVLB  0
039CE:  CALL   2248
039D2:  MOVFF  A28,A44
039D6:  MOVLB  A
039D8:  CLRF   x45
039DA:  MOVLW  0F
039DC:  MOVWF  x47
039DE:  MOVLW  92
039E0:  MOVWF  x46
039E2:  MOVLB  0
039E4:  CALL   2248
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
039E8:  MOVFF  A28,A44
039EC:  MOVLB  A
039EE:  CLRF   x45
039F0:  MOVLW  0F
039F2:  MOVWF  x47
039F4:  MOVLW  89
039F6:  MOVWF  x46
039F8:  MOVLB  0
039FA:  CALL   2248
039FE:  MOVFF  A28,A44
03A02:  MOVLB  A
03A04:  CLRF   x45
03A06:  MOVLW  0F
03A08:  MOVWF  x47
03A0A:  MOVLW  92
03A0C:  MOVWF  x46
03A0E:  MOVLB  0
03A10:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
03A14:  MOVFF  A29,A41
03A18:  MOVFF  A28,A40
03A1C:  MOVFF  A27,A3F
03A20:  MOVFF  A26,A3E
03A24:  MOVLW  0A
03A26:  MOVLB  A
03A28:  MOVWF  x43
03A2A:  MOVLW  34
03A2C:  MOVWF  x42
03A2E:  CLRF   x45
03A30:  MOVLW  05
03A32:  MOVWF  x44
03A34:  MOVLB  0
03A36:  CALL   30FA
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03A3A:  MOVFF  A28,A44
03A3E:  MOVLW  01
03A40:  MOVLB  A
03A42:  MOVWF  x45
03A44:  MOVLW  0F
03A46:  MOVWF  x47
03A48:  MOVLW  89
03A4A:  MOVWF  x46
03A4C:  MOVLB  0
03A4E:  CALL   2248
03A52:  MOVFF  A28,A44
03A56:  MOVLB  A
03A58:  CLRF   x45
03A5A:  MOVLW  0F
03A5C:  MOVWF  x47
03A5E:  MOVLW  92
03A60:  MOVWF  x46
03A62:  MOVLB  0
03A64:  CALL   2248
....................    }
03A68:  GOTO   3A6C
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03A6C:  MOVLB  A
03A6E:  CLRF   x39
03A70:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03A72:  MOVFF  A29,A41
03A76:  MOVFF  A28,A40
03A7A:  MOVFF  A27,A3F
03A7E:  MOVFF  A26,A3E
03A82:  CALL   3366
03A86:  MOVF   01,W
03A88:  ANDLW  01
03A8A:  SUBLW  01
03A8C:  BTFSS  FD8.2
03A8E:  GOTO   3AE0
....................       if(timeout_counter > 10)
03A92:  MOVLB  A
03A94:  MOVF   x39,W
03A96:  SUBLW  0A
03A98:  BTFSS  FD8.0
03A9A:  BRA    3AA2
03A9C:  MOVLB  0
03A9E:  GOTO   3AB4
03AA2:  MOVLB  0
....................          delay_ms(200);
03AA4:  MOVLW  C8
03AA6:  MOVLB  A
03AA8:  MOVWF  x3E
03AAA:  MOVLB  0
03AAC:  CALL   1E32
03AB0:  GOTO   3AC0
....................       else
....................          delay_ms(10);   
03AB4:  MOVLW  0A
03AB6:  MOVLB  A
03AB8:  MOVWF  x3E
03ABA:  MOVLB  0
03ABC:  CALL   1E32
....................       
....................       if(timeout_counter > 100){
03AC0:  MOVLB  A
03AC2:  MOVF   x39,W
03AC4:  SUBLW  64
03AC6:  BTFSS  FD8.0
03AC8:  BRA    3AD0
03ACA:  MOVLB  0
03ACC:  GOTO   3AD6
03AD0:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03AD2:  GOTO   3AE0
....................       }  
....................       timeout_counter++;
03AD6:  MOVLB  A
03AD8:  INCF   x39,F
03ADA:  MOVLB  0
03ADC:  GOTO   3A72
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
03AE0:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02612:  MOVLB  2
02614:  MOVF   x6E,F
02616:  BTFSC  FD8.2
02618:  BRA    2620
0261A:  MOVLB  0
0261C:  GOTO   2712
02620:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02622:  MOVLW  03
02624:  MOVLB  2
02626:  MOVWF  x7B
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02628:  MOVFF  273,285
0262C:  MOVFF  274,286
02630:  CLRF   x87
02632:  CLRF   x88
02634:  MOVF   x85,W
02636:  MOVWF  00
02638:  CLRF   01
0263A:  CLRF   02
0263C:  CLRF   03
0263E:  MOVFF  00,27C
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02642:  MOVFF  272,285
02646:  MOVFF  273,286
0264A:  MOVFF  274,287
0264E:  CLRF   x88
02650:  MOVF   x85,W
02652:  MOVWF  00
02654:  CLRF   01
02656:  CLRF   02
02658:  CLRF   03
0265A:  MOVFF  00,27D
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0265E:  MOVF   x71,W
02660:  MOVWF  00
02662:  CLRF   01
02664:  CLRF   02
02666:  CLRF   03
02668:  MOVFF  00,27E
....................             
....................       output_low(flash_stream.cs_pin);
0266C:  MOVFF  26F,A44
02670:  MOVLB  A
02672:  CLRF   x45
02674:  MOVLW  0F
02676:  MOVWF  x47
02678:  MOVLW  89
0267A:  MOVWF  x46
0267C:  MOVLB  0
0267E:  CALL   2248
02682:  MOVFF  26F,A44
02686:  MOVLB  A
02688:  CLRF   x45
0268A:  MOVLW  0F
0268C:  MOVWF  x47
0268E:  MOVLW  92
02690:  MOVWF  x46
02692:  MOVLB  0
02694:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02698:  MOVFF  270,A47
0269C:  MOVFF  26F,A46
026A0:  MOVFF  26E,A45
026A4:  MOVFF  26D,A44
026A8:  MOVLW  02
026AA:  MOVLB  A
026AC:  MOVWF  x49
026AE:  MOVLW  7B
026B0:  MOVWF  x48
026B2:  CLRF   x4B
026B4:  MOVLW  04
026B6:  MOVWF  x4A
026B8:  MOVFF  276,A4D
026BC:  MOVFF  275,A4C
026C0:  MOVFF  27A,A51
026C4:  MOVFF  279,A50
026C8:  MOVFF  278,A4F
026CC:  MOVFF  277,A4E
026D0:  MOVLB  0
026D2:  CALL   2318
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
026D6:  MOVLW  02
026D8:  MOVWF  00
026DA:  DECFSZ 00,F
026DC:  BRA    26DA
026DE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
026E0:  MOVFF  26F,A44
026E4:  MOVLW  01
026E6:  MOVLB  A
026E8:  MOVWF  x45
026EA:  MOVLW  0F
026EC:  MOVWF  x47
026EE:  MOVLW  89
026F0:  MOVWF  x46
026F2:  MOVLB  0
026F4:  CALL   2248
026F8:  MOVFF  26F,A44
026FC:  MOVLB  A
026FE:  CLRF   x45
02700:  MOVLW  0F
02702:  MOVWF  x47
02704:  MOVLW  92
02706:  MOVWF  x46
02708:  MOVLB  0
0270A:  CALL   2248
....................    }
0270E:  GOTO   2828
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02712:  MOVLB  2
02714:  DECFSZ x6E,W
02716:  BRA    271C
02718:  BRA    2722
0271A:  MOVLB  0
0271C:  MOVLB  0
0271E:  GOTO   2828
02722:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02724:  MOVLW  13
02726:  MOVLB  2
02728:  MOVWF  x7F
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0272A:  MOVFF  274,285
0272E:  CLRF   x86
02730:  CLRF   x87
02732:  CLRF   x88
02734:  MOVF   x85,W
02736:  MOVWF  00
02738:  CLRF   01
0273A:  CLRF   02
0273C:  CLRF   03
0273E:  MOVFF  00,280
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02742:  MOVFF  273,285
02746:  MOVFF  274,286
0274A:  CLRF   x87
0274C:  CLRF   x88
0274E:  MOVF   x85,W
02750:  MOVWF  00
02752:  CLRF   01
02754:  CLRF   02
02756:  CLRF   03
02758:  MOVFF  00,281
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0275C:  MOVFF  272,285
02760:  MOVFF  273,286
02764:  MOVFF  274,287
02768:  CLRF   x88
0276A:  MOVF   x85,W
0276C:  MOVWF  00
0276E:  CLRF   01
02770:  CLRF   02
02772:  CLRF   03
02774:  MOVFF  00,282
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02778:  MOVF   x71,W
0277A:  MOVWF  00
0277C:  CLRF   01
0277E:  CLRF   02
02780:  CLRF   03
02782:  MOVFF  00,283
....................    
....................       output_low(flash_stream.cs_pin);
02786:  MOVFF  26F,A44
0278A:  MOVLB  A
0278C:  CLRF   x45
0278E:  MOVLW  0F
02790:  MOVWF  x47
02792:  MOVLW  89
02794:  MOVWF  x46
02796:  MOVLB  0
02798:  CALL   2248
0279C:  MOVFF  26F,A44
027A0:  MOVLB  A
027A2:  CLRF   x45
027A4:  MOVLW  0F
027A6:  MOVWF  x47
027A8:  MOVLW  92
027AA:  MOVWF  x46
027AC:  MOVLB  0
027AE:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
027B2:  MOVFF  270,A47
027B6:  MOVFF  26F,A46
027BA:  MOVFF  26E,A45
027BE:  MOVFF  26D,A44
027C2:  MOVLW  02
027C4:  MOVLB  A
027C6:  MOVWF  x49
027C8:  MOVLW  7F
027CA:  MOVWF  x48
027CC:  CLRF   x4B
027CE:  MOVLW  05
027D0:  MOVWF  x4A
027D2:  MOVFF  276,A4D
027D6:  MOVFF  275,A4C
027DA:  MOVFF  27A,A51
027DE:  MOVFF  279,A50
027E2:  MOVFF  278,A4F
027E6:  MOVFF  277,A4E
027EA:  MOVLB  0
027EC:  CALL   2318
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
027F0:  MOVLW  02
027F2:  MOVWF  00
027F4:  DECFSZ 00,F
027F6:  BRA    27F4
027F8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
027FA:  MOVFF  26F,A44
027FE:  MOVLW  01
02800:  MOVLB  A
02802:  MOVWF  x45
02804:  MOVLW  0F
02806:  MOVWF  x47
02808:  MOVLW  89
0280A:  MOVWF  x46
0280C:  MOVLB  0
0280E:  CALL   2248
02812:  MOVFF  26F,A44
02816:  MOVLB  A
02818:  CLRF   x45
0281A:  MOVLW  0F
0281C:  MOVWF  x47
0281E:  MOVLW  92
02820:  MOVWF  x46
02822:  MOVLB  0
02824:  CALL   2248
....................    }
....................    return;
02828:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03406:  MOVLB  A
03408:  MOVF   x27,F
0340A:  BTFSC  FD8.2
0340C:  BRA    3414
0340E:  MOVLB  0
03410:  GOTO   3582
03414:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03416:  MOVLW  06
03418:  MOVLB  A
0341A:  MOVWF  x32
0341C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0341E:  MOVLW  02
03420:  MOVLB  A
03422:  MOVWF  x33
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03424:  MOVFF  A2C,A3F
03428:  MOVFF  A2D,A40
0342C:  CLRF   x41
0342E:  CLRF   x42
03430:  MOVF   x3F,W
03432:  MOVWF  00
03434:  CLRF   01
03436:  CLRF   02
03438:  CLRF   03
0343A:  MOVFF  00,A34
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0343E:  MOVFF  A2B,A3F
03442:  MOVFF  A2C,A40
03446:  MOVFF  A2D,A41
0344A:  CLRF   x42
0344C:  MOVF   x3F,W
0344E:  MOVWF  00
03450:  CLRF   01
03452:  CLRF   02
03454:  CLRF   03
03456:  MOVFF  00,A35
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
0345A:  MOVF   x2A,W
0345C:  MOVWF  00
0345E:  CLRF   01
03460:  CLRF   02
03462:  CLRF   03
03464:  MOVFF  00,A36
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03468:  MOVFF  A28,A44
0346C:  CLRF   x45
0346E:  MOVLW  0F
03470:  MOVWF  x47
03472:  MOVLW  89
03474:  MOVWF  x46
03476:  MOVLB  0
03478:  CALL   2248
0347C:  MOVFF  A28,A44
03480:  MOVLB  A
03482:  CLRF   x45
03484:  MOVLW  0F
03486:  MOVWF  x47
03488:  MOVLW  92
0348A:  MOVWF  x46
0348C:  MOVLB  0
0348E:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03492:  MOVFF  A29,A41
03496:  MOVFF  A28,A40
0349A:  MOVFF  A27,A3F
0349E:  MOVFF  A26,A3E
034A2:  MOVLW  0A
034A4:  MOVLB  A
034A6:  MOVWF  x43
034A8:  MOVLW  32
034AA:  MOVWF  x42
034AC:  CLRF   x45
034AE:  MOVLW  01
034B0:  MOVWF  x44
034B2:  MOVLB  0
034B4:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
034B8:  MOVFF  A28,A44
034BC:  MOVLW  01
034BE:  MOVLB  A
034C0:  MOVWF  x45
034C2:  MOVLW  0F
034C4:  MOVWF  x47
034C6:  MOVLW  89
034C8:  MOVWF  x46
034CA:  MOVLB  0
034CC:  CALL   2248
034D0:  MOVFF  A28,A44
034D4:  MOVLB  A
034D6:  CLRF   x45
034D8:  MOVLW  0F
034DA:  MOVWF  x47
034DC:  MOVLW  92
034DE:  MOVWF  x46
034E0:  MOVLB  0
034E2:  CALL   2248
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
034E6:  MOVFF  A28,A44
034EA:  MOVLB  A
034EC:  CLRF   x45
034EE:  MOVLW  0F
034F0:  MOVWF  x47
034F2:  MOVLW  89
034F4:  MOVWF  x46
034F6:  MOVLB  0
034F8:  CALL   2248
034FC:  MOVFF  A28,A44
03500:  MOVLB  A
03502:  CLRF   x45
03504:  MOVLW  0F
03506:  MOVWF  x47
03508:  MOVLW  92
0350A:  MOVWF  x46
0350C:  MOVLB  0
0350E:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03512:  MOVFF  A29,A41
03516:  MOVFF  A28,A40
0351A:  MOVFF  A27,A3F
0351E:  MOVFF  A26,A3E
03522:  MOVLW  0A
03524:  MOVLB  A
03526:  MOVWF  x43
03528:  MOVLW  33
0352A:  MOVWF  x42
0352C:  MOVLW  04
0352E:  MOVWF  x44
03530:  MOVFF  A2F,A46
03534:  MOVFF  A2E,A45
03538:  MOVFF  A31,A48
0353C:  MOVFF  A30,A47
03540:  MOVLB  0
03542:  CALL   31EA
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03546:  MOVLW  02
03548:  MOVWF  00
0354A:  DECFSZ 00,F
0354C:  BRA    354A
0354E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03550:  MOVFF  A28,A44
03554:  MOVLW  01
03556:  MOVLB  A
03558:  MOVWF  x45
0355A:  MOVLW  0F
0355C:  MOVWF  x47
0355E:  MOVLW  89
03560:  MOVWF  x46
03562:  MOVLB  0
03564:  CALL   2248
03568:  MOVFF  A28,A44
0356C:  MOVLB  A
0356E:  CLRF   x45
03570:  MOVLW  0F
03572:  MOVWF  x47
03574:  MOVLW  92
03576:  MOVWF  x46
03578:  MOVLB  0
0357A:  CALL   2248
....................    }
0357E:  GOTO   3714
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03582:  MOVLB  A
03584:  DECFSZ x27,W
03586:  BRA    358C
03588:  BRA    3592
0358A:  MOVLB  0
0358C:  MOVLB  0
0358E:  GOTO   3714
03592:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03594:  MOVLW  06
03596:  MOVLB  A
03598:  MOVWF  x37
0359A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
0359C:  MOVLW  12
0359E:  MOVLB  A
035A0:  MOVWF  x38
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
035A2:  MOVFF  A2D,A3F
035A6:  CLRF   x40
035A8:  CLRF   x41
035AA:  CLRF   x42
035AC:  MOVF   x3F,W
035AE:  MOVWF  00
035B0:  CLRF   01
035B2:  CLRF   02
035B4:  CLRF   03
035B6:  MOVFF  00,A39
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
035BA:  MOVFF  A2C,A3F
035BE:  MOVFF  A2D,A40
035C2:  CLRF   x41
035C4:  CLRF   x42
035C6:  MOVF   x3F,W
035C8:  MOVWF  00
035CA:  CLRF   01
035CC:  CLRF   02
035CE:  CLRF   03
035D0:  MOVFF  00,A3A
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
035D4:  MOVFF  A2B,A3F
035D8:  MOVFF  A2C,A40
035DC:  MOVFF  A2D,A41
035E0:  CLRF   x42
035E2:  MOVF   x3F,W
035E4:  MOVWF  00
035E6:  CLRF   01
035E8:  CLRF   02
035EA:  CLRF   03
035EC:  MOVFF  00,A3B
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
035F0:  MOVF   x2A,W
035F2:  MOVWF  00
035F4:  CLRF   01
035F6:  CLRF   02
035F8:  CLRF   03
035FA:  MOVFF  00,A3C
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
035FE:  MOVFF  A28,A44
03602:  CLRF   x45
03604:  MOVLW  0F
03606:  MOVWF  x47
03608:  MOVLW  89
0360A:  MOVWF  x46
0360C:  MOVLB  0
0360E:  CALL   2248
03612:  MOVFF  A28,A44
03616:  MOVLB  A
03618:  CLRF   x45
0361A:  MOVLW  0F
0361C:  MOVWF  x47
0361E:  MOVLW  92
03620:  MOVWF  x46
03622:  MOVLB  0
03624:  CALL   2248
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03628:  MOVFF  A29,A41
0362C:  MOVFF  A28,A40
03630:  MOVFF  A27,A3F
03634:  MOVFF  A26,A3E
03638:  MOVLW  0A
0363A:  MOVLB  A
0363C:  MOVWF  x43
0363E:  MOVLW  37
03640:  MOVWF  x42
03642:  CLRF   x45
03644:  MOVLW  01
03646:  MOVWF  x44
03648:  MOVLB  0
0364A:  CALL   30FA
....................       output_high(flash_stream.cs_pin);
0364E:  MOVFF  A28,A44
03652:  MOVLW  01
03654:  MOVLB  A
03656:  MOVWF  x45
03658:  MOVLW  0F
0365A:  MOVWF  x47
0365C:  MOVLW  89
0365E:  MOVWF  x46
03660:  MOVLB  0
03662:  CALL   2248
03666:  MOVFF  A28,A44
0366A:  MOVLB  A
0366C:  CLRF   x45
0366E:  MOVLW  0F
03670:  MOVWF  x47
03672:  MOVLW  92
03674:  MOVWF  x46
03676:  MOVLB  0
03678:  CALL   2248
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
0367C:  MOVFF  A28,A44
03680:  MOVLB  A
03682:  CLRF   x45
03684:  MOVLW  0F
03686:  MOVWF  x47
03688:  MOVLW  89
0368A:  MOVWF  x46
0368C:  MOVLB  0
0368E:  CALL   2248
03692:  MOVFF  A28,A44
03696:  MOVLB  A
03698:  CLRF   x45
0369A:  MOVLW  0F
0369C:  MOVWF  x47
0369E:  MOVLW  92
036A0:  MOVWF  x46
036A2:  MOVLB  0
036A4:  CALL   2248
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
036A8:  MOVFF  A29,A41
036AC:  MOVFF  A28,A40
036B0:  MOVFF  A27,A3F
036B4:  MOVFF  A26,A3E
036B8:  MOVLW  0A
036BA:  MOVLB  A
036BC:  MOVWF  x43
036BE:  MOVLW  38
036C0:  MOVWF  x42
036C2:  MOVLW  05
036C4:  MOVWF  x44
036C6:  MOVFF  A2F,A46
036CA:  MOVFF  A2E,A45
036CE:  MOVFF  A31,A48
036D2:  MOVFF  A30,A47
036D6:  MOVLB  0
036D8:  CALL   31EA
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
036DC:  MOVLW  02
036DE:  MOVWF  00
036E0:  DECFSZ 00,F
036E2:  BRA    36E0
036E4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
036E6:  MOVFF  A28,A44
036EA:  MOVLW  01
036EC:  MOVLB  A
036EE:  MOVWF  x45
036F0:  MOVLW  0F
036F2:  MOVWF  x47
036F4:  MOVLW  89
036F6:  MOVWF  x46
036F8:  MOVLB  0
036FA:  CALL   2248
036FE:  MOVFF  A28,A44
03702:  MOVLB  A
03704:  CLRF   x45
03706:  MOVLW  0F
03708:  MOVWF  x47
0370A:  MOVLW  92
0370C:  MOVWF  x46
0370E:  MOVLB  0
03710:  CALL   2248
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03714:  MOVLB  A
03716:  CLRF   x3D
03718:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0371A:  MOVFF  A29,A41
0371E:  MOVFF  A28,A40
03722:  MOVFF  A27,A3F
03726:  MOVFF  A26,A3E
0372A:  CALL   3366
0372E:  MOVF   01,W
03730:  ANDLW  01
03732:  SUBLW  01
03734:  BTFSS  FD8.2
03736:  GOTO   3788
....................       if(timeout_counter > 10)
0373A:  MOVLB  A
0373C:  MOVF   x3D,W
0373E:  SUBLW  0A
03740:  BTFSS  FD8.0
03742:  BRA    374A
03744:  MOVLB  0
03746:  GOTO   375C
0374A:  MOVLB  0
....................          delay_ms(200);
0374C:  MOVLW  C8
0374E:  MOVLB  A
03750:  MOVWF  x3E
03752:  MOVLB  0
03754:  CALL   1E32
03758:  GOTO   3768
....................       else
....................          delay_ms(10);   
0375C:  MOVLW  0A
0375E:  MOVLB  A
03760:  MOVWF  x3E
03762:  MOVLB  0
03764:  CALL   1E32
....................       
....................       if(timeout_counter > 100){
03768:  MOVLB  A
0376A:  MOVF   x3D,W
0376C:  SUBLW  64
0376E:  BTFSS  FD8.0
03770:  BRA    3778
03772:  MOVLB  0
03774:  GOTO   377E
03778:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0377A:  GOTO   3788
....................       }  
....................       timeout_counter++;
0377E:  MOVLB  A
03780:  INCF   x3D,F
03782:  MOVLB  0
03784:  GOTO   371A
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03788:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
0254C:  MOVLW  9F
0254E:  MOVLB  A
02550:  MOVWF  x3E
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02552:  MOVFF  A28,A44
02556:  CLRF   x45
02558:  MOVLW  0F
0255A:  MOVWF  x47
0255C:  MOVLW  89
0255E:  MOVWF  x46
02560:  MOVLB  0
02562:  CALL   2248
02566:  MOVFF  A28,A44
0256A:  MOVLB  A
0256C:  CLRF   x45
0256E:  MOVLW  0F
02570:  MOVWF  x47
02572:  MOVLW  92
02574:  MOVWF  x46
02576:  MOVLB  0
02578:  CALL   2248
....................    delay_us(10);  
0257C:  MOVLW  0D
0257E:  MOVWF  00
02580:  DECFSZ 00,F
02582:  BRA    2580
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02584:  MOVFF  A29,A47
02588:  MOVFF  A28,A46
0258C:  MOVFF  A27,A45
02590:  MOVFF  A26,A44
02594:  MOVLW  0A
02596:  MOVLB  A
02598:  MOVWF  x49
0259A:  MOVLW  3E
0259C:  MOVWF  x48
0259E:  CLRF   x4B
025A0:  MOVLW  01
025A2:  MOVWF  x4A
025A4:  MOVLW  0A
025A6:  MOVWF  x4D
025A8:  MOVLW  2A
025AA:  MOVWF  x4C
025AC:  CLRF   x51
025AE:  CLRF   x50
025B0:  CLRF   x4F
025B2:  MOVLW  14
025B4:  MOVWF  x4E
025B6:  MOVLB  0
025B8:  CALL   2318
....................    output_high(flash_stream.cs_pin);
025BC:  MOVFF  A28,A44
025C0:  MOVLW  01
025C2:  MOVLB  A
025C4:  MOVWF  x45
025C6:  MOVLW  0F
025C8:  MOVWF  x47
025CA:  MOVLW  89
025CC:  MOVWF  x46
025CE:  MOVLB  0
025D0:  CALL   2248
025D4:  MOVFF  A28,A44
025D8:  MOVLB  A
025DA:  CLRF   x45
025DC:  MOVLW  0F
025DE:  MOVWF  x47
025E0:  MOVLW  92
025E2:  MOVWF  x46
025E4:  MOVLB  0
025E6:  CALL   2248
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
025EA:  MOVLB  A
025EC:  MOVF   x2A,W
025EE:  SUBLW  20
025F0:  BTFSC  FD8.2
025F2:  BRA    25FA
025F4:  MOVLB  0
025F6:  GOTO   2608
025FA:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
025FC:  MOVLW  01
025FE:  MOVWF  01
02600:  GOTO   2610
....................    }
02604:  GOTO   2610
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02608:  MOVLW  00
0260A:  MOVWF  01
0260C:  GOTO   2610
....................    }
02610:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0409E:  MOVLB  9
040A0:  MOVF   xE6,W
040A2:  MOVWF  FE9
040A4:  MOVF   xE7,W
040A6:  MOVWF  FEA
040A8:  MOVFF  FEF,9E9
040AC:  MOVLW  01
040AE:  MOVWF  xEA
040B0:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
040B2:  MOVLB  9
040B4:  MOVF   xE8,W
040B6:  SUBWF  xEA,W
040B8:  BTFSS  FD8.0
040BA:  BRA    40C2
040BC:  MOVLB  0
040BE:  GOTO   40DE
040C2:  MOVLB  0
....................       crc ^= frame[i++];
040C4:  MOVLB  9
040C6:  MOVF   xEA,W
040C8:  INCF   xEA,F
040CA:  ADDWF  xE6,W
040CC:  MOVWF  FE9
040CE:  MOVLW  00
040D0:  ADDWFC xE7,W
040D2:  MOVWF  FEA
040D4:  MOVF   FEF,W
040D6:  XORWF  xE9,F
040D8:  MOVLB  0
040DA:  GOTO   40B2
....................    return crc;
040DE:  MOVLB  9
040E0:  MOVF   xE9,W
040E2:  MOVWF  01
040E4:  MOVLB  0
040E6:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size)
*
09374:  MOVLW  01
09376:  MOVLB  2
09378:  SUBWF  x6F,W
0937A:  ADDWF  x6D,W
0937C:  MOVWF  FE9
0937E:  MOVLW  00
09380:  ADDWFC x6E,W
09382:  MOVWF  FEA
09384:  MOVFF  FEF,270
09388:  MOVLW  01
0938A:  SUBWF  x6F,W
0938C:  MOVWF  x72
0938E:  MOVFF  26E,9E7
09392:  MOVFF  26D,9E6
09396:  MOVFF  272,9E8
0939A:  MOVLB  0
0939C:  CALL   409E
093A0:  MOVFF  01,271
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
093A4:  MOVLB  2
093A6:  MOVF   x71,W
093A8:  SUBWF  x70,W
093AA:  BTFSS  FD8.2
093AC:  BRA    93B4
093AE:  MOVLB  0
093B0:  GOTO   93BC
093B4:  MOVLB  0
093B6:  MOVLW  00
093B8:  GOTO   93BE
093BC:  MOVLW  01
093BE:  MOVWF  01
093C0:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
*
097C4:  MOVLB  2
097C6:  MOVF   x73,W
097C8:  ADDWF  x71,W
097CA:  MOVWF  FE9
097CC:  MOVLW  00
097CE:  ADDWFC x72,W
097D0:  MOVWF  FEA
097D2:  MOVFF  270,00
097D6:  CLRF   01
097D8:  CLRF   02
097DA:  CLRF   03
097DC:  MOVFF  00,FEF
....................     buf[index + 1] = (int8)(value >> 16);
097E0:  MOVLW  01
097E2:  ADDWF  x73,W
097E4:  ADDWF  x71,W
097E6:  MOVWF  FE9
097E8:  MOVLW  00
097EA:  ADDWFC x72,W
097EC:  MOVWF  FEA
097EE:  MOVFF  26F,00
097F2:  MOVFF  270,01
097F6:  CLRF   02
097F8:  CLRF   03
097FA:  MOVFF  00,FEF
....................     buf[index + 2] = (int8)(value >>  8);
097FE:  MOVLW  02
09800:  ADDWF  x73,W
09802:  ADDWF  x71,W
09804:  MOVWF  FE9
09806:  MOVLW  00
09808:  ADDWFC x72,W
0980A:  MOVWF  FEA
0980C:  MOVFF  26E,00
09810:  MOVFF  26F,01
09814:  MOVFF  270,02
09818:  CLRF   03
0981A:  MOVFF  00,FEF
....................     buf[index + 3] = (int8)(value      );   // LSB
0981E:  MOVLW  03
09820:  ADDWF  x73,W
09822:  ADDWF  x71,W
09824:  MOVWF  FE9
09826:  MOVLW  00
09828:  ADDWFC x72,W
0982A:  MOVWF  FEA
0982C:  MOVFF  26D,FEF
09830:  MOVLB  0
09832:  RETURN 0
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
*
093C2:  MOVLB  2
093C4:  MOVF   x2E,W
093C6:  ADDWF  x2C,W
093C8:  MOVWF  FE9
093CA:  MOVLW  00
093CC:  ADDWFC x2D,W
093CE:  MOVWF  FEA
093D0:  MOVF   FEF,W
093D2:  CLRF   x32
093D4:  CLRF   x31
093D6:  CLRF   x30
093D8:  MOVWF  x2F
093DA:  MOVLW  01
093DC:  ADDWF  x2E,W
093DE:  ADDWF  x2C,W
093E0:  MOVWF  FE9
093E2:  MOVLW  00
093E4:  ADDWFC x2D,W
093E6:  MOVWF  FEA
093E8:  MOVF   FEF,W
093EA:  CLRF   x37
093EC:  CLRF   x36
093EE:  CLRF   x35
093F0:  MOVWF  x34
093F2:  MOVFF  236,03
093F6:  MOVFF  235,02
093FA:  MOVFF  234,01
093FE:  CLRF   00
09400:  MOVF   00,W
09402:  IORWF  x2F,F
09404:  MOVF   01,W
09406:  IORWF  x30,F
09408:  MOVF   02,W
0940A:  IORWF  x31,F
0940C:  MOVF   03,W
0940E:  IORWF  x32,F
09410:  MOVLW  02
09412:  ADDWF  x2E,W
09414:  ADDWF  x2C,W
09416:  MOVWF  FE9
09418:  MOVLW  00
0941A:  ADDWFC x2D,W
0941C:  MOVWF  FEA
0941E:  MOVF   FEF,W
09420:  CLRF   x37
09422:  CLRF   x36
09424:  CLRF   x35
09426:  MOVWF  x34
09428:  MOVFF  235,03
0942C:  MOVFF  234,02
09430:  CLRF   00
09432:  CLRF   01
09434:  MOVF   00,W
09436:  IORWF  x2F,F
09438:  MOVF   01,W
0943A:  IORWF  x30,F
0943C:  MOVF   02,W
0943E:  IORWF  x31,F
09440:  MOVF   03,W
09442:  IORWF  x32,F
09444:  MOVLW  03
09446:  ADDWF  x2E,W
09448:  ADDWF  x2C,W
0944A:  MOVWF  FE9
0944C:  MOVLW  00
0944E:  ADDWFC x2D,W
09450:  MOVWF  FEA
09452:  MOVF   FEF,W
09454:  CLRF   x37
09456:  CLRF   x36
09458:  CLRF   x35
0945A:  MOVWF  x34
0945C:  MOVFF  234,03
09460:  CLRF   00
09462:  CLRF   01
09464:  CLRF   02
09466:  MOVF   00,W
09468:  IORWF  x2F,W
0946A:  MOVWF  00
0946C:  MOVF   01,W
0946E:  IORWF  x30,W
09470:  MOVWF  01
09472:  MOVF   02,W
09474:  IORWF  x31,W
09476:  MOVWF  02
09478:  MOVF   03,W
0947A:  IORWF  x32,W
0947C:  MOVWF  03
0947E:  MOVLB  0
09480:  RETURN 0
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
*
0282A:  MOVLB  1
0282C:  MOVF   xFC,W
0282E:  ADDWF  xFA,W
02830:  MOVWF  FE9
02832:  MOVLW  00
02834:  ADDWFC xFB,W
02836:  MOVWF  FEA
02838:  MOVF   FEF,W
0283A:  MOVLB  2
0283C:  CLRF   x03
0283E:  CLRF   x02
02840:  CLRF   x01
02842:  MOVWF  x00
02844:  MOVFF  200,203
02848:  CLRF   x00
0284A:  CLRF   x01
0284C:  CLRF   x02
0284E:  MOVLW  01
02850:  MOVLB  1
02852:  ADDWF  xFC,W
02854:  ADDWF  xFA,W
02856:  MOVWF  FE9
02858:  MOVLW  00
0285A:  ADDWFC xFB,W
0285C:  MOVWF  FEA
0285E:  MOVF   FEF,W
02860:  MOVLB  2
02862:  CLRF   x08
02864:  CLRF   x07
02866:  CLRF   x06
02868:  MOVWF  x05
0286A:  MOVFF  206,03
0286E:  MOVFF  205,02
02872:  CLRF   00
02874:  CLRF   01
02876:  MOVF   00,W
02878:  IORWF  x00,F
0287A:  MOVF   01,W
0287C:  IORWF  x01,F
0287E:  MOVF   02,W
02880:  IORWF  x02,F
02882:  MOVF   03,W
02884:  IORWF  x03,F
02886:  MOVLW  02
02888:  MOVLB  1
0288A:  ADDWF  xFC,W
0288C:  ADDWF  xFA,W
0288E:  MOVWF  FE9
02890:  MOVLW  00
02892:  ADDWFC xFB,W
02894:  MOVWF  FEA
02896:  MOVF   FEF,W
02898:  MOVLB  2
0289A:  CLRF   x08
0289C:  CLRF   x07
0289E:  CLRF   x06
028A0:  MOVWF  x05
028A2:  MOVFF  207,03
028A6:  MOVFF  206,02
028AA:  MOVFF  205,01
028AE:  CLRF   00
028B0:  MOVF   00,W
028B2:  IORWF  x00,F
028B4:  MOVF   01,W
028B6:  IORWF  x01,F
028B8:  MOVF   02,W
028BA:  IORWF  x02,F
028BC:  MOVF   03,W
028BE:  IORWF  x03,F
028C0:  MOVLW  03
028C2:  MOVLB  1
028C4:  ADDWF  xFC,W
028C6:  ADDWF  xFA,W
028C8:  MOVWF  FE9
028CA:  MOVLW  00
028CC:  ADDWFC xFB,W
028CE:  MOVWF  FEA
028D0:  MOVF   FEF,W
028D2:  MOVWF  00
028D4:  CLRF   01
028D6:  CLRF   02
028D8:  CLRF   03
028DA:  MOVF   00,W
028DC:  MOVLB  2
028DE:  IORWF  x00,W
028E0:  MOVWF  00
028E2:  MOVF   01,W
028E4:  IORWF  x01,W
028E6:  MOVWF  01
028E8:  MOVF   02,W
028EA:  IORWF  x02,W
028EC:  MOVWF  02
028EE:  MOVF   03,W
028F0:  IORWF  x03,W
028F2:  MOVWF  03
028F4:  MOVLB  0
028F6:  RETURN 0
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
0876E:  MOVLW  01
08770:  ADDWF  xED,W
08772:  ANDLW  0F
08774:  MOVLB  1
08776:  MOVWF  x7D
.................... {   
....................    int8 next_tail = (smf_queue.tail_index + 1) % SMF_QUEUE_SIZE;
.................... 
....................    if(next_tail == smf_queue.head_index)
08778:  MOVLB  0
0877A:  MOVF   xEC,W
0877C:  MOVLB  1
0877E:  SUBWF  x7D,W
08780:  BTFSC  FD8.2
08782:  BRA    878A
08784:  MOVLB  0
08786:  GOTO   87A0
0878A:  MOVLB  0
....................       fprintf(PC, "SMF queue is full!!!\r\n");
0878C:  MOVLW  8A
0878E:  MOVWF  FF6
08790:  MOVLW  02
08792:  MOVWF  FF7
08794:  MOVLW  00
08796:  MOVWF  FF8
08798:  CALL   1EB2
0879C:  GOTO   891C
....................       
....................    else
....................    {
....................       smf_queue.entries[smf_queue.tail_index].mission_id = data->mission_id;
087A0:  MOVF   xED,W
087A2:  MULLW  0A
087A4:  MOVF   FF3,W
087A6:  MOVLB  1
087A8:  CLRF   x7F
087AA:  MOVWF  x7E
087AC:  MOVLW  4C
087AE:  ADDWF  x7E,W
087B0:  MOVWF  01
087B2:  MOVLW  00
087B4:  ADDWFC x7F,W
087B6:  MOVWF  03
087B8:  MOVF   01,W
087BA:  MOVWF  x80
087BC:  MOVFF  03,181
087C0:  MOVF   x7B,W
087C2:  MOVWF  FE9
087C4:  MOVF   x7C,W
087C6:  MOVWF  FEA
087C8:  MOVF   FEF,W
087CA:  MOVWF  x82
087CC:  MOVFF  181,FEA
087D0:  MOVFF  180,FE9
087D4:  MOVFF  182,FEF
....................       smf_queue.entries[smf_queue.tail_index].func_type  = data->func_type;
087D8:  MOVLB  0
087DA:  MOVF   xED,W
087DC:  MULLW  0A
087DE:  MOVF   FF3,W
087E0:  MOVLB  1
087E2:  CLRF   x7F
087E4:  MOVWF  x7E
087E6:  MOVLW  09
087E8:  ADDWF  x7E,W
087EA:  MOVWF  01
087EC:  MOVLW  00
087EE:  ADDWFC x7F,W
087F0:  MOVWF  03
087F2:  MOVF   01,W
087F4:  ADDLW  4C
087F6:  MOVWF  01
087F8:  MOVLW  00
087FA:  ADDWFC 03,F
087FC:  MOVF   01,W
087FE:  MOVWF  x7E
08800:  MOVFF  03,17F
08804:  MOVLW  09
08806:  ADDWF  x7B,W
08808:  MOVWF  FE9
0880A:  MOVLW  00
0880C:  ADDWFC x7C,W
0880E:  MOVWF  FEA
08810:  MOVF   FEF,W
08812:  MOVWF  x80
08814:  MOVFF  17F,FEA
08818:  MOVFF  17E,FE9
0881C:  MOVFF  180,FEF
....................       smf_queue.entries[smf_queue.tail_index].src        = data->src;
08820:  MOVLB  0
08822:  MOVF   xED,W
08824:  MULLW  0A
08826:  MOVF   FF3,W
08828:  MOVLB  1
0882A:  CLRF   x7F
0882C:  MOVWF  x7E
0882E:  MOVLW  01
08830:  ADDWF  x7E,W
08832:  MOVWF  01
08834:  MOVLW  00
08836:  ADDWFC x7F,W
08838:  MOVWF  03
0883A:  MOVF   01,W
0883C:  ADDLW  4C
0883E:  MOVWF  01
08840:  MOVLW  00
08842:  ADDWFC 03,F
08844:  MOVF   01,W
08846:  MOVWF  x7E
08848:  MOVFF  03,17F
0884C:  MOVLW  01
0884E:  ADDWF  x7B,W
08850:  MOVWF  FE9
08852:  MOVLW  00
08854:  ADDWFC x7C,W
08856:  MOVWF  FEA
08858:  MOVFF  FEF,00
0885C:  MOVFF  FEC,01
08860:  MOVFF  FEC,02
08864:  MOVFF  FEC,03
08868:  MOVF   FED,F
0886A:  MOVF   FED,F
0886C:  MOVF   FED,F
0886E:  MOVFF  03,183
08872:  MOVFF  02,182
08876:  MOVFF  01,181
0887A:  MOVFF  00,180
0887E:  MOVFF  17F,FEA
08882:  MOVFF  17E,FE9
08886:  MOVFF  180,FEF
0888A:  MOVFF  181,FEC
0888E:  MOVFF  182,FEC
08892:  MOVFF  183,FEC
08896:  MOVF   FED,F
08898:  MOVF   FED,F
0889A:  MOVF   FED,F
....................       smf_queue.entries[smf_queue.tail_index].size       = data->size;
0889C:  MOVLB  0
0889E:  MOVF   xED,W
088A0:  MULLW  0A
088A2:  MOVF   FF3,W
088A4:  MOVLB  1
088A6:  CLRF   x7F
088A8:  MOVWF  x7E
088AA:  MOVLW  05
088AC:  ADDWF  x7E,W
088AE:  MOVWF  01
088B0:  MOVLW  00
088B2:  ADDWFC x7F,W
088B4:  MOVWF  03
088B6:  MOVF   01,W
088B8:  ADDLW  4C
088BA:  MOVWF  01
088BC:  MOVLW  00
088BE:  ADDWFC 03,F
088C0:  MOVF   01,W
088C2:  MOVWF  x7E
088C4:  MOVFF  03,17F
088C8:  MOVLW  05
088CA:  ADDWF  x7B,W
088CC:  MOVWF  FE9
088CE:  MOVLW  00
088D0:  ADDWFC x7C,W
088D2:  MOVWF  FEA
088D4:  MOVFF  FEF,00
088D8:  MOVFF  FEC,01
088DC:  MOVFF  FEC,02
088E0:  MOVFF  FEC,03
088E4:  MOVF   FED,F
088E6:  MOVF   FED,F
088E8:  MOVF   FED,F
088EA:  MOVFF  03,183
088EE:  MOVFF  02,182
088F2:  MOVFF  01,181
088F6:  MOVFF  00,180
088FA:  MOVFF  17F,FEA
088FE:  MOVFF  17E,FE9
08902:  MOVFF  180,FEF
08906:  MOVFF  181,FEC
0890A:  MOVFF  182,FEC
0890E:  MOVFF  183,FEC
08912:  MOVF   FED,F
08914:  MOVF   FED,F
08916:  MOVF   FED,F
.................... 
....................       smf_queue.tail_index = next_tail;
08918:  MOVFF  17D,ED
0891C:  MOVLB  0
....................    }
0891E:  GOTO   8CF2 (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.head_index == smf_queue.tail_index)
*
09164:  MOVF   xED,W
09166:  SUBWF  xEC,W
09168:  BTFSS  FD8.2
0916A:  GOTO   918E
....................    {
....................       fprintf(PC, "SMF queue is empty\r\n");
0916E:  MOVLW  A2
09170:  MOVWF  FF6
09172:  MOVLW  02
09174:  MOVWF  FF7
09176:  MOVLW  00
09178:  MOVWF  FF8
0917A:  CALL   1EB2
....................       return 0x00;
0917E:  MOVLW  00
09180:  MOVWF  01
09182:  MOVLW  00
09184:  MOVWF  02
09186:  GOTO   91BA
....................    }
0918A:  GOTO   91BA
....................    else
....................    {
....................       int8 current_head = smf_queue.head_index;
0918E:  MOVFF  EC,15E
....................       smf_queue.head_index = (smf_queue.head_index + 1) % SMF_QUEUE_SIZE;
09192:  MOVLW  01
09194:  ADDWF  xEC,W
09196:  ANDLW  0F
09198:  MOVWF  xEC
....................       return &smf_queue.entries[current_head];
0919A:  MOVLB  1
0919C:  MOVF   x5E,W
0919E:  MULLW  0A
091A0:  MOVF   FF3,W
091A2:  CLRF   03
091A4:  ADDLW  4C
091A6:  MOVWF  01
091A8:  MOVLW  00
091AA:  ADDWFC 03,F
091AC:  MOVF   01,W
091AE:  MOVWF  01
091B0:  MOVF   03,W
091B2:  MOVWF  02
091B4:  MOVLB  0
091B6:  GOTO   91BA
....................    }
091BA:  GOTO   B05C (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_queue(void)
.................... {
....................    return smf_queue.head_index == smf_queue.tail_index;
*
08F68:  MOVF   xED,W
08F6A:  SUBWF  xEC,W
08F6C:  BTFSC  FD8.2
08F6E:  GOTO   8F78
08F72:  MOVLW  00
08F74:  GOTO   8F7A
08F78:  MOVLW  01
08F7A:  MOVWF  01
08F7C:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(mission_id)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
091BE:  MOVLB  1
091C0:  CLRF   xF3
091C2:  CLRF   xF4
091C4:  CLRF   xF5
091C6:  CLRF   xF6
091C8:  CLRF   xF7
091CA:  CLRF   xF8
091CC:  CLRF   xF9
091CE:  CLRF   xFA
....................    
....................    if (mission_id == ID_CIGS_DATA_TABLE)
091D0:  MOVF   xF2,W
091D2:  SUBLW  C0
091D4:  BTFSC  FD8.2
091D6:  BRA    91DE
091D8:  MOVLB  0
091DA:  GOTO   9202
091DE:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
091E0:  MOVLW  06
091E2:  MOVLB  1
091E4:  MOVWF  xF6
091E6:  MOVLW  AA
091E8:  MOVWF  xF5
091EA:  CLRF   xF4
091EC:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
091EE:  MOVLW  06
091F0:  MOVWF  xFA
091F2:  MOVLW  AA
091F4:  MOVWF  xF9
091F6:  MOVLW  0F
091F8:  MOVWF  xF8
091FA:  SETF   xF7
091FC:  MOVLB  0
....................    }
091FE:  GOTO   926A
....................    else if (mission_id == ID_CIGS_MEASURE_DATA)
09202:  MOVLB  1
09204:  MOVF   xF2,W
09206:  SUBLW  C1
09208:  BTFSC  FD8.2
0920A:  BRA    9212
0920C:  MOVLB  0
0920E:  GOTO   9238
09212:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_MEASURE_DATA_START_ADDRESS;
09214:  MOVLW  06
09216:  MOVLB  1
09218:  MOVWF  xF6
0921A:  MOVLW  AA
0921C:  MOVWF  xF5
0921E:  MOVLW  10
09220:  MOVWF  xF4
09222:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_MEASURE_DATA_END_ADDRESS;
09224:  MOVLW  07
09226:  MOVWF  xFA
09228:  MOVLW  AA
0922A:  MOVWF  xF9
0922C:  MOVLW  0F
0922E:  MOVWF  xF8
09230:  SETF   xF7
09232:  MOVLB  0
....................    }
09234:  GOTO   926A
....................    else if (mission_id == ID_CIGS_PICLOG)
09238:  MOVLB  1
0923A:  MOVF   xF2,W
0923C:  SUBLW  CF
0923E:  BTFSC  FD8.2
09240:  BRA    9248
09242:  MOVLB  0
09244:  GOTO   926A
09248:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0924A:  MOVLW  07
0924C:  MOVLB  1
0924E:  MOVWF  xF6
09250:  MOVLW  AA
09252:  MOVWF  xF5
09254:  MOVLW  10
09256:  MOVWF  xF4
09258:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0925A:  MOVLW  07
0925C:  MOVWF  xFA
0925E:  MOVLW  AA
09260:  MOVWF  xF9
09262:  MOVLW  1F
09264:  MOVWF  xF8
09266:  SETF   xF7
09268:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
0926A:  MOVLW  F3
0926C:  MOVWF  01
0926E:  MOVLW  01
09270:  MOVWF  02
09272:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
0428C:  MOVLB  1
0428E:  CLRF   x5F
04290:  CLRF   x60
04292:  CLRF   x61
04294:  CLRF   x62
04296:  CLRF   x63
04298:  CLRF   x64
0429A:  CLRF   x65
0429C:  CLRF   x66
0429E:  CLRF   x67
042A0:  CLRF   x68
042A2:  CLRF   x69
042A4:  CLRF   x6A
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
042A6:  MOVLW  B8
042A8:  MOVWF  FF6
042AA:  MOVLW  02
042AC:  MOVWF  FF7
042AE:  MOVLW  00
042B0:  MOVWF  FF8
042B2:  MOVLB  0
042B4:  CALL   1EB2
....................    fprintf(PC, "\t[BOSS] >>> ");
042B8:  MOVLW  D8
042BA:  MOVWF  FF6
042BC:  MOVLW  02
042BE:  MOVWF  FF7
042C0:  MOVLW  00
042C2:  MOVWF  FF8
042C4:  CALL   1EB2
....................    for (int8 i = 0; i < receive_signal_size; i++)
042C8:  MOVLB  1
042CA:  CLRF   x6B
042CC:  MOVLB  0
042CE:  MOVLB  1
042D0:  MOVF   x5E,W
042D2:  SUBWF  x6B,W
042D4:  BTFSS  FD8.0
042D6:  BRA    42DE
042D8:  MOVLB  0
042DA:  GOTO   4318
042DE:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
042E0:  MOVLB  1
042E2:  MOVF   x6B,W
042E4:  ADDWF  x5C,W
042E6:  MOVWF  FE9
042E8:  MOVLW  00
042EA:  ADDWFC x5D,W
042EC:  MOVWF  FEA
042EE:  MOVFF  FEF,172
042F2:  MOVFF  172,996
042F6:  MOVLW  37
042F8:  MOVLB  9
042FA:  MOVWF  x97
042FC:  MOVLB  0
042FE:  CALL   20E0
04302:  MOVLW  20
04304:  MOVLB  A
04306:  MOVWF  x29
04308:  MOVLB  0
0430A:  CALL   1E60
0430E:  MOVLB  1
04310:  INCF   x6B,F
04312:  MOVLB  0
04314:  GOTO   42CE
....................    fprintf(PC, "\r\n");
04318:  MOVLW  0D
0431A:  MOVLB  A
0431C:  MOVWF  x29
0431E:  MOVLB  0
04320:  CALL   1E60
04324:  MOVLW  0A
04326:  MOVLB  A
04328:  MOVWF  x29
0432A:  MOVLB  0
0432C:  CALL   1E60
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
04330:  MOVFF  15D,173
04334:  MOVFF  15C,172
04338:  MOVFF  15E,174
0433C:  GOTO   3F3A
04340:  MOVFF  01,16C
....................    if (frame_start_position == -1)
04344:  MOVLB  1
04346:  MOVF   x6C,W
04348:  SUBLW  FF
0434A:  BTFSC  FD8.2
0434C:  BRA    4354
0434E:  MOVLB  0
04350:  GOTO   4362
04354:  MOVLB  0
....................       return command;
04356:  MOVLW  5F
04358:  MOVWF  01
0435A:  MOVLW  01
0435C:  MOVWF  02
0435E:  GOTO   4484
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
04362:  MOVLB  1
04364:  MOVF   x6C,W
04366:  ADDWF  x5C,W
04368:  MOVWF  01
0436A:  MOVLW  00
0436C:  ADDWFC x5D,W
0436E:  MOVWF  03
04370:  MOVF   01,W
04372:  MOVWF  x6D
04374:  MOVFF  03,16E
04378:  MOVF   x6D,W
0437A:  MOVWF  FE9
0437C:  MOVF   x6E,W
0437E:  MOVWF  FEA
04380:  MOVF   FEF,W
04382:  ANDLW  0F
04384:  MOVWF  x6F
04386:  MOVFF  16F,172
0438A:  MOVLB  0
0438C:  GOTO   3FE2
04390:  MOVFF  01,170
....................    if (content_size == -1)
04394:  MOVLB  1
04396:  MOVF   x70,W
04398:  SUBLW  FF
0439A:  BTFSC  FD8.2
0439C:  BRA    43A4
0439E:  MOVLB  0
043A0:  GOTO   43B2
043A4:  MOVLB  0
....................       return command;
043A6:  MOVLW  5F
043A8:  MOVWF  01
043AA:  MOVLW  01
043AC:  MOVWF  02
043AE:  GOTO   4484
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
043B2:  MOVLB  1
043B4:  MOVF   x6C,W
043B6:  SUBWF  x5E,W
043B8:  MOVWF  x71
....................    
....................    if (!check_crc(frame, receive_frame_size))
043BA:  MOVFF  16E,173
043BE:  MOVFF  16D,172
043C2:  MOVFF  171,174
043C6:  MOVLB  0
043C8:  GOTO   40E8
043CC:  MOVF   01,F
043CE:  BTFSS  FD8.2
043D0:  GOTO   43E0
....................       return command;
043D4:  MOVLW  5F
043D6:  MOVWF  01
043D8:  MOVLW  01
043DA:  MOVWF  02
043DC:  GOTO   4484
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
043E0:  MOVLB  1
043E2:  MOVF   x6D,W
043E4:  MOVWF  FE9
043E6:  MOVF   x6E,W
043E8:  MOVWF  FEA
043EA:  MOVF   FEF,W
043EC:  ANDLW  F0
043EE:  MOVWF  00
043F0:  SWAPF  00,W
043F2:  MOVWF  x72
043F4:  MOVLW  0F
043F6:  ANDWF  x72,F
043F8:  MOVFF  172,173
043FC:  MOVLB  0
043FE:  GOTO   41D2
04402:  MOVF   01,F
04404:  BTFSS  FD8.2
04406:  GOTO   4416
....................       return command;
0440A:  MOVLW  5F
0440C:  MOVWF  01
0440E:  MOVLW  01
04410:  MOVWF  02
04412:  GOTO   4484
.................... 
....................    command.frame_id = frame_id;
04416:  MOVFF  16F,15F
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0441A:  MOVLW  01
0441C:  MOVLB  1
0441E:  ADDWF  x6D,W
04420:  MOVWF  01
04422:  MOVLW  00
04424:  ADDWFC x6E,W
04426:  MOVWF  03
04428:  MOVF   01,W
0442A:  MOVWF  x72
0442C:  MOVFF  03,173
04430:  MOVLW  02
04432:  SUBWF  x71,W
04434:  MOVWF  x74
04436:  MOVLW  01
04438:  MOVWF  FEA
0443A:  MOVLW  62
0443C:  MOVWF  FE9
0443E:  MOVFF  173,FE2
04442:  MOVFF  172,FE1
04446:  MOVF   x74,W
04448:  MOVWF  01
0444A:  BTFSS  FD8.2
0444C:  BRA    4454
0444E:  MOVLB  0
04450:  GOTO   4460
04454:  MOVLB  0
04456:  MOVFF  FE6,FEE
0445A:  DECFSZ 01,F
0445C:  GOTO   4456
....................    command.size = receive_frame_size-2;
04460:  MOVLW  02
04462:  MOVLB  1
04464:  SUBWF  x71,W
04466:  MOVWF  x60
....................    command.is_exist = TRUE;
04468:  BSF    x61.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
0446A:  MOVLW  E6
0446C:  MOVWF  FF6
0446E:  MOVLW  02
04470:  MOVWF  FF7
04472:  MOVLW  00
04474:  MOVWF  FF8
04476:  MOVLB  0
04478:  CALL   1EB2
....................    return command;
0447C:  MOVLW  5F
0447E:  MOVWF  01
04480:  MOVLW  01
04482:  MOVWF  02
04484:  GOTO   B642 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03F3A:  MOVLB  1
03F3C:  CLRF   x75
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03F3E:  CLRF   x75
03F40:  MOVLB  0
03F42:  MOVLW  01
03F44:  MOVLB  1
03F46:  SUBWF  x74,W
03F48:  SUBWF  x75,W
03F4A:  BTFSS  FD8.0
03F4C:  BRA    3F54
03F4E:  MOVLB  0
03F50:  GOTO   3F8C
03F54:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03F56:  MOVLB  1
03F58:  MOVF   x75,W
03F5A:  ADDWF  x72,W
03F5C:  MOVWF  FE9
03F5E:  MOVLW  00
03F60:  ADDWFC x73,W
03F62:  MOVWF  FEA
03F64:  MOVF   FEF,W
03F66:  SUBLW  AA
03F68:  BTFSC  FD8.2
03F6A:  BRA    3F72
03F6C:  MOVLB  0
03F6E:  GOTO   3F82
03F72:  MOVLB  0
....................          return i+1;
03F74:  MOVLW  01
03F76:  MOVLB  1
03F78:  ADDWF  x75,W
03F7A:  MOVWF  01
03F7C:  MOVLB  0
03F7E:  GOTO   3FDE
03F82:  MOVLB  1
03F84:  INCF   x75,F
03F86:  MOVLB  0
03F88:  GOTO   3F42
....................    if (receive_signal[i] == SFD)
03F8C:  MOVLB  1
03F8E:  MOVF   x75,W
03F90:  ADDWF  x72,W
03F92:  MOVWF  FE9
03F94:  MOVLW  00
03F96:  ADDWFC x73,W
03F98:  MOVWF  FEA
03F9A:  MOVF   FEF,W
03F9C:  SUBLW  AA
03F9E:  BTFSC  FD8.2
03FA0:  BRA    3FA8
03FA2:  MOVLB  0
03FA4:  GOTO   3FC6
03FA8:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03FAA:  MOVLW  02
03FAC:  MOVWF  FF6
03FAE:  MOVLW  03
03FB0:  MOVWF  FF7
03FB2:  MOVLW  00
03FB4:  MOVWF  FF8
03FB6:  CALL   1EB2
....................       return -1;
03FBA:  MOVLW  FF
03FBC:  MOVWF  01
03FBE:  GOTO   3FDE
....................    }
03FC2:  GOTO   3FDE
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03FC6:  MOVLW  18
03FC8:  MOVWF  FF6
03FCA:  MOVLW  03
03FCC:  MOVWF  FF7
03FCE:  MOVLW  00
03FD0:  MOVWF  FF8
03FD2:  CALL   1EB2
....................       return -1;
03FD6:  MOVLW  FF
03FD8:  MOVWF  01
03FDA:  GOTO   3FDE
....................    }
03FDE:  GOTO   4340 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03FE2:  MOVLB  1
03FE4:  CLRF   x73
03FE6:  MOVLB  0
03FE8:  MOVLB  1
03FEA:  MOVF   x73,W
03FEC:  SUBLW  02
03FEE:  BTFSC  FD8.0
03FF0:  BRA    3FF8
03FF2:  MOVLB  0
03FF4:  GOTO   4056
03FF8:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03FFA:  BCF    FD8.0
03FFC:  MOVLB  1
03FFE:  RLCF   x73,W
04000:  CLRF   x75
04002:  MOVWF  x74
04004:  MOVLW  F6
04006:  ADDWF  x74,W
04008:  MOVWF  FE9
0400A:  MOVLW  00
0400C:  ADDWFC x75,W
0400E:  MOVWF  FEA
04010:  MOVF   FEF,W
04012:  SUBWF  x72,W
04014:  BTFSC  FD8.2
04016:  BRA    401E
04018:  MOVLB  0
0401A:  GOTO   404C
0401E:  MOVLB  0
....................          return frame_ids[i].length;
04020:  BCF    FD8.0
04022:  MOVLB  1
04024:  RLCF   x73,W
04026:  CLRF   x75
04028:  MOVWF  x74
0402A:  MOVLW  01
0402C:  ADDWF  x74,W
0402E:  MOVWF  01
04030:  MOVLW  00
04032:  ADDWFC x75,W
04034:  MOVWF  03
04036:  MOVF   01,W
04038:  ADDLW  F6
0403A:  MOVWF  FE9
0403C:  MOVLW  00
0403E:  ADDWFC 03,W
04040:  MOVWF  FEA
04042:  MOVF   FEF,W
04044:  MOVWF  01
04046:  MOVLB  0
04048:  GOTO   409A
0404C:  MOVLB  1
0404E:  INCF   x73,F
04050:  MOVLB  0
04052:  GOTO   3FE8
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
04056:  MOVLW  2A
04058:  MOVWF  FF6
0405A:  MOVLW  03
0405C:  MOVWF  FF7
0405E:  MOVLW  00
04060:  MOVWF  FF8
04062:  MOVLW  1F
04064:  MOVLB  9
04066:  MOVWF  x96
04068:  MOVLB  0
0406A:  CALL   1EE2
0406E:  MOVFF  172,996
04072:  MOVLW  37
04074:  MOVLB  9
04076:  MOVWF  x97
04078:  MOVLB  0
0407A:  CALL   20E0
0407E:  MOVLW  0D
04080:  MOVLB  A
04082:  MOVWF  x29
04084:  MOVLB  0
04086:  CALL   1E60
0408A:  MOVLW  0A
0408C:  MOVLB  A
0408E:  MOVWF  x29
04090:  MOVLB  0
04092:  CALL   1E60
....................    return -1;
04096:  MOVLW  FF
04098:  MOVWF  01
0409A:  GOTO   4390 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
040E8:  MOVLW  01
040EA:  MOVLB  1
040EC:  SUBWF  x74,W
040EE:  ADDWF  x72,W
040F0:  MOVWF  FE9
040F2:  MOVLW  00
040F4:  ADDWFC x73,W
040F6:  MOVWF  FEA
040F8:  MOVFF  FEF,175
040FC:  MOVLW  01
040FE:  SUBWF  x74,W
04100:  MOVWF  x77
04102:  MOVFF  173,9E7
04106:  MOVFF  172,9E6
0410A:  MOVFF  177,9E8
0410E:  MOVLB  0
04110:  CALL   409E
04114:  MOVFF  01,176
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
04118:  MOVLB  1
0411A:  MOVF   x76,W
0411C:  SUBWF  x75,W
0411E:  BTFSC  FD8.2
04120:  BRA    4128
04122:  MOVLB  0
04124:  GOTO   4136
04128:  MOVLB  0
....................       return TRUE;
0412A:  MOVLW  01
0412C:  MOVWF  01
0412E:  GOTO   41CE
04132:  GOTO   41CE
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
04136:  MOVLW  4E
04138:  MOVWF  FF6
0413A:  MOVLW  03
0413C:  MOVWF  FF7
0413E:  MOVLW  00
04140:  MOVWF  FF8
04142:  CALL   1EB2
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
04146:  MOVLW  60
04148:  MOVWF  FF6
0414A:  MOVLW  03
0414C:  MOVWF  FF7
0414E:  MOVLW  00
04150:  MOVWF  FF8
04152:  MOVLW  13
04154:  MOVLB  9
04156:  MOVWF  x96
04158:  MOVLB  0
0415A:  CALL   1EE2
0415E:  MOVFF  175,996
04162:  MOVLW  37
04164:  MOVLB  9
04166:  MOVWF  x97
04168:  MOVLB  0
0416A:  CALL   20E0
0416E:  MOVLW  0D
04170:  MOVLB  A
04172:  MOVWF  x29
04174:  MOVLB  0
04176:  CALL   1E60
0417A:  MOVLW  0A
0417C:  MOVLB  A
0417E:  MOVWF  x29
04180:  MOVLB  0
04182:  CALL   1E60
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
04186:  MOVLW  78
04188:  MOVWF  FF6
0418A:  MOVLW  03
0418C:  MOVWF  FF7
0418E:  MOVLW  00
04190:  MOVWF  FF8
04192:  MOVLW  13
04194:  MOVLB  9
04196:  MOVWF  x96
04198:  MOVLB  0
0419A:  CALL   1EE2
0419E:  MOVFF  176,996
041A2:  MOVLW  37
041A4:  MOVLB  9
041A6:  MOVWF  x97
041A8:  MOVLB  0
041AA:  CALL   20E0
041AE:  MOVLW  0D
041B0:  MOVLB  A
041B2:  MOVWF  x29
041B4:  MOVLB  0
041B6:  CALL   1E60
041BA:  MOVLW  0A
041BC:  MOVLB  A
041BE:  MOVWF  x29
041C0:  MOVLB  0
041C2:  CALL   1E60
....................       return FALSE;
041C6:  MOVLW  00
041C8:  MOVWF  01
041CA:  GOTO   41CE
....................    }
041CE:  GOTO   43CC (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
041D2:  MOVLB  1
041D4:  MOVF   x73,W
041D6:  SUBLW  0C
041D8:  BTFSC  FD8.2
041DA:  BRA    41E2
041DC:  MOVLB  0
041DE:  GOTO   41F0
041E2:  MOVLB  0
....................       return TRUE;
041E4:  MOVLW  01
041E6:  MOVWF  01
041E8:  GOTO   4288
041EC:  GOTO   4288
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
041F0:  MOVLW  90
041F2:  MOVWF  FF6
041F4:  MOVLW  03
041F6:  MOVWF  FF7
041F8:  MOVLW  00
041FA:  MOVWF  FF8
041FC:  CALL   1EB2
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
04200:  MOVLW  B2
04202:  MOVWF  FF6
04204:  MOVLW  03
04206:  MOVWF  FF7
04208:  MOVLW  00
0420A:  MOVWF  FF8
0420C:  MOVLW  13
0420E:  MOVLB  9
04210:  MOVWF  x96
04212:  MOVLB  0
04214:  CALL   1EE2
04218:  MOVFF  173,996
0421C:  MOVLW  37
0421E:  MOVLB  9
04220:  MOVWF  x97
04222:  MOVLB  0
04224:  CALL   20E0
04228:  MOVLW  0D
0422A:  MOVLB  A
0422C:  MOVWF  x29
0422E:  MOVLB  0
04230:  CALL   1E60
04234:  MOVLW  0A
04236:  MOVLB  A
04238:  MOVWF  x29
0423A:  MOVLB  0
0423C:  CALL   1E60
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
04240:  MOVLW  CA
04242:  MOVWF  FF6
04244:  MOVLW  03
04246:  MOVWF  FF7
04248:  MOVLW  00
0424A:  MOVWF  FF8
0424C:  MOVLW  13
0424E:  MOVLB  9
04250:  MOVWF  x96
04252:  MOVLB  0
04254:  CALL   1EE2
04258:  MOVLW  0C
0425A:  MOVLB  9
0425C:  MOVWF  x96
0425E:  MOVLW  37
04260:  MOVWF  x97
04262:  MOVLB  0
04264:  CALL   20E0
04268:  MOVLW  0D
0426A:  MOVLB  A
0426C:  MOVWF  x29
0426E:  MOVLB  0
04270:  CALL   1E60
04274:  MOVLW  0A
04276:  MOVLB  A
04278:  MOVWF  x29
0427A:  MOVLB  0
0427C:  CALL   1E60
....................       return FALSE;  
04280:  MOVLW  00
04282:  MOVWF  01
04284:  GOTO   4288
....................    }
04288:  GOTO   4402 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
045B2:  MOVLW  AA
045B4:  MOVLB  1
045B6:  MOVWF  x62
....................    data[1] = (BOSS_PIC << 4) | frame_id;
045B8:  MOVF   x5E,W
045BA:  IORLW  50
045BC:  MOVWF  x63
....................    memcpy(&data[2], content, size);
045BE:  MOVLW  01
045C0:  MOVWF  FEA
045C2:  MOVLW  64
045C4:  MOVWF  FE9
045C6:  MOVFF  160,FE2
045CA:  MOVFF  15F,FE1
045CE:  MOVF   x61,W
045D0:  MOVWF  01
045D2:  BTFSS  FD8.2
045D4:  BRA    45DC
045D6:  MOVLB  0
045D8:  GOTO   45E8
045DC:  MOVLB  0
045DE:  MOVFF  FE6,FEE
045E2:  DECFSZ 01,F
045E4:  GOTO   45DE
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
045E8:  MOVLW  02
045EA:  MOVLB  1
045EC:  ADDWF  x61,W
045EE:  MOVWF  x72
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
045F0:  CLRF   03
045F2:  MOVF   x72,W
045F4:  ADDLW  62
045F6:  MOVWF  01
045F8:  MOVLW  01
045FA:  ADDWFC 03,F
045FC:  MOVF   01,W
045FE:  MOVWF  x74
04600:  MOVFF  03,175
04604:  MOVLW  01
04606:  SUBWF  x72,W
04608:  MOVWF  x76
0460A:  MOVLW  01
0460C:  MOVLB  9
0460E:  MOVWF  xE7
04610:  MOVLW  63
04612:  MOVWF  xE6
04614:  MOVFF  176,9E8
04618:  MOVLB  0
0461A:  CALL   409E
0461E:  MOVFF  175,FEA
04622:  MOVFF  174,FE9
04626:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0462A:  MOVLW  01
0462C:  MOVLB  1
0462E:  ADDWF  x72,W
04630:  MOVWF  x73
....................    
....................    transmit(data, data_size);
04632:  MOVLW  01
04634:  MOVWF  x75
04636:  MOVLW  62
04638:  MOVWF  x74
0463A:  MOVFF  173,176
0463E:  MOVLB  0
04640:  GOTO   44FA
04644:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
044FA:  MOVLB  1
044FC:  CLRF   x77
044FE:  MOVLB  0
04500:  MOVLB  1
04502:  MOVF   x76,W
04504:  SUBWF  x77,W
04506:  BTFSS  FD8.0
04508:  BRA    4510
0450A:  MOVLB  0
0450C:  GOTO   4536
04510:  MOVLB  0
....................       fputc(data[i], BOSS);
04512:  MOVLB  1
04514:  MOVF   x77,W
04516:  ADDWF  x74,W
04518:  MOVWF  FE9
0451A:  MOVLW  00
0451C:  ADDWFC x75,W
0451E:  MOVWF  FEA
04520:  MOVFF  FEF,179
04524:  MOVF   x79,W
04526:  MOVLB  0
04528:  GOTO   44EA
0452C:  MOVLB  1
0452E:  INCF   x77,F
04530:  MOVLB  0
04532:  GOTO   4500
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04536:  MOVLW  E2
04538:  MOVWF  FF6
0453A:  MOVLW  03
0453C:  MOVWF  FF7
0453E:  MOVLW  00
04540:  MOVWF  FF8
04542:  CALL   1EB2
....................    for(int i = 0; i < data_size; i++)
04546:  MOVLB  1
04548:  CLRF   x78
0454A:  MOVLB  0
0454C:  MOVLB  1
0454E:  MOVF   x76,W
04550:  SUBWF  x78,W
04552:  BTFSS  FD8.0
04554:  BRA    455C
04556:  MOVLB  0
04558:  GOTO   4596
0455C:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0455E:  MOVLB  1
04560:  MOVF   x78,W
04562:  ADDWF  x74,W
04564:  MOVWF  FE9
04566:  MOVLW  00
04568:  ADDWFC x75,W
0456A:  MOVWF  FEA
0456C:  MOVFF  FEF,179
04570:  MOVFF  179,996
04574:  MOVLW  37
04576:  MOVLB  9
04578:  MOVWF  x97
0457A:  MOVLB  0
0457C:  CALL   20E0
04580:  MOVLW  20
04582:  MOVLB  A
04584:  MOVWF  x29
04586:  MOVLB  0
04588:  CALL   1E60
0458C:  MOVLB  1
0458E:  INCF   x78,F
04590:  MOVLB  0
04592:  GOTO   454C
....................    fprintf(PC, "\r\n");
04596:  MOVLW  0D
04598:  MOVLB  A
0459A:  MOVWF  x29
0459C:  MOVLB  0
0459E:  CALL   1E60
045A2:  MOVLW  0A
045A4:  MOVLB  A
045A6:  MOVWF  x29
045A8:  MOVLB  0
045AA:  CALL   1E60
045AE:  GOTO   4644 (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04646:  MOVLW  0F
04648:  MOVLB  1
0464A:  MOVWF  x5E
0464C:  CLRF   x60
0464E:  CLRF   x5F
04650:  CLRF   x61
04652:  MOVLB  0
04654:  CALL   45B2
04658:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
08FE6:  MOVLW  03
08FE8:  MOVLB  1
08FEA:  MOVWF  x5E
08FEC:  CLRF   x60
08FEE:  MOVLW  48
08FF0:  MOVWF  x5F
08FF2:  MOVLW  04
08FF4:  MOVWF  x61
08FF6:  MOVLB  0
08FF8:  CALL   45B2
08FFC:  GOTO   9024 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"               // 同じフォルダのヘッダー
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... /*
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... */
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
....................     output_high(CONNECT_CIGS1);
....................     output_low(EN_NPWR); // Enable power to CIGS
....................     delay_us(100); // wait for the CIGS to stabilize
....................     fprintf(PC, "step, voltage, current\r\n");
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     delay_ms(100); // wait for the DAC to stabilize
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
....................         delay_ms(1); // wait for the ADC to stabilize
....................     }
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     fprintf(PC, "Start ADC TEST\r\n");
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_CURR);
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_AMP);
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_VREF);
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... /*
.................... void add_smf_queue_data()
.................... {
....................     SmfDataStruct smf_data;
....................     smf_data.type = SMF_DATA_TYPE_CIGS;
....................     smf_data.length = PACKET_SIZE;
....................     memcpy(smf_data.data, packetdata, PACKET_SIZE);
....................     enqueue_smf_data(&smf_data);
.................... }
.................... */
.................... void add_smf_queue_piclog()
.................... {}
.................... 
.................... void convert_datas(MEASUREMENT_DATA measured_data, )
.................... {
.................... 
.................... }
.................... 
.................... void sweep_with_threshold(unsigned int16 curr_threshold, unsigned int16 pd_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, "Start SWEEP with threshold\r\n");
*
071CA:  MOVLW  14
071CC:  MOVWF  FF6
071CE:  MOVLW  07
071D0:  MOVWF  FF7
071D2:  MOVLW  00
071D4:  MOVWF  FF8
071D6:  CALL   1EB2
....................    
....................     // Enable both CIGS ports
....................     output_high(CONNECT_CIGS1);
071DA:  BCF    F94.0
071DC:  BSF    F8B.0
....................     output_high(CONNECT_CIGS2);
071DE:  BCF    F94.5
071E0:  BSF    F8B.5
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     SWEEP_CONFIG port1 = {0};
071E2:  MOVLB  1
071E4:  CLRF   x81
071E6:  CLRF   x82
071E8:  CLRF   x83
071EA:  CLRF   x84
071EC:  CLRF   x85
071EE:  CLRF   x86
071F0:  CLRF   x87
071F2:  CLRF   x88
071F4:  CLRF   x89
071F6:  CLRF   x8A
071F8:  CLRF   x8B
071FA:  CLRF   x8C
071FC:  CLRF   x8D
071FE:  CLRF   x8E
07200:  CLRF   x8F
07202:  CLRF   x90
07204:  CLRF   x91
07206:  CLRF   x92
07208:  CLRF   x93
0720A:  CLRF   x94
0720C:  CLRF   x95
0720E:  CLRF   x96
07210:  CLRF   x97
07212:  CLRF   x98
07214:  CLRF   x99
07216:  CLRF   x9A
07218:  CLRF   x9B
0721A:  CLRF   x9C
0721C:  CLRF   x9D
0721E:  CLRF   x9E
07220:  CLRF   x9F
07222:  CLRF   xA0
07224:  CLRF   xA1
07226:  CLRF   xA2
07228:  CLRF   xA3
0722A:  CLRF   xA4
0722C:  CLRF   xA5
0722E:  CLRF   xA6
07230:  CLRF   xA7
07232:  CLRF   xA8
07234:  CLRF   xA9
07236:  CLRF   xAA
07238:  CLRF   xAB
0723A:  CLRF   xAC
0723C:  CLRF   xAD
0723E:  CLRF   xAE
07240:  CLRF   xAF
07242:  CLRF   xB0
07244:  CLRF   xB1
07246:  CLRF   xB2
07248:  CLRF   xB3
0724A:  CLRF   xB4
0724C:  CLRF   xB5
0724E:  CLRF   xB6
07250:  CLRF   xB7
07252:  CLRF   xB8
07254:  CLRF   xB9
07256:  CLRF   xBA
07258:  CLRF   xBB
0725A:  CLRF   xBC
0725C:  CLRF   xBD
0725E:  CLRF   xBE
07260:  CLRF   xBF
07262:  CLRF   xC0
07264:  CLRF   xC1
07266:  CLRF   xC2
07268:  CLRF   xC3
0726A:  CLRF   xC4
0726C:  CLRF   xC5
0726E:  CLRF   xC6
07270:  CLRF   xC7
07272:  CLRF   xC8
07274:  CLRF   xC9
07276:  CLRF   xCA
07278:  CLRF   xCB
0727A:  CLRF   xCC
0727C:  CLRF   xCD
0727E:  CLRF   xCE
07280:  CLRF   xCF
07282:  CLRF   xD0
07284:  CLRF   xD1
07286:  CLRF   xD2
07288:  CLRF   xD3
0728A:  CLRF   xD4
0728C:  CLRF   xD5
0728E:  CLRF   xD6
07290:  CLRF   xD7
07292:  CLRF   xD8
07294:  CLRF   xD9
07296:  CLRF   xDA
07298:  CLRF   xDB
0729A:  CLRF   xDC
0729C:  CLRF   xDD
0729E:  CLRF   xDE
072A0:  CLRF   xDF
072A2:  CLRF   xE0
072A4:  CLRF   xE1
072A6:  CLRF   xE2
072A8:  CLRF   xE3
072AA:  CLRF   xE4
072AC:  CLRF   xE5
072AE:  CLRF   xE6
072B0:  CLRF   xE7
072B2:  CLRF   xE8
072B4:  CLRF   xE9
072B6:  CLRF   xEA
072B8:  CLRF   xEB
072BA:  CLRF   xEC
072BC:  CLRF   xED
072BE:  CLRF   xEE
072C0:  CLRF   xEF
072C2:  CLRF   xF0
072C4:  CLRF   xF1
072C6:  CLRF   xF2
072C8:  CLRF   xF3
072CA:  CLRF   xF4
072CC:  CLRF   xF5
072CE:  CLRF   xF6
072D0:  CLRF   xF7
072D2:  CLRF   xF8
072D4:  CLRF   xF9
072D6:  CLRF   xFA
072D8:  CLRF   xFB
072DA:  CLRF   xFC
072DC:  CLRF   xFD
072DE:  CLRF   xFE
072E0:  CLRF   xFF
072E2:  MOVLB  2
072E4:  CLRF   x00
072E6:  CLRF   x01
072E8:  CLRF   x02
072EA:  CLRF   x03
072EC:  CLRF   x04
072EE:  CLRF   x05
072F0:  CLRF   x06
072F2:  CLRF   x07
072F4:  CLRF   x08
072F6:  CLRF   x09
072F8:  CLRF   x0A
072FA:  CLRF   x0B
072FC:  CLRF   x0C
072FE:  CLRF   x0D
07300:  CLRF   x0E
07302:  CLRF   x0F
07304:  CLRF   x10
07306:  CLRF   x11
07308:  CLRF   x12
0730A:  CLRF   x13
0730C:  CLRF   x14
0730E:  CLRF   x15
07310:  CLRF   x16
07312:  CLRF   x17
07314:  CLRF   x18
07316:  CLRF   x19
07318:  CLRF   x1A
0731A:  CLRF   x1B
0731C:  CLRF   x1C
0731E:  CLRF   x1D
07320:  CLRF   x1E
07322:  CLRF   x1F
07324:  CLRF   x20
07326:  CLRF   x21
07328:  CLRF   x22
0732A:  CLRF   x23
0732C:  CLRF   x24
0732E:  CLRF   x25
07330:  CLRF   x26
07332:  CLRF   x27
07334:  CLRF   x28
07336:  CLRF   x29
07338:  CLRF   x2A
0733A:  CLRF   x2B
0733C:  CLRF   x2C
0733E:  CLRF   x2D
07340:  CLRF   x2E
07342:  CLRF   x2F
07344:  CLRF   x30
07346:  CLRF   x31
07348:  CLRF   x32
0734A:  CLRF   x33
0734C:  CLRF   x34
0734E:  CLRF   x35
07350:  CLRF   x36
07352:  CLRF   x37
07354:  CLRF   x38
07356:  CLRF   x39
07358:  CLRF   x3A
0735A:  CLRF   x3B
0735C:  CLRF   x3C
0735E:  CLRF   x3D
07360:  CLRF   x3E
07362:  CLRF   x3F
07364:  CLRF   x40
07366:  CLRF   x41
07368:  CLRF   x42
0736A:  CLRF   x43
0736C:  CLRF   x44
0736E:  CLRF   x45
07370:  CLRF   x46
07372:  CLRF   x47
07374:  CLRF   x48
07376:  CLRF   x49
07378:  CLRF   x4A
0737A:  CLRF   x4B
0737C:  CLRF   x4C
0737E:  CLRF   x4D
07380:  CLRF   x4E
07382:  CLRF   x4F
07384:  CLRF   x50
07386:  CLRF   x51
07388:  CLRF   x52
0738A:  CLRF   x53
0738C:  CLRF   x54
0738E:  CLRF   x55
07390:  CLRF   x56
07392:  CLRF   x57
07394:  CLRF   x58
07396:  CLRF   x59
07398:  CLRF   x5A
0739A:  CLRF   x5B
0739C:  CLRF   x5C
0739E:  CLRF   x5D
073A0:  CLRF   x5E
073A2:  CLRF   x5F
073A4:  CLRF   x60
073A6:  CLRF   x61
073A8:  CLRF   x62
073AA:  CLRF   x63
073AC:  CLRF   x64
073AE:  CLRF   x65
073B0:  CLRF   x66
073B2:  CLRF   x67
073B4:  CLRF   x68
073B6:  CLRF   x69
073B8:  CLRF   x6A
073BA:  CLRF   x6B
073BC:  CLRF   x6C
073BE:  CLRF   x6D
073C0:  CLRF   x6E
073C2:  CLRF   x6F
073C4:  CLRF   x70
073C6:  CLRF   x71
073C8:  CLRF   x72
073CA:  CLRF   x73
073CC:  CLRF   x74
073CE:  CLRF   x75
073D0:  CLRF   x76
073D2:  CLRF   x77
073D4:  CLRF   x78
073D6:  CLRF   x79
073D8:  CLRF   x7A
073DA:  CLRF   x7B
073DC:  CLRF   x7C
073DE:  CLRF   x7D
073E0:  CLRF   x7E
073E2:  CLRF   x7F
073E4:  CLRF   x80
073E6:  CLRF   x81
073E8:  CLRF   x82
073EA:  CLRF   x83
073EC:  CLRF   x84
073EE:  CLRF   x85
073F0:  CLRF   x86
073F2:  CLRF   x87
073F4:  CLRF   x88
073F6:  CLRF   x89
073F8:  CLRF   x8A
073FA:  CLRF   x8B
073FC:  CLRF   x8C
073FE:  CLRF   x8D
07400:  CLRF   x8E
07402:  CLRF   x8F
07404:  CLRF   x90
07406:  CLRF   x91
07408:  CLRF   x92
0740A:  CLRF   x93
0740C:  CLRF   x94
0740E:  CLRF   x95
07410:  CLRF   x96
07412:  CLRF   x97
07414:  CLRF   x98
07416:  CLRF   x99
07418:  CLRF   x9A
0741A:  CLRF   x9B
0741C:  CLRF   x9C
0741E:  CLRF   x9D
07420:  CLRF   x9E
07422:  CLRF   x9F
07424:  CLRF   xA0
07426:  CLRF   xA1
07428:  CLRF   xA2
0742A:  CLRF   xA3
0742C:  CLRF   xA4
0742E:  CLRF   xA5
07430:  CLRF   xA6
07432:  CLRF   xA7
07434:  CLRF   xA8
07436:  CLRF   xA9
07438:  CLRF   xAA
0743A:  CLRF   xAB
0743C:  CLRF   xAC
0743E:  CLRF   xAD
07440:  CLRF   xAE
07442:  CLRF   xAF
07444:  CLRF   xB0
07446:  CLRF   xB1
07448:  CLRF   xB2
0744A:  CLRF   xB3
0744C:  CLRF   xB4
0744E:  CLRF   xB5
07450:  CLRF   xB6
07452:  CLRF   xB7
07454:  CLRF   xB8
07456:  CLRF   xB9
07458:  CLRF   xBA
0745A:  CLRF   xBB
0745C:  CLRF   xBC
0745E:  CLRF   xBD
07460:  CLRF   xBE
07462:  CLRF   xBF
07464:  CLRF   xC0
07466:  CLRF   xC1
07468:  CLRF   xC2
0746A:  CLRF   xC3
0746C:  CLRF   xC4
0746E:  CLRF   xC5
07470:  CLRF   xC6
07472:  CLRF   xC7
07474:  CLRF   xC8
07476:  CLRF   xC9
07478:  CLRF   xCA
0747A:  CLRF   xCB
0747C:  CLRF   xCC
0747E:  CLRF   xCD
07480:  CLRF   xCE
07482:  CLRF   xCF
07484:  CLRF   xD0
07486:  CLRF   xD1
07488:  CLRF   xD2
0748A:  CLRF   xD3
0748C:  CLRF   xD4
0748E:  CLRF   xD5
07490:  CLRF   xD6
07492:  CLRF   xD7
07494:  CLRF   xD8
07496:  CLRF   xD9
07498:  CLRF   xDA
0749A:  CLRF   xDB
0749C:  CLRF   xDC
0749E:  CLRF   xDD
074A0:  CLRF   xDE
074A2:  CLRF   xDF
074A4:  CLRF   xE0
074A6:  CLRF   xE1
074A8:  CLRF   xE2
074AA:  CLRF   xE3
074AC:  CLRF   xE4
074AE:  CLRF   xE5
074B0:  CLRF   xE6
074B2:  CLRF   xE7
074B4:  CLRF   xE8
074B6:  CLRF   xE9
074B8:  CLRF   xEA
074BA:  CLRF   xEB
074BC:  CLRF   xEC
074BE:  CLRF   xED
074C0:  CLRF   xEE
074C2:  CLRF   xEF
074C4:  CLRF   xF0
074C6:  CLRF   xF1
074C8:  CLRF   xF2
074CA:  CLRF   xF3
074CC:  CLRF   xF4
074CE:  CLRF   xF5
074D0:  CLRF   xF6
074D2:  CLRF   xF7
074D4:  CLRF   xF8
074D6:  CLRF   xF9
074D8:  CLRF   xFA
074DA:  CLRF   xFB
074DC:  CLRF   xFC
074DE:  CLRF   xFD
074E0:  CLRF   xFE
074E2:  CLRF   xFF
074E4:  MOVLB  3
074E6:  CLRF   x00
074E8:  CLRF   x01
074EA:  CLRF   x02
074EC:  CLRF   x03
074EE:  CLRF   x04
074F0:  CLRF   x05
074F2:  CLRF   x06
074F4:  CLRF   x07
074F6:  CLRF   x08
074F8:  CLRF   x09
074FA:  CLRF   x0A
074FC:  CLRF   x0B
074FE:  CLRF   x0C
07500:  CLRF   x0D
07502:  CLRF   x0E
07504:  CLRF   x0F
07506:  CLRF   x10
07508:  CLRF   x11
0750A:  CLRF   x12
0750C:  CLRF   x13
0750E:  CLRF   x14
07510:  CLRF   x15
07512:  CLRF   x16
07514:  CLRF   x17
07516:  CLRF   x18
07518:  CLRF   x19
0751A:  CLRF   x1A
0751C:  CLRF   x1B
0751E:  CLRF   x1C
07520:  CLRF   x1D
07522:  CLRF   x1E
07524:  CLRF   x1F
07526:  CLRF   x20
07528:  CLRF   x21
0752A:  CLRF   x22
0752C:  CLRF   x23
0752E:  CLRF   x24
07530:  CLRF   x25
07532:  CLRF   x26
07534:  CLRF   x27
07536:  CLRF   x28
07538:  CLRF   x29
0753A:  CLRF   x2A
0753C:  CLRF   x2B
0753E:  CLRF   x2C
07540:  CLRF   x2D
07542:  CLRF   x2E
07544:  CLRF   x2F
07546:  CLRF   x30
07548:  CLRF   x31
0754A:  CLRF   x32
0754C:  CLRF   x33
0754E:  CLRF   x34
07550:  CLRF   x35
07552:  CLRF   x36
07554:  CLRF   x37
07556:  CLRF   x38
07558:  CLRF   x39
0755A:  CLRF   x3A
0755C:  CLRF   x3B
0755E:  CLRF   x3C
07560:  CLRF   x3D
07562:  CLRF   x3E
07564:  CLRF   x3F
07566:  CLRF   x40
07568:  CLRF   x41
0756A:  CLRF   x42
0756C:  CLRF   x43
0756E:  CLRF   x44
07570:  CLRF   x45
07572:  CLRF   x46
07574:  CLRF   x47
07576:  CLRF   x48
07578:  CLRF   x49
0757A:  CLRF   x4A
0757C:  CLRF   x4B
0757E:  CLRF   x4C
07580:  CLRF   x4D
07582:  CLRF   x4E
07584:  CLRF   x4F
07586:  CLRF   x50
07588:  CLRF   x51
0758A:  CLRF   x52
0758C:  CLRF   x53
0758E:  CLRF   x54
07590:  CLRF   x55
07592:  CLRF   x56
07594:  CLRF   x57
07596:  CLRF   x58
07598:  CLRF   x59
0759A:  CLRF   x5A
0759C:  CLRF   x5B
0759E:  CLRF   x5C
075A0:  CLRF   x5D
075A2:  CLRF   x5E
075A4:  CLRF   x5F
075A6:  CLRF   x60
075A8:  CLRF   x61
075AA:  CLRF   x62
075AC:  CLRF   x63
075AE:  CLRF   x64
075B0:  CLRF   x65
075B2:  CLRF   x66
075B4:  CLRF   x67
075B6:  CLRF   x68
075B8:  CLRF   x69
075BA:  CLRF   x6A
075BC:  CLRF   x6B
075BE:  CLRF   x6C
075C0:  CLRF   x6D
075C2:  CLRF   x6E
075C4:  CLRF   x6F
075C6:  CLRF   x70
075C8:  CLRF   x71
075CA:  CLRF   x72
075CC:  CLRF   x73
075CE:  CLRF   x74
075D0:  CLRF   x75
075D2:  CLRF   x76
075D4:  CLRF   x77
075D6:  CLRF   x78
075D8:  CLRF   x79
075DA:  CLRF   x7A
075DC:  CLRF   x7B
075DE:  CLRF   x7C
075E0:  CLRF   x7D
075E2:  CLRF   x7E
075E4:  CLRF   x7F
075E6:  CLRF   x80
075E8:  CLRF   x81
075EA:  CLRF   x82
075EC:  CLRF   x83
075EE:  CLRF   x84
075F0:  CLRF   x85
075F2:  CLRF   x86
075F4:  CLRF   x87
075F6:  CLRF   x88
075F8:  CLRF   x89
075FA:  CLRF   x8A
075FC:  CLRF   x8B
075FE:  CLRF   x8C
07600:  CLRF   x8D
07602:  CLRF   x8E
07604:  CLRF   x8F
07606:  CLRF   x90
07608:  CLRF   x91
0760A:  CLRF   x92
0760C:  CLRF   x93
0760E:  CLRF   x94
07610:  CLRF   x95
07612:  CLRF   x96
07614:  CLRF   x97
07616:  CLRF   x98
07618:  CLRF   x99
0761A:  CLRF   x9A
0761C:  CLRF   x9B
0761E:  CLRF   x9C
07620:  CLRF   x9D
07622:  CLRF   x9E
07624:  CLRF   x9F
07626:  CLRF   xA0
07628:  CLRF   xA1
0762A:  CLRF   xA2
0762C:  CLRF   xA3
0762E:  CLRF   xA4
07630:  CLRF   xA5
07632:  CLRF   xA6
07634:  CLRF   xA7
07636:  CLRF   xA8
07638:  CLRF   xA9
0763A:  CLRF   xAA
0763C:  CLRF   xAB
0763E:  CLRF   xAC
07640:  CLRF   xAD
07642:  CLRF   xAE
07644:  CLRF   xAF
07646:  CLRF   xB0
07648:  CLRF   xB1
0764A:  CLRF   xB2
0764C:  CLRF   xB3
0764E:  CLRF   xB4
07650:  CLRF   xB5
07652:  CLRF   xB6
07654:  CLRF   xB7
07656:  CLRF   xB8
07658:  CLRF   xB9
0765A:  CLRF   xBA
0765C:  CLRF   xBB
0765E:  CLRF   xBC
07660:  CLRF   xBD
07662:  CLRF   xBE
07664:  CLRF   xBF
07666:  CLRF   xC0
07668:  CLRF   xC1
0766A:  CLRF   xC2
0766C:  CLRF   xC3
0766E:  CLRF   xC4
07670:  CLRF   xC5
07672:  CLRF   xC6
07674:  CLRF   xC7
07676:  CLRF   xC8
07678:  CLRF   xC9
0767A:  CLRF   xCA
0767C:  CLRF   xCB
0767E:  CLRF   xCC
07680:  CLRF   xCD
07682:  CLRF   xCE
07684:  CLRF   xCF
07686:  CLRF   xD0
07688:  CLRF   xD1
0768A:  CLRF   xD2
0768C:  CLRF   xD3
0768E:  CLRF   xD4
07690:  CLRF   xD5
07692:  CLRF   xD6
07694:  CLRF   xD7
07696:  CLRF   xD8
07698:  CLRF   xD9
0769A:  CLRF   xDA
0769C:  CLRF   xDB
0769E:  CLRF   xDC
076A0:  CLRF   xDD
076A2:  CLRF   xDE
076A4:  CLRF   xDF
076A6:  CLRF   xE0
076A8:  CLRF   xE1
076AA:  CLRF   xE2
076AC:  CLRF   xE3
076AE:  CLRF   xE4
076B0:  CLRF   xE5
076B2:  CLRF   xE6
076B4:  CLRF   xE7
076B6:  CLRF   xE8
076B8:  CLRF   xE9
076BA:  CLRF   xEA
076BC:  CLRF   xEB
076BE:  CLRF   xEC
076C0:  CLRF   xED
076C2:  CLRF   xEE
076C4:  CLRF   xEF
076C6:  CLRF   xF0
076C8:  CLRF   xF1
076CA:  CLRF   xF2
076CC:  CLRF   xF3
076CE:  CLRF   xF4
076D0:  CLRF   xF5
076D2:  CLRF   xF6
076D4:  CLRF   xF7
076D6:  CLRF   xF8
076D8:  CLRF   xF9
076DA:  CLRF   xFA
076DC:  CLRF   xFB
076DE:  CLRF   xFC
076E0:  CLRF   xFD
076E2:  CLRF   xFE
076E4:  CLRF   xFF
076E6:  MOVLB  4
076E8:  CLRF   x00
076EA:  CLRF   x01
076EC:  CLRF   x02
076EE:  CLRF   x03
076F0:  CLRF   x04
076F2:  CLRF   x05
076F4:  CLRF   x06
076F6:  CLRF   x07
076F8:  CLRF   x08
076FA:  CLRF   x09
076FC:  CLRF   x0A
076FE:  CLRF   x0B
07700:  CLRF   x0C
07702:  CLRF   x0D
07704:  CLRF   x0E
07706:  CLRF   x0F
07708:  CLRF   x10
0770A:  CLRF   x11
0770C:  CLRF   x12
0770E:  CLRF   x13
07710:  CLRF   x14
07712:  CLRF   x15
07714:  CLRF   x16
07716:  CLRF   x17
07718:  CLRF   x18
0771A:  CLRF   x19
0771C:  CLRF   x1A
0771E:  CLRF   x1B
07720:  CLRF   x1C
07722:  CLRF   x1D
07724:  CLRF   x1E
07726:  CLRF   x1F
07728:  CLRF   x20
0772A:  CLRF   x21
0772C:  CLRF   x22
0772E:  CLRF   x23
07730:  CLRF   x24
07732:  CLRF   x25
07734:  CLRF   x26
07736:  CLRF   x27
07738:  CLRF   x28
0773A:  CLRF   x29
0773C:  CLRF   x2A
0773E:  CLRF   x2B
07740:  CLRF   x2C
07742:  CLRF   x2D
07744:  CLRF   x2E
07746:  CLRF   x2F
07748:  CLRF   x30
0774A:  CLRF   x31
0774C:  CLRF   x32
0774E:  CLRF   x33
07750:  CLRF   x34
07752:  CLRF   x35
07754:  CLRF   x36
07756:  CLRF   x37
07758:  CLRF   x38
0775A:  CLRF   x39
0775C:  CLRF   x3A
0775E:  CLRF   x3B
07760:  CLRF   x3C
07762:  CLRF   x3D
07764:  CLRF   x3E
07766:  CLRF   x3F
07768:  CLRF   x40
0776A:  CLRF   x41
0776C:  CLRF   x42
0776E:  CLRF   x43
07770:  CLRF   x44
07772:  CLRF   x45
07774:  CLRF   x46
07776:  CLRF   x47
07778:  CLRF   x48
0777A:  CLRF   x49
0777C:  CLRF   x4A
0777E:  CLRF   x4B
07780:  CLRF   x4C
07782:  CLRF   x4D
07784:  CLRF   x4E
07786:  CLRF   x4F
07788:  CLRF   x50
0778A:  CLRF   x51
0778C:  CLRF   x52
0778E:  CLRF   x53
07790:  CLRF   x54
07792:  CLRF   x55
07794:  CLRF   x56
07796:  CLRF   x57
07798:  CLRF   x58
0779A:  CLRF   x59
0779C:  CLRF   x5A
0779E:  CLRF   x5B
077A0:  CLRF   x5C
077A2:  CLRF   x5D
077A4:  CLRF   x5E
077A6:  CLRF   x5F
077A8:  CLRF   x60
077AA:  CLRF   x61
077AC:  CLRF   x62
077AE:  CLRF   x63
077B0:  CLRF   x64
077B2:  CLRF   x65
077B4:  CLRF   x66
077B6:  CLRF   x67
077B8:  CLRF   x68
077BA:  CLRF   x69
077BC:  CLRF   x6A
077BE:  CLRF   x6B
077C0:  CLRF   x6C
077C2:  CLRF   x6D
077C4:  CLRF   x6E
077C6:  CLRF   x6F
077C8:  CLRF   x70
077CA:  CLRF   x71
077CC:  CLRF   x72
077CE:  CLRF   x73
077D0:  CLRF   x74
077D2:  CLRF   x75
077D4:  CLRF   x76
077D6:  CLRF   x77
077D8:  CLRF   x78
077DA:  CLRF   x79
077DC:  CLRF   x7A
077DE:  CLRF   x7B
077E0:  CLRF   x7C
077E2:  CLRF   x7D
077E4:  CLRF   x7E
077E6:  CLRF   x7F
077E8:  CLRF   x80
077EA:  CLRF   x81
077EC:  CLRF   x82
077EE:  CLRF   x83
077F0:  CLRF   x84
077F2:  CLRF   x85
077F4:  CLRF   x86
077F6:  CLRF   x87
077F8:  CLRF   x88
077FA:  CLRF   x89
077FC:  CLRF   x8A
077FE:  CLRF   x8B
07800:  CLRF   x8C
07802:  CLRF   x8D
07804:  CLRF   x8E
07806:  CLRF   x8F
07808:  CLRF   x90
0780A:  CLRF   x91
0780C:  CLRF   x92
0780E:  CLRF   x93
07810:  CLRF   x94
07812:  CLRF   x95
07814:  CLRF   x96
07816:  CLRF   x97
07818:  CLRF   x98
0781A:  CLRF   x99
0781C:  CLRF   x9A
0781E:  CLRF   x9B
07820:  CLRF   x9C
07822:  CLRF   x9D
07824:  CLRF   x9E
07826:  CLRF   x9F
07828:  CLRF   xA0
0782A:  CLRF   xA1
0782C:  CLRF   xA2
0782E:  CLRF   xA3
07830:  CLRF   xA4
07832:  CLRF   xA5
07834:  CLRF   xA6
07836:  CLRF   xA7
07838:  CLRF   xA8
0783A:  CLRF   xA9
0783C:  CLRF   xAA
0783E:  CLRF   xAB
07840:  CLRF   xAC
07842:  CLRF   xAD
07844:  CLRF   xAE
07846:  CLRF   xAF
07848:  CLRF   xB0
0784A:  CLRF   xB1
0784C:  CLRF   xB2
0784E:  CLRF   xB3
07850:  CLRF   xB4
07852:  CLRF   xB5
07854:  CLRF   xB6
07856:  CLRF   xB7
07858:  CLRF   xB8
0785A:  CLRF   xB9
0785C:  CLRF   xBA
0785E:  CLRF   xBB
07860:  CLRF   xBC
07862:  CLRF   xBD
07864:  CLRF   xBE
07866:  CLRF   xBF
07868:  CLRF   xC0
0786A:  CLRF   xC1
0786C:  CLRF   xC2
0786E:  CLRF   xC3
07870:  CLRF   xC4
07872:  CLRF   xC5
07874:  CLRF   xC6
07876:  CLRF   xC7
07878:  CLRF   xC8
0787A:  CLRF   xC9
0787C:  CLRF   xCA
0787E:  CLRF   xCB
07880:  CLRF   xCC
07882:  CLRF   xCD
07884:  CLRF   xCE
07886:  CLRF   xCF
07888:  CLRF   xD0
0788A:  CLRF   xD1
0788C:  CLRF   xD2
0788E:  CLRF   xD3
07890:  CLRF   xD4
07892:  CLRF   xD5
07894:  CLRF   xD6
07896:  CLRF   xD7
07898:  CLRF   xD8
0789A:  CLRF   xD9
0789C:  CLRF   xDA
0789E:  CLRF   xDB
078A0:  CLRF   xDC
078A2:  CLRF   xDD
078A4:  CLRF   xDE
078A6:  CLRF   xDF
078A8:  CLRF   xE0
078AA:  CLRF   xE1
078AC:  CLRF   xE2
078AE:  CLRF   xE3
078B0:  CLRF   xE4
078B2:  CLRF   xE5
078B4:  CLRF   xE6
078B6:  CLRF   xE7
078B8:  CLRF   xE8
078BA:  CLRF   xE9
078BC:  CLRF   xEA
078BE:  CLRF   xEB
078C0:  CLRF   xEC
078C2:  CLRF   xED
078C4:  CLRF   xEE
078C6:  CLRF   xEF
078C8:  CLRF   xF0
078CA:  CLRF   xF1
078CC:  CLRF   xF2
078CE:  CLRF   xF3
078D0:  CLRF   xF4
078D2:  CLRF   xF5
078D4:  CLRF   xF6
078D6:  CLRF   xF7
078D8:  CLRF   xF8
078DA:  CLRF   xF9
078DC:  CLRF   xFA
078DE:  CLRF   xFB
078E0:  CLRF   xFC
078E2:  CLRF   xFD
078E4:  CLRF   xFE
078E6:  CLRF   xFF
078E8:  MOVLB  5
078EA:  CLRF   x00
078EC:  CLRF   x01
078EE:  CLRF   x02
078F0:  CLRF   x03
078F2:  CLRF   x04
078F4:  CLRF   x05
078F6:  CLRF   x06
078F8:  CLRF   x07
078FA:  CLRF   x08
078FC:  CLRF   x09
078FE:  CLRF   x0A
07900:  CLRF   x0B
07902:  CLRF   x0C
07904:  CLRF   x0D
07906:  CLRF   x0E
07908:  CLRF   x0F
0790A:  CLRF   x10
0790C:  CLRF   x11
0790E:  CLRF   x12
07910:  CLRF   x13
07912:  CLRF   x14
07914:  CLRF   x15
07916:  CLRF   x16
07918:  CLRF   x17
0791A:  CLRF   x18
0791C:  CLRF   x19
0791E:  CLRF   x1A
07920:  CLRF   x1B
07922:  CLRF   x1C
07924:  CLRF   x1D
07926:  CLRF   x1E
07928:  CLRF   x1F
0792A:  CLRF   x20
0792C:  CLRF   x21
0792E:  CLRF   x22
07930:  CLRF   x23
07932:  CLRF   x24
07934:  CLRF   x25
07936:  CLRF   x26
07938:  CLRF   x27
0793A:  CLRF   x28
0793C:  CLRF   x29
0793E:  CLRF   x2A
07940:  CLRF   x2B
07942:  CLRF   x2C
07944:  CLRF   x2D
07946:  CLRF   x2E
07948:  CLRF   x2F
0794A:  CLRF   x30
0794C:  CLRF   x31
0794E:  CLRF   x32
07950:  CLRF   x33
07952:  CLRF   x34
07954:  CLRF   x35
07956:  CLRF   x36
07958:  CLRF   x37
0795A:  CLRF   x38
0795C:  CLRF   x39
0795E:  CLRF   x3A
07960:  CLRF   x3B
07962:  CLRF   x3C
07964:  CLRF   x3D
07966:  CLRF   x3E
07968:  CLRF   x3F
0796A:  CLRF   x40
0796C:  CLRF   x41
0796E:  CLRF   x42
07970:  CLRF   x43
07972:  CLRF   x44
07974:  CLRF   x45
07976:  CLRF   x46
07978:  CLRF   x47
0797A:  CLRF   x48
0797C:  CLRF   x49
0797E:  CLRF   x4A
07980:  CLRF   x4B
07982:  CLRF   x4C
07984:  CLRF   x4D
07986:  CLRF   x4E
07988:  CLRF   x4F
0798A:  CLRF   x50
0798C:  CLRF   x51
0798E:  CLRF   x52
07990:  CLRF   x53
07992:  CLRF   x54
07994:  CLRF   x55
07996:  CLRF   x56
07998:  CLRF   x57
0799A:  CLRF   x58
0799C:  CLRF   x59
0799E:  CLRF   x5A
079A0:  CLRF   x5B
079A2:  CLRF   x5C
079A4:  CLRF   x5D
079A6:  CLRF   x5E
079A8:  CLRF   x5F
079AA:  CLRF   x60
079AC:  CLRF   x61
079AE:  CLRF   x62
079B0:  CLRF   x63
079B2:  CLRF   x64
079B4:  CLRF   x65
079B6:  CLRF   x66
079B8:  CLRF   x67
079BA:  CLRF   x68
079BC:  CLRF   x69
079BE:  CLRF   x6A
079C0:  CLRF   x6B
079C2:  CLRF   x6C
079C4:  CLRF   x6D
079C6:  CLRF   x6E
079C8:  CLRF   x6F
079CA:  CLRF   x70
079CC:  CLRF   x71
079CE:  CLRF   x72
079D0:  CLRF   x73
079D2:  CLRF   x74
079D4:  CLRF   x75
079D6:  CLRF   x76
079D8:  CLRF   x77
079DA:  CLRF   x78
079DC:  CLRF   x79
079DE:  CLRF   x7A
079E0:  CLRF   x7B
079E2:  CLRF   x7C
079E4:  CLRF   x7D
079E6:  CLRF   x7E
079E8:  CLRF   x7F
079EA:  CLRF   x80
....................     port1.port_num = 1;
079EC:  MOVLW  01
079EE:  MOVLB  1
079F0:  MOVWF  x81
....................     port1.sweep_step = 0;
079F2:  CLRF   x83
079F4:  CLRF   x82
....................     port1.active = 1;
079F6:  MOVLB  5
079F8:  BSF    x80.0
.................... 
....................     // Init Port2
....................     SWEEP_CONFIG port2 = {0};
079FA:  CLRF   x81
079FC:  CLRF   x82
079FE:  CLRF   x83
07A00:  CLRF   x84
07A02:  CLRF   x85
07A04:  CLRF   x86
07A06:  CLRF   x87
07A08:  CLRF   x88
07A0A:  CLRF   x89
07A0C:  CLRF   x8A
07A0E:  CLRF   x8B
07A10:  CLRF   x8C
07A12:  CLRF   x8D
07A14:  CLRF   x8E
07A16:  CLRF   x8F
07A18:  CLRF   x90
07A1A:  CLRF   x91
07A1C:  CLRF   x92
07A1E:  CLRF   x93
07A20:  CLRF   x94
07A22:  CLRF   x95
07A24:  CLRF   x96
07A26:  CLRF   x97
07A28:  CLRF   x98
07A2A:  CLRF   x99
07A2C:  CLRF   x9A
07A2E:  CLRF   x9B
07A30:  CLRF   x9C
07A32:  CLRF   x9D
07A34:  CLRF   x9E
07A36:  CLRF   x9F
07A38:  CLRF   xA0
07A3A:  CLRF   xA1
07A3C:  CLRF   xA2
07A3E:  CLRF   xA3
07A40:  CLRF   xA4
07A42:  CLRF   xA5
07A44:  CLRF   xA6
07A46:  CLRF   xA7
07A48:  CLRF   xA8
07A4A:  CLRF   xA9
07A4C:  CLRF   xAA
07A4E:  CLRF   xAB
07A50:  CLRF   xAC
07A52:  CLRF   xAD
07A54:  CLRF   xAE
07A56:  CLRF   xAF
07A58:  CLRF   xB0
07A5A:  CLRF   xB1
07A5C:  CLRF   xB2
07A5E:  CLRF   xB3
07A60:  CLRF   xB4
07A62:  CLRF   xB5
07A64:  CLRF   xB6
07A66:  CLRF   xB7
07A68:  CLRF   xB8
07A6A:  CLRF   xB9
07A6C:  CLRF   xBA
07A6E:  CLRF   xBB
07A70:  CLRF   xBC
07A72:  CLRF   xBD
07A74:  CLRF   xBE
07A76:  CLRF   xBF
07A78:  CLRF   xC0
07A7A:  CLRF   xC1
07A7C:  CLRF   xC2
07A7E:  CLRF   xC3
07A80:  CLRF   xC4
07A82:  CLRF   xC5
07A84:  CLRF   xC6
07A86:  CLRF   xC7
07A88:  CLRF   xC8
07A8A:  CLRF   xC9
07A8C:  CLRF   xCA
07A8E:  CLRF   xCB
07A90:  CLRF   xCC
07A92:  CLRF   xCD
07A94:  CLRF   xCE
07A96:  CLRF   xCF
07A98:  CLRF   xD0
07A9A:  CLRF   xD1
07A9C:  CLRF   xD2
07A9E:  CLRF   xD3
07AA0:  CLRF   xD4
07AA2:  CLRF   xD5
07AA4:  CLRF   xD6
07AA6:  CLRF   xD7
07AA8:  CLRF   xD8
07AAA:  CLRF   xD9
07AAC:  CLRF   xDA
07AAE:  CLRF   xDB
07AB0:  CLRF   xDC
07AB2:  CLRF   xDD
07AB4:  CLRF   xDE
07AB6:  CLRF   xDF
07AB8:  CLRF   xE0
07ABA:  CLRF   xE1
07ABC:  CLRF   xE2
07ABE:  CLRF   xE3
07AC0:  CLRF   xE4
07AC2:  CLRF   xE5
07AC4:  CLRF   xE6
07AC6:  CLRF   xE7
07AC8:  CLRF   xE8
07ACA:  CLRF   xE9
07ACC:  CLRF   xEA
07ACE:  CLRF   xEB
07AD0:  CLRF   xEC
07AD2:  CLRF   xED
07AD4:  CLRF   xEE
07AD6:  CLRF   xEF
07AD8:  CLRF   xF0
07ADA:  CLRF   xF1
07ADC:  CLRF   xF2
07ADE:  CLRF   xF3
07AE0:  CLRF   xF4
07AE2:  CLRF   xF5
07AE4:  CLRF   xF6
07AE6:  CLRF   xF7
07AE8:  CLRF   xF8
07AEA:  CLRF   xF9
07AEC:  CLRF   xFA
07AEE:  CLRF   xFB
07AF0:  CLRF   xFC
07AF2:  CLRF   xFD
07AF4:  CLRF   xFE
07AF6:  CLRF   xFF
07AF8:  MOVLB  6
07AFA:  CLRF   x00
07AFC:  CLRF   x01
07AFE:  CLRF   x02
07B00:  CLRF   x03
07B02:  CLRF   x04
07B04:  CLRF   x05
07B06:  CLRF   x06
07B08:  CLRF   x07
07B0A:  CLRF   x08
07B0C:  CLRF   x09
07B0E:  CLRF   x0A
07B10:  CLRF   x0B
07B12:  CLRF   x0C
07B14:  CLRF   x0D
07B16:  CLRF   x0E
07B18:  CLRF   x0F
07B1A:  CLRF   x10
07B1C:  CLRF   x11
07B1E:  CLRF   x12
07B20:  CLRF   x13
07B22:  CLRF   x14
07B24:  CLRF   x15
07B26:  CLRF   x16
07B28:  CLRF   x17
07B2A:  CLRF   x18
07B2C:  CLRF   x19
07B2E:  CLRF   x1A
07B30:  CLRF   x1B
07B32:  CLRF   x1C
07B34:  CLRF   x1D
07B36:  CLRF   x1E
07B38:  CLRF   x1F
07B3A:  CLRF   x20
07B3C:  CLRF   x21
07B3E:  CLRF   x22
07B40:  CLRF   x23
07B42:  CLRF   x24
07B44:  CLRF   x25
07B46:  CLRF   x26
07B48:  CLRF   x27
07B4A:  CLRF   x28
07B4C:  CLRF   x29
07B4E:  CLRF   x2A
07B50:  CLRF   x2B
07B52:  CLRF   x2C
07B54:  CLRF   x2D
07B56:  CLRF   x2E
07B58:  CLRF   x2F
07B5A:  CLRF   x30
07B5C:  CLRF   x31
07B5E:  CLRF   x32
07B60:  CLRF   x33
07B62:  CLRF   x34
07B64:  CLRF   x35
07B66:  CLRF   x36
07B68:  CLRF   x37
07B6A:  CLRF   x38
07B6C:  CLRF   x39
07B6E:  CLRF   x3A
07B70:  CLRF   x3B
07B72:  CLRF   x3C
07B74:  CLRF   x3D
07B76:  CLRF   x3E
07B78:  CLRF   x3F
07B7A:  CLRF   x40
07B7C:  CLRF   x41
07B7E:  CLRF   x42
07B80:  CLRF   x43
07B82:  CLRF   x44
07B84:  CLRF   x45
07B86:  CLRF   x46
07B88:  CLRF   x47
07B8A:  CLRF   x48
07B8C:  CLRF   x49
07B8E:  CLRF   x4A
07B90:  CLRF   x4B
07B92:  CLRF   x4C
07B94:  CLRF   x4D
07B96:  CLRF   x4E
07B98:  CLRF   x4F
07B9A:  CLRF   x50
07B9C:  CLRF   x51
07B9E:  CLRF   x52
07BA0:  CLRF   x53
07BA2:  CLRF   x54
07BA4:  CLRF   x55
07BA6:  CLRF   x56
07BA8:  CLRF   x57
07BAA:  CLRF   x58
07BAC:  CLRF   x59
07BAE:  CLRF   x5A
07BB0:  CLRF   x5B
07BB2:  CLRF   x5C
07BB4:  CLRF   x5D
07BB6:  CLRF   x5E
07BB8:  CLRF   x5F
07BBA:  CLRF   x60
07BBC:  CLRF   x61
07BBE:  CLRF   x62
07BC0:  CLRF   x63
07BC2:  CLRF   x64
07BC4:  CLRF   x65
07BC6:  CLRF   x66
07BC8:  CLRF   x67
07BCA:  CLRF   x68
07BCC:  CLRF   x69
07BCE:  CLRF   x6A
07BD0:  CLRF   x6B
07BD2:  CLRF   x6C
07BD4:  CLRF   x6D
07BD6:  CLRF   x6E
07BD8:  CLRF   x6F
07BDA:  CLRF   x70
07BDC:  CLRF   x71
07BDE:  CLRF   x72
07BE0:  CLRF   x73
07BE2:  CLRF   x74
07BE4:  CLRF   x75
07BE6:  CLRF   x76
07BE8:  CLRF   x77
07BEA:  CLRF   x78
07BEC:  CLRF   x79
07BEE:  CLRF   x7A
07BF0:  CLRF   x7B
07BF2:  CLRF   x7C
07BF4:  CLRF   x7D
07BF6:  CLRF   x7E
07BF8:  CLRF   x7F
07BFA:  CLRF   x80
07BFC:  CLRF   x81
07BFE:  CLRF   x82
07C00:  CLRF   x83
07C02:  CLRF   x84
07C04:  CLRF   x85
07C06:  CLRF   x86
07C08:  CLRF   x87
07C0A:  CLRF   x88
07C0C:  CLRF   x89
07C0E:  CLRF   x8A
07C10:  CLRF   x8B
07C12:  CLRF   x8C
07C14:  CLRF   x8D
07C16:  CLRF   x8E
07C18:  CLRF   x8F
07C1A:  CLRF   x90
07C1C:  CLRF   x91
07C1E:  CLRF   x92
07C20:  CLRF   x93
07C22:  CLRF   x94
07C24:  CLRF   x95
07C26:  CLRF   x96
07C28:  CLRF   x97
07C2A:  CLRF   x98
07C2C:  CLRF   x99
07C2E:  CLRF   x9A
07C30:  CLRF   x9B
07C32:  CLRF   x9C
07C34:  CLRF   x9D
07C36:  CLRF   x9E
07C38:  CLRF   x9F
07C3A:  CLRF   xA0
07C3C:  CLRF   xA1
07C3E:  CLRF   xA2
07C40:  CLRF   xA3
07C42:  CLRF   xA4
07C44:  CLRF   xA5
07C46:  CLRF   xA6
07C48:  CLRF   xA7
07C4A:  CLRF   xA8
07C4C:  CLRF   xA9
07C4E:  CLRF   xAA
07C50:  CLRF   xAB
07C52:  CLRF   xAC
07C54:  CLRF   xAD
07C56:  CLRF   xAE
07C58:  CLRF   xAF
07C5A:  CLRF   xB0
07C5C:  CLRF   xB1
07C5E:  CLRF   xB2
07C60:  CLRF   xB3
07C62:  CLRF   xB4
07C64:  CLRF   xB5
07C66:  CLRF   xB6
07C68:  CLRF   xB7
07C6A:  CLRF   xB8
07C6C:  CLRF   xB9
07C6E:  CLRF   xBA
07C70:  CLRF   xBB
07C72:  CLRF   xBC
07C74:  CLRF   xBD
07C76:  CLRF   xBE
07C78:  CLRF   xBF
07C7A:  CLRF   xC0
07C7C:  CLRF   xC1
07C7E:  CLRF   xC2
07C80:  CLRF   xC3
07C82:  CLRF   xC4
07C84:  CLRF   xC5
07C86:  CLRF   xC6
07C88:  CLRF   xC7
07C8A:  CLRF   xC8
07C8C:  CLRF   xC9
07C8E:  CLRF   xCA
07C90:  CLRF   xCB
07C92:  CLRF   xCC
07C94:  CLRF   xCD
07C96:  CLRF   xCE
07C98:  CLRF   xCF
07C9A:  CLRF   xD0
07C9C:  CLRF   xD1
07C9E:  CLRF   xD2
07CA0:  CLRF   xD3
07CA2:  CLRF   xD4
07CA4:  CLRF   xD5
07CA6:  CLRF   xD6
07CA8:  CLRF   xD7
07CAA:  CLRF   xD8
07CAC:  CLRF   xD9
07CAE:  CLRF   xDA
07CB0:  CLRF   xDB
07CB2:  CLRF   xDC
07CB4:  CLRF   xDD
07CB6:  CLRF   xDE
07CB8:  CLRF   xDF
07CBA:  CLRF   xE0
07CBC:  CLRF   xE1
07CBE:  CLRF   xE2
07CC0:  CLRF   xE3
07CC2:  CLRF   xE4
07CC4:  CLRF   xE5
07CC6:  CLRF   xE6
07CC8:  CLRF   xE7
07CCA:  CLRF   xE8
07CCC:  CLRF   xE9
07CCE:  CLRF   xEA
07CD0:  CLRF   xEB
07CD2:  CLRF   xEC
07CD4:  CLRF   xED
07CD6:  CLRF   xEE
07CD8:  CLRF   xEF
07CDA:  CLRF   xF0
07CDC:  CLRF   xF1
07CDE:  CLRF   xF2
07CE0:  CLRF   xF3
07CE2:  CLRF   xF4
07CE4:  CLRF   xF5
07CE6:  CLRF   xF6
07CE8:  CLRF   xF7
07CEA:  CLRF   xF8
07CEC:  CLRF   xF9
07CEE:  CLRF   xFA
07CF0:  CLRF   xFB
07CF2:  CLRF   xFC
07CF4:  CLRF   xFD
07CF6:  CLRF   xFE
07CF8:  CLRF   xFF
07CFA:  MOVLB  7
07CFC:  CLRF   x00
07CFE:  CLRF   x01
07D00:  CLRF   x02
07D02:  CLRF   x03
07D04:  CLRF   x04
07D06:  CLRF   x05
07D08:  CLRF   x06
07D0A:  CLRF   x07
07D0C:  CLRF   x08
07D0E:  CLRF   x09
07D10:  CLRF   x0A
07D12:  CLRF   x0B
07D14:  CLRF   x0C
07D16:  CLRF   x0D
07D18:  CLRF   x0E
07D1A:  CLRF   x0F
07D1C:  CLRF   x10
07D1E:  CLRF   x11
07D20:  CLRF   x12
07D22:  CLRF   x13
07D24:  CLRF   x14
07D26:  CLRF   x15
07D28:  CLRF   x16
07D2A:  CLRF   x17
07D2C:  CLRF   x18
07D2E:  CLRF   x19
07D30:  CLRF   x1A
07D32:  CLRF   x1B
07D34:  CLRF   x1C
07D36:  CLRF   x1D
07D38:  CLRF   x1E
07D3A:  CLRF   x1F
07D3C:  CLRF   x20
07D3E:  CLRF   x21
07D40:  CLRF   x22
07D42:  CLRF   x23
07D44:  CLRF   x24
07D46:  CLRF   x25
07D48:  CLRF   x26
07D4A:  CLRF   x27
07D4C:  CLRF   x28
07D4E:  CLRF   x29
07D50:  CLRF   x2A
07D52:  CLRF   x2B
07D54:  CLRF   x2C
07D56:  CLRF   x2D
07D58:  CLRF   x2E
07D5A:  CLRF   x2F
07D5C:  CLRF   x30
07D5E:  CLRF   x31
07D60:  CLRF   x32
07D62:  CLRF   x33
07D64:  CLRF   x34
07D66:  CLRF   x35
07D68:  CLRF   x36
07D6A:  CLRF   x37
07D6C:  CLRF   x38
07D6E:  CLRF   x39
07D70:  CLRF   x3A
07D72:  CLRF   x3B
07D74:  CLRF   x3C
07D76:  CLRF   x3D
07D78:  CLRF   x3E
07D7A:  CLRF   x3F
07D7C:  CLRF   x40
07D7E:  CLRF   x41
07D80:  CLRF   x42
07D82:  CLRF   x43
07D84:  CLRF   x44
07D86:  CLRF   x45
07D88:  CLRF   x46
07D8A:  CLRF   x47
07D8C:  CLRF   x48
07D8E:  CLRF   x49
07D90:  CLRF   x4A
07D92:  CLRF   x4B
07D94:  CLRF   x4C
07D96:  CLRF   x4D
07D98:  CLRF   x4E
07D9A:  CLRF   x4F
07D9C:  CLRF   x50
07D9E:  CLRF   x51
07DA0:  CLRF   x52
07DA2:  CLRF   x53
07DA4:  CLRF   x54
07DA6:  CLRF   x55
07DA8:  CLRF   x56
07DAA:  CLRF   x57
07DAC:  CLRF   x58
07DAE:  CLRF   x59
07DB0:  CLRF   x5A
07DB2:  CLRF   x5B
07DB4:  CLRF   x5C
07DB6:  CLRF   x5D
07DB8:  CLRF   x5E
07DBA:  CLRF   x5F
07DBC:  CLRF   x60
07DBE:  CLRF   x61
07DC0:  CLRF   x62
07DC2:  CLRF   x63
07DC4:  CLRF   x64
07DC6:  CLRF   x65
07DC8:  CLRF   x66
07DCA:  CLRF   x67
07DCC:  CLRF   x68
07DCE:  CLRF   x69
07DD0:  CLRF   x6A
07DD2:  CLRF   x6B
07DD4:  CLRF   x6C
07DD6:  CLRF   x6D
07DD8:  CLRF   x6E
07DDA:  CLRF   x6F
07DDC:  CLRF   x70
07DDE:  CLRF   x71
07DE0:  CLRF   x72
07DE2:  CLRF   x73
07DE4:  CLRF   x74
07DE6:  CLRF   x75
07DE8:  CLRF   x76
07DEA:  CLRF   x77
07DEC:  CLRF   x78
07DEE:  CLRF   x79
07DF0:  CLRF   x7A
07DF2:  CLRF   x7B
07DF4:  CLRF   x7C
07DF6:  CLRF   x7D
07DF8:  CLRF   x7E
07DFA:  CLRF   x7F
07DFC:  CLRF   x80
07DFE:  CLRF   x81
07E00:  CLRF   x82
07E02:  CLRF   x83
07E04:  CLRF   x84
07E06:  CLRF   x85
07E08:  CLRF   x86
07E0A:  CLRF   x87
07E0C:  CLRF   x88
07E0E:  CLRF   x89
07E10:  CLRF   x8A
07E12:  CLRF   x8B
07E14:  CLRF   x8C
07E16:  CLRF   x8D
07E18:  CLRF   x8E
07E1A:  CLRF   x8F
07E1C:  CLRF   x90
07E1E:  CLRF   x91
07E20:  CLRF   x92
07E22:  CLRF   x93
07E24:  CLRF   x94
07E26:  CLRF   x95
07E28:  CLRF   x96
07E2A:  CLRF   x97
07E2C:  CLRF   x98
07E2E:  CLRF   x99
07E30:  CLRF   x9A
07E32:  CLRF   x9B
07E34:  CLRF   x9C
07E36:  CLRF   x9D
07E38:  CLRF   x9E
07E3A:  CLRF   x9F
07E3C:  CLRF   xA0
07E3E:  CLRF   xA1
07E40:  CLRF   xA2
07E42:  CLRF   xA3
07E44:  CLRF   xA4
07E46:  CLRF   xA5
07E48:  CLRF   xA6
07E4A:  CLRF   xA7
07E4C:  CLRF   xA8
07E4E:  CLRF   xA9
07E50:  CLRF   xAA
07E52:  CLRF   xAB
07E54:  CLRF   xAC
07E56:  CLRF   xAD
07E58:  CLRF   xAE
07E5A:  CLRF   xAF
07E5C:  CLRF   xB0
07E5E:  CLRF   xB1
07E60:  CLRF   xB2
07E62:  CLRF   xB3
07E64:  CLRF   xB4
07E66:  CLRF   xB5
07E68:  CLRF   xB6
07E6A:  CLRF   xB7
07E6C:  CLRF   xB8
07E6E:  CLRF   xB9
07E70:  CLRF   xBA
07E72:  CLRF   xBB
07E74:  CLRF   xBC
07E76:  CLRF   xBD
07E78:  CLRF   xBE
07E7A:  CLRF   xBF
07E7C:  CLRF   xC0
07E7E:  CLRF   xC1
07E80:  CLRF   xC2
07E82:  CLRF   xC3
07E84:  CLRF   xC4
07E86:  CLRF   xC5
07E88:  CLRF   xC6
07E8A:  CLRF   xC7
07E8C:  CLRF   xC8
07E8E:  CLRF   xC9
07E90:  CLRF   xCA
07E92:  CLRF   xCB
07E94:  CLRF   xCC
07E96:  CLRF   xCD
07E98:  CLRF   xCE
07E9A:  CLRF   xCF
07E9C:  CLRF   xD0
07E9E:  CLRF   xD1
07EA0:  CLRF   xD2
07EA2:  CLRF   xD3
07EA4:  CLRF   xD4
07EA6:  CLRF   xD5
07EA8:  CLRF   xD6
07EAA:  CLRF   xD7
07EAC:  CLRF   xD8
07EAE:  CLRF   xD9
07EB0:  CLRF   xDA
07EB2:  CLRF   xDB
07EB4:  CLRF   xDC
07EB6:  CLRF   xDD
07EB8:  CLRF   xDE
07EBA:  CLRF   xDF
07EBC:  CLRF   xE0
07EBE:  CLRF   xE1
07EC0:  CLRF   xE2
07EC2:  CLRF   xE3
07EC4:  CLRF   xE4
07EC6:  CLRF   xE5
07EC8:  CLRF   xE6
07ECA:  CLRF   xE7
07ECC:  CLRF   xE8
07ECE:  CLRF   xE9
07ED0:  CLRF   xEA
07ED2:  CLRF   xEB
07ED4:  CLRF   xEC
07ED6:  CLRF   xED
07ED8:  CLRF   xEE
07EDA:  CLRF   xEF
07EDC:  CLRF   xF0
07EDE:  CLRF   xF1
07EE0:  CLRF   xF2
07EE2:  CLRF   xF3
07EE4:  CLRF   xF4
07EE6:  CLRF   xF5
07EE8:  CLRF   xF6
07EEA:  CLRF   xF7
07EEC:  CLRF   xF8
07EEE:  CLRF   xF9
07EF0:  CLRF   xFA
07EF2:  CLRF   xFB
07EF4:  CLRF   xFC
07EF6:  CLRF   xFD
07EF8:  CLRF   xFE
07EFA:  CLRF   xFF
07EFC:  MOVLB  8
07EFE:  CLRF   x00
07F00:  CLRF   x01
07F02:  CLRF   x02
07F04:  CLRF   x03
07F06:  CLRF   x04
07F08:  CLRF   x05
07F0A:  CLRF   x06
07F0C:  CLRF   x07
07F0E:  CLRF   x08
07F10:  CLRF   x09
07F12:  CLRF   x0A
07F14:  CLRF   x0B
07F16:  CLRF   x0C
07F18:  CLRF   x0D
07F1A:  CLRF   x0E
07F1C:  CLRF   x0F
07F1E:  CLRF   x10
07F20:  CLRF   x11
07F22:  CLRF   x12
07F24:  CLRF   x13
07F26:  CLRF   x14
07F28:  CLRF   x15
07F2A:  CLRF   x16
07F2C:  CLRF   x17
07F2E:  CLRF   x18
07F30:  CLRF   x19
07F32:  CLRF   x1A
07F34:  CLRF   x1B
07F36:  CLRF   x1C
07F38:  CLRF   x1D
07F3A:  CLRF   x1E
07F3C:  CLRF   x1F
07F3E:  CLRF   x20
07F40:  CLRF   x21
07F42:  CLRF   x22
07F44:  CLRF   x23
07F46:  CLRF   x24
07F48:  CLRF   x25
07F4A:  CLRF   x26
07F4C:  CLRF   x27
07F4E:  CLRF   x28
07F50:  CLRF   x29
07F52:  CLRF   x2A
07F54:  CLRF   x2B
07F56:  CLRF   x2C
07F58:  CLRF   x2D
07F5A:  CLRF   x2E
07F5C:  CLRF   x2F
07F5E:  CLRF   x30
07F60:  CLRF   x31
07F62:  CLRF   x32
07F64:  CLRF   x33
07F66:  CLRF   x34
07F68:  CLRF   x35
07F6A:  CLRF   x36
07F6C:  CLRF   x37
07F6E:  CLRF   x38
07F70:  CLRF   x39
07F72:  CLRF   x3A
07F74:  CLRF   x3B
07F76:  CLRF   x3C
07F78:  CLRF   x3D
07F7A:  CLRF   x3E
07F7C:  CLRF   x3F
07F7E:  CLRF   x40
07F80:  CLRF   x41
07F82:  CLRF   x42
07F84:  CLRF   x43
07F86:  CLRF   x44
07F88:  CLRF   x45
07F8A:  CLRF   x46
07F8C:  CLRF   x47
07F8E:  CLRF   x48
07F90:  CLRF   x49
07F92:  CLRF   x4A
07F94:  CLRF   x4B
07F96:  CLRF   x4C
07F98:  CLRF   x4D
07F9A:  CLRF   x4E
07F9C:  CLRF   x4F
07F9E:  CLRF   x50
07FA0:  CLRF   x51
07FA2:  CLRF   x52
07FA4:  CLRF   x53
07FA6:  CLRF   x54
07FA8:  CLRF   x55
07FAA:  CLRF   x56
07FAC:  CLRF   x57
07FAE:  CLRF   x58
07FB0:  CLRF   x59
07FB2:  CLRF   x5A
07FB4:  CLRF   x5B
07FB6:  CLRF   x5C
07FB8:  CLRF   x5D
07FBA:  CLRF   x5E
07FBC:  CLRF   x5F
07FBE:  CLRF   x60
07FC0:  CLRF   x61
07FC2:  CLRF   x62
07FC4:  CLRF   x63
07FC6:  CLRF   x64
07FC8:  CLRF   x65
07FCA:  CLRF   x66
07FCC:  CLRF   x67
07FCE:  CLRF   x68
07FD0:  CLRF   x69
07FD2:  CLRF   x6A
07FD4:  CLRF   x6B
07FD6:  CLRF   x6C
07FD8:  CLRF   x6D
07FDA:  CLRF   x6E
07FDC:  CLRF   x6F
07FDE:  CLRF   x70
07FE0:  CLRF   x71
07FE2:  CLRF   x72
07FE4:  CLRF   x73
07FE6:  CLRF   x74
07FE8:  CLRF   x75
07FEA:  CLRF   x76
07FEC:  CLRF   x77
07FEE:  CLRF   x78
07FF0:  CLRF   x79
07FF2:  CLRF   x7A
07FF4:  CLRF   x7B
07FF6:  CLRF   x7C
07FF8:  CLRF   x7D
07FFA:  CLRF   x7E
07FFC:  CLRF   x7F
07FFE:  CLRF   x80
08000:  CLRF   x81
08002:  CLRF   x82
08004:  CLRF   x83
08006:  CLRF   x84
08008:  CLRF   x85
0800A:  CLRF   x86
0800C:  CLRF   x87
0800E:  CLRF   x88
08010:  CLRF   x89
08012:  CLRF   x8A
08014:  CLRF   x8B
08016:  CLRF   x8C
08018:  CLRF   x8D
0801A:  CLRF   x8E
0801C:  CLRF   x8F
0801E:  CLRF   x90
08020:  CLRF   x91
08022:  CLRF   x92
08024:  CLRF   x93
08026:  CLRF   x94
08028:  CLRF   x95
0802A:  CLRF   x96
0802C:  CLRF   x97
0802E:  CLRF   x98
08030:  CLRF   x99
08032:  CLRF   x9A
08034:  CLRF   x9B
08036:  CLRF   x9C
08038:  CLRF   x9D
0803A:  CLRF   x9E
0803C:  CLRF   x9F
0803E:  CLRF   xA0
08040:  CLRF   xA1
08042:  CLRF   xA2
08044:  CLRF   xA3
08046:  CLRF   xA4
08048:  CLRF   xA5
0804A:  CLRF   xA6
0804C:  CLRF   xA7
0804E:  CLRF   xA8
08050:  CLRF   xA9
08052:  CLRF   xAA
08054:  CLRF   xAB
08056:  CLRF   xAC
08058:  CLRF   xAD
0805A:  CLRF   xAE
0805C:  CLRF   xAF
0805E:  CLRF   xB0
08060:  CLRF   xB1
08062:  CLRF   xB2
08064:  CLRF   xB3
08066:  CLRF   xB4
08068:  CLRF   xB5
0806A:  CLRF   xB6
0806C:  CLRF   xB7
0806E:  CLRF   xB8
08070:  CLRF   xB9
08072:  CLRF   xBA
08074:  CLRF   xBB
08076:  CLRF   xBC
08078:  CLRF   xBD
0807A:  CLRF   xBE
0807C:  CLRF   xBF
0807E:  CLRF   xC0
08080:  CLRF   xC1
08082:  CLRF   xC2
08084:  CLRF   xC3
08086:  CLRF   xC4
08088:  CLRF   xC5
0808A:  CLRF   xC6
0808C:  CLRF   xC7
0808E:  CLRF   xC8
08090:  CLRF   xC9
08092:  CLRF   xCA
08094:  CLRF   xCB
08096:  CLRF   xCC
08098:  CLRF   xCD
0809A:  CLRF   xCE
0809C:  CLRF   xCF
0809E:  CLRF   xD0
080A0:  CLRF   xD1
080A2:  CLRF   xD2
080A4:  CLRF   xD3
080A6:  CLRF   xD4
080A8:  CLRF   xD5
080AA:  CLRF   xD6
080AC:  CLRF   xD7
080AE:  CLRF   xD8
080B0:  CLRF   xD9
080B2:  CLRF   xDA
080B4:  CLRF   xDB
080B6:  CLRF   xDC
080B8:  CLRF   xDD
080BA:  CLRF   xDE
080BC:  CLRF   xDF
080BE:  CLRF   xE0
080C0:  CLRF   xE1
080C2:  CLRF   xE2
080C4:  CLRF   xE3
080C6:  CLRF   xE4
080C8:  CLRF   xE5
080CA:  CLRF   xE6
080CC:  CLRF   xE7
080CE:  CLRF   xE8
080D0:  CLRF   xE9
080D2:  CLRF   xEA
080D4:  CLRF   xEB
080D6:  CLRF   xEC
080D8:  CLRF   xED
080DA:  CLRF   xEE
080DC:  CLRF   xEF
080DE:  CLRF   xF0
080E0:  CLRF   xF1
080E2:  CLRF   xF2
080E4:  CLRF   xF3
080E6:  CLRF   xF4
080E8:  CLRF   xF5
080EA:  CLRF   xF6
080EC:  CLRF   xF7
080EE:  CLRF   xF8
080F0:  CLRF   xF9
080F2:  CLRF   xFA
080F4:  CLRF   xFB
080F6:  CLRF   xFC
080F8:  CLRF   xFD
080FA:  CLRF   xFE
080FC:  CLRF   xFF
080FE:  MOVLB  9
08100:  CLRF   x00
08102:  CLRF   x01
08104:  CLRF   x02
08106:  CLRF   x03
08108:  CLRF   x04
0810A:  CLRF   x05
0810C:  CLRF   x06
0810E:  CLRF   x07
08110:  CLRF   x08
08112:  CLRF   x09
08114:  CLRF   x0A
08116:  CLRF   x0B
08118:  CLRF   x0C
0811A:  CLRF   x0D
0811C:  CLRF   x0E
0811E:  CLRF   x0F
08120:  CLRF   x10
08122:  CLRF   x11
08124:  CLRF   x12
08126:  CLRF   x13
08128:  CLRF   x14
0812A:  CLRF   x15
0812C:  CLRF   x16
0812E:  CLRF   x17
08130:  CLRF   x18
08132:  CLRF   x19
08134:  CLRF   x1A
08136:  CLRF   x1B
08138:  CLRF   x1C
0813A:  CLRF   x1D
0813C:  CLRF   x1E
0813E:  CLRF   x1F
08140:  CLRF   x20
08142:  CLRF   x21
08144:  CLRF   x22
08146:  CLRF   x23
08148:  CLRF   x24
0814A:  CLRF   x25
0814C:  CLRF   x26
0814E:  CLRF   x27
08150:  CLRF   x28
08152:  CLRF   x29
08154:  CLRF   x2A
08156:  CLRF   x2B
08158:  CLRF   x2C
0815A:  CLRF   x2D
0815C:  CLRF   x2E
0815E:  CLRF   x2F
08160:  CLRF   x30
08162:  CLRF   x31
08164:  CLRF   x32
08166:  CLRF   x33
08168:  CLRF   x34
0816A:  CLRF   x35
0816C:  CLRF   x36
0816E:  CLRF   x37
08170:  CLRF   x38
08172:  CLRF   x39
08174:  CLRF   x3A
08176:  CLRF   x3B
08178:  CLRF   x3C
0817A:  CLRF   x3D
0817C:  CLRF   x3E
0817E:  CLRF   x3F
08180:  CLRF   x40
08182:  CLRF   x41
08184:  CLRF   x42
08186:  CLRF   x43
08188:  CLRF   x44
0818A:  CLRF   x45
0818C:  CLRF   x46
0818E:  CLRF   x47
08190:  CLRF   x48
08192:  CLRF   x49
08194:  CLRF   x4A
08196:  CLRF   x4B
08198:  CLRF   x4C
0819A:  CLRF   x4D
0819C:  CLRF   x4E
0819E:  CLRF   x4F
081A0:  CLRF   x50
081A2:  CLRF   x51
081A4:  CLRF   x52
081A6:  CLRF   x53
081A8:  CLRF   x54
081AA:  CLRF   x55
081AC:  CLRF   x56
081AE:  CLRF   x57
081B0:  CLRF   x58
081B2:  CLRF   x59
081B4:  CLRF   x5A
081B6:  CLRF   x5B
081B8:  CLRF   x5C
081BA:  CLRF   x5D
081BC:  CLRF   x5E
081BE:  CLRF   x5F
081C0:  CLRF   x60
081C2:  CLRF   x61
081C4:  CLRF   x62
081C6:  CLRF   x63
081C8:  CLRF   x64
081CA:  CLRF   x65
081CC:  CLRF   x66
081CE:  CLRF   x67
081D0:  CLRF   x68
081D2:  CLRF   x69
081D4:  CLRF   x6A
081D6:  CLRF   x6B
081D8:  CLRF   x6C
081DA:  CLRF   x6D
081DC:  CLRF   x6E
081DE:  CLRF   x6F
081E0:  CLRF   x70
081E2:  CLRF   x71
081E4:  CLRF   x72
081E6:  CLRF   x73
081E8:  CLRF   x74
081EA:  CLRF   x75
081EC:  CLRF   x76
081EE:  CLRF   x77
081F0:  CLRF   x78
081F2:  CLRF   x79
081F4:  CLRF   x7A
081F6:  CLRF   x7B
081F8:  CLRF   x7C
081FA:  CLRF   x7D
081FC:  CLRF   x7E
081FE:  CLRF   x7F
08200:  CLRF   x80
....................     port2.port_num = 2;
08202:  MOVLW  02
08204:  MOVLB  5
08206:  MOVWF  x81
....................     port2.sweep_step = 0;
08208:  CLRF   x83
0820A:  CLRF   x82
....................     port2.active = 1;
0820C:  MOVLB  9
0820E:  BSF    x80.0
.................... 
....................     int16 count = 1;
08210:  CLRF   x82
08212:  MOVLW  01
08214:  MOVWF  x81
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
08216:  CLRF   x93
08218:  MOVLW  01
0821A:  MOVWF  x92
0821C:  MOVLB  0
0821E:  CALL   6854
....................     mcp4901_2_write(1);
08222:  MOVLB  9
08224:  CLRF   x93
08226:  MOVLW  01
08228:  MOVWF  x92
0822A:  MOVLB  0
0822C:  CALL   6892
....................     ad7490_read(ADC_CIGS1_CURR);
08230:  MOVLW  01
08232:  MOVLB  9
08234:  MOVWF  xA7
08236:  MOVLB  0
08238:  CALL   2054
....................     ad7490_read(ADC_CIGS2_CURR);
0823C:  MOVLW  05
0823E:  MOVLB  9
08240:  MOVWF  xA7
08242:  MOVLB  0
08244:  CALL   2054
....................     ad7490_read(ADC_CIGS2_CURR);
08248:  MOVLW  05
0824A:  MOVLB  9
0824C:  MOVWF  xA7
0824E:  MOVLB  0
08250:  CALL   2054
....................     delay_ms(200);
08254:  MOVLW  C8
08256:  MOVLB  A
08258:  MOVWF  x3E
0825A:  MOVLB  0
0825C:  CALL   1E32
.................... 
....................     // Read initial PD value
....................     MEASUREMENT_DATA measured_data = create_meas_data();
08260:  GOTO   69DA
08264:  MOVFF  02,03
08268:  MOVF   01,W
0826A:  MOVWF  FE1
0826C:  MOVFF  03,FE2
08270:  MOVLW  09
08272:  MOVWF  FEA
08274:  MOVLW  83
08276:  MOVWF  FE9
08278:  MOVLW  0F
0827A:  MOVWF  01
0827C:  MOVFF  FE6,FEE
08280:  DECFSZ 01,F
08282:  GOTO   827C
....................     // Continue measurement while at least one port is active
....................     while (port1.active || port2.active)
08286:  MOVLB  5
08288:  BTFSS  x80.0
0828A:  BRA    8292
0828C:  MOVLB  0
0828E:  GOTO   82A2
08292:  MOVLB  0
08294:  MOVLB  9
08296:  BTFSC  x80.0
08298:  BRA    82A0
0829A:  MOVLB  0
0829C:  GOTO   8722
082A0:  MOVLB  0
....................     {
....................         // Set DAC values for both ports (synchronized timing)
....................         mcp4901_1_write(count);
082A2:  MOVFF  982,993
082A6:  MOVFF  981,992
082AA:  CALL   6854
....................         mcp4901_2_write(count);
082AE:  MOVFF  982,993
082B2:  MOVFF  981,992
082B6:  CALL   6892
....................         delay_ms(1); // wait for DAC to stabilize
082BA:  MOVLW  01
082BC:  MOVLB  A
082BE:  MOVWF  x3E
082C0:  MOVLB  0
082C2:  CALL   1E32
.................... 
....................         // Read CIGS1 data (port1) only if still active
....................         if (port1.active) {
082C6:  MOVLB  5
082C8:  BTFSC  x80.0
082CA:  BRA    82D2
082CC:  MOVLB  0
082CE:  GOTO   835E
082D2:  MOVLB  0
....................             port1.data_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
082D4:  BCF    FD8.0
082D6:  MOVLB  9
082D8:  RLCF   x81,W
082DA:  MOVWF  02
082DC:  RLCF   x82,W
082DE:  MOVWF  03
082E0:  MOVF   02,W
082E2:  ADDLW  84
082E4:  MOVWF  01
082E6:  MOVLW  01
082E8:  ADDWFC 03,F
082EA:  MOVF   01,W
082EC:  MOVWF  x92
082EE:  MOVFF  03,993
082F2:  MOVLW  02
082F4:  MOVWF  xA7
082F6:  MOVLB  0
082F8:  CALL   2054
082FC:  MOVFF  993,FEA
08300:  MOVFF  992,FE9
08304:  MOVFF  02,FEC
08308:  MOVF   FED,F
0830A:  MOVFF  01,FEF
....................             port1.data_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
0830E:  BCF    FD8.0
08310:  MOVLB  9
08312:  RLCF   x81,W
08314:  MOVWF  02
08316:  RLCF   x82,W
08318:  MOVWF  03
0831A:  MOVF   02,W
0831C:  ADDLW  82
0831E:  MOVWF  01
08320:  MOVLW  03
08322:  ADDWFC 03,F
08324:  MOVF   01,W
08326:  MOVWF  x92
08328:  MOVFF  03,993
0832C:  MOVLW  01
0832E:  MOVWF  xA7
08330:  MOVLB  0
08332:  CALL   2054
08336:  MOVFF  993,FEA
0833A:  MOVFF  992,FE9
0833E:  MOVFF  02,FEC
08342:  MOVF   FED,F
08344:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; // Update CIGS1 step counter
08348:  MOVLW  01
0834A:  MOVLB  9
0834C:  ADDWF  x81,W
0834E:  MOVLB  1
08350:  MOVWF  x82
08352:  MOVLW  00
08354:  MOVLB  9
08356:  ADDWFC x82,W
08358:  MOVLB  1
0835A:  MOVWF  x83
0835C:  MOVLB  0
....................         }
....................         
....................         // Read CIGS2 data (port2) only if still active
....................         if (port2.active) {
0835E:  MOVLB  9
08360:  BTFSC  x80.0
08362:  BRA    836A
08364:  MOVLB  0
08366:  GOTO   84BE
0836A:  MOVLB  0
....................             port2.data_buffer[0][count] = ad7490_read(ADC_CIGS2_AMP);
0836C:  BCF    FD8.0
0836E:  MOVLB  9
08370:  RLCF   x81,W
08372:  MOVWF  02
08374:  RLCF   x82,W
08376:  MOVWF  03
08378:  MOVF   02,W
0837A:  ADDLW  84
0837C:  MOVWF  01
0837E:  MOVLW  05
08380:  ADDWFC 03,F
08382:  MOVF   01,W
08384:  MOVWF  x92
08386:  MOVFF  03,993
0838A:  MOVLW  06
0838C:  MOVWF  xA7
0838E:  MOVLB  0
08390:  CALL   2054
08394:  MOVFF  993,FEA
08398:  MOVFF  992,FE9
0839C:  MOVFF  02,FEC
083A0:  MOVF   FED,F
083A2:  MOVFF  01,FEF
....................             port2.data_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
083A6:  BCF    FD8.0
083A8:  MOVLB  9
083AA:  RLCF   x81,W
083AC:  MOVWF  02
083AE:  RLCF   x82,W
083B0:  MOVWF  03
083B2:  MOVF   02,W
083B4:  ADDLW  82
083B6:  MOVWF  01
083B8:  MOVLW  07
083BA:  ADDWFC 03,F
083BC:  MOVF   01,W
083BE:  MOVWF  x92
083C0:  MOVFF  03,993
083C4:  MOVLW  05
083C6:  MOVWF  xA7
083C8:  MOVLB  0
083CA:  CALL   2054
083CE:  MOVFF  993,FEA
083D2:  MOVFF  992,FE9
083D6:  MOVFF  02,FEC
083DA:  MOVF   FED,F
083DC:  MOVFF  01,FEF
....................             fprintf(PC, "CIGS2 data: %04LX, %04LX\r\n", port2.data_buffer[0][count], port2.data_buffer[1][count]);
083E0:  BCF    FD8.0
083E2:  MOVLB  9
083E4:  RLCF   x81,W
083E6:  MOVWF  02
083E8:  RLCF   x82,W
083EA:  MOVWF  03
083EC:  MOVF   02,W
083EE:  ADDLW  84
083F0:  MOVWF  FE9
083F2:  MOVLW  05
083F4:  ADDWFC 03,W
083F6:  MOVWF  FEA
083F8:  MOVFF  FEC,993
083FC:  MOVF   FED,F
083FE:  MOVFF  FEF,992
08402:  BCF    FD8.0
08404:  RLCF   x81,W
08406:  MOVWF  02
08408:  RLCF   x82,W
0840A:  MOVWF  03
0840C:  MOVF   02,W
0840E:  ADDLW  82
08410:  MOVWF  FE9
08412:  MOVLW  07
08414:  ADDWFC 03,W
08416:  MOVWF  FEA
08418:  MOVFF  FEC,995
0841C:  MOVF   FED,F
0841E:  MOVFF  FEF,994
08422:  MOVLW  32
08424:  MOVWF  FF6
08426:  MOVLW  07
08428:  MOVWF  FF7
0842A:  MOVLW  00
0842C:  MOVWF  FF8
0842E:  MOVLW  0C
08430:  MOVWF  x96
08432:  MOVLB  0
08434:  CALL   1EE2
08438:  MOVFF  993,996
0843C:  MOVLW  37
0843E:  MOVLB  9
08440:  MOVWF  x97
08442:  MOVLB  0
08444:  CALL   20E0
08448:  MOVFF  992,996
0844C:  MOVLW  37
0844E:  MOVLB  9
08450:  MOVWF  x97
08452:  MOVLB  0
08454:  CALL   20E0
08458:  MOVLW  2C
0845A:  MOVLB  A
0845C:  MOVWF  x29
0845E:  MOVLB  0
08460:  CALL   1E60
08464:  MOVLW  20
08466:  MOVLB  A
08468:  MOVWF  x29
0846A:  MOVLB  0
0846C:  CALL   1E60
08470:  MOVFF  995,996
08474:  MOVLW  37
08476:  MOVLB  9
08478:  MOVWF  x97
0847A:  MOVLB  0
0847C:  CALL   20E0
08480:  MOVFF  994,996
08484:  MOVLW  37
08486:  MOVLB  9
08488:  MOVWF  x97
0848A:  MOVLB  0
0848C:  CALL   20E0
08490:  MOVLW  0D
08492:  MOVLB  A
08494:  MOVWF  x29
08496:  MOVLB  0
08498:  CALL   1E60
0849C:  MOVLW  0A
0849E:  MOVLB  A
084A0:  MOVWF  x29
084A2:  MOVLB  0
084A4:  CALL   1E60
....................             port2.sweep_step = count + 1; // Update CIGS2 step counter
084A8:  MOVLW  01
084AA:  MOVLB  9
084AC:  ADDWF  x81,W
084AE:  MOVLB  5
084B0:  MOVWF  x82
084B2:  MOVLW  00
084B4:  MOVLB  9
084B6:  ADDWFC x82,W
084B8:  MOVLB  5
084BA:  MOVWF  x83
084BC:  MOVLB  0
....................         }
.................... 
....................         count++;
084BE:  MOVLB  9
084C0:  INCF   x81,F
084C2:  BTFSC  FD8.2
084C4:  INCF   x82,F
.................... 
....................         // Check global exit conditions
....................         if (count >= 255) {
084C6:  MOVF   x82,F
084C8:  BTFSC  FD8.2
084CA:  BRA    84D2
084CC:  MOVLB  0
084CE:  GOTO   84E6
084D2:  MOVLB  0
084D4:  MOVLB  9
084D6:  MOVF   x81,W
084D8:  SUBLW  FE
084DA:  BTFSS  FD8.0
084DC:  BRA    84E4
084DE:  MOVLB  0
084E0:  GOTO   852A
084E4:  MOVLB  0
....................             fprintf(PC, "Maximum step count reached: %ld\r\n", count);
084E6:  MOVLW  4E
084E8:  MOVWF  FF6
084EA:  MOVLW  07
084EC:  MOVWF  FF7
084EE:  MOVLW  00
084F0:  MOVWF  FF8
084F2:  MOVLW  1C
084F4:  MOVLB  9
084F6:  MOVWF  x96
084F8:  MOVLB  0
084FA:  CALL   1EE2
084FE:  MOVLW  10
08500:  MOVWF  FE9
08502:  MOVFF  982,993
08506:  MOVFF  981,992
0850A:  GOTO   6A64
0850E:  MOVLW  0D
08510:  MOVLB  A
08512:  MOVWF  x29
08514:  MOVLB  0
08516:  CALL   1E60
0851A:  MOVLW  0A
0851C:  MOVLB  A
0851E:  MOVWF  x29
08520:  MOVLB  0
08522:  CALL   1E60
....................             break;
08526:  GOTO   8722
....................         }
....................         
....................         // Check CIGS1 specific conditions
....................         if (port1.active) {
0852A:  MOVLB  5
0852C:  BTFSC  x80.0
0852E:  BRA    8536
08530:  MOVLB  0
08532:  GOTO   8624
08536:  MOVLB  0
....................             if (port1.data_buffer[1][count-1] < curr_limit) {
08538:  MOVLW  01
0853A:  MOVLB  9
0853C:  SUBWF  x81,W
0853E:  MOVWF  x92
08540:  MOVLW  00
08542:  SUBWFB x82,W
08544:  MOVWF  x93
08546:  BCF    FD8.0
08548:  RLCF   x92,W
0854A:  MOVWF  02
0854C:  RLCF   x93,W
0854E:  MOVWF  03
08550:  MOVF   02,W
08552:  ADDLW  82
08554:  MOVWF  FE9
08556:  MOVLW  03
08558:  ADDWFC 03,W
0855A:  MOVWF  FEA
0855C:  MOVFF  FEC,993
08560:  MOVF   FED,F
08562:  MOVFF  FEF,992
08566:  MOVF   x93,W
08568:  MOVLB  1
0856A:  SUBWF  x80,W
0856C:  BTFSC  FD8.0
0856E:  BRA    8576
08570:  MOVLB  0
08572:  GOTO   85B0
08576:  MOVLB  0
08578:  BTFSS  FD8.2
0857A:  GOTO   8592
0857E:  MOVLB  1
08580:  MOVF   x7F,W
08582:  MOVLB  9
08584:  SUBWF  x92,W
08586:  BTFSS  FD8.0
08588:  BRA    8590
0858A:  MOVLB  0
0858C:  GOTO   85B0
08590:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current limit reached:");
08592:  MOVLW  70
08594:  MOVWF  FF6
08596:  MOVLW  07
08598:  MOVWF  FF7
0859A:  MOVLW  00
0859C:  MOVWF  FF8
0859E:  CALL   1EB2
....................                 port1.active = 0;
085A2:  MOVLB  5
085A4:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
085A6:  BCF    F94.0
085A8:  BCF    F8B.0
085AA:  MOVLB  0
....................             }
085AC:  GOTO   8624
....................             else if (port1.data_buffer[1][count-1] < curr_threshold) {
085B0:  MOVLW  01
085B2:  MOVLB  9
085B4:  SUBWF  x81,W
085B6:  MOVWF  x92
085B8:  MOVLW  00
085BA:  SUBWFB x82,W
085BC:  MOVWF  x93
085BE:  BCF    FD8.0
085C0:  RLCF   x92,W
085C2:  MOVWF  02
085C4:  RLCF   x93,W
085C6:  MOVWF  03
085C8:  MOVF   02,W
085CA:  ADDLW  82
085CC:  MOVWF  FE9
085CE:  MOVLW  03
085D0:  ADDWFC 03,W
085D2:  MOVWF  FEA
085D4:  MOVFF  FEC,993
085D8:  MOVF   FED,F
085DA:  MOVFF  FEF,992
085DE:  MOVF   x93,W
085E0:  MOVLB  1
085E2:  SUBWF  x7C,W
085E4:  BTFSC  FD8.0
085E6:  BRA    85EE
085E8:  MOVLB  0
085EA:  GOTO   8624
085EE:  MOVLB  0
085F0:  BTFSS  FD8.2
085F2:  GOTO   860A
085F6:  MOVLB  1
085F8:  MOVF   x7B,W
085FA:  MOVLB  9
085FC:  SUBWF  x92,W
085FE:  BTFSS  FD8.0
08600:  BRA    8608
08602:  MOVLB  0
08604:  GOTO   8624
08608:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current below threshold");
0860A:  MOVLW  8E
0860C:  MOVWF  FF6
0860E:  MOVLW  07
08610:  MOVWF  FF7
08612:  MOVLW  00
08614:  MOVWF  FF8
08616:  CALL   1EB2
....................                 port1.active = 0;
0861A:  MOVLB  5
0861C:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
0861E:  BCF    F94.0
08620:  BCF    F8B.0
08622:  MOVLB  0
....................             }
....................         }
....................         
....................         // Check CIGS2 specific conditions
....................         if (port2.active) {
08624:  MOVLB  9
08626:  BTFSC  x80.0
08628:  BRA    8630
0862A:  MOVLB  0
0862C:  GOTO   871E
08630:  MOVLB  0
....................             if (port2.data_buffer[1][count-1] < curr_limit) {
08632:  MOVLW  01
08634:  MOVLB  9
08636:  SUBWF  x81,W
08638:  MOVWF  x92
0863A:  MOVLW  00
0863C:  SUBWFB x82,W
0863E:  MOVWF  x93
08640:  BCF    FD8.0
08642:  RLCF   x92,W
08644:  MOVWF  02
08646:  RLCF   x93,W
08648:  MOVWF  03
0864A:  MOVF   02,W
0864C:  ADDLW  82
0864E:  MOVWF  FE9
08650:  MOVLW  07
08652:  ADDWFC 03,W
08654:  MOVWF  FEA
08656:  MOVFF  FEC,993
0865A:  MOVF   FED,F
0865C:  MOVFF  FEF,992
08660:  MOVF   x93,W
08662:  MOVLB  1
08664:  SUBWF  x80,W
08666:  BTFSC  FD8.0
08668:  BRA    8670
0866A:  MOVLB  0
0866C:  GOTO   86AA
08670:  MOVLB  0
08672:  BTFSS  FD8.2
08674:  GOTO   868C
08678:  MOVLB  1
0867A:  MOVF   x7F,W
0867C:  MOVLB  9
0867E:  SUBWF  x92,W
08680:  BTFSS  FD8.0
08682:  BRA    868A
08684:  MOVLB  0
08686:  GOTO   86AA
0868A:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current limit reached: ");
0868C:  MOVLW  AC
0868E:  MOVWF  FF6
08690:  MOVLW  07
08692:  MOVWF  FF7
08694:  MOVLW  00
08696:  MOVWF  FF8
08698:  CALL   1EB2
....................                 port2.active = 0;
0869C:  MOVLB  9
0869E:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
086A0:  BCF    F94.5
086A2:  BCF    F8B.5
086A4:  MOVLB  0
....................             }
086A6:  GOTO   871E
....................             else if (port2.data_buffer[1][count-1] < curr_threshold) {
086AA:  MOVLW  01
086AC:  MOVLB  9
086AE:  SUBWF  x81,W
086B0:  MOVWF  x92
086B2:  MOVLW  00
086B4:  SUBWFB x82,W
086B6:  MOVWF  x93
086B8:  BCF    FD8.0
086BA:  RLCF   x92,W
086BC:  MOVWF  02
086BE:  RLCF   x93,W
086C0:  MOVWF  03
086C2:  MOVF   02,W
086C4:  ADDLW  82
086C6:  MOVWF  FE9
086C8:  MOVLW  07
086CA:  ADDWFC 03,W
086CC:  MOVWF  FEA
086CE:  MOVFF  FEC,993
086D2:  MOVF   FED,F
086D4:  MOVFF  FEF,992
086D8:  MOVF   x93,W
086DA:  MOVLB  1
086DC:  SUBWF  x7C,W
086DE:  BTFSC  FD8.0
086E0:  BRA    86E8
086E2:  MOVLB  0
086E4:  GOTO   871E
086E8:  MOVLB  0
086EA:  BTFSS  FD8.2
086EC:  GOTO   8704
086F0:  MOVLB  1
086F2:  MOVF   x7B,W
086F4:  MOVLB  9
086F6:  SUBWF  x92,W
086F8:  BTFSS  FD8.0
086FA:  BRA    8702
086FC:  MOVLB  0
086FE:  GOTO   871E
08702:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current below threshold:");
08704:  MOVLW  CA
08706:  MOVWF  FF6
08708:  MOVLW  07
0870A:  MOVWF  FF7
0870C:  MOVLW  00
0870E:  MOVWF  FF8
08710:  CALL   1EB2
....................                 port2.active = 0;
08714:  MOVLB  9
08716:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
08718:  BCF    F94.5
0871A:  BCF    F8B.5
0871C:  MOVLB  0
....................             }
....................         }
0871E:  GOTO   8286
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     output_low(CONNECT_CIGS1);
08722:  BCF    F94.0
08724:  BCF    F8B.0
....................     output_low(CONNECT_CIGS2);
08726:  BCF    F94.5
08728:  BCF    F8B.5
....................     // output_high(EN_NPWR);
.................... 
....................     log_meas_data(&measured_data, &port1); // Log data for CIGS1
0872A:  MOVLW  09
0872C:  MOVLB  9
0872E:  MOVWF  x93
08730:  MOVLW  83
08732:  MOVWF  x92
08734:  MOVLW  01
08736:  MOVWF  x95
08738:  MOVLW  81
0873A:  MOVWF  x94
0873C:  MOVLB  0
0873E:  CALL   6BEE
....................     log_meas_data(&measured_data, &port2); // Log data for CIGS2
08742:  MOVLW  09
08744:  MOVLB  9
08746:  MOVWF  x93
08748:  MOVLW  83
0874A:  MOVWF  x92
0874C:  MOVLW  05
0874E:  MOVWF  x95
08750:  MOVLW  81
08752:  MOVWF  x94
08754:  MOVLB  0
08756:  CALL   6BEE
.................... 
....................     fprintf(PC, "End SWEEP with threshold\r\n");
0875A:  MOVLW  EA
0875C:  MOVWF  FF6
0875E:  MOVLW  07
08760:  MOVWF  FF7
08762:  MOVLW  00
08764:  MOVWF  FF8
08766:  CALL   1EB2
0876A:  GOTO   8C64 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data)
*
06C70:  CLRF   xD6
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
*
06BEE:  MOVLB  9
06BF0:  CLRF   x96
06BF2:  CLRF   x97
06BF4:  CLRF   x98
06BF6:  CLRF   x99
06BF8:  CLRF   x9A
06BFA:  CLRF   x9B
06BFC:  CLRF   x9C
06BFE:  CLRF   x9D
06C00:  CLRF   x9E
06C02:  CLRF   x9F
06C04:  CLRF   xA0
06C06:  CLRF   xA1
06C08:  CLRF   xA2
06C0A:  CLRF   xA3
06C0C:  CLRF   xA4
06C0E:  CLRF   xA5
06C10:  CLRF   xA6
06C12:  CLRF   xA7
06C14:  CLRF   xA8
06C16:  CLRF   xA9
06C18:  CLRF   xAA
06C1A:  CLRF   xAB
06C1C:  CLRF   xAC
06C1E:  CLRF   xAD
06C20:  CLRF   xAE
06C22:  CLRF   xAF
06C24:  CLRF   xB0
06C26:  CLRF   xB1
06C28:  CLRF   xB2
06C2A:  CLRF   xB3
06C2C:  CLRF   xB4
06C2E:  CLRF   xB5
06C30:  CLRF   xB6
06C32:  CLRF   xB7
06C34:  CLRF   xB8
06C36:  CLRF   xB9
06C38:  CLRF   xBA
06C3A:  CLRF   xBB
06C3C:  CLRF   xBC
06C3E:  CLRF   xBD
06C40:  CLRF   xBE
06C42:  CLRF   xBF
06C44:  CLRF   xC0
06C46:  CLRF   xC1
06C48:  CLRF   xC2
06C4A:  CLRF   xC3
06C4C:  CLRF   xC4
06C4E:  CLRF   xC5
06C50:  CLRF   xC6
06C52:  CLRF   xC7
06C54:  CLRF   xC8
06C56:  CLRF   xC9
06C58:  CLRF   xCA
06C5A:  CLRF   xCB
06C5C:  CLRF   xCC
06C5E:  CLRF   xCD
06C60:  CLRF   xCE
06C62:  CLRF   xCF
06C64:  CLRF   xD0
06C66:  CLRF   xD1
06C68:  CLRF   xD2
06C6A:  CLRF   xD3
06C6C:  CLRF   xD4
06C6E:  CLRF   xD5
....................     unsigned int8 packetdata_index = 0; // Index for packet data
.................... 
.................... 
....................     // Header creation
....................     packetdata[0] = START_MAKER;
*
06C72:  SETF   x96
....................     packetdata[1] = (START_MAKER & 0xF0) | (port_data->port_num & 0x0F);
06C74:  MOVF   x94,W
06C76:  MOVWF  FE9
06C78:  MOVF   x95,W
06C7A:  MOVWF  FEA
06C7C:  MOVF   FEF,W
06C7E:  ANDLW  0F
06C80:  IORLW  F0
06C82:  MOVWF  x97
....................     packetdata[2] = measured_data->time_sec >> 24 & 0xFF;
06C84:  MOVF   x92,W
06C86:  MOVWF  FE9
06C88:  MOVF   x93,W
06C8A:  MOVWF  FEA
06C8C:  MOVFF  FEF,9E6
06C90:  MOVFF  FEC,9E7
06C94:  MOVFF  FEC,9E8
06C98:  MOVFF  FEC,9E9
06C9C:  MOVF   FED,F
06C9E:  MOVF   FED,F
06CA0:  MOVF   FED,F
06CA2:  MOVFF  9E9,9E6
06CA6:  CLRF   xE7
06CA8:  CLRF   xE8
06CAA:  CLRF   xE9
06CAC:  MOVF   xE6,W
06CAE:  MOVWF  x98
....................     packetdata[3] = measured_data->time_sec >> 16 & 0xFF;
06CB0:  MOVF   x92,W
06CB2:  MOVWF  FE9
06CB4:  MOVF   x93,W
06CB6:  MOVWF  FEA
06CB8:  MOVFF  FEF,9E6
06CBC:  MOVFF  FEC,9E7
06CC0:  MOVFF  FEC,9E8
06CC4:  MOVFF  FEC,9E9
06CC8:  MOVF   FED,F
06CCA:  MOVF   FED,F
06CCC:  MOVF   FED,F
06CCE:  MOVFF  9E8,9E6
06CD2:  MOVFF  9E9,9E7
06CD6:  CLRF   xE8
06CD8:  CLRF   xE9
06CDA:  MOVF   xE6,W
06CDC:  MOVWF  x99
....................     packetdata[4] = measured_data->time_sec >> 8 & 0xFF;
06CDE:  MOVF   x92,W
06CE0:  MOVWF  FE9
06CE2:  MOVF   x93,W
06CE4:  MOVWF  FEA
06CE6:  MOVFF  FEF,9E6
06CEA:  MOVFF  FEC,9E7
06CEE:  MOVFF  FEC,9E8
06CF2:  MOVFF  FEC,9E9
06CF6:  MOVF   FED,F
06CF8:  MOVF   FED,F
06CFA:  MOVF   FED,F
06CFC:  MOVFF  9E7,9E6
06D00:  MOVFF  9E8,9E7
06D04:  MOVFF  9E9,9E8
06D08:  CLRF   xE9
06D0A:  MOVF   xE6,W
06D0C:  MOVWF  x9A
....................     packetdata[5] = measured_data->time_sec & 0xFF;
06D0E:  MOVF   x92,W
06D10:  MOVWF  FE9
06D12:  MOVF   x93,W
06D14:  MOVWF  FEA
06D16:  MOVFF  FEF,9E6
06D1A:  MOVFF  FEC,9E7
06D1E:  MOVFF  FEC,9E8
06D22:  MOVFF  FEC,9E9
06D26:  MOVF   FED,F
06D28:  MOVF   FED,F
06D2A:  MOVF   FED,F
06D2C:  MOVF   xE6,W
06D2E:  MOVWF  x9B
....................     packetdata[6] = (measured_data->time_msec & 0x0F) >>4 | measured_data->pd >> 8 & 0x0F;
06D30:  MOVLW  04
06D32:  ADDWF  x92,W
06D34:  MOVWF  FE9
06D36:  MOVLW  00
06D38:  ADDWFC x93,W
06D3A:  MOVWF  FEA
06D3C:  MOVF   FEF,W
06D3E:  ANDLW  0F
06D40:  MOVWF  00
06D42:  SWAPF  00,W
06D44:  MOVWF  xE6
06D46:  MOVLW  0F
06D48:  ANDWF  xE6,F
06D4A:  MOVLW  0D
06D4C:  ADDWF  x92,W
06D4E:  MOVWF  FE9
06D50:  MOVLW  00
06D52:  ADDWFC x93,W
06D54:  MOVWF  FEA
06D56:  MOVFF  FEC,9E8
06D5A:  MOVF   FED,F
06D5C:  MOVFF  FEF,9E7
06D60:  MOVFF  9E8,9E7
06D64:  CLRF   xE8
06D66:  MOVF   xE7,W
06D68:  ANDLW  0F
06D6A:  MOVWF  00
06D6C:  CLRF   03
06D6E:  MOVF   00,W
06D70:  IORWF  xE6,W
06D72:  MOVWF  x9C
....................     packetdata[7] = measured_data->pd & 0xFF;
06D74:  MOVLW  0D
06D76:  ADDWF  x92,W
06D78:  MOVWF  FE9
06D7A:  MOVLW  00
06D7C:  ADDWFC x93,W
06D7E:  MOVWF  FEA
06D80:  MOVFF  FEC,9E7
06D84:  MOVF   FED,F
06D86:  MOVFF  FEF,9E6
06D8A:  MOVF   xE6,W
06D8C:  MOVWF  x9D
....................     packetdata[8] = (measured_data->open_voltage >> 4) & 0xFF; // PD start low byte
06D8E:  MOVLW  05
06D90:  ADDWF  x92,W
06D92:  MOVWF  FE9
06D94:  MOVLW  00
06D96:  ADDWFC x93,W
06D98:  MOVWF  FEA
06D9A:  MOVFF  FEC,9E7
06D9E:  MOVF   FED,F
06DA0:  MOVFF  FEF,9E6
06DA4:  RRCF   xE7,F
06DA6:  RRCF   xE6,F
06DA8:  RRCF   xE7,F
06DAA:  RRCF   xE6,F
06DAC:  RRCF   xE7,F
06DAE:  RRCF   xE6,F
06DB0:  RRCF   xE7,F
06DB2:  RRCF   xE6,F
06DB4:  MOVLW  0F
06DB6:  ANDWF  xE7,F
06DB8:  MOVF   xE6,W
06DBA:  MOVWF  x9E
....................     packetdata[9] = (measured_data->open_voltage & 0x0F) << 4 | (measured_data->temp_py_top >> 8) & 0x0F;
06DBC:  MOVLW  05
06DBE:  ADDWF  x92,W
06DC0:  MOVWF  FE9
06DC2:  MOVLW  00
06DC4:  ADDWFC x93,W
06DC6:  MOVWF  FEA
06DC8:  MOVFF  FEC,9E7
06DCC:  MOVF   FED,F
06DCE:  MOVFF  FEF,9E6
06DD2:  MOVLW  0F
06DD4:  ANDWF  xE6,F
06DD6:  CLRF   xE7
06DD8:  RLCF   xE6,F
06DDA:  RLCF   xE7,F
06DDC:  RLCF   xE6,F
06DDE:  RLCF   xE7,F
06DE0:  RLCF   xE6,F
06DE2:  RLCF   xE7,F
06DE4:  RLCF   xE6,F
06DE6:  RLCF   xE7,F
06DE8:  MOVLW  F0
06DEA:  ANDWF  xE6,F
06DEC:  MOVLW  07
06DEE:  ADDWF  x92,W
06DF0:  MOVWF  FE9
06DF2:  MOVLW  00
06DF4:  ADDWFC x93,W
06DF6:  MOVWF  FEA
06DF8:  MOVFF  FEC,9E9
06DFC:  MOVF   FED,F
06DFE:  MOVFF  FEF,9E8
06E02:  MOVFF  9E9,9E8
06E06:  CLRF   xE9
06E08:  MOVF   xE8,W
06E0A:  ANDLW  0F
06E0C:  MOVWF  00
06E0E:  CLRF   03
06E10:  MOVF   00,W
06E12:  IORWF  xE6,W
06E14:  MOVWF  x9F
....................     packetdata[10] = measured_data->temp_py_top & 0xFF;
06E16:  MOVLW  07
06E18:  ADDWF  x92,W
06E1A:  MOVWF  FE9
06E1C:  MOVLW  00
06E1E:  ADDWFC x93,W
06E20:  MOVWF  FEA
06E22:  MOVFF  FEC,9E7
06E26:  MOVF   FED,F
06E28:  MOVFF  FEF,9E6
06E2C:  MOVF   xE6,W
06E2E:  MOVWF  xA0
....................     packetdata[11] = (measured_data->temp_py_bot >> 4) & 0xFF; // PD start low byte
06E30:  MOVLW  09
06E32:  ADDWF  x92,W
06E34:  MOVWF  FE9
06E36:  MOVLW  00
06E38:  ADDWFC x93,W
06E3A:  MOVWF  FEA
06E3C:  MOVFF  FEC,9E7
06E40:  MOVF   FED,F
06E42:  MOVFF  FEF,9E6
06E46:  RRCF   xE7,F
06E48:  RRCF   xE6,F
06E4A:  RRCF   xE7,F
06E4C:  RRCF   xE6,F
06E4E:  RRCF   xE7,F
06E50:  RRCF   xE6,F
06E52:  RRCF   xE7,F
06E54:  RRCF   xE6,F
06E56:  MOVLW  0F
06E58:  ANDWF  xE7,F
06E5A:  MOVF   xE6,W
06E5C:  MOVWF  xA1
....................     packetdata[12] = (measured_data->temp_py_bot & 0x0F) << 4 | (measured_data->temp_mis7 >> 8) & 0x0F;
06E5E:  MOVLW  09
06E60:  ADDWF  x92,W
06E62:  MOVWF  FE9
06E64:  MOVLW  00
06E66:  ADDWFC x93,W
06E68:  MOVWF  FEA
06E6A:  MOVFF  FEC,9E7
06E6E:  MOVF   FED,F
06E70:  MOVFF  FEF,9E6
06E74:  MOVLW  0F
06E76:  ANDWF  xE6,F
06E78:  CLRF   xE7
06E7A:  RLCF   xE6,F
06E7C:  RLCF   xE7,F
06E7E:  RLCF   xE6,F
06E80:  RLCF   xE7,F
06E82:  RLCF   xE6,F
06E84:  RLCF   xE7,F
06E86:  RLCF   xE6,F
06E88:  RLCF   xE7,F
06E8A:  MOVLW  F0
06E8C:  ANDWF  xE6,F
06E8E:  MOVLW  0B
06E90:  ADDWF  x92,W
06E92:  MOVWF  FE9
06E94:  MOVLW  00
06E96:  ADDWFC x93,W
06E98:  MOVWF  FEA
06E9A:  MOVFF  FEC,9E9
06E9E:  MOVF   FED,F
06EA0:  MOVFF  FEF,9E8
06EA4:  MOVFF  9E9,9E8
06EA8:  CLRF   xE9
06EAA:  MOVF   xE8,W
06EAC:  ANDLW  0F
06EAE:  MOVWF  00
06EB0:  CLRF   03
06EB2:  MOVF   00,W
06EB4:  IORWF  xE6,W
06EB6:  MOVWF  xA2
....................     packetdata[13] = measured_data->temp_mis7 & 0xFF;
06EB8:  MOVLW  0B
06EBA:  ADDWF  x92,W
06EBC:  MOVWF  FE9
06EBE:  MOVLW  00
06EC0:  ADDWFC x93,W
06EC2:  MOVWF  FEA
06EC4:  MOVFF  FEC,9E7
06EC8:  MOVF   FED,F
06ECA:  MOVFF  FEF,9E6
06ECE:  MOVF   xE6,W
06ED0:  MOVWF  xA3
.................... 
....................     packetdata_index = 14; // Start index for data
06ED2:  MOVLW  0E
06ED4:  MOVWF  xD6
.................... 
....................     for (unsigned int16 i = 0; i < port_data->sweep_step ; i++) {
06ED6:  CLRF   xD8
06ED8:  CLRF   xD7
06EDA:  MOVLB  0
06EDC:  MOVLW  01
06EDE:  MOVLB  9
06EE0:  ADDWF  x94,W
06EE2:  MOVWF  FE9
06EE4:  MOVLW  00
06EE6:  ADDWFC x95,W
06EE8:  MOVWF  FEA
06EEA:  MOVFF  FEC,03
06EEE:  MOVF   FED,F
06EF0:  MOVF   FEF,W
06EF2:  MOVWF  01
06EF4:  MOVF   xD8,W
06EF6:  SUBWF  03,W
06EF8:  BTFSC  FD8.0
06EFA:  BRA    6F02
06EFC:  MOVLB  0
06EFE:  GOTO   70DA
06F02:  MOVLB  0
06F04:  BTFSS  FD8.2
06F06:  GOTO   6F1C
06F0A:  MOVF   01,W
06F0C:  MOVLB  9
06F0E:  SUBWF  xD7,W
06F10:  BTFSS  FD8.0
06F12:  BRA    6F1A
06F14:  MOVLB  0
06F16:  GOTO   70DA
06F1A:  MOVLB  0
....................         unsigned int16 data0 = port_data->data_buffer[0][i];
....................         unsigned int16 data1 = port_data->data_buffer[1][i];
06F1C:  BCF    FD8.0
06F1E:  MOVLB  9
06F20:  RLCF   xD7,W
06F22:  MOVWF  02
06F24:  RLCF   xD8,W
06F26:  MOVWF  03
06F28:  MOVF   02,W
06F2A:  ADDLW  03
06F2C:  MOVWF  01
06F2E:  MOVLW  00
06F30:  ADDWFC 03,F
06F32:  MOVF   01,W
06F34:  ADDWF  x94,W
06F36:  MOVWF  FE9
06F38:  MOVF   x95,W
06F3A:  ADDWFC 03,W
06F3C:  MOVWF  FEA
06F3E:  MOVFF  FEC,9DA
06F42:  MOVF   FED,F
06F44:  MOVFF  FEF,9D9
06F48:  BCF    FD8.0
06F4A:  RLCF   xD7,W
06F4C:  MOVWF  02
06F4E:  RLCF   xD8,W
06F50:  MOVWF  03
06F52:  MOVF   02,W
06F54:  ADDLW  01
06F56:  MOVWF  01
06F58:  MOVLW  02
06F5A:  ADDWFC 03,F
06F5C:  MOVF   01,W
06F5E:  ADDWF  x94,W
06F60:  MOVWF  FE9
06F62:  MOVF   x95,W
06F64:  ADDWFC 03,W
06F66:  MOVWF  FEA
06F68:  MOVFF  FEC,9DC
06F6C:  MOVF   FED,F
06F6E:  MOVFF  FEF,9DB
06F72:  MOVLB  0
.................... 
....................         packetdata[packetdata_index++] = (data0 >> 4) & 0xFF;
06F74:  MOVLB  9
06F76:  MOVF   xD6,W
06F78:  INCF   xD6,F
06F7A:  CLRF   03
06F7C:  ADDLW  96
06F7E:  MOVWF  FE9
06F80:  MOVLW  09
06F82:  ADDWFC 03,W
06F84:  MOVWF  FEA
06F86:  RRCF   xDA,W
06F88:  MOVWF  xE9
06F8A:  RRCF   xD9,W
06F8C:  MOVWF  xE8
06F8E:  RRCF   xE9,F
06F90:  RRCF   xE8,F
06F92:  RRCF   xE9,F
06F94:  RRCF   xE8,F
06F96:  RRCF   xE9,F
06F98:  RRCF   xE8,F
06F9A:  MOVLW  0F
06F9C:  ANDWF  xE9,F
06F9E:  MOVF   xE8,W
06FA0:  MOVWF  00
06FA2:  CLRF   03
06FA4:  MOVF   00,W
06FA6:  MOVWF  FEF
....................         packetdata[packetdata_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
06FA8:  MOVF   xD6,W
06FAA:  INCF   xD6,F
06FAC:  CLRF   03
06FAE:  ADDLW  96
06FB0:  MOVWF  FE9
06FB2:  MOVLW  09
06FB4:  ADDWFC 03,W
06FB6:  MOVWF  FEA
06FB8:  MOVF   xD9,W
06FBA:  ANDLW  0F
06FBC:  MOVWF  xE8
06FBE:  CLRF   xE9
06FC0:  RLCF   xE8,F
06FC2:  RLCF   xE9,F
06FC4:  RLCF   xE8,F
06FC6:  RLCF   xE9,F
06FC8:  RLCF   xE8,F
06FCA:  RLCF   xE9,F
06FCC:  RLCF   xE8,F
06FCE:  RLCF   xE9,F
06FD0:  MOVLW  F0
06FD2:  ANDWF  xE8,F
06FD4:  MOVFF  9DC,9EA
06FD8:  CLRF   xEB
06FDA:  MOVF   xEA,W
06FDC:  ANDLW  0F
06FDE:  MOVWF  00
06FE0:  CLRF   03
06FE2:  MOVF   00,W
06FE4:  IORWF  xE8,W
06FE6:  MOVWF  00
06FE8:  MOVF   03,W
06FEA:  IORWF  xE9,W
06FEC:  MOVWF  03
06FEE:  MOVF   00,W
06FF0:  MOVWF  FEF
....................         packetdata[packetdata_index++] = data1 & 0xFF;
06FF2:  MOVF   xD6,W
06FF4:  INCF   xD6,F
06FF6:  CLRF   03
06FF8:  ADDLW  96
06FFA:  MOVWF  FE9
06FFC:  MOVLW  09
06FFE:  ADDWFC 03,W
07000:  MOVWF  FEA
07002:  MOVF   xDB,W
07004:  MOVWF  00
07006:  CLRF   03
07008:  MOVF   00,W
0700A:  MOVWF  FEF
.................... 
....................         if (packetdata_index + 3 >= PACKET_SIZE - 1) {
0700C:  MOVLW  03
0700E:  ADDWF  xD6,W
07010:  SUBLW  3E
07012:  BTFSS  FD8.0
07014:  BRA    701C
07016:  MOVLB  0
07018:  GOTO   70CC
0701C:  MOVLB  0
....................             packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
0701E:  MOVLW  09
07020:  MOVLB  9
07022:  MOVWF  xE7
07024:  MOVLW  96
07026:  MOVWF  xE6
07028:  MOVLW  3F
0702A:  MOVWF  xE8
0702C:  MOVLB  0
0702E:  CALL   409E
07032:  MOVFF  01,9D5
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
07036:  MOVLB  1
07038:  MOVF   x10,W
0703A:  MOVLB  9
0703C:  MOVWF  xDD
0703E:  MOVLB  1
07040:  MOVF   x11,W
07042:  MOVLB  9
07044:  MOVWF  xDE
07046:  MOVLW  16
07048:  MOVLB  1
0704A:  ADDWF  x12,W
0704C:  MOVLB  9
0704E:  MOVWF  xDF
07050:  MOVLW  00
07052:  MOVLB  1
07054:  ADDWFC x13,W
07056:  MOVLB  9
07058:  MOVWF  xE0
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0705A:  MOVFF  F1,A29
0705E:  MOVFF  F0,A28
07062:  MOVFF  EF,A27
07066:  MOVFF  EE,A26
0706A:  MOVFF  9E0,A2D
0706E:  MOVFF  9DF,A2C
07072:  MOVFF  9DE,A2B
07076:  MOVFF  9DD,A2A
0707A:  MOVLW  09
0707C:  MOVLB  A
0707E:  MOVWF  x2F
07080:  MOVLW  96
07082:  MOVWF  x2E
07084:  CLRF   x31
07086:  MOVLW  40
07088:  MOVWF  x30
0708A:  MOVLB  0
0708C:  CALL   3406
....................             misf_meas_use_counter += PACKET_SIZE;
07090:  MOVLW  40
07092:  MOVLB  1
07094:  ADDWF  x10,F
07096:  MOVLW  00
07098:  ADDWFC x11,F
0709A:  MOVLW  00
0709C:  ADDWFC x12,F
0709E:  MOVLW  00
070A0:  ADDWFC x13,F
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
070A2:  MOVLW  40
070A4:  ADDWF  x15,F
070A6:  MOVLW  00
070A8:  ADDWFC x16,F
070AA:  MOVLW  00
070AC:  ADDWFC x17,F
070AE:  MOVLW  00
070B0:  ADDWFC x18,F
....................             packetdata_index = 0;
070B2:  MOVLB  9
070B4:  CLRF   xD6
....................             memset(packetdata, 0x00, PACKET_SIZE);
070B6:  MOVLW  09
070B8:  MOVWF  FEA
070BA:  MOVLW  96
070BC:  MOVWF  FE9
070BE:  CLRF   00
070C0:  CLRF   02
070C2:  MOVLW  40
070C4:  MOVWF  01
070C6:  MOVLB  0
070C8:  CALL   4488
....................         }
070CC:  MOVLB  9
070CE:  INCF   xD7,F
070D0:  BTFSC  FD8.2
070D2:  INCF   xD8,F
070D4:  MOVLB  0
070D6:  GOTO   6EDC
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packetdata_index > 0) {
070DA:  MOVLB  9
070DC:  MOVF   xD6,F
070DE:  BTFSS  FD8.2
070E0:  BRA    70E8
070E2:  MOVLB  0
070E4:  GOTO   71B4
070E8:  MOVLB  0
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE - 1; j++) {
070EA:  MOVFF  9D6,9E1
070EE:  MOVLB  9
070F0:  MOVF   xE1,W
070F2:  SUBLW  3E
070F4:  BTFSC  FD8.0
070F6:  BRA    70FE
070F8:  MOVLB  0
070FA:  GOTO   711E
070FE:  MOVLB  0
....................             packetdata[j] = 0x00;
07100:  CLRF   03
07102:  MOVLB  9
07104:  MOVF   xE1,W
07106:  ADDLW  96
07108:  MOVWF  FE9
0710A:  MOVLW  09
0710C:  ADDWFC 03,W
0710E:  MOVWF  FEA
07110:  CLRF   FEF
07112:  MOVLB  0
07114:  MOVLB  9
07116:  INCF   xE1,F
07118:  MOVLB  0
0711A:  GOTO   70EE
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
0711E:  MOVLW  09
07120:  MOVLB  9
07122:  MOVWF  xE7
07124:  MOVLW  96
07126:  MOVWF  xE6
07128:  MOVLW  3F
0712A:  MOVWF  xE8
0712C:  MOVLB  0
0712E:  CALL   409E
07132:  MOVFF  01,9D5
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
07136:  MOVLB  1
07138:  MOVF   x10,W
0713A:  MOVLB  9
0713C:  MOVWF  xE2
0713E:  MOVLB  1
07140:  MOVF   x11,W
07142:  MOVLB  9
07144:  MOVWF  xE3
07146:  MOVLW  16
07148:  MOVLB  1
0714A:  ADDWF  x12,W
0714C:  MOVLB  9
0714E:  MOVWF  xE4
07150:  MOVLW  00
07152:  MOVLB  1
07154:  ADDWFC x13,W
07156:  MOVLB  9
07158:  MOVWF  xE5
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0715A:  MOVFF  F1,A29
0715E:  MOVFF  F0,A28
07162:  MOVFF  EF,A27
07166:  MOVFF  EE,A26
0716A:  MOVFF  9E5,A2D
0716E:  MOVFF  9E4,A2C
07172:  MOVFF  9E3,A2B
07176:  MOVFF  9E2,A2A
0717A:  MOVLW  09
0717C:  MOVLB  A
0717E:  MOVWF  x2F
07180:  MOVLW  96
07182:  MOVWF  x2E
07184:  CLRF   x31
07186:  MOVLW  40
07188:  MOVWF  x30
0718A:  MOVLB  0
0718C:  CALL   3406
....................         misf_meas_use_counter += PACKET_SIZE;
07190:  MOVLW  40
07192:  MOVLB  1
07194:  ADDWF  x10,F
07196:  MOVLW  00
07198:  ADDWFC x11,F
0719A:  MOVLW  00
0719C:  ADDWFC x12,F
0719E:  MOVLW  00
071A0:  ADDWFC x13,F
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
071A2:  MOVLW  40
071A4:  ADDWF  x15,F
071A6:  MOVLW  00
071A8:  ADDWFC x16,F
071AA:  MOVLW  00
071AC:  ADDWFC x17,F
071AE:  MOVLW  00
071B0:  ADDWFC x18,F
071B2:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "End CIGS data conversion\r\n");
071B4:  MOVLW  06
071B6:  MOVWF  FF6
071B8:  MOVLW  08
071BA:  MOVWF  FF7
071BC:  MOVLW  00
071BE:  MOVWF  FF8
071C0:  CALL   1EB2
....................     write_misf_address_area(); // Write the mission flash address area
071C4:  CALL   3AE2
071C8:  RETURN 0
.................... }
.................... 
.................... MEASUREMENT_DATA create_meas_data()
.................... {
....................     MEASUREMENT_DATA data;
....................     data.time_sec = get_current_sec();
*
069DA:  CALL   30E8
069DE:  MOVFF  03,99B
069E2:  MOVFF  02,99A
069E6:  MOVFF  01,999
069EA:  MOVFF  00,998
....................     data.time_msec = get_current_msec();
069EE:  GOTO   69AA
069F2:  MOVFF  01,99C
....................     data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
069F6:  MOVLW  0D
069F8:  MOVLB  9
069FA:  MOVWF  xA7
069FC:  MOVLB  0
069FE:  CALL   2054
06A02:  MOVFF  02,9A0
06A06:  MOVFF  01,99F
....................     data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
06A0A:  MOVLW  0E
06A0C:  MOVLB  9
06A0E:  MOVWF  xA7
06A10:  MOVLB  0
06A12:  CALL   2054
06A16:  MOVFF  02,9A2
06A1A:  MOVFF  01,9A1
....................     data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
06A1E:  MOVLW  0C
06A20:  MOVLB  9
06A22:  MOVWF  xA7
06A24:  MOVLB  0
06A26:  CALL   2054
06A2A:  MOVFF  02,9A4
06A2E:  MOVFF  01,9A3
....................     data.pd = ad7490_read(ADC_PD);
06A32:  MOVLW  0F
06A34:  MOVLB  9
06A36:  MOVWF  xA7
06A38:  MOVLB  0
06A3A:  CALL   2054
06A3E:  MOVFF  02,9A6
06A42:  MOVFF  01,9A5
....................     data.open_voltage = ad7490_read(ADC_CIGS1_VOLT); // Assuming this is the correct ADC channel for open voltage
06A46:  MOVLB  9
06A48:  CLRF   xA7
06A4A:  MOVLB  0
06A4C:  CALL   2054
06A50:  MOVFF  02,99E
06A54:  MOVFF  01,99D
....................     return data;
06A58:  MOVLW  98
06A5A:  MOVWF  01
06A5C:  MOVLW  09
06A5E:  MOVWF  02
06A60:  GOTO   8264 (RETURN)
.................... }
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03DC2:  CALL   30E8
03DC6:  MOVFF  03,271
03DCA:  MOVFF  02,270
03DCE:  MOVFF  01,26F
03DD2:  MOVFF  00,26E
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03DD6:  MOVFF  271,277
03DDA:  MOVLB  2
03DDC:  CLRF   x78
03DDE:  CLRF   x79
03DE0:  CLRF   x7A
03DE2:  MOVF   x77,W
03DE4:  MOVWF  x68
....................     piclog[1] = (time >> 16) & 0xFF;
03DE6:  MOVFF  270,277
03DEA:  MOVFF  271,278
03DEE:  CLRF   x79
03DF0:  CLRF   x7A
03DF2:  MOVF   x77,W
03DF4:  MOVWF  x69
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03DF6:  MOVFF  26F,277
03DFA:  MOVFF  270,278
03DFE:  MOVFF  271,279
03E02:  CLRF   x7A
03E04:  MOVF   x77,W
03E06:  MOVWF  x6A
....................     piclog[3] = time & 0xFF;         // Time low byte
03E08:  MOVF   x6E,W
03E0A:  MOVWF  x6B
....................     piclog[4] = function;            // Function code
03E0C:  MOVFF  266,26C
....................     piclog[5] = parameter;           // Parameter code
03E10:  MOVFF  267,26D
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03E14:  MOVLB  1
03E16:  MOVF   x06,W
03E18:  MOVLB  2
03E1A:  MOVWF  x72
03E1C:  MOVLB  1
03E1E:  MOVF   x07,W
03E20:  MOVLB  2
03E22:  MOVWF  x73
03E24:  MOVLW  02
03E26:  MOVLB  1
03E28:  ADDWF  x08,W
03E2A:  MOVLB  2
03E2C:  MOVWF  x74
03E2E:  MOVLW  00
03E30:  MOVLB  1
03E32:  ADDWFC x09,W
03E34:  MOVLB  2
03E36:  MOVWF  x75
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03E38:  MOVFF  F1,A29
03E3C:  MOVFF  F0,A28
03E40:  MOVFF  EF,A27
03E44:  MOVFF  EE,A26
03E48:  MOVLB  0
03E4A:  CALL   254C
03E4E:  MOVF   01,F
03E50:  BTFSS  FD8.2
03E52:  GOTO   3E66
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03E56:  MOVLW  22
03E58:  MOVWF  FF6
03E5A:  MOVLW  08
03E5C:  MOVWF  FF7
03E5E:  MOVLW  00
03E60:  MOVWF  FF8
03E62:  CALL   1EB2
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03E66:  MOVFF  F1,A29
03E6A:  MOVFF  F0,A28
03E6E:  MOVFF  EF,A27
03E72:  MOVFF  EE,A26
03E76:  MOVFF  275,A2D
03E7A:  MOVFF  274,A2C
03E7E:  MOVFF  273,A2B
03E82:  MOVFF  272,A2A
03E86:  MOVLW  02
03E88:  MOVLB  A
03E8A:  MOVWF  x2F
03E8C:  MOVLW  68
03E8E:  MOVWF  x2E
03E90:  CLRF   x31
03E92:  MOVLW  06
03E94:  MOVWF  x30
03E96:  MOVLB  0
03E98:  CALL   3406
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03E9C:  MOVLW  06
03E9E:  MOVLB  1
03EA0:  ADDWF  x06,F
03EA2:  MOVLW  00
03EA4:  ADDWFC x07,F
03EA6:  MOVLW  00
03EA8:  ADDWFC x08,F
03EAA:  MOVLW  00
03EAC:  ADDWFC x09,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03EAE:  MOVLW  06
03EB0:  ADDWF  x0B,F
03EB2:  MOVLW  00
03EB4:  ADDWFC x0C,F
03EB6:  MOVLW  00
03EB8:  ADDWFC x0D,F
03EBA:  MOVLW  00
03EBC:  ADDWFC x0E,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03EBE:  MOVLW  06
03EC0:  ADDWF  x0F,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03EC2:  MOVLW  06
03EC4:  ADDWF  x0F,W
03EC6:  SUBLW  3F
03EC8:  BTFSS  FD8.0
03ECA:  BRA    3ED2
03ECC:  MOVLB  0
03ECE:  GOTO   3F34
03ED2:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03ED4:  MOVLB  1
03ED6:  MOVF   x06,W
03ED8:  MOVLB  2
03EDA:  MOVWF  x72
03EDC:  MOVLB  1
03EDE:  MOVF   x07,W
03EE0:  MOVLB  2
03EE2:  MOVWF  x73
03EE4:  MOVLW  02
03EE6:  MOVLB  1
03EE8:  ADDWF  x08,W
03EEA:  MOVLB  2
03EEC:  MOVWF  x74
03EEE:  MOVLW  00
03EF0:  MOVLB  1
03EF2:  ADDWFC x09,W
03EF4:  MOVLB  2
03EF6:  MOVWF  x75
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03EF8:  MOVFF  F1,A29
03EFC:  MOVFF  F0,A28
03F00:  MOVFF  EF,A27
03F04:  MOVFF  EE,A26
03F08:  MOVFF  275,A2D
03F0C:  MOVFF  274,A2C
03F10:  MOVFF  273,A2B
03F14:  MOVFF  272,A2A
03F18:  MOVLW  01
03F1A:  MOVLB  A
03F1C:  MOVWF  x2F
03F1E:  MOVLW  1A
03F20:  MOVWF  x2E
03F22:  CLRF   x31
03F24:  MOVLW  06
03F26:  MOVWF  x30
03F28:  MOVLB  0
03F2A:  CALL   3406
....................         misf_piclog_write_counter = 0;
03F2E:  MOVLB  1
03F30:  CLRF   x0F
03F32:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03F34:  CALL   3AE2
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03F38:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... void update_misf_counters(int8 mission_id, int16 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... void update_misf_counters(int8 mission_id, int16 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"         // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"        // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数
.................... 
.................... void read_smf_header()
.................... {
....................     int8 read_data[PACKET_SIZE];
....................     int8 retry_count;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
09482:  MOVLB  2
09484:  CLRF   x2B
09486:  MOVLB  0
09488:  MOVLB  2
0948A:  MOVF   x2B,W
0948C:  SUBLW  04
0948E:  BTFSC  FD8.0
09490:  BRA    9498
09492:  MOVLB  0
09494:  GOTO   9542
09498:  MOVLB  0
....................     {
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, read_data, PACKET_SIZE);
0949A:  MOVFF  F5,270
0949E:  MOVFF  F4,26F
094A2:  MOVFF  F3,26E
094A6:  MOVFF  F2,26D
094AA:  MOVLW  06
094AC:  MOVLB  2
094AE:  MOVWF  x74
094B0:  MOVLW  AA
094B2:  MOVWF  x73
094B4:  CLRF   x72
094B6:  CLRF   x71
094B8:  MOVLW  01
094BA:  MOVWF  x76
094BC:  MOVLW  EB
094BE:  MOVWF  x75
094C0:  CLRF   x7A
094C2:  CLRF   x79
094C4:  CLRF   x78
094C6:  MOVLW  40
094C8:  MOVWF  x77
094CA:  MOVLB  0
094CC:  CALL   2612
....................         if (is_crc_valid(read_data, PACKET_SIZE-1))
094D0:  MOVLW  01
094D2:  MOVLB  2
094D4:  MOVWF  x6E
094D6:  MOVLW  EB
094D8:  MOVWF  x6D
094DA:  MOVLW  3F
094DC:  MOVWF  x6F
094DE:  MOVLB  0
094E0:  CALL   9374
094E4:  MOVF   01,F
094E6:  BTFSC  FD8.2
094E8:  GOTO   9538
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
094EC:  MOVLW  01
094EE:  MOVLB  2
094F0:  ADDWF  x2B,W
094F2:  MOVWF  x2C
094F4:  MOVLW  44
094F6:  MOVWF  FF6
094F8:  MOVLW  08
094FA:  MOVWF  FF7
094FC:  MOVLW  00
094FE:  MOVWF  FF8
09500:  MOVLW  23
09502:  MOVLB  9
09504:  MOVWF  x96
09506:  MOVLB  0
09508:  CALL   1EE2
0950C:  MOVFF  22C,26E
09510:  MOVLW  18
09512:  MOVLB  2
09514:  MOVWF  x6F
09516:  MOVLB  0
09518:  CALL   9056
0951C:  MOVLW  0D
0951E:  MOVLB  A
09520:  MOVWF  x29
09522:  MOVLB  0
09524:  CALL   1E60
09528:  MOVLW  0A
0952A:  MOVLB  A
0952C:  MOVWF  x29
0952E:  MOVLB  0
09530:  CALL   1E60
....................             break;
09534:  GOTO   9542
....................         }
09538:  MOVLB  2
0953A:  INCF   x2B,F
0953C:  MOVLB  0
0953E:  GOTO   9488
....................     }
....................     param.meas.used_size = lsb_array_to_int32(read_data, 0);
09542:  MOVLW  01
09544:  MOVLB  2
09546:  MOVWF  x2D
09548:  MOVLW  EB
0954A:  MOVWF  x2C
0954C:  CLRF   x2E
0954E:  MOVLB  0
09550:  CALL   93C2
09554:  MOVFF  03,124
09558:  MOVFF  02,123
0955C:  MOVFF  01,122
09560:  MOVFF  00,121
....................     param.meas.loop_counter = read_data[4];
09564:  MOVLB  1
09566:  CLRF   x28
09568:  CLRF   x27
0956A:  CLRF   x26
0956C:  MOVFF  1EF,125
....................     param.piclog.used_size = lsb_array_to_int32(read_data, 5);
09570:  MOVLW  01
09572:  MOVLB  2
09574:  MOVWF  x2D
09576:  MOVLW  EB
09578:  MOVWF  x2C
0957A:  MOVLW  05
0957C:  MOVWF  x2E
0957E:  MOVLB  0
09580:  CALL   93C2
09584:  MOVFF  03,12F
09588:  MOVFF  02,12E
0958C:  MOVFF  01,12D
09590:  MOVFF  00,12C
....................     param.piclog.loop_counter = read_data[9];
09594:  MOVLB  1
09596:  CLRF   x33
09598:  CLRF   x32
0959A:  CLRF   x31
0959C:  MOVFF  1F4,130
095A0:  MOVLB  0
095A2:  GOTO   9E9A (RETURN)
.................... }
.................... 
.................... void write_smf_header()
.................... {
....................     int8 writedata[PACKET_SIZE];
.................... 
....................     // ヘッダー情報をwritedataに設定
....................     int32_to_be_array(param.meas.used_size, writedata, 0);
*
09834:  MOVFF  124,270
09838:  MOVFF  123,26F
0983C:  MOVFF  122,26E
09840:  MOVFF  121,26D
09844:  MOVLW  01
09846:  MOVLB  2
09848:  MOVWF  x72
0984A:  MOVLW  EB
0984C:  MOVWF  x71
0984E:  CLRF   x73
09850:  MOVLB  0
09852:  CALL   97C4
....................     writedata[4] = param.meas.loop_counter;
09856:  MOVFF  125,1EF
....................     int32_to_be_array(param.piclog.used_size, writedata, 5);
0985A:  MOVFF  12F,270
0985E:  MOVFF  12E,26F
09862:  MOVFF  12D,26E
09866:  MOVFF  12C,26D
0986A:  MOVLW  01
0986C:  MOVLB  2
0986E:  MOVWF  x72
09870:  MOVLW  EB
09872:  MOVWF  x71
09874:  MOVLW  05
09876:  MOVWF  x73
09878:  MOVLB  0
0987A:  CALL   97C4
....................     writedata[9] = param.piclog.loop_counter;
0987E:  MOVFF  130,1F4
.................... 
....................     writedata[63] = calc_crc8(writedata, PACKET_SIZE-1); // CRCを計算してバッファに書き込み
09882:  MOVLW  01
09884:  MOVLB  9
09886:  MOVWF  xE7
09888:  MOVLW  EB
0988A:  MOVWF  xE6
0988C:  MOVLW  3F
0988E:  MOVWF  xE8
09890:  MOVLB  0
09892:  CALL   409E
09896:  MOVFF  01,22A
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
0989A:  MOVLB  2
0989C:  BCF    x6C.0
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0989E:  CLRF   x6B
098A0:  MOVLB  0
098A2:  MOVLB  2
098A4:  MOVF   x6B,W
098A6:  SUBLW  04
098A8:  BTFSC  FD8.0
098AA:  BRA    98B2
098AC:  MOVLB  0
098AE:  GOTO   99B2
098B2:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
098B4:  MOVFF  F5,A29
098B8:  MOVFF  F4,A28
098BC:  MOVFF  F3,A27
098C0:  MOVFF  F2,A26
098C4:  MOVLW  06
098C6:  MOVLB  A
098C8:  MOVWF  x2D
098CA:  MOVLW  AA
098CC:  MOVWF  x2C
098CE:  CLRF   x2B
098D0:  CLRF   x2A
098D2:  MOVLB  0
098D4:  CALL   378A
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, writedata, PACKET_SIZE); // ヘッダーを書き込み
098D8:  MOVFF  F5,A29
098DC:  MOVFF  F4,A28
098E0:  MOVFF  F3,A27
098E4:  MOVFF  F2,A26
098E8:  MOVLW  06
098EA:  MOVLB  A
098EC:  MOVWF  x2D
098EE:  MOVLW  AA
098F0:  MOVWF  x2C
098F2:  CLRF   x2B
098F4:  CLRF   x2A
098F6:  MOVLW  01
098F8:  MOVWF  x2F
098FA:  MOVLW  EB
098FC:  MOVWF  x2E
098FE:  CLRF   x31
09900:  MOVLW  40
09902:  MOVWF  x30
09904:  MOVLB  0
09906:  CALL   3406
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0990A:  MOVFF  F5,270
0990E:  MOVFF  F4,26F
09912:  MOVFF  F3,26E
09916:  MOVFF  F2,26D
0991A:  MOVLW  06
0991C:  MOVLB  2
0991E:  MOVWF  x74
09920:  MOVLW  AA
09922:  MOVWF  x73
09924:  CLRF   x72
09926:  CLRF   x71
09928:  MOVLW  02
0992A:  MOVWF  x76
0992C:  MOVLW  2B
0992E:  MOVWF  x75
09930:  CLRF   x7A
09932:  CLRF   x79
09934:  CLRF   x78
09936:  MOVLW  40
09938:  MOVWF  x77
0993A:  MOVLB  0
0993C:  CALL   2612
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
09940:  MOVLW  02
09942:  MOVLB  2
09944:  MOVWF  x6E
09946:  MOVLW  2B
09948:  MOVWF  x6D
0994A:  MOVLW  3F
0994C:  MOVWF  x6F
0994E:  MOVLB  0
09950:  CALL   9374
09954:  MOVF   01,F
09956:  BTFSC  FD8.2
09958:  GOTO   99A8
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0995C:  MOVLW  01
0995E:  MOVLB  2
09960:  ADDWF  x6B,W
09962:  MOVWF  x6D
09964:  MOVLW  6C
09966:  MOVWF  FF6
09968:  MOVLW  08
0996A:  MOVWF  FF7
0996C:  MOVLW  00
0996E:  MOVWF  FF8
09970:  MOVLW  23
09972:  MOVLB  9
09974:  MOVWF  x96
09976:  MOVLB  0
09978:  CALL   1EE2
0997C:  MOVFF  26D,26E
09980:  MOVLW  18
09982:  MOVLB  2
09984:  MOVWF  x6F
09986:  MOVLB  0
09988:  CALL   9056
0998C:  MOVLW  0D
0998E:  MOVLB  A
09990:  MOVWF  x29
09992:  MOVLB  0
09994:  CALL   1E60
09998:  MOVLW  0A
0999A:  MOVLB  A
0999C:  MOVWF  x29
0999E:  MOVLB  0
099A0:  CALL   1E60
....................             break;
099A4:  GOTO   99B2
....................         }
099A8:  MOVLB  2
099AA:  INCF   x6B,F
099AC:  MOVLB  0
099AE:  GOTO   98A2
....................     }
....................     if (!crc_valid)
099B2:  MOVLB  2
099B4:  BTFSS  x6C.0
099B6:  BRA    99BE
099B8:  MOVLB  0
099BA:  GOTO   9A00
099BE:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
099C0:  MOVLW  94
099C2:  MOVWF  FF6
099C4:  MOVLW  08
099C6:  MOVWF  FF7
099C8:  MOVLW  00
099CA:  MOVWF  FF8
099CC:  MOVLW  25
099CE:  MOVLB  9
099D0:  MOVWF  x96
099D2:  MOVLB  0
099D4:  CALL   1EE2
099D8:  MOVLW  05
099DA:  MOVLB  2
099DC:  MOVWF  x6E
099DE:  MOVLW  18
099E0:  MOVWF  x6F
099E2:  MOVLB  0
099E4:  CALL   9056
099E8:  MOVLW  BB
099EA:  MOVWF  FF6
099EC:  MOVLW  08
099EE:  MOVWF  FF7
099F0:  MOVLW  00
099F2:  MOVWF  FF8
099F4:  MOVLW  0B
099F6:  MOVLB  9
099F8:  MOVWF  x96
099FA:  MOVLB  0
099FC:  CALL   1EE2
....................         // return; 
....................     }
09A00:  GOTO   A516 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
09B82:  MOVLW  C8
09B84:  MOVWF  FF6
09B86:  MOVLW  08
09B88:  MOVWF  FF7
09B8A:  MOVLW  00
09B8C:  MOVWF  FF8
09B8E:  CALL   1EB2
....................     fprintf(PC, "___Start copy_data__\r\n");
09B92:  MOVLW  E2
09B94:  MOVWF  FF6
09B96:  MOVLW  08
09B98:  MOVWF  FF7
09B9A:  MOVLW  00
09B9C:  MOVWF  FF8
09B9E:  CALL   1EB2
....................     
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
09BA2:  MOVLB  1
09BA4:  MOVF   x47,W
09BA6:  MOVWF  FE9
09BA8:  MOVF   x48,W
09BAA:  MOVWF  FEA
09BAC:  MOVFF  FEF,1E9
09BB0:  MOVFF  1E9,1F2
09BB4:  MOVLB  0
09BB6:  CALL   91BE
09BBA:  MOVFF  02,03
09BBE:  MOVF   01,W
09BC0:  MOVWF  FE1
09BC2:  MOVFF  03,FE2
09BC6:  MOVLW  01
09BC8:  MOVWF  FEA
09BCA:  MOVLW  9E
09BCC:  MOVWF  FE9
09BCE:  MOVLW  08
09BD0:  MOVWF  01
09BD2:  MOVFF  FE6,FEE
09BD6:  DECFSZ 01,F
09BD8:  GOTO   9BD2
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
09BDC:  MOVLB  1
09BDE:  MOVF   x47,W
09BE0:  MOVWF  FE9
09BE2:  MOVF   x48,W
09BE4:  MOVWF  FEA
09BE6:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 write_src = smf_data->src;
....................     unsigned int32 write_size = smf_data->size;
09BEA:  MOVFF  1A1,1A9
09BEE:  MOVFF  1A0,1A8
09BF2:  MOVFF  19F,1A7
09BF6:  MOVFF  19E,1A6
09BFA:  MOVFF  1A5,1AD
09BFE:  MOVFF  1A4,1AC
09C02:  MOVFF  1A3,1AB
09C06:  MOVFF  1A2,1AA
09C0A:  MOVLW  01
09C0C:  ADDWF  x47,W
09C0E:  MOVWF  FE9
09C10:  MOVLW  00
09C12:  ADDWFC x48,W
09C14:  MOVWF  FEA
09C16:  MOVFF  FEF,1AE
09C1A:  MOVFF  FEC,1AF
09C1E:  MOVFF  FEC,1B0
09C22:  MOVFF  FEC,1B1
09C26:  MOVF   FED,F
09C28:  MOVF   FED,F
09C2A:  MOVF   FED,F
09C2C:  MOVLW  05
09C2E:  ADDWF  x47,W
09C30:  MOVWF  FE9
09C32:  MOVLW  00
09C34:  ADDWFC x48,W
09C36:  MOVWF  FEA
09C38:  MOVFF  FEF,1B2
09C3C:  MOVFF  FEC,1B3
09C40:  MOVFF  FEC,1B4
09C44:  MOVFF  FEC,1B5
09C48:  MOVF   FED,F
09C4A:  MOVF   FED,F
09C4C:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
09C4E:  MOVLW  FA
09C50:  MOVWF  FF6
09C52:  MOVLW  08
09C54:  MOVWF  FF7
09C56:  MOVLW  00
09C58:  MOVWF  FF8
09C5A:  MOVLW  25
09C5C:  MOVLB  9
09C5E:  MOVWF  x96
09C60:  MOVLB  0
09C62:  CALL   1EE2
09C66:  MOVFF  1A9,996
09C6A:  MOVLW  37
09C6C:  MOVLB  9
09C6E:  MOVWF  x97
09C70:  MOVLB  0
09C72:  CALL   20E0
09C76:  MOVFF  1A8,996
09C7A:  MOVLW  37
09C7C:  MOVLB  9
09C7E:  MOVWF  x97
09C80:  MOVLB  0
09C82:  CALL   20E0
09C86:  MOVFF  1A7,996
09C8A:  MOVLW  37
09C8C:  MOVLB  9
09C8E:  MOVWF  x97
09C90:  MOVLB  0
09C92:  CALL   20E0
09C96:  MOVFF  1A6,996
09C9A:  MOVLW  37
09C9C:  MOVLB  9
09C9E:  MOVWF  x97
09CA0:  MOVLB  0
09CA2:  CALL   20E0
09CA6:  MOVLW  0D
09CA8:  MOVLB  A
09CAA:  MOVWF  x29
09CAC:  MOVLB  0
09CAE:  CALL   1E60
09CB2:  MOVLW  0A
09CB4:  MOVLB  A
09CB6:  MOVWF  x29
09CB8:  MOVLB  0
09CBA:  CALL   1E60
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
09CBE:  MOVLW  26
09CC0:  MOVWF  FF6
09CC2:  MOVLW  09
09CC4:  MOVWF  FF7
09CC6:  MOVLW  00
09CC8:  MOVWF  FF8
09CCA:  MOVLW  25
09CCC:  MOVLB  9
09CCE:  MOVWF  x96
09CD0:  MOVLB  0
09CD2:  CALL   1EE2
09CD6:  MOVFF  1AD,996
09CDA:  MOVLW  37
09CDC:  MOVLB  9
09CDE:  MOVWF  x97
09CE0:  MOVLB  0
09CE2:  CALL   20E0
09CE6:  MOVFF  1AC,996
09CEA:  MOVLW  37
09CEC:  MOVLB  9
09CEE:  MOVWF  x97
09CF0:  MOVLB  0
09CF2:  CALL   20E0
09CF6:  MOVFF  1AB,996
09CFA:  MOVLW  37
09CFC:  MOVLB  9
09CFE:  MOVWF  x97
09D00:  MOVLB  0
09D02:  CALL   20E0
09D06:  MOVFF  1AA,996
09D0A:  MOVLW  37
09D0C:  MOVLB  9
09D0E:  MOVWF  x97
09D10:  MOVLB  0
09D12:  CALL   20E0
09D16:  MOVLW  0D
09D18:  MOVLB  A
09D1A:  MOVWF  x29
09D1C:  MOVLB  0
09D1E:  CALL   1E60
09D22:  MOVLW  0A
09D24:  MOVLB  A
09D26:  MOVWF  x29
09D28:  MOVLB  0
09D2A:  CALL   1E60
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
09D2E:  MOVLW  52
09D30:  MOVWF  FF6
09D32:  MOVLW  09
09D34:  MOVWF  FF7
09D36:  MOVLW  00
09D38:  MOVWF  FF8
09D3A:  MOVLW  25
09D3C:  MOVLB  9
09D3E:  MOVWF  x96
09D40:  MOVLB  0
09D42:  CALL   1EE2
09D46:  MOVFF  1B1,996
09D4A:  MOVLW  37
09D4C:  MOVLB  9
09D4E:  MOVWF  x97
09D50:  MOVLB  0
09D52:  CALL   20E0
09D56:  MOVFF  1B0,996
09D5A:  MOVLW  37
09D5C:  MOVLB  9
09D5E:  MOVWF  x97
09D60:  MOVLB  0
09D62:  CALL   20E0
09D66:  MOVFF  1AF,996
09D6A:  MOVLW  37
09D6C:  MOVLB  9
09D6E:  MOVWF  x97
09D70:  MOVLB  0
09D72:  CALL   20E0
09D76:  MOVFF  1AE,996
09D7A:  MOVLW  37
09D7C:  MOVLB  9
09D7E:  MOVWF  x97
09D80:  MOVLB  0
09D82:  CALL   20E0
09D86:  MOVLW  0D
09D88:  MOVLB  A
09D8A:  MOVWF  x29
09D8C:  MOVLB  0
09D8E:  CALL   1E60
09D92:  MOVLW  0A
09D94:  MOVLB  A
09D96:  MOVWF  x29
09D98:  MOVLB  0
09D9A:  CALL   1E60
....................     fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
09D9E:  MOVLW  7E
09DA0:  MOVWF  FF6
09DA2:  MOVLW  09
09DA4:  MOVWF  FF7
09DA6:  MOVLW  00
09DA8:  MOVWF  FF8
09DAA:  MOVLW  25
09DAC:  MOVLB  9
09DAE:  MOVWF  x96
09DB0:  MOVLB  0
09DB2:  CALL   1EE2
09DB6:  MOVLW  41
09DB8:  MOVWF  FE9
09DBA:  MOVFF  1B5,1F4
09DBE:  MOVFF  1B4,1F3
09DC2:  MOVFF  1B3,1F2
09DC6:  MOVFF  1B2,1F1
09DCA:  CALL   9274
09DCE:  MOVLW  A6
09DD0:  MOVWF  FF6
09DD2:  MOVLW  09
09DD4:  MOVWF  FF7
09DD6:  MOVLW  00
09DD8:  MOVWF  FF8
09DDA:  MOVLW  04
09DDC:  MOVLB  9
09DDE:  MOVWF  x96
09DE0:  MOVLB  0
09DE2:  CALL   1EE2
09DE6:  MOVFF  1B5,996
09DEA:  MOVLW  57
09DEC:  MOVLB  9
09DEE:  MOVWF  x97
09DF0:  MOVLB  0
09DF2:  CALL   20E0
09DF6:  MOVFF  1B4,996
09DFA:  MOVLW  57
09DFC:  MOVLB  9
09DFE:  MOVWF  x97
09E00:  MOVLB  0
09E02:  CALL   20E0
09E06:  MOVFF  1B3,996
09E0A:  MOVLW  57
09E0C:  MOVLB  9
09E0E:  MOVWF  x97
09E10:  MOVLB  0
09E12:  CALL   20E0
09E16:  MOVFF  1B2,996
09E1A:  MOVLW  57
09E1C:  MOVLB  9
09E1E:  MOVWF  x97
09E20:  MOVLB  0
09E22:  CALL   20E0
09E26:  MOVLW  AD
09E28:  MOVWF  FF6
09E2A:  MOVLW  09
09E2C:  MOVWF  FF7
09E2E:  MOVLW  00
09E30:  MOVWF  FF8
09E32:  MOVLW  05
09E34:  MOVLB  9
09E36:  MOVWF  x96
09E38:  MOVLB  0
09E3A:  CALL   1EE2
.................... 
....................     if (!is_connect(mis_fm))
09E3E:  MOVFF  F1,A29
09E42:  MOVFF  F0,A28
09E46:  MOVFF  EF,A27
09E4A:  MOVFF  EE,A26
09E4E:  CALL   254C
09E52:  MOVF   01,F
09E54:  BTFSS  FD8.2
09E56:  GOTO   9E6A
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
09E5A:  MOVLW  B4
09E5C:  MOVWF  FF6
09E5E:  MOVLW  09
09E60:  MOVWF  FF7
09E62:  MOVLW  00
09E64:  MOVWF  FF8
09E66:  CALL   1EB2
....................     }    
.................... 
....................     if (!is_connect(smf))
09E6A:  MOVFF  F5,A29
09E6E:  MOVFF  F4,A28
09E72:  MOVFF  F3,A27
09E76:  MOVFF  F2,A26
09E7A:  CALL   254C
09E7E:  MOVF   01,F
09E80:  BTFSS  FD8.2
09E82:  GOTO   9E96
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
09E86:  MOVLW  D6
09E88:  MOVWF  FF6
09E8A:  MOVLW  09
09E8C:  MOVWF  FF7
09E8E:  MOVLW  00
09E90:  MOVWF  FF8
09E92:  CALL   1EB2
....................     }    
....................     /*
....................     while (!is_connect(smf))
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
....................         delay_ms(100);
....................     }
....................     */
.................... 
....................     // read size area with CRC verification retry
....................     read_smf_header();
09E96:  GOTO   9482
.................... 
....................     // PartitionParamから値を取得
....................     int32 used_size = param.meas.used_size;
....................     int8 loop_count = param.meas.loop_counter;
09E9A:  MOVFF  124,1B9
09E9E:  MOVFF  123,1B8
09EA2:  MOVFF  122,1B7
09EA6:  MOVFF  121,1B6
09EAA:  MOVFF  125,1BA
....................     fprintf(PC, "Size area read\r\n");
09EAE:  MOVLW  F4
09EB0:  MOVWF  FF6
09EB2:  MOVLW  09
09EB4:  MOVWF  FF7
09EB6:  MOVLW  00
09EB8:  MOVWF  FF8
09EBA:  CALL   1EB2
....................     fprintf(PC, "used_size = %ld (src 0x%08LX)\r\n", used_size, mis_start_address);
09EBE:  MOVLW  06
09EC0:  MOVWF  FF6
09EC2:  MOVLW  0A
09EC4:  MOVWF  FF7
09EC6:  MOVLW  00
09EC8:  MOVWF  FF8
09ECA:  MOVLW  0C
09ECC:  MOVLB  9
09ECE:  MOVWF  x96
09ED0:  MOVLB  0
09ED2:  CALL   1EE2
09ED6:  MOVLW  41
09ED8:  MOVWF  FE9
09EDA:  MOVFF  1B9,1F4
09EDE:  MOVFF  1B8,1F3
09EE2:  MOVFF  1B7,1F2
09EE6:  MOVFF  1B6,1F1
09EEA:  CALL   95A6
09EEE:  MOVLW  15
09EF0:  MOVWF  FF6
09EF2:  MOVLW  0A
09EF4:  MOVWF  FF7
09EF6:  MOVLW  00
09EF8:  MOVWF  FF8
09EFA:  MOVLW  08
09EFC:  MOVLB  9
09EFE:  MOVWF  x96
09F00:  MOVLB  0
09F02:  CALL   1EE2
09F06:  MOVFF  1A9,996
09F0A:  MOVLW  37
09F0C:  MOVLB  9
09F0E:  MOVWF  x97
09F10:  MOVLB  0
09F12:  CALL   20E0
09F16:  MOVFF  1A8,996
09F1A:  MOVLW  37
09F1C:  MOVLB  9
09F1E:  MOVWF  x97
09F20:  MOVLB  0
09F22:  CALL   20E0
09F26:  MOVFF  1A7,996
09F2A:  MOVLW  37
09F2C:  MOVLB  9
09F2E:  MOVWF  x97
09F30:  MOVLB  0
09F32:  CALL   20E0
09F36:  MOVFF  1A6,996
09F3A:  MOVLW  37
09F3C:  MOVLB  9
09F3E:  MOVWF  x97
09F40:  MOVLB  0
09F42:  CALL   20E0
09F46:  MOVLW  22
09F48:  MOVWF  FF6
09F4A:  MOVLW  0A
09F4C:  MOVWF  FF7
09F4E:  MOVLW  00
09F50:  MOVWF  FF8
09F52:  MOVLW  03
09F54:  MOVLB  9
09F56:  MOVWF  x96
09F58:  MOVLB  0
09F5A:  CALL   1EE2
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
09F5E:  MOVLW  04
09F60:  MOVLB  1
09F62:  ADDWF  xA6,W
09F64:  MOVWF  xE9
09F66:  MOVLW  00
09F68:  ADDWFC xA7,W
09F6A:  MOVWF  xEA
09F6C:  MOVLW  00
09F6E:  ADDWFC xA8,W
09F70:  MOVWF  xEB
09F72:  MOVLW  00
09F74:  ADDWFC xA9,W
09F76:  MOVWF  xEC
09F78:  MOVLW  26
09F7A:  MOVWF  FF6
09F7C:  MOVLW  0A
09F7E:  MOVWF  FF7
09F80:  MOVLW  00
09F82:  MOVWF  FF8
09F84:  MOVLW  0C
09F86:  MOVLB  9
09F88:  MOVWF  x96
09F8A:  MOVLB  0
09F8C:  CALL   1EE2
09F90:  MOVFF  1BA,26E
09F94:  MOVLW  18
09F96:  MOVLB  2
09F98:  MOVWF  x6F
09F9A:  MOVLB  0
09F9C:  CALL   9056
09FA0:  MOVLW  34
09FA2:  MOVWF  FF6
09FA4:  MOVLW  0A
09FA6:  MOVWF  FF7
09FA8:  MOVLW  00
09FAA:  MOVWF  FF8
09FAC:  MOVLW  09
09FAE:  MOVLB  9
09FB0:  MOVWF  x96
09FB2:  MOVLB  0
09FB4:  CALL   1EE2
09FB8:  MOVFF  1EC,996
09FBC:  MOVLW  37
09FBE:  MOVLB  9
09FC0:  MOVWF  x97
09FC2:  MOVLB  0
09FC4:  CALL   20E0
09FC8:  MOVFF  1EB,996
09FCC:  MOVLW  37
09FCE:  MOVLB  9
09FD0:  MOVWF  x97
09FD2:  MOVLB  0
09FD4:  CALL   20E0
09FD8:  MOVFF  1EA,996
09FDC:  MOVLW  37
09FDE:  MOVLB  9
09FE0:  MOVWF  x97
09FE2:  MOVLB  0
09FE4:  CALL   20E0
09FE8:  MOVFF  1E9,996
09FEC:  MOVLW  37
09FEE:  MOVLB  9
09FF0:  MOVWF  x97
09FF2:  MOVLB  0
09FF4:  CALL   20E0
09FF8:  MOVLW  42
09FFA:  MOVWF  FF6
09FFC:  MOVLW  0A
09FFE:  MOVWF  FF7
0A000:  MOVLW  00
0A002:  MOVWF  FF8
0A004:  MOVLW  05
0A006:  MOVLB  9
0A008:  MOVWF  x96
0A00A:  MOVLB  0
0A00C:  CALL   1EE2
....................     
.................... 
....................     // Calculate data write address and check for wrap-around
....................     unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................     unsigned int32 data_region_end = mis_end_address;
....................     unsigned int32 data_region_size = data_region_end - data_region_start;
....................     unsigned int32 data_write_addr = data_region_start + used_size;
0A010:  MOVLB  1
0A012:  MOVF   xA6,W
0A014:  MOVWF  xBB
0A016:  MOVLW  10
0A018:  ADDWF  xA7,W
0A01A:  MOVWF  xBC
0A01C:  MOVLW  00
0A01E:  ADDWFC xA8,W
0A020:  MOVWF  xBD
0A022:  MOVLW  00
0A024:  ADDWFC xA9,W
0A026:  MOVWF  xBE
0A028:  MOVFF  1AD,1C2
0A02C:  MOVFF  1AC,1C1
0A030:  MOVFF  1AB,1C0
0A034:  MOVFF  1AA,1BF
0A038:  MOVF   xBB,W
0A03A:  SUBWF  xBF,W
0A03C:  MOVWF  xC3
0A03E:  MOVF   xBC,W
0A040:  SUBWFB xC0,W
0A042:  MOVWF  xC4
0A044:  MOVF   xBD,W
0A046:  SUBWFB xC1,W
0A048:  MOVWF  xC5
0A04A:  MOVF   xBE,W
0A04C:  SUBWFB xC2,W
0A04E:  MOVWF  xC6
0A050:  MOVF   xB6,W
0A052:  ADDWF  xBB,W
0A054:  MOVWF  xC7
0A056:  MOVF   xB7,W
0A058:  ADDWFC xBC,W
0A05A:  MOVWF  xC8
0A05C:  MOVF   xB8,W
0A05E:  ADDWFC xBD,W
0A060:  MOVWF  xC9
0A062:  MOVF   xB9,W
0A064:  ADDWFC xBE,W
0A066:  MOVWF  xCA
.................... 
.................... 
....................     // Delete the first part in advance in case of looping
....................     if ((used_size + write_size) > data_region_size)
0A068:  MOVF   xB2,W
0A06A:  ADDWF  xB6,W
0A06C:  MOVWF  xE9
0A06E:  MOVF   xB3,W
0A070:  ADDWFC xB7,W
0A072:  MOVWF  xEA
0A074:  MOVF   xB4,W
0A076:  ADDWFC xB8,W
0A078:  MOVWF  xEB
0A07A:  MOVF   xB5,W
0A07C:  ADDWFC xB9,W
0A07E:  MOVWF  xEC
0A080:  MOVF   xC6,W
0A082:  SUBWF  xEC,W
0A084:  BTFSC  FD8.0
0A086:  BRA    A08E
0A088:  MOVLB  0
0A08A:  GOTO   A1BC
0A08E:  MOVLB  0
0A090:  BTFSS  FD8.2
0A092:  GOTO   A0D8
0A096:  MOVLB  1
0A098:  MOVF   xC5,W
0A09A:  SUBWF  xEB,W
0A09C:  BTFSC  FD8.0
0A09E:  BRA    A0A6
0A0A0:  MOVLB  0
0A0A2:  GOTO   A1BC
0A0A6:  MOVLB  0
0A0A8:  BTFSS  FD8.2
0A0AA:  GOTO   A0D8
0A0AE:  MOVLB  1
0A0B0:  MOVF   xC4,W
0A0B2:  SUBWF  xEA,W
0A0B4:  BTFSC  FD8.0
0A0B6:  BRA    A0BE
0A0B8:  MOVLB  0
0A0BA:  GOTO   A1BC
0A0BE:  MOVLB  0
0A0C0:  BTFSS  FD8.2
0A0C2:  GOTO   A0D8
0A0C6:  MOVLB  1
0A0C8:  MOVF   xE9,W
0A0CA:  SUBWF  xC3,W
0A0CC:  BTFSS  FD8.0
0A0CE:  BRA    A0D6
0A0D0:  MOVLB  0
0A0D2:  GOTO   A1BC
0A0D6:  MOVLB  0
....................     {
....................         fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
0A0D8:  MOVLW  48
0A0DA:  MOVWF  FF6
0A0DC:  MOVLW  0A
0A0DE:  MOVWF  FF7
0A0E0:  MOVLW  00
0A0E2:  MOVWF  FF8
0A0E4:  CALL   1EB2
....................         loop_count++;
0A0E8:  MOVLB  1
0A0EA:  INCF   xBA,F
....................         used_size = 0;
0A0EC:  CLRF   xB9
0A0EE:  CLRF   xB8
0A0F0:  CLRF   xB7
0A0F2:  CLRF   xB6
....................         data_write_addr = data_region_start;
0A0F4:  MOVFF  1BE,1CA
0A0F8:  MOVFF  1BD,1C9
0A0FC:  MOVFF  1BC,1C8
0A100:  MOVFF  1BB,1C7
....................         
....................         // Reset counters when loop occurs
....................         reset_misf_counters(smf_data->mission_id);
0A104:  MOVF   x47,W
0A106:  MOVWF  FE9
0A108:  MOVF   x48,W
0A10A:  MOVWF  FEA
0A10C:  MOVFF  FEF,1E9
0A110:  MOVFF  1E9,1EC
0A114:  MOVLB  0
0A116:  GOTO   9722
....................         
....................         unsigned int32 erase_ptr = data_region_start;
0A11A:  MOVFF  1BE,1CE
0A11E:  MOVFF  1BD,1CD
0A122:  MOVFF  1BC,1CC
0A126:  MOVFF  1BB,1CB
....................         while (erase_ptr < data_region_end)
0A12A:  MOVLB  1
0A12C:  MOVF   xCE,W
0A12E:  SUBWF  xC2,W
0A130:  BTFSC  FD8.0
0A132:  BRA    A13A
0A134:  MOVLB  0
0A136:  GOTO   A1BC
0A13A:  MOVLB  0
0A13C:  BTFSS  FD8.2
0A13E:  GOTO   A184
0A142:  MOVLB  1
0A144:  MOVF   xCD,W
0A146:  SUBWF  xC1,W
0A148:  BTFSC  FD8.0
0A14A:  BRA    A152
0A14C:  MOVLB  0
0A14E:  GOTO   A1BC
0A152:  MOVLB  0
0A154:  BTFSS  FD8.2
0A156:  GOTO   A184
0A15A:  MOVLB  1
0A15C:  MOVF   xCC,W
0A15E:  SUBWF  xC0,W
0A160:  BTFSC  FD8.0
0A162:  BRA    A16A
0A164:  MOVLB  0
0A166:  GOTO   A1BC
0A16A:  MOVLB  0
0A16C:  BTFSS  FD8.2
0A16E:  GOTO   A184
0A172:  MOVLB  1
0A174:  MOVF   xBF,W
0A176:  SUBWF  xCB,W
0A178:  BTFSS  FD8.0
0A17A:  BRA    A182
0A17C:  MOVLB  0
0A17E:  GOTO   A1BC
0A182:  MOVLB  0
....................         {
....................             subsector_4kByte_erase(smf, erase_ptr);
0A184:  MOVFF  F5,A29
0A188:  MOVFF  F4,A28
0A18C:  MOVFF  F3,A27
0A190:  MOVFF  F2,A26
0A194:  MOVFF  1CE,A2D
0A198:  MOVFF  1CD,A2C
0A19C:  MOVFF  1CC,A2B
0A1A0:  MOVFF  1CB,A2A
0A1A4:  CALL   378A
....................             erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
0A1A8:  MOVLW  10
0A1AA:  MOVLB  1
0A1AC:  ADDWF  xCC,F
0A1AE:  MOVLW  00
0A1B0:  ADDWFC xCD,F
0A1B2:  MOVLW  00
0A1B4:  ADDWFC xCE,F
0A1B6:  MOVLB  0
0A1B8:  GOTO   A12A
....................         }
....................     }
.................... 
.................... 
....................     // Erase the space you will be writing in now
....................     unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................     unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
0A1BC:  MOVLB  1
0A1BE:  CLRF   xCF
0A1C0:  MOVF   xC8,W
0A1C2:  ANDLW  F0
0A1C4:  MOVWF  xD0
0A1C6:  CLRF   xD1
0A1C8:  CLRF   xD2
0A1CA:  MOVF   xB2,W
0A1CC:  ADDWF  xC7,W
0A1CE:  MOVWF  xE9
0A1D0:  MOVF   xB3,W
0A1D2:  ADDWFC xC8,W
0A1D4:  MOVWF  xEA
0A1D6:  MOVF   xB4,W
0A1D8:  ADDWFC xC9,W
0A1DA:  MOVWF  xEB
0A1DC:  MOVF   xB5,W
0A1DE:  ADDWFC xCA,W
0A1E0:  MOVWF  xEC
0A1E2:  MOVLW  FF
0A1E4:  ADDWF  xE9,F
0A1E6:  MOVLW  0F
0A1E8:  ADDWFC xEA,F
0A1EA:  MOVLW  00
0A1EC:  ADDWFC xEB,F
0A1EE:  MOVLW  00
0A1F0:  ADDWFC xEC,F
0A1F2:  CLRF   xD3
0A1F4:  MOVF   xEA,W
0A1F6:  ANDLW  F0
0A1F8:  MOVWF  xD4
0A1FA:  CLRF   xD5
0A1FC:  CLRF   xD6
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
0A1FE:  MOVFF  1D2,1DA
0A202:  MOVFF  1D1,1D9
0A206:  MOVFF  1D0,1D8
0A20A:  MOVFF  1CF,1D7
0A20E:  MOVLB  0
0A210:  MOVLB  1
0A212:  MOVF   xDA,W
0A214:  SUBWF  xD6,W
0A216:  BTFSC  FD8.0
0A218:  BRA    A220
0A21A:  MOVLB  0
0A21C:  GOTO   A2FC
0A220:  MOVLB  0
0A222:  BTFSS  FD8.2
0A224:  GOTO   A26A
0A228:  MOVLB  1
0A22A:  MOVF   xD9,W
0A22C:  SUBWF  xD5,W
0A22E:  BTFSC  FD8.0
0A230:  BRA    A238
0A232:  MOVLB  0
0A234:  GOTO   A2FC
0A238:  MOVLB  0
0A23A:  BTFSS  FD8.2
0A23C:  GOTO   A26A
0A240:  MOVLB  1
0A242:  MOVF   xD8,W
0A244:  SUBWF  xD4,W
0A246:  BTFSC  FD8.0
0A248:  BRA    A250
0A24A:  MOVLB  0
0A24C:  GOTO   A2FC
0A250:  MOVLB  0
0A252:  BTFSS  FD8.2
0A254:  GOTO   A26A
0A258:  MOVLB  1
0A25A:  MOVF   xD3,W
0A25C:  SUBWF  xD7,W
0A25E:  BTFSS  FD8.0
0A260:  BRA    A268
0A262:  MOVLB  0
0A264:  GOTO   A2FC
0A268:  MOVLB  0
0A26A:  MOVLB  1
0A26C:  MOVF   xDA,W
0A26E:  SUBWF  xAD,W
0A270:  BTFSC  FD8.0
0A272:  BRA    A27A
0A274:  MOVLB  0
0A276:  GOTO   A2FC
0A27A:  MOVLB  0
0A27C:  BTFSS  FD8.2
0A27E:  GOTO   A2C4
0A282:  MOVLB  1
0A284:  MOVF   xD9,W
0A286:  SUBWF  xAC,W
0A288:  BTFSC  FD8.0
0A28A:  BRA    A292
0A28C:  MOVLB  0
0A28E:  GOTO   A2FC
0A292:  MOVLB  0
0A294:  BTFSS  FD8.2
0A296:  GOTO   A2C4
0A29A:  MOVLB  1
0A29C:  MOVF   xD8,W
0A29E:  SUBWF  xAB,W
0A2A0:  BTFSC  FD8.0
0A2A2:  BRA    A2AA
0A2A4:  MOVLB  0
0A2A6:  GOTO   A2FC
0A2AA:  MOVLB  0
0A2AC:  BTFSS  FD8.2
0A2AE:  GOTO   A2C4
0A2B2:  MOVLB  1
0A2B4:  MOVF   xAA,W
0A2B6:  SUBWF  xD7,W
0A2B8:  BTFSS  FD8.0
0A2BA:  BRA    A2C2
0A2BC:  MOVLB  0
0A2BE:  GOTO   A2FC
0A2C2:  MOVLB  0
....................         subsector_4kByte_erase(smf, addr);
0A2C4:  MOVFF  F5,A29
0A2C8:  MOVFF  F4,A28
0A2CC:  MOVFF  F3,A27
0A2D0:  MOVFF  F2,A26
0A2D4:  MOVFF  1DA,A2D
0A2D8:  MOVFF  1D9,A2C
0A2DC:  MOVFF  1D8,A2B
0A2E0:  MOVFF  1D7,A2A
0A2E4:  CALL   378A
0A2E8:  MOVLW  10
0A2EA:  MOVLB  1
0A2EC:  ADDWF  xD8,F
0A2EE:  MOVLW  00
0A2F0:  ADDWFC xD9,F
0A2F2:  MOVLW  00
0A2F4:  ADDWFC xDA,F
0A2F6:  MOVLB  0
0A2F8:  GOTO   A210
.................... 
....................     unsigned int32 remaining = write_size;
....................     unsigned int32 src_addr = write_src;
0A2FC:  MOVFF  1B5,1DE
0A300:  MOVFF  1B4,1DD
0A304:  MOVFF  1B3,1DC
0A308:  MOVFF  1B2,1DB
0A30C:  MOVFF  1B1,1E2
0A310:  MOVFF  1B0,1E1
0A314:  MOVFF  1AF,1E0
0A318:  MOVFF  1AE,1DF
....................     while (remaining > 0)
0A31C:  MOVLB  1
0A31E:  MOVF   xDB,F
0A320:  BTFSC  FD8.2
0A322:  BRA    A32A
0A324:  MOVLB  0
0A326:  GOTO   A35C
0A32A:  MOVLB  0
0A32C:  MOVLB  1
0A32E:  MOVF   xDC,F
0A330:  BTFSC  FD8.2
0A332:  BRA    A33A
0A334:  MOVLB  0
0A336:  GOTO   A35C
0A33A:  MOVLB  0
0A33C:  MOVLB  1
0A33E:  MOVF   xDD,F
0A340:  BTFSC  FD8.2
0A342:  BRA    A34A
0A344:  MOVLB  0
0A346:  GOTO   A35C
0A34A:  MOVLB  0
0A34C:  MOVLB  1
0A34E:  MOVF   xDE,F
0A350:  BTFSS  FD8.2
0A352:  BRA    A35A
0A354:  MOVLB  0
0A356:  GOTO   A512
0A35A:  MOVLB  0
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
0A35C:  MOVLB  1
0A35E:  MOVF   xDE,F
0A360:  BTFSC  FD8.2
0A362:  BRA    A36A
0A364:  MOVLB  0
0A366:  GOTO   A39E
0A36A:  MOVLB  0
0A36C:  MOVLB  1
0A36E:  MOVF   xDD,F
0A370:  BTFSC  FD8.2
0A372:  BRA    A37A
0A374:  MOVLB  0
0A376:  GOTO   A39E
0A37A:  MOVLB  0
0A37C:  MOVLB  1
0A37E:  MOVF   xDC,F
0A380:  BTFSC  FD8.2
0A382:  BRA    A38A
0A384:  MOVLB  0
0A386:  GOTO   A39E
0A38A:  MOVLB  0
0A38C:  MOVLB  1
0A38E:  MOVF   xDB,W
0A390:  SUBLW  40
0A392:  BTFSS  FD8.0
0A394:  BRA    A39C
0A396:  MOVLB  0
0A398:  GOTO   A3A6
0A39C:  MOVLB  0
0A39E:  CLRF   03
0A3A0:  MOVLW  40
0A3A2:  GOTO   A3B0
0A3A6:  MOVFF  1DC,03
0A3AA:  MOVLB  1
0A3AC:  MOVF   xDB,W
0A3AE:  MOVLB  0
0A3B0:  MOVLB  1
0A3B2:  MOVWF  xE3
0A3B4:  MOVFF  03,1E4
0A3B8:  MOVLB  0
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
0A3BA:  MOVFF  F1,270
0A3BE:  MOVFF  F0,26F
0A3C2:  MOVFF  EF,26E
0A3C6:  MOVFF  EE,26D
0A3CA:  MOVFF  1E2,274
0A3CE:  MOVFF  1E1,273
0A3D2:  MOVFF  1E0,272
0A3D6:  MOVFF  1DF,271
0A3DA:  MOVLW  01
0A3DC:  MOVLB  2
0A3DE:  MOVWF  x76
0A3E0:  MOVLW  5E
0A3E2:  MOVWF  x75
0A3E4:  CLRF   x7A
0A3E6:  CLRF   x79
0A3E8:  MOVFF  1E4,278
0A3EC:  MOVFF  1E3,277
0A3F0:  MOVLB  0
0A3F2:  CALL   2612
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
0A3F6:  MOVFF  F5,A29
0A3FA:  MOVFF  F4,A28
0A3FE:  MOVFF  F3,A27
0A402:  MOVFF  F2,A26
0A406:  MOVFF  1CA,A2D
0A40A:  MOVFF  1C9,A2C
0A40E:  MOVFF  1C8,A2B
0A412:  MOVFF  1C7,A2A
0A416:  MOVLW  01
0A418:  MOVLB  A
0A41A:  MOVWF  x2F
0A41C:  MOVLW  5E
0A41E:  MOVWF  x2E
0A420:  MOVFF  1E4,A31
0A424:  MOVFF  1E3,A30
0A428:  MOVLB  0
0A42A:  CALL   3406
....................         for (unsigned int32 i = 0; i < chunk; i++)
0A42E:  MOVLB  1
0A430:  CLRF   xE8
0A432:  CLRF   xE7
0A434:  CLRF   xE6
0A436:  CLRF   xE5
0A438:  MOVLB  0
0A43A:  MOVLB  1
0A43C:  MOVF   xE8,F
0A43E:  BTFSC  FD8.2
0A440:  BRA    A448
0A442:  MOVLB  0
0A444:  GOTO   A4CA
0A448:  MOVLB  0
0A44A:  MOVLB  1
0A44C:  MOVF   xE7,F
0A44E:  BTFSC  FD8.2
0A450:  BRA    A458
0A452:  MOVLB  0
0A454:  GOTO   A4CA
0A458:  MOVLB  0
0A45A:  MOVLB  1
0A45C:  MOVF   xE6,W
0A45E:  SUBWF  xE4,W
0A460:  BTFSC  FD8.0
0A462:  BRA    A46A
0A464:  MOVLB  0
0A466:  GOTO   A4CA
0A46A:  MOVLB  0
0A46C:  BTFSS  FD8.2
0A46E:  GOTO   A484
0A472:  MOVLB  1
0A474:  MOVF   xE3,W
0A476:  SUBWF  xE5,W
0A478:  BTFSS  FD8.0
0A47A:  BRA    A482
0A47C:  MOVLB  0
0A47E:  GOTO   A4CA
0A482:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0A484:  MOVLW  5E
0A486:  MOVLB  1
0A488:  ADDWF  xE5,W
0A48A:  MOVWF  FE9
0A48C:  MOVLW  01
0A48E:  ADDWFC xE6,W
0A490:  MOVWF  FEA
0A492:  MOVFF  FEF,1E9
0A496:  MOVFF  1E9,996
0A49A:  MOVLW  37
0A49C:  MOVLB  9
0A49E:  MOVWF  x97
0A4A0:  MOVLB  0
0A4A2:  CALL   20E0
0A4A6:  MOVLW  20
0A4A8:  MOVLB  A
0A4AA:  MOVWF  x29
0A4AC:  MOVLB  0
0A4AE:  CALL   1E60
0A4B2:  MOVLW  01
0A4B4:  MOVLB  1
0A4B6:  ADDWF  xE5,F
0A4B8:  BTFSC  FD8.0
0A4BA:  INCF   xE6,F
0A4BC:  BTFSC  FD8.2
0A4BE:  INCF   xE7,F
0A4C0:  BTFSC  FD8.2
0A4C2:  INCF   xE8,F
0A4C4:  MOVLB  0
0A4C6:  GOTO   A43A
....................         }
....................         src_addr += chunk;
0A4CA:  MOVLB  1
0A4CC:  MOVF   xE3,W
0A4CE:  ADDWF  xDF,F
0A4D0:  MOVF   xE4,W
0A4D2:  ADDWFC xE0,F
0A4D4:  MOVLW  00
0A4D6:  ADDWFC xE1,F
0A4D8:  MOVLW  00
0A4DA:  ADDWFC xE2,F
....................         data_write_addr += chunk;
0A4DC:  MOVF   xE3,W
0A4DE:  ADDWF  xC7,F
0A4E0:  MOVF   xE4,W
0A4E2:  ADDWFC xC8,F
0A4E4:  MOVLW  00
0A4E6:  ADDWFC xC9,F
0A4E8:  MOVLW  00
0A4EA:  ADDWFC xCA,F
....................         used_size += chunk;
0A4EC:  MOVF   xE3,W
0A4EE:  ADDWF  xB6,F
0A4F0:  MOVF   xE4,W
0A4F2:  ADDWFC xB7,F
0A4F4:  MOVLW  00
0A4F6:  ADDWFC xB8,F
0A4F8:  MOVLW  00
0A4FA:  ADDWFC xB9,F
....................         remaining -= chunk;
0A4FC:  MOVF   xE3,W
0A4FE:  SUBWF  xDB,F
0A500:  MOVF   xE4,W
0A502:  SUBWFB xDC,F
0A504:  MOVLW  00
0A506:  SUBWFB xDD,F
0A508:  MOVLW  00
0A50A:  SUBWFB xDE,F
0A50C:  MOVLB  0
0A50E:  GOTO   A31C
....................     }
....................     // write size area
....................     write_smf_header();
0A512:  GOTO   9834
....................     
....................     // Update MISF counters for transferred data
....................     update_misf_counters(smf_data->mission_id, write_size);
0A516:  MOVLB  1
0A518:  MOVF   x47,W
0A51A:  MOVWF  FE9
0A51C:  MOVF   x48,W
0A51E:  MOVWF  FEA
0A520:  MOVFF  FEF,1E9
0A524:  MOVFF  1E9,1EC
0A528:  MOVFF  1B5,1F0
0A52C:  MOVFF  1B4,1EF
0A530:  MOVFF  1B3,1EE
0A534:  MOVFF  1B2,1ED
0A538:  MOVLB  0
0A53A:  GOTO   9A04
....................     
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
0A53E:  MOVLW  7E
0A540:  MOVWF  FF6
0A542:  MOVLW  0A
0A544:  MOVWF  FF7
0A546:  MOVLW  00
0A548:  MOVWF  FF8
0A54A:  MOVLW  0C
0A54C:  MOVLB  9
0A54E:  MOVWF  x96
0A550:  MOVLB  0
0A552:  CALL   1EE2
0A556:  MOVLW  41
0A558:  MOVWF  FE9
0A55A:  MOVFF  1B9,1F4
0A55E:  MOVFF  1B8,1F3
0A562:  MOVFF  1B7,1F2
0A566:  MOVFF  1B6,1F1
0A56A:  CALL   95A6
0A56E:  MOVLW  0D
0A570:  MOVLB  A
0A572:  MOVWF  x29
0A574:  MOVLB  0
0A576:  CALL   1E60
0A57A:  MOVLW  0A
0A57C:  MOVLB  A
0A57E:  MOVWF  x29
0A580:  MOVLB  0
0A582:  CALL   1E60
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
0A586:  MOVLW  90
0A588:  MOVWF  FF6
0A58A:  MOVLW  0A
0A58C:  MOVWF  FF7
0A58E:  MOVLW  00
0A590:  MOVWF  FF8
0A592:  MOVLW  0D
0A594:  MOVLB  9
0A596:  MOVWF  x96
0A598:  MOVLB  0
0A59A:  CALL   1EE2
0A59E:  MOVFF  1BA,1EB
0A5A2:  MOVLW  1B
0A5A4:  MOVLB  1
0A5A6:  MOVWF  xEC
0A5A8:  MOVLB  0
0A5AA:  CALL   6656
0A5AE:  MOVLW  9F
0A5B0:  MOVWF  FF6
0A5B2:  MOVLW  0A
0A5B4:  MOVWF  FF7
0A5B6:  MOVLW  00
0A5B8:  MOVWF  FF8
0A5BA:  MOVLW  04
0A5BC:  MOVLB  9
0A5BE:  MOVWF  x96
0A5C0:  MOVLB  0
0A5C2:  CALL   1EE2
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
0A5C6:  MOVLW  A4
0A5C8:  MOVWF  FF6
0A5CA:  MOVLW  0A
0A5CC:  MOVWF  FF7
0A5CE:  MOVLW  00
0A5D0:  MOVWF  FF8
0A5D2:  CALL   1EB2
....................     fprintf(PC, "____________________\r\n\r\n");
0A5D6:  MOVLW  BE
0A5D8:  MOVWF  FF6
0A5DA:  MOVLW  0A
0A5DC:  MOVWF  FF7
0A5DE:  MOVLW  00
0A5E0:  MOVWF  FF8
0A5E2:  CALL   1EB2
0A5E6:  GOTO   B0EC (RETURN)
.................... }
.................... 
.................... void smf_read(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0A5EA:  MOVLW  D8
0A5EC:  MOVWF  FF6
0A5EE:  MOVLW  0A
0A5F0:  MOVWF  FF7
0A5F2:  MOVLW  00
0A5F4:  MOVWF  FF8
0A5F6:  CALL   1EB2
....................     fprintf(PC, "___Start SMF Read____\r\n");
0A5FA:  MOVLW  F2
0A5FC:  MOVWF  FF6
0A5FE:  MOVLW  0A
0A600:  MOVWF  FF7
0A602:  MOVLW  00
0A604:  MOVWF  FF8
0A606:  CALL   1EB2
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
0A60A:  MOVLB  1
0A60C:  MOVF   x5E,W
0A60E:  MOVWF  FE9
0A610:  MOVF   x5F,W
0A612:  MOVWF  FEA
0A614:  MOVFF  FEF,1B8
0A618:  MOVFF  1B8,1F2
0A61C:  MOVLB  0
0A61E:  CALL   91BE
0A622:  MOVFF  02,03
0A626:  MOVF   01,W
0A628:  MOVWF  FE1
0A62A:  MOVFF  03,FE2
0A62E:  MOVLW  01
0A630:  MOVWF  FEA
0A632:  MOVLW  A0
0A634:  MOVWF  FE9
0A636:  MOVLW  08
0A638:  MOVWF  01
0A63A:  MOVFF  FE6,FEE
0A63E:  DECFSZ 01,F
0A640:  GOTO   A63A
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0A644:  MOVLB  1
0A646:  MOVF   x5E,W
0A648:  MOVWF  FE9
0A64A:  MOVF   x5F,W
0A64C:  MOVWF  FEA
0A64E:  MOVFF  FEF,49
....................     unsigned int32 read_src = smf_data->src;
....................     unsigned int32 read_size = smf_data->size;
0A652:  MOVLW  01
0A654:  ADDWF  x5E,W
0A656:  MOVWF  FE9
0A658:  MOVLW  00
0A65A:  ADDWFC x5F,W
0A65C:  MOVWF  FEA
0A65E:  MOVFF  FEF,1A8
0A662:  MOVFF  FEC,1A9
0A666:  MOVFF  FEC,1AA
0A66A:  MOVFF  FEC,1AB
0A66E:  MOVF   FED,F
0A670:  MOVF   FED,F
0A672:  MOVF   FED,F
0A674:  MOVLW  05
0A676:  ADDWF  x5E,W
0A678:  MOVWF  FE9
0A67A:  MOVLW  00
0A67C:  ADDWFC x5F,W
0A67E:  MOVWF  FEA
0A680:  MOVFF  FEF,1AC
0A684:  MOVFF  FEC,1AD
0A688:  MOVFF  FEC,1AE
0A68C:  MOVFF  FEC,1AF
0A690:  MOVF   FED,F
0A692:  MOVF   FED,F
0A694:  MOVF   FED,F
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_src);
0A696:  MOVLW  0A
0A698:  MOVWF  FF6
0A69A:  MOVLW  0B
0A69C:  MOVWF  FF7
0A69E:  MOVLW  00
0A6A0:  MOVWF  FF8
0A6A2:  MOVLW  21
0A6A4:  MOVLB  9
0A6A6:  MOVWF  x96
0A6A8:  MOVLB  0
0A6AA:  CALL   1EE2
0A6AE:  MOVFF  1AB,996
0A6B2:  MOVLW  37
0A6B4:  MOVLB  9
0A6B6:  MOVWF  x97
0A6B8:  MOVLB  0
0A6BA:  CALL   20E0
0A6BE:  MOVFF  1AA,996
0A6C2:  MOVLW  37
0A6C4:  MOVLB  9
0A6C6:  MOVWF  x97
0A6C8:  MOVLB  0
0A6CA:  CALL   20E0
0A6CE:  MOVFF  1A9,996
0A6D2:  MOVLW  37
0A6D4:  MOVLB  9
0A6D6:  MOVWF  x97
0A6D8:  MOVLB  0
0A6DA:  CALL   20E0
0A6DE:  MOVFF  1A8,996
0A6E2:  MOVLW  37
0A6E4:  MOVLB  9
0A6E6:  MOVWF  x97
0A6E8:  MOVLB  0
0A6EA:  CALL   20E0
0A6EE:  MOVLW  0D
0A6F0:  MOVLB  A
0A6F2:  MOVWF  x29
0A6F4:  MOVLB  0
0A6F6:  CALL   1E60
0A6FA:  MOVLW  0A
0A6FC:  MOVLB  A
0A6FE:  MOVWF  x29
0A700:  MOVLB  0
0A702:  CALL   1E60
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0A706:  MOVLW  32
0A708:  MOVWF  FF6
0A70A:  MOVLW  0B
0A70C:  MOVWF  FF7
0A70E:  MOVLW  00
0A710:  MOVWF  FF8
0A712:  MOVLW  21
0A714:  MOVLB  9
0A716:  MOVWF  x96
0A718:  MOVLB  0
0A71A:  CALL   1EE2
0A71E:  MOVLW  41
0A720:  MOVWF  FE9
0A722:  MOVFF  1AF,1F4
0A726:  MOVFF  1AE,1F3
0A72A:  MOVFF  1AD,1F2
0A72E:  MOVFF  1AC,1F1
0A732:  CALL   9274
0A736:  MOVLW  56
0A738:  MOVWF  FF6
0A73A:  MOVLW  0B
0A73C:  MOVWF  FF7
0A73E:  MOVLW  00
0A740:  MOVWF  FF8
0A742:  MOVLW  04
0A744:  MOVLB  9
0A746:  MOVWF  x96
0A748:  MOVLB  0
0A74A:  CALL   1EE2
0A74E:  MOVFF  1AF,996
0A752:  MOVLW  57
0A754:  MOVLB  9
0A756:  MOVWF  x97
0A758:  MOVLB  0
0A75A:  CALL   20E0
0A75E:  MOVFF  1AE,996
0A762:  MOVLW  57
0A764:  MOVLB  9
0A766:  MOVWF  x97
0A768:  MOVLB  0
0A76A:  CALL   20E0
0A76E:  MOVFF  1AD,996
0A772:  MOVLW  57
0A774:  MOVLB  9
0A776:  MOVWF  x97
0A778:  MOVLB  0
0A77A:  CALL   20E0
0A77E:  MOVFF  1AC,996
0A782:  MOVLW  57
0A784:  MOVLB  9
0A786:  MOVWF  x97
0A788:  MOVLB  0
0A78A:  CALL   20E0
0A78E:  MOVLW  5D
0A790:  MOVWF  FF6
0A792:  MOVLW  0B
0A794:  MOVWF  FF7
0A796:  MOVLW  00
0A798:  MOVWF  FF8
0A79A:  MOVLW  05
0A79C:  MOVLB  9
0A79E:  MOVWF  x96
0A7A0:  MOVLB  0
0A7A2:  CALL   1EE2
.................... 
....................     if (!is_connect(smf)){
0A7A6:  MOVFF  F5,A29
0A7AA:  MOVFF  F4,A28
0A7AE:  MOVFF  F3,A27
0A7B2:  MOVFF  F2,A26
0A7B6:  CALL   254C
0A7BA:  MOVF   01,F
0A7BC:  BTFSS  FD8.2
0A7BE:  GOTO   A7D2
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0A7C2:  MOVLW  64
0A7C4:  MOVWF  FF6
0A7C6:  MOVLW  0B
0A7C8:  MOVWF  FF7
0A7CA:  MOVLW  00
0A7CC:  MOVWF  FF8
0A7CE:  CALL   1EB2
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0A7D2:  MOVLW  82
0A7D4:  MOVWF  FF6
0A7D6:  MOVLW  0B
0A7D8:  MOVWF  FF7
0A7DA:  MOVLW  00
0A7DC:  MOVWF  FF8
0A7DE:  CALL   1EB2
....................     for (unsigned int32 addr = read_src; addr < read_src + read_size; addr += PACKET_SIZE)
0A7E2:  MOVFF  1AB,1B3
0A7E6:  MOVFF  1AA,1B2
0A7EA:  MOVFF  1A9,1B1
0A7EE:  MOVFF  1A8,1B0
0A7F2:  MOVLB  1
0A7F4:  MOVF   xAC,W
0A7F6:  ADDWF  xA8,W
0A7F8:  MOVWF  00
0A7FA:  MOVF   xAD,W
0A7FC:  ADDWFC xA9,W
0A7FE:  MOVWF  01
0A800:  MOVF   xAE,W
0A802:  ADDWFC xAA,W
0A804:  MOVWF  02
0A806:  MOVF   xAF,W
0A808:  ADDWFC xAB,W
0A80A:  MOVWF  03
0A80C:  MOVF   xB3,W
0A80E:  SUBWF  03,W
0A810:  BTFSC  FD8.0
0A812:  BRA    A81A
0A814:  MOVLB  0
0A816:  GOTO   A962
0A81A:  MOVLB  0
0A81C:  BTFSS  FD8.2
0A81E:  GOTO   A864
0A822:  MOVLB  1
0A824:  MOVF   xB2,W
0A826:  SUBWF  02,W
0A828:  BTFSC  FD8.0
0A82A:  BRA    A832
0A82C:  MOVLB  0
0A82E:  GOTO   A962
0A832:  MOVLB  0
0A834:  BTFSS  FD8.2
0A836:  GOTO   A864
0A83A:  MOVLB  1
0A83C:  MOVF   xB1,W
0A83E:  SUBWF  01,W
0A840:  BTFSC  FD8.0
0A842:  BRA    A84A
0A844:  MOVLB  0
0A846:  GOTO   A962
0A84A:  MOVLB  0
0A84C:  BTFSS  FD8.2
0A84E:  GOTO   A864
0A852:  MOVF   00,W
0A854:  MOVLB  1
0A856:  SUBWF  xB0,W
0A858:  BTFSS  FD8.0
0A85A:  BRA    A862
0A85C:  MOVLB  0
0A85E:  GOTO   A962
0A862:  MOVLB  0
....................     {
....................         read_data_bytes(smf, addr, buffer, PACKET_SIZE);
0A864:  MOVFF  F5,270
0A868:  MOVFF  F4,26F
0A86C:  MOVFF  F3,26E
0A870:  MOVFF  F2,26D
0A874:  MOVFF  1B3,274
0A878:  MOVFF  1B2,273
0A87C:  MOVFF  1B1,272
0A880:  MOVFF  1B0,271
0A884:  MOVLW  01
0A886:  MOVLB  2
0A888:  MOVWF  x76
0A88A:  MOVLW  60
0A88C:  MOVWF  x75
0A88E:  CLRF   x7A
0A890:  CLRF   x79
0A892:  CLRF   x78
0A894:  MOVLW  40
0A896:  MOVWF  x77
0A898:  MOVLB  0
0A89A:  CALL   2612
....................         for (unsigned int32 i = 0; i < PACKET_SIZE; i++)
0A89E:  MOVLB  1
0A8A0:  CLRF   xB7
0A8A2:  CLRF   xB6
0A8A4:  CLRF   xB5
0A8A6:  CLRF   xB4
0A8A8:  MOVLB  0
0A8AA:  MOVLB  1
0A8AC:  MOVF   xB7,F
0A8AE:  BTFSC  FD8.2
0A8B0:  BRA    A8B8
0A8B2:  MOVLB  0
0A8B4:  GOTO   A932
0A8B8:  MOVLB  0
0A8BA:  MOVLB  1
0A8BC:  MOVF   xB6,F
0A8BE:  BTFSC  FD8.2
0A8C0:  BRA    A8C8
0A8C2:  MOVLB  0
0A8C4:  GOTO   A932
0A8C8:  MOVLB  0
0A8CA:  MOVLB  1
0A8CC:  MOVF   xB5,F
0A8CE:  BTFSC  FD8.2
0A8D0:  BRA    A8D8
0A8D2:  MOVLB  0
0A8D4:  GOTO   A932
0A8D8:  MOVLB  0
0A8DA:  MOVLB  1
0A8DC:  MOVF   xB4,W
0A8DE:  SUBLW  3F
0A8E0:  BTFSC  FD8.0
0A8E2:  BRA    A8EA
0A8E4:  MOVLB  0
0A8E6:  GOTO   A932
0A8EA:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0A8EC:  MOVLW  60
0A8EE:  MOVLB  1
0A8F0:  ADDWF  xB4,W
0A8F2:  MOVWF  FE9
0A8F4:  MOVLW  01
0A8F6:  ADDWFC xB5,W
0A8F8:  MOVWF  FEA
0A8FA:  MOVFF  FEF,1B8
0A8FE:  MOVFF  1B8,996
0A902:  MOVLW  37
0A904:  MOVLB  9
0A906:  MOVWF  x97
0A908:  MOVLB  0
0A90A:  CALL   20E0
0A90E:  MOVLW  20
0A910:  MOVLB  A
0A912:  MOVWF  x29
0A914:  MOVLB  0
0A916:  CALL   1E60
0A91A:  MOVLW  01
0A91C:  MOVLB  1
0A91E:  ADDWF  xB4,F
0A920:  BTFSC  FD8.0
0A922:  INCF   xB5,F
0A924:  BTFSC  FD8.2
0A926:  INCF   xB6,F
0A928:  BTFSC  FD8.2
0A92A:  INCF   xB7,F
0A92C:  MOVLB  0
0A92E:  GOTO   A8AA
....................         }
....................         fprintf(PC, "\r\n");
0A932:  MOVLW  0D
0A934:  MOVLB  A
0A936:  MOVWF  x29
0A938:  MOVLB  0
0A93A:  CALL   1E60
0A93E:  MOVLW  0A
0A940:  MOVLB  A
0A942:  MOVWF  x29
0A944:  MOVLB  0
0A946:  CALL   1E60
0A94A:  MOVLW  40
0A94C:  MOVLB  1
0A94E:  ADDWF  xB0,F
0A950:  MOVLW  00
0A952:  ADDWFC xB1,F
0A954:  MOVLW  00
0A956:  ADDWFC xB2,F
0A958:  MOVLW  00
0A95A:  ADDWFC xB3,F
0A95C:  MOVLB  0
0A95E:  GOTO   A7F2
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0A962:  MOVLW  9A
0A964:  MOVWF  FF6
0A966:  MOVLW  0B
0A968:  MOVWF  FF7
0A96A:  MOVLW  00
0A96C:  MOVWF  FF8
0A96E:  CALL   1EB2
....................     fprintf(PC, "____________________\r\n\r\n");
0A972:  MOVLW  B2
0A974:  MOVWF  FF6
0A976:  MOVLW  0B
0A978:  MOVWF  FF7
0A97A:  MOVLW  00
0A97C:  MOVWF  FF8
0A97E:  CALL   1EB2
0A982:  GOTO   B11A (RETURN)
.................... }
.................... 
.................... void smf_erase(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0A986:  MOVLW  CC
0A988:  MOVWF  FF6
0A98A:  MOVLW  0B
0A98C:  MOVWF  FF7
0A98E:  MOVLW  00
0A990:  MOVWF  FF8
0A992:  CALL   1EB2
....................     fprintf(PC, "___Start smf_erase____\r\n");
0A996:  MOVLW  E6
0A998:  MOVWF  FF6
0A99A:  MOVLW  0B
0A99C:  MOVWF  FF7
0A99E:  MOVLW  00
0A9A0:  MOVWF  FF8
0A9A2:  CALL   1EB2
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
0A9A6:  MOVLB  1
0A9A8:  MOVF   x5E,W
0A9AA:  MOVWF  FE9
0A9AC:  MOVF   x5F,W
0A9AE:  MOVWF  FEA
0A9B0:  MOVFF  FEF,178
0A9B4:  MOVFF  178,1F2
0A9B8:  MOVLB  0
0A9BA:  CALL   91BE
0A9BE:  MOVFF  02,03
0A9C2:  MOVF   01,W
0A9C4:  MOVWF  FE1
0A9C6:  MOVFF  03,FE2
0A9CA:  MOVLW  01
0A9CC:  MOVWF  FEA
0A9CE:  MOVLW  60
0A9D0:  MOVWF  FE9
0A9D2:  MOVLW  08
0A9D4:  MOVWF  01
0A9D6:  MOVFF  FE6,FEE
0A9DA:  DECFSZ 01,F
0A9DC:  GOTO   A9D6
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0A9E0:  MOVLB  1
0A9E2:  MOVF   x5E,W
0A9E4:  MOVWF  FE9
0A9E6:  MOVF   x5F,W
0A9E8:  MOVWF  FEA
0A9EA:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 erase_src = smf_data->src;
....................     unsigned int32 erase_size = smf_data->size;
0A9EE:  MOVFF  163,16B
0A9F2:  MOVFF  162,16A
0A9F6:  MOVFF  161,169
0A9FA:  MOVFF  160,168
0A9FE:  MOVFF  167,16F
0AA02:  MOVFF  166,16E
0AA06:  MOVFF  165,16D
0AA0A:  MOVFF  164,16C
0AA0E:  MOVLW  01
0AA10:  ADDWF  x5E,W
0AA12:  MOVWF  FE9
0AA14:  MOVLW  00
0AA16:  ADDWFC x5F,W
0AA18:  MOVWF  FEA
0AA1A:  MOVFF  FEF,170
0AA1E:  MOVFF  FEC,171
0AA22:  MOVFF  FEC,172
0AA26:  MOVFF  FEC,173
0AA2A:  MOVF   FED,F
0AA2C:  MOVF   FED,F
0AA2E:  MOVF   FED,F
0AA30:  MOVLW  05
0AA32:  ADDWF  x5E,W
0AA34:  MOVWF  FE9
0AA36:  MOVLW  00
0AA38:  ADDWFC x5F,W
0AA3A:  MOVWF  FEA
0AA3C:  MOVFF  FEF,174
0AA40:  MOVFF  FEC,175
0AA44:  MOVFF  FEC,176
0AA48:  MOVFF  FEC,177
0AA4C:  MOVF   FED,F
0AA4E:  MOVF   FED,F
0AA50:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
0AA52:  MOVLW  00
0AA54:  MOVWF  FF6
0AA56:  MOVLW  0C
0AA58:  MOVWF  FF7
0AA5A:  MOVLW  00
0AA5C:  MOVWF  FF8
0AA5E:  MOVLW  25
0AA60:  MOVLB  9
0AA62:  MOVWF  x96
0AA64:  MOVLB  0
0AA66:  CALL   1EE2
0AA6A:  MOVFF  16B,996
0AA6E:  MOVLW  37
0AA70:  MOVLB  9
0AA72:  MOVWF  x97
0AA74:  MOVLB  0
0AA76:  CALL   20E0
0AA7A:  MOVFF  16A,996
0AA7E:  MOVLW  37
0AA80:  MOVLB  9
0AA82:  MOVWF  x97
0AA84:  MOVLB  0
0AA86:  CALL   20E0
0AA8A:  MOVFF  169,996
0AA8E:  MOVLW  37
0AA90:  MOVLB  9
0AA92:  MOVWF  x97
0AA94:  MOVLB  0
0AA96:  CALL   20E0
0AA9A:  MOVFF  168,996
0AA9E:  MOVLW  37
0AAA0:  MOVLB  9
0AAA2:  MOVWF  x97
0AAA4:  MOVLB  0
0AAA6:  CALL   20E0
0AAAA:  MOVLW  0D
0AAAC:  MOVLB  A
0AAAE:  MOVWF  x29
0AAB0:  MOVLB  0
0AAB2:  CALL   1E60
0AAB6:  MOVLW  0A
0AAB8:  MOVLB  A
0AABA:  MOVWF  x29
0AABC:  MOVLB  0
0AABE:  CALL   1E60
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0AAC2:  MOVLW  2C
0AAC4:  MOVWF  FF6
0AAC6:  MOVLW  0C
0AAC8:  MOVWF  FF7
0AACA:  MOVLW  00
0AACC:  MOVWF  FF8
0AACE:  MOVLW  25
0AAD0:  MOVLB  9
0AAD2:  MOVWF  x96
0AAD4:  MOVLB  0
0AAD6:  CALL   1EE2
0AADA:  MOVFF  16F,996
0AADE:  MOVLW  37
0AAE0:  MOVLB  9
0AAE2:  MOVWF  x97
0AAE4:  MOVLB  0
0AAE6:  CALL   20E0
0AAEA:  MOVFF  16E,996
0AAEE:  MOVLW  37
0AAF0:  MOVLB  9
0AAF2:  MOVWF  x97
0AAF4:  MOVLB  0
0AAF6:  CALL   20E0
0AAFA:  MOVFF  16D,996
0AAFE:  MOVLW  37
0AB00:  MOVLB  9
0AB02:  MOVWF  x97
0AB04:  MOVLB  0
0AB06:  CALL   20E0
0AB0A:  MOVFF  16C,996
0AB0E:  MOVLW  37
0AB10:  MOVLB  9
0AB12:  MOVWF  x97
0AB14:  MOVLB  0
0AB16:  CALL   20E0
0AB1A:  MOVLW  0D
0AB1C:  MOVLB  A
0AB1E:  MOVWF  x29
0AB20:  MOVLB  0
0AB22:  CALL   1E60
0AB26:  MOVLW  0A
0AB28:  MOVLB  A
0AB2A:  MOVWF  x29
0AB2C:  MOVLB  0
0AB2E:  CALL   1E60
....................     fprintf(PC, "In SMF Erase source data address: %LX\r\n", erase_src);
0AB32:  MOVLW  58
0AB34:  MOVWF  FF6
0AB36:  MOVLW  0C
0AB38:  MOVWF  FF7
0AB3A:  MOVLW  00
0AB3C:  MOVWF  FF8
0AB3E:  MOVLW  22
0AB40:  MOVLB  9
0AB42:  MOVWF  x96
0AB44:  MOVLB  0
0AB46:  CALL   1EE2
0AB4A:  MOVFF  173,996
0AB4E:  MOVLW  37
0AB50:  MOVLB  9
0AB52:  MOVWF  x97
0AB54:  MOVLB  0
0AB56:  CALL   20E0
0AB5A:  MOVFF  172,996
0AB5E:  MOVLW  37
0AB60:  MOVLB  9
0AB62:  MOVWF  x97
0AB64:  MOVLB  0
0AB66:  CALL   20E0
0AB6A:  MOVFF  171,996
0AB6E:  MOVLW  37
0AB70:  MOVLB  9
0AB72:  MOVWF  x97
0AB74:  MOVLB  0
0AB76:  CALL   20E0
0AB7A:  MOVFF  170,996
0AB7E:  MOVLW  37
0AB80:  MOVLB  9
0AB82:  MOVWF  x97
0AB84:  MOVLB  0
0AB86:  CALL   20E0
0AB8A:  MOVLW  0D
0AB8C:  MOVLB  A
0AB8E:  MOVWF  x29
0AB90:  MOVLB  0
0AB92:  CALL   1E60
0AB96:  MOVLW  0A
0AB98:  MOVLB  A
0AB9A:  MOVWF  x29
0AB9C:  MOVLB  0
0AB9E:  CALL   1E60
....................     fprintf(PC, "In SMF Erase data size          : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0ABA2:  MOVLW  80
0ABA4:  MOVWF  FF6
0ABA6:  MOVLW  0C
0ABA8:  MOVWF  FF7
0ABAA:  MOVLW  00
0ABAC:  MOVWF  FF8
0ABAE:  MOVLW  22
0ABB0:  MOVLB  9
0ABB2:  MOVWF  x96
0ABB4:  MOVLB  0
0ABB6:  CALL   1EE2
0ABBA:  MOVLW  41
0ABBC:  MOVWF  FE9
0ABBE:  MOVFF  177,1F4
0ABC2:  MOVFF  176,1F3
0ABC6:  MOVFF  175,1F2
0ABCA:  MOVFF  174,1F1
0ABCE:  CALL   9274
0ABD2:  MOVLW  A5
0ABD4:  MOVWF  FF6
0ABD6:  MOVLW  0C
0ABD8:  MOVWF  FF7
0ABDA:  MOVLW  00
0ABDC:  MOVWF  FF8
0ABDE:  MOVLW  04
0ABE0:  MOVLB  9
0ABE2:  MOVWF  x96
0ABE4:  MOVLB  0
0ABE6:  CALL   1EE2
0ABEA:  MOVFF  177,996
0ABEE:  MOVLW  57
0ABF0:  MOVLB  9
0ABF2:  MOVWF  x97
0ABF4:  MOVLB  0
0ABF6:  CALL   20E0
0ABFA:  MOVFF  176,996
0ABFE:  MOVLW  57
0AC00:  MOVLB  9
0AC02:  MOVWF  x97
0AC04:  MOVLB  0
0AC06:  CALL   20E0
0AC0A:  MOVFF  175,996
0AC0E:  MOVLW  57
0AC10:  MOVLB  9
0AC12:  MOVWF  x97
0AC14:  MOVLB  0
0AC16:  CALL   20E0
0AC1A:  MOVFF  174,996
0AC1E:  MOVLW  57
0AC20:  MOVLB  9
0AC22:  MOVWF  x97
0AC24:  MOVLB  0
0AC26:  CALL   20E0
0AC2A:  MOVLW  AC
0AC2C:  MOVWF  FF6
0AC2E:  MOVLW  0C
0AC30:  MOVWF  FF7
0AC32:  MOVLW  00
0AC34:  MOVWF  FF8
0AC36:  MOVLW  05
0AC38:  MOVLB  9
0AC3A:  MOVWF  x96
0AC3C:  MOVLB  0
0AC3E:  CALL   1EE2
.................... 
....................     if (!is_connect(smf)){
0AC42:  MOVFF  F5,A29
0AC46:  MOVFF  F4,A28
0AC4A:  MOVFF  F3,A27
0AC4E:  MOVFF  F2,A26
0AC52:  CALL   254C
0AC56:  MOVF   01,F
0AC58:  BTFSS  FD8.2
0AC5A:  GOTO   AC72
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0AC5E:  MOVLW  B2
0AC60:  MOVWF  FF6
0AC62:  MOVLW  0C
0AC64:  MOVWF  FF7
0AC66:  MOVLW  00
0AC68:  MOVWF  FF8
0AC6A:  CALL   1EB2
....................         return;
0AC6E:  GOTO   AFAC
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_src < mis_start_address || erase_src >= mis_end_address) {
0AC72:  MOVLB  1
0AC74:  MOVF   x73,W
0AC76:  SUBWF  x6B,W
0AC78:  BTFSC  FD8.0
0AC7A:  BRA    AC82
0AC7C:  MOVLB  0
0AC7E:  GOTO   ACCC
0AC82:  MOVLB  0
0AC84:  BTFSS  FD8.2
0AC86:  GOTO   AD26
0AC8A:  MOVLB  1
0AC8C:  MOVF   x72,W
0AC8E:  SUBWF  x6A,W
0AC90:  BTFSC  FD8.0
0AC92:  BRA    AC9A
0AC94:  MOVLB  0
0AC96:  GOTO   ACCC
0AC9A:  MOVLB  0
0AC9C:  BTFSS  FD8.2
0AC9E:  GOTO   AD26
0ACA2:  MOVLB  1
0ACA4:  MOVF   x71,W
0ACA6:  SUBWF  x69,W
0ACA8:  BTFSC  FD8.0
0ACAA:  BRA    ACB2
0ACAC:  MOVLB  0
0ACAE:  GOTO   ACCC
0ACB2:  MOVLB  0
0ACB4:  BTFSS  FD8.2
0ACB6:  GOTO   AD26
0ACBA:  MOVLB  1
0ACBC:  MOVF   x68,W
0ACBE:  SUBWF  x70,W
0ACC0:  BTFSC  FD8.0
0ACC2:  BRA    ACCA
0ACC4:  MOVLB  0
0ACC6:  GOTO   AD26
0ACCA:  MOVLB  0
0ACCC:  MOVLB  1
0ACCE:  MOVF   x6F,W
0ACD0:  SUBWF  x73,W
0ACD2:  BTFSC  FD8.0
0ACD4:  BRA    ACDC
0ACD6:  MOVLB  0
0ACD8:  GOTO   AE4A
0ACDC:  MOVLB  0
0ACDE:  BTFSS  FD8.2
0ACE0:  GOTO   AD26
0ACE4:  MOVLB  1
0ACE6:  MOVF   x6E,W
0ACE8:  SUBWF  x72,W
0ACEA:  BTFSC  FD8.0
0ACEC:  BRA    ACF4
0ACEE:  MOVLB  0
0ACF0:  GOTO   AE4A
0ACF4:  MOVLB  0
0ACF6:  BTFSS  FD8.2
0ACF8:  GOTO   AD26
0ACFC:  MOVLB  1
0ACFE:  MOVF   x6D,W
0AD00:  SUBWF  x71,W
0AD02:  BTFSC  FD8.0
0AD04:  BRA    AD0C
0AD06:  MOVLB  0
0AD08:  GOTO   AE4A
0AD0C:  MOVLB  0
0AD0E:  BTFSS  FD8.2
0AD10:  GOTO   AD26
0AD14:  MOVLB  1
0AD16:  MOVF   x6C,W
0AD18:  SUBWF  x70,W
0AD1A:  BTFSC  FD8.0
0AD1C:  BRA    AD24
0AD1E:  MOVLB  0
0AD20:  GOTO   AE4A
0AD24:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_src, mis_start_address, mis_end_address);
0AD26:  MOVLW  D0
0AD28:  MOVWF  FF6
0AD2A:  MOVLW  0C
0AD2C:  MOVWF  FF7
0AD2E:  MOVLW  00
0AD30:  MOVWF  FF8
0AD32:  MOVLW  1E
0AD34:  MOVLB  9
0AD36:  MOVWF  x96
0AD38:  MOVLB  0
0AD3A:  CALL   1EE2
0AD3E:  MOVFF  173,996
0AD42:  MOVLW  37
0AD44:  MOVLB  9
0AD46:  MOVWF  x97
0AD48:  MOVLB  0
0AD4A:  CALL   20E0
0AD4E:  MOVFF  172,996
0AD52:  MOVLW  37
0AD54:  MOVLB  9
0AD56:  MOVWF  x97
0AD58:  MOVLB  0
0AD5A:  CALL   20E0
0AD5E:  MOVFF  171,996
0AD62:  MOVLW  37
0AD64:  MOVLB  9
0AD66:  MOVWF  x97
0AD68:  MOVLB  0
0AD6A:  CALL   20E0
0AD6E:  MOVFF  170,996
0AD72:  MOVLW  37
0AD74:  MOVLB  9
0AD76:  MOVWF  x97
0AD78:  MOVLB  0
0AD7A:  CALL   20E0
0AD7E:  MOVLW  F1
0AD80:  MOVWF  FF6
0AD82:  MOVLW  0C
0AD84:  MOVWF  FF7
0AD86:  MOVLW  00
0AD88:  MOVWF  FF8
0AD8A:  MOVLW  1D
0AD8C:  MOVLB  9
0AD8E:  MOVWF  x96
0AD90:  MOVLB  0
0AD92:  CALL   1EE2
0AD96:  MOVFF  16B,996
0AD9A:  MOVLW  37
0AD9C:  MOVLB  9
0AD9E:  MOVWF  x97
0ADA0:  MOVLB  0
0ADA2:  CALL   20E0
0ADA6:  MOVFF  16A,996
0ADAA:  MOVLW  37
0ADAC:  MOVLB  9
0ADAE:  MOVWF  x97
0ADB0:  MOVLB  0
0ADB2:  CALL   20E0
0ADB6:  MOVFF  169,996
0ADBA:  MOVLW  37
0ADBC:  MOVLB  9
0ADBE:  MOVWF  x97
0ADC0:  MOVLB  0
0ADC2:  CALL   20E0
0ADC6:  MOVFF  168,996
0ADCA:  MOVLW  37
0ADCC:  MOVLB  9
0ADCE:  MOVWF  x97
0ADD0:  MOVLB  0
0ADD2:  CALL   20E0
0ADD6:  MOVLW  11
0ADD8:  MOVWF  FF6
0ADDA:  MOVLW  0D
0ADDC:  MOVWF  FF7
0ADDE:  MOVLW  00
0ADE0:  MOVWF  FF8
0ADE2:  MOVLW  05
0ADE4:  MOVLB  9
0ADE6:  MOVWF  x96
0ADE8:  MOVLB  0
0ADEA:  CALL   1EE2
0ADEE:  MOVFF  16F,996
0ADF2:  MOVLW  37
0ADF4:  MOVLB  9
0ADF6:  MOVWF  x97
0ADF8:  MOVLB  0
0ADFA:  CALL   20E0
0ADFE:  MOVFF  16E,996
0AE02:  MOVLW  37
0AE04:  MOVLB  9
0AE06:  MOVWF  x97
0AE08:  MOVLB  0
0AE0A:  CALL   20E0
0AE0E:  MOVFF  16D,996
0AE12:  MOVLW  37
0AE14:  MOVLB  9
0AE16:  MOVWF  x97
0AE18:  MOVLB  0
0AE1A:  CALL   20E0
0AE1E:  MOVFF  16C,996
0AE22:  MOVLW  37
0AE24:  MOVLB  9
0AE26:  MOVWF  x97
0AE28:  MOVLB  0
0AE2A:  CALL   20E0
0AE2E:  MOVLW  19
0AE30:  MOVWF  FF6
0AE32:  MOVLW  0D
0AE34:  MOVWF  FF7
0AE36:  MOVLW  00
0AE38:  MOVWF  FF8
0AE3A:  MOVLW  03
0AE3C:  MOVLB  9
0AE3E:  MOVWF  x96
0AE40:  MOVLB  0
0AE42:  CALL   1EE2
....................         return;
0AE46:  GOTO   AFAC
....................     }
....................     
....................     if ((erase_src + erase_size) > mis_end_address) {
0AE4A:  MOVLB  1
0AE4C:  MOVF   x74,W
0AE4E:  ADDWF  x70,W
0AE50:  MOVWF  x78
0AE52:  MOVF   x75,W
0AE54:  ADDWFC x71,W
0AE56:  MOVWF  x79
0AE58:  MOVF   x76,W
0AE5A:  ADDWFC x72,W
0AE5C:  MOVWF  x7A
0AE5E:  MOVF   x77,W
0AE60:  ADDWFC x73,W
0AE62:  MOVWF  x7B
0AE64:  MOVF   x6F,W
0AE66:  SUBWF  x7B,W
0AE68:  BTFSC  FD8.0
0AE6A:  BRA    AE72
0AE6C:  MOVLB  0
0AE6E:  GOTO   AF58
0AE72:  MOVLB  0
0AE74:  BTFSS  FD8.2
0AE76:  GOTO   AEBC
0AE7A:  MOVLB  1
0AE7C:  MOVF   x6E,W
0AE7E:  SUBWF  x7A,W
0AE80:  BTFSC  FD8.0
0AE82:  BRA    AE8A
0AE84:  MOVLB  0
0AE86:  GOTO   AF58
0AE8A:  MOVLB  0
0AE8C:  BTFSS  FD8.2
0AE8E:  GOTO   AEBC
0AE92:  MOVLB  1
0AE94:  MOVF   x6D,W
0AE96:  SUBWF  x79,W
0AE98:  BTFSC  FD8.0
0AE9A:  BRA    AEA2
0AE9C:  MOVLB  0
0AE9E:  GOTO   AF58
0AEA2:  MOVLB  0
0AEA4:  BTFSS  FD8.2
0AEA6:  GOTO   AEBC
0AEAA:  MOVLB  1
0AEAC:  MOVF   x78,W
0AEAE:  SUBWF  x6C,W
0AEB0:  BTFSS  FD8.0
0AEB2:  BRA    AEBA
0AEB4:  MOVLB  0
0AEB6:  GOTO   AF58
0AEBA:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mis_end_address);
0AEBC:  MOVLW  1E
0AEBE:  MOVWF  FF6
0AEC0:  MOVLW  0D
0AEC2:  MOVWF  FF7
0AEC4:  MOVLW  00
0AEC6:  MOVWF  FF8
0AEC8:  MOVLW  3A
0AECA:  MOVLB  9
0AECC:  MOVWF  x96
0AECE:  MOVLB  0
0AED0:  CALL   1EE2
0AED4:  MOVFF  16F,996
0AED8:  MOVLW  37
0AEDA:  MOVLB  9
0AEDC:  MOVWF  x97
0AEDE:  MOVLB  0
0AEE0:  CALL   20E0
0AEE4:  MOVFF  16E,996
0AEE8:  MOVLW  37
0AEEA:  MOVLB  9
0AEEC:  MOVWF  x97
0AEEE:  MOVLB  0
0AEF0:  CALL   20E0
0AEF4:  MOVFF  16D,996
0AEF8:  MOVLW  37
0AEFA:  MOVLB  9
0AEFC:  MOVWF  x97
0AEFE:  MOVLB  0
0AF00:  CALL   20E0
0AF04:  MOVFF  16C,996
0AF08:  MOVLW  37
0AF0A:  MOVLB  9
0AF0C:  MOVWF  x97
0AF0E:  MOVLB  0
0AF10:  CALL   20E0
0AF14:  MOVLW  0D
0AF16:  MOVLB  A
0AF18:  MOVWF  x29
0AF1A:  MOVLB  0
0AF1C:  CALL   1E60
0AF20:  MOVLW  0A
0AF22:  MOVLB  A
0AF24:  MOVWF  x29
0AF26:  MOVLB  0
0AF28:  CALL   1E60
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
0AF2C:  MOVLW  5E
0AF2E:  MOVWF  FF6
0AF30:  MOVLW  0D
0AF32:  MOVWF  FF7
0AF34:  MOVLW  00
0AF36:  MOVWF  FF8
0AF38:  CALL   1EB2
....................         erase_size = mis_end_address - erase_src;
0AF3C:  MOVLB  1
0AF3E:  MOVF   x70,W
0AF40:  SUBWF  x6C,W
0AF42:  MOVWF  x74
0AF44:  MOVF   x71,W
0AF46:  SUBWFB x6D,W
0AF48:  MOVWF  x75
0AF4A:  MOVF   x72,W
0AF4C:  SUBWFB x6E,W
0AF4E:  MOVWF  x76
0AF50:  MOVF   x73,W
0AF52:  SUBWFB x6F,W
0AF54:  MOVWF  x77
0AF56:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0AF58:  MOVLW  92
0AF5A:  MOVWF  FF6
0AF5C:  MOVLW  0D
0AF5E:  MOVWF  FF7
0AF60:  MOVLW  00
0AF62:  MOVWF  FF8
0AF64:  CALL   1EB2
....................     subsector_4kByte_erase(smf, erase_src);
0AF68:  MOVFF  F5,A29
0AF6C:  MOVFF  F4,A28
0AF70:  MOVFF  F3,A27
0AF74:  MOVFF  F2,A26
0AF78:  MOVFF  173,A2D
0AF7C:  MOVFF  172,A2C
0AF80:  MOVFF  171,A2B
0AF84:  MOVFF  170,A2A
0AF88:  CALL   378A
....................     
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
0AF8C:  MOVLW  C4
0AF8E:  MOVWF  FF6
0AF90:  MOVLW  0D
0AF92:  MOVWF  FF7
0AF94:  MOVLW  00
0AF96:  MOVWF  FF8
0AF98:  CALL   1EB2
....................     fprintf(PC, "____________________\r\n\r\n");
0AF9C:  MOVLW  DE
0AF9E:  MOVWF  FF6
0AFA0:  MOVLW  0D
0AFA2:  MOVWF  FF7
0AFA4:  MOVLW  00
0AFA6:  MOVWF  FF8
0AFA8:  CALL   1EB2
0AFAC:  GOTO   B148 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.meas;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... // カウンター更新関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size)
.................... {
....................     switch(mission_id)
*
09A04:  MOVLB  1
09A06:  MOVF   xEC,W
09A08:  XORLW  01
09A0A:  MOVLB  0
09A0C:  BTFSC  FD8.2
09A0E:  GOTO   9A1E
09A12:  XORLW  03
09A14:  BTFSC  FD8.2
09A16:  GOTO   9AAC
09A1A:  GOTO   9B3A
....................     {
....................         case 0x01: // CIGS_MEASURE_DATA
....................             misf_meas_uncopyed_counter += transfer_size;
09A1E:  MOVLB  1
09A20:  MOVF   xED,W
09A22:  ADDWF  x15,F
09A24:  MOVF   xEE,W
09A26:  ADDWFC x16,F
09A28:  MOVF   xEF,W
09A2A:  ADDWFC x17,F
09A2C:  MOVF   xF0,W
09A2E:  ADDWFC x18,F
....................             fprintf(PC, "MISF Counter Update - Measurement: +%ld, Total: %lu\r\n", 
....................                     transfer_size, misf_meas_uncopyed_counter);
09A30:  MOVLW  64
09A32:  MOVWF  FF6
09A34:  MOVLW  0E
09A36:  MOVWF  FF7
09A38:  MOVLW  00
09A3A:  MOVWF  FF8
09A3C:  MOVLW  24
09A3E:  MOVLB  9
09A40:  MOVWF  x96
09A42:  MOVLB  0
09A44:  CALL   1EE2
09A48:  MOVLW  41
09A4A:  MOVWF  FE9
09A4C:  MOVFF  1F0,1F4
09A50:  MOVFF  1EF,1F3
09A54:  MOVFF  1EE,1F2
09A58:  MOVFF  1ED,1F1
09A5C:  CALL   95A6
09A60:  MOVLW  8B
09A62:  MOVWF  FF6
09A64:  MOVLW  0E
09A66:  MOVWF  FF7
09A68:  MOVLW  00
09A6A:  MOVWF  FF8
09A6C:  MOVLW  09
09A6E:  MOVLB  9
09A70:  MOVWF  x96
09A72:  MOVLB  0
09A74:  CALL   1EE2
09A78:  MOVLW  41
09A7A:  MOVWF  FE9
09A7C:  MOVFF  118,1F4
09A80:  MOVFF  117,1F3
09A84:  MOVFF  116,1F2
09A88:  MOVFF  115,1F1
09A8C:  CALL   9274
09A90:  MOVLW  0D
09A92:  MOVLB  A
09A94:  MOVWF  x29
09A96:  MOVLB  0
09A98:  CALL   1E60
09A9C:  MOVLW  0A
09A9E:  MOVLB  A
09AA0:  MOVWF  x29
09AA2:  MOVLB  0
09AA4:  CALL   1E60
....................             break;
09AA8:  GOTO   9B7E
....................             
....................         case 0x02: // CIGS_PICLOG  
....................             misf_piclog_uncopyed_counter += transfer_size;
09AAC:  MOVLB  1
09AAE:  MOVF   xED,W
09AB0:  ADDWF  x0B,F
09AB2:  MOVF   xEE,W
09AB4:  ADDWFC x0C,F
09AB6:  MOVF   xEF,W
09AB8:  ADDWFC x0D,F
09ABA:  MOVF   xF0,W
09ABC:  ADDWFC x0E,F
....................             fprintf(PC, "MISF Counter Update - Piclog: +%ld, Total: %lu\r\n", 
....................                     transfer_size, misf_piclog_uncopyed_counter);
09ABE:  MOVLW  9A
09AC0:  MOVWF  FF6
09AC2:  MOVLW  0E
09AC4:  MOVWF  FF7
09AC6:  MOVLW  00
09AC8:  MOVWF  FF8
09ACA:  MOVLW  1F
09ACC:  MOVLB  9
09ACE:  MOVWF  x96
09AD0:  MOVLB  0
09AD2:  CALL   1EE2
09AD6:  MOVLW  41
09AD8:  MOVWF  FE9
09ADA:  MOVFF  1F0,1F4
09ADE:  MOVFF  1EF,1F3
09AE2:  MOVFF  1EE,1F2
09AE6:  MOVFF  1ED,1F1
09AEA:  CALL   95A6
09AEE:  MOVLW  BC
09AF0:  MOVWF  FF6
09AF2:  MOVLW  0E
09AF4:  MOVWF  FF7
09AF6:  MOVLW  00
09AF8:  MOVWF  FF8
09AFA:  MOVLW  09
09AFC:  MOVLB  9
09AFE:  MOVWF  x96
09B00:  MOVLB  0
09B02:  CALL   1EE2
09B06:  MOVLW  41
09B08:  MOVWF  FE9
09B0A:  MOVFF  10E,1F4
09B0E:  MOVFF  10D,1F3
09B12:  MOVFF  10C,1F2
09B16:  MOVFF  10B,1F1
09B1A:  CALL   9274
09B1E:  MOVLW  0D
09B20:  MOVLB  A
09B22:  MOVWF  x29
09B24:  MOVLB  0
09B26:  CALL   1E60
09B2A:  MOVLW  0A
09B2C:  MOVLB  A
09B2E:  MOVWF  x29
09B30:  MOVLB  0
09B32:  CALL   1E60
....................             break;
09B36:  GOTO   9B7E
....................             
....................         default:
....................             fprintf(PC, "Warning: Unknown mission_id %02X for counter update\r\n", mission_id);
09B3A:  MOVLW  CC
09B3C:  MOVWF  FF6
09B3E:  MOVLW  0E
09B40:  MOVWF  FF7
09B42:  MOVLW  00
09B44:  MOVWF  FF8
09B46:  MOVLW  1C
09B48:  MOVLB  9
09B4A:  MOVWF  x96
09B4C:  MOVLB  0
09B4E:  CALL   1EE2
09B52:  MOVFF  1EC,996
09B56:  MOVLW  37
09B58:  MOVLB  9
09B5A:  MOVWF  x97
09B5C:  MOVLB  0
09B5E:  CALL   20E0
09B62:  MOVLW  EC
09B64:  MOVWF  FF6
09B66:  MOVLW  0E
09B68:  MOVWF  FF7
09B6A:  MOVLW  00
09B6C:  MOVWF  FF8
09B6E:  MOVLW  15
09B70:  MOVLB  9
09B72:  MOVWF  x96
09B74:  MOVLB  0
09B76:  CALL   1EE2
....................             break;
09B7A:  GOTO   9B7E
....................     }
09B7E:  GOTO   A53E (RETURN)
.................... }
.................... 
.................... // カウンター初期化関数
.................... void reset_misf_counters(int8 mission_id)
.................... {
....................     switch(mission_id)
*
09722:  MOVLB  1
09724:  MOVF   xEC,W
09726:  XORLW  01
09728:  MOVLB  0
0972A:  BTFSC  FD8.2
0972C:  GOTO   973C
09730:  XORLW  03
09732:  BTFSC  FD8.2
09734:  GOTO   975C
09738:  GOTO   977C
....................     {
....................         case 0x01: // CIGS_MEASURE_DATA
....................             misf_meas_uncopyed_counter = 0;
0973C:  MOVLB  1
0973E:  CLRF   x18
09740:  CLRF   x17
09742:  CLRF   x16
09744:  CLRF   x15
....................             fprintf(PC, "Reset misf_meas_uncopyed_counter\r\n");
09746:  MOVLW  02
09748:  MOVWF  FF6
0974A:  MOVLW  0F
0974C:  MOVWF  FF7
0974E:  MOVLW  00
09750:  MOVWF  FF8
09752:  MOVLB  0
09754:  CALL   1EB2
....................             break;
09758:  GOTO   97C0
....................             
....................         case 0x02: // CIGS_PICLOG
....................             misf_piclog_uncopyed_counter = 0;
0975C:  MOVLB  1
0975E:  CLRF   x0E
09760:  CLRF   x0D
09762:  CLRF   x0C
09764:  CLRF   x0B
....................             fprintf(PC, "Reset misf_piclog_uncopyed_counter\r\n");
09766:  MOVLW  26
09768:  MOVWF  FF6
0976A:  MOVLW  0F
0976C:  MOVWF  FF7
0976E:  MOVLW  00
09770:  MOVWF  FF8
09772:  MOVLB  0
09774:  CALL   1EB2
....................             break;
09778:  GOTO   97C0
....................             
....................         default:
....................             fprintf(PC, "Warning: Unknown mission_id %02X for counter reset\r\n", mission_id);
0977C:  MOVLW  4C
0977E:  MOVWF  FF6
09780:  MOVLW  0F
09782:  MOVWF  FF7
09784:  MOVLW  00
09786:  MOVWF  FF8
09788:  MOVLW  1C
0978A:  MOVLB  9
0978C:  MOVWF  x96
0978E:  MOVLB  0
09790:  CALL   1EE2
09794:  MOVFF  1EC,996
09798:  MOVLW  37
0979A:  MOVLB  9
0979C:  MOVWF  x97
0979E:  MOVLB  0
097A0:  CALL   20E0
097A4:  MOVLW  6C
097A6:  MOVWF  FF6
097A8:  MOVLW  0F
097AA:  MOVWF  FF7
097AC:  MOVLW  00
097AE:  MOVWF  FF8
097B0:  MOVLW  14
097B2:  MOVLB  9
097B4:  MOVWF  x96
097B6:  MOVLB  0
097B8:  CALL   1EE2
....................             break;
097BC:  GOTO   97C0
....................     }
097C0:  GOTO   A11A (RETURN)
.................... }
.................... 
.................... // カウンター状態表示関数
.................... void print_misf_counter_status(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01: // CIGS_MEASURE_DATA
....................             fprintf(PC, "MISF Measurement Counters:\r\n");
....................             fprintf(PC, "  Use Counter: %lu\r\n", misf_meas_use_counter);
....................             fprintf(PC, "  Uncopied Counter: %lu\r\n", misf_meas_uncopyed_counter);
....................             fprintf(PC, "  Loop Counter: %u\r\n", misf_meas_loop_counter);
....................             break;
....................             
....................         case 0x02: // CIGS_PICLOG
....................             fprintf(PC, "MISF Piclog Counters:\r\n");
....................             fprintf(PC, "  Use Counter: %lu\r\n", misf_piclog_use_counter);
....................             fprintf(PC, "  Uncopied Counter: %lu\r\n", misf_piclog_uncopyed_counter);
....................             fprintf(PC, "  Loop Counter: %u\r\n", misf_piclog_loop_counter);
....................             fprintf(PC, "  Write Counter: %u\r\n", misf_piclog_write_counter);
....................             break;
....................             
....................         default:
....................             fprintf(PC, "Warning: Unknown mission_id %02X for counter status\r\n", mission_id);
....................             break;
....................     }
.................... }
.................... 
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"              // ツールライブラリ
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
028F8:  MOVLW  90
028FA:  MOVWF  FF6
028FC:  MOVLW  10
028FE:  MOVWF  FF7
02900:  MOVLW  00
02902:  MOVWF  FF8
02904:  CALL   1EB2
.................... 
....................     output_high(MIS_FM_CS);
02908:  BCF    F92.5
0290A:  BSF    F89.5
....................     output_high(SMF_CS);
0290C:  BCF    F92.2
0290E:  BSF    F89.2
....................     delay_ms(100); 
02910:  MOVLW  64
02912:  MOVLB  A
02914:  MOVWF  x3E
02916:  MOVLB  0
02918:  CALL   1E32
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
0291C:  MOVLW  9F
0291E:  MOVLB  1
02920:  MOVWF  xB7
....................     output_low(mis_fm.cs_pin);
02922:  MOVFF  F0,A44
02926:  MOVLB  A
02928:  CLRF   x45
0292A:  MOVLW  0F
0292C:  MOVWF  x47
0292E:  MOVLW  89
02930:  MOVWF  x46
02932:  MOVLB  0
02934:  CALL   2248
02938:  MOVFF  F0,A44
0293C:  MOVLB  A
0293E:  CLRF   x45
02940:  MOVLW  0F
02942:  MOVWF  x47
02944:  MOVLW  92
02946:  MOVWF  x46
02948:  MOVLB  0
0294A:  CALL   2248
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
0294E:  MOVFF  F1,A47
02952:  MOVFF  F0,A46
02956:  MOVFF  EF,A45
0295A:  MOVFF  EE,A44
0295E:  MOVLW  01
02960:  MOVLB  A
02962:  MOVWF  x49
02964:  MOVLW  B7
02966:  MOVWF  x48
02968:  CLRF   x4B
0296A:  MOVLW  01
0296C:  MOVWF  x4A
0296E:  MOVLW  01
02970:  MOVWF  x4D
02972:  MOVLW  A3
02974:  MOVWF  x4C
02976:  CLRF   x51
02978:  CLRF   x50
0297A:  CLRF   x4F
0297C:  MOVLW  14
0297E:  MOVWF  x4E
02980:  MOVLB  0
02982:  CALL   2318
....................     output_high(mis_fm.cs_pin);
02986:  MOVFF  F0,A44
0298A:  MOVLW  01
0298C:  MOVLB  A
0298E:  MOVWF  x45
02990:  MOVLW  0F
02992:  MOVWF  x47
02994:  MOVLW  89
02996:  MOVWF  x46
02998:  MOVLB  0
0299A:  CALL   2248
0299E:  MOVFF  F0,A44
029A2:  MOVLB  A
029A4:  CLRF   x45
029A6:  MOVLW  0F
029A8:  MOVWF  x47
029AA:  MOVLW  92
029AC:  MOVWF  x46
029AE:  MOVLB  0
029B0:  CALL   2248
....................     fprintf(PC, "\t[MIS FM]READ ID:");
029B4:  MOVLW  AC
029B6:  MOVWF  FF6
029B8:  MOVLW  10
029BA:  MOVWF  FF7
029BC:  MOVLW  00
029BE:  MOVWF  FF8
029C0:  CALL   1EB2
....................     for (unsigned int8 index = 0; index < 4; index++)
029C4:  MOVLB  1
029C6:  CLRF   xB8
029C8:  MOVLB  0
029CA:  MOVLB  1
029CC:  MOVF   xB8,W
029CE:  SUBLW  03
029D0:  BTFSC  FD8.0
029D2:  BRA    29DA
029D4:  MOVLB  0
029D6:  GOTO   2A16
029DA:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
029DC:  CLRF   03
029DE:  MOVLB  1
029E0:  MOVF   xB8,W
029E2:  ADDLW  A3
029E4:  MOVWF  FE9
029E6:  MOVLW  01
029E8:  ADDWFC 03,W
029EA:  MOVWF  FEA
029EC:  MOVFF  FEF,1FA
029F0:  MOVFF  1FA,996
029F4:  MOVLW  37
029F6:  MOVLB  9
029F8:  MOVWF  x97
029FA:  MOVLB  0
029FC:  CALL   20E0
02A00:  MOVLW  20
02A02:  MOVLB  A
02A04:  MOVWF  x29
02A06:  MOVLB  0
02A08:  CALL   1E60
02A0C:  MOVLB  1
02A0E:  INCF   xB8,F
02A10:  MOVLB  0
02A12:  GOTO   29CA
....................     }
....................     fprintf(PC,"\r\n");
02A16:  MOVLW  0D
02A18:  MOVLB  A
02A1A:  MOVWF  x29
02A1C:  MOVLB  0
02A1E:  CALL   1E60
02A22:  MOVLW  0A
02A24:  MOVLB  A
02A26:  MOVWF  x29
02A28:  MOVLB  0
02A2A:  CALL   1E60
.................... 
....................     output_low(smf.cs_pin);
02A2E:  MOVFF  F4,A44
02A32:  MOVLB  A
02A34:  CLRF   x45
02A36:  MOVLW  0F
02A38:  MOVWF  x47
02A3A:  MOVLW  89
02A3C:  MOVWF  x46
02A3E:  MOVLB  0
02A40:  CALL   2248
02A44:  MOVFF  F4,A44
02A48:  MOVLB  A
02A4A:  CLRF   x45
02A4C:  MOVLW  0F
02A4E:  MOVWF  x47
02A50:  MOVLW  92
02A52:  MOVWF  x46
02A54:  MOVLB  0
02A56:  CALL   2248
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02A5A:  MOVFF  F5,A47
02A5E:  MOVFF  F4,A46
02A62:  MOVFF  F3,A45
02A66:  MOVFF  F2,A44
02A6A:  MOVLW  01
02A6C:  MOVLB  A
02A6E:  MOVWF  x49
02A70:  MOVLW  B7
02A72:  MOVWF  x48
02A74:  CLRF   x4B
02A76:  MOVLW  01
02A78:  MOVWF  x4A
02A7A:  MOVLW  01
02A7C:  MOVWF  x4D
02A7E:  MOVLW  A3
02A80:  MOVWF  x4C
02A82:  CLRF   x51
02A84:  CLRF   x50
02A86:  CLRF   x4F
02A88:  MOVLW  14
02A8A:  MOVWF  x4E
02A8C:  MOVLB  0
02A8E:  CALL   2318
....................     output_high(smf.cs_pin);
02A92:  MOVFF  F4,A44
02A96:  MOVLW  01
02A98:  MOVLB  A
02A9A:  MOVWF  x45
02A9C:  MOVLW  0F
02A9E:  MOVWF  x47
02AA0:  MOVLW  89
02AA2:  MOVWF  x46
02AA4:  MOVLB  0
02AA6:  CALL   2248
02AAA:  MOVFF  F4,A44
02AAE:  MOVLB  A
02AB0:  CLRF   x45
02AB2:  MOVLW  0F
02AB4:  MOVWF  x47
02AB6:  MOVLW  92
02AB8:  MOVWF  x46
02ABA:  MOVLB  0
02ABC:  CALL   2248
....................     fprintf(PC, "\t[SMF]\tREAD ID:");
02AC0:  MOVLW  BE
02AC2:  MOVWF  FF6
02AC4:  MOVLW  10
02AC6:  MOVWF  FF7
02AC8:  MOVLW  00
02ACA:  MOVWF  FF8
02ACC:  CALL   1EB2
....................     for (unsigned int8 index = 0; index < 4; index++)
02AD0:  MOVLB  1
02AD2:  CLRF   xB9
02AD4:  MOVLB  0
02AD6:  MOVLB  1
02AD8:  MOVF   xB9,W
02ADA:  SUBLW  03
02ADC:  BTFSC  FD8.0
02ADE:  BRA    2AE6
02AE0:  MOVLB  0
02AE2:  GOTO   2B22
02AE6:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02AE8:  CLRF   03
02AEA:  MOVLB  1
02AEC:  MOVF   xB9,W
02AEE:  ADDLW  A3
02AF0:  MOVWF  FE9
02AF2:  MOVLW  01
02AF4:  ADDWFC 03,W
02AF6:  MOVWF  FEA
02AF8:  MOVFF  FEF,1FA
02AFC:  MOVFF  1FA,996
02B00:  MOVLW  37
02B02:  MOVLB  9
02B04:  MOVWF  x97
02B06:  MOVLB  0
02B08:  CALL   20E0
02B0C:  MOVLW  20
02B0E:  MOVLB  A
02B10:  MOVWF  x29
02B12:  MOVLB  0
02B14:  CALL   1E60
02B18:  MOVLB  1
02B1A:  INCF   xB9,F
02B1C:  MOVLB  0
02B1E:  GOTO   2AD6
....................     }
....................     fprintf(PC,"\r\n");
02B22:  MOVLW  0D
02B24:  MOVLB  A
02B26:  MOVWF  x29
02B28:  MOVLB  0
02B2A:  CALL   1E60
02B2E:  MOVLW  0A
02B30:  MOVLB  A
02B32:  MOVWF  x29
02B34:  MOVLB  0
02B36:  CALL   1E60
.................... 
....................     if (!is_connect(smf)) {
02B3A:  MOVFF  F5,A29
02B3E:  MOVFF  F4,A28
02B42:  MOVFF  F3,A27
02B46:  MOVFF  F2,A26
02B4A:  CALL   254C
02B4E:  MOVF   01,F
02B50:  BTFSS  FD8.2
02B52:  GOTO   2B6A
....................         fprintf(PC, "\t[SMF]\tconnect error!\r\n");
02B56:  MOVLW  CE
02B58:  MOVWF  FF6
02B5A:  MOVLW  10
02B5C:  MOVWF  FF7
02B5E:  MOVLW  00
02B60:  MOVWF  FF8
02B62:  CALL   1EB2
....................         // return;
....................     }else {
02B66:  GOTO   2B7A
....................         fprintf(PC, "\t[SMF]\tis connected\r\n");
02B6A:  MOVLW  E6
02B6C:  MOVWF  FF6
02B6E:  MOVLW  10
02B70:  MOVWF  FF7
02B72:  MOVLW  00
02B74:  MOVWF  FF8
02B76:  CALL   1EB2
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
02B7A:  MOVLW  64
02B7C:  MOVLB  A
02B7E:  MOVWF  x3E
02B80:  MOVLB  0
02B82:  CALL   1E32
....................     if (!is_connect(mis_fm)) {
02B86:  MOVFF  F1,A29
02B8A:  MOVFF  F0,A28
02B8E:  MOVFF  EF,A27
02B92:  MOVFF  EE,A26
02B96:  CALL   254C
02B9A:  MOVF   01,F
02B9C:  BTFSS  FD8.2
02B9E:  GOTO   2BB6
....................         fprintf(PC, "\t[MIS FM]connect error!\r\n");
02BA2:  MOVLW  FC
02BA4:  MOVWF  FF6
02BA6:  MOVLW  10
02BA8:  MOVWF  FF7
02BAA:  MOVLW  00
02BAC:  MOVWF  FF8
02BAE:  CALL   1EB2
....................     }else {
02BB2:  GOTO   2BC6
....................         fprintf(PC, "\t[MIS FM]is connected\r\n");
02BB6:  MOVLW  16
02BB8:  MOVWF  FF6
02BBA:  MOVLW  11
02BBC:  MOVWF  FF7
02BBE:  MOVLW  00
02BC0:  MOVWF  FF8
02BC2:  CALL   1EB2
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
02BC6:  MOVFF  F1,270
02BCA:  MOVFF  F0,26F
02BCE:  MOVFF  EF,26E
02BD2:  MOVFF  EE,26D
02BD6:  MOVLB  2
02BD8:  CLRF   x74
02BDA:  CLRF   x73
02BDC:  CLRF   x72
02BDE:  CLRF   x71
02BE0:  MOVLW  01
02BE2:  MOVWF  x76
02BE4:  MOVLW  BA
02BE6:  MOVWF  x75
02BE8:  CLRF   x7A
02BEA:  CLRF   x79
02BEC:  CLRF   x78
02BEE:  MOVLW  40
02BF0:  MOVWF  x77
02BF2:  MOVLB  0
02BF4:  CALL   2612
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = msb_array_to_int32(readdata, 0);
02BF8:  MOVLW  01
02BFA:  MOVLB  1
02BFC:  MOVWF  xFB
02BFE:  MOVLW  BA
02C00:  MOVWF  xFA
02C02:  CLRF   xFC
02C04:  MOVLB  0
02C06:  CALL   282A
02C0A:  MOVFF  03,FF
02C0E:  MOVFF  02,FE
02C12:  MOVFF  01,FD
02C16:  MOVFF  00,FC
....................     smf_piclog_loop_counter = readdata[4];
02C1A:  MOVFF  1BE,100
....................     smf_meas_use_counter = msb_array_to_int32(readdata, 5);
02C1E:  MOVLW  01
02C20:  MOVLB  1
02C22:  MOVWF  xFB
02C24:  MOVLW  BA
02C26:  MOVWF  xFA
02C28:  MOVLW  05
02C2A:  MOVWF  xFC
02C2C:  MOVLB  0
02C2E:  CALL   282A
02C32:  MOVFF  03,104
02C36:  MOVFF  02,103
02C3A:  MOVFF  01,102
02C3E:  MOVFF  00,101
....................     smf_meas_loop_counter = readdata[9];
02C42:  MOVFF  1C3,105
....................     misf_piclog_use_counter = msb_array_to_int32(readdata, 10);
02C46:  MOVLW  01
02C48:  MOVLB  1
02C4A:  MOVWF  xFB
02C4C:  MOVLW  BA
02C4E:  MOVWF  xFA
02C50:  MOVLW  0A
02C52:  MOVWF  xFC
02C54:  MOVLB  0
02C56:  CALL   282A
02C5A:  MOVFF  03,109
02C5E:  MOVFF  02,108
02C62:  MOVFF  01,107
02C66:  MOVFF  00,106
....................     misf_piclog_loop_counter = readdata[14];
02C6A:  MOVFF  1C8,10A
....................     misf_piclog_uncopyed_counter = msb_array_to_int32(readdata, 15);
02C6E:  MOVLW  01
02C70:  MOVLB  1
02C72:  MOVWF  xFB
02C74:  MOVLW  BA
02C76:  MOVWF  xFA
02C78:  MOVLW  0F
02C7A:  MOVWF  xFC
02C7C:  MOVLB  0
02C7E:  CALL   282A
02C82:  MOVFF  03,10E
02C86:  MOVFF  02,10D
02C8A:  MOVFF  01,10C
02C8E:  MOVFF  00,10B
....................     misf_piclog_write_counter = msb_array_to_int32(readdata, 19);
02C92:  MOVLW  01
02C94:  MOVLB  1
02C96:  MOVWF  xFB
02C98:  MOVLW  BA
02C9A:  MOVWF  xFA
02C9C:  MOVLW  13
02C9E:  MOVWF  xFC
02CA0:  MOVLB  0
02CA2:  CALL   282A
02CA6:  MOVFF  00,10F
....................     misf_meas_use_counter = msb_array_to_int32(readdata, 23);
02CAA:  MOVLW  01
02CAC:  MOVLB  1
02CAE:  MOVWF  xFB
02CB0:  MOVLW  BA
02CB2:  MOVWF  xFA
02CB4:  MOVLW  17
02CB6:  MOVWF  xFC
02CB8:  MOVLB  0
02CBA:  CALL   282A
02CBE:  MOVFF  03,113
02CC2:  MOVFF  02,112
02CC6:  MOVFF  01,111
02CCA:  MOVFF  00,110
....................     misf_meas_loop_counter = readdata[27];
02CCE:  MOVFF  1D5,114
....................     misf_meas_uncopyed_counter = msb_array_to_int32(readdata, 28);
02CD2:  MOVLW  01
02CD4:  MOVLB  1
02CD6:  MOVWF  xFB
02CD8:  MOVLW  BA
02CDA:  MOVWF  xFA
02CDC:  MOVLW  1C
02CDE:  MOVWF  xFC
02CE0:  MOVLB  0
02CE2:  CALL   282A
02CE6:  MOVFF  03,118
02CEA:  MOVFF  02,117
02CEE:  MOVFF  01,116
02CF2:  MOVFF  00,115
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02CF6:  MOVLW  2E
02CF8:  MOVWF  FF6
02CFA:  MOVLW  11
02CFC:  MOVWF  FF7
02CFE:  MOVLW  00
02D00:  MOVWF  FF8
02D02:  MOVLW  28
02D04:  MOVLB  9
02D06:  MOVWF  x96
02D08:  MOVLB  0
02D0A:  CALL   1EE2
02D0E:  MOVFF  FF,996
02D12:  MOVLW  37
02D14:  MOVLB  9
02D16:  MOVWF  x97
02D18:  MOVLB  0
02D1A:  CALL   20E0
02D1E:  MOVFF  FE,996
02D22:  MOVLW  37
02D24:  MOVLB  9
02D26:  MOVWF  x97
02D28:  MOVLB  0
02D2A:  CALL   20E0
02D2E:  MOVFF  FD,996
02D32:  MOVLW  37
02D34:  MOVLB  9
02D36:  MOVWF  x97
02D38:  MOVLB  0
02D3A:  CALL   20E0
02D3E:  MOVFF  FC,996
02D42:  MOVLW  37
02D44:  MOVLB  9
02D46:  MOVWF  x97
02D48:  MOVLB  0
02D4A:  CALL   20E0
02D4E:  MOVLW  0D
02D50:  MOVLB  A
02D52:  MOVWF  x29
02D54:  MOVLB  0
02D56:  CALL   1E60
02D5A:  MOVLW  0A
02D5C:  MOVLB  A
02D5E:  MOVWF  x29
02D60:  MOVLB  0
02D62:  CALL   1E60
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02D66:  MOVLW  5E
02D68:  MOVWF  FF6
02D6A:  MOVLW  11
02D6C:  MOVWF  FF7
02D6E:  MOVLW  00
02D70:  MOVWF  FF8
02D72:  MOVLW  28
02D74:  MOVLB  9
02D76:  MOVWF  x96
02D78:  MOVLB  0
02D7A:  CALL   1EE2
02D7E:  MOVFF  100,996
02D82:  MOVLW  37
02D84:  MOVLB  9
02D86:  MOVWF  x97
02D88:  MOVLB  0
02D8A:  CALL   20E0
02D8E:  MOVLW  0D
02D90:  MOVLB  A
02D92:  MOVWF  x29
02D94:  MOVLB  0
02D96:  CALL   1E60
02D9A:  MOVLW  0A
02D9C:  MOVLB  A
02D9E:  MOVWF  x29
02DA0:  MOVLB  0
02DA2:  CALL   1E60
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02DA6:  MOVLW  8E
02DA8:  MOVWF  FF6
02DAA:  MOVLW  11
02DAC:  MOVWF  FF7
02DAE:  MOVLW  00
02DB0:  MOVWF  FF8
02DB2:  MOVLW  28
02DB4:  MOVLB  9
02DB6:  MOVWF  x96
02DB8:  MOVLB  0
02DBA:  CALL   1EE2
02DBE:  MOVFF  104,996
02DC2:  MOVLW  37
02DC4:  MOVLB  9
02DC6:  MOVWF  x97
02DC8:  MOVLB  0
02DCA:  CALL   20E0
02DCE:  MOVFF  103,996
02DD2:  MOVLW  37
02DD4:  MOVLB  9
02DD6:  MOVWF  x97
02DD8:  MOVLB  0
02DDA:  CALL   20E0
02DDE:  MOVFF  102,996
02DE2:  MOVLW  37
02DE4:  MOVLB  9
02DE6:  MOVWF  x97
02DE8:  MOVLB  0
02DEA:  CALL   20E0
02DEE:  MOVFF  101,996
02DF2:  MOVLW  37
02DF4:  MOVLB  9
02DF6:  MOVWF  x97
02DF8:  MOVLB  0
02DFA:  CALL   20E0
02DFE:  MOVLW  0D
02E00:  MOVLB  A
02E02:  MOVWF  x29
02E04:  MOVLB  0
02E06:  CALL   1E60
02E0A:  MOVLW  0A
02E0C:  MOVLB  A
02E0E:  MOVWF  x29
02E10:  MOVLB  0
02E12:  CALL   1E60
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02E16:  MOVLW  BE
02E18:  MOVWF  FF6
02E1A:  MOVLW  11
02E1C:  MOVWF  FF7
02E1E:  MOVLW  00
02E20:  MOVWF  FF8
02E22:  MOVLW  28
02E24:  MOVLB  9
02E26:  MOVWF  x96
02E28:  MOVLB  0
02E2A:  CALL   1EE2
02E2E:  MOVFF  105,996
02E32:  MOVLW  37
02E34:  MOVLB  9
02E36:  MOVWF  x97
02E38:  MOVLB  0
02E3A:  CALL   20E0
02E3E:  MOVLW  0D
02E40:  MOVLB  A
02E42:  MOVWF  x29
02E44:  MOVLB  0
02E46:  CALL   1E60
02E4A:  MOVLW  0A
02E4C:  MOVLB  A
02E4E:  MOVWF  x29
02E50:  MOVLB  0
02E52:  CALL   1E60
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02E56:  MOVLW  EE
02E58:  MOVWF  FF6
02E5A:  MOVLW  11
02E5C:  MOVWF  FF7
02E5E:  MOVLW  00
02E60:  MOVWF  FF8
02E62:  MOVLW  28
02E64:  MOVLB  9
02E66:  MOVWF  x96
02E68:  MOVLB  0
02E6A:  CALL   1EE2
02E6E:  MOVFF  109,996
02E72:  MOVLW  37
02E74:  MOVLB  9
02E76:  MOVWF  x97
02E78:  MOVLB  0
02E7A:  CALL   20E0
02E7E:  MOVFF  108,996
02E82:  MOVLW  37
02E84:  MOVLB  9
02E86:  MOVWF  x97
02E88:  MOVLB  0
02E8A:  CALL   20E0
02E8E:  MOVFF  107,996
02E92:  MOVLW  37
02E94:  MOVLB  9
02E96:  MOVWF  x97
02E98:  MOVLB  0
02E9A:  CALL   20E0
02E9E:  MOVFF  106,996
02EA2:  MOVLW  37
02EA4:  MOVLB  9
02EA6:  MOVWF  x97
02EA8:  MOVLB  0
02EAA:  CALL   20E0
02EAE:  MOVLW  0D
02EB0:  MOVLB  A
02EB2:  MOVWF  x29
02EB4:  MOVLB  0
02EB6:  CALL   1E60
02EBA:  MOVLW  0A
02EBC:  MOVLB  A
02EBE:  MOVWF  x29
02EC0:  MOVLB  0
02EC2:  CALL   1E60
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02EC6:  MOVLW  1E
02EC8:  MOVWF  FF6
02ECA:  MOVLW  12
02ECC:  MOVWF  FF7
02ECE:  MOVLW  00
02ED0:  MOVWF  FF8
02ED2:  MOVLW  28
02ED4:  MOVLB  9
02ED6:  MOVWF  x96
02ED8:  MOVLB  0
02EDA:  CALL   1EE2
02EDE:  MOVFF  10E,996
02EE2:  MOVLW  37
02EE4:  MOVLB  9
02EE6:  MOVWF  x97
02EE8:  MOVLB  0
02EEA:  CALL   20E0
02EEE:  MOVFF  10D,996
02EF2:  MOVLW  37
02EF4:  MOVLB  9
02EF6:  MOVWF  x97
02EF8:  MOVLB  0
02EFA:  CALL   20E0
02EFE:  MOVFF  10C,996
02F02:  MOVLW  37
02F04:  MOVLB  9
02F06:  MOVWF  x97
02F08:  MOVLB  0
02F0A:  CALL   20E0
02F0E:  MOVFF  10B,996
02F12:  MOVLW  37
02F14:  MOVLB  9
02F16:  MOVWF  x97
02F18:  MOVLB  0
02F1A:  CALL   20E0
02F1E:  MOVLW  0D
02F20:  MOVLB  A
02F22:  MOVWF  x29
02F24:  MOVLB  0
02F26:  CALL   1E60
02F2A:  MOVLW  0A
02F2C:  MOVLB  A
02F2E:  MOVWF  x29
02F30:  MOVLB  0
02F32:  CALL   1E60
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02F36:  MOVLW  4E
02F38:  MOVWF  FF6
02F3A:  MOVLW  12
02F3C:  MOVWF  FF7
02F3E:  MOVLW  00
02F40:  MOVWF  FF8
02F42:  MOVLW  28
02F44:  MOVLB  9
02F46:  MOVWF  x96
02F48:  MOVLB  0
02F4A:  CALL   1EE2
02F4E:  MOVFF  10A,996
02F52:  MOVLW  37
02F54:  MOVLB  9
02F56:  MOVWF  x97
02F58:  MOVLB  0
02F5A:  CALL   20E0
02F5E:  MOVLW  0D
02F60:  MOVLB  A
02F62:  MOVWF  x29
02F64:  MOVLB  0
02F66:  CALL   1E60
02F6A:  MOVLW  0A
02F6C:  MOVLB  A
02F6E:  MOVWF  x29
02F70:  MOVLB  0
02F72:  CALL   1E60
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02F76:  MOVLW  7E
02F78:  MOVWF  FF6
02F7A:  MOVLW  12
02F7C:  MOVWF  FF7
02F7E:  MOVLW  00
02F80:  MOVWF  FF8
02F82:  MOVLW  28
02F84:  MOVLB  9
02F86:  MOVWF  x96
02F88:  MOVLB  0
02F8A:  CALL   1EE2
02F8E:  MOVFF  10F,996
02F92:  MOVLW  37
02F94:  MOVLB  9
02F96:  MOVWF  x97
02F98:  MOVLB  0
02F9A:  CALL   20E0
02F9E:  MOVLW  0D
02FA0:  MOVLB  A
02FA2:  MOVWF  x29
02FA4:  MOVLB  0
02FA6:  CALL   1E60
02FAA:  MOVLW  0A
02FAC:  MOVLB  A
02FAE:  MOVWF  x29
02FB0:  MOVLB  0
02FB2:  CALL   1E60
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02FB6:  MOVLW  AE
02FB8:  MOVWF  FF6
02FBA:  MOVLW  12
02FBC:  MOVWF  FF7
02FBE:  MOVLW  00
02FC0:  MOVWF  FF8
02FC2:  MOVLW  28
02FC4:  MOVLB  9
02FC6:  MOVWF  x96
02FC8:  MOVLB  0
02FCA:  CALL   1EE2
02FCE:  MOVFF  113,996
02FD2:  MOVLW  37
02FD4:  MOVLB  9
02FD6:  MOVWF  x97
02FD8:  MOVLB  0
02FDA:  CALL   20E0
02FDE:  MOVFF  112,996
02FE2:  MOVLW  37
02FE4:  MOVLB  9
02FE6:  MOVWF  x97
02FE8:  MOVLB  0
02FEA:  CALL   20E0
02FEE:  MOVFF  111,996
02FF2:  MOVLW  37
02FF4:  MOVLB  9
02FF6:  MOVWF  x97
02FF8:  MOVLB  0
02FFA:  CALL   20E0
02FFE:  MOVFF  110,996
03002:  MOVLW  37
03004:  MOVLB  9
03006:  MOVWF  x97
03008:  MOVLB  0
0300A:  CALL   20E0
0300E:  MOVLW  0D
03010:  MOVLB  A
03012:  MOVWF  x29
03014:  MOVLB  0
03016:  CALL   1E60
0301A:  MOVLW  0A
0301C:  MOVLB  A
0301E:  MOVWF  x29
03020:  MOVLB  0
03022:  CALL   1E60
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
03026:  MOVLW  DE
03028:  MOVWF  FF6
0302A:  MOVLW  12
0302C:  MOVWF  FF7
0302E:  MOVLW  00
03030:  MOVWF  FF8
03032:  MOVLW  28
03034:  MOVLB  9
03036:  MOVWF  x96
03038:  MOVLB  0
0303A:  CALL   1EE2
0303E:  MOVFF  118,996
03042:  MOVLW  37
03044:  MOVLB  9
03046:  MOVWF  x97
03048:  MOVLB  0
0304A:  CALL   20E0
0304E:  MOVFF  117,996
03052:  MOVLW  37
03054:  MOVLB  9
03056:  MOVWF  x97
03058:  MOVLB  0
0305A:  CALL   20E0
0305E:  MOVFF  116,996
03062:  MOVLW  37
03064:  MOVLB  9
03066:  MOVWF  x97
03068:  MOVLB  0
0306A:  CALL   20E0
0306E:  MOVFF  115,996
03072:  MOVLW  37
03074:  MOVLB  9
03076:  MOVWF  x97
03078:  MOVLB  0
0307A:  CALL   20E0
0307E:  MOVLW  0D
03080:  MOVLB  A
03082:  MOVWF  x29
03084:  MOVLB  0
03086:  CALL   1E60
0308A:  MOVLW  0A
0308C:  MOVLB  A
0308E:  MOVWF  x29
03090:  MOVLB  0
03092:  CALL   1E60
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
03096:  MOVLW  0E
03098:  MOVWF  FF6
0309A:  MOVLW  13
0309C:  MOVWF  FF7
0309E:  MOVLW  00
030A0:  MOVWF  FF8
030A2:  MOVLW  28
030A4:  MOVLB  9
030A6:  MOVWF  x96
030A8:  MOVLB  0
030AA:  CALL   1EE2
030AE:  MOVFF  114,996
030B2:  MOVLW  37
030B4:  MOVLB  9
030B6:  MOVWF  x97
030B8:  MOVLB  0
030BA:  CALL   20E0
030BE:  MOVLW  0D
030C0:  MOVLB  A
030C2:  MOVWF  x29
030C4:  MOVLB  0
030C6:  CALL   1E60
030CA:  MOVLW  0A
030CC:  MOVLB  A
030CE:  MOVWF  x29
030D0:  MOVLB  0
030D2:  CALL   1E60
....................     fprintf(PC, "\tComplete\r\n");
030D6:  MOVLW  3E
030D8:  MOVWF  FF6
030DA:  MOVLW  13
030DC:  MOVWF  FF7
030DE:  MOVLW  00
030E0:  MOVWF  FF8
030E2:  CALL   1EB2
030E6:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
05E96:  GOTO   601C (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
03AE2:  MOVFF  F1,A29
03AE6:  MOVFF  F0,A28
03AEA:  MOVFF  EF,A27
03AEE:  MOVFF  EE,A26
03AF2:  CALL   254C
03AF6:  MOVF   01,F
03AF8:  BTFSS  FD8.2
03AFA:  GOTO   3B12
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03AFE:  MOVLW  4A
03B00:  MOVWF  FF6
03B02:  MOVLW  13
03B04:  MOVWF  FF7
03B06:  MOVLW  00
03B08:  MOVWF  FF8
03B0A:  CALL   1EB2
....................         return;
03B0E:  GOTO   3DC0
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
03B12:  MOVLB  9
03B14:  CLRF   xE6
03B16:  CLRF   xE7
03B18:  CLRF   xE8
03B1A:  CLRF   xE9
03B1C:  CLRF   xEA
03B1E:  CLRF   xEB
03B20:  CLRF   xEC
03B22:  CLRF   xED
03B24:  CLRF   xEE
03B26:  CLRF   xEF
03B28:  CLRF   xF0
03B2A:  CLRF   xF1
03B2C:  CLRF   xF2
03B2E:  CLRF   xF3
03B30:  CLRF   xF4
03B32:  CLRF   xF5
03B34:  CLRF   xF6
03B36:  CLRF   xF7
03B38:  CLRF   xF8
03B3A:  CLRF   xF9
03B3C:  CLRF   xFA
03B3E:  CLRF   xFB
03B40:  CLRF   xFC
03B42:  CLRF   xFD
03B44:  CLRF   xFE
03B46:  CLRF   xFF
03B48:  MOVLB  A
03B4A:  CLRF   x00
03B4C:  CLRF   x01
03B4E:  CLRF   x02
03B50:  CLRF   x03
03B52:  CLRF   x04
03B54:  CLRF   x05
03B56:  CLRF   x06
03B58:  CLRF   x07
03B5A:  CLRF   x08
03B5C:  CLRF   x09
03B5E:  CLRF   x0A
03B60:  CLRF   x0B
03B62:  CLRF   x0C
03B64:  CLRF   x0D
03B66:  CLRF   x0E
03B68:  CLRF   x0F
03B6A:  CLRF   x10
03B6C:  CLRF   x11
03B6E:  CLRF   x12
03B70:  CLRF   x13
03B72:  CLRF   x14
03B74:  CLRF   x15
03B76:  CLRF   x16
03B78:  CLRF   x17
03B7A:  CLRF   x18
03B7C:  CLRF   x19
03B7E:  CLRF   x1A
03B80:  CLRF   x1B
03B82:  CLRF   x1C
03B84:  CLRF   x1D
03B86:  CLRF   x1E
03B88:  CLRF   x1F
03B8A:  CLRF   x20
03B8C:  CLRF   x21
03B8E:  CLRF   x22
03B90:  CLRF   x23
03B92:  CLRF   x24
03B94:  CLRF   x25
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
03B96:  MOVFF  FF,A27
03B9A:  CLRF   x28
03B9C:  CLRF   x29
03B9E:  CLRF   x2A
03BA0:  MOVF   x27,W
03BA2:  MOVLB  9
03BA4:  MOVWF  xE6
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
03BA6:  MOVFF  FE,A27
03BAA:  MOVFF  FF,A28
03BAE:  MOVLB  A
03BB0:  CLRF   x29
03BB2:  CLRF   x2A
03BB4:  MOVF   x27,W
03BB6:  MOVLB  9
03BB8:  MOVWF  xE7
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03BBA:  MOVFF  FD,A27
03BBE:  MOVFF  FE,A28
03BC2:  MOVFF  FF,A29
03BC6:  MOVLB  A
03BC8:  CLRF   x2A
03BCA:  MOVF   x27,W
03BCC:  MOVLB  9
03BCE:  MOVWF  xE8
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
03BD0:  MOVLB  0
03BD2:  MOVF   xFC,W
03BD4:  MOVLB  9
03BD6:  MOVWF  xE9
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
03BD8:  MOVFF  100,9EA
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
03BDC:  MOVFF  104,A27
03BE0:  MOVLB  A
03BE2:  CLRF   x28
03BE4:  CLRF   x29
03BE6:  CLRF   x2A
03BE8:  MOVF   x27,W
03BEA:  MOVLB  9
03BEC:  MOVWF  xEB
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
03BEE:  MOVFF  103,A27
03BF2:  MOVFF  104,A28
03BF6:  MOVLB  A
03BF8:  CLRF   x29
03BFA:  CLRF   x2A
03BFC:  MOVF   x27,W
03BFE:  MOVLB  9
03C00:  MOVWF  xEC
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
03C02:  MOVFF  102,A27
03C06:  MOVFF  103,A28
03C0A:  MOVFF  104,A29
03C0E:  MOVLB  A
03C10:  CLRF   x2A
03C12:  MOVF   x27,W
03C14:  MOVLB  9
03C16:  MOVWF  xED
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03C18:  MOVLB  1
03C1A:  MOVF   x01,W
03C1C:  MOVLB  9
03C1E:  MOVWF  xEE
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
03C20:  MOVFF  105,9EF
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
03C24:  MOVFF  109,A27
03C28:  MOVLB  A
03C2A:  CLRF   x28
03C2C:  CLRF   x29
03C2E:  CLRF   x2A
03C30:  MOVF   x27,W
03C32:  MOVLB  9
03C34:  MOVWF  xF0
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03C36:  MOVFF  108,A27
03C3A:  MOVFF  109,A28
03C3E:  MOVLB  A
03C40:  CLRF   x29
03C42:  CLRF   x2A
03C44:  MOVF   x27,W
03C46:  MOVLB  9
03C48:  MOVWF  xF1
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03C4A:  MOVFF  107,A27
03C4E:  MOVFF  108,A28
03C52:  MOVFF  109,A29
03C56:  MOVLB  A
03C58:  CLRF   x2A
03C5A:  MOVF   x27,W
03C5C:  MOVLB  9
03C5E:  MOVWF  xF2
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
03C60:  MOVLB  1
03C62:  MOVF   x06,W
03C64:  MOVLB  9
03C66:  MOVWF  xF3
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03C68:  MOVFF  10A,9F4
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03C6C:  MOVFF  10E,A27
03C70:  MOVLB  A
03C72:  CLRF   x28
03C74:  CLRF   x29
03C76:  CLRF   x2A
03C78:  MOVF   x27,W
03C7A:  MOVLB  9
03C7C:  MOVWF  xF5
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03C7E:  MOVFF  10D,A27
03C82:  MOVFF  10E,A28
03C86:  MOVLB  A
03C88:  CLRF   x29
03C8A:  CLRF   x2A
03C8C:  MOVF   x27,W
03C8E:  MOVLB  9
03C90:  MOVWF  xF6
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
03C92:  MOVFF  10C,A27
03C96:  MOVFF  10D,A28
03C9A:  MOVFF  10E,A29
03C9E:  MOVLB  A
03CA0:  CLRF   x2A
03CA2:  MOVF   x27,W
03CA4:  MOVLB  9
03CA6:  MOVWF  xF7
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03CA8:  MOVLB  1
03CAA:  MOVF   x0B,W
03CAC:  MOVLB  9
03CAE:  MOVWF  xF8
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
03CB0:  MOVLW  00
03CB2:  MOVWF  xF9
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
03CB4:  MOVLW  00
03CB6:  MOVWF  xFA
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03CB8:  MOVLW  00
03CBA:  MOVWF  xFB
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03CBC:  MOVLB  1
03CBE:  MOVF   x0F,W
03CC0:  MOVLB  9
03CC2:  MOVWF  xFC
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03CC4:  MOVFF  113,A27
03CC8:  MOVLB  A
03CCA:  CLRF   x28
03CCC:  CLRF   x29
03CCE:  CLRF   x2A
03CD0:  MOVF   x27,W
03CD2:  MOVLB  9
03CD4:  MOVWF  xFD
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
03CD6:  MOVFF  112,A27
03CDA:  MOVFF  113,A28
03CDE:  MOVLB  A
03CE0:  CLRF   x29
03CE2:  CLRF   x2A
03CE4:  MOVF   x27,W
03CE6:  MOVLB  9
03CE8:  MOVWF  xFE
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03CEA:  MOVFF  111,A27
03CEE:  MOVFF  112,A28
03CF2:  MOVFF  113,A29
03CF6:  MOVLB  A
03CF8:  CLRF   x2A
03CFA:  MOVF   x27,W
03CFC:  MOVLB  9
03CFE:  MOVWF  xFF
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03D00:  MOVLB  1
03D02:  MOVF   x10,W
03D04:  MOVLB  A
03D06:  MOVWF  x00
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03D08:  MOVFF  114,A01
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03D0C:  MOVFF  118,A27
03D10:  CLRF   x28
03D12:  CLRF   x29
03D14:  CLRF   x2A
03D16:  MOVF   x27,W
03D18:  MOVWF  x02
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03D1A:  MOVFF  117,A27
03D1E:  MOVFF  118,A28
03D22:  CLRF   x29
03D24:  CLRF   x2A
03D26:  MOVF   x27,W
03D28:  MOVWF  x03
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03D2A:  MOVFF  116,A27
03D2E:  MOVFF  117,A28
03D32:  MOVFF  118,A29
03D36:  CLRF   x2A
03D38:  MOVF   x27,W
03D3A:  MOVWF  x04
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03D3C:  MOVLB  1
03D3E:  MOVF   x15,W
03D40:  MOVLB  A
03D42:  MOVWF  x05
.................... 
....................     if (!is_connect(mis_fm)) {
03D44:  MOVFF  F1,A29
03D48:  MOVFF  F0,A28
03D4C:  MOVFF  EF,A27
03D50:  MOVFF  EE,A26
03D54:  MOVLB  0
03D56:  CALL   254C
03D5A:  MOVF   01,F
03D5C:  BTFSS  FD8.2
03D5E:  GOTO   3D72
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03D62:  MOVLW  6C
03D64:  MOVWF  FF6
03D66:  MOVLW  13
03D68:  MOVWF  FF7
03D6A:  MOVLW  00
03D6C:  MOVWF  FF8
03D6E:  CALL   1EB2
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03D72:  MOVFF  F1,A29
03D76:  MOVFF  F0,A28
03D7A:  MOVFF  EF,A27
03D7E:  MOVFF  EE,A26
03D82:  MOVLB  A
03D84:  CLRF   x2D
03D86:  CLRF   x2C
03D88:  CLRF   x2B
03D8A:  CLRF   x2A
03D8C:  MOVLB  0
03D8E:  CALL   378A
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03D92:  MOVFF  F1,A29
03D96:  MOVFF  F0,A28
03D9A:  MOVFF  EF,A27
03D9E:  MOVFF  EE,A26
03DA2:  MOVLB  A
03DA4:  CLRF   x2D
03DA6:  CLRF   x2C
03DA8:  CLRF   x2B
03DAA:  CLRF   x2A
03DAC:  MOVLW  09
03DAE:  MOVWF  x2F
03DB0:  MOVLW  E6
03DB2:  MOVWF  x2E
03DB4:  CLRF   x31
03DB6:  MOVLW  40
03DB8:  MOVWF  x30
03DBA:  MOVLB  0
03DBC:  CALL   3406
03DC0:  RETURN 0
....................     //fprintf(PC, "Write MISF Address Area Complete\r\n");
.................... 
.................... }
.................... 
.................... void add_smf_queue(unsigned int8 mission_id)
.................... {
....................     SmfDataStruct data;
....................     MissionTypeStruct mis_struct = getMissionTypeStruct(mission_id);
....................     data.func_type = SMF_WRITE;
....................     data.mission_id = mission_id;
....................     data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................     data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
.................... 
....................     enqueue_smf_data(&data);
.................... }
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... void update_misf_counters(int8 mission_id, int16 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
08D06:  MOVLB  1
08D08:  MOVF   x5C,W
08D0A:  MOVWF  FE9
08D0C:  MOVF   x5D,W
08D0E:  MOVWF  FEA
08D10:  MOVFF  FEF,15E
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
08D14:  MOVLW  8E
08D16:  MOVWF  FF6
08D18:  MOVLW  13
08D1A:  MOVWF  FF7
08D1C:  MOVLW  00
08D1E:  MOVWF  FF8
08D20:  MOVLB  0
08D22:  CALL   1EB2
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
08D26:  MOVLW  D4
08D28:  MOVWF  FF6
08D2A:  MOVLW  13
08D2C:  MOVWF  FF7
08D2E:  MOVLW  00
08D30:  MOVWF  FF8
08D32:  MOVLW  0C
08D34:  MOVLB  9
08D36:  MOVWF  x96
08D38:  MOVLB  0
08D3A:  CALL   1EE2
08D3E:  MOVFF  15E,996
08D42:  MOVLW  37
08D44:  MOVLB  9
08D46:  MOVWF  x97
08D48:  MOVLB  0
08D4A:  CALL   20E0
08D4E:  MOVLW  E2
08D50:  MOVWF  FF6
08D52:  MOVLW  13
08D54:  MOVWF  FF7
08D56:  MOVLW  00
08D58:  MOVWF  FF8
08D5A:  MOVLW  04
08D5C:  MOVLB  9
08D5E:  MOVWF  x96
08D60:  MOVLB  0
08D62:  CALL   1EE2
....................    switch(command_id)
08D66:  MOVLB  1
08D68:  MOVF   x5E,W
08D6A:  XORLW  10
08D6C:  MOVLB  0
08D6E:  BTFSC  FD8.2
08D70:  GOTO   8E20
08D74:  XORLW  01
08D76:  BTFSC  FD8.2
08D78:  GOTO   8E24
08D7C:  XORLW  03
08D7E:  BTFSC  FD8.2
08D80:  GOTO   8E28
08D84:  XORLW  13
08D86:  BTFSC  FD8.2
08D88:  GOTO   8E2C
08D8C:  XORLW  12
08D8E:  BTFSC  FD8.2
08D90:  GOTO   8E30
08D94:  XORLW  93
08D96:  BTFSC  FD8.2
08D98:  GOTO   8E34
08D9C:  XORLW  01
08D9E:  BTFSC  FD8.2
08DA0:  GOTO   8E44
08DA4:  XORLW  03
08DA6:  BTFSC  FD8.2
08DA8:  GOTO   8E54
08DAC:  XORLW  01
08DAE:  BTFSC  FD8.2
08DB0:  GOTO   8E64
08DB4:  XORLW  07
08DB6:  BTFSC  FD8.2
08DB8:  GOTO   8E74
08DBC:  XORLW  01
08DBE:  BTFSC  FD8.2
08DC0:  GOTO   8E84
08DC4:  XORLW  03
08DC6:  BTFSC  FD8.2
08DC8:  GOTO   8E94
08DCC:  XORLW  01
08DCE:  BTFSC  FD8.2
08DD0:  GOTO   8EA4
08DD4:  XORLW  0F
08DD6:  BTFSC  FD8.2
08DD8:  GOTO   8EB4
08DDC:  XORLW  18
08DDE:  BTFSC  FD8.2
08DE0:  GOTO   8EC4
08DE4:  XORLW  01
08DE6:  BTFSC  FD8.2
08DE8:  GOTO   8ED4
08DEC:  XORLW  03
08DEE:  BTFSC  FD8.2
08DF0:  GOTO   8EE4
08DF4:  XORLW  01
08DF6:  BTFSC  FD8.2
08DF8:  GOTO   8EF4
08DFC:  XORLW  07
08DFE:  BTFSC  FD8.2
08E00:  GOTO   8F04
08E04:  XORLW  01
08E06:  BTFSC  FD8.2
08E08:  GOTO   8F14
08E0C:  XORLW  03
08E0E:  BTFSC  FD8.2
08E10:  GOTO   8F24
08E14:  XORLW  36
08E16:  BTFSC  FD8.2
08E18:  GOTO   8F34
08E1C:  GOTO   8F44
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
08E20:  GOTO   8F54
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
08E24:  GOTO   8F54
....................       case 0x12:
....................          // test_adc();
....................          break;
08E28:  GOTO   8F54
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
08E2C:  GOTO   8F54
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
08E30:  GOTO   8F54
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
08E34:  MOVFF  15D,162
08E38:  MOVFF  15C,161
08E3C:  CALL   49B6
....................          break;
08E40:  GOTO   8F54
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
08E44:  MOVFF  15D,160
08E48:  MOVFF  15C,15F
08E4C:  GOTO   4A7E
....................          break;
08E50:  GOTO   8F54
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
08E54:  MOVFF  15D,160
08E58:  MOVFF  15C,15F
08E5C:  GOTO   4C18
....................          break;
08E60:  GOTO   8F54
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
08E64:  MOVFF  15D,160
08E68:  MOVFF  15C,15F
08E6C:  GOTO   4DAE
....................          break;
08E70:  GOTO   8F54
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
08E74:  MOVFF  15D,160
08E78:  MOVFF  15C,15F
08E7C:  GOTO   4F24
....................          break;
08E80:  GOTO   8F54
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
08E84:  MOVFF  15D,160
08E88:  MOVFF  15C,15F
08E8C:  GOTO   5324
....................          break;
08E90:  GOTO   8F54
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
08E94:  MOVFF  15D,160
08E98:  MOVFF  15C,15F
08E9C:  GOTO   55E2
....................          break;
08EA0:  GOTO   8F54
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
08EA4:  MOVFF  15D,160
08EA8:  MOVFF  15C,15F
08EAC:  GOTO   5A6C
....................          break;
08EB0:  GOTO   8F54
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
08EB4:  MOVFF  15D,160
08EB8:  MOVFF  15C,15F
08EBC:  GOTO   5C90
....................          break;
08EC0:  GOTO   8F54
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
08EC4:  MOVFF  15D,160
08EC8:  MOVFF  15C,15F
08ECC:  GOTO   5CEA
....................          break;
08ED0:  GOTO   8F54
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
08ED4:  MOVFF  15D,160
08ED8:  MOVFF  15C,15F
08EDC:  GOTO   5DBA
....................          break;
08EE0:  GOTO   8F54
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
08EE4:  MOVFF  15D,160
08EE8:  MOVFF  15C,15F
08EEC:  GOTO   5E2E
....................          break;
08EF0:  GOTO   8F54
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
08EF4:  MOVFF  15D,160
08EF8:  MOVFF  15C,15F
08EFC:  CALL   5E9A
....................          break;
08F00:  GOTO   8F54
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
08F04:  MOVFF  15D,160
08F08:  MOVFF  15C,15F
08F0C:  GOTO   604C
....................          break;
08F10:  GOTO   8F54
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
08F14:  MOVFF  15D,160
08F18:  MOVFF  15C,15F
08F1C:  GOTO   6436
....................          break;
08F20:  GOTO   8F54
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
08F24:  MOVFF  15D,160
08F28:  MOVFF  15C,15F
08F2C:  CALL   5E9A
....................          break;
08F30:  GOTO   8F54
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
08F34:  MOVFF  15D,160
08F38:  MOVFF  15C,15F
08F3C:  GOTO   8922
....................          break;
08F40:  GOTO   8F54
....................             
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
08F44:  MOVLW  E8
08F46:  MOVWF  FF6
08F48:  MOVLW  13
08F4A:  MOVWF  FF7
08F4C:  MOVLW  00
08F4E:  MOVWF  FF8
08F50:  CALL   1EB2
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
08F54:  MOVLW  00
08F56:  MOVWF  FF6
08F58:  MOVLW  14
08F5A:  MOVWF  FF7
08F5C:  MOVLW  00
08F5E:  MOVWF  FF8
08F60:  CALL   1EB2
08F64:  GOTO   8FCA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0B1E8:  MOVLW  46
0B1EA:  MOVWF  FF6
0B1EC:  MOVLW  14
0B1EE:  MOVWF  FF7
0B1F0:  MOVLW  00
0B1F2:  MOVWF  FF8
0B1F4:  CALL   1EB2
....................    
....................    switch(command->frame_id)
0B1F8:  MOVLB  1
0B1FA:  MOVF   x56,W
0B1FC:  MOVWF  FE9
0B1FE:  MOVF   x57,W
0B200:  MOVWF  FEA
0B202:  MOVF   FEF,W
0B204:  XORLW  00
0B206:  MOVLB  0
0B208:  BTFSC  FD8.2
0B20A:  GOTO   B222
0B20E:  XORLW  01
0B210:  BTFSC  FD8.2
0B212:  GOTO   B232
0B216:  XORLW  03
0B218:  BTFSC  FD8.2
0B21A:  GOTO   B252
0B21E:  GOTO   B262
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0B222:  MOVFF  157,159
0B226:  MOVFF  156,158
0B22A:  GOTO   8F7E
....................          break;
0B22E:  GOTO   B262
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0B232:  MOVFF  157,159
0B236:  MOVFF  156,158
0B23A:  GOTO   9000
0B23E:  MOVF   01,F
0B240:  BTFSC  FD8.2
0B242:  GOTO   B24E
....................             return TRUE; // if status is finished, return TRUE
0B246:  MOVLW  01
0B248:  MOVWF  01
0B24A:  GOTO   B266
....................          }        
....................          break;
0B24E:  GOTO   B262
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0B252:  MOVFF  157,159
0B256:  MOVFF  156,158
0B25A:  GOTO   AFB0
....................          break;
0B25E:  GOTO   B262
....................    }
....................    return FALSE;
0B262:  MOVLW  00
0B264:  MOVWF  01
0B266:  GOTO   B696 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
08F7E:  MOVLW  5E
08F80:  MOVWF  FF6
08F82:  MOVLW  14
08F84:  MOVWF  FF7
08F86:  MOVLW  00
08F88:  MOVWF  FF8
08F8A:  CALL   1EB2
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
08F8E:  MOVLW  74
08F90:  MOVWF  FF6
08F92:  MOVLW  14
08F94:  MOVWF  FF7
08F96:  MOVLW  00
08F98:  MOVWF  FF8
08F9A:  CALL   1EB2
....................    transmit_ack();
08F9E:  CALL   4646
.................... 
....................    status[0] = EXECUTING_MISSION;
08FA2:  MOVLW  02
08FA4:  MOVWF  48
....................    execute_mission(command->content);
08FA6:  MOVLW  03
08FA8:  MOVLB  1
08FAA:  ADDWF  x58,W
08FAC:  MOVWF  01
08FAE:  MOVLW  00
08FB0:  ADDWFC x59,W
08FB2:  MOVWF  03
08FB4:  MOVF   01,W
08FB6:  MOVWF  x5A
08FB8:  MOVFF  03,15B
08FBC:  MOVFF  15B,15D
08FC0:  MOVFF  15A,15C
08FC4:  MOVLB  0
08FC6:  GOTO   8D06
....................    if (is_empty_smf_queue())
08FCA:  CALL   8F68
08FCE:  MOVF   01,F
08FD0:  BTFSC  FD8.2
08FD2:  GOTO   8FDE
....................       status[0] = FINISHED;
08FD6:  MOVLW  06
08FD8:  MOVWF  48
08FDA:  GOTO   8FE2
....................    else
....................       status[0] = SMF_USE_REQ;
08FDE:  MOVLW  04
08FE0:  MOVWF  48
08FE2:  GOTO   B22E (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
09000:  MOVLW  8E
09002:  MOVWF  FF6
09004:  MOVLW  14
09006:  MOVWF  FF7
09008:  MOVLW  00
0900A:  MOVWF  FF8
0900C:  CALL   1EB2
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
09010:  MOVLW  A2
09012:  MOVWF  FF6
09014:  MOVLW  14
09016:  MOVWF  FF7
09018:  MOVLW  00
0901A:  MOVWF  FF8
0901C:  CALL   1EB2
....................    transmit_status();
09020:  GOTO   8FE6
....................    if (status[0] == FINISHED)
09024:  MOVF   48,W
09026:  SUBLW  06
09028:  BTFSS  FD8.2
0902A:  GOTO   904A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0902E:  MOVLW  C0
09030:  MOVWF  FF6
09032:  MOVLW  14
09034:  MOVWF  FF7
09036:  MOVLW  00
09038:  MOVWF  FF8
0903A:  CALL   1EB2
....................       return TRUE;
0903E:  MOVLW  01
09040:  MOVWF  01
09042:  GOTO   9052
....................    }
09046:  GOTO   9052
....................    else{
....................       return FALSE;
0904A:  MOVLW  00
0904C:  MOVWF  01
0904E:  GOTO   9052
....................    }
09052:  GOTO   B23E (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................    fprintf(PC, "\t-> SMF available check\r\n");
*
0AFB0:  MOVLW  DC
0AFB2:  MOVWF  FF6
0AFB4:  MOVLW  14
0AFB6:  MOVWF  FF7
0AFB8:  MOVLW  00
0AFBA:  MOVWF  FF8
0AFBC:  CALL   1EB2
....................    fprintf(PC, "\t   Transmit Acknowledgement\r\n");
0AFC0:  MOVLW  F6
0AFC2:  MOVWF  FF6
0AFC4:  MOVLW  14
0AFC6:  MOVWF  FF7
0AFC8:  MOVLW  00
0AFCA:  MOVWF  FF8
0AFCC:  CALL   1EB2
....................    transmit_ack();
0AFD0:  CALL   4646
....................    
....................    if (command->content[0] == ALLOW) {
0AFD4:  MOVLW  03
0AFD6:  MOVLB  1
0AFD8:  ADDWF  x58,W
0AFDA:  MOVWF  FE9
0AFDC:  MOVLW  00
0AFDE:  ADDWFC x59,W
0AFE0:  MOVWF  FEA
0AFE2:  DECFSZ FEF,W
0AFE4:  BRA    AFEA
0AFE6:  BRA    AFF0
0AFE8:  MOVLB  0
0AFEA:  MOVLB  0
0AFEC:  GOTO   B1D4
0AFF0:  MOVLB  0
....................       fprintf(PC, "\t\t-> allowed\r\n");
0AFF2:  MOVLW  16
0AFF4:  MOVWF  FF6
0AFF6:  MOVLW  15
0AFF8:  MOVWF  FF7
0AFFA:  MOVLW  00
0AFFC:  MOVWF  FF8
0AFFE:  CALL   1EB2
....................       status[0] = COPYING;
0B002:  MOVLW  05
0B004:  MOVWF  48
.................... 
....................       // キューが空になるまでループ処理
....................       int8 processed_count = 0;
0B006:  MOVLB  1
0B008:  CLRF   x5A
0B00A:  MOVLB  0
....................       while (!is_empty_smf_queue()) {
0B00C:  CALL   8F68
0B010:  MOVF   01,F
0B012:  BTFSS  FD8.2
0B014:  GOTO   B18C
....................          fprintf(PC, "\t\t-> Processing SMF data [%d]\r\n", processed_count);
0B018:  MOVLW  26
0B01A:  MOVWF  FF6
0B01C:  MOVLW  15
0B01E:  MOVWF  FF7
0B020:  MOVLW  00
0B022:  MOVWF  FF8
0B024:  MOVLW  1A
0B026:  MOVLB  9
0B028:  MOVWF  x96
0B02A:  MOVLB  0
0B02C:  CALL   1EE2
0B030:  MOVFF  15A,26E
0B034:  MOVLW  18
0B036:  MOVLB  2
0B038:  MOVWF  x6F
0B03A:  MOVLB  0
0B03C:  CALL   9056
0B040:  MOVLW  42
0B042:  MOVWF  FF6
0B044:  MOVLW  15
0B046:  MOVWF  FF7
0B048:  MOVLW  00
0B04A:  MOVWF  FF8
0B04C:  MOVLW  03
0B04E:  MOVLB  9
0B050:  MOVWF  x96
0B052:  MOVLB  0
0B054:  CALL   1EE2
....................          
....................          SmfDataStruct *smf_data = dequeue_smf_data();
0B058:  GOTO   9164
0B05C:  MOVFF  02,15C
0B060:  MOVFF  01,15B
....................          if (smf_data != 0x00) {
0B064:  MOVLB  1
0B066:  MOVF   x5B,F
0B068:  BTFSC  FD8.2
0B06A:  BRA    B072
0B06C:  MOVLB  0
0B06E:  GOTO   B084
0B072:  MOVLB  0
0B074:  MOVLB  1
0B076:  MOVF   x5C,F
0B078:  BTFSS  FD8.2
0B07A:  BRA    B082
0B07C:  MOVLB  0
0B07E:  GOTO   B174
0B082:  MOVLB  0
....................             int8 func_type = smf_data->func_type;
0B084:  MOVLW  09
0B086:  MOVLB  1
0B088:  ADDWF  x5B,W
0B08A:  MOVWF  FE9
0B08C:  MOVLW  00
0B08E:  ADDWFC x5C,W
0B090:  MOVWF  FEA
0B092:  MOVFF  FEF,15D
0B096:  MOVLB  0
....................             fprintf(PC, "func type : 0x%02X",func_type);
0B098:  MOVLW  46
0B09A:  MOVWF  FF6
0B09C:  MOVLW  15
0B09E:  MOVWF  FF7
0B0A0:  MOVLW  00
0B0A2:  MOVWF  FF8
0B0A4:  MOVLW  0E
0B0A6:  MOVLB  9
0B0A8:  MOVWF  x96
0B0AA:  MOVLB  0
0B0AC:  CALL   1EE2
0B0B0:  MOVFF  15D,996
0B0B4:  MOVLW  37
0B0B6:  MOVLB  9
0B0B8:  MOVWF  x97
0B0BA:  MOVLB  0
0B0BC:  CALL   20E0
....................             if (func_type == 0x00) {  // SMF_WRITE
0B0C0:  MOVLB  1
0B0C2:  MOVF   x5D,F
0B0C4:  BTFSC  FD8.2
0B0C6:  BRA    B0CE
0B0C8:  MOVLB  0
0B0CA:  GOTO   B0EC
0B0CE:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF WRITE (single)\r\n");
0B0D0:  MOVLW  5A
0B0D2:  MOVWF  FF6
0B0D4:  MOVLW  15
0B0D6:  MOVWF  FF7
0B0D8:  MOVLW  00
0B0DA:  MOVWF  FF8
0B0DC:  CALL   1EB2
....................                smf_write(smf_data);
0B0E0:  MOVFF  15C,148
0B0E4:  MOVFF  15B,147
0B0E8:  GOTO   9B82
....................             }
....................             if (func_type == 0x01) {  // SMF_READ
0B0EC:  MOVLB  1
0B0EE:  DECFSZ x5D,W
0B0F0:  BRA    B0F6
0B0F2:  BRA    B0FC
0B0F4:  MOVLB  0
0B0F6:  MOVLB  0
0B0F8:  GOTO   B11A
0B0FC:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF READ (single)\r\n");
0B0FE:  MOVLW  7E
0B100:  MOVWF  FF6
0B102:  MOVLW  15
0B104:  MOVWF  FF7
0B106:  MOVLW  00
0B108:  MOVWF  FF8
0B10A:  CALL   1EB2
....................                smf_read(smf_data);
0B10E:  MOVFF  15C,15F
0B112:  MOVFF  15B,15E
0B116:  GOTO   A5EA
....................             }
.................... 
....................             if (func_type == 0x02) {  // SMF_ERASE
0B11A:  MOVLB  1
0B11C:  MOVF   x5D,W
0B11E:  SUBLW  02
0B120:  BTFSC  FD8.2
0B122:  BRA    B12A
0B124:  MOVLB  0
0B126:  GOTO   B148
0B12A:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF ERASE (single)\r\n");
0B12C:  MOVLW  A2
0B12E:  MOVWF  FF6
0B130:  MOVLW  15
0B132:  MOVWF  FF7
0B134:  MOVLW  00
0B136:  MOVWF  FF8
0B138:  CALL   1EB2
....................                smf_erase(smf_data);
0B13C:  MOVFF  15C,15F
0B140:  MOVFF  15B,15E
0B144:  GOTO   A986
....................             }
....................             if (func_type > 2) {
0B148:  MOVLB  1
0B14A:  MOVF   x5D,W
0B14C:  SUBLW  02
0B14E:  BTFSS  FD8.0
0B150:  BRA    B158
0B152:  MOVLB  0
0B154:  GOTO   B16A
0B158:  MOVLB  0
....................                fprintf(PC, "\t\t-> Unknown SMF function type\r\n");
0B15A:  MOVLW  C6
0B15C:  MOVWF  FF6
0B15E:  MOVLW  15
0B160:  MOVWF  FF7
0B162:  MOVLW  00
0B164:  MOVWF  FF8
0B166:  CALL   1EB2
....................             }
....................             processed_count++;
0B16A:  MOVLB  1
0B16C:  INCF   x5A,F
0B16E:  MOVLB  0
....................          } else {
0B170:  GOTO   B188
....................             fprintf(PC, "\t\t-> Error: Failed to dequeue SMF data\r\n");
0B174:  MOVLW  E8
0B176:  MOVWF  FF6
0B178:  MOVLW  15
0B17A:  MOVWF  FF7
0B17C:  MOVLW  00
0B17E:  MOVWF  FF8
0B180:  CALL   1EB2
....................             break;
0B184:  GOTO   B18C
....................          }
0B188:  GOTO   B00C
....................       }
....................       
....................       fprintf(PC, "\t\t-> Completed processing %d SMF operations\r\n", processed_count);
0B18C:  MOVLW  12
0B18E:  MOVWF  FF6
0B190:  MOVLW  16
0B192:  MOVWF  FF7
0B194:  MOVLW  00
0B196:  MOVWF  FF8
0B198:  MOVLW  1A
0B19A:  MOVLB  9
0B19C:  MOVWF  x96
0B19E:  MOVLB  0
0B1A0:  CALL   1EE2
0B1A4:  MOVFF  15A,26E
0B1A8:  MOVLW  18
0B1AA:  MOVLB  2
0B1AC:  MOVWF  x6F
0B1AE:  MOVLB  0
0B1B0:  CALL   9056
0B1B4:  MOVLW  2E
0B1B6:  MOVWF  FF6
0B1B8:  MOVLW  16
0B1BA:  MOVWF  FF7
0B1BC:  MOVLW  00
0B1BE:  MOVWF  FF8
0B1C0:  MOVLW  11
0B1C2:  MOVLB  9
0B1C4:  MOVWF  x96
0B1C6:  MOVLB  0
0B1C8:  CALL   1EE2
....................       status[0] = FINISHED;
0B1CC:  MOVLW  06
0B1CE:  MOVWF  48
....................    } else {
0B1D0:  GOTO   B1E4
....................       fprintf(PC, "\t\t-> denied\r\n");
0B1D4:  MOVLW  40
0B1D6:  MOVWF  FF6
0B1D8:  MOVLW  16
0B1DA:  MOVWF  FF7
0B1DC:  MOVLW  00
0B1DE:  MOVWF  FF8
0B1E0:  CALL   1EB2
....................    }
0B1E4:  GOTO   B25E (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End MODE DUMMY\r\n");
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
....................    output_low(EN_NPWR); // Enable NPWR
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
....................    output_low(CONNECT_CIGS1);
....................    output_high(EN_NPWR); // Disable NPWR
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... /*
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... */
.................... 
.................... /*
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... */
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
....................    SmfDataStruct data;
....................    //data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
08922:  MOVLW  F2
08924:  MOVWF  FF6
08926:  MOVLW  16
08928:  MOVWF  FF7
0892A:  MOVLW  00
0892C:  MOVWF  FF8
0892E:  CALL   1EB2
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd); // Create the measurement command structure
08932:  MOVFF  160,182
08936:  MOVFF  15F,181
0893A:  GOTO   6500
0893E:  MOVFF  02,03
08942:  MOVF   01,W
08944:  MOVWF  FE1
08946:  MOVFF  03,FE2
0894A:  MOVLW  01
0894C:  MOVWF  FEA
0894E:  MOVLW  61
08950:  MOVWF  FE9
08952:  MOVLW  0C
08954:  MOVWF  01
08956:  MOVFF  FE6,FEE
0895A:  DECFSZ 01,F
0895C:  GOTO   8956
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
08960:  MOVLW  08
08962:  MOVWF  FF6
08964:  MOVLW  17
08966:  MOVWF  FF7
08968:  MOVLW  00
0896A:  MOVWF  FF8
0896C:  MOVLW  05
0896E:  MOVLB  9
08970:  MOVWF  x96
08972:  MOVLB  0
08974:  CALL   1EE2
08978:  MOVFF  161,996
0897C:  MOVLW  37
0897E:  MOVLB  9
08980:  MOVWF  x97
08982:  MOVLB  0
08984:  CALL   20E0
08988:  MOVLW  0D
0898A:  MOVLB  A
0898C:  MOVWF  x29
0898E:  MOVLB  0
08990:  CALL   1E60
08994:  MOVLW  0A
08996:  MOVLB  A
08998:  MOVWF  x29
0899A:  MOVLB  0
0899C:  CALL   1E60
....................    fprintf(PC, "\tSleep Time: %04LX ms\r\n", cmd.sleep_time);
089A0:  MOVLW  14
089A2:  MOVWF  FF6
089A4:  MOVLW  17
089A6:  MOVWF  FF7
089A8:  MOVLW  00
089AA:  MOVWF  FF8
089AC:  MOVLW  0D
089AE:  MOVLB  9
089B0:  MOVWF  x96
089B2:  MOVLB  0
089B4:  CALL   1EE2
089B8:  MOVFF  163,996
089BC:  MOVLW  37
089BE:  MOVLB  9
089C0:  MOVWF  x97
089C2:  MOVLB  0
089C4:  CALL   20E0
089C8:  MOVFF  162,996
089CC:  MOVLW  37
089CE:  MOVLB  9
089D0:  MOVWF  x97
089D2:  MOVLB  0
089D4:  CALL   20E0
089D8:  MOVLW  26
089DA:  MOVWF  FF6
089DC:  MOVLW  17
089DE:  MOVWF  FF7
089E0:  MOVLW  00
089E2:  MOVWF  FF8
089E4:  MOVLW  05
089E6:  MOVLB  9
089E8:  MOVWF  x96
089EA:  MOVLB  0
089EC:  CALL   1EE2
....................    fprintf(PC, "\tCurrent Threshold: %04LX mA\r\n", cmd.curr_threshold);
089F0:  MOVLW  2C
089F2:  MOVWF  FF6
089F4:  MOVLW  17
089F6:  MOVWF  FF7
089F8:  MOVLW  00
089FA:  MOVWF  FF8
089FC:  MOVLW  14
089FE:  MOVLB  9
08A00:  MOVWF  x96
08A02:  MOVLB  0
08A04:  CALL   1EE2
08A08:  MOVFF  165,996
08A0C:  MOVLW  37
08A0E:  MOVLB  9
08A10:  MOVWF  x97
08A12:  MOVLB  0
08A14:  CALL   20E0
08A18:  MOVFF  164,996
08A1C:  MOVLW  37
08A1E:  MOVLB  9
08A20:  MOVWF  x97
08A22:  MOVLB  0
08A24:  CALL   20E0
08A28:  MOVLW  45
08A2A:  MOVWF  FF6
08A2C:  MOVLW  17
08A2E:  MOVWF  FF7
08A30:  MOVLW  00
08A32:  MOVWF  FF8
08A34:  MOVLW  05
08A36:  MOVLB  9
08A38:  MOVWF  x96
08A3A:  MOVLB  0
08A3C:  CALL   1EE2
....................    fprintf(PC, "\tPD Threshold: %04LX mA\r\n", cmd.pd_threshold);
08A40:  MOVLW  4C
08A42:  MOVWF  FF6
08A44:  MOVLW  17
08A46:  MOVWF  FF7
08A48:  MOVLW  00
08A4A:  MOVWF  FF8
08A4C:  MOVLW  0F
08A4E:  MOVLB  9
08A50:  MOVWF  x96
08A52:  MOVLB  0
08A54:  CALL   1EE2
08A58:  MOVFF  167,996
08A5C:  MOVLW  37
08A5E:  MOVLB  9
08A60:  MOVWF  x97
08A62:  MOVLB  0
08A64:  CALL   20E0
08A68:  MOVFF  166,996
08A6C:  MOVLW  37
08A6E:  MOVLB  9
08A70:  MOVWF  x97
08A72:  MOVLB  0
08A74:  CALL   20E0
08A78:  MOVLW  60
08A7A:  MOVWF  FF6
08A7C:  MOVLW  17
08A7E:  MOVWF  FF7
08A80:  MOVLW  00
08A82:  MOVWF  FF8
08A84:  MOVLW  05
08A86:  MOVLB  9
08A88:  MOVWF  x96
08A8A:  MOVLB  0
08A8C:  CALL   1EE2
....................    fprintf(PC, "\tCurrent Limit: %04LX mA\r\n", cmd.curr_limit);
08A90:  MOVLW  66
08A92:  MOVWF  FF6
08A94:  MOVLW  17
08A96:  MOVWF  FF7
08A98:  MOVLW  00
08A9A:  MOVWF  FF8
08A9C:  MOVLW  10
08A9E:  MOVLB  9
08AA0:  MOVWF  x96
08AA2:  MOVLB  0
08AA4:  CALL   1EE2
08AA8:  MOVFF  169,996
08AAC:  MOVLW  37
08AAE:  MOVLB  9
08AB0:  MOVWF  x97
08AB2:  MOVLB  0
08AB4:  CALL   20E0
08AB8:  MOVFF  168,996
08ABC:  MOVLW  37
08ABE:  MOVLB  9
08AC0:  MOVWF  x97
08AC2:  MOVLB  0
08AC4:  CALL   20E0
08AC8:  MOVLW  7B
08ACA:  MOVWF  FF6
08ACC:  MOVLW  17
08ACE:  MOVWF  FF7
08AD0:  MOVLW  00
08AD2:  MOVWF  FF8
08AD4:  MOVLW  05
08AD6:  MOVLB  9
08AD8:  MOVWF  x96
08ADA:  MOVLB  0
08ADC:  CALL   1EE2
....................    fprintf(PC, "\tMeasurement Time: %04LX s\r\n", cmd.meas_time);
08AE0:  MOVLW  82
08AE2:  MOVWF  FF6
08AE4:  MOVLW  17
08AE6:  MOVWF  FF7
08AE8:  MOVLW  00
08AEA:  MOVWF  FF8
08AEC:  MOVLW  13
08AEE:  MOVLB  9
08AF0:  MOVWF  x96
08AF2:  MOVLB  0
08AF4:  CALL   1EE2
08AF8:  MOVFF  16B,996
08AFC:  MOVLW  37
08AFE:  MOVLB  9
08B00:  MOVWF  x97
08B02:  MOVLB  0
08B04:  CALL   20E0
08B08:  MOVFF  16A,996
08B0C:  MOVLW  37
08B0E:  MOVLB  9
08B10:  MOVWF  x97
08B12:  MOVLB  0
08B14:  CALL   20E0
08B18:  MOVLW  9A
08B1A:  MOVWF  FF6
08B1C:  MOVLW  17
08B1E:  MOVWF  FF7
08B20:  MOVLW  00
08B22:  MOVWF  FF8
08B24:  MOVLW  04
08B26:  MOVLB  9
08B28:  MOVWF  x96
08B2A:  MOVLB  0
08B2C:  CALL   1EE2
....................    fprintf(PC, "\tIs Finished: %u\r\n", cmd.is_finished);
08B30:  MOVLW  A0
08B32:  MOVWF  FF6
08B34:  MOVLW  17
08B36:  MOVWF  FF7
08B38:  MOVLW  00
08B3A:  MOVWF  FF8
08B3C:  MOVLW  0E
08B3E:  MOVLB  9
08B40:  MOVWF  x96
08B42:  MOVLB  0
08B44:  CALL   1EE2
08B48:  MOVFF  16C,1EB
08B4C:  MOVLW  1B
08B4E:  MOVLB  1
08B50:  MOVWF  xEC
08B52:  MOVLB  0
08B54:  CALL   6656
08B58:  MOVLW  0D
08B5A:  MOVLB  A
08B5C:  MOVWF  x29
08B5E:  MOVLB  0
08B60:  CALL   1E60
08B64:  MOVLW  0A
08B66:  MOVLB  A
08B68:  MOVWF  x29
08B6A:  MOVLB  0
08B6C:  CALL   1E60
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
08B70:  MOVFF  161,266
08B74:  MOVLW  01
08B76:  MOVLB  2
08B78:  MOVWF  x67
08B7A:  MOVLB  0
08B7C:  CALL   3DC2
.................... 
....................    unsigned int16 start_time = get_current_sec();
....................    unsigned int16 current_sec = 0;
08B80:  CALL   30E8
08B84:  MOVFF  01,16E
08B88:  MOVFF  00,16D
08B8C:  MOVLB  1
08B8E:  CLRF   x70
08B90:  CLRF   x6F
08B92:  MOVLB  0
....................    while(get_current_sec() - start_time < cmd.meas_time)
08B94:  CALL   30E8
08B98:  MOVFF  03,17E
08B9C:  MOVFF  02,17D
08BA0:  MOVFF  01,17C
08BA4:  MOVFF  00,17B
08BA8:  MOVLB  1
08BAA:  MOVF   x6D,W
08BAC:  SUBWF  x7B,F
08BAE:  MOVF   x6E,W
08BB0:  SUBWFB x7C,F
08BB2:  MOVLW  00
08BB4:  SUBWFB x7D,F
08BB6:  MOVLW  00
08BB8:  SUBWFB x7E,F
08BBA:  MOVF   x7E,F
08BBC:  BTFSC  FD8.2
08BBE:  BRA    8BC6
08BC0:  MOVLB  0
08BC2:  GOTO   8C90
08BC6:  MOVLB  0
08BC8:  MOVLB  1
08BCA:  MOVF   x7D,F
08BCC:  BTFSC  FD8.2
08BCE:  BRA    8BD6
08BD0:  MOVLB  0
08BD2:  GOTO   8C90
08BD6:  MOVLB  0
08BD8:  MOVLB  1
08BDA:  MOVF   x7C,W
08BDC:  SUBWF  x6B,W
08BDE:  BTFSC  FD8.0
08BE0:  BRA    8BE8
08BE2:  MOVLB  0
08BE4:  GOTO   8C90
08BE8:  MOVLB  0
08BEA:  BTFSS  FD8.2
08BEC:  GOTO   8C02
08BF0:  MOVLB  1
08BF2:  MOVF   x6A,W
08BF4:  SUBWF  x7B,W
08BF6:  BTFSS  FD8.0
08BF8:  BRA    8C00
08BFA:  MOVLB  0
08BFC:  GOTO   8C90
08C00:  MOVLB  0
....................    {
....................       current_sec = get_current_sec();
08C02:  CALL   30E8
08C06:  MOVFF  01,170
08C0A:  MOVFF  00,16F
....................       if (current_sec - start_time >= cmd.meas_time) {
08C0E:  MOVLB  1
08C10:  MOVF   x6D,W
08C12:  SUBWF  x6F,W
08C14:  MOVWF  x7B
08C16:  MOVF   x6E,W
08C18:  SUBWFB x70,W
08C1A:  MOVWF  x7C
08C1C:  MOVF   x6B,W
08C1E:  SUBWF  x7C,W
08C20:  BTFSC  FD8.0
08C22:  BRA    8C2A
08C24:  MOVLB  0
08C26:  GOTO   8C48
08C2A:  MOVLB  0
08C2C:  BTFSS  FD8.2
08C2E:  GOTO   8C44
08C32:  MOVLB  1
08C34:  MOVF   x6A,W
08C36:  SUBWF  x7B,W
08C38:  BTFSC  FD8.0
08C3A:  BRA    8C42
08C3C:  MOVLB  0
08C3E:  GOTO   8C48
08C42:  MOVLB  0
....................           break;
08C44:  GOTO   8C90
....................       }
....................       sweep_with_threshold(cmd.curr_threshold, cmd.pd_threshold, cmd.curr_limit); // Perform the sweep with thresholds
08C48:  MOVFF  165,17C
08C4C:  MOVFF  164,17B
08C50:  MOVFF  167,17E
08C54:  MOVFF  166,17D
08C58:  MOVFF  169,180
08C5C:  MOVFF  168,17F
08C60:  GOTO   71CA
....................       // Sleep for the specified time
....................       delay_ms(cmd.sleep_time);
08C64:  MOVFF  163,17B
08C68:  MOVLB  1
08C6A:  INCF   x7B,F
08C6C:  MOVLB  0
08C6E:  MOVLB  1
08C70:  DECFSZ x7B,F
08C72:  BRA    8C78
08C74:  MOVLB  0
08C76:  BRA    8C84
08C78:  MOVLB  A
08C7A:  SETF   x3E
08C7C:  MOVLB  0
08C7E:  CALL   1E32
08C82:  BRA    8C6E
08C84:  MOVFF  162,A3E
08C88:  CALL   1E32
08C8C:  GOTO   8B94
....................    }
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
08C90:  MOVFF  161,266
08C94:  MOVLW  02
08C96:  MOVLB  2
08C98:  MOVWF  x67
08C9A:  MOVLB  0
08C9C:  CALL   3DC2
.................... 
....................    SmfDataStruct data;
....................    data.func_type = 0x00;
08CA0:  MOVLB  1
08CA2:  CLRF   x7A
....................    data.mission_id = ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
08CA4:  MOVLW  C1
08CA6:  MOVWF  x71
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
08CA8:  MOVF   x10,W
08CAA:  MOVWF  x7B
08CAC:  MOVF   x11,W
08CAE:  MOVWF  x7C
08CB0:  MOVLW  16
08CB2:  ADDWF  x12,W
08CB4:  MOVWF  x7D
08CB6:  MOVLW  00
08CB8:  ADDWFC x13,W
08CBA:  MOVWF  x7E
08CBC:  MOVF   x15,W
08CBE:  SUBWF  x7B,W
08CC0:  MOVWF  x72
08CC2:  MOVF   x16,W
08CC4:  SUBWFB x7C,W
08CC6:  MOVWF  x73
08CC8:  MOVF   x17,W
08CCA:  SUBWFB x7D,W
08CCC:  MOVWF  x74
08CCE:  MOVF   x18,W
08CD0:  SUBWFB x7E,W
08CD2:  MOVWF  x75
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
08CD4:  MOVFF  118,179
08CD8:  MOVFF  117,178
08CDC:  MOVFF  116,177
08CE0:  MOVFF  115,176
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
08CE4:  MOVLW  01
08CE6:  MOVWF  x7C
08CE8:  MOVLW  71
08CEA:  MOVWF  x7B
08CEC:  MOVLB  0
08CEE:  GOTO   876E
.................... 
....................    fprintf(PC, "End MODE MEAS IV\r\n");
08CF2:  MOVLW  B4
08CF4:  MOVWF  FF6
08CF6:  MOVLW  17
08CF8:  MOVWF  FF7
08CFA:  MOVLW  00
08CFC:  MOVWF  FF8
08CFE:  CALL   1EB2
08D02:  GOTO   8F40 (RETURN)
.................... }
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
06500:  MOVLB  1
06502:  MOVF   x81,W
06504:  MOVWF  FE9
06506:  MOVF   x82,W
06508:  MOVWF  FEA
0650A:  MOVFF  FEF,183
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
0650E:  MOVLW  01
06510:  ADDWF  x81,W
06512:  MOVWF  FE9
06514:  MOVLW  00
06516:  ADDWFC x82,W
06518:  MOVWF  FEA
0651A:  MOVF   FEF,W
0651C:  CLRF   x90
0651E:  MOVWF  x8F
06520:  MOVFF  18F,190
06524:  CLRF   x8F
06526:  MOVLW  02
06528:  ADDWF  x81,W
0652A:  MOVWF  FE9
0652C:  MOVLW  00
0652E:  ADDWFC x82,W
06530:  MOVWF  FEA
06532:  MOVF   FEF,W
06534:  CLRF   03
06536:  IORWF  x8F,W
06538:  MOVWF  x84
0653A:  MOVF   03,W
0653C:  IORWF  x90,W
0653E:  MOVWF  x85
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
06540:  MOVLW  03
06542:  ADDWF  x81,W
06544:  MOVWF  FE9
06546:  MOVLW  00
06548:  ADDWFC x82,W
0654A:  MOVWF  FEA
0654C:  MOVF   FEF,W
0654E:  CLRF   x90
06550:  MOVWF  x8F
06552:  RLCF   x8F,W
06554:  MOVWF  x86
06556:  RLCF   x90,W
06558:  MOVWF  x87
0655A:  RLCF   x86,F
0655C:  RLCF   x87,F
0655E:  RLCF   x86,F
06560:  RLCF   x87,F
06562:  RLCF   x86,F
06564:  RLCF   x87,F
06566:  MOVLW  F0
06568:  ANDWF  x86,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
0656A:  MOVLW  04
0656C:  ADDWF  x81,W
0656E:  MOVWF  FE9
06570:  MOVLW  00
06572:  ADDWFC x82,W
06574:  MOVWF  FEA
06576:  MOVF   FEF,W
06578:  CLRF   x90
0657A:  MOVWF  x8F
0657C:  RLCF   x8F,W
0657E:  MOVWF  x88
06580:  RLCF   x90,W
06582:  MOVWF  x89
06584:  RLCF   x88,F
06586:  RLCF   x89,F
06588:  RLCF   x88,F
0658A:  RLCF   x89,F
0658C:  RLCF   x88,F
0658E:  RLCF   x89,F
06590:  MOVLW  F0
06592:  ANDWF  x88,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
06594:  MOVLW  05
06596:  ADDWF  x81,W
06598:  MOVWF  FE9
0659A:  MOVLW  00
0659C:  ADDWFC x82,W
0659E:  MOVWF  FEA
065A0:  MOVF   FEF,W
065A2:  CLRF   x90
065A4:  MOVWF  x8F
065A6:  RLCF   x8F,W
065A8:  MOVWF  x8A
065AA:  RLCF   x90,W
065AC:  MOVWF  x8B
065AE:  RLCF   x8A,F
065B0:  RLCF   x8B,F
065B2:  RLCF   x8A,F
065B4:  RLCF   x8B,F
065B6:  RLCF   x8A,F
065B8:  RLCF   x8B,F
065BA:  MOVLW  F0
065BC:  ANDWF  x8A,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
065BE:  MOVLW  06
065C0:  ADDWF  x81,W
065C2:  MOVWF  FE9
065C4:  MOVLW  00
065C6:  ADDWFC x82,W
065C8:  MOVWF  FEA
065CA:  MOVF   FEF,W
065CC:  CLRF   x90
065CE:  MOVWF  x8F
065D0:  MOVFF  18F,190
065D4:  CLRF   x8F
065D6:  MOVLW  07
065D8:  ADDWF  x81,W
065DA:  MOVWF  FE9
065DC:  MOVLW  00
065DE:  ADDWFC x82,W
065E0:  MOVWF  FEA
065E2:  MOVF   FEF,W
065E4:  CLRF   03
065E6:  IORWF  x8F,W
065E8:  MOVWF  x8C
065EA:  MOVF   03,W
065EC:  IORWF  x90,W
065EE:  MOVWF  x8D
....................    cmd.is_finished = uplinkcmd[8];
065F0:  MOVLW  08
065F2:  ADDWF  x81,W
065F4:  MOVWF  FE9
065F6:  MOVLW  00
065F8:  ADDWFC x82,W
065FA:  MOVWF  FEA
065FC:  MOVFF  FEF,18E
....................    return cmd;
06600:  MOVLW  83
06602:  MOVWF  01
06604:  MOVLW  01
06606:  MOVWF  02
06608:  MOVLB  0
0660A:  GOTO   893E (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    SmfDataStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                        // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                        // 追加位置（書き込みインデックス）
.................... } SmfQueueStruct;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_queue(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
049B6:  MOVLW  C8
049B8:  MOVWF  FF6
049BA:  MOVLW  17
049BC:  MOVWF  FF7
049BE:  MOVLW  00
049C0:  MOVWF  FF8
049C2:  CALL   1EB2
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
049C6:  MOVLB  1
049C8:  MOVF   x61,W
049CA:  MOVWF  FE9
049CC:  MOVF   x62,W
049CE:  MOVWF  FEA
049D0:  MOVFF  FEF,163
....................    piclog_make(cmd, 0x00); // Log the command execution
049D4:  MOVFF  163,266
049D8:  MOVLB  2
049DA:  CLRF   x67
049DC:  MOVLB  0
049DE:  CALL   3DC2
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
049E2:  MOVLB  1
049E4:  CLRF   x67
049E6:  CLRF   x66
049E8:  CLRF   x65
049EA:  CLRF   x64
049EC:  MOVLB  0
049EE:  MOVLB  1
049F0:  MOVF   x67,F
049F2:  BTFSC  FD8.2
049F4:  BRA    49FC
049F6:  MOVLB  0
049F8:  GOTO   4A5C
049FC:  MOVLB  0
049FE:  MOVLB  1
04A00:  MOVF   x66,W
04A02:  SUBLW  F4
04A04:  BTFSC  FD8.0
04A06:  BRA    4A0E
04A08:  MOVLB  0
04A0A:  GOTO   4A5C
04A0E:  MOVLB  0
04A10:  BTFSS  FD8.2
04A12:  GOTO   4A28
04A16:  MOVLB  1
04A18:  MOVF   x65,W
04A1A:  SUBLW  23
04A1C:  BTFSC  FD8.0
04A1E:  BRA    4A26
04A20:  MOVLB  0
04A22:  GOTO   4A5C
04A26:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
04A28:  MOVFF  F1,1A8
04A2C:  MOVFF  F0,1A7
04A30:  MOVFF  EF,1A6
04A34:  MOVFF  EE,1A5
04A38:  MOVFF  167,1AC
04A3C:  MOVFF  166,1AB
04A40:  MOVFF  165,1AA
04A44:  MOVFF  164,1A9
04A48:  CALL   465A
04A4C:  MOVLW  01
04A4E:  MOVLB  1
04A50:  ADDWF  x66,F
04A52:  MOVLW  00
04A54:  ADDWFC x67,F
04A56:  MOVLB  0
04A58:  GOTO   49EE
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04A5C:  MOVFF  163,266
04A60:  MOVLW  02
04A62:  MOVLB  2
04A64:  MOVWF  x67
04A66:  MOVLB  0
04A68:  CALL   3DC2
....................    fprintf(PC, "End Flash Erase All\r\n");
04A6C:  MOVLW  E0
04A6E:  MOVWF  FF6
04A70:  MOVLW  17
04A72:  MOVWF  FF7
04A74:  MOVLW  00
04A76:  MOVWF  FF8
04A78:  CALL   1EB2
04A7C:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
04A7E:  MOVLW  F6
04A80:  MOVWF  FF6
04A82:  MOVLW  17
04A84:  MOVWF  FF7
04A86:  MOVLW  00
04A88:  MOVWF  FF8
04A8A:  CALL   1EB2
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04A8E:  MOVLB  1
04A90:  MOVF   x5F,W
04A92:  MOVWF  FE9
04A94:  MOVF   x60,W
04A96:  MOVWF  FEA
04A98:  MOVFF  FEF,161
04A9C:  MOVLW  01
04A9E:  ADDWF  x5F,W
04AA0:  MOVWF  FE9
04AA2:  MOVLW  00
04AA4:  ADDWFC x60,W
04AA6:  MOVWF  FEA
04AA8:  MOVF   FEF,W
04AAA:  CLRF   x69
04AAC:  CLRF   x68
04AAE:  CLRF   x67
04AB0:  MOVWF  x66
04AB2:  MOVFF  166,169
04AB6:  CLRF   x66
04AB8:  CLRF   x67
04ABA:  CLRF   x68
04ABC:  MOVLW  02
04ABE:  ADDWF  x5F,W
04AC0:  MOVWF  FE9
04AC2:  MOVLW  00
04AC4:  ADDWFC x60,W
04AC6:  MOVWF  FEA
04AC8:  MOVF   FEF,W
04ACA:  CLRF   x6E
04ACC:  CLRF   x6D
04ACE:  CLRF   x6C
04AD0:  MOVWF  x6B
04AD2:  MOVFF  16C,03
04AD6:  MOVFF  16B,02
04ADA:  CLRF   00
04ADC:  CLRF   01
04ADE:  MOVF   00,W
04AE0:  IORWF  x66,F
04AE2:  MOVF   01,W
04AE4:  IORWF  x67,F
04AE6:  MOVF   02,W
04AE8:  IORWF  x68,F
04AEA:  MOVF   03,W
04AEC:  IORWF  x69,F
04AEE:  MOVLW  03
04AF0:  ADDWF  x5F,W
04AF2:  MOVWF  FE9
04AF4:  MOVLW  00
04AF6:  ADDWFC x60,W
04AF8:  MOVWF  FEA
04AFA:  MOVF   FEF,W
04AFC:  CLRF   x6E
04AFE:  CLRF   x6D
04B00:  CLRF   x6C
04B02:  MOVWF  x6B
04B04:  MOVFF  16D,03
04B08:  MOVFF  16C,02
04B0C:  MOVFF  16B,01
04B10:  CLRF   00
04B12:  MOVF   00,W
04B14:  IORWF  x66,F
04B16:  MOVF   01,W
04B18:  IORWF  x67,F
04B1A:  MOVF   02,W
04B1C:  IORWF  x68,F
04B1E:  MOVF   03,W
04B20:  IORWF  x69,F
04B22:  MOVLW  04
04B24:  ADDWF  x5F,W
04B26:  MOVWF  FE9
04B28:  MOVLW  00
04B2A:  ADDWFC x60,W
04B2C:  MOVWF  FEA
04B2E:  MOVF   FEF,W
04B30:  MOVWF  00
04B32:  CLRF   01
04B34:  CLRF   02
04B36:  CLRF   03
04B38:  MOVF   00,W
04B3A:  IORWF  x66,W
04B3C:  MOVWF  x62
04B3E:  MOVF   01,W
04B40:  IORWF  x67,W
04B42:  MOVWF  x63
04B44:  MOVF   02,W
04B46:  IORWF  x68,W
04B48:  MOVWF  x64
04B4A:  MOVF   03,W
04B4C:  IORWF  x69,W
04B4E:  MOVWF  x65
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
04B50:  MOVLW  14
04B52:  MOVWF  FF6
04B54:  MOVLW  18
04B56:  MOVWF  FF7
04B58:  MOVLW  00
04B5A:  MOVWF  FF8
04B5C:  MOVLW  13
04B5E:  MOVLB  9
04B60:  MOVWF  x96
04B62:  MOVLB  0
04B64:  CALL   1EE2
04B68:  MOVFF  165,996
04B6C:  MOVLW  37
04B6E:  MOVLB  9
04B70:  MOVWF  x97
04B72:  MOVLB  0
04B74:  CALL   20E0
04B78:  MOVFF  164,996
04B7C:  MOVLW  37
04B7E:  MOVLB  9
04B80:  MOVWF  x97
04B82:  MOVLB  0
04B84:  CALL   20E0
04B88:  MOVFF  163,996
04B8C:  MOVLW  37
04B8E:  MOVLB  9
04B90:  MOVWF  x97
04B92:  MOVLB  0
04B94:  CALL   20E0
04B98:  MOVFF  162,996
04B9C:  MOVLW  37
04B9E:  MOVLB  9
04BA0:  MOVWF  x97
04BA2:  MOVLB  0
04BA4:  CALL   20E0
04BA8:  MOVLW  0D
04BAA:  MOVLB  A
04BAC:  MOVWF  x29
04BAE:  MOVLB  0
04BB0:  CALL   1E60
04BB4:  MOVLW  0A
04BB6:  MOVLB  A
04BB8:  MOVWF  x29
04BBA:  MOVLB  0
04BBC:  CALL   1E60
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04BC0:  MOVFF  161,266
04BC4:  MOVLW  01
04BC6:  MOVLB  2
04BC8:  MOVWF  x67
04BCA:  MOVLB  0
04BCC:  CALL   3DC2
....................    
....................    sector_erase(mis_fm, sector_address);
04BD0:  MOVFF  F1,1A8
04BD4:  MOVFF  F0,1A7
04BD8:  MOVFF  EF,1A6
04BDC:  MOVFF  EE,1A5
04BE0:  MOVFF  165,1AC
04BE4:  MOVFF  164,1AB
04BE8:  MOVFF  163,1AA
04BEC:  MOVFF  162,1A9
04BF0:  CALL   465A
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04BF4:  MOVFF  161,266
04BF8:  MOVLW  02
04BFA:  MOVLB  2
04BFC:  MOVWF  x67
04BFE:  MOVLB  0
04C00:  CALL   3DC2
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
04C04:  MOVLW  30
04C06:  MOVWF  FF6
04C08:  MOVLW  18
04C0A:  MOVWF  FF7
04C0C:  MOVLW  00
04C0E:  MOVWF  FF8
04C10:  CALL   1EB2
04C14:  GOTO   8E50 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
04C18:  MOVLW  4C
04C1A:  MOVWF  FF6
04C1C:  MOVLW  18
04C1E:  MOVWF  FF7
04C20:  MOVLW  00
04C22:  MOVWF  FF8
04C24:  CALL   1EB2
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04C28:  MOVLB  1
04C2A:  MOVF   x5F,W
04C2C:  MOVWF  FE9
04C2E:  MOVF   x60,W
04C30:  MOVWF  FEA
04C32:  MOVFF  FEF,161
04C36:  MOVLW  01
04C38:  ADDWF  x5F,W
04C3A:  MOVWF  FE9
04C3C:  MOVLW  00
04C3E:  ADDWFC x60,W
04C40:  MOVWF  FEA
04C42:  MOVF   FEF,W
04C44:  CLRF   x69
04C46:  CLRF   x68
04C48:  CLRF   x67
04C4A:  MOVWF  x66
04C4C:  MOVFF  166,169
04C50:  CLRF   x66
04C52:  CLRF   x67
04C54:  CLRF   x68
04C56:  MOVLW  02
04C58:  ADDWF  x5F,W
04C5A:  MOVWF  FE9
04C5C:  MOVLW  00
04C5E:  ADDWFC x60,W
04C60:  MOVWF  FEA
04C62:  MOVF   FEF,W
04C64:  CLRF   x6E
04C66:  CLRF   x6D
04C68:  CLRF   x6C
04C6A:  MOVWF  x6B
04C6C:  MOVFF  16C,03
04C70:  MOVFF  16B,02
04C74:  CLRF   00
04C76:  CLRF   01
04C78:  MOVF   00,W
04C7A:  IORWF  x66,F
04C7C:  MOVF   01,W
04C7E:  IORWF  x67,F
04C80:  MOVF   02,W
04C82:  IORWF  x68,F
04C84:  MOVF   03,W
04C86:  IORWF  x69,F
04C88:  MOVLW  03
04C8A:  ADDWF  x5F,W
04C8C:  MOVWF  FE9
04C8E:  MOVLW  00
04C90:  ADDWFC x60,W
04C92:  MOVWF  FEA
04C94:  MOVF   FEF,W
04C96:  CLRF   x6E
04C98:  CLRF   x6D
04C9A:  CLRF   x6C
04C9C:  MOVWF  x6B
04C9E:  MOVFF  16D,03
04CA2:  MOVFF  16C,02
04CA6:  MOVFF  16B,01
04CAA:  CLRF   00
04CAC:  MOVF   00,W
04CAE:  IORWF  x66,F
04CB0:  MOVF   01,W
04CB2:  IORWF  x67,F
04CB4:  MOVF   02,W
04CB6:  IORWF  x68,F
04CB8:  MOVF   03,W
04CBA:  IORWF  x69,F
04CBC:  MOVLW  04
04CBE:  ADDWF  x5F,W
04CC0:  MOVWF  FE9
04CC2:  MOVLW  00
04CC4:  ADDWFC x60,W
04CC6:  MOVWF  FEA
04CC8:  MOVF   FEF,W
04CCA:  MOVWF  00
04CCC:  CLRF   01
04CCE:  CLRF   02
04CD0:  CLRF   03
04CD2:  MOVF   00,W
04CD4:  IORWF  x66,W
04CD6:  MOVWF  x62
04CD8:  MOVF   01,W
04CDA:  IORWF  x67,W
04CDC:  MOVWF  x63
04CDE:  MOVF   02,W
04CE0:  IORWF  x68,W
04CE2:  MOVWF  x64
04CE4:  MOVF   03,W
04CE6:  IORWF  x69,W
04CE8:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04CEA:  MOVLW  68
04CEC:  MOVWF  FF6
04CEE:  MOVLW  18
04CF0:  MOVWF  FF7
04CF2:  MOVLW  00
04CF4:  MOVWF  FF8
04CF6:  MOVLW  16
04CF8:  MOVLB  9
04CFA:  MOVWF  x96
04CFC:  MOVLB  0
04CFE:  CALL   1EE2
04D02:  MOVFF  165,996
04D06:  MOVLW  37
04D08:  MOVLB  9
04D0A:  MOVWF  x97
04D0C:  MOVLB  0
04D0E:  CALL   20E0
04D12:  MOVFF  164,996
04D16:  MOVLW  37
04D18:  MOVLB  9
04D1A:  MOVWF  x97
04D1C:  MOVLB  0
04D1E:  CALL   20E0
04D22:  MOVFF  163,996
04D26:  MOVLW  37
04D28:  MOVLB  9
04D2A:  MOVWF  x97
04D2C:  MOVLB  0
04D2E:  CALL   20E0
04D32:  MOVFF  162,996
04D36:  MOVLW  37
04D38:  MOVLB  9
04D3A:  MOVWF  x97
04D3C:  MOVLB  0
04D3E:  CALL   20E0
04D42:  MOVLW  0D
04D44:  MOVLB  A
04D46:  MOVWF  x29
04D48:  MOVLB  0
04D4A:  CALL   1E60
04D4E:  MOVLW  0A
04D50:  MOVLB  A
04D52:  MOVWF  x29
04D54:  MOVLB  0
04D56:  CALL   1E60
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04D5A:  MOVFF  161,266
04D5E:  MOVLW  01
04D60:  MOVLB  2
04D62:  MOVWF  x67
04D64:  MOVLB  0
04D66:  CALL   3DC2
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
04D6A:  MOVFF  F1,A29
04D6E:  MOVFF  F0,A28
04D72:  MOVFF  EF,A27
04D76:  MOVFF  EE,A26
04D7A:  MOVLB  A
04D7C:  CLRF   x2D
04D7E:  CLRF   x2C
04D80:  CLRF   x2B
04D82:  CLRF   x2A
04D84:  MOVLB  0
04D86:  CALL   378A
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04D8A:  MOVFF  161,266
04D8E:  MOVLW  02
04D90:  MOVLB  2
04D92:  MOVWF  x67
04D94:  MOVLB  0
04D96:  CALL   3DC2
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
04D9A:  MOVLW  86
04D9C:  MOVWF  FF6
04D9E:  MOVLW  18
04DA0:  MOVWF  FF7
04DA2:  MOVLW  00
04DA4:  MOVWF  FF8
04DA6:  CALL   1EB2
04DAA:  GOTO   8E60 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
04DAE:  MOVLW  A0
04DB0:  MOVWF  FF6
04DB2:  MOVLW  18
04DB4:  MOVWF  FF7
04DB6:  MOVLW  00
04DB8:  MOVWF  FF8
04DBA:  CALL   1EB2
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04DBE:  MOVLB  1
04DC0:  MOVF   x5F,W
04DC2:  MOVWF  FE9
04DC4:  MOVF   x60,W
04DC6:  MOVWF  FEA
04DC8:  MOVFF  FEF,161
04DCC:  MOVLW  01
04DCE:  ADDWF  x5F,W
04DD0:  MOVWF  FE9
04DD2:  MOVLW  00
04DD4:  ADDWFC x60,W
04DD6:  MOVWF  FEA
04DD8:  MOVF   FEF,W
04DDA:  CLRF   x69
04DDC:  CLRF   x68
04DDE:  CLRF   x67
04DE0:  MOVWF  x66
04DE2:  MOVFF  166,169
04DE6:  CLRF   x66
04DE8:  CLRF   x67
04DEA:  CLRF   x68
04DEC:  MOVLW  02
04DEE:  ADDWF  x5F,W
04DF0:  MOVWF  FE9
04DF2:  MOVLW  00
04DF4:  ADDWFC x60,W
04DF6:  MOVWF  FEA
04DF8:  MOVF   FEF,W
04DFA:  CLRF   x6E
04DFC:  CLRF   x6D
04DFE:  CLRF   x6C
04E00:  MOVWF  x6B
04E02:  MOVFF  16C,03
04E06:  MOVFF  16B,02
04E0A:  CLRF   00
04E0C:  CLRF   01
04E0E:  MOVF   00,W
04E10:  IORWF  x66,F
04E12:  MOVF   01,W
04E14:  IORWF  x67,F
04E16:  MOVF   02,W
04E18:  IORWF  x68,F
04E1A:  MOVF   03,W
04E1C:  IORWF  x69,F
04E1E:  MOVLW  03
04E20:  ADDWF  x5F,W
04E22:  MOVWF  FE9
04E24:  MOVLW  00
04E26:  ADDWFC x60,W
04E28:  MOVWF  FEA
04E2A:  MOVF   FEF,W
04E2C:  CLRF   x6E
04E2E:  CLRF   x6D
04E30:  CLRF   x6C
04E32:  MOVWF  x6B
04E34:  MOVFF  16D,03
04E38:  MOVFF  16C,02
04E3C:  MOVFF  16B,01
04E40:  CLRF   00
04E42:  MOVF   00,W
04E44:  IORWF  x66,F
04E46:  MOVF   01,W
04E48:  IORWF  x67,F
04E4A:  MOVF   02,W
04E4C:  IORWF  x68,F
04E4E:  MOVF   03,W
04E50:  IORWF  x69,F
04E52:  MOVLW  04
04E54:  ADDWF  x5F,W
04E56:  MOVWF  FE9
04E58:  MOVLW  00
04E5A:  ADDWFC x60,W
04E5C:  MOVWF  FEA
04E5E:  MOVF   FEF,W
04E60:  MOVWF  00
04E62:  CLRF   01
04E64:  CLRF   02
04E66:  CLRF   03
04E68:  MOVF   00,W
04E6A:  IORWF  x66,W
04E6C:  MOVWF  x62
04E6E:  MOVF   01,W
04E70:  IORWF  x67,W
04E72:  MOVWF  x63
04E74:  MOVF   02,W
04E76:  IORWF  x68,W
04E78:  MOVWF  x64
04E7A:  MOVF   03,W
04E7C:  IORWF  x69,W
04E7E:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04E80:  MOVLW  C6
04E82:  MOVWF  FF6
04E84:  MOVLW  18
04E86:  MOVWF  FF7
04E88:  MOVLW  00
04E8A:  MOVWF  FF8
04E8C:  MOVLW  16
04E8E:  MOVLB  9
04E90:  MOVWF  x96
04E92:  MOVLB  0
04E94:  CALL   1EE2
04E98:  MOVFF  165,996
04E9C:  MOVLW  37
04E9E:  MOVLB  9
04EA0:  MOVWF  x97
04EA2:  MOVLB  0
04EA4:  CALL   20E0
04EA8:  MOVFF  164,996
04EAC:  MOVLW  37
04EAE:  MOVLB  9
04EB0:  MOVWF  x97
04EB2:  MOVLB  0
04EB4:  CALL   20E0
04EB8:  MOVFF  163,996
04EBC:  MOVLW  37
04EBE:  MOVLB  9
04EC0:  MOVWF  x97
04EC2:  MOVLB  0
04EC4:  CALL   20E0
04EC8:  MOVFF  162,996
04ECC:  MOVLW  37
04ECE:  MOVLB  9
04ED0:  MOVWF  x97
04ED2:  MOVLB  0
04ED4:  CALL   20E0
04ED8:  MOVLW  0D
04EDA:  MOVLB  A
04EDC:  MOVWF  x29
04EDE:  MOVLB  0
04EE0:  CALL   1E60
04EE4:  MOVLW  0A
04EE6:  MOVLB  A
04EE8:  MOVWF  x29
04EEA:  MOVLB  0
04EEC:  CALL   1E60
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04EF0:  MOVFF  161,266
04EF4:  MOVLW  01
04EF6:  MOVLB  2
04EF8:  MOVWF  x67
04EFA:  MOVLB  0
04EFC:  CALL   3DC2
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04F00:  MOVFF  161,266
04F04:  MOVLW  02
04F06:  MOVLB  2
04F08:  MOVWF  x67
04F0A:  MOVLB  0
04F0C:  CALL   3DC2
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
04F10:  MOVLW  E4
04F12:  MOVWF  FF6
04F14:  MOVLW  18
04F16:  MOVWF  FF7
04F18:  MOVLW  00
04F1A:  MOVWF  FF8
04F1C:  CALL   1EB2
04F20:  GOTO   8E70 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
04F24:  MOVLW  08
04F26:  MOVWF  FF6
04F28:  MOVLW  19
04F2A:  MOVWF  FF7
04F2C:  MOVLW  00
04F2E:  MOVWF  FF8
04F30:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04F34:  MOVLB  1
04F36:  MOVF   x5F,W
04F38:  MOVWF  FE9
04F3A:  MOVF   x60,W
04F3C:  MOVWF  FEA
04F3E:  MOVFF  FEF,1B1
04F42:  MOVFF  1B1,266
04F46:  MOVLW  01
04F48:  MOVLB  2
04F4A:  MOVWF  x67
04F4C:  MOVLB  0
04F4E:  CALL   3DC2
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
04F52:  MOVLB  1
04F54:  CLRF   x61
04F56:  CLRF   x62
04F58:  CLRF   x63
04F5A:  CLRF   x64
04F5C:  CLRF   x65
04F5E:  CLRF   x66
04F60:  CLRF   x67
....................    
....................    flash_write_param.id = parameter[0];
04F62:  MOVF   x5F,W
04F64:  MOVWF  FE9
04F66:  MOVF   x60,W
04F68:  MOVWF  FEA
04F6A:  MOVFF  FEF,161
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
04F6E:  MOVLW  01
04F70:  ADDWF  x5F,W
04F72:  MOVWF  FE9
04F74:  MOVLW  00
04F76:  ADDWFC x60,W
04F78:  MOVWF  FEA
04F7A:  MOVF   FEF,W
04F7C:  CLRF   xB4
04F7E:  CLRF   xB3
04F80:  CLRF   xB2
04F82:  MOVWF  xB1
04F84:  MOVFF  1B1,1B4
04F88:  CLRF   xB1
04F8A:  CLRF   xB2
04F8C:  CLRF   xB3
04F8E:  MOVLW  02
04F90:  ADDWF  x5F,W
04F92:  MOVWF  FE9
04F94:  MOVLW  00
04F96:  ADDWFC x60,W
04F98:  MOVWF  FEA
04F9A:  MOVF   FEF,W
04F9C:  CLRF   xB9
04F9E:  CLRF   xB8
04FA0:  CLRF   xB7
04FA2:  MOVWF  xB6
04FA4:  MOVFF  1B7,03
04FA8:  MOVFF  1B6,02
04FAC:  CLRF   00
04FAE:  CLRF   01
04FB0:  MOVF   00,W
04FB2:  IORWF  xB1,F
04FB4:  MOVF   01,W
04FB6:  IORWF  xB2,F
04FB8:  MOVF   02,W
04FBA:  IORWF  xB3,F
04FBC:  MOVF   03,W
04FBE:  IORWF  xB4,F
04FC0:  MOVLW  03
04FC2:  ADDWF  x5F,W
04FC4:  MOVWF  FE9
04FC6:  MOVLW  00
04FC8:  ADDWFC x60,W
04FCA:  MOVWF  FEA
04FCC:  MOVF   FEF,W
04FCE:  CLRF   xB9
04FD0:  CLRF   xB8
04FD2:  CLRF   xB7
04FD4:  MOVWF  xB6
04FD6:  MOVFF  1B8,03
04FDA:  MOVFF  1B7,02
04FDE:  MOVFF  1B6,01
04FE2:  CLRF   00
04FE4:  MOVF   00,W
04FE6:  IORWF  xB1,F
04FE8:  MOVF   01,W
04FEA:  IORWF  xB2,F
04FEC:  MOVF   02,W
04FEE:  IORWF  xB3,F
04FF0:  MOVF   03,W
04FF2:  IORWF  xB4,F
04FF4:  MOVLW  04
04FF6:  ADDWF  x5F,W
04FF8:  MOVWF  FE9
04FFA:  MOVLW  00
04FFC:  ADDWFC x60,W
04FFE:  MOVWF  FEA
05000:  MOVF   FEF,W
05002:  MOVWF  00
05004:  CLRF   01
05006:  CLRF   02
05008:  CLRF   03
0500A:  MOVF   00,W
0500C:  IORWF  xB1,W
0500E:  MOVWF  x62
05010:  MOVF   01,W
05012:  IORWF  xB2,W
05014:  MOVWF  x63
05016:  MOVF   02,W
05018:  IORWF  xB3,W
0501A:  MOVWF  x64
0501C:  MOVF   03,W
0501E:  IORWF  xB4,W
05020:  MOVWF  x65
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05022:  MOVLW  07
05024:  ADDWF  x5F,W
05026:  MOVWF  FE9
05028:  MOVLW  00
0502A:  ADDWFC x60,W
0502C:  MOVWF  FEA
0502E:  MOVF   FEF,W
05030:  CLRF   xB2
05032:  MOVWF  xB1
05034:  MOVFF  1B1,1B2
05038:  CLRF   xB1
0503A:  MOVLW  08
0503C:  ADDWF  x5F,W
0503E:  MOVWF  FE9
05040:  MOVLW  00
05042:  ADDWFC x60,W
05044:  MOVWF  FEA
05046:  MOVF   FEF,W
05048:  CLRF   03
0504A:  IORWF  xB1,W
0504C:  MOVWF  x66
0504E:  MOVF   03,W
05050:  IORWF  xB2,W
05052:  MOVWF  x67
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05054:  MOVLW  22
05056:  MOVWF  FF6
05058:  MOVLW  19
0505A:  MOVWF  FF7
0505C:  MOVLW  00
0505E:  MOVWF  FF8
05060:  MOVLW  0C
05062:  MOVLB  9
05064:  MOVWF  x96
05066:  MOVLB  0
05068:  CALL   1EE2
0506C:  MOVFF  161,996
05070:  MOVLW  37
05072:  MOVLB  9
05074:  MOVWF  x97
05076:  MOVLB  0
05078:  CALL   20E0
0507C:  MOVLW  0D
0507E:  MOVLB  A
05080:  MOVWF  x29
05082:  MOVLB  0
05084:  CALL   1E60
05088:  MOVLW  0A
0508A:  MOVLB  A
0508C:  MOVWF  x29
0508E:  MOVLB  0
05090:  CALL   1E60
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05094:  MOVLW  36
05096:  MOVWF  FF6
05098:  MOVLW  19
0509A:  MOVWF  FF7
0509C:  MOVLW  00
0509E:  MOVWF  FF8
050A0:  MOVLW  0E
050A2:  MOVLB  9
050A4:  MOVWF  x96
050A6:  MOVLB  0
050A8:  CALL   1EE2
050AC:  MOVFF  165,996
050B0:  MOVLW  37
050B2:  MOVLB  9
050B4:  MOVWF  x97
050B6:  MOVLB  0
050B8:  CALL   20E0
050BC:  MOVFF  164,996
050C0:  MOVLW  37
050C2:  MOVLB  9
050C4:  MOVWF  x97
050C6:  MOVLB  0
050C8:  CALL   20E0
050CC:  MOVFF  163,996
050D0:  MOVLW  37
050D2:  MOVLB  9
050D4:  MOVWF  x97
050D6:  MOVLB  0
050D8:  CALL   20E0
050DC:  MOVFF  162,996
050E0:  MOVLW  37
050E2:  MOVLB  9
050E4:  MOVWF  x97
050E6:  MOVLB  0
050E8:  CALL   20E0
050EC:  MOVLW  0D
050EE:  MOVLB  A
050F0:  MOVWF  x29
050F2:  MOVLB  0
050F4:  CALL   1E60
050F8:  MOVLW  0A
050FA:  MOVLB  A
050FC:  MOVWF  x29
050FE:  MOVLB  0
05100:  CALL   1E60
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05104:  MOVLW  4C
05106:  MOVWF  FF6
05108:  MOVLW  19
0510A:  MOVWF  FF7
0510C:  MOVLW  00
0510E:  MOVWF  FF8
05110:  MOVLW  0E
05112:  MOVLB  9
05114:  MOVWF  x96
05116:  MOVLB  0
05118:  CALL   1EE2
0511C:  MOVFF  167,996
05120:  MOVLW  37
05122:  MOVLB  9
05124:  MOVWF  x97
05126:  MOVLB  0
05128:  CALL   20E0
0512C:  MOVFF  166,996
05130:  MOVLW  37
05132:  MOVLB  9
05134:  MOVWF  x97
05136:  MOVLB  0
05138:  CALL   20E0
0513C:  MOVLW  0D
0513E:  MOVLB  A
05140:  MOVWF  x29
05142:  MOVLB  0
05144:  CALL   1E60
05148:  MOVLW  0A
0514A:  MOVLB  A
0514C:  MOVWF  x29
0514E:  MOVLB  0
05150:  CALL   1E60
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05154:  MOVFF  161,266
05158:  MOVLB  2
0515A:  CLRF   x67
0515C:  MOVLB  0
0515E:  CALL   3DC2
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05162:  MOVLW  62
05164:  MOVWF  FF6
05166:  MOVLW  19
05168:  MOVWF  FF7
0516A:  MOVLW  00
0516C:  MOVWF  FF8
0516E:  CALL   1EB2
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05172:  MOVLB  1
05174:  CLRF   xA9
05176:  CLRF   xA8
05178:  MOVLB  0
0517A:  MOVLB  1
0517C:  MOVF   xA9,W
0517E:  SUBWF  x67,W
05180:  BTFSC  FD8.0
05182:  BRA    518A
05184:  MOVLB  0
05186:  GOTO   52B8
0518A:  MOVLB  0
0518C:  BTFSS  FD8.2
0518E:  GOTO   51A4
05192:  MOVLB  1
05194:  MOVF   x66,W
05196:  SUBWF  xA8,W
05198:  BTFSS  FD8.0
0519A:  BRA    51A2
0519C:  MOVLB  0
0519E:  GOTO   52B8
051A2:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
051A4:  MOVLB  1
051A6:  RLCF   xA8,W
051A8:  MOVWF  xAA
051AA:  RLCF   xA9,W
051AC:  MOVWF  xAB
051AE:  RLCF   xAA,F
051B0:  RLCF   xAB,F
051B2:  RLCF   xAA,F
051B4:  RLCF   xAB,F
051B6:  RLCF   xAA,F
051B8:  RLCF   xAB,F
051BA:  RLCF   xAA,F
051BC:  RLCF   xAB,F
051BE:  RLCF   xAA,F
051C0:  RLCF   xAB,F
051C2:  MOVLW  C0
051C4:  ANDWF  xAA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
051C6:  CLRF   xAC
051C8:  MOVLB  0
051CA:  MOVLB  1
051CC:  MOVF   xAC,W
051CE:  SUBLW  3F
051D0:  BTFSC  FD8.0
051D2:  BRA    51DA
051D4:  MOVLB  0
051D6:  GOTO   523A
051DA:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
051DC:  CLRF   03
051DE:  MOVLB  1
051E0:  MOVF   xAC,W
051E2:  ADDLW  68
051E4:  MOVWF  FE9
051E6:  MOVLW  01
051E8:  ADDWFC 03,W
051EA:  MOVWF  FEA
051EC:  MOVF   xAC,W
051EE:  ADDWF  xAA,W
051F0:  MOVWF  xB3
051F2:  MOVLW  00
051F4:  ADDWFC xAB,W
051F6:  MOVWF  xB4
051F8:  MOVF   xB3,W
051FA:  MOVWF  00
051FC:  CLRF   03
051FE:  MOVF   00,W
05200:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05202:  CLRF   03
05204:  MOVF   xAC,W
05206:  ADDLW  68
05208:  MOVWF  FE9
0520A:  MOVLW  01
0520C:  ADDWFC 03,W
0520E:  MOVWF  FEA
05210:  MOVFF  FEF,1B1
05214:  MOVFF  1B1,996
05218:  MOVLW  37
0521A:  MOVLB  9
0521C:  MOVWF  x97
0521E:  MOVLB  0
05220:  CALL   20E0
05224:  MOVLW  20
05226:  MOVLB  A
05228:  MOVWF  x29
0522A:  MOVLB  0
0522C:  CALL   1E60
05230:  MOVLB  1
05232:  INCF   xAC,F
05234:  MOVLB  0
05236:  GOTO   51CA
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
0523A:  MOVLB  1
0523C:  RLCF   xA8,W
0523E:  MOVWF  02
05240:  RLCF   xA9,W
05242:  MOVWF  03
05244:  RLCF   02,F
05246:  RLCF   03,F
05248:  RLCF   02,F
0524A:  RLCF   03,F
0524C:  RLCF   02,F
0524E:  RLCF   03,F
05250:  RLCF   02,F
05252:  RLCF   03,F
05254:  RLCF   02,F
05256:  RLCF   03,F
05258:  MOVLW  C0
0525A:  ANDWF  02,F
0525C:  MOVF   02,W
0525E:  ADDWF  x62,W
05260:  MOVWF  xAD
05262:  MOVF   03,W
05264:  ADDWFC x63,W
05266:  MOVWF  xAE
05268:  MOVLW  00
0526A:  ADDWFC x64,W
0526C:  MOVWF  xAF
0526E:  MOVLW  00
05270:  ADDWFC x65,W
05272:  MOVWF  xB0
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
05274:  MOVFF  F1,A29
05278:  MOVFF  F0,A28
0527C:  MOVFF  EF,A27
05280:  MOVFF  EE,A26
05284:  MOVFF  1B0,A2D
05288:  MOVFF  1AF,A2C
0528C:  MOVFF  1AE,A2B
05290:  MOVFF  1AD,A2A
05294:  MOVLW  01
05296:  MOVLB  A
05298:  MOVWF  x2F
0529A:  MOVLW  68
0529C:  MOVWF  x2E
0529E:  CLRF   x31
052A0:  MOVLW  40
052A2:  MOVWF  x30
052A4:  MOVLB  0
052A6:  CALL   3406
052AA:  MOVLB  1
052AC:  INCF   xA8,F
052AE:  BTFSC  FD8.2
052B0:  INCF   xA9,F
052B2:  MOVLB  0
052B4:  GOTO   517A
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
052B8:  MOVFF  161,266
052BC:  MOVLW  02
052BE:  MOVLB  2
052C0:  MOVWF  x67
052C2:  MOVLB  0
052C4:  CALL   3DC2
....................    fprintf(PC, "\r\n");
052C8:  MOVLW  0D
052CA:  MOVLB  A
052CC:  MOVWF  x29
052CE:  MOVLB  0
052D0:  CALL   1E60
052D4:  MOVLW  0A
052D6:  MOVLB  A
052D8:  MOVWF  x29
052DA:  MOVLB  0
052DC:  CALL   1E60
....................    fprintf(PC, "End Flash Write Demo\r\n");
052E0:  MOVLW  70
052E2:  MOVWF  FF6
052E4:  MOVLW  19
052E6:  MOVWF  FF7
052E8:  MOVLW  00
052EA:  MOVWF  FF8
052EC:  CALL   1EB2
052F0:  GOTO   8E80 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05324:  MOVLW  88
05326:  MOVWF  FF6
05328:  MOVLW  19
0532A:  MOVWF  FF7
0532C:  MOVLW  00
0532E:  MOVWF  FF8
05330:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05334:  MOVLB  1
05336:  MOVF   x5F,W
05338:  MOVWF  FE9
0533A:  MOVF   x60,W
0533C:  MOVWF  FEA
0533E:  MOVFF  FEF,265
05342:  MOVFF  265,266
05346:  MOVLW  01
05348:  MOVLB  2
0534A:  MOVWF  x67
0534C:  MOVLB  0
0534E:  CALL   3DC2
....................    flash_setting(mis_fm);
05352:  MOVFF  F1,26C
05356:  MOVFF  F0,26B
0535A:  MOVFF  EF,26A
0535E:  MOVFF  EE,269
05362:  CALL   52F4
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
05366:  MOVLB  1
05368:  CLRF   x64
0536A:  CLRF   x63
0536C:  CLRF   x62
0536E:  CLRF   x61
05370:  MOVLW  01
05372:  MOVWF  x65
05374:  MOVLW  02
05376:  MOVWF  x66
05378:  MOVLW  03
0537A:  MOVWF  x67
0537C:  MOVLW  04
0537E:  MOVWF  x68
05380:  CLRF   x69
05382:  CLRF   x6A
05384:  CLRF   x6B
05386:  CLRF   x6C
05388:  CLRF   x6D
0538A:  CLRF   x6E
0538C:  CLRF   x6F
0538E:  CLRF   x70
05390:  CLRF   x71
05392:  CLRF   x72
05394:  CLRF   x73
05396:  CLRF   x74
05398:  CLRF   x75
0539A:  CLRF   x76
0539C:  CLRF   x77
0539E:  CLRF   x78
053A0:  CLRF   x79
053A2:  CLRF   x7A
053A4:  CLRF   x7B
053A6:  CLRF   x7C
053A8:  CLRF   x7D
053AA:  CLRF   x7E
053AC:  CLRF   x7F
053AE:  CLRF   x80
053B0:  CLRF   x81
053B2:  CLRF   x82
053B4:  CLRF   x83
053B6:  CLRF   x84
053B8:  CLRF   x85
053BA:  CLRF   x86
053BC:  CLRF   x87
053BE:  CLRF   x88
053C0:  CLRF   x89
053C2:  CLRF   x8A
053C4:  CLRF   x8B
053C6:  CLRF   x8C
053C8:  CLRF   x8D
053CA:  CLRF   x8E
053CC:  CLRF   x8F
053CE:  CLRF   x90
053D0:  CLRF   x91
053D2:  CLRF   x92
053D4:  CLRF   x93
053D6:  CLRF   x94
053D8:  CLRF   x95
053DA:  CLRF   x96
053DC:  CLRF   x97
053DE:  CLRF   x98
053E0:  CLRF   x99
053E2:  CLRF   x9A
053E4:  CLRF   x9B
053E6:  CLRF   x9C
053E8:  CLRF   x9D
053EA:  CLRF   x9E
053EC:  CLRF   x9F
053EE:  CLRF   xA0
053F0:  CLRF   xA1
053F2:  CLRF   xA2
053F4:  CLRF   xA3
053F6:  CLRF   xA4
053F8:  CLRF   xA5
053FA:  CLRF   xA6
053FC:  CLRF   xA7
053FE:  CLRF   xA8
05400:  CLRF   xA9
05402:  CLRF   xAA
05404:  CLRF   xAB
05406:  CLRF   xAC
05408:  CLRF   xAD
0540A:  CLRF   xAE
0540C:  CLRF   xAF
0540E:  CLRF   xB0
05410:  CLRF   xB1
05412:  CLRF   xB2
05414:  CLRF   xB3
05416:  CLRF   xB4
05418:  CLRF   xB5
0541A:  CLRF   xB6
0541C:  CLRF   xB7
0541E:  CLRF   xB8
05420:  CLRF   xB9
05422:  CLRF   xBA
05424:  CLRF   xBB
05426:  CLRF   xBC
05428:  CLRF   xBD
0542A:  CLRF   xBE
0542C:  CLRF   xBF
0542E:  CLRF   xC0
05430:  CLRF   xC1
05432:  CLRF   xC2
05434:  CLRF   xC3
05436:  CLRF   xC4
05438:  CLRF   xC5
0543A:  CLRF   xC6
0543C:  CLRF   xC7
0543E:  CLRF   xC8
05440:  CLRF   xC9
05442:  CLRF   xCA
05444:  CLRF   xCB
05446:  CLRF   xCC
05448:  CLRF   xCD
0544A:  CLRF   xCE
0544C:  CLRF   xCF
0544E:  CLRF   xD0
05450:  CLRF   xD1
05452:  CLRF   xD2
05454:  CLRF   xD3
05456:  CLRF   xD4
05458:  CLRF   xD5
0545A:  CLRF   xD6
0545C:  CLRF   xD7
0545E:  CLRF   xD8
05460:  CLRF   xD9
05462:  CLRF   xDA
05464:  CLRF   xDB
05466:  CLRF   xDC
05468:  CLRF   xDD
0546A:  CLRF   xDE
0546C:  CLRF   xDF
0546E:  CLRF   xE0
05470:  CLRF   xE1
05472:  CLRF   xE2
05474:  CLRF   xE3
05476:  CLRF   xE4
05478:  CLRF   xE5
0547A:  CLRF   xE6
0547C:  CLRF   xE7
0547E:  CLRF   xE8
05480:  CLRF   xE9
05482:  CLRF   xEA
05484:  CLRF   xEB
05486:  CLRF   xEC
05488:  CLRF   xED
0548A:  CLRF   xEE
0548C:  CLRF   xEF
0548E:  CLRF   xF0
05490:  CLRF   xF1
05492:  CLRF   xF2
05494:  CLRF   xF3
05496:  CLRF   xF4
05498:  CLRF   xF5
0549A:  CLRF   xF6
0549C:  CLRF   xF7
0549E:  CLRF   xF8
054A0:  CLRF   xF9
054A2:  CLRF   xFA
054A4:  CLRF   xFB
054A6:  CLRF   xFC
054A8:  CLRF   xFD
054AA:  CLRF   xFE
054AC:  CLRF   xFF
054AE:  MOVLB  2
054B0:  CLRF   x00
054B2:  CLRF   x01
054B4:  CLRF   x02
054B6:  CLRF   x03
054B8:  CLRF   x04
054BA:  CLRF   x05
054BC:  CLRF   x06
054BE:  CLRF   x07
054C0:  CLRF   x08
054C2:  CLRF   x09
054C4:  CLRF   x0A
054C6:  CLRF   x0B
054C8:  CLRF   x0C
054CA:  CLRF   x0D
054CC:  CLRF   x0E
054CE:  CLRF   x0F
054D0:  CLRF   x10
054D2:  CLRF   x11
054D4:  CLRF   x12
054D6:  CLRF   x13
054D8:  CLRF   x14
054DA:  CLRF   x15
054DC:  CLRF   x16
054DE:  CLRF   x17
054E0:  CLRF   x18
054E2:  CLRF   x19
054E4:  CLRF   x1A
054E6:  CLRF   x1B
054E8:  CLRF   x1C
054EA:  CLRF   x1D
054EC:  CLRF   x1E
054EE:  CLRF   x1F
054F0:  CLRF   x20
054F2:  CLRF   x21
054F4:  CLRF   x22
054F6:  CLRF   x23
054F8:  CLRF   x24
054FA:  CLRF   x25
054FC:  CLRF   x26
054FE:  CLRF   x27
05500:  CLRF   x28
05502:  CLRF   x29
05504:  CLRF   x2A
05506:  CLRF   x2B
05508:  CLRF   x2C
0550A:  CLRF   x2D
0550C:  CLRF   x2E
0550E:  CLRF   x2F
05510:  CLRF   x30
05512:  CLRF   x31
05514:  CLRF   x32
05516:  CLRF   x33
05518:  CLRF   x34
0551A:  CLRF   x35
0551C:  CLRF   x36
0551E:  CLRF   x37
05520:  CLRF   x38
05522:  CLRF   x39
05524:  CLRF   x3A
05526:  CLRF   x3B
05528:  CLRF   x3C
0552A:  CLRF   x3D
0552C:  CLRF   x3E
0552E:  CLRF   x3F
05530:  CLRF   x40
05532:  CLRF   x41
05534:  CLRF   x42
05536:  CLRF   x43
05538:  CLRF   x44
0553A:  CLRF   x45
0553C:  CLRF   x46
0553E:  CLRF   x47
05540:  CLRF   x48
05542:  CLRF   x49
05544:  CLRF   x4A
05546:  CLRF   x4B
05548:  CLRF   x4C
0554A:  CLRF   x4D
0554C:  CLRF   x4E
0554E:  CLRF   x4F
05550:  CLRF   x50
05552:  CLRF   x51
05554:  CLRF   x52
05556:  CLRF   x53
05558:  CLRF   x54
0555A:  CLRF   x55
0555C:  CLRF   x56
0555E:  CLRF   x57
05560:  CLRF   x58
05562:  CLRF   x59
05564:  CLRF   x5A
05566:  CLRF   x5B
05568:  CLRF   x5C
0556A:  CLRF   x5D
0556C:  CLRF   x5E
0556E:  CLRF   x5F
05570:  CLRF   x60
05572:  CLRF   x61
05574:  CLRF   x62
05576:  CLRF   x63
05578:  CLRF   x64
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
0557A:  MOVFF  F1,A29
0557E:  MOVFF  F0,A28
05582:  MOVFF  EF,A27
05586:  MOVFF  EE,A26
0558A:  MOVFF  164,A2D
0558E:  MOVFF  163,A2C
05592:  MOVFF  162,A2B
05596:  MOVFF  161,A2A
0559A:  MOVLW  01
0559C:  MOVLB  A
0559E:  MOVWF  x2F
055A0:  MOVLW  65
055A2:  MOVWF  x2E
055A4:  MOVLW  01
055A6:  MOVWF  x31
055A8:  CLRF   x30
055AA:  MOVLB  0
055AC:  CALL   3406
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
055B0:  MOVLB  1
055B2:  MOVF   x5F,W
055B4:  MOVWF  FE9
055B6:  MOVF   x60,W
055B8:  MOVWF  FEA
055BA:  MOVFF  FEF,265
055BE:  MOVFF  265,266
055C2:  MOVLW  02
055C4:  MOVLB  2
055C6:  MOVWF  x67
055C8:  MOVLB  0
055CA:  CALL   3DC2
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
055CE:  MOVLW  AE
055D0:  MOVWF  FF6
055D2:  MOVLW  19
055D4:  MOVWF  FF7
055D6:  MOVLW  00
055D8:  MOVWF  FF8
055DA:  CALL   1EB2
055DE:  GOTO   8E90 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
055E2:  MOVLW  D2
055E4:  MOVWF  FF6
055E6:  MOVLW  19
055E8:  MOVWF  FF7
055EA:  MOVLW  00
055EC:  MOVWF  FF8
055EE:  CALL   1EB2
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
055F2:  MOVLB  1
055F4:  MOVF   x5F,W
055F6:  MOVWF  FE9
055F8:  MOVF   x60,W
055FA:  MOVWF  FEA
055FC:  MOVFF  FEF,1B1
05600:  MOVFF  1B1,266
05604:  MOVLW  01
05606:  MOVLB  2
05608:  MOVWF  x67
0560A:  MOVLB  0
0560C:  CALL   3DC2
....................    FLASH_PARAM flash_param = {0};
05610:  MOVLB  1
05612:  CLRF   x61
05614:  CLRF   x62
05616:  CLRF   x63
05618:  CLRF   x64
0561A:  CLRF   x65
0561C:  CLRF   x66
0561E:  CLRF   x67
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
05620:  MOVF   x5F,W
05622:  MOVWF  FE9
05624:  MOVF   x60,W
05626:  MOVWF  FEA
05628:  MOVFF  FEF,161
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
0562C:  MOVLW  01
0562E:  ADDWF  x5F,W
05630:  MOVWF  FE9
05632:  MOVLW  00
05634:  ADDWFC x60,W
05636:  MOVWF  FEA
05638:  MOVF   FEF,W
0563A:  CLRF   xB4
0563C:  CLRF   xB3
0563E:  CLRF   xB2
05640:  MOVWF  xB1
05642:  MOVFF  1B1,1B4
05646:  CLRF   xB1
05648:  CLRF   xB2
0564A:  CLRF   xB3
0564C:  MOVLW  02
0564E:  ADDWF  x5F,W
05650:  MOVWF  FE9
05652:  MOVLW  00
05654:  ADDWFC x60,W
05656:  MOVWF  FEA
05658:  MOVF   FEF,W
0565A:  CLRF   xB9
0565C:  CLRF   xB8
0565E:  CLRF   xB7
05660:  MOVWF  xB6
05662:  MOVFF  1B7,03
05666:  MOVFF  1B6,02
0566A:  CLRF   00
0566C:  CLRF   01
0566E:  MOVF   00,W
05670:  IORWF  xB1,F
05672:  MOVF   01,W
05674:  IORWF  xB2,F
05676:  MOVF   02,W
05678:  IORWF  xB3,F
0567A:  MOVF   03,W
0567C:  IORWF  xB4,F
0567E:  MOVLW  03
05680:  ADDWF  x5F,W
05682:  MOVWF  FE9
05684:  MOVLW  00
05686:  ADDWFC x60,W
05688:  MOVWF  FEA
0568A:  MOVF   FEF,W
0568C:  CLRF   xB9
0568E:  CLRF   xB8
05690:  CLRF   xB7
05692:  MOVWF  xB6
05694:  MOVFF  1B8,03
05698:  MOVFF  1B7,02
0569C:  MOVFF  1B6,01
056A0:  CLRF   00
056A2:  MOVF   00,W
056A4:  IORWF  xB1,F
056A6:  MOVF   01,W
056A8:  IORWF  xB2,F
056AA:  MOVF   02,W
056AC:  IORWF  xB3,F
056AE:  MOVF   03,W
056B0:  IORWF  xB4,F
056B2:  MOVLW  04
056B4:  ADDWF  x5F,W
056B6:  MOVWF  FE9
056B8:  MOVLW  00
056BA:  ADDWFC x60,W
056BC:  MOVWF  FEA
056BE:  MOVF   FEF,W
056C0:  MOVWF  00
056C2:  CLRF   01
056C4:  CLRF   02
056C6:  CLRF   03
056C8:  MOVF   00,W
056CA:  IORWF  xB1,W
056CC:  MOVWF  x64
056CE:  MOVF   01,W
056D0:  IORWF  xB2,W
056D2:  MOVWF  x65
056D4:  MOVF   02,W
056D6:  IORWF  xB3,W
056D8:  MOVWF  x66
056DA:  MOVF   03,W
056DC:  IORWF  xB4,W
056DE:  MOVWF  x67
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
056E0:  MOVLW  07
056E2:  ADDWF  x5F,W
056E4:  MOVWF  FE9
056E6:  MOVLW  00
056E8:  ADDWFC x60,W
056EA:  MOVWF  FEA
056EC:  MOVF   FEF,W
056EE:  CLRF   xB2
056F0:  MOVWF  xB1
056F2:  MOVFF  1B1,1B2
056F6:  CLRF   xB1
056F8:  MOVLW  08
056FA:  ADDWF  x5F,W
056FC:  MOVWF  FE9
056FE:  MOVLW  00
05700:  ADDWFC x60,W
05702:  MOVWF  FEA
05704:  MOVF   FEF,W
05706:  CLRF   03
05708:  IORWF  xB1,W
0570A:  MOVWF  x62
0570C:  MOVF   03,W
0570E:  IORWF  xB2,W
05710:  MOVWF  x63
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
05712:  MOVLW  E6
05714:  MOVWF  FF6
05716:  MOVLW  19
05718:  MOVWF  FF7
0571A:  MOVLW  00
0571C:  MOVWF  FF8
0571E:  MOVLW  0C
05720:  MOVLB  9
05722:  MOVWF  x96
05724:  MOVLB  0
05726:  CALL   1EE2
0572A:  MOVFF  161,996
0572E:  MOVLW  37
05730:  MOVLB  9
05732:  MOVWF  x97
05734:  MOVLB  0
05736:  CALL   20E0
0573A:  MOVLW  0D
0573C:  MOVLB  A
0573E:  MOVWF  x29
05740:  MOVLB  0
05742:  CALL   1E60
05746:  MOVLW  0A
05748:  MOVLB  A
0574A:  MOVWF  x29
0574C:  MOVLB  0
0574E:  CALL   1E60
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
05752:  MOVLW  FA
05754:  MOVWF  FF6
05756:  MOVLW  19
05758:  MOVWF  FF7
0575A:  MOVLW  00
0575C:  MOVWF  FF8
0575E:  MOVLW  0E
05760:  MOVLB  9
05762:  MOVWF  x96
05764:  MOVLB  0
05766:  CALL   1EE2
0576A:  MOVFF  167,996
0576E:  MOVLW  37
05770:  MOVLB  9
05772:  MOVWF  x97
05774:  MOVLB  0
05776:  CALL   20E0
0577A:  MOVFF  166,996
0577E:  MOVLW  37
05780:  MOVLB  9
05782:  MOVWF  x97
05784:  MOVLB  0
05786:  CALL   20E0
0578A:  MOVFF  165,996
0578E:  MOVLW  37
05790:  MOVLB  9
05792:  MOVWF  x97
05794:  MOVLB  0
05796:  CALL   20E0
0579A:  MOVFF  164,996
0579E:  MOVLW  37
057A0:  MOVLB  9
057A2:  MOVWF  x97
057A4:  MOVLB  0
057A6:  CALL   20E0
057AA:  MOVLW  0D
057AC:  MOVLB  A
057AE:  MOVWF  x29
057B0:  MOVLB  0
057B2:  CALL   1E60
057B6:  MOVLW  0A
057B8:  MOVLB  A
057BA:  MOVWF  x29
057BC:  MOVLB  0
057BE:  CALL   1E60
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
057C2:  MOVLW  10
057C4:  MOVWF  FF6
057C6:  MOVLW  1A
057C8:  MOVWF  FF7
057CA:  MOVLW  00
057CC:  MOVWF  FF8
057CE:  MOVLW  0E
057D0:  MOVLB  9
057D2:  MOVWF  x96
057D4:  MOVLB  0
057D6:  CALL   1EE2
057DA:  MOVFF  163,996
057DE:  MOVLW  37
057E0:  MOVLB  9
057E2:  MOVWF  x97
057E4:  MOVLB  0
057E6:  CALL   20E0
057EA:  MOVFF  162,996
057EE:  MOVLW  37
057F0:  MOVLB  9
057F2:  MOVWF  x97
057F4:  MOVLB  0
057F6:  CALL   20E0
057FA:  MOVLW  0D
057FC:  MOVLB  A
057FE:  MOVWF  x29
05800:  MOVLB  0
05802:  CALL   1E60
05806:  MOVLW  0A
05808:  MOVLB  A
0580A:  MOVWF  x29
0580C:  MOVLB  0
0580E:  CALL   1E60
....................    
....................    piclog_make(flash_param.id, 0x00);
05812:  MOVFF  161,266
05816:  MOVLB  2
05818:  CLRF   x67
0581A:  MOVLB  0
0581C:  CALL   3DC2
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
05820:  MOVLB  1
05822:  CLRF   x68
05824:  CLRF   x69
05826:  CLRF   x6A
05828:  CLRF   x6B
0582A:  CLRF   x6C
0582C:  CLRF   x6D
0582E:  CLRF   x6E
05830:  CLRF   x6F
05832:  CLRF   x70
05834:  CLRF   x71
05836:  CLRF   x72
05838:  CLRF   x73
0583A:  CLRF   x74
0583C:  CLRF   x75
0583E:  CLRF   x76
05840:  CLRF   x77
05842:  CLRF   x78
05844:  CLRF   x79
05846:  CLRF   x7A
05848:  CLRF   x7B
0584A:  CLRF   x7C
0584C:  CLRF   x7D
0584E:  CLRF   x7E
05850:  CLRF   x7F
05852:  CLRF   x80
05854:  CLRF   x81
05856:  CLRF   x82
05858:  CLRF   x83
0585A:  CLRF   x84
0585C:  CLRF   x85
0585E:  CLRF   x86
05860:  CLRF   x87
05862:  CLRF   x88
05864:  CLRF   x89
05866:  CLRF   x8A
05868:  CLRF   x8B
0586A:  CLRF   x8C
0586C:  CLRF   x8D
0586E:  CLRF   x8E
05870:  CLRF   x8F
05872:  CLRF   x90
05874:  CLRF   x91
05876:  CLRF   x92
05878:  CLRF   x93
0587A:  CLRF   x94
0587C:  CLRF   x95
0587E:  CLRF   x96
05880:  CLRF   x97
05882:  CLRF   x98
05884:  CLRF   x99
05886:  CLRF   x9A
05888:  CLRF   x9B
0588A:  CLRF   x9C
0588C:  CLRF   x9D
0588E:  CLRF   x9E
05890:  CLRF   x9F
05892:  CLRF   xA0
05894:  CLRF   xA1
05896:  CLRF   xA2
05898:  CLRF   xA3
0589A:  CLRF   xA4
0589C:  CLRF   xA5
0589E:  CLRF   xA6
058A0:  CLRF   xA7
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
058A2:  MOVLW  26
058A4:  MOVWF  FF6
058A6:  MOVLW  1A
058A8:  MOVWF  FF7
058AA:  MOVLW  00
058AC:  MOVWF  FF8
058AE:  MOVLB  0
058B0:  CALL   1EB2
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
058B4:  MOVFF  F1,A29
058B8:  MOVFF  F0,A28
058BC:  MOVFF  EF,A27
058C0:  MOVFF  EE,A26
058C4:  CALL   254C
058C8:  MOVF   01,F
058CA:  BTFSS  FD8.2
058CC:  GOTO   58E0
....................       fprintf(PC, "Mission Flash is not connected\r\n");
058D0:  MOVLW  32
058D2:  MOVWF  FF6
058D4:  MOVLW  1A
058D6:  MOVWF  FF7
058D8:  MOVLW  00
058DA:  MOVWF  FF8
058DC:  CALL   1EB2
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
058E0:  MOVLB  1
058E2:  CLRF   xAF
058E4:  CLRF   xAE
058E6:  CLRF   xAD
058E8:  CLRF   xAC
058EA:  MOVLB  0
058EC:  MOVLB  1
058EE:  MOVF   xAF,F
058F0:  BTFSC  FD8.2
058F2:  BRA    58FA
058F4:  MOVLB  0
058F6:  GOTO   5A48
058FA:  MOVLB  0
058FC:  MOVLB  1
058FE:  MOVF   xAE,F
05900:  BTFSC  FD8.2
05902:  BRA    590A
05904:  MOVLB  0
05906:  GOTO   5A48
0590A:  MOVLB  0
0590C:  MOVLB  1
0590E:  MOVF   xAD,W
05910:  SUBWF  x63,W
05912:  BTFSC  FD8.0
05914:  BRA    591C
05916:  MOVLB  0
05918:  GOTO   5A48
0591C:  MOVLB  0
0591E:  BTFSS  FD8.2
05920:  GOTO   5936
05924:  MOVLB  1
05926:  MOVF   x62,W
05928:  SUBWF  xAC,W
0592A:  BTFSS  FD8.0
0592C:  BRA    5934
0592E:  MOVLB  0
05930:  GOTO   5A48
05934:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
05936:  MOVLB  1
05938:  RLCF   xAC,W
0593A:  MOVWF  00
0593C:  RLCF   xAD,W
0593E:  MOVWF  01
05940:  RLCF   xAE,W
05942:  MOVWF  02
05944:  RLCF   xAF,W
05946:  MOVWF  03
05948:  RLCF   00,F
0594A:  RLCF   01,F
0594C:  RLCF   02,F
0594E:  RLCF   03,F
05950:  RLCF   00,F
05952:  RLCF   01,F
05954:  RLCF   02,F
05956:  RLCF   03,F
05958:  RLCF   00,F
0595A:  RLCF   01,F
0595C:  RLCF   02,F
0595E:  RLCF   03,F
05960:  RLCF   00,F
05962:  RLCF   01,F
05964:  RLCF   02,F
05966:  RLCF   03,F
05968:  RLCF   00,F
0596A:  RLCF   01,F
0596C:  RLCF   02,F
0596E:  RLCF   03,F
05970:  MOVLW  C0
05972:  ANDWF  00,F
05974:  MOVF   00,W
05976:  ADDWF  x64,W
05978:  MOVWF  xA8
0597A:  MOVF   01,W
0597C:  ADDWFC x65,W
0597E:  MOVWF  xA9
05980:  MOVF   02,W
05982:  ADDWFC x66,W
05984:  MOVWF  xAA
05986:  MOVF   03,W
05988:  ADDWFC x67,W
0598A:  MOVWF  xAB
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
0598C:  MOVFF  F1,270
05990:  MOVFF  F0,26F
05994:  MOVFF  EF,26E
05998:  MOVFF  EE,26D
0599C:  MOVFF  1AB,274
059A0:  MOVFF  1AA,273
059A4:  MOVFF  1A9,272
059A8:  MOVFF  1A8,271
059AC:  MOVLW  01
059AE:  MOVLB  2
059B0:  MOVWF  x76
059B2:  MOVLW  68
059B4:  MOVWF  x75
059B6:  CLRF   x7A
059B8:  CLRF   x79
059BA:  CLRF   x78
059BC:  MOVLW  40
059BE:  MOVWF  x77
059C0:  MOVLB  0
059C2:  CALL   2612
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
059C6:  MOVLB  1
059C8:  CLRF   xB0
059CA:  MOVLB  0
059CC:  MOVLB  1
059CE:  MOVF   xB0,W
059D0:  SUBLW  3F
059D2:  BTFSC  FD8.0
059D4:  BRA    59DC
059D6:  MOVLB  0
059D8:  GOTO   5A18
059DC:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
059DE:  CLRF   03
059E0:  MOVLB  1
059E2:  MOVF   xB0,W
059E4:  ADDLW  68
059E6:  MOVWF  FE9
059E8:  MOVLW  01
059EA:  ADDWFC 03,W
059EC:  MOVWF  FEA
059EE:  MOVFF  FEF,1B1
059F2:  MOVFF  1B1,996
059F6:  MOVLW  37
059F8:  MOVLB  9
059FA:  MOVWF  x97
059FC:  MOVLB  0
059FE:  CALL   20E0
05A02:  MOVLW  20
05A04:  MOVLB  A
05A06:  MOVWF  x29
05A08:  MOVLB  0
05A0A:  CALL   1E60
05A0E:  MOVLB  1
05A10:  INCF   xB0,F
05A12:  MOVLB  0
05A14:  GOTO   59CC
....................       }
....................       fprintf(PC,"\r\n");
05A18:  MOVLW  0D
05A1A:  MOVLB  A
05A1C:  MOVWF  x29
05A1E:  MOVLB  0
05A20:  CALL   1E60
05A24:  MOVLW  0A
05A26:  MOVLB  A
05A28:  MOVWF  x29
05A2A:  MOVLB  0
05A2C:  CALL   1E60
05A30:  MOVLW  01
05A32:  MOVLB  1
05A34:  ADDWF  xAC,F
05A36:  BTFSC  FD8.0
05A38:  INCF   xAD,F
05A3A:  BTFSC  FD8.2
05A3C:  INCF   xAE,F
05A3E:  BTFSC  FD8.2
05A40:  INCF   xAF,F
05A42:  MOVLB  0
05A44:  GOTO   58EC
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05A48:  MOVFF  161,266
05A4C:  MOVLW  02
05A4E:  MOVLB  2
05A50:  MOVWF  x67
05A52:  MOVLB  0
05A54:  CALL   3DC2
....................    fprintf(PC, "End Flash Read\r\n");
05A58:  MOVLW  54
05A5A:  MOVWF  FF6
05A5C:  MOVLW  1A
05A5E:  MOVWF  FF7
05A60:  MOVLW  00
05A62:  MOVWF  FF8
05A64:  CALL   1EB2
05A68:  GOTO   8EA0 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
05A6C:  MOVLW  66
05A6E:  MOVWF  FF6
05A70:  MOVLW  1A
05A72:  MOVWF  FF7
05A74:  MOVLW  00
05A76:  MOVWF  FF8
05A78:  CALL   1EB2
....................    flash_setting(mis_fm);
05A7C:  MOVFF  F1,26C
05A80:  MOVFF  F0,26B
05A84:  MOVFF  EF,26A
05A88:  MOVFF  EE,269
05A8C:  CALL   52F4
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
05A90:  MOVLB  1
05A92:  CLRF   x64
05A94:  CLRF   x63
05A96:  CLRF   x62
05A98:  CLRF   x61
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
05A9A:  MOVFF  F1,270
05A9E:  MOVFF  F0,26F
05AA2:  MOVFF  EF,26E
05AA6:  MOVFF  EE,26D
05AAA:  MOVFF  164,274
05AAE:  MOVFF  163,273
05AB2:  MOVFF  162,272
05AB6:  MOVFF  161,271
05ABA:  MOVLW  01
05ABC:  MOVLB  2
05ABE:  MOVWF  x76
05AC0:  MOVLW  65
05AC2:  MOVWF  x75
05AC4:  CLRF   x7A
05AC6:  CLRF   x79
05AC8:  CLRF   x78
05ACA:  MOVLW  04
05ACC:  MOVWF  x77
05ACE:  MOVLB  0
05AD0:  CALL   2612
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
05AD4:  MOVLW  82
05AD6:  MOVWF  FF6
05AD8:  MOVLW  1A
05ADA:  MOVWF  FF7
05ADC:  MOVLW  00
05ADE:  MOVWF  FF8
05AE0:  MOVLW  0B
05AE2:  MOVLB  9
05AE4:  MOVWF  x96
05AE6:  MOVLB  0
05AE8:  CALL   1EE2
05AEC:  MOVFF  165,996
05AF0:  MOVLW  37
05AF2:  MOVLB  9
05AF4:  MOVWF  x97
05AF6:  MOVLB  0
05AF8:  CALL   20E0
05AFC:  MOVLW  20
05AFE:  MOVLB  A
05B00:  MOVWF  x29
05B02:  MOVLB  0
05B04:  CALL   1E60
05B08:  MOVFF  166,996
05B0C:  MOVLW  37
05B0E:  MOVLB  9
05B10:  MOVWF  x97
05B12:  MOVLB  0
05B14:  CALL   20E0
05B18:  MOVLW  20
05B1A:  MOVLB  A
05B1C:  MOVWF  x29
05B1E:  MOVLB  0
05B20:  CALL   1E60
05B24:  MOVFF  167,996
05B28:  MOVLW  37
05B2A:  MOVLB  9
05B2C:  MOVWF  x97
05B2E:  MOVLB  0
05B30:  CALL   20E0
05B34:  MOVLW  20
05B36:  MOVLB  A
05B38:  MOVWF  x29
05B3A:  MOVLB  0
05B3C:  CALL   1E60
05B40:  MOVFF  168,996
05B44:  MOVLW  37
05B46:  MOVLB  9
05B48:  MOVWF  x97
05B4A:  MOVLB  0
05B4C:  CALL   20E0
05B50:  MOVLW  0D
05B52:  MOVLB  A
05B54:  MOVWF  x29
05B56:  MOVLB  0
05B58:  CALL   1E60
05B5C:  MOVLW  0A
05B5E:  MOVLB  A
05B60:  MOVWF  x29
05B62:  MOVLB  0
05B64:  CALL   1E60
....................    fprintf(PC, "End Flash Read Address\r\n");
05B68:  MOVLW  A4
05B6A:  MOVWF  FF6
05B6C:  MOVLW  1A
05B6E:  MOVWF  FF7
05B70:  MOVLW  00
05B72:  MOVWF  FF8
05B74:  CALL   1EB2
05B78:  GOTO   8EB0 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
05C90:  MOVLW  BE
05C92:  MOVWF  FF6
05C94:  MOVLW  1A
05C96:  MOVWF  FF7
05C98:  MOVLW  00
05C9A:  MOVWF  FF8
05C9C:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05CA0:  MOVLB  1
05CA2:  MOVF   x5F,W
05CA4:  MOVWF  FE9
05CA6:  MOVF   x60,W
05CA8:  MOVWF  FEA
05CAA:  MOVFF  FEF,161
05CAE:  MOVFF  161,266
05CB2:  MOVLW  01
05CB4:  MOVLB  2
05CB6:  MOVWF  x67
05CB8:  MOVLB  0
05CBA:  CALL   3DC2
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
05CBE:  MOVFF  160,162
05CC2:  MOVFF  15F,161
05CC6:  CALL   49B6
....................    mode_misf_address_reset(parameter); // Reset the address area
05CCA:  MOVFF  160,162
05CCE:  MOVFF  15F,161
05CD2:  GOTO   5B7C
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
05CD6:  MOVLW  DC
05CD8:  MOVWF  FF6
05CDA:  MOVLW  1A
05CDC:  MOVWF  FF7
05CDE:  MOVLW  00
05CE0:  MOVWF  FF8
05CE2:  CALL   1EB2
05CE6:  GOTO   8EC0 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
05CEA:  MOVLW  2E
05CEC:  MOVWF  FF6
05CEE:  MOVLW  1B
05CF0:  MOVWF  FF7
05CF2:  MOVLW  00
05CF4:  MOVWF  FF8
05CF6:  CALL   1EB2
....................    flash_setting(mis_fm);
05CFA:  MOVFF  F1,26C
05CFE:  MOVFF  F0,26B
05D02:  MOVFF  EF,26A
05D06:  MOVFF  EE,269
05D0A:  CALL   52F4
....................    flash_setting(smf);
05D0E:  MOVFF  F5,26C
05D12:  MOVFF  F4,26B
05D16:  MOVFF  F3,26A
05D1A:  MOVFF  F2,269
05D1E:  CALL   52F4
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
05D22:  MOVLB  1
05D24:  CLRF   x64
05D26:  CLRF   x63
05D28:  CLRF   x62
05D2A:  CLRF   x61
05D2C:  CLRF   x68
05D2E:  CLRF   x67
05D30:  MOVLW  10
05D32:  MOVWF  x66
05D34:  CLRF   x65
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
05D36:  MOVFF  F1,270
05D3A:  MOVFF  F0,26F
05D3E:  MOVFF  EF,26E
05D42:  MOVFF  EE,26D
05D46:  MOVFF  164,274
05D4A:  MOVFF  163,273
05D4E:  MOVFF  162,272
05D52:  MOVFF  161,271
05D56:  MOVLW  01
05D58:  MOVLB  2
05D5A:  MOVWF  x76
05D5C:  MOVLW  69
05D5E:  MOVWF  x75
05D60:  CLRF   x7A
05D62:  CLRF   x79
05D64:  MOVLW  01
05D66:  MOVWF  x78
05D68:  CLRF   x77
05D6A:  MOVLB  0
05D6C:  CALL   2612
....................    write_data_bytes(smf, dest_address, read_data, 256);
05D70:  MOVFF  F5,A29
05D74:  MOVFF  F4,A28
05D78:  MOVFF  F3,A27
05D7C:  MOVFF  F2,A26
05D80:  MOVFF  168,A2D
05D84:  MOVFF  167,A2C
05D88:  MOVFF  166,A2B
05D8C:  MOVFF  165,A2A
05D90:  MOVLW  01
05D92:  MOVLB  A
05D94:  MOVWF  x2F
05D96:  MOVLW  69
05D98:  MOVWF  x2E
05D9A:  MOVLW  01
05D9C:  MOVWF  x31
05D9E:  CLRF   x30
05DA0:  MOVLB  0
05DA2:  CALL   3406
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
05DA6:  MOVLW  46
05DA8:  MOVWF  FF6
05DAA:  MOVLW  1B
05DAC:  MOVWF  FF7
05DAE:  MOVLW  00
05DB0:  MOVWF  FF8
05DB2:  CALL   1EB2
05DB6:  GOTO   8ED0 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
05DBA:  MOVLW  5C
05DBC:  MOVWF  FF6
05DBE:  MOVLW  1B
05DC0:  MOVWF  FF7
05DC2:  MOVLW  00
05DC4:  MOVWF  FF8
05DC6:  CALL   1EB2
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
05DCA:  MOVLW  74
05DCC:  MOVWF  FF6
05DCE:  MOVLW  1B
05DD0:  MOVWF  FF7
05DD2:  MOVLW  00
05DD4:  MOVWF  FF8
05DD6:  CALL   1EB2
....................    for (int i = 0; i < 256; i++)
05DDA:  MOVLB  2
05DDC:  CLRF   x61
05DDE:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
05DE0:  CLRF   03
05DE2:  MOVLB  2
05DE4:  MOVF   x61,W
05DE6:  ADDLW  61
05DE8:  MOVWF  FE9
05DEA:  MOVLW  01
05DEC:  ADDWFC 03,W
05DEE:  MOVWF  FEA
05DF0:  MOVFF  FEF,262
05DF4:  MOVFF  262,996
05DF8:  MOVLW  37
05DFA:  MOVLB  9
05DFC:  MOVWF  x97
05DFE:  MOVLB  0
05E00:  CALL   20E0
05E04:  MOVLW  20
05E06:  MOVLB  A
05E08:  MOVWF  x29
05E0A:  MOVLB  0
05E0C:  CALL   1E60
05E10:  MOVLB  2
05E12:  INCF   x61,F
05E14:  MOVLB  0
05E16:  GOTO   5DE0
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
05E1A:  MOVLW  80
05E1C:  MOVWF  FF6
05E1E:  MOVLW  1B
05E20:  MOVWF  FF7
05E22:  MOVLW  00
05E24:  MOVWF  FF8
05E26:  CALL   1EB2
05E2A:  GOTO   8EE0 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
05E2E:  MOVLW  98
05E30:  MOVWF  FF6
05E32:  MOVLW  1B
05E34:  MOVWF  FF7
05E36:  MOVLW  00
05E38:  MOVWF  FF8
05E3A:  CALL   1EB2
....................    flash_setting(smf);
05E3E:  MOVFF  F5,26C
05E42:  MOVFF  F4,26B
05E46:  MOVFF  F3,26A
05E4A:  MOVFF  F2,269
05E4E:  CALL   52F4
....................    unsigned int32 erase_address = 0x00000000; // Example address
05E52:  MOVLB  1
05E54:  CLRF   x64
05E56:  CLRF   x63
05E58:  CLRF   x62
05E5A:  CLRF   x61
....................    sector_erase(smf, erase_address); // Erase the sector
05E5C:  MOVFF  F5,1A8
05E60:  MOVFF  F4,1A7
05E64:  MOVFF  F3,1A6
05E68:  MOVFF  F2,1A5
05E6C:  MOVFF  164,1AC
05E70:  MOVFF  163,1AB
05E74:  MOVFF  162,1AA
05E78:  MOVFF  161,1A9
05E7C:  MOVLB  0
05E7E:  CALL   465A
....................    fprintf(PC, "End Flash SMF Erase\r\n");
05E82:  MOVLW  B0
05E84:  MOVWF  FF6
05E86:  MOVLW  1B
05E88:  MOVWF  FF7
05E8A:  MOVLW  00
05E8C:  MOVWF  FF8
05E8E:  CALL   1EB2
05E92:  GOTO   8EF0 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
05B7C:  MOVLW  C6
05B7E:  MOVWF  FF6
05B80:  MOVLW  1B
05B82:  MOVWF  FF7
05B84:  MOVLW  00
05B86:  MOVWF  FF8
05B88:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05B8C:  MOVLB  1
05B8E:  MOVF   x61,W
05B90:  MOVWF  FE9
05B92:  MOVF   x62,W
05B94:  MOVWF  FEA
05B96:  MOVFF  FEF,1A3
05B9A:  MOVFF  1A3,266
05B9E:  MOVLW  01
05BA0:  MOVLB  2
05BA2:  MOVWF  x67
05BA4:  MOVLB  0
05BA6:  CALL   3DC2
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05BAA:  MOVLB  1
05BAC:  CLRF   x63
05BAE:  CLRF   x64
05BB0:  CLRF   x65
05BB2:  CLRF   x66
05BB4:  CLRF   x67
05BB6:  CLRF   x68
05BB8:  CLRF   x69
05BBA:  CLRF   x6A
05BBC:  CLRF   x6B
05BBE:  CLRF   x6C
05BC0:  CLRF   x6D
05BC2:  CLRF   x6E
05BC4:  CLRF   x6F
05BC6:  CLRF   x70
05BC8:  CLRF   x71
05BCA:  CLRF   x72
05BCC:  CLRF   x73
05BCE:  CLRF   x74
05BD0:  CLRF   x75
05BD2:  CLRF   x76
05BD4:  CLRF   x77
05BD6:  CLRF   x78
05BD8:  CLRF   x79
05BDA:  CLRF   x7A
05BDC:  CLRF   x7B
05BDE:  CLRF   x7C
05BE0:  CLRF   x7D
05BE2:  CLRF   x7E
05BE4:  CLRF   x7F
05BE6:  CLRF   x80
05BE8:  CLRF   x81
05BEA:  CLRF   x82
05BEC:  CLRF   x83
05BEE:  CLRF   x84
05BF0:  CLRF   x85
05BF2:  CLRF   x86
05BF4:  CLRF   x87
05BF6:  CLRF   x88
05BF8:  CLRF   x89
05BFA:  CLRF   x8A
05BFC:  CLRF   x8B
05BFE:  CLRF   x8C
05C00:  CLRF   x8D
05C02:  CLRF   x8E
05C04:  CLRF   x8F
05C06:  CLRF   x90
05C08:  CLRF   x91
05C0A:  CLRF   x92
05C0C:  CLRF   x93
05C0E:  CLRF   x94
05C10:  CLRF   x95
05C12:  CLRF   x96
05C14:  CLRF   x97
05C16:  CLRF   x98
05C18:  CLRF   x99
05C1A:  CLRF   x9A
05C1C:  CLRF   x9B
05C1E:  CLRF   x9C
05C20:  CLRF   x9D
05C22:  CLRF   x9E
05C24:  CLRF   x9F
05C26:  CLRF   xA0
05C28:  CLRF   xA1
05C2A:  CLRF   xA2
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
05C2C:  MOVFF  F1,A29
05C30:  MOVFF  F0,A28
05C34:  MOVFF  EF,A27
05C38:  MOVFF  EE,A26
05C3C:  MOVLB  A
05C3E:  CLRF   x2D
05C40:  CLRF   x2C
05C42:  CLRF   x2B
05C44:  CLRF   x2A
05C46:  MOVLW  01
05C48:  MOVWF  x2F
05C4A:  MOVLW  63
05C4C:  MOVWF  x2E
05C4E:  CLRF   x31
05C50:  MOVLW  40
05C52:  MOVWF  x30
05C54:  MOVLB  0
05C56:  CALL   3406
....................    misf_init(); // Update the address area after writing
05C5A:  CALL   28F8
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05C5E:  MOVLB  1
05C60:  MOVF   x61,W
05C62:  MOVWF  FE9
05C64:  MOVF   x62,W
05C66:  MOVWF  FEA
05C68:  MOVFF  FEF,1A3
05C6C:  MOVFF  1A3,266
05C70:  MOVLW  02
05C72:  MOVLB  2
05C74:  MOVWF  x67
05C76:  MOVLB  0
05C78:  CALL   3DC2
....................    fprintf(PC, "End Flash Address Reset\r\n");
05C7C:  MOVLW  E2
05C7E:  MOVWF  FF6
05C80:  MOVLW  1B
05C82:  MOVWF  FF7
05C84:  MOVLW  00
05C86:  MOVWF  FF8
05C88:  CALL   1EB2
05C8C:  GOTO   5CD6 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
0604C:  MOVLW  01
0604E:  MOVLB  1
06050:  ADDWF  x5F,W
06052:  MOVWF  FE9
06054:  MOVLW  00
06056:  ADDWFC x60,W
06058:  MOVWF  FEA
0605A:  MOVF   FEF,W
0605C:  CLRF   xB1
0605E:  CLRF   xB0
06060:  CLRF   xAF
06062:  MOVWF  xAE
06064:  MOVFF  1AE,1B1
06068:  CLRF   xAE
0606A:  CLRF   xAF
0606C:  CLRF   xB0
0606E:  MOVLW  02
06070:  ADDWF  x5F,W
06072:  MOVWF  FE9
06074:  MOVLW  00
06076:  ADDWFC x60,W
06078:  MOVWF  FEA
0607A:  MOVF   FEF,W
0607C:  CLRF   xB6
0607E:  CLRF   xB5
06080:  CLRF   xB4
06082:  MOVWF  xB3
06084:  MOVFF  1B4,03
06088:  MOVFF  1B3,02
0608C:  CLRF   00
0608E:  CLRF   01
06090:  MOVF   00,W
06092:  IORWF  xAE,F
06094:  MOVF   01,W
06096:  IORWF  xAF,F
06098:  MOVF   02,W
0609A:  IORWF  xB0,F
0609C:  MOVF   03,W
0609E:  IORWF  xB1,F
060A0:  MOVLW  03
060A2:  ADDWF  x5F,W
060A4:  MOVWF  FE9
060A6:  MOVLW  00
060A8:  ADDWFC x60,W
060AA:  MOVWF  FEA
060AC:  MOVF   FEF,W
060AE:  CLRF   xB6
060B0:  CLRF   xB5
060B2:  CLRF   xB4
060B4:  MOVWF  xB3
060B6:  MOVFF  1B5,03
060BA:  MOVFF  1B4,02
060BE:  MOVFF  1B3,01
060C2:  CLRF   00
060C4:  MOVF   00,W
060C6:  IORWF  xAE,F
060C8:  MOVF   01,W
060CA:  IORWF  xAF,F
060CC:  MOVF   02,W
060CE:  IORWF  xB0,F
060D0:  MOVF   03,W
060D2:  IORWF  xB1,F
060D4:  MOVLW  04
060D6:  ADDWF  x5F,W
060D8:  MOVWF  FE9
060DA:  MOVLW  00
060DC:  ADDWFC x60,W
060DE:  MOVWF  FEA
060E0:  MOVF   FEF,W
060E2:  MOVWF  00
060E4:  CLRF   01
060E6:  CLRF   02
060E8:  CLRF   03
060EA:  MOVF   00,W
060EC:  IORWF  xAE,W
060EE:  MOVWF  x61
060F0:  MOVF   01,W
060F2:  IORWF  xAF,W
060F4:  MOVWF  x62
060F6:  MOVF   02,W
060F8:  IORWF  xB0,W
060FA:  MOVWF  x63
060FC:  MOVF   03,W
060FE:  IORWF  xB1,W
06100:  MOVWF  x64
06102:  MOVLW  07
06104:  ADDWF  x5F,W
06106:  MOVWF  FE9
06108:  MOVLW  00
0610A:  ADDWFC x60,W
0610C:  MOVWF  FEA
0610E:  MOVF   FEF,W
06110:  CLRF   xAF
06112:  MOVWF  xAE
06114:  MOVFF  1AE,1AF
06118:  CLRF   xAE
0611A:  MOVLW  08
0611C:  ADDWF  x5F,W
0611E:  MOVWF  FE9
06120:  MOVLW  00
06122:  ADDWFC x60,W
06124:  MOVWF  FEA
06126:  MOVF   FEF,W
06128:  CLRF   03
0612A:  IORWF  xAE,W
0612C:  MOVWF  x65
0612E:  MOVF   03,W
06130:  IORWF  xAF,W
06132:  MOVWF  x66
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06134:  CLRF   x67
06136:  CLRF   x68
06138:  CLRF   x69
0613A:  CLRF   x6A
0613C:  CLRF   x6B
0613E:  CLRF   x6C
06140:  CLRF   x6D
06142:  CLRF   x6E
06144:  CLRF   x6F
06146:  CLRF   x70
06148:  CLRF   x71
0614A:  CLRF   x72
0614C:  CLRF   x73
0614E:  CLRF   x74
06150:  CLRF   x75
06152:  CLRF   x76
06154:  CLRF   x77
06156:  CLRF   x78
06158:  CLRF   x79
0615A:  CLRF   x7A
0615C:  CLRF   x7B
0615E:  CLRF   x7C
06160:  CLRF   x7D
06162:  CLRF   x7E
06164:  CLRF   x7F
06166:  CLRF   x80
06168:  CLRF   x81
0616A:  CLRF   x82
0616C:  CLRF   x83
0616E:  CLRF   x84
06170:  CLRF   x85
06172:  CLRF   x86
06174:  CLRF   x87
06176:  CLRF   x88
06178:  CLRF   x89
0617A:  CLRF   x8A
0617C:  CLRF   x8B
0617E:  CLRF   x8C
06180:  CLRF   x8D
06182:  CLRF   x8E
06184:  CLRF   x8F
06186:  CLRF   x90
06188:  CLRF   x91
0618A:  CLRF   x92
0618C:  CLRF   x93
0618E:  CLRF   x94
06190:  CLRF   x95
06192:  CLRF   x96
06194:  CLRF   x97
06196:  CLRF   x98
06198:  CLRF   x99
0619A:  CLRF   x9A
0619C:  CLRF   x9B
0619E:  CLRF   x9C
061A0:  CLRF   x9D
061A2:  CLRF   x9E
061A4:  CLRF   x9F
061A6:  CLRF   xA0
061A8:  CLRF   xA1
061AA:  CLRF   xA2
061AC:  CLRF   xA3
061AE:  CLRF   xA4
061B0:  CLRF   xA5
061B2:  CLRF   xA6
....................    if(!is_connect(smf)) {
061B4:  MOVFF  F5,A29
061B8:  MOVFF  F4,A28
061BC:  MOVFF  F3,A27
061C0:  MOVFF  F2,A26
061C4:  MOVLB  0
061C6:  CALL   254C
061CA:  MOVF   01,F
061CC:  BTFSS  FD8.2
061CE:  GOTO   61E6
....................       fprintf(PC, "SMF is not connected\r\n");
061D2:  MOVLW  FC
061D4:  MOVWF  FF6
061D6:  MOVLW  1B
061D8:  MOVWF  FF7
061DA:  MOVLW  00
061DC:  MOVWF  FF8
061DE:  CALL   1EB2
....................       return;
061E2:  GOTO   6432
....................    }
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
061E6:  MOVLW  14
061E8:  MOVWF  FF6
061EA:  MOVLW  1C
061EC:  MOVWF  FF7
061EE:  MOVLW  00
061F0:  MOVWF  FF8
061F2:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
061F6:  MOVLB  1
061F8:  MOVF   x5F,W
061FA:  MOVWF  FE9
061FC:  MOVF   x60,W
061FE:  MOVWF  FEA
06200:  MOVFF  FEF,1AE
06204:  MOVFF  1AE,266
06208:  MOVLW  01
0620A:  MOVLB  2
0620C:  MOVWF  x67
0620E:  MOVLB  0
06210:  CALL   3DC2
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
06214:  MOVLW  32
06216:  MOVWF  FF6
06218:  MOVLW  1C
0621A:  MOVWF  FF7
0621C:  MOVLW  00
0621E:  MOVWF  FF8
06220:  MOVLW  0E
06222:  MOVLB  9
06224:  MOVWF  x96
06226:  MOVLB  0
06228:  CALL   1EE2
0622C:  MOVFF  164,996
06230:  MOVLW  37
06232:  MOVLB  9
06234:  MOVWF  x97
06236:  MOVLB  0
06238:  CALL   20E0
0623C:  MOVFF  163,996
06240:  MOVLW  37
06242:  MOVLB  9
06244:  MOVWF  x97
06246:  MOVLB  0
06248:  CALL   20E0
0624C:  MOVFF  162,996
06250:  MOVLW  37
06252:  MOVLB  9
06254:  MOVWF  x97
06256:  MOVLB  0
06258:  CALL   20E0
0625C:  MOVFF  161,996
06260:  MOVLW  37
06262:  MOVLB  9
06264:  MOVWF  x97
06266:  MOVLB  0
06268:  CALL   20E0
0626C:  MOVLW  0D
0626E:  MOVLB  A
06270:  MOVWF  x29
06272:  MOVLB  0
06274:  CALL   1E60
06278:  MOVLW  0A
0627A:  MOVLB  A
0627C:  MOVWF  x29
0627E:  MOVLB  0
06280:  CALL   1E60
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
06284:  MOVLW  48
06286:  MOVWF  FF6
06288:  MOVLW  1C
0628A:  MOVWF  FF7
0628C:  MOVLW  00
0628E:  MOVWF  FF8
06290:  MOVLW  0E
06292:  MOVLB  9
06294:  MOVWF  x96
06296:  MOVLB  0
06298:  CALL   1EE2
0629C:  MOVFF  166,996
062A0:  MOVLW  37
062A2:  MOVLB  9
062A4:  MOVWF  x97
062A6:  MOVLB  0
062A8:  CALL   20E0
062AC:  MOVFF  165,996
062B0:  MOVLW  37
062B2:  MOVLB  9
062B4:  MOVWF  x97
062B6:  MOVLB  0
062B8:  CALL   20E0
062BC:  MOVLW  0D
062BE:  MOVLB  A
062C0:  MOVWF  x29
062C2:  MOVLB  0
062C4:  CALL   1E60
062C8:  MOVLW  0A
062CA:  MOVLB  A
062CC:  MOVWF  x29
062CE:  MOVLB  0
062D0:  CALL   1E60
....................    fprintf(PC, "read data\r\n");
062D4:  MOVLW  5E
062D6:  MOVWF  FF6
062D8:  MOVLW  1C
062DA:  MOVWF  FF7
062DC:  MOVLW  00
062DE:  MOVWF  FF8
062E0:  CALL   1EB2
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
062E4:  MOVLB  1
062E6:  CLRF   xA8
062E8:  CLRF   xA7
062EA:  MOVLB  0
062EC:  MOVLB  1
062EE:  MOVF   xA8,W
062F0:  SUBWF  x66,W
062F2:  BTFSC  FD8.0
062F4:  BRA    62FC
062F6:  MOVLB  0
062F8:  GOTO   6404
062FC:  MOVLB  0
062FE:  BTFSS  FD8.2
06300:  GOTO   6316
06304:  MOVLB  1
06306:  MOVF   x65,W
06308:  SUBWF  xA7,W
0630A:  BTFSS  FD8.0
0630C:  BRA    6314
0630E:  MOVLB  0
06310:  GOTO   6404
06314:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
06316:  MOVLB  1
06318:  RLCF   xA7,W
0631A:  MOVWF  02
0631C:  RLCF   xA8,W
0631E:  MOVWF  03
06320:  RLCF   02,F
06322:  RLCF   03,F
06324:  RLCF   02,F
06326:  RLCF   03,F
06328:  RLCF   02,F
0632A:  RLCF   03,F
0632C:  RLCF   02,F
0632E:  RLCF   03,F
06330:  RLCF   02,F
06332:  RLCF   03,F
06334:  MOVLW  C0
06336:  ANDWF  02,F
06338:  MOVF   02,W
0633A:  ADDWF  x61,W
0633C:  MOVWF  xA9
0633E:  MOVF   03,W
06340:  ADDWFC x62,W
06342:  MOVWF  xAA
06344:  MOVLW  00
06346:  ADDWFC x63,W
06348:  MOVWF  xAB
0634A:  MOVLW  00
0634C:  ADDWFC x64,W
0634E:  MOVWF  xAC
06350:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
06352:  MOVFF  F5,270
06356:  MOVFF  F4,26F
0635A:  MOVFF  F3,26E
0635E:  MOVFF  F2,26D
06362:  MOVFF  1AC,274
06366:  MOVFF  1AB,273
0636A:  MOVFF  1AA,272
0636E:  MOVFF  1A9,271
06372:  MOVLW  01
06374:  MOVLB  2
06376:  MOVWF  x76
06378:  MOVLW  67
0637A:  MOVWF  x75
0637C:  CLRF   x7A
0637E:  CLRF   x79
06380:  CLRF   x78
06382:  MOVLW  40
06384:  MOVWF  x77
06386:  MOVLB  0
06388:  CALL   2612
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
0638C:  MOVLB  1
0638E:  CLRF   xAD
06390:  MOVLB  0
06392:  MOVLB  1
06394:  MOVF   xAD,W
06396:  SUBLW  3F
06398:  BTFSC  FD8.0
0639A:  BRA    63A2
0639C:  MOVLB  0
0639E:  GOTO   63DE
063A2:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
063A4:  CLRF   03
063A6:  MOVLB  1
063A8:  MOVF   xAD,W
063AA:  ADDLW  67
063AC:  MOVWF  FE9
063AE:  MOVLW  01
063B0:  ADDWFC 03,W
063B2:  MOVWF  FEA
063B4:  MOVFF  FEF,1AE
063B8:  MOVFF  1AE,996
063BC:  MOVLW  37
063BE:  MOVLB  9
063C0:  MOVWF  x97
063C2:  MOVLB  0
063C4:  CALL   20E0
063C8:  MOVLW  20
063CA:  MOVLB  A
063CC:  MOVWF  x29
063CE:  MOVLB  0
063D0:  CALL   1E60
063D4:  MOVLB  1
063D6:  INCF   xAD,F
063D8:  MOVLB  0
063DA:  GOTO   6392
....................       }
....................       fprintf(PC, "\r\n");
063DE:  MOVLW  0D
063E0:  MOVLB  A
063E2:  MOVWF  x29
063E4:  MOVLB  0
063E6:  CALL   1E60
063EA:  MOVLW  0A
063EC:  MOVLB  A
063EE:  MOVWF  x29
063F0:  MOVLB  0
063F2:  CALL   1E60
063F6:  MOVLB  1
063F8:  INCF   xA7,F
063FA:  BTFSC  FD8.2
063FC:  INCF   xA8,F
063FE:  MOVLB  0
06400:  GOTO   62EC
....................    }
.................... 
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
06404:  MOVLW  6A
06406:  MOVWF  FF6
06408:  MOVLW  1C
0640A:  MOVWF  FF7
0640C:  MOVLW  00
0640E:  MOVWF  FF8
06410:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06414:  MOVLB  1
06416:  MOVF   x5F,W
06418:  MOVWF  FE9
0641A:  MOVF   x60,W
0641C:  MOVWF  FEA
0641E:  MOVFF  FEF,1AE
06422:  MOVFF  1AE,266
06426:  MOVLW  02
06428:  MOVLB  2
0642A:  MOVWF  x67
0642C:  MOVLB  0
0642E:  CALL   3DC2
06432:  GOTO   8F10 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
06436:  MOVLW  88
06438:  MOVWF  FF6
0643A:  MOVLW  1C
0643C:  MOVWF  FF7
0643E:  MOVLW  00
06440:  MOVWF  FF8
06442:  CALL   1EB2
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
06446:  MOVLB  1
06448:  MOVF   x5F,W
0644A:  MOVWF  FE9
0644C:  MOVF   x60,W
0644E:  MOVWF  FEA
06450:  MOVFF  FEF,161
....................    piclog_make(cmd, 0x00); // Log the command execution
06454:  MOVFF  161,266
06458:  MOVLB  2
0645A:  CLRF   x67
0645C:  MOVLB  0
0645E:  CALL   3DC2
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
06462:  MOVLB  1
06464:  CLRF   x65
06466:  CLRF   x64
06468:  CLRF   x63
0646A:  CLRF   x62
0646C:  MOVLB  0
0646E:  MOVLB  1
06470:  MOVF   x65,F
06472:  BTFSC  FD8.2
06474:  BRA    647C
06476:  MOVLB  0
06478:  GOTO   64DC
0647C:  MOVLB  0
0647E:  MOVLB  1
06480:  MOVF   x64,W
06482:  SUBLW  F4
06484:  BTFSC  FD8.0
06486:  BRA    648E
06488:  MOVLB  0
0648A:  GOTO   64DC
0648E:  MOVLB  0
06490:  BTFSS  FD8.2
06492:  GOTO   64A8
06496:  MOVLB  1
06498:  MOVF   x63,W
0649A:  SUBLW  23
0649C:  BTFSC  FD8.0
0649E:  BRA    64A6
064A0:  MOVLB  0
064A2:  GOTO   64DC
064A6:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
064A8:  MOVFF  F5,1A8
064AC:  MOVFF  F4,1A7
064B0:  MOVFF  F3,1A6
064B4:  MOVFF  F2,1A5
064B8:  MOVFF  165,1AC
064BC:  MOVFF  164,1AB
064C0:  MOVFF  163,1AA
064C4:  MOVFF  162,1A9
064C8:  CALL   465A
064CC:  MOVLW  01
064CE:  MOVLB  1
064D0:  ADDWF  x64,F
064D2:  MOVLW  00
064D4:  ADDWFC x65,F
064D6:  MOVLB  0
064D8:  GOTO   646E
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
064DC:  MOVFF  161,266
064E0:  MOVLW  02
064E2:  MOVLB  2
064E4:  MOVWF  x67
064E6:  MOVLB  0
064E8:  CALL   3DC2
....................    fprintf(PC, "End SMF Erase All\r\n");
064EC:  MOVLW  9E
064EE:  MOVWF  FF6
064F0:  MOVLW  1C
064F2:  MOVWF  FF7
064F4:  MOVLW  00
064F6:  MOVWF  FF8
064F8:  CALL   1EB2
064FC:  GOTO   8F20 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
05E9A:  MOVLW  B2
05E9C:  MOVWF  FF6
05E9E:  MOVLW  1C
05EA0:  MOVWF  FF7
05EA2:  MOVLW  00
05EA4:  MOVWF  FF8
05EA6:  CALL   1EB2
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05EAA:  MOVLB  1
05EAC:  MOVF   x5F,W
05EAE:  MOVWF  FE9
05EB0:  MOVF   x60,W
05EB2:  MOVWF  FEA
05EB4:  MOVFF  FEF,1A5
05EB8:  MOVFF  1A5,266
05EBC:  MOVLW  01
05EBE:  MOVLB  2
05EC0:  MOVWF  x67
05EC2:  MOVLB  0
05EC4:  CALL   3DC2
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05EC8:  MOVLB  1
05ECA:  CLRF   x61
05ECC:  CLRF   x62
05ECE:  CLRF   x63
05ED0:  CLRF   x64
05ED2:  CLRF   x65
05ED4:  CLRF   x66
05ED6:  CLRF   x67
05ED8:  CLRF   x68
05EDA:  CLRF   x69
05EDC:  CLRF   x6A
05EDE:  CLRF   x6B
05EE0:  CLRF   x6C
05EE2:  CLRF   x6D
05EE4:  CLRF   x6E
05EE6:  CLRF   x6F
05EE8:  CLRF   x70
05EEA:  CLRF   x71
05EEC:  CLRF   x72
05EEE:  CLRF   x73
05EF0:  CLRF   x74
05EF2:  CLRF   x75
05EF4:  CLRF   x76
05EF6:  CLRF   x77
05EF8:  CLRF   x78
05EFA:  CLRF   x79
05EFC:  CLRF   x7A
05EFE:  CLRF   x7B
05F00:  CLRF   x7C
05F02:  CLRF   x7D
05F04:  CLRF   x7E
05F06:  CLRF   x7F
05F08:  CLRF   x80
05F0A:  CLRF   x81
05F0C:  CLRF   x82
05F0E:  CLRF   x83
05F10:  CLRF   x84
05F12:  CLRF   x85
05F14:  CLRF   x86
05F16:  CLRF   x87
05F18:  CLRF   x88
05F1A:  CLRF   x89
05F1C:  CLRF   x8A
05F1E:  CLRF   x8B
05F20:  CLRF   x8C
05F22:  CLRF   x8D
05F24:  CLRF   x8E
05F26:  CLRF   x8F
05F28:  CLRF   x90
05F2A:  CLRF   x91
05F2C:  CLRF   x92
05F2E:  CLRF   x93
05F30:  CLRF   x94
05F32:  CLRF   x95
05F34:  CLRF   x96
05F36:  CLRF   x97
05F38:  CLRF   x98
05F3A:  CLRF   x99
05F3C:  CLRF   x9A
05F3E:  CLRF   x9B
05F40:  CLRF   x9C
05F42:  CLRF   x9D
05F44:  CLRF   x9E
05F46:  CLRF   x9F
05F48:  CLRF   xA0
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
05F4A:  MOVLW  04
05F4C:  MOVWF  xA4
05F4E:  MOVLW  EC
05F50:  MOVWF  xA3
05F52:  CLRF   xA2
05F54:  CLRF   xA1
05F56:  MOVLB  0
05F58:  MOVLB  1
05F5A:  MOVF   xA4,W
05F5C:  SUBLW  05
05F5E:  BTFSC  FD8.0
05F60:  BRA    5F68
05F62:  MOVLB  0
05F64:  GOTO   5FE6
05F68:  MOVLB  0
05F6A:  BTFSS  FD8.2
05F6C:  GOTO   5FB2
05F70:  MOVLB  1
05F72:  MOVF   xA3,W
05F74:  SUBLW  6B
05F76:  BTFSC  FD8.0
05F78:  BRA    5F80
05F7A:  MOVLB  0
05F7C:  GOTO   5FE6
05F80:  MOVLB  0
05F82:  BTFSS  FD8.2
05F84:  GOTO   5FB2
05F88:  MOVLB  1
05F8A:  MOVF   xA2,W
05F8C:  SUBLW  FF
05F8E:  BTFSC  FD8.0
05F90:  BRA    5F98
05F92:  MOVLB  0
05F94:  GOTO   5FE6
05F98:  MOVLB  0
05F9A:  BTFSS  FD8.2
05F9C:  GOTO   5FB2
05FA0:  MOVLB  1
05FA2:  MOVF   xA1,W
05FA4:  SUBLW  FE
05FA6:  BTFSC  FD8.0
05FA8:  BRA    5FB0
05FAA:  MOVLB  0
05FAC:  GOTO   5FE6
05FB0:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
05FB2:  MOVFF  F5,1A8
05FB6:  MOVFF  F4,1A7
05FBA:  MOVFF  F3,1A6
05FBE:  MOVFF  F2,1A5
05FC2:  MOVFF  1A4,1AC
05FC6:  MOVFF  1A3,1AB
05FCA:  MOVFF  1A2,1AA
05FCE:  MOVFF  1A1,1A9
05FD2:  CALL   465A
05FD6:  MOVLW  01
05FD8:  MOVLB  1
05FDA:  ADDWF  xA3,F
05FDC:  MOVLW  00
05FDE:  ADDWFC xA4,F
05FE0:  MOVLB  0
05FE2:  GOTO   5F58
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
05FE6:  MOVFF  F5,A29
05FEA:  MOVFF  F4,A28
05FEE:  MOVFF  F3,A27
05FF2:  MOVFF  F2,A26
05FF6:  MOVLW  04
05FF8:  MOVLB  A
05FFA:  MOVWF  x2D
05FFC:  MOVLW  EC
05FFE:  MOVWF  x2C
06000:  CLRF   x2B
06002:  CLRF   x2A
06004:  MOVLW  01
06006:  MOVWF  x2F
06008:  MOVLW  61
0600A:  MOVWF  x2E
0600C:  CLRF   x31
0600E:  MOVLW  40
06010:  MOVWF  x30
06012:  MOVLB  0
06014:  CALL   3406
....................    smf_init(); // Update the address area after writing
06018:  GOTO   5E96
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0601C:  MOVLB  1
0601E:  MOVF   x5F,W
06020:  MOVWF  FE9
06022:  MOVF   x60,W
06024:  MOVWF  FEA
06026:  MOVFF  FEF,1A5
0602A:  MOVFF  1A5,266
0602E:  MOVLW  02
06030:  MOVLB  2
06032:  MOVWF  x67
06034:  MOVLB  0
06036:  CALL   3DC2
....................    fprintf(PC, "End SMF Reset\r\n");
0603A:  MOVLW  C4
0603C:  MOVWF  FF6
0603E:  MOVLW  1C
06040:  MOVWF  FF7
06042:  MOVLW  00
06044:  MOVWF  FF8
06046:  CALL   1EB2
0604A:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
0B26A:  CLRF   FF8
0B26C:  BCF    FD0.7
0B26E:  BSF    07.7
0B270:  MOVLB  E
0B272:  MOVLW  55
0B274:  MOVWF  F7E
0B276:  MOVLW  AA
0B278:  MOVWF  F7E
0B27A:  BCF    F66.6
0B27C:  MOVLW  F9
0B27E:  MOVWF  x2C
0B280:  MOVLW  00
0B282:  MOVWF  x2E
0B284:  MOVLW  40
0B286:  MOVWF  x12
0B288:  MOVLW  30
0B28A:  MOVWF  x13
0B28C:  MOVLW  20
0B28E:  MOVWF  x22
0B290:  MOVLW  55
0B292:  MOVWF  F7E
0B294:  MOVLW  AA
0B296:  MOVWF  F7E
0B298:  BSF    F66.6
0B29A:  CLRF   F9B
0B29C:  CLRF   F64
0B29E:  CLRF   F65
0B2A0:  CLRF   F66
0B2A2:  MOVLW  02
0B2A4:  MOVWF  FD3
0B2A6:  CLRF   1B
0B2A8:  MOVLB  F
0B2AA:  BSF    x2D.3
0B2AC:  MOVLW  A0
0B2AE:  MOVWF  x2B
0B2B0:  MOVLW  01
0B2B2:  MOVWF  x2C
0B2B4:  MOVLW  A6
0B2B6:  MOVWF  x2E
0B2B8:  MOVLW  90
0B2BA:  MOVWF  x2F
0B2BC:  BCF    F93.6
0B2BE:  BSF    F8A.6
0B2C0:  BCF    FC6.5
0B2C2:  MOVLW  40
0B2C4:  MOVWF  FC7
0B2C6:  MOVLW  13
0B2C8:  MOVWF  FC8
0B2CA:  MOVLW  2A
0B2CC:  MOVWF  FC6
0B2CE:  BCF    F92.1
0B2D0:  BSF    F92.0
0B2D2:  BCF    F92.3
0B2D4:  BSF    F96.4
0B2D6:  BCF    F96.1
0B2D8:  BCF    F95.7
0B2DA:  BCF    F8C.7
0B2DC:  BSF    F93.4
0B2DE:  BCF    F93.5
0B2E0:  BCF    F93.2
0B2E2:  BCF    F8A.2
0B2E4:  CLRF   1F
0B2E6:  CLRF   1E
0B2E8:  CLRF   1D
0B2EA:  CLRF   1C
0B2EC:  CLRF   23
0B2EE:  CLRF   22
0B2F0:  CLRF   21
0B2F2:  CLRF   20
0B2F4:  CLRF   25
0B2F6:  CLRF   24
0B2F8:  CLRF   46
0B2FA:  BCF    47.0
0B2FC:  MOVLB  1
0B2FE:  CLRF   x19
0B300:  MOVLW  1E
0B302:  MOVWF  x1E
0B304:  CLRF   x20
0B306:  CLRF   x1F
0B308:  MOVLB  E
0B30A:  CLRF   xD9
0B30C:  CLRF   xDA
0B30E:  CLRF   xCE
0B310:  CLRF   xCF
0B312:  CLRF   xD0
0B314:  CLRF   xD1
0B316:  CLRF   xD2
0B318:  CLRF   xD3
0B31A:  CLRF   xD4
0B31C:  CLRF   xD5
0B31E:  CLRF   x45
0B320:  CLRF   x46
0B322:  CLRF   x47
0B324:  BCF    x8D.7
0B326:  BCF    x8D.6
0B328:  BCF    x8D.5
0B32A:  MOVLB  F
0B32C:  CLRF   x53
0B32E:  CLRF   x38
0B330:  CLRF   x37
0B332:  MOVLB  0
0B334:  CLRF   26
0B336:  CLRF   27
0B338:  CLRF   28
0B33A:  CLRF   29
0B33C:  CLRF   2A
0B33E:  CLRF   2B
0B340:  CLRF   2C
0B342:  CLRF   2D
0B344:  CLRF   2E
0B346:  CLRF   2F
0B348:  CLRF   30
0B34A:  CLRF   31
0B34C:  CLRF   32
0B34E:  CLRF   33
0B350:  CLRF   34
0B352:  CLRF   35
0B354:  CLRF   36
0B356:  CLRF   37
0B358:  CLRF   38
0B35A:  CLRF   39
0B35C:  CLRF   3A
0B35E:  CLRF   3B
0B360:  CLRF   3C
0B362:  CLRF   3D
0B364:  CLRF   3E
0B366:  CLRF   3F
0B368:  CLRF   40
0B36A:  CLRF   41
0B36C:  CLRF   42
0B36E:  CLRF   43
0B370:  CLRF   44
0B372:  CLRF   45
0B374:  MOVLW  03
0B376:  MOVWF  48
0B378:  CLRF   49
0B37A:  CLRF   4A
0B37C:  CLRF   4B
0B37E:  CLRF   4C
0B380:  CLRF   4D
0B382:  CLRF   4E
0B384:  CLRF   4F
0B386:  CLRF   50
0B388:  CLRF   51
0B38A:  CLRF   52
0B38C:  CLRF   53
0B38E:  CLRF   54
0B390:  CLRF   55
0B392:  CLRF   56
0B394:  CLRF   57
0B396:  CLRF   58
0B398:  CLRF   59
0B39A:  CLRF   5A
0B39C:  CLRF   5B
0B39E:  CLRF   5C
0B3A0:  CLRF   5D
0B3A2:  CLRF   5E
0B3A4:  CLRF   5F
0B3A6:  CLRF   x60
0B3A8:  CLRF   x61
0B3AA:  CLRF   x62
0B3AC:  CLRF   x63
0B3AE:  CLRF   x64
0B3B0:  CLRF   x65
0B3B2:  CLRF   x66
0B3B4:  CLRF   x67
0B3B6:  CLRF   x68
0B3B8:  CLRF   x69
0B3BA:  CLRF   x6A
0B3BC:  CLRF   x6B
0B3BE:  CLRF   x6C
0B3C0:  CLRF   x6D
0B3C2:  CLRF   x6E
0B3C4:  CLRF   x6F
0B3C6:  CLRF   x70
0B3C8:  CLRF   x71
0B3CA:  CLRF   x72
0B3CC:  CLRF   x73
0B3CE:  CLRF   x74
0B3D0:  CLRF   x75
0B3D2:  CLRF   x76
0B3D4:  CLRF   x77
0B3D6:  CLRF   x78
0B3D8:  CLRF   x79
0B3DA:  CLRF   x7A
0B3DC:  CLRF   x7B
0B3DE:  CLRF   x7C
0B3E0:  CLRF   x7D
0B3E2:  CLRF   x7E
0B3E4:  CLRF   x7F
0B3E6:  CLRF   x80
0B3E8:  CLRF   x81
0B3EA:  CLRF   x82
0B3EC:  CLRF   x83
0B3EE:  CLRF   x84
0B3F0:  CLRF   x85
0B3F2:  CLRF   x86
0B3F4:  CLRF   x87
0B3F6:  CLRF   x88
0B3F8:  CLRF   x89
0B3FA:  CLRF   x8A
0B3FC:  CLRF   x8B
0B3FE:  CLRF   x8C
0B400:  CLRF   x8D
0B402:  CLRF   x8E
0B404:  CLRF   x8F
0B406:  CLRF   x90
0B408:  CLRF   x91
0B40A:  CLRF   x92
0B40C:  CLRF   x93
0B40E:  CLRF   x94
0B410:  CLRF   x95
0B412:  CLRF   x96
0B414:  CLRF   x97
0B416:  CLRF   x98
0B418:  CLRF   x99
0B41A:  CLRF   x9A
0B41C:  CLRF   x9B
0B41E:  CLRF   x9C
0B420:  CLRF   x9D
0B422:  CLRF   x9E
0B424:  CLRF   x9F
0B426:  CLRF   xA0
0B428:  CLRF   xA1
0B42A:  CLRF   xA2
0B42C:  CLRF   xA3
0B42E:  CLRF   xA4
0B430:  CLRF   xA5
0B432:  CLRF   xA6
0B434:  CLRF   xA7
0B436:  CLRF   xA8
0B438:  CLRF   xA9
0B43A:  CLRF   xAA
0B43C:  CLRF   xAB
0B43E:  CLRF   xAC
0B440:  CLRF   xAD
0B442:  CLRF   xAE
0B444:  CLRF   xAF
0B446:  CLRF   xB0
0B448:  CLRF   xB1
0B44A:  CLRF   xB2
0B44C:  CLRF   xB3
0B44E:  CLRF   xB4
0B450:  CLRF   xB5
0B452:  CLRF   xB6
0B454:  CLRF   xB7
0B456:  CLRF   xB8
0B458:  CLRF   xB9
0B45A:  CLRF   xBA
0B45C:  CLRF   xBB
0B45E:  CLRF   xBC
0B460:  CLRF   xBD
0B462:  CLRF   xBE
0B464:  CLRF   xBF
0B466:  CLRF   xC0
0B468:  CLRF   xC1
0B46A:  CLRF   xC2
0B46C:  CLRF   xC3
0B46E:  CLRF   xC4
0B470:  CLRF   xC5
0B472:  CLRF   xC6
0B474:  CLRF   xC7
0B476:  CLRF   xC8
0B478:  CLRF   xC9
0B47A:  CLRF   xCA
0B47C:  CLRF   xCB
0B47E:  CLRF   xCC
0B480:  CLRF   xCD
0B482:  CLRF   xCE
0B484:  CLRF   xCF
0B486:  CLRF   xD0
0B488:  CLRF   xD1
0B48A:  CLRF   xD2
0B48C:  CLRF   xD3
0B48E:  CLRF   xD4
0B490:  CLRF   xD5
0B492:  CLRF   xD6
0B494:  CLRF   xD7
0B496:  CLRF   xD8
0B498:  CLRF   xD9
0B49A:  CLRF   xDA
0B49C:  CLRF   xDB
0B49E:  CLRF   xDC
0B4A0:  CLRF   xDD
0B4A2:  CLRF   xDE
0B4A4:  CLRF   xDF
0B4A6:  CLRF   xE0
0B4A8:  CLRF   xE1
0B4AA:  CLRF   xE2
0B4AC:  CLRF   xE3
0B4AE:  CLRF   xE4
0B4B0:  CLRF   xE5
0B4B2:  CLRF   xE6
0B4B4:  CLRF   xE7
0B4B6:  CLRF   xE8
0B4B8:  CLRF   xE9
0B4BA:  CLRF   xEA
0B4BC:  CLRF   xEB
0B4BE:  CLRF   xEC
0B4C0:  CLRF   xED
0B4C2:  CLRF   xEE
0B4C4:  CLRF   xEF
0B4C6:  MOVLW  05
0B4C8:  MOVWF  xF0
0B4CA:  MOVLW  7C
0B4CC:  MOVWF  xF1
0B4CE:  MOVLW  01
0B4D0:  MOVWF  xF2
0B4D2:  MOVLW  01
0B4D4:  MOVWF  xF3
0B4D6:  MOVLW  02
0B4D8:  MOVWF  xF4
0B4DA:  MOVLW  7C
0B4DC:  MOVWF  xF5
0B4DE:  CLRF   xF6
0B4E0:  MOVLW  09
0B4E2:  MOVWF  xF7
0B4E4:  MOVLW  01
0B4E6:  MOVWF  xF8
0B4E8:  CLRF   xF9
0B4EA:  MOVLW  02
0B4EC:  MOVWF  xFA
0B4EE:  MOVLW  01
0B4F0:  MOVWF  xFB
0B4F2:  MOVLB  1
0B4F4:  CLRF   x1A
0B4F6:  CLRF   x1B
0B4F8:  CLRF   x1C
0B4FA:  CLRF   x1D
0B4FC:  CLRF   x21
0B4FE:  CLRF   x22
0B500:  CLRF   x23
0B502:  CLRF   x24
0B504:  CLRF   x25
0B506:  CLRF   x26
0B508:  CLRF   x27
0B50A:  CLRF   x28
0B50C:  CLRF   x29
0B50E:  CLRF   x2A
0B510:  CLRF   x2B
0B512:  CLRF   x2C
0B514:  CLRF   x2D
0B516:  CLRF   x2E
0B518:  CLRF   x2F
0B51A:  CLRF   x30
0B51C:  CLRF   x31
0B51E:  CLRF   x32
0B520:  CLRF   x33
0B522:  CLRF   x34
0B524:  CLRF   x35
0B526:  CLRF   x36
0B528:  CLRF   x37
0B52A:  CLRF   x38
0B52C:  CLRF   x39
0B52E:  CLRF   x3A
0B530:  CLRF   x3B
0B532:  CLRF   x3C
0B534:  CLRF   x3D
0B536:  CLRF   x3E
0B538:  CLRF   x3F
0B53A:  CLRF   x40
0B53C:  CLRF   x41
0B53E:  CLRF   x42
0B540:  CLRF   x43
0B542:  CLRF   x44
0B544:  CLRF   x45
0B546:  CLRF   x46
0B548:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
0B54A:  MOVLW  64
0B54C:  MOVLB  A
0B54E:  MOVWF  x3E
0B550:  MOVLB  0
0B552:  CALL   1E32
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
0B556:  MOVLW  D4
0B558:  MOVWF  FF6
0B55A:  MOVLW  1C
0B55C:  MOVWF  FF7
0B55E:  MOVLW  00
0B560:  MOVWF  FF8
0B562:  CALL   1EB2
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM4.\r\n");
0B566:  MOVLW  1A
0B568:  MOVWF  FF6
0B56A:  MOVLW  1D
0B56C:  MOVWF  FF7
0B56E:  MOVLW  00
0B570:  MOVWF  FF8
0B572:  CALL   1EB2
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
0B576:  MOVLW  48
0B578:  MOVWF  FF6
0B57A:  MOVLW  1D
0B57C:  MOVWF  FF7
0B57E:  MOVLW  00
0B580:  MOVWF  FF8
0B582:  MOVLW  10
0B584:  MOVLB  9
0B586:  MOVWF  x96
0B588:  MOVLB  0
0B58A:  CALL   1EE2
0B58E:  MOVLW  6E
0B590:  MOVWF  FF6
0B592:  MOVLW  1D
0B594:  MOVWF  FF7
0B596:  MOVLW  00
0B598:  MOVWF  FF8
0B59A:  CALL   1EB2
0B59E:  MOVLW  20
0B5A0:  MOVLB  A
0B5A2:  MOVWF  x29
0B5A4:  MOVLB  0
0B5A6:  CALL   1E60
0B5AA:  MOVLW  78
0B5AC:  MOVWF  FF6
0B5AE:  MOVLW  1D
0B5B0:  MOVWF  FF7
0B5B2:  MOVLW  00
0B5B4:  MOVWF  FF8
0B5B6:  CALL   1EB2
0B5BA:  MOVLW  5D
0B5BC:  MOVWF  FF6
0B5BE:  MOVLW  1D
0B5C0:  MOVWF  FF7
0B5C2:  MOVLW  00
0B5C4:  MOVWF  FF8
0B5C6:  MOVLW  0F
0B5C8:  MOVLB  9
0B5CA:  MOVWF  x96
0B5CC:  MOVLB  0
0B5CE:  CALL   1EE2
....................    
....................    //io_init();
....................    setup_uart_to_boss();
0B5D2:  GOTO   1F18
....................    setup_timer();
0B5D6:  GOTO   1F42
....................    ad7490_init();
0B5DA:  GOTO   2150
....................    misf_init();
0B5DE:  CALL   28F8
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
0B5E2:  MOVFF  119,266
0B5E6:  MOVLB  2
0B5E8:  CLRF   x67
0B5EA:  MOVLB  0
0B5EC:  CALL   3DC2
.................... 
....................    int1 is_finished = FALSE;
0B5F0:  MOVLB  1
0B5F2:  BCF    x49.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
0B5F4:  MOVLW  82
0B5F6:  MOVWF  FF6
0B5F8:  MOVLW  1D
0B5FA:  MOVWF  FF7
0B5FC:  MOVLW  00
0B5FE:  MOVWF  FF8
0B600:  MOVLB  0
0B602:  CALL   1EB2
....................    
....................    output_low(EN_NPWR);
0B606:  BCF    F94.7
0B608:  BCF    F8B.7
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
0B60A:  MOVLW  A8
0B60C:  MOVWF  FF6
0B60E:  MOVLW  1D
0B610:  MOVWF  FF7
0B612:  MOVLW  00
0B614:  MOVWF  FF8
0B616:  CALL   1EB2
....................    
....................    //Start loop
....................    while(!is_finished)
0B61A:  MOVLB  1
0B61C:  BTFSS  x49.0
0B61E:  BRA    B626
0B620:  MOVLB  0
0B622:  GOTO   B6F4
0B626:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0B628:  MOVF   46,F
0B62A:  BTFSC  FD8.2
0B62C:  GOTO   B6B0
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
0B630:  MOVLB  1
0B632:  CLRF   x5D
0B634:  MOVLW  26
0B636:  MOVWF  x5C
0B638:  MOVFF  46,15E
0B63C:  MOVLB  0
0B63E:  GOTO   428C
0B642:  MOVFF  02,03
0B646:  MOVF   01,W
0B648:  MOVWF  FE1
0B64A:  MOVFF  03,FE2
0B64E:  MOVLW  01
0B650:  MOVWF  FEA
0B652:  MOVLW  4A
0B654:  MOVWF  FE9
0B656:  MOVLW  0C
0B658:  MOVWF  01
0B65A:  MOVFF  FE6,FEE
0B65E:  DECFSZ 01,F
0B660:  GOTO   B65A
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0B664:  MOVLB  1
0B666:  CLRF   x57
0B668:  MOVLW  26
0B66A:  MOVWF  x56
0B66C:  CLRF   x59
0B66E:  MOVLW  46
0B670:  MOVWF  x58
0B672:  MOVLB  0
0B674:  GOTO   44AC
....................          
....................          if(recieve_cmd.is_exist)
0B678:  MOVLB  1
0B67A:  BTFSC  x4C.0
0B67C:  BRA    B684
0B67E:  MOVLB  0
0B680:  GOTO   B6A0
0B684:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0B686:  MOVLW  01
0B688:  MOVLB  1
0B68A:  MOVWF  x57
0B68C:  MOVLW  4A
0B68E:  MOVWF  x56
0B690:  MOVLB  0
0B692:  GOTO   B1E8
0B696:  MOVLB  1
0B698:  BCF    x49.1
0B69A:  BTFSC  01.0
0B69C:  BSF    x49.1
0B69E:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0B6A0:  MOVLW  C6
0B6A2:  MOVWF  FF6
0B6A4:  MOVLW  1D
0B6A6:  MOVWF  FF7
0B6A8:  MOVLW  00
0B6AA:  MOVWF  FF8
0B6AC:  CALL   1EB2
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0B6B0:  MOVLB  1
0B6B2:  BTFSC  x49.0
0B6B4:  BRA    B6BC
0B6B6:  MOVLB  0
0B6B8:  GOTO   B6C2
0B6BC:  MOVLB  0
....................          break;
0B6BE:  GOTO   B6F4
....................          
....................       delay_ms(400);
0B6C2:  MOVLW  02
0B6C4:  MOVLB  1
0B6C6:  MOVWF  x56
0B6C8:  MOVLB  0
0B6CA:  MOVLW  C8
0B6CC:  MOVLB  A
0B6CE:  MOVWF  x3E
0B6D0:  MOVLB  0
0B6D2:  CALL   1E32
0B6D6:  MOVLB  1
0B6D8:  DECFSZ x56,F
0B6DA:  BRA    B6E0
0B6DC:  BRA    B6E4
0B6DE:  MOVLB  0
0B6E0:  MOVLB  0
0B6E2:  BRA    B6CA
....................       fprintf(PC, ".");
0B6E4:  MOVLW  2E
0B6E6:  MOVLB  A
0B6E8:  MOVWF  x29
0B6EA:  MOVLB  0
0B6EC:  CALL   1E60
0B6F0:  GOTO   B61A
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0B6F4:  MOVLW  E6
0B6F6:  MOVWF  FF6
0B6F8:  MOVLW  1D
0B6FA:  MOVWF  FF7
0B6FC:  MOVLW  00
0B6FE:  MOVWF  FF8
0B700:  CALL   1EB2
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0B704:  MOVLW  2E
0B706:  MOVLB  A
0B708:  MOVWF  x29
0B70A:  MOVLB  0
0B70C:  CALL   1E60
....................       delay_ms(1000);
0B710:  MOVLW  04
0B712:  MOVLB  1
0B714:  MOVWF  x56
0B716:  MOVLB  0
0B718:  MOVLW  FA
0B71A:  MOVLB  A
0B71C:  MOVWF  x3E
0B71E:  MOVLB  0
0B720:  CALL   1E32
0B724:  MOVLB  1
0B726:  DECFSZ x56,F
0B728:  BRA    B72E
0B72A:  BRA    B732
0B72C:  MOVLB  0
0B72E:  MOVLB  0
0B730:  BRA    B718
0B732:  MOVLB  0
0B734:  GOTO   B704
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0B738:  MOVLW  26
0B73A:  MOVWF  FF6
0B73C:  MOVLW  1E
0B73E:  MOVWF  FF7
0B740:  MOVLW  00
0B742:  MOVWF  FF8
0B744:  CALL   1EB2
....................    
.................... }
.................... 
0B748:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
