CCS PCH C Compiler, Version 5.104, 57077               21-7-25 17:13

               Filename:   build\mmj_cigs_main.lst

               ROM used:   36396 bytes (28%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           2157 (60%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   84EC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00EA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   05D0
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: ハードウェア抽象化層
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000CA:  DATA 41,44
000CC:  DATA 37,34
000CE:  DATA 39,30
000D0:  DATA 20,49
000D2:  DATA 6E,69
000D4:  DATA 74,69
000D6:  DATA 61,6C
000D8:  DATA 69,7A
000DA:  DATA 65,0D
000DC:  DATA 0A,00
000DE:  DATA 09,43
000E0:  DATA 6F,6D
000E2:  DATA 70,6C
000E4:  DATA 65,74
000E6:  DATA 65,0D
000E8:  DATA 0A,00
*
0010A:  DATA 54,69
0010C:  DATA 6D,65
0010E:  DATA 72,20
00110:  DATA 49,6E
00112:  DATA 69,74
00114:  DATA 69,61
00116:  DATA 6C,69
00118:  DATA 7A,65
0011A:  DATA 0D,0A
0011C:  DATA 00,00
0011E:  DATA 09,43
00120:  DATA 6F,6D
00122:  DATA 70,6C
00124:  DATA 65,74
00126:  DATA 65,0D
00128:  DATA 0A,00
0012A:  DATA 0D,0A
0012C:  DATA 5F,5F
0012E:  DATA 5F,5F
00130:  DATA 5F,5F
00132:  DATA 5F,5F
00134:  DATA 5F,5F
00136:  DATA 5F,5F
00138:  DATA 5F,5F
0013A:  DATA 5F,5F
0013C:  DATA 5F,5F
0013E:  DATA 5F,5F
00140:  DATA 0D,0A
00142:  DATA 00,00
00144:  DATA 5F,5F
00146:  DATA 5F,53
00148:  DATA 74,61
0014A:  DATA 72,74
0014C:  DATA 20,73
0014E:  DATA 6D,66
00150:  DATA 5F,77
00152:  DATA 72,69
00154:  DATA 74,65
00156:  DATA 5F,5F
00158:  DATA 0D,0A
0015A:  DATA 00,00
0015C:  DATA 53,74
0015E:  DATA 61,72
00160:  DATA 74,20
00162:  DATA 5B,25
00164:  DATA 64,20
00166:  DATA 74,68
00168:  DATA 5D,20
0016A:  DATA 64,61
0016C:  DATA 74,61
0016E:  DATA 20,63
00170:  DATA 6F,70
00172:  DATA 79,0D
00174:  DATA 0A,0D
00176:  DATA 0A,00
00178:  DATA 49,6E
0017A:  DATA 20,73
0017C:  DATA 6D,66
0017E:  DATA 20,6D
00180:  DATA 69,73
00182:  DATA 73,69
00184:  DATA 6F,6E
00186:  DATA 20,64
00188:  DATA 61,74
0018A:  DATA 61,20
0018C:  DATA 73,74
0018E:  DATA 61,72
00190:  DATA 74,20
00192:  DATA 20,20
00194:  DATA 61,64
00196:  DATA 64,72
00198:  DATA 65,73
0019A:  DATA 73,3A
0019C:  DATA 20,25
0019E:  DATA 30,38
001A0:  DATA 4C,58
001A2:  DATA 0D,0A
001A4:  DATA 00,00
001A6:  DATA 49,6E
001A8:  DATA 20,73
001AA:  DATA 6D,66
001AC:  DATA 20,6D
001AE:  DATA 69,73
001B0:  DATA 73,69
001B2:  DATA 6F,6E
001B4:  DATA 20,64
001B6:  DATA 61,74
001B8:  DATA 61,20
001BA:  DATA 65,6E
001BC:  DATA 64,20
001BE:  DATA 20,20
001C0:  DATA 20,20
001C2:  DATA 61,64
001C4:  DATA 64,72
001C6:  DATA 65,73
001C8:  DATA 73,3A
001CA:  DATA 20,25
001CC:  DATA 30,38
001CE:  DATA 4C,58
001D0:  DATA 0D,0A
001D2:  DATA 00,00
001D4:  DATA 49,6E
001D6:  DATA 20,4D
001D8:  DATA 49,53
001DA:  DATA 20,46
001DC:  DATA 4D,20
001DE:  DATA 57,72
001E0:  DATA 69,74
001E2:  DATA 65,20
001E4:  DATA 73,6F
001E6:  DATA 75,72
001E8:  DATA 63,65
001EA:  DATA 20,64
001EC:  DATA 61,74
001EE:  DATA 61,20
001F0:  DATA 61,64
001F2:  DATA 64,72
001F4:  DATA 65,73
001F6:  DATA 73,3A
001F8:  DATA 20,25
001FA:  DATA 30,38
001FC:  DATA 4C,58
001FE:  DATA 0D,0A
00200:  DATA 00,00
00202:  DATA 49,6E
00204:  DATA 20,4D
00206:  DATA 49,53
00208:  DATA 20,46
0020A:  DATA 4D,20
0020C:  DATA 57,72
0020E:  DATA 69,74
00210:  DATA 65,20
00212:  DATA 64,61
00214:  DATA 74,61
00216:  DATA 20,73
00218:  DATA 69,7A
0021A:  DATA 65,20
0021C:  DATA 20,20
0021E:  DATA 20,20
00220:  DATA 20,20
00222:  DATA 20,20
00224:  DATA 20,3A
00226:  DATA 20,25
00228:  DATA 6C,75
0022A:  DATA 20,28
0022C:  DATA 30,78
0022E:  DATA 25,6C
00230:  DATA 78,29
00232:  DATA 0D,0A
00234:  DATA 0D,0A
00236:  DATA 00,00
00238:  DATA 45,72
0023A:  DATA 72,6F
0023C:  DATA 72,3A
0023E:  DATA 20,53
00240:  DATA 4D,46
00242:  DATA 20,69
00244:  DATA 73,20
00246:  DATA 6E,6F
00248:  DATA 74,20
0024A:  DATA 63,6F
0024C:  DATA 6E,6E
0024E:  DATA 65,63
00250:  DATA 74,65
00252:  DATA 64,0D
00254:  DATA 0A,00
00256:  DATA 53,69
00258:  DATA 7A,65
0025A:  DATA 20,61
0025C:  DATA 72,65
0025E:  DATA 61,20
00260:  DATA 72,65
00262:  DATA 61,64
00264:  DATA 0D,0A
00266:  DATA 00,00
00268:  DATA 75,73
0026A:  DATA 65,64
0026C:  DATA 5F,73
0026E:  DATA 69,7A
00270:  DATA 65,20
00272:  DATA 3D,20
00274:  DATA 25,6C
00276:  DATA 75,20
00278:  DATA 28,73
0027A:  DATA 72,63
0027C:  DATA 20,30
0027E:  DATA 78,25
00280:  DATA 30,38
00282:  DATA 4C,58
00284:  DATA 29,0D
00286:  DATA 0A,00
00288:  DATA 6C,6F
0028A:  DATA 6F,70
0028C:  DATA 20,63
0028E:  DATA 6F,75
00290:  DATA 6E,74
00292:  DATA 3D,20
00294:  DATA 25,64
00296:  DATA 20,20
00298:  DATA 28,73
0029A:  DATA 72,63
0029C:  DATA 20,30
0029E:  DATA 78,25
002A0:  DATA 30,38
002A2:  DATA 4C,58
002A4:  DATA 29,0D
002A6:  DATA 0A,0D
002A8:  DATA 0A,00
002AA:  DATA 57,72
002AC:  DATA 61,70
002AE:  DATA 20,74
002B0:  DATA 72,69
002B2:  DATA 67,67
002B4:  DATA 65,72
002B6:  DATA 65,64
002B8:  DATA 3A,20
002BA:  DATA 52,65
002BC:  DATA 73,65
002BE:  DATA 74,74
002C0:  DATA 69,6E
002C2:  DATA 67,20
002C4:  DATA 64,61
002C6:  DATA 74,61
002C8:  DATA 5F,77
002CA:  DATA 72,69
002CC:  DATA 74,65
002CE:  DATA 5F,61
002D0:  DATA 64,64
002D2:  DATA 72,20
002D4:  DATA 74,6F
002D6:  DATA 20,73
002D8:  DATA 74,61
002DA:  DATA 72,74
002DC:  DATA 0D,0A
002DE:  DATA 00,00
002E0:  DATA 55,70
002E2:  DATA 64,61
002E4:  DATA 74,65
002E6:  DATA 20,73
002E8:  DATA 69,7A
002EA:  DATA 65,20
002EC:  DATA 61,72
002EE:  DATA 65,61
002F0:  DATA 0D,0A
002F2:  DATA 00,00
002F4:  DATA 75,73
002F6:  DATA 65,64
002F8:  DATA 5F,73
002FA:  DATA 69,7A
002FC:  DATA 65,20
002FE:  DATA 3D,20
00300:  DATA 25,6C
00302:  DATA 64,0D
00304:  DATA 0A,00
00306:  DATA 6C,6F
00308:  DATA 6F,70
0030A:  DATA 5F,63
0030C:  DATA 6F,75
0030E:  DATA 6E,74
00310:  DATA 20,3D
00312:  DATA 20,25
00314:  DATA 75,0D
00316:  DATA 0A,0D
00318:  DATA 0A,00
0031A:  DATA 0D,0A
0031C:  DATA 5F,5F
0031E:  DATA 5F,45
00320:  DATA 6E,64
00322:  DATA 20,73
00324:  DATA 6D,66
00326:  DATA 5F,77
00328:  DATA 72,69
0032A:  DATA 74,65
0032C:  DATA 5F,5F
0032E:  DATA 5F,5F
00330:  DATA 0D,0A
00332:  DATA 00,00
00334:  DATA 5F,5F
00336:  DATA 5F,5F
00338:  DATA 5F,5F
0033A:  DATA 5F,5F
0033C:  DATA 5F,5F
0033E:  DATA 5F,5F
00340:  DATA 5F,5F
00342:  DATA 5F,5F
00344:  DATA 5F,5F
00346:  DATA 5F,5F
00348:  DATA 0D,0A
0034A:  DATA 0D,0A
0034C:  DATA 00,00
0034E:  DATA 0D,0A
00350:  DATA 5F,5F
00352:  DATA 5F,5F
00354:  DATA 5F,5F
00356:  DATA 5F,5F
00358:  DATA 5F,5F
0035A:  DATA 5F,5F
0035C:  DATA 5F,5F
0035E:  DATA 5F,5F
00360:  DATA 5F,5F
00362:  DATA 5F,5F
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 5F,5F
0036A:  DATA 5F,53
0036C:  DATA 74,61
0036E:  DATA 72,74
00370:  DATA 20,73
00372:  DATA 6D,66
00374:  DATA 5F,77
00376:  DATA 72,69
00378:  DATA 74,65
0037A:  DATA 5F,5F
0037C:  DATA 0D,0A
0037E:  DATA 00,00
00380:  DATA 53,74
00382:  DATA 61,72
00384:  DATA 74,20
00386:  DATA 5B,25
00388:  DATA 64,20
0038A:  DATA 74,68
0038C:  DATA 5D,20
0038E:  DATA 64,61
00390:  DATA 74,61
00392:  DATA 20,63
00394:  DATA 6F,70
00396:  DATA 79,0D
00398:  DATA 0A,0D
0039A:  DATA 0A,00
0039C:  DATA 49,6E
0039E:  DATA 20,73
003A0:  DATA 6D,66
003A2:  DATA 20,6D
003A4:  DATA 69,73
003A6:  DATA 73,69
003A8:  DATA 6F,6E
003AA:  DATA 20,64
003AC:  DATA 61,74
003AE:  DATA 61,20
003B0:  DATA 73,74
003B2:  DATA 61,72
003B4:  DATA 74,20
003B6:  DATA 20,20
003B8:  DATA 61,64
003BA:  DATA 64,72
003BC:  DATA 65,73
003BE:  DATA 73,3A
003C0:  DATA 20,25
003C2:  DATA 30,38
003C4:  DATA 4C,58
003C6:  DATA 0D,0A
003C8:  DATA 00,00
003CA:  DATA 49,6E
003CC:  DATA 20,73
003CE:  DATA 6D,66
003D0:  DATA 20,6D
003D2:  DATA 69,73
003D4:  DATA 73,69
003D6:  DATA 6F,6E
003D8:  DATA 20,64
003DA:  DATA 61,74
003DC:  DATA 61,20
003DE:  DATA 65,6E
003E0:  DATA 64,20
003E2:  DATA 20,20
003E4:  DATA 20,20
003E6:  DATA 61,64
003E8:  DATA 64,72
003EA:  DATA 65,73
003EC:  DATA 73,3A
003EE:  DATA 20,25
003F0:  DATA 30,38
003F2:  DATA 4C,58
003F4:  DATA 0D,0A
003F6:  DATA 00,00
003F8:  DATA 49,6E
003FA:  DATA 20,4D
003FC:  DATA 49,53
003FE:  DATA 20,46
00400:  DATA 4D,20
00402:  DATA 57,72
00404:  DATA 69,74
00406:  DATA 65,20
00408:  DATA 73,6F
0040A:  DATA 75,72
0040C:  DATA 63,65
0040E:  DATA 20,64
00410:  DATA 61,74
00412:  DATA 61,20
00414:  DATA 61,64
00416:  DATA 64,72
00418:  DATA 65,73
0041A:  DATA 73,3A
0041C:  DATA 20,25
0041E:  DATA 30,38
00420:  DATA 4C,58
00422:  DATA 0D,0A
00424:  DATA 00,00
00426:  DATA 49,6E
00428:  DATA 20,4D
0042A:  DATA 49,53
0042C:  DATA 20,46
0042E:  DATA 4D,20
00430:  DATA 57,72
00432:  DATA 69,74
00434:  DATA 65,20
00436:  DATA 64,61
00438:  DATA 74,61
0043A:  DATA 20,73
0043C:  DATA 69,7A
0043E:  DATA 65,20
00440:  DATA 20,20
00442:  DATA 20,20
00444:  DATA 20,20
00446:  DATA 20,20
00448:  DATA 20,3A
0044A:  DATA 20,25
0044C:  DATA 6C,75
0044E:  DATA 20,28
00450:  DATA 30,78
00452:  DATA 25,6C
00454:  DATA 78,29
00456:  DATA 0D,0A
00458:  DATA 0D,0A
0045A:  DATA 00,00
0045C:  DATA 45,72
0045E:  DATA 72,6F
00460:  DATA 72,3A
00462:  DATA 20,53
00464:  DATA 4D,46
00466:  DATA 20,69
00468:  DATA 73,20
0046A:  DATA 6E,6F
0046C:  DATA 74,20
0046E:  DATA 63,6F
00470:  DATA 6E,6E
00472:  DATA 65,63
00474:  DATA 74,65
00476:  DATA 64,0D
00478:  DATA 0A,00
0047A:  DATA 53,69
0047C:  DATA 7A,65
0047E:  DATA 20,61
00480:  DATA 72,65
00482:  DATA 61,20
00484:  DATA 72,65
00486:  DATA 61,64
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 75,73
0048E:  DATA 65,64
00490:  DATA 5F,73
00492:  DATA 69,7A
00494:  DATA 65,20
00496:  DATA 3D,20
00498:  DATA 25,6C
0049A:  DATA 75,20
0049C:  DATA 28,73
0049E:  DATA 72,63
004A0:  DATA 20,30
004A2:  DATA 78,25
004A4:  DATA 30,38
004A6:  DATA 4C,58
004A8:  DATA 29,0D
004AA:  DATA 0A,00
004AC:  DATA 6C,6F
004AE:  DATA 6F,70
004B0:  DATA 20,63
004B2:  DATA 6F,75
004B4:  DATA 6E,74
004B6:  DATA 3D,20
004B8:  DATA 25,64
004BA:  DATA 20,20
004BC:  DATA 28,73
004BE:  DATA 72,63
004C0:  DATA 20,30
004C2:  DATA 78,25
004C4:  DATA 30,38
004C6:  DATA 4C,58
004C8:  DATA 29,0D
004CA:  DATA 0A,0D
004CC:  DATA 0A,00
004CE:  DATA 57,72
004D0:  DATA 61,70
004D2:  DATA 20,74
004D4:  DATA 72,69
004D6:  DATA 67,67
004D8:  DATA 65,72
004DA:  DATA 65,64
004DC:  DATA 3A,20
004DE:  DATA 52,65
004E0:  DATA 73,65
004E2:  DATA 74,74
004E4:  DATA 69,6E
004E6:  DATA 67,20
004E8:  DATA 64,61
004EA:  DATA 74,61
004EC:  DATA 5F,77
004EE:  DATA 72,69
004F0:  DATA 74,65
004F2:  DATA 5F,61
004F4:  DATA 64,64
004F6:  DATA 72,20
004F8:  DATA 74,6F
004FA:  DATA 20,73
004FC:  DATA 74,61
004FE:  DATA 72,74
00500:  DATA 0D,0A
00502:  DATA 00,00
00504:  DATA 55,70
00506:  DATA 64,61
00508:  DATA 74,65
0050A:  DATA 20,73
0050C:  DATA 69,7A
0050E:  DATA 65,20
00510:  DATA 61,72
00512:  DATA 65,61
00514:  DATA 0D,0A
00516:  DATA 00,00
00518:  DATA 75,73
0051A:  DATA 65,64
0051C:  DATA 5F,73
0051E:  DATA 69,7A
00520:  DATA 65,20
00522:  DATA 3D,20
00524:  DATA 25,6C
00526:  DATA 64,0D
00528:  DATA 0A,00
0052A:  DATA 6C,6F
0052C:  DATA 6F,70
0052E:  DATA 5F,63
00530:  DATA 6F,75
00532:  DATA 6E,74
00534:  DATA 20,3D
00536:  DATA 20,25
00538:  DATA 75,0D
0053A:  DATA 0A,0D
0053C:  DATA 0A,00
0053E:  DATA 0D,0A
00540:  DATA 5F,5F
00542:  DATA 5F,45
00544:  DATA 6E,64
00546:  DATA 20,73
00548:  DATA 6D,66
0054A:  DATA 5F,77
0054C:  DATA 72,69
0054E:  DATA 74,65
00550:  DATA 5F,5F
00552:  DATA 5F,5F
00554:  DATA 0D,0A
00556:  DATA 00,00
00558:  DATA 5F,5F
0055A:  DATA 5F,5F
0055C:  DATA 5F,5F
0055E:  DATA 5F,5F
00560:  DATA 5F,5F
00562:  DATA 5F,5F
00564:  DATA 5F,5F
00566:  DATA 5F,5F
00568:  DATA 5F,5F
0056A:  DATA 5F,5F
0056C:  DATA 0D,0A
0056E:  DATA 0D,0A
00570:  DATA 00,00
00572:  DATA 53,4D
00574:  DATA 46,20
00576:  DATA 64,61
00578:  DATA 74,61
0057A:  DATA 20,6C
0057C:  DATA 69,73
0057E:  DATA 74,20
00580:  DATA 69,73
00582:  DATA 20,66
00584:  DATA 75,6C
00586:  DATA 6C,21
00588:  DATA 21,21
0058A:  DATA 0D,0A
0058C:  DATA 00,00
0058E:  DATA 53,4D
00590:  DATA 46,20
00592:  DATA 64,61
00594:  DATA 74,61
00596:  DATA 20,6C
00598:  DATA 69,73
0059A:  DATA 74,20
0059C:  DATA 69,73
0059E:  DATA 20,65
005A0:  DATA 6D,70
005A2:  DATA 74,79
005A4:  DATA 0D,0A
005A6:  DATA 00,00
*
00618:  DATA 55,41
0061A:  DATA 52,54
0061C:  DATA 20,49
0061E:  DATA 6E,69
00620:  DATA 74,69
00622:  DATA 61,6C
00624:  DATA 69,7A
00626:  DATA 65,0D
00628:  DATA 0A,00
0062A:  DATA 09,43
0062C:  DATA 6F,6D
0062E:  DATA 70,6C
00630:  DATA 65,74
00632:  DATA 65,0D
00634:  DATA 0A,00
00636:  DATA 0D,0A
00638:  DATA 53,74
0063A:  DATA 61,72
0063C:  DATA 74,20
0063E:  DATA 6D,61
00640:  DATA 6B,65
00642:  DATA 5F,72
00644:  DATA 65,63
00646:  DATA 65,69
00648:  DATA 76,65
0064A:  DATA 5F,63
0064C:  DATA 6F,6D
0064E:  DATA 6D,61
00650:  DATA 6E,64
00652:  DATA 0D,0A
00654:  DATA 00,00
00656:  DATA 09,5B
00658:  DATA 42,4F
0065A:  DATA 53,53
0065C:  DATA 5D,20
0065E:  DATA 3E,3E
00660:  DATA 3E,20
00662:  DATA 00,00
00664:  DATA 45,6E
00666:  DATA 64,20
00668:  DATA 6D,61
0066A:  DATA 6B,65
0066C:  DATA 5F,72
0066E:  DATA 65,63
00670:  DATA 69,76
00672:  DATA 65,5F
00674:  DATA 63,6F
00676:  DATA 6D,6D
00678:  DATA 61,6E
0067A:  DATA 64,0D
0067C:  DATA 0A,0D
0067E:  DATA 0A,00
00680:  DATA 73,69
00682:  DATA 67,6E
00684:  DATA 61,6C
00686:  DATA 20,65
00688:  DATA 6E,64
0068A:  DATA 20,77
0068C:  DATA 69,74
0068E:  DATA 68,20
00690:  DATA 53,46
00692:  DATA 44,0D
00694:  DATA 0A,00
00696:  DATA 64,6F
00698:  DATA 6E,27
0069A:  DATA 74,20
0069C:  DATA 66,69
0069E:  DATA 6E,64
006A0:  DATA 20,53
006A2:  DATA 46,44
006A4:  DATA 0D,0A
006A6:  DATA 00,00
006A8:  DATA 09,2D
006AA:  DATA 3E,20
006AC:  DATA 49,6E
006AE:  DATA 76,61
006B0:  DATA 6C,69
006B2:  DATA 64,20
006B4:  DATA 46,72
006B6:  DATA 61,6D
006B8:  DATA 65,20
006BA:  DATA 49,44
006BC:  DATA 20,72
006BE:  DATA 65,63
006C0:  DATA 65,69
006C2:  DATA 76,65
006C4:  DATA 64,3A
006C6:  DATA 20,25
006C8:  DATA 58,0D
006CA:  DATA 0A,00
006CC:  DATA 09,2D
006CE:  DATA 3E,20
006D0:  DATA 43,52
006D2:  DATA 43,20
006D4:  DATA 65,72
006D6:  DATA 72,6F
006D8:  DATA 72,21
006DA:  DATA 0D,0A
006DC:  DATA 00,00
006DE:  DATA 09,09
006E0:  DATA 2D,3E
006E2:  DATA 20,72
006E4:  DATA 65,63
006E6:  DATA 65,69
006E8:  DATA 76,65
006EA:  DATA 64,20
006EC:  DATA 43,52
006EE:  DATA 43,3A
006F0:  DATA 20,25
006F2:  DATA 58,0D
006F4:  DATA 0A,00
006F6:  DATA 09,09
006F8:  DATA 20,20
006FA:  DATA 20,63
006FC:  DATA 6F,6C
006FE:  DATA 6C,65
00700:  DATA 63,74
00702:  DATA 20,43
00704:  DATA 52,43
00706:  DATA 20,3A
00708:  DATA 20,25
0070A:  DATA 58,0D
0070C:  DATA 0A,00
0070E:  DATA 09,2D
00710:  DATA 3E,20
00712:  DATA 49,6E
00714:  DATA 76,61
00716:  DATA 6C,69
00718:  DATA 64,20
0071A:  DATA 64,65
0071C:  DATA 76,69
0071E:  DATA 63,65
00720:  DATA 20,49
00722:  DATA 44,20
00724:  DATA 72,65
00726:  DATA 63,65
00728:  DATA 69,76
0072A:  DATA 65,64
0072C:  DATA 0D,0A
0072E:  DATA 00,00
00730:  DATA 09,09
00732:  DATA 2D,3E
00734:  DATA 20,72
00736:  DATA 65,63
00738:  DATA 65,69
0073A:  DATA 76,65
0073C:  DATA 64,3A
0073E:  DATA 20,20
00740:  DATA 20,20
00742:  DATA 20,25
00744:  DATA 58,0D
00746:  DATA 0A,00
00748:  DATA 09,09
0074A:  DATA 20,20
0074C:  DATA 20,4D
0074E:  DATA 79,20
00750:  DATA 64,65
00752:  DATA 76,69
00754:  DATA 63,65
00756:  DATA 20,49
00758:  DATA 44,3A
0075A:  DATA 20,25
0075C:  DATA 58,0D
0075E:  DATA 0A,00
00760:  DATA 09,5B
00762:  DATA 42,4F
00764:  DATA 53,53
00766:  DATA 5D,20
00768:  DATA 3C,3C
0076A:  DATA 3C,20
0076C:  DATA 00,00
0076E:  DATA 53,74
00770:  DATA 61,72
00772:  DATA 74,20
00774:  DATA 53,4D
00776:  DATA 46,20
00778:  DATA 75,73
0077A:  DATA 69,6E
0077C:  DATA 67,20
0077E:  DATA 72,65
00780:  DATA 71,65
00782:  DATA 73,74
00784:  DATA 20,73
00786:  DATA 65,61
00788:  DATA 71,75
0078A:  DATA 65,6E
0078C:  DATA 63,65
0078E:  DATA 0D,0A
00790:  DATA 00,00
00792:  DATA 45,72
00794:  DATA 72,6F
00796:  DATA 72,21
00798:  DATA 20,52
0079A:  DATA 65,63
0079C:  DATA 65,69
0079E:  DATA 76,69
007A0:  DATA 6E,67
007A2:  DATA 20,63
007A4:  DATA 6F,6D
007A6:  DATA 6D,61
007A8:  DATA 6E,64
007AA:  DATA 20,69
007AC:  DATA 6E,63
007AE:  DATA 6F,6E
007B0:  DATA 73,69
007B2:  DATA 73,74
007B4:  DATA 65,6E
007B6:  DATA 74,20
007B8:  DATA 77,69
007BA:  DATA 74,68
007BC:  DATA 20,74
007BE:  DATA 68,65
007C0:  DATA 20,64
007C2:  DATA 65,73
007C4:  DATA 69,67
007C6:  DATA 6E,0D
007C8:  DATA 0A,00
007CA:  DATA 53,4D
007CC:  DATA 46,20
007CE:  DATA 75,73
007D0:  DATA 65,20
007D2:  DATA 72,65
007D4:  DATA 71,75
007D6:  DATA 65,73
007D8:  DATA 74,20
007DA:  DATA 61,6C
007DC:  DATA 6C,6F
007DE:  DATA 77,65
007E0:  DATA 64,0D
007E2:  DATA 0A,00
007E4:  DATA 53,4D
007E6:  DATA 46,20
007E8:  DATA 75,73
007EA:  DATA 65,20
007EC:  DATA 72,65
007EE:  DATA 71,75
007F0:  DATA 65,73
007F2:  DATA 74,20
007F4:  DATA 64,65
007F6:  DATA 6E,79
007F8:  DATA 65,64
007FA:  DATA 0D,0A
007FC:  DATA 00,00
007FE:  DATA 52,65
00800:  DATA 74,72
00802:  DATA 79,20
00804:  DATA 72,65
00806:  DATA 71,75
00808:  DATA 65,73
0080A:  DATA 74,20
0080C:  DATA 74,6F
0080E:  DATA 20,42
00810:  DATA 4F,53
00812:  DATA 53,20
00814:  DATA 50,49
00816:  DATA 43,0D
00818:  DATA 0A,00
0081A:  DATA 45,72
0081C:  DATA 72,6F
0081E:  DATA 72,21
00820:  DATA 20,52
00822:  DATA 65,63
00824:  DATA 65,69
00826:  DATA 76,69
00828:  DATA 6E,67
0082A:  DATA 20,63
0082C:  DATA 6F,6D
0082E:  DATA 6D,61
00830:  DATA 6E,64
00832:  DATA 20,69
00834:  DATA 6E,63
00836:  DATA 6F,6E
00838:  DATA 73,69
0083A:  DATA 73,74
0083C:  DATA 65,6E
0083E:  DATA 74,20
00840:  DATA 77,69
00842:  DATA 74,68
00844:  DATA 20,74
00846:  DATA 68,65
00848:  DATA 20,64
0084A:  DATA 65,73
0084C:  DATA 69,67
0084E:  DATA 6E,0D
00850:  DATA 0A,00
00852:  DATA 45,6E
00854:  DATA 64,20
00856:  DATA 53,4D
00858:  DATA 46,20
0085A:  DATA 75,73
0085C:  DATA 69,6E
0085E:  DATA 67,20
00860:  DATA 72,65
00862:  DATA 71,65
00864:  DATA 73,74
00866:  DATA 20,73
00868:  DATA 65,61
0086A:  DATA 71,75
0086C:  DATA 65,6E
0086E:  DATA 63,65
00870:  DATA 0D,0A
00872:  DATA 00,00
00874:  DATA 4D,49
00876:  DATA 53,53
00878:  DATA 49,4F
0087A:  DATA 4E,20
0087C:  DATA 46,4C
0087E:  DATA 41,53
00880:  DATA 48,20
00882:  DATA 49,6E
00884:  DATA 69,74
00886:  DATA 69,61
00888:  DATA 6C,69
0088A:  DATA 7A,65
0088C:  DATA 0D,0A
0088E:  DATA 00,00
00890:  DATA 09,5B
00892:  DATA 4D,49
00894:  DATA 53,20
00896:  DATA 46,4D
00898:  DATA 5D,20
0089A:  DATA 63,6F
0089C:  DATA 6E,6E
0089E:  DATA 65,63
008A0:  DATA 74,20
008A2:  DATA 65,72
008A4:  DATA 72,6F
008A6:  DATA 72,21
008A8:  DATA 0D,0A
008AA:  DATA 00,00
008AC:  DATA 09,5B
008AE:  DATA 53,4D
008B0:  DATA 46,5D
008B2:  DATA 20,63
008B4:  DATA 6F,6E
008B6:  DATA 6E,65
008B8:  DATA 63,74
008BA:  DATA 20,65
008BC:  DATA 72,72
008BE:  DATA 6F,72
008C0:  DATA 21,0D
008C2:  DATA 0A,00
008C4:  DATA 09,7C
008C6:  DATA 20,53
008C8:  DATA 4D,46
008CA:  DATA 20,20
008CC:  DATA 7C,20
008CE:  DATA 50,49
008D0:  DATA 43,4C
008D2:  DATA 4F,47
008D4:  DATA 20,7C
008D6:  DATA 20,55
008D8:  DATA 73,65
008DA:  DATA 20,43
008DC:  DATA 6F,75
008DE:  DATA 6E,74
008E0:  DATA 65,72
008E2:  DATA 20,20
008E4:  DATA 20,20
008E6:  DATA 20,20
008E8:  DATA 3A,20
008EA:  DATA 30,78
008EC:  DATA 25,30
008EE:  DATA 38,4C
008F0:  DATA 58,0D
008F2:  DATA 0A,00
008F4:  DATA 09,7C
008F6:  DATA 20,53
008F8:  DATA 4D,46
008FA:  DATA 20,20
008FC:  DATA 7C,20
008FE:  DATA 50,49
00900:  DATA 43,4C
00902:  DATA 4F,47
00904:  DATA 20,7C
00906:  DATA 20,4C
00908:  DATA 6F,6F
0090A:  DATA 70,20
0090C:  DATA 43,6F
0090E:  DATA 75,6E
00910:  DATA 74,65
00912:  DATA 72,20
00914:  DATA 20,20
00916:  DATA 20,20
00918:  DATA 3A,20
0091A:  DATA 30,78
0091C:  DATA 25,30
0091E:  DATA 32,58
00920:  DATA 0D,0A
00922:  DATA 00,00
00924:  DATA 09,7C
00926:  DATA 20,53
00928:  DATA 4D,46
0092A:  DATA 20,20
0092C:  DATA 7C,20
0092E:  DATA 4D,45
00930:  DATA 41,53
00932:  DATA 20,20
00934:  DATA 20,7C
00936:  DATA 20,55
00938:  DATA 73,65
0093A:  DATA 20,43
0093C:  DATA 6F,75
0093E:  DATA 6E,74
00940:  DATA 65,72
00942:  DATA 20,20
00944:  DATA 20,20
00946:  DATA 20,20
00948:  DATA 3A,20
0094A:  DATA 30,78
0094C:  DATA 25,30
0094E:  DATA 38,4C
00950:  DATA 58,0D
00952:  DATA 0A,00
00954:  DATA 09,7C
00956:  DATA 20,53
00958:  DATA 4D,46
0095A:  DATA 20,20
0095C:  DATA 7C,20
0095E:  DATA 4D,45
00960:  DATA 41,53
00962:  DATA 20,20
00964:  DATA 20,7C
00966:  DATA 20,4C
00968:  DATA 6F,6F
0096A:  DATA 70,20
0096C:  DATA 43,6F
0096E:  DATA 75,6E
00970:  DATA 74,65
00972:  DATA 72,20
00974:  DATA 20,20
00976:  DATA 20,20
00978:  DATA 3A,20
0097A:  DATA 30,78
0097C:  DATA 25,30
0097E:  DATA 32,58
00980:  DATA 0D,0A
00982:  DATA 00,00
00984:  DATA 09,7C
00986:  DATA 20,4D
00988:  DATA 49,53
0098A:  DATA 46,20
0098C:  DATA 7C,20
0098E:  DATA 50,49
00990:  DATA 43,4C
00992:  DATA 4F,47
00994:  DATA 20,7C
00996:  DATA 20,55
00998:  DATA 73,65
0099A:  DATA 20,43
0099C:  DATA 6F,75
0099E:  DATA 6E,74
009A0:  DATA 65,72
009A2:  DATA 20,20
009A4:  DATA 20,20
009A6:  DATA 20,20
009A8:  DATA 3A,20
009AA:  DATA 30,78
009AC:  DATA 25,30
009AE:  DATA 38,4C
009B0:  DATA 58,0D
009B2:  DATA 0A,00
009B4:  DATA 09,7C
009B6:  DATA 20,4D
009B8:  DATA 49,53
009BA:  DATA 46,20
009BC:  DATA 7C,20
009BE:  DATA 50,49
009C0:  DATA 43,4C
009C2:  DATA 4F,47
009C4:  DATA 20,7C
009C6:  DATA 20,55
009C8:  DATA 6E,63
009CA:  DATA 6F,70
009CC:  DATA 79,65
009CE:  DATA 64,20
009D0:  DATA 43,6F
009D2:  DATA 75,6E
009D4:  DATA 74,65
009D6:  DATA 72,20
009D8:  DATA 3A,20
009DA:  DATA 30,78
009DC:  DATA 25,30
009DE:  DATA 38,4C
009E0:  DATA 58,0D
009E2:  DATA 0A,00
009E4:  DATA 09,7C
009E6:  DATA 20,4D
009E8:  DATA 49,53
009EA:  DATA 46,20
009EC:  DATA 7C,20
009EE:  DATA 50,49
009F0:  DATA 43,4C
009F2:  DATA 4F,47
009F4:  DATA 20,7C
009F6:  DATA 20,4C
009F8:  DATA 6F,6F
009FA:  DATA 70,20
009FC:  DATA 43,6F
009FE:  DATA 75,6E
00A00:  DATA 74,65
00A02:  DATA 72,20
00A04:  DATA 20,20
00A06:  DATA 20,20
00A08:  DATA 3A,20
00A0A:  DATA 30,78
00A0C:  DATA 25,30
00A0E:  DATA 32,58
00A10:  DATA 0D,0A
00A12:  DATA 00,00
00A14:  DATA 09,7C
00A16:  DATA 20,4D
00A18:  DATA 49,53
00A1A:  DATA 46,20
00A1C:  DATA 7C,20
00A1E:  DATA 50,49
00A20:  DATA 43,4C
00A22:  DATA 4F,47
00A24:  DATA 20,7C
00A26:  DATA 20,57
00A28:  DATA 72,69
00A2A:  DATA 74,65
00A2C:  DATA 20,43
00A2E:  DATA 6F,75
00A30:  DATA 6E,74
00A32:  DATA 65,72
00A34:  DATA 20,20
00A36:  DATA 20,20
00A38:  DATA 3A,20
00A3A:  DATA 30,78
00A3C:  DATA 25,30
00A3E:  DATA 32,58
00A40:  DATA 0D,0A
00A42:  DATA 00,00
00A44:  DATA 09,7C
00A46:  DATA 20,4D
00A48:  DATA 49,53
00A4A:  DATA 46,20
00A4C:  DATA 7C,20
00A4E:  DATA 4D,45
00A50:  DATA 41,53
00A52:  DATA 20,20
00A54:  DATA 20,7C
00A56:  DATA 20,55
00A58:  DATA 73,65
00A5A:  DATA 20,43
00A5C:  DATA 6F,75
00A5E:  DATA 6E,74
00A60:  DATA 65,72
00A62:  DATA 20,20
00A64:  DATA 20,20
00A66:  DATA 20,20
00A68:  DATA 3A,20
00A6A:  DATA 30,78
00A6C:  DATA 25,30
00A6E:  DATA 38,4C
00A70:  DATA 58,0D
00A72:  DATA 0A,00
00A74:  DATA 09,7C
00A76:  DATA 20,4D
00A78:  DATA 49,53
00A7A:  DATA 46,20
00A7C:  DATA 7C,20
00A7E:  DATA 4D,45
00A80:  DATA 41,53
00A82:  DATA 20,20
00A84:  DATA 20,7C
00A86:  DATA 20,55
00A88:  DATA 6E,63
00A8A:  DATA 6F,70
00A8C:  DATA 79,65
00A8E:  DATA 64,20
00A90:  DATA 43,6F
00A92:  DATA 75,6E
00A94:  DATA 74,65
00A96:  DATA 72,20
00A98:  DATA 3A,20
00A9A:  DATA 30,78
00A9C:  DATA 25,30
00A9E:  DATA 38,4C
00AA0:  DATA 58,0D
00AA2:  DATA 0A,00
00AA4:  DATA 09,7C
00AA6:  DATA 20,4D
00AA8:  DATA 49,53
00AAA:  DATA 46,20
00AAC:  DATA 7C,20
00AAE:  DATA 4D,45
00AB0:  DATA 41,53
00AB2:  DATA 20,20
00AB4:  DATA 20,7C
00AB6:  DATA 20,4C
00AB8:  DATA 6F,6F
00ABA:  DATA 70,20
00ABC:  DATA 43,6F
00ABE:  DATA 75,6E
00AC0:  DATA 74,65
00AC2:  DATA 72,20
00AC4:  DATA 20,20
00AC6:  DATA 20,20
00AC8:  DATA 3A,20
00ACA:  DATA 30,78
00ACC:  DATA 25,30
00ACE:  DATA 32,58
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 09,43
00AD6:  DATA 6F,6D
00AD8:  DATA 70,6C
00ADA:  DATA 65,74
00ADC:  DATA 65,0D
00ADE:  DATA 0A,00
00AE0:  DATA 4D,69
00AE2:  DATA 73,73
00AE4:  DATA 69,6F
00AE6:  DATA 6E,20
00AE8:  DATA 46,6C
00AEA:  DATA 61,73
00AEC:  DATA 68,20
00AEE:  DATA 69,73
00AF0:  DATA 20,6E
00AF2:  DATA 6F,74
00AF4:  DATA 20,63
00AF6:  DATA 6F,6E
00AF8:  DATA 6E,65
00AFA:  DATA 63,74
00AFC:  DATA 65,64
00AFE:  DATA 0D,0A
00B00:  DATA 00,00
00B02:  DATA 57,72
00B04:  DATA 69,74
00B06:  DATA 65,20
00B08:  DATA 4D,49
00B0A:  DATA 53,46
00B0C:  DATA 20,41
00B0E:  DATA 64,64
00B10:  DATA 72,65
00B12:  DATA 73,73
00B14:  DATA 20,41
00B16:  DATA 72,65
00B18:  DATA 61,20
00B1A:  DATA 43,6F
00B1C:  DATA 6D,70
00B1E:  DATA 6C,65
00B20:  DATA 74,65
00B22:  DATA 0D,0A
00B24:  DATA 00,00
00B26:  DATA 49,4F
00B28:  DATA 20,49
00B2A:  DATA 6E,69
00B2C:  DATA 74,69
00B2E:  DATA 61,6C
00B30:  DATA 69,7A
00B32:  DATA 65,0D
00B34:  DATA 0A,00
00B36:  DATA 09,43
00B38:  DATA 6F,6D
00B3A:  DATA 70,6C
00B3C:  DATA 65,74
00B3E:  DATA 65,0D
00B40:  DATA 0A,00
00B42:  DATA 41,44
00B44:  DATA 43,20
00B46:  DATA 49,6E
00B48:  DATA 69,74
00B4A:  DATA 69,61
00B4C:  DATA 6C,69
00B4E:  DATA 7A,65
00B50:  DATA 0D,0A
00B52:  DATA 00,00
00B54:  DATA 09,43
00B56:  DATA 6F,6D
00B58:  DATA 70,6C
00B5A:  DATA 65,74
00B5C:  DATA 65,0D
00B5E:  DATA 0A,00
00B60:  DATA 53,74
00B62:  DATA 61,72
00B64:  DATA 74,20
00B66:  DATA 53,57
00B68:  DATA 45,45
00B6A:  DATA 50,0D
00B6C:  DATA 0A,00
00B6E:  DATA 09,53
00B70:  DATA 77,65
00B72:  DATA 65,70
00B74:  DATA 20,73
00B76:  DATA 74,65
00B78:  DATA 70,20
00B7A:  DATA 3A,20
00B7C:  DATA 25,75
00B7E:  DATA 0D,0A
00B80:  DATA 00,00
00B82:  DATA 53,74
00B84:  DATA 61,72
00B86:  DATA 74,20
00B88:  DATA 54,45
00B8A:  DATA 53,54
00B8C:  DATA 20,53
00B8E:  DATA 57,45
00B90:  DATA 45,50
00B92:  DATA 0D,0A
00B94:  DATA 00,00
00B96:  DATA 73,74
00B98:  DATA 65,70
00B9A:  DATA 2C,20
00B9C:  DATA 76,6F
00B9E:  DATA 6C,74
00BA0:  DATA 61,67
00BA2:  DATA 65,2C
00BA4:  DATA 20,63
00BA6:  DATA 75,72
00BA8:  DATA 72,65
00BAA:  DATA 6E,74
00BAC:  DATA 0D,0A
00BAE:  DATA 00,00
00BB0:  DATA 53,74
00BB2:  DATA 61,72
00BB4:  DATA 74,20
00BB6:  DATA 41,44
00BB8:  DATA 43,20
00BBA:  DATA 54,45
00BBC:  DATA 53,54
00BBE:  DATA 0D,0A
00BC0:  DATA 00,00
00BC2:  DATA 41,44
00BC4:  DATA 43,20
00BC6:  DATA 56,6F
00BC8:  DATA 6C,74
00BCA:  DATA 61,67
00BCC:  DATA 65,3A
00BCE:  DATA 20,25
00BD0:  DATA 30,34
00BD2:  DATA 4C,58
00BD4:  DATA 0D,0A
00BD6:  DATA 00,00
00BD8:  DATA 41,44
00BDA:  DATA 43,20
00BDC:  DATA 43,75
00BDE:  DATA 72,72
00BE0:  DATA 65,6E
00BE2:  DATA 74,3A
00BE4:  DATA 20,25
00BE6:  DATA 30,34
00BE8:  DATA 4C,58
00BEA:  DATA 0D,0A
00BEC:  DATA 00,00
00BEE:  DATA 41,44
00BF0:  DATA 43,20
00BF2:  DATA 43,49
00BF4:  DATA 47,53
00BF6:  DATA 31,20
00BF8:  DATA 41,6D
00BFA:  DATA 70,3A
00BFC:  DATA 20,25
00BFE:  DATA 30,34
00C00:  DATA 4C,58
00C02:  DATA 0D,0A
00C04:  DATA 00,00
00C06:  DATA 41,44
00C08:  DATA 43,20
00C0A:  DATA 43,49
00C0C:  DATA 47,53
00C0E:  DATA 31,20
00C10:  DATA 56,52
00C12:  DATA 45,46
00C14:  DATA 3A,20
00C16:  DATA 25,30
00C18:  DATA 34,4C
00C1A:  DATA 58,0D
00C1C:  DATA 0A,00
00C1E:  DATA 53,74
00C20:  DATA 61,72
00C22:  DATA 74,20
00C24:  DATA 53,57
00C26:  DATA 45,45
00C28:  DATA 50,20
00C2A:  DATA 32,70
00C2C:  DATA 6F,72
00C2E:  DATA 74,73
00C30:  DATA 0D,0A
00C32:  DATA 00,00
00C34:  DATA 09,53
00C36:  DATA 77,65
00C38:  DATA 65,70
00C3A:  DATA 20,73
00C3C:  DATA 74,65
00C3E:  DATA 70,20
00C40:  DATA 3A,20
00C42:  DATA 25,75
00C44:  DATA 0D,0A
00C46:  DATA 00,00
00C48:  DATA 45,4E
00C4A:  DATA 44,20
00C4C:  DATA 53,57
00C4E:  DATA 45,45
00C50:  DATA 50,20
00C52:  DATA 32,70
00C54:  DATA 6F,72
00C56:  DATA 74,0D
00C58:  DATA 0A,00
00C5A:  DATA 53,74
00C5C:  DATA 61,72
00C5E:  DATA 74,20
00C60:  DATA 43,49
00C62:  DATA 47,53
00C64:  DATA 20,64
00C66:  DATA 61,74
00C68:  DATA 61,20
00C6A:  DATA 63,6F
00C6C:  DATA 6E,76
00C6E:  DATA 65,72
00C70:  DATA 73,69
00C72:  DATA 6F,6E
00C74:  DATA 0D,0A
00C76:  DATA 00,00
00C78:  DATA 53,74
00C7A:  DATA 61,72
00C7C:  DATA 74,20
00C7E:  DATA 53,57
00C80:  DATA 45,45
00C82:  DATA 50,20
00C84:  DATA 50,4F
00C86:  DATA 52,54
00C88:  DATA 31,0D
00C8A:  DATA 0A,00
00C8C:  DATA 09,53
00C8E:  DATA 77,65
00C90:  DATA 65,70
00C92:  DATA 20,73
00C94:  DATA 74,65
00C96:  DATA 70,20
00C98:  DATA 3A,20
00C9A:  DATA 25,75
00C9C:  DATA 0D,0A
00C9E:  DATA 00,00
00CA0:  DATA 45,4E
00CA2:  DATA 44,20
00CA4:  DATA 53,57
00CA6:  DATA 45,45
00CA8:  DATA 50,20
00CAA:  DATA 50,4F
00CAC:  DATA 52,54
00CAE:  DATA 31,0D
00CB0:  DATA 0A,00
00CB2:  DATA 53,74
00CB4:  DATA 61,72
00CB6:  DATA 74,20
00CB8:  DATA 43,49
00CBA:  DATA 47,53
00CBC:  DATA 20,64
00CBE:  DATA 61,74
00CC0:  DATA 61,20
00CC2:  DATA 63,6F
00CC4:  DATA 6E,76
00CC6:  DATA 65,72
00CC8:  DATA 73,69
00CCA:  DATA 6F,6E
00CCC:  DATA 0D,0A
00CCE:  DATA 00,00
00CD0:  DATA 45,6E
00CD2:  DATA 64,20
00CD4:  DATA 43,49
00CD6:  DATA 47,53
00CD8:  DATA 20,64
00CDA:  DATA 61,74
00CDC:  DATA 61,20
00CDE:  DATA 63,6F
00CE0:  DATA 6E,76
00CE2:  DATA 65,72
00CE4:  DATA 73,69
00CE6:  DATA 6F,6E
00CE8:  DATA 0D,0A
00CEA:  DATA 00,00
00CEC:  DATA 53,74
00CEE:  DATA 61,72
00CF0:  DATA 74,20
00CF2:  DATA 53,57
00CF4:  DATA 45,45
00CF6:  DATA 50,20
00CF8:  DATA 50,4F
00CFA:  DATA 52,54
00CFC:  DATA 32,0D
00CFE:  DATA 0A,00
00D00:  DATA 09,53
00D02:  DATA 77,65
00D04:  DATA 65,70
00D06:  DATA 20,73
00D08:  DATA 74,65
00D0A:  DATA 70,20
00D0C:  DATA 3A,20
00D0E:  DATA 25,75
00D10:  DATA 0D,0A
00D12:  DATA 00,00
00D14:  DATA 45,4E
00D16:  DATA 44,20
00D18:  DATA 53,57
00D1A:  DATA 45,45
00D1C:  DATA 50,20
00D1E:  DATA 50,4F
00D20:  DATA 52,54
00D22:  DATA 32,0D
00D24:  DATA 0A,00
00D26:  DATA 53,74
00D28:  DATA 61,72
00D2A:  DATA 74,20
00D2C:  DATA 43,49
00D2E:  DATA 47,53
00D30:  DATA 20,64
00D32:  DATA 61,74
00D34:  DATA 61,20
00D36:  DATA 63,6F
00D38:  DATA 6E,76
00D3A:  DATA 65,72
00D3C:  DATA 73,69
00D3E:  DATA 6F,6E
00D40:  DATA 0D,0A
00D42:  DATA 00,00
00D44:  DATA 5B,50
00D46:  DATA 49,43
00D48:  DATA 4C,4F
00D4A:  DATA 47,5D
00D4C:  DATA 20,3A
00D4E:  DATA 20,00
00D50:  DATA 4D,69
00D52:  DATA 73,73
00D54:  DATA 69,6F
00D56:  DATA 6E,20
00D58:  DATA 46,6C
00D5A:  DATA 61,73
00D5C:  DATA 68,20
00D5E:  DATA 69,73
00D60:  DATA 20,6E
00D62:  DATA 6F,74
00D64:  DATA 20,63
00D66:  DATA 6F,6E
00D68:  DATA 6E,65
00D6A:  DATA 63,74
00D6C:  DATA 65,64
00D6E:  DATA 0D,0A
00D70:  DATA 00,00
00D72:  DATA 53,74
00D74:  DATA 61,72
00D76:  DATA 74,20
00D78:  DATA 46,6C
00D7A:  DATA 61,73
00D7C:  DATA 68,20
00D7E:  DATA 45,72
00D80:  DATA 61,73
00D82:  DATA 65,20
00D84:  DATA 41,6C
00D86:  DATA 6C,0D
00D88:  DATA 0A,00
00D8A:  DATA 45,6E
00D8C:  DATA 64,20
00D8E:  DATA 46,6C
00D90:  DATA 61,73
00D92:  DATA 68,20
00D94:  DATA 45,72
00D96:  DATA 61,73
00D98:  DATA 65,20
00D9A:  DATA 41,6C
00D9C:  DATA 6C,0D
00D9E:  DATA 0A,00
00DA0:  DATA 53,74
00DA2:  DATA 61,72
00DA4:  DATA 74,20
00DA6:  DATA 46,6C
00DA8:  DATA 61,73
00DAA:  DATA 68,20
00DAC:  DATA 45,72
00DAE:  DATA 61,73
00DB0:  DATA 65,20
00DB2:  DATA 31,20
00DB4:  DATA 53,65
00DB6:  DATA 63,74
00DB8:  DATA 6F,72
00DBA:  DATA 0D,0A
00DBC:  DATA 00,00
00DBE:  DATA 09,53
00DC0:  DATA 65,63
00DC2:  DATA 74,6F
00DC4:  DATA 72,20
00DC6:  DATA 41,64
00DC8:  DATA 64,72
00DCA:  DATA 65,73
00DCC:  DATA 73,3A
00DCE:  DATA 20,30
00DD0:  DATA 78,25
00DD2:  DATA 30,38
00DD4:  DATA 4C,58
00DD6:  DATA 0D,0A
00DD8:  DATA 00,00
00DDA:  DATA 45,6E
00DDC:  DATA 64,20
00DDE:  DATA 46,6C
00DE0:  DATA 61,73
00DE2:  DATA 68,20
00DE4:  DATA 45,72
00DE6:  DATA 61,73
00DE8:  DATA 65,20
00DEA:  DATA 31,20
00DEC:  DATA 53,65
00DEE:  DATA 63,74
00DF0:  DATA 6F,72
00DF2:  DATA 0D,0A
00DF4:  DATA 00,00
00DF6:  DATA 53,74
00DF8:  DATA 61,72
00DFA:  DATA 74,20
00DFC:  DATA 46,6C
00DFE:  DATA 61,73
00E00:  DATA 68,20
00E02:  DATA 43,6F
00E04:  DATA 70,79
00E06:  DATA 20,31
00E08:  DATA 20,53
00E0A:  DATA 65,63
00E0C:  DATA 74,6F
00E0E:  DATA 72,0D
00E10:  DATA 0A,00
00E12:  DATA 09,53
00E14:  DATA 75,62
00E16:  DATA 73,65
00E18:  DATA 63,74
00E1A:  DATA 6F,72
00E1C:  DATA 20,41
00E1E:  DATA 64,64
00E20:  DATA 72,65
00E22:  DATA 73,73
00E24:  DATA 3A,20
00E26:  DATA 30,78
00E28:  DATA 25,30
00E2A:  DATA 38,4C
00E2C:  DATA 58,0D
00E2E:  DATA 0A,00
00E30:  DATA 45,6E
00E32:  DATA 64,20
00E34:  DATA 46,6C
00E36:  DATA 61,73
00E38:  DATA 68,20
00E3A:  DATA 43,6F
00E3C:  DATA 70,79
00E3E:  DATA 20,31
00E40:  DATA 20,53
00E42:  DATA 65,63
00E44:  DATA 74,6F
00E46:  DATA 72,0D
00E48:  DATA 0A,00
00E4A:  DATA 53,74
00E4C:  DATA 61,72
00E4E:  DATA 74,20
00E50:  DATA 46,6C
00E52:  DATA 61,73
00E54:  DATA 68,20
00E56:  DATA 45,72
00E58:  DATA 61,73
00E5A:  DATA 65,20
00E5C:  DATA 36,34
00E5E:  DATA 6B,42
00E60:  DATA 79,74
00E62:  DATA 65,20
00E64:  DATA 53,75
00E66:  DATA 62,73
00E68:  DATA 65,63
00E6A:  DATA 74,6F
00E6C:  DATA 72,0D
00E6E:  DATA 0A,00
00E70:  DATA 09,53
00E72:  DATA 75,62
00E74:  DATA 73,65
00E76:  DATA 63,74
00E78:  DATA 6F,72
00E7A:  DATA 20,41
00E7C:  DATA 64,64
00E7E:  DATA 72,65
00E80:  DATA 73,73
00E82:  DATA 3A,20
00E84:  DATA 30,78
00E86:  DATA 25,30
00E88:  DATA 38,4C
00E8A:  DATA 58,0D
00E8C:  DATA 0A,00
00E8E:  DATA 45,6E
00E90:  DATA 64,20
00E92:  DATA 46,6C
00E94:  DATA 61,73
00E96:  DATA 68,20
00E98:  DATA 45,72
00E9A:  DATA 61,73
00E9C:  DATA 65,20
00E9E:  DATA 36,34
00EA0:  DATA 6B,42
00EA2:  DATA 79,74
00EA4:  DATA 65,20
00EA6:  DATA 53,75
00EA8:  DATA 62,73
00EAA:  DATA 65,63
00EAC:  DATA 74,6F
00EAE:  DATA 72,0D
00EB0:  DATA 0A,00
00EB2:  DATA 53,74
00EB4:  DATA 61,72
00EB6:  DATA 74,20
00EB8:  DATA 46,6C
00EBA:  DATA 61,73
00EBC:  DATA 68,20
00EBE:  DATA 57,72
00EC0:  DATA 69,74
00EC2:  DATA 65,20
00EC4:  DATA 44,65
00EC6:  DATA 6D,6F
00EC8:  DATA 0D,0A
00ECA:  DATA 00,00
00ECC:  DATA 09,4D
00ECE:  DATA 4F,44
00ED0:  DATA 45,20
00ED2:  DATA 20,20
00ED4:  DATA 20,20
00ED6:  DATA 3A,20
00ED8:  DATA 25,30
00EDA:  DATA 32,58
00EDC:  DATA 0D,0A
00EDE:  DATA 00,00
00EE0:  DATA 09,41
00EE2:  DATA 64,64
00EE4:  DATA 72,65
00EE6:  DATA 73,73
00EE8:  DATA 20,20
00EEA:  DATA 3A,20
00EEC:  DATA 30,78
00EEE:  DATA 25,30
00EF0:  DATA 38,4C
00EF2:  DATA 58,0D
00EF4:  DATA 0A,00
00EF6:  DATA 09,50
00EF8:  DATA 61,63
00EFA:  DATA 6B,65
00EFC:  DATA 74,4E
00EFE:  DATA 75,6D
00F00:  DATA 3A,20
00F02:  DATA 30,78
00F04:  DATA 25,30
00F06:  DATA 34,4C
00F08:  DATA 58,0D
00F0A:  DATA 0A,00
00F0C:  DATA 57,72
00F0E:  DATA 69,74
00F10:  DATA 65,20
00F12:  DATA 44,61
00F14:  DATA 74,61
00F16:  DATA 0D,0A
00F18:  DATA 00,00
00F1A:  DATA 45,6E
00F1C:  DATA 64,20
00F1E:  DATA 46,6C
00F20:  DATA 61,73
00F22:  DATA 68,20
00F24:  DATA 57,72
00F26:  DATA 69,74
00F28:  DATA 65,20
00F2A:  DATA 44,65
00F2C:  DATA 6D,6F
00F2E:  DATA 0D,0A
00F30:  DATA 00,00
00F32:  DATA 53,74
00F34:  DATA 61,72
00F36:  DATA 74,20
00F38:  DATA 46,6C
00F3A:  DATA 61,73
00F3C:  DATA 68,20
00F3E:  DATA 57,72
00F40:  DATA 69,74
00F42:  DATA 65,20
00F44:  DATA 34,6B
00F46:  DATA 42,79
00F48:  DATA 74,65
00F4A:  DATA 20,53
00F4C:  DATA 75,62
00F4E:  DATA 73,65
00F50:  DATA 63,74
00F52:  DATA 6F,72
00F54:  DATA 0D,0A
00F56:  DATA 00,00
00F58:  DATA 45,6E
00F5A:  DATA 64,20
00F5C:  DATA 46,6C
00F5E:  DATA 61,73
00F60:  DATA 68,20
00F62:  DATA 57,72
00F64:  DATA 69,74
00F66:  DATA 65,20
00F68:  DATA 34,6B
00F6A:  DATA 42,79
00F6C:  DATA 74,65
00F6E:  DATA 20,53
00F70:  DATA 75,62
00F72:  DATA 73,65
00F74:  DATA 63,74
00F76:  DATA 6F,72
00F78:  DATA 0D,0A
00F7A:  DATA 00,00
00F7C:  DATA 53,74
00F7E:  DATA 61,72
00F80:  DATA 74,20
00F82:  DATA 46,6C
00F84:  DATA 61,73
00F86:  DATA 68,20
00F88:  DATA 52,65
00F8A:  DATA 61,64
00F8C:  DATA 0D,0A
00F8E:  DATA 00,00
00F90:  DATA 09,4D
00F92:  DATA 4F,44
00F94:  DATA 45,20
00F96:  DATA 20,20
00F98:  DATA 20,20
00F9A:  DATA 3A,20
00F9C:  DATA 25,30
00F9E:  DATA 32,58
00FA0:  DATA 0D,0A
00FA2:  DATA 00,00
00FA4:  DATA 09,41
00FA6:  DATA 64,64
00FA8:  DATA 72,65
00FAA:  DATA 73,73
00FAC:  DATA 20,20
00FAE:  DATA 3A,20
00FB0:  DATA 30,78
00FB2:  DATA 25,30
00FB4:  DATA 38,4C
00FB6:  DATA 58,0D
00FB8:  DATA 0A,00
00FBA:  DATA 09,50
00FBC:  DATA 61,63
00FBE:  DATA 6B,65
00FC0:  DATA 74,4E
00FC2:  DATA 75,6D
00FC4:  DATA 3A,20
00FC6:  DATA 30,78
00FC8:  DATA 25,30
00FCA:  DATA 34,4C
00FCC:  DATA 58,0D
00FCE:  DATA 0A,00
00FD0:  DATA 52,45
00FD2:  DATA 41,44
00FD4:  DATA 20,44
00FD6:  DATA 41,54
00FD8:  DATA 41,0D
00FDA:  DATA 0A,00
00FDC:  DATA 4D,69
00FDE:  DATA 73,73
00FE0:  DATA 69,6F
00FE2:  DATA 6E,20
00FE4:  DATA 46,6C
00FE6:  DATA 61,73
00FE8:  DATA 68,20
00FEA:  DATA 69,73
00FEC:  DATA 20,6E
00FEE:  DATA 6F,74
00FF0:  DATA 20,63
00FF2:  DATA 6F,6E
00FF4:  DATA 6E,65
00FF6:  DATA 63,74
00FF8:  DATA 65,64
00FFA:  DATA 0D,0A
00FFC:  DATA 00,00
00FFE:  DATA 45,6E
01000:  DATA 64,20
01002:  DATA 46,6C
01004:  DATA 61,73
01006:  DATA 68,20
01008:  DATA 52,65
0100A:  DATA 61,64
0100C:  DATA 0D,0A
0100E:  DATA 00,00
01010:  DATA 53,74
01012:  DATA 61,72
01014:  DATA 74,20
01016:  DATA 46,6C
01018:  DATA 61,73
0101A:  DATA 68,20
0101C:  DATA 52,65
0101E:  DATA 61,64
01020:  DATA 20,41
01022:  DATA 64,64
01024:  DATA 72,65
01026:  DATA 73,73
01028:  DATA 0D,0A
0102A:  DATA 00,00
0102C:  DATA 52,65
0102E:  DATA 61,64
01030:  DATA 20,44
01032:  DATA 61,74
01034:  DATA 61,3A
01036:  DATA 20,25
01038:  DATA 30,32
0103A:  DATA 58,20
0103C:  DATA 25,30
0103E:  DATA 32,58
01040:  DATA 20,25
01042:  DATA 30,32
01044:  DATA 58,20
01046:  DATA 25,30
01048:  DATA 32,58
0104A:  DATA 0D,0A
0104C:  DATA 00,00
0104E:  DATA 45,6E
01050:  DATA 64,20
01052:  DATA 46,6C
01054:  DATA 61,73
01056:  DATA 68,20
01058:  DATA 52,65
0105A:  DATA 61,64
0105C:  DATA 20,41
0105E:  DATA 64,64
01060:  DATA 72,65
01062:  DATA 73,73
01064:  DATA 0D,0A
01066:  DATA 00,00
01068:  DATA 53,74
0106A:  DATA 61,72
0106C:  DATA 74,20
0106E:  DATA 46,6C
01070:  DATA 61,73
01072:  DATA 68,20
01074:  DATA 45,72
01076:  DATA 61,73
01078:  DATA 65,20
0107A:  DATA 61,6E
0107C:  DATA 64,20
0107E:  DATA 52,65
01080:  DATA 73,65
01082:  DATA 74,0D
01084:  DATA 0A,00
01086:  DATA 45,6E
01088:  DATA 64,20
0108A:  DATA 46,6C
0108C:  DATA 61,73
0108E:  DATA 68,20
01090:  DATA 45,72
01092:  DATA 61,73
01094:  DATA 65,20
01096:  DATA 61,6E
01098:  DATA 64,20
0109A:  DATA 52,65
0109C:  DATA 73,65
0109E:  DATA 74,0D
010A0:  DATA 0A,00
010A2:  DATA 53,74
010A4:  DATA 61,72
010A6:  DATA 74,20
010A8:  DATA 46,6C
010AA:  DATA 61,73
010AC:  DATA 68,20
010AE:  DATA 53,4D
010B0:  DATA 46,20
010B2:  DATA 43,6F
010B4:  DATA 70,79
010B6:  DATA 0D,0A
010B8:  DATA 00,00
010BA:  DATA 45,6E
010BC:  DATA 64,20
010BE:  DATA 46,6C
010C0:  DATA 61,73
010C2:  DATA 68,20
010C4:  DATA 53,4D
010C6:  DATA 46,20
010C8:  DATA 43,6F
010CA:  DATA 70,79
010CC:  DATA 0D,0A
010CE:  DATA 00,00
010D0:  DATA 53,74
010D2:  DATA 61,72
010D4:  DATA 74,20
010D6:  DATA 46,6C
010D8:  DATA 61,73
010DA:  DATA 68,20
010DC:  DATA 53,4D
010DE:  DATA 46,20
010E0:  DATA 52,65
010E2:  DATA 61,64
010E4:  DATA 0D,0A
010E6:  DATA 00,00
010E8:  DATA 52,65
010EA:  DATA 61,64
010EC:  DATA 20,44
010EE:  DATA 61,74
010F0:  DATA 61,3A
010F2:  DATA 20,00
010F4:  DATA 0D,0A
010F6:  DATA 45,6E
010F8:  DATA 64,20
010FA:  DATA 46,6C
010FC:  DATA 61,73
010FE:  DATA 68,20
01100:  DATA 53,4D
01102:  DATA 46,20
01104:  DATA 52,65
01106:  DATA 61,64
01108:  DATA 0D,0A
0110A:  DATA 00,00
0110C:  DATA 53,74
0110E:  DATA 61,72
01110:  DATA 74,20
01112:  DATA 46,6C
01114:  DATA 61,73
01116:  DATA 68,20
01118:  DATA 53,4D
0111A:  DATA 46,20
0111C:  DATA 45,72
0111E:  DATA 61,73
01120:  DATA 65,0D
01122:  DATA 0A,00
01124:  DATA 45,6E
01126:  DATA 64,20
01128:  DATA 46,6C
0112A:  DATA 61,73
0112C:  DATA 68,20
0112E:  DATA 53,4D
01130:  DATA 46,20
01132:  DATA 45,72
01134:  DATA 61,73
01136:  DATA 65,0D
01138:  DATA 0A,00
0113A:  DATA 53,74
0113C:  DATA 61,72
0113E:  DATA 74,20
01140:  DATA 46,6C
01142:  DATA 61,73
01144:  DATA 68,20
01146:  DATA 41,64
01148:  DATA 64,72
0114A:  DATA 65,73
0114C:  DATA 73,20
0114E:  DATA 52,65
01150:  DATA 73,65
01152:  DATA 74,0D
01154:  DATA 0A,00
01156:  DATA 45,6E
01158:  DATA 64,20
0115A:  DATA 46,6C
0115C:  DATA 61,73
0115E:  DATA 68,20
01160:  DATA 41,64
01162:  DATA 64,72
01164:  DATA 65,73
01166:  DATA 73,20
01168:  DATA 52,65
0116A:  DATA 73,65
0116C:  DATA 74,0D
0116E:  DATA 0A,00
01170:  DATA 53,74
01172:  DATA 61,72
01174:  DATA 74,20
01176:  DATA 4D,4F
01178:  DATA 44,45
0117A:  DATA 20,44
0117C:  DATA 55,4D
0117E:  DATA 4D,59
01180:  DATA 0D,0A
01182:  DATA 00,00
01184:  DATA 09,4D
01186:  DATA 4F,44
01188:  DATA 45,20
0118A:  DATA 20,20
0118C:  DATA 20,20
0118E:  DATA 3A,20
01190:  DATA 25,30
01192:  DATA 32,58
01194:  DATA 0D,0A
01196:  DATA 00,00
01198:  DATA 09,50
0119A:  DATA 61,72
0119C:  DATA 61,6D
0119E:  DATA 31,20
011A0:  DATA 20,20
011A2:  DATA 3A,20
011A4:  DATA 30,78
011A6:  DATA 25,30
011A8:  DATA 38,4C
011AA:  DATA 58,0D
011AC:  DATA 0A,00
011AE:  DATA 09,50
011B0:  DATA 61,72
011B2:  DATA 61,6D
011B4:  DATA 32,20
011B6:  DATA 20,20
011B8:  DATA 3A,20
011BA:  DATA 30,78
011BC:  DATA 25,30
011BE:  DATA 34,4C
011C0:  DATA 58,0D
011C2:  DATA 0A,00
011C4:  DATA 45,6E
011C6:  DATA 64,20
011C8:  DATA 4D,4F
011CA:  DATA 44,45
011CC:  DATA 20,44
011CE:  DATA 55,4D
011D0:  DATA 4D,59
011D2:  DATA 0D,0A
011D4:  DATA 00,00
011D6:  DATA 53,74
011D8:  DATA 61,72
011DA:  DATA 74,20
011DC:  DATA 4D,4F
011DE:  DATA 44,45
011E0:  DATA 20,54
011E2:  DATA 45,53
011E4:  DATA 54,20
011E6:  DATA 49,56
011E8:  DATA 0D,0A
011EA:  DATA 00,00
011EC:  DATA 09,53
011EE:  DATA 77,65
011F0:  DATA 65,70
011F2:  DATA 20,73
011F4:  DATA 74,65
011F6:  DATA 70,20
011F8:  DATA 3A,20
011FA:  DATA 25,75
011FC:  DATA 0D,0A
011FE:  DATA 00,00
01200:  DATA 45,6E
01202:  DATA 64,20
01204:  DATA 4D,4F
01206:  DATA 44,45
01208:  DATA 20,54
0120A:  DATA 45,53
0120C:  DATA 54,20
0120E:  DATA 49,56
01210:  DATA 0D,0A
01212:  DATA 00,00
01214:  DATA 53,74
01216:  DATA 61,72
01218:  DATA 74,20
0121A:  DATA 4D,4F
0121C:  DATA 44,45
0121E:  DATA 20,4D
01220:  DATA 45,41
01222:  DATA 53,55
01224:  DATA 52,45
01226:  DATA 0D,0A
01228:  DATA 00,00
0122A:  DATA 53,74
0122C:  DATA 61,72
0122E:  DATA 74,20
01230:  DATA 53,57
01232:  DATA 45,45
01234:  DATA 50,0D
01236:  DATA 0A,00
01238:  DATA 09,53
0123A:  DATA 77,65
0123C:  DATA 65,70
0123E:  DATA 20,73
01240:  DATA 74,65
01242:  DATA 70,20
01244:  DATA 3A,20
01246:  DATA 25,75
01248:  DATA 0D,0A
0124A:  DATA 00,00
0124C:  DATA 45,4E
0124E:  DATA 44,20
01250:  DATA 53,57
01252:  DATA 45,45
01254:  DATA 50,0D
01256:  DATA 0A,00
01258:  DATA 0D,0A
0125A:  DATA 5F,5F
0125C:  DATA 5F,5F
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,5F
01264:  DATA 5F,5F
01266:  DATA 5F,5F
01268:  DATA 5F,5F
0126A:  DATA 5F,5F
0126C:  DATA 5F,5F
0126E:  DATA 5F,5F
01270:  DATA 5F,5F
01272:  DATA 5F,5F
01274:  DATA 5F,5F
01276:  DATA 5F,5F
01278:  DATA 0D,0A
0127A:  DATA 5F,5F
0127C:  DATA 5F,5F
0127E:  DATA 5F,53
01280:  DATA 74,61
01282:  DATA 72,74
01284:  DATA 20,65
01286:  DATA 78,65
01288:  DATA 63,75
0128A:  DATA 74,65
0128C:  DATA 5F,6D
0128E:  DATA 69,73
01290:  DATA 73,69
01292:  DATA 6F,6E
01294:  DATA 5F,5F
01296:  DATA 5F,5F
01298:  DATA 5F,0D
0129A:  DATA 0A,0D
0129C:  DATA 0A,00
0129E:  DATA 43,6F
012A0:  DATA 6D,6D
012A2:  DATA 61,6E
012A4:  DATA 64,20
012A6:  DATA 49,44
012A8:  DATA 3A,20
012AA:  DATA 25,58
012AC:  DATA 0D,0A
012AE:  DATA 0D,0A
012B0:  DATA 00,00
012B2:  DATA 09,09
012B4:  DATA 2D,3E
012B6:  DATA 20,49
012B8:  DATA 6E,76
012BA:  DATA 61,6C
012BC:  DATA 69,64
012BE:  DATA 20,43
012C0:  DATA 4D,44
012C2:  DATA 20,49
012C4:  DATA 44,21
012C6:  DATA 0D,0A
012C8:  DATA 00,00
012CA:  DATA 0D,0A
012CC:  DATA 5F,5F
012CE:  DATA 5F,5F
012D0:  DATA 5F,5F
012D2:  DATA 45,6E
012D4:  DATA 64,20
012D6:  DATA 65,78
012D8:  DATA 65,63
012DA:  DATA 75,74
012DC:  DATA 65,5F
012DE:  DATA 6D,69
012E0:  DATA 73,73
012E2:  DATA 69,6F
012E4:  DATA 6E,5F
012E6:  DATA 5F,5F
012E8:  DATA 5F,5F
012EA:  DATA 5F,0D
012EC:  DATA 0A,5F
012EE:  DATA 5F,5F
012F0:  DATA 5F,5F
012F2:  DATA 5F,5F
012F4:  DATA 5F,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,5F
012FC:  DATA 5F,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 5F,5F
01306:  DATA 5F,5F
01308:  DATA 5F,5F
0130A:  DATA 5F,5F
0130C:  DATA 0D,0A
0130E:  DATA 00,00
01310:  DATA 53,74
01312:  DATA 61,72
01314:  DATA 74,20
01316:  DATA 65,78
01318:  DATA 65,63
0131A:  DATA 75,74
0131C:  DATA 65,5F
0131E:  DATA 63,6F
01320:  DATA 6D,6D
01322:  DATA 61,6E
01324:  DATA 64,0D
01326:  DATA 0A,00
01328:  DATA 09,2D
0132A:  DATA 3E,20
0132C:  DATA 55,70
0132E:  DATA 6C,69
01330:  DATA 6E,6B
01332:  DATA 20,63
01334:  DATA 6F,6D
01336:  DATA 6D,61
01338:  DATA 6E,64
0133A:  DATA 0D,0A
0133C:  DATA 00,00
0133E:  DATA 09,20
01340:  DATA 20,20
01342:  DATA 54,72
01344:  DATA 61,6E
01346:  DATA 73,6D
01348:  DATA 69,74
0134A:  DATA 20,41
0134C:  DATA 63,6B
0134E:  DATA 6E,6F
01350:  DATA 6C,65
01352:  DATA 67,64
01354:  DATA 65,0D
01356:  DATA 0A,00
01358:  DATA 09,2D
0135A:  DATA 3E,20
0135C:  DATA 53,74
0135E:  DATA 61,74
01360:  DATA 75,73
01362:  DATA 20,63
01364:  DATA 68,65
01366:  DATA 63,6B
01368:  DATA 0D,0A
0136A:  DATA 00,00
0136C:  DATA 09,20
0136E:  DATA 20,20
01370:  DATA 54,72
01372:  DATA 61,6E
01374:  DATA 73,6D
01376:  DATA 69,74
01378:  DATA 20,4D
0137A:  DATA 49,53
0137C:  DATA 20,4D
0137E:  DATA 43,55
01380:  DATA 20,53
01382:  DATA 74,61
01384:  DATA 74,75
01386:  DATA 73,0D
01388:  DATA 0A,00
0138A:  DATA 66,69
0138C:  DATA 6E,69
0138E:  DATA 73,68
01390:  DATA 65,64
01392:  DATA 20,69
01394:  DATA 6E,20
01396:  DATA 73,74
01398:  DATA 61,74
0139A:  DATA 75,73
0139C:  DATA 5F,63
0139E:  DATA 68,65
013A0:  DATA 63,6B
013A2:  DATA 0D,0A
013A4:  DATA 00,00
013A6:  DATA 09,2D
013A8:  DATA 3E,20
013AA:  DATA 53,4D
013AC:  DATA 46,20
013AE:  DATA 61,76
013B0:  DATA 61,69
013B2:  DATA 6C,61
013B4:  DATA 62,6C
013B6:  DATA 65,20
013B8:  DATA 63,68
013BA:  DATA 65,63
013BC:  DATA 6B,0D
013BE:  DATA 0A,00
013C0:  DATA 09,20
013C2:  DATA 20,20
013C4:  DATA 54,72
013C6:  DATA 61,6E
013C8:  DATA 73,6D
013CA:  DATA 69,74
013CC:  DATA 20,41
013CE:  DATA 63,6B
013D0:  DATA 6E,6F
013D2:  DATA 6C,65
013D4:  DATA 67,64
013D6:  DATA 65,0D
013D8:  DATA 0A,00
013DA:  DATA 09,09
013DC:  DATA 2D,3E
013DE:  DATA 20,61
013E0:  DATA 6C,6C
013E2:  DATA 6F,77
013E4:  DATA 64,0D
013E6:  DATA 0A,00
013E8:  DATA 09,09
013EA:  DATA 2D,3E
013EC:  DATA 20,64
013EE:  DATA 65,6E
013F0:  DATA 79,65
013F2:  DATA 64,0D
013F4:  DATA 0A,00
013F6:  DATA 0D,0A
013F8:  DATA 0D,0A
013FA:  DATA 0D,0A
013FC:  DATA 3D,3D
013FE:  DATA 3D,3D
01400:  DATA 3D,3D
01402:  DATA 3D,3D
01404:  DATA 3D,3D
01406:  DATA 3D,3D
01408:  DATA 3D,3D
0140A:  DATA 3D,3D
0140C:  DATA 3D,3D
0140E:  DATA 3D,3D
01410:  DATA 3D,3D
01412:  DATA 3D,3D
01414:  DATA 3D,3D
01416:  DATA 3D,3D
01418:  DATA 3D,3D
0141A:  DATA 3D,3D
0141C:  DATA 3D,3D
0141E:  DATA 3D,3D
01420:  DATA 3D,3D
01422:  DATA 3D,3D
01424:  DATA 3D,3D
01426:  DATA 3D,3D
01428:  DATA 3D,3D
0142A:  DATA 3D,3D
0142C:  DATA 3D,3D
0142E:  DATA 3D,3D
01430:  DATA 3D,3D
01432:  DATA 3D,3D
01434:  DATA 3D,3D
01436:  DATA 3D,3D
01438:  DATA 0D,0A
0143A:  DATA 00,00
0143C:  DATA 54,68
0143E:  DATA 69,73
01440:  DATA 20,69
01442:  DATA 73,20
01444:  DATA 4D,4F
01446:  DATA 4D,49
01448:  DATA 4A,49
0144A:  DATA 20,43
0144C:  DATA 49,47
0144E:  DATA 53,20
01450:  DATA 50,49
01452:  DATA 43,20
01454:  DATA 42,42
01456:  DATA 4D,20
01458:  DATA 66,6F
0145A:  DATA 72,20
0145C:  DATA 4D,49
0145E:  DATA 53,37
01460:  DATA 5F,42
01462:  DATA 42,4D
01464:  DATA 33,2E
01466:  DATA 0D,0A
01468:  DATA 00,00
0146A:  DATA 4C,61
0146C:  DATA 73,74
0146E:  DATA 20,75
01470:  DATA 70,64
01472:  DATA 61,74
01474:  DATA 65,64
01476:  DATA 20,6F
01478:  DATA 6E,20
0147A:  DATA 25,73
0147C:  DATA 20,25
0147E:  DATA 73,2C
01480:  DATA 20,62
01482:  DATA 79,20
01484:  DATA 49,6E
01486:  DATA 6F,75
01488:  DATA 65,2E
0148A:  DATA 0D,0A
0148C:  DATA 0D,0A
0148E:  DATA 00,00
01490:  DATA 32,31
01492:  DATA 2D,4A
01494:  DATA 75,6C
01496:  DATA 2D,32
01498:  DATA 35,00
0149A:  DATA 31,37
0149C:  DATA 3A,31
0149E:  DATA 33,3A
014A0:  DATA 31,32
014A2:  DATA 00,00
014A4:  DATA 5F,5F
014A6:  DATA 5F,5F
014A8:  DATA 43,49
014AA:  DATA 47,53
014AC:  DATA 20,50
014AE:  DATA 49,43
014B0:  DATA 20,53
014B2:  DATA 74,61
014B4:  DATA 72,74
014B6:  DATA 20,4F
014B8:  DATA 70,65
014BA:  DATA 72,61
014BC:  DATA 74,69
014BE:  DATA 6F,6E
014C0:  DATA 5F,5F
014C2:  DATA 5F,5F
014C4:  DATA 5F,0D
014C6:  DATA 0A,0D
014C8:  DATA 0A,00
014CA:  DATA 77,61
014CC:  DATA 69,74
014CE:  DATA 69,6E
014D0:  DATA 67,20
014D2:  DATA 66,6F
014D4:  DATA 72,20
014D6:  DATA 42,4F
014D8:  DATA 53,53
014DA:  DATA 20,50
014DC:  DATA 49,43
014DE:  DATA 20,63
014E0:  DATA 6F,6D
014E2:  DATA 6D,61
014E4:  DATA 6E,64
014E6:  DATA 00,00
014E8:  DATA 0D,0A
014EA:  DATA 77,61
014EC:  DATA 69,74
014EE:  DATA 69,6E
014F0:  DATA 67,20
014F2:  DATA 66,6F
014F4:  DATA 72,20
014F6:  DATA 42,4F
014F8:  DATA 53,53
014FA:  DATA 20,50
014FC:  DATA 49,43
014FE:  DATA 20,63
01500:  DATA 6F,6D
01502:  DATA 6D,61
01504:  DATA 6E,64
01506:  DATA 00,00
01508:  DATA 0D,0A
0150A:  DATA 0D,0A
0150C:  DATA 3D,3D
0150E:  DATA 3D,3D
01510:  DATA 3D,3D
01512:  DATA 0D,0A
01514:  DATA 0D,0A
01516:  DATA 46,69
01518:  DATA 6E,69
0151A:  DATA 73,68
0151C:  DATA 65,64
0151E:  DATA 20,70
01520:  DATA 72,6F
01522:  DATA 63,65
01524:  DATA 73,73
01526:  DATA 2E,0D
01528:  DATA 0A,57
0152A:  DATA 61,69
0152C:  DATA 74,20
0152E:  DATA 66,6F
01530:  DATA 72,20
01532:  DATA 42,4F
01534:  DATA 53,53
01536:  DATA 20,50
01538:  DATA 49,43
0153A:  DATA 20,74
0153C:  DATA 75,72
0153E:  DATA 6E,20
01540:  DATA 6F,66
01542:  DATA 66,20
01544:  DATA 6D,65
01546:  DATA 00,00
01548:  DATA 45,6E
0154A:  DATA 64,20
0154C:  DATA 6D,61
0154E:  DATA 69,6E
01550:  DATA 0D,0A
01552:  DATA 00,00
*
015D4:  TBLRD*+
015D6:  MOVF   FF5,F
015D8:  BTFSC  FD8.2
015DA:  GOTO   1602
015DE:  MOVFF  FF6,82C
015E2:  MOVFF  FF7,82D
015E6:  MOVFF  FF8,82E
015EA:  MOVFF  FF5,82F
015EE:  CALL   1582
015F2:  MOVFF  82C,FF6
015F6:  MOVFF  82D,FF7
015FA:  MOVFF  82E,FF8
015FE:  GOTO   15D4
01602:  RETURN 0
01604:  TBLRD*+
01606:  MOVFF  FF6,7ED
0160A:  MOVFF  FF7,7EE
0160E:  MOVFF  FF8,7EF
01612:  MOVFF  FF5,82F
01616:  CALL   1582
0161A:  MOVFF  7ED,FF6
0161E:  MOVFF  7EE,FF7
01622:  MOVFF  7EF,FF8
01626:  MOVLB  7
01628:  DECFSZ xEC,F
0162A:  BRA    1630
0162C:  BRA    1636
0162E:  MOVLB  0
01630:  MOVLB  0
01632:  GOTO   1604
01636:  MOVLB  0
01638:  RETURN 0
*
016B4:  MOVLB  8
016B6:  MOVF   x4A,W
016B8:  ANDLW  07
016BA:  MOVWF  00
016BC:  RRCF   x4A,W
016BE:  MOVWF  01
016C0:  RRCF   01,F
016C2:  RRCF   01,F
016C4:  MOVLW  1F
016C6:  ANDWF  01,F
016C8:  MOVF   01,W
016CA:  ADDWF  x4C,W
016CC:  MOVWF  FE9
016CE:  MOVLW  00
016D0:  ADDWFC x4D,W
016D2:  MOVWF  FEA
016D4:  CLRF   01
016D6:  INCF   01,F
016D8:  INCF   00,F
016DA:  MOVLB  0
016DC:  GOTO   16E2
016E0:  RLCF   01,F
016E2:  DECFSZ 00,F
016E4:  GOTO   16E0
016E8:  MOVLB  8
016EA:  MOVF   x4B,F
016EC:  BTFSS  FD8.2
016EE:  BRA    16F6
016F0:  MOVLB  0
016F2:  GOTO   1700
016F6:  MOVF   01,W
016F8:  IORWF  FEF,F
016FA:  MOVLB  0
016FC:  GOTO   1706
01700:  COMF   01,F
01702:  MOVF   01,W
01704:  ANDWF  FEF,F
01706:  RETURN 0
*
01C0A:  MOVLB  4
01C0C:  BTFSS  xA5.7
01C0E:  BRA    1C16
01C10:  MOVLB  0
01C12:  GOTO   1C46
01C16:  MOVLW  0F
01C18:  MOVWF  00
01C1A:  SWAPF  xA4,W
01C1C:  ANDWF  00,F
01C1E:  MOVLW  0A
01C20:  SUBWF  00,W
01C22:  BTFSS  FD8.0
01C24:  BRA    1C2C
01C26:  MOVLB  0
01C28:  GOTO   1C36
01C2C:  MOVLW  30
01C2E:  ADDWF  00,F
01C30:  MOVLB  0
01C32:  GOTO   1C3E
01C36:  MOVLB  4
01C38:  MOVF   xA5,W
01C3A:  ADDWF  00,F
01C3C:  MOVLB  0
01C3E:  MOVFF  00,82F
01C42:  CALL   1582
01C46:  MOVLW  0F
01C48:  MOVLB  4
01C4A:  ANDWF  xA4,F
01C4C:  MOVLW  0A
01C4E:  SUBWF  xA4,W
01C50:  BTFSS  FD8.0
01C52:  BRA    1C5A
01C54:  MOVLB  0
01C56:  GOTO   1C62
01C5A:  MOVLW  30
01C5C:  MOVLB  0
01C5E:  GOTO   1C6A
01C62:  MOVLB  4
01C64:  BCF    xA5.7
01C66:  MOVF   xA5,W
01C68:  MOVLB  0
01C6A:  MOVLB  4
01C6C:  ADDWF  xA4,F
01C6E:  MOVFF  4A4,82F
01C72:  MOVLB  0
01C74:  CALL   1582
01C78:  RETURN 0
*
03AD8:  TSTFSZ 01
03ADA:  GOTO   3AE8
03ADE:  TSTFSZ 02
03AE0:  GOTO   3AEA
03AE4:  GOTO   3AFA
03AE8:  INCF   02,F
03AEA:  MOVFF  00,FEE
03AEE:  DECFSZ 01,F
03AF0:  GOTO   3AEA
03AF4:  DECFSZ 02,F
03AF6:  GOTO   3AEA
03AFA:  RETURN 0
*
03EE2:  MOVLB  7
03EE4:  MOVF   xEF,W
03EE6:  CLRF   01
03EE8:  SUBWF  xEE,W
03EEA:  BTFSS  FD8.0
03EEC:  BRA    3EF4
03EEE:  MOVLB  0
03EF0:  GOTO   3EFE
03EF4:  MOVF   xEE,W
03EF6:  MOVWF  00
03EF8:  MOVLB  0
03EFA:  GOTO   3F28
03EFE:  CLRF   00
03F00:  MOVLW  08
03F02:  MOVLB  7
03F04:  MOVWF  xF0
03F06:  MOVLB  0
03F08:  MOVLB  7
03F0A:  RLCF   xEE,F
03F0C:  RLCF   00,F
03F0E:  MOVF   xEF,W
03F10:  SUBWF  00,W
03F12:  BTFSC  FD8.0
03F14:  MOVWF  00
03F16:  RLCF   01,F
03F18:  DECFSZ xF0,F
03F1A:  BRA    3F20
03F1C:  BRA    3F26
03F1E:  MOVLB  0
03F20:  MOVLB  0
03F22:  GOTO   3F08
03F26:  MOVLB  0
03F28:  RETURN 0
03F2A:  MOVF   01,W
03F2C:  MOVFF  7EC,7EE
03F30:  MOVLW  64
03F32:  MOVLB  7
03F34:  MOVWF  xEF
03F36:  MOVLB  0
03F38:  CALL   3EE2
03F3C:  MOVFF  00,7EC
03F40:  MOVF   01,W
03F42:  MOVLW  30
03F44:  BTFSS  FD8.2
03F46:  GOTO   3F6A
03F4A:  MOVLB  7
03F4C:  BTFSC  xED.1
03F4E:  BRA    3F56
03F50:  MOVLB  0
03F52:  GOTO   3F7E
03F56:  BTFSS  xED.3
03F58:  BRA    3F60
03F5A:  MOVLB  0
03F5C:  GOTO   3F7E
03F60:  BTFSC  xED.4
03F62:  MOVLW  20
03F64:  MOVLB  0
03F66:  GOTO   3F74
03F6A:  MOVLB  7
03F6C:  BCF    xED.3
03F6E:  BCF    xED.4
03F70:  BSF    xED.0
03F72:  MOVLB  0
03F74:  ADDWF  01,F
03F76:  MOVFF  01,82F
03F7A:  CALL   1582
03F7E:  MOVFF  7EC,7EE
03F82:  MOVLW  0A
03F84:  MOVLB  7
03F86:  MOVWF  xEF
03F88:  MOVLB  0
03F8A:  CALL   3EE2
03F8E:  MOVFF  00,7EC
03F92:  MOVF   01,W
03F94:  MOVLW  30
03F96:  BTFSS  FD8.2
03F98:  GOTO   3FB8
03F9C:  MOVLB  7
03F9E:  BTFSS  xED.3
03FA0:  BRA    3FA8
03FA2:  MOVLB  0
03FA4:  GOTO   3FC2
03FA8:  BTFSC  xED.0
03FAA:  BRA    3FB2
03FAC:  MOVLB  0
03FAE:  GOTO   3FC2
03FB2:  BTFSC  xED.4
03FB4:  MOVLW  20
03FB6:  MOVLB  0
03FB8:  ADDWF  01,F
03FBA:  MOVFF  01,82F
03FBE:  CALL   1582
03FC2:  MOVLW  30
03FC4:  MOVLB  7
03FC6:  ADDWF  xEC,F
03FC8:  MOVFF  7EC,82F
03FCC:  MOVLB  0
03FCE:  CALL   1582
03FD2:  RETURN 0
*
040D0:  MOVFF  FEA,39E
040D4:  MOVFF  FE9,39D
040D8:  MOVLB  3
040DA:  SWAPF  x97,W
040DC:  IORLW  F0
040DE:  MOVWF  x99
040E0:  ADDWF  x99,F
040E2:  ADDLW  E2
040E4:  MOVWF  x9A
040E6:  ADDLW  32
040E8:  MOVWF  x9C
040EA:  MOVF   x97,W
040EC:  ANDLW  0F
040EE:  ADDWF  x9A,F
040F0:  ADDWF  x9A,F
040F2:  ADDWF  x9C,F
040F4:  ADDLW  E9
040F6:  MOVWF  x9B
040F8:  ADDWF  x9B,F
040FA:  ADDWF  x9B,F
040FC:  SWAPF  x96,W
040FE:  ANDLW  0F
04100:  ADDWF  x9B,F
04102:  ADDWF  x9C,F
04104:  RLCF   x9B,F
04106:  RLCF   x9C,F
04108:  COMF   x9C,F
0410A:  RLCF   x9C,F
0410C:  MOVF   x96,W
0410E:  ANDLW  0F
04110:  ADDWF  x9C,F
04112:  RLCF   x99,F
04114:  MOVLW  07
04116:  MOVWF  x98
04118:  MOVLW  0A
0411A:  MOVLB  0
0411C:  MOVLB  3
0411E:  DECF   x9B,F
04120:  ADDWF  x9C,F
04122:  BTFSC  FD8.0
04124:  BRA    412C
04126:  MOVLB  0
04128:  GOTO   411C
0412C:  MOVLB  0
0412E:  MOVLB  3
04130:  DECF   x9A,F
04132:  ADDWF  x9B,F
04134:  BTFSC  FD8.0
04136:  BRA    413E
04138:  MOVLB  0
0413A:  GOTO   412E
0413E:  MOVLB  0
04140:  MOVLB  3
04142:  DECF   x99,F
04144:  ADDWF  x9A,F
04146:  BTFSC  FD8.0
04148:  BRA    4150
0414A:  MOVLB  0
0414C:  GOTO   4140
04150:  MOVLB  0
04152:  MOVLB  3
04154:  DECF   x98,F
04156:  ADDWF  x99,F
04158:  BTFSC  FD8.0
0415A:  BRA    4162
0415C:  MOVLB  0
0415E:  GOTO   4152
04162:  MOVLW  03
04164:  MOVWF  FEA
04166:  MOVLW  98
04168:  MOVWF  FE9
0416A:  MOVLW  07
0416C:  ANDWF  x9D,W
0416E:  BCF    x9D.6
04170:  MOVLB  0
04172:  ADDWF  FE9,F
04174:  MOVLW  00
04176:  ADDWFC FEA,F
04178:  MOVF   FE9,W
0417A:  SUBLW  9C
0417C:  BTFSS  FD8.2
0417E:  GOTO   4192
04182:  MOVF   FEA,W
04184:  SUBLW  03
04186:  BTFSS  FD8.2
04188:  GOTO   4192
0418C:  MOVLB  3
0418E:  BSF    x9D.6
04190:  MOVLB  0
04192:  MOVF   FEF,W
04194:  MOVWF  00
04196:  BTFSS  FD8.2
04198:  GOTO   41C4
0419C:  MOVLB  3
0419E:  BTFSS  x9D.6
041A0:  BRA    41A8
041A2:  MOVLB  0
041A4:  GOTO   41C4
041A8:  BTFSS  x9D.4
041AA:  BRA    41B2
041AC:  MOVLB  0
041AE:  GOTO   41E8
041B2:  BTFSS  x9D.3
041B4:  BRA    41BC
041B6:  MOVLB  0
041B8:  GOTO   41C4
041BC:  MOVLW  20
041BE:  MOVLB  0
041C0:  GOTO   41CE
041C4:  MOVLB  3
041C6:  BSF    x9D.3
041C8:  BCF    x9D.4
041CA:  MOVLW  30
041CC:  MOVLB  0
041CE:  ADDWF  00,F
041D0:  MOVFF  FEA,397
041D4:  MOVFF  FE9,396
041D8:  MOVFF  00,82F
041DC:  CALL   1582
041E0:  MOVFF  397,FEA
041E4:  MOVFF  396,FE9
041E8:  MOVF   FEE,W
041EA:  MOVLB  3
041EC:  BTFSC  x9D.6
041EE:  BRA    41F6
041F0:  MOVLB  0
041F2:  GOTO   4178
041F6:  MOVLB  0
041F8:  RETURN 0
*
0666C:  BTFSC  FD8.1
0666E:  GOTO   667A
06672:  MOVLW  04
06674:  MOVWF  FEA
06676:  MOVLW  29
06678:  MOVWF  FE9
0667A:  CLRF   00
0667C:  CLRF   01
0667E:  CLRF   02
06680:  CLRF   03
06682:  MOVLB  4
06684:  CLRF   x29
06686:  CLRF   x2A
06688:  CLRF   x2B
0668A:  CLRF   x2C
0668C:  MOVF   x28,W
0668E:  IORWF  x27,W
06690:  IORWF  x26,W
06692:  IORWF  x25,W
06694:  BTFSS  FD8.2
06696:  BRA    669E
06698:  MOVLB  0
0669A:  GOTO   672E
0669E:  MOVLB  0
066A0:  MOVLW  20
066A2:  MOVLB  4
066A4:  MOVWF  x2D
066A6:  MOVLB  0
066A8:  BCF    FD8.0
066AA:  MOVLB  4
066AC:  RLCF   x21,F
066AE:  RLCF   x22,F
066B0:  RLCF   x23,F
066B2:  RLCF   x24,F
066B4:  RLCF   x29,F
066B6:  RLCF   x2A,F
066B8:  RLCF   x2B,F
066BA:  RLCF   x2C,F
066BC:  MOVF   x28,W
066BE:  SUBWF  x2C,W
066C0:  BTFSC  FD8.2
066C2:  BRA    66CA
066C4:  MOVLB  0
066C6:  GOTO   66EC
066CA:  MOVF   x27,W
066CC:  SUBWF  x2B,W
066CE:  BTFSC  FD8.2
066D0:  BRA    66D8
066D2:  MOVLB  0
066D4:  GOTO   66EC
066D8:  MOVF   x26,W
066DA:  SUBWF  x2A,W
066DC:  BTFSC  FD8.2
066DE:  BRA    66E6
066E0:  MOVLB  0
066E2:  GOTO   66EC
066E6:  MOVF   x25,W
066E8:  SUBWF  x29,W
066EA:  MOVLB  0
066EC:  BTFSS  FD8.0
066EE:  GOTO   6714
066F2:  MOVLB  4
066F4:  MOVF   x25,W
066F6:  SUBWF  x29,F
066F8:  MOVF   x26,W
066FA:  BTFSS  FD8.0
066FC:  INCFSZ x26,W
066FE:  SUBWF  x2A,F
06700:  MOVF   x27,W
06702:  BTFSS  FD8.0
06704:  INCFSZ x27,W
06706:  SUBWF  x2B,F
06708:  MOVF   x28,W
0670A:  BTFSS  FD8.0
0670C:  INCFSZ x28,W
0670E:  SUBWF  x2C,F
06710:  BSF    FD8.0
06712:  MOVLB  0
06714:  RLCF   00,F
06716:  RLCF   01,F
06718:  RLCF   02,F
0671A:  RLCF   03,F
0671C:  MOVLB  4
0671E:  DECFSZ x2D,F
06720:  BRA    6726
06722:  BRA    672C
06724:  MOVLB  0
06726:  MOVLB  0
06728:  GOTO   66A8
0672C:  MOVLB  0
0672E:  MOVFF  429,FEF
06732:  MOVFF  42A,FEC
06736:  MOVFF  42B,FEC
0673A:  MOVFF  42C,FEC
0673E:  MOVF   FED,F
06740:  MOVF   FED,F
06742:  MOVF   FED,F
06744:  RETURN 0
*
06CB8:  MOVLW  20
06CBA:  MOVLB  4
06CBC:  BTFSS  x1A.4
06CBE:  MOVLW  30
06CC0:  MOVWF  x1B
06CC2:  MOVFF  419,00
06CC6:  BTFSC  00.7
06CC8:  BRA    6CD0
06CCA:  MOVLB  0
06CCC:  GOTO   6CE2
06CD0:  COMF   00,F
06CD2:  INCF   00,F
06CD4:  MOVFF  00,419
06CD8:  MOVLW  2D
06CDA:  MOVWF  x1B
06CDC:  BSF    x1A.7
06CDE:  BSF    x1A.0
06CE0:  MOVLB  0
06CE2:  MOVF   01,W
06CE4:  MOVFF  419,7EE
06CE8:  MOVLW  64
06CEA:  MOVLB  7
06CEC:  MOVWF  xEF
06CEE:  MOVLB  0
06CF0:  CALL   3EE2
06CF4:  MOVFF  00,419
06CF8:  MOVLW  30
06CFA:  ADDWF  01,W
06CFC:  MOVLB  4
06CFE:  MOVWF  x1C
06D00:  MOVFF  419,7EE
06D04:  MOVLW  0A
06D06:  MOVLB  7
06D08:  MOVWF  xEF
06D0A:  MOVLB  0
06D0C:  CALL   3EE2
06D10:  MOVLW  30
06D12:  ADDWF  00,W
06D14:  MOVLB  4
06D16:  MOVWF  x1E
06D18:  MOVLW  30
06D1A:  ADDWF  01,W
06D1C:  MOVWF  x1D
06D1E:  MOVFF  41B,00
06D22:  MOVLB  0
06D24:  MOVLW  30
06D26:  MOVLB  4
06D28:  SUBWF  x1C,W
06D2A:  BTFSS  FD8.2
06D2C:  BRA    6D34
06D2E:  MOVLB  0
06D30:  GOTO   6D40
06D34:  BSF    x1A.1
06D36:  BTFSC  x1A.7
06D38:  BSF    x1A.2
06D3A:  MOVLB  0
06D3C:  GOTO   6D80
06D40:  MOVFF  41B,41C
06D44:  MOVLW  20
06D46:  MOVLB  4
06D48:  MOVWF  x1B
06D4A:  MOVLW  30
06D4C:  SUBWF  x1D,W
06D4E:  BTFSS  FD8.2
06D50:  BRA    6D58
06D52:  MOVLB  0
06D54:  GOTO   6D64
06D58:  BSF    x1A.0
06D5A:  BTFSC  x1A.7
06D5C:  BSF    x1A.1
06D5E:  MOVLB  0
06D60:  GOTO   6D80
06D64:  BTFSC  FD8.2
06D66:  BRA    6D6E
06D68:  MOVLB  4
06D6A:  BSF    x1A.0
06D6C:  MOVLB  0
06D6E:  BTFSS  FD8.2
06D70:  GOTO   6D80
06D74:  MOVFF  41C,41D
06D78:  MOVLW  20
06D7A:  MOVLB  4
06D7C:  MOVWF  x1C
06D7E:  MOVLB  0
06D80:  MOVLB  4
06D82:  BTFSS  x1A.2
06D84:  BRA    6D8C
06D86:  MOVLB  0
06D88:  GOTO   6DA6
06D8C:  BTFSS  x1A.1
06D8E:  BRA    6D96
06D90:  MOVLB  0
06D92:  GOTO   6DAE
06D96:  BTFSS  x1A.0
06D98:  BRA    6DA0
06D9A:  MOVLB  0
06D9C:  GOTO   6DB6
06DA0:  MOVLB  0
06DA2:  GOTO   6DBE
06DA6:  MOVFF  41B,82F
06DAA:  CALL   1582
06DAE:  MOVFF  41C,82F
06DB2:  CALL   1582
06DB6:  MOVFF  41D,82F
06DBA:  CALL   1582
06DBE:  MOVFF  41E,82F
06DC2:  CALL   1582
06DC6:  RETURN 0
*
06EC0:  MOVF   FE9,W
06EC2:  MOVLB  4
06EC4:  MOVWF  x19
06EC6:  MOVLW  3B
06EC8:  MOVWF  x20
06ECA:  MOVLW  9A
06ECC:  MOVWF  x1F
06ECE:  MOVLW  CA
06ED0:  MOVWF  x1E
06ED2:  CLRF   x1D
06ED4:  MOVLW  0A
06ED6:  MOVWF  x1B
06ED8:  MOVLB  0
06EDA:  BSF    FD8.1
06EDC:  MOVLW  04
06EDE:  MOVWF  FEA
06EE0:  MOVLW  15
06EE2:  MOVWF  FE9
06EE4:  MOVFF  418,424
06EE8:  MOVFF  417,423
06EEC:  MOVFF  416,422
06EF0:  MOVFF  415,421
06EF4:  MOVFF  420,428
06EF8:  MOVFF  41F,427
06EFC:  MOVFF  41E,426
06F00:  MOVFF  41D,425
06F04:  CALL   666C
06F08:  MOVF   01,W
06F0A:  MOVF   00,F
06F0C:  BTFSS  FD8.2
06F0E:  GOTO   6F66
06F12:  MOVLB  4
06F14:  MOVF   x1B,W
06F16:  XORLW  01
06F18:  BTFSS  FD8.2
06F1A:  BRA    6F22
06F1C:  MOVLB  0
06F1E:  GOTO   6F66
06F22:  MOVF   x19,W
06F24:  BTFSS  FD8.2
06F26:  BRA    6F2E
06F28:  MOVLB  0
06F2A:  GOTO   6F6C
06F2E:  ANDLW  0F
06F30:  SUBWF  x1B,W
06F32:  BTFSS  FD8.2
06F34:  BRA    6F3C
06F36:  MOVLB  0
06F38:  GOTO   6F48
06F3C:  BTFSS  FD8.0
06F3E:  BRA    6F46
06F40:  MOVLB  0
06F42:  GOTO   6F78
06F46:  MOVLB  0
06F48:  MOVLB  4
06F4A:  BTFSS  x19.7
06F4C:  BRA    6F54
06F4E:  MOVLB  0
06F50:  GOTO   6F78
06F54:  BTFSS  x19.6
06F56:  BRA    6F5E
06F58:  MOVLB  0
06F5A:  GOTO   6F6C
06F5E:  MOVLW  20
06F60:  MOVLB  0
06F62:  GOTO   6F6E
06F66:  MOVLB  4
06F68:  CLRF   x19
06F6A:  MOVLB  0
06F6C:  MOVLW  30
06F6E:  ADDWF  00,F
06F70:  MOVFF  00,82F
06F74:  CALL   1582
06F78:  BCF    FD8.1
06F7A:  MOVFF  420,424
06F7E:  MOVFF  41F,423
06F82:  MOVFF  41E,422
06F86:  MOVFF  41D,421
06F8A:  MOVLB  4
06F8C:  CLRF   x28
06F8E:  CLRF   x27
06F90:  CLRF   x26
06F92:  MOVLW  0A
06F94:  MOVWF  x25
06F96:  MOVLB  0
06F98:  CALL   666C
06F9C:  MOVFF  03,420
06FA0:  MOVFF  02,41F
06FA4:  MOVFF  01,41E
06FA8:  MOVFF  00,41D
06FAC:  MOVLB  4
06FAE:  DECFSZ x1B,F
06FB0:  BRA    6FB6
06FB2:  BRA    6FBC
06FB4:  MOVLB  0
06FB6:  MOVLB  0
06FB8:  GOTO   6EDA
06FBC:  MOVLB  0
06FBE:  RETURN 0
*
0754A:  MOVF   FE9,W
0754C:  MOVLB  4
0754E:  MOVWF  x19
07550:  BTFSC  x18.7
07552:  BRA    755A
07554:  MOVLB  0
07556:  GOTO   7576
0755A:  DECF   x19,F
0755C:  BSF    x19.5
0755E:  COMF   x15,F
07560:  COMF   x16,F
07562:  COMF   x17,F
07564:  COMF   x18,F
07566:  INCF   x15,F
07568:  BTFSC  FD8.2
0756A:  INCF   x16,F
0756C:  BTFSC  FD8.2
0756E:  INCF   x17,F
07570:  BTFSC  FD8.2
07572:  INCF   x18,F
07574:  MOVLB  0
07576:  MOVLW  3B
07578:  MOVLB  4
0757A:  MOVWF  x20
0757C:  MOVLW  9A
0757E:  MOVWF  x1F
07580:  MOVLW  CA
07582:  MOVWF  x1E
07584:  CLRF   x1D
07586:  MOVLW  0A
07588:  MOVWF  x1B
0758A:  MOVLB  0
0758C:  BSF    FD8.1
0758E:  MOVLW  04
07590:  MOVWF  FEA
07592:  MOVLW  15
07594:  MOVWF  FE9
07596:  MOVFF  418,424
0759A:  MOVFF  417,423
0759E:  MOVFF  416,422
075A2:  MOVFF  415,421
075A6:  MOVFF  420,428
075AA:  MOVFF  41F,427
075AE:  MOVFF  41E,426
075B2:  MOVFF  41D,425
075B6:  CALL   666C
075BA:  MOVF   01,W
075BC:  MOVF   00,F
075BE:  BTFSS  FD8.2
075C0:  GOTO   7618
075C4:  MOVLB  4
075C6:  MOVF   x1B,W
075C8:  XORLW  01
075CA:  BTFSS  FD8.2
075CC:  BRA    75D4
075CE:  MOVLB  0
075D0:  GOTO   7618
075D4:  MOVF   x19,W
075D6:  BTFSS  FD8.2
075D8:  BRA    75E0
075DA:  MOVLB  0
075DC:  GOTO   7620
075E0:  ANDLW  0F
075E2:  SUBWF  x1B,W
075E4:  BTFSS  FD8.2
075E6:  BRA    75EE
075E8:  MOVLB  0
075EA:  GOTO   75FA
075EE:  BTFSS  FD8.0
075F0:  BRA    75F8
075F2:  MOVLB  0
075F4:  GOTO   767E
075F8:  MOVLB  0
075FA:  MOVLB  4
075FC:  BTFSS  x19.7
075FE:  BRA    7606
07600:  MOVLB  0
07602:  GOTO   767E
07606:  BTFSS  x19.6
07608:  BRA    7610
0760A:  MOVLB  0
0760C:  GOTO   7620
07610:  MOVLW  20
07612:  MOVLB  0
07614:  GOTO   7674
07618:  MOVLW  20
0761A:  MOVLB  4
0761C:  ANDWF  x19,F
0761E:  MOVLB  0
07620:  MOVLB  4
07622:  BTFSC  x19.5
07624:  BRA    762C
07626:  MOVLB  0
07628:  GOTO   7648
0762C:  BCF    x19.5
0762E:  MOVF   00,W
07630:  MOVWF  x19
07632:  MOVLW  2D
07634:  MOVLB  8
07636:  MOVWF  x2F
07638:  MOVLB  0
0763A:  CALL   1582
0763E:  MOVLB  4
07640:  MOVF   x19,W
07642:  MOVWF  00
07644:  CLRF   x19
07646:  MOVLB  0
07648:  MOVLW  30
0764A:  MOVLB  4
0764C:  BTFSC  x19.5
0764E:  BRA    7656
07650:  MOVLB  0
07652:  GOTO   7674
07656:  BCF    x19.5
07658:  MOVF   00,W
0765A:  MOVWF  x19
0765C:  MOVLW  2D
0765E:  MOVLB  8
07660:  MOVWF  x2F
07662:  MOVLB  0
07664:  CALL   1582
07668:  MOVLB  4
0766A:  MOVF   x19,W
0766C:  MOVWF  00
0766E:  CLRF   x19
07670:  MOVLW  30
07672:  MOVLB  0
07674:  ADDWF  00,F
07676:  MOVFF  00,82F
0767A:  CALL   1582
0767E:  BCF    FD8.1
07680:  MOVFF  420,424
07684:  MOVFF  41F,423
07688:  MOVFF  41E,422
0768C:  MOVFF  41D,421
07690:  MOVLB  4
07692:  CLRF   x28
07694:  CLRF   x27
07696:  CLRF   x26
07698:  MOVLW  0A
0769A:  MOVWF  x25
0769C:  MOVLB  0
0769E:  CALL   666C
076A2:  MOVFF  03,420
076A6:  MOVFF  02,41F
076AA:  MOVFF  01,41E
076AE:  MOVFF  00,41D
076B2:  MOVLB  4
076B4:  DECFSZ x1B,F
076B6:  BRA    76BC
076B8:  BRA    76C2
076BA:  MOVLB  0
076BC:  MOVLB  0
076BE:  GOTO   758C
076C2:  MOVLB  0
076C4:  GOTO   836E (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01554:  MOVLW  08
01556:  MOVWF  FEA
01558:  MOVLW  44
0155A:  MOVWF  FE9
0155C:  MOVF   FEF,W
0155E:  BTFSC  FD8.2
01560:  GOTO   1580
01564:  MOVLW  05
01566:  MOVWF  01
01568:  CLRF   00
0156A:  DECFSZ 00,F
0156C:  BRA    156A
0156E:  DECFSZ 01,F
01570:  BRA    1568
01572:  MOVLW  2E
01574:  MOVWF  00
01576:  DECFSZ 00,F
01578:  BRA    1576
0157A:  BRA    157C
0157C:  DECFSZ FEF,F
0157E:  BRA    1564
01580:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
005A8:  BTFSS  FA6.5
005AA:  GOTO   05A8
005AE:  MOVLB  F
005B0:  MOVF   x2F,W
005B2:  MOVWF  1B
005B4:  MOVLB  0
005B6:  MOVLB  F
005B8:  MOVF   x2A,W
005BA:  MOVWF  01
005BC:  BTFSC  1B.1
005BE:  BRA    05C6
005C0:  MOVLB  0
005C2:  GOTO   05CA
005C6:  BCF    x2F.4
005C8:  BSF    x2F.4
005CA:  MOVLB  0
005CC:  GOTO   0606 (RETURN)
*
03B3A:  BTFSS  FA6.4
03B3C:  GOTO   3B3A
03B40:  MOVLB  F
03B42:  MOVWF  x29
03B44:  MOVLB  0
03B46:  GOTO   3B7C (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01582:  BCF    F93.6
01584:  BCF    F8A.6
01586:  MOVLW  08
01588:  MOVWF  01
0158A:  BRA    158C
0158C:  NOP   
0158E:  BSF    01.7
01590:  GOTO   15B8
01594:  BCF    01.7
01596:  MOVLB  8
01598:  RRCF   x2F,F
0159A:  MOVLB  0
0159C:  BTFSC  FD8.0
0159E:  BSF    F8A.6
015A0:  BTFSS  FD8.0
015A2:  BCF    F8A.6
015A4:  BSF    01.6
015A6:  GOTO   15B8
015AA:  BCF    01.6
015AC:  DECFSZ 01,F
015AE:  GOTO   1596
015B2:  BRA    15B4
015B4:  NOP   
015B6:  BSF    F8A.6
015B8:  MOVLW  84
015BA:  MOVWF  FE9
015BC:  DECFSZ FE9,F
015BE:  GOTO   15BC
015C2:  BRA    15C4
015C4:  NOP   
015C6:  BTFSC  01.7
015C8:  GOTO   1594
015CC:  BTFSC  01.6
015CE:  GOTO   15AA
015D2:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01708:  MOVF   FC9,W
0170A:  MOVFF  866,FC9
0170E:  RRCF   FC7,W
01710:  BTFSS  FD8.0
01712:  GOTO   170E
01716:  MOVFF  FC9,00
0171A:  RETURN 0
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
0266E:  MOVLB  7
02670:  MOVF   xF7,W
02672:  SUBLW  10
02674:  BTFSS  FD8.2
02676:  BRA    267E
02678:  MOVLB  0
0267A:  GOTO   2698
0267E:  MOVWF  xF9
02680:  MOVLB  0
02682:  MOVLB  7
02684:  RLCF   xF5,F
02686:  RLCF   xF6,F
02688:  DECFSZ xF9,F
0268A:  BRA    2690
0268C:  BRA    2696
0268E:  MOVLB  0
02690:  MOVLB  0
02692:  GOTO   2682
02696:  MOVLB  0
02698:  BSF    F93.4
0269A:  BCF    F93.5
0269C:  BCF    F93.2
0269E:  BCF    F8A.2
026A0:  MOVFF  7F7,7F9
026A4:  MOVLB  7
026A6:  BTFSS  xF6.7
026A8:  BCF    F8A.5
026AA:  BTFSC  xF6.7
026AC:  BSF    F8A.5
026AE:  RLCF   xF5,F
026B0:  RLCF   xF6,F
026B2:  BSF    F8A.2
026B4:  RLCF   01,F
026B6:  RLCF   02,F
026B8:  BTFSS  F81.4
026BA:  BCF    01.0
026BC:  BTFSC  F81.4
026BE:  BSF    01.0
026C0:  BCF    F8A.2
026C2:  DECFSZ xF9,F
026C4:  BRA    26CA
026C6:  BRA    26D0
026C8:  MOVLB  0
026CA:  MOVLB  0
026CC:  GOTO   26A4
026D0:  MOVLB  0
026D2:  RETURN 0
*
07758:  MOVLW  00
0775A:  BTFSC  FEF.0
0775C:  MOVLW  01
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... 
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... 
.................... void smf_write(void);
.................... 
.................... 
.................... void smf_read(void);
.................... 
.................... 
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // レベル3: デバイスドライバヘッダー（必要に応じて）
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル4: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル5: アプリケーションヘッダー
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... void mode_flash_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... void mode_flash_smf_erase(unsigned int8 parameter[]);
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_ERASE_AND_RESET 0x98
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... #include "ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01690:  MOVLW  CA
01692:  MOVWF  FF6
01694:  MOVLW  00
01696:  MOVWF  FF7
01698:  MOVLW  00
0169A:  MOVWF  FF8
0169C:  CALL   15D4
....................     // Set default register values
.................... 
....................     fprintf(PC, "\tComplete\r\n");
016A0:  MOVLW  DE
016A2:  MOVWF  FF6
016A4:  MOVLW  00
016A6:  MOVWF  FF7
016A8:  MOVLW  00
016AA:  MOVWF  FF8
016AC:  CALL   15D4
016B0:  GOTO   8CBA (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
03FD4:  MOVLB  7
03FD6:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
03FD8:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
03FDA:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
03FDC:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
03FDE:  BSF    xF6.4
....................     cmd.fields.range = 1; // Normal mode
03FE0:  BSF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
03FE2:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
03FE4:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
03FE6:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
03FE8:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
03FEA:  MOVF   xF5,W
03FEC:  ANDLW  01
03FEE:  MOVWF  01
03FF0:  BCF    xF7.2
03FF2:  BTFSC  01.0
03FF4:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
03FF6:  BCF    FD8.0
03FF8:  RRCF   xF5,W
03FFA:  ANDLW  01
03FFC:  MOVWF  01
03FFE:  BCF    xF7.3
04000:  BTFSC  01.0
04002:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
04004:  RRCF   xF5,W
04006:  MOVWF  00
04008:  RRCF   00,F
0400A:  MOVLW  3F
0400C:  ANDWF  00,F
0400E:  MOVF   00,W
04010:  ANDLW  01
04012:  MOVWF  01
04014:  BCF    xF7.4
04016:  BTFSC  01.0
04018:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
0401A:  RRCF   xF5,W
0401C:  MOVWF  00
0401E:  RRCF   00,F
04020:  RRCF   00,F
04022:  MOVLW  1F
04024:  ANDWF  00,F
04026:  MOVF   00,W
04028:  ANDLW  01
0402A:  MOVWF  01
0402C:  BCF    xF7.5
0402E:  BTFSC  01.0
04030:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
04032:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
04034:  BSF    xF7.7
.................... 
.................... 
....................     return cmd.value;
04036:  MOVF   xF6,W
04038:  MOVWF  01
0403A:  MOVF   xF7,W
0403C:  MOVWF  02
0403E:  MOVLB  0
04040:  GOTO   404C (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... #include "mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
02518:  MOVLB  7
0251A:  BCF    xF3.7
....................    cmd.fields.buffer = 1; // Buffer used
0251C:  BSF    xF3.6
....................    cmd.fields.gain = 1; // Gain 1x
0251E:  BSF    xF3.5
....................    cmd.fields.shutdown = 1; // Normal operation
02520:  BSF    xF3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
02522:  RRCF   xF1,W
02524:  MOVWF  xF5
02526:  RRCF   xF0,W
02528:  MOVWF  xF4
0252A:  RRCF   xF5,F
0252C:  RRCF   xF4,F
0252E:  RRCF   xF5,F
02530:  RRCF   xF4,F
02532:  RRCF   xF5,F
02534:  RRCF   xF4,F
02536:  RRCF   xF5,F
02538:  RRCF   xF4,F
0253A:  RRCF   xF5,F
0253C:  RRCF   xF4,F
0253E:  RRCF   xF5,F
02540:  RRCF   xF4,F
02542:  MOVLW  01
02544:  ANDWF  xF5,F
02546:  MOVF   xF4,W
02548:  ANDLW  01
0254A:  MOVWF  00
0254C:  CLRF   03
0254E:  MOVF   00,W
02550:  MOVWF  01
02552:  BCF    xF3.3
02554:  BTFSC  01.0
02556:  BSF    xF3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02558:  RRCF   xF1,W
0255A:  MOVWF  xF5
0255C:  RRCF   xF0,W
0255E:  MOVWF  xF4
02560:  RRCF   xF5,F
02562:  RRCF   xF4,F
02564:  RRCF   xF5,F
02566:  RRCF   xF4,F
02568:  RRCF   xF5,F
0256A:  RRCF   xF4,F
0256C:  RRCF   xF5,F
0256E:  RRCF   xF4,F
02570:  RRCF   xF5,F
02572:  RRCF   xF4,F
02574:  MOVLW  03
02576:  ANDWF  xF5,F
02578:  MOVF   xF4,W
0257A:  ANDLW  01
0257C:  MOVWF  00
0257E:  CLRF   03
02580:  MOVF   00,W
02582:  MOVWF  01
02584:  BCF    xF3.2
02586:  BTFSC  01.0
02588:  BSF    xF3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0258A:  RRCF   xF1,W
0258C:  MOVWF  xF5
0258E:  RRCF   xF0,W
02590:  MOVWF  xF4
02592:  RRCF   xF5,F
02594:  RRCF   xF4,F
02596:  RRCF   xF5,F
02598:  RRCF   xF4,F
0259A:  RRCF   xF5,F
0259C:  RRCF   xF4,F
0259E:  RRCF   xF5,F
025A0:  RRCF   xF4,F
025A2:  MOVLW  07
025A4:  ANDWF  xF5,F
025A6:  MOVF   xF4,W
025A8:  ANDLW  01
025AA:  MOVWF  00
025AC:  CLRF   03
025AE:  MOVF   00,W
025B0:  MOVWF  01
025B2:  BCF    xF3.1
025B4:  BTFSC  01.0
025B6:  BSF    xF3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
025B8:  RRCF   xF1,W
025BA:  MOVWF  xF5
025BC:  RRCF   xF0,W
025BE:  MOVWF  xF4
025C0:  RRCF   xF5,F
025C2:  RRCF   xF4,F
025C4:  RRCF   xF5,F
025C6:  RRCF   xF4,F
025C8:  RRCF   xF5,F
025CA:  RRCF   xF4,F
025CC:  MOVLW  0F
025CE:  ANDWF  xF5,F
025D0:  MOVF   xF4,W
025D2:  ANDLW  01
025D4:  MOVWF  00
025D6:  CLRF   03
025D8:  MOVF   00,W
025DA:  MOVWF  01
025DC:  BCF    xF3.0
025DE:  BTFSC  01.0
025E0:  BSF    xF3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
025E2:  RRCF   xF1,W
025E4:  MOVWF  xF5
025E6:  RRCF   xF0,W
025E8:  MOVWF  xF4
025EA:  RRCF   xF5,F
025EC:  RRCF   xF4,F
025EE:  RRCF   xF5,F
025F0:  RRCF   xF4,F
025F2:  MOVLW  1F
025F4:  ANDWF  xF5,F
025F6:  MOVF   xF4,W
025F8:  ANDLW  01
025FA:  MOVWF  00
025FC:  CLRF   03
025FE:  MOVF   00,W
02600:  MOVWF  01
02602:  BCF    xF2.7
02604:  BTFSC  01.0
02606:  BSF    xF2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
02608:  RRCF   xF1,W
0260A:  MOVWF  xF5
0260C:  RRCF   xF0,W
0260E:  MOVWF  xF4
02610:  RRCF   xF5,F
02612:  RRCF   xF4,F
02614:  MOVLW  3F
02616:  ANDWF  xF5,F
02618:  MOVF   xF4,W
0261A:  ANDLW  01
0261C:  MOVWF  00
0261E:  CLRF   03
02620:  MOVF   00,W
02622:  MOVWF  01
02624:  BCF    xF2.6
02626:  BTFSC  01.0
02628:  BSF    xF2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
0262A:  BCF    FD8.0
0262C:  RRCF   xF1,W
0262E:  MOVWF  xF5
02630:  RRCF   xF0,W
02632:  MOVWF  xF4
02634:  MOVF   xF4,W
02636:  ANDLW  01
02638:  MOVWF  00
0263A:  CLRF   03
0263C:  MOVF   00,W
0263E:  MOVWF  01
02640:  BCF    xF2.5
02642:  BTFSC  01.0
02644:  BSF    xF2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
02646:  MOVF   xF0,W
02648:  ANDLW  01
0264A:  MOVWF  00
0264C:  CLRF   03
0264E:  MOVF   00,W
02650:  MOVWF  01
02652:  BCF    xF2.4
02654:  BTFSC  01.0
02656:  BSF    xF2.4
....................    cmd.fields.reserved = 0; // Reserved bits
02658:  BCF    xF2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
0265A:  BCF    xF2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0265C:  BCF    xF2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0265E:  BCF    xF2.0
.................... 
....................    return cmd.value;
02660:  MOVF   xF2,W
02662:  MOVWF  01
02664:  MOVF   xF3,W
02666:  MOVWF  02
02668:  MOVLB  0
0266A:  GOTO   26E0 (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02724:  MOVLB  8
02726:  MOVF   x44,W
02728:  XORLW  00
0272A:  MOVLB  0
0272C:  BTFSC  FD8.2
0272E:  GOTO   273E
02732:  XORLW  01
02734:  BTFSC  FD8.2
02736:  GOTO   279E
0273A:  GOTO   27FE
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0273E:  MOVLB  8
02740:  CLRF   x4D
02742:  CLRF   x4C
02744:  MOVLB  0
02746:  MOVLB  8
02748:  MOVF   x4D,W
0274A:  SUBWF  x4B,W
0274C:  BTFSC  FD8.0
0274E:  BRA    2756
02750:  MOVLB  0
02752:  GOTO   279A
02756:  MOVLB  0
02758:  BTFSS  FD8.2
0275A:  GOTO   2770
0275E:  MOVLB  8
02760:  MOVF   x4A,W
02762:  SUBWF  x4C,W
02764:  BTFSS  FD8.0
02766:  BRA    276E
02768:  MOVLB  0
0276A:  GOTO   279A
0276E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02770:  MOVLB  8
02772:  MOVF   x48,W
02774:  ADDWF  x4C,W
02776:  MOVWF  FE9
02778:  MOVF   x49,W
0277A:  ADDWFC x4D,W
0277C:  MOVWF  FEA
0277E:  MOVFF  FEF,850
02782:  MOVFF  850,866
02786:  MOVLB  0
02788:  CALL   1708
0278C:  MOVLB  8
0278E:  INCF   x4C,F
02790:  BTFSC  FD8.2
02792:  INCF   x4D,F
02794:  MOVLB  0
02796:  GOTO   2746
....................          break;
0279A:  GOTO   2802
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0279E:  MOVLB  8
027A0:  CLRF   x4F
027A2:  CLRF   x4E
027A4:  MOVLB  0
027A6:  MOVLB  8
027A8:  MOVF   x4F,W
027AA:  SUBWF  x4B,W
027AC:  BTFSC  FD8.0
027AE:  BRA    27B6
027B0:  MOVLB  0
027B2:  GOTO   27FA
027B6:  MOVLB  0
027B8:  BTFSS  FD8.2
027BA:  GOTO   27D0
027BE:  MOVLB  8
027C0:  MOVF   x4A,W
027C2:  SUBWF  x4E,W
027C4:  BTFSS  FD8.0
027C6:  BRA    27CE
027C8:  MOVLB  0
027CA:  GOTO   27FA
027CE:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
027D0:  MOVLB  8
027D2:  MOVF   x48,W
027D4:  ADDWF  x4E,W
027D6:  MOVWF  FE9
027D8:  MOVF   x49,W
027DA:  ADDWFC x4F,W
027DC:  MOVWF  FEA
027DE:  MOVFF  FEF,850
027E2:  MOVFF  850,866
027E6:  MOVLB  0
027E8:  CALL   1708
027EC:  MOVLB  8
027EE:  INCF   x4E,F
027F0:  BTFSC  FD8.2
027F2:  INCF   x4F,F
027F4:  MOVLB  0
027F6:  GOTO   27A6
....................          break;
027FA:  GOTO   2802
....................          
....................       default:
....................          break;
027FE:  GOTO   2802
....................    }
....................    return;
02802:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0171C:  MOVLB  8
0171E:  MOVF   x4A,W
01720:  XORLW  00
01722:  MOVLB  0
01724:  BTFSC  FD8.2
01726:  GOTO   1736
0172A:  XORLW  01
0172C:  BTFSC  FD8.2
0172E:  GOTO   1832
01732:  GOTO   192E
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01736:  MOVLB  8
01738:  CLRF   x59
0173A:  CLRF   x58
0173C:  MOVLB  0
0173E:  MOVLB  8
01740:  MOVF   x59,W
01742:  SUBWF  x51,W
01744:  BTFSC  FD8.0
01746:  BRA    174E
01748:  MOVLB  0
0174A:  GOTO   1792
0174E:  MOVLB  0
01750:  BTFSS  FD8.2
01752:  GOTO   1768
01756:  MOVLB  8
01758:  MOVF   x50,W
0175A:  SUBWF  x58,W
0175C:  BTFSS  FD8.0
0175E:  BRA    1766
01760:  MOVLB  0
01762:  GOTO   1792
01766:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01768:  MOVLB  8
0176A:  MOVF   x4E,W
0176C:  ADDWF  x58,W
0176E:  MOVWF  FE9
01770:  MOVF   x4F,W
01772:  ADDWFC x59,W
01774:  MOVWF  FEA
01776:  MOVFF  FEF,864
0177A:  MOVFF  864,866
0177E:  MOVLB  0
01780:  CALL   1708
01784:  MOVLB  8
01786:  INCF   x58,F
01788:  BTFSC  FD8.2
0178A:  INCF   x59,F
0178C:  MOVLB  0
0178E:  GOTO   173E
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01792:  MOVLB  8
01794:  CLRF   x5D
01796:  CLRF   x5C
01798:  CLRF   x5B
0179A:  CLRF   x5A
0179C:  MOVLB  0
0179E:  MOVLB  8
017A0:  MOVF   x5D,W
017A2:  SUBWF  x57,W
017A4:  BTFSC  FD8.0
017A6:  BRA    17AE
017A8:  MOVLB  0
017AA:  GOTO   182E
017AE:  MOVLB  0
017B0:  BTFSS  FD8.2
017B2:  GOTO   17F8
017B6:  MOVLB  8
017B8:  MOVF   x5C,W
017BA:  SUBWF  x56,W
017BC:  BTFSC  FD8.0
017BE:  BRA    17C6
017C0:  MOVLB  0
017C2:  GOTO   182E
017C6:  MOVLB  0
017C8:  BTFSS  FD8.2
017CA:  GOTO   17F8
017CE:  MOVLB  8
017D0:  MOVF   x5B,W
017D2:  SUBWF  x55,W
017D4:  BTFSC  FD8.0
017D6:  BRA    17DE
017D8:  MOVLB  0
017DA:  GOTO   182E
017DE:  MOVLB  0
017E0:  BTFSS  FD8.2
017E2:  GOTO   17F8
017E6:  MOVLB  8
017E8:  MOVF   x54,W
017EA:  SUBWF  x5A,W
017EC:  BTFSS  FD8.0
017EE:  BRA    17F6
017F0:  MOVLB  0
017F2:  GOTO   182E
017F6:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
017F8:  MOVLB  8
017FA:  MOVF   x52,W
017FC:  ADDWF  x5A,W
017FE:  MOVWF  FE9
01800:  MOVF   x53,W
01802:  ADDWFC x5B,W
01804:  MOVWF  FEA
01806:  MOVLW  01
01808:  MOVWF  x66
0180A:  MOVLB  0
0180C:  CALL   1708
01810:  MOVF   01,W
01812:  MOVFF  00,FEF
01816:  MOVLW  01
01818:  MOVLB  8
0181A:  ADDWF  x5A,F
0181C:  BTFSC  FD8.0
0181E:  INCF   x5B,F
01820:  BTFSC  FD8.2
01822:  INCF   x5C,F
01824:  BTFSC  FD8.2
01826:  INCF   x5D,F
01828:  MOVLB  0
0182A:  GOTO   179E
....................          break;
0182E:  GOTO   1932
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01832:  MOVLB  8
01834:  CLRF   x5F
01836:  CLRF   x5E
01838:  MOVLB  0
0183A:  MOVLB  8
0183C:  MOVF   x5F,W
0183E:  SUBWF  x51,W
01840:  BTFSC  FD8.0
01842:  BRA    184A
01844:  MOVLB  0
01846:  GOTO   188E
0184A:  MOVLB  0
0184C:  BTFSS  FD8.2
0184E:  GOTO   1864
01852:  MOVLB  8
01854:  MOVF   x50,W
01856:  SUBWF  x5E,W
01858:  BTFSS  FD8.0
0185A:  BRA    1862
0185C:  MOVLB  0
0185E:  GOTO   188E
01862:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
01864:  MOVLB  8
01866:  MOVF   x4E,W
01868:  ADDWF  x5E,W
0186A:  MOVWF  FE9
0186C:  MOVF   x4F,W
0186E:  ADDWFC x5F,W
01870:  MOVWF  FEA
01872:  MOVFF  FEF,864
01876:  MOVFF  864,866
0187A:  MOVLB  0
0187C:  CALL   1708
01880:  MOVLB  8
01882:  INCF   x5E,F
01884:  BTFSC  FD8.2
01886:  INCF   x5F,F
01888:  MOVLB  0
0188A:  GOTO   183A
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0188E:  MOVLB  8
01890:  CLRF   x63
01892:  CLRF   x62
01894:  CLRF   x61
01896:  CLRF   x60
01898:  MOVLB  0
0189A:  MOVLB  8
0189C:  MOVF   x63,W
0189E:  SUBWF  x57,W
018A0:  BTFSC  FD8.0
018A2:  BRA    18AA
018A4:  MOVLB  0
018A6:  GOTO   192A
018AA:  MOVLB  0
018AC:  BTFSS  FD8.2
018AE:  GOTO   18F4
018B2:  MOVLB  8
018B4:  MOVF   x62,W
018B6:  SUBWF  x56,W
018B8:  BTFSC  FD8.0
018BA:  BRA    18C2
018BC:  MOVLB  0
018BE:  GOTO   192A
018C2:  MOVLB  0
018C4:  BTFSS  FD8.2
018C6:  GOTO   18F4
018CA:  MOVLB  8
018CC:  MOVF   x61,W
018CE:  SUBWF  x55,W
018D0:  BTFSC  FD8.0
018D2:  BRA    18DA
018D4:  MOVLB  0
018D6:  GOTO   192A
018DA:  MOVLB  0
018DC:  BTFSS  FD8.2
018DE:  GOTO   18F4
018E2:  MOVLB  8
018E4:  MOVF   x54,W
018E6:  SUBWF  x60,W
018E8:  BTFSS  FD8.0
018EA:  BRA    18F2
018EC:  MOVLB  0
018EE:  GOTO   192A
018F2:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
018F4:  MOVLB  8
018F6:  MOVF   x52,W
018F8:  ADDWF  x60,W
018FA:  MOVWF  FE9
018FC:  MOVF   x53,W
018FE:  ADDWFC x61,W
01900:  MOVWF  FEA
01902:  MOVLW  01
01904:  MOVWF  x66
01906:  MOVLB  0
01908:  CALL   1708
0190C:  MOVF   01,W
0190E:  MOVFF  00,FEF
01912:  MOVLW  01
01914:  MOVLB  8
01916:  ADDWF  x60,F
01918:  BTFSC  FD8.0
0191A:  INCF   x61,F
0191C:  BTFSC  FD8.2
0191E:  INCF   x62,F
01920:  BTFSC  FD8.2
01922:  INCF   x63,F
01924:  MOVLB  0
01926:  GOTO   189A
....................          break;
0192A:  GOTO   1932
....................    
....................          
....................       default:
....................          break;
0192E:  GOTO   1932
....................    }
....................    return;
01932:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02804:  MOVLB  8
02806:  MOVF   x44,W
02808:  XORLW  00
0280A:  MOVLB  0
0280C:  BTFSC  FD8.2
0280E:  GOTO   281E
02812:  XORLW  01
02814:  BTFSC  FD8.2
02816:  GOTO   28BC
0281A:  GOTO   295A
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0281E:  MOVLB  8
02820:  CLRF   x4F
02822:  MOVLB  0
02824:  MOVLB  8
02826:  MOVF   x4A,W
02828:  SUBWF  x4F,W
0282A:  BTFSS  FD8.0
0282C:  BRA    2834
0282E:  MOVLB  0
02830:  GOTO   285C
02834:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02836:  MOVLB  8
02838:  MOVF   x4F,W
0283A:  ADDWF  x48,W
0283C:  MOVWF  FE9
0283E:  MOVLW  00
02840:  ADDWFC x49,W
02842:  MOVWF  FEA
02844:  MOVFF  FEF,855
02848:  MOVFF  855,866
0284C:  MOVLB  0
0284E:  CALL   1708
02852:  MOVLB  8
02854:  INCF   x4F,F
02856:  MOVLB  0
02858:  GOTO   2824
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0285C:  MOVLB  8
0285E:  CLRF   x51
02860:  CLRF   x50
02862:  MOVLB  0
02864:  MOVLB  8
02866:  MOVF   x51,W
02868:  SUBWF  x4E,W
0286A:  BTFSC  FD8.0
0286C:  BRA    2874
0286E:  MOVLB  0
02870:  GOTO   28B8
02874:  MOVLB  0
02876:  BTFSS  FD8.2
02878:  GOTO   288E
0287C:  MOVLB  8
0287E:  MOVF   x4D,W
02880:  SUBWF  x50,W
02882:  BTFSS  FD8.0
02884:  BRA    288C
02886:  MOVLB  0
02888:  GOTO   28B8
0288C:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0288E:  MOVLB  8
02890:  MOVF   x4B,W
02892:  ADDWF  x50,W
02894:  MOVWF  FE9
02896:  MOVF   x4C,W
02898:  ADDWFC x51,W
0289A:  MOVWF  FEA
0289C:  MOVFF  FEF,855
028A0:  MOVFF  855,866
028A4:  MOVLB  0
028A6:  CALL   1708
028AA:  MOVLB  8
028AC:  INCF   x50,F
028AE:  BTFSC  FD8.2
028B0:  INCF   x51,F
028B2:  MOVLB  0
028B4:  GOTO   2864
....................          break;
028B8:  GOTO   295E
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
028BC:  MOVLB  8
028BE:  CLRF   x52
028C0:  MOVLB  0
028C2:  MOVLB  8
028C4:  MOVF   x4A,W
028C6:  SUBWF  x52,W
028C8:  BTFSS  FD8.0
028CA:  BRA    28D2
028CC:  MOVLB  0
028CE:  GOTO   28FA
028D2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
028D4:  MOVLB  8
028D6:  MOVF   x52,W
028D8:  ADDWF  x48,W
028DA:  MOVWF  FE9
028DC:  MOVLW  00
028DE:  ADDWFC x49,W
028E0:  MOVWF  FEA
028E2:  MOVFF  FEF,855
028E6:  MOVFF  855,866
028EA:  MOVLB  0
028EC:  CALL   1708
028F0:  MOVLB  8
028F2:  INCF   x52,F
028F4:  MOVLB  0
028F6:  GOTO   28C2
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
028FA:  MOVLB  8
028FC:  CLRF   x54
028FE:  CLRF   x53
02900:  MOVLB  0
02902:  MOVLB  8
02904:  MOVF   x54,W
02906:  SUBWF  x4E,W
02908:  BTFSC  FD8.0
0290A:  BRA    2912
0290C:  MOVLB  0
0290E:  GOTO   2956
02912:  MOVLB  0
02914:  BTFSS  FD8.2
02916:  GOTO   292C
0291A:  MOVLB  8
0291C:  MOVF   x4D,W
0291E:  SUBWF  x53,W
02920:  BTFSS  FD8.0
02922:  BRA    292A
02924:  MOVLB  0
02926:  GOTO   2956
0292A:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0292C:  MOVLB  8
0292E:  MOVF   x4B,W
02930:  ADDWF  x53,W
02932:  MOVWF  FE9
02934:  MOVF   x4C,W
02936:  ADDWFC x54,W
02938:  MOVWF  FEA
0293A:  MOVFF  FEF,855
0293E:  MOVFF  855,866
02942:  MOVLB  0
02944:  CALL   1708
02948:  MOVLB  8
0294A:  INCF   x53,F
0294C:  BTFSC  FD8.2
0294E:  INCF   x54,F
02950:  MOVLB  0
02952:  GOTO   2902
....................          break;
02956:  GOTO   295E
....................          
....................       default:
....................          break;
0295A:  GOTO   295E
....................    }
....................    return;
0295E:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
05ACA:  MOVFF  497,84A
05ACE:  MOVLW  01
05AD0:  MOVLB  8
05AD2:  MOVWF  x4B
05AD4:  MOVLW  0F
05AD6:  MOVWF  x4D
05AD8:  MOVLW  89
05ADA:  MOVWF  x4C
05ADC:  MOVLB  0
05ADE:  CALL   16B4
05AE2:  MOVFF  497,84A
05AE6:  MOVLB  8
05AE8:  CLRF   x4B
05AEA:  MOVLW  0F
05AEC:  MOVWF  x4D
05AEE:  MOVLW  92
05AF0:  MOVWF  x4C
05AF2:  MOVLB  0
05AF4:  CALL   16B4
05AF8:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
02960:  MOVLW  05
02962:  MOVLB  8
02964:  MOVWF  x48
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
02966:  MOVFF  846,84A
0296A:  CLRF   x4B
0296C:  MOVLW  0F
0296E:  MOVWF  x4D
02970:  MOVLW  89
02972:  MOVWF  x4C
02974:  MOVLB  0
02976:  CALL   16B4
0297A:  MOVFF  846,84A
0297E:  MOVLB  8
02980:  CLRF   x4B
02982:  MOVLW  0F
02984:  MOVWF  x4D
02986:  MOVLW  92
02988:  MOVWF  x4C
0298A:  MOVLB  0
0298C:  CALL   16B4
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
02990:  MOVFF  847,84D
02994:  MOVFF  846,84C
02998:  MOVFF  845,84B
0299C:  MOVFF  844,84A
029A0:  MOVLW  08
029A2:  MOVLB  8
029A4:  MOVWF  x4F
029A6:  MOVLW  48
029A8:  MOVWF  x4E
029AA:  CLRF   x51
029AC:  MOVLW  01
029AE:  MOVWF  x50
029B0:  MOVLW  08
029B2:  MOVWF  x53
029B4:  MOVLW  49
029B6:  MOVWF  x52
029B8:  CLRF   x57
029BA:  CLRF   x56
029BC:  CLRF   x55
029BE:  MOVLW  01
029C0:  MOVWF  x54
029C2:  MOVLB  0
029C4:  CALL   171C
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
029C8:  MOVFF  846,84A
029CC:  MOVLW  01
029CE:  MOVLB  8
029D0:  MOVWF  x4B
029D2:  MOVLW  0F
029D4:  MOVWF  x4D
029D6:  MOVLW  89
029D8:  MOVWF  x4C
029DA:  MOVLB  0
029DC:  CALL   16B4
029E0:  MOVFF  846,84A
029E4:  MOVLB  8
029E6:  CLRF   x4B
029E8:  MOVLW  0F
029EA:  MOVWF  x4D
029EC:  MOVLW  92
029EE:  MOVWF  x4C
029F0:  MOVLB  0
029F2:  CALL   16B4
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
029F6:  MOVLB  8
029F8:  MOVF   x49,W
029FA:  MOVWF  01
029FC:  MOVLB  0
029FE:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
....................  
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04E30:  MOVLB  3
04E32:  MOVF   x95,F
04E34:  BTFSC  FD8.2
04E36:  BRA    4E3E
04E38:  MOVLB  0
04E3A:  GOTO   4F96
04E3E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04E40:  MOVLW  06
04E42:  MOVLB  3
04E44:  MOVWF  x9C
04E46:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04E48:  MOVLW  D8
04E4A:  MOVLB  3
04E4C:  MOVWF  x9D
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04E4E:  MOVFF  39A,3A9
04E52:  MOVFF  39B,3AA
04E56:  CLRF   xAB
04E58:  CLRF   xAC
04E5A:  MOVF   xA9,W
04E5C:  MOVWF  00
04E5E:  CLRF   01
04E60:  CLRF   02
04E62:  CLRF   03
04E64:  MOVFF  00,39E
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04E68:  MOVFF  399,3A9
04E6C:  MOVFF  39A,3AA
04E70:  MOVFF  39B,3AB
04E74:  CLRF   xAC
04E76:  MOVF   xA9,W
04E78:  MOVWF  00
04E7A:  CLRF   01
04E7C:  CLRF   02
04E7E:  CLRF   03
04E80:  MOVFF  00,39F
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04E84:  MOVF   x98,W
04E86:  MOVWF  00
04E88:  CLRF   01
04E8A:  CLRF   02
04E8C:  CLRF   03
04E8E:  MOVFF  00,3A0
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04E92:  MOVFF  396,84A
04E96:  MOVLB  8
04E98:  CLRF   x4B
04E9A:  MOVLW  0F
04E9C:  MOVWF  x4D
04E9E:  MOVLW  89
04EA0:  MOVWF  x4C
04EA2:  MOVLB  0
04EA4:  CALL   16B4
04EA8:  MOVFF  396,84A
04EAC:  MOVLB  8
04EAE:  CLRF   x4B
04EB0:  MOVLW  0F
04EB2:  MOVWF  x4D
04EB4:  MOVLW  92
04EB6:  MOVWF  x4C
04EB8:  MOVLB  0
04EBA:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04EBE:  MOVFF  397,847
04EC2:  MOVFF  396,846
04EC6:  MOVFF  395,845
04ECA:  MOVFF  394,844
04ECE:  MOVLW  03
04ED0:  MOVLB  8
04ED2:  MOVWF  x49
04ED4:  MOVLW  9C
04ED6:  MOVWF  x48
04ED8:  CLRF   x4B
04EDA:  MOVLW  01
04EDC:  MOVWF  x4A
04EDE:  MOVLB  0
04EE0:  CALL   2724
....................       output_high(flash_stream.cs_pin);
04EE4:  MOVFF  396,84A
04EE8:  MOVLW  01
04EEA:  MOVLB  8
04EEC:  MOVWF  x4B
04EEE:  MOVLW  0F
04EF0:  MOVWF  x4D
04EF2:  MOVLW  89
04EF4:  MOVWF  x4C
04EF6:  MOVLB  0
04EF8:  CALL   16B4
04EFC:  MOVFF  396,84A
04F00:  MOVLB  8
04F02:  CLRF   x4B
04F04:  MOVLW  0F
04F06:  MOVWF  x4D
04F08:  MOVLW  92
04F0A:  MOVWF  x4C
04F0C:  MOVLB  0
04F0E:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04F12:  MOVFF  396,84A
04F16:  MOVLB  8
04F18:  CLRF   x4B
04F1A:  MOVLW  0F
04F1C:  MOVWF  x4D
04F1E:  MOVLW  89
04F20:  MOVWF  x4C
04F22:  MOVLB  0
04F24:  CALL   16B4
04F28:  MOVFF  396,84A
04F2C:  MOVLB  8
04F2E:  CLRF   x4B
04F30:  MOVLW  0F
04F32:  MOVWF  x4D
04F34:  MOVLW  92
04F36:  MOVWF  x4C
04F38:  MOVLB  0
04F3A:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04F3E:  MOVFF  397,847
04F42:  MOVFF  396,846
04F46:  MOVFF  395,845
04F4A:  MOVFF  394,844
04F4E:  MOVLW  03
04F50:  MOVLB  8
04F52:  MOVWF  x49
04F54:  MOVLW  9D
04F56:  MOVWF  x48
04F58:  CLRF   x4B
04F5A:  MOVLW  04
04F5C:  MOVWF  x4A
04F5E:  MOVLB  0
04F60:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04F64:  MOVFF  396,84A
04F68:  MOVLW  01
04F6A:  MOVLB  8
04F6C:  MOVWF  x4B
04F6E:  MOVLW  0F
04F70:  MOVWF  x4D
04F72:  MOVLW  89
04F74:  MOVWF  x4C
04F76:  MOVLB  0
04F78:  CALL   16B4
04F7C:  MOVFF  396,84A
04F80:  MOVLB  8
04F82:  CLRF   x4B
04F84:  MOVLW  0F
04F86:  MOVWF  x4D
04F88:  MOVLW  92
04F8A:  MOVWF  x4C
04F8C:  MOVLB  0
04F8E:  CALL   16B4
....................    }
04F92:  GOTO   5116
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04F96:  MOVLB  3
04F98:  DECFSZ x95,W
04F9A:  BRA    4FA0
04F9C:  BRA    4FA6
04F9E:  MOVLB  0
04FA0:  MOVLB  0
04FA2:  GOTO   5116
04FA6:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04FA8:  MOVLW  06
04FAA:  MOVLB  3
04FAC:  MOVWF  xA1
04FAE:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
04FB0:  MOVLW  DC
04FB2:  MOVLB  3
04FB4:  MOVWF  xA2
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04FB6:  MOVFF  39B,3A9
04FBA:  CLRF   xAA
04FBC:  CLRF   xAB
04FBE:  CLRF   xAC
04FC0:  MOVF   xA9,W
04FC2:  MOVWF  00
04FC4:  CLRF   01
04FC6:  CLRF   02
04FC8:  CLRF   03
04FCA:  MOVFF  00,3A3
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04FCE:  MOVFF  39A,3A9
04FD2:  MOVFF  39B,3AA
04FD6:  CLRF   xAB
04FD8:  CLRF   xAC
04FDA:  MOVF   xA9,W
04FDC:  MOVWF  00
04FDE:  CLRF   01
04FE0:  CLRF   02
04FE2:  CLRF   03
04FE4:  MOVFF  00,3A4
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04FE8:  MOVFF  399,3A9
04FEC:  MOVFF  39A,3AA
04FF0:  MOVFF  39B,3AB
04FF4:  CLRF   xAC
04FF6:  MOVF   xA9,W
04FF8:  MOVWF  00
04FFA:  CLRF   01
04FFC:  CLRF   02
04FFE:  CLRF   03
05000:  MOVFF  00,3A5
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05004:  MOVF   x98,W
05006:  MOVWF  00
05008:  CLRF   01
0500A:  CLRF   02
0500C:  CLRF   03
0500E:  MOVFF  00,3A6
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05012:  MOVFF  396,84A
05016:  MOVLB  8
05018:  CLRF   x4B
0501A:  MOVLW  0F
0501C:  MOVWF  x4D
0501E:  MOVLW  89
05020:  MOVWF  x4C
05022:  MOVLB  0
05024:  CALL   16B4
05028:  MOVFF  396,84A
0502C:  MOVLB  8
0502E:  CLRF   x4B
05030:  MOVLW  0F
05032:  MOVWF  x4D
05034:  MOVLW  92
05036:  MOVWF  x4C
05038:  MOVLB  0
0503A:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0503E:  MOVFF  397,847
05042:  MOVFF  396,846
05046:  MOVFF  395,845
0504A:  MOVFF  394,844
0504E:  MOVLW  03
05050:  MOVLB  8
05052:  MOVWF  x49
05054:  MOVLW  A1
05056:  MOVWF  x48
05058:  CLRF   x4B
0505A:  MOVLW  01
0505C:  MOVWF  x4A
0505E:  MOVLB  0
05060:  CALL   2724
....................       output_high(flash_stream.cs_pin);
05064:  MOVFF  396,84A
05068:  MOVLW  01
0506A:  MOVLB  8
0506C:  MOVWF  x4B
0506E:  MOVLW  0F
05070:  MOVWF  x4D
05072:  MOVLW  89
05074:  MOVWF  x4C
05076:  MOVLB  0
05078:  CALL   16B4
0507C:  MOVFF  396,84A
05080:  MOVLB  8
05082:  CLRF   x4B
05084:  MOVLW  0F
05086:  MOVWF  x4D
05088:  MOVLW  92
0508A:  MOVWF  x4C
0508C:  MOVLB  0
0508E:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05092:  MOVFF  396,84A
05096:  MOVLB  8
05098:  CLRF   x4B
0509A:  MOVLW  0F
0509C:  MOVWF  x4D
0509E:  MOVLW  89
050A0:  MOVWF  x4C
050A2:  MOVLB  0
050A4:  CALL   16B4
050A8:  MOVFF  396,84A
050AC:  MOVLB  8
050AE:  CLRF   x4B
050B0:  MOVLW  0F
050B2:  MOVWF  x4D
050B4:  MOVLW  92
050B6:  MOVWF  x4C
050B8:  MOVLB  0
050BA:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
050BE:  MOVFF  397,847
050C2:  MOVFF  396,846
050C6:  MOVFF  395,845
050CA:  MOVFF  394,844
050CE:  MOVLW  03
050D0:  MOVLB  8
050D2:  MOVWF  x49
050D4:  MOVLW  A2
050D6:  MOVWF  x48
050D8:  CLRF   x4B
050DA:  MOVLW  05
050DC:  MOVWF  x4A
050DE:  MOVLB  0
050E0:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
050E4:  MOVFF  396,84A
050E8:  MOVLW  01
050EA:  MOVLB  8
050EC:  MOVWF  x4B
050EE:  MOVLW  0F
050F0:  MOVWF  x4D
050F2:  MOVLW  89
050F4:  MOVWF  x4C
050F6:  MOVLB  0
050F8:  CALL   16B4
050FC:  MOVFF  396,84A
05100:  MOVLB  8
05102:  CLRF   x4B
05104:  MOVLW  0F
05106:  MOVWF  x4D
05108:  MOVLW  92
0510A:  MOVWF  x4C
0510C:  MOVLB  0
0510E:  CALL   16B4
....................    }
05112:  GOTO   5116
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05116:  MOVLB  3
05118:  CLRF   xA7
0511A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
0511C:  MOVFF  397,847
05120:  MOVFF  396,846
05124:  MOVFF  395,845
05128:  MOVFF  394,844
0512C:  CALL   2960
05130:  MOVF   01,W
05132:  ANDLW  01
05134:  SUBLW  01
05136:  BTFSS  FD8.2
05138:  GOTO   518A
....................       if(timeout_counter > 10)
0513C:  MOVLB  3
0513E:  MOVF   xA7,W
05140:  SUBLW  0A
05142:  BTFSS  FD8.0
05144:  BRA    514C
05146:  MOVLB  0
05148:  GOTO   515E
0514C:  MOVLB  0
....................          delay_ms(200);
0514E:  MOVLW  C8
05150:  MOVLB  8
05152:  MOVWF  x44
05154:  MOVLB  0
05156:  CALL   1554
0515A:  GOTO   516A
....................       else
....................          delay_ms(10);   
0515E:  MOVLW  0A
05160:  MOVLB  8
05162:  MOVWF  x44
05164:  MOVLB  0
05166:  CALL   1554
....................       
....................       if(timeout_counter > 100){
0516A:  MOVLB  3
0516C:  MOVF   xA7,W
0516E:  SUBLW  64
05170:  BTFSS  FD8.0
05172:  BRA    517A
05174:  MOVLB  0
05176:  GOTO   5180
0517A:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0517C:  GOTO   518A
....................       }  
....................       timeout_counter++;
05180:  MOVLB  3
05182:  INCF   xA7,F
05184:  MOVLB  0
05186:  GOTO   511C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
0518A:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02D84:  MOVLB  8
02D86:  MOVF   x2D,F
02D88:  BTFSC  FD8.2
02D8A:  BRA    2D92
02D8C:  MOVLB  0
02D8E:  GOTO   2EE8
02D92:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02D94:  MOVLW  06
02D96:  MOVLB  8
02D98:  MOVWF  x34
02D9A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
02D9C:  MOVLW  20
02D9E:  MOVLB  8
02DA0:  MOVWF  x35
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02DA2:  MOVFF  832,841
02DA6:  MOVFF  833,842
02DAA:  CLRF   x43
02DAC:  CLRF   x44
02DAE:  MOVF   x41,W
02DB0:  MOVWF  00
02DB2:  CLRF   01
02DB4:  CLRF   02
02DB6:  CLRF   03
02DB8:  MOVFF  00,836
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02DBC:  MOVFF  831,841
02DC0:  MOVFF  832,842
02DC4:  MOVFF  833,843
02DC8:  CLRF   x44
02DCA:  MOVF   x41,W
02DCC:  MOVWF  00
02DCE:  CLRF   01
02DD0:  CLRF   02
02DD2:  CLRF   03
02DD4:  MOVFF  00,837
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02DD8:  MOVF   x30,W
02DDA:  MOVWF  00
02DDC:  CLRF   01
02DDE:  CLRF   02
02DE0:  CLRF   03
02DE2:  MOVFF  00,838
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02DE6:  MOVFF  82E,84A
02DEA:  CLRF   x4B
02DEC:  MOVLW  0F
02DEE:  MOVWF  x4D
02DF0:  MOVLW  89
02DF2:  MOVWF  x4C
02DF4:  MOVLB  0
02DF6:  CALL   16B4
02DFA:  MOVFF  82E,84A
02DFE:  MOVLB  8
02E00:  CLRF   x4B
02E02:  MOVLW  0F
02E04:  MOVWF  x4D
02E06:  MOVLW  92
02E08:  MOVWF  x4C
02E0A:  MOVLB  0
02E0C:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02E10:  MOVFF  82F,847
02E14:  MOVFF  82E,846
02E18:  MOVFF  82D,845
02E1C:  MOVFF  82C,844
02E20:  MOVLW  08
02E22:  MOVLB  8
02E24:  MOVWF  x49
02E26:  MOVLW  34
02E28:  MOVWF  x48
02E2A:  CLRF   x4B
02E2C:  MOVLW  01
02E2E:  MOVWF  x4A
02E30:  MOVLB  0
02E32:  CALL   2724
....................       output_high(flash_stream.cs_pin);
02E36:  MOVFF  82E,84A
02E3A:  MOVLW  01
02E3C:  MOVLB  8
02E3E:  MOVWF  x4B
02E40:  MOVLW  0F
02E42:  MOVWF  x4D
02E44:  MOVLW  89
02E46:  MOVWF  x4C
02E48:  MOVLB  0
02E4A:  CALL   16B4
02E4E:  MOVFF  82E,84A
02E52:  MOVLB  8
02E54:  CLRF   x4B
02E56:  MOVLW  0F
02E58:  MOVWF  x4D
02E5A:  MOVLW  92
02E5C:  MOVWF  x4C
02E5E:  MOVLB  0
02E60:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02E64:  MOVFF  82E,84A
02E68:  MOVLB  8
02E6A:  CLRF   x4B
02E6C:  MOVLW  0F
02E6E:  MOVWF  x4D
02E70:  MOVLW  89
02E72:  MOVWF  x4C
02E74:  MOVLB  0
02E76:  CALL   16B4
02E7A:  MOVFF  82E,84A
02E7E:  MOVLB  8
02E80:  CLRF   x4B
02E82:  MOVLW  0F
02E84:  MOVWF  x4D
02E86:  MOVLW  92
02E88:  MOVWF  x4C
02E8A:  MOVLB  0
02E8C:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
02E90:  MOVFF  82F,847
02E94:  MOVFF  82E,846
02E98:  MOVFF  82D,845
02E9C:  MOVFF  82C,844
02EA0:  MOVLW  08
02EA2:  MOVLB  8
02EA4:  MOVWF  x49
02EA6:  MOVLW  35
02EA8:  MOVWF  x48
02EAA:  CLRF   x4B
02EAC:  MOVLW  04
02EAE:  MOVWF  x4A
02EB0:  MOVLB  0
02EB2:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02EB6:  MOVFF  82E,84A
02EBA:  MOVLW  01
02EBC:  MOVLB  8
02EBE:  MOVWF  x4B
02EC0:  MOVLW  0F
02EC2:  MOVWF  x4D
02EC4:  MOVLW  89
02EC6:  MOVWF  x4C
02EC8:  MOVLB  0
02ECA:  CALL   16B4
02ECE:  MOVFF  82E,84A
02ED2:  MOVLB  8
02ED4:  CLRF   x4B
02ED6:  MOVLW  0F
02ED8:  MOVWF  x4D
02EDA:  MOVLW  92
02EDC:  MOVWF  x4C
02EDE:  MOVLB  0
02EE0:  CALL   16B4
....................    }
02EE4:  GOTO   3066
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02EE8:  MOVLB  8
02EEA:  DECFSZ x2D,W
02EEC:  BRA    2EF2
02EEE:  BRA    2EF8
02EF0:  MOVLB  0
02EF2:  MOVLB  0
02EF4:  GOTO   3066
02EF8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
02EFA:  MOVLW  06
02EFC:  MOVLB  8
02EFE:  MOVWF  x39
02F00:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
02F02:  MOVLW  21
02F04:  MOVLB  8
02F06:  MOVWF  x3A
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
02F08:  MOVFF  833,841
02F0C:  CLRF   x42
02F0E:  CLRF   x43
02F10:  CLRF   x44
02F12:  MOVF   x41,W
02F14:  MOVWF  00
02F16:  CLRF   01
02F18:  CLRF   02
02F1A:  CLRF   03
02F1C:  MOVFF  00,83B
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02F20:  MOVFF  832,841
02F24:  MOVFF  833,842
02F28:  CLRF   x43
02F2A:  CLRF   x44
02F2C:  MOVF   x41,W
02F2E:  MOVWF  00
02F30:  CLRF   01
02F32:  CLRF   02
02F34:  CLRF   03
02F36:  MOVFF  00,83C
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02F3A:  MOVFF  831,841
02F3E:  MOVFF  832,842
02F42:  MOVFF  833,843
02F46:  CLRF   x44
02F48:  MOVF   x41,W
02F4A:  MOVWF  00
02F4C:  CLRF   01
02F4E:  CLRF   02
02F50:  CLRF   03
02F52:  MOVFF  00,83D
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02F56:  MOVF   x30,W
02F58:  MOVWF  00
02F5A:  CLRF   01
02F5C:  CLRF   02
02F5E:  CLRF   03
02F60:  MOVFF  00,83E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02F64:  MOVFF  82E,84A
02F68:  CLRF   x4B
02F6A:  MOVLW  0F
02F6C:  MOVWF  x4D
02F6E:  MOVLW  89
02F70:  MOVWF  x4C
02F72:  MOVLB  0
02F74:  CALL   16B4
02F78:  MOVFF  82E,84A
02F7C:  MOVLB  8
02F7E:  CLRF   x4B
02F80:  MOVLW  0F
02F82:  MOVWF  x4D
02F84:  MOVLW  92
02F86:  MOVWF  x4C
02F88:  MOVLB  0
02F8A:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02F8E:  MOVFF  82F,847
02F92:  MOVFF  82E,846
02F96:  MOVFF  82D,845
02F9A:  MOVFF  82C,844
02F9E:  MOVLW  08
02FA0:  MOVLB  8
02FA2:  MOVWF  x49
02FA4:  MOVLW  39
02FA6:  MOVWF  x48
02FA8:  CLRF   x4B
02FAA:  MOVLW  01
02FAC:  MOVWF  x4A
02FAE:  MOVLB  0
02FB0:  CALL   2724
....................       output_high(flash_stream.cs_pin);
02FB4:  MOVFF  82E,84A
02FB8:  MOVLW  01
02FBA:  MOVLB  8
02FBC:  MOVWF  x4B
02FBE:  MOVLW  0F
02FC0:  MOVWF  x4D
02FC2:  MOVLW  89
02FC4:  MOVWF  x4C
02FC6:  MOVLB  0
02FC8:  CALL   16B4
02FCC:  MOVFF  82E,84A
02FD0:  MOVLB  8
02FD2:  CLRF   x4B
02FD4:  MOVLW  0F
02FD6:  MOVWF  x4D
02FD8:  MOVLW  92
02FDA:  MOVWF  x4C
02FDC:  MOVLB  0
02FDE:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02FE2:  MOVFF  82E,84A
02FE6:  MOVLB  8
02FE8:  CLRF   x4B
02FEA:  MOVLW  0F
02FEC:  MOVWF  x4D
02FEE:  MOVLW  89
02FF0:  MOVWF  x4C
02FF2:  MOVLB  0
02FF4:  CALL   16B4
02FF8:  MOVFF  82E,84A
02FFC:  MOVLB  8
02FFE:  CLRF   x4B
03000:  MOVLW  0F
03002:  MOVWF  x4D
03004:  MOVLW  92
03006:  MOVWF  x4C
03008:  MOVLB  0
0300A:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0300E:  MOVFF  82F,847
03012:  MOVFF  82E,846
03016:  MOVFF  82D,845
0301A:  MOVFF  82C,844
0301E:  MOVLW  08
03020:  MOVLB  8
03022:  MOVWF  x49
03024:  MOVLW  3A
03026:  MOVWF  x48
03028:  CLRF   x4B
0302A:  MOVLW  05
0302C:  MOVWF  x4A
0302E:  MOVLB  0
03030:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03034:  MOVFF  82E,84A
03038:  MOVLW  01
0303A:  MOVLB  8
0303C:  MOVWF  x4B
0303E:  MOVLW  0F
03040:  MOVWF  x4D
03042:  MOVLW  89
03044:  MOVWF  x4C
03046:  MOVLB  0
03048:  CALL   16B4
0304C:  MOVFF  82E,84A
03050:  MOVLB  8
03052:  CLRF   x4B
03054:  MOVLW  0F
03056:  MOVWF  x4D
03058:  MOVLW  92
0305A:  MOVWF  x4C
0305C:  MOVLB  0
0305E:  CALL   16B4
....................    }
03062:  GOTO   3066
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03066:  MOVLB  8
03068:  CLRF   x3F
0306A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0306C:  MOVFF  82F,847
03070:  MOVFF  82E,846
03074:  MOVFF  82D,845
03078:  MOVFF  82C,844
0307C:  CALL   2960
03080:  MOVF   01,W
03082:  ANDLW  01
03084:  SUBLW  01
03086:  BTFSS  FD8.2
03088:  GOTO   30DA
....................       if(timeout_counter > 10)
0308C:  MOVLB  8
0308E:  MOVF   x3F,W
03090:  SUBLW  0A
03092:  BTFSS  FD8.0
03094:  BRA    309C
03096:  MOVLB  0
03098:  GOTO   30AE
0309C:  MOVLB  0
....................          delay_ms(200);
0309E:  MOVLW  C8
030A0:  MOVLB  8
030A2:  MOVWF  x44
030A4:  MOVLB  0
030A6:  CALL   1554
030AA:  GOTO   30BA
....................       else
....................          delay_ms(10);   
030AE:  MOVLW  0A
030B0:  MOVLB  8
030B2:  MOVWF  x44
030B4:  MOVLB  0
030B6:  CALL   1554
....................       
....................       if(timeout_counter > 100){
030BA:  MOVLB  8
030BC:  MOVF   x3F,W
030BE:  SUBLW  64
030C0:  BTFSS  FD8.0
030C2:  BRA    30CA
030C4:  MOVLB  0
030C6:  GOTO   30D0
030CA:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
030CC:  GOTO   30DA
....................       }  
....................       timeout_counter++;
030D0:  MOVLB  8
030D2:  INCF   x3F,F
030D4:  MOVLB  0
030D6:  GOTO   306C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
030DA:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
06FC0:  MOVLB  4
06FC2:  MOVF   x21,F
06FC4:  BTFSC  FD8.2
06FC6:  BRA    6FCE
06FC8:  MOVLB  0
06FCA:  GOTO   70BA
06FCE:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
06FD0:  MOVLW  03
06FD2:  MOVLB  4
06FD4:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
06FD6:  MOVFF  426,433
06FDA:  MOVFF  427,434
06FDE:  CLRF   x35
06FE0:  CLRF   x36
06FE2:  MOVF   x33,W
06FE4:  MOVWF  00
06FE6:  CLRF   01
06FE8:  CLRF   02
06FEA:  CLRF   03
06FEC:  MOVFF  00,42A
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
06FF0:  MOVFF  425,433
06FF4:  MOVFF  426,434
06FF8:  MOVFF  427,435
06FFC:  CLRF   x36
06FFE:  MOVF   x33,W
07000:  MOVWF  00
07002:  CLRF   01
07004:  CLRF   02
07006:  CLRF   03
07008:  MOVFF  00,42B
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
0700C:  MOVF   x24,W
0700E:  MOVWF  00
07010:  CLRF   01
07012:  CLRF   02
07014:  CLRF   03
07016:  MOVFF  00,42C
....................             
....................       output_low(flash_stream.cs_pin);
0701A:  MOVFF  422,84A
0701E:  MOVLB  8
07020:  CLRF   x4B
07022:  MOVLW  0F
07024:  MOVWF  x4D
07026:  MOVLW  89
07028:  MOVWF  x4C
0702A:  MOVLB  0
0702C:  CALL   16B4
07030:  MOVFF  422,84A
07034:  MOVLB  8
07036:  CLRF   x4B
07038:  MOVLW  0F
0703A:  MOVWF  x4D
0703C:  MOVLW  92
0703E:  MOVWF  x4C
07040:  MOVLB  0
07042:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
07046:  MOVFF  423,84D
0704A:  MOVFF  422,84C
0704E:  MOVFF  421,84B
07052:  MOVFF  420,84A
07056:  MOVLW  04
07058:  MOVLB  8
0705A:  MOVWF  x4F
0705C:  MOVLW  29
0705E:  MOVWF  x4E
07060:  CLRF   x51
07062:  MOVLW  04
07064:  MOVWF  x50
07066:  MOVLW  04
07068:  MOVWF  x53
0706A:  MOVLW  28
0706C:  MOVWF  x52
0706E:  CLRF   x57
07070:  CLRF   x56
07072:  CLRF   x55
07074:  MOVLW  01
07076:  MOVWF  x54
07078:  MOVLB  0
0707A:  CALL   171C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0707E:  MOVLW  02
07080:  MOVWF  00
07082:  DECFSZ 00,F
07084:  BRA    7082
07086:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07088:  MOVFF  422,84A
0708C:  MOVLW  01
0708E:  MOVLB  8
07090:  MOVWF  x4B
07092:  MOVLW  0F
07094:  MOVWF  x4D
07096:  MOVLW  89
07098:  MOVWF  x4C
0709A:  MOVLB  0
0709C:  CALL   16B4
070A0:  MOVFF  422,84A
070A4:  MOVLB  8
070A6:  CLRF   x4B
070A8:  MOVLW  0F
070AA:  MOVWF  x4D
070AC:  MOVLW  92
070AE:  MOVWF  x4C
070B0:  MOVLB  0
070B2:  CALL   16B4
....................    }
070B6:  GOTO   71CA
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
070BA:  MOVLB  4
070BC:  DECFSZ x21,W
070BE:  BRA    70C4
070C0:  BRA    70CA
070C2:  MOVLB  0
070C4:  MOVLB  0
070C6:  GOTO   71CA
070CA:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
070CC:  MOVLW  13
070CE:  MOVLB  4
070D0:  MOVWF  x2D
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
070D2:  MOVFF  427,433
070D6:  CLRF   x34
070D8:  CLRF   x35
070DA:  CLRF   x36
070DC:  MOVF   x33,W
070DE:  MOVWF  00
070E0:  CLRF   01
070E2:  CLRF   02
070E4:  CLRF   03
070E6:  MOVFF  00,42E
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
070EA:  MOVFF  426,433
070EE:  MOVFF  427,434
070F2:  CLRF   x35
070F4:  CLRF   x36
070F6:  MOVF   x33,W
070F8:  MOVWF  00
070FA:  CLRF   01
070FC:  CLRF   02
070FE:  CLRF   03
07100:  MOVFF  00,42F
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07104:  MOVFF  425,433
07108:  MOVFF  426,434
0710C:  MOVFF  427,435
07110:  CLRF   x36
07112:  MOVF   x33,W
07114:  MOVWF  00
07116:  CLRF   01
07118:  CLRF   02
0711A:  CLRF   03
0711C:  MOVFF  00,430
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
07120:  MOVF   x24,W
07122:  MOVWF  00
07124:  CLRF   01
07126:  CLRF   02
07128:  CLRF   03
0712A:  MOVFF  00,431
....................    
....................       output_low(flash_stream.cs_pin);
0712E:  MOVFF  422,84A
07132:  MOVLB  8
07134:  CLRF   x4B
07136:  MOVLW  0F
07138:  MOVWF  x4D
0713A:  MOVLW  89
0713C:  MOVWF  x4C
0713E:  MOVLB  0
07140:  CALL   16B4
07144:  MOVFF  422,84A
07148:  MOVLB  8
0714A:  CLRF   x4B
0714C:  MOVLW  0F
0714E:  MOVWF  x4D
07150:  MOVLW  92
07152:  MOVWF  x4C
07154:  MOVLB  0
07156:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
0715A:  MOVFF  423,84D
0715E:  MOVFF  422,84C
07162:  MOVFF  421,84B
07166:  MOVFF  420,84A
0716A:  MOVLW  04
0716C:  MOVLB  8
0716E:  MOVWF  x4F
07170:  MOVLW  2D
07172:  MOVWF  x4E
07174:  CLRF   x51
07176:  MOVLW  05
07178:  MOVWF  x50
0717A:  MOVLW  04
0717C:  MOVWF  x53
0717E:  MOVLW  28
07180:  MOVWF  x52
07182:  CLRF   x57
07184:  CLRF   x56
07186:  CLRF   x55
07188:  MOVLW  01
0718A:  MOVWF  x54
0718C:  MOVLB  0
0718E:  CALL   171C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
07192:  MOVLW  02
07194:  MOVWF  00
07196:  DECFSZ 00,F
07198:  BRA    7196
0719A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0719C:  MOVFF  422,84A
071A0:  MOVLW  01
071A2:  MOVLB  8
071A4:  MOVWF  x4B
071A6:  MOVLW  0F
071A8:  MOVWF  x4D
071AA:  MOVLW  89
071AC:  MOVWF  x4C
071AE:  MOVLB  0
071B0:  CALL   16B4
071B4:  MOVFF  422,84A
071B8:  MOVLB  8
071BA:  CLRF   x4B
071BC:  MOVLW  0F
071BE:  MOVWF  x4D
071C0:  MOVLW  92
071C2:  MOVWF  x4C
071C4:  MOVLB  0
071C6:  CALL   16B4
....................    }
....................    return read_data;
071CA:  MOVLB  4
071CC:  MOVF   x28,W
071CE:  MOVWF  01
071D0:  MOVLB  0
071D2:  GOTO   7B42 (RETURN)
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
019F2:  MOVLB  4
019F4:  MOVF   x96,F
019F6:  BTFSC  FD8.2
019F8:  BRA    1A00
019FA:  MOVLB  0
019FC:  GOTO   1AF2
01A00:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
01A02:  MOVLW  03
01A04:  MOVLB  4
01A06:  MOVWF  xA3
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
01A08:  MOVFF  49B,4AD
01A0C:  MOVFF  49C,4AE
01A10:  CLRF   xAF
01A12:  CLRF   xB0
01A14:  MOVF   xAD,W
01A16:  MOVWF  00
01A18:  CLRF   01
01A1A:  CLRF   02
01A1C:  CLRF   03
01A1E:  MOVFF  00,4A4
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01A22:  MOVFF  49A,4AD
01A26:  MOVFF  49B,4AE
01A2A:  MOVFF  49C,4AF
01A2E:  CLRF   xB0
01A30:  MOVF   xAD,W
01A32:  MOVWF  00
01A34:  CLRF   01
01A36:  CLRF   02
01A38:  CLRF   03
01A3A:  MOVFF  00,4A5
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01A3E:  MOVF   x99,W
01A40:  MOVWF  00
01A42:  CLRF   01
01A44:  CLRF   02
01A46:  CLRF   03
01A48:  MOVFF  00,4A6
....................             
....................       output_low(flash_stream.cs_pin);
01A4C:  MOVFF  497,84A
01A50:  MOVLB  8
01A52:  CLRF   x4B
01A54:  MOVLW  0F
01A56:  MOVWF  x4D
01A58:  MOVLW  89
01A5A:  MOVWF  x4C
01A5C:  MOVLB  0
01A5E:  CALL   16B4
01A62:  MOVFF  497,84A
01A66:  MOVLB  8
01A68:  CLRF   x4B
01A6A:  MOVLW  0F
01A6C:  MOVWF  x4D
01A6E:  MOVLW  92
01A70:  MOVWF  x4C
01A72:  MOVLB  0
01A74:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
01A78:  MOVFF  498,84D
01A7C:  MOVFF  497,84C
01A80:  MOVFF  496,84B
01A84:  MOVFF  495,84A
01A88:  MOVLW  04
01A8A:  MOVLB  8
01A8C:  MOVWF  x4F
01A8E:  MOVLW  A3
01A90:  MOVWF  x4E
01A92:  CLRF   x51
01A94:  MOVLW  04
01A96:  MOVWF  x50
01A98:  MOVFF  49E,853
01A9C:  MOVFF  49D,852
01AA0:  MOVFF  4A2,857
01AA4:  MOVFF  4A1,856
01AA8:  MOVFF  4A0,855
01AAC:  MOVFF  49F,854
01AB0:  MOVLB  0
01AB2:  CALL   171C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
01AB6:  MOVLW  02
01AB8:  MOVWF  00
01ABA:  DECFSZ 00,F
01ABC:  BRA    1ABA
01ABE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
01AC0:  MOVFF  497,84A
01AC4:  MOVLW  01
01AC6:  MOVLB  8
01AC8:  MOVWF  x4B
01ACA:  MOVLW  0F
01ACC:  MOVWF  x4D
01ACE:  MOVLW  89
01AD0:  MOVWF  x4C
01AD2:  MOVLB  0
01AD4:  CALL   16B4
01AD8:  MOVFF  497,84A
01ADC:  MOVLB  8
01ADE:  CLRF   x4B
01AE0:  MOVLW  0F
01AE2:  MOVWF  x4D
01AE4:  MOVLW  92
01AE6:  MOVWF  x4C
01AE8:  MOVLB  0
01AEA:  CALL   16B4
....................    }
01AEE:  GOTO   1C08
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
01AF2:  MOVLB  4
01AF4:  DECFSZ x96,W
01AF6:  BRA    1AFC
01AF8:  BRA    1B02
01AFA:  MOVLB  0
01AFC:  MOVLB  0
01AFE:  GOTO   1C08
01B02:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
01B04:  MOVLW  13
01B06:  MOVLB  4
01B08:  MOVWF  xA7
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
01B0A:  MOVFF  49C,4AD
01B0E:  CLRF   xAE
01B10:  CLRF   xAF
01B12:  CLRF   xB0
01B14:  MOVF   xAD,W
01B16:  MOVWF  00
01B18:  CLRF   01
01B1A:  CLRF   02
01B1C:  CLRF   03
01B1E:  MOVFF  00,4A8
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
01B22:  MOVFF  49B,4AD
01B26:  MOVFF  49C,4AE
01B2A:  CLRF   xAF
01B2C:  CLRF   xB0
01B2E:  MOVF   xAD,W
01B30:  MOVWF  00
01B32:  CLRF   01
01B34:  CLRF   02
01B36:  CLRF   03
01B38:  MOVFF  00,4A9
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01B3C:  MOVFF  49A,4AD
01B40:  MOVFF  49B,4AE
01B44:  MOVFF  49C,4AF
01B48:  CLRF   xB0
01B4A:  MOVF   xAD,W
01B4C:  MOVWF  00
01B4E:  CLRF   01
01B50:  CLRF   02
01B52:  CLRF   03
01B54:  MOVFF  00,4AA
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01B58:  MOVF   x99,W
01B5A:  MOVWF  00
01B5C:  CLRF   01
01B5E:  CLRF   02
01B60:  CLRF   03
01B62:  MOVFF  00,4AB
....................    
....................       output_low(flash_stream.cs_pin);
01B66:  MOVFF  497,84A
01B6A:  MOVLB  8
01B6C:  CLRF   x4B
01B6E:  MOVLW  0F
01B70:  MOVWF  x4D
01B72:  MOVLW  89
01B74:  MOVWF  x4C
01B76:  MOVLB  0
01B78:  CALL   16B4
01B7C:  MOVFF  497,84A
01B80:  MOVLB  8
01B82:  CLRF   x4B
01B84:  MOVLW  0F
01B86:  MOVWF  x4D
01B88:  MOVLW  92
01B8A:  MOVWF  x4C
01B8C:  MOVLB  0
01B8E:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
01B92:  MOVFF  498,84D
01B96:  MOVFF  497,84C
01B9A:  MOVFF  496,84B
01B9E:  MOVFF  495,84A
01BA2:  MOVLW  04
01BA4:  MOVLB  8
01BA6:  MOVWF  x4F
01BA8:  MOVLW  A7
01BAA:  MOVWF  x4E
01BAC:  CLRF   x51
01BAE:  MOVLW  05
01BB0:  MOVWF  x50
01BB2:  MOVFF  49E,853
01BB6:  MOVFF  49D,852
01BBA:  MOVFF  4A2,857
01BBE:  MOVFF  4A1,856
01BC2:  MOVFF  4A0,855
01BC6:  MOVFF  49F,854
01BCA:  MOVLB  0
01BCC:  CALL   171C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
01BD0:  MOVLW  02
01BD2:  MOVWF  00
01BD4:  DECFSZ 00,F
01BD6:  BRA    1BD4
01BD8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
01BDA:  MOVFF  497,84A
01BDE:  MOVLW  01
01BE0:  MOVLB  8
01BE2:  MOVWF  x4B
01BE4:  MOVLW  0F
01BE6:  MOVWF  x4D
01BE8:  MOVLW  89
01BEA:  MOVWF  x4C
01BEC:  MOVLB  0
01BEE:  CALL   16B4
01BF2:  MOVFF  497,84A
01BF6:  MOVLB  8
01BF8:  CLRF   x4B
01BFA:  MOVLW  0F
01BFC:  MOVWF  x4D
01BFE:  MOVLW  92
01C00:  MOVWF  x4C
01C02:  MOVLB  0
01C04:  CALL   16B4
....................    }
....................    return;
01C08:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
071D6:  MOVLB  4
071D8:  MOVF   x1F,F
071DA:  BTFSC  FD8.2
071DC:  BRA    71E4
071DE:  MOVLB  0
071E0:  GOTO   734A
071E4:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
071E6:  MOVLW  06
071E8:  MOVLB  4
071EA:  MOVWF  x27
071EC:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
071EE:  MOVLW  02
071F0:  MOVLB  4
071F2:  MOVWF  x28
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
071F4:  MOVFF  424,436
071F8:  MOVFF  425,437
071FC:  CLRF   x38
071FE:  CLRF   x39
07200:  MOVF   x36,W
07202:  MOVWF  00
07204:  CLRF   01
07206:  CLRF   02
07208:  CLRF   03
0720A:  MOVFF  00,429
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0720E:  MOVFF  423,436
07212:  MOVFF  424,437
07216:  MOVFF  425,438
0721A:  CLRF   x39
0721C:  MOVF   x36,W
0721E:  MOVWF  00
07220:  CLRF   01
07222:  CLRF   02
07224:  CLRF   03
07226:  MOVFF  00,42A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
0722A:  MOVF   x22,W
0722C:  MOVWF  00
0722E:  CLRF   01
07230:  CLRF   02
07232:  CLRF   03
07234:  MOVFF  00,42B
....................       flash_cmd[4] = write_data;
07238:  MOVFF  426,42C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0723C:  MOVFF  420,84A
07240:  MOVLB  8
07242:  CLRF   x4B
07244:  MOVLW  0F
07246:  MOVWF  x4D
07248:  MOVLW  89
0724A:  MOVWF  x4C
0724C:  MOVLB  0
0724E:  CALL   16B4
07252:  MOVFF  420,84A
07256:  MOVLB  8
07258:  CLRF   x4B
0725A:  MOVLW  0F
0725C:  MOVWF  x4D
0725E:  MOVLW  92
07260:  MOVWF  x4C
07262:  MOVLB  0
07264:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
07268:  MOVFF  421,847
0726C:  MOVFF  420,846
07270:  MOVFF  41F,845
07274:  MOVFF  41E,844
07278:  MOVLW  04
0727A:  MOVLB  8
0727C:  MOVWF  x49
0727E:  MOVLW  27
07280:  MOVWF  x48
07282:  CLRF   x4B
07284:  MOVLW  01
07286:  MOVWF  x4A
07288:  MOVLB  0
0728A:  CALL   2724
....................       output_high(flash_stream.cs_pin);
0728E:  MOVFF  420,84A
07292:  MOVLW  01
07294:  MOVLB  8
07296:  MOVWF  x4B
07298:  MOVLW  0F
0729A:  MOVWF  x4D
0729C:  MOVLW  89
0729E:  MOVWF  x4C
072A0:  MOVLB  0
072A2:  CALL   16B4
072A6:  MOVFF  420,84A
072AA:  MOVLB  8
072AC:  CLRF   x4B
072AE:  MOVLW  0F
072B0:  MOVWF  x4D
072B2:  MOVLW  92
072B4:  MOVWF  x4C
072B6:  MOVLB  0
072B8:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
072BC:  MOVFF  420,84A
072C0:  MOVLB  8
072C2:  CLRF   x4B
072C4:  MOVLW  0F
072C6:  MOVWF  x4D
072C8:  MOVLW  89
072CA:  MOVWF  x4C
072CC:  MOVLB  0
072CE:  CALL   16B4
072D2:  MOVFF  420,84A
072D6:  MOVLB  8
072D8:  CLRF   x4B
072DA:  MOVLW  0F
072DC:  MOVWF  x4D
072DE:  MOVLW  92
072E0:  MOVWF  x4C
072E2:  MOVLB  0
072E4:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
072E8:  MOVFF  421,847
072EC:  MOVFF  420,846
072F0:  MOVFF  41F,845
072F4:  MOVFF  41E,844
072F8:  MOVLW  04
072FA:  MOVLB  8
072FC:  MOVWF  x49
072FE:  MOVLW  28
07300:  MOVWF  x48
07302:  CLRF   x4B
07304:  MOVLW  05
07306:  MOVWF  x4A
07308:  MOVLB  0
0730A:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0730E:  MOVLW  02
07310:  MOVWF  00
07312:  DECFSZ 00,F
07314:  BRA    7312
07316:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07318:  MOVFF  420,84A
0731C:  MOVLW  01
0731E:  MOVLB  8
07320:  MOVWF  x4B
07322:  MOVLW  0F
07324:  MOVWF  x4D
07326:  MOVLW  89
07328:  MOVWF  x4C
0732A:  MOVLB  0
0732C:  CALL   16B4
07330:  MOVFF  420,84A
07334:  MOVLB  8
07336:  CLRF   x4B
07338:  MOVLW  0F
0733A:  MOVWF  x4D
0733C:  MOVLW  92
0733E:  MOVWF  x4C
07340:  MOVLB  0
07342:  CALL   16B4
....................    }
07346:  GOTO   74D4
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0734A:  MOVLB  4
0734C:  DECFSZ x1F,W
0734E:  BRA    7354
07350:  BRA    735A
07352:  MOVLB  0
07354:  MOVLB  0
07356:  GOTO   74D4
0735A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
0735C:  MOVLW  06
0735E:  MOVLB  4
07360:  MOVWF  x2D
07362:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
07364:  MOVLW  12
07366:  MOVLB  4
07368:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
0736A:  MOVFF  425,436
0736E:  CLRF   x37
07370:  CLRF   x38
07372:  CLRF   x39
07374:  MOVF   x36,W
07376:  MOVWF  00
07378:  CLRF   01
0737A:  CLRF   02
0737C:  CLRF   03
0737E:  MOVFF  00,42F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07382:  MOVFF  424,436
07386:  MOVFF  425,437
0738A:  CLRF   x38
0738C:  CLRF   x39
0738E:  MOVF   x36,W
07390:  MOVWF  00
07392:  CLRF   01
07394:  CLRF   02
07396:  CLRF   03
07398:  MOVFF  00,430
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0739C:  MOVFF  423,436
073A0:  MOVFF  424,437
073A4:  MOVFF  425,438
073A8:  CLRF   x39
073AA:  MOVF   x36,W
073AC:  MOVWF  00
073AE:  CLRF   01
073B0:  CLRF   02
073B2:  CLRF   03
073B4:  MOVFF  00,431
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
073B8:  MOVF   x22,W
073BA:  MOVWF  00
073BC:  CLRF   01
073BE:  CLRF   02
073C0:  CLRF   03
073C2:  MOVFF  00,432
....................       flash_cmd[5] = write_data;
073C6:  MOVFF  426,433
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
073CA:  MOVFF  420,84A
073CE:  MOVLB  8
073D0:  CLRF   x4B
073D2:  MOVLW  0F
073D4:  MOVWF  x4D
073D6:  MOVLW  89
073D8:  MOVWF  x4C
073DA:  MOVLB  0
073DC:  CALL   16B4
073E0:  MOVFF  420,84A
073E4:  MOVLB  8
073E6:  CLRF   x4B
073E8:  MOVLW  0F
073EA:  MOVWF  x4D
073EC:  MOVLW  92
073EE:  MOVWF  x4C
073F0:  MOVLB  0
073F2:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
073F6:  MOVFF  421,847
073FA:  MOVFF  420,846
073FE:  MOVFF  41F,845
07402:  MOVFF  41E,844
07406:  MOVLW  04
07408:  MOVLB  8
0740A:  MOVWF  x49
0740C:  MOVLW  2D
0740E:  MOVWF  x48
07410:  CLRF   x4B
07412:  MOVLW  01
07414:  MOVWF  x4A
07416:  MOVLB  0
07418:  CALL   2724
....................       output_high(flash_stream.cs_pin);
0741C:  MOVFF  420,84A
07420:  MOVLW  01
07422:  MOVLB  8
07424:  MOVWF  x4B
07426:  MOVLW  0F
07428:  MOVWF  x4D
0742A:  MOVLW  89
0742C:  MOVWF  x4C
0742E:  MOVLB  0
07430:  CALL   16B4
07434:  MOVFF  420,84A
07438:  MOVLB  8
0743A:  CLRF   x4B
0743C:  MOVLW  0F
0743E:  MOVWF  x4D
07440:  MOVLW  92
07442:  MOVWF  x4C
07444:  MOVLB  0
07446:  CALL   16B4
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
0744A:  MOVFF  420,84A
0744E:  MOVLB  8
07450:  CLRF   x4B
07452:  MOVLW  0F
07454:  MOVWF  x4D
07456:  MOVLW  89
07458:  MOVWF  x4C
0745A:  MOVLB  0
0745C:  CALL   16B4
07460:  MOVFF  420,84A
07464:  MOVLB  8
07466:  CLRF   x4B
07468:  MOVLW  0F
0746A:  MOVWF  x4D
0746C:  MOVLW  92
0746E:  MOVWF  x4C
07470:  MOVLB  0
07472:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
07476:  MOVFF  421,847
0747A:  MOVFF  420,846
0747E:  MOVFF  41F,845
07482:  MOVFF  41E,844
07486:  MOVLW  04
07488:  MOVLB  8
0748A:  MOVWF  x49
0748C:  MOVLW  2E
0748E:  MOVWF  x48
07490:  CLRF   x4B
07492:  MOVLW  06
07494:  MOVWF  x4A
07496:  MOVLB  0
07498:  CALL   2724
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0749C:  MOVLW  02
0749E:  MOVWF  00
074A0:  DECFSZ 00,F
074A2:  BRA    74A0
074A4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
074A6:  MOVFF  420,84A
074AA:  MOVLW  01
074AC:  MOVLB  8
074AE:  MOVWF  x4B
074B0:  MOVLW  0F
074B2:  MOVWF  x4D
074B4:  MOVLW  89
074B6:  MOVWF  x4C
074B8:  MOVLB  0
074BA:  CALL   16B4
074BE:  MOVFF  420,84A
074C2:  MOVLB  8
074C4:  CLRF   x4B
074C6:  MOVLW  0F
074C8:  MOVWF  x4D
074CA:  MOVLW  92
074CC:  MOVWF  x4C
074CE:  MOVLB  0
074D0:  CALL   16B4
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
074D4:  MOVLB  4
074D6:  CLRF   x34
074D8:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
074DA:  MOVFF  421,847
074DE:  MOVFF  420,846
074E2:  MOVFF  41F,845
074E6:  MOVFF  41E,844
074EA:  CALL   2960
074EE:  MOVF   01,W
074F0:  ANDLW  01
074F2:  SUBLW  01
074F4:  BTFSS  FD8.2
074F6:  GOTO   7548
....................       if(timeout_counter > 10)
074FA:  MOVLB  4
074FC:  MOVF   x34,W
074FE:  SUBLW  0A
07500:  BTFSS  FD8.0
07502:  BRA    750A
07504:  MOVLB  0
07506:  GOTO   751C
0750A:  MOVLB  0
....................          delay_ms(200);
0750C:  MOVLW  C8
0750E:  MOVLB  8
07510:  MOVWF  x44
07512:  MOVLB  0
07514:  CALL   1554
07518:  GOTO   7528
....................       else
....................          delay_ms(10);   
0751C:  MOVLW  0A
0751E:  MOVLB  8
07520:  MOVWF  x44
07522:  MOVLB  0
07524:  CALL   1554
....................       
....................       if(timeout_counter > 100){
07528:  MOVLB  4
0752A:  MOVF   x34,W
0752C:  SUBLW  64
0752E:  BTFSS  FD8.0
07530:  BRA    7538
07532:  MOVLB  0
07534:  GOTO   753E
07538:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0753A:  GOTO   7548
....................       }  
....................       timeout_counter++;
0753E:  MOVLB  4
07540:  INCF   x34,F
07542:  MOVLB  0
07544:  GOTO   74DA
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
07548:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02A00:  MOVLB  8
02A02:  MOVF   x2D,F
02A04:  BTFSC  FD8.2
02A06:  BRA    2A0E
02A08:  MOVLB  0
02A0A:  GOTO   2B7C
02A0E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02A10:  MOVLW  06
02A12:  MOVLB  8
02A14:  MOVWF  x38
02A16:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
02A18:  MOVLW  02
02A1A:  MOVLB  8
02A1C:  MOVWF  x39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02A1E:  MOVFF  832,845
02A22:  MOVFF  833,846
02A26:  CLRF   x47
02A28:  CLRF   x48
02A2A:  MOVF   x45,W
02A2C:  MOVWF  00
02A2E:  CLRF   01
02A30:  CLRF   02
02A32:  CLRF   03
02A34:  MOVFF  00,83A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02A38:  MOVFF  831,845
02A3C:  MOVFF  832,846
02A40:  MOVFF  833,847
02A44:  CLRF   x48
02A46:  MOVF   x45,W
02A48:  MOVWF  00
02A4A:  CLRF   01
02A4C:  CLRF   02
02A4E:  CLRF   03
02A50:  MOVFF  00,83B
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02A54:  MOVF   x30,W
02A56:  MOVWF  00
02A58:  CLRF   01
02A5A:  CLRF   02
02A5C:  CLRF   03
02A5E:  MOVFF  00,83C
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02A62:  MOVFF  82E,84A
02A66:  CLRF   x4B
02A68:  MOVLW  0F
02A6A:  MOVWF  x4D
02A6C:  MOVLW  89
02A6E:  MOVWF  x4C
02A70:  MOVLB  0
02A72:  CALL   16B4
02A76:  MOVFF  82E,84A
02A7A:  MOVLB  8
02A7C:  CLRF   x4B
02A7E:  MOVLW  0F
02A80:  MOVWF  x4D
02A82:  MOVLW  92
02A84:  MOVWF  x4C
02A86:  MOVLB  0
02A88:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02A8C:  MOVFF  82F,847
02A90:  MOVFF  82E,846
02A94:  MOVFF  82D,845
02A98:  MOVFF  82C,844
02A9C:  MOVLW  08
02A9E:  MOVLB  8
02AA0:  MOVWF  x49
02AA2:  MOVLW  38
02AA4:  MOVWF  x48
02AA6:  CLRF   x4B
02AA8:  MOVLW  01
02AAA:  MOVWF  x4A
02AAC:  MOVLB  0
02AAE:  CALL   2724
....................       output_high(flash_stream.cs_pin);
02AB2:  MOVFF  82E,84A
02AB6:  MOVLW  01
02AB8:  MOVLB  8
02ABA:  MOVWF  x4B
02ABC:  MOVLW  0F
02ABE:  MOVWF  x4D
02AC0:  MOVLW  89
02AC2:  MOVWF  x4C
02AC4:  MOVLB  0
02AC6:  CALL   16B4
02ACA:  MOVFF  82E,84A
02ACE:  MOVLB  8
02AD0:  CLRF   x4B
02AD2:  MOVLW  0F
02AD4:  MOVWF  x4D
02AD6:  MOVLW  92
02AD8:  MOVWF  x4C
02ADA:  MOVLB  0
02ADC:  CALL   16B4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02AE0:  MOVFF  82E,84A
02AE4:  MOVLB  8
02AE6:  CLRF   x4B
02AE8:  MOVLW  0F
02AEA:  MOVWF  x4D
02AEC:  MOVLW  89
02AEE:  MOVWF  x4C
02AF0:  MOVLB  0
02AF2:  CALL   16B4
02AF6:  MOVFF  82E,84A
02AFA:  MOVLB  8
02AFC:  CLRF   x4B
02AFE:  MOVLW  0F
02B00:  MOVWF  x4D
02B02:  MOVLW  92
02B04:  MOVWF  x4C
02B06:  MOVLB  0
02B08:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
02B0C:  MOVFF  82F,847
02B10:  MOVFF  82E,846
02B14:  MOVFF  82D,845
02B18:  MOVFF  82C,844
02B1C:  MOVLW  08
02B1E:  MOVLB  8
02B20:  MOVWF  x49
02B22:  MOVLW  39
02B24:  MOVWF  x48
02B26:  MOVLW  04
02B28:  MOVWF  x4A
02B2A:  MOVFF  835,84C
02B2E:  MOVFF  834,84B
02B32:  MOVFF  837,84E
02B36:  MOVFF  836,84D
02B3A:  MOVLB  0
02B3C:  CALL   2804
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02B40:  MOVLW  02
02B42:  MOVWF  00
02B44:  DECFSZ 00,F
02B46:  BRA    2B44
02B48:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02B4A:  MOVFF  82E,84A
02B4E:  MOVLW  01
02B50:  MOVLB  8
02B52:  MOVWF  x4B
02B54:  MOVLW  0F
02B56:  MOVWF  x4D
02B58:  MOVLW  89
02B5A:  MOVWF  x4C
02B5C:  MOVLB  0
02B5E:  CALL   16B4
02B62:  MOVFF  82E,84A
02B66:  MOVLB  8
02B68:  CLRF   x4B
02B6A:  MOVLW  0F
02B6C:  MOVWF  x4D
02B6E:  MOVLW  92
02B70:  MOVWF  x4C
02B72:  MOVLB  0
02B74:  CALL   16B4
....................    }
02B78:  GOTO   2D0E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02B7C:  MOVLB  8
02B7E:  DECFSZ x2D,W
02B80:  BRA    2B86
02B82:  BRA    2B8C
02B84:  MOVLB  0
02B86:  MOVLB  0
02B88:  GOTO   2D0E
02B8C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
02B8E:  MOVLW  06
02B90:  MOVLB  8
02B92:  MOVWF  x3D
02B94:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
02B96:  MOVLW  12
02B98:  MOVLB  8
02B9A:  MOVWF  x3E
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02B9C:  MOVFF  833,845
02BA0:  CLRF   x46
02BA2:  CLRF   x47
02BA4:  CLRF   x48
02BA6:  MOVF   x45,W
02BA8:  MOVWF  00
02BAA:  CLRF   01
02BAC:  CLRF   02
02BAE:  CLRF   03
02BB0:  MOVFF  00,83F
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02BB4:  MOVFF  832,845
02BB8:  MOVFF  833,846
02BBC:  CLRF   x47
02BBE:  CLRF   x48
02BC0:  MOVF   x45,W
02BC2:  MOVWF  00
02BC4:  CLRF   01
02BC6:  CLRF   02
02BC8:  CLRF   03
02BCA:  MOVFF  00,840
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02BCE:  MOVFF  831,845
02BD2:  MOVFF  832,846
02BD6:  MOVFF  833,847
02BDA:  CLRF   x48
02BDC:  MOVF   x45,W
02BDE:  MOVWF  00
02BE0:  CLRF   01
02BE2:  CLRF   02
02BE4:  CLRF   03
02BE6:  MOVFF  00,841
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02BEA:  MOVF   x30,W
02BEC:  MOVWF  00
02BEE:  CLRF   01
02BF0:  CLRF   02
02BF2:  CLRF   03
02BF4:  MOVFF  00,842
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02BF8:  MOVFF  82E,84A
02BFC:  CLRF   x4B
02BFE:  MOVLW  0F
02C00:  MOVWF  x4D
02C02:  MOVLW  89
02C04:  MOVWF  x4C
02C06:  MOVLB  0
02C08:  CALL   16B4
02C0C:  MOVFF  82E,84A
02C10:  MOVLB  8
02C12:  CLRF   x4B
02C14:  MOVLW  0F
02C16:  MOVWF  x4D
02C18:  MOVLW  92
02C1A:  MOVWF  x4C
02C1C:  MOVLB  0
02C1E:  CALL   16B4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02C22:  MOVFF  82F,847
02C26:  MOVFF  82E,846
02C2A:  MOVFF  82D,845
02C2E:  MOVFF  82C,844
02C32:  MOVLW  08
02C34:  MOVLB  8
02C36:  MOVWF  x49
02C38:  MOVLW  3D
02C3A:  MOVWF  x48
02C3C:  CLRF   x4B
02C3E:  MOVLW  01
02C40:  MOVWF  x4A
02C42:  MOVLB  0
02C44:  CALL   2724
....................       output_high(flash_stream.cs_pin);
02C48:  MOVFF  82E,84A
02C4C:  MOVLW  01
02C4E:  MOVLB  8
02C50:  MOVWF  x4B
02C52:  MOVLW  0F
02C54:  MOVWF  x4D
02C56:  MOVLW  89
02C58:  MOVWF  x4C
02C5A:  MOVLB  0
02C5C:  CALL   16B4
02C60:  MOVFF  82E,84A
02C64:  MOVLB  8
02C66:  CLRF   x4B
02C68:  MOVLW  0F
02C6A:  MOVWF  x4D
02C6C:  MOVLW  92
02C6E:  MOVWF  x4C
02C70:  MOVLB  0
02C72:  CALL   16B4
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
02C76:  MOVFF  82E,84A
02C7A:  MOVLB  8
02C7C:  CLRF   x4B
02C7E:  MOVLW  0F
02C80:  MOVWF  x4D
02C82:  MOVLW  89
02C84:  MOVWF  x4C
02C86:  MOVLB  0
02C88:  CALL   16B4
02C8C:  MOVFF  82E,84A
02C90:  MOVLB  8
02C92:  CLRF   x4B
02C94:  MOVLW  0F
02C96:  MOVWF  x4D
02C98:  MOVLW  92
02C9A:  MOVWF  x4C
02C9C:  MOVLB  0
02C9E:  CALL   16B4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
02CA2:  MOVFF  82F,847
02CA6:  MOVFF  82E,846
02CAA:  MOVFF  82D,845
02CAE:  MOVFF  82C,844
02CB2:  MOVLW  08
02CB4:  MOVLB  8
02CB6:  MOVWF  x49
02CB8:  MOVLW  3E
02CBA:  MOVWF  x48
02CBC:  MOVLW  05
02CBE:  MOVWF  x4A
02CC0:  MOVFF  835,84C
02CC4:  MOVFF  834,84B
02CC8:  MOVFF  837,84E
02CCC:  MOVFF  836,84D
02CD0:  MOVLB  0
02CD2:  CALL   2804
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02CD6:  MOVLW  02
02CD8:  MOVWF  00
02CDA:  DECFSZ 00,F
02CDC:  BRA    2CDA
02CDE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02CE0:  MOVFF  82E,84A
02CE4:  MOVLW  01
02CE6:  MOVLB  8
02CE8:  MOVWF  x4B
02CEA:  MOVLW  0F
02CEC:  MOVWF  x4D
02CEE:  MOVLW  89
02CF0:  MOVWF  x4C
02CF2:  MOVLB  0
02CF4:  CALL   16B4
02CF8:  MOVFF  82E,84A
02CFC:  MOVLB  8
02CFE:  CLRF   x4B
02D00:  MOVLW  0F
02D02:  MOVWF  x4D
02D04:  MOVLW  92
02D06:  MOVWF  x4C
02D08:  MOVLB  0
02D0A:  CALL   16B4
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
02D0E:  MOVLB  8
02D10:  CLRF   x43
02D12:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
02D14:  MOVFF  82F,847
02D18:  MOVFF  82E,846
02D1C:  MOVFF  82D,845
02D20:  MOVFF  82C,844
02D24:  CALL   2960
02D28:  MOVF   01,W
02D2A:  ANDLW  01
02D2C:  SUBLW  01
02D2E:  BTFSS  FD8.2
02D30:  GOTO   2D82
....................       if(timeout_counter > 10)
02D34:  MOVLB  8
02D36:  MOVF   x43,W
02D38:  SUBLW  0A
02D3A:  BTFSS  FD8.0
02D3C:  BRA    2D44
02D3E:  MOVLB  0
02D40:  GOTO   2D56
02D44:  MOVLB  0
....................          delay_ms(200);
02D46:  MOVLW  C8
02D48:  MOVLB  8
02D4A:  MOVWF  x44
02D4C:  MOVLB  0
02D4E:  CALL   1554
02D52:  GOTO   2D62
....................       else
....................          delay_ms(10);   
02D56:  MOVLW  0A
02D58:  MOVLB  8
02D5A:  MOVWF  x44
02D5C:  MOVLB  0
02D5E:  CALL   1554
....................       
....................       if(timeout_counter > 100){
02D62:  MOVLB  8
02D64:  MOVF   x43,W
02D66:  SUBLW  64
02D68:  BTFSS  FD8.0
02D6A:  BRA    2D72
02D6C:  MOVLB  0
02D6E:  GOTO   2D78
02D72:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
02D74:  GOTO   2D82
....................       }  
....................       timeout_counter++;
02D78:  MOVLB  8
02D7A:  INCF   x43,F
02D7C:  MOVLB  0
02D7E:  GOTO   2D14
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
02D82:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
01934:  MOVLW  9F
01936:  MOVLB  8
01938:  MOVWF  x34
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0193A:  MOVFF  82E,84A
0193E:  CLRF   x4B
01940:  MOVLW  0F
01942:  MOVWF  x4D
01944:  MOVLW  89
01946:  MOVWF  x4C
01948:  MOVLB  0
0194A:  CALL   16B4
0194E:  MOVFF  82E,84A
01952:  MOVLB  8
01954:  CLRF   x4B
01956:  MOVLW  0F
01958:  MOVWF  x4D
0195A:  MOVLW  92
0195C:  MOVWF  x4C
0195E:  MOVLB  0
01960:  CALL   16B4
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
01964:  MOVFF  82F,84D
01968:  MOVFF  82E,84C
0196C:  MOVFF  82D,84B
01970:  MOVFF  82C,84A
01974:  MOVLW  08
01976:  MOVLB  8
01978:  MOVWF  x4F
0197A:  MOVLW  34
0197C:  MOVWF  x4E
0197E:  CLRF   x51
01980:  MOVLW  01
01982:  MOVWF  x50
01984:  MOVLW  08
01986:  MOVWF  x53
01988:  MOVLW  30
0198A:  MOVWF  x52
0198C:  CLRF   x57
0198E:  CLRF   x56
01990:  CLRF   x55
01992:  MOVLW  04
01994:  MOVWF  x54
01996:  MOVLB  0
01998:  CALL   171C
....................    output_high(flash_stream.cs_pin);
0199C:  MOVFF  82E,84A
019A0:  MOVLW  01
019A2:  MOVLB  8
019A4:  MOVWF  x4B
019A6:  MOVLW  0F
019A8:  MOVWF  x4D
019AA:  MOVLW  89
019AC:  MOVWF  x4C
019AE:  MOVLB  0
019B0:  CALL   16B4
019B4:  MOVFF  82E,84A
019B8:  MOVLB  8
019BA:  CLRF   x4B
019BC:  MOVLW  0F
019BE:  MOVWF  x4D
019C0:  MOVLW  92
019C2:  MOVWF  x4C
019C4:  MOVLB  0
019C6:  CALL   16B4
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
019CA:  MOVLB  8
019CC:  MOVF   x30,W
019CE:  SUBLW  20
019D0:  BTFSC  FD8.2
019D2:  BRA    19DA
019D4:  MOVLB  0
019D6:  GOTO   19E8
019DA:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
019DC:  MOVLW  01
019DE:  MOVWF  01
019E0:  GOTO   19F0
....................    }
019E4:  GOTO   19F0
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
019E8:  MOVLW  00
019EA:  MOVWF  01
019EC:  GOTO   19F0
....................    }
019F0:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000EA:  MOVLW  80
000EC:  MOVWF  FCF
000EE:  MOVLW  12
000F0:  MOVWF  FCE
000F2:  NOP   
....................    sec++;
000F4:  MOVLW  01
000F6:  ADDWF  25,F
000F8:  BTFSC  FD8.0
000FA:  INCF   26,F
000FC:  BTFSC  FD8.2
000FE:  INCF   27,F
00100:  BTFSC  FD8.2
00102:  INCF   28,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
00104:  BCF    F9E.0
00106:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02712:  MOVFF  25,00
02716:  MOVFF  26,01
0271A:  MOVFF  27,02
0271E:  MOVFF  28,03
02722:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
036EE:  MOVLB  7
036F0:  MOVF   xEC,W
036F2:  MOVWF  FE9
036F4:  MOVF   xED,W
036F6:  MOVWF  FEA
036F8:  MOVFF  FEF,7EF
036FC:  MOVLW  01
036FE:  MOVWF  xF0
03700:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03702:  MOVLB  7
03704:  MOVF   xEE,W
03706:  SUBWF  xF0,W
03708:  BTFSS  FD8.0
0370A:  BRA    3712
0370C:  MOVLB  0
0370E:  GOTO   372E
03712:  MOVLB  0
....................       crc ^= frame[i++];
03714:  MOVLB  7
03716:  MOVF   xF0,W
03718:  INCF   xF0,F
0371A:  ADDWF  xEC,W
0371C:  MOVWF  FE9
0371E:  MOVLW  00
03720:  ADDWFC xED,W
03722:  MOVWF  FEA
03724:  MOVF   FEF,W
03726:  XORWF  xEF,F
03728:  MOVLB  0
0372A:  GOTO   3702
....................    return crc;
0372E:  MOVLB  7
03730:  MOVF   xEF,W
03732:  MOVWF  01
03734:  MOVLB  0
03736:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #include "../lib/tool/smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
076C8:  MOVLW  4E
076CA:  MOVWF  FF6
076CC:  MOVLW  03
076CE:  MOVWF  FF7
076D0:  MOVLW  00
076D2:  MOVWF  FF8
076D4:  CALL   15D4
....................     fprintf(PC, "___Start smf_write__\r\n");
076D8:  MOVLW  68
076DA:  MOVWF  FF6
076DC:  MOVLW  03
076DE:  MOVWF  FF7
076E0:  MOVLW  00
076E2:  MOVWF  FF8
076E4:  CALL   15D4
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
076E8:  MOVLB  3
076EA:  CLRF   xC6
076EC:  MOVLB  0
076EE:  CALL   6BCA
076F2:  MOVF   01,F
076F4:  BTFSS  FD8.2
076F6:  GOTO   83D0
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
076FA:  MOVLW  80
076FC:  MOVWF  FF6
076FE:  MOVLW  03
07700:  MOVWF  FF7
07702:  MOVLW  00
07704:  MOVWF  FF8
07706:  MOVLW  07
07708:  MOVLB  7
0770A:  MOVWF  xEC
0770C:  MOVLB  0
0770E:  CALL   1604
07712:  MOVFF  3C6,419
07716:  MOVLW  18
07718:  MOVLB  4
0771A:  MOVWF  x1A
0771C:  MOVLB  0
0771E:  CALL   6CB8
07722:  MOVLW  89
07724:  MOVWF  FF6
07726:  MOVLW  03
07728:  MOVWF  FF7
0772A:  MOVLW  00
0772C:  MOVWF  FF8
0772E:  MOVLW  12
07730:  MOVLB  7
07732:  MOVWF  xEC
07734:  MOVLB  0
07736:  CALL   1604
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
0773A:  GOTO   6DC8
0773E:  MOVFF  02,3C8
07742:  MOVFF  01,3C7
07746:  MOVLB  3
07748:  MOVF   xC7,W
0774A:  MOVWF  01
0774C:  MOVF   xC8,W
0774E:  MOVWF  03
07750:  MOVF   01,W
07752:  MOVWF  FE9
07754:  MOVFF  03,FEA
*
0775E:  MOVLB  4
07760:  MOVWF  x15
07762:  MOVFF  415,41C
07766:  MOVLB  0
07768:  GOTO   6E22
0776C:  MOVFF  02,03
07770:  MOVF   01,W
07772:  MOVWF  FE1
07774:  MOVFF  03,FE2
07778:  MOVLW  03
0777A:  MOVWF  FEA
0777C:  MOVLW  C9
0777E:  MOVWF  FE9
07780:  MOVLW  09
07782:  MOVWF  01
07784:  MOVFF  FE6,FEE
07788:  DECFSZ 01,F
0778A:  GOTO   7784
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0778E:  MOVLW  01
07790:  MOVLB  3
07792:  ADDWF  xC6,W
07794:  CLRF   03
07796:  ADDLW  1D
07798:  MOVWF  FE9
0779A:  MOVLW  00
0779C:  ADDWFC 03,W
0779E:  MOVWF  FEA
077A0:  MOVFF  3D1,FEF
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
077A4:  MOVFF  3CC,3D5
077A8:  MOVFF  3CB,3D4
077AC:  MOVFF  3CA,3D3
077B0:  MOVFF  3C9,3D2
077B4:  MOVFF  3D0,3D9
077B8:  MOVFF  3CF,3D8
077BC:  MOVFF  3CE,3D7
077C0:  MOVFF  3CD,3D6
077C4:  MOVLW  01
077C6:  ADDWF  xC7,W
077C8:  MOVWF  FE9
077CA:  MOVLW  00
077CC:  ADDWFC xC8,W
077CE:  MOVWF  FEA
077D0:  MOVFF  FEF,3DA
077D4:  MOVFF  FEC,3DB
077D8:  MOVFF  FEC,3DC
077DC:  MOVFF  FEC,3DD
077E0:  MOVF   FED,F
077E2:  MOVF   FED,F
077E4:  MOVF   FED,F
077E6:  MOVLW  05
077E8:  ADDWF  xC7,W
077EA:  MOVWF  FE9
077EC:  MOVLW  00
077EE:  ADDWFC xC8,W
077F0:  MOVWF  FEA
077F2:  MOVFF  FEF,3DE
077F6:  MOVFF  FEC,3DF
077FA:  MOVFF  FEC,3E0
077FE:  MOVFF  FEC,3E1
07802:  MOVF   FED,F
07804:  MOVF   FED,F
07806:  MOVF   FED,F
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
07808:  MOVLW  9C
0780A:  MOVWF  FF6
0780C:  MOVLW  03
0780E:  MOVWF  FF7
07810:  MOVLW  00
07812:  MOVWF  FF8
07814:  MOVLW  25
07816:  MOVLB  7
07818:  MOVWF  xEC
0781A:  MOVLB  0
0781C:  CALL   1604
07820:  MOVFF  3D5,4A4
07824:  MOVLW  37
07826:  MOVLB  4
07828:  MOVWF  xA5
0782A:  MOVLB  0
0782C:  CALL   1C0A
07830:  MOVFF  3D4,4A4
07834:  MOVLW  37
07836:  MOVLB  4
07838:  MOVWF  xA5
0783A:  MOVLB  0
0783C:  CALL   1C0A
07840:  MOVFF  3D3,4A4
07844:  MOVLW  37
07846:  MOVLB  4
07848:  MOVWF  xA5
0784A:  MOVLB  0
0784C:  CALL   1C0A
07850:  MOVFF  3D2,4A4
07854:  MOVLW  37
07856:  MOVLB  4
07858:  MOVWF  xA5
0785A:  MOVLB  0
0785C:  CALL   1C0A
07860:  MOVLW  0D
07862:  MOVLB  8
07864:  MOVWF  x2F
07866:  MOVLB  0
07868:  CALL   1582
0786C:  MOVLW  0A
0786E:  MOVLB  8
07870:  MOVWF  x2F
07872:  MOVLB  0
07874:  CALL   1582
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
07878:  MOVLW  CA
0787A:  MOVWF  FF6
0787C:  MOVLW  03
0787E:  MOVWF  FF7
07880:  MOVLW  00
07882:  MOVWF  FF8
07884:  MOVLW  25
07886:  MOVLB  7
07888:  MOVWF  xEC
0788A:  MOVLB  0
0788C:  CALL   1604
07890:  MOVFF  3D9,4A4
07894:  MOVLW  37
07896:  MOVLB  4
07898:  MOVWF  xA5
0789A:  MOVLB  0
0789C:  CALL   1C0A
078A0:  MOVFF  3D8,4A4
078A4:  MOVLW  37
078A6:  MOVLB  4
078A8:  MOVWF  xA5
078AA:  MOVLB  0
078AC:  CALL   1C0A
078B0:  MOVFF  3D7,4A4
078B4:  MOVLW  37
078B6:  MOVLB  4
078B8:  MOVWF  xA5
078BA:  MOVLB  0
078BC:  CALL   1C0A
078C0:  MOVFF  3D6,4A4
078C4:  MOVLW  37
078C6:  MOVLB  4
078C8:  MOVWF  xA5
078CA:  MOVLB  0
078CC:  CALL   1C0A
078D0:  MOVLW  0D
078D2:  MOVLB  8
078D4:  MOVWF  x2F
078D6:  MOVLB  0
078D8:  CALL   1582
078DC:  MOVLW  0A
078DE:  MOVLB  8
078E0:  MOVWF  x2F
078E2:  MOVLB  0
078E4:  CALL   1582
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
078E8:  MOVLW  F8
078EA:  MOVWF  FF6
078EC:  MOVLW  03
078EE:  MOVWF  FF7
078F0:  MOVLW  00
078F2:  MOVWF  FF8
078F4:  MOVLW  25
078F6:  MOVLB  7
078F8:  MOVWF  xEC
078FA:  MOVLB  0
078FC:  CALL   1604
07900:  MOVFF  3DD,4A4
07904:  MOVLW  37
07906:  MOVLB  4
07908:  MOVWF  xA5
0790A:  MOVLB  0
0790C:  CALL   1C0A
07910:  MOVFF  3DC,4A4
07914:  MOVLW  37
07916:  MOVLB  4
07918:  MOVWF  xA5
0791A:  MOVLB  0
0791C:  CALL   1C0A
07920:  MOVFF  3DB,4A4
07924:  MOVLW  37
07926:  MOVLB  4
07928:  MOVWF  xA5
0792A:  MOVLB  0
0792C:  CALL   1C0A
07930:  MOVFF  3DA,4A4
07934:  MOVLW  37
07936:  MOVLB  4
07938:  MOVWF  xA5
0793A:  MOVLB  0
0793C:  CALL   1C0A
07940:  MOVLW  0D
07942:  MOVLB  8
07944:  MOVWF  x2F
07946:  MOVLB  0
07948:  CALL   1582
0794C:  MOVLW  0A
0794E:  MOVLB  8
07950:  MOVWF  x2F
07952:  MOVLB  0
07954:  CALL   1582
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
07958:  MOVLW  26
0795A:  MOVWF  FF6
0795C:  MOVLW  04
0795E:  MOVWF  FF7
07960:  MOVLW  00
07962:  MOVWF  FF8
07964:  MOVLW  25
07966:  MOVLB  7
07968:  MOVWF  xEC
0796A:  MOVLB  0
0796C:  CALL   1604
07970:  MOVLW  41
07972:  MOVWF  FE9
07974:  MOVFF  3E1,418
07978:  MOVFF  3E0,417
0797C:  MOVFF  3DF,416
07980:  MOVFF  3DE,415
07984:  CALL   6EC0
07988:  MOVLW  4E
0798A:  MOVWF  FF6
0798C:  MOVLW  04
0798E:  MOVWF  FF7
07990:  MOVLW  00
07992:  MOVWF  FF8
07994:  MOVLW  04
07996:  MOVLB  7
07998:  MOVWF  xEC
0799A:  MOVLB  0
0799C:  CALL   1604
079A0:  MOVFF  3E1,4A4
079A4:  MOVLW  57
079A6:  MOVLB  4
079A8:  MOVWF  xA5
079AA:  MOVLB  0
079AC:  CALL   1C0A
079B0:  MOVFF  3E0,4A4
079B4:  MOVLW  57
079B6:  MOVLB  4
079B8:  MOVWF  xA5
079BA:  MOVLB  0
079BC:  CALL   1C0A
079C0:  MOVFF  3DF,4A4
079C4:  MOVLW  57
079C6:  MOVLB  4
079C8:  MOVWF  xA5
079CA:  MOVLB  0
079CC:  CALL   1C0A
079D0:  MOVFF  3DE,4A4
079D4:  MOVLW  57
079D6:  MOVLB  4
079D8:  MOVWF  xA5
079DA:  MOVLB  0
079DC:  CALL   1C0A
079E0:  MOVLW  55
079E2:  MOVWF  FF6
079E4:  MOVLW  04
079E6:  MOVWF  FF7
079E8:  MOVLW  00
079EA:  MOVWF  FF8
079EC:  MOVLW  05
079EE:  MOVLB  7
079F0:  MOVWF  xEC
079F2:  MOVLB  0
079F4:  CALL   1604
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
079F8:  MOVFF  E5,82F
079FC:  MOVFF  E4,82E
07A00:  MOVFF  E3,82D
07A04:  MOVFF  E2,82C
07A08:  CALL   1934
07A0C:  MOVF   01,F
07A0E:  BTFSS  FD8.2
07A10:  GOTO   7A28
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
07A14:  MOVLW  5C
07A16:  MOVWF  FF6
07A18:  MOVLW  04
07A1A:  MOVWF  FF7
07A1C:  MOVLW  00
07A1E:  MOVWF  FF8
07A20:  CALL   15D4
....................             return;
07A24:  GOTO   83F0
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
07A28:  MOVFF  E5,498
07A2C:  MOVFF  E4,497
07A30:  MOVFF  E3,496
07A34:  MOVFF  E2,495
07A38:  MOVFF  3D5,49C
07A3C:  MOVFF  3D4,49B
07A40:  MOVFF  3D3,49A
07A44:  MOVFF  3D2,499
07A48:  MOVLW  03
07A4A:  MOVLB  4
07A4C:  MOVWF  x9E
07A4E:  MOVLW  E2
07A50:  MOVWF  x9D
07A52:  CLRF   xA2
07A54:  CLRF   xA1
07A56:  CLRF   xA0
07A58:  MOVLW  04
07A5A:  MOVWF  x9F
07A5C:  MOVLB  0
07A5E:  CALL   19F2
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
07A62:  MOVLB  4
07A64:  CLRF   x18
07A66:  CLRF   x17
07A68:  CLRF   x16
07A6A:  MOVFF  3E5,415
07A6E:  MOVFF  415,418
07A72:  CLRF   x15
07A74:  CLRF   x16
07A76:  CLRF   x17
07A78:  CLRF   x1D
07A7A:  CLRF   x1C
07A7C:  CLRF   x1B
07A7E:  MOVFF  3E4,41A
07A82:  MOVFF  41B,03
07A86:  MOVFF  41A,02
07A8A:  CLRF   00
07A8C:  CLRF   01
07A8E:  MOVF   00,W
07A90:  IORWF  x15,F
07A92:  MOVF   01,W
07A94:  IORWF  x16,F
07A96:  MOVF   02,W
07A98:  IORWF  x17,F
07A9A:  MOVF   03,W
07A9C:  IORWF  x18,F
07A9E:  CLRF   x1D
07AA0:  CLRF   x1C
07AA2:  CLRF   x1B
07AA4:  MOVFF  3E3,41A
07AA8:  MOVFF  41C,03
07AAC:  MOVFF  41B,02
07AB0:  MOVFF  41A,01
07AB4:  CLRF   00
07AB6:  MOVF   00,W
07AB8:  IORWF  x15,F
07ABA:  MOVF   01,W
07ABC:  IORWF  x16,F
07ABE:  MOVF   02,W
07AC0:  IORWF  x17,F
07AC2:  MOVF   03,W
07AC4:  IORWF  x18,F
07AC6:  MOVFF  3E2,00
07ACA:  CLRF   01
07ACC:  CLRF   02
07ACE:  CLRF   03
07AD0:  MOVF   00,W
07AD2:  IORWF  x15,W
07AD4:  MOVLB  3
07AD6:  MOVWF  xE6
07AD8:  MOVF   01,W
07ADA:  MOVLB  4
07ADC:  IORWF  x16,W
07ADE:  MOVLB  3
07AE0:  MOVWF  xE7
07AE2:  MOVF   02,W
07AE4:  MOVLB  4
07AE6:  IORWF  x17,W
07AE8:  MOVLB  3
07AEA:  MOVWF  xE8
07AEC:  MOVF   03,W
07AEE:  MOVLB  4
07AF0:  IORWF  x18,W
07AF2:  MOVLB  3
07AF4:  MOVWF  xE9
07AF6:  MOVLW  04
07AF8:  ADDWF  xD2,W
07AFA:  MOVLB  4
07AFC:  MOVWF  x15
07AFE:  MOVLW  00
07B00:  MOVLB  3
07B02:  ADDWFC xD3,W
07B04:  MOVLB  4
07B06:  MOVWF  x16
07B08:  MOVLW  00
07B0A:  MOVLB  3
07B0C:  ADDWFC xD4,W
07B0E:  MOVLB  4
07B10:  MOVWF  x17
07B12:  MOVLW  00
07B14:  MOVLB  3
07B16:  ADDWFC xD5,W
07B18:  MOVLB  4
07B1A:  MOVWF  x18
07B1C:  MOVFF  E5,423
07B20:  MOVFF  E4,422
07B24:  MOVFF  E3,421
07B28:  MOVFF  E2,420
07B2C:  MOVFF  418,427
07B30:  MOVFF  417,426
07B34:  MOVFF  416,425
07B38:  MOVFF  415,424
07B3C:  MOVLB  0
07B3E:  GOTO   6FC0
07B42:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
07B46:  MOVLW  7A
07B48:  MOVWF  FF6
07B4A:  MOVLW  04
07B4C:  MOVWF  FF7
07B4E:  MOVLW  00
07B50:  MOVWF  FF8
07B52:  CALL   15D4
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
07B56:  MOVLW  8C
07B58:  MOVWF  FF6
07B5A:  MOVLW  04
07B5C:  MOVWF  FF7
07B5E:  MOVLW  00
07B60:  MOVWF  FF8
07B62:  MOVLW  0C
07B64:  MOVLB  7
07B66:  MOVWF  xEC
07B68:  MOVLB  0
07B6A:  CALL   1604
07B6E:  MOVLW  41
07B70:  MOVWF  FE9
07B72:  MOVFF  3E9,418
07B76:  MOVFF  3E8,417
07B7A:  MOVFF  3E7,416
07B7E:  MOVFF  3E6,415
07B82:  CALL   6EC0
07B86:  MOVLW  9B
07B88:  MOVWF  FF6
07B8A:  MOVLW  04
07B8C:  MOVWF  FF7
07B8E:  MOVLW  00
07B90:  MOVWF  FF8
07B92:  MOVLW  08
07B94:  MOVLB  7
07B96:  MOVWF  xEC
07B98:  MOVLB  0
07B9A:  CALL   1604
07B9E:  MOVFF  3D5,4A4
07BA2:  MOVLW  37
07BA4:  MOVLB  4
07BA6:  MOVWF  xA5
07BA8:  MOVLB  0
07BAA:  CALL   1C0A
07BAE:  MOVFF  3D4,4A4
07BB2:  MOVLW  37
07BB4:  MOVLB  4
07BB6:  MOVWF  xA5
07BB8:  MOVLB  0
07BBA:  CALL   1C0A
07BBE:  MOVFF  3D3,4A4
07BC2:  MOVLW  37
07BC4:  MOVLB  4
07BC6:  MOVWF  xA5
07BC8:  MOVLB  0
07BCA:  CALL   1C0A
07BCE:  MOVFF  3D2,4A4
07BD2:  MOVLW  37
07BD4:  MOVLB  4
07BD6:  MOVWF  xA5
07BD8:  MOVLB  0
07BDA:  CALL   1C0A
07BDE:  MOVLW  A8
07BE0:  MOVWF  FF6
07BE2:  MOVLW  04
07BE4:  MOVWF  FF7
07BE6:  MOVLW  00
07BE8:  MOVWF  FF8
07BEA:  MOVLW  03
07BEC:  MOVLB  7
07BEE:  MOVWF  xEC
07BF0:  MOVLB  0
07BF2:  CALL   1604
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
07BF6:  MOVLW  04
07BF8:  MOVLB  3
07BFA:  ADDWF  xD2,W
07BFC:  MOVLB  4
07BFE:  MOVWF  x15
07C00:  MOVLW  00
07C02:  MOVLB  3
07C04:  ADDWFC xD3,W
07C06:  MOVLB  4
07C08:  MOVWF  x16
07C0A:  MOVLW  00
07C0C:  MOVLB  3
07C0E:  ADDWFC xD4,W
07C10:  MOVLB  4
07C12:  MOVWF  x17
07C14:  MOVLW  00
07C16:  MOVLB  3
07C18:  ADDWFC xD5,W
07C1A:  MOVLB  4
07C1C:  MOVWF  x18
07C1E:  MOVLW  AC
07C20:  MOVWF  FF6
07C22:  MOVLW  04
07C24:  MOVWF  FF7
07C26:  MOVLW  00
07C28:  MOVWF  FF8
07C2A:  MOVLW  0C
07C2C:  MOVLB  7
07C2E:  MOVWF  xEC
07C30:  MOVLB  0
07C32:  CALL   1604
07C36:  MOVFF  3EA,419
07C3A:  MOVLW  18
07C3C:  MOVLB  4
07C3E:  MOVWF  x1A
07C40:  MOVLB  0
07C42:  CALL   6CB8
07C46:  MOVLW  BA
07C48:  MOVWF  FF6
07C4A:  MOVLW  04
07C4C:  MOVWF  FF7
07C4E:  MOVLW  00
07C50:  MOVWF  FF8
07C52:  MOVLW  09
07C54:  MOVLB  7
07C56:  MOVWF  xEC
07C58:  MOVLB  0
07C5A:  CALL   1604
07C5E:  MOVFF  418,4A4
07C62:  MOVLW  37
07C64:  MOVLB  4
07C66:  MOVWF  xA5
07C68:  MOVLB  0
07C6A:  CALL   1C0A
07C6E:  MOVFF  417,4A4
07C72:  MOVLW  37
07C74:  MOVLB  4
07C76:  MOVWF  xA5
07C78:  MOVLB  0
07C7A:  CALL   1C0A
07C7E:  MOVFF  416,4A4
07C82:  MOVLW  37
07C84:  MOVLB  4
07C86:  MOVWF  xA5
07C88:  MOVLB  0
07C8A:  CALL   1C0A
07C8E:  MOVFF  415,4A4
07C92:  MOVLW  37
07C94:  MOVLB  4
07C96:  MOVWF  xA5
07C98:  MOVLB  0
07C9A:  CALL   1C0A
07C9E:  MOVLW  C8
07CA0:  MOVWF  FF6
07CA2:  MOVLW  04
07CA4:  MOVWF  FF7
07CA6:  MOVLW  00
07CA8:  MOVWF  FF8
07CAA:  MOVLW  05
07CAC:  MOVLB  7
07CAE:  MOVWF  xEC
07CB0:  MOVLB  0
07CB2:  CALL   1604
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
07CB6:  MOVLB  3
07CB8:  MOVF   xD2,W
07CBA:  MOVWF  xEB
07CBC:  MOVLW  10
07CBE:  ADDWF  xD3,W
07CC0:  MOVWF  xEC
07CC2:  MOVLW  00
07CC4:  ADDWFC xD4,W
07CC6:  MOVWF  xED
07CC8:  MOVLW  00
07CCA:  ADDWFC xD5,W
07CCC:  MOVWF  xEE
07CCE:  MOVFF  3D9,3F2
07CD2:  MOVFF  3D8,3F1
07CD6:  MOVFF  3D7,3F0
07CDA:  MOVFF  3D6,3EF
07CDE:  MOVF   xEB,W
07CE0:  SUBWF  xEF,W
07CE2:  MOVWF  xF3
07CE4:  MOVF   xEC,W
07CE6:  SUBWFB xF0,W
07CE8:  MOVWF  xF4
07CEA:  MOVF   xED,W
07CEC:  SUBWFB xF1,W
07CEE:  MOVWF  xF5
07CF0:  MOVF   xEE,W
07CF2:  SUBWFB xF2,W
07CF4:  MOVWF  xF6
07CF6:  MOVF   xE6,W
07CF8:  ADDWF  xEB,W
07CFA:  MOVWF  xF7
07CFC:  MOVF   xE7,W
07CFE:  ADDWFC xEC,W
07D00:  MOVWF  xF8
07D02:  MOVF   xE8,W
07D04:  ADDWFC xED,W
07D06:  MOVWF  xF9
07D08:  MOVF   xE9,W
07D0A:  ADDWFC xEE,W
07D0C:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
07D0E:  MOVF   xDE,W
07D10:  ADDWF  xE6,W
07D12:  MOVLB  4
07D14:  MOVWF  x15
07D16:  MOVLB  3
07D18:  MOVF   xDF,W
07D1A:  ADDWFC xE7,W
07D1C:  MOVLB  4
07D1E:  MOVWF  x16
07D20:  MOVLB  3
07D22:  MOVF   xE0,W
07D24:  ADDWFC xE8,W
07D26:  MOVLB  4
07D28:  MOVWF  x17
07D2A:  MOVLB  3
07D2C:  MOVF   xE1,W
07D2E:  ADDWFC xE9,W
07D30:  MOVLB  4
07D32:  MOVWF  x18
07D34:  MOVLB  3
07D36:  MOVF   xF6,W
07D38:  MOVLB  4
07D3A:  SUBWF  x18,W
07D3C:  BTFSC  FD8.0
07D3E:  BRA    7D46
07D40:  MOVLB  0
07D42:  GOTO   7E66
07D46:  MOVLB  0
07D48:  BTFSS  FD8.2
07D4A:  GOTO   7D96
07D4E:  MOVLB  3
07D50:  MOVF   xF5,W
07D52:  MOVLB  4
07D54:  SUBWF  x17,W
07D56:  BTFSC  FD8.0
07D58:  BRA    7D60
07D5A:  MOVLB  0
07D5C:  GOTO   7E66
07D60:  MOVLB  0
07D62:  BTFSS  FD8.2
07D64:  GOTO   7D96
07D68:  MOVLB  3
07D6A:  MOVF   xF4,W
07D6C:  MOVLB  4
07D6E:  SUBWF  x16,W
07D70:  BTFSC  FD8.0
07D72:  BRA    7D7A
07D74:  MOVLB  0
07D76:  GOTO   7E66
07D7A:  MOVLB  0
07D7C:  BTFSS  FD8.2
07D7E:  GOTO   7D96
07D82:  MOVLB  4
07D84:  MOVF   x15,W
07D86:  MOVLB  3
07D88:  SUBWF  xF3,W
07D8A:  BTFSS  FD8.0
07D8C:  BRA    7D94
07D8E:  MOVLB  0
07D90:  GOTO   7E66
07D94:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
07D96:  MOVLW  CE
07D98:  MOVWF  FF6
07D9A:  MOVLW  04
07D9C:  MOVWF  FF7
07D9E:  MOVLW  00
07DA0:  MOVWF  FF8
07DA2:  CALL   15D4
....................             loop_count++;
07DA6:  MOVLB  3
07DA8:  INCF   xEA,F
....................             used_size = 0;
07DAA:  CLRF   xE9
07DAC:  CLRF   xE8
07DAE:  CLRF   xE7
07DB0:  CLRF   xE6
....................             data_write_addr = data_region_start;
07DB2:  MOVFF  3EE,3FA
07DB6:  MOVFF  3ED,3F9
07DBA:  MOVFF  3EC,3F8
07DBE:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
07DC2:  MOVFF  3EE,3FE
07DC6:  MOVFF  3ED,3FD
07DCA:  MOVFF  3EC,3FC
07DCE:  MOVFF  3EB,3FB
07DD2:  MOVLB  0
....................             while (erase_ptr < data_region_end)
07DD4:  MOVLB  3
07DD6:  MOVF   xFE,W
07DD8:  SUBWF  xF2,W
07DDA:  BTFSC  FD8.0
07DDC:  BRA    7DE4
07DDE:  MOVLB  0
07DE0:  GOTO   7E66
07DE4:  MOVLB  0
07DE6:  BTFSS  FD8.2
07DE8:  GOTO   7E2E
07DEC:  MOVLB  3
07DEE:  MOVF   xFD,W
07DF0:  SUBWF  xF1,W
07DF2:  BTFSC  FD8.0
07DF4:  BRA    7DFC
07DF6:  MOVLB  0
07DF8:  GOTO   7E66
07DFC:  MOVLB  0
07DFE:  BTFSS  FD8.2
07E00:  GOTO   7E2E
07E04:  MOVLB  3
07E06:  MOVF   xFC,W
07E08:  SUBWF  xF0,W
07E0A:  BTFSC  FD8.0
07E0C:  BRA    7E14
07E0E:  MOVLB  0
07E10:  GOTO   7E66
07E14:  MOVLB  0
07E16:  BTFSS  FD8.2
07E18:  GOTO   7E2E
07E1C:  MOVLB  3
07E1E:  MOVF   xEF,W
07E20:  SUBWF  xFB,W
07E22:  BTFSS  FD8.0
07E24:  BRA    7E2C
07E26:  MOVLB  0
07E28:  GOTO   7E66
07E2C:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
07E2E:  MOVFF  E5,82F
07E32:  MOVFF  E4,82E
07E36:  MOVFF  E3,82D
07E3A:  MOVFF  E2,82C
07E3E:  MOVFF  3FE,833
07E42:  MOVFF  3FD,832
07E46:  MOVFF  3FC,831
07E4A:  MOVFF  3FB,830
07E4E:  CALL   2D84
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
07E52:  MOVLW  10
07E54:  MOVLB  3
07E56:  ADDWF  xFC,F
07E58:  MOVLW  00
07E5A:  ADDWFC xFD,F
07E5C:  MOVLW  00
07E5E:  ADDWFC xFE,F
07E60:  MOVLB  0
07E62:  GOTO   7DD4
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
07E66:  MOVLB  3
07E68:  CLRF   xFF
07E6A:  MOVF   xF8,W
07E6C:  ANDLW  F0
07E6E:  MOVLB  4
07E70:  MOVWF  x00
07E72:  CLRF   x01
07E74:  CLRF   x02
07E76:  MOVLB  3
07E78:  MOVF   xDE,W
07E7A:  ADDWF  xF7,W
07E7C:  MOVLB  4
07E7E:  MOVWF  x15
07E80:  MOVLB  3
07E82:  MOVF   xDF,W
07E84:  ADDWFC xF8,W
07E86:  MOVLB  4
07E88:  MOVWF  x16
07E8A:  MOVLB  3
07E8C:  MOVF   xE0,W
07E8E:  ADDWFC xF9,W
07E90:  MOVLB  4
07E92:  MOVWF  x17
07E94:  MOVLB  3
07E96:  MOVF   xE1,W
07E98:  ADDWFC xFA,W
07E9A:  MOVLB  4
07E9C:  MOVWF  x18
07E9E:  MOVLW  FF
07EA0:  ADDWF  x15,F
07EA2:  MOVLW  0F
07EA4:  ADDWFC x16,F
07EA6:  MOVLW  00
07EA8:  ADDWFC x17,F
07EAA:  MOVLW  00
07EAC:  ADDWFC x18,F
07EAE:  CLRF   x03
07EB0:  MOVF   x16,W
07EB2:  ANDLW  F0
07EB4:  MOVWF  x04
07EB6:  CLRF   x05
07EB8:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
07EBA:  MOVFF  402,40A
07EBE:  MOVFF  401,409
07EC2:  MOVFF  400,408
07EC6:  MOVFF  3FF,407
07ECA:  MOVLB  0
07ECC:  MOVLB  4
07ECE:  MOVF   x0A,W
07ED0:  SUBWF  x06,W
07ED2:  BTFSC  FD8.0
07ED4:  BRA    7EDC
07ED6:  MOVLB  0
07ED8:  GOTO   7FC0
07EDC:  MOVLB  0
07EDE:  BTFSS  FD8.2
07EE0:  GOTO   7F26
07EE4:  MOVLB  4
07EE6:  MOVF   x09,W
07EE8:  SUBWF  x05,W
07EEA:  BTFSC  FD8.0
07EEC:  BRA    7EF4
07EEE:  MOVLB  0
07EF0:  GOTO   7FC0
07EF4:  MOVLB  0
07EF6:  BTFSS  FD8.2
07EF8:  GOTO   7F26
07EFC:  MOVLB  4
07EFE:  MOVF   x08,W
07F00:  SUBWF  x04,W
07F02:  BTFSC  FD8.0
07F04:  BRA    7F0C
07F06:  MOVLB  0
07F08:  GOTO   7FC0
07F0C:  MOVLB  0
07F0E:  BTFSS  FD8.2
07F10:  GOTO   7F26
07F14:  MOVLB  4
07F16:  MOVF   x03,W
07F18:  SUBWF  x07,W
07F1A:  BTFSS  FD8.0
07F1C:  BRA    7F24
07F1E:  MOVLB  0
07F20:  GOTO   7FC0
07F24:  MOVLB  0
07F26:  MOVLB  4
07F28:  MOVF   x0A,W
07F2A:  MOVLB  3
07F2C:  SUBWF  xD9,W
07F2E:  BTFSC  FD8.0
07F30:  BRA    7F38
07F32:  MOVLB  0
07F34:  GOTO   7FC0
07F38:  MOVLB  0
07F3A:  BTFSS  FD8.2
07F3C:  GOTO   7F88
07F40:  MOVLB  4
07F42:  MOVF   x09,W
07F44:  MOVLB  3
07F46:  SUBWF  xD8,W
07F48:  BTFSC  FD8.0
07F4A:  BRA    7F52
07F4C:  MOVLB  0
07F4E:  GOTO   7FC0
07F52:  MOVLB  0
07F54:  BTFSS  FD8.2
07F56:  GOTO   7F88
07F5A:  MOVLB  4
07F5C:  MOVF   x08,W
07F5E:  MOVLB  3
07F60:  SUBWF  xD7,W
07F62:  BTFSC  FD8.0
07F64:  BRA    7F6C
07F66:  MOVLB  0
07F68:  GOTO   7FC0
07F6C:  MOVLB  0
07F6E:  BTFSS  FD8.2
07F70:  GOTO   7F88
07F74:  MOVLB  3
07F76:  MOVF   xD6,W
07F78:  MOVLB  4
07F7A:  SUBWF  x07,W
07F7C:  BTFSS  FD8.0
07F7E:  BRA    7F86
07F80:  MOVLB  0
07F82:  GOTO   7FC0
07F86:  MOVLB  0
....................             subsector_4kByte_erase(smf, addr);
07F88:  MOVFF  E5,82F
07F8C:  MOVFF  E4,82E
07F90:  MOVFF  E3,82D
07F94:  MOVFF  E2,82C
07F98:  MOVFF  40A,833
07F9C:  MOVFF  409,832
07FA0:  MOVFF  408,831
07FA4:  MOVFF  407,830
07FA8:  CALL   2D84
07FAC:  MOVLW  10
07FAE:  MOVLB  4
07FB0:  ADDWF  x08,F
07FB2:  MOVLW  00
07FB4:  ADDWFC x09,F
07FB6:  MOVLW  00
07FB8:  ADDWFC x0A,F
07FBA:  MOVLB  0
07FBC:  GOTO   7ECC
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
07FC0:  MOVFF  3E1,40E
07FC4:  MOVFF  3E0,40D
07FC8:  MOVFF  3DF,40C
07FCC:  MOVFF  3DE,40B
07FD0:  MOVFF  3DD,412
07FD4:  MOVFF  3DC,411
07FD8:  MOVFF  3DB,410
07FDC:  MOVFF  3DA,40F
....................         while (remaining > 0)
07FE0:  MOVLB  4
07FE2:  MOVF   x0B,F
07FE4:  BTFSC  FD8.2
07FE6:  BRA    7FEE
07FE8:  MOVLB  0
07FEA:  GOTO   8020
07FEE:  MOVLB  0
07FF0:  MOVLB  4
07FF2:  MOVF   x0C,F
07FF4:  BTFSC  FD8.2
07FF6:  BRA    7FFE
07FF8:  MOVLB  0
07FFA:  GOTO   8020
07FFE:  MOVLB  0
08000:  MOVLB  4
08002:  MOVF   x0D,F
08004:  BTFSC  FD8.2
08006:  BRA    800E
08008:  MOVLB  0
0800A:  GOTO   8020
0800E:  MOVLB  0
08010:  MOVLB  4
08012:  MOVF   x0E,F
08014:  BTFSS  FD8.2
08016:  BRA    801E
08018:  MOVLB  0
0801A:  GOTO   814A
0801E:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
08020:  MOVLB  4
08022:  MOVF   x0E,F
08024:  BTFSC  FD8.2
08026:  BRA    802E
08028:  MOVLB  0
0802A:  GOTO   8062
0802E:  MOVLB  0
08030:  MOVLB  4
08032:  MOVF   x0D,F
08034:  BTFSC  FD8.2
08036:  BRA    803E
08038:  MOVLB  0
0803A:  GOTO   8062
0803E:  MOVLB  0
08040:  MOVLB  4
08042:  MOVF   x0C,F
08044:  BTFSC  FD8.2
08046:  BRA    804E
08048:  MOVLB  0
0804A:  GOTO   8062
0804E:  MOVLB  0
08050:  MOVLB  4
08052:  MOVF   x0B,W
08054:  SUBLW  40
08056:  BTFSS  FD8.0
08058:  BRA    8060
0805A:  MOVLB  0
0805C:  GOTO   806A
08060:  MOVLB  0
08062:  CLRF   03
08064:  MOVLW  40
08066:  GOTO   8074
0806A:  MOVFF  40C,03
0806E:  MOVLB  4
08070:  MOVF   x0B,W
08072:  MOVLB  0
08074:  MOVLB  4
08076:  MOVWF  x13
08078:  MOVFF  03,414
0807C:  MOVLB  0
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
0807E:  MOVFF  E1,498
08082:  MOVFF  E0,497
08086:  MOVFF  DF,496
0808A:  MOVFF  DE,495
0808E:  MOVFF  412,49C
08092:  MOVFF  411,49B
08096:  MOVFF  410,49A
0809A:  MOVFF  40F,499
0809E:  MOVLW  03
080A0:  MOVLB  4
080A2:  MOVWF  x9E
080A4:  MOVLW  86
080A6:  MOVWF  x9D
080A8:  CLRF   xA2
080AA:  CLRF   xA1
080AC:  MOVFF  414,4A0
080B0:  MOVFF  413,49F
080B4:  MOVLB  0
080B6:  CALL   19F2
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
080BA:  MOVFF  E5,82F
080BE:  MOVFF  E4,82E
080C2:  MOVFF  E3,82D
080C6:  MOVFF  E2,82C
080CA:  MOVFF  3FA,833
080CE:  MOVFF  3F9,832
080D2:  MOVFF  3F8,831
080D6:  MOVFF  3F7,830
080DA:  MOVLW  03
080DC:  MOVLB  8
080DE:  MOVWF  x35
080E0:  MOVLW  86
080E2:  MOVWF  x34
080E4:  MOVFF  414,837
080E8:  MOVFF  413,836
080EC:  MOVLB  0
080EE:  CALL   2A00
.................... 
....................             src_addr += chunk;
080F2:  MOVLB  4
080F4:  MOVF   x13,W
080F6:  ADDWF  x0F,F
080F8:  MOVF   x14,W
080FA:  ADDWFC x10,F
080FC:  MOVLW  00
080FE:  ADDWFC x11,F
08100:  MOVLW  00
08102:  ADDWFC x12,F
....................             data_write_addr += chunk;
08104:  MOVF   x13,W
08106:  MOVLB  3
08108:  ADDWF  xF7,F
0810A:  MOVLB  4
0810C:  MOVF   x14,W
0810E:  MOVLB  3
08110:  ADDWFC xF8,F
08112:  MOVLW  00
08114:  ADDWFC xF9,F
08116:  MOVLW  00
08118:  ADDWFC xFA,F
....................             used_size += chunk;
0811A:  MOVLB  4
0811C:  MOVF   x13,W
0811E:  MOVLB  3
08120:  ADDWF  xE6,F
08122:  MOVLB  4
08124:  MOVF   x14,W
08126:  MOVLB  3
08128:  ADDWFC xE7,F
0812A:  MOVLW  00
0812C:  ADDWFC xE8,F
0812E:  MOVLW  00
08130:  ADDWFC xE9,F
....................             remaining -= chunk;
08132:  MOVLB  4
08134:  MOVF   x13,W
08136:  SUBWF  x0B,F
08138:  MOVF   x14,W
0813A:  SUBWFB x0C,F
0813C:  MOVLW  00
0813E:  SUBWFB x0D,F
08140:  MOVLW  00
08142:  SUBWFB x0E,F
08144:  MOVLB  0
08146:  GOTO   7FE0
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
0814A:  MOVLW  04
0814C:  MOVWF  FF6
0814E:  MOVLW  05
08150:  MOVWF  FF7
08152:  MOVLW  00
08154:  MOVWF  FF8
08156:  CALL   15D4
....................         subsector_4kByte_erase(smf, mis_start_address);
0815A:  MOVFF  E5,82F
0815E:  MOVFF  E4,82E
08162:  MOVFF  E3,82D
08166:  MOVFF  E2,82C
0816A:  MOVFF  3D5,833
0816E:  MOVFF  3D4,832
08172:  MOVFF  3D3,831
08176:  MOVFF  3D2,830
0817A:  CALL   2D84
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
0817E:  MOVFF  3E9,419
08182:  MOVFF  3E8,418
08186:  MOVFF  3E7,417
0818A:  MOVFF  3E6,416
0818E:  MOVLB  4
08190:  CLRF   x17
08192:  CLRF   x18
08194:  CLRF   x19
08196:  MOVFF  E5,421
0819A:  MOVFF  E4,420
0819E:  MOVFF  E3,41F
081A2:  MOVFF  E2,41E
081A6:  MOVFF  3D5,425
081AA:  MOVFF  3D4,424
081AE:  MOVFF  3D3,423
081B2:  MOVFF  3D2,422
081B6:  MOVFF  416,426
081BA:  MOVLB  0
081BC:  CALL   71D6
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
081C0:  MOVLW  01
081C2:  MOVLB  3
081C4:  ADDWF  xD2,W
081C6:  MOVLB  4
081C8:  MOVWF  x15
081CA:  MOVLW  00
081CC:  MOVLB  3
081CE:  ADDWFC xD3,W
081D0:  MOVLB  4
081D2:  MOVWF  x16
081D4:  MOVLW  00
081D6:  MOVLB  3
081D8:  ADDWFC xD4,W
081DA:  MOVLB  4
081DC:  MOVWF  x17
081DE:  MOVLW  00
081E0:  MOVLB  3
081E2:  ADDWFC xD5,W
081E4:  MOVLB  4
081E6:  MOVWF  x18
081E8:  MOVFF  3E7,41A
081EC:  MOVFF  3E8,41B
081F0:  MOVFF  3E9,41C
081F4:  CLRF   x1D
081F6:  CLRF   x1B
081F8:  CLRF   x1C
081FA:  CLRF   x1D
081FC:  MOVFF  E5,421
08200:  MOVFF  E4,420
08204:  MOVFF  E3,41F
08208:  MOVFF  E2,41E
0820C:  MOVFF  418,425
08210:  MOVFF  417,424
08214:  MOVFF  416,423
08218:  MOVFF  415,422
0821C:  MOVFF  41A,426
08220:  MOVLB  0
08222:  CALL   71D6
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
08226:  MOVLW  02
08228:  MOVLB  3
0822A:  ADDWF  xD2,W
0822C:  MOVLB  4
0822E:  MOVWF  x15
08230:  MOVLW  00
08232:  MOVLB  3
08234:  ADDWFC xD3,W
08236:  MOVLB  4
08238:  MOVWF  x16
0823A:  MOVLW  00
0823C:  MOVLB  3
0823E:  ADDWFC xD4,W
08240:  MOVLB  4
08242:  MOVWF  x17
08244:  MOVLW  00
08246:  MOVLB  3
08248:  ADDWFC xD5,W
0824A:  MOVLB  4
0824C:  MOVWF  x18
0824E:  MOVFF  3E8,41A
08252:  MOVFF  3E9,41B
08256:  CLRF   x1C
08258:  CLRF   x1D
0825A:  CLRF   x1B
0825C:  CLRF   x1C
0825E:  CLRF   x1D
08260:  MOVFF  E5,421
08264:  MOVFF  E4,420
08268:  MOVFF  E3,41F
0826C:  MOVFF  E2,41E
08270:  MOVFF  418,425
08274:  MOVFF  417,424
08278:  MOVFF  416,423
0827C:  MOVFF  415,422
08280:  MOVFF  41A,426
08284:  MOVLB  0
08286:  CALL   71D6
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
0828A:  MOVLW  03
0828C:  MOVLB  3
0828E:  ADDWF  xD2,W
08290:  MOVLB  4
08292:  MOVWF  x15
08294:  MOVLW  00
08296:  MOVLB  3
08298:  ADDWFC xD3,W
0829A:  MOVLB  4
0829C:  MOVWF  x16
0829E:  MOVLW  00
082A0:  MOVLB  3
082A2:  ADDWFC xD4,W
082A4:  MOVLB  4
082A6:  MOVWF  x17
082A8:  MOVLW  00
082AA:  MOVLB  3
082AC:  ADDWFC xD5,W
082AE:  MOVLB  4
082B0:  MOVWF  x18
082B2:  MOVFF  3E9,41A
082B6:  CLRF   x1B
082B8:  CLRF   x1C
082BA:  CLRF   x1D
082BC:  CLRF   x1B
082BE:  CLRF   x1C
082C0:  CLRF   x1D
082C2:  MOVFF  E5,421
082C6:  MOVFF  E4,420
082CA:  MOVFF  E3,41F
082CE:  MOVFF  E2,41E
082D2:  MOVFF  418,425
082D6:  MOVFF  417,424
082DA:  MOVFF  416,423
082DE:  MOVFF  415,422
082E2:  MOVFF  41A,426
082E6:  MOVLB  0
082E8:  CALL   71D6
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
082EC:  MOVLW  04
082EE:  MOVLB  3
082F0:  ADDWF  xD2,W
082F2:  MOVLB  4
082F4:  MOVWF  x15
082F6:  MOVLW  00
082F8:  MOVLB  3
082FA:  ADDWFC xD3,W
082FC:  MOVLB  4
082FE:  MOVWF  x16
08300:  MOVLW  00
08302:  MOVLB  3
08304:  ADDWFC xD4,W
08306:  MOVLB  4
08308:  MOVWF  x17
0830A:  MOVLW  00
0830C:  MOVLB  3
0830E:  ADDWFC xD5,W
08310:  MOVLB  4
08312:  MOVWF  x18
08314:  MOVFF  E5,421
08318:  MOVFF  E4,420
0831C:  MOVFF  E3,41F
08320:  MOVFF  E2,41E
08324:  MOVFF  418,425
08328:  MOVFF  417,424
0832C:  MOVFF  416,423
08330:  MOVFF  415,422
08334:  MOVFF  3EA,426
08338:  MOVLB  0
0833A:  CALL   71D6
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
0833E:  MOVLW  18
08340:  MOVWF  FF6
08342:  MOVLW  05
08344:  MOVWF  FF7
08346:  MOVLW  00
08348:  MOVWF  FF8
0834A:  MOVLW  0C
0834C:  MOVLB  7
0834E:  MOVWF  xEC
08350:  MOVLB  0
08352:  CALL   1604
08356:  MOVLW  41
08358:  MOVWF  FE9
0835A:  MOVFF  3E9,418
0835E:  MOVFF  3E8,417
08362:  MOVFF  3E7,416
08366:  MOVFF  3E6,415
0836A:  GOTO   754A
0836E:  MOVLW  0D
08370:  MOVLB  8
08372:  MOVWF  x2F
08374:  MOVLB  0
08376:  CALL   1582
0837A:  MOVLW  0A
0837C:  MOVLB  8
0837E:  MOVWF  x2F
08380:  MOVLB  0
08382:  CALL   1582
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
08386:  MOVLW  2A
08388:  MOVWF  FF6
0838A:  MOVLW  05
0838C:  MOVWF  FF7
0838E:  MOVLW  00
08390:  MOVWF  FF8
08392:  MOVLW  0D
08394:  MOVLB  7
08396:  MOVWF  xEC
08398:  MOVLB  0
0839A:  CALL   1604
0839E:  MOVFF  3EA,7EC
083A2:  MOVLW  1B
083A4:  MOVLB  7
083A6:  MOVWF  xED
083A8:  MOVLB  0
083AA:  CALL   3F2A
083AE:  MOVLW  39
083B0:  MOVWF  FF6
083B2:  MOVLW  05
083B4:  MOVWF  FF7
083B6:  MOVLW  00
083B8:  MOVWF  FF8
083BA:  MOVLW  04
083BC:  MOVLB  7
083BE:  MOVWF  xEC
083C0:  MOVLB  0
083C2:  CALL   1604
083C6:  MOVLB  3
083C8:  INCF   xC6,F
083CA:  MOVLB  0
083CC:  GOTO   76EE
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
083D0:  MOVLW  3E
083D2:  MOVWF  FF6
083D4:  MOVLW  05
083D6:  MOVWF  FF7
083D8:  MOVLW  00
083DA:  MOVWF  FF8
083DC:  CALL   15D4
....................     fprintf(PC, "____________________\r\n\r\n");
083E0:  MOVLW  58
083E2:  MOVWF  FF6
083E4:  MOVLW  05
083E6:  MOVWF  FF7
083E8:  MOVLW  00
083EA:  MOVWF  FF8
083EC:  CALL   15D4
083F0:  GOTO   844E (RETURN)
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
04C44:  MOVLW  01
04C46:  ADDWF  xDD,W
04C48:  ANDLW  0F
04C4A:  MOVLB  3
04C4C:  MOVWF  x98
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
04C4E:  MOVLB  0
04C50:  MOVF   xDC,W
04C52:  MOVLB  3
04C54:  SUBWF  x98,W
04C56:  BTFSC  FD8.2
04C58:  BRA    4C60
04C5A:  MOVLB  0
04C5C:  GOTO   4C76
04C60:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
04C62:  MOVLW  72
04C64:  MOVWF  FF6
04C66:  MOVLW  05
04C68:  MOVWF  FF7
04C6A:  MOVLW  00
04C6C:  MOVWF  FF8
04C6E:  CALL   15D4
04C72:  GOTO   4DCC
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
04C76:  MOVF   xDD,W
04C78:  MULLW  09
04C7A:  MOVF   FF3,W
04C7C:  MOVLB  3
04C7E:  CLRF   x9A
04C80:  MOVWF  x99
04C82:  MOVLW  4C
04C84:  ADDWF  x99,W
04C86:  MOVWF  01
04C88:  MOVLW  00
04C8A:  ADDWFC x9A,W
04C8C:  MOVWF  03
04C8E:  MOVF   01,W
04C90:  MOVWF  x9B
04C92:  MOVFF  03,39C
04C96:  MOVF   x96,W
04C98:  MOVWF  01
04C9A:  MOVF   x97,W
04C9C:  MOVWF  03
04C9E:  MOVF   01,W
04CA0:  MOVWF  FE9
04CA2:  MOVFF  03,FEA
04CA6:  MOVLW  00
04CA8:  BTFSC  FEF.0
04CAA:  MOVLW  01
04CAC:  MOVWF  01
04CAE:  BTFSS  01.0
04CB0:  BRA    4CB8
04CB2:  MOVLB  0
04CB4:  GOTO   4CC8
04CB8:  MOVLB  0
04CBA:  MOVFF  39C,FEA
04CBE:  MOVFF  39B,FE9
04CC2:  BCF    FEF.0
04CC4:  GOTO   4CD2
04CC8:  MOVFF  39C,FEA
04CCC:  MOVFF  39B,FE9
04CD0:  BSF    FEF.0
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
04CD2:  MOVF   xDD,W
04CD4:  MULLW  09
04CD6:  MOVF   FF3,W
04CD8:  MOVLB  3
04CDA:  CLRF   x9A
04CDC:  MOVWF  x99
04CDE:  MOVLW  01
04CE0:  ADDWF  x99,W
04CE2:  MOVWF  01
04CE4:  MOVLW  00
04CE6:  ADDWFC x9A,W
04CE8:  MOVWF  03
04CEA:  MOVF   01,W
04CEC:  ADDLW  4C
04CEE:  MOVWF  01
04CF0:  MOVLW  00
04CF2:  ADDWFC 03,F
04CF4:  MOVF   01,W
04CF6:  MOVWF  x99
04CF8:  MOVFF  03,39A
04CFC:  MOVLW  01
04CFE:  ADDWF  x96,W
04D00:  MOVWF  FE9
04D02:  MOVLW  00
04D04:  ADDWFC x97,W
04D06:  MOVWF  FEA
04D08:  MOVFF  FEF,00
04D0C:  MOVFF  FEC,01
04D10:  MOVFF  FEC,02
04D14:  MOVFF  FEC,03
04D18:  MOVF   FED,F
04D1A:  MOVF   FED,F
04D1C:  MOVF   FED,F
04D1E:  MOVFF  03,39E
04D22:  MOVFF  02,39D
04D26:  MOVFF  01,39C
04D2A:  MOVFF  00,39B
04D2E:  MOVFF  39A,FEA
04D32:  MOVFF  399,FE9
04D36:  MOVFF  39B,FEF
04D3A:  MOVFF  39C,FEC
04D3E:  MOVFF  39D,FEC
04D42:  MOVFF  39E,FEC
04D46:  MOVF   FED,F
04D48:  MOVF   FED,F
04D4A:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
04D4C:  MOVLB  0
04D4E:  MOVF   xDD,W
04D50:  MULLW  09
04D52:  MOVF   FF3,W
04D54:  MOVLB  3
04D56:  CLRF   x9A
04D58:  MOVWF  x99
04D5A:  MOVLW  05
04D5C:  ADDWF  x99,W
04D5E:  MOVWF  01
04D60:  MOVLW  00
04D62:  ADDWFC x9A,W
04D64:  MOVWF  03
04D66:  MOVF   01,W
04D68:  ADDLW  4C
04D6A:  MOVWF  01
04D6C:  MOVLW  00
04D6E:  ADDWFC 03,F
04D70:  MOVF   01,W
04D72:  MOVWF  x99
04D74:  MOVFF  03,39A
04D78:  MOVLW  05
04D7A:  ADDWF  x96,W
04D7C:  MOVWF  FE9
04D7E:  MOVLW  00
04D80:  ADDWFC x97,W
04D82:  MOVWF  FEA
04D84:  MOVFF  FEF,00
04D88:  MOVFF  FEC,01
04D8C:  MOVFF  FEC,02
04D90:  MOVFF  FEC,03
04D94:  MOVF   FED,F
04D96:  MOVF   FED,F
04D98:  MOVF   FED,F
04D9A:  MOVFF  03,39E
04D9E:  MOVFF  02,39D
04DA2:  MOVFF  01,39C
04DA6:  MOVFF  00,39B
04DAA:  MOVFF  39A,FEA
04DAE:  MOVFF  399,FE9
04DB2:  MOVFF  39B,FEF
04DB6:  MOVFF  39C,FEC
04DBA:  MOVFF  39D,FEC
04DBE:  MOVFF  39E,FEC
04DC2:  MOVF   FED,F
04DC4:  MOVF   FED,F
04DC6:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
04DC8:  MOVFF  398,DD
04DCC:  MOVLB  0
....................    }
04DCE:  GOTO   4E2C (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
06DC8:  MOVF   xDD,W
06DCA:  SUBWF  xDC,W
06DCC:  BTFSS  FD8.2
06DCE:  GOTO   6DF2
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
06DD2:  MOVLW  8E
06DD4:  MOVWF  FF6
06DD6:  MOVLW  05
06DD8:  MOVWF  FF7
06DDA:  MOVLW  00
06DDC:  MOVWF  FF8
06DDE:  CALL   15D4
....................       return 0x00;
06DE2:  MOVLW  00
06DE4:  MOVWF  01
06DE6:  MOVLW  00
06DE8:  MOVWF  02
06DEA:  GOTO   6E1E
....................    }
06DEE:  GOTO   6E1E
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
06DF2:  MOVFF  DC,415
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
06DF6:  MOVLW  01
06DF8:  ADDWF  xDC,W
06DFA:  ANDLW  0F
06DFC:  MOVWF  xDC
....................       return &smf_queue.smf_data[current_head];
06DFE:  MOVLB  4
06E00:  MOVF   x15,W
06E02:  MULLW  09
06E04:  MOVF   FF3,W
06E06:  CLRF   03
06E08:  ADDLW  4C
06E0A:  MOVWF  01
06E0C:  MOVLW  00
06E0E:  ADDWFC 03,F
06E10:  MOVF   01,W
06E12:  MOVWF  01
06E14:  MOVF   03,W
06E16:  MOVWF  02
06E18:  MOVLB  0
06E1A:  GOTO   6E1E
....................    }
06E1E:  GOTO   773E (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
06BCA:  MOVF   xDD,W
06BCC:  SUBWF  xDC,W
06BCE:  BTFSC  FD8.2
06BD0:  GOTO   6BDA
06BD4:  MOVLW  00
06BD6:  GOTO   6BDC
06BDA:  MOVLW  01
06BDC:  MOVWF  01
06BDE:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
06E22:  MOVLB  4
06E24:  CLRF   x1D
06E26:  CLRF   x1E
06E28:  CLRF   x1F
06E2A:  CLRF   x20
06E2C:  CLRF   x21
06E2E:  CLRF   x22
06E30:  CLRF   x23
06E32:  CLRF   x24
06E34:  CLRF   x25
....................    
....................    if (mis_type == MEAURE_DATA)
06E36:  MOVF   x1C,F
06E38:  BTFSC  FD8.2
06E3A:  BRA    6E42
06E3C:  MOVLB  0
06E3E:  GOTO   6E68
06E42:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
06E44:  MOVLW  04
06E46:  MOVLB  4
06E48:  MOVWF  x20
06E4A:  MOVLW  EC
06E4C:  MOVWF  x1F
06E4E:  CLRF   x1E
06E50:  CLRF   x1D
....................       mis_struct.end_address     = 0x056BFFFF;
06E52:  MOVLW  05
06E54:  MOVWF  x24
06E56:  MOVLW  6B
06E58:  MOVWF  x23
06E5A:  SETF   x22
06E5C:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000000;
06E5E:  MOVLW  80
06E60:  MOVWF  x25
06E62:  MOVLB  0
....................    }
06E64:  GOTO   6EB4
....................    else if (mis_type == PICLOG_DATA)
06E68:  MOVLB  4
06E6A:  DECFSZ x1C,W
06E6C:  BRA    6E72
06E6E:  BRA    6E78
06E70:  MOVLB  0
06E72:  MOVLB  0
06E74:  GOTO   6E9E
06E78:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
06E7A:  MOVLW  04
06E7C:  MOVLB  4
06E7E:  MOVWF  x20
06E80:  MOVLW  DC
06E82:  MOVWF  x1F
06E84:  CLRF   x1E
06E86:  CLRF   x1D
....................       mis_struct.end_address     = 0x04EBFFFF;
06E88:  MOVLW  04
06E8A:  MOVWF  x24
06E8C:  MOVLW  EB
06E8E:  MOVWF  x23
06E90:  SETF   x22
06E92:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000001;  
06E94:  MOVLW  81
06E96:  MOVWF  x25
06E98:  MOVLB  0
....................    }
06E9A:  GOTO   6EB4
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
06E9E:  MOVLB  4
06EA0:  SETF   x20
06EA2:  SETF   x1F
06EA4:  SETF   x1E
06EA6:  SETF   x1D
....................       mis_struct.end_address     = 0xFFFFFFFF;
06EA8:  SETF   x24
06EAA:  SETF   x23
06EAC:  SETF   x22
06EAE:  SETF   x21
....................       mis_struct.mission_flag    = 0b11111111; 
06EB0:  SETF   x25
06EB2:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
06EB4:  MOVLW  1D
06EB6:  MOVWF  01
06EB8:  MOVLW  04
06EBA:  MOVWF  02
06EBC:  GOTO   776C (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
005D0:  GOTO   05D4
005D4:  GOTO   05DE
005D8:  BTFSS  1C.0
005DA:  GOTO   0612
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
005DE:  MOVF   4B,W
005E0:  SUBLW  1F
005E2:  BTFSS  FD8.0
005E4:  GOTO   0612
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
005E8:  MOVF   4B,W
005EA:  INCF   4B,F
005EC:  ANDLW  1F
005EE:  CLRF   03
005F0:  ADDLW  2B
005F2:  MOVWF  FE9
005F4:  MOVLW  00
005F6:  ADDWFC 03,W
005F8:  MOVWF  FEA
005FA:  MOVFF  FEA,86C
005FE:  MOVFF  FE9,86B
00602:  GOTO   05A8
00606:  MOVFF  86C,FEA
0060A:  MOVFF  86B,FE9
0060E:  MOVF   01,W
00610:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00612:  BCF    FA6.5
00614:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01666:  MOVLW  18
01668:  MOVWF  FF6
0166A:  MOVLW  06
0166C:  MOVWF  FF7
0166E:  MOVLW  00
01670:  MOVWF  FF8
01672:  CALL   15D4
....................    enable_interrupts(INT_RDA3);
01676:  BSF    F61.5
....................    enable_interrupts(global);
01678:  MOVLW  C0
0167A:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
0167C:  MOVLW  2A
0167E:  MOVWF  FF6
01680:  MOVLW  06
01682:  MOVWF  FF7
01684:  MOVLW  00
01686:  MOVWF  FF8
01688:  CALL   15D4
0168C:  GOTO   8CB6 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
03AFC:  MOVFF  385,03
03B00:  MOVLB  3
03B02:  MOVF   x84,W
03B04:  MOVWF  FE9
03B06:  MOVFF  03,FEA
03B0A:  MOVFF  FEF,386
03B0E:  MOVFF  383,FEA
03B12:  MOVFF  382,FE9
03B16:  CLRF   00
03B18:  CLRF   02
03B1A:  MOVFF  386,01
03B1E:  MOVLB  0
03B20:  CALL   3AD8
....................    *receive_signal_size = 0;
03B24:  MOVFF  385,03
03B28:  MOVLB  3
03B2A:  MOVF   x84,W
03B2C:  MOVWF  FE9
03B2E:  MOVFF  03,FEA
03B32:  CLRF   FEF
03B34:  MOVLB  0
03B36:  GOTO   8D5C (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/communication.c"
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
038DC:  MOVLB  3
038DE:  CLRF   x8B
038E0:  CLRF   x8C
038E2:  CLRF   x8D
038E4:  CLRF   x8E
038E6:  CLRF   x8F
038E8:  CLRF   x90
038EA:  CLRF   x91
038EC:  CLRF   x92
038EE:  CLRF   x93
038F0:  CLRF   x94
038F2:  CLRF   x95
038F4:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
038F6:  MOVLW  36
038F8:  MOVWF  FF6
038FA:  MOVLW  06
038FC:  MOVWF  FF7
038FE:  MOVLW  00
03900:  MOVWF  FF8
03902:  MOVLB  0
03904:  CALL   15D4
....................    fprintf(PC, "\t[BOSS] >>> ");
03908:  MOVLW  56
0390A:  MOVWF  FF6
0390C:  MOVLW  06
0390E:  MOVWF  FF7
03910:  MOVLW  00
03912:  MOVWF  FF8
03914:  CALL   15D4
....................    for (int8 i = 0; i < receive_signal_size; i++)
03918:  MOVLB  3
0391A:  CLRF   x97
0391C:  MOVLB  0
0391E:  MOVLB  3
03920:  MOVF   x8A,W
03922:  SUBWF  x97,W
03924:  BTFSS  FD8.0
03926:  BRA    392E
03928:  MOVLB  0
0392A:  GOTO   3968
0392E:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
03930:  MOVLB  3
03932:  MOVF   x97,W
03934:  ADDWF  x88,W
03936:  MOVWF  FE9
03938:  MOVLW  00
0393A:  ADDWFC x89,W
0393C:  MOVWF  FEA
0393E:  MOVFF  FEF,39E
03942:  MOVFF  39E,4A4
03946:  MOVLW  37
03948:  MOVLB  4
0394A:  MOVWF  xA5
0394C:  MOVLB  0
0394E:  CALL   1C0A
03952:  MOVLW  20
03954:  MOVLB  8
03956:  MOVWF  x2F
03958:  MOVLB  0
0395A:  CALL   1582
0395E:  MOVLB  3
03960:  INCF   x97,F
03962:  MOVLB  0
03964:  GOTO   391E
....................    fprintf(PC, "\r\n");
03968:  MOVLW  0D
0396A:  MOVLB  8
0396C:  MOVWF  x2F
0396E:  MOVLB  0
03970:  CALL   1582
03974:  MOVLW  0A
03976:  MOVLB  8
03978:  MOVWF  x2F
0397A:  MOVLB  0
0397C:  CALL   1582
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
03980:  MOVFF  389,39F
03984:  MOVFF  388,39E
03988:  MOVFF  38A,3A0
0398C:  GOTO   358A
03990:  MOVFF  01,398
....................    if (frame_start_position == -1)
03994:  MOVLB  3
03996:  MOVF   x98,W
03998:  SUBLW  FF
0399A:  BTFSC  FD8.2
0399C:  BRA    39A4
0399E:  MOVLB  0
039A0:  GOTO   39B2
039A4:  MOVLB  0
....................       return command;
039A6:  MOVLW  8B
039A8:  MOVWF  01
039AA:  MOVLW  03
039AC:  MOVWF  02
039AE:  GOTO   3AD4
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
039B2:  MOVLB  3
039B4:  MOVF   x98,W
039B6:  ADDWF  x88,W
039B8:  MOVWF  01
039BA:  MOVLW  00
039BC:  ADDWFC x89,W
039BE:  MOVWF  03
039C0:  MOVF   01,W
039C2:  MOVWF  x99
039C4:  MOVFF  03,39A
039C8:  MOVF   x99,W
039CA:  MOVWF  FE9
039CC:  MOVF   x9A,W
039CE:  MOVWF  FEA
039D0:  MOVF   FEF,W
039D2:  ANDLW  0F
039D4:  MOVWF  x9B
039D6:  MOVFF  39B,39E
039DA:  MOVLB  0
039DC:  GOTO   3632
039E0:  MOVFF  01,39C
....................    if (content_size == -1)
039E4:  MOVLB  3
039E6:  MOVF   x9C,W
039E8:  SUBLW  FF
039EA:  BTFSC  FD8.2
039EC:  BRA    39F4
039EE:  MOVLB  0
039F0:  GOTO   3A02
039F4:  MOVLB  0
....................       return command;
039F6:  MOVLW  8B
039F8:  MOVWF  01
039FA:  MOVLW  03
039FC:  MOVWF  02
039FE:  GOTO   3AD4
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
03A02:  MOVLB  3
03A04:  MOVF   x98,W
03A06:  SUBWF  x8A,W
03A08:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
03A0A:  MOVFF  39A,39F
03A0E:  MOVFF  399,39E
03A12:  MOVFF  39D,3A0
03A16:  MOVLB  0
03A18:  GOTO   3738
03A1C:  MOVF   01,F
03A1E:  BTFSS  FD8.2
03A20:  GOTO   3A30
....................       return command;
03A24:  MOVLW  8B
03A26:  MOVWF  01
03A28:  MOVLW  03
03A2A:  MOVWF  02
03A2C:  GOTO   3AD4
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
03A30:  MOVLB  3
03A32:  MOVF   x99,W
03A34:  MOVWF  FE9
03A36:  MOVF   x9A,W
03A38:  MOVWF  FEA
03A3A:  MOVF   FEF,W
03A3C:  ANDLW  F0
03A3E:  MOVWF  00
03A40:  SWAPF  00,W
03A42:  MOVWF  x9E
03A44:  MOVLW  0F
03A46:  ANDWF  x9E,F
03A48:  MOVFF  39E,39F
03A4C:  MOVLB  0
03A4E:  GOTO   3822
03A52:  MOVF   01,F
03A54:  BTFSS  FD8.2
03A56:  GOTO   3A66
....................       return command;
03A5A:  MOVLW  8B
03A5C:  MOVWF  01
03A5E:  MOVLW  03
03A60:  MOVWF  02
03A62:  GOTO   3AD4
.................... 
....................    command.frame_id = frame_id;
03A66:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
03A6A:  MOVLW  01
03A6C:  MOVLB  3
03A6E:  ADDWF  x99,W
03A70:  MOVWF  01
03A72:  MOVLW  00
03A74:  ADDWFC x9A,W
03A76:  MOVWF  03
03A78:  MOVF   01,W
03A7A:  MOVWF  x9E
03A7C:  MOVFF  03,39F
03A80:  MOVLW  02
03A82:  SUBWF  x9D,W
03A84:  MOVWF  xA0
03A86:  MOVLW  03
03A88:  MOVWF  FEA
03A8A:  MOVLW  8E
03A8C:  MOVWF  FE9
03A8E:  MOVFF  39F,FE2
03A92:  MOVFF  39E,FE1
03A96:  MOVF   xA0,W
03A98:  MOVWF  01
03A9A:  BTFSS  FD8.2
03A9C:  BRA    3AA4
03A9E:  MOVLB  0
03AA0:  GOTO   3AB0
03AA4:  MOVLB  0
03AA6:  MOVFF  FE6,FEE
03AAA:  DECFSZ 01,F
03AAC:  GOTO   3AA6
....................    command.size = receive_frame_size-2;
03AB0:  MOVLW  02
03AB2:  MOVLB  3
03AB4:  SUBWF  x9D,W
03AB6:  MOVWF  x8C
....................    command.is_exist = TRUE;
03AB8:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
03ABA:  MOVLW  64
03ABC:  MOVWF  FF6
03ABE:  MOVLW  06
03AC0:  MOVWF  FF7
03AC2:  MOVLW  00
03AC4:  MOVWF  FF8
03AC6:  MOVLB  0
03AC8:  CALL   15D4
....................    return command;
03ACC:  MOVLW  8B
03ACE:  MOVWF  01
03AD0:  MOVLW  03
03AD2:  MOVWF  02
03AD4:  GOTO   8D26 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
0358A:  MOVLB  3
0358C:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0358E:  CLRF   xA1
03590:  MOVLB  0
03592:  MOVLW  01
03594:  MOVLB  3
03596:  SUBWF  xA0,W
03598:  SUBWF  xA1,W
0359A:  BTFSS  FD8.0
0359C:  BRA    35A4
0359E:  MOVLB  0
035A0:  GOTO   35DC
035A4:  MOVLB  0
....................       if(receive_signal[i] == SFD)
035A6:  MOVLB  3
035A8:  MOVF   xA1,W
035AA:  ADDWF  x9E,W
035AC:  MOVWF  FE9
035AE:  MOVLW  00
035B0:  ADDWFC x9F,W
035B2:  MOVWF  FEA
035B4:  MOVF   FEF,W
035B6:  SUBLW  AA
035B8:  BTFSC  FD8.2
035BA:  BRA    35C2
035BC:  MOVLB  0
035BE:  GOTO   35D2
035C2:  MOVLB  0
....................          return i+1;
035C4:  MOVLW  01
035C6:  MOVLB  3
035C8:  ADDWF  xA1,W
035CA:  MOVWF  01
035CC:  MOVLB  0
035CE:  GOTO   362E
035D2:  MOVLB  3
035D4:  INCF   xA1,F
035D6:  MOVLB  0
035D8:  GOTO   3592
....................    if (receive_signal[i] == SFD)
035DC:  MOVLB  3
035DE:  MOVF   xA1,W
035E0:  ADDWF  x9E,W
035E2:  MOVWF  FE9
035E4:  MOVLW  00
035E6:  ADDWFC x9F,W
035E8:  MOVWF  FEA
035EA:  MOVF   FEF,W
035EC:  SUBLW  AA
035EE:  BTFSC  FD8.2
035F0:  BRA    35F8
035F2:  MOVLB  0
035F4:  GOTO   3616
035F8:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
035FA:  MOVLW  80
035FC:  MOVWF  FF6
035FE:  MOVLW  06
03600:  MOVWF  FF7
03602:  MOVLW  00
03604:  MOVWF  FF8
03606:  CALL   15D4
....................       return -1;
0360A:  MOVLW  FF
0360C:  MOVWF  01
0360E:  GOTO   362E
....................    }
03612:  GOTO   362E
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03616:  MOVLW  96
03618:  MOVWF  FF6
0361A:  MOVLW  06
0361C:  MOVWF  FF7
0361E:  MOVLW  00
03620:  MOVWF  FF8
03622:  CALL   15D4
....................       return -1;
03626:  MOVLW  FF
03628:  MOVWF  01
0362A:  GOTO   362E
....................    }
0362E:  GOTO   3990 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03632:  MOVLB  3
03634:  CLRF   x9F
03636:  MOVLB  0
03638:  MOVLB  3
0363A:  MOVF   x9F,W
0363C:  SUBLW  02
0363E:  BTFSC  FD8.0
03640:  BRA    3648
03642:  MOVLB  0
03644:  GOTO   36A6
03648:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
0364A:  BCF    FD8.0
0364C:  MOVLB  3
0364E:  RLCF   x9F,W
03650:  CLRF   xA1
03652:  MOVWF  xA0
03654:  MOVLW  E6
03656:  ADDWF  xA0,W
03658:  MOVWF  FE9
0365A:  MOVLW  00
0365C:  ADDWFC xA1,W
0365E:  MOVWF  FEA
03660:  MOVF   FEF,W
03662:  SUBWF  x9E,W
03664:  BTFSC  FD8.2
03666:  BRA    366E
03668:  MOVLB  0
0366A:  GOTO   369C
0366E:  MOVLB  0
....................          return frame_ids[i].length;
03670:  BCF    FD8.0
03672:  MOVLB  3
03674:  RLCF   x9F,W
03676:  CLRF   xA1
03678:  MOVWF  xA0
0367A:  MOVLW  01
0367C:  ADDWF  xA0,W
0367E:  MOVWF  01
03680:  MOVLW  00
03682:  ADDWFC xA1,W
03684:  MOVWF  03
03686:  MOVF   01,W
03688:  ADDLW  E6
0368A:  MOVWF  FE9
0368C:  MOVLW  00
0368E:  ADDWFC 03,W
03690:  MOVWF  FEA
03692:  MOVF   FEF,W
03694:  MOVWF  01
03696:  MOVLB  0
03698:  GOTO   36EA
0369C:  MOVLB  3
0369E:  INCF   x9F,F
036A0:  MOVLB  0
036A2:  GOTO   3638
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
036A6:  MOVLW  A8
036A8:  MOVWF  FF6
036AA:  MOVLW  06
036AC:  MOVWF  FF7
036AE:  MOVLW  00
036B0:  MOVWF  FF8
036B2:  MOVLW  1F
036B4:  MOVLB  7
036B6:  MOVWF  xEC
036B8:  MOVLB  0
036BA:  CALL   1604
036BE:  MOVFF  39E,4A4
036C2:  MOVLW  37
036C4:  MOVLB  4
036C6:  MOVWF  xA5
036C8:  MOVLB  0
036CA:  CALL   1C0A
036CE:  MOVLW  0D
036D0:  MOVLB  8
036D2:  MOVWF  x2F
036D4:  MOVLB  0
036D6:  CALL   1582
036DA:  MOVLW  0A
036DC:  MOVLB  8
036DE:  MOVWF  x2F
036E0:  MOVLB  0
036E2:  CALL   1582
....................    return -1;
036E6:  MOVLW  FF
036E8:  MOVWF  01
036EA:  GOTO   39E0 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03738:  MOVLW  01
0373A:  MOVLB  3
0373C:  SUBWF  xA0,W
0373E:  ADDWF  x9E,W
03740:  MOVWF  FE9
03742:  MOVLW  00
03744:  ADDWFC x9F,W
03746:  MOVWF  FEA
03748:  MOVFF  FEF,3A1
0374C:  MOVLW  01
0374E:  SUBWF  xA0,W
03750:  MOVWF  xA3
03752:  MOVFF  39F,7ED
03756:  MOVFF  39E,7EC
0375A:  MOVFF  3A3,7EE
0375E:  MOVLB  0
03760:  CALL   36EE
03764:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03768:  MOVLB  3
0376A:  MOVF   xA2,W
0376C:  SUBWF  xA1,W
0376E:  BTFSC  FD8.2
03770:  BRA    3778
03772:  MOVLB  0
03774:  GOTO   3786
03778:  MOVLB  0
....................       return TRUE;
0377A:  MOVLW  01
0377C:  MOVWF  01
0377E:  GOTO   381E
03782:  GOTO   381E
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03786:  MOVLW  CC
03788:  MOVWF  FF6
0378A:  MOVLW  06
0378C:  MOVWF  FF7
0378E:  MOVLW  00
03790:  MOVWF  FF8
03792:  CALL   15D4
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03796:  MOVLW  DE
03798:  MOVWF  FF6
0379A:  MOVLW  06
0379C:  MOVWF  FF7
0379E:  MOVLW  00
037A0:  MOVWF  FF8
037A2:  MOVLW  13
037A4:  MOVLB  7
037A6:  MOVWF  xEC
037A8:  MOVLB  0
037AA:  CALL   1604
037AE:  MOVFF  3A1,4A4
037B2:  MOVLW  37
037B4:  MOVLB  4
037B6:  MOVWF  xA5
037B8:  MOVLB  0
037BA:  CALL   1C0A
037BE:  MOVLW  0D
037C0:  MOVLB  8
037C2:  MOVWF  x2F
037C4:  MOVLB  0
037C6:  CALL   1582
037CA:  MOVLW  0A
037CC:  MOVLB  8
037CE:  MOVWF  x2F
037D0:  MOVLB  0
037D2:  CALL   1582
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
037D6:  MOVLW  F6
037D8:  MOVWF  FF6
037DA:  MOVLW  06
037DC:  MOVWF  FF7
037DE:  MOVLW  00
037E0:  MOVWF  FF8
037E2:  MOVLW  13
037E4:  MOVLB  7
037E6:  MOVWF  xEC
037E8:  MOVLB  0
037EA:  CALL   1604
037EE:  MOVFF  3A2,4A4
037F2:  MOVLW  37
037F4:  MOVLB  4
037F6:  MOVWF  xA5
037F8:  MOVLB  0
037FA:  CALL   1C0A
037FE:  MOVLW  0D
03800:  MOVLB  8
03802:  MOVWF  x2F
03804:  MOVLB  0
03806:  CALL   1582
0380A:  MOVLW  0A
0380C:  MOVLB  8
0380E:  MOVWF  x2F
03810:  MOVLB  0
03812:  CALL   1582
....................       return FALSE;
03816:  MOVLW  00
03818:  MOVWF  01
0381A:  GOTO   381E
....................    }
0381E:  GOTO   3A1C (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03822:  MOVLB  3
03824:  MOVF   x9F,W
03826:  SUBLW  0C
03828:  BTFSC  FD8.2
0382A:  BRA    3832
0382C:  MOVLB  0
0382E:  GOTO   3840
03832:  MOVLB  0
....................       return TRUE;
03834:  MOVLW  01
03836:  MOVWF  01
03838:  GOTO   38D8
0383C:  GOTO   38D8
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03840:  MOVLW  0E
03842:  MOVWF  FF6
03844:  MOVLW  07
03846:  MOVWF  FF7
03848:  MOVLW  00
0384A:  MOVWF  FF8
0384C:  CALL   15D4
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03850:  MOVLW  30
03852:  MOVWF  FF6
03854:  MOVLW  07
03856:  MOVWF  FF7
03858:  MOVLW  00
0385A:  MOVWF  FF8
0385C:  MOVLW  13
0385E:  MOVLB  7
03860:  MOVWF  xEC
03862:  MOVLB  0
03864:  CALL   1604
03868:  MOVFF  39F,4A4
0386C:  MOVLW  37
0386E:  MOVLB  4
03870:  MOVWF  xA5
03872:  MOVLB  0
03874:  CALL   1C0A
03878:  MOVLW  0D
0387A:  MOVLB  8
0387C:  MOVWF  x2F
0387E:  MOVLB  0
03880:  CALL   1582
03884:  MOVLW  0A
03886:  MOVLB  8
03888:  MOVWF  x2F
0388A:  MOVLB  0
0388C:  CALL   1582
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
03890:  MOVLW  48
03892:  MOVWF  FF6
03894:  MOVLW  07
03896:  MOVWF  FF7
03898:  MOVLW  00
0389A:  MOVWF  FF8
0389C:  MOVLW  13
0389E:  MOVLB  7
038A0:  MOVWF  xEC
038A2:  MOVLB  0
038A4:  CALL   1604
038A8:  MOVLW  0C
038AA:  MOVLB  4
038AC:  MOVWF  xA4
038AE:  MOVLW  37
038B0:  MOVWF  xA5
038B2:  MOVLB  0
038B4:  CALL   1C0A
038B8:  MOVLW  0D
038BA:  MOVLB  8
038BC:  MOVWF  x2F
038BE:  MOVLB  0
038C0:  CALL   1582
038C4:  MOVLW  0A
038C6:  MOVLB  8
038C8:  MOVWF  x2F
038CA:  MOVLB  0
038CC:  CALL   1582
....................       return FALSE;  
038D0:  MOVLW  00
038D2:  MOVWF  01
038D4:  GOTO   38D8
....................    }
038D8:  GOTO   3A52 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
03C02:  MOVLW  AA
03C04:  MOVLB  3
03C06:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
03C08:  MOVF   x86,W
03C0A:  IORLW  50
03C0C:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
03C0E:  MOVLW  03
03C10:  MOVWF  FEA
03C12:  MOVLW  8C
03C14:  MOVWF  FE9
03C16:  MOVFF  388,FE2
03C1A:  MOVFF  387,FE1
03C1E:  MOVF   x89,W
03C20:  MOVWF  01
03C22:  BTFSS  FD8.2
03C24:  BRA    3C2C
03C26:  MOVLB  0
03C28:  GOTO   3C38
03C2C:  MOVLB  0
03C2E:  MOVFF  FE6,FEE
03C32:  DECFSZ 01,F
03C34:  GOTO   3C2E
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
03C38:  MOVLW  02
03C3A:  MOVLB  3
03C3C:  ADDWF  x89,W
03C3E:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
03C40:  CLRF   03
03C42:  MOVF   x9A,W
03C44:  ADDLW  8A
03C46:  MOVWF  01
03C48:  MOVLW  03
03C4A:  ADDWFC 03,F
03C4C:  MOVF   01,W
03C4E:  MOVWF  x9C
03C50:  MOVFF  03,39D
03C54:  MOVLW  01
03C56:  SUBWF  x9A,W
03C58:  MOVWF  x9E
03C5A:  MOVLW  03
03C5C:  MOVLB  7
03C5E:  MOVWF  xED
03C60:  MOVLW  8B
03C62:  MOVWF  xEC
03C64:  MOVFF  39E,7EE
03C68:  MOVLB  0
03C6A:  CALL   36EE
03C6E:  MOVFF  39D,FEA
03C72:  MOVFF  39C,FE9
03C76:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
03C7A:  MOVLW  01
03C7C:  MOVLB  3
03C7E:  ADDWF  x9A,W
03C80:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
03C82:  MOVLW  03
03C84:  MOVWF  x9D
03C86:  MOVLW  8A
03C88:  MOVWF  x9C
03C8A:  MOVFF  39B,39E
03C8E:  MOVLB  0
03C90:  GOTO   3B4A
03C94:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
03B4A:  MOVLB  3
03B4C:  CLRF   x9F
03B4E:  MOVLB  0
03B50:  MOVLB  3
03B52:  MOVF   x9E,W
03B54:  SUBWF  x9F,W
03B56:  BTFSS  FD8.0
03B58:  BRA    3B60
03B5A:  MOVLB  0
03B5C:  GOTO   3B86
03B60:  MOVLB  0
....................       fputc(data[i], BOSS);
03B62:  MOVLB  3
03B64:  MOVF   x9F,W
03B66:  ADDWF  x9C,W
03B68:  MOVWF  FE9
03B6A:  MOVLW  00
03B6C:  ADDWFC x9D,W
03B6E:  MOVWF  FEA
03B70:  MOVFF  FEF,3A1
03B74:  MOVF   xA1,W
03B76:  MOVLB  0
03B78:  GOTO   3B3A
03B7C:  MOVLB  3
03B7E:  INCF   x9F,F
03B80:  MOVLB  0
03B82:  GOTO   3B50
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
03B86:  MOVLW  60
03B88:  MOVWF  FF6
03B8A:  MOVLW  07
03B8C:  MOVWF  FF7
03B8E:  MOVLW  00
03B90:  MOVWF  FF8
03B92:  CALL   15D4
....................    for(int i = 0; i < data_size; i++)
03B96:  MOVLB  3
03B98:  CLRF   xA0
03B9A:  MOVLB  0
03B9C:  MOVLB  3
03B9E:  MOVF   x9E,W
03BA0:  SUBWF  xA0,W
03BA2:  BTFSS  FD8.0
03BA4:  BRA    3BAC
03BA6:  MOVLB  0
03BA8:  GOTO   3BE6
03BAC:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
03BAE:  MOVLB  3
03BB0:  MOVF   xA0,W
03BB2:  ADDWF  x9C,W
03BB4:  MOVWF  FE9
03BB6:  MOVLW  00
03BB8:  ADDWFC x9D,W
03BBA:  MOVWF  FEA
03BBC:  MOVFF  FEF,3A1
03BC0:  MOVFF  3A1,4A4
03BC4:  MOVLW  37
03BC6:  MOVLB  4
03BC8:  MOVWF  xA5
03BCA:  MOVLB  0
03BCC:  CALL   1C0A
03BD0:  MOVLW  20
03BD2:  MOVLB  8
03BD4:  MOVWF  x2F
03BD6:  MOVLB  0
03BD8:  CALL   1582
03BDC:  MOVLB  3
03BDE:  INCF   xA0,F
03BE0:  MOVLB  0
03BE2:  GOTO   3B9C
....................    fprintf(PC, "\r\n");
03BE6:  MOVLW  0D
03BE8:  MOVLB  8
03BEA:  MOVWF  x2F
03BEC:  MOVLB  0
03BEE:  CALL   1582
03BF2:  MOVLW  0A
03BF4:  MOVLB  8
03BF6:  MOVWF  x2F
03BF8:  MOVLB  0
03BFA:  CALL   1582
03BFE:  GOTO   3C94 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
03C96:  MOVLW  0F
03C98:  MOVLB  3
03C9A:  MOVWF  x86
03C9C:  CLRF   x88
03C9E:  CLRF   x87
03CA0:  CLRF   x89
03CA2:  MOVLB  0
03CA4:  CALL   3C02
03CA8:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
06C48:  MOVLW  03
06C4A:  MOVLB  3
06C4C:  MOVWF  x86
06C4E:  CLRF   x88
06C50:  MOVLW  1D
06C52:  MOVWF  x87
06C54:  MOVLW  04
06C56:  MOVWF  x89
06C58:  MOVLB  0
06C5A:  CALL   3C02
06C5E:  GOTO   6C86 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
01C7A:  MOVLW  74
01C7C:  MOVWF  FF6
01C7E:  MOVLW  08
01C80:  MOVWF  FF7
01C82:  MOVLW  00
01C84:  MOVWF  FF8
01C86:  CALL   15D4
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
01C8A:  BCF    F92.5
01C8C:  BSF    F89.5
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
01C8E:  BCF    F92.2
01C90:  BSF    F89.2
....................     
....................     if (!is_connect(mis_fm)) {
01C92:  MOVFF  E1,82F
01C96:  MOVFF  E0,82E
01C9A:  MOVFF  DF,82D
01C9E:  MOVFF  DE,82C
01CA2:  CALL   1934
01CA6:  MOVF   01,F
01CA8:  BTFSS  FD8.2
01CAA:  GOTO   1CC6
....................         fprintf(PC, "\t[MIS FM] connect error!\r\n");
01CAE:  MOVLW  90
01CB0:  MOVWF  FF6
01CB2:  MOVLW  08
01CB4:  MOVWF  FF7
01CB6:  MOVLW  00
01CB8:  MOVWF  FF8
01CBA:  CALL   15D4
....................         return;
01CBE:  GOTO   2516
....................     }else {
01CC2:  GOTO   1CC6
....................         //fprintf(PC, "\t[MIS FM] is connected\r\n");
....................     }
....................     if (!is_connect(smf)) {
01CC6:  MOVFF  E5,82F
01CCA:  MOVFF  E4,82E
01CCE:  MOVFF  E3,82D
01CD2:  MOVFF  E2,82C
01CD6:  CALL   1934
01CDA:  MOVF   01,F
01CDC:  BTFSS  FD8.2
01CDE:  GOTO   1CF6
....................         fprintf(PC, "\t[SMF] connect error!\r\n");
01CE2:  MOVLW  AC
01CE4:  MOVWF  FF6
01CE6:  MOVLW  08
01CE8:  MOVWF  FF7
01CEA:  MOVLW  00
01CEC:  MOVWF  FF8
01CEE:  CALL   15D4
....................     }else {
01CF2:  GOTO   1CF6
....................         //fprintf(PC, "\t[SMF] is connected\r\n");
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
01CF6:  MOVFF  E1,498
01CFA:  MOVFF  E0,497
01CFE:  MOVFF  DF,496
01D02:  MOVFF  DE,495
01D06:  MOVLB  4
01D08:  CLRF   x9C
01D0A:  CLRF   x9B
01D0C:  CLRF   x9A
01D0E:  CLRF   x99
01D10:  MOVLW  03
01D12:  MOVWF  x9E
01D14:  MOVLW  CF
01D16:  MOVWF  x9D
01D18:  CLRF   xA2
01D1A:  CLRF   xA1
01D1C:  CLRF   xA0
01D1E:  MOVLW  40
01D20:  MOVWF  x9F
01D22:  MOVLB  0
01D24:  CALL   19F2
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
01D28:  MOVLB  4
01D2A:  CLRF   x12
01D2C:  CLRF   x11
01D2E:  CLRF   x10
01D30:  MOVFF  3CF,40F
01D34:  MOVFF  40F,412
01D38:  CLRF   x0F
01D3A:  CLRF   x10
01D3C:  CLRF   x11
01D3E:  CLRF   x17
01D40:  CLRF   x16
01D42:  CLRF   x15
01D44:  MOVFF  3D0,414
01D48:  MOVFF  415,03
01D4C:  MOVFF  414,02
01D50:  CLRF   00
01D52:  CLRF   01
01D54:  MOVF   00,W
01D56:  IORWF  x0F,F
01D58:  MOVF   01,W
01D5A:  IORWF  x10,F
01D5C:  MOVF   02,W
01D5E:  IORWF  x11,F
01D60:  MOVF   03,W
01D62:  IORWF  x12,F
01D64:  CLRF   x17
01D66:  CLRF   x16
01D68:  CLRF   x15
01D6A:  MOVFF  3D1,414
01D6E:  MOVFF  416,03
01D72:  MOVFF  415,02
01D76:  MOVFF  414,01
01D7A:  CLRF   00
01D7C:  MOVF   00,W
01D7E:  IORWF  x0F,F
01D80:  MOVF   01,W
01D82:  IORWF  x10,F
01D84:  MOVF   02,W
01D86:  IORWF  x11,F
01D88:  MOVF   03,W
01D8A:  IORWF  x12,F
01D8C:  MOVFF  3D2,00
01D90:  CLRF   01
01D92:  CLRF   02
01D94:  CLRF   03
01D96:  MOVF   00,W
01D98:  IORWF  x0F,W
01D9A:  MOVLB  3
01D9C:  MOVWF  x56
01D9E:  MOVF   01,W
01DA0:  MOVLB  4
01DA2:  IORWF  x10,W
01DA4:  MOVLB  3
01DA6:  MOVWF  x57
01DA8:  MOVF   02,W
01DAA:  MOVLB  4
01DAC:  IORWF  x11,W
01DAE:  MOVLB  3
01DB0:  MOVWF  x58
01DB2:  MOVF   03,W
01DB4:  MOVLB  4
01DB6:  IORWF  x12,W
01DB8:  MOVLB  3
01DBA:  MOVWF  x59
....................     smf_piclog_loop_counter = readdata[4];
01DBC:  MOVFF  3D3,35A
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
01DC0:  MOVLB  4
01DC2:  CLRF   x12
01DC4:  CLRF   x11
01DC6:  CLRF   x10
01DC8:  MOVFF  3D4,40F
01DCC:  MOVFF  40F,412
01DD0:  CLRF   x0F
01DD2:  CLRF   x10
01DD4:  CLRF   x11
01DD6:  CLRF   x17
01DD8:  CLRF   x16
01DDA:  CLRF   x15
01DDC:  MOVFF  3D5,414
01DE0:  MOVFF  415,03
01DE4:  MOVFF  414,02
01DE8:  CLRF   00
01DEA:  CLRF   01
01DEC:  MOVF   00,W
01DEE:  IORWF  x0F,F
01DF0:  MOVF   01,W
01DF2:  IORWF  x10,F
01DF4:  MOVF   02,W
01DF6:  IORWF  x11,F
01DF8:  MOVF   03,W
01DFA:  IORWF  x12,F
01DFC:  CLRF   x17
01DFE:  CLRF   x16
01E00:  CLRF   x15
01E02:  MOVFF  3D6,414
01E06:  MOVFF  416,03
01E0A:  MOVFF  415,02
01E0E:  MOVFF  414,01
01E12:  CLRF   00
01E14:  MOVF   00,W
01E16:  IORWF  x0F,F
01E18:  MOVF   01,W
01E1A:  IORWF  x10,F
01E1C:  MOVF   02,W
01E1E:  IORWF  x11,F
01E20:  MOVF   03,W
01E22:  IORWF  x12,F
01E24:  MOVFF  3D7,00
01E28:  CLRF   01
01E2A:  CLRF   02
01E2C:  CLRF   03
01E2E:  MOVF   00,W
01E30:  IORWF  x0F,W
01E32:  MOVLB  3
01E34:  MOVWF  x5B
01E36:  MOVF   01,W
01E38:  MOVLB  4
01E3A:  IORWF  x10,W
01E3C:  MOVLB  3
01E3E:  MOVWF  x5C
01E40:  MOVF   02,W
01E42:  MOVLB  4
01E44:  IORWF  x11,W
01E46:  MOVLB  3
01E48:  MOVWF  x5D
01E4A:  MOVF   03,W
01E4C:  MOVLB  4
01E4E:  IORWF  x12,W
01E50:  MOVLB  3
01E52:  MOVWF  x5E
....................     smf_meas_loop_counter = readdata[9];
01E54:  MOVFF  3D8,35F
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
01E58:  MOVLB  4
01E5A:  CLRF   x12
01E5C:  CLRF   x11
01E5E:  CLRF   x10
01E60:  MOVFF  3D9,40F
01E64:  MOVFF  40F,412
01E68:  CLRF   x0F
01E6A:  CLRF   x10
01E6C:  CLRF   x11
01E6E:  CLRF   x17
01E70:  CLRF   x16
01E72:  CLRF   x15
01E74:  MOVFF  3DA,414
01E78:  MOVFF  415,03
01E7C:  MOVFF  414,02
01E80:  CLRF   00
01E82:  CLRF   01
01E84:  MOVF   00,W
01E86:  IORWF  x0F,F
01E88:  MOVF   01,W
01E8A:  IORWF  x10,F
01E8C:  MOVF   02,W
01E8E:  IORWF  x11,F
01E90:  MOVF   03,W
01E92:  IORWF  x12,F
01E94:  CLRF   x17
01E96:  CLRF   x16
01E98:  CLRF   x15
01E9A:  MOVFF  3DB,414
01E9E:  MOVFF  416,03
01EA2:  MOVFF  415,02
01EA6:  MOVFF  414,01
01EAA:  CLRF   00
01EAC:  MOVF   00,W
01EAE:  IORWF  x0F,F
01EB0:  MOVF   01,W
01EB2:  IORWF  x10,F
01EB4:  MOVF   02,W
01EB6:  IORWF  x11,F
01EB8:  MOVF   03,W
01EBA:  IORWF  x12,F
01EBC:  MOVFF  3DC,00
01EC0:  CLRF   01
01EC2:  CLRF   02
01EC4:  CLRF   03
01EC6:  MOVF   00,W
01EC8:  IORWF  x0F,W
01ECA:  MOVLB  3
01ECC:  MOVWF  x60
01ECE:  MOVF   01,W
01ED0:  MOVLB  4
01ED2:  IORWF  x10,W
01ED4:  MOVLB  3
01ED6:  MOVWF  x61
01ED8:  MOVF   02,W
01EDA:  MOVLB  4
01EDC:  IORWF  x11,W
01EDE:  MOVLB  3
01EE0:  MOVWF  x62
01EE2:  MOVF   03,W
01EE4:  MOVLB  4
01EE6:  IORWF  x12,W
01EE8:  MOVLB  3
01EEA:  MOVWF  x63
....................     misf_piclog_loop_counter = readdata[14];
01EEC:  MOVFF  3DD,364
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
01EF0:  MOVLB  4
01EF2:  CLRF   x12
01EF4:  CLRF   x11
01EF6:  CLRF   x10
01EF8:  MOVFF  3DE,40F
01EFC:  MOVFF  40F,412
01F00:  CLRF   x0F
01F02:  CLRF   x10
01F04:  CLRF   x11
01F06:  CLRF   x17
01F08:  CLRF   x16
01F0A:  CLRF   x15
01F0C:  MOVFF  3DF,414
01F10:  MOVFF  415,03
01F14:  MOVFF  414,02
01F18:  CLRF   00
01F1A:  CLRF   01
01F1C:  MOVF   00,W
01F1E:  IORWF  x0F,F
01F20:  MOVF   01,W
01F22:  IORWF  x10,F
01F24:  MOVF   02,W
01F26:  IORWF  x11,F
01F28:  MOVF   03,W
01F2A:  IORWF  x12,F
01F2C:  CLRF   x17
01F2E:  CLRF   x16
01F30:  CLRF   x15
01F32:  MOVFF  3E0,414
01F36:  MOVFF  416,03
01F3A:  MOVFF  415,02
01F3E:  MOVFF  414,01
01F42:  CLRF   00
01F44:  MOVF   00,W
01F46:  IORWF  x0F,F
01F48:  MOVF   01,W
01F4A:  IORWF  x10,F
01F4C:  MOVF   02,W
01F4E:  IORWF  x11,F
01F50:  MOVF   03,W
01F52:  IORWF  x12,F
01F54:  MOVFF  3E1,00
01F58:  CLRF   01
01F5A:  CLRF   02
01F5C:  CLRF   03
01F5E:  MOVF   00,W
01F60:  IORWF  x0F,W
01F62:  MOVLB  3
01F64:  MOVWF  x65
01F66:  MOVF   01,W
01F68:  MOVLB  4
01F6A:  IORWF  x10,W
01F6C:  MOVLB  3
01F6E:  MOVWF  x66
01F70:  MOVF   02,W
01F72:  MOVLB  4
01F74:  IORWF  x11,W
01F76:  MOVLB  3
01F78:  MOVWF  x67
01F7A:  MOVF   03,W
01F7C:  MOVLB  4
01F7E:  IORWF  x12,W
01F80:  MOVLB  3
01F82:  MOVWF  x68
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
01F84:  MOVLB  4
01F86:  CLRF   x12
01F88:  CLRF   x11
01F8A:  CLRF   x10
01F8C:  MOVFF  3E2,40F
01F90:  MOVFF  40F,412
01F94:  CLRF   x0F
01F96:  CLRF   x10
01F98:  CLRF   x11
01F9A:  CLRF   x17
01F9C:  CLRF   x16
01F9E:  CLRF   x15
01FA0:  MOVFF  3E3,414
01FA4:  MOVFF  415,03
01FA8:  MOVFF  414,02
01FAC:  CLRF   00
01FAE:  CLRF   01
01FB0:  MOVF   00,W
01FB2:  IORWF  x0F,F
01FB4:  MOVF   01,W
01FB6:  IORWF  x10,F
01FB8:  MOVF   02,W
01FBA:  IORWF  x11,F
01FBC:  MOVF   03,W
01FBE:  IORWF  x12,F
01FC0:  CLRF   x17
01FC2:  CLRF   x16
01FC4:  CLRF   x15
01FC6:  MOVFF  3E4,414
01FCA:  MOVFF  416,03
01FCE:  MOVFF  415,02
01FD2:  MOVFF  414,01
01FD6:  CLRF   00
01FD8:  MOVF   00,W
01FDA:  IORWF  x0F,F
01FDC:  MOVF   01,W
01FDE:  IORWF  x10,F
01FE0:  MOVF   02,W
01FE2:  IORWF  x11,F
01FE4:  MOVF   03,W
01FE6:  IORWF  x12,F
01FE8:  MOVFF  3E5,00
01FEC:  CLRF   01
01FEE:  CLRF   02
01FF0:  CLRF   03
01FF2:  MOVF   00,W
01FF4:  IORWF  x0F,W
01FF6:  MOVLB  3
01FF8:  MOVWF  x69
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
01FFA:  MOVLB  4
01FFC:  CLRF   x12
01FFE:  CLRF   x11
02000:  CLRF   x10
02002:  MOVFF  3E6,40F
02006:  MOVFF  40F,412
0200A:  CLRF   x0F
0200C:  CLRF   x10
0200E:  CLRF   x11
02010:  CLRF   x17
02012:  CLRF   x16
02014:  CLRF   x15
02016:  MOVFF  3E7,414
0201A:  MOVFF  415,03
0201E:  MOVFF  414,02
02022:  CLRF   00
02024:  CLRF   01
02026:  MOVF   00,W
02028:  IORWF  x0F,F
0202A:  MOVF   01,W
0202C:  IORWF  x10,F
0202E:  MOVF   02,W
02030:  IORWF  x11,F
02032:  MOVF   03,W
02034:  IORWF  x12,F
02036:  CLRF   x17
02038:  CLRF   x16
0203A:  CLRF   x15
0203C:  MOVFF  3E8,414
02040:  MOVFF  416,03
02044:  MOVFF  415,02
02048:  MOVFF  414,01
0204C:  CLRF   00
0204E:  MOVF   00,W
02050:  IORWF  x0F,F
02052:  MOVF   01,W
02054:  IORWF  x10,F
02056:  MOVF   02,W
02058:  IORWF  x11,F
0205A:  MOVF   03,W
0205C:  IORWF  x12,F
0205E:  MOVFF  3E9,00
02062:  CLRF   01
02064:  CLRF   02
02066:  CLRF   03
02068:  MOVF   00,W
0206A:  IORWF  x0F,W
0206C:  MOVLB  3
0206E:  MOVWF  x6A
02070:  MOVF   01,W
02072:  MOVLB  4
02074:  IORWF  x10,W
02076:  MOVLB  3
02078:  MOVWF  x6B
0207A:  MOVF   02,W
0207C:  MOVLB  4
0207E:  IORWF  x11,W
02080:  MOVLB  3
02082:  MOVWF  x6C
02084:  MOVF   03,W
02086:  MOVLB  4
02088:  IORWF  x12,W
0208A:  MOVLB  3
0208C:  MOVWF  x6D
....................     misf_meas_loop_counter = readdata[27];
0208E:  MOVFF  3EA,36E
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
02092:  MOVLB  4
02094:  CLRF   x12
02096:  CLRF   x11
02098:  CLRF   x10
0209A:  MOVFF  3EB,40F
0209E:  MOVFF  40F,412
020A2:  CLRF   x0F
020A4:  CLRF   x10
020A6:  CLRF   x11
020A8:  CLRF   x17
020AA:  CLRF   x16
020AC:  CLRF   x15
020AE:  MOVFF  3EC,414
020B2:  MOVFF  415,03
020B6:  MOVFF  414,02
020BA:  CLRF   00
020BC:  CLRF   01
020BE:  MOVF   00,W
020C0:  IORWF  x0F,F
020C2:  MOVF   01,W
020C4:  IORWF  x10,F
020C6:  MOVF   02,W
020C8:  IORWF  x11,F
020CA:  MOVF   03,W
020CC:  IORWF  x12,F
020CE:  CLRF   x17
020D0:  CLRF   x16
020D2:  CLRF   x15
020D4:  MOVFF  3ED,414
020D8:  MOVFF  416,03
020DC:  MOVFF  415,02
020E0:  MOVFF  414,01
020E4:  CLRF   00
020E6:  MOVF   00,W
020E8:  IORWF  x0F,F
020EA:  MOVF   01,W
020EC:  IORWF  x10,F
020EE:  MOVF   02,W
020F0:  IORWF  x11,F
020F2:  MOVF   03,W
020F4:  IORWF  x12,F
020F6:  MOVFF  3EE,00
020FA:  CLRF   01
020FC:  CLRF   02
020FE:  CLRF   03
02100:  MOVF   00,W
02102:  IORWF  x0F,W
02104:  MOVLB  3
02106:  MOVWF  x6F
02108:  MOVF   01,W
0210A:  MOVLB  4
0210C:  IORWF  x10,W
0210E:  MOVLB  3
02110:  MOVWF  x70
02112:  MOVF   02,W
02114:  MOVLB  4
02116:  IORWF  x11,W
02118:  MOVLB  3
0211A:  MOVWF  x71
0211C:  MOVF   03,W
0211E:  MOVLB  4
02120:  IORWF  x12,W
02122:  MOVLB  3
02124:  MOVWF  x72
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02126:  MOVLW  C4
02128:  MOVWF  FF6
0212A:  MOVLW  08
0212C:  MOVWF  FF7
0212E:  MOVLW  00
02130:  MOVWF  FF8
02132:  MOVLW  28
02134:  MOVLB  7
02136:  MOVWF  xEC
02138:  MOVLB  0
0213A:  CALL   1604
0213E:  MOVFF  359,4A4
02142:  MOVLW  37
02144:  MOVLB  4
02146:  MOVWF  xA5
02148:  MOVLB  0
0214A:  CALL   1C0A
0214E:  MOVFF  358,4A4
02152:  MOVLW  37
02154:  MOVLB  4
02156:  MOVWF  xA5
02158:  MOVLB  0
0215A:  CALL   1C0A
0215E:  MOVFF  357,4A4
02162:  MOVLW  37
02164:  MOVLB  4
02166:  MOVWF  xA5
02168:  MOVLB  0
0216A:  CALL   1C0A
0216E:  MOVFF  356,4A4
02172:  MOVLW  37
02174:  MOVLB  4
02176:  MOVWF  xA5
02178:  MOVLB  0
0217A:  CALL   1C0A
0217E:  MOVLW  0D
02180:  MOVLB  8
02182:  MOVWF  x2F
02184:  MOVLB  0
02186:  CALL   1582
0218A:  MOVLW  0A
0218C:  MOVLB  8
0218E:  MOVWF  x2F
02190:  MOVLB  0
02192:  CALL   1582
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02196:  MOVLW  F4
02198:  MOVWF  FF6
0219A:  MOVLW  08
0219C:  MOVWF  FF7
0219E:  MOVLW  00
021A0:  MOVWF  FF8
021A2:  MOVLW  28
021A4:  MOVLB  7
021A6:  MOVWF  xEC
021A8:  MOVLB  0
021AA:  CALL   1604
021AE:  MOVFF  35A,4A4
021B2:  MOVLW  37
021B4:  MOVLB  4
021B6:  MOVWF  xA5
021B8:  MOVLB  0
021BA:  CALL   1C0A
021BE:  MOVLW  0D
021C0:  MOVLB  8
021C2:  MOVWF  x2F
021C4:  MOVLB  0
021C6:  CALL   1582
021CA:  MOVLW  0A
021CC:  MOVLB  8
021CE:  MOVWF  x2F
021D0:  MOVLB  0
021D2:  CALL   1582
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
021D6:  MOVLW  24
021D8:  MOVWF  FF6
021DA:  MOVLW  09
021DC:  MOVWF  FF7
021DE:  MOVLW  00
021E0:  MOVWF  FF8
021E2:  MOVLW  28
021E4:  MOVLB  7
021E6:  MOVWF  xEC
021E8:  MOVLB  0
021EA:  CALL   1604
021EE:  MOVFF  35E,4A4
021F2:  MOVLW  37
021F4:  MOVLB  4
021F6:  MOVWF  xA5
021F8:  MOVLB  0
021FA:  CALL   1C0A
021FE:  MOVFF  35D,4A4
02202:  MOVLW  37
02204:  MOVLB  4
02206:  MOVWF  xA5
02208:  MOVLB  0
0220A:  CALL   1C0A
0220E:  MOVFF  35C,4A4
02212:  MOVLW  37
02214:  MOVLB  4
02216:  MOVWF  xA5
02218:  MOVLB  0
0221A:  CALL   1C0A
0221E:  MOVFF  35B,4A4
02222:  MOVLW  37
02224:  MOVLB  4
02226:  MOVWF  xA5
02228:  MOVLB  0
0222A:  CALL   1C0A
0222E:  MOVLW  0D
02230:  MOVLB  8
02232:  MOVWF  x2F
02234:  MOVLB  0
02236:  CALL   1582
0223A:  MOVLW  0A
0223C:  MOVLB  8
0223E:  MOVWF  x2F
02240:  MOVLB  0
02242:  CALL   1582
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02246:  MOVLW  54
02248:  MOVWF  FF6
0224A:  MOVLW  09
0224C:  MOVWF  FF7
0224E:  MOVLW  00
02250:  MOVWF  FF8
02252:  MOVLW  28
02254:  MOVLB  7
02256:  MOVWF  xEC
02258:  MOVLB  0
0225A:  CALL   1604
0225E:  MOVFF  35F,4A4
02262:  MOVLW  37
02264:  MOVLB  4
02266:  MOVWF  xA5
02268:  MOVLB  0
0226A:  CALL   1C0A
0226E:  MOVLW  0D
02270:  MOVLB  8
02272:  MOVWF  x2F
02274:  MOVLB  0
02276:  CALL   1582
0227A:  MOVLW  0A
0227C:  MOVLB  8
0227E:  MOVWF  x2F
02280:  MOVLB  0
02282:  CALL   1582
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02286:  MOVLW  84
02288:  MOVWF  FF6
0228A:  MOVLW  09
0228C:  MOVWF  FF7
0228E:  MOVLW  00
02290:  MOVWF  FF8
02292:  MOVLW  28
02294:  MOVLB  7
02296:  MOVWF  xEC
02298:  MOVLB  0
0229A:  CALL   1604
0229E:  MOVFF  363,4A4
022A2:  MOVLW  37
022A4:  MOVLB  4
022A6:  MOVWF  xA5
022A8:  MOVLB  0
022AA:  CALL   1C0A
022AE:  MOVFF  362,4A4
022B2:  MOVLW  37
022B4:  MOVLB  4
022B6:  MOVWF  xA5
022B8:  MOVLB  0
022BA:  CALL   1C0A
022BE:  MOVFF  361,4A4
022C2:  MOVLW  37
022C4:  MOVLB  4
022C6:  MOVWF  xA5
022C8:  MOVLB  0
022CA:  CALL   1C0A
022CE:  MOVFF  360,4A4
022D2:  MOVLW  37
022D4:  MOVLB  4
022D6:  MOVWF  xA5
022D8:  MOVLB  0
022DA:  CALL   1C0A
022DE:  MOVLW  0D
022E0:  MOVLB  8
022E2:  MOVWF  x2F
022E4:  MOVLB  0
022E6:  CALL   1582
022EA:  MOVLW  0A
022EC:  MOVLB  8
022EE:  MOVWF  x2F
022F0:  MOVLB  0
022F2:  CALL   1582
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
022F6:  MOVLW  B4
022F8:  MOVWF  FF6
022FA:  MOVLW  09
022FC:  MOVWF  FF7
022FE:  MOVLW  00
02300:  MOVWF  FF8
02302:  MOVLW  28
02304:  MOVLB  7
02306:  MOVWF  xEC
02308:  MOVLB  0
0230A:  CALL   1604
0230E:  MOVFF  368,4A4
02312:  MOVLW  37
02314:  MOVLB  4
02316:  MOVWF  xA5
02318:  MOVLB  0
0231A:  CALL   1C0A
0231E:  MOVFF  367,4A4
02322:  MOVLW  37
02324:  MOVLB  4
02326:  MOVWF  xA5
02328:  MOVLB  0
0232A:  CALL   1C0A
0232E:  MOVFF  366,4A4
02332:  MOVLW  37
02334:  MOVLB  4
02336:  MOVWF  xA5
02338:  MOVLB  0
0233A:  CALL   1C0A
0233E:  MOVFF  365,4A4
02342:  MOVLW  37
02344:  MOVLB  4
02346:  MOVWF  xA5
02348:  MOVLB  0
0234A:  CALL   1C0A
0234E:  MOVLW  0D
02350:  MOVLB  8
02352:  MOVWF  x2F
02354:  MOVLB  0
02356:  CALL   1582
0235A:  MOVLW  0A
0235C:  MOVLB  8
0235E:  MOVWF  x2F
02360:  MOVLB  0
02362:  CALL   1582
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02366:  MOVLW  E4
02368:  MOVWF  FF6
0236A:  MOVLW  09
0236C:  MOVWF  FF7
0236E:  MOVLW  00
02370:  MOVWF  FF8
02372:  MOVLW  28
02374:  MOVLB  7
02376:  MOVWF  xEC
02378:  MOVLB  0
0237A:  CALL   1604
0237E:  MOVFF  364,4A4
02382:  MOVLW  37
02384:  MOVLB  4
02386:  MOVWF  xA5
02388:  MOVLB  0
0238A:  CALL   1C0A
0238E:  MOVLW  0D
02390:  MOVLB  8
02392:  MOVWF  x2F
02394:  MOVLB  0
02396:  CALL   1582
0239A:  MOVLW  0A
0239C:  MOVLB  8
0239E:  MOVWF  x2F
023A0:  MOVLB  0
023A2:  CALL   1582
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
023A6:  MOVLW  14
023A8:  MOVWF  FF6
023AA:  MOVLW  0A
023AC:  MOVWF  FF7
023AE:  MOVLW  00
023B0:  MOVWF  FF8
023B2:  MOVLW  28
023B4:  MOVLB  7
023B6:  MOVWF  xEC
023B8:  MOVLB  0
023BA:  CALL   1604
023BE:  MOVFF  369,4A4
023C2:  MOVLW  37
023C4:  MOVLB  4
023C6:  MOVWF  xA5
023C8:  MOVLB  0
023CA:  CALL   1C0A
023CE:  MOVLW  0D
023D0:  MOVLB  8
023D2:  MOVWF  x2F
023D4:  MOVLB  0
023D6:  CALL   1582
023DA:  MOVLW  0A
023DC:  MOVLB  8
023DE:  MOVWF  x2F
023E0:  MOVLB  0
023E2:  CALL   1582
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
023E6:  MOVLW  44
023E8:  MOVWF  FF6
023EA:  MOVLW  0A
023EC:  MOVWF  FF7
023EE:  MOVLW  00
023F0:  MOVWF  FF8
023F2:  MOVLW  28
023F4:  MOVLB  7
023F6:  MOVWF  xEC
023F8:  MOVLB  0
023FA:  CALL   1604
023FE:  MOVFF  36D,4A4
02402:  MOVLW  37
02404:  MOVLB  4
02406:  MOVWF  xA5
02408:  MOVLB  0
0240A:  CALL   1C0A
0240E:  MOVFF  36C,4A4
02412:  MOVLW  37
02414:  MOVLB  4
02416:  MOVWF  xA5
02418:  MOVLB  0
0241A:  CALL   1C0A
0241E:  MOVFF  36B,4A4
02422:  MOVLW  37
02424:  MOVLB  4
02426:  MOVWF  xA5
02428:  MOVLB  0
0242A:  CALL   1C0A
0242E:  MOVFF  36A,4A4
02432:  MOVLW  37
02434:  MOVLB  4
02436:  MOVWF  xA5
02438:  MOVLB  0
0243A:  CALL   1C0A
0243E:  MOVLW  0D
02440:  MOVLB  8
02442:  MOVWF  x2F
02444:  MOVLB  0
02446:  CALL   1582
0244A:  MOVLW  0A
0244C:  MOVLB  8
0244E:  MOVWF  x2F
02450:  MOVLB  0
02452:  CALL   1582
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02456:  MOVLW  74
02458:  MOVWF  FF6
0245A:  MOVLW  0A
0245C:  MOVWF  FF7
0245E:  MOVLW  00
02460:  MOVWF  FF8
02462:  MOVLW  28
02464:  MOVLB  7
02466:  MOVWF  xEC
02468:  MOVLB  0
0246A:  CALL   1604
0246E:  MOVFF  372,4A4
02472:  MOVLW  37
02474:  MOVLB  4
02476:  MOVWF  xA5
02478:  MOVLB  0
0247A:  CALL   1C0A
0247E:  MOVFF  371,4A4
02482:  MOVLW  37
02484:  MOVLB  4
02486:  MOVWF  xA5
02488:  MOVLB  0
0248A:  CALL   1C0A
0248E:  MOVFF  370,4A4
02492:  MOVLW  37
02494:  MOVLB  4
02496:  MOVWF  xA5
02498:  MOVLB  0
0249A:  CALL   1C0A
0249E:  MOVFF  36F,4A4
024A2:  MOVLW  37
024A4:  MOVLB  4
024A6:  MOVWF  xA5
024A8:  MOVLB  0
024AA:  CALL   1C0A
024AE:  MOVLW  0D
024B0:  MOVLB  8
024B2:  MOVWF  x2F
024B4:  MOVLB  0
024B6:  CALL   1582
024BA:  MOVLW  0A
024BC:  MOVLB  8
024BE:  MOVWF  x2F
024C0:  MOVLB  0
024C2:  CALL   1582
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
024C6:  MOVLW  A4
024C8:  MOVWF  FF6
024CA:  MOVLW  0A
024CC:  MOVWF  FF7
024CE:  MOVLW  00
024D0:  MOVWF  FF8
024D2:  MOVLW  28
024D4:  MOVLB  7
024D6:  MOVWF  xEC
024D8:  MOVLB  0
024DA:  CALL   1604
024DE:  MOVFF  36E,4A4
024E2:  MOVLW  37
024E4:  MOVLB  4
024E6:  MOVWF  xA5
024E8:  MOVLB  0
024EA:  CALL   1C0A
024EE:  MOVLW  0D
024F0:  MOVLB  8
024F2:  MOVWF  x2F
024F4:  MOVLB  0
024F6:  CALL   1582
024FA:  MOVLW  0A
024FC:  MOVLB  8
024FE:  MOVWF  x2F
02500:  MOVLB  0
02502:  CALL   1582
....................     fprintf(PC, "\tComplete\r\n");
02506:  MOVLW  D4
02508:  MOVWF  FF6
0250A:  MOVLW  0A
0250C:  MOVWF  FF7
0250E:  MOVLW  00
02510:  MOVWF  FF8
02512:  CALL   15D4
02516:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
030DC:  MOVLB  7
030DE:  CLRF   xEC
030E0:  CLRF   xED
030E2:  CLRF   xEE
030E4:  CLRF   xEF
030E6:  CLRF   xF0
030E8:  CLRF   xF1
030EA:  CLRF   xF2
030EC:  CLRF   xF3
030EE:  CLRF   xF4
030F0:  CLRF   xF5
030F2:  CLRF   xF6
030F4:  CLRF   xF7
030F6:  CLRF   xF8
030F8:  CLRF   xF9
030FA:  CLRF   xFA
030FC:  CLRF   xFB
030FE:  CLRF   xFC
03100:  CLRF   xFD
03102:  CLRF   xFE
03104:  CLRF   xFF
03106:  MOVLB  8
03108:  CLRF   x00
0310A:  CLRF   x01
0310C:  CLRF   x02
0310E:  CLRF   x03
03110:  CLRF   x04
03112:  CLRF   x05
03114:  CLRF   x06
03116:  CLRF   x07
03118:  CLRF   x08
0311A:  CLRF   x09
0311C:  CLRF   x0A
0311E:  CLRF   x0B
03120:  CLRF   x0C
03122:  CLRF   x0D
03124:  CLRF   x0E
03126:  CLRF   x0F
03128:  CLRF   x10
0312A:  CLRF   x11
0312C:  CLRF   x12
0312E:  CLRF   x13
03130:  CLRF   x14
03132:  CLRF   x15
03134:  CLRF   x16
03136:  CLRF   x17
03138:  CLRF   x18
0313A:  CLRF   x19
0313C:  CLRF   x1A
0313E:  CLRF   x1B
03140:  CLRF   x1C
03142:  CLRF   x1D
03144:  CLRF   x1E
03146:  CLRF   x1F
03148:  CLRF   x20
0314A:  CLRF   x21
0314C:  CLRF   x22
0314E:  CLRF   x23
03150:  CLRF   x24
03152:  CLRF   x25
03154:  CLRF   x26
03156:  CLRF   x27
03158:  CLRF   x28
0315A:  CLRF   x29
0315C:  CLRF   x2A
0315E:  CLRF   x2B
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
03160:  MOVFF  359,82D
03164:  CLRF   x2E
03166:  CLRF   x2F
03168:  CLRF   x30
0316A:  MOVF   x2D,W
0316C:  MOVLB  7
0316E:  MOVWF  xEC
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
03170:  MOVFF  358,82D
03174:  MOVFF  359,82E
03178:  MOVLB  8
0317A:  CLRF   x2F
0317C:  CLRF   x30
0317E:  MOVF   x2D,W
03180:  MOVLB  7
03182:  MOVWF  xED
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03184:  MOVFF  357,82D
03188:  MOVFF  358,82E
0318C:  MOVFF  359,82F
03190:  MOVLB  8
03192:  CLRF   x30
03194:  MOVF   x2D,W
03196:  MOVLB  7
03198:  MOVWF  xEE
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
0319A:  MOVLB  3
0319C:  MOVF   x56,W
0319E:  MOVLB  7
031A0:  MOVWF  xEF
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
031A2:  MOVFF  35A,7F0
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
031A6:  MOVFF  35E,82D
031AA:  MOVLB  8
031AC:  CLRF   x2E
031AE:  CLRF   x2F
031B0:  CLRF   x30
031B2:  MOVF   x2D,W
031B4:  MOVLB  7
031B6:  MOVWF  xF1
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
031B8:  MOVFF  35D,82D
031BC:  MOVFF  35E,82E
031C0:  MOVLB  8
031C2:  CLRF   x2F
031C4:  CLRF   x30
031C6:  MOVF   x2D,W
031C8:  MOVLB  7
031CA:  MOVWF  xF2
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
031CC:  MOVFF  35C,82D
031D0:  MOVFF  35D,82E
031D4:  MOVFF  35E,82F
031D8:  MOVLB  8
031DA:  CLRF   x30
031DC:  MOVF   x2D,W
031DE:  MOVLB  7
031E0:  MOVWF  xF3
....................     writedata[8] = smf_meas_use_counter & 0xFF;
031E2:  MOVLB  3
031E4:  MOVF   x5B,W
031E6:  MOVLB  7
031E8:  MOVWF  xF4
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
031EA:  MOVFF  35F,7F5
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
031EE:  MOVFF  363,82D
031F2:  MOVLB  8
031F4:  CLRF   x2E
031F6:  CLRF   x2F
031F8:  CLRF   x30
031FA:  MOVF   x2D,W
031FC:  MOVLB  7
031FE:  MOVWF  xF6
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03200:  MOVFF  362,82D
03204:  MOVFF  363,82E
03208:  MOVLB  8
0320A:  CLRF   x2F
0320C:  CLRF   x30
0320E:  MOVF   x2D,W
03210:  MOVLB  7
03212:  MOVWF  xF7
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03214:  MOVFF  361,82D
03218:  MOVFF  362,82E
0321C:  MOVFF  363,82F
03220:  MOVLB  8
03222:  CLRF   x30
03224:  MOVF   x2D,W
03226:  MOVLB  7
03228:  MOVWF  xF8
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
0322A:  MOVLB  3
0322C:  MOVF   x60,W
0322E:  MOVLB  7
03230:  MOVWF  xF9
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03232:  MOVFF  364,7FA
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03236:  MOVFF  368,82D
0323A:  MOVLB  8
0323C:  CLRF   x2E
0323E:  CLRF   x2F
03240:  CLRF   x30
03242:  MOVF   x2D,W
03244:  MOVLB  7
03246:  MOVWF  xFB
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03248:  MOVFF  367,82D
0324C:  MOVFF  368,82E
03250:  MOVLB  8
03252:  CLRF   x2F
03254:  CLRF   x30
03256:  MOVF   x2D,W
03258:  MOVLB  7
0325A:  MOVWF  xFC
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
0325C:  MOVFF  366,82D
03260:  MOVFF  367,82E
03264:  MOVFF  368,82F
03268:  MOVLB  8
0326A:  CLRF   x30
0326C:  MOVF   x2D,W
0326E:  MOVLB  7
03270:  MOVWF  xFD
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03272:  MOVLB  3
03274:  MOVF   x65,W
03276:  MOVLB  7
03278:  MOVWF  xFE
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
0327A:  MOVLW  00
0327C:  MOVWF  xFF
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
0327E:  MOVLW  00
03280:  MOVLB  8
03282:  MOVWF  x00
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03284:  MOVLW  00
03286:  MOVWF  x01
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03288:  MOVLB  3
0328A:  MOVF   x69,W
0328C:  MOVLB  8
0328E:  MOVWF  x02
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03290:  MOVFF  36D,82D
03294:  CLRF   x2E
03296:  CLRF   x2F
03298:  CLRF   x30
0329A:  MOVF   x2D,W
0329C:  MOVWF  x03
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
0329E:  MOVFF  36C,82D
032A2:  MOVFF  36D,82E
032A6:  CLRF   x2F
032A8:  CLRF   x30
032AA:  MOVF   x2D,W
032AC:  MOVWF  x04
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
032AE:  MOVFF  36B,82D
032B2:  MOVFF  36C,82E
032B6:  MOVFF  36D,82F
032BA:  CLRF   x30
032BC:  MOVF   x2D,W
032BE:  MOVWF  x05
....................     writedata[26] = misf_meas_use_counter & 0xFF;
032C0:  MOVLB  3
032C2:  MOVF   x6A,W
032C4:  MOVLB  8
032C6:  MOVWF  x06
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
032C8:  MOVFF  36E,807
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
032CC:  MOVFF  372,82D
032D0:  CLRF   x2E
032D2:  CLRF   x2F
032D4:  CLRF   x30
032D6:  MOVF   x2D,W
032D8:  MOVWF  x08
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
032DA:  MOVFF  371,82D
032DE:  MOVFF  372,82E
032E2:  CLRF   x2F
032E4:  CLRF   x30
032E6:  MOVF   x2D,W
032E8:  MOVWF  x09
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
032EA:  MOVFF  370,82D
032EE:  MOVFF  371,82E
032F2:  MOVFF  372,82F
032F6:  CLRF   x30
032F8:  MOVF   x2D,W
032FA:  MOVWF  x0A
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
032FC:  MOVLB  3
032FE:  MOVF   x6F,W
03300:  MOVLB  8
03302:  MOVWF  x0B
.................... 
....................     if (!is_connect(mis_fm)) {
03304:  MOVFF  E1,82F
03308:  MOVFF  E0,82E
0330C:  MOVFF  DF,82D
03310:  MOVFF  DE,82C
03314:  MOVLB  0
03316:  CALL   1934
0331A:  MOVF   01,F
0331C:  BTFSS  FD8.2
0331E:  GOTO   3336
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03322:  MOVLW  E0
03324:  MOVWF  FF6
03326:  MOVLW  0A
03328:  MOVWF  FF7
0332A:  MOVLW  00
0332C:  MOVWF  FF8
0332E:  CALL   15D4
....................         return;
03332:  GOTO   3394
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03336:  MOVFF  E1,82F
0333A:  MOVFF  E0,82E
0333E:  MOVFF  DF,82D
03342:  MOVFF  DE,82C
03346:  MOVLB  8
03348:  CLRF   x33
0334A:  CLRF   x32
0334C:  CLRF   x31
0334E:  CLRF   x30
03350:  MOVLB  0
03352:  CALL   2D84
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03356:  MOVFF  E1,82F
0335A:  MOVFF  E0,82E
0335E:  MOVFF  DF,82D
03362:  MOVFF  DE,82C
03366:  MOVLB  8
03368:  CLRF   x33
0336A:  CLRF   x32
0336C:  CLRF   x31
0336E:  CLRF   x30
03370:  MOVLW  07
03372:  MOVWF  x35
03374:  MOVLW  EC
03376:  MOVWF  x34
03378:  CLRF   x37
0337A:  MOVLW  40
0337C:  MOVWF  x36
0337E:  MOVLB  0
03380:  CALL   2A00
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
03384:  MOVLW  02
03386:  MOVWF  FF6
03388:  MOVLW  0B
0338A:  MOVWF  FF7
0338C:  MOVLW  00
0338E:  MOVWF  FF8
03390:  CALL   15D4
03394:  RETURN 0
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //////////// Function to execute a mission based on the command content
.................... void mcp4901_1_write(unsigned int16 value)
*
026D4:  MOVFF  7ED,7F1
026D8:  MOVFF  7EC,7F0
026DC:  GOTO   2518
026E0:  MOVFF  02,7EF
026E4:  MOVFF  01,7EE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
026E8:  BCF    F93.3
026EA:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
026EC:  MOVLW  85
026EE:  MOVWF  00
026F0:  DECFSZ 00,F
026F2:  BRA    26F0
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
026F4:  MOVFF  7EF,7F6
026F8:  MOVFF  7EE,7F5
026FC:  MOVLW  10
026FE:  MOVLB  7
02700:  MOVWF  xF7
02702:  MOVLW  01
02704:  MOVWF  xF8
02706:  MOVLB  0
02708:  CALL   266E
....................    output_high(DAC1_CS); // Deselect MCP4901
0270C:  BCF    F93.3
0270E:  BSF    F8A.3
02710:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
....................    delay_us(100); // Ensure CS is stable before sending data
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
....................    output_high(DAC2_CS); // Deselect MCP4901
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
04044:  MOVFF  7EE,7F5
04048:  GOTO   3FD4
0404C:  MOVFF  02,7F0
04050:  MOVFF  01,7EF
.................... {   
.................... 
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
04054:  BCF    F93.1
04056:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
04058:  MOVLW  0D
0405A:  MOVWF  00
0405C:  DECFSZ 00,F
0405E:  BRA    405C
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
04060:  MOVFF  7F0,7F6
04064:  MOVFF  7EF,7F5
04068:  MOVLW  10
0406A:  MOVLB  7
0406C:  MOVWF  xF7
0406E:  MOVLW  01
04070:  MOVWF  xF8
04072:  MOVLB  0
04074:  CALL   266E
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
04078:  MOVLW  0D
0407A:  MOVWF  00
0407C:  DECFSZ 00,F
0407E:  BRA    407C
....................     output_high(ADC_CS); // Set CS pin high to end communication
04080:  BCF    F93.1
04082:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
04084:  MOVLW  0D
04086:  MOVWF  00
04088:  DECFSZ 00,F
0408A:  BRA    4088
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
0408C:  BCF    F93.1
0408E:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
04090:  MOVLW  0D
04092:  MOVWF  00
04094:  DECFSZ 00,F
04096:  BRA    4094
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
04098:  MOVLB  7
0409A:  CLRF   xF6
0409C:  CLRF   xF5
0409E:  MOVLW  10
040A0:  MOVWF  xF7
040A2:  MOVLW  01
040A4:  MOVWF  xF8
040A6:  MOVLB  0
040A8:  CALL   266E
040AC:  MOVFF  02,7F2
040B0:  MOVFF  01,7F1
....................     output_high(ADC_CS); 
040B4:  BCF    F93.1
040B6:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
040B8:  MOVLB  7
040BA:  MOVF   xF1,W
040BC:  MOVWF  xF3
040BE:  MOVF   xF2,W
040C0:  ANDLW  0F
040C2:  MOVWF  xF4
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
040C4:  MOVF   xF3,W
040C6:  MOVWF  01
040C8:  MOVF   xF4,W
040CA:  MOVWF  02
040CC:  MOVLB  0
040CE:  RETURN 0
.................... }
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0163A:  MOVLW  26
0163C:  MOVWF  FF6
0163E:  MOVLW  0B
01640:  MOVWF  FF7
01642:  MOVLW  00
01644:  MOVWF  FF8
01646:  CALL   15D4
....................     output_low(CONNECT_CIGS1);
0164A:  BCF    F94.0
0164C:  BCF    F8B.0
....................     output_high(EN_NPWR);
0164E:  BCF    F94.7
01650:  BSF    F8B.7
....................     fprintf(PC, "\tComplete\r\n");
01652:  MOVLW  36
01654:  MOVWF  FF6
01656:  MOVLW  0B
01658:  MOVWF  FF7
0165A:  MOVLW  00
0165C:  MOVWF  FF8
0165E:  CALL   15D4
01662:  GOTO   8CB2 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
041FA:  MOVLW  82
041FC:  MOVWF  FF6
041FE:  MOVLW  0B
04200:  MOVWF  FF7
04202:  MOVLW  00
04204:  MOVWF  FF8
04206:  CALL   15D4
....................     output_high(CONNECT_CIGS1);
0420A:  BCF    F94.0
0420C:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
0420E:  BCF    F94.7
04210:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
04212:  MOVLW  85
04214:  MOVWF  00
04216:  DECFSZ 00,F
04218:  BRA    4216
....................     fprintf(PC, "step, voltage, current\r\n");
0421A:  MOVLW  96
0421C:  MOVWF  FF6
0421E:  MOVLW  0B
04220:  MOVWF  FF7
04222:  MOVLW  00
04224:  MOVWF  FF8
04226:  CALL   15D4
....................     mcp4901_1_write(0); // Initialize DAC to 0
0422A:  MOVLB  7
0422C:  CLRF   xED
0422E:  CLRF   xEC
04230:  MOVLB  0
04232:  CALL   26D4
....................     delay_ms(100); // wait for the DAC to stabilize
04236:  MOVLW  64
04238:  MOVLB  8
0423A:  MOVWF  x44
0423C:  MOVLB  0
0423E:  CALL   1554
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
04242:  MOVLB  3
04244:  CLRF   x95
04246:  MOVLB  0
04248:  MOVLB  3
0424A:  MOVF   x90,W
0424C:  SUBWF  x95,W
0424E:  BTFSS  FD8.0
04250:  BRA    4258
04252:  MOVLB  0
04254:  GOTO   431E
04258:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
0425A:  MOVLB  7
0425C:  CLRF   xED
0425E:  MOVFF  395,7EC
04262:  MOVLB  0
04264:  CALL   26D4
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
04268:  MOVLW  02
0426A:  MOVLB  7
0426C:  MOVWF  xEE
0426E:  MOVLB  0
04270:  CALL   4044
04274:  MOVFF  02,392
04278:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
0427C:  MOVLW  01
0427E:  MOVLB  7
04280:  MOVWF  xEE
04282:  MOVLB  0
04284:  CALL   4044
04288:  MOVFF  02,394
0428C:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
04290:  MOVFF  395,7EC
04294:  MOVLW  1B
04296:  MOVLB  7
04298:  MOVWF  xED
0429A:  MOVLB  0
0429C:  CALL   3F2A
042A0:  MOVLW  2C
042A2:  MOVLB  8
042A4:  MOVWF  x2F
042A6:  MOVLB  0
042A8:  CALL   1582
042AC:  MOVLW  20
042AE:  MOVLB  8
042B0:  MOVWF  x2F
042B2:  MOVLB  0
042B4:  CALL   1582
042B8:  MOVLW  10
042BA:  MOVWF  FE9
042BC:  MOVFF  392,397
042C0:  MOVFF  391,396
042C4:  CALL   40D0
042C8:  MOVLW  2C
042CA:  MOVLB  8
042CC:  MOVWF  x2F
042CE:  MOVLB  0
042D0:  CALL   1582
042D4:  MOVLW  20
042D6:  MOVLB  8
042D8:  MOVWF  x2F
042DA:  MOVLB  0
042DC:  CALL   1582
042E0:  MOVLW  10
042E2:  MOVWF  FE9
042E4:  MOVFF  394,397
042E8:  MOVFF  393,396
042EC:  CALL   40D0
042F0:  MOVLW  0D
042F2:  MOVLB  8
042F4:  MOVWF  x2F
042F6:  MOVLB  0
042F8:  CALL   1582
042FC:  MOVLW  0A
042FE:  MOVLB  8
04300:  MOVWF  x2F
04302:  MOVLB  0
04304:  CALL   1582
....................         delay_ms(1); // wait for the ADC to stabilize
04308:  MOVLW  01
0430A:  MOVLB  8
0430C:  MOVWF  x44
0430E:  MOVLB  0
04310:  CALL   1554
04314:  MOVLB  3
04316:  INCF   x95,F
04318:  MOVLB  0
0431A:  GOTO   4248
....................     }
0431E:  GOTO   4396 (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
043B2:  MOVLB  7
043B4:  CLRF   xED
043B6:  CLRF   xEC
043B8:  MOVLB  0
043BA:  CALL   26D4
....................     fprintf(PC, "Start ADC TEST\r\n");
043BE:  MOVLW  B0
043C0:  MOVWF  FF6
043C2:  MOVLW  0B
043C4:  MOVWF  FF7
043C6:  MOVLW  00
043C8:  MOVWF  FF8
043CA:  CALL   15D4
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
043CE:  MOVLB  7
043D0:  CLRF   xEE
043D2:  MOVLB  0
043D4:  CALL   4044
043D8:  MOVFF  02,38C
043DC:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
043E0:  MOVLW  C2
043E2:  MOVWF  FF6
043E4:  MOVLW  0B
043E6:  MOVWF  FF7
043E8:  MOVLW  00
043EA:  MOVWF  FF8
043EC:  MOVLW  0D
043EE:  MOVLB  7
043F0:  MOVWF  xEC
043F2:  MOVLB  0
043F4:  CALL   1604
043F8:  MOVFF  38C,4A4
043FC:  MOVLW  37
043FE:  MOVLB  4
04400:  MOVWF  xA5
04402:  MOVLB  0
04404:  CALL   1C0A
04408:  MOVFF  38B,4A4
0440C:  MOVLW  37
0440E:  MOVLB  4
04410:  MOVWF  xA5
04412:  MOVLB  0
04414:  CALL   1C0A
04418:  MOVLW  0D
0441A:  MOVLB  8
0441C:  MOVWF  x2F
0441E:  MOVLB  0
04420:  CALL   1582
04424:  MOVLW  0A
04426:  MOVLB  8
04428:  MOVWF  x2F
0442A:  MOVLB  0
0442C:  CALL   1582
....................     ans = ad7490_read(ADC_CIGS1_CURR);
04430:  MOVLW  01
04432:  MOVLB  7
04434:  MOVWF  xEE
04436:  MOVLB  0
04438:  CALL   4044
0443C:  MOVFF  02,38C
04440:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04444:  MOVLW  D8
04446:  MOVWF  FF6
04448:  MOVLW  0B
0444A:  MOVWF  FF7
0444C:  MOVLW  00
0444E:  MOVWF  FF8
04450:  MOVLW  0D
04452:  MOVLB  7
04454:  MOVWF  xEC
04456:  MOVLB  0
04458:  CALL   1604
0445C:  MOVFF  38C,4A4
04460:  MOVLW  37
04462:  MOVLB  4
04464:  MOVWF  xA5
04466:  MOVLB  0
04468:  CALL   1C0A
0446C:  MOVFF  38B,4A4
04470:  MOVLW  37
04472:  MOVLB  4
04474:  MOVWF  xA5
04476:  MOVLB  0
04478:  CALL   1C0A
0447C:  MOVLW  0D
0447E:  MOVLB  8
04480:  MOVWF  x2F
04482:  MOVLB  0
04484:  CALL   1582
04488:  MOVLW  0A
0448A:  MOVLB  8
0448C:  MOVWF  x2F
0448E:  MOVLB  0
04490:  CALL   1582
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04494:  MOVLW  02
04496:  MOVLB  7
04498:  MOVWF  xEE
0449A:  MOVLB  0
0449C:  CALL   4044
044A0:  MOVFF  02,38C
044A4:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
044A8:  MOVLW  EE
044AA:  MOVWF  FF6
044AC:  MOVLW  0B
044AE:  MOVWF  FF7
044B0:  MOVLW  00
044B2:  MOVWF  FF8
044B4:  MOVLW  0F
044B6:  MOVLB  7
044B8:  MOVWF  xEC
044BA:  MOVLB  0
044BC:  CALL   1604
044C0:  MOVFF  38C,4A4
044C4:  MOVLW  37
044C6:  MOVLB  4
044C8:  MOVWF  xA5
044CA:  MOVLB  0
044CC:  CALL   1C0A
044D0:  MOVFF  38B,4A4
044D4:  MOVLW  37
044D6:  MOVLB  4
044D8:  MOVWF  xA5
044DA:  MOVLB  0
044DC:  CALL   1C0A
044E0:  MOVLW  0D
044E2:  MOVLB  8
044E4:  MOVWF  x2F
044E6:  MOVLB  0
044E8:  CALL   1582
044EC:  MOVLW  0A
044EE:  MOVLB  8
044F0:  MOVWF  x2F
044F2:  MOVLB  0
044F4:  CALL   1582
....................     ans = ad7490_read(ADC_CIGS1_VREF);
044F8:  MOVLW  03
044FA:  MOVLB  7
044FC:  MOVWF  xEE
044FE:  MOVLB  0
04500:  CALL   4044
04504:  MOVFF  02,38C
04508:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
0450C:  MOVLW  06
0450E:  MOVWF  FF6
04510:  MOVLW  0C
04512:  MOVWF  FF7
04514:  MOVLW  00
04516:  MOVWF  FF8
04518:  MOVLW  10
0451A:  MOVLB  7
0451C:  MOVWF  xEC
0451E:  MOVLB  0
04520:  CALL   1604
04524:  MOVFF  38C,4A4
04528:  MOVLW  37
0452A:  MOVLB  4
0452C:  MOVWF  xA5
0452E:  MOVLB  0
04530:  CALL   1C0A
04534:  MOVFF  38B,4A4
04538:  MOVLW  37
0453A:  MOVLB  4
0453C:  MOVWF  xA5
0453E:  MOVLB  0
04540:  CALL   1C0A
04544:  MOVLW  0D
04546:  MOVLB  8
04548:  MOVWF  x2F
0454A:  MOVLB  0
0454C:  CALL   1582
04550:  MOVLW  0A
04552:  MOVLB  8
04554:  MOVWF  x2F
04556:  MOVLB  0
04558:  CALL   1582
0455C:  GOTO   6A82 (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
*
046FC:  MOVLW  78
046FE:  MOVWF  FF6
04700:  MOVLW  0C
04702:  MOVWF  FF7
04704:  MOVLW  00
04706:  MOVWF  FF8
04708:  CALL   15D4
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
0470C:  MOVLW  8C
0470E:  MOVWF  FF6
04710:  MOVLW  0C
04712:  MOVWF  FF7
04714:  MOVLW  00
04716:  MOVWF  FF8
04718:  MOVLW  0E
0471A:  MOVLB  7
0471C:  MOVWF  xEC
0471E:  MOVLB  0
04720:  CALL   1604
04724:  MOVFF  396,7EC
04728:  MOVLW  1B
0472A:  MOVLB  7
0472C:  MOVWF  xED
0472E:  MOVLB  0
04730:  CALL   3F2A
04734:  MOVLW  0D
04736:  MOVLB  8
04738:  MOVWF  x2F
0473A:  MOVLB  0
0473C:  CALL   1582
04740:  MOVLW  0A
04742:  MOVLB  8
04744:  MOVWF  x2F
04746:  MOVLB  0
04748:  CALL   1582
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
0474C:  BCF    F94.0
0474E:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
04750:  BCF    F94.5
04752:  BCF    F8B.5
....................     output_low(EN_NPWR); 
04754:  BCF    F94.7
04756:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
04758:  CALL   2712
0475C:  MOVFF  03,39A
04760:  MOVFF  02,399
04764:  MOVFF  01,398
04768:  MOVFF  00,397
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
0476C:  MOVLW  0D
0476E:  MOVLB  7
04770:  MOVWF  xEE
04772:  MOVLB  0
04774:  CALL   4044
04778:  MOVFF  02,39C
0477C:  MOVFF  01,39B
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
04780:  MOVLW  0E
04782:  MOVLB  7
04784:  MOVWF  xEE
04786:  MOVLB  0
04788:  CALL   4044
0478C:  MOVFF  02,39E
04790:  MOVFF  01,39D
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
04794:  MOVLW  0C
04796:  MOVLB  7
04798:  MOVWF  xEE
0479A:  MOVLB  0
0479C:  CALL   4044
047A0:  MOVFF  02,3A0
047A4:  MOVFF  01,39F
....................     measured_data.pd = ad7490_read(ADC_PD); 
047A8:  MOVLW  0F
047AA:  MOVLB  7
047AC:  MOVWF  xEE
047AE:  MOVLB  0
047B0:  CALL   4044
047B4:  MOVFF  02,3A2
047B8:  MOVFF  01,3A1
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
047BC:  MOVLB  7
047BE:  CLRF   x9F
047C0:  MOVLB  0
047C2:  MOVLB  3
047C4:  MOVF   x96,W
047C6:  MOVLB  7
047C8:  SUBWF  x9F,W
047CA:  BTFSS  FD8.0
047CC:  BRA    47D4
047CE:  MOVLB  0
047D0:  GOTO   4872
047D4:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
047D6:  MOVLB  7
047D8:  CLRF   xED
047DA:  MOVFF  79F,7EC
047DE:  MOVLB  0
047E0:  CALL   26D4
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
047E4:  MOVLW  0A
047E6:  MOVLB  8
047E8:  MOVWF  x44
047EA:  MOVLB  0
047EC:  CALL   1554
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
047F0:  CLRF   03
047F2:  MOVLB  7
047F4:  MOVF   x9F,W
047F6:  MOVWF  02
047F8:  BCF    FD8.0
047FA:  RLCF   02,F
047FC:  RLCF   03,F
047FE:  MOVF   02,W
04800:  ADDLW  A3
04802:  MOVWF  01
04804:  MOVLW  03
04806:  ADDWFC 03,F
04808:  MOVF   01,W
0480A:  MOVWF  xEC
0480C:  MOVFF  03,7ED
04810:  MOVLW  02
04812:  MOVWF  xEE
04814:  MOVLB  0
04816:  CALL   4044
0481A:  MOVFF  7ED,FEA
0481E:  MOVFF  7EC,FE9
04822:  MOVFF  02,FEC
04826:  MOVF   FED,F
04828:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
0482C:  CLRF   03
0482E:  MOVLB  7
04830:  MOVF   x9F,W
04832:  MOVWF  02
04834:  BCF    FD8.0
04836:  RLCF   02,F
04838:  RLCF   03,F
0483A:  MOVF   02,W
0483C:  ADDLW  A1
0483E:  MOVWF  01
04840:  MOVLW  05
04842:  ADDWFC 03,F
04844:  MOVF   01,W
04846:  MOVWF  xEC
04848:  MOVFF  03,7ED
0484C:  MOVLW  01
0484E:  MOVWF  xEE
04850:  MOVLB  0
04852:  CALL   4044
04856:  MOVFF  7ED,FEA
0485A:  MOVFF  7EC,FE9
0485E:  MOVFF  02,FEC
04862:  MOVF   FED,F
04864:  MOVFF  01,FEF
04868:  MOVLB  7
0486A:  INCF   x9F,F
0486C:  MOVLB  0
0486E:  GOTO   47C2
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
04872:  BCF    F94.0
04874:  BCF    F8B.0
....................     output_high(EN_NPWR);
04876:  BCF    F94.7
04878:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
0487A:  MOVLW  A0
0487C:  MOVWF  FF6
0487E:  MOVLW  0C
04880:  MOVWF  FF7
04882:  MOVLW  00
04884:  MOVWF  FF8
04886:  CALL   15D4
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
0488A:  MOVLW  B2
0488C:  MOVWF  FF6
0488E:  MOVLW  0C
04890:  MOVWF  FF7
04892:  MOVLW  00
04894:  MOVWF  FF8
04896:  CALL   15D4
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
0489A:  MOVLB  7
0489C:  CLRF   xA0
0489E:  CLRF   xA1
048A0:  CLRF   xA2
048A2:  CLRF   xA3
048A4:  CLRF   xA4
048A6:  CLRF   xA5
048A8:  CLRF   xA6
048AA:  CLRF   xA7
048AC:  CLRF   xA8
048AE:  CLRF   xA9
048B0:  CLRF   xAA
048B2:  CLRF   xAB
048B4:  CLRF   xAC
048B6:  CLRF   xAD
048B8:  CLRF   xAE
048BA:  CLRF   xAF
048BC:  CLRF   xB0
048BE:  CLRF   xB1
048C0:  CLRF   xB2
048C2:  CLRF   xB3
048C4:  CLRF   xB4
048C6:  CLRF   xB5
048C8:  CLRF   xB6
048CA:  CLRF   xB7
048CC:  CLRF   xB8
048CE:  CLRF   xB9
048D0:  CLRF   xBA
048D2:  CLRF   xBB
048D4:  CLRF   xBC
048D6:  CLRF   xBD
048D8:  CLRF   xBE
048DA:  CLRF   xBF
048DC:  CLRF   xC0
048DE:  CLRF   xC1
048E0:  CLRF   xC2
048E2:  CLRF   xC3
048E4:  CLRF   xC4
048E6:  CLRF   xC5
048E8:  CLRF   xC6
048EA:  CLRF   xC7
048EC:  CLRF   xC8
048EE:  CLRF   xC9
048F0:  CLRF   xCA
048F2:  CLRF   xCB
048F4:  CLRF   xCC
048F6:  CLRF   xCD
048F8:  CLRF   xCE
048FA:  CLRF   xCF
048FC:  CLRF   xD0
048FE:  CLRF   xD1
04900:  CLRF   xD2
04902:  CLRF   xD3
04904:  CLRF   xD4
04906:  CLRF   xD5
04908:  CLRF   xD6
0490A:  CLRF   xD7
0490C:  CLRF   xD8
0490E:  CLRF   xD9
04910:  CLRF   xDA
04912:  CLRF   xDB
04914:  CLRF   xDC
04916:  CLRF   xDD
04918:  CLRF   xDE
0491A:  CLRF   xDF
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
0491C:  CLRF   xE0
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
0491E:  CLRF   xE2
04920:  CLRF   xE1
04922:  MOVLB  0
04924:  MOVLB  7
04926:  MOVF   xE2,F
04928:  BTFSC  FD8.2
0492A:  BRA    4932
0492C:  MOVLB  0
0492E:  GOTO   4B68
04932:  MOVLB  0
04934:  MOVLB  3
04936:  MOVF   x96,W
04938:  MOVLB  7
0493A:  SUBWF  xE1,W
0493C:  BTFSS  FD8.0
0493E:  BRA    4946
04940:  MOVLB  0
04942:  GOTO   4B68
04946:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
04948:  CLRF   03
0494A:  MOVLB  7
0494C:  MOVF   xE0,W
0494E:  ADDLW  A0
04950:  MOVWF  01
04952:  MOVLW  07
04954:  ADDWFC 03,F
04956:  MOVF   01,W
04958:  MOVWF  xEC
0495A:  MOVFF  03,7ED
0495E:  BCF    FD8.0
04960:  RLCF   xE1,W
04962:  MOVWF  02
04964:  RLCF   xE2,W
04966:  MOVWF  03
04968:  MOVF   02,W
0496A:  ADDLW  A3
0496C:  MOVWF  FE9
0496E:  MOVLW  03
04970:  ADDWFC 03,W
04972:  MOVWF  FEA
04974:  MOVFF  FEC,7EF
04978:  MOVF   FED,F
0497A:  MOVFF  FEF,7EE
0497E:  RRCF   xEF,F
04980:  RRCF   xEE,F
04982:  RRCF   xEF,F
04984:  RRCF   xEE,F
04986:  RRCF   xEF,F
04988:  RRCF   xEE,F
0498A:  RRCF   xEF,F
0498C:  RRCF   xEE,F
0498E:  MOVLW  0F
04990:  ANDWF  xEF,F
04992:  MOVF   xEE,W
04994:  MOVWF  00
04996:  CLRF   03
04998:  MOVF   00,W
0499A:  MOVWF  xEE
0499C:  MOVFF  03,7EF
049A0:  MOVFF  7ED,FEA
049A4:  MOVFF  7EC,FE9
049A8:  MOVFF  7EE,FEF
....................         packetdata_index++; 
049AC:  INCF   xE0,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
049AE:  CLRF   03
049B0:  MOVF   xE0,W
049B2:  ADDLW  A0
049B4:  MOVWF  01
049B6:  MOVLW  07
049B8:  ADDWFC 03,F
049BA:  MOVF   01,W
049BC:  MOVWF  xEC
049BE:  MOVFF  03,7ED
049C2:  BCF    FD8.0
049C4:  RLCF   xE1,W
049C6:  MOVWF  02
049C8:  RLCF   xE2,W
049CA:  MOVWF  03
049CC:  MOVF   02,W
049CE:  ADDLW  A3
049D0:  MOVWF  FE9
049D2:  MOVLW  03
049D4:  ADDWFC 03,W
049D6:  MOVWF  FEA
049D8:  MOVFF  FEC,7EF
049DC:  MOVF   FED,F
049DE:  MOVFF  FEF,7EE
049E2:  MOVLW  0F
049E4:  ANDWF  xEE,F
049E6:  CLRF   xEF
049E8:  RLCF   xEE,F
049EA:  RLCF   xEF,F
049EC:  RLCF   xEE,F
049EE:  RLCF   xEF,F
049F0:  RLCF   xEE,F
049F2:  RLCF   xEF,F
049F4:  RLCF   xEE,F
049F6:  RLCF   xEF,F
049F8:  MOVLW  F0
049FA:  ANDWF  xEE,F
049FC:  BCF    FD8.0
049FE:  RLCF   xE1,W
04A00:  MOVWF  02
04A02:  RLCF   xE2,W
04A04:  MOVWF  03
04A06:  MOVF   02,W
04A08:  ADDLW  A1
04A0A:  MOVWF  FE9
04A0C:  MOVLW  05
04A0E:  ADDWFC 03,W
04A10:  MOVWF  FEA
04A12:  MOVFF  FEC,7F1
04A16:  MOVF   FED,F
04A18:  MOVFF  FEF,7F0
04A1C:  MOVFF  7F1,7F0
04A20:  CLRF   xF1
04A22:  MOVF   xF0,W
04A24:  ANDLW  0F
04A26:  MOVWF  00
04A28:  CLRF   03
04A2A:  MOVF   00,W
04A2C:  IORWF  xEE,W
04A2E:  MOVWF  00
04A30:  MOVF   03,W
04A32:  IORWF  xEF,W
04A34:  MOVWF  03
04A36:  MOVF   00,W
04A38:  MOVWF  xEE
04A3A:  MOVFF  03,7EF
04A3E:  MOVFF  7ED,FEA
04A42:  MOVFF  7EC,FE9
04A46:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04A4A:  INCF   xE0,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
04A4C:  CLRF   03
04A4E:  MOVF   xE0,W
04A50:  ADDLW  A0
04A52:  MOVWF  01
04A54:  MOVLW  07
04A56:  ADDWFC 03,F
04A58:  MOVF   01,W
04A5A:  MOVWF  xEC
04A5C:  MOVFF  03,7ED
04A60:  BCF    FD8.0
04A62:  RLCF   xE1,W
04A64:  MOVWF  02
04A66:  RLCF   xE2,W
04A68:  MOVWF  03
04A6A:  MOVF   02,W
04A6C:  ADDLW  A1
04A6E:  MOVWF  FE9
04A70:  MOVLW  05
04A72:  ADDWFC 03,W
04A74:  MOVWF  FEA
04A76:  MOVFF  FEC,7EF
04A7A:  MOVF   FED,F
04A7C:  MOVFF  FEF,7EE
04A80:  MOVF   xEE,W
04A82:  MOVWF  00
04A84:  CLRF   03
04A86:  MOVF   00,W
04A88:  MOVWF  xEE
04A8A:  MOVFF  03,7EF
04A8E:  MOVFF  7ED,FEA
04A92:  MOVFF  7EC,FE9
04A96:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04A9A:  INCF   xE0,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
04A9C:  MOVF   xE0,W
04A9E:  SUBLW  3F
04AA0:  BTFSC  FD8.2
04AA2:  BRA    4AAA
04AA4:  MOVLB  0
04AA6:  GOTO   4B5A
04AAA:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
04AAC:  MOVLW  07
04AAE:  MOVLB  7
04AB0:  MOVWF  xED
04AB2:  MOVLW  A0
04AB4:  MOVWF  xEC
04AB6:  MOVLW  3F
04AB8:  MOVWF  xEE
04ABA:  MOVLB  0
04ABC:  CALL   36EE
04AC0:  MOVFF  01,7DF
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04AC4:  MOVLB  3
04AC6:  MOVF   x6A,W
04AC8:  MOVLB  7
04ACA:  MOVWF  xE3
04ACC:  MOVLB  3
04ACE:  MOVF   x6B,W
04AD0:  MOVLB  7
04AD2:  MOVWF  xE4
04AD4:  MOVLW  16
04AD6:  MOVLB  3
04AD8:  ADDWF  x6C,W
04ADA:  MOVLB  7
04ADC:  MOVWF  xE5
04ADE:  MOVLW  00
04AE0:  MOVLB  3
04AE2:  ADDWFC x6D,W
04AE4:  MOVLB  7
04AE6:  MOVWF  xE6
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04AE8:  MOVFF  E1,82F
04AEC:  MOVFF  E0,82E
04AF0:  MOVFF  DF,82D
04AF4:  MOVFF  DE,82C
04AF8:  MOVFF  7E6,833
04AFC:  MOVFF  7E5,832
04B00:  MOVFF  7E4,831
04B04:  MOVFF  7E3,830
04B08:  MOVLW  07
04B0A:  MOVLB  8
04B0C:  MOVWF  x35
04B0E:  MOVLW  A0
04B10:  MOVWF  x34
04B12:  CLRF   x37
04B14:  MOVLW  40
04B16:  MOVWF  x36
04B18:  MOVLB  0
04B1A:  CALL   2A00
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
04B1E:  MOVLW  40
04B20:  MOVLB  3
04B22:  ADDWF  x6A,F
04B24:  MOVLW  00
04B26:  ADDWFC x6B,F
04B28:  MOVLW  00
04B2A:  ADDWFC x6C,F
04B2C:  MOVLW  00
04B2E:  ADDWFC x6D,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
04B30:  MOVLW  40
04B32:  ADDWF  x6F,F
04B34:  MOVLW  00
04B36:  ADDWFC x70,F
04B38:  MOVLW  00
04B3A:  ADDWFC x71,F
04B3C:  MOVLW  00
04B3E:  ADDWFC x72,F
....................             packetdata_index = 0; // Reset packet byte counter
04B40:  MOVLB  7
04B42:  CLRF   xE0
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
04B44:  MOVLW  07
04B46:  MOVWF  FEA
04B48:  MOVLW  A0
04B4A:  MOVWF  FE9
04B4C:  CLRF   00
04B4E:  CLRF   02
04B50:  MOVLW  40
04B52:  MOVWF  01
04B54:  MOVLB  0
04B56:  CALL   3AD8
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
04B5A:  MOVLB  7
04B5C:  INCF   xE1,F
04B5E:  BTFSC  FD8.2
04B60:  INCF   xE2,F
04B62:  MOVLB  0
04B64:  GOTO   4924
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
04B68:  MOVLB  7
04B6A:  MOVF   xE0,W
04B6C:  SUBLW  3E
04B6E:  BTFSC  FD8.0
04B70:  BRA    4B78
04B72:  MOVLB  0
04B74:  GOTO   4C2C
04B78:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
04B7A:  MOVFF  7E0,7E7
04B7E:  MOVLB  7
04B80:  MOVF   xE7,W
04B82:  SUBLW  3E
04B84:  BTFSC  FD8.0
04B86:  BRA    4B8E
04B88:  MOVLB  0
04B8A:  GOTO   4BAE
04B8E:  MOVLB  0
....................             packetdata[j] = 0x00;
04B90:  CLRF   03
04B92:  MOVLB  7
04B94:  MOVF   xE7,W
04B96:  ADDLW  A0
04B98:  MOVWF  FE9
04B9A:  MOVLW  07
04B9C:  ADDWFC 03,W
04B9E:  MOVWF  FEA
04BA0:  CLRF   FEF
04BA2:  MOVLB  0
04BA4:  MOVLB  7
04BA6:  INCF   xE7,F
04BA8:  MOVLB  0
04BAA:  GOTO   4B7E
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04BAE:  MOVLB  3
04BB0:  MOVF   x6A,W
04BB2:  MOVLB  7
04BB4:  MOVWF  xE8
04BB6:  MOVLB  3
04BB8:  MOVF   x6B,W
04BBA:  MOVLB  7
04BBC:  MOVWF  xE9
04BBE:  MOVLW  16
04BC0:  MOVLB  3
04BC2:  ADDWF  x6C,W
04BC4:  MOVLB  7
04BC6:  MOVWF  xEA
04BC8:  MOVLW  00
04BCA:  MOVLB  3
04BCC:  ADDWFC x6D,W
04BCE:  MOVLB  7
04BD0:  MOVWF  xEB
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04BD2:  MOVFF  E1,82F
04BD6:  MOVFF  E0,82E
04BDA:  MOVFF  DF,82D
04BDE:  MOVFF  DE,82C
04BE2:  MOVFF  7EB,833
04BE6:  MOVFF  7EA,832
04BEA:  MOVFF  7E9,831
04BEE:  MOVFF  7E8,830
04BF2:  MOVLW  07
04BF4:  MOVLB  8
04BF6:  MOVWF  x35
04BF8:  MOVLW  A0
04BFA:  MOVWF  x34
04BFC:  CLRF   x37
04BFE:  MOVLW  40
04C00:  MOVWF  x36
04C02:  MOVLB  0
04C04:  CALL   2A00
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
04C08:  MOVLW  40
04C0A:  MOVLB  3
04C0C:  ADDWF  x6A,F
04C0E:  MOVLW  00
04C10:  ADDWFC x6B,F
04C12:  MOVLW  00
04C14:  ADDWFC x6C,F
04C16:  MOVLW  00
04C18:  ADDWFC x6D,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
04C1A:  MOVLW  40
04C1C:  ADDWF  x6F,F
04C1E:  MOVLW  00
04C20:  ADDWFC x70,F
04C22:  MOVLW  00
04C24:  ADDWFC x71,F
04C26:  MOVLW  00
04C28:  ADDWFC x72,F
04C2A:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
04C2C:  CALL   30DC
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
04C30:  MOVLW  D0
04C32:  MOVWF  FF6
04C34:  MOVLW  0C
04C36:  MOVWF  FF7
04C38:  MOVLW  00
04C3A:  MOVWF  FF8
04C3C:  CALL   15D4
04C40:  GOTO   4DDE (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03396:  CALL   2712
0339A:  MOVFF  03,49D
0339E:  MOVFF  02,49C
033A2:  MOVFF  01,49B
033A6:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
033AA:  MOVFF  49D,4A4
033AE:  MOVLB  4
033B0:  CLRF   xA5
033B2:  CLRF   xA6
033B4:  CLRF   xA7
033B6:  MOVF   xA4,W
033B8:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
033BA:  MOVFF  49C,4A4
033BE:  MOVFF  49D,4A5
033C2:  CLRF   xA6
033C4:  CLRF   xA7
033C6:  MOVF   xA4,W
033C8:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
033CA:  MOVFF  49B,4A4
033CE:  MOVFF  49C,4A5
033D2:  MOVFF  49D,4A6
033D6:  CLRF   xA7
033D8:  MOVF   xA4,W
033DA:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
033DC:  MOVF   x9A,W
033DE:  MOVWF  x97
....................     piclog[4] = function;            // Function code
033E0:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
033E4:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
033E8:  MOVLW  44
033EA:  MOVWF  FF6
033EC:  MOVLW  0D
033EE:  MOVWF  FF7
033F0:  MOVLW  00
033F2:  MOVWF  FF8
033F4:  MOVLB  0
033F6:  CALL   15D4
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
033FA:  MOVLB  4
033FC:  CLRF   x9E
033FE:  MOVLB  0
03400:  MOVLB  4
03402:  MOVF   x9E,W
03404:  SUBLW  05
03406:  BTFSC  FD8.0
03408:  BRA    3410
0340A:  MOVLB  0
0340C:  GOTO   344A
03410:  MOVLB  0
....................             fprintf(PC, "%02X ", piclog[i]);
03412:  CLRF   03
03414:  MOVLB  4
03416:  MOVF   x9E,W
03418:  ADDLW  94
0341A:  MOVWF  FE9
0341C:  MOVLW  04
0341E:  ADDWFC 03,W
03420:  MOVWF  FEA
03422:  MOVFF  FEF,4A3
03426:  MOVFF  4A3,4A4
0342A:  MOVLW  37
0342C:  MOVWF  xA5
0342E:  MOVLB  0
03430:  CALL   1C0A
03434:  MOVLW  20
03436:  MOVLB  8
03438:  MOVWF  x2F
0343A:  MOVLB  0
0343C:  CALL   1582
03440:  MOVLB  4
03442:  INCF   x9E,F
03444:  MOVLB  0
03446:  GOTO   3400
....................         }
....................         fprintf(PC, "\r\n");
0344A:  MOVLW  0D
0344C:  MOVLB  8
0344E:  MOVWF  x2F
03450:  MOVLB  0
03452:  CALL   1582
03456:  MOVLW  0A
03458:  MOVLB  8
0345A:  MOVWF  x2F
0345C:  MOVLB  0
0345E:  CALL   1582
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03462:  MOVLB  3
03464:  MOVF   x60,W
03466:  MOVLB  4
03468:  MOVWF  x9F
0346A:  MOVLB  3
0346C:  MOVF   x61,W
0346E:  MOVLB  4
03470:  MOVWF  xA0
03472:  MOVLW  02
03474:  MOVLB  3
03476:  ADDWF  x62,W
03478:  MOVLB  4
0347A:  MOVWF  xA1
0347C:  MOVLW  00
0347E:  MOVLB  3
03480:  ADDWFC x63,W
03482:  MOVLB  4
03484:  MOVWF  xA2
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03486:  MOVFF  E1,82F
0348A:  MOVFF  E0,82E
0348E:  MOVFF  DF,82D
03492:  MOVFF  DE,82C
03496:  MOVLB  0
03498:  CALL   1934
0349C:  MOVF   01,F
0349E:  BTFSS  FD8.2
034A0:  GOTO   34B8
....................         fprintf(PC, "Mission Flash is not connected\r\n");
034A4:  MOVLW  50
034A6:  MOVWF  FF6
034A8:  MOVLW  0D
034AA:  MOVWF  FF7
034AC:  MOVLW  00
034AE:  MOVWF  FF8
034B0:  CALL   15D4
....................         return;
034B4:  GOTO   3588
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
034B8:  MOVFF  E1,82F
034BC:  MOVFF  E0,82E
034C0:  MOVFF  DF,82D
034C4:  MOVFF  DE,82C
034C8:  MOVFF  4A2,833
034CC:  MOVFF  4A1,832
034D0:  MOVFF  4A0,831
034D4:  MOVFF  49F,830
034D8:  MOVLW  04
034DA:  MOVLB  8
034DC:  MOVWF  x35
034DE:  MOVLW  94
034E0:  MOVWF  x34
034E2:  CLRF   x37
034E4:  MOVLW  06
034E6:  MOVWF  x36
034E8:  MOVLB  0
034EA:  CALL   2A00
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
034EE:  MOVLW  06
034F0:  MOVLB  3
034F2:  ADDWF  x60,F
034F4:  MOVLW  00
034F6:  ADDWFC x61,F
034F8:  MOVLW  00
034FA:  ADDWFC x62,F
034FC:  MOVLW  00
034FE:  ADDWFC x63,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03500:  MOVLW  06
03502:  ADDWF  x65,F
03504:  MOVLW  00
03506:  ADDWFC x66,F
03508:  MOVLW  00
0350A:  ADDWFC x67,F
0350C:  MOVLW  00
0350E:  ADDWFC x68,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03510:  MOVLW  06
03512:  ADDWF  x69,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03514:  MOVLW  06
03516:  ADDWF  x69,W
03518:  SUBLW  3F
0351A:  BTFSS  FD8.0
0351C:  BRA    3524
0351E:  MOVLB  0
03520:  GOTO   3584
03524:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03526:  MOVLB  3
03528:  MOVF   x60,W
0352A:  MOVLB  4
0352C:  MOVWF  x9F
0352E:  MOVLB  3
03530:  MOVF   x61,W
03532:  MOVLB  4
03534:  MOVWF  xA0
03536:  MOVLW  02
03538:  MOVLB  3
0353A:  ADDWF  x62,W
0353C:  MOVLB  4
0353E:  MOVWF  xA1
03540:  MOVLW  00
03542:  MOVLB  3
03544:  ADDWFC x63,W
03546:  MOVLB  4
03548:  MOVWF  xA2
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
0354A:  MOVFF  E1,82F
0354E:  MOVFF  E0,82E
03552:  MOVFF  DF,82D
03556:  MOVFF  DE,82C
0355A:  MOVFF  4A2,833
0355E:  MOVFF  4A1,832
03562:  MOVFF  4A0,831
03566:  MOVFF  49F,830
0356A:  MOVLB  8
0356C:  CLRF   x35
0356E:  MOVLW  EE
03570:  MOVWF  x34
03572:  CLRF   x37
03574:  MOVLW  06
03576:  MOVWF  x36
03578:  MOVLB  0
0357A:  CALL   2A00
....................         misf_piclog_write_counter = 0;
0357E:  MOVLB  3
03580:  CLRF   x69
03582:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03584:  CALL   30DC
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
03588:  RETURN 0
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_flash.c"
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... void mode_flash_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... void mode_flash_smf_erase(unsigned int8 parameter[]);
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_ERASE_AND_RESET 0x98
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== Flash Command ============================
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
0518C:  MOVLW  72
0518E:  MOVWF  FF6
05190:  MOVLW  0D
05192:  MOVWF  FF7
05194:  MOVLW  00
05196:  MOVWF  FF8
05198:  CALL   15D4
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
0519C:  MOVLB  3
0519E:  MOVF   x8D,W
051A0:  MOVWF  FE9
051A2:  MOVF   x8E,W
051A4:  MOVWF  FEA
051A6:  MOVFF  FEF,38F
....................    piclog_make(cmd, 0x00); // Log the command execution
051AA:  MOVFF  38F,492
051AE:  MOVLB  4
051B0:  CLRF   x93
051B2:  MOVLB  0
051B4:  CALL   3396
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
051B8:  MOVLB  3
051BA:  CLRF   x93
051BC:  CLRF   x92
051BE:  CLRF   x91
051C0:  CLRF   x90
051C2:  MOVLB  0
051C4:  MOVLB  3
051C6:  MOVF   x93,F
051C8:  BTFSC  FD8.2
051CA:  BRA    51D2
051CC:  MOVLB  0
051CE:  GOTO   5232
051D2:  MOVLB  0
051D4:  MOVLB  3
051D6:  MOVF   x92,W
051D8:  SUBLW  F4
051DA:  BTFSC  FD8.0
051DC:  BRA    51E4
051DE:  MOVLB  0
051E0:  GOTO   5232
051E4:  MOVLB  0
051E6:  BTFSS  FD8.2
051E8:  GOTO   51FE
051EC:  MOVLB  3
051EE:  MOVF   x91,W
051F0:  SUBLW  23
051F2:  BTFSC  FD8.0
051F4:  BRA    51FC
051F6:  MOVLB  0
051F8:  GOTO   5232
051FC:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
051FE:  MOVFF  E1,397
05202:  MOVFF  E0,396
05206:  MOVFF  DF,395
0520A:  MOVFF  DE,394
0520E:  MOVFF  393,39B
05212:  MOVFF  392,39A
05216:  MOVFF  391,399
0521A:  MOVFF  390,398
0521E:  CALL   4E30
05222:  MOVLW  01
05224:  MOVLB  3
05226:  ADDWF  x92,F
05228:  MOVLW  00
0522A:  ADDWFC x93,F
0522C:  MOVLB  0
0522E:  GOTO   51C4
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05232:  MOVFF  38F,492
05236:  MOVLW  02
05238:  MOVLB  4
0523A:  MOVWF  x93
0523C:  MOVLB  0
0523E:  CALL   3396
....................    fprintf(PC, "End Flash Erase All\r\n");
05242:  MOVLW  8A
05244:  MOVWF  FF6
05246:  MOVLW  0D
05248:  MOVWF  FF7
0524A:  MOVLW  00
0524C:  MOVWF  FF8
0524E:  CALL   15D4
05252:  RETURN 0
.................... }
.................... 
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
05254:  MOVLW  A0
05256:  MOVWF  FF6
05258:  MOVLW  0D
0525A:  MOVWF  FF7
0525C:  MOVLW  00
0525E:  MOVWF  FF8
05260:  CALL   15D4
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05264:  MOVLB  3
05266:  MOVF   x8B,W
05268:  MOVWF  FE9
0526A:  MOVF   x8C,W
0526C:  MOVWF  FEA
0526E:  MOVFF  FEF,38D
05272:  MOVLW  01
05274:  ADDWF  x8B,W
05276:  MOVWF  FE9
05278:  MOVLW  00
0527A:  ADDWFC x8C,W
0527C:  MOVWF  FEA
0527E:  MOVF   FEF,W
05280:  CLRF   x95
05282:  CLRF   x94
05284:  CLRF   x93
05286:  MOVWF  x92
05288:  MOVFF  392,395
0528C:  CLRF   x92
0528E:  CLRF   x93
05290:  CLRF   x94
05292:  MOVLW  02
05294:  ADDWF  x8B,W
05296:  MOVWF  FE9
05298:  MOVLW  00
0529A:  ADDWFC x8C,W
0529C:  MOVWF  FEA
0529E:  MOVF   FEF,W
052A0:  CLRF   x9A
052A2:  CLRF   x99
052A4:  CLRF   x98
052A6:  MOVWF  x97
052A8:  MOVFF  398,03
052AC:  MOVFF  397,02
052B0:  CLRF   00
052B2:  CLRF   01
052B4:  MOVF   00,W
052B6:  IORWF  x92,F
052B8:  MOVF   01,W
052BA:  IORWF  x93,F
052BC:  MOVF   02,W
052BE:  IORWF  x94,F
052C0:  MOVF   03,W
052C2:  IORWF  x95,F
052C4:  MOVLW  03
052C6:  ADDWF  x8B,W
052C8:  MOVWF  FE9
052CA:  MOVLW  00
052CC:  ADDWFC x8C,W
052CE:  MOVWF  FEA
052D0:  MOVF   FEF,W
052D2:  CLRF   x9A
052D4:  CLRF   x99
052D6:  CLRF   x98
052D8:  MOVWF  x97
052DA:  MOVFF  399,03
052DE:  MOVFF  398,02
052E2:  MOVFF  397,01
052E6:  CLRF   00
052E8:  MOVF   00,W
052EA:  IORWF  x92,F
052EC:  MOVF   01,W
052EE:  IORWF  x93,F
052F0:  MOVF   02,W
052F2:  IORWF  x94,F
052F4:  MOVF   03,W
052F6:  IORWF  x95,F
052F8:  MOVLW  04
052FA:  ADDWF  x8B,W
052FC:  MOVWF  FE9
052FE:  MOVLW  00
05300:  ADDWFC x8C,W
05302:  MOVWF  FEA
05304:  MOVF   FEF,W
05306:  MOVWF  00
05308:  CLRF   01
0530A:  CLRF   02
0530C:  CLRF   03
0530E:  MOVF   00,W
05310:  IORWF  x92,W
05312:  MOVWF  x8E
05314:  MOVF   01,W
05316:  IORWF  x93,W
05318:  MOVWF  x8F
0531A:  MOVF   02,W
0531C:  IORWF  x94,W
0531E:  MOVWF  x90
05320:  MOVF   03,W
05322:  IORWF  x95,W
05324:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
05326:  MOVLW  BE
05328:  MOVWF  FF6
0532A:  MOVLW  0D
0532C:  MOVWF  FF7
0532E:  MOVLW  00
05330:  MOVWF  FF8
05332:  MOVLW  13
05334:  MOVLB  7
05336:  MOVWF  xEC
05338:  MOVLB  0
0533A:  CALL   1604
0533E:  MOVFF  391,4A4
05342:  MOVLW  37
05344:  MOVLB  4
05346:  MOVWF  xA5
05348:  MOVLB  0
0534A:  CALL   1C0A
0534E:  MOVFF  390,4A4
05352:  MOVLW  37
05354:  MOVLB  4
05356:  MOVWF  xA5
05358:  MOVLB  0
0535A:  CALL   1C0A
0535E:  MOVFF  38F,4A4
05362:  MOVLW  37
05364:  MOVLB  4
05366:  MOVWF  xA5
05368:  MOVLB  0
0536A:  CALL   1C0A
0536E:  MOVFF  38E,4A4
05372:  MOVLW  37
05374:  MOVLB  4
05376:  MOVWF  xA5
05378:  MOVLB  0
0537A:  CALL   1C0A
0537E:  MOVLW  0D
05380:  MOVLB  8
05382:  MOVWF  x2F
05384:  MOVLB  0
05386:  CALL   1582
0538A:  MOVLW  0A
0538C:  MOVLB  8
0538E:  MOVWF  x2F
05390:  MOVLB  0
05392:  CALL   1582
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05396:  MOVFF  38D,492
0539A:  MOVLW  01
0539C:  MOVLB  4
0539E:  MOVWF  x93
053A0:  MOVLB  0
053A2:  CALL   3396
....................    
....................    sector_erase(mis_fm, sector_address);
053A6:  MOVFF  E1,397
053AA:  MOVFF  E0,396
053AE:  MOVFF  DF,395
053B2:  MOVFF  DE,394
053B6:  MOVFF  391,39B
053BA:  MOVFF  390,39A
053BE:  MOVFF  38F,399
053C2:  MOVFF  38E,398
053C6:  CALL   4E30
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
053CA:  MOVFF  38D,492
053CE:  MOVLW  02
053D0:  MOVLB  4
053D2:  MOVWF  x93
053D4:  MOVLB  0
053D6:  CALL   3396
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
053DA:  MOVLW  DA
053DC:  MOVWF  FF6
053DE:  MOVLW  0D
053E0:  MOVWF  FF7
053E2:  MOVLW  00
053E4:  MOVWF  FF8
053E6:  CALL   15D4
053EA:  GOTO   6AD2 (RETURN)
.................... }
.................... 
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
053EE:  MOVLW  F6
053F0:  MOVWF  FF6
053F2:  MOVLW  0D
053F4:  MOVWF  FF7
053F6:  MOVLW  00
053F8:  MOVWF  FF8
053FA:  CALL   15D4
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
053FE:  MOVLB  3
05400:  MOVF   x8B,W
05402:  MOVWF  FE9
05404:  MOVF   x8C,W
05406:  MOVWF  FEA
05408:  MOVFF  FEF,38D
0540C:  MOVLW  01
0540E:  ADDWF  x8B,W
05410:  MOVWF  FE9
05412:  MOVLW  00
05414:  ADDWFC x8C,W
05416:  MOVWF  FEA
05418:  MOVF   FEF,W
0541A:  CLRF   x95
0541C:  CLRF   x94
0541E:  CLRF   x93
05420:  MOVWF  x92
05422:  MOVFF  392,395
05426:  CLRF   x92
05428:  CLRF   x93
0542A:  CLRF   x94
0542C:  MOVLW  02
0542E:  ADDWF  x8B,W
05430:  MOVWF  FE9
05432:  MOVLW  00
05434:  ADDWFC x8C,W
05436:  MOVWF  FEA
05438:  MOVF   FEF,W
0543A:  CLRF   x9A
0543C:  CLRF   x99
0543E:  CLRF   x98
05440:  MOVWF  x97
05442:  MOVFF  398,03
05446:  MOVFF  397,02
0544A:  CLRF   00
0544C:  CLRF   01
0544E:  MOVF   00,W
05450:  IORWF  x92,F
05452:  MOVF   01,W
05454:  IORWF  x93,F
05456:  MOVF   02,W
05458:  IORWF  x94,F
0545A:  MOVF   03,W
0545C:  IORWF  x95,F
0545E:  MOVLW  03
05460:  ADDWF  x8B,W
05462:  MOVWF  FE9
05464:  MOVLW  00
05466:  ADDWFC x8C,W
05468:  MOVWF  FEA
0546A:  MOVF   FEF,W
0546C:  CLRF   x9A
0546E:  CLRF   x99
05470:  CLRF   x98
05472:  MOVWF  x97
05474:  MOVFF  399,03
05478:  MOVFF  398,02
0547C:  MOVFF  397,01
05480:  CLRF   00
05482:  MOVF   00,W
05484:  IORWF  x92,F
05486:  MOVF   01,W
05488:  IORWF  x93,F
0548A:  MOVF   02,W
0548C:  IORWF  x94,F
0548E:  MOVF   03,W
05490:  IORWF  x95,F
05492:  MOVLW  04
05494:  ADDWF  x8B,W
05496:  MOVWF  FE9
05498:  MOVLW  00
0549A:  ADDWFC x8C,W
0549C:  MOVWF  FEA
0549E:  MOVF   FEF,W
054A0:  MOVWF  00
054A2:  CLRF   01
054A4:  CLRF   02
054A6:  CLRF   03
054A8:  MOVF   00,W
054AA:  IORWF  x92,W
054AC:  MOVWF  x8E
054AE:  MOVF   01,W
054B0:  IORWF  x93,W
054B2:  MOVWF  x8F
054B4:  MOVF   02,W
054B6:  IORWF  x94,W
054B8:  MOVWF  x90
054BA:  MOVF   03,W
054BC:  IORWF  x95,W
054BE:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
054C0:  MOVLW  12
054C2:  MOVWF  FF6
054C4:  MOVLW  0E
054C6:  MOVWF  FF7
054C8:  MOVLW  00
054CA:  MOVWF  FF8
054CC:  MOVLW  16
054CE:  MOVLB  7
054D0:  MOVWF  xEC
054D2:  MOVLB  0
054D4:  CALL   1604
054D8:  MOVFF  391,4A4
054DC:  MOVLW  37
054DE:  MOVLB  4
054E0:  MOVWF  xA5
054E2:  MOVLB  0
054E4:  CALL   1C0A
054E8:  MOVFF  390,4A4
054EC:  MOVLW  37
054EE:  MOVLB  4
054F0:  MOVWF  xA5
054F2:  MOVLB  0
054F4:  CALL   1C0A
054F8:  MOVFF  38F,4A4
054FC:  MOVLW  37
054FE:  MOVLB  4
05500:  MOVWF  xA5
05502:  MOVLB  0
05504:  CALL   1C0A
05508:  MOVFF  38E,4A4
0550C:  MOVLW  37
0550E:  MOVLB  4
05510:  MOVWF  xA5
05512:  MOVLB  0
05514:  CALL   1C0A
05518:  MOVLW  0D
0551A:  MOVLB  8
0551C:  MOVWF  x2F
0551E:  MOVLB  0
05520:  CALL   1582
05524:  MOVLW  0A
05526:  MOVLB  8
05528:  MOVWF  x2F
0552A:  MOVLB  0
0552C:  CALL   1582
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05530:  MOVFF  38D,492
05534:  MOVLW  01
05536:  MOVLB  4
05538:  MOVWF  x93
0553A:  MOVLB  0
0553C:  CALL   3396
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
05540:  MOVFF  E1,82F
05544:  MOVFF  E0,82E
05548:  MOVFF  DF,82D
0554C:  MOVFF  DE,82C
05550:  MOVLB  8
05552:  CLRF   x33
05554:  CLRF   x32
05556:  CLRF   x31
05558:  CLRF   x30
0555A:  MOVLB  0
0555C:  CALL   2D84
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05560:  MOVFF  38D,492
05564:  MOVLW  02
05566:  MOVLB  4
05568:  MOVWF  x93
0556A:  MOVLB  0
0556C:  CALL   3396
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
05570:  MOVLW  30
05572:  MOVWF  FF6
05574:  MOVLW  0E
05576:  MOVWF  FF7
05578:  MOVLW  00
0557A:  MOVWF  FF8
0557C:  CALL   15D4
05580:  GOTO   6AE2 (RETURN)
.................... }
.................... 
.................... void mode_flash_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05584:  MOVLW  4A
05586:  MOVWF  FF6
05588:  MOVLW  0E
0558A:  MOVWF  FF7
0558C:  MOVLW  00
0558E:  MOVWF  FF8
05590:  CALL   15D4
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05594:  MOVLB  3
05596:  MOVF   x8B,W
05598:  MOVWF  FE9
0559A:  MOVF   x8C,W
0559C:  MOVWF  FEA
0559E:  MOVFF  FEF,38D
055A2:  MOVLW  01
055A4:  ADDWF  x8B,W
055A6:  MOVWF  FE9
055A8:  MOVLW  00
055AA:  ADDWFC x8C,W
055AC:  MOVWF  FEA
055AE:  MOVF   FEF,W
055B0:  CLRF   x95
055B2:  CLRF   x94
055B4:  CLRF   x93
055B6:  MOVWF  x92
055B8:  MOVFF  392,395
055BC:  CLRF   x92
055BE:  CLRF   x93
055C0:  CLRF   x94
055C2:  MOVLW  02
055C4:  ADDWF  x8B,W
055C6:  MOVWF  FE9
055C8:  MOVLW  00
055CA:  ADDWFC x8C,W
055CC:  MOVWF  FEA
055CE:  MOVF   FEF,W
055D0:  CLRF   x9A
055D2:  CLRF   x99
055D4:  CLRF   x98
055D6:  MOVWF  x97
055D8:  MOVFF  398,03
055DC:  MOVFF  397,02
055E0:  CLRF   00
055E2:  CLRF   01
055E4:  MOVF   00,W
055E6:  IORWF  x92,F
055E8:  MOVF   01,W
055EA:  IORWF  x93,F
055EC:  MOVF   02,W
055EE:  IORWF  x94,F
055F0:  MOVF   03,W
055F2:  IORWF  x95,F
055F4:  MOVLW  03
055F6:  ADDWF  x8B,W
055F8:  MOVWF  FE9
055FA:  MOVLW  00
055FC:  ADDWFC x8C,W
055FE:  MOVWF  FEA
05600:  MOVF   FEF,W
05602:  CLRF   x9A
05604:  CLRF   x99
05606:  CLRF   x98
05608:  MOVWF  x97
0560A:  MOVFF  399,03
0560E:  MOVFF  398,02
05612:  MOVFF  397,01
05616:  CLRF   00
05618:  MOVF   00,W
0561A:  IORWF  x92,F
0561C:  MOVF   01,W
0561E:  IORWF  x93,F
05620:  MOVF   02,W
05622:  IORWF  x94,F
05624:  MOVF   03,W
05626:  IORWF  x95,F
05628:  MOVLW  04
0562A:  ADDWF  x8B,W
0562C:  MOVWF  FE9
0562E:  MOVLW  00
05630:  ADDWFC x8C,W
05632:  MOVWF  FEA
05634:  MOVF   FEF,W
05636:  MOVWF  00
05638:  CLRF   01
0563A:  CLRF   02
0563C:  CLRF   03
0563E:  MOVF   00,W
05640:  IORWF  x92,W
05642:  MOVWF  x8E
05644:  MOVF   01,W
05646:  IORWF  x93,W
05648:  MOVWF  x8F
0564A:  MOVF   02,W
0564C:  IORWF  x94,W
0564E:  MOVWF  x90
05650:  MOVF   03,W
05652:  IORWF  x95,W
05654:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05656:  MOVLW  70
05658:  MOVWF  FF6
0565A:  MOVLW  0E
0565C:  MOVWF  FF7
0565E:  MOVLW  00
05660:  MOVWF  FF8
05662:  MOVLW  16
05664:  MOVLB  7
05666:  MOVWF  xEC
05668:  MOVLB  0
0566A:  CALL   1604
0566E:  MOVFF  391,4A4
05672:  MOVLW  37
05674:  MOVLB  4
05676:  MOVWF  xA5
05678:  MOVLB  0
0567A:  CALL   1C0A
0567E:  MOVFF  390,4A4
05682:  MOVLW  37
05684:  MOVLB  4
05686:  MOVWF  xA5
05688:  MOVLB  0
0568A:  CALL   1C0A
0568E:  MOVFF  38F,4A4
05692:  MOVLW  37
05694:  MOVLB  4
05696:  MOVWF  xA5
05698:  MOVLB  0
0569A:  CALL   1C0A
0569E:  MOVFF  38E,4A4
056A2:  MOVLW  37
056A4:  MOVLB  4
056A6:  MOVWF  xA5
056A8:  MOVLB  0
056AA:  CALL   1C0A
056AE:  MOVLW  0D
056B0:  MOVLB  8
056B2:  MOVWF  x2F
056B4:  MOVLB  0
056B6:  CALL   1582
056BA:  MOVLW  0A
056BC:  MOVLB  8
056BE:  MOVWF  x2F
056C0:  MOVLB  0
056C2:  CALL   1582
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
056C6:  MOVFF  38D,492
056CA:  MOVLW  01
056CC:  MOVLB  4
056CE:  MOVWF  x93
056D0:  MOVLB  0
056D2:  CALL   3396
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
056D6:  MOVFF  38D,492
056DA:  MOVLW  02
056DC:  MOVLB  4
056DE:  MOVWF  x93
056E0:  MOVLB  0
056E2:  CALL   3396
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
056E6:  MOVLW  8E
056E8:  MOVWF  FF6
056EA:  MOVLW  0E
056EC:  MOVWF  FF7
056EE:  MOVLW  00
056F0:  MOVWF  FF8
056F2:  CALL   15D4
056F6:  GOTO   6AF2 (RETURN)
.................... }
.................... 
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
056FA:  MOVLW  B2
056FC:  MOVWF  FF6
056FE:  MOVLW  0E
05700:  MOVWF  FF7
05702:  MOVLW  00
05704:  MOVWF  FF8
05706:  CALL   15D4
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0570A:  MOVLB  3
0570C:  MOVF   x8B,W
0570E:  MOVWF  FE9
05710:  MOVF   x8C,W
05712:  MOVWF  FEA
05714:  MOVFF  FEF,3DD
05718:  MOVFF  3DD,492
0571C:  MOVLW  01
0571E:  MOVLB  4
05720:  MOVWF  x93
05722:  MOVLB  0
05724:  CALL   3396
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05728:  MOVLB  3
0572A:  CLRF   x8D
0572C:  CLRF   x8E
0572E:  CLRF   x8F
05730:  CLRF   x90
05732:  CLRF   x91
05734:  CLRF   x92
05736:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
05738:  MOVF   x8B,W
0573A:  MOVWF  FE9
0573C:  MOVF   x8C,W
0573E:  MOVWF  FEA
05740:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05744:  MOVLW  01
05746:  ADDWF  x8B,W
05748:  MOVWF  FE9
0574A:  MOVLW  00
0574C:  ADDWFC x8C,W
0574E:  MOVWF  FEA
05750:  MOVF   FEF,W
05752:  CLRF   xE0
05754:  CLRF   xDF
05756:  CLRF   xDE
05758:  MOVWF  xDD
0575A:  MOVFF  3DD,3E0
0575E:  CLRF   xDD
05760:  CLRF   xDE
05762:  CLRF   xDF
05764:  MOVLW  02
05766:  ADDWF  x8B,W
05768:  MOVWF  FE9
0576A:  MOVLW  00
0576C:  ADDWFC x8C,W
0576E:  MOVWF  FEA
05770:  MOVF   FEF,W
05772:  CLRF   xE5
05774:  CLRF   xE4
05776:  CLRF   xE3
05778:  MOVWF  xE2
0577A:  MOVFF  3E3,03
0577E:  MOVFF  3E2,02
05782:  CLRF   00
05784:  CLRF   01
05786:  MOVF   00,W
05788:  IORWF  xDD,F
0578A:  MOVF   01,W
0578C:  IORWF  xDE,F
0578E:  MOVF   02,W
05790:  IORWF  xDF,F
05792:  MOVF   03,W
05794:  IORWF  xE0,F
05796:  MOVLW  03
05798:  ADDWF  x8B,W
0579A:  MOVWF  FE9
0579C:  MOVLW  00
0579E:  ADDWFC x8C,W
057A0:  MOVWF  FEA
057A2:  MOVF   FEF,W
057A4:  CLRF   xE5
057A6:  CLRF   xE4
057A8:  CLRF   xE3
057AA:  MOVWF  xE2
057AC:  MOVFF  3E4,03
057B0:  MOVFF  3E3,02
057B4:  MOVFF  3E2,01
057B8:  CLRF   00
057BA:  MOVF   00,W
057BC:  IORWF  xDD,F
057BE:  MOVF   01,W
057C0:  IORWF  xDE,F
057C2:  MOVF   02,W
057C4:  IORWF  xDF,F
057C6:  MOVF   03,W
057C8:  IORWF  xE0,F
057CA:  MOVLW  04
057CC:  ADDWF  x8B,W
057CE:  MOVWF  FE9
057D0:  MOVLW  00
057D2:  ADDWFC x8C,W
057D4:  MOVWF  FEA
057D6:  MOVF   FEF,W
057D8:  MOVWF  00
057DA:  CLRF   01
057DC:  CLRF   02
057DE:  CLRF   03
057E0:  MOVF   00,W
057E2:  IORWF  xDD,W
057E4:  MOVWF  x8E
057E6:  MOVF   01,W
057E8:  IORWF  xDE,W
057EA:  MOVWF  x8F
057EC:  MOVF   02,W
057EE:  IORWF  xDF,W
057F0:  MOVWF  x90
057F2:  MOVF   03,W
057F4:  IORWF  xE0,W
057F6:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
057F8:  MOVLW  07
057FA:  ADDWF  x8B,W
057FC:  MOVWF  FE9
057FE:  MOVLW  00
05800:  ADDWFC x8C,W
05802:  MOVWF  FEA
05804:  MOVF   FEF,W
05806:  CLRF   xDE
05808:  MOVWF  xDD
0580A:  MOVFF  3DD,3DE
0580E:  CLRF   xDD
05810:  MOVLW  08
05812:  ADDWF  x8B,W
05814:  MOVWF  FE9
05816:  MOVLW  00
05818:  ADDWFC x8C,W
0581A:  MOVWF  FEA
0581C:  MOVF   FEF,W
0581E:  CLRF   03
05820:  IORWF  xDD,W
05822:  MOVWF  x92
05824:  MOVF   03,W
05826:  IORWF  xDE,W
05828:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0582A:  MOVLW  CC
0582C:  MOVWF  FF6
0582E:  MOVLW  0E
05830:  MOVWF  FF7
05832:  MOVLW  00
05834:  MOVWF  FF8
05836:  MOVLW  0C
05838:  MOVLB  7
0583A:  MOVWF  xEC
0583C:  MOVLB  0
0583E:  CALL   1604
05842:  MOVFF  38D,4A4
05846:  MOVLW  37
05848:  MOVLB  4
0584A:  MOVWF  xA5
0584C:  MOVLB  0
0584E:  CALL   1C0A
05852:  MOVLW  0D
05854:  MOVLB  8
05856:  MOVWF  x2F
05858:  MOVLB  0
0585A:  CALL   1582
0585E:  MOVLW  0A
05860:  MOVLB  8
05862:  MOVWF  x2F
05864:  MOVLB  0
05866:  CALL   1582
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
0586A:  MOVLW  E0
0586C:  MOVWF  FF6
0586E:  MOVLW  0E
05870:  MOVWF  FF7
05872:  MOVLW  00
05874:  MOVWF  FF8
05876:  MOVLW  0E
05878:  MOVLB  7
0587A:  MOVWF  xEC
0587C:  MOVLB  0
0587E:  CALL   1604
05882:  MOVFF  391,4A4
05886:  MOVLW  37
05888:  MOVLB  4
0588A:  MOVWF  xA5
0588C:  MOVLB  0
0588E:  CALL   1C0A
05892:  MOVFF  390,4A4
05896:  MOVLW  37
05898:  MOVLB  4
0589A:  MOVWF  xA5
0589C:  MOVLB  0
0589E:  CALL   1C0A
058A2:  MOVFF  38F,4A4
058A6:  MOVLW  37
058A8:  MOVLB  4
058AA:  MOVWF  xA5
058AC:  MOVLB  0
058AE:  CALL   1C0A
058B2:  MOVFF  38E,4A4
058B6:  MOVLW  37
058B8:  MOVLB  4
058BA:  MOVWF  xA5
058BC:  MOVLB  0
058BE:  CALL   1C0A
058C2:  MOVLW  0D
058C4:  MOVLB  8
058C6:  MOVWF  x2F
058C8:  MOVLB  0
058CA:  CALL   1582
058CE:  MOVLW  0A
058D0:  MOVLB  8
058D2:  MOVWF  x2F
058D4:  MOVLB  0
058D6:  CALL   1582
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
058DA:  MOVLW  F6
058DC:  MOVWF  FF6
058DE:  MOVLW  0E
058E0:  MOVWF  FF7
058E2:  MOVLW  00
058E4:  MOVWF  FF8
058E6:  MOVLW  0E
058E8:  MOVLB  7
058EA:  MOVWF  xEC
058EC:  MOVLB  0
058EE:  CALL   1604
058F2:  MOVFF  393,4A4
058F6:  MOVLW  37
058F8:  MOVLB  4
058FA:  MOVWF  xA5
058FC:  MOVLB  0
058FE:  CALL   1C0A
05902:  MOVFF  392,4A4
05906:  MOVLW  37
05908:  MOVLB  4
0590A:  MOVWF  xA5
0590C:  MOVLB  0
0590E:  CALL   1C0A
05912:  MOVLW  0D
05914:  MOVLB  8
05916:  MOVWF  x2F
05918:  MOVLB  0
0591A:  CALL   1582
0591E:  MOVLW  0A
05920:  MOVLB  8
05922:  MOVWF  x2F
05924:  MOVLB  0
05926:  CALL   1582
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
0592A:  MOVFF  38D,492
0592E:  MOVLB  4
05930:  CLRF   x93
05932:  MOVLB  0
05934:  CALL   3396
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05938:  MOVLW  0C
0593A:  MOVWF  FF6
0593C:  MOVLW  0F
0593E:  MOVWF  FF7
05940:  MOVLW  00
05942:  MOVWF  FF8
05944:  CALL   15D4
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05948:  MOVLB  3
0594A:  CLRF   xD5
0594C:  CLRF   xD4
0594E:  MOVLB  0
05950:  MOVLB  3
05952:  MOVF   xD5,W
05954:  SUBWF  x93,W
05956:  BTFSC  FD8.0
05958:  BRA    5960
0595A:  MOVLB  0
0595C:  GOTO   5A8E
05960:  MOVLB  0
05962:  BTFSS  FD8.2
05964:  GOTO   597A
05968:  MOVLB  3
0596A:  MOVF   x92,W
0596C:  SUBWF  xD4,W
0596E:  BTFSS  FD8.0
05970:  BRA    5978
05972:  MOVLB  0
05974:  GOTO   5A8E
05978:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
0597A:  MOVLB  3
0597C:  RLCF   xD4,W
0597E:  MOVWF  xD6
05980:  RLCF   xD5,W
05982:  MOVWF  xD7
05984:  RLCF   xD6,F
05986:  RLCF   xD7,F
05988:  RLCF   xD6,F
0598A:  RLCF   xD7,F
0598C:  RLCF   xD6,F
0598E:  RLCF   xD7,F
05990:  RLCF   xD6,F
05992:  RLCF   xD7,F
05994:  RLCF   xD6,F
05996:  RLCF   xD7,F
05998:  MOVLW  C0
0599A:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
0599C:  CLRF   xD8
0599E:  MOVLB  0
059A0:  MOVLB  3
059A2:  MOVF   xD8,W
059A4:  SUBLW  3F
059A6:  BTFSC  FD8.0
059A8:  BRA    59B0
059AA:  MOVLB  0
059AC:  GOTO   5A10
059B0:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
059B2:  CLRF   03
059B4:  MOVLB  3
059B6:  MOVF   xD8,W
059B8:  ADDLW  94
059BA:  MOVWF  FE9
059BC:  MOVLW  03
059BE:  ADDWFC 03,W
059C0:  MOVWF  FEA
059C2:  MOVF   xD8,W
059C4:  ADDWF  xD6,W
059C6:  MOVWF  xDF
059C8:  MOVLW  00
059CA:  ADDWFC xD7,W
059CC:  MOVWF  xE0
059CE:  MOVF   xDF,W
059D0:  MOVWF  00
059D2:  CLRF   03
059D4:  MOVF   00,W
059D6:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
059D8:  CLRF   03
059DA:  MOVF   xD8,W
059DC:  ADDLW  94
059DE:  MOVWF  FE9
059E0:  MOVLW  03
059E2:  ADDWFC 03,W
059E4:  MOVWF  FEA
059E6:  MOVFF  FEF,3DD
059EA:  MOVFF  3DD,4A4
059EE:  MOVLW  37
059F0:  MOVLB  4
059F2:  MOVWF  xA5
059F4:  MOVLB  0
059F6:  CALL   1C0A
059FA:  MOVLW  20
059FC:  MOVLB  8
059FE:  MOVWF  x2F
05A00:  MOVLB  0
05A02:  CALL   1582
05A06:  MOVLB  3
05A08:  INCF   xD8,F
05A0A:  MOVLB  0
05A0C:  GOTO   59A0
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05A10:  MOVLB  3
05A12:  RLCF   xD4,W
05A14:  MOVWF  02
05A16:  RLCF   xD5,W
05A18:  MOVWF  03
05A1A:  RLCF   02,F
05A1C:  RLCF   03,F
05A1E:  RLCF   02,F
05A20:  RLCF   03,F
05A22:  RLCF   02,F
05A24:  RLCF   03,F
05A26:  RLCF   02,F
05A28:  RLCF   03,F
05A2A:  RLCF   02,F
05A2C:  RLCF   03,F
05A2E:  MOVLW  C0
05A30:  ANDWF  02,F
05A32:  MOVF   02,W
05A34:  ADDWF  x8E,W
05A36:  MOVWF  xD9
05A38:  MOVF   03,W
05A3A:  ADDWFC x8F,W
05A3C:  MOVWF  xDA
05A3E:  MOVLW  00
05A40:  ADDWFC x90,W
05A42:  MOVWF  xDB
05A44:  MOVLW  00
05A46:  ADDWFC x91,W
05A48:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
05A4A:  MOVFF  E1,82F
05A4E:  MOVFF  E0,82E
05A52:  MOVFF  DF,82D
05A56:  MOVFF  DE,82C
05A5A:  MOVFF  3DC,833
05A5E:  MOVFF  3DB,832
05A62:  MOVFF  3DA,831
05A66:  MOVFF  3D9,830
05A6A:  MOVLW  03
05A6C:  MOVLB  8
05A6E:  MOVWF  x35
05A70:  MOVLW  94
05A72:  MOVWF  x34
05A74:  CLRF   x37
05A76:  MOVLW  40
05A78:  MOVWF  x36
05A7A:  MOVLB  0
05A7C:  CALL   2A00
05A80:  MOVLB  3
05A82:  INCF   xD4,F
05A84:  BTFSC  FD8.2
05A86:  INCF   xD5,F
05A88:  MOVLB  0
05A8A:  GOTO   5950
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05A8E:  MOVFF  38D,492
05A92:  MOVLW  02
05A94:  MOVLB  4
05A96:  MOVWF  x93
05A98:  MOVLB  0
05A9A:  CALL   3396
....................    fprintf(PC, "\r\n");
05A9E:  MOVLW  0D
05AA0:  MOVLB  8
05AA2:  MOVWF  x2F
05AA4:  MOVLB  0
05AA6:  CALL   1582
05AAA:  MOVLW  0A
05AAC:  MOVLB  8
05AAE:  MOVWF  x2F
05AB0:  MOVLB  0
05AB2:  CALL   1582
....................    fprintf(PC, "End Flash Write Demo\r\n");
05AB6:  MOVLW  1A
05AB8:  MOVWF  FF6
05ABA:  MOVLW  0F
05ABC:  MOVWF  FF7
05ABE:  MOVLW  00
05AC0:  MOVWF  FF8
05AC2:  CALL   15D4
05AC6:  GOTO   6B02 (RETURN)
.................... }
.................... 
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05AFA:  MOVLW  32
05AFC:  MOVWF  FF6
05AFE:  MOVLW  0F
05B00:  MOVWF  FF7
05B02:  MOVLW  00
05B04:  MOVWF  FF8
05B06:  CALL   15D4
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05B0A:  MOVLB  3
05B0C:  MOVF   x8B,W
05B0E:  MOVWF  FE9
05B10:  MOVF   x8C,W
05B12:  MOVWF  FEA
05B14:  MOVFF  FEF,491
05B18:  MOVFF  491,492
05B1C:  MOVLW  01
05B1E:  MOVLB  4
05B20:  MOVWF  x93
05B22:  MOVLB  0
05B24:  CALL   3396
....................    flash_setting(mis_fm);
05B28:  MOVFF  E1,498
05B2C:  MOVFF  E0,497
05B30:  MOVFF  DF,496
05B34:  MOVFF  DE,495
05B38:  CALL   5ACA
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
05B3C:  MOVLB  3
05B3E:  CLRF   x90
05B40:  CLRF   x8F
05B42:  CLRF   x8E
05B44:  CLRF   x8D
05B46:  MOVLW  01
05B48:  MOVWF  x91
05B4A:  MOVLW  02
05B4C:  MOVWF  x92
05B4E:  MOVLW  03
05B50:  MOVWF  x93
05B52:  MOVLW  04
05B54:  MOVWF  x94
05B56:  CLRF   x95
05B58:  CLRF   x96
05B5A:  CLRF   x97
05B5C:  CLRF   x98
05B5E:  CLRF   x99
05B60:  CLRF   x9A
05B62:  CLRF   x9B
05B64:  CLRF   x9C
05B66:  CLRF   x9D
05B68:  CLRF   x9E
05B6A:  CLRF   x9F
05B6C:  CLRF   xA0
05B6E:  CLRF   xA1
05B70:  CLRF   xA2
05B72:  CLRF   xA3
05B74:  CLRF   xA4
05B76:  CLRF   xA5
05B78:  CLRF   xA6
05B7A:  CLRF   xA7
05B7C:  CLRF   xA8
05B7E:  CLRF   xA9
05B80:  CLRF   xAA
05B82:  CLRF   xAB
05B84:  CLRF   xAC
05B86:  CLRF   xAD
05B88:  CLRF   xAE
05B8A:  CLRF   xAF
05B8C:  CLRF   xB0
05B8E:  CLRF   xB1
05B90:  CLRF   xB2
05B92:  CLRF   xB3
05B94:  CLRF   xB4
05B96:  CLRF   xB5
05B98:  CLRF   xB6
05B9A:  CLRF   xB7
05B9C:  CLRF   xB8
05B9E:  CLRF   xB9
05BA0:  CLRF   xBA
05BA2:  CLRF   xBB
05BA4:  CLRF   xBC
05BA6:  CLRF   xBD
05BA8:  CLRF   xBE
05BAA:  CLRF   xBF
05BAC:  CLRF   xC0
05BAE:  CLRF   xC1
05BB0:  CLRF   xC2
05BB2:  CLRF   xC3
05BB4:  CLRF   xC4
05BB6:  CLRF   xC5
05BB8:  CLRF   xC6
05BBA:  CLRF   xC7
05BBC:  CLRF   xC8
05BBE:  CLRF   xC9
05BC0:  CLRF   xCA
05BC2:  CLRF   xCB
05BC4:  CLRF   xCC
05BC6:  CLRF   xCD
05BC8:  CLRF   xCE
05BCA:  CLRF   xCF
05BCC:  CLRF   xD0
05BCE:  CLRF   xD1
05BD0:  CLRF   xD2
05BD2:  CLRF   xD3
05BD4:  CLRF   xD4
05BD6:  CLRF   xD5
05BD8:  CLRF   xD6
05BDA:  CLRF   xD7
05BDC:  CLRF   xD8
05BDE:  CLRF   xD9
05BE0:  CLRF   xDA
05BE2:  CLRF   xDB
05BE4:  CLRF   xDC
05BE6:  CLRF   xDD
05BE8:  CLRF   xDE
05BEA:  CLRF   xDF
05BEC:  CLRF   xE0
05BEE:  CLRF   xE1
05BF0:  CLRF   xE2
05BF2:  CLRF   xE3
05BF4:  CLRF   xE4
05BF6:  CLRF   xE5
05BF8:  CLRF   xE6
05BFA:  CLRF   xE7
05BFC:  CLRF   xE8
05BFE:  CLRF   xE9
05C00:  CLRF   xEA
05C02:  CLRF   xEB
05C04:  CLRF   xEC
05C06:  CLRF   xED
05C08:  CLRF   xEE
05C0A:  CLRF   xEF
05C0C:  CLRF   xF0
05C0E:  CLRF   xF1
05C10:  CLRF   xF2
05C12:  CLRF   xF3
05C14:  CLRF   xF4
05C16:  CLRF   xF5
05C18:  CLRF   xF6
05C1A:  CLRF   xF7
05C1C:  CLRF   xF8
05C1E:  CLRF   xF9
05C20:  CLRF   xFA
05C22:  CLRF   xFB
05C24:  CLRF   xFC
05C26:  CLRF   xFD
05C28:  CLRF   xFE
05C2A:  CLRF   xFF
05C2C:  MOVLB  4
05C2E:  CLRF   x00
05C30:  CLRF   x01
05C32:  CLRF   x02
05C34:  CLRF   x03
05C36:  CLRF   x04
05C38:  CLRF   x05
05C3A:  CLRF   x06
05C3C:  CLRF   x07
05C3E:  CLRF   x08
05C40:  CLRF   x09
05C42:  CLRF   x0A
05C44:  CLRF   x0B
05C46:  CLRF   x0C
05C48:  CLRF   x0D
05C4A:  CLRF   x0E
05C4C:  CLRF   x0F
05C4E:  CLRF   x10
05C50:  CLRF   x11
05C52:  CLRF   x12
05C54:  CLRF   x13
05C56:  CLRF   x14
05C58:  CLRF   x15
05C5A:  CLRF   x16
05C5C:  CLRF   x17
05C5E:  CLRF   x18
05C60:  CLRF   x19
05C62:  CLRF   x1A
05C64:  CLRF   x1B
05C66:  CLRF   x1C
05C68:  CLRF   x1D
05C6A:  CLRF   x1E
05C6C:  CLRF   x1F
05C6E:  CLRF   x20
05C70:  CLRF   x21
05C72:  CLRF   x22
05C74:  CLRF   x23
05C76:  CLRF   x24
05C78:  CLRF   x25
05C7A:  CLRF   x26
05C7C:  CLRF   x27
05C7E:  CLRF   x28
05C80:  CLRF   x29
05C82:  CLRF   x2A
05C84:  CLRF   x2B
05C86:  CLRF   x2C
05C88:  CLRF   x2D
05C8A:  CLRF   x2E
05C8C:  CLRF   x2F
05C8E:  CLRF   x30
05C90:  CLRF   x31
05C92:  CLRF   x32
05C94:  CLRF   x33
05C96:  CLRF   x34
05C98:  CLRF   x35
05C9A:  CLRF   x36
05C9C:  CLRF   x37
05C9E:  CLRF   x38
05CA0:  CLRF   x39
05CA2:  CLRF   x3A
05CA4:  CLRF   x3B
05CA6:  CLRF   x3C
05CA8:  CLRF   x3D
05CAA:  CLRF   x3E
05CAC:  CLRF   x3F
05CAE:  CLRF   x40
05CB0:  CLRF   x41
05CB2:  CLRF   x42
05CB4:  CLRF   x43
05CB6:  CLRF   x44
05CB8:  CLRF   x45
05CBA:  CLRF   x46
05CBC:  CLRF   x47
05CBE:  CLRF   x48
05CC0:  CLRF   x49
05CC2:  CLRF   x4A
05CC4:  CLRF   x4B
05CC6:  CLRF   x4C
05CC8:  CLRF   x4D
05CCA:  CLRF   x4E
05CCC:  CLRF   x4F
05CCE:  CLRF   x50
05CD0:  CLRF   x51
05CD2:  CLRF   x52
05CD4:  CLRF   x53
05CD6:  CLRF   x54
05CD8:  CLRF   x55
05CDA:  CLRF   x56
05CDC:  CLRF   x57
05CDE:  CLRF   x58
05CE0:  CLRF   x59
05CE2:  CLRF   x5A
05CE4:  CLRF   x5B
05CE6:  CLRF   x5C
05CE8:  CLRF   x5D
05CEA:  CLRF   x5E
05CEC:  CLRF   x5F
05CEE:  CLRF   x60
05CF0:  CLRF   x61
05CF2:  CLRF   x62
05CF4:  CLRF   x63
05CF6:  CLRF   x64
05CF8:  CLRF   x65
05CFA:  CLRF   x66
05CFC:  CLRF   x67
05CFE:  CLRF   x68
05D00:  CLRF   x69
05D02:  CLRF   x6A
05D04:  CLRF   x6B
05D06:  CLRF   x6C
05D08:  CLRF   x6D
05D0A:  CLRF   x6E
05D0C:  CLRF   x6F
05D0E:  CLRF   x70
05D10:  CLRF   x71
05D12:  CLRF   x72
05D14:  CLRF   x73
05D16:  CLRF   x74
05D18:  CLRF   x75
05D1A:  CLRF   x76
05D1C:  CLRF   x77
05D1E:  CLRF   x78
05D20:  CLRF   x79
05D22:  CLRF   x7A
05D24:  CLRF   x7B
05D26:  CLRF   x7C
05D28:  CLRF   x7D
05D2A:  CLRF   x7E
05D2C:  CLRF   x7F
05D2E:  CLRF   x80
05D30:  CLRF   x81
05D32:  CLRF   x82
05D34:  CLRF   x83
05D36:  CLRF   x84
05D38:  CLRF   x85
05D3A:  CLRF   x86
05D3C:  CLRF   x87
05D3E:  CLRF   x88
05D40:  CLRF   x89
05D42:  CLRF   x8A
05D44:  CLRF   x8B
05D46:  CLRF   x8C
05D48:  CLRF   x8D
05D4A:  CLRF   x8E
05D4C:  CLRF   x8F
05D4E:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
05D50:  MOVFF  E1,82F
05D54:  MOVFF  E0,82E
05D58:  MOVFF  DF,82D
05D5C:  MOVFF  DE,82C
05D60:  MOVFF  390,833
05D64:  MOVFF  38F,832
05D68:  MOVFF  38E,831
05D6C:  MOVFF  38D,830
05D70:  MOVLW  03
05D72:  MOVLB  8
05D74:  MOVWF  x35
05D76:  MOVLW  91
05D78:  MOVWF  x34
05D7A:  MOVLW  01
05D7C:  MOVWF  x37
05D7E:  CLRF   x36
05D80:  MOVLB  0
05D82:  CALL   2A00
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05D86:  MOVLB  3
05D88:  MOVF   x8B,W
05D8A:  MOVWF  FE9
05D8C:  MOVF   x8C,W
05D8E:  MOVWF  FEA
05D90:  MOVFF  FEF,491
05D94:  MOVFF  491,492
05D98:  MOVLW  02
05D9A:  MOVLB  4
05D9C:  MOVWF  x93
05D9E:  MOVLB  0
05DA0:  CALL   3396
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
05DA4:  MOVLW  58
05DA6:  MOVWF  FF6
05DA8:  MOVLW  0F
05DAA:  MOVWF  FF7
05DAC:  MOVLW  00
05DAE:  MOVWF  FF8
05DB0:  CALL   15D4
05DB4:  GOTO   6B12 (RETURN)
.................... }
.................... 
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
05DB8:  MOVLW  7C
05DBA:  MOVWF  FF6
05DBC:  MOVLW  0F
05DBE:  MOVWF  FF7
05DC0:  MOVLW  00
05DC2:  MOVWF  FF8
05DC4:  CALL   15D4
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
05DC8:  MOVLB  3
05DCA:  MOVF   x8B,W
05DCC:  MOVWF  FE9
05DCE:  MOVF   x8C,W
05DD0:  MOVWF  FEA
05DD2:  MOVFF  FEF,3DD
05DD6:  MOVFF  3DD,492
05DDA:  MOVLW  01
05DDC:  MOVLB  4
05DDE:  MOVWF  x93
05DE0:  MOVLB  0
05DE2:  CALL   3396
....................    FLASH_PARAM flash_param = {0};
05DE6:  MOVLB  3
05DE8:  CLRF   x8D
05DEA:  CLRF   x8E
05DEC:  CLRF   x8F
05DEE:  CLRF   x90
05DF0:  CLRF   x91
05DF2:  CLRF   x92
05DF4:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
05DF6:  MOVF   x8B,W
05DF8:  MOVWF  FE9
05DFA:  MOVF   x8C,W
05DFC:  MOVWF  FEA
05DFE:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
05E02:  MOVLW  01
05E04:  ADDWF  x8B,W
05E06:  MOVWF  FE9
05E08:  MOVLW  00
05E0A:  ADDWFC x8C,W
05E0C:  MOVWF  FEA
05E0E:  MOVF   FEF,W
05E10:  CLRF   xE0
05E12:  CLRF   xDF
05E14:  CLRF   xDE
05E16:  MOVWF  xDD
05E18:  MOVFF  3DD,3E0
05E1C:  CLRF   xDD
05E1E:  CLRF   xDE
05E20:  CLRF   xDF
05E22:  MOVLW  02
05E24:  ADDWF  x8B,W
05E26:  MOVWF  FE9
05E28:  MOVLW  00
05E2A:  ADDWFC x8C,W
05E2C:  MOVWF  FEA
05E2E:  MOVF   FEF,W
05E30:  CLRF   xE5
05E32:  CLRF   xE4
05E34:  CLRF   xE3
05E36:  MOVWF  xE2
05E38:  MOVFF  3E3,03
05E3C:  MOVFF  3E2,02
05E40:  CLRF   00
05E42:  CLRF   01
05E44:  MOVF   00,W
05E46:  IORWF  xDD,F
05E48:  MOVF   01,W
05E4A:  IORWF  xDE,F
05E4C:  MOVF   02,W
05E4E:  IORWF  xDF,F
05E50:  MOVF   03,W
05E52:  IORWF  xE0,F
05E54:  MOVLW  03
05E56:  ADDWF  x8B,W
05E58:  MOVWF  FE9
05E5A:  MOVLW  00
05E5C:  ADDWFC x8C,W
05E5E:  MOVWF  FEA
05E60:  MOVF   FEF,W
05E62:  CLRF   xE5
05E64:  CLRF   xE4
05E66:  CLRF   xE3
05E68:  MOVWF  xE2
05E6A:  MOVFF  3E4,03
05E6E:  MOVFF  3E3,02
05E72:  MOVFF  3E2,01
05E76:  CLRF   00
05E78:  MOVF   00,W
05E7A:  IORWF  xDD,F
05E7C:  MOVF   01,W
05E7E:  IORWF  xDE,F
05E80:  MOVF   02,W
05E82:  IORWF  xDF,F
05E84:  MOVF   03,W
05E86:  IORWF  xE0,F
05E88:  MOVLW  04
05E8A:  ADDWF  x8B,W
05E8C:  MOVWF  FE9
05E8E:  MOVLW  00
05E90:  ADDWFC x8C,W
05E92:  MOVWF  FEA
05E94:  MOVF   FEF,W
05E96:  MOVWF  00
05E98:  CLRF   01
05E9A:  CLRF   02
05E9C:  CLRF   03
05E9E:  MOVF   00,W
05EA0:  IORWF  xDD,W
05EA2:  MOVWF  x90
05EA4:  MOVF   01,W
05EA6:  IORWF  xDE,W
05EA8:  MOVWF  x91
05EAA:  MOVF   02,W
05EAC:  IORWF  xDF,W
05EAE:  MOVWF  x92
05EB0:  MOVF   03,W
05EB2:  IORWF  xE0,W
05EB4:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
05EB6:  MOVLW  07
05EB8:  ADDWF  x8B,W
05EBA:  MOVWF  FE9
05EBC:  MOVLW  00
05EBE:  ADDWFC x8C,W
05EC0:  MOVWF  FEA
05EC2:  MOVF   FEF,W
05EC4:  CLRF   xDE
05EC6:  MOVWF  xDD
05EC8:  MOVFF  3DD,3DE
05ECC:  CLRF   xDD
05ECE:  MOVLW  08
05ED0:  ADDWF  x8B,W
05ED2:  MOVWF  FE9
05ED4:  MOVLW  00
05ED6:  ADDWFC x8C,W
05ED8:  MOVWF  FEA
05EDA:  MOVF   FEF,W
05EDC:  CLRF   03
05EDE:  IORWF  xDD,W
05EE0:  MOVWF  x8E
05EE2:  MOVF   03,W
05EE4:  IORWF  xDE,W
05EE6:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
05EE8:  MOVLW  90
05EEA:  MOVWF  FF6
05EEC:  MOVLW  0F
05EEE:  MOVWF  FF7
05EF0:  MOVLW  00
05EF2:  MOVWF  FF8
05EF4:  MOVLW  0C
05EF6:  MOVLB  7
05EF8:  MOVWF  xEC
05EFA:  MOVLB  0
05EFC:  CALL   1604
05F00:  MOVFF  38D,4A4
05F04:  MOVLW  37
05F06:  MOVLB  4
05F08:  MOVWF  xA5
05F0A:  MOVLB  0
05F0C:  CALL   1C0A
05F10:  MOVLW  0D
05F12:  MOVLB  8
05F14:  MOVWF  x2F
05F16:  MOVLB  0
05F18:  CALL   1582
05F1C:  MOVLW  0A
05F1E:  MOVLB  8
05F20:  MOVWF  x2F
05F22:  MOVLB  0
05F24:  CALL   1582
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
05F28:  MOVLW  A4
05F2A:  MOVWF  FF6
05F2C:  MOVLW  0F
05F2E:  MOVWF  FF7
05F30:  MOVLW  00
05F32:  MOVWF  FF8
05F34:  MOVLW  0E
05F36:  MOVLB  7
05F38:  MOVWF  xEC
05F3A:  MOVLB  0
05F3C:  CALL   1604
05F40:  MOVFF  393,4A4
05F44:  MOVLW  37
05F46:  MOVLB  4
05F48:  MOVWF  xA5
05F4A:  MOVLB  0
05F4C:  CALL   1C0A
05F50:  MOVFF  392,4A4
05F54:  MOVLW  37
05F56:  MOVLB  4
05F58:  MOVWF  xA5
05F5A:  MOVLB  0
05F5C:  CALL   1C0A
05F60:  MOVFF  391,4A4
05F64:  MOVLW  37
05F66:  MOVLB  4
05F68:  MOVWF  xA5
05F6A:  MOVLB  0
05F6C:  CALL   1C0A
05F70:  MOVFF  390,4A4
05F74:  MOVLW  37
05F76:  MOVLB  4
05F78:  MOVWF  xA5
05F7A:  MOVLB  0
05F7C:  CALL   1C0A
05F80:  MOVLW  0D
05F82:  MOVLB  8
05F84:  MOVWF  x2F
05F86:  MOVLB  0
05F88:  CALL   1582
05F8C:  MOVLW  0A
05F8E:  MOVLB  8
05F90:  MOVWF  x2F
05F92:  MOVLB  0
05F94:  CALL   1582
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
05F98:  MOVLW  BA
05F9A:  MOVWF  FF6
05F9C:  MOVLW  0F
05F9E:  MOVWF  FF7
05FA0:  MOVLW  00
05FA2:  MOVWF  FF8
05FA4:  MOVLW  0E
05FA6:  MOVLB  7
05FA8:  MOVWF  xEC
05FAA:  MOVLB  0
05FAC:  CALL   1604
05FB0:  MOVFF  38F,4A4
05FB4:  MOVLW  37
05FB6:  MOVLB  4
05FB8:  MOVWF  xA5
05FBA:  MOVLB  0
05FBC:  CALL   1C0A
05FC0:  MOVFF  38E,4A4
05FC4:  MOVLW  37
05FC6:  MOVLB  4
05FC8:  MOVWF  xA5
05FCA:  MOVLB  0
05FCC:  CALL   1C0A
05FD0:  MOVLW  0D
05FD2:  MOVLB  8
05FD4:  MOVWF  x2F
05FD6:  MOVLB  0
05FD8:  CALL   1582
05FDC:  MOVLW  0A
05FDE:  MOVLB  8
05FE0:  MOVWF  x2F
05FE2:  MOVLB  0
05FE4:  CALL   1582
....................    
....................    piclog_make(flash_param.id, 0x00);
05FE8:  MOVFF  38D,492
05FEC:  MOVLB  4
05FEE:  CLRF   x93
05FF0:  MOVLB  0
05FF2:  CALL   3396
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
05FF6:  MOVLB  3
05FF8:  CLRF   x94
05FFA:  CLRF   x95
05FFC:  CLRF   x96
05FFE:  CLRF   x97
06000:  CLRF   x98
06002:  CLRF   x99
06004:  CLRF   x9A
06006:  CLRF   x9B
06008:  CLRF   x9C
0600A:  CLRF   x9D
0600C:  CLRF   x9E
0600E:  CLRF   x9F
06010:  CLRF   xA0
06012:  CLRF   xA1
06014:  CLRF   xA2
06016:  CLRF   xA3
06018:  CLRF   xA4
0601A:  CLRF   xA5
0601C:  CLRF   xA6
0601E:  CLRF   xA7
06020:  CLRF   xA8
06022:  CLRF   xA9
06024:  CLRF   xAA
06026:  CLRF   xAB
06028:  CLRF   xAC
0602A:  CLRF   xAD
0602C:  CLRF   xAE
0602E:  CLRF   xAF
06030:  CLRF   xB0
06032:  CLRF   xB1
06034:  CLRF   xB2
06036:  CLRF   xB3
06038:  CLRF   xB4
0603A:  CLRF   xB5
0603C:  CLRF   xB6
0603E:  CLRF   xB7
06040:  CLRF   xB8
06042:  CLRF   xB9
06044:  CLRF   xBA
06046:  CLRF   xBB
06048:  CLRF   xBC
0604A:  CLRF   xBD
0604C:  CLRF   xBE
0604E:  CLRF   xBF
06050:  CLRF   xC0
06052:  CLRF   xC1
06054:  CLRF   xC2
06056:  CLRF   xC3
06058:  CLRF   xC4
0605A:  CLRF   xC5
0605C:  CLRF   xC6
0605E:  CLRF   xC7
06060:  CLRF   xC8
06062:  CLRF   xC9
06064:  CLRF   xCA
06066:  CLRF   xCB
06068:  CLRF   xCC
0606A:  CLRF   xCD
0606C:  CLRF   xCE
0606E:  CLRF   xCF
06070:  CLRF   xD0
06072:  CLRF   xD1
06074:  CLRF   xD2
06076:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06078:  MOVLW  D0
0607A:  MOVWF  FF6
0607C:  MOVLW  0F
0607E:  MOVWF  FF7
06080:  MOVLW  00
06082:  MOVWF  FF8
06084:  MOVLB  0
06086:  CALL   15D4
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
0608A:  MOVFF  E1,82F
0608E:  MOVFF  E0,82E
06092:  MOVFF  DF,82D
06096:  MOVFF  DE,82C
0609A:  CALL   1934
0609E:  MOVF   01,F
060A0:  BTFSS  FD8.2
060A2:  GOTO   60BA
....................       fprintf(PC, "Mission Flash is not connected\r\n");
060A6:  MOVLW  DC
060A8:  MOVWF  FF6
060AA:  MOVLW  0F
060AC:  MOVWF  FF7
060AE:  MOVLW  00
060B0:  MOVWF  FF8
060B2:  CALL   15D4
....................       return;
060B6:  GOTO   6242
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
060BA:  MOVLB  3
060BC:  CLRF   xDB
060BE:  CLRF   xDA
060C0:  CLRF   xD9
060C2:  CLRF   xD8
060C4:  MOVLB  0
060C6:  MOVLB  3
060C8:  MOVF   xDB,F
060CA:  BTFSC  FD8.2
060CC:  BRA    60D4
060CE:  MOVLB  0
060D0:  GOTO   6222
060D4:  MOVLB  0
060D6:  MOVLB  3
060D8:  MOVF   xDA,F
060DA:  BTFSC  FD8.2
060DC:  BRA    60E4
060DE:  MOVLB  0
060E0:  GOTO   6222
060E4:  MOVLB  0
060E6:  MOVLB  3
060E8:  MOVF   xD9,W
060EA:  SUBWF  x8F,W
060EC:  BTFSC  FD8.0
060EE:  BRA    60F6
060F0:  MOVLB  0
060F2:  GOTO   6222
060F6:  MOVLB  0
060F8:  BTFSS  FD8.2
060FA:  GOTO   6110
060FE:  MOVLB  3
06100:  MOVF   x8E,W
06102:  SUBWF  xD8,W
06104:  BTFSS  FD8.0
06106:  BRA    610E
06108:  MOVLB  0
0610A:  GOTO   6222
0610E:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06110:  MOVLB  3
06112:  RLCF   xD8,W
06114:  MOVWF  00
06116:  RLCF   xD9,W
06118:  MOVWF  01
0611A:  RLCF   xDA,W
0611C:  MOVWF  02
0611E:  RLCF   xDB,W
06120:  MOVWF  03
06122:  RLCF   00,F
06124:  RLCF   01,F
06126:  RLCF   02,F
06128:  RLCF   03,F
0612A:  RLCF   00,F
0612C:  RLCF   01,F
0612E:  RLCF   02,F
06130:  RLCF   03,F
06132:  RLCF   00,F
06134:  RLCF   01,F
06136:  RLCF   02,F
06138:  RLCF   03,F
0613A:  RLCF   00,F
0613C:  RLCF   01,F
0613E:  RLCF   02,F
06140:  RLCF   03,F
06142:  RLCF   00,F
06144:  RLCF   01,F
06146:  RLCF   02,F
06148:  RLCF   03,F
0614A:  MOVLW  C0
0614C:  ANDWF  00,F
0614E:  MOVF   00,W
06150:  ADDWF  x90,W
06152:  MOVWF  xD4
06154:  MOVF   01,W
06156:  ADDWFC x91,W
06158:  MOVWF  xD5
0615A:  MOVF   02,W
0615C:  ADDWFC x92,W
0615E:  MOVWF  xD6
06160:  MOVF   03,W
06162:  ADDWFC x93,W
06164:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06166:  MOVFF  E1,498
0616A:  MOVFF  E0,497
0616E:  MOVFF  DF,496
06172:  MOVFF  DE,495
06176:  MOVFF  3D7,49C
0617A:  MOVFF  3D6,49B
0617E:  MOVFF  3D5,49A
06182:  MOVFF  3D4,499
06186:  MOVLW  03
06188:  MOVLB  4
0618A:  MOVWF  x9E
0618C:  MOVLW  94
0618E:  MOVWF  x9D
06190:  CLRF   xA2
06192:  CLRF   xA1
06194:  CLRF   xA0
06196:  MOVLW  40
06198:  MOVWF  x9F
0619A:  MOVLB  0
0619C:  CALL   19F2
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
061A0:  MOVLB  3
061A2:  CLRF   xDC
061A4:  MOVLB  0
061A6:  MOVLB  3
061A8:  MOVF   xDC,W
061AA:  SUBLW  3F
061AC:  BTFSC  FD8.0
061AE:  BRA    61B6
061B0:  MOVLB  0
061B2:  GOTO   61F2
061B6:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
061B8:  CLRF   03
061BA:  MOVLB  3
061BC:  MOVF   xDC,W
061BE:  ADDLW  94
061C0:  MOVWF  FE9
061C2:  MOVLW  03
061C4:  ADDWFC 03,W
061C6:  MOVWF  FEA
061C8:  MOVFF  FEF,3DD
061CC:  MOVFF  3DD,4A4
061D0:  MOVLW  37
061D2:  MOVLB  4
061D4:  MOVWF  xA5
061D6:  MOVLB  0
061D8:  CALL   1C0A
061DC:  MOVLW  20
061DE:  MOVLB  8
061E0:  MOVWF  x2F
061E2:  MOVLB  0
061E4:  CALL   1582
061E8:  MOVLB  3
061EA:  INCF   xDC,F
061EC:  MOVLB  0
061EE:  GOTO   61A6
....................       }
....................       fprintf(PC,"\r\n");
061F2:  MOVLW  0D
061F4:  MOVLB  8
061F6:  MOVWF  x2F
061F8:  MOVLB  0
061FA:  CALL   1582
061FE:  MOVLW  0A
06200:  MOVLB  8
06202:  MOVWF  x2F
06204:  MOVLB  0
06206:  CALL   1582
0620A:  MOVLW  01
0620C:  MOVLB  3
0620E:  ADDWF  xD8,F
06210:  BTFSC  FD8.0
06212:  INCF   xD9,F
06214:  BTFSC  FD8.2
06216:  INCF   xDA,F
06218:  BTFSC  FD8.2
0621A:  INCF   xDB,F
0621C:  MOVLB  0
0621E:  GOTO   60C6
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06222:  MOVFF  38D,492
06226:  MOVLW  02
06228:  MOVLB  4
0622A:  MOVWF  x93
0622C:  MOVLB  0
0622E:  CALL   3396
....................    fprintf(PC, "End Flash Read\r\n");
06232:  MOVLW  FE
06234:  MOVWF  FF6
06236:  MOVLW  0F
06238:  MOVWF  FF7
0623A:  MOVLW  00
0623C:  MOVWF  FF8
0623E:  CALL   15D4
06242:  GOTO   6B22 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06246:  MOVLW  10
06248:  MOVWF  FF6
0624A:  MOVLW  10
0624C:  MOVWF  FF7
0624E:  MOVLW  00
06250:  MOVWF  FF8
06252:  CALL   15D4
....................    flash_setting(mis_fm);
06256:  MOVFF  E1,498
0625A:  MOVFF  E0,497
0625E:  MOVFF  DF,496
06262:  MOVFF  DE,495
06266:  CALL   5ACA
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
0626A:  MOVLB  3
0626C:  CLRF   x90
0626E:  CLRF   x8F
06270:  CLRF   x8E
06272:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06274:  MOVFF  E1,498
06278:  MOVFF  E0,497
0627C:  MOVFF  DF,496
06280:  MOVFF  DE,495
06284:  MOVFF  390,49C
06288:  MOVFF  38F,49B
0628C:  MOVFF  38E,49A
06290:  MOVFF  38D,499
06294:  MOVLW  03
06296:  MOVLB  4
06298:  MOVWF  x9E
0629A:  MOVLW  91
0629C:  MOVWF  x9D
0629E:  CLRF   xA2
062A0:  CLRF   xA1
062A2:  CLRF   xA0
062A4:  MOVLW  04
062A6:  MOVWF  x9F
062A8:  MOVLB  0
062AA:  CALL   19F2
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
062AE:  MOVLW  2C
062B0:  MOVWF  FF6
062B2:  MOVLW  10
062B4:  MOVWF  FF7
062B6:  MOVLW  00
062B8:  MOVWF  FF8
062BA:  MOVLW  0B
062BC:  MOVLB  7
062BE:  MOVWF  xEC
062C0:  MOVLB  0
062C2:  CALL   1604
062C6:  MOVFF  391,4A4
062CA:  MOVLW  37
062CC:  MOVLB  4
062CE:  MOVWF  xA5
062D0:  MOVLB  0
062D2:  CALL   1C0A
062D6:  MOVLW  20
062D8:  MOVLB  8
062DA:  MOVWF  x2F
062DC:  MOVLB  0
062DE:  CALL   1582
062E2:  MOVFF  392,4A4
062E6:  MOVLW  37
062E8:  MOVLB  4
062EA:  MOVWF  xA5
062EC:  MOVLB  0
062EE:  CALL   1C0A
062F2:  MOVLW  20
062F4:  MOVLB  8
062F6:  MOVWF  x2F
062F8:  MOVLB  0
062FA:  CALL   1582
062FE:  MOVFF  393,4A4
06302:  MOVLW  37
06304:  MOVLB  4
06306:  MOVWF  xA5
06308:  MOVLB  0
0630A:  CALL   1C0A
0630E:  MOVLW  20
06310:  MOVLB  8
06312:  MOVWF  x2F
06314:  MOVLB  0
06316:  CALL   1582
0631A:  MOVFF  394,4A4
0631E:  MOVLW  37
06320:  MOVLB  4
06322:  MOVWF  xA5
06324:  MOVLB  0
06326:  CALL   1C0A
0632A:  MOVLW  0D
0632C:  MOVLB  8
0632E:  MOVWF  x2F
06330:  MOVLB  0
06332:  CALL   1582
06336:  MOVLW  0A
06338:  MOVLB  8
0633A:  MOVWF  x2F
0633C:  MOVLB  0
0633E:  CALL   1582
....................    fprintf(PC, "End Flash Read Address\r\n");
06342:  MOVLW  4E
06344:  MOVWF  FF6
06346:  MOVLW  10
06348:  MOVWF  FF7
0634A:  MOVLW  00
0634C:  MOVWF  FF8
0634E:  CALL   15D4
06352:  GOTO   6B32 (RETURN)
.................... }
.................... 
.................... void mode_flash_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06468:  MOVLW  68
0646A:  MOVWF  FF6
0646C:  MOVLW  10
0646E:  MOVWF  FF7
06470:  MOVLW  00
06472:  MOVWF  FF8
06474:  CALL   15D4
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06478:  MOVLB  3
0647A:  MOVF   x8B,W
0647C:  MOVWF  FE9
0647E:  MOVF   x8C,W
06480:  MOVWF  FEA
06482:  MOVFF  FEF,38D
06486:  MOVFF  38D,492
0648A:  MOVLW  01
0648C:  MOVLB  4
0648E:  MOVWF  x93
06490:  MOVLB  0
06492:  CALL   3396
.................... 
....................    mode_flash_erase_all(parameter); // Erase all flash memory
06496:  MOVFF  38C,38E
0649A:  MOVFF  38B,38D
0649E:  CALL   518C
....................    mode_flash_address_reset(parameter); // Reset the address area
064A2:  MOVFF  38C,38E
064A6:  MOVFF  38B,38D
064AA:  CALL   6356
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
064AE:  MOVLW  86
064B0:  MOVWF  FF6
064B2:  MOVLW  10
064B4:  MOVWF  FF7
064B6:  MOVLW  00
064B8:  MOVWF  FF8
064BA:  CALL   15D4
064BE:  GOTO   6B42 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
064C2:  MOVLW  A2
064C4:  MOVWF  FF6
064C6:  MOVLW  10
064C8:  MOVWF  FF7
064CA:  MOVLW  00
064CC:  MOVWF  FF8
064CE:  CALL   15D4
....................    flash_setting(mis_fm);
064D2:  MOVFF  E1,498
064D6:  MOVFF  E0,497
064DA:  MOVFF  DF,496
064DE:  MOVFF  DE,495
064E2:  CALL   5ACA
....................    flash_setting(smf);
064E6:  MOVFF  E5,498
064EA:  MOVFF  E4,497
064EE:  MOVFF  E3,496
064F2:  MOVFF  E2,495
064F6:  CALL   5ACA
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
064FA:  MOVLB  3
064FC:  CLRF   x90
064FE:  CLRF   x8F
06500:  CLRF   x8E
06502:  CLRF   x8D
06504:  CLRF   x94
06506:  CLRF   x93
06508:  MOVLW  10
0650A:  MOVWF  x92
0650C:  CLRF   x91
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
0650E:  MOVFF  E1,498
06512:  MOVFF  E0,497
06516:  MOVFF  DF,496
0651A:  MOVFF  DE,495
0651E:  MOVFF  390,49C
06522:  MOVFF  38F,49B
06526:  MOVFF  38E,49A
0652A:  MOVFF  38D,499
0652E:  MOVLW  03
06530:  MOVLB  4
06532:  MOVWF  x9E
06534:  MOVLW  95
06536:  MOVWF  x9D
06538:  CLRF   xA2
0653A:  CLRF   xA1
0653C:  MOVLW  01
0653E:  MOVWF  xA0
06540:  CLRF   x9F
06542:  MOVLB  0
06544:  CALL   19F2
....................    write_data_bytes(smf, dest_address, read_data, 256);
06548:  MOVFF  E5,82F
0654C:  MOVFF  E4,82E
06550:  MOVFF  E3,82D
06554:  MOVFF  E2,82C
06558:  MOVFF  394,833
0655C:  MOVFF  393,832
06560:  MOVFF  392,831
06564:  MOVFF  391,830
06568:  MOVLW  03
0656A:  MOVLB  8
0656C:  MOVWF  x35
0656E:  MOVLW  95
06570:  MOVWF  x34
06572:  MOVLW  01
06574:  MOVWF  x37
06576:  CLRF   x36
06578:  MOVLB  0
0657A:  CALL   2A00
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
0657E:  MOVLW  BA
06580:  MOVWF  FF6
06582:  MOVLW  10
06584:  MOVWF  FF7
06586:  MOVLW  00
06588:  MOVWF  FF8
0658A:  CALL   15D4
0658E:  GOTO   6B52 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
06592:  MOVLW  D0
06594:  MOVWF  FF6
06596:  MOVLW  10
06598:  MOVWF  FF7
0659A:  MOVLW  00
0659C:  MOVWF  FF8
0659E:  CALL   15D4
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
065A2:  MOVLW  E8
065A4:  MOVWF  FF6
065A6:  MOVLW  10
065A8:  MOVWF  FF7
065AA:  MOVLW  00
065AC:  MOVWF  FF8
065AE:  CALL   15D4
....................    for (int i = 0; i < 256; i++)
065B2:  MOVLB  4
065B4:  CLRF   x8D
065B6:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
065B8:  CLRF   03
065BA:  MOVLB  4
065BC:  MOVF   x8D,W
065BE:  ADDLW  8D
065C0:  MOVWF  FE9
065C2:  MOVLW  03
065C4:  ADDWFC 03,W
065C6:  MOVWF  FEA
065C8:  MOVFF  FEF,48E
065CC:  MOVFF  48E,4A4
065D0:  MOVLW  37
065D2:  MOVWF  xA5
065D4:  MOVLB  0
065D6:  CALL   1C0A
065DA:  MOVLW  20
065DC:  MOVLB  8
065DE:  MOVWF  x2F
065E0:  MOVLB  0
065E2:  CALL   1582
065E6:  MOVLB  4
065E8:  INCF   x8D,F
065EA:  MOVLB  0
065EC:  GOTO   65B8
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
065F0:  MOVLW  F4
065F2:  MOVWF  FF6
065F4:  MOVLW  10
065F6:  MOVWF  FF7
065F8:  MOVLW  00
065FA:  MOVWF  FF8
065FC:  CALL   15D4
06600:  GOTO   6B62 (RETURN)
.................... }
.................... 
.................... void mode_flash_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
06604:  MOVLW  0C
06606:  MOVWF  FF6
06608:  MOVLW  11
0660A:  MOVWF  FF7
0660C:  MOVLW  00
0660E:  MOVWF  FF8
06610:  CALL   15D4
....................    flash_setting(smf);
06614:  MOVFF  E5,498
06618:  MOVFF  E4,497
0661C:  MOVFF  E3,496
06620:  MOVFF  E2,495
06624:  CALL   5ACA
....................    unsigned int32 erase_address = 0x00000000; // Example address
06628:  MOVLB  3
0662A:  CLRF   x90
0662C:  CLRF   x8F
0662E:  CLRF   x8E
06630:  CLRF   x8D
....................    sector_erase(smf, erase_address); // Erase the sector
06632:  MOVFF  E5,397
06636:  MOVFF  E4,396
0663A:  MOVFF  E3,395
0663E:  MOVFF  E2,394
06642:  MOVFF  390,39B
06646:  MOVFF  38F,39A
0664A:  MOVFF  38E,399
0664E:  MOVFF  38D,398
06652:  MOVLB  0
06654:  CALL   4E30
....................    fprintf(PC, "End Flash SMF Erase\r\n");
06658:  MOVLW  24
0665A:  MOVWF  FF6
0665C:  MOVLW  11
0665E:  MOVWF  FF7
06660:  MOVLW  00
06662:  MOVWF  FF8
06664:  CALL   15D4
06668:  GOTO   6B72 (RETURN)
.................... }  
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06356:  MOVLW  3A
06358:  MOVWF  FF6
0635A:  MOVLW  11
0635C:  MOVWF  FF7
0635E:  MOVLW  00
06360:  MOVWF  FF8
06362:  CALL   15D4
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06366:  MOVLB  3
06368:  MOVF   x8D,W
0636A:  MOVWF  FE9
0636C:  MOVF   x8E,W
0636E:  MOVWF  FEA
06370:  MOVFF  FEF,3CF
06374:  MOVFF  3CF,492
06378:  MOVLW  01
0637A:  MOVLB  4
0637C:  MOVWF  x93
0637E:  MOVLB  0
06380:  CALL   3396
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06384:  MOVLB  3
06386:  CLRF   x8F
06388:  CLRF   x90
0638A:  CLRF   x91
0638C:  CLRF   x92
0638E:  CLRF   x93
06390:  CLRF   x94
06392:  CLRF   x95
06394:  CLRF   x96
06396:  CLRF   x97
06398:  CLRF   x98
0639A:  CLRF   x99
0639C:  CLRF   x9A
0639E:  CLRF   x9B
063A0:  CLRF   x9C
063A2:  CLRF   x9D
063A4:  CLRF   x9E
063A6:  CLRF   x9F
063A8:  CLRF   xA0
063AA:  CLRF   xA1
063AC:  CLRF   xA2
063AE:  CLRF   xA3
063B0:  CLRF   xA4
063B2:  CLRF   xA5
063B4:  CLRF   xA6
063B6:  CLRF   xA7
063B8:  CLRF   xA8
063BA:  CLRF   xA9
063BC:  CLRF   xAA
063BE:  CLRF   xAB
063C0:  CLRF   xAC
063C2:  CLRF   xAD
063C4:  CLRF   xAE
063C6:  CLRF   xAF
063C8:  CLRF   xB0
063CA:  CLRF   xB1
063CC:  CLRF   xB2
063CE:  CLRF   xB3
063D0:  CLRF   xB4
063D2:  CLRF   xB5
063D4:  CLRF   xB6
063D6:  CLRF   xB7
063D8:  CLRF   xB8
063DA:  CLRF   xB9
063DC:  CLRF   xBA
063DE:  CLRF   xBB
063E0:  CLRF   xBC
063E2:  CLRF   xBD
063E4:  CLRF   xBE
063E6:  CLRF   xBF
063E8:  CLRF   xC0
063EA:  CLRF   xC1
063EC:  CLRF   xC2
063EE:  CLRF   xC3
063F0:  CLRF   xC4
063F2:  CLRF   xC5
063F4:  CLRF   xC6
063F6:  CLRF   xC7
063F8:  CLRF   xC8
063FA:  CLRF   xC9
063FC:  CLRF   xCA
063FE:  CLRF   xCB
06400:  CLRF   xCC
06402:  CLRF   xCD
06404:  CLRF   xCE
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
06406:  MOVFF  E1,82F
0640A:  MOVFF  E0,82E
0640E:  MOVFF  DF,82D
06412:  MOVFF  DE,82C
06416:  MOVLB  8
06418:  CLRF   x33
0641A:  CLRF   x32
0641C:  CLRF   x31
0641E:  CLRF   x30
06420:  MOVLW  03
06422:  MOVWF  x35
06424:  MOVLW  8F
06426:  MOVWF  x34
06428:  CLRF   x37
0642A:  MOVLW  40
0642C:  MOVWF  x36
0642E:  MOVLB  0
06430:  CALL   2A00
....................    misf_init(); // Update the address area after writing
06434:  CALL   1C7A
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06438:  MOVLB  3
0643A:  MOVF   x8D,W
0643C:  MOVWF  FE9
0643E:  MOVF   x8E,W
06440:  MOVWF  FEA
06442:  MOVFF  FEF,3CF
06446:  MOVFF  3CF,492
0644A:  MOVLW  02
0644C:  MOVLB  4
0644E:  MOVWF  x93
06450:  MOVLB  0
06452:  CALL   3396
....................    fprintf(PC, "End Flash Address Reset\r\n");
06456:  MOVLW  56
06458:  MOVWF  FF6
0645A:  MOVLW  11
0645C:  MOVWF  FF7
0645E:  MOVLW  00
06460:  MOVWF  FF8
06462:  CALL   15D4
06466:  RETURN 0
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_mission.c"
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
03CAA:  MOVLW  70
03CAC:  MOVWF  FF6
03CAE:  MOVLW  11
03CB0:  MOVWF  FF7
03CB2:  MOVLW  00
03CB4:  MOVWF  FF8
03CB6:  CALL   15D4
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
03CBA:  MOVLB  3
03CBC:  MOVF   x8B,W
03CBE:  MOVWF  FE9
03CC0:  MOVF   x8C,W
03CC2:  MOVWF  FEA
03CC4:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
03CC8:  MOVLW  01
03CCA:  ADDWF  x8B,W
03CCC:  MOVWF  FE9
03CCE:  MOVLW  00
03CD0:  ADDWFC x8C,W
03CD2:  MOVWF  FEA
03CD4:  MOVF   FEF,W
03CD6:  CLRF   x97
03CD8:  CLRF   x96
03CDA:  CLRF   x95
03CDC:  MOVWF  x94
03CDE:  MOVFF  394,397
03CE2:  CLRF   x94
03CE4:  CLRF   x95
03CE6:  CLRF   x96
03CE8:  MOVLW  02
03CEA:  ADDWF  x8B,W
03CEC:  MOVWF  FE9
03CEE:  MOVLW  00
03CF0:  ADDWFC x8C,W
03CF2:  MOVWF  FEA
03CF4:  MOVF   FEF,W
03CF6:  CLRF   x9C
03CF8:  CLRF   x9B
03CFA:  CLRF   x9A
03CFC:  MOVWF  x99
03CFE:  MOVFF  39A,03
03D02:  MOVFF  399,02
03D06:  CLRF   00
03D08:  CLRF   01
03D0A:  MOVF   00,W
03D0C:  IORWF  x94,F
03D0E:  MOVF   01,W
03D10:  IORWF  x95,F
03D12:  MOVF   02,W
03D14:  IORWF  x96,F
03D16:  MOVF   03,W
03D18:  IORWF  x97,F
03D1A:  MOVLW  03
03D1C:  ADDWF  x8B,W
03D1E:  MOVWF  FE9
03D20:  MOVLW  00
03D22:  ADDWFC x8C,W
03D24:  MOVWF  FEA
03D26:  MOVF   FEF,W
03D28:  CLRF   x9C
03D2A:  CLRF   x9B
03D2C:  CLRF   x9A
03D2E:  MOVWF  x99
03D30:  MOVFF  39B,03
03D34:  MOVFF  39A,02
03D38:  MOVFF  399,01
03D3C:  CLRF   00
03D3E:  MOVF   00,W
03D40:  IORWF  x94,F
03D42:  MOVF   01,W
03D44:  IORWF  x95,F
03D46:  MOVF   02,W
03D48:  IORWF  x96,F
03D4A:  MOVF   03,W
03D4C:  IORWF  x97,F
03D4E:  MOVLW  04
03D50:  ADDWF  x8B,W
03D52:  MOVWF  FE9
03D54:  MOVLW  00
03D56:  ADDWFC x8C,W
03D58:  MOVWF  FEA
03D5A:  MOVF   FEF,W
03D5C:  MOVWF  00
03D5E:  CLRF   01
03D60:  CLRF   02
03D62:  CLRF   03
03D64:  MOVF   00,W
03D66:  IORWF  x94,W
03D68:  MOVWF  x8E
03D6A:  MOVF   01,W
03D6C:  IORWF  x95,W
03D6E:  MOVWF  x8F
03D70:  MOVF   02,W
03D72:  IORWF  x96,W
03D74:  MOVWF  x90
03D76:  MOVF   03,W
03D78:  IORWF  x97,W
03D7A:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
03D7C:  MOVLW  05
03D7E:  ADDWF  x8B,W
03D80:  MOVWF  FE9
03D82:  MOVLW  00
03D84:  ADDWFC x8C,W
03D86:  MOVWF  FEA
03D88:  MOVF   FEF,W
03D8A:  CLRF   x95
03D8C:  MOVWF  x94
03D8E:  MOVFF  394,395
03D92:  CLRF   x94
03D94:  MOVLW  06
03D96:  ADDWF  x8B,W
03D98:  MOVWF  FE9
03D9A:  MOVLW  00
03D9C:  ADDWFC x8C,W
03D9E:  MOVWF  FEA
03DA0:  MOVF   FEF,W
03DA2:  CLRF   03
03DA4:  IORWF  x94,W
03DA6:  MOVWF  x92
03DA8:  MOVF   03,W
03DAA:  IORWF  x95,W
03DAC:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
03DAE:  MOVLW  84
03DB0:  MOVWF  FF6
03DB2:  MOVLW  11
03DB4:  MOVWF  FF7
03DB6:  MOVLW  00
03DB8:  MOVWF  FF8
03DBA:  MOVLW  0C
03DBC:  MOVLB  7
03DBE:  MOVWF  xEC
03DC0:  MOVLB  0
03DC2:  CALL   1604
03DC6:  MOVFF  38D,4A4
03DCA:  MOVLW  37
03DCC:  MOVLB  4
03DCE:  MOVWF  xA5
03DD0:  MOVLB  0
03DD2:  CALL   1C0A
03DD6:  MOVLW  0D
03DD8:  MOVLB  8
03DDA:  MOVWF  x2F
03DDC:  MOVLB  0
03DDE:  CALL   1582
03DE2:  MOVLW  0A
03DE4:  MOVLB  8
03DE6:  MOVWF  x2F
03DE8:  MOVLB  0
03DEA:  CALL   1582
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
03DEE:  MOVLW  98
03DF0:  MOVWF  FF6
03DF2:  MOVLW  11
03DF4:  MOVWF  FF7
03DF6:  MOVLW  00
03DF8:  MOVWF  FF8
03DFA:  MOVLW  0E
03DFC:  MOVLB  7
03DFE:  MOVWF  xEC
03E00:  MOVLB  0
03E02:  CALL   1604
03E06:  MOVFF  391,4A4
03E0A:  MOVLW  37
03E0C:  MOVLB  4
03E0E:  MOVWF  xA5
03E10:  MOVLB  0
03E12:  CALL   1C0A
03E16:  MOVFF  390,4A4
03E1A:  MOVLW  37
03E1C:  MOVLB  4
03E1E:  MOVWF  xA5
03E20:  MOVLB  0
03E22:  CALL   1C0A
03E26:  MOVFF  38F,4A4
03E2A:  MOVLW  37
03E2C:  MOVLB  4
03E2E:  MOVWF  xA5
03E30:  MOVLB  0
03E32:  CALL   1C0A
03E36:  MOVFF  38E,4A4
03E3A:  MOVLW  37
03E3C:  MOVLB  4
03E3E:  MOVWF  xA5
03E40:  MOVLB  0
03E42:  CALL   1C0A
03E46:  MOVLW  0D
03E48:  MOVLB  8
03E4A:  MOVWF  x2F
03E4C:  MOVLB  0
03E4E:  CALL   1582
03E52:  MOVLW  0A
03E54:  MOVLB  8
03E56:  MOVWF  x2F
03E58:  MOVLB  0
03E5A:  CALL   1582
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
03E5E:  MOVLW  AE
03E60:  MOVWF  FF6
03E62:  MOVLW  11
03E64:  MOVWF  FF7
03E66:  MOVLW  00
03E68:  MOVWF  FF8
03E6A:  MOVLW  0E
03E6C:  MOVLB  7
03E6E:  MOVWF  xEC
03E70:  MOVLB  0
03E72:  CALL   1604
03E76:  MOVFF  393,4A4
03E7A:  MOVLW  37
03E7C:  MOVLB  4
03E7E:  MOVWF  xA5
03E80:  MOVLB  0
03E82:  CALL   1C0A
03E86:  MOVFF  392,4A4
03E8A:  MOVLW  37
03E8C:  MOVLB  4
03E8E:  MOVWF  xA5
03E90:  MOVLB  0
03E92:  CALL   1C0A
03E96:  MOVLW  0D
03E98:  MOVLB  8
03E9A:  MOVWF  x2F
03E9C:  MOVLB  0
03E9E:  CALL   1582
03EA2:  MOVLW  0A
03EA4:  MOVLB  8
03EA6:  MOVWF  x2F
03EA8:  MOVLB  0
03EAA:  CALL   1582
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
03EAE:  MOVFF  38D,492
03EB2:  MOVLW  01
03EB4:  MOVLB  4
03EB6:  MOVWF  x93
03EB8:  MOVLB  0
03EBA:  CALL   3396
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
03EBE:  MOVFF  38D,492
03EC2:  MOVLW  02
03EC4:  MOVLB  4
03EC6:  MOVWF  x93
03EC8:  MOVLB  0
03ECA:  CALL   3396
....................    fprintf(PC, "End MODE DUMMY\r\n");
03ECE:  MOVLW  C4
03ED0:  MOVWF  FF6
03ED2:  MOVLW  11
03ED4:  MOVWF  FF7
03ED6:  MOVLW  00
03ED8:  MOVWF  FF8
03EDA:  CALL   15D4
03EDE:  GOTO   6A6A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
04322:  MOVLW  01
04324:  MOVLB  3
04326:  ADDWF  x8B,W
04328:  MOVWF  FE9
0432A:  MOVLW  00
0432C:  ADDWFC x8C,W
0432E:  MOVWF  FEA
04330:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
04334:  MOVLW  D6
04336:  MOVWF  FF6
04338:  MOVLW  11
0433A:  MOVWF  FF7
0433C:  MOVLW  00
0433E:  MOVWF  FF8
04340:  MOVLB  0
04342:  CALL   15D4
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04346:  MOVLW  EC
04348:  MOVWF  FF6
0434A:  MOVLW  11
0434C:  MOVWF  FF7
0434E:  MOVLW  00
04350:  MOVWF  FF8
04352:  MOVLW  0E
04354:  MOVLB  7
04356:  MOVWF  xEC
04358:  MOVLB  0
0435A:  CALL   1604
0435E:  MOVFF  38D,7EC
04362:  MOVLW  1B
04364:  MOVLB  7
04366:  MOVWF  xED
04368:  MOVLB  0
0436A:  CALL   3F2A
0436E:  MOVLW  0D
04370:  MOVLB  8
04372:  MOVWF  x2F
04374:  MOVLB  0
04376:  CALL   1582
0437A:  MOVLW  0A
0437C:  MOVLB  8
0437E:  MOVWF  x2F
04380:  MOVLB  0
04382:  CALL   1582
....................    output_high(CONNECT_CIGS1);
04386:  BCF    F94.0
04388:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
0438A:  BCF    F94.7
0438C:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
0438E:  MOVFF  38B,390
04392:  GOTO   41FA
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
04396:  MOVLW  00
04398:  MOVWF  FF6
0439A:  MOVLW  12
0439C:  MOVWF  FF7
0439E:  MOVLW  00
043A0:  MOVWF  FF8
043A2:  CALL   15D4
....................    output_low(CONNECT_CIGS1);
043A6:  BCF    F94.0
043A8:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
043AA:  BCF    F94.7
043AC:  BSF    F8B.7
043AE:  GOTO   6A7A (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
04560:  MOVLW  14
04562:  MOVWF  FF6
04564:  MOVLW  12
04566:  MOVWF  FF7
04568:  MOVLW  00
0456A:  MOVWF  FF8
0456C:  CALL   15D4
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
04570:  MOVLB  3
04572:  MOVF   x8B,W
04574:  MOVWF  FE9
04576:  MOVF   x8C,W
04578:  MOVWF  FEA
0457A:  MOVFF  FEF,38D
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0457E:  MOVF   x8B,W
04580:  MOVWF  FE9
04582:  MOVF   x8C,W
04584:  MOVWF  FEA
04586:  MOVFF  FEF,38F
0458A:  MOVFF  38F,492
0458E:  MOVLW  01
04590:  MOVLB  4
04592:  MOVWF  x93
04594:  MOVLB  0
04596:  CALL   3396
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
0459A:  MOVLB  3
0459C:  CLRF   x8E
0459E:  MOVLB  0
045A0:  MOVLB  3
045A2:  MOVF   x8E,W
045A4:  SUBLW  27
045A6:  BTFSC  FD8.0
045A8:  BRA    45B0
045AA:  MOVLB  0
045AC:  GOTO   46F8
045B0:  MOVLB  0
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
045B2:  MOVLW  64
045B4:  MOVLB  8
045B6:  MOVWF  x44
045B8:  MOVLB  0
045BA:  CALL   1554
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
045BE:  BCF    FD8.0
045C0:  MOVLB  3
045C2:  RLCF   x8E,W
045C4:  CLRF   03
045C6:  MOVWF  02
045C8:  BCF    FD8.0
045CA:  RLCF   02,F
045CC:  RLCF   03,F
045CE:  MOVF   02,W
045D0:  ADDLW  F2
045D2:  MOVWF  01
045D4:  MOVLW  00
045D6:  ADDWFC 03,F
045D8:  MOVF   01,W
045DA:  MOVWF  x8F
045DC:  MOVFF  03,390
045E0:  MOVLB  7
045E2:  CLRF   xEE
045E4:  MOVLB  0
045E6:  CALL   4044
045EA:  MOVFF  390,FEA
045EE:  MOVFF  38F,FE9
045F2:  MOVFF  02,FEC
045F6:  MOVF   FED,F
045F8:  MOVFF  01,FEF
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
045FC:  BCF    FD8.0
045FE:  MOVLB  3
04600:  RLCF   x8E,W
04602:  ADDLW  01
04604:  CLRF   03
04606:  MOVWF  02
04608:  BCF    FD8.0
0460A:  RLCF   02,F
0460C:  RLCF   03,F
0460E:  MOVF   02,W
04610:  ADDLW  F2
04612:  MOVWF  01
04614:  MOVLW  00
04616:  ADDWFC 03,F
04618:  MOVF   01,W
0461A:  MOVWF  x8F
0461C:  MOVFF  03,390
04620:  MOVLW  01
04622:  MOVLB  7
04624:  MOVWF  xEE
04626:  MOVLB  0
04628:  CALL   4044
0462C:  MOVFF  390,FEA
04630:  MOVFF  38F,FE9
04634:  MOVFF  02,FEC
04638:  MOVF   FED,F
0463A:  MOVFF  01,FEF
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
0463E:  BCF    FD8.0
04640:  MOVLB  3
04642:  RLCF   x8E,W
04644:  CLRF   03
04646:  MOVWF  02
04648:  BCF    FD8.0
0464A:  RLCF   02,F
0464C:  RLCF   03,F
0464E:  MOVF   02,W
04650:  ADDLW  F2
04652:  MOVWF  FE9
04654:  MOVLW  00
04656:  ADDWFC 03,W
04658:  MOVWF  FEA
0465A:  MOVFF  FEC,390
0465E:  MOVF   FED,F
04660:  MOVFF  FEF,38F
04664:  BCF    FD8.0
04666:  RLCF   x8E,W
04668:  ADDLW  01
0466A:  CLRF   03
0466C:  MOVWF  02
0466E:  BCF    FD8.0
04670:  RLCF   02,F
04672:  RLCF   03,F
04674:  MOVF   02,W
04676:  ADDLW  F2
04678:  MOVWF  FE9
0467A:  MOVLW  00
0467C:  ADDWFC 03,W
0467E:  MOVWF  FEA
04680:  MOVFF  FEC,392
04684:  MOVF   FED,F
04686:  MOVFF  FEF,391
0468A:  MOVFF  390,4A4
0468E:  MOVLW  37
04690:  MOVLB  4
04692:  MOVWF  xA5
04694:  MOVLB  0
04696:  CALL   1C0A
0469A:  MOVFF  38F,4A4
0469E:  MOVLW  37
046A0:  MOVLB  4
046A2:  MOVWF  xA5
046A4:  MOVLB  0
046A6:  CALL   1C0A
046AA:  MOVLW  2C
046AC:  MOVLB  8
046AE:  MOVWF  x2F
046B0:  MOVLB  0
046B2:  CALL   1582
046B6:  MOVFF  392,4A4
046BA:  MOVLW  37
046BC:  MOVLB  4
046BE:  MOVWF  xA5
046C0:  MOVLB  0
046C2:  CALL   1C0A
046C6:  MOVFF  391,4A4
046CA:  MOVLW  37
046CC:  MOVLB  4
046CE:  MOVWF  xA5
046D0:  MOVLB  0
046D2:  CALL   1C0A
046D6:  MOVLW  0D
046D8:  MOVLB  8
046DA:  MOVWF  x2F
046DC:  MOVLB  0
046DE:  CALL   1582
046E2:  MOVLW  0A
046E4:  MOVLB  8
046E6:  MOVWF  x2F
046E8:  MOVLB  0
046EA:  CALL   1582
046EE:  MOVLB  3
046F0:  INCF   x8E,F
046F2:  MOVLB  0
046F4:  GOTO   45A0
....................    }
046F8:  GOTO   6A92 (RETURN)
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
06746:  MOVLW  2A
06748:  MOVWF  FF6
0674A:  MOVLW  12
0674C:  MOVWF  FF7
0674E:  MOVLW  00
06750:  MOVWF  FF8
06752:  CALL   15D4
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
06756:  MOVLW  64
06758:  MOVLB  3
0675A:  MOVWF  x8B
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
0675C:  MOVLW  38
0675E:  MOVWF  FF6
06760:  MOVLW  12
06762:  MOVWF  FF7
06764:  MOVLW  00
06766:  MOVWF  FF8
06768:  MOVLW  0E
0676A:  MOVLB  7
0676C:  MOVWF  xEC
0676E:  MOVLB  0
06770:  CALL   1604
06774:  MOVFF  38B,7EC
06778:  MOVLW  1B
0677A:  MOVLB  7
0677C:  MOVWF  xED
0677E:  MOVLB  0
06780:  CALL   3F2A
06784:  MOVLW  0D
06786:  MOVLB  8
06788:  MOVWF  x2F
0678A:  MOVLB  0
0678C:  CALL   1582
06790:  MOVLW  0A
06792:  MOVLB  8
06794:  MOVWF  x2F
06796:  MOVLB  0
06798:  CALL   1582
....................    output_high(CONNECT_CIGS1);
0679C:  BCF    F94.0
0679E:  BSF    F8B.0
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
067A0:  MOVLW  0D
067A2:  MOVWF  00
067A4:  DECFSZ 00,F
067A6:  BRA    67A4
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
067A8:  MOVLB  7
067AA:  CLRF   xEE
067AC:  MOVLB  0
067AE:  CALL   4044
067B2:  MOVFF  02,353
067B6:  MOVFF  01,352
....................    delay_us(10); // wait for the ADC to stabilize
067BA:  MOVLW  0D
067BC:  MOVWF  00
067BE:  DECFSZ 00,F
067C0:  BRA    67BE
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
067C2:  MOVLB  7
067C4:  CLRF   xEE
067C6:  MOVLB  0
067C8:  CALL   4044
067CC:  MOVFF  02,355
067D0:  MOVFF  01,354
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
067D4:  MOVLW  0D
067D6:  MOVWF  00
067D8:  DECFSZ 00,F
067DA:  BRA    67D8
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
067DC:  MOVLB  3
067DE:  CLRF   x91
067E0:  CLRF   x90
067E2:  MOVLB  0
067E4:  MOVLB  3
067E6:  MOVF   x91,F
067E8:  BTFSC  FD8.2
067EA:  BRA    67F2
067EC:  MOVLB  0
067EE:  GOTO   692E
067F2:  MOVLB  0
067F4:  MOVLB  3
067F6:  MOVF   x8B,W
067F8:  SUBWF  x90,W
067FA:  BTFSS  FD8.0
067FC:  BRA    6804
067FE:  MOVLB  0
06800:  GOTO   692E
06804:  MOVLB  0
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
06806:  MOVLW  85
06808:  MOVWF  00
0680A:  DECFSZ 00,F
0680C:  BRA    680A
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
0680E:  MOVLW  0D
06810:  MOVWF  00
06812:  DECFSZ 00,F
06814:  BRA    6812
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
06816:  BCF    FD8.0
06818:  MOVLB  3
0681A:  RLCF   x90,W
0681C:  MOVWF  x93
0681E:  RLCF   x91,W
06820:  MOVWF  x94
06822:  BCF    FD8.0
06824:  RLCF   x93,W
06826:  MOVWF  02
06828:  RLCF   x94,W
0682A:  MOVWF  03
0682C:  MOVF   02,W
0682E:  ADDLW  F2
06830:  MOVWF  01
06832:  MOVLW  00
06834:  ADDWFC 03,F
06836:  MOVF   01,W
06838:  MOVWF  x93
0683A:  MOVFF  03,394
0683E:  MOVLB  7
06840:  CLRF   xEE
06842:  MOVLB  0
06844:  CALL   4044
06848:  MOVFF  394,FEA
0684C:  MOVFF  393,FE9
06850:  MOVFF  02,FEC
06854:  MOVF   FED,F
06856:  MOVFF  01,FEF
....................       
....................       current = 0; // reset current value
0685A:  MOVLB  3
0685C:  CLRF   x8F
0685E:  CLRF   x8E
06860:  CLRF   x8D
06862:  CLRF   x8C
....................       for(int k=0; k<10; k++)
06864:  CLRF   x92
06866:  MOVLB  0
06868:  MOVLB  3
0686A:  MOVF   x92,W
0686C:  SUBLW  09
0686E:  BTFSC  FD8.0
06870:  BRA    6878
06872:  MOVLB  0
06874:  GOTO   68AE
06878:  MOVLB  0
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
0687A:  MOVLW  0D
0687C:  MOVWF  00
0687E:  DECFSZ 00,F
06880:  BRA    687E
....................             current = current + ad7490_read(AD7490_VIN0); 
06882:  MOVLB  7
06884:  CLRF   xEE
06886:  MOVLB  0
06888:  CALL   4044
0688C:  MOVFF  02,03
06890:  MOVF   01,W
06892:  MOVLB  3
06894:  ADDWF  x8C,F
06896:  MOVF   03,W
06898:  ADDWFC x8D,F
0689A:  MOVLW  00
0689C:  ADDWFC x8E,F
0689E:  MOVLW  00
068A0:  ADDWFC x8F,F
068A2:  MOVLB  0
068A4:  MOVLB  3
068A6:  INCF   x92,F
068A8:  MOVLB  0
068AA:  GOTO   6868
....................       }    
....................       
....................       current = current / 10; // average the current value
068AE:  BCF    FD8.1
068B0:  MOVFF  38F,424
068B4:  MOVFF  38E,423
068B8:  MOVFF  38D,422
068BC:  MOVFF  38C,421
068C0:  MOVLB  4
068C2:  CLRF   x28
068C4:  CLRF   x27
068C6:  CLRF   x26
068C8:  MOVLW  0A
068CA:  MOVWF  x25
068CC:  MOVLB  0
068CE:  CALL   666C
068D2:  MOVFF  03,38F
068D6:  MOVFF  02,38E
068DA:  MOVFF  01,38D
068DE:  MOVFF  00,38C
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
068E2:  MOVLW  0D
068E4:  MOVWF  00
068E6:  DECFSZ 00,F
068E8:  BRA    68E6
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
068EA:  BCF    FD8.0
068EC:  MOVLB  3
068EE:  RLCF   x90,W
068F0:  MOVWF  x93
068F2:  RLCF   x91,W
068F4:  MOVWF  x94
068F6:  MOVLW  01
068F8:  ADDWF  x93,F
068FA:  MOVLW  00
068FC:  ADDWFC x94,F
068FE:  BCF    FD8.0
06900:  RLCF   x93,W
06902:  MOVWF  02
06904:  RLCF   x94,W
06906:  MOVWF  03
06908:  MOVF   02,W
0690A:  ADDLW  F2
0690C:  MOVWF  FE9
0690E:  MOVLW  00
06910:  ADDWFC 03,W
06912:  MOVWF  FEA
06914:  MOVFF  38C,FEF
06918:  MOVFF  38D,FEC
0691C:  MOVF   FED,F
0691E:  MOVLB  0
06920:  MOVLB  3
06922:  INCF   x90,F
06924:  BTFSC  FD8.2
06926:  INCF   x91,F
06928:  MOVLB  0
0692A:  GOTO   67E4
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
0692E:  MOVLW  4C
06930:  MOVWF  FF6
06932:  MOVLW  12
06934:  MOVWF  FF7
06936:  MOVLW  00
06938:  MOVWF  FF8
0693A:  CALL   15D4
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
0693E:  BCF    F94.0
06940:  BCF    F8B.0
06942:  RETURN 0
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
04DD2:  MOVLW  50
04DD4:  MOVLB  3
04DD6:  MOVWF  x96
04DD8:  MOVLB  0
04DDA:  GOTO   46FC
....................    SmfDataStruct data;
....................    data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
04DDE:  MOVLB  3
04DE0:  BCF    x8D.0
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
04DE2:  MOVF   x6A,W
04DE4:  MOVWF  x96
04DE6:  MOVF   x6B,W
04DE8:  MOVWF  x97
04DEA:  MOVLW  16
04DEC:  ADDWF  x6C,W
04DEE:  MOVWF  x98
04DF0:  MOVLW  00
04DF2:  ADDWFC x6D,W
04DF4:  MOVWF  x99
04DF6:  MOVF   x6F,W
04DF8:  SUBWF  x96,W
04DFA:  MOVWF  x8E
04DFC:  MOVF   x70,W
04DFE:  SUBWFB x97,W
04E00:  MOVWF  x8F
04E02:  MOVF   x71,W
04E04:  SUBWFB x98,W
04E06:  MOVWF  x90
04E08:  MOVF   x72,W
04E0A:  SUBWFB x99,W
04E0C:  MOVWF  x91
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
04E0E:  MOVFF  372,395
04E12:  MOVFF  371,394
04E16:  MOVFF  370,393
04E1A:  MOVFF  36F,392
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
04E1E:  MOVLW  03
04E20:  MOVWF  x97
04E22:  MOVLW  8D
04E24:  MOVWF  x96
04E26:  MOVLB  0
04E28:  GOTO   4C44
04E2C:  GOTO   6AB2 (RETURN)
.................... }
.................... 
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... void mode_flash_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... void mode_flash_smf_erase(unsigned int8 parameter[]);
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_ERASE_AND_RESET 0x98
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
06944:  MOVLB  3
06946:  MOVF   x88,W
06948:  MOVWF  FE9
0694A:  MOVF   x89,W
0694C:  MOVWF  FEA
0694E:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
06952:  MOVLW  58
06954:  MOVWF  FF6
06956:  MOVLW  12
06958:  MOVWF  FF7
0695A:  MOVLW  00
0695C:  MOVWF  FF8
0695E:  MOVLB  0
06960:  CALL   15D4
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
06964:  MOVLW  9E
06966:  MOVWF  FF6
06968:  MOVLW  12
0696A:  MOVWF  FF7
0696C:  MOVLW  00
0696E:  MOVWF  FF8
06970:  MOVLW  0C
06972:  MOVLB  7
06974:  MOVWF  xEC
06976:  MOVLB  0
06978:  CALL   1604
0697C:  MOVFF  38A,4A4
06980:  MOVLW  37
06982:  MOVLB  4
06984:  MOVWF  xA5
06986:  MOVLB  0
06988:  CALL   1C0A
0698C:  MOVLW  AC
0698E:  MOVWF  FF6
06990:  MOVLW  12
06992:  MOVWF  FF7
06994:  MOVLW  00
06996:  MOVWF  FF8
06998:  MOVLW  04
0699A:  MOVLB  7
0699C:  MOVWF  xEC
0699E:  MOVLB  0
069A0:  CALL   1604
....................    switch(command_id)
069A4:  MOVLB  3
069A6:  MOVF   x8A,W
069A8:  XORLW  10
069AA:  MOVLB  0
069AC:  BTFSC  FD8.2
069AE:  GOTO   6A5E
069B2:  XORLW  01
069B4:  BTFSC  FD8.2
069B6:  GOTO   6A6E
069BA:  XORLW  03
069BC:  BTFSC  FD8.2
069BE:  GOTO   6A7E
069C2:  XORLW  13
069C4:  BTFSC  FD8.2
069C6:  GOTO   6A86
069CA:  XORLW  12
069CC:  BTFSC  FD8.2
069CE:  GOTO   6A96
069D2:  XORLW  83
069D4:  BTFSC  FD8.2
069D6:  GOTO   6AB6
069DA:  XORLW  01
069DC:  BTFSC  FD8.2
069DE:  GOTO   6AC6
069E2:  XORLW  03
069E4:  BTFSC  FD8.2
069E6:  GOTO   6AD6
069EA:  XORLW  01
069EC:  BTFSC  FD8.2
069EE:  GOTO   6AE6
069F2:  XORLW  07
069F4:  BTFSC  FD8.2
069F6:  GOTO   6AF6
069FA:  XORLW  01
069FC:  BTFSC  FD8.2
069FE:  GOTO   6B06
06A02:  XORLW  03
06A04:  BTFSC  FD8.2
06A06:  GOTO   6B16
06A0A:  XORLW  01
06A0C:  BTFSC  FD8.2
06A0E:  GOTO   6B26
06A12:  XORLW  0F
06A14:  BTFSC  FD8.2
06A16:  GOTO   6B36
06A1A:  XORLW  02
06A1C:  BTFSC  FD8.2
06A1E:  GOTO   6B46
06A22:  XORLW  01
06A24:  BTFSC  FD8.2
06A26:  GOTO   6B56
06A2A:  XORLW  07
06A2C:  BTFSC  FD8.2
06A2E:  GOTO   6B66
06A32:  XORLW  03
06A34:  BTFSC  FD8.2
06A36:  GOTO   6B76
06A3A:  XORLW  EE
06A3C:  BTFSC  FD8.2
06A3E:  GOTO   6B86
06A42:  XORLW  03
06A44:  BTFSC  FD8.2
06A46:  GOTO   6B8E
06A4A:  XORLW  01
06A4C:  BTFSC  FD8.2
06A4E:  GOTO   6B96
06A52:  XORLW  03
06A54:  BTFSC  FD8.2
06A56:  GOTO   6B9E
06A5A:  GOTO   6BA6
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
06A5E:  MOVFF  389,38C
06A62:  MOVFF  388,38B
06A66:  GOTO   3CAA
....................          //mode_iv_meas_adc();
....................          break;
06A6A:  GOTO   6BB6
....................       case 0x11:
....................          mode_test_iv(content);
06A6E:  MOVFF  389,38C
06A72:  MOVFF  388,38B
06A76:  GOTO   4322
....................          break;
06A7A:  GOTO   6BB6
....................       case 0x12:
....................          test_adc();
06A7E:  GOTO   43B2
....................          break;
06A82:  GOTO   6BB6
....................       case 0x01:
....................          mode_measure(content); // check if the flash is connected
06A86:  MOVFF  389,38C
06A8A:  MOVFF  388,38B
06A8E:  GOTO   4560
....................          break;
06A92:  GOTO   6BB6
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
06A96:  MOVLW  01
06A98:  MOVLB  3
06A9A:  ADDWF  x88,W
06A9C:  MOVWF  FE9
06A9E:  MOVLW  00
06AA0:  ADDWFC x89,W
06AA2:  MOVWF  FEA
06AA4:  MOVFF  FEF,38B
06AA8:  MOVFF  38B,38C
06AAC:  MOVLB  0
06AAE:  GOTO   4DD2
....................          break;
06AB2:  GOTO   6BB6
....................          
....................       // Flash command
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
06AB6:  MOVFF  389,38E
06ABA:  MOVFF  388,38D
06ABE:  CALL   518C
....................          break;
06AC2:  GOTO   6BB6
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
06AC6:  MOVFF  389,38C
06ACA:  MOVFF  388,38B
06ACE:  GOTO   5254
....................          break;
06AD2:  GOTO   6BB6
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
06AD6:  MOVFF  389,38C
06ADA:  MOVFF  388,38B
06ADE:  GOTO   53EE
....................          break;
06AE2:  GOTO   6BB6
....................       case ID_FLASH_ERASE_64kByte_SUBSECTOR:
....................          mode_flash_erase_64kbyte_subsector(content);
06AE6:  MOVFF  389,38C
06AEA:  MOVFF  388,38B
06AEE:  GOTO   5584
....................          break;
06AF2:  GOTO   6BB6
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
06AF6:  MOVFF  389,38C
06AFA:  MOVFF  388,38B
06AFE:  GOTO   56FA
....................          break;
06B02:  GOTO   6BB6
....................       case ID_FLASH_WRITE_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
06B06:  MOVFF  389,38C
06B0A:  MOVFF  388,38B
06B0E:  GOTO   5AFA
....................          break;
06B12:  GOTO   6BB6
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
06B16:  MOVFF  389,38C
06B1A:  MOVFF  388,38B
06B1E:  GOTO   5DB8
....................          break;
06B22:  GOTO   6BB6
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
06B26:  MOVFF  389,38C
06B2A:  MOVFF  388,38B
06B2E:  GOTO   6246
....................          break;
06B32:  GOTO   6BB6
....................       case ID_FLASH_ERASE_AND_RESET:
....................          mode_flash_erase_and_reset(content);
06B36:  MOVFF  389,38C
06B3A:  MOVFF  388,38B
06B3E:  GOTO   6468
....................          break;
06B42:  GOTO   6BB6
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
06B46:  MOVFF  389,38C
06B4A:  MOVFF  388,38B
06B4E:  GOTO   64C2
....................          break;
06B52:  GOTO   6BB6
....................       case ID_FLASH_SMF_READ:
....................          mode_flash_smf_read(content);
06B56:  MOVFF  389,38C
06B5A:  MOVFF  388,38B
06B5E:  GOTO   6592
....................          break;
06B62:  GOTO   6BB6
....................       case ID_FLASH_SMF_ERASE:
....................          mode_flash_smf_erase(content);
06B66:  MOVFF  389,38C
06B6A:  MOVFF  388,38B
06B6E:  GOTO   6604
....................          break;
06B72:  GOTO   6BB6
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
06B76:  MOVFF  389,38E
06B7A:  MOVFF  388,38D
06B7E:  CALL   6356
....................          break;
06B82:  GOTO   6BB6
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
06B86:  CALL   6746
....................          break;
06B8A:  GOTO   6BB6
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
06B8E:  CALL   6746
....................          break;
06B92:  GOTO   6BB6
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
06B96:  CALL   6746
....................          break;
06B9A:  GOTO   6BB6
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
06B9E:  CALL   6746
....................          break;
06BA2:  GOTO   6BB6
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
06BA6:  MOVLW  B2
06BA8:  MOVWF  FF6
06BAA:  MOVLW  12
06BAC:  MOVWF  FF7
06BAE:  MOVLW  00
06BB0:  MOVWF  FF8
06BB2:  CALL   15D4
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
06BB6:  MOVLW  CA
06BB8:  MOVWF  FF6
06BBA:  MOVLW  12
06BBC:  MOVWF  FF7
06BBE:  MOVLW  00
06BC0:  MOVWF  FF8
06BC2:  CALL   15D4
06BC6:  GOTO   6C2C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0846A:  MOVLW  10
0846C:  MOVWF  FF6
0846E:  MOVLW  13
08470:  MOVWF  FF7
08472:  MOVLW  00
08474:  MOVWF  FF8
08476:  CALL   15D4
....................    
....................    switch(command->frame_id)
0847A:  MOVLB  3
0847C:  MOVF   x82,W
0847E:  MOVWF  FE9
08480:  MOVF   x83,W
08482:  MOVWF  FEA
08484:  MOVF   FEF,W
08486:  XORLW  00
08488:  MOVLB  0
0848A:  BTFSC  FD8.2
0848C:  GOTO   84A4
08490:  XORLW  01
08492:  BTFSC  FD8.2
08494:  GOTO   84B4
08498:  XORLW  03
0849A:  BTFSC  FD8.2
0849C:  GOTO   84D4
084A0:  GOTO   84E4
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
084A4:  MOVFF  383,385
084A8:  MOVFF  382,384
084AC:  GOTO   6BE0
....................          break;
084B0:  GOTO   84E4
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
084B4:  MOVFF  383,385
084B8:  MOVFF  382,384
084BC:  GOTO   6C62
084C0:  MOVF   01,F
084C2:  BTFSC  FD8.2
084C4:  GOTO   84D0
....................             return TRUE; // if status is finished, return TRUE
084C8:  MOVLW  01
084CA:  MOVWF  01
084CC:  GOTO   84E8
....................          }        
....................          break;
084D0:  GOTO   84E4
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
084D4:  MOVFF  383,385
084D8:  MOVFF  382,384
084DC:  GOTO   83F4
....................          break;
084E0:  GOTO   84E4
....................    }
....................    return FALSE;
084E4:  MOVLW  00
084E6:  MOVWF  01
084E8:  GOTO   8D7A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
06BE0:  MOVLW  28
06BE2:  MOVWF  FF6
06BE4:  MOVLW  13
06BE6:  MOVWF  FF7
06BE8:  MOVLW  00
06BEA:  MOVWF  FF8
06BEC:  CALL   15D4
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
06BF0:  MOVLW  3E
06BF2:  MOVWF  FF6
06BF4:  MOVLW  13
06BF6:  MOVWF  FF7
06BF8:  MOVLW  00
06BFA:  MOVWF  FF8
06BFC:  CALL   15D4
....................    transmit_ack();
06C00:  CALL   3C96
.................... 
....................    status[0] = EXECUTING_MISSION;
06C04:  MOVLW  02
06C06:  MOVWF  1D
....................    execute_mission(command->content);
06C08:  MOVLW  03
06C0A:  MOVLB  3
06C0C:  ADDWF  x84,W
06C0E:  MOVWF  01
06C10:  MOVLW  00
06C12:  ADDWFC x85,W
06C14:  MOVWF  03
06C16:  MOVF   01,W
06C18:  MOVWF  x86
06C1A:  MOVFF  03,387
06C1E:  MOVFF  387,389
06C22:  MOVFF  386,388
06C26:  MOVLB  0
06C28:  GOTO   6944
....................    if (is_empty_smf_data())
06C2C:  CALL   6BCA
06C30:  MOVF   01,F
06C32:  BTFSC  FD8.2
06C34:  GOTO   6C40
....................       status[0] = FINISHED;
06C38:  MOVLW  06
06C3A:  MOVWF  1D
06C3C:  GOTO   6C44
....................    else
....................       status[0] = SMF_USE_REQ;
06C40:  MOVLW  04
06C42:  MOVWF  1D
06C44:  GOTO   84B0 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
06C62:  MOVLW  58
06C64:  MOVWF  FF6
06C66:  MOVLW  13
06C68:  MOVWF  FF7
06C6A:  MOVLW  00
06C6C:  MOVWF  FF8
06C6E:  CALL   15D4
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
06C72:  MOVLW  6C
06C74:  MOVWF  FF6
06C76:  MOVLW  13
06C78:  MOVWF  FF7
06C7A:  MOVLW  00
06C7C:  MOVWF  FF8
06C7E:  CALL   15D4
....................    transmit_status();
06C82:  GOTO   6C48
....................    if (status[0] == FINISHED)
06C86:  MOVF   1D,W
06C88:  SUBLW  06
06C8A:  BTFSS  FD8.2
06C8C:  GOTO   6CAC
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
06C90:  MOVLW  8A
06C92:  MOVWF  FF6
06C94:  MOVLW  13
06C96:  MOVWF  FF7
06C98:  MOVLW  00
06C9A:  MOVWF  FF8
06C9C:  CALL   15D4
....................       return TRUE;
06CA0:  MOVLW  01
06CA2:  MOVWF  01
06CA4:  GOTO   6CB4
....................    }
06CA8:  GOTO   6CB4
....................    else{
....................       return FALSE;
06CAC:  MOVLW  00
06CAE:  MOVWF  01
06CB0:  GOTO   6CB4
....................    }
06CB4:  GOTO   84C0 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
083F4:  MOVLW  A6
083F6:  MOVWF  FF6
083F8:  MOVLW  13
083FA:  MOVWF  FF7
083FC:  MOVLW  00
083FE:  MOVWF  FF8
08400:  CALL   15D4
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
08404:  MOVLW  C0
08406:  MOVWF  FF6
08408:  MOVLW  13
0840A:  MOVWF  FF7
0840C:  MOVLW  00
0840E:  MOVWF  FF8
08410:  CALL   15D4
....................     transmit_ack();
08414:  CALL   3C96
....................     
....................     if (command->content[0] == ALLOW) {
08418:  MOVLW  03
0841A:  MOVLB  3
0841C:  ADDWF  x84,W
0841E:  MOVWF  FE9
08420:  MOVLW  00
08422:  ADDWFC x85,W
08424:  MOVWF  FEA
08426:  DECFSZ FEF,W
08428:  BRA    842E
0842A:  BRA    8434
0842C:  MOVLB  0
0842E:  MOVLB  0
08430:  GOTO   8456
08434:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
08436:  MOVLW  DA
08438:  MOVWF  FF6
0843A:  MOVLW  13
0843C:  MOVWF  FF7
0843E:  MOVLW  00
08440:  MOVWF  FF8
08442:  CALL   15D4
....................         status[0] = COPYING;
08446:  MOVLW  05
08448:  MOVWF  1D
....................         smf_write();
0844A:  GOTO   76C8
....................         status[0] = FINISHED;
0844E:  MOVLW  06
08450:  MOVWF  1D
....................     } else {
08452:  GOTO   8466
....................         fprintf(PC, "\t\t-> denyed\r\n");
08456:  MOVLW  E8
08458:  MOVWF  FF6
0845A:  MOVLW  13
0845C:  MOVWF  FF7
0845E:  MOVLW  00
08460:  MOVWF  FF8
08462:  CALL   15D4
....................     }
08466:  GOTO   84E0 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
084EC:  CLRF   FF8
084EE:  BCF    FD0.7
084F0:  BSF    07.7
084F2:  MOVLB  E
084F4:  MOVLW  55
084F6:  MOVWF  F7E
084F8:  MOVLW  AA
084FA:  MOVWF  F7E
084FC:  BCF    F66.6
084FE:  MOVLW  F9
08500:  MOVWF  x2C
08502:  MOVLW  00
08504:  MOVWF  x2E
08506:  MOVLW  40
08508:  MOVWF  x12
0850A:  MOVLW  30
0850C:  MOVWF  x13
0850E:  MOVLW  20
08510:  MOVWF  x22
08512:  MOVLW  55
08514:  MOVWF  F7E
08516:  MOVLW  AA
08518:  MOVWF  F7E
0851A:  BSF    F66.6
0851C:  CLRF   F9B
0851E:  CLRF   F64
08520:  CLRF   F65
08522:  CLRF   F66
08524:  MOVLW  02
08526:  MOVWF  FD3
08528:  CLRF   1B
0852A:  MOVLB  F
0852C:  BSF    x2D.3
0852E:  MOVLW  A0
08530:  MOVWF  x2B
08532:  MOVLW  01
08534:  MOVWF  x2C
08536:  MOVLW  A6
08538:  MOVWF  x2E
0853A:  MOVLW  90
0853C:  MOVWF  x2F
0853E:  BCF    F93.6
08540:  BSF    F8A.6
08542:  BCF    FC6.5
08544:  MOVLW  40
08546:  MOVWF  FC7
08548:  MOVLW  03
0854A:  MOVWF  FC8
0854C:  MOVLW  2A
0854E:  MOVWF  FC6
08550:  BCF    F92.1
08552:  BSF    F92.0
08554:  BCF    F92.3
08556:  BSF    F93.4
08558:  BCF    F93.5
0855A:  BCF    F93.2
0855C:  BCF    F8A.2
0855E:  BCF    1C.0
08560:  CLRF   24
08562:  CLRF   23
08564:  CLRF   22
08566:  CLRF   21
08568:  CLRF   28
0856A:  CLRF   27
0856C:  CLRF   26
0856E:  CLRF   25
08570:  CLRF   2A
08572:  CLRF   29
08574:  CLRF   4B
08576:  MOVLW  1E
08578:  MOVLB  0
0857A:  MOVWF  xEC
0857C:  CLRF   xED
0857E:  MOVLB  3
08580:  CLRF   x4D
08582:  CLRF   x4C
08584:  CLRF   x4B
08586:  CLRF   x4A
08588:  CLRF   x4F
0858A:  CLRF   x4E
0858C:  CLRF   x51
0858E:  CLRF   x50
08590:  CLRF   x53
08592:  CLRF   x52
08594:  CLRF   x55
08596:  CLRF   x54
08598:  CLRF   x74
0859A:  CLRF   x73
0859C:  MOVLB  E
0859E:  CLRF   xD9
085A0:  CLRF   xDA
085A2:  CLRF   xCE
085A4:  CLRF   xCF
085A6:  CLRF   xD0
085A8:  CLRF   xD1
085AA:  CLRF   xD2
085AC:  CLRF   xD3
085AE:  CLRF   xD4
085B0:  CLRF   xD5
085B2:  CLRF   x45
085B4:  CLRF   x46
085B6:  CLRF   x47
085B8:  BCF    x8D.7
085BA:  BCF    x8D.6
085BC:  BCF    x8D.5
085BE:  MOVLB  F
085C0:  CLRF   x53
085C2:  CLRF   x38
085C4:  CLRF   x37
085C6:  MOVLB  0
085C8:  MOVLW  03
085CA:  MOVWF  1D
085CC:  CLRF   1E
085CE:  CLRF   1F
085D0:  CLRF   20
085D2:  CLRF   2B
085D4:  CLRF   2C
085D6:  CLRF   2D
085D8:  CLRF   2E
085DA:  CLRF   2F
085DC:  CLRF   30
085DE:  CLRF   31
085E0:  CLRF   32
085E2:  CLRF   33
085E4:  CLRF   34
085E6:  CLRF   35
085E8:  CLRF   36
085EA:  CLRF   37
085EC:  CLRF   38
085EE:  CLRF   39
085F0:  CLRF   3A
085F2:  CLRF   3B
085F4:  CLRF   3C
085F6:  CLRF   3D
085F8:  CLRF   3E
085FA:  CLRF   3F
085FC:  CLRF   40
085FE:  CLRF   41
08600:  CLRF   42
08602:  CLRF   43
08604:  CLRF   44
08606:  CLRF   45
08608:  CLRF   46
0860A:  CLRF   47
0860C:  CLRF   48
0860E:  CLRF   49
08610:  CLRF   4A
08612:  CLRF   4C
08614:  CLRF   4D
08616:  CLRF   4E
08618:  CLRF   4F
0861A:  CLRF   50
0861C:  CLRF   51
0861E:  CLRF   52
08620:  CLRF   53
08622:  CLRF   54
08624:  CLRF   55
08626:  CLRF   56
08628:  CLRF   57
0862A:  CLRF   58
0862C:  CLRF   59
0862E:  CLRF   5A
08630:  CLRF   5B
08632:  CLRF   5C
08634:  CLRF   5D
08636:  CLRF   5E
08638:  CLRF   5F
0863A:  CLRF   x60
0863C:  CLRF   x61
0863E:  CLRF   x62
08640:  CLRF   x63
08642:  CLRF   x64
08644:  CLRF   x65
08646:  CLRF   x66
08648:  CLRF   x67
0864A:  CLRF   x68
0864C:  CLRF   x69
0864E:  CLRF   x6A
08650:  CLRF   x6B
08652:  CLRF   x6C
08654:  CLRF   x6D
08656:  CLRF   x6E
08658:  CLRF   x6F
0865A:  CLRF   x70
0865C:  CLRF   x71
0865E:  CLRF   x72
08660:  CLRF   x73
08662:  CLRF   x74
08664:  CLRF   x75
08666:  CLRF   x76
08668:  CLRF   x77
0866A:  CLRF   x78
0866C:  CLRF   x79
0866E:  CLRF   x7A
08670:  CLRF   x7B
08672:  CLRF   x7C
08674:  CLRF   x7D
08676:  CLRF   x7E
08678:  CLRF   x7F
0867A:  CLRF   x80
0867C:  CLRF   x81
0867E:  CLRF   x82
08680:  CLRF   x83
08682:  CLRF   x84
08684:  CLRF   x85
08686:  CLRF   x86
08688:  CLRF   x87
0868A:  CLRF   x88
0868C:  CLRF   x89
0868E:  CLRF   x8A
08690:  CLRF   x8B
08692:  CLRF   x8C
08694:  CLRF   x8D
08696:  CLRF   x8E
08698:  CLRF   x8F
0869A:  CLRF   x90
0869C:  CLRF   x91
0869E:  CLRF   x92
086A0:  CLRF   x93
086A2:  CLRF   x94
086A4:  CLRF   x95
086A6:  CLRF   x96
086A8:  CLRF   x97
086AA:  CLRF   x98
086AC:  CLRF   x99
086AE:  CLRF   x9A
086B0:  CLRF   x9B
086B2:  CLRF   x9C
086B4:  CLRF   x9D
086B6:  CLRF   x9E
086B8:  CLRF   x9F
086BA:  CLRF   xA0
086BC:  CLRF   xA1
086BE:  CLRF   xA2
086C0:  CLRF   xA3
086C2:  CLRF   xA4
086C4:  CLRF   xA5
086C6:  CLRF   xA6
086C8:  CLRF   xA7
086CA:  CLRF   xA8
086CC:  CLRF   xA9
086CE:  CLRF   xAA
086D0:  CLRF   xAB
086D2:  CLRF   xAC
086D4:  CLRF   xAD
086D6:  CLRF   xAE
086D8:  CLRF   xAF
086DA:  CLRF   xB0
086DC:  CLRF   xB1
086DE:  CLRF   xB2
086E0:  CLRF   xB3
086E2:  CLRF   xB4
086E4:  CLRF   xB5
086E6:  CLRF   xB6
086E8:  CLRF   xB7
086EA:  CLRF   xB8
086EC:  CLRF   xB9
086EE:  CLRF   xBA
086F0:  CLRF   xBB
086F2:  CLRF   xBC
086F4:  CLRF   xBD
086F6:  CLRF   xBE
086F8:  CLRF   xBF
086FA:  CLRF   xC0
086FC:  CLRF   xC1
086FE:  CLRF   xC2
08700:  CLRF   xC3
08702:  CLRF   xC4
08704:  CLRF   xC5
08706:  CLRF   xC6
08708:  CLRF   xC7
0870A:  CLRF   xC8
0870C:  CLRF   xC9
0870E:  CLRF   xCA
08710:  CLRF   xCB
08712:  CLRF   xCC
08714:  CLRF   xCD
08716:  CLRF   xCE
08718:  CLRF   xCF
0871A:  CLRF   xD0
0871C:  CLRF   xD1
0871E:  CLRF   xD2
08720:  CLRF   xD3
08722:  CLRF   xD4
08724:  CLRF   xD5
08726:  CLRF   xD6
08728:  CLRF   xD7
0872A:  CLRF   xD8
0872C:  CLRF   xD9
0872E:  CLRF   xDA
08730:  CLRF   xDB
08732:  CLRF   xDC
08734:  CLRF   xDD
08736:  CLRF   xDE
08738:  CLRF   xDF
0873A:  MOVLW  05
0873C:  MOVWF  xE0
0873E:  MOVLW  7C
08740:  MOVWF  xE1
08742:  MOVLW  01
08744:  MOVWF  xE2
08746:  MOVLW  01
08748:  MOVWF  xE3
0874A:  MOVLW  02
0874C:  MOVWF  xE4
0874E:  MOVLW  7C
08750:  MOVWF  xE5
08752:  CLRF   xE6
08754:  MOVLW  09
08756:  MOVWF  xE7
08758:  MOVLW  01
0875A:  MOVWF  xE8
0875C:  CLRF   xE9
0875E:  MOVLW  02
08760:  MOVWF  xEA
08762:  MOVLW  01
08764:  MOVWF  xEB
08766:  CLRF   xEE
08768:  CLRF   xEF
0876A:  CLRF   xF0
0876C:  CLRF   xF1
0876E:  CLRF   xF2
08770:  CLRF   xF3
08772:  CLRF   xF4
08774:  CLRF   xF5
08776:  CLRF   xF6
08778:  CLRF   xF7
0877A:  CLRF   xF8
0877C:  CLRF   xF9
0877E:  CLRF   xFA
08780:  CLRF   xFB
08782:  CLRF   xFC
08784:  CLRF   xFD
08786:  CLRF   xFE
08788:  CLRF   xFF
0878A:  MOVLB  1
0878C:  CLRF   x00
0878E:  CLRF   x01
08790:  CLRF   x02
08792:  CLRF   x03
08794:  CLRF   x04
08796:  CLRF   x05
08798:  CLRF   x06
0879A:  CLRF   x07
0879C:  CLRF   x08
0879E:  CLRF   x09
087A0:  CLRF   x0A
087A2:  CLRF   x0B
087A4:  CLRF   x0C
087A6:  CLRF   x0D
087A8:  CLRF   x0E
087AA:  CLRF   x0F
087AC:  CLRF   x10
087AE:  CLRF   x11
087B0:  CLRF   x12
087B2:  CLRF   x13
087B4:  CLRF   x14
087B6:  CLRF   x15
087B8:  CLRF   x16
087BA:  CLRF   x17
087BC:  CLRF   x18
087BE:  CLRF   x19
087C0:  CLRF   x1A
087C2:  CLRF   x1B
087C4:  CLRF   x1C
087C6:  CLRF   x1D
087C8:  CLRF   x1E
087CA:  CLRF   x1F
087CC:  CLRF   x20
087CE:  CLRF   x21
087D0:  CLRF   x22
087D2:  CLRF   x23
087D4:  CLRF   x24
087D6:  CLRF   x25
087D8:  CLRF   x26
087DA:  CLRF   x27
087DC:  CLRF   x28
087DE:  CLRF   x29
087E0:  CLRF   x2A
087E2:  CLRF   x2B
087E4:  CLRF   x2C
087E6:  CLRF   x2D
087E8:  CLRF   x2E
087EA:  CLRF   x2F
087EC:  CLRF   x30
087EE:  CLRF   x31
087F0:  CLRF   x32
087F2:  CLRF   x33
087F4:  CLRF   x34
087F6:  CLRF   x35
087F8:  CLRF   x36
087FA:  CLRF   x37
087FC:  CLRF   x38
087FE:  CLRF   x39
08800:  CLRF   x3A
08802:  CLRF   x3B
08804:  CLRF   x3C
08806:  CLRF   x3D
08808:  CLRF   x3E
0880A:  CLRF   x3F
0880C:  CLRF   x40
0880E:  CLRF   x41
08810:  CLRF   x42
08812:  CLRF   x43
08814:  CLRF   x44
08816:  CLRF   x45
08818:  CLRF   x46
0881A:  CLRF   x47
0881C:  CLRF   x48
0881E:  CLRF   x49
08820:  CLRF   x4A
08822:  CLRF   x4B
08824:  CLRF   x4C
08826:  CLRF   x4D
08828:  CLRF   x4E
0882A:  CLRF   x4F
0882C:  CLRF   x50
0882E:  CLRF   x51
08830:  CLRF   x52
08832:  CLRF   x53
08834:  CLRF   x54
08836:  CLRF   x55
08838:  CLRF   x56
0883A:  CLRF   x57
0883C:  CLRF   x58
0883E:  CLRF   x59
08840:  CLRF   x5A
08842:  CLRF   x5B
08844:  CLRF   x5C
08846:  CLRF   x5D
08848:  CLRF   x5E
0884A:  CLRF   x5F
0884C:  CLRF   x60
0884E:  CLRF   x61
08850:  CLRF   x62
08852:  CLRF   x63
08854:  CLRF   x64
08856:  CLRF   x65
08858:  CLRF   x66
0885A:  CLRF   x67
0885C:  CLRF   x68
0885E:  CLRF   x69
08860:  CLRF   x6A
08862:  CLRF   x6B
08864:  CLRF   x6C
08866:  CLRF   x6D
08868:  CLRF   x6E
0886A:  CLRF   x6F
0886C:  CLRF   x70
0886E:  CLRF   x71
08870:  CLRF   x72
08872:  CLRF   x73
08874:  CLRF   x74
08876:  CLRF   x75
08878:  CLRF   x76
0887A:  CLRF   x77
0887C:  CLRF   x78
0887E:  CLRF   x79
08880:  CLRF   x7A
08882:  CLRF   x7B
08884:  CLRF   x7C
08886:  CLRF   x7D
08888:  CLRF   x7E
0888A:  CLRF   x7F
0888C:  CLRF   x80
0888E:  CLRF   x81
08890:  CLRF   x82
08892:  CLRF   x83
08894:  CLRF   x84
08896:  CLRF   x85
08898:  CLRF   x86
0889A:  CLRF   x87
0889C:  CLRF   x88
0889E:  CLRF   x89
088A0:  CLRF   x8A
088A2:  CLRF   x8B
088A4:  CLRF   x8C
088A6:  CLRF   x8D
088A8:  CLRF   x8E
088AA:  CLRF   x8F
088AC:  CLRF   x90
088AE:  CLRF   x91
088B0:  CLRF   x92
088B2:  CLRF   x93
088B4:  CLRF   x94
088B6:  CLRF   x95
088B8:  CLRF   x96
088BA:  CLRF   x97
088BC:  CLRF   x98
088BE:  CLRF   x99
088C0:  CLRF   x9A
088C2:  CLRF   x9B
088C4:  CLRF   x9C
088C6:  CLRF   x9D
088C8:  CLRF   x9E
088CA:  CLRF   x9F
088CC:  CLRF   xA0
088CE:  CLRF   xA1
088D0:  CLRF   xA2
088D2:  CLRF   xA3
088D4:  CLRF   xA4
088D6:  CLRF   xA5
088D8:  CLRF   xA6
088DA:  CLRF   xA7
088DC:  CLRF   xA8
088DE:  CLRF   xA9
088E0:  CLRF   xAA
088E2:  CLRF   xAB
088E4:  CLRF   xAC
088E6:  CLRF   xAD
088E8:  CLRF   xAE
088EA:  CLRF   xAF
088EC:  CLRF   xB0
088EE:  CLRF   xB1
088F0:  CLRF   xB2
088F2:  CLRF   xB3
088F4:  CLRF   xB4
088F6:  CLRF   xB5
088F8:  CLRF   xB6
088FA:  CLRF   xB7
088FC:  CLRF   xB8
088FE:  CLRF   xB9
08900:  CLRF   xBA
08902:  CLRF   xBB
08904:  CLRF   xBC
08906:  CLRF   xBD
08908:  CLRF   xBE
0890A:  CLRF   xBF
0890C:  CLRF   xC0
0890E:  CLRF   xC1
08910:  CLRF   xC2
08912:  CLRF   xC3
08914:  CLRF   xC4
08916:  CLRF   xC5
08918:  CLRF   xC6
0891A:  CLRF   xC7
0891C:  CLRF   xC8
0891E:  CLRF   xC9
08920:  CLRF   xCA
08922:  CLRF   xCB
08924:  CLRF   xCC
08926:  CLRF   xCD
08928:  CLRF   xCE
0892A:  CLRF   xCF
0892C:  CLRF   xD0
0892E:  CLRF   xD1
08930:  CLRF   xD2
08932:  CLRF   xD3
08934:  CLRF   xD4
08936:  CLRF   xD5
08938:  CLRF   xD6
0893A:  CLRF   xD7
0893C:  CLRF   xD8
0893E:  CLRF   xD9
08940:  CLRF   xDA
08942:  CLRF   xDB
08944:  CLRF   xDC
08946:  CLRF   xDD
08948:  CLRF   xDE
0894A:  CLRF   xDF
0894C:  CLRF   xE0
0894E:  CLRF   xE1
08950:  CLRF   xE2
08952:  CLRF   xE3
08954:  CLRF   xE4
08956:  CLRF   xE5
08958:  CLRF   xE6
0895A:  CLRF   xE7
0895C:  CLRF   xE8
0895E:  CLRF   xE9
08960:  CLRF   xEA
08962:  CLRF   xEB
08964:  CLRF   xEC
08966:  CLRF   xED
08968:  CLRF   xEE
0896A:  CLRF   xEF
0896C:  CLRF   xF0
0896E:  CLRF   xF1
08970:  CLRF   xF2
08972:  CLRF   xF3
08974:  CLRF   xF4
08976:  CLRF   xF5
08978:  CLRF   xF6
0897A:  CLRF   xF7
0897C:  CLRF   xF8
0897E:  CLRF   xF9
08980:  CLRF   xFA
08982:  CLRF   xFB
08984:  CLRF   xFC
08986:  CLRF   xFD
08988:  CLRF   xFE
0898A:  CLRF   xFF
0898C:  MOVLB  2
0898E:  CLRF   x00
08990:  CLRF   x01
08992:  CLRF   x02
08994:  CLRF   x03
08996:  CLRF   x04
08998:  CLRF   x05
0899A:  CLRF   x06
0899C:  CLRF   x07
0899E:  CLRF   x08
089A0:  CLRF   x09
089A2:  CLRF   x0A
089A4:  CLRF   x0B
089A6:  CLRF   x0C
089A8:  CLRF   x0D
089AA:  CLRF   x0E
089AC:  CLRF   x0F
089AE:  CLRF   x10
089B0:  CLRF   x11
089B2:  CLRF   x12
089B4:  CLRF   x13
089B6:  CLRF   x14
089B8:  CLRF   x15
089BA:  CLRF   x16
089BC:  CLRF   x17
089BE:  CLRF   x18
089C0:  CLRF   x19
089C2:  CLRF   x1A
089C4:  CLRF   x1B
089C6:  CLRF   x1C
089C8:  CLRF   x1D
089CA:  CLRF   x1E
089CC:  CLRF   x1F
089CE:  CLRF   x20
089D0:  CLRF   x21
089D2:  CLRF   x22
089D4:  CLRF   x23
089D6:  CLRF   x24
089D8:  CLRF   x25
089DA:  CLRF   x26
089DC:  CLRF   x27
089DE:  CLRF   x28
089E0:  CLRF   x29
089E2:  CLRF   x2A
089E4:  CLRF   x2B
089E6:  CLRF   x2C
089E8:  CLRF   x2D
089EA:  CLRF   x2E
089EC:  CLRF   x2F
089EE:  CLRF   x30
089F0:  CLRF   x31
089F2:  CLRF   x32
089F4:  CLRF   x33
089F6:  CLRF   x34
089F8:  CLRF   x35
089FA:  CLRF   x36
089FC:  CLRF   x37
089FE:  CLRF   x38
08A00:  CLRF   x39
08A02:  CLRF   x3A
08A04:  CLRF   x3B
08A06:  CLRF   x3C
08A08:  CLRF   x3D
08A0A:  CLRF   x3E
08A0C:  CLRF   x3F
08A0E:  CLRF   x40
08A10:  CLRF   x41
08A12:  CLRF   x42
08A14:  CLRF   x43
08A16:  CLRF   x44
08A18:  CLRF   x45
08A1A:  CLRF   x46
08A1C:  CLRF   x47
08A1E:  CLRF   x48
08A20:  CLRF   x49
08A22:  CLRF   x4A
08A24:  CLRF   x4B
08A26:  CLRF   x4C
08A28:  CLRF   x4D
08A2A:  CLRF   x4E
08A2C:  CLRF   x4F
08A2E:  CLRF   x50
08A30:  CLRF   x51
08A32:  CLRF   x52
08A34:  CLRF   x53
08A36:  CLRF   x54
08A38:  CLRF   x55
08A3A:  CLRF   x56
08A3C:  CLRF   x57
08A3E:  CLRF   x58
08A40:  CLRF   x59
08A42:  CLRF   x5A
08A44:  CLRF   x5B
08A46:  CLRF   x5C
08A48:  CLRF   x5D
08A4A:  CLRF   x5E
08A4C:  CLRF   x5F
08A4E:  CLRF   x60
08A50:  CLRF   x61
08A52:  CLRF   x62
08A54:  CLRF   x63
08A56:  CLRF   x64
08A58:  CLRF   x65
08A5A:  CLRF   x66
08A5C:  CLRF   x67
08A5E:  CLRF   x68
08A60:  CLRF   x69
08A62:  CLRF   x6A
08A64:  CLRF   x6B
08A66:  CLRF   x6C
08A68:  CLRF   x6D
08A6A:  CLRF   x6E
08A6C:  CLRF   x6F
08A6E:  CLRF   x70
08A70:  CLRF   x71
08A72:  CLRF   x72
08A74:  CLRF   x73
08A76:  CLRF   x74
08A78:  CLRF   x75
08A7A:  CLRF   x76
08A7C:  CLRF   x77
08A7E:  CLRF   x78
08A80:  CLRF   x79
08A82:  CLRF   x7A
08A84:  CLRF   x7B
08A86:  CLRF   x7C
08A88:  CLRF   x7D
08A8A:  CLRF   x7E
08A8C:  CLRF   x7F
08A8E:  CLRF   x80
08A90:  CLRF   x81
08A92:  CLRF   x82
08A94:  CLRF   x83
08A96:  CLRF   x84
08A98:  CLRF   x85
08A9A:  CLRF   x86
08A9C:  CLRF   x87
08A9E:  CLRF   x88
08AA0:  CLRF   x89
08AA2:  CLRF   x8A
08AA4:  CLRF   x8B
08AA6:  CLRF   x8C
08AA8:  CLRF   x8D
08AAA:  CLRF   x8E
08AAC:  CLRF   x8F
08AAE:  CLRF   x90
08AB0:  CLRF   x91
08AB2:  CLRF   x92
08AB4:  CLRF   x93
08AB6:  CLRF   x94
08AB8:  CLRF   x95
08ABA:  CLRF   x96
08ABC:  CLRF   x97
08ABE:  CLRF   x98
08AC0:  CLRF   x99
08AC2:  CLRF   x9A
08AC4:  CLRF   x9B
08AC6:  CLRF   x9C
08AC8:  CLRF   x9D
08ACA:  CLRF   x9E
08ACC:  CLRF   x9F
08ACE:  CLRF   xA0
08AD0:  CLRF   xA1
08AD2:  CLRF   xA2
08AD4:  CLRF   xA3
08AD6:  CLRF   xA4
08AD8:  CLRF   xA5
08ADA:  CLRF   xA6
08ADC:  CLRF   xA7
08ADE:  CLRF   xA8
08AE0:  CLRF   xA9
08AE2:  CLRF   xAA
08AE4:  CLRF   xAB
08AE6:  CLRF   xAC
08AE8:  CLRF   xAD
08AEA:  CLRF   xAE
08AEC:  CLRF   xAF
08AEE:  CLRF   xB0
08AF0:  CLRF   xB1
08AF2:  CLRF   xB2
08AF4:  CLRF   xB3
08AF6:  CLRF   xB4
08AF8:  CLRF   xB5
08AFA:  CLRF   xB6
08AFC:  CLRF   xB7
08AFE:  CLRF   xB8
08B00:  CLRF   xB9
08B02:  CLRF   xBA
08B04:  CLRF   xBB
08B06:  CLRF   xBC
08B08:  CLRF   xBD
08B0A:  CLRF   xBE
08B0C:  CLRF   xBF
08B0E:  CLRF   xC0
08B10:  CLRF   xC1
08B12:  CLRF   xC2
08B14:  CLRF   xC3
08B16:  CLRF   xC4
08B18:  CLRF   xC5
08B1A:  CLRF   xC6
08B1C:  CLRF   xC7
08B1E:  CLRF   xC8
08B20:  CLRF   xC9
08B22:  CLRF   xCA
08B24:  CLRF   xCB
08B26:  CLRF   xCC
08B28:  CLRF   xCD
08B2A:  CLRF   xCE
08B2C:  CLRF   xCF
08B2E:  CLRF   xD0
08B30:  CLRF   xD1
08B32:  CLRF   xD2
08B34:  CLRF   xD3
08B36:  CLRF   xD4
08B38:  CLRF   xD5
08B3A:  CLRF   xD6
08B3C:  CLRF   xD7
08B3E:  CLRF   xD8
08B40:  CLRF   xD9
08B42:  CLRF   xDA
08B44:  CLRF   xDB
08B46:  CLRF   xDC
08B48:  CLRF   xDD
08B4A:  CLRF   xDE
08B4C:  CLRF   xDF
08B4E:  CLRF   xE0
08B50:  CLRF   xE1
08B52:  CLRF   xE2
08B54:  CLRF   xE3
08B56:  CLRF   xE4
08B58:  CLRF   xE5
08B5A:  CLRF   xE6
08B5C:  CLRF   xE7
08B5E:  CLRF   xE8
08B60:  CLRF   xE9
08B62:  CLRF   xEA
08B64:  CLRF   xEB
08B66:  CLRF   xEC
08B68:  CLRF   xED
08B6A:  CLRF   xEE
08B6C:  CLRF   xEF
08B6E:  CLRF   xF0
08B70:  CLRF   xF1
08B72:  CLRF   xF2
08B74:  CLRF   xF3
08B76:  CLRF   xF4
08B78:  CLRF   xF5
08B7A:  CLRF   xF6
08B7C:  CLRF   xF7
08B7E:  CLRF   xF8
08B80:  CLRF   xF9
08B82:  CLRF   xFA
08B84:  CLRF   xFB
08B86:  CLRF   xFC
08B88:  CLRF   xFD
08B8A:  CLRF   xFE
08B8C:  CLRF   xFF
08B8E:  MOVLB  3
08B90:  CLRF   x00
08B92:  CLRF   x01
08B94:  CLRF   x02
08B96:  CLRF   x03
08B98:  CLRF   x04
08B9A:  CLRF   x05
08B9C:  CLRF   x06
08B9E:  CLRF   x07
08BA0:  CLRF   x08
08BA2:  CLRF   x09
08BA4:  CLRF   x0A
08BA6:  CLRF   x0B
08BA8:  CLRF   x0C
08BAA:  CLRF   x0D
08BAC:  CLRF   x0E
08BAE:  CLRF   x0F
08BB0:  CLRF   x10
08BB2:  CLRF   x11
08BB4:  CLRF   x12
08BB6:  CLRF   x13
08BB8:  CLRF   x14
08BBA:  CLRF   x15
08BBC:  CLRF   x16
08BBE:  CLRF   x17
08BC0:  CLRF   x18
08BC2:  CLRF   x19
08BC4:  CLRF   x1A
08BC6:  CLRF   x1B
08BC8:  CLRF   x1C
08BCA:  CLRF   x1D
08BCC:  CLRF   x1E
08BCE:  CLRF   x1F
08BD0:  CLRF   x20
08BD2:  CLRF   x21
08BD4:  CLRF   x22
08BD6:  CLRF   x23
08BD8:  CLRF   x24
08BDA:  CLRF   x25
08BDC:  CLRF   x26
08BDE:  CLRF   x27
08BE0:  CLRF   x28
08BE2:  CLRF   x29
08BE4:  CLRF   x2A
08BE6:  CLRF   x2B
08BE8:  CLRF   x2C
08BEA:  CLRF   x2D
08BEC:  CLRF   x2E
08BEE:  CLRF   x2F
08BF0:  CLRF   x30
08BF2:  CLRF   x31
08BF4:  CLRF   x32
08BF6:  CLRF   x33
08BF8:  CLRF   x34
08BFA:  CLRF   x35
08BFC:  CLRF   x36
08BFE:  CLRF   x37
08C00:  CLRF   x38
08C02:  CLRF   x39
08C04:  CLRF   x3A
08C06:  CLRF   x3B
08C08:  CLRF   x3C
08C0A:  CLRF   x3D
08C0C:  CLRF   x3E
08C0E:  CLRF   x3F
08C10:  CLRF   x40
08C12:  CLRF   x41
08C14:  CLRF   x42
08C16:  CLRF   x43
08C18:  CLRF   x44
08C1A:  CLRF   x45
08C1C:  CLRF   x46
08C1E:  CLRF   x47
08C20:  CLRF   x48
08C22:  CLRF   x49
08C24:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
08C26:  MOVLW  64
08C28:  MOVLB  8
08C2A:  MOVWF  x44
08C2C:  MOVLB  0
08C2E:  CALL   1554
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
08C32:  MOVLW  F6
08C34:  MOVWF  FF6
08C36:  MOVLW  13
08C38:  MOVWF  FF7
08C3A:  MOVLW  00
08C3C:  MOVWF  FF8
08C3E:  CALL   15D4
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
08C42:  MOVLW  3C
08C44:  MOVWF  FF6
08C46:  MOVLW  14
08C48:  MOVWF  FF7
08C4A:  MOVLW  00
08C4C:  MOVWF  FF8
08C4E:  CALL   15D4
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
08C52:  MOVLW  6A
08C54:  MOVWF  FF6
08C56:  MOVLW  14
08C58:  MOVWF  FF7
08C5A:  MOVLW  00
08C5C:  MOVWF  FF8
08C5E:  MOVLW  10
08C60:  MOVLB  7
08C62:  MOVWF  xEC
08C64:  MOVLB  0
08C66:  CALL   1604
08C6A:  MOVLW  90
08C6C:  MOVWF  FF6
08C6E:  MOVLW  14
08C70:  MOVWF  FF7
08C72:  MOVLW  00
08C74:  MOVWF  FF8
08C76:  CALL   15D4
08C7A:  MOVLW  20
08C7C:  MOVLB  8
08C7E:  MOVWF  x2F
08C80:  MOVLB  0
08C82:  CALL   1582
08C86:  MOVLW  9A
08C88:  MOVWF  FF6
08C8A:  MOVLW  14
08C8C:  MOVWF  FF7
08C8E:  MOVLW  00
08C90:  MOVWF  FF8
08C92:  CALL   15D4
08C96:  MOVLW  7F
08C98:  MOVWF  FF6
08C9A:  MOVLW  14
08C9C:  MOVWF  FF7
08C9E:  MOVLW  00
08CA0:  MOVWF  FF8
08CA2:  MOVLW  0F
08CA4:  MOVLB  7
08CA6:  MOVWF  xEC
08CA8:  MOVLB  0
08CAA:  CALL   1604
....................    
....................    io_init();
08CAE:  GOTO   163A
....................    //adc_init();
....................    setup_uart_to_boss();
08CB2:  GOTO   1666
....................    //setup_timer();
....................    ad7490_init();
08CB6:  GOTO   1690
....................    misf_init();
08CBA:  CALL   1C7A
....................    mcp4901_1_write(0);
08CBE:  MOVLB  7
08CC0:  CLRF   xED
08CC2:  CLRF   xEC
08CC4:  MOVLB  0
08CC6:  CALL   26D4
....................    piclog_make(PICLOG_STARTUP,0x00);
08CCA:  MOVFF  ED,492
08CCE:  MOVLB  4
08CD0:  CLRF   x93
08CD2:  MOVLB  0
08CD4:  CALL   3396
.................... 
....................    int1 is_finished = FALSE;
08CD8:  MOVLB  3
08CDA:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
08CDC:  MOVLW  A4
08CDE:  MOVWF  FF6
08CE0:  MOVLW  14
08CE2:  MOVWF  FF7
08CE4:  MOVLW  00
08CE6:  MOVWF  FF8
08CE8:  MOVLB  0
08CEA:  CALL   15D4
....................    
....................    //dac_cell.write_spi = spi_cell_write;
....................    //dac_cell.cs_pin = PIN_C0;
.................... 
....................    //mcp4911_init(&dac_cell);
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
08CEE:  MOVLW  CA
08CF0:  MOVWF  FF6
08CF2:  MOVLW  14
08CF4:  MOVWF  FF7
08CF6:  MOVLW  00
08CF8:  MOVWF  FF8
08CFA:  CALL   15D4
....................    
....................    //Start loop
....................    while(!is_finished)
08CFE:  MOVLB  3
08D00:  BTFSS  x75.0
08D02:  BRA    8D0A
08D04:  MOVLB  0
08D06:  GOTO   8DD8
08D0A:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
08D0C:  MOVF   4B,F
08D0E:  BTFSC  FD8.2
08D10:  GOTO   8D94
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
08D14:  MOVLB  3
08D16:  CLRF   x89
08D18:  MOVLW  2B
08D1A:  MOVWF  x88
08D1C:  MOVFF  4B,38A
08D20:  MOVLB  0
08D22:  GOTO   38DC
08D26:  MOVFF  02,03
08D2A:  MOVF   01,W
08D2C:  MOVWF  FE1
08D2E:  MOVFF  03,FE2
08D32:  MOVLW  03
08D34:  MOVWF  FEA
08D36:  MOVLW  76
08D38:  MOVWF  FE9
08D3A:  MOVLW  0C
08D3C:  MOVWF  01
08D3E:  MOVFF  FE6,FEE
08D42:  DECFSZ 01,F
08D44:  GOTO   8D3E
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
08D48:  MOVLB  3
08D4A:  CLRF   x83
08D4C:  MOVLW  2B
08D4E:  MOVWF  x82
08D50:  CLRF   x85
08D52:  MOVLW  4B
08D54:  MOVWF  x84
08D56:  MOVLB  0
08D58:  GOTO   3AFC
....................          
....................          if(recieve_cmd.is_exist)
08D5C:  MOVLB  3
08D5E:  BTFSC  x78.0
08D60:  BRA    8D68
08D62:  MOVLB  0
08D64:  GOTO   8D84
08D68:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
08D6A:  MOVLW  03
08D6C:  MOVLB  3
08D6E:  MOVWF  x83
08D70:  MOVLW  76
08D72:  MOVWF  x82
08D74:  MOVLB  0
08D76:  GOTO   846A
08D7A:  MOVLB  3
08D7C:  BCF    x75.1
08D7E:  BTFSC  01.0
08D80:  BSF    x75.1
08D82:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
08D84:  MOVLW  E8
08D86:  MOVWF  FF6
08D88:  MOVLW  14
08D8A:  MOVWF  FF7
08D8C:  MOVLW  00
08D8E:  MOVWF  FF8
08D90:  CALL   15D4
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
08D94:  MOVLB  3
08D96:  BTFSC  x75.0
08D98:  BRA    8DA0
08D9A:  MOVLB  0
08D9C:  GOTO   8DA6
08DA0:  MOVLB  0
....................          break;
08DA2:  GOTO   8DD8
....................          
....................       delay_ms(400);
08DA6:  MOVLW  02
08DA8:  MOVLB  3
08DAA:  MOVWF  x82
08DAC:  MOVLB  0
08DAE:  MOVLW  C8
08DB0:  MOVLB  8
08DB2:  MOVWF  x44
08DB4:  MOVLB  0
08DB6:  CALL   1554
08DBA:  MOVLB  3
08DBC:  DECFSZ x82,F
08DBE:  BRA    8DC4
08DC0:  BRA    8DC8
08DC2:  MOVLB  0
08DC4:  MOVLB  0
08DC6:  BRA    8DAE
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
08DC8:  MOVLW  2E
08DCA:  MOVLB  8
08DCC:  MOVWF  x2F
08DCE:  MOVLB  0
08DD0:  CALL   1582
08DD4:  GOTO   8CFE
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
08DD8:  MOVLW  08
08DDA:  MOVWF  FF6
08DDC:  MOVLW  15
08DDE:  MOVWF  FF7
08DE0:  MOVLW  00
08DE2:  MOVWF  FF8
08DE4:  CALL   15D4
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
08DE8:  MOVLW  2E
08DEA:  MOVLB  8
08DEC:  MOVWF  x2F
08DEE:  MOVLB  0
08DF0:  CALL   1582
....................       delay_ms(1000);
08DF4:  MOVLW  04
08DF6:  MOVLB  3
08DF8:  MOVWF  x82
08DFA:  MOVLB  0
08DFC:  MOVLW  FA
08DFE:  MOVLB  8
08E00:  MOVWF  x44
08E02:  MOVLB  0
08E04:  CALL   1554
08E08:  MOVLB  3
08E0A:  DECFSZ x82,F
08E0C:  BRA    8E12
08E0E:  BRA    8E16
08E10:  MOVLB  0
08E12:  MOVLB  0
08E14:  BRA    8DFC
08E16:  MOVLB  0
08E18:  GOTO   8DE8
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
08E1C:  MOVLW  48
08E1E:  MOVWF  FF6
08E20:  MOVLW  15
08E22:  MOVWF  FF7
08E24:  MOVLW  00
08E26:  MOVWF  FF8
08E28:  CALL   15D4
....................    
.................... }
.................... 
08E2C:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
