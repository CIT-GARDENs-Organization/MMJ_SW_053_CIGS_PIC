CCS PCH C Compiler, Version 5.104, 57077               20-7-25 01:54

               Filename:   build\mmj_cigs_main.lst

               ROM used:   33566 bytes (26%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           1316 (37%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   79D2
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 53,4D
0019A:  DATA 46,20
0019C:  DATA 64,61
0019E:  DATA 74,61
001A0:  DATA 20,6C
001A2:  DATA 69,73
001A4:  DATA 74,20
001A6:  DATA 69,73
001A8:  DATA 20,66
001AA:  DATA 75,6C
001AC:  DATA 6C,21
001AE:  DATA 21,21
001B0:  DATA 0D,0A
001B2:  DATA 00,00
001B4:  DATA 53,4D
001B6:  DATA 46,20
001B8:  DATA 64,61
001BA:  DATA 74,61
001BC:  DATA 20,6C
001BE:  DATA 69,73
001C0:  DATA 74,20
001C2:  DATA 69,73
001C4:  DATA 20,65
001C6:  DATA 6D,70
001C8:  DATA 74,79
001CA:  DATA 0D,0A
001CC:  DATA 00,00
001CE:  DATA 0D,0A
001D0:  DATA 5F,5F
001D2:  DATA 5F,5F
001D4:  DATA 5F,5F
001D6:  DATA 5F,5F
001D8:  DATA 5F,5F
001DA:  DATA 5F,5F
001DC:  DATA 5F,5F
001DE:  DATA 5F,5F
001E0:  DATA 5F,5F
001E2:  DATA 5F,5F
001E4:  DATA 0D,0A
001E6:  DATA 00,00
001E8:  DATA 5F,5F
001EA:  DATA 5F,53
001EC:  DATA 74,61
001EE:  DATA 72,74
001F0:  DATA 20,73
001F2:  DATA 6D,66
001F4:  DATA 5F,77
001F6:  DATA 72,69
001F8:  DATA 74,65
001FA:  DATA 5F,5F
001FC:  DATA 0D,0A
001FE:  DATA 00,00
00200:  DATA 53,74
00202:  DATA 61,72
00204:  DATA 74,20
00206:  DATA 5B,25
00208:  DATA 64,20
0020A:  DATA 74,68
0020C:  DATA 5D,20
0020E:  DATA 64,61
00210:  DATA 74,61
00212:  DATA 20,63
00214:  DATA 6F,70
00216:  DATA 79,0D
00218:  DATA 0A,0D
0021A:  DATA 0A,00
0021C:  DATA 49,6E
0021E:  DATA 20,73
00220:  DATA 6D,66
00222:  DATA 20,6D
00224:  DATA 69,73
00226:  DATA 73,69
00228:  DATA 6F,6E
0022A:  DATA 20,64
0022C:  DATA 61,74
0022E:  DATA 61,20
00230:  DATA 73,74
00232:  DATA 61,72
00234:  DATA 74,20
00236:  DATA 20,20
00238:  DATA 61,64
0023A:  DATA 64,72
0023C:  DATA 65,73
0023E:  DATA 73,3A
00240:  DATA 20,25
00242:  DATA 30,38
00244:  DATA 4C,58
00246:  DATA 0D,0A
00248:  DATA 00,00
0024A:  DATA 49,6E
0024C:  DATA 20,73
0024E:  DATA 6D,66
00250:  DATA 20,6D
00252:  DATA 69,73
00254:  DATA 73,69
00256:  DATA 6F,6E
00258:  DATA 20,64
0025A:  DATA 61,74
0025C:  DATA 61,20
0025E:  DATA 65,6E
00260:  DATA 64,20
00262:  DATA 20,20
00264:  DATA 20,20
00266:  DATA 61,64
00268:  DATA 64,72
0026A:  DATA 65,73
0026C:  DATA 73,3A
0026E:  DATA 20,25
00270:  DATA 30,38
00272:  DATA 4C,58
00274:  DATA 0D,0A
00276:  DATA 00,00
00278:  DATA 49,6E
0027A:  DATA 20,4D
0027C:  DATA 49,53
0027E:  DATA 20,46
00280:  DATA 4D,20
00282:  DATA 57,72
00284:  DATA 69,74
00286:  DATA 65,20
00288:  DATA 73,6F
0028A:  DATA 75,72
0028C:  DATA 63,65
0028E:  DATA 20,64
00290:  DATA 61,74
00292:  DATA 61,20
00294:  DATA 61,64
00296:  DATA 64,72
00298:  DATA 65,73
0029A:  DATA 73,3A
0029C:  DATA 20,25
0029E:  DATA 30,38
002A0:  DATA 4C,58
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 49,6E
002A8:  DATA 20,4D
002AA:  DATA 49,53
002AC:  DATA 20,46
002AE:  DATA 4D,20
002B0:  DATA 57,72
002B2:  DATA 69,74
002B4:  DATA 65,20
002B6:  DATA 64,61
002B8:  DATA 74,61
002BA:  DATA 20,73
002BC:  DATA 69,7A
002BE:  DATA 65,20
002C0:  DATA 20,20
002C2:  DATA 20,20
002C4:  DATA 20,20
002C6:  DATA 20,20
002C8:  DATA 20,3A
002CA:  DATA 20,25
002CC:  DATA 6C,75
002CE:  DATA 20,28
002D0:  DATA 30,78
002D2:  DATA 25,6C
002D4:  DATA 78,29
002D6:  DATA 0D,0A
002D8:  DATA 0D,0A
002DA:  DATA 00,00
002DC:  DATA 45,72
002DE:  DATA 72,6F
002E0:  DATA 72,3A
002E2:  DATA 20,53
002E4:  DATA 4D,46
002E6:  DATA 20,69
002E8:  DATA 73,20
002EA:  DATA 6E,6F
002EC:  DATA 74,20
002EE:  DATA 63,6F
002F0:  DATA 6E,6E
002F2:  DATA 65,63
002F4:  DATA 74,65
002F6:  DATA 64,0D
002F8:  DATA 0A,00
002FA:  DATA 53,69
002FC:  DATA 7A,65
002FE:  DATA 20,61
00300:  DATA 72,65
00302:  DATA 61,20
00304:  DATA 72,65
00306:  DATA 61,64
00308:  DATA 0D,0A
0030A:  DATA 00,00
0030C:  DATA 75,73
0030E:  DATA 65,64
00310:  DATA 5F,73
00312:  DATA 69,7A
00314:  DATA 65,20
00316:  DATA 3D,20
00318:  DATA 25,6C
0031A:  DATA 75,20
0031C:  DATA 28,73
0031E:  DATA 72,63
00320:  DATA 20,30
00322:  DATA 78,25
00324:  DATA 30,38
00326:  DATA 4C,58
00328:  DATA 29,0D
0032A:  DATA 0A,00
0032C:  DATA 6C,6F
0032E:  DATA 6F,70
00330:  DATA 20,63
00332:  DATA 6F,75
00334:  DATA 6E,74
00336:  DATA 3D,20
00338:  DATA 25,64
0033A:  DATA 20,20
0033C:  DATA 28,73
0033E:  DATA 72,63
00340:  DATA 20,30
00342:  DATA 78,25
00344:  DATA 30,38
00346:  DATA 4C,58
00348:  DATA 29,0D
0034A:  DATA 0A,0D
0034C:  DATA 0A,00
0034E:  DATA 57,72
00350:  DATA 61,70
00352:  DATA 20,74
00354:  DATA 72,69
00356:  DATA 67,67
00358:  DATA 65,72
0035A:  DATA 65,64
0035C:  DATA 3A,20
0035E:  DATA 52,65
00360:  DATA 73,65
00362:  DATA 74,74
00364:  DATA 69,6E
00366:  DATA 67,20
00368:  DATA 64,61
0036A:  DATA 74,61
0036C:  DATA 5F,77
0036E:  DATA 72,69
00370:  DATA 74,65
00372:  DATA 5F,61
00374:  DATA 64,64
00376:  DATA 72,20
00378:  DATA 74,6F
0037A:  DATA 20,73
0037C:  DATA 74,61
0037E:  DATA 72,74
00380:  DATA 0D,0A
00382:  DATA 00,00
00384:  DATA 55,70
00386:  DATA 64,61
00388:  DATA 74,65
0038A:  DATA 20,73
0038C:  DATA 69,7A
0038E:  DATA 65,20
00390:  DATA 61,72
00392:  DATA 65,61
00394:  DATA 0D,0A
00396:  DATA 00,00
00398:  DATA 75,73
0039A:  DATA 65,64
0039C:  DATA 5F,73
0039E:  DATA 69,7A
003A0:  DATA 65,20
003A2:  DATA 3D,20
003A4:  DATA 25,6C
003A6:  DATA 64,0D
003A8:  DATA 0A,00
003AA:  DATA 6C,6F
003AC:  DATA 6F,70
003AE:  DATA 5F,63
003B0:  DATA 6F,75
003B2:  DATA 6E,74
003B4:  DATA 20,3D
003B6:  DATA 20,25
003B8:  DATA 75,0D
003BA:  DATA 0A,0D
003BC:  DATA 0A,00
003BE:  DATA 0D,0A
003C0:  DATA 5F,5F
003C2:  DATA 5F,45
003C4:  DATA 6E,64
003C6:  DATA 20,73
003C8:  DATA 6D,66
003CA:  DATA 5F,77
003CC:  DATA 72,69
003CE:  DATA 74,65
003D0:  DATA 5F,5F
003D2:  DATA 5F,5F
003D4:  DATA 0D,0A
003D6:  DATA 00,00
003D8:  DATA 5F,5F
003DA:  DATA 5F,5F
003DC:  DATA 5F,5F
003DE:  DATA 5F,5F
003E0:  DATA 5F,5F
003E2:  DATA 5F,5F
003E4:  DATA 5F,5F
003E6:  DATA 5F,5F
003E8:  DATA 5F,5F
003EA:  DATA 5F,5F
003EC:  DATA 0D,0A
003EE:  DATA 0D,0A
003F0:  DATA 00,00
003F2:  DATA 0D,0A
003F4:  DATA 5F,5F
003F6:  DATA 5F,5F
003F8:  DATA 5F,5F
003FA:  DATA 5F,5F
003FC:  DATA 5F,5F
003FE:  DATA 5F,5F
00400:  DATA 5F,5F
00402:  DATA 5F,5F
00404:  DATA 5F,5F
00406:  DATA 5F,5F
00408:  DATA 0D,0A
0040A:  DATA 00,00
0040C:  DATA 5F,5F
0040E:  DATA 5F,53
00410:  DATA 74,61
00412:  DATA 72,74
00414:  DATA 20,73
00416:  DATA 6D,66
00418:  DATA 5F,77
0041A:  DATA 72,69
0041C:  DATA 74,65
0041E:  DATA 5F,5F
00420:  DATA 0D,0A
00422:  DATA 00,00
00424:  DATA 53,74
00426:  DATA 61,72
00428:  DATA 74,20
0042A:  DATA 5B,25
0042C:  DATA 64,20
0042E:  DATA 74,68
00430:  DATA 5D,20
00432:  DATA 64,61
00434:  DATA 74,61
00436:  DATA 20,63
00438:  DATA 6F,70
0043A:  DATA 79,0D
0043C:  DATA 0A,0D
0043E:  DATA 0A,00
00440:  DATA 49,6E
00442:  DATA 20,73
00444:  DATA 6D,66
00446:  DATA 20,6D
00448:  DATA 69,73
0044A:  DATA 73,69
0044C:  DATA 6F,6E
0044E:  DATA 20,64
00450:  DATA 61,74
00452:  DATA 61,20
00454:  DATA 73,74
00456:  DATA 61,72
00458:  DATA 74,20
0045A:  DATA 20,20
0045C:  DATA 61,64
0045E:  DATA 64,72
00460:  DATA 65,73
00462:  DATA 73,3A
00464:  DATA 20,25
00466:  DATA 30,38
00468:  DATA 4C,58
0046A:  DATA 0D,0A
0046C:  DATA 00,00
0046E:  DATA 49,6E
00470:  DATA 20,73
00472:  DATA 6D,66
00474:  DATA 20,6D
00476:  DATA 69,73
00478:  DATA 73,69
0047A:  DATA 6F,6E
0047C:  DATA 20,64
0047E:  DATA 61,74
00480:  DATA 61,20
00482:  DATA 65,6E
00484:  DATA 64,20
00486:  DATA 20,20
00488:  DATA 20,20
0048A:  DATA 61,64
0048C:  DATA 64,72
0048E:  DATA 65,73
00490:  DATA 73,3A
00492:  DATA 20,25
00494:  DATA 30,38
00496:  DATA 4C,58
00498:  DATA 0D,0A
0049A:  DATA 00,00
0049C:  DATA 49,6E
0049E:  DATA 20,4D
004A0:  DATA 49,53
004A2:  DATA 20,46
004A4:  DATA 4D,20
004A6:  DATA 57,72
004A8:  DATA 69,74
004AA:  DATA 65,20
004AC:  DATA 73,6F
004AE:  DATA 75,72
004B0:  DATA 63,65
004B2:  DATA 20,64
004B4:  DATA 61,74
004B6:  DATA 61,20
004B8:  DATA 61,64
004BA:  DATA 64,72
004BC:  DATA 65,73
004BE:  DATA 73,3A
004C0:  DATA 20,25
004C2:  DATA 30,38
004C4:  DATA 4C,58
004C6:  DATA 0D,0A
004C8:  DATA 00,00
004CA:  DATA 49,6E
004CC:  DATA 20,4D
004CE:  DATA 49,53
004D0:  DATA 20,46
004D2:  DATA 4D,20
004D4:  DATA 57,72
004D6:  DATA 69,74
004D8:  DATA 65,20
004DA:  DATA 64,61
004DC:  DATA 74,61
004DE:  DATA 20,73
004E0:  DATA 69,7A
004E2:  DATA 65,20
004E4:  DATA 20,20
004E6:  DATA 20,20
004E8:  DATA 20,20
004EA:  DATA 20,20
004EC:  DATA 20,3A
004EE:  DATA 20,25
004F0:  DATA 6C,75
004F2:  DATA 20,28
004F4:  DATA 30,78
004F6:  DATA 25,6C
004F8:  DATA 78,29
004FA:  DATA 0D,0A
004FC:  DATA 0D,0A
004FE:  DATA 00,00
00500:  DATA 45,72
00502:  DATA 72,6F
00504:  DATA 72,3A
00506:  DATA 20,53
00508:  DATA 4D,46
0050A:  DATA 20,69
0050C:  DATA 73,20
0050E:  DATA 6E,6F
00510:  DATA 74,20
00512:  DATA 63,6F
00514:  DATA 6E,6E
00516:  DATA 65,63
00518:  DATA 74,65
0051A:  DATA 64,0D
0051C:  DATA 0A,00
0051E:  DATA 53,69
00520:  DATA 7A,65
00522:  DATA 20,61
00524:  DATA 72,65
00526:  DATA 61,20
00528:  DATA 72,65
0052A:  DATA 61,64
0052C:  DATA 0D,0A
0052E:  DATA 00,00
00530:  DATA 75,73
00532:  DATA 65,64
00534:  DATA 5F,73
00536:  DATA 69,7A
00538:  DATA 65,20
0053A:  DATA 3D,20
0053C:  DATA 25,6C
0053E:  DATA 75,20
00540:  DATA 28,73
00542:  DATA 72,63
00544:  DATA 20,30
00546:  DATA 78,25
00548:  DATA 30,38
0054A:  DATA 4C,58
0054C:  DATA 29,0D
0054E:  DATA 0A,00
00550:  DATA 6C,6F
00552:  DATA 6F,70
00554:  DATA 20,63
00556:  DATA 6F,75
00558:  DATA 6E,74
0055A:  DATA 3D,20
0055C:  DATA 25,64
0055E:  DATA 20,20
00560:  DATA 28,73
00562:  DATA 72,63
00564:  DATA 20,30
00566:  DATA 78,25
00568:  DATA 30,38
0056A:  DATA 4C,58
0056C:  DATA 29,0D
0056E:  DATA 0A,0D
00570:  DATA 0A,00
00572:  DATA 57,72
00574:  DATA 61,70
00576:  DATA 20,74
00578:  DATA 72,69
0057A:  DATA 67,67
0057C:  DATA 65,72
0057E:  DATA 65,64
00580:  DATA 3A,20
00582:  DATA 52,65
00584:  DATA 73,65
00586:  DATA 74,74
00588:  DATA 69,6E
0058A:  DATA 67,20
0058C:  DATA 64,61
0058E:  DATA 74,61
00590:  DATA 5F,77
00592:  DATA 72,69
00594:  DATA 74,65
00596:  DATA 5F,61
00598:  DATA 64,64
0059A:  DATA 72,20
0059C:  DATA 74,6F
0059E:  DATA 20,73
005A0:  DATA 74,61
005A2:  DATA 72,74
005A4:  DATA 0D,0A
005A6:  DATA 00,00
005A8:  DATA 55,70
005AA:  DATA 64,61
005AC:  DATA 74,65
005AE:  DATA 20,73
005B0:  DATA 69,7A
005B2:  DATA 65,20
005B4:  DATA 61,72
005B6:  DATA 65,61
005B8:  DATA 0D,0A
005BA:  DATA 00,00
005BC:  DATA 75,73
005BE:  DATA 65,64
005C0:  DATA 5F,73
005C2:  DATA 69,7A
005C4:  DATA 65,20
005C6:  DATA 3D,20
005C8:  DATA 25,6C
005CA:  DATA 64,0D
005CC:  DATA 0A,00
005CE:  DATA 6C,6F
005D0:  DATA 6F,70
005D2:  DATA 5F,63
005D4:  DATA 6F,75
005D6:  DATA 6E,74
005D8:  DATA 20,3D
005DA:  DATA 20,25
005DC:  DATA 75,0D
005DE:  DATA 0A,0D
005E0:  DATA 0A,00
005E2:  DATA 0D,0A
005E4:  DATA 5F,5F
005E6:  DATA 5F,45
005E8:  DATA 6E,64
005EA:  DATA 20,73
005EC:  DATA 6D,66
005EE:  DATA 5F,77
005F0:  DATA 72,69
005F2:  DATA 74,65
005F4:  DATA 5F,5F
005F6:  DATA 5F,5F
005F8:  DATA 0D,0A
005FA:  DATA 00,00
005FC:  DATA 5F,5F
005FE:  DATA 5F,5F
00600:  DATA 5F,5F
00602:  DATA 5F,5F
00604:  DATA 5F,5F
00606:  DATA 5F,5F
00608:  DATA 5F,5F
0060A:  DATA 5F,5F
0060C:  DATA 5F,5F
0060E:  DATA 5F,5F
00610:  DATA 0D,0A
00612:  DATA 0D,0A
00614:  DATA 00,00
00616:  DATA 0D,0A
00618:  DATA 53,74
0061A:  DATA 61,72
0061C:  DATA 74,20
0061E:  DATA 6D,61
00620:  DATA 6B,65
00622:  DATA 5F,72
00624:  DATA 65,63
00626:  DATA 65,69
00628:  DATA 76,65
0062A:  DATA 5F,63
0062C:  DATA 6F,6D
0062E:  DATA 6D,61
00630:  DATA 6E,64
00632:  DATA 0D,0A
00634:  DATA 00,00
00636:  DATA 09,5B
00638:  DATA 42,4F
0063A:  DATA 53,53
0063C:  DATA 5D,20
0063E:  DATA 3E,3E
00640:  DATA 3E,20
00642:  DATA 00,00
00644:  DATA 45,6E
00646:  DATA 64,20
00648:  DATA 6D,61
0064A:  DATA 6B,65
0064C:  DATA 5F,72
0064E:  DATA 65,63
00650:  DATA 69,76
00652:  DATA 65,5F
00654:  DATA 63,6F
00656:  DATA 6D,6D
00658:  DATA 61,6E
0065A:  DATA 64,0D
0065C:  DATA 0A,0D
0065E:  DATA 0A,00
00660:  DATA 73,69
00662:  DATA 67,6E
00664:  DATA 61,6C
00666:  DATA 20,65
00668:  DATA 6E,64
0066A:  DATA 20,77
0066C:  DATA 69,74
0066E:  DATA 68,20
00670:  DATA 53,46
00672:  DATA 44,0D
00674:  DATA 0A,00
00676:  DATA 64,6F
00678:  DATA 6E,27
0067A:  DATA 74,20
0067C:  DATA 66,69
0067E:  DATA 6E,64
00680:  DATA 20,53
00682:  DATA 46,44
00684:  DATA 0D,0A
00686:  DATA 00,00
00688:  DATA 09,2D
0068A:  DATA 3E,20
0068C:  DATA 49,6E
0068E:  DATA 76,61
00690:  DATA 6C,69
00692:  DATA 64,20
00694:  DATA 46,72
00696:  DATA 61,6D
00698:  DATA 65,20
0069A:  DATA 49,44
0069C:  DATA 20,72
0069E:  DATA 65,63
006A0:  DATA 65,69
006A2:  DATA 76,65
006A4:  DATA 64,3A
006A6:  DATA 20,25
006A8:  DATA 58,0D
006AA:  DATA 0A,00
006AC:  DATA 09,2D
006AE:  DATA 3E,20
006B0:  DATA 43,52
006B2:  DATA 43,20
006B4:  DATA 65,72
006B6:  DATA 72,6F
006B8:  DATA 72,21
006BA:  DATA 0D,0A
006BC:  DATA 00,00
006BE:  DATA 09,09
006C0:  DATA 2D,3E
006C2:  DATA 20,72
006C4:  DATA 65,63
006C6:  DATA 65,69
006C8:  DATA 76,65
006CA:  DATA 64,20
006CC:  DATA 43,52
006CE:  DATA 43,3A
006D0:  DATA 20,25
006D2:  DATA 58,0D
006D4:  DATA 0A,00
006D6:  DATA 09,09
006D8:  DATA 20,20
006DA:  DATA 20,63
006DC:  DATA 6F,6C
006DE:  DATA 6C,65
006E0:  DATA 63,74
006E2:  DATA 20,43
006E4:  DATA 52,43
006E6:  DATA 20,3A
006E8:  DATA 20,25
006EA:  DATA 58,0D
006EC:  DATA 0A,00
006EE:  DATA 09,2D
006F0:  DATA 3E,20
006F2:  DATA 49,6E
006F4:  DATA 76,61
006F6:  DATA 6C,69
006F8:  DATA 64,20
006FA:  DATA 64,65
006FC:  DATA 76,69
006FE:  DATA 63,65
00700:  DATA 20,49
00702:  DATA 44,20
00704:  DATA 72,65
00706:  DATA 63,65
00708:  DATA 69,76
0070A:  DATA 65,64
0070C:  DATA 0D,0A
0070E:  DATA 00,00
00710:  DATA 09,09
00712:  DATA 2D,3E
00714:  DATA 20,72
00716:  DATA 65,63
00718:  DATA 65,69
0071A:  DATA 76,65
0071C:  DATA 64,3A
0071E:  DATA 20,20
00720:  DATA 20,20
00722:  DATA 20,25
00724:  DATA 58,0D
00726:  DATA 0A,00
00728:  DATA 09,09
0072A:  DATA 20,20
0072C:  DATA 20,4D
0072E:  DATA 79,20
00730:  DATA 64,65
00732:  DATA 76,69
00734:  DATA 63,65
00736:  DATA 20,49
00738:  DATA 44,3A
0073A:  DATA 20,25
0073C:  DATA 58,0D
0073E:  DATA 0A,00
00740:  DATA 09,5B
00742:  DATA 42,4F
00744:  DATA 53,53
00746:  DATA 5D,20
00748:  DATA 3C,3C
0074A:  DATA 3C,20
0074C:  DATA 00,00
0074E:  DATA 53,74
00750:  DATA 61,72
00752:  DATA 74,20
00754:  DATA 53,4D
00756:  DATA 46,20
00758:  DATA 75,73
0075A:  DATA 69,6E
0075C:  DATA 67,20
0075E:  DATA 72,65
00760:  DATA 71,65
00762:  DATA 73,74
00764:  DATA 20,73
00766:  DATA 65,61
00768:  DATA 71,75
0076A:  DATA 65,6E
0076C:  DATA 63,65
0076E:  DATA 0D,0A
00770:  DATA 00,00
00772:  DATA 45,72
00774:  DATA 72,6F
00776:  DATA 72,21
00778:  DATA 20,52
0077A:  DATA 65,63
0077C:  DATA 65,69
0077E:  DATA 76,69
00780:  DATA 6E,67
00782:  DATA 20,63
00784:  DATA 6F,6D
00786:  DATA 6D,61
00788:  DATA 6E,64
0078A:  DATA 20,69
0078C:  DATA 6E,63
0078E:  DATA 6F,6E
00790:  DATA 73,69
00792:  DATA 73,74
00794:  DATA 65,6E
00796:  DATA 74,20
00798:  DATA 77,69
0079A:  DATA 74,68
0079C:  DATA 20,74
0079E:  DATA 68,65
007A0:  DATA 20,64
007A2:  DATA 65,73
007A4:  DATA 69,67
007A6:  DATA 6E,0D
007A8:  DATA 0A,00
007AA:  DATA 53,4D
007AC:  DATA 46,20
007AE:  DATA 75,73
007B0:  DATA 65,20
007B2:  DATA 72,65
007B4:  DATA 71,75
007B6:  DATA 65,73
007B8:  DATA 74,20
007BA:  DATA 61,6C
007BC:  DATA 6C,6F
007BE:  DATA 77,65
007C0:  DATA 64,0D
007C2:  DATA 0A,00
007C4:  DATA 53,4D
007C6:  DATA 46,20
007C8:  DATA 75,73
007CA:  DATA 65,20
007CC:  DATA 72,65
007CE:  DATA 71,75
007D0:  DATA 65,73
007D2:  DATA 74,20
007D4:  DATA 64,65
007D6:  DATA 6E,79
007D8:  DATA 65,64
007DA:  DATA 0D,0A
007DC:  DATA 00,00
007DE:  DATA 52,65
007E0:  DATA 74,72
007E2:  DATA 79,20
007E4:  DATA 72,65
007E6:  DATA 71,75
007E8:  DATA 65,73
007EA:  DATA 74,20
007EC:  DATA 74,6F
007EE:  DATA 20,42
007F0:  DATA 4F,53
007F2:  DATA 53,20
007F4:  DATA 50,49
007F6:  DATA 43,0D
007F8:  DATA 0A,00
007FA:  DATA 45,72
007FC:  DATA 72,6F
007FE:  DATA 72,21
00800:  DATA 20,52
00802:  DATA 65,63
00804:  DATA 65,69
00806:  DATA 76,69
00808:  DATA 6E,67
0080A:  DATA 20,63
0080C:  DATA 6F,6D
0080E:  DATA 6D,61
00810:  DATA 6E,64
00812:  DATA 20,69
00814:  DATA 6E,63
00816:  DATA 6F,6E
00818:  DATA 73,69
0081A:  DATA 73,74
0081C:  DATA 65,6E
0081E:  DATA 74,20
00820:  DATA 77,69
00822:  DATA 74,68
00824:  DATA 20,74
00826:  DATA 68,65
00828:  DATA 20,64
0082A:  DATA 65,73
0082C:  DATA 69,67
0082E:  DATA 6E,0D
00830:  DATA 0A,00
00832:  DATA 45,6E
00834:  DATA 64,20
00836:  DATA 53,4D
00838:  DATA 46,20
0083A:  DATA 75,73
0083C:  DATA 69,6E
0083E:  DATA 67,20
00840:  DATA 72,65
00842:  DATA 71,65
00844:  DATA 73,74
00846:  DATA 20,73
00848:  DATA 65,61
0084A:  DATA 71,75
0084C:  DATA 65,6E
0084E:  DATA 63,65
00850:  DATA 0D,0A
00852:  DATA 00,00
00854:  DATA 4D,49
00856:  DATA 53,53
00858:  DATA 49,4F
0085A:  DATA 4E,20
0085C:  DATA 46,4C
0085E:  DATA 41,53
00860:  DATA 48,20
00862:  DATA 49,6E
00864:  DATA 69,74
00866:  DATA 69,61
00868:  DATA 6C,69
0086A:  DATA 7A,65
0086C:  DATA 0D,0A
0086E:  DATA 00,00
00870:  DATA 09,46
00872:  DATA 6C,61
00874:  DATA 73,68
00876:  DATA 20,69
00878:  DATA 73,20
0087A:  DATA 6E,6F
0087C:  DATA 74,20
0087E:  DATA 63,6F
00880:  DATA 6E,6E
00882:  DATA 65,63
00884:  DATA 74,65
00886:  DATA 64,0D
00888:  DATA 0A,00
0088A:  DATA 09,53
0088C:  DATA 4D,46
0088E:  DATA 20,69
00890:  DATA 73,20
00892:  DATA 6E,6F
00894:  DATA 74,20
00896:  DATA 63,6F
00898:  DATA 6E,6E
0089A:  DATA 65,63
0089C:  DATA 74,65
0089E:  DATA 64,0D
008A0:  DATA 0A,00
008A2:  DATA 09,20
008A4:  DATA 53,4D
008A6:  DATA 46,20
008A8:  DATA 69,73
008AA:  DATA 20,63
008AC:  DATA 6F,6E
008AE:  DATA 6E,65
008B0:  DATA 63,74
008B2:  DATA 65,64
008B4:  DATA 0D,0A
008B6:  DATA 00,00
008B8:  DATA 09,53
008BA:  DATA 4D,46
008BC:  DATA 20,20
008BE:  DATA 50,49
008C0:  DATA 43,4C
008C2:  DATA 4F,47
008C4:  DATA 20,55
008C6:  DATA 73,65
008C8:  DATA 20,43
008CA:  DATA 6F,75
008CC:  DATA 6E,74
008CE:  DATA 65,72
008D0:  DATA 20,20
008D2:  DATA 20,20
008D4:  DATA 20,20
008D6:  DATA 3A,20
008D8:  DATA 30,78
008DA:  DATA 25,30
008DC:  DATA 38,4C
008DE:  DATA 58,0D
008E0:  DATA 0A,00
008E2:  DATA 09,53
008E4:  DATA 4D,46
008E6:  DATA 20,20
008E8:  DATA 50,49
008EA:  DATA 43,4C
008EC:  DATA 4F,47
008EE:  DATA 20,4C
008F0:  DATA 6F,6F
008F2:  DATA 70,20
008F4:  DATA 43,6F
008F6:  DATA 75,6E
008F8:  DATA 74,65
008FA:  DATA 72,20
008FC:  DATA 20,20
008FE:  DATA 20,20
00900:  DATA 3A,20
00902:  DATA 30,78
00904:  DATA 25,30
00906:  DATA 32,58
00908:  DATA 0D,0A
0090A:  DATA 00,00
0090C:  DATA 09,53
0090E:  DATA 4D,46
00910:  DATA 20,20
00912:  DATA 4D,45
00914:  DATA 41,53
00916:  DATA 20,20
00918:  DATA 20,55
0091A:  DATA 73,65
0091C:  DATA 20,43
0091E:  DATA 6F,75
00920:  DATA 6E,74
00922:  DATA 65,72
00924:  DATA 20,20
00926:  DATA 20,20
00928:  DATA 20,20
0092A:  DATA 3A,20
0092C:  DATA 30,78
0092E:  DATA 25,30
00930:  DATA 38,4C
00932:  DATA 58,0D
00934:  DATA 0A,00
00936:  DATA 09,53
00938:  DATA 4D,46
0093A:  DATA 20,20
0093C:  DATA 4D,45
0093E:  DATA 41,53
00940:  DATA 20,20
00942:  DATA 20,4C
00944:  DATA 6F,6F
00946:  DATA 70,20
00948:  DATA 43,6F
0094A:  DATA 75,6E
0094C:  DATA 74,65
0094E:  DATA 72,20
00950:  DATA 20,20
00952:  DATA 20,20
00954:  DATA 3A,20
00956:  DATA 30,78
00958:  DATA 25,30
0095A:  DATA 32,58
0095C:  DATA 0D,0A
0095E:  DATA 00,00
00960:  DATA 09,4D
00962:  DATA 49,53
00964:  DATA 46,20
00966:  DATA 50,49
00968:  DATA 43,4C
0096A:  DATA 4F,47
0096C:  DATA 20,55
0096E:  DATA 73,65
00970:  DATA 20,43
00972:  DATA 6F,75
00974:  DATA 6E,74
00976:  DATA 65,72
00978:  DATA 20,20
0097A:  DATA 20,20
0097C:  DATA 20,20
0097E:  DATA 3A,20
00980:  DATA 30,78
00982:  DATA 25,30
00984:  DATA 38,4C
00986:  DATA 58,0D
00988:  DATA 0A,00
0098A:  DATA 09,4D
0098C:  DATA 49,53
0098E:  DATA 46,20
00990:  DATA 50,49
00992:  DATA 43,4C
00994:  DATA 4F,47
00996:  DATA 20,55
00998:  DATA 6E,63
0099A:  DATA 6F,70
0099C:  DATA 79,65
0099E:  DATA 64,20
009A0:  DATA 43,6F
009A2:  DATA 75,6E
009A4:  DATA 74,65
009A6:  DATA 72,20
009A8:  DATA 3A,20
009AA:  DATA 30,78
009AC:  DATA 25,30
009AE:  DATA 38,4C
009B0:  DATA 58,0D
009B2:  DATA 0A,00
009B4:  DATA 09,4D
009B6:  DATA 49,53
009B8:  DATA 46,20
009BA:  DATA 50,49
009BC:  DATA 43,4C
009BE:  DATA 4F,47
009C0:  DATA 20,4C
009C2:  DATA 6F,6F
009C4:  DATA 70,20
009C6:  DATA 43,6F
009C8:  DATA 75,6E
009CA:  DATA 74,65
009CC:  DATA 72,20
009CE:  DATA 20,20
009D0:  DATA 20,20
009D2:  DATA 3A,20
009D4:  DATA 30,78
009D6:  DATA 25,30
009D8:  DATA 32,58
009DA:  DATA 0D,0A
009DC:  DATA 00,00
009DE:  DATA 09,4D
009E0:  DATA 49,53
009E2:  DATA 46,20
009E4:  DATA 50,49
009E6:  DATA 43,4C
009E8:  DATA 4F,47
009EA:  DATA 20,57
009EC:  DATA 72,69
009EE:  DATA 74,65
009F0:  DATA 20,43
009F2:  DATA 6F,75
009F4:  DATA 6E,74
009F6:  DATA 65,72
009F8:  DATA 20,20
009FA:  DATA 20,20
009FC:  DATA 3A,20
009FE:  DATA 30,78
00A00:  DATA 25,30
00A02:  DATA 32,58
00A04:  DATA 0D,0A
00A06:  DATA 00,00
00A08:  DATA 09,4D
00A0A:  DATA 49,53
00A0C:  DATA 46,20
00A0E:  DATA 4D,45
00A10:  DATA 41,53
00A12:  DATA 20,20
00A14:  DATA 20,55
00A16:  DATA 73,65
00A18:  DATA 20,43
00A1A:  DATA 6F,75
00A1C:  DATA 6E,74
00A1E:  DATA 65,72
00A20:  DATA 20,20
00A22:  DATA 20,20
00A24:  DATA 20,20
00A26:  DATA 3A,20
00A28:  DATA 30,78
00A2A:  DATA 25,30
00A2C:  DATA 38,4C
00A2E:  DATA 58,0D
00A30:  DATA 0A,00
00A32:  DATA 09,4D
00A34:  DATA 49,53
00A36:  DATA 46,20
00A38:  DATA 4D,45
00A3A:  DATA 41,53
00A3C:  DATA 20,20
00A3E:  DATA 20,55
00A40:  DATA 6E,63
00A42:  DATA 6F,70
00A44:  DATA 79,65
00A46:  DATA 64,20
00A48:  DATA 43,6F
00A4A:  DATA 75,6E
00A4C:  DATA 74,65
00A4E:  DATA 72,20
00A50:  DATA 3A,20
00A52:  DATA 30,78
00A54:  DATA 25,30
00A56:  DATA 38,4C
00A58:  DATA 58,0D
00A5A:  DATA 0A,00
00A5C:  DATA 09,4D
00A5E:  DATA 49,53
00A60:  DATA 46,20
00A62:  DATA 4D,45
00A64:  DATA 41,53
00A66:  DATA 20,20
00A68:  DATA 20,4C
00A6A:  DATA 6F,6F
00A6C:  DATA 70,20
00A6E:  DATA 43,6F
00A70:  DATA 75,6E
00A72:  DATA 74,65
00A74:  DATA 72,20
00A76:  DATA 20,20
00A78:  DATA 20,20
00A7A:  DATA 3A,20
00A7C:  DATA 30,78
00A7E:  DATA 25,30
00A80:  DATA 32,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,43
00A88:  DATA 6F,6D
00A8A:  DATA 70,6C
00A8C:  DATA 65,74
00A8E:  DATA 65,0D
00A90:  DATA 0A,00
00A92:  DATA 4D,69
00A94:  DATA 73,73
00A96:  DATA 69,6F
00A98:  DATA 6E,20
00A9A:  DATA 46,6C
00A9C:  DATA 61,73
00A9E:  DATA 68,20
00AA0:  DATA 69,73
00AA2:  DATA 20,6E
00AA4:  DATA 6F,74
00AA6:  DATA 20,63
00AA8:  DATA 6F,6E
00AAA:  DATA 6E,65
00AAC:  DATA 63,74
00AAE:  DATA 65,64
00AB0:  DATA 0D,0A
00AB2:  DATA 00,00
00AB4:  DATA 57,72
00AB6:  DATA 69,74
00AB8:  DATA 65,20
00ABA:  DATA 4D,49
00ABC:  DATA 53,46
00ABE:  DATA 20,41
00AC0:  DATA 64,64
00AC2:  DATA 72,65
00AC4:  DATA 73,73
00AC6:  DATA 20,41
00AC8:  DATA 72,65
00ACA:  DATA 61,20
00ACC:  DATA 43,6F
00ACE:  DATA 6D,70
00AD0:  DATA 6C,65
00AD2:  DATA 74,65
00AD4:  DATA 0D,0A
00AD6:  DATA 00,00
00AD8:  DATA 41,44
00ADA:  DATA 37,34
00ADC:  DATA 39,30
00ADE:  DATA 20,49
00AE0:  DATA 6E,69
00AE2:  DATA 74,69
00AE4:  DATA 61,6C
00AE6:  DATA 69,7A
00AE8:  DATA 65,0D
00AEA:  DATA 0A,00
00AEC:  DATA 09,43
00AEE:  DATA 6F,6D
00AF0:  DATA 70,6C
00AF2:  DATA 65,74
00AF4:  DATA 65,0D
00AF6:  DATA 0A,00
00AF8:  DATA 49,4F
00AFA:  DATA 20,49
00AFC:  DATA 6E,69
00AFE:  DATA 74,69
00B00:  DATA 61,6C
00B02:  DATA 69,7A
00B04:  DATA 65,0D
00B06:  DATA 0A,00
00B08:  DATA 09,43
00B0A:  DATA 6F,6D
00B0C:  DATA 70,6C
00B0E:  DATA 65,74
00B10:  DATA 65,0D
00B12:  DATA 0A,00
00B14:  DATA 41,44
00B16:  DATA 43,20
00B18:  DATA 49,6E
00B1A:  DATA 69,74
00B1C:  DATA 69,61
00B1E:  DATA 6C,69
00B20:  DATA 7A,65
00B22:  DATA 0D,0A
00B24:  DATA 00,00
00B26:  DATA 09,43
00B28:  DATA 6F,6D
00B2A:  DATA 70,6C
00B2C:  DATA 65,74
00B2E:  DATA 65,0D
00B30:  DATA 0A,00
00B32:  DATA 53,74
00B34:  DATA 61,72
00B36:  DATA 74,20
00B38:  DATA 53,57
00B3A:  DATA 45,45
00B3C:  DATA 50,0D
00B3E:  DATA 0A,00
00B40:  DATA 09,53
00B42:  DATA 77,65
00B44:  DATA 65,70
00B46:  DATA 20,73
00B48:  DATA 74,65
00B4A:  DATA 70,20
00B4C:  DATA 3A,20
00B4E:  DATA 25,75
00B50:  DATA 0D,0A
00B52:  DATA 00,00
00B54:  DATA 53,74
00B56:  DATA 61,72
00B58:  DATA 74,20
00B5A:  DATA 54,45
00B5C:  DATA 53,54
00B5E:  DATA 20,53
00B60:  DATA 57,45
00B62:  DATA 45,50
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 73,74
00B6A:  DATA 65,70
00B6C:  DATA 2C,20
00B6E:  DATA 76,6F
00B70:  DATA 6C,74
00B72:  DATA 61,67
00B74:  DATA 65,2C
00B76:  DATA 20,63
00B78:  DATA 75,72
00B7A:  DATA 72,65
00B7C:  DATA 6E,74
00B7E:  DATA 0D,0A
00B80:  DATA 00,00
00B82:  DATA 53,74
00B84:  DATA 61,72
00B86:  DATA 74,20
00B88:  DATA 41,44
00B8A:  DATA 43,20
00B8C:  DATA 54,45
00B8E:  DATA 53,54
00B90:  DATA 0D,0A
00B92:  DATA 00,00
00B94:  DATA 41,44
00B96:  DATA 43,20
00B98:  DATA 56,6F
00B9A:  DATA 6C,74
00B9C:  DATA 61,67
00B9E:  DATA 65,3A
00BA0:  DATA 20,25
00BA2:  DATA 30,34
00BA4:  DATA 4C,58
00BA6:  DATA 0D,0A
00BA8:  DATA 00,00
00BAA:  DATA 41,44
00BAC:  DATA 43,20
00BAE:  DATA 43,75
00BB0:  DATA 72,72
00BB2:  DATA 65,6E
00BB4:  DATA 74,3A
00BB6:  DATA 20,25
00BB8:  DATA 30,34
00BBA:  DATA 4C,58
00BBC:  DATA 0D,0A
00BBE:  DATA 00,00
00BC0:  DATA 41,44
00BC2:  DATA 43,20
00BC4:  DATA 43,49
00BC6:  DATA 47,53
00BC8:  DATA 31,20
00BCA:  DATA 41,6D
00BCC:  DATA 70,3A
00BCE:  DATA 20,25
00BD0:  DATA 30,34
00BD2:  DATA 4C,58
00BD4:  DATA 0D,0A
00BD6:  DATA 00,00
00BD8:  DATA 41,44
00BDA:  DATA 43,20
00BDC:  DATA 43,49
00BDE:  DATA 47,53
00BE0:  DATA 31,20
00BE2:  DATA 56,52
00BE4:  DATA 45,46
00BE6:  DATA 3A,20
00BE8:  DATA 25,30
00BEA:  DATA 34,4C
00BEC:  DATA 58,0D
00BEE:  DATA 0A,00
00BF0:  DATA 53,74
00BF2:  DATA 61,72
00BF4:  DATA 74,20
00BF6:  DATA 53,57
00BF8:  DATA 45,45
00BFA:  DATA 50,20
00BFC:  DATA 32,70
00BFE:  DATA 6F,72
00C00:  DATA 74,73
00C02:  DATA 0D,0A
00C04:  DATA 00,00
00C06:  DATA 09,53
00C08:  DATA 77,65
00C0A:  DATA 65,70
00C0C:  DATA 20,73
00C0E:  DATA 74,65
00C10:  DATA 70,20
00C12:  DATA 3A,20
00C14:  DATA 25,75
00C16:  DATA 0D,0A
00C18:  DATA 00,00
00C1A:  DATA 45,4E
00C1C:  DATA 44,20
00C1E:  DATA 53,57
00C20:  DATA 45,45
00C22:  DATA 50,20
00C24:  DATA 32,70
00C26:  DATA 6F,72
00C28:  DATA 74,0D
00C2A:  DATA 0A,00
00C2C:  DATA 53,74
00C2E:  DATA 61,72
00C30:  DATA 74,20
00C32:  DATA 43,49
00C34:  DATA 47,53
00C36:  DATA 20,64
00C38:  DATA 61,74
00C3A:  DATA 61,20
00C3C:  DATA 63,6F
00C3E:  DATA 6E,76
00C40:  DATA 65,72
00C42:  DATA 73,69
00C44:  DATA 6F,6E
00C46:  DATA 0D,0A
00C48:  DATA 00,00
00C4A:  DATA 53,74
00C4C:  DATA 61,72
00C4E:  DATA 74,20
00C50:  DATA 53,57
00C52:  DATA 45,45
00C54:  DATA 50,20
00C56:  DATA 50,4F
00C58:  DATA 52,54
00C5A:  DATA 31,0D
00C5C:  DATA 0A,00
00C5E:  DATA 09,53
00C60:  DATA 77,65
00C62:  DATA 65,70
00C64:  DATA 20,73
00C66:  DATA 74,65
00C68:  DATA 70,20
00C6A:  DATA 3A,20
00C6C:  DATA 25,75
00C6E:  DATA 0D,0A
00C70:  DATA 00,00
00C72:  DATA 45,4E
00C74:  DATA 44,20
00C76:  DATA 53,57
00C78:  DATA 45,45
00C7A:  DATA 50,20
00C7C:  DATA 50,4F
00C7E:  DATA 52,54
00C80:  DATA 31,0D
00C82:  DATA 0A,00
00C84:  DATA 53,74
00C86:  DATA 61,72
00C88:  DATA 74,20
00C8A:  DATA 43,49
00C8C:  DATA 47,53
00C8E:  DATA 20,64
00C90:  DATA 61,74
00C92:  DATA 61,20
00C94:  DATA 63,6F
00C96:  DATA 6E,76
00C98:  DATA 65,72
00C9A:  DATA 73,69
00C9C:  DATA 6F,6E
00C9E:  DATA 0D,0A
00CA0:  DATA 00,00
00CA2:  DATA 53,74
00CA4:  DATA 61,72
00CA6:  DATA 74,20
00CA8:  DATA 53,57
00CAA:  DATA 45,45
00CAC:  DATA 50,20
00CAE:  DATA 50,4F
00CB0:  DATA 52,54
00CB2:  DATA 32,0D
00CB4:  DATA 0A,00
00CB6:  DATA 09,53
00CB8:  DATA 77,65
00CBA:  DATA 65,70
00CBC:  DATA 20,73
00CBE:  DATA 74,65
00CC0:  DATA 70,20
00CC2:  DATA 3A,20
00CC4:  DATA 25,75
00CC6:  DATA 0D,0A
00CC8:  DATA 00,00
00CCA:  DATA 45,4E
00CCC:  DATA 44,20
00CCE:  DATA 53,57
00CD0:  DATA 45,45
00CD2:  DATA 50,20
00CD4:  DATA 50,4F
00CD6:  DATA 52,54
00CD8:  DATA 32,0D
00CDA:  DATA 0A,00
00CDC:  DATA 53,74
00CDE:  DATA 61,72
00CE0:  DATA 74,20
00CE2:  DATA 43,49
00CE4:  DATA 47,53
00CE6:  DATA 20,64
00CE8:  DATA 61,74
00CEA:  DATA 61,20
00CEC:  DATA 63,6F
00CEE:  DATA 6E,76
00CF0:  DATA 65,72
00CF2:  DATA 73,69
00CF4:  DATA 6F,6E
00CF6:  DATA 0D,0A
00CF8:  DATA 00,00
00CFA:  DATA 5B,50
00CFC:  DATA 49,43
00CFE:  DATA 4C,4F
00D00:  DATA 47,5D
00D02:  DATA 20,3A
00D04:  DATA 20,00
00D06:  DATA 4D,69
00D08:  DATA 73,73
00D0A:  DATA 69,6F
00D0C:  DATA 6E,20
00D0E:  DATA 46,6C
00D10:  DATA 61,73
00D12:  DATA 68,20
00D14:  DATA 69,73
00D16:  DATA 20,6E
00D18:  DATA 6F,74
00D1A:  DATA 20,63
00D1C:  DATA 6F,6E
00D1E:  DATA 6E,65
00D20:  DATA 63,74
00D22:  DATA 65,64
00D24:  DATA 0D,0A
00D26:  DATA 00,00
00D28:  DATA 53,74
00D2A:  DATA 61,72
00D2C:  DATA 74,20
00D2E:  DATA 46,6C
00D30:  DATA 61,73
00D32:  DATA 68,20
00D34:  DATA 45,72
00D36:  DATA 61,73
00D38:  DATA 65,20
00D3A:  DATA 41,6C
00D3C:  DATA 6C,0D
00D3E:  DATA 0A,00
00D40:  DATA 45,6E
00D42:  DATA 64,20
00D44:  DATA 46,6C
00D46:  DATA 61,73
00D48:  DATA 68,20
00D4A:  DATA 45,72
00D4C:  DATA 61,73
00D4E:  DATA 65,20
00D50:  DATA 41,6C
00D52:  DATA 6C,0D
00D54:  DATA 0A,00
00D56:  DATA 53,74
00D58:  DATA 61,72
00D5A:  DATA 74,20
00D5C:  DATA 46,6C
00D5E:  DATA 61,73
00D60:  DATA 68,20
00D62:  DATA 45,72
00D64:  DATA 61,73
00D66:  DATA 65,20
00D68:  DATA 31,20
00D6A:  DATA 53,65
00D6C:  DATA 63,74
00D6E:  DATA 6F,72
00D70:  DATA 0D,0A
00D72:  DATA 00,00
00D74:  DATA 09,53
00D76:  DATA 65,63
00D78:  DATA 74,6F
00D7A:  DATA 72,20
00D7C:  DATA 41,64
00D7E:  DATA 64,72
00D80:  DATA 65,73
00D82:  DATA 73,3A
00D84:  DATA 20,30
00D86:  DATA 78,25
00D88:  DATA 30,38
00D8A:  DATA 4C,58
00D8C:  DATA 0D,0A
00D8E:  DATA 00,00
00D90:  DATA 45,6E
00D92:  DATA 64,20
00D94:  DATA 46,6C
00D96:  DATA 61,73
00D98:  DATA 68,20
00D9A:  DATA 45,72
00D9C:  DATA 61,73
00D9E:  DATA 65,20
00DA0:  DATA 31,20
00DA2:  DATA 53,65
00DA4:  DATA 63,74
00DA6:  DATA 6F,72
00DA8:  DATA 0D,0A
00DAA:  DATA 00,00
00DAC:  DATA 53,74
00DAE:  DATA 61,72
00DB0:  DATA 74,20
00DB2:  DATA 46,6C
00DB4:  DATA 61,73
00DB6:  DATA 68,20
00DB8:  DATA 43,6F
00DBA:  DATA 70,79
00DBC:  DATA 20,31
00DBE:  DATA 20,53
00DC0:  DATA 65,63
00DC2:  DATA 74,6F
00DC4:  DATA 72,0D
00DC6:  DATA 0A,00
00DC8:  DATA 09,53
00DCA:  DATA 75,62
00DCC:  DATA 73,65
00DCE:  DATA 63,74
00DD0:  DATA 6F,72
00DD2:  DATA 20,41
00DD4:  DATA 64,64
00DD6:  DATA 72,65
00DD8:  DATA 73,73
00DDA:  DATA 3A,20
00DDC:  DATA 30,78
00DDE:  DATA 25,30
00DE0:  DATA 38,4C
00DE2:  DATA 58,0D
00DE4:  DATA 0A,00
00DE6:  DATA 45,6E
00DE8:  DATA 64,20
00DEA:  DATA 46,6C
00DEC:  DATA 61,73
00DEE:  DATA 68,20
00DF0:  DATA 43,6F
00DF2:  DATA 70,79
00DF4:  DATA 20,31
00DF6:  DATA 20,53
00DF8:  DATA 65,63
00DFA:  DATA 74,6F
00DFC:  DATA 72,0D
00DFE:  DATA 0A,00
00E00:  DATA 53,74
00E02:  DATA 61,72
00E04:  DATA 74,20
00E06:  DATA 46,6C
00E08:  DATA 61,73
00E0A:  DATA 68,20
00E0C:  DATA 57,72
00E0E:  DATA 69,74
00E10:  DATA 65,20
00E12:  DATA 44,65
00E14:  DATA 6D,6F
00E16:  DATA 0D,0A
00E18:  DATA 00,00
00E1A:  DATA 09,4D
00E1C:  DATA 4F,44
00E1E:  DATA 45,20
00E20:  DATA 20,20
00E22:  DATA 20,20
00E24:  DATA 3A,20
00E26:  DATA 25,30
00E28:  DATA 32,58
00E2A:  DATA 0D,0A
00E2C:  DATA 00,00
00E2E:  DATA 09,41
00E30:  DATA 64,64
00E32:  DATA 72,65
00E34:  DATA 73,73
00E36:  DATA 20,20
00E38:  DATA 3A,20
00E3A:  DATA 30,78
00E3C:  DATA 25,30
00E3E:  DATA 38,4C
00E40:  DATA 58,0D
00E42:  DATA 0A,00
00E44:  DATA 09,50
00E46:  DATA 61,63
00E48:  DATA 6B,65
00E4A:  DATA 74,4E
00E4C:  DATA 75,6D
00E4E:  DATA 3A,20
00E50:  DATA 30,78
00E52:  DATA 25,30
00E54:  DATA 34,4C
00E56:  DATA 58,0D
00E58:  DATA 0A,00
00E5A:  DATA 57,72
00E5C:  DATA 69,74
00E5E:  DATA 65,20
00E60:  DATA 44,61
00E62:  DATA 74,61
00E64:  DATA 0D,0A
00E66:  DATA 00,00
00E68:  DATA 45,6E
00E6A:  DATA 64,20
00E6C:  DATA 46,6C
00E6E:  DATA 61,73
00E70:  DATA 68,20
00E72:  DATA 57,72
00E74:  DATA 69,74
00E76:  DATA 65,20
00E78:  DATA 44,65
00E7A:  DATA 6D,6F
00E7C:  DATA 0D,0A
00E7E:  DATA 00,00
00E80:  DATA 53,74
00E82:  DATA 61,72
00E84:  DATA 74,20
00E86:  DATA 46,6C
00E88:  DATA 61,73
00E8A:  DATA 68,20
00E8C:  DATA 57,72
00E8E:  DATA 69,74
00E90:  DATA 65,20
00E92:  DATA 34,6B
00E94:  DATA 42,79
00E96:  DATA 74,65
00E98:  DATA 20,53
00E9A:  DATA 75,62
00E9C:  DATA 73,65
00E9E:  DATA 63,74
00EA0:  DATA 6F,72
00EA2:  DATA 0D,0A
00EA4:  DATA 00,00
00EA6:  DATA 45,6E
00EA8:  DATA 64,20
00EAA:  DATA 46,6C
00EAC:  DATA 61,73
00EAE:  DATA 68,20
00EB0:  DATA 57,72
00EB2:  DATA 69,74
00EB4:  DATA 65,20
00EB6:  DATA 34,6B
00EB8:  DATA 42,79
00EBA:  DATA 74,65
00EBC:  DATA 20,53
00EBE:  DATA 75,62
00EC0:  DATA 73,65
00EC2:  DATA 63,74
00EC4:  DATA 6F,72
00EC6:  DATA 0D,0A
00EC8:  DATA 00,00
00ECA:  DATA 53,74
00ECC:  DATA 61,72
00ECE:  DATA 74,20
00ED0:  DATA 46,6C
00ED2:  DATA 61,73
00ED4:  DATA 68,20
00ED6:  DATA 52,65
00ED8:  DATA 61,64
00EDA:  DATA 0D,0A
00EDC:  DATA 00,00
00EDE:  DATA 09,4D
00EE0:  DATA 4F,44
00EE2:  DATA 45,20
00EE4:  DATA 20,20
00EE6:  DATA 20,20
00EE8:  DATA 3A,20
00EEA:  DATA 25,30
00EEC:  DATA 32,58
00EEE:  DATA 0D,0A
00EF0:  DATA 00,00
00EF2:  DATA 09,41
00EF4:  DATA 64,64
00EF6:  DATA 72,65
00EF8:  DATA 73,73
00EFA:  DATA 20,20
00EFC:  DATA 3A,20
00EFE:  DATA 30,78
00F00:  DATA 25,30
00F02:  DATA 38,4C
00F04:  DATA 58,0D
00F06:  DATA 0A,00
00F08:  DATA 09,50
00F0A:  DATA 61,63
00F0C:  DATA 6B,65
00F0E:  DATA 74,4E
00F10:  DATA 75,6D
00F12:  DATA 3A,20
00F14:  DATA 30,78
00F16:  DATA 25,30
00F18:  DATA 34,4C
00F1A:  DATA 58,0D
00F1C:  DATA 0A,00
00F1E:  DATA 52,45
00F20:  DATA 41,44
00F22:  DATA 20,44
00F24:  DATA 41,54
00F26:  DATA 41,0D
00F28:  DATA 0A,00
00F2A:  DATA 4D,69
00F2C:  DATA 73,73
00F2E:  DATA 69,6F
00F30:  DATA 6E,20
00F32:  DATA 46,6C
00F34:  DATA 61,73
00F36:  DATA 68,20
00F38:  DATA 69,73
00F3A:  DATA 20,6E
00F3C:  DATA 6F,74
00F3E:  DATA 20,63
00F40:  DATA 6F,6E
00F42:  DATA 6E,65
00F44:  DATA 63,74
00F46:  DATA 65,64
00F48:  DATA 0D,0A
00F4A:  DATA 00,00
00F4C:  DATA 45,6E
00F4E:  DATA 64,20
00F50:  DATA 46,6C
00F52:  DATA 61,73
00F54:  DATA 68,20
00F56:  DATA 52,65
00F58:  DATA 61,64
00F5A:  DATA 0D,0A
00F5C:  DATA 00,00
00F5E:  DATA 53,74
00F60:  DATA 61,72
00F62:  DATA 74,20
00F64:  DATA 46,6C
00F66:  DATA 61,73
00F68:  DATA 68,20
00F6A:  DATA 52,65
00F6C:  DATA 61,64
00F6E:  DATA 20,41
00F70:  DATA 64,64
00F72:  DATA 72,65
00F74:  DATA 73,73
00F76:  DATA 0D,0A
00F78:  DATA 00,00
00F7A:  DATA 52,65
00F7C:  DATA 61,64
00F7E:  DATA 20,44
00F80:  DATA 61,74
00F82:  DATA 61,3A
00F84:  DATA 20,25
00F86:  DATA 30,32
00F88:  DATA 58,20
00F8A:  DATA 25,30
00F8C:  DATA 32,58
00F8E:  DATA 20,25
00F90:  DATA 30,32
00F92:  DATA 58,20
00F94:  DATA 25,30
00F96:  DATA 32,58
00F98:  DATA 0D,0A
00F9A:  DATA 00,00
00F9C:  DATA 45,6E
00F9E:  DATA 64,20
00FA0:  DATA 46,6C
00FA2:  DATA 61,73
00FA4:  DATA 68,20
00FA6:  DATA 52,65
00FA8:  DATA 61,64
00FAA:  DATA 20,41
00FAC:  DATA 64,64
00FAE:  DATA 72,65
00FB0:  DATA 73,73
00FB2:  DATA 0D,0A
00FB4:  DATA 00,00
00FB6:  DATA 53,74
00FB8:  DATA 61,72
00FBA:  DATA 74,20
00FBC:  DATA 46,6C
00FBE:  DATA 61,73
00FC0:  DATA 68,20
00FC2:  DATA 53,4D
00FC4:  DATA 46,20
00FC6:  DATA 43,6F
00FC8:  DATA 70,79
00FCA:  DATA 0D,0A
00FCC:  DATA 00,00
00FCE:  DATA 45,6E
00FD0:  DATA 64,20
00FD2:  DATA 46,6C
00FD4:  DATA 61,73
00FD6:  DATA 68,20
00FD8:  DATA 53,4D
00FDA:  DATA 46,20
00FDC:  DATA 43,6F
00FDE:  DATA 70,79
00FE0:  DATA 0D,0A
00FE2:  DATA 00,00
00FE4:  DATA 53,74
00FE6:  DATA 61,72
00FE8:  DATA 74,20
00FEA:  DATA 46,6C
00FEC:  DATA 61,73
00FEE:  DATA 68,20
00FF0:  DATA 53,4D
00FF2:  DATA 46,20
00FF4:  DATA 52,65
00FF6:  DATA 61,64
00FF8:  DATA 0D,0A
00FFA:  DATA 00,00
00FFC:  DATA 52,65
00FFE:  DATA 61,64
01000:  DATA 20,44
01002:  DATA 61,74
01004:  DATA 61,3A
01006:  DATA 20,00
01008:  DATA 0D,0A
0100A:  DATA 45,6E
0100C:  DATA 64,20
0100E:  DATA 46,6C
01010:  DATA 61,73
01012:  DATA 68,20
01014:  DATA 53,4D
01016:  DATA 46,20
01018:  DATA 52,65
0101A:  DATA 61,64
0101C:  DATA 0D,0A
0101E:  DATA 00,00
01020:  DATA 53,74
01022:  DATA 61,72
01024:  DATA 74,20
01026:  DATA 46,6C
01028:  DATA 61,73
0102A:  DATA 68,20
0102C:  DATA 53,4D
0102E:  DATA 46,20
01030:  DATA 57,72
01032:  DATA 69,74
01034:  DATA 65,0D
01036:  DATA 0A,00
01038:  DATA 45,6E
0103A:  DATA 64,20
0103C:  DATA 46,6C
0103E:  DATA 61,73
01040:  DATA 68,20
01042:  DATA 53,4D
01044:  DATA 46,20
01046:  DATA 57,72
01048:  DATA 69,74
0104A:  DATA 65,0D
0104C:  DATA 0A,00
0104E:  DATA 53,74
01050:  DATA 61,72
01052:  DATA 74,20
01054:  DATA 46,6C
01056:  DATA 61,73
01058:  DATA 68,20
0105A:  DATA 41,64
0105C:  DATA 64,72
0105E:  DATA 65,73
01060:  DATA 73,20
01062:  DATA 52,65
01064:  DATA 73,65
01066:  DATA 74,0D
01068:  DATA 0A,00
0106A:  DATA 45,6E
0106C:  DATA 64,20
0106E:  DATA 46,6C
01070:  DATA 61,73
01072:  DATA 68,20
01074:  DATA 41,64
01076:  DATA 64,72
01078:  DATA 65,73
0107A:  DATA 73,20
0107C:  DATA 52,65
0107E:  DATA 73,65
01080:  DATA 74,0D
01082:  DATA 0A,00
01084:  DATA 53,74
01086:  DATA 61,72
01088:  DATA 74,20
0108A:  DATA 4D,4F
0108C:  DATA 44,45
0108E:  DATA 20,44
01090:  DATA 55,4D
01092:  DATA 4D,59
01094:  DATA 0D,0A
01096:  DATA 00,00
01098:  DATA 09,4D
0109A:  DATA 4F,44
0109C:  DATA 45,20
0109E:  DATA 20,20
010A0:  DATA 20,20
010A2:  DATA 3A,20
010A4:  DATA 25,30
010A6:  DATA 32,58
010A8:  DATA 0D,0A
010AA:  DATA 00,00
010AC:  DATA 09,50
010AE:  DATA 61,72
010B0:  DATA 61,6D
010B2:  DATA 31,20
010B4:  DATA 20,20
010B6:  DATA 3A,20
010B8:  DATA 30,78
010BA:  DATA 25,30
010BC:  DATA 38,4C
010BE:  DATA 58,0D
010C0:  DATA 0A,00
010C2:  DATA 09,50
010C4:  DATA 61,72
010C6:  DATA 61,6D
010C8:  DATA 32,20
010CA:  DATA 20,20
010CC:  DATA 3A,20
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 34,4C
010D4:  DATA 58,0D
010D6:  DATA 0A,00
010D8:  DATA 45,6E
010DA:  DATA 64,20
010DC:  DATA 4D,4F
010DE:  DATA 44,45
010E0:  DATA 20,44
010E2:  DATA 55,4D
010E4:  DATA 4D,59
010E6:  DATA 0D,0A
010E8:  DATA 00,00
010EA:  DATA 53,74
010EC:  DATA 61,72
010EE:  DATA 74,20
010F0:  DATA 4D,4F
010F2:  DATA 44,45
010F4:  DATA 20,54
010F6:  DATA 45,53
010F8:  DATA 54,20
010FA:  DATA 49,56
010FC:  DATA 0D,0A
010FE:  DATA 00,00
01100:  DATA 09,53
01102:  DATA 77,65
01104:  DATA 65,70
01106:  DATA 20,73
01108:  DATA 74,65
0110A:  DATA 70,20
0110C:  DATA 3A,20
0110E:  DATA 25,75
01110:  DATA 0D,0A
01112:  DATA 00,00
01114:  DATA 45,6E
01116:  DATA 64,20
01118:  DATA 4D,4F
0111A:  DATA 44,45
0111C:  DATA 20,54
0111E:  DATA 45,53
01120:  DATA 54,20
01122:  DATA 49,56
01124:  DATA 0D,0A
01126:  DATA 00,00
01128:  DATA 53,74
0112A:  DATA 61,72
0112C:  DATA 74,20
0112E:  DATA 4D,4F
01130:  DATA 44,45
01132:  DATA 20,4D
01134:  DATA 45,41
01136:  DATA 53,55
01138:  DATA 52,45
0113A:  DATA 0D,0A
0113C:  DATA 00,00
0113E:  DATA 53,74
01140:  DATA 61,72
01142:  DATA 74,20
01144:  DATA 53,57
01146:  DATA 45,45
01148:  DATA 50,0D
0114A:  DATA 0A,00
0114C:  DATA 09,53
0114E:  DATA 77,65
01150:  DATA 65,70
01152:  DATA 20,73
01154:  DATA 74,65
01156:  DATA 70,20
01158:  DATA 3A,20
0115A:  DATA 25,75
0115C:  DATA 0D,0A
0115E:  DATA 00,00
01160:  DATA 45,4E
01162:  DATA 44,20
01164:  DATA 53,57
01166:  DATA 45,45
01168:  DATA 50,0D
0116A:  DATA 0A,00
0116C:  DATA 0D,0A
0116E:  DATA 5F,5F
01170:  DATA 5F,5F
01172:  DATA 5F,5F
01174:  DATA 5F,5F
01176:  DATA 5F,5F
01178:  DATA 5F,5F
0117A:  DATA 5F,5F
0117C:  DATA 5F,5F
0117E:  DATA 5F,5F
01180:  DATA 5F,5F
01182:  DATA 5F,5F
01184:  DATA 5F,5F
01186:  DATA 5F,5F
01188:  DATA 5F,5F
0118A:  DATA 5F,5F
0118C:  DATA 0D,0A
0118E:  DATA 5F,5F
01190:  DATA 5F,5F
01192:  DATA 5F,53
01194:  DATA 74,61
01196:  DATA 72,74
01198:  DATA 20,65
0119A:  DATA 78,65
0119C:  DATA 63,75
0119E:  DATA 74,65
011A0:  DATA 5F,6D
011A2:  DATA 69,73
011A4:  DATA 73,69
011A6:  DATA 6F,6E
011A8:  DATA 5F,5F
011AA:  DATA 5F,5F
011AC:  DATA 5F,0D
011AE:  DATA 0A,0D
011B0:  DATA 0A,00
011B2:  DATA 43,6F
011B4:  DATA 6D,6D
011B6:  DATA 61,6E
011B8:  DATA 64,20
011BA:  DATA 49,44
011BC:  DATA 3A,20
011BE:  DATA 25,58
011C0:  DATA 0D,0A
011C2:  DATA 0D,0A
011C4:  DATA 00,00
011C6:  DATA 09,09
011C8:  DATA 2D,3E
011CA:  DATA 20,49
011CC:  DATA 6E,76
011CE:  DATA 61,6C
011D0:  DATA 69,64
011D2:  DATA 20,43
011D4:  DATA 4D,44
011D6:  DATA 20,49
011D8:  DATA 44,21
011DA:  DATA 0D,0A
011DC:  DATA 00,00
011DE:  DATA 0D,0A
011E0:  DATA 5F,5F
011E2:  DATA 5F,5F
011E4:  DATA 5F,5F
011E6:  DATA 45,6E
011E8:  DATA 64,20
011EA:  DATA 65,78
011EC:  DATA 65,63
011EE:  DATA 75,74
011F0:  DATA 65,5F
011F2:  DATA 6D,69
011F4:  DATA 73,73
011F6:  DATA 69,6F
011F8:  DATA 6E,5F
011FA:  DATA 5F,5F
011FC:  DATA 5F,5F
011FE:  DATA 5F,0D
01200:  DATA 0A,5F
01202:  DATA 5F,5F
01204:  DATA 5F,5F
01206:  DATA 5F,5F
01208:  DATA 5F,5F
0120A:  DATA 5F,5F
0120C:  DATA 5F,5F
0120E:  DATA 5F,5F
01210:  DATA 5F,5F
01212:  DATA 5F,5F
01214:  DATA 5F,5F
01216:  DATA 5F,5F
01218:  DATA 5F,5F
0121A:  DATA 5F,5F
0121C:  DATA 5F,5F
0121E:  DATA 5F,5F
01220:  DATA 0D,0A
01222:  DATA 00,00
01224:  DATA 53,74
01226:  DATA 61,72
01228:  DATA 74,20
0122A:  DATA 65,78
0122C:  DATA 65,63
0122E:  DATA 75,74
01230:  DATA 65,5F
01232:  DATA 63,6F
01234:  DATA 6D,6D
01236:  DATA 61,6E
01238:  DATA 64,0D
0123A:  DATA 0A,00
0123C:  DATA 09,2D
0123E:  DATA 3E,20
01240:  DATA 55,70
01242:  DATA 6C,69
01244:  DATA 6E,6B
01246:  DATA 20,63
01248:  DATA 6F,6D
0124A:  DATA 6D,61
0124C:  DATA 6E,64
0124E:  DATA 0D,0A
01250:  DATA 00,00
01252:  DATA 09,20
01254:  DATA 20,20
01256:  DATA 54,72
01258:  DATA 61,6E
0125A:  DATA 73,6D
0125C:  DATA 69,74
0125E:  DATA 20,41
01260:  DATA 63,6B
01262:  DATA 6E,6F
01264:  DATA 6C,65
01266:  DATA 67,64
01268:  DATA 65,0D
0126A:  DATA 0A,00
0126C:  DATA 09,2D
0126E:  DATA 3E,20
01270:  DATA 53,74
01272:  DATA 61,74
01274:  DATA 75,73
01276:  DATA 20,63
01278:  DATA 68,65
0127A:  DATA 63,6B
0127C:  DATA 0D,0A
0127E:  DATA 00,00
01280:  DATA 09,20
01282:  DATA 20,20
01284:  DATA 54,72
01286:  DATA 61,6E
01288:  DATA 73,6D
0128A:  DATA 69,74
0128C:  DATA 20,4D
0128E:  DATA 49,53
01290:  DATA 20,4D
01292:  DATA 43,55
01294:  DATA 20,53
01296:  DATA 74,61
01298:  DATA 74,75
0129A:  DATA 73,0D
0129C:  DATA 0A,00
0129E:  DATA 66,69
012A0:  DATA 6E,69
012A2:  DATA 73,68
012A4:  DATA 65,64
012A6:  DATA 20,69
012A8:  DATA 6E,20
012AA:  DATA 73,74
012AC:  DATA 61,74
012AE:  DATA 75,73
012B0:  DATA 5F,63
012B2:  DATA 68,65
012B4:  DATA 63,6B
012B6:  DATA 0D,0A
012B8:  DATA 00,00
012BA:  DATA 09,2D
012BC:  DATA 3E,20
012BE:  DATA 53,4D
012C0:  DATA 46,20
012C2:  DATA 61,76
012C4:  DATA 61,69
012C6:  DATA 6C,61
012C8:  DATA 62,6C
012CA:  DATA 65,20
012CC:  DATA 63,68
012CE:  DATA 65,63
012D0:  DATA 6B,0D
012D2:  DATA 0A,00
012D4:  DATA 09,20
012D6:  DATA 20,20
012D8:  DATA 54,72
012DA:  DATA 61,6E
012DC:  DATA 73,6D
012DE:  DATA 69,74
012E0:  DATA 20,41
012E2:  DATA 63,6B
012E4:  DATA 6E,6F
012E6:  DATA 6C,65
012E8:  DATA 67,64
012EA:  DATA 65,0D
012EC:  DATA 0A,00
012EE:  DATA 09,09
012F0:  DATA 2D,3E
012F2:  DATA 20,61
012F4:  DATA 6C,6C
012F6:  DATA 6F,77
012F8:  DATA 64,0D
012FA:  DATA 0A,00
012FC:  DATA 09,09
012FE:  DATA 2D,3E
01300:  DATA 20,64
01302:  DATA 65,6E
01304:  DATA 79,65
01306:  DATA 64,0D
01308:  DATA 0A,00
0130A:  DATA 0D,0A
0130C:  DATA 0D,0A
0130E:  DATA 0D,0A
01310:  DATA 3D,3D
01312:  DATA 3D,3D
01314:  DATA 3D,3D
01316:  DATA 3D,3D
01318:  DATA 3D,3D
0131A:  DATA 3D,3D
0131C:  DATA 3D,3D
0131E:  DATA 3D,3D
01320:  DATA 3D,3D
01322:  DATA 3D,3D
01324:  DATA 3D,3D
01326:  DATA 3D,3D
01328:  DATA 3D,3D
0132A:  DATA 3D,3D
0132C:  DATA 3D,3D
0132E:  DATA 3D,3D
01330:  DATA 3D,3D
01332:  DATA 3D,3D
01334:  DATA 3D,3D
01336:  DATA 3D,3D
01338:  DATA 3D,3D
0133A:  DATA 3D,3D
0133C:  DATA 3D,3D
0133E:  DATA 3D,3D
01340:  DATA 3D,3D
01342:  DATA 3D,3D
01344:  DATA 3D,3D
01346:  DATA 3D,3D
01348:  DATA 3D,3D
0134A:  DATA 3D,3D
0134C:  DATA 0D,0A
0134E:  DATA 00,00
01350:  DATA 54,68
01352:  DATA 69,73
01354:  DATA 20,69
01356:  DATA 73,20
01358:  DATA 4D,4F
0135A:  DATA 4D,49
0135C:  DATA 4A,49
0135E:  DATA 20,43
01360:  DATA 49,47
01362:  DATA 53,20
01364:  DATA 50,49
01366:  DATA 43,20
01368:  DATA 42,42
0136A:  DATA 4D,20
0136C:  DATA 66,6F
0136E:  DATA 72,20
01370:  DATA 4D,49
01372:  DATA 53,37
01374:  DATA 5F,42
01376:  DATA 42,4D
01378:  DATA 33,2E
0137A:  DATA 0D,0A
0137C:  DATA 00,00
0137E:  DATA 4C,61
01380:  DATA 73,74
01382:  DATA 20,75
01384:  DATA 70,64
01386:  DATA 61,74
01388:  DATA 65,64
0138A:  DATA 20,6F
0138C:  DATA 6E,20
0138E:  DATA 25,73
01390:  DATA 20,25
01392:  DATA 73,2C
01394:  DATA 20,62
01396:  DATA 79,20
01398:  DATA 49,6E
0139A:  DATA 6F,75
0139C:  DATA 65,2E
0139E:  DATA 0D,0A
013A0:  DATA 0D,0A
013A2:  DATA 00,00
013A4:  DATA 32,30
013A6:  DATA 2D,4A
013A8:  DATA 75,6C
013AA:  DATA 2D,32
013AC:  DATA 35,00
013AE:  DATA 30,31
013B0:  DATA 3A,35
013B2:  DATA 34,3A
013B4:  DATA 35,34
013B6:  DATA 00,00
013B8:  DATA 5F,5F
013BA:  DATA 5F,5F
013BC:  DATA 43,49
013BE:  DATA 47,53
013C0:  DATA 20,50
013C2:  DATA 49,43
013C4:  DATA 20,53
013C6:  DATA 74,61
013C8:  DATA 72,74
013CA:  DATA 20,4F
013CC:  DATA 70,65
013CE:  DATA 72,61
013D0:  DATA 74,69
013D2:  DATA 6F,6E
013D4:  DATA 5F,5F
013D6:  DATA 5F,5F
013D8:  DATA 5F,0D
013DA:  DATA 0A,0D
013DC:  DATA 0A,00
013DE:  DATA 77,61
013E0:  DATA 69,74
013E2:  DATA 69,6E
013E4:  DATA 67,20
013E6:  DATA 66,6F
013E8:  DATA 72,20
013EA:  DATA 42,4F
013EC:  DATA 53,53
013EE:  DATA 20,50
013F0:  DATA 49,43
013F2:  DATA 20,63
013F4:  DATA 6F,6D
013F6:  DATA 6D,61
013F8:  DATA 6E,64
013FA:  DATA 00,00
013FC:  DATA 0D,0A
013FE:  DATA 77,61
01400:  DATA 69,74
01402:  DATA 69,6E
01404:  DATA 67,20
01406:  DATA 66,6F
01408:  DATA 72,20
0140A:  DATA 42,4F
0140C:  DATA 53,53
0140E:  DATA 20,50
01410:  DATA 49,43
01412:  DATA 20,63
01414:  DATA 6F,6D
01416:  DATA 6D,61
01418:  DATA 6E,64
0141A:  DATA 00,00
0141C:  DATA 0D,0A
0141E:  DATA 0D,0A
01420:  DATA 3D,3D
01422:  DATA 3D,3D
01424:  DATA 3D,3D
01426:  DATA 0D,0A
01428:  DATA 0D,0A
0142A:  DATA 46,69
0142C:  DATA 6E,69
0142E:  DATA 73,68
01430:  DATA 65,64
01432:  DATA 20,70
01434:  DATA 72,6F
01436:  DATA 63,65
01438:  DATA 73,73
0143A:  DATA 2E,0D
0143C:  DATA 0A,57
0143E:  DATA 61,69
01440:  DATA 74,20
01442:  DATA 66,6F
01444:  DATA 72,20
01446:  DATA 42,4F
01448:  DATA 53,53
0144A:  DATA 20,50
0144C:  DATA 49,43
0144E:  DATA 20,74
01450:  DATA 75,72
01452:  DATA 6E,20
01454:  DATA 6F,66
01456:  DATA 66,20
01458:  DATA 6D,65
0145A:  DATA 00,00
0145C:  DATA 45,6E
0145E:  DATA 64,20
01460:  DATA 6D,61
01462:  DATA 69,6E
01464:  DATA 0D,0A
01466:  DATA 00,00
*
014E8:  TBLRD*+
014EA:  MOVF   FF5,F
014EC:  BTFSC  FD8.2
014EE:  GOTO   1516
014F2:  MOVFF  FF6,4E3
014F6:  MOVFF  FF7,4E4
014FA:  MOVFF  FF8,4E5
014FE:  MOVFF  FF5,4E6
01502:  CALL   1496
01506:  MOVFF  4E3,FF6
0150A:  MOVFF  4E4,FF7
0150E:  MOVFF  4E5,FF8
01512:  GOTO   14E8
01516:  RETURN 0
01518:  TBLRD*+
0151A:  MOVFF  FF6,41A
0151E:  MOVFF  FF7,41B
01522:  MOVFF  FF8,41C
01526:  MOVFF  FF5,4E6
0152A:  CALL   1496
0152E:  MOVFF  41A,FF6
01532:  MOVFF  41B,FF7
01536:  MOVFF  41C,FF8
0153A:  MOVLB  4
0153C:  DECFSZ x19,F
0153E:  BRA    1544
01540:  BRA    154A
01542:  MOVLB  0
01544:  MOVLB  0
01546:  GOTO   1518
0154A:  MOVLB  0
0154C:  RETURN 0
*
015C8:  MOVLB  5
015CA:  MOVF   x01,W
015CC:  ANDLW  07
015CE:  MOVWF  00
015D0:  RRCF   x01,W
015D2:  MOVWF  01
015D4:  RRCF   01,F
015D6:  RRCF   01,F
015D8:  MOVLW  1F
015DA:  ANDWF  01,F
015DC:  MOVF   01,W
015DE:  ADDWF  x03,W
015E0:  MOVWF  FE9
015E2:  MOVLW  00
015E4:  ADDWFC x04,W
015E6:  MOVWF  FEA
015E8:  CLRF   01
015EA:  INCF   01,F
015EC:  INCF   00,F
015EE:  MOVLB  0
015F0:  GOTO   15F6
015F4:  RLCF   01,F
015F6:  DECFSZ 00,F
015F8:  GOTO   15F4
015FC:  MOVLB  5
015FE:  MOVF   x02,F
01600:  BTFSS  FD8.2
01602:  BRA    160A
01604:  MOVLB  0
01606:  GOTO   1614
0160A:  MOVF   01,W
0160C:  IORWF  FEF,F
0160E:  MOVLB  0
01610:  GOTO   161A
01614:  COMF   01,F
01616:  MOVF   01,W
01618:  ANDWF  FEF,F
0161A:  RETURN 0
*
01B20:  MOVLB  4
01B22:  BTFSS  xA5.7
01B24:  BRA    1B2C
01B26:  MOVLB  0
01B28:  GOTO   1B5C
01B2C:  MOVLW  0F
01B2E:  MOVWF  00
01B30:  SWAPF  xA4,W
01B32:  ANDWF  00,F
01B34:  MOVLW  0A
01B36:  SUBWF  00,W
01B38:  BTFSS  FD8.0
01B3A:  BRA    1B42
01B3C:  MOVLB  0
01B3E:  GOTO   1B4C
01B42:  MOVLW  30
01B44:  ADDWF  00,F
01B46:  MOVLB  0
01B48:  GOTO   1B54
01B4C:  MOVLB  4
01B4E:  MOVF   xA5,W
01B50:  ADDWF  00,F
01B52:  MOVLB  0
01B54:  MOVFF  00,4E6
01B58:  CALL   1496
01B5C:  MOVLW  0F
01B5E:  MOVLB  4
01B60:  ANDWF  xA4,F
01B62:  MOVLW  0A
01B64:  SUBWF  xA4,W
01B66:  BTFSS  FD8.0
01B68:  BRA    1B70
01B6A:  MOVLB  0
01B6C:  GOTO   1B78
01B70:  MOVLW  30
01B72:  MOVLB  0
01B74:  GOTO   1B80
01B78:  MOVLB  4
01B7A:  BCF    xA5.7
01B7C:  MOVF   xA5,W
01B7E:  MOVLB  0
01B80:  MOVLB  4
01B82:  ADDWF  xA4,F
01B84:  MOVFF  4A4,4E6
01B88:  MOVLB  0
01B8A:  CALL   1496
01B8E:  RETURN 0
*
0380A:  TSTFSZ 01
0380C:  GOTO   381A
03810:  TSTFSZ 02
03812:  GOTO   381C
03816:  GOTO   382C
0381A:  INCF   02,F
0381C:  MOVFF  00,FEE
03820:  DECFSZ 01,F
03822:  GOTO   381C
03826:  DECFSZ 02,F
03828:  GOTO   381C
0382C:  GOTO   3858 (RETURN)
*
03C14:  MOVLB  4
03C16:  MOVF   x20,W
03C18:  CLRF   01
03C1A:  SUBWF  x1F,W
03C1C:  BTFSS  FD8.0
03C1E:  BRA    3C26
03C20:  MOVLB  0
03C22:  GOTO   3C30
03C26:  MOVF   x1F,W
03C28:  MOVWF  00
03C2A:  MOVLB  0
03C2C:  GOTO   3C5A
03C30:  CLRF   00
03C32:  MOVLW  08
03C34:  MOVLB  4
03C36:  MOVWF  x21
03C38:  MOVLB  0
03C3A:  MOVLB  4
03C3C:  RLCF   x1F,F
03C3E:  RLCF   00,F
03C40:  MOVF   x20,W
03C42:  SUBWF  00,W
03C44:  BTFSC  FD8.0
03C46:  MOVWF  00
03C48:  RLCF   01,F
03C4A:  DECFSZ x21,F
03C4C:  BRA    3C52
03C4E:  BRA    3C58
03C50:  MOVLB  0
03C52:  MOVLB  0
03C54:  GOTO   3C3A
03C58:  MOVLB  0
03C5A:  RETURN 0
03C5C:  MOVF   01,W
03C5E:  MOVFF  415,41F
03C62:  MOVLW  64
03C64:  MOVLB  4
03C66:  MOVWF  x20
03C68:  MOVLB  0
03C6A:  CALL   3C14
03C6E:  MOVFF  00,415
03C72:  MOVF   01,W
03C74:  MOVLW  30
03C76:  BTFSS  FD8.2
03C78:  GOTO   3C9C
03C7C:  MOVLB  4
03C7E:  BTFSC  x16.1
03C80:  BRA    3C88
03C82:  MOVLB  0
03C84:  GOTO   3CB0
03C88:  BTFSS  x16.3
03C8A:  BRA    3C92
03C8C:  MOVLB  0
03C8E:  GOTO   3CB0
03C92:  BTFSC  x16.4
03C94:  MOVLW  20
03C96:  MOVLB  0
03C98:  GOTO   3CA6
03C9C:  MOVLB  4
03C9E:  BCF    x16.3
03CA0:  BCF    x16.4
03CA2:  BSF    x16.0
03CA4:  MOVLB  0
03CA6:  ADDWF  01,F
03CA8:  MOVFF  01,4E6
03CAC:  CALL   1496
03CB0:  MOVFF  415,41F
03CB4:  MOVLW  0A
03CB6:  MOVLB  4
03CB8:  MOVWF  x20
03CBA:  MOVLB  0
03CBC:  CALL   3C14
03CC0:  MOVFF  00,415
03CC4:  MOVF   01,W
03CC6:  MOVLW  30
03CC8:  BTFSS  FD8.2
03CCA:  GOTO   3CEA
03CCE:  MOVLB  4
03CD0:  BTFSS  x16.3
03CD2:  BRA    3CDA
03CD4:  MOVLB  0
03CD6:  GOTO   3CF4
03CDA:  BTFSC  x16.0
03CDC:  BRA    3CE4
03CDE:  MOVLB  0
03CE0:  GOTO   3CF4
03CE4:  BTFSC  x16.4
03CE6:  MOVLW  20
03CE8:  MOVLB  0
03CEA:  ADDWF  01,F
03CEC:  MOVFF  01,4E6
03CF0:  CALL   1496
03CF4:  MOVLW  30
03CF6:  MOVLB  4
03CF8:  ADDWF  x15,F
03CFA:  MOVFF  415,4E6
03CFE:  MOVLB  0
03D00:  CALL   1496
03D04:  RETURN 0
*
03FFC:  MOVFF  FEA,39E
04000:  MOVFF  FE9,39D
04004:  MOVLB  3
04006:  SWAPF  x97,W
04008:  IORLW  F0
0400A:  MOVWF  x99
0400C:  ADDWF  x99,F
0400E:  ADDLW  E2
04010:  MOVWF  x9A
04012:  ADDLW  32
04014:  MOVWF  x9C
04016:  MOVF   x97,W
04018:  ANDLW  0F
0401A:  ADDWF  x9A,F
0401C:  ADDWF  x9A,F
0401E:  ADDWF  x9C,F
04020:  ADDLW  E9
04022:  MOVWF  x9B
04024:  ADDWF  x9B,F
04026:  ADDWF  x9B,F
04028:  SWAPF  x96,W
0402A:  ANDLW  0F
0402C:  ADDWF  x9B,F
0402E:  ADDWF  x9C,F
04030:  RLCF   x9B,F
04032:  RLCF   x9C,F
04034:  COMF   x9C,F
04036:  RLCF   x9C,F
04038:  MOVF   x96,W
0403A:  ANDLW  0F
0403C:  ADDWF  x9C,F
0403E:  RLCF   x99,F
04040:  MOVLW  07
04042:  MOVWF  x98
04044:  MOVLW  0A
04046:  MOVLB  0
04048:  MOVLB  3
0404A:  DECF   x9B,F
0404C:  ADDWF  x9C,F
0404E:  BTFSC  FD8.0
04050:  BRA    4058
04052:  MOVLB  0
04054:  GOTO   4048
04058:  MOVLB  0
0405A:  MOVLB  3
0405C:  DECF   x9A,F
0405E:  ADDWF  x9B,F
04060:  BTFSC  FD8.0
04062:  BRA    406A
04064:  MOVLB  0
04066:  GOTO   405A
0406A:  MOVLB  0
0406C:  MOVLB  3
0406E:  DECF   x99,F
04070:  ADDWF  x9A,F
04072:  BTFSC  FD8.0
04074:  BRA    407C
04076:  MOVLB  0
04078:  GOTO   406C
0407C:  MOVLB  0
0407E:  MOVLB  3
04080:  DECF   x98,F
04082:  ADDWF  x99,F
04084:  BTFSC  FD8.0
04086:  BRA    408E
04088:  MOVLB  0
0408A:  GOTO   407E
0408E:  MOVLW  03
04090:  MOVWF  FEA
04092:  MOVLW  98
04094:  MOVWF  FE9
04096:  MOVLW  07
04098:  ANDWF  x9D,W
0409A:  BCF    x9D.6
0409C:  MOVLB  0
0409E:  ADDWF  FE9,F
040A0:  MOVLW  00
040A2:  ADDWFC FEA,F
040A4:  MOVF   FE9,W
040A6:  SUBLW  9C
040A8:  BTFSS  FD8.2
040AA:  GOTO   40BE
040AE:  MOVF   FEA,W
040B0:  SUBLW  03
040B2:  BTFSS  FD8.2
040B4:  GOTO   40BE
040B8:  MOVLB  3
040BA:  BSF    x9D.6
040BC:  MOVLB  0
040BE:  MOVF   FEF,W
040C0:  MOVWF  00
040C2:  BTFSS  FD8.2
040C4:  GOTO   40F0
040C8:  MOVLB  3
040CA:  BTFSS  x9D.6
040CC:  BRA    40D4
040CE:  MOVLB  0
040D0:  GOTO   40F0
040D4:  BTFSS  x9D.4
040D6:  BRA    40DE
040D8:  MOVLB  0
040DA:  GOTO   4114
040DE:  BTFSS  x9D.3
040E0:  BRA    40E8
040E2:  MOVLB  0
040E4:  GOTO   40F0
040E8:  MOVLW  20
040EA:  MOVLB  0
040EC:  GOTO   40FA
040F0:  MOVLB  3
040F2:  BSF    x9D.3
040F4:  BCF    x9D.4
040F6:  MOVLW  30
040F8:  MOVLB  0
040FA:  ADDWF  00,F
040FC:  MOVFF  FEA,397
04100:  MOVFF  FE9,396
04104:  MOVFF  00,4E6
04108:  CALL   1496
0410C:  MOVFF  397,FEA
04110:  MOVFF  396,FE9
04114:  MOVF   FEE,W
04116:  MOVLB  3
04118:  BTFSC  x9D.6
0411A:  BRA    4122
0411C:  MOVLB  0
0411E:  GOTO   40A4
04122:  MOVLB  0
04124:  RETURN 0
*
05BC8:  BTFSC  FD8.1
05BCA:  GOTO   5BD6
05BCE:  MOVLW  04
05BD0:  MOVWF  FEA
05BD2:  MOVLW  29
05BD4:  MOVWF  FE9
05BD6:  CLRF   00
05BD8:  CLRF   01
05BDA:  CLRF   02
05BDC:  CLRF   03
05BDE:  MOVLB  4
05BE0:  CLRF   x29
05BE2:  CLRF   x2A
05BE4:  CLRF   x2B
05BE6:  CLRF   x2C
05BE8:  MOVF   x28,W
05BEA:  IORWF  x27,W
05BEC:  IORWF  x26,W
05BEE:  IORWF  x25,W
05BF0:  BTFSS  FD8.2
05BF2:  BRA    5BFA
05BF4:  MOVLB  0
05BF6:  GOTO   5C8A
05BFA:  MOVLB  0
05BFC:  MOVLW  20
05BFE:  MOVLB  4
05C00:  MOVWF  x2D
05C02:  MOVLB  0
05C04:  BCF    FD8.0
05C06:  MOVLB  4
05C08:  RLCF   x21,F
05C0A:  RLCF   x22,F
05C0C:  RLCF   x23,F
05C0E:  RLCF   x24,F
05C10:  RLCF   x29,F
05C12:  RLCF   x2A,F
05C14:  RLCF   x2B,F
05C16:  RLCF   x2C,F
05C18:  MOVF   x28,W
05C1A:  SUBWF  x2C,W
05C1C:  BTFSC  FD8.2
05C1E:  BRA    5C26
05C20:  MOVLB  0
05C22:  GOTO   5C48
05C26:  MOVF   x27,W
05C28:  SUBWF  x2B,W
05C2A:  BTFSC  FD8.2
05C2C:  BRA    5C34
05C2E:  MOVLB  0
05C30:  GOTO   5C48
05C34:  MOVF   x26,W
05C36:  SUBWF  x2A,W
05C38:  BTFSC  FD8.2
05C3A:  BRA    5C42
05C3C:  MOVLB  0
05C3E:  GOTO   5C48
05C42:  MOVF   x25,W
05C44:  SUBWF  x29,W
05C46:  MOVLB  0
05C48:  BTFSS  FD8.0
05C4A:  GOTO   5C70
05C4E:  MOVLB  4
05C50:  MOVF   x25,W
05C52:  SUBWF  x29,F
05C54:  MOVF   x26,W
05C56:  BTFSS  FD8.0
05C58:  INCFSZ x26,W
05C5A:  SUBWF  x2A,F
05C5C:  MOVF   x27,W
05C5E:  BTFSS  FD8.0
05C60:  INCFSZ x27,W
05C62:  SUBWF  x2B,F
05C64:  MOVF   x28,W
05C66:  BTFSS  FD8.0
05C68:  INCFSZ x28,W
05C6A:  SUBWF  x2C,F
05C6C:  BSF    FD8.0
05C6E:  MOVLB  0
05C70:  RLCF   00,F
05C72:  RLCF   01,F
05C74:  RLCF   02,F
05C76:  RLCF   03,F
05C78:  MOVLB  4
05C7A:  DECFSZ x2D,F
05C7C:  BRA    5C82
05C7E:  BRA    5C88
05C80:  MOVLB  0
05C82:  MOVLB  0
05C84:  GOTO   5C04
05C88:  MOVLB  0
05C8A:  MOVFF  429,FEF
05C8E:  MOVFF  42A,FEC
05C92:  MOVFF  42B,FEC
05C96:  MOVFF  42C,FEC
05C9A:  MOVF   FED,F
05C9C:  MOVF   FED,F
05C9E:  MOVF   FED,F
05CA0:  RETURN 0
*
06196:  MOVLW  20
06198:  MOVLB  4
0619A:  BTFSS  x1A.4
0619C:  MOVLW  30
0619E:  MOVWF  x1B
061A0:  MOVFF  419,00
061A4:  BTFSC  00.7
061A6:  BRA    61AE
061A8:  MOVLB  0
061AA:  GOTO   61C0
061AE:  COMF   00,F
061B0:  INCF   00,F
061B2:  MOVFF  00,419
061B6:  MOVLW  2D
061B8:  MOVWF  x1B
061BA:  BSF    x1A.7
061BC:  BSF    x1A.0
061BE:  MOVLB  0
061C0:  MOVF   01,W
061C2:  MOVFF  419,41F
061C6:  MOVLW  64
061C8:  MOVLB  4
061CA:  MOVWF  x20
061CC:  MOVLB  0
061CE:  CALL   3C14
061D2:  MOVFF  00,419
061D6:  MOVLW  30
061D8:  ADDWF  01,W
061DA:  MOVLB  4
061DC:  MOVWF  x1C
061DE:  MOVFF  419,41F
061E2:  MOVLW  0A
061E4:  MOVWF  x20
061E6:  MOVLB  0
061E8:  CALL   3C14
061EC:  MOVLW  30
061EE:  ADDWF  00,W
061F0:  MOVLB  4
061F2:  MOVWF  x1E
061F4:  MOVLW  30
061F6:  ADDWF  01,W
061F8:  MOVWF  x1D
061FA:  MOVFF  41B,00
061FE:  MOVLB  0
06200:  MOVLW  30
06202:  MOVLB  4
06204:  SUBWF  x1C,W
06206:  BTFSS  FD8.2
06208:  BRA    6210
0620A:  MOVLB  0
0620C:  GOTO   621C
06210:  BSF    x1A.1
06212:  BTFSC  x1A.7
06214:  BSF    x1A.2
06216:  MOVLB  0
06218:  GOTO   625C
0621C:  MOVFF  41B,41C
06220:  MOVLW  20
06222:  MOVLB  4
06224:  MOVWF  x1B
06226:  MOVLW  30
06228:  SUBWF  x1D,W
0622A:  BTFSS  FD8.2
0622C:  BRA    6234
0622E:  MOVLB  0
06230:  GOTO   6240
06234:  BSF    x1A.0
06236:  BTFSC  x1A.7
06238:  BSF    x1A.1
0623A:  MOVLB  0
0623C:  GOTO   625C
06240:  BTFSC  FD8.2
06242:  BRA    624A
06244:  MOVLB  4
06246:  BSF    x1A.0
06248:  MOVLB  0
0624A:  BTFSS  FD8.2
0624C:  GOTO   625C
06250:  MOVFF  41C,41D
06254:  MOVLW  20
06256:  MOVLB  4
06258:  MOVWF  x1C
0625A:  MOVLB  0
0625C:  MOVLB  4
0625E:  BTFSS  x1A.2
06260:  BRA    6268
06262:  MOVLB  0
06264:  GOTO   6282
06268:  BTFSS  x1A.1
0626A:  BRA    6272
0626C:  MOVLB  0
0626E:  GOTO   628A
06272:  BTFSS  x1A.0
06274:  BRA    627C
06276:  MOVLB  0
06278:  GOTO   6292
0627C:  MOVLB  0
0627E:  GOTO   629A
06282:  MOVFF  41B,4E6
06286:  CALL   1496
0628A:  MOVFF  41C,4E6
0628E:  CALL   1496
06292:  MOVFF  41D,4E6
06296:  CALL   1496
0629A:  MOVFF  41E,4E6
0629E:  CALL   1496
062A2:  RETURN 0
*
0639C:  MOVF   FE9,W
0639E:  MOVLB  4
063A0:  MOVWF  x19
063A2:  MOVLW  3B
063A4:  MOVWF  x20
063A6:  MOVLW  9A
063A8:  MOVWF  x1F
063AA:  MOVLW  CA
063AC:  MOVWF  x1E
063AE:  CLRF   x1D
063B0:  MOVLW  0A
063B2:  MOVWF  x1B
063B4:  MOVLB  0
063B6:  BSF    FD8.1
063B8:  MOVLW  04
063BA:  MOVWF  FEA
063BC:  MOVLW  15
063BE:  MOVWF  FE9
063C0:  MOVFF  418,424
063C4:  MOVFF  417,423
063C8:  MOVFF  416,422
063CC:  MOVFF  415,421
063D0:  MOVFF  420,428
063D4:  MOVFF  41F,427
063D8:  MOVFF  41E,426
063DC:  MOVFF  41D,425
063E0:  CALL   5BC8
063E4:  MOVF   01,W
063E6:  MOVF   00,F
063E8:  BTFSS  FD8.2
063EA:  GOTO   6442
063EE:  MOVLB  4
063F0:  MOVF   x1B,W
063F2:  XORLW  01
063F4:  BTFSS  FD8.2
063F6:  BRA    63FE
063F8:  MOVLB  0
063FA:  GOTO   6442
063FE:  MOVF   x19,W
06400:  BTFSS  FD8.2
06402:  BRA    640A
06404:  MOVLB  0
06406:  GOTO   6448
0640A:  ANDLW  0F
0640C:  SUBWF  x1B,W
0640E:  BTFSS  FD8.2
06410:  BRA    6418
06412:  MOVLB  0
06414:  GOTO   6424
06418:  BTFSS  FD8.0
0641A:  BRA    6422
0641C:  MOVLB  0
0641E:  GOTO   6454
06422:  MOVLB  0
06424:  MOVLB  4
06426:  BTFSS  x19.7
06428:  BRA    6430
0642A:  MOVLB  0
0642C:  GOTO   6454
06430:  BTFSS  x19.6
06432:  BRA    643A
06434:  MOVLB  0
06436:  GOTO   6448
0643A:  MOVLW  20
0643C:  MOVLB  0
0643E:  GOTO   644A
06442:  MOVLB  4
06444:  CLRF   x19
06446:  MOVLB  0
06448:  MOVLW  30
0644A:  ADDWF  00,F
0644C:  MOVFF  00,4E6
06450:  CALL   1496
06454:  BCF    FD8.1
06456:  MOVFF  420,424
0645A:  MOVFF  41F,423
0645E:  MOVFF  41E,422
06462:  MOVFF  41D,421
06466:  MOVLB  4
06468:  CLRF   x28
0646A:  CLRF   x27
0646C:  CLRF   x26
0646E:  MOVLW  0A
06470:  MOVWF  x25
06472:  MOVLB  0
06474:  CALL   5BC8
06478:  MOVFF  03,420
0647C:  MOVFF  02,41F
06480:  MOVFF  01,41E
06484:  MOVFF  00,41D
06488:  MOVLB  4
0648A:  DECFSZ x1B,F
0648C:  BRA    6492
0648E:  BRA    6498
06490:  MOVLB  0
06492:  MOVLB  0
06494:  GOTO   63B6
06498:  MOVLB  0
0649A:  RETURN 0
*
06A36:  MOVF   FE9,W
06A38:  MOVLB  4
06A3A:  MOVWF  x19
06A3C:  BTFSC  x18.7
06A3E:  BRA    6A46
06A40:  MOVLB  0
06A42:  GOTO   6A62
06A46:  DECF   x19,F
06A48:  BSF    x19.5
06A4A:  COMF   x15,F
06A4C:  COMF   x16,F
06A4E:  COMF   x17,F
06A50:  COMF   x18,F
06A52:  INCF   x15,F
06A54:  BTFSC  FD8.2
06A56:  INCF   x16,F
06A58:  BTFSC  FD8.2
06A5A:  INCF   x17,F
06A5C:  BTFSC  FD8.2
06A5E:  INCF   x18,F
06A60:  MOVLB  0
06A62:  MOVLW  3B
06A64:  MOVLB  4
06A66:  MOVWF  x20
06A68:  MOVLW  9A
06A6A:  MOVWF  x1F
06A6C:  MOVLW  CA
06A6E:  MOVWF  x1E
06A70:  CLRF   x1D
06A72:  MOVLW  0A
06A74:  MOVWF  x1B
06A76:  MOVLB  0
06A78:  BSF    FD8.1
06A7A:  MOVLW  04
06A7C:  MOVWF  FEA
06A7E:  MOVLW  15
06A80:  MOVWF  FE9
06A82:  MOVFF  418,424
06A86:  MOVFF  417,423
06A8A:  MOVFF  416,422
06A8E:  MOVFF  415,421
06A92:  MOVFF  420,428
06A96:  MOVFF  41F,427
06A9A:  MOVFF  41E,426
06A9E:  MOVFF  41D,425
06AA2:  CALL   5BC8
06AA6:  MOVF   01,W
06AA8:  MOVF   00,F
06AAA:  BTFSS  FD8.2
06AAC:  GOTO   6B04
06AB0:  MOVLB  4
06AB2:  MOVF   x1B,W
06AB4:  XORLW  01
06AB6:  BTFSS  FD8.2
06AB8:  BRA    6AC0
06ABA:  MOVLB  0
06ABC:  GOTO   6B04
06AC0:  MOVF   x19,W
06AC2:  BTFSS  FD8.2
06AC4:  BRA    6ACC
06AC6:  MOVLB  0
06AC8:  GOTO   6B0C
06ACC:  ANDLW  0F
06ACE:  SUBWF  x1B,W
06AD0:  BTFSS  FD8.2
06AD2:  BRA    6ADA
06AD4:  MOVLB  0
06AD6:  GOTO   6AE6
06ADA:  BTFSS  FD8.0
06ADC:  BRA    6AE4
06ADE:  MOVLB  0
06AE0:  GOTO   6B66
06AE4:  MOVLB  0
06AE6:  MOVLB  4
06AE8:  BTFSS  x19.7
06AEA:  BRA    6AF2
06AEC:  MOVLB  0
06AEE:  GOTO   6B66
06AF2:  BTFSS  x19.6
06AF4:  BRA    6AFC
06AF6:  MOVLB  0
06AF8:  GOTO   6B0C
06AFC:  MOVLW  20
06AFE:  MOVLB  0
06B00:  GOTO   6B5C
06B04:  MOVLW  20
06B06:  MOVLB  4
06B08:  ANDWF  x19,F
06B0A:  MOVLB  0
06B0C:  MOVLB  4
06B0E:  BTFSC  x19.5
06B10:  BRA    6B18
06B12:  MOVLB  0
06B14:  GOTO   6B32
06B18:  BCF    x19.5
06B1A:  MOVF   00,W
06B1C:  MOVWF  x19
06B1E:  MOVLW  2D
06B20:  MOVWF  xE6
06B22:  MOVLB  0
06B24:  CALL   1496
06B28:  MOVLB  4
06B2A:  MOVF   x19,W
06B2C:  MOVWF  00
06B2E:  CLRF   x19
06B30:  MOVLB  0
06B32:  MOVLW  30
06B34:  MOVLB  4
06B36:  BTFSC  x19.5
06B38:  BRA    6B40
06B3A:  MOVLB  0
06B3C:  GOTO   6B5C
06B40:  BCF    x19.5
06B42:  MOVF   00,W
06B44:  MOVWF  x19
06B46:  MOVLW  2D
06B48:  MOVWF  xE6
06B4A:  MOVLB  0
06B4C:  CALL   1496
06B50:  MOVLB  4
06B52:  MOVF   x19,W
06B54:  MOVWF  00
06B56:  CLRF   x19
06B58:  MOVLW  30
06B5A:  MOVLB  0
06B5C:  ADDWF  00,F
06B5E:  MOVFF  00,4E6
06B62:  CALL   1496
06B66:  BCF    FD8.1
06B68:  MOVFF  420,424
06B6C:  MOVFF  41F,423
06B70:  MOVFF  41E,422
06B74:  MOVFF  41D,421
06B78:  MOVLB  4
06B7A:  CLRF   x28
06B7C:  CLRF   x27
06B7E:  CLRF   x26
06B80:  MOVLW  0A
06B82:  MOVWF  x25
06B84:  MOVLB  0
06B86:  CALL   5BC8
06B8A:  MOVFF  03,420
06B8E:  MOVFF  02,41F
06B92:  MOVFF  01,41E
06B96:  MOVFF  00,41D
06B9A:  MOVLB  4
06B9C:  DECFSZ x1B,F
06B9E:  BRA    6BA4
06BA0:  BRA    6BAA
06BA2:  MOVLB  0
06BA4:  MOVLB  0
06BA6:  GOTO   6A78
06BAA:  MOVLB  0
06BAC:  GOTO   7854 (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01468:  MOVLW  04
0146A:  MOVWF  FEA
0146C:  MOVLW  FB
0146E:  MOVWF  FE9
01470:  MOVF   FEF,W
01472:  BTFSC  FD8.2
01474:  GOTO   1494
01478:  MOVLW  05
0147A:  MOVWF  01
0147C:  CLRF   00
0147E:  DECFSZ 00,F
01480:  BRA    147E
01482:  DECFSZ 01,F
01484:  BRA    147C
01486:  MOVLW  2E
01488:  MOVWF  00
0148A:  DECFSZ 00,F
0148C:  BRA    148A
0148E:  BRA    1490
01490:  DECFSZ FEF,F
01492:  BRA    1478
01494:  RETURN 0
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
0386E:  BTFSS  FA6.4
03870:  GOTO   386E
03874:  MOVLB  F
03876:  MOVWF  x29
03878:  MOVLB  0
0387A:  GOTO   38B0 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01496:  BCF    F93.6
01498:  BCF    F8A.6
0149A:  MOVLW  08
0149C:  MOVWF  01
0149E:  BRA    14A0
014A0:  NOP   
014A2:  BSF    01.7
014A4:  GOTO   14CC
014A8:  BCF    01.7
014AA:  MOVLB  4
014AC:  RRCF   xE6,F
014AE:  MOVLB  0
014B0:  BTFSC  FD8.0
014B2:  BSF    F8A.6
014B4:  BTFSS  FD8.0
014B6:  BCF    F8A.6
014B8:  BSF    01.6
014BA:  GOTO   14CC
014BE:  BCF    01.6
014C0:  DECFSZ 01,F
014C2:  GOTO   14AA
014C6:  BRA    14C8
014C8:  NOP   
014CA:  BSF    F8A.6
014CC:  MOVLW  84
014CE:  MOVWF  FE9
014D0:  DECFSZ FE9,F
014D2:  GOTO   14D0
014D6:  BRA    14D8
014D8:  NOP   
014DA:  BTFSC  01.7
014DC:  GOTO   14A8
014E0:  BTFSC  01.6
014E2:  GOTO   14BE
014E6:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
0161C:  MOVF   FC9,W
0161E:  MOVFF  51D,FC9
01622:  RRCF   FC7,W
01624:  BTFSS  FD8.0
01626:  GOTO   1622
0162A:  MOVFF  FC9,00
0162E:  RETURN 0
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
03E5C:  MOVLB  3
03E5E:  MOVF   x9F,W
03E60:  SUBLW  10
03E62:  BTFSS  FD8.2
03E64:  BRA    3E6C
03E66:  MOVLB  0
03E68:  GOTO   3E86
03E6C:  MOVWF  xA1
03E6E:  MOVLB  0
03E70:  MOVLB  3
03E72:  RLCF   x9D,F
03E74:  RLCF   x9E,F
03E76:  DECFSZ xA1,F
03E78:  BRA    3E7E
03E7A:  BRA    3E84
03E7C:  MOVLB  0
03E7E:  MOVLB  0
03E80:  GOTO   3E70
03E84:  MOVLB  0
03E86:  BSF    F93.4
03E88:  BCF    F93.5
03E8A:  BCF    F93.2
03E8C:  BCF    F8A.2
03E8E:  MOVFF  39F,3A1
03E92:  MOVLB  3
03E94:  BTFSS  x9E.7
03E96:  BCF    F8A.5
03E98:  BTFSC  x9E.7
03E9A:  BSF    F8A.5
03E9C:  RLCF   x9D,F
03E9E:  RLCF   x9E,F
03EA0:  BSF    F8A.2
03EA2:  RLCF   01,F
03EA4:  RLCF   02,F
03EA6:  BTFSS  F81.4
03EA8:  BCF    01.0
03EAA:  BTFSC  F81.4
03EAC:  BSF    01.0
03EAE:  BCF    F8A.2
03EB0:  DECFSZ xA1,F
03EB2:  BRA    3EB8
03EB4:  BRA    3EBE
03EB6:  MOVLB  0
03EB8:  MOVLB  0
03EBA:  GOTO   3E92
03EBE:  MOVLB  0
03EC0:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... //#include "../lib/device/mt25q.h"
.................... 
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  25,F
000D8:  BTFSC  FD8.0
000DA:  INCF   26,F
000DC:  BTFSC  FD8.2
000DE:  INCF   27,F
000E0:  BTFSC  FD8.2
000E2:  INCF   28,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02442:  MOVFF  25,00
02446:  MOVFF  26,01
0244A:  MOVFF  27,02
0244E:  MOVFF  28,03
02452:  GOTO   30CE (RETURN)
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/communication/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  1C.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   4D,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   4D,W
0014C:  INCF   4D,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  2D
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,523
00160:  MOVFF  FE9,522
00164:  GOTO   010A
00168:  MOVFF  523,FEA
0016C:  MOVFF  522,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
0157A:  MOVLW  7A
0157C:  MOVWF  FF6
0157E:  MOVLW  01
01580:  MOVWF  FF7
01582:  MOVLW  00
01584:  MOVWF  FF8
01586:  CALL   14E8
....................    enable_interrupts(INT_RDA3);
0158A:  BSF    F61.5
....................    enable_interrupts(global);
0158C:  MOVLW  C0
0158E:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01590:  MOVLW  8C
01592:  MOVWF  FF6
01594:  MOVLW  01
01596:  MOVWF  FF7
01598:  MOVLW  00
0159A:  MOVWF  FF8
0159C:  CALL   14E8
015A0:  GOTO   81B4 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
03830:  MOVFF  385,03
03834:  MOVLB  3
03836:  MOVF   x84,W
03838:  MOVWF  FE9
0383A:  MOVFF  03,FEA
0383E:  MOVFF  FEF,386
03842:  MOVFF  383,FEA
03846:  MOVFF  382,FE9
0384A:  CLRF   00
0384C:  CLRF   02
0384E:  MOVFF  386,01
03852:  MOVLB  0
03854:  GOTO   380A
....................    *receive_signal_size = 0;
03858:  MOVFF  385,03
0385C:  MOVLB  3
0385E:  MOVF   x84,W
03860:  MOVWF  FE9
03862:  MOVFF  03,FEA
03866:  CLRF   FEF
03868:  MOVLB  0
0386A:  GOTO   824E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // SerialCommunication
.................... //#include "../lib/communication/communication_driver.h"
.................... 
.................... #include "../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
062A4:  MOVF   xDF,W
062A6:  SUBWF  xDE,W
062A8:  BTFSS  FD8.2
062AA:  GOTO   62CE
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
062AE:  MOVLW  B4
062B0:  MOVWF  FF6
062B2:  MOVLW  01
062B4:  MOVWF  FF7
062B6:  MOVLW  00
062B8:  MOVWF  FF8
062BA:  CALL   14E8
....................       return 0x00;
062BE:  MOVLW  00
062C0:  MOVWF  01
062C2:  MOVLW  00
062C4:  MOVWF  02
062C6:  GOTO   62FA
....................    }
062CA:  GOTO   62FA
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
062CE:  MOVFF  DE,415
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
062D2:  MOVLW  01
062D4:  ADDWF  xDE,W
062D6:  ANDLW  0F
062D8:  MOVWF  xDE
....................       return &smf_queue.smf_data[current_head];
062DA:  MOVLB  4
062DC:  MOVF   x15,W
062DE:  MULLW  09
062E0:  MOVF   FF3,W
062E2:  CLRF   03
062E4:  ADDLW  4E
062E6:  MOVWF  01
062E8:  MOVLW  00
062EA:  ADDWFC 03,F
062EC:  MOVF   01,W
062EE:  MOVWF  01
062F0:  MOVF   03,W
062F2:  MOVWF  02
062F4:  MOVLB  0
062F6:  GOTO   62FA
....................    }
062FA:  GOTO   6C26 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
060A8:  MOVF   xDF,W
060AA:  SUBWF  xDE,W
060AC:  BTFSC  FD8.2
060AE:  GOTO   60B8
060B2:  MOVLW  00
060B4:  GOTO   60BA
060B8:  MOVLW  01
060BA:  MOVWF  01
060BC:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
062FE:  MOVLB  4
06300:  CLRF   x1D
06302:  CLRF   x1E
06304:  CLRF   x1F
06306:  CLRF   x20
06308:  CLRF   x21
0630A:  CLRF   x22
0630C:  CLRF   x23
0630E:  CLRF   x24
06310:  CLRF   x25
....................    
....................    if (mis_type == MEAURE_DATA)
06312:  MOVF   x1C,F
06314:  BTFSC  FD8.2
06316:  BRA    631E
06318:  MOVLB  0
0631A:  GOTO   6344
0631E:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
06320:  MOVLW  04
06322:  MOVLB  4
06324:  MOVWF  x20
06326:  MOVLW  EC
06328:  MOVWF  x1F
0632A:  CLRF   x1E
0632C:  CLRF   x1D
....................       mis_struct.end_address     = 0x056BFFFF;
0632E:  MOVLW  05
06330:  MOVWF  x24
06332:  MOVLW  6B
06334:  MOVWF  x23
06336:  SETF   x22
06338:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000000;
0633A:  MOVLW  80
0633C:  MOVWF  x25
0633E:  MOVLB  0
....................    }
06340:  GOTO   6390
....................    else if (mis_type == PICLOG_DATA)
06344:  MOVLB  4
06346:  DECFSZ x1C,W
06348:  BRA    634E
0634A:  BRA    6354
0634C:  MOVLB  0
0634E:  MOVLB  0
06350:  GOTO   637A
06354:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
06356:  MOVLW  04
06358:  MOVLB  4
0635A:  MOVWF  x20
0635C:  MOVLW  DC
0635E:  MOVWF  x1F
06360:  CLRF   x1E
06362:  CLRF   x1D
....................       mis_struct.end_address     = 0x04EBFFFF;
06364:  MOVLW  04
06366:  MOVWF  x24
06368:  MOVLW  EB
0636A:  MOVWF  x23
0636C:  SETF   x22
0636E:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000001;  
06370:  MOVLW  81
06372:  MOVWF  x25
06374:  MOVLB  0
....................    }
06376:  GOTO   6390
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
0637A:  MOVLB  4
0637C:  SETF   x20
0637E:  SETF   x1F
06380:  SETF   x1E
06382:  SETF   x1D
....................       mis_struct.end_address     = 0xFFFFFFFF;
06384:  SETF   x24
06386:  SETF   x23
06388:  SETF   x22
0638A:  SETF   x21
....................       mis_struct.mission_flag    = 0b11111111; 
0638C:  SETF   x25
0638E:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
06390:  MOVLW  1D
06392:  MOVWF  01
06394:  MOVLW  04
06396:  MOVWF  02
06398:  GOTO   6C54 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... 
.................... void smf_write(void);
.................... 
.................... 
.................... void smf_read(void);
.................... 
.................... 
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #include "smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... #include "mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02456:  MOVLB  4
02458:  MOVF   xFB,W
0245A:  XORLW  00
0245C:  MOVLB  0
0245E:  BTFSC  FD8.2
02460:  GOTO   2470
02464:  XORLW  01
02466:  BTFSC  FD8.2
02468:  GOTO   24D2
0246C:  GOTO   2534
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02470:  MOVLB  5
02472:  CLRF   x04
02474:  CLRF   x03
02476:  MOVLB  0
02478:  MOVLB  5
0247A:  MOVF   x04,W
0247C:  SUBWF  x02,W
0247E:  BTFSC  FD8.0
02480:  BRA    2488
02482:  MOVLB  0
02484:  GOTO   24CE
02488:  MOVLB  0
0248A:  BTFSS  FD8.2
0248C:  GOTO   24A2
02490:  MOVLB  5
02492:  MOVF   x01,W
02494:  SUBWF  x03,W
02496:  BTFSS  FD8.0
02498:  BRA    24A0
0249A:  MOVLB  0
0249C:  GOTO   24CE
024A0:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
024A2:  MOVLB  4
024A4:  MOVF   xFF,W
024A6:  MOVLB  5
024A8:  ADDWF  x03,W
024AA:  MOVWF  FE9
024AC:  MOVF   x00,W
024AE:  ADDWFC x04,W
024B0:  MOVWF  FEA
024B2:  MOVFF  FEF,507
024B6:  MOVFF  507,51D
024BA:  MOVLB  0
024BC:  CALL   161C
024C0:  MOVLB  5
024C2:  INCF   x03,F
024C4:  BTFSC  FD8.2
024C6:  INCF   x04,F
024C8:  MOVLB  0
024CA:  GOTO   2478
....................          break;
024CE:  GOTO   2538
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
024D2:  MOVLB  5
024D4:  CLRF   x06
024D6:  CLRF   x05
024D8:  MOVLB  0
024DA:  MOVLB  5
024DC:  MOVF   x06,W
024DE:  SUBWF  x02,W
024E0:  BTFSC  FD8.0
024E2:  BRA    24EA
024E4:  MOVLB  0
024E6:  GOTO   2530
024EA:  MOVLB  0
024EC:  BTFSS  FD8.2
024EE:  GOTO   2504
024F2:  MOVLB  5
024F4:  MOVF   x01,W
024F6:  SUBWF  x05,W
024F8:  BTFSS  FD8.0
024FA:  BRA    2502
024FC:  MOVLB  0
024FE:  GOTO   2530
02502:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02504:  MOVLB  4
02506:  MOVF   xFF,W
02508:  MOVLB  5
0250A:  ADDWF  x05,W
0250C:  MOVWF  FE9
0250E:  MOVF   x00,W
02510:  ADDWFC x06,W
02512:  MOVWF  FEA
02514:  MOVFF  FEF,507
02518:  MOVFF  507,51D
0251C:  MOVLB  0
0251E:  CALL   161C
02522:  MOVLB  5
02524:  INCF   x05,F
02526:  BTFSC  FD8.2
02528:  INCF   x06,F
0252A:  MOVLB  0
0252C:  GOTO   24DA
....................          break;
02530:  GOTO   2538
....................          
....................       default:
....................          break;
02534:  GOTO   2538
....................    }
....................    return;
02538:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01630:  MOVLB  5
01632:  MOVF   x01,W
01634:  XORLW  00
01636:  MOVLB  0
01638:  BTFSC  FD8.2
0163A:  GOTO   164A
0163E:  XORLW  01
01640:  BTFSC  FD8.2
01642:  GOTO   1746
01646:  GOTO   1842
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0164A:  MOVLB  5
0164C:  CLRF   x10
0164E:  CLRF   x0F
01650:  MOVLB  0
01652:  MOVLB  5
01654:  MOVF   x10,W
01656:  SUBWF  x08,W
01658:  BTFSC  FD8.0
0165A:  BRA    1662
0165C:  MOVLB  0
0165E:  GOTO   16A6
01662:  MOVLB  0
01664:  BTFSS  FD8.2
01666:  GOTO   167C
0166A:  MOVLB  5
0166C:  MOVF   x07,W
0166E:  SUBWF  x0F,W
01670:  BTFSS  FD8.0
01672:  BRA    167A
01674:  MOVLB  0
01676:  GOTO   16A6
0167A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0167C:  MOVLB  5
0167E:  MOVF   x05,W
01680:  ADDWF  x0F,W
01682:  MOVWF  FE9
01684:  MOVF   x06,W
01686:  ADDWFC x10,W
01688:  MOVWF  FEA
0168A:  MOVFF  FEF,51B
0168E:  MOVFF  51B,51D
01692:  MOVLB  0
01694:  CALL   161C
01698:  MOVLB  5
0169A:  INCF   x0F,F
0169C:  BTFSC  FD8.2
0169E:  INCF   x10,F
016A0:  MOVLB  0
016A2:  GOTO   1652
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
016A6:  MOVLB  5
016A8:  CLRF   x14
016AA:  CLRF   x13
016AC:  CLRF   x12
016AE:  CLRF   x11
016B0:  MOVLB  0
016B2:  MOVLB  5
016B4:  MOVF   x14,W
016B6:  SUBWF  x0E,W
016B8:  BTFSC  FD8.0
016BA:  BRA    16C2
016BC:  MOVLB  0
016BE:  GOTO   1742
016C2:  MOVLB  0
016C4:  BTFSS  FD8.2
016C6:  GOTO   170C
016CA:  MOVLB  5
016CC:  MOVF   x13,W
016CE:  SUBWF  x0D,W
016D0:  BTFSC  FD8.0
016D2:  BRA    16DA
016D4:  MOVLB  0
016D6:  GOTO   1742
016DA:  MOVLB  0
016DC:  BTFSS  FD8.2
016DE:  GOTO   170C
016E2:  MOVLB  5
016E4:  MOVF   x12,W
016E6:  SUBWF  x0C,W
016E8:  BTFSC  FD8.0
016EA:  BRA    16F2
016EC:  MOVLB  0
016EE:  GOTO   1742
016F2:  MOVLB  0
016F4:  BTFSS  FD8.2
016F6:  GOTO   170C
016FA:  MOVLB  5
016FC:  MOVF   x0B,W
016FE:  SUBWF  x11,W
01700:  BTFSS  FD8.0
01702:  BRA    170A
01704:  MOVLB  0
01706:  GOTO   1742
0170A:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0170C:  MOVLB  5
0170E:  MOVF   x09,W
01710:  ADDWF  x11,W
01712:  MOVWF  FE9
01714:  MOVF   x0A,W
01716:  ADDWFC x12,W
01718:  MOVWF  FEA
0171A:  MOVLW  01
0171C:  MOVWF  x1D
0171E:  MOVLB  0
01720:  CALL   161C
01724:  MOVF   01,W
01726:  MOVFF  00,FEF
0172A:  MOVLW  01
0172C:  MOVLB  5
0172E:  ADDWF  x11,F
01730:  BTFSC  FD8.0
01732:  INCF   x12,F
01734:  BTFSC  FD8.2
01736:  INCF   x13,F
01738:  BTFSC  FD8.2
0173A:  INCF   x14,F
0173C:  MOVLB  0
0173E:  GOTO   16B2
....................          break;
01742:  GOTO   1846
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01746:  MOVLB  5
01748:  CLRF   x16
0174A:  CLRF   x15
0174C:  MOVLB  0
0174E:  MOVLB  5
01750:  MOVF   x16,W
01752:  SUBWF  x08,W
01754:  BTFSC  FD8.0
01756:  BRA    175E
01758:  MOVLB  0
0175A:  GOTO   17A2
0175E:  MOVLB  0
01760:  BTFSS  FD8.2
01762:  GOTO   1778
01766:  MOVLB  5
01768:  MOVF   x07,W
0176A:  SUBWF  x15,W
0176C:  BTFSS  FD8.0
0176E:  BRA    1776
01770:  MOVLB  0
01772:  GOTO   17A2
01776:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
01778:  MOVLB  5
0177A:  MOVF   x05,W
0177C:  ADDWF  x15,W
0177E:  MOVWF  FE9
01780:  MOVF   x06,W
01782:  ADDWFC x16,W
01784:  MOVWF  FEA
01786:  MOVFF  FEF,51B
0178A:  MOVFF  51B,51D
0178E:  MOVLB  0
01790:  CALL   161C
01794:  MOVLB  5
01796:  INCF   x15,F
01798:  BTFSC  FD8.2
0179A:  INCF   x16,F
0179C:  MOVLB  0
0179E:  GOTO   174E
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
017A2:  MOVLB  5
017A4:  CLRF   x1A
017A6:  CLRF   x19
017A8:  CLRF   x18
017AA:  CLRF   x17
017AC:  MOVLB  0
017AE:  MOVLB  5
017B0:  MOVF   x1A,W
017B2:  SUBWF  x0E,W
017B4:  BTFSC  FD8.0
017B6:  BRA    17BE
017B8:  MOVLB  0
017BA:  GOTO   183E
017BE:  MOVLB  0
017C0:  BTFSS  FD8.2
017C2:  GOTO   1808
017C6:  MOVLB  5
017C8:  MOVF   x19,W
017CA:  SUBWF  x0D,W
017CC:  BTFSC  FD8.0
017CE:  BRA    17D6
017D0:  MOVLB  0
017D2:  GOTO   183E
017D6:  MOVLB  0
017D8:  BTFSS  FD8.2
017DA:  GOTO   1808
017DE:  MOVLB  5
017E0:  MOVF   x18,W
017E2:  SUBWF  x0C,W
017E4:  BTFSC  FD8.0
017E6:  BRA    17EE
017E8:  MOVLB  0
017EA:  GOTO   183E
017EE:  MOVLB  0
017F0:  BTFSS  FD8.2
017F2:  GOTO   1808
017F6:  MOVLB  5
017F8:  MOVF   x0B,W
017FA:  SUBWF  x17,W
017FC:  BTFSS  FD8.0
017FE:  BRA    1806
01800:  MOVLB  0
01802:  GOTO   183E
01806:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
01808:  MOVLB  5
0180A:  MOVF   x09,W
0180C:  ADDWF  x17,W
0180E:  MOVWF  FE9
01810:  MOVF   x0A,W
01812:  ADDWFC x18,W
01814:  MOVWF  FEA
01816:  MOVLW  01
01818:  MOVWF  x1D
0181A:  MOVLB  0
0181C:  CALL   161C
01820:  MOVF   01,W
01822:  MOVFF  00,FEF
01826:  MOVLW  01
01828:  MOVLB  5
0182A:  ADDWF  x17,F
0182C:  BTFSC  FD8.0
0182E:  INCF   x18,F
01830:  BTFSC  FD8.2
01832:  INCF   x19,F
01834:  BTFSC  FD8.2
01836:  INCF   x1A,F
01838:  MOVLB  0
0183A:  GOTO   17AE
....................          break;
0183E:  GOTO   1846
....................    
....................          
....................       default:
....................          break;
01842:  GOTO   1846
....................    }
....................    return;
01846:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0253A:  MOVLB  4
0253C:  MOVF   xFB,W
0253E:  XORLW  00
02540:  MOVLB  0
02542:  BTFSC  FD8.2
02544:  GOTO   2554
02548:  XORLW  01
0254A:  BTFSC  FD8.2
0254C:  GOTO   25F6
02550:  GOTO   2698
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02554:  MOVLB  5
02556:  CLRF   x06
02558:  MOVLB  0
0255A:  MOVLB  5
0255C:  MOVF   x01,W
0255E:  SUBWF  x06,W
02560:  BTFSS  FD8.0
02562:  BRA    256A
02564:  MOVLB  0
02566:  GOTO   2596
0256A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0256C:  MOVLB  5
0256E:  MOVF   x06,W
02570:  MOVLB  4
02572:  ADDWF  xFF,W
02574:  MOVWF  FE9
02576:  MOVLW  00
02578:  MOVLB  5
0257A:  ADDWFC x00,W
0257C:  MOVWF  FEA
0257E:  MOVFF  FEF,50C
02582:  MOVFF  50C,51D
02586:  MOVLB  0
02588:  CALL   161C
0258C:  MOVLB  5
0258E:  INCF   x06,F
02590:  MOVLB  0
02592:  GOTO   255A
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02596:  MOVLB  5
02598:  CLRF   x08
0259A:  CLRF   x07
0259C:  MOVLB  0
0259E:  MOVLB  5
025A0:  MOVF   x08,W
025A2:  SUBWF  x05,W
025A4:  BTFSC  FD8.0
025A6:  BRA    25AE
025A8:  MOVLB  0
025AA:  GOTO   25F2
025AE:  MOVLB  0
025B0:  BTFSS  FD8.2
025B2:  GOTO   25C8
025B6:  MOVLB  5
025B8:  MOVF   x04,W
025BA:  SUBWF  x07,W
025BC:  BTFSS  FD8.0
025BE:  BRA    25C6
025C0:  MOVLB  0
025C2:  GOTO   25F2
025C6:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
025C8:  MOVLB  5
025CA:  MOVF   x02,W
025CC:  ADDWF  x07,W
025CE:  MOVWF  FE9
025D0:  MOVF   x03,W
025D2:  ADDWFC x08,W
025D4:  MOVWF  FEA
025D6:  MOVFF  FEF,50C
025DA:  MOVFF  50C,51D
025DE:  MOVLB  0
025E0:  CALL   161C
025E4:  MOVLB  5
025E6:  INCF   x07,F
025E8:  BTFSC  FD8.2
025EA:  INCF   x08,F
025EC:  MOVLB  0
025EE:  GOTO   259E
....................          break;
025F2:  GOTO   269C
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
025F6:  MOVLB  5
025F8:  CLRF   x09
025FA:  MOVLB  0
025FC:  MOVLB  5
025FE:  MOVF   x01,W
02600:  SUBWF  x09,W
02602:  BTFSS  FD8.0
02604:  BRA    260C
02606:  MOVLB  0
02608:  GOTO   2638
0260C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0260E:  MOVLB  5
02610:  MOVF   x09,W
02612:  MOVLB  4
02614:  ADDWF  xFF,W
02616:  MOVWF  FE9
02618:  MOVLW  00
0261A:  MOVLB  5
0261C:  ADDWFC x00,W
0261E:  MOVWF  FEA
02620:  MOVFF  FEF,50C
02624:  MOVFF  50C,51D
02628:  MOVLB  0
0262A:  CALL   161C
0262E:  MOVLB  5
02630:  INCF   x09,F
02632:  MOVLB  0
02634:  GOTO   25FC
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02638:  MOVLB  5
0263A:  CLRF   x0B
0263C:  CLRF   x0A
0263E:  MOVLB  0
02640:  MOVLB  5
02642:  MOVF   x0B,W
02644:  SUBWF  x05,W
02646:  BTFSC  FD8.0
02648:  BRA    2650
0264A:  MOVLB  0
0264C:  GOTO   2694
02650:  MOVLB  0
02652:  BTFSS  FD8.2
02654:  GOTO   266A
02658:  MOVLB  5
0265A:  MOVF   x04,W
0265C:  SUBWF  x0A,W
0265E:  BTFSS  FD8.0
02660:  BRA    2668
02662:  MOVLB  0
02664:  GOTO   2694
02668:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0266A:  MOVLB  5
0266C:  MOVF   x02,W
0266E:  ADDWF  x0A,W
02670:  MOVWF  FE9
02672:  MOVF   x03,W
02674:  ADDWFC x0B,W
02676:  MOVWF  FEA
02678:  MOVFF  FEF,50C
0267C:  MOVFF  50C,51D
02680:  MOVLB  0
02682:  CALL   161C
02686:  MOVLB  5
02688:  INCF   x0A,F
0268A:  BTFSC  FD8.2
0268C:  INCF   x0B,F
0268E:  MOVLB  0
02690:  GOTO   2640
....................          break;
02694:  GOTO   269C
....................          
....................       default:
....................          break;
02698:  GOTO   269C
....................    }
....................    return;
0269C:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0515A:  MOVFF  497,501
0515E:  MOVLW  01
05160:  MOVLB  5
05162:  MOVWF  x02
05164:  MOVLW  0F
05166:  MOVWF  x04
05168:  MOVLW  89
0516A:  MOVWF  x03
0516C:  MOVLB  0
0516E:  CALL   15C8
05172:  MOVFF  497,501
05176:  MOVLB  5
05178:  CLRF   x02
0517A:  MOVLW  0F
0517C:  MOVWF  x04
0517E:  MOVLW  92
05180:  MOVWF  x03
05182:  MOVLB  0
05184:  CALL   15C8
05188:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
0269E:  MOVLW  05
026A0:  MOVLB  4
026A2:  MOVWF  xFF
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
026A4:  MOVFF  4FD,501
026A8:  MOVLB  5
026AA:  CLRF   x02
026AC:  MOVLW  0F
026AE:  MOVWF  x04
026B0:  MOVLW  89
026B2:  MOVWF  x03
026B4:  MOVLB  0
026B6:  CALL   15C8
026BA:  MOVFF  4FD,501
026BE:  MOVLB  5
026C0:  CLRF   x02
026C2:  MOVLW  0F
026C4:  MOVWF  x04
026C6:  MOVLW  92
026C8:  MOVWF  x03
026CA:  MOVLB  0
026CC:  CALL   15C8
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
026D0:  MOVFF  4FE,504
026D4:  MOVFF  4FD,503
026D8:  MOVFF  4FC,502
026DC:  MOVFF  4FB,501
026E0:  MOVLW  04
026E2:  MOVLB  5
026E4:  MOVWF  x06
026E6:  SETF   x05
026E8:  CLRF   x08
026EA:  MOVLW  01
026EC:  MOVWF  x07
026EE:  MOVLW  05
026F0:  MOVWF  x0A
026F2:  CLRF   x09
026F4:  CLRF   x0E
026F6:  CLRF   x0D
026F8:  CLRF   x0C
026FA:  MOVLW  01
026FC:  MOVWF  x0B
026FE:  MOVLB  0
02700:  CALL   1630
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
02704:  MOVFF  4FD,501
02708:  MOVLW  01
0270A:  MOVLB  5
0270C:  MOVWF  x02
0270E:  MOVLW  0F
02710:  MOVWF  x04
02712:  MOVLW  89
02714:  MOVWF  x03
02716:  MOVLB  0
02718:  CALL   15C8
0271C:  MOVFF  4FD,501
02720:  MOVLB  5
02722:  CLRF   x02
02724:  MOVLW  0F
02726:  MOVWF  x04
02728:  MOVLW  92
0272A:  MOVWF  x03
0272C:  MOVLB  0
0272E:  CALL   15C8
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
02732:  MOVLB  5
02734:  MOVF   x00,W
02736:  MOVWF  01
02738:  MOVLB  0
0273A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
....................  
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04624:  MOVLB  3
04626:  MOVF   x93,F
04628:  BTFSC  FD8.2
0462A:  BRA    4632
0462C:  MOVLB  0
0462E:  GOTO   4792
04632:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04634:  MOVLW  06
04636:  MOVLB  3
04638:  MOVWF  x9A
0463A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0463C:  MOVLW  D8
0463E:  MOVLB  3
04640:  MOVWF  x9B
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04642:  MOVFF  398,3A7
04646:  MOVFF  399,3A8
0464A:  CLRF   xA9
0464C:  CLRF   xAA
0464E:  MOVF   xA7,W
04650:  MOVWF  00
04652:  CLRF   01
04654:  CLRF   02
04656:  CLRF   03
04658:  MOVFF  00,39C
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0465C:  MOVFF  397,3A7
04660:  MOVFF  398,3A8
04664:  MOVFF  399,3A9
04668:  CLRF   xAA
0466A:  MOVF   xA7,W
0466C:  MOVWF  00
0466E:  CLRF   01
04670:  CLRF   02
04672:  CLRF   03
04674:  MOVFF  00,39D
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04678:  MOVF   x96,W
0467A:  MOVWF  00
0467C:  CLRF   01
0467E:  CLRF   02
04680:  CLRF   03
04682:  MOVFF  00,39E
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04686:  MOVFF  394,501
0468A:  MOVLB  5
0468C:  CLRF   x02
0468E:  MOVLW  0F
04690:  MOVWF  x04
04692:  MOVLW  89
04694:  MOVWF  x03
04696:  MOVLB  0
04698:  CALL   15C8
0469C:  MOVFF  394,501
046A0:  MOVLB  5
046A2:  CLRF   x02
046A4:  MOVLW  0F
046A6:  MOVWF  x04
046A8:  MOVLW  92
046AA:  MOVWF  x03
046AC:  MOVLB  0
046AE:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
046B2:  MOVFF  395,4FE
046B6:  MOVFF  394,4FD
046BA:  MOVFF  393,4FC
046BE:  MOVFF  392,4FB
046C2:  MOVLW  03
046C4:  MOVLB  5
046C6:  MOVWF  x00
046C8:  MOVLW  9A
046CA:  MOVLB  4
046CC:  MOVWF  xFF
046CE:  MOVLB  5
046D0:  CLRF   x02
046D2:  MOVLW  01
046D4:  MOVWF  x01
046D6:  MOVLB  0
046D8:  CALL   2456
....................       output_high(flash_stream.cs_pin);
046DC:  MOVFF  394,501
046E0:  MOVLW  01
046E2:  MOVLB  5
046E4:  MOVWF  x02
046E6:  MOVLW  0F
046E8:  MOVWF  x04
046EA:  MOVLW  89
046EC:  MOVWF  x03
046EE:  MOVLB  0
046F0:  CALL   15C8
046F4:  MOVFF  394,501
046F8:  MOVLB  5
046FA:  CLRF   x02
046FC:  MOVLW  0F
046FE:  MOVWF  x04
04700:  MOVLW  92
04702:  MOVWF  x03
04704:  MOVLB  0
04706:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0470A:  MOVFF  394,501
0470E:  MOVLB  5
04710:  CLRF   x02
04712:  MOVLW  0F
04714:  MOVWF  x04
04716:  MOVLW  89
04718:  MOVWF  x03
0471A:  MOVLB  0
0471C:  CALL   15C8
04720:  MOVFF  394,501
04724:  MOVLB  5
04726:  CLRF   x02
04728:  MOVLW  0F
0472A:  MOVWF  x04
0472C:  MOVLW  92
0472E:  MOVWF  x03
04730:  MOVLB  0
04732:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04736:  MOVFF  395,4FE
0473A:  MOVFF  394,4FD
0473E:  MOVFF  393,4FC
04742:  MOVFF  392,4FB
04746:  MOVLW  03
04748:  MOVLB  5
0474A:  MOVWF  x00
0474C:  MOVLW  9B
0474E:  MOVLB  4
04750:  MOVWF  xFF
04752:  MOVLB  5
04754:  CLRF   x02
04756:  MOVLW  04
04758:  MOVWF  x01
0475A:  MOVLB  0
0475C:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04760:  MOVFF  394,501
04764:  MOVLW  01
04766:  MOVLB  5
04768:  MOVWF  x02
0476A:  MOVLW  0F
0476C:  MOVWF  x04
0476E:  MOVLW  89
04770:  MOVWF  x03
04772:  MOVLB  0
04774:  CALL   15C8
04778:  MOVFF  394,501
0477C:  MOVLB  5
0477E:  CLRF   x02
04780:  MOVLW  0F
04782:  MOVWF  x04
04784:  MOVLW  92
04786:  MOVWF  x03
04788:  MOVLB  0
0478A:  CALL   15C8
....................    }
0478E:  GOTO   491A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04792:  MOVLB  3
04794:  DECFSZ x93,W
04796:  BRA    479C
04798:  BRA    47A2
0479A:  MOVLB  0
0479C:  MOVLB  0
0479E:  GOTO   491A
047A2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
047A4:  MOVLW  06
047A6:  MOVLB  3
047A8:  MOVWF  x9F
047AA:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
047AC:  MOVLW  DC
047AE:  MOVLB  3
047B0:  MOVWF  xA0
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
047B2:  MOVFF  399,3A7
047B6:  CLRF   xA8
047B8:  CLRF   xA9
047BA:  CLRF   xAA
047BC:  MOVF   xA7,W
047BE:  MOVWF  00
047C0:  CLRF   01
047C2:  CLRF   02
047C4:  CLRF   03
047C6:  MOVFF  00,3A1
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
047CA:  MOVFF  398,3A7
047CE:  MOVFF  399,3A8
047D2:  CLRF   xA9
047D4:  CLRF   xAA
047D6:  MOVF   xA7,W
047D8:  MOVWF  00
047DA:  CLRF   01
047DC:  CLRF   02
047DE:  CLRF   03
047E0:  MOVFF  00,3A2
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
047E4:  MOVFF  397,3A7
047E8:  MOVFF  398,3A8
047EC:  MOVFF  399,3A9
047F0:  CLRF   xAA
047F2:  MOVF   xA7,W
047F4:  MOVWF  00
047F6:  CLRF   01
047F8:  CLRF   02
047FA:  CLRF   03
047FC:  MOVFF  00,3A3
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04800:  MOVF   x96,W
04802:  MOVWF  00
04804:  CLRF   01
04806:  CLRF   02
04808:  CLRF   03
0480A:  MOVFF  00,3A4
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0480E:  MOVFF  394,501
04812:  MOVLB  5
04814:  CLRF   x02
04816:  MOVLW  0F
04818:  MOVWF  x04
0481A:  MOVLW  89
0481C:  MOVWF  x03
0481E:  MOVLB  0
04820:  CALL   15C8
04824:  MOVFF  394,501
04828:  MOVLB  5
0482A:  CLRF   x02
0482C:  MOVLW  0F
0482E:  MOVWF  x04
04830:  MOVLW  92
04832:  MOVWF  x03
04834:  MOVLB  0
04836:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0483A:  MOVFF  395,4FE
0483E:  MOVFF  394,4FD
04842:  MOVFF  393,4FC
04846:  MOVFF  392,4FB
0484A:  MOVLW  03
0484C:  MOVLB  5
0484E:  MOVWF  x00
04850:  MOVLW  9F
04852:  MOVLB  4
04854:  MOVWF  xFF
04856:  MOVLB  5
04858:  CLRF   x02
0485A:  MOVLW  01
0485C:  MOVWF  x01
0485E:  MOVLB  0
04860:  CALL   2456
....................       output_high(flash_stream.cs_pin);
04864:  MOVFF  394,501
04868:  MOVLW  01
0486A:  MOVLB  5
0486C:  MOVWF  x02
0486E:  MOVLW  0F
04870:  MOVWF  x04
04872:  MOVLW  89
04874:  MOVWF  x03
04876:  MOVLB  0
04878:  CALL   15C8
0487C:  MOVFF  394,501
04880:  MOVLB  5
04882:  CLRF   x02
04884:  MOVLW  0F
04886:  MOVWF  x04
04888:  MOVLW  92
0488A:  MOVWF  x03
0488C:  MOVLB  0
0488E:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04892:  MOVFF  394,501
04896:  MOVLB  5
04898:  CLRF   x02
0489A:  MOVLW  0F
0489C:  MOVWF  x04
0489E:  MOVLW  89
048A0:  MOVWF  x03
048A2:  MOVLB  0
048A4:  CALL   15C8
048A8:  MOVFF  394,501
048AC:  MOVLB  5
048AE:  CLRF   x02
048B0:  MOVLW  0F
048B2:  MOVWF  x04
048B4:  MOVLW  92
048B6:  MOVWF  x03
048B8:  MOVLB  0
048BA:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
048BE:  MOVFF  395,4FE
048C2:  MOVFF  394,4FD
048C6:  MOVFF  393,4FC
048CA:  MOVFF  392,4FB
048CE:  MOVLW  03
048D0:  MOVLB  5
048D2:  MOVWF  x00
048D4:  MOVLW  A0
048D6:  MOVLB  4
048D8:  MOVWF  xFF
048DA:  MOVLB  5
048DC:  CLRF   x02
048DE:  MOVLW  05
048E0:  MOVWF  x01
048E2:  MOVLB  0
048E4:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
048E8:  MOVFF  394,501
048EC:  MOVLW  01
048EE:  MOVLB  5
048F0:  MOVWF  x02
048F2:  MOVLW  0F
048F4:  MOVWF  x04
048F6:  MOVLW  89
048F8:  MOVWF  x03
048FA:  MOVLB  0
048FC:  CALL   15C8
04900:  MOVFF  394,501
04904:  MOVLB  5
04906:  CLRF   x02
04908:  MOVLW  0F
0490A:  MOVWF  x04
0490C:  MOVLW  92
0490E:  MOVWF  x03
04910:  MOVLB  0
04912:  CALL   15C8
....................    }
04916:  GOTO   491A
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0491A:  MOVLB  3
0491C:  CLRF   xA5
0491E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04920:  MOVFF  395,4FE
04924:  MOVFF  394,4FD
04928:  MOVFF  393,4FC
0492C:  MOVFF  392,4FB
04930:  CALL   269E
04934:  MOVF   01,W
04936:  ANDLW  01
04938:  SUBLW  01
0493A:  BTFSS  FD8.2
0493C:  GOTO   498E
....................       if(timeout_counter > 10)
04940:  MOVLB  3
04942:  MOVF   xA5,W
04944:  SUBLW  0A
04946:  BTFSS  FD8.0
04948:  BRA    4950
0494A:  MOVLB  0
0494C:  GOTO   4962
04950:  MOVLB  0
....................          delay_ms(200);
04952:  MOVLW  C8
04954:  MOVLB  4
04956:  MOVWF  xFB
04958:  MOVLB  0
0495A:  CALL   1468
0495E:  GOTO   496E
....................       else
....................          delay_ms(10);   
04962:  MOVLW  0A
04964:  MOVLB  4
04966:  MOVWF  xFB
04968:  MOVLB  0
0496A:  CALL   1468
....................       
....................       if(timeout_counter > 100){
0496E:  MOVLB  3
04970:  MOVF   xA5,W
04972:  SUBLW  64
04974:  BTFSS  FD8.0
04976:  BRA    497E
04978:  MOVLB  0
0497A:  GOTO   4984
0497E:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
04980:  GOTO   498E
....................       }  
....................       timeout_counter++;
04984:  MOVLB  3
04986:  INCF   xA5,F
04988:  MOVLB  0
0498A:  GOTO   4920
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
0498E:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02AD4:  MOVLB  4
02AD6:  MOVF   xE4,F
02AD8:  BTFSC  FD8.2
02ADA:  BRA    2AE2
02ADC:  MOVLB  0
02ADE:  GOTO   2C42
02AE2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02AE4:  MOVLW  06
02AE6:  MOVLB  4
02AE8:  MOVWF  xEB
02AEA:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
02AEC:  MOVLW  20
02AEE:  MOVLB  4
02AF0:  MOVWF  xEC
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02AF2:  MOVFF  4E9,4F8
02AF6:  MOVFF  4EA,4F9
02AFA:  CLRF   xFA
02AFC:  CLRF   xFB
02AFE:  MOVF   xF8,W
02B00:  MOVWF  00
02B02:  CLRF   01
02B04:  CLRF   02
02B06:  CLRF   03
02B08:  MOVFF  00,4ED
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02B0C:  MOVFF  4E8,4F8
02B10:  MOVFF  4E9,4F9
02B14:  MOVFF  4EA,4FA
02B18:  CLRF   xFB
02B1A:  MOVF   xF8,W
02B1C:  MOVWF  00
02B1E:  CLRF   01
02B20:  CLRF   02
02B22:  CLRF   03
02B24:  MOVFF  00,4EE
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02B28:  MOVF   xE7,W
02B2A:  MOVWF  00
02B2C:  CLRF   01
02B2E:  CLRF   02
02B30:  CLRF   03
02B32:  MOVFF  00,4EF
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02B36:  MOVFF  4E5,501
02B3A:  MOVLB  5
02B3C:  CLRF   x02
02B3E:  MOVLW  0F
02B40:  MOVWF  x04
02B42:  MOVLW  89
02B44:  MOVWF  x03
02B46:  MOVLB  0
02B48:  CALL   15C8
02B4C:  MOVFF  4E5,501
02B50:  MOVLB  5
02B52:  CLRF   x02
02B54:  MOVLW  0F
02B56:  MOVWF  x04
02B58:  MOVLW  92
02B5A:  MOVWF  x03
02B5C:  MOVLB  0
02B5E:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02B62:  MOVFF  4E6,4FE
02B66:  MOVFF  4E5,4FD
02B6A:  MOVFF  4E4,4FC
02B6E:  MOVFF  4E3,4FB
02B72:  MOVLW  04
02B74:  MOVLB  5
02B76:  MOVWF  x00
02B78:  MOVLW  EB
02B7A:  MOVLB  4
02B7C:  MOVWF  xFF
02B7E:  MOVLB  5
02B80:  CLRF   x02
02B82:  MOVLW  01
02B84:  MOVWF  x01
02B86:  MOVLB  0
02B88:  CALL   2456
....................       output_high(flash_stream.cs_pin);
02B8C:  MOVFF  4E5,501
02B90:  MOVLW  01
02B92:  MOVLB  5
02B94:  MOVWF  x02
02B96:  MOVLW  0F
02B98:  MOVWF  x04
02B9A:  MOVLW  89
02B9C:  MOVWF  x03
02B9E:  MOVLB  0
02BA0:  CALL   15C8
02BA4:  MOVFF  4E5,501
02BA8:  MOVLB  5
02BAA:  CLRF   x02
02BAC:  MOVLW  0F
02BAE:  MOVWF  x04
02BB0:  MOVLW  92
02BB2:  MOVWF  x03
02BB4:  MOVLB  0
02BB6:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02BBA:  MOVFF  4E5,501
02BBE:  MOVLB  5
02BC0:  CLRF   x02
02BC2:  MOVLW  0F
02BC4:  MOVWF  x04
02BC6:  MOVLW  89
02BC8:  MOVWF  x03
02BCA:  MOVLB  0
02BCC:  CALL   15C8
02BD0:  MOVFF  4E5,501
02BD4:  MOVLB  5
02BD6:  CLRF   x02
02BD8:  MOVLW  0F
02BDA:  MOVWF  x04
02BDC:  MOVLW  92
02BDE:  MOVWF  x03
02BE0:  MOVLB  0
02BE2:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
02BE6:  MOVFF  4E6,4FE
02BEA:  MOVFF  4E5,4FD
02BEE:  MOVFF  4E4,4FC
02BF2:  MOVFF  4E3,4FB
02BF6:  MOVLW  04
02BF8:  MOVLB  5
02BFA:  MOVWF  x00
02BFC:  MOVLW  EC
02BFE:  MOVLB  4
02C00:  MOVWF  xFF
02C02:  MOVLB  5
02C04:  CLRF   x02
02C06:  MOVLW  04
02C08:  MOVWF  x01
02C0A:  MOVLB  0
02C0C:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02C10:  MOVFF  4E5,501
02C14:  MOVLW  01
02C16:  MOVLB  5
02C18:  MOVWF  x02
02C1A:  MOVLW  0F
02C1C:  MOVWF  x04
02C1E:  MOVLW  89
02C20:  MOVWF  x03
02C22:  MOVLB  0
02C24:  CALL   15C8
02C28:  MOVFF  4E5,501
02C2C:  MOVLB  5
02C2E:  CLRF   x02
02C30:  MOVLW  0F
02C32:  MOVWF  x04
02C34:  MOVLW  92
02C36:  MOVWF  x03
02C38:  MOVLB  0
02C3A:  CALL   15C8
....................    }
02C3E:  GOTO   2DCA
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02C42:  MOVLB  4
02C44:  DECFSZ xE4,W
02C46:  BRA    2C4C
02C48:  BRA    2C52
02C4A:  MOVLB  0
02C4C:  MOVLB  0
02C4E:  GOTO   2DCA
02C52:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
02C54:  MOVLW  06
02C56:  MOVLB  4
02C58:  MOVWF  xF0
02C5A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
02C5C:  MOVLW  21
02C5E:  MOVLB  4
02C60:  MOVWF  xF1
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
02C62:  MOVFF  4EA,4F8
02C66:  CLRF   xF9
02C68:  CLRF   xFA
02C6A:  CLRF   xFB
02C6C:  MOVF   xF8,W
02C6E:  MOVWF  00
02C70:  CLRF   01
02C72:  CLRF   02
02C74:  CLRF   03
02C76:  MOVFF  00,4F2
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02C7A:  MOVFF  4E9,4F8
02C7E:  MOVFF  4EA,4F9
02C82:  CLRF   xFA
02C84:  CLRF   xFB
02C86:  MOVF   xF8,W
02C88:  MOVWF  00
02C8A:  CLRF   01
02C8C:  CLRF   02
02C8E:  CLRF   03
02C90:  MOVFF  00,4F3
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02C94:  MOVFF  4E8,4F8
02C98:  MOVFF  4E9,4F9
02C9C:  MOVFF  4EA,4FA
02CA0:  CLRF   xFB
02CA2:  MOVF   xF8,W
02CA4:  MOVWF  00
02CA6:  CLRF   01
02CA8:  CLRF   02
02CAA:  CLRF   03
02CAC:  MOVFF  00,4F4
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02CB0:  MOVF   xE7,W
02CB2:  MOVWF  00
02CB4:  CLRF   01
02CB6:  CLRF   02
02CB8:  CLRF   03
02CBA:  MOVFF  00,4F5
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02CBE:  MOVFF  4E5,501
02CC2:  MOVLB  5
02CC4:  CLRF   x02
02CC6:  MOVLW  0F
02CC8:  MOVWF  x04
02CCA:  MOVLW  89
02CCC:  MOVWF  x03
02CCE:  MOVLB  0
02CD0:  CALL   15C8
02CD4:  MOVFF  4E5,501
02CD8:  MOVLB  5
02CDA:  CLRF   x02
02CDC:  MOVLW  0F
02CDE:  MOVWF  x04
02CE0:  MOVLW  92
02CE2:  MOVWF  x03
02CE4:  MOVLB  0
02CE6:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02CEA:  MOVFF  4E6,4FE
02CEE:  MOVFF  4E5,4FD
02CF2:  MOVFF  4E4,4FC
02CF6:  MOVFF  4E3,4FB
02CFA:  MOVLW  04
02CFC:  MOVLB  5
02CFE:  MOVWF  x00
02D00:  MOVLW  F0
02D02:  MOVLB  4
02D04:  MOVWF  xFF
02D06:  MOVLB  5
02D08:  CLRF   x02
02D0A:  MOVLW  01
02D0C:  MOVWF  x01
02D0E:  MOVLB  0
02D10:  CALL   2456
....................       output_high(flash_stream.cs_pin);
02D14:  MOVFF  4E5,501
02D18:  MOVLW  01
02D1A:  MOVLB  5
02D1C:  MOVWF  x02
02D1E:  MOVLW  0F
02D20:  MOVWF  x04
02D22:  MOVLW  89
02D24:  MOVWF  x03
02D26:  MOVLB  0
02D28:  CALL   15C8
02D2C:  MOVFF  4E5,501
02D30:  MOVLB  5
02D32:  CLRF   x02
02D34:  MOVLW  0F
02D36:  MOVWF  x04
02D38:  MOVLW  92
02D3A:  MOVWF  x03
02D3C:  MOVLB  0
02D3E:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02D42:  MOVFF  4E5,501
02D46:  MOVLB  5
02D48:  CLRF   x02
02D4A:  MOVLW  0F
02D4C:  MOVWF  x04
02D4E:  MOVLW  89
02D50:  MOVWF  x03
02D52:  MOVLB  0
02D54:  CALL   15C8
02D58:  MOVFF  4E5,501
02D5C:  MOVLB  5
02D5E:  CLRF   x02
02D60:  MOVLW  0F
02D62:  MOVWF  x04
02D64:  MOVLW  92
02D66:  MOVWF  x03
02D68:  MOVLB  0
02D6A:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
02D6E:  MOVFF  4E6,4FE
02D72:  MOVFF  4E5,4FD
02D76:  MOVFF  4E4,4FC
02D7A:  MOVFF  4E3,4FB
02D7E:  MOVLW  04
02D80:  MOVLB  5
02D82:  MOVWF  x00
02D84:  MOVLW  F1
02D86:  MOVLB  4
02D88:  MOVWF  xFF
02D8A:  MOVLB  5
02D8C:  CLRF   x02
02D8E:  MOVLW  05
02D90:  MOVWF  x01
02D92:  MOVLB  0
02D94:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02D98:  MOVFF  4E5,501
02D9C:  MOVLW  01
02D9E:  MOVLB  5
02DA0:  MOVWF  x02
02DA2:  MOVLW  0F
02DA4:  MOVWF  x04
02DA6:  MOVLW  89
02DA8:  MOVWF  x03
02DAA:  MOVLB  0
02DAC:  CALL   15C8
02DB0:  MOVFF  4E5,501
02DB4:  MOVLB  5
02DB6:  CLRF   x02
02DB8:  MOVLW  0F
02DBA:  MOVWF  x04
02DBC:  MOVLW  92
02DBE:  MOVWF  x03
02DC0:  MOVLB  0
02DC2:  CALL   15C8
....................    }
02DC6:  GOTO   2DCA
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
02DCA:  MOVLB  4
02DCC:  CLRF   xF6
02DCE:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
02DD0:  MOVFF  4E6,4FE
02DD4:  MOVFF  4E5,4FD
02DD8:  MOVFF  4E4,4FC
02DDC:  MOVFF  4E3,4FB
02DE0:  CALL   269E
02DE4:  MOVF   01,W
02DE6:  ANDLW  01
02DE8:  SUBLW  01
02DEA:  BTFSS  FD8.2
02DEC:  GOTO   2E3E
....................       if(timeout_counter > 10)
02DF0:  MOVLB  4
02DF2:  MOVF   xF6,W
02DF4:  SUBLW  0A
02DF6:  BTFSS  FD8.0
02DF8:  BRA    2E00
02DFA:  MOVLB  0
02DFC:  GOTO   2E12
02E00:  MOVLB  0
....................          delay_ms(200);
02E02:  MOVLW  C8
02E04:  MOVLB  4
02E06:  MOVWF  xFB
02E08:  MOVLB  0
02E0A:  CALL   1468
02E0E:  GOTO   2E1E
....................       else
....................          delay_ms(10);   
02E12:  MOVLW  0A
02E14:  MOVLB  4
02E16:  MOVWF  xFB
02E18:  MOVLB  0
02E1A:  CALL   1468
....................       
....................       if(timeout_counter > 100){
02E1E:  MOVLB  4
02E20:  MOVF   xF6,W
02E22:  SUBLW  64
02E24:  BTFSS  FD8.0
02E26:  BRA    2E2E
02E28:  MOVLB  0
02E2A:  GOTO   2E34
02E2E:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
02E30:  GOTO   2E3E
....................       }  
....................       timeout_counter++;
02E34:  MOVLB  4
02E36:  INCF   xF6,F
02E38:  MOVLB  0
02E3A:  GOTO   2DD0
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
02E3E:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0649C:  MOVLB  4
0649E:  MOVF   x21,F
064A0:  BTFSC  FD8.2
064A2:  BRA    64AA
064A4:  MOVLB  0
064A6:  GOTO   6596
064AA:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
064AC:  MOVLW  03
064AE:  MOVLB  4
064B0:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
064B2:  MOVFF  426,433
064B6:  MOVFF  427,434
064BA:  CLRF   x35
064BC:  CLRF   x36
064BE:  MOVF   x33,W
064C0:  MOVWF  00
064C2:  CLRF   01
064C4:  CLRF   02
064C6:  CLRF   03
064C8:  MOVFF  00,42A
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
064CC:  MOVFF  425,433
064D0:  MOVFF  426,434
064D4:  MOVFF  427,435
064D8:  CLRF   x36
064DA:  MOVF   x33,W
064DC:  MOVWF  00
064DE:  CLRF   01
064E0:  CLRF   02
064E2:  CLRF   03
064E4:  MOVFF  00,42B
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
064E8:  MOVF   x24,W
064EA:  MOVWF  00
064EC:  CLRF   01
064EE:  CLRF   02
064F0:  CLRF   03
064F2:  MOVFF  00,42C
....................             
....................       output_low(flash_stream.cs_pin);
064F6:  MOVFF  422,501
064FA:  MOVLB  5
064FC:  CLRF   x02
064FE:  MOVLW  0F
06500:  MOVWF  x04
06502:  MOVLW  89
06504:  MOVWF  x03
06506:  MOVLB  0
06508:  CALL   15C8
0650C:  MOVFF  422,501
06510:  MOVLB  5
06512:  CLRF   x02
06514:  MOVLW  0F
06516:  MOVWF  x04
06518:  MOVLW  92
0651A:  MOVWF  x03
0651C:  MOVLB  0
0651E:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
06522:  MOVFF  423,504
06526:  MOVFF  422,503
0652A:  MOVFF  421,502
0652E:  MOVFF  420,501
06532:  MOVLW  04
06534:  MOVLB  5
06536:  MOVWF  x06
06538:  MOVLW  29
0653A:  MOVWF  x05
0653C:  CLRF   x08
0653E:  MOVLW  04
06540:  MOVWF  x07
06542:  MOVLW  04
06544:  MOVWF  x0A
06546:  MOVLW  28
06548:  MOVWF  x09
0654A:  CLRF   x0E
0654C:  CLRF   x0D
0654E:  CLRF   x0C
06550:  MOVLW  01
06552:  MOVWF  x0B
06554:  MOVLB  0
06556:  CALL   1630
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0655A:  MOVLW  02
0655C:  MOVWF  00
0655E:  DECFSZ 00,F
06560:  BRA    655E
06562:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
06564:  MOVFF  422,501
06568:  MOVLW  01
0656A:  MOVLB  5
0656C:  MOVWF  x02
0656E:  MOVLW  0F
06570:  MOVWF  x04
06572:  MOVLW  89
06574:  MOVWF  x03
06576:  MOVLB  0
06578:  CALL   15C8
0657C:  MOVFF  422,501
06580:  MOVLB  5
06582:  CLRF   x02
06584:  MOVLW  0F
06586:  MOVWF  x04
06588:  MOVLW  92
0658A:  MOVWF  x03
0658C:  MOVLB  0
0658E:  CALL   15C8
....................    }
06592:  GOTO   66A6
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
06596:  MOVLB  4
06598:  DECFSZ x21,W
0659A:  BRA    65A0
0659C:  BRA    65A6
0659E:  MOVLB  0
065A0:  MOVLB  0
065A2:  GOTO   66A6
065A6:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
065A8:  MOVLW  13
065AA:  MOVLB  4
065AC:  MOVWF  x2D
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
065AE:  MOVFF  427,433
065B2:  CLRF   x34
065B4:  CLRF   x35
065B6:  CLRF   x36
065B8:  MOVF   x33,W
065BA:  MOVWF  00
065BC:  CLRF   01
065BE:  CLRF   02
065C0:  CLRF   03
065C2:  MOVFF  00,42E
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
065C6:  MOVFF  426,433
065CA:  MOVFF  427,434
065CE:  CLRF   x35
065D0:  CLRF   x36
065D2:  MOVF   x33,W
065D4:  MOVWF  00
065D6:  CLRF   01
065D8:  CLRF   02
065DA:  CLRF   03
065DC:  MOVFF  00,42F
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
065E0:  MOVFF  425,433
065E4:  MOVFF  426,434
065E8:  MOVFF  427,435
065EC:  CLRF   x36
065EE:  MOVF   x33,W
065F0:  MOVWF  00
065F2:  CLRF   01
065F4:  CLRF   02
065F6:  CLRF   03
065F8:  MOVFF  00,430
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
065FC:  MOVF   x24,W
065FE:  MOVWF  00
06600:  CLRF   01
06602:  CLRF   02
06604:  CLRF   03
06606:  MOVFF  00,431
....................    
....................       output_low(flash_stream.cs_pin);
0660A:  MOVFF  422,501
0660E:  MOVLB  5
06610:  CLRF   x02
06612:  MOVLW  0F
06614:  MOVWF  x04
06616:  MOVLW  89
06618:  MOVWF  x03
0661A:  MOVLB  0
0661C:  CALL   15C8
06620:  MOVFF  422,501
06624:  MOVLB  5
06626:  CLRF   x02
06628:  MOVLW  0F
0662A:  MOVWF  x04
0662C:  MOVLW  92
0662E:  MOVWF  x03
06630:  MOVLB  0
06632:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
06636:  MOVFF  423,504
0663A:  MOVFF  422,503
0663E:  MOVFF  421,502
06642:  MOVFF  420,501
06646:  MOVLW  04
06648:  MOVLB  5
0664A:  MOVWF  x06
0664C:  MOVLW  2D
0664E:  MOVWF  x05
06650:  CLRF   x08
06652:  MOVLW  05
06654:  MOVWF  x07
06656:  MOVLW  04
06658:  MOVWF  x0A
0665A:  MOVLW  28
0665C:  MOVWF  x09
0665E:  CLRF   x0E
06660:  CLRF   x0D
06662:  CLRF   x0C
06664:  MOVLW  01
06666:  MOVWF  x0B
06668:  MOVLB  0
0666A:  CALL   1630
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0666E:  MOVLW  02
06670:  MOVWF  00
06672:  DECFSZ 00,F
06674:  BRA    6672
06676:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
06678:  MOVFF  422,501
0667C:  MOVLW  01
0667E:  MOVLB  5
06680:  MOVWF  x02
06682:  MOVLW  0F
06684:  MOVWF  x04
06686:  MOVLW  89
06688:  MOVWF  x03
0668A:  MOVLB  0
0668C:  CALL   15C8
06690:  MOVFF  422,501
06694:  MOVLB  5
06696:  CLRF   x02
06698:  MOVLW  0F
0669A:  MOVWF  x04
0669C:  MOVLW  92
0669E:  MOVWF  x03
066A0:  MOVLB  0
066A2:  CALL   15C8
....................    }
....................    return read_data;
066A6:  MOVLB  4
066A8:  MOVF   x28,W
066AA:  MOVWF  01
066AC:  MOVLB  0
066AE:  GOTO   702A (RETURN)
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
01908:  MOVLB  4
0190A:  MOVF   x96,F
0190C:  BTFSC  FD8.2
0190E:  BRA    1916
01910:  MOVLB  0
01912:  GOTO   1A08
01916:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
01918:  MOVLW  03
0191A:  MOVLB  4
0191C:  MOVWF  xA3
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0191E:  MOVFF  49B,4AD
01922:  MOVFF  49C,4AE
01926:  CLRF   xAF
01928:  CLRF   xB0
0192A:  MOVF   xAD,W
0192C:  MOVWF  00
0192E:  CLRF   01
01930:  CLRF   02
01932:  CLRF   03
01934:  MOVFF  00,4A4
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01938:  MOVFF  49A,4AD
0193C:  MOVFF  49B,4AE
01940:  MOVFF  49C,4AF
01944:  CLRF   xB0
01946:  MOVF   xAD,W
01948:  MOVWF  00
0194A:  CLRF   01
0194C:  CLRF   02
0194E:  CLRF   03
01950:  MOVFF  00,4A5
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01954:  MOVF   x99,W
01956:  MOVWF  00
01958:  CLRF   01
0195A:  CLRF   02
0195C:  CLRF   03
0195E:  MOVFF  00,4A6
....................             
....................       output_low(flash_stream.cs_pin);
01962:  MOVFF  497,501
01966:  MOVLB  5
01968:  CLRF   x02
0196A:  MOVLW  0F
0196C:  MOVWF  x04
0196E:  MOVLW  89
01970:  MOVWF  x03
01972:  MOVLB  0
01974:  CALL   15C8
01978:  MOVFF  497,501
0197C:  MOVLB  5
0197E:  CLRF   x02
01980:  MOVLW  0F
01982:  MOVWF  x04
01984:  MOVLW  92
01986:  MOVWF  x03
01988:  MOVLB  0
0198A:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0198E:  MOVFF  498,504
01992:  MOVFF  497,503
01996:  MOVFF  496,502
0199A:  MOVFF  495,501
0199E:  MOVLW  04
019A0:  MOVLB  5
019A2:  MOVWF  x06
019A4:  MOVLW  A3
019A6:  MOVWF  x05
019A8:  CLRF   x08
019AA:  MOVLW  04
019AC:  MOVWF  x07
019AE:  MOVFF  49E,50A
019B2:  MOVFF  49D,509
019B6:  MOVFF  4A2,50E
019BA:  MOVFF  4A1,50D
019BE:  MOVFF  4A0,50C
019C2:  MOVFF  49F,50B
019C6:  MOVLB  0
019C8:  CALL   1630
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
019CC:  MOVLW  02
019CE:  MOVWF  00
019D0:  DECFSZ 00,F
019D2:  BRA    19D0
019D4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
019D6:  MOVFF  497,501
019DA:  MOVLW  01
019DC:  MOVLB  5
019DE:  MOVWF  x02
019E0:  MOVLW  0F
019E2:  MOVWF  x04
019E4:  MOVLW  89
019E6:  MOVWF  x03
019E8:  MOVLB  0
019EA:  CALL   15C8
019EE:  MOVFF  497,501
019F2:  MOVLB  5
019F4:  CLRF   x02
019F6:  MOVLW  0F
019F8:  MOVWF  x04
019FA:  MOVLW  92
019FC:  MOVWF  x03
019FE:  MOVLB  0
01A00:  CALL   15C8
....................    }
01A04:  GOTO   1B1E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
01A08:  MOVLB  4
01A0A:  DECFSZ x96,W
01A0C:  BRA    1A12
01A0E:  BRA    1A18
01A10:  MOVLB  0
01A12:  MOVLB  0
01A14:  GOTO   1B1E
01A18:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
01A1A:  MOVLW  13
01A1C:  MOVLB  4
01A1E:  MOVWF  xA7
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
01A20:  MOVFF  49C,4AD
01A24:  CLRF   xAE
01A26:  CLRF   xAF
01A28:  CLRF   xB0
01A2A:  MOVF   xAD,W
01A2C:  MOVWF  00
01A2E:  CLRF   01
01A30:  CLRF   02
01A32:  CLRF   03
01A34:  MOVFF  00,4A8
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
01A38:  MOVFF  49B,4AD
01A3C:  MOVFF  49C,4AE
01A40:  CLRF   xAF
01A42:  CLRF   xB0
01A44:  MOVF   xAD,W
01A46:  MOVWF  00
01A48:  CLRF   01
01A4A:  CLRF   02
01A4C:  CLRF   03
01A4E:  MOVFF  00,4A9
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01A52:  MOVFF  49A,4AD
01A56:  MOVFF  49B,4AE
01A5A:  MOVFF  49C,4AF
01A5E:  CLRF   xB0
01A60:  MOVF   xAD,W
01A62:  MOVWF  00
01A64:  CLRF   01
01A66:  CLRF   02
01A68:  CLRF   03
01A6A:  MOVFF  00,4AA
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01A6E:  MOVF   x99,W
01A70:  MOVWF  00
01A72:  CLRF   01
01A74:  CLRF   02
01A76:  CLRF   03
01A78:  MOVFF  00,4AB
....................    
....................       output_low(flash_stream.cs_pin);
01A7C:  MOVFF  497,501
01A80:  MOVLB  5
01A82:  CLRF   x02
01A84:  MOVLW  0F
01A86:  MOVWF  x04
01A88:  MOVLW  89
01A8A:  MOVWF  x03
01A8C:  MOVLB  0
01A8E:  CALL   15C8
01A92:  MOVFF  497,501
01A96:  MOVLB  5
01A98:  CLRF   x02
01A9A:  MOVLW  0F
01A9C:  MOVWF  x04
01A9E:  MOVLW  92
01AA0:  MOVWF  x03
01AA2:  MOVLB  0
01AA4:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
01AA8:  MOVFF  498,504
01AAC:  MOVFF  497,503
01AB0:  MOVFF  496,502
01AB4:  MOVFF  495,501
01AB8:  MOVLW  04
01ABA:  MOVLB  5
01ABC:  MOVWF  x06
01ABE:  MOVLW  A7
01AC0:  MOVWF  x05
01AC2:  CLRF   x08
01AC4:  MOVLW  05
01AC6:  MOVWF  x07
01AC8:  MOVFF  49E,50A
01ACC:  MOVFF  49D,509
01AD0:  MOVFF  4A2,50E
01AD4:  MOVFF  4A1,50D
01AD8:  MOVFF  4A0,50C
01ADC:  MOVFF  49F,50B
01AE0:  MOVLB  0
01AE2:  CALL   1630
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
01AE6:  MOVLW  02
01AE8:  MOVWF  00
01AEA:  DECFSZ 00,F
01AEC:  BRA    1AEA
01AEE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
01AF0:  MOVFF  497,501
01AF4:  MOVLW  01
01AF6:  MOVLB  5
01AF8:  MOVWF  x02
01AFA:  MOVLW  0F
01AFC:  MOVWF  x04
01AFE:  MOVLW  89
01B00:  MOVWF  x03
01B02:  MOVLB  0
01B04:  CALL   15C8
01B08:  MOVFF  497,501
01B0C:  MOVLB  5
01B0E:  CLRF   x02
01B10:  MOVLW  0F
01B12:  MOVWF  x04
01B14:  MOVLW  92
01B16:  MOVWF  x03
01B18:  MOVLB  0
01B1A:  CALL   15C8
....................    }
....................    return;
01B1E:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
066B2:  MOVLB  4
066B4:  MOVF   x1F,F
066B6:  BTFSC  FD8.2
066B8:  BRA    66C0
066BA:  MOVLB  0
066BC:  GOTO   682E
066C0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
066C2:  MOVLW  06
066C4:  MOVLB  4
066C6:  MOVWF  x27
066C8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
066CA:  MOVLW  02
066CC:  MOVLB  4
066CE:  MOVWF  x28
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
066D0:  MOVFF  424,436
066D4:  MOVFF  425,437
066D8:  CLRF   x38
066DA:  CLRF   x39
066DC:  MOVF   x36,W
066DE:  MOVWF  00
066E0:  CLRF   01
066E2:  CLRF   02
066E4:  CLRF   03
066E6:  MOVFF  00,429
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
066EA:  MOVFF  423,436
066EE:  MOVFF  424,437
066F2:  MOVFF  425,438
066F6:  CLRF   x39
066F8:  MOVF   x36,W
066FA:  MOVWF  00
066FC:  CLRF   01
066FE:  CLRF   02
06700:  CLRF   03
06702:  MOVFF  00,42A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
06706:  MOVF   x22,W
06708:  MOVWF  00
0670A:  CLRF   01
0670C:  CLRF   02
0670E:  CLRF   03
06710:  MOVFF  00,42B
....................       flash_cmd[4] = write_data;
06714:  MOVFF  426,42C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
06718:  MOVFF  420,501
0671C:  MOVLB  5
0671E:  CLRF   x02
06720:  MOVLW  0F
06722:  MOVWF  x04
06724:  MOVLW  89
06726:  MOVWF  x03
06728:  MOVLB  0
0672A:  CALL   15C8
0672E:  MOVFF  420,501
06732:  MOVLB  5
06734:  CLRF   x02
06736:  MOVLW  0F
06738:  MOVWF  x04
0673A:  MOVLW  92
0673C:  MOVWF  x03
0673E:  MOVLB  0
06740:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
06744:  MOVFF  421,4FE
06748:  MOVFF  420,4FD
0674C:  MOVFF  41F,4FC
06750:  MOVFF  41E,4FB
06754:  MOVLW  04
06756:  MOVLB  5
06758:  MOVWF  x00
0675A:  MOVLW  27
0675C:  MOVLB  4
0675E:  MOVWF  xFF
06760:  MOVLB  5
06762:  CLRF   x02
06764:  MOVLW  01
06766:  MOVWF  x01
06768:  MOVLB  0
0676A:  CALL   2456
....................       output_high(flash_stream.cs_pin);
0676E:  MOVFF  420,501
06772:  MOVLW  01
06774:  MOVLB  5
06776:  MOVWF  x02
06778:  MOVLW  0F
0677A:  MOVWF  x04
0677C:  MOVLW  89
0677E:  MOVWF  x03
06780:  MOVLB  0
06782:  CALL   15C8
06786:  MOVFF  420,501
0678A:  MOVLB  5
0678C:  CLRF   x02
0678E:  MOVLW  0F
06790:  MOVWF  x04
06792:  MOVLW  92
06794:  MOVWF  x03
06796:  MOVLB  0
06798:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0679C:  MOVFF  420,501
067A0:  MOVLB  5
067A2:  CLRF   x02
067A4:  MOVLW  0F
067A6:  MOVWF  x04
067A8:  MOVLW  89
067AA:  MOVWF  x03
067AC:  MOVLB  0
067AE:  CALL   15C8
067B2:  MOVFF  420,501
067B6:  MOVLB  5
067B8:  CLRF   x02
067BA:  MOVLW  0F
067BC:  MOVWF  x04
067BE:  MOVLW  92
067C0:  MOVWF  x03
067C2:  MOVLB  0
067C4:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
067C8:  MOVFF  421,4FE
067CC:  MOVFF  420,4FD
067D0:  MOVFF  41F,4FC
067D4:  MOVFF  41E,4FB
067D8:  MOVLW  04
067DA:  MOVLB  5
067DC:  MOVWF  x00
067DE:  MOVLW  28
067E0:  MOVLB  4
067E2:  MOVWF  xFF
067E4:  MOVLB  5
067E6:  CLRF   x02
067E8:  MOVLW  05
067EA:  MOVWF  x01
067EC:  MOVLB  0
067EE:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
067F2:  MOVLW  02
067F4:  MOVWF  00
067F6:  DECFSZ 00,F
067F8:  BRA    67F6
067FA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
067FC:  MOVFF  420,501
06800:  MOVLW  01
06802:  MOVLB  5
06804:  MOVWF  x02
06806:  MOVLW  0F
06808:  MOVWF  x04
0680A:  MOVLW  89
0680C:  MOVWF  x03
0680E:  MOVLB  0
06810:  CALL   15C8
06814:  MOVFF  420,501
06818:  MOVLB  5
0681A:  CLRF   x02
0681C:  MOVLW  0F
0681E:  MOVWF  x04
06820:  MOVLW  92
06822:  MOVWF  x03
06824:  MOVLB  0
06826:  CALL   15C8
....................    }
0682A:  GOTO   69C0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0682E:  MOVLB  4
06830:  DECFSZ x1F,W
06832:  BRA    6838
06834:  BRA    683E
06836:  MOVLB  0
06838:  MOVLB  0
0683A:  GOTO   69C0
0683E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
06840:  MOVLW  06
06842:  MOVLB  4
06844:  MOVWF  x2D
06846:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
06848:  MOVLW  12
0684A:  MOVLB  4
0684C:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
0684E:  MOVFF  425,436
06852:  CLRF   x37
06854:  CLRF   x38
06856:  CLRF   x39
06858:  MOVF   x36,W
0685A:  MOVWF  00
0685C:  CLRF   01
0685E:  CLRF   02
06860:  CLRF   03
06862:  MOVFF  00,42F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
06866:  MOVFF  424,436
0686A:  MOVFF  425,437
0686E:  CLRF   x38
06870:  CLRF   x39
06872:  MOVF   x36,W
06874:  MOVWF  00
06876:  CLRF   01
06878:  CLRF   02
0687A:  CLRF   03
0687C:  MOVFF  00,430
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
06880:  MOVFF  423,436
06884:  MOVFF  424,437
06888:  MOVFF  425,438
0688C:  CLRF   x39
0688E:  MOVF   x36,W
06890:  MOVWF  00
06892:  CLRF   01
06894:  CLRF   02
06896:  CLRF   03
06898:  MOVFF  00,431
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
0689C:  MOVF   x22,W
0689E:  MOVWF  00
068A0:  CLRF   01
068A2:  CLRF   02
068A4:  CLRF   03
068A6:  MOVFF  00,432
....................       flash_cmd[5] = write_data;
068AA:  MOVFF  426,433
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
068AE:  MOVFF  420,501
068B2:  MOVLB  5
068B4:  CLRF   x02
068B6:  MOVLW  0F
068B8:  MOVWF  x04
068BA:  MOVLW  89
068BC:  MOVWF  x03
068BE:  MOVLB  0
068C0:  CALL   15C8
068C4:  MOVFF  420,501
068C8:  MOVLB  5
068CA:  CLRF   x02
068CC:  MOVLW  0F
068CE:  MOVWF  x04
068D0:  MOVLW  92
068D2:  MOVWF  x03
068D4:  MOVLB  0
068D6:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
068DA:  MOVFF  421,4FE
068DE:  MOVFF  420,4FD
068E2:  MOVFF  41F,4FC
068E6:  MOVFF  41E,4FB
068EA:  MOVLW  04
068EC:  MOVLB  5
068EE:  MOVWF  x00
068F0:  MOVLW  2D
068F2:  MOVLB  4
068F4:  MOVWF  xFF
068F6:  MOVLB  5
068F8:  CLRF   x02
068FA:  MOVLW  01
068FC:  MOVWF  x01
068FE:  MOVLB  0
06900:  CALL   2456
....................       output_high(flash_stream.cs_pin);
06904:  MOVFF  420,501
06908:  MOVLW  01
0690A:  MOVLB  5
0690C:  MOVWF  x02
0690E:  MOVLW  0F
06910:  MOVWF  x04
06912:  MOVLW  89
06914:  MOVWF  x03
06916:  MOVLB  0
06918:  CALL   15C8
0691C:  MOVFF  420,501
06920:  MOVLB  5
06922:  CLRF   x02
06924:  MOVLW  0F
06926:  MOVWF  x04
06928:  MOVLW  92
0692A:  MOVWF  x03
0692C:  MOVLB  0
0692E:  CALL   15C8
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
06932:  MOVFF  420,501
06936:  MOVLB  5
06938:  CLRF   x02
0693A:  MOVLW  0F
0693C:  MOVWF  x04
0693E:  MOVLW  89
06940:  MOVWF  x03
06942:  MOVLB  0
06944:  CALL   15C8
06948:  MOVFF  420,501
0694C:  MOVLB  5
0694E:  CLRF   x02
06950:  MOVLW  0F
06952:  MOVWF  x04
06954:  MOVLW  92
06956:  MOVWF  x03
06958:  MOVLB  0
0695A:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
0695E:  MOVFF  421,4FE
06962:  MOVFF  420,4FD
06966:  MOVFF  41F,4FC
0696A:  MOVFF  41E,4FB
0696E:  MOVLW  04
06970:  MOVLB  5
06972:  MOVWF  x00
06974:  MOVLW  2E
06976:  MOVLB  4
06978:  MOVWF  xFF
0697A:  MOVLB  5
0697C:  CLRF   x02
0697E:  MOVLW  06
06980:  MOVWF  x01
06982:  MOVLB  0
06984:  CALL   2456
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
06988:  MOVLW  02
0698A:  MOVWF  00
0698C:  DECFSZ 00,F
0698E:  BRA    698C
06990:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
06992:  MOVFF  420,501
06996:  MOVLW  01
06998:  MOVLB  5
0699A:  MOVWF  x02
0699C:  MOVLW  0F
0699E:  MOVWF  x04
069A0:  MOVLW  89
069A2:  MOVWF  x03
069A4:  MOVLB  0
069A6:  CALL   15C8
069AA:  MOVFF  420,501
069AE:  MOVLB  5
069B0:  CLRF   x02
069B2:  MOVLW  0F
069B4:  MOVWF  x04
069B6:  MOVLW  92
069B8:  MOVWF  x03
069BA:  MOVLB  0
069BC:  CALL   15C8
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
069C0:  MOVLB  4
069C2:  CLRF   x34
069C4:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
069C6:  MOVFF  421,4FE
069CA:  MOVFF  420,4FD
069CE:  MOVFF  41F,4FC
069D2:  MOVFF  41E,4FB
069D6:  CALL   269E
069DA:  MOVF   01,W
069DC:  ANDLW  01
069DE:  SUBLW  01
069E0:  BTFSS  FD8.2
069E2:  GOTO   6A34
....................       if(timeout_counter > 10)
069E6:  MOVLB  4
069E8:  MOVF   x34,W
069EA:  SUBLW  0A
069EC:  BTFSS  FD8.0
069EE:  BRA    69F6
069F0:  MOVLB  0
069F2:  GOTO   6A08
069F6:  MOVLB  0
....................          delay_ms(200);
069F8:  MOVLW  C8
069FA:  MOVLB  4
069FC:  MOVWF  xFB
069FE:  MOVLB  0
06A00:  CALL   1468
06A04:  GOTO   6A14
....................       else
....................          delay_ms(10);   
06A08:  MOVLW  0A
06A0A:  MOVLB  4
06A0C:  MOVWF  xFB
06A0E:  MOVLB  0
06A10:  CALL   1468
....................       
....................       if(timeout_counter > 100){
06A14:  MOVLB  4
06A16:  MOVF   x34,W
06A18:  SUBLW  64
06A1A:  BTFSS  FD8.0
06A1C:  BRA    6A24
06A1E:  MOVLB  0
06A20:  GOTO   6A2A
06A24:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
06A26:  GOTO   6A34
....................       }  
....................       timeout_counter++;
06A2A:  MOVLB  4
06A2C:  INCF   x34,F
06A2E:  MOVLB  0
06A30:  GOTO   69C6
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
06A34:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0273C:  MOVLB  4
0273E:  MOVF   xE4,F
02740:  BTFSC  FD8.2
02742:  BRA    274A
02744:  MOVLB  0
02746:  GOTO   28C2
0274A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0274C:  MOVLW  06
0274E:  MOVLB  4
02750:  MOVWF  xEF
02752:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
02754:  MOVLW  02
02756:  MOVLB  4
02758:  MOVWF  xF0
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0275A:  MOVFF  4E9,4FC
0275E:  MOVFF  4EA,4FD
02762:  CLRF   xFE
02764:  CLRF   xFF
02766:  MOVF   xFC,W
02768:  MOVWF  00
0276A:  CLRF   01
0276C:  CLRF   02
0276E:  CLRF   03
02770:  MOVFF  00,4F1
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02774:  MOVFF  4E8,4FC
02778:  MOVFF  4E9,4FD
0277C:  MOVFF  4EA,4FE
02780:  CLRF   xFF
02782:  MOVF   xFC,W
02784:  MOVWF  00
02786:  CLRF   01
02788:  CLRF   02
0278A:  CLRF   03
0278C:  MOVFF  00,4F2
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02790:  MOVF   xE7,W
02792:  MOVWF  00
02794:  CLRF   01
02796:  CLRF   02
02798:  CLRF   03
0279A:  MOVFF  00,4F3
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0279E:  MOVFF  4E5,501
027A2:  MOVLB  5
027A4:  CLRF   x02
027A6:  MOVLW  0F
027A8:  MOVWF  x04
027AA:  MOVLW  89
027AC:  MOVWF  x03
027AE:  MOVLB  0
027B0:  CALL   15C8
027B4:  MOVFF  4E5,501
027B8:  MOVLB  5
027BA:  CLRF   x02
027BC:  MOVLW  0F
027BE:  MOVWF  x04
027C0:  MOVLW  92
027C2:  MOVWF  x03
027C4:  MOVLB  0
027C6:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
027CA:  MOVFF  4E6,4FE
027CE:  MOVFF  4E5,4FD
027D2:  MOVFF  4E4,4FC
027D6:  MOVFF  4E3,4FB
027DA:  MOVLW  04
027DC:  MOVLB  5
027DE:  MOVWF  x00
027E0:  MOVLW  EF
027E2:  MOVLB  4
027E4:  MOVWF  xFF
027E6:  MOVLB  5
027E8:  CLRF   x02
027EA:  MOVLW  01
027EC:  MOVWF  x01
027EE:  MOVLB  0
027F0:  CALL   2456
....................       output_high(flash_stream.cs_pin);
027F4:  MOVFF  4E5,501
027F8:  MOVLW  01
027FA:  MOVLB  5
027FC:  MOVWF  x02
027FE:  MOVLW  0F
02800:  MOVWF  x04
02802:  MOVLW  89
02804:  MOVWF  x03
02806:  MOVLB  0
02808:  CALL   15C8
0280C:  MOVFF  4E5,501
02810:  MOVLB  5
02812:  CLRF   x02
02814:  MOVLW  0F
02816:  MOVWF  x04
02818:  MOVLW  92
0281A:  MOVWF  x03
0281C:  MOVLB  0
0281E:  CALL   15C8
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02822:  MOVFF  4E5,501
02826:  MOVLB  5
02828:  CLRF   x02
0282A:  MOVLW  0F
0282C:  MOVWF  x04
0282E:  MOVLW  89
02830:  MOVWF  x03
02832:  MOVLB  0
02834:  CALL   15C8
02838:  MOVFF  4E5,501
0283C:  MOVLB  5
0283E:  CLRF   x02
02840:  MOVLW  0F
02842:  MOVWF  x04
02844:  MOVLW  92
02846:  MOVWF  x03
02848:  MOVLB  0
0284A:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0284E:  MOVFF  4E6,4FE
02852:  MOVFF  4E5,4FD
02856:  MOVFF  4E4,4FC
0285A:  MOVFF  4E3,4FB
0285E:  MOVLW  04
02860:  MOVLB  5
02862:  MOVWF  x00
02864:  MOVLW  F0
02866:  MOVLB  4
02868:  MOVWF  xFF
0286A:  MOVLW  04
0286C:  MOVLB  5
0286E:  MOVWF  x01
02870:  MOVFF  4EC,503
02874:  MOVFF  4EB,502
02878:  MOVFF  4EE,505
0287C:  MOVFF  4ED,504
02880:  MOVLB  0
02882:  CALL   253A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02886:  MOVLW  02
02888:  MOVWF  00
0288A:  DECFSZ 00,F
0288C:  BRA    288A
0288E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02890:  MOVFF  4E5,501
02894:  MOVLW  01
02896:  MOVLB  5
02898:  MOVWF  x02
0289A:  MOVLW  0F
0289C:  MOVWF  x04
0289E:  MOVLW  89
028A0:  MOVWF  x03
028A2:  MOVLB  0
028A4:  CALL   15C8
028A8:  MOVFF  4E5,501
028AC:  MOVLB  5
028AE:  CLRF   x02
028B0:  MOVLW  0F
028B2:  MOVWF  x04
028B4:  MOVLW  92
028B6:  MOVWF  x03
028B8:  MOVLB  0
028BA:  CALL   15C8
....................    }
028BE:  GOTO   2A5E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
028C2:  MOVLB  4
028C4:  DECFSZ xE4,W
028C6:  BRA    28CC
028C8:  BRA    28D2
028CA:  MOVLB  0
028CC:  MOVLB  0
028CE:  GOTO   2A5E
028D2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
028D4:  MOVLW  06
028D6:  MOVLB  4
028D8:  MOVWF  xF4
028DA:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
028DC:  MOVLW  12
028DE:  MOVLB  4
028E0:  MOVWF  xF5
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
028E2:  MOVFF  4EA,4FC
028E6:  CLRF   xFD
028E8:  CLRF   xFE
028EA:  CLRF   xFF
028EC:  MOVF   xFC,W
028EE:  MOVWF  00
028F0:  CLRF   01
028F2:  CLRF   02
028F4:  CLRF   03
028F6:  MOVFF  00,4F6
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
028FA:  MOVFF  4E9,4FC
028FE:  MOVFF  4EA,4FD
02902:  CLRF   xFE
02904:  CLRF   xFF
02906:  MOVF   xFC,W
02908:  MOVWF  00
0290A:  CLRF   01
0290C:  CLRF   02
0290E:  CLRF   03
02910:  MOVFF  00,4F7
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02914:  MOVFF  4E8,4FC
02918:  MOVFF  4E9,4FD
0291C:  MOVFF  4EA,4FE
02920:  CLRF   xFF
02922:  MOVF   xFC,W
02924:  MOVWF  00
02926:  CLRF   01
02928:  CLRF   02
0292A:  CLRF   03
0292C:  MOVFF  00,4F8
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02930:  MOVF   xE7,W
02932:  MOVWF  00
02934:  CLRF   01
02936:  CLRF   02
02938:  CLRF   03
0293A:  MOVFF  00,4F9
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0293E:  MOVFF  4E5,501
02942:  MOVLB  5
02944:  CLRF   x02
02946:  MOVLW  0F
02948:  MOVWF  x04
0294A:  MOVLW  89
0294C:  MOVWF  x03
0294E:  MOVLB  0
02950:  CALL   15C8
02954:  MOVFF  4E5,501
02958:  MOVLB  5
0295A:  CLRF   x02
0295C:  MOVLW  0F
0295E:  MOVWF  x04
02960:  MOVLW  92
02962:  MOVWF  x03
02964:  MOVLB  0
02966:  CALL   15C8
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0296A:  MOVFF  4E6,4FE
0296E:  MOVFF  4E5,4FD
02972:  MOVFF  4E4,4FC
02976:  MOVFF  4E3,4FB
0297A:  MOVLW  04
0297C:  MOVLB  5
0297E:  MOVWF  x00
02980:  MOVLW  F4
02982:  MOVLB  4
02984:  MOVWF  xFF
02986:  MOVLB  5
02988:  CLRF   x02
0298A:  MOVLW  01
0298C:  MOVWF  x01
0298E:  MOVLB  0
02990:  CALL   2456
....................       output_high(flash_stream.cs_pin);
02994:  MOVFF  4E5,501
02998:  MOVLW  01
0299A:  MOVLB  5
0299C:  MOVWF  x02
0299E:  MOVLW  0F
029A0:  MOVWF  x04
029A2:  MOVLW  89
029A4:  MOVWF  x03
029A6:  MOVLB  0
029A8:  CALL   15C8
029AC:  MOVFF  4E5,501
029B0:  MOVLB  5
029B2:  CLRF   x02
029B4:  MOVLW  0F
029B6:  MOVWF  x04
029B8:  MOVLW  92
029BA:  MOVWF  x03
029BC:  MOVLB  0
029BE:  CALL   15C8
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
029C2:  MOVFF  4E5,501
029C6:  MOVLB  5
029C8:  CLRF   x02
029CA:  MOVLW  0F
029CC:  MOVWF  x04
029CE:  MOVLW  89
029D0:  MOVWF  x03
029D2:  MOVLB  0
029D4:  CALL   15C8
029D8:  MOVFF  4E5,501
029DC:  MOVLB  5
029DE:  CLRF   x02
029E0:  MOVLW  0F
029E2:  MOVWF  x04
029E4:  MOVLW  92
029E6:  MOVWF  x03
029E8:  MOVLB  0
029EA:  CALL   15C8
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
029EE:  MOVFF  4E6,4FE
029F2:  MOVFF  4E5,4FD
029F6:  MOVFF  4E4,4FC
029FA:  MOVFF  4E3,4FB
029FE:  MOVLW  04
02A00:  MOVLB  5
02A02:  MOVWF  x00
02A04:  MOVLW  F5
02A06:  MOVLB  4
02A08:  MOVWF  xFF
02A0A:  MOVLW  05
02A0C:  MOVLB  5
02A0E:  MOVWF  x01
02A10:  MOVFF  4EC,503
02A14:  MOVFF  4EB,502
02A18:  MOVFF  4EE,505
02A1C:  MOVFF  4ED,504
02A20:  MOVLB  0
02A22:  CALL   253A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02A26:  MOVLW  02
02A28:  MOVWF  00
02A2A:  DECFSZ 00,F
02A2C:  BRA    2A2A
02A2E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02A30:  MOVFF  4E5,501
02A34:  MOVLW  01
02A36:  MOVLB  5
02A38:  MOVWF  x02
02A3A:  MOVLW  0F
02A3C:  MOVWF  x04
02A3E:  MOVLW  89
02A40:  MOVWF  x03
02A42:  MOVLB  0
02A44:  CALL   15C8
02A48:  MOVFF  4E5,501
02A4C:  MOVLB  5
02A4E:  CLRF   x02
02A50:  MOVLW  0F
02A52:  MOVWF  x04
02A54:  MOVLW  92
02A56:  MOVWF  x03
02A58:  MOVLB  0
02A5A:  CALL   15C8
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
02A5E:  MOVLB  4
02A60:  CLRF   xFA
02A62:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
02A64:  MOVFF  4E6,4FE
02A68:  MOVFF  4E5,4FD
02A6C:  MOVFF  4E4,4FC
02A70:  MOVFF  4E3,4FB
02A74:  CALL   269E
02A78:  MOVF   01,W
02A7A:  ANDLW  01
02A7C:  SUBLW  01
02A7E:  BTFSS  FD8.2
02A80:  GOTO   2AD2
....................       if(timeout_counter > 10)
02A84:  MOVLB  4
02A86:  MOVF   xFA,W
02A88:  SUBLW  0A
02A8A:  BTFSS  FD8.0
02A8C:  BRA    2A94
02A8E:  MOVLB  0
02A90:  GOTO   2AA6
02A94:  MOVLB  0
....................          delay_ms(200);
02A96:  MOVLW  C8
02A98:  MOVLB  4
02A9A:  MOVWF  xFB
02A9C:  MOVLB  0
02A9E:  CALL   1468
02AA2:  GOTO   2AB2
....................       else
....................          delay_ms(10);   
02AA6:  MOVLW  0A
02AA8:  MOVLB  4
02AAA:  MOVWF  xFB
02AAC:  MOVLB  0
02AAE:  CALL   1468
....................       
....................       if(timeout_counter > 100){
02AB2:  MOVLB  4
02AB4:  MOVF   xFA,W
02AB6:  SUBLW  64
02AB8:  BTFSS  FD8.0
02ABA:  BRA    2AC2
02ABC:  MOVLB  0
02ABE:  GOTO   2AC8
02AC2:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
02AC4:  GOTO   2AD2
....................       }  
....................       timeout_counter++;
02AC8:  MOVLB  4
02ACA:  INCF   xFA,F
02ACC:  MOVLB  0
02ACE:  GOTO   2A64
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
02AD2:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
01848:  MOVLW  9F
0184A:  MOVLB  4
0184C:  MOVWF  xEB
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0184E:  MOVFF  4E5,501
01852:  MOVLB  5
01854:  CLRF   x02
01856:  MOVLW  0F
01858:  MOVWF  x04
0185A:  MOVLW  89
0185C:  MOVWF  x03
0185E:  MOVLB  0
01860:  CALL   15C8
01864:  MOVFF  4E5,501
01868:  MOVLB  5
0186A:  CLRF   x02
0186C:  MOVLW  0F
0186E:  MOVWF  x04
01870:  MOVLW  92
01872:  MOVWF  x03
01874:  MOVLB  0
01876:  CALL   15C8
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0187A:  MOVFF  4E6,504
0187E:  MOVFF  4E5,503
01882:  MOVFF  4E4,502
01886:  MOVFF  4E3,501
0188A:  MOVLW  04
0188C:  MOVLB  5
0188E:  MOVWF  x06
01890:  MOVLW  EB
01892:  MOVWF  x05
01894:  CLRF   x08
01896:  MOVLW  01
01898:  MOVWF  x07
0189A:  MOVLW  04
0189C:  MOVWF  x0A
0189E:  MOVLW  E7
018A0:  MOVWF  x09
018A2:  CLRF   x0E
018A4:  CLRF   x0D
018A6:  CLRF   x0C
018A8:  MOVLW  04
018AA:  MOVWF  x0B
018AC:  MOVLB  0
018AE:  CALL   1630
....................    output_high(flash_stream.cs_pin);
018B2:  MOVFF  4E5,501
018B6:  MOVLW  01
018B8:  MOVLB  5
018BA:  MOVWF  x02
018BC:  MOVLW  0F
018BE:  MOVWF  x04
018C0:  MOVLW  89
018C2:  MOVWF  x03
018C4:  MOVLB  0
018C6:  CALL   15C8
018CA:  MOVFF  4E5,501
018CE:  MOVLB  5
018D0:  CLRF   x02
018D2:  MOVLW  0F
018D4:  MOVWF  x04
018D6:  MOVLW  92
018D8:  MOVWF  x03
018DA:  MOVLB  0
018DC:  CALL   15C8
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
018E0:  MOVLB  4
018E2:  MOVF   xE7,W
018E4:  SUBLW  20
018E6:  BTFSC  FD8.2
018E8:  BRA    18F0
018EA:  MOVLB  0
018EC:  GOTO   18FE
018F0:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
018F2:  MOVLW  01
018F4:  MOVWF  01
018F6:  GOTO   1906
....................    }
018FA:  GOTO   1906
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
018FE:  MOVLW  00
01900:  MOVWF  01
01902:  GOTO   1906
....................    }
01906:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
06BB0:  MOVLW  F2
06BB2:  MOVWF  FF6
06BB4:  MOVLW  03
06BB6:  MOVWF  FF7
06BB8:  MOVLW  00
06BBA:  MOVWF  FF8
06BBC:  CALL   14E8
....................     fprintf(PC, "___Start smf_write__\r\n");
06BC0:  MOVLW  0C
06BC2:  MOVWF  FF6
06BC4:  MOVLW  04
06BC6:  MOVWF  FF7
06BC8:  MOVLW  00
06BCA:  MOVWF  FF8
06BCC:  CALL   14E8
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
06BD0:  MOVLB  3
06BD2:  CLRF   xC6
06BD4:  MOVLB  0
06BD6:  CALL   60A8
06BDA:  MOVF   01,F
06BDC:  BTFSS  FD8.2
06BDE:  GOTO   78B6
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
06BE2:  MOVLW  24
06BE4:  MOVWF  FF6
06BE6:  MOVLW  04
06BE8:  MOVWF  FF7
06BEA:  MOVLW  00
06BEC:  MOVWF  FF8
06BEE:  MOVLW  07
06BF0:  MOVLB  4
06BF2:  MOVWF  x19
06BF4:  MOVLB  0
06BF6:  CALL   1518
06BFA:  MOVFF  3C6,419
06BFE:  MOVLW  18
06C00:  MOVLB  4
06C02:  MOVWF  x1A
06C04:  MOVLB  0
06C06:  CALL   6196
06C0A:  MOVLW  2D
06C0C:  MOVWF  FF6
06C0E:  MOVLW  04
06C10:  MOVWF  FF7
06C12:  MOVLW  00
06C14:  MOVWF  FF8
06C16:  MOVLW  12
06C18:  MOVLB  4
06C1A:  MOVWF  x19
06C1C:  MOVLB  0
06C1E:  CALL   1518
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
06C22:  GOTO   62A4
06C26:  MOVFF  02,3C8
06C2A:  MOVFF  01,3C7
06C2E:  MOVLB  3
06C30:  MOVF   xC7,W
06C32:  MOVWF  01
06C34:  MOVF   xC8,W
06C36:  MOVWF  03
06C38:  MOVF   01,W
06C3A:  MOVWF  FE9
06C3C:  MOVFF  03,FEA
*
06C46:  MOVLB  4
06C48:  MOVWF  x15
06C4A:  MOVFF  415,41C
06C4E:  MOVLB  0
06C50:  GOTO   62FE
06C54:  MOVFF  02,03
06C58:  MOVF   01,W
06C5A:  MOVWF  FE1
06C5C:  MOVFF  03,FE2
06C60:  MOVLW  03
06C62:  MOVWF  FEA
06C64:  MOVLW  C9
06C66:  MOVWF  FE9
06C68:  MOVLW  09
06C6A:  MOVWF  01
06C6C:  MOVFF  FE6,FEE
06C70:  DECFSZ 01,F
06C72:  GOTO   6C6C
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
06C76:  MOVLW  01
06C78:  MOVLB  3
06C7A:  ADDWF  xC6,W
06C7C:  CLRF   03
06C7E:  ADDLW  1D
06C80:  MOVWF  FE9
06C82:  MOVLW  00
06C84:  ADDWFC 03,W
06C86:  MOVWF  FEA
06C88:  MOVFF  3D1,FEF
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
06C8C:  MOVFF  3CC,3D5
06C90:  MOVFF  3CB,3D4
06C94:  MOVFF  3CA,3D3
06C98:  MOVFF  3C9,3D2
06C9C:  MOVFF  3D0,3D9
06CA0:  MOVFF  3CF,3D8
06CA4:  MOVFF  3CE,3D7
06CA8:  MOVFF  3CD,3D6
06CAC:  MOVLW  01
06CAE:  ADDWF  xC7,W
06CB0:  MOVWF  FE9
06CB2:  MOVLW  00
06CB4:  ADDWFC xC8,W
06CB6:  MOVWF  FEA
06CB8:  MOVFF  FEF,3DA
06CBC:  MOVFF  FEC,3DB
06CC0:  MOVFF  FEC,3DC
06CC4:  MOVFF  FEC,3DD
06CC8:  MOVF   FED,F
06CCA:  MOVF   FED,F
06CCC:  MOVF   FED,F
06CCE:  MOVLW  05
06CD0:  ADDWF  xC7,W
06CD2:  MOVWF  FE9
06CD4:  MOVLW  00
06CD6:  ADDWFC xC8,W
06CD8:  MOVWF  FEA
06CDA:  MOVFF  FEF,3DE
06CDE:  MOVFF  FEC,3DF
06CE2:  MOVFF  FEC,3E0
06CE6:  MOVFF  FEC,3E1
06CEA:  MOVF   FED,F
06CEC:  MOVF   FED,F
06CEE:  MOVF   FED,F
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
06CF0:  MOVLW  40
06CF2:  MOVWF  FF6
06CF4:  MOVLW  04
06CF6:  MOVWF  FF7
06CF8:  MOVLW  00
06CFA:  MOVWF  FF8
06CFC:  MOVLW  25
06CFE:  MOVLB  4
06D00:  MOVWF  x19
06D02:  MOVLB  0
06D04:  CALL   1518
06D08:  MOVFF  3D5,4A4
06D0C:  MOVLW  37
06D0E:  MOVLB  4
06D10:  MOVWF  xA5
06D12:  MOVLB  0
06D14:  CALL   1B20
06D18:  MOVFF  3D4,4A4
06D1C:  MOVLW  37
06D1E:  MOVLB  4
06D20:  MOVWF  xA5
06D22:  MOVLB  0
06D24:  CALL   1B20
06D28:  MOVFF  3D3,4A4
06D2C:  MOVLW  37
06D2E:  MOVLB  4
06D30:  MOVWF  xA5
06D32:  MOVLB  0
06D34:  CALL   1B20
06D38:  MOVFF  3D2,4A4
06D3C:  MOVLW  37
06D3E:  MOVLB  4
06D40:  MOVWF  xA5
06D42:  MOVLB  0
06D44:  CALL   1B20
06D48:  MOVLW  0D
06D4A:  MOVLB  4
06D4C:  MOVWF  xE6
06D4E:  MOVLB  0
06D50:  CALL   1496
06D54:  MOVLW  0A
06D56:  MOVLB  4
06D58:  MOVWF  xE6
06D5A:  MOVLB  0
06D5C:  CALL   1496
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
06D60:  MOVLW  6E
06D62:  MOVWF  FF6
06D64:  MOVLW  04
06D66:  MOVWF  FF7
06D68:  MOVLW  00
06D6A:  MOVWF  FF8
06D6C:  MOVLW  25
06D6E:  MOVLB  4
06D70:  MOVWF  x19
06D72:  MOVLB  0
06D74:  CALL   1518
06D78:  MOVFF  3D9,4A4
06D7C:  MOVLW  37
06D7E:  MOVLB  4
06D80:  MOVWF  xA5
06D82:  MOVLB  0
06D84:  CALL   1B20
06D88:  MOVFF  3D8,4A4
06D8C:  MOVLW  37
06D8E:  MOVLB  4
06D90:  MOVWF  xA5
06D92:  MOVLB  0
06D94:  CALL   1B20
06D98:  MOVFF  3D7,4A4
06D9C:  MOVLW  37
06D9E:  MOVLB  4
06DA0:  MOVWF  xA5
06DA2:  MOVLB  0
06DA4:  CALL   1B20
06DA8:  MOVFF  3D6,4A4
06DAC:  MOVLW  37
06DAE:  MOVLB  4
06DB0:  MOVWF  xA5
06DB2:  MOVLB  0
06DB4:  CALL   1B20
06DB8:  MOVLW  0D
06DBA:  MOVLB  4
06DBC:  MOVWF  xE6
06DBE:  MOVLB  0
06DC0:  CALL   1496
06DC4:  MOVLW  0A
06DC6:  MOVLB  4
06DC8:  MOVWF  xE6
06DCA:  MOVLB  0
06DCC:  CALL   1496
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
06DD0:  MOVLW  9C
06DD2:  MOVWF  FF6
06DD4:  MOVLW  04
06DD6:  MOVWF  FF7
06DD8:  MOVLW  00
06DDA:  MOVWF  FF8
06DDC:  MOVLW  25
06DDE:  MOVLB  4
06DE0:  MOVWF  x19
06DE2:  MOVLB  0
06DE4:  CALL   1518
06DE8:  MOVFF  3DD,4A4
06DEC:  MOVLW  37
06DEE:  MOVLB  4
06DF0:  MOVWF  xA5
06DF2:  MOVLB  0
06DF4:  CALL   1B20
06DF8:  MOVFF  3DC,4A4
06DFC:  MOVLW  37
06DFE:  MOVLB  4
06E00:  MOVWF  xA5
06E02:  MOVLB  0
06E04:  CALL   1B20
06E08:  MOVFF  3DB,4A4
06E0C:  MOVLW  37
06E0E:  MOVLB  4
06E10:  MOVWF  xA5
06E12:  MOVLB  0
06E14:  CALL   1B20
06E18:  MOVFF  3DA,4A4
06E1C:  MOVLW  37
06E1E:  MOVLB  4
06E20:  MOVWF  xA5
06E22:  MOVLB  0
06E24:  CALL   1B20
06E28:  MOVLW  0D
06E2A:  MOVLB  4
06E2C:  MOVWF  xE6
06E2E:  MOVLB  0
06E30:  CALL   1496
06E34:  MOVLW  0A
06E36:  MOVLB  4
06E38:  MOVWF  xE6
06E3A:  MOVLB  0
06E3C:  CALL   1496
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
06E40:  MOVLW  CA
06E42:  MOVWF  FF6
06E44:  MOVLW  04
06E46:  MOVWF  FF7
06E48:  MOVLW  00
06E4A:  MOVWF  FF8
06E4C:  MOVLW  25
06E4E:  MOVLB  4
06E50:  MOVWF  x19
06E52:  MOVLB  0
06E54:  CALL   1518
06E58:  MOVLW  41
06E5A:  MOVWF  FE9
06E5C:  MOVFF  3E1,418
06E60:  MOVFF  3E0,417
06E64:  MOVFF  3DF,416
06E68:  MOVFF  3DE,415
06E6C:  CALL   639C
06E70:  MOVLW  F2
06E72:  MOVWF  FF6
06E74:  MOVLW  04
06E76:  MOVWF  FF7
06E78:  MOVLW  00
06E7A:  MOVWF  FF8
06E7C:  MOVLW  04
06E7E:  MOVLB  4
06E80:  MOVWF  x19
06E82:  MOVLB  0
06E84:  CALL   1518
06E88:  MOVFF  3E1,4A4
06E8C:  MOVLW  57
06E8E:  MOVLB  4
06E90:  MOVWF  xA5
06E92:  MOVLB  0
06E94:  CALL   1B20
06E98:  MOVFF  3E0,4A4
06E9C:  MOVLW  57
06E9E:  MOVLB  4
06EA0:  MOVWF  xA5
06EA2:  MOVLB  0
06EA4:  CALL   1B20
06EA8:  MOVFF  3DF,4A4
06EAC:  MOVLW  57
06EAE:  MOVLB  4
06EB0:  MOVWF  xA5
06EB2:  MOVLB  0
06EB4:  CALL   1B20
06EB8:  MOVFF  3DE,4A4
06EBC:  MOVLW  57
06EBE:  MOVLB  4
06EC0:  MOVWF  xA5
06EC2:  MOVLB  0
06EC4:  CALL   1B20
06EC8:  MOVLW  F9
06ECA:  MOVWF  FF6
06ECC:  MOVLW  04
06ECE:  MOVWF  FF7
06ED0:  MOVLW  00
06ED2:  MOVWF  FF8
06ED4:  MOVLW  05
06ED6:  MOVLB  4
06ED8:  MOVWF  x19
06EDA:  MOVLB  0
06EDC:  CALL   1518
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
06EE0:  MOVFF  E7,4E6
06EE4:  MOVFF  E6,4E5
06EE8:  MOVFF  E5,4E4
06EEC:  MOVFF  E4,4E3
06EF0:  CALL   1848
06EF4:  MOVF   01,F
06EF6:  BTFSS  FD8.2
06EF8:  GOTO   6F10
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
06EFC:  MOVLW  00
06EFE:  MOVWF  FF6
06F00:  MOVLW  05
06F02:  MOVWF  FF7
06F04:  MOVLW  00
06F06:  MOVWF  FF8
06F08:  CALL   14E8
....................             return;
06F0C:  GOTO   78D6
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
06F10:  MOVFF  E7,498
06F14:  MOVFF  E6,497
06F18:  MOVFF  E5,496
06F1C:  MOVFF  E4,495
06F20:  MOVFF  3D5,49C
06F24:  MOVFF  3D4,49B
06F28:  MOVFF  3D3,49A
06F2C:  MOVFF  3D2,499
06F30:  MOVLW  03
06F32:  MOVLB  4
06F34:  MOVWF  x9E
06F36:  MOVLW  E2
06F38:  MOVWF  x9D
06F3A:  CLRF   xA2
06F3C:  CLRF   xA1
06F3E:  CLRF   xA0
06F40:  MOVLW  04
06F42:  MOVWF  x9F
06F44:  MOVLB  0
06F46:  CALL   1908
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
06F4A:  MOVLB  4
06F4C:  CLRF   x18
06F4E:  CLRF   x17
06F50:  CLRF   x16
06F52:  MOVFF  3E5,415
06F56:  MOVFF  415,418
06F5A:  CLRF   x15
06F5C:  CLRF   x16
06F5E:  CLRF   x17
06F60:  CLRF   x1D
06F62:  CLRF   x1C
06F64:  CLRF   x1B
06F66:  MOVFF  3E4,41A
06F6A:  MOVFF  41B,03
06F6E:  MOVFF  41A,02
06F72:  CLRF   00
06F74:  CLRF   01
06F76:  MOVF   00,W
06F78:  IORWF  x15,F
06F7A:  MOVF   01,W
06F7C:  IORWF  x16,F
06F7E:  MOVF   02,W
06F80:  IORWF  x17,F
06F82:  MOVF   03,W
06F84:  IORWF  x18,F
06F86:  CLRF   x1D
06F88:  CLRF   x1C
06F8A:  CLRF   x1B
06F8C:  MOVFF  3E3,41A
06F90:  MOVFF  41C,03
06F94:  MOVFF  41B,02
06F98:  MOVFF  41A,01
06F9C:  CLRF   00
06F9E:  MOVF   00,W
06FA0:  IORWF  x15,F
06FA2:  MOVF   01,W
06FA4:  IORWF  x16,F
06FA6:  MOVF   02,W
06FA8:  IORWF  x17,F
06FAA:  MOVF   03,W
06FAC:  IORWF  x18,F
06FAE:  MOVFF  3E2,00
06FB2:  CLRF   01
06FB4:  CLRF   02
06FB6:  CLRF   03
06FB8:  MOVF   00,W
06FBA:  IORWF  x15,W
06FBC:  MOVLB  3
06FBE:  MOVWF  xE6
06FC0:  MOVF   01,W
06FC2:  MOVLB  4
06FC4:  IORWF  x16,W
06FC6:  MOVLB  3
06FC8:  MOVWF  xE7
06FCA:  MOVF   02,W
06FCC:  MOVLB  4
06FCE:  IORWF  x17,W
06FD0:  MOVLB  3
06FD2:  MOVWF  xE8
06FD4:  MOVF   03,W
06FD6:  MOVLB  4
06FD8:  IORWF  x18,W
06FDA:  MOVLB  3
06FDC:  MOVWF  xE9
06FDE:  MOVLW  04
06FE0:  ADDWF  xD2,W
06FE2:  MOVLB  4
06FE4:  MOVWF  x15
06FE6:  MOVLW  00
06FE8:  MOVLB  3
06FEA:  ADDWFC xD3,W
06FEC:  MOVLB  4
06FEE:  MOVWF  x16
06FF0:  MOVLW  00
06FF2:  MOVLB  3
06FF4:  ADDWFC xD4,W
06FF6:  MOVLB  4
06FF8:  MOVWF  x17
06FFA:  MOVLW  00
06FFC:  MOVLB  3
06FFE:  ADDWFC xD5,W
07000:  MOVLB  4
07002:  MOVWF  x18
07004:  MOVFF  E7,423
07008:  MOVFF  E6,422
0700C:  MOVFF  E5,421
07010:  MOVFF  E4,420
07014:  MOVFF  418,427
07018:  MOVFF  417,426
0701C:  MOVFF  416,425
07020:  MOVFF  415,424
07024:  MOVLB  0
07026:  GOTO   649C
0702A:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
0702E:  MOVLW  1E
07030:  MOVWF  FF6
07032:  MOVLW  05
07034:  MOVWF  FF7
07036:  MOVLW  00
07038:  MOVWF  FF8
0703A:  CALL   14E8
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
0703E:  MOVLW  30
07040:  MOVWF  FF6
07042:  MOVLW  05
07044:  MOVWF  FF7
07046:  MOVLW  00
07048:  MOVWF  FF8
0704A:  MOVLW  0C
0704C:  MOVLB  4
0704E:  MOVWF  x19
07050:  MOVLB  0
07052:  CALL   1518
07056:  MOVLW  41
07058:  MOVWF  FE9
0705A:  MOVFF  3E9,418
0705E:  MOVFF  3E8,417
07062:  MOVFF  3E7,416
07066:  MOVFF  3E6,415
0706A:  CALL   639C
0706E:  MOVLW  3F
07070:  MOVWF  FF6
07072:  MOVLW  05
07074:  MOVWF  FF7
07076:  MOVLW  00
07078:  MOVWF  FF8
0707A:  MOVLW  08
0707C:  MOVLB  4
0707E:  MOVWF  x19
07080:  MOVLB  0
07082:  CALL   1518
07086:  MOVFF  3D5,4A4
0708A:  MOVLW  37
0708C:  MOVLB  4
0708E:  MOVWF  xA5
07090:  MOVLB  0
07092:  CALL   1B20
07096:  MOVFF  3D4,4A4
0709A:  MOVLW  37
0709C:  MOVLB  4
0709E:  MOVWF  xA5
070A0:  MOVLB  0
070A2:  CALL   1B20
070A6:  MOVFF  3D3,4A4
070AA:  MOVLW  37
070AC:  MOVLB  4
070AE:  MOVWF  xA5
070B0:  MOVLB  0
070B2:  CALL   1B20
070B6:  MOVFF  3D2,4A4
070BA:  MOVLW  37
070BC:  MOVLB  4
070BE:  MOVWF  xA5
070C0:  MOVLB  0
070C2:  CALL   1B20
070C6:  MOVLW  4C
070C8:  MOVWF  FF6
070CA:  MOVLW  05
070CC:  MOVWF  FF7
070CE:  MOVLW  00
070D0:  MOVWF  FF8
070D2:  MOVLW  03
070D4:  MOVLB  4
070D6:  MOVWF  x19
070D8:  MOVLB  0
070DA:  CALL   1518
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
070DE:  MOVLW  04
070E0:  MOVLB  3
070E2:  ADDWF  xD2,W
070E4:  MOVLB  4
070E6:  MOVWF  x15
070E8:  MOVLW  00
070EA:  MOVLB  3
070EC:  ADDWFC xD3,W
070EE:  MOVLB  4
070F0:  MOVWF  x16
070F2:  MOVLW  00
070F4:  MOVLB  3
070F6:  ADDWFC xD4,W
070F8:  MOVLB  4
070FA:  MOVWF  x17
070FC:  MOVLW  00
070FE:  MOVLB  3
07100:  ADDWFC xD5,W
07102:  MOVLB  4
07104:  MOVWF  x18
07106:  MOVLW  50
07108:  MOVWF  FF6
0710A:  MOVLW  05
0710C:  MOVWF  FF7
0710E:  MOVLW  00
07110:  MOVWF  FF8
07112:  MOVLW  0C
07114:  MOVWF  x19
07116:  MOVLB  0
07118:  CALL   1518
0711C:  MOVFF  3EA,419
07120:  MOVLW  18
07122:  MOVLB  4
07124:  MOVWF  x1A
07126:  MOVLB  0
07128:  CALL   6196
0712C:  MOVLW  5E
0712E:  MOVWF  FF6
07130:  MOVLW  05
07132:  MOVWF  FF7
07134:  MOVLW  00
07136:  MOVWF  FF8
07138:  MOVLW  09
0713A:  MOVLB  4
0713C:  MOVWF  x19
0713E:  MOVLB  0
07140:  CALL   1518
07144:  MOVFF  418,4A4
07148:  MOVLW  37
0714A:  MOVLB  4
0714C:  MOVWF  xA5
0714E:  MOVLB  0
07150:  CALL   1B20
07154:  MOVFF  417,4A4
07158:  MOVLW  37
0715A:  MOVLB  4
0715C:  MOVWF  xA5
0715E:  MOVLB  0
07160:  CALL   1B20
07164:  MOVFF  416,4A4
07168:  MOVLW  37
0716A:  MOVLB  4
0716C:  MOVWF  xA5
0716E:  MOVLB  0
07170:  CALL   1B20
07174:  MOVFF  415,4A4
07178:  MOVLW  37
0717A:  MOVLB  4
0717C:  MOVWF  xA5
0717E:  MOVLB  0
07180:  CALL   1B20
07184:  MOVLW  6C
07186:  MOVWF  FF6
07188:  MOVLW  05
0718A:  MOVWF  FF7
0718C:  MOVLW  00
0718E:  MOVWF  FF8
07190:  MOVLW  05
07192:  MOVLB  4
07194:  MOVWF  x19
07196:  MOVLB  0
07198:  CALL   1518
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
0719C:  MOVLB  3
0719E:  MOVF   xD2,W
071A0:  MOVWF  xEB
071A2:  MOVLW  10
071A4:  ADDWF  xD3,W
071A6:  MOVWF  xEC
071A8:  MOVLW  00
071AA:  ADDWFC xD4,W
071AC:  MOVWF  xED
071AE:  MOVLW  00
071B0:  ADDWFC xD5,W
071B2:  MOVWF  xEE
071B4:  MOVFF  3D9,3F2
071B8:  MOVFF  3D8,3F1
071BC:  MOVFF  3D7,3F0
071C0:  MOVFF  3D6,3EF
071C4:  MOVF   xEB,W
071C6:  SUBWF  xEF,W
071C8:  MOVWF  xF3
071CA:  MOVF   xEC,W
071CC:  SUBWFB xF0,W
071CE:  MOVWF  xF4
071D0:  MOVF   xED,W
071D2:  SUBWFB xF1,W
071D4:  MOVWF  xF5
071D6:  MOVF   xEE,W
071D8:  SUBWFB xF2,W
071DA:  MOVWF  xF6
071DC:  MOVF   xE6,W
071DE:  ADDWF  xEB,W
071E0:  MOVWF  xF7
071E2:  MOVF   xE7,W
071E4:  ADDWFC xEC,W
071E6:  MOVWF  xF8
071E8:  MOVF   xE8,W
071EA:  ADDWFC xED,W
071EC:  MOVWF  xF9
071EE:  MOVF   xE9,W
071F0:  ADDWFC xEE,W
071F2:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
071F4:  MOVF   xDE,W
071F6:  ADDWF  xE6,W
071F8:  MOVLB  4
071FA:  MOVWF  x15
071FC:  MOVLB  3
071FE:  MOVF   xDF,W
07200:  ADDWFC xE7,W
07202:  MOVLB  4
07204:  MOVWF  x16
07206:  MOVLB  3
07208:  MOVF   xE0,W
0720A:  ADDWFC xE8,W
0720C:  MOVLB  4
0720E:  MOVWF  x17
07210:  MOVLB  3
07212:  MOVF   xE1,W
07214:  ADDWFC xE9,W
07216:  MOVLB  4
07218:  MOVWF  x18
0721A:  MOVLB  3
0721C:  MOVF   xF6,W
0721E:  MOVLB  4
07220:  SUBWF  x18,W
07222:  BTFSC  FD8.0
07224:  BRA    722C
07226:  MOVLB  0
07228:  GOTO   734C
0722C:  MOVLB  0
0722E:  BTFSS  FD8.2
07230:  GOTO   727C
07234:  MOVLB  3
07236:  MOVF   xF5,W
07238:  MOVLB  4
0723A:  SUBWF  x17,W
0723C:  BTFSC  FD8.0
0723E:  BRA    7246
07240:  MOVLB  0
07242:  GOTO   734C
07246:  MOVLB  0
07248:  BTFSS  FD8.2
0724A:  GOTO   727C
0724E:  MOVLB  3
07250:  MOVF   xF4,W
07252:  MOVLB  4
07254:  SUBWF  x16,W
07256:  BTFSC  FD8.0
07258:  BRA    7260
0725A:  MOVLB  0
0725C:  GOTO   734C
07260:  MOVLB  0
07262:  BTFSS  FD8.2
07264:  GOTO   727C
07268:  MOVLB  4
0726A:  MOVF   x15,W
0726C:  MOVLB  3
0726E:  SUBWF  xF3,W
07270:  BTFSS  FD8.0
07272:  BRA    727A
07274:  MOVLB  0
07276:  GOTO   734C
0727A:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
0727C:  MOVLW  72
0727E:  MOVWF  FF6
07280:  MOVLW  05
07282:  MOVWF  FF7
07284:  MOVLW  00
07286:  MOVWF  FF8
07288:  CALL   14E8
....................             loop_count++;
0728C:  MOVLB  3
0728E:  INCF   xEA,F
....................             used_size = 0;
07290:  CLRF   xE9
07292:  CLRF   xE8
07294:  CLRF   xE7
07296:  CLRF   xE6
....................             data_write_addr = data_region_start;
07298:  MOVFF  3EE,3FA
0729C:  MOVFF  3ED,3F9
072A0:  MOVFF  3EC,3F8
072A4:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
072A8:  MOVFF  3EE,3FE
072AC:  MOVFF  3ED,3FD
072B0:  MOVFF  3EC,3FC
072B4:  MOVFF  3EB,3FB
072B8:  MOVLB  0
....................             while (erase_ptr < data_region_end)
072BA:  MOVLB  3
072BC:  MOVF   xFE,W
072BE:  SUBWF  xF2,W
072C0:  BTFSC  FD8.0
072C2:  BRA    72CA
072C4:  MOVLB  0
072C6:  GOTO   734C
072CA:  MOVLB  0
072CC:  BTFSS  FD8.2
072CE:  GOTO   7314
072D2:  MOVLB  3
072D4:  MOVF   xFD,W
072D6:  SUBWF  xF1,W
072D8:  BTFSC  FD8.0
072DA:  BRA    72E2
072DC:  MOVLB  0
072DE:  GOTO   734C
072E2:  MOVLB  0
072E4:  BTFSS  FD8.2
072E6:  GOTO   7314
072EA:  MOVLB  3
072EC:  MOVF   xFC,W
072EE:  SUBWF  xF0,W
072F0:  BTFSC  FD8.0
072F2:  BRA    72FA
072F4:  MOVLB  0
072F6:  GOTO   734C
072FA:  MOVLB  0
072FC:  BTFSS  FD8.2
072FE:  GOTO   7314
07302:  MOVLB  3
07304:  MOVF   xEF,W
07306:  SUBWF  xFB,W
07308:  BTFSS  FD8.0
0730A:  BRA    7312
0730C:  MOVLB  0
0730E:  GOTO   734C
07312:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
07314:  MOVFF  E7,4E6
07318:  MOVFF  E6,4E5
0731C:  MOVFF  E5,4E4
07320:  MOVFF  E4,4E3
07324:  MOVFF  3FE,4EA
07328:  MOVFF  3FD,4E9
0732C:  MOVFF  3FC,4E8
07330:  MOVFF  3FB,4E7
07334:  CALL   2AD4
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
07338:  MOVLW  10
0733A:  MOVLB  3
0733C:  ADDWF  xFC,F
0733E:  MOVLW  00
07340:  ADDWFC xFD,F
07342:  MOVLW  00
07344:  ADDWFC xFE,F
07346:  MOVLB  0
07348:  GOTO   72BA
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
0734C:  MOVLB  3
0734E:  CLRF   xFF
07350:  MOVF   xF8,W
07352:  ANDLW  F0
07354:  MOVLB  4
07356:  MOVWF  x00
07358:  CLRF   x01
0735A:  CLRF   x02
0735C:  MOVLB  3
0735E:  MOVF   xDE,W
07360:  ADDWF  xF7,W
07362:  MOVLB  4
07364:  MOVWF  x15
07366:  MOVLB  3
07368:  MOVF   xDF,W
0736A:  ADDWFC xF8,W
0736C:  MOVLB  4
0736E:  MOVWF  x16
07370:  MOVLB  3
07372:  MOVF   xE0,W
07374:  ADDWFC xF9,W
07376:  MOVLB  4
07378:  MOVWF  x17
0737A:  MOVLB  3
0737C:  MOVF   xE1,W
0737E:  ADDWFC xFA,W
07380:  MOVLB  4
07382:  MOVWF  x18
07384:  MOVLW  FF
07386:  ADDWF  x15,F
07388:  MOVLW  0F
0738A:  ADDWFC x16,F
0738C:  MOVLW  00
0738E:  ADDWFC x17,F
07390:  MOVLW  00
07392:  ADDWFC x18,F
07394:  CLRF   x03
07396:  MOVF   x16,W
07398:  ANDLW  F0
0739A:  MOVWF  x04
0739C:  CLRF   x05
0739E:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
073A0:  MOVFF  402,40A
073A4:  MOVFF  401,409
073A8:  MOVFF  400,408
073AC:  MOVFF  3FF,407
073B0:  MOVLB  0
073B2:  MOVLB  4
073B4:  MOVF   x0A,W
073B6:  SUBWF  x06,W
073B8:  BTFSC  FD8.0
073BA:  BRA    73C2
073BC:  MOVLB  0
073BE:  GOTO   74A6
073C2:  MOVLB  0
073C4:  BTFSS  FD8.2
073C6:  GOTO   740C
073CA:  MOVLB  4
073CC:  MOVF   x09,W
073CE:  SUBWF  x05,W
073D0:  BTFSC  FD8.0
073D2:  BRA    73DA
073D4:  MOVLB  0
073D6:  GOTO   74A6
073DA:  MOVLB  0
073DC:  BTFSS  FD8.2
073DE:  GOTO   740C
073E2:  MOVLB  4
073E4:  MOVF   x08,W
073E6:  SUBWF  x04,W
073E8:  BTFSC  FD8.0
073EA:  BRA    73F2
073EC:  MOVLB  0
073EE:  GOTO   74A6
073F2:  MOVLB  0
073F4:  BTFSS  FD8.2
073F6:  GOTO   740C
073FA:  MOVLB  4
073FC:  MOVF   x03,W
073FE:  SUBWF  x07,W
07400:  BTFSS  FD8.0
07402:  BRA    740A
07404:  MOVLB  0
07406:  GOTO   74A6
0740A:  MOVLB  0
0740C:  MOVLB  4
0740E:  MOVF   x0A,W
07410:  MOVLB  3
07412:  SUBWF  xD9,W
07414:  BTFSC  FD8.0
07416:  BRA    741E
07418:  MOVLB  0
0741A:  GOTO   74A6
0741E:  MOVLB  0
07420:  BTFSS  FD8.2
07422:  GOTO   746E
07426:  MOVLB  4
07428:  MOVF   x09,W
0742A:  MOVLB  3
0742C:  SUBWF  xD8,W
0742E:  BTFSC  FD8.0
07430:  BRA    7438
07432:  MOVLB  0
07434:  GOTO   74A6
07438:  MOVLB  0
0743A:  BTFSS  FD8.2
0743C:  GOTO   746E
07440:  MOVLB  4
07442:  MOVF   x08,W
07444:  MOVLB  3
07446:  SUBWF  xD7,W
07448:  BTFSC  FD8.0
0744A:  BRA    7452
0744C:  MOVLB  0
0744E:  GOTO   74A6
07452:  MOVLB  0
07454:  BTFSS  FD8.2
07456:  GOTO   746E
0745A:  MOVLB  3
0745C:  MOVF   xD6,W
0745E:  MOVLB  4
07460:  SUBWF  x07,W
07462:  BTFSS  FD8.0
07464:  BRA    746C
07466:  MOVLB  0
07468:  GOTO   74A6
0746C:  MOVLB  0
....................             subsector_4kByte_erase(smf, addr);
0746E:  MOVFF  E7,4E6
07472:  MOVFF  E6,4E5
07476:  MOVFF  E5,4E4
0747A:  MOVFF  E4,4E3
0747E:  MOVFF  40A,4EA
07482:  MOVFF  409,4E9
07486:  MOVFF  408,4E8
0748A:  MOVFF  407,4E7
0748E:  CALL   2AD4
07492:  MOVLW  10
07494:  MOVLB  4
07496:  ADDWF  x08,F
07498:  MOVLW  00
0749A:  ADDWFC x09,F
0749C:  MOVLW  00
0749E:  ADDWFC x0A,F
074A0:  MOVLB  0
074A2:  GOTO   73B2
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
074A6:  MOVFF  3E1,40E
074AA:  MOVFF  3E0,40D
074AE:  MOVFF  3DF,40C
074B2:  MOVFF  3DE,40B
074B6:  MOVFF  3DD,412
074BA:  MOVFF  3DC,411
074BE:  MOVFF  3DB,410
074C2:  MOVFF  3DA,40F
....................         while (remaining > 0)
074C6:  MOVLB  4
074C8:  MOVF   x0B,F
074CA:  BTFSC  FD8.2
074CC:  BRA    74D4
074CE:  MOVLB  0
074D0:  GOTO   7506
074D4:  MOVLB  0
074D6:  MOVLB  4
074D8:  MOVF   x0C,F
074DA:  BTFSC  FD8.2
074DC:  BRA    74E4
074DE:  MOVLB  0
074E0:  GOTO   7506
074E4:  MOVLB  0
074E6:  MOVLB  4
074E8:  MOVF   x0D,F
074EA:  BTFSC  FD8.2
074EC:  BRA    74F4
074EE:  MOVLB  0
074F0:  GOTO   7506
074F4:  MOVLB  0
074F6:  MOVLB  4
074F8:  MOVF   x0E,F
074FA:  BTFSS  FD8.2
074FC:  BRA    7504
074FE:  MOVLB  0
07500:  GOTO   7630
07504:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
07506:  MOVLB  4
07508:  MOVF   x0E,F
0750A:  BTFSC  FD8.2
0750C:  BRA    7514
0750E:  MOVLB  0
07510:  GOTO   7548
07514:  MOVLB  0
07516:  MOVLB  4
07518:  MOVF   x0D,F
0751A:  BTFSC  FD8.2
0751C:  BRA    7524
0751E:  MOVLB  0
07520:  GOTO   7548
07524:  MOVLB  0
07526:  MOVLB  4
07528:  MOVF   x0C,F
0752A:  BTFSC  FD8.2
0752C:  BRA    7534
0752E:  MOVLB  0
07530:  GOTO   7548
07534:  MOVLB  0
07536:  MOVLB  4
07538:  MOVF   x0B,W
0753A:  SUBLW  40
0753C:  BTFSS  FD8.0
0753E:  BRA    7546
07540:  MOVLB  0
07542:  GOTO   7550
07546:  MOVLB  0
07548:  CLRF   03
0754A:  MOVLW  40
0754C:  GOTO   755A
07550:  MOVFF  40C,03
07554:  MOVLB  4
07556:  MOVF   x0B,W
07558:  MOVLB  0
0755A:  MOVLB  4
0755C:  MOVWF  x13
0755E:  MOVFF  03,414
07562:  MOVLB  0
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
07564:  MOVFF  E3,498
07568:  MOVFF  E2,497
0756C:  MOVFF  E1,496
07570:  MOVFF  E0,495
07574:  MOVFF  412,49C
07578:  MOVFF  411,49B
0757C:  MOVFF  410,49A
07580:  MOVFF  40F,499
07584:  MOVLW  03
07586:  MOVLB  4
07588:  MOVWF  x9E
0758A:  MOVLW  86
0758C:  MOVWF  x9D
0758E:  CLRF   xA2
07590:  CLRF   xA1
07592:  MOVFF  414,4A0
07596:  MOVFF  413,49F
0759A:  MOVLB  0
0759C:  CALL   1908
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
075A0:  MOVFF  E7,4E6
075A4:  MOVFF  E6,4E5
075A8:  MOVFF  E5,4E4
075AC:  MOVFF  E4,4E3
075B0:  MOVFF  3FA,4EA
075B4:  MOVFF  3F9,4E9
075B8:  MOVFF  3F8,4E8
075BC:  MOVFF  3F7,4E7
075C0:  MOVLW  03
075C2:  MOVLB  4
075C4:  MOVWF  xEC
075C6:  MOVLW  86
075C8:  MOVWF  xEB
075CA:  MOVFF  414,4EE
075CE:  MOVFF  413,4ED
075D2:  MOVLB  0
075D4:  CALL   273C
.................... 
....................             src_addr += chunk;
075D8:  MOVLB  4
075DA:  MOVF   x13,W
075DC:  ADDWF  x0F,F
075DE:  MOVF   x14,W
075E0:  ADDWFC x10,F
075E2:  MOVLW  00
075E4:  ADDWFC x11,F
075E6:  MOVLW  00
075E8:  ADDWFC x12,F
....................             data_write_addr += chunk;
075EA:  MOVF   x13,W
075EC:  MOVLB  3
075EE:  ADDWF  xF7,F
075F0:  MOVLB  4
075F2:  MOVF   x14,W
075F4:  MOVLB  3
075F6:  ADDWFC xF8,F
075F8:  MOVLW  00
075FA:  ADDWFC xF9,F
075FC:  MOVLW  00
075FE:  ADDWFC xFA,F
....................             used_size += chunk;
07600:  MOVLB  4
07602:  MOVF   x13,W
07604:  MOVLB  3
07606:  ADDWF  xE6,F
07608:  MOVLB  4
0760A:  MOVF   x14,W
0760C:  MOVLB  3
0760E:  ADDWFC xE7,F
07610:  MOVLW  00
07612:  ADDWFC xE8,F
07614:  MOVLW  00
07616:  ADDWFC xE9,F
....................             remaining -= chunk;
07618:  MOVLB  4
0761A:  MOVF   x13,W
0761C:  SUBWF  x0B,F
0761E:  MOVF   x14,W
07620:  SUBWFB x0C,F
07622:  MOVLW  00
07624:  SUBWFB x0D,F
07626:  MOVLW  00
07628:  SUBWFB x0E,F
0762A:  MOVLB  0
0762C:  GOTO   74C6
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
07630:  MOVLW  A8
07632:  MOVWF  FF6
07634:  MOVLW  05
07636:  MOVWF  FF7
07638:  MOVLW  00
0763A:  MOVWF  FF8
0763C:  CALL   14E8
....................         subsector_4kByte_erase(smf, mis_start_address);
07640:  MOVFF  E7,4E6
07644:  MOVFF  E6,4E5
07648:  MOVFF  E5,4E4
0764C:  MOVFF  E4,4E3
07650:  MOVFF  3D5,4EA
07654:  MOVFF  3D4,4E9
07658:  MOVFF  3D3,4E8
0765C:  MOVFF  3D2,4E7
07660:  CALL   2AD4
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
07664:  MOVFF  3E9,419
07668:  MOVFF  3E8,418
0766C:  MOVFF  3E7,417
07670:  MOVFF  3E6,416
07674:  MOVLB  4
07676:  CLRF   x17
07678:  CLRF   x18
0767A:  CLRF   x19
0767C:  MOVFF  E7,421
07680:  MOVFF  E6,420
07684:  MOVFF  E5,41F
07688:  MOVFF  E4,41E
0768C:  MOVFF  3D5,425
07690:  MOVFF  3D4,424
07694:  MOVFF  3D3,423
07698:  MOVFF  3D2,422
0769C:  MOVFF  416,426
076A0:  MOVLB  0
076A2:  CALL   66B2
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
076A6:  MOVLW  01
076A8:  MOVLB  3
076AA:  ADDWF  xD2,W
076AC:  MOVLB  4
076AE:  MOVWF  x15
076B0:  MOVLW  00
076B2:  MOVLB  3
076B4:  ADDWFC xD3,W
076B6:  MOVLB  4
076B8:  MOVWF  x16
076BA:  MOVLW  00
076BC:  MOVLB  3
076BE:  ADDWFC xD4,W
076C0:  MOVLB  4
076C2:  MOVWF  x17
076C4:  MOVLW  00
076C6:  MOVLB  3
076C8:  ADDWFC xD5,W
076CA:  MOVLB  4
076CC:  MOVWF  x18
076CE:  MOVFF  3E7,41A
076D2:  MOVFF  3E8,41B
076D6:  MOVFF  3E9,41C
076DA:  CLRF   x1D
076DC:  CLRF   x1B
076DE:  CLRF   x1C
076E0:  CLRF   x1D
076E2:  MOVFF  E7,421
076E6:  MOVFF  E6,420
076EA:  MOVFF  E5,41F
076EE:  MOVFF  E4,41E
076F2:  MOVFF  418,425
076F6:  MOVFF  417,424
076FA:  MOVFF  416,423
076FE:  MOVFF  415,422
07702:  MOVFF  41A,426
07706:  MOVLB  0
07708:  CALL   66B2
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
0770C:  MOVLW  02
0770E:  MOVLB  3
07710:  ADDWF  xD2,W
07712:  MOVLB  4
07714:  MOVWF  x15
07716:  MOVLW  00
07718:  MOVLB  3
0771A:  ADDWFC xD3,W
0771C:  MOVLB  4
0771E:  MOVWF  x16
07720:  MOVLW  00
07722:  MOVLB  3
07724:  ADDWFC xD4,W
07726:  MOVLB  4
07728:  MOVWF  x17
0772A:  MOVLW  00
0772C:  MOVLB  3
0772E:  ADDWFC xD5,W
07730:  MOVLB  4
07732:  MOVWF  x18
07734:  MOVFF  3E8,41A
07738:  MOVFF  3E9,41B
0773C:  CLRF   x1C
0773E:  CLRF   x1D
07740:  CLRF   x1B
07742:  CLRF   x1C
07744:  CLRF   x1D
07746:  MOVFF  E7,421
0774A:  MOVFF  E6,420
0774E:  MOVFF  E5,41F
07752:  MOVFF  E4,41E
07756:  MOVFF  418,425
0775A:  MOVFF  417,424
0775E:  MOVFF  416,423
07762:  MOVFF  415,422
07766:  MOVFF  41A,426
0776A:  MOVLB  0
0776C:  CALL   66B2
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
07770:  MOVLW  03
07772:  MOVLB  3
07774:  ADDWF  xD2,W
07776:  MOVLB  4
07778:  MOVWF  x15
0777A:  MOVLW  00
0777C:  MOVLB  3
0777E:  ADDWFC xD3,W
07780:  MOVLB  4
07782:  MOVWF  x16
07784:  MOVLW  00
07786:  MOVLB  3
07788:  ADDWFC xD4,W
0778A:  MOVLB  4
0778C:  MOVWF  x17
0778E:  MOVLW  00
07790:  MOVLB  3
07792:  ADDWFC xD5,W
07794:  MOVLB  4
07796:  MOVWF  x18
07798:  MOVFF  3E9,41A
0779C:  CLRF   x1B
0779E:  CLRF   x1C
077A0:  CLRF   x1D
077A2:  CLRF   x1B
077A4:  CLRF   x1C
077A6:  CLRF   x1D
077A8:  MOVFF  E7,421
077AC:  MOVFF  E6,420
077B0:  MOVFF  E5,41F
077B4:  MOVFF  E4,41E
077B8:  MOVFF  418,425
077BC:  MOVFF  417,424
077C0:  MOVFF  416,423
077C4:  MOVFF  415,422
077C8:  MOVFF  41A,426
077CC:  MOVLB  0
077CE:  CALL   66B2
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
077D2:  MOVLW  04
077D4:  MOVLB  3
077D6:  ADDWF  xD2,W
077D8:  MOVLB  4
077DA:  MOVWF  x15
077DC:  MOVLW  00
077DE:  MOVLB  3
077E0:  ADDWFC xD3,W
077E2:  MOVLB  4
077E4:  MOVWF  x16
077E6:  MOVLW  00
077E8:  MOVLB  3
077EA:  ADDWFC xD4,W
077EC:  MOVLB  4
077EE:  MOVWF  x17
077F0:  MOVLW  00
077F2:  MOVLB  3
077F4:  ADDWFC xD5,W
077F6:  MOVLB  4
077F8:  MOVWF  x18
077FA:  MOVFF  E7,421
077FE:  MOVFF  E6,420
07802:  MOVFF  E5,41F
07806:  MOVFF  E4,41E
0780A:  MOVFF  418,425
0780E:  MOVFF  417,424
07812:  MOVFF  416,423
07816:  MOVFF  415,422
0781A:  MOVFF  3EA,426
0781E:  MOVLB  0
07820:  CALL   66B2
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
07824:  MOVLW  BC
07826:  MOVWF  FF6
07828:  MOVLW  05
0782A:  MOVWF  FF7
0782C:  MOVLW  00
0782E:  MOVWF  FF8
07830:  MOVLW  0C
07832:  MOVLB  4
07834:  MOVWF  x19
07836:  MOVLB  0
07838:  CALL   1518
0783C:  MOVLW  41
0783E:  MOVWF  FE9
07840:  MOVFF  3E9,418
07844:  MOVFF  3E8,417
07848:  MOVFF  3E7,416
0784C:  MOVFF  3E6,415
07850:  GOTO   6A36
07854:  MOVLW  0D
07856:  MOVLB  4
07858:  MOVWF  xE6
0785A:  MOVLB  0
0785C:  CALL   1496
07860:  MOVLW  0A
07862:  MOVLB  4
07864:  MOVWF  xE6
07866:  MOVLB  0
07868:  CALL   1496
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
0786C:  MOVLW  CE
0786E:  MOVWF  FF6
07870:  MOVLW  05
07872:  MOVWF  FF7
07874:  MOVLW  00
07876:  MOVWF  FF8
07878:  MOVLW  0D
0787A:  MOVLB  4
0787C:  MOVWF  x19
0787E:  MOVLB  0
07880:  CALL   1518
07884:  MOVFF  3EA,415
07888:  MOVLW  1B
0788A:  MOVLB  4
0788C:  MOVWF  x16
0788E:  MOVLB  0
07890:  CALL   3C5C
07894:  MOVLW  DD
07896:  MOVWF  FF6
07898:  MOVLW  05
0789A:  MOVWF  FF7
0789C:  MOVLW  00
0789E:  MOVWF  FF8
078A0:  MOVLW  04
078A2:  MOVLB  4
078A4:  MOVWF  x19
078A6:  MOVLB  0
078A8:  CALL   1518
078AC:  MOVLB  3
078AE:  INCF   xC6,F
078B0:  MOVLB  0
078B2:  GOTO   6BD6
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
078B6:  MOVLW  E2
078B8:  MOVWF  FF6
078BA:  MOVLW  05
078BC:  MOVWF  FF7
078BE:  MOVLW  00
078C0:  MOVWF  FF8
078C2:  CALL   14E8
....................     fprintf(PC, "____________________\r\n\r\n");
078C6:  MOVLW  FC
078C8:  MOVWF  FF6
078CA:  MOVLW  05
078CC:  MOVWF  FF7
078CE:  MOVLW  00
078D0:  MOVWF  FF8
078D2:  CALL   14E8
078D6:  GOTO   7934 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... #include "communication.c"
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #include "calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03420:  MOVLB  3
03422:  MOVF   xA4,W
03424:  MOVWF  FE9
03426:  MOVF   xA5,W
03428:  MOVWF  FEA
0342A:  MOVFF  FEF,3A7
0342E:  MOVLW  01
03430:  MOVWF  xA8
03432:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03434:  MOVLB  3
03436:  MOVF   xA6,W
03438:  SUBWF  xA8,W
0343A:  BTFSS  FD8.0
0343C:  BRA    3444
0343E:  MOVLB  0
03440:  GOTO   3460
03444:  MOVLB  0
....................       crc ^= frame[i++];
03446:  MOVLB  3
03448:  MOVF   xA8,W
0344A:  INCF   xA8,F
0344C:  ADDWF  xA4,W
0344E:  MOVWF  FE9
03450:  MOVLW  00
03452:  ADDWFC xA5,W
03454:  MOVWF  FEA
03456:  MOVF   FEF,W
03458:  XORWF  xA7,F
0345A:  MOVLB  0
0345C:  GOTO   3434
....................    return crc;
03460:  MOVLB  3
03462:  MOVF   xA7,W
03464:  MOVWF  01
03466:  MOVLB  0
03468:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
0360E:  MOVLB  3
03610:  CLRF   x8B
03612:  CLRF   x8C
03614:  CLRF   x8D
03616:  CLRF   x8E
03618:  CLRF   x8F
0361A:  CLRF   x90
0361C:  CLRF   x91
0361E:  CLRF   x92
03620:  CLRF   x93
03622:  CLRF   x94
03624:  CLRF   x95
03626:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
03628:  MOVLW  16
0362A:  MOVWF  FF6
0362C:  MOVLW  06
0362E:  MOVWF  FF7
03630:  MOVLW  00
03632:  MOVWF  FF8
03634:  MOVLB  0
03636:  CALL   14E8
....................    fprintf(PC, "\t[BOSS] >>> ");
0363A:  MOVLW  36
0363C:  MOVWF  FF6
0363E:  MOVLW  06
03640:  MOVWF  FF7
03642:  MOVLW  00
03644:  MOVWF  FF8
03646:  CALL   14E8
....................    for (int8 i = 0; i < receive_signal_size; i++)
0364A:  MOVLB  3
0364C:  CLRF   x97
0364E:  MOVLB  0
03650:  MOVLB  3
03652:  MOVF   x8A,W
03654:  SUBWF  x97,W
03656:  BTFSS  FD8.0
03658:  BRA    3660
0365A:  MOVLB  0
0365C:  GOTO   369A
03660:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
03662:  MOVLB  3
03664:  MOVF   x97,W
03666:  ADDWF  x88,W
03668:  MOVWF  FE9
0366A:  MOVLW  00
0366C:  ADDWFC x89,W
0366E:  MOVWF  FEA
03670:  MOVFF  FEF,39E
03674:  MOVFF  39E,4A4
03678:  MOVLW  37
0367A:  MOVLB  4
0367C:  MOVWF  xA5
0367E:  MOVLB  0
03680:  CALL   1B20
03684:  MOVLW  20
03686:  MOVLB  4
03688:  MOVWF  xE6
0368A:  MOVLB  0
0368C:  CALL   1496
03690:  MOVLB  3
03692:  INCF   x97,F
03694:  MOVLB  0
03696:  GOTO   3650
....................    fprintf(PC, "\r\n");
0369A:  MOVLW  0D
0369C:  MOVLB  4
0369E:  MOVWF  xE6
036A0:  MOVLB  0
036A2:  CALL   1496
036A6:  MOVLW  0A
036A8:  MOVLB  4
036AA:  MOVWF  xE6
036AC:  MOVLB  0
036AE:  CALL   1496
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
036B2:  MOVFF  389,39F
036B6:  MOVFF  388,39E
036BA:  MOVFF  38A,3A0
036BE:  GOTO   32BC
036C2:  MOVFF  01,398
....................    if (frame_start_position == -1)
036C6:  MOVLB  3
036C8:  MOVF   x98,W
036CA:  SUBLW  FF
036CC:  BTFSC  FD8.2
036CE:  BRA    36D6
036D0:  MOVLB  0
036D2:  GOTO   36E4
036D6:  MOVLB  0
....................       return command;
036D8:  MOVLW  8B
036DA:  MOVWF  01
036DC:  MOVLW  03
036DE:  MOVWF  02
036E0:  GOTO   3806
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
036E4:  MOVLB  3
036E6:  MOVF   x98,W
036E8:  ADDWF  x88,W
036EA:  MOVWF  01
036EC:  MOVLW  00
036EE:  ADDWFC x89,W
036F0:  MOVWF  03
036F2:  MOVF   01,W
036F4:  MOVWF  x99
036F6:  MOVFF  03,39A
036FA:  MOVF   x99,W
036FC:  MOVWF  FE9
036FE:  MOVF   x9A,W
03700:  MOVWF  FEA
03702:  MOVF   FEF,W
03704:  ANDLW  0F
03706:  MOVWF  x9B
03708:  MOVFF  39B,39E
0370C:  MOVLB  0
0370E:  GOTO   3364
03712:  MOVFF  01,39C
....................    if (content_size == -1)
03716:  MOVLB  3
03718:  MOVF   x9C,W
0371A:  SUBLW  FF
0371C:  BTFSC  FD8.2
0371E:  BRA    3726
03720:  MOVLB  0
03722:  GOTO   3734
03726:  MOVLB  0
....................       return command;
03728:  MOVLW  8B
0372A:  MOVWF  01
0372C:  MOVLW  03
0372E:  MOVWF  02
03730:  GOTO   3806
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
03734:  MOVLB  3
03736:  MOVF   x98,W
03738:  SUBWF  x8A,W
0373A:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
0373C:  MOVFF  39A,39F
03740:  MOVFF  399,39E
03744:  MOVFF  39D,3A0
03748:  MOVLB  0
0374A:  GOTO   346A
0374E:  MOVF   01,F
03750:  BTFSS  FD8.2
03752:  GOTO   3762
....................       return command;
03756:  MOVLW  8B
03758:  MOVWF  01
0375A:  MOVLW  03
0375C:  MOVWF  02
0375E:  GOTO   3806
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
03762:  MOVLB  3
03764:  MOVF   x99,W
03766:  MOVWF  FE9
03768:  MOVF   x9A,W
0376A:  MOVWF  FEA
0376C:  MOVF   FEF,W
0376E:  ANDLW  F0
03770:  MOVWF  00
03772:  SWAPF  00,W
03774:  MOVWF  x9E
03776:  MOVLW  0F
03778:  ANDWF  x9E,F
0377A:  MOVFF  39E,39F
0377E:  MOVLB  0
03780:  GOTO   3554
03784:  MOVF   01,F
03786:  BTFSS  FD8.2
03788:  GOTO   3798
....................       return command;
0378C:  MOVLW  8B
0378E:  MOVWF  01
03790:  MOVLW  03
03792:  MOVWF  02
03794:  GOTO   3806
.................... 
....................    command.frame_id = frame_id;
03798:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0379C:  MOVLW  01
0379E:  MOVLB  3
037A0:  ADDWF  x99,W
037A2:  MOVWF  01
037A4:  MOVLW  00
037A6:  ADDWFC x9A,W
037A8:  MOVWF  03
037AA:  MOVF   01,W
037AC:  MOVWF  x9E
037AE:  MOVFF  03,39F
037B2:  MOVLW  02
037B4:  SUBWF  x9D,W
037B6:  MOVWF  xA0
037B8:  MOVLW  03
037BA:  MOVWF  FEA
037BC:  MOVLW  8E
037BE:  MOVWF  FE9
037C0:  MOVFF  39F,FE2
037C4:  MOVFF  39E,FE1
037C8:  MOVF   xA0,W
037CA:  MOVWF  01
037CC:  BTFSS  FD8.2
037CE:  BRA    37D6
037D0:  MOVLB  0
037D2:  GOTO   37E2
037D6:  MOVLB  0
037D8:  MOVFF  FE6,FEE
037DC:  DECFSZ 01,F
037DE:  GOTO   37D8
....................    command.size = receive_frame_size-2;
037E2:  MOVLW  02
037E4:  MOVLB  3
037E6:  SUBWF  x9D,W
037E8:  MOVWF  x8C
....................    command.is_exist = TRUE;
037EA:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
037EC:  MOVLW  44
037EE:  MOVWF  FF6
037F0:  MOVLW  06
037F2:  MOVWF  FF7
037F4:  MOVLW  00
037F6:  MOVWF  FF8
037F8:  MOVLB  0
037FA:  CALL   14E8
....................    return command;
037FE:  MOVLW  8B
03800:  MOVWF  01
03802:  MOVLW  03
03804:  MOVWF  02
03806:  GOTO   8218 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
032BC:  MOVLB  3
032BE:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
032C0:  CLRF   xA1
032C2:  MOVLB  0
032C4:  MOVLW  01
032C6:  MOVLB  3
032C8:  SUBWF  xA0,W
032CA:  SUBWF  xA1,W
032CC:  BTFSS  FD8.0
032CE:  BRA    32D6
032D0:  MOVLB  0
032D2:  GOTO   330E
032D6:  MOVLB  0
....................       if(receive_signal[i] == SFD)
032D8:  MOVLB  3
032DA:  MOVF   xA1,W
032DC:  ADDWF  x9E,W
032DE:  MOVWF  FE9
032E0:  MOVLW  00
032E2:  ADDWFC x9F,W
032E4:  MOVWF  FEA
032E6:  MOVF   FEF,W
032E8:  SUBLW  AA
032EA:  BTFSC  FD8.2
032EC:  BRA    32F4
032EE:  MOVLB  0
032F0:  GOTO   3304
032F4:  MOVLB  0
....................          return i+1;
032F6:  MOVLW  01
032F8:  MOVLB  3
032FA:  ADDWF  xA1,W
032FC:  MOVWF  01
032FE:  MOVLB  0
03300:  GOTO   3360
03304:  MOVLB  3
03306:  INCF   xA1,F
03308:  MOVLB  0
0330A:  GOTO   32C4
....................    if (receive_signal[i] == SFD)
0330E:  MOVLB  3
03310:  MOVF   xA1,W
03312:  ADDWF  x9E,W
03314:  MOVWF  FE9
03316:  MOVLW  00
03318:  ADDWFC x9F,W
0331A:  MOVWF  FEA
0331C:  MOVF   FEF,W
0331E:  SUBLW  AA
03320:  BTFSC  FD8.2
03322:  BRA    332A
03324:  MOVLB  0
03326:  GOTO   3348
0332A:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
0332C:  MOVLW  60
0332E:  MOVWF  FF6
03330:  MOVLW  06
03332:  MOVWF  FF7
03334:  MOVLW  00
03336:  MOVWF  FF8
03338:  CALL   14E8
....................       return -1;
0333C:  MOVLW  FF
0333E:  MOVWF  01
03340:  GOTO   3360
....................    }
03344:  GOTO   3360
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03348:  MOVLW  76
0334A:  MOVWF  FF6
0334C:  MOVLW  06
0334E:  MOVWF  FF7
03350:  MOVLW  00
03352:  MOVWF  FF8
03354:  CALL   14E8
....................       return -1;
03358:  MOVLW  FF
0335A:  MOVWF  01
0335C:  GOTO   3360
....................    }
03360:  GOTO   36C2 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03364:  MOVLB  3
03366:  CLRF   x9F
03368:  MOVLB  0
0336A:  MOVLB  3
0336C:  MOVF   x9F,W
0336E:  SUBLW  02
03370:  BTFSC  FD8.0
03372:  BRA    337A
03374:  MOVLB  0
03376:  GOTO   33D8
0337A:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
0337C:  BCF    FD8.0
0337E:  MOVLB  3
03380:  RLCF   x9F,W
03382:  CLRF   xA1
03384:  MOVWF  xA0
03386:  MOVLW  E8
03388:  ADDWF  xA0,W
0338A:  MOVWF  FE9
0338C:  MOVLW  00
0338E:  ADDWFC xA1,W
03390:  MOVWF  FEA
03392:  MOVF   FEF,W
03394:  SUBWF  x9E,W
03396:  BTFSC  FD8.2
03398:  BRA    33A0
0339A:  MOVLB  0
0339C:  GOTO   33CE
033A0:  MOVLB  0
....................          return frame_ids[i].length;
033A2:  BCF    FD8.0
033A4:  MOVLB  3
033A6:  RLCF   x9F,W
033A8:  CLRF   xA1
033AA:  MOVWF  xA0
033AC:  MOVLW  01
033AE:  ADDWF  xA0,W
033B0:  MOVWF  01
033B2:  MOVLW  00
033B4:  ADDWFC xA1,W
033B6:  MOVWF  03
033B8:  MOVF   01,W
033BA:  ADDLW  E8
033BC:  MOVWF  FE9
033BE:  MOVLW  00
033C0:  ADDWFC 03,W
033C2:  MOVWF  FEA
033C4:  MOVF   FEF,W
033C6:  MOVWF  01
033C8:  MOVLB  0
033CA:  GOTO   341C
033CE:  MOVLB  3
033D0:  INCF   x9F,F
033D2:  MOVLB  0
033D4:  GOTO   336A
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
033D8:  MOVLW  88
033DA:  MOVWF  FF6
033DC:  MOVLW  06
033DE:  MOVWF  FF7
033E0:  MOVLW  00
033E2:  MOVWF  FF8
033E4:  MOVLW  1F
033E6:  MOVLB  4
033E8:  MOVWF  x19
033EA:  MOVLB  0
033EC:  CALL   1518
033F0:  MOVFF  39E,4A4
033F4:  MOVLW  37
033F6:  MOVLB  4
033F8:  MOVWF  xA5
033FA:  MOVLB  0
033FC:  CALL   1B20
03400:  MOVLW  0D
03402:  MOVLB  4
03404:  MOVWF  xE6
03406:  MOVLB  0
03408:  CALL   1496
0340C:  MOVLW  0A
0340E:  MOVLB  4
03410:  MOVWF  xE6
03412:  MOVLB  0
03414:  CALL   1496
....................    return -1;
03418:  MOVLW  FF
0341A:  MOVWF  01
0341C:  GOTO   3712 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
0346A:  MOVLW  01
0346C:  MOVLB  3
0346E:  SUBWF  xA0,W
03470:  ADDWF  x9E,W
03472:  MOVWF  FE9
03474:  MOVLW  00
03476:  ADDWFC x9F,W
03478:  MOVWF  FEA
0347A:  MOVFF  FEF,3A1
0347E:  MOVLW  01
03480:  SUBWF  xA0,W
03482:  MOVWF  xA3
03484:  MOVFF  39F,3A5
03488:  MOVFF  39E,3A4
0348C:  MOVFF  3A3,3A6
03490:  MOVLB  0
03492:  CALL   3420
03496:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
0349A:  MOVLB  3
0349C:  MOVF   xA2,W
0349E:  SUBWF  xA1,W
034A0:  BTFSC  FD8.2
034A2:  BRA    34AA
034A4:  MOVLB  0
034A6:  GOTO   34B8
034AA:  MOVLB  0
....................       return TRUE;
034AC:  MOVLW  01
034AE:  MOVWF  01
034B0:  GOTO   3550
034B4:  GOTO   3550
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
034B8:  MOVLW  AC
034BA:  MOVWF  FF6
034BC:  MOVLW  06
034BE:  MOVWF  FF7
034C0:  MOVLW  00
034C2:  MOVWF  FF8
034C4:  CALL   14E8
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
034C8:  MOVLW  BE
034CA:  MOVWF  FF6
034CC:  MOVLW  06
034CE:  MOVWF  FF7
034D0:  MOVLW  00
034D2:  MOVWF  FF8
034D4:  MOVLW  13
034D6:  MOVLB  4
034D8:  MOVWF  x19
034DA:  MOVLB  0
034DC:  CALL   1518
034E0:  MOVFF  3A1,4A4
034E4:  MOVLW  37
034E6:  MOVLB  4
034E8:  MOVWF  xA5
034EA:  MOVLB  0
034EC:  CALL   1B20
034F0:  MOVLW  0D
034F2:  MOVLB  4
034F4:  MOVWF  xE6
034F6:  MOVLB  0
034F8:  CALL   1496
034FC:  MOVLW  0A
034FE:  MOVLB  4
03500:  MOVWF  xE6
03502:  MOVLB  0
03504:  CALL   1496
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03508:  MOVLW  D6
0350A:  MOVWF  FF6
0350C:  MOVLW  06
0350E:  MOVWF  FF7
03510:  MOVLW  00
03512:  MOVWF  FF8
03514:  MOVLW  13
03516:  MOVLB  4
03518:  MOVWF  x19
0351A:  MOVLB  0
0351C:  CALL   1518
03520:  MOVFF  3A2,4A4
03524:  MOVLW  37
03526:  MOVLB  4
03528:  MOVWF  xA5
0352A:  MOVLB  0
0352C:  CALL   1B20
03530:  MOVLW  0D
03532:  MOVLB  4
03534:  MOVWF  xE6
03536:  MOVLB  0
03538:  CALL   1496
0353C:  MOVLW  0A
0353E:  MOVLB  4
03540:  MOVWF  xE6
03542:  MOVLB  0
03544:  CALL   1496
....................       return FALSE;
03548:  MOVLW  00
0354A:  MOVWF  01
0354C:  GOTO   3550
....................    }
03550:  GOTO   374E (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03554:  MOVLB  3
03556:  MOVF   x9F,W
03558:  SUBLW  0C
0355A:  BTFSC  FD8.2
0355C:  BRA    3564
0355E:  MOVLB  0
03560:  GOTO   3572
03564:  MOVLB  0
....................       return TRUE;
03566:  MOVLW  01
03568:  MOVWF  01
0356A:  GOTO   360A
0356E:  GOTO   360A
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03572:  MOVLW  EE
03574:  MOVWF  FF6
03576:  MOVLW  06
03578:  MOVWF  FF7
0357A:  MOVLW  00
0357C:  MOVWF  FF8
0357E:  CALL   14E8
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03582:  MOVLW  10
03584:  MOVWF  FF6
03586:  MOVLW  07
03588:  MOVWF  FF7
0358A:  MOVLW  00
0358C:  MOVWF  FF8
0358E:  MOVLW  13
03590:  MOVLB  4
03592:  MOVWF  x19
03594:  MOVLB  0
03596:  CALL   1518
0359A:  MOVFF  39F,4A4
0359E:  MOVLW  37
035A0:  MOVLB  4
035A2:  MOVWF  xA5
035A4:  MOVLB  0
035A6:  CALL   1B20
035AA:  MOVLW  0D
035AC:  MOVLB  4
035AE:  MOVWF  xE6
035B0:  MOVLB  0
035B2:  CALL   1496
035B6:  MOVLW  0A
035B8:  MOVLB  4
035BA:  MOVWF  xE6
035BC:  MOVLB  0
035BE:  CALL   1496
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
035C2:  MOVLW  28
035C4:  MOVWF  FF6
035C6:  MOVLW  07
035C8:  MOVWF  FF7
035CA:  MOVLW  00
035CC:  MOVWF  FF8
035CE:  MOVLW  13
035D0:  MOVLB  4
035D2:  MOVWF  x19
035D4:  MOVLB  0
035D6:  CALL   1518
035DA:  MOVLW  0C
035DC:  MOVLB  4
035DE:  MOVWF  xA4
035E0:  MOVLW  37
035E2:  MOVWF  xA5
035E4:  MOVLB  0
035E6:  CALL   1B20
035EA:  MOVLW  0D
035EC:  MOVLB  4
035EE:  MOVWF  xE6
035F0:  MOVLB  0
035F2:  CALL   1496
035F6:  MOVLW  0A
035F8:  MOVLB  4
035FA:  MOVWF  xE6
035FC:  MOVLB  0
035FE:  CALL   1496
....................       return FALSE;  
03602:  MOVLW  00
03604:  MOVWF  01
03606:  GOTO   360A
....................    }
0360A:  GOTO   3784 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
03936:  MOVLW  AA
03938:  MOVLB  3
0393A:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
0393C:  MOVF   x86,W
0393E:  IORLW  50
03940:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
03942:  MOVLW  03
03944:  MOVWF  FEA
03946:  MOVLW  8C
03948:  MOVWF  FE9
0394A:  MOVFF  388,FE2
0394E:  MOVFF  387,FE1
03952:  MOVF   x89,W
03954:  MOVWF  01
03956:  BTFSS  FD8.2
03958:  BRA    3960
0395A:  MOVLB  0
0395C:  GOTO   396C
03960:  MOVLB  0
03962:  MOVFF  FE6,FEE
03966:  DECFSZ 01,F
03968:  GOTO   3962
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0396C:  MOVLW  02
0396E:  MOVLB  3
03970:  ADDWF  x89,W
03972:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
03974:  CLRF   03
03976:  MOVF   x9A,W
03978:  ADDLW  8A
0397A:  MOVWF  01
0397C:  MOVLW  03
0397E:  ADDWFC 03,F
03980:  MOVF   01,W
03982:  MOVWF  x9C
03984:  MOVFF  03,39D
03988:  MOVLW  01
0398A:  SUBWF  x9A,W
0398C:  MOVWF  x9E
0398E:  MOVLW  03
03990:  MOVWF  xA5
03992:  MOVLW  8B
03994:  MOVWF  xA4
03996:  MOVFF  39E,3A6
0399A:  MOVLB  0
0399C:  CALL   3420
039A0:  MOVFF  39D,FEA
039A4:  MOVFF  39C,FE9
039A8:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
039AC:  MOVLW  01
039AE:  MOVLB  3
039B0:  ADDWF  x9A,W
039B2:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
039B4:  MOVLW  03
039B6:  MOVWF  x9D
039B8:  MOVLW  8A
039BA:  MOVWF  x9C
039BC:  MOVFF  39B,39E
039C0:  MOVLB  0
039C2:  GOTO   387E
039C6:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0387E:  MOVLB  3
03880:  CLRF   x9F
03882:  MOVLB  0
03884:  MOVLB  3
03886:  MOVF   x9E,W
03888:  SUBWF  x9F,W
0388A:  BTFSS  FD8.0
0388C:  BRA    3894
0388E:  MOVLB  0
03890:  GOTO   38BA
03894:  MOVLB  0
....................       fputc(data[i], BOSS);
03896:  MOVLB  3
03898:  MOVF   x9F,W
0389A:  ADDWF  x9C,W
0389C:  MOVWF  FE9
0389E:  MOVLW  00
038A0:  ADDWFC x9D,W
038A2:  MOVWF  FEA
038A4:  MOVFF  FEF,3A1
038A8:  MOVF   xA1,W
038AA:  MOVLB  0
038AC:  GOTO   386E
038B0:  MOVLB  3
038B2:  INCF   x9F,F
038B4:  MOVLB  0
038B6:  GOTO   3884
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
038BA:  MOVLW  40
038BC:  MOVWF  FF6
038BE:  MOVLW  07
038C0:  MOVWF  FF7
038C2:  MOVLW  00
038C4:  MOVWF  FF8
038C6:  CALL   14E8
....................    for(int i = 0; i < data_size; i++)
038CA:  MOVLB  3
038CC:  CLRF   xA0
038CE:  MOVLB  0
038D0:  MOVLB  3
038D2:  MOVF   x9E,W
038D4:  SUBWF  xA0,W
038D6:  BTFSS  FD8.0
038D8:  BRA    38E0
038DA:  MOVLB  0
038DC:  GOTO   391A
038E0:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
038E2:  MOVLB  3
038E4:  MOVF   xA0,W
038E6:  ADDWF  x9C,W
038E8:  MOVWF  FE9
038EA:  MOVLW  00
038EC:  ADDWFC x9D,W
038EE:  MOVWF  FEA
038F0:  MOVFF  FEF,3A1
038F4:  MOVFF  3A1,4A4
038F8:  MOVLW  37
038FA:  MOVLB  4
038FC:  MOVWF  xA5
038FE:  MOVLB  0
03900:  CALL   1B20
03904:  MOVLW  20
03906:  MOVLB  4
03908:  MOVWF  xE6
0390A:  MOVLB  0
0390C:  CALL   1496
03910:  MOVLB  3
03912:  INCF   xA0,F
03914:  MOVLB  0
03916:  GOTO   38D0
....................    fprintf(PC, "\r\n");
0391A:  MOVLW  0D
0391C:  MOVLB  4
0391E:  MOVWF  xE6
03920:  MOVLB  0
03922:  CALL   1496
03926:  MOVLW  0A
03928:  MOVLB  4
0392A:  MOVWF  xE6
0392C:  MOVLB  0
0392E:  CALL   1496
03932:  GOTO   39C6 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... #include "communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
039C8:  MOVLW  0F
039CA:  MOVLB  3
039CC:  MOVWF  x86
039CE:  CLRF   x88
039D0:  CLRF   x87
039D2:  CLRF   x89
039D4:  MOVLB  0
039D6:  CALL   3936
039DA:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
06126:  MOVLW  03
06128:  MOVLB  3
0612A:  MOVWF  x86
0612C:  CLRF   x88
0612E:  MOVLW  1D
06130:  MOVWF  x87
06132:  MOVLW  04
06134:  MOVWF  x89
06136:  MOVLB  0
06138:  CALL   3936
0613C:  GOTO   6164 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // Include code files
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
01B90:  MOVLW  54
01B92:  MOVWF  FF6
01B94:  MOVLW  08
01B96:  MOVWF  FF7
01B98:  MOVLW  00
01B9A:  MOVWF  FF8
01B9C:  CALL   14E8
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
01BA0:  BCF    F92.5
01BA2:  BSF    F89.5
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
01BA4:  BCF    F92.2
01BA6:  BSF    F89.2
....................     
....................     if (!is_connect(mis_fm)) {
01BA8:  MOVFF  E3,4E6
01BAC:  MOVFF  E2,4E5
01BB0:  MOVFF  E1,4E4
01BB4:  MOVFF  E0,4E3
01BB8:  CALL   1848
01BBC:  MOVF   01,F
01BBE:  BTFSS  FD8.2
01BC0:  GOTO   1BDC
....................         fprintf(PC, "\tFlash is not connected\r\n");
01BC4:  MOVLW  70
01BC6:  MOVWF  FF6
01BC8:  MOVLW  08
01BCA:  MOVWF  FF7
01BCC:  MOVLW  00
01BCE:  MOVWF  FF8
01BD0:  CALL   14E8
....................         return;
01BD4:  GOTO   2440
....................     }else {
01BD8:  GOTO   1BDC
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     if (!is_connect(smf)) {
01BDC:  MOVFF  E7,4E6
01BE0:  MOVFF  E6,4E5
01BE4:  MOVFF  E5,4E4
01BE8:  MOVFF  E4,4E3
01BEC:  CALL   1848
01BF0:  MOVF   01,F
01BF2:  BTFSS  FD8.2
01BF4:  GOTO   1C10
....................         fprintf(PC, "\tSMF is not connected\r\n");
01BF8:  MOVLW  8A
01BFA:  MOVWF  FF6
01BFC:  MOVLW  08
01BFE:  MOVWF  FF7
01C00:  MOVLW  00
01C02:  MOVWF  FF8
01C04:  CALL   14E8
....................         return;
01C08:  GOTO   2440
....................     }else {
01C0C:  GOTO   1C20
....................         fprintf(PC, "\t SMF is connected\r\n");
01C10:  MOVLW  A2
01C12:  MOVWF  FF6
01C14:  MOVLW  08
01C16:  MOVWF  FF7
01C18:  MOVLW  00
01C1A:  MOVWF  FF8
01C1C:  CALL   14E8
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
01C20:  MOVFF  E3,498
01C24:  MOVFF  E2,497
01C28:  MOVFF  E1,496
01C2C:  MOVFF  E0,495
01C30:  MOVLB  4
01C32:  CLRF   x9C
01C34:  CLRF   x9B
01C36:  CLRF   x9A
01C38:  CLRF   x99
01C3A:  MOVLW  03
01C3C:  MOVWF  x9E
01C3E:  MOVLW  CD
01C40:  MOVWF  x9D
01C42:  CLRF   xA2
01C44:  CLRF   xA1
01C46:  CLRF   xA0
01C48:  MOVLW  40
01C4A:  MOVWF  x9F
01C4C:  MOVLB  0
01C4E:  CALL   1908
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
01C52:  MOVLB  4
01C54:  CLRF   x10
01C56:  CLRF   x0F
01C58:  CLRF   x0E
01C5A:  MOVFF  3CD,40D
01C5E:  MOVFF  40D,410
01C62:  CLRF   x0D
01C64:  CLRF   x0E
01C66:  CLRF   x0F
01C68:  CLRF   x15
01C6A:  CLRF   x14
01C6C:  CLRF   x13
01C6E:  MOVFF  3CE,412
01C72:  MOVFF  413,03
01C76:  MOVFF  412,02
01C7A:  CLRF   00
01C7C:  CLRF   01
01C7E:  MOVF   00,W
01C80:  IORWF  x0D,F
01C82:  MOVF   01,W
01C84:  IORWF  x0E,F
01C86:  MOVF   02,W
01C88:  IORWF  x0F,F
01C8A:  MOVF   03,W
01C8C:  IORWF  x10,F
01C8E:  CLRF   x15
01C90:  CLRF   x14
01C92:  CLRF   x13
01C94:  MOVFF  3CF,412
01C98:  MOVFF  414,03
01C9C:  MOVFF  413,02
01CA0:  MOVFF  412,01
01CA4:  CLRF   00
01CA6:  MOVF   00,W
01CA8:  IORWF  x0D,F
01CAA:  MOVF   01,W
01CAC:  IORWF  x0E,F
01CAE:  MOVF   02,W
01CB0:  IORWF  x0F,F
01CB2:  MOVF   03,W
01CB4:  IORWF  x10,F
01CB6:  MOVFF  3D0,00
01CBA:  CLRF   01
01CBC:  CLRF   02
01CBE:  CLRF   03
01CC0:  MOVF   00,W
01CC2:  IORWF  x0D,W
01CC4:  MOVLB  3
01CC6:  MOVWF  x58
01CC8:  MOVF   01,W
01CCA:  MOVLB  4
01CCC:  IORWF  x0E,W
01CCE:  MOVLB  3
01CD0:  MOVWF  x59
01CD2:  MOVF   02,W
01CD4:  MOVLB  4
01CD6:  IORWF  x0F,W
01CD8:  MOVLB  3
01CDA:  MOVWF  x5A
01CDC:  MOVF   03,W
01CDE:  MOVLB  4
01CE0:  IORWF  x10,W
01CE2:  MOVLB  3
01CE4:  MOVWF  x5B
....................     smf_piclog_loop_counter = readdata[4];
01CE6:  MOVFF  3D1,35C
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
01CEA:  MOVLB  4
01CEC:  CLRF   x10
01CEE:  CLRF   x0F
01CF0:  CLRF   x0E
01CF2:  MOVFF  3D2,40D
01CF6:  MOVFF  40D,410
01CFA:  CLRF   x0D
01CFC:  CLRF   x0E
01CFE:  CLRF   x0F
01D00:  CLRF   x15
01D02:  CLRF   x14
01D04:  CLRF   x13
01D06:  MOVFF  3D3,412
01D0A:  MOVFF  413,03
01D0E:  MOVFF  412,02
01D12:  CLRF   00
01D14:  CLRF   01
01D16:  MOVF   00,W
01D18:  IORWF  x0D,F
01D1A:  MOVF   01,W
01D1C:  IORWF  x0E,F
01D1E:  MOVF   02,W
01D20:  IORWF  x0F,F
01D22:  MOVF   03,W
01D24:  IORWF  x10,F
01D26:  CLRF   x15
01D28:  CLRF   x14
01D2A:  CLRF   x13
01D2C:  MOVFF  3D4,412
01D30:  MOVFF  414,03
01D34:  MOVFF  413,02
01D38:  MOVFF  412,01
01D3C:  CLRF   00
01D3E:  MOVF   00,W
01D40:  IORWF  x0D,F
01D42:  MOVF   01,W
01D44:  IORWF  x0E,F
01D46:  MOVF   02,W
01D48:  IORWF  x0F,F
01D4A:  MOVF   03,W
01D4C:  IORWF  x10,F
01D4E:  MOVFF  3D5,00
01D52:  CLRF   01
01D54:  CLRF   02
01D56:  CLRF   03
01D58:  MOVF   00,W
01D5A:  IORWF  x0D,W
01D5C:  MOVLB  3
01D5E:  MOVWF  x5D
01D60:  MOVF   01,W
01D62:  MOVLB  4
01D64:  IORWF  x0E,W
01D66:  MOVLB  3
01D68:  MOVWF  x5E
01D6A:  MOVF   02,W
01D6C:  MOVLB  4
01D6E:  IORWF  x0F,W
01D70:  MOVLB  3
01D72:  MOVWF  x5F
01D74:  MOVF   03,W
01D76:  MOVLB  4
01D78:  IORWF  x10,W
01D7A:  MOVLB  3
01D7C:  MOVWF  x60
....................     smf_meas_loop_counter = readdata[9];
01D7E:  MOVFF  3D6,361
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
01D82:  MOVLB  4
01D84:  CLRF   x10
01D86:  CLRF   x0F
01D88:  CLRF   x0E
01D8A:  MOVFF  3D7,40D
01D8E:  MOVFF  40D,410
01D92:  CLRF   x0D
01D94:  CLRF   x0E
01D96:  CLRF   x0F
01D98:  CLRF   x15
01D9A:  CLRF   x14
01D9C:  CLRF   x13
01D9E:  MOVFF  3D8,412
01DA2:  MOVFF  413,03
01DA6:  MOVFF  412,02
01DAA:  CLRF   00
01DAC:  CLRF   01
01DAE:  MOVF   00,W
01DB0:  IORWF  x0D,F
01DB2:  MOVF   01,W
01DB4:  IORWF  x0E,F
01DB6:  MOVF   02,W
01DB8:  IORWF  x0F,F
01DBA:  MOVF   03,W
01DBC:  IORWF  x10,F
01DBE:  CLRF   x15
01DC0:  CLRF   x14
01DC2:  CLRF   x13
01DC4:  MOVFF  3D9,412
01DC8:  MOVFF  414,03
01DCC:  MOVFF  413,02
01DD0:  MOVFF  412,01
01DD4:  CLRF   00
01DD6:  MOVF   00,W
01DD8:  IORWF  x0D,F
01DDA:  MOVF   01,W
01DDC:  IORWF  x0E,F
01DDE:  MOVF   02,W
01DE0:  IORWF  x0F,F
01DE2:  MOVF   03,W
01DE4:  IORWF  x10,F
01DE6:  MOVFF  3DA,00
01DEA:  CLRF   01
01DEC:  CLRF   02
01DEE:  CLRF   03
01DF0:  MOVF   00,W
01DF2:  IORWF  x0D,W
01DF4:  MOVLB  3
01DF6:  MOVWF  x62
01DF8:  MOVF   01,W
01DFA:  MOVLB  4
01DFC:  IORWF  x0E,W
01DFE:  MOVLB  3
01E00:  MOVWF  x63
01E02:  MOVF   02,W
01E04:  MOVLB  4
01E06:  IORWF  x0F,W
01E08:  MOVLB  3
01E0A:  MOVWF  x64
01E0C:  MOVF   03,W
01E0E:  MOVLB  4
01E10:  IORWF  x10,W
01E12:  MOVLB  3
01E14:  MOVWF  x65
....................     misf_piclog_loop_counter = readdata[14];
01E16:  MOVFF  3DB,366
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
01E1A:  MOVLB  4
01E1C:  CLRF   x10
01E1E:  CLRF   x0F
01E20:  CLRF   x0E
01E22:  MOVFF  3DC,40D
01E26:  MOVFF  40D,410
01E2A:  CLRF   x0D
01E2C:  CLRF   x0E
01E2E:  CLRF   x0F
01E30:  CLRF   x15
01E32:  CLRF   x14
01E34:  CLRF   x13
01E36:  MOVFF  3DD,412
01E3A:  MOVFF  413,03
01E3E:  MOVFF  412,02
01E42:  CLRF   00
01E44:  CLRF   01
01E46:  MOVF   00,W
01E48:  IORWF  x0D,F
01E4A:  MOVF   01,W
01E4C:  IORWF  x0E,F
01E4E:  MOVF   02,W
01E50:  IORWF  x0F,F
01E52:  MOVF   03,W
01E54:  IORWF  x10,F
01E56:  CLRF   x15
01E58:  CLRF   x14
01E5A:  CLRF   x13
01E5C:  MOVFF  3DE,412
01E60:  MOVFF  414,03
01E64:  MOVFF  413,02
01E68:  MOVFF  412,01
01E6C:  CLRF   00
01E6E:  MOVF   00,W
01E70:  IORWF  x0D,F
01E72:  MOVF   01,W
01E74:  IORWF  x0E,F
01E76:  MOVF   02,W
01E78:  IORWF  x0F,F
01E7A:  MOVF   03,W
01E7C:  IORWF  x10,F
01E7E:  MOVFF  3DF,00
01E82:  CLRF   01
01E84:  CLRF   02
01E86:  CLRF   03
01E88:  MOVF   00,W
01E8A:  IORWF  x0D,W
01E8C:  MOVLB  3
01E8E:  MOVWF  x67
01E90:  MOVF   01,W
01E92:  MOVLB  4
01E94:  IORWF  x0E,W
01E96:  MOVLB  3
01E98:  MOVWF  x68
01E9A:  MOVF   02,W
01E9C:  MOVLB  4
01E9E:  IORWF  x0F,W
01EA0:  MOVLB  3
01EA2:  MOVWF  x69
01EA4:  MOVF   03,W
01EA6:  MOVLB  4
01EA8:  IORWF  x10,W
01EAA:  MOVLB  3
01EAC:  MOVWF  x6A
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
01EAE:  MOVLB  4
01EB0:  CLRF   x10
01EB2:  CLRF   x0F
01EB4:  CLRF   x0E
01EB6:  MOVFF  3E0,40D
01EBA:  MOVFF  40D,410
01EBE:  CLRF   x0D
01EC0:  CLRF   x0E
01EC2:  CLRF   x0F
01EC4:  CLRF   x15
01EC6:  CLRF   x14
01EC8:  CLRF   x13
01ECA:  MOVFF  3E1,412
01ECE:  MOVFF  413,03
01ED2:  MOVFF  412,02
01ED6:  CLRF   00
01ED8:  CLRF   01
01EDA:  MOVF   00,W
01EDC:  IORWF  x0D,F
01EDE:  MOVF   01,W
01EE0:  IORWF  x0E,F
01EE2:  MOVF   02,W
01EE4:  IORWF  x0F,F
01EE6:  MOVF   03,W
01EE8:  IORWF  x10,F
01EEA:  CLRF   x15
01EEC:  CLRF   x14
01EEE:  CLRF   x13
01EF0:  MOVFF  3E2,412
01EF4:  MOVFF  414,03
01EF8:  MOVFF  413,02
01EFC:  MOVFF  412,01
01F00:  CLRF   00
01F02:  MOVF   00,W
01F04:  IORWF  x0D,F
01F06:  MOVF   01,W
01F08:  IORWF  x0E,F
01F0A:  MOVF   02,W
01F0C:  IORWF  x0F,F
01F0E:  MOVF   03,W
01F10:  IORWF  x10,F
01F12:  MOVFF  3E3,00
01F16:  CLRF   01
01F18:  CLRF   02
01F1A:  CLRF   03
01F1C:  MOVF   00,W
01F1E:  IORWF  x0D,W
01F20:  MOVLB  3
01F22:  MOVWF  x6B
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
01F24:  MOVLB  4
01F26:  CLRF   x10
01F28:  CLRF   x0F
01F2A:  CLRF   x0E
01F2C:  MOVFF  3E4,40D
01F30:  MOVFF  40D,410
01F34:  CLRF   x0D
01F36:  CLRF   x0E
01F38:  CLRF   x0F
01F3A:  CLRF   x15
01F3C:  CLRF   x14
01F3E:  CLRF   x13
01F40:  MOVFF  3E5,412
01F44:  MOVFF  413,03
01F48:  MOVFF  412,02
01F4C:  CLRF   00
01F4E:  CLRF   01
01F50:  MOVF   00,W
01F52:  IORWF  x0D,F
01F54:  MOVF   01,W
01F56:  IORWF  x0E,F
01F58:  MOVF   02,W
01F5A:  IORWF  x0F,F
01F5C:  MOVF   03,W
01F5E:  IORWF  x10,F
01F60:  CLRF   x15
01F62:  CLRF   x14
01F64:  CLRF   x13
01F66:  MOVFF  3E6,412
01F6A:  MOVFF  414,03
01F6E:  MOVFF  413,02
01F72:  MOVFF  412,01
01F76:  CLRF   00
01F78:  MOVF   00,W
01F7A:  IORWF  x0D,F
01F7C:  MOVF   01,W
01F7E:  IORWF  x0E,F
01F80:  MOVF   02,W
01F82:  IORWF  x0F,F
01F84:  MOVF   03,W
01F86:  IORWF  x10,F
01F88:  MOVFF  3E7,00
01F8C:  CLRF   01
01F8E:  CLRF   02
01F90:  CLRF   03
01F92:  MOVF   00,W
01F94:  IORWF  x0D,W
01F96:  MOVLB  3
01F98:  MOVWF  x6C
01F9A:  MOVF   01,W
01F9C:  MOVLB  4
01F9E:  IORWF  x0E,W
01FA0:  MOVLB  3
01FA2:  MOVWF  x6D
01FA4:  MOVF   02,W
01FA6:  MOVLB  4
01FA8:  IORWF  x0F,W
01FAA:  MOVLB  3
01FAC:  MOVWF  x6E
01FAE:  MOVF   03,W
01FB0:  MOVLB  4
01FB2:  IORWF  x10,W
01FB4:  MOVLB  3
01FB6:  MOVWF  x6F
....................     misf_meas_loop_counter = readdata[27];
01FB8:  MOVFF  3E8,370
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
01FBC:  MOVLB  4
01FBE:  CLRF   x10
01FC0:  CLRF   x0F
01FC2:  CLRF   x0E
01FC4:  MOVFF  3E9,40D
01FC8:  MOVFF  40D,410
01FCC:  CLRF   x0D
01FCE:  CLRF   x0E
01FD0:  CLRF   x0F
01FD2:  CLRF   x15
01FD4:  CLRF   x14
01FD6:  CLRF   x13
01FD8:  MOVFF  3EA,412
01FDC:  MOVFF  413,03
01FE0:  MOVFF  412,02
01FE4:  CLRF   00
01FE6:  CLRF   01
01FE8:  MOVF   00,W
01FEA:  IORWF  x0D,F
01FEC:  MOVF   01,W
01FEE:  IORWF  x0E,F
01FF0:  MOVF   02,W
01FF2:  IORWF  x0F,F
01FF4:  MOVF   03,W
01FF6:  IORWF  x10,F
01FF8:  CLRF   x15
01FFA:  CLRF   x14
01FFC:  CLRF   x13
01FFE:  MOVFF  3EB,412
02002:  MOVFF  414,03
02006:  MOVFF  413,02
0200A:  MOVFF  412,01
0200E:  CLRF   00
02010:  MOVF   00,W
02012:  IORWF  x0D,F
02014:  MOVF   01,W
02016:  IORWF  x0E,F
02018:  MOVF   02,W
0201A:  IORWF  x0F,F
0201C:  MOVF   03,W
0201E:  IORWF  x10,F
02020:  MOVFF  3EC,00
02024:  CLRF   01
02026:  CLRF   02
02028:  CLRF   03
0202A:  MOVF   00,W
0202C:  IORWF  x0D,W
0202E:  MOVLB  3
02030:  MOVWF  x71
02032:  MOVF   01,W
02034:  MOVLB  4
02036:  IORWF  x0E,W
02038:  MOVLB  3
0203A:  MOVWF  x72
0203C:  MOVF   02,W
0203E:  MOVLB  4
02040:  IORWF  x0F,W
02042:  MOVLB  3
02044:  MOVWF  x73
02046:  MOVF   03,W
02048:  MOVLB  4
0204A:  IORWF  x10,W
0204C:  MOVLB  3
0204E:  MOVWF  x74
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02050:  MOVLW  B8
02052:  MOVWF  FF6
02054:  MOVLW  08
02056:  MOVWF  FF7
02058:  MOVLW  00
0205A:  MOVWF  FF8
0205C:  MOVLW  22
0205E:  MOVLB  4
02060:  MOVWF  x19
02062:  MOVLB  0
02064:  CALL   1518
02068:  MOVFF  35B,4A4
0206C:  MOVLW  37
0206E:  MOVLB  4
02070:  MOVWF  xA5
02072:  MOVLB  0
02074:  CALL   1B20
02078:  MOVFF  35A,4A4
0207C:  MOVLW  37
0207E:  MOVLB  4
02080:  MOVWF  xA5
02082:  MOVLB  0
02084:  CALL   1B20
02088:  MOVFF  359,4A4
0208C:  MOVLW  37
0208E:  MOVLB  4
02090:  MOVWF  xA5
02092:  MOVLB  0
02094:  CALL   1B20
02098:  MOVFF  358,4A4
0209C:  MOVLW  37
0209E:  MOVLB  4
020A0:  MOVWF  xA5
020A2:  MOVLB  0
020A4:  CALL   1B20
020A8:  MOVLW  0D
020AA:  MOVLB  4
020AC:  MOVWF  xE6
020AE:  MOVLB  0
020B0:  CALL   1496
020B4:  MOVLW  0A
020B6:  MOVLB  4
020B8:  MOVWF  xE6
020BA:  MOVLB  0
020BC:  CALL   1496
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
020C0:  MOVLW  E2
020C2:  MOVWF  FF6
020C4:  MOVLW  08
020C6:  MOVWF  FF7
020C8:  MOVLW  00
020CA:  MOVWF  FF8
020CC:  MOVLW  22
020CE:  MOVLB  4
020D0:  MOVWF  x19
020D2:  MOVLB  0
020D4:  CALL   1518
020D8:  MOVFF  35C,4A4
020DC:  MOVLW  37
020DE:  MOVLB  4
020E0:  MOVWF  xA5
020E2:  MOVLB  0
020E4:  CALL   1B20
020E8:  MOVLW  0D
020EA:  MOVLB  4
020EC:  MOVWF  xE6
020EE:  MOVLB  0
020F0:  CALL   1496
020F4:  MOVLW  0A
020F6:  MOVLB  4
020F8:  MOVWF  xE6
020FA:  MOVLB  0
020FC:  CALL   1496
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02100:  MOVLW  0C
02102:  MOVWF  FF6
02104:  MOVLW  09
02106:  MOVWF  FF7
02108:  MOVLW  00
0210A:  MOVWF  FF8
0210C:  MOVLW  22
0210E:  MOVLB  4
02110:  MOVWF  x19
02112:  MOVLB  0
02114:  CALL   1518
02118:  MOVFF  360,4A4
0211C:  MOVLW  37
0211E:  MOVLB  4
02120:  MOVWF  xA5
02122:  MOVLB  0
02124:  CALL   1B20
02128:  MOVFF  35F,4A4
0212C:  MOVLW  37
0212E:  MOVLB  4
02130:  MOVWF  xA5
02132:  MOVLB  0
02134:  CALL   1B20
02138:  MOVFF  35E,4A4
0213C:  MOVLW  37
0213E:  MOVLB  4
02140:  MOVWF  xA5
02142:  MOVLB  0
02144:  CALL   1B20
02148:  MOVFF  35D,4A4
0214C:  MOVLW  37
0214E:  MOVLB  4
02150:  MOVWF  xA5
02152:  MOVLB  0
02154:  CALL   1B20
02158:  MOVLW  0D
0215A:  MOVLB  4
0215C:  MOVWF  xE6
0215E:  MOVLB  0
02160:  CALL   1496
02164:  MOVLW  0A
02166:  MOVLB  4
02168:  MOVWF  xE6
0216A:  MOVLB  0
0216C:  CALL   1496
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02170:  MOVLW  36
02172:  MOVWF  FF6
02174:  MOVLW  09
02176:  MOVWF  FF7
02178:  MOVLW  00
0217A:  MOVWF  FF8
0217C:  MOVLW  22
0217E:  MOVLB  4
02180:  MOVWF  x19
02182:  MOVLB  0
02184:  CALL   1518
02188:  MOVFF  361,4A4
0218C:  MOVLW  37
0218E:  MOVLB  4
02190:  MOVWF  xA5
02192:  MOVLB  0
02194:  CALL   1B20
02198:  MOVLW  0D
0219A:  MOVLB  4
0219C:  MOVWF  xE6
0219E:  MOVLB  0
021A0:  CALL   1496
021A4:  MOVLW  0A
021A6:  MOVLB  4
021A8:  MOVWF  xE6
021AA:  MOVLB  0
021AC:  CALL   1496
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
021B0:  MOVLW  60
021B2:  MOVWF  FF6
021B4:  MOVLW  09
021B6:  MOVWF  FF7
021B8:  MOVLW  00
021BA:  MOVWF  FF8
021BC:  MOVLW  22
021BE:  MOVLB  4
021C0:  MOVWF  x19
021C2:  MOVLB  0
021C4:  CALL   1518
021C8:  MOVFF  365,4A4
021CC:  MOVLW  37
021CE:  MOVLB  4
021D0:  MOVWF  xA5
021D2:  MOVLB  0
021D4:  CALL   1B20
021D8:  MOVFF  364,4A4
021DC:  MOVLW  37
021DE:  MOVLB  4
021E0:  MOVWF  xA5
021E2:  MOVLB  0
021E4:  CALL   1B20
021E8:  MOVFF  363,4A4
021EC:  MOVLW  37
021EE:  MOVLB  4
021F0:  MOVWF  xA5
021F2:  MOVLB  0
021F4:  CALL   1B20
021F8:  MOVFF  362,4A4
021FC:  MOVLW  37
021FE:  MOVLB  4
02200:  MOVWF  xA5
02202:  MOVLB  0
02204:  CALL   1B20
02208:  MOVLW  0D
0220A:  MOVLB  4
0220C:  MOVWF  xE6
0220E:  MOVLB  0
02210:  CALL   1496
02214:  MOVLW  0A
02216:  MOVLB  4
02218:  MOVWF  xE6
0221A:  MOVLB  0
0221C:  CALL   1496
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02220:  MOVLW  8A
02222:  MOVWF  FF6
02224:  MOVLW  09
02226:  MOVWF  FF7
02228:  MOVLW  00
0222A:  MOVWF  FF8
0222C:  MOVLW  22
0222E:  MOVLB  4
02230:  MOVWF  x19
02232:  MOVLB  0
02234:  CALL   1518
02238:  MOVFF  36A,4A4
0223C:  MOVLW  37
0223E:  MOVLB  4
02240:  MOVWF  xA5
02242:  MOVLB  0
02244:  CALL   1B20
02248:  MOVFF  369,4A4
0224C:  MOVLW  37
0224E:  MOVLB  4
02250:  MOVWF  xA5
02252:  MOVLB  0
02254:  CALL   1B20
02258:  MOVFF  368,4A4
0225C:  MOVLW  37
0225E:  MOVLB  4
02260:  MOVWF  xA5
02262:  MOVLB  0
02264:  CALL   1B20
02268:  MOVFF  367,4A4
0226C:  MOVLW  37
0226E:  MOVLB  4
02270:  MOVWF  xA5
02272:  MOVLB  0
02274:  CALL   1B20
02278:  MOVLW  0D
0227A:  MOVLB  4
0227C:  MOVWF  xE6
0227E:  MOVLB  0
02280:  CALL   1496
02284:  MOVLW  0A
02286:  MOVLB  4
02288:  MOVWF  xE6
0228A:  MOVLB  0
0228C:  CALL   1496
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02290:  MOVLW  B4
02292:  MOVWF  FF6
02294:  MOVLW  09
02296:  MOVWF  FF7
02298:  MOVLW  00
0229A:  MOVWF  FF8
0229C:  MOVLW  22
0229E:  MOVLB  4
022A0:  MOVWF  x19
022A2:  MOVLB  0
022A4:  CALL   1518
022A8:  MOVFF  366,4A4
022AC:  MOVLW  37
022AE:  MOVLB  4
022B0:  MOVWF  xA5
022B2:  MOVLB  0
022B4:  CALL   1B20
022B8:  MOVLW  0D
022BA:  MOVLB  4
022BC:  MOVWF  xE6
022BE:  MOVLB  0
022C0:  CALL   1496
022C4:  MOVLW  0A
022C6:  MOVLB  4
022C8:  MOVWF  xE6
022CA:  MOVLB  0
022CC:  CALL   1496
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
022D0:  MOVLW  DE
022D2:  MOVWF  FF6
022D4:  MOVLW  09
022D6:  MOVWF  FF7
022D8:  MOVLW  00
022DA:  MOVWF  FF8
022DC:  MOVLW  22
022DE:  MOVLB  4
022E0:  MOVWF  x19
022E2:  MOVLB  0
022E4:  CALL   1518
022E8:  MOVFF  36B,4A4
022EC:  MOVLW  37
022EE:  MOVLB  4
022F0:  MOVWF  xA5
022F2:  MOVLB  0
022F4:  CALL   1B20
022F8:  MOVLW  0D
022FA:  MOVLB  4
022FC:  MOVWF  xE6
022FE:  MOVLB  0
02300:  CALL   1496
02304:  MOVLW  0A
02306:  MOVLB  4
02308:  MOVWF  xE6
0230A:  MOVLB  0
0230C:  CALL   1496
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02310:  MOVLW  08
02312:  MOVWF  FF6
02314:  MOVLW  0A
02316:  MOVWF  FF7
02318:  MOVLW  00
0231A:  MOVWF  FF8
0231C:  MOVLW  22
0231E:  MOVLB  4
02320:  MOVWF  x19
02322:  MOVLB  0
02324:  CALL   1518
02328:  MOVFF  36F,4A4
0232C:  MOVLW  37
0232E:  MOVLB  4
02330:  MOVWF  xA5
02332:  MOVLB  0
02334:  CALL   1B20
02338:  MOVFF  36E,4A4
0233C:  MOVLW  37
0233E:  MOVLB  4
02340:  MOVWF  xA5
02342:  MOVLB  0
02344:  CALL   1B20
02348:  MOVFF  36D,4A4
0234C:  MOVLW  37
0234E:  MOVLB  4
02350:  MOVWF  xA5
02352:  MOVLB  0
02354:  CALL   1B20
02358:  MOVFF  36C,4A4
0235C:  MOVLW  37
0235E:  MOVLB  4
02360:  MOVWF  xA5
02362:  MOVLB  0
02364:  CALL   1B20
02368:  MOVLW  0D
0236A:  MOVLB  4
0236C:  MOVWF  xE6
0236E:  MOVLB  0
02370:  CALL   1496
02374:  MOVLW  0A
02376:  MOVLB  4
02378:  MOVWF  xE6
0237A:  MOVLB  0
0237C:  CALL   1496
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02380:  MOVLW  32
02382:  MOVWF  FF6
02384:  MOVLW  0A
02386:  MOVWF  FF7
02388:  MOVLW  00
0238A:  MOVWF  FF8
0238C:  MOVLW  22
0238E:  MOVLB  4
02390:  MOVWF  x19
02392:  MOVLB  0
02394:  CALL   1518
02398:  MOVFF  374,4A4
0239C:  MOVLW  37
0239E:  MOVLB  4
023A0:  MOVWF  xA5
023A2:  MOVLB  0
023A4:  CALL   1B20
023A8:  MOVFF  373,4A4
023AC:  MOVLW  37
023AE:  MOVLB  4
023B0:  MOVWF  xA5
023B2:  MOVLB  0
023B4:  CALL   1B20
023B8:  MOVFF  372,4A4
023BC:  MOVLW  37
023BE:  MOVLB  4
023C0:  MOVWF  xA5
023C2:  MOVLB  0
023C4:  CALL   1B20
023C8:  MOVFF  371,4A4
023CC:  MOVLW  37
023CE:  MOVLB  4
023D0:  MOVWF  xA5
023D2:  MOVLB  0
023D4:  CALL   1B20
023D8:  MOVLW  0D
023DA:  MOVLB  4
023DC:  MOVWF  xE6
023DE:  MOVLB  0
023E0:  CALL   1496
023E4:  MOVLW  0A
023E6:  MOVLB  4
023E8:  MOVWF  xE6
023EA:  MOVLB  0
023EC:  CALL   1496
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
023F0:  MOVLW  5C
023F2:  MOVWF  FF6
023F4:  MOVLW  0A
023F6:  MOVWF  FF7
023F8:  MOVLW  00
023FA:  MOVWF  FF8
023FC:  MOVLW  22
023FE:  MOVLB  4
02400:  MOVWF  x19
02402:  MOVLB  0
02404:  CALL   1518
02408:  MOVFF  370,4A4
0240C:  MOVLW  37
0240E:  MOVLB  4
02410:  MOVWF  xA5
02412:  MOVLB  0
02414:  CALL   1B20
02418:  MOVLW  0D
0241A:  MOVLB  4
0241C:  MOVWF  xE6
0241E:  MOVLB  0
02420:  CALL   1496
02424:  MOVLW  0A
02426:  MOVLB  4
02428:  MOVWF  xE6
0242A:  MOVLB  0
0242C:  CALL   1496
....................     fprintf(PC, "\tComplete\r\n");
02430:  MOVLW  86
02432:  MOVWF  FF6
02434:  MOVLW  0A
02436:  MOVWF  FF7
02438:  MOVLW  00
0243A:  MOVWF  FF8
0243C:  CALL   14E8
02440:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
02E40:  MOVLB  4
02E42:  CLRF   xA3
02E44:  CLRF   xA4
02E46:  CLRF   xA5
02E48:  CLRF   xA6
02E4A:  CLRF   xA7
02E4C:  CLRF   xA8
02E4E:  CLRF   xA9
02E50:  CLRF   xAA
02E52:  CLRF   xAB
02E54:  CLRF   xAC
02E56:  CLRF   xAD
02E58:  CLRF   xAE
02E5A:  CLRF   xAF
02E5C:  CLRF   xB0
02E5E:  CLRF   xB1
02E60:  CLRF   xB2
02E62:  CLRF   xB3
02E64:  CLRF   xB4
02E66:  CLRF   xB5
02E68:  CLRF   xB6
02E6A:  CLRF   xB7
02E6C:  CLRF   xB8
02E6E:  CLRF   xB9
02E70:  CLRF   xBA
02E72:  CLRF   xBB
02E74:  CLRF   xBC
02E76:  CLRF   xBD
02E78:  CLRF   xBE
02E7A:  CLRF   xBF
02E7C:  CLRF   xC0
02E7E:  CLRF   xC1
02E80:  CLRF   xC2
02E82:  CLRF   xC3
02E84:  CLRF   xC4
02E86:  CLRF   xC5
02E88:  CLRF   xC6
02E8A:  CLRF   xC7
02E8C:  CLRF   xC8
02E8E:  CLRF   xC9
02E90:  CLRF   xCA
02E92:  CLRF   xCB
02E94:  CLRF   xCC
02E96:  CLRF   xCD
02E98:  CLRF   xCE
02E9A:  CLRF   xCF
02E9C:  CLRF   xD0
02E9E:  CLRF   xD1
02EA0:  CLRF   xD2
02EA2:  CLRF   xD3
02EA4:  CLRF   xD4
02EA6:  CLRF   xD5
02EA8:  CLRF   xD6
02EAA:  CLRF   xD7
02EAC:  CLRF   xD8
02EAE:  CLRF   xD9
02EB0:  CLRF   xDA
02EB2:  CLRF   xDB
02EB4:  CLRF   xDC
02EB6:  CLRF   xDD
02EB8:  CLRF   xDE
02EBA:  CLRF   xDF
02EBC:  CLRF   xE0
02EBE:  CLRF   xE1
02EC0:  CLRF   xE2
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
02EC2:  MOVFF  35B,4E4
02EC6:  CLRF   xE5
02EC8:  CLRF   xE6
02ECA:  CLRF   xE7
02ECC:  MOVF   xE4,W
02ECE:  MOVWF  xA3
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
02ED0:  MOVFF  35A,4E4
02ED4:  MOVFF  35B,4E5
02ED8:  CLRF   xE6
02EDA:  CLRF   xE7
02EDC:  MOVF   xE4,W
02EDE:  MOVWF  xA4
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
02EE0:  MOVFF  359,4E4
02EE4:  MOVFF  35A,4E5
02EE8:  MOVFF  35B,4E6
02EEC:  CLRF   xE7
02EEE:  MOVF   xE4,W
02EF0:  MOVWF  xA5
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
02EF2:  MOVLB  3
02EF4:  MOVF   x58,W
02EF6:  MOVLB  4
02EF8:  MOVWF  xA6
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
02EFA:  MOVFF  35C,4A7
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
02EFE:  MOVFF  360,4E4
02F02:  CLRF   xE5
02F04:  CLRF   xE6
02F06:  CLRF   xE7
02F08:  MOVF   xE4,W
02F0A:  MOVWF  xA8
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
02F0C:  MOVFF  35F,4E4
02F10:  MOVFF  360,4E5
02F14:  CLRF   xE6
02F16:  CLRF   xE7
02F18:  MOVF   xE4,W
02F1A:  MOVWF  xA9
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
02F1C:  MOVFF  35E,4E4
02F20:  MOVFF  35F,4E5
02F24:  MOVFF  360,4E6
02F28:  CLRF   xE7
02F2A:  MOVF   xE4,W
02F2C:  MOVWF  xAA
....................     writedata[8] = smf_meas_use_counter & 0xFF;
02F2E:  MOVLB  3
02F30:  MOVF   x5D,W
02F32:  MOVLB  4
02F34:  MOVWF  xAB
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
02F36:  MOVFF  361,4AC
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
02F3A:  MOVFF  365,4E4
02F3E:  CLRF   xE5
02F40:  CLRF   xE6
02F42:  CLRF   xE7
02F44:  MOVF   xE4,W
02F46:  MOVWF  xAD
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
02F48:  MOVFF  364,4E4
02F4C:  MOVFF  365,4E5
02F50:  CLRF   xE6
02F52:  CLRF   xE7
02F54:  MOVF   xE4,W
02F56:  MOVWF  xAE
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
02F58:  MOVFF  363,4E4
02F5C:  MOVFF  364,4E5
02F60:  MOVFF  365,4E6
02F64:  CLRF   xE7
02F66:  MOVF   xE4,W
02F68:  MOVWF  xAF
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
02F6A:  MOVLB  3
02F6C:  MOVF   x62,W
02F6E:  MOVLB  4
02F70:  MOVWF  xB0
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
02F72:  MOVFF  366,4B1
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
02F76:  MOVFF  36A,4E4
02F7A:  CLRF   xE5
02F7C:  CLRF   xE6
02F7E:  CLRF   xE7
02F80:  MOVF   xE4,W
02F82:  MOVWF  xB2
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
02F84:  MOVFF  369,4E4
02F88:  MOVFF  36A,4E5
02F8C:  CLRF   xE6
02F8E:  CLRF   xE7
02F90:  MOVF   xE4,W
02F92:  MOVWF  xB3
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
02F94:  MOVFF  368,4E4
02F98:  MOVFF  369,4E5
02F9C:  MOVFF  36A,4E6
02FA0:  CLRF   xE7
02FA2:  MOVF   xE4,W
02FA4:  MOVWF  xB4
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
02FA6:  MOVLB  3
02FA8:  MOVF   x67,W
02FAA:  MOVLB  4
02FAC:  MOVWF  xB5
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
02FAE:  MOVLW  00
02FB0:  MOVWF  xB6
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
02FB2:  MOVLW  00
02FB4:  MOVWF  xB7
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
02FB6:  MOVLW  00
02FB8:  MOVWF  xB8
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
02FBA:  MOVLB  3
02FBC:  MOVF   x6B,W
02FBE:  MOVLB  4
02FC0:  MOVWF  xB9
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
02FC2:  MOVFF  36F,4E4
02FC6:  CLRF   xE5
02FC8:  CLRF   xE6
02FCA:  CLRF   xE7
02FCC:  MOVF   xE4,W
02FCE:  MOVWF  xBA
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
02FD0:  MOVFF  36E,4E4
02FD4:  MOVFF  36F,4E5
02FD8:  CLRF   xE6
02FDA:  CLRF   xE7
02FDC:  MOVF   xE4,W
02FDE:  MOVWF  xBB
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
02FE0:  MOVFF  36D,4E4
02FE4:  MOVFF  36E,4E5
02FE8:  MOVFF  36F,4E6
02FEC:  CLRF   xE7
02FEE:  MOVF   xE4,W
02FF0:  MOVWF  xBC
....................     writedata[26] = misf_meas_use_counter & 0xFF;
02FF2:  MOVLB  3
02FF4:  MOVF   x6C,W
02FF6:  MOVLB  4
02FF8:  MOVWF  xBD
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
02FFA:  MOVFF  370,4BE
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
02FFE:  MOVFF  374,4E4
03002:  CLRF   xE5
03004:  CLRF   xE6
03006:  CLRF   xE7
03008:  MOVF   xE4,W
0300A:  MOVWF  xBF
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
0300C:  MOVFF  373,4E4
03010:  MOVFF  374,4E5
03014:  CLRF   xE6
03016:  CLRF   xE7
03018:  MOVF   xE4,W
0301A:  MOVWF  xC0
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
0301C:  MOVFF  372,4E4
03020:  MOVFF  373,4E5
03024:  MOVFF  374,4E6
03028:  CLRF   xE7
0302A:  MOVF   xE4,W
0302C:  MOVWF  xC1
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
0302E:  MOVLB  3
03030:  MOVF   x71,W
03032:  MOVLB  4
03034:  MOVWF  xC2
.................... 
....................     if (!is_connect(mis_fm)) {
03036:  MOVFF  E3,4E6
0303A:  MOVFF  E2,4E5
0303E:  MOVFF  E1,4E4
03042:  MOVFF  E0,4E3
03046:  MOVLB  0
03048:  CALL   1848
0304C:  MOVF   01,F
0304E:  BTFSS  FD8.2
03050:  GOTO   3068
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03054:  MOVLW  92
03056:  MOVWF  FF6
03058:  MOVLW  0A
0305A:  MOVWF  FF7
0305C:  MOVLW  00
0305E:  MOVWF  FF8
03060:  CALL   14E8
....................         return;
03064:  GOTO   30C6
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03068:  MOVFF  E3,4E6
0306C:  MOVFF  E2,4E5
03070:  MOVFF  E1,4E4
03074:  MOVFF  E0,4E3
03078:  MOVLB  4
0307A:  CLRF   xEA
0307C:  CLRF   xE9
0307E:  CLRF   xE8
03080:  CLRF   xE7
03082:  MOVLB  0
03084:  CALL   2AD4
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03088:  MOVFF  E3,4E6
0308C:  MOVFF  E2,4E5
03090:  MOVFF  E1,4E4
03094:  MOVFF  E0,4E3
03098:  MOVLB  4
0309A:  CLRF   xEA
0309C:  CLRF   xE9
0309E:  CLRF   xE8
030A0:  CLRF   xE7
030A2:  MOVLW  04
030A4:  MOVWF  xEC
030A6:  MOVLW  A3
030A8:  MOVWF  xEB
030AA:  CLRF   xEE
030AC:  MOVLW  40
030AE:  MOVWF  xED
030B0:  MOVLB  0
030B2:  CALL   273C
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
030B6:  MOVLW  B4
030B8:  MOVWF  FF6
030BA:  MOVLW  0A
030BC:  MOVWF  FF7
030BE:  MOVLW  00
030C0:  MOVWF  FF8
030C2:  CALL   14E8
030C6:  GOTO   32BA (RETURN)
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... #include "ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
015A4:  MOVLW  D8
015A6:  MOVWF  FF6
015A8:  MOVLW  0A
015AA:  MOVWF  FF7
015AC:  MOVLW  00
015AE:  MOVWF  FF8
015B0:  CALL   14E8
....................     // Set default register values
.................... 
....................     fprintf(PC, "\tComplete\r\n");
015B4:  MOVLW  EC
015B6:  MOVWF  FF6
015B8:  MOVLW  0A
015BA:  MOVWF  FF7
015BC:  MOVLW  00
015BE:  MOVWF  FF8
015C0:  CALL   14E8
015C4:  GOTO   81B8 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
03F00:  MOVLB  3
03F02:  BCF    x9E.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
03F04:  BCF    x9E.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
03F06:  BCF    x9E.2
....................     cmd.fields.reserved3 = 0;
03F08:  BCF    x9E.3
....................     cmd.fields.coding = 1; // Two's complement
03F0A:  BSF    x9E.4
....................     cmd.fields.range = 1; // Normal mode
03F0C:  BSF    x9E.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
03F0E:  BCF    x9E.6
....................     cmd.fields.shadow = 0; // Direct access
03F10:  BCF    x9E.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
03F12:  BSF    x9F.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
03F14:  BSF    x9F.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
03F16:  MOVF   x9D,W
03F18:  ANDLW  01
03F1A:  MOVWF  01
03F1C:  BCF    x9F.2
03F1E:  BTFSC  01.0
03F20:  BSF    x9F.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
03F22:  BCF    FD8.0
03F24:  RRCF   x9D,W
03F26:  ANDLW  01
03F28:  MOVWF  01
03F2A:  BCF    x9F.3
03F2C:  BTFSC  01.0
03F2E:  BSF    x9F.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
03F30:  RRCF   x9D,W
03F32:  MOVWF  00
03F34:  RRCF   00,F
03F36:  MOVLW  3F
03F38:  ANDWF  00,F
03F3A:  MOVF   00,W
03F3C:  ANDLW  01
03F3E:  MOVWF  01
03F40:  BCF    x9F.4
03F42:  BTFSC  01.0
03F44:  BSF    x9F.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
03F46:  RRCF   x9D,W
03F48:  MOVWF  00
03F4A:  RRCF   00,F
03F4C:  RRCF   00,F
03F4E:  MOVLW  1F
03F50:  ANDWF  00,F
03F52:  MOVF   00,W
03F54:  ANDLW  01
03F56:  MOVWF  01
03F58:  BCF    x9F.5
03F5A:  BTFSC  01.0
03F5C:  BSF    x9F.5
....................     cmd.fields.seq = 0; // Random mode
03F5E:  BCF    x9F.6
....................     cmd.fields.write = 1; // Read operation
03F60:  BSF    x9F.7
.................... 
.................... 
....................     return cmd.value;
03F62:  MOVF   x9E,W
03F64:  MOVWF  01
03F66:  MOVF   x9F,W
03F68:  MOVWF  02
03F6A:  MOVLB  0
03F6C:  GOTO   3F78 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #include "mcp4901.c"
.................... #include "mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #include "mcp4901.c"
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
03D06:  MOVLB  3
03D08:  BCF    x9D.7
....................    cmd.fields.buffer = 1; // Buffer used
03D0A:  BSF    x9D.6
....................    cmd.fields.gain = 1; // Gain 1x
03D0C:  BSF    x9D.5
....................    cmd.fields.shutdown = 1; // Normal operation
03D0E:  BSF    x9D.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
03D10:  RRCF   x9B,W
03D12:  MOVWF  x9F
03D14:  RRCF   x9A,W
03D16:  MOVWF  x9E
03D18:  RRCF   x9F,F
03D1A:  RRCF   x9E,F
03D1C:  RRCF   x9F,F
03D1E:  RRCF   x9E,F
03D20:  RRCF   x9F,F
03D22:  RRCF   x9E,F
03D24:  RRCF   x9F,F
03D26:  RRCF   x9E,F
03D28:  RRCF   x9F,F
03D2A:  RRCF   x9E,F
03D2C:  RRCF   x9F,F
03D2E:  RRCF   x9E,F
03D30:  MOVLW  01
03D32:  ANDWF  x9F,F
03D34:  MOVF   x9E,W
03D36:  ANDLW  01
03D38:  MOVWF  00
03D3A:  CLRF   03
03D3C:  MOVF   00,W
03D3E:  MOVWF  01
03D40:  BCF    x9D.3
03D42:  BTFSC  01.0
03D44:  BSF    x9D.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
03D46:  RRCF   x9B,W
03D48:  MOVWF  x9F
03D4A:  RRCF   x9A,W
03D4C:  MOVWF  x9E
03D4E:  RRCF   x9F,F
03D50:  RRCF   x9E,F
03D52:  RRCF   x9F,F
03D54:  RRCF   x9E,F
03D56:  RRCF   x9F,F
03D58:  RRCF   x9E,F
03D5A:  RRCF   x9F,F
03D5C:  RRCF   x9E,F
03D5E:  RRCF   x9F,F
03D60:  RRCF   x9E,F
03D62:  MOVLW  03
03D64:  ANDWF  x9F,F
03D66:  MOVF   x9E,W
03D68:  ANDLW  01
03D6A:  MOVWF  00
03D6C:  CLRF   03
03D6E:  MOVF   00,W
03D70:  MOVWF  01
03D72:  BCF    x9D.2
03D74:  BTFSC  01.0
03D76:  BSF    x9D.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
03D78:  RRCF   x9B,W
03D7A:  MOVWF  x9F
03D7C:  RRCF   x9A,W
03D7E:  MOVWF  x9E
03D80:  RRCF   x9F,F
03D82:  RRCF   x9E,F
03D84:  RRCF   x9F,F
03D86:  RRCF   x9E,F
03D88:  RRCF   x9F,F
03D8A:  RRCF   x9E,F
03D8C:  RRCF   x9F,F
03D8E:  RRCF   x9E,F
03D90:  MOVLW  07
03D92:  ANDWF  x9F,F
03D94:  MOVF   x9E,W
03D96:  ANDLW  01
03D98:  MOVWF  00
03D9A:  CLRF   03
03D9C:  MOVF   00,W
03D9E:  MOVWF  01
03DA0:  BCF    x9D.1
03DA2:  BTFSC  01.0
03DA4:  BSF    x9D.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
03DA6:  RRCF   x9B,W
03DA8:  MOVWF  x9F
03DAA:  RRCF   x9A,W
03DAC:  MOVWF  x9E
03DAE:  RRCF   x9F,F
03DB0:  RRCF   x9E,F
03DB2:  RRCF   x9F,F
03DB4:  RRCF   x9E,F
03DB6:  RRCF   x9F,F
03DB8:  RRCF   x9E,F
03DBA:  MOVLW  0F
03DBC:  ANDWF  x9F,F
03DBE:  MOVF   x9E,W
03DC0:  ANDLW  01
03DC2:  MOVWF  00
03DC4:  CLRF   03
03DC6:  MOVF   00,W
03DC8:  MOVWF  01
03DCA:  BCF    x9D.0
03DCC:  BTFSC  01.0
03DCE:  BSF    x9D.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
03DD0:  RRCF   x9B,W
03DD2:  MOVWF  x9F
03DD4:  RRCF   x9A,W
03DD6:  MOVWF  x9E
03DD8:  RRCF   x9F,F
03DDA:  RRCF   x9E,F
03DDC:  RRCF   x9F,F
03DDE:  RRCF   x9E,F
03DE0:  MOVLW  1F
03DE2:  ANDWF  x9F,F
03DE4:  MOVF   x9E,W
03DE6:  ANDLW  01
03DE8:  MOVWF  00
03DEA:  CLRF   03
03DEC:  MOVF   00,W
03DEE:  MOVWF  01
03DF0:  BCF    x9C.7
03DF2:  BTFSC  01.0
03DF4:  BSF    x9C.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
03DF6:  RRCF   x9B,W
03DF8:  MOVWF  x9F
03DFA:  RRCF   x9A,W
03DFC:  MOVWF  x9E
03DFE:  RRCF   x9F,F
03E00:  RRCF   x9E,F
03E02:  MOVLW  3F
03E04:  ANDWF  x9F,F
03E06:  MOVF   x9E,W
03E08:  ANDLW  01
03E0A:  MOVWF  00
03E0C:  CLRF   03
03E0E:  MOVF   00,W
03E10:  MOVWF  01
03E12:  BCF    x9C.6
03E14:  BTFSC  01.0
03E16:  BSF    x9C.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
03E18:  BCF    FD8.0
03E1A:  RRCF   x9B,W
03E1C:  MOVWF  x9F
03E1E:  RRCF   x9A,W
03E20:  MOVWF  x9E
03E22:  MOVF   x9E,W
03E24:  ANDLW  01
03E26:  MOVWF  00
03E28:  CLRF   03
03E2A:  MOVF   00,W
03E2C:  MOVWF  01
03E2E:  BCF    x9C.5
03E30:  BTFSC  01.0
03E32:  BSF    x9C.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
03E34:  MOVF   x9A,W
03E36:  ANDLW  01
03E38:  MOVWF  00
03E3A:  CLRF   03
03E3C:  MOVF   00,W
03E3E:  MOVWF  01
03E40:  BCF    x9C.4
03E42:  BTFSC  01.0
03E44:  BSF    x9C.4
....................    cmd.fields.reserved = 0; // Reserved bits
03E46:  BCF    x9C.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
03E48:  BCF    x9C.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
03E4A:  BCF    x9C.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
03E4C:  BCF    x9C.0
.................... 
....................    return cmd.value;
03E4E:  MOVF   x9C,W
03E50:  MOVWF  01
03E52:  MOVF   x9D,W
03E54:  MOVWF  02
03E56:  MOVLB  0
03E58:  GOTO   3ECE (RETURN)
.................... }
.................... 
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... 
.................... //////////// Function to execute a mission based on the command content
.................... void mcp4901_1_write(unsigned int16 value)
*
03EC2:  MOVFF  397,39B
03EC6:  MOVFF  396,39A
03ECA:  GOTO   3D06
03ECE:  MOVFF  02,399
03ED2:  MOVFF  01,398
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
03ED6:  BCF    F93.3
03ED8:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
03EDA:  MOVLW  85
03EDC:  MOVWF  00
03EDE:  DECFSZ 00,F
03EE0:  BRA    3EDE
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
03EE2:  MOVFF  399,39E
03EE6:  MOVFF  398,39D
03EEA:  MOVLW  10
03EEC:  MOVLB  3
03EEE:  MOVWF  x9F
03EF0:  MOVLW  01
03EF2:  MOVWF  xA0
03EF4:  MOVLB  0
03EF6:  CALL   3E5C
....................    output_high(DAC1_CS); // Deselect MCP4901
03EFA:  BCF    F93.3
03EFC:  BSF    F8A.3
03EFE:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
....................    delay_us(100); // Ensure CS is stable before sending data
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
....................    output_high(DAC2_CS); // Deselect MCP4901
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
03F70:  MOVFF  396,39D
03F74:  GOTO   3F00
03F78:  MOVFF  02,398
03F7C:  MOVFF  01,397
.................... {   
.................... 
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
03F80:  BCF    F93.1
03F82:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
03F84:  MOVLW  0D
03F86:  MOVWF  00
03F88:  DECFSZ 00,F
03F8A:  BRA    3F88
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
03F8C:  MOVFF  398,39E
03F90:  MOVFF  397,39D
03F94:  MOVLW  10
03F96:  MOVLB  3
03F98:  MOVWF  x9F
03F9A:  MOVLW  01
03F9C:  MOVWF  xA0
03F9E:  MOVLB  0
03FA0:  CALL   3E5C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
03FA4:  MOVLW  0D
03FA6:  MOVWF  00
03FA8:  DECFSZ 00,F
03FAA:  BRA    3FA8
....................     output_high(ADC_CS); // Set CS pin high to end communication
03FAC:  BCF    F93.1
03FAE:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
03FB0:  MOVLW  0D
03FB2:  MOVWF  00
03FB4:  DECFSZ 00,F
03FB6:  BRA    3FB4
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
03FB8:  BCF    F93.1
03FBA:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
03FBC:  MOVLW  0D
03FBE:  MOVWF  00
03FC0:  DECFSZ 00,F
03FC2:  BRA    3FC0
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
03FC4:  MOVLB  3
03FC6:  CLRF   x9E
03FC8:  CLRF   x9D
03FCA:  MOVLW  10
03FCC:  MOVWF  x9F
03FCE:  MOVLW  01
03FD0:  MOVWF  xA0
03FD2:  MOVLB  0
03FD4:  CALL   3E5C
03FD8:  MOVFF  02,39A
03FDC:  MOVFF  01,399
....................     output_high(ADC_CS); 
03FE0:  BCF    F93.1
03FE2:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
03FE4:  MOVLB  3
03FE6:  MOVF   x99,W
03FE8:  MOVWF  x9B
03FEA:  MOVF   x9A,W
03FEC:  ANDLW  0F
03FEE:  MOVWF  x9C
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
03FF0:  MOVF   x9B,W
03FF2:  MOVWF  01
03FF4:  MOVF   x9C,W
03FF6:  MOVWF  02
03FF8:  MOVLB  0
03FFA:  RETURN 0
.................... }
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0154E:  MOVLW  F8
01550:  MOVWF  FF6
01552:  MOVLW  0A
01554:  MOVWF  FF7
01556:  MOVLW  00
01558:  MOVWF  FF8
0155A:  CALL   14E8
....................     output_low(CONNECT_CIGS1);
0155E:  BCF    F94.0
01560:  BCF    F8B.0
....................     output_high(EN_NPWR);
01562:  BCF    F94.7
01564:  BSF    F8B.7
....................     fprintf(PC, "\tComplete\r\n");
01566:  MOVLW  08
01568:  MOVWF  FF6
0156A:  MOVLW  0B
0156C:  MOVWF  FF7
0156E:  MOVLW  00
01570:  MOVWF  FF8
01572:  CALL   14E8
01576:  GOTO   81B0 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
04126:  MOVLW  54
04128:  MOVWF  FF6
0412A:  MOVLW  0B
0412C:  MOVWF  FF7
0412E:  MOVLW  00
04130:  MOVWF  FF8
04132:  CALL   14E8
....................     output_high(CONNECT_CIGS1);
04136:  BCF    F94.0
04138:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
0413A:  BCF    F94.7
0413C:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
0413E:  MOVLW  85
04140:  MOVWF  00
04142:  DECFSZ 00,F
04144:  BRA    4142
....................     fprintf(PC, "step, voltage, current\r\n");
04146:  MOVLW  68
04148:  MOVWF  FF6
0414A:  MOVLW  0B
0414C:  MOVWF  FF7
0414E:  MOVLW  00
04150:  MOVWF  FF8
04152:  CALL   14E8
....................     mcp4901_1_write(0); // Initialize DAC to 0
04156:  MOVLB  3
04158:  CLRF   x97
0415A:  CLRF   x96
0415C:  MOVLB  0
0415E:  CALL   3EC2
....................     delay_ms(100); // wait for the DAC to stabilize
04162:  MOVLW  64
04164:  MOVLB  4
04166:  MOVWF  xFB
04168:  MOVLB  0
0416A:  CALL   1468
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
0416E:  MOVLB  3
04170:  CLRF   x95
04172:  MOVLB  0
04174:  MOVLB  3
04176:  MOVF   x90,W
04178:  SUBWF  x95,W
0417A:  BTFSS  FD8.0
0417C:  BRA    4184
0417E:  MOVLB  0
04180:  GOTO   424A
04184:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04186:  MOVLB  3
04188:  CLRF   x97
0418A:  MOVFF  395,396
0418E:  MOVLB  0
04190:  CALL   3EC2
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
04194:  MOVLW  02
04196:  MOVLB  3
04198:  MOVWF  x96
0419A:  MOVLB  0
0419C:  CALL   3F70
041A0:  MOVFF  02,392
041A4:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
041A8:  MOVLW  01
041AA:  MOVLB  3
041AC:  MOVWF  x96
041AE:  MOVLB  0
041B0:  CALL   3F70
041B4:  MOVFF  02,394
041B8:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
041BC:  MOVFF  395,415
041C0:  MOVLW  1B
041C2:  MOVLB  4
041C4:  MOVWF  x16
041C6:  MOVLB  0
041C8:  CALL   3C5C
041CC:  MOVLW  2C
041CE:  MOVLB  4
041D0:  MOVWF  xE6
041D2:  MOVLB  0
041D4:  CALL   1496
041D8:  MOVLW  20
041DA:  MOVLB  4
041DC:  MOVWF  xE6
041DE:  MOVLB  0
041E0:  CALL   1496
041E4:  MOVLW  10
041E6:  MOVWF  FE9
041E8:  MOVFF  392,397
041EC:  MOVFF  391,396
041F0:  CALL   3FFC
041F4:  MOVLW  2C
041F6:  MOVLB  4
041F8:  MOVWF  xE6
041FA:  MOVLB  0
041FC:  CALL   1496
04200:  MOVLW  20
04202:  MOVLB  4
04204:  MOVWF  xE6
04206:  MOVLB  0
04208:  CALL   1496
0420C:  MOVLW  10
0420E:  MOVWF  FE9
04210:  MOVFF  394,397
04214:  MOVFF  393,396
04218:  CALL   3FFC
0421C:  MOVLW  0D
0421E:  MOVLB  4
04220:  MOVWF  xE6
04222:  MOVLB  0
04224:  CALL   1496
04228:  MOVLW  0A
0422A:  MOVLB  4
0422C:  MOVWF  xE6
0422E:  MOVLB  0
04230:  CALL   1496
....................         delay_ms(1); // wait for the ADC to stabilize
04234:  MOVLW  01
04236:  MOVLB  4
04238:  MOVWF  xFB
0423A:  MOVLB  0
0423C:  CALL   1468
04240:  MOVLB  3
04242:  INCF   x95,F
04244:  MOVLB  0
04246:  GOTO   4174
....................     }
0424A:  GOTO   42C2 (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
042DE:  MOVLB  3
042E0:  CLRF   x97
042E2:  CLRF   x96
042E4:  MOVLB  0
042E6:  CALL   3EC2
....................     fprintf(PC, "Start ADC TEST\r\n");
042EA:  MOVLW  82
042EC:  MOVWF  FF6
042EE:  MOVLW  0B
042F0:  MOVWF  FF7
042F2:  MOVLW  00
042F4:  MOVWF  FF8
042F6:  CALL   14E8
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
042FA:  MOVLB  3
042FC:  CLRF   x96
042FE:  MOVLB  0
04300:  CALL   3F70
04304:  MOVFF  02,38C
04308:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
0430C:  MOVLW  94
0430E:  MOVWF  FF6
04310:  MOVLW  0B
04312:  MOVWF  FF7
04314:  MOVLW  00
04316:  MOVWF  FF8
04318:  MOVLW  0D
0431A:  MOVLB  4
0431C:  MOVWF  x19
0431E:  MOVLB  0
04320:  CALL   1518
04324:  MOVFF  38C,4A4
04328:  MOVLW  37
0432A:  MOVLB  4
0432C:  MOVWF  xA5
0432E:  MOVLB  0
04330:  CALL   1B20
04334:  MOVFF  38B,4A4
04338:  MOVLW  37
0433A:  MOVLB  4
0433C:  MOVWF  xA5
0433E:  MOVLB  0
04340:  CALL   1B20
04344:  MOVLW  0D
04346:  MOVLB  4
04348:  MOVWF  xE6
0434A:  MOVLB  0
0434C:  CALL   1496
04350:  MOVLW  0A
04352:  MOVLB  4
04354:  MOVWF  xE6
04356:  MOVLB  0
04358:  CALL   1496
....................     ans = ad7490_read(ADC_CIGS1_CURR);
0435C:  MOVLW  01
0435E:  MOVLB  3
04360:  MOVWF  x96
04362:  MOVLB  0
04364:  CALL   3F70
04368:  MOVFF  02,38C
0436C:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04370:  MOVLW  AA
04372:  MOVWF  FF6
04374:  MOVLW  0B
04376:  MOVWF  FF7
04378:  MOVLW  00
0437A:  MOVWF  FF8
0437C:  MOVLW  0D
0437E:  MOVLB  4
04380:  MOVWF  x19
04382:  MOVLB  0
04384:  CALL   1518
04388:  MOVFF  38C,4A4
0438C:  MOVLW  37
0438E:  MOVLB  4
04390:  MOVWF  xA5
04392:  MOVLB  0
04394:  CALL   1B20
04398:  MOVFF  38B,4A4
0439C:  MOVLW  37
0439E:  MOVLB  4
043A0:  MOVWF  xA5
043A2:  MOVLB  0
043A4:  CALL   1B20
043A8:  MOVLW  0D
043AA:  MOVLB  4
043AC:  MOVWF  xE6
043AE:  MOVLB  0
043B0:  CALL   1496
043B4:  MOVLW  0A
043B6:  MOVLB  4
043B8:  MOVWF  xE6
043BA:  MOVLB  0
043BC:  CALL   1496
....................     ans = ad7490_read(ADC_CIGS1_AMP);
043C0:  MOVLW  02
043C2:  MOVLB  3
043C4:  MOVWF  x96
043C6:  MOVLB  0
043C8:  CALL   3F70
043CC:  MOVFF  02,38C
043D0:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
043D4:  MOVLW  C0
043D6:  MOVWF  FF6
043D8:  MOVLW  0B
043DA:  MOVWF  FF7
043DC:  MOVLW  00
043DE:  MOVWF  FF8
043E0:  MOVLW  0F
043E2:  MOVLB  4
043E4:  MOVWF  x19
043E6:  MOVLB  0
043E8:  CALL   1518
043EC:  MOVFF  38C,4A4
043F0:  MOVLW  37
043F2:  MOVLB  4
043F4:  MOVWF  xA5
043F6:  MOVLB  0
043F8:  CALL   1B20
043FC:  MOVFF  38B,4A4
04400:  MOVLW  37
04402:  MOVLB  4
04404:  MOVWF  xA5
04406:  MOVLB  0
04408:  CALL   1B20
0440C:  MOVLW  0D
0440E:  MOVLB  4
04410:  MOVWF  xE6
04412:  MOVLB  0
04414:  CALL   1496
04418:  MOVLW  0A
0441A:  MOVLB  4
0441C:  MOVWF  xE6
0441E:  MOVLB  0
04420:  CALL   1496
....................     ans = ad7490_read(ADC_CIGS1_VREF);
04424:  MOVLW  03
04426:  MOVLB  3
04428:  MOVWF  x96
0442A:  MOVLB  0
0442C:  CALL   3F70
04430:  MOVFF  02,38C
04434:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04438:  MOVLW  D8
0443A:  MOVWF  FF6
0443C:  MOVLW  0B
0443E:  MOVWF  FF7
04440:  MOVLW  00
04442:  MOVWF  FF8
04444:  MOVLW  10
04446:  MOVLB  4
04448:  MOVWF  x19
0444A:  MOVLB  0
0444C:  CALL   1518
04450:  MOVFF  38C,4A4
04454:  MOVLW  37
04456:  MOVLB  4
04458:  MOVWF  xA5
0445A:  MOVLB  0
0445C:  CALL   1B20
04460:  MOVFF  38B,4A4
04464:  MOVLW  37
04466:  MOVLB  4
04468:  MOVWF  xA5
0446A:  MOVLB  0
0446C:  CALL   1B20
04470:  MOVLW  0D
04472:  MOVLB  4
04474:  MOVWF  xE6
04476:  MOVLB  0
04478:  CALL   1496
0447C:  MOVLW  0A
0447E:  MOVLB  4
04480:  MOVWF  xE6
04482:  MOVLB  0
04484:  CALL   1496
04488:  GOTO   5FBC (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_readdata(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_readdata(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_readdata(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_readdata(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_readdata(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_readdata(ADC_CIGS1_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_readdata(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_readdata(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
030CA:  GOTO   2442
030CE:  MOVFF  03,49D
030D2:  MOVFF  02,49C
030D6:  MOVFF  01,49B
030DA:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
030DE:  MOVFF  49D,4A4
030E2:  MOVLB  4
030E4:  CLRF   xA5
030E6:  CLRF   xA6
030E8:  CLRF   xA7
030EA:  MOVF   xA4,W
030EC:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
030EE:  MOVFF  49C,4A4
030F2:  MOVFF  49D,4A5
030F6:  CLRF   xA6
030F8:  CLRF   xA7
030FA:  MOVF   xA4,W
030FC:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
030FE:  MOVFF  49B,4A4
03102:  MOVFF  49C,4A5
03106:  MOVFF  49D,4A6
0310A:  CLRF   xA7
0310C:  MOVF   xA4,W
0310E:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
03110:  MOVF   x9A,W
03112:  MOVWF  x97
....................     piclog[4] = function;            // Function code
03114:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
03118:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
0311C:  MOVLW  FA
0311E:  MOVWF  FF6
03120:  MOVLW  0C
03122:  MOVWF  FF7
03124:  MOVLW  00
03126:  MOVWF  FF8
03128:  MOVLB  0
0312A:  CALL   14E8
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
0312E:  MOVLB  4
03130:  CLRF   x9E
03132:  MOVLB  0
03134:  MOVLB  4
03136:  MOVF   x9E,W
03138:  SUBLW  05
0313A:  BTFSC  FD8.0
0313C:  BRA    3144
0313E:  MOVLB  0
03140:  GOTO   317E
03144:  MOVLB  0
....................             fprintf(PC, "%02X ", piclog[i]);
03146:  CLRF   03
03148:  MOVLB  4
0314A:  MOVF   x9E,W
0314C:  ADDLW  94
0314E:  MOVWF  FE9
03150:  MOVLW  04
03152:  ADDWFC 03,W
03154:  MOVWF  FEA
03156:  MOVFF  FEF,4A3
0315A:  MOVFF  4A3,4A4
0315E:  MOVLW  37
03160:  MOVWF  xA5
03162:  MOVLB  0
03164:  CALL   1B20
03168:  MOVLW  20
0316A:  MOVLB  4
0316C:  MOVWF  xE6
0316E:  MOVLB  0
03170:  CALL   1496
03174:  MOVLB  4
03176:  INCF   x9E,F
03178:  MOVLB  0
0317A:  GOTO   3134
....................         }
....................         fprintf(PC, "\r\n");
0317E:  MOVLW  0D
03180:  MOVLB  4
03182:  MOVWF  xE6
03184:  MOVLB  0
03186:  CALL   1496
0318A:  MOVLW  0A
0318C:  MOVLB  4
0318E:  MOVWF  xE6
03190:  MOVLB  0
03192:  CALL   1496
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03196:  MOVLB  3
03198:  MOVF   x62,W
0319A:  MOVLB  4
0319C:  MOVWF  x9F
0319E:  MOVLB  3
031A0:  MOVF   x63,W
031A2:  MOVLB  4
031A4:  MOVWF  xA0
031A6:  MOVLW  02
031A8:  MOVLB  3
031AA:  ADDWF  x64,W
031AC:  MOVLB  4
031AE:  MOVWF  xA1
031B0:  MOVLW  00
031B2:  MOVLB  3
031B4:  ADDWFC x65,W
031B6:  MOVLB  4
031B8:  MOVWF  xA2
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
031BA:  MOVFF  E3,4E6
031BE:  MOVFF  E2,4E5
031C2:  MOVFF  E1,4E4
031C6:  MOVFF  E0,4E3
031CA:  MOVLB  0
031CC:  CALL   1848
031D0:  MOVF   01,F
031D2:  BTFSS  FD8.2
031D4:  GOTO   31EC
....................         fprintf(PC, "Mission Flash is not connected\r\n");
031D8:  MOVLW  06
031DA:  MOVWF  FF6
031DC:  MOVLW  0D
031DE:  MOVWF  FF7
031E0:  MOVLW  00
031E2:  MOVWF  FF8
031E4:  CALL   14E8
....................         return;
031E8:  GOTO   32BA
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
031EC:  MOVFF  E3,4E6
031F0:  MOVFF  E2,4E5
031F4:  MOVFF  E1,4E4
031F8:  MOVFF  E0,4E3
031FC:  MOVFF  4A2,4EA
03200:  MOVFF  4A1,4E9
03204:  MOVFF  4A0,4E8
03208:  MOVFF  49F,4E7
0320C:  MOVLW  04
0320E:  MOVLB  4
03210:  MOVWF  xEC
03212:  MOVLW  94
03214:  MOVWF  xEB
03216:  CLRF   xEE
03218:  MOVLW  06
0321A:  MOVWF  xED
0321C:  MOVLB  0
0321E:  CALL   273C
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03222:  MOVLW  06
03224:  MOVLB  3
03226:  ADDWF  x62,F
03228:  MOVLW  00
0322A:  ADDWFC x63,F
0322C:  MOVLW  00
0322E:  ADDWFC x64,F
03230:  MOVLW  00
03232:  ADDWFC x65,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03234:  MOVLW  06
03236:  ADDWF  x67,F
03238:  MOVLW  00
0323A:  ADDWFC x68,F
0323C:  MOVLW  00
0323E:  ADDWFC x69,F
03240:  MOVLW  00
03242:  ADDWFC x6A,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03244:  MOVLW  06
03246:  ADDWF  x6B,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03248:  MOVLW  06
0324A:  ADDWF  x6B,W
0324C:  SUBLW  3F
0324E:  BTFSS  FD8.0
03250:  BRA    3258
03252:  MOVLB  0
03254:  GOTO   32B6
03258:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
0325A:  MOVLB  3
0325C:  MOVF   x62,W
0325E:  MOVLB  4
03260:  MOVWF  x9F
03262:  MOVLB  3
03264:  MOVF   x63,W
03266:  MOVLB  4
03268:  MOVWF  xA0
0326A:  MOVLW  02
0326C:  MOVLB  3
0326E:  ADDWF  x64,W
03270:  MOVLB  4
03272:  MOVWF  xA1
03274:  MOVLW  00
03276:  MOVLB  3
03278:  ADDWFC x65,W
0327A:  MOVLB  4
0327C:  MOVWF  xA2
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
0327E:  MOVFF  E3,4E6
03282:  MOVFF  E2,4E5
03286:  MOVFF  E1,4E4
0328A:  MOVFF  E0,4E3
0328E:  MOVFF  4A2,4EA
03292:  MOVFF  4A1,4E9
03296:  MOVFF  4A0,4E8
0329A:  MOVFF  49F,4E7
0329E:  CLRF   xEC
032A0:  MOVLW  F0
032A2:  MOVWF  xEB
032A4:  CLRF   xEE
032A6:  MOVLW  06
032A8:  MOVWF  xED
032AA:  MOVLB  0
032AC:  CALL   273C
....................         misf_piclog_write_counter = 0;
032B0:  MOVLB  3
032B2:  CLRF   x6B
032B4:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
032B6:  GOTO   2E40
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
032BA:  RETURN 0
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_flash.c"
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... 
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... 
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... 
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... 
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== Flash Command ============================
.................... 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
04990:  MOVLW  28
04992:  MOVWF  FF6
04994:  MOVLW  0D
04996:  MOVWF  FF7
04998:  MOVLW  00
0499A:  MOVWF  FF8
0499C:  CALL   14E8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
049A0:  MOVLB  3
049A2:  MOVF   x8B,W
049A4:  MOVWF  FE9
049A6:  MOVF   x8C,W
049A8:  MOVWF  FEA
049AA:  MOVFF  FEF,38D
....................    piclog_make(cmd, 0x00); // Log the command execution
049AE:  MOVFF  38D,492
049B2:  MOVLB  4
049B4:  CLRF   x93
049B6:  MOVLB  0
049B8:  CALL   30CA
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
049BC:  MOVLB  3
049BE:  CLRF   x91
049C0:  CLRF   x90
049C2:  CLRF   x8F
049C4:  CLRF   x8E
049C6:  MOVLB  0
049C8:  MOVLB  3
049CA:  MOVF   x91,F
049CC:  BTFSC  FD8.2
049CE:  BRA    49D6
049D0:  MOVLB  0
049D2:  GOTO   4A36
049D6:  MOVLB  0
049D8:  MOVLB  3
049DA:  MOVF   x90,W
049DC:  SUBLW  F4
049DE:  BTFSC  FD8.0
049E0:  BRA    49E8
049E2:  MOVLB  0
049E4:  GOTO   4A36
049E8:  MOVLB  0
049EA:  BTFSS  FD8.2
049EC:  GOTO   4A02
049F0:  MOVLB  3
049F2:  MOVF   x8F,W
049F4:  SUBLW  23
049F6:  BTFSC  FD8.0
049F8:  BRA    4A00
049FA:  MOVLB  0
049FC:  GOTO   4A36
04A00:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
04A02:  MOVFF  E3,395
04A06:  MOVFF  E2,394
04A0A:  MOVFF  E1,393
04A0E:  MOVFF  E0,392
04A12:  MOVFF  391,399
04A16:  MOVFF  390,398
04A1A:  MOVFF  38F,397
04A1E:  MOVFF  38E,396
04A22:  CALL   4624
04A26:  MOVLW  01
04A28:  MOVLB  3
04A2A:  ADDWF  x90,F
04A2C:  MOVLW  00
04A2E:  ADDWFC x91,F
04A30:  MOVLB  0
04A32:  GOTO   49C8
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04A36:  MOVFF  38D,492
04A3A:  MOVLW  02
04A3C:  MOVLB  4
04A3E:  MOVWF  x93
04A40:  MOVLB  0
04A42:  CALL   30CA
....................    fprintf(PC, "End Flash Erase All\r\n");
04A46:  MOVLW  40
04A48:  MOVWF  FF6
04A4A:  MOVLW  0D
04A4C:  MOVWF  FF7
04A4E:  MOVLW  00
04A50:  MOVWF  FF8
04A52:  CALL   14E8
04A56:  GOTO   5FE0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
04A5A:  MOVLW  56
04A5C:  MOVWF  FF6
04A5E:  MOVLW  0D
04A60:  MOVWF  FF7
04A62:  MOVLW  00
04A64:  MOVWF  FF8
04A66:  CALL   14E8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04A6A:  MOVLB  3
04A6C:  MOVF   x8B,W
04A6E:  MOVWF  FE9
04A70:  MOVF   x8C,W
04A72:  MOVWF  FEA
04A74:  MOVFF  FEF,38D
04A78:  MOVLW  01
04A7A:  ADDWF  x8B,W
04A7C:  MOVWF  FE9
04A7E:  MOVLW  00
04A80:  ADDWFC x8C,W
04A82:  MOVWF  FEA
04A84:  MOVF   FEF,W
04A86:  CLRF   x95
04A88:  CLRF   x94
04A8A:  CLRF   x93
04A8C:  MOVWF  x92
04A8E:  MOVFF  392,395
04A92:  CLRF   x92
04A94:  CLRF   x93
04A96:  CLRF   x94
04A98:  MOVLW  02
04A9A:  ADDWF  x8B,W
04A9C:  MOVWF  FE9
04A9E:  MOVLW  00
04AA0:  ADDWFC x8C,W
04AA2:  MOVWF  FEA
04AA4:  MOVF   FEF,W
04AA6:  CLRF   x9A
04AA8:  CLRF   x99
04AAA:  CLRF   x98
04AAC:  MOVWF  x97
04AAE:  MOVFF  398,03
04AB2:  MOVFF  397,02
04AB6:  CLRF   00
04AB8:  CLRF   01
04ABA:  MOVF   00,W
04ABC:  IORWF  x92,F
04ABE:  MOVF   01,W
04AC0:  IORWF  x93,F
04AC2:  MOVF   02,W
04AC4:  IORWF  x94,F
04AC6:  MOVF   03,W
04AC8:  IORWF  x95,F
04ACA:  MOVLW  03
04ACC:  ADDWF  x8B,W
04ACE:  MOVWF  FE9
04AD0:  MOVLW  00
04AD2:  ADDWFC x8C,W
04AD4:  MOVWF  FEA
04AD6:  MOVF   FEF,W
04AD8:  CLRF   x9A
04ADA:  CLRF   x99
04ADC:  CLRF   x98
04ADE:  MOVWF  x97
04AE0:  MOVFF  399,03
04AE4:  MOVFF  398,02
04AE8:  MOVFF  397,01
04AEC:  CLRF   00
04AEE:  MOVF   00,W
04AF0:  IORWF  x92,F
04AF2:  MOVF   01,W
04AF4:  IORWF  x93,F
04AF6:  MOVF   02,W
04AF8:  IORWF  x94,F
04AFA:  MOVF   03,W
04AFC:  IORWF  x95,F
04AFE:  MOVLW  04
04B00:  ADDWF  x8B,W
04B02:  MOVWF  FE9
04B04:  MOVLW  00
04B06:  ADDWFC x8C,W
04B08:  MOVWF  FEA
04B0A:  MOVF   FEF,W
04B0C:  MOVWF  00
04B0E:  CLRF   01
04B10:  CLRF   02
04B12:  CLRF   03
04B14:  MOVF   00,W
04B16:  IORWF  x92,W
04B18:  MOVWF  x8E
04B1A:  MOVF   01,W
04B1C:  IORWF  x93,W
04B1E:  MOVWF  x8F
04B20:  MOVF   02,W
04B22:  IORWF  x94,W
04B24:  MOVWF  x90
04B26:  MOVF   03,W
04B28:  IORWF  x95,W
04B2A:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
04B2C:  MOVLW  74
04B2E:  MOVWF  FF6
04B30:  MOVLW  0D
04B32:  MOVWF  FF7
04B34:  MOVLW  00
04B36:  MOVWF  FF8
04B38:  MOVLW  13
04B3A:  MOVLB  4
04B3C:  MOVWF  x19
04B3E:  MOVLB  0
04B40:  CALL   1518
04B44:  MOVFF  391,4A4
04B48:  MOVLW  37
04B4A:  MOVLB  4
04B4C:  MOVWF  xA5
04B4E:  MOVLB  0
04B50:  CALL   1B20
04B54:  MOVFF  390,4A4
04B58:  MOVLW  37
04B5A:  MOVLB  4
04B5C:  MOVWF  xA5
04B5E:  MOVLB  0
04B60:  CALL   1B20
04B64:  MOVFF  38F,4A4
04B68:  MOVLW  37
04B6A:  MOVLB  4
04B6C:  MOVWF  xA5
04B6E:  MOVLB  0
04B70:  CALL   1B20
04B74:  MOVFF  38E,4A4
04B78:  MOVLW  37
04B7A:  MOVLB  4
04B7C:  MOVWF  xA5
04B7E:  MOVLB  0
04B80:  CALL   1B20
04B84:  MOVLW  0D
04B86:  MOVLB  4
04B88:  MOVWF  xE6
04B8A:  MOVLB  0
04B8C:  CALL   1496
04B90:  MOVLW  0A
04B92:  MOVLB  4
04B94:  MOVWF  xE6
04B96:  MOVLB  0
04B98:  CALL   1496
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04B9C:  MOVFF  38D,492
04BA0:  MOVLW  01
04BA2:  MOVLB  4
04BA4:  MOVWF  x93
04BA6:  MOVLB  0
04BA8:  CALL   30CA
....................    
....................    sector_erase(mis_fm, sector_address);
04BAC:  MOVFF  E3,395
04BB0:  MOVFF  E2,394
04BB4:  MOVFF  E1,393
04BB8:  MOVFF  E0,392
04BBC:  MOVFF  391,399
04BC0:  MOVFF  390,398
04BC4:  MOVFF  38F,397
04BC8:  MOVFF  38E,396
04BCC:  CALL   4624
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04BD0:  MOVFF  38D,492
04BD4:  MOVLW  02
04BD6:  MOVLB  4
04BD8:  MOVWF  x93
04BDA:  MOVLB  0
04BDC:  CALL   30CA
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
04BE0:  MOVLW  90
04BE2:  MOVWF  FF6
04BE4:  MOVLW  0D
04BE6:  MOVWF  FF7
04BE8:  MOVLW  00
04BEA:  MOVWF  FF8
04BEC:  CALL   14E8
04BF0:  GOTO   5FF0 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
04BF4:  MOVLW  AC
04BF6:  MOVWF  FF6
04BF8:  MOVLW  0D
04BFA:  MOVWF  FF7
04BFC:  MOVLW  00
04BFE:  MOVWF  FF8
04C00:  CALL   14E8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04C04:  MOVLB  3
04C06:  MOVF   x8B,W
04C08:  MOVWF  FE9
04C0A:  MOVF   x8C,W
04C0C:  MOVWF  FEA
04C0E:  MOVFF  FEF,38D
04C12:  MOVLW  01
04C14:  ADDWF  x8B,W
04C16:  MOVWF  FE9
04C18:  MOVLW  00
04C1A:  ADDWFC x8C,W
04C1C:  MOVWF  FEA
04C1E:  MOVF   FEF,W
04C20:  CLRF   x95
04C22:  CLRF   x94
04C24:  CLRF   x93
04C26:  MOVWF  x92
04C28:  MOVFF  392,395
04C2C:  CLRF   x92
04C2E:  CLRF   x93
04C30:  CLRF   x94
04C32:  MOVLW  02
04C34:  ADDWF  x8B,W
04C36:  MOVWF  FE9
04C38:  MOVLW  00
04C3A:  ADDWFC x8C,W
04C3C:  MOVWF  FEA
04C3E:  MOVF   FEF,W
04C40:  CLRF   x9A
04C42:  CLRF   x99
04C44:  CLRF   x98
04C46:  MOVWF  x97
04C48:  MOVFF  398,03
04C4C:  MOVFF  397,02
04C50:  CLRF   00
04C52:  CLRF   01
04C54:  MOVF   00,W
04C56:  IORWF  x92,F
04C58:  MOVF   01,W
04C5A:  IORWF  x93,F
04C5C:  MOVF   02,W
04C5E:  IORWF  x94,F
04C60:  MOVF   03,W
04C62:  IORWF  x95,F
04C64:  MOVLW  03
04C66:  ADDWF  x8B,W
04C68:  MOVWF  FE9
04C6A:  MOVLW  00
04C6C:  ADDWFC x8C,W
04C6E:  MOVWF  FEA
04C70:  MOVF   FEF,W
04C72:  CLRF   x9A
04C74:  CLRF   x99
04C76:  CLRF   x98
04C78:  MOVWF  x97
04C7A:  MOVFF  399,03
04C7E:  MOVFF  398,02
04C82:  MOVFF  397,01
04C86:  CLRF   00
04C88:  MOVF   00,W
04C8A:  IORWF  x92,F
04C8C:  MOVF   01,W
04C8E:  IORWF  x93,F
04C90:  MOVF   02,W
04C92:  IORWF  x94,F
04C94:  MOVF   03,W
04C96:  IORWF  x95,F
04C98:  MOVLW  04
04C9A:  ADDWF  x8B,W
04C9C:  MOVWF  FE9
04C9E:  MOVLW  00
04CA0:  ADDWFC x8C,W
04CA2:  MOVWF  FEA
04CA4:  MOVF   FEF,W
04CA6:  MOVWF  00
04CA8:  CLRF   01
04CAA:  CLRF   02
04CAC:  CLRF   03
04CAE:  MOVF   00,W
04CB0:  IORWF  x92,W
04CB2:  MOVWF  x8E
04CB4:  MOVF   01,W
04CB6:  IORWF  x93,W
04CB8:  MOVWF  x8F
04CBA:  MOVF   02,W
04CBC:  IORWF  x94,W
04CBE:  MOVWF  x90
04CC0:  MOVF   03,W
04CC2:  IORWF  x95,W
04CC4:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04CC6:  MOVLW  C8
04CC8:  MOVWF  FF6
04CCA:  MOVLW  0D
04CCC:  MOVWF  FF7
04CCE:  MOVLW  00
04CD0:  MOVWF  FF8
04CD2:  MOVLW  16
04CD4:  MOVLB  4
04CD6:  MOVWF  x19
04CD8:  MOVLB  0
04CDA:  CALL   1518
04CDE:  MOVFF  391,4A4
04CE2:  MOVLW  37
04CE4:  MOVLB  4
04CE6:  MOVWF  xA5
04CE8:  MOVLB  0
04CEA:  CALL   1B20
04CEE:  MOVFF  390,4A4
04CF2:  MOVLW  37
04CF4:  MOVLB  4
04CF6:  MOVWF  xA5
04CF8:  MOVLB  0
04CFA:  CALL   1B20
04CFE:  MOVFF  38F,4A4
04D02:  MOVLW  37
04D04:  MOVLB  4
04D06:  MOVWF  xA5
04D08:  MOVLB  0
04D0A:  CALL   1B20
04D0E:  MOVFF  38E,4A4
04D12:  MOVLW  37
04D14:  MOVLB  4
04D16:  MOVWF  xA5
04D18:  MOVLB  0
04D1A:  CALL   1B20
04D1E:  MOVLW  0D
04D20:  MOVLB  4
04D22:  MOVWF  xE6
04D24:  MOVLB  0
04D26:  CALL   1496
04D2A:  MOVLW  0A
04D2C:  MOVLB  4
04D2E:  MOVWF  xE6
04D30:  MOVLB  0
04D32:  CALL   1496
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04D36:  MOVFF  38D,492
04D3A:  MOVLW  01
04D3C:  MOVLB  4
04D3E:  MOVWF  x93
04D40:  MOVLB  0
04D42:  CALL   30CA
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
04D46:  MOVFF  E3,4E6
04D4A:  MOVFF  E2,4E5
04D4E:  MOVFF  E1,4E4
04D52:  MOVFF  E0,4E3
04D56:  MOVLB  4
04D58:  CLRF   xEA
04D5A:  CLRF   xE9
04D5C:  CLRF   xE8
04D5E:  CLRF   xE7
04D60:  MOVLB  0
04D62:  CALL   2AD4
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04D66:  MOVFF  38D,492
04D6A:  MOVLW  02
04D6C:  MOVLB  4
04D6E:  MOVWF  x93
04D70:  MOVLB  0
04D72:  CALL   30CA
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
04D76:  MOVLW  E6
04D78:  MOVWF  FF6
04D7A:  MOVLW  0D
04D7C:  MOVWF  FF7
04D7E:  MOVLW  00
04D80:  MOVWF  FF8
04D82:  CALL   14E8
04D86:  GOTO   6000 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
04D8A:  MOVLW  00
04D8C:  MOVWF  FF6
04D8E:  MOVLW  0E
04D90:  MOVWF  FF7
04D92:  MOVLW  00
04D94:  MOVWF  FF8
04D96:  CALL   14E8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04D9A:  MOVLB  3
04D9C:  MOVF   x8B,W
04D9E:  MOVWF  FE9
04DA0:  MOVF   x8C,W
04DA2:  MOVWF  FEA
04DA4:  MOVFF  FEF,3DD
04DA8:  MOVFF  3DD,492
04DAC:  MOVLW  01
04DAE:  MOVLB  4
04DB0:  MOVWF  x93
04DB2:  MOVLB  0
04DB4:  CALL   30CA
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
04DB8:  MOVLB  3
04DBA:  CLRF   x8D
04DBC:  CLRF   x8E
04DBE:  CLRF   x8F
04DC0:  CLRF   x90
04DC2:  CLRF   x91
04DC4:  CLRF   x92
04DC6:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
04DC8:  MOVF   x8B,W
04DCA:  MOVWF  FE9
04DCC:  MOVF   x8C,W
04DCE:  MOVWF  FEA
04DD0:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
04DD4:  MOVLW  01
04DD6:  ADDWF  x8B,W
04DD8:  MOVWF  FE9
04DDA:  MOVLW  00
04DDC:  ADDWFC x8C,W
04DDE:  MOVWF  FEA
04DE0:  MOVF   FEF,W
04DE2:  CLRF   xE0
04DE4:  CLRF   xDF
04DE6:  CLRF   xDE
04DE8:  MOVWF  xDD
04DEA:  MOVFF  3DD,3E0
04DEE:  CLRF   xDD
04DF0:  CLRF   xDE
04DF2:  CLRF   xDF
04DF4:  MOVLW  02
04DF6:  ADDWF  x8B,W
04DF8:  MOVWF  FE9
04DFA:  MOVLW  00
04DFC:  ADDWFC x8C,W
04DFE:  MOVWF  FEA
04E00:  MOVF   FEF,W
04E02:  CLRF   xE5
04E04:  CLRF   xE4
04E06:  CLRF   xE3
04E08:  MOVWF  xE2
04E0A:  MOVFF  3E3,03
04E0E:  MOVFF  3E2,02
04E12:  CLRF   00
04E14:  CLRF   01
04E16:  MOVF   00,W
04E18:  IORWF  xDD,F
04E1A:  MOVF   01,W
04E1C:  IORWF  xDE,F
04E1E:  MOVF   02,W
04E20:  IORWF  xDF,F
04E22:  MOVF   03,W
04E24:  IORWF  xE0,F
04E26:  MOVLW  03
04E28:  ADDWF  x8B,W
04E2A:  MOVWF  FE9
04E2C:  MOVLW  00
04E2E:  ADDWFC x8C,W
04E30:  MOVWF  FEA
04E32:  MOVF   FEF,W
04E34:  CLRF   xE5
04E36:  CLRF   xE4
04E38:  CLRF   xE3
04E3A:  MOVWF  xE2
04E3C:  MOVFF  3E4,03
04E40:  MOVFF  3E3,02
04E44:  MOVFF  3E2,01
04E48:  CLRF   00
04E4A:  MOVF   00,W
04E4C:  IORWF  xDD,F
04E4E:  MOVF   01,W
04E50:  IORWF  xDE,F
04E52:  MOVF   02,W
04E54:  IORWF  xDF,F
04E56:  MOVF   03,W
04E58:  IORWF  xE0,F
04E5A:  MOVLW  04
04E5C:  ADDWF  x8B,W
04E5E:  MOVWF  FE9
04E60:  MOVLW  00
04E62:  ADDWFC x8C,W
04E64:  MOVWF  FEA
04E66:  MOVF   FEF,W
04E68:  MOVWF  00
04E6A:  CLRF   01
04E6C:  CLRF   02
04E6E:  CLRF   03
04E70:  MOVF   00,W
04E72:  IORWF  xDD,W
04E74:  MOVWF  x8E
04E76:  MOVF   01,W
04E78:  IORWF  xDE,W
04E7A:  MOVWF  x8F
04E7C:  MOVF   02,W
04E7E:  IORWF  xDF,W
04E80:  MOVWF  x90
04E82:  MOVF   03,W
04E84:  IORWF  xE0,W
04E86:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
04E88:  MOVLW  07
04E8A:  ADDWF  x8B,W
04E8C:  MOVWF  FE9
04E8E:  MOVLW  00
04E90:  ADDWFC x8C,W
04E92:  MOVWF  FEA
04E94:  MOVF   FEF,W
04E96:  CLRF   xDE
04E98:  MOVWF  xDD
04E9A:  MOVFF  3DD,3DE
04E9E:  CLRF   xDD
04EA0:  MOVLW  08
04EA2:  ADDWF  x8B,W
04EA4:  MOVWF  FE9
04EA6:  MOVLW  00
04EA8:  ADDWFC x8C,W
04EAA:  MOVWF  FEA
04EAC:  MOVF   FEF,W
04EAE:  CLRF   03
04EB0:  IORWF  xDD,W
04EB2:  MOVWF  x92
04EB4:  MOVF   03,W
04EB6:  IORWF  xDE,W
04EB8:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
04EBA:  MOVLW  1A
04EBC:  MOVWF  FF6
04EBE:  MOVLW  0E
04EC0:  MOVWF  FF7
04EC2:  MOVLW  00
04EC4:  MOVWF  FF8
04EC6:  MOVLW  0C
04EC8:  MOVLB  4
04ECA:  MOVWF  x19
04ECC:  MOVLB  0
04ECE:  CALL   1518
04ED2:  MOVFF  38D,4A4
04ED6:  MOVLW  37
04ED8:  MOVLB  4
04EDA:  MOVWF  xA5
04EDC:  MOVLB  0
04EDE:  CALL   1B20
04EE2:  MOVLW  0D
04EE4:  MOVLB  4
04EE6:  MOVWF  xE6
04EE8:  MOVLB  0
04EEA:  CALL   1496
04EEE:  MOVLW  0A
04EF0:  MOVLB  4
04EF2:  MOVWF  xE6
04EF4:  MOVLB  0
04EF6:  CALL   1496
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
04EFA:  MOVLW  2E
04EFC:  MOVWF  FF6
04EFE:  MOVLW  0E
04F00:  MOVWF  FF7
04F02:  MOVLW  00
04F04:  MOVWF  FF8
04F06:  MOVLW  0E
04F08:  MOVLB  4
04F0A:  MOVWF  x19
04F0C:  MOVLB  0
04F0E:  CALL   1518
04F12:  MOVFF  391,4A4
04F16:  MOVLW  37
04F18:  MOVLB  4
04F1A:  MOVWF  xA5
04F1C:  MOVLB  0
04F1E:  CALL   1B20
04F22:  MOVFF  390,4A4
04F26:  MOVLW  37
04F28:  MOVLB  4
04F2A:  MOVWF  xA5
04F2C:  MOVLB  0
04F2E:  CALL   1B20
04F32:  MOVFF  38F,4A4
04F36:  MOVLW  37
04F38:  MOVLB  4
04F3A:  MOVWF  xA5
04F3C:  MOVLB  0
04F3E:  CALL   1B20
04F42:  MOVFF  38E,4A4
04F46:  MOVLW  37
04F48:  MOVLB  4
04F4A:  MOVWF  xA5
04F4C:  MOVLB  0
04F4E:  CALL   1B20
04F52:  MOVLW  0D
04F54:  MOVLB  4
04F56:  MOVWF  xE6
04F58:  MOVLB  0
04F5A:  CALL   1496
04F5E:  MOVLW  0A
04F60:  MOVLB  4
04F62:  MOVWF  xE6
04F64:  MOVLB  0
04F66:  CALL   1496
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
04F6A:  MOVLW  44
04F6C:  MOVWF  FF6
04F6E:  MOVLW  0E
04F70:  MOVWF  FF7
04F72:  MOVLW  00
04F74:  MOVWF  FF8
04F76:  MOVLW  0E
04F78:  MOVLB  4
04F7A:  MOVWF  x19
04F7C:  MOVLB  0
04F7E:  CALL   1518
04F82:  MOVFF  393,4A4
04F86:  MOVLW  37
04F88:  MOVLB  4
04F8A:  MOVWF  xA5
04F8C:  MOVLB  0
04F8E:  CALL   1B20
04F92:  MOVFF  392,4A4
04F96:  MOVLW  37
04F98:  MOVLB  4
04F9A:  MOVWF  xA5
04F9C:  MOVLB  0
04F9E:  CALL   1B20
04FA2:  MOVLW  0D
04FA4:  MOVLB  4
04FA6:  MOVWF  xE6
04FA8:  MOVLB  0
04FAA:  CALL   1496
04FAE:  MOVLW  0A
04FB0:  MOVLB  4
04FB2:  MOVWF  xE6
04FB4:  MOVLB  0
04FB6:  CALL   1496
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
04FBA:  MOVFF  38D,492
04FBE:  MOVLB  4
04FC0:  CLRF   x93
04FC2:  MOVLB  0
04FC4:  CALL   30CA
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
04FC8:  MOVLW  5A
04FCA:  MOVWF  FF6
04FCC:  MOVLW  0E
04FCE:  MOVWF  FF7
04FD0:  MOVLW  00
04FD2:  MOVWF  FF8
04FD4:  CALL   14E8
....................    for (p = 0; p < flash_write_param.packetnum; p++)
04FD8:  MOVLB  3
04FDA:  CLRF   xD5
04FDC:  CLRF   xD4
04FDE:  MOVLB  0
04FE0:  MOVLB  3
04FE2:  MOVF   xD5,W
04FE4:  SUBWF  x93,W
04FE6:  BTFSC  FD8.0
04FE8:  BRA    4FF0
04FEA:  MOVLB  0
04FEC:  GOTO   511E
04FF0:  MOVLB  0
04FF2:  BTFSS  FD8.2
04FF4:  GOTO   500A
04FF8:  MOVLB  3
04FFA:  MOVF   x92,W
04FFC:  SUBWF  xD4,W
04FFE:  BTFSS  FD8.0
05000:  BRA    5008
05002:  MOVLB  0
05004:  GOTO   511E
05008:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
0500A:  MOVLB  3
0500C:  RLCF   xD4,W
0500E:  MOVWF  xD6
05010:  RLCF   xD5,W
05012:  MOVWF  xD7
05014:  RLCF   xD6,F
05016:  RLCF   xD7,F
05018:  RLCF   xD6,F
0501A:  RLCF   xD7,F
0501C:  RLCF   xD6,F
0501E:  RLCF   xD7,F
05020:  RLCF   xD6,F
05022:  RLCF   xD7,F
05024:  RLCF   xD6,F
05026:  RLCF   xD7,F
05028:  MOVLW  C0
0502A:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
0502C:  CLRF   xD8
0502E:  MOVLB  0
05030:  MOVLB  3
05032:  MOVF   xD8,W
05034:  SUBLW  3F
05036:  BTFSC  FD8.0
05038:  BRA    5040
0503A:  MOVLB  0
0503C:  GOTO   50A0
05040:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
05042:  CLRF   03
05044:  MOVLB  3
05046:  MOVF   xD8,W
05048:  ADDLW  94
0504A:  MOVWF  FE9
0504C:  MOVLW  03
0504E:  ADDWFC 03,W
05050:  MOVWF  FEA
05052:  MOVF   xD8,W
05054:  ADDWF  xD6,W
05056:  MOVWF  xDF
05058:  MOVLW  00
0505A:  ADDWFC xD7,W
0505C:  MOVWF  xE0
0505E:  MOVF   xDF,W
05060:  MOVWF  00
05062:  CLRF   03
05064:  MOVF   00,W
05066:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05068:  CLRF   03
0506A:  MOVF   xD8,W
0506C:  ADDLW  94
0506E:  MOVWF  FE9
05070:  MOVLW  03
05072:  ADDWFC 03,W
05074:  MOVWF  FEA
05076:  MOVFF  FEF,3DD
0507A:  MOVFF  3DD,4A4
0507E:  MOVLW  37
05080:  MOVLB  4
05082:  MOVWF  xA5
05084:  MOVLB  0
05086:  CALL   1B20
0508A:  MOVLW  20
0508C:  MOVLB  4
0508E:  MOVWF  xE6
05090:  MOVLB  0
05092:  CALL   1496
05096:  MOVLB  3
05098:  INCF   xD8,F
0509A:  MOVLB  0
0509C:  GOTO   5030
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
050A0:  MOVLB  3
050A2:  RLCF   xD4,W
050A4:  MOVWF  02
050A6:  RLCF   xD5,W
050A8:  MOVWF  03
050AA:  RLCF   02,F
050AC:  RLCF   03,F
050AE:  RLCF   02,F
050B0:  RLCF   03,F
050B2:  RLCF   02,F
050B4:  RLCF   03,F
050B6:  RLCF   02,F
050B8:  RLCF   03,F
050BA:  RLCF   02,F
050BC:  RLCF   03,F
050BE:  MOVLW  C0
050C0:  ANDWF  02,F
050C2:  MOVF   02,W
050C4:  ADDWF  x8E,W
050C6:  MOVWF  xD9
050C8:  MOVF   03,W
050CA:  ADDWFC x8F,W
050CC:  MOVWF  xDA
050CE:  MOVLW  00
050D0:  ADDWFC x90,W
050D2:  MOVWF  xDB
050D4:  MOVLW  00
050D6:  ADDWFC x91,W
050D8:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
050DA:  MOVFF  E3,4E6
050DE:  MOVFF  E2,4E5
050E2:  MOVFF  E1,4E4
050E6:  MOVFF  E0,4E3
050EA:  MOVFF  3DC,4EA
050EE:  MOVFF  3DB,4E9
050F2:  MOVFF  3DA,4E8
050F6:  MOVFF  3D9,4E7
050FA:  MOVLW  03
050FC:  MOVLB  4
050FE:  MOVWF  xEC
05100:  MOVLW  94
05102:  MOVWF  xEB
05104:  CLRF   xEE
05106:  MOVLW  40
05108:  MOVWF  xED
0510A:  MOVLB  0
0510C:  CALL   273C
05110:  MOVLB  3
05112:  INCF   xD4,F
05114:  BTFSC  FD8.2
05116:  INCF   xD5,F
05118:  MOVLB  0
0511A:  GOTO   4FE0
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
0511E:  MOVFF  38D,492
05122:  MOVLW  02
05124:  MOVLB  4
05126:  MOVWF  x93
05128:  MOVLB  0
0512A:  CALL   30CA
....................    fprintf(PC, "\r\n");
0512E:  MOVLW  0D
05130:  MOVLB  4
05132:  MOVWF  xE6
05134:  MOVLB  0
05136:  CALL   1496
0513A:  MOVLW  0A
0513C:  MOVLB  4
0513E:  MOVWF  xE6
05140:  MOVLB  0
05142:  CALL   1496
....................    fprintf(PC, "End Flash Write Demo\r\n");
05146:  MOVLW  68
05148:  MOVWF  FF6
0514A:  MOVLW  0E
0514C:  MOVWF  FF7
0514E:  MOVLW  00
05150:  MOVWF  FF8
05152:  CALL   14E8
05156:  GOTO   6010 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
0518A:  MOVLW  80
0518C:  MOVWF  FF6
0518E:  MOVLW  0E
05190:  MOVWF  FF7
05192:  MOVLW  00
05194:  MOVWF  FF8
05196:  CALL   14E8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0519A:  MOVLB  3
0519C:  MOVF   x8B,W
0519E:  MOVWF  FE9
051A0:  MOVF   x8C,W
051A2:  MOVWF  FEA
051A4:  MOVFF  FEF,491
051A8:  MOVFF  491,492
051AC:  MOVLW  01
051AE:  MOVLB  4
051B0:  MOVWF  x93
051B2:  MOVLB  0
051B4:  CALL   30CA
....................    flash_setting(mis_fm);
051B8:  MOVFF  E3,498
051BC:  MOVFF  E2,497
051C0:  MOVFF  E1,496
051C4:  MOVFF  E0,495
051C8:  CALL   515A
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
051CC:  MOVLB  3
051CE:  CLRF   x90
051D0:  CLRF   x8F
051D2:  CLRF   x8E
051D4:  CLRF   x8D
051D6:  MOVLW  01
051D8:  MOVWF  x91
051DA:  MOVLW  02
051DC:  MOVWF  x92
051DE:  MOVLW  03
051E0:  MOVWF  x93
051E2:  MOVLW  04
051E4:  MOVWF  x94
051E6:  CLRF   x95
051E8:  CLRF   x96
051EA:  CLRF   x97
051EC:  CLRF   x98
051EE:  CLRF   x99
051F0:  CLRF   x9A
051F2:  CLRF   x9B
051F4:  CLRF   x9C
051F6:  CLRF   x9D
051F8:  CLRF   x9E
051FA:  CLRF   x9F
051FC:  CLRF   xA0
051FE:  CLRF   xA1
05200:  CLRF   xA2
05202:  CLRF   xA3
05204:  CLRF   xA4
05206:  CLRF   xA5
05208:  CLRF   xA6
0520A:  CLRF   xA7
0520C:  CLRF   xA8
0520E:  CLRF   xA9
05210:  CLRF   xAA
05212:  CLRF   xAB
05214:  CLRF   xAC
05216:  CLRF   xAD
05218:  CLRF   xAE
0521A:  CLRF   xAF
0521C:  CLRF   xB0
0521E:  CLRF   xB1
05220:  CLRF   xB2
05222:  CLRF   xB3
05224:  CLRF   xB4
05226:  CLRF   xB5
05228:  CLRF   xB6
0522A:  CLRF   xB7
0522C:  CLRF   xB8
0522E:  CLRF   xB9
05230:  CLRF   xBA
05232:  CLRF   xBB
05234:  CLRF   xBC
05236:  CLRF   xBD
05238:  CLRF   xBE
0523A:  CLRF   xBF
0523C:  CLRF   xC0
0523E:  CLRF   xC1
05240:  CLRF   xC2
05242:  CLRF   xC3
05244:  CLRF   xC4
05246:  CLRF   xC5
05248:  CLRF   xC6
0524A:  CLRF   xC7
0524C:  CLRF   xC8
0524E:  CLRF   xC9
05250:  CLRF   xCA
05252:  CLRF   xCB
05254:  CLRF   xCC
05256:  CLRF   xCD
05258:  CLRF   xCE
0525A:  CLRF   xCF
0525C:  CLRF   xD0
0525E:  CLRF   xD1
05260:  CLRF   xD2
05262:  CLRF   xD3
05264:  CLRF   xD4
05266:  CLRF   xD5
05268:  CLRF   xD6
0526A:  CLRF   xD7
0526C:  CLRF   xD8
0526E:  CLRF   xD9
05270:  CLRF   xDA
05272:  CLRF   xDB
05274:  CLRF   xDC
05276:  CLRF   xDD
05278:  CLRF   xDE
0527A:  CLRF   xDF
0527C:  CLRF   xE0
0527E:  CLRF   xE1
05280:  CLRF   xE2
05282:  CLRF   xE3
05284:  CLRF   xE4
05286:  CLRF   xE5
05288:  CLRF   xE6
0528A:  CLRF   xE7
0528C:  CLRF   xE8
0528E:  CLRF   xE9
05290:  CLRF   xEA
05292:  CLRF   xEB
05294:  CLRF   xEC
05296:  CLRF   xED
05298:  CLRF   xEE
0529A:  CLRF   xEF
0529C:  CLRF   xF0
0529E:  CLRF   xF1
052A0:  CLRF   xF2
052A2:  CLRF   xF3
052A4:  CLRF   xF4
052A6:  CLRF   xF5
052A8:  CLRF   xF6
052AA:  CLRF   xF7
052AC:  CLRF   xF8
052AE:  CLRF   xF9
052B0:  CLRF   xFA
052B2:  CLRF   xFB
052B4:  CLRF   xFC
052B6:  CLRF   xFD
052B8:  CLRF   xFE
052BA:  CLRF   xFF
052BC:  MOVLB  4
052BE:  CLRF   x00
052C0:  CLRF   x01
052C2:  CLRF   x02
052C4:  CLRF   x03
052C6:  CLRF   x04
052C8:  CLRF   x05
052CA:  CLRF   x06
052CC:  CLRF   x07
052CE:  CLRF   x08
052D0:  CLRF   x09
052D2:  CLRF   x0A
052D4:  CLRF   x0B
052D6:  CLRF   x0C
052D8:  CLRF   x0D
052DA:  CLRF   x0E
052DC:  CLRF   x0F
052DE:  CLRF   x10
052E0:  CLRF   x11
052E2:  CLRF   x12
052E4:  CLRF   x13
052E6:  CLRF   x14
052E8:  CLRF   x15
052EA:  CLRF   x16
052EC:  CLRF   x17
052EE:  CLRF   x18
052F0:  CLRF   x19
052F2:  CLRF   x1A
052F4:  CLRF   x1B
052F6:  CLRF   x1C
052F8:  CLRF   x1D
052FA:  CLRF   x1E
052FC:  CLRF   x1F
052FE:  CLRF   x20
05300:  CLRF   x21
05302:  CLRF   x22
05304:  CLRF   x23
05306:  CLRF   x24
05308:  CLRF   x25
0530A:  CLRF   x26
0530C:  CLRF   x27
0530E:  CLRF   x28
05310:  CLRF   x29
05312:  CLRF   x2A
05314:  CLRF   x2B
05316:  CLRF   x2C
05318:  CLRF   x2D
0531A:  CLRF   x2E
0531C:  CLRF   x2F
0531E:  CLRF   x30
05320:  CLRF   x31
05322:  CLRF   x32
05324:  CLRF   x33
05326:  CLRF   x34
05328:  CLRF   x35
0532A:  CLRF   x36
0532C:  CLRF   x37
0532E:  CLRF   x38
05330:  CLRF   x39
05332:  CLRF   x3A
05334:  CLRF   x3B
05336:  CLRF   x3C
05338:  CLRF   x3D
0533A:  CLRF   x3E
0533C:  CLRF   x3F
0533E:  CLRF   x40
05340:  CLRF   x41
05342:  CLRF   x42
05344:  CLRF   x43
05346:  CLRF   x44
05348:  CLRF   x45
0534A:  CLRF   x46
0534C:  CLRF   x47
0534E:  CLRF   x48
05350:  CLRF   x49
05352:  CLRF   x4A
05354:  CLRF   x4B
05356:  CLRF   x4C
05358:  CLRF   x4D
0535A:  CLRF   x4E
0535C:  CLRF   x4F
0535E:  CLRF   x50
05360:  CLRF   x51
05362:  CLRF   x52
05364:  CLRF   x53
05366:  CLRF   x54
05368:  CLRF   x55
0536A:  CLRF   x56
0536C:  CLRF   x57
0536E:  CLRF   x58
05370:  CLRF   x59
05372:  CLRF   x5A
05374:  CLRF   x5B
05376:  CLRF   x5C
05378:  CLRF   x5D
0537A:  CLRF   x5E
0537C:  CLRF   x5F
0537E:  CLRF   x60
05380:  CLRF   x61
05382:  CLRF   x62
05384:  CLRF   x63
05386:  CLRF   x64
05388:  CLRF   x65
0538A:  CLRF   x66
0538C:  CLRF   x67
0538E:  CLRF   x68
05390:  CLRF   x69
05392:  CLRF   x6A
05394:  CLRF   x6B
05396:  CLRF   x6C
05398:  CLRF   x6D
0539A:  CLRF   x6E
0539C:  CLRF   x6F
0539E:  CLRF   x70
053A0:  CLRF   x71
053A2:  CLRF   x72
053A4:  CLRF   x73
053A6:  CLRF   x74
053A8:  CLRF   x75
053AA:  CLRF   x76
053AC:  CLRF   x77
053AE:  CLRF   x78
053B0:  CLRF   x79
053B2:  CLRF   x7A
053B4:  CLRF   x7B
053B6:  CLRF   x7C
053B8:  CLRF   x7D
053BA:  CLRF   x7E
053BC:  CLRF   x7F
053BE:  CLRF   x80
053C0:  CLRF   x81
053C2:  CLRF   x82
053C4:  CLRF   x83
053C6:  CLRF   x84
053C8:  CLRF   x85
053CA:  CLRF   x86
053CC:  CLRF   x87
053CE:  CLRF   x88
053D0:  CLRF   x89
053D2:  CLRF   x8A
053D4:  CLRF   x8B
053D6:  CLRF   x8C
053D8:  CLRF   x8D
053DA:  CLRF   x8E
053DC:  CLRF   x8F
053DE:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
053E0:  MOVFF  E3,4E6
053E4:  MOVFF  E2,4E5
053E8:  MOVFF  E1,4E4
053EC:  MOVFF  E0,4E3
053F0:  MOVFF  390,4EA
053F4:  MOVFF  38F,4E9
053F8:  MOVFF  38E,4E8
053FC:  MOVFF  38D,4E7
05400:  MOVLW  03
05402:  MOVWF  xEC
05404:  MOVLW  91
05406:  MOVWF  xEB
05408:  MOVLW  01
0540A:  MOVWF  xEE
0540C:  CLRF   xED
0540E:  MOVLB  0
05410:  CALL   273C
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05414:  MOVLB  3
05416:  MOVF   x8B,W
05418:  MOVWF  FE9
0541A:  MOVF   x8C,W
0541C:  MOVWF  FEA
0541E:  MOVFF  FEF,491
05422:  MOVFF  491,492
05426:  MOVLW  02
05428:  MOVLB  4
0542A:  MOVWF  x93
0542C:  MOVLB  0
0542E:  CALL   30CA
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
05432:  MOVLW  A6
05434:  MOVWF  FF6
05436:  MOVLW  0E
05438:  MOVWF  FF7
0543A:  MOVLW  00
0543C:  MOVWF  FF8
0543E:  CALL   14E8
05442:  GOTO   6020 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
05446:  MOVLW  CA
05448:  MOVWF  FF6
0544A:  MOVLW  0E
0544C:  MOVWF  FF7
0544E:  MOVLW  00
05450:  MOVWF  FF8
05452:  CALL   14E8
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
05456:  MOVLB  3
05458:  MOVF   x8B,W
0545A:  MOVWF  FE9
0545C:  MOVF   x8C,W
0545E:  MOVWF  FEA
05460:  MOVFF  FEF,3DD
05464:  MOVFF  3DD,492
05468:  MOVLW  01
0546A:  MOVLB  4
0546C:  MOVWF  x93
0546E:  MOVLB  0
05470:  CALL   30CA
....................    FLASH_PARAM flash_param = {0};
05474:  MOVLB  3
05476:  CLRF   x8D
05478:  CLRF   x8E
0547A:  CLRF   x8F
0547C:  CLRF   x90
0547E:  CLRF   x91
05480:  CLRF   x92
05482:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
05484:  MOVF   x8B,W
05486:  MOVWF  FE9
05488:  MOVF   x8C,W
0548A:  MOVWF  FEA
0548C:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
05490:  MOVLW  01
05492:  ADDWF  x8B,W
05494:  MOVWF  FE9
05496:  MOVLW  00
05498:  ADDWFC x8C,W
0549A:  MOVWF  FEA
0549C:  MOVF   FEF,W
0549E:  CLRF   xE0
054A0:  CLRF   xDF
054A2:  CLRF   xDE
054A4:  MOVWF  xDD
054A6:  MOVFF  3DD,3E0
054AA:  CLRF   xDD
054AC:  CLRF   xDE
054AE:  CLRF   xDF
054B0:  MOVLW  02
054B2:  ADDWF  x8B,W
054B4:  MOVWF  FE9
054B6:  MOVLW  00
054B8:  ADDWFC x8C,W
054BA:  MOVWF  FEA
054BC:  MOVF   FEF,W
054BE:  CLRF   xE5
054C0:  CLRF   xE4
054C2:  CLRF   xE3
054C4:  MOVWF  xE2
054C6:  MOVFF  3E3,03
054CA:  MOVFF  3E2,02
054CE:  CLRF   00
054D0:  CLRF   01
054D2:  MOVF   00,W
054D4:  IORWF  xDD,F
054D6:  MOVF   01,W
054D8:  IORWF  xDE,F
054DA:  MOVF   02,W
054DC:  IORWF  xDF,F
054DE:  MOVF   03,W
054E0:  IORWF  xE0,F
054E2:  MOVLW  03
054E4:  ADDWF  x8B,W
054E6:  MOVWF  FE9
054E8:  MOVLW  00
054EA:  ADDWFC x8C,W
054EC:  MOVWF  FEA
054EE:  MOVF   FEF,W
054F0:  CLRF   xE5
054F2:  CLRF   xE4
054F4:  CLRF   xE3
054F6:  MOVWF  xE2
054F8:  MOVFF  3E4,03
054FC:  MOVFF  3E3,02
05500:  MOVFF  3E2,01
05504:  CLRF   00
05506:  MOVF   00,W
05508:  IORWF  xDD,F
0550A:  MOVF   01,W
0550C:  IORWF  xDE,F
0550E:  MOVF   02,W
05510:  IORWF  xDF,F
05512:  MOVF   03,W
05514:  IORWF  xE0,F
05516:  MOVLW  04
05518:  ADDWF  x8B,W
0551A:  MOVWF  FE9
0551C:  MOVLW  00
0551E:  ADDWFC x8C,W
05520:  MOVWF  FEA
05522:  MOVF   FEF,W
05524:  MOVWF  00
05526:  CLRF   01
05528:  CLRF   02
0552A:  CLRF   03
0552C:  MOVF   00,W
0552E:  IORWF  xDD,W
05530:  MOVWF  x90
05532:  MOVF   01,W
05534:  IORWF  xDE,W
05536:  MOVWF  x91
05538:  MOVF   02,W
0553A:  IORWF  xDF,W
0553C:  MOVWF  x92
0553E:  MOVF   03,W
05540:  IORWF  xE0,W
05542:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
05544:  MOVLW  07
05546:  ADDWF  x8B,W
05548:  MOVWF  FE9
0554A:  MOVLW  00
0554C:  ADDWFC x8C,W
0554E:  MOVWF  FEA
05550:  MOVF   FEF,W
05552:  CLRF   xDE
05554:  MOVWF  xDD
05556:  MOVFF  3DD,3DE
0555A:  CLRF   xDD
0555C:  MOVLW  08
0555E:  ADDWF  x8B,W
05560:  MOVWF  FE9
05562:  MOVLW  00
05564:  ADDWFC x8C,W
05566:  MOVWF  FEA
05568:  MOVF   FEF,W
0556A:  CLRF   03
0556C:  IORWF  xDD,W
0556E:  MOVWF  x8E
05570:  MOVF   03,W
05572:  IORWF  xDE,W
05574:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
05576:  MOVLW  DE
05578:  MOVWF  FF6
0557A:  MOVLW  0E
0557C:  MOVWF  FF7
0557E:  MOVLW  00
05580:  MOVWF  FF8
05582:  MOVLW  0C
05584:  MOVLB  4
05586:  MOVWF  x19
05588:  MOVLB  0
0558A:  CALL   1518
0558E:  MOVFF  38D,4A4
05592:  MOVLW  37
05594:  MOVLB  4
05596:  MOVWF  xA5
05598:  MOVLB  0
0559A:  CALL   1B20
0559E:  MOVLW  0D
055A0:  MOVLB  4
055A2:  MOVWF  xE6
055A4:  MOVLB  0
055A6:  CALL   1496
055AA:  MOVLW  0A
055AC:  MOVLB  4
055AE:  MOVWF  xE6
055B0:  MOVLB  0
055B2:  CALL   1496
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
055B6:  MOVLW  F2
055B8:  MOVWF  FF6
055BA:  MOVLW  0E
055BC:  MOVWF  FF7
055BE:  MOVLW  00
055C0:  MOVWF  FF8
055C2:  MOVLW  0E
055C4:  MOVLB  4
055C6:  MOVWF  x19
055C8:  MOVLB  0
055CA:  CALL   1518
055CE:  MOVFF  393,4A4
055D2:  MOVLW  37
055D4:  MOVLB  4
055D6:  MOVWF  xA5
055D8:  MOVLB  0
055DA:  CALL   1B20
055DE:  MOVFF  392,4A4
055E2:  MOVLW  37
055E4:  MOVLB  4
055E6:  MOVWF  xA5
055E8:  MOVLB  0
055EA:  CALL   1B20
055EE:  MOVFF  391,4A4
055F2:  MOVLW  37
055F4:  MOVLB  4
055F6:  MOVWF  xA5
055F8:  MOVLB  0
055FA:  CALL   1B20
055FE:  MOVFF  390,4A4
05602:  MOVLW  37
05604:  MOVLB  4
05606:  MOVWF  xA5
05608:  MOVLB  0
0560A:  CALL   1B20
0560E:  MOVLW  0D
05610:  MOVLB  4
05612:  MOVWF  xE6
05614:  MOVLB  0
05616:  CALL   1496
0561A:  MOVLW  0A
0561C:  MOVLB  4
0561E:  MOVWF  xE6
05620:  MOVLB  0
05622:  CALL   1496
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
05626:  MOVLW  08
05628:  MOVWF  FF6
0562A:  MOVLW  0F
0562C:  MOVWF  FF7
0562E:  MOVLW  00
05630:  MOVWF  FF8
05632:  MOVLW  0E
05634:  MOVLB  4
05636:  MOVWF  x19
05638:  MOVLB  0
0563A:  CALL   1518
0563E:  MOVFF  38F,4A4
05642:  MOVLW  37
05644:  MOVLB  4
05646:  MOVWF  xA5
05648:  MOVLB  0
0564A:  CALL   1B20
0564E:  MOVFF  38E,4A4
05652:  MOVLW  37
05654:  MOVLB  4
05656:  MOVWF  xA5
05658:  MOVLB  0
0565A:  CALL   1B20
0565E:  MOVLW  0D
05660:  MOVLB  4
05662:  MOVWF  xE6
05664:  MOVLB  0
05666:  CALL   1496
0566A:  MOVLW  0A
0566C:  MOVLB  4
0566E:  MOVWF  xE6
05670:  MOVLB  0
05672:  CALL   1496
....................    
....................    piclog_make(flash_param.id, 0x00);
05676:  MOVFF  38D,492
0567A:  MOVLB  4
0567C:  CLRF   x93
0567E:  MOVLB  0
05680:  CALL   30CA
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
05684:  MOVLB  3
05686:  CLRF   x94
05688:  CLRF   x95
0568A:  CLRF   x96
0568C:  CLRF   x97
0568E:  CLRF   x98
05690:  CLRF   x99
05692:  CLRF   x9A
05694:  CLRF   x9B
05696:  CLRF   x9C
05698:  CLRF   x9D
0569A:  CLRF   x9E
0569C:  CLRF   x9F
0569E:  CLRF   xA0
056A0:  CLRF   xA1
056A2:  CLRF   xA2
056A4:  CLRF   xA3
056A6:  CLRF   xA4
056A8:  CLRF   xA5
056AA:  CLRF   xA6
056AC:  CLRF   xA7
056AE:  CLRF   xA8
056B0:  CLRF   xA9
056B2:  CLRF   xAA
056B4:  CLRF   xAB
056B6:  CLRF   xAC
056B8:  CLRF   xAD
056BA:  CLRF   xAE
056BC:  CLRF   xAF
056BE:  CLRF   xB0
056C0:  CLRF   xB1
056C2:  CLRF   xB2
056C4:  CLRF   xB3
056C6:  CLRF   xB4
056C8:  CLRF   xB5
056CA:  CLRF   xB6
056CC:  CLRF   xB7
056CE:  CLRF   xB8
056D0:  CLRF   xB9
056D2:  CLRF   xBA
056D4:  CLRF   xBB
056D6:  CLRF   xBC
056D8:  CLRF   xBD
056DA:  CLRF   xBE
056DC:  CLRF   xBF
056DE:  CLRF   xC0
056E0:  CLRF   xC1
056E2:  CLRF   xC2
056E4:  CLRF   xC3
056E6:  CLRF   xC4
056E8:  CLRF   xC5
056EA:  CLRF   xC6
056EC:  CLRF   xC7
056EE:  CLRF   xC8
056F0:  CLRF   xC9
056F2:  CLRF   xCA
056F4:  CLRF   xCB
056F6:  CLRF   xCC
056F8:  CLRF   xCD
056FA:  CLRF   xCE
056FC:  CLRF   xCF
056FE:  CLRF   xD0
05700:  CLRF   xD1
05702:  CLRF   xD2
05704:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
05706:  MOVLW  1E
05708:  MOVWF  FF6
0570A:  MOVLW  0F
0570C:  MOVWF  FF7
0570E:  MOVLW  00
05710:  MOVWF  FF8
05712:  MOVLB  0
05714:  CALL   14E8
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
05718:  MOVFF  E3,4E6
0571C:  MOVFF  E2,4E5
05720:  MOVFF  E1,4E4
05724:  MOVFF  E0,4E3
05728:  CALL   1848
0572C:  MOVF   01,F
0572E:  BTFSS  FD8.2
05730:  GOTO   5748
....................       fprintf(PC, "Mission Flash is not connected\r\n");
05734:  MOVLW  2A
05736:  MOVWF  FF6
05738:  MOVLW  0F
0573A:  MOVWF  FF7
0573C:  MOVLW  00
0573E:  MOVWF  FF8
05740:  CALL   14E8
....................       return;
05744:  GOTO   58D0
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
05748:  MOVLB  3
0574A:  CLRF   xDB
0574C:  CLRF   xDA
0574E:  CLRF   xD9
05750:  CLRF   xD8
05752:  MOVLB  0
05754:  MOVLB  3
05756:  MOVF   xDB,F
05758:  BTFSC  FD8.2
0575A:  BRA    5762
0575C:  MOVLB  0
0575E:  GOTO   58B0
05762:  MOVLB  0
05764:  MOVLB  3
05766:  MOVF   xDA,F
05768:  BTFSC  FD8.2
0576A:  BRA    5772
0576C:  MOVLB  0
0576E:  GOTO   58B0
05772:  MOVLB  0
05774:  MOVLB  3
05776:  MOVF   xD9,W
05778:  SUBWF  x8F,W
0577A:  BTFSC  FD8.0
0577C:  BRA    5784
0577E:  MOVLB  0
05780:  GOTO   58B0
05784:  MOVLB  0
05786:  BTFSS  FD8.2
05788:  GOTO   579E
0578C:  MOVLB  3
0578E:  MOVF   x8E,W
05790:  SUBWF  xD8,W
05792:  BTFSS  FD8.0
05794:  BRA    579C
05796:  MOVLB  0
05798:  GOTO   58B0
0579C:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
0579E:  MOVLB  3
057A0:  RLCF   xD8,W
057A2:  MOVWF  00
057A4:  RLCF   xD9,W
057A6:  MOVWF  01
057A8:  RLCF   xDA,W
057AA:  MOVWF  02
057AC:  RLCF   xDB,W
057AE:  MOVWF  03
057B0:  RLCF   00,F
057B2:  RLCF   01,F
057B4:  RLCF   02,F
057B6:  RLCF   03,F
057B8:  RLCF   00,F
057BA:  RLCF   01,F
057BC:  RLCF   02,F
057BE:  RLCF   03,F
057C0:  RLCF   00,F
057C2:  RLCF   01,F
057C4:  RLCF   02,F
057C6:  RLCF   03,F
057C8:  RLCF   00,F
057CA:  RLCF   01,F
057CC:  RLCF   02,F
057CE:  RLCF   03,F
057D0:  RLCF   00,F
057D2:  RLCF   01,F
057D4:  RLCF   02,F
057D6:  RLCF   03,F
057D8:  MOVLW  C0
057DA:  ANDWF  00,F
057DC:  MOVF   00,W
057DE:  ADDWF  x90,W
057E0:  MOVWF  xD4
057E2:  MOVF   01,W
057E4:  ADDWFC x91,W
057E6:  MOVWF  xD5
057E8:  MOVF   02,W
057EA:  ADDWFC x92,W
057EC:  MOVWF  xD6
057EE:  MOVF   03,W
057F0:  ADDWFC x93,W
057F2:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
057F4:  MOVFF  E3,498
057F8:  MOVFF  E2,497
057FC:  MOVFF  E1,496
05800:  MOVFF  E0,495
05804:  MOVFF  3D7,49C
05808:  MOVFF  3D6,49B
0580C:  MOVFF  3D5,49A
05810:  MOVFF  3D4,499
05814:  MOVLW  03
05816:  MOVLB  4
05818:  MOVWF  x9E
0581A:  MOVLW  94
0581C:  MOVWF  x9D
0581E:  CLRF   xA2
05820:  CLRF   xA1
05822:  CLRF   xA0
05824:  MOVLW  40
05826:  MOVWF  x9F
05828:  MOVLB  0
0582A:  CALL   1908
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
0582E:  MOVLB  3
05830:  CLRF   xDC
05832:  MOVLB  0
05834:  MOVLB  3
05836:  MOVF   xDC,W
05838:  SUBLW  3F
0583A:  BTFSC  FD8.0
0583C:  BRA    5844
0583E:  MOVLB  0
05840:  GOTO   5880
05844:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
05846:  CLRF   03
05848:  MOVLB  3
0584A:  MOVF   xDC,W
0584C:  ADDLW  94
0584E:  MOVWF  FE9
05850:  MOVLW  03
05852:  ADDWFC 03,W
05854:  MOVWF  FEA
05856:  MOVFF  FEF,3DD
0585A:  MOVFF  3DD,4A4
0585E:  MOVLW  37
05860:  MOVLB  4
05862:  MOVWF  xA5
05864:  MOVLB  0
05866:  CALL   1B20
0586A:  MOVLW  20
0586C:  MOVLB  4
0586E:  MOVWF  xE6
05870:  MOVLB  0
05872:  CALL   1496
05876:  MOVLB  3
05878:  INCF   xDC,F
0587A:  MOVLB  0
0587C:  GOTO   5834
....................       }
....................       fprintf(PC,"\r\n");
05880:  MOVLW  0D
05882:  MOVLB  4
05884:  MOVWF  xE6
05886:  MOVLB  0
05888:  CALL   1496
0588C:  MOVLW  0A
0588E:  MOVLB  4
05890:  MOVWF  xE6
05892:  MOVLB  0
05894:  CALL   1496
05898:  MOVLW  01
0589A:  MOVLB  3
0589C:  ADDWF  xD8,F
0589E:  BTFSC  FD8.0
058A0:  INCF   xD9,F
058A2:  BTFSC  FD8.2
058A4:  INCF   xDA,F
058A6:  BTFSC  FD8.2
058A8:  INCF   xDB,F
058AA:  MOVLB  0
058AC:  GOTO   5754
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
058B0:  MOVFF  38D,492
058B4:  MOVLW  02
058B6:  MOVLB  4
058B8:  MOVWF  x93
058BA:  MOVLB  0
058BC:  CALL   30CA
....................    fprintf(PC, "End Flash Read\r\n");
058C0:  MOVLW  4C
058C2:  MOVWF  FF6
058C4:  MOVLW  0F
058C6:  MOVWF  FF7
058C8:  MOVLW  00
058CA:  MOVWF  FF8
058CC:  CALL   14E8
058D0:  GOTO   6030 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
058D4:  MOVLW  5E
058D6:  MOVWF  FF6
058D8:  MOVLW  0F
058DA:  MOVWF  FF7
058DC:  MOVLW  00
058DE:  MOVWF  FF8
058E0:  CALL   14E8
....................    flash_setting(mis_fm);
058E4:  MOVFF  E3,498
058E8:  MOVFF  E2,497
058EC:  MOVFF  E1,496
058F0:  MOVFF  E0,495
058F4:  CALL   515A
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
058F8:  MOVLB  3
058FA:  CLRF   x90
058FC:  CLRF   x8F
058FE:  CLRF   x8E
05900:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
05902:  MOVFF  E3,498
05906:  MOVFF  E2,497
0590A:  MOVFF  E1,496
0590E:  MOVFF  E0,495
05912:  MOVFF  390,49C
05916:  MOVFF  38F,49B
0591A:  MOVFF  38E,49A
0591E:  MOVFF  38D,499
05922:  MOVLW  03
05924:  MOVLB  4
05926:  MOVWF  x9E
05928:  MOVLW  91
0592A:  MOVWF  x9D
0592C:  CLRF   xA2
0592E:  CLRF   xA1
05930:  CLRF   xA0
05932:  MOVLW  04
05934:  MOVWF  x9F
05936:  MOVLB  0
05938:  CALL   1908
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
0593C:  MOVLW  7A
0593E:  MOVWF  FF6
05940:  MOVLW  0F
05942:  MOVWF  FF7
05944:  MOVLW  00
05946:  MOVWF  FF8
05948:  MOVLW  0B
0594A:  MOVLB  4
0594C:  MOVWF  x19
0594E:  MOVLB  0
05950:  CALL   1518
05954:  MOVFF  391,4A4
05958:  MOVLW  37
0595A:  MOVLB  4
0595C:  MOVWF  xA5
0595E:  MOVLB  0
05960:  CALL   1B20
05964:  MOVLW  20
05966:  MOVLB  4
05968:  MOVWF  xE6
0596A:  MOVLB  0
0596C:  CALL   1496
05970:  MOVFF  392,4A4
05974:  MOVLW  37
05976:  MOVLB  4
05978:  MOVWF  xA5
0597A:  MOVLB  0
0597C:  CALL   1B20
05980:  MOVLW  20
05982:  MOVLB  4
05984:  MOVWF  xE6
05986:  MOVLB  0
05988:  CALL   1496
0598C:  MOVFF  393,4A4
05990:  MOVLW  37
05992:  MOVLB  4
05994:  MOVWF  xA5
05996:  MOVLB  0
05998:  CALL   1B20
0599C:  MOVLW  20
0599E:  MOVLB  4
059A0:  MOVWF  xE6
059A2:  MOVLB  0
059A4:  CALL   1496
059A8:  MOVFF  394,4A4
059AC:  MOVLW  37
059AE:  MOVLB  4
059B0:  MOVWF  xA5
059B2:  MOVLB  0
059B4:  CALL   1B20
059B8:  MOVLW  0D
059BA:  MOVLB  4
059BC:  MOVWF  xE6
059BE:  MOVLB  0
059C0:  CALL   1496
059C4:  MOVLW  0A
059C6:  MOVLB  4
059C8:  MOVWF  xE6
059CA:  MOVLB  0
059CC:  CALL   1496
....................    fprintf(PC, "End Flash Read Address\r\n");
059D0:  MOVLW  9C
059D2:  MOVWF  FF6
059D4:  MOVLW  0F
059D6:  MOVWF  FF7
059D8:  MOVLW  00
059DA:  MOVWF  FF8
059DC:  CALL   14E8
059E0:  GOTO   6040 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
059E4:  MOVLW  B6
059E6:  MOVWF  FF6
059E8:  MOVLW  0F
059EA:  MOVWF  FF7
059EC:  MOVLW  00
059EE:  MOVWF  FF8
059F0:  CALL   14E8
....................    flash_setting(mis_fm);
059F4:  MOVFF  E3,498
059F8:  MOVFF  E2,497
059FC:  MOVFF  E1,496
05A00:  MOVFF  E0,495
05A04:  CALL   515A
....................    flash_setting(smf);
05A08:  MOVFF  E7,498
05A0C:  MOVFF  E6,497
05A10:  MOVFF  E5,496
05A14:  MOVFF  E4,495
05A18:  CALL   515A
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
05A1C:  MOVLB  3
05A1E:  CLRF   x90
05A20:  CLRF   x8F
05A22:  CLRF   x8E
05A24:  CLRF   x8D
05A26:  CLRF   x94
05A28:  CLRF   x93
05A2A:  MOVLW  10
05A2C:  MOVWF  x92
05A2E:  CLRF   x91
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
05A30:  MOVFF  E3,498
05A34:  MOVFF  E2,497
05A38:  MOVFF  E1,496
05A3C:  MOVFF  E0,495
05A40:  MOVFF  390,49C
05A44:  MOVFF  38F,49B
05A48:  MOVFF  38E,49A
05A4C:  MOVFF  38D,499
05A50:  MOVLW  03
05A52:  MOVLB  4
05A54:  MOVWF  x9E
05A56:  MOVLW  95
05A58:  MOVWF  x9D
05A5A:  CLRF   xA2
05A5C:  CLRF   xA1
05A5E:  MOVLW  01
05A60:  MOVWF  xA0
05A62:  CLRF   x9F
05A64:  MOVLB  0
05A66:  CALL   1908
....................    write_data_bytes(smf, dest_address, read_data, 256);
05A6A:  MOVFF  E7,4E6
05A6E:  MOVFF  E6,4E5
05A72:  MOVFF  E5,4E4
05A76:  MOVFF  E4,4E3
05A7A:  MOVFF  394,4EA
05A7E:  MOVFF  393,4E9
05A82:  MOVFF  392,4E8
05A86:  MOVFF  391,4E7
05A8A:  MOVLW  03
05A8C:  MOVLB  4
05A8E:  MOVWF  xEC
05A90:  MOVLW  95
05A92:  MOVWF  xEB
05A94:  MOVLW  01
05A96:  MOVWF  xEE
05A98:  CLRF   xED
05A9A:  MOVLB  0
05A9C:  CALL   273C
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
05AA0:  MOVLW  CE
05AA2:  MOVWF  FF6
05AA4:  MOVLW  0F
05AA6:  MOVWF  FF7
05AA8:  MOVLW  00
05AAA:  MOVWF  FF8
05AAC:  CALL   14E8
05AB0:  GOTO   6050 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... 
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
05AB4:  MOVLW  4E
05AB6:  MOVWF  FF6
05AB8:  MOVLW  10
05ABA:  MOVWF  FF7
05ABC:  MOVLW  00
05ABE:  MOVWF  FF8
05AC0:  CALL   14E8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05AC4:  MOVLB  3
05AC6:  MOVF   x8B,W
05AC8:  MOVWF  FE9
05ACA:  MOVF   x8C,W
05ACC:  MOVWF  FEA
05ACE:  MOVFF  FEF,3CD
05AD2:  MOVFF  3CD,492
05AD6:  MOVLW  01
05AD8:  MOVLB  4
05ADA:  MOVWF  x93
05ADC:  MOVLB  0
05ADE:  CALL   30CA
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05AE2:  MOVLB  3
05AE4:  CLRF   x8D
05AE6:  CLRF   x8E
05AE8:  CLRF   x8F
05AEA:  CLRF   x90
05AEC:  CLRF   x91
05AEE:  CLRF   x92
05AF0:  CLRF   x93
05AF2:  CLRF   x94
05AF4:  CLRF   x95
05AF6:  CLRF   x96
05AF8:  CLRF   x97
05AFA:  CLRF   x98
05AFC:  CLRF   x99
05AFE:  CLRF   x9A
05B00:  CLRF   x9B
05B02:  CLRF   x9C
05B04:  CLRF   x9D
05B06:  CLRF   x9E
05B08:  CLRF   x9F
05B0A:  CLRF   xA0
05B0C:  CLRF   xA1
05B0E:  CLRF   xA2
05B10:  CLRF   xA3
05B12:  CLRF   xA4
05B14:  CLRF   xA5
05B16:  CLRF   xA6
05B18:  CLRF   xA7
05B1A:  CLRF   xA8
05B1C:  CLRF   xA9
05B1E:  CLRF   xAA
05B20:  CLRF   xAB
05B22:  CLRF   xAC
05B24:  CLRF   xAD
05B26:  CLRF   xAE
05B28:  CLRF   xAF
05B2A:  CLRF   xB0
05B2C:  CLRF   xB1
05B2E:  CLRF   xB2
05B30:  CLRF   xB3
05B32:  CLRF   xB4
05B34:  CLRF   xB5
05B36:  CLRF   xB6
05B38:  CLRF   xB7
05B3A:  CLRF   xB8
05B3C:  CLRF   xB9
05B3E:  CLRF   xBA
05B40:  CLRF   xBB
05B42:  CLRF   xBC
05B44:  CLRF   xBD
05B46:  CLRF   xBE
05B48:  CLRF   xBF
05B4A:  CLRF   xC0
05B4C:  CLRF   xC1
05B4E:  CLRF   xC2
05B50:  CLRF   xC3
05B52:  CLRF   xC4
05B54:  CLRF   xC5
05B56:  CLRF   xC6
05B58:  CLRF   xC7
05B5A:  CLRF   xC8
05B5C:  CLRF   xC9
05B5E:  CLRF   xCA
05B60:  CLRF   xCB
05B62:  CLRF   xCC
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
05B64:  MOVFF  E3,4E6
05B68:  MOVFF  E2,4E5
05B6C:  MOVFF  E1,4E4
05B70:  MOVFF  E0,4E3
05B74:  MOVLB  4
05B76:  CLRF   xEA
05B78:  CLRF   xE9
05B7A:  CLRF   xE8
05B7C:  CLRF   xE7
05B7E:  MOVLW  03
05B80:  MOVWF  xEC
05B82:  MOVLW  8D
05B84:  MOVWF  xEB
05B86:  CLRF   xEE
05B88:  MOVLW  40
05B8A:  MOVWF  xED
05B8C:  MOVLB  0
05B8E:  CALL   273C
....................    misf_init(); // Update the address area after writing
05B92:  CALL   1B90
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05B96:  MOVLB  3
05B98:  MOVF   x8B,W
05B9A:  MOVWF  FE9
05B9C:  MOVF   x8C,W
05B9E:  MOVWF  FEA
05BA0:  MOVFF  FEF,3CD
05BA4:  MOVFF  3CD,492
05BA8:  MOVLW  02
05BAA:  MOVLB  4
05BAC:  MOVWF  x93
05BAE:  MOVLB  0
05BB0:  CALL   30CA
....................    fprintf(PC, "End Flash Address Reset\r\n");
05BB4:  MOVLW  6A
05BB6:  MOVWF  FF6
05BB8:  MOVLW  10
05BBA:  MOVWF  FF7
05BBC:  MOVLW  00
05BBE:  MOVWF  FF8
05BC0:  CALL   14E8
05BC4:  GOTO   6060 (RETURN)
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_mission.c"
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
039DC:  MOVLW  84
039DE:  MOVWF  FF6
039E0:  MOVLW  10
039E2:  MOVWF  FF7
039E4:  MOVLW  00
039E6:  MOVWF  FF8
039E8:  CALL   14E8
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
039EC:  MOVLB  3
039EE:  MOVF   x8B,W
039F0:  MOVWF  FE9
039F2:  MOVF   x8C,W
039F4:  MOVWF  FEA
039F6:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
039FA:  MOVLW  01
039FC:  ADDWF  x8B,W
039FE:  MOVWF  FE9
03A00:  MOVLW  00
03A02:  ADDWFC x8C,W
03A04:  MOVWF  FEA
03A06:  MOVF   FEF,W
03A08:  CLRF   x97
03A0A:  CLRF   x96
03A0C:  CLRF   x95
03A0E:  MOVWF  x94
03A10:  MOVFF  394,397
03A14:  CLRF   x94
03A16:  CLRF   x95
03A18:  CLRF   x96
03A1A:  MOVLW  02
03A1C:  ADDWF  x8B,W
03A1E:  MOVWF  FE9
03A20:  MOVLW  00
03A22:  ADDWFC x8C,W
03A24:  MOVWF  FEA
03A26:  MOVF   FEF,W
03A28:  CLRF   x9C
03A2A:  CLRF   x9B
03A2C:  CLRF   x9A
03A2E:  MOVWF  x99
03A30:  MOVFF  39A,03
03A34:  MOVFF  399,02
03A38:  CLRF   00
03A3A:  CLRF   01
03A3C:  MOVF   00,W
03A3E:  IORWF  x94,F
03A40:  MOVF   01,W
03A42:  IORWF  x95,F
03A44:  MOVF   02,W
03A46:  IORWF  x96,F
03A48:  MOVF   03,W
03A4A:  IORWF  x97,F
03A4C:  MOVLW  03
03A4E:  ADDWF  x8B,W
03A50:  MOVWF  FE9
03A52:  MOVLW  00
03A54:  ADDWFC x8C,W
03A56:  MOVWF  FEA
03A58:  MOVF   FEF,W
03A5A:  CLRF   x9C
03A5C:  CLRF   x9B
03A5E:  CLRF   x9A
03A60:  MOVWF  x99
03A62:  MOVFF  39B,03
03A66:  MOVFF  39A,02
03A6A:  MOVFF  399,01
03A6E:  CLRF   00
03A70:  MOVF   00,W
03A72:  IORWF  x94,F
03A74:  MOVF   01,W
03A76:  IORWF  x95,F
03A78:  MOVF   02,W
03A7A:  IORWF  x96,F
03A7C:  MOVF   03,W
03A7E:  IORWF  x97,F
03A80:  MOVLW  04
03A82:  ADDWF  x8B,W
03A84:  MOVWF  FE9
03A86:  MOVLW  00
03A88:  ADDWFC x8C,W
03A8A:  MOVWF  FEA
03A8C:  MOVF   FEF,W
03A8E:  MOVWF  00
03A90:  CLRF   01
03A92:  CLRF   02
03A94:  CLRF   03
03A96:  MOVF   00,W
03A98:  IORWF  x94,W
03A9A:  MOVWF  x8E
03A9C:  MOVF   01,W
03A9E:  IORWF  x95,W
03AA0:  MOVWF  x8F
03AA2:  MOVF   02,W
03AA4:  IORWF  x96,W
03AA6:  MOVWF  x90
03AA8:  MOVF   03,W
03AAA:  IORWF  x97,W
03AAC:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
03AAE:  MOVLW  05
03AB0:  ADDWF  x8B,W
03AB2:  MOVWF  FE9
03AB4:  MOVLW  00
03AB6:  ADDWFC x8C,W
03AB8:  MOVWF  FEA
03ABA:  MOVF   FEF,W
03ABC:  CLRF   x95
03ABE:  MOVWF  x94
03AC0:  MOVFF  394,395
03AC4:  CLRF   x94
03AC6:  MOVLW  06
03AC8:  ADDWF  x8B,W
03ACA:  MOVWF  FE9
03ACC:  MOVLW  00
03ACE:  ADDWFC x8C,W
03AD0:  MOVWF  FEA
03AD2:  MOVF   FEF,W
03AD4:  CLRF   03
03AD6:  IORWF  x94,W
03AD8:  MOVWF  x92
03ADA:  MOVF   03,W
03ADC:  IORWF  x95,W
03ADE:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
03AE0:  MOVLW  98
03AE2:  MOVWF  FF6
03AE4:  MOVLW  10
03AE6:  MOVWF  FF7
03AE8:  MOVLW  00
03AEA:  MOVWF  FF8
03AEC:  MOVLW  0C
03AEE:  MOVLB  4
03AF0:  MOVWF  x19
03AF2:  MOVLB  0
03AF4:  CALL   1518
03AF8:  MOVFF  38D,4A4
03AFC:  MOVLW  37
03AFE:  MOVLB  4
03B00:  MOVWF  xA5
03B02:  MOVLB  0
03B04:  CALL   1B20
03B08:  MOVLW  0D
03B0A:  MOVLB  4
03B0C:  MOVWF  xE6
03B0E:  MOVLB  0
03B10:  CALL   1496
03B14:  MOVLW  0A
03B16:  MOVLB  4
03B18:  MOVWF  xE6
03B1A:  MOVLB  0
03B1C:  CALL   1496
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
03B20:  MOVLW  AC
03B22:  MOVWF  FF6
03B24:  MOVLW  10
03B26:  MOVWF  FF7
03B28:  MOVLW  00
03B2A:  MOVWF  FF8
03B2C:  MOVLW  0E
03B2E:  MOVLB  4
03B30:  MOVWF  x19
03B32:  MOVLB  0
03B34:  CALL   1518
03B38:  MOVFF  391,4A4
03B3C:  MOVLW  37
03B3E:  MOVLB  4
03B40:  MOVWF  xA5
03B42:  MOVLB  0
03B44:  CALL   1B20
03B48:  MOVFF  390,4A4
03B4C:  MOVLW  37
03B4E:  MOVLB  4
03B50:  MOVWF  xA5
03B52:  MOVLB  0
03B54:  CALL   1B20
03B58:  MOVFF  38F,4A4
03B5C:  MOVLW  37
03B5E:  MOVLB  4
03B60:  MOVWF  xA5
03B62:  MOVLB  0
03B64:  CALL   1B20
03B68:  MOVFF  38E,4A4
03B6C:  MOVLW  37
03B6E:  MOVLB  4
03B70:  MOVWF  xA5
03B72:  MOVLB  0
03B74:  CALL   1B20
03B78:  MOVLW  0D
03B7A:  MOVLB  4
03B7C:  MOVWF  xE6
03B7E:  MOVLB  0
03B80:  CALL   1496
03B84:  MOVLW  0A
03B86:  MOVLB  4
03B88:  MOVWF  xE6
03B8A:  MOVLB  0
03B8C:  CALL   1496
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
03B90:  MOVLW  C2
03B92:  MOVWF  FF6
03B94:  MOVLW  10
03B96:  MOVWF  FF7
03B98:  MOVLW  00
03B9A:  MOVWF  FF8
03B9C:  MOVLW  0E
03B9E:  MOVLB  4
03BA0:  MOVWF  x19
03BA2:  MOVLB  0
03BA4:  CALL   1518
03BA8:  MOVFF  393,4A4
03BAC:  MOVLW  37
03BAE:  MOVLB  4
03BB0:  MOVWF  xA5
03BB2:  MOVLB  0
03BB4:  CALL   1B20
03BB8:  MOVFF  392,4A4
03BBC:  MOVLW  37
03BBE:  MOVLB  4
03BC0:  MOVWF  xA5
03BC2:  MOVLB  0
03BC4:  CALL   1B20
03BC8:  MOVLW  0D
03BCA:  MOVLB  4
03BCC:  MOVWF  xE6
03BCE:  MOVLB  0
03BD0:  CALL   1496
03BD4:  MOVLW  0A
03BD6:  MOVLB  4
03BD8:  MOVWF  xE6
03BDA:  MOVLB  0
03BDC:  CALL   1496
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
03BE0:  MOVFF  38D,492
03BE4:  MOVLW  01
03BE6:  MOVLB  4
03BE8:  MOVWF  x93
03BEA:  MOVLB  0
03BEC:  CALL   30CA
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
03BF0:  MOVFF  38D,492
03BF4:  MOVLW  02
03BF6:  MOVLB  4
03BF8:  MOVWF  x93
03BFA:  MOVLB  0
03BFC:  CALL   30CA
....................    fprintf(PC, "End MODE DUMMY\r\n");
03C00:  MOVLW  D8
03C02:  MOVWF  FF6
03C04:  MOVLW  10
03C06:  MOVWF  FF7
03C08:  MOVLW  00
03C0A:  MOVWF  FF8
03C0C:  CALL   14E8
03C10:  GOTO   5FA4 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
0424E:  MOVLW  01
04250:  MOVLB  3
04252:  ADDWF  x8B,W
04254:  MOVWF  FE9
04256:  MOVLW  00
04258:  ADDWFC x8C,W
0425A:  MOVWF  FEA
0425C:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
04260:  MOVLW  EA
04262:  MOVWF  FF6
04264:  MOVLW  10
04266:  MOVWF  FF7
04268:  MOVLW  00
0426A:  MOVWF  FF8
0426C:  MOVLB  0
0426E:  CALL   14E8
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04272:  MOVLW  00
04274:  MOVWF  FF6
04276:  MOVLW  11
04278:  MOVWF  FF7
0427A:  MOVLW  00
0427C:  MOVWF  FF8
0427E:  MOVLW  0E
04280:  MOVLB  4
04282:  MOVWF  x19
04284:  MOVLB  0
04286:  CALL   1518
0428A:  MOVFF  38D,415
0428E:  MOVLW  1B
04290:  MOVLB  4
04292:  MOVWF  x16
04294:  MOVLB  0
04296:  CALL   3C5C
0429A:  MOVLW  0D
0429C:  MOVLB  4
0429E:  MOVWF  xE6
042A0:  MOVLB  0
042A2:  CALL   1496
042A6:  MOVLW  0A
042A8:  MOVLB  4
042AA:  MOVWF  xE6
042AC:  MOVLB  0
042AE:  CALL   1496
....................    output_high(CONNECT_CIGS1);
042B2:  BCF    F94.0
042B4:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
042B6:  BCF    F94.7
042B8:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
042BA:  MOVFF  38B,390
042BE:  GOTO   4126
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
042C2:  MOVLW  14
042C4:  MOVWF  FF6
042C6:  MOVLW  11
042C8:  MOVWF  FF7
042CA:  MOVLW  00
042CC:  MOVWF  FF8
042CE:  CALL   14E8
....................    output_low(CONNECT_CIGS1);
042D2:  BCF    F94.0
042D4:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
042D6:  BCF    F94.7
042D8:  BSF    F8B.7
042DA:  GOTO   5FB4 (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
0448C:  MOVLW  28
0448E:  MOVWF  FF6
04490:  MOVLW  11
04492:  MOVWF  FF7
04494:  MOVLW  00
04496:  MOVWF  FF8
04498:  CALL   14E8
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
0449C:  MOVLB  3
0449E:  MOVF   x8B,W
044A0:  MOVWF  FE9
044A2:  MOVF   x8C,W
044A4:  MOVWF  FEA
044A6:  MOVFF  FEF,38D
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
044AA:  MOVF   x8B,W
044AC:  MOVWF  FE9
044AE:  MOVF   x8C,W
044B0:  MOVWF  FEA
044B2:  MOVFF  FEF,38F
044B6:  MOVFF  38F,492
044BA:  MOVLW  01
044BC:  MOVLB  4
044BE:  MOVWF  x93
044C0:  MOVLB  0
044C2:  CALL   30CA
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
044C6:  MOVLB  3
044C8:  CLRF   x8E
044CA:  MOVLB  0
044CC:  MOVLB  3
044CE:  MOVF   x8E,W
044D0:  SUBLW  27
044D2:  BTFSC  FD8.0
044D4:  BRA    44DC
044D6:  MOVLB  0
044D8:  GOTO   4620
044DC:  MOVLB  0
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
044DE:  MOVLW  64
044E0:  MOVLB  4
044E2:  MOVWF  xFB
044E4:  MOVLB  0
044E6:  CALL   1468
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
044EA:  BCF    FD8.0
044EC:  MOVLB  3
044EE:  RLCF   x8E,W
044F0:  CLRF   03
044F2:  MOVWF  02
044F4:  BCF    FD8.0
044F6:  RLCF   02,F
044F8:  RLCF   03,F
044FA:  MOVF   02,W
044FC:  ADDLW  F4
044FE:  MOVWF  01
04500:  MOVLW  00
04502:  ADDWFC 03,F
04504:  MOVF   01,W
04506:  MOVWF  x8F
04508:  MOVFF  03,390
0450C:  CLRF   x96
0450E:  MOVLB  0
04510:  CALL   3F70
04514:  MOVFF  390,FEA
04518:  MOVFF  38F,FE9
0451C:  MOVFF  02,FEC
04520:  MOVF   FED,F
04522:  MOVFF  01,FEF
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
04526:  BCF    FD8.0
04528:  MOVLB  3
0452A:  RLCF   x8E,W
0452C:  ADDLW  01
0452E:  CLRF   03
04530:  MOVWF  02
04532:  BCF    FD8.0
04534:  RLCF   02,F
04536:  RLCF   03,F
04538:  MOVF   02,W
0453A:  ADDLW  F4
0453C:  MOVWF  01
0453E:  MOVLW  00
04540:  ADDWFC 03,F
04542:  MOVF   01,W
04544:  MOVWF  x8F
04546:  MOVFF  03,390
0454A:  MOVLW  01
0454C:  MOVWF  x96
0454E:  MOVLB  0
04550:  CALL   3F70
04554:  MOVFF  390,FEA
04558:  MOVFF  38F,FE9
0455C:  MOVFF  02,FEC
04560:  MOVF   FED,F
04562:  MOVFF  01,FEF
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
04566:  BCF    FD8.0
04568:  MOVLB  3
0456A:  RLCF   x8E,W
0456C:  CLRF   03
0456E:  MOVWF  02
04570:  BCF    FD8.0
04572:  RLCF   02,F
04574:  RLCF   03,F
04576:  MOVF   02,W
04578:  ADDLW  F4
0457A:  MOVWF  FE9
0457C:  MOVLW  00
0457E:  ADDWFC 03,W
04580:  MOVWF  FEA
04582:  MOVFF  FEC,390
04586:  MOVF   FED,F
04588:  MOVFF  FEF,38F
0458C:  BCF    FD8.0
0458E:  RLCF   x8E,W
04590:  ADDLW  01
04592:  CLRF   03
04594:  MOVWF  02
04596:  BCF    FD8.0
04598:  RLCF   02,F
0459A:  RLCF   03,F
0459C:  MOVF   02,W
0459E:  ADDLW  F4
045A0:  MOVWF  FE9
045A2:  MOVLW  00
045A4:  ADDWFC 03,W
045A6:  MOVWF  FEA
045A8:  MOVFF  FEC,392
045AC:  MOVF   FED,F
045AE:  MOVFF  FEF,391
045B2:  MOVFF  390,4A4
045B6:  MOVLW  37
045B8:  MOVLB  4
045BA:  MOVWF  xA5
045BC:  MOVLB  0
045BE:  CALL   1B20
045C2:  MOVFF  38F,4A4
045C6:  MOVLW  37
045C8:  MOVLB  4
045CA:  MOVWF  xA5
045CC:  MOVLB  0
045CE:  CALL   1B20
045D2:  MOVLW  2C
045D4:  MOVLB  4
045D6:  MOVWF  xE6
045D8:  MOVLB  0
045DA:  CALL   1496
045DE:  MOVFF  392,4A4
045E2:  MOVLW  37
045E4:  MOVLB  4
045E6:  MOVWF  xA5
045E8:  MOVLB  0
045EA:  CALL   1B20
045EE:  MOVFF  391,4A4
045F2:  MOVLW  37
045F4:  MOVLB  4
045F6:  MOVWF  xA5
045F8:  MOVLB  0
045FA:  CALL   1B20
045FE:  MOVLW  0D
04600:  MOVLB  4
04602:  MOVWF  xE6
04604:  MOVLB  0
04606:  CALL   1496
0460A:  MOVLW  0A
0460C:  MOVLB  4
0460E:  MOVWF  xE6
04610:  MOVLB  0
04612:  CALL   1496
04616:  MOVLB  3
04618:  INCF   x8E,F
0461A:  MOVLB  0
0461C:  GOTO   44CC
....................    }
04620:  GOTO   5FCC (RETURN)
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
05CA2:  MOVLW  3E
05CA4:  MOVWF  FF6
05CA6:  MOVLW  11
05CA8:  MOVWF  FF7
05CAA:  MOVLW  00
05CAC:  MOVWF  FF8
05CAE:  CALL   14E8
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
05CB2:  MOVLW  64
05CB4:  MOVLB  3
05CB6:  MOVWF  x8B
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
05CB8:  MOVLW  4C
05CBA:  MOVWF  FF6
05CBC:  MOVLW  11
05CBE:  MOVWF  FF7
05CC0:  MOVLW  00
05CC2:  MOVWF  FF8
05CC4:  MOVLW  0E
05CC6:  MOVLB  4
05CC8:  MOVWF  x19
05CCA:  MOVLB  0
05CCC:  CALL   1518
05CD0:  MOVFF  38B,415
05CD4:  MOVLW  1B
05CD6:  MOVLB  4
05CD8:  MOVWF  x16
05CDA:  MOVLB  0
05CDC:  CALL   3C5C
05CE0:  MOVLW  0D
05CE2:  MOVLB  4
05CE4:  MOVWF  xE6
05CE6:  MOVLB  0
05CE8:  CALL   1496
05CEC:  MOVLW  0A
05CEE:  MOVLB  4
05CF0:  MOVWF  xE6
05CF2:  MOVLB  0
05CF4:  CALL   1496
....................    output_high(CONNECT_CIGS1);
05CF8:  BCF    F94.0
05CFA:  BSF    F8B.0
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
05CFC:  MOVLW  0D
05CFE:  MOVWF  00
05D00:  DECFSZ 00,F
05D02:  BRA    5D00
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
05D04:  MOVLB  3
05D06:  CLRF   x96
05D08:  MOVLB  0
05D0A:  CALL   3F70
05D0E:  MOVFF  02,355
05D12:  MOVFF  01,354
....................    delay_us(10); // wait for the ADC to stabilize
05D16:  MOVLW  0D
05D18:  MOVWF  00
05D1A:  DECFSZ 00,F
05D1C:  BRA    5D1A
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
05D1E:  MOVLB  3
05D20:  CLRF   x96
05D22:  MOVLB  0
05D24:  CALL   3F70
05D28:  MOVFF  02,357
05D2C:  MOVFF  01,356
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
05D30:  MOVLW  0D
05D32:  MOVWF  00
05D34:  DECFSZ 00,F
05D36:  BRA    5D34
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
05D38:  MOVLB  3
05D3A:  CLRF   x91
05D3C:  CLRF   x90
05D3E:  MOVLB  0
05D40:  MOVLB  3
05D42:  MOVF   x91,F
05D44:  BTFSC  FD8.2
05D46:  BRA    5D4E
05D48:  MOVLB  0
05D4A:  GOTO   5E88
05D4E:  MOVLB  0
05D50:  MOVLB  3
05D52:  MOVF   x8B,W
05D54:  SUBWF  x90,W
05D56:  BTFSS  FD8.0
05D58:  BRA    5D60
05D5A:  MOVLB  0
05D5C:  GOTO   5E88
05D60:  MOVLB  0
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
05D62:  MOVLW  85
05D64:  MOVWF  00
05D66:  DECFSZ 00,F
05D68:  BRA    5D66
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
05D6A:  MOVLW  0D
05D6C:  MOVWF  00
05D6E:  DECFSZ 00,F
05D70:  BRA    5D6E
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
05D72:  BCF    FD8.0
05D74:  MOVLB  3
05D76:  RLCF   x90,W
05D78:  MOVWF  x93
05D7A:  RLCF   x91,W
05D7C:  MOVWF  x94
05D7E:  BCF    FD8.0
05D80:  RLCF   x93,W
05D82:  MOVWF  02
05D84:  RLCF   x94,W
05D86:  MOVWF  03
05D88:  MOVF   02,W
05D8A:  ADDLW  F4
05D8C:  MOVWF  01
05D8E:  MOVLW  00
05D90:  ADDWFC 03,F
05D92:  MOVF   01,W
05D94:  MOVWF  x93
05D96:  MOVFF  03,394
05D9A:  CLRF   x96
05D9C:  MOVLB  0
05D9E:  CALL   3F70
05DA2:  MOVFF  394,FEA
05DA6:  MOVFF  393,FE9
05DAA:  MOVFF  02,FEC
05DAE:  MOVF   FED,F
05DB0:  MOVFF  01,FEF
....................       
....................       current = 0; // reset current value
05DB4:  MOVLB  3
05DB6:  CLRF   x8F
05DB8:  CLRF   x8E
05DBA:  CLRF   x8D
05DBC:  CLRF   x8C
....................       for(int k=0; k<10; k++)
05DBE:  CLRF   x92
05DC0:  MOVLB  0
05DC2:  MOVLB  3
05DC4:  MOVF   x92,W
05DC6:  SUBLW  09
05DC8:  BTFSC  FD8.0
05DCA:  BRA    5DD2
05DCC:  MOVLB  0
05DCE:  GOTO   5E08
05DD2:  MOVLB  0
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
05DD4:  MOVLW  0D
05DD6:  MOVWF  00
05DD8:  DECFSZ 00,F
05DDA:  BRA    5DD8
....................             current = current + ad7490_read(AD7490_VIN0); 
05DDC:  MOVLB  3
05DDE:  CLRF   x96
05DE0:  MOVLB  0
05DE2:  CALL   3F70
05DE6:  MOVFF  02,03
05DEA:  MOVF   01,W
05DEC:  MOVLB  3
05DEE:  ADDWF  x8C,F
05DF0:  MOVF   03,W
05DF2:  ADDWFC x8D,F
05DF4:  MOVLW  00
05DF6:  ADDWFC x8E,F
05DF8:  MOVLW  00
05DFA:  ADDWFC x8F,F
05DFC:  MOVLB  0
05DFE:  MOVLB  3
05E00:  INCF   x92,F
05E02:  MOVLB  0
05E04:  GOTO   5DC2
....................       }    
....................       
....................       current = current / 10; // average the current value
05E08:  BCF    FD8.1
05E0A:  MOVFF  38F,424
05E0E:  MOVFF  38E,423
05E12:  MOVFF  38D,422
05E16:  MOVFF  38C,421
05E1A:  MOVLB  4
05E1C:  CLRF   x28
05E1E:  CLRF   x27
05E20:  CLRF   x26
05E22:  MOVLW  0A
05E24:  MOVWF  x25
05E26:  MOVLB  0
05E28:  CALL   5BC8
05E2C:  MOVFF  03,38F
05E30:  MOVFF  02,38E
05E34:  MOVFF  01,38D
05E38:  MOVFF  00,38C
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
05E3C:  MOVLW  0D
05E3E:  MOVWF  00
05E40:  DECFSZ 00,F
05E42:  BRA    5E40
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
05E44:  BCF    FD8.0
05E46:  MOVLB  3
05E48:  RLCF   x90,W
05E4A:  MOVWF  x93
05E4C:  RLCF   x91,W
05E4E:  MOVWF  x94
05E50:  MOVLW  01
05E52:  ADDWF  x93,F
05E54:  MOVLW  00
05E56:  ADDWFC x94,F
05E58:  BCF    FD8.0
05E5A:  RLCF   x93,W
05E5C:  MOVWF  02
05E5E:  RLCF   x94,W
05E60:  MOVWF  03
05E62:  MOVF   02,W
05E64:  ADDLW  F4
05E66:  MOVWF  FE9
05E68:  MOVLW  00
05E6A:  ADDWFC 03,W
05E6C:  MOVWF  FEA
05E6E:  MOVFF  38C,FEF
05E72:  MOVFF  38D,FEC
05E76:  MOVF   FED,F
05E78:  MOVLB  0
05E7A:  MOVLB  3
05E7C:  INCF   x90,F
05E7E:  BTFSC  FD8.2
05E80:  INCF   x91,F
05E82:  MOVLB  0
05E84:  GOTO   5D40
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
05E88:  MOVLW  60
05E8A:  MOVWF  FF6
05E8C:  MOVLW  11
05E8E:  MOVWF  FF7
05E90:  MOVLW  00
05E92:  MOVWF  FF8
05E94:  CALL   14E8
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
05E98:  BCF    F94.0
05E9A:  BCF    F8B.0
05E9C:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... 
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... 
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... 
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... 
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... 
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
05E9E:  MOVLB  3
05EA0:  MOVF   x88,W
05EA2:  MOVWF  FE9
05EA4:  MOVF   x89,W
05EA6:  MOVWF  FEA
05EA8:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
05EAC:  MOVLW  6C
05EAE:  MOVWF  FF6
05EB0:  MOVLW  11
05EB2:  MOVWF  FF7
05EB4:  MOVLW  00
05EB6:  MOVWF  FF8
05EB8:  MOVLB  0
05EBA:  CALL   14E8
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
05EBE:  MOVLW  B2
05EC0:  MOVWF  FF6
05EC2:  MOVLW  11
05EC4:  MOVWF  FF7
05EC6:  MOVLW  00
05EC8:  MOVWF  FF8
05ECA:  MOVLW  0C
05ECC:  MOVLB  4
05ECE:  MOVWF  x19
05ED0:  MOVLB  0
05ED2:  CALL   1518
05ED6:  MOVFF  38A,4A4
05EDA:  MOVLW  37
05EDC:  MOVLB  4
05EDE:  MOVWF  xA5
05EE0:  MOVLB  0
05EE2:  CALL   1B20
05EE6:  MOVLW  C0
05EE8:  MOVWF  FF6
05EEA:  MOVLW  11
05EEC:  MOVWF  FF7
05EEE:  MOVLW  00
05EF0:  MOVWF  FF8
05EF2:  MOVLW  04
05EF4:  MOVLB  4
05EF6:  MOVWF  x19
05EF8:  MOVLB  0
05EFA:  CALL   1518
....................    switch(command_id)
05EFE:  MOVLB  3
05F00:  MOVF   x8A,W
05F02:  XORLW  10
05F04:  MOVLB  0
05F06:  BTFSC  FD8.2
05F08:  GOTO   5F98
05F0C:  XORLW  01
05F0E:  BTFSC  FD8.2
05F10:  GOTO   5FA8
05F14:  XORLW  03
05F16:  BTFSC  FD8.2
05F18:  GOTO   5FB8
05F1C:  XORLW  13
05F1E:  BTFSC  FD8.2
05F20:  GOTO   5FC0
05F24:  XORLW  03
05F26:  BTFSC  FD8.2
05F28:  GOTO   5FD0
05F2C:  XORLW  92
05F2E:  BTFSC  FD8.2
05F30:  GOTO   5FD4
05F34:  XORLW  01
05F36:  BTFSC  FD8.2
05F38:  GOTO   5FE4
05F3C:  XORLW  03
05F3E:  BTFSC  FD8.2
05F40:  GOTO   5FF4
05F44:  XORLW  06
05F46:  BTFSC  FD8.2
05F48:  GOTO   6004
05F4C:  XORLW  01
05F4E:  BTFSC  FD8.2
05F50:  GOTO   6014
05F54:  XORLW  03
05F56:  BTFSC  FD8.2
05F58:  GOTO   6024
05F5C:  XORLW  01
05F5E:  BTFSC  FD8.2
05F60:  GOTO   6034
05F64:  XORLW  0D
05F66:  BTFSC  FD8.2
05F68:  GOTO   6044
05F6C:  XORLW  05
05F6E:  BTFSC  FD8.2
05F70:  GOTO   6054
05F74:  XORLW  EE
05F76:  BTFSC  FD8.2
05F78:  GOTO   6064
05F7C:  XORLW  03
05F7E:  BTFSC  FD8.2
05F80:  GOTO   606C
05F84:  XORLW  01
05F86:  BTFSC  FD8.2
05F88:  GOTO   6074
05F8C:  XORLW  03
05F8E:  BTFSC  FD8.2
05F90:  GOTO   607C
05F94:  GOTO   6084
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
05F98:  MOVFF  389,38C
05F9C:  MOVFF  388,38B
05FA0:  GOTO   39DC
....................          //mode_iv_meas_adc();
....................          break;
05FA4:  GOTO   6094
....................       case 0x11:
....................          mode_test_iv(content);
05FA8:  MOVFF  389,38C
05FAC:  MOVFF  388,38B
05FB0:  GOTO   424E
....................          break;
05FB4:  GOTO   6094
....................       case 0x12:
....................          test_adc();
05FB8:  GOTO   42DE
....................          break;
05FBC:  GOTO   6094
....................       case 0x01:
....................          mode_measure(content); // check if the flash is connected
05FC0:  MOVFF  389,38C
05FC4:  MOVFF  388,38B
05FC8:  GOTO   448C
....................          break;
05FCC:  GOTO   6094
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
05FD0:  GOTO   6094
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
05FD4:  MOVFF  389,38C
05FD8:  MOVFF  388,38B
05FDC:  GOTO   4990
....................          break;
05FE0:  GOTO   6094
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
05FE4:  MOVFF  389,38C
05FE8:  MOVFF  388,38B
05FEC:  GOTO   4A5A
....................          break;
05FF0:  GOTO   6094
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
05FF4:  MOVFF  389,38C
05FF8:  MOVFF  388,38B
05FFC:  GOTO   4BF4
....................          break;
06000:  GOTO   6094
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
06004:  MOVFF  389,38C
06008:  MOVFF  388,38B
0600C:  GOTO   4D8A
....................          break;
06010:  GOTO   6094
....................       case ID_FLASH_WRITE_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
06014:  MOVFF  389,38C
06018:  MOVFF  388,38B
0601C:  GOTO   518A
....................          break;
06020:  GOTO   6094
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
06024:  MOVFF  389,38C
06028:  MOVFF  388,38B
0602C:  GOTO   5446
....................          break;
06030:  GOTO   6094
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
06034:  MOVFF  389,38C
06038:  MOVFF  388,38B
0603C:  GOTO   58D4
....................          break;
06040:  GOTO   6094
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
06044:  MOVFF  389,38C
06048:  MOVFF  388,38B
0604C:  GOTO   59E4
....................          break;
06050:  GOTO   6094
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
06054:  MOVFF  389,38C
06058:  MOVFF  388,38B
0605C:  GOTO   5AB4
....................          break;
06060:  GOTO   6094
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
06064:  CALL   5CA2
....................          break;
06068:  GOTO   6094
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
0606C:  CALL   5CA2
....................          break;
06070:  GOTO   6094
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
06074:  CALL   5CA2
....................          break;
06078:  GOTO   6094
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
0607C:  CALL   5CA2
....................          break;
06080:  GOTO   6094
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
06084:  MOVLW  C6
06086:  MOVWF  FF6
06088:  MOVLW  11
0608A:  MOVWF  FF7
0608C:  MOVLW  00
0608E:  MOVWF  FF8
06090:  CALL   14E8
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
06094:  MOVLW  DE
06096:  MOVWF  FF6
06098:  MOVLW  11
0609A:  MOVWF  FF7
0609C:  MOVLW  00
0609E:  MOVWF  FF8
060A0:  CALL   14E8
060A4:  GOTO   610A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
07950:  MOVLW  24
07952:  MOVWF  FF6
07954:  MOVLW  12
07956:  MOVWF  FF7
07958:  MOVLW  00
0795A:  MOVWF  FF8
0795C:  CALL   14E8
....................    
....................    switch(command->frame_id)
07960:  MOVLB  3
07962:  MOVF   x82,W
07964:  MOVWF  FE9
07966:  MOVF   x83,W
07968:  MOVWF  FEA
0796A:  MOVF   FEF,W
0796C:  XORLW  00
0796E:  MOVLB  0
07970:  BTFSC  FD8.2
07972:  GOTO   798A
07976:  XORLW  01
07978:  BTFSC  FD8.2
0797A:  GOTO   799A
0797E:  XORLW  03
07980:  BTFSC  FD8.2
07982:  GOTO   79BA
07986:  GOTO   79CA
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0798A:  MOVFF  383,385
0798E:  MOVFF  382,384
07992:  GOTO   60BE
....................          break;
07996:  GOTO   79CA
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0799A:  MOVFF  383,385
0799E:  MOVFF  382,384
079A2:  GOTO   6140
079A6:  MOVF   01,F
079A8:  BTFSC  FD8.2
079AA:  GOTO   79B6
....................             return TRUE; // if status is finished, return TRUE
079AE:  MOVLW  01
079B0:  MOVWF  01
079B2:  GOTO   79CE
....................          }        
....................          break;
079B6:  GOTO   79CA
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
079BA:  MOVFF  383,385
079BE:  MOVFF  382,384
079C2:  GOTO   78DA
....................          break;
079C6:  GOTO   79CA
....................    }
....................    return FALSE;
079CA:  MOVLW  00
079CC:  MOVWF  01
079CE:  GOTO   826C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
060BE:  MOVLW  3C
060C0:  MOVWF  FF6
060C2:  MOVLW  12
060C4:  MOVWF  FF7
060C6:  MOVLW  00
060C8:  MOVWF  FF8
060CA:  CALL   14E8
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
060CE:  MOVLW  52
060D0:  MOVWF  FF6
060D2:  MOVLW  12
060D4:  MOVWF  FF7
060D6:  MOVLW  00
060D8:  MOVWF  FF8
060DA:  CALL   14E8
....................    transmit_ack();
060DE:  CALL   39C8
.................... 
....................    status[0] = EXECUTING_MISSION;
060E2:  MOVLW  02
060E4:  MOVWF  1D
....................    execute_mission(command->content);
060E6:  MOVLW  03
060E8:  MOVLB  3
060EA:  ADDWF  x84,W
060EC:  MOVWF  01
060EE:  MOVLW  00
060F0:  ADDWFC x85,W
060F2:  MOVWF  03
060F4:  MOVF   01,W
060F6:  MOVWF  x86
060F8:  MOVFF  03,387
060FC:  MOVFF  387,389
06100:  MOVFF  386,388
06104:  MOVLB  0
06106:  GOTO   5E9E
....................    if (is_empty_smf_data())
0610A:  CALL   60A8
0610E:  MOVF   01,F
06110:  BTFSC  FD8.2
06112:  GOTO   611E
....................       status[0] = FINISHED;
06116:  MOVLW  06
06118:  MOVWF  1D
0611A:  GOTO   6122
....................    else
....................       status[0] = SMF_USE_REQ;
0611E:  MOVLW  04
06120:  MOVWF  1D
06122:  GOTO   7996 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
06140:  MOVLW  6C
06142:  MOVWF  FF6
06144:  MOVLW  12
06146:  MOVWF  FF7
06148:  MOVLW  00
0614A:  MOVWF  FF8
0614C:  CALL   14E8
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
06150:  MOVLW  80
06152:  MOVWF  FF6
06154:  MOVLW  12
06156:  MOVWF  FF7
06158:  MOVLW  00
0615A:  MOVWF  FF8
0615C:  CALL   14E8
....................    transmit_status();
06160:  GOTO   6126
....................    if (status[0] == FINISHED)
06164:  MOVF   1D,W
06166:  SUBLW  06
06168:  BTFSS  FD8.2
0616A:  GOTO   618A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0616E:  MOVLW  9E
06170:  MOVWF  FF6
06172:  MOVLW  12
06174:  MOVWF  FF7
06176:  MOVLW  00
06178:  MOVWF  FF8
0617A:  CALL   14E8
....................       return TRUE;
0617E:  MOVLW  01
06180:  MOVWF  01
06182:  GOTO   6192
....................    }
06186:  GOTO   6192
....................    else{
....................       return FALSE;
0618A:  MOVLW  00
0618C:  MOVWF  01
0618E:  GOTO   6192
....................    }
06192:  GOTO   79A6 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
078DA:  MOVLW  BA
078DC:  MOVWF  FF6
078DE:  MOVLW  12
078E0:  MOVWF  FF7
078E2:  MOVLW  00
078E4:  MOVWF  FF8
078E6:  CALL   14E8
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
078EA:  MOVLW  D4
078EC:  MOVWF  FF6
078EE:  MOVLW  12
078F0:  MOVWF  FF7
078F2:  MOVLW  00
078F4:  MOVWF  FF8
078F6:  CALL   14E8
....................     transmit_ack();
078FA:  CALL   39C8
....................     
....................     if (command->content[0] == ALLOW) {
078FE:  MOVLW  03
07900:  MOVLB  3
07902:  ADDWF  x84,W
07904:  MOVWF  FE9
07906:  MOVLW  00
07908:  ADDWFC x85,W
0790A:  MOVWF  FEA
0790C:  DECFSZ FEF,W
0790E:  BRA    7914
07910:  BRA    791A
07912:  MOVLB  0
07914:  MOVLB  0
07916:  GOTO   793C
0791A:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
0791C:  MOVLW  EE
0791E:  MOVWF  FF6
07920:  MOVLW  12
07922:  MOVWF  FF7
07924:  MOVLW  00
07926:  MOVWF  FF8
07928:  CALL   14E8
....................         status[0] = COPYING;
0792C:  MOVLW  05
0792E:  MOVWF  1D
....................         smf_write();
07930:  GOTO   6BB0
....................         status[0] = FINISHED;
07934:  MOVLW  06
07936:  MOVWF  1D
....................     } else {
07938:  GOTO   794C
....................         fprintf(PC, "\t\t-> denyed\r\n");
0793C:  MOVLW  FC
0793E:  MOVWF  FF6
07940:  MOVLW  12
07942:  MOVWF  FF7
07944:  MOVLW  00
07946:  MOVWF  FF8
07948:  CALL   14E8
....................     }
0794C:  GOTO   79C6 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
079D2:  CLRF   FF8
079D4:  BCF    FD0.7
079D6:  BSF    07.7
079D8:  MOVLB  E
079DA:  MOVLW  55
079DC:  MOVWF  F7E
079DE:  MOVLW  AA
079E0:  MOVWF  F7E
079E2:  BCF    F66.6
079E4:  MOVLW  F9
079E6:  MOVWF  x2C
079E8:  MOVLW  00
079EA:  MOVWF  x2E
079EC:  MOVLW  40
079EE:  MOVWF  x12
079F0:  MOVLW  30
079F2:  MOVWF  x13
079F4:  MOVLW  20
079F6:  MOVWF  x22
079F8:  MOVLW  55
079FA:  MOVWF  F7E
079FC:  MOVLW  AA
079FE:  MOVWF  F7E
07A00:  BSF    F66.6
07A02:  CLRF   F9B
07A04:  CLRF   F64
07A06:  CLRF   F65
07A08:  CLRF   F66
07A0A:  MOVLW  02
07A0C:  MOVWF  FD3
07A0E:  CLRF   1B
07A10:  MOVLB  F
07A12:  BSF    x2D.3
07A14:  MOVLW  A0
07A16:  MOVWF  x2B
07A18:  MOVLW  01
07A1A:  MOVWF  x2C
07A1C:  MOVLW  A6
07A1E:  MOVWF  x2E
07A20:  MOVLW  90
07A22:  MOVWF  x2F
07A24:  BCF    F93.6
07A26:  BSF    F8A.6
07A28:  BCF    FC6.5
07A2A:  MOVLW  40
07A2C:  MOVWF  FC7
07A2E:  MOVLW  03
07A30:  MOVWF  FC8
07A32:  MOVLW  2A
07A34:  MOVWF  FC6
07A36:  BCF    F92.1
07A38:  BSF    F92.0
07A3A:  BCF    F92.3
07A3C:  BSF    F93.4
07A3E:  BCF    F93.5
07A40:  BCF    F93.2
07A42:  BCF    F8A.2
07A44:  BCF    1C.0
07A46:  CLRF   24
07A48:  CLRF   23
07A4A:  CLRF   22
07A4C:  CLRF   21
07A4E:  CLRF   28
07A50:  CLRF   27
07A52:  CLRF   26
07A54:  CLRF   25
07A56:  CLRF   2A
07A58:  CLRF   29
07A5A:  CLRF   2C
07A5C:  CLRF   2B
07A5E:  CLRF   4D
07A60:  MOVLW  1E
07A62:  MOVLB  0
07A64:  MOVWF  xEE
07A66:  CLRF   xEF
07A68:  MOVLB  3
07A6A:  CLRF   x4F
07A6C:  CLRF   x4E
07A6E:  CLRF   x4D
07A70:  CLRF   x4C
07A72:  CLRF   x51
07A74:  CLRF   x50
07A76:  CLRF   x53
07A78:  CLRF   x52
07A7A:  CLRF   x55
07A7C:  CLRF   x54
07A7E:  CLRF   x57
07A80:  CLRF   x56
07A82:  MOVLB  E
07A84:  CLRF   xD9
07A86:  CLRF   xDA
07A88:  CLRF   xCE
07A8A:  CLRF   xCF
07A8C:  CLRF   xD0
07A8E:  CLRF   xD1
07A90:  CLRF   xD2
07A92:  CLRF   xD3
07A94:  CLRF   xD4
07A96:  CLRF   xD5
07A98:  CLRF   x45
07A9A:  CLRF   x46
07A9C:  CLRF   x47
07A9E:  BCF    x8D.7
07AA0:  BCF    x8D.6
07AA2:  BCF    x8D.5
07AA4:  MOVLB  F
07AA6:  CLRF   x53
07AA8:  CLRF   x38
07AAA:  CLRF   x37
07AAC:  MOVLB  0
07AAE:  MOVLW  03
07AB0:  MOVWF  1D
07AB2:  CLRF   1E
07AB4:  CLRF   1F
07AB6:  CLRF   20
07AB8:  CLRF   2D
07ABA:  CLRF   2E
07ABC:  CLRF   2F
07ABE:  CLRF   30
07AC0:  CLRF   31
07AC2:  CLRF   32
07AC4:  CLRF   33
07AC6:  CLRF   34
07AC8:  CLRF   35
07ACA:  CLRF   36
07ACC:  CLRF   37
07ACE:  CLRF   38
07AD0:  CLRF   39
07AD2:  CLRF   3A
07AD4:  CLRF   3B
07AD6:  CLRF   3C
07AD8:  CLRF   3D
07ADA:  CLRF   3E
07ADC:  CLRF   3F
07ADE:  CLRF   40
07AE0:  CLRF   41
07AE2:  CLRF   42
07AE4:  CLRF   43
07AE6:  CLRF   44
07AE8:  CLRF   45
07AEA:  CLRF   46
07AEC:  CLRF   47
07AEE:  CLRF   48
07AF0:  CLRF   49
07AF2:  CLRF   4A
07AF4:  CLRF   4B
07AF6:  CLRF   4C
07AF8:  CLRF   4E
07AFA:  CLRF   4F
07AFC:  CLRF   50
07AFE:  CLRF   51
07B00:  CLRF   52
07B02:  CLRF   53
07B04:  CLRF   54
07B06:  CLRF   55
07B08:  CLRF   56
07B0A:  CLRF   57
07B0C:  CLRF   58
07B0E:  CLRF   59
07B10:  CLRF   5A
07B12:  CLRF   5B
07B14:  CLRF   5C
07B16:  CLRF   5D
07B18:  CLRF   5E
07B1A:  CLRF   5F
07B1C:  CLRF   x60
07B1E:  CLRF   x61
07B20:  CLRF   x62
07B22:  CLRF   x63
07B24:  CLRF   x64
07B26:  CLRF   x65
07B28:  CLRF   x66
07B2A:  CLRF   x67
07B2C:  CLRF   x68
07B2E:  CLRF   x69
07B30:  CLRF   x6A
07B32:  CLRF   x6B
07B34:  CLRF   x6C
07B36:  CLRF   x6D
07B38:  CLRF   x6E
07B3A:  CLRF   x6F
07B3C:  CLRF   x70
07B3E:  CLRF   x71
07B40:  CLRF   x72
07B42:  CLRF   x73
07B44:  CLRF   x74
07B46:  CLRF   x75
07B48:  CLRF   x76
07B4A:  CLRF   x77
07B4C:  CLRF   x78
07B4E:  CLRF   x79
07B50:  CLRF   x7A
07B52:  CLRF   x7B
07B54:  CLRF   x7C
07B56:  CLRF   x7D
07B58:  CLRF   x7E
07B5A:  CLRF   x7F
07B5C:  CLRF   x80
07B5E:  CLRF   x81
07B60:  CLRF   x82
07B62:  CLRF   x83
07B64:  CLRF   x84
07B66:  CLRF   x85
07B68:  CLRF   x86
07B6A:  CLRF   x87
07B6C:  CLRF   x88
07B6E:  CLRF   x89
07B70:  CLRF   x8A
07B72:  CLRF   x8B
07B74:  CLRF   x8C
07B76:  CLRF   x8D
07B78:  CLRF   x8E
07B7A:  CLRF   x8F
07B7C:  CLRF   x90
07B7E:  CLRF   x91
07B80:  CLRF   x92
07B82:  CLRF   x93
07B84:  CLRF   x94
07B86:  CLRF   x95
07B88:  CLRF   x96
07B8A:  CLRF   x97
07B8C:  CLRF   x98
07B8E:  CLRF   x99
07B90:  CLRF   x9A
07B92:  CLRF   x9B
07B94:  CLRF   x9C
07B96:  CLRF   x9D
07B98:  CLRF   x9E
07B9A:  CLRF   x9F
07B9C:  CLRF   xA0
07B9E:  CLRF   xA1
07BA0:  CLRF   xA2
07BA2:  CLRF   xA3
07BA4:  CLRF   xA4
07BA6:  CLRF   xA5
07BA8:  CLRF   xA6
07BAA:  CLRF   xA7
07BAC:  CLRF   xA8
07BAE:  CLRF   xA9
07BB0:  CLRF   xAA
07BB2:  CLRF   xAB
07BB4:  CLRF   xAC
07BB6:  CLRF   xAD
07BB8:  CLRF   xAE
07BBA:  CLRF   xAF
07BBC:  CLRF   xB0
07BBE:  CLRF   xB1
07BC0:  CLRF   xB2
07BC2:  CLRF   xB3
07BC4:  CLRF   xB4
07BC6:  CLRF   xB5
07BC8:  CLRF   xB6
07BCA:  CLRF   xB7
07BCC:  CLRF   xB8
07BCE:  CLRF   xB9
07BD0:  CLRF   xBA
07BD2:  CLRF   xBB
07BD4:  CLRF   xBC
07BD6:  CLRF   xBD
07BD8:  CLRF   xBE
07BDA:  CLRF   xBF
07BDC:  CLRF   xC0
07BDE:  CLRF   xC1
07BE0:  CLRF   xC2
07BE2:  CLRF   xC3
07BE4:  CLRF   xC4
07BE6:  CLRF   xC5
07BE8:  CLRF   xC6
07BEA:  CLRF   xC7
07BEC:  CLRF   xC8
07BEE:  CLRF   xC9
07BF0:  CLRF   xCA
07BF2:  CLRF   xCB
07BF4:  CLRF   xCC
07BF6:  CLRF   xCD
07BF8:  CLRF   xCE
07BFA:  CLRF   xCF
07BFC:  CLRF   xD0
07BFE:  CLRF   xD1
07C00:  CLRF   xD2
07C02:  CLRF   xD3
07C04:  CLRF   xD4
07C06:  CLRF   xD5
07C08:  CLRF   xD6
07C0A:  CLRF   xD7
07C0C:  CLRF   xD8
07C0E:  CLRF   xD9
07C10:  CLRF   xDA
07C12:  CLRF   xDB
07C14:  CLRF   xDC
07C16:  CLRF   xDD
07C18:  CLRF   xDE
07C1A:  CLRF   xDF
07C1C:  CLRF   xE0
07C1E:  CLRF   xE1
07C20:  MOVLW  05
07C22:  MOVWF  xE2
07C24:  MOVLW  7C
07C26:  MOVWF  xE3
07C28:  MOVLW  01
07C2A:  MOVWF  xE4
07C2C:  MOVLW  01
07C2E:  MOVWF  xE5
07C30:  MOVLW  02
07C32:  MOVWF  xE6
07C34:  MOVLW  7C
07C36:  MOVWF  xE7
07C38:  CLRF   xE8
07C3A:  MOVLW  09
07C3C:  MOVWF  xE9
07C3E:  MOVLW  01
07C40:  MOVWF  xEA
07C42:  CLRF   xEB
07C44:  MOVLW  02
07C46:  MOVWF  xEC
07C48:  MOVLW  01
07C4A:  MOVWF  xED
07C4C:  CLRF   xF0
07C4E:  CLRF   xF1
07C50:  CLRF   xF2
07C52:  CLRF   xF3
07C54:  CLRF   xF4
07C56:  CLRF   xF5
07C58:  CLRF   xF6
07C5A:  CLRF   xF7
07C5C:  CLRF   xF8
07C5E:  CLRF   xF9
07C60:  CLRF   xFA
07C62:  CLRF   xFB
07C64:  CLRF   xFC
07C66:  CLRF   xFD
07C68:  CLRF   xFE
07C6A:  CLRF   xFF
07C6C:  MOVLB  1
07C6E:  CLRF   x00
07C70:  CLRF   x01
07C72:  CLRF   x02
07C74:  CLRF   x03
07C76:  CLRF   x04
07C78:  CLRF   x05
07C7A:  CLRF   x06
07C7C:  CLRF   x07
07C7E:  CLRF   x08
07C80:  CLRF   x09
07C82:  CLRF   x0A
07C84:  CLRF   x0B
07C86:  CLRF   x0C
07C88:  CLRF   x0D
07C8A:  CLRF   x0E
07C8C:  CLRF   x0F
07C8E:  CLRF   x10
07C90:  CLRF   x11
07C92:  CLRF   x12
07C94:  CLRF   x13
07C96:  CLRF   x14
07C98:  CLRF   x15
07C9A:  CLRF   x16
07C9C:  CLRF   x17
07C9E:  CLRF   x18
07CA0:  CLRF   x19
07CA2:  CLRF   x1A
07CA4:  CLRF   x1B
07CA6:  CLRF   x1C
07CA8:  CLRF   x1D
07CAA:  CLRF   x1E
07CAC:  CLRF   x1F
07CAE:  CLRF   x20
07CB0:  CLRF   x21
07CB2:  CLRF   x22
07CB4:  CLRF   x23
07CB6:  CLRF   x24
07CB8:  CLRF   x25
07CBA:  CLRF   x26
07CBC:  CLRF   x27
07CBE:  CLRF   x28
07CC0:  CLRF   x29
07CC2:  CLRF   x2A
07CC4:  CLRF   x2B
07CC6:  CLRF   x2C
07CC8:  CLRF   x2D
07CCA:  CLRF   x2E
07CCC:  CLRF   x2F
07CCE:  CLRF   x30
07CD0:  CLRF   x31
07CD2:  CLRF   x32
07CD4:  CLRF   x33
07CD6:  CLRF   x34
07CD8:  CLRF   x35
07CDA:  CLRF   x36
07CDC:  CLRF   x37
07CDE:  CLRF   x38
07CE0:  CLRF   x39
07CE2:  CLRF   x3A
07CE4:  CLRF   x3B
07CE6:  CLRF   x3C
07CE8:  CLRF   x3D
07CEA:  CLRF   x3E
07CEC:  CLRF   x3F
07CEE:  CLRF   x40
07CF0:  CLRF   x41
07CF2:  CLRF   x42
07CF4:  CLRF   x43
07CF6:  CLRF   x44
07CF8:  CLRF   x45
07CFA:  CLRF   x46
07CFC:  CLRF   x47
07CFE:  CLRF   x48
07D00:  CLRF   x49
07D02:  CLRF   x4A
07D04:  CLRF   x4B
07D06:  CLRF   x4C
07D08:  CLRF   x4D
07D0A:  CLRF   x4E
07D0C:  CLRF   x4F
07D0E:  CLRF   x50
07D10:  CLRF   x51
07D12:  CLRF   x52
07D14:  CLRF   x53
07D16:  CLRF   x54
07D18:  CLRF   x55
07D1A:  CLRF   x56
07D1C:  CLRF   x57
07D1E:  CLRF   x58
07D20:  CLRF   x59
07D22:  CLRF   x5A
07D24:  CLRF   x5B
07D26:  CLRF   x5C
07D28:  CLRF   x5D
07D2A:  CLRF   x5E
07D2C:  CLRF   x5F
07D2E:  CLRF   x60
07D30:  CLRF   x61
07D32:  CLRF   x62
07D34:  CLRF   x63
07D36:  CLRF   x64
07D38:  CLRF   x65
07D3A:  CLRF   x66
07D3C:  CLRF   x67
07D3E:  CLRF   x68
07D40:  CLRF   x69
07D42:  CLRF   x6A
07D44:  CLRF   x6B
07D46:  CLRF   x6C
07D48:  CLRF   x6D
07D4A:  CLRF   x6E
07D4C:  CLRF   x6F
07D4E:  CLRF   x70
07D50:  CLRF   x71
07D52:  CLRF   x72
07D54:  CLRF   x73
07D56:  CLRF   x74
07D58:  CLRF   x75
07D5A:  CLRF   x76
07D5C:  CLRF   x77
07D5E:  CLRF   x78
07D60:  CLRF   x79
07D62:  CLRF   x7A
07D64:  CLRF   x7B
07D66:  CLRF   x7C
07D68:  CLRF   x7D
07D6A:  CLRF   x7E
07D6C:  CLRF   x7F
07D6E:  CLRF   x80
07D70:  CLRF   x81
07D72:  CLRF   x82
07D74:  CLRF   x83
07D76:  CLRF   x84
07D78:  CLRF   x85
07D7A:  CLRF   x86
07D7C:  CLRF   x87
07D7E:  CLRF   x88
07D80:  CLRF   x89
07D82:  CLRF   x8A
07D84:  CLRF   x8B
07D86:  CLRF   x8C
07D88:  CLRF   x8D
07D8A:  CLRF   x8E
07D8C:  CLRF   x8F
07D8E:  CLRF   x90
07D90:  CLRF   x91
07D92:  CLRF   x92
07D94:  CLRF   x93
07D96:  CLRF   x94
07D98:  CLRF   x95
07D9A:  CLRF   x96
07D9C:  CLRF   x97
07D9E:  CLRF   x98
07DA0:  CLRF   x99
07DA2:  CLRF   x9A
07DA4:  CLRF   x9B
07DA6:  CLRF   x9C
07DA8:  CLRF   x9D
07DAA:  CLRF   x9E
07DAC:  CLRF   x9F
07DAE:  CLRF   xA0
07DB0:  CLRF   xA1
07DB2:  CLRF   xA2
07DB4:  CLRF   xA3
07DB6:  CLRF   xA4
07DB8:  CLRF   xA5
07DBA:  CLRF   xA6
07DBC:  CLRF   xA7
07DBE:  CLRF   xA8
07DC0:  CLRF   xA9
07DC2:  CLRF   xAA
07DC4:  CLRF   xAB
07DC6:  CLRF   xAC
07DC8:  CLRF   xAD
07DCA:  CLRF   xAE
07DCC:  CLRF   xAF
07DCE:  CLRF   xB0
07DD0:  CLRF   xB1
07DD2:  CLRF   xB2
07DD4:  CLRF   xB3
07DD6:  CLRF   xB4
07DD8:  CLRF   xB5
07DDA:  CLRF   xB6
07DDC:  CLRF   xB7
07DDE:  CLRF   xB8
07DE0:  CLRF   xB9
07DE2:  CLRF   xBA
07DE4:  CLRF   xBB
07DE6:  CLRF   xBC
07DE8:  CLRF   xBD
07DEA:  CLRF   xBE
07DEC:  CLRF   xBF
07DEE:  CLRF   xC0
07DF0:  CLRF   xC1
07DF2:  CLRF   xC2
07DF4:  CLRF   xC3
07DF6:  CLRF   xC4
07DF8:  CLRF   xC5
07DFA:  CLRF   xC6
07DFC:  CLRF   xC7
07DFE:  CLRF   xC8
07E00:  CLRF   xC9
07E02:  CLRF   xCA
07E04:  CLRF   xCB
07E06:  CLRF   xCC
07E08:  CLRF   xCD
07E0A:  CLRF   xCE
07E0C:  CLRF   xCF
07E0E:  CLRF   xD0
07E10:  CLRF   xD1
07E12:  CLRF   xD2
07E14:  CLRF   xD3
07E16:  CLRF   xD4
07E18:  CLRF   xD5
07E1A:  CLRF   xD6
07E1C:  CLRF   xD7
07E1E:  CLRF   xD8
07E20:  CLRF   xD9
07E22:  CLRF   xDA
07E24:  CLRF   xDB
07E26:  CLRF   xDC
07E28:  CLRF   xDD
07E2A:  CLRF   xDE
07E2C:  CLRF   xDF
07E2E:  CLRF   xE0
07E30:  CLRF   xE1
07E32:  CLRF   xE2
07E34:  CLRF   xE3
07E36:  CLRF   xE4
07E38:  CLRF   xE5
07E3A:  CLRF   xE6
07E3C:  CLRF   xE7
07E3E:  CLRF   xE8
07E40:  CLRF   xE9
07E42:  CLRF   xEA
07E44:  CLRF   xEB
07E46:  CLRF   xEC
07E48:  CLRF   xED
07E4A:  CLRF   xEE
07E4C:  CLRF   xEF
07E4E:  CLRF   xF0
07E50:  CLRF   xF1
07E52:  CLRF   xF2
07E54:  CLRF   xF3
07E56:  CLRF   xF4
07E58:  CLRF   xF5
07E5A:  CLRF   xF6
07E5C:  CLRF   xF7
07E5E:  CLRF   xF8
07E60:  CLRF   xF9
07E62:  CLRF   xFA
07E64:  CLRF   xFB
07E66:  CLRF   xFC
07E68:  CLRF   xFD
07E6A:  CLRF   xFE
07E6C:  CLRF   xFF
07E6E:  MOVLB  2
07E70:  CLRF   x00
07E72:  CLRF   x01
07E74:  CLRF   x02
07E76:  CLRF   x03
07E78:  CLRF   x04
07E7A:  CLRF   x05
07E7C:  CLRF   x06
07E7E:  CLRF   x07
07E80:  CLRF   x08
07E82:  CLRF   x09
07E84:  CLRF   x0A
07E86:  CLRF   x0B
07E88:  CLRF   x0C
07E8A:  CLRF   x0D
07E8C:  CLRF   x0E
07E8E:  CLRF   x0F
07E90:  CLRF   x10
07E92:  CLRF   x11
07E94:  CLRF   x12
07E96:  CLRF   x13
07E98:  CLRF   x14
07E9A:  CLRF   x15
07E9C:  CLRF   x16
07E9E:  CLRF   x17
07EA0:  CLRF   x18
07EA2:  CLRF   x19
07EA4:  CLRF   x1A
07EA6:  CLRF   x1B
07EA8:  CLRF   x1C
07EAA:  CLRF   x1D
07EAC:  CLRF   x1E
07EAE:  CLRF   x1F
07EB0:  CLRF   x20
07EB2:  CLRF   x21
07EB4:  CLRF   x22
07EB6:  CLRF   x23
07EB8:  CLRF   x24
07EBA:  CLRF   x25
07EBC:  CLRF   x26
07EBE:  CLRF   x27
07EC0:  CLRF   x28
07EC2:  CLRF   x29
07EC4:  CLRF   x2A
07EC6:  CLRF   x2B
07EC8:  CLRF   x2C
07ECA:  CLRF   x2D
07ECC:  CLRF   x2E
07ECE:  CLRF   x2F
07ED0:  CLRF   x30
07ED2:  CLRF   x31
07ED4:  CLRF   x32
07ED6:  CLRF   x33
07ED8:  CLRF   x34
07EDA:  CLRF   x35
07EDC:  CLRF   x36
07EDE:  CLRF   x37
07EE0:  CLRF   x38
07EE2:  CLRF   x39
07EE4:  CLRF   x3A
07EE6:  CLRF   x3B
07EE8:  CLRF   x3C
07EEA:  CLRF   x3D
07EEC:  CLRF   x3E
07EEE:  CLRF   x3F
07EF0:  CLRF   x40
07EF2:  CLRF   x41
07EF4:  CLRF   x42
07EF6:  CLRF   x43
07EF8:  CLRF   x44
07EFA:  CLRF   x45
07EFC:  CLRF   x46
07EFE:  CLRF   x47
07F00:  CLRF   x48
07F02:  CLRF   x49
07F04:  CLRF   x4A
07F06:  CLRF   x4B
07F08:  CLRF   x4C
07F0A:  CLRF   x4D
07F0C:  CLRF   x4E
07F0E:  CLRF   x4F
07F10:  CLRF   x50
07F12:  CLRF   x51
07F14:  CLRF   x52
07F16:  CLRF   x53
07F18:  CLRF   x54
07F1A:  CLRF   x55
07F1C:  CLRF   x56
07F1E:  CLRF   x57
07F20:  CLRF   x58
07F22:  CLRF   x59
07F24:  CLRF   x5A
07F26:  CLRF   x5B
07F28:  CLRF   x5C
07F2A:  CLRF   x5D
07F2C:  CLRF   x5E
07F2E:  CLRF   x5F
07F30:  CLRF   x60
07F32:  CLRF   x61
07F34:  CLRF   x62
07F36:  CLRF   x63
07F38:  CLRF   x64
07F3A:  CLRF   x65
07F3C:  CLRF   x66
07F3E:  CLRF   x67
07F40:  CLRF   x68
07F42:  CLRF   x69
07F44:  CLRF   x6A
07F46:  CLRF   x6B
07F48:  CLRF   x6C
07F4A:  CLRF   x6D
07F4C:  CLRF   x6E
07F4E:  CLRF   x6F
07F50:  CLRF   x70
07F52:  CLRF   x71
07F54:  CLRF   x72
07F56:  CLRF   x73
07F58:  CLRF   x74
07F5A:  CLRF   x75
07F5C:  CLRF   x76
07F5E:  CLRF   x77
07F60:  CLRF   x78
07F62:  CLRF   x79
07F64:  CLRF   x7A
07F66:  CLRF   x7B
07F68:  CLRF   x7C
07F6A:  CLRF   x7D
07F6C:  CLRF   x7E
07F6E:  CLRF   x7F
07F70:  CLRF   x80
07F72:  CLRF   x81
07F74:  CLRF   x82
07F76:  CLRF   x83
07F78:  CLRF   x84
07F7A:  CLRF   x85
07F7C:  CLRF   x86
07F7E:  CLRF   x87
07F80:  CLRF   x88
07F82:  CLRF   x89
07F84:  CLRF   x8A
07F86:  CLRF   x8B
07F88:  CLRF   x8C
07F8A:  CLRF   x8D
07F8C:  CLRF   x8E
07F8E:  CLRF   x8F
07F90:  CLRF   x90
07F92:  CLRF   x91
07F94:  CLRF   x92
07F96:  CLRF   x93
07F98:  CLRF   x94
07F9A:  CLRF   x95
07F9C:  CLRF   x96
07F9E:  CLRF   x97
07FA0:  CLRF   x98
07FA2:  CLRF   x99
07FA4:  CLRF   x9A
07FA6:  CLRF   x9B
07FA8:  CLRF   x9C
07FAA:  CLRF   x9D
07FAC:  CLRF   x9E
07FAE:  CLRF   x9F
07FB0:  CLRF   xA0
07FB2:  CLRF   xA1
07FB4:  CLRF   xA2
07FB6:  CLRF   xA3
07FB8:  CLRF   xA4
07FBA:  CLRF   xA5
07FBC:  CLRF   xA6
07FBE:  CLRF   xA7
07FC0:  CLRF   xA8
07FC2:  CLRF   xA9
07FC4:  CLRF   xAA
07FC6:  CLRF   xAB
07FC8:  CLRF   xAC
07FCA:  CLRF   xAD
07FCC:  CLRF   xAE
07FCE:  CLRF   xAF
07FD0:  CLRF   xB0
07FD2:  CLRF   xB1
07FD4:  CLRF   xB2
07FD6:  CLRF   xB3
07FD8:  CLRF   xB4
07FDA:  CLRF   xB5
07FDC:  CLRF   xB6
07FDE:  CLRF   xB7
07FE0:  CLRF   xB8
07FE2:  CLRF   xB9
07FE4:  CLRF   xBA
07FE6:  CLRF   xBB
07FE8:  CLRF   xBC
07FEA:  CLRF   xBD
07FEC:  CLRF   xBE
07FEE:  CLRF   xBF
07FF0:  CLRF   xC0
07FF2:  CLRF   xC1
07FF4:  CLRF   xC2
07FF6:  CLRF   xC3
07FF8:  CLRF   xC4
07FFA:  CLRF   xC5
07FFC:  CLRF   xC6
07FFE:  CLRF   xC7
08000:  CLRF   xC8
08002:  CLRF   xC9
08004:  CLRF   xCA
08006:  CLRF   xCB
08008:  CLRF   xCC
0800A:  CLRF   xCD
0800C:  CLRF   xCE
0800E:  CLRF   xCF
08010:  CLRF   xD0
08012:  CLRF   xD1
08014:  CLRF   xD2
08016:  CLRF   xD3
08018:  CLRF   xD4
0801A:  CLRF   xD5
0801C:  CLRF   xD6
0801E:  CLRF   xD7
08020:  CLRF   xD8
08022:  CLRF   xD9
08024:  CLRF   xDA
08026:  CLRF   xDB
08028:  CLRF   xDC
0802A:  CLRF   xDD
0802C:  CLRF   xDE
0802E:  CLRF   xDF
08030:  CLRF   xE0
08032:  CLRF   xE1
08034:  CLRF   xE2
08036:  CLRF   xE3
08038:  CLRF   xE4
0803A:  CLRF   xE5
0803C:  CLRF   xE6
0803E:  CLRF   xE7
08040:  CLRF   xE8
08042:  CLRF   xE9
08044:  CLRF   xEA
08046:  CLRF   xEB
08048:  CLRF   xEC
0804A:  CLRF   xED
0804C:  CLRF   xEE
0804E:  CLRF   xEF
08050:  CLRF   xF0
08052:  CLRF   xF1
08054:  CLRF   xF2
08056:  CLRF   xF3
08058:  CLRF   xF4
0805A:  CLRF   xF5
0805C:  CLRF   xF6
0805E:  CLRF   xF7
08060:  CLRF   xF8
08062:  CLRF   xF9
08064:  CLRF   xFA
08066:  CLRF   xFB
08068:  CLRF   xFC
0806A:  CLRF   xFD
0806C:  CLRF   xFE
0806E:  CLRF   xFF
08070:  MOVLB  3
08072:  CLRF   x00
08074:  CLRF   x01
08076:  CLRF   x02
08078:  CLRF   x03
0807A:  CLRF   x04
0807C:  CLRF   x05
0807E:  CLRF   x06
08080:  CLRF   x07
08082:  CLRF   x08
08084:  CLRF   x09
08086:  CLRF   x0A
08088:  CLRF   x0B
0808A:  CLRF   x0C
0808C:  CLRF   x0D
0808E:  CLRF   x0E
08090:  CLRF   x0F
08092:  CLRF   x10
08094:  CLRF   x11
08096:  CLRF   x12
08098:  CLRF   x13
0809A:  CLRF   x14
0809C:  CLRF   x15
0809E:  CLRF   x16
080A0:  CLRF   x17
080A2:  CLRF   x18
080A4:  CLRF   x19
080A6:  CLRF   x1A
080A8:  CLRF   x1B
080AA:  CLRF   x1C
080AC:  CLRF   x1D
080AE:  CLRF   x1E
080B0:  CLRF   x1F
080B2:  CLRF   x20
080B4:  CLRF   x21
080B6:  CLRF   x22
080B8:  CLRF   x23
080BA:  CLRF   x24
080BC:  CLRF   x25
080BE:  CLRF   x26
080C0:  CLRF   x27
080C2:  CLRF   x28
080C4:  CLRF   x29
080C6:  CLRF   x2A
080C8:  CLRF   x2B
080CA:  CLRF   x2C
080CC:  CLRF   x2D
080CE:  CLRF   x2E
080D0:  CLRF   x2F
080D2:  CLRF   x30
080D4:  CLRF   x31
080D6:  CLRF   x32
080D8:  CLRF   x33
080DA:  CLRF   x34
080DC:  CLRF   x35
080DE:  CLRF   x36
080E0:  CLRF   x37
080E2:  CLRF   x38
080E4:  CLRF   x39
080E6:  CLRF   x3A
080E8:  CLRF   x3B
080EA:  CLRF   x3C
080EC:  CLRF   x3D
080EE:  CLRF   x3E
080F0:  CLRF   x3F
080F2:  CLRF   x40
080F4:  CLRF   x41
080F6:  CLRF   x42
080F8:  CLRF   x43
080FA:  CLRF   x44
080FC:  CLRF   x45
080FE:  CLRF   x46
08100:  CLRF   x47
08102:  CLRF   x48
08104:  CLRF   x49
08106:  CLRF   x4A
08108:  CLRF   x4B
0810A:  MOVLB  0
.................... { 
....................    delay_ms(1000); // wait for power stable
0810C:  MOVLW  04
0810E:  MOVLB  3
08110:  MOVWF  x82
08112:  MOVLB  0
08114:  MOVLW  FA
08116:  MOVLB  4
08118:  MOVWF  xFB
0811A:  MOVLB  0
0811C:  CALL   1468
08120:  MOVLB  3
08122:  DECFSZ x82,F
08124:  BRA    812A
08126:  BRA    812E
08128:  MOVLB  0
0812A:  MOVLB  0
0812C:  BRA    8114
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
0812E:  MOVLW  0A
08130:  MOVWF  FF6
08132:  MOVLW  13
08134:  MOVWF  FF7
08136:  MOVLW  00
08138:  MOVWF  FF8
0813A:  MOVLB  0
0813C:  CALL   14E8
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
08140:  MOVLW  50
08142:  MOVWF  FF6
08144:  MOVLW  13
08146:  MOVWF  FF7
08148:  MOVLW  00
0814A:  MOVWF  FF8
0814C:  CALL   14E8
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
08150:  MOVLW  7E
08152:  MOVWF  FF6
08154:  MOVLW  13
08156:  MOVWF  FF7
08158:  MOVLW  00
0815A:  MOVWF  FF8
0815C:  MOVLW  10
0815E:  MOVLB  4
08160:  MOVWF  x19
08162:  MOVLB  0
08164:  CALL   1518
08168:  MOVLW  A4
0816A:  MOVWF  FF6
0816C:  MOVLW  13
0816E:  MOVWF  FF7
08170:  MOVLW  00
08172:  MOVWF  FF8
08174:  CALL   14E8
08178:  MOVLW  20
0817A:  MOVLB  4
0817C:  MOVWF  xE6
0817E:  MOVLB  0
08180:  CALL   1496
08184:  MOVLW  AE
08186:  MOVWF  FF6
08188:  MOVLW  13
0818A:  MOVWF  FF7
0818C:  MOVLW  00
0818E:  MOVWF  FF8
08190:  CALL   14E8
08194:  MOVLW  93
08196:  MOVWF  FF6
08198:  MOVLW  13
0819A:  MOVWF  FF7
0819C:  MOVLW  00
0819E:  MOVWF  FF8
081A0:  MOVLW  0F
081A2:  MOVLB  4
081A4:  MOVWF  x19
081A6:  MOVLB  0
081A8:  CALL   1518
....................    
....................    io_init();
081AC:  GOTO   154E
....................    //adc_init();
....................    setup_uart_to_boss();
081B0:  GOTO   157A
....................    //setup_timer();
....................    ad7490_init();
081B4:  GOTO   15A4
....................    misf_init();
081B8:  CALL   1B90
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
081BC:  MOVFF  EF,492
081C0:  MOVLB  4
081C2:  CLRF   x93
081C4:  MOVLB  0
081C6:  CALL   30CA
.................... 
....................    int1 is_finished = FALSE;
081CA:  MOVLB  3
081CC:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
081CE:  MOVLW  B8
081D0:  MOVWF  FF6
081D2:  MOVLW  13
081D4:  MOVWF  FF7
081D6:  MOVLW  00
081D8:  MOVWF  FF8
081DA:  MOVLB  0
081DC:  CALL   14E8
....................    
....................    //dac_cell.write_spi = spi_cell_write;
....................    //dac_cell.cs_pin = PIN_C0;
.................... 
....................    //mcp4911_init(&dac_cell);
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
081E0:  MOVLW  DE
081E2:  MOVWF  FF6
081E4:  MOVLW  13
081E6:  MOVWF  FF7
081E8:  MOVLW  00
081EA:  MOVWF  FF8
081EC:  CALL   14E8
....................    
....................    //Start loop
....................    while(!is_finished)
081F0:  MOVLB  3
081F2:  BTFSS  x75.0
081F4:  BRA    81FC
081F6:  MOVLB  0
081F8:  GOTO   82CA
081FC:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
081FE:  MOVF   4D,F
08200:  BTFSC  FD8.2
08202:  GOTO   8286
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
08206:  MOVLB  3
08208:  CLRF   x89
0820A:  MOVLW  2D
0820C:  MOVWF  x88
0820E:  MOVFF  4D,38A
08212:  MOVLB  0
08214:  GOTO   360E
08218:  MOVFF  02,03
0821C:  MOVF   01,W
0821E:  MOVWF  FE1
08220:  MOVFF  03,FE2
08224:  MOVLW  03
08226:  MOVWF  FEA
08228:  MOVLW  76
0822A:  MOVWF  FE9
0822C:  MOVLW  0C
0822E:  MOVWF  01
08230:  MOVFF  FE6,FEE
08234:  DECFSZ 01,F
08236:  GOTO   8230
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0823A:  MOVLB  3
0823C:  CLRF   x83
0823E:  MOVLW  2D
08240:  MOVWF  x82
08242:  CLRF   x85
08244:  MOVLW  4D
08246:  MOVWF  x84
08248:  MOVLB  0
0824A:  GOTO   3830
....................          
....................          if(recieve_cmd.is_exist)
0824E:  MOVLB  3
08250:  BTFSC  x78.0
08252:  BRA    825A
08254:  MOVLB  0
08256:  GOTO   8276
0825A:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0825C:  MOVLW  03
0825E:  MOVLB  3
08260:  MOVWF  x83
08262:  MOVLW  76
08264:  MOVWF  x82
08266:  MOVLB  0
08268:  GOTO   7950
0826C:  MOVLB  3
0826E:  BCF    x75.1
08270:  BTFSC  01.0
08272:  BSF    x75.1
08274:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
08276:  MOVLW  FC
08278:  MOVWF  FF6
0827A:  MOVLW  13
0827C:  MOVWF  FF7
0827E:  MOVLW  00
08280:  MOVWF  FF8
08282:  CALL   14E8
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
08286:  MOVLB  3
08288:  BTFSC  x75.0
0828A:  BRA    8292
0828C:  MOVLB  0
0828E:  GOTO   8298
08292:  MOVLB  0
....................          break;
08294:  GOTO   82CA
....................          
....................       delay_ms(400);
08298:  MOVLW  02
0829A:  MOVLB  3
0829C:  MOVWF  x82
0829E:  MOVLB  0
082A0:  MOVLW  C8
082A2:  MOVLB  4
082A4:  MOVWF  xFB
082A6:  MOVLB  0
082A8:  CALL   1468
082AC:  MOVLB  3
082AE:  DECFSZ x82,F
082B0:  BRA    82B6
082B2:  BRA    82BA
082B4:  MOVLB  0
082B6:  MOVLB  0
082B8:  BRA    82A0
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
082BA:  MOVLW  2E
082BC:  MOVLB  4
082BE:  MOVWF  xE6
082C0:  MOVLB  0
082C2:  CALL   1496
082C6:  GOTO   81F0
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
082CA:  MOVLW  1C
082CC:  MOVWF  FF6
082CE:  MOVLW  14
082D0:  MOVWF  FF7
082D2:  MOVLW  00
082D4:  MOVWF  FF8
082D6:  CALL   14E8
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
082DA:  MOVLW  2E
082DC:  MOVLB  4
082DE:  MOVWF  xE6
082E0:  MOVLB  0
082E2:  CALL   1496
....................       delay_ms(1000);
082E6:  MOVLW  04
082E8:  MOVLB  3
082EA:  MOVWF  x82
082EC:  MOVLB  0
082EE:  MOVLW  FA
082F0:  MOVLB  4
082F2:  MOVWF  xFB
082F4:  MOVLB  0
082F6:  CALL   1468
082FA:  MOVLB  3
082FC:  DECFSZ x82,F
082FE:  BRA    8304
08300:  BRA    8308
08302:  MOVLB  0
08304:  MOVLB  0
08306:  BRA    82EE
08308:  MOVLB  0
0830A:  GOTO   82DA
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0830E:  MOVLW  5C
08310:  MOVWF  FF6
08312:  MOVLW  14
08314:  MOVWF  FF7
08316:  MOVLW  00
08318:  MOVWF  FF8
0831A:  CALL   14E8
....................    
.................... }
.................... 
0831E:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
