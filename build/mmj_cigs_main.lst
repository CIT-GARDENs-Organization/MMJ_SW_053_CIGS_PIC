CCS PCH C Compiler, Version 5.104, 57077               05-8-25 00:04

               Filename:   build\mmj_cigs_main.lst

               ROM used:   47444 bytes (36%)
                           Largest free fragment is 65520
               RAM used:   343 (10%) at main() level
                           2672 (75%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   B476
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,43
001AE:  DATA 6F,6E
001B0:  DATA 6E,65
001B2:  DATA 63,74
001B4:  DATA 20,65
001B6:  DATA 72,72
001B8:  DATA 6F,72
001BA:  DATA 21,0D
001BC:  DATA 0A,00
001BE:  DATA 09,43
001C0:  DATA 6F,6E
001C2:  DATA 6E,65
001C4:  DATA 63,74
001C6:  DATA 20,73
001C8:  DATA 75,63
001CA:  DATA 63,65
001CC:  DATA 73,73
001CE:  DATA 66,75
001D0:  DATA 6C,0D
001D2:  DATA 0A,00
001D4:  DATA 09,43
001D6:  DATA 6F,6D
001D8:  DATA 70,6C
001DA:  DATA 65,74
001DC:  DATA 65,0D
001DE:  DATA 0A,00
001E0:  DATA 4D,43
001E2:  DATA 50,34
001E4:  DATA 39,30
001E6:  DATA 31,20
001E8:  DATA 49,6E
001EA:  DATA 69,74
001EC:  DATA 69,61
001EE:  DATA 6C,69
001F0:  DATA 7A,65
001F2:  DATA 0D,0A
001F4:  DATA 00,00
001F6:  DATA 09,5B
001F8:  DATA 44,41
001FA:  DATA 43,20
001FC:  DATA 50,6F
001FE:  DATA 72,74
00200:  DATA 20,31
00202:  DATA 5D,20
00204:  DATA 43,6F
00206:  DATA 6E,6E
00208:  DATA 65,63
0020A:  DATA 74,20
0020C:  DATA 65,72
0020E:  DATA 72,6F
00210:  DATA 72,21
00212:  DATA 0D,0A
00214:  DATA 00,00
00216:  DATA 09,5B
00218:  DATA 44,41
0021A:  DATA 43,20
0021C:  DATA 50,6F
0021E:  DATA 72,74
00220:  DATA 20,31
00222:  DATA 5D,20
00224:  DATA 43,6F
00226:  DATA 6E,6E
00228:  DATA 65,63
0022A:  DATA 74,20
0022C:  DATA 73,75
0022E:  DATA 63,63
00230:  DATA 65,73
00232:  DATA 73,66
00234:  DATA 75,6C
00236:  DATA 0D,0A
00238:  DATA 00,00
0023A:  DATA 09,5B
0023C:  DATA 44,41
0023E:  DATA 43,20
00240:  DATA 50,6F
00242:  DATA 72,74
00244:  DATA 20,32
00246:  DATA 5D,20
00248:  DATA 43,6F
0024A:  DATA 6E,6E
0024C:  DATA 65,63
0024E:  DATA 74,20
00250:  DATA 65,72
00252:  DATA 72,6F
00254:  DATA 72,21
00256:  DATA 0D,0A
00258:  DATA 00,00
0025A:  DATA 09,5B
0025C:  DATA 44,41
0025E:  DATA 43,20
00260:  DATA 50,6F
00262:  DATA 72,74
00264:  DATA 20,32
00266:  DATA 5D,20
00268:  DATA 43,6F
0026A:  DATA 6E,6E
0026C:  DATA 65,63
0026E:  DATA 74,20
00270:  DATA 73,75
00272:  DATA 63,63
00274:  DATA 65,73
00276:  DATA 73,66
00278:  DATA 75,6C
0027A:  DATA 0D,0A
0027C:  DATA 00,00
0027E:  DATA 09,43
00280:  DATA 6F,6D
00282:  DATA 70,6C
00284:  DATA 65,74
00286:  DATA 65,0D
00288:  DATA 0A,00
0028A:  DATA 53,4D
0028C:  DATA 46,20
0028E:  DATA 64,61
00290:  DATA 74,61
00292:  DATA 20,6C
00294:  DATA 69,73
00296:  DATA 74,20
00298:  DATA 69,73
0029A:  DATA 20,66
0029C:  DATA 75,6C
0029E:  DATA 6C,21
002A0:  DATA 21,21
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 53,4D
002A8:  DATA 46,20
002AA:  DATA 64,61
002AC:  DATA 74,61
002AE:  DATA 20,6C
002B0:  DATA 69,73
002B2:  DATA 74,20
002B4:  DATA 69,73
002B6:  DATA 20,65
002B8:  DATA 6D,70
002BA:  DATA 74,79
002BC:  DATA 0D,0A
002BE:  DATA 00,00
002C0:  DATA 0D,0A
002C2:  DATA 53,74
002C4:  DATA 61,72
002C6:  DATA 74,20
002C8:  DATA 6D,61
002CA:  DATA 6B,65
002CC:  DATA 5F,72
002CE:  DATA 65,63
002D0:  DATA 65,69
002D2:  DATA 76,65
002D4:  DATA 5F,63
002D6:  DATA 6F,6D
002D8:  DATA 6D,61
002DA:  DATA 6E,64
002DC:  DATA 0D,0A
002DE:  DATA 00,00
002E0:  DATA 09,5B
002E2:  DATA 42,4F
002E4:  DATA 53,53
002E6:  DATA 5D,20
002E8:  DATA 3E,3E
002EA:  DATA 3E,20
002EC:  DATA 00,00
002EE:  DATA 45,6E
002F0:  DATA 64,20
002F2:  DATA 6D,61
002F4:  DATA 6B,65
002F6:  DATA 5F,72
002F8:  DATA 65,63
002FA:  DATA 69,76
002FC:  DATA 65,5F
002FE:  DATA 63,6F
00300:  DATA 6D,6D
00302:  DATA 61,6E
00304:  DATA 64,0D
00306:  DATA 0A,0D
00308:  DATA 0A,00
0030A:  DATA 73,69
0030C:  DATA 67,6E
0030E:  DATA 61,6C
00310:  DATA 20,65
00312:  DATA 6E,64
00314:  DATA 20,77
00316:  DATA 69,74
00318:  DATA 68,20
0031A:  DATA 53,46
0031C:  DATA 44,0D
0031E:  DATA 0A,00
00320:  DATA 64,6F
00322:  DATA 6E,27
00324:  DATA 74,20
00326:  DATA 66,69
00328:  DATA 6E,64
0032A:  DATA 20,53
0032C:  DATA 46,44
0032E:  DATA 0D,0A
00330:  DATA 00,00
00332:  DATA 09,2D
00334:  DATA 3E,20
00336:  DATA 49,6E
00338:  DATA 76,61
0033A:  DATA 6C,69
0033C:  DATA 64,20
0033E:  DATA 46,72
00340:  DATA 61,6D
00342:  DATA 65,20
00344:  DATA 49,44
00346:  DATA 20,72
00348:  DATA 65,63
0034A:  DATA 65,69
0034C:  DATA 76,65
0034E:  DATA 64,3A
00350:  DATA 20,25
00352:  DATA 58,0D
00354:  DATA 0A,00
00356:  DATA 09,2D
00358:  DATA 3E,20
0035A:  DATA 43,52
0035C:  DATA 43,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,09
0036A:  DATA 2D,3E
0036C:  DATA 20,72
0036E:  DATA 65,63
00370:  DATA 65,69
00372:  DATA 76,65
00374:  DATA 64,20
00376:  DATA 43,52
00378:  DATA 43,3A
0037A:  DATA 20,25
0037C:  DATA 58,0D
0037E:  DATA 0A,00
00380:  DATA 09,09
00382:  DATA 20,20
00384:  DATA 20,63
00386:  DATA 6F,6C
00388:  DATA 6C,65
0038A:  DATA 63,74
0038C:  DATA 20,43
0038E:  DATA 52,43
00390:  DATA 20,3A
00392:  DATA 20,25
00394:  DATA 58,0D
00396:  DATA 0A,00
00398:  DATA 09,2D
0039A:  DATA 3E,20
0039C:  DATA 49,6E
0039E:  DATA 76,61
003A0:  DATA 6C,69
003A2:  DATA 64,20
003A4:  DATA 64,65
003A6:  DATA 76,69
003A8:  DATA 63,65
003AA:  DATA 20,49
003AC:  DATA 44,20
003AE:  DATA 72,65
003B0:  DATA 63,65
003B2:  DATA 69,76
003B4:  DATA 65,64
003B6:  DATA 0D,0A
003B8:  DATA 00,00
003BA:  DATA 09,09
003BC:  DATA 2D,3E
003BE:  DATA 20,72
003C0:  DATA 65,63
003C2:  DATA 65,69
003C4:  DATA 76,65
003C6:  DATA 64,3A
003C8:  DATA 20,20
003CA:  DATA 20,20
003CC:  DATA 20,25
003CE:  DATA 58,0D
003D0:  DATA 0A,00
003D2:  DATA 09,09
003D4:  DATA 20,20
003D6:  DATA 20,4D
003D8:  DATA 79,20
003DA:  DATA 64,65
003DC:  DATA 76,69
003DE:  DATA 63,65
003E0:  DATA 20,49
003E2:  DATA 44,3A
003E4:  DATA 20,25
003E6:  DATA 58,0D
003E8:  DATA 0A,00
003EA:  DATA 09,5B
003EC:  DATA 42,4F
003EE:  DATA 53,53
003F0:  DATA 5D,20
003F2:  DATA 3C,3C
003F4:  DATA 3C,20
003F6:  DATA 00,00
003F8:  DATA 53,74
003FA:  DATA 61,72
003FC:  DATA 74,20
003FE:  DATA 53,4D
00400:  DATA 46,20
00402:  DATA 75,73
00404:  DATA 69,6E
00406:  DATA 67,20
00408:  DATA 72,65
0040A:  DATA 71,65
0040C:  DATA 73,74
0040E:  DATA 20,73
00410:  DATA 65,61
00412:  DATA 71,75
00414:  DATA 65,6E
00416:  DATA 63,65
00418:  DATA 0D,0A
0041A:  DATA 00,00
0041C:  DATA 45,72
0041E:  DATA 72,6F
00420:  DATA 72,21
00422:  DATA 20,52
00424:  DATA 65,63
00426:  DATA 65,69
00428:  DATA 76,69
0042A:  DATA 6E,67
0042C:  DATA 20,63
0042E:  DATA 6F,6D
00430:  DATA 6D,61
00432:  DATA 6E,64
00434:  DATA 20,69
00436:  DATA 6E,63
00438:  DATA 6F,6E
0043A:  DATA 73,69
0043C:  DATA 73,74
0043E:  DATA 65,6E
00440:  DATA 74,20
00442:  DATA 77,69
00444:  DATA 74,68
00446:  DATA 20,74
00448:  DATA 68,65
0044A:  DATA 20,64
0044C:  DATA 65,73
0044E:  DATA 69,67
00450:  DATA 6E,0D
00452:  DATA 0A,00
00454:  DATA 53,4D
00456:  DATA 46,20
00458:  DATA 75,73
0045A:  DATA 65,20
0045C:  DATA 72,65
0045E:  DATA 71,75
00460:  DATA 65,73
00462:  DATA 74,20
00464:  DATA 61,6C
00466:  DATA 6C,6F
00468:  DATA 77,65
0046A:  DATA 64,0D
0046C:  DATA 0A,00
0046E:  DATA 53,4D
00470:  DATA 46,20
00472:  DATA 75,73
00474:  DATA 65,20
00476:  DATA 72,65
00478:  DATA 71,75
0047A:  DATA 65,73
0047C:  DATA 74,20
0047E:  DATA 64,65
00480:  DATA 6E,79
00482:  DATA 65,64
00484:  DATA 0D,0A
00486:  DATA 00,00
00488:  DATA 52,65
0048A:  DATA 74,72
0048C:  DATA 79,20
0048E:  DATA 72,65
00490:  DATA 71,75
00492:  DATA 65,73
00494:  DATA 74,20
00496:  DATA 74,6F
00498:  DATA 20,42
0049A:  DATA 4F,53
0049C:  DATA 53,20
0049E:  DATA 50,49
004A0:  DATA 43,0D
004A2:  DATA 0A,00
004A4:  DATA 45,72
004A6:  DATA 72,6F
004A8:  DATA 72,21
004AA:  DATA 20,52
004AC:  DATA 65,63
004AE:  DATA 65,69
004B0:  DATA 76,69
004B2:  DATA 6E,67
004B4:  DATA 20,63
004B6:  DATA 6F,6D
004B8:  DATA 6D,61
004BA:  DATA 6E,64
004BC:  DATA 20,69
004BE:  DATA 6E,63
004C0:  DATA 6F,6E
004C2:  DATA 73,69
004C4:  DATA 73,74
004C6:  DATA 65,6E
004C8:  DATA 74,20
004CA:  DATA 77,69
004CC:  DATA 74,68
004CE:  DATA 20,74
004D0:  DATA 68,65
004D2:  DATA 20,64
004D4:  DATA 65,73
004D6:  DATA 69,67
004D8:  DATA 6E,0D
004DA:  DATA 0A,00
004DC:  DATA 45,6E
004DE:  DATA 64,20
004E0:  DATA 53,4D
004E2:  DATA 46,20
004E4:  DATA 75,73
004E6:  DATA 69,6E
004E8:  DATA 67,20
004EA:  DATA 72,65
004EC:  DATA 71,65
004EE:  DATA 73,74
004F0:  DATA 20,73
004F2:  DATA 65,61
004F4:  DATA 71,75
004F6:  DATA 65,6E
004F8:  DATA 63,65
004FA:  DATA 0D,0A
004FC:  DATA 00,00
004FE:  DATA 49,4F
00500:  DATA 20,49
00502:  DATA 6E,69
00504:  DATA 74,69
00506:  DATA 61,6C
00508:  DATA 69,7A
0050A:  DATA 65,0D
0050C:  DATA 0A,00
0050E:  DATA 09,43
00510:  DATA 6F,6D
00512:  DATA 70,6C
00514:  DATA 65,74
00516:  DATA 65,0D
00518:  DATA 0A,00
0051A:  DATA 41,44
0051C:  DATA 43,20
0051E:  DATA 49,6E
00520:  DATA 69,74
00522:  DATA 69,61
00524:  DATA 6C,69
00526:  DATA 7A,65
00528:  DATA 0D,0A
0052A:  DATA 00,00
0052C:  DATA 09,43
0052E:  DATA 6F,6D
00530:  DATA 70,6C
00532:  DATA 65,74
00534:  DATA 65,0D
00536:  DATA 0A,00
00538:  DATA 53,74
0053A:  DATA 61,72
0053C:  DATA 74,20
0053E:  DATA 53,57
00540:  DATA 45,45
00542:  DATA 50,0D
00544:  DATA 0A,00
00546:  DATA 09,53
00548:  DATA 77,65
0054A:  DATA 65,70
0054C:  DATA 20,73
0054E:  DATA 74,65
00550:  DATA 70,20
00552:  DATA 3A,20
00554:  DATA 25,75
00556:  DATA 0D,0A
00558:  DATA 00,00
0055A:  DATA 53,74
0055C:  DATA 61,72
0055E:  DATA 74,20
00560:  DATA 54,45
00562:  DATA 53,54
00564:  DATA 20,53
00566:  DATA 57,45
00568:  DATA 45,50
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 73,74
00570:  DATA 65,70
00572:  DATA 2C,20
00574:  DATA 76,6F
00576:  DATA 6C,74
00578:  DATA 61,67
0057A:  DATA 65,2C
0057C:  DATA 20,63
0057E:  DATA 75,72
00580:  DATA 72,65
00582:  DATA 6E,74
00584:  DATA 0D,0A
00586:  DATA 00,00
00588:  DATA 53,74
0058A:  DATA 61,72
0058C:  DATA 74,20
0058E:  DATA 41,44
00590:  DATA 43,20
00592:  DATA 54,45
00594:  DATA 53,54
00596:  DATA 0D,0A
00598:  DATA 00,00
0059A:  DATA 41,44
0059C:  DATA 43,20
0059E:  DATA 56,6F
005A0:  DATA 6C,74
005A2:  DATA 61,67
005A4:  DATA 65,3A
005A6:  DATA 20,25
005A8:  DATA 30,34
005AA:  DATA 4C,58
005AC:  DATA 0D,0A
005AE:  DATA 00,00
005B0:  DATA 41,44
005B2:  DATA 43,20
005B4:  DATA 43,75
005B6:  DATA 72,72
005B8:  DATA 65,6E
005BA:  DATA 74,3A
005BC:  DATA 20,25
005BE:  DATA 30,34
005C0:  DATA 4C,58
005C2:  DATA 0D,0A
005C4:  DATA 00,00
005C6:  DATA 41,44
005C8:  DATA 43,20
005CA:  DATA 43,49
005CC:  DATA 47,53
005CE:  DATA 31,20
005D0:  DATA 41,6D
005D2:  DATA 70,3A
005D4:  DATA 20,25
005D6:  DATA 30,34
005D8:  DATA 4C,58
005DA:  DATA 0D,0A
005DC:  DATA 00,00
005DE:  DATA 41,44
005E0:  DATA 43,20
005E2:  DATA 43,49
005E4:  DATA 47,53
005E6:  DATA 31,20
005E8:  DATA 56,52
005EA:  DATA 45,46
005EC:  DATA 3A,20
005EE:  DATA 25,30
005F0:  DATA 34,4C
005F2:  DATA 58,0D
005F4:  DATA 0A,00
005F6:  DATA 53,74
005F8:  DATA 61,72
005FA:  DATA 74,20
005FC:  DATA 53,57
005FE:  DATA 45,45
00600:  DATA 50,20
00602:  DATA 32,70
00604:  DATA 6F,72
00606:  DATA 74,73
00608:  DATA 0D,0A
0060A:  DATA 00,00
0060C:  DATA 09,53
0060E:  DATA 77,65
00610:  DATA 65,70
00612:  DATA 20,73
00614:  DATA 74,65
00616:  DATA 70,20
00618:  DATA 3A,20
0061A:  DATA 25,75
0061C:  DATA 0D,0A
0061E:  DATA 00,00
00620:  DATA 45,4E
00622:  DATA 44,20
00624:  DATA 53,57
00626:  DATA 45,45
00628:  DATA 50,20
0062A:  DATA 32,70
0062C:  DATA 6F,72
0062E:  DATA 74,0D
00630:  DATA 0A,00
00632:  DATA 53,74
00634:  DATA 61,72
00636:  DATA 74,20
00638:  DATA 43,49
0063A:  DATA 47,53
0063C:  DATA 20,64
0063E:  DATA 61,74
00640:  DATA 61,20
00642:  DATA 63,6F
00644:  DATA 6E,76
00646:  DATA 65,72
00648:  DATA 73,69
0064A:  DATA 6F,6E
0064C:  DATA 0D,0A
0064E:  DATA 00,00
00650:  DATA 53,74
00652:  DATA 61,72
00654:  DATA 74,20
00656:  DATA 53,57
00658:  DATA 45,45
0065A:  DATA 50,20
0065C:  DATA 50,4F
0065E:  DATA 52,54
00660:  DATA 31,0D
00662:  DATA 0A,00
00664:  DATA 09,53
00666:  DATA 77,65
00668:  DATA 65,70
0066A:  DATA 20,73
0066C:  DATA 74,65
0066E:  DATA 70,20
00670:  DATA 3A,20
00672:  DATA 25,75
00674:  DATA 0D,0A
00676:  DATA 00,00
00678:  DATA 45,4E
0067A:  DATA 44,20
0067C:  DATA 53,57
0067E:  DATA 45,45
00680:  DATA 50,20
00682:  DATA 50,4F
00684:  DATA 52,54
00686:  DATA 31,0D
00688:  DATA 0A,00
0068A:  DATA 53,74
0068C:  DATA 61,72
0068E:  DATA 74,20
00690:  DATA 43,49
00692:  DATA 47,53
00694:  DATA 20,64
00696:  DATA 61,74
00698:  DATA 61,20
0069A:  DATA 63,6F
0069C:  DATA 6E,76
0069E:  DATA 65,72
006A0:  DATA 73,69
006A2:  DATA 6F,6E
006A4:  DATA 0D,0A
006A6:  DATA 00,00
006A8:  DATA 45,6E
006AA:  DATA 64,20
006AC:  DATA 43,49
006AE:  DATA 47,53
006B0:  DATA 20,64
006B2:  DATA 61,74
006B4:  DATA 61,20
006B6:  DATA 63,6F
006B8:  DATA 6E,76
006BA:  DATA 65,72
006BC:  DATA 73,69
006BE:  DATA 6F,6E
006C0:  DATA 0D,0A
006C2:  DATA 00,00
006C4:  DATA 53,74
006C6:  DATA 61,72
006C8:  DATA 74,20
006CA:  DATA 53,57
006CC:  DATA 45,45
006CE:  DATA 50,20
006D0:  DATA 50,4F
006D2:  DATA 52,54
006D4:  DATA 32,0D
006D6:  DATA 0A,00
006D8:  DATA 09,53
006DA:  DATA 77,65
006DC:  DATA 65,70
006DE:  DATA 20,73
006E0:  DATA 74,65
006E2:  DATA 70,20
006E4:  DATA 3A,20
006E6:  DATA 25,75
006E8:  DATA 0D,0A
006EA:  DATA 00,00
006EC:  DATA 45,4E
006EE:  DATA 44,20
006F0:  DATA 53,57
006F2:  DATA 45,45
006F4:  DATA 50,20
006F6:  DATA 50,4F
006F8:  DATA 52,54
006FA:  DATA 32,0D
006FC:  DATA 0A,00
006FE:  DATA 53,74
00700:  DATA 61,72
00702:  DATA 74,20
00704:  DATA 43,49
00706:  DATA 47,53
00708:  DATA 20,64
0070A:  DATA 61,74
0070C:  DATA 61,20
0070E:  DATA 63,6F
00710:  DATA 6E,76
00712:  DATA 65,72
00714:  DATA 73,69
00716:  DATA 6F,6E
00718:  DATA 0D,0A
0071A:  DATA 00,00
0071C:  DATA 53,74
0071E:  DATA 61,72
00720:  DATA 74,20
00722:  DATA 53,57
00724:  DATA 45,45
00726:  DATA 50,20
00728:  DATA 77,69
0072A:  DATA 74,68
0072C:  DATA 20,74
0072E:  DATA 68,72
00730:  DATA 65,73
00732:  DATA 68,6F
00734:  DATA 6C,64
00736:  DATA 0D,0A
00738:  DATA 00,00
0073A:  DATA 43,49
0073C:  DATA 47,53
0073E:  DATA 32,20
00740:  DATA 64,61
00742:  DATA 74,61
00744:  DATA 3A,20
00746:  DATA 25,30
00748:  DATA 34,4C
0074A:  DATA 58,2C
0074C:  DATA 20,25
0074E:  DATA 30,34
00750:  DATA 4C,58
00752:  DATA 0D,0A
00754:  DATA 00,00
00756:  DATA 4D,61
00758:  DATA 78,69
0075A:  DATA 6D,75
0075C:  DATA 6D,20
0075E:  DATA 73,74
00760:  DATA 65,70
00762:  DATA 20,63
00764:  DATA 6F,75
00766:  DATA 6E,74
00768:  DATA 20,72
0076A:  DATA 65,61
0076C:  DATA 63,68
0076E:  DATA 65,64
00770:  DATA 3A,20
00772:  DATA 25,6C
00774:  DATA 64,0D
00776:  DATA 0A,00
00778:  DATA 43,49
0077A:  DATA 47,53
0077C:  DATA 31,20
0077E:  DATA 63,75
00780:  DATA 72,72
00782:  DATA 65,6E
00784:  DATA 74,20
00786:  DATA 6C,69
00788:  DATA 6D,69
0078A:  DATA 74,20
0078C:  DATA 72,65
0078E:  DATA 61,63
00790:  DATA 68,65
00792:  DATA 64,3A
00794:  DATA 00,00
00796:  DATA 43,49
00798:  DATA 47,53
0079A:  DATA 31,20
0079C:  DATA 63,75
0079E:  DATA 72,72
007A0:  DATA 65,6E
007A2:  DATA 74,20
007A4:  DATA 62,65
007A6:  DATA 6C,6F
007A8:  DATA 77,20
007AA:  DATA 74,68
007AC:  DATA 72,65
007AE:  DATA 73,68
007B0:  DATA 6F,6C
007B2:  DATA 64,00
007B4:  DATA 43,49
007B6:  DATA 47,53
007B8:  DATA 32,20
007BA:  DATA 63,75
007BC:  DATA 72,72
007BE:  DATA 65,6E
007C0:  DATA 74,20
007C2:  DATA 6C,69
007C4:  DATA 6D,69
007C6:  DATA 74,20
007C8:  DATA 72,65
007CA:  DATA 61,63
007CC:  DATA 68,65
007CE:  DATA 64,3A
007D0:  DATA 20,00
007D2:  DATA 43,49
007D4:  DATA 47,53
007D6:  DATA 32,20
007D8:  DATA 63,75
007DA:  DATA 72,72
007DC:  DATA 65,6E
007DE:  DATA 74,20
007E0:  DATA 62,65
007E2:  DATA 6C,6F
007E4:  DATA 77,20
007E6:  DATA 74,68
007E8:  DATA 72,65
007EA:  DATA 73,68
007EC:  DATA 6F,6C
007EE:  DATA 64,3A
007F0:  DATA 00,00
007F2:  DATA 45,6E
007F4:  DATA 64,20
007F6:  DATA 53,57
007F8:  DATA 45,45
007FA:  DATA 50,20
007FC:  DATA 77,69
007FE:  DATA 74,68
00800:  DATA 20,74
00802:  DATA 68,72
00804:  DATA 65,73
00806:  DATA 68,6F
00808:  DATA 6C,64
0080A:  DATA 0D,0A
0080C:  DATA 00,00
0080E:  DATA 45,6E
00810:  DATA 64,20
00812:  DATA 43,49
00814:  DATA 47,53
00816:  DATA 20,64
00818:  DATA 61,74
0081A:  DATA 61,20
0081C:  DATA 63,6F
0081E:  DATA 6E,76
00820:  DATA 65,72
00822:  DATA 73,69
00824:  DATA 6F,6E
00826:  DATA 0D,0A
00828:  DATA 00,00
0082A:  DATA 4D,69
0082C:  DATA 73,73
0082E:  DATA 69,6F
00830:  DATA 6E,20
00832:  DATA 46,6C
00834:  DATA 61,73
00836:  DATA 68,20
00838:  DATA 69,73
0083A:  DATA 20,6E
0083C:  DATA 6F,74
0083E:  DATA 20,63
00840:  DATA 6F,6E
00842:  DATA 6E,65
00844:  DATA 63,74
00846:  DATA 65,64
00848:  DATA 0D,0A
0084A:  DATA 00,00
0084C:  DATA 45,72
0084E:  DATA 72,6F
00850:  DATA 72,3A
00852:  DATA 20,55
00854:  DATA 6E,6B
00856:  DATA 6E,6F
00858:  DATA 77,6E
0085A:  DATA 20,43
0085C:  DATA 49,47
0085E:  DATA 53,20
00860:  DATA 6D,69
00862:  DATA 73,73
00864:  DATA 69,6F
00866:  DATA 6E,5F
00868:  DATA 69,64
0086A:  DATA 20,25
0086C:  DATA 30,32
0086E:  DATA 58,0D
00870:  DATA 0A,00
00872:  DATA 43,49
00874:  DATA 47,53
00876:  DATA 20,4D
00878:  DATA 69,73
0087A:  DATA 73,69
0087C:  DATA 6F,6E
0087E:  DATA 20,25
00880:  DATA 30,32
00882:  DATA 58,3A
00884:  DATA 20,2B
00886:  DATA 25,6C
00888:  DATA 64,20
0088A:  DATA 75,6E
0088C:  DATA 63,6F
0088E:  DATA 70,69
00890:  DATA 65,64
00892:  DATA 2C,20
00894:  DATA 54,6F
00896:  DATA 74,61
00898:  DATA 6C,3A
0089A:  DATA 20,25
0089C:  DATA 6C,75
0089E:  DATA 0D,0A
008A0:  DATA 00,00
008A2:  DATA 43,49
008A4:  DATA 47,53
008A6:  DATA 20,4D
008A8:  DATA 69,73
008AA:  DATA 73,69
008AC:  DATA 6F,6E
008AE:  DATA 20,25
008B0:  DATA 30,32
008B2:  DATA 58,3A
008B4:  DATA 20,2D
008B6:  DATA 25,6C
008B8:  DATA 64,20
008BA:  DATA 75,6E
008BC:  DATA 63,6F
008BE:  DATA 70,69
008C0:  DATA 65,64
008C2:  DATA 2C,20
008C4:  DATA 52,65
008C6:  DATA 6D,61
008C8:  DATA 69,6E
008CA:  DATA 69,6E
008CC:  DATA 67,3A
008CE:  DATA 20,25
008D0:  DATA 6C,75
008D2:  DATA 0D,0A
008D4:  DATA 00,00
008D6:  DATA 57,61
008D8:  DATA 72,6E
008DA:  DATA 69,6E
008DC:  DATA 67,3A
008DE:  DATA 20,43
008E0:  DATA 49,47
008E2:  DATA 53,20
008E4:  DATA 4D,69
008E6:  DATA 73,73
008E8:  DATA 69,6F
008EA:  DATA 6E,20
008EC:  DATA 25,30
008EE:  DATA 32,58
008F0:  DATA 20,63
008F2:  DATA 61,6E
008F4:  DATA 6E,6F
008F6:  DATA 74,20
008F8:  DATA 64,65
008FA:  DATA 63,72
008FC:  DATA 65,61
008FE:  DATA 73,65
00900:  DATA 20,62
00902:  DATA 65,6C
00904:  DATA 6F,77
00906:  DATA 20,30
00908:  DATA 20,28
0090A:  DATA 63,75
0090C:  DATA 72,72
0090E:  DATA 65,6E
00910:  DATA 74,3A
00912:  DATA 20,25
00914:  DATA 6C,75
00916:  DATA 2C,20
00918:  DATA 72,65
0091A:  DATA 71,75
0091C:  DATA 65,73
0091E:  DATA 74,65
00920:  DATA 64,3A
00922:  DATA 20,25
00924:  DATA 6C,64
00926:  DATA 29,0D
00928:  DATA 0A,00
0092A:  DATA 43,49
0092C:  DATA 47,53
0092E:  DATA 20,4D
00930:  DATA 69,73
00932:  DATA 73,69
00934:  DATA 6F,6E
00936:  DATA 20,25
00938:  DATA 30,32
0093A:  DATA 58,3A
0093C:  DATA 20,2B
0093E:  DATA 25,6C
00940:  DATA 64,20
00942:  DATA 75,6E
00944:  DATA 63,6F
00946:  DATA 70,69
00948:  DATA 65,64
0094A:  DATA 2C,20
0094C:  DATA 54,6F
0094E:  DATA 74,61
00950:  DATA 6C,3A
00952:  DATA 20,25
00954:  DATA 6C,75
00956:  DATA 0D,0A
00958:  DATA 00,00
0095A:  DATA 43,49
0095C:  DATA 47,53
0095E:  DATA 20,4D
00960:  DATA 69,73
00962:  DATA 73,69
00964:  DATA 6F,6E
00966:  DATA 20,25
00968:  DATA 30,32
0096A:  DATA 58,3A
0096C:  DATA 20,2D
0096E:  DATA 25,6C
00970:  DATA 64,20
00972:  DATA 75,6E
00974:  DATA 63,6F
00976:  DATA 70,69
00978:  DATA 65,64
0097A:  DATA 2C,20
0097C:  DATA 52,65
0097E:  DATA 6D,61
00980:  DATA 69,6E
00982:  DATA 69,6E
00984:  DATA 67,3A
00986:  DATA 20,25
00988:  DATA 6C,75
0098A:  DATA 0D,0A
0098C:  DATA 00,00
0098E:  DATA 57,61
00990:  DATA 72,6E
00992:  DATA 69,6E
00994:  DATA 67,3A
00996:  DATA 20,43
00998:  DATA 49,47
0099A:  DATA 53,20
0099C:  DATA 4D,69
0099E:  DATA 73,73
009A0:  DATA 69,6F
009A2:  DATA 6E,20
009A4:  DATA 25,30
009A6:  DATA 32,58
009A8:  DATA 20,63
009AA:  DATA 61,6E
009AC:  DATA 6E,6F
009AE:  DATA 74,20
009B0:  DATA 64,65
009B2:  DATA 63,72
009B4:  DATA 65,61
009B6:  DATA 73,65
009B8:  DATA 20,62
009BA:  DATA 65,6C
009BC:  DATA 6F,77
009BE:  DATA 20,30
009C0:  DATA 20,28
009C2:  DATA 63,75
009C4:  DATA 72,72
009C6:  DATA 65,6E
009C8:  DATA 74,3A
009CA:  DATA 20,25
009CC:  DATA 6C,75
009CE:  DATA 2C,20
009D0:  DATA 72,65
009D2:  DATA 71,75
009D4:  DATA 65,73
009D6:  DATA 74,65
009D8:  DATA 64,3A
009DA:  DATA 20,25
009DC:  DATA 6C,64
009DE:  DATA 29,0D
009E0:  DATA 0A,00
009E2:  DATA 57,61
009E4:  DATA 72,6E
009E6:  DATA 69,6E
009E8:  DATA 67,3A
009EA:  DATA 20,55
009EC:  DATA 6E,6B
009EE:  DATA 6E,6F
009F0:  DATA 77,6E
009F2:  DATA 20,6D
009F4:  DATA 69,73
009F6:  DATA 73,69
009F8:  DATA 6F,6E
009FA:  DATA 5F,69
009FC:  DATA 64,20
009FE:  DATA 25,30
00A00:  DATA 32,58
00A02:  DATA 20,66
00A04:  DATA 6F,72
00A06:  DATA 20,63
00A08:  DATA 6F,75
00A0A:  DATA 6E,74
00A0C:  DATA 65,72
00A0E:  DATA 20,75
00A10:  DATA 70,64
00A12:  DATA 61,74
00A14:  DATA 65,0D
00A16:  DATA 0A,00
00A18:  DATA 43,49
00A1A:  DATA 47,53
00A1C:  DATA 20,4D
00A1E:  DATA 69,73
00A20:  DATA 73,69
00A22:  DATA 6F,6E
00A24:  DATA 20,25
00A26:  DATA 30,32
00A28:  DATA 58,3A
00A2A:  DATA 20,75
00A2C:  DATA 6E,63
00A2E:  DATA 6F,70
00A30:  DATA 69,65
00A32:  DATA 64,20
00A34:  DATA 63,6F
00A36:  DATA 75,6E
00A38:  DATA 74,65
00A3A:  DATA 72,20
00A3C:  DATA 72,65
00A3E:  DATA 73,65
00A40:  DATA 74,0D
00A42:  DATA 0A,00
00A44:  DATA 43,49
00A46:  DATA 47,53
00A48:  DATA 20,4D
00A4A:  DATA 69,73
00A4C:  DATA 73,69
00A4E:  DATA 6F,6E
00A50:  DATA 20,25
00A52:  DATA 30,32
00A54:  DATA 58,3A
00A56:  DATA 20,75
00A58:  DATA 6E,63
00A5A:  DATA 6F,70
00A5C:  DATA 69,65
00A5E:  DATA 64,20
00A60:  DATA 63,6F
00A62:  DATA 75,6E
00A64:  DATA 74,65
00A66:  DATA 72,20
00A68:  DATA 72,65
00A6A:  DATA 73,65
00A6C:  DATA 74,0D
00A6E:  DATA 0A,00
00A70:  DATA 57,61
00A72:  DATA 72,6E
00A74:  DATA 69,6E
00A76:  DATA 67,3A
00A78:  DATA 20,55
00A7A:  DATA 6E,6B
00A7C:  DATA 6E,6F
00A7E:  DATA 77,6E
00A80:  DATA 20,6D
00A82:  DATA 69,73
00A84:  DATA 73,69
00A86:  DATA 6F,6E
00A88:  DATA 5F,69
00A8A:  DATA 64,20
00A8C:  DATA 25,30
00A8E:  DATA 32,58
00A90:  DATA 20,66
00A92:  DATA 6F,72
00A94:  DATA 20,63
00A96:  DATA 6F,75
00A98:  DATA 6E,74
00A9A:  DATA 65,72
00A9C:  DATA 20,72
00A9E:  DATA 65,73
00AA0:  DATA 65,74
00AA2:  DATA 0D,0A
00AA4:  DATA 00,00
00AA6:  DATA 43,52
00AA8:  DATA 43,20
00AAA:  DATA 76,65
00AAC:  DATA 72,69
00AAE:  DATA 66,69
00AB0:  DATA 63,61
00AB2:  DATA 74,69
00AB4:  DATA 6F,6E
00AB6:  DATA 20,70
00AB8:  DATA 61,73
00ABA:  DATA 73,65
00ABC:  DATA 64,20
00ABE:  DATA 6F,6E
00AC0:  DATA 20,61
00AC2:  DATA 74,74
00AC4:  DATA 65,6D
00AC6:  DATA 70,74
00AC8:  DATA 20,25
00ACA:  DATA 64,0D
00ACC:  DATA 0A,00
00ACE:  DATA 43,52
00AD0:  DATA 43,20
00AD2:  DATA 76,65
00AD4:  DATA 72,69
00AD6:  DATA 66,69
00AD8:  DATA 63,61
00ADA:  DATA 74,69
00ADC:  DATA 6F,6E
00ADE:  DATA 20,70
00AE0:  DATA 61,73
00AE2:  DATA 73,65
00AE4:  DATA 64,20
00AE6:  DATA 6F,6E
00AE8:  DATA 20,61
00AEA:  DATA 74,74
00AEC:  DATA 65,6D
00AEE:  DATA 70,74
00AF0:  DATA 20,25
00AF2:  DATA 64,0D
00AF4:  DATA 0A,00
00AF6:  DATA 45,72
00AF8:  DATA 72,6F
00AFA:  DATA 72,3A
00AFC:  DATA 20,43
00AFE:  DATA 52,43
00B00:  DATA 20,76
00B02:  DATA 65,72
00B04:  DATA 69,66
00B06:  DATA 69,63
00B08:  DATA 61,74
00B0A:  DATA 69,6F
00B0C:  DATA 6E,20
00B0E:  DATA 66,61
00B10:  DATA 69,6C
00B12:  DATA 65,64
00B14:  DATA 20,61
00B16:  DATA 66,74
00B18:  DATA 65,72
00B1A:  DATA 20,25
00B1C:  DATA 64,20
00B1E:  DATA 61,74
00B20:  DATA 74,65
00B22:  DATA 6D,70
00B24:  DATA 74,73
00B26:  DATA 0D,0A
00B28:  DATA 00,00
00B2A:  DATA 0D,0A
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,5F
00B32:  DATA 5F,5F
00B34:  DATA 5F,5F
00B36:  DATA 5F,5F
00B38:  DATA 5F,5F
00B3A:  DATA 5F,5F
00B3C:  DATA 5F,5F
00B3E:  DATA 5F,5F
00B40:  DATA 0D,0A
00B42:  DATA 00,00
00B44:  DATA 5F,5F
00B46:  DATA 5F,53
00B48:  DATA 74,61
00B4A:  DATA 72,74
00B4C:  DATA 20,63
00B4E:  DATA 6F,70
00B50:  DATA 79,5F
00B52:  DATA 64,61
00B54:  DATA 74,61
00B56:  DATA 5F,5F
00B58:  DATA 0D,0A
00B5A:  DATA 00,00
00B5C:  DATA 49,6E
00B5E:  DATA 20,53
00B60:  DATA 4D,46
00B62:  DATA 20,6D
00B64:  DATA 69,73
00B66:  DATA 73,69
00B68:  DATA 6F,6E
00B6A:  DATA 20,64
00B6C:  DATA 61,74
00B6E:  DATA 61,20
00B70:  DATA 73,74
00B72:  DATA 61,72
00B74:  DATA 74,20
00B76:  DATA 20,20
00B78:  DATA 61,64
00B7A:  DATA 64,72
00B7C:  DATA 65,73
00B7E:  DATA 73,3A
00B80:  DATA 20,25
00B82:  DATA 4C,58
00B84:  DATA 0D,0A
00B86:  DATA 00,00
00B88:  DATA 49,6E
00B8A:  DATA 20,53
00B8C:  DATA 4D,46
00B8E:  DATA 20,6D
00B90:  DATA 69,73
00B92:  DATA 73,69
00B94:  DATA 6F,6E
00B96:  DATA 20,64
00B98:  DATA 61,74
00B9A:  DATA 61,20
00B9C:  DATA 65,6E
00B9E:  DATA 64,20
00BA0:  DATA 20,20
00BA2:  DATA 20,20
00BA4:  DATA 61,64
00BA6:  DATA 64,72
00BA8:  DATA 65,73
00BAA:  DATA 73,3A
00BAC:  DATA 20,25
00BAE:  DATA 4C,58
00BB0:  DATA 0D,0A
00BB2:  DATA 00,00
00BB4:  DATA 49,6E
00BB6:  DATA 20,4D
00BB8:  DATA 49,53
00BBA:  DATA 20,46
00BBC:  DATA 4D,20
00BBE:  DATA 57,72
00BC0:  DATA 69,74
00BC2:  DATA 65,20
00BC4:  DATA 73,6F
00BC6:  DATA 75,72
00BC8:  DATA 63,65
00BCA:  DATA 20,64
00BCC:  DATA 61,74
00BCE:  DATA 61,20
00BD0:  DATA 61,64
00BD2:  DATA 64,72
00BD4:  DATA 65,73
00BD6:  DATA 73,3A
00BD8:  DATA 20,25
00BDA:  DATA 4C,58
00BDC:  DATA 0D,0A
00BDE:  DATA 00,00
00BE0:  DATA 49,6E
00BE2:  DATA 20,4D
00BE4:  DATA 49,53
00BE6:  DATA 20,46
00BE8:  DATA 4D,20
00BEA:  DATA 57,72
00BEC:  DATA 69,74
00BEE:  DATA 65,20
00BF0:  DATA 64,61
00BF2:  DATA 74,61
00BF4:  DATA 20,73
00BF6:  DATA 69,7A
00BF8:  DATA 65,20
00BFA:  DATA 20,20
00BFC:  DATA 20,20
00BFE:  DATA 20,20
00C00:  DATA 20,20
00C02:  DATA 20,3A
00C04:  DATA 20,25
00C06:  DATA 6C,75
00C08:  DATA 20,28
00C0A:  DATA 30,78
00C0C:  DATA 25,6C
00C0E:  DATA 78,29
00C10:  DATA 0D,0A
00C12:  DATA 0D,0A
00C14:  DATA 00,00
00C16:  DATA 45,72
00C18:  DATA 72,6F
00C1A:  DATA 72,3A
00C1C:  DATA 20,4D
00C1E:  DATA 49,53
00C20:  DATA 20,46
00C22:  DATA 4D,20
00C24:  DATA 69,73
00C26:  DATA 20,6E
00C28:  DATA 6F,74
00C2A:  DATA 20,63
00C2C:  DATA 6F,6E
00C2E:  DATA 6E,65
00C30:  DATA 63,74
00C32:  DATA 65,64
00C34:  DATA 0D,0A
00C36:  DATA 00,00
00C38:  DATA 45,72
00C3A:  DATA 72,6F
00C3C:  DATA 72,3A
00C3E:  DATA 20,53
00C40:  DATA 4D,46
00C42:  DATA 20,69
00C44:  DATA 73,20
00C46:  DATA 6E,6F
00C48:  DATA 74,20
00C4A:  DATA 63,6F
00C4C:  DATA 6E,6E
00C4E:  DATA 65,63
00C50:  DATA 74,65
00C52:  DATA 64,0D
00C54:  DATA 0A,00
00C56:  DATA 53,69
00C58:  DATA 7A,65
00C5A:  DATA 20,61
00C5C:  DATA 72,65
00C5E:  DATA 61,20
00C60:  DATA 72,65
00C62:  DATA 61,64
00C64:  DATA 0D,0A
00C66:  DATA 00,00
00C68:  DATA 75,73
00C6A:  DATA 65,64
00C6C:  DATA 5F,73
00C6E:  DATA 69,7A
00C70:  DATA 65,20
00C72:  DATA 3D,20
00C74:  DATA 25,6C
00C76:  DATA 64,20
00C78:  DATA 28,73
00C7A:  DATA 72,63
00C7C:  DATA 20,30
00C7E:  DATA 78,25
00C80:  DATA 30,38
00C82:  DATA 4C,58
00C84:  DATA 29,0D
00C86:  DATA 0A,00
00C88:  DATA 6C,6F
00C8A:  DATA 6F,70
00C8C:  DATA 20,63
00C8E:  DATA 6F,75
00C90:  DATA 6E,74
00C92:  DATA 3D,20
00C94:  DATA 25,64
00C96:  DATA 20,20
00C98:  DATA 28,73
00C9A:  DATA 72,63
00C9C:  DATA 20,30
00C9E:  DATA 78,25
00CA0:  DATA 30,38
00CA2:  DATA 4C,58
00CA4:  DATA 29,0D
00CA6:  DATA 0A,0D
00CA8:  DATA 0A,00
00CAA:  DATA 57,72
00CAC:  DATA 61,70
00CAE:  DATA 20,74
00CB0:  DATA 72,69
00CB2:  DATA 67,67
00CB4:  DATA 65,72
00CB6:  DATA 65,64
00CB8:  DATA 3A,20
00CBA:  DATA 52,65
00CBC:  DATA 73,65
00CBE:  DATA 74,74
00CC0:  DATA 69,6E
00CC2:  DATA 67,20
00CC4:  DATA 64,61
00CC6:  DATA 74,61
00CC8:  DATA 5F,77
00CCA:  DATA 72,69
00CCC:  DATA 74,65
00CCE:  DATA 5F,61
00CD0:  DATA 64,64
00CD2:  DATA 72,20
00CD4:  DATA 74,6F
00CD6:  DATA 20,73
00CD8:  DATA 74,61
00CDA:  DATA 72,74
00CDC:  DATA 0D,0A
00CDE:  DATA 00,00
00CE0:  DATA 75,73
00CE2:  DATA 65,64
00CE4:  DATA 5F,73
00CE6:  DATA 69,7A
00CE8:  DATA 65,20
00CEA:  DATA 3D,20
00CEC:  DATA 25,6C
00CEE:  DATA 64,0D
00CF0:  DATA 0A,00
00CF2:  DATA 6C,6F
00CF4:  DATA 6F,70
00CF6:  DATA 5F,63
00CF8:  DATA 6F,75
00CFA:  DATA 6E,74
00CFC:  DATA 20,3D
00CFE:  DATA 20,25
00D00:  DATA 75,0D
00D02:  DATA 0A,0D
00D04:  DATA 0A,00
00D06:  DATA 0D,0A
00D08:  DATA 5F,5F
00D0A:  DATA 5F,45
00D0C:  DATA 6E,64
00D0E:  DATA 20,63
00D10:  DATA 6F,70
00D12:  DATA 79,5F
00D14:  DATA 64,61
00D16:  DATA 74,61
00D18:  DATA 5F,5F
00D1A:  DATA 5F,5F
00D1C:  DATA 0D,0A
00D1E:  DATA 00,00
00D20:  DATA 5F,5F
00D22:  DATA 5F,5F
00D24:  DATA 5F,5F
00D26:  DATA 5F,5F
00D28:  DATA 5F,5F
00D2A:  DATA 5F,5F
00D2C:  DATA 5F,5F
00D2E:  DATA 5F,5F
00D30:  DATA 5F,5F
00D32:  DATA 5F,5F
00D34:  DATA 0D,0A
00D36:  DATA 0D,0A
00D38:  DATA 00,00
00D3A:  DATA 0D,0A
00D3C:  DATA 5F,5F
00D3E:  DATA 5F,5F
00D40:  DATA 5F,5F
00D42:  DATA 5F,5F
00D44:  DATA 5F,5F
00D46:  DATA 5F,5F
00D48:  DATA 5F,5F
00D4A:  DATA 5F,5F
00D4C:  DATA 5F,5F
00D4E:  DATA 5F,5F
00D50:  DATA 0D,0A
00D52:  DATA 00,00
00D54:  DATA 5F,5F
00D56:  DATA 5F,53
00D58:  DATA 74,61
00D5A:  DATA 72,74
00D5C:  DATA 20,53
00D5E:  DATA 4D,46
00D60:  DATA 20,52
00D62:  DATA 65,61
00D64:  DATA 64,5F
00D66:  DATA 5F,5F
00D68:  DATA 5F,0D
00D6A:  DATA 0A,00
00D6C:  DATA 49,6E
00D6E:  DATA 20,53
00D70:  DATA 4D,46
00D72:  DATA 20,52
00D74:  DATA 65,61
00D76:  DATA 64,20
00D78:  DATA 73,6F
00D7A:  DATA 75,72
00D7C:  DATA 63,65
00D7E:  DATA 20,64
00D80:  DATA 61,74
00D82:  DATA 61,20
00D84:  DATA 61,64
00D86:  DATA 64,72
00D88:  DATA 65,73
00D8A:  DATA 73,3A
00D8C:  DATA 20,25
00D8E:  DATA 4C,58
00D90:  DATA 0D,0A
00D92:  DATA 00,00
00D94:  DATA 49,6E
00D96:  DATA 20,53
00D98:  DATA 4D,46
00D9A:  DATA 20,52
00D9C:  DATA 65,61
00D9E:  DATA 64,20
00DA0:  DATA 64,61
00DA2:  DATA 74,61
00DA4:  DATA 20,73
00DA6:  DATA 69,7A
00DA8:  DATA 65,20
00DAA:  DATA 20,20
00DAC:  DATA 20,20
00DAE:  DATA 20,20
00DB0:  DATA 20,20
00DB2:  DATA 20,3A
00DB4:  DATA 20,25
00DB6:  DATA 6C,75
00DB8:  DATA 20,28
00DBA:  DATA 30,78
00DBC:  DATA 25,6C
00DBE:  DATA 78,29
00DC0:  DATA 0D,0A
00DC2:  DATA 0D,0A
00DC4:  DATA 00,00
00DC6:  DATA 45,72
00DC8:  DATA 72,6F
00DCA:  DATA 72,3A
00DCC:  DATA 20,53
00DCE:  DATA 4D,46
00DD0:  DATA 20,69
00DD2:  DATA 73,20
00DD4:  DATA 6E,6F
00DD6:  DATA 74,20
00DD8:  DATA 63,6F
00DDA:  DATA 6E,6E
00DDC:  DATA 65,63
00DDE:  DATA 74,65
00DE0:  DATA 64,0D
00DE2:  DATA 0A,00
00DE4:  DATA 52,45
00DE6:  DATA 41,44
00DE8:  DATA 20,44
00DEA:  DATA 41,54
00DEC:  DATA 41,20
00DEE:  DATA 46,52
00DF0:  DATA 4F,4D
00DF2:  DATA 20,53
00DF4:  DATA 4D,46
00DF6:  DATA 2E,2E
00DF8:  DATA 2E,0D
00DFA:  DATA 0A,00
00DFC:  DATA 0D,0A
00DFE:  DATA 5F,5F
00E00:  DATA 5F,45
00E02:  DATA 6E,64
00E04:  DATA 20,53
00E06:  DATA 4D,46
00E08:  DATA 20,52
00E0A:  DATA 65,61
00E0C:  DATA 64,5F
00E0E:  DATA 5F,5F
00E10:  DATA 5F,0D
00E12:  DATA 0A,00
00E14:  DATA 5F,5F
00E16:  DATA 5F,5F
00E18:  DATA 5F,5F
00E1A:  DATA 5F,5F
00E1C:  DATA 5F,5F
00E1E:  DATA 5F,5F
00E20:  DATA 5F,5F
00E22:  DATA 5F,5F
00E24:  DATA 5F,5F
00E26:  DATA 5F,5F
00E28:  DATA 0D,0A
00E2A:  DATA 0D,0A
00E2C:  DATA 00,00
00E2E:  DATA 0D,0A
00E30:  DATA 5F,5F
00E32:  DATA 5F,5F
00E34:  DATA 5F,5F
00E36:  DATA 5F,5F
00E38:  DATA 5F,5F
00E3A:  DATA 5F,5F
00E3C:  DATA 5F,5F
00E3E:  DATA 5F,5F
00E40:  DATA 5F,5F
00E42:  DATA 5F,5F
00E44:  DATA 0D,0A
00E46:  DATA 00,00
00E48:  DATA 5F,5F
00E4A:  DATA 5F,53
00E4C:  DATA 74,61
00E4E:  DATA 72,74
00E50:  DATA 20,73
00E52:  DATA 6D,66
00E54:  DATA 5F,65
00E56:  DATA 72,61
00E58:  DATA 73,65
00E5A:  DATA 5F,5F
00E5C:  DATA 5F,5F
00E5E:  DATA 0D,0A
00E60:  DATA 00,00
00E62:  DATA 49,6E
00E64:  DATA 20,53
00E66:  DATA 4D,46
00E68:  DATA 20,6D
00E6A:  DATA 69,73
00E6C:  DATA 73,69
00E6E:  DATA 6F,6E
00E70:  DATA 20,64
00E72:  DATA 61,74
00E74:  DATA 61,20
00E76:  DATA 73,74
00E78:  DATA 61,72
00E7A:  DATA 74,20
00E7C:  DATA 20,20
00E7E:  DATA 61,64
00E80:  DATA 64,72
00E82:  DATA 65,73
00E84:  DATA 73,3A
00E86:  DATA 20,25
00E88:  DATA 4C,58
00E8A:  DATA 0D,0A
00E8C:  DATA 00,00
00E8E:  DATA 49,6E
00E90:  DATA 20,53
00E92:  DATA 4D,46
00E94:  DATA 20,6D
00E96:  DATA 69,73
00E98:  DATA 73,69
00E9A:  DATA 6F,6E
00E9C:  DATA 20,64
00E9E:  DATA 61,74
00EA0:  DATA 61,20
00EA2:  DATA 65,6E
00EA4:  DATA 64,20
00EA6:  DATA 20,20
00EA8:  DATA 20,20
00EAA:  DATA 61,64
00EAC:  DATA 64,72
00EAE:  DATA 65,73
00EB0:  DATA 73,3A
00EB2:  DATA 20,25
00EB4:  DATA 4C,58
00EB6:  DATA 0D,0A
00EB8:  DATA 00,00
00EBA:  DATA 49,6E
00EBC:  DATA 20,53
00EBE:  DATA 4D,46
00EC0:  DATA 20,45
00EC2:  DATA 72,61
00EC4:  DATA 73,65
00EC6:  DATA 20,73
00EC8:  DATA 6F,75
00ECA:  DATA 72,63
00ECC:  DATA 65,20
00ECE:  DATA 64,61
00ED0:  DATA 74,61
00ED2:  DATA 20,61
00ED4:  DATA 64,64
00ED6:  DATA 72,65
00ED8:  DATA 73,73
00EDA:  DATA 3A,20
00EDC:  DATA 25,4C
00EDE:  DATA 58,0D
00EE0:  DATA 0A,00
00EE2:  DATA 49,6E
00EE4:  DATA 20,53
00EE6:  DATA 4D,46
00EE8:  DATA 20,45
00EEA:  DATA 72,61
00EEC:  DATA 73,65
00EEE:  DATA 20,64
00EF0:  DATA 61,74
00EF2:  DATA 61,20
00EF4:  DATA 73,69
00EF6:  DATA 7A,65
00EF8:  DATA 20,20
00EFA:  DATA 20,20
00EFC:  DATA 20,20
00EFE:  DATA 20,20
00F00:  DATA 20,20
00F02:  DATA 3A,20
00F04:  DATA 25,6C
00F06:  DATA 75,20
00F08:  DATA 28,30
00F0A:  DATA 78,25
00F0C:  DATA 6C,78
00F0E:  DATA 29,0D
00F10:  DATA 0A,0D
00F12:  DATA 0A,00
00F14:  DATA 45,72
00F16:  DATA 72,6F
00F18:  DATA 72,3A
00F1A:  DATA 20,53
00F1C:  DATA 4D,46
00F1E:  DATA 20,69
00F20:  DATA 73,20
00F22:  DATA 6E,6F
00F24:  DATA 74,20
00F26:  DATA 63,6F
00F28:  DATA 6E,6E
00F2A:  DATA 65,63
00F2C:  DATA 74,65
00F2E:  DATA 64,0D
00F30:  DATA 0A,00
00F32:  DATA 45,72
00F34:  DATA 72,6F
00F36:  DATA 72,3A
00F38:  DATA 20,45
00F3A:  DATA 72,61
00F3C:  DATA 73,65
00F3E:  DATA 20,73
00F40:  DATA 6F,75
00F42:  DATA 72,63
00F44:  DATA 65,20
00F46:  DATA 61,64
00F48:  DATA 64,72
00F4A:  DATA 65,73
00F4C:  DATA 73,20
00F4E:  DATA 30,78
00F50:  DATA 25,4C
00F52:  DATA 58,20
00F54:  DATA 69,73
00F56:  DATA 20,6F
00F58:  DATA 75,74
00F5A:  DATA 73,69
00F5C:  DATA 64,65
00F5E:  DATA 20,6D
00F60:  DATA 69,73
00F62:  DATA 73,69
00F64:  DATA 6F,6E
00F66:  DATA 20,72
00F68:  DATA 61,6E
00F6A:  DATA 67,65
00F6C:  DATA 20,5B
00F6E:  DATA 30,78
00F70:  DATA 25,4C
00F72:  DATA 58,20
00F74:  DATA 2D,20
00F76:  DATA 30,78
00F78:  DATA 25,4C
00F7A:  DATA 58,5D
00F7C:  DATA 0D,0A
00F7E:  DATA 00,00
00F80:  DATA 45,72
00F82:  DATA 72,6F
00F84:  DATA 72,3A
00F86:  DATA 20,45
00F88:  DATA 72,61
00F8A:  DATA 73,65
00F8C:  DATA 20,6F
00F8E:  DATA 70,65
00F90:  DATA 72,61
00F92:  DATA 74,69
00F94:  DATA 6F,6E
00F96:  DATA 20,77
00F98:  DATA 6F,75
00F9A:  DATA 6C,64
00F9C:  DATA 20,65
00F9E:  DATA 78,63
00FA0:  DATA 65,65
00FA2:  DATA 64,20
00FA4:  DATA 6D,69
00FA6:  DATA 73,73
00FA8:  DATA 69,6F
00FAA:  DATA 6E,20
00FAC:  DATA 65,6E
00FAE:  DATA 64,20
00FB0:  DATA 61,64
00FB2:  DATA 64,72
00FB4:  DATA 65,73
00FB6:  DATA 73,20
00FB8:  DATA 30,78
00FBA:  DATA 25,4C
00FBC:  DATA 58,0D
00FBE:  DATA 0A,00
00FC0:  DATA 4C,69
00FC2:  DATA 6D,69
00FC4:  DATA 74,69
00FC6:  DATA 6E,67
00FC8:  DATA 20,65
00FCA:  DATA 72,61
00FCC:  DATA 73,65
00FCE:  DATA 20,73
00FD0:  DATA 69,7A
00FD2:  DATA 65,20
00FD4:  DATA 74,6F
00FD6:  DATA 20,73
00FD8:  DATA 74,61
00FDA:  DATA 79,20
00FDC:  DATA 77,69
00FDE:  DATA 74,68
00FE0:  DATA 69,6E
00FE2:  DATA 20,6D
00FE4:  DATA 69,73
00FE6:  DATA 73,69
00FE8:  DATA 6F,6E
00FEA:  DATA 20,62
00FEC:  DATA 6F,75
00FEE:  DATA 6E,64
00FF0:  DATA 73,0D
00FF2:  DATA 0A,00
00FF4:  DATA 45,72
00FF6:  DATA 61,73
00FF8:  DATA 65,20
00FFA:  DATA 6F,70
00FFC:  DATA 65,72
00FFE:  DATA 61,74
01000:  DATA 69,6F
01002:  DATA 6E,20
01004:  DATA 76,61
01006:  DATA 6C,69
01008:  DATA 64,61
0100A:  DATA 74,65
0100C:  DATA 64,20
0100E:  DATA 77,69
01010:  DATA 74,68
01012:  DATA 69,6E
01014:  DATA 20,6D
01016:  DATA 69,73
01018:  DATA 73,69
0101A:  DATA 6F,6E
0101C:  DATA 20,72
0101E:  DATA 61,6E
01020:  DATA 67,65
01022:  DATA 0D,0A
01024:  DATA 00,00
01026:  DATA 0D,0A
01028:  DATA 5F,5F
0102A:  DATA 5F,45
0102C:  DATA 6E,64
0102E:  DATA 20,73
01030:  DATA 6D,66
01032:  DATA 5F,65
01034:  DATA 72,61
01036:  DATA 73,65
01038:  DATA 5F,5F
0103A:  DATA 5F,5F
0103C:  DATA 0D,0A
0103E:  DATA 00,00
01040:  DATA 5F,5F
01042:  DATA 5F,5F
01044:  DATA 5F,5F
01046:  DATA 5F,5F
01048:  DATA 5F,5F
0104A:  DATA 5F,5F
0104C:  DATA 5F,5F
0104E:  DATA 5F,5F
01050:  DATA 5F,5F
01052:  DATA 5F,5F
01054:  DATA 0D,0A
01056:  DATA 0D,0A
01058:  DATA 00,00
0105A:  DATA 45,72
0105C:  DATA 72,6F
0105E:  DATA 72,3A
01060:  DATA 20,55
01062:  DATA 6E,6B
01064:  DATA 6E,6F
01066:  DATA 77,6E
01068:  DATA 20,6D
0106A:  DATA 69,73
0106C:  DATA 73,69
0106E:  DATA 6F,6E
01070:  DATA 5F,69
01072:  DATA 64,3A
01074:  DATA 20,25
01076:  DATA 30,32
01078:  DATA 58,0D
0107A:  DATA 0A,00
0107C:  DATA 55,70
0107E:  DATA 64,61
01080:  DATA 74,65
01082:  DATA 64,20
01084:  DATA 70,61
01086:  DATA 72,74
01088:  DATA 69,74
0108A:  DATA 69,6F
0108C:  DATA 6E,20
0108E:  DATA 66,6F
01090:  DATA 72,20
01092:  DATA 6D,69
01094:  DATA 73,73
01096:  DATA 69,6F
01098:  DATA 6E,5F
0109A:  DATA 69,64
0109C:  DATA 20,25
0109E:  DATA 30,32
010A0:  DATA 58,3A
010A2:  DATA 20,75
010A4:  DATA 73,65
010A6:  DATA 64,5F
010A8:  DATA 73,69
010AA:  DATA 7A,65
010AC:  DATA 3D,25
010AE:  DATA 6C,64
010B0:  DATA 2C,20
010B2:  DATA 6C,6F
010B4:  DATA 6F,70
010B6:  DATA 5F,63
010B8:  DATA 6F,75
010BA:  DATA 6E,74
010BC:  DATA 65,72
010BE:  DATA 3D,25
010C0:  DATA 6C,64
010C2:  DATA 0D,0A
010C4:  DATA 00,00
010C6:  DATA 4D,49
010C8:  DATA 53,53
010CA:  DATA 49,4F
010CC:  DATA 4E,20
010CE:  DATA 46,4C
010D0:  DATA 41,53
010D2:  DATA 48,20
010D4:  DATA 49,6E
010D6:  DATA 69,74
010D8:  DATA 69,61
010DA:  DATA 6C,69
010DC:  DATA 7A,65
010DE:  DATA 0D,0A
010E0:  DATA 00,00
010E2:  DATA 09,5B
010E4:  DATA 4D,49
010E6:  DATA 53,20
010E8:  DATA 46,4D
010EA:  DATA 5D,52
010EC:  DATA 45,41
010EE:  DATA 44,20
010F0:  DATA 49,44
010F2:  DATA 3A,00
010F4:  DATA 09,5B
010F6:  DATA 53,4D
010F8:  DATA 46,5D
010FA:  DATA 09,52
010FC:  DATA 45,41
010FE:  DATA 44,20
01100:  DATA 49,44
01102:  DATA 3A,00
01104:  DATA 09,5B
01106:  DATA 53,4D
01108:  DATA 46,5D
0110A:  DATA 09,63
0110C:  DATA 6F,6E
0110E:  DATA 6E,65
01110:  DATA 63,74
01112:  DATA 20,65
01114:  DATA 72,72
01116:  DATA 6F,72
01118:  DATA 21,0D
0111A:  DATA 0A,00
0111C:  DATA 09,5B
0111E:  DATA 53,4D
01120:  DATA 46,5D
01122:  DATA 09,69
01124:  DATA 73,20
01126:  DATA 63,6F
01128:  DATA 6E,6E
0112A:  DATA 65,63
0112C:  DATA 74,65
0112E:  DATA 64,0D
01130:  DATA 0A,00
01132:  DATA 09,5B
01134:  DATA 4D,49
01136:  DATA 53,20
01138:  DATA 46,4D
0113A:  DATA 5D,63
0113C:  DATA 6F,6E
0113E:  DATA 6E,65
01140:  DATA 63,74
01142:  DATA 20,65
01144:  DATA 72,72
01146:  DATA 6F,72
01148:  DATA 21,0D
0114A:  DATA 0A,00
0114C:  DATA 09,5B
0114E:  DATA 4D,49
01150:  DATA 53,20
01152:  DATA 46,4D
01154:  DATA 5D,69
01156:  DATA 73,20
01158:  DATA 63,6F
0115A:  DATA 6E,6E
0115C:  DATA 65,63
0115E:  DATA 74,65
01160:  DATA 64,0D
01162:  DATA 0A,00
01164:  DATA 09,7C
01166:  DATA 20,53
01168:  DATA 4D,46
0116A:  DATA 20,20
0116C:  DATA 7C,20
0116E:  DATA 50,49
01170:  DATA 43,4C
01172:  DATA 4F,47
01174:  DATA 20,7C
01176:  DATA 20,55
01178:  DATA 73,65
0117A:  DATA 20,43
0117C:  DATA 6F,75
0117E:  DATA 6E,74
01180:  DATA 65,72
01182:  DATA 20,20
01184:  DATA 20,20
01186:  DATA 20,20
01188:  DATA 3A,20
0118A:  DATA 30,78
0118C:  DATA 25,30
0118E:  DATA 38,4C
01190:  DATA 58,0D
01192:  DATA 0A,00
01194:  DATA 09,7C
01196:  DATA 20,53
01198:  DATA 4D,46
0119A:  DATA 20,20
0119C:  DATA 7C,20
0119E:  DATA 50,49
011A0:  DATA 43,4C
011A2:  DATA 4F,47
011A4:  DATA 20,7C
011A6:  DATA 20,4C
011A8:  DATA 6F,6F
011AA:  DATA 70,20
011AC:  DATA 43,6F
011AE:  DATA 75,6E
011B0:  DATA 74,65
011B2:  DATA 72,20
011B4:  DATA 20,20
011B6:  DATA 20,20
011B8:  DATA 3A,20
011BA:  DATA 30,78
011BC:  DATA 25,30
011BE:  DATA 32,58
011C0:  DATA 0D,0A
011C2:  DATA 00,00
011C4:  DATA 09,7C
011C6:  DATA 20,53
011C8:  DATA 4D,46
011CA:  DATA 20,20
011CC:  DATA 7C,20
011CE:  DATA 4D,45
011D0:  DATA 41,53
011D2:  DATA 20,20
011D4:  DATA 20,7C
011D6:  DATA 20,55
011D8:  DATA 73,65
011DA:  DATA 20,43
011DC:  DATA 6F,75
011DE:  DATA 6E,74
011E0:  DATA 65,72
011E2:  DATA 20,20
011E4:  DATA 20,20
011E6:  DATA 20,20
011E8:  DATA 3A,20
011EA:  DATA 30,78
011EC:  DATA 25,30
011EE:  DATA 38,4C
011F0:  DATA 58,0D
011F2:  DATA 0A,00
011F4:  DATA 09,7C
011F6:  DATA 20,53
011F8:  DATA 4D,46
011FA:  DATA 20,20
011FC:  DATA 7C,20
011FE:  DATA 4D,45
01200:  DATA 41,53
01202:  DATA 20,20
01204:  DATA 20,7C
01206:  DATA 20,4C
01208:  DATA 6F,6F
0120A:  DATA 70,20
0120C:  DATA 43,6F
0120E:  DATA 75,6E
01210:  DATA 74,65
01212:  DATA 72,20
01214:  DATA 20,20
01216:  DATA 20,20
01218:  DATA 3A,20
0121A:  DATA 30,78
0121C:  DATA 25,30
0121E:  DATA 32,58
01220:  DATA 0D,0A
01222:  DATA 00,00
01224:  DATA 09,7C
01226:  DATA 20,4D
01228:  DATA 49,53
0122A:  DATA 46,20
0122C:  DATA 7C,20
0122E:  DATA 50,49
01230:  DATA 43,4C
01232:  DATA 4F,47
01234:  DATA 20,7C
01236:  DATA 20,55
01238:  DATA 73,65
0123A:  DATA 20,43
0123C:  DATA 6F,75
0123E:  DATA 6E,74
01240:  DATA 65,72
01242:  DATA 20,20
01244:  DATA 20,20
01246:  DATA 20,20
01248:  DATA 3A,20
0124A:  DATA 30,78
0124C:  DATA 25,30
0124E:  DATA 38,4C
01250:  DATA 58,0D
01252:  DATA 0A,00
01254:  DATA 09,7C
01256:  DATA 20,4D
01258:  DATA 49,53
0125A:  DATA 46,20
0125C:  DATA 7C,20
0125E:  DATA 50,49
01260:  DATA 43,4C
01262:  DATA 4F,47
01264:  DATA 20,7C
01266:  DATA 20,55
01268:  DATA 6E,63
0126A:  DATA 6F,70
0126C:  DATA 79,65
0126E:  DATA 64,20
01270:  DATA 43,6F
01272:  DATA 75,6E
01274:  DATA 74,65
01276:  DATA 72,20
01278:  DATA 3A,20
0127A:  DATA 30,78
0127C:  DATA 25,30
0127E:  DATA 38,4C
01280:  DATA 58,0D
01282:  DATA 0A,00
01284:  DATA 09,7C
01286:  DATA 20,4D
01288:  DATA 49,53
0128A:  DATA 46,20
0128C:  DATA 7C,20
0128E:  DATA 50,49
01290:  DATA 43,4C
01292:  DATA 4F,47
01294:  DATA 20,7C
01296:  DATA 20,4C
01298:  DATA 6F,6F
0129A:  DATA 70,20
0129C:  DATA 43,6F
0129E:  DATA 75,6E
012A0:  DATA 74,65
012A2:  DATA 72,20
012A4:  DATA 20,20
012A6:  DATA 20,20
012A8:  DATA 3A,20
012AA:  DATA 30,78
012AC:  DATA 25,30
012AE:  DATA 32,58
012B0:  DATA 0D,0A
012B2:  DATA 00,00
012B4:  DATA 09,7C
012B6:  DATA 20,4D
012B8:  DATA 49,53
012BA:  DATA 46,20
012BC:  DATA 7C,20
012BE:  DATA 50,49
012C0:  DATA 43,4C
012C2:  DATA 4F,47
012C4:  DATA 20,7C
012C6:  DATA 20,57
012C8:  DATA 72,69
012CA:  DATA 74,65
012CC:  DATA 20,43
012CE:  DATA 6F,75
012D0:  DATA 6E,74
012D2:  DATA 65,72
012D4:  DATA 20,20
012D6:  DATA 20,20
012D8:  DATA 3A,20
012DA:  DATA 30,78
012DC:  DATA 25,30
012DE:  DATA 32,58
012E0:  DATA 0D,0A
012E2:  DATA 00,00
012E4:  DATA 09,7C
012E6:  DATA 20,4D
012E8:  DATA 49,53
012EA:  DATA 46,20
012EC:  DATA 7C,20
012EE:  DATA 4D,45
012F0:  DATA 41,53
012F2:  DATA 20,20
012F4:  DATA 20,7C
012F6:  DATA 20,55
012F8:  DATA 73,65
012FA:  DATA 20,43
012FC:  DATA 6F,75
012FE:  DATA 6E,74
01300:  DATA 65,72
01302:  DATA 20,20
01304:  DATA 20,20
01306:  DATA 20,20
01308:  DATA 3A,20
0130A:  DATA 30,78
0130C:  DATA 25,30
0130E:  DATA 38,4C
01310:  DATA 58,0D
01312:  DATA 0A,00
01314:  DATA 09,7C
01316:  DATA 20,4D
01318:  DATA 49,53
0131A:  DATA 46,20
0131C:  DATA 7C,20
0131E:  DATA 4D,45
01320:  DATA 41,53
01322:  DATA 20,20
01324:  DATA 20,7C
01326:  DATA 20,55
01328:  DATA 6E,63
0132A:  DATA 6F,70
0132C:  DATA 79,65
0132E:  DATA 64,20
01330:  DATA 43,6F
01332:  DATA 75,6E
01334:  DATA 74,65
01336:  DATA 72,20
01338:  DATA 3A,20
0133A:  DATA 30,78
0133C:  DATA 25,30
0133E:  DATA 38,4C
01340:  DATA 58,0D
01342:  DATA 0A,00
01344:  DATA 09,7C
01346:  DATA 20,4D
01348:  DATA 49,53
0134A:  DATA 46,20
0134C:  DATA 7C,20
0134E:  DATA 4D,45
01350:  DATA 41,53
01352:  DATA 20,20
01354:  DATA 20,7C
01356:  DATA 20,4C
01358:  DATA 6F,6F
0135A:  DATA 70,20
0135C:  DATA 43,6F
0135E:  DATA 75,6E
01360:  DATA 74,65
01362:  DATA 72,20
01364:  DATA 20,20
01366:  DATA 20,20
01368:  DATA 3A,20
0136A:  DATA 30,78
0136C:  DATA 25,30
0136E:  DATA 32,58
01370:  DATA 0D,0A
01372:  DATA 00,00
01374:  DATA 09,43
01376:  DATA 6F,6D
01378:  DATA 70,6C
0137A:  DATA 65,74
0137C:  DATA 65,0D
0137E:  DATA 0A,00
01380:  DATA 4D,69
01382:  DATA 73,73
01384:  DATA 69,6F
01386:  DATA 6E,20
01388:  DATA 46,6C
0138A:  DATA 61,73
0138C:  DATA 68,20
0138E:  DATA 69,73
01390:  DATA 20,6E
01392:  DATA 6F,74
01394:  DATA 20,63
01396:  DATA 6F,6E
01398:  DATA 6E,65
0139A:  DATA 63,74
0139C:  DATA 65,64
0139E:  DATA 0D,0A
013A0:  DATA 00,00
013A2:  DATA 4D,69
013A4:  DATA 73,73
013A6:  DATA 69,6F
013A8:  DATA 6E,20
013AA:  DATA 46,6C
013AC:  DATA 61,73
013AE:  DATA 68,20
013B0:  DATA 69,73
013B2:  DATA 20,6E
013B4:  DATA 6F,74
013B6:  DATA 20,63
013B8:  DATA 6F,6E
013BA:  DATA 6E,65
013BC:  DATA 63,74
013BE:  DATA 65,64
013C0:  DATA 0D,0A
013C2:  DATA 00,00
013C4:  DATA 0D,0A
013C6:  DATA 5F,5F
013C8:  DATA 5F,5F
013CA:  DATA 5F,5F
013CC:  DATA 5F,5F
013CE:  DATA 5F,5F
013D0:  DATA 5F,5F
013D2:  DATA 5F,5F
013D4:  DATA 5F,5F
013D6:  DATA 5F,5F
013D8:  DATA 5F,5F
013DA:  DATA 5F,5F
013DC:  DATA 5F,5F
013DE:  DATA 5F,5F
013E0:  DATA 5F,5F
013E2:  DATA 5F,5F
013E4:  DATA 0D,0A
013E6:  DATA 5F,5F
013E8:  DATA 5F,5F
013EA:  DATA 5F,53
013EC:  DATA 74,61
013EE:  DATA 72,74
013F0:  DATA 20,65
013F2:  DATA 78,65
013F4:  DATA 63,75
013F6:  DATA 74,65
013F8:  DATA 5F,6D
013FA:  DATA 69,73
013FC:  DATA 73,69
013FE:  DATA 6F,6E
01400:  DATA 5F,5F
01402:  DATA 5F,5F
01404:  DATA 5F,0D
01406:  DATA 0A,0D
01408:  DATA 0A,00
0140A:  DATA 43,6F
0140C:  DATA 6D,6D
0140E:  DATA 61,6E
01410:  DATA 64,20
01412:  DATA 49,44
01414:  DATA 3A,20
01416:  DATA 25,58
01418:  DATA 0D,0A
0141A:  DATA 0D,0A
0141C:  DATA 00,00
0141E:  DATA 09,09
01420:  DATA 2D,3E
01422:  DATA 20,49
01424:  DATA 6E,76
01426:  DATA 61,6C
01428:  DATA 69,64
0142A:  DATA 20,43
0142C:  DATA 4D,44
0142E:  DATA 20,49
01430:  DATA 44,21
01432:  DATA 0D,0A
01434:  DATA 00,00
01436:  DATA 0D,0A
01438:  DATA 5F,5F
0143A:  DATA 5F,5F
0143C:  DATA 5F,5F
0143E:  DATA 45,6E
01440:  DATA 64,20
01442:  DATA 65,78
01444:  DATA 65,63
01446:  DATA 75,74
01448:  DATA 65,5F
0144A:  DATA 6D,69
0144C:  DATA 73,73
0144E:  DATA 69,6F
01450:  DATA 6E,5F
01452:  DATA 5F,5F
01454:  DATA 5F,5F
01456:  DATA 5F,0D
01458:  DATA 0A,5F
0145A:  DATA 5F,5F
0145C:  DATA 5F,5F
0145E:  DATA 5F,5F
01460:  DATA 5F,5F
01462:  DATA 5F,5F
01464:  DATA 5F,5F
01466:  DATA 5F,5F
01468:  DATA 5F,5F
0146A:  DATA 5F,5F
0146C:  DATA 5F,5F
0146E:  DATA 5F,5F
01470:  DATA 5F,5F
01472:  DATA 5F,5F
01474:  DATA 5F,5F
01476:  DATA 5F,5F
01478:  DATA 0D,0A
0147A:  DATA 00,00
0147C:  DATA 53,74
0147E:  DATA 61,72
01480:  DATA 74,20
01482:  DATA 65,78
01484:  DATA 65,63
01486:  DATA 75,74
01488:  DATA 65,5F
0148A:  DATA 63,6F
0148C:  DATA 6D,6D
0148E:  DATA 61,6E
01490:  DATA 64,0D
01492:  DATA 0A,00
01494:  DATA 09,2D
01496:  DATA 3E,20
01498:  DATA 55,70
0149A:  DATA 6C,69
0149C:  DATA 6E,6B
0149E:  DATA 20,63
014A0:  DATA 6F,6D
014A2:  DATA 6D,61
014A4:  DATA 6E,64
014A6:  DATA 0D,0A
014A8:  DATA 00,00
014AA:  DATA 09,20
014AC:  DATA 20,20
014AE:  DATA 54,72
014B0:  DATA 61,6E
014B2:  DATA 73,6D
014B4:  DATA 69,74
014B6:  DATA 20,41
014B8:  DATA 63,6B
014BA:  DATA 6E,6F
014BC:  DATA 6C,65
014BE:  DATA 67,64
014C0:  DATA 65,0D
014C2:  DATA 0A,00
014C4:  DATA 09,2D
014C6:  DATA 3E,20
014C8:  DATA 53,74
014CA:  DATA 61,74
014CC:  DATA 75,73
014CE:  DATA 20,63
014D0:  DATA 68,65
014D2:  DATA 63,6B
014D4:  DATA 0D,0A
014D6:  DATA 00,00
014D8:  DATA 09,20
014DA:  DATA 20,20
014DC:  DATA 54,72
014DE:  DATA 61,6E
014E0:  DATA 73,6D
014E2:  DATA 69,74
014E4:  DATA 20,4D
014E6:  DATA 49,53
014E8:  DATA 20,4D
014EA:  DATA 43,55
014EC:  DATA 20,53
014EE:  DATA 74,61
014F0:  DATA 74,75
014F2:  DATA 73,0D
014F4:  DATA 0A,00
014F6:  DATA 66,69
014F8:  DATA 6E,69
014FA:  DATA 73,68
014FC:  DATA 65,64
014FE:  DATA 20,69
01500:  DATA 6E,20
01502:  DATA 73,74
01504:  DATA 61,74
01506:  DATA 75,73
01508:  DATA 5F,63
0150A:  DATA 68,65
0150C:  DATA 63,6B
0150E:  DATA 0D,0A
01510:  DATA 00,00
01512:  DATA 09,2D
01514:  DATA 3E,20
01516:  DATA 53,4D
01518:  DATA 46,20
0151A:  DATA 61,76
0151C:  DATA 61,69
0151E:  DATA 6C,61
01520:  DATA 62,6C
01522:  DATA 65,20
01524:  DATA 63,68
01526:  DATA 65,63
01528:  DATA 6B,0D
0152A:  DATA 0A,00
0152C:  DATA 09,20
0152E:  DATA 20,20
01530:  DATA 54,72
01532:  DATA 61,6E
01534:  DATA 73,6D
01536:  DATA 69,74
01538:  DATA 20,41
0153A:  DATA 63,6B
0153C:  DATA 6E,6F
0153E:  DATA 77,6C
01540:  DATA 65,64
01542:  DATA 67,65
01544:  DATA 6D,65
01546:  DATA 6E,74
01548:  DATA 0D,0A
0154A:  DATA 00,00
0154C:  DATA 09,09
0154E:  DATA 2D,3E
01550:  DATA 20,61
01552:  DATA 6C,6C
01554:  DATA 6F,77
01556:  DATA 65,64
01558:  DATA 0D,0A
0155A:  DATA 00,00
0155C:  DATA 09,09
0155E:  DATA 2D,3E
01560:  DATA 20,50
01562:  DATA 72,6F
01564:  DATA 63,65
01566:  DATA 73,73
01568:  DATA 69,6E
0156A:  DATA 67,20
0156C:  DATA 53,4D
0156E:  DATA 46,20
01570:  DATA 64,61
01572:  DATA 74,61
01574:  DATA 20,5B
01576:  DATA 25,64
01578:  DATA 5D,0D
0157A:  DATA 0A,00
0157C:  DATA 66,75
0157E:  DATA 6E,63
01580:  DATA 20,74
01582:  DATA 79,70
01584:  DATA 65,20
01586:  DATA 3A,20
01588:  DATA 30,78
0158A:  DATA 25,30
0158C:  DATA 32,58
0158E:  DATA 00,00
01590:  DATA 09,09
01592:  DATA 2D,3E
01594:  DATA 20,45
01596:  DATA 78,65
01598:  DATA 63,75
0159A:  DATA 74,69
0159C:  DATA 6E,67
0159E:  DATA 20,53
015A0:  DATA 4D,46
015A2:  DATA 20,57
015A4:  DATA 52,49
015A6:  DATA 54,45
015A8:  DATA 20,28
015AA:  DATA 73,69
015AC:  DATA 6E,67
015AE:  DATA 6C,65
015B0:  DATA 29,0D
015B2:  DATA 0A,00
015B4:  DATA 09,09
015B6:  DATA 2D,3E
015B8:  DATA 20,45
015BA:  DATA 78,65
015BC:  DATA 63,75
015BE:  DATA 74,69
015C0:  DATA 6E,67
015C2:  DATA 20,53
015C4:  DATA 4D,46
015C6:  DATA 20,52
015C8:  DATA 45,41
015CA:  DATA 44,20
015CC:  DATA 28,73
015CE:  DATA 69,6E
015D0:  DATA 67,6C
015D2:  DATA 65,29
015D4:  DATA 0D,0A
015D6:  DATA 00,00
015D8:  DATA 09,09
015DA:  DATA 2D,3E
015DC:  DATA 20,45
015DE:  DATA 78,65
015E0:  DATA 63,75
015E2:  DATA 74,69
015E4:  DATA 6E,67
015E6:  DATA 20,53
015E8:  DATA 4D,46
015EA:  DATA 20,45
015EC:  DATA 52,41
015EE:  DATA 53,45
015F0:  DATA 20,28
015F2:  DATA 73,69
015F4:  DATA 6E,67
015F6:  DATA 6C,65
015F8:  DATA 29,0D
015FA:  DATA 0A,00
015FC:  DATA 09,09
015FE:  DATA 2D,3E
01600:  DATA 20,55
01602:  DATA 6E,6B
01604:  DATA 6E,6F
01606:  DATA 77,6E
01608:  DATA 20,53
0160A:  DATA 4D,46
0160C:  DATA 20,66
0160E:  DATA 75,6E
01610:  DATA 63,74
01612:  DATA 69,6F
01614:  DATA 6E,20
01616:  DATA 74,79
01618:  DATA 70,65
0161A:  DATA 0D,0A
0161C:  DATA 00,00
0161E:  DATA 09,09
01620:  DATA 2D,3E
01622:  DATA 20,45
01624:  DATA 72,72
01626:  DATA 6F,72
01628:  DATA 3A,20
0162A:  DATA 46,61
0162C:  DATA 69,6C
0162E:  DATA 65,64
01630:  DATA 20,74
01632:  DATA 6F,20
01634:  DATA 64,65
01636:  DATA 71,75
01638:  DATA 65,75
0163A:  DATA 65,20
0163C:  DATA 53,4D
0163E:  DATA 46,20
01640:  DATA 64,61
01642:  DATA 74,61
01644:  DATA 0D,0A
01646:  DATA 00,00
01648:  DATA 09,09
0164A:  DATA 2D,3E
0164C:  DATA 20,43
0164E:  DATA 6F,6D
01650:  DATA 70,6C
01652:  DATA 65,74
01654:  DATA 65,64
01656:  DATA 20,70
01658:  DATA 72,6F
0165A:  DATA 63,65
0165C:  DATA 73,73
0165E:  DATA 69,6E
01660:  DATA 67,20
01662:  DATA 25,64
01664:  DATA 20,53
01666:  DATA 4D,46
01668:  DATA 20,6F
0166A:  DATA 70,65
0166C:  DATA 72,61
0166E:  DATA 74,69
01670:  DATA 6F,6E
01672:  DATA 73,0D
01674:  DATA 0A,00
01676:  DATA 09,09
01678:  DATA 2D,3E
0167A:  DATA 20,64
0167C:  DATA 65,6E
0167E:  DATA 69,65
01680:  DATA 64,0D
01682:  DATA 0A,00
01684:  DATA 53,74
01686:  DATA 61,72
01688:  DATA 74,20
0168A:  DATA 4D,4F
0168C:  DATA 44,45
0168E:  DATA 20,44
01690:  DATA 55,4D
01692:  DATA 4D,59
01694:  DATA 0D,0A
01696:  DATA 00,00
01698:  DATA 09,4D
0169A:  DATA 4F,44
0169C:  DATA 45,20
0169E:  DATA 20,20
016A0:  DATA 20,20
016A2:  DATA 3A,20
016A4:  DATA 25,30
016A6:  DATA 32,58
016A8:  DATA 0D,0A
016AA:  DATA 00,00
016AC:  DATA 09,50
016AE:  DATA 61,72
016B0:  DATA 61,6D
016B2:  DATA 31,20
016B4:  DATA 20,20
016B6:  DATA 3A,20
016B8:  DATA 30,78
016BA:  DATA 25,30
016BC:  DATA 38,4C
016BE:  DATA 58,0D
016C0:  DATA 0A,00
016C2:  DATA 09,50
016C4:  DATA 61,72
016C6:  DATA 61,6D
016C8:  DATA 32,20
016CA:  DATA 20,20
016CC:  DATA 3A,20
016CE:  DATA 30,78
016D0:  DATA 25,30
016D2:  DATA 34,4C
016D4:  DATA 58,0D
016D6:  DATA 0A,00
016D8:  DATA 45,6E
016DA:  DATA 64,20
016DC:  DATA 4D,4F
016DE:  DATA 44,45
016E0:  DATA 20,44
016E2:  DATA 55,4D
016E4:  DATA 4D,59
016E6:  DATA 0D,0A
016E8:  DATA 00,00
016EA:  DATA 53,74
016EC:  DATA 61,72
016EE:  DATA 74,20
016F0:  DATA 4D,4F
016F2:  DATA 44,45
016F4:  DATA 20,54
016F6:  DATA 45,53
016F8:  DATA 54,20
016FA:  DATA 49,56
016FC:  DATA 0D,0A
016FE:  DATA 00,00
01700:  DATA 09,53
01702:  DATA 77,65
01704:  DATA 65,70
01706:  DATA 20,73
01708:  DATA 74,65
0170A:  DATA 70,20
0170C:  DATA 3A,20
0170E:  DATA 25,75
01710:  DATA 0D,0A
01712:  DATA 00,00
01714:  DATA 45,6E
01716:  DATA 64,20
01718:  DATA 4D,4F
0171A:  DATA 44,45
0171C:  DATA 20,54
0171E:  DATA 45,53
01720:  DATA 54,20
01722:  DATA 49,56
01724:  DATA 0D,0A
01726:  DATA 00,00
01728:  DATA 53,74
0172A:  DATA 61,72
0172C:  DATA 74,20
0172E:  DATA 4D,4F
01730:  DATA 44,45
01732:  DATA 20,4D
01734:  DATA 45,41
01736:  DATA 53,20
01738:  DATA 49,56
0173A:  DATA 0D,0A
0173C:  DATA 00,00
0173E:  DATA 09,49
01740:  DATA 44,3A
01742:  DATA 20,25
01744:  DATA 30,32
01746:  DATA 58,0D
01748:  DATA 0A,00
0174A:  DATA 09,53
0174C:  DATA 6C,65
0174E:  DATA 65,70
01750:  DATA 20,54
01752:  DATA 69,6D
01754:  DATA 65,3A
01756:  DATA 20,25
01758:  DATA 30,34
0175A:  DATA 4C,58
0175C:  DATA 20,6D
0175E:  DATA 73,0D
01760:  DATA 0A,00
01762:  DATA 09,43
01764:  DATA 75,72
01766:  DATA 72,65
01768:  DATA 6E,74
0176A:  DATA 20,54
0176C:  DATA 68,72
0176E:  DATA 65,73
01770:  DATA 68,6F
01772:  DATA 6C,64
01774:  DATA 3A,20
01776:  DATA 25,30
01778:  DATA 34,4C
0177A:  DATA 58,20
0177C:  DATA 6D,41
0177E:  DATA 0D,0A
01780:  DATA 00,00
01782:  DATA 09,50
01784:  DATA 44,20
01786:  DATA 54,68
01788:  DATA 72,65
0178A:  DATA 73,68
0178C:  DATA 6F,6C
0178E:  DATA 64,3A
01790:  DATA 20,25
01792:  DATA 30,34
01794:  DATA 4C,58
01796:  DATA 20,6D
01798:  DATA 41,0D
0179A:  DATA 0A,00
0179C:  DATA 09,43
0179E:  DATA 75,72
017A0:  DATA 72,65
017A2:  DATA 6E,74
017A4:  DATA 20,4C
017A6:  DATA 69,6D
017A8:  DATA 69,74
017AA:  DATA 3A,20
017AC:  DATA 25,30
017AE:  DATA 34,4C
017B0:  DATA 58,20
017B2:  DATA 6D,41
017B4:  DATA 0D,0A
017B6:  DATA 00,00
017B8:  DATA 09,4D
017BA:  DATA 65,61
017BC:  DATA 73,75
017BE:  DATA 72,65
017C0:  DATA 6D,65
017C2:  DATA 6E,74
017C4:  DATA 20,54
017C6:  DATA 69,6D
017C8:  DATA 65,3A
017CA:  DATA 20,25
017CC:  DATA 30,34
017CE:  DATA 4C,58
017D0:  DATA 20,73
017D2:  DATA 0D,0A
017D4:  DATA 00,00
017D6:  DATA 09,49
017D8:  DATA 73,20
017DA:  DATA 46,69
017DC:  DATA 6E,69
017DE:  DATA 73,68
017E0:  DATA 65,64
017E2:  DATA 3A,20
017E4:  DATA 25,75
017E6:  DATA 0D,0A
017E8:  DATA 00,00
017EA:  DATA 45,6E
017EC:  DATA 64,20
017EE:  DATA 4D,4F
017F0:  DATA 44,45
017F2:  DATA 20,4D
017F4:  DATA 45,41
017F6:  DATA 53,20
017F8:  DATA 49,56
017FA:  DATA 0D,0A
017FC:  DATA 00,00
017FE:  DATA 53,74
01800:  DATA 61,72
01802:  DATA 74,20
01804:  DATA 46,6C
01806:  DATA 61,73
01808:  DATA 68,20
0180A:  DATA 45,72
0180C:  DATA 61,73
0180E:  DATA 65,20
01810:  DATA 41,6C
01812:  DATA 6C,0D
01814:  DATA 0A,00
01816:  DATA 45,6E
01818:  DATA 64,20
0181A:  DATA 46,6C
0181C:  DATA 61,73
0181E:  DATA 68,20
01820:  DATA 45,72
01822:  DATA 61,73
01824:  DATA 65,20
01826:  DATA 41,6C
01828:  DATA 6C,0D
0182A:  DATA 0A,00
0182C:  DATA 53,74
0182E:  DATA 61,72
01830:  DATA 74,20
01832:  DATA 46,6C
01834:  DATA 61,73
01836:  DATA 68,20
01838:  DATA 45,72
0183A:  DATA 61,73
0183C:  DATA 65,20
0183E:  DATA 31,20
01840:  DATA 53,65
01842:  DATA 63,74
01844:  DATA 6F,72
01846:  DATA 0D,0A
01848:  DATA 00,00
0184A:  DATA 09,53
0184C:  DATA 65,63
0184E:  DATA 74,6F
01850:  DATA 72,20
01852:  DATA 41,64
01854:  DATA 64,72
01856:  DATA 65,73
01858:  DATA 73,3A
0185A:  DATA 20,30
0185C:  DATA 78,25
0185E:  DATA 30,38
01860:  DATA 4C,58
01862:  DATA 0D,0A
01864:  DATA 00,00
01866:  DATA 45,6E
01868:  DATA 64,20
0186A:  DATA 46,6C
0186C:  DATA 61,73
0186E:  DATA 68,20
01870:  DATA 45,72
01872:  DATA 61,73
01874:  DATA 65,20
01876:  DATA 31,20
01878:  DATA 53,65
0187A:  DATA 63,74
0187C:  DATA 6F,72
0187E:  DATA 0D,0A
01880:  DATA 00,00
01882:  DATA 53,74
01884:  DATA 61,72
01886:  DATA 74,20
01888:  DATA 46,6C
0188A:  DATA 61,73
0188C:  DATA 68,20
0188E:  DATA 43,6F
01890:  DATA 70,79
01892:  DATA 20,31
01894:  DATA 20,53
01896:  DATA 65,63
01898:  DATA 74,6F
0189A:  DATA 72,0D
0189C:  DATA 0A,00
0189E:  DATA 09,53
018A0:  DATA 75,62
018A2:  DATA 73,65
018A4:  DATA 63,74
018A6:  DATA 6F,72
018A8:  DATA 20,41
018AA:  DATA 64,64
018AC:  DATA 72,65
018AE:  DATA 73,73
018B0:  DATA 3A,20
018B2:  DATA 30,78
018B4:  DATA 25,30
018B6:  DATA 38,4C
018B8:  DATA 58,0D
018BA:  DATA 0A,00
018BC:  DATA 45,6E
018BE:  DATA 64,20
018C0:  DATA 46,6C
018C2:  DATA 61,73
018C4:  DATA 68,20
018C6:  DATA 43,6F
018C8:  DATA 70,79
018CA:  DATA 20,31
018CC:  DATA 20,53
018CE:  DATA 65,63
018D0:  DATA 74,6F
018D2:  DATA 72,0D
018D4:  DATA 0A,00
018D6:  DATA 53,74
018D8:  DATA 61,72
018DA:  DATA 74,20
018DC:  DATA 46,6C
018DE:  DATA 61,73
018E0:  DATA 68,20
018E2:  DATA 45,72
018E4:  DATA 61,73
018E6:  DATA 65,20
018E8:  DATA 36,34
018EA:  DATA 6B,42
018EC:  DATA 79,74
018EE:  DATA 65,20
018F0:  DATA 53,75
018F2:  DATA 62,73
018F4:  DATA 65,63
018F6:  DATA 74,6F
018F8:  DATA 72,0D
018FA:  DATA 0A,00
018FC:  DATA 09,53
018FE:  DATA 75,62
01900:  DATA 73,65
01902:  DATA 63,74
01904:  DATA 6F,72
01906:  DATA 20,41
01908:  DATA 64,64
0190A:  DATA 72,65
0190C:  DATA 73,73
0190E:  DATA 3A,20
01910:  DATA 30,78
01912:  DATA 25,30
01914:  DATA 38,4C
01916:  DATA 58,0D
01918:  DATA 0A,00
0191A:  DATA 45,6E
0191C:  DATA 64,20
0191E:  DATA 46,6C
01920:  DATA 61,73
01922:  DATA 68,20
01924:  DATA 45,72
01926:  DATA 61,73
01928:  DATA 65,20
0192A:  DATA 36,34
0192C:  DATA 6B,42
0192E:  DATA 79,74
01930:  DATA 65,20
01932:  DATA 53,75
01934:  DATA 62,73
01936:  DATA 65,63
01938:  DATA 74,6F
0193A:  DATA 72,0D
0193C:  DATA 0A,00
0193E:  DATA 53,74
01940:  DATA 61,72
01942:  DATA 74,20
01944:  DATA 46,6C
01946:  DATA 61,73
01948:  DATA 68,20
0194A:  DATA 57,72
0194C:  DATA 69,74
0194E:  DATA 65,20
01950:  DATA 44,65
01952:  DATA 6D,6F
01954:  DATA 0D,0A
01956:  DATA 00,00
01958:  DATA 09,4D
0195A:  DATA 4F,44
0195C:  DATA 45,20
0195E:  DATA 20,20
01960:  DATA 20,20
01962:  DATA 3A,20
01964:  DATA 25,30
01966:  DATA 32,58
01968:  DATA 0D,0A
0196A:  DATA 00,00
0196C:  DATA 09,41
0196E:  DATA 64,64
01970:  DATA 72,65
01972:  DATA 73,73
01974:  DATA 20,20
01976:  DATA 3A,20
01978:  DATA 30,78
0197A:  DATA 25,30
0197C:  DATA 38,4C
0197E:  DATA 58,0D
01980:  DATA 0A,00
01982:  DATA 09,50
01984:  DATA 61,63
01986:  DATA 6B,65
01988:  DATA 74,4E
0198A:  DATA 75,6D
0198C:  DATA 3A,20
0198E:  DATA 30,78
01990:  DATA 25,30
01992:  DATA 34,4C
01994:  DATA 58,0D
01996:  DATA 0A,00
01998:  DATA 57,72
0199A:  DATA 69,74
0199C:  DATA 65,20
0199E:  DATA 44,61
019A0:  DATA 74,61
019A2:  DATA 0D,0A
019A4:  DATA 00,00
019A6:  DATA 45,6E
019A8:  DATA 64,20
019AA:  DATA 46,6C
019AC:  DATA 61,73
019AE:  DATA 68,20
019B0:  DATA 57,72
019B2:  DATA 69,74
019B4:  DATA 65,20
019B6:  DATA 44,65
019B8:  DATA 6D,6F
019BA:  DATA 0D,0A
019BC:  DATA 00,00
019BE:  DATA 53,74
019C0:  DATA 61,72
019C2:  DATA 74,20
019C4:  DATA 46,6C
019C6:  DATA 61,73
019C8:  DATA 68,20
019CA:  DATA 57,72
019CC:  DATA 69,74
019CE:  DATA 65,20
019D0:  DATA 34,6B
019D2:  DATA 42,79
019D4:  DATA 74,65
019D6:  DATA 20,53
019D8:  DATA 75,62
019DA:  DATA 73,65
019DC:  DATA 63,74
019DE:  DATA 6F,72
019E0:  DATA 0D,0A
019E2:  DATA 00,00
019E4:  DATA 45,6E
019E6:  DATA 64,20
019E8:  DATA 46,6C
019EA:  DATA 61,73
019EC:  DATA 68,20
019EE:  DATA 57,72
019F0:  DATA 69,74
019F2:  DATA 65,20
019F4:  DATA 34,6B
019F6:  DATA 42,79
019F8:  DATA 74,65
019FA:  DATA 20,53
019FC:  DATA 75,62
019FE:  DATA 73,65
01A00:  DATA 63,74
01A02:  DATA 6F,72
01A04:  DATA 0D,0A
01A06:  DATA 00,00
01A08:  DATA 53,74
01A0A:  DATA 61,72
01A0C:  DATA 74,20
01A0E:  DATA 46,6C
01A10:  DATA 61,73
01A12:  DATA 68,20
01A14:  DATA 52,65
01A16:  DATA 61,64
01A18:  DATA 0D,0A
01A1A:  DATA 00,00
01A1C:  DATA 09,4D
01A1E:  DATA 4F,44
01A20:  DATA 45,20
01A22:  DATA 20,20
01A24:  DATA 20,20
01A26:  DATA 3A,20
01A28:  DATA 25,30
01A2A:  DATA 32,58
01A2C:  DATA 0D,0A
01A2E:  DATA 00,00
01A30:  DATA 09,41
01A32:  DATA 64,64
01A34:  DATA 72,65
01A36:  DATA 73,73
01A38:  DATA 20,20
01A3A:  DATA 3A,20
01A3C:  DATA 30,78
01A3E:  DATA 25,30
01A40:  DATA 38,4C
01A42:  DATA 58,0D
01A44:  DATA 0A,00
01A46:  DATA 09,50
01A48:  DATA 61,63
01A4A:  DATA 6B,65
01A4C:  DATA 74,4E
01A4E:  DATA 75,6D
01A50:  DATA 3A,20
01A52:  DATA 30,78
01A54:  DATA 25,30
01A56:  DATA 34,4C
01A58:  DATA 58,0D
01A5A:  DATA 0A,00
01A5C:  DATA 52,45
01A5E:  DATA 41,44
01A60:  DATA 20,44
01A62:  DATA 41,54
01A64:  DATA 41,0D
01A66:  DATA 0A,00
01A68:  DATA 4D,69
01A6A:  DATA 73,73
01A6C:  DATA 69,6F
01A6E:  DATA 6E,20
01A70:  DATA 46,6C
01A72:  DATA 61,73
01A74:  DATA 68,20
01A76:  DATA 69,73
01A78:  DATA 20,6E
01A7A:  DATA 6F,74
01A7C:  DATA 20,63
01A7E:  DATA 6F,6E
01A80:  DATA 6E,65
01A82:  DATA 63,74
01A84:  DATA 65,64
01A86:  DATA 0D,0A
01A88:  DATA 00,00
01A8A:  DATA 45,6E
01A8C:  DATA 64,20
01A8E:  DATA 46,6C
01A90:  DATA 61,73
01A92:  DATA 68,20
01A94:  DATA 52,65
01A96:  DATA 61,64
01A98:  DATA 0D,0A
01A9A:  DATA 00,00
01A9C:  DATA 53,74
01A9E:  DATA 61,72
01AA0:  DATA 74,20
01AA2:  DATA 46,6C
01AA4:  DATA 61,73
01AA6:  DATA 68,20
01AA8:  DATA 52,65
01AAA:  DATA 61,64
01AAC:  DATA 20,41
01AAE:  DATA 64,64
01AB0:  DATA 72,65
01AB2:  DATA 73,73
01AB4:  DATA 0D,0A
01AB6:  DATA 00,00
01AB8:  DATA 52,65
01ABA:  DATA 61,64
01ABC:  DATA 20,44
01ABE:  DATA 61,74
01AC0:  DATA 61,3A
01AC2:  DATA 20,25
01AC4:  DATA 30,32
01AC6:  DATA 58,20
01AC8:  DATA 25,30
01ACA:  DATA 32,58
01ACC:  DATA 20,25
01ACE:  DATA 30,32
01AD0:  DATA 58,20
01AD2:  DATA 25,30
01AD4:  DATA 32,58
01AD6:  DATA 0D,0A
01AD8:  DATA 00,00
01ADA:  DATA 45,6E
01ADC:  DATA 64,20
01ADE:  DATA 46,6C
01AE0:  DATA 61,73
01AE2:  DATA 68,20
01AE4:  DATA 52,65
01AE6:  DATA 61,64
01AE8:  DATA 20,41
01AEA:  DATA 64,64
01AEC:  DATA 72,65
01AEE:  DATA 73,73
01AF0:  DATA 0D,0A
01AF2:  DATA 00,00
01AF4:  DATA 53,74
01AF6:  DATA 61,72
01AF8:  DATA 74,20
01AFA:  DATA 46,6C
01AFC:  DATA 61,73
01AFE:  DATA 68,20
01B00:  DATA 45,72
01B02:  DATA 61,73
01B04:  DATA 65,20
01B06:  DATA 61,6E
01B08:  DATA 64,20
01B0A:  DATA 52,65
01B0C:  DATA 73,65
01B0E:  DATA 74,0D
01B10:  DATA 0A,00
01B12:  DATA 45,6E
01B14:  DATA 64,20
01B16:  DATA 46,6C
01B18:  DATA 61,73
01B1A:  DATA 68,20
01B1C:  DATA 45,72
01B1E:  DATA 61,73
01B20:  DATA 65,20
01B22:  DATA 61,6E
01B24:  DATA 64,20
01B26:  DATA 52,65
01B28:  DATA 73,65
01B2A:  DATA 74,0D
01B2C:  DATA 0A,00
01B2E:  DATA 53,74
01B30:  DATA 61,72
01B32:  DATA 74,20
01B34:  DATA 46,6C
01B36:  DATA 61,73
01B38:  DATA 68,20
01B3A:  DATA 41,64
01B3C:  DATA 64,72
01B3E:  DATA 65,73
01B40:  DATA 73,20
01B42:  DATA 52,65
01B44:  DATA 73,65
01B46:  DATA 74,0D
01B48:  DATA 0A,00
01B4A:  DATA 45,6E
01B4C:  DATA 64,20
01B4E:  DATA 46,6C
01B50:  DATA 61,73
01B52:  DATA 68,20
01B54:  DATA 41,64
01B56:  DATA 64,72
01B58:  DATA 65,73
01B5A:  DATA 73,20
01B5C:  DATA 52,65
01B5E:  DATA 73,65
01B60:  DATA 74,0D
01B62:  DATA 0A,00
01B64:  DATA 53,74
01B66:  DATA 61,72
01B68:  DATA 74,20
01B6A:  DATA 46,6C
01B6C:  DATA 61,73
01B6E:  DATA 68,20
01B70:  DATA 53,4D
01B72:  DATA 46,20
01B74:  DATA 43,6F
01B76:  DATA 70,79
01B78:  DATA 0D,0A
01B7A:  DATA 00,00
01B7C:  DATA 45,6E
01B7E:  DATA 64,20
01B80:  DATA 46,6C
01B82:  DATA 61,73
01B84:  DATA 68,20
01B86:  DATA 53,4D
01B88:  DATA 46,20
01B8A:  DATA 43,6F
01B8C:  DATA 70,79
01B8E:  DATA 0D,0A
01B90:  DATA 00,00
01B92:  DATA 53,74
01B94:  DATA 61,72
01B96:  DATA 74,20
01B98:  DATA 46,6C
01B9A:  DATA 61,73
01B9C:  DATA 68,20
01B9E:  DATA 53,4D
01BA0:  DATA 46,20
01BA2:  DATA 52,65
01BA4:  DATA 61,64
01BA6:  DATA 0D,0A
01BA8:  DATA 00,00
01BAA:  DATA 52,65
01BAC:  DATA 61,64
01BAE:  DATA 20,44
01BB0:  DATA 61,74
01BB2:  DATA 61,3A
01BB4:  DATA 20,00
01BB6:  DATA 0D,0A
01BB8:  DATA 45,6E
01BBA:  DATA 64,20
01BBC:  DATA 46,6C
01BBE:  DATA 61,73
01BC0:  DATA 68,20
01BC2:  DATA 53,4D
01BC4:  DATA 46,20
01BC6:  DATA 52,65
01BC8:  DATA 61,64
01BCA:  DATA 0D,0A
01BCC:  DATA 00,00
01BCE:  DATA 53,74
01BD0:  DATA 61,72
01BD2:  DATA 74,20
01BD4:  DATA 46,6C
01BD6:  DATA 61,73
01BD8:  DATA 68,20
01BDA:  DATA 53,4D
01BDC:  DATA 46,20
01BDE:  DATA 45,72
01BE0:  DATA 61,73
01BE2:  DATA 65,0D
01BE4:  DATA 0A,00
01BE6:  DATA 45,6E
01BE8:  DATA 64,20
01BEA:  DATA 46,6C
01BEC:  DATA 61,73
01BEE:  DATA 68,20
01BF0:  DATA 53,4D
01BF2:  DATA 46,20
01BF4:  DATA 45,72
01BF6:  DATA 61,73
01BF8:  DATA 65,0D
01BFA:  DATA 0A,00
01BFC:  DATA 53,74
01BFE:  DATA 61,72
01C00:  DATA 74,20
01C02:  DATA 46,6C
01C04:  DATA 61,73
01C06:  DATA 68,20
01C08:  DATA 41,64
01C0A:  DATA 64,72
01C0C:  DATA 65,73
01C0E:  DATA 73,20
01C10:  DATA 52,65
01C12:  DATA 73,65
01C14:  DATA 74,0D
01C16:  DATA 0A,00
01C18:  DATA 45,6E
01C1A:  DATA 64,20
01C1C:  DATA 46,6C
01C1E:  DATA 61,73
01C20:  DATA 68,20
01C22:  DATA 41,64
01C24:  DATA 64,72
01C26:  DATA 65,73
01C28:  DATA 73,20
01C2A:  DATA 52,65
01C2C:  DATA 73,65
01C2E:  DATA 74,0D
01C30:  DATA 0A,00
01C32:  DATA 53,4D
01C34:  DATA 46,20
01C36:  DATA 69,73
01C38:  DATA 20,6E
01C3A:  DATA 6F,74
01C3C:  DATA 20,63
01C3E:  DATA 6F,6E
01C40:  DATA 6E,65
01C42:  DATA 63,74
01C44:  DATA 65,64
01C46:  DATA 0D,0A
01C48:  DATA 00,00
01C4A:  DATA 53,74
01C4C:  DATA 61,72
01C4E:  DATA 74,20
01C50:  DATA 46,6C
01C52:  DATA 61,73
01C54:  DATA 68,20
01C56:  DATA 53,4D
01C58:  DATA 46,20
01C5A:  DATA 52,65
01C5C:  DATA 61,64
01C5E:  DATA 20,46
01C60:  DATA 6F,72
01C62:  DATA 63,65
01C64:  DATA 0D,0A
01C66:  DATA 00,00
01C68:  DATA 09,41
01C6A:  DATA 64,64
01C6C:  DATA 72,65
01C6E:  DATA 73,73
01C70:  DATA 20,20
01C72:  DATA 3A,20
01C74:  DATA 30,78
01C76:  DATA 25,30
01C78:  DATA 38,4C
01C7A:  DATA 58,0D
01C7C:  DATA 0A,00
01C7E:  DATA 09,50
01C80:  DATA 61,63
01C82:  DATA 6B,65
01C84:  DATA 74,4E
01C86:  DATA 75,6D
01C88:  DATA 3A,20
01C8A:  DATA 30,78
01C8C:  DATA 25,30
01C8E:  DATA 34,4C
01C90:  DATA 58,0D
01C92:  DATA 0A,00
01C94:  DATA 72,65
01C96:  DATA 61,64
01C98:  DATA 20,64
01C9A:  DATA 61,74
01C9C:  DATA 61,0D
01C9E:  DATA 0A,00
01CA0:  DATA 0D,0A
01CA2:  DATA 45,6E
01CA4:  DATA 64,20
01CA6:  DATA 46,6C
01CA8:  DATA 61,73
01CAA:  DATA 68,20
01CAC:  DATA 53,4D
01CAE:  DATA 46,20
01CB0:  DATA 52,65
01CB2:  DATA 61,64
01CB4:  DATA 20,46
01CB6:  DATA 6F,72
01CB8:  DATA 63,65
01CBA:  DATA 0D,0A
01CBC:  DATA 00,00
01CBE:  DATA 53,74
01CC0:  DATA 61,72
01CC2:  DATA 74,20
01CC4:  DATA 53,4D
01CC6:  DATA 46,20
01CC8:  DATA 45,72
01CCA:  DATA 61,73
01CCC:  DATA 65,20
01CCE:  DATA 41,6C
01CD0:  DATA 6C,0D
01CD2:  DATA 0A,00
01CD4:  DATA 45,6E
01CD6:  DATA 64,20
01CD8:  DATA 53,4D
01CDA:  DATA 46,20
01CDC:  DATA 45,72
01CDE:  DATA 61,73
01CE0:  DATA 65,20
01CE2:  DATA 41,6C
01CE4:  DATA 6C,0D
01CE6:  DATA 0A,00
01CE8:  DATA 53,74
01CEA:  DATA 61,72
01CEC:  DATA 74,20
01CEE:  DATA 53,4D
01CF0:  DATA 46,20
01CF2:  DATA 52,65
01CF4:  DATA 73,65
01CF6:  DATA 74,0D
01CF8:  DATA 0A,00
01CFA:  DATA 45,6E
01CFC:  DATA 64,20
01CFE:  DATA 53,4D
01D00:  DATA 46,20
01D02:  DATA 52,65
01D04:  DATA 73,65
01D06:  DATA 74,0D
01D08:  DATA 0A,00
01D0A:  DATA 0D,0A
01D0C:  DATA 0D,0A
01D0E:  DATA 0D,0A
01D10:  DATA 3D,3D
01D12:  DATA 3D,3D
01D14:  DATA 3D,3D
01D16:  DATA 3D,3D
01D18:  DATA 3D,3D
01D1A:  DATA 3D,3D
01D1C:  DATA 3D,3D
01D1E:  DATA 3D,3D
01D20:  DATA 3D,3D
01D22:  DATA 3D,3D
01D24:  DATA 3D,3D
01D26:  DATA 3D,3D
01D28:  DATA 3D,3D
01D2A:  DATA 3D,3D
01D2C:  DATA 3D,3D
01D2E:  DATA 3D,3D
01D30:  DATA 3D,3D
01D32:  DATA 3D,3D
01D34:  DATA 3D,3D
01D36:  DATA 3D,3D
01D38:  DATA 3D,3D
01D3A:  DATA 3D,3D
01D3C:  DATA 3D,3D
01D3E:  DATA 3D,3D
01D40:  DATA 3D,3D
01D42:  DATA 3D,3D
01D44:  DATA 3D,3D
01D46:  DATA 3D,3D
01D48:  DATA 3D,3D
01D4A:  DATA 3D,3D
01D4C:  DATA 0D,0A
01D4E:  DATA 00,00
01D50:  DATA 54,68
01D52:  DATA 69,73
01D54:  DATA 20,69
01D56:  DATA 73,20
01D58:  DATA 4D,4F
01D5A:  DATA 4D,49
01D5C:  DATA 4A,49
01D5E:  DATA 20,43
01D60:  DATA 49,47
01D62:  DATA 53,20
01D64:  DATA 50,49
01D66:  DATA 43,20
01D68:  DATA 42,42
01D6A:  DATA 4D,20
01D6C:  DATA 66,6F
01D6E:  DATA 72,20
01D70:  DATA 4D,49
01D72:  DATA 53,37
01D74:  DATA 5F,42
01D76:  DATA 42,4D
01D78:  DATA 34,2E
01D7A:  DATA 0D,0A
01D7C:  DATA 00,00
01D7E:  DATA 4C,61
01D80:  DATA 73,74
01D82:  DATA 20,75
01D84:  DATA 70,64
01D86:  DATA 61,74
01D88:  DATA 65,64
01D8A:  DATA 20,6F
01D8C:  DATA 6E,20
01D8E:  DATA 25,73
01D90:  DATA 20,25
01D92:  DATA 73,2C
01D94:  DATA 20,62
01D96:  DATA 79,20
01D98:  DATA 49,6E
01D9A:  DATA 6F,75
01D9C:  DATA 65,2E
01D9E:  DATA 0D,0A
01DA0:  DATA 0D,0A
01DA2:  DATA 00,00
01DA4:  DATA 35,2D
01DA6:  DATA 41,75
01DA8:  DATA 67,2D
01DAA:  DATA 32,35
01DAC:  DATA 00,00
01DAE:  DATA 30,30
01DB0:  DATA 3A,30
01DB2:  DATA 34,3A
01DB4:  DATA 31,36
01DB6:  DATA 00,00
01DB8:  DATA 5F,5F
01DBA:  DATA 5F,5F
01DBC:  DATA 43,49
01DBE:  DATA 47,53
01DC0:  DATA 20,50
01DC2:  DATA 49,43
01DC4:  DATA 20,53
01DC6:  DATA 74,61
01DC8:  DATA 72,74
01DCA:  DATA 20,4F
01DCC:  DATA 70,65
01DCE:  DATA 72,61
01DD0:  DATA 74,69
01DD2:  DATA 6F,6E
01DD4:  DATA 5F,5F
01DD6:  DATA 5F,5F
01DD8:  DATA 5F,0D
01DDA:  DATA 0A,0D
01DDC:  DATA 0A,00
01DDE:  DATA 77,61
01DE0:  DATA 69,74
01DE2:  DATA 69,6E
01DE4:  DATA 67,20
01DE6:  DATA 66,6F
01DE8:  DATA 72,20
01DEA:  DATA 42,4F
01DEC:  DATA 53,53
01DEE:  DATA 20,50
01DF0:  DATA 49,43
01DF2:  DATA 20,63
01DF4:  DATA 6F,6D
01DF6:  DATA 6D,61
01DF8:  DATA 6E,64
01DFA:  DATA 00,00
01DFC:  DATA 0D,0A
01DFE:  DATA 77,61
01E00:  DATA 69,74
01E02:  DATA 69,6E
01E04:  DATA 67,20
01E06:  DATA 66,6F
01E08:  DATA 72,20
01E0A:  DATA 42,4F
01E0C:  DATA 53,53
01E0E:  DATA 20,50
01E10:  DATA 49,43
01E12:  DATA 20,63
01E14:  DATA 6F,6D
01E16:  DATA 6D,61
01E18:  DATA 6E,64
01E1A:  DATA 00,00
01E1C:  DATA 0D,0A
01E1E:  DATA 0D,0A
01E20:  DATA 3D,3D
01E22:  DATA 3D,3D
01E24:  DATA 3D,3D
01E26:  DATA 0D,0A
01E28:  DATA 0D,0A
01E2A:  DATA 46,69
01E2C:  DATA 6E,69
01E2E:  DATA 73,68
01E30:  DATA 65,64
01E32:  DATA 20,70
01E34:  DATA 72,6F
01E36:  DATA 63,65
01E38:  DATA 73,73
01E3A:  DATA 2E,0D
01E3C:  DATA 0A,57
01E3E:  DATA 61,69
01E40:  DATA 74,20
01E42:  DATA 66,6F
01E44:  DATA 72,20
01E46:  DATA 42,4F
01E48:  DATA 53,53
01E4A:  DATA 20,50
01E4C:  DATA 49,43
01E4E:  DATA 20,74
01E50:  DATA 75,72
01E52:  DATA 6E,20
01E54:  DATA 6F,66
01E56:  DATA 66,20
01E58:  DATA 6D,65
01E5A:  DATA 00,00
01E5C:  DATA 45,6E
01E5E:  DATA 64,20
01E60:  DATA 6D,61
01E62:  DATA 69,6E
01E64:  DATA 0D,0A
01E66:  DATA 00,00
*
01EE8:  TBLRD*+
01EEA:  MOVF   FF5,F
01EEC:  BTFSC  FD8.2
01EEE:  GOTO   1F16
01EF2:  MOVFF  FF6,A26
01EF6:  MOVFF  FF7,A27
01EFA:  MOVFF  FF8,A28
01EFE:  MOVFF  FF5,A29
01F02:  CALL   1E96
01F06:  MOVFF  A26,FF6
01F0A:  MOVFF  A27,FF7
01F0E:  MOVFF  A28,FF8
01F12:  GOTO   1EE8
01F16:  RETURN 0
01F18:  TBLRD*+
01F1A:  MOVFF  FF6,997
01F1E:  MOVFF  FF7,998
01F22:  MOVFF  FF8,999
01F26:  MOVFF  FF5,A29
01F2A:  CALL   1E96
01F2E:  MOVFF  997,FF6
01F32:  MOVFF  998,FF7
01F36:  MOVFF  999,FF8
01F3A:  MOVLB  9
01F3C:  DECFSZ x96,F
01F3E:  BRA    1F44
01F40:  BRA    1F4A
01F42:  MOVLB  0
01F44:  MOVLB  0
01F46:  GOTO   1F18
01F4A:  MOVLB  0
01F4C:  RETURN 0
*
02116:  MOVLB  9
02118:  BTFSS  x97.7
0211A:  BRA    2122
0211C:  MOVLB  0
0211E:  GOTO   2152
02122:  MOVLW  0F
02124:  MOVWF  00
02126:  SWAPF  x96,W
02128:  ANDWF  00,F
0212A:  MOVLW  0A
0212C:  SUBWF  00,W
0212E:  BTFSS  FD8.0
02130:  BRA    2138
02132:  MOVLB  0
02134:  GOTO   2142
02138:  MOVLW  30
0213A:  ADDWF  00,F
0213C:  MOVLB  0
0213E:  GOTO   214A
02142:  MOVLB  9
02144:  MOVF   x97,W
02146:  ADDWF  00,F
02148:  MOVLB  0
0214A:  MOVFF  00,A29
0214E:  CALL   1E96
02152:  MOVLW  0F
02154:  MOVLB  9
02156:  ANDWF  x96,F
02158:  MOVLW  0A
0215A:  SUBWF  x96,W
0215C:  BTFSS  FD8.0
0215E:  BRA    2166
02160:  MOVLB  0
02162:  GOTO   216E
02166:  MOVLW  30
02168:  MOVLB  0
0216A:  GOTO   2176
0216E:  MOVLB  9
02170:  BCF    x97.7
02172:  MOVF   x97,W
02174:  MOVLB  0
02176:  MOVLB  9
02178:  ADDWF  x96,F
0217A:  MOVFF  996,A29
0217E:  MOVLB  0
02180:  CALL   1E96
02184:  RETURN 0
*
0227E:  MOVLB  A
02280:  MOVF   x44,W
02282:  ANDLW  07
02284:  MOVWF  00
02286:  RRCF   x44,W
02288:  MOVWF  01
0228A:  RRCF   01,F
0228C:  RRCF   01,F
0228E:  MOVLW  1F
02290:  ANDWF  01,F
02292:  MOVF   01,W
02294:  ADDWF  x46,W
02296:  MOVWF  FE9
02298:  MOVLW  00
0229A:  ADDWFC x47,W
0229C:  MOVWF  FEA
0229E:  CLRF   01
022A0:  INCF   01,F
022A2:  INCF   00,F
022A4:  MOVLB  0
022A6:  GOTO   22AC
022AA:  RLCF   01,F
022AC:  DECFSZ 00,F
022AE:  GOTO   22AA
022B2:  MOVLB  A
022B4:  MOVF   x45,F
022B6:  BTFSS  FD8.2
022B8:  BRA    22C0
022BA:  MOVLB  0
022BC:  GOTO   22CA
022C0:  MOVF   01,W
022C2:  IORWF  FEF,F
022C4:  MOVLB  0
022C6:  GOTO   22D0
022CA:  COMF   01,F
022CC:  MOVF   01,W
022CE:  ANDWF  FEF,F
022D0:  RETURN 0
*
044BE:  TSTFSZ 01
044C0:  GOTO   44CE
044C4:  TSTFSZ 02
044C6:  GOTO   44D0
044CA:  GOTO   44E0
044CE:  INCF   02,F
044D0:  MOVFF  00,FEE
044D4:  DECFSZ 01,F
044D6:  GOTO   44D0
044DA:  DECFSZ 02,F
044DC:  GOTO   44D0
044E0:  RETURN 0
*
06644:  MOVLB  2
06646:  MOVF   x86,W
06648:  CLRF   01
0664A:  SUBWF  x85,W
0664C:  BTFSS  FD8.0
0664E:  BRA    6656
06650:  MOVLB  0
06652:  GOTO   6660
06656:  MOVF   x85,W
06658:  MOVWF  00
0665A:  MOVLB  0
0665C:  GOTO   668A
06660:  CLRF   00
06662:  MOVLW  08
06664:  MOVLB  2
06666:  MOVWF  x87
06668:  MOVLB  0
0666A:  MOVLB  2
0666C:  RLCF   x85,F
0666E:  RLCF   00,F
06670:  MOVF   x86,W
06672:  SUBWF  00,W
06674:  BTFSC  FD8.0
06676:  MOVWF  00
06678:  RLCF   01,F
0667A:  DECFSZ x87,F
0667C:  BRA    6682
0667E:  BRA    6688
06680:  MOVLB  0
06682:  MOVLB  0
06684:  GOTO   666A
06688:  MOVLB  0
0668A:  RETURN 0
0668C:  MOVF   01,W
0668E:  MOVFF  1FC,285
06692:  MOVLW  64
06694:  MOVLB  2
06696:  MOVWF  x86
06698:  MOVLB  0
0669A:  CALL   6644
0669E:  MOVFF  00,1FC
066A2:  MOVF   01,W
066A4:  MOVLW  30
066A6:  BTFSS  FD8.2
066A8:  GOTO   66CC
066AC:  MOVLB  1
066AE:  BTFSC  xFD.1
066B0:  BRA    66B8
066B2:  MOVLB  0
066B4:  GOTO   66E0
066B8:  BTFSS  xFD.3
066BA:  BRA    66C2
066BC:  MOVLB  0
066BE:  GOTO   66E0
066C2:  BTFSC  xFD.4
066C4:  MOVLW  20
066C6:  MOVLB  0
066C8:  GOTO   66D6
066CC:  MOVLB  1
066CE:  BCF    xFD.3
066D0:  BCF    xFD.4
066D2:  BSF    xFD.0
066D4:  MOVLB  0
066D6:  ADDWF  01,F
066D8:  MOVFF  01,A29
066DC:  CALL   1E96
066E0:  MOVFF  1FC,285
066E4:  MOVLW  0A
066E6:  MOVLB  2
066E8:  MOVWF  x86
066EA:  MOVLB  0
066EC:  CALL   6644
066F0:  MOVFF  00,1FC
066F4:  MOVF   01,W
066F6:  MOVLW  30
066F8:  BTFSS  FD8.2
066FA:  GOTO   671A
066FE:  MOVLB  1
06700:  BTFSS  xFD.3
06702:  BRA    670A
06704:  MOVLB  0
06706:  GOTO   6724
0670A:  BTFSC  xFD.0
0670C:  BRA    6714
0670E:  MOVLB  0
06710:  GOTO   6724
06714:  BTFSC  xFD.4
06716:  MOVLW  20
06718:  MOVLB  0
0671A:  ADDWF  01,F
0671C:  MOVFF  01,A29
06720:  CALL   1E96
06724:  MOVLW  30
06726:  MOVLB  1
06728:  ADDWF  xFC,F
0672A:  MOVFF  1FC,A29
0672E:  MOVLB  0
06730:  CALL   1E96
06734:  RETURN 0
*
06906:  BTFSC  FD8.1
06908:  GOTO   6914
0690C:  MOVLW  09
0690E:  MOVWF  FEA
06910:  MOVLW  AF
06912:  MOVWF  FE9
06914:  CLRF   00
06916:  CLRF   01
06918:  CLRF   02
0691A:  CLRF   03
0691C:  MOVLB  9
0691E:  CLRF   xAF
06920:  CLRF   xB0
06922:  CLRF   xB1
06924:  CLRF   xB2
06926:  MOVF   xAE,W
06928:  IORWF  xAD,W
0692A:  IORWF  xAC,W
0692C:  IORWF  xAB,W
0692E:  BTFSS  FD8.2
06930:  BRA    6938
06932:  MOVLB  0
06934:  GOTO   69C8
06938:  MOVLB  0
0693A:  MOVLW  20
0693C:  MOVLB  9
0693E:  MOVWF  xB3
06940:  MOVLB  0
06942:  BCF    FD8.0
06944:  MOVLB  9
06946:  RLCF   xA7,F
06948:  RLCF   xA8,F
0694A:  RLCF   xA9,F
0694C:  RLCF   xAA,F
0694E:  RLCF   xAF,F
06950:  RLCF   xB0,F
06952:  RLCF   xB1,F
06954:  RLCF   xB2,F
06956:  MOVF   xAE,W
06958:  SUBWF  xB2,W
0695A:  BTFSC  FD8.2
0695C:  BRA    6964
0695E:  MOVLB  0
06960:  GOTO   6986
06964:  MOVF   xAD,W
06966:  SUBWF  xB1,W
06968:  BTFSC  FD8.2
0696A:  BRA    6972
0696C:  MOVLB  0
0696E:  GOTO   6986
06972:  MOVF   xAC,W
06974:  SUBWF  xB0,W
06976:  BTFSC  FD8.2
06978:  BRA    6980
0697A:  MOVLB  0
0697C:  GOTO   6986
06980:  MOVF   xAB,W
06982:  SUBWF  xAF,W
06984:  MOVLB  0
06986:  BTFSS  FD8.0
06988:  GOTO   69AE
0698C:  MOVLB  9
0698E:  MOVF   xAB,W
06990:  SUBWF  xAF,F
06992:  MOVF   xAC,W
06994:  BTFSS  FD8.0
06996:  INCFSZ xAC,W
06998:  SUBWF  xB0,F
0699A:  MOVF   xAD,W
0699C:  BTFSS  FD8.0
0699E:  INCFSZ xAD,W
069A0:  SUBWF  xB1,F
069A2:  MOVF   xAE,W
069A4:  BTFSS  FD8.0
069A6:  INCFSZ xAE,W
069A8:  SUBWF  xB2,F
069AA:  BSF    FD8.0
069AC:  MOVLB  0
069AE:  RLCF   00,F
069B0:  RLCF   01,F
069B2:  RLCF   02,F
069B4:  RLCF   03,F
069B6:  MOVLB  9
069B8:  DECFSZ xB3,F
069BA:  BRA    69C0
069BC:  BRA    69C6
069BE:  MOVLB  0
069C0:  MOVLB  0
069C2:  GOTO   6942
069C6:  MOVLB  0
069C8:  MOVFF  9AF,FEF
069CC:  MOVFF  9B0,FEC
069D0:  MOVFF  9B1,FEC
069D4:  MOVFF  9B2,FEC
069D8:  MOVF   FED,F
069DA:  MOVF   FED,F
069DC:  MOVF   FED,F
069DE:  RETURN 0
*
06A9A:  MOVFF  FEA,99A
06A9E:  MOVFF  FE9,999
06AA2:  MOVLB  9
06AA4:  BTFSC  x93.7
06AA6:  BRA    6AAE
06AA8:  MOVLB  0
06AAA:  GOTO   6AC0
06AAE:  BSF    x99.7
06AB0:  BTFSS  x99.4
06AB2:  INCF   x99,F
06AB4:  COMF   x92,F
06AB6:  COMF   x93,F
06AB8:  INCF   x92,F
06ABA:  BTFSC  FD8.2
06ABC:  INCF   x93,F
06ABE:  MOVLB  0
06AC0:  MOVLB  9
06AC2:  SWAPF  x93,W
06AC4:  IORLW  F0
06AC6:  MOVWF  x95
06AC8:  ADDWF  x95,F
06ACA:  ADDLW  E2
06ACC:  MOVWF  x96
06ACE:  ADDLW  32
06AD0:  MOVWF  x98
06AD2:  MOVF   x93,W
06AD4:  ANDLW  0F
06AD6:  ADDWF  x96,F
06AD8:  ADDWF  x96,F
06ADA:  ADDWF  x98,F
06ADC:  ADDLW  E9
06ADE:  MOVWF  x97
06AE0:  ADDWF  x97,F
06AE2:  ADDWF  x97,F
06AE4:  SWAPF  x92,W
06AE6:  ANDLW  0F
06AE8:  ADDWF  x97,F
06AEA:  ADDWF  x98,F
06AEC:  RLCF   x97,F
06AEE:  RLCF   x98,F
06AF0:  COMF   x98,F
06AF2:  RLCF   x98,F
06AF4:  MOVF   x92,W
06AF6:  ANDLW  0F
06AF8:  ADDWF  x98,F
06AFA:  RLCF   x95,F
06AFC:  MOVLW  07
06AFE:  MOVWF  x94
06B00:  MOVLW  0A
06B02:  MOVLB  0
06B04:  MOVLB  9
06B06:  DECF   x97,F
06B08:  ADDWF  x98,F
06B0A:  BTFSC  FD8.0
06B0C:  BRA    6B14
06B0E:  MOVLB  0
06B10:  GOTO   6B04
06B14:  MOVLB  0
06B16:  MOVLB  9
06B18:  DECF   x96,F
06B1A:  ADDWF  x97,F
06B1C:  BTFSC  FD8.0
06B1E:  BRA    6B26
06B20:  MOVLB  0
06B22:  GOTO   6B16
06B26:  MOVLB  0
06B28:  MOVLB  9
06B2A:  DECF   x95,F
06B2C:  ADDWF  x96,F
06B2E:  BTFSC  FD8.0
06B30:  BRA    6B38
06B32:  MOVLB  0
06B34:  GOTO   6B28
06B38:  MOVLB  0
06B3A:  MOVLB  9
06B3C:  DECF   x94,F
06B3E:  ADDWF  x95,F
06B40:  BTFSC  FD8.0
06B42:  BRA    6B4A
06B44:  MOVLB  0
06B46:  GOTO   6B3A
06B4A:  MOVLW  09
06B4C:  MOVWF  FEA
06B4E:  MOVLW  94
06B50:  MOVWF  FE9
06B52:  MOVLW  07
06B54:  ANDWF  x99,W
06B56:  BCF    x99.6
06B58:  MOVF   FED,F
06B5A:  ANDWF  x99,W
06B5C:  BTFSC  FD8.2
06B5E:  BRA    6B66
06B60:  MOVLB  0
06B62:  GOTO   6B7E
06B66:  BTFSC  x99.4
06B68:  MOVF   FEE,F
06B6A:  BTFSS  x99.4
06B6C:  BRA    6B74
06B6E:  MOVLB  0
06B70:  GOTO   6B7E
06B74:  MOVLW  20
06B76:  MOVWF  00
06B78:  MOVLB  0
06B7A:  GOTO   6BF8
06B7E:  ADDWF  FE9,F
06B80:  MOVLW  00
06B82:  ADDWFC FEA,F
06B84:  MOVF   FE9,W
06B86:  SUBLW  98
06B88:  BTFSS  FD8.2
06B8A:  GOTO   6B9E
06B8E:  MOVF   FEA,W
06B90:  SUBLW  09
06B92:  BTFSS  FD8.2
06B94:  GOTO   6B9E
06B98:  MOVLB  9
06B9A:  BSF    x99.6
06B9C:  MOVLB  0
06B9E:  MOVF   FEF,W
06BA0:  MOVWF  00
06BA2:  BTFSS  FD8.2
06BA4:  GOTO   6BD0
06BA8:  MOVLB  9
06BAA:  BTFSS  x99.6
06BAC:  BRA    6BB4
06BAE:  MOVLB  0
06BB0:  GOTO   6BD0
06BB4:  BTFSS  x99.4
06BB6:  BRA    6BBE
06BB8:  MOVLB  0
06BBA:  GOTO   6C10
06BBE:  BTFSS  x99.3
06BC0:  BRA    6BC8
06BC2:  MOVLB  0
06BC4:  GOTO   6BD0
06BC8:  MOVLW  20
06BCA:  MOVLB  0
06BCC:  GOTO   6BF6
06BD0:  MOVLB  9
06BD2:  BTFSC  x99.7
06BD4:  BRA    6BDC
06BD6:  MOVLB  0
06BD8:  GOTO   6BEC
06BDC:  MOVLW  2D
06BDE:  MOVWF  00
06BE0:  MOVF   FED,W
06BE2:  BCF    x99.6
06BE4:  BCF    x99.7
06BE6:  MOVLB  0
06BE8:  GOTO   6BF8
06BEC:  MOVLB  9
06BEE:  BSF    x99.3
06BF0:  BCF    x99.4
06BF2:  MOVLW  30
06BF4:  MOVLB  0
06BF6:  ADDWF  00,F
06BF8:  MOVFF  FEA,993
06BFC:  MOVFF  FE9,992
06C00:  MOVFF  00,A29
06C04:  CALL   1E96
06C08:  MOVFF  993,FEA
06C0C:  MOVFF  992,FE9
06C10:  MOVF   FEE,W
06C12:  MOVLB  9
06C14:  BTFSC  x99.6
06C16:  BRA    6C1E
06C18:  MOVLB  0
06C1A:  GOTO   6B84
06C1E:  MOVLB  0
06C20:  GOTO   8544 (RETURN)
*
0908C:  MOVLW  20
0908E:  MOVLB  2
09090:  BTFSS  x80.4
09092:  MOVLW  30
09094:  MOVWF  x81
09096:  MOVFF  27F,00
0909A:  BTFSC  00.7
0909C:  BRA    90A4
0909E:  MOVLB  0
090A0:  GOTO   90B6
090A4:  COMF   00,F
090A6:  INCF   00,F
090A8:  MOVFF  00,27F
090AC:  MOVLW  2D
090AE:  MOVWF  x81
090B0:  BSF    x80.7
090B2:  BSF    x80.0
090B4:  MOVLB  0
090B6:  MOVF   01,W
090B8:  MOVFF  27F,285
090BC:  MOVLW  64
090BE:  MOVLB  2
090C0:  MOVWF  x86
090C2:  MOVLB  0
090C4:  CALL   6644
090C8:  MOVFF  00,27F
090CC:  MOVLW  30
090CE:  ADDWF  01,W
090D0:  MOVLB  2
090D2:  MOVWF  x82
090D4:  MOVFF  27F,285
090D8:  MOVLW  0A
090DA:  MOVWF  x86
090DC:  MOVLB  0
090DE:  CALL   6644
090E2:  MOVLW  30
090E4:  ADDWF  00,W
090E6:  MOVLB  2
090E8:  MOVWF  x84
090EA:  MOVLW  30
090EC:  ADDWF  01,W
090EE:  MOVWF  x83
090F0:  MOVFF  281,00
090F4:  MOVLB  0
090F6:  MOVLW  30
090F8:  MOVLB  2
090FA:  SUBWF  x82,W
090FC:  BTFSS  FD8.2
090FE:  BRA    9106
09100:  MOVLB  0
09102:  GOTO   9112
09106:  BSF    x80.1
09108:  BTFSC  x80.7
0910A:  BSF    x80.2
0910C:  MOVLB  0
0910E:  GOTO   9152
09112:  MOVFF  281,282
09116:  MOVLW  20
09118:  MOVLB  2
0911A:  MOVWF  x81
0911C:  MOVLW  30
0911E:  SUBWF  x83,W
09120:  BTFSS  FD8.2
09122:  BRA    912A
09124:  MOVLB  0
09126:  GOTO   9136
0912A:  BSF    x80.0
0912C:  BTFSC  x80.7
0912E:  BSF    x80.1
09130:  MOVLB  0
09132:  GOTO   9152
09136:  BTFSC  FD8.2
09138:  BRA    9140
0913A:  MOVLB  2
0913C:  BSF    x80.0
0913E:  MOVLB  0
09140:  BTFSS  FD8.2
09142:  GOTO   9152
09146:  MOVFF  282,283
0914A:  MOVLW  20
0914C:  MOVLB  2
0914E:  MOVWF  x82
09150:  MOVLB  0
09152:  MOVLB  2
09154:  BTFSS  x80.2
09156:  BRA    915E
09158:  MOVLB  0
0915A:  GOTO   9178
0915E:  BTFSS  x80.1
09160:  BRA    9168
09162:  MOVLB  0
09164:  GOTO   9180
09168:  BTFSS  x80.0
0916A:  BRA    9172
0916C:  MOVLB  0
0916E:  GOTO   9188
09172:  MOVLB  0
09174:  GOTO   9190
09178:  MOVFF  281,A29
0917C:  CALL   1E96
09180:  MOVFF  282,A29
09184:  CALL   1E96
09188:  MOVFF  283,A29
0918C:  CALL   1E96
09190:  MOVFF  284,A29
09194:  CALL   1E96
09198:  RETURN 0
*
092CE:  MOVF   FE9,W
092D0:  MOVLB  2
092D2:  MOVWF  x12
092D4:  MOVLW  3B
092D6:  MOVWF  x19
092D8:  MOVLW  9A
092DA:  MOVWF  x18
092DC:  MOVLW  CA
092DE:  MOVWF  x17
092E0:  CLRF   x16
092E2:  MOVLW  0A
092E4:  MOVWF  x14
092E6:  MOVLB  0
092E8:  BSF    FD8.1
092EA:  MOVLW  02
092EC:  MOVWF  FEA
092EE:  MOVLW  0E
092F0:  MOVWF  FE9
092F2:  MOVFF  211,9AA
092F6:  MOVFF  210,9A9
092FA:  MOVFF  20F,9A8
092FE:  MOVFF  20E,9A7
09302:  MOVFF  219,9AE
09306:  MOVFF  218,9AD
0930A:  MOVFF  217,9AC
0930E:  MOVFF  216,9AB
09312:  CALL   6906
09316:  MOVF   01,W
09318:  MOVF   00,F
0931A:  BTFSS  FD8.2
0931C:  GOTO   9374
09320:  MOVLB  2
09322:  MOVF   x14,W
09324:  XORLW  01
09326:  BTFSS  FD8.2
09328:  BRA    9330
0932A:  MOVLB  0
0932C:  GOTO   9374
09330:  MOVF   x12,W
09332:  BTFSS  FD8.2
09334:  BRA    933C
09336:  MOVLB  0
09338:  GOTO   937A
0933C:  ANDLW  0F
0933E:  SUBWF  x14,W
09340:  BTFSS  FD8.2
09342:  BRA    934A
09344:  MOVLB  0
09346:  GOTO   9356
0934A:  BTFSS  FD8.0
0934C:  BRA    9354
0934E:  MOVLB  0
09350:  GOTO   9386
09354:  MOVLB  0
09356:  MOVLB  2
09358:  BTFSS  x12.7
0935A:  BRA    9362
0935C:  MOVLB  0
0935E:  GOTO   9386
09362:  BTFSS  x12.6
09364:  BRA    936C
09366:  MOVLB  0
09368:  GOTO   937A
0936C:  MOVLW  20
0936E:  MOVLB  0
09370:  GOTO   937C
09374:  MOVLB  2
09376:  CLRF   x12
09378:  MOVLB  0
0937A:  MOVLW  30
0937C:  ADDWF  00,F
0937E:  MOVFF  00,A29
09382:  CALL   1E96
09386:  BCF    FD8.1
09388:  MOVFF  219,9AA
0938C:  MOVFF  218,9A9
09390:  MOVFF  217,9A8
09394:  MOVFF  216,9A7
09398:  MOVLB  9
0939A:  CLRF   xAE
0939C:  CLRF   xAD
0939E:  CLRF   xAC
093A0:  MOVLW  0A
093A2:  MOVWF  xAB
093A4:  MOVLB  0
093A6:  CALL   6906
093AA:  MOVFF  03,219
093AE:  MOVFF  02,218
093B2:  MOVFF  01,217
093B6:  MOVFF  00,216
093BA:  MOVLB  2
093BC:  DECFSZ x14,F
093BE:  BRA    93C4
093C0:  BRA    93CA
093C2:  MOVLB  0
093C4:  MOVLB  0
093C6:  GOTO   92E8
093CA:  MOVLB  0
093CC:  RETURN 0
*
09600:  MOVF   FE9,W
09602:  MOVLB  2
09604:  MOVWF  x12
09606:  BTFSC  x11.7
09608:  BRA    9610
0960A:  MOVLB  0
0960C:  GOTO   962C
09610:  DECF   x12,F
09612:  BSF    x12.5
09614:  COMF   x0E,F
09616:  COMF   x0F,F
09618:  COMF   x10,F
0961A:  COMF   x11,F
0961C:  INCF   x0E,F
0961E:  BTFSC  FD8.2
09620:  INCF   x0F,F
09622:  BTFSC  FD8.2
09624:  INCF   x10,F
09626:  BTFSC  FD8.2
09628:  INCF   x11,F
0962A:  MOVLB  0
0962C:  MOVLW  3B
0962E:  MOVLB  2
09630:  MOVWF  x19
09632:  MOVLW  9A
09634:  MOVWF  x18
09636:  MOVLW  CA
09638:  MOVWF  x17
0963A:  CLRF   x16
0963C:  MOVLW  0A
0963E:  MOVWF  x14
09640:  MOVLB  0
09642:  BSF    FD8.1
09644:  MOVLW  02
09646:  MOVWF  FEA
09648:  MOVLW  0E
0964A:  MOVWF  FE9
0964C:  MOVFF  211,9AA
09650:  MOVFF  210,9A9
09654:  MOVFF  20F,9A8
09658:  MOVFF  20E,9A7
0965C:  MOVFF  219,9AE
09660:  MOVFF  218,9AD
09664:  MOVFF  217,9AC
09668:  MOVFF  216,9AB
0966C:  CALL   6906
09670:  MOVF   01,W
09672:  MOVF   00,F
09674:  BTFSS  FD8.2
09676:  GOTO   96CE
0967A:  MOVLB  2
0967C:  MOVF   x14,W
0967E:  XORLW  01
09680:  BTFSS  FD8.2
09682:  BRA    968A
09684:  MOVLB  0
09686:  GOTO   96CE
0968A:  MOVF   x12,W
0968C:  BTFSS  FD8.2
0968E:  BRA    9696
09690:  MOVLB  0
09692:  GOTO   96D6
09696:  ANDLW  0F
09698:  SUBWF  x14,W
0969A:  BTFSS  FD8.2
0969C:  BRA    96A4
0969E:  MOVLB  0
096A0:  GOTO   96B0
096A4:  BTFSS  FD8.0
096A6:  BRA    96AE
096A8:  MOVLB  0
096AA:  GOTO   9734
096AE:  MOVLB  0
096B0:  MOVLB  2
096B2:  BTFSS  x12.7
096B4:  BRA    96BC
096B6:  MOVLB  0
096B8:  GOTO   9734
096BC:  BTFSS  x12.6
096BE:  BRA    96C6
096C0:  MOVLB  0
096C2:  GOTO   96D6
096C6:  MOVLW  20
096C8:  MOVLB  0
096CA:  GOTO   972A
096CE:  MOVLW  20
096D0:  MOVLB  2
096D2:  ANDWF  x12,F
096D4:  MOVLB  0
096D6:  MOVLB  2
096D8:  BTFSC  x12.5
096DA:  BRA    96E2
096DC:  MOVLB  0
096DE:  GOTO   96FE
096E2:  BCF    x12.5
096E4:  MOVF   00,W
096E6:  MOVWF  x12
096E8:  MOVLW  2D
096EA:  MOVLB  A
096EC:  MOVWF  x29
096EE:  MOVLB  0
096F0:  CALL   1E96
096F4:  MOVLB  2
096F6:  MOVF   x12,W
096F8:  MOVWF  00
096FA:  CLRF   x12
096FC:  MOVLB  0
096FE:  MOVLW  30
09700:  MOVLB  2
09702:  BTFSC  x12.5
09704:  BRA    970C
09706:  MOVLB  0
09708:  GOTO   972A
0970C:  BCF    x12.5
0970E:  MOVF   00,W
09710:  MOVWF  x12
09712:  MOVLW  2D
09714:  MOVLB  A
09716:  MOVWF  x29
09718:  MOVLB  0
0971A:  CALL   1E96
0971E:  MOVLB  2
09720:  MOVF   x12,W
09722:  MOVWF  00
09724:  CLRF   x12
09726:  MOVLW  30
09728:  MOVLB  0
0972A:  ADDWF  00,F
0972C:  MOVFF  00,A29
09730:  CALL   1E96
09734:  BCF    FD8.1
09736:  MOVFF  219,9AA
0973A:  MOVFF  218,9A9
0973E:  MOVFF  217,9A8
09742:  MOVFF  216,9A7
09746:  MOVLB  9
09748:  CLRF   xAE
0974A:  CLRF   xAD
0974C:  CLRF   xAC
0974E:  MOVLW  0A
09750:  MOVWF  xAB
09752:  MOVLB  0
09754:  CALL   6906
09758:  MOVFF  03,219
0975C:  MOVFF  02,218
09760:  MOVFF  01,217
09764:  MOVFF  00,216
09768:  MOVLB  2
0976A:  DECFSZ x14,F
0976C:  BRA    9772
0976E:  BRA    9778
09770:  MOVLB  0
09772:  MOVLB  0
09774:  GOTO   9642
09778:  MOVLB  0
0977A:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01E68:  MOVLW  0A
01E6A:  MOVWF  FEA
01E6C:  MOVLW  3E
01E6E:  MOVWF  FE9
01E70:  MOVF   FEF,W
01E72:  BTFSC  FD8.2
01E74:  GOTO   1E94
01E78:  MOVLW  05
01E7A:  MOVWF  01
01E7C:  CLRF   00
01E7E:  DECFSZ 00,F
01E80:  BRA    1E7E
01E82:  DECFSZ 01,F
01E84:  BRA    1E7C
01E86:  MOVLW  2E
01E88:  MOVWF  00
01E8A:  DECFSZ 00,F
01E8C:  BRA    1E8A
01E8E:  BRA    1E90
01E90:  DECFSZ FEF,F
01E92:  BRA    1E78
01E94:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
04520:  BTFSS  FA6.4
04522:  GOTO   4520
04526:  MOVLB  F
04528:  MOVWF  x29
0452A:  MOVLB  0
0452C:  GOTO   4562 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01E96:  BCF    F93.6
01E98:  BCF    F8A.6
01E9A:  MOVLW  08
01E9C:  MOVWF  01
01E9E:  BRA    1EA0
01EA0:  NOP   
01EA2:  BSF    01.7
01EA4:  GOTO   1ECC
01EA8:  BCF    01.7
01EAA:  MOVLB  A
01EAC:  RRCF   x29,F
01EAE:  MOVLB  0
01EB0:  BTFSC  FD8.0
01EB2:  BSF    F8A.6
01EB4:  BTFSS  FD8.0
01EB6:  BCF    F8A.6
01EB8:  BSF    01.6
01EBA:  GOTO   1ECC
01EBE:  BCF    01.6
01EC0:  DECFSZ 01,F
01EC2:  GOTO   1EAA
01EC6:  BRA    1EC8
01EC8:  NOP   
01ECA:  BSF    F8A.6
01ECC:  MOVLW  84
01ECE:  MOVWF  FE9
01ED0:  DECFSZ FE9,F
01ED2:  GOTO   1ED0
01ED6:  BRA    1ED8
01ED8:  NOP   
01EDA:  BTFSC  01.7
01EDC:  GOTO   1EA8
01EE0:  BTFSC  01.6
01EE2:  GOTO   1EBE
01EE6:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
022D2:  MOVLB  A
022D4:  MOVF   x61,W
022D6:  SUBLW  08
022D8:  BTFSS  FD8.2
022DA:  BRA    22E2
022DC:  MOVLB  0
022DE:  GOTO   22FA
022E2:  MOVWF  x63
022E4:  MOVLB  0
022E6:  MOVLB  A
022E8:  RLCF   x60,F
022EA:  DECFSZ x63,F
022EC:  BRA    22F2
022EE:  BRA    22F8
022F0:  MOVLB  0
022F2:  MOVLB  0
022F4:  GOTO   22E6
022F8:  MOVLB  0
022FA:  BSF    F96.4
022FC:  BCF    F96.1
022FE:  BCF    F95.7
02300:  BCF    F8C.7
02302:  MOVFF  A61,A63
02306:  MOVLB  A
02308:  BTFSS  x60.7
0230A:  BCF    F8D.1
0230C:  BTFSC  x60.7
0230E:  BSF    F8D.1
02310:  RLCF   x60,F
02312:  BSF    F8C.7
02314:  MOVLW  02
02316:  MOVWF  x64
02318:  MOVLB  0
0231A:  MOVLB  A
0231C:  DECFSZ x64,F
0231E:  BRA    2324
02320:  BRA    232A
02322:  MOVLB  0
02324:  MOVLB  0
02326:  GOTO   231A
0232A:  RLCF   01,F
0232C:  BTFSS  F84.4
0232E:  BCF    01.0
02330:  BTFSC  F84.4
02332:  BSF    01.0
02334:  BCF    F8C.7
02336:  MOVLB  0
02338:  BRA    233A
0233A:  MOVLB  A
0233C:  DECFSZ x63,F
0233E:  BRA    2344
02340:  BRA    234A
02342:  MOVLB  0
02344:  MOVLB  0
02346:  GOTO   2306
0234A:  MOVLB  0
0234C:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
02024:  MOVLB  9
02026:  MOVF   xB0,W
02028:  SUBLW  10
0202A:  BTFSS  FD8.2
0202C:  BRA    2034
0202E:  MOVLB  0
02030:  GOTO   204E
02034:  MOVWF  xB2
02036:  MOVLB  0
02038:  MOVLB  9
0203A:  RLCF   xAE,F
0203C:  RLCF   xAF,F
0203E:  DECFSZ xB2,F
02040:  BRA    2046
02042:  BRA    204C
02044:  MOVLB  0
02046:  MOVLB  0
02048:  GOTO   2038
0204C:  MOVLB  0
0204E:  BSF    F93.4
02050:  BCF    F93.5
02052:  BCF    F93.2
02054:  BCF    F8A.2
02056:  MOVFF  9B0,9B2
0205A:  MOVLB  9
0205C:  BTFSS  xAF.7
0205E:  BCF    F8A.5
02060:  BTFSC  xAF.7
02062:  BSF    F8A.5
02064:  RLCF   xAE,F
02066:  RLCF   xAF,F
02068:  BSF    F8A.2
0206A:  RLCF   01,F
0206C:  RLCF   02,F
0206E:  BTFSS  F81.4
02070:  BCF    01.0
02072:  BTFSC  F81.4
02074:  BSF    01.0
02076:  BCF    F8A.2
02078:  DECFSZ xB2,F
0207A:  BRA    2080
0207C:  BRA    2086
0207E:  MOVLB  0
02080:  MOVLB  0
02082:  GOTO   205A
02086:  MOVLB  0
02088:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01F78:  MOVLW  EA
01F7A:  MOVWF  FF6
01F7C:  MOVLW  00
01F7E:  MOVWF  FF7
01F80:  MOVLW  00
01F82:  MOVWF  FF8
01F84:  CALL   1EE8
....................    clear_interrupt(INT_TIMER1);
01F88:  BCF    F9E.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01F8A:  MOVLW  8F
01F8C:  MOVWF  FCD
01F8E:  CLRF   FAA
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
01F90:  MOVLW  80
01F92:  MOVWF  FCF
01F94:  MOVLW  12
01F96:  MOVWF  FCE
01F98:  NOP   
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
01F9A:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
01F9C:  MOVLW  C0
01F9E:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01FA0:  MOVLW  FE
01FA2:  MOVWF  FF6
01FA4:  MOVLW  00
01FA6:  MOVWF  FF7
01FA8:  MOVLW  00
01FAA:  MOVWF  FF8
01FAC:  CALL   1EE8
01FB0:  GOTO   B7E6 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
0311E:  MOVFF  20,00
03122:  MOVFF  21,01
03126:  MOVFF  22,02
0312A:  MOVFF  23,03
0312E:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
*
069E0:  BCF    FD8.1
069E2:  MOVFF  1F,9AA
069E6:  MOVFF  1E,9A9
069EA:  MOVFF  1D,9A8
069EE:  MOVFF  1C,9A7
069F2:  MOVLB  9
069F4:  CLRF   xAE
069F6:  CLRF   xAD
069F8:  CLRF   xAC
069FA:  MOVLW  0A
069FC:  MOVWF  xAB
069FE:  MOVLB  0
06A00:  CALL   6906
06A04:  MOVF   01,W
06A06:  MOVWF  02
06A08:  MOVF   00,W
06A0A:  MOVWF  01
06A0C:  GOTO   6A28 (RETURN)
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,A6F
00160:  MOVFF  FE9,A6E
00164:  GOTO   010A
00168:  MOVFF  A6F,FEA
0016C:  MOVFF  A6E,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01F4E:  MOVLW  7A
01F50:  MOVWF  FF6
01F52:  MOVLW  01
01F54:  MOVWF  FF7
01F56:  MOVLW  00
01F58:  MOVWF  FF8
01F5A:  CALL   1EE8
....................    enable_interrupts(INT_RDA3);
01F5E:  BSF    F61.5
....................    enable_interrupts(global);
01F60:  MOVLW  C0
01F62:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01F64:  MOVLW  8C
01F66:  MOVWF  FF6
01F68:  MOVLW  01
01F6A:  MOVWF  FF7
01F6C:  MOVLW  00
01F6E:  MOVWF  FF8
01F70:  CALL   1EE8
01F74:  GOTO   B7E2 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
044E2:  MOVFF  159,03
044E6:  MOVLB  1
044E8:  MOVF   x58,W
044EA:  MOVWF  FE9
044EC:  MOVFF  03,FEA
044F0:  MOVFF  FEF,15A
044F4:  MOVFF  157,FEA
044F8:  MOVFF  156,FE9
044FC:  CLRF   00
044FE:  CLRF   02
04500:  MOVFF  15A,01
04504:  MOVLB  0
04506:  CALL   44BE
....................    *receive_signal_size = 0;
0450A:  MOVFF  159,03
0450E:  MOVLB  1
04510:  MOVF   x58,W
04512:  MOVWF  FE9
04514:  MOVFF  03,FEA
04518:  CLRF   FEF
0451A:  MOVLB  0
0451C:  GOTO   B884 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
02186:  MOVLW  98
02188:  MOVWF  FF6
0218A:  MOVLW  01
0218C:  MOVWF  FF7
0218E:  MOVLW  00
02190:  MOVWF  FF8
02192:  CALL   1EE8
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
02196:  BCF    F93.1
02198:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
0219A:  MOVLW  0A
0219C:  MOVLB  A
0219E:  MOVWF  x3E
021A0:  MOVLB  0
021A2:  CALL   1E68
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
021A6:  MOVLW  0D
021A8:  MOVLB  9
021AA:  MOVWF  xA7
021AC:  MOVLB  0
021AE:  CALL   208A
021B2:  MOVFF  02,157
021B6:  MOVFF  01,156
....................     fprintf(PC, "\t%04LX\r\n", readdata);
021BA:  MOVLW  09
021BC:  MOVLB  A
021BE:  MOVWF  x29
021C0:  MOVLB  0
021C2:  CALL   1E96
021C6:  MOVFF  157,996
021CA:  MOVLW  37
021CC:  MOVLB  9
021CE:  MOVWF  x97
021D0:  MOVLB  0
021D2:  CALL   2116
021D6:  MOVFF  156,996
021DA:  MOVLW  37
021DC:  MOVLB  9
021DE:  MOVWF  x97
021E0:  MOVLB  0
021E2:  CALL   2116
021E6:  MOVLW  0D
021E8:  MOVLB  A
021EA:  MOVWF  x29
021EC:  MOVLB  0
021EE:  CALL   1E96
021F2:  MOVLW  0A
021F4:  MOVLB  A
021F6:  MOVWF  x29
021F8:  MOVLB  0
021FA:  CALL   1E96
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
021FE:  MOVLB  1
02200:  INCFSZ x56,W
02202:  BRA    2208
02204:  BRA    220E
02206:  MOVLB  0
02208:  MOVLB  0
0220A:  GOTO   2226
0220E:  MOVLB  0
02210:  MOVLB  1
02212:  INCFSZ x57,W
02214:  BRA    221A
02216:  BRA    2220
02218:  MOVLB  0
0221A:  MOVLB  0
0221C:  GOTO   2226
02220:  MOVLB  0
02222:  GOTO   2246
02226:  MOVLB  1
02228:  MOVF   x56,F
0222A:  BTFSC  FD8.2
0222C:  BRA    2234
0222E:  MOVLB  0
02230:  GOTO   225A
02234:  MOVLB  0
02236:  MOVLB  1
02238:  MOVF   x57,F
0223A:  BTFSC  FD8.2
0223C:  BRA    2244
0223E:  MOVLB  0
02240:  GOTO   225A
02244:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
02246:  MOVLW  AC
02248:  MOVWF  FF6
0224A:  MOVLW  01
0224C:  MOVWF  FF7
0224E:  MOVLW  00
02250:  MOVWF  FF8
02252:  CALL   1EE8
....................     } else {
02256:  GOTO   226A
....................         fprintf(PC, "\tConnect successful\r\n");
0225A:  MOVLW  BE
0225C:  MOVWF  FF6
0225E:  MOVLW  01
02260:  MOVWF  FF7
02262:  MOVLW  00
02264:  MOVWF  FF8
02266:  CALL   1EE8
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0226A:  MOVLW  D4
0226C:  MOVWF  FF6
0226E:  MOVLW  01
02270:  MOVWF  FF7
02272:  MOVLW  00
02274:  MOVWF  FF8
02276:  CALL   1EE8
0227A:  GOTO   B7EA (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
0208A:  MOVFF  9A7,9AE
0208E:  GOTO   1FB4
02092:  MOVFF  02,9A9
02096:  MOVFF  01,9A8
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
0209A:  BCF    F93.1
0209C:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
0209E:  MOVLW  0D
020A0:  MOVWF  00
020A2:  DECFSZ 00,F
020A4:  BRA    20A2
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
020A6:  MOVFF  9A9,9AF
020AA:  MOVFF  9A8,9AE
020AE:  MOVLW  10
020B0:  MOVLB  9
020B2:  MOVWF  xB0
020B4:  MOVLW  01
020B6:  MOVWF  xB1
020B8:  MOVLB  0
020BA:  CALL   2024
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
020BE:  MOVLW  0D
020C0:  MOVWF  00
020C2:  DECFSZ 00,F
020C4:  BRA    20C2
....................     output_high(ADC_CS); // Set CS pin high to end communication
020C6:  BCF    F93.1
020C8:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
020CA:  MOVLW  0D
020CC:  MOVWF  00
020CE:  DECFSZ 00,F
020D0:  BRA    20CE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
020D2:  BCF    F93.1
020D4:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
020D6:  MOVLW  0D
020D8:  MOVWF  00
020DA:  DECFSZ 00,F
020DC:  BRA    20DA
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
020DE:  MOVLB  9
020E0:  CLRF   xAF
020E2:  CLRF   xAE
020E4:  MOVLW  10
020E6:  MOVWF  xB0
020E8:  MOVLW  01
020EA:  MOVWF  xB1
020EC:  MOVLB  0
020EE:  CALL   2024
020F2:  MOVFF  02,9AB
020F6:  MOVFF  01,9AA
....................     output_high(ADC_CS); 
020FA:  BCF    F93.1
020FC:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
020FE:  MOVLB  9
02100:  MOVF   xAA,W
02102:  MOVWF  xAC
02104:  MOVF   xAB,W
02106:  ANDLW  0F
02108:  MOVWF  xAD
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
0210A:  MOVF   xAC,W
0210C:  MOVWF  01
0210E:  MOVF   xAD,W
02110:  MOVWF  02
02112:  MOVLB  0
02114:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); 
....................     output_high(DAC2_CS); 
....................     delay_ms(10); 
....................     mcp4901_1_write(0); 
....................     mcp4901_2_write(0); 
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); 
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); 
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
0688A:  MOVFF  993,997
0688E:  MOVFF  992,996
06892:  CALL   6736
06896:  MOVFF  02,995
0689A:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); 
0689E:  BCF    F93.3
068A0:  BCF    F8A.3
....................    delay_us(10); 
068A2:  MOVLW  0D
068A4:  MOVWF  00
068A6:  DECFSZ 00,F
068A8:  BRA    68A6
....................    spi_xfer(ADCDAC_STREAM, cmd); 
068AA:  MOVFF  995,9AF
068AE:  MOVFF  994,9AE
068B2:  MOVLW  10
068B4:  MOVLB  9
068B6:  MOVWF  xB0
068B8:  MOVLW  01
068BA:  MOVWF  xB1
068BC:  MOVLB  0
068BE:  CALL   2024
....................    output_high(DAC1_CS); 
068C2:  BCF    F93.3
068C4:  BSF    F8A.3
068C6:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
068C8:  MOVFF  993,997
068CC:  MOVFF  992,996
068D0:  CALL   6736
068D4:  MOVFF  02,995
068D8:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
068DC:  BCF    F93.0
068DE:  BCF    F8A.0
....................    delay_us(10); 
068E0:  MOVLW  0D
068E2:  MOVWF  00
068E4:  DECFSZ 00,F
068E6:  BRA    68E4
....................    spi_xfer(ADCDAC_STREAM, cmd); 
068E8:  MOVFF  995,9AF
068EC:  MOVFF  994,9AE
068F0:  MOVLW  10
068F2:  MOVLB  9
068F4:  MOVWF  xB0
068F6:  MOVLW  01
068F8:  MOVWF  xB1
068FA:  MOVLB  0
068FC:  CALL   2024
....................    output_high(DAC2_CS); 
06900:  BCF    F93.0
06902:  BSF    F8A.0
06904:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01FB4:  MOVLB  9
01FB6:  BCF    xAF.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01FB8:  BCF    xAF.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01FBA:  BCF    xAF.2
....................     cmd.fields.reserved3 = 0;
01FBC:  BCF    xAF.3
....................     cmd.fields.coding = 1; // Two's complement
01FBE:  BSF    xAF.4
....................     cmd.fields.range = 1; // Normal mode
01FC0:  BSF    xAF.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01FC2:  BCF    xAF.6
....................     cmd.fields.shadow = 0; // Direct access
01FC4:  BCF    xAF.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01FC6:  BSF    xB0.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01FC8:  BSF    xB0.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01FCA:  MOVF   xAE,W
01FCC:  ANDLW  01
01FCE:  MOVWF  01
01FD0:  BCF    xB0.2
01FD2:  BTFSC  01.0
01FD4:  BSF    xB0.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01FD6:  BCF    FD8.0
01FD8:  RRCF   xAE,W
01FDA:  ANDLW  01
01FDC:  MOVWF  01
01FDE:  BCF    xB0.3
01FE0:  BTFSC  01.0
01FE2:  BSF    xB0.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01FE4:  RRCF   xAE,W
01FE6:  MOVWF  00
01FE8:  RRCF   00,F
01FEA:  MOVLW  3F
01FEC:  ANDWF  00,F
01FEE:  MOVF   00,W
01FF0:  ANDLW  01
01FF2:  MOVWF  01
01FF4:  BCF    xB0.4
01FF6:  BTFSC  01.0
01FF8:  BSF    xB0.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01FFA:  RRCF   xAE,W
01FFC:  MOVWF  00
01FFE:  RRCF   00,F
02000:  RRCF   00,F
02002:  MOVLW  1F
02004:  ANDWF  00,F
02006:  MOVF   00,W
02008:  ANDLW  01
0200A:  MOVWF  01
0200C:  BCF    xB0.5
0200E:  BTFSC  01.0
02010:  BSF    xB0.5
....................     cmd.fields.seq = 0; // Random mode
02012:  BCF    xB0.6
....................     cmd.fields.write = 1; // Read operation
02014:  BSF    xB0.7
.................... 
.................... 
....................     return cmd.value;
02016:  MOVF   xAF,W
02018:  MOVWF  01
0201A:  MOVF   xB0,W
0201C:  MOVWF  02
0201E:  MOVLB  0
02020:  GOTO   2092 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
06736:  MOVLB  9
06738:  BCF    x99.7
....................    cmd.fields.buffer = 1; // Buffer used
0673A:  BSF    x99.6
....................    cmd.fields.gain = 1; // Gain 1x
0673C:  BSF    x99.5
....................    cmd.fields.shutdown = 1; // Normal operation
0673E:  BSF    x99.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
06740:  RRCF   x97,W
06742:  MOVWF  x9B
06744:  RRCF   x96,W
06746:  MOVWF  x9A
06748:  RRCF   x9B,F
0674A:  RRCF   x9A,F
0674C:  RRCF   x9B,F
0674E:  RRCF   x9A,F
06750:  RRCF   x9B,F
06752:  RRCF   x9A,F
06754:  RRCF   x9B,F
06756:  RRCF   x9A,F
06758:  RRCF   x9B,F
0675A:  RRCF   x9A,F
0675C:  RRCF   x9B,F
0675E:  RRCF   x9A,F
06760:  MOVLW  01
06762:  ANDWF  x9B,F
06764:  MOVF   x9A,W
06766:  ANDLW  01
06768:  MOVWF  00
0676A:  CLRF   03
0676C:  MOVF   00,W
0676E:  MOVWF  01
06770:  BCF    x99.3
06772:  BTFSC  01.0
06774:  BSF    x99.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
06776:  RRCF   x97,W
06778:  MOVWF  x9B
0677A:  RRCF   x96,W
0677C:  MOVWF  x9A
0677E:  RRCF   x9B,F
06780:  RRCF   x9A,F
06782:  RRCF   x9B,F
06784:  RRCF   x9A,F
06786:  RRCF   x9B,F
06788:  RRCF   x9A,F
0678A:  RRCF   x9B,F
0678C:  RRCF   x9A,F
0678E:  RRCF   x9B,F
06790:  RRCF   x9A,F
06792:  MOVLW  03
06794:  ANDWF  x9B,F
06796:  MOVF   x9A,W
06798:  ANDLW  01
0679A:  MOVWF  00
0679C:  CLRF   03
0679E:  MOVF   00,W
067A0:  MOVWF  01
067A2:  BCF    x99.2
067A4:  BTFSC  01.0
067A6:  BSF    x99.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
067A8:  RRCF   x97,W
067AA:  MOVWF  x9B
067AC:  RRCF   x96,W
067AE:  MOVWF  x9A
067B0:  RRCF   x9B,F
067B2:  RRCF   x9A,F
067B4:  RRCF   x9B,F
067B6:  RRCF   x9A,F
067B8:  RRCF   x9B,F
067BA:  RRCF   x9A,F
067BC:  RRCF   x9B,F
067BE:  RRCF   x9A,F
067C0:  MOVLW  07
067C2:  ANDWF  x9B,F
067C4:  MOVF   x9A,W
067C6:  ANDLW  01
067C8:  MOVWF  00
067CA:  CLRF   03
067CC:  MOVF   00,W
067CE:  MOVWF  01
067D0:  BCF    x99.1
067D2:  BTFSC  01.0
067D4:  BSF    x99.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
067D6:  RRCF   x97,W
067D8:  MOVWF  x9B
067DA:  RRCF   x96,W
067DC:  MOVWF  x9A
067DE:  RRCF   x9B,F
067E0:  RRCF   x9A,F
067E2:  RRCF   x9B,F
067E4:  RRCF   x9A,F
067E6:  RRCF   x9B,F
067E8:  RRCF   x9A,F
067EA:  MOVLW  0F
067EC:  ANDWF  x9B,F
067EE:  MOVF   x9A,W
067F0:  ANDLW  01
067F2:  MOVWF  00
067F4:  CLRF   03
067F6:  MOVF   00,W
067F8:  MOVWF  01
067FA:  BCF    x99.0
067FC:  BTFSC  01.0
067FE:  BSF    x99.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
06800:  RRCF   x97,W
06802:  MOVWF  x9B
06804:  RRCF   x96,W
06806:  MOVWF  x9A
06808:  RRCF   x9B,F
0680A:  RRCF   x9A,F
0680C:  RRCF   x9B,F
0680E:  RRCF   x9A,F
06810:  MOVLW  1F
06812:  ANDWF  x9B,F
06814:  MOVF   x9A,W
06816:  ANDLW  01
06818:  MOVWF  00
0681A:  CLRF   03
0681C:  MOVF   00,W
0681E:  MOVWF  01
06820:  BCF    x98.7
06822:  BTFSC  01.0
06824:  BSF    x98.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
06826:  RRCF   x97,W
06828:  MOVWF  x9B
0682A:  RRCF   x96,W
0682C:  MOVWF  x9A
0682E:  RRCF   x9B,F
06830:  RRCF   x9A,F
06832:  MOVLW  3F
06834:  ANDWF  x9B,F
06836:  MOVF   x9A,W
06838:  ANDLW  01
0683A:  MOVWF  00
0683C:  CLRF   03
0683E:  MOVF   00,W
06840:  MOVWF  01
06842:  BCF    x98.6
06844:  BTFSC  01.0
06846:  BSF    x98.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
06848:  BCF    FD8.0
0684A:  RRCF   x97,W
0684C:  MOVWF  x9B
0684E:  RRCF   x96,W
06850:  MOVWF  x9A
06852:  MOVF   x9A,W
06854:  ANDLW  01
06856:  MOVWF  00
06858:  CLRF   03
0685A:  MOVF   00,W
0685C:  MOVWF  01
0685E:  BCF    x98.5
06860:  BTFSC  01.0
06862:  BSF    x98.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
06864:  MOVF   x96,W
06866:  ANDLW  01
06868:  MOVWF  00
0686A:  CLRF   03
0686C:  MOVF   00,W
0686E:  MOVWF  01
06870:  BCF    x98.4
06872:  BTFSC  01.0
06874:  BSF    x98.4
....................    cmd.fields.reserved = 0; // Reserved bits
06876:  BCF    x98.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
06878:  BCF    x98.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0687A:  BCF    x98.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0687C:  BCF    x98.0
.................... 
....................    return cmd.value;
0687E:  MOVF   x98,W
06880:  MOVWF  01
06882:  MOVF   x99,W
06884:  MOVWF  02
06886:  MOVLB  0
06888:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03130:  MOVLB  A
03132:  MOVF   x3E,W
03134:  XORLW  00
03136:  MOVLB  0
03138:  BTFSC  FD8.2
0313A:  GOTO   314A
0313E:  XORLW  01
03140:  BTFSC  FD8.2
03142:  GOTO   31B2
03146:  GOTO   321A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0314A:  MOVLB  A
0314C:  CLRF   x47
0314E:  CLRF   x46
03150:  MOVLB  0
03152:  MOVLB  A
03154:  MOVF   x47,W
03156:  SUBWF  x45,W
03158:  BTFSC  FD8.0
0315A:  BRA    3162
0315C:  MOVLB  0
0315E:  GOTO   31AE
03162:  MOVLB  0
03164:  BTFSS  FD8.2
03166:  GOTO   317C
0316A:  MOVLB  A
0316C:  MOVF   x44,W
0316E:  SUBWF  x46,W
03170:  BTFSS  FD8.0
03172:  BRA    317A
03174:  MOVLB  0
03176:  GOTO   31AE
0317A:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0317C:  MOVLB  A
0317E:  MOVF   x42,W
03180:  ADDWF  x46,W
03182:  MOVWF  FE9
03184:  MOVF   x43,W
03186:  ADDWFC x47,W
03188:  MOVWF  FEA
0318A:  MOVFF  FEF,A4A
0318E:  MOVFF  A4A,A60
03192:  MOVLW  08
03194:  MOVWF  x61
03196:  MOVLW  01
03198:  MOVWF  x62
0319A:  MOVLB  0
0319C:  CALL   22D2
031A0:  MOVLB  A
031A2:  INCF   x46,F
031A4:  BTFSC  FD8.2
031A6:  INCF   x47,F
031A8:  MOVLB  0
031AA:  GOTO   3152
....................          break;
031AE:  GOTO   321E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
031B2:  MOVLB  A
031B4:  CLRF   x49
031B6:  CLRF   x48
031B8:  MOVLB  0
031BA:  MOVLB  A
031BC:  MOVF   x49,W
031BE:  SUBWF  x45,W
031C0:  BTFSC  FD8.0
031C2:  BRA    31CA
031C4:  MOVLB  0
031C6:  GOTO   3216
031CA:  MOVLB  0
031CC:  BTFSS  FD8.2
031CE:  GOTO   31E4
031D2:  MOVLB  A
031D4:  MOVF   x44,W
031D6:  SUBWF  x48,W
031D8:  BTFSS  FD8.0
031DA:  BRA    31E2
031DC:  MOVLB  0
031DE:  GOTO   3216
031E2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
031E4:  MOVLB  A
031E6:  MOVF   x42,W
031E8:  ADDWF  x48,W
031EA:  MOVWF  FE9
031EC:  MOVF   x43,W
031EE:  ADDWFC x49,W
031F0:  MOVWF  FEA
031F2:  MOVFF  FEF,A4A
031F6:  MOVFF  A4A,A60
031FA:  MOVLW  08
031FC:  MOVWF  x61
031FE:  MOVLW  01
03200:  MOVWF  x62
03202:  MOVLB  0
03204:  CALL   22D2
03208:  MOVLB  A
0320A:  INCF   x48,F
0320C:  BTFSC  FD8.2
0320E:  INCF   x49,F
03210:  MOVLB  0
03212:  GOTO   31BA
....................          break;
03216:  GOTO   321E
....................          
....................       default:
....................          break;
0321A:  GOTO   321E
....................    }
....................    return;
0321E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0234E:  MOVLB  A
02350:  MOVF   x44,W
02352:  XORLW  00
02354:  MOVLB  0
02356:  BTFSC  FD8.2
02358:  GOTO   2368
0235C:  XORLW  01
0235E:  BTFSC  FD8.2
02360:  GOTO   2472
02364:  GOTO   257C
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02368:  MOVLB  A
0236A:  CLRF   x53
0236C:  CLRF   x52
0236E:  MOVLB  0
02370:  MOVLB  A
02372:  MOVF   x53,W
02374:  SUBWF  x4B,W
02376:  BTFSC  FD8.0
02378:  BRA    2380
0237A:  MOVLB  0
0237C:  GOTO   23CC
02380:  MOVLB  0
02382:  BTFSS  FD8.2
02384:  GOTO   239A
02388:  MOVLB  A
0238A:  MOVF   x4A,W
0238C:  SUBWF  x52,W
0238E:  BTFSS  FD8.0
02390:  BRA    2398
02392:  MOVLB  0
02394:  GOTO   23CC
02398:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0239A:  MOVLB  A
0239C:  MOVF   x48,W
0239E:  ADDWF  x52,W
023A0:  MOVWF  FE9
023A2:  MOVF   x49,W
023A4:  ADDWFC x53,W
023A6:  MOVWF  FEA
023A8:  MOVFF  FEF,A5E
023AC:  MOVFF  A5E,A60
023B0:  MOVLW  08
023B2:  MOVWF  x61
023B4:  MOVLW  01
023B6:  MOVWF  x62
023B8:  MOVLB  0
023BA:  CALL   22D2
023BE:  MOVLB  A
023C0:  INCF   x52,F
023C2:  BTFSC  FD8.2
023C4:  INCF   x53,F
023C6:  MOVLB  0
023C8:  GOTO   2370
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
023CC:  MOVLB  A
023CE:  CLRF   x57
023D0:  CLRF   x56
023D2:  CLRF   x55
023D4:  CLRF   x54
023D6:  MOVLB  0
023D8:  MOVLB  A
023DA:  MOVF   x57,W
023DC:  SUBWF  x51,W
023DE:  BTFSC  FD8.0
023E0:  BRA    23E8
023E2:  MOVLB  0
023E4:  GOTO   246E
023E8:  MOVLB  0
023EA:  BTFSS  FD8.2
023EC:  GOTO   2432
023F0:  MOVLB  A
023F2:  MOVF   x56,W
023F4:  SUBWF  x50,W
023F6:  BTFSC  FD8.0
023F8:  BRA    2400
023FA:  MOVLB  0
023FC:  GOTO   246E
02400:  MOVLB  0
02402:  BTFSS  FD8.2
02404:  GOTO   2432
02408:  MOVLB  A
0240A:  MOVF   x55,W
0240C:  SUBWF  x4F,W
0240E:  BTFSC  FD8.0
02410:  BRA    2418
02412:  MOVLB  0
02414:  GOTO   246E
02418:  MOVLB  0
0241A:  BTFSS  FD8.2
0241C:  GOTO   2432
02420:  MOVLB  A
02422:  MOVF   x4E,W
02424:  SUBWF  x54,W
02426:  BTFSS  FD8.0
02428:  BRA    2430
0242A:  MOVLB  0
0242C:  GOTO   246E
02430:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02432:  MOVLB  A
02434:  MOVF   x4C,W
02436:  ADDWF  x54,W
02438:  MOVWF  FE9
0243A:  MOVF   x4D,W
0243C:  ADDWFC x55,W
0243E:  MOVWF  FEA
02440:  MOVLW  02
02442:  MOVWF  x60
02444:  MOVLW  08
02446:  MOVWF  x61
02448:  MOVLW  01
0244A:  MOVWF  x62
0244C:  MOVLB  0
0244E:  CALL   22D2
02452:  MOVFF  01,FEF
02456:  MOVLW  01
02458:  MOVLB  A
0245A:  ADDWF  x54,F
0245C:  BTFSC  FD8.0
0245E:  INCF   x55,F
02460:  BTFSC  FD8.2
02462:  INCF   x56,F
02464:  BTFSC  FD8.2
02466:  INCF   x57,F
02468:  MOVLB  0
0246A:  GOTO   23D8
....................          break;
0246E:  GOTO   2580
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02472:  MOVLB  A
02474:  CLRF   x59
02476:  CLRF   x58
02478:  MOVLB  0
0247A:  MOVLB  A
0247C:  MOVF   x59,W
0247E:  SUBWF  x4B,W
02480:  BTFSC  FD8.0
02482:  BRA    248A
02484:  MOVLB  0
02486:  GOTO   24D6
0248A:  MOVLB  0
0248C:  BTFSS  FD8.2
0248E:  GOTO   24A4
02492:  MOVLB  A
02494:  MOVF   x4A,W
02496:  SUBWF  x58,W
02498:  BTFSS  FD8.0
0249A:  BRA    24A2
0249C:  MOVLB  0
0249E:  GOTO   24D6
024A2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
024A4:  MOVLB  A
024A6:  MOVF   x48,W
024A8:  ADDWF  x58,W
024AA:  MOVWF  FE9
024AC:  MOVF   x49,W
024AE:  ADDWFC x59,W
024B0:  MOVWF  FEA
024B2:  MOVFF  FEF,A5E
024B6:  MOVFF  A5E,A60
024BA:  MOVLW  08
024BC:  MOVWF  x61
024BE:  MOVLW  01
024C0:  MOVWF  x62
024C2:  MOVLB  0
024C4:  CALL   22D2
024C8:  MOVLB  A
024CA:  INCF   x58,F
024CC:  BTFSC  FD8.2
024CE:  INCF   x59,F
024D0:  MOVLB  0
024D2:  GOTO   247A
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
024D6:  MOVLB  A
024D8:  CLRF   x5D
024DA:  CLRF   x5C
024DC:  CLRF   x5B
024DE:  CLRF   x5A
024E0:  MOVLB  0
024E2:  MOVLB  A
024E4:  MOVF   x5D,W
024E6:  SUBWF  x51,W
024E8:  BTFSC  FD8.0
024EA:  BRA    24F2
024EC:  MOVLB  0
024EE:  GOTO   2578
024F2:  MOVLB  0
024F4:  BTFSS  FD8.2
024F6:  GOTO   253C
024FA:  MOVLB  A
024FC:  MOVF   x5C,W
024FE:  SUBWF  x50,W
02500:  BTFSC  FD8.0
02502:  BRA    250A
02504:  MOVLB  0
02506:  GOTO   2578
0250A:  MOVLB  0
0250C:  BTFSS  FD8.2
0250E:  GOTO   253C
02512:  MOVLB  A
02514:  MOVF   x5B,W
02516:  SUBWF  x4F,W
02518:  BTFSC  FD8.0
0251A:  BRA    2522
0251C:  MOVLB  0
0251E:  GOTO   2578
02522:  MOVLB  0
02524:  BTFSS  FD8.2
02526:  GOTO   253C
0252A:  MOVLB  A
0252C:  MOVF   x4E,W
0252E:  SUBWF  x5A,W
02530:  BTFSS  FD8.0
02532:  BRA    253A
02534:  MOVLB  0
02536:  GOTO   2578
0253A:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0253C:  MOVLB  A
0253E:  MOVF   x4C,W
02540:  ADDWF  x5A,W
02542:  MOVWF  FE9
02544:  MOVF   x4D,W
02546:  ADDWFC x5B,W
02548:  MOVWF  FEA
0254A:  MOVLW  02
0254C:  MOVWF  x60
0254E:  MOVLW  08
02550:  MOVWF  x61
02552:  MOVLW  01
02554:  MOVWF  x62
02556:  MOVLB  0
02558:  CALL   22D2
0255C:  MOVFF  01,FEF
02560:  MOVLW  01
02562:  MOVLB  A
02564:  ADDWF  x5A,F
02566:  BTFSC  FD8.0
02568:  INCF   x5B,F
0256A:  BTFSC  FD8.2
0256C:  INCF   x5C,F
0256E:  BTFSC  FD8.2
02570:  INCF   x5D,F
02572:  MOVLB  0
02574:  GOTO   24E2
....................          break;
02578:  GOTO   2580
....................    
....................          
....................       default:
....................          break;
0257C:  GOTO   2580
....................    }
....................    return;
02580:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03220:  MOVLB  A
03222:  MOVF   x3E,W
03224:  XORLW  00
03226:  MOVLB  0
03228:  BTFSC  FD8.2
0322A:  GOTO   323A
0322E:  XORLW  01
03230:  BTFSC  FD8.2
03232:  GOTO   32E8
03236:  GOTO   3396
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0323A:  MOVLB  A
0323C:  CLRF   x49
0323E:  MOVLB  0
03240:  MOVLB  A
03242:  MOVF   x44,W
03244:  SUBWF  x49,W
03246:  BTFSS  FD8.0
03248:  BRA    3250
0324A:  MOVLB  0
0324C:  GOTO   3280
03250:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03252:  MOVLB  A
03254:  MOVF   x49,W
03256:  ADDWF  x42,W
03258:  MOVWF  FE9
0325A:  MOVLW  00
0325C:  ADDWFC x43,W
0325E:  MOVWF  FEA
03260:  MOVFF  FEF,A4F
03264:  MOVFF  A4F,A60
03268:  MOVLW  08
0326A:  MOVWF  x61
0326C:  MOVLW  01
0326E:  MOVWF  x62
03270:  MOVLB  0
03272:  CALL   22D2
03276:  MOVLB  A
03278:  INCF   x49,F
0327A:  MOVLB  0
0327C:  GOTO   3240
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03280:  MOVLB  A
03282:  CLRF   x4B
03284:  CLRF   x4A
03286:  MOVLB  0
03288:  MOVLB  A
0328A:  MOVF   x4B,W
0328C:  SUBWF  x48,W
0328E:  BTFSC  FD8.0
03290:  BRA    3298
03292:  MOVLB  0
03294:  GOTO   32E4
03298:  MOVLB  0
0329A:  BTFSS  FD8.2
0329C:  GOTO   32B2
032A0:  MOVLB  A
032A2:  MOVF   x47,W
032A4:  SUBWF  x4A,W
032A6:  BTFSS  FD8.0
032A8:  BRA    32B0
032AA:  MOVLB  0
032AC:  GOTO   32E4
032B0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
032B2:  MOVLB  A
032B4:  MOVF   x45,W
032B6:  ADDWF  x4A,W
032B8:  MOVWF  FE9
032BA:  MOVF   x46,W
032BC:  ADDWFC x4B,W
032BE:  MOVWF  FEA
032C0:  MOVFF  FEF,A4F
032C4:  MOVFF  A4F,A60
032C8:  MOVLW  08
032CA:  MOVWF  x61
032CC:  MOVLW  01
032CE:  MOVWF  x62
032D0:  MOVLB  0
032D2:  CALL   22D2
032D6:  MOVLB  A
032D8:  INCF   x4A,F
032DA:  BTFSC  FD8.2
032DC:  INCF   x4B,F
032DE:  MOVLB  0
032E0:  GOTO   3288
....................          break;
032E4:  GOTO   339A
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
032E8:  MOVLB  A
032EA:  CLRF   x4C
032EC:  MOVLB  0
032EE:  MOVLB  A
032F0:  MOVF   x44,W
032F2:  SUBWF  x4C,W
032F4:  BTFSS  FD8.0
032F6:  BRA    32FE
032F8:  MOVLB  0
032FA:  GOTO   332E
032FE:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03300:  MOVLB  A
03302:  MOVF   x4C,W
03304:  ADDWF  x42,W
03306:  MOVWF  FE9
03308:  MOVLW  00
0330A:  ADDWFC x43,W
0330C:  MOVWF  FEA
0330E:  MOVFF  FEF,A4F
03312:  MOVFF  A4F,A60
03316:  MOVLW  08
03318:  MOVWF  x61
0331A:  MOVLW  01
0331C:  MOVWF  x62
0331E:  MOVLB  0
03320:  CALL   22D2
03324:  MOVLB  A
03326:  INCF   x4C,F
03328:  MOVLB  0
0332A:  GOTO   32EE
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0332E:  MOVLB  A
03330:  CLRF   x4E
03332:  CLRF   x4D
03334:  MOVLB  0
03336:  MOVLB  A
03338:  MOVF   x4E,W
0333A:  SUBWF  x48,W
0333C:  BTFSC  FD8.0
0333E:  BRA    3346
03340:  MOVLB  0
03342:  GOTO   3392
03346:  MOVLB  0
03348:  BTFSS  FD8.2
0334A:  GOTO   3360
0334E:  MOVLB  A
03350:  MOVF   x47,W
03352:  SUBWF  x4D,W
03354:  BTFSS  FD8.0
03356:  BRA    335E
03358:  MOVLB  0
0335A:  GOTO   3392
0335E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03360:  MOVLB  A
03362:  MOVF   x45,W
03364:  ADDWF  x4D,W
03366:  MOVWF  FE9
03368:  MOVF   x46,W
0336A:  ADDWFC x4E,W
0336C:  MOVWF  FEA
0336E:  MOVFF  FEF,A4F
03372:  MOVFF  A4F,A60
03376:  MOVLW  08
03378:  MOVWF  x61
0337A:  MOVLW  01
0337C:  MOVWF  x62
0337E:  MOVLB  0
03380:  CALL   22D2
03384:  MOVLB  A
03386:  INCF   x4D,F
03388:  BTFSC  FD8.2
0338A:  INCF   x4E,F
0338C:  MOVLB  0
0338E:  GOTO   3336
....................          break;
03392:  GOTO   339A
....................          
....................       default:
....................          break;
03396:  GOTO   339A
....................    }
....................    return;
0339A:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0532A:  MOVFF  26B,A44
0532E:  MOVLW  01
05330:  MOVLB  A
05332:  MOVWF  x45
05334:  MOVLW  0F
05336:  MOVWF  x47
05338:  MOVLW  89
0533A:  MOVWF  x46
0533C:  MOVLB  0
0533E:  CALL   227E
05342:  MOVFF  26B,A44
05346:  MOVLB  A
05348:  CLRF   x45
0534A:  MOVLW  0F
0534C:  MOVWF  x47
0534E:  MOVLW  92
05350:  MOVWF  x46
05352:  MOVLB  0
05354:  CALL   227E
05358:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
0339C:  MOVLW  05
0339E:  MOVLB  A
033A0:  MOVWF  x42
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
033A2:  MOVFF  A40,A44
033A6:  CLRF   x45
033A8:  MOVLW  0F
033AA:  MOVWF  x47
033AC:  MOVLW  89
033AE:  MOVWF  x46
033B0:  MOVLB  0
033B2:  CALL   227E
033B6:  MOVFF  A40,A44
033BA:  MOVLB  A
033BC:  CLRF   x45
033BE:  MOVLW  0F
033C0:  MOVWF  x47
033C2:  MOVLW  92
033C4:  MOVWF  x46
033C6:  MOVLB  0
033C8:  CALL   227E
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
033CC:  MOVFF  A41,A47
033D0:  MOVFF  A40,A46
033D4:  MOVFF  A3F,A45
033D8:  MOVFF  A3E,A44
033DC:  MOVLW  0A
033DE:  MOVLB  A
033E0:  MOVWF  x49
033E2:  MOVLW  42
033E4:  MOVWF  x48
033E6:  CLRF   x4B
033E8:  MOVLW  01
033EA:  MOVWF  x4A
033EC:  MOVLW  0A
033EE:  MOVWF  x4D
033F0:  MOVLW  43
033F2:  MOVWF  x4C
033F4:  CLRF   x51
033F6:  CLRF   x50
033F8:  CLRF   x4F
033FA:  MOVLW  01
033FC:  MOVWF  x4E
033FE:  MOVLB  0
03400:  CALL   234E
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03404:  MOVFF  A40,A44
03408:  MOVLW  01
0340A:  MOVLB  A
0340C:  MOVWF  x45
0340E:  MOVLW  0F
03410:  MOVWF  x47
03412:  MOVLW  89
03414:  MOVWF  x46
03416:  MOVLB  0
03418:  CALL   227E
0341C:  MOVFF  A40,A44
03420:  MOVLB  A
03422:  CLRF   x45
03424:  MOVLW  0F
03426:  MOVWF  x47
03428:  MOVLW  92
0342A:  MOVWF  x46
0342C:  MOVLB  0
0342E:  CALL   227E
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03432:  MOVLB  A
03434:  MOVF   x43,W
03436:  MOVWF  01
03438:  MOVLB  0
0343A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04690:  MOVLB  1
04692:  MOVF   xA6,F
04694:  BTFSC  FD8.2
04696:  BRA    469E
04698:  MOVLB  0
0469A:  GOTO   47F6
0469E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
046A0:  MOVLW  06
046A2:  MOVLB  1
046A4:  MOVWF  xAD
046A6:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
046A8:  MOVLW  D8
046AA:  MOVLB  1
046AC:  MOVWF  xAE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
046AE:  MOVFF  1AB,1BA
046B2:  MOVFF  1AC,1BB
046B6:  CLRF   xBC
046B8:  CLRF   xBD
046BA:  MOVF   xBA,W
046BC:  MOVWF  00
046BE:  CLRF   01
046C0:  CLRF   02
046C2:  CLRF   03
046C4:  MOVFF  00,1AF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
046C8:  MOVFF  1AA,1BA
046CC:  MOVFF  1AB,1BB
046D0:  MOVFF  1AC,1BC
046D4:  CLRF   xBD
046D6:  MOVF   xBA,W
046D8:  MOVWF  00
046DA:  CLRF   01
046DC:  CLRF   02
046DE:  CLRF   03
046E0:  MOVFF  00,1B0
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
046E4:  MOVF   xA9,W
046E6:  MOVWF  00
046E8:  CLRF   01
046EA:  CLRF   02
046EC:  CLRF   03
046EE:  MOVFF  00,1B1
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
046F2:  MOVFF  1A7,A44
046F6:  MOVLB  A
046F8:  CLRF   x45
046FA:  MOVLW  0F
046FC:  MOVWF  x47
046FE:  MOVLW  89
04700:  MOVWF  x46
04702:  MOVLB  0
04704:  CALL   227E
04708:  MOVFF  1A7,A44
0470C:  MOVLB  A
0470E:  CLRF   x45
04710:  MOVLW  0F
04712:  MOVWF  x47
04714:  MOVLW  92
04716:  MOVWF  x46
04718:  MOVLB  0
0471A:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0471E:  MOVFF  1A8,A41
04722:  MOVFF  1A7,A40
04726:  MOVFF  1A6,A3F
0472A:  MOVFF  1A5,A3E
0472E:  MOVLW  01
04730:  MOVLB  A
04732:  MOVWF  x43
04734:  MOVLW  AD
04736:  MOVWF  x42
04738:  CLRF   x45
0473A:  MOVLW  01
0473C:  MOVWF  x44
0473E:  MOVLB  0
04740:  CALL   3130
....................       output_high(flash_stream.cs_pin);
04744:  MOVFF  1A7,A44
04748:  MOVLW  01
0474A:  MOVLB  A
0474C:  MOVWF  x45
0474E:  MOVLW  0F
04750:  MOVWF  x47
04752:  MOVLW  89
04754:  MOVWF  x46
04756:  MOVLB  0
04758:  CALL   227E
0475C:  MOVFF  1A7,A44
04760:  MOVLB  A
04762:  CLRF   x45
04764:  MOVLW  0F
04766:  MOVWF  x47
04768:  MOVLW  92
0476A:  MOVWF  x46
0476C:  MOVLB  0
0476E:  CALL   227E
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04772:  MOVFF  1A7,A44
04776:  MOVLB  A
04778:  CLRF   x45
0477A:  MOVLW  0F
0477C:  MOVWF  x47
0477E:  MOVLW  89
04780:  MOVWF  x46
04782:  MOVLB  0
04784:  CALL   227E
04788:  MOVFF  1A7,A44
0478C:  MOVLB  A
0478E:  CLRF   x45
04790:  MOVLW  0F
04792:  MOVWF  x47
04794:  MOVLW  92
04796:  MOVWF  x46
04798:  MOVLB  0
0479A:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0479E:  MOVFF  1A8,A41
047A2:  MOVFF  1A7,A40
047A6:  MOVFF  1A6,A3F
047AA:  MOVFF  1A5,A3E
047AE:  MOVLW  01
047B0:  MOVLB  A
047B2:  MOVWF  x43
047B4:  MOVLW  AE
047B6:  MOVWF  x42
047B8:  CLRF   x45
047BA:  MOVLW  04
047BC:  MOVWF  x44
047BE:  MOVLB  0
047C0:  CALL   3130
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
047C4:  MOVFF  1A7,A44
047C8:  MOVLW  01
047CA:  MOVLB  A
047CC:  MOVWF  x45
047CE:  MOVLW  0F
047D0:  MOVWF  x47
047D2:  MOVLW  89
047D4:  MOVWF  x46
047D6:  MOVLB  0
047D8:  CALL   227E
047DC:  MOVFF  1A7,A44
047E0:  MOVLB  A
047E2:  CLRF   x45
047E4:  MOVLW  0F
047E6:  MOVWF  x47
047E8:  MOVLW  92
047EA:  MOVWF  x46
047EC:  MOVLB  0
047EE:  CALL   227E
....................    }
047F2:  GOTO   4976
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
047F6:  MOVLB  1
047F8:  DECFSZ xA6,W
047FA:  BRA    4800
047FC:  BRA    4806
047FE:  MOVLB  0
04800:  MOVLB  0
04802:  GOTO   4976
04806:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04808:  MOVLW  06
0480A:  MOVLB  1
0480C:  MOVWF  xB2
0480E:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
04810:  MOVLW  DC
04812:  MOVLB  1
04814:  MOVWF  xB3
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04816:  MOVFF  1AC,1BA
0481A:  CLRF   xBB
0481C:  CLRF   xBC
0481E:  CLRF   xBD
04820:  MOVF   xBA,W
04822:  MOVWF  00
04824:  CLRF   01
04826:  CLRF   02
04828:  CLRF   03
0482A:  MOVFF  00,1B4
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0482E:  MOVFF  1AB,1BA
04832:  MOVFF  1AC,1BB
04836:  CLRF   xBC
04838:  CLRF   xBD
0483A:  MOVF   xBA,W
0483C:  MOVWF  00
0483E:  CLRF   01
04840:  CLRF   02
04842:  CLRF   03
04844:  MOVFF  00,1B5
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04848:  MOVFF  1AA,1BA
0484C:  MOVFF  1AB,1BB
04850:  MOVFF  1AC,1BC
04854:  CLRF   xBD
04856:  MOVF   xBA,W
04858:  MOVWF  00
0485A:  CLRF   01
0485C:  CLRF   02
0485E:  CLRF   03
04860:  MOVFF  00,1B6
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04864:  MOVF   xA9,W
04866:  MOVWF  00
04868:  CLRF   01
0486A:  CLRF   02
0486C:  CLRF   03
0486E:  MOVFF  00,1B7
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04872:  MOVFF  1A7,A44
04876:  MOVLB  A
04878:  CLRF   x45
0487A:  MOVLW  0F
0487C:  MOVWF  x47
0487E:  MOVLW  89
04880:  MOVWF  x46
04882:  MOVLB  0
04884:  CALL   227E
04888:  MOVFF  1A7,A44
0488C:  MOVLB  A
0488E:  CLRF   x45
04890:  MOVLW  0F
04892:  MOVWF  x47
04894:  MOVLW  92
04896:  MOVWF  x46
04898:  MOVLB  0
0489A:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0489E:  MOVFF  1A8,A41
048A2:  MOVFF  1A7,A40
048A6:  MOVFF  1A6,A3F
048AA:  MOVFF  1A5,A3E
048AE:  MOVLW  01
048B0:  MOVLB  A
048B2:  MOVWF  x43
048B4:  MOVLW  B2
048B6:  MOVWF  x42
048B8:  CLRF   x45
048BA:  MOVLW  01
048BC:  MOVWF  x44
048BE:  MOVLB  0
048C0:  CALL   3130
....................       output_high(flash_stream.cs_pin);
048C4:  MOVFF  1A7,A44
048C8:  MOVLW  01
048CA:  MOVLB  A
048CC:  MOVWF  x45
048CE:  MOVLW  0F
048D0:  MOVWF  x47
048D2:  MOVLW  89
048D4:  MOVWF  x46
048D6:  MOVLB  0
048D8:  CALL   227E
048DC:  MOVFF  1A7,A44
048E0:  MOVLB  A
048E2:  CLRF   x45
048E4:  MOVLW  0F
048E6:  MOVWF  x47
048E8:  MOVLW  92
048EA:  MOVWF  x46
048EC:  MOVLB  0
048EE:  CALL   227E
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
048F2:  MOVFF  1A7,A44
048F6:  MOVLB  A
048F8:  CLRF   x45
048FA:  MOVLW  0F
048FC:  MOVWF  x47
048FE:  MOVLW  89
04900:  MOVWF  x46
04902:  MOVLB  0
04904:  CALL   227E
04908:  MOVFF  1A7,A44
0490C:  MOVLB  A
0490E:  CLRF   x45
04910:  MOVLW  0F
04912:  MOVWF  x47
04914:  MOVLW  92
04916:  MOVWF  x46
04918:  MOVLB  0
0491A:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0491E:  MOVFF  1A8,A41
04922:  MOVFF  1A7,A40
04926:  MOVFF  1A6,A3F
0492A:  MOVFF  1A5,A3E
0492E:  MOVLW  01
04930:  MOVLB  A
04932:  MOVWF  x43
04934:  MOVLW  B3
04936:  MOVWF  x42
04938:  CLRF   x45
0493A:  MOVLW  05
0493C:  MOVWF  x44
0493E:  MOVLB  0
04940:  CALL   3130
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04944:  MOVFF  1A7,A44
04948:  MOVLW  01
0494A:  MOVLB  A
0494C:  MOVWF  x45
0494E:  MOVLW  0F
04950:  MOVWF  x47
04952:  MOVLW  89
04954:  MOVWF  x46
04956:  MOVLB  0
04958:  CALL   227E
0495C:  MOVFF  1A7,A44
04960:  MOVLB  A
04962:  CLRF   x45
04964:  MOVLW  0F
04966:  MOVWF  x47
04968:  MOVLW  92
0496A:  MOVWF  x46
0496C:  MOVLB  0
0496E:  CALL   227E
....................    }
04972:  GOTO   4976
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04976:  MOVLB  1
04978:  CLRF   xB8
0497A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
0497C:  MOVFF  1A8,A41
04980:  MOVFF  1A7,A40
04984:  MOVFF  1A6,A3F
04988:  MOVFF  1A5,A3E
0498C:  CALL   339C
04990:  MOVF   01,W
04992:  ANDLW  01
04994:  SUBLW  01
04996:  BTFSS  FD8.2
04998:  GOTO   49EA
....................       if(timeout_counter > 10)
0499C:  MOVLB  1
0499E:  MOVF   xB8,W
049A0:  SUBLW  0A
049A2:  BTFSS  FD8.0
049A4:  BRA    49AC
049A6:  MOVLB  0
049A8:  GOTO   49BE
049AC:  MOVLB  0
....................          delay_ms(200);
049AE:  MOVLW  C8
049B0:  MOVLB  A
049B2:  MOVWF  x3E
049B4:  MOVLB  0
049B6:  CALL   1E68
049BA:  GOTO   49CA
....................       else
....................          delay_ms(10);   
049BE:  MOVLW  0A
049C0:  MOVLB  A
049C2:  MOVWF  x3E
049C4:  MOVLB  0
049C6:  CALL   1E68
....................       
....................       if(timeout_counter > 100){
049CA:  MOVLB  1
049CC:  MOVF   xB8,W
049CE:  SUBLW  64
049D0:  BTFSS  FD8.0
049D2:  BRA    49DA
049D4:  MOVLB  0
049D6:  GOTO   49E0
049DA:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
049DC:  GOTO   49EA
....................       }  
....................       timeout_counter++;
049E0:  MOVLB  1
049E2:  INCF   xB8,F
049E4:  MOVLB  0
049E6:  GOTO   497C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
049EA:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
037C0:  MOVLB  A
037C2:  MOVF   x27,F
037C4:  BTFSC  FD8.2
037C6:  BRA    37CE
037C8:  MOVLB  0
037CA:  GOTO   3924
037CE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
037D0:  MOVLW  06
037D2:  MOVLB  A
037D4:  MOVWF  x2E
037D6:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
037D8:  MOVLW  20
037DA:  MOVLB  A
037DC:  MOVWF  x2F
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
037DE:  MOVFF  A2C,A3B
037E2:  MOVFF  A2D,A3C
037E6:  CLRF   x3D
037E8:  CLRF   x3E
037EA:  MOVF   x3B,W
037EC:  MOVWF  00
037EE:  CLRF   01
037F0:  CLRF   02
037F2:  CLRF   03
037F4:  MOVFF  00,A30
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
037F8:  MOVFF  A2B,A3B
037FC:  MOVFF  A2C,A3C
03800:  MOVFF  A2D,A3D
03804:  CLRF   x3E
03806:  MOVF   x3B,W
03808:  MOVWF  00
0380A:  CLRF   01
0380C:  CLRF   02
0380E:  CLRF   03
03810:  MOVFF  00,A31
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03814:  MOVF   x2A,W
03816:  MOVWF  00
03818:  CLRF   01
0381A:  CLRF   02
0381C:  CLRF   03
0381E:  MOVFF  00,A32
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03822:  MOVFF  A28,A44
03826:  CLRF   x45
03828:  MOVLW  0F
0382A:  MOVWF  x47
0382C:  MOVLW  89
0382E:  MOVWF  x46
03830:  MOVLB  0
03832:  CALL   227E
03836:  MOVFF  A28,A44
0383A:  MOVLB  A
0383C:  CLRF   x45
0383E:  MOVLW  0F
03840:  MOVWF  x47
03842:  MOVLW  92
03844:  MOVWF  x46
03846:  MOVLB  0
03848:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0384C:  MOVFF  A29,A41
03850:  MOVFF  A28,A40
03854:  MOVFF  A27,A3F
03858:  MOVFF  A26,A3E
0385C:  MOVLW  0A
0385E:  MOVLB  A
03860:  MOVWF  x43
03862:  MOVLW  2E
03864:  MOVWF  x42
03866:  CLRF   x45
03868:  MOVLW  01
0386A:  MOVWF  x44
0386C:  MOVLB  0
0386E:  CALL   3130
....................       output_high(flash_stream.cs_pin);
03872:  MOVFF  A28,A44
03876:  MOVLW  01
03878:  MOVLB  A
0387A:  MOVWF  x45
0387C:  MOVLW  0F
0387E:  MOVWF  x47
03880:  MOVLW  89
03882:  MOVWF  x46
03884:  MOVLB  0
03886:  CALL   227E
0388A:  MOVFF  A28,A44
0388E:  MOVLB  A
03890:  CLRF   x45
03892:  MOVLW  0F
03894:  MOVWF  x47
03896:  MOVLW  92
03898:  MOVWF  x46
0389A:  MOVLB  0
0389C:  CALL   227E
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
038A0:  MOVFF  A28,A44
038A4:  MOVLB  A
038A6:  CLRF   x45
038A8:  MOVLW  0F
038AA:  MOVWF  x47
038AC:  MOVLW  89
038AE:  MOVWF  x46
038B0:  MOVLB  0
038B2:  CALL   227E
038B6:  MOVFF  A28,A44
038BA:  MOVLB  A
038BC:  CLRF   x45
038BE:  MOVLW  0F
038C0:  MOVWF  x47
038C2:  MOVLW  92
038C4:  MOVWF  x46
038C6:  MOVLB  0
038C8:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
038CC:  MOVFF  A29,A41
038D0:  MOVFF  A28,A40
038D4:  MOVFF  A27,A3F
038D8:  MOVFF  A26,A3E
038DC:  MOVLW  0A
038DE:  MOVLB  A
038E0:  MOVWF  x43
038E2:  MOVLW  2F
038E4:  MOVWF  x42
038E6:  CLRF   x45
038E8:  MOVLW  04
038EA:  MOVWF  x44
038EC:  MOVLB  0
038EE:  CALL   3130
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
038F2:  MOVFF  A28,A44
038F6:  MOVLW  01
038F8:  MOVLB  A
038FA:  MOVWF  x45
038FC:  MOVLW  0F
038FE:  MOVWF  x47
03900:  MOVLW  89
03902:  MOVWF  x46
03904:  MOVLB  0
03906:  CALL   227E
0390A:  MOVFF  A28,A44
0390E:  MOVLB  A
03910:  CLRF   x45
03912:  MOVLW  0F
03914:  MOVWF  x47
03916:  MOVLW  92
03918:  MOVWF  x46
0391A:  MOVLB  0
0391C:  CALL   227E
....................    }
03920:  GOTO   3AA2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03924:  MOVLB  A
03926:  DECFSZ x27,W
03928:  BRA    392E
0392A:  BRA    3934
0392C:  MOVLB  0
0392E:  MOVLB  0
03930:  GOTO   3AA2
03934:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03936:  MOVLW  06
03938:  MOVLB  A
0393A:  MOVWF  x33
0393C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
0393E:  MOVLW  21
03940:  MOVLB  A
03942:  MOVWF  x34
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
03944:  MOVFF  A2D,A3B
03948:  CLRF   x3C
0394A:  CLRF   x3D
0394C:  CLRF   x3E
0394E:  MOVF   x3B,W
03950:  MOVWF  00
03952:  CLRF   01
03954:  CLRF   02
03956:  CLRF   03
03958:  MOVFF  00,A35
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0395C:  MOVFF  A2C,A3B
03960:  MOVFF  A2D,A3C
03964:  CLRF   x3D
03966:  CLRF   x3E
03968:  MOVF   x3B,W
0396A:  MOVWF  00
0396C:  CLRF   01
0396E:  CLRF   02
03970:  CLRF   03
03972:  MOVFF  00,A36
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03976:  MOVFF  A2B,A3B
0397A:  MOVFF  A2C,A3C
0397E:  MOVFF  A2D,A3D
03982:  CLRF   x3E
03984:  MOVF   x3B,W
03986:  MOVWF  00
03988:  CLRF   01
0398A:  CLRF   02
0398C:  CLRF   03
0398E:  MOVFF  00,A37
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03992:  MOVF   x2A,W
03994:  MOVWF  00
03996:  CLRF   01
03998:  CLRF   02
0399A:  CLRF   03
0399C:  MOVFF  00,A38
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
039A0:  MOVFF  A28,A44
039A4:  CLRF   x45
039A6:  MOVLW  0F
039A8:  MOVWF  x47
039AA:  MOVLW  89
039AC:  MOVWF  x46
039AE:  MOVLB  0
039B0:  CALL   227E
039B4:  MOVFF  A28,A44
039B8:  MOVLB  A
039BA:  CLRF   x45
039BC:  MOVLW  0F
039BE:  MOVWF  x47
039C0:  MOVLW  92
039C2:  MOVWF  x46
039C4:  MOVLB  0
039C6:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
039CA:  MOVFF  A29,A41
039CE:  MOVFF  A28,A40
039D2:  MOVFF  A27,A3F
039D6:  MOVFF  A26,A3E
039DA:  MOVLW  0A
039DC:  MOVLB  A
039DE:  MOVWF  x43
039E0:  MOVLW  33
039E2:  MOVWF  x42
039E4:  CLRF   x45
039E6:  MOVLW  01
039E8:  MOVWF  x44
039EA:  MOVLB  0
039EC:  CALL   3130
....................       output_high(flash_stream.cs_pin);
039F0:  MOVFF  A28,A44
039F4:  MOVLW  01
039F6:  MOVLB  A
039F8:  MOVWF  x45
039FA:  MOVLW  0F
039FC:  MOVWF  x47
039FE:  MOVLW  89
03A00:  MOVWF  x46
03A02:  MOVLB  0
03A04:  CALL   227E
03A08:  MOVFF  A28,A44
03A0C:  MOVLB  A
03A0E:  CLRF   x45
03A10:  MOVLW  0F
03A12:  MOVWF  x47
03A14:  MOVLW  92
03A16:  MOVWF  x46
03A18:  MOVLB  0
03A1A:  CALL   227E
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03A1E:  MOVFF  A28,A44
03A22:  MOVLB  A
03A24:  CLRF   x45
03A26:  MOVLW  0F
03A28:  MOVWF  x47
03A2A:  MOVLW  89
03A2C:  MOVWF  x46
03A2E:  MOVLB  0
03A30:  CALL   227E
03A34:  MOVFF  A28,A44
03A38:  MOVLB  A
03A3A:  CLRF   x45
03A3C:  MOVLW  0F
03A3E:  MOVWF  x47
03A40:  MOVLW  92
03A42:  MOVWF  x46
03A44:  MOVLB  0
03A46:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
03A4A:  MOVFF  A29,A41
03A4E:  MOVFF  A28,A40
03A52:  MOVFF  A27,A3F
03A56:  MOVFF  A26,A3E
03A5A:  MOVLW  0A
03A5C:  MOVLB  A
03A5E:  MOVWF  x43
03A60:  MOVLW  34
03A62:  MOVWF  x42
03A64:  CLRF   x45
03A66:  MOVLW  05
03A68:  MOVWF  x44
03A6A:  MOVLB  0
03A6C:  CALL   3130
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03A70:  MOVFF  A28,A44
03A74:  MOVLW  01
03A76:  MOVLB  A
03A78:  MOVWF  x45
03A7A:  MOVLW  0F
03A7C:  MOVWF  x47
03A7E:  MOVLW  89
03A80:  MOVWF  x46
03A82:  MOVLB  0
03A84:  CALL   227E
03A88:  MOVFF  A28,A44
03A8C:  MOVLB  A
03A8E:  CLRF   x45
03A90:  MOVLW  0F
03A92:  MOVWF  x47
03A94:  MOVLW  92
03A96:  MOVWF  x46
03A98:  MOVLB  0
03A9A:  CALL   227E
....................    }
03A9E:  GOTO   3AA2
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03AA2:  MOVLB  A
03AA4:  CLRF   x39
03AA6:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03AA8:  MOVFF  A29,A41
03AAC:  MOVFF  A28,A40
03AB0:  MOVFF  A27,A3F
03AB4:  MOVFF  A26,A3E
03AB8:  CALL   339C
03ABC:  MOVF   01,W
03ABE:  ANDLW  01
03AC0:  SUBLW  01
03AC2:  BTFSS  FD8.2
03AC4:  GOTO   3B16
....................       if(timeout_counter > 10)
03AC8:  MOVLB  A
03ACA:  MOVF   x39,W
03ACC:  SUBLW  0A
03ACE:  BTFSS  FD8.0
03AD0:  BRA    3AD8
03AD2:  MOVLB  0
03AD4:  GOTO   3AEA
03AD8:  MOVLB  0
....................          delay_ms(200);
03ADA:  MOVLW  C8
03ADC:  MOVLB  A
03ADE:  MOVWF  x3E
03AE0:  MOVLB  0
03AE2:  CALL   1E68
03AE6:  GOTO   3AF6
....................       else
....................          delay_ms(10);   
03AEA:  MOVLW  0A
03AEC:  MOVLB  A
03AEE:  MOVWF  x3E
03AF0:  MOVLB  0
03AF2:  CALL   1E68
....................       
....................       if(timeout_counter > 100){
03AF6:  MOVLB  A
03AF8:  MOVF   x39,W
03AFA:  SUBLW  64
03AFC:  BTFSS  FD8.0
03AFE:  BRA    3B06
03B00:  MOVLB  0
03B02:  GOTO   3B0C
03B06:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03B08:  GOTO   3B16
....................       }  
....................       timeout_counter++;
03B0C:  MOVLB  A
03B0E:  INCF   x39,F
03B10:  MOVLB  0
03B12:  GOTO   3AA8
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
03B16:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02648:  MOVLB  2
0264A:  MOVF   x7F,F
0264C:  BTFSC  FD8.2
0264E:  BRA    2656
02650:  MOVLB  0
02652:  GOTO   2748
02656:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02658:  MOVLW  03
0265A:  MOVLB  2
0265C:  MOVWF  x8C
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0265E:  MOVFF  284,296
02662:  MOVFF  285,297
02666:  CLRF   x98
02668:  CLRF   x99
0266A:  MOVF   x96,W
0266C:  MOVWF  00
0266E:  CLRF   01
02670:  CLRF   02
02672:  CLRF   03
02674:  MOVFF  00,28D
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02678:  MOVFF  283,296
0267C:  MOVFF  284,297
02680:  MOVFF  285,298
02684:  CLRF   x99
02686:  MOVF   x96,W
02688:  MOVWF  00
0268A:  CLRF   01
0268C:  CLRF   02
0268E:  CLRF   03
02690:  MOVFF  00,28E
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02694:  MOVF   x82,W
02696:  MOVWF  00
02698:  CLRF   01
0269A:  CLRF   02
0269C:  CLRF   03
0269E:  MOVFF  00,28F
....................             
....................       output_low(flash_stream.cs_pin);
026A2:  MOVFF  280,A44
026A6:  MOVLB  A
026A8:  CLRF   x45
026AA:  MOVLW  0F
026AC:  MOVWF  x47
026AE:  MOVLW  89
026B0:  MOVWF  x46
026B2:  MOVLB  0
026B4:  CALL   227E
026B8:  MOVFF  280,A44
026BC:  MOVLB  A
026BE:  CLRF   x45
026C0:  MOVLW  0F
026C2:  MOVWF  x47
026C4:  MOVLW  92
026C6:  MOVWF  x46
026C8:  MOVLB  0
026CA:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
026CE:  MOVFF  281,A47
026D2:  MOVFF  280,A46
026D6:  MOVFF  27F,A45
026DA:  MOVFF  27E,A44
026DE:  MOVLW  02
026E0:  MOVLB  A
026E2:  MOVWF  x49
026E4:  MOVLW  8C
026E6:  MOVWF  x48
026E8:  CLRF   x4B
026EA:  MOVLW  04
026EC:  MOVWF  x4A
026EE:  MOVFF  287,A4D
026F2:  MOVFF  286,A4C
026F6:  MOVFF  28B,A51
026FA:  MOVFF  28A,A50
026FE:  MOVFF  289,A4F
02702:  MOVFF  288,A4E
02706:  MOVLB  0
02708:  CALL   234E
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0270C:  MOVLW  02
0270E:  MOVWF  00
02710:  DECFSZ 00,F
02712:  BRA    2710
02714:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02716:  MOVFF  280,A44
0271A:  MOVLW  01
0271C:  MOVLB  A
0271E:  MOVWF  x45
02720:  MOVLW  0F
02722:  MOVWF  x47
02724:  MOVLW  89
02726:  MOVWF  x46
02728:  MOVLB  0
0272A:  CALL   227E
0272E:  MOVFF  280,A44
02732:  MOVLB  A
02734:  CLRF   x45
02736:  MOVLW  0F
02738:  MOVWF  x47
0273A:  MOVLW  92
0273C:  MOVWF  x46
0273E:  MOVLB  0
02740:  CALL   227E
....................    }
02744:  GOTO   285E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02748:  MOVLB  2
0274A:  DECFSZ x7F,W
0274C:  BRA    2752
0274E:  BRA    2758
02750:  MOVLB  0
02752:  MOVLB  0
02754:  GOTO   285E
02758:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0275A:  MOVLW  13
0275C:  MOVLB  2
0275E:  MOVWF  x90
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02760:  MOVFF  285,296
02764:  CLRF   x97
02766:  CLRF   x98
02768:  CLRF   x99
0276A:  MOVF   x96,W
0276C:  MOVWF  00
0276E:  CLRF   01
02770:  CLRF   02
02772:  CLRF   03
02774:  MOVFF  00,291
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02778:  MOVFF  284,296
0277C:  MOVFF  285,297
02780:  CLRF   x98
02782:  CLRF   x99
02784:  MOVF   x96,W
02786:  MOVWF  00
02788:  CLRF   01
0278A:  CLRF   02
0278C:  CLRF   03
0278E:  MOVFF  00,292
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02792:  MOVFF  283,296
02796:  MOVFF  284,297
0279A:  MOVFF  285,298
0279E:  CLRF   x99
027A0:  MOVF   x96,W
027A2:  MOVWF  00
027A4:  CLRF   01
027A6:  CLRF   02
027A8:  CLRF   03
027AA:  MOVFF  00,293
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
027AE:  MOVF   x82,W
027B0:  MOVWF  00
027B2:  CLRF   01
027B4:  CLRF   02
027B6:  CLRF   03
027B8:  MOVFF  00,294
....................    
....................       output_low(flash_stream.cs_pin);
027BC:  MOVFF  280,A44
027C0:  MOVLB  A
027C2:  CLRF   x45
027C4:  MOVLW  0F
027C6:  MOVWF  x47
027C8:  MOVLW  89
027CA:  MOVWF  x46
027CC:  MOVLB  0
027CE:  CALL   227E
027D2:  MOVFF  280,A44
027D6:  MOVLB  A
027D8:  CLRF   x45
027DA:  MOVLW  0F
027DC:  MOVWF  x47
027DE:  MOVLW  92
027E0:  MOVWF  x46
027E2:  MOVLB  0
027E4:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
027E8:  MOVFF  281,A47
027EC:  MOVFF  280,A46
027F0:  MOVFF  27F,A45
027F4:  MOVFF  27E,A44
027F8:  MOVLW  02
027FA:  MOVLB  A
027FC:  MOVWF  x49
027FE:  MOVLW  90
02800:  MOVWF  x48
02802:  CLRF   x4B
02804:  MOVLW  05
02806:  MOVWF  x4A
02808:  MOVFF  287,A4D
0280C:  MOVFF  286,A4C
02810:  MOVFF  28B,A51
02814:  MOVFF  28A,A50
02818:  MOVFF  289,A4F
0281C:  MOVFF  288,A4E
02820:  MOVLB  0
02822:  CALL   234E
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02826:  MOVLW  02
02828:  MOVWF  00
0282A:  DECFSZ 00,F
0282C:  BRA    282A
0282E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02830:  MOVFF  280,A44
02834:  MOVLW  01
02836:  MOVLB  A
02838:  MOVWF  x45
0283A:  MOVLW  0F
0283C:  MOVWF  x47
0283E:  MOVLW  89
02840:  MOVWF  x46
02842:  MOVLB  0
02844:  CALL   227E
02848:  MOVFF  280,A44
0284C:  MOVLB  A
0284E:  CLRF   x45
02850:  MOVLW  0F
02852:  MOVWF  x47
02854:  MOVLW  92
02856:  MOVWF  x46
02858:  MOVLB  0
0285A:  CALL   227E
....................    }
....................    return;
0285E:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0343C:  MOVLB  A
0343E:  MOVF   x27,F
03440:  BTFSC  FD8.2
03442:  BRA    344A
03444:  MOVLB  0
03446:  GOTO   35B8
0344A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0344C:  MOVLW  06
0344E:  MOVLB  A
03450:  MOVWF  x32
03452:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03454:  MOVLW  02
03456:  MOVLB  A
03458:  MOVWF  x33
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0345A:  MOVFF  A2C,A3F
0345E:  MOVFF  A2D,A40
03462:  CLRF   x41
03464:  CLRF   x42
03466:  MOVF   x3F,W
03468:  MOVWF  00
0346A:  CLRF   01
0346C:  CLRF   02
0346E:  CLRF   03
03470:  MOVFF  00,A34
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03474:  MOVFF  A2B,A3F
03478:  MOVFF  A2C,A40
0347C:  MOVFF  A2D,A41
03480:  CLRF   x42
03482:  MOVF   x3F,W
03484:  MOVWF  00
03486:  CLRF   01
03488:  CLRF   02
0348A:  CLRF   03
0348C:  MOVFF  00,A35
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03490:  MOVF   x2A,W
03492:  MOVWF  00
03494:  CLRF   01
03496:  CLRF   02
03498:  CLRF   03
0349A:  MOVFF  00,A36
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0349E:  MOVFF  A28,A44
034A2:  CLRF   x45
034A4:  MOVLW  0F
034A6:  MOVWF  x47
034A8:  MOVLW  89
034AA:  MOVWF  x46
034AC:  MOVLB  0
034AE:  CALL   227E
034B2:  MOVFF  A28,A44
034B6:  MOVLB  A
034B8:  CLRF   x45
034BA:  MOVLW  0F
034BC:  MOVWF  x47
034BE:  MOVLW  92
034C0:  MOVWF  x46
034C2:  MOVLB  0
034C4:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
034C8:  MOVFF  A29,A41
034CC:  MOVFF  A28,A40
034D0:  MOVFF  A27,A3F
034D4:  MOVFF  A26,A3E
034D8:  MOVLW  0A
034DA:  MOVLB  A
034DC:  MOVWF  x43
034DE:  MOVLW  32
034E0:  MOVWF  x42
034E2:  CLRF   x45
034E4:  MOVLW  01
034E6:  MOVWF  x44
034E8:  MOVLB  0
034EA:  CALL   3130
....................       output_high(flash_stream.cs_pin);
034EE:  MOVFF  A28,A44
034F2:  MOVLW  01
034F4:  MOVLB  A
034F6:  MOVWF  x45
034F8:  MOVLW  0F
034FA:  MOVWF  x47
034FC:  MOVLW  89
034FE:  MOVWF  x46
03500:  MOVLB  0
03502:  CALL   227E
03506:  MOVFF  A28,A44
0350A:  MOVLB  A
0350C:  CLRF   x45
0350E:  MOVLW  0F
03510:  MOVWF  x47
03512:  MOVLW  92
03514:  MOVWF  x46
03516:  MOVLB  0
03518:  CALL   227E
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0351C:  MOVFF  A28,A44
03520:  MOVLB  A
03522:  CLRF   x45
03524:  MOVLW  0F
03526:  MOVWF  x47
03528:  MOVLW  89
0352A:  MOVWF  x46
0352C:  MOVLB  0
0352E:  CALL   227E
03532:  MOVFF  A28,A44
03536:  MOVLB  A
03538:  CLRF   x45
0353A:  MOVLW  0F
0353C:  MOVWF  x47
0353E:  MOVLW  92
03540:  MOVWF  x46
03542:  MOVLB  0
03544:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03548:  MOVFF  A29,A41
0354C:  MOVFF  A28,A40
03550:  MOVFF  A27,A3F
03554:  MOVFF  A26,A3E
03558:  MOVLW  0A
0355A:  MOVLB  A
0355C:  MOVWF  x43
0355E:  MOVLW  33
03560:  MOVWF  x42
03562:  MOVLW  04
03564:  MOVWF  x44
03566:  MOVFF  A2F,A46
0356A:  MOVFF  A2E,A45
0356E:  MOVFF  A31,A48
03572:  MOVFF  A30,A47
03576:  MOVLB  0
03578:  CALL   3220
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0357C:  MOVLW  02
0357E:  MOVWF  00
03580:  DECFSZ 00,F
03582:  BRA    3580
03584:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03586:  MOVFF  A28,A44
0358A:  MOVLW  01
0358C:  MOVLB  A
0358E:  MOVWF  x45
03590:  MOVLW  0F
03592:  MOVWF  x47
03594:  MOVLW  89
03596:  MOVWF  x46
03598:  MOVLB  0
0359A:  CALL   227E
0359E:  MOVFF  A28,A44
035A2:  MOVLB  A
035A4:  CLRF   x45
035A6:  MOVLW  0F
035A8:  MOVWF  x47
035AA:  MOVLW  92
035AC:  MOVWF  x46
035AE:  MOVLB  0
035B0:  CALL   227E
....................    }
035B4:  GOTO   374A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
035B8:  MOVLB  A
035BA:  DECFSZ x27,W
035BC:  BRA    35C2
035BE:  BRA    35C8
035C0:  MOVLB  0
035C2:  MOVLB  0
035C4:  GOTO   374A
035C8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
035CA:  MOVLW  06
035CC:  MOVLB  A
035CE:  MOVWF  x37
035D0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
035D2:  MOVLW  12
035D4:  MOVLB  A
035D6:  MOVWF  x38
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
035D8:  MOVFF  A2D,A3F
035DC:  CLRF   x40
035DE:  CLRF   x41
035E0:  CLRF   x42
035E2:  MOVF   x3F,W
035E4:  MOVWF  00
035E6:  CLRF   01
035E8:  CLRF   02
035EA:  CLRF   03
035EC:  MOVFF  00,A39
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
035F0:  MOVFF  A2C,A3F
035F4:  MOVFF  A2D,A40
035F8:  CLRF   x41
035FA:  CLRF   x42
035FC:  MOVF   x3F,W
035FE:  MOVWF  00
03600:  CLRF   01
03602:  CLRF   02
03604:  CLRF   03
03606:  MOVFF  00,A3A
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0360A:  MOVFF  A2B,A3F
0360E:  MOVFF  A2C,A40
03612:  MOVFF  A2D,A41
03616:  CLRF   x42
03618:  MOVF   x3F,W
0361A:  MOVWF  00
0361C:  CLRF   01
0361E:  CLRF   02
03620:  CLRF   03
03622:  MOVFF  00,A3B
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03626:  MOVF   x2A,W
03628:  MOVWF  00
0362A:  CLRF   01
0362C:  CLRF   02
0362E:  CLRF   03
03630:  MOVFF  00,A3C
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03634:  MOVFF  A28,A44
03638:  CLRF   x45
0363A:  MOVLW  0F
0363C:  MOVWF  x47
0363E:  MOVLW  89
03640:  MOVWF  x46
03642:  MOVLB  0
03644:  CALL   227E
03648:  MOVFF  A28,A44
0364C:  MOVLB  A
0364E:  CLRF   x45
03650:  MOVLW  0F
03652:  MOVWF  x47
03654:  MOVLW  92
03656:  MOVWF  x46
03658:  MOVLB  0
0365A:  CALL   227E
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0365E:  MOVFF  A29,A41
03662:  MOVFF  A28,A40
03666:  MOVFF  A27,A3F
0366A:  MOVFF  A26,A3E
0366E:  MOVLW  0A
03670:  MOVLB  A
03672:  MOVWF  x43
03674:  MOVLW  37
03676:  MOVWF  x42
03678:  CLRF   x45
0367A:  MOVLW  01
0367C:  MOVWF  x44
0367E:  MOVLB  0
03680:  CALL   3130
....................       output_high(flash_stream.cs_pin);
03684:  MOVFF  A28,A44
03688:  MOVLW  01
0368A:  MOVLB  A
0368C:  MOVWF  x45
0368E:  MOVLW  0F
03690:  MOVWF  x47
03692:  MOVLW  89
03694:  MOVWF  x46
03696:  MOVLB  0
03698:  CALL   227E
0369C:  MOVFF  A28,A44
036A0:  MOVLB  A
036A2:  CLRF   x45
036A4:  MOVLW  0F
036A6:  MOVWF  x47
036A8:  MOVLW  92
036AA:  MOVWF  x46
036AC:  MOVLB  0
036AE:  CALL   227E
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
036B2:  MOVFF  A28,A44
036B6:  MOVLB  A
036B8:  CLRF   x45
036BA:  MOVLW  0F
036BC:  MOVWF  x47
036BE:  MOVLW  89
036C0:  MOVWF  x46
036C2:  MOVLB  0
036C4:  CALL   227E
036C8:  MOVFF  A28,A44
036CC:  MOVLB  A
036CE:  CLRF   x45
036D0:  MOVLW  0F
036D2:  MOVWF  x47
036D4:  MOVLW  92
036D6:  MOVWF  x46
036D8:  MOVLB  0
036DA:  CALL   227E
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
036DE:  MOVFF  A29,A41
036E2:  MOVFF  A28,A40
036E6:  MOVFF  A27,A3F
036EA:  MOVFF  A26,A3E
036EE:  MOVLW  0A
036F0:  MOVLB  A
036F2:  MOVWF  x43
036F4:  MOVLW  38
036F6:  MOVWF  x42
036F8:  MOVLW  05
036FA:  MOVWF  x44
036FC:  MOVFF  A2F,A46
03700:  MOVFF  A2E,A45
03704:  MOVFF  A31,A48
03708:  MOVFF  A30,A47
0370C:  MOVLB  0
0370E:  CALL   3220
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03712:  MOVLW  02
03714:  MOVWF  00
03716:  DECFSZ 00,F
03718:  BRA    3716
0371A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0371C:  MOVFF  A28,A44
03720:  MOVLW  01
03722:  MOVLB  A
03724:  MOVWF  x45
03726:  MOVLW  0F
03728:  MOVWF  x47
0372A:  MOVLW  89
0372C:  MOVWF  x46
0372E:  MOVLB  0
03730:  CALL   227E
03734:  MOVFF  A28,A44
03738:  MOVLB  A
0373A:  CLRF   x45
0373C:  MOVLW  0F
0373E:  MOVWF  x47
03740:  MOVLW  92
03742:  MOVWF  x46
03744:  MOVLB  0
03746:  CALL   227E
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0374A:  MOVLB  A
0374C:  CLRF   x3D
0374E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03750:  MOVFF  A29,A41
03754:  MOVFF  A28,A40
03758:  MOVFF  A27,A3F
0375C:  MOVFF  A26,A3E
03760:  CALL   339C
03764:  MOVF   01,W
03766:  ANDLW  01
03768:  SUBLW  01
0376A:  BTFSS  FD8.2
0376C:  GOTO   37BE
....................       if(timeout_counter > 10)
03770:  MOVLB  A
03772:  MOVF   x3D,W
03774:  SUBLW  0A
03776:  BTFSS  FD8.0
03778:  BRA    3780
0377A:  MOVLB  0
0377C:  GOTO   3792
03780:  MOVLB  0
....................          delay_ms(200);
03782:  MOVLW  C8
03784:  MOVLB  A
03786:  MOVWF  x3E
03788:  MOVLB  0
0378A:  CALL   1E68
0378E:  GOTO   379E
....................       else
....................          delay_ms(10);   
03792:  MOVLW  0A
03794:  MOVLB  A
03796:  MOVWF  x3E
03798:  MOVLB  0
0379A:  CALL   1E68
....................       
....................       if(timeout_counter > 100){
0379E:  MOVLB  A
037A0:  MOVF   x3D,W
037A2:  SUBLW  64
037A4:  BTFSS  FD8.0
037A6:  BRA    37AE
037A8:  MOVLB  0
037AA:  GOTO   37B4
037AE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
037B0:  GOTO   37BE
....................       }  
....................       timeout_counter++;
037B4:  MOVLB  A
037B6:  INCF   x3D,F
037B8:  MOVLB  0
037BA:  GOTO   3750
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
037BE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02582:  MOVLW  9F
02584:  MOVLB  A
02586:  MOVWF  x3E
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02588:  MOVFF  A28,A44
0258C:  CLRF   x45
0258E:  MOVLW  0F
02590:  MOVWF  x47
02592:  MOVLW  89
02594:  MOVWF  x46
02596:  MOVLB  0
02598:  CALL   227E
0259C:  MOVFF  A28,A44
025A0:  MOVLB  A
025A2:  CLRF   x45
025A4:  MOVLW  0F
025A6:  MOVWF  x47
025A8:  MOVLW  92
025AA:  MOVWF  x46
025AC:  MOVLB  0
025AE:  CALL   227E
....................    delay_us(10);  
025B2:  MOVLW  0D
025B4:  MOVWF  00
025B6:  DECFSZ 00,F
025B8:  BRA    25B6
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
025BA:  MOVFF  A29,A47
025BE:  MOVFF  A28,A46
025C2:  MOVFF  A27,A45
025C6:  MOVFF  A26,A44
025CA:  MOVLW  0A
025CC:  MOVLB  A
025CE:  MOVWF  x49
025D0:  MOVLW  3E
025D2:  MOVWF  x48
025D4:  CLRF   x4B
025D6:  MOVLW  01
025D8:  MOVWF  x4A
025DA:  MOVLW  0A
025DC:  MOVWF  x4D
025DE:  MOVLW  2A
025E0:  MOVWF  x4C
025E2:  CLRF   x51
025E4:  CLRF   x50
025E6:  CLRF   x4F
025E8:  MOVLW  14
025EA:  MOVWF  x4E
025EC:  MOVLB  0
025EE:  CALL   234E
....................    output_high(flash_stream.cs_pin);
025F2:  MOVFF  A28,A44
025F6:  MOVLW  01
025F8:  MOVLB  A
025FA:  MOVWF  x45
025FC:  MOVLW  0F
025FE:  MOVWF  x47
02600:  MOVLW  89
02602:  MOVWF  x46
02604:  MOVLB  0
02606:  CALL   227E
0260A:  MOVFF  A28,A44
0260E:  MOVLB  A
02610:  CLRF   x45
02612:  MOVLW  0F
02614:  MOVWF  x47
02616:  MOVLW  92
02618:  MOVWF  x46
0261A:  MOVLB  0
0261C:  CALL   227E
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02620:  MOVLB  A
02622:  MOVF   x2A,W
02624:  SUBLW  20
02626:  BTFSC  FD8.2
02628:  BRA    2630
0262A:  MOVLB  0
0262C:  GOTO   263E
02630:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02632:  MOVLW  01
02634:  MOVWF  01
02636:  GOTO   2646
....................    }
0263A:  GOTO   2646
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0263E:  MOVLW  00
02640:  MOVWF  01
02642:  GOTO   2646
....................    }
02646:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
040D4:  MOVLB  9
040D6:  MOVF   xE6,W
040D8:  MOVWF  FE9
040DA:  MOVF   xE7,W
040DC:  MOVWF  FEA
040DE:  MOVFF  FEF,9E9
040E2:  MOVLW  01
040E4:  MOVWF  xEA
040E6:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
040E8:  MOVLB  9
040EA:  MOVF   xE8,W
040EC:  SUBWF  xEA,W
040EE:  BTFSS  FD8.0
040F0:  BRA    40F8
040F2:  MOVLB  0
040F4:  GOTO   4114
040F8:  MOVLB  0
....................       crc ^= frame[i++];
040FA:  MOVLB  9
040FC:  MOVF   xEA,W
040FE:  INCF   xEA,F
04100:  ADDWF  xE6,W
04102:  MOVWF  FE9
04104:  MOVLW  00
04106:  ADDWFC xE7,W
04108:  MOVWF  FEA
0410A:  MOVF   FEF,W
0410C:  XORWF  xE9,F
0410E:  MOVLB  0
04110:  GOTO   40E8
....................    return crc;
04114:  MOVLB  9
04116:  MOVF   xE9,W
04118:  MOVWF  01
0411A:  MOVLB  0
0411C:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size)
*
093CE:  MOVLW  01
093D0:  MOVLB  2
093D2:  SUBWF  x80,W
093D4:  ADDWF  x7E,W
093D6:  MOVWF  FE9
093D8:  MOVLW  00
093DA:  ADDWFC x7F,W
093DC:  MOVWF  FEA
093DE:  MOVFF  FEF,281
093E2:  MOVLW  01
093E4:  SUBWF  x80,W
093E6:  MOVWF  x83
093E8:  MOVFF  27F,9E7
093EC:  MOVFF  27E,9E6
093F0:  MOVFF  283,9E8
093F4:  MOVLB  0
093F6:  CALL   40D4
093FA:  MOVFF  01,282
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
093FE:  MOVLB  2
09400:  MOVF   x82,W
09402:  SUBWF  x81,W
09404:  BTFSS  FD8.2
09406:  BRA    940E
09408:  MOVLB  0
0940A:  GOTO   9416
0940E:  MOVLB  0
09410:  MOVLW  00
09412:  GOTO   9418
09416:  MOVLW  01
09418:  MOVWF  01
0941A:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
*
0987A:  MOVLB  2
0987C:  MOVF   x84,W
0987E:  ADDWF  x82,W
09880:  MOVWF  FE9
09882:  MOVLW  00
09884:  ADDWFC x83,W
09886:  MOVWF  FEA
09888:  MOVFF  281,00
0988C:  CLRF   01
0988E:  CLRF   02
09890:  CLRF   03
09892:  MOVFF  00,FEF
....................     buf[index + 1] = (int8)(value >> 16);
09896:  MOVLW  01
09898:  ADDWF  x84,W
0989A:  ADDWF  x82,W
0989C:  MOVWF  FE9
0989E:  MOVLW  00
098A0:  ADDWFC x83,W
098A2:  MOVWF  FEA
098A4:  MOVFF  280,00
098A8:  MOVFF  281,01
098AC:  CLRF   02
098AE:  CLRF   03
098B0:  MOVFF  00,FEF
....................     buf[index + 2] = (int8)(value >>  8);
098B4:  MOVLW  02
098B6:  ADDWF  x84,W
098B8:  ADDWF  x82,W
098BA:  MOVWF  FE9
098BC:  MOVLW  00
098BE:  ADDWFC x83,W
098C0:  MOVWF  FEA
098C2:  MOVFF  27F,00
098C6:  MOVFF  280,01
098CA:  MOVFF  281,02
098CE:  CLRF   03
098D0:  MOVFF  00,FEF
....................     buf[index + 3] = (int8)(value      );   // LSB
098D4:  MOVLW  03
098D6:  ADDWF  x84,W
098D8:  ADDWF  x82,W
098DA:  MOVWF  FE9
098DC:  MOVLW  00
098DE:  ADDWFC x83,W
098E0:  MOVWF  FEA
098E2:  MOVFF  27E,FEF
098E6:  MOVLB  0
098E8:  RETURN 0
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
*
0941C:  MOVLB  2
0941E:  MOVF   x3F,W
09420:  ADDWF  x3D,W
09422:  MOVWF  FE9
09424:  MOVLW  00
09426:  ADDWFC x3E,W
09428:  MOVWF  FEA
0942A:  MOVF   FEF,W
0942C:  CLRF   x43
0942E:  CLRF   x42
09430:  CLRF   x41
09432:  MOVWF  x40
09434:  MOVLW  01
09436:  ADDWF  x3F,W
09438:  ADDWF  x3D,W
0943A:  MOVWF  FE9
0943C:  MOVLW  00
0943E:  ADDWFC x3E,W
09440:  MOVWF  FEA
09442:  MOVF   FEF,W
09444:  CLRF   x48
09446:  CLRF   x47
09448:  CLRF   x46
0944A:  MOVWF  x45
0944C:  MOVFF  247,03
09450:  MOVFF  246,02
09454:  MOVFF  245,01
09458:  CLRF   00
0945A:  MOVF   00,W
0945C:  IORWF  x40,F
0945E:  MOVF   01,W
09460:  IORWF  x41,F
09462:  MOVF   02,W
09464:  IORWF  x42,F
09466:  MOVF   03,W
09468:  IORWF  x43,F
0946A:  MOVLW  02
0946C:  ADDWF  x3F,W
0946E:  ADDWF  x3D,W
09470:  MOVWF  FE9
09472:  MOVLW  00
09474:  ADDWFC x3E,W
09476:  MOVWF  FEA
09478:  MOVF   FEF,W
0947A:  CLRF   x48
0947C:  CLRF   x47
0947E:  CLRF   x46
09480:  MOVWF  x45
09482:  MOVFF  246,03
09486:  MOVFF  245,02
0948A:  CLRF   00
0948C:  CLRF   01
0948E:  MOVF   00,W
09490:  IORWF  x40,F
09492:  MOVF   01,W
09494:  IORWF  x41,F
09496:  MOVF   02,W
09498:  IORWF  x42,F
0949A:  MOVF   03,W
0949C:  IORWF  x43,F
0949E:  MOVLW  03
094A0:  ADDWF  x3F,W
094A2:  ADDWF  x3D,W
094A4:  MOVWF  FE9
094A6:  MOVLW  00
094A8:  ADDWFC x3E,W
094AA:  MOVWF  FEA
094AC:  MOVF   FEF,W
094AE:  CLRF   x48
094B0:  CLRF   x47
094B2:  CLRF   x46
094B4:  MOVWF  x45
094B6:  MOVFF  245,03
094BA:  CLRF   00
094BC:  CLRF   01
094BE:  CLRF   02
094C0:  MOVF   00,W
094C2:  IORWF  x40,W
094C4:  MOVWF  00
094C6:  MOVF   01,W
094C8:  IORWF  x41,W
094CA:  MOVWF  01
094CC:  MOVF   02,W
094CE:  IORWF  x42,W
094D0:  MOVWF  02
094D2:  MOVF   03,W
094D4:  IORWF  x43,W
094D6:  MOVWF  03
094D8:  MOVLB  0
094DA:  RETURN 0
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
*
02860:  MOVLB  1
02862:  MOVF   xFC,W
02864:  ADDWF  xFA,W
02866:  MOVWF  FE9
02868:  MOVLW  00
0286A:  ADDWFC xFB,W
0286C:  MOVWF  FEA
0286E:  MOVF   FEF,W
02870:  MOVLB  2
02872:  CLRF   x03
02874:  CLRF   x02
02876:  CLRF   x01
02878:  MOVWF  x00
0287A:  MOVFF  200,203
0287E:  CLRF   x00
02880:  CLRF   x01
02882:  CLRF   x02
02884:  MOVLW  01
02886:  MOVLB  1
02888:  ADDWF  xFC,W
0288A:  ADDWF  xFA,W
0288C:  MOVWF  FE9
0288E:  MOVLW  00
02890:  ADDWFC xFB,W
02892:  MOVWF  FEA
02894:  MOVF   FEF,W
02896:  MOVLB  2
02898:  CLRF   x08
0289A:  CLRF   x07
0289C:  CLRF   x06
0289E:  MOVWF  x05
028A0:  MOVFF  206,03
028A4:  MOVFF  205,02
028A8:  CLRF   00
028AA:  CLRF   01
028AC:  MOVF   00,W
028AE:  IORWF  x00,F
028B0:  MOVF   01,W
028B2:  IORWF  x01,F
028B4:  MOVF   02,W
028B6:  IORWF  x02,F
028B8:  MOVF   03,W
028BA:  IORWF  x03,F
028BC:  MOVLW  02
028BE:  MOVLB  1
028C0:  ADDWF  xFC,W
028C2:  ADDWF  xFA,W
028C4:  MOVWF  FE9
028C6:  MOVLW  00
028C8:  ADDWFC xFB,W
028CA:  MOVWF  FEA
028CC:  MOVF   FEF,W
028CE:  MOVLB  2
028D0:  CLRF   x08
028D2:  CLRF   x07
028D4:  CLRF   x06
028D6:  MOVWF  x05
028D8:  MOVFF  207,03
028DC:  MOVFF  206,02
028E0:  MOVFF  205,01
028E4:  CLRF   00
028E6:  MOVF   00,W
028E8:  IORWF  x00,F
028EA:  MOVF   01,W
028EC:  IORWF  x01,F
028EE:  MOVF   02,W
028F0:  IORWF  x02,F
028F2:  MOVF   03,W
028F4:  IORWF  x03,F
028F6:  MOVLW  03
028F8:  MOVLB  1
028FA:  ADDWF  xFC,W
028FC:  ADDWF  xFA,W
028FE:  MOVWF  FE9
02900:  MOVLW  00
02902:  ADDWFC xFB,W
02904:  MOVWF  FEA
02906:  MOVF   FEF,W
02908:  MOVWF  00
0290A:  CLRF   01
0290C:  CLRF   02
0290E:  CLRF   03
02910:  MOVF   00,W
02912:  MOVLB  2
02914:  IORWF  x00,W
02916:  MOVWF  00
02918:  MOVF   01,W
0291A:  IORWF  x01,W
0291C:  MOVWF  01
0291E:  MOVF   02,W
02920:  IORWF  x02,W
02922:  MOVWF  02
02924:  MOVF   03,W
02926:  IORWF  x03,W
02928:  MOVWF  03
0292A:  MOVLB  0
0292C:  RETURN 0
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
087A4:  MOVLW  01
087A6:  ADDWF  xED,W
087A8:  ANDLW  0F
087AA:  MOVLB  1
087AC:  MOVWF  x7D
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
087AE:  MOVLB  0
087B0:  MOVF   xEC,W
087B2:  MOVLB  1
087B4:  SUBWF  x7D,W
087B6:  BTFSC  FD8.2
087B8:  BRA    87C0
087BA:  MOVLB  0
087BC:  GOTO   87D6
087C0:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
087C2:  MOVLW  8A
087C4:  MOVWF  FF6
087C6:  MOVLW  02
087C8:  MOVWF  FF7
087CA:  MOVLW  00
087CC:  MOVWF  FF8
087CE:  CALL   1EE8
087D2:  GOTO   8952
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_id = data->mission_id;
087D6:  MOVF   xED,W
087D8:  MULLW  0A
087DA:  MOVF   FF3,W
087DC:  MOVLB  1
087DE:  CLRF   x7F
087E0:  MOVWF  x7E
087E2:  MOVLW  4C
087E4:  ADDWF  x7E,W
087E6:  MOVWF  01
087E8:  MOVLW  00
087EA:  ADDWFC x7F,W
087EC:  MOVWF  03
087EE:  MOVF   01,W
087F0:  MOVWF  x80
087F2:  MOVFF  03,181
087F6:  MOVF   x7B,W
087F8:  MOVWF  FE9
087FA:  MOVF   x7C,W
087FC:  MOVWF  FEA
087FE:  MOVF   FEF,W
08800:  MOVWF  x82
08802:  MOVFF  181,FEA
08806:  MOVFF  180,FE9
0880A:  MOVFF  182,FEF
....................       smf_queue.smf_data[smf_queue.smf_data_tail].func_type  = data->func_type;
0880E:  MOVLB  0
08810:  MOVF   xED,W
08812:  MULLW  0A
08814:  MOVF   FF3,W
08816:  MOVLB  1
08818:  CLRF   x7F
0881A:  MOVWF  x7E
0881C:  MOVLW  09
0881E:  ADDWF  x7E,W
08820:  MOVWF  01
08822:  MOVLW  00
08824:  ADDWFC x7F,W
08826:  MOVWF  03
08828:  MOVF   01,W
0882A:  ADDLW  4C
0882C:  MOVWF  01
0882E:  MOVLW  00
08830:  ADDWFC 03,F
08832:  MOVF   01,W
08834:  MOVWF  x7E
08836:  MOVFF  03,17F
0883A:  MOVLW  09
0883C:  ADDWF  x7B,W
0883E:  MOVWF  FE9
08840:  MOVLW  00
08842:  ADDWFC x7C,W
08844:  MOVWF  FEA
08846:  MOVF   FEF,W
08848:  MOVWF  x80
0884A:  MOVFF  17F,FEA
0884E:  MOVFF  17E,FE9
08852:  MOVFF  180,FEF
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src        = data->src;
08856:  MOVLB  0
08858:  MOVF   xED,W
0885A:  MULLW  0A
0885C:  MOVF   FF3,W
0885E:  MOVLB  1
08860:  CLRF   x7F
08862:  MOVWF  x7E
08864:  MOVLW  01
08866:  ADDWF  x7E,W
08868:  MOVWF  01
0886A:  MOVLW  00
0886C:  ADDWFC x7F,W
0886E:  MOVWF  03
08870:  MOVF   01,W
08872:  ADDLW  4C
08874:  MOVWF  01
08876:  MOVLW  00
08878:  ADDWFC 03,F
0887A:  MOVF   01,W
0887C:  MOVWF  x7E
0887E:  MOVFF  03,17F
08882:  MOVLW  01
08884:  ADDWF  x7B,W
08886:  MOVWF  FE9
08888:  MOVLW  00
0888A:  ADDWFC x7C,W
0888C:  MOVWF  FEA
0888E:  MOVFF  FEF,00
08892:  MOVFF  FEC,01
08896:  MOVFF  FEC,02
0889A:  MOVFF  FEC,03
0889E:  MOVF   FED,F
088A0:  MOVF   FED,F
088A2:  MOVF   FED,F
088A4:  MOVFF  03,183
088A8:  MOVFF  02,182
088AC:  MOVFF  01,181
088B0:  MOVFF  00,180
088B4:  MOVFF  17F,FEA
088B8:  MOVFF  17E,FE9
088BC:  MOVFF  180,FEF
088C0:  MOVFF  181,FEC
088C4:  MOVFF  182,FEC
088C8:  MOVFF  183,FEC
088CC:  MOVF   FED,F
088CE:  MOVF   FED,F
088D0:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size       = data->size;
088D2:  MOVLB  0
088D4:  MOVF   xED,W
088D6:  MULLW  0A
088D8:  MOVF   FF3,W
088DA:  MOVLB  1
088DC:  CLRF   x7F
088DE:  MOVWF  x7E
088E0:  MOVLW  05
088E2:  ADDWF  x7E,W
088E4:  MOVWF  01
088E6:  MOVLW  00
088E8:  ADDWFC x7F,W
088EA:  MOVWF  03
088EC:  MOVF   01,W
088EE:  ADDLW  4C
088F0:  MOVWF  01
088F2:  MOVLW  00
088F4:  ADDWFC 03,F
088F6:  MOVF   01,W
088F8:  MOVWF  x7E
088FA:  MOVFF  03,17F
088FE:  MOVLW  05
08900:  ADDWF  x7B,W
08902:  MOVWF  FE9
08904:  MOVLW  00
08906:  ADDWFC x7C,W
08908:  MOVWF  FEA
0890A:  MOVFF  FEF,00
0890E:  MOVFF  FEC,01
08912:  MOVFF  FEC,02
08916:  MOVFF  FEC,03
0891A:  MOVF   FED,F
0891C:  MOVF   FED,F
0891E:  MOVF   FED,F
08920:  MOVFF  03,183
08924:  MOVFF  02,182
08928:  MOVFF  01,181
0892C:  MOVFF  00,180
08930:  MOVFF  17F,FEA
08934:  MOVFF  17E,FE9
08938:  MOVFF  180,FEF
0893C:  MOVFF  181,FEC
08940:  MOVFF  182,FEC
08944:  MOVFF  183,FEC
08948:  MOVF   FED,F
0894A:  MOVF   FED,F
0894C:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
0894E:  MOVFF  17D,ED
08952:  MOVLB  0
....................    }
08954:  GOTO   8D28 (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
0919A:  MOVF   xED,W
0919C:  SUBWF  xEC,W
0919E:  BTFSS  FD8.2
091A0:  GOTO   91C4
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
091A4:  MOVLW  A6
091A6:  MOVWF  FF6
091A8:  MOVLW  02
091AA:  MOVWF  FF7
091AC:  MOVLW  00
091AE:  MOVWF  FF8
091B0:  CALL   1EE8
....................       return 0x00;
091B4:  MOVLW  00
091B6:  MOVWF  01
091B8:  MOVLW  00
091BA:  MOVWF  02
091BC:  GOTO   91F0
....................    }
091C0:  GOTO   91F0
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
091C4:  MOVFF  EC,15E
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
091C8:  MOVLW  01
091CA:  ADDWF  xEC,W
091CC:  ANDLW  0F
091CE:  MOVWF  xEC
....................       return &smf_queue.smf_data[current_head];
091D0:  MOVLB  1
091D2:  MOVF   x5E,W
091D4:  MULLW  0A
091D6:  MOVF   FF3,W
091D8:  CLRF   03
091DA:  ADDLW  4C
091DC:  MOVWF  01
091DE:  MOVLW  00
091E0:  ADDWFC 03,F
091E2:  MOVF   01,W
091E4:  MOVWF  01
091E6:  MOVF   03,W
091E8:  MOVWF  02
091EA:  MOVLB  0
091EC:  GOTO   91F0
....................    }
091F0:  GOTO   B268 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
08F9E:  MOVF   xED,W
08FA0:  SUBWF  xEC,W
08FA2:  BTFSC  FD8.2
08FA4:  GOTO   8FAE
08FA8:  MOVLW  00
08FAA:  GOTO   8FB0
08FAE:  MOVLW  01
08FB0:  MOVWF  01
08FB2:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfMissionStruct getMissionTypeStruct(mission_id)
.................... {
....................    SmfMissionStruct mis_struct = {0};
....................    
....................    if (mission_id == ID_CIGS_DATA_TABLE)
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
....................    }
....................    else if (mission_id == ID_CIGS_MEASURE_DATA)
....................    {
....................       mis_struct.start_address = CIGS_MEASURE_DATA_START_ADDRESS;
....................       mis_struct.end_address   = CIGS_MEASURE_DATA_END_ADDRESS;
....................    }
....................    else if (mission_id == ID_CIGS_PICLOG)
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
....................    }
....................    
....................    return mis_struct;
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
042C2:  MOVLB  1
042C4:  CLRF   x5F
042C6:  CLRF   x60
042C8:  CLRF   x61
042CA:  CLRF   x62
042CC:  CLRF   x63
042CE:  CLRF   x64
042D0:  CLRF   x65
042D2:  CLRF   x66
042D4:  CLRF   x67
042D6:  CLRF   x68
042D8:  CLRF   x69
042DA:  CLRF   x6A
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
042DC:  MOVLW  C0
042DE:  MOVWF  FF6
042E0:  MOVLW  02
042E2:  MOVWF  FF7
042E4:  MOVLW  00
042E6:  MOVWF  FF8
042E8:  MOVLB  0
042EA:  CALL   1EE8
....................    fprintf(PC, "\t[BOSS] >>> ");
042EE:  MOVLW  E0
042F0:  MOVWF  FF6
042F2:  MOVLW  02
042F4:  MOVWF  FF7
042F6:  MOVLW  00
042F8:  MOVWF  FF8
042FA:  CALL   1EE8
....................    for (int8 i = 0; i < receive_signal_size; i++)
042FE:  MOVLB  1
04300:  CLRF   x6B
04302:  MOVLB  0
04304:  MOVLB  1
04306:  MOVF   x5E,W
04308:  SUBWF  x6B,W
0430A:  BTFSS  FD8.0
0430C:  BRA    4314
0430E:  MOVLB  0
04310:  GOTO   434E
04314:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
04316:  MOVLB  1
04318:  MOVF   x6B,W
0431A:  ADDWF  x5C,W
0431C:  MOVWF  FE9
0431E:  MOVLW  00
04320:  ADDWFC x5D,W
04322:  MOVWF  FEA
04324:  MOVFF  FEF,172
04328:  MOVFF  172,996
0432C:  MOVLW  37
0432E:  MOVLB  9
04330:  MOVWF  x97
04332:  MOVLB  0
04334:  CALL   2116
04338:  MOVLW  20
0433A:  MOVLB  A
0433C:  MOVWF  x29
0433E:  MOVLB  0
04340:  CALL   1E96
04344:  MOVLB  1
04346:  INCF   x6B,F
04348:  MOVLB  0
0434A:  GOTO   4304
....................    fprintf(PC, "\r\n");
0434E:  MOVLW  0D
04350:  MOVLB  A
04352:  MOVWF  x29
04354:  MOVLB  0
04356:  CALL   1E96
0435A:  MOVLW  0A
0435C:  MOVLB  A
0435E:  MOVWF  x29
04360:  MOVLB  0
04362:  CALL   1E96
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
04366:  MOVFF  15D,173
0436A:  MOVFF  15C,172
0436E:  MOVFF  15E,174
04372:  GOTO   3F70
04376:  MOVFF  01,16C
....................    if (frame_start_position == -1)
0437A:  MOVLB  1
0437C:  MOVF   x6C,W
0437E:  SUBLW  FF
04380:  BTFSC  FD8.2
04382:  BRA    438A
04384:  MOVLB  0
04386:  GOTO   4398
0438A:  MOVLB  0
....................       return command;
0438C:  MOVLW  5F
0438E:  MOVWF  01
04390:  MOVLW  01
04392:  MOVWF  02
04394:  GOTO   44BA
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
04398:  MOVLB  1
0439A:  MOVF   x6C,W
0439C:  ADDWF  x5C,W
0439E:  MOVWF  01
043A0:  MOVLW  00
043A2:  ADDWFC x5D,W
043A4:  MOVWF  03
043A6:  MOVF   01,W
043A8:  MOVWF  x6D
043AA:  MOVFF  03,16E
043AE:  MOVF   x6D,W
043B0:  MOVWF  FE9
043B2:  MOVF   x6E,W
043B4:  MOVWF  FEA
043B6:  MOVF   FEF,W
043B8:  ANDLW  0F
043BA:  MOVWF  x6F
043BC:  MOVFF  16F,172
043C0:  MOVLB  0
043C2:  GOTO   4018
043C6:  MOVFF  01,170
....................    if (content_size == -1)
043CA:  MOVLB  1
043CC:  MOVF   x70,W
043CE:  SUBLW  FF
043D0:  BTFSC  FD8.2
043D2:  BRA    43DA
043D4:  MOVLB  0
043D6:  GOTO   43E8
043DA:  MOVLB  0
....................       return command;
043DC:  MOVLW  5F
043DE:  MOVWF  01
043E0:  MOVLW  01
043E2:  MOVWF  02
043E4:  GOTO   44BA
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
043E8:  MOVLB  1
043EA:  MOVF   x6C,W
043EC:  SUBWF  x5E,W
043EE:  MOVWF  x71
....................    
....................    if (!check_crc(frame, receive_frame_size))
043F0:  MOVFF  16E,173
043F4:  MOVFF  16D,172
043F8:  MOVFF  171,174
043FC:  MOVLB  0
043FE:  GOTO   411E
04402:  MOVF   01,F
04404:  BTFSS  FD8.2
04406:  GOTO   4416
....................       return command;
0440A:  MOVLW  5F
0440C:  MOVWF  01
0440E:  MOVLW  01
04410:  MOVWF  02
04412:  GOTO   44BA
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
04416:  MOVLB  1
04418:  MOVF   x6D,W
0441A:  MOVWF  FE9
0441C:  MOVF   x6E,W
0441E:  MOVWF  FEA
04420:  MOVF   FEF,W
04422:  ANDLW  F0
04424:  MOVWF  00
04426:  SWAPF  00,W
04428:  MOVWF  x72
0442A:  MOVLW  0F
0442C:  ANDWF  x72,F
0442E:  MOVFF  172,173
04432:  MOVLB  0
04434:  GOTO   4208
04438:  MOVF   01,F
0443A:  BTFSS  FD8.2
0443C:  GOTO   444C
....................       return command;
04440:  MOVLW  5F
04442:  MOVWF  01
04444:  MOVLW  01
04446:  MOVWF  02
04448:  GOTO   44BA
.................... 
....................    command.frame_id = frame_id;
0444C:  MOVFF  16F,15F
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
04450:  MOVLW  01
04452:  MOVLB  1
04454:  ADDWF  x6D,W
04456:  MOVWF  01
04458:  MOVLW  00
0445A:  ADDWFC x6E,W
0445C:  MOVWF  03
0445E:  MOVF   01,W
04460:  MOVWF  x72
04462:  MOVFF  03,173
04466:  MOVLW  02
04468:  SUBWF  x71,W
0446A:  MOVWF  x74
0446C:  MOVLW  01
0446E:  MOVWF  FEA
04470:  MOVLW  62
04472:  MOVWF  FE9
04474:  MOVFF  173,FE2
04478:  MOVFF  172,FE1
0447C:  MOVF   x74,W
0447E:  MOVWF  01
04480:  BTFSS  FD8.2
04482:  BRA    448A
04484:  MOVLB  0
04486:  GOTO   4496
0448A:  MOVLB  0
0448C:  MOVFF  FE6,FEE
04490:  DECFSZ 01,F
04492:  GOTO   448C
....................    command.size = receive_frame_size-2;
04496:  MOVLW  02
04498:  MOVLB  1
0449A:  SUBWF  x71,W
0449C:  MOVWF  x60
....................    command.is_exist = TRUE;
0449E:  BSF    x61.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
044A0:  MOVLW  EE
044A2:  MOVWF  FF6
044A4:  MOVLW  02
044A6:  MOVWF  FF7
044A8:  MOVLW  00
044AA:  MOVWF  FF8
044AC:  MOVLB  0
044AE:  CALL   1EE8
....................    return command;
044B2:  MOVLW  5F
044B4:  MOVWF  01
044B6:  MOVLW  01
044B8:  MOVWF  02
044BA:  GOTO   B84E (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03F70:  MOVLB  1
03F72:  CLRF   x75
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03F74:  CLRF   x75
03F76:  MOVLB  0
03F78:  MOVLW  01
03F7A:  MOVLB  1
03F7C:  SUBWF  x74,W
03F7E:  SUBWF  x75,W
03F80:  BTFSS  FD8.0
03F82:  BRA    3F8A
03F84:  MOVLB  0
03F86:  GOTO   3FC2
03F8A:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03F8C:  MOVLB  1
03F8E:  MOVF   x75,W
03F90:  ADDWF  x72,W
03F92:  MOVWF  FE9
03F94:  MOVLW  00
03F96:  ADDWFC x73,W
03F98:  MOVWF  FEA
03F9A:  MOVF   FEF,W
03F9C:  SUBLW  AA
03F9E:  BTFSC  FD8.2
03FA0:  BRA    3FA8
03FA2:  MOVLB  0
03FA4:  GOTO   3FB8
03FA8:  MOVLB  0
....................          return i+1;
03FAA:  MOVLW  01
03FAC:  MOVLB  1
03FAE:  ADDWF  x75,W
03FB0:  MOVWF  01
03FB2:  MOVLB  0
03FB4:  GOTO   4014
03FB8:  MOVLB  1
03FBA:  INCF   x75,F
03FBC:  MOVLB  0
03FBE:  GOTO   3F78
....................    if (receive_signal[i] == SFD)
03FC2:  MOVLB  1
03FC4:  MOVF   x75,W
03FC6:  ADDWF  x72,W
03FC8:  MOVWF  FE9
03FCA:  MOVLW  00
03FCC:  ADDWFC x73,W
03FCE:  MOVWF  FEA
03FD0:  MOVF   FEF,W
03FD2:  SUBLW  AA
03FD4:  BTFSC  FD8.2
03FD6:  BRA    3FDE
03FD8:  MOVLB  0
03FDA:  GOTO   3FFC
03FDE:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03FE0:  MOVLW  0A
03FE2:  MOVWF  FF6
03FE4:  MOVLW  03
03FE6:  MOVWF  FF7
03FE8:  MOVLW  00
03FEA:  MOVWF  FF8
03FEC:  CALL   1EE8
....................       return -1;
03FF0:  MOVLW  FF
03FF2:  MOVWF  01
03FF4:  GOTO   4014
....................    }
03FF8:  GOTO   4014
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03FFC:  MOVLW  20
03FFE:  MOVWF  FF6
04000:  MOVLW  03
04002:  MOVWF  FF7
04004:  MOVLW  00
04006:  MOVWF  FF8
04008:  CALL   1EE8
....................       return -1;
0400C:  MOVLW  FF
0400E:  MOVWF  01
04010:  GOTO   4014
....................    }
04014:  GOTO   4376 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
04018:  MOVLB  1
0401A:  CLRF   x73
0401C:  MOVLB  0
0401E:  MOVLB  1
04020:  MOVF   x73,W
04022:  SUBLW  02
04024:  BTFSC  FD8.0
04026:  BRA    402E
04028:  MOVLB  0
0402A:  GOTO   408C
0402E:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04030:  BCF    FD8.0
04032:  MOVLB  1
04034:  RLCF   x73,W
04036:  CLRF   x75
04038:  MOVWF  x74
0403A:  MOVLW  F6
0403C:  ADDWF  x74,W
0403E:  MOVWF  FE9
04040:  MOVLW  00
04042:  ADDWFC x75,W
04044:  MOVWF  FEA
04046:  MOVF   FEF,W
04048:  SUBWF  x72,W
0404A:  BTFSC  FD8.2
0404C:  BRA    4054
0404E:  MOVLB  0
04050:  GOTO   4082
04054:  MOVLB  0
....................          return frame_ids[i].length;
04056:  BCF    FD8.0
04058:  MOVLB  1
0405A:  RLCF   x73,W
0405C:  CLRF   x75
0405E:  MOVWF  x74
04060:  MOVLW  01
04062:  ADDWF  x74,W
04064:  MOVWF  01
04066:  MOVLW  00
04068:  ADDWFC x75,W
0406A:  MOVWF  03
0406C:  MOVF   01,W
0406E:  ADDLW  F6
04070:  MOVWF  FE9
04072:  MOVLW  00
04074:  ADDWFC 03,W
04076:  MOVWF  FEA
04078:  MOVF   FEF,W
0407A:  MOVWF  01
0407C:  MOVLB  0
0407E:  GOTO   40D0
04082:  MOVLB  1
04084:  INCF   x73,F
04086:  MOVLB  0
04088:  GOTO   401E
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
0408C:  MOVLW  32
0408E:  MOVWF  FF6
04090:  MOVLW  03
04092:  MOVWF  FF7
04094:  MOVLW  00
04096:  MOVWF  FF8
04098:  MOVLW  1F
0409A:  MOVLB  9
0409C:  MOVWF  x96
0409E:  MOVLB  0
040A0:  CALL   1F18
040A4:  MOVFF  172,996
040A8:  MOVLW  37
040AA:  MOVLB  9
040AC:  MOVWF  x97
040AE:  MOVLB  0
040B0:  CALL   2116
040B4:  MOVLW  0D
040B6:  MOVLB  A
040B8:  MOVWF  x29
040BA:  MOVLB  0
040BC:  CALL   1E96
040C0:  MOVLW  0A
040C2:  MOVLB  A
040C4:  MOVWF  x29
040C6:  MOVLB  0
040C8:  CALL   1E96
....................    return -1;
040CC:  MOVLW  FF
040CE:  MOVWF  01
040D0:  GOTO   43C6 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
0411E:  MOVLW  01
04120:  MOVLB  1
04122:  SUBWF  x74,W
04124:  ADDWF  x72,W
04126:  MOVWF  FE9
04128:  MOVLW  00
0412A:  ADDWFC x73,W
0412C:  MOVWF  FEA
0412E:  MOVFF  FEF,175
04132:  MOVLW  01
04134:  SUBWF  x74,W
04136:  MOVWF  x77
04138:  MOVFF  173,9E7
0413C:  MOVFF  172,9E6
04140:  MOVFF  177,9E8
04144:  MOVLB  0
04146:  CALL   40D4
0414A:  MOVFF  01,176
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
0414E:  MOVLB  1
04150:  MOVF   x76,W
04152:  SUBWF  x75,W
04154:  BTFSC  FD8.2
04156:  BRA    415E
04158:  MOVLB  0
0415A:  GOTO   416C
0415E:  MOVLB  0
....................       return TRUE;
04160:  MOVLW  01
04162:  MOVWF  01
04164:  GOTO   4204
04168:  GOTO   4204
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
0416C:  MOVLW  56
0416E:  MOVWF  FF6
04170:  MOVLW  03
04172:  MOVWF  FF7
04174:  MOVLW  00
04176:  MOVWF  FF8
04178:  CALL   1EE8
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
0417C:  MOVLW  68
0417E:  MOVWF  FF6
04180:  MOVLW  03
04182:  MOVWF  FF7
04184:  MOVLW  00
04186:  MOVWF  FF8
04188:  MOVLW  13
0418A:  MOVLB  9
0418C:  MOVWF  x96
0418E:  MOVLB  0
04190:  CALL   1F18
04194:  MOVFF  175,996
04198:  MOVLW  37
0419A:  MOVLB  9
0419C:  MOVWF  x97
0419E:  MOVLB  0
041A0:  CALL   2116
041A4:  MOVLW  0D
041A6:  MOVLB  A
041A8:  MOVWF  x29
041AA:  MOVLB  0
041AC:  CALL   1E96
041B0:  MOVLW  0A
041B2:  MOVLB  A
041B4:  MOVWF  x29
041B6:  MOVLB  0
041B8:  CALL   1E96
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
041BC:  MOVLW  80
041BE:  MOVWF  FF6
041C0:  MOVLW  03
041C2:  MOVWF  FF7
041C4:  MOVLW  00
041C6:  MOVWF  FF8
041C8:  MOVLW  13
041CA:  MOVLB  9
041CC:  MOVWF  x96
041CE:  MOVLB  0
041D0:  CALL   1F18
041D4:  MOVFF  176,996
041D8:  MOVLW  37
041DA:  MOVLB  9
041DC:  MOVWF  x97
041DE:  MOVLB  0
041E0:  CALL   2116
041E4:  MOVLW  0D
041E6:  MOVLB  A
041E8:  MOVWF  x29
041EA:  MOVLB  0
041EC:  CALL   1E96
041F0:  MOVLW  0A
041F2:  MOVLB  A
041F4:  MOVWF  x29
041F6:  MOVLB  0
041F8:  CALL   1E96
....................       return FALSE;
041FC:  MOVLW  00
041FE:  MOVWF  01
04200:  GOTO   4204
....................    }
04204:  GOTO   4402 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
04208:  MOVLB  1
0420A:  MOVF   x73,W
0420C:  SUBLW  0C
0420E:  BTFSC  FD8.2
04210:  BRA    4218
04212:  MOVLB  0
04214:  GOTO   4226
04218:  MOVLB  0
....................       return TRUE;
0421A:  MOVLW  01
0421C:  MOVWF  01
0421E:  GOTO   42BE
04222:  GOTO   42BE
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
04226:  MOVLW  98
04228:  MOVWF  FF6
0422A:  MOVLW  03
0422C:  MOVWF  FF7
0422E:  MOVLW  00
04230:  MOVWF  FF8
04232:  CALL   1EE8
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
04236:  MOVLW  BA
04238:  MOVWF  FF6
0423A:  MOVLW  03
0423C:  MOVWF  FF7
0423E:  MOVLW  00
04240:  MOVWF  FF8
04242:  MOVLW  13
04244:  MOVLB  9
04246:  MOVWF  x96
04248:  MOVLB  0
0424A:  CALL   1F18
0424E:  MOVFF  173,996
04252:  MOVLW  37
04254:  MOVLB  9
04256:  MOVWF  x97
04258:  MOVLB  0
0425A:  CALL   2116
0425E:  MOVLW  0D
04260:  MOVLB  A
04262:  MOVWF  x29
04264:  MOVLB  0
04266:  CALL   1E96
0426A:  MOVLW  0A
0426C:  MOVLB  A
0426E:  MOVWF  x29
04270:  MOVLB  0
04272:  CALL   1E96
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
04276:  MOVLW  D2
04278:  MOVWF  FF6
0427A:  MOVLW  03
0427C:  MOVWF  FF7
0427E:  MOVLW  00
04280:  MOVWF  FF8
04282:  MOVLW  13
04284:  MOVLB  9
04286:  MOVWF  x96
04288:  MOVLB  0
0428A:  CALL   1F18
0428E:  MOVLW  0C
04290:  MOVLB  9
04292:  MOVWF  x96
04294:  MOVLW  37
04296:  MOVWF  x97
04298:  MOVLB  0
0429A:  CALL   2116
0429E:  MOVLW  0D
042A0:  MOVLB  A
042A2:  MOVWF  x29
042A4:  MOVLB  0
042A6:  CALL   1E96
042AA:  MOVLW  0A
042AC:  MOVLB  A
042AE:  MOVWF  x29
042B0:  MOVLB  0
042B2:  CALL   1E96
....................       return FALSE;  
042B6:  MOVLW  00
042B8:  MOVWF  01
042BA:  GOTO   42BE
....................    }
042BE:  GOTO   4438 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
045E8:  MOVLW  AA
045EA:  MOVLB  1
045EC:  MOVWF  x62
....................    data[1] = (BOSS_PIC << 4) | frame_id;
045EE:  MOVF   x5E,W
045F0:  IORLW  50
045F2:  MOVWF  x63
....................    memcpy(&data[2], content, size);
045F4:  MOVLW  01
045F6:  MOVWF  FEA
045F8:  MOVLW  64
045FA:  MOVWF  FE9
045FC:  MOVFF  160,FE2
04600:  MOVFF  15F,FE1
04604:  MOVF   x61,W
04606:  MOVWF  01
04608:  BTFSS  FD8.2
0460A:  BRA    4612
0460C:  MOVLB  0
0460E:  GOTO   461E
04612:  MOVLB  0
04614:  MOVFF  FE6,FEE
04618:  DECFSZ 01,F
0461A:  GOTO   4614
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0461E:  MOVLW  02
04620:  MOVLB  1
04622:  ADDWF  x61,W
04624:  MOVWF  x72
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
04626:  CLRF   03
04628:  MOVF   x72,W
0462A:  ADDLW  62
0462C:  MOVWF  01
0462E:  MOVLW  01
04630:  ADDWFC 03,F
04632:  MOVF   01,W
04634:  MOVWF  x74
04636:  MOVFF  03,175
0463A:  MOVLW  01
0463C:  SUBWF  x72,W
0463E:  MOVWF  x76
04640:  MOVLW  01
04642:  MOVLB  9
04644:  MOVWF  xE7
04646:  MOVLW  63
04648:  MOVWF  xE6
0464A:  MOVFF  176,9E8
0464E:  MOVLB  0
04650:  CALL   40D4
04654:  MOVFF  175,FEA
04658:  MOVFF  174,FE9
0465C:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
04660:  MOVLW  01
04662:  MOVLB  1
04664:  ADDWF  x72,W
04666:  MOVWF  x73
....................    
....................    transmit(data, data_size);
04668:  MOVLW  01
0466A:  MOVWF  x75
0466C:  MOVLW  62
0466E:  MOVWF  x74
04670:  MOVFF  173,176
04674:  MOVLB  0
04676:  GOTO   4530
0467A:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
04530:  MOVLB  1
04532:  CLRF   x77
04534:  MOVLB  0
04536:  MOVLB  1
04538:  MOVF   x76,W
0453A:  SUBWF  x77,W
0453C:  BTFSS  FD8.0
0453E:  BRA    4546
04540:  MOVLB  0
04542:  GOTO   456C
04546:  MOVLB  0
....................       fputc(data[i], BOSS);
04548:  MOVLB  1
0454A:  MOVF   x77,W
0454C:  ADDWF  x74,W
0454E:  MOVWF  FE9
04550:  MOVLW  00
04552:  ADDWFC x75,W
04554:  MOVWF  FEA
04556:  MOVFF  FEF,179
0455A:  MOVF   x79,W
0455C:  MOVLB  0
0455E:  GOTO   4520
04562:  MOVLB  1
04564:  INCF   x77,F
04566:  MOVLB  0
04568:  GOTO   4536
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
0456C:  MOVLW  EA
0456E:  MOVWF  FF6
04570:  MOVLW  03
04572:  MOVWF  FF7
04574:  MOVLW  00
04576:  MOVWF  FF8
04578:  CALL   1EE8
....................    for(int i = 0; i < data_size; i++)
0457C:  MOVLB  1
0457E:  CLRF   x78
04580:  MOVLB  0
04582:  MOVLB  1
04584:  MOVF   x76,W
04586:  SUBWF  x78,W
04588:  BTFSS  FD8.0
0458A:  BRA    4592
0458C:  MOVLB  0
0458E:  GOTO   45CC
04592:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
04594:  MOVLB  1
04596:  MOVF   x78,W
04598:  ADDWF  x74,W
0459A:  MOVWF  FE9
0459C:  MOVLW  00
0459E:  ADDWFC x75,W
045A0:  MOVWF  FEA
045A2:  MOVFF  FEF,179
045A6:  MOVFF  179,996
045AA:  MOVLW  37
045AC:  MOVLB  9
045AE:  MOVWF  x97
045B0:  MOVLB  0
045B2:  CALL   2116
045B6:  MOVLW  20
045B8:  MOVLB  A
045BA:  MOVWF  x29
045BC:  MOVLB  0
045BE:  CALL   1E96
045C2:  MOVLB  1
045C4:  INCF   x78,F
045C6:  MOVLB  0
045C8:  GOTO   4582
....................    fprintf(PC, "\r\n");
045CC:  MOVLW  0D
045CE:  MOVLB  A
045D0:  MOVWF  x29
045D2:  MOVLB  0
045D4:  CALL   1E96
045D8:  MOVLW  0A
045DA:  MOVLB  A
045DC:  MOVWF  x29
045DE:  MOVLB  0
045E0:  CALL   1E96
045E4:  GOTO   467A (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0467C:  MOVLW  0F
0467E:  MOVLB  1
04680:  MOVWF  x5E
04682:  CLRF   x60
04684:  CLRF   x5F
04686:  CLRF   x61
04688:  MOVLB  0
0468A:  CALL   45E8
0468E:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0901C:  MOVLW  03
0901E:  MOVLB  1
09020:  MOVWF  x5E
09022:  CLRF   x60
09024:  MOVLW  48
09026:  MOVWF  x5F
09028:  MOVLW  04
0902A:  MOVWF  x61
0902C:  MOVLB  0
0902E:  CALL   45E8
09032:  GOTO   905A (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"               // 同じフォルダのヘッダー
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... /*
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... */
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
....................     output_high(CONNECT_CIGS1);
....................     output_low(EN_NPWR); // Enable power to CIGS
....................     delay_us(100); // wait for the CIGS to stabilize
....................     fprintf(PC, "step, voltage, current\r\n");
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     delay_ms(100); // wait for the DAC to stabilize
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
....................         delay_ms(1); // wait for the ADC to stabilize
....................     }
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     fprintf(PC, "Start ADC TEST\r\n");
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_CURR);
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_AMP);
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_VREF);
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... /*
.................... void add_smf_queue_data()
.................... {
....................     SmfDataStruct smf_data;
....................     smf_data.type = SMF_DATA_TYPE_CIGS;
....................     smf_data.length = PACKET_SIZE;
....................     memcpy(smf_data.data, packetdata, PACKET_SIZE);
....................     enqueue_smf_data(&smf_data);
.................... }
.................... */
.................... void add_smf_queue_piclog()
.................... {}
.................... 
.................... void convert_datas(MEASUREMENT_DATA measured_data, )
.................... {
.................... 
.................... }
.................... 
.................... void sweep_with_threshold(unsigned int16 curr_threshold, unsigned int16 pd_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, "Start SWEEP with threshold\r\n");
*
07200:  MOVLW  1C
07202:  MOVWF  FF6
07204:  MOVLW  07
07206:  MOVWF  FF7
07208:  MOVLW  00
0720A:  MOVWF  FF8
0720C:  CALL   1EE8
....................    
....................     // Enable both CIGS ports
....................     output_high(CONNECT_CIGS1);
07210:  BCF    F94.0
07212:  BSF    F8B.0
....................     output_high(CONNECT_CIGS2);
07214:  BCF    F94.5
07216:  BSF    F8B.5
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     SWEEP_CONFIG port1 = {0};
07218:  MOVLB  1
0721A:  CLRF   x81
0721C:  CLRF   x82
0721E:  CLRF   x83
07220:  CLRF   x84
07222:  CLRF   x85
07224:  CLRF   x86
07226:  CLRF   x87
07228:  CLRF   x88
0722A:  CLRF   x89
0722C:  CLRF   x8A
0722E:  CLRF   x8B
07230:  CLRF   x8C
07232:  CLRF   x8D
07234:  CLRF   x8E
07236:  CLRF   x8F
07238:  CLRF   x90
0723A:  CLRF   x91
0723C:  CLRF   x92
0723E:  CLRF   x93
07240:  CLRF   x94
07242:  CLRF   x95
07244:  CLRF   x96
07246:  CLRF   x97
07248:  CLRF   x98
0724A:  CLRF   x99
0724C:  CLRF   x9A
0724E:  CLRF   x9B
07250:  CLRF   x9C
07252:  CLRF   x9D
07254:  CLRF   x9E
07256:  CLRF   x9F
07258:  CLRF   xA0
0725A:  CLRF   xA1
0725C:  CLRF   xA2
0725E:  CLRF   xA3
07260:  CLRF   xA4
07262:  CLRF   xA5
07264:  CLRF   xA6
07266:  CLRF   xA7
07268:  CLRF   xA8
0726A:  CLRF   xA9
0726C:  CLRF   xAA
0726E:  CLRF   xAB
07270:  CLRF   xAC
07272:  CLRF   xAD
07274:  CLRF   xAE
07276:  CLRF   xAF
07278:  CLRF   xB0
0727A:  CLRF   xB1
0727C:  CLRF   xB2
0727E:  CLRF   xB3
07280:  CLRF   xB4
07282:  CLRF   xB5
07284:  CLRF   xB6
07286:  CLRF   xB7
07288:  CLRF   xB8
0728A:  CLRF   xB9
0728C:  CLRF   xBA
0728E:  CLRF   xBB
07290:  CLRF   xBC
07292:  CLRF   xBD
07294:  CLRF   xBE
07296:  CLRF   xBF
07298:  CLRF   xC0
0729A:  CLRF   xC1
0729C:  CLRF   xC2
0729E:  CLRF   xC3
072A0:  CLRF   xC4
072A2:  CLRF   xC5
072A4:  CLRF   xC6
072A6:  CLRF   xC7
072A8:  CLRF   xC8
072AA:  CLRF   xC9
072AC:  CLRF   xCA
072AE:  CLRF   xCB
072B0:  CLRF   xCC
072B2:  CLRF   xCD
072B4:  CLRF   xCE
072B6:  CLRF   xCF
072B8:  CLRF   xD0
072BA:  CLRF   xD1
072BC:  CLRF   xD2
072BE:  CLRF   xD3
072C0:  CLRF   xD4
072C2:  CLRF   xD5
072C4:  CLRF   xD6
072C6:  CLRF   xD7
072C8:  CLRF   xD8
072CA:  CLRF   xD9
072CC:  CLRF   xDA
072CE:  CLRF   xDB
072D0:  CLRF   xDC
072D2:  CLRF   xDD
072D4:  CLRF   xDE
072D6:  CLRF   xDF
072D8:  CLRF   xE0
072DA:  CLRF   xE1
072DC:  CLRF   xE2
072DE:  CLRF   xE3
072E0:  CLRF   xE4
072E2:  CLRF   xE5
072E4:  CLRF   xE6
072E6:  CLRF   xE7
072E8:  CLRF   xE8
072EA:  CLRF   xE9
072EC:  CLRF   xEA
072EE:  CLRF   xEB
072F0:  CLRF   xEC
072F2:  CLRF   xED
072F4:  CLRF   xEE
072F6:  CLRF   xEF
072F8:  CLRF   xF0
072FA:  CLRF   xF1
072FC:  CLRF   xF2
072FE:  CLRF   xF3
07300:  CLRF   xF4
07302:  CLRF   xF5
07304:  CLRF   xF6
07306:  CLRF   xF7
07308:  CLRF   xF8
0730A:  CLRF   xF9
0730C:  CLRF   xFA
0730E:  CLRF   xFB
07310:  CLRF   xFC
07312:  CLRF   xFD
07314:  CLRF   xFE
07316:  CLRF   xFF
07318:  MOVLB  2
0731A:  CLRF   x00
0731C:  CLRF   x01
0731E:  CLRF   x02
07320:  CLRF   x03
07322:  CLRF   x04
07324:  CLRF   x05
07326:  CLRF   x06
07328:  CLRF   x07
0732A:  CLRF   x08
0732C:  CLRF   x09
0732E:  CLRF   x0A
07330:  CLRF   x0B
07332:  CLRF   x0C
07334:  CLRF   x0D
07336:  CLRF   x0E
07338:  CLRF   x0F
0733A:  CLRF   x10
0733C:  CLRF   x11
0733E:  CLRF   x12
07340:  CLRF   x13
07342:  CLRF   x14
07344:  CLRF   x15
07346:  CLRF   x16
07348:  CLRF   x17
0734A:  CLRF   x18
0734C:  CLRF   x19
0734E:  CLRF   x1A
07350:  CLRF   x1B
07352:  CLRF   x1C
07354:  CLRF   x1D
07356:  CLRF   x1E
07358:  CLRF   x1F
0735A:  CLRF   x20
0735C:  CLRF   x21
0735E:  CLRF   x22
07360:  CLRF   x23
07362:  CLRF   x24
07364:  CLRF   x25
07366:  CLRF   x26
07368:  CLRF   x27
0736A:  CLRF   x28
0736C:  CLRF   x29
0736E:  CLRF   x2A
07370:  CLRF   x2B
07372:  CLRF   x2C
07374:  CLRF   x2D
07376:  CLRF   x2E
07378:  CLRF   x2F
0737A:  CLRF   x30
0737C:  CLRF   x31
0737E:  CLRF   x32
07380:  CLRF   x33
07382:  CLRF   x34
07384:  CLRF   x35
07386:  CLRF   x36
07388:  CLRF   x37
0738A:  CLRF   x38
0738C:  CLRF   x39
0738E:  CLRF   x3A
07390:  CLRF   x3B
07392:  CLRF   x3C
07394:  CLRF   x3D
07396:  CLRF   x3E
07398:  CLRF   x3F
0739A:  CLRF   x40
0739C:  CLRF   x41
0739E:  CLRF   x42
073A0:  CLRF   x43
073A2:  CLRF   x44
073A4:  CLRF   x45
073A6:  CLRF   x46
073A8:  CLRF   x47
073AA:  CLRF   x48
073AC:  CLRF   x49
073AE:  CLRF   x4A
073B0:  CLRF   x4B
073B2:  CLRF   x4C
073B4:  CLRF   x4D
073B6:  CLRF   x4E
073B8:  CLRF   x4F
073BA:  CLRF   x50
073BC:  CLRF   x51
073BE:  CLRF   x52
073C0:  CLRF   x53
073C2:  CLRF   x54
073C4:  CLRF   x55
073C6:  CLRF   x56
073C8:  CLRF   x57
073CA:  CLRF   x58
073CC:  CLRF   x59
073CE:  CLRF   x5A
073D0:  CLRF   x5B
073D2:  CLRF   x5C
073D4:  CLRF   x5D
073D6:  CLRF   x5E
073D8:  CLRF   x5F
073DA:  CLRF   x60
073DC:  CLRF   x61
073DE:  CLRF   x62
073E0:  CLRF   x63
073E2:  CLRF   x64
073E4:  CLRF   x65
073E6:  CLRF   x66
073E8:  CLRF   x67
073EA:  CLRF   x68
073EC:  CLRF   x69
073EE:  CLRF   x6A
073F0:  CLRF   x6B
073F2:  CLRF   x6C
073F4:  CLRF   x6D
073F6:  CLRF   x6E
073F8:  CLRF   x6F
073FA:  CLRF   x70
073FC:  CLRF   x71
073FE:  CLRF   x72
07400:  CLRF   x73
07402:  CLRF   x74
07404:  CLRF   x75
07406:  CLRF   x76
07408:  CLRF   x77
0740A:  CLRF   x78
0740C:  CLRF   x79
0740E:  CLRF   x7A
07410:  CLRF   x7B
07412:  CLRF   x7C
07414:  CLRF   x7D
07416:  CLRF   x7E
07418:  CLRF   x7F
0741A:  CLRF   x80
0741C:  CLRF   x81
0741E:  CLRF   x82
07420:  CLRF   x83
07422:  CLRF   x84
07424:  CLRF   x85
07426:  CLRF   x86
07428:  CLRF   x87
0742A:  CLRF   x88
0742C:  CLRF   x89
0742E:  CLRF   x8A
07430:  CLRF   x8B
07432:  CLRF   x8C
07434:  CLRF   x8D
07436:  CLRF   x8E
07438:  CLRF   x8F
0743A:  CLRF   x90
0743C:  CLRF   x91
0743E:  CLRF   x92
07440:  CLRF   x93
07442:  CLRF   x94
07444:  CLRF   x95
07446:  CLRF   x96
07448:  CLRF   x97
0744A:  CLRF   x98
0744C:  CLRF   x99
0744E:  CLRF   x9A
07450:  CLRF   x9B
07452:  CLRF   x9C
07454:  CLRF   x9D
07456:  CLRF   x9E
07458:  CLRF   x9F
0745A:  CLRF   xA0
0745C:  CLRF   xA1
0745E:  CLRF   xA2
07460:  CLRF   xA3
07462:  CLRF   xA4
07464:  CLRF   xA5
07466:  CLRF   xA6
07468:  CLRF   xA7
0746A:  CLRF   xA8
0746C:  CLRF   xA9
0746E:  CLRF   xAA
07470:  CLRF   xAB
07472:  CLRF   xAC
07474:  CLRF   xAD
07476:  CLRF   xAE
07478:  CLRF   xAF
0747A:  CLRF   xB0
0747C:  CLRF   xB1
0747E:  CLRF   xB2
07480:  CLRF   xB3
07482:  CLRF   xB4
07484:  CLRF   xB5
07486:  CLRF   xB6
07488:  CLRF   xB7
0748A:  CLRF   xB8
0748C:  CLRF   xB9
0748E:  CLRF   xBA
07490:  CLRF   xBB
07492:  CLRF   xBC
07494:  CLRF   xBD
07496:  CLRF   xBE
07498:  CLRF   xBF
0749A:  CLRF   xC0
0749C:  CLRF   xC1
0749E:  CLRF   xC2
074A0:  CLRF   xC3
074A2:  CLRF   xC4
074A4:  CLRF   xC5
074A6:  CLRF   xC6
074A8:  CLRF   xC7
074AA:  CLRF   xC8
074AC:  CLRF   xC9
074AE:  CLRF   xCA
074B0:  CLRF   xCB
074B2:  CLRF   xCC
074B4:  CLRF   xCD
074B6:  CLRF   xCE
074B8:  CLRF   xCF
074BA:  CLRF   xD0
074BC:  CLRF   xD1
074BE:  CLRF   xD2
074C0:  CLRF   xD3
074C2:  CLRF   xD4
074C4:  CLRF   xD5
074C6:  CLRF   xD6
074C8:  CLRF   xD7
074CA:  CLRF   xD8
074CC:  CLRF   xD9
074CE:  CLRF   xDA
074D0:  CLRF   xDB
074D2:  CLRF   xDC
074D4:  CLRF   xDD
074D6:  CLRF   xDE
074D8:  CLRF   xDF
074DA:  CLRF   xE0
074DC:  CLRF   xE1
074DE:  CLRF   xE2
074E0:  CLRF   xE3
074E2:  CLRF   xE4
074E4:  CLRF   xE5
074E6:  CLRF   xE6
074E8:  CLRF   xE7
074EA:  CLRF   xE8
074EC:  CLRF   xE9
074EE:  CLRF   xEA
074F0:  CLRF   xEB
074F2:  CLRF   xEC
074F4:  CLRF   xED
074F6:  CLRF   xEE
074F8:  CLRF   xEF
074FA:  CLRF   xF0
074FC:  CLRF   xF1
074FE:  CLRF   xF2
07500:  CLRF   xF3
07502:  CLRF   xF4
07504:  CLRF   xF5
07506:  CLRF   xF6
07508:  CLRF   xF7
0750A:  CLRF   xF8
0750C:  CLRF   xF9
0750E:  CLRF   xFA
07510:  CLRF   xFB
07512:  CLRF   xFC
07514:  CLRF   xFD
07516:  CLRF   xFE
07518:  CLRF   xFF
0751A:  MOVLB  3
0751C:  CLRF   x00
0751E:  CLRF   x01
07520:  CLRF   x02
07522:  CLRF   x03
07524:  CLRF   x04
07526:  CLRF   x05
07528:  CLRF   x06
0752A:  CLRF   x07
0752C:  CLRF   x08
0752E:  CLRF   x09
07530:  CLRF   x0A
07532:  CLRF   x0B
07534:  CLRF   x0C
07536:  CLRF   x0D
07538:  CLRF   x0E
0753A:  CLRF   x0F
0753C:  CLRF   x10
0753E:  CLRF   x11
07540:  CLRF   x12
07542:  CLRF   x13
07544:  CLRF   x14
07546:  CLRF   x15
07548:  CLRF   x16
0754A:  CLRF   x17
0754C:  CLRF   x18
0754E:  CLRF   x19
07550:  CLRF   x1A
07552:  CLRF   x1B
07554:  CLRF   x1C
07556:  CLRF   x1D
07558:  CLRF   x1E
0755A:  CLRF   x1F
0755C:  CLRF   x20
0755E:  CLRF   x21
07560:  CLRF   x22
07562:  CLRF   x23
07564:  CLRF   x24
07566:  CLRF   x25
07568:  CLRF   x26
0756A:  CLRF   x27
0756C:  CLRF   x28
0756E:  CLRF   x29
07570:  CLRF   x2A
07572:  CLRF   x2B
07574:  CLRF   x2C
07576:  CLRF   x2D
07578:  CLRF   x2E
0757A:  CLRF   x2F
0757C:  CLRF   x30
0757E:  CLRF   x31
07580:  CLRF   x32
07582:  CLRF   x33
07584:  CLRF   x34
07586:  CLRF   x35
07588:  CLRF   x36
0758A:  CLRF   x37
0758C:  CLRF   x38
0758E:  CLRF   x39
07590:  CLRF   x3A
07592:  CLRF   x3B
07594:  CLRF   x3C
07596:  CLRF   x3D
07598:  CLRF   x3E
0759A:  CLRF   x3F
0759C:  CLRF   x40
0759E:  CLRF   x41
075A0:  CLRF   x42
075A2:  CLRF   x43
075A4:  CLRF   x44
075A6:  CLRF   x45
075A8:  CLRF   x46
075AA:  CLRF   x47
075AC:  CLRF   x48
075AE:  CLRF   x49
075B0:  CLRF   x4A
075B2:  CLRF   x4B
075B4:  CLRF   x4C
075B6:  CLRF   x4D
075B8:  CLRF   x4E
075BA:  CLRF   x4F
075BC:  CLRF   x50
075BE:  CLRF   x51
075C0:  CLRF   x52
075C2:  CLRF   x53
075C4:  CLRF   x54
075C6:  CLRF   x55
075C8:  CLRF   x56
075CA:  CLRF   x57
075CC:  CLRF   x58
075CE:  CLRF   x59
075D0:  CLRF   x5A
075D2:  CLRF   x5B
075D4:  CLRF   x5C
075D6:  CLRF   x5D
075D8:  CLRF   x5E
075DA:  CLRF   x5F
075DC:  CLRF   x60
075DE:  CLRF   x61
075E0:  CLRF   x62
075E2:  CLRF   x63
075E4:  CLRF   x64
075E6:  CLRF   x65
075E8:  CLRF   x66
075EA:  CLRF   x67
075EC:  CLRF   x68
075EE:  CLRF   x69
075F0:  CLRF   x6A
075F2:  CLRF   x6B
075F4:  CLRF   x6C
075F6:  CLRF   x6D
075F8:  CLRF   x6E
075FA:  CLRF   x6F
075FC:  CLRF   x70
075FE:  CLRF   x71
07600:  CLRF   x72
07602:  CLRF   x73
07604:  CLRF   x74
07606:  CLRF   x75
07608:  CLRF   x76
0760A:  CLRF   x77
0760C:  CLRF   x78
0760E:  CLRF   x79
07610:  CLRF   x7A
07612:  CLRF   x7B
07614:  CLRF   x7C
07616:  CLRF   x7D
07618:  CLRF   x7E
0761A:  CLRF   x7F
0761C:  CLRF   x80
0761E:  CLRF   x81
07620:  CLRF   x82
07622:  CLRF   x83
07624:  CLRF   x84
07626:  CLRF   x85
07628:  CLRF   x86
0762A:  CLRF   x87
0762C:  CLRF   x88
0762E:  CLRF   x89
07630:  CLRF   x8A
07632:  CLRF   x8B
07634:  CLRF   x8C
07636:  CLRF   x8D
07638:  CLRF   x8E
0763A:  CLRF   x8F
0763C:  CLRF   x90
0763E:  CLRF   x91
07640:  CLRF   x92
07642:  CLRF   x93
07644:  CLRF   x94
07646:  CLRF   x95
07648:  CLRF   x96
0764A:  CLRF   x97
0764C:  CLRF   x98
0764E:  CLRF   x99
07650:  CLRF   x9A
07652:  CLRF   x9B
07654:  CLRF   x9C
07656:  CLRF   x9D
07658:  CLRF   x9E
0765A:  CLRF   x9F
0765C:  CLRF   xA0
0765E:  CLRF   xA1
07660:  CLRF   xA2
07662:  CLRF   xA3
07664:  CLRF   xA4
07666:  CLRF   xA5
07668:  CLRF   xA6
0766A:  CLRF   xA7
0766C:  CLRF   xA8
0766E:  CLRF   xA9
07670:  CLRF   xAA
07672:  CLRF   xAB
07674:  CLRF   xAC
07676:  CLRF   xAD
07678:  CLRF   xAE
0767A:  CLRF   xAF
0767C:  CLRF   xB0
0767E:  CLRF   xB1
07680:  CLRF   xB2
07682:  CLRF   xB3
07684:  CLRF   xB4
07686:  CLRF   xB5
07688:  CLRF   xB6
0768A:  CLRF   xB7
0768C:  CLRF   xB8
0768E:  CLRF   xB9
07690:  CLRF   xBA
07692:  CLRF   xBB
07694:  CLRF   xBC
07696:  CLRF   xBD
07698:  CLRF   xBE
0769A:  CLRF   xBF
0769C:  CLRF   xC0
0769E:  CLRF   xC1
076A0:  CLRF   xC2
076A2:  CLRF   xC3
076A4:  CLRF   xC4
076A6:  CLRF   xC5
076A8:  CLRF   xC6
076AA:  CLRF   xC7
076AC:  CLRF   xC8
076AE:  CLRF   xC9
076B0:  CLRF   xCA
076B2:  CLRF   xCB
076B4:  CLRF   xCC
076B6:  CLRF   xCD
076B8:  CLRF   xCE
076BA:  CLRF   xCF
076BC:  CLRF   xD0
076BE:  CLRF   xD1
076C0:  CLRF   xD2
076C2:  CLRF   xD3
076C4:  CLRF   xD4
076C6:  CLRF   xD5
076C8:  CLRF   xD6
076CA:  CLRF   xD7
076CC:  CLRF   xD8
076CE:  CLRF   xD9
076D0:  CLRF   xDA
076D2:  CLRF   xDB
076D4:  CLRF   xDC
076D6:  CLRF   xDD
076D8:  CLRF   xDE
076DA:  CLRF   xDF
076DC:  CLRF   xE0
076DE:  CLRF   xE1
076E0:  CLRF   xE2
076E2:  CLRF   xE3
076E4:  CLRF   xE4
076E6:  CLRF   xE5
076E8:  CLRF   xE6
076EA:  CLRF   xE7
076EC:  CLRF   xE8
076EE:  CLRF   xE9
076F0:  CLRF   xEA
076F2:  CLRF   xEB
076F4:  CLRF   xEC
076F6:  CLRF   xED
076F8:  CLRF   xEE
076FA:  CLRF   xEF
076FC:  CLRF   xF0
076FE:  CLRF   xF1
07700:  CLRF   xF2
07702:  CLRF   xF3
07704:  CLRF   xF4
07706:  CLRF   xF5
07708:  CLRF   xF6
0770A:  CLRF   xF7
0770C:  CLRF   xF8
0770E:  CLRF   xF9
07710:  CLRF   xFA
07712:  CLRF   xFB
07714:  CLRF   xFC
07716:  CLRF   xFD
07718:  CLRF   xFE
0771A:  CLRF   xFF
0771C:  MOVLB  4
0771E:  CLRF   x00
07720:  CLRF   x01
07722:  CLRF   x02
07724:  CLRF   x03
07726:  CLRF   x04
07728:  CLRF   x05
0772A:  CLRF   x06
0772C:  CLRF   x07
0772E:  CLRF   x08
07730:  CLRF   x09
07732:  CLRF   x0A
07734:  CLRF   x0B
07736:  CLRF   x0C
07738:  CLRF   x0D
0773A:  CLRF   x0E
0773C:  CLRF   x0F
0773E:  CLRF   x10
07740:  CLRF   x11
07742:  CLRF   x12
07744:  CLRF   x13
07746:  CLRF   x14
07748:  CLRF   x15
0774A:  CLRF   x16
0774C:  CLRF   x17
0774E:  CLRF   x18
07750:  CLRF   x19
07752:  CLRF   x1A
07754:  CLRF   x1B
07756:  CLRF   x1C
07758:  CLRF   x1D
0775A:  CLRF   x1E
0775C:  CLRF   x1F
0775E:  CLRF   x20
07760:  CLRF   x21
07762:  CLRF   x22
07764:  CLRF   x23
07766:  CLRF   x24
07768:  CLRF   x25
0776A:  CLRF   x26
0776C:  CLRF   x27
0776E:  CLRF   x28
07770:  CLRF   x29
07772:  CLRF   x2A
07774:  CLRF   x2B
07776:  CLRF   x2C
07778:  CLRF   x2D
0777A:  CLRF   x2E
0777C:  CLRF   x2F
0777E:  CLRF   x30
07780:  CLRF   x31
07782:  CLRF   x32
07784:  CLRF   x33
07786:  CLRF   x34
07788:  CLRF   x35
0778A:  CLRF   x36
0778C:  CLRF   x37
0778E:  CLRF   x38
07790:  CLRF   x39
07792:  CLRF   x3A
07794:  CLRF   x3B
07796:  CLRF   x3C
07798:  CLRF   x3D
0779A:  CLRF   x3E
0779C:  CLRF   x3F
0779E:  CLRF   x40
077A0:  CLRF   x41
077A2:  CLRF   x42
077A4:  CLRF   x43
077A6:  CLRF   x44
077A8:  CLRF   x45
077AA:  CLRF   x46
077AC:  CLRF   x47
077AE:  CLRF   x48
077B0:  CLRF   x49
077B2:  CLRF   x4A
077B4:  CLRF   x4B
077B6:  CLRF   x4C
077B8:  CLRF   x4D
077BA:  CLRF   x4E
077BC:  CLRF   x4F
077BE:  CLRF   x50
077C0:  CLRF   x51
077C2:  CLRF   x52
077C4:  CLRF   x53
077C6:  CLRF   x54
077C8:  CLRF   x55
077CA:  CLRF   x56
077CC:  CLRF   x57
077CE:  CLRF   x58
077D0:  CLRF   x59
077D2:  CLRF   x5A
077D4:  CLRF   x5B
077D6:  CLRF   x5C
077D8:  CLRF   x5D
077DA:  CLRF   x5E
077DC:  CLRF   x5F
077DE:  CLRF   x60
077E0:  CLRF   x61
077E2:  CLRF   x62
077E4:  CLRF   x63
077E6:  CLRF   x64
077E8:  CLRF   x65
077EA:  CLRF   x66
077EC:  CLRF   x67
077EE:  CLRF   x68
077F0:  CLRF   x69
077F2:  CLRF   x6A
077F4:  CLRF   x6B
077F6:  CLRF   x6C
077F8:  CLRF   x6D
077FA:  CLRF   x6E
077FC:  CLRF   x6F
077FE:  CLRF   x70
07800:  CLRF   x71
07802:  CLRF   x72
07804:  CLRF   x73
07806:  CLRF   x74
07808:  CLRF   x75
0780A:  CLRF   x76
0780C:  CLRF   x77
0780E:  CLRF   x78
07810:  CLRF   x79
07812:  CLRF   x7A
07814:  CLRF   x7B
07816:  CLRF   x7C
07818:  CLRF   x7D
0781A:  CLRF   x7E
0781C:  CLRF   x7F
0781E:  CLRF   x80
07820:  CLRF   x81
07822:  CLRF   x82
07824:  CLRF   x83
07826:  CLRF   x84
07828:  CLRF   x85
0782A:  CLRF   x86
0782C:  CLRF   x87
0782E:  CLRF   x88
07830:  CLRF   x89
07832:  CLRF   x8A
07834:  CLRF   x8B
07836:  CLRF   x8C
07838:  CLRF   x8D
0783A:  CLRF   x8E
0783C:  CLRF   x8F
0783E:  CLRF   x90
07840:  CLRF   x91
07842:  CLRF   x92
07844:  CLRF   x93
07846:  CLRF   x94
07848:  CLRF   x95
0784A:  CLRF   x96
0784C:  CLRF   x97
0784E:  CLRF   x98
07850:  CLRF   x99
07852:  CLRF   x9A
07854:  CLRF   x9B
07856:  CLRF   x9C
07858:  CLRF   x9D
0785A:  CLRF   x9E
0785C:  CLRF   x9F
0785E:  CLRF   xA0
07860:  CLRF   xA1
07862:  CLRF   xA2
07864:  CLRF   xA3
07866:  CLRF   xA4
07868:  CLRF   xA5
0786A:  CLRF   xA6
0786C:  CLRF   xA7
0786E:  CLRF   xA8
07870:  CLRF   xA9
07872:  CLRF   xAA
07874:  CLRF   xAB
07876:  CLRF   xAC
07878:  CLRF   xAD
0787A:  CLRF   xAE
0787C:  CLRF   xAF
0787E:  CLRF   xB0
07880:  CLRF   xB1
07882:  CLRF   xB2
07884:  CLRF   xB3
07886:  CLRF   xB4
07888:  CLRF   xB5
0788A:  CLRF   xB6
0788C:  CLRF   xB7
0788E:  CLRF   xB8
07890:  CLRF   xB9
07892:  CLRF   xBA
07894:  CLRF   xBB
07896:  CLRF   xBC
07898:  CLRF   xBD
0789A:  CLRF   xBE
0789C:  CLRF   xBF
0789E:  CLRF   xC0
078A0:  CLRF   xC1
078A2:  CLRF   xC2
078A4:  CLRF   xC3
078A6:  CLRF   xC4
078A8:  CLRF   xC5
078AA:  CLRF   xC6
078AC:  CLRF   xC7
078AE:  CLRF   xC8
078B0:  CLRF   xC9
078B2:  CLRF   xCA
078B4:  CLRF   xCB
078B6:  CLRF   xCC
078B8:  CLRF   xCD
078BA:  CLRF   xCE
078BC:  CLRF   xCF
078BE:  CLRF   xD0
078C0:  CLRF   xD1
078C2:  CLRF   xD2
078C4:  CLRF   xD3
078C6:  CLRF   xD4
078C8:  CLRF   xD5
078CA:  CLRF   xD6
078CC:  CLRF   xD7
078CE:  CLRF   xD8
078D0:  CLRF   xD9
078D2:  CLRF   xDA
078D4:  CLRF   xDB
078D6:  CLRF   xDC
078D8:  CLRF   xDD
078DA:  CLRF   xDE
078DC:  CLRF   xDF
078DE:  CLRF   xE0
078E0:  CLRF   xE1
078E2:  CLRF   xE2
078E4:  CLRF   xE3
078E6:  CLRF   xE4
078E8:  CLRF   xE5
078EA:  CLRF   xE6
078EC:  CLRF   xE7
078EE:  CLRF   xE8
078F0:  CLRF   xE9
078F2:  CLRF   xEA
078F4:  CLRF   xEB
078F6:  CLRF   xEC
078F8:  CLRF   xED
078FA:  CLRF   xEE
078FC:  CLRF   xEF
078FE:  CLRF   xF0
07900:  CLRF   xF1
07902:  CLRF   xF2
07904:  CLRF   xF3
07906:  CLRF   xF4
07908:  CLRF   xF5
0790A:  CLRF   xF6
0790C:  CLRF   xF7
0790E:  CLRF   xF8
07910:  CLRF   xF9
07912:  CLRF   xFA
07914:  CLRF   xFB
07916:  CLRF   xFC
07918:  CLRF   xFD
0791A:  CLRF   xFE
0791C:  CLRF   xFF
0791E:  MOVLB  5
07920:  CLRF   x00
07922:  CLRF   x01
07924:  CLRF   x02
07926:  CLRF   x03
07928:  CLRF   x04
0792A:  CLRF   x05
0792C:  CLRF   x06
0792E:  CLRF   x07
07930:  CLRF   x08
07932:  CLRF   x09
07934:  CLRF   x0A
07936:  CLRF   x0B
07938:  CLRF   x0C
0793A:  CLRF   x0D
0793C:  CLRF   x0E
0793E:  CLRF   x0F
07940:  CLRF   x10
07942:  CLRF   x11
07944:  CLRF   x12
07946:  CLRF   x13
07948:  CLRF   x14
0794A:  CLRF   x15
0794C:  CLRF   x16
0794E:  CLRF   x17
07950:  CLRF   x18
07952:  CLRF   x19
07954:  CLRF   x1A
07956:  CLRF   x1B
07958:  CLRF   x1C
0795A:  CLRF   x1D
0795C:  CLRF   x1E
0795E:  CLRF   x1F
07960:  CLRF   x20
07962:  CLRF   x21
07964:  CLRF   x22
07966:  CLRF   x23
07968:  CLRF   x24
0796A:  CLRF   x25
0796C:  CLRF   x26
0796E:  CLRF   x27
07970:  CLRF   x28
07972:  CLRF   x29
07974:  CLRF   x2A
07976:  CLRF   x2B
07978:  CLRF   x2C
0797A:  CLRF   x2D
0797C:  CLRF   x2E
0797E:  CLRF   x2F
07980:  CLRF   x30
07982:  CLRF   x31
07984:  CLRF   x32
07986:  CLRF   x33
07988:  CLRF   x34
0798A:  CLRF   x35
0798C:  CLRF   x36
0798E:  CLRF   x37
07990:  CLRF   x38
07992:  CLRF   x39
07994:  CLRF   x3A
07996:  CLRF   x3B
07998:  CLRF   x3C
0799A:  CLRF   x3D
0799C:  CLRF   x3E
0799E:  CLRF   x3F
079A0:  CLRF   x40
079A2:  CLRF   x41
079A4:  CLRF   x42
079A6:  CLRF   x43
079A8:  CLRF   x44
079AA:  CLRF   x45
079AC:  CLRF   x46
079AE:  CLRF   x47
079B0:  CLRF   x48
079B2:  CLRF   x49
079B4:  CLRF   x4A
079B6:  CLRF   x4B
079B8:  CLRF   x4C
079BA:  CLRF   x4D
079BC:  CLRF   x4E
079BE:  CLRF   x4F
079C0:  CLRF   x50
079C2:  CLRF   x51
079C4:  CLRF   x52
079C6:  CLRF   x53
079C8:  CLRF   x54
079CA:  CLRF   x55
079CC:  CLRF   x56
079CE:  CLRF   x57
079D0:  CLRF   x58
079D2:  CLRF   x59
079D4:  CLRF   x5A
079D6:  CLRF   x5B
079D8:  CLRF   x5C
079DA:  CLRF   x5D
079DC:  CLRF   x5E
079DE:  CLRF   x5F
079E0:  CLRF   x60
079E2:  CLRF   x61
079E4:  CLRF   x62
079E6:  CLRF   x63
079E8:  CLRF   x64
079EA:  CLRF   x65
079EC:  CLRF   x66
079EE:  CLRF   x67
079F0:  CLRF   x68
079F2:  CLRF   x69
079F4:  CLRF   x6A
079F6:  CLRF   x6B
079F8:  CLRF   x6C
079FA:  CLRF   x6D
079FC:  CLRF   x6E
079FE:  CLRF   x6F
07A00:  CLRF   x70
07A02:  CLRF   x71
07A04:  CLRF   x72
07A06:  CLRF   x73
07A08:  CLRF   x74
07A0A:  CLRF   x75
07A0C:  CLRF   x76
07A0E:  CLRF   x77
07A10:  CLRF   x78
07A12:  CLRF   x79
07A14:  CLRF   x7A
07A16:  CLRF   x7B
07A18:  CLRF   x7C
07A1A:  CLRF   x7D
07A1C:  CLRF   x7E
07A1E:  CLRF   x7F
07A20:  CLRF   x80
....................     port1.port_num = 1;
07A22:  MOVLW  01
07A24:  MOVLB  1
07A26:  MOVWF  x81
....................     port1.sweep_step = 0;
07A28:  CLRF   x83
07A2A:  CLRF   x82
....................     port1.active = 1;
07A2C:  MOVLB  5
07A2E:  BSF    x80.0
.................... 
....................     // Init Port2
....................     SWEEP_CONFIG port2 = {0};
07A30:  CLRF   x81
07A32:  CLRF   x82
07A34:  CLRF   x83
07A36:  CLRF   x84
07A38:  CLRF   x85
07A3A:  CLRF   x86
07A3C:  CLRF   x87
07A3E:  CLRF   x88
07A40:  CLRF   x89
07A42:  CLRF   x8A
07A44:  CLRF   x8B
07A46:  CLRF   x8C
07A48:  CLRF   x8D
07A4A:  CLRF   x8E
07A4C:  CLRF   x8F
07A4E:  CLRF   x90
07A50:  CLRF   x91
07A52:  CLRF   x92
07A54:  CLRF   x93
07A56:  CLRF   x94
07A58:  CLRF   x95
07A5A:  CLRF   x96
07A5C:  CLRF   x97
07A5E:  CLRF   x98
07A60:  CLRF   x99
07A62:  CLRF   x9A
07A64:  CLRF   x9B
07A66:  CLRF   x9C
07A68:  CLRF   x9D
07A6A:  CLRF   x9E
07A6C:  CLRF   x9F
07A6E:  CLRF   xA0
07A70:  CLRF   xA1
07A72:  CLRF   xA2
07A74:  CLRF   xA3
07A76:  CLRF   xA4
07A78:  CLRF   xA5
07A7A:  CLRF   xA6
07A7C:  CLRF   xA7
07A7E:  CLRF   xA8
07A80:  CLRF   xA9
07A82:  CLRF   xAA
07A84:  CLRF   xAB
07A86:  CLRF   xAC
07A88:  CLRF   xAD
07A8A:  CLRF   xAE
07A8C:  CLRF   xAF
07A8E:  CLRF   xB0
07A90:  CLRF   xB1
07A92:  CLRF   xB2
07A94:  CLRF   xB3
07A96:  CLRF   xB4
07A98:  CLRF   xB5
07A9A:  CLRF   xB6
07A9C:  CLRF   xB7
07A9E:  CLRF   xB8
07AA0:  CLRF   xB9
07AA2:  CLRF   xBA
07AA4:  CLRF   xBB
07AA6:  CLRF   xBC
07AA8:  CLRF   xBD
07AAA:  CLRF   xBE
07AAC:  CLRF   xBF
07AAE:  CLRF   xC0
07AB0:  CLRF   xC1
07AB2:  CLRF   xC2
07AB4:  CLRF   xC3
07AB6:  CLRF   xC4
07AB8:  CLRF   xC5
07ABA:  CLRF   xC6
07ABC:  CLRF   xC7
07ABE:  CLRF   xC8
07AC0:  CLRF   xC9
07AC2:  CLRF   xCA
07AC4:  CLRF   xCB
07AC6:  CLRF   xCC
07AC8:  CLRF   xCD
07ACA:  CLRF   xCE
07ACC:  CLRF   xCF
07ACE:  CLRF   xD0
07AD0:  CLRF   xD1
07AD2:  CLRF   xD2
07AD4:  CLRF   xD3
07AD6:  CLRF   xD4
07AD8:  CLRF   xD5
07ADA:  CLRF   xD6
07ADC:  CLRF   xD7
07ADE:  CLRF   xD8
07AE0:  CLRF   xD9
07AE2:  CLRF   xDA
07AE4:  CLRF   xDB
07AE6:  CLRF   xDC
07AE8:  CLRF   xDD
07AEA:  CLRF   xDE
07AEC:  CLRF   xDF
07AEE:  CLRF   xE0
07AF0:  CLRF   xE1
07AF2:  CLRF   xE2
07AF4:  CLRF   xE3
07AF6:  CLRF   xE4
07AF8:  CLRF   xE5
07AFA:  CLRF   xE6
07AFC:  CLRF   xE7
07AFE:  CLRF   xE8
07B00:  CLRF   xE9
07B02:  CLRF   xEA
07B04:  CLRF   xEB
07B06:  CLRF   xEC
07B08:  CLRF   xED
07B0A:  CLRF   xEE
07B0C:  CLRF   xEF
07B0E:  CLRF   xF0
07B10:  CLRF   xF1
07B12:  CLRF   xF2
07B14:  CLRF   xF3
07B16:  CLRF   xF4
07B18:  CLRF   xF5
07B1A:  CLRF   xF6
07B1C:  CLRF   xF7
07B1E:  CLRF   xF8
07B20:  CLRF   xF9
07B22:  CLRF   xFA
07B24:  CLRF   xFB
07B26:  CLRF   xFC
07B28:  CLRF   xFD
07B2A:  CLRF   xFE
07B2C:  CLRF   xFF
07B2E:  MOVLB  6
07B30:  CLRF   x00
07B32:  CLRF   x01
07B34:  CLRF   x02
07B36:  CLRF   x03
07B38:  CLRF   x04
07B3A:  CLRF   x05
07B3C:  CLRF   x06
07B3E:  CLRF   x07
07B40:  CLRF   x08
07B42:  CLRF   x09
07B44:  CLRF   x0A
07B46:  CLRF   x0B
07B48:  CLRF   x0C
07B4A:  CLRF   x0D
07B4C:  CLRF   x0E
07B4E:  CLRF   x0F
07B50:  CLRF   x10
07B52:  CLRF   x11
07B54:  CLRF   x12
07B56:  CLRF   x13
07B58:  CLRF   x14
07B5A:  CLRF   x15
07B5C:  CLRF   x16
07B5E:  CLRF   x17
07B60:  CLRF   x18
07B62:  CLRF   x19
07B64:  CLRF   x1A
07B66:  CLRF   x1B
07B68:  CLRF   x1C
07B6A:  CLRF   x1D
07B6C:  CLRF   x1E
07B6E:  CLRF   x1F
07B70:  CLRF   x20
07B72:  CLRF   x21
07B74:  CLRF   x22
07B76:  CLRF   x23
07B78:  CLRF   x24
07B7A:  CLRF   x25
07B7C:  CLRF   x26
07B7E:  CLRF   x27
07B80:  CLRF   x28
07B82:  CLRF   x29
07B84:  CLRF   x2A
07B86:  CLRF   x2B
07B88:  CLRF   x2C
07B8A:  CLRF   x2D
07B8C:  CLRF   x2E
07B8E:  CLRF   x2F
07B90:  CLRF   x30
07B92:  CLRF   x31
07B94:  CLRF   x32
07B96:  CLRF   x33
07B98:  CLRF   x34
07B9A:  CLRF   x35
07B9C:  CLRF   x36
07B9E:  CLRF   x37
07BA0:  CLRF   x38
07BA2:  CLRF   x39
07BA4:  CLRF   x3A
07BA6:  CLRF   x3B
07BA8:  CLRF   x3C
07BAA:  CLRF   x3D
07BAC:  CLRF   x3E
07BAE:  CLRF   x3F
07BB0:  CLRF   x40
07BB2:  CLRF   x41
07BB4:  CLRF   x42
07BB6:  CLRF   x43
07BB8:  CLRF   x44
07BBA:  CLRF   x45
07BBC:  CLRF   x46
07BBE:  CLRF   x47
07BC0:  CLRF   x48
07BC2:  CLRF   x49
07BC4:  CLRF   x4A
07BC6:  CLRF   x4B
07BC8:  CLRF   x4C
07BCA:  CLRF   x4D
07BCC:  CLRF   x4E
07BCE:  CLRF   x4F
07BD0:  CLRF   x50
07BD2:  CLRF   x51
07BD4:  CLRF   x52
07BD6:  CLRF   x53
07BD8:  CLRF   x54
07BDA:  CLRF   x55
07BDC:  CLRF   x56
07BDE:  CLRF   x57
07BE0:  CLRF   x58
07BE2:  CLRF   x59
07BE4:  CLRF   x5A
07BE6:  CLRF   x5B
07BE8:  CLRF   x5C
07BEA:  CLRF   x5D
07BEC:  CLRF   x5E
07BEE:  CLRF   x5F
07BF0:  CLRF   x60
07BF2:  CLRF   x61
07BF4:  CLRF   x62
07BF6:  CLRF   x63
07BF8:  CLRF   x64
07BFA:  CLRF   x65
07BFC:  CLRF   x66
07BFE:  CLRF   x67
07C00:  CLRF   x68
07C02:  CLRF   x69
07C04:  CLRF   x6A
07C06:  CLRF   x6B
07C08:  CLRF   x6C
07C0A:  CLRF   x6D
07C0C:  CLRF   x6E
07C0E:  CLRF   x6F
07C10:  CLRF   x70
07C12:  CLRF   x71
07C14:  CLRF   x72
07C16:  CLRF   x73
07C18:  CLRF   x74
07C1A:  CLRF   x75
07C1C:  CLRF   x76
07C1E:  CLRF   x77
07C20:  CLRF   x78
07C22:  CLRF   x79
07C24:  CLRF   x7A
07C26:  CLRF   x7B
07C28:  CLRF   x7C
07C2A:  CLRF   x7D
07C2C:  CLRF   x7E
07C2E:  CLRF   x7F
07C30:  CLRF   x80
07C32:  CLRF   x81
07C34:  CLRF   x82
07C36:  CLRF   x83
07C38:  CLRF   x84
07C3A:  CLRF   x85
07C3C:  CLRF   x86
07C3E:  CLRF   x87
07C40:  CLRF   x88
07C42:  CLRF   x89
07C44:  CLRF   x8A
07C46:  CLRF   x8B
07C48:  CLRF   x8C
07C4A:  CLRF   x8D
07C4C:  CLRF   x8E
07C4E:  CLRF   x8F
07C50:  CLRF   x90
07C52:  CLRF   x91
07C54:  CLRF   x92
07C56:  CLRF   x93
07C58:  CLRF   x94
07C5A:  CLRF   x95
07C5C:  CLRF   x96
07C5E:  CLRF   x97
07C60:  CLRF   x98
07C62:  CLRF   x99
07C64:  CLRF   x9A
07C66:  CLRF   x9B
07C68:  CLRF   x9C
07C6A:  CLRF   x9D
07C6C:  CLRF   x9E
07C6E:  CLRF   x9F
07C70:  CLRF   xA0
07C72:  CLRF   xA1
07C74:  CLRF   xA2
07C76:  CLRF   xA3
07C78:  CLRF   xA4
07C7A:  CLRF   xA5
07C7C:  CLRF   xA6
07C7E:  CLRF   xA7
07C80:  CLRF   xA8
07C82:  CLRF   xA9
07C84:  CLRF   xAA
07C86:  CLRF   xAB
07C88:  CLRF   xAC
07C8A:  CLRF   xAD
07C8C:  CLRF   xAE
07C8E:  CLRF   xAF
07C90:  CLRF   xB0
07C92:  CLRF   xB1
07C94:  CLRF   xB2
07C96:  CLRF   xB3
07C98:  CLRF   xB4
07C9A:  CLRF   xB5
07C9C:  CLRF   xB6
07C9E:  CLRF   xB7
07CA0:  CLRF   xB8
07CA2:  CLRF   xB9
07CA4:  CLRF   xBA
07CA6:  CLRF   xBB
07CA8:  CLRF   xBC
07CAA:  CLRF   xBD
07CAC:  CLRF   xBE
07CAE:  CLRF   xBF
07CB0:  CLRF   xC0
07CB2:  CLRF   xC1
07CB4:  CLRF   xC2
07CB6:  CLRF   xC3
07CB8:  CLRF   xC4
07CBA:  CLRF   xC5
07CBC:  CLRF   xC6
07CBE:  CLRF   xC7
07CC0:  CLRF   xC8
07CC2:  CLRF   xC9
07CC4:  CLRF   xCA
07CC6:  CLRF   xCB
07CC8:  CLRF   xCC
07CCA:  CLRF   xCD
07CCC:  CLRF   xCE
07CCE:  CLRF   xCF
07CD0:  CLRF   xD0
07CD2:  CLRF   xD1
07CD4:  CLRF   xD2
07CD6:  CLRF   xD3
07CD8:  CLRF   xD4
07CDA:  CLRF   xD5
07CDC:  CLRF   xD6
07CDE:  CLRF   xD7
07CE0:  CLRF   xD8
07CE2:  CLRF   xD9
07CE4:  CLRF   xDA
07CE6:  CLRF   xDB
07CE8:  CLRF   xDC
07CEA:  CLRF   xDD
07CEC:  CLRF   xDE
07CEE:  CLRF   xDF
07CF0:  CLRF   xE0
07CF2:  CLRF   xE1
07CF4:  CLRF   xE2
07CF6:  CLRF   xE3
07CF8:  CLRF   xE4
07CFA:  CLRF   xE5
07CFC:  CLRF   xE6
07CFE:  CLRF   xE7
07D00:  CLRF   xE8
07D02:  CLRF   xE9
07D04:  CLRF   xEA
07D06:  CLRF   xEB
07D08:  CLRF   xEC
07D0A:  CLRF   xED
07D0C:  CLRF   xEE
07D0E:  CLRF   xEF
07D10:  CLRF   xF0
07D12:  CLRF   xF1
07D14:  CLRF   xF2
07D16:  CLRF   xF3
07D18:  CLRF   xF4
07D1A:  CLRF   xF5
07D1C:  CLRF   xF6
07D1E:  CLRF   xF7
07D20:  CLRF   xF8
07D22:  CLRF   xF9
07D24:  CLRF   xFA
07D26:  CLRF   xFB
07D28:  CLRF   xFC
07D2A:  CLRF   xFD
07D2C:  CLRF   xFE
07D2E:  CLRF   xFF
07D30:  MOVLB  7
07D32:  CLRF   x00
07D34:  CLRF   x01
07D36:  CLRF   x02
07D38:  CLRF   x03
07D3A:  CLRF   x04
07D3C:  CLRF   x05
07D3E:  CLRF   x06
07D40:  CLRF   x07
07D42:  CLRF   x08
07D44:  CLRF   x09
07D46:  CLRF   x0A
07D48:  CLRF   x0B
07D4A:  CLRF   x0C
07D4C:  CLRF   x0D
07D4E:  CLRF   x0E
07D50:  CLRF   x0F
07D52:  CLRF   x10
07D54:  CLRF   x11
07D56:  CLRF   x12
07D58:  CLRF   x13
07D5A:  CLRF   x14
07D5C:  CLRF   x15
07D5E:  CLRF   x16
07D60:  CLRF   x17
07D62:  CLRF   x18
07D64:  CLRF   x19
07D66:  CLRF   x1A
07D68:  CLRF   x1B
07D6A:  CLRF   x1C
07D6C:  CLRF   x1D
07D6E:  CLRF   x1E
07D70:  CLRF   x1F
07D72:  CLRF   x20
07D74:  CLRF   x21
07D76:  CLRF   x22
07D78:  CLRF   x23
07D7A:  CLRF   x24
07D7C:  CLRF   x25
07D7E:  CLRF   x26
07D80:  CLRF   x27
07D82:  CLRF   x28
07D84:  CLRF   x29
07D86:  CLRF   x2A
07D88:  CLRF   x2B
07D8A:  CLRF   x2C
07D8C:  CLRF   x2D
07D8E:  CLRF   x2E
07D90:  CLRF   x2F
07D92:  CLRF   x30
07D94:  CLRF   x31
07D96:  CLRF   x32
07D98:  CLRF   x33
07D9A:  CLRF   x34
07D9C:  CLRF   x35
07D9E:  CLRF   x36
07DA0:  CLRF   x37
07DA2:  CLRF   x38
07DA4:  CLRF   x39
07DA6:  CLRF   x3A
07DA8:  CLRF   x3B
07DAA:  CLRF   x3C
07DAC:  CLRF   x3D
07DAE:  CLRF   x3E
07DB0:  CLRF   x3F
07DB2:  CLRF   x40
07DB4:  CLRF   x41
07DB6:  CLRF   x42
07DB8:  CLRF   x43
07DBA:  CLRF   x44
07DBC:  CLRF   x45
07DBE:  CLRF   x46
07DC0:  CLRF   x47
07DC2:  CLRF   x48
07DC4:  CLRF   x49
07DC6:  CLRF   x4A
07DC8:  CLRF   x4B
07DCA:  CLRF   x4C
07DCC:  CLRF   x4D
07DCE:  CLRF   x4E
07DD0:  CLRF   x4F
07DD2:  CLRF   x50
07DD4:  CLRF   x51
07DD6:  CLRF   x52
07DD8:  CLRF   x53
07DDA:  CLRF   x54
07DDC:  CLRF   x55
07DDE:  CLRF   x56
07DE0:  CLRF   x57
07DE2:  CLRF   x58
07DE4:  CLRF   x59
07DE6:  CLRF   x5A
07DE8:  CLRF   x5B
07DEA:  CLRF   x5C
07DEC:  CLRF   x5D
07DEE:  CLRF   x5E
07DF0:  CLRF   x5F
07DF2:  CLRF   x60
07DF4:  CLRF   x61
07DF6:  CLRF   x62
07DF8:  CLRF   x63
07DFA:  CLRF   x64
07DFC:  CLRF   x65
07DFE:  CLRF   x66
07E00:  CLRF   x67
07E02:  CLRF   x68
07E04:  CLRF   x69
07E06:  CLRF   x6A
07E08:  CLRF   x6B
07E0A:  CLRF   x6C
07E0C:  CLRF   x6D
07E0E:  CLRF   x6E
07E10:  CLRF   x6F
07E12:  CLRF   x70
07E14:  CLRF   x71
07E16:  CLRF   x72
07E18:  CLRF   x73
07E1A:  CLRF   x74
07E1C:  CLRF   x75
07E1E:  CLRF   x76
07E20:  CLRF   x77
07E22:  CLRF   x78
07E24:  CLRF   x79
07E26:  CLRF   x7A
07E28:  CLRF   x7B
07E2A:  CLRF   x7C
07E2C:  CLRF   x7D
07E2E:  CLRF   x7E
07E30:  CLRF   x7F
07E32:  CLRF   x80
07E34:  CLRF   x81
07E36:  CLRF   x82
07E38:  CLRF   x83
07E3A:  CLRF   x84
07E3C:  CLRF   x85
07E3E:  CLRF   x86
07E40:  CLRF   x87
07E42:  CLRF   x88
07E44:  CLRF   x89
07E46:  CLRF   x8A
07E48:  CLRF   x8B
07E4A:  CLRF   x8C
07E4C:  CLRF   x8D
07E4E:  CLRF   x8E
07E50:  CLRF   x8F
07E52:  CLRF   x90
07E54:  CLRF   x91
07E56:  CLRF   x92
07E58:  CLRF   x93
07E5A:  CLRF   x94
07E5C:  CLRF   x95
07E5E:  CLRF   x96
07E60:  CLRF   x97
07E62:  CLRF   x98
07E64:  CLRF   x99
07E66:  CLRF   x9A
07E68:  CLRF   x9B
07E6A:  CLRF   x9C
07E6C:  CLRF   x9D
07E6E:  CLRF   x9E
07E70:  CLRF   x9F
07E72:  CLRF   xA0
07E74:  CLRF   xA1
07E76:  CLRF   xA2
07E78:  CLRF   xA3
07E7A:  CLRF   xA4
07E7C:  CLRF   xA5
07E7E:  CLRF   xA6
07E80:  CLRF   xA7
07E82:  CLRF   xA8
07E84:  CLRF   xA9
07E86:  CLRF   xAA
07E88:  CLRF   xAB
07E8A:  CLRF   xAC
07E8C:  CLRF   xAD
07E8E:  CLRF   xAE
07E90:  CLRF   xAF
07E92:  CLRF   xB0
07E94:  CLRF   xB1
07E96:  CLRF   xB2
07E98:  CLRF   xB3
07E9A:  CLRF   xB4
07E9C:  CLRF   xB5
07E9E:  CLRF   xB6
07EA0:  CLRF   xB7
07EA2:  CLRF   xB8
07EA4:  CLRF   xB9
07EA6:  CLRF   xBA
07EA8:  CLRF   xBB
07EAA:  CLRF   xBC
07EAC:  CLRF   xBD
07EAE:  CLRF   xBE
07EB0:  CLRF   xBF
07EB2:  CLRF   xC0
07EB4:  CLRF   xC1
07EB6:  CLRF   xC2
07EB8:  CLRF   xC3
07EBA:  CLRF   xC4
07EBC:  CLRF   xC5
07EBE:  CLRF   xC6
07EC0:  CLRF   xC7
07EC2:  CLRF   xC8
07EC4:  CLRF   xC9
07EC6:  CLRF   xCA
07EC8:  CLRF   xCB
07ECA:  CLRF   xCC
07ECC:  CLRF   xCD
07ECE:  CLRF   xCE
07ED0:  CLRF   xCF
07ED2:  CLRF   xD0
07ED4:  CLRF   xD1
07ED6:  CLRF   xD2
07ED8:  CLRF   xD3
07EDA:  CLRF   xD4
07EDC:  CLRF   xD5
07EDE:  CLRF   xD6
07EE0:  CLRF   xD7
07EE2:  CLRF   xD8
07EE4:  CLRF   xD9
07EE6:  CLRF   xDA
07EE8:  CLRF   xDB
07EEA:  CLRF   xDC
07EEC:  CLRF   xDD
07EEE:  CLRF   xDE
07EF0:  CLRF   xDF
07EF2:  CLRF   xE0
07EF4:  CLRF   xE1
07EF6:  CLRF   xE2
07EF8:  CLRF   xE3
07EFA:  CLRF   xE4
07EFC:  CLRF   xE5
07EFE:  CLRF   xE6
07F00:  CLRF   xE7
07F02:  CLRF   xE8
07F04:  CLRF   xE9
07F06:  CLRF   xEA
07F08:  CLRF   xEB
07F0A:  CLRF   xEC
07F0C:  CLRF   xED
07F0E:  CLRF   xEE
07F10:  CLRF   xEF
07F12:  CLRF   xF0
07F14:  CLRF   xF1
07F16:  CLRF   xF2
07F18:  CLRF   xF3
07F1A:  CLRF   xF4
07F1C:  CLRF   xF5
07F1E:  CLRF   xF6
07F20:  CLRF   xF7
07F22:  CLRF   xF8
07F24:  CLRF   xF9
07F26:  CLRF   xFA
07F28:  CLRF   xFB
07F2A:  CLRF   xFC
07F2C:  CLRF   xFD
07F2E:  CLRF   xFE
07F30:  CLRF   xFF
07F32:  MOVLB  8
07F34:  CLRF   x00
07F36:  CLRF   x01
07F38:  CLRF   x02
07F3A:  CLRF   x03
07F3C:  CLRF   x04
07F3E:  CLRF   x05
07F40:  CLRF   x06
07F42:  CLRF   x07
07F44:  CLRF   x08
07F46:  CLRF   x09
07F48:  CLRF   x0A
07F4A:  CLRF   x0B
07F4C:  CLRF   x0C
07F4E:  CLRF   x0D
07F50:  CLRF   x0E
07F52:  CLRF   x0F
07F54:  CLRF   x10
07F56:  CLRF   x11
07F58:  CLRF   x12
07F5A:  CLRF   x13
07F5C:  CLRF   x14
07F5E:  CLRF   x15
07F60:  CLRF   x16
07F62:  CLRF   x17
07F64:  CLRF   x18
07F66:  CLRF   x19
07F68:  CLRF   x1A
07F6A:  CLRF   x1B
07F6C:  CLRF   x1C
07F6E:  CLRF   x1D
07F70:  CLRF   x1E
07F72:  CLRF   x1F
07F74:  CLRF   x20
07F76:  CLRF   x21
07F78:  CLRF   x22
07F7A:  CLRF   x23
07F7C:  CLRF   x24
07F7E:  CLRF   x25
07F80:  CLRF   x26
07F82:  CLRF   x27
07F84:  CLRF   x28
07F86:  CLRF   x29
07F88:  CLRF   x2A
07F8A:  CLRF   x2B
07F8C:  CLRF   x2C
07F8E:  CLRF   x2D
07F90:  CLRF   x2E
07F92:  CLRF   x2F
07F94:  CLRF   x30
07F96:  CLRF   x31
07F98:  CLRF   x32
07F9A:  CLRF   x33
07F9C:  CLRF   x34
07F9E:  CLRF   x35
07FA0:  CLRF   x36
07FA2:  CLRF   x37
07FA4:  CLRF   x38
07FA6:  CLRF   x39
07FA8:  CLRF   x3A
07FAA:  CLRF   x3B
07FAC:  CLRF   x3C
07FAE:  CLRF   x3D
07FB0:  CLRF   x3E
07FB2:  CLRF   x3F
07FB4:  CLRF   x40
07FB6:  CLRF   x41
07FB8:  CLRF   x42
07FBA:  CLRF   x43
07FBC:  CLRF   x44
07FBE:  CLRF   x45
07FC0:  CLRF   x46
07FC2:  CLRF   x47
07FC4:  CLRF   x48
07FC6:  CLRF   x49
07FC8:  CLRF   x4A
07FCA:  CLRF   x4B
07FCC:  CLRF   x4C
07FCE:  CLRF   x4D
07FD0:  CLRF   x4E
07FD2:  CLRF   x4F
07FD4:  CLRF   x50
07FD6:  CLRF   x51
07FD8:  CLRF   x52
07FDA:  CLRF   x53
07FDC:  CLRF   x54
07FDE:  CLRF   x55
07FE0:  CLRF   x56
07FE2:  CLRF   x57
07FE4:  CLRF   x58
07FE6:  CLRF   x59
07FE8:  CLRF   x5A
07FEA:  CLRF   x5B
07FEC:  CLRF   x5C
07FEE:  CLRF   x5D
07FF0:  CLRF   x5E
07FF2:  CLRF   x5F
07FF4:  CLRF   x60
07FF6:  CLRF   x61
07FF8:  CLRF   x62
07FFA:  CLRF   x63
07FFC:  CLRF   x64
07FFE:  CLRF   x65
08000:  CLRF   x66
08002:  CLRF   x67
08004:  CLRF   x68
08006:  CLRF   x69
08008:  CLRF   x6A
0800A:  CLRF   x6B
0800C:  CLRF   x6C
0800E:  CLRF   x6D
08010:  CLRF   x6E
08012:  CLRF   x6F
08014:  CLRF   x70
08016:  CLRF   x71
08018:  CLRF   x72
0801A:  CLRF   x73
0801C:  CLRF   x74
0801E:  CLRF   x75
08020:  CLRF   x76
08022:  CLRF   x77
08024:  CLRF   x78
08026:  CLRF   x79
08028:  CLRF   x7A
0802A:  CLRF   x7B
0802C:  CLRF   x7C
0802E:  CLRF   x7D
08030:  CLRF   x7E
08032:  CLRF   x7F
08034:  CLRF   x80
08036:  CLRF   x81
08038:  CLRF   x82
0803A:  CLRF   x83
0803C:  CLRF   x84
0803E:  CLRF   x85
08040:  CLRF   x86
08042:  CLRF   x87
08044:  CLRF   x88
08046:  CLRF   x89
08048:  CLRF   x8A
0804A:  CLRF   x8B
0804C:  CLRF   x8C
0804E:  CLRF   x8D
08050:  CLRF   x8E
08052:  CLRF   x8F
08054:  CLRF   x90
08056:  CLRF   x91
08058:  CLRF   x92
0805A:  CLRF   x93
0805C:  CLRF   x94
0805E:  CLRF   x95
08060:  CLRF   x96
08062:  CLRF   x97
08064:  CLRF   x98
08066:  CLRF   x99
08068:  CLRF   x9A
0806A:  CLRF   x9B
0806C:  CLRF   x9C
0806E:  CLRF   x9D
08070:  CLRF   x9E
08072:  CLRF   x9F
08074:  CLRF   xA0
08076:  CLRF   xA1
08078:  CLRF   xA2
0807A:  CLRF   xA3
0807C:  CLRF   xA4
0807E:  CLRF   xA5
08080:  CLRF   xA6
08082:  CLRF   xA7
08084:  CLRF   xA8
08086:  CLRF   xA9
08088:  CLRF   xAA
0808A:  CLRF   xAB
0808C:  CLRF   xAC
0808E:  CLRF   xAD
08090:  CLRF   xAE
08092:  CLRF   xAF
08094:  CLRF   xB0
08096:  CLRF   xB1
08098:  CLRF   xB2
0809A:  CLRF   xB3
0809C:  CLRF   xB4
0809E:  CLRF   xB5
080A0:  CLRF   xB6
080A2:  CLRF   xB7
080A4:  CLRF   xB8
080A6:  CLRF   xB9
080A8:  CLRF   xBA
080AA:  CLRF   xBB
080AC:  CLRF   xBC
080AE:  CLRF   xBD
080B0:  CLRF   xBE
080B2:  CLRF   xBF
080B4:  CLRF   xC0
080B6:  CLRF   xC1
080B8:  CLRF   xC2
080BA:  CLRF   xC3
080BC:  CLRF   xC4
080BE:  CLRF   xC5
080C0:  CLRF   xC6
080C2:  CLRF   xC7
080C4:  CLRF   xC8
080C6:  CLRF   xC9
080C8:  CLRF   xCA
080CA:  CLRF   xCB
080CC:  CLRF   xCC
080CE:  CLRF   xCD
080D0:  CLRF   xCE
080D2:  CLRF   xCF
080D4:  CLRF   xD0
080D6:  CLRF   xD1
080D8:  CLRF   xD2
080DA:  CLRF   xD3
080DC:  CLRF   xD4
080DE:  CLRF   xD5
080E0:  CLRF   xD6
080E2:  CLRF   xD7
080E4:  CLRF   xD8
080E6:  CLRF   xD9
080E8:  CLRF   xDA
080EA:  CLRF   xDB
080EC:  CLRF   xDC
080EE:  CLRF   xDD
080F0:  CLRF   xDE
080F2:  CLRF   xDF
080F4:  CLRF   xE0
080F6:  CLRF   xE1
080F8:  CLRF   xE2
080FA:  CLRF   xE3
080FC:  CLRF   xE4
080FE:  CLRF   xE5
08100:  CLRF   xE6
08102:  CLRF   xE7
08104:  CLRF   xE8
08106:  CLRF   xE9
08108:  CLRF   xEA
0810A:  CLRF   xEB
0810C:  CLRF   xEC
0810E:  CLRF   xED
08110:  CLRF   xEE
08112:  CLRF   xEF
08114:  CLRF   xF0
08116:  CLRF   xF1
08118:  CLRF   xF2
0811A:  CLRF   xF3
0811C:  CLRF   xF4
0811E:  CLRF   xF5
08120:  CLRF   xF6
08122:  CLRF   xF7
08124:  CLRF   xF8
08126:  CLRF   xF9
08128:  CLRF   xFA
0812A:  CLRF   xFB
0812C:  CLRF   xFC
0812E:  CLRF   xFD
08130:  CLRF   xFE
08132:  CLRF   xFF
08134:  MOVLB  9
08136:  CLRF   x00
08138:  CLRF   x01
0813A:  CLRF   x02
0813C:  CLRF   x03
0813E:  CLRF   x04
08140:  CLRF   x05
08142:  CLRF   x06
08144:  CLRF   x07
08146:  CLRF   x08
08148:  CLRF   x09
0814A:  CLRF   x0A
0814C:  CLRF   x0B
0814E:  CLRF   x0C
08150:  CLRF   x0D
08152:  CLRF   x0E
08154:  CLRF   x0F
08156:  CLRF   x10
08158:  CLRF   x11
0815A:  CLRF   x12
0815C:  CLRF   x13
0815E:  CLRF   x14
08160:  CLRF   x15
08162:  CLRF   x16
08164:  CLRF   x17
08166:  CLRF   x18
08168:  CLRF   x19
0816A:  CLRF   x1A
0816C:  CLRF   x1B
0816E:  CLRF   x1C
08170:  CLRF   x1D
08172:  CLRF   x1E
08174:  CLRF   x1F
08176:  CLRF   x20
08178:  CLRF   x21
0817A:  CLRF   x22
0817C:  CLRF   x23
0817E:  CLRF   x24
08180:  CLRF   x25
08182:  CLRF   x26
08184:  CLRF   x27
08186:  CLRF   x28
08188:  CLRF   x29
0818A:  CLRF   x2A
0818C:  CLRF   x2B
0818E:  CLRF   x2C
08190:  CLRF   x2D
08192:  CLRF   x2E
08194:  CLRF   x2F
08196:  CLRF   x30
08198:  CLRF   x31
0819A:  CLRF   x32
0819C:  CLRF   x33
0819E:  CLRF   x34
081A0:  CLRF   x35
081A2:  CLRF   x36
081A4:  CLRF   x37
081A6:  CLRF   x38
081A8:  CLRF   x39
081AA:  CLRF   x3A
081AC:  CLRF   x3B
081AE:  CLRF   x3C
081B0:  CLRF   x3D
081B2:  CLRF   x3E
081B4:  CLRF   x3F
081B6:  CLRF   x40
081B8:  CLRF   x41
081BA:  CLRF   x42
081BC:  CLRF   x43
081BE:  CLRF   x44
081C0:  CLRF   x45
081C2:  CLRF   x46
081C4:  CLRF   x47
081C6:  CLRF   x48
081C8:  CLRF   x49
081CA:  CLRF   x4A
081CC:  CLRF   x4B
081CE:  CLRF   x4C
081D0:  CLRF   x4D
081D2:  CLRF   x4E
081D4:  CLRF   x4F
081D6:  CLRF   x50
081D8:  CLRF   x51
081DA:  CLRF   x52
081DC:  CLRF   x53
081DE:  CLRF   x54
081E0:  CLRF   x55
081E2:  CLRF   x56
081E4:  CLRF   x57
081E6:  CLRF   x58
081E8:  CLRF   x59
081EA:  CLRF   x5A
081EC:  CLRF   x5B
081EE:  CLRF   x5C
081F0:  CLRF   x5D
081F2:  CLRF   x5E
081F4:  CLRF   x5F
081F6:  CLRF   x60
081F8:  CLRF   x61
081FA:  CLRF   x62
081FC:  CLRF   x63
081FE:  CLRF   x64
08200:  CLRF   x65
08202:  CLRF   x66
08204:  CLRF   x67
08206:  CLRF   x68
08208:  CLRF   x69
0820A:  CLRF   x6A
0820C:  CLRF   x6B
0820E:  CLRF   x6C
08210:  CLRF   x6D
08212:  CLRF   x6E
08214:  CLRF   x6F
08216:  CLRF   x70
08218:  CLRF   x71
0821A:  CLRF   x72
0821C:  CLRF   x73
0821E:  CLRF   x74
08220:  CLRF   x75
08222:  CLRF   x76
08224:  CLRF   x77
08226:  CLRF   x78
08228:  CLRF   x79
0822A:  CLRF   x7A
0822C:  CLRF   x7B
0822E:  CLRF   x7C
08230:  CLRF   x7D
08232:  CLRF   x7E
08234:  CLRF   x7F
08236:  CLRF   x80
....................     port2.port_num = 2;
08238:  MOVLW  02
0823A:  MOVLB  5
0823C:  MOVWF  x81
....................     port2.sweep_step = 0;
0823E:  CLRF   x83
08240:  CLRF   x82
....................     port2.active = 1;
08242:  MOVLB  9
08244:  BSF    x80.0
.................... 
....................     int16 count = 1;
08246:  CLRF   x82
08248:  MOVLW  01
0824A:  MOVWF  x81
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0824C:  CLRF   x93
0824E:  MOVLW  01
08250:  MOVWF  x92
08252:  MOVLB  0
08254:  CALL   688A
....................     mcp4901_2_write(1);
08258:  MOVLB  9
0825A:  CLRF   x93
0825C:  MOVLW  01
0825E:  MOVWF  x92
08260:  MOVLB  0
08262:  CALL   68C8
....................     ad7490_read(ADC_CIGS1_CURR);
08266:  MOVLW  01
08268:  MOVLB  9
0826A:  MOVWF  xA7
0826C:  MOVLB  0
0826E:  CALL   208A
....................     ad7490_read(ADC_CIGS2_CURR);
08272:  MOVLW  05
08274:  MOVLB  9
08276:  MOVWF  xA7
08278:  MOVLB  0
0827A:  CALL   208A
....................     ad7490_read(ADC_CIGS2_CURR);
0827E:  MOVLW  05
08280:  MOVLB  9
08282:  MOVWF  xA7
08284:  MOVLB  0
08286:  CALL   208A
....................     delay_ms(200);
0828A:  MOVLW  C8
0828C:  MOVLB  A
0828E:  MOVWF  x3E
08290:  MOVLB  0
08292:  CALL   1E68
.................... 
....................     // Read initial PD value
....................     MEASUREMENT_DATA measured_data = create_meas_data();
08296:  GOTO   6A10
0829A:  MOVFF  02,03
0829E:  MOVF   01,W
082A0:  MOVWF  FE1
082A2:  MOVFF  03,FE2
082A6:  MOVLW  09
082A8:  MOVWF  FEA
082AA:  MOVLW  83
082AC:  MOVWF  FE9
082AE:  MOVLW  0F
082B0:  MOVWF  01
082B2:  MOVFF  FE6,FEE
082B6:  DECFSZ 01,F
082B8:  GOTO   82B2
....................     // Continue measurement while at least one port is active
....................     while (port1.active || port2.active)
082BC:  MOVLB  5
082BE:  BTFSS  x80.0
082C0:  BRA    82C8
082C2:  MOVLB  0
082C4:  GOTO   82D8
082C8:  MOVLB  0
082CA:  MOVLB  9
082CC:  BTFSC  x80.0
082CE:  BRA    82D6
082D0:  MOVLB  0
082D2:  GOTO   8758
082D6:  MOVLB  0
....................     {
....................         // Set DAC values for both ports (synchronized timing)
....................         mcp4901_1_write(count);
082D8:  MOVFF  982,993
082DC:  MOVFF  981,992
082E0:  CALL   688A
....................         mcp4901_2_write(count);
082E4:  MOVFF  982,993
082E8:  MOVFF  981,992
082EC:  CALL   68C8
....................         delay_ms(1); // wait for DAC to stabilize
082F0:  MOVLW  01
082F2:  MOVLB  A
082F4:  MOVWF  x3E
082F6:  MOVLB  0
082F8:  CALL   1E68
.................... 
....................         // Read CIGS1 data (port1) only if still active
....................         if (port1.active) {
082FC:  MOVLB  5
082FE:  BTFSC  x80.0
08300:  BRA    8308
08302:  MOVLB  0
08304:  GOTO   8394
08308:  MOVLB  0
....................             port1.data_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
0830A:  BCF    FD8.0
0830C:  MOVLB  9
0830E:  RLCF   x81,W
08310:  MOVWF  02
08312:  RLCF   x82,W
08314:  MOVWF  03
08316:  MOVF   02,W
08318:  ADDLW  84
0831A:  MOVWF  01
0831C:  MOVLW  01
0831E:  ADDWFC 03,F
08320:  MOVF   01,W
08322:  MOVWF  x92
08324:  MOVFF  03,993
08328:  MOVLW  02
0832A:  MOVWF  xA7
0832C:  MOVLB  0
0832E:  CALL   208A
08332:  MOVFF  993,FEA
08336:  MOVFF  992,FE9
0833A:  MOVFF  02,FEC
0833E:  MOVF   FED,F
08340:  MOVFF  01,FEF
....................             port1.data_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
08344:  BCF    FD8.0
08346:  MOVLB  9
08348:  RLCF   x81,W
0834A:  MOVWF  02
0834C:  RLCF   x82,W
0834E:  MOVWF  03
08350:  MOVF   02,W
08352:  ADDLW  82
08354:  MOVWF  01
08356:  MOVLW  03
08358:  ADDWFC 03,F
0835A:  MOVF   01,W
0835C:  MOVWF  x92
0835E:  MOVFF  03,993
08362:  MOVLW  01
08364:  MOVWF  xA7
08366:  MOVLB  0
08368:  CALL   208A
0836C:  MOVFF  993,FEA
08370:  MOVFF  992,FE9
08374:  MOVFF  02,FEC
08378:  MOVF   FED,F
0837A:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; // Update CIGS1 step counter
0837E:  MOVLW  01
08380:  MOVLB  9
08382:  ADDWF  x81,W
08384:  MOVLB  1
08386:  MOVWF  x82
08388:  MOVLW  00
0838A:  MOVLB  9
0838C:  ADDWFC x82,W
0838E:  MOVLB  1
08390:  MOVWF  x83
08392:  MOVLB  0
....................         }
....................         
....................         // Read CIGS2 data (port2) only if still active
....................         if (port2.active) {
08394:  MOVLB  9
08396:  BTFSC  x80.0
08398:  BRA    83A0
0839A:  MOVLB  0
0839C:  GOTO   84F4
083A0:  MOVLB  0
....................             port2.data_buffer[0][count] = ad7490_read(ADC_CIGS2_AMP);
083A2:  BCF    FD8.0
083A4:  MOVLB  9
083A6:  RLCF   x81,W
083A8:  MOVWF  02
083AA:  RLCF   x82,W
083AC:  MOVWF  03
083AE:  MOVF   02,W
083B0:  ADDLW  84
083B2:  MOVWF  01
083B4:  MOVLW  05
083B6:  ADDWFC 03,F
083B8:  MOVF   01,W
083BA:  MOVWF  x92
083BC:  MOVFF  03,993
083C0:  MOVLW  06
083C2:  MOVWF  xA7
083C4:  MOVLB  0
083C6:  CALL   208A
083CA:  MOVFF  993,FEA
083CE:  MOVFF  992,FE9
083D2:  MOVFF  02,FEC
083D6:  MOVF   FED,F
083D8:  MOVFF  01,FEF
....................             port2.data_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
083DC:  BCF    FD8.0
083DE:  MOVLB  9
083E0:  RLCF   x81,W
083E2:  MOVWF  02
083E4:  RLCF   x82,W
083E6:  MOVWF  03
083E8:  MOVF   02,W
083EA:  ADDLW  82
083EC:  MOVWF  01
083EE:  MOVLW  07
083F0:  ADDWFC 03,F
083F2:  MOVF   01,W
083F4:  MOVWF  x92
083F6:  MOVFF  03,993
083FA:  MOVLW  05
083FC:  MOVWF  xA7
083FE:  MOVLB  0
08400:  CALL   208A
08404:  MOVFF  993,FEA
08408:  MOVFF  992,FE9
0840C:  MOVFF  02,FEC
08410:  MOVF   FED,F
08412:  MOVFF  01,FEF
....................             fprintf(PC, "CIGS2 data: %04LX, %04LX\r\n", port2.data_buffer[0][count], port2.data_buffer[1][count]);
08416:  BCF    FD8.0
08418:  MOVLB  9
0841A:  RLCF   x81,W
0841C:  MOVWF  02
0841E:  RLCF   x82,W
08420:  MOVWF  03
08422:  MOVF   02,W
08424:  ADDLW  84
08426:  MOVWF  FE9
08428:  MOVLW  05
0842A:  ADDWFC 03,W
0842C:  MOVWF  FEA
0842E:  MOVFF  FEC,993
08432:  MOVF   FED,F
08434:  MOVFF  FEF,992
08438:  BCF    FD8.0
0843A:  RLCF   x81,W
0843C:  MOVWF  02
0843E:  RLCF   x82,W
08440:  MOVWF  03
08442:  MOVF   02,W
08444:  ADDLW  82
08446:  MOVWF  FE9
08448:  MOVLW  07
0844A:  ADDWFC 03,W
0844C:  MOVWF  FEA
0844E:  MOVFF  FEC,995
08452:  MOVF   FED,F
08454:  MOVFF  FEF,994
08458:  MOVLW  3A
0845A:  MOVWF  FF6
0845C:  MOVLW  07
0845E:  MOVWF  FF7
08460:  MOVLW  00
08462:  MOVWF  FF8
08464:  MOVLW  0C
08466:  MOVWF  x96
08468:  MOVLB  0
0846A:  CALL   1F18
0846E:  MOVFF  993,996
08472:  MOVLW  37
08474:  MOVLB  9
08476:  MOVWF  x97
08478:  MOVLB  0
0847A:  CALL   2116
0847E:  MOVFF  992,996
08482:  MOVLW  37
08484:  MOVLB  9
08486:  MOVWF  x97
08488:  MOVLB  0
0848A:  CALL   2116
0848E:  MOVLW  2C
08490:  MOVLB  A
08492:  MOVWF  x29
08494:  MOVLB  0
08496:  CALL   1E96
0849A:  MOVLW  20
0849C:  MOVLB  A
0849E:  MOVWF  x29
084A0:  MOVLB  0
084A2:  CALL   1E96
084A6:  MOVFF  995,996
084AA:  MOVLW  37
084AC:  MOVLB  9
084AE:  MOVWF  x97
084B0:  MOVLB  0
084B2:  CALL   2116
084B6:  MOVFF  994,996
084BA:  MOVLW  37
084BC:  MOVLB  9
084BE:  MOVWF  x97
084C0:  MOVLB  0
084C2:  CALL   2116
084C6:  MOVLW  0D
084C8:  MOVLB  A
084CA:  MOVWF  x29
084CC:  MOVLB  0
084CE:  CALL   1E96
084D2:  MOVLW  0A
084D4:  MOVLB  A
084D6:  MOVWF  x29
084D8:  MOVLB  0
084DA:  CALL   1E96
....................             port2.sweep_step = count + 1; // Update CIGS2 step counter
084DE:  MOVLW  01
084E0:  MOVLB  9
084E2:  ADDWF  x81,W
084E4:  MOVLB  5
084E6:  MOVWF  x82
084E8:  MOVLW  00
084EA:  MOVLB  9
084EC:  ADDWFC x82,W
084EE:  MOVLB  5
084F0:  MOVWF  x83
084F2:  MOVLB  0
....................         }
.................... 
....................         count++;
084F4:  MOVLB  9
084F6:  INCF   x81,F
084F8:  BTFSC  FD8.2
084FA:  INCF   x82,F
.................... 
....................         // Check global exit conditions
....................         if (count >= 255) {
084FC:  MOVF   x82,F
084FE:  BTFSC  FD8.2
08500:  BRA    8508
08502:  MOVLB  0
08504:  GOTO   851C
08508:  MOVLB  0
0850A:  MOVLB  9
0850C:  MOVF   x81,W
0850E:  SUBLW  FE
08510:  BTFSS  FD8.0
08512:  BRA    851A
08514:  MOVLB  0
08516:  GOTO   8560
0851A:  MOVLB  0
....................             fprintf(PC, "Maximum step count reached: %ld\r\n", count);
0851C:  MOVLW  56
0851E:  MOVWF  FF6
08520:  MOVLW  07
08522:  MOVWF  FF7
08524:  MOVLW  00
08526:  MOVWF  FF8
08528:  MOVLW  1C
0852A:  MOVLB  9
0852C:  MOVWF  x96
0852E:  MOVLB  0
08530:  CALL   1F18
08534:  MOVLW  10
08536:  MOVWF  FE9
08538:  MOVFF  982,993
0853C:  MOVFF  981,992
08540:  GOTO   6A9A
08544:  MOVLW  0D
08546:  MOVLB  A
08548:  MOVWF  x29
0854A:  MOVLB  0
0854C:  CALL   1E96
08550:  MOVLW  0A
08552:  MOVLB  A
08554:  MOVWF  x29
08556:  MOVLB  0
08558:  CALL   1E96
....................             break;
0855C:  GOTO   8758
....................         }
....................         
....................         // Check CIGS1 specific conditions
....................         if (port1.active) {
08560:  MOVLB  5
08562:  BTFSC  x80.0
08564:  BRA    856C
08566:  MOVLB  0
08568:  GOTO   865A
0856C:  MOVLB  0
....................             if (port1.data_buffer[1][count-1] < curr_limit) {
0856E:  MOVLW  01
08570:  MOVLB  9
08572:  SUBWF  x81,W
08574:  MOVWF  x92
08576:  MOVLW  00
08578:  SUBWFB x82,W
0857A:  MOVWF  x93
0857C:  BCF    FD8.0
0857E:  RLCF   x92,W
08580:  MOVWF  02
08582:  RLCF   x93,W
08584:  MOVWF  03
08586:  MOVF   02,W
08588:  ADDLW  82
0858A:  MOVWF  FE9
0858C:  MOVLW  03
0858E:  ADDWFC 03,W
08590:  MOVWF  FEA
08592:  MOVFF  FEC,993
08596:  MOVF   FED,F
08598:  MOVFF  FEF,992
0859C:  MOVF   x93,W
0859E:  MOVLB  1
085A0:  SUBWF  x80,W
085A2:  BTFSC  FD8.0
085A4:  BRA    85AC
085A6:  MOVLB  0
085A8:  GOTO   85E6
085AC:  MOVLB  0
085AE:  BTFSS  FD8.2
085B0:  GOTO   85C8
085B4:  MOVLB  1
085B6:  MOVF   x7F,W
085B8:  MOVLB  9
085BA:  SUBWF  x92,W
085BC:  BTFSS  FD8.0
085BE:  BRA    85C6
085C0:  MOVLB  0
085C2:  GOTO   85E6
085C6:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current limit reached:");
085C8:  MOVLW  78
085CA:  MOVWF  FF6
085CC:  MOVLW  07
085CE:  MOVWF  FF7
085D0:  MOVLW  00
085D2:  MOVWF  FF8
085D4:  CALL   1EE8
....................                 port1.active = 0;
085D8:  MOVLB  5
085DA:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
085DC:  BCF    F94.0
085DE:  BCF    F8B.0
085E0:  MOVLB  0
....................             }
085E2:  GOTO   865A
....................             else if (port1.data_buffer[1][count-1] < curr_threshold) {
085E6:  MOVLW  01
085E8:  MOVLB  9
085EA:  SUBWF  x81,W
085EC:  MOVWF  x92
085EE:  MOVLW  00
085F0:  SUBWFB x82,W
085F2:  MOVWF  x93
085F4:  BCF    FD8.0
085F6:  RLCF   x92,W
085F8:  MOVWF  02
085FA:  RLCF   x93,W
085FC:  MOVWF  03
085FE:  MOVF   02,W
08600:  ADDLW  82
08602:  MOVWF  FE9
08604:  MOVLW  03
08606:  ADDWFC 03,W
08608:  MOVWF  FEA
0860A:  MOVFF  FEC,993
0860E:  MOVF   FED,F
08610:  MOVFF  FEF,992
08614:  MOVF   x93,W
08616:  MOVLB  1
08618:  SUBWF  x7C,W
0861A:  BTFSC  FD8.0
0861C:  BRA    8624
0861E:  MOVLB  0
08620:  GOTO   865A
08624:  MOVLB  0
08626:  BTFSS  FD8.2
08628:  GOTO   8640
0862C:  MOVLB  1
0862E:  MOVF   x7B,W
08630:  MOVLB  9
08632:  SUBWF  x92,W
08634:  BTFSS  FD8.0
08636:  BRA    863E
08638:  MOVLB  0
0863A:  GOTO   865A
0863E:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current below threshold");
08640:  MOVLW  96
08642:  MOVWF  FF6
08644:  MOVLW  07
08646:  MOVWF  FF7
08648:  MOVLW  00
0864A:  MOVWF  FF8
0864C:  CALL   1EE8
....................                 port1.active = 0;
08650:  MOVLB  5
08652:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
08654:  BCF    F94.0
08656:  BCF    F8B.0
08658:  MOVLB  0
....................             }
....................         }
....................         
....................         // Check CIGS2 specific conditions
....................         if (port2.active) {
0865A:  MOVLB  9
0865C:  BTFSC  x80.0
0865E:  BRA    8666
08660:  MOVLB  0
08662:  GOTO   8754
08666:  MOVLB  0
....................             if (port2.data_buffer[1][count-1] < curr_limit) {
08668:  MOVLW  01
0866A:  MOVLB  9
0866C:  SUBWF  x81,W
0866E:  MOVWF  x92
08670:  MOVLW  00
08672:  SUBWFB x82,W
08674:  MOVWF  x93
08676:  BCF    FD8.0
08678:  RLCF   x92,W
0867A:  MOVWF  02
0867C:  RLCF   x93,W
0867E:  MOVWF  03
08680:  MOVF   02,W
08682:  ADDLW  82
08684:  MOVWF  FE9
08686:  MOVLW  07
08688:  ADDWFC 03,W
0868A:  MOVWF  FEA
0868C:  MOVFF  FEC,993
08690:  MOVF   FED,F
08692:  MOVFF  FEF,992
08696:  MOVF   x93,W
08698:  MOVLB  1
0869A:  SUBWF  x80,W
0869C:  BTFSC  FD8.0
0869E:  BRA    86A6
086A0:  MOVLB  0
086A2:  GOTO   86E0
086A6:  MOVLB  0
086A8:  BTFSS  FD8.2
086AA:  GOTO   86C2
086AE:  MOVLB  1
086B0:  MOVF   x7F,W
086B2:  MOVLB  9
086B4:  SUBWF  x92,W
086B6:  BTFSS  FD8.0
086B8:  BRA    86C0
086BA:  MOVLB  0
086BC:  GOTO   86E0
086C0:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current limit reached: ");
086C2:  MOVLW  B4
086C4:  MOVWF  FF6
086C6:  MOVLW  07
086C8:  MOVWF  FF7
086CA:  MOVLW  00
086CC:  MOVWF  FF8
086CE:  CALL   1EE8
....................                 port2.active = 0;
086D2:  MOVLB  9
086D4:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
086D6:  BCF    F94.5
086D8:  BCF    F8B.5
086DA:  MOVLB  0
....................             }
086DC:  GOTO   8754
....................             else if (port2.data_buffer[1][count-1] < curr_threshold) {
086E0:  MOVLW  01
086E2:  MOVLB  9
086E4:  SUBWF  x81,W
086E6:  MOVWF  x92
086E8:  MOVLW  00
086EA:  SUBWFB x82,W
086EC:  MOVWF  x93
086EE:  BCF    FD8.0
086F0:  RLCF   x92,W
086F2:  MOVWF  02
086F4:  RLCF   x93,W
086F6:  MOVWF  03
086F8:  MOVF   02,W
086FA:  ADDLW  82
086FC:  MOVWF  FE9
086FE:  MOVLW  07
08700:  ADDWFC 03,W
08702:  MOVWF  FEA
08704:  MOVFF  FEC,993
08708:  MOVF   FED,F
0870A:  MOVFF  FEF,992
0870E:  MOVF   x93,W
08710:  MOVLB  1
08712:  SUBWF  x7C,W
08714:  BTFSC  FD8.0
08716:  BRA    871E
08718:  MOVLB  0
0871A:  GOTO   8754
0871E:  MOVLB  0
08720:  BTFSS  FD8.2
08722:  GOTO   873A
08726:  MOVLB  1
08728:  MOVF   x7B,W
0872A:  MOVLB  9
0872C:  SUBWF  x92,W
0872E:  BTFSS  FD8.0
08730:  BRA    8738
08732:  MOVLB  0
08734:  GOTO   8754
08738:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current below threshold:");
0873A:  MOVLW  D2
0873C:  MOVWF  FF6
0873E:  MOVLW  07
08740:  MOVWF  FF7
08742:  MOVLW  00
08744:  MOVWF  FF8
08746:  CALL   1EE8
....................                 port2.active = 0;
0874A:  MOVLB  9
0874C:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
0874E:  BCF    F94.5
08750:  BCF    F8B.5
08752:  MOVLB  0
....................             }
....................         }
08754:  GOTO   82BC
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     output_low(CONNECT_CIGS1);
08758:  BCF    F94.0
0875A:  BCF    F8B.0
....................     output_low(CONNECT_CIGS2);
0875C:  BCF    F94.5
0875E:  BCF    F8B.5
....................     // output_high(EN_NPWR);
.................... 
....................     log_meas_data(&measured_data, &port1); // Log data for CIGS1
08760:  MOVLW  09
08762:  MOVLB  9
08764:  MOVWF  x93
08766:  MOVLW  83
08768:  MOVWF  x92
0876A:  MOVLW  01
0876C:  MOVWF  x95
0876E:  MOVLW  81
08770:  MOVWF  x94
08772:  MOVLB  0
08774:  CALL   6C24
....................     log_meas_data(&measured_data, &port2); // Log data for CIGS2
08778:  MOVLW  09
0877A:  MOVLB  9
0877C:  MOVWF  x93
0877E:  MOVLW  83
08780:  MOVWF  x92
08782:  MOVLW  05
08784:  MOVWF  x95
08786:  MOVLW  81
08788:  MOVWF  x94
0878A:  MOVLB  0
0878C:  CALL   6C24
.................... 
....................     fprintf(PC, "End SWEEP with threshold\r\n");
08790:  MOVLW  F2
08792:  MOVWF  FF6
08794:  MOVLW  07
08796:  MOVWF  FF7
08798:  MOVLW  00
0879A:  MOVWF  FF8
0879C:  CALL   1EE8
087A0:  GOTO   8C9A (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data)
*
06CA6:  CLRF   xD6
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
*
06C24:  MOVLB  9
06C26:  CLRF   x96
06C28:  CLRF   x97
06C2A:  CLRF   x98
06C2C:  CLRF   x99
06C2E:  CLRF   x9A
06C30:  CLRF   x9B
06C32:  CLRF   x9C
06C34:  CLRF   x9D
06C36:  CLRF   x9E
06C38:  CLRF   x9F
06C3A:  CLRF   xA0
06C3C:  CLRF   xA1
06C3E:  CLRF   xA2
06C40:  CLRF   xA3
06C42:  CLRF   xA4
06C44:  CLRF   xA5
06C46:  CLRF   xA6
06C48:  CLRF   xA7
06C4A:  CLRF   xA8
06C4C:  CLRF   xA9
06C4E:  CLRF   xAA
06C50:  CLRF   xAB
06C52:  CLRF   xAC
06C54:  CLRF   xAD
06C56:  CLRF   xAE
06C58:  CLRF   xAF
06C5A:  CLRF   xB0
06C5C:  CLRF   xB1
06C5E:  CLRF   xB2
06C60:  CLRF   xB3
06C62:  CLRF   xB4
06C64:  CLRF   xB5
06C66:  CLRF   xB6
06C68:  CLRF   xB7
06C6A:  CLRF   xB8
06C6C:  CLRF   xB9
06C6E:  CLRF   xBA
06C70:  CLRF   xBB
06C72:  CLRF   xBC
06C74:  CLRF   xBD
06C76:  CLRF   xBE
06C78:  CLRF   xBF
06C7A:  CLRF   xC0
06C7C:  CLRF   xC1
06C7E:  CLRF   xC2
06C80:  CLRF   xC3
06C82:  CLRF   xC4
06C84:  CLRF   xC5
06C86:  CLRF   xC6
06C88:  CLRF   xC7
06C8A:  CLRF   xC8
06C8C:  CLRF   xC9
06C8E:  CLRF   xCA
06C90:  CLRF   xCB
06C92:  CLRF   xCC
06C94:  CLRF   xCD
06C96:  CLRF   xCE
06C98:  CLRF   xCF
06C9A:  CLRF   xD0
06C9C:  CLRF   xD1
06C9E:  CLRF   xD2
06CA0:  CLRF   xD3
06CA2:  CLRF   xD4
06CA4:  CLRF   xD5
....................     unsigned int8 packetdata_index = 0; // Index for packet data
.................... 
.................... 
....................     // Header creation
....................     packetdata[0] = START_MAKER;
*
06CA8:  SETF   x96
....................     packetdata[1] = (START_MAKER & 0xF0) | (port_data->port_num & 0x0F);
06CAA:  MOVF   x94,W
06CAC:  MOVWF  FE9
06CAE:  MOVF   x95,W
06CB0:  MOVWF  FEA
06CB2:  MOVF   FEF,W
06CB4:  ANDLW  0F
06CB6:  IORLW  F0
06CB8:  MOVWF  x97
....................     packetdata[2] = measured_data->time_sec >> 24 & 0xFF;
06CBA:  MOVF   x92,W
06CBC:  MOVWF  FE9
06CBE:  MOVF   x93,W
06CC0:  MOVWF  FEA
06CC2:  MOVFF  FEF,9E6
06CC6:  MOVFF  FEC,9E7
06CCA:  MOVFF  FEC,9E8
06CCE:  MOVFF  FEC,9E9
06CD2:  MOVF   FED,F
06CD4:  MOVF   FED,F
06CD6:  MOVF   FED,F
06CD8:  MOVFF  9E9,9E6
06CDC:  CLRF   xE7
06CDE:  CLRF   xE8
06CE0:  CLRF   xE9
06CE2:  MOVF   xE6,W
06CE4:  MOVWF  x98
....................     packetdata[3] = measured_data->time_sec >> 16 & 0xFF;
06CE6:  MOVF   x92,W
06CE8:  MOVWF  FE9
06CEA:  MOVF   x93,W
06CEC:  MOVWF  FEA
06CEE:  MOVFF  FEF,9E6
06CF2:  MOVFF  FEC,9E7
06CF6:  MOVFF  FEC,9E8
06CFA:  MOVFF  FEC,9E9
06CFE:  MOVF   FED,F
06D00:  MOVF   FED,F
06D02:  MOVF   FED,F
06D04:  MOVFF  9E8,9E6
06D08:  MOVFF  9E9,9E7
06D0C:  CLRF   xE8
06D0E:  CLRF   xE9
06D10:  MOVF   xE6,W
06D12:  MOVWF  x99
....................     packetdata[4] = measured_data->time_sec >> 8 & 0xFF;
06D14:  MOVF   x92,W
06D16:  MOVWF  FE9
06D18:  MOVF   x93,W
06D1A:  MOVWF  FEA
06D1C:  MOVFF  FEF,9E6
06D20:  MOVFF  FEC,9E7
06D24:  MOVFF  FEC,9E8
06D28:  MOVFF  FEC,9E9
06D2C:  MOVF   FED,F
06D2E:  MOVF   FED,F
06D30:  MOVF   FED,F
06D32:  MOVFF  9E7,9E6
06D36:  MOVFF  9E8,9E7
06D3A:  MOVFF  9E9,9E8
06D3E:  CLRF   xE9
06D40:  MOVF   xE6,W
06D42:  MOVWF  x9A
....................     packetdata[5] = measured_data->time_sec & 0xFF;
06D44:  MOVF   x92,W
06D46:  MOVWF  FE9
06D48:  MOVF   x93,W
06D4A:  MOVWF  FEA
06D4C:  MOVFF  FEF,9E6
06D50:  MOVFF  FEC,9E7
06D54:  MOVFF  FEC,9E8
06D58:  MOVFF  FEC,9E9
06D5C:  MOVF   FED,F
06D5E:  MOVF   FED,F
06D60:  MOVF   FED,F
06D62:  MOVF   xE6,W
06D64:  MOVWF  x9B
....................     packetdata[6] = (measured_data->time_msec & 0x0F) >>4 | measured_data->pd >> 8 & 0x0F;
06D66:  MOVLW  04
06D68:  ADDWF  x92,W
06D6A:  MOVWF  FE9
06D6C:  MOVLW  00
06D6E:  ADDWFC x93,W
06D70:  MOVWF  FEA
06D72:  MOVF   FEF,W
06D74:  ANDLW  0F
06D76:  MOVWF  00
06D78:  SWAPF  00,W
06D7A:  MOVWF  xE6
06D7C:  MOVLW  0F
06D7E:  ANDWF  xE6,F
06D80:  MOVLW  0D
06D82:  ADDWF  x92,W
06D84:  MOVWF  FE9
06D86:  MOVLW  00
06D88:  ADDWFC x93,W
06D8A:  MOVWF  FEA
06D8C:  MOVFF  FEC,9E8
06D90:  MOVF   FED,F
06D92:  MOVFF  FEF,9E7
06D96:  MOVFF  9E8,9E7
06D9A:  CLRF   xE8
06D9C:  MOVF   xE7,W
06D9E:  ANDLW  0F
06DA0:  MOVWF  00
06DA2:  CLRF   03
06DA4:  MOVF   00,W
06DA6:  IORWF  xE6,W
06DA8:  MOVWF  x9C
....................     packetdata[7] = measured_data->pd & 0xFF;
06DAA:  MOVLW  0D
06DAC:  ADDWF  x92,W
06DAE:  MOVWF  FE9
06DB0:  MOVLW  00
06DB2:  ADDWFC x93,W
06DB4:  MOVWF  FEA
06DB6:  MOVFF  FEC,9E7
06DBA:  MOVF   FED,F
06DBC:  MOVFF  FEF,9E6
06DC0:  MOVF   xE6,W
06DC2:  MOVWF  x9D
....................     packetdata[8] = (measured_data->open_voltage >> 4) & 0xFF; // PD start low byte
06DC4:  MOVLW  05
06DC6:  ADDWF  x92,W
06DC8:  MOVWF  FE9
06DCA:  MOVLW  00
06DCC:  ADDWFC x93,W
06DCE:  MOVWF  FEA
06DD0:  MOVFF  FEC,9E7
06DD4:  MOVF   FED,F
06DD6:  MOVFF  FEF,9E6
06DDA:  RRCF   xE7,F
06DDC:  RRCF   xE6,F
06DDE:  RRCF   xE7,F
06DE0:  RRCF   xE6,F
06DE2:  RRCF   xE7,F
06DE4:  RRCF   xE6,F
06DE6:  RRCF   xE7,F
06DE8:  RRCF   xE6,F
06DEA:  MOVLW  0F
06DEC:  ANDWF  xE7,F
06DEE:  MOVF   xE6,W
06DF0:  MOVWF  x9E
....................     packetdata[9] = (measured_data->open_voltage & 0x0F) << 4 | (measured_data->temp_py_top >> 8) & 0x0F;
06DF2:  MOVLW  05
06DF4:  ADDWF  x92,W
06DF6:  MOVWF  FE9
06DF8:  MOVLW  00
06DFA:  ADDWFC x93,W
06DFC:  MOVWF  FEA
06DFE:  MOVFF  FEC,9E7
06E02:  MOVF   FED,F
06E04:  MOVFF  FEF,9E6
06E08:  MOVLW  0F
06E0A:  ANDWF  xE6,F
06E0C:  CLRF   xE7
06E0E:  RLCF   xE6,F
06E10:  RLCF   xE7,F
06E12:  RLCF   xE6,F
06E14:  RLCF   xE7,F
06E16:  RLCF   xE6,F
06E18:  RLCF   xE7,F
06E1A:  RLCF   xE6,F
06E1C:  RLCF   xE7,F
06E1E:  MOVLW  F0
06E20:  ANDWF  xE6,F
06E22:  MOVLW  07
06E24:  ADDWF  x92,W
06E26:  MOVWF  FE9
06E28:  MOVLW  00
06E2A:  ADDWFC x93,W
06E2C:  MOVWF  FEA
06E2E:  MOVFF  FEC,9E9
06E32:  MOVF   FED,F
06E34:  MOVFF  FEF,9E8
06E38:  MOVFF  9E9,9E8
06E3C:  CLRF   xE9
06E3E:  MOVF   xE8,W
06E40:  ANDLW  0F
06E42:  MOVWF  00
06E44:  CLRF   03
06E46:  MOVF   00,W
06E48:  IORWF  xE6,W
06E4A:  MOVWF  x9F
....................     packetdata[10] = measured_data->temp_py_top & 0xFF;
06E4C:  MOVLW  07
06E4E:  ADDWF  x92,W
06E50:  MOVWF  FE9
06E52:  MOVLW  00
06E54:  ADDWFC x93,W
06E56:  MOVWF  FEA
06E58:  MOVFF  FEC,9E7
06E5C:  MOVF   FED,F
06E5E:  MOVFF  FEF,9E6
06E62:  MOVF   xE6,W
06E64:  MOVWF  xA0
....................     packetdata[11] = (measured_data->temp_py_bot >> 4) & 0xFF; // PD start low byte
06E66:  MOVLW  09
06E68:  ADDWF  x92,W
06E6A:  MOVWF  FE9
06E6C:  MOVLW  00
06E6E:  ADDWFC x93,W
06E70:  MOVWF  FEA
06E72:  MOVFF  FEC,9E7
06E76:  MOVF   FED,F
06E78:  MOVFF  FEF,9E6
06E7C:  RRCF   xE7,F
06E7E:  RRCF   xE6,F
06E80:  RRCF   xE7,F
06E82:  RRCF   xE6,F
06E84:  RRCF   xE7,F
06E86:  RRCF   xE6,F
06E88:  RRCF   xE7,F
06E8A:  RRCF   xE6,F
06E8C:  MOVLW  0F
06E8E:  ANDWF  xE7,F
06E90:  MOVF   xE6,W
06E92:  MOVWF  xA1
....................     packetdata[12] = (measured_data->temp_py_bot & 0x0F) << 4 | (measured_data->temp_mis7 >> 8) & 0x0F;
06E94:  MOVLW  09
06E96:  ADDWF  x92,W
06E98:  MOVWF  FE9
06E9A:  MOVLW  00
06E9C:  ADDWFC x93,W
06E9E:  MOVWF  FEA
06EA0:  MOVFF  FEC,9E7
06EA4:  MOVF   FED,F
06EA6:  MOVFF  FEF,9E6
06EAA:  MOVLW  0F
06EAC:  ANDWF  xE6,F
06EAE:  CLRF   xE7
06EB0:  RLCF   xE6,F
06EB2:  RLCF   xE7,F
06EB4:  RLCF   xE6,F
06EB6:  RLCF   xE7,F
06EB8:  RLCF   xE6,F
06EBA:  RLCF   xE7,F
06EBC:  RLCF   xE6,F
06EBE:  RLCF   xE7,F
06EC0:  MOVLW  F0
06EC2:  ANDWF  xE6,F
06EC4:  MOVLW  0B
06EC6:  ADDWF  x92,W
06EC8:  MOVWF  FE9
06ECA:  MOVLW  00
06ECC:  ADDWFC x93,W
06ECE:  MOVWF  FEA
06ED0:  MOVFF  FEC,9E9
06ED4:  MOVF   FED,F
06ED6:  MOVFF  FEF,9E8
06EDA:  MOVFF  9E9,9E8
06EDE:  CLRF   xE9
06EE0:  MOVF   xE8,W
06EE2:  ANDLW  0F
06EE4:  MOVWF  00
06EE6:  CLRF   03
06EE8:  MOVF   00,W
06EEA:  IORWF  xE6,W
06EEC:  MOVWF  xA2
....................     packetdata[13] = measured_data->temp_mis7 & 0xFF;
06EEE:  MOVLW  0B
06EF0:  ADDWF  x92,W
06EF2:  MOVWF  FE9
06EF4:  MOVLW  00
06EF6:  ADDWFC x93,W
06EF8:  MOVWF  FEA
06EFA:  MOVFF  FEC,9E7
06EFE:  MOVF   FED,F
06F00:  MOVFF  FEF,9E6
06F04:  MOVF   xE6,W
06F06:  MOVWF  xA3
.................... 
....................     packetdata_index = 14; // Start index for data
06F08:  MOVLW  0E
06F0A:  MOVWF  xD6
.................... 
....................     for (unsigned int16 i = 0; i < port_data->sweep_step ; i++) {
06F0C:  CLRF   xD8
06F0E:  CLRF   xD7
06F10:  MOVLB  0
06F12:  MOVLW  01
06F14:  MOVLB  9
06F16:  ADDWF  x94,W
06F18:  MOVWF  FE9
06F1A:  MOVLW  00
06F1C:  ADDWFC x95,W
06F1E:  MOVWF  FEA
06F20:  MOVFF  FEC,03
06F24:  MOVF   FED,F
06F26:  MOVF   FEF,W
06F28:  MOVWF  01
06F2A:  MOVF   xD8,W
06F2C:  SUBWF  03,W
06F2E:  BTFSC  FD8.0
06F30:  BRA    6F38
06F32:  MOVLB  0
06F34:  GOTO   7110
06F38:  MOVLB  0
06F3A:  BTFSS  FD8.2
06F3C:  GOTO   6F52
06F40:  MOVF   01,W
06F42:  MOVLB  9
06F44:  SUBWF  xD7,W
06F46:  BTFSS  FD8.0
06F48:  BRA    6F50
06F4A:  MOVLB  0
06F4C:  GOTO   7110
06F50:  MOVLB  0
....................         unsigned int16 data0 = port_data->data_buffer[0][i];
....................         unsigned int16 data1 = port_data->data_buffer[1][i];
06F52:  BCF    FD8.0
06F54:  MOVLB  9
06F56:  RLCF   xD7,W
06F58:  MOVWF  02
06F5A:  RLCF   xD8,W
06F5C:  MOVWF  03
06F5E:  MOVF   02,W
06F60:  ADDLW  03
06F62:  MOVWF  01
06F64:  MOVLW  00
06F66:  ADDWFC 03,F
06F68:  MOVF   01,W
06F6A:  ADDWF  x94,W
06F6C:  MOVWF  FE9
06F6E:  MOVF   x95,W
06F70:  ADDWFC 03,W
06F72:  MOVWF  FEA
06F74:  MOVFF  FEC,9DA
06F78:  MOVF   FED,F
06F7A:  MOVFF  FEF,9D9
06F7E:  BCF    FD8.0
06F80:  RLCF   xD7,W
06F82:  MOVWF  02
06F84:  RLCF   xD8,W
06F86:  MOVWF  03
06F88:  MOVF   02,W
06F8A:  ADDLW  01
06F8C:  MOVWF  01
06F8E:  MOVLW  02
06F90:  ADDWFC 03,F
06F92:  MOVF   01,W
06F94:  ADDWF  x94,W
06F96:  MOVWF  FE9
06F98:  MOVF   x95,W
06F9A:  ADDWFC 03,W
06F9C:  MOVWF  FEA
06F9E:  MOVFF  FEC,9DC
06FA2:  MOVF   FED,F
06FA4:  MOVFF  FEF,9DB
06FA8:  MOVLB  0
.................... 
....................         packetdata[packetdata_index++] = (data0 >> 4) & 0xFF;
06FAA:  MOVLB  9
06FAC:  MOVF   xD6,W
06FAE:  INCF   xD6,F
06FB0:  CLRF   03
06FB2:  ADDLW  96
06FB4:  MOVWF  FE9
06FB6:  MOVLW  09
06FB8:  ADDWFC 03,W
06FBA:  MOVWF  FEA
06FBC:  RRCF   xDA,W
06FBE:  MOVWF  xE9
06FC0:  RRCF   xD9,W
06FC2:  MOVWF  xE8
06FC4:  RRCF   xE9,F
06FC6:  RRCF   xE8,F
06FC8:  RRCF   xE9,F
06FCA:  RRCF   xE8,F
06FCC:  RRCF   xE9,F
06FCE:  RRCF   xE8,F
06FD0:  MOVLW  0F
06FD2:  ANDWF  xE9,F
06FD4:  MOVF   xE8,W
06FD6:  MOVWF  00
06FD8:  CLRF   03
06FDA:  MOVF   00,W
06FDC:  MOVWF  FEF
....................         packetdata[packetdata_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
06FDE:  MOVF   xD6,W
06FE0:  INCF   xD6,F
06FE2:  CLRF   03
06FE4:  ADDLW  96
06FE6:  MOVWF  FE9
06FE8:  MOVLW  09
06FEA:  ADDWFC 03,W
06FEC:  MOVWF  FEA
06FEE:  MOVF   xD9,W
06FF0:  ANDLW  0F
06FF2:  MOVWF  xE8
06FF4:  CLRF   xE9
06FF6:  RLCF   xE8,F
06FF8:  RLCF   xE9,F
06FFA:  RLCF   xE8,F
06FFC:  RLCF   xE9,F
06FFE:  RLCF   xE8,F
07000:  RLCF   xE9,F
07002:  RLCF   xE8,F
07004:  RLCF   xE9,F
07006:  MOVLW  F0
07008:  ANDWF  xE8,F
0700A:  MOVFF  9DC,9EA
0700E:  CLRF   xEB
07010:  MOVF   xEA,W
07012:  ANDLW  0F
07014:  MOVWF  00
07016:  CLRF   03
07018:  MOVF   00,W
0701A:  IORWF  xE8,W
0701C:  MOVWF  00
0701E:  MOVF   03,W
07020:  IORWF  xE9,W
07022:  MOVWF  03
07024:  MOVF   00,W
07026:  MOVWF  FEF
....................         packetdata[packetdata_index++] = data1 & 0xFF;
07028:  MOVF   xD6,W
0702A:  INCF   xD6,F
0702C:  CLRF   03
0702E:  ADDLW  96
07030:  MOVWF  FE9
07032:  MOVLW  09
07034:  ADDWFC 03,W
07036:  MOVWF  FEA
07038:  MOVF   xDB,W
0703A:  MOVWF  00
0703C:  CLRF   03
0703E:  MOVF   00,W
07040:  MOVWF  FEF
.................... 
....................         if (packetdata_index + 3 >= PACKET_SIZE - 1) {
07042:  MOVLW  03
07044:  ADDWF  xD6,W
07046:  SUBLW  3E
07048:  BTFSS  FD8.0
0704A:  BRA    7052
0704C:  MOVLB  0
0704E:  GOTO   7102
07052:  MOVLB  0
....................             packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
07054:  MOVLW  09
07056:  MOVLB  9
07058:  MOVWF  xE7
0705A:  MOVLW  96
0705C:  MOVWF  xE6
0705E:  MOVLW  3F
07060:  MOVWF  xE8
07062:  MOVLB  0
07064:  CALL   40D4
07068:  MOVFF  01,9D5
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
0706C:  MOVLB  1
0706E:  MOVF   x10,W
07070:  MOVLB  9
07072:  MOVWF  xDD
07074:  MOVLB  1
07076:  MOVF   x11,W
07078:  MOVLB  9
0707A:  MOVWF  xDE
0707C:  MOVLW  16
0707E:  MOVLB  1
07080:  ADDWF  x12,W
07082:  MOVLB  9
07084:  MOVWF  xDF
07086:  MOVLW  00
07088:  MOVLB  1
0708A:  ADDWFC x13,W
0708C:  MOVLB  9
0708E:  MOVWF  xE0
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
07090:  MOVFF  F1,A29
07094:  MOVFF  F0,A28
07098:  MOVFF  EF,A27
0709C:  MOVFF  EE,A26
070A0:  MOVFF  9E0,A2D
070A4:  MOVFF  9DF,A2C
070A8:  MOVFF  9DE,A2B
070AC:  MOVFF  9DD,A2A
070B0:  MOVLW  09
070B2:  MOVLB  A
070B4:  MOVWF  x2F
070B6:  MOVLW  96
070B8:  MOVWF  x2E
070BA:  CLRF   x31
070BC:  MOVLW  40
070BE:  MOVWF  x30
070C0:  MOVLB  0
070C2:  CALL   343C
....................             misf_meas_use_counter += PACKET_SIZE;
070C6:  MOVLW  40
070C8:  MOVLB  1
070CA:  ADDWF  x10,F
070CC:  MOVLW  00
070CE:  ADDWFC x11,F
070D0:  MOVLW  00
070D2:  ADDWFC x12,F
070D4:  MOVLW  00
070D6:  ADDWFC x13,F
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
070D8:  MOVLW  40
070DA:  ADDWF  x15,F
070DC:  MOVLW  00
070DE:  ADDWFC x16,F
070E0:  MOVLW  00
070E2:  ADDWFC x17,F
070E4:  MOVLW  00
070E6:  ADDWFC x18,F
....................             packetdata_index = 0;
070E8:  MOVLB  9
070EA:  CLRF   xD6
....................             memset(packetdata, 0x00, PACKET_SIZE);
070EC:  MOVLW  09
070EE:  MOVWF  FEA
070F0:  MOVLW  96
070F2:  MOVWF  FE9
070F4:  CLRF   00
070F6:  CLRF   02
070F8:  MOVLW  40
070FA:  MOVWF  01
070FC:  MOVLB  0
070FE:  CALL   44BE
....................         }
07102:  MOVLB  9
07104:  INCF   xD7,F
07106:  BTFSC  FD8.2
07108:  INCF   xD8,F
0710A:  MOVLB  0
0710C:  GOTO   6F12
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packetdata_index > 0) {
07110:  MOVLB  9
07112:  MOVF   xD6,F
07114:  BTFSS  FD8.2
07116:  BRA    711E
07118:  MOVLB  0
0711A:  GOTO   71EA
0711E:  MOVLB  0
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE - 1; j++) {
07120:  MOVFF  9D6,9E1
07124:  MOVLB  9
07126:  MOVF   xE1,W
07128:  SUBLW  3E
0712A:  BTFSC  FD8.0
0712C:  BRA    7134
0712E:  MOVLB  0
07130:  GOTO   7154
07134:  MOVLB  0
....................             packetdata[j] = 0x00;
07136:  CLRF   03
07138:  MOVLB  9
0713A:  MOVF   xE1,W
0713C:  ADDLW  96
0713E:  MOVWF  FE9
07140:  MOVLW  09
07142:  ADDWFC 03,W
07144:  MOVWF  FEA
07146:  CLRF   FEF
07148:  MOVLB  0
0714A:  MOVLB  9
0714C:  INCF   xE1,F
0714E:  MOVLB  0
07150:  GOTO   7124
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
07154:  MOVLW  09
07156:  MOVLB  9
07158:  MOVWF  xE7
0715A:  MOVLW  96
0715C:  MOVWF  xE6
0715E:  MOVLW  3F
07160:  MOVWF  xE8
07162:  MOVLB  0
07164:  CALL   40D4
07168:  MOVFF  01,9D5
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
0716C:  MOVLB  1
0716E:  MOVF   x10,W
07170:  MOVLB  9
07172:  MOVWF  xE2
07174:  MOVLB  1
07176:  MOVF   x11,W
07178:  MOVLB  9
0717A:  MOVWF  xE3
0717C:  MOVLW  16
0717E:  MOVLB  1
07180:  ADDWF  x12,W
07182:  MOVLB  9
07184:  MOVWF  xE4
07186:  MOVLW  00
07188:  MOVLB  1
0718A:  ADDWFC x13,W
0718C:  MOVLB  9
0718E:  MOVWF  xE5
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
07190:  MOVFF  F1,A29
07194:  MOVFF  F0,A28
07198:  MOVFF  EF,A27
0719C:  MOVFF  EE,A26
071A0:  MOVFF  9E5,A2D
071A4:  MOVFF  9E4,A2C
071A8:  MOVFF  9E3,A2B
071AC:  MOVFF  9E2,A2A
071B0:  MOVLW  09
071B2:  MOVLB  A
071B4:  MOVWF  x2F
071B6:  MOVLW  96
071B8:  MOVWF  x2E
071BA:  CLRF   x31
071BC:  MOVLW  40
071BE:  MOVWF  x30
071C0:  MOVLB  0
071C2:  CALL   343C
....................         misf_meas_use_counter += PACKET_SIZE;
071C6:  MOVLW  40
071C8:  MOVLB  1
071CA:  ADDWF  x10,F
071CC:  MOVLW  00
071CE:  ADDWFC x11,F
071D0:  MOVLW  00
071D2:  ADDWFC x12,F
071D4:  MOVLW  00
071D6:  ADDWFC x13,F
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
071D8:  MOVLW  40
071DA:  ADDWF  x15,F
071DC:  MOVLW  00
071DE:  ADDWFC x16,F
071E0:  MOVLW  00
071E2:  ADDWFC x17,F
071E4:  MOVLW  00
071E6:  ADDWFC x18,F
071E8:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "End CIGS data conversion\r\n");
071EA:  MOVLW  0E
071EC:  MOVWF  FF6
071EE:  MOVLW  08
071F0:  MOVWF  FF7
071F2:  MOVLW  00
071F4:  MOVWF  FF8
071F6:  CALL   1EE8
....................     write_misf_address_area(); // Write the mission flash address area
071FA:  CALL   3B18
071FE:  RETURN 0
.................... }
.................... 
.................... MEASUREMENT_DATA create_meas_data()
.................... {
....................     MEASUREMENT_DATA data;
....................     data.time_sec = get_current_sec();
*
06A10:  CALL   311E
06A14:  MOVFF  03,99B
06A18:  MOVFF  02,99A
06A1C:  MOVFF  01,999
06A20:  MOVFF  00,998
....................     data.time_msec = get_current_msec();
06A24:  GOTO   69E0
06A28:  MOVFF  01,99C
....................     data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
06A2C:  MOVLW  0D
06A2E:  MOVLB  9
06A30:  MOVWF  xA7
06A32:  MOVLB  0
06A34:  CALL   208A
06A38:  MOVFF  02,9A0
06A3C:  MOVFF  01,99F
....................     data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
06A40:  MOVLW  0E
06A42:  MOVLB  9
06A44:  MOVWF  xA7
06A46:  MOVLB  0
06A48:  CALL   208A
06A4C:  MOVFF  02,9A2
06A50:  MOVFF  01,9A1
....................     data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
06A54:  MOVLW  0C
06A56:  MOVLB  9
06A58:  MOVWF  xA7
06A5A:  MOVLB  0
06A5C:  CALL   208A
06A60:  MOVFF  02,9A4
06A64:  MOVFF  01,9A3
....................     data.pd = ad7490_read(ADC_PD);
06A68:  MOVLW  0F
06A6A:  MOVLB  9
06A6C:  MOVWF  xA7
06A6E:  MOVLB  0
06A70:  CALL   208A
06A74:  MOVFF  02,9A6
06A78:  MOVFF  01,9A5
....................     data.open_voltage = ad7490_read(ADC_CIGS1_VOLT); // Assuming this is the correct ADC channel for open voltage
06A7C:  MOVLB  9
06A7E:  CLRF   xA7
06A80:  MOVLB  0
06A82:  CALL   208A
06A86:  MOVFF  02,99E
06A8A:  MOVFF  01,99D
....................     return data;
06A8E:  MOVLW  98
06A90:  MOVWF  01
06A92:  MOVLW  09
06A94:  MOVWF  02
06A96:  GOTO   829A (RETURN)
.................... }
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03DF8:  CALL   311E
03DFC:  MOVFF  03,271
03E00:  MOVFF  02,270
03E04:  MOVFF  01,26F
03E08:  MOVFF  00,26E
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03E0C:  MOVFF  271,277
03E10:  MOVLB  2
03E12:  CLRF   x78
03E14:  CLRF   x79
03E16:  CLRF   x7A
03E18:  MOVF   x77,W
03E1A:  MOVWF  x68
....................     piclog[1] = (time >> 16) & 0xFF;
03E1C:  MOVFF  270,277
03E20:  MOVFF  271,278
03E24:  CLRF   x79
03E26:  CLRF   x7A
03E28:  MOVF   x77,W
03E2A:  MOVWF  x69
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03E2C:  MOVFF  26F,277
03E30:  MOVFF  270,278
03E34:  MOVFF  271,279
03E38:  CLRF   x7A
03E3A:  MOVF   x77,W
03E3C:  MOVWF  x6A
....................     piclog[3] = time & 0xFF;         // Time low byte
03E3E:  MOVF   x6E,W
03E40:  MOVWF  x6B
....................     piclog[4] = function;            // Function code
03E42:  MOVFF  266,26C
....................     piclog[5] = parameter;           // Parameter code
03E46:  MOVFF  267,26D
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03E4A:  MOVLB  1
03E4C:  MOVF   x06,W
03E4E:  MOVLB  2
03E50:  MOVWF  x72
03E52:  MOVLB  1
03E54:  MOVF   x07,W
03E56:  MOVLB  2
03E58:  MOVWF  x73
03E5A:  MOVLW  02
03E5C:  MOVLB  1
03E5E:  ADDWF  x08,W
03E60:  MOVLB  2
03E62:  MOVWF  x74
03E64:  MOVLW  00
03E66:  MOVLB  1
03E68:  ADDWFC x09,W
03E6A:  MOVLB  2
03E6C:  MOVWF  x75
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03E6E:  MOVFF  F1,A29
03E72:  MOVFF  F0,A28
03E76:  MOVFF  EF,A27
03E7A:  MOVFF  EE,A26
03E7E:  MOVLB  0
03E80:  CALL   2582
03E84:  MOVF   01,F
03E86:  BTFSS  FD8.2
03E88:  GOTO   3E9C
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03E8C:  MOVLW  2A
03E8E:  MOVWF  FF6
03E90:  MOVLW  08
03E92:  MOVWF  FF7
03E94:  MOVLW  00
03E96:  MOVWF  FF8
03E98:  CALL   1EE8
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03E9C:  MOVFF  F1,A29
03EA0:  MOVFF  F0,A28
03EA4:  MOVFF  EF,A27
03EA8:  MOVFF  EE,A26
03EAC:  MOVFF  275,A2D
03EB0:  MOVFF  274,A2C
03EB4:  MOVFF  273,A2B
03EB8:  MOVFF  272,A2A
03EBC:  MOVLW  02
03EBE:  MOVLB  A
03EC0:  MOVWF  x2F
03EC2:  MOVLW  68
03EC4:  MOVWF  x2E
03EC6:  CLRF   x31
03EC8:  MOVLW  06
03ECA:  MOVWF  x30
03ECC:  MOVLB  0
03ECE:  CALL   343C
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03ED2:  MOVLW  06
03ED4:  MOVLB  1
03ED6:  ADDWF  x06,F
03ED8:  MOVLW  00
03EDA:  ADDWFC x07,F
03EDC:  MOVLW  00
03EDE:  ADDWFC x08,F
03EE0:  MOVLW  00
03EE2:  ADDWFC x09,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03EE4:  MOVLW  06
03EE6:  ADDWF  x0B,F
03EE8:  MOVLW  00
03EEA:  ADDWFC x0C,F
03EEC:  MOVLW  00
03EEE:  ADDWFC x0D,F
03EF0:  MOVLW  00
03EF2:  ADDWFC x0E,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03EF4:  MOVLW  06
03EF6:  ADDWF  x0F,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03EF8:  MOVLW  06
03EFA:  ADDWF  x0F,W
03EFC:  SUBLW  3F
03EFE:  BTFSS  FD8.0
03F00:  BRA    3F08
03F02:  MOVLB  0
03F04:  GOTO   3F6A
03F08:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03F0A:  MOVLB  1
03F0C:  MOVF   x06,W
03F0E:  MOVLB  2
03F10:  MOVWF  x72
03F12:  MOVLB  1
03F14:  MOVF   x07,W
03F16:  MOVLB  2
03F18:  MOVWF  x73
03F1A:  MOVLW  02
03F1C:  MOVLB  1
03F1E:  ADDWF  x08,W
03F20:  MOVLB  2
03F22:  MOVWF  x74
03F24:  MOVLW  00
03F26:  MOVLB  1
03F28:  ADDWFC x09,W
03F2A:  MOVLB  2
03F2C:  MOVWF  x75
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03F2E:  MOVFF  F1,A29
03F32:  MOVFF  F0,A28
03F36:  MOVFF  EF,A27
03F3A:  MOVFF  EE,A26
03F3E:  MOVFF  275,A2D
03F42:  MOVFF  274,A2C
03F46:  MOVFF  273,A2B
03F4A:  MOVFF  272,A2A
03F4E:  MOVLW  01
03F50:  MOVLB  A
03F52:  MOVWF  x2F
03F54:  MOVLW  1A
03F56:  MOVWF  x2E
03F58:  CLRF   x31
03F5A:  MOVLW  06
03F5C:  MOVWF  x30
03F5E:  MOVLB  0
03F60:  CALL   343C
....................         misf_piclog_write_counter = 0;
03F64:  MOVLB  1
03F66:  CLRF   x0F
03F68:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03F6A:  CALL   3B18
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03F6E:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mission_manager.h"    // CIGS固有のミッション管理
.................... #ifndef MMJ_CIGS_MISSION_MANAGER_H
.................... #define MMJ_CIGS_MISSION_MANAGER_H
.................... 
.................... // ミッションID定義
.................... #define ID_CIGS_MEASURE_DATA 0x01
.................... #define ID_CIGS_PICLOG       0x02
.................... 
.................... // ミッション管理用の統合構造体
.................... typedef struct {
....................    int8 mission_id;                    // ミッションID (0x01: CIGS_MEASURE, 0x02: CIGS_PICLOG)
....................    int32 start_address;                // 開始アドレス
....................    int32 end_address;                  // 終了アドレス
....................    int32 used_size;                    // 使用済みサイズ
....................    int32 loop_counter;                 // ループカウンター
....................    int32 uncopyed_counter;             // 未コピーデータカウンター
....................    int32 write_counter;                // 書き込みカウンター（PICLOGのみ使用）
.................... } CigsMissionStruct;
.................... 
.................... // ミッション管理構造体のグローバルインスタンス
.................... extern CigsMissionStruct cigs_measure_mission;
.................... extern CigsMissionStruct cigs_piclog_mission;
.................... 
.................... // ミッション管理関数
.................... CigsMissionStruct* get_cigs_mission_by_id(int8 mission_id);
.................... void update_cigs_uncopyed_counter(int8 mission_id, int32 size_change);
.................... void reset_cigs_uncopyed_counter(int8 mission_id);
.................... void init_cigs_mission_structs(void);
.................... CigsMissionStruct get_cigs_mission_struct(int8 mission_id);
.................... 
.................... // ミッションID定義
.................... #define ID_CIGS_MEASURE_DATA 0x01
.................... #define ID_CIGS_PICLOG       0x02
.................... 
.................... #endif // MMJ_CIGS_MISSION_MANAGER_H
.................... 
.................... #include "../../../lib/tool/smf_queue.h"         // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"        // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // 関数プロトタイプ宣言（CCS C対応）
.................... CigsMissionStruct get_cigs_mission_struct(int8 mission_id);
.................... 
.................... // ローカル実装（CCS Cリンクエラー回避）
.................... CigsMissionStruct get_cigs_mission_struct_local(int8 mission_id)
.................... {
....................     CigsMissionStruct mis_struct = {0};
*
091F4:  MOVLB  2
091F6:  CLRF   x04
091F8:  CLRF   x05
091FA:  CLRF   x06
091FC:  CLRF   x07
091FE:  CLRF   x08
09200:  CLRF   x09
09202:  CLRF   x0A
09204:  CLRF   x0B
09206:  CLRF   x0C
09208:  CLRF   x0D
0920A:  CLRF   x0E
0920C:  CLRF   x0F
0920E:  CLRF   x10
09210:  CLRF   x11
09212:  CLRF   x12
09214:  CLRF   x13
09216:  CLRF   x14
09218:  CLRF   x15
0921A:  CLRF   x16
0921C:  CLRF   x17
0921E:  CLRF   x18
09220:  CLRF   x19
09222:  CLRF   x1A
09224:  CLRF   x1B
09226:  CLRF   x1C
....................     
....................     switch(mission_id)
09228:  MOVF   x03,W
0922A:  XORLW  01
0922C:  MOVLB  0
0922E:  BTFSC  FD8.2
09230:  GOTO   9240
09234:  XORLW  03
09236:  BTFSC  FD8.2
09238:  GOTO   9260
0923C:  GOTO   9280
....................     {
....................         case 0x01: // ID_CIGS_MEASURE_DATA
....................             mis_struct.mission_id = 0x01;
09240:  MOVLW  01
09242:  MOVLB  2
09244:  MOVWF  x04
....................             mis_struct.start_address = ADDRESS_MISF_MEASUREMENT_START;
09246:  CLRF   x08
09248:  MOVLW  16
0924A:  MOVWF  x07
0924C:  CLRF   x06
0924E:  CLRF   x05
....................             mis_struct.end_address = ADDRESS_MISF_MEASUREMENT_END;
09250:  CLRF   x0C
09252:  MOVLW  95
09254:  MOVWF  x0B
09256:  SETF   x0A
09258:  SETF   x09
....................             break;
0925A:  MOVLB  0
0925C:  GOTO   92C4
....................             
....................         case 0x02: // ID_CIGS_PICLOG
....................             mis_struct.mission_id = 0x02;
09260:  MOVLW  02
09262:  MOVLB  2
09264:  MOVWF  x04
....................             mis_struct.start_address = ADDRESS_MISF_PICLOG_DATA_START;
09266:  CLRF   x08
09268:  MOVLW  02
0926A:  MOVWF  x07
0926C:  CLRF   x06
0926E:  CLRF   x05
....................             mis_struct.end_address = ADDRESS_MISF_PICLOG_DATA_END;
09270:  CLRF   x0C
09272:  MOVLW  15
09274:  MOVWF  x0B
09276:  SETF   x0A
09278:  SETF   x09
....................             break;
0927A:  MOVLB  0
0927C:  GOTO   92C4
....................             
....................         default:
....................             fprintf(PC, "Error: Unknown CIGS mission_id %02X\r\n", mission_id);
09280:  MOVLW  4C
09282:  MOVWF  FF6
09284:  MOVLW  08
09286:  MOVWF  FF7
09288:  MOVLW  00
0928A:  MOVWF  FF8
0928C:  MOVLW  1F
0928E:  MOVLB  9
09290:  MOVWF  x96
09292:  MOVLB  0
09294:  CALL   1F18
09298:  MOVFF  203,996
0929C:  MOVLW  37
0929E:  MOVLB  9
092A0:  MOVWF  x97
092A2:  MOVLB  0
092A4:  CALL   2116
092A8:  MOVLW  0D
092AA:  MOVLB  A
092AC:  MOVWF  x29
092AE:  MOVLB  0
092B0:  CALL   1E96
092B4:  MOVLW  0A
092B6:  MOVLB  A
092B8:  MOVWF  x29
092BA:  MOVLB  0
092BC:  CALL   1E96
....................             break;
092C0:  GOTO   92C4
....................     }
....................     
....................     return mis_struct;
092C4:  MOVLW  04
092C6:  MOVWF  01
092C8:  MOVLW  02
092CA:  MOVWF  02
092CC:  RETURN 0
.................... }
.................... 
.................... // ローカルカウンター管理関数
.................... void update_cigs_uncopyed_counter_local(int8 mission_id, int32 size_change)
.................... {
....................     switch(mission_id)
*
09ABA:  MOVLB  2
09ABC:  MOVF   x01,W
09ABE:  XORLW  01
09AC0:  MOVLB  0
09AC2:  BTFSC  FD8.2
09AC4:  GOTO   9AD4
09AC8:  XORLW  03
09ACA:  BTFSC  FD8.2
09ACC:  GOTO   9BFE
09AD0:  GOTO   9D28
....................     {
....................         case 0x01: // CIGS_MEASURE_DATA
....................             if (size_change > 0) {
09AD4:  MOVLB  2
09AD6:  MOVF   x02,F
09AD8:  BTFSC  FD8.2
09ADA:  BRA    9AE2
09ADC:  MOVLB  0
09ADE:  GOTO   9B14
09AE2:  MOVLB  0
09AE4:  MOVLB  2
09AE6:  MOVF   x03,F
09AE8:  BTFSC  FD8.2
09AEA:  BRA    9AF2
09AEC:  MOVLB  0
09AEE:  GOTO   9B14
09AF2:  MOVLB  0
09AF4:  MOVLB  2
09AF6:  MOVF   x04,F
09AF8:  BTFSC  FD8.2
09AFA:  BRA    9B02
09AFC:  MOVLB  0
09AFE:  GOTO   9B14
09B02:  MOVLB  0
09B04:  MOVLB  2
09B06:  MOVF   x05,F
09B08:  BTFSS  FD8.2
09B0A:  BRA    9B12
09B0C:  MOVLB  0
09B0E:  GOTO   9BD8
09B12:  MOVLB  0
....................                 misf_meas_uncopyed_counter += size_change;
09B14:  MOVLB  2
09B16:  MOVF   x02,W
09B18:  MOVLB  1
09B1A:  ADDWF  x15,F
09B1C:  MOVLB  2
09B1E:  MOVF   x03,W
09B20:  MOVLB  1
09B22:  ADDWFC x16,F
09B24:  MOVLB  2
09B26:  MOVF   x04,W
09B28:  MOVLB  1
09B2A:  ADDWFC x17,F
09B2C:  MOVLB  2
09B2E:  MOVF   x05,W
09B30:  MOVLB  1
09B32:  ADDWFC x18,F
....................                 fprintf(PC, "CIGS Mission %02X: +%ld uncopied, Total: %lu\r\n", 
....................                         mission_id, size_change, misf_meas_uncopyed_counter);
09B34:  MOVLW  72
09B36:  MOVWF  FF6
09B38:  MOVLW  08
09B3A:  MOVWF  FF7
09B3C:  MOVLW  00
09B3E:  MOVWF  FF8
09B40:  MOVLW  0D
09B42:  MOVLB  9
09B44:  MOVWF  x96
09B46:  MOVLB  0
09B48:  CALL   1F18
09B4C:  MOVFF  201,996
09B50:  MOVLW  37
09B52:  MOVLB  9
09B54:  MOVWF  x97
09B56:  MOVLB  0
09B58:  CALL   2116
09B5C:  MOVLW  83
09B5E:  MOVWF  FF6
09B60:  MOVLW  08
09B62:  MOVWF  FF7
09B64:  MOVLW  00
09B66:  MOVWF  FF8
09B68:  MOVLW  03
09B6A:  MOVLB  9
09B6C:  MOVWF  x96
09B6E:  MOVLB  0
09B70:  CALL   1F18
09B74:  MOVLW  41
09B76:  MOVWF  FE9
09B78:  MOVFF  205,211
09B7C:  MOVFF  204,210
09B80:  MOVFF  203,20F
09B84:  MOVFF  202,20E
09B88:  CALL   9600
09B8C:  MOVLW  89
09B8E:  MOVWF  FF6
09B90:  MOVLW  08
09B92:  MOVWF  FF7
09B94:  MOVLW  00
09B96:  MOVWF  FF8
09B98:  MOVLW  12
09B9A:  MOVLB  9
09B9C:  MOVWF  x96
09B9E:  MOVLB  0
09BA0:  CALL   1F18
09BA4:  MOVLW  41
09BA6:  MOVWF  FE9
09BA8:  MOVFF  118,211
09BAC:  MOVFF  117,210
09BB0:  MOVFF  116,20F
09BB4:  MOVFF  115,20E
09BB8:  CALL   92CE
09BBC:  MOVLW  0D
09BBE:  MOVLB  A
09BC0:  MOVWF  x29
09BC2:  MOVLB  0
09BC4:  CALL   1E96
09BC8:  MOVLW  0A
09BCA:  MOVLB  A
09BCC:  MOVWF  x29
09BCE:  MOVLB  0
09BD0:  CALL   1E96
....................             } else if (size_change < 0) {
09BD4:  GOTO   9BFA
....................                 int32 decrease = -size_change;
09BD8:  MOVLB  2
09BDA:  COMF   x02,W
09BDC:  MOVWF  x06
09BDE:  COMF   x03,W
09BE0:  MOVWF  x07
09BE2:  COMF   x04,W
09BE4:  MOVWF  x08
09BE6:  COMF   x05,W
09BE8:  MOVWF  x09
09BEA:  INCF   x06,F
09BEC:  BTFSC  FD8.2
09BEE:  INCF   x07,F
09BF0:  BTFSC  FD8.2
09BF2:  INCF   x08,F
09BF4:  BTFSC  FD8.2
09BF6:  INCF   x09,F
09BF8:  MOVLB  0
....................                 if (misf_meas_uncopyed_counter >= decrease) {
....................                     misf_meas_uncopyed_counter -= decrease;
....................                     fprintf(PC, "CIGS Mission %02X: -%ld uncopied, Remaining: %lu\r\n", 
....................                             mission_id, decrease, misf_meas_uncopyed_counter);
....................                 } else {
....................                     fprintf(PC, "Warning: CIGS Mission %02X cannot decrease below 0 (current: %lu, requested: %ld)\r\n", 
....................                             mission_id, misf_meas_uncopyed_counter, decrease);
....................                     misf_meas_uncopyed_counter = 0;
....................                 }
....................             }
....................             break;
09BFA:  GOTO   9D6C
....................             
....................         case 0x02: // CIGS_PICLOG
....................             if (size_change > 0) {
09BFE:  MOVLB  2
09C00:  MOVF   x02,F
09C02:  BTFSC  FD8.2
09C04:  BRA    9C0C
09C06:  MOVLB  0
09C08:  GOTO   9C3E
09C0C:  MOVLB  0
09C0E:  MOVLB  2
09C10:  MOVF   x03,F
09C12:  BTFSC  FD8.2
09C14:  BRA    9C1C
09C16:  MOVLB  0
09C18:  GOTO   9C3E
09C1C:  MOVLB  0
09C1E:  MOVLB  2
09C20:  MOVF   x04,F
09C22:  BTFSC  FD8.2
09C24:  BRA    9C2C
09C26:  MOVLB  0
09C28:  GOTO   9C3E
09C2C:  MOVLB  0
09C2E:  MOVLB  2
09C30:  MOVF   x05,F
09C32:  BTFSS  FD8.2
09C34:  BRA    9C3C
09C36:  MOVLB  0
09C38:  GOTO   9D02
09C3C:  MOVLB  0
....................                 misf_piclog_uncopyed_counter += size_change;
09C3E:  MOVLB  2
09C40:  MOVF   x02,W
09C42:  MOVLB  1
09C44:  ADDWF  x0B,F
09C46:  MOVLB  2
09C48:  MOVF   x03,W
09C4A:  MOVLB  1
09C4C:  ADDWFC x0C,F
09C4E:  MOVLB  2
09C50:  MOVF   x04,W
09C52:  MOVLB  1
09C54:  ADDWFC x0D,F
09C56:  MOVLB  2
09C58:  MOVF   x05,W
09C5A:  MOVLB  1
09C5C:  ADDWFC x0E,F
....................                 fprintf(PC, "CIGS Mission %02X: +%ld uncopied, Total: %lu\r\n", 
....................                         mission_id, size_change, misf_piclog_uncopyed_counter);
09C5E:  MOVLW  2A
09C60:  MOVWF  FF6
09C62:  MOVLW  09
09C64:  MOVWF  FF7
09C66:  MOVLW  00
09C68:  MOVWF  FF8
09C6A:  MOVLW  0D
09C6C:  MOVLB  9
09C6E:  MOVWF  x96
09C70:  MOVLB  0
09C72:  CALL   1F18
09C76:  MOVFF  201,996
09C7A:  MOVLW  37
09C7C:  MOVLB  9
09C7E:  MOVWF  x97
09C80:  MOVLB  0
09C82:  CALL   2116
09C86:  MOVLW  3B
09C88:  MOVWF  FF6
09C8A:  MOVLW  09
09C8C:  MOVWF  FF7
09C8E:  MOVLW  00
09C90:  MOVWF  FF8
09C92:  MOVLW  03
09C94:  MOVLB  9
09C96:  MOVWF  x96
09C98:  MOVLB  0
09C9A:  CALL   1F18
09C9E:  MOVLW  41
09CA0:  MOVWF  FE9
09CA2:  MOVFF  205,211
09CA6:  MOVFF  204,210
09CAA:  MOVFF  203,20F
09CAE:  MOVFF  202,20E
09CB2:  CALL   9600
09CB6:  MOVLW  41
09CB8:  MOVWF  FF6
09CBA:  MOVLW  09
09CBC:  MOVWF  FF7
09CBE:  MOVLW  00
09CC0:  MOVWF  FF8
09CC2:  MOVLW  12
09CC4:  MOVLB  9
09CC6:  MOVWF  x96
09CC8:  MOVLB  0
09CCA:  CALL   1F18
09CCE:  MOVLW  41
09CD0:  MOVWF  FE9
09CD2:  MOVFF  10E,211
09CD6:  MOVFF  10D,210
09CDA:  MOVFF  10C,20F
09CDE:  MOVFF  10B,20E
09CE2:  CALL   92CE
09CE6:  MOVLW  0D
09CE8:  MOVLB  A
09CEA:  MOVWF  x29
09CEC:  MOVLB  0
09CEE:  CALL   1E96
09CF2:  MOVLW  0A
09CF4:  MOVLB  A
09CF6:  MOVWF  x29
09CF8:  MOVLB  0
09CFA:  CALL   1E96
....................             } else if (size_change < 0) {
09CFE:  GOTO   9D24
....................                 int32 decrease = -size_change;
09D02:  MOVLB  2
09D04:  COMF   x02,W
09D06:  MOVWF  x0A
09D08:  COMF   x03,W
09D0A:  MOVWF  x0B
09D0C:  COMF   x04,W
09D0E:  MOVWF  x0C
09D10:  COMF   x05,W
09D12:  MOVWF  x0D
09D14:  INCF   x0A,F
09D16:  BTFSC  FD8.2
09D18:  INCF   x0B,F
09D1A:  BTFSC  FD8.2
09D1C:  INCF   x0C,F
09D1E:  BTFSC  FD8.2
09D20:  INCF   x0D,F
09D22:  MOVLB  0
....................                 if (misf_piclog_uncopyed_counter >= decrease) {
....................                     misf_piclog_uncopyed_counter -= decrease;
....................                     fprintf(PC, "CIGS Mission %02X: -%ld uncopied, Remaining: %lu\r\n", 
....................                             mission_id, decrease, misf_piclog_uncopyed_counter);
....................                 } else {
....................                     fprintf(PC, "Warning: CIGS Mission %02X cannot decrease below 0 (current: %lu, requested: %ld)\r\n", 
....................                             mission_id, misf_piclog_uncopyed_counter, decrease);
....................                     misf_piclog_uncopyed_counter = 0;
....................                 }
....................             }
....................             break;
09D24:  GOTO   9D6C
....................             
....................         default:
....................             fprintf(PC, "Warning: Unknown mission_id %02X for counter update\r\n", mission_id);
09D28:  MOVLW  E2
09D2A:  MOVWF  FF6
09D2C:  MOVLW  09
09D2E:  MOVWF  FF7
09D30:  MOVLW  00
09D32:  MOVWF  FF8
09D34:  MOVLW  1C
09D36:  MOVLB  9
09D38:  MOVWF  x96
09D3A:  MOVLB  0
09D3C:  CALL   1F18
09D40:  MOVFF  201,996
09D44:  MOVLW  37
09D46:  MOVLB  9
09D48:  MOVWF  x97
09D4A:  MOVLB  0
09D4C:  CALL   2116
09D50:  MOVLW  02
09D52:  MOVWF  FF6
09D54:  MOVLW  0A
09D56:  MOVWF  FF7
09D58:  MOVLW  00
09D5A:  MOVWF  FF8
09D5C:  MOVLW  15
09D5E:  MOVLB  9
09D60:  MOVWF  x96
09D62:  MOVLB  0
09D64:  CALL   1F18
....................             break;
09D68:  GOTO   9D6C
....................     }
09D6C:  GOTO   A74A (RETURN)
.................... }
.................... 
.................... void reset_cigs_uncopyed_counter_local(int8 mission_id)
.................... {
....................     switch(mission_id)
*
0977C:  MOVLB  1
0977E:  MOVF   xFD,W
09780:  XORLW  01
09782:  MOVLB  0
09784:  BTFSC  FD8.2
09786:  GOTO   9796
0978A:  XORLW  03
0978C:  BTFSC  FD8.2
0978E:  GOTO   97E4
09792:  GOTO   9832
....................     {
....................         case 0x01: // CIGS_MEASURE_DATA
....................             misf_meas_uncopyed_counter = 0;
09796:  MOVLB  1
09798:  CLRF   x18
0979A:  CLRF   x17
0979C:  CLRF   x16
0979E:  CLRF   x15
....................             fprintf(PC, "CIGS Mission %02X: uncopied counter reset\r\n", mission_id);
097A0:  MOVLW  18
097A2:  MOVWF  FF6
097A4:  MOVLW  0A
097A6:  MOVWF  FF7
097A8:  MOVLW  00
097AA:  MOVWF  FF8
097AC:  MOVLW  0D
097AE:  MOVLB  9
097B0:  MOVWF  x96
097B2:  MOVLB  0
097B4:  CALL   1F18
097B8:  MOVFF  1FD,996
097BC:  MOVLW  37
097BE:  MOVLB  9
097C0:  MOVWF  x97
097C2:  MOVLB  0
097C4:  CALL   2116
097C8:  MOVLW  29
097CA:  MOVWF  FF6
097CC:  MOVLW  0A
097CE:  MOVWF  FF7
097D0:  MOVLW  00
097D2:  MOVWF  FF8
097D4:  MOVLW  1A
097D6:  MOVLB  9
097D8:  MOVWF  x96
097DA:  MOVLB  0
097DC:  CALL   1F18
....................             break;
097E0:  GOTO   9876
....................             
....................         case 0x02: // CIGS_PICLOG
....................             misf_piclog_uncopyed_counter = 0;
097E4:  MOVLB  1
097E6:  CLRF   x0E
097E8:  CLRF   x0D
097EA:  CLRF   x0C
097EC:  CLRF   x0B
....................             fprintf(PC, "CIGS Mission %02X: uncopied counter reset\r\n", mission_id);
097EE:  MOVLW  44
097F0:  MOVWF  FF6
097F2:  MOVLW  0A
097F4:  MOVWF  FF7
097F6:  MOVLW  00
097F8:  MOVWF  FF8
097FA:  MOVLW  0D
097FC:  MOVLB  9
097FE:  MOVWF  x96
09800:  MOVLB  0
09802:  CALL   1F18
09806:  MOVFF  1FD,996
0980A:  MOVLW  37
0980C:  MOVLB  9
0980E:  MOVWF  x97
09810:  MOVLB  0
09812:  CALL   2116
09816:  MOVLW  55
09818:  MOVWF  FF6
0981A:  MOVLW  0A
0981C:  MOVWF  FF7
0981E:  MOVLW  00
09820:  MOVWF  FF8
09822:  MOVLW  1A
09824:  MOVLB  9
09826:  MOVWF  x96
09828:  MOVLB  0
0982A:  CALL   1F18
....................             break;
0982E:  GOTO   9876
....................             
....................         default:
....................             fprintf(PC, "Warning: Unknown mission_id %02X for counter reset\r\n", mission_id);
09832:  MOVLW  70
09834:  MOVWF  FF6
09836:  MOVLW  0A
09838:  MOVWF  FF7
0983A:  MOVLW  00
0983C:  MOVWF  FF8
0983E:  MOVLW  1C
09840:  MOVLB  9
09842:  MOVWF  x96
09844:  MOVLB  0
09846:  CALL   1F18
0984A:  MOVFF  1FD,996
0984E:  MOVLW  37
09850:  MOVLB  9
09852:  MOVWF  x97
09854:  MOVLB  0
09856:  CALL   2116
0985A:  MOVLW  90
0985C:  MOVWF  FF6
0985E:  MOVLW  0A
09860:  MOVWF  FF7
09862:  MOVLW  00
09864:  MOVWF  FF8
09866:  MOVLW  14
09868:  MOVLB  9
0986A:  MOVWF  x96
0986C:  MOVLB  0
0986E:  CALL   1F18
....................             break;
09872:  GOTO   9876
....................     }
09876:  GOTO   A308 (RETURN)
.................... } 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数
.................... 
.................... void read_smf_header()
.................... {
....................     int8 read_data[PACKET_SIZE];
....................     int8 retry_count;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
094DC:  MOVLB  2
094DE:  CLRF   x3C
094E0:  MOVLB  0
094E2:  MOVLB  2
094E4:  MOVF   x3C,W
094E6:  SUBLW  04
094E8:  BTFSC  FD8.0
094EA:  BRA    94F2
094EC:  MOVLB  0
094EE:  GOTO   959C
094F2:  MOVLB  0
....................     {
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, read_data, PACKET_SIZE);
094F4:  MOVFF  F5,281
094F8:  MOVFF  F4,280
094FC:  MOVFF  F3,27F
09500:  MOVFF  F2,27E
09504:  MOVLW  06
09506:  MOVLB  2
09508:  MOVWF  x85
0950A:  MOVLW  AA
0950C:  MOVWF  x84
0950E:  CLRF   x83
09510:  CLRF   x82
09512:  MOVLW  01
09514:  MOVWF  x87
09516:  MOVLW  FC
09518:  MOVWF  x86
0951A:  CLRF   x8B
0951C:  CLRF   x8A
0951E:  CLRF   x89
09520:  MOVLW  40
09522:  MOVWF  x88
09524:  MOVLB  0
09526:  CALL   2648
....................         if (is_crc_valid(read_data, PACKET_SIZE-1))
0952A:  MOVLW  01
0952C:  MOVLB  2
0952E:  MOVWF  x7F
09530:  MOVLW  FC
09532:  MOVWF  x7E
09534:  MOVLW  3F
09536:  MOVWF  x80
09538:  MOVLB  0
0953A:  CALL   93CE
0953E:  MOVF   01,F
09540:  BTFSC  FD8.2
09542:  GOTO   9592
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
09546:  MOVLW  01
09548:  MOVLB  2
0954A:  ADDWF  x3C,W
0954C:  MOVWF  x3D
0954E:  MOVLW  A6
09550:  MOVWF  FF6
09552:  MOVLW  0A
09554:  MOVWF  FF7
09556:  MOVLW  00
09558:  MOVWF  FF8
0955A:  MOVLW  23
0955C:  MOVLB  9
0955E:  MOVWF  x96
09560:  MOVLB  0
09562:  CALL   1F18
09566:  MOVFF  23D,27F
0956A:  MOVLW  18
0956C:  MOVLB  2
0956E:  MOVWF  x80
09570:  MOVLB  0
09572:  CALL   908C
09576:  MOVLW  0D
09578:  MOVLB  A
0957A:  MOVWF  x29
0957C:  MOVLB  0
0957E:  CALL   1E96
09582:  MOVLW  0A
09584:  MOVLB  A
09586:  MOVWF  x29
09588:  MOVLB  0
0958A:  CALL   1E96
....................             break;
0958E:  GOTO   959C
....................         }
09592:  MOVLB  2
09594:  INCF   x3C,F
09596:  MOVLB  0
09598:  GOTO   94E2
....................     }
....................     param.meas.used_size = lsb_array_to_int32(read_data, 0);
0959C:  MOVLW  01
0959E:  MOVLB  2
095A0:  MOVWF  x3E
095A2:  MOVLW  FC
095A4:  MOVWF  x3D
095A6:  CLRF   x3F
095A8:  MOVLB  0
095AA:  CALL   941C
095AE:  MOVFF  03,124
095B2:  MOVFF  02,123
095B6:  MOVFF  01,122
095BA:  MOVFF  00,121
....................     param.meas.loop_counter = read_data[4];
095BE:  MOVLB  1
095C0:  CLRF   x28
095C2:  CLRF   x27
095C4:  CLRF   x26
095C6:  MOVFF  200,125
....................     param.piclog.used_size = lsb_array_to_int32(read_data, 5);
095CA:  MOVLW  01
095CC:  MOVLB  2
095CE:  MOVWF  x3E
095D0:  MOVLW  FC
095D2:  MOVWF  x3D
095D4:  MOVLW  05
095D6:  MOVWF  x3F
095D8:  MOVLB  0
095DA:  CALL   941C
095DE:  MOVFF  03,12F
095E2:  MOVFF  02,12E
095E6:  MOVFF  01,12D
095EA:  MOVFF  00,12C
....................     param.piclog.loop_counter = read_data[9];
095EE:  MOVLB  1
095F0:  CLRF   x33
095F2:  CLRF   x32
095F4:  CLRF   x31
095F6:  MOVFF  205,130
095FA:  MOVLB  0
095FC:  GOTO   A088 (RETURN)
.................... }
.................... 
.................... void write_smf_header()
.................... {
....................     int8 writedata[PACKET_SIZE];
.................... 
....................     // ヘッダー情報をwritedataに設定
....................     int32_to_be_array(param.meas.used_size, writedata, 0);
*
098EA:  MOVFF  124,281
098EE:  MOVFF  123,280
098F2:  MOVFF  122,27F
098F6:  MOVFF  121,27E
098FA:  MOVLW  01
098FC:  MOVLB  2
098FE:  MOVWF  x83
09900:  MOVLW  FC
09902:  MOVWF  x82
09904:  CLRF   x84
09906:  MOVLB  0
09908:  CALL   987A
....................     writedata[4] = param.meas.loop_counter;
0990C:  MOVFF  125,200
....................     int32_to_be_array(param.piclog.used_size, writedata, 5);
09910:  MOVFF  12F,281
09914:  MOVFF  12E,280
09918:  MOVFF  12D,27F
0991C:  MOVFF  12C,27E
09920:  MOVLW  01
09922:  MOVLB  2
09924:  MOVWF  x83
09926:  MOVLW  FC
09928:  MOVWF  x82
0992A:  MOVLW  05
0992C:  MOVWF  x84
0992E:  MOVLB  0
09930:  CALL   987A
....................     writedata[9] = param.piclog.loop_counter;
09934:  MOVFF  130,205
.................... 
....................     writedata[63] = calc_crc8(writedata, PACKET_SIZE-1); // CRCを計算してバッファに書き込み
09938:  MOVLW  01
0993A:  MOVLB  9
0993C:  MOVWF  xE7
0993E:  MOVLW  FC
09940:  MOVWF  xE6
09942:  MOVLW  3F
09944:  MOVWF  xE8
09946:  MOVLB  0
09948:  CALL   40D4
0994C:  MOVFF  01,23B
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
09950:  MOVLB  2
09952:  BCF    x7D.0
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
09954:  CLRF   x7C
09956:  MOVLB  0
09958:  MOVLB  2
0995A:  MOVF   x7C,W
0995C:  SUBLW  04
0995E:  BTFSC  FD8.0
09960:  BRA    9968
09962:  MOVLB  0
09964:  GOTO   9A68
09968:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0996A:  MOVFF  F5,A29
0996E:  MOVFF  F4,A28
09972:  MOVFF  F3,A27
09976:  MOVFF  F2,A26
0997A:  MOVLW  06
0997C:  MOVLB  A
0997E:  MOVWF  x2D
09980:  MOVLW  AA
09982:  MOVWF  x2C
09984:  CLRF   x2B
09986:  CLRF   x2A
09988:  MOVLB  0
0998A:  CALL   37C0
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, writedata, PACKET_SIZE); // ヘッダーを書き込み
0998E:  MOVFF  F5,A29
09992:  MOVFF  F4,A28
09996:  MOVFF  F3,A27
0999A:  MOVFF  F2,A26
0999E:  MOVLW  06
099A0:  MOVLB  A
099A2:  MOVWF  x2D
099A4:  MOVLW  AA
099A6:  MOVWF  x2C
099A8:  CLRF   x2B
099AA:  CLRF   x2A
099AC:  MOVLW  01
099AE:  MOVWF  x2F
099B0:  MOVLW  FC
099B2:  MOVWF  x2E
099B4:  CLRF   x31
099B6:  MOVLW  40
099B8:  MOVWF  x30
099BA:  MOVLB  0
099BC:  CALL   343C
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
099C0:  MOVFF  F5,281
099C4:  MOVFF  F4,280
099C8:  MOVFF  F3,27F
099CC:  MOVFF  F2,27E
099D0:  MOVLW  06
099D2:  MOVLB  2
099D4:  MOVWF  x85
099D6:  MOVLW  AA
099D8:  MOVWF  x84
099DA:  CLRF   x83
099DC:  CLRF   x82
099DE:  MOVLW  02
099E0:  MOVWF  x87
099E2:  MOVLW  3C
099E4:  MOVWF  x86
099E6:  CLRF   x8B
099E8:  CLRF   x8A
099EA:  CLRF   x89
099EC:  MOVLW  40
099EE:  MOVWF  x88
099F0:  MOVLB  0
099F2:  CALL   2648
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
099F6:  MOVLW  02
099F8:  MOVLB  2
099FA:  MOVWF  x7F
099FC:  MOVLW  3C
099FE:  MOVWF  x7E
09A00:  MOVLW  3F
09A02:  MOVWF  x80
09A04:  MOVLB  0
09A06:  CALL   93CE
09A0A:  MOVF   01,F
09A0C:  BTFSC  FD8.2
09A0E:  GOTO   9A5E
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
09A12:  MOVLW  01
09A14:  MOVLB  2
09A16:  ADDWF  x7C,W
09A18:  MOVWF  x7E
09A1A:  MOVLW  CE
09A1C:  MOVWF  FF6
09A1E:  MOVLW  0A
09A20:  MOVWF  FF7
09A22:  MOVLW  00
09A24:  MOVWF  FF8
09A26:  MOVLW  23
09A28:  MOVLB  9
09A2A:  MOVWF  x96
09A2C:  MOVLB  0
09A2E:  CALL   1F18
09A32:  MOVFF  27E,27F
09A36:  MOVLW  18
09A38:  MOVLB  2
09A3A:  MOVWF  x80
09A3C:  MOVLB  0
09A3E:  CALL   908C
09A42:  MOVLW  0D
09A44:  MOVLB  A
09A46:  MOVWF  x29
09A48:  MOVLB  0
09A4A:  CALL   1E96
09A4E:  MOVLW  0A
09A50:  MOVLB  A
09A52:  MOVWF  x29
09A54:  MOVLB  0
09A56:  CALL   1E96
....................             break;
09A5A:  GOTO   9A68
....................         }
09A5E:  MOVLB  2
09A60:  INCF   x7C,F
09A62:  MOVLB  0
09A64:  GOTO   9958
....................     }
....................     if (!crc_valid)
09A68:  MOVLB  2
09A6A:  BTFSS  x7D.0
09A6C:  BRA    9A74
09A6E:  MOVLB  0
09A70:  GOTO   9AB6
09A74:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
09A76:  MOVLW  F6
09A78:  MOVWF  FF6
09A7A:  MOVLW  0A
09A7C:  MOVWF  FF7
09A7E:  MOVLW  00
09A80:  MOVWF  FF8
09A82:  MOVLW  25
09A84:  MOVLB  9
09A86:  MOVWF  x96
09A88:  MOVLB  0
09A8A:  CALL   1F18
09A8E:  MOVLW  05
09A90:  MOVLB  2
09A92:  MOVWF  x7F
09A94:  MOVLW  18
09A96:  MOVWF  x80
09A98:  MOVLB  0
09A9A:  CALL   908C
09A9E:  MOVLW  1D
09AA0:  MOVWF  FF6
09AA2:  MOVLW  0B
09AA4:  MOVWF  FF7
09AA6:  MOVLW  00
09AA8:  MOVWF  FF8
09AAA:  MOVLW  0B
09AAC:  MOVLB  9
09AAE:  MOVWF  x96
09AB0:  MOVLB  0
09AB2:  CALL   1F18
....................         // return; 
....................     }
09AB6:  GOTO   A704 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
09D70:  MOVLW  2A
09D72:  MOVWF  FF6
09D74:  MOVLW  0B
09D76:  MOVWF  FF7
09D78:  MOVLW  00
09D7A:  MOVWF  FF8
09D7C:  CALL   1EE8
....................     fprintf(PC, "___Start copy_data__\r\n");
09D80:  MOVLW  44
09D82:  MOVWF  FF6
09D84:  MOVLW  0B
09D86:  MOVWF  FF7
09D88:  MOVLW  00
09D8A:  MOVWF  FF8
09D8C:  CALL   1EE8
....................     
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     CigsMissionStruct mission_struct = get_cigs_mission_struct_local(smf_data->mission_id);
09D90:  MOVLB  1
09D92:  MOVF   x47,W
09D94:  MOVWF  FE9
09D96:  MOVF   x48,W
09D98:  MOVWF  FEA
09D9A:  MOVFF  FEF,1FA
09D9E:  MOVFF  1FA,203
09DA2:  MOVLB  0
09DA4:  CALL   91F4
09DA8:  MOVFF  02,03
09DAC:  MOVF   01,W
09DAE:  MOVWF  FE1
09DB0:  MOVFF  03,FE2
09DB4:  MOVLW  01
09DB6:  MOVWF  FEA
09DB8:  MOVLW  9E
09DBA:  MOVWF  FE9
09DBC:  MOVLW  19
09DBE:  MOVWF  01
09DC0:  MOVFF  FE6,FEE
09DC4:  DECFSZ 01,F
09DC6:  GOTO   9DC0
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
09DCA:  MOVLB  1
09DCC:  MOVF   x47,W
09DCE:  MOVWF  FE9
09DD0:  MOVF   x48,W
09DD2:  MOVWF  FEA
09DD4:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_struct.start_address;
....................     unsigned int32 mis_end_address = mission_struct.end_address;
....................     unsigned int32 write_src = smf_data->src;
....................     unsigned int32 write_size = smf_data->size;
09DD8:  MOVFF  1A2,1BA
09DDC:  MOVFF  1A1,1B9
09DE0:  MOVFF  1A0,1B8
09DE4:  MOVFF  19F,1B7
09DE8:  MOVFF  1A6,1BE
09DEC:  MOVFF  1A5,1BD
09DF0:  MOVFF  1A4,1BC
09DF4:  MOVFF  1A3,1BB
09DF8:  MOVLW  01
09DFA:  ADDWF  x47,W
09DFC:  MOVWF  FE9
09DFE:  MOVLW  00
09E00:  ADDWFC x48,W
09E02:  MOVWF  FEA
09E04:  MOVFF  FEF,1BF
09E08:  MOVFF  FEC,1C0
09E0C:  MOVFF  FEC,1C1
09E10:  MOVFF  FEC,1C2
09E14:  MOVF   FED,F
09E16:  MOVF   FED,F
09E18:  MOVF   FED,F
09E1A:  MOVLW  05
09E1C:  ADDWF  x47,W
09E1E:  MOVWF  FE9
09E20:  MOVLW  00
09E22:  ADDWFC x48,W
09E24:  MOVWF  FEA
09E26:  MOVFF  FEF,1C3
09E2A:  MOVFF  FEC,1C4
09E2E:  MOVFF  FEC,1C5
09E32:  MOVFF  FEC,1C6
09E36:  MOVF   FED,F
09E38:  MOVF   FED,F
09E3A:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
09E3C:  MOVLW  5C
09E3E:  MOVWF  FF6
09E40:  MOVLW  0B
09E42:  MOVWF  FF7
09E44:  MOVLW  00
09E46:  MOVWF  FF8
09E48:  MOVLW  25
09E4A:  MOVLB  9
09E4C:  MOVWF  x96
09E4E:  MOVLB  0
09E50:  CALL   1F18
09E54:  MOVFF  1BA,996
09E58:  MOVLW  37
09E5A:  MOVLB  9
09E5C:  MOVWF  x97
09E5E:  MOVLB  0
09E60:  CALL   2116
09E64:  MOVFF  1B9,996
09E68:  MOVLW  37
09E6A:  MOVLB  9
09E6C:  MOVWF  x97
09E6E:  MOVLB  0
09E70:  CALL   2116
09E74:  MOVFF  1B8,996
09E78:  MOVLW  37
09E7A:  MOVLB  9
09E7C:  MOVWF  x97
09E7E:  MOVLB  0
09E80:  CALL   2116
09E84:  MOVFF  1B7,996
09E88:  MOVLW  37
09E8A:  MOVLB  9
09E8C:  MOVWF  x97
09E8E:  MOVLB  0
09E90:  CALL   2116
09E94:  MOVLW  0D
09E96:  MOVLB  A
09E98:  MOVWF  x29
09E9A:  MOVLB  0
09E9C:  CALL   1E96
09EA0:  MOVLW  0A
09EA2:  MOVLB  A
09EA4:  MOVWF  x29
09EA6:  MOVLB  0
09EA8:  CALL   1E96
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
09EAC:  MOVLW  88
09EAE:  MOVWF  FF6
09EB0:  MOVLW  0B
09EB2:  MOVWF  FF7
09EB4:  MOVLW  00
09EB6:  MOVWF  FF8
09EB8:  MOVLW  25
09EBA:  MOVLB  9
09EBC:  MOVWF  x96
09EBE:  MOVLB  0
09EC0:  CALL   1F18
09EC4:  MOVFF  1BE,996
09EC8:  MOVLW  37
09ECA:  MOVLB  9
09ECC:  MOVWF  x97
09ECE:  MOVLB  0
09ED0:  CALL   2116
09ED4:  MOVFF  1BD,996
09ED8:  MOVLW  37
09EDA:  MOVLB  9
09EDC:  MOVWF  x97
09EDE:  MOVLB  0
09EE0:  CALL   2116
09EE4:  MOVFF  1BC,996
09EE8:  MOVLW  37
09EEA:  MOVLB  9
09EEC:  MOVWF  x97
09EEE:  MOVLB  0
09EF0:  CALL   2116
09EF4:  MOVFF  1BB,996
09EF8:  MOVLW  37
09EFA:  MOVLB  9
09EFC:  MOVWF  x97
09EFE:  MOVLB  0
09F00:  CALL   2116
09F04:  MOVLW  0D
09F06:  MOVLB  A
09F08:  MOVWF  x29
09F0A:  MOVLB  0
09F0C:  CALL   1E96
09F10:  MOVLW  0A
09F12:  MOVLB  A
09F14:  MOVWF  x29
09F16:  MOVLB  0
09F18:  CALL   1E96
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
09F1C:  MOVLW  B4
09F1E:  MOVWF  FF6
09F20:  MOVLW  0B
09F22:  MOVWF  FF7
09F24:  MOVLW  00
09F26:  MOVWF  FF8
09F28:  MOVLW  25
09F2A:  MOVLB  9
09F2C:  MOVWF  x96
09F2E:  MOVLB  0
09F30:  CALL   1F18
09F34:  MOVFF  1C2,996
09F38:  MOVLW  37
09F3A:  MOVLB  9
09F3C:  MOVWF  x97
09F3E:  MOVLB  0
09F40:  CALL   2116
09F44:  MOVFF  1C1,996
09F48:  MOVLW  37
09F4A:  MOVLB  9
09F4C:  MOVWF  x97
09F4E:  MOVLB  0
09F50:  CALL   2116
09F54:  MOVFF  1C0,996
09F58:  MOVLW  37
09F5A:  MOVLB  9
09F5C:  MOVWF  x97
09F5E:  MOVLB  0
09F60:  CALL   2116
09F64:  MOVFF  1BF,996
09F68:  MOVLW  37
09F6A:  MOVLB  9
09F6C:  MOVWF  x97
09F6E:  MOVLB  0
09F70:  CALL   2116
09F74:  MOVLW  0D
09F76:  MOVLB  A
09F78:  MOVWF  x29
09F7A:  MOVLB  0
09F7C:  CALL   1E96
09F80:  MOVLW  0A
09F82:  MOVLB  A
09F84:  MOVWF  x29
09F86:  MOVLB  0
09F88:  CALL   1E96
....................     fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
09F8C:  MOVLW  E0
09F8E:  MOVWF  FF6
09F90:  MOVLW  0B
09F92:  MOVWF  FF7
09F94:  MOVLW  00
09F96:  MOVWF  FF8
09F98:  MOVLW  25
09F9A:  MOVLB  9
09F9C:  MOVWF  x96
09F9E:  MOVLB  0
09FA0:  CALL   1F18
09FA4:  MOVLW  41
09FA6:  MOVWF  FE9
09FA8:  MOVFF  1C6,211
09FAC:  MOVFF  1C5,210
09FB0:  MOVFF  1C4,20F
09FB4:  MOVFF  1C3,20E
09FB8:  CALL   92CE
09FBC:  MOVLW  08
09FBE:  MOVWF  FF6
09FC0:  MOVLW  0C
09FC2:  MOVWF  FF7
09FC4:  MOVLW  00
09FC6:  MOVWF  FF8
09FC8:  MOVLW  04
09FCA:  MOVLB  9
09FCC:  MOVWF  x96
09FCE:  MOVLB  0
09FD0:  CALL   1F18
09FD4:  MOVFF  1C6,996
09FD8:  MOVLW  57
09FDA:  MOVLB  9
09FDC:  MOVWF  x97
09FDE:  MOVLB  0
09FE0:  CALL   2116
09FE4:  MOVFF  1C5,996
09FE8:  MOVLW  57
09FEA:  MOVLB  9
09FEC:  MOVWF  x97
09FEE:  MOVLB  0
09FF0:  CALL   2116
09FF4:  MOVFF  1C4,996
09FF8:  MOVLW  57
09FFA:  MOVLB  9
09FFC:  MOVWF  x97
09FFE:  MOVLB  0
0A000:  CALL   2116
0A004:  MOVFF  1C3,996
0A008:  MOVLW  57
0A00A:  MOVLB  9
0A00C:  MOVWF  x97
0A00E:  MOVLB  0
0A010:  CALL   2116
0A014:  MOVLW  0F
0A016:  MOVWF  FF6
0A018:  MOVLW  0C
0A01A:  MOVWF  FF7
0A01C:  MOVLW  00
0A01E:  MOVWF  FF8
0A020:  MOVLW  05
0A022:  MOVLB  9
0A024:  MOVWF  x96
0A026:  MOVLB  0
0A028:  CALL   1F18
.................... 
....................     if (!is_connect(mis_fm))
0A02C:  MOVFF  F1,A29
0A030:  MOVFF  F0,A28
0A034:  MOVFF  EF,A27
0A038:  MOVFF  EE,A26
0A03C:  CALL   2582
0A040:  MOVF   01,F
0A042:  BTFSS  FD8.2
0A044:  GOTO   A058
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0A048:  MOVLW  16
0A04A:  MOVWF  FF6
0A04C:  MOVLW  0C
0A04E:  MOVWF  FF7
0A050:  MOVLW  00
0A052:  MOVWF  FF8
0A054:  CALL   1EE8
....................     }    
.................... 
....................     if (!is_connect(smf))
0A058:  MOVFF  F5,A29
0A05C:  MOVFF  F4,A28
0A060:  MOVFF  F3,A27
0A064:  MOVFF  F2,A26
0A068:  CALL   2582
0A06C:  MOVF   01,F
0A06E:  BTFSS  FD8.2
0A070:  GOTO   A084
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0A074:  MOVLW  38
0A076:  MOVWF  FF6
0A078:  MOVLW  0C
0A07A:  MOVWF  FF7
0A07C:  MOVLW  00
0A07E:  MOVWF  FF8
0A080:  CALL   1EE8
....................     }    
....................     /*
....................     while (!is_connect(smf))
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
....................         delay_ms(100);
....................     }
....................     */
.................... 
....................     // read size area with CRC verification retry
....................     read_smf_header();
0A084:  GOTO   94DC
.................... 
....................     // PartitionParamから値を取得
....................     int32 used_size = param.meas.used_size;
....................     int8 loop_count = param.meas.loop_counter;
0A088:  MOVFF  124,1CA
0A08C:  MOVFF  123,1C9
0A090:  MOVFF  122,1C8
0A094:  MOVFF  121,1C7
0A098:  MOVFF  125,1CB
....................     fprintf(PC, "Size area read\r\n");
0A09C:  MOVLW  56
0A09E:  MOVWF  FF6
0A0A0:  MOVLW  0C
0A0A2:  MOVWF  FF7
0A0A4:  MOVLW  00
0A0A6:  MOVWF  FF8
0A0A8:  CALL   1EE8
....................     fprintf(PC, "used_size = %ld (src 0x%08LX)\r\n", used_size, mis_start_address);
0A0AC:  MOVLW  68
0A0AE:  MOVWF  FF6
0A0B0:  MOVLW  0C
0A0B2:  MOVWF  FF7
0A0B4:  MOVLW  00
0A0B6:  MOVWF  FF8
0A0B8:  MOVLW  0C
0A0BA:  MOVLB  9
0A0BC:  MOVWF  x96
0A0BE:  MOVLB  0
0A0C0:  CALL   1F18
0A0C4:  MOVLW  41
0A0C6:  MOVWF  FE9
0A0C8:  MOVFF  1CA,211
0A0CC:  MOVFF  1C9,210
0A0D0:  MOVFF  1C8,20F
0A0D4:  MOVFF  1C7,20E
0A0D8:  CALL   9600
0A0DC:  MOVLW  77
0A0DE:  MOVWF  FF6
0A0E0:  MOVLW  0C
0A0E2:  MOVWF  FF7
0A0E4:  MOVLW  00
0A0E6:  MOVWF  FF8
0A0E8:  MOVLW  08
0A0EA:  MOVLB  9
0A0EC:  MOVWF  x96
0A0EE:  MOVLB  0
0A0F0:  CALL   1F18
0A0F4:  MOVFF  1BA,996
0A0F8:  MOVLW  37
0A0FA:  MOVLB  9
0A0FC:  MOVWF  x97
0A0FE:  MOVLB  0
0A100:  CALL   2116
0A104:  MOVFF  1B9,996
0A108:  MOVLW  37
0A10A:  MOVLB  9
0A10C:  MOVWF  x97
0A10E:  MOVLB  0
0A110:  CALL   2116
0A114:  MOVFF  1B8,996
0A118:  MOVLW  37
0A11A:  MOVLB  9
0A11C:  MOVWF  x97
0A11E:  MOVLB  0
0A120:  CALL   2116
0A124:  MOVFF  1B7,996
0A128:  MOVLW  37
0A12A:  MOVLB  9
0A12C:  MOVWF  x97
0A12E:  MOVLB  0
0A130:  CALL   2116
0A134:  MOVLW  84
0A136:  MOVWF  FF6
0A138:  MOVLW  0C
0A13A:  MOVWF  FF7
0A13C:  MOVLW  00
0A13E:  MOVWF  FF8
0A140:  MOVLW  03
0A142:  MOVLB  9
0A144:  MOVWF  x96
0A146:  MOVLB  0
0A148:  CALL   1F18
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
0A14C:  MOVLW  04
0A14E:  MOVLB  1
0A150:  ADDWF  xB7,W
0A152:  MOVWF  xFA
0A154:  MOVLW  00
0A156:  ADDWFC xB8,W
0A158:  MOVWF  xFB
0A15A:  MOVLW  00
0A15C:  ADDWFC xB9,W
0A15E:  MOVWF  xFC
0A160:  MOVLW  00
0A162:  ADDWFC xBA,W
0A164:  MOVWF  xFD
0A166:  MOVLW  88
0A168:  MOVWF  FF6
0A16A:  MOVLW  0C
0A16C:  MOVWF  FF7
0A16E:  MOVLW  00
0A170:  MOVWF  FF8
0A172:  MOVLW  0C
0A174:  MOVLB  9
0A176:  MOVWF  x96
0A178:  MOVLB  0
0A17A:  CALL   1F18
0A17E:  MOVFF  1CB,27F
0A182:  MOVLW  18
0A184:  MOVLB  2
0A186:  MOVWF  x80
0A188:  MOVLB  0
0A18A:  CALL   908C
0A18E:  MOVLW  96
0A190:  MOVWF  FF6
0A192:  MOVLW  0C
0A194:  MOVWF  FF7
0A196:  MOVLW  00
0A198:  MOVWF  FF8
0A19A:  MOVLW  09
0A19C:  MOVLB  9
0A19E:  MOVWF  x96
0A1A0:  MOVLB  0
0A1A2:  CALL   1F18
0A1A6:  MOVFF  1FD,996
0A1AA:  MOVLW  37
0A1AC:  MOVLB  9
0A1AE:  MOVWF  x97
0A1B0:  MOVLB  0
0A1B2:  CALL   2116
0A1B6:  MOVFF  1FC,996
0A1BA:  MOVLW  37
0A1BC:  MOVLB  9
0A1BE:  MOVWF  x97
0A1C0:  MOVLB  0
0A1C2:  CALL   2116
0A1C6:  MOVFF  1FB,996
0A1CA:  MOVLW  37
0A1CC:  MOVLB  9
0A1CE:  MOVWF  x97
0A1D0:  MOVLB  0
0A1D2:  CALL   2116
0A1D6:  MOVFF  1FA,996
0A1DA:  MOVLW  37
0A1DC:  MOVLB  9
0A1DE:  MOVWF  x97
0A1E0:  MOVLB  0
0A1E2:  CALL   2116
0A1E6:  MOVLW  A4
0A1E8:  MOVWF  FF6
0A1EA:  MOVLW  0C
0A1EC:  MOVWF  FF7
0A1EE:  MOVLW  00
0A1F0:  MOVWF  FF8
0A1F2:  MOVLW  05
0A1F4:  MOVLB  9
0A1F6:  MOVWF  x96
0A1F8:  MOVLB  0
0A1FA:  CALL   1F18
....................     
.................... 
....................     // Calculate data write address and check for wrap-around
....................     unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................     unsigned int32 data_region_end = mis_end_address;
....................     unsigned int32 data_region_size = data_region_end - data_region_start;
....................     unsigned int32 data_write_addr = data_region_start + used_size;
0A1FE:  MOVLB  1
0A200:  MOVF   xB7,W
0A202:  MOVWF  xCC
0A204:  MOVLW  10
0A206:  ADDWF  xB8,W
0A208:  MOVWF  xCD
0A20A:  MOVLW  00
0A20C:  ADDWFC xB9,W
0A20E:  MOVWF  xCE
0A210:  MOVLW  00
0A212:  ADDWFC xBA,W
0A214:  MOVWF  xCF
0A216:  MOVFF  1BE,1D3
0A21A:  MOVFF  1BD,1D2
0A21E:  MOVFF  1BC,1D1
0A222:  MOVFF  1BB,1D0
0A226:  MOVF   xCC,W
0A228:  SUBWF  xD0,W
0A22A:  MOVWF  xD4
0A22C:  MOVF   xCD,W
0A22E:  SUBWFB xD1,W
0A230:  MOVWF  xD5
0A232:  MOVF   xCE,W
0A234:  SUBWFB xD2,W
0A236:  MOVWF  xD6
0A238:  MOVF   xCF,W
0A23A:  SUBWFB xD3,W
0A23C:  MOVWF  xD7
0A23E:  MOVF   xC7,W
0A240:  ADDWF  xCC,W
0A242:  MOVWF  xD8
0A244:  MOVF   xC8,W
0A246:  ADDWFC xCD,W
0A248:  MOVWF  xD9
0A24A:  MOVF   xC9,W
0A24C:  ADDWFC xCE,W
0A24E:  MOVWF  xDA
0A250:  MOVF   xCA,W
0A252:  ADDWFC xCF,W
0A254:  MOVWF  xDB
.................... 
.................... 
....................     // Delete the first part in advance in case of looping
....................     if ((used_size + write_size) > data_region_size)
0A256:  MOVF   xC3,W
0A258:  ADDWF  xC7,W
0A25A:  MOVWF  xFA
0A25C:  MOVF   xC4,W
0A25E:  ADDWFC xC8,W
0A260:  MOVWF  xFB
0A262:  MOVF   xC5,W
0A264:  ADDWFC xC9,W
0A266:  MOVWF  xFC
0A268:  MOVF   xC6,W
0A26A:  ADDWFC xCA,W
0A26C:  MOVWF  xFD
0A26E:  MOVF   xD7,W
0A270:  SUBWF  xFD,W
0A272:  BTFSC  FD8.0
0A274:  BRA    A27C
0A276:  MOVLB  0
0A278:  GOTO   A3AA
0A27C:  MOVLB  0
0A27E:  BTFSS  FD8.2
0A280:  GOTO   A2C6
0A284:  MOVLB  1
0A286:  MOVF   xD6,W
0A288:  SUBWF  xFC,W
0A28A:  BTFSC  FD8.0
0A28C:  BRA    A294
0A28E:  MOVLB  0
0A290:  GOTO   A3AA
0A294:  MOVLB  0
0A296:  BTFSS  FD8.2
0A298:  GOTO   A2C6
0A29C:  MOVLB  1
0A29E:  MOVF   xD5,W
0A2A0:  SUBWF  xFB,W
0A2A2:  BTFSC  FD8.0
0A2A4:  BRA    A2AC
0A2A6:  MOVLB  0
0A2A8:  GOTO   A3AA
0A2AC:  MOVLB  0
0A2AE:  BTFSS  FD8.2
0A2B0:  GOTO   A2C6
0A2B4:  MOVLB  1
0A2B6:  MOVF   xFA,W
0A2B8:  SUBWF  xD4,W
0A2BA:  BTFSS  FD8.0
0A2BC:  BRA    A2C4
0A2BE:  MOVLB  0
0A2C0:  GOTO   A3AA
0A2C4:  MOVLB  0
....................     {
....................         fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
0A2C6:  MOVLW  AA
0A2C8:  MOVWF  FF6
0A2CA:  MOVLW  0C
0A2CC:  MOVWF  FF7
0A2CE:  MOVLW  00
0A2D0:  MOVWF  FF8
0A2D2:  CALL   1EE8
....................         loop_count++;
0A2D6:  MOVLB  1
0A2D8:  INCF   xCB,F
....................         used_size = 0;
0A2DA:  CLRF   xCA
0A2DC:  CLRF   xC9
0A2DE:  CLRF   xC8
0A2E0:  CLRF   xC7
....................         data_write_addr = data_region_start;
0A2E2:  MOVFF  1CF,1DB
0A2E6:  MOVFF  1CE,1DA
0A2EA:  MOVFF  1CD,1D9
0A2EE:  MOVFF  1CC,1D8
....................         
....................         // ループ発生時にuncopied counterをリセット
....................         reset_cigs_uncopyed_counter_local(smf_data->mission_id);
0A2F2:  MOVF   x47,W
0A2F4:  MOVWF  FE9
0A2F6:  MOVF   x48,W
0A2F8:  MOVWF  FEA
0A2FA:  MOVFF  FEF,1FA
0A2FE:  MOVFF  1FA,1FD
0A302:  MOVLB  0
0A304:  GOTO   977C
....................         
....................         unsigned int32 erase_ptr = data_region_start;
0A308:  MOVFF  1CF,1DF
0A30C:  MOVFF  1CE,1DE
0A310:  MOVFF  1CD,1DD
0A314:  MOVFF  1CC,1DC
....................         while (erase_ptr < data_region_end)
0A318:  MOVLB  1
0A31A:  MOVF   xDF,W
0A31C:  SUBWF  xD3,W
0A31E:  BTFSC  FD8.0
0A320:  BRA    A328
0A322:  MOVLB  0
0A324:  GOTO   A3AA
0A328:  MOVLB  0
0A32A:  BTFSS  FD8.2
0A32C:  GOTO   A372
0A330:  MOVLB  1
0A332:  MOVF   xDE,W
0A334:  SUBWF  xD2,W
0A336:  BTFSC  FD8.0
0A338:  BRA    A340
0A33A:  MOVLB  0
0A33C:  GOTO   A3AA
0A340:  MOVLB  0
0A342:  BTFSS  FD8.2
0A344:  GOTO   A372
0A348:  MOVLB  1
0A34A:  MOVF   xDD,W
0A34C:  SUBWF  xD1,W
0A34E:  BTFSC  FD8.0
0A350:  BRA    A358
0A352:  MOVLB  0
0A354:  GOTO   A3AA
0A358:  MOVLB  0
0A35A:  BTFSS  FD8.2
0A35C:  GOTO   A372
0A360:  MOVLB  1
0A362:  MOVF   xD0,W
0A364:  SUBWF  xDC,W
0A366:  BTFSS  FD8.0
0A368:  BRA    A370
0A36A:  MOVLB  0
0A36C:  GOTO   A3AA
0A370:  MOVLB  0
....................         {
....................             subsector_4kByte_erase(smf, erase_ptr);
0A372:  MOVFF  F5,A29
0A376:  MOVFF  F4,A28
0A37A:  MOVFF  F3,A27
0A37E:  MOVFF  F2,A26
0A382:  MOVFF  1DF,A2D
0A386:  MOVFF  1DE,A2C
0A38A:  MOVFF  1DD,A2B
0A38E:  MOVFF  1DC,A2A
0A392:  CALL   37C0
....................             erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
0A396:  MOVLW  10
0A398:  MOVLB  1
0A39A:  ADDWF  xDD,F
0A39C:  MOVLW  00
0A39E:  ADDWFC xDE,F
0A3A0:  MOVLW  00
0A3A2:  ADDWFC xDF,F
0A3A4:  MOVLB  0
0A3A6:  GOTO   A318
....................         }
....................     }
.................... 
.................... 
....................     // Erase the space you will be writing in now
....................     unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................     unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
0A3AA:  MOVLB  1
0A3AC:  CLRF   xE0
0A3AE:  MOVF   xD9,W
0A3B0:  ANDLW  F0
0A3B2:  MOVWF  xE1
0A3B4:  CLRF   xE2
0A3B6:  CLRF   xE3
0A3B8:  MOVF   xC3,W
0A3BA:  ADDWF  xD8,W
0A3BC:  MOVWF  xFA
0A3BE:  MOVF   xC4,W
0A3C0:  ADDWFC xD9,W
0A3C2:  MOVWF  xFB
0A3C4:  MOVF   xC5,W
0A3C6:  ADDWFC xDA,W
0A3C8:  MOVWF  xFC
0A3CA:  MOVF   xC6,W
0A3CC:  ADDWFC xDB,W
0A3CE:  MOVWF  xFD
0A3D0:  MOVLW  FF
0A3D2:  ADDWF  xFA,F
0A3D4:  MOVLW  0F
0A3D6:  ADDWFC xFB,F
0A3D8:  MOVLW  00
0A3DA:  ADDWFC xFC,F
0A3DC:  MOVLW  00
0A3DE:  ADDWFC xFD,F
0A3E0:  CLRF   xE4
0A3E2:  MOVF   xFB,W
0A3E4:  ANDLW  F0
0A3E6:  MOVWF  xE5
0A3E8:  CLRF   xE6
0A3EA:  CLRF   xE7
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
0A3EC:  MOVFF  1E3,1EB
0A3F0:  MOVFF  1E2,1EA
0A3F4:  MOVFF  1E1,1E9
0A3F8:  MOVFF  1E0,1E8
0A3FC:  MOVLB  0
0A3FE:  MOVLB  1
0A400:  MOVF   xEB,W
0A402:  SUBWF  xE7,W
0A404:  BTFSC  FD8.0
0A406:  BRA    A40E
0A408:  MOVLB  0
0A40A:  GOTO   A4EA
0A40E:  MOVLB  0
0A410:  BTFSS  FD8.2
0A412:  GOTO   A458
0A416:  MOVLB  1
0A418:  MOVF   xEA,W
0A41A:  SUBWF  xE6,W
0A41C:  BTFSC  FD8.0
0A41E:  BRA    A426
0A420:  MOVLB  0
0A422:  GOTO   A4EA
0A426:  MOVLB  0
0A428:  BTFSS  FD8.2
0A42A:  GOTO   A458
0A42E:  MOVLB  1
0A430:  MOVF   xE9,W
0A432:  SUBWF  xE5,W
0A434:  BTFSC  FD8.0
0A436:  BRA    A43E
0A438:  MOVLB  0
0A43A:  GOTO   A4EA
0A43E:  MOVLB  0
0A440:  BTFSS  FD8.2
0A442:  GOTO   A458
0A446:  MOVLB  1
0A448:  MOVF   xE4,W
0A44A:  SUBWF  xE8,W
0A44C:  BTFSS  FD8.0
0A44E:  BRA    A456
0A450:  MOVLB  0
0A452:  GOTO   A4EA
0A456:  MOVLB  0
0A458:  MOVLB  1
0A45A:  MOVF   xEB,W
0A45C:  SUBWF  xBE,W
0A45E:  BTFSC  FD8.0
0A460:  BRA    A468
0A462:  MOVLB  0
0A464:  GOTO   A4EA
0A468:  MOVLB  0
0A46A:  BTFSS  FD8.2
0A46C:  GOTO   A4B2
0A470:  MOVLB  1
0A472:  MOVF   xEA,W
0A474:  SUBWF  xBD,W
0A476:  BTFSC  FD8.0
0A478:  BRA    A480
0A47A:  MOVLB  0
0A47C:  GOTO   A4EA
0A480:  MOVLB  0
0A482:  BTFSS  FD8.2
0A484:  GOTO   A4B2
0A488:  MOVLB  1
0A48A:  MOVF   xE9,W
0A48C:  SUBWF  xBC,W
0A48E:  BTFSC  FD8.0
0A490:  BRA    A498
0A492:  MOVLB  0
0A494:  GOTO   A4EA
0A498:  MOVLB  0
0A49A:  BTFSS  FD8.2
0A49C:  GOTO   A4B2
0A4A0:  MOVLB  1
0A4A2:  MOVF   xBB,W
0A4A4:  SUBWF  xE8,W
0A4A6:  BTFSS  FD8.0
0A4A8:  BRA    A4B0
0A4AA:  MOVLB  0
0A4AC:  GOTO   A4EA
0A4B0:  MOVLB  0
....................         subsector_4kByte_erase(smf, addr);
0A4B2:  MOVFF  F5,A29
0A4B6:  MOVFF  F4,A28
0A4BA:  MOVFF  F3,A27
0A4BE:  MOVFF  F2,A26
0A4C2:  MOVFF  1EB,A2D
0A4C6:  MOVFF  1EA,A2C
0A4CA:  MOVFF  1E9,A2B
0A4CE:  MOVFF  1E8,A2A
0A4D2:  CALL   37C0
0A4D6:  MOVLW  10
0A4D8:  MOVLB  1
0A4DA:  ADDWF  xE9,F
0A4DC:  MOVLW  00
0A4DE:  ADDWFC xEA,F
0A4E0:  MOVLW  00
0A4E2:  ADDWFC xEB,F
0A4E4:  MOVLB  0
0A4E6:  GOTO   A3FE
.................... 
....................     unsigned int32 remaining = write_size;
....................     unsigned int32 src_addr = write_src;
0A4EA:  MOVFF  1C6,1EF
0A4EE:  MOVFF  1C5,1EE
0A4F2:  MOVFF  1C4,1ED
0A4F6:  MOVFF  1C3,1EC
0A4FA:  MOVFF  1C2,1F3
0A4FE:  MOVFF  1C1,1F2
0A502:  MOVFF  1C0,1F1
0A506:  MOVFF  1BF,1F0
....................     while (remaining > 0)
0A50A:  MOVLB  1
0A50C:  MOVF   xEC,F
0A50E:  BTFSC  FD8.2
0A510:  BRA    A518
0A512:  MOVLB  0
0A514:  GOTO   A54A
0A518:  MOVLB  0
0A51A:  MOVLB  1
0A51C:  MOVF   xED,F
0A51E:  BTFSC  FD8.2
0A520:  BRA    A528
0A522:  MOVLB  0
0A524:  GOTO   A54A
0A528:  MOVLB  0
0A52A:  MOVLB  1
0A52C:  MOVF   xEE,F
0A52E:  BTFSC  FD8.2
0A530:  BRA    A538
0A532:  MOVLB  0
0A534:  GOTO   A54A
0A538:  MOVLB  0
0A53A:  MOVLB  1
0A53C:  MOVF   xEF,F
0A53E:  BTFSS  FD8.2
0A540:  BRA    A548
0A542:  MOVLB  0
0A544:  GOTO   A700
0A548:  MOVLB  0
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
0A54A:  MOVLB  1
0A54C:  MOVF   xEF,F
0A54E:  BTFSC  FD8.2
0A550:  BRA    A558
0A552:  MOVLB  0
0A554:  GOTO   A58C
0A558:  MOVLB  0
0A55A:  MOVLB  1
0A55C:  MOVF   xEE,F
0A55E:  BTFSC  FD8.2
0A560:  BRA    A568
0A562:  MOVLB  0
0A564:  GOTO   A58C
0A568:  MOVLB  0
0A56A:  MOVLB  1
0A56C:  MOVF   xED,F
0A56E:  BTFSC  FD8.2
0A570:  BRA    A578
0A572:  MOVLB  0
0A574:  GOTO   A58C
0A578:  MOVLB  0
0A57A:  MOVLB  1
0A57C:  MOVF   xEC,W
0A57E:  SUBLW  40
0A580:  BTFSS  FD8.0
0A582:  BRA    A58A
0A584:  MOVLB  0
0A586:  GOTO   A594
0A58A:  MOVLB  0
0A58C:  CLRF   03
0A58E:  MOVLW  40
0A590:  GOTO   A59E
0A594:  MOVFF  1ED,03
0A598:  MOVLB  1
0A59A:  MOVF   xEC,W
0A59C:  MOVLB  0
0A59E:  MOVLB  1
0A5A0:  MOVWF  xF4
0A5A2:  MOVFF  03,1F5
0A5A6:  MOVLB  0
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
0A5A8:  MOVFF  F1,281
0A5AC:  MOVFF  F0,280
0A5B0:  MOVFF  EF,27F
0A5B4:  MOVFF  EE,27E
0A5B8:  MOVFF  1F3,285
0A5BC:  MOVFF  1F2,284
0A5C0:  MOVFF  1F1,283
0A5C4:  MOVFF  1F0,282
0A5C8:  MOVLW  01
0A5CA:  MOVLB  2
0A5CC:  MOVWF  x87
0A5CE:  MOVLW  5E
0A5D0:  MOVWF  x86
0A5D2:  CLRF   x8B
0A5D4:  CLRF   x8A
0A5D6:  MOVFF  1F5,289
0A5DA:  MOVFF  1F4,288
0A5DE:  MOVLB  0
0A5E0:  CALL   2648
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
0A5E4:  MOVFF  F5,A29
0A5E8:  MOVFF  F4,A28
0A5EC:  MOVFF  F3,A27
0A5F0:  MOVFF  F2,A26
0A5F4:  MOVFF  1DB,A2D
0A5F8:  MOVFF  1DA,A2C
0A5FC:  MOVFF  1D9,A2B
0A600:  MOVFF  1D8,A2A
0A604:  MOVLW  01
0A606:  MOVLB  A
0A608:  MOVWF  x2F
0A60A:  MOVLW  5E
0A60C:  MOVWF  x2E
0A60E:  MOVFF  1F5,A31
0A612:  MOVFF  1F4,A30
0A616:  MOVLB  0
0A618:  CALL   343C
....................         for (unsigned int32 i = 0; i < chunk; i++)
0A61C:  MOVLB  1
0A61E:  CLRF   xF9
0A620:  CLRF   xF8
0A622:  CLRF   xF7
0A624:  CLRF   xF6
0A626:  MOVLB  0
0A628:  MOVLB  1
0A62A:  MOVF   xF9,F
0A62C:  BTFSC  FD8.2
0A62E:  BRA    A636
0A630:  MOVLB  0
0A632:  GOTO   A6B8
0A636:  MOVLB  0
0A638:  MOVLB  1
0A63A:  MOVF   xF8,F
0A63C:  BTFSC  FD8.2
0A63E:  BRA    A646
0A640:  MOVLB  0
0A642:  GOTO   A6B8
0A646:  MOVLB  0
0A648:  MOVLB  1
0A64A:  MOVF   xF7,W
0A64C:  SUBWF  xF5,W
0A64E:  BTFSC  FD8.0
0A650:  BRA    A658
0A652:  MOVLB  0
0A654:  GOTO   A6B8
0A658:  MOVLB  0
0A65A:  BTFSS  FD8.2
0A65C:  GOTO   A672
0A660:  MOVLB  1
0A662:  MOVF   xF4,W
0A664:  SUBWF  xF6,W
0A666:  BTFSS  FD8.0
0A668:  BRA    A670
0A66A:  MOVLB  0
0A66C:  GOTO   A6B8
0A670:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0A672:  MOVLW  5E
0A674:  MOVLB  1
0A676:  ADDWF  xF6,W
0A678:  MOVWF  FE9
0A67A:  MOVLW  01
0A67C:  ADDWFC xF7,W
0A67E:  MOVWF  FEA
0A680:  MOVFF  FEF,1FA
0A684:  MOVFF  1FA,996
0A688:  MOVLW  37
0A68A:  MOVLB  9
0A68C:  MOVWF  x97
0A68E:  MOVLB  0
0A690:  CALL   2116
0A694:  MOVLW  20
0A696:  MOVLB  A
0A698:  MOVWF  x29
0A69A:  MOVLB  0
0A69C:  CALL   1E96
0A6A0:  MOVLW  01
0A6A2:  MOVLB  1
0A6A4:  ADDWF  xF6,F
0A6A6:  BTFSC  FD8.0
0A6A8:  INCF   xF7,F
0A6AA:  BTFSC  FD8.2
0A6AC:  INCF   xF8,F
0A6AE:  BTFSC  FD8.2
0A6B0:  INCF   xF9,F
0A6B2:  MOVLB  0
0A6B4:  GOTO   A628
....................         }
....................         src_addr += chunk;
0A6B8:  MOVLB  1
0A6BA:  MOVF   xF4,W
0A6BC:  ADDWF  xF0,F
0A6BE:  MOVF   xF5,W
0A6C0:  ADDWFC xF1,F
0A6C2:  MOVLW  00
0A6C4:  ADDWFC xF2,F
0A6C6:  MOVLW  00
0A6C8:  ADDWFC xF3,F
....................         data_write_addr += chunk;
0A6CA:  MOVF   xF4,W
0A6CC:  ADDWF  xD8,F
0A6CE:  MOVF   xF5,W
0A6D0:  ADDWFC xD9,F
0A6D2:  MOVLW  00
0A6D4:  ADDWFC xDA,F
0A6D6:  MOVLW  00
0A6D8:  ADDWFC xDB,F
....................         used_size += chunk;
0A6DA:  MOVF   xF4,W
0A6DC:  ADDWF  xC7,F
0A6DE:  MOVF   xF5,W
0A6E0:  ADDWFC xC8,F
0A6E2:  MOVLW  00
0A6E4:  ADDWFC xC9,F
0A6E6:  MOVLW  00
0A6E8:  ADDWFC xCA,F
....................         remaining -= chunk;
0A6EA:  MOVF   xF4,W
0A6EC:  SUBWF  xEC,F
0A6EE:  MOVF   xF5,W
0A6F0:  SUBWFB xED,F
0A6F2:  MOVLW  00
0A6F4:  SUBWFB xEE,F
0A6F6:  MOVLW  00
0A6F8:  SUBWFB xEF,F
0A6FA:  MOVLB  0
0A6FC:  GOTO   A50A
....................     }
....................     // write size area
....................     write_smf_header();
0A700:  GOTO   98EA
....................     
....................     // SMF書き込み成功後、uncopied counterを減らす
....................     update_cigs_uncopyed_counter_local(smf_data->mission_id, -write_size);
0A704:  MOVLB  1
0A706:  MOVF   x47,W
0A708:  MOVWF  FE9
0A70A:  MOVF   x48,W
0A70C:  MOVWF  FEA
0A70E:  MOVFF  FEF,1FA
0A712:  COMF   xC3,W
0A714:  MOVWF  xFB
0A716:  COMF   xC4,W
0A718:  MOVWF  xFC
0A71A:  COMF   xC5,W
0A71C:  MOVWF  xFD
0A71E:  COMF   xC6,W
0A720:  MOVWF  xFE
0A722:  INCF   xFB,F
0A724:  BTFSC  FD8.2
0A726:  INCF   xFC,F
0A728:  BTFSC  FD8.2
0A72A:  INCF   xFD,F
0A72C:  BTFSC  FD8.2
0A72E:  INCF   xFE,F
0A730:  MOVFF  1FA,201
0A734:  MOVFF  1FE,205
0A738:  MOVFF  1FD,204
0A73C:  MOVFF  1FC,203
0A740:  MOVFF  1FB,202
0A744:  MOVLB  0
0A746:  GOTO   9ABA
....................     
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
0A74A:  MOVLW  E0
0A74C:  MOVWF  FF6
0A74E:  MOVLW  0C
0A750:  MOVWF  FF7
0A752:  MOVLW  00
0A754:  MOVWF  FF8
0A756:  MOVLW  0C
0A758:  MOVLB  9
0A75A:  MOVWF  x96
0A75C:  MOVLB  0
0A75E:  CALL   1F18
0A762:  MOVLW  41
0A764:  MOVWF  FE9
0A766:  MOVFF  1CA,211
0A76A:  MOVFF  1C9,210
0A76E:  MOVFF  1C8,20F
0A772:  MOVFF  1C7,20E
0A776:  CALL   9600
0A77A:  MOVLW  0D
0A77C:  MOVLB  A
0A77E:  MOVWF  x29
0A780:  MOVLB  0
0A782:  CALL   1E96
0A786:  MOVLW  0A
0A788:  MOVLB  A
0A78A:  MOVWF  x29
0A78C:  MOVLB  0
0A78E:  CALL   1E96
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
0A792:  MOVLW  F2
0A794:  MOVWF  FF6
0A796:  MOVLW  0C
0A798:  MOVWF  FF7
0A79A:  MOVLW  00
0A79C:  MOVWF  FF8
0A79E:  MOVLW  0D
0A7A0:  MOVLB  9
0A7A2:  MOVWF  x96
0A7A4:  MOVLB  0
0A7A6:  CALL   1F18
0A7AA:  MOVFF  1CB,1FC
0A7AE:  MOVLW  1B
0A7B0:  MOVLB  1
0A7B2:  MOVWF  xFD
0A7B4:  MOVLB  0
0A7B6:  CALL   668C
0A7BA:  MOVLW  01
0A7BC:  MOVWF  FF6
0A7BE:  MOVLW  0D
0A7C0:  MOVWF  FF7
0A7C2:  MOVLW  00
0A7C4:  MOVWF  FF8
0A7C6:  MOVLW  04
0A7C8:  MOVLB  9
0A7CA:  MOVWF  x96
0A7CC:  MOVLB  0
0A7CE:  CALL   1F18
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
0A7D2:  MOVLW  06
0A7D4:  MOVWF  FF6
0A7D6:  MOVLW  0D
0A7D8:  MOVWF  FF7
0A7DA:  MOVLW  00
0A7DC:  MOVWF  FF8
0A7DE:  CALL   1EE8
....................     fprintf(PC, "____________________\r\n\r\n");
0A7E2:  MOVLW  20
0A7E4:  MOVWF  FF6
0A7E6:  MOVLW  0D
0A7E8:  MOVWF  FF7
0A7EA:  MOVLW  00
0A7EC:  MOVWF  FF8
0A7EE:  CALL   1EE8
0A7F2:  GOTO   B2F8 (RETURN)
.................... }
.................... 
.................... void smf_read(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0A7F6:  MOVLW  3A
0A7F8:  MOVWF  FF6
0A7FA:  MOVLW  0D
0A7FC:  MOVWF  FF7
0A7FE:  MOVLW  00
0A800:  MOVWF  FF8
0A802:  CALL   1EE8
....................     fprintf(PC, "___Start SMF Read____\r\n");
0A806:  MOVLW  54
0A808:  MOVWF  FF6
0A80A:  MOVLW  0D
0A80C:  MOVWF  FF7
0A80E:  MOVLW  00
0A810:  MOVWF  FF8
0A812:  CALL   1EE8
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     CigsMissionStruct mission_struct = get_cigs_mission_struct_local(smf_data->mission_id);
0A816:  MOVLB  1
0A818:  MOVF   x5E,W
0A81A:  MOVWF  FE9
0A81C:  MOVF   x5F,W
0A81E:  MOVWF  FEA
0A820:  MOVFF  FEF,1C9
0A824:  MOVFF  1C9,203
0A828:  MOVLB  0
0A82A:  CALL   91F4
0A82E:  MOVFF  02,03
0A832:  MOVF   01,W
0A834:  MOVWF  FE1
0A836:  MOVFF  03,FE2
0A83A:  MOVLW  01
0A83C:  MOVWF  FEA
0A83E:  MOVLW  A0
0A840:  MOVWF  FE9
0A842:  MOVLW  19
0A844:  MOVWF  01
0A846:  MOVFF  FE6,FEE
0A84A:  DECFSZ 01,F
0A84C:  GOTO   A846
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0A850:  MOVLB  1
0A852:  MOVF   x5E,W
0A854:  MOVWF  FE9
0A856:  MOVF   x5F,W
0A858:  MOVWF  FEA
0A85A:  MOVFF  FEF,49
....................     unsigned int32 read_src = smf_data->src;
....................     unsigned int32 read_size = smf_data->size;
0A85E:  MOVLW  01
0A860:  ADDWF  x5E,W
0A862:  MOVWF  FE9
0A864:  MOVLW  00
0A866:  ADDWFC x5F,W
0A868:  MOVWF  FEA
0A86A:  MOVFF  FEF,1B9
0A86E:  MOVFF  FEC,1BA
0A872:  MOVFF  FEC,1BB
0A876:  MOVFF  FEC,1BC
0A87A:  MOVF   FED,F
0A87C:  MOVF   FED,F
0A87E:  MOVF   FED,F
0A880:  MOVLW  05
0A882:  ADDWF  x5E,W
0A884:  MOVWF  FE9
0A886:  MOVLW  00
0A888:  ADDWFC x5F,W
0A88A:  MOVWF  FEA
0A88C:  MOVFF  FEF,1BD
0A890:  MOVFF  FEC,1BE
0A894:  MOVFF  FEC,1BF
0A898:  MOVFF  FEC,1C0
0A89C:  MOVF   FED,F
0A89E:  MOVF   FED,F
0A8A0:  MOVF   FED,F
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_src);
0A8A2:  MOVLW  6C
0A8A4:  MOVWF  FF6
0A8A6:  MOVLW  0D
0A8A8:  MOVWF  FF7
0A8AA:  MOVLW  00
0A8AC:  MOVWF  FF8
0A8AE:  MOVLW  21
0A8B0:  MOVLB  9
0A8B2:  MOVWF  x96
0A8B4:  MOVLB  0
0A8B6:  CALL   1F18
0A8BA:  MOVFF  1BC,996
0A8BE:  MOVLW  37
0A8C0:  MOVLB  9
0A8C2:  MOVWF  x97
0A8C4:  MOVLB  0
0A8C6:  CALL   2116
0A8CA:  MOVFF  1BB,996
0A8CE:  MOVLW  37
0A8D0:  MOVLB  9
0A8D2:  MOVWF  x97
0A8D4:  MOVLB  0
0A8D6:  CALL   2116
0A8DA:  MOVFF  1BA,996
0A8DE:  MOVLW  37
0A8E0:  MOVLB  9
0A8E2:  MOVWF  x97
0A8E4:  MOVLB  0
0A8E6:  CALL   2116
0A8EA:  MOVFF  1B9,996
0A8EE:  MOVLW  37
0A8F0:  MOVLB  9
0A8F2:  MOVWF  x97
0A8F4:  MOVLB  0
0A8F6:  CALL   2116
0A8FA:  MOVLW  0D
0A8FC:  MOVLB  A
0A8FE:  MOVWF  x29
0A900:  MOVLB  0
0A902:  CALL   1E96
0A906:  MOVLW  0A
0A908:  MOVLB  A
0A90A:  MOVWF  x29
0A90C:  MOVLB  0
0A90E:  CALL   1E96
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0A912:  MOVLW  94
0A914:  MOVWF  FF6
0A916:  MOVLW  0D
0A918:  MOVWF  FF7
0A91A:  MOVLW  00
0A91C:  MOVWF  FF8
0A91E:  MOVLW  21
0A920:  MOVLB  9
0A922:  MOVWF  x96
0A924:  MOVLB  0
0A926:  CALL   1F18
0A92A:  MOVLW  41
0A92C:  MOVWF  FE9
0A92E:  MOVFF  1C0,211
0A932:  MOVFF  1BF,210
0A936:  MOVFF  1BE,20F
0A93A:  MOVFF  1BD,20E
0A93E:  CALL   92CE
0A942:  MOVLW  B8
0A944:  MOVWF  FF6
0A946:  MOVLW  0D
0A948:  MOVWF  FF7
0A94A:  MOVLW  00
0A94C:  MOVWF  FF8
0A94E:  MOVLW  04
0A950:  MOVLB  9
0A952:  MOVWF  x96
0A954:  MOVLB  0
0A956:  CALL   1F18
0A95A:  MOVFF  1C0,996
0A95E:  MOVLW  57
0A960:  MOVLB  9
0A962:  MOVWF  x97
0A964:  MOVLB  0
0A966:  CALL   2116
0A96A:  MOVFF  1BF,996
0A96E:  MOVLW  57
0A970:  MOVLB  9
0A972:  MOVWF  x97
0A974:  MOVLB  0
0A976:  CALL   2116
0A97A:  MOVFF  1BE,996
0A97E:  MOVLW  57
0A980:  MOVLB  9
0A982:  MOVWF  x97
0A984:  MOVLB  0
0A986:  CALL   2116
0A98A:  MOVFF  1BD,996
0A98E:  MOVLW  57
0A990:  MOVLB  9
0A992:  MOVWF  x97
0A994:  MOVLB  0
0A996:  CALL   2116
0A99A:  MOVLW  BF
0A99C:  MOVWF  FF6
0A99E:  MOVLW  0D
0A9A0:  MOVWF  FF7
0A9A2:  MOVLW  00
0A9A4:  MOVWF  FF8
0A9A6:  MOVLW  05
0A9A8:  MOVLB  9
0A9AA:  MOVWF  x96
0A9AC:  MOVLB  0
0A9AE:  CALL   1F18
.................... 
....................     if (!is_connect(smf)){
0A9B2:  MOVFF  F5,A29
0A9B6:  MOVFF  F4,A28
0A9BA:  MOVFF  F3,A27
0A9BE:  MOVFF  F2,A26
0A9C2:  CALL   2582
0A9C6:  MOVF   01,F
0A9C8:  BTFSS  FD8.2
0A9CA:  GOTO   A9DE
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0A9CE:  MOVLW  C6
0A9D0:  MOVWF  FF6
0A9D2:  MOVLW  0D
0A9D4:  MOVWF  FF7
0A9D6:  MOVLW  00
0A9D8:  MOVWF  FF8
0A9DA:  CALL   1EE8
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0A9DE:  MOVLW  E4
0A9E0:  MOVWF  FF6
0A9E2:  MOVLW  0D
0A9E4:  MOVWF  FF7
0A9E6:  MOVLW  00
0A9E8:  MOVWF  FF8
0A9EA:  CALL   1EE8
....................     for (unsigned int32 addr = read_src; addr < read_src + read_size; addr += PACKET_SIZE)
0A9EE:  MOVFF  1BC,1C4
0A9F2:  MOVFF  1BB,1C3
0A9F6:  MOVFF  1BA,1C2
0A9FA:  MOVFF  1B9,1C1
0A9FE:  MOVLB  1
0AA00:  MOVF   xBD,W
0AA02:  ADDWF  xB9,W
0AA04:  MOVWF  00
0AA06:  MOVF   xBE,W
0AA08:  ADDWFC xBA,W
0AA0A:  MOVWF  01
0AA0C:  MOVF   xBF,W
0AA0E:  ADDWFC xBB,W
0AA10:  MOVWF  02
0AA12:  MOVF   xC0,W
0AA14:  ADDWFC xBC,W
0AA16:  MOVWF  03
0AA18:  MOVF   xC4,W
0AA1A:  SUBWF  03,W
0AA1C:  BTFSC  FD8.0
0AA1E:  BRA    AA26
0AA20:  MOVLB  0
0AA22:  GOTO   AB6E
0AA26:  MOVLB  0
0AA28:  BTFSS  FD8.2
0AA2A:  GOTO   AA70
0AA2E:  MOVLB  1
0AA30:  MOVF   xC3,W
0AA32:  SUBWF  02,W
0AA34:  BTFSC  FD8.0
0AA36:  BRA    AA3E
0AA38:  MOVLB  0
0AA3A:  GOTO   AB6E
0AA3E:  MOVLB  0
0AA40:  BTFSS  FD8.2
0AA42:  GOTO   AA70
0AA46:  MOVLB  1
0AA48:  MOVF   xC2,W
0AA4A:  SUBWF  01,W
0AA4C:  BTFSC  FD8.0
0AA4E:  BRA    AA56
0AA50:  MOVLB  0
0AA52:  GOTO   AB6E
0AA56:  MOVLB  0
0AA58:  BTFSS  FD8.2
0AA5A:  GOTO   AA70
0AA5E:  MOVF   00,W
0AA60:  MOVLB  1
0AA62:  SUBWF  xC1,W
0AA64:  BTFSS  FD8.0
0AA66:  BRA    AA6E
0AA68:  MOVLB  0
0AA6A:  GOTO   AB6E
0AA6E:  MOVLB  0
....................     {
....................         read_data_bytes(smf, addr, buffer, PACKET_SIZE);
0AA70:  MOVFF  F5,281
0AA74:  MOVFF  F4,280
0AA78:  MOVFF  F3,27F
0AA7C:  MOVFF  F2,27E
0AA80:  MOVFF  1C4,285
0AA84:  MOVFF  1C3,284
0AA88:  MOVFF  1C2,283
0AA8C:  MOVFF  1C1,282
0AA90:  MOVLW  01
0AA92:  MOVLB  2
0AA94:  MOVWF  x87
0AA96:  MOVLW  60
0AA98:  MOVWF  x86
0AA9A:  CLRF   x8B
0AA9C:  CLRF   x8A
0AA9E:  CLRF   x89
0AAA0:  MOVLW  40
0AAA2:  MOVWF  x88
0AAA4:  MOVLB  0
0AAA6:  CALL   2648
....................         for (unsigned int32 i = 0; i < PACKET_SIZE; i++)
0AAAA:  MOVLB  1
0AAAC:  CLRF   xC8
0AAAE:  CLRF   xC7
0AAB0:  CLRF   xC6
0AAB2:  CLRF   xC5
0AAB4:  MOVLB  0
0AAB6:  MOVLB  1
0AAB8:  MOVF   xC8,F
0AABA:  BTFSC  FD8.2
0AABC:  BRA    AAC4
0AABE:  MOVLB  0
0AAC0:  GOTO   AB3E
0AAC4:  MOVLB  0
0AAC6:  MOVLB  1
0AAC8:  MOVF   xC7,F
0AACA:  BTFSC  FD8.2
0AACC:  BRA    AAD4
0AACE:  MOVLB  0
0AAD0:  GOTO   AB3E
0AAD4:  MOVLB  0
0AAD6:  MOVLB  1
0AAD8:  MOVF   xC6,F
0AADA:  BTFSC  FD8.2
0AADC:  BRA    AAE4
0AADE:  MOVLB  0
0AAE0:  GOTO   AB3E
0AAE4:  MOVLB  0
0AAE6:  MOVLB  1
0AAE8:  MOVF   xC5,W
0AAEA:  SUBLW  3F
0AAEC:  BTFSC  FD8.0
0AAEE:  BRA    AAF6
0AAF0:  MOVLB  0
0AAF2:  GOTO   AB3E
0AAF6:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0AAF8:  MOVLW  60
0AAFA:  MOVLB  1
0AAFC:  ADDWF  xC5,W
0AAFE:  MOVWF  FE9
0AB00:  MOVLW  01
0AB02:  ADDWFC xC6,W
0AB04:  MOVWF  FEA
0AB06:  MOVFF  FEF,1C9
0AB0A:  MOVFF  1C9,996
0AB0E:  MOVLW  37
0AB10:  MOVLB  9
0AB12:  MOVWF  x97
0AB14:  MOVLB  0
0AB16:  CALL   2116
0AB1A:  MOVLW  20
0AB1C:  MOVLB  A
0AB1E:  MOVWF  x29
0AB20:  MOVLB  0
0AB22:  CALL   1E96
0AB26:  MOVLW  01
0AB28:  MOVLB  1
0AB2A:  ADDWF  xC5,F
0AB2C:  BTFSC  FD8.0
0AB2E:  INCF   xC6,F
0AB30:  BTFSC  FD8.2
0AB32:  INCF   xC7,F
0AB34:  BTFSC  FD8.2
0AB36:  INCF   xC8,F
0AB38:  MOVLB  0
0AB3A:  GOTO   AAB6
....................         }
....................         fprintf(PC, "\r\n");
0AB3E:  MOVLW  0D
0AB40:  MOVLB  A
0AB42:  MOVWF  x29
0AB44:  MOVLB  0
0AB46:  CALL   1E96
0AB4A:  MOVLW  0A
0AB4C:  MOVLB  A
0AB4E:  MOVWF  x29
0AB50:  MOVLB  0
0AB52:  CALL   1E96
0AB56:  MOVLW  40
0AB58:  MOVLB  1
0AB5A:  ADDWF  xC1,F
0AB5C:  MOVLW  00
0AB5E:  ADDWFC xC2,F
0AB60:  MOVLW  00
0AB62:  ADDWFC xC3,F
0AB64:  MOVLW  00
0AB66:  ADDWFC xC4,F
0AB68:  MOVLB  0
0AB6A:  GOTO   A9FE
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0AB6E:  MOVLW  FC
0AB70:  MOVWF  FF6
0AB72:  MOVLW  0D
0AB74:  MOVWF  FF7
0AB76:  MOVLW  00
0AB78:  MOVWF  FF8
0AB7A:  CALL   1EE8
....................     fprintf(PC, "____________________\r\n\r\n");
0AB7E:  MOVLW  14
0AB80:  MOVWF  FF6
0AB82:  MOVLW  0E
0AB84:  MOVWF  FF7
0AB86:  MOVLW  00
0AB88:  MOVWF  FF8
0AB8A:  CALL   1EE8
0AB8E:  GOTO   B326 (RETURN)
.................... }
.................... 
.................... void smf_erase(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0AB92:  MOVLW  2E
0AB94:  MOVWF  FF6
0AB96:  MOVLW  0E
0AB98:  MOVWF  FF7
0AB9A:  MOVLW  00
0AB9C:  MOVWF  FF8
0AB9E:  CALL   1EE8
....................     fprintf(PC, "___Start smf_erase____\r\n");
0ABA2:  MOVLW  48
0ABA4:  MOVWF  FF6
0ABA6:  MOVLW  0E
0ABA8:  MOVWF  FF7
0ABAA:  MOVLW  00
0ABAC:  MOVWF  FF8
0ABAE:  CALL   1EE8
.................... 
....................     CigsMissionStruct mission_struct = get_cigs_mission_struct_local(smf_data->mission_id);
0ABB2:  MOVLB  1
0ABB4:  MOVF   x5E,W
0ABB6:  MOVWF  FE9
0ABB8:  MOVF   x5F,W
0ABBA:  MOVWF  FEA
0ABBC:  MOVFF  FEF,189
0ABC0:  MOVFF  189,203
0ABC4:  MOVLB  0
0ABC6:  CALL   91F4
0ABCA:  MOVFF  02,03
0ABCE:  MOVF   01,W
0ABD0:  MOVWF  FE1
0ABD2:  MOVFF  03,FE2
0ABD6:  MOVLW  01
0ABD8:  MOVWF  FEA
0ABDA:  MOVLW  60
0ABDC:  MOVWF  FE9
0ABDE:  MOVLW  19
0ABE0:  MOVWF  01
0ABE2:  MOVFF  FE6,FEE
0ABE6:  DECFSZ 01,F
0ABE8:  GOTO   ABE2
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0ABEC:  MOVLB  1
0ABEE:  MOVF   x5E,W
0ABF0:  MOVWF  FE9
0ABF2:  MOVF   x5F,W
0ABF4:  MOVWF  FEA
0ABF6:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_struct.start_address;
....................     unsigned int32 mis_end_address = mission_struct.end_address;
....................     unsigned int32 erase_src = smf_data->src;
....................     unsigned int32 erase_size = smf_data->size;
0ABFA:  MOVFF  164,17C
0ABFE:  MOVFF  163,17B
0AC02:  MOVFF  162,17A
0AC06:  MOVFF  161,179
0AC0A:  MOVFF  168,180
0AC0E:  MOVFF  167,17F
0AC12:  MOVFF  166,17E
0AC16:  MOVFF  165,17D
0AC1A:  MOVLW  01
0AC1C:  ADDWF  x5E,W
0AC1E:  MOVWF  FE9
0AC20:  MOVLW  00
0AC22:  ADDWFC x5F,W
0AC24:  MOVWF  FEA
0AC26:  MOVFF  FEF,181
0AC2A:  MOVFF  FEC,182
0AC2E:  MOVFF  FEC,183
0AC32:  MOVFF  FEC,184
0AC36:  MOVF   FED,F
0AC38:  MOVF   FED,F
0AC3A:  MOVF   FED,F
0AC3C:  MOVLW  05
0AC3E:  ADDWF  x5E,W
0AC40:  MOVWF  FE9
0AC42:  MOVLW  00
0AC44:  ADDWFC x5F,W
0AC46:  MOVWF  FEA
0AC48:  MOVFF  FEF,185
0AC4C:  MOVFF  FEC,186
0AC50:  MOVFF  FEC,187
0AC54:  MOVFF  FEC,188
0AC58:  MOVF   FED,F
0AC5A:  MOVF   FED,F
0AC5C:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
0AC5E:  MOVLW  62
0AC60:  MOVWF  FF6
0AC62:  MOVLW  0E
0AC64:  MOVWF  FF7
0AC66:  MOVLW  00
0AC68:  MOVWF  FF8
0AC6A:  MOVLW  25
0AC6C:  MOVLB  9
0AC6E:  MOVWF  x96
0AC70:  MOVLB  0
0AC72:  CALL   1F18
0AC76:  MOVFF  17C,996
0AC7A:  MOVLW  37
0AC7C:  MOVLB  9
0AC7E:  MOVWF  x97
0AC80:  MOVLB  0
0AC82:  CALL   2116
0AC86:  MOVFF  17B,996
0AC8A:  MOVLW  37
0AC8C:  MOVLB  9
0AC8E:  MOVWF  x97
0AC90:  MOVLB  0
0AC92:  CALL   2116
0AC96:  MOVFF  17A,996
0AC9A:  MOVLW  37
0AC9C:  MOVLB  9
0AC9E:  MOVWF  x97
0ACA0:  MOVLB  0
0ACA2:  CALL   2116
0ACA6:  MOVFF  179,996
0ACAA:  MOVLW  37
0ACAC:  MOVLB  9
0ACAE:  MOVWF  x97
0ACB0:  MOVLB  0
0ACB2:  CALL   2116
0ACB6:  MOVLW  0D
0ACB8:  MOVLB  A
0ACBA:  MOVWF  x29
0ACBC:  MOVLB  0
0ACBE:  CALL   1E96
0ACC2:  MOVLW  0A
0ACC4:  MOVLB  A
0ACC6:  MOVWF  x29
0ACC8:  MOVLB  0
0ACCA:  CALL   1E96
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0ACCE:  MOVLW  8E
0ACD0:  MOVWF  FF6
0ACD2:  MOVLW  0E
0ACD4:  MOVWF  FF7
0ACD6:  MOVLW  00
0ACD8:  MOVWF  FF8
0ACDA:  MOVLW  25
0ACDC:  MOVLB  9
0ACDE:  MOVWF  x96
0ACE0:  MOVLB  0
0ACE2:  CALL   1F18
0ACE6:  MOVFF  180,996
0ACEA:  MOVLW  37
0ACEC:  MOVLB  9
0ACEE:  MOVWF  x97
0ACF0:  MOVLB  0
0ACF2:  CALL   2116
0ACF6:  MOVFF  17F,996
0ACFA:  MOVLW  37
0ACFC:  MOVLB  9
0ACFE:  MOVWF  x97
0AD00:  MOVLB  0
0AD02:  CALL   2116
0AD06:  MOVFF  17E,996
0AD0A:  MOVLW  37
0AD0C:  MOVLB  9
0AD0E:  MOVWF  x97
0AD10:  MOVLB  0
0AD12:  CALL   2116
0AD16:  MOVFF  17D,996
0AD1A:  MOVLW  37
0AD1C:  MOVLB  9
0AD1E:  MOVWF  x97
0AD20:  MOVLB  0
0AD22:  CALL   2116
0AD26:  MOVLW  0D
0AD28:  MOVLB  A
0AD2A:  MOVWF  x29
0AD2C:  MOVLB  0
0AD2E:  CALL   1E96
0AD32:  MOVLW  0A
0AD34:  MOVLB  A
0AD36:  MOVWF  x29
0AD38:  MOVLB  0
0AD3A:  CALL   1E96
....................     fprintf(PC, "In SMF Erase source data address: %LX\r\n", erase_src);
0AD3E:  MOVLW  BA
0AD40:  MOVWF  FF6
0AD42:  MOVLW  0E
0AD44:  MOVWF  FF7
0AD46:  MOVLW  00
0AD48:  MOVWF  FF8
0AD4A:  MOVLW  22
0AD4C:  MOVLB  9
0AD4E:  MOVWF  x96
0AD50:  MOVLB  0
0AD52:  CALL   1F18
0AD56:  MOVFF  184,996
0AD5A:  MOVLW  37
0AD5C:  MOVLB  9
0AD5E:  MOVWF  x97
0AD60:  MOVLB  0
0AD62:  CALL   2116
0AD66:  MOVFF  183,996
0AD6A:  MOVLW  37
0AD6C:  MOVLB  9
0AD6E:  MOVWF  x97
0AD70:  MOVLB  0
0AD72:  CALL   2116
0AD76:  MOVFF  182,996
0AD7A:  MOVLW  37
0AD7C:  MOVLB  9
0AD7E:  MOVWF  x97
0AD80:  MOVLB  0
0AD82:  CALL   2116
0AD86:  MOVFF  181,996
0AD8A:  MOVLW  37
0AD8C:  MOVLB  9
0AD8E:  MOVWF  x97
0AD90:  MOVLB  0
0AD92:  CALL   2116
0AD96:  MOVLW  0D
0AD98:  MOVLB  A
0AD9A:  MOVWF  x29
0AD9C:  MOVLB  0
0AD9E:  CALL   1E96
0ADA2:  MOVLW  0A
0ADA4:  MOVLB  A
0ADA6:  MOVWF  x29
0ADA8:  MOVLB  0
0ADAA:  CALL   1E96
....................     fprintf(PC, "In SMF Erase data size          : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0ADAE:  MOVLW  E2
0ADB0:  MOVWF  FF6
0ADB2:  MOVLW  0E
0ADB4:  MOVWF  FF7
0ADB6:  MOVLW  00
0ADB8:  MOVWF  FF8
0ADBA:  MOVLW  22
0ADBC:  MOVLB  9
0ADBE:  MOVWF  x96
0ADC0:  MOVLB  0
0ADC2:  CALL   1F18
0ADC6:  MOVLW  41
0ADC8:  MOVWF  FE9
0ADCA:  MOVFF  188,211
0ADCE:  MOVFF  187,210
0ADD2:  MOVFF  186,20F
0ADD6:  MOVFF  185,20E
0ADDA:  CALL   92CE
0ADDE:  MOVLW  07
0ADE0:  MOVWF  FF6
0ADE2:  MOVLW  0F
0ADE4:  MOVWF  FF7
0ADE6:  MOVLW  00
0ADE8:  MOVWF  FF8
0ADEA:  MOVLW  04
0ADEC:  MOVLB  9
0ADEE:  MOVWF  x96
0ADF0:  MOVLB  0
0ADF2:  CALL   1F18
0ADF6:  MOVFF  188,996
0ADFA:  MOVLW  57
0ADFC:  MOVLB  9
0ADFE:  MOVWF  x97
0AE00:  MOVLB  0
0AE02:  CALL   2116
0AE06:  MOVFF  187,996
0AE0A:  MOVLW  57
0AE0C:  MOVLB  9
0AE0E:  MOVWF  x97
0AE10:  MOVLB  0
0AE12:  CALL   2116
0AE16:  MOVFF  186,996
0AE1A:  MOVLW  57
0AE1C:  MOVLB  9
0AE1E:  MOVWF  x97
0AE20:  MOVLB  0
0AE22:  CALL   2116
0AE26:  MOVFF  185,996
0AE2A:  MOVLW  57
0AE2C:  MOVLB  9
0AE2E:  MOVWF  x97
0AE30:  MOVLB  0
0AE32:  CALL   2116
0AE36:  MOVLW  0E
0AE38:  MOVWF  FF6
0AE3A:  MOVLW  0F
0AE3C:  MOVWF  FF7
0AE3E:  MOVLW  00
0AE40:  MOVWF  FF8
0AE42:  MOVLW  05
0AE44:  MOVLB  9
0AE46:  MOVWF  x96
0AE48:  MOVLB  0
0AE4A:  CALL   1F18
.................... 
....................     if (!is_connect(smf)){
0AE4E:  MOVFF  F5,A29
0AE52:  MOVFF  F4,A28
0AE56:  MOVFF  F3,A27
0AE5A:  MOVFF  F2,A26
0AE5E:  CALL   2582
0AE62:  MOVF   01,F
0AE64:  BTFSS  FD8.2
0AE66:  GOTO   AE7E
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0AE6A:  MOVLW  14
0AE6C:  MOVWF  FF6
0AE6E:  MOVLW  0F
0AE70:  MOVWF  FF7
0AE72:  MOVLW  00
0AE74:  MOVWF  FF8
0AE76:  CALL   1EE8
....................         return;
0AE7A:  GOTO   B1B8
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_src < mis_start_address || erase_src >= mis_end_address) {
0AE7E:  MOVLB  1
0AE80:  MOVF   x84,W
0AE82:  SUBWF  x7C,W
0AE84:  BTFSC  FD8.0
0AE86:  BRA    AE8E
0AE88:  MOVLB  0
0AE8A:  GOTO   AED8
0AE8E:  MOVLB  0
0AE90:  BTFSS  FD8.2
0AE92:  GOTO   AF32
0AE96:  MOVLB  1
0AE98:  MOVF   x83,W
0AE9A:  SUBWF  x7B,W
0AE9C:  BTFSC  FD8.0
0AE9E:  BRA    AEA6
0AEA0:  MOVLB  0
0AEA2:  GOTO   AED8
0AEA6:  MOVLB  0
0AEA8:  BTFSS  FD8.2
0AEAA:  GOTO   AF32
0AEAE:  MOVLB  1
0AEB0:  MOVF   x82,W
0AEB2:  SUBWF  x7A,W
0AEB4:  BTFSC  FD8.0
0AEB6:  BRA    AEBE
0AEB8:  MOVLB  0
0AEBA:  GOTO   AED8
0AEBE:  MOVLB  0
0AEC0:  BTFSS  FD8.2
0AEC2:  GOTO   AF32
0AEC6:  MOVLB  1
0AEC8:  MOVF   x79,W
0AECA:  SUBWF  x81,W
0AECC:  BTFSC  FD8.0
0AECE:  BRA    AED6
0AED0:  MOVLB  0
0AED2:  GOTO   AF32
0AED6:  MOVLB  0
0AED8:  MOVLB  1
0AEDA:  MOVF   x80,W
0AEDC:  SUBWF  x84,W
0AEDE:  BTFSC  FD8.0
0AEE0:  BRA    AEE8
0AEE2:  MOVLB  0
0AEE4:  GOTO   B056
0AEE8:  MOVLB  0
0AEEA:  BTFSS  FD8.2
0AEEC:  GOTO   AF32
0AEF0:  MOVLB  1
0AEF2:  MOVF   x7F,W
0AEF4:  SUBWF  x83,W
0AEF6:  BTFSC  FD8.0
0AEF8:  BRA    AF00
0AEFA:  MOVLB  0
0AEFC:  GOTO   B056
0AF00:  MOVLB  0
0AF02:  BTFSS  FD8.2
0AF04:  GOTO   AF32
0AF08:  MOVLB  1
0AF0A:  MOVF   x7E,W
0AF0C:  SUBWF  x82,W
0AF0E:  BTFSC  FD8.0
0AF10:  BRA    AF18
0AF12:  MOVLB  0
0AF14:  GOTO   B056
0AF18:  MOVLB  0
0AF1A:  BTFSS  FD8.2
0AF1C:  GOTO   AF32
0AF20:  MOVLB  1
0AF22:  MOVF   x7D,W
0AF24:  SUBWF  x81,W
0AF26:  BTFSC  FD8.0
0AF28:  BRA    AF30
0AF2A:  MOVLB  0
0AF2C:  GOTO   B056
0AF30:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_src, mis_start_address, mis_end_address);
0AF32:  MOVLW  32
0AF34:  MOVWF  FF6
0AF36:  MOVLW  0F
0AF38:  MOVWF  FF7
0AF3A:  MOVLW  00
0AF3C:  MOVWF  FF8
0AF3E:  MOVLW  1E
0AF40:  MOVLB  9
0AF42:  MOVWF  x96
0AF44:  MOVLB  0
0AF46:  CALL   1F18
0AF4A:  MOVFF  184,996
0AF4E:  MOVLW  37
0AF50:  MOVLB  9
0AF52:  MOVWF  x97
0AF54:  MOVLB  0
0AF56:  CALL   2116
0AF5A:  MOVFF  183,996
0AF5E:  MOVLW  37
0AF60:  MOVLB  9
0AF62:  MOVWF  x97
0AF64:  MOVLB  0
0AF66:  CALL   2116
0AF6A:  MOVFF  182,996
0AF6E:  MOVLW  37
0AF70:  MOVLB  9
0AF72:  MOVWF  x97
0AF74:  MOVLB  0
0AF76:  CALL   2116
0AF7A:  MOVFF  181,996
0AF7E:  MOVLW  37
0AF80:  MOVLB  9
0AF82:  MOVWF  x97
0AF84:  MOVLB  0
0AF86:  CALL   2116
0AF8A:  MOVLW  53
0AF8C:  MOVWF  FF6
0AF8E:  MOVLW  0F
0AF90:  MOVWF  FF7
0AF92:  MOVLW  00
0AF94:  MOVWF  FF8
0AF96:  MOVLW  1D
0AF98:  MOVLB  9
0AF9A:  MOVWF  x96
0AF9C:  MOVLB  0
0AF9E:  CALL   1F18
0AFA2:  MOVFF  17C,996
0AFA6:  MOVLW  37
0AFA8:  MOVLB  9
0AFAA:  MOVWF  x97
0AFAC:  MOVLB  0
0AFAE:  CALL   2116
0AFB2:  MOVFF  17B,996
0AFB6:  MOVLW  37
0AFB8:  MOVLB  9
0AFBA:  MOVWF  x97
0AFBC:  MOVLB  0
0AFBE:  CALL   2116
0AFC2:  MOVFF  17A,996
0AFC6:  MOVLW  37
0AFC8:  MOVLB  9
0AFCA:  MOVWF  x97
0AFCC:  MOVLB  0
0AFCE:  CALL   2116
0AFD2:  MOVFF  179,996
0AFD6:  MOVLW  37
0AFD8:  MOVLB  9
0AFDA:  MOVWF  x97
0AFDC:  MOVLB  0
0AFDE:  CALL   2116
0AFE2:  MOVLW  73
0AFE4:  MOVWF  FF6
0AFE6:  MOVLW  0F
0AFE8:  MOVWF  FF7
0AFEA:  MOVLW  00
0AFEC:  MOVWF  FF8
0AFEE:  MOVLW  05
0AFF0:  MOVLB  9
0AFF2:  MOVWF  x96
0AFF4:  MOVLB  0
0AFF6:  CALL   1F18
0AFFA:  MOVFF  180,996
0AFFE:  MOVLW  37
0B000:  MOVLB  9
0B002:  MOVWF  x97
0B004:  MOVLB  0
0B006:  CALL   2116
0B00A:  MOVFF  17F,996
0B00E:  MOVLW  37
0B010:  MOVLB  9
0B012:  MOVWF  x97
0B014:  MOVLB  0
0B016:  CALL   2116
0B01A:  MOVFF  17E,996
0B01E:  MOVLW  37
0B020:  MOVLB  9
0B022:  MOVWF  x97
0B024:  MOVLB  0
0B026:  CALL   2116
0B02A:  MOVFF  17D,996
0B02E:  MOVLW  37
0B030:  MOVLB  9
0B032:  MOVWF  x97
0B034:  MOVLB  0
0B036:  CALL   2116
0B03A:  MOVLW  7B
0B03C:  MOVWF  FF6
0B03E:  MOVLW  0F
0B040:  MOVWF  FF7
0B042:  MOVLW  00
0B044:  MOVWF  FF8
0B046:  MOVLW  03
0B048:  MOVLB  9
0B04A:  MOVWF  x96
0B04C:  MOVLB  0
0B04E:  CALL   1F18
....................         return;
0B052:  GOTO   B1B8
....................     }
....................     
....................     if ((erase_src + erase_size) > mis_end_address) {
0B056:  MOVLB  1
0B058:  MOVF   x85,W
0B05A:  ADDWF  x81,W
0B05C:  MOVWF  x89
0B05E:  MOVF   x86,W
0B060:  ADDWFC x82,W
0B062:  MOVWF  x8A
0B064:  MOVF   x87,W
0B066:  ADDWFC x83,W
0B068:  MOVWF  x8B
0B06A:  MOVF   x88,W
0B06C:  ADDWFC x84,W
0B06E:  MOVWF  x8C
0B070:  MOVF   x80,W
0B072:  SUBWF  x8C,W
0B074:  BTFSC  FD8.0
0B076:  BRA    B07E
0B078:  MOVLB  0
0B07A:  GOTO   B164
0B07E:  MOVLB  0
0B080:  BTFSS  FD8.2
0B082:  GOTO   B0C8
0B086:  MOVLB  1
0B088:  MOVF   x7F,W
0B08A:  SUBWF  x8B,W
0B08C:  BTFSC  FD8.0
0B08E:  BRA    B096
0B090:  MOVLB  0
0B092:  GOTO   B164
0B096:  MOVLB  0
0B098:  BTFSS  FD8.2
0B09A:  GOTO   B0C8
0B09E:  MOVLB  1
0B0A0:  MOVF   x7E,W
0B0A2:  SUBWF  x8A,W
0B0A4:  BTFSC  FD8.0
0B0A6:  BRA    B0AE
0B0A8:  MOVLB  0
0B0AA:  GOTO   B164
0B0AE:  MOVLB  0
0B0B0:  BTFSS  FD8.2
0B0B2:  GOTO   B0C8
0B0B6:  MOVLB  1
0B0B8:  MOVF   x89,W
0B0BA:  SUBWF  x7D,W
0B0BC:  BTFSS  FD8.0
0B0BE:  BRA    B0C6
0B0C0:  MOVLB  0
0B0C2:  GOTO   B164
0B0C6:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mis_end_address);
0B0C8:  MOVLW  80
0B0CA:  MOVWF  FF6
0B0CC:  MOVLW  0F
0B0CE:  MOVWF  FF7
0B0D0:  MOVLW  00
0B0D2:  MOVWF  FF8
0B0D4:  MOVLW  3A
0B0D6:  MOVLB  9
0B0D8:  MOVWF  x96
0B0DA:  MOVLB  0
0B0DC:  CALL   1F18
0B0E0:  MOVFF  180,996
0B0E4:  MOVLW  37
0B0E6:  MOVLB  9
0B0E8:  MOVWF  x97
0B0EA:  MOVLB  0
0B0EC:  CALL   2116
0B0F0:  MOVFF  17F,996
0B0F4:  MOVLW  37
0B0F6:  MOVLB  9
0B0F8:  MOVWF  x97
0B0FA:  MOVLB  0
0B0FC:  CALL   2116
0B100:  MOVFF  17E,996
0B104:  MOVLW  37
0B106:  MOVLB  9
0B108:  MOVWF  x97
0B10A:  MOVLB  0
0B10C:  CALL   2116
0B110:  MOVFF  17D,996
0B114:  MOVLW  37
0B116:  MOVLB  9
0B118:  MOVWF  x97
0B11A:  MOVLB  0
0B11C:  CALL   2116
0B120:  MOVLW  0D
0B122:  MOVLB  A
0B124:  MOVWF  x29
0B126:  MOVLB  0
0B128:  CALL   1E96
0B12C:  MOVLW  0A
0B12E:  MOVLB  A
0B130:  MOVWF  x29
0B132:  MOVLB  0
0B134:  CALL   1E96
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
0B138:  MOVLW  C0
0B13A:  MOVWF  FF6
0B13C:  MOVLW  0F
0B13E:  MOVWF  FF7
0B140:  MOVLW  00
0B142:  MOVWF  FF8
0B144:  CALL   1EE8
....................         erase_size = mis_end_address - erase_src;
0B148:  MOVLB  1
0B14A:  MOVF   x81,W
0B14C:  SUBWF  x7D,W
0B14E:  MOVWF  x85
0B150:  MOVF   x82,W
0B152:  SUBWFB x7E,W
0B154:  MOVWF  x86
0B156:  MOVF   x83,W
0B158:  SUBWFB x7F,W
0B15A:  MOVWF  x87
0B15C:  MOVF   x84,W
0B15E:  SUBWFB x80,W
0B160:  MOVWF  x88
0B162:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0B164:  MOVLW  F4
0B166:  MOVWF  FF6
0B168:  MOVLW  0F
0B16A:  MOVWF  FF7
0B16C:  MOVLW  00
0B16E:  MOVWF  FF8
0B170:  CALL   1EE8
....................     subsector_4kByte_erase(smf, erase_src);
0B174:  MOVFF  F5,A29
0B178:  MOVFF  F4,A28
0B17C:  MOVFF  F3,A27
0B180:  MOVFF  F2,A26
0B184:  MOVFF  184,A2D
0B188:  MOVFF  183,A2C
0B18C:  MOVFF  182,A2B
0B190:  MOVFF  181,A2A
0B194:  CALL   37C0
....................     
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
0B198:  MOVLW  26
0B19A:  MOVWF  FF6
0B19C:  MOVLW  10
0B19E:  MOVWF  FF7
0B1A0:  MOVLW  00
0B1A2:  MOVWF  FF8
0B1A4:  CALL   1EE8
....................     fprintf(PC, "____________________\r\n\r\n");
0B1A8:  MOVLW  40
0B1AA:  MOVWF  FF6
0B1AC:  MOVLW  10
0B1AE:  MOVWF  FF7
0B1B0:  MOVLW  00
0B1B2:  MOVWF  FF8
0B1B4:  CALL   1EE8
0B1B8:  GOTO   B354 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.meas;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"              // ツールライブラリ
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0292E:  MOVLW  C6
02930:  MOVWF  FF6
02932:  MOVLW  10
02934:  MOVWF  FF7
02936:  MOVLW  00
02938:  MOVWF  FF8
0293A:  CALL   1EE8
.................... 
....................     output_high(MIS_FM_CS);
0293E:  BCF    F92.5
02940:  BSF    F89.5
....................     output_high(SMF_CS);
02942:  BCF    F92.2
02944:  BSF    F89.2
....................     delay_ms(100); 
02946:  MOVLW  64
02948:  MOVLB  A
0294A:  MOVWF  x3E
0294C:  MOVLB  0
0294E:  CALL   1E68
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
02952:  MOVLW  9F
02954:  MOVLB  1
02956:  MOVWF  xB7
....................     output_low(mis_fm.cs_pin);
02958:  MOVFF  F0,A44
0295C:  MOVLB  A
0295E:  CLRF   x45
02960:  MOVLW  0F
02962:  MOVWF  x47
02964:  MOVLW  89
02966:  MOVWF  x46
02968:  MOVLB  0
0296A:  CALL   227E
0296E:  MOVFF  F0,A44
02972:  MOVLB  A
02974:  CLRF   x45
02976:  MOVLW  0F
02978:  MOVWF  x47
0297A:  MOVLW  92
0297C:  MOVWF  x46
0297E:  MOVLB  0
02980:  CALL   227E
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02984:  MOVFF  F1,A47
02988:  MOVFF  F0,A46
0298C:  MOVFF  EF,A45
02990:  MOVFF  EE,A44
02994:  MOVLW  01
02996:  MOVLB  A
02998:  MOVWF  x49
0299A:  MOVLW  B7
0299C:  MOVWF  x48
0299E:  CLRF   x4B
029A0:  MOVLW  01
029A2:  MOVWF  x4A
029A4:  MOVLW  01
029A6:  MOVWF  x4D
029A8:  MOVLW  A3
029AA:  MOVWF  x4C
029AC:  CLRF   x51
029AE:  CLRF   x50
029B0:  CLRF   x4F
029B2:  MOVLW  14
029B4:  MOVWF  x4E
029B6:  MOVLB  0
029B8:  CALL   234E
....................     output_high(mis_fm.cs_pin);
029BC:  MOVFF  F0,A44
029C0:  MOVLW  01
029C2:  MOVLB  A
029C4:  MOVWF  x45
029C6:  MOVLW  0F
029C8:  MOVWF  x47
029CA:  MOVLW  89
029CC:  MOVWF  x46
029CE:  MOVLB  0
029D0:  CALL   227E
029D4:  MOVFF  F0,A44
029D8:  MOVLB  A
029DA:  CLRF   x45
029DC:  MOVLW  0F
029DE:  MOVWF  x47
029E0:  MOVLW  92
029E2:  MOVWF  x46
029E4:  MOVLB  0
029E6:  CALL   227E
....................     fprintf(PC, "\t[MIS FM]READ ID:");
029EA:  MOVLW  E2
029EC:  MOVWF  FF6
029EE:  MOVLW  10
029F0:  MOVWF  FF7
029F2:  MOVLW  00
029F4:  MOVWF  FF8
029F6:  CALL   1EE8
....................     for (unsigned int8 index = 0; index < 4; index++)
029FA:  MOVLB  1
029FC:  CLRF   xB8
029FE:  MOVLB  0
02A00:  MOVLB  1
02A02:  MOVF   xB8,W
02A04:  SUBLW  03
02A06:  BTFSC  FD8.0
02A08:  BRA    2A10
02A0A:  MOVLB  0
02A0C:  GOTO   2A4C
02A10:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02A12:  CLRF   03
02A14:  MOVLB  1
02A16:  MOVF   xB8,W
02A18:  ADDLW  A3
02A1A:  MOVWF  FE9
02A1C:  MOVLW  01
02A1E:  ADDWFC 03,W
02A20:  MOVWF  FEA
02A22:  MOVFF  FEF,1FA
02A26:  MOVFF  1FA,996
02A2A:  MOVLW  37
02A2C:  MOVLB  9
02A2E:  MOVWF  x97
02A30:  MOVLB  0
02A32:  CALL   2116
02A36:  MOVLW  20
02A38:  MOVLB  A
02A3A:  MOVWF  x29
02A3C:  MOVLB  0
02A3E:  CALL   1E96
02A42:  MOVLB  1
02A44:  INCF   xB8,F
02A46:  MOVLB  0
02A48:  GOTO   2A00
....................     }
....................     fprintf(PC,"\r\n");
02A4C:  MOVLW  0D
02A4E:  MOVLB  A
02A50:  MOVWF  x29
02A52:  MOVLB  0
02A54:  CALL   1E96
02A58:  MOVLW  0A
02A5A:  MOVLB  A
02A5C:  MOVWF  x29
02A5E:  MOVLB  0
02A60:  CALL   1E96
.................... 
....................     output_low(smf.cs_pin);
02A64:  MOVFF  F4,A44
02A68:  MOVLB  A
02A6A:  CLRF   x45
02A6C:  MOVLW  0F
02A6E:  MOVWF  x47
02A70:  MOVLW  89
02A72:  MOVWF  x46
02A74:  MOVLB  0
02A76:  CALL   227E
02A7A:  MOVFF  F4,A44
02A7E:  MOVLB  A
02A80:  CLRF   x45
02A82:  MOVLW  0F
02A84:  MOVWF  x47
02A86:  MOVLW  92
02A88:  MOVWF  x46
02A8A:  MOVLB  0
02A8C:  CALL   227E
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02A90:  MOVFF  F5,A47
02A94:  MOVFF  F4,A46
02A98:  MOVFF  F3,A45
02A9C:  MOVFF  F2,A44
02AA0:  MOVLW  01
02AA2:  MOVLB  A
02AA4:  MOVWF  x49
02AA6:  MOVLW  B7
02AA8:  MOVWF  x48
02AAA:  CLRF   x4B
02AAC:  MOVLW  01
02AAE:  MOVWF  x4A
02AB0:  MOVLW  01
02AB2:  MOVWF  x4D
02AB4:  MOVLW  A3
02AB6:  MOVWF  x4C
02AB8:  CLRF   x51
02ABA:  CLRF   x50
02ABC:  CLRF   x4F
02ABE:  MOVLW  14
02AC0:  MOVWF  x4E
02AC2:  MOVLB  0
02AC4:  CALL   234E
....................     output_high(smf.cs_pin);
02AC8:  MOVFF  F4,A44
02ACC:  MOVLW  01
02ACE:  MOVLB  A
02AD0:  MOVWF  x45
02AD2:  MOVLW  0F
02AD4:  MOVWF  x47
02AD6:  MOVLW  89
02AD8:  MOVWF  x46
02ADA:  MOVLB  0
02ADC:  CALL   227E
02AE0:  MOVFF  F4,A44
02AE4:  MOVLB  A
02AE6:  CLRF   x45
02AE8:  MOVLW  0F
02AEA:  MOVWF  x47
02AEC:  MOVLW  92
02AEE:  MOVWF  x46
02AF0:  MOVLB  0
02AF2:  CALL   227E
....................     fprintf(PC, "\t[SMF]\tREAD ID:");
02AF6:  MOVLW  F4
02AF8:  MOVWF  FF6
02AFA:  MOVLW  10
02AFC:  MOVWF  FF7
02AFE:  MOVLW  00
02B00:  MOVWF  FF8
02B02:  CALL   1EE8
....................     for (unsigned int8 index = 0; index < 4; index++)
02B06:  MOVLB  1
02B08:  CLRF   xB9
02B0A:  MOVLB  0
02B0C:  MOVLB  1
02B0E:  MOVF   xB9,W
02B10:  SUBLW  03
02B12:  BTFSC  FD8.0
02B14:  BRA    2B1C
02B16:  MOVLB  0
02B18:  GOTO   2B58
02B1C:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02B1E:  CLRF   03
02B20:  MOVLB  1
02B22:  MOVF   xB9,W
02B24:  ADDLW  A3
02B26:  MOVWF  FE9
02B28:  MOVLW  01
02B2A:  ADDWFC 03,W
02B2C:  MOVWF  FEA
02B2E:  MOVFF  FEF,1FA
02B32:  MOVFF  1FA,996
02B36:  MOVLW  37
02B38:  MOVLB  9
02B3A:  MOVWF  x97
02B3C:  MOVLB  0
02B3E:  CALL   2116
02B42:  MOVLW  20
02B44:  MOVLB  A
02B46:  MOVWF  x29
02B48:  MOVLB  0
02B4A:  CALL   1E96
02B4E:  MOVLB  1
02B50:  INCF   xB9,F
02B52:  MOVLB  0
02B54:  GOTO   2B0C
....................     }
....................     fprintf(PC,"\r\n");
02B58:  MOVLW  0D
02B5A:  MOVLB  A
02B5C:  MOVWF  x29
02B5E:  MOVLB  0
02B60:  CALL   1E96
02B64:  MOVLW  0A
02B66:  MOVLB  A
02B68:  MOVWF  x29
02B6A:  MOVLB  0
02B6C:  CALL   1E96
.................... 
....................     if (!is_connect(smf)) {
02B70:  MOVFF  F5,A29
02B74:  MOVFF  F4,A28
02B78:  MOVFF  F3,A27
02B7C:  MOVFF  F2,A26
02B80:  CALL   2582
02B84:  MOVF   01,F
02B86:  BTFSS  FD8.2
02B88:  GOTO   2BA0
....................         fprintf(PC, "\t[SMF]\tconnect error!\r\n");
02B8C:  MOVLW  04
02B8E:  MOVWF  FF6
02B90:  MOVLW  11
02B92:  MOVWF  FF7
02B94:  MOVLW  00
02B96:  MOVWF  FF8
02B98:  CALL   1EE8
....................         // return;
....................     }else {
02B9C:  GOTO   2BB0
....................         fprintf(PC, "\t[SMF]\tis connected\r\n");
02BA0:  MOVLW  1C
02BA2:  MOVWF  FF6
02BA4:  MOVLW  11
02BA6:  MOVWF  FF7
02BA8:  MOVLW  00
02BAA:  MOVWF  FF8
02BAC:  CALL   1EE8
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
02BB0:  MOVLW  64
02BB2:  MOVLB  A
02BB4:  MOVWF  x3E
02BB6:  MOVLB  0
02BB8:  CALL   1E68
....................     if (!is_connect(mis_fm)) {
02BBC:  MOVFF  F1,A29
02BC0:  MOVFF  F0,A28
02BC4:  MOVFF  EF,A27
02BC8:  MOVFF  EE,A26
02BCC:  CALL   2582
02BD0:  MOVF   01,F
02BD2:  BTFSS  FD8.2
02BD4:  GOTO   2BEC
....................         fprintf(PC, "\t[MIS FM]connect error!\r\n");
02BD8:  MOVLW  32
02BDA:  MOVWF  FF6
02BDC:  MOVLW  11
02BDE:  MOVWF  FF7
02BE0:  MOVLW  00
02BE2:  MOVWF  FF8
02BE4:  CALL   1EE8
....................     }else {
02BE8:  GOTO   2BFC
....................         fprintf(PC, "\t[MIS FM]is connected\r\n");
02BEC:  MOVLW  4C
02BEE:  MOVWF  FF6
02BF0:  MOVLW  11
02BF2:  MOVWF  FF7
02BF4:  MOVLW  00
02BF6:  MOVWF  FF8
02BF8:  CALL   1EE8
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
02BFC:  MOVFF  F1,281
02C00:  MOVFF  F0,280
02C04:  MOVFF  EF,27F
02C08:  MOVFF  EE,27E
02C0C:  MOVLB  2
02C0E:  CLRF   x85
02C10:  CLRF   x84
02C12:  CLRF   x83
02C14:  CLRF   x82
02C16:  MOVLW  01
02C18:  MOVWF  x87
02C1A:  MOVLW  BA
02C1C:  MOVWF  x86
02C1E:  CLRF   x8B
02C20:  CLRF   x8A
02C22:  CLRF   x89
02C24:  MOVLW  40
02C26:  MOVWF  x88
02C28:  MOVLB  0
02C2A:  CALL   2648
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = msb_array_to_int32(readdata, 0);
02C2E:  MOVLW  01
02C30:  MOVLB  1
02C32:  MOVWF  xFB
02C34:  MOVLW  BA
02C36:  MOVWF  xFA
02C38:  CLRF   xFC
02C3A:  MOVLB  0
02C3C:  CALL   2860
02C40:  MOVFF  03,FF
02C44:  MOVFF  02,FE
02C48:  MOVFF  01,FD
02C4C:  MOVFF  00,FC
....................     smf_piclog_loop_counter = readdata[4];
02C50:  MOVFF  1BE,100
....................     smf_meas_use_counter = msb_array_to_int32(readdata, 5);
02C54:  MOVLW  01
02C56:  MOVLB  1
02C58:  MOVWF  xFB
02C5A:  MOVLW  BA
02C5C:  MOVWF  xFA
02C5E:  MOVLW  05
02C60:  MOVWF  xFC
02C62:  MOVLB  0
02C64:  CALL   2860
02C68:  MOVFF  03,104
02C6C:  MOVFF  02,103
02C70:  MOVFF  01,102
02C74:  MOVFF  00,101
....................     smf_meas_loop_counter = readdata[9];
02C78:  MOVFF  1C3,105
....................     misf_piclog_use_counter = msb_array_to_int32(readdata, 10);
02C7C:  MOVLW  01
02C7E:  MOVLB  1
02C80:  MOVWF  xFB
02C82:  MOVLW  BA
02C84:  MOVWF  xFA
02C86:  MOVLW  0A
02C88:  MOVWF  xFC
02C8A:  MOVLB  0
02C8C:  CALL   2860
02C90:  MOVFF  03,109
02C94:  MOVFF  02,108
02C98:  MOVFF  01,107
02C9C:  MOVFF  00,106
....................     misf_piclog_loop_counter = readdata[14];
02CA0:  MOVFF  1C8,10A
....................     misf_piclog_uncopyed_counter = msb_array_to_int32(readdata, 15);
02CA4:  MOVLW  01
02CA6:  MOVLB  1
02CA8:  MOVWF  xFB
02CAA:  MOVLW  BA
02CAC:  MOVWF  xFA
02CAE:  MOVLW  0F
02CB0:  MOVWF  xFC
02CB2:  MOVLB  0
02CB4:  CALL   2860
02CB8:  MOVFF  03,10E
02CBC:  MOVFF  02,10D
02CC0:  MOVFF  01,10C
02CC4:  MOVFF  00,10B
....................     misf_piclog_write_counter = msb_array_to_int32(readdata, 19);
02CC8:  MOVLW  01
02CCA:  MOVLB  1
02CCC:  MOVWF  xFB
02CCE:  MOVLW  BA
02CD0:  MOVWF  xFA
02CD2:  MOVLW  13
02CD4:  MOVWF  xFC
02CD6:  MOVLB  0
02CD8:  CALL   2860
02CDC:  MOVFF  00,10F
....................     misf_meas_use_counter = msb_array_to_int32(readdata, 23);
02CE0:  MOVLW  01
02CE2:  MOVLB  1
02CE4:  MOVWF  xFB
02CE6:  MOVLW  BA
02CE8:  MOVWF  xFA
02CEA:  MOVLW  17
02CEC:  MOVWF  xFC
02CEE:  MOVLB  0
02CF0:  CALL   2860
02CF4:  MOVFF  03,113
02CF8:  MOVFF  02,112
02CFC:  MOVFF  01,111
02D00:  MOVFF  00,110
....................     misf_meas_loop_counter = readdata[27];
02D04:  MOVFF  1D5,114
....................     misf_meas_uncopyed_counter = msb_array_to_int32(readdata, 28);
02D08:  MOVLW  01
02D0A:  MOVLB  1
02D0C:  MOVWF  xFB
02D0E:  MOVLW  BA
02D10:  MOVWF  xFA
02D12:  MOVLW  1C
02D14:  MOVWF  xFC
02D16:  MOVLB  0
02D18:  CALL   2860
02D1C:  MOVFF  03,118
02D20:  MOVFF  02,117
02D24:  MOVFF  01,116
02D28:  MOVFF  00,115
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02D2C:  MOVLW  64
02D2E:  MOVWF  FF6
02D30:  MOVLW  11
02D32:  MOVWF  FF7
02D34:  MOVLW  00
02D36:  MOVWF  FF8
02D38:  MOVLW  28
02D3A:  MOVLB  9
02D3C:  MOVWF  x96
02D3E:  MOVLB  0
02D40:  CALL   1F18
02D44:  MOVFF  FF,996
02D48:  MOVLW  37
02D4A:  MOVLB  9
02D4C:  MOVWF  x97
02D4E:  MOVLB  0
02D50:  CALL   2116
02D54:  MOVFF  FE,996
02D58:  MOVLW  37
02D5A:  MOVLB  9
02D5C:  MOVWF  x97
02D5E:  MOVLB  0
02D60:  CALL   2116
02D64:  MOVFF  FD,996
02D68:  MOVLW  37
02D6A:  MOVLB  9
02D6C:  MOVWF  x97
02D6E:  MOVLB  0
02D70:  CALL   2116
02D74:  MOVFF  FC,996
02D78:  MOVLW  37
02D7A:  MOVLB  9
02D7C:  MOVWF  x97
02D7E:  MOVLB  0
02D80:  CALL   2116
02D84:  MOVLW  0D
02D86:  MOVLB  A
02D88:  MOVWF  x29
02D8A:  MOVLB  0
02D8C:  CALL   1E96
02D90:  MOVLW  0A
02D92:  MOVLB  A
02D94:  MOVWF  x29
02D96:  MOVLB  0
02D98:  CALL   1E96
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02D9C:  MOVLW  94
02D9E:  MOVWF  FF6
02DA0:  MOVLW  11
02DA2:  MOVWF  FF7
02DA4:  MOVLW  00
02DA6:  MOVWF  FF8
02DA8:  MOVLW  28
02DAA:  MOVLB  9
02DAC:  MOVWF  x96
02DAE:  MOVLB  0
02DB0:  CALL   1F18
02DB4:  MOVFF  100,996
02DB8:  MOVLW  37
02DBA:  MOVLB  9
02DBC:  MOVWF  x97
02DBE:  MOVLB  0
02DC0:  CALL   2116
02DC4:  MOVLW  0D
02DC6:  MOVLB  A
02DC8:  MOVWF  x29
02DCA:  MOVLB  0
02DCC:  CALL   1E96
02DD0:  MOVLW  0A
02DD2:  MOVLB  A
02DD4:  MOVWF  x29
02DD6:  MOVLB  0
02DD8:  CALL   1E96
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02DDC:  MOVLW  C4
02DDE:  MOVWF  FF6
02DE0:  MOVLW  11
02DE2:  MOVWF  FF7
02DE4:  MOVLW  00
02DE6:  MOVWF  FF8
02DE8:  MOVLW  28
02DEA:  MOVLB  9
02DEC:  MOVWF  x96
02DEE:  MOVLB  0
02DF0:  CALL   1F18
02DF4:  MOVFF  104,996
02DF8:  MOVLW  37
02DFA:  MOVLB  9
02DFC:  MOVWF  x97
02DFE:  MOVLB  0
02E00:  CALL   2116
02E04:  MOVFF  103,996
02E08:  MOVLW  37
02E0A:  MOVLB  9
02E0C:  MOVWF  x97
02E0E:  MOVLB  0
02E10:  CALL   2116
02E14:  MOVFF  102,996
02E18:  MOVLW  37
02E1A:  MOVLB  9
02E1C:  MOVWF  x97
02E1E:  MOVLB  0
02E20:  CALL   2116
02E24:  MOVFF  101,996
02E28:  MOVLW  37
02E2A:  MOVLB  9
02E2C:  MOVWF  x97
02E2E:  MOVLB  0
02E30:  CALL   2116
02E34:  MOVLW  0D
02E36:  MOVLB  A
02E38:  MOVWF  x29
02E3A:  MOVLB  0
02E3C:  CALL   1E96
02E40:  MOVLW  0A
02E42:  MOVLB  A
02E44:  MOVWF  x29
02E46:  MOVLB  0
02E48:  CALL   1E96
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02E4C:  MOVLW  F4
02E4E:  MOVWF  FF6
02E50:  MOVLW  11
02E52:  MOVWF  FF7
02E54:  MOVLW  00
02E56:  MOVWF  FF8
02E58:  MOVLW  28
02E5A:  MOVLB  9
02E5C:  MOVWF  x96
02E5E:  MOVLB  0
02E60:  CALL   1F18
02E64:  MOVFF  105,996
02E68:  MOVLW  37
02E6A:  MOVLB  9
02E6C:  MOVWF  x97
02E6E:  MOVLB  0
02E70:  CALL   2116
02E74:  MOVLW  0D
02E76:  MOVLB  A
02E78:  MOVWF  x29
02E7A:  MOVLB  0
02E7C:  CALL   1E96
02E80:  MOVLW  0A
02E82:  MOVLB  A
02E84:  MOVWF  x29
02E86:  MOVLB  0
02E88:  CALL   1E96
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02E8C:  MOVLW  24
02E8E:  MOVWF  FF6
02E90:  MOVLW  12
02E92:  MOVWF  FF7
02E94:  MOVLW  00
02E96:  MOVWF  FF8
02E98:  MOVLW  28
02E9A:  MOVLB  9
02E9C:  MOVWF  x96
02E9E:  MOVLB  0
02EA0:  CALL   1F18
02EA4:  MOVFF  109,996
02EA8:  MOVLW  37
02EAA:  MOVLB  9
02EAC:  MOVWF  x97
02EAE:  MOVLB  0
02EB0:  CALL   2116
02EB4:  MOVFF  108,996
02EB8:  MOVLW  37
02EBA:  MOVLB  9
02EBC:  MOVWF  x97
02EBE:  MOVLB  0
02EC0:  CALL   2116
02EC4:  MOVFF  107,996
02EC8:  MOVLW  37
02ECA:  MOVLB  9
02ECC:  MOVWF  x97
02ECE:  MOVLB  0
02ED0:  CALL   2116
02ED4:  MOVFF  106,996
02ED8:  MOVLW  37
02EDA:  MOVLB  9
02EDC:  MOVWF  x97
02EDE:  MOVLB  0
02EE0:  CALL   2116
02EE4:  MOVLW  0D
02EE6:  MOVLB  A
02EE8:  MOVWF  x29
02EEA:  MOVLB  0
02EEC:  CALL   1E96
02EF0:  MOVLW  0A
02EF2:  MOVLB  A
02EF4:  MOVWF  x29
02EF6:  MOVLB  0
02EF8:  CALL   1E96
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02EFC:  MOVLW  54
02EFE:  MOVWF  FF6
02F00:  MOVLW  12
02F02:  MOVWF  FF7
02F04:  MOVLW  00
02F06:  MOVWF  FF8
02F08:  MOVLW  28
02F0A:  MOVLB  9
02F0C:  MOVWF  x96
02F0E:  MOVLB  0
02F10:  CALL   1F18
02F14:  MOVFF  10E,996
02F18:  MOVLW  37
02F1A:  MOVLB  9
02F1C:  MOVWF  x97
02F1E:  MOVLB  0
02F20:  CALL   2116
02F24:  MOVFF  10D,996
02F28:  MOVLW  37
02F2A:  MOVLB  9
02F2C:  MOVWF  x97
02F2E:  MOVLB  0
02F30:  CALL   2116
02F34:  MOVFF  10C,996
02F38:  MOVLW  37
02F3A:  MOVLB  9
02F3C:  MOVWF  x97
02F3E:  MOVLB  0
02F40:  CALL   2116
02F44:  MOVFF  10B,996
02F48:  MOVLW  37
02F4A:  MOVLB  9
02F4C:  MOVWF  x97
02F4E:  MOVLB  0
02F50:  CALL   2116
02F54:  MOVLW  0D
02F56:  MOVLB  A
02F58:  MOVWF  x29
02F5A:  MOVLB  0
02F5C:  CALL   1E96
02F60:  MOVLW  0A
02F62:  MOVLB  A
02F64:  MOVWF  x29
02F66:  MOVLB  0
02F68:  CALL   1E96
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02F6C:  MOVLW  84
02F6E:  MOVWF  FF6
02F70:  MOVLW  12
02F72:  MOVWF  FF7
02F74:  MOVLW  00
02F76:  MOVWF  FF8
02F78:  MOVLW  28
02F7A:  MOVLB  9
02F7C:  MOVWF  x96
02F7E:  MOVLB  0
02F80:  CALL   1F18
02F84:  MOVFF  10A,996
02F88:  MOVLW  37
02F8A:  MOVLB  9
02F8C:  MOVWF  x97
02F8E:  MOVLB  0
02F90:  CALL   2116
02F94:  MOVLW  0D
02F96:  MOVLB  A
02F98:  MOVWF  x29
02F9A:  MOVLB  0
02F9C:  CALL   1E96
02FA0:  MOVLW  0A
02FA2:  MOVLB  A
02FA4:  MOVWF  x29
02FA6:  MOVLB  0
02FA8:  CALL   1E96
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02FAC:  MOVLW  B4
02FAE:  MOVWF  FF6
02FB0:  MOVLW  12
02FB2:  MOVWF  FF7
02FB4:  MOVLW  00
02FB6:  MOVWF  FF8
02FB8:  MOVLW  28
02FBA:  MOVLB  9
02FBC:  MOVWF  x96
02FBE:  MOVLB  0
02FC0:  CALL   1F18
02FC4:  MOVFF  10F,996
02FC8:  MOVLW  37
02FCA:  MOVLB  9
02FCC:  MOVWF  x97
02FCE:  MOVLB  0
02FD0:  CALL   2116
02FD4:  MOVLW  0D
02FD6:  MOVLB  A
02FD8:  MOVWF  x29
02FDA:  MOVLB  0
02FDC:  CALL   1E96
02FE0:  MOVLW  0A
02FE2:  MOVLB  A
02FE4:  MOVWF  x29
02FE6:  MOVLB  0
02FE8:  CALL   1E96
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02FEC:  MOVLW  E4
02FEE:  MOVWF  FF6
02FF0:  MOVLW  12
02FF2:  MOVWF  FF7
02FF4:  MOVLW  00
02FF6:  MOVWF  FF8
02FF8:  MOVLW  28
02FFA:  MOVLB  9
02FFC:  MOVWF  x96
02FFE:  MOVLB  0
03000:  CALL   1F18
03004:  MOVFF  113,996
03008:  MOVLW  37
0300A:  MOVLB  9
0300C:  MOVWF  x97
0300E:  MOVLB  0
03010:  CALL   2116
03014:  MOVFF  112,996
03018:  MOVLW  37
0301A:  MOVLB  9
0301C:  MOVWF  x97
0301E:  MOVLB  0
03020:  CALL   2116
03024:  MOVFF  111,996
03028:  MOVLW  37
0302A:  MOVLB  9
0302C:  MOVWF  x97
0302E:  MOVLB  0
03030:  CALL   2116
03034:  MOVFF  110,996
03038:  MOVLW  37
0303A:  MOVLB  9
0303C:  MOVWF  x97
0303E:  MOVLB  0
03040:  CALL   2116
03044:  MOVLW  0D
03046:  MOVLB  A
03048:  MOVWF  x29
0304A:  MOVLB  0
0304C:  CALL   1E96
03050:  MOVLW  0A
03052:  MOVLB  A
03054:  MOVWF  x29
03056:  MOVLB  0
03058:  CALL   1E96
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
0305C:  MOVLW  14
0305E:  MOVWF  FF6
03060:  MOVLW  13
03062:  MOVWF  FF7
03064:  MOVLW  00
03066:  MOVWF  FF8
03068:  MOVLW  28
0306A:  MOVLB  9
0306C:  MOVWF  x96
0306E:  MOVLB  0
03070:  CALL   1F18
03074:  MOVFF  118,996
03078:  MOVLW  37
0307A:  MOVLB  9
0307C:  MOVWF  x97
0307E:  MOVLB  0
03080:  CALL   2116
03084:  MOVFF  117,996
03088:  MOVLW  37
0308A:  MOVLB  9
0308C:  MOVWF  x97
0308E:  MOVLB  0
03090:  CALL   2116
03094:  MOVFF  116,996
03098:  MOVLW  37
0309A:  MOVLB  9
0309C:  MOVWF  x97
0309E:  MOVLB  0
030A0:  CALL   2116
030A4:  MOVFF  115,996
030A8:  MOVLW  37
030AA:  MOVLB  9
030AC:  MOVWF  x97
030AE:  MOVLB  0
030B0:  CALL   2116
030B4:  MOVLW  0D
030B6:  MOVLB  A
030B8:  MOVWF  x29
030BA:  MOVLB  0
030BC:  CALL   1E96
030C0:  MOVLW  0A
030C2:  MOVLB  A
030C4:  MOVWF  x29
030C6:  MOVLB  0
030C8:  CALL   1E96
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
030CC:  MOVLW  44
030CE:  MOVWF  FF6
030D0:  MOVLW  13
030D2:  MOVWF  FF7
030D4:  MOVLW  00
030D6:  MOVWF  FF8
030D8:  MOVLW  28
030DA:  MOVLB  9
030DC:  MOVWF  x96
030DE:  MOVLB  0
030E0:  CALL   1F18
030E4:  MOVFF  114,996
030E8:  MOVLW  37
030EA:  MOVLB  9
030EC:  MOVWF  x97
030EE:  MOVLB  0
030F0:  CALL   2116
030F4:  MOVLW  0D
030F6:  MOVLB  A
030F8:  MOVWF  x29
030FA:  MOVLB  0
030FC:  CALL   1E96
03100:  MOVLW  0A
03102:  MOVLB  A
03104:  MOVWF  x29
03106:  MOVLB  0
03108:  CALL   1E96
....................     fprintf(PC, "\tComplete\r\n");
0310C:  MOVLW  74
0310E:  MOVWF  FF6
03110:  MOVLW  13
03112:  MOVWF  FF7
03114:  MOVLW  00
03116:  MOVWF  FF8
03118:  CALL   1EE8
0311C:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
05ECC:  GOTO   6052 (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
03B18:  MOVFF  F1,A29
03B1C:  MOVFF  F0,A28
03B20:  MOVFF  EF,A27
03B24:  MOVFF  EE,A26
03B28:  CALL   2582
03B2C:  MOVF   01,F
03B2E:  BTFSS  FD8.2
03B30:  GOTO   3B48
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03B34:  MOVLW  80
03B36:  MOVWF  FF6
03B38:  MOVLW  13
03B3A:  MOVWF  FF7
03B3C:  MOVLW  00
03B3E:  MOVWF  FF8
03B40:  CALL   1EE8
....................         return;
03B44:  GOTO   3DF6
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
03B48:  MOVLB  9
03B4A:  CLRF   xE6
03B4C:  CLRF   xE7
03B4E:  CLRF   xE8
03B50:  CLRF   xE9
03B52:  CLRF   xEA
03B54:  CLRF   xEB
03B56:  CLRF   xEC
03B58:  CLRF   xED
03B5A:  CLRF   xEE
03B5C:  CLRF   xEF
03B5E:  CLRF   xF0
03B60:  CLRF   xF1
03B62:  CLRF   xF2
03B64:  CLRF   xF3
03B66:  CLRF   xF4
03B68:  CLRF   xF5
03B6A:  CLRF   xF6
03B6C:  CLRF   xF7
03B6E:  CLRF   xF8
03B70:  CLRF   xF9
03B72:  CLRF   xFA
03B74:  CLRF   xFB
03B76:  CLRF   xFC
03B78:  CLRF   xFD
03B7A:  CLRF   xFE
03B7C:  CLRF   xFF
03B7E:  MOVLB  A
03B80:  CLRF   x00
03B82:  CLRF   x01
03B84:  CLRF   x02
03B86:  CLRF   x03
03B88:  CLRF   x04
03B8A:  CLRF   x05
03B8C:  CLRF   x06
03B8E:  CLRF   x07
03B90:  CLRF   x08
03B92:  CLRF   x09
03B94:  CLRF   x0A
03B96:  CLRF   x0B
03B98:  CLRF   x0C
03B9A:  CLRF   x0D
03B9C:  CLRF   x0E
03B9E:  CLRF   x0F
03BA0:  CLRF   x10
03BA2:  CLRF   x11
03BA4:  CLRF   x12
03BA6:  CLRF   x13
03BA8:  CLRF   x14
03BAA:  CLRF   x15
03BAC:  CLRF   x16
03BAE:  CLRF   x17
03BB0:  CLRF   x18
03BB2:  CLRF   x19
03BB4:  CLRF   x1A
03BB6:  CLRF   x1B
03BB8:  CLRF   x1C
03BBA:  CLRF   x1D
03BBC:  CLRF   x1E
03BBE:  CLRF   x1F
03BC0:  CLRF   x20
03BC2:  CLRF   x21
03BC4:  CLRF   x22
03BC6:  CLRF   x23
03BC8:  CLRF   x24
03BCA:  CLRF   x25
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
03BCC:  MOVFF  FF,A27
03BD0:  CLRF   x28
03BD2:  CLRF   x29
03BD4:  CLRF   x2A
03BD6:  MOVF   x27,W
03BD8:  MOVLB  9
03BDA:  MOVWF  xE6
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
03BDC:  MOVFF  FE,A27
03BE0:  MOVFF  FF,A28
03BE4:  MOVLB  A
03BE6:  CLRF   x29
03BE8:  CLRF   x2A
03BEA:  MOVF   x27,W
03BEC:  MOVLB  9
03BEE:  MOVWF  xE7
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03BF0:  MOVFF  FD,A27
03BF4:  MOVFF  FE,A28
03BF8:  MOVFF  FF,A29
03BFC:  MOVLB  A
03BFE:  CLRF   x2A
03C00:  MOVF   x27,W
03C02:  MOVLB  9
03C04:  MOVWF  xE8
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
03C06:  MOVLB  0
03C08:  MOVF   xFC,W
03C0A:  MOVLB  9
03C0C:  MOVWF  xE9
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
03C0E:  MOVFF  100,9EA
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
03C12:  MOVFF  104,A27
03C16:  MOVLB  A
03C18:  CLRF   x28
03C1A:  CLRF   x29
03C1C:  CLRF   x2A
03C1E:  MOVF   x27,W
03C20:  MOVLB  9
03C22:  MOVWF  xEB
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
03C24:  MOVFF  103,A27
03C28:  MOVFF  104,A28
03C2C:  MOVLB  A
03C2E:  CLRF   x29
03C30:  CLRF   x2A
03C32:  MOVF   x27,W
03C34:  MOVLB  9
03C36:  MOVWF  xEC
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
03C38:  MOVFF  102,A27
03C3C:  MOVFF  103,A28
03C40:  MOVFF  104,A29
03C44:  MOVLB  A
03C46:  CLRF   x2A
03C48:  MOVF   x27,W
03C4A:  MOVLB  9
03C4C:  MOVWF  xED
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03C4E:  MOVLB  1
03C50:  MOVF   x01,W
03C52:  MOVLB  9
03C54:  MOVWF  xEE
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
03C56:  MOVFF  105,9EF
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
03C5A:  MOVFF  109,A27
03C5E:  MOVLB  A
03C60:  CLRF   x28
03C62:  CLRF   x29
03C64:  CLRF   x2A
03C66:  MOVF   x27,W
03C68:  MOVLB  9
03C6A:  MOVWF  xF0
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03C6C:  MOVFF  108,A27
03C70:  MOVFF  109,A28
03C74:  MOVLB  A
03C76:  CLRF   x29
03C78:  CLRF   x2A
03C7A:  MOVF   x27,W
03C7C:  MOVLB  9
03C7E:  MOVWF  xF1
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03C80:  MOVFF  107,A27
03C84:  MOVFF  108,A28
03C88:  MOVFF  109,A29
03C8C:  MOVLB  A
03C8E:  CLRF   x2A
03C90:  MOVF   x27,W
03C92:  MOVLB  9
03C94:  MOVWF  xF2
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
03C96:  MOVLB  1
03C98:  MOVF   x06,W
03C9A:  MOVLB  9
03C9C:  MOVWF  xF3
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03C9E:  MOVFF  10A,9F4
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03CA2:  MOVFF  10E,A27
03CA6:  MOVLB  A
03CA8:  CLRF   x28
03CAA:  CLRF   x29
03CAC:  CLRF   x2A
03CAE:  MOVF   x27,W
03CB0:  MOVLB  9
03CB2:  MOVWF  xF5
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03CB4:  MOVFF  10D,A27
03CB8:  MOVFF  10E,A28
03CBC:  MOVLB  A
03CBE:  CLRF   x29
03CC0:  CLRF   x2A
03CC2:  MOVF   x27,W
03CC4:  MOVLB  9
03CC6:  MOVWF  xF6
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
03CC8:  MOVFF  10C,A27
03CCC:  MOVFF  10D,A28
03CD0:  MOVFF  10E,A29
03CD4:  MOVLB  A
03CD6:  CLRF   x2A
03CD8:  MOVF   x27,W
03CDA:  MOVLB  9
03CDC:  MOVWF  xF7
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03CDE:  MOVLB  1
03CE0:  MOVF   x0B,W
03CE2:  MOVLB  9
03CE4:  MOVWF  xF8
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
03CE6:  MOVLW  00
03CE8:  MOVWF  xF9
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
03CEA:  MOVLW  00
03CEC:  MOVWF  xFA
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03CEE:  MOVLW  00
03CF0:  MOVWF  xFB
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03CF2:  MOVLB  1
03CF4:  MOVF   x0F,W
03CF6:  MOVLB  9
03CF8:  MOVWF  xFC
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03CFA:  MOVFF  113,A27
03CFE:  MOVLB  A
03D00:  CLRF   x28
03D02:  CLRF   x29
03D04:  CLRF   x2A
03D06:  MOVF   x27,W
03D08:  MOVLB  9
03D0A:  MOVWF  xFD
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
03D0C:  MOVFF  112,A27
03D10:  MOVFF  113,A28
03D14:  MOVLB  A
03D16:  CLRF   x29
03D18:  CLRF   x2A
03D1A:  MOVF   x27,W
03D1C:  MOVLB  9
03D1E:  MOVWF  xFE
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03D20:  MOVFF  111,A27
03D24:  MOVFF  112,A28
03D28:  MOVFF  113,A29
03D2C:  MOVLB  A
03D2E:  CLRF   x2A
03D30:  MOVF   x27,W
03D32:  MOVLB  9
03D34:  MOVWF  xFF
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03D36:  MOVLB  1
03D38:  MOVF   x10,W
03D3A:  MOVLB  A
03D3C:  MOVWF  x00
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03D3E:  MOVFF  114,A01
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03D42:  MOVFF  118,A27
03D46:  CLRF   x28
03D48:  CLRF   x29
03D4A:  CLRF   x2A
03D4C:  MOVF   x27,W
03D4E:  MOVWF  x02
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03D50:  MOVFF  117,A27
03D54:  MOVFF  118,A28
03D58:  CLRF   x29
03D5A:  CLRF   x2A
03D5C:  MOVF   x27,W
03D5E:  MOVWF  x03
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03D60:  MOVFF  116,A27
03D64:  MOVFF  117,A28
03D68:  MOVFF  118,A29
03D6C:  CLRF   x2A
03D6E:  MOVF   x27,W
03D70:  MOVWF  x04
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03D72:  MOVLB  1
03D74:  MOVF   x15,W
03D76:  MOVLB  A
03D78:  MOVWF  x05
.................... 
....................     if (!is_connect(mis_fm)) {
03D7A:  MOVFF  F1,A29
03D7E:  MOVFF  F0,A28
03D82:  MOVFF  EF,A27
03D86:  MOVFF  EE,A26
03D8A:  MOVLB  0
03D8C:  CALL   2582
03D90:  MOVF   01,F
03D92:  BTFSS  FD8.2
03D94:  GOTO   3DA8
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03D98:  MOVLW  A2
03D9A:  MOVWF  FF6
03D9C:  MOVLW  13
03D9E:  MOVWF  FF7
03DA0:  MOVLW  00
03DA2:  MOVWF  FF8
03DA4:  CALL   1EE8
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03DA8:  MOVFF  F1,A29
03DAC:  MOVFF  F0,A28
03DB0:  MOVFF  EF,A27
03DB4:  MOVFF  EE,A26
03DB8:  MOVLB  A
03DBA:  CLRF   x2D
03DBC:  CLRF   x2C
03DBE:  CLRF   x2B
03DC0:  CLRF   x2A
03DC2:  MOVLB  0
03DC4:  CALL   37C0
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03DC8:  MOVFF  F1,A29
03DCC:  MOVFF  F0,A28
03DD0:  MOVFF  EF,A27
03DD4:  MOVFF  EE,A26
03DD8:  MOVLB  A
03DDA:  CLRF   x2D
03DDC:  CLRF   x2C
03DDE:  CLRF   x2B
03DE0:  CLRF   x2A
03DE2:  MOVLW  09
03DE4:  MOVWF  x2F
03DE6:  MOVLW  E6
03DE8:  MOVWF  x2E
03DEA:  CLRF   x31
03DEC:  MOVLW  40
03DEE:  MOVWF  x30
03DF0:  MOVLB  0
03DF2:  CALL   343C
03DF6:  RETURN 0
....................     //fprintf(PC, "Write MISF Address Area Complete\r\n");
.................... 
.................... }
.................... 
.................... void add_smf_queue(unsigned int8 mission_id)
.................... {
....................     SmfDataStruct data;
....................     SmfMissionStruct mis_struct = getMissionTypeStruct(mission_id);
....................     data.func_type = SMF_WRITE;
....................     data.mission_id = mission_id;
....................     data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................     data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
.................... 
....................     enqueue_smf_data(&data);
.................... }
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     #define MIS_FM_STREAM SMF_STREAM 
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
08D3C:  MOVLB  1
08D3E:  MOVF   x5C,W
08D40:  MOVWF  FE9
08D42:  MOVF   x5D,W
08D44:  MOVWF  FEA
08D46:  MOVFF  FEF,15E
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
08D4A:  MOVLW  C4
08D4C:  MOVWF  FF6
08D4E:  MOVLW  13
08D50:  MOVWF  FF7
08D52:  MOVLW  00
08D54:  MOVWF  FF8
08D56:  MOVLB  0
08D58:  CALL   1EE8
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
08D5C:  MOVLW  0A
08D5E:  MOVWF  FF6
08D60:  MOVLW  14
08D62:  MOVWF  FF7
08D64:  MOVLW  00
08D66:  MOVWF  FF8
08D68:  MOVLW  0C
08D6A:  MOVLB  9
08D6C:  MOVWF  x96
08D6E:  MOVLB  0
08D70:  CALL   1F18
08D74:  MOVFF  15E,996
08D78:  MOVLW  37
08D7A:  MOVLB  9
08D7C:  MOVWF  x97
08D7E:  MOVLB  0
08D80:  CALL   2116
08D84:  MOVLW  18
08D86:  MOVWF  FF6
08D88:  MOVLW  14
08D8A:  MOVWF  FF7
08D8C:  MOVLW  00
08D8E:  MOVWF  FF8
08D90:  MOVLW  04
08D92:  MOVLB  9
08D94:  MOVWF  x96
08D96:  MOVLB  0
08D98:  CALL   1F18
....................    switch(command_id)
08D9C:  MOVLB  1
08D9E:  MOVF   x5E,W
08DA0:  XORLW  10
08DA2:  MOVLB  0
08DA4:  BTFSC  FD8.2
08DA6:  GOTO   8E56
08DAA:  XORLW  01
08DAC:  BTFSC  FD8.2
08DAE:  GOTO   8E5A
08DB2:  XORLW  03
08DB4:  BTFSC  FD8.2
08DB6:  GOTO   8E5E
08DBA:  XORLW  13
08DBC:  BTFSC  FD8.2
08DBE:  GOTO   8E62
08DC2:  XORLW  12
08DC4:  BTFSC  FD8.2
08DC6:  GOTO   8E66
08DCA:  XORLW  93
08DCC:  BTFSC  FD8.2
08DCE:  GOTO   8E6A
08DD2:  XORLW  01
08DD4:  BTFSC  FD8.2
08DD6:  GOTO   8E7A
08DDA:  XORLW  03
08DDC:  BTFSC  FD8.2
08DDE:  GOTO   8E8A
08DE2:  XORLW  01
08DE4:  BTFSC  FD8.2
08DE6:  GOTO   8E9A
08DEA:  XORLW  07
08DEC:  BTFSC  FD8.2
08DEE:  GOTO   8EAA
08DF2:  XORLW  01
08DF4:  BTFSC  FD8.2
08DF6:  GOTO   8EBA
08DFA:  XORLW  03
08DFC:  BTFSC  FD8.2
08DFE:  GOTO   8ECA
08E02:  XORLW  01
08E04:  BTFSC  FD8.2
08E06:  GOTO   8EDA
08E0A:  XORLW  0F
08E0C:  BTFSC  FD8.2
08E0E:  GOTO   8EEA
08E12:  XORLW  18
08E14:  BTFSC  FD8.2
08E16:  GOTO   8EFA
08E1A:  XORLW  01
08E1C:  BTFSC  FD8.2
08E1E:  GOTO   8F0A
08E22:  XORLW  03
08E24:  BTFSC  FD8.2
08E26:  GOTO   8F1A
08E2A:  XORLW  01
08E2C:  BTFSC  FD8.2
08E2E:  GOTO   8F2A
08E32:  XORLW  07
08E34:  BTFSC  FD8.2
08E36:  GOTO   8F3A
08E3A:  XORLW  01
08E3C:  BTFSC  FD8.2
08E3E:  GOTO   8F4A
08E42:  XORLW  03
08E44:  BTFSC  FD8.2
08E46:  GOTO   8F5A
08E4A:  XORLW  36
08E4C:  BTFSC  FD8.2
08E4E:  GOTO   8F6A
08E52:  GOTO   8F7A
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
08E56:  GOTO   8F8A
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
08E5A:  GOTO   8F8A
....................       case 0x12:
....................          // test_adc();
....................          break;
08E5E:  GOTO   8F8A
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
08E62:  GOTO   8F8A
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
08E66:  GOTO   8F8A
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
08E6A:  MOVFF  15D,162
08E6E:  MOVFF  15C,161
08E72:  CALL   49EC
....................          break;
08E76:  GOTO   8F8A
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
08E7A:  MOVFF  15D,160
08E7E:  MOVFF  15C,15F
08E82:  GOTO   4AB4
....................          break;
08E86:  GOTO   8F8A
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
08E8A:  MOVFF  15D,160
08E8E:  MOVFF  15C,15F
08E92:  GOTO   4C4E
....................          break;
08E96:  GOTO   8F8A
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
08E9A:  MOVFF  15D,160
08E9E:  MOVFF  15C,15F
08EA2:  GOTO   4DE4
....................          break;
08EA6:  GOTO   8F8A
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
08EAA:  MOVFF  15D,160
08EAE:  MOVFF  15C,15F
08EB2:  GOTO   4F5A
....................          break;
08EB6:  GOTO   8F8A
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
08EBA:  MOVFF  15D,160
08EBE:  MOVFF  15C,15F
08EC2:  GOTO   535A
....................          break;
08EC6:  GOTO   8F8A
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
08ECA:  MOVFF  15D,160
08ECE:  MOVFF  15C,15F
08ED2:  GOTO   5618
....................          break;
08ED6:  GOTO   8F8A
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
08EDA:  MOVFF  15D,160
08EDE:  MOVFF  15C,15F
08EE2:  GOTO   5AA2
....................          break;
08EE6:  GOTO   8F8A
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
08EEA:  MOVFF  15D,160
08EEE:  MOVFF  15C,15F
08EF2:  GOTO   5CC6
....................          break;
08EF6:  GOTO   8F8A
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
08EFA:  MOVFF  15D,160
08EFE:  MOVFF  15C,15F
08F02:  GOTO   5D20
....................          break;
08F06:  GOTO   8F8A
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
08F0A:  MOVFF  15D,160
08F0E:  MOVFF  15C,15F
08F12:  GOTO   5DF0
....................          break;
08F16:  GOTO   8F8A
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
08F1A:  MOVFF  15D,160
08F1E:  MOVFF  15C,15F
08F22:  GOTO   5E64
....................          break;
08F26:  GOTO   8F8A
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
08F2A:  MOVFF  15D,160
08F2E:  MOVFF  15C,15F
08F32:  CALL   5ED0
....................          break;
08F36:  GOTO   8F8A
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
08F3A:  MOVFF  15D,160
08F3E:  MOVFF  15C,15F
08F42:  GOTO   6082
....................          break;
08F46:  GOTO   8F8A
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
08F4A:  MOVFF  15D,160
08F4E:  MOVFF  15C,15F
08F52:  GOTO   646C
....................          break;
08F56:  GOTO   8F8A
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
08F5A:  MOVFF  15D,160
08F5E:  MOVFF  15C,15F
08F62:  CALL   5ED0
....................          break;
08F66:  GOTO   8F8A
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
08F6A:  MOVFF  15D,160
08F6E:  MOVFF  15C,15F
08F72:  GOTO   8958
....................          break;
08F76:  GOTO   8F8A
....................             
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
08F7A:  MOVLW  1E
08F7C:  MOVWF  FF6
08F7E:  MOVLW  14
08F80:  MOVWF  FF7
08F82:  MOVLW  00
08F84:  MOVWF  FF8
08F86:  CALL   1EE8
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
08F8A:  MOVLW  36
08F8C:  MOVWF  FF6
08F8E:  MOVLW  14
08F90:  MOVWF  FF7
08F92:  MOVLW  00
08F94:  MOVWF  FF8
08F96:  CALL   1EE8
08F9A:  GOTO   9000 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0B3F4:  MOVLW  7C
0B3F6:  MOVWF  FF6
0B3F8:  MOVLW  14
0B3FA:  MOVWF  FF7
0B3FC:  MOVLW  00
0B3FE:  MOVWF  FF8
0B400:  CALL   1EE8
....................    
....................    switch(command->frame_id)
0B404:  MOVLB  1
0B406:  MOVF   x56,W
0B408:  MOVWF  FE9
0B40A:  MOVF   x57,W
0B40C:  MOVWF  FEA
0B40E:  MOVF   FEF,W
0B410:  XORLW  00
0B412:  MOVLB  0
0B414:  BTFSC  FD8.2
0B416:  GOTO   B42E
0B41A:  XORLW  01
0B41C:  BTFSC  FD8.2
0B41E:  GOTO   B43E
0B422:  XORLW  03
0B424:  BTFSC  FD8.2
0B426:  GOTO   B45E
0B42A:  GOTO   B46E
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0B42E:  MOVFF  157,159
0B432:  MOVFF  156,158
0B436:  GOTO   8FB4
....................          break;
0B43A:  GOTO   B46E
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0B43E:  MOVFF  157,159
0B442:  MOVFF  156,158
0B446:  GOTO   9036
0B44A:  MOVF   01,F
0B44C:  BTFSC  FD8.2
0B44E:  GOTO   B45A
....................             return TRUE; // if status is finished, return TRUE
0B452:  MOVLW  01
0B454:  MOVWF  01
0B456:  GOTO   B472
....................          }        
....................          break;
0B45A:  GOTO   B46E
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0B45E:  MOVFF  157,159
0B462:  MOVFF  156,158
0B466:  GOTO   B1BC
....................          break;
0B46A:  GOTO   B46E
....................    }
....................    return FALSE;
0B46E:  MOVLW  00
0B470:  MOVWF  01
0B472:  GOTO   B8A2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
08FB4:  MOVLW  94
08FB6:  MOVWF  FF6
08FB8:  MOVLW  14
08FBA:  MOVWF  FF7
08FBC:  MOVLW  00
08FBE:  MOVWF  FF8
08FC0:  CALL   1EE8
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
08FC4:  MOVLW  AA
08FC6:  MOVWF  FF6
08FC8:  MOVLW  14
08FCA:  MOVWF  FF7
08FCC:  MOVLW  00
08FCE:  MOVWF  FF8
08FD0:  CALL   1EE8
....................    transmit_ack();
08FD4:  CALL   467C
.................... 
....................    status[0] = EXECUTING_MISSION;
08FD8:  MOVLW  02
08FDA:  MOVWF  48
....................    execute_mission(command->content);
08FDC:  MOVLW  03
08FDE:  MOVLB  1
08FE0:  ADDWF  x58,W
08FE2:  MOVWF  01
08FE4:  MOVLW  00
08FE6:  ADDWFC x59,W
08FE8:  MOVWF  03
08FEA:  MOVF   01,W
08FEC:  MOVWF  x5A
08FEE:  MOVFF  03,15B
08FF2:  MOVFF  15B,15D
08FF6:  MOVFF  15A,15C
08FFA:  MOVLB  0
08FFC:  GOTO   8D3C
....................    if (is_empty_smf_data())
09000:  CALL   8F9E
09004:  MOVF   01,F
09006:  BTFSC  FD8.2
09008:  GOTO   9014
....................       status[0] = FINISHED;
0900C:  MOVLW  06
0900E:  MOVWF  48
09010:  GOTO   9018
....................    else
....................       status[0] = SMF_USE_REQ;
09014:  MOVLW  04
09016:  MOVWF  48
09018:  GOTO   B43A (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
09036:  MOVLW  C4
09038:  MOVWF  FF6
0903A:  MOVLW  14
0903C:  MOVWF  FF7
0903E:  MOVLW  00
09040:  MOVWF  FF8
09042:  CALL   1EE8
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
09046:  MOVLW  D8
09048:  MOVWF  FF6
0904A:  MOVLW  14
0904C:  MOVWF  FF7
0904E:  MOVLW  00
09050:  MOVWF  FF8
09052:  CALL   1EE8
....................    transmit_status();
09056:  GOTO   901C
....................    if (status[0] == FINISHED)
0905A:  MOVF   48,W
0905C:  SUBLW  06
0905E:  BTFSS  FD8.2
09060:  GOTO   9080
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
09064:  MOVLW  F6
09066:  MOVWF  FF6
09068:  MOVLW  14
0906A:  MOVWF  FF7
0906C:  MOVLW  00
0906E:  MOVWF  FF8
09070:  CALL   1EE8
....................       return TRUE;
09074:  MOVLW  01
09076:  MOVWF  01
09078:  GOTO   9088
....................    }
0907C:  GOTO   9088
....................    else{
....................       return FALSE;
09080:  MOVLW  00
09082:  MOVWF  01
09084:  GOTO   9088
....................    }
09088:  GOTO   B44A (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................    fprintf(PC, "\t-> SMF available check\r\n");
*
0B1BC:  MOVLW  12
0B1BE:  MOVWF  FF6
0B1C0:  MOVLW  15
0B1C2:  MOVWF  FF7
0B1C4:  MOVLW  00
0B1C6:  MOVWF  FF8
0B1C8:  CALL   1EE8
....................    fprintf(PC, "\t   Transmit Acknowledgement\r\n");
0B1CC:  MOVLW  2C
0B1CE:  MOVWF  FF6
0B1D0:  MOVLW  15
0B1D2:  MOVWF  FF7
0B1D4:  MOVLW  00
0B1D6:  MOVWF  FF8
0B1D8:  CALL   1EE8
....................    transmit_ack();
0B1DC:  CALL   467C
....................    
....................    if (command->content[0] == ALLOW) {
0B1E0:  MOVLW  03
0B1E2:  MOVLB  1
0B1E4:  ADDWF  x58,W
0B1E6:  MOVWF  FE9
0B1E8:  MOVLW  00
0B1EA:  ADDWFC x59,W
0B1EC:  MOVWF  FEA
0B1EE:  DECFSZ FEF,W
0B1F0:  BRA    B1F6
0B1F2:  BRA    B1FC
0B1F4:  MOVLB  0
0B1F6:  MOVLB  0
0B1F8:  GOTO   B3E0
0B1FC:  MOVLB  0
....................       fprintf(PC, "\t\t-> allowed\r\n");
0B1FE:  MOVLW  4C
0B200:  MOVWF  FF6
0B202:  MOVLW  15
0B204:  MOVWF  FF7
0B206:  MOVLW  00
0B208:  MOVWF  FF8
0B20A:  CALL   1EE8
....................       status[0] = COPYING;
0B20E:  MOVLW  05
0B210:  MOVWF  48
.................... 
....................       // キューが空になるまでループ処理
....................       int8 processed_count = 0;
0B212:  MOVLB  1
0B214:  CLRF   x5A
0B216:  MOVLB  0
....................       while (!is_empty_smf_data()) {
0B218:  CALL   8F9E
0B21C:  MOVF   01,F
0B21E:  BTFSS  FD8.2
0B220:  GOTO   B398
....................          fprintf(PC, "\t\t-> Processing SMF data [%d]\r\n", processed_count);
0B224:  MOVLW  5C
0B226:  MOVWF  FF6
0B228:  MOVLW  15
0B22A:  MOVWF  FF7
0B22C:  MOVLW  00
0B22E:  MOVWF  FF8
0B230:  MOVLW  1A
0B232:  MOVLB  9
0B234:  MOVWF  x96
0B236:  MOVLB  0
0B238:  CALL   1F18
0B23C:  MOVFF  15A,27F
0B240:  MOVLW  18
0B242:  MOVLB  2
0B244:  MOVWF  x80
0B246:  MOVLB  0
0B248:  CALL   908C
0B24C:  MOVLW  78
0B24E:  MOVWF  FF6
0B250:  MOVLW  15
0B252:  MOVWF  FF7
0B254:  MOVLW  00
0B256:  MOVWF  FF8
0B258:  MOVLW  03
0B25A:  MOVLB  9
0B25C:  MOVWF  x96
0B25E:  MOVLB  0
0B260:  CALL   1F18
....................          
....................          SmfDataStruct *smf_data = dequeue_smf_data();
0B264:  GOTO   919A
0B268:  MOVFF  02,15C
0B26C:  MOVFF  01,15B
....................          if (smf_data != 0x00) {
0B270:  MOVLB  1
0B272:  MOVF   x5B,F
0B274:  BTFSC  FD8.2
0B276:  BRA    B27E
0B278:  MOVLB  0
0B27A:  GOTO   B290
0B27E:  MOVLB  0
0B280:  MOVLB  1
0B282:  MOVF   x5C,F
0B284:  BTFSS  FD8.2
0B286:  BRA    B28E
0B288:  MOVLB  0
0B28A:  GOTO   B380
0B28E:  MOVLB  0
....................             int8 func_type = smf_data->func_type;
0B290:  MOVLW  09
0B292:  MOVLB  1
0B294:  ADDWF  x5B,W
0B296:  MOVWF  FE9
0B298:  MOVLW  00
0B29A:  ADDWFC x5C,W
0B29C:  MOVWF  FEA
0B29E:  MOVFF  FEF,15D
0B2A2:  MOVLB  0
....................             fprintf(PC, "func type : 0x%02X",func_type);
0B2A4:  MOVLW  7C
0B2A6:  MOVWF  FF6
0B2A8:  MOVLW  15
0B2AA:  MOVWF  FF7
0B2AC:  MOVLW  00
0B2AE:  MOVWF  FF8
0B2B0:  MOVLW  0E
0B2B2:  MOVLB  9
0B2B4:  MOVWF  x96
0B2B6:  MOVLB  0
0B2B8:  CALL   1F18
0B2BC:  MOVFF  15D,996
0B2C0:  MOVLW  37
0B2C2:  MOVLB  9
0B2C4:  MOVWF  x97
0B2C6:  MOVLB  0
0B2C8:  CALL   2116
....................             if (func_type == 0x00) {  // SMF_WRITE
0B2CC:  MOVLB  1
0B2CE:  MOVF   x5D,F
0B2D0:  BTFSC  FD8.2
0B2D2:  BRA    B2DA
0B2D4:  MOVLB  0
0B2D6:  GOTO   B2F8
0B2DA:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF WRITE (single)\r\n");
0B2DC:  MOVLW  90
0B2DE:  MOVWF  FF6
0B2E0:  MOVLW  15
0B2E2:  MOVWF  FF7
0B2E4:  MOVLW  00
0B2E6:  MOVWF  FF8
0B2E8:  CALL   1EE8
....................                smf_write(smf_data);
0B2EC:  MOVFF  15C,148
0B2F0:  MOVFF  15B,147
0B2F4:  GOTO   9D70
....................             }
....................             if (func_type == 0x01) {  // SMF_READ
0B2F8:  MOVLB  1
0B2FA:  DECFSZ x5D,W
0B2FC:  BRA    B302
0B2FE:  BRA    B308
0B300:  MOVLB  0
0B302:  MOVLB  0
0B304:  GOTO   B326
0B308:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF READ (single)\r\n");
0B30A:  MOVLW  B4
0B30C:  MOVWF  FF6
0B30E:  MOVLW  15
0B310:  MOVWF  FF7
0B312:  MOVLW  00
0B314:  MOVWF  FF8
0B316:  CALL   1EE8
....................                smf_read(smf_data);
0B31A:  MOVFF  15C,15F
0B31E:  MOVFF  15B,15E
0B322:  GOTO   A7F6
....................             }
.................... 
....................             if (func_type == 0x02) {  // SMF_ERASE
0B326:  MOVLB  1
0B328:  MOVF   x5D,W
0B32A:  SUBLW  02
0B32C:  BTFSC  FD8.2
0B32E:  BRA    B336
0B330:  MOVLB  0
0B332:  GOTO   B354
0B336:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF ERASE (single)\r\n");
0B338:  MOVLW  D8
0B33A:  MOVWF  FF6
0B33C:  MOVLW  15
0B33E:  MOVWF  FF7
0B340:  MOVLW  00
0B342:  MOVWF  FF8
0B344:  CALL   1EE8
....................                smf_erase(smf_data);
0B348:  MOVFF  15C,15F
0B34C:  MOVFF  15B,15E
0B350:  GOTO   AB92
....................             }
....................             if (func_type > 2) {
0B354:  MOVLB  1
0B356:  MOVF   x5D,W
0B358:  SUBLW  02
0B35A:  BTFSS  FD8.0
0B35C:  BRA    B364
0B35E:  MOVLB  0
0B360:  GOTO   B376
0B364:  MOVLB  0
....................                fprintf(PC, "\t\t-> Unknown SMF function type\r\n");
0B366:  MOVLW  FC
0B368:  MOVWF  FF6
0B36A:  MOVLW  15
0B36C:  MOVWF  FF7
0B36E:  MOVLW  00
0B370:  MOVWF  FF8
0B372:  CALL   1EE8
....................             }
....................             processed_count++;
0B376:  MOVLB  1
0B378:  INCF   x5A,F
0B37A:  MOVLB  0
....................          } else {
0B37C:  GOTO   B394
....................             fprintf(PC, "\t\t-> Error: Failed to dequeue SMF data\r\n");
0B380:  MOVLW  1E
0B382:  MOVWF  FF6
0B384:  MOVLW  16
0B386:  MOVWF  FF7
0B388:  MOVLW  00
0B38A:  MOVWF  FF8
0B38C:  CALL   1EE8
....................             break;
0B390:  GOTO   B398
....................          }
0B394:  GOTO   B218
....................       }
....................       
....................       fprintf(PC, "\t\t-> Completed processing %d SMF operations\r\n", processed_count);
0B398:  MOVLW  48
0B39A:  MOVWF  FF6
0B39C:  MOVLW  16
0B39E:  MOVWF  FF7
0B3A0:  MOVLW  00
0B3A2:  MOVWF  FF8
0B3A4:  MOVLW  1A
0B3A6:  MOVLB  9
0B3A8:  MOVWF  x96
0B3AA:  MOVLB  0
0B3AC:  CALL   1F18
0B3B0:  MOVFF  15A,27F
0B3B4:  MOVLW  18
0B3B6:  MOVLB  2
0B3B8:  MOVWF  x80
0B3BA:  MOVLB  0
0B3BC:  CALL   908C
0B3C0:  MOVLW  64
0B3C2:  MOVWF  FF6
0B3C4:  MOVLW  16
0B3C6:  MOVWF  FF7
0B3C8:  MOVLW  00
0B3CA:  MOVWF  FF8
0B3CC:  MOVLW  11
0B3CE:  MOVLB  9
0B3D0:  MOVWF  x96
0B3D2:  MOVLB  0
0B3D4:  CALL   1F18
....................       status[0] = FINISHED;
0B3D8:  MOVLW  06
0B3DA:  MOVWF  48
....................    } else {
0B3DC:  GOTO   B3F0
....................       fprintf(PC, "\t\t-> denied\r\n");
0B3E0:  MOVLW  76
0B3E2:  MOVWF  FF6
0B3E4:  MOVLW  16
0B3E6:  MOVWF  FF7
0B3E8:  MOVLW  00
0B3EA:  MOVWF  FF8
0B3EC:  CALL   1EE8
....................    }
0B3F0:  GOTO   B46A (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End MODE DUMMY\r\n");
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
....................    output_low(EN_NPWR); // Enable NPWR
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
....................    output_low(CONNECT_CIGS1);
....................    output_high(EN_NPWR); // Disable NPWR
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... /*
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... */
.................... 
.................... /*
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... */
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
....................    SmfDataStruct data;
....................    //data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
08958:  MOVLW  28
0895A:  MOVWF  FF6
0895C:  MOVLW  17
0895E:  MOVWF  FF7
08960:  MOVLW  00
08962:  MOVWF  FF8
08964:  CALL   1EE8
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd); // Create the measurement command structure
08968:  MOVFF  160,182
0896C:  MOVFF  15F,181
08970:  GOTO   6536
08974:  MOVFF  02,03
08978:  MOVF   01,W
0897A:  MOVWF  FE1
0897C:  MOVFF  03,FE2
08980:  MOVLW  01
08982:  MOVWF  FEA
08984:  MOVLW  61
08986:  MOVWF  FE9
08988:  MOVLW  0C
0898A:  MOVWF  01
0898C:  MOVFF  FE6,FEE
08990:  DECFSZ 01,F
08992:  GOTO   898C
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
08996:  MOVLW  3E
08998:  MOVWF  FF6
0899A:  MOVLW  17
0899C:  MOVWF  FF7
0899E:  MOVLW  00
089A0:  MOVWF  FF8
089A2:  MOVLW  05
089A4:  MOVLB  9
089A6:  MOVWF  x96
089A8:  MOVLB  0
089AA:  CALL   1F18
089AE:  MOVFF  161,996
089B2:  MOVLW  37
089B4:  MOVLB  9
089B6:  MOVWF  x97
089B8:  MOVLB  0
089BA:  CALL   2116
089BE:  MOVLW  0D
089C0:  MOVLB  A
089C2:  MOVWF  x29
089C4:  MOVLB  0
089C6:  CALL   1E96
089CA:  MOVLW  0A
089CC:  MOVLB  A
089CE:  MOVWF  x29
089D0:  MOVLB  0
089D2:  CALL   1E96
....................    fprintf(PC, "\tSleep Time: %04LX ms\r\n", cmd.sleep_time);
089D6:  MOVLW  4A
089D8:  MOVWF  FF6
089DA:  MOVLW  17
089DC:  MOVWF  FF7
089DE:  MOVLW  00
089E0:  MOVWF  FF8
089E2:  MOVLW  0D
089E4:  MOVLB  9
089E6:  MOVWF  x96
089E8:  MOVLB  0
089EA:  CALL   1F18
089EE:  MOVFF  163,996
089F2:  MOVLW  37
089F4:  MOVLB  9
089F6:  MOVWF  x97
089F8:  MOVLB  0
089FA:  CALL   2116
089FE:  MOVFF  162,996
08A02:  MOVLW  37
08A04:  MOVLB  9
08A06:  MOVWF  x97
08A08:  MOVLB  0
08A0A:  CALL   2116
08A0E:  MOVLW  5C
08A10:  MOVWF  FF6
08A12:  MOVLW  17
08A14:  MOVWF  FF7
08A16:  MOVLW  00
08A18:  MOVWF  FF8
08A1A:  MOVLW  05
08A1C:  MOVLB  9
08A1E:  MOVWF  x96
08A20:  MOVLB  0
08A22:  CALL   1F18
....................    fprintf(PC, "\tCurrent Threshold: %04LX mA\r\n", cmd.curr_threshold);
08A26:  MOVLW  62
08A28:  MOVWF  FF6
08A2A:  MOVLW  17
08A2C:  MOVWF  FF7
08A2E:  MOVLW  00
08A30:  MOVWF  FF8
08A32:  MOVLW  14
08A34:  MOVLB  9
08A36:  MOVWF  x96
08A38:  MOVLB  0
08A3A:  CALL   1F18
08A3E:  MOVFF  165,996
08A42:  MOVLW  37
08A44:  MOVLB  9
08A46:  MOVWF  x97
08A48:  MOVLB  0
08A4A:  CALL   2116
08A4E:  MOVFF  164,996
08A52:  MOVLW  37
08A54:  MOVLB  9
08A56:  MOVWF  x97
08A58:  MOVLB  0
08A5A:  CALL   2116
08A5E:  MOVLW  7B
08A60:  MOVWF  FF6
08A62:  MOVLW  17
08A64:  MOVWF  FF7
08A66:  MOVLW  00
08A68:  MOVWF  FF8
08A6A:  MOVLW  05
08A6C:  MOVLB  9
08A6E:  MOVWF  x96
08A70:  MOVLB  0
08A72:  CALL   1F18
....................    fprintf(PC, "\tPD Threshold: %04LX mA\r\n", cmd.pd_threshold);
08A76:  MOVLW  82
08A78:  MOVWF  FF6
08A7A:  MOVLW  17
08A7C:  MOVWF  FF7
08A7E:  MOVLW  00
08A80:  MOVWF  FF8
08A82:  MOVLW  0F
08A84:  MOVLB  9
08A86:  MOVWF  x96
08A88:  MOVLB  0
08A8A:  CALL   1F18
08A8E:  MOVFF  167,996
08A92:  MOVLW  37
08A94:  MOVLB  9
08A96:  MOVWF  x97
08A98:  MOVLB  0
08A9A:  CALL   2116
08A9E:  MOVFF  166,996
08AA2:  MOVLW  37
08AA4:  MOVLB  9
08AA6:  MOVWF  x97
08AA8:  MOVLB  0
08AAA:  CALL   2116
08AAE:  MOVLW  96
08AB0:  MOVWF  FF6
08AB2:  MOVLW  17
08AB4:  MOVWF  FF7
08AB6:  MOVLW  00
08AB8:  MOVWF  FF8
08ABA:  MOVLW  05
08ABC:  MOVLB  9
08ABE:  MOVWF  x96
08AC0:  MOVLB  0
08AC2:  CALL   1F18
....................    fprintf(PC, "\tCurrent Limit: %04LX mA\r\n", cmd.curr_limit);
08AC6:  MOVLW  9C
08AC8:  MOVWF  FF6
08ACA:  MOVLW  17
08ACC:  MOVWF  FF7
08ACE:  MOVLW  00
08AD0:  MOVWF  FF8
08AD2:  MOVLW  10
08AD4:  MOVLB  9
08AD6:  MOVWF  x96
08AD8:  MOVLB  0
08ADA:  CALL   1F18
08ADE:  MOVFF  169,996
08AE2:  MOVLW  37
08AE4:  MOVLB  9
08AE6:  MOVWF  x97
08AE8:  MOVLB  0
08AEA:  CALL   2116
08AEE:  MOVFF  168,996
08AF2:  MOVLW  37
08AF4:  MOVLB  9
08AF6:  MOVWF  x97
08AF8:  MOVLB  0
08AFA:  CALL   2116
08AFE:  MOVLW  B1
08B00:  MOVWF  FF6
08B02:  MOVLW  17
08B04:  MOVWF  FF7
08B06:  MOVLW  00
08B08:  MOVWF  FF8
08B0A:  MOVLW  05
08B0C:  MOVLB  9
08B0E:  MOVWF  x96
08B10:  MOVLB  0
08B12:  CALL   1F18
....................    fprintf(PC, "\tMeasurement Time: %04LX s\r\n", cmd.meas_time);
08B16:  MOVLW  B8
08B18:  MOVWF  FF6
08B1A:  MOVLW  17
08B1C:  MOVWF  FF7
08B1E:  MOVLW  00
08B20:  MOVWF  FF8
08B22:  MOVLW  13
08B24:  MOVLB  9
08B26:  MOVWF  x96
08B28:  MOVLB  0
08B2A:  CALL   1F18
08B2E:  MOVFF  16B,996
08B32:  MOVLW  37
08B34:  MOVLB  9
08B36:  MOVWF  x97
08B38:  MOVLB  0
08B3A:  CALL   2116
08B3E:  MOVFF  16A,996
08B42:  MOVLW  37
08B44:  MOVLB  9
08B46:  MOVWF  x97
08B48:  MOVLB  0
08B4A:  CALL   2116
08B4E:  MOVLW  D0
08B50:  MOVWF  FF6
08B52:  MOVLW  17
08B54:  MOVWF  FF7
08B56:  MOVLW  00
08B58:  MOVWF  FF8
08B5A:  MOVLW  04
08B5C:  MOVLB  9
08B5E:  MOVWF  x96
08B60:  MOVLB  0
08B62:  CALL   1F18
....................    fprintf(PC, "\tIs Finished: %u\r\n", cmd.is_finished);
08B66:  MOVLW  D6
08B68:  MOVWF  FF6
08B6A:  MOVLW  17
08B6C:  MOVWF  FF7
08B6E:  MOVLW  00
08B70:  MOVWF  FF8
08B72:  MOVLW  0E
08B74:  MOVLB  9
08B76:  MOVWF  x96
08B78:  MOVLB  0
08B7A:  CALL   1F18
08B7E:  MOVFF  16C,1FC
08B82:  MOVLW  1B
08B84:  MOVLB  1
08B86:  MOVWF  xFD
08B88:  MOVLB  0
08B8A:  CALL   668C
08B8E:  MOVLW  0D
08B90:  MOVLB  A
08B92:  MOVWF  x29
08B94:  MOVLB  0
08B96:  CALL   1E96
08B9A:  MOVLW  0A
08B9C:  MOVLB  A
08B9E:  MOVWF  x29
08BA0:  MOVLB  0
08BA2:  CALL   1E96
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
08BA6:  MOVFF  161,266
08BAA:  MOVLW  01
08BAC:  MOVLB  2
08BAE:  MOVWF  x67
08BB0:  MOVLB  0
08BB2:  CALL   3DF8
.................... 
....................    unsigned int16 start_time = get_current_sec();
....................    unsigned int16 current_sec = 0;
08BB6:  CALL   311E
08BBA:  MOVFF  01,16E
08BBE:  MOVFF  00,16D
08BC2:  MOVLB  1
08BC4:  CLRF   x70
08BC6:  CLRF   x6F
08BC8:  MOVLB  0
....................    while(get_current_sec() - start_time < cmd.meas_time)
08BCA:  CALL   311E
08BCE:  MOVFF  03,17E
08BD2:  MOVFF  02,17D
08BD6:  MOVFF  01,17C
08BDA:  MOVFF  00,17B
08BDE:  MOVLB  1
08BE0:  MOVF   x6D,W
08BE2:  SUBWF  x7B,F
08BE4:  MOVF   x6E,W
08BE6:  SUBWFB x7C,F
08BE8:  MOVLW  00
08BEA:  SUBWFB x7D,F
08BEC:  MOVLW  00
08BEE:  SUBWFB x7E,F
08BF0:  MOVF   x7E,F
08BF2:  BTFSC  FD8.2
08BF4:  BRA    8BFC
08BF6:  MOVLB  0
08BF8:  GOTO   8CC6
08BFC:  MOVLB  0
08BFE:  MOVLB  1
08C00:  MOVF   x7D,F
08C02:  BTFSC  FD8.2
08C04:  BRA    8C0C
08C06:  MOVLB  0
08C08:  GOTO   8CC6
08C0C:  MOVLB  0
08C0E:  MOVLB  1
08C10:  MOVF   x7C,W
08C12:  SUBWF  x6B,W
08C14:  BTFSC  FD8.0
08C16:  BRA    8C1E
08C18:  MOVLB  0
08C1A:  GOTO   8CC6
08C1E:  MOVLB  0
08C20:  BTFSS  FD8.2
08C22:  GOTO   8C38
08C26:  MOVLB  1
08C28:  MOVF   x6A,W
08C2A:  SUBWF  x7B,W
08C2C:  BTFSS  FD8.0
08C2E:  BRA    8C36
08C30:  MOVLB  0
08C32:  GOTO   8CC6
08C36:  MOVLB  0
....................    {
....................       current_sec = get_current_sec();
08C38:  CALL   311E
08C3C:  MOVFF  01,170
08C40:  MOVFF  00,16F
....................       if (current_sec - start_time >= cmd.meas_time) {
08C44:  MOVLB  1
08C46:  MOVF   x6D,W
08C48:  SUBWF  x6F,W
08C4A:  MOVWF  x7B
08C4C:  MOVF   x6E,W
08C4E:  SUBWFB x70,W
08C50:  MOVWF  x7C
08C52:  MOVF   x6B,W
08C54:  SUBWF  x7C,W
08C56:  BTFSC  FD8.0
08C58:  BRA    8C60
08C5A:  MOVLB  0
08C5C:  GOTO   8C7E
08C60:  MOVLB  0
08C62:  BTFSS  FD8.2
08C64:  GOTO   8C7A
08C68:  MOVLB  1
08C6A:  MOVF   x6A,W
08C6C:  SUBWF  x7B,W
08C6E:  BTFSC  FD8.0
08C70:  BRA    8C78
08C72:  MOVLB  0
08C74:  GOTO   8C7E
08C78:  MOVLB  0
....................           break;
08C7A:  GOTO   8CC6
....................       }
....................       sweep_with_threshold(cmd.curr_threshold, cmd.pd_threshold, cmd.curr_limit); // Perform the sweep with thresholds
08C7E:  MOVFF  165,17C
08C82:  MOVFF  164,17B
08C86:  MOVFF  167,17E
08C8A:  MOVFF  166,17D
08C8E:  MOVFF  169,180
08C92:  MOVFF  168,17F
08C96:  GOTO   7200
....................       // Sleep for the specified time
....................       delay_ms(cmd.sleep_time);
08C9A:  MOVFF  163,17B
08C9E:  MOVLB  1
08CA0:  INCF   x7B,F
08CA2:  MOVLB  0
08CA4:  MOVLB  1
08CA6:  DECFSZ x7B,F
08CA8:  BRA    8CAE
08CAA:  MOVLB  0
08CAC:  BRA    8CBA
08CAE:  MOVLB  A
08CB0:  SETF   x3E
08CB2:  MOVLB  0
08CB4:  CALL   1E68
08CB8:  BRA    8CA4
08CBA:  MOVFF  162,A3E
08CBE:  CALL   1E68
08CC2:  GOTO   8BCA
....................    }
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
08CC6:  MOVFF  161,266
08CCA:  MOVLW  02
08CCC:  MOVLB  2
08CCE:  MOVWF  x67
08CD0:  MOVLB  0
08CD2:  CALL   3DF8
.................... 
....................    SmfDataStruct data;
....................    data.func_type = 0x00;
08CD6:  MOVLB  1
08CD8:  CLRF   x7A
....................    data.mission_id = ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
08CDA:  MOVLW  01
08CDC:  MOVWF  x71
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
08CDE:  MOVF   x10,W
08CE0:  MOVWF  x7B
08CE2:  MOVF   x11,W
08CE4:  MOVWF  x7C
08CE6:  MOVLW  16
08CE8:  ADDWF  x12,W
08CEA:  MOVWF  x7D
08CEC:  MOVLW  00
08CEE:  ADDWFC x13,W
08CF0:  MOVWF  x7E
08CF2:  MOVF   x15,W
08CF4:  SUBWF  x7B,W
08CF6:  MOVWF  x72
08CF8:  MOVF   x16,W
08CFA:  SUBWFB x7C,W
08CFC:  MOVWF  x73
08CFE:  MOVF   x17,W
08D00:  SUBWFB x7D,W
08D02:  MOVWF  x74
08D04:  MOVF   x18,W
08D06:  SUBWFB x7E,W
08D08:  MOVWF  x75
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
08D0A:  MOVFF  118,179
08D0E:  MOVFF  117,178
08D12:  MOVFF  116,177
08D16:  MOVFF  115,176
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
08D1A:  MOVLW  01
08D1C:  MOVWF  x7C
08D1E:  MOVLW  71
08D20:  MOVWF  x7B
08D22:  MOVLB  0
08D24:  GOTO   87A4
.................... 
....................    fprintf(PC, "End MODE MEAS IV\r\n");
08D28:  MOVLW  EA
08D2A:  MOVWF  FF6
08D2C:  MOVLW  17
08D2E:  MOVWF  FF7
08D30:  MOVLW  00
08D32:  MOVWF  FF8
08D34:  CALL   1EE8
08D38:  GOTO   8F76 (RETURN)
.................... }
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
06536:  MOVLB  1
06538:  MOVF   x81,W
0653A:  MOVWF  FE9
0653C:  MOVF   x82,W
0653E:  MOVWF  FEA
06540:  MOVFF  FEF,183
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
06544:  MOVLW  01
06546:  ADDWF  x81,W
06548:  MOVWF  FE9
0654A:  MOVLW  00
0654C:  ADDWFC x82,W
0654E:  MOVWF  FEA
06550:  MOVF   FEF,W
06552:  CLRF   x90
06554:  MOVWF  x8F
06556:  MOVFF  18F,190
0655A:  CLRF   x8F
0655C:  MOVLW  02
0655E:  ADDWF  x81,W
06560:  MOVWF  FE9
06562:  MOVLW  00
06564:  ADDWFC x82,W
06566:  MOVWF  FEA
06568:  MOVF   FEF,W
0656A:  CLRF   03
0656C:  IORWF  x8F,W
0656E:  MOVWF  x84
06570:  MOVF   03,W
06572:  IORWF  x90,W
06574:  MOVWF  x85
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
06576:  MOVLW  03
06578:  ADDWF  x81,W
0657A:  MOVWF  FE9
0657C:  MOVLW  00
0657E:  ADDWFC x82,W
06580:  MOVWF  FEA
06582:  MOVF   FEF,W
06584:  CLRF   x90
06586:  MOVWF  x8F
06588:  RLCF   x8F,W
0658A:  MOVWF  x86
0658C:  RLCF   x90,W
0658E:  MOVWF  x87
06590:  RLCF   x86,F
06592:  RLCF   x87,F
06594:  RLCF   x86,F
06596:  RLCF   x87,F
06598:  RLCF   x86,F
0659A:  RLCF   x87,F
0659C:  MOVLW  F0
0659E:  ANDWF  x86,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
065A0:  MOVLW  04
065A2:  ADDWF  x81,W
065A4:  MOVWF  FE9
065A6:  MOVLW  00
065A8:  ADDWFC x82,W
065AA:  MOVWF  FEA
065AC:  MOVF   FEF,W
065AE:  CLRF   x90
065B0:  MOVWF  x8F
065B2:  RLCF   x8F,W
065B4:  MOVWF  x88
065B6:  RLCF   x90,W
065B8:  MOVWF  x89
065BA:  RLCF   x88,F
065BC:  RLCF   x89,F
065BE:  RLCF   x88,F
065C0:  RLCF   x89,F
065C2:  RLCF   x88,F
065C4:  RLCF   x89,F
065C6:  MOVLW  F0
065C8:  ANDWF  x88,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
065CA:  MOVLW  05
065CC:  ADDWF  x81,W
065CE:  MOVWF  FE9
065D0:  MOVLW  00
065D2:  ADDWFC x82,W
065D4:  MOVWF  FEA
065D6:  MOVF   FEF,W
065D8:  CLRF   x90
065DA:  MOVWF  x8F
065DC:  RLCF   x8F,W
065DE:  MOVWF  x8A
065E0:  RLCF   x90,W
065E2:  MOVWF  x8B
065E4:  RLCF   x8A,F
065E6:  RLCF   x8B,F
065E8:  RLCF   x8A,F
065EA:  RLCF   x8B,F
065EC:  RLCF   x8A,F
065EE:  RLCF   x8B,F
065F0:  MOVLW  F0
065F2:  ANDWF  x8A,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
065F4:  MOVLW  06
065F6:  ADDWF  x81,W
065F8:  MOVWF  FE9
065FA:  MOVLW  00
065FC:  ADDWFC x82,W
065FE:  MOVWF  FEA
06600:  MOVF   FEF,W
06602:  CLRF   x90
06604:  MOVWF  x8F
06606:  MOVFF  18F,190
0660A:  CLRF   x8F
0660C:  MOVLW  07
0660E:  ADDWF  x81,W
06610:  MOVWF  FE9
06612:  MOVLW  00
06614:  ADDWFC x82,W
06616:  MOVWF  FEA
06618:  MOVF   FEF,W
0661A:  CLRF   03
0661C:  IORWF  x8F,W
0661E:  MOVWF  x8C
06620:  MOVF   03,W
06622:  IORWF  x90,W
06624:  MOVWF  x8D
....................    cmd.is_finished = uplinkcmd[8];
06626:  MOVLW  08
06628:  ADDWF  x81,W
0662A:  MOVWF  FE9
0662C:  MOVLW  00
0662E:  ADDWFC x82,W
06630:  MOVWF  FEA
06632:  MOVFF  FEF,18E
....................    return cmd;
06636:  MOVLW  83
06638:  MOVWF  01
0663A:  MOVLW  01
0663C:  MOVWF  02
0663E:  MOVLB  0
06640:  GOTO   8974 (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } SmfMissionStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... SmfMissionStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... typedef enum{
....................     MISF_DATA_TABLE = 0x00, // CIGSデータテーブル
....................     MISF_PICLOG = 0x01, // CIGSピクログヘッダー
....................     MISF_MEAS_HEADER = 0x02, // CIGS測定データヘッダー
....................     MISF_MEAS_DATA = 0x03 // CIGS測定データ
.................... } MissionTypeEnum;
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
049EC:  MOVLW  FE
049EE:  MOVWF  FF6
049F0:  MOVLW  17
049F2:  MOVWF  FF7
049F4:  MOVLW  00
049F6:  MOVWF  FF8
049F8:  CALL   1EE8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
049FC:  MOVLB  1
049FE:  MOVF   x61,W
04A00:  MOVWF  FE9
04A02:  MOVF   x62,W
04A04:  MOVWF  FEA
04A06:  MOVFF  FEF,163
....................    piclog_make(cmd, 0x00); // Log the command execution
04A0A:  MOVFF  163,266
04A0E:  MOVLB  2
04A10:  CLRF   x67
04A12:  MOVLB  0
04A14:  CALL   3DF8
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
04A18:  MOVLB  1
04A1A:  CLRF   x67
04A1C:  CLRF   x66
04A1E:  CLRF   x65
04A20:  CLRF   x64
04A22:  MOVLB  0
04A24:  MOVLB  1
04A26:  MOVF   x67,F
04A28:  BTFSC  FD8.2
04A2A:  BRA    4A32
04A2C:  MOVLB  0
04A2E:  GOTO   4A92
04A32:  MOVLB  0
04A34:  MOVLB  1
04A36:  MOVF   x66,W
04A38:  SUBLW  F4
04A3A:  BTFSC  FD8.0
04A3C:  BRA    4A44
04A3E:  MOVLB  0
04A40:  GOTO   4A92
04A44:  MOVLB  0
04A46:  BTFSS  FD8.2
04A48:  GOTO   4A5E
04A4C:  MOVLB  1
04A4E:  MOVF   x65,W
04A50:  SUBLW  23
04A52:  BTFSC  FD8.0
04A54:  BRA    4A5C
04A56:  MOVLB  0
04A58:  GOTO   4A92
04A5C:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
04A5E:  MOVFF  F1,1A8
04A62:  MOVFF  F0,1A7
04A66:  MOVFF  EF,1A6
04A6A:  MOVFF  EE,1A5
04A6E:  MOVFF  167,1AC
04A72:  MOVFF  166,1AB
04A76:  MOVFF  165,1AA
04A7A:  MOVFF  164,1A9
04A7E:  CALL   4690
04A82:  MOVLW  01
04A84:  MOVLB  1
04A86:  ADDWF  x66,F
04A88:  MOVLW  00
04A8A:  ADDWFC x67,F
04A8C:  MOVLB  0
04A8E:  GOTO   4A24
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04A92:  MOVFF  163,266
04A96:  MOVLW  02
04A98:  MOVLB  2
04A9A:  MOVWF  x67
04A9C:  MOVLB  0
04A9E:  CALL   3DF8
....................    fprintf(PC, "End Flash Erase All\r\n");
04AA2:  MOVLW  16
04AA4:  MOVWF  FF6
04AA6:  MOVLW  18
04AA8:  MOVWF  FF7
04AAA:  MOVLW  00
04AAC:  MOVWF  FF8
04AAE:  CALL   1EE8
04AB2:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
04AB4:  MOVLW  2C
04AB6:  MOVWF  FF6
04AB8:  MOVLW  18
04ABA:  MOVWF  FF7
04ABC:  MOVLW  00
04ABE:  MOVWF  FF8
04AC0:  CALL   1EE8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04AC4:  MOVLB  1
04AC6:  MOVF   x5F,W
04AC8:  MOVWF  FE9
04ACA:  MOVF   x60,W
04ACC:  MOVWF  FEA
04ACE:  MOVFF  FEF,161
04AD2:  MOVLW  01
04AD4:  ADDWF  x5F,W
04AD6:  MOVWF  FE9
04AD8:  MOVLW  00
04ADA:  ADDWFC x60,W
04ADC:  MOVWF  FEA
04ADE:  MOVF   FEF,W
04AE0:  CLRF   x69
04AE2:  CLRF   x68
04AE4:  CLRF   x67
04AE6:  MOVWF  x66
04AE8:  MOVFF  166,169
04AEC:  CLRF   x66
04AEE:  CLRF   x67
04AF0:  CLRF   x68
04AF2:  MOVLW  02
04AF4:  ADDWF  x5F,W
04AF6:  MOVWF  FE9
04AF8:  MOVLW  00
04AFA:  ADDWFC x60,W
04AFC:  MOVWF  FEA
04AFE:  MOVF   FEF,W
04B00:  CLRF   x6E
04B02:  CLRF   x6D
04B04:  CLRF   x6C
04B06:  MOVWF  x6B
04B08:  MOVFF  16C,03
04B0C:  MOVFF  16B,02
04B10:  CLRF   00
04B12:  CLRF   01
04B14:  MOVF   00,W
04B16:  IORWF  x66,F
04B18:  MOVF   01,W
04B1A:  IORWF  x67,F
04B1C:  MOVF   02,W
04B1E:  IORWF  x68,F
04B20:  MOVF   03,W
04B22:  IORWF  x69,F
04B24:  MOVLW  03
04B26:  ADDWF  x5F,W
04B28:  MOVWF  FE9
04B2A:  MOVLW  00
04B2C:  ADDWFC x60,W
04B2E:  MOVWF  FEA
04B30:  MOVF   FEF,W
04B32:  CLRF   x6E
04B34:  CLRF   x6D
04B36:  CLRF   x6C
04B38:  MOVWF  x6B
04B3A:  MOVFF  16D,03
04B3E:  MOVFF  16C,02
04B42:  MOVFF  16B,01
04B46:  CLRF   00
04B48:  MOVF   00,W
04B4A:  IORWF  x66,F
04B4C:  MOVF   01,W
04B4E:  IORWF  x67,F
04B50:  MOVF   02,W
04B52:  IORWF  x68,F
04B54:  MOVF   03,W
04B56:  IORWF  x69,F
04B58:  MOVLW  04
04B5A:  ADDWF  x5F,W
04B5C:  MOVWF  FE9
04B5E:  MOVLW  00
04B60:  ADDWFC x60,W
04B62:  MOVWF  FEA
04B64:  MOVF   FEF,W
04B66:  MOVWF  00
04B68:  CLRF   01
04B6A:  CLRF   02
04B6C:  CLRF   03
04B6E:  MOVF   00,W
04B70:  IORWF  x66,W
04B72:  MOVWF  x62
04B74:  MOVF   01,W
04B76:  IORWF  x67,W
04B78:  MOVWF  x63
04B7A:  MOVF   02,W
04B7C:  IORWF  x68,W
04B7E:  MOVWF  x64
04B80:  MOVF   03,W
04B82:  IORWF  x69,W
04B84:  MOVWF  x65
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
04B86:  MOVLW  4A
04B88:  MOVWF  FF6
04B8A:  MOVLW  18
04B8C:  MOVWF  FF7
04B8E:  MOVLW  00
04B90:  MOVWF  FF8
04B92:  MOVLW  13
04B94:  MOVLB  9
04B96:  MOVWF  x96
04B98:  MOVLB  0
04B9A:  CALL   1F18
04B9E:  MOVFF  165,996
04BA2:  MOVLW  37
04BA4:  MOVLB  9
04BA6:  MOVWF  x97
04BA8:  MOVLB  0
04BAA:  CALL   2116
04BAE:  MOVFF  164,996
04BB2:  MOVLW  37
04BB4:  MOVLB  9
04BB6:  MOVWF  x97
04BB8:  MOVLB  0
04BBA:  CALL   2116
04BBE:  MOVFF  163,996
04BC2:  MOVLW  37
04BC4:  MOVLB  9
04BC6:  MOVWF  x97
04BC8:  MOVLB  0
04BCA:  CALL   2116
04BCE:  MOVFF  162,996
04BD2:  MOVLW  37
04BD4:  MOVLB  9
04BD6:  MOVWF  x97
04BD8:  MOVLB  0
04BDA:  CALL   2116
04BDE:  MOVLW  0D
04BE0:  MOVLB  A
04BE2:  MOVWF  x29
04BE4:  MOVLB  0
04BE6:  CALL   1E96
04BEA:  MOVLW  0A
04BEC:  MOVLB  A
04BEE:  MOVWF  x29
04BF0:  MOVLB  0
04BF2:  CALL   1E96
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04BF6:  MOVFF  161,266
04BFA:  MOVLW  01
04BFC:  MOVLB  2
04BFE:  MOVWF  x67
04C00:  MOVLB  0
04C02:  CALL   3DF8
....................    
....................    sector_erase(mis_fm, sector_address);
04C06:  MOVFF  F1,1A8
04C0A:  MOVFF  F0,1A7
04C0E:  MOVFF  EF,1A6
04C12:  MOVFF  EE,1A5
04C16:  MOVFF  165,1AC
04C1A:  MOVFF  164,1AB
04C1E:  MOVFF  163,1AA
04C22:  MOVFF  162,1A9
04C26:  CALL   4690
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04C2A:  MOVFF  161,266
04C2E:  MOVLW  02
04C30:  MOVLB  2
04C32:  MOVWF  x67
04C34:  MOVLB  0
04C36:  CALL   3DF8
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
04C3A:  MOVLW  66
04C3C:  MOVWF  FF6
04C3E:  MOVLW  18
04C40:  MOVWF  FF7
04C42:  MOVLW  00
04C44:  MOVWF  FF8
04C46:  CALL   1EE8
04C4A:  GOTO   8E86 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
04C4E:  MOVLW  82
04C50:  MOVWF  FF6
04C52:  MOVLW  18
04C54:  MOVWF  FF7
04C56:  MOVLW  00
04C58:  MOVWF  FF8
04C5A:  CALL   1EE8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04C5E:  MOVLB  1
04C60:  MOVF   x5F,W
04C62:  MOVWF  FE9
04C64:  MOVF   x60,W
04C66:  MOVWF  FEA
04C68:  MOVFF  FEF,161
04C6C:  MOVLW  01
04C6E:  ADDWF  x5F,W
04C70:  MOVWF  FE9
04C72:  MOVLW  00
04C74:  ADDWFC x60,W
04C76:  MOVWF  FEA
04C78:  MOVF   FEF,W
04C7A:  CLRF   x69
04C7C:  CLRF   x68
04C7E:  CLRF   x67
04C80:  MOVWF  x66
04C82:  MOVFF  166,169
04C86:  CLRF   x66
04C88:  CLRF   x67
04C8A:  CLRF   x68
04C8C:  MOVLW  02
04C8E:  ADDWF  x5F,W
04C90:  MOVWF  FE9
04C92:  MOVLW  00
04C94:  ADDWFC x60,W
04C96:  MOVWF  FEA
04C98:  MOVF   FEF,W
04C9A:  CLRF   x6E
04C9C:  CLRF   x6D
04C9E:  CLRF   x6C
04CA0:  MOVWF  x6B
04CA2:  MOVFF  16C,03
04CA6:  MOVFF  16B,02
04CAA:  CLRF   00
04CAC:  CLRF   01
04CAE:  MOVF   00,W
04CB0:  IORWF  x66,F
04CB2:  MOVF   01,W
04CB4:  IORWF  x67,F
04CB6:  MOVF   02,W
04CB8:  IORWF  x68,F
04CBA:  MOVF   03,W
04CBC:  IORWF  x69,F
04CBE:  MOVLW  03
04CC0:  ADDWF  x5F,W
04CC2:  MOVWF  FE9
04CC4:  MOVLW  00
04CC6:  ADDWFC x60,W
04CC8:  MOVWF  FEA
04CCA:  MOVF   FEF,W
04CCC:  CLRF   x6E
04CCE:  CLRF   x6D
04CD0:  CLRF   x6C
04CD2:  MOVWF  x6B
04CD4:  MOVFF  16D,03
04CD8:  MOVFF  16C,02
04CDC:  MOVFF  16B,01
04CE0:  CLRF   00
04CE2:  MOVF   00,W
04CE4:  IORWF  x66,F
04CE6:  MOVF   01,W
04CE8:  IORWF  x67,F
04CEA:  MOVF   02,W
04CEC:  IORWF  x68,F
04CEE:  MOVF   03,W
04CF0:  IORWF  x69,F
04CF2:  MOVLW  04
04CF4:  ADDWF  x5F,W
04CF6:  MOVWF  FE9
04CF8:  MOVLW  00
04CFA:  ADDWFC x60,W
04CFC:  MOVWF  FEA
04CFE:  MOVF   FEF,W
04D00:  MOVWF  00
04D02:  CLRF   01
04D04:  CLRF   02
04D06:  CLRF   03
04D08:  MOVF   00,W
04D0A:  IORWF  x66,W
04D0C:  MOVWF  x62
04D0E:  MOVF   01,W
04D10:  IORWF  x67,W
04D12:  MOVWF  x63
04D14:  MOVF   02,W
04D16:  IORWF  x68,W
04D18:  MOVWF  x64
04D1A:  MOVF   03,W
04D1C:  IORWF  x69,W
04D1E:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04D20:  MOVLW  9E
04D22:  MOVWF  FF6
04D24:  MOVLW  18
04D26:  MOVWF  FF7
04D28:  MOVLW  00
04D2A:  MOVWF  FF8
04D2C:  MOVLW  16
04D2E:  MOVLB  9
04D30:  MOVWF  x96
04D32:  MOVLB  0
04D34:  CALL   1F18
04D38:  MOVFF  165,996
04D3C:  MOVLW  37
04D3E:  MOVLB  9
04D40:  MOVWF  x97
04D42:  MOVLB  0
04D44:  CALL   2116
04D48:  MOVFF  164,996
04D4C:  MOVLW  37
04D4E:  MOVLB  9
04D50:  MOVWF  x97
04D52:  MOVLB  0
04D54:  CALL   2116
04D58:  MOVFF  163,996
04D5C:  MOVLW  37
04D5E:  MOVLB  9
04D60:  MOVWF  x97
04D62:  MOVLB  0
04D64:  CALL   2116
04D68:  MOVFF  162,996
04D6C:  MOVLW  37
04D6E:  MOVLB  9
04D70:  MOVWF  x97
04D72:  MOVLB  0
04D74:  CALL   2116
04D78:  MOVLW  0D
04D7A:  MOVLB  A
04D7C:  MOVWF  x29
04D7E:  MOVLB  0
04D80:  CALL   1E96
04D84:  MOVLW  0A
04D86:  MOVLB  A
04D88:  MOVWF  x29
04D8A:  MOVLB  0
04D8C:  CALL   1E96
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04D90:  MOVFF  161,266
04D94:  MOVLW  01
04D96:  MOVLB  2
04D98:  MOVWF  x67
04D9A:  MOVLB  0
04D9C:  CALL   3DF8
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
04DA0:  MOVFF  F1,A29
04DA4:  MOVFF  F0,A28
04DA8:  MOVFF  EF,A27
04DAC:  MOVFF  EE,A26
04DB0:  MOVLB  A
04DB2:  CLRF   x2D
04DB4:  CLRF   x2C
04DB6:  CLRF   x2B
04DB8:  CLRF   x2A
04DBA:  MOVLB  0
04DBC:  CALL   37C0
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04DC0:  MOVFF  161,266
04DC4:  MOVLW  02
04DC6:  MOVLB  2
04DC8:  MOVWF  x67
04DCA:  MOVLB  0
04DCC:  CALL   3DF8
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
04DD0:  MOVLW  BC
04DD2:  MOVWF  FF6
04DD4:  MOVLW  18
04DD6:  MOVWF  FF7
04DD8:  MOVLW  00
04DDA:  MOVWF  FF8
04DDC:  CALL   1EE8
04DE0:  GOTO   8E96 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
04DE4:  MOVLW  D6
04DE6:  MOVWF  FF6
04DE8:  MOVLW  18
04DEA:  MOVWF  FF7
04DEC:  MOVLW  00
04DEE:  MOVWF  FF8
04DF0:  CALL   1EE8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04DF4:  MOVLB  1
04DF6:  MOVF   x5F,W
04DF8:  MOVWF  FE9
04DFA:  MOVF   x60,W
04DFC:  MOVWF  FEA
04DFE:  MOVFF  FEF,161
04E02:  MOVLW  01
04E04:  ADDWF  x5F,W
04E06:  MOVWF  FE9
04E08:  MOVLW  00
04E0A:  ADDWFC x60,W
04E0C:  MOVWF  FEA
04E0E:  MOVF   FEF,W
04E10:  CLRF   x69
04E12:  CLRF   x68
04E14:  CLRF   x67
04E16:  MOVWF  x66
04E18:  MOVFF  166,169
04E1C:  CLRF   x66
04E1E:  CLRF   x67
04E20:  CLRF   x68
04E22:  MOVLW  02
04E24:  ADDWF  x5F,W
04E26:  MOVWF  FE9
04E28:  MOVLW  00
04E2A:  ADDWFC x60,W
04E2C:  MOVWF  FEA
04E2E:  MOVF   FEF,W
04E30:  CLRF   x6E
04E32:  CLRF   x6D
04E34:  CLRF   x6C
04E36:  MOVWF  x6B
04E38:  MOVFF  16C,03
04E3C:  MOVFF  16B,02
04E40:  CLRF   00
04E42:  CLRF   01
04E44:  MOVF   00,W
04E46:  IORWF  x66,F
04E48:  MOVF   01,W
04E4A:  IORWF  x67,F
04E4C:  MOVF   02,W
04E4E:  IORWF  x68,F
04E50:  MOVF   03,W
04E52:  IORWF  x69,F
04E54:  MOVLW  03
04E56:  ADDWF  x5F,W
04E58:  MOVWF  FE9
04E5A:  MOVLW  00
04E5C:  ADDWFC x60,W
04E5E:  MOVWF  FEA
04E60:  MOVF   FEF,W
04E62:  CLRF   x6E
04E64:  CLRF   x6D
04E66:  CLRF   x6C
04E68:  MOVWF  x6B
04E6A:  MOVFF  16D,03
04E6E:  MOVFF  16C,02
04E72:  MOVFF  16B,01
04E76:  CLRF   00
04E78:  MOVF   00,W
04E7A:  IORWF  x66,F
04E7C:  MOVF   01,W
04E7E:  IORWF  x67,F
04E80:  MOVF   02,W
04E82:  IORWF  x68,F
04E84:  MOVF   03,W
04E86:  IORWF  x69,F
04E88:  MOVLW  04
04E8A:  ADDWF  x5F,W
04E8C:  MOVWF  FE9
04E8E:  MOVLW  00
04E90:  ADDWFC x60,W
04E92:  MOVWF  FEA
04E94:  MOVF   FEF,W
04E96:  MOVWF  00
04E98:  CLRF   01
04E9A:  CLRF   02
04E9C:  CLRF   03
04E9E:  MOVF   00,W
04EA0:  IORWF  x66,W
04EA2:  MOVWF  x62
04EA4:  MOVF   01,W
04EA6:  IORWF  x67,W
04EA8:  MOVWF  x63
04EAA:  MOVF   02,W
04EAC:  IORWF  x68,W
04EAE:  MOVWF  x64
04EB0:  MOVF   03,W
04EB2:  IORWF  x69,W
04EB4:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04EB6:  MOVLW  FC
04EB8:  MOVWF  FF6
04EBA:  MOVLW  18
04EBC:  MOVWF  FF7
04EBE:  MOVLW  00
04EC0:  MOVWF  FF8
04EC2:  MOVLW  16
04EC4:  MOVLB  9
04EC6:  MOVWF  x96
04EC8:  MOVLB  0
04ECA:  CALL   1F18
04ECE:  MOVFF  165,996
04ED2:  MOVLW  37
04ED4:  MOVLB  9
04ED6:  MOVWF  x97
04ED8:  MOVLB  0
04EDA:  CALL   2116
04EDE:  MOVFF  164,996
04EE2:  MOVLW  37
04EE4:  MOVLB  9
04EE6:  MOVWF  x97
04EE8:  MOVLB  0
04EEA:  CALL   2116
04EEE:  MOVFF  163,996
04EF2:  MOVLW  37
04EF4:  MOVLB  9
04EF6:  MOVWF  x97
04EF8:  MOVLB  0
04EFA:  CALL   2116
04EFE:  MOVFF  162,996
04F02:  MOVLW  37
04F04:  MOVLB  9
04F06:  MOVWF  x97
04F08:  MOVLB  0
04F0A:  CALL   2116
04F0E:  MOVLW  0D
04F10:  MOVLB  A
04F12:  MOVWF  x29
04F14:  MOVLB  0
04F16:  CALL   1E96
04F1A:  MOVLW  0A
04F1C:  MOVLB  A
04F1E:  MOVWF  x29
04F20:  MOVLB  0
04F22:  CALL   1E96
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04F26:  MOVFF  161,266
04F2A:  MOVLW  01
04F2C:  MOVLB  2
04F2E:  MOVWF  x67
04F30:  MOVLB  0
04F32:  CALL   3DF8
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04F36:  MOVFF  161,266
04F3A:  MOVLW  02
04F3C:  MOVLB  2
04F3E:  MOVWF  x67
04F40:  MOVLB  0
04F42:  CALL   3DF8
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
04F46:  MOVLW  1A
04F48:  MOVWF  FF6
04F4A:  MOVLW  19
04F4C:  MOVWF  FF7
04F4E:  MOVLW  00
04F50:  MOVWF  FF8
04F52:  CALL   1EE8
04F56:  GOTO   8EA6 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
04F5A:  MOVLW  3E
04F5C:  MOVWF  FF6
04F5E:  MOVLW  19
04F60:  MOVWF  FF7
04F62:  MOVLW  00
04F64:  MOVWF  FF8
04F66:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04F6A:  MOVLB  1
04F6C:  MOVF   x5F,W
04F6E:  MOVWF  FE9
04F70:  MOVF   x60,W
04F72:  MOVWF  FEA
04F74:  MOVFF  FEF,1B1
04F78:  MOVFF  1B1,266
04F7C:  MOVLW  01
04F7E:  MOVLB  2
04F80:  MOVWF  x67
04F82:  MOVLB  0
04F84:  CALL   3DF8
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
04F88:  MOVLB  1
04F8A:  CLRF   x61
04F8C:  CLRF   x62
04F8E:  CLRF   x63
04F90:  CLRF   x64
04F92:  CLRF   x65
04F94:  CLRF   x66
04F96:  CLRF   x67
....................    
....................    flash_write_param.id = parameter[0];
04F98:  MOVF   x5F,W
04F9A:  MOVWF  FE9
04F9C:  MOVF   x60,W
04F9E:  MOVWF  FEA
04FA0:  MOVFF  FEF,161
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
04FA4:  MOVLW  01
04FA6:  ADDWF  x5F,W
04FA8:  MOVWF  FE9
04FAA:  MOVLW  00
04FAC:  ADDWFC x60,W
04FAE:  MOVWF  FEA
04FB0:  MOVF   FEF,W
04FB2:  CLRF   xB4
04FB4:  CLRF   xB3
04FB6:  CLRF   xB2
04FB8:  MOVWF  xB1
04FBA:  MOVFF  1B1,1B4
04FBE:  CLRF   xB1
04FC0:  CLRF   xB2
04FC2:  CLRF   xB3
04FC4:  MOVLW  02
04FC6:  ADDWF  x5F,W
04FC8:  MOVWF  FE9
04FCA:  MOVLW  00
04FCC:  ADDWFC x60,W
04FCE:  MOVWF  FEA
04FD0:  MOVF   FEF,W
04FD2:  CLRF   xB9
04FD4:  CLRF   xB8
04FD6:  CLRF   xB7
04FD8:  MOVWF  xB6
04FDA:  MOVFF  1B7,03
04FDE:  MOVFF  1B6,02
04FE2:  CLRF   00
04FE4:  CLRF   01
04FE6:  MOVF   00,W
04FE8:  IORWF  xB1,F
04FEA:  MOVF   01,W
04FEC:  IORWF  xB2,F
04FEE:  MOVF   02,W
04FF0:  IORWF  xB3,F
04FF2:  MOVF   03,W
04FF4:  IORWF  xB4,F
04FF6:  MOVLW  03
04FF8:  ADDWF  x5F,W
04FFA:  MOVWF  FE9
04FFC:  MOVLW  00
04FFE:  ADDWFC x60,W
05000:  MOVWF  FEA
05002:  MOVF   FEF,W
05004:  CLRF   xB9
05006:  CLRF   xB8
05008:  CLRF   xB7
0500A:  MOVWF  xB6
0500C:  MOVFF  1B8,03
05010:  MOVFF  1B7,02
05014:  MOVFF  1B6,01
05018:  CLRF   00
0501A:  MOVF   00,W
0501C:  IORWF  xB1,F
0501E:  MOVF   01,W
05020:  IORWF  xB2,F
05022:  MOVF   02,W
05024:  IORWF  xB3,F
05026:  MOVF   03,W
05028:  IORWF  xB4,F
0502A:  MOVLW  04
0502C:  ADDWF  x5F,W
0502E:  MOVWF  FE9
05030:  MOVLW  00
05032:  ADDWFC x60,W
05034:  MOVWF  FEA
05036:  MOVF   FEF,W
05038:  MOVWF  00
0503A:  CLRF   01
0503C:  CLRF   02
0503E:  CLRF   03
05040:  MOVF   00,W
05042:  IORWF  xB1,W
05044:  MOVWF  x62
05046:  MOVF   01,W
05048:  IORWF  xB2,W
0504A:  MOVWF  x63
0504C:  MOVF   02,W
0504E:  IORWF  xB3,W
05050:  MOVWF  x64
05052:  MOVF   03,W
05054:  IORWF  xB4,W
05056:  MOVWF  x65
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05058:  MOVLW  07
0505A:  ADDWF  x5F,W
0505C:  MOVWF  FE9
0505E:  MOVLW  00
05060:  ADDWFC x60,W
05062:  MOVWF  FEA
05064:  MOVF   FEF,W
05066:  CLRF   xB2
05068:  MOVWF  xB1
0506A:  MOVFF  1B1,1B2
0506E:  CLRF   xB1
05070:  MOVLW  08
05072:  ADDWF  x5F,W
05074:  MOVWF  FE9
05076:  MOVLW  00
05078:  ADDWFC x60,W
0507A:  MOVWF  FEA
0507C:  MOVF   FEF,W
0507E:  CLRF   03
05080:  IORWF  xB1,W
05082:  MOVWF  x66
05084:  MOVF   03,W
05086:  IORWF  xB2,W
05088:  MOVWF  x67
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0508A:  MOVLW  58
0508C:  MOVWF  FF6
0508E:  MOVLW  19
05090:  MOVWF  FF7
05092:  MOVLW  00
05094:  MOVWF  FF8
05096:  MOVLW  0C
05098:  MOVLB  9
0509A:  MOVWF  x96
0509C:  MOVLB  0
0509E:  CALL   1F18
050A2:  MOVFF  161,996
050A6:  MOVLW  37
050A8:  MOVLB  9
050AA:  MOVWF  x97
050AC:  MOVLB  0
050AE:  CALL   2116
050B2:  MOVLW  0D
050B4:  MOVLB  A
050B6:  MOVWF  x29
050B8:  MOVLB  0
050BA:  CALL   1E96
050BE:  MOVLW  0A
050C0:  MOVLB  A
050C2:  MOVWF  x29
050C4:  MOVLB  0
050C6:  CALL   1E96
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
050CA:  MOVLW  6C
050CC:  MOVWF  FF6
050CE:  MOVLW  19
050D0:  MOVWF  FF7
050D2:  MOVLW  00
050D4:  MOVWF  FF8
050D6:  MOVLW  0E
050D8:  MOVLB  9
050DA:  MOVWF  x96
050DC:  MOVLB  0
050DE:  CALL   1F18
050E2:  MOVFF  165,996
050E6:  MOVLW  37
050E8:  MOVLB  9
050EA:  MOVWF  x97
050EC:  MOVLB  0
050EE:  CALL   2116
050F2:  MOVFF  164,996
050F6:  MOVLW  37
050F8:  MOVLB  9
050FA:  MOVWF  x97
050FC:  MOVLB  0
050FE:  CALL   2116
05102:  MOVFF  163,996
05106:  MOVLW  37
05108:  MOVLB  9
0510A:  MOVWF  x97
0510C:  MOVLB  0
0510E:  CALL   2116
05112:  MOVFF  162,996
05116:  MOVLW  37
05118:  MOVLB  9
0511A:  MOVWF  x97
0511C:  MOVLB  0
0511E:  CALL   2116
05122:  MOVLW  0D
05124:  MOVLB  A
05126:  MOVWF  x29
05128:  MOVLB  0
0512A:  CALL   1E96
0512E:  MOVLW  0A
05130:  MOVLB  A
05132:  MOVWF  x29
05134:  MOVLB  0
05136:  CALL   1E96
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
0513A:  MOVLW  82
0513C:  MOVWF  FF6
0513E:  MOVLW  19
05140:  MOVWF  FF7
05142:  MOVLW  00
05144:  MOVWF  FF8
05146:  MOVLW  0E
05148:  MOVLB  9
0514A:  MOVWF  x96
0514C:  MOVLB  0
0514E:  CALL   1F18
05152:  MOVFF  167,996
05156:  MOVLW  37
05158:  MOVLB  9
0515A:  MOVWF  x97
0515C:  MOVLB  0
0515E:  CALL   2116
05162:  MOVFF  166,996
05166:  MOVLW  37
05168:  MOVLB  9
0516A:  MOVWF  x97
0516C:  MOVLB  0
0516E:  CALL   2116
05172:  MOVLW  0D
05174:  MOVLB  A
05176:  MOVWF  x29
05178:  MOVLB  0
0517A:  CALL   1E96
0517E:  MOVLW  0A
05180:  MOVLB  A
05182:  MOVWF  x29
05184:  MOVLB  0
05186:  CALL   1E96
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
0518A:  MOVFF  161,266
0518E:  MOVLB  2
05190:  CLRF   x67
05192:  MOVLB  0
05194:  CALL   3DF8
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05198:  MOVLW  98
0519A:  MOVWF  FF6
0519C:  MOVLW  19
0519E:  MOVWF  FF7
051A0:  MOVLW  00
051A2:  MOVWF  FF8
051A4:  CALL   1EE8
....................    for (p = 0; p < flash_write_param.packetnum; p++)
051A8:  MOVLB  1
051AA:  CLRF   xA9
051AC:  CLRF   xA8
051AE:  MOVLB  0
051B0:  MOVLB  1
051B2:  MOVF   xA9,W
051B4:  SUBWF  x67,W
051B6:  BTFSC  FD8.0
051B8:  BRA    51C0
051BA:  MOVLB  0
051BC:  GOTO   52EE
051C0:  MOVLB  0
051C2:  BTFSS  FD8.2
051C4:  GOTO   51DA
051C8:  MOVLB  1
051CA:  MOVF   x66,W
051CC:  SUBWF  xA8,W
051CE:  BTFSS  FD8.0
051D0:  BRA    51D8
051D2:  MOVLB  0
051D4:  GOTO   52EE
051D8:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
051DA:  MOVLB  1
051DC:  RLCF   xA8,W
051DE:  MOVWF  xAA
051E0:  RLCF   xA9,W
051E2:  MOVWF  xAB
051E4:  RLCF   xAA,F
051E6:  RLCF   xAB,F
051E8:  RLCF   xAA,F
051EA:  RLCF   xAB,F
051EC:  RLCF   xAA,F
051EE:  RLCF   xAB,F
051F0:  RLCF   xAA,F
051F2:  RLCF   xAB,F
051F4:  RLCF   xAA,F
051F6:  RLCF   xAB,F
051F8:  MOVLW  C0
051FA:  ANDWF  xAA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
051FC:  CLRF   xAC
051FE:  MOVLB  0
05200:  MOVLB  1
05202:  MOVF   xAC,W
05204:  SUBLW  3F
05206:  BTFSC  FD8.0
05208:  BRA    5210
0520A:  MOVLB  0
0520C:  GOTO   5270
05210:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
05212:  CLRF   03
05214:  MOVLB  1
05216:  MOVF   xAC,W
05218:  ADDLW  68
0521A:  MOVWF  FE9
0521C:  MOVLW  01
0521E:  ADDWFC 03,W
05220:  MOVWF  FEA
05222:  MOVF   xAC,W
05224:  ADDWF  xAA,W
05226:  MOVWF  xB3
05228:  MOVLW  00
0522A:  ADDWFC xAB,W
0522C:  MOVWF  xB4
0522E:  MOVF   xB3,W
05230:  MOVWF  00
05232:  CLRF   03
05234:  MOVF   00,W
05236:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05238:  CLRF   03
0523A:  MOVF   xAC,W
0523C:  ADDLW  68
0523E:  MOVWF  FE9
05240:  MOVLW  01
05242:  ADDWFC 03,W
05244:  MOVWF  FEA
05246:  MOVFF  FEF,1B1
0524A:  MOVFF  1B1,996
0524E:  MOVLW  37
05250:  MOVLB  9
05252:  MOVWF  x97
05254:  MOVLB  0
05256:  CALL   2116
0525A:  MOVLW  20
0525C:  MOVLB  A
0525E:  MOVWF  x29
05260:  MOVLB  0
05262:  CALL   1E96
05266:  MOVLB  1
05268:  INCF   xAC,F
0526A:  MOVLB  0
0526C:  GOTO   5200
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05270:  MOVLB  1
05272:  RLCF   xA8,W
05274:  MOVWF  02
05276:  RLCF   xA9,W
05278:  MOVWF  03
0527A:  RLCF   02,F
0527C:  RLCF   03,F
0527E:  RLCF   02,F
05280:  RLCF   03,F
05282:  RLCF   02,F
05284:  RLCF   03,F
05286:  RLCF   02,F
05288:  RLCF   03,F
0528A:  RLCF   02,F
0528C:  RLCF   03,F
0528E:  MOVLW  C0
05290:  ANDWF  02,F
05292:  MOVF   02,W
05294:  ADDWF  x62,W
05296:  MOVWF  xAD
05298:  MOVF   03,W
0529A:  ADDWFC x63,W
0529C:  MOVWF  xAE
0529E:  MOVLW  00
052A0:  ADDWFC x64,W
052A2:  MOVWF  xAF
052A4:  MOVLW  00
052A6:  ADDWFC x65,W
052A8:  MOVWF  xB0
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
052AA:  MOVFF  F1,A29
052AE:  MOVFF  F0,A28
052B2:  MOVFF  EF,A27
052B6:  MOVFF  EE,A26
052BA:  MOVFF  1B0,A2D
052BE:  MOVFF  1AF,A2C
052C2:  MOVFF  1AE,A2B
052C6:  MOVFF  1AD,A2A
052CA:  MOVLW  01
052CC:  MOVLB  A
052CE:  MOVWF  x2F
052D0:  MOVLW  68
052D2:  MOVWF  x2E
052D4:  CLRF   x31
052D6:  MOVLW  40
052D8:  MOVWF  x30
052DA:  MOVLB  0
052DC:  CALL   343C
052E0:  MOVLB  1
052E2:  INCF   xA8,F
052E4:  BTFSC  FD8.2
052E6:  INCF   xA9,F
052E8:  MOVLB  0
052EA:  GOTO   51B0
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
052EE:  MOVFF  161,266
052F2:  MOVLW  02
052F4:  MOVLB  2
052F6:  MOVWF  x67
052F8:  MOVLB  0
052FA:  CALL   3DF8
....................    fprintf(PC, "\r\n");
052FE:  MOVLW  0D
05300:  MOVLB  A
05302:  MOVWF  x29
05304:  MOVLB  0
05306:  CALL   1E96
0530A:  MOVLW  0A
0530C:  MOVLB  A
0530E:  MOVWF  x29
05310:  MOVLB  0
05312:  CALL   1E96
....................    fprintf(PC, "End Flash Write Demo\r\n");
05316:  MOVLW  A6
05318:  MOVWF  FF6
0531A:  MOVLW  19
0531C:  MOVWF  FF7
0531E:  MOVLW  00
05320:  MOVWF  FF8
05322:  CALL   1EE8
05326:  GOTO   8EB6 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
0535A:  MOVLW  BE
0535C:  MOVWF  FF6
0535E:  MOVLW  19
05360:  MOVWF  FF7
05362:  MOVLW  00
05364:  MOVWF  FF8
05366:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0536A:  MOVLB  1
0536C:  MOVF   x5F,W
0536E:  MOVWF  FE9
05370:  MOVF   x60,W
05372:  MOVWF  FEA
05374:  MOVFF  FEF,265
05378:  MOVFF  265,266
0537C:  MOVLW  01
0537E:  MOVLB  2
05380:  MOVWF  x67
05382:  MOVLB  0
05384:  CALL   3DF8
....................    flash_setting(mis_fm);
05388:  MOVFF  F1,26C
0538C:  MOVFF  F0,26B
05390:  MOVFF  EF,26A
05394:  MOVFF  EE,269
05398:  CALL   532A
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
0539C:  MOVLB  1
0539E:  CLRF   x64
053A0:  CLRF   x63
053A2:  CLRF   x62
053A4:  CLRF   x61
053A6:  MOVLW  01
053A8:  MOVWF  x65
053AA:  MOVLW  02
053AC:  MOVWF  x66
053AE:  MOVLW  03
053B0:  MOVWF  x67
053B2:  MOVLW  04
053B4:  MOVWF  x68
053B6:  CLRF   x69
053B8:  CLRF   x6A
053BA:  CLRF   x6B
053BC:  CLRF   x6C
053BE:  CLRF   x6D
053C0:  CLRF   x6E
053C2:  CLRF   x6F
053C4:  CLRF   x70
053C6:  CLRF   x71
053C8:  CLRF   x72
053CA:  CLRF   x73
053CC:  CLRF   x74
053CE:  CLRF   x75
053D0:  CLRF   x76
053D2:  CLRF   x77
053D4:  CLRF   x78
053D6:  CLRF   x79
053D8:  CLRF   x7A
053DA:  CLRF   x7B
053DC:  CLRF   x7C
053DE:  CLRF   x7D
053E0:  CLRF   x7E
053E2:  CLRF   x7F
053E4:  CLRF   x80
053E6:  CLRF   x81
053E8:  CLRF   x82
053EA:  CLRF   x83
053EC:  CLRF   x84
053EE:  CLRF   x85
053F0:  CLRF   x86
053F2:  CLRF   x87
053F4:  CLRF   x88
053F6:  CLRF   x89
053F8:  CLRF   x8A
053FA:  CLRF   x8B
053FC:  CLRF   x8C
053FE:  CLRF   x8D
05400:  CLRF   x8E
05402:  CLRF   x8F
05404:  CLRF   x90
05406:  CLRF   x91
05408:  CLRF   x92
0540A:  CLRF   x93
0540C:  CLRF   x94
0540E:  CLRF   x95
05410:  CLRF   x96
05412:  CLRF   x97
05414:  CLRF   x98
05416:  CLRF   x99
05418:  CLRF   x9A
0541A:  CLRF   x9B
0541C:  CLRF   x9C
0541E:  CLRF   x9D
05420:  CLRF   x9E
05422:  CLRF   x9F
05424:  CLRF   xA0
05426:  CLRF   xA1
05428:  CLRF   xA2
0542A:  CLRF   xA3
0542C:  CLRF   xA4
0542E:  CLRF   xA5
05430:  CLRF   xA6
05432:  CLRF   xA7
05434:  CLRF   xA8
05436:  CLRF   xA9
05438:  CLRF   xAA
0543A:  CLRF   xAB
0543C:  CLRF   xAC
0543E:  CLRF   xAD
05440:  CLRF   xAE
05442:  CLRF   xAF
05444:  CLRF   xB0
05446:  CLRF   xB1
05448:  CLRF   xB2
0544A:  CLRF   xB3
0544C:  CLRF   xB4
0544E:  CLRF   xB5
05450:  CLRF   xB6
05452:  CLRF   xB7
05454:  CLRF   xB8
05456:  CLRF   xB9
05458:  CLRF   xBA
0545A:  CLRF   xBB
0545C:  CLRF   xBC
0545E:  CLRF   xBD
05460:  CLRF   xBE
05462:  CLRF   xBF
05464:  CLRF   xC0
05466:  CLRF   xC1
05468:  CLRF   xC2
0546A:  CLRF   xC3
0546C:  CLRF   xC4
0546E:  CLRF   xC5
05470:  CLRF   xC6
05472:  CLRF   xC7
05474:  CLRF   xC8
05476:  CLRF   xC9
05478:  CLRF   xCA
0547A:  CLRF   xCB
0547C:  CLRF   xCC
0547E:  CLRF   xCD
05480:  CLRF   xCE
05482:  CLRF   xCF
05484:  CLRF   xD0
05486:  CLRF   xD1
05488:  CLRF   xD2
0548A:  CLRF   xD3
0548C:  CLRF   xD4
0548E:  CLRF   xD5
05490:  CLRF   xD6
05492:  CLRF   xD7
05494:  CLRF   xD8
05496:  CLRF   xD9
05498:  CLRF   xDA
0549A:  CLRF   xDB
0549C:  CLRF   xDC
0549E:  CLRF   xDD
054A0:  CLRF   xDE
054A2:  CLRF   xDF
054A4:  CLRF   xE0
054A6:  CLRF   xE1
054A8:  CLRF   xE2
054AA:  CLRF   xE3
054AC:  CLRF   xE4
054AE:  CLRF   xE5
054B0:  CLRF   xE6
054B2:  CLRF   xE7
054B4:  CLRF   xE8
054B6:  CLRF   xE9
054B8:  CLRF   xEA
054BA:  CLRF   xEB
054BC:  CLRF   xEC
054BE:  CLRF   xED
054C0:  CLRF   xEE
054C2:  CLRF   xEF
054C4:  CLRF   xF0
054C6:  CLRF   xF1
054C8:  CLRF   xF2
054CA:  CLRF   xF3
054CC:  CLRF   xF4
054CE:  CLRF   xF5
054D0:  CLRF   xF6
054D2:  CLRF   xF7
054D4:  CLRF   xF8
054D6:  CLRF   xF9
054D8:  CLRF   xFA
054DA:  CLRF   xFB
054DC:  CLRF   xFC
054DE:  CLRF   xFD
054E0:  CLRF   xFE
054E2:  CLRF   xFF
054E4:  MOVLB  2
054E6:  CLRF   x00
054E8:  CLRF   x01
054EA:  CLRF   x02
054EC:  CLRF   x03
054EE:  CLRF   x04
054F0:  CLRF   x05
054F2:  CLRF   x06
054F4:  CLRF   x07
054F6:  CLRF   x08
054F8:  CLRF   x09
054FA:  CLRF   x0A
054FC:  CLRF   x0B
054FE:  CLRF   x0C
05500:  CLRF   x0D
05502:  CLRF   x0E
05504:  CLRF   x0F
05506:  CLRF   x10
05508:  CLRF   x11
0550A:  CLRF   x12
0550C:  CLRF   x13
0550E:  CLRF   x14
05510:  CLRF   x15
05512:  CLRF   x16
05514:  CLRF   x17
05516:  CLRF   x18
05518:  CLRF   x19
0551A:  CLRF   x1A
0551C:  CLRF   x1B
0551E:  CLRF   x1C
05520:  CLRF   x1D
05522:  CLRF   x1E
05524:  CLRF   x1F
05526:  CLRF   x20
05528:  CLRF   x21
0552A:  CLRF   x22
0552C:  CLRF   x23
0552E:  CLRF   x24
05530:  CLRF   x25
05532:  CLRF   x26
05534:  CLRF   x27
05536:  CLRF   x28
05538:  CLRF   x29
0553A:  CLRF   x2A
0553C:  CLRF   x2B
0553E:  CLRF   x2C
05540:  CLRF   x2D
05542:  CLRF   x2E
05544:  CLRF   x2F
05546:  CLRF   x30
05548:  CLRF   x31
0554A:  CLRF   x32
0554C:  CLRF   x33
0554E:  CLRF   x34
05550:  CLRF   x35
05552:  CLRF   x36
05554:  CLRF   x37
05556:  CLRF   x38
05558:  CLRF   x39
0555A:  CLRF   x3A
0555C:  CLRF   x3B
0555E:  CLRF   x3C
05560:  CLRF   x3D
05562:  CLRF   x3E
05564:  CLRF   x3F
05566:  CLRF   x40
05568:  CLRF   x41
0556A:  CLRF   x42
0556C:  CLRF   x43
0556E:  CLRF   x44
05570:  CLRF   x45
05572:  CLRF   x46
05574:  CLRF   x47
05576:  CLRF   x48
05578:  CLRF   x49
0557A:  CLRF   x4A
0557C:  CLRF   x4B
0557E:  CLRF   x4C
05580:  CLRF   x4D
05582:  CLRF   x4E
05584:  CLRF   x4F
05586:  CLRF   x50
05588:  CLRF   x51
0558A:  CLRF   x52
0558C:  CLRF   x53
0558E:  CLRF   x54
05590:  CLRF   x55
05592:  CLRF   x56
05594:  CLRF   x57
05596:  CLRF   x58
05598:  CLRF   x59
0559A:  CLRF   x5A
0559C:  CLRF   x5B
0559E:  CLRF   x5C
055A0:  CLRF   x5D
055A2:  CLRF   x5E
055A4:  CLRF   x5F
055A6:  CLRF   x60
055A8:  CLRF   x61
055AA:  CLRF   x62
055AC:  CLRF   x63
055AE:  CLRF   x64
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
055B0:  MOVFF  F1,A29
055B4:  MOVFF  F0,A28
055B8:  MOVFF  EF,A27
055BC:  MOVFF  EE,A26
055C0:  MOVFF  164,A2D
055C4:  MOVFF  163,A2C
055C8:  MOVFF  162,A2B
055CC:  MOVFF  161,A2A
055D0:  MOVLW  01
055D2:  MOVLB  A
055D4:  MOVWF  x2F
055D6:  MOVLW  65
055D8:  MOVWF  x2E
055DA:  MOVLW  01
055DC:  MOVWF  x31
055DE:  CLRF   x30
055E0:  MOVLB  0
055E2:  CALL   343C
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
055E6:  MOVLB  1
055E8:  MOVF   x5F,W
055EA:  MOVWF  FE9
055EC:  MOVF   x60,W
055EE:  MOVWF  FEA
055F0:  MOVFF  FEF,265
055F4:  MOVFF  265,266
055F8:  MOVLW  02
055FA:  MOVLB  2
055FC:  MOVWF  x67
055FE:  MOVLB  0
05600:  CALL   3DF8
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
05604:  MOVLW  E4
05606:  MOVWF  FF6
05608:  MOVLW  19
0560A:  MOVWF  FF7
0560C:  MOVLW  00
0560E:  MOVWF  FF8
05610:  CALL   1EE8
05614:  GOTO   8EC6 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
05618:  MOVLW  08
0561A:  MOVWF  FF6
0561C:  MOVLW  1A
0561E:  MOVWF  FF7
05620:  MOVLW  00
05622:  MOVWF  FF8
05624:  CALL   1EE8
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
05628:  MOVLB  1
0562A:  MOVF   x5F,W
0562C:  MOVWF  FE9
0562E:  MOVF   x60,W
05630:  MOVWF  FEA
05632:  MOVFF  FEF,1B1
05636:  MOVFF  1B1,266
0563A:  MOVLW  01
0563C:  MOVLB  2
0563E:  MOVWF  x67
05640:  MOVLB  0
05642:  CALL   3DF8
....................    FLASH_PARAM flash_param = {0};
05646:  MOVLB  1
05648:  CLRF   x61
0564A:  CLRF   x62
0564C:  CLRF   x63
0564E:  CLRF   x64
05650:  CLRF   x65
05652:  CLRF   x66
05654:  CLRF   x67
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
05656:  MOVF   x5F,W
05658:  MOVWF  FE9
0565A:  MOVF   x60,W
0565C:  MOVWF  FEA
0565E:  MOVFF  FEF,161
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
05662:  MOVLW  01
05664:  ADDWF  x5F,W
05666:  MOVWF  FE9
05668:  MOVLW  00
0566A:  ADDWFC x60,W
0566C:  MOVWF  FEA
0566E:  MOVF   FEF,W
05670:  CLRF   xB4
05672:  CLRF   xB3
05674:  CLRF   xB2
05676:  MOVWF  xB1
05678:  MOVFF  1B1,1B4
0567C:  CLRF   xB1
0567E:  CLRF   xB2
05680:  CLRF   xB3
05682:  MOVLW  02
05684:  ADDWF  x5F,W
05686:  MOVWF  FE9
05688:  MOVLW  00
0568A:  ADDWFC x60,W
0568C:  MOVWF  FEA
0568E:  MOVF   FEF,W
05690:  CLRF   xB9
05692:  CLRF   xB8
05694:  CLRF   xB7
05696:  MOVWF  xB6
05698:  MOVFF  1B7,03
0569C:  MOVFF  1B6,02
056A0:  CLRF   00
056A2:  CLRF   01
056A4:  MOVF   00,W
056A6:  IORWF  xB1,F
056A8:  MOVF   01,W
056AA:  IORWF  xB2,F
056AC:  MOVF   02,W
056AE:  IORWF  xB3,F
056B0:  MOVF   03,W
056B2:  IORWF  xB4,F
056B4:  MOVLW  03
056B6:  ADDWF  x5F,W
056B8:  MOVWF  FE9
056BA:  MOVLW  00
056BC:  ADDWFC x60,W
056BE:  MOVWF  FEA
056C0:  MOVF   FEF,W
056C2:  CLRF   xB9
056C4:  CLRF   xB8
056C6:  CLRF   xB7
056C8:  MOVWF  xB6
056CA:  MOVFF  1B8,03
056CE:  MOVFF  1B7,02
056D2:  MOVFF  1B6,01
056D6:  CLRF   00
056D8:  MOVF   00,W
056DA:  IORWF  xB1,F
056DC:  MOVF   01,W
056DE:  IORWF  xB2,F
056E0:  MOVF   02,W
056E2:  IORWF  xB3,F
056E4:  MOVF   03,W
056E6:  IORWF  xB4,F
056E8:  MOVLW  04
056EA:  ADDWF  x5F,W
056EC:  MOVWF  FE9
056EE:  MOVLW  00
056F0:  ADDWFC x60,W
056F2:  MOVWF  FEA
056F4:  MOVF   FEF,W
056F6:  MOVWF  00
056F8:  CLRF   01
056FA:  CLRF   02
056FC:  CLRF   03
056FE:  MOVF   00,W
05700:  IORWF  xB1,W
05702:  MOVWF  x64
05704:  MOVF   01,W
05706:  IORWF  xB2,W
05708:  MOVWF  x65
0570A:  MOVF   02,W
0570C:  IORWF  xB3,W
0570E:  MOVWF  x66
05710:  MOVF   03,W
05712:  IORWF  xB4,W
05714:  MOVWF  x67
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
05716:  MOVLW  07
05718:  ADDWF  x5F,W
0571A:  MOVWF  FE9
0571C:  MOVLW  00
0571E:  ADDWFC x60,W
05720:  MOVWF  FEA
05722:  MOVF   FEF,W
05724:  CLRF   xB2
05726:  MOVWF  xB1
05728:  MOVFF  1B1,1B2
0572C:  CLRF   xB1
0572E:  MOVLW  08
05730:  ADDWF  x5F,W
05732:  MOVWF  FE9
05734:  MOVLW  00
05736:  ADDWFC x60,W
05738:  MOVWF  FEA
0573A:  MOVF   FEF,W
0573C:  CLRF   03
0573E:  IORWF  xB1,W
05740:  MOVWF  x62
05742:  MOVF   03,W
05744:  IORWF  xB2,W
05746:  MOVWF  x63
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
05748:  MOVLW  1C
0574A:  MOVWF  FF6
0574C:  MOVLW  1A
0574E:  MOVWF  FF7
05750:  MOVLW  00
05752:  MOVWF  FF8
05754:  MOVLW  0C
05756:  MOVLB  9
05758:  MOVWF  x96
0575A:  MOVLB  0
0575C:  CALL   1F18
05760:  MOVFF  161,996
05764:  MOVLW  37
05766:  MOVLB  9
05768:  MOVWF  x97
0576A:  MOVLB  0
0576C:  CALL   2116
05770:  MOVLW  0D
05772:  MOVLB  A
05774:  MOVWF  x29
05776:  MOVLB  0
05778:  CALL   1E96
0577C:  MOVLW  0A
0577E:  MOVLB  A
05780:  MOVWF  x29
05782:  MOVLB  0
05784:  CALL   1E96
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
05788:  MOVLW  30
0578A:  MOVWF  FF6
0578C:  MOVLW  1A
0578E:  MOVWF  FF7
05790:  MOVLW  00
05792:  MOVWF  FF8
05794:  MOVLW  0E
05796:  MOVLB  9
05798:  MOVWF  x96
0579A:  MOVLB  0
0579C:  CALL   1F18
057A0:  MOVFF  167,996
057A4:  MOVLW  37
057A6:  MOVLB  9
057A8:  MOVWF  x97
057AA:  MOVLB  0
057AC:  CALL   2116
057B0:  MOVFF  166,996
057B4:  MOVLW  37
057B6:  MOVLB  9
057B8:  MOVWF  x97
057BA:  MOVLB  0
057BC:  CALL   2116
057C0:  MOVFF  165,996
057C4:  MOVLW  37
057C6:  MOVLB  9
057C8:  MOVWF  x97
057CA:  MOVLB  0
057CC:  CALL   2116
057D0:  MOVFF  164,996
057D4:  MOVLW  37
057D6:  MOVLB  9
057D8:  MOVWF  x97
057DA:  MOVLB  0
057DC:  CALL   2116
057E0:  MOVLW  0D
057E2:  MOVLB  A
057E4:  MOVWF  x29
057E6:  MOVLB  0
057E8:  CALL   1E96
057EC:  MOVLW  0A
057EE:  MOVLB  A
057F0:  MOVWF  x29
057F2:  MOVLB  0
057F4:  CALL   1E96
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
057F8:  MOVLW  46
057FA:  MOVWF  FF6
057FC:  MOVLW  1A
057FE:  MOVWF  FF7
05800:  MOVLW  00
05802:  MOVWF  FF8
05804:  MOVLW  0E
05806:  MOVLB  9
05808:  MOVWF  x96
0580A:  MOVLB  0
0580C:  CALL   1F18
05810:  MOVFF  163,996
05814:  MOVLW  37
05816:  MOVLB  9
05818:  MOVWF  x97
0581A:  MOVLB  0
0581C:  CALL   2116
05820:  MOVFF  162,996
05824:  MOVLW  37
05826:  MOVLB  9
05828:  MOVWF  x97
0582A:  MOVLB  0
0582C:  CALL   2116
05830:  MOVLW  0D
05832:  MOVLB  A
05834:  MOVWF  x29
05836:  MOVLB  0
05838:  CALL   1E96
0583C:  MOVLW  0A
0583E:  MOVLB  A
05840:  MOVWF  x29
05842:  MOVLB  0
05844:  CALL   1E96
....................    
....................    piclog_make(flash_param.id, 0x00);
05848:  MOVFF  161,266
0584C:  MOVLB  2
0584E:  CLRF   x67
05850:  MOVLB  0
05852:  CALL   3DF8
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
05856:  MOVLB  1
05858:  CLRF   x68
0585A:  CLRF   x69
0585C:  CLRF   x6A
0585E:  CLRF   x6B
05860:  CLRF   x6C
05862:  CLRF   x6D
05864:  CLRF   x6E
05866:  CLRF   x6F
05868:  CLRF   x70
0586A:  CLRF   x71
0586C:  CLRF   x72
0586E:  CLRF   x73
05870:  CLRF   x74
05872:  CLRF   x75
05874:  CLRF   x76
05876:  CLRF   x77
05878:  CLRF   x78
0587A:  CLRF   x79
0587C:  CLRF   x7A
0587E:  CLRF   x7B
05880:  CLRF   x7C
05882:  CLRF   x7D
05884:  CLRF   x7E
05886:  CLRF   x7F
05888:  CLRF   x80
0588A:  CLRF   x81
0588C:  CLRF   x82
0588E:  CLRF   x83
05890:  CLRF   x84
05892:  CLRF   x85
05894:  CLRF   x86
05896:  CLRF   x87
05898:  CLRF   x88
0589A:  CLRF   x89
0589C:  CLRF   x8A
0589E:  CLRF   x8B
058A0:  CLRF   x8C
058A2:  CLRF   x8D
058A4:  CLRF   x8E
058A6:  CLRF   x8F
058A8:  CLRF   x90
058AA:  CLRF   x91
058AC:  CLRF   x92
058AE:  CLRF   x93
058B0:  CLRF   x94
058B2:  CLRF   x95
058B4:  CLRF   x96
058B6:  CLRF   x97
058B8:  CLRF   x98
058BA:  CLRF   x99
058BC:  CLRF   x9A
058BE:  CLRF   x9B
058C0:  CLRF   x9C
058C2:  CLRF   x9D
058C4:  CLRF   x9E
058C6:  CLRF   x9F
058C8:  CLRF   xA0
058CA:  CLRF   xA1
058CC:  CLRF   xA2
058CE:  CLRF   xA3
058D0:  CLRF   xA4
058D2:  CLRF   xA5
058D4:  CLRF   xA6
058D6:  CLRF   xA7
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
058D8:  MOVLW  5C
058DA:  MOVWF  FF6
058DC:  MOVLW  1A
058DE:  MOVWF  FF7
058E0:  MOVLW  00
058E2:  MOVWF  FF8
058E4:  MOVLB  0
058E6:  CALL   1EE8
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
058EA:  MOVFF  F1,A29
058EE:  MOVFF  F0,A28
058F2:  MOVFF  EF,A27
058F6:  MOVFF  EE,A26
058FA:  CALL   2582
058FE:  MOVF   01,F
05900:  BTFSS  FD8.2
05902:  GOTO   5916
....................       fprintf(PC, "Mission Flash is not connected\r\n");
05906:  MOVLW  68
05908:  MOVWF  FF6
0590A:  MOVLW  1A
0590C:  MOVWF  FF7
0590E:  MOVLW  00
05910:  MOVWF  FF8
05912:  CALL   1EE8
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
05916:  MOVLB  1
05918:  CLRF   xAF
0591A:  CLRF   xAE
0591C:  CLRF   xAD
0591E:  CLRF   xAC
05920:  MOVLB  0
05922:  MOVLB  1
05924:  MOVF   xAF,F
05926:  BTFSC  FD8.2
05928:  BRA    5930
0592A:  MOVLB  0
0592C:  GOTO   5A7E
05930:  MOVLB  0
05932:  MOVLB  1
05934:  MOVF   xAE,F
05936:  BTFSC  FD8.2
05938:  BRA    5940
0593A:  MOVLB  0
0593C:  GOTO   5A7E
05940:  MOVLB  0
05942:  MOVLB  1
05944:  MOVF   xAD,W
05946:  SUBWF  x63,W
05948:  BTFSC  FD8.0
0594A:  BRA    5952
0594C:  MOVLB  0
0594E:  GOTO   5A7E
05952:  MOVLB  0
05954:  BTFSS  FD8.2
05956:  GOTO   596C
0595A:  MOVLB  1
0595C:  MOVF   x62,W
0595E:  SUBWF  xAC,W
05960:  BTFSS  FD8.0
05962:  BRA    596A
05964:  MOVLB  0
05966:  GOTO   5A7E
0596A:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
0596C:  MOVLB  1
0596E:  RLCF   xAC,W
05970:  MOVWF  00
05972:  RLCF   xAD,W
05974:  MOVWF  01
05976:  RLCF   xAE,W
05978:  MOVWF  02
0597A:  RLCF   xAF,W
0597C:  MOVWF  03
0597E:  RLCF   00,F
05980:  RLCF   01,F
05982:  RLCF   02,F
05984:  RLCF   03,F
05986:  RLCF   00,F
05988:  RLCF   01,F
0598A:  RLCF   02,F
0598C:  RLCF   03,F
0598E:  RLCF   00,F
05990:  RLCF   01,F
05992:  RLCF   02,F
05994:  RLCF   03,F
05996:  RLCF   00,F
05998:  RLCF   01,F
0599A:  RLCF   02,F
0599C:  RLCF   03,F
0599E:  RLCF   00,F
059A0:  RLCF   01,F
059A2:  RLCF   02,F
059A4:  RLCF   03,F
059A6:  MOVLW  C0
059A8:  ANDWF  00,F
059AA:  MOVF   00,W
059AC:  ADDWF  x64,W
059AE:  MOVWF  xA8
059B0:  MOVF   01,W
059B2:  ADDWFC x65,W
059B4:  MOVWF  xA9
059B6:  MOVF   02,W
059B8:  ADDWFC x66,W
059BA:  MOVWF  xAA
059BC:  MOVF   03,W
059BE:  ADDWFC x67,W
059C0:  MOVWF  xAB
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
059C2:  MOVFF  F1,281
059C6:  MOVFF  F0,280
059CA:  MOVFF  EF,27F
059CE:  MOVFF  EE,27E
059D2:  MOVFF  1AB,285
059D6:  MOVFF  1AA,284
059DA:  MOVFF  1A9,283
059DE:  MOVFF  1A8,282
059E2:  MOVLW  01
059E4:  MOVLB  2
059E6:  MOVWF  x87
059E8:  MOVLW  68
059EA:  MOVWF  x86
059EC:  CLRF   x8B
059EE:  CLRF   x8A
059F0:  CLRF   x89
059F2:  MOVLW  40
059F4:  MOVWF  x88
059F6:  MOVLB  0
059F8:  CALL   2648
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
059FC:  MOVLB  1
059FE:  CLRF   xB0
05A00:  MOVLB  0
05A02:  MOVLB  1
05A04:  MOVF   xB0,W
05A06:  SUBLW  3F
05A08:  BTFSC  FD8.0
05A0A:  BRA    5A12
05A0C:  MOVLB  0
05A0E:  GOTO   5A4E
05A12:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
05A14:  CLRF   03
05A16:  MOVLB  1
05A18:  MOVF   xB0,W
05A1A:  ADDLW  68
05A1C:  MOVWF  FE9
05A1E:  MOVLW  01
05A20:  ADDWFC 03,W
05A22:  MOVWF  FEA
05A24:  MOVFF  FEF,1B1
05A28:  MOVFF  1B1,996
05A2C:  MOVLW  37
05A2E:  MOVLB  9
05A30:  MOVWF  x97
05A32:  MOVLB  0
05A34:  CALL   2116
05A38:  MOVLW  20
05A3A:  MOVLB  A
05A3C:  MOVWF  x29
05A3E:  MOVLB  0
05A40:  CALL   1E96
05A44:  MOVLB  1
05A46:  INCF   xB0,F
05A48:  MOVLB  0
05A4A:  GOTO   5A02
....................       }
....................       fprintf(PC,"\r\n");
05A4E:  MOVLW  0D
05A50:  MOVLB  A
05A52:  MOVWF  x29
05A54:  MOVLB  0
05A56:  CALL   1E96
05A5A:  MOVLW  0A
05A5C:  MOVLB  A
05A5E:  MOVWF  x29
05A60:  MOVLB  0
05A62:  CALL   1E96
05A66:  MOVLW  01
05A68:  MOVLB  1
05A6A:  ADDWF  xAC,F
05A6C:  BTFSC  FD8.0
05A6E:  INCF   xAD,F
05A70:  BTFSC  FD8.2
05A72:  INCF   xAE,F
05A74:  BTFSC  FD8.2
05A76:  INCF   xAF,F
05A78:  MOVLB  0
05A7A:  GOTO   5922
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05A7E:  MOVFF  161,266
05A82:  MOVLW  02
05A84:  MOVLB  2
05A86:  MOVWF  x67
05A88:  MOVLB  0
05A8A:  CALL   3DF8
....................    fprintf(PC, "End Flash Read\r\n");
05A8E:  MOVLW  8A
05A90:  MOVWF  FF6
05A92:  MOVLW  1A
05A94:  MOVWF  FF7
05A96:  MOVLW  00
05A98:  MOVWF  FF8
05A9A:  CALL   1EE8
05A9E:  GOTO   8ED6 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
05AA2:  MOVLW  9C
05AA4:  MOVWF  FF6
05AA6:  MOVLW  1A
05AA8:  MOVWF  FF7
05AAA:  MOVLW  00
05AAC:  MOVWF  FF8
05AAE:  CALL   1EE8
....................    flash_setting(mis_fm);
05AB2:  MOVFF  F1,26C
05AB6:  MOVFF  F0,26B
05ABA:  MOVFF  EF,26A
05ABE:  MOVFF  EE,269
05AC2:  CALL   532A
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
05AC6:  MOVLB  1
05AC8:  CLRF   x64
05ACA:  CLRF   x63
05ACC:  CLRF   x62
05ACE:  CLRF   x61
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
05AD0:  MOVFF  F1,281
05AD4:  MOVFF  F0,280
05AD8:  MOVFF  EF,27F
05ADC:  MOVFF  EE,27E
05AE0:  MOVFF  164,285
05AE4:  MOVFF  163,284
05AE8:  MOVFF  162,283
05AEC:  MOVFF  161,282
05AF0:  MOVLW  01
05AF2:  MOVLB  2
05AF4:  MOVWF  x87
05AF6:  MOVLW  65
05AF8:  MOVWF  x86
05AFA:  CLRF   x8B
05AFC:  CLRF   x8A
05AFE:  CLRF   x89
05B00:  MOVLW  04
05B02:  MOVWF  x88
05B04:  MOVLB  0
05B06:  CALL   2648
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
05B0A:  MOVLW  B8
05B0C:  MOVWF  FF6
05B0E:  MOVLW  1A
05B10:  MOVWF  FF7
05B12:  MOVLW  00
05B14:  MOVWF  FF8
05B16:  MOVLW  0B
05B18:  MOVLB  9
05B1A:  MOVWF  x96
05B1C:  MOVLB  0
05B1E:  CALL   1F18
05B22:  MOVFF  165,996
05B26:  MOVLW  37
05B28:  MOVLB  9
05B2A:  MOVWF  x97
05B2C:  MOVLB  0
05B2E:  CALL   2116
05B32:  MOVLW  20
05B34:  MOVLB  A
05B36:  MOVWF  x29
05B38:  MOVLB  0
05B3A:  CALL   1E96
05B3E:  MOVFF  166,996
05B42:  MOVLW  37
05B44:  MOVLB  9
05B46:  MOVWF  x97
05B48:  MOVLB  0
05B4A:  CALL   2116
05B4E:  MOVLW  20
05B50:  MOVLB  A
05B52:  MOVWF  x29
05B54:  MOVLB  0
05B56:  CALL   1E96
05B5A:  MOVFF  167,996
05B5E:  MOVLW  37
05B60:  MOVLB  9
05B62:  MOVWF  x97
05B64:  MOVLB  0
05B66:  CALL   2116
05B6A:  MOVLW  20
05B6C:  MOVLB  A
05B6E:  MOVWF  x29
05B70:  MOVLB  0
05B72:  CALL   1E96
05B76:  MOVFF  168,996
05B7A:  MOVLW  37
05B7C:  MOVLB  9
05B7E:  MOVWF  x97
05B80:  MOVLB  0
05B82:  CALL   2116
05B86:  MOVLW  0D
05B88:  MOVLB  A
05B8A:  MOVWF  x29
05B8C:  MOVLB  0
05B8E:  CALL   1E96
05B92:  MOVLW  0A
05B94:  MOVLB  A
05B96:  MOVWF  x29
05B98:  MOVLB  0
05B9A:  CALL   1E96
....................    fprintf(PC, "End Flash Read Address\r\n");
05B9E:  MOVLW  DA
05BA0:  MOVWF  FF6
05BA2:  MOVLW  1A
05BA4:  MOVWF  FF7
05BA6:  MOVLW  00
05BA8:  MOVWF  FF8
05BAA:  CALL   1EE8
05BAE:  GOTO   8EE6 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
05CC6:  MOVLW  F4
05CC8:  MOVWF  FF6
05CCA:  MOVLW  1A
05CCC:  MOVWF  FF7
05CCE:  MOVLW  00
05CD0:  MOVWF  FF8
05CD2:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05CD6:  MOVLB  1
05CD8:  MOVF   x5F,W
05CDA:  MOVWF  FE9
05CDC:  MOVF   x60,W
05CDE:  MOVWF  FEA
05CE0:  MOVFF  FEF,161
05CE4:  MOVFF  161,266
05CE8:  MOVLW  01
05CEA:  MOVLB  2
05CEC:  MOVWF  x67
05CEE:  MOVLB  0
05CF0:  CALL   3DF8
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
05CF4:  MOVFF  160,162
05CF8:  MOVFF  15F,161
05CFC:  CALL   49EC
....................    mode_misf_address_reset(parameter); // Reset the address area
05D00:  MOVFF  160,162
05D04:  MOVFF  15F,161
05D08:  GOTO   5BB2
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
05D0C:  MOVLW  12
05D0E:  MOVWF  FF6
05D10:  MOVLW  1B
05D12:  MOVWF  FF7
05D14:  MOVLW  00
05D16:  MOVWF  FF8
05D18:  CALL   1EE8
05D1C:  GOTO   8EF6 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
05D20:  MOVLW  64
05D22:  MOVWF  FF6
05D24:  MOVLW  1B
05D26:  MOVWF  FF7
05D28:  MOVLW  00
05D2A:  MOVWF  FF8
05D2C:  CALL   1EE8
....................    flash_setting(mis_fm);
05D30:  MOVFF  F1,26C
05D34:  MOVFF  F0,26B
05D38:  MOVFF  EF,26A
05D3C:  MOVFF  EE,269
05D40:  CALL   532A
....................    flash_setting(smf);
05D44:  MOVFF  F5,26C
05D48:  MOVFF  F4,26B
05D4C:  MOVFF  F3,26A
05D50:  MOVFF  F2,269
05D54:  CALL   532A
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
05D58:  MOVLB  1
05D5A:  CLRF   x64
05D5C:  CLRF   x63
05D5E:  CLRF   x62
05D60:  CLRF   x61
05D62:  CLRF   x68
05D64:  CLRF   x67
05D66:  MOVLW  10
05D68:  MOVWF  x66
05D6A:  CLRF   x65
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
05D6C:  MOVFF  F1,281
05D70:  MOVFF  F0,280
05D74:  MOVFF  EF,27F
05D78:  MOVFF  EE,27E
05D7C:  MOVFF  164,285
05D80:  MOVFF  163,284
05D84:  MOVFF  162,283
05D88:  MOVFF  161,282
05D8C:  MOVLW  01
05D8E:  MOVLB  2
05D90:  MOVWF  x87
05D92:  MOVLW  69
05D94:  MOVWF  x86
05D96:  CLRF   x8B
05D98:  CLRF   x8A
05D9A:  MOVLW  01
05D9C:  MOVWF  x89
05D9E:  CLRF   x88
05DA0:  MOVLB  0
05DA2:  CALL   2648
....................    write_data_bytes(smf, dest_address, read_data, 256);
05DA6:  MOVFF  F5,A29
05DAA:  MOVFF  F4,A28
05DAE:  MOVFF  F3,A27
05DB2:  MOVFF  F2,A26
05DB6:  MOVFF  168,A2D
05DBA:  MOVFF  167,A2C
05DBE:  MOVFF  166,A2B
05DC2:  MOVFF  165,A2A
05DC6:  MOVLW  01
05DC8:  MOVLB  A
05DCA:  MOVWF  x2F
05DCC:  MOVLW  69
05DCE:  MOVWF  x2E
05DD0:  MOVLW  01
05DD2:  MOVWF  x31
05DD4:  CLRF   x30
05DD6:  MOVLB  0
05DD8:  CALL   343C
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
05DDC:  MOVLW  7C
05DDE:  MOVWF  FF6
05DE0:  MOVLW  1B
05DE2:  MOVWF  FF7
05DE4:  MOVLW  00
05DE6:  MOVWF  FF8
05DE8:  CALL   1EE8
05DEC:  GOTO   8F06 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
05DF0:  MOVLW  92
05DF2:  MOVWF  FF6
05DF4:  MOVLW  1B
05DF6:  MOVWF  FF7
05DF8:  MOVLW  00
05DFA:  MOVWF  FF8
05DFC:  CALL   1EE8
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
05E00:  MOVLW  AA
05E02:  MOVWF  FF6
05E04:  MOVLW  1B
05E06:  MOVWF  FF7
05E08:  MOVLW  00
05E0A:  MOVWF  FF8
05E0C:  CALL   1EE8
....................    for (int i = 0; i < 256; i++)
05E10:  MOVLB  2
05E12:  CLRF   x61
05E14:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
05E16:  CLRF   03
05E18:  MOVLB  2
05E1A:  MOVF   x61,W
05E1C:  ADDLW  61
05E1E:  MOVWF  FE9
05E20:  MOVLW  01
05E22:  ADDWFC 03,W
05E24:  MOVWF  FEA
05E26:  MOVFF  FEF,262
05E2A:  MOVFF  262,996
05E2E:  MOVLW  37
05E30:  MOVLB  9
05E32:  MOVWF  x97
05E34:  MOVLB  0
05E36:  CALL   2116
05E3A:  MOVLW  20
05E3C:  MOVLB  A
05E3E:  MOVWF  x29
05E40:  MOVLB  0
05E42:  CALL   1E96
05E46:  MOVLB  2
05E48:  INCF   x61,F
05E4A:  MOVLB  0
05E4C:  GOTO   5E16
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
05E50:  MOVLW  B6
05E52:  MOVWF  FF6
05E54:  MOVLW  1B
05E56:  MOVWF  FF7
05E58:  MOVLW  00
05E5A:  MOVWF  FF8
05E5C:  CALL   1EE8
05E60:  GOTO   8F16 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
05E64:  MOVLW  CE
05E66:  MOVWF  FF6
05E68:  MOVLW  1B
05E6A:  MOVWF  FF7
05E6C:  MOVLW  00
05E6E:  MOVWF  FF8
05E70:  CALL   1EE8
....................    flash_setting(smf);
05E74:  MOVFF  F5,26C
05E78:  MOVFF  F4,26B
05E7C:  MOVFF  F3,26A
05E80:  MOVFF  F2,269
05E84:  CALL   532A
....................    unsigned int32 erase_address = 0x00000000; // Example address
05E88:  MOVLB  1
05E8A:  CLRF   x64
05E8C:  CLRF   x63
05E8E:  CLRF   x62
05E90:  CLRF   x61
....................    sector_erase(smf, erase_address); // Erase the sector
05E92:  MOVFF  F5,1A8
05E96:  MOVFF  F4,1A7
05E9A:  MOVFF  F3,1A6
05E9E:  MOVFF  F2,1A5
05EA2:  MOVFF  164,1AC
05EA6:  MOVFF  163,1AB
05EAA:  MOVFF  162,1AA
05EAE:  MOVFF  161,1A9
05EB2:  MOVLB  0
05EB4:  CALL   4690
....................    fprintf(PC, "End Flash SMF Erase\r\n");
05EB8:  MOVLW  E6
05EBA:  MOVWF  FF6
05EBC:  MOVLW  1B
05EBE:  MOVWF  FF7
05EC0:  MOVLW  00
05EC2:  MOVWF  FF8
05EC4:  CALL   1EE8
05EC8:  GOTO   8F26 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
05BB2:  MOVLW  FC
05BB4:  MOVWF  FF6
05BB6:  MOVLW  1B
05BB8:  MOVWF  FF7
05BBA:  MOVLW  00
05BBC:  MOVWF  FF8
05BBE:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05BC2:  MOVLB  1
05BC4:  MOVF   x61,W
05BC6:  MOVWF  FE9
05BC8:  MOVF   x62,W
05BCA:  MOVWF  FEA
05BCC:  MOVFF  FEF,1A3
05BD0:  MOVFF  1A3,266
05BD4:  MOVLW  01
05BD6:  MOVLB  2
05BD8:  MOVWF  x67
05BDA:  MOVLB  0
05BDC:  CALL   3DF8
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05BE0:  MOVLB  1
05BE2:  CLRF   x63
05BE4:  CLRF   x64
05BE6:  CLRF   x65
05BE8:  CLRF   x66
05BEA:  CLRF   x67
05BEC:  CLRF   x68
05BEE:  CLRF   x69
05BF0:  CLRF   x6A
05BF2:  CLRF   x6B
05BF4:  CLRF   x6C
05BF6:  CLRF   x6D
05BF8:  CLRF   x6E
05BFA:  CLRF   x6F
05BFC:  CLRF   x70
05BFE:  CLRF   x71
05C00:  CLRF   x72
05C02:  CLRF   x73
05C04:  CLRF   x74
05C06:  CLRF   x75
05C08:  CLRF   x76
05C0A:  CLRF   x77
05C0C:  CLRF   x78
05C0E:  CLRF   x79
05C10:  CLRF   x7A
05C12:  CLRF   x7B
05C14:  CLRF   x7C
05C16:  CLRF   x7D
05C18:  CLRF   x7E
05C1A:  CLRF   x7F
05C1C:  CLRF   x80
05C1E:  CLRF   x81
05C20:  CLRF   x82
05C22:  CLRF   x83
05C24:  CLRF   x84
05C26:  CLRF   x85
05C28:  CLRF   x86
05C2A:  CLRF   x87
05C2C:  CLRF   x88
05C2E:  CLRF   x89
05C30:  CLRF   x8A
05C32:  CLRF   x8B
05C34:  CLRF   x8C
05C36:  CLRF   x8D
05C38:  CLRF   x8E
05C3A:  CLRF   x8F
05C3C:  CLRF   x90
05C3E:  CLRF   x91
05C40:  CLRF   x92
05C42:  CLRF   x93
05C44:  CLRF   x94
05C46:  CLRF   x95
05C48:  CLRF   x96
05C4A:  CLRF   x97
05C4C:  CLRF   x98
05C4E:  CLRF   x99
05C50:  CLRF   x9A
05C52:  CLRF   x9B
05C54:  CLRF   x9C
05C56:  CLRF   x9D
05C58:  CLRF   x9E
05C5A:  CLRF   x9F
05C5C:  CLRF   xA0
05C5E:  CLRF   xA1
05C60:  CLRF   xA2
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
05C62:  MOVFF  F1,A29
05C66:  MOVFF  F0,A28
05C6A:  MOVFF  EF,A27
05C6E:  MOVFF  EE,A26
05C72:  MOVLB  A
05C74:  CLRF   x2D
05C76:  CLRF   x2C
05C78:  CLRF   x2B
05C7A:  CLRF   x2A
05C7C:  MOVLW  01
05C7E:  MOVWF  x2F
05C80:  MOVLW  63
05C82:  MOVWF  x2E
05C84:  CLRF   x31
05C86:  MOVLW  40
05C88:  MOVWF  x30
05C8A:  MOVLB  0
05C8C:  CALL   343C
....................    misf_init(); // Update the address area after writing
05C90:  CALL   292E
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05C94:  MOVLB  1
05C96:  MOVF   x61,W
05C98:  MOVWF  FE9
05C9A:  MOVF   x62,W
05C9C:  MOVWF  FEA
05C9E:  MOVFF  FEF,1A3
05CA2:  MOVFF  1A3,266
05CA6:  MOVLW  02
05CA8:  MOVLB  2
05CAA:  MOVWF  x67
05CAC:  MOVLB  0
05CAE:  CALL   3DF8
....................    fprintf(PC, "End Flash Address Reset\r\n");
05CB2:  MOVLW  18
05CB4:  MOVWF  FF6
05CB6:  MOVLW  1C
05CB8:  MOVWF  FF7
05CBA:  MOVLW  00
05CBC:  MOVWF  FF8
05CBE:  CALL   1EE8
05CC2:  GOTO   5D0C (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
06082:  MOVLW  01
06084:  MOVLB  1
06086:  ADDWF  x5F,W
06088:  MOVWF  FE9
0608A:  MOVLW  00
0608C:  ADDWFC x60,W
0608E:  MOVWF  FEA
06090:  MOVF   FEF,W
06092:  CLRF   xB1
06094:  CLRF   xB0
06096:  CLRF   xAF
06098:  MOVWF  xAE
0609A:  MOVFF  1AE,1B1
0609E:  CLRF   xAE
060A0:  CLRF   xAF
060A2:  CLRF   xB0
060A4:  MOVLW  02
060A6:  ADDWF  x5F,W
060A8:  MOVWF  FE9
060AA:  MOVLW  00
060AC:  ADDWFC x60,W
060AE:  MOVWF  FEA
060B0:  MOVF   FEF,W
060B2:  CLRF   xB6
060B4:  CLRF   xB5
060B6:  CLRF   xB4
060B8:  MOVWF  xB3
060BA:  MOVFF  1B4,03
060BE:  MOVFF  1B3,02
060C2:  CLRF   00
060C4:  CLRF   01
060C6:  MOVF   00,W
060C8:  IORWF  xAE,F
060CA:  MOVF   01,W
060CC:  IORWF  xAF,F
060CE:  MOVF   02,W
060D0:  IORWF  xB0,F
060D2:  MOVF   03,W
060D4:  IORWF  xB1,F
060D6:  MOVLW  03
060D8:  ADDWF  x5F,W
060DA:  MOVWF  FE9
060DC:  MOVLW  00
060DE:  ADDWFC x60,W
060E0:  MOVWF  FEA
060E2:  MOVF   FEF,W
060E4:  CLRF   xB6
060E6:  CLRF   xB5
060E8:  CLRF   xB4
060EA:  MOVWF  xB3
060EC:  MOVFF  1B5,03
060F0:  MOVFF  1B4,02
060F4:  MOVFF  1B3,01
060F8:  CLRF   00
060FA:  MOVF   00,W
060FC:  IORWF  xAE,F
060FE:  MOVF   01,W
06100:  IORWF  xAF,F
06102:  MOVF   02,W
06104:  IORWF  xB0,F
06106:  MOVF   03,W
06108:  IORWF  xB1,F
0610A:  MOVLW  04
0610C:  ADDWF  x5F,W
0610E:  MOVWF  FE9
06110:  MOVLW  00
06112:  ADDWFC x60,W
06114:  MOVWF  FEA
06116:  MOVF   FEF,W
06118:  MOVWF  00
0611A:  CLRF   01
0611C:  CLRF   02
0611E:  CLRF   03
06120:  MOVF   00,W
06122:  IORWF  xAE,W
06124:  MOVWF  x61
06126:  MOVF   01,W
06128:  IORWF  xAF,W
0612A:  MOVWF  x62
0612C:  MOVF   02,W
0612E:  IORWF  xB0,W
06130:  MOVWF  x63
06132:  MOVF   03,W
06134:  IORWF  xB1,W
06136:  MOVWF  x64
06138:  MOVLW  07
0613A:  ADDWF  x5F,W
0613C:  MOVWF  FE9
0613E:  MOVLW  00
06140:  ADDWFC x60,W
06142:  MOVWF  FEA
06144:  MOVF   FEF,W
06146:  CLRF   xAF
06148:  MOVWF  xAE
0614A:  MOVFF  1AE,1AF
0614E:  CLRF   xAE
06150:  MOVLW  08
06152:  ADDWF  x5F,W
06154:  MOVWF  FE9
06156:  MOVLW  00
06158:  ADDWFC x60,W
0615A:  MOVWF  FEA
0615C:  MOVF   FEF,W
0615E:  CLRF   03
06160:  IORWF  xAE,W
06162:  MOVWF  x65
06164:  MOVF   03,W
06166:  IORWF  xAF,W
06168:  MOVWF  x66
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
0616A:  CLRF   x67
0616C:  CLRF   x68
0616E:  CLRF   x69
06170:  CLRF   x6A
06172:  CLRF   x6B
06174:  CLRF   x6C
06176:  CLRF   x6D
06178:  CLRF   x6E
0617A:  CLRF   x6F
0617C:  CLRF   x70
0617E:  CLRF   x71
06180:  CLRF   x72
06182:  CLRF   x73
06184:  CLRF   x74
06186:  CLRF   x75
06188:  CLRF   x76
0618A:  CLRF   x77
0618C:  CLRF   x78
0618E:  CLRF   x79
06190:  CLRF   x7A
06192:  CLRF   x7B
06194:  CLRF   x7C
06196:  CLRF   x7D
06198:  CLRF   x7E
0619A:  CLRF   x7F
0619C:  CLRF   x80
0619E:  CLRF   x81
061A0:  CLRF   x82
061A2:  CLRF   x83
061A4:  CLRF   x84
061A6:  CLRF   x85
061A8:  CLRF   x86
061AA:  CLRF   x87
061AC:  CLRF   x88
061AE:  CLRF   x89
061B0:  CLRF   x8A
061B2:  CLRF   x8B
061B4:  CLRF   x8C
061B6:  CLRF   x8D
061B8:  CLRF   x8E
061BA:  CLRF   x8F
061BC:  CLRF   x90
061BE:  CLRF   x91
061C0:  CLRF   x92
061C2:  CLRF   x93
061C4:  CLRF   x94
061C6:  CLRF   x95
061C8:  CLRF   x96
061CA:  CLRF   x97
061CC:  CLRF   x98
061CE:  CLRF   x99
061D0:  CLRF   x9A
061D2:  CLRF   x9B
061D4:  CLRF   x9C
061D6:  CLRF   x9D
061D8:  CLRF   x9E
061DA:  CLRF   x9F
061DC:  CLRF   xA0
061DE:  CLRF   xA1
061E0:  CLRF   xA2
061E2:  CLRF   xA3
061E4:  CLRF   xA4
061E6:  CLRF   xA5
061E8:  CLRF   xA6
....................    if(!is_connect(smf)) {
061EA:  MOVFF  F5,A29
061EE:  MOVFF  F4,A28
061F2:  MOVFF  F3,A27
061F6:  MOVFF  F2,A26
061FA:  MOVLB  0
061FC:  CALL   2582
06200:  MOVF   01,F
06202:  BTFSS  FD8.2
06204:  GOTO   621C
....................       fprintf(PC, "SMF is not connected\r\n");
06208:  MOVLW  32
0620A:  MOVWF  FF6
0620C:  MOVLW  1C
0620E:  MOVWF  FF7
06210:  MOVLW  00
06212:  MOVWF  FF8
06214:  CALL   1EE8
....................       return;
06218:  GOTO   6468
....................    }
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
0621C:  MOVLW  4A
0621E:  MOVWF  FF6
06220:  MOVLW  1C
06222:  MOVWF  FF7
06224:  MOVLW  00
06226:  MOVWF  FF8
06228:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0622C:  MOVLB  1
0622E:  MOVF   x5F,W
06230:  MOVWF  FE9
06232:  MOVF   x60,W
06234:  MOVWF  FEA
06236:  MOVFF  FEF,1AE
0623A:  MOVFF  1AE,266
0623E:  MOVLW  01
06240:  MOVLB  2
06242:  MOVWF  x67
06244:  MOVLB  0
06246:  CALL   3DF8
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
0624A:  MOVLW  68
0624C:  MOVWF  FF6
0624E:  MOVLW  1C
06250:  MOVWF  FF7
06252:  MOVLW  00
06254:  MOVWF  FF8
06256:  MOVLW  0E
06258:  MOVLB  9
0625A:  MOVWF  x96
0625C:  MOVLB  0
0625E:  CALL   1F18
06262:  MOVFF  164,996
06266:  MOVLW  37
06268:  MOVLB  9
0626A:  MOVWF  x97
0626C:  MOVLB  0
0626E:  CALL   2116
06272:  MOVFF  163,996
06276:  MOVLW  37
06278:  MOVLB  9
0627A:  MOVWF  x97
0627C:  MOVLB  0
0627E:  CALL   2116
06282:  MOVFF  162,996
06286:  MOVLW  37
06288:  MOVLB  9
0628A:  MOVWF  x97
0628C:  MOVLB  0
0628E:  CALL   2116
06292:  MOVFF  161,996
06296:  MOVLW  37
06298:  MOVLB  9
0629A:  MOVWF  x97
0629C:  MOVLB  0
0629E:  CALL   2116
062A2:  MOVLW  0D
062A4:  MOVLB  A
062A6:  MOVWF  x29
062A8:  MOVLB  0
062AA:  CALL   1E96
062AE:  MOVLW  0A
062B0:  MOVLB  A
062B2:  MOVWF  x29
062B4:  MOVLB  0
062B6:  CALL   1E96
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
062BA:  MOVLW  7E
062BC:  MOVWF  FF6
062BE:  MOVLW  1C
062C0:  MOVWF  FF7
062C2:  MOVLW  00
062C4:  MOVWF  FF8
062C6:  MOVLW  0E
062C8:  MOVLB  9
062CA:  MOVWF  x96
062CC:  MOVLB  0
062CE:  CALL   1F18
062D2:  MOVFF  166,996
062D6:  MOVLW  37
062D8:  MOVLB  9
062DA:  MOVWF  x97
062DC:  MOVLB  0
062DE:  CALL   2116
062E2:  MOVFF  165,996
062E6:  MOVLW  37
062E8:  MOVLB  9
062EA:  MOVWF  x97
062EC:  MOVLB  0
062EE:  CALL   2116
062F2:  MOVLW  0D
062F4:  MOVLB  A
062F6:  MOVWF  x29
062F8:  MOVLB  0
062FA:  CALL   1E96
062FE:  MOVLW  0A
06300:  MOVLB  A
06302:  MOVWF  x29
06304:  MOVLB  0
06306:  CALL   1E96
....................    fprintf(PC, "read data\r\n");
0630A:  MOVLW  94
0630C:  MOVWF  FF6
0630E:  MOVLW  1C
06310:  MOVWF  FF7
06312:  MOVLW  00
06314:  MOVWF  FF8
06316:  CALL   1EE8
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
0631A:  MOVLB  1
0631C:  CLRF   xA8
0631E:  CLRF   xA7
06320:  MOVLB  0
06322:  MOVLB  1
06324:  MOVF   xA8,W
06326:  SUBWF  x66,W
06328:  BTFSC  FD8.0
0632A:  BRA    6332
0632C:  MOVLB  0
0632E:  GOTO   643A
06332:  MOVLB  0
06334:  BTFSS  FD8.2
06336:  GOTO   634C
0633A:  MOVLB  1
0633C:  MOVF   x65,W
0633E:  SUBWF  xA7,W
06340:  BTFSS  FD8.0
06342:  BRA    634A
06344:  MOVLB  0
06346:  GOTO   643A
0634A:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
0634C:  MOVLB  1
0634E:  RLCF   xA7,W
06350:  MOVWF  02
06352:  RLCF   xA8,W
06354:  MOVWF  03
06356:  RLCF   02,F
06358:  RLCF   03,F
0635A:  RLCF   02,F
0635C:  RLCF   03,F
0635E:  RLCF   02,F
06360:  RLCF   03,F
06362:  RLCF   02,F
06364:  RLCF   03,F
06366:  RLCF   02,F
06368:  RLCF   03,F
0636A:  MOVLW  C0
0636C:  ANDWF  02,F
0636E:  MOVF   02,W
06370:  ADDWF  x61,W
06372:  MOVWF  xA9
06374:  MOVF   03,W
06376:  ADDWFC x62,W
06378:  MOVWF  xAA
0637A:  MOVLW  00
0637C:  ADDWFC x63,W
0637E:  MOVWF  xAB
06380:  MOVLW  00
06382:  ADDWFC x64,W
06384:  MOVWF  xAC
06386:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
06388:  MOVFF  F5,281
0638C:  MOVFF  F4,280
06390:  MOVFF  F3,27F
06394:  MOVFF  F2,27E
06398:  MOVFF  1AC,285
0639C:  MOVFF  1AB,284
063A0:  MOVFF  1AA,283
063A4:  MOVFF  1A9,282
063A8:  MOVLW  01
063AA:  MOVLB  2
063AC:  MOVWF  x87
063AE:  MOVLW  67
063B0:  MOVWF  x86
063B2:  CLRF   x8B
063B4:  CLRF   x8A
063B6:  CLRF   x89
063B8:  MOVLW  40
063BA:  MOVWF  x88
063BC:  MOVLB  0
063BE:  CALL   2648
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
063C2:  MOVLB  1
063C4:  CLRF   xAD
063C6:  MOVLB  0
063C8:  MOVLB  1
063CA:  MOVF   xAD,W
063CC:  SUBLW  3F
063CE:  BTFSC  FD8.0
063D0:  BRA    63D8
063D2:  MOVLB  0
063D4:  GOTO   6414
063D8:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
063DA:  CLRF   03
063DC:  MOVLB  1
063DE:  MOVF   xAD,W
063E0:  ADDLW  67
063E2:  MOVWF  FE9
063E4:  MOVLW  01
063E6:  ADDWFC 03,W
063E8:  MOVWF  FEA
063EA:  MOVFF  FEF,1AE
063EE:  MOVFF  1AE,996
063F2:  MOVLW  37
063F4:  MOVLB  9
063F6:  MOVWF  x97
063F8:  MOVLB  0
063FA:  CALL   2116
063FE:  MOVLW  20
06400:  MOVLB  A
06402:  MOVWF  x29
06404:  MOVLB  0
06406:  CALL   1E96
0640A:  MOVLB  1
0640C:  INCF   xAD,F
0640E:  MOVLB  0
06410:  GOTO   63C8
....................       }
....................       fprintf(PC, "\r\n");
06414:  MOVLW  0D
06416:  MOVLB  A
06418:  MOVWF  x29
0641A:  MOVLB  0
0641C:  CALL   1E96
06420:  MOVLW  0A
06422:  MOVLB  A
06424:  MOVWF  x29
06426:  MOVLB  0
06428:  CALL   1E96
0642C:  MOVLB  1
0642E:  INCF   xA7,F
06430:  BTFSC  FD8.2
06432:  INCF   xA8,F
06434:  MOVLB  0
06436:  GOTO   6322
....................    }
.................... 
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
0643A:  MOVLW  A0
0643C:  MOVWF  FF6
0643E:  MOVLW  1C
06440:  MOVWF  FF7
06442:  MOVLW  00
06444:  MOVWF  FF8
06446:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0644A:  MOVLB  1
0644C:  MOVF   x5F,W
0644E:  MOVWF  FE9
06450:  MOVF   x60,W
06452:  MOVWF  FEA
06454:  MOVFF  FEF,1AE
06458:  MOVFF  1AE,266
0645C:  MOVLW  02
0645E:  MOVLB  2
06460:  MOVWF  x67
06462:  MOVLB  0
06464:  CALL   3DF8
06468:  GOTO   8F46 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
0646C:  MOVLW  BE
0646E:  MOVWF  FF6
06470:  MOVLW  1C
06472:  MOVWF  FF7
06474:  MOVLW  00
06476:  MOVWF  FF8
06478:  CALL   1EE8
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
0647C:  MOVLB  1
0647E:  MOVF   x5F,W
06480:  MOVWF  FE9
06482:  MOVF   x60,W
06484:  MOVWF  FEA
06486:  MOVFF  FEF,161
....................    piclog_make(cmd, 0x00); // Log the command execution
0648A:  MOVFF  161,266
0648E:  MOVLB  2
06490:  CLRF   x67
06492:  MOVLB  0
06494:  CALL   3DF8
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
06498:  MOVLB  1
0649A:  CLRF   x65
0649C:  CLRF   x64
0649E:  CLRF   x63
064A0:  CLRF   x62
064A2:  MOVLB  0
064A4:  MOVLB  1
064A6:  MOVF   x65,F
064A8:  BTFSC  FD8.2
064AA:  BRA    64B2
064AC:  MOVLB  0
064AE:  GOTO   6512
064B2:  MOVLB  0
064B4:  MOVLB  1
064B6:  MOVF   x64,W
064B8:  SUBLW  F4
064BA:  BTFSC  FD8.0
064BC:  BRA    64C4
064BE:  MOVLB  0
064C0:  GOTO   6512
064C4:  MOVLB  0
064C6:  BTFSS  FD8.2
064C8:  GOTO   64DE
064CC:  MOVLB  1
064CE:  MOVF   x63,W
064D0:  SUBLW  23
064D2:  BTFSC  FD8.0
064D4:  BRA    64DC
064D6:  MOVLB  0
064D8:  GOTO   6512
064DC:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
064DE:  MOVFF  F5,1A8
064E2:  MOVFF  F4,1A7
064E6:  MOVFF  F3,1A6
064EA:  MOVFF  F2,1A5
064EE:  MOVFF  165,1AC
064F2:  MOVFF  164,1AB
064F6:  MOVFF  163,1AA
064FA:  MOVFF  162,1A9
064FE:  CALL   4690
06502:  MOVLW  01
06504:  MOVLB  1
06506:  ADDWF  x64,F
06508:  MOVLW  00
0650A:  ADDWFC x65,F
0650C:  MOVLB  0
0650E:  GOTO   64A4
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
06512:  MOVFF  161,266
06516:  MOVLW  02
06518:  MOVLB  2
0651A:  MOVWF  x67
0651C:  MOVLB  0
0651E:  CALL   3DF8
....................    fprintf(PC, "End SMF Erase All\r\n");
06522:  MOVLW  D4
06524:  MOVWF  FF6
06526:  MOVLW  1C
06528:  MOVWF  FF7
0652A:  MOVLW  00
0652C:  MOVWF  FF8
0652E:  CALL   1EE8
06532:  GOTO   8F56 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
05ED0:  MOVLW  E8
05ED2:  MOVWF  FF6
05ED4:  MOVLW  1C
05ED6:  MOVWF  FF7
05ED8:  MOVLW  00
05EDA:  MOVWF  FF8
05EDC:  CALL   1EE8
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05EE0:  MOVLB  1
05EE2:  MOVF   x5F,W
05EE4:  MOVWF  FE9
05EE6:  MOVF   x60,W
05EE8:  MOVWF  FEA
05EEA:  MOVFF  FEF,1A5
05EEE:  MOVFF  1A5,266
05EF2:  MOVLW  01
05EF4:  MOVLB  2
05EF6:  MOVWF  x67
05EF8:  MOVLB  0
05EFA:  CALL   3DF8
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05EFE:  MOVLB  1
05F00:  CLRF   x61
05F02:  CLRF   x62
05F04:  CLRF   x63
05F06:  CLRF   x64
05F08:  CLRF   x65
05F0A:  CLRF   x66
05F0C:  CLRF   x67
05F0E:  CLRF   x68
05F10:  CLRF   x69
05F12:  CLRF   x6A
05F14:  CLRF   x6B
05F16:  CLRF   x6C
05F18:  CLRF   x6D
05F1A:  CLRF   x6E
05F1C:  CLRF   x6F
05F1E:  CLRF   x70
05F20:  CLRF   x71
05F22:  CLRF   x72
05F24:  CLRF   x73
05F26:  CLRF   x74
05F28:  CLRF   x75
05F2A:  CLRF   x76
05F2C:  CLRF   x77
05F2E:  CLRF   x78
05F30:  CLRF   x79
05F32:  CLRF   x7A
05F34:  CLRF   x7B
05F36:  CLRF   x7C
05F38:  CLRF   x7D
05F3A:  CLRF   x7E
05F3C:  CLRF   x7F
05F3E:  CLRF   x80
05F40:  CLRF   x81
05F42:  CLRF   x82
05F44:  CLRF   x83
05F46:  CLRF   x84
05F48:  CLRF   x85
05F4A:  CLRF   x86
05F4C:  CLRF   x87
05F4E:  CLRF   x88
05F50:  CLRF   x89
05F52:  CLRF   x8A
05F54:  CLRF   x8B
05F56:  CLRF   x8C
05F58:  CLRF   x8D
05F5A:  CLRF   x8E
05F5C:  CLRF   x8F
05F5E:  CLRF   x90
05F60:  CLRF   x91
05F62:  CLRF   x92
05F64:  CLRF   x93
05F66:  CLRF   x94
05F68:  CLRF   x95
05F6A:  CLRF   x96
05F6C:  CLRF   x97
05F6E:  CLRF   x98
05F70:  CLRF   x99
05F72:  CLRF   x9A
05F74:  CLRF   x9B
05F76:  CLRF   x9C
05F78:  CLRF   x9D
05F7A:  CLRF   x9E
05F7C:  CLRF   x9F
05F7E:  CLRF   xA0
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
05F80:  MOVLW  04
05F82:  MOVWF  xA4
05F84:  MOVLW  EC
05F86:  MOVWF  xA3
05F88:  CLRF   xA2
05F8A:  CLRF   xA1
05F8C:  MOVLB  0
05F8E:  MOVLB  1
05F90:  MOVF   xA4,W
05F92:  SUBLW  05
05F94:  BTFSC  FD8.0
05F96:  BRA    5F9E
05F98:  MOVLB  0
05F9A:  GOTO   601C
05F9E:  MOVLB  0
05FA0:  BTFSS  FD8.2
05FA2:  GOTO   5FE8
05FA6:  MOVLB  1
05FA8:  MOVF   xA3,W
05FAA:  SUBLW  6B
05FAC:  BTFSC  FD8.0
05FAE:  BRA    5FB6
05FB0:  MOVLB  0
05FB2:  GOTO   601C
05FB6:  MOVLB  0
05FB8:  BTFSS  FD8.2
05FBA:  GOTO   5FE8
05FBE:  MOVLB  1
05FC0:  MOVF   xA2,W
05FC2:  SUBLW  FF
05FC4:  BTFSC  FD8.0
05FC6:  BRA    5FCE
05FC8:  MOVLB  0
05FCA:  GOTO   601C
05FCE:  MOVLB  0
05FD0:  BTFSS  FD8.2
05FD2:  GOTO   5FE8
05FD6:  MOVLB  1
05FD8:  MOVF   xA1,W
05FDA:  SUBLW  FE
05FDC:  BTFSC  FD8.0
05FDE:  BRA    5FE6
05FE0:  MOVLB  0
05FE2:  GOTO   601C
05FE6:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
05FE8:  MOVFF  F5,1A8
05FEC:  MOVFF  F4,1A7
05FF0:  MOVFF  F3,1A6
05FF4:  MOVFF  F2,1A5
05FF8:  MOVFF  1A4,1AC
05FFC:  MOVFF  1A3,1AB
06000:  MOVFF  1A2,1AA
06004:  MOVFF  1A1,1A9
06008:  CALL   4690
0600C:  MOVLW  01
0600E:  MOVLB  1
06010:  ADDWF  xA3,F
06012:  MOVLW  00
06014:  ADDWFC xA4,F
06016:  MOVLB  0
06018:  GOTO   5F8E
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
0601C:  MOVFF  F5,A29
06020:  MOVFF  F4,A28
06024:  MOVFF  F3,A27
06028:  MOVFF  F2,A26
0602C:  MOVLW  04
0602E:  MOVLB  A
06030:  MOVWF  x2D
06032:  MOVLW  EC
06034:  MOVWF  x2C
06036:  CLRF   x2B
06038:  CLRF   x2A
0603A:  MOVLW  01
0603C:  MOVWF  x2F
0603E:  MOVLW  61
06040:  MOVWF  x2E
06042:  CLRF   x31
06044:  MOVLW  40
06046:  MOVWF  x30
06048:  MOVLB  0
0604A:  CALL   343C
....................    smf_init(); // Update the address area after writing
0604E:  GOTO   5ECC
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06052:  MOVLB  1
06054:  MOVF   x5F,W
06056:  MOVWF  FE9
06058:  MOVF   x60,W
0605A:  MOVWF  FEA
0605C:  MOVFF  FEF,1A5
06060:  MOVFF  1A5,266
06064:  MOVLW  02
06066:  MOVLB  2
06068:  MOVWF  x67
0606A:  MOVLB  0
0606C:  CALL   3DF8
....................    fprintf(PC, "End SMF Reset\r\n");
06070:  MOVLW  FA
06072:  MOVWF  FF6
06074:  MOVLW  1C
06076:  MOVWF  FF7
06078:  MOVLW  00
0607A:  MOVWF  FF8
0607C:  CALL   1EE8
06080:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
0B476:  CLRF   FF8
0B478:  BCF    FD0.7
0B47A:  BSF    07.7
0B47C:  MOVLB  E
0B47E:  MOVLW  55
0B480:  MOVWF  F7E
0B482:  MOVLW  AA
0B484:  MOVWF  F7E
0B486:  BCF    F66.6
0B488:  MOVLW  F9
0B48A:  MOVWF  x2C
0B48C:  MOVLW  00
0B48E:  MOVWF  x2E
0B490:  MOVLW  40
0B492:  MOVWF  x12
0B494:  MOVLW  30
0B496:  MOVWF  x13
0B498:  MOVLW  20
0B49A:  MOVWF  x22
0B49C:  MOVLW  55
0B49E:  MOVWF  F7E
0B4A0:  MOVLW  AA
0B4A2:  MOVWF  F7E
0B4A4:  BSF    F66.6
0B4A6:  CLRF   F9B
0B4A8:  CLRF   F64
0B4AA:  CLRF   F65
0B4AC:  CLRF   F66
0B4AE:  MOVLW  02
0B4B0:  MOVWF  FD3
0B4B2:  CLRF   1B
0B4B4:  MOVLB  F
0B4B6:  BSF    x2D.3
0B4B8:  MOVLW  A0
0B4BA:  MOVWF  x2B
0B4BC:  MOVLW  01
0B4BE:  MOVWF  x2C
0B4C0:  MOVLW  A6
0B4C2:  MOVWF  x2E
0B4C4:  MOVLW  90
0B4C6:  MOVWF  x2F
0B4C8:  BCF    F93.6
0B4CA:  BSF    F8A.6
0B4CC:  BCF    FC6.5
0B4CE:  MOVLW  40
0B4D0:  MOVWF  FC7
0B4D2:  MOVLW  13
0B4D4:  MOVWF  FC8
0B4D6:  MOVLW  2A
0B4D8:  MOVWF  FC6
0B4DA:  BCF    F92.1
0B4DC:  BSF    F92.0
0B4DE:  BCF    F92.3
0B4E0:  BSF    F96.4
0B4E2:  BCF    F96.1
0B4E4:  BCF    F95.7
0B4E6:  BCF    F8C.7
0B4E8:  BSF    F93.4
0B4EA:  BCF    F93.5
0B4EC:  BCF    F93.2
0B4EE:  BCF    F8A.2
0B4F0:  CLRF   1F
0B4F2:  CLRF   1E
0B4F4:  CLRF   1D
0B4F6:  CLRF   1C
0B4F8:  CLRF   23
0B4FA:  CLRF   22
0B4FC:  CLRF   21
0B4FE:  CLRF   20
0B500:  CLRF   25
0B502:  CLRF   24
0B504:  CLRF   46
0B506:  BCF    47.0
0B508:  MOVLB  1
0B50A:  CLRF   x19
0B50C:  MOVLW  1E
0B50E:  MOVWF  x1E
0B510:  CLRF   x20
0B512:  CLRF   x1F
0B514:  MOVLB  E
0B516:  CLRF   xD9
0B518:  CLRF   xDA
0B51A:  CLRF   xCE
0B51C:  CLRF   xCF
0B51E:  CLRF   xD0
0B520:  CLRF   xD1
0B522:  CLRF   xD2
0B524:  CLRF   xD3
0B526:  CLRF   xD4
0B528:  CLRF   xD5
0B52A:  CLRF   x45
0B52C:  CLRF   x46
0B52E:  CLRF   x47
0B530:  BCF    x8D.7
0B532:  BCF    x8D.6
0B534:  BCF    x8D.5
0B536:  MOVLB  F
0B538:  CLRF   x53
0B53A:  CLRF   x38
0B53C:  CLRF   x37
0B53E:  MOVLB  0
0B540:  CLRF   26
0B542:  CLRF   27
0B544:  CLRF   28
0B546:  CLRF   29
0B548:  CLRF   2A
0B54A:  CLRF   2B
0B54C:  CLRF   2C
0B54E:  CLRF   2D
0B550:  CLRF   2E
0B552:  CLRF   2F
0B554:  CLRF   30
0B556:  CLRF   31
0B558:  CLRF   32
0B55A:  CLRF   33
0B55C:  CLRF   34
0B55E:  CLRF   35
0B560:  CLRF   36
0B562:  CLRF   37
0B564:  CLRF   38
0B566:  CLRF   39
0B568:  CLRF   3A
0B56A:  CLRF   3B
0B56C:  CLRF   3C
0B56E:  CLRF   3D
0B570:  CLRF   3E
0B572:  CLRF   3F
0B574:  CLRF   40
0B576:  CLRF   41
0B578:  CLRF   42
0B57A:  CLRF   43
0B57C:  CLRF   44
0B57E:  CLRF   45
0B580:  MOVLW  03
0B582:  MOVWF  48
0B584:  CLRF   49
0B586:  CLRF   4A
0B588:  CLRF   4B
0B58A:  CLRF   4C
0B58C:  CLRF   4D
0B58E:  CLRF   4E
0B590:  CLRF   4F
0B592:  CLRF   50
0B594:  CLRF   51
0B596:  CLRF   52
0B598:  CLRF   53
0B59A:  CLRF   54
0B59C:  CLRF   55
0B59E:  CLRF   56
0B5A0:  CLRF   57
0B5A2:  CLRF   58
0B5A4:  CLRF   59
0B5A6:  CLRF   5A
0B5A8:  CLRF   5B
0B5AA:  CLRF   5C
0B5AC:  CLRF   5D
0B5AE:  CLRF   5E
0B5B0:  CLRF   5F
0B5B2:  CLRF   x60
0B5B4:  CLRF   x61
0B5B6:  CLRF   x62
0B5B8:  CLRF   x63
0B5BA:  CLRF   x64
0B5BC:  CLRF   x65
0B5BE:  CLRF   x66
0B5C0:  CLRF   x67
0B5C2:  CLRF   x68
0B5C4:  CLRF   x69
0B5C6:  CLRF   x6A
0B5C8:  CLRF   x6B
0B5CA:  CLRF   x6C
0B5CC:  CLRF   x6D
0B5CE:  CLRF   x6E
0B5D0:  CLRF   x6F
0B5D2:  CLRF   x70
0B5D4:  CLRF   x71
0B5D6:  CLRF   x72
0B5D8:  CLRF   x73
0B5DA:  CLRF   x74
0B5DC:  CLRF   x75
0B5DE:  CLRF   x76
0B5E0:  CLRF   x77
0B5E2:  CLRF   x78
0B5E4:  CLRF   x79
0B5E6:  CLRF   x7A
0B5E8:  CLRF   x7B
0B5EA:  CLRF   x7C
0B5EC:  CLRF   x7D
0B5EE:  CLRF   x7E
0B5F0:  CLRF   x7F
0B5F2:  CLRF   x80
0B5F4:  CLRF   x81
0B5F6:  CLRF   x82
0B5F8:  CLRF   x83
0B5FA:  CLRF   x84
0B5FC:  CLRF   x85
0B5FE:  CLRF   x86
0B600:  CLRF   x87
0B602:  CLRF   x88
0B604:  CLRF   x89
0B606:  CLRF   x8A
0B608:  CLRF   x8B
0B60A:  CLRF   x8C
0B60C:  CLRF   x8D
0B60E:  CLRF   x8E
0B610:  CLRF   x8F
0B612:  CLRF   x90
0B614:  CLRF   x91
0B616:  CLRF   x92
0B618:  CLRF   x93
0B61A:  CLRF   x94
0B61C:  CLRF   x95
0B61E:  CLRF   x96
0B620:  CLRF   x97
0B622:  CLRF   x98
0B624:  CLRF   x99
0B626:  CLRF   x9A
0B628:  CLRF   x9B
0B62A:  CLRF   x9C
0B62C:  CLRF   x9D
0B62E:  CLRF   x9E
0B630:  CLRF   x9F
0B632:  CLRF   xA0
0B634:  CLRF   xA1
0B636:  CLRF   xA2
0B638:  CLRF   xA3
0B63A:  CLRF   xA4
0B63C:  CLRF   xA5
0B63E:  CLRF   xA6
0B640:  CLRF   xA7
0B642:  CLRF   xA8
0B644:  CLRF   xA9
0B646:  CLRF   xAA
0B648:  CLRF   xAB
0B64A:  CLRF   xAC
0B64C:  CLRF   xAD
0B64E:  CLRF   xAE
0B650:  CLRF   xAF
0B652:  CLRF   xB0
0B654:  CLRF   xB1
0B656:  CLRF   xB2
0B658:  CLRF   xB3
0B65A:  CLRF   xB4
0B65C:  CLRF   xB5
0B65E:  CLRF   xB6
0B660:  CLRF   xB7
0B662:  CLRF   xB8
0B664:  CLRF   xB9
0B666:  CLRF   xBA
0B668:  CLRF   xBB
0B66A:  CLRF   xBC
0B66C:  CLRF   xBD
0B66E:  CLRF   xBE
0B670:  CLRF   xBF
0B672:  CLRF   xC0
0B674:  CLRF   xC1
0B676:  CLRF   xC2
0B678:  CLRF   xC3
0B67A:  CLRF   xC4
0B67C:  CLRF   xC5
0B67E:  CLRF   xC6
0B680:  CLRF   xC7
0B682:  CLRF   xC8
0B684:  CLRF   xC9
0B686:  CLRF   xCA
0B688:  CLRF   xCB
0B68A:  CLRF   xCC
0B68C:  CLRF   xCD
0B68E:  CLRF   xCE
0B690:  CLRF   xCF
0B692:  CLRF   xD0
0B694:  CLRF   xD1
0B696:  CLRF   xD2
0B698:  CLRF   xD3
0B69A:  CLRF   xD4
0B69C:  CLRF   xD5
0B69E:  CLRF   xD6
0B6A0:  CLRF   xD7
0B6A2:  CLRF   xD8
0B6A4:  CLRF   xD9
0B6A6:  CLRF   xDA
0B6A8:  CLRF   xDB
0B6AA:  CLRF   xDC
0B6AC:  CLRF   xDD
0B6AE:  CLRF   xDE
0B6B0:  CLRF   xDF
0B6B2:  CLRF   xE0
0B6B4:  CLRF   xE1
0B6B6:  CLRF   xE2
0B6B8:  CLRF   xE3
0B6BA:  CLRF   xE4
0B6BC:  CLRF   xE5
0B6BE:  CLRF   xE6
0B6C0:  CLRF   xE7
0B6C2:  CLRF   xE8
0B6C4:  CLRF   xE9
0B6C6:  CLRF   xEA
0B6C8:  CLRF   xEB
0B6CA:  CLRF   xEC
0B6CC:  CLRF   xED
0B6CE:  CLRF   xEE
0B6D0:  CLRF   xEF
0B6D2:  MOVLW  05
0B6D4:  MOVWF  xF0
0B6D6:  MOVLW  7C
0B6D8:  MOVWF  xF1
0B6DA:  MOVLW  01
0B6DC:  MOVWF  xF2
0B6DE:  MOVLW  01
0B6E0:  MOVWF  xF3
0B6E2:  MOVLW  02
0B6E4:  MOVWF  xF4
0B6E6:  MOVLW  7C
0B6E8:  MOVWF  xF5
0B6EA:  CLRF   xF6
0B6EC:  MOVLW  09
0B6EE:  MOVWF  xF7
0B6F0:  MOVLW  01
0B6F2:  MOVWF  xF8
0B6F4:  CLRF   xF9
0B6F6:  MOVLW  02
0B6F8:  MOVWF  xFA
0B6FA:  MOVLW  01
0B6FC:  MOVWF  xFB
0B6FE:  MOVLB  1
0B700:  CLRF   x1A
0B702:  CLRF   x1B
0B704:  CLRF   x1C
0B706:  CLRF   x1D
0B708:  CLRF   x21
0B70A:  CLRF   x22
0B70C:  CLRF   x23
0B70E:  CLRF   x24
0B710:  CLRF   x25
0B712:  CLRF   x26
0B714:  CLRF   x27
0B716:  CLRF   x28
0B718:  CLRF   x29
0B71A:  CLRF   x2A
0B71C:  CLRF   x2B
0B71E:  CLRF   x2C
0B720:  CLRF   x2D
0B722:  CLRF   x2E
0B724:  CLRF   x2F
0B726:  CLRF   x30
0B728:  CLRF   x31
0B72A:  CLRF   x32
0B72C:  CLRF   x33
0B72E:  CLRF   x34
0B730:  CLRF   x35
0B732:  CLRF   x36
0B734:  CLRF   x37
0B736:  CLRF   x38
0B738:  CLRF   x39
0B73A:  CLRF   x3A
0B73C:  CLRF   x3B
0B73E:  CLRF   x3C
0B740:  CLRF   x3D
0B742:  CLRF   x3E
0B744:  CLRF   x3F
0B746:  CLRF   x40
0B748:  CLRF   x41
0B74A:  CLRF   x42
0B74C:  CLRF   x43
0B74E:  CLRF   x44
0B750:  CLRF   x45
0B752:  CLRF   x46
0B754:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
0B756:  MOVLW  64
0B758:  MOVLB  A
0B75A:  MOVWF  x3E
0B75C:  MOVLB  0
0B75E:  CALL   1E68
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
0B762:  MOVLW  0A
0B764:  MOVWF  FF6
0B766:  MOVLW  1D
0B768:  MOVWF  FF7
0B76A:  MOVLW  00
0B76C:  MOVWF  FF8
0B76E:  CALL   1EE8
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM4.\r\n");
0B772:  MOVLW  50
0B774:  MOVWF  FF6
0B776:  MOVLW  1D
0B778:  MOVWF  FF7
0B77A:  MOVLW  00
0B77C:  MOVWF  FF8
0B77E:  CALL   1EE8
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
0B782:  MOVLW  7E
0B784:  MOVWF  FF6
0B786:  MOVLW  1D
0B788:  MOVWF  FF7
0B78A:  MOVLW  00
0B78C:  MOVWF  FF8
0B78E:  MOVLW  10
0B790:  MOVLB  9
0B792:  MOVWF  x96
0B794:  MOVLB  0
0B796:  CALL   1F18
0B79A:  MOVLW  A4
0B79C:  MOVWF  FF6
0B79E:  MOVLW  1D
0B7A0:  MOVWF  FF7
0B7A2:  MOVLW  00
0B7A4:  MOVWF  FF8
0B7A6:  CALL   1EE8
0B7AA:  MOVLW  20
0B7AC:  MOVLB  A
0B7AE:  MOVWF  x29
0B7B0:  MOVLB  0
0B7B2:  CALL   1E96
0B7B6:  MOVLW  AE
0B7B8:  MOVWF  FF6
0B7BA:  MOVLW  1D
0B7BC:  MOVWF  FF7
0B7BE:  MOVLW  00
0B7C0:  MOVWF  FF8
0B7C2:  CALL   1EE8
0B7C6:  MOVLW  93
0B7C8:  MOVWF  FF6
0B7CA:  MOVLW  1D
0B7CC:  MOVWF  FF7
0B7CE:  MOVLW  00
0B7D0:  MOVWF  FF8
0B7D2:  MOVLW  0F
0B7D4:  MOVLB  9
0B7D6:  MOVWF  x96
0B7D8:  MOVLB  0
0B7DA:  CALL   1F18
....................    
....................    //io_init();
....................    setup_uart_to_boss();
0B7DE:  GOTO   1F4E
....................    setup_timer();
0B7E2:  GOTO   1F78
....................    ad7490_init();
0B7E6:  GOTO   2186
....................    misf_init();
0B7EA:  CALL   292E
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
0B7EE:  MOVFF  119,266
0B7F2:  MOVLB  2
0B7F4:  CLRF   x67
0B7F6:  MOVLB  0
0B7F8:  CALL   3DF8
.................... 
....................    int1 is_finished = FALSE;
0B7FC:  MOVLB  1
0B7FE:  BCF    x49.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
0B800:  MOVLW  B8
0B802:  MOVWF  FF6
0B804:  MOVLW  1D
0B806:  MOVWF  FF7
0B808:  MOVLW  00
0B80A:  MOVWF  FF8
0B80C:  MOVLB  0
0B80E:  CALL   1EE8
....................    
....................    output_low(EN_NPWR);
0B812:  BCF    F94.7
0B814:  BCF    F8B.7
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
0B816:  MOVLW  DE
0B818:  MOVWF  FF6
0B81A:  MOVLW  1D
0B81C:  MOVWF  FF7
0B81E:  MOVLW  00
0B820:  MOVWF  FF8
0B822:  CALL   1EE8
....................    
....................    //Start loop
....................    while(!is_finished)
0B826:  MOVLB  1
0B828:  BTFSS  x49.0
0B82A:  BRA    B832
0B82C:  MOVLB  0
0B82E:  GOTO   B900
0B832:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0B834:  MOVF   46,F
0B836:  BTFSC  FD8.2
0B838:  GOTO   B8BC
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
0B83C:  MOVLB  1
0B83E:  CLRF   x5D
0B840:  MOVLW  26
0B842:  MOVWF  x5C
0B844:  MOVFF  46,15E
0B848:  MOVLB  0
0B84A:  GOTO   42C2
0B84E:  MOVFF  02,03
0B852:  MOVF   01,W
0B854:  MOVWF  FE1
0B856:  MOVFF  03,FE2
0B85A:  MOVLW  01
0B85C:  MOVWF  FEA
0B85E:  MOVLW  4A
0B860:  MOVWF  FE9
0B862:  MOVLW  0C
0B864:  MOVWF  01
0B866:  MOVFF  FE6,FEE
0B86A:  DECFSZ 01,F
0B86C:  GOTO   B866
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0B870:  MOVLB  1
0B872:  CLRF   x57
0B874:  MOVLW  26
0B876:  MOVWF  x56
0B878:  CLRF   x59
0B87A:  MOVLW  46
0B87C:  MOVWF  x58
0B87E:  MOVLB  0
0B880:  GOTO   44E2
....................          
....................          if(recieve_cmd.is_exist)
0B884:  MOVLB  1
0B886:  BTFSC  x4C.0
0B888:  BRA    B890
0B88A:  MOVLB  0
0B88C:  GOTO   B8AC
0B890:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0B892:  MOVLW  01
0B894:  MOVLB  1
0B896:  MOVWF  x57
0B898:  MOVLW  4A
0B89A:  MOVWF  x56
0B89C:  MOVLB  0
0B89E:  GOTO   B3F4
0B8A2:  MOVLB  1
0B8A4:  BCF    x49.1
0B8A6:  BTFSC  01.0
0B8A8:  BSF    x49.1
0B8AA:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0B8AC:  MOVLW  FC
0B8AE:  MOVWF  FF6
0B8B0:  MOVLW  1D
0B8B2:  MOVWF  FF7
0B8B4:  MOVLW  00
0B8B6:  MOVWF  FF8
0B8B8:  CALL   1EE8
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0B8BC:  MOVLB  1
0B8BE:  BTFSC  x49.0
0B8C0:  BRA    B8C8
0B8C2:  MOVLB  0
0B8C4:  GOTO   B8CE
0B8C8:  MOVLB  0
....................          break;
0B8CA:  GOTO   B900
....................          
....................       delay_ms(400);
0B8CE:  MOVLW  02
0B8D0:  MOVLB  1
0B8D2:  MOVWF  x56
0B8D4:  MOVLB  0
0B8D6:  MOVLW  C8
0B8D8:  MOVLB  A
0B8DA:  MOVWF  x3E
0B8DC:  MOVLB  0
0B8DE:  CALL   1E68
0B8E2:  MOVLB  1
0B8E4:  DECFSZ x56,F
0B8E6:  BRA    B8EC
0B8E8:  BRA    B8F0
0B8EA:  MOVLB  0
0B8EC:  MOVLB  0
0B8EE:  BRA    B8D6
....................       fprintf(PC, ".");
0B8F0:  MOVLW  2E
0B8F2:  MOVLB  A
0B8F4:  MOVWF  x29
0B8F6:  MOVLB  0
0B8F8:  CALL   1E96
0B8FC:  GOTO   B826
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0B900:  MOVLW  1C
0B902:  MOVWF  FF6
0B904:  MOVLW  1E
0B906:  MOVWF  FF7
0B908:  MOVLW  00
0B90A:  MOVWF  FF8
0B90C:  CALL   1EE8
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0B910:  MOVLW  2E
0B912:  MOVLB  A
0B914:  MOVWF  x29
0B916:  MOVLB  0
0B918:  CALL   1E96
....................       delay_ms(1000);
0B91C:  MOVLW  04
0B91E:  MOVLB  1
0B920:  MOVWF  x56
0B922:  MOVLB  0
0B924:  MOVLW  FA
0B926:  MOVLB  A
0B928:  MOVWF  x3E
0B92A:  MOVLB  0
0B92C:  CALL   1E68
0B930:  MOVLB  1
0B932:  DECFSZ x56,F
0B934:  BRA    B93A
0B936:  BRA    B93E
0B938:  MOVLB  0
0B93A:  MOVLB  0
0B93C:  BRA    B924
0B93E:  MOVLB  0
0B940:  GOTO   B910
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0B944:  MOVLW  5C
0B946:  MOVWF  FF6
0B948:  MOVLW  1E
0B94A:  MOVWF  FF7
0B94C:  MOVLW  00
0B94E:  MOVWF  FF8
0B950:  CALL   1EE8
....................    
.................... }
.................... 
0B954:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
