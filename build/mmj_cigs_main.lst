CCS PCH C Compiler, Version 5.104, 57077               07-8-25 16:28

               Filename:   build\mmj_cigs_main.lst

               ROM used:   42568 bytes (32%)
                           Largest free fragment is 65520
               RAM used:   955 (27%) at main() level
                           2217 (62%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   9CA6
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,43
001AE:  DATA 6F,6E
001B0:  DATA 6E,65
001B2:  DATA 63,74
001B4:  DATA 20,65
001B6:  DATA 72,72
001B8:  DATA 6F,72
001BA:  DATA 21,0D
001BC:  DATA 0A,00
001BE:  DATA 09,43
001C0:  DATA 6F,6E
001C2:  DATA 6E,65
001C4:  DATA 63,74
001C6:  DATA 20,73
001C8:  DATA 75,63
001CA:  DATA 63,65
001CC:  DATA 73,73
001CE:  DATA 66,75
001D0:  DATA 6C,0D
001D2:  DATA 0A,00
001D4:  DATA 09,43
001D6:  DATA 6F,6D
001D8:  DATA 70,6C
001DA:  DATA 65,74
001DC:  DATA 65,0D
001DE:  DATA 0A,00
001E0:  DATA 4D,43
001E2:  DATA 50,34
001E4:  DATA 39,30
001E6:  DATA 31,20
001E8:  DATA 49,6E
001EA:  DATA 69,74
001EC:  DATA 69,61
001EE:  DATA 6C,69
001F0:  DATA 7A,65
001F2:  DATA 0D,0A
001F4:  DATA 00,00
001F6:  DATA 09,5B
001F8:  DATA 44,41
001FA:  DATA 43,20
001FC:  DATA 50,6F
001FE:  DATA 72,74
00200:  DATA 20,31
00202:  DATA 5D,20
00204:  DATA 43,6F
00206:  DATA 6E,6E
00208:  DATA 65,63
0020A:  DATA 74,20
0020C:  DATA 65,72
0020E:  DATA 72,6F
00210:  DATA 72,21
00212:  DATA 0D,0A
00214:  DATA 00,00
00216:  DATA 09,5B
00218:  DATA 44,41
0021A:  DATA 43,20
0021C:  DATA 50,6F
0021E:  DATA 72,74
00220:  DATA 20,31
00222:  DATA 5D,20
00224:  DATA 43,6F
00226:  DATA 6E,6E
00228:  DATA 65,63
0022A:  DATA 74,20
0022C:  DATA 73,75
0022E:  DATA 63,63
00230:  DATA 65,73
00232:  DATA 73,66
00234:  DATA 75,6C
00236:  DATA 0D,0A
00238:  DATA 00,00
0023A:  DATA 09,5B
0023C:  DATA 44,41
0023E:  DATA 43,20
00240:  DATA 50,6F
00242:  DATA 72,74
00244:  DATA 20,32
00246:  DATA 5D,20
00248:  DATA 43,6F
0024A:  DATA 6E,6E
0024C:  DATA 65,63
0024E:  DATA 74,20
00250:  DATA 65,72
00252:  DATA 72,6F
00254:  DATA 72,21
00256:  DATA 0D,0A
00258:  DATA 00,00
0025A:  DATA 09,5B
0025C:  DATA 44,41
0025E:  DATA 43,20
00260:  DATA 50,6F
00262:  DATA 72,74
00264:  DATA 20,32
00266:  DATA 5D,20
00268:  DATA 43,6F
0026A:  DATA 6E,6E
0026C:  DATA 65,63
0026E:  DATA 74,20
00270:  DATA 73,75
00272:  DATA 63,63
00274:  DATA 65,73
00276:  DATA 73,66
00278:  DATA 75,6C
0027A:  DATA 0D,0A
0027C:  DATA 00,00
0027E:  DATA 09,43
00280:  DATA 6F,6D
00282:  DATA 70,6C
00284:  DATA 65,74
00286:  DATA 65,0D
00288:  DATA 0A,00
0028A:  DATA 53,4D
0028C:  DATA 46,20
0028E:  DATA 64,61
00290:  DATA 74,61
00292:  DATA 20,6C
00294:  DATA 69,73
00296:  DATA 74,20
00298:  DATA 69,73
0029A:  DATA 20,66
0029C:  DATA 75,6C
0029E:  DATA 6C,21
002A0:  DATA 21,21
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 53,4D
002A8:  DATA 46,20
002AA:  DATA 64,61
002AC:  DATA 74,61
002AE:  DATA 20,6C
002B0:  DATA 69,73
002B2:  DATA 74,20
002B4:  DATA 69,73
002B6:  DATA 20,65
002B8:  DATA 6D,70
002BA:  DATA 74,79
002BC:  DATA 0D,0A
002BE:  DATA 00,00
002C0:  DATA 0D,0A
002C2:  DATA 53,74
002C4:  DATA 61,72
002C6:  DATA 74,20
002C8:  DATA 6D,61
002CA:  DATA 6B,65
002CC:  DATA 5F,72
002CE:  DATA 65,63
002D0:  DATA 65,69
002D2:  DATA 76,65
002D4:  DATA 5F,63
002D6:  DATA 6F,6D
002D8:  DATA 6D,61
002DA:  DATA 6E,64
002DC:  DATA 0D,0A
002DE:  DATA 00,00
002E0:  DATA 09,5B
002E2:  DATA 42,4F
002E4:  DATA 53,53
002E6:  DATA 5D,20
002E8:  DATA 3E,3E
002EA:  DATA 3E,20
002EC:  DATA 00,00
002EE:  DATA 45,6E
002F0:  DATA 64,20
002F2:  DATA 6D,61
002F4:  DATA 6B,65
002F6:  DATA 5F,72
002F8:  DATA 65,63
002FA:  DATA 69,76
002FC:  DATA 65,5F
002FE:  DATA 63,6F
00300:  DATA 6D,6D
00302:  DATA 61,6E
00304:  DATA 64,0D
00306:  DATA 0A,0D
00308:  DATA 0A,00
0030A:  DATA 73,69
0030C:  DATA 67,6E
0030E:  DATA 61,6C
00310:  DATA 20,65
00312:  DATA 6E,64
00314:  DATA 20,77
00316:  DATA 69,74
00318:  DATA 68,20
0031A:  DATA 53,46
0031C:  DATA 44,0D
0031E:  DATA 0A,00
00320:  DATA 64,6F
00322:  DATA 6E,27
00324:  DATA 74,20
00326:  DATA 66,69
00328:  DATA 6E,64
0032A:  DATA 20,53
0032C:  DATA 46,44
0032E:  DATA 0D,0A
00330:  DATA 00,00
00332:  DATA 09,2D
00334:  DATA 3E,20
00336:  DATA 49,6E
00338:  DATA 76,61
0033A:  DATA 6C,69
0033C:  DATA 64,20
0033E:  DATA 46,72
00340:  DATA 61,6D
00342:  DATA 65,20
00344:  DATA 49,44
00346:  DATA 20,72
00348:  DATA 65,63
0034A:  DATA 65,69
0034C:  DATA 76,65
0034E:  DATA 64,3A
00350:  DATA 20,25
00352:  DATA 58,0D
00354:  DATA 0A,00
00356:  DATA 09,2D
00358:  DATA 3E,20
0035A:  DATA 43,52
0035C:  DATA 43,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,09
0036A:  DATA 2D,3E
0036C:  DATA 20,72
0036E:  DATA 65,63
00370:  DATA 65,69
00372:  DATA 76,65
00374:  DATA 64,20
00376:  DATA 43,52
00378:  DATA 43,3A
0037A:  DATA 20,25
0037C:  DATA 58,0D
0037E:  DATA 0A,00
00380:  DATA 09,09
00382:  DATA 20,20
00384:  DATA 20,63
00386:  DATA 6F,6C
00388:  DATA 6C,65
0038A:  DATA 63,74
0038C:  DATA 20,43
0038E:  DATA 52,43
00390:  DATA 20,3A
00392:  DATA 20,25
00394:  DATA 58,0D
00396:  DATA 0A,00
00398:  DATA 09,2D
0039A:  DATA 3E,20
0039C:  DATA 49,6E
0039E:  DATA 76,61
003A0:  DATA 6C,69
003A2:  DATA 64,20
003A4:  DATA 64,65
003A6:  DATA 76,69
003A8:  DATA 63,65
003AA:  DATA 20,49
003AC:  DATA 44,20
003AE:  DATA 72,65
003B0:  DATA 63,65
003B2:  DATA 69,76
003B4:  DATA 65,64
003B6:  DATA 0D,0A
003B8:  DATA 00,00
003BA:  DATA 09,09
003BC:  DATA 2D,3E
003BE:  DATA 20,72
003C0:  DATA 65,63
003C2:  DATA 65,69
003C4:  DATA 76,65
003C6:  DATA 64,3A
003C8:  DATA 20,20
003CA:  DATA 20,20
003CC:  DATA 20,25
003CE:  DATA 58,0D
003D0:  DATA 0A,00
003D2:  DATA 09,09
003D4:  DATA 20,20
003D6:  DATA 20,4D
003D8:  DATA 79,20
003DA:  DATA 64,65
003DC:  DATA 76,69
003DE:  DATA 63,65
003E0:  DATA 20,49
003E2:  DATA 44,3A
003E4:  DATA 20,25
003E6:  DATA 58,0D
003E8:  DATA 0A,00
003EA:  DATA 09,5B
003EC:  DATA 42,4F
003EE:  DATA 53,53
003F0:  DATA 5D,20
003F2:  DATA 3C,3C
003F4:  DATA 3C,20
003F6:  DATA 00,00
003F8:  DATA 53,74
003FA:  DATA 61,72
003FC:  DATA 74,20
003FE:  DATA 53,4D
00400:  DATA 46,20
00402:  DATA 75,73
00404:  DATA 69,6E
00406:  DATA 67,20
00408:  DATA 72,65
0040A:  DATA 71,65
0040C:  DATA 73,74
0040E:  DATA 20,73
00410:  DATA 65,61
00412:  DATA 71,75
00414:  DATA 65,6E
00416:  DATA 63,65
00418:  DATA 0D,0A
0041A:  DATA 00,00
0041C:  DATA 45,72
0041E:  DATA 72,6F
00420:  DATA 72,21
00422:  DATA 20,52
00424:  DATA 65,63
00426:  DATA 65,69
00428:  DATA 76,69
0042A:  DATA 6E,67
0042C:  DATA 20,63
0042E:  DATA 6F,6D
00430:  DATA 6D,61
00432:  DATA 6E,64
00434:  DATA 20,69
00436:  DATA 6E,63
00438:  DATA 6F,6E
0043A:  DATA 73,69
0043C:  DATA 73,74
0043E:  DATA 65,6E
00440:  DATA 74,20
00442:  DATA 77,69
00444:  DATA 74,68
00446:  DATA 20,74
00448:  DATA 68,65
0044A:  DATA 20,64
0044C:  DATA 65,73
0044E:  DATA 69,67
00450:  DATA 6E,0D
00452:  DATA 0A,00
00454:  DATA 53,4D
00456:  DATA 46,20
00458:  DATA 75,73
0045A:  DATA 65,20
0045C:  DATA 72,65
0045E:  DATA 71,75
00460:  DATA 65,73
00462:  DATA 74,20
00464:  DATA 61,6C
00466:  DATA 6C,6F
00468:  DATA 77,65
0046A:  DATA 64,0D
0046C:  DATA 0A,00
0046E:  DATA 53,4D
00470:  DATA 46,20
00472:  DATA 75,73
00474:  DATA 65,20
00476:  DATA 72,65
00478:  DATA 71,75
0047A:  DATA 65,73
0047C:  DATA 74,20
0047E:  DATA 64,65
00480:  DATA 6E,79
00482:  DATA 65,64
00484:  DATA 0D,0A
00486:  DATA 00,00
00488:  DATA 52,65
0048A:  DATA 74,72
0048C:  DATA 79,20
0048E:  DATA 72,65
00490:  DATA 71,75
00492:  DATA 65,73
00494:  DATA 74,20
00496:  DATA 74,6F
00498:  DATA 20,42
0049A:  DATA 4F,53
0049C:  DATA 53,20
0049E:  DATA 50,49
004A0:  DATA 43,0D
004A2:  DATA 0A,00
004A4:  DATA 45,72
004A6:  DATA 72,6F
004A8:  DATA 72,21
004AA:  DATA 20,52
004AC:  DATA 65,63
004AE:  DATA 65,69
004B0:  DATA 76,69
004B2:  DATA 6E,67
004B4:  DATA 20,63
004B6:  DATA 6F,6D
004B8:  DATA 6D,61
004BA:  DATA 6E,64
004BC:  DATA 20,69
004BE:  DATA 6E,63
004C0:  DATA 6F,6E
004C2:  DATA 73,69
004C4:  DATA 73,74
004C6:  DATA 65,6E
004C8:  DATA 74,20
004CA:  DATA 77,69
004CC:  DATA 74,68
004CE:  DATA 20,74
004D0:  DATA 68,65
004D2:  DATA 20,64
004D4:  DATA 65,73
004D6:  DATA 69,67
004D8:  DATA 6E,0D
004DA:  DATA 0A,00
004DC:  DATA 45,6E
004DE:  DATA 64,20
004E0:  DATA 53,4D
004E2:  DATA 46,20
004E4:  DATA 75,73
004E6:  DATA 69,6E
004E8:  DATA 67,20
004EA:  DATA 72,65
004EC:  DATA 71,65
004EE:  DATA 73,74
004F0:  DATA 20,73
004F2:  DATA 65,61
004F4:  DATA 71,75
004F6:  DATA 65,6E
004F8:  DATA 63,65
004FA:  DATA 0D,0A
004FC:  DATA 00,00
004FE:  DATA 49,4F
00500:  DATA 20,49
00502:  DATA 6E,69
00504:  DATA 74,69
00506:  DATA 61,6C
00508:  DATA 69,7A
0050A:  DATA 65,0D
0050C:  DATA 0A,00
0050E:  DATA 09,43
00510:  DATA 6F,6D
00512:  DATA 70,6C
00514:  DATA 65,74
00516:  DATA 65,0D
00518:  DATA 0A,00
0051A:  DATA 41,44
0051C:  DATA 43,20
0051E:  DATA 49,6E
00520:  DATA 69,74
00522:  DATA 69,61
00524:  DATA 6C,69
00526:  DATA 7A,65
00528:  DATA 0D,0A
0052A:  DATA 00,00
0052C:  DATA 09,43
0052E:  DATA 6F,6D
00530:  DATA 70,6C
00532:  DATA 65,74
00534:  DATA 65,0D
00536:  DATA 0A,00
00538:  DATA 53,74
0053A:  DATA 61,72
0053C:  DATA 74,20
0053E:  DATA 53,57
00540:  DATA 45,45
00542:  DATA 50,0D
00544:  DATA 0A,00
00546:  DATA 09,53
00548:  DATA 77,65
0054A:  DATA 65,70
0054C:  DATA 20,73
0054E:  DATA 74,65
00550:  DATA 70,20
00552:  DATA 3A,20
00554:  DATA 25,75
00556:  DATA 0D,0A
00558:  DATA 00,00
0055A:  DATA 53,74
0055C:  DATA 61,72
0055E:  DATA 74,20
00560:  DATA 54,45
00562:  DATA 53,54
00564:  DATA 20,53
00566:  DATA 57,45
00568:  DATA 45,50
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 73,74
00570:  DATA 65,70
00572:  DATA 2C,20
00574:  DATA 76,6F
00576:  DATA 6C,74
00578:  DATA 61,67
0057A:  DATA 65,2C
0057C:  DATA 20,63
0057E:  DATA 75,72
00580:  DATA 72,65
00582:  DATA 6E,74
00584:  DATA 0D,0A
00586:  DATA 00,00
00588:  DATA 53,74
0058A:  DATA 61,72
0058C:  DATA 74,20
0058E:  DATA 41,44
00590:  DATA 43,20
00592:  DATA 54,45
00594:  DATA 53,54
00596:  DATA 0D,0A
00598:  DATA 00,00
0059A:  DATA 41,44
0059C:  DATA 43,20
0059E:  DATA 56,6F
005A0:  DATA 6C,74
005A2:  DATA 61,67
005A4:  DATA 65,3A
005A6:  DATA 20,25
005A8:  DATA 30,34
005AA:  DATA 4C,58
005AC:  DATA 0D,0A
005AE:  DATA 00,00
005B0:  DATA 41,44
005B2:  DATA 43,20
005B4:  DATA 43,75
005B6:  DATA 72,72
005B8:  DATA 65,6E
005BA:  DATA 74,3A
005BC:  DATA 20,25
005BE:  DATA 30,34
005C0:  DATA 4C,58
005C2:  DATA 0D,0A
005C4:  DATA 00,00
005C6:  DATA 41,44
005C8:  DATA 43,20
005CA:  DATA 43,49
005CC:  DATA 47,53
005CE:  DATA 31,20
005D0:  DATA 41,6D
005D2:  DATA 70,3A
005D4:  DATA 20,25
005D6:  DATA 30,34
005D8:  DATA 4C,58
005DA:  DATA 0D,0A
005DC:  DATA 00,00
005DE:  DATA 41,44
005E0:  DATA 43,20
005E2:  DATA 43,49
005E4:  DATA 47,53
005E6:  DATA 31,20
005E8:  DATA 56,52
005EA:  DATA 45,46
005EC:  DATA 3A,20
005EE:  DATA 25,30
005F0:  DATA 34,4C
005F2:  DATA 58,0D
005F4:  DATA 0A,00
005F6:  DATA 53,74
005F8:  DATA 61,72
005FA:  DATA 74,20
005FC:  DATA 53,57
005FE:  DATA 45,45
00600:  DATA 50,20
00602:  DATA 32,70
00604:  DATA 6F,72
00606:  DATA 74,73
00608:  DATA 0D,0A
0060A:  DATA 00,00
0060C:  DATA 09,53
0060E:  DATA 77,65
00610:  DATA 65,70
00612:  DATA 20,73
00614:  DATA 74,65
00616:  DATA 70,20
00618:  DATA 3A,20
0061A:  DATA 25,75
0061C:  DATA 0D,0A
0061E:  DATA 00,00
00620:  DATA 45,4E
00622:  DATA 44,20
00624:  DATA 53,57
00626:  DATA 45,45
00628:  DATA 50,20
0062A:  DATA 32,70
0062C:  DATA 6F,72
0062E:  DATA 74,0D
00630:  DATA 0A,00
00632:  DATA 53,74
00634:  DATA 61,72
00636:  DATA 74,20
00638:  DATA 43,49
0063A:  DATA 47,53
0063C:  DATA 20,64
0063E:  DATA 61,74
00640:  DATA 61,20
00642:  DATA 63,6F
00644:  DATA 6E,76
00646:  DATA 65,72
00648:  DATA 73,69
0064A:  DATA 6F,6E
0064C:  DATA 0D,0A
0064E:  DATA 00,00
00650:  DATA 53,74
00652:  DATA 61,72
00654:  DATA 74,20
00656:  DATA 53,57
00658:  DATA 45,45
0065A:  DATA 50,20
0065C:  DATA 50,4F
0065E:  DATA 52,54
00660:  DATA 31,0D
00662:  DATA 0A,00
00664:  DATA 09,53
00666:  DATA 77,65
00668:  DATA 65,70
0066A:  DATA 20,73
0066C:  DATA 74,65
0066E:  DATA 70,20
00670:  DATA 3A,20
00672:  DATA 25,75
00674:  DATA 0D,0A
00676:  DATA 00,00
00678:  DATA 45,4E
0067A:  DATA 44,20
0067C:  DATA 53,57
0067E:  DATA 45,45
00680:  DATA 50,20
00682:  DATA 50,4F
00684:  DATA 52,54
00686:  DATA 31,0D
00688:  DATA 0A,00
0068A:  DATA 53,74
0068C:  DATA 61,72
0068E:  DATA 74,20
00690:  DATA 43,49
00692:  DATA 47,53
00694:  DATA 20,64
00696:  DATA 61,74
00698:  DATA 61,20
0069A:  DATA 63,6F
0069C:  DATA 6E,76
0069E:  DATA 65,72
006A0:  DATA 73,69
006A2:  DATA 6F,6E
006A4:  DATA 0D,0A
006A6:  DATA 00,00
006A8:  DATA 45,6E
006AA:  DATA 64,20
006AC:  DATA 43,49
006AE:  DATA 47,53
006B0:  DATA 20,64
006B2:  DATA 61,74
006B4:  DATA 61,20
006B6:  DATA 63,6F
006B8:  DATA 6E,76
006BA:  DATA 65,72
006BC:  DATA 73,69
006BE:  DATA 6F,6E
006C0:  DATA 0D,0A
006C2:  DATA 00,00
006C4:  DATA 53,74
006C6:  DATA 61,72
006C8:  DATA 74,20
006CA:  DATA 53,57
006CC:  DATA 45,45
006CE:  DATA 50,20
006D0:  DATA 50,4F
006D2:  DATA 52,54
006D4:  DATA 32,0D
006D6:  DATA 0A,00
006D8:  DATA 09,53
006DA:  DATA 77,65
006DC:  DATA 65,70
006DE:  DATA 20,73
006E0:  DATA 74,65
006E2:  DATA 70,20
006E4:  DATA 3A,20
006E6:  DATA 25,75
006E8:  DATA 0D,0A
006EA:  DATA 00,00
006EC:  DATA 45,4E
006EE:  DATA 44,20
006F0:  DATA 53,57
006F2:  DATA 45,45
006F4:  DATA 50,20
006F6:  DATA 50,4F
006F8:  DATA 52,54
006FA:  DATA 32,0D
006FC:  DATA 0A,00
006FE:  DATA 53,74
00700:  DATA 61,72
00702:  DATA 74,20
00704:  DATA 43,49
00706:  DATA 47,53
00708:  DATA 20,64
0070A:  DATA 61,74
0070C:  DATA 61,20
0070E:  DATA 63,6F
00710:  DATA 6E,76
00712:  DATA 65,72
00714:  DATA 73,69
00716:  DATA 6F,6E
00718:  DATA 0D,0A
0071A:  DATA 00,00
0071C:  DATA 53,74
0071E:  DATA 61,72
00720:  DATA 74,20
00722:  DATA 53,57
00724:  DATA 45,45
00726:  DATA 50,20
00728:  DATA 77,69
0072A:  DATA 74,68
0072C:  DATA 20,74
0072E:  DATA 68,72
00730:  DATA 65,73
00732:  DATA 68,6F
00734:  DATA 6C,64
00736:  DATA 0D,0A
00738:  DATA 00,00
0073A:  DATA 4D,61
0073C:  DATA 78,69
0073E:  DATA 6D,75
00740:  DATA 6D,20
00742:  DATA 73,74
00744:  DATA 65,70
00746:  DATA 20,63
00748:  DATA 6F,75
0074A:  DATA 6E,74
0074C:  DATA 20,72
0074E:  DATA 65,61
00750:  DATA 63,68
00752:  DATA 65,64
00754:  DATA 3A,20
00756:  DATA 25,78
00758:  DATA 0D,0A
0075A:  DATA 00,00
0075C:  DATA 43,49
0075E:  DATA 47,53
00760:  DATA 31,20
00762:  DATA 63,75
00764:  DATA 72,72
00766:  DATA 65,6E
00768:  DATA 74,20
0076A:  DATA 6C,69
0076C:  DATA 6D,69
0076E:  DATA 74,20
00770:  DATA 72,65
00772:  DATA 61,63
00774:  DATA 68,65
00776:  DATA 64,3A
00778:  DATA 20,25
0077A:  DATA 78,20
0077C:  DATA 3E,20
0077E:  DATA 25,78
00780:  DATA 20,2D
00782:  DATA 20,73
00784:  DATA 74,6F
00786:  DATA 70,70
00788:  DATA 69,6E
0078A:  DATA 67,20
0078C:  DATA 43,49
0078E:  DATA 47,53
00790:  DATA 31,20
00792:  DATA 61,74
00794:  DATA 20,73
00796:  DATA 74,65
00798:  DATA 70,20
0079A:  DATA 25,78
0079C:  DATA 0D,0A
0079E:  DATA 00,00
007A0:  DATA 43,49
007A2:  DATA 47,53
007A4:  DATA 31,20
007A6:  DATA 63,75
007A8:  DATA 72,72
007AA:  DATA 65,6E
007AC:  DATA 74,20
007AE:  DATA 62,65
007B0:  DATA 6C,6F
007B2:  DATA 77,20
007B4:  DATA 74,68
007B6:  DATA 72,65
007B8:  DATA 73,68
007BA:  DATA 6F,6C
007BC:  DATA 64,3A
007BE:  DATA 20,25
007C0:  DATA 78,20
007C2:  DATA 3C,20
007C4:  DATA 25,78
007C6:  DATA 20,2D
007C8:  DATA 20,73
007CA:  DATA 74,6F
007CC:  DATA 70,70
007CE:  DATA 69,6E
007D0:  DATA 67,20
007D2:  DATA 43,49
007D4:  DATA 47,53
007D6:  DATA 31,20
007D8:  DATA 61,74
007DA:  DATA 20,73
007DC:  DATA 74,65
007DE:  DATA 70,20
007E0:  DATA 25,78
007E2:  DATA 0D,0A
007E4:  DATA 00,00
007E6:  DATA 43,49
007E8:  DATA 47,53
007EA:  DATA 32,20
007EC:  DATA 63,75
007EE:  DATA 72,72
007F0:  DATA 65,6E
007F2:  DATA 74,20
007F4:  DATA 6C,69
007F6:  DATA 6D,69
007F8:  DATA 74,20
007FA:  DATA 72,65
007FC:  DATA 61,63
007FE:  DATA 68,65
00800:  DATA 64,3A
00802:  DATA 20,25
00804:  DATA 78,20
00806:  DATA 3E,20
00808:  DATA 25,78
0080A:  DATA 20,2D
0080C:  DATA 20,73
0080E:  DATA 74,6F
00810:  DATA 70,70
00812:  DATA 69,6E
00814:  DATA 67,20
00816:  DATA 43,49
00818:  DATA 47,53
0081A:  DATA 32,20
0081C:  DATA 61,74
0081E:  DATA 20,73
00820:  DATA 74,65
00822:  DATA 70,20
00824:  DATA 25,78
00826:  DATA 0D,0A
00828:  DATA 00,00
0082A:  DATA 43,49
0082C:  DATA 47,53
0082E:  DATA 32,20
00830:  DATA 63,75
00832:  DATA 72,72
00834:  DATA 65,6E
00836:  DATA 74,20
00838:  DATA 62,65
0083A:  DATA 6C,6F
0083C:  DATA 77,20
0083E:  DATA 74,68
00840:  DATA 72,65
00842:  DATA 73,68
00844:  DATA 6F,6C
00846:  DATA 64,3A
00848:  DATA 20,25
0084A:  DATA 78,20
0084C:  DATA 3C,20
0084E:  DATA 25,78
00850:  DATA 20,2D
00852:  DATA 20,73
00854:  DATA 74,6F
00856:  DATA 70,70
00858:  DATA 69,6E
0085A:  DATA 67,20
0085C:  DATA 43,49
0085E:  DATA 47,53
00860:  DATA 32,20
00862:  DATA 61,74
00864:  DATA 20,73
00866:  DATA 74,65
00868:  DATA 70,20
0086A:  DATA 25,78
0086C:  DATA 0D,0A
0086E:  DATA 00,00
00870:  DATA 45,4E
00872:  DATA 44,20
00874:  DATA 53,57
00876:  DATA 45,45
00878:  DATA 50,20
0087A:  DATA 77,69
0087C:  DATA 74,68
0087E:  DATA 20,74
00880:  DATA 68,72
00882:  DATA 65,73
00884:  DATA 68,6F
00886:  DATA 6C,64
00888:  DATA 20,2D
0088A:  DATA 20,54
0088C:  DATA 6F,74
0088E:  DATA 61,6C
00890:  DATA 20,73
00892:  DATA 74,65
00894:  DATA 70,73
00896:  DATA 3A,20
00898:  DATA 25,78
0089A:  DATA 0D,0A
0089C:  DATA 00,00
0089E:  DATA 43,49
008A0:  DATA 47,53
008A2:  DATA 31,20
008A4:  DATA 6D,65
008A6:  DATA 61,73
008A8:  DATA 75,72
008AA:  DATA 65,64
008AC:  DATA 20,73
008AE:  DATA 74,65
008B0:  DATA 70,73
008B2:  DATA 3A,20
008B4:  DATA 25,78
008B6:  DATA 0D,0A
008B8:  DATA 00,00
008BA:  DATA 43,49
008BC:  DATA 47,53
008BE:  DATA 32,20
008C0:  DATA 6D,65
008C2:  DATA 61,73
008C4:  DATA 75,72
008C6:  DATA 65,64
008C8:  DATA 20,73
008CA:  DATA 74,65
008CC:  DATA 70,73
008CE:  DATA 3A,20
008D0:  DATA 25,78
008D2:  DATA 0D,0A
008D4:  DATA 00,00
008D6:  DATA 53,74
008D8:  DATA 61,72
008DA:  DATA 74,20
008DC:  DATA 43,49
008DE:  DATA 47,53
008E0:  DATA 20,64
008E2:  DATA 61,74
008E4:  DATA 61,20
008E6:  DATA 63,6F
008E8:  DATA 6E,76
008EA:  DATA 65,72
008EC:  DATA 73,69
008EE:  DATA 6F,6E
008F0:  DATA 0D,0A
008F2:  DATA 00,00
008F4:  DATA 45,6E
008F6:  DATA 64,20
008F8:  DATA 43,49
008FA:  DATA 47,53
008FC:  DATA 20,64
008FE:  DATA 61,74
00900:  DATA 61,20
00902:  DATA 63,6F
00904:  DATA 6E,76
00906:  DATA 65,72
00908:  DATA 73,69
0090A:  DATA 6F,6E
0090C:  DATA 0D,0A
0090E:  DATA 00,00
00910:  DATA 4D,69
00912:  DATA 73,73
00914:  DATA 69,6F
00916:  DATA 6E,20
00918:  DATA 46,6C
0091A:  DATA 61,73
0091C:  DATA 68,20
0091E:  DATA 69,73
00920:  DATA 20,6E
00922:  DATA 6F,74
00924:  DATA 20,63
00926:  DATA 6F,6E
00928:  DATA 6E,65
0092A:  DATA 63,74
0092C:  DATA 65,64
0092E:  DATA 0D,0A
00930:  DATA 00,00
00932:  DATA 43,52
00934:  DATA 43,20
00936:  DATA 76,65
00938:  DATA 72,69
0093A:  DATA 66,69
0093C:  DATA 63,61
0093E:  DATA 74,69
00940:  DATA 6F,6E
00942:  DATA 20,70
00944:  DATA 61,73
00946:  DATA 73,65
00948:  DATA 64,20
0094A:  DATA 6F,6E
0094C:  DATA 20,61
0094E:  DATA 74,74
00950:  DATA 65,6D
00952:  DATA 70,74
00954:  DATA 20,25
00956:  DATA 64,0D
00958:  DATA 0A,00
0095A:  DATA 43,52
0095C:  DATA 43,20
0095E:  DATA 76,65
00960:  DATA 72,69
00962:  DATA 66,69
00964:  DATA 63,61
00966:  DATA 74,69
00968:  DATA 6F,6E
0096A:  DATA 20,70
0096C:  DATA 61,73
0096E:  DATA 73,65
00970:  DATA 64,20
00972:  DATA 6F,6E
00974:  DATA 20,61
00976:  DATA 74,74
00978:  DATA 65,6D
0097A:  DATA 70,74
0097C:  DATA 20,25
0097E:  DATA 64,0D
00980:  DATA 0A,00
00982:  DATA 45,72
00984:  DATA 72,6F
00986:  DATA 72,3A
00988:  DATA 20,43
0098A:  DATA 52,43
0098C:  DATA 20,76
0098E:  DATA 65,72
00990:  DATA 69,66
00992:  DATA 69,63
00994:  DATA 61,74
00996:  DATA 69,6F
00998:  DATA 6E,20
0099A:  DATA 66,61
0099C:  DATA 69,6C
0099E:  DATA 65,64
009A0:  DATA 20,61
009A2:  DATA 66,74
009A4:  DATA 65,72
009A6:  DATA 20,25
009A8:  DATA 64,20
009AA:  DATA 61,74
009AC:  DATA 74,65
009AE:  DATA 6D,70
009B0:  DATA 74,73
009B2:  DATA 0D,0A
009B4:  DATA 00,00
009B6:  DATA 0D,0A
009B8:  DATA 5F,5F
009BA:  DATA 5F,5F
009BC:  DATA 5F,5F
009BE:  DATA 5F,5F
009C0:  DATA 5F,5F
009C2:  DATA 5F,5F
009C4:  DATA 5F,5F
009C6:  DATA 5F,5F
009C8:  DATA 5F,5F
009CA:  DATA 5F,5F
009CC:  DATA 0D,0A
009CE:  DATA 00,00
009D0:  DATA 5F,5F
009D2:  DATA 5F,53
009D4:  DATA 74,61
009D6:  DATA 72,74
009D8:  DATA 20,63
009DA:  DATA 6F,70
009DC:  DATA 79,5F
009DE:  DATA 64,61
009E0:  DATA 74,61
009E2:  DATA 5F,5F
009E4:  DATA 0D,0A
009E6:  DATA 00,00
009E8:  DATA 49,6E
009EA:  DATA 20,53
009EC:  DATA 4D,46
009EE:  DATA 20,6D
009F0:  DATA 69,73
009F2:  DATA 73,69
009F4:  DATA 6F,6E
009F6:  DATA 20,64
009F8:  DATA 61,74
009FA:  DATA 61,20
009FC:  DATA 73,74
009FE:  DATA 61,72
00A00:  DATA 74,20
00A02:  DATA 20,20
00A04:  DATA 61,64
00A06:  DATA 64,72
00A08:  DATA 65,73
00A0A:  DATA 73,3A
00A0C:  DATA 20,25
00A0E:  DATA 4C,58
00A10:  DATA 0D,0A
00A12:  DATA 00,00
00A14:  DATA 49,6E
00A16:  DATA 20,53
00A18:  DATA 4D,46
00A1A:  DATA 20,6D
00A1C:  DATA 69,73
00A1E:  DATA 73,69
00A20:  DATA 6F,6E
00A22:  DATA 20,64
00A24:  DATA 61,74
00A26:  DATA 61,20
00A28:  DATA 65,6E
00A2A:  DATA 64,20
00A2C:  DATA 20,20
00A2E:  DATA 20,20
00A30:  DATA 61,64
00A32:  DATA 64,72
00A34:  DATA 65,73
00A36:  DATA 73,3A
00A38:  DATA 20,25
00A3A:  DATA 4C,58
00A3C:  DATA 0D,0A
00A3E:  DATA 00,00
00A40:  DATA 49,6E
00A42:  DATA 20,4D
00A44:  DATA 49,53
00A46:  DATA 20,46
00A48:  DATA 4D,20
00A4A:  DATA 57,72
00A4C:  DATA 69,74
00A4E:  DATA 65,20
00A50:  DATA 73,6F
00A52:  DATA 75,72
00A54:  DATA 63,65
00A56:  DATA 20,64
00A58:  DATA 61,74
00A5A:  DATA 61,20
00A5C:  DATA 61,64
00A5E:  DATA 64,72
00A60:  DATA 65,73
00A62:  DATA 73,3A
00A64:  DATA 20,25
00A66:  DATA 4C,58
00A68:  DATA 0D,0A
00A6A:  DATA 00,00
00A6C:  DATA 49,6E
00A6E:  DATA 20,4D
00A70:  DATA 49,53
00A72:  DATA 20,46
00A74:  DATA 4D,20
00A76:  DATA 57,72
00A78:  DATA 69,74
00A7A:  DATA 65,20
00A7C:  DATA 64,61
00A7E:  DATA 74,61
00A80:  DATA 20,73
00A82:  DATA 69,7A
00A84:  DATA 65,20
00A86:  DATA 20,20
00A88:  DATA 20,20
00A8A:  DATA 20,20
00A8C:  DATA 20,20
00A8E:  DATA 20,3A
00A90:  DATA 20,25
00A92:  DATA 6C,75
00A94:  DATA 20,28
00A96:  DATA 30,78
00A98:  DATA 25,6C
00A9A:  DATA 78,29
00A9C:  DATA 0D,0A
00A9E:  DATA 0D,0A
00AA0:  DATA 00,00
00AA2:  DATA 45,72
00AA4:  DATA 72,6F
00AA6:  DATA 72,3A
00AA8:  DATA 20,4D
00AAA:  DATA 49,53
00AAC:  DATA 20,46
00AAE:  DATA 4D,20
00AB0:  DATA 69,73
00AB2:  DATA 20,6E
00AB4:  DATA 6F,74
00AB6:  DATA 20,63
00AB8:  DATA 6F,6E
00ABA:  DATA 6E,65
00ABC:  DATA 63,74
00ABE:  DATA 65,64
00AC0:  DATA 0D,0A
00AC2:  DATA 00,00
00AC4:  DATA 45,72
00AC6:  DATA 72,6F
00AC8:  DATA 72,3A
00ACA:  DATA 20,53
00ACC:  DATA 4D,46
00ACE:  DATA 20,69
00AD0:  DATA 73,20
00AD2:  DATA 6E,6F
00AD4:  DATA 74,20
00AD6:  DATA 63,6F
00AD8:  DATA 6E,6E
00ADA:  DATA 65,63
00ADC:  DATA 74,65
00ADE:  DATA 64,0D
00AE0:  DATA 0A,00
00AE2:  DATA 53,69
00AE4:  DATA 7A,65
00AE6:  DATA 20,61
00AE8:  DATA 72,65
00AEA:  DATA 61,20
00AEC:  DATA 72,65
00AEE:  DATA 61,64
00AF0:  DATA 0D,0A
00AF2:  DATA 00,00
00AF4:  DATA 75,73
00AF6:  DATA 65,64
00AF8:  DATA 5F,73
00AFA:  DATA 69,7A
00AFC:  DATA 65,20
00AFE:  DATA 3D,20
00B00:  DATA 25,6C
00B02:  DATA 64,20
00B04:  DATA 28,73
00B06:  DATA 72,63
00B08:  DATA 20,30
00B0A:  DATA 78,25
00B0C:  DATA 30,38
00B0E:  DATA 4C,58
00B10:  DATA 29,0D
00B12:  DATA 0A,00
00B14:  DATA 6C,6F
00B16:  DATA 6F,70
00B18:  DATA 20,63
00B1A:  DATA 6F,75
00B1C:  DATA 6E,74
00B1E:  DATA 3D,20
00B20:  DATA 25,64
00B22:  DATA 20,20
00B24:  DATA 28,73
00B26:  DATA 72,63
00B28:  DATA 20,30
00B2A:  DATA 78,25
00B2C:  DATA 30,38
00B2E:  DATA 4C,58
00B30:  DATA 29,0D
00B32:  DATA 0A,0D
00B34:  DATA 0A,00
00B36:  DATA 57,72
00B38:  DATA 61,70
00B3A:  DATA 20,74
00B3C:  DATA 72,69
00B3E:  DATA 67,67
00B40:  DATA 65,72
00B42:  DATA 65,64
00B44:  DATA 3A,20
00B46:  DATA 52,65
00B48:  DATA 73,65
00B4A:  DATA 74,74
00B4C:  DATA 69,6E
00B4E:  DATA 67,20
00B50:  DATA 64,61
00B52:  DATA 74,61
00B54:  DATA 5F,77
00B56:  DATA 72,69
00B58:  DATA 74,65
00B5A:  DATA 5F,61
00B5C:  DATA 64,64
00B5E:  DATA 72,20
00B60:  DATA 74,6F
00B62:  DATA 20,73
00B64:  DATA 74,61
00B66:  DATA 72,74
00B68:  DATA 0D,0A
00B6A:  DATA 00,00
00B6C:  DATA 75,73
00B6E:  DATA 65,64
00B70:  DATA 5F,73
00B72:  DATA 69,7A
00B74:  DATA 65,20
00B76:  DATA 3D,20
00B78:  DATA 25,6C
00B7A:  DATA 64,0D
00B7C:  DATA 0A,00
00B7E:  DATA 6C,6F
00B80:  DATA 6F,70
00B82:  DATA 5F,63
00B84:  DATA 6F,75
00B86:  DATA 6E,74
00B88:  DATA 20,3D
00B8A:  DATA 20,25
00B8C:  DATA 75,0D
00B8E:  DATA 0A,0D
00B90:  DATA 0A,00
00B92:  DATA 0D,0A
00B94:  DATA 5F,5F
00B96:  DATA 5F,45
00B98:  DATA 6E,64
00B9A:  DATA 20,63
00B9C:  DATA 6F,70
00B9E:  DATA 79,5F
00BA0:  DATA 64,61
00BA2:  DATA 74,61
00BA4:  DATA 5F,5F
00BA6:  DATA 5F,5F
00BA8:  DATA 0D,0A
00BAA:  DATA 00,00
00BAC:  DATA 5F,5F
00BAE:  DATA 5F,5F
00BB0:  DATA 5F,5F
00BB2:  DATA 5F,5F
00BB4:  DATA 5F,5F
00BB6:  DATA 5F,5F
00BB8:  DATA 5F,5F
00BBA:  DATA 5F,5F
00BBC:  DATA 5F,5F
00BBE:  DATA 5F,5F
00BC0:  DATA 0D,0A
00BC2:  DATA 0D,0A
00BC4:  DATA 00,00
00BC6:  DATA 0D,0A
00BC8:  DATA 5F,5F
00BCA:  DATA 5F,5F
00BCC:  DATA 5F,5F
00BCE:  DATA 5F,5F
00BD0:  DATA 5F,5F
00BD2:  DATA 5F,5F
00BD4:  DATA 5F,5F
00BD6:  DATA 5F,5F
00BD8:  DATA 5F,5F
00BDA:  DATA 5F,5F
00BDC:  DATA 0D,0A
00BDE:  DATA 00,00
00BE0:  DATA 5F,5F
00BE2:  DATA 5F,53
00BE4:  DATA 74,61
00BE6:  DATA 72,74
00BE8:  DATA 20,53
00BEA:  DATA 4D,46
00BEC:  DATA 20,52
00BEE:  DATA 65,61
00BF0:  DATA 64,5F
00BF2:  DATA 5F,5F
00BF4:  DATA 5F,0D
00BF6:  DATA 0A,00
00BF8:  DATA 49,6E
00BFA:  DATA 20,53
00BFC:  DATA 4D,46
00BFE:  DATA 20,52
00C00:  DATA 65,61
00C02:  DATA 64,20
00C04:  DATA 73,6F
00C06:  DATA 75,72
00C08:  DATA 63,65
00C0A:  DATA 20,64
00C0C:  DATA 61,74
00C0E:  DATA 61,20
00C10:  DATA 61,64
00C12:  DATA 64,72
00C14:  DATA 65,73
00C16:  DATA 73,3A
00C18:  DATA 20,25
00C1A:  DATA 4C,58
00C1C:  DATA 0D,0A
00C1E:  DATA 00,00
00C20:  DATA 49,6E
00C22:  DATA 20,53
00C24:  DATA 4D,46
00C26:  DATA 20,52
00C28:  DATA 65,61
00C2A:  DATA 64,20
00C2C:  DATA 64,61
00C2E:  DATA 74,61
00C30:  DATA 20,73
00C32:  DATA 69,7A
00C34:  DATA 65,20
00C36:  DATA 20,20
00C38:  DATA 20,20
00C3A:  DATA 20,20
00C3C:  DATA 20,20
00C3E:  DATA 20,3A
00C40:  DATA 20,25
00C42:  DATA 6C,75
00C44:  DATA 20,28
00C46:  DATA 30,78
00C48:  DATA 25,6C
00C4A:  DATA 78,29
00C4C:  DATA 0D,0A
00C4E:  DATA 0D,0A
00C50:  DATA 00,00
00C52:  DATA 45,72
00C54:  DATA 72,6F
00C56:  DATA 72,3A
00C58:  DATA 20,53
00C5A:  DATA 4D,46
00C5C:  DATA 20,69
00C5E:  DATA 73,20
00C60:  DATA 6E,6F
00C62:  DATA 74,20
00C64:  DATA 63,6F
00C66:  DATA 6E,6E
00C68:  DATA 65,63
00C6A:  DATA 74,65
00C6C:  DATA 64,0D
00C6E:  DATA 0A,00
00C70:  DATA 52,45
00C72:  DATA 41,44
00C74:  DATA 20,44
00C76:  DATA 41,54
00C78:  DATA 41,20
00C7A:  DATA 46,52
00C7C:  DATA 4F,4D
00C7E:  DATA 20,53
00C80:  DATA 4D,46
00C82:  DATA 2E,2E
00C84:  DATA 2E,0D
00C86:  DATA 0A,00
00C88:  DATA 0D,0A
00C8A:  DATA 5F,5F
00C8C:  DATA 5F,45
00C8E:  DATA 6E,64
00C90:  DATA 20,53
00C92:  DATA 4D,46
00C94:  DATA 20,52
00C96:  DATA 65,61
00C98:  DATA 64,5F
00C9A:  DATA 5F,5F
00C9C:  DATA 5F,0D
00C9E:  DATA 0A,00
00CA0:  DATA 5F,5F
00CA2:  DATA 5F,5F
00CA4:  DATA 5F,5F
00CA6:  DATA 5F,5F
00CA8:  DATA 5F,5F
00CAA:  DATA 5F,5F
00CAC:  DATA 5F,5F
00CAE:  DATA 5F,5F
00CB0:  DATA 5F,5F
00CB2:  DATA 5F,5F
00CB4:  DATA 0D,0A
00CB6:  DATA 0D,0A
00CB8:  DATA 00,00
00CBA:  DATA 0D,0A
00CBC:  DATA 5F,5F
00CBE:  DATA 5F,5F
00CC0:  DATA 5F,5F
00CC2:  DATA 5F,5F
00CC4:  DATA 5F,5F
00CC6:  DATA 5F,5F
00CC8:  DATA 5F,5F
00CCA:  DATA 5F,5F
00CCC:  DATA 5F,5F
00CCE:  DATA 5F,5F
00CD0:  DATA 0D,0A
00CD2:  DATA 00,00
00CD4:  DATA 5F,5F
00CD6:  DATA 5F,53
00CD8:  DATA 74,61
00CDA:  DATA 72,74
00CDC:  DATA 20,73
00CDE:  DATA 6D,66
00CE0:  DATA 5F,65
00CE2:  DATA 72,61
00CE4:  DATA 73,65
00CE6:  DATA 5F,5F
00CE8:  DATA 5F,5F
00CEA:  DATA 0D,0A
00CEC:  DATA 00,00
00CEE:  DATA 49,6E
00CF0:  DATA 20,53
00CF2:  DATA 4D,46
00CF4:  DATA 20,6D
00CF6:  DATA 69,73
00CF8:  DATA 73,69
00CFA:  DATA 6F,6E
00CFC:  DATA 20,64
00CFE:  DATA 61,74
00D00:  DATA 61,20
00D02:  DATA 73,74
00D04:  DATA 61,72
00D06:  DATA 74,20
00D08:  DATA 20,20
00D0A:  DATA 61,64
00D0C:  DATA 64,72
00D0E:  DATA 65,73
00D10:  DATA 73,3A
00D12:  DATA 20,25
00D14:  DATA 4C,58
00D16:  DATA 0D,0A
00D18:  DATA 00,00
00D1A:  DATA 49,6E
00D1C:  DATA 20,53
00D1E:  DATA 4D,46
00D20:  DATA 20,6D
00D22:  DATA 69,73
00D24:  DATA 73,69
00D26:  DATA 6F,6E
00D28:  DATA 20,64
00D2A:  DATA 61,74
00D2C:  DATA 61,20
00D2E:  DATA 65,6E
00D30:  DATA 64,20
00D32:  DATA 20,20
00D34:  DATA 20,20
00D36:  DATA 61,64
00D38:  DATA 64,72
00D3A:  DATA 65,73
00D3C:  DATA 73,3A
00D3E:  DATA 20,25
00D40:  DATA 4C,58
00D42:  DATA 0D,0A
00D44:  DATA 00,00
00D46:  DATA 49,6E
00D48:  DATA 20,53
00D4A:  DATA 4D,46
00D4C:  DATA 20,45
00D4E:  DATA 72,61
00D50:  DATA 73,65
00D52:  DATA 20,73
00D54:  DATA 6F,75
00D56:  DATA 72,63
00D58:  DATA 65,20
00D5A:  DATA 64,61
00D5C:  DATA 74,61
00D5E:  DATA 20,61
00D60:  DATA 64,64
00D62:  DATA 72,65
00D64:  DATA 73,73
00D66:  DATA 3A,20
00D68:  DATA 25,4C
00D6A:  DATA 58,0D
00D6C:  DATA 0A,00
00D6E:  DATA 49,6E
00D70:  DATA 20,53
00D72:  DATA 4D,46
00D74:  DATA 20,45
00D76:  DATA 72,61
00D78:  DATA 73,65
00D7A:  DATA 20,64
00D7C:  DATA 61,74
00D7E:  DATA 61,20
00D80:  DATA 73,69
00D82:  DATA 7A,65
00D84:  DATA 20,20
00D86:  DATA 20,20
00D88:  DATA 20,20
00D8A:  DATA 20,20
00D8C:  DATA 20,20
00D8E:  DATA 3A,20
00D90:  DATA 25,6C
00D92:  DATA 75,20
00D94:  DATA 28,30
00D96:  DATA 78,25
00D98:  DATA 6C,78
00D9A:  DATA 29,0D
00D9C:  DATA 0A,0D
00D9E:  DATA 0A,00
00DA0:  DATA 45,72
00DA2:  DATA 72,6F
00DA4:  DATA 72,3A
00DA6:  DATA 20,53
00DA8:  DATA 4D,46
00DAA:  DATA 20,69
00DAC:  DATA 73,20
00DAE:  DATA 6E,6F
00DB0:  DATA 74,20
00DB2:  DATA 63,6F
00DB4:  DATA 6E,6E
00DB6:  DATA 65,63
00DB8:  DATA 74,65
00DBA:  DATA 64,0D
00DBC:  DATA 0A,00
00DBE:  DATA 45,72
00DC0:  DATA 72,6F
00DC2:  DATA 72,3A
00DC4:  DATA 20,45
00DC6:  DATA 72,61
00DC8:  DATA 73,65
00DCA:  DATA 20,73
00DCC:  DATA 6F,75
00DCE:  DATA 72,63
00DD0:  DATA 65,20
00DD2:  DATA 61,64
00DD4:  DATA 64,72
00DD6:  DATA 65,73
00DD8:  DATA 73,20
00DDA:  DATA 30,78
00DDC:  DATA 25,4C
00DDE:  DATA 58,20
00DE0:  DATA 69,73
00DE2:  DATA 20,6F
00DE4:  DATA 75,74
00DE6:  DATA 73,69
00DE8:  DATA 64,65
00DEA:  DATA 20,6D
00DEC:  DATA 69,73
00DEE:  DATA 73,69
00DF0:  DATA 6F,6E
00DF2:  DATA 20,72
00DF4:  DATA 61,6E
00DF6:  DATA 67,65
00DF8:  DATA 20,5B
00DFA:  DATA 30,78
00DFC:  DATA 25,4C
00DFE:  DATA 58,20
00E00:  DATA 2D,20
00E02:  DATA 30,78
00E04:  DATA 25,4C
00E06:  DATA 58,5D
00E08:  DATA 0D,0A
00E0A:  DATA 00,00
00E0C:  DATA 45,72
00E0E:  DATA 72,6F
00E10:  DATA 72,3A
00E12:  DATA 20,45
00E14:  DATA 72,61
00E16:  DATA 73,65
00E18:  DATA 20,6F
00E1A:  DATA 70,65
00E1C:  DATA 72,61
00E1E:  DATA 74,69
00E20:  DATA 6F,6E
00E22:  DATA 20,77
00E24:  DATA 6F,75
00E26:  DATA 6C,64
00E28:  DATA 20,65
00E2A:  DATA 78,63
00E2C:  DATA 65,65
00E2E:  DATA 64,20
00E30:  DATA 6D,69
00E32:  DATA 73,73
00E34:  DATA 69,6F
00E36:  DATA 6E,20
00E38:  DATA 65,6E
00E3A:  DATA 64,20
00E3C:  DATA 61,64
00E3E:  DATA 64,72
00E40:  DATA 65,73
00E42:  DATA 73,20
00E44:  DATA 30,78
00E46:  DATA 25,4C
00E48:  DATA 58,0D
00E4A:  DATA 0A,00
00E4C:  DATA 4C,69
00E4E:  DATA 6D,69
00E50:  DATA 74,69
00E52:  DATA 6E,67
00E54:  DATA 20,65
00E56:  DATA 72,61
00E58:  DATA 73,65
00E5A:  DATA 20,73
00E5C:  DATA 69,7A
00E5E:  DATA 65,20
00E60:  DATA 74,6F
00E62:  DATA 20,73
00E64:  DATA 74,61
00E66:  DATA 79,20
00E68:  DATA 77,69
00E6A:  DATA 74,68
00E6C:  DATA 69,6E
00E6E:  DATA 20,6D
00E70:  DATA 69,73
00E72:  DATA 73,69
00E74:  DATA 6F,6E
00E76:  DATA 20,62
00E78:  DATA 6F,75
00E7A:  DATA 6E,64
00E7C:  DATA 73,0D
00E7E:  DATA 0A,00
00E80:  DATA 45,72
00E82:  DATA 61,73
00E84:  DATA 65,20
00E86:  DATA 6F,70
00E88:  DATA 65,72
00E8A:  DATA 61,74
00E8C:  DATA 69,6F
00E8E:  DATA 6E,20
00E90:  DATA 76,61
00E92:  DATA 6C,69
00E94:  DATA 64,61
00E96:  DATA 74,65
00E98:  DATA 64,20
00E9A:  DATA 77,69
00E9C:  DATA 74,68
00E9E:  DATA 69,6E
00EA0:  DATA 20,6D
00EA2:  DATA 69,73
00EA4:  DATA 73,69
00EA6:  DATA 6F,6E
00EA8:  DATA 20,72
00EAA:  DATA 61,6E
00EAC:  DATA 67,65
00EAE:  DATA 0D,0A
00EB0:  DATA 00,00
00EB2:  DATA 0D,0A
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,45
00EB8:  DATA 6E,64
00EBA:  DATA 20,73
00EBC:  DATA 6D,66
00EBE:  DATA 5F,65
00EC0:  DATA 72,61
00EC2:  DATA 73,65
00EC4:  DATA 5F,5F
00EC6:  DATA 5F,5F
00EC8:  DATA 0D,0A
00ECA:  DATA 00,00
00ECC:  DATA 5F,5F
00ECE:  DATA 5F,5F
00ED0:  DATA 5F,5F
00ED2:  DATA 5F,5F
00ED4:  DATA 5F,5F
00ED6:  DATA 5F,5F
00ED8:  DATA 5F,5F
00EDA:  DATA 5F,5F
00EDC:  DATA 5F,5F
00EDE:  DATA 5F,5F
00EE0:  DATA 0D,0A
00EE2:  DATA 0D,0A
00EE4:  DATA 00,00
00EE6:  DATA 45,72
00EE8:  DATA 72,6F
00EEA:  DATA 72,3A
00EEC:  DATA 20,55
00EEE:  DATA 6E,6B
00EF0:  DATA 6E,6F
00EF2:  DATA 77,6E
00EF4:  DATA 20,6D
00EF6:  DATA 69,73
00EF8:  DATA 73,69
00EFA:  DATA 6F,6E
00EFC:  DATA 5F,69
00EFE:  DATA 64,3A
00F00:  DATA 20,25
00F02:  DATA 30,32
00F04:  DATA 58,0D
00F06:  DATA 0A,00
00F08:  DATA 55,70
00F0A:  DATA 64,61
00F0C:  DATA 74,65
00F0E:  DATA 64,20
00F10:  DATA 70,61
00F12:  DATA 72,74
00F14:  DATA 69,74
00F16:  DATA 69,6F
00F18:  DATA 6E,20
00F1A:  DATA 66,6F
00F1C:  DATA 72,20
00F1E:  DATA 6D,69
00F20:  DATA 73,73
00F22:  DATA 69,6F
00F24:  DATA 6E,5F
00F26:  DATA 69,64
00F28:  DATA 20,25
00F2A:  DATA 30,32
00F2C:  DATA 58,3A
00F2E:  DATA 20,75
00F30:  DATA 73,65
00F32:  DATA 64,5F
00F34:  DATA 73,69
00F36:  DATA 7A,65
00F38:  DATA 3D,25
00F3A:  DATA 6C,64
00F3C:  DATA 2C,20
00F3E:  DATA 6C,6F
00F40:  DATA 6F,70
00F42:  DATA 5F,63
00F44:  DATA 6F,75
00F46:  DATA 6E,74
00F48:  DATA 65,72
00F4A:  DATA 3D,25
00F4C:  DATA 6C,64
00F4E:  DATA 0D,0A
00F50:  DATA 00,00
00F52:  DATA 4D,49
00F54:  DATA 53,53
00F56:  DATA 49,4F
00F58:  DATA 4E,20
00F5A:  DATA 46,4C
00F5C:  DATA 41,53
00F5E:  DATA 48,20
00F60:  DATA 49,6E
00F62:  DATA 69,74
00F64:  DATA 69,61
00F66:  DATA 6C,69
00F68:  DATA 7A,65
00F6A:  DATA 0D,0A
00F6C:  DATA 00,00
00F6E:  DATA 09,5B
00F70:  DATA 4D,49
00F72:  DATA 53,20
00F74:  DATA 46,4D
00F76:  DATA 5D,52
00F78:  DATA 45,41
00F7A:  DATA 44,20
00F7C:  DATA 49,44
00F7E:  DATA 3A,00
00F80:  DATA 09,5B
00F82:  DATA 53,4D
00F84:  DATA 46,5D
00F86:  DATA 09,52
00F88:  DATA 45,41
00F8A:  DATA 44,20
00F8C:  DATA 49,44
00F8E:  DATA 3A,00
00F90:  DATA 09,5B
00F92:  DATA 53,4D
00F94:  DATA 46,5D
00F96:  DATA 09,63
00F98:  DATA 6F,6E
00F9A:  DATA 6E,65
00F9C:  DATA 63,74
00F9E:  DATA 20,65
00FA0:  DATA 72,72
00FA2:  DATA 6F,72
00FA4:  DATA 21,0D
00FA6:  DATA 0A,00
00FA8:  DATA 09,5B
00FAA:  DATA 53,4D
00FAC:  DATA 46,5D
00FAE:  DATA 09,69
00FB0:  DATA 73,20
00FB2:  DATA 63,6F
00FB4:  DATA 6E,6E
00FB6:  DATA 65,63
00FB8:  DATA 74,65
00FBA:  DATA 64,0D
00FBC:  DATA 0A,00
00FBE:  DATA 09,5B
00FC0:  DATA 4D,49
00FC2:  DATA 53,20
00FC4:  DATA 46,4D
00FC6:  DATA 5D,63
00FC8:  DATA 6F,6E
00FCA:  DATA 6E,65
00FCC:  DATA 63,74
00FCE:  DATA 20,65
00FD0:  DATA 72,72
00FD2:  DATA 6F,72
00FD4:  DATA 21,0D
00FD6:  DATA 0A,00
00FD8:  DATA 09,5B
00FDA:  DATA 4D,49
00FDC:  DATA 53,20
00FDE:  DATA 46,4D
00FE0:  DATA 5D,69
00FE2:  DATA 73,20
00FE4:  DATA 63,6F
00FE6:  DATA 6E,6E
00FE8:  DATA 65,63
00FEA:  DATA 74,65
00FEC:  DATA 64,0D
00FEE:  DATA 0A,00
00FF0:  DATA 09,7C
00FF2:  DATA 20,53
00FF4:  DATA 4D,46
00FF6:  DATA 20,20
00FF8:  DATA 7C,20
00FFA:  DATA 50,49
00FFC:  DATA 43,4C
00FFE:  DATA 4F,47
01000:  DATA 20,7C
01002:  DATA 20,55
01004:  DATA 73,65
01006:  DATA 20,43
01008:  DATA 6F,75
0100A:  DATA 6E,74
0100C:  DATA 65,72
0100E:  DATA 20,20
01010:  DATA 20,20
01012:  DATA 20,20
01014:  DATA 3A,20
01016:  DATA 30,78
01018:  DATA 25,30
0101A:  DATA 38,4C
0101C:  DATA 58,0D
0101E:  DATA 0A,00
01020:  DATA 09,7C
01022:  DATA 20,53
01024:  DATA 4D,46
01026:  DATA 20,20
01028:  DATA 7C,20
0102A:  DATA 50,49
0102C:  DATA 43,4C
0102E:  DATA 4F,47
01030:  DATA 20,7C
01032:  DATA 20,4C
01034:  DATA 6F,6F
01036:  DATA 70,20
01038:  DATA 43,6F
0103A:  DATA 75,6E
0103C:  DATA 74,65
0103E:  DATA 72,20
01040:  DATA 20,20
01042:  DATA 20,20
01044:  DATA 3A,20
01046:  DATA 30,78
01048:  DATA 25,30
0104A:  DATA 32,58
0104C:  DATA 0D,0A
0104E:  DATA 00,00
01050:  DATA 09,7C
01052:  DATA 20,53
01054:  DATA 4D,46
01056:  DATA 20,20
01058:  DATA 7C,20
0105A:  DATA 4D,45
0105C:  DATA 41,53
0105E:  DATA 20,20
01060:  DATA 20,7C
01062:  DATA 20,55
01064:  DATA 73,65
01066:  DATA 20,43
01068:  DATA 6F,75
0106A:  DATA 6E,74
0106C:  DATA 65,72
0106E:  DATA 20,20
01070:  DATA 20,20
01072:  DATA 20,20
01074:  DATA 3A,20
01076:  DATA 30,78
01078:  DATA 25,30
0107A:  DATA 38,4C
0107C:  DATA 58,0D
0107E:  DATA 0A,00
01080:  DATA 09,7C
01082:  DATA 20,53
01084:  DATA 4D,46
01086:  DATA 20,20
01088:  DATA 7C,20
0108A:  DATA 4D,45
0108C:  DATA 41,53
0108E:  DATA 20,20
01090:  DATA 20,7C
01092:  DATA 20,4C
01094:  DATA 6F,6F
01096:  DATA 70,20
01098:  DATA 43,6F
0109A:  DATA 75,6E
0109C:  DATA 74,65
0109E:  DATA 72,20
010A0:  DATA 20,20
010A2:  DATA 20,20
010A4:  DATA 3A,20
010A6:  DATA 30,78
010A8:  DATA 25,30
010AA:  DATA 32,58
010AC:  DATA 0D,0A
010AE:  DATA 00,00
010B0:  DATA 09,7C
010B2:  DATA 20,4D
010B4:  DATA 49,53
010B6:  DATA 46,20
010B8:  DATA 7C,20
010BA:  DATA 50,49
010BC:  DATA 43,4C
010BE:  DATA 4F,47
010C0:  DATA 20,7C
010C2:  DATA 20,55
010C4:  DATA 73,65
010C6:  DATA 20,43
010C8:  DATA 6F,75
010CA:  DATA 6E,74
010CC:  DATA 65,72
010CE:  DATA 20,20
010D0:  DATA 20,20
010D2:  DATA 20,20
010D4:  DATA 3A,20
010D6:  DATA 30,78
010D8:  DATA 25,30
010DA:  DATA 38,4C
010DC:  DATA 58,0D
010DE:  DATA 0A,00
010E0:  DATA 09,7C
010E2:  DATA 20,4D
010E4:  DATA 49,53
010E6:  DATA 46,20
010E8:  DATA 7C,20
010EA:  DATA 50,49
010EC:  DATA 43,4C
010EE:  DATA 4F,47
010F0:  DATA 20,7C
010F2:  DATA 20,55
010F4:  DATA 6E,63
010F6:  DATA 6F,70
010F8:  DATA 79,65
010FA:  DATA 64,20
010FC:  DATA 43,6F
010FE:  DATA 75,6E
01100:  DATA 74,65
01102:  DATA 72,20
01104:  DATA 3A,20
01106:  DATA 30,78
01108:  DATA 25,30
0110A:  DATA 38,4C
0110C:  DATA 58,0D
0110E:  DATA 0A,00
01110:  DATA 09,7C
01112:  DATA 20,4D
01114:  DATA 49,53
01116:  DATA 46,20
01118:  DATA 7C,20
0111A:  DATA 50,49
0111C:  DATA 43,4C
0111E:  DATA 4F,47
01120:  DATA 20,7C
01122:  DATA 20,4C
01124:  DATA 6F,6F
01126:  DATA 70,20
01128:  DATA 43,6F
0112A:  DATA 75,6E
0112C:  DATA 74,65
0112E:  DATA 72,20
01130:  DATA 20,20
01132:  DATA 20,20
01134:  DATA 3A,20
01136:  DATA 30,78
01138:  DATA 25,30
0113A:  DATA 32,58
0113C:  DATA 0D,0A
0113E:  DATA 00,00
01140:  DATA 09,7C
01142:  DATA 20,4D
01144:  DATA 49,53
01146:  DATA 46,20
01148:  DATA 7C,20
0114A:  DATA 50,49
0114C:  DATA 43,4C
0114E:  DATA 4F,47
01150:  DATA 20,7C
01152:  DATA 20,57
01154:  DATA 72,69
01156:  DATA 74,65
01158:  DATA 20,43
0115A:  DATA 6F,75
0115C:  DATA 6E,74
0115E:  DATA 65,72
01160:  DATA 20,20
01162:  DATA 20,20
01164:  DATA 3A,20
01166:  DATA 30,78
01168:  DATA 25,30
0116A:  DATA 32,58
0116C:  DATA 0D,0A
0116E:  DATA 00,00
01170:  DATA 09,7C
01172:  DATA 20,4D
01174:  DATA 49,53
01176:  DATA 46,20
01178:  DATA 7C,20
0117A:  DATA 4D,45
0117C:  DATA 41,53
0117E:  DATA 20,20
01180:  DATA 20,7C
01182:  DATA 20,55
01184:  DATA 73,65
01186:  DATA 20,43
01188:  DATA 6F,75
0118A:  DATA 6E,74
0118C:  DATA 65,72
0118E:  DATA 20,20
01190:  DATA 20,20
01192:  DATA 20,20
01194:  DATA 3A,20
01196:  DATA 30,78
01198:  DATA 25,30
0119A:  DATA 38,4C
0119C:  DATA 58,0D
0119E:  DATA 0A,00
011A0:  DATA 09,7C
011A2:  DATA 20,4D
011A4:  DATA 49,53
011A6:  DATA 46,20
011A8:  DATA 7C,20
011AA:  DATA 4D,45
011AC:  DATA 41,53
011AE:  DATA 20,20
011B0:  DATA 20,7C
011B2:  DATA 20,55
011B4:  DATA 6E,63
011B6:  DATA 6F,70
011B8:  DATA 79,65
011BA:  DATA 64,20
011BC:  DATA 43,6F
011BE:  DATA 75,6E
011C0:  DATA 74,65
011C2:  DATA 72,20
011C4:  DATA 3A,20
011C6:  DATA 30,78
011C8:  DATA 25,30
011CA:  DATA 38,4C
011CC:  DATA 58,0D
011CE:  DATA 0A,00
011D0:  DATA 09,7C
011D2:  DATA 20,4D
011D4:  DATA 49,53
011D6:  DATA 46,20
011D8:  DATA 7C,20
011DA:  DATA 4D,45
011DC:  DATA 41,53
011DE:  DATA 20,20
011E0:  DATA 20,7C
011E2:  DATA 20,4C
011E4:  DATA 6F,6F
011E6:  DATA 70,20
011E8:  DATA 43,6F
011EA:  DATA 75,6E
011EC:  DATA 74,65
011EE:  DATA 72,20
011F0:  DATA 20,20
011F2:  DATA 20,20
011F4:  DATA 3A,20
011F6:  DATA 30,78
011F8:  DATA 25,30
011FA:  DATA 32,58
011FC:  DATA 0D,0A
011FE:  DATA 00,00
01200:  DATA 09,43
01202:  DATA 6F,6D
01204:  DATA 70,6C
01206:  DATA 65,74
01208:  DATA 65,0D
0120A:  DATA 0A,00
0120C:  DATA 4D,69
0120E:  DATA 73,73
01210:  DATA 69,6F
01212:  DATA 6E,20
01214:  DATA 46,6C
01216:  DATA 61,73
01218:  DATA 68,20
0121A:  DATA 69,73
0121C:  DATA 20,6E
0121E:  DATA 6F,74
01220:  DATA 20,63
01222:  DATA 6F,6E
01224:  DATA 6E,65
01226:  DATA 63,74
01228:  DATA 65,64
0122A:  DATA 0D,0A
0122C:  DATA 00,00
0122E:  DATA 4D,69
01230:  DATA 73,73
01232:  DATA 69,6F
01234:  DATA 6E,20
01236:  DATA 46,6C
01238:  DATA 61,73
0123A:  DATA 68,20
0123C:  DATA 69,73
0123E:  DATA 20,6E
01240:  DATA 6F,74
01242:  DATA 20,63
01244:  DATA 6F,6E
01246:  DATA 6E,65
01248:  DATA 63,74
0124A:  DATA 65,64
0124C:  DATA 0D,0A
0124E:  DATA 00,00
01250:  DATA 0D,0A
01252:  DATA 5F,5F
01254:  DATA 5F,5F
01256:  DATA 5F,5F
01258:  DATA 5F,5F
0125A:  DATA 5F,5F
0125C:  DATA 5F,5F
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,5F
01264:  DATA 5F,5F
01266:  DATA 5F,5F
01268:  DATA 5F,5F
0126A:  DATA 5F,5F
0126C:  DATA 5F,5F
0126E:  DATA 5F,5F
01270:  DATA 0D,0A
01272:  DATA 5F,5F
01274:  DATA 5F,5F
01276:  DATA 5F,53
01278:  DATA 74,61
0127A:  DATA 72,74
0127C:  DATA 20,65
0127E:  DATA 78,65
01280:  DATA 63,75
01282:  DATA 74,65
01284:  DATA 5F,6D
01286:  DATA 69,73
01288:  DATA 73,69
0128A:  DATA 6F,6E
0128C:  DATA 5F,5F
0128E:  DATA 5F,5F
01290:  DATA 5F,0D
01292:  DATA 0A,0D
01294:  DATA 0A,00
01296:  DATA 43,6F
01298:  DATA 6D,6D
0129A:  DATA 61,6E
0129C:  DATA 64,20
0129E:  DATA 49,44
012A0:  DATA 3A,20
012A2:  DATA 25,58
012A4:  DATA 0D,0A
012A6:  DATA 0D,0A
012A8:  DATA 00,00
012AA:  DATA 09,09
012AC:  DATA 2D,3E
012AE:  DATA 20,49
012B0:  DATA 6E,76
012B2:  DATA 61,6C
012B4:  DATA 69,64
012B6:  DATA 20,43
012B8:  DATA 4D,44
012BA:  DATA 20,49
012BC:  DATA 44,21
012BE:  DATA 0D,0A
012C0:  DATA 00,00
012C2:  DATA 0D,0A
012C4:  DATA 5F,5F
012C6:  DATA 5F,5F
012C8:  DATA 5F,5F
012CA:  DATA 45,6E
012CC:  DATA 64,20
012CE:  DATA 65,78
012D0:  DATA 65,63
012D2:  DATA 75,74
012D4:  DATA 65,5F
012D6:  DATA 6D,69
012D8:  DATA 73,73
012DA:  DATA 69,6F
012DC:  DATA 6E,5F
012DE:  DATA 5F,5F
012E0:  DATA 5F,5F
012E2:  DATA 5F,0D
012E4:  DATA 0A,5F
012E6:  DATA 5F,5F
012E8:  DATA 5F,5F
012EA:  DATA 5F,5F
012EC:  DATA 5F,5F
012EE:  DATA 5F,5F
012F0:  DATA 5F,5F
012F2:  DATA 5F,5F
012F4:  DATA 5F,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,5F
012FC:  DATA 5F,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 0D,0A
01306:  DATA 00,00
01308:  DATA 53,74
0130A:  DATA 61,72
0130C:  DATA 74,20
0130E:  DATA 65,78
01310:  DATA 65,63
01312:  DATA 75,74
01314:  DATA 65,5F
01316:  DATA 63,6F
01318:  DATA 6D,6D
0131A:  DATA 61,6E
0131C:  DATA 64,0D
0131E:  DATA 0A,00
01320:  DATA 09,2D
01322:  DATA 3E,20
01324:  DATA 55,70
01326:  DATA 6C,69
01328:  DATA 6E,6B
0132A:  DATA 20,63
0132C:  DATA 6F,6D
0132E:  DATA 6D,61
01330:  DATA 6E,64
01332:  DATA 0D,0A
01334:  DATA 00,00
01336:  DATA 09,20
01338:  DATA 20,20
0133A:  DATA 54,72
0133C:  DATA 61,6E
0133E:  DATA 73,6D
01340:  DATA 69,74
01342:  DATA 20,41
01344:  DATA 63,6B
01346:  DATA 6E,6F
01348:  DATA 6C,65
0134A:  DATA 67,64
0134C:  DATA 65,0D
0134E:  DATA 0A,00
01350:  DATA 09,2D
01352:  DATA 3E,20
01354:  DATA 53,74
01356:  DATA 61,74
01358:  DATA 75,73
0135A:  DATA 20,63
0135C:  DATA 68,65
0135E:  DATA 63,6B
01360:  DATA 0D,0A
01362:  DATA 00,00
01364:  DATA 09,20
01366:  DATA 20,20
01368:  DATA 54,72
0136A:  DATA 61,6E
0136C:  DATA 73,6D
0136E:  DATA 69,74
01370:  DATA 20,4D
01372:  DATA 49,53
01374:  DATA 20,4D
01376:  DATA 43,55
01378:  DATA 20,53
0137A:  DATA 74,61
0137C:  DATA 74,75
0137E:  DATA 73,0D
01380:  DATA 0A,00
01382:  DATA 66,69
01384:  DATA 6E,69
01386:  DATA 73,68
01388:  DATA 65,64
0138A:  DATA 20,69
0138C:  DATA 6E,20
0138E:  DATA 73,74
01390:  DATA 61,74
01392:  DATA 75,73
01394:  DATA 5F,63
01396:  DATA 68,65
01398:  DATA 63,6B
0139A:  DATA 0D,0A
0139C:  DATA 00,00
0139E:  DATA 09,2D
013A0:  DATA 3E,20
013A2:  DATA 53,4D
013A4:  DATA 46,20
013A6:  DATA 61,76
013A8:  DATA 61,69
013AA:  DATA 6C,61
013AC:  DATA 62,6C
013AE:  DATA 65,20
013B0:  DATA 63,68
013B2:  DATA 65,63
013B4:  DATA 6B,0D
013B6:  DATA 0A,00
013B8:  DATA 09,20
013BA:  DATA 20,20
013BC:  DATA 54,72
013BE:  DATA 61,6E
013C0:  DATA 73,6D
013C2:  DATA 69,74
013C4:  DATA 20,41
013C6:  DATA 63,6B
013C8:  DATA 6E,6F
013CA:  DATA 77,6C
013CC:  DATA 65,64
013CE:  DATA 67,65
013D0:  DATA 6D,65
013D2:  DATA 6E,74
013D4:  DATA 0D,0A
013D6:  DATA 00,00
013D8:  DATA 09,09
013DA:  DATA 2D,3E
013DC:  DATA 20,61
013DE:  DATA 6C,6C
013E0:  DATA 6F,77
013E2:  DATA 65,64
013E4:  DATA 0D,0A
013E6:  DATA 00,00
013E8:  DATA 09,09
013EA:  DATA 2D,3E
013EC:  DATA 20,50
013EE:  DATA 72,6F
013F0:  DATA 63,65
013F2:  DATA 73,73
013F4:  DATA 69,6E
013F6:  DATA 67,20
013F8:  DATA 53,4D
013FA:  DATA 46,20
013FC:  DATA 64,61
013FE:  DATA 74,61
01400:  DATA 20,5B
01402:  DATA 25,64
01404:  DATA 5D,0D
01406:  DATA 0A,00
01408:  DATA 09,09
0140A:  DATA 2D,3E
0140C:  DATA 20,45
0140E:  DATA 78,65
01410:  DATA 63,75
01412:  DATA 74,69
01414:  DATA 6E,67
01416:  DATA 20,53
01418:  DATA 4D,46
0141A:  DATA 20,57
0141C:  DATA 52,49
0141E:  DATA 54,45
01420:  DATA 20,28
01422:  DATA 73,69
01424:  DATA 6E,67
01426:  DATA 6C,65
01428:  DATA 29,0D
0142A:  DATA 0A,00
0142C:  DATA 09,09
0142E:  DATA 2D,3E
01430:  DATA 20,45
01432:  DATA 78,65
01434:  DATA 63,75
01436:  DATA 74,69
01438:  DATA 6E,67
0143A:  DATA 20,53
0143C:  DATA 4D,46
0143E:  DATA 20,52
01440:  DATA 45,41
01442:  DATA 44,20
01444:  DATA 28,73
01446:  DATA 69,6E
01448:  DATA 67,6C
0144A:  DATA 65,29
0144C:  DATA 0D,0A
0144E:  DATA 00,00
01450:  DATA 09,09
01452:  DATA 2D,3E
01454:  DATA 20,45
01456:  DATA 78,65
01458:  DATA 63,75
0145A:  DATA 74,69
0145C:  DATA 6E,67
0145E:  DATA 20,53
01460:  DATA 4D,46
01462:  DATA 20,45
01464:  DATA 52,41
01466:  DATA 53,45
01468:  DATA 20,28
0146A:  DATA 73,69
0146C:  DATA 6E,67
0146E:  DATA 6C,65
01470:  DATA 29,0D
01472:  DATA 0A,00
01474:  DATA 09,09
01476:  DATA 2D,3E
01478:  DATA 20,55
0147A:  DATA 6E,6B
0147C:  DATA 6E,6F
0147E:  DATA 77,6E
01480:  DATA 20,53
01482:  DATA 4D,46
01484:  DATA 20,66
01486:  DATA 75,6E
01488:  DATA 63,74
0148A:  DATA 69,6F
0148C:  DATA 6E,20
0148E:  DATA 74,79
01490:  DATA 70,65
01492:  DATA 0D,0A
01494:  DATA 00,00
01496:  DATA 09,09
01498:  DATA 2D,3E
0149A:  DATA 20,45
0149C:  DATA 72,72
0149E:  DATA 6F,72
014A0:  DATA 3A,20
014A2:  DATA 46,61
014A4:  DATA 69,6C
014A6:  DATA 65,64
014A8:  DATA 20,74
014AA:  DATA 6F,20
014AC:  DATA 64,65
014AE:  DATA 71,75
014B0:  DATA 65,75
014B2:  DATA 65,20
014B4:  DATA 53,4D
014B6:  DATA 46,20
014B8:  DATA 64,61
014BA:  DATA 74,61
014BC:  DATA 0D,0A
014BE:  DATA 00,00
014C0:  DATA 09,09
014C2:  DATA 2D,3E
014C4:  DATA 20,43
014C6:  DATA 6F,6D
014C8:  DATA 70,6C
014CA:  DATA 65,74
014CC:  DATA 65,64
014CE:  DATA 20,70
014D0:  DATA 72,6F
014D2:  DATA 63,65
014D4:  DATA 73,73
014D6:  DATA 69,6E
014D8:  DATA 67,20
014DA:  DATA 25,64
014DC:  DATA 20,53
014DE:  DATA 4D,46
014E0:  DATA 20,6F
014E2:  DATA 70,65
014E4:  DATA 72,61
014E6:  DATA 74,69
014E8:  DATA 6F,6E
014EA:  DATA 73,0D
014EC:  DATA 0A,00
014EE:  DATA 09,09
014F0:  DATA 2D,3E
014F2:  DATA 20,64
014F4:  DATA 65,6E
014F6:  DATA 69,65
014F8:  DATA 64,0D
014FA:  DATA 0A,00
014FC:  DATA 53,74
014FE:  DATA 61,72
01500:  DATA 74,20
01502:  DATA 4D,4F
01504:  DATA 44,45
01506:  DATA 20,44
01508:  DATA 55,4D
0150A:  DATA 4D,59
0150C:  DATA 0D,0A
0150E:  DATA 00,00
01510:  DATA 09,4D
01512:  DATA 4F,44
01514:  DATA 45,20
01516:  DATA 20,20
01518:  DATA 20,20
0151A:  DATA 3A,20
0151C:  DATA 25,30
0151E:  DATA 32,58
01520:  DATA 0D,0A
01522:  DATA 00,00
01524:  DATA 09,50
01526:  DATA 61,72
01528:  DATA 61,6D
0152A:  DATA 31,20
0152C:  DATA 20,20
0152E:  DATA 3A,20
01530:  DATA 30,78
01532:  DATA 25,30
01534:  DATA 38,4C
01536:  DATA 58,0D
01538:  DATA 0A,00
0153A:  DATA 09,50
0153C:  DATA 61,72
0153E:  DATA 61,6D
01540:  DATA 32,20
01542:  DATA 20,20
01544:  DATA 3A,20
01546:  DATA 30,78
01548:  DATA 25,30
0154A:  DATA 34,4C
0154C:  DATA 58,0D
0154E:  DATA 0A,00
01550:  DATA 45,6E
01552:  DATA 64,20
01554:  DATA 4D,4F
01556:  DATA 44,45
01558:  DATA 20,44
0155A:  DATA 55,4D
0155C:  DATA 4D,59
0155E:  DATA 0D,0A
01560:  DATA 00,00
01562:  DATA 53,74
01564:  DATA 61,72
01566:  DATA 74,20
01568:  DATA 4D,4F
0156A:  DATA 44,45
0156C:  DATA 20,54
0156E:  DATA 45,53
01570:  DATA 54,20
01572:  DATA 49,56
01574:  DATA 0D,0A
01576:  DATA 00,00
01578:  DATA 09,53
0157A:  DATA 77,65
0157C:  DATA 65,70
0157E:  DATA 20,73
01580:  DATA 74,65
01582:  DATA 70,20
01584:  DATA 3A,20
01586:  DATA 25,75
01588:  DATA 0D,0A
0158A:  DATA 00,00
0158C:  DATA 45,6E
0158E:  DATA 64,20
01590:  DATA 4D,4F
01592:  DATA 44,45
01594:  DATA 20,54
01596:  DATA 45,53
01598:  DATA 54,20
0159A:  DATA 49,56
0159C:  DATA 0D,0A
0159E:  DATA 00,00
015A0:  DATA 53,74
015A2:  DATA 61,72
015A4:  DATA 74,20
015A6:  DATA 4D,4F
015A8:  DATA 44,45
015AA:  DATA 20,4D
015AC:  DATA 45,41
015AE:  DATA 53,55
015B0:  DATA 52,45
015B2:  DATA 0D,0A
015B4:  DATA 00,00
015B6:  DATA 53,74
015B8:  DATA 61,72
015BA:  DATA 74,20
015BC:  DATA 53,57
015BE:  DATA 45,45
015C0:  DATA 50,0D
015C2:  DATA 0A,00
015C4:  DATA 09,53
015C6:  DATA 77,65
015C8:  DATA 65,70
015CA:  DATA 20,73
015CC:  DATA 74,65
015CE:  DATA 70,20
015D0:  DATA 3A,20
015D2:  DATA 25,75
015D4:  DATA 0D,0A
015D6:  DATA 00,00
015D8:  DATA 45,4E
015DA:  DATA 44,20
015DC:  DATA 53,57
015DE:  DATA 45,45
015E0:  DATA 50,0D
015E2:  DATA 0A,00
015E4:  DATA 53,74
015E6:  DATA 61,72
015E8:  DATA 74,20
015EA:  DATA 4D,4F
015EC:  DATA 44,45
015EE:  DATA 20,4D
015F0:  DATA 45,41
015F2:  DATA 53,20
015F4:  DATA 49,56
015F6:  DATA 0D,0A
015F8:  DATA 00,00
015FA:  DATA 09,49
015FC:  DATA 44,3A
015FE:  DATA 20,25
01600:  DATA 30,32
01602:  DATA 58,0D
01604:  DATA 0A,00
01606:  DATA 09,49
01608:  DATA 73,20
0160A:  DATA 46,69
0160C:  DATA 6E,69
0160E:  DATA 73,68
01610:  DATA 65,64
01612:  DATA 3A,20
01614:  DATA 25,64
01616:  DATA 0D,0A
01618:  DATA 00,00
0161A:  DATA 45,6E
0161C:  DATA 64,20
0161E:  DATA 4D,4F
01620:  DATA 44,45
01622:  DATA 20,4D
01624:  DATA 45,41
01626:  DATA 53,20
01628:  DATA 49,56
0162A:  DATA 0D,0A
0162C:  DATA 00,00
0162E:  DATA 53,74
01630:  DATA 61,72
01632:  DATA 74,20
01634:  DATA 46,6C
01636:  DATA 61,73
01638:  DATA 68,20
0163A:  DATA 45,72
0163C:  DATA 61,73
0163E:  DATA 65,20
01640:  DATA 41,6C
01642:  DATA 6C,0D
01644:  DATA 0A,00
01646:  DATA 45,6E
01648:  DATA 64,20
0164A:  DATA 46,6C
0164C:  DATA 61,73
0164E:  DATA 68,20
01650:  DATA 45,72
01652:  DATA 61,73
01654:  DATA 65,20
01656:  DATA 41,6C
01658:  DATA 6C,0D
0165A:  DATA 0A,00
0165C:  DATA 53,74
0165E:  DATA 61,72
01660:  DATA 74,20
01662:  DATA 46,6C
01664:  DATA 61,73
01666:  DATA 68,20
01668:  DATA 45,72
0166A:  DATA 61,73
0166C:  DATA 65,20
0166E:  DATA 31,20
01670:  DATA 53,65
01672:  DATA 63,74
01674:  DATA 6F,72
01676:  DATA 0D,0A
01678:  DATA 00,00
0167A:  DATA 09,53
0167C:  DATA 65,63
0167E:  DATA 74,6F
01680:  DATA 72,20
01682:  DATA 41,64
01684:  DATA 64,72
01686:  DATA 65,73
01688:  DATA 73,3A
0168A:  DATA 20,30
0168C:  DATA 78,25
0168E:  DATA 30,38
01690:  DATA 4C,58
01692:  DATA 0D,0A
01694:  DATA 00,00
01696:  DATA 45,6E
01698:  DATA 64,20
0169A:  DATA 46,6C
0169C:  DATA 61,73
0169E:  DATA 68,20
016A0:  DATA 45,72
016A2:  DATA 61,73
016A4:  DATA 65,20
016A6:  DATA 31,20
016A8:  DATA 53,65
016AA:  DATA 63,74
016AC:  DATA 6F,72
016AE:  DATA 0D,0A
016B0:  DATA 00,00
016B2:  DATA 53,74
016B4:  DATA 61,72
016B6:  DATA 74,20
016B8:  DATA 46,6C
016BA:  DATA 61,73
016BC:  DATA 68,20
016BE:  DATA 43,6F
016C0:  DATA 70,79
016C2:  DATA 20,31
016C4:  DATA 20,53
016C6:  DATA 65,63
016C8:  DATA 74,6F
016CA:  DATA 72,0D
016CC:  DATA 0A,00
016CE:  DATA 09,53
016D0:  DATA 75,62
016D2:  DATA 73,65
016D4:  DATA 63,74
016D6:  DATA 6F,72
016D8:  DATA 20,41
016DA:  DATA 64,64
016DC:  DATA 72,65
016DE:  DATA 73,73
016E0:  DATA 3A,20
016E2:  DATA 30,78
016E4:  DATA 25,30
016E6:  DATA 38,4C
016E8:  DATA 58,0D
016EA:  DATA 0A,00
016EC:  DATA 45,6E
016EE:  DATA 64,20
016F0:  DATA 46,6C
016F2:  DATA 61,73
016F4:  DATA 68,20
016F6:  DATA 43,6F
016F8:  DATA 70,79
016FA:  DATA 20,31
016FC:  DATA 20,53
016FE:  DATA 65,63
01700:  DATA 74,6F
01702:  DATA 72,0D
01704:  DATA 0A,00
01706:  DATA 53,74
01708:  DATA 61,72
0170A:  DATA 74,20
0170C:  DATA 46,6C
0170E:  DATA 61,73
01710:  DATA 68,20
01712:  DATA 45,72
01714:  DATA 61,73
01716:  DATA 65,20
01718:  DATA 36,34
0171A:  DATA 6B,42
0171C:  DATA 79,74
0171E:  DATA 65,20
01720:  DATA 53,75
01722:  DATA 62,73
01724:  DATA 65,63
01726:  DATA 74,6F
01728:  DATA 72,0D
0172A:  DATA 0A,00
0172C:  DATA 09,53
0172E:  DATA 75,62
01730:  DATA 73,65
01732:  DATA 63,74
01734:  DATA 6F,72
01736:  DATA 20,41
01738:  DATA 64,64
0173A:  DATA 72,65
0173C:  DATA 73,73
0173E:  DATA 3A,20
01740:  DATA 30,78
01742:  DATA 25,30
01744:  DATA 38,4C
01746:  DATA 58,0D
01748:  DATA 0A,00
0174A:  DATA 45,6E
0174C:  DATA 64,20
0174E:  DATA 46,6C
01750:  DATA 61,73
01752:  DATA 68,20
01754:  DATA 45,72
01756:  DATA 61,73
01758:  DATA 65,20
0175A:  DATA 36,34
0175C:  DATA 6B,42
0175E:  DATA 79,74
01760:  DATA 65,20
01762:  DATA 53,75
01764:  DATA 62,73
01766:  DATA 65,63
01768:  DATA 74,6F
0176A:  DATA 72,0D
0176C:  DATA 0A,00
0176E:  DATA 53,74
01770:  DATA 61,72
01772:  DATA 74,20
01774:  DATA 46,6C
01776:  DATA 61,73
01778:  DATA 68,20
0177A:  DATA 57,72
0177C:  DATA 69,74
0177E:  DATA 65,20
01780:  DATA 44,65
01782:  DATA 6D,6F
01784:  DATA 0D,0A
01786:  DATA 00,00
01788:  DATA 09,4D
0178A:  DATA 4F,44
0178C:  DATA 45,20
0178E:  DATA 20,20
01790:  DATA 20,20
01792:  DATA 3A,20
01794:  DATA 25,30
01796:  DATA 32,58
01798:  DATA 0D,0A
0179A:  DATA 00,00
0179C:  DATA 09,41
0179E:  DATA 64,64
017A0:  DATA 72,65
017A2:  DATA 73,73
017A4:  DATA 20,20
017A6:  DATA 3A,20
017A8:  DATA 30,78
017AA:  DATA 25,30
017AC:  DATA 38,4C
017AE:  DATA 58,0D
017B0:  DATA 0A,00
017B2:  DATA 09,50
017B4:  DATA 61,63
017B6:  DATA 6B,65
017B8:  DATA 74,4E
017BA:  DATA 75,6D
017BC:  DATA 3A,20
017BE:  DATA 30,78
017C0:  DATA 25,30
017C2:  DATA 34,4C
017C4:  DATA 58,0D
017C6:  DATA 0A,00
017C8:  DATA 57,72
017CA:  DATA 69,74
017CC:  DATA 65,20
017CE:  DATA 44,61
017D0:  DATA 74,61
017D2:  DATA 0D,0A
017D4:  DATA 00,00
017D6:  DATA 45,6E
017D8:  DATA 64,20
017DA:  DATA 46,6C
017DC:  DATA 61,73
017DE:  DATA 68,20
017E0:  DATA 57,72
017E2:  DATA 69,74
017E4:  DATA 65,20
017E6:  DATA 44,65
017E8:  DATA 6D,6F
017EA:  DATA 0D,0A
017EC:  DATA 00,00
017EE:  DATA 53,74
017F0:  DATA 61,72
017F2:  DATA 74,20
017F4:  DATA 46,6C
017F6:  DATA 61,73
017F8:  DATA 68,20
017FA:  DATA 57,72
017FC:  DATA 69,74
017FE:  DATA 65,20
01800:  DATA 34,6B
01802:  DATA 42,79
01804:  DATA 74,65
01806:  DATA 20,53
01808:  DATA 75,62
0180A:  DATA 73,65
0180C:  DATA 63,74
0180E:  DATA 6F,72
01810:  DATA 0D,0A
01812:  DATA 00,00
01814:  DATA 45,6E
01816:  DATA 64,20
01818:  DATA 46,6C
0181A:  DATA 61,73
0181C:  DATA 68,20
0181E:  DATA 57,72
01820:  DATA 69,74
01822:  DATA 65,20
01824:  DATA 34,6B
01826:  DATA 42,79
01828:  DATA 74,65
0182A:  DATA 20,53
0182C:  DATA 75,62
0182E:  DATA 73,65
01830:  DATA 63,74
01832:  DATA 6F,72
01834:  DATA 0D,0A
01836:  DATA 00,00
01838:  DATA 53,74
0183A:  DATA 61,72
0183C:  DATA 74,20
0183E:  DATA 46,6C
01840:  DATA 61,73
01842:  DATA 68,20
01844:  DATA 52,65
01846:  DATA 61,64
01848:  DATA 0D,0A
0184A:  DATA 00,00
0184C:  DATA 09,4D
0184E:  DATA 4F,44
01850:  DATA 45,20
01852:  DATA 20,20
01854:  DATA 20,20
01856:  DATA 3A,20
01858:  DATA 25,30
0185A:  DATA 32,58
0185C:  DATA 0D,0A
0185E:  DATA 00,00
01860:  DATA 09,41
01862:  DATA 64,64
01864:  DATA 72,65
01866:  DATA 73,73
01868:  DATA 20,20
0186A:  DATA 3A,20
0186C:  DATA 30,78
0186E:  DATA 25,30
01870:  DATA 38,4C
01872:  DATA 58,0D
01874:  DATA 0A,00
01876:  DATA 09,50
01878:  DATA 61,63
0187A:  DATA 6B,65
0187C:  DATA 74,4E
0187E:  DATA 75,6D
01880:  DATA 3A,20
01882:  DATA 30,78
01884:  DATA 25,30
01886:  DATA 34,4C
01888:  DATA 58,0D
0188A:  DATA 0A,00
0188C:  DATA 52,45
0188E:  DATA 41,44
01890:  DATA 20,44
01892:  DATA 41,54
01894:  DATA 41,0D
01896:  DATA 0A,00
01898:  DATA 4D,69
0189A:  DATA 73,73
0189C:  DATA 69,6F
0189E:  DATA 6E,20
018A0:  DATA 46,6C
018A2:  DATA 61,73
018A4:  DATA 68,20
018A6:  DATA 69,73
018A8:  DATA 20,6E
018AA:  DATA 6F,74
018AC:  DATA 20,63
018AE:  DATA 6F,6E
018B0:  DATA 6E,65
018B2:  DATA 63,74
018B4:  DATA 65,64
018B6:  DATA 0D,0A
018B8:  DATA 00,00
018BA:  DATA 45,6E
018BC:  DATA 64,20
018BE:  DATA 46,6C
018C0:  DATA 61,73
018C2:  DATA 68,20
018C4:  DATA 52,65
018C6:  DATA 61,64
018C8:  DATA 0D,0A
018CA:  DATA 00,00
018CC:  DATA 53,74
018CE:  DATA 61,72
018D0:  DATA 74,20
018D2:  DATA 46,6C
018D4:  DATA 61,73
018D6:  DATA 68,20
018D8:  DATA 52,65
018DA:  DATA 61,64
018DC:  DATA 20,41
018DE:  DATA 64,64
018E0:  DATA 72,65
018E2:  DATA 73,73
018E4:  DATA 0D,0A
018E6:  DATA 00,00
018E8:  DATA 52,65
018EA:  DATA 61,64
018EC:  DATA 20,44
018EE:  DATA 61,74
018F0:  DATA 61,3A
018F2:  DATA 20,25
018F4:  DATA 30,32
018F6:  DATA 58,20
018F8:  DATA 25,30
018FA:  DATA 32,58
018FC:  DATA 20,25
018FE:  DATA 30,32
01900:  DATA 58,20
01902:  DATA 25,30
01904:  DATA 32,58
01906:  DATA 0D,0A
01908:  DATA 00,00
0190A:  DATA 45,6E
0190C:  DATA 64,20
0190E:  DATA 46,6C
01910:  DATA 61,73
01912:  DATA 68,20
01914:  DATA 52,65
01916:  DATA 61,64
01918:  DATA 20,41
0191A:  DATA 64,64
0191C:  DATA 72,65
0191E:  DATA 73,73
01920:  DATA 0D,0A
01922:  DATA 00,00
01924:  DATA 53,74
01926:  DATA 61,72
01928:  DATA 74,20
0192A:  DATA 46,6C
0192C:  DATA 61,73
0192E:  DATA 68,20
01930:  DATA 45,72
01932:  DATA 61,73
01934:  DATA 65,20
01936:  DATA 61,6E
01938:  DATA 64,20
0193A:  DATA 52,65
0193C:  DATA 73,65
0193E:  DATA 74,0D
01940:  DATA 0A,00
01942:  DATA 45,6E
01944:  DATA 64,20
01946:  DATA 46,6C
01948:  DATA 61,73
0194A:  DATA 68,20
0194C:  DATA 45,72
0194E:  DATA 61,73
01950:  DATA 65,20
01952:  DATA 61,6E
01954:  DATA 64,20
01956:  DATA 52,65
01958:  DATA 73,65
0195A:  DATA 74,0D
0195C:  DATA 0A,00
0195E:  DATA 53,74
01960:  DATA 61,72
01962:  DATA 74,20
01964:  DATA 46,6C
01966:  DATA 61,73
01968:  DATA 68,20
0196A:  DATA 41,64
0196C:  DATA 64,72
0196E:  DATA 65,73
01970:  DATA 73,20
01972:  DATA 52,65
01974:  DATA 73,65
01976:  DATA 74,0D
01978:  DATA 0A,00
0197A:  DATA 45,6E
0197C:  DATA 64,20
0197E:  DATA 46,6C
01980:  DATA 61,73
01982:  DATA 68,20
01984:  DATA 41,64
01986:  DATA 64,72
01988:  DATA 65,73
0198A:  DATA 73,20
0198C:  DATA 52,65
0198E:  DATA 73,65
01990:  DATA 74,0D
01992:  DATA 0A,00
01994:  DATA 53,74
01996:  DATA 61,72
01998:  DATA 74,20
0199A:  DATA 46,6C
0199C:  DATA 61,73
0199E:  DATA 68,20
019A0:  DATA 53,4D
019A2:  DATA 46,20
019A4:  DATA 43,6F
019A6:  DATA 70,79
019A8:  DATA 0D,0A
019AA:  DATA 00,00
019AC:  DATA 45,6E
019AE:  DATA 64,20
019B0:  DATA 46,6C
019B2:  DATA 61,73
019B4:  DATA 68,20
019B6:  DATA 53,4D
019B8:  DATA 46,20
019BA:  DATA 43,6F
019BC:  DATA 70,79
019BE:  DATA 0D,0A
019C0:  DATA 00,00
019C2:  DATA 53,74
019C4:  DATA 61,72
019C6:  DATA 74,20
019C8:  DATA 46,6C
019CA:  DATA 61,73
019CC:  DATA 68,20
019CE:  DATA 53,4D
019D0:  DATA 46,20
019D2:  DATA 52,65
019D4:  DATA 61,64
019D6:  DATA 0D,0A
019D8:  DATA 00,00
019DA:  DATA 52,65
019DC:  DATA 61,64
019DE:  DATA 20,44
019E0:  DATA 61,74
019E2:  DATA 61,3A
019E4:  DATA 20,00
019E6:  DATA 0D,0A
019E8:  DATA 45,6E
019EA:  DATA 64,20
019EC:  DATA 46,6C
019EE:  DATA 61,73
019F0:  DATA 68,20
019F2:  DATA 53,4D
019F4:  DATA 46,20
019F6:  DATA 52,65
019F8:  DATA 61,64
019FA:  DATA 0D,0A
019FC:  DATA 00,00
019FE:  DATA 53,74
01A00:  DATA 61,72
01A02:  DATA 74,20
01A04:  DATA 46,6C
01A06:  DATA 61,73
01A08:  DATA 68,20
01A0A:  DATA 53,4D
01A0C:  DATA 46,20
01A0E:  DATA 45,72
01A10:  DATA 61,73
01A12:  DATA 65,0D
01A14:  DATA 0A,00
01A16:  DATA 45,6E
01A18:  DATA 64,20
01A1A:  DATA 46,6C
01A1C:  DATA 61,73
01A1E:  DATA 68,20
01A20:  DATA 53,4D
01A22:  DATA 46,20
01A24:  DATA 45,72
01A26:  DATA 61,73
01A28:  DATA 65,0D
01A2A:  DATA 0A,00
01A2C:  DATA 53,74
01A2E:  DATA 61,72
01A30:  DATA 74,20
01A32:  DATA 46,6C
01A34:  DATA 61,73
01A36:  DATA 68,20
01A38:  DATA 41,64
01A3A:  DATA 64,72
01A3C:  DATA 65,73
01A3E:  DATA 73,20
01A40:  DATA 52,65
01A42:  DATA 73,65
01A44:  DATA 74,0D
01A46:  DATA 0A,00
01A48:  DATA 45,6E
01A4A:  DATA 64,20
01A4C:  DATA 46,6C
01A4E:  DATA 61,73
01A50:  DATA 68,20
01A52:  DATA 41,64
01A54:  DATA 64,72
01A56:  DATA 65,73
01A58:  DATA 73,20
01A5A:  DATA 52,65
01A5C:  DATA 73,65
01A5E:  DATA 74,0D
01A60:  DATA 0A,00
01A62:  DATA 53,4D
01A64:  DATA 46,20
01A66:  DATA 69,73
01A68:  DATA 20,6E
01A6A:  DATA 6F,74
01A6C:  DATA 20,63
01A6E:  DATA 6F,6E
01A70:  DATA 6E,65
01A72:  DATA 63,74
01A74:  DATA 65,64
01A76:  DATA 0D,0A
01A78:  DATA 00,00
01A7A:  DATA 53,74
01A7C:  DATA 61,72
01A7E:  DATA 74,20
01A80:  DATA 46,6C
01A82:  DATA 61,73
01A84:  DATA 68,20
01A86:  DATA 53,4D
01A88:  DATA 46,20
01A8A:  DATA 52,65
01A8C:  DATA 61,64
01A8E:  DATA 20,46
01A90:  DATA 6F,72
01A92:  DATA 63,65
01A94:  DATA 0D,0A
01A96:  DATA 00,00
01A98:  DATA 09,41
01A9A:  DATA 64,64
01A9C:  DATA 72,65
01A9E:  DATA 73,73
01AA0:  DATA 20,20
01AA2:  DATA 3A,20
01AA4:  DATA 30,78
01AA6:  DATA 25,30
01AA8:  DATA 38,4C
01AAA:  DATA 58,0D
01AAC:  DATA 0A,00
01AAE:  DATA 09,50
01AB0:  DATA 61,63
01AB2:  DATA 6B,65
01AB4:  DATA 74,4E
01AB6:  DATA 75,6D
01AB8:  DATA 3A,20
01ABA:  DATA 30,78
01ABC:  DATA 25,30
01ABE:  DATA 34,4C
01AC0:  DATA 58,0D
01AC2:  DATA 0A,00
01AC4:  DATA 72,65
01AC6:  DATA 61,64
01AC8:  DATA 20,64
01ACA:  DATA 61,74
01ACC:  DATA 61,0D
01ACE:  DATA 0A,00
01AD0:  DATA 0D,0A
01AD2:  DATA 45,6E
01AD4:  DATA 64,20
01AD6:  DATA 46,6C
01AD8:  DATA 61,73
01ADA:  DATA 68,20
01ADC:  DATA 53,4D
01ADE:  DATA 46,20
01AE0:  DATA 52,65
01AE2:  DATA 61,64
01AE4:  DATA 20,46
01AE6:  DATA 6F,72
01AE8:  DATA 63,65
01AEA:  DATA 0D,0A
01AEC:  DATA 00,00
01AEE:  DATA 53,74
01AF0:  DATA 61,72
01AF2:  DATA 74,20
01AF4:  DATA 53,4D
01AF6:  DATA 46,20
01AF8:  DATA 45,72
01AFA:  DATA 61,73
01AFC:  DATA 65,20
01AFE:  DATA 41,6C
01B00:  DATA 6C,0D
01B02:  DATA 0A,00
01B04:  DATA 45,6E
01B06:  DATA 64,20
01B08:  DATA 53,4D
01B0A:  DATA 46,20
01B0C:  DATA 45,72
01B0E:  DATA 61,73
01B10:  DATA 65,20
01B12:  DATA 41,6C
01B14:  DATA 6C,0D
01B16:  DATA 0A,00
01B18:  DATA 53,74
01B1A:  DATA 61,72
01B1C:  DATA 74,20
01B1E:  DATA 53,4D
01B20:  DATA 46,20
01B22:  DATA 52,65
01B24:  DATA 73,65
01B26:  DATA 74,0D
01B28:  DATA 0A,00
01B2A:  DATA 45,6E
01B2C:  DATA 64,20
01B2E:  DATA 53,4D
01B30:  DATA 46,20
01B32:  DATA 52,65
01B34:  DATA 73,65
01B36:  DATA 74,0D
01B38:  DATA 0A,00
01B3A:  DATA 0D,0A
01B3C:  DATA 0D,0A
01B3E:  DATA 0D,0A
01B40:  DATA 3D,3D
01B42:  DATA 3D,3D
01B44:  DATA 3D,3D
01B46:  DATA 3D,3D
01B48:  DATA 3D,3D
01B4A:  DATA 3D,3D
01B4C:  DATA 3D,3D
01B4E:  DATA 3D,3D
01B50:  DATA 3D,3D
01B52:  DATA 3D,3D
01B54:  DATA 3D,3D
01B56:  DATA 3D,3D
01B58:  DATA 3D,3D
01B5A:  DATA 3D,3D
01B5C:  DATA 3D,3D
01B5E:  DATA 3D,3D
01B60:  DATA 3D,3D
01B62:  DATA 3D,3D
01B64:  DATA 3D,3D
01B66:  DATA 3D,3D
01B68:  DATA 3D,3D
01B6A:  DATA 3D,3D
01B6C:  DATA 3D,3D
01B6E:  DATA 3D,3D
01B70:  DATA 3D,3D
01B72:  DATA 3D,3D
01B74:  DATA 3D,3D
01B76:  DATA 3D,3D
01B78:  DATA 3D,3D
01B7A:  DATA 3D,3D
01B7C:  DATA 0D,0A
01B7E:  DATA 00,00
01B80:  DATA 54,68
01B82:  DATA 69,73
01B84:  DATA 20,69
01B86:  DATA 73,20
01B88:  DATA 4D,4F
01B8A:  DATA 4D,49
01B8C:  DATA 4A,49
01B8E:  DATA 20,43
01B90:  DATA 49,47
01B92:  DATA 53,20
01B94:  DATA 50,49
01B96:  DATA 43,20
01B98:  DATA 42,42
01B9A:  DATA 4D,20
01B9C:  DATA 66,6F
01B9E:  DATA 72,20
01BA0:  DATA 4D,49
01BA2:  DATA 53,37
01BA4:  DATA 5F,42
01BA6:  DATA 42,4D
01BA8:  DATA 34,2E
01BAA:  DATA 0D,0A
01BAC:  DATA 00,00
01BAE:  DATA 4C,61
01BB0:  DATA 73,74
01BB2:  DATA 20,75
01BB4:  DATA 70,64
01BB6:  DATA 61,74
01BB8:  DATA 65,64
01BBA:  DATA 20,6F
01BBC:  DATA 6E,20
01BBE:  DATA 25,73
01BC0:  DATA 20,25
01BC2:  DATA 73,2C
01BC4:  DATA 20,62
01BC6:  DATA 79,20
01BC8:  DATA 49,6E
01BCA:  DATA 6F,75
01BCC:  DATA 65,2E
01BCE:  DATA 0D,0A
01BD0:  DATA 0D,0A
01BD2:  DATA 00,00
01BD4:  DATA 37,2D
01BD6:  DATA 41,75
01BD8:  DATA 67,2D
01BDA:  DATA 32,35
01BDC:  DATA 00,00
01BDE:  DATA 31,36
01BE0:  DATA 3A,32
01BE2:  DATA 38,3A
01BE4:  DATA 35,36
01BE6:  DATA 00,00
01BE8:  DATA 5F,5F
01BEA:  DATA 5F,5F
01BEC:  DATA 43,49
01BEE:  DATA 47,53
01BF0:  DATA 20,50
01BF2:  DATA 49,43
01BF4:  DATA 20,53
01BF6:  DATA 74,61
01BF8:  DATA 72,74
01BFA:  DATA 20,4F
01BFC:  DATA 70,65
01BFE:  DATA 72,61
01C00:  DATA 74,69
01C02:  DATA 6F,6E
01C04:  DATA 5F,5F
01C06:  DATA 5F,5F
01C08:  DATA 5F,0D
01C0A:  DATA 0A,0D
01C0C:  DATA 0A,00
01C0E:  DATA 77,61
01C10:  DATA 69,74
01C12:  DATA 69,6E
01C14:  DATA 67,20
01C16:  DATA 66,6F
01C18:  DATA 72,20
01C1A:  DATA 42,4F
01C1C:  DATA 53,53
01C1E:  DATA 20,50
01C20:  DATA 49,43
01C22:  DATA 20,63
01C24:  DATA 6F,6D
01C26:  DATA 6D,61
01C28:  DATA 6E,64
01C2A:  DATA 00,00
01C2C:  DATA 0D,0A
01C2E:  DATA 77,61
01C30:  DATA 69,74
01C32:  DATA 69,6E
01C34:  DATA 67,20
01C36:  DATA 66,6F
01C38:  DATA 72,20
01C3A:  DATA 42,4F
01C3C:  DATA 53,53
01C3E:  DATA 20,50
01C40:  DATA 49,43
01C42:  DATA 20,63
01C44:  DATA 6F,6D
01C46:  DATA 6D,61
01C48:  DATA 6E,64
01C4A:  DATA 00,00
01C4C:  DATA 0D,0A
01C4E:  DATA 0D,0A
01C50:  DATA 3D,3D
01C52:  DATA 3D,3D
01C54:  DATA 3D,3D
01C56:  DATA 0D,0A
01C58:  DATA 0D,0A
01C5A:  DATA 46,69
01C5C:  DATA 6E,69
01C5E:  DATA 73,68
01C60:  DATA 65,64
01C62:  DATA 20,70
01C64:  DATA 72,6F
01C66:  DATA 63,65
01C68:  DATA 73,73
01C6A:  DATA 2E,0D
01C6C:  DATA 0A,57
01C6E:  DATA 61,69
01C70:  DATA 74,20
01C72:  DATA 66,6F
01C74:  DATA 72,20
01C76:  DATA 42,4F
01C78:  DATA 53,53
01C7A:  DATA 20,50
01C7C:  DATA 49,43
01C7E:  DATA 20,74
01C80:  DATA 75,72
01C82:  DATA 6E,20
01C84:  DATA 6F,66
01C86:  DATA 66,20
01C88:  DATA 6D,65
01C8A:  DATA 00,00
01C8C:  DATA 45,6E
01C8E:  DATA 64,20
01C90:  DATA 6D,61
01C92:  DATA 69,6E
01C94:  DATA 0D,0A
01C96:  DATA 00,00
*
01D18:  TBLRD*+
01D1A:  MOVF   FF5,F
01D1C:  BTFSC  FD8.2
01D1E:  GOTO   1D46
01D22:  MOVFF  FF6,865
01D26:  MOVFF  FF7,866
01D2A:  MOVFF  FF8,867
01D2E:  MOVFF  FF5,868
01D32:  CALL   1CC6
01D36:  MOVFF  865,FF6
01D3A:  MOVFF  866,FF7
01D3E:  MOVFF  867,FF8
01D42:  GOTO   1D18
01D46:  RETURN 0
01D48:  TBLRD*+
01D4A:  MOVFF  FF6,826
01D4E:  MOVFF  FF7,827
01D52:  MOVFF  FF8,828
01D56:  MOVFF  FF5,868
01D5A:  CALL   1CC6
01D5E:  MOVFF  826,FF6
01D62:  MOVFF  827,FF7
01D66:  MOVFF  828,FF8
01D6A:  MOVLB  8
01D6C:  DECFSZ x25,F
01D6E:  BRA    1D74
01D70:  BRA    1D7A
01D72:  MOVLB  0
01D74:  MOVLB  0
01D76:  GOTO   1D48
01D7A:  MOVLB  0
01D7C:  RETURN 0
*
01F0A:  MOVLB  4
01F0C:  BTFSS  xC8.7
01F0E:  BRA    1F16
01F10:  MOVLB  0
01F12:  GOTO   1F46
01F16:  MOVLW  0F
01F18:  MOVWF  00
01F1A:  SWAPF  xC7,W
01F1C:  ANDWF  00,F
01F1E:  MOVLW  0A
01F20:  SUBWF  00,W
01F22:  BTFSS  FD8.0
01F24:  BRA    1F2C
01F26:  MOVLB  0
01F28:  GOTO   1F36
01F2C:  MOVLW  30
01F2E:  ADDWF  00,F
01F30:  MOVLB  0
01F32:  GOTO   1F3E
01F36:  MOVLB  4
01F38:  MOVF   xC8,W
01F3A:  ADDWF  00,F
01F3C:  MOVLB  0
01F3E:  MOVFF  00,868
01F42:  CALL   1CC6
01F46:  MOVLW  0F
01F48:  MOVLB  4
01F4A:  ANDWF  xC7,F
01F4C:  MOVLW  0A
01F4E:  SUBWF  xC7,W
01F50:  BTFSS  FD8.0
01F52:  BRA    1F5A
01F54:  MOVLB  0
01F56:  GOTO   1F62
01F5A:  MOVLW  30
01F5C:  MOVLB  0
01F5E:  GOTO   1F6A
01F62:  MOVLB  4
01F64:  BCF    xC8.7
01F66:  MOVF   xC8,W
01F68:  MOVLB  0
01F6A:  MOVLB  4
01F6C:  ADDWF  xC7,F
01F6E:  MOVFF  4C7,868
01F72:  MOVLB  0
01F74:  CALL   1CC6
01F78:  RETURN 0
*
02072:  MOVLB  8
02074:  MOVF   x83,W
02076:  ANDLW  07
02078:  MOVWF  00
0207A:  RRCF   x83,W
0207C:  MOVWF  01
0207E:  RRCF   01,F
02080:  RRCF   01,F
02082:  MOVLW  1F
02084:  ANDWF  01,F
02086:  MOVF   01,W
02088:  ADDWF  x85,W
0208A:  MOVWF  FE9
0208C:  MOVLW  00
0208E:  ADDWFC x86,W
02090:  MOVWF  FEA
02092:  CLRF   01
02094:  INCF   01,F
02096:  INCF   00,F
02098:  MOVLB  0
0209A:  GOTO   20A0
0209E:  RLCF   01,F
020A0:  DECFSZ 00,F
020A2:  GOTO   209E
020A6:  MOVLB  8
020A8:  MOVF   x84,F
020AA:  BTFSS  FD8.2
020AC:  BRA    20B4
020AE:  MOVLB  0
020B0:  GOTO   20BE
020B4:  MOVF   01,W
020B6:  IORWF  FEF,F
020B8:  MOVLB  0
020BA:  GOTO   20C4
020BE:  COMF   01,F
020C0:  MOVF   01,W
020C2:  ANDWF  FEF,F
020C4:  RETURN 0
*
04492:  TSTFSZ 01
04494:  GOTO   44A2
04498:  TSTFSZ 02
0449A:  GOTO   44A4
0449E:  GOTO   44B4
044A2:  INCF   02,F
044A4:  MOVFF  00,FEE
044A8:  DECFSZ 01,F
044AA:  GOTO   44A4
044AE:  DECFSZ 02,F
044B0:  GOTO   44A4
044B4:  RETURN 0
*
0489C:  MOVLB  8
0489E:  MOVF   x28,W
048A0:  CLRF   01
048A2:  SUBWF  x27,W
048A4:  BTFSS  FD8.0
048A6:  BRA    48AE
048A8:  MOVLB  0
048AA:  GOTO   48B8
048AE:  MOVF   x27,W
048B0:  MOVWF  00
048B2:  MOVLB  0
048B4:  GOTO   48E2
048B8:  CLRF   00
048BA:  MOVLW  08
048BC:  MOVLB  8
048BE:  MOVWF  x29
048C0:  MOVLB  0
048C2:  MOVLB  8
048C4:  RLCF   x27,F
048C6:  RLCF   00,F
048C8:  MOVF   x28,W
048CA:  SUBWF  00,W
048CC:  BTFSC  FD8.0
048CE:  MOVWF  00
048D0:  RLCF   01,F
048D2:  DECFSZ x29,F
048D4:  BRA    48DA
048D6:  BRA    48E0
048D8:  MOVLB  0
048DA:  MOVLB  0
048DC:  GOTO   48C2
048E0:  MOVLB  0
048E2:  RETURN 0
048E4:  MOVF   01,W
048E6:  MOVFF  825,827
048EA:  MOVLW  64
048EC:  MOVLB  8
048EE:  MOVWF  x28
048F0:  MOVLB  0
048F2:  CALL   489C
048F6:  MOVFF  00,825
048FA:  MOVF   01,W
048FC:  MOVLW  30
048FE:  BTFSS  FD8.2
04900:  GOTO   4924
04904:  MOVLB  8
04906:  BTFSC  x26.1
04908:  BRA    4910
0490A:  MOVLB  0
0490C:  GOTO   4938
04910:  BTFSS  x26.3
04912:  BRA    491A
04914:  MOVLB  0
04916:  GOTO   4938
0491A:  BTFSC  x26.4
0491C:  MOVLW  20
0491E:  MOVLB  0
04920:  GOTO   492E
04924:  MOVLB  8
04926:  BCF    x26.3
04928:  BCF    x26.4
0492A:  BSF    x26.0
0492C:  MOVLB  0
0492E:  ADDWF  01,F
04930:  MOVFF  01,868
04934:  CALL   1CC6
04938:  MOVFF  825,827
0493C:  MOVLW  0A
0493E:  MOVLB  8
04940:  MOVWF  x28
04942:  MOVLB  0
04944:  CALL   489C
04948:  MOVFF  00,825
0494C:  MOVF   01,W
0494E:  MOVLW  30
04950:  BTFSS  FD8.2
04952:  GOTO   4972
04956:  MOVLB  8
04958:  BTFSS  x26.3
0495A:  BRA    4962
0495C:  MOVLB  0
0495E:  GOTO   497C
04962:  BTFSC  x26.0
04964:  BRA    496C
04966:  MOVLB  0
04968:  GOTO   497C
0496C:  BTFSC  x26.4
0496E:  MOVLW  20
04970:  MOVLB  0
04972:  ADDWF  01,F
04974:  MOVFF  01,868
04978:  CALL   1CC6
0497C:  MOVLW  30
0497E:  MOVLB  8
04980:  ADDWF  x25,F
04982:  MOVFF  825,868
04986:  MOVLB  0
04988:  CALL   1CC6
0498C:  RETURN 0
*
04B22:  MOVFF  FEA,3D6
04B26:  MOVFF  FE9,3D5
04B2A:  MOVLB  3
04B2C:  SWAPF  xCF,W
04B2E:  IORLW  F0
04B30:  MOVWF  xD1
04B32:  ADDWF  xD1,F
04B34:  ADDLW  E2
04B36:  MOVWF  xD2
04B38:  ADDLW  32
04B3A:  MOVWF  xD4
04B3C:  MOVF   xCF,W
04B3E:  ANDLW  0F
04B40:  ADDWF  xD2,F
04B42:  ADDWF  xD2,F
04B44:  ADDWF  xD4,F
04B46:  ADDLW  E9
04B48:  MOVWF  xD3
04B4A:  ADDWF  xD3,F
04B4C:  ADDWF  xD3,F
04B4E:  SWAPF  xCE,W
04B50:  ANDLW  0F
04B52:  ADDWF  xD3,F
04B54:  ADDWF  xD4,F
04B56:  RLCF   xD3,F
04B58:  RLCF   xD4,F
04B5A:  COMF   xD4,F
04B5C:  RLCF   xD4,F
04B5E:  MOVF   xCE,W
04B60:  ANDLW  0F
04B62:  ADDWF  xD4,F
04B64:  RLCF   xD1,F
04B66:  MOVLW  07
04B68:  MOVWF  xD0
04B6A:  MOVLW  0A
04B6C:  MOVLB  0
04B6E:  MOVLB  3
04B70:  DECF   xD3,F
04B72:  ADDWF  xD4,F
04B74:  BTFSC  FD8.0
04B76:  BRA    4B7E
04B78:  MOVLB  0
04B7A:  GOTO   4B6E
04B7E:  MOVLB  0
04B80:  MOVLB  3
04B82:  DECF   xD2,F
04B84:  ADDWF  xD3,F
04B86:  BTFSC  FD8.0
04B88:  BRA    4B90
04B8A:  MOVLB  0
04B8C:  GOTO   4B80
04B90:  MOVLB  0
04B92:  MOVLB  3
04B94:  DECF   xD1,F
04B96:  ADDWF  xD2,F
04B98:  BTFSC  FD8.0
04B9A:  BRA    4BA2
04B9C:  MOVLB  0
04B9E:  GOTO   4B92
04BA2:  MOVLB  0
04BA4:  MOVLB  3
04BA6:  DECF   xD0,F
04BA8:  ADDWF  xD1,F
04BAA:  BTFSC  FD8.0
04BAC:  BRA    4BB4
04BAE:  MOVLB  0
04BB0:  GOTO   4BA4
04BB4:  MOVLW  03
04BB6:  MOVWF  FEA
04BB8:  MOVLW  D0
04BBA:  MOVWF  FE9
04BBC:  MOVLW  07
04BBE:  ANDWF  xD5,W
04BC0:  BCF    xD5.6
04BC2:  MOVLB  0
04BC4:  ADDWF  FE9,F
04BC6:  MOVLW  00
04BC8:  ADDWFC FEA,F
04BCA:  MOVF   FE9,W
04BCC:  SUBLW  D4
04BCE:  BTFSS  FD8.2
04BD0:  GOTO   4BE4
04BD4:  MOVF   FEA,W
04BD6:  SUBLW  03
04BD8:  BTFSS  FD8.2
04BDA:  GOTO   4BE4
04BDE:  MOVLB  3
04BE0:  BSF    xD5.6
04BE2:  MOVLB  0
04BE4:  MOVF   FEF,W
04BE6:  MOVWF  00
04BE8:  BTFSS  FD8.2
04BEA:  GOTO   4C16
04BEE:  MOVLB  3
04BF0:  BTFSS  xD5.6
04BF2:  BRA    4BFA
04BF4:  MOVLB  0
04BF6:  GOTO   4C16
04BFA:  BTFSS  xD5.4
04BFC:  BRA    4C04
04BFE:  MOVLB  0
04C00:  GOTO   4C3A
04C04:  BTFSS  xD5.3
04C06:  BRA    4C0E
04C08:  MOVLB  0
04C0A:  GOTO   4C16
04C0E:  MOVLW  20
04C10:  MOVLB  0
04C12:  GOTO   4C20
04C16:  MOVLB  3
04C18:  BSF    xD5.3
04C1A:  BCF    xD5.4
04C1C:  MOVLW  30
04C1E:  MOVLB  0
04C20:  ADDWF  00,F
04C22:  MOVFF  FEA,3CF
04C26:  MOVFF  FE9,3CE
04C2A:  MOVFF  00,868
04C2E:  CALL   1CC6
04C32:  MOVFF  3CF,FEA
04C36:  MOVFF  3CE,FE9
04C3A:  MOVF   FEE,W
04C3C:  MOVLB  3
04C3E:  BTFSC  xD5.6
04C40:  BRA    4C48
04C42:  MOVLB  0
04C44:  GOTO   4BCA
04C48:  MOVLB  0
04C4A:  RETURN 0
*
076E6:  MOVLW  20
076E8:  MOVLB  4
076EA:  BTFSS  xCF.4
076EC:  MOVLW  30
076EE:  MOVWF  xD0
076F0:  MOVFF  4CE,00
076F4:  BTFSC  00.7
076F6:  BRA    76FE
076F8:  MOVLB  0
076FA:  GOTO   7710
076FE:  COMF   00,F
07700:  INCF   00,F
07702:  MOVFF  00,4CE
07706:  MOVLW  2D
07708:  MOVWF  xD0
0770A:  BSF    xCF.7
0770C:  BSF    xCF.0
0770E:  MOVLB  0
07710:  MOVF   01,W
07712:  MOVFF  4CE,827
07716:  MOVLW  64
07718:  MOVLB  8
0771A:  MOVWF  x28
0771C:  MOVLB  0
0771E:  CALL   489C
07722:  MOVFF  00,4CE
07726:  MOVLW  30
07728:  ADDWF  01,W
0772A:  MOVLB  4
0772C:  MOVWF  xD1
0772E:  MOVFF  4CE,827
07732:  MOVLW  0A
07734:  MOVLB  8
07736:  MOVWF  x28
07738:  MOVLB  0
0773A:  CALL   489C
0773E:  MOVLW  30
07740:  ADDWF  00,W
07742:  MOVLB  4
07744:  MOVWF  xD3
07746:  MOVLW  30
07748:  ADDWF  01,W
0774A:  MOVWF  xD2
0774C:  MOVFF  4D0,00
07750:  MOVLB  0
07752:  MOVLW  30
07754:  MOVLB  4
07756:  SUBWF  xD1,W
07758:  BTFSS  FD8.2
0775A:  BRA    7762
0775C:  MOVLB  0
0775E:  GOTO   776E
07762:  BSF    xCF.1
07764:  BTFSC  xCF.7
07766:  BSF    xCF.2
07768:  MOVLB  0
0776A:  GOTO   77AE
0776E:  MOVFF  4D0,4D1
07772:  MOVLW  20
07774:  MOVLB  4
07776:  MOVWF  xD0
07778:  MOVLW  30
0777A:  SUBWF  xD2,W
0777C:  BTFSS  FD8.2
0777E:  BRA    7786
07780:  MOVLB  0
07782:  GOTO   7792
07786:  BSF    xCF.0
07788:  BTFSC  xCF.7
0778A:  BSF    xCF.1
0778C:  MOVLB  0
0778E:  GOTO   77AE
07792:  BTFSC  FD8.2
07794:  BRA    779C
07796:  MOVLB  4
07798:  BSF    xCF.0
0779A:  MOVLB  0
0779C:  BTFSS  FD8.2
0779E:  GOTO   77AE
077A2:  MOVFF  4D1,4D2
077A6:  MOVLW  20
077A8:  MOVLB  4
077AA:  MOVWF  xD1
077AC:  MOVLB  0
077AE:  MOVLB  4
077B0:  BTFSS  xCF.2
077B2:  BRA    77BA
077B4:  MOVLB  0
077B6:  GOTO   77D4
077BA:  BTFSS  xCF.1
077BC:  BRA    77C4
077BE:  MOVLB  0
077C0:  GOTO   77DC
077C4:  BTFSS  xCF.0
077C6:  BRA    77CE
077C8:  MOVLB  0
077CA:  GOTO   77E4
077CE:  MOVLB  0
077D0:  GOTO   77EC
077D4:  MOVFF  4D0,868
077D8:  CALL   1CC6
077DC:  MOVFF  4D1,868
077E0:  CALL   1CC6
077E4:  MOVFF  4D2,868
077E8:  CALL   1CC6
077EC:  MOVFF  4D3,868
077F0:  CALL   1CC6
077F4:  RETURN 0
*
07EE0:  BTFSC  FD8.1
07EE2:  GOTO   7EEE
07EE6:  MOVLW  04
07EE8:  MOVWF  FEA
07EEA:  MOVLW  5F
07EEC:  MOVWF  FE9
07EEE:  CLRF   00
07EF0:  CLRF   01
07EF2:  CLRF   02
07EF4:  CLRF   03
07EF6:  MOVLB  4
07EF8:  CLRF   x5F
07EFA:  CLRF   x60
07EFC:  CLRF   x61
07EFE:  CLRF   x62
07F00:  MOVF   x5E,W
07F02:  IORWF  x5D,W
07F04:  IORWF  x5C,W
07F06:  IORWF  x5B,W
07F08:  BTFSS  FD8.2
07F0A:  BRA    7F12
07F0C:  MOVLB  0
07F0E:  GOTO   7FA2
07F12:  MOVLB  0
07F14:  MOVLW  20
07F16:  MOVLB  4
07F18:  MOVWF  x63
07F1A:  MOVLB  0
07F1C:  BCF    FD8.0
07F1E:  MOVLB  4
07F20:  RLCF   x57,F
07F22:  RLCF   x58,F
07F24:  RLCF   x59,F
07F26:  RLCF   x5A,F
07F28:  RLCF   x5F,F
07F2A:  RLCF   x60,F
07F2C:  RLCF   x61,F
07F2E:  RLCF   x62,F
07F30:  MOVF   x5E,W
07F32:  SUBWF  x62,W
07F34:  BTFSC  FD8.2
07F36:  BRA    7F3E
07F38:  MOVLB  0
07F3A:  GOTO   7F60
07F3E:  MOVF   x5D,W
07F40:  SUBWF  x61,W
07F42:  BTFSC  FD8.2
07F44:  BRA    7F4C
07F46:  MOVLB  0
07F48:  GOTO   7F60
07F4C:  MOVF   x5C,W
07F4E:  SUBWF  x60,W
07F50:  BTFSC  FD8.2
07F52:  BRA    7F5A
07F54:  MOVLB  0
07F56:  GOTO   7F60
07F5A:  MOVF   x5B,W
07F5C:  SUBWF  x5F,W
07F5E:  MOVLB  0
07F60:  BTFSS  FD8.0
07F62:  GOTO   7F88
07F66:  MOVLB  4
07F68:  MOVF   x5B,W
07F6A:  SUBWF  x5F,F
07F6C:  MOVF   x5C,W
07F6E:  BTFSS  FD8.0
07F70:  INCFSZ x5C,W
07F72:  SUBWF  x60,F
07F74:  MOVF   x5D,W
07F76:  BTFSS  FD8.0
07F78:  INCFSZ x5D,W
07F7A:  SUBWF  x61,F
07F7C:  MOVF   x5E,W
07F7E:  BTFSS  FD8.0
07F80:  INCFSZ x5E,W
07F82:  SUBWF  x62,F
07F84:  BSF    FD8.0
07F86:  MOVLB  0
07F88:  RLCF   00,F
07F8A:  RLCF   01,F
07F8C:  RLCF   02,F
07F8E:  RLCF   03,F
07F90:  MOVLB  4
07F92:  DECFSZ x63,F
07F94:  BRA    7F9A
07F96:  BRA    7FA0
07F98:  MOVLB  0
07F9A:  MOVLB  0
07F9C:  GOTO   7F1C
07FA0:  MOVLB  0
07FA2:  MOVFF  45F,FEF
07FA6:  MOVFF  460,FEC
07FAA:  MOVFF  461,FEC
07FAE:  MOVFF  462,FEC
07FB2:  MOVF   FED,F
07FB4:  MOVF   FED,F
07FB6:  MOVF   FED,F
07FB8:  RETURN 0
07FBA:  MOVF   FE9,W
07FBC:  MOVLB  4
07FBE:  MOVWF  x4F
07FC0:  MOVLW  3B
07FC2:  MOVWF  x56
07FC4:  MOVLW  9A
07FC6:  MOVWF  x55
07FC8:  MOVLW  CA
07FCA:  MOVWF  x54
07FCC:  CLRF   x53
07FCE:  MOVLW  0A
07FD0:  MOVWF  x51
07FD2:  MOVLB  0
07FD4:  BSF    FD8.1
07FD6:  MOVLW  04
07FD8:  MOVWF  FEA
07FDA:  MOVLW  4B
07FDC:  MOVWF  FE9
07FDE:  MOVFF  44E,45A
07FE2:  MOVFF  44D,459
07FE6:  MOVFF  44C,458
07FEA:  MOVFF  44B,457
07FEE:  MOVFF  456,45E
07FF2:  MOVFF  455,45D
07FF6:  MOVFF  454,45C
07FFA:  MOVFF  453,45B
07FFE:  CALL   7EE0
08002:  MOVF   01,W
08004:  MOVF   00,F
08006:  BTFSS  FD8.2
08008:  GOTO   8060
0800C:  MOVLB  4
0800E:  MOVF   x51,W
08010:  XORLW  01
08012:  BTFSS  FD8.2
08014:  BRA    801C
08016:  MOVLB  0
08018:  GOTO   8060
0801C:  MOVF   x4F,W
0801E:  BTFSS  FD8.2
08020:  BRA    8028
08022:  MOVLB  0
08024:  GOTO   8066
08028:  ANDLW  0F
0802A:  SUBWF  x51,W
0802C:  BTFSS  FD8.2
0802E:  BRA    8036
08030:  MOVLB  0
08032:  GOTO   8042
08036:  BTFSS  FD8.0
08038:  BRA    8040
0803A:  MOVLB  0
0803C:  GOTO   8072
08040:  MOVLB  0
08042:  MOVLB  4
08044:  BTFSS  x4F.7
08046:  BRA    804E
08048:  MOVLB  0
0804A:  GOTO   8072
0804E:  BTFSS  x4F.6
08050:  BRA    8058
08052:  MOVLB  0
08054:  GOTO   8066
08058:  MOVLW  20
0805A:  MOVLB  0
0805C:  GOTO   8068
08060:  MOVLB  4
08062:  CLRF   x4F
08064:  MOVLB  0
08066:  MOVLW  30
08068:  ADDWF  00,F
0806A:  MOVFF  00,868
0806E:  CALL   1CC6
08072:  BCF    FD8.1
08074:  MOVFF  456,45A
08078:  MOVFF  455,459
0807C:  MOVFF  454,458
08080:  MOVFF  453,457
08084:  MOVLB  4
08086:  CLRF   x5E
08088:  CLRF   x5D
0808A:  CLRF   x5C
0808C:  MOVLW  0A
0808E:  MOVWF  x5B
08090:  MOVLB  0
08092:  CALL   7EE0
08096:  MOVFF  03,456
0809A:  MOVFF  02,455
0809E:  MOVFF  01,454
080A2:  MOVFF  00,453
080A6:  MOVLB  4
080A8:  DECFSZ x51,F
080AA:  BRA    80B0
080AC:  BRA    80B6
080AE:  MOVLB  0
080B0:  MOVLB  0
080B2:  GOTO   7FD4
080B6:  MOVLB  0
080B8:  RETURN 0
*
082EC:  MOVF   FE9,W
082EE:  MOVLB  4
082F0:  MOVWF  x4F
082F2:  BTFSC  x4E.7
082F4:  BRA    82FC
082F6:  MOVLB  0
082F8:  GOTO   8318
082FC:  DECF   x4F,F
082FE:  BSF    x4F.5
08300:  COMF   x4B,F
08302:  COMF   x4C,F
08304:  COMF   x4D,F
08306:  COMF   x4E,F
08308:  INCF   x4B,F
0830A:  BTFSC  FD8.2
0830C:  INCF   x4C,F
0830E:  BTFSC  FD8.2
08310:  INCF   x4D,F
08312:  BTFSC  FD8.2
08314:  INCF   x4E,F
08316:  MOVLB  0
08318:  MOVLW  3B
0831A:  MOVLB  4
0831C:  MOVWF  x56
0831E:  MOVLW  9A
08320:  MOVWF  x55
08322:  MOVLW  CA
08324:  MOVWF  x54
08326:  CLRF   x53
08328:  MOVLW  0A
0832A:  MOVWF  x51
0832C:  MOVLB  0
0832E:  BSF    FD8.1
08330:  MOVLW  04
08332:  MOVWF  FEA
08334:  MOVLW  4B
08336:  MOVWF  FE9
08338:  MOVFF  44E,45A
0833C:  MOVFF  44D,459
08340:  MOVFF  44C,458
08344:  MOVFF  44B,457
08348:  MOVFF  456,45E
0834C:  MOVFF  455,45D
08350:  MOVFF  454,45C
08354:  MOVFF  453,45B
08358:  CALL   7EE0
0835C:  MOVF   01,W
0835E:  MOVF   00,F
08360:  BTFSS  FD8.2
08362:  GOTO   83BA
08366:  MOVLB  4
08368:  MOVF   x51,W
0836A:  XORLW  01
0836C:  BTFSS  FD8.2
0836E:  BRA    8376
08370:  MOVLB  0
08372:  GOTO   83BA
08376:  MOVF   x4F,W
08378:  BTFSS  FD8.2
0837A:  BRA    8382
0837C:  MOVLB  0
0837E:  GOTO   83C2
08382:  ANDLW  0F
08384:  SUBWF  x51,W
08386:  BTFSS  FD8.2
08388:  BRA    8390
0838A:  MOVLB  0
0838C:  GOTO   839C
08390:  BTFSS  FD8.0
08392:  BRA    839A
08394:  MOVLB  0
08396:  GOTO   8420
0839A:  MOVLB  0
0839C:  MOVLB  4
0839E:  BTFSS  x4F.7
083A0:  BRA    83A8
083A2:  MOVLB  0
083A4:  GOTO   8420
083A8:  BTFSS  x4F.6
083AA:  BRA    83B2
083AC:  MOVLB  0
083AE:  GOTO   83C2
083B2:  MOVLW  20
083B4:  MOVLB  0
083B6:  GOTO   8416
083BA:  MOVLW  20
083BC:  MOVLB  4
083BE:  ANDWF  x4F,F
083C0:  MOVLB  0
083C2:  MOVLB  4
083C4:  BTFSC  x4F.5
083C6:  BRA    83CE
083C8:  MOVLB  0
083CA:  GOTO   83EA
083CE:  BCF    x4F.5
083D0:  MOVF   00,W
083D2:  MOVWF  x4F
083D4:  MOVLW  2D
083D6:  MOVLB  8
083D8:  MOVWF  x68
083DA:  MOVLB  0
083DC:  CALL   1CC6
083E0:  MOVLB  4
083E2:  MOVF   x4F,W
083E4:  MOVWF  00
083E6:  CLRF   x4F
083E8:  MOVLB  0
083EA:  MOVLW  30
083EC:  MOVLB  4
083EE:  BTFSC  x4F.5
083F0:  BRA    83F8
083F2:  MOVLB  0
083F4:  GOTO   8416
083F8:  BCF    x4F.5
083FA:  MOVF   00,W
083FC:  MOVWF  x4F
083FE:  MOVLW  2D
08400:  MOVLB  8
08402:  MOVWF  x68
08404:  MOVLB  0
08406:  CALL   1CC6
0840A:  MOVLB  4
0840C:  MOVF   x4F,W
0840E:  MOVWF  00
08410:  CLRF   x4F
08412:  MOVLW  30
08414:  MOVLB  0
08416:  ADDWF  00,F
08418:  MOVFF  00,868
0841C:  CALL   1CC6
08420:  BCF    FD8.1
08422:  MOVFF  456,45A
08426:  MOVFF  455,459
0842A:  MOVFF  454,458
0842E:  MOVFF  453,457
08432:  MOVLB  4
08434:  CLRF   x5E
08436:  CLRF   x5D
08438:  CLRF   x5C
0843A:  MOVLW  0A
0843C:  MOVWF  x5B
0843E:  MOVLB  0
08440:  CALL   7EE0
08444:  MOVFF  03,456
08448:  MOVFF  02,455
0844C:  MOVFF  01,454
08450:  MOVFF  00,453
08454:  MOVLB  4
08456:  DECFSZ x51,F
08458:  BRA    845E
0845A:  BRA    8464
0845C:  MOVLB  0
0845E:  MOVLB  0
08460:  GOTO   832E
08464:  MOVLB  0
08466:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01C98:  MOVLW  08
01C9A:  MOVWF  FEA
01C9C:  MOVLW  7D
01C9E:  MOVWF  FE9
01CA0:  MOVF   FEF,W
01CA2:  BTFSC  FD8.2
01CA4:  GOTO   1CC4
01CA8:  MOVLW  05
01CAA:  MOVWF  01
01CAC:  CLRF   00
01CAE:  DECFSZ 00,F
01CB0:  BRA    1CAE
01CB2:  DECFSZ 01,F
01CB4:  BRA    1CAC
01CB6:  MOVLW  2E
01CB8:  MOVWF  00
01CBA:  DECFSZ 00,F
01CBC:  BRA    1CBA
01CBE:  BRA    1CC0
01CC0:  DECFSZ FEF,F
01CC2:  BRA    1CA8
01CC4:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
044F4:  BTFSS  FA6.4
044F6:  GOTO   44F4
044FA:  MOVLB  F
044FC:  MOVWF  x29
044FE:  MOVLB  0
04500:  GOTO   4536 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01CC6:  BCF    F93.6
01CC8:  BCF    F8A.6
01CCA:  MOVLW  08
01CCC:  MOVWF  01
01CCE:  BRA    1CD0
01CD0:  NOP   
01CD2:  BSF    01.7
01CD4:  GOTO   1CFC
01CD8:  BCF    01.7
01CDA:  MOVLB  8
01CDC:  RRCF   x68,F
01CDE:  MOVLB  0
01CE0:  BTFSC  FD8.0
01CE2:  BSF    F8A.6
01CE4:  BTFSS  FD8.0
01CE6:  BCF    F8A.6
01CE8:  BSF    01.6
01CEA:  GOTO   1CFC
01CEE:  BCF    01.6
01CF0:  DECFSZ 01,F
01CF2:  GOTO   1CDA
01CF6:  BRA    1CF8
01CF8:  NOP   
01CFA:  BSF    F8A.6
01CFC:  MOVLW  84
01CFE:  MOVWF  FE9
01D00:  DECFSZ FE9,F
01D02:  GOTO   1D00
01D06:  BRA    1D08
01D08:  NOP   
01D0A:  BTFSC  01.7
01D0C:  GOTO   1CD8
01D10:  BTFSC  01.6
01D12:  GOTO   1CEE
01D16:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02142:  MOVF   FC9,W
02144:  MOVFF  89F,FC9
02148:  RRCF   FC7,W
0214A:  BTFSS  FD8.0
0214C:  GOTO   2148
02150:  MOVFF  FC9,00
02154:  RETURN 0
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
020C6:  MOVLB  8
020C8:  MOVF   xA0,W
020CA:  SUBLW  08
020CC:  BTFSS  FD8.2
020CE:  BRA    20D6
020D0:  MOVLB  0
020D2:  GOTO   20EE
020D6:  MOVWF  xA2
020D8:  MOVLB  0
020DA:  MOVLB  8
020DC:  RLCF   x9F,F
020DE:  DECFSZ xA2,F
020E0:  BRA    20E6
020E2:  BRA    20EC
020E4:  MOVLB  0
020E6:  MOVLB  0
020E8:  GOTO   20DA
020EC:  MOVLB  0
020EE:  BSF    F96.0
020F0:  BCF    F96.6
020F2:  BCF    F96.1
020F4:  BCF    F8D.1
020F6:  MOVFF  8A0,8A2
020FA:  MOVLB  8
020FC:  BTFSS  x9F.7
020FE:  BCF    F8D.6
02100:  BTFSC  x9F.7
02102:  BSF    F8D.6
02104:  RLCF   x9F,F
02106:  BSF    F8D.1
02108:  MOVLW  02
0210A:  MOVWF  xA3
0210C:  MOVLB  0
0210E:  MOVLB  8
02110:  DECFSZ xA3,F
02112:  BRA    2118
02114:  BRA    211E
02116:  MOVLB  0
02118:  MOVLB  0
0211A:  GOTO   210E
0211E:  RLCF   01,F
02120:  BTFSS  F84.0
02122:  BCF    01.0
02124:  BTFSC  F84.0
02126:  BSF    01.0
02128:  BCF    F8D.1
0212A:  MOVLB  0
0212C:  BRA    212E
0212E:  MOVLB  8
02130:  DECFSZ xA2,F
02132:  BRA    2138
02134:  BRA    213E
02136:  MOVLB  0
02138:  MOVLB  0
0213A:  GOTO   20FA
0213E:  MOVLB  0
02140:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01E18:  MOVLB  8
01E1A:  MOVF   x30,W
01E1C:  SUBLW  10
01E1E:  BTFSS  FD8.2
01E20:  BRA    1E28
01E22:  MOVLB  0
01E24:  GOTO   1E42
01E28:  MOVWF  x32
01E2A:  MOVLB  0
01E2C:  MOVLB  8
01E2E:  RLCF   x2E,F
01E30:  RLCF   x2F,F
01E32:  DECFSZ x32,F
01E34:  BRA    1E3A
01E36:  BRA    1E40
01E38:  MOVLB  0
01E3A:  MOVLB  0
01E3C:  GOTO   1E2C
01E40:  MOVLB  0
01E42:  BSF    F93.4
01E44:  BCF    F93.5
01E46:  BCF    F93.2
01E48:  BCF    F8A.2
01E4A:  MOVFF  830,832
01E4E:  MOVLB  8
01E50:  BTFSS  x2F.7
01E52:  BCF    F8A.5
01E54:  BTFSC  x2F.7
01E56:  BSF    F8A.5
01E58:  RLCF   x2E,F
01E5A:  RLCF   x2F,F
01E5C:  BSF    F8A.2
01E5E:  RLCF   01,F
01E60:  RLCF   02,F
01E62:  BTFSS  F81.4
01E64:  BCF    01.0
01E66:  BTFSC  F81.4
01E68:  BSF    01.0
01E6A:  BCF    F8A.2
01E6C:  DECFSZ x32,F
01E6E:  BRA    1E74
01E70:  BRA    1E7A
01E72:  MOVLB  0
01E74:  MOVLB  0
01E76:  GOTO   1E4E
01E7A:  MOVLB  0
01E7C:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 *uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
03146:  MOVFF  20,00
0314A:  MOVFF  21,01
0314E:  MOVFF  22,02
03152:  MOVFF  23,03
03156:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,8A8
00160:  MOVFF  FE9,8A7
00164:  GOTO   010A
00168:  MOVFF  8A8,FEA
0016C:  MOVFF  8A7,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01D7E:  MOVLW  7A
01D80:  MOVWF  FF6
01D82:  MOVLW  01
01D84:  MOVWF  FF7
01D86:  MOVLW  00
01D88:  MOVWF  FF8
01D8A:  CALL   1D18
....................    enable_interrupts(INT_RDA3);
01D8E:  BSF    F61.5
....................    enable_interrupts(global);
01D90:  MOVLW  C0
01D92:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01D94:  MOVLW  8C
01D96:  MOVWF  FF6
01D98:  MOVLW  01
01D9A:  MOVWF  FF7
01D9C:  MOVLW  00
01D9E:  MOVWF  FF8
01DA0:  CALL   1D18
01DA4:  GOTO   A4DE (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
044B6:  MOVFF  3BD,03
044BA:  MOVLB  3
044BC:  MOVF   xBC,W
044BE:  MOVWF  FE9
044C0:  MOVFF  03,FEA
044C4:  MOVFF  FEF,3BE
044C8:  MOVFF  3BB,FEA
044CC:  MOVFF  3BA,FE9
044D0:  CLRF   00
044D2:  CLRF   02
044D4:  MOVFF  3BE,01
044D8:  MOVLB  0
044DA:  CALL   4492
....................    *receive_signal_size = 0;
044DE:  MOVFF  3BD,03
044E2:  MOVLB  3
044E4:  MOVF   xBC,W
044E6:  MOVWF  FE9
044E8:  MOVFF  03,FEA
044EC:  CLRF   FEF
044EE:  MOVLB  0
044F0:  GOTO   A578 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01F7A:  MOVLW  98
01F7C:  MOVWF  FF6
01F7E:  MOVLW  01
01F80:  MOVWF  FF7
01F82:  MOVLW  00
01F84:  MOVWF  FF8
01F86:  CALL   1D18
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
01F8A:  BCF    F93.1
01F8C:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
01F8E:  MOVLW  0A
01F90:  MOVLB  8
01F92:  MOVWF  x7D
01F94:  MOVLB  0
01F96:  CALL   1C98
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
01F9A:  MOVLW  0D
01F9C:  MOVLB  8
01F9E:  MOVWF  x27
01FA0:  MOVLB  0
01FA2:  CALL   1E7E
01FA6:  MOVFF  02,3BB
01FAA:  MOVFF  01,3BA
....................     fprintf(PC, "\t%04LX\r\n", readdata);
01FAE:  MOVLW  09
01FB0:  MOVLB  8
01FB2:  MOVWF  x68
01FB4:  MOVLB  0
01FB6:  CALL   1CC6
01FBA:  MOVFF  3BB,4C7
01FBE:  MOVLW  37
01FC0:  MOVLB  4
01FC2:  MOVWF  xC8
01FC4:  MOVLB  0
01FC6:  CALL   1F0A
01FCA:  MOVFF  3BA,4C7
01FCE:  MOVLW  37
01FD0:  MOVLB  4
01FD2:  MOVWF  xC8
01FD4:  MOVLB  0
01FD6:  CALL   1F0A
01FDA:  MOVLW  0D
01FDC:  MOVLB  8
01FDE:  MOVWF  x68
01FE0:  MOVLB  0
01FE2:  CALL   1CC6
01FE6:  MOVLW  0A
01FE8:  MOVLB  8
01FEA:  MOVWF  x68
01FEC:  MOVLB  0
01FEE:  CALL   1CC6
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
01FF2:  MOVLB  3
01FF4:  INCFSZ xBA,W
01FF6:  BRA    1FFC
01FF8:  BRA    2002
01FFA:  MOVLB  0
01FFC:  MOVLB  0
01FFE:  GOTO   201A
02002:  MOVLB  0
02004:  MOVLB  3
02006:  INCFSZ xBB,W
02008:  BRA    200E
0200A:  BRA    2014
0200C:  MOVLB  0
0200E:  MOVLB  0
02010:  GOTO   201A
02014:  MOVLB  0
02016:  GOTO   203A
0201A:  MOVLB  3
0201C:  MOVF   xBA,F
0201E:  BTFSC  FD8.2
02020:  BRA    2028
02022:  MOVLB  0
02024:  GOTO   204E
02028:  MOVLB  0
0202A:  MOVLB  3
0202C:  MOVF   xBB,F
0202E:  BTFSC  FD8.2
02030:  BRA    2038
02032:  MOVLB  0
02034:  GOTO   204E
02038:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0203A:  MOVLW  AC
0203C:  MOVWF  FF6
0203E:  MOVLW  01
02040:  MOVWF  FF7
02042:  MOVLW  00
02044:  MOVWF  FF8
02046:  CALL   1D18
....................     } else {
0204A:  GOTO   205E
....................         fprintf(PC, "\tConnect successful\r\n");
0204E:  MOVLW  BE
02050:  MOVWF  FF6
02052:  MOVLW  01
02054:  MOVWF  FF7
02056:  MOVLW  00
02058:  MOVWF  FF8
0205A:  CALL   1D18
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0205E:  MOVLW  D4
02060:  MOVWF  FF6
02062:  MOVLW  01
02064:  MOVWF  FF7
02066:  MOVLW  00
02068:  MOVWF  FF8
0206A:  CALL   1D18
0206E:  GOTO   A4E2 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
01E7E:  MOVFF  827,82E
01E82:  GOTO   1DA8
01E86:  MOVFF  02,829
01E8A:  MOVFF  01,828
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
01E8E:  BCF    F93.1
01E90:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01E92:  MOVLW  0D
01E94:  MOVWF  00
01E96:  DECFSZ 00,F
01E98:  BRA    1E96
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
01E9A:  MOVFF  829,82F
01E9E:  MOVFF  828,82E
01EA2:  MOVLW  10
01EA4:  MOVLB  8
01EA6:  MOVWF  x30
01EA8:  MOVLW  01
01EAA:  MOVWF  x31
01EAC:  MOVLB  0
01EAE:  CALL   1E18
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
01EB2:  MOVLW  0D
01EB4:  MOVWF  00
01EB6:  DECFSZ 00,F
01EB8:  BRA    1EB6
....................     output_high(ADC_CS); // Set CS pin high to end communication
01EBA:  BCF    F93.1
01EBC:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
01EBE:  MOVLW  0D
01EC0:  MOVWF  00
01EC2:  DECFSZ 00,F
01EC4:  BRA    1EC2
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01EC6:  BCF    F93.1
01EC8:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01ECA:  MOVLW  0D
01ECC:  MOVWF  00
01ECE:  DECFSZ 00,F
01ED0:  BRA    1ECE
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
01ED2:  MOVLB  8
01ED4:  CLRF   x2F
01ED6:  CLRF   x2E
01ED8:  MOVLW  10
01EDA:  MOVWF  x30
01EDC:  MOVLW  01
01EDE:  MOVWF  x31
01EE0:  MOVLB  0
01EE2:  CALL   1E18
01EE6:  MOVFF  02,82B
01EEA:  MOVFF  01,82A
....................     output_high(ADC_CS); 
01EEE:  BCF    F93.1
01EF0:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01EF2:  MOVLB  8
01EF4:  MOVF   x2A,W
01EF6:  MOVWF  x2C
01EF8:  MOVF   x2B,W
01EFA:  ANDLW  0F
01EFC:  MOVWF  x2D
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01EFE:  MOVF   x2C,W
01F00:  MOVWF  01
01F02:  MOVF   x2D,W
01F04:  MOVWF  02
01F06:  MOVLB  0
01F08:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); 
....................     output_high(DAC2_CS); 
....................     delay_ms(10); 
....................     mcp4901_1_write(0); 
....................     mcp4901_2_write(0); 
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); 
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); 
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
04AE4:  MOVFF  826,82A
04AE8:  MOVFF  825,829
04AEC:  GOTO   498E
04AF0:  MOVFF  02,828
04AF4:  MOVFF  01,827
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); 
04AF8:  BCF    F93.3
04AFA:  BCF    F8A.3
....................    delay_us(10); 
04AFC:  MOVLW  0D
04AFE:  MOVWF  00
04B00:  DECFSZ 00,F
04B02:  BRA    4B00
....................    spi_xfer(ADCDAC_STREAM, cmd); 
04B04:  MOVFF  828,82F
04B08:  MOVFF  827,82E
04B0C:  MOVLW  10
04B0E:  MOVLB  8
04B10:  MOVWF  x30
04B12:  MOVLW  01
04B14:  MOVWF  x31
04B16:  MOVLB  0
04B18:  CALL   1E18
....................    output_high(DAC1_CS); 
04B1C:  BCF    F93.3
04B1E:  BSF    F8A.3
04B20:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
....................    delay_us(10); 
....................    spi_xfer(ADCDAC_STREAM, cmd); 
....................    output_high(DAC2_CS); 
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01DA8:  MOVLB  8
01DAA:  BCF    x2F.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01DAC:  BCF    x2F.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01DAE:  BCF    x2F.2
....................     cmd.fields.reserved3 = 0;
01DB0:  BCF    x2F.3
....................     cmd.fields.coding = 1; // Two's complement
01DB2:  BSF    x2F.4
....................     cmd.fields.range = 1; // Normal mode
01DB4:  BSF    x2F.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01DB6:  BCF    x2F.6
....................     cmd.fields.shadow = 0; // Direct access
01DB8:  BCF    x2F.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01DBA:  BSF    x30.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01DBC:  BSF    x30.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01DBE:  MOVF   x2E,W
01DC0:  ANDLW  01
01DC2:  MOVWF  01
01DC4:  BCF    x30.2
01DC6:  BTFSC  01.0
01DC8:  BSF    x30.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01DCA:  BCF    FD8.0
01DCC:  RRCF   x2E,W
01DCE:  ANDLW  01
01DD0:  MOVWF  01
01DD2:  BCF    x30.3
01DD4:  BTFSC  01.0
01DD6:  BSF    x30.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01DD8:  RRCF   x2E,W
01DDA:  MOVWF  00
01DDC:  RRCF   00,F
01DDE:  MOVLW  3F
01DE0:  ANDWF  00,F
01DE2:  MOVF   00,W
01DE4:  ANDLW  01
01DE6:  MOVWF  01
01DE8:  BCF    x30.4
01DEA:  BTFSC  01.0
01DEC:  BSF    x30.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01DEE:  RRCF   x2E,W
01DF0:  MOVWF  00
01DF2:  RRCF   00,F
01DF4:  RRCF   00,F
01DF6:  MOVLW  1F
01DF8:  ANDWF  00,F
01DFA:  MOVF   00,W
01DFC:  ANDLW  01
01DFE:  MOVWF  01
01E00:  BCF    x30.5
01E02:  BTFSC  01.0
01E04:  BSF    x30.5
....................     cmd.fields.seq = 0; // Random mode
01E06:  BCF    x30.6
....................     cmd.fields.write = 1; // Read operation
01E08:  BSF    x30.7
.................... 
.................... 
....................     return cmd.value;
01E0A:  MOVF   x2F,W
01E0C:  MOVWF  01
01E0E:  MOVF   x30,W
01E10:  MOVWF  02
01E12:  MOVLB  0
01E14:  GOTO   1E86 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
0498E:  MOVLB  8
04990:  BCF    x2C.7
....................    cmd.fields.buffer = 1; // Buffer used
04992:  BSF    x2C.6
....................    cmd.fields.gain = 1; // Gain 1x
04994:  BSF    x2C.5
....................    cmd.fields.shutdown = 1; // Normal operation
04996:  BSF    x2C.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
04998:  RRCF   x2A,W
0499A:  MOVWF  x2E
0499C:  RRCF   x29,W
0499E:  MOVWF  x2D
049A0:  RRCF   x2E,F
049A2:  RRCF   x2D,F
049A4:  RRCF   x2E,F
049A6:  RRCF   x2D,F
049A8:  RRCF   x2E,F
049AA:  RRCF   x2D,F
049AC:  RRCF   x2E,F
049AE:  RRCF   x2D,F
049B0:  RRCF   x2E,F
049B2:  RRCF   x2D,F
049B4:  RRCF   x2E,F
049B6:  RRCF   x2D,F
049B8:  MOVLW  01
049BA:  ANDWF  x2E,F
049BC:  MOVF   x2D,W
049BE:  ANDLW  01
049C0:  MOVWF  00
049C2:  CLRF   03
049C4:  MOVF   00,W
049C6:  MOVWF  01
049C8:  BCF    x2C.3
049CA:  BTFSC  01.0
049CC:  BSF    x2C.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
049CE:  RRCF   x2A,W
049D0:  MOVWF  x2E
049D2:  RRCF   x29,W
049D4:  MOVWF  x2D
049D6:  RRCF   x2E,F
049D8:  RRCF   x2D,F
049DA:  RRCF   x2E,F
049DC:  RRCF   x2D,F
049DE:  RRCF   x2E,F
049E0:  RRCF   x2D,F
049E2:  RRCF   x2E,F
049E4:  RRCF   x2D,F
049E6:  RRCF   x2E,F
049E8:  RRCF   x2D,F
049EA:  MOVLW  03
049EC:  ANDWF  x2E,F
049EE:  MOVF   x2D,W
049F0:  ANDLW  01
049F2:  MOVWF  00
049F4:  CLRF   03
049F6:  MOVF   00,W
049F8:  MOVWF  01
049FA:  BCF    x2C.2
049FC:  BTFSC  01.0
049FE:  BSF    x2C.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
04A00:  RRCF   x2A,W
04A02:  MOVWF  x2E
04A04:  RRCF   x29,W
04A06:  MOVWF  x2D
04A08:  RRCF   x2E,F
04A0A:  RRCF   x2D,F
04A0C:  RRCF   x2E,F
04A0E:  RRCF   x2D,F
04A10:  RRCF   x2E,F
04A12:  RRCF   x2D,F
04A14:  RRCF   x2E,F
04A16:  RRCF   x2D,F
04A18:  MOVLW  07
04A1A:  ANDWF  x2E,F
04A1C:  MOVF   x2D,W
04A1E:  ANDLW  01
04A20:  MOVWF  00
04A22:  CLRF   03
04A24:  MOVF   00,W
04A26:  MOVWF  01
04A28:  BCF    x2C.1
04A2A:  BTFSC  01.0
04A2C:  BSF    x2C.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
04A2E:  RRCF   x2A,W
04A30:  MOVWF  x2E
04A32:  RRCF   x29,W
04A34:  MOVWF  x2D
04A36:  RRCF   x2E,F
04A38:  RRCF   x2D,F
04A3A:  RRCF   x2E,F
04A3C:  RRCF   x2D,F
04A3E:  RRCF   x2E,F
04A40:  RRCF   x2D,F
04A42:  MOVLW  0F
04A44:  ANDWF  x2E,F
04A46:  MOVF   x2D,W
04A48:  ANDLW  01
04A4A:  MOVWF  00
04A4C:  CLRF   03
04A4E:  MOVF   00,W
04A50:  MOVWF  01
04A52:  BCF    x2C.0
04A54:  BTFSC  01.0
04A56:  BSF    x2C.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
04A58:  RRCF   x2A,W
04A5A:  MOVWF  x2E
04A5C:  RRCF   x29,W
04A5E:  MOVWF  x2D
04A60:  RRCF   x2E,F
04A62:  RRCF   x2D,F
04A64:  RRCF   x2E,F
04A66:  RRCF   x2D,F
04A68:  MOVLW  1F
04A6A:  ANDWF  x2E,F
04A6C:  MOVF   x2D,W
04A6E:  ANDLW  01
04A70:  MOVWF  00
04A72:  CLRF   03
04A74:  MOVF   00,W
04A76:  MOVWF  01
04A78:  BCF    x2B.7
04A7A:  BTFSC  01.0
04A7C:  BSF    x2B.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
04A7E:  RRCF   x2A,W
04A80:  MOVWF  x2E
04A82:  RRCF   x29,W
04A84:  MOVWF  x2D
04A86:  RRCF   x2E,F
04A88:  RRCF   x2D,F
04A8A:  MOVLW  3F
04A8C:  ANDWF  x2E,F
04A8E:  MOVF   x2D,W
04A90:  ANDLW  01
04A92:  MOVWF  00
04A94:  CLRF   03
04A96:  MOVF   00,W
04A98:  MOVWF  01
04A9A:  BCF    x2B.6
04A9C:  BTFSC  01.0
04A9E:  BSF    x2B.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
04AA0:  BCF    FD8.0
04AA2:  RRCF   x2A,W
04AA4:  MOVWF  x2E
04AA6:  RRCF   x29,W
04AA8:  MOVWF  x2D
04AAA:  MOVF   x2D,W
04AAC:  ANDLW  01
04AAE:  MOVWF  00
04AB0:  CLRF   03
04AB2:  MOVF   00,W
04AB4:  MOVWF  01
04AB6:  BCF    x2B.5
04AB8:  BTFSC  01.0
04ABA:  BSF    x2B.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
04ABC:  MOVF   x29,W
04ABE:  ANDLW  01
04AC0:  MOVWF  00
04AC2:  CLRF   03
04AC4:  MOVF   00,W
04AC6:  MOVWF  01
04AC8:  BCF    x2B.4
04ACA:  BTFSC  01.0
04ACC:  BSF    x2B.4
....................    cmd.fields.reserved = 0; // Reserved bits
04ACE:  BCF    x2B.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
04AD0:  BCF    x2B.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
04AD2:  BCF    x2B.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
04AD4:  BCF    x2B.0
.................... 
....................    return cmd.value;
04AD6:  MOVF   x2B,W
04AD8:  MOVWF  01
04ADA:  MOVF   x2C,W
04ADC:  MOVWF  02
04ADE:  MOVLB  0
04AE0:  GOTO   4AF0 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03158:  MOVLB  8
0315A:  MOVF   x7D,W
0315C:  XORLW  00
0315E:  MOVLB  0
03160:  BTFSC  FD8.2
03162:  GOTO   3172
03166:  XORLW  01
03168:  BTFSC  FD8.2
0316A:  GOTO   31DA
0316E:  GOTO   323A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03172:  MOVLB  8
03174:  CLRF   x86
03176:  CLRF   x85
03178:  MOVLB  0
0317A:  MOVLB  8
0317C:  MOVF   x86,W
0317E:  SUBWF  x84,W
03180:  BTFSC  FD8.0
03182:  BRA    318A
03184:  MOVLB  0
03186:  GOTO   31D6
0318A:  MOVLB  0
0318C:  BTFSS  FD8.2
0318E:  GOTO   31A4
03192:  MOVLB  8
03194:  MOVF   x83,W
03196:  SUBWF  x85,W
03198:  BTFSS  FD8.0
0319A:  BRA    31A2
0319C:  MOVLB  0
0319E:  GOTO   31D6
031A2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
031A4:  MOVLB  8
031A6:  MOVF   x81,W
031A8:  ADDWF  x85,W
031AA:  MOVWF  FE9
031AC:  MOVF   x82,W
031AE:  ADDWFC x86,W
031B0:  MOVWF  FEA
031B2:  MOVFF  FEF,889
031B6:  MOVFF  889,89F
031BA:  MOVLW  08
031BC:  MOVWF  xA0
031BE:  MOVLW  01
031C0:  MOVWF  xA1
031C2:  MOVLB  0
031C4:  CALL   20C6
031C8:  MOVLB  8
031CA:  INCF   x85,F
031CC:  BTFSC  FD8.2
031CE:  INCF   x86,F
031D0:  MOVLB  0
031D2:  GOTO   317A
....................          break;
031D6:  GOTO   323E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
031DA:  MOVLB  8
031DC:  CLRF   x88
031DE:  CLRF   x87
031E0:  MOVLB  0
031E2:  MOVLB  8
031E4:  MOVF   x88,W
031E6:  SUBWF  x84,W
031E8:  BTFSC  FD8.0
031EA:  BRA    31F2
031EC:  MOVLB  0
031EE:  GOTO   3236
031F2:  MOVLB  0
031F4:  BTFSS  FD8.2
031F6:  GOTO   320C
031FA:  MOVLB  8
031FC:  MOVF   x83,W
031FE:  SUBWF  x87,W
03200:  BTFSS  FD8.0
03202:  BRA    320A
03204:  MOVLB  0
03206:  GOTO   3236
0320A:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0320C:  MOVLB  8
0320E:  MOVF   x81,W
03210:  ADDWF  x87,W
03212:  MOVWF  FE9
03214:  MOVF   x82,W
03216:  ADDWFC x88,W
03218:  MOVWF  FEA
0321A:  MOVFF  FEF,889
0321E:  MOVFF  889,89F
03222:  MOVLB  0
03224:  CALL   2142
03228:  MOVLB  8
0322A:  INCF   x87,F
0322C:  BTFSC  FD8.2
0322E:  INCF   x88,F
03230:  MOVLB  0
03232:  GOTO   31E2
....................          break;
03236:  GOTO   323E
....................          
....................       default:
....................          break;
0323A:  GOTO   323E
....................    }
....................    return;
0323E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02156:  MOVLB  8
02158:  MOVF   x83,W
0215A:  XORLW  00
0215C:  MOVLB  0
0215E:  BTFSC  FD8.2
02160:  GOTO   2170
02164:  XORLW  01
02166:  BTFSC  FD8.2
02168:  GOTO   227A
0216C:  GOTO   2376
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02170:  MOVLB  8
02172:  CLRF   x92
02174:  CLRF   x91
02176:  MOVLB  0
02178:  MOVLB  8
0217A:  MOVF   x92,W
0217C:  SUBWF  x8A,W
0217E:  BTFSC  FD8.0
02180:  BRA    2188
02182:  MOVLB  0
02184:  GOTO   21D4
02188:  MOVLB  0
0218A:  BTFSS  FD8.2
0218C:  GOTO   21A2
02190:  MOVLB  8
02192:  MOVF   x89,W
02194:  SUBWF  x91,W
02196:  BTFSS  FD8.0
02198:  BRA    21A0
0219A:  MOVLB  0
0219C:  GOTO   21D4
021A0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
021A2:  MOVLB  8
021A4:  MOVF   x87,W
021A6:  ADDWF  x91,W
021A8:  MOVWF  FE9
021AA:  MOVF   x88,W
021AC:  ADDWFC x92,W
021AE:  MOVWF  FEA
021B0:  MOVFF  FEF,89D
021B4:  MOVFF  89D,89F
021B8:  MOVLW  08
021BA:  MOVWF  xA0
021BC:  MOVLW  01
021BE:  MOVWF  xA1
021C0:  MOVLB  0
021C2:  CALL   20C6
021C6:  MOVLB  8
021C8:  INCF   x91,F
021CA:  BTFSC  FD8.2
021CC:  INCF   x92,F
021CE:  MOVLB  0
021D0:  GOTO   2178
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
021D4:  MOVLB  8
021D6:  CLRF   x96
021D8:  CLRF   x95
021DA:  CLRF   x94
021DC:  CLRF   x93
021DE:  MOVLB  0
021E0:  MOVLB  8
021E2:  MOVF   x96,W
021E4:  SUBWF  x90,W
021E6:  BTFSC  FD8.0
021E8:  BRA    21F0
021EA:  MOVLB  0
021EC:  GOTO   2276
021F0:  MOVLB  0
021F2:  BTFSS  FD8.2
021F4:  GOTO   223A
021F8:  MOVLB  8
021FA:  MOVF   x95,W
021FC:  SUBWF  x8F,W
021FE:  BTFSC  FD8.0
02200:  BRA    2208
02202:  MOVLB  0
02204:  GOTO   2276
02208:  MOVLB  0
0220A:  BTFSS  FD8.2
0220C:  GOTO   223A
02210:  MOVLB  8
02212:  MOVF   x94,W
02214:  SUBWF  x8E,W
02216:  BTFSC  FD8.0
02218:  BRA    2220
0221A:  MOVLB  0
0221C:  GOTO   2276
02220:  MOVLB  0
02222:  BTFSS  FD8.2
02224:  GOTO   223A
02228:  MOVLB  8
0222A:  MOVF   x8D,W
0222C:  SUBWF  x93,W
0222E:  BTFSS  FD8.0
02230:  BRA    2238
02232:  MOVLB  0
02234:  GOTO   2276
02238:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0223A:  MOVLB  8
0223C:  MOVF   x8B,W
0223E:  ADDWF  x93,W
02240:  MOVWF  FE9
02242:  MOVF   x8C,W
02244:  ADDWFC x94,W
02246:  MOVWF  FEA
02248:  MOVLW  02
0224A:  MOVWF  x9F
0224C:  MOVLW  08
0224E:  MOVWF  xA0
02250:  MOVLW  01
02252:  MOVWF  xA1
02254:  MOVLB  0
02256:  CALL   20C6
0225A:  MOVFF  01,FEF
0225E:  MOVLW  01
02260:  MOVLB  8
02262:  ADDWF  x93,F
02264:  BTFSC  FD8.0
02266:  INCF   x94,F
02268:  BTFSC  FD8.2
0226A:  INCF   x95,F
0226C:  BTFSC  FD8.2
0226E:  INCF   x96,F
02270:  MOVLB  0
02272:  GOTO   21E0
....................          break;
02276:  GOTO   237A
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0227A:  MOVLB  8
0227C:  CLRF   x98
0227E:  CLRF   x97
02280:  MOVLB  0
02282:  MOVLB  8
02284:  MOVF   x98,W
02286:  SUBWF  x8A,W
02288:  BTFSC  FD8.0
0228A:  BRA    2292
0228C:  MOVLB  0
0228E:  GOTO   22D6
02292:  MOVLB  0
02294:  BTFSS  FD8.2
02296:  GOTO   22AC
0229A:  MOVLB  8
0229C:  MOVF   x89,W
0229E:  SUBWF  x97,W
022A0:  BTFSS  FD8.0
022A2:  BRA    22AA
022A4:  MOVLB  0
022A6:  GOTO   22D6
022AA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
022AC:  MOVLB  8
022AE:  MOVF   x87,W
022B0:  ADDWF  x97,W
022B2:  MOVWF  FE9
022B4:  MOVF   x88,W
022B6:  ADDWFC x98,W
022B8:  MOVWF  FEA
022BA:  MOVFF  FEF,89D
022BE:  MOVFF  89D,89F
022C2:  MOVLB  0
022C4:  CALL   2142
022C8:  MOVLB  8
022CA:  INCF   x97,F
022CC:  BTFSC  FD8.2
022CE:  INCF   x98,F
022D0:  MOVLB  0
022D2:  GOTO   2282
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
022D6:  MOVLB  8
022D8:  CLRF   x9C
022DA:  CLRF   x9B
022DC:  CLRF   x9A
022DE:  CLRF   x99
022E0:  MOVLB  0
022E2:  MOVLB  8
022E4:  MOVF   x9C,W
022E6:  SUBWF  x90,W
022E8:  BTFSC  FD8.0
022EA:  BRA    22F2
022EC:  MOVLB  0
022EE:  GOTO   2372
022F2:  MOVLB  0
022F4:  BTFSS  FD8.2
022F6:  GOTO   233C
022FA:  MOVLB  8
022FC:  MOVF   x9B,W
022FE:  SUBWF  x8F,W
02300:  BTFSC  FD8.0
02302:  BRA    230A
02304:  MOVLB  0
02306:  GOTO   2372
0230A:  MOVLB  0
0230C:  BTFSS  FD8.2
0230E:  GOTO   233C
02312:  MOVLB  8
02314:  MOVF   x9A,W
02316:  SUBWF  x8E,W
02318:  BTFSC  FD8.0
0231A:  BRA    2322
0231C:  MOVLB  0
0231E:  GOTO   2372
02322:  MOVLB  0
02324:  BTFSS  FD8.2
02326:  GOTO   233C
0232A:  MOVLB  8
0232C:  MOVF   x8D,W
0232E:  SUBWF  x99,W
02330:  BTFSS  FD8.0
02332:  BRA    233A
02334:  MOVLB  0
02336:  GOTO   2372
0233A:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0233C:  MOVLB  8
0233E:  MOVF   x8B,W
02340:  ADDWF  x99,W
02342:  MOVWF  FE9
02344:  MOVF   x8C,W
02346:  ADDWFC x9A,W
02348:  MOVWF  FEA
0234A:  MOVLW  01
0234C:  MOVWF  x9F
0234E:  MOVLB  0
02350:  CALL   2142
02354:  MOVF   01,W
02356:  MOVFF  00,FEF
0235A:  MOVLW  01
0235C:  MOVLB  8
0235E:  ADDWF  x99,F
02360:  BTFSC  FD8.0
02362:  INCF   x9A,F
02364:  BTFSC  FD8.2
02366:  INCF   x9B,F
02368:  BTFSC  FD8.2
0236A:  INCF   x9C,F
0236C:  MOVLB  0
0236E:  GOTO   22E2
....................          break;
02372:  GOTO   237A
....................    
....................          
....................       default:
....................          break;
02376:  GOTO   237A
....................    }
....................    return;
0237A:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03240:  MOVLB  8
03242:  MOVF   x7D,W
03244:  XORLW  00
03246:  MOVLB  0
03248:  BTFSC  FD8.2
0324A:  GOTO   325A
0324E:  XORLW  01
03250:  BTFSC  FD8.2
03252:  GOTO   3308
03256:  GOTO   33A6
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0325A:  MOVLB  8
0325C:  CLRF   x88
0325E:  MOVLB  0
03260:  MOVLB  8
03262:  MOVF   x83,W
03264:  SUBWF  x88,W
03266:  BTFSS  FD8.0
03268:  BRA    3270
0326A:  MOVLB  0
0326C:  GOTO   32A0
03270:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03272:  MOVLB  8
03274:  MOVF   x88,W
03276:  ADDWF  x81,W
03278:  MOVWF  FE9
0327A:  MOVLW  00
0327C:  ADDWFC x82,W
0327E:  MOVWF  FEA
03280:  MOVFF  FEF,88E
03284:  MOVFF  88E,89F
03288:  MOVLW  08
0328A:  MOVWF  xA0
0328C:  MOVLW  01
0328E:  MOVWF  xA1
03290:  MOVLB  0
03292:  CALL   20C6
03296:  MOVLB  8
03298:  INCF   x88,F
0329A:  MOVLB  0
0329C:  GOTO   3260
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
032A0:  MOVLB  8
032A2:  CLRF   x8A
032A4:  CLRF   x89
032A6:  MOVLB  0
032A8:  MOVLB  8
032AA:  MOVF   x8A,W
032AC:  SUBWF  x87,W
032AE:  BTFSC  FD8.0
032B0:  BRA    32B8
032B2:  MOVLB  0
032B4:  GOTO   3304
032B8:  MOVLB  0
032BA:  BTFSS  FD8.2
032BC:  GOTO   32D2
032C0:  MOVLB  8
032C2:  MOVF   x86,W
032C4:  SUBWF  x89,W
032C6:  BTFSS  FD8.0
032C8:  BRA    32D0
032CA:  MOVLB  0
032CC:  GOTO   3304
032D0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
032D2:  MOVLB  8
032D4:  MOVF   x84,W
032D6:  ADDWF  x89,W
032D8:  MOVWF  FE9
032DA:  MOVF   x85,W
032DC:  ADDWFC x8A,W
032DE:  MOVWF  FEA
032E0:  MOVFF  FEF,88E
032E4:  MOVFF  88E,89F
032E8:  MOVLW  08
032EA:  MOVWF  xA0
032EC:  MOVLW  01
032EE:  MOVWF  xA1
032F0:  MOVLB  0
032F2:  CALL   20C6
032F6:  MOVLB  8
032F8:  INCF   x89,F
032FA:  BTFSC  FD8.2
032FC:  INCF   x8A,F
032FE:  MOVLB  0
03300:  GOTO   32A8
....................          break;
03304:  GOTO   33AA
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03308:  MOVLB  8
0330A:  CLRF   x8B
0330C:  MOVLB  0
0330E:  MOVLB  8
03310:  MOVF   x83,W
03312:  SUBWF  x8B,W
03314:  BTFSS  FD8.0
03316:  BRA    331E
03318:  MOVLB  0
0331A:  GOTO   3346
0331E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03320:  MOVLB  8
03322:  MOVF   x8B,W
03324:  ADDWF  x81,W
03326:  MOVWF  FE9
03328:  MOVLW  00
0332A:  ADDWFC x82,W
0332C:  MOVWF  FEA
0332E:  MOVFF  FEF,88E
03332:  MOVFF  88E,89F
03336:  MOVLB  0
03338:  CALL   2142
0333C:  MOVLB  8
0333E:  INCF   x8B,F
03340:  MOVLB  0
03342:  GOTO   330E
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03346:  MOVLB  8
03348:  CLRF   x8D
0334A:  CLRF   x8C
0334C:  MOVLB  0
0334E:  MOVLB  8
03350:  MOVF   x8D,W
03352:  SUBWF  x87,W
03354:  BTFSC  FD8.0
03356:  BRA    335E
03358:  MOVLB  0
0335A:  GOTO   33A2
0335E:  MOVLB  0
03360:  BTFSS  FD8.2
03362:  GOTO   3378
03366:  MOVLB  8
03368:  MOVF   x86,W
0336A:  SUBWF  x8C,W
0336C:  BTFSS  FD8.0
0336E:  BRA    3376
03370:  MOVLB  0
03372:  GOTO   33A2
03376:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03378:  MOVLB  8
0337A:  MOVF   x84,W
0337C:  ADDWF  x8C,W
0337E:  MOVWF  FE9
03380:  MOVF   x85,W
03382:  ADDWFC x8D,W
03384:  MOVWF  FEA
03386:  MOVFF  FEF,88E
0338A:  MOVFF  88E,89F
0338E:  MOVLB  0
03390:  CALL   2142
03394:  MOVLB  8
03396:  INCF   x8C,F
03398:  BTFSC  FD8.2
0339A:  INCF   x8D,F
0339C:  MOVLB  0
0339E:  GOTO   334E
....................          break;
033A2:  GOTO   33AA
....................          
....................       default:
....................          break;
033A6:  GOTO   33AA
....................    }
....................    return;
033AA:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06396:  MOVFF  4CF,883
0639A:  MOVLW  01
0639C:  MOVLB  8
0639E:  MOVWF  x84
063A0:  MOVLW  0F
063A2:  MOVWF  x86
063A4:  MOVLW  89
063A6:  MOVWF  x85
063A8:  MOVLB  0
063AA:  CALL   2072
063AE:  MOVFF  4CF,883
063B2:  MOVLB  8
063B4:  CLRF   x84
063B6:  MOVLW  0F
063B8:  MOVWF  x86
063BA:  MOVLW  92
063BC:  MOVWF  x85
063BE:  MOVLB  0
063C0:  CALL   2072
063C4:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
033AC:  MOVLW  05
033AE:  MOVLB  8
033B0:  MOVWF  x81
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
033B2:  MOVFF  87F,883
033B6:  CLRF   x84
033B8:  MOVLW  0F
033BA:  MOVWF  x86
033BC:  MOVLW  89
033BE:  MOVWF  x85
033C0:  MOVLB  0
033C2:  CALL   2072
033C6:  MOVFF  87F,883
033CA:  MOVLB  8
033CC:  CLRF   x84
033CE:  MOVLW  0F
033D0:  MOVWF  x86
033D2:  MOVLW  92
033D4:  MOVWF  x85
033D6:  MOVLB  0
033D8:  CALL   2072
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
033DC:  MOVFF  880,886
033E0:  MOVFF  87F,885
033E4:  MOVFF  87E,884
033E8:  MOVFF  87D,883
033EC:  MOVLW  08
033EE:  MOVLB  8
033F0:  MOVWF  x88
033F2:  MOVLW  81
033F4:  MOVWF  x87
033F6:  CLRF   x8A
033F8:  MOVLW  01
033FA:  MOVWF  x89
033FC:  MOVLW  08
033FE:  MOVWF  x8C
03400:  MOVLW  82
03402:  MOVWF  x8B
03404:  CLRF   x90
03406:  CLRF   x8F
03408:  CLRF   x8E
0340A:  MOVLW  01
0340C:  MOVWF  x8D
0340E:  MOVLB  0
03410:  CALL   2156
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03414:  MOVFF  87F,883
03418:  MOVLW  01
0341A:  MOVLB  8
0341C:  MOVWF  x84
0341E:  MOVLW  0F
03420:  MOVWF  x86
03422:  MOVLW  89
03424:  MOVWF  x85
03426:  MOVLB  0
03428:  CALL   2072
0342C:  MOVFF  87F,883
03430:  MOVLB  8
03432:  CLRF   x84
03434:  MOVLW  0F
03436:  MOVWF  x86
03438:  MOVLW  92
0343A:  MOVWF  x85
0343C:  MOVLB  0
0343E:  CALL   2072
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03442:  MOVLB  8
03444:  MOVF   x82,W
03446:  MOVWF  01
03448:  MOVLB  0
0344A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
056C2:  MOVLB  4
056C4:  MOVF   x0A,F
056C6:  BTFSC  FD8.2
056C8:  BRA    56D0
056CA:  MOVLB  0
056CC:  GOTO   5828
056D0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
056D2:  MOVLW  06
056D4:  MOVLB  4
056D6:  MOVWF  x11
056D8:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
056DA:  MOVLW  D8
056DC:  MOVLB  4
056DE:  MOVWF  x12
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
056E0:  MOVFF  40F,41E
056E4:  MOVFF  410,41F
056E8:  CLRF   x20
056EA:  CLRF   x21
056EC:  MOVF   x1E,W
056EE:  MOVWF  00
056F0:  CLRF   01
056F2:  CLRF   02
056F4:  CLRF   03
056F6:  MOVFF  00,413
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
056FA:  MOVFF  40E,41E
056FE:  MOVFF  40F,41F
05702:  MOVFF  410,420
05706:  CLRF   x21
05708:  MOVF   x1E,W
0570A:  MOVWF  00
0570C:  CLRF   01
0570E:  CLRF   02
05710:  CLRF   03
05712:  MOVFF  00,414
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05716:  MOVF   x0D,W
05718:  MOVWF  00
0571A:  CLRF   01
0571C:  CLRF   02
0571E:  CLRF   03
05720:  MOVFF  00,415
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05724:  MOVFF  40B,883
05728:  MOVLB  8
0572A:  CLRF   x84
0572C:  MOVLW  0F
0572E:  MOVWF  x86
05730:  MOVLW  89
05732:  MOVWF  x85
05734:  MOVLB  0
05736:  CALL   2072
0573A:  MOVFF  40B,883
0573E:  MOVLB  8
05740:  CLRF   x84
05742:  MOVLW  0F
05744:  MOVWF  x86
05746:  MOVLW  92
05748:  MOVWF  x85
0574A:  MOVLB  0
0574C:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05750:  MOVFF  40C,880
05754:  MOVFF  40B,87F
05758:  MOVFF  40A,87E
0575C:  MOVFF  409,87D
05760:  MOVLW  04
05762:  MOVLB  8
05764:  MOVWF  x82
05766:  MOVLW  11
05768:  MOVWF  x81
0576A:  CLRF   x84
0576C:  MOVLW  01
0576E:  MOVWF  x83
05770:  MOVLB  0
05772:  CALL   3158
....................       output_high(flash_stream.cs_pin);
05776:  MOVFF  40B,883
0577A:  MOVLW  01
0577C:  MOVLB  8
0577E:  MOVWF  x84
05780:  MOVLW  0F
05782:  MOVWF  x86
05784:  MOVLW  89
05786:  MOVWF  x85
05788:  MOVLB  0
0578A:  CALL   2072
0578E:  MOVFF  40B,883
05792:  MOVLB  8
05794:  CLRF   x84
05796:  MOVLW  0F
05798:  MOVWF  x86
0579A:  MOVLW  92
0579C:  MOVWF  x85
0579E:  MOVLB  0
057A0:  CALL   2072
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
057A4:  MOVFF  40B,883
057A8:  MOVLB  8
057AA:  CLRF   x84
057AC:  MOVLW  0F
057AE:  MOVWF  x86
057B0:  MOVLW  89
057B2:  MOVWF  x85
057B4:  MOVLB  0
057B6:  CALL   2072
057BA:  MOVFF  40B,883
057BE:  MOVLB  8
057C0:  CLRF   x84
057C2:  MOVLW  0F
057C4:  MOVWF  x86
057C6:  MOVLW  92
057C8:  MOVWF  x85
057CA:  MOVLB  0
057CC:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
057D0:  MOVFF  40C,880
057D4:  MOVFF  40B,87F
057D8:  MOVFF  40A,87E
057DC:  MOVFF  409,87D
057E0:  MOVLW  04
057E2:  MOVLB  8
057E4:  MOVWF  x82
057E6:  MOVLW  12
057E8:  MOVWF  x81
057EA:  CLRF   x84
057EC:  MOVLW  04
057EE:  MOVWF  x83
057F0:  MOVLB  0
057F2:  CALL   3158
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
057F6:  MOVFF  40B,883
057FA:  MOVLW  01
057FC:  MOVLB  8
057FE:  MOVWF  x84
05800:  MOVLW  0F
05802:  MOVWF  x86
05804:  MOVLW  89
05806:  MOVWF  x85
05808:  MOVLB  0
0580A:  CALL   2072
0580E:  MOVFF  40B,883
05812:  MOVLB  8
05814:  CLRF   x84
05816:  MOVLW  0F
05818:  MOVWF  x86
0581A:  MOVLW  92
0581C:  MOVWF  x85
0581E:  MOVLB  0
05820:  CALL   2072
....................    }
05824:  GOTO   59A8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05828:  MOVLB  4
0582A:  DECFSZ x0A,W
0582C:  BRA    5832
0582E:  BRA    5838
05830:  MOVLB  0
05832:  MOVLB  0
05834:  GOTO   59A8
05838:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0583A:  MOVLW  06
0583C:  MOVLB  4
0583E:  MOVWF  x16
05840:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05842:  MOVLW  DC
05844:  MOVLB  4
05846:  MOVWF  x17
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05848:  MOVFF  410,41E
0584C:  CLRF   x1F
0584E:  CLRF   x20
05850:  CLRF   x21
05852:  MOVF   x1E,W
05854:  MOVWF  00
05856:  CLRF   01
05858:  CLRF   02
0585A:  CLRF   03
0585C:  MOVFF  00,418
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05860:  MOVFF  40F,41E
05864:  MOVFF  410,41F
05868:  CLRF   x20
0586A:  CLRF   x21
0586C:  MOVF   x1E,W
0586E:  MOVWF  00
05870:  CLRF   01
05872:  CLRF   02
05874:  CLRF   03
05876:  MOVFF  00,419
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0587A:  MOVFF  40E,41E
0587E:  MOVFF  40F,41F
05882:  MOVFF  410,420
05886:  CLRF   x21
05888:  MOVF   x1E,W
0588A:  MOVWF  00
0588C:  CLRF   01
0588E:  CLRF   02
05890:  CLRF   03
05892:  MOVFF  00,41A
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05896:  MOVF   x0D,W
05898:  MOVWF  00
0589A:  CLRF   01
0589C:  CLRF   02
0589E:  CLRF   03
058A0:  MOVFF  00,41B
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
058A4:  MOVFF  40B,883
058A8:  MOVLB  8
058AA:  CLRF   x84
058AC:  MOVLW  0F
058AE:  MOVWF  x86
058B0:  MOVLW  89
058B2:  MOVWF  x85
058B4:  MOVLB  0
058B6:  CALL   2072
058BA:  MOVFF  40B,883
058BE:  MOVLB  8
058C0:  CLRF   x84
058C2:  MOVLW  0F
058C4:  MOVWF  x86
058C6:  MOVLW  92
058C8:  MOVWF  x85
058CA:  MOVLB  0
058CC:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
058D0:  MOVFF  40C,880
058D4:  MOVFF  40B,87F
058D8:  MOVFF  40A,87E
058DC:  MOVFF  409,87D
058E0:  MOVLW  04
058E2:  MOVLB  8
058E4:  MOVWF  x82
058E6:  MOVLW  16
058E8:  MOVWF  x81
058EA:  CLRF   x84
058EC:  MOVLW  01
058EE:  MOVWF  x83
058F0:  MOVLB  0
058F2:  CALL   3158
....................       output_high(flash_stream.cs_pin);
058F6:  MOVFF  40B,883
058FA:  MOVLW  01
058FC:  MOVLB  8
058FE:  MOVWF  x84
05900:  MOVLW  0F
05902:  MOVWF  x86
05904:  MOVLW  89
05906:  MOVWF  x85
05908:  MOVLB  0
0590A:  CALL   2072
0590E:  MOVFF  40B,883
05912:  MOVLB  8
05914:  CLRF   x84
05916:  MOVLW  0F
05918:  MOVWF  x86
0591A:  MOVLW  92
0591C:  MOVWF  x85
0591E:  MOVLB  0
05920:  CALL   2072
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05924:  MOVFF  40B,883
05928:  MOVLB  8
0592A:  CLRF   x84
0592C:  MOVLW  0F
0592E:  MOVWF  x86
05930:  MOVLW  89
05932:  MOVWF  x85
05934:  MOVLB  0
05936:  CALL   2072
0593A:  MOVFF  40B,883
0593E:  MOVLB  8
05940:  CLRF   x84
05942:  MOVLW  0F
05944:  MOVWF  x86
05946:  MOVLW  92
05948:  MOVWF  x85
0594A:  MOVLB  0
0594C:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05950:  MOVFF  40C,880
05954:  MOVFF  40B,87F
05958:  MOVFF  40A,87E
0595C:  MOVFF  409,87D
05960:  MOVLW  04
05962:  MOVLB  8
05964:  MOVWF  x82
05966:  MOVLW  17
05968:  MOVWF  x81
0596A:  CLRF   x84
0596C:  MOVLW  05
0596E:  MOVWF  x83
05970:  MOVLB  0
05972:  CALL   3158
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05976:  MOVFF  40B,883
0597A:  MOVLW  01
0597C:  MOVLB  8
0597E:  MOVWF  x84
05980:  MOVLW  0F
05982:  MOVWF  x86
05984:  MOVLW  89
05986:  MOVWF  x85
05988:  MOVLB  0
0598A:  CALL   2072
0598E:  MOVFF  40B,883
05992:  MOVLB  8
05994:  CLRF   x84
05996:  MOVLW  0F
05998:  MOVWF  x86
0599A:  MOVLW  92
0599C:  MOVWF  x85
0599E:  MOVLB  0
059A0:  CALL   2072
....................    }
059A4:  GOTO   59A8
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
059A8:  MOVLB  4
059AA:  CLRF   x1C
059AC:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
059AE:  MOVFF  40C,880
059B2:  MOVFF  40B,87F
059B6:  MOVFF  40A,87E
059BA:  MOVFF  409,87D
059BE:  CALL   33AC
059C2:  MOVF   01,W
059C4:  ANDLW  01
059C6:  SUBLW  01
059C8:  BTFSS  FD8.2
059CA:  GOTO   5A1C
....................       if(timeout_counter > 10)
059CE:  MOVLB  4
059D0:  MOVF   x1C,W
059D2:  SUBLW  0A
059D4:  BTFSS  FD8.0
059D6:  BRA    59DE
059D8:  MOVLB  0
059DA:  GOTO   59F0
059DE:  MOVLB  0
....................          delay_ms(200);
059E0:  MOVLW  C8
059E2:  MOVLB  8
059E4:  MOVWF  x7D
059E6:  MOVLB  0
059E8:  CALL   1C98
059EC:  GOTO   59FC
....................       else
....................          delay_ms(10);   
059F0:  MOVLW  0A
059F2:  MOVLB  8
059F4:  MOVWF  x7D
059F6:  MOVLB  0
059F8:  CALL   1C98
....................       
....................       if(timeout_counter > 100){
059FC:  MOVLB  4
059FE:  MOVF   x1C,W
05A00:  SUBLW  64
05A02:  BTFSS  FD8.0
05A04:  BRA    5A0C
05A06:  MOVLB  0
05A08:  GOTO   5A12
05A0C:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05A0E:  GOTO   5A1C
....................       }  
....................       timeout_counter++;
05A12:  MOVLB  4
05A14:  INCF   x1C,F
05A16:  MOVLB  0
05A18:  GOTO   59AE
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05A1C:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
037D0:  MOVLB  8
037D2:  MOVF   x66,F
037D4:  BTFSC  FD8.2
037D6:  BRA    37DE
037D8:  MOVLB  0
037DA:  GOTO   3934
037DE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
037E0:  MOVLW  06
037E2:  MOVLB  8
037E4:  MOVWF  x6D
037E6:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
037E8:  MOVLW  20
037EA:  MOVLB  8
037EC:  MOVWF  x6E
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
037EE:  MOVFF  86B,87A
037F2:  MOVFF  86C,87B
037F6:  CLRF   x7C
037F8:  CLRF   x7D
037FA:  MOVF   x7A,W
037FC:  MOVWF  00
037FE:  CLRF   01
03800:  CLRF   02
03802:  CLRF   03
03804:  MOVFF  00,86F
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03808:  MOVFF  86A,87A
0380C:  MOVFF  86B,87B
03810:  MOVFF  86C,87C
03814:  CLRF   x7D
03816:  MOVF   x7A,W
03818:  MOVWF  00
0381A:  CLRF   01
0381C:  CLRF   02
0381E:  CLRF   03
03820:  MOVFF  00,870
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03824:  MOVF   x69,W
03826:  MOVWF  00
03828:  CLRF   01
0382A:  CLRF   02
0382C:  CLRF   03
0382E:  MOVFF  00,871
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03832:  MOVFF  867,883
03836:  CLRF   x84
03838:  MOVLW  0F
0383A:  MOVWF  x86
0383C:  MOVLW  89
0383E:  MOVWF  x85
03840:  MOVLB  0
03842:  CALL   2072
03846:  MOVFF  867,883
0384A:  MOVLB  8
0384C:  CLRF   x84
0384E:  MOVLW  0F
03850:  MOVWF  x86
03852:  MOVLW  92
03854:  MOVWF  x85
03856:  MOVLB  0
03858:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0385C:  MOVFF  868,880
03860:  MOVFF  867,87F
03864:  MOVFF  866,87E
03868:  MOVFF  865,87D
0386C:  MOVLW  08
0386E:  MOVLB  8
03870:  MOVWF  x82
03872:  MOVLW  6D
03874:  MOVWF  x81
03876:  CLRF   x84
03878:  MOVLW  01
0387A:  MOVWF  x83
0387C:  MOVLB  0
0387E:  CALL   3158
....................       output_high(flash_stream.cs_pin);
03882:  MOVFF  867,883
03886:  MOVLW  01
03888:  MOVLB  8
0388A:  MOVWF  x84
0388C:  MOVLW  0F
0388E:  MOVWF  x86
03890:  MOVLW  89
03892:  MOVWF  x85
03894:  MOVLB  0
03896:  CALL   2072
0389A:  MOVFF  867,883
0389E:  MOVLB  8
038A0:  CLRF   x84
038A2:  MOVLW  0F
038A4:  MOVWF  x86
038A6:  MOVLW  92
038A8:  MOVWF  x85
038AA:  MOVLB  0
038AC:  CALL   2072
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
038B0:  MOVFF  867,883
038B4:  MOVLB  8
038B6:  CLRF   x84
038B8:  MOVLW  0F
038BA:  MOVWF  x86
038BC:  MOVLW  89
038BE:  MOVWF  x85
038C0:  MOVLB  0
038C2:  CALL   2072
038C6:  MOVFF  867,883
038CA:  MOVLB  8
038CC:  CLRF   x84
038CE:  MOVLW  0F
038D0:  MOVWF  x86
038D2:  MOVLW  92
038D4:  MOVWF  x85
038D6:  MOVLB  0
038D8:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
038DC:  MOVFF  868,880
038E0:  MOVFF  867,87F
038E4:  MOVFF  866,87E
038E8:  MOVFF  865,87D
038EC:  MOVLW  08
038EE:  MOVLB  8
038F0:  MOVWF  x82
038F2:  MOVLW  6E
038F4:  MOVWF  x81
038F6:  CLRF   x84
038F8:  MOVLW  04
038FA:  MOVWF  x83
038FC:  MOVLB  0
038FE:  CALL   3158
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03902:  MOVFF  867,883
03906:  MOVLW  01
03908:  MOVLB  8
0390A:  MOVWF  x84
0390C:  MOVLW  0F
0390E:  MOVWF  x86
03910:  MOVLW  89
03912:  MOVWF  x85
03914:  MOVLB  0
03916:  CALL   2072
0391A:  MOVFF  867,883
0391E:  MOVLB  8
03920:  CLRF   x84
03922:  MOVLW  0F
03924:  MOVWF  x86
03926:  MOVLW  92
03928:  MOVWF  x85
0392A:  MOVLB  0
0392C:  CALL   2072
....................    }
03930:  GOTO   3AB2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03934:  MOVLB  8
03936:  DECFSZ x66,W
03938:  BRA    393E
0393A:  BRA    3944
0393C:  MOVLB  0
0393E:  MOVLB  0
03940:  GOTO   3AB2
03944:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03946:  MOVLW  06
03948:  MOVLB  8
0394A:  MOVWF  x72
0394C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
0394E:  MOVLW  21
03950:  MOVLB  8
03952:  MOVWF  x73
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
03954:  MOVFF  86C,87A
03958:  CLRF   x7B
0395A:  CLRF   x7C
0395C:  CLRF   x7D
0395E:  MOVF   x7A,W
03960:  MOVWF  00
03962:  CLRF   01
03964:  CLRF   02
03966:  CLRF   03
03968:  MOVFF  00,874
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0396C:  MOVFF  86B,87A
03970:  MOVFF  86C,87B
03974:  CLRF   x7C
03976:  CLRF   x7D
03978:  MOVF   x7A,W
0397A:  MOVWF  00
0397C:  CLRF   01
0397E:  CLRF   02
03980:  CLRF   03
03982:  MOVFF  00,875
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03986:  MOVFF  86A,87A
0398A:  MOVFF  86B,87B
0398E:  MOVFF  86C,87C
03992:  CLRF   x7D
03994:  MOVF   x7A,W
03996:  MOVWF  00
03998:  CLRF   01
0399A:  CLRF   02
0399C:  CLRF   03
0399E:  MOVFF  00,876
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
039A2:  MOVF   x69,W
039A4:  MOVWF  00
039A6:  CLRF   01
039A8:  CLRF   02
039AA:  CLRF   03
039AC:  MOVFF  00,877
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
039B0:  MOVFF  867,883
039B4:  CLRF   x84
039B6:  MOVLW  0F
039B8:  MOVWF  x86
039BA:  MOVLW  89
039BC:  MOVWF  x85
039BE:  MOVLB  0
039C0:  CALL   2072
039C4:  MOVFF  867,883
039C8:  MOVLB  8
039CA:  CLRF   x84
039CC:  MOVLW  0F
039CE:  MOVWF  x86
039D0:  MOVLW  92
039D2:  MOVWF  x85
039D4:  MOVLB  0
039D6:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
039DA:  MOVFF  868,880
039DE:  MOVFF  867,87F
039E2:  MOVFF  866,87E
039E6:  MOVFF  865,87D
039EA:  MOVLW  08
039EC:  MOVLB  8
039EE:  MOVWF  x82
039F0:  MOVLW  72
039F2:  MOVWF  x81
039F4:  CLRF   x84
039F6:  MOVLW  01
039F8:  MOVWF  x83
039FA:  MOVLB  0
039FC:  CALL   3158
....................       output_high(flash_stream.cs_pin);
03A00:  MOVFF  867,883
03A04:  MOVLW  01
03A06:  MOVLB  8
03A08:  MOVWF  x84
03A0A:  MOVLW  0F
03A0C:  MOVWF  x86
03A0E:  MOVLW  89
03A10:  MOVWF  x85
03A12:  MOVLB  0
03A14:  CALL   2072
03A18:  MOVFF  867,883
03A1C:  MOVLB  8
03A1E:  CLRF   x84
03A20:  MOVLW  0F
03A22:  MOVWF  x86
03A24:  MOVLW  92
03A26:  MOVWF  x85
03A28:  MOVLB  0
03A2A:  CALL   2072
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03A2E:  MOVFF  867,883
03A32:  MOVLB  8
03A34:  CLRF   x84
03A36:  MOVLW  0F
03A38:  MOVWF  x86
03A3A:  MOVLW  89
03A3C:  MOVWF  x85
03A3E:  MOVLB  0
03A40:  CALL   2072
03A44:  MOVFF  867,883
03A48:  MOVLB  8
03A4A:  CLRF   x84
03A4C:  MOVLW  0F
03A4E:  MOVWF  x86
03A50:  MOVLW  92
03A52:  MOVWF  x85
03A54:  MOVLB  0
03A56:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
03A5A:  MOVFF  868,880
03A5E:  MOVFF  867,87F
03A62:  MOVFF  866,87E
03A66:  MOVFF  865,87D
03A6A:  MOVLW  08
03A6C:  MOVLB  8
03A6E:  MOVWF  x82
03A70:  MOVLW  73
03A72:  MOVWF  x81
03A74:  CLRF   x84
03A76:  MOVLW  05
03A78:  MOVWF  x83
03A7A:  MOVLB  0
03A7C:  CALL   3158
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03A80:  MOVFF  867,883
03A84:  MOVLW  01
03A86:  MOVLB  8
03A88:  MOVWF  x84
03A8A:  MOVLW  0F
03A8C:  MOVWF  x86
03A8E:  MOVLW  89
03A90:  MOVWF  x85
03A92:  MOVLB  0
03A94:  CALL   2072
03A98:  MOVFF  867,883
03A9C:  MOVLB  8
03A9E:  CLRF   x84
03AA0:  MOVLW  0F
03AA2:  MOVWF  x86
03AA4:  MOVLW  92
03AA6:  MOVWF  x85
03AA8:  MOVLB  0
03AAA:  CALL   2072
....................    }
03AAE:  GOTO   3AB2
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03AB2:  MOVLB  8
03AB4:  CLRF   x78
03AB6:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03AB8:  MOVFF  868,880
03ABC:  MOVFF  867,87F
03AC0:  MOVFF  866,87E
03AC4:  MOVFF  865,87D
03AC8:  CALL   33AC
03ACC:  MOVF   01,W
03ACE:  ANDLW  01
03AD0:  SUBLW  01
03AD2:  BTFSS  FD8.2
03AD4:  GOTO   3B26
....................       if(timeout_counter > 10)
03AD8:  MOVLB  8
03ADA:  MOVF   x78,W
03ADC:  SUBLW  0A
03ADE:  BTFSS  FD8.0
03AE0:  BRA    3AE8
03AE2:  MOVLB  0
03AE4:  GOTO   3AFA
03AE8:  MOVLB  0
....................          delay_ms(200);
03AEA:  MOVLW  C8
03AEC:  MOVLB  8
03AEE:  MOVWF  x7D
03AF0:  MOVLB  0
03AF2:  CALL   1C98
03AF6:  GOTO   3B06
....................       else
....................          delay_ms(10);   
03AFA:  MOVLW  0A
03AFC:  MOVLB  8
03AFE:  MOVWF  x7D
03B00:  MOVLB  0
03B02:  CALL   1C98
....................       
....................       if(timeout_counter > 100){
03B06:  MOVLB  8
03B08:  MOVF   x78,W
03B0A:  SUBLW  64
03B0C:  BTFSS  FD8.0
03B0E:  BRA    3B16
03B10:  MOVLB  0
03B12:  GOTO   3B1C
03B16:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03B18:  GOTO   3B26
....................       }  
....................       timeout_counter++;
03B1C:  MOVLB  8
03B1E:  INCF   x78,F
03B20:  MOVLB  0
03B22:  GOTO   3AB8
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
03B26:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02442:  MOVLB  4
02444:  MOVF   xCE,F
02446:  BTFSC  FD8.2
02448:  BRA    2450
0244A:  MOVLB  0
0244C:  GOTO   2542
02450:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02452:  MOVLW  03
02454:  MOVLB  4
02456:  MOVWF  xDB
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02458:  MOVFF  4D3,4E5
0245C:  MOVFF  4D4,4E6
02460:  CLRF   xE7
02462:  CLRF   xE8
02464:  MOVF   xE5,W
02466:  MOVWF  00
02468:  CLRF   01
0246A:  CLRF   02
0246C:  CLRF   03
0246E:  MOVFF  00,4DC
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02472:  MOVFF  4D2,4E5
02476:  MOVFF  4D3,4E6
0247A:  MOVFF  4D4,4E7
0247E:  CLRF   xE8
02480:  MOVF   xE5,W
02482:  MOVWF  00
02484:  CLRF   01
02486:  CLRF   02
02488:  CLRF   03
0248A:  MOVFF  00,4DD
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0248E:  MOVF   xD1,W
02490:  MOVWF  00
02492:  CLRF   01
02494:  CLRF   02
02496:  CLRF   03
02498:  MOVFF  00,4DE
....................             
....................       output_low(flash_stream.cs_pin);
0249C:  MOVFF  4CF,883
024A0:  MOVLB  8
024A2:  CLRF   x84
024A4:  MOVLW  0F
024A6:  MOVWF  x86
024A8:  MOVLW  89
024AA:  MOVWF  x85
024AC:  MOVLB  0
024AE:  CALL   2072
024B2:  MOVFF  4CF,883
024B6:  MOVLB  8
024B8:  CLRF   x84
024BA:  MOVLW  0F
024BC:  MOVWF  x86
024BE:  MOVLW  92
024C0:  MOVWF  x85
024C2:  MOVLB  0
024C4:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
024C8:  MOVFF  4D0,886
024CC:  MOVFF  4CF,885
024D0:  MOVFF  4CE,884
024D4:  MOVFF  4CD,883
024D8:  MOVLW  04
024DA:  MOVLB  8
024DC:  MOVWF  x88
024DE:  MOVLW  DB
024E0:  MOVWF  x87
024E2:  CLRF   x8A
024E4:  MOVLW  04
024E6:  MOVWF  x89
024E8:  MOVFF  4D6,88C
024EC:  MOVFF  4D5,88B
024F0:  MOVFF  4DA,890
024F4:  MOVFF  4D9,88F
024F8:  MOVFF  4D8,88E
024FC:  MOVFF  4D7,88D
02500:  MOVLB  0
02502:  CALL   2156
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02506:  MOVLW  02
02508:  MOVWF  00
0250A:  DECFSZ 00,F
0250C:  BRA    250A
0250E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02510:  MOVFF  4CF,883
02514:  MOVLW  01
02516:  MOVLB  8
02518:  MOVWF  x84
0251A:  MOVLW  0F
0251C:  MOVWF  x86
0251E:  MOVLW  89
02520:  MOVWF  x85
02522:  MOVLB  0
02524:  CALL   2072
02528:  MOVFF  4CF,883
0252C:  MOVLB  8
0252E:  CLRF   x84
02530:  MOVLW  0F
02532:  MOVWF  x86
02534:  MOVLW  92
02536:  MOVWF  x85
02538:  MOVLB  0
0253A:  CALL   2072
....................    }
0253E:  GOTO   2658
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02542:  MOVLB  4
02544:  DECFSZ xCE,W
02546:  BRA    254C
02548:  BRA    2552
0254A:  MOVLB  0
0254C:  MOVLB  0
0254E:  GOTO   2658
02552:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02554:  MOVLW  13
02556:  MOVLB  4
02558:  MOVWF  xDF
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0255A:  MOVFF  4D4,4E5
0255E:  CLRF   xE6
02560:  CLRF   xE7
02562:  CLRF   xE8
02564:  MOVF   xE5,W
02566:  MOVWF  00
02568:  CLRF   01
0256A:  CLRF   02
0256C:  CLRF   03
0256E:  MOVFF  00,4E0
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02572:  MOVFF  4D3,4E5
02576:  MOVFF  4D4,4E6
0257A:  CLRF   xE7
0257C:  CLRF   xE8
0257E:  MOVF   xE5,W
02580:  MOVWF  00
02582:  CLRF   01
02584:  CLRF   02
02586:  CLRF   03
02588:  MOVFF  00,4E1
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0258C:  MOVFF  4D2,4E5
02590:  MOVFF  4D3,4E6
02594:  MOVFF  4D4,4E7
02598:  CLRF   xE8
0259A:  MOVF   xE5,W
0259C:  MOVWF  00
0259E:  CLRF   01
025A0:  CLRF   02
025A2:  CLRF   03
025A4:  MOVFF  00,4E2
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
025A8:  MOVF   xD1,W
025AA:  MOVWF  00
025AC:  CLRF   01
025AE:  CLRF   02
025B0:  CLRF   03
025B2:  MOVFF  00,4E3
....................    
....................       output_low(flash_stream.cs_pin);
025B6:  MOVFF  4CF,883
025BA:  MOVLB  8
025BC:  CLRF   x84
025BE:  MOVLW  0F
025C0:  MOVWF  x86
025C2:  MOVLW  89
025C4:  MOVWF  x85
025C6:  MOVLB  0
025C8:  CALL   2072
025CC:  MOVFF  4CF,883
025D0:  MOVLB  8
025D2:  CLRF   x84
025D4:  MOVLW  0F
025D6:  MOVWF  x86
025D8:  MOVLW  92
025DA:  MOVWF  x85
025DC:  MOVLB  0
025DE:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
025E2:  MOVFF  4D0,886
025E6:  MOVFF  4CF,885
025EA:  MOVFF  4CE,884
025EE:  MOVFF  4CD,883
025F2:  MOVLW  04
025F4:  MOVLB  8
025F6:  MOVWF  x88
025F8:  MOVLW  DF
025FA:  MOVWF  x87
025FC:  CLRF   x8A
025FE:  MOVLW  05
02600:  MOVWF  x89
02602:  MOVFF  4D6,88C
02606:  MOVFF  4D5,88B
0260A:  MOVFF  4DA,890
0260E:  MOVFF  4D9,88F
02612:  MOVFF  4D8,88E
02616:  MOVFF  4D7,88D
0261A:  MOVLB  0
0261C:  CALL   2156
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02620:  MOVLW  02
02622:  MOVWF  00
02624:  DECFSZ 00,F
02626:  BRA    2624
02628:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0262A:  MOVFF  4CF,883
0262E:  MOVLW  01
02630:  MOVLB  8
02632:  MOVWF  x84
02634:  MOVLW  0F
02636:  MOVWF  x86
02638:  MOVLW  89
0263A:  MOVWF  x85
0263C:  MOVLB  0
0263E:  CALL   2072
02642:  MOVFF  4CF,883
02646:  MOVLB  8
02648:  CLRF   x84
0264A:  MOVLW  0F
0264C:  MOVWF  x86
0264E:  MOVLW  92
02650:  MOVWF  x85
02652:  MOVLB  0
02654:  CALL   2072
....................    }
....................    return;
02658:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0344C:  MOVLB  8
0344E:  MOVF   x66,F
03450:  BTFSC  FD8.2
03452:  BRA    345A
03454:  MOVLB  0
03456:  GOTO   35C8
0345A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0345C:  MOVLW  06
0345E:  MOVLB  8
03460:  MOVWF  x71
03462:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03464:  MOVLW  02
03466:  MOVLB  8
03468:  MOVWF  x72
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0346A:  MOVFF  86B,87E
0346E:  MOVFF  86C,87F
03472:  CLRF   x80
03474:  CLRF   x81
03476:  MOVF   x7E,W
03478:  MOVWF  00
0347A:  CLRF   01
0347C:  CLRF   02
0347E:  CLRF   03
03480:  MOVFF  00,873
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03484:  MOVFF  86A,87E
03488:  MOVFF  86B,87F
0348C:  MOVFF  86C,880
03490:  CLRF   x81
03492:  MOVF   x7E,W
03494:  MOVWF  00
03496:  CLRF   01
03498:  CLRF   02
0349A:  CLRF   03
0349C:  MOVFF  00,874
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
034A0:  MOVF   x69,W
034A2:  MOVWF  00
034A4:  CLRF   01
034A6:  CLRF   02
034A8:  CLRF   03
034AA:  MOVFF  00,875
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
034AE:  MOVFF  867,883
034B2:  CLRF   x84
034B4:  MOVLW  0F
034B6:  MOVWF  x86
034B8:  MOVLW  89
034BA:  MOVWF  x85
034BC:  MOVLB  0
034BE:  CALL   2072
034C2:  MOVFF  867,883
034C6:  MOVLB  8
034C8:  CLRF   x84
034CA:  MOVLW  0F
034CC:  MOVWF  x86
034CE:  MOVLW  92
034D0:  MOVWF  x85
034D2:  MOVLB  0
034D4:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
034D8:  MOVFF  868,880
034DC:  MOVFF  867,87F
034E0:  MOVFF  866,87E
034E4:  MOVFF  865,87D
034E8:  MOVLW  08
034EA:  MOVLB  8
034EC:  MOVWF  x82
034EE:  MOVLW  71
034F0:  MOVWF  x81
034F2:  CLRF   x84
034F4:  MOVLW  01
034F6:  MOVWF  x83
034F8:  MOVLB  0
034FA:  CALL   3158
....................       output_high(flash_stream.cs_pin);
034FE:  MOVFF  867,883
03502:  MOVLW  01
03504:  MOVLB  8
03506:  MOVWF  x84
03508:  MOVLW  0F
0350A:  MOVWF  x86
0350C:  MOVLW  89
0350E:  MOVWF  x85
03510:  MOVLB  0
03512:  CALL   2072
03516:  MOVFF  867,883
0351A:  MOVLB  8
0351C:  CLRF   x84
0351E:  MOVLW  0F
03520:  MOVWF  x86
03522:  MOVLW  92
03524:  MOVWF  x85
03526:  MOVLB  0
03528:  CALL   2072
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0352C:  MOVFF  867,883
03530:  MOVLB  8
03532:  CLRF   x84
03534:  MOVLW  0F
03536:  MOVWF  x86
03538:  MOVLW  89
0353A:  MOVWF  x85
0353C:  MOVLB  0
0353E:  CALL   2072
03542:  MOVFF  867,883
03546:  MOVLB  8
03548:  CLRF   x84
0354A:  MOVLW  0F
0354C:  MOVWF  x86
0354E:  MOVLW  92
03550:  MOVWF  x85
03552:  MOVLB  0
03554:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03558:  MOVFF  868,880
0355C:  MOVFF  867,87F
03560:  MOVFF  866,87E
03564:  MOVFF  865,87D
03568:  MOVLW  08
0356A:  MOVLB  8
0356C:  MOVWF  x82
0356E:  MOVLW  72
03570:  MOVWF  x81
03572:  MOVLW  04
03574:  MOVWF  x83
03576:  MOVFF  86E,885
0357A:  MOVFF  86D,884
0357E:  MOVFF  870,887
03582:  MOVFF  86F,886
03586:  MOVLB  0
03588:  CALL   3240
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0358C:  MOVLW  02
0358E:  MOVWF  00
03590:  DECFSZ 00,F
03592:  BRA    3590
03594:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03596:  MOVFF  867,883
0359A:  MOVLW  01
0359C:  MOVLB  8
0359E:  MOVWF  x84
035A0:  MOVLW  0F
035A2:  MOVWF  x86
035A4:  MOVLW  89
035A6:  MOVWF  x85
035A8:  MOVLB  0
035AA:  CALL   2072
035AE:  MOVFF  867,883
035B2:  MOVLB  8
035B4:  CLRF   x84
035B6:  MOVLW  0F
035B8:  MOVWF  x86
035BA:  MOVLW  92
035BC:  MOVWF  x85
035BE:  MOVLB  0
035C0:  CALL   2072
....................    }
035C4:  GOTO   375A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
035C8:  MOVLB  8
035CA:  DECFSZ x66,W
035CC:  BRA    35D2
035CE:  BRA    35D8
035D0:  MOVLB  0
035D2:  MOVLB  0
035D4:  GOTO   375A
035D8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
035DA:  MOVLW  06
035DC:  MOVLB  8
035DE:  MOVWF  x76
035E0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
035E2:  MOVLW  12
035E4:  MOVLB  8
035E6:  MOVWF  x77
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
035E8:  MOVFF  86C,87E
035EC:  CLRF   x7F
035EE:  CLRF   x80
035F0:  CLRF   x81
035F2:  MOVF   x7E,W
035F4:  MOVWF  00
035F6:  CLRF   01
035F8:  CLRF   02
035FA:  CLRF   03
035FC:  MOVFF  00,878
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03600:  MOVFF  86B,87E
03604:  MOVFF  86C,87F
03608:  CLRF   x80
0360A:  CLRF   x81
0360C:  MOVF   x7E,W
0360E:  MOVWF  00
03610:  CLRF   01
03612:  CLRF   02
03614:  CLRF   03
03616:  MOVFF  00,879
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0361A:  MOVFF  86A,87E
0361E:  MOVFF  86B,87F
03622:  MOVFF  86C,880
03626:  CLRF   x81
03628:  MOVF   x7E,W
0362A:  MOVWF  00
0362C:  CLRF   01
0362E:  CLRF   02
03630:  CLRF   03
03632:  MOVFF  00,87A
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03636:  MOVF   x69,W
03638:  MOVWF  00
0363A:  CLRF   01
0363C:  CLRF   02
0363E:  CLRF   03
03640:  MOVFF  00,87B
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03644:  MOVFF  867,883
03648:  CLRF   x84
0364A:  MOVLW  0F
0364C:  MOVWF  x86
0364E:  MOVLW  89
03650:  MOVWF  x85
03652:  MOVLB  0
03654:  CALL   2072
03658:  MOVFF  867,883
0365C:  MOVLB  8
0365E:  CLRF   x84
03660:  MOVLW  0F
03662:  MOVWF  x86
03664:  MOVLW  92
03666:  MOVWF  x85
03668:  MOVLB  0
0366A:  CALL   2072
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0366E:  MOVFF  868,880
03672:  MOVFF  867,87F
03676:  MOVFF  866,87E
0367A:  MOVFF  865,87D
0367E:  MOVLW  08
03680:  MOVLB  8
03682:  MOVWF  x82
03684:  MOVLW  76
03686:  MOVWF  x81
03688:  CLRF   x84
0368A:  MOVLW  01
0368C:  MOVWF  x83
0368E:  MOVLB  0
03690:  CALL   3158
....................       output_high(flash_stream.cs_pin);
03694:  MOVFF  867,883
03698:  MOVLW  01
0369A:  MOVLB  8
0369C:  MOVWF  x84
0369E:  MOVLW  0F
036A0:  MOVWF  x86
036A2:  MOVLW  89
036A4:  MOVWF  x85
036A6:  MOVLB  0
036A8:  CALL   2072
036AC:  MOVFF  867,883
036B0:  MOVLB  8
036B2:  CLRF   x84
036B4:  MOVLW  0F
036B6:  MOVWF  x86
036B8:  MOVLW  92
036BA:  MOVWF  x85
036BC:  MOVLB  0
036BE:  CALL   2072
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
036C2:  MOVFF  867,883
036C6:  MOVLB  8
036C8:  CLRF   x84
036CA:  MOVLW  0F
036CC:  MOVWF  x86
036CE:  MOVLW  89
036D0:  MOVWF  x85
036D2:  MOVLB  0
036D4:  CALL   2072
036D8:  MOVFF  867,883
036DC:  MOVLB  8
036DE:  CLRF   x84
036E0:  MOVLW  0F
036E2:  MOVWF  x86
036E4:  MOVLW  92
036E6:  MOVWF  x85
036E8:  MOVLB  0
036EA:  CALL   2072
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
036EE:  MOVFF  868,880
036F2:  MOVFF  867,87F
036F6:  MOVFF  866,87E
036FA:  MOVFF  865,87D
036FE:  MOVLW  08
03700:  MOVLB  8
03702:  MOVWF  x82
03704:  MOVLW  77
03706:  MOVWF  x81
03708:  MOVLW  05
0370A:  MOVWF  x83
0370C:  MOVFF  86E,885
03710:  MOVFF  86D,884
03714:  MOVFF  870,887
03718:  MOVFF  86F,886
0371C:  MOVLB  0
0371E:  CALL   3240
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03722:  MOVLW  02
03724:  MOVWF  00
03726:  DECFSZ 00,F
03728:  BRA    3726
0372A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0372C:  MOVFF  867,883
03730:  MOVLW  01
03732:  MOVLB  8
03734:  MOVWF  x84
03736:  MOVLW  0F
03738:  MOVWF  x86
0373A:  MOVLW  89
0373C:  MOVWF  x85
0373E:  MOVLB  0
03740:  CALL   2072
03744:  MOVFF  867,883
03748:  MOVLB  8
0374A:  CLRF   x84
0374C:  MOVLW  0F
0374E:  MOVWF  x86
03750:  MOVLW  92
03752:  MOVWF  x85
03754:  MOVLB  0
03756:  CALL   2072
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0375A:  MOVLB  8
0375C:  CLRF   x7C
0375E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03760:  MOVFF  868,880
03764:  MOVFF  867,87F
03768:  MOVFF  866,87E
0376C:  MOVFF  865,87D
03770:  CALL   33AC
03774:  MOVF   01,W
03776:  ANDLW  01
03778:  SUBLW  01
0377A:  BTFSS  FD8.2
0377C:  GOTO   37CE
....................       if(timeout_counter > 10)
03780:  MOVLB  8
03782:  MOVF   x7C,W
03784:  SUBLW  0A
03786:  BTFSS  FD8.0
03788:  BRA    3790
0378A:  MOVLB  0
0378C:  GOTO   37A2
03790:  MOVLB  0
....................          delay_ms(200);
03792:  MOVLW  C8
03794:  MOVLB  8
03796:  MOVWF  x7D
03798:  MOVLB  0
0379A:  CALL   1C98
0379E:  GOTO   37AE
....................       else
....................          delay_ms(10);   
037A2:  MOVLW  0A
037A4:  MOVLB  8
037A6:  MOVWF  x7D
037A8:  MOVLB  0
037AA:  CALL   1C98
....................       
....................       if(timeout_counter > 100){
037AE:  MOVLB  8
037B0:  MOVF   x7C,W
037B2:  SUBLW  64
037B4:  BTFSS  FD8.0
037B6:  BRA    37BE
037B8:  MOVLB  0
037BA:  GOTO   37C4
037BE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
037C0:  GOTO   37CE
....................       }  
....................       timeout_counter++;
037C4:  MOVLB  8
037C6:  INCF   x7C,F
037C8:  MOVLB  0
037CA:  GOTO   3760
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
037CE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
0237C:  MOVLW  9F
0237E:  MOVLB  8
02380:  MOVWF  x7D
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02382:  MOVFF  867,883
02386:  CLRF   x84
02388:  MOVLW  0F
0238A:  MOVWF  x86
0238C:  MOVLW  89
0238E:  MOVWF  x85
02390:  MOVLB  0
02392:  CALL   2072
02396:  MOVFF  867,883
0239A:  MOVLB  8
0239C:  CLRF   x84
0239E:  MOVLW  0F
023A0:  MOVWF  x86
023A2:  MOVLW  92
023A4:  MOVWF  x85
023A6:  MOVLB  0
023A8:  CALL   2072
....................    delay_us(10);  
023AC:  MOVLW  0D
023AE:  MOVWF  00
023B0:  DECFSZ 00,F
023B2:  BRA    23B0
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
023B4:  MOVFF  868,886
023B8:  MOVFF  867,885
023BC:  MOVFF  866,884
023C0:  MOVFF  865,883
023C4:  MOVLW  08
023C6:  MOVLB  8
023C8:  MOVWF  x88
023CA:  MOVLW  7D
023CC:  MOVWF  x87
023CE:  CLRF   x8A
023D0:  MOVLW  01
023D2:  MOVWF  x89
023D4:  MOVLW  08
023D6:  MOVWF  x8C
023D8:  MOVLW  69
023DA:  MOVWF  x8B
023DC:  CLRF   x90
023DE:  CLRF   x8F
023E0:  CLRF   x8E
023E2:  MOVLW  14
023E4:  MOVWF  x8D
023E6:  MOVLB  0
023E8:  CALL   2156
....................    output_high(flash_stream.cs_pin);
023EC:  MOVFF  867,883
023F0:  MOVLW  01
023F2:  MOVLB  8
023F4:  MOVWF  x84
023F6:  MOVLW  0F
023F8:  MOVWF  x86
023FA:  MOVLW  89
023FC:  MOVWF  x85
023FE:  MOVLB  0
02400:  CALL   2072
02404:  MOVFF  867,883
02408:  MOVLB  8
0240A:  CLRF   x84
0240C:  MOVLW  0F
0240E:  MOVWF  x86
02410:  MOVLW  92
02412:  MOVWF  x85
02414:  MOVLB  0
02416:  CALL   2072
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0241A:  MOVLB  8
0241C:  MOVF   x69,W
0241E:  SUBLW  20
02420:  BTFSC  FD8.2
02422:  BRA    242A
02424:  MOVLB  0
02426:  GOTO   2438
0242A:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0242C:  MOVLW  01
0242E:  MOVWF  01
02430:  GOTO   2440
....................    }
02434:  GOTO   2440
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02438:  MOVLW  00
0243A:  MOVWF  01
0243C:  GOTO   2440
....................    }
02440:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
040A8:  MOVLB  8
040AA:  MOVF   x25,W
040AC:  MOVWF  FE9
040AE:  MOVF   x26,W
040B0:  MOVWF  FEA
040B2:  MOVFF  FEF,828
040B6:  MOVLW  01
040B8:  MOVWF  x29
040BA:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
040BC:  MOVLB  8
040BE:  MOVF   x27,W
040C0:  SUBWF  x29,W
040C2:  BTFSS  FD8.0
040C4:  BRA    40CC
040C6:  MOVLB  0
040C8:  GOTO   40E8
040CC:  MOVLB  0
....................       crc ^= frame[i++];
040CE:  MOVLB  8
040D0:  MOVF   x29,W
040D2:  INCF   x29,F
040D4:  ADDWF  x25,W
040D6:  MOVWF  FE9
040D8:  MOVLW  00
040DA:  ADDWFC x26,W
040DC:  MOVWF  FEA
040DE:  MOVF   FEF,W
040E0:  XORWF  x28,F
040E2:  MOVLB  0
040E4:  GOTO   40BC
....................    return crc;
040E8:  MOVLB  8
040EA:  MOVF   x28,W
040EC:  MOVWF  01
040EE:  MOVLB  0
040F0:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size)
*
080BA:  MOVLW  01
080BC:  MOVLB  4
080BE:  SUBWF  xCF,W
080C0:  ADDWF  xCD,W
080C2:  MOVWF  FE9
080C4:  MOVLW  00
080C6:  ADDWFC xCE,W
080C8:  MOVWF  FEA
080CA:  MOVFF  FEF,4D0
080CE:  MOVLW  01
080D0:  SUBWF  xCF,W
080D2:  MOVWF  xD2
080D4:  MOVFF  4CE,826
080D8:  MOVFF  4CD,825
080DC:  MOVFF  4D2,827
080E0:  MOVLB  0
080E2:  CALL   40A8
080E6:  MOVFF  01,4D1
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
080EA:  MOVLB  4
080EC:  MOVF   xD1,W
080EE:  SUBWF  xD0,W
080F0:  BTFSS  FD8.2
080F2:  BRA    80FA
080F4:  MOVLB  0
080F6:  GOTO   8102
080FA:  MOVLB  0
080FC:  MOVLW  00
080FE:  GOTO   8104
08102:  MOVLW  01
08104:  MOVWF  01
08106:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
*
08468:  MOVLB  4
0846A:  MOVF   xD3,W
0846C:  ADDWF  xD1,W
0846E:  MOVWF  FE9
08470:  MOVLW  00
08472:  ADDWFC xD2,W
08474:  MOVWF  FEA
08476:  MOVFF  4D0,00
0847A:  CLRF   01
0847C:  CLRF   02
0847E:  CLRF   03
08480:  MOVFF  00,FEF
....................     buf[index + 1] = (int8)(value >> 16);
08484:  MOVLW  01
08486:  ADDWF  xD3,W
08488:  ADDWF  xD1,W
0848A:  MOVWF  FE9
0848C:  MOVLW  00
0848E:  ADDWFC xD2,W
08490:  MOVWF  FEA
08492:  MOVFF  4CF,00
08496:  MOVFF  4D0,01
0849A:  CLRF   02
0849C:  CLRF   03
0849E:  MOVFF  00,FEF
....................     buf[index + 2] = (int8)(value >>  8);
084A2:  MOVLW  02
084A4:  ADDWF  xD3,W
084A6:  ADDWF  xD1,W
084A8:  MOVWF  FE9
084AA:  MOVLW  00
084AC:  ADDWFC xD2,W
084AE:  MOVWF  FEA
084B0:  MOVFF  4CE,00
084B4:  MOVFF  4CF,01
084B8:  MOVFF  4D0,02
084BC:  CLRF   03
084BE:  MOVFF  00,FEF
....................     buf[index + 3] = (int8)(value      );   // LSB
084C2:  MOVLW  03
084C4:  ADDWF  xD3,W
084C6:  ADDWF  xD1,W
084C8:  MOVWF  FE9
084CA:  MOVLW  00
084CC:  ADDWFC xD2,W
084CE:  MOVWF  FEA
084D0:  MOVFF  4CD,FEF
084D4:  MOVLB  0
084D6:  RETURN 0
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
*
08108:  MOVLB  4
0810A:  MOVF   x8E,W
0810C:  ADDWF  x8C,W
0810E:  MOVWF  FE9
08110:  MOVLW  00
08112:  ADDWFC x8D,W
08114:  MOVWF  FEA
08116:  MOVF   FEF,W
08118:  CLRF   x92
0811A:  CLRF   x91
0811C:  CLRF   x90
0811E:  MOVWF  x8F
08120:  MOVLW  01
08122:  ADDWF  x8E,W
08124:  ADDWF  x8C,W
08126:  MOVWF  FE9
08128:  MOVLW  00
0812A:  ADDWFC x8D,W
0812C:  MOVWF  FEA
0812E:  MOVF   FEF,W
08130:  CLRF   x97
08132:  CLRF   x96
08134:  CLRF   x95
08136:  MOVWF  x94
08138:  MOVFF  496,03
0813C:  MOVFF  495,02
08140:  MOVFF  494,01
08144:  CLRF   00
08146:  MOVF   00,W
08148:  IORWF  x8F,F
0814A:  MOVF   01,W
0814C:  IORWF  x90,F
0814E:  MOVF   02,W
08150:  IORWF  x91,F
08152:  MOVF   03,W
08154:  IORWF  x92,F
08156:  MOVLW  02
08158:  ADDWF  x8E,W
0815A:  ADDWF  x8C,W
0815C:  MOVWF  FE9
0815E:  MOVLW  00
08160:  ADDWFC x8D,W
08162:  MOVWF  FEA
08164:  MOVF   FEF,W
08166:  CLRF   x97
08168:  CLRF   x96
0816A:  CLRF   x95
0816C:  MOVWF  x94
0816E:  MOVFF  495,03
08172:  MOVFF  494,02
08176:  CLRF   00
08178:  CLRF   01
0817A:  MOVF   00,W
0817C:  IORWF  x8F,F
0817E:  MOVF   01,W
08180:  IORWF  x90,F
08182:  MOVF   02,W
08184:  IORWF  x91,F
08186:  MOVF   03,W
08188:  IORWF  x92,F
0818A:  MOVLW  03
0818C:  ADDWF  x8E,W
0818E:  ADDWF  x8C,W
08190:  MOVWF  FE9
08192:  MOVLW  00
08194:  ADDWFC x8D,W
08196:  MOVWF  FEA
08198:  MOVF   FEF,W
0819A:  CLRF   x97
0819C:  CLRF   x96
0819E:  CLRF   x95
081A0:  MOVWF  x94
081A2:  MOVFF  494,03
081A6:  CLRF   00
081A8:  CLRF   01
081AA:  CLRF   02
081AC:  MOVF   00,W
081AE:  IORWF  x8F,W
081B0:  MOVWF  00
081B2:  MOVF   01,W
081B4:  IORWF  x90,W
081B6:  MOVWF  01
081B8:  MOVF   02,W
081BA:  IORWF  x91,W
081BC:  MOVWF  02
081BE:  MOVF   03,W
081C0:  IORWF  x92,W
081C2:  MOVWF  03
081C4:  MOVLB  0
081C6:  RETURN 0
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
054FC:  MOVLW  01
054FE:  ADDWF  xED,W
05500:  ANDLW  0F
05502:  MOVLB  3
05504:  MOVWF  xE1
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
05506:  MOVLB  0
05508:  MOVF   xEC,W
0550A:  MOVLB  3
0550C:  SUBWF  xE1,W
0550E:  BTFSC  FD8.2
05510:  BRA    5518
05512:  MOVLB  0
05514:  GOTO   552E
05518:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
0551A:  MOVLW  8A
0551C:  MOVWF  FF6
0551E:  MOVLW  02
05520:  MOVWF  FF7
05522:  MOVLW  00
05524:  MOVWF  FF8
05526:  CALL   1D18
0552A:  GOTO   5664
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].func_type = data->func_type;
0552E:  MOVF   xED,W
05530:  MULLW  0A
05532:  MOVF   FF3,W
05534:  MOVLB  3
05536:  CLRF   xE3
05538:  MOVWF  xE2
0553A:  MOVLW  4C
0553C:  ADDWF  xE2,W
0553E:  MOVWF  01
05540:  MOVLW  00
05542:  ADDWFC xE3,W
05544:  MOVWF  03
05546:  MOVF   01,W
05548:  MOVWF  xE4
0554A:  MOVFF  03,3E5
0554E:  MOVF   xDF,W
05550:  MOVWF  FE9
05552:  MOVF   xE0,W
05554:  MOVWF  FEA
05556:  MOVF   FEF,W
05558:  MOVWF  xE6
0555A:  MOVFF  3E5,FEA
0555E:  MOVFF  3E4,FE9
05562:  MOVFF  3E6,FEF
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src       = data->src;
05566:  MOVLB  0
05568:  MOVF   xED,W
0556A:  MULLW  0A
0556C:  MOVF   FF3,W
0556E:  MOVLB  3
05570:  CLRF   xE3
05572:  MOVWF  xE2
05574:  MOVLW  02
05576:  ADDWF  xE2,W
05578:  MOVWF  01
0557A:  MOVLW  00
0557C:  ADDWFC xE3,W
0557E:  MOVWF  03
05580:  MOVF   01,W
05582:  ADDLW  4C
05584:  MOVWF  01
05586:  MOVLW  00
05588:  ADDWFC 03,F
0558A:  MOVF   01,W
0558C:  MOVWF  xE2
0558E:  MOVFF  03,3E3
05592:  MOVLW  02
05594:  ADDWF  xDF,W
05596:  MOVWF  FE9
05598:  MOVLW  00
0559A:  ADDWFC xE0,W
0559C:  MOVWF  FEA
0559E:  MOVFF  FEF,00
055A2:  MOVFF  FEC,01
055A6:  MOVFF  FEC,02
055AA:  MOVFF  FEC,03
055AE:  MOVF   FED,F
055B0:  MOVF   FED,F
055B2:  MOVF   FED,F
055B4:  MOVFF  03,3E7
055B8:  MOVFF  02,3E6
055BC:  MOVFF  01,3E5
055C0:  MOVFF  00,3E4
055C4:  MOVFF  3E3,FEA
055C8:  MOVFF  3E2,FE9
055CC:  MOVFF  3E4,FEF
055D0:  MOVFF  3E5,FEC
055D4:  MOVFF  3E6,FEC
055D8:  MOVFF  3E7,FEC
055DC:  MOVF   FED,F
055DE:  MOVF   FED,F
055E0:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size      = data->size;
055E2:  MOVLB  0
055E4:  MOVF   xED,W
055E6:  MULLW  0A
055E8:  MOVF   FF3,W
055EA:  MOVLB  3
055EC:  CLRF   xE3
055EE:  MOVWF  xE2
055F0:  MOVLW  06
055F2:  ADDWF  xE2,W
055F4:  MOVWF  01
055F6:  MOVLW  00
055F8:  ADDWFC xE3,W
055FA:  MOVWF  03
055FC:  MOVF   01,W
055FE:  ADDLW  4C
05600:  MOVWF  01
05602:  MOVLW  00
05604:  ADDWFC 03,F
05606:  MOVF   01,W
05608:  MOVWF  xE2
0560A:  MOVFF  03,3E3
0560E:  MOVLW  06
05610:  ADDWF  xDF,W
05612:  MOVWF  FE9
05614:  MOVLW  00
05616:  ADDWFC xE0,W
05618:  MOVWF  FEA
0561A:  MOVFF  FEF,00
0561E:  MOVFF  FEC,01
05622:  MOVFF  FEC,02
05626:  MOVFF  FEC,03
0562A:  MOVF   FED,F
0562C:  MOVF   FED,F
0562E:  MOVF   FED,F
05630:  MOVFF  03,3E7
05634:  MOVFF  02,3E6
05638:  MOVFF  01,3E5
0563C:  MOVFF  00,3E4
05640:  MOVFF  3E3,FEA
05644:  MOVFF  3E2,FE9
05648:  MOVFF  3E4,FEF
0564C:  MOVFF  3E5,FEC
05650:  MOVFF  3E6,FEC
05654:  MOVFF  3E7,FEC
05658:  MOVF   FED,F
0565A:  MOVF   FED,F
0565C:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
0565E:  MOVFF  3E1,ED
05662:  MOVLB  0
....................    }
05664:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
07DD0:  MOVF   xED,W
07DD2:  SUBWF  xEC,W
07DD4:  BTFSS  FD8.2
07DD6:  GOTO   7DFA
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
07DDA:  MOVLW  A6
07DDC:  MOVWF  FF6
07DDE:  MOVLW  02
07DE0:  MOVWF  FF7
07DE2:  MOVLW  00
07DE4:  MOVWF  FF8
07DE6:  CALL   1D18
....................       return 0x00;
07DEA:  MOVLW  00
07DEC:  MOVWF  01
07DEE:  MOVLW  00
07DF0:  MOVWF  02
07DF2:  GOTO   7E26
....................    }
07DF6:  GOTO   7E26
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
07DFA:  MOVFF  EC,3C2
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
07DFE:  MOVLW  01
07E00:  ADDWF  xEC,W
07E02:  ANDLW  0F
07E04:  MOVWF  xEC
....................       return &smf_queue.smf_data[current_head];
07E06:  MOVLB  3
07E08:  MOVF   xC2,W
07E0A:  MULLW  0A
07E0C:  MOVF   FF3,W
07E0E:  CLRF   03
07E10:  ADDLW  4C
07E12:  MOVWF  01
07E14:  MOVLW  00
07E16:  ADDWFC 03,F
07E18:  MOVF   01,W
07E1A:  MOVWF  01
07E1C:  MOVF   03,W
07E1E:  MOVWF  02
07E20:  MOVLB  0
07E22:  GOTO   7E26
....................    }
07E26:  GOTO   9AC4 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
07CE2:  MOVF   xED,W
07CE4:  SUBWF  xEC,W
07CE6:  BTFSC  FD8.2
07CE8:  GOTO   7CF2
07CEC:  MOVLW  00
07CEE:  GOTO   7CF4
07CF2:  MOVLW  01
07CF4:  MOVWF  01
07CF6:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(mission_id)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
07E2A:  MOVLB  4
07E2C:  CLRF   x53
07E2E:  CLRF   x54
07E30:  CLRF   x55
07E32:  CLRF   x56
07E34:  CLRF   x57
07E36:  CLRF   x58
07E38:  CLRF   x59
07E3A:  CLRF   x5A
....................    
....................    if (mission_id == ID_CIGS_DATA_TABLE)
07E3C:  MOVF   x52,W
07E3E:  SUBLW  C0
07E40:  BTFSC  FD8.2
07E42:  BRA    7E4A
07E44:  MOVLB  0
07E46:  GOTO   7E6E
07E4A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
07E4C:  MOVLW  06
07E4E:  MOVLB  4
07E50:  MOVWF  x56
07E52:  MOVLW  AA
07E54:  MOVWF  x55
07E56:  CLRF   x54
07E58:  CLRF   x53
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
07E5A:  MOVLW  06
07E5C:  MOVWF  x5A
07E5E:  MOVLW  AA
07E60:  MOVWF  x59
07E62:  MOVLW  0F
07E64:  MOVWF  x58
07E66:  SETF   x57
07E68:  MOVLB  0
....................    }
07E6A:  GOTO   7ED6
....................    else if (mission_id == ID_CIGS_MEASURE_DATA)
07E6E:  MOVLB  4
07E70:  MOVF   x52,W
07E72:  SUBLW  C1
07E74:  BTFSC  FD8.2
07E76:  BRA    7E7E
07E78:  MOVLB  0
07E7A:  GOTO   7EA4
07E7E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_MEASURE_DATA_START_ADDRESS;
07E80:  MOVLW  06
07E82:  MOVLB  4
07E84:  MOVWF  x56
07E86:  MOVLW  AA
07E88:  MOVWF  x55
07E8A:  MOVLW  10
07E8C:  MOVWF  x54
07E8E:  CLRF   x53
....................       mis_struct.end_address   = CIGS_MEASURE_DATA_END_ADDRESS;
07E90:  MOVLW  07
07E92:  MOVWF  x5A
07E94:  MOVLW  AA
07E96:  MOVWF  x59
07E98:  MOVLW  0F
07E9A:  MOVWF  x58
07E9C:  SETF   x57
07E9E:  MOVLB  0
....................    }
07EA0:  GOTO   7ED6
....................    else if (mission_id == ID_CIGS_PICLOG)
07EA4:  MOVLB  4
07EA6:  MOVF   x52,W
07EA8:  SUBLW  CF
07EAA:  BTFSC  FD8.2
07EAC:  BRA    7EB4
07EAE:  MOVLB  0
07EB0:  GOTO   7ED6
07EB4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
07EB6:  MOVLW  07
07EB8:  MOVLB  4
07EBA:  MOVWF  x56
07EBC:  MOVLW  AA
07EBE:  MOVWF  x55
07EC0:  MOVLW  10
07EC2:  MOVWF  x54
07EC4:  CLRF   x53
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
07EC6:  MOVLW  07
07EC8:  MOVWF  x5A
07ECA:  MOVLW  AA
07ECC:  MOVWF  x59
07ECE:  MOVLW  1F
07ED0:  MOVWF  x58
07ED2:  SETF   x57
07ED4:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
07ED6:  MOVLW  53
07ED8:  MOVWF  01
07EDA:  MOVLW  04
07EDC:  MOVWF  02
07EDE:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
04296:  MOVLB  3
04298:  CLRF   xC3
0429A:  CLRF   xC4
0429C:  CLRF   xC5
0429E:  CLRF   xC6
042A0:  CLRF   xC7
042A2:  CLRF   xC8
042A4:  CLRF   xC9
042A6:  CLRF   xCA
042A8:  CLRF   xCB
042AA:  CLRF   xCC
042AC:  CLRF   xCD
042AE:  CLRF   xCE
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
042B0:  MOVLW  C0
042B2:  MOVWF  FF6
042B4:  MOVLW  02
042B6:  MOVWF  FF7
042B8:  MOVLW  00
042BA:  MOVWF  FF8
042BC:  MOVLB  0
042BE:  CALL   1D18
....................    fprintf(PC, "\t[BOSS] >>> ");
042C2:  MOVLW  E0
042C4:  MOVWF  FF6
042C6:  MOVLW  02
042C8:  MOVWF  FF7
042CA:  MOVLW  00
042CC:  MOVWF  FF8
042CE:  CALL   1D18
....................    for (int8 i = 0; i < receive_signal_size; i++)
042D2:  MOVLB  3
042D4:  CLRF   xCF
042D6:  MOVLB  0
042D8:  MOVLB  3
042DA:  MOVF   xC2,W
042DC:  SUBWF  xCF,W
042DE:  BTFSS  FD8.0
042E0:  BRA    42E8
042E2:  MOVLB  0
042E4:  GOTO   4322
042E8:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
042EA:  MOVLB  3
042EC:  MOVF   xCF,W
042EE:  ADDWF  xC0,W
042F0:  MOVWF  FE9
042F2:  MOVLW  00
042F4:  ADDWFC xC1,W
042F6:  MOVWF  FEA
042F8:  MOVFF  FEF,3D6
042FC:  MOVFF  3D6,4C7
04300:  MOVLW  37
04302:  MOVLB  4
04304:  MOVWF  xC8
04306:  MOVLB  0
04308:  CALL   1F0A
0430C:  MOVLW  20
0430E:  MOVLB  8
04310:  MOVWF  x68
04312:  MOVLB  0
04314:  CALL   1CC6
04318:  MOVLB  3
0431A:  INCF   xCF,F
0431C:  MOVLB  0
0431E:  GOTO   42D8
....................    fprintf(PC, "\r\n");
04322:  MOVLW  0D
04324:  MOVLB  8
04326:  MOVWF  x68
04328:  MOVLB  0
0432A:  CALL   1CC6
0432E:  MOVLW  0A
04330:  MOVLB  8
04332:  MOVWF  x68
04334:  MOVLB  0
04336:  CALL   1CC6
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
0433A:  MOVFF  3C1,3D7
0433E:  MOVFF  3C0,3D6
04342:  MOVFF  3C2,3D8
04346:  GOTO   3F44
0434A:  MOVFF  01,3D0
....................    if (frame_start_position == -1)
0434E:  MOVLB  3
04350:  MOVF   xD0,W
04352:  SUBLW  FF
04354:  BTFSC  FD8.2
04356:  BRA    435E
04358:  MOVLB  0
0435A:  GOTO   436C
0435E:  MOVLB  0
....................       return command;
04360:  MOVLW  C3
04362:  MOVWF  01
04364:  MOVLW  03
04366:  MOVWF  02
04368:  GOTO   448E
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0436C:  MOVLB  3
0436E:  MOVF   xD0,W
04370:  ADDWF  xC0,W
04372:  MOVWF  01
04374:  MOVLW  00
04376:  ADDWFC xC1,W
04378:  MOVWF  03
0437A:  MOVF   01,W
0437C:  MOVWF  xD1
0437E:  MOVFF  03,3D2
04382:  MOVF   xD1,W
04384:  MOVWF  FE9
04386:  MOVF   xD2,W
04388:  MOVWF  FEA
0438A:  MOVF   FEF,W
0438C:  ANDLW  0F
0438E:  MOVWF  xD3
04390:  MOVFF  3D3,3D6
04394:  MOVLB  0
04396:  GOTO   3FEC
0439A:  MOVFF  01,3D4
....................    if (content_size == -1)
0439E:  MOVLB  3
043A0:  MOVF   xD4,W
043A2:  SUBLW  FF
043A4:  BTFSC  FD8.2
043A6:  BRA    43AE
043A8:  MOVLB  0
043AA:  GOTO   43BC
043AE:  MOVLB  0
....................       return command;
043B0:  MOVLW  C3
043B2:  MOVWF  01
043B4:  MOVLW  03
043B6:  MOVWF  02
043B8:  GOTO   448E
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
043BC:  MOVLB  3
043BE:  MOVF   xD0,W
043C0:  SUBWF  xC2,W
043C2:  MOVWF  xD5
....................    
....................    if (!check_crc(frame, receive_frame_size))
043C4:  MOVFF  3D2,3D7
043C8:  MOVFF  3D1,3D6
043CC:  MOVFF  3D5,3D8
043D0:  MOVLB  0
043D2:  GOTO   40F2
043D6:  MOVF   01,F
043D8:  BTFSS  FD8.2
043DA:  GOTO   43EA
....................       return command;
043DE:  MOVLW  C3
043E0:  MOVWF  01
043E2:  MOVLW  03
043E4:  MOVWF  02
043E6:  GOTO   448E
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
043EA:  MOVLB  3
043EC:  MOVF   xD1,W
043EE:  MOVWF  FE9
043F0:  MOVF   xD2,W
043F2:  MOVWF  FEA
043F4:  MOVF   FEF,W
043F6:  ANDLW  F0
043F8:  MOVWF  00
043FA:  SWAPF  00,W
043FC:  MOVWF  xD6
043FE:  MOVLW  0F
04400:  ANDWF  xD6,F
04402:  MOVFF  3D6,3D7
04406:  MOVLB  0
04408:  GOTO   41DC
0440C:  MOVF   01,F
0440E:  BTFSS  FD8.2
04410:  GOTO   4420
....................       return command;
04414:  MOVLW  C3
04416:  MOVWF  01
04418:  MOVLW  03
0441A:  MOVWF  02
0441C:  GOTO   448E
.................... 
....................    command.frame_id = frame_id;
04420:  MOVFF  3D3,3C3
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
04424:  MOVLW  01
04426:  MOVLB  3
04428:  ADDWF  xD1,W
0442A:  MOVWF  01
0442C:  MOVLW  00
0442E:  ADDWFC xD2,W
04430:  MOVWF  03
04432:  MOVF   01,W
04434:  MOVWF  xD6
04436:  MOVFF  03,3D7
0443A:  MOVLW  02
0443C:  SUBWF  xD5,W
0443E:  MOVWF  xD8
04440:  MOVLW  03
04442:  MOVWF  FEA
04444:  MOVLW  C6
04446:  MOVWF  FE9
04448:  MOVFF  3D7,FE2
0444C:  MOVFF  3D6,FE1
04450:  MOVF   xD8,W
04452:  MOVWF  01
04454:  BTFSS  FD8.2
04456:  BRA    445E
04458:  MOVLB  0
0445A:  GOTO   446A
0445E:  MOVLB  0
04460:  MOVFF  FE6,FEE
04464:  DECFSZ 01,F
04466:  GOTO   4460
....................    command.size = receive_frame_size-2;
0446A:  MOVLW  02
0446C:  MOVLB  3
0446E:  SUBWF  xD5,W
04470:  MOVWF  xC4
....................    command.is_exist = TRUE;
04472:  BSF    xC5.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
04474:  MOVLW  EE
04476:  MOVWF  FF6
04478:  MOVLW  02
0447A:  MOVWF  FF7
0447C:  MOVLW  00
0447E:  MOVWF  FF8
04480:  MOVLB  0
04482:  CALL   1D18
....................    return command;
04486:  MOVLW  C3
04488:  MOVWF  01
0448A:  MOVLW  03
0448C:  MOVWF  02
0448E:  GOTO   A542 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03F44:  MOVLB  3
03F46:  CLRF   xD9
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03F48:  CLRF   xD9
03F4A:  MOVLB  0
03F4C:  MOVLW  01
03F4E:  MOVLB  3
03F50:  SUBWF  xD8,W
03F52:  SUBWF  xD9,W
03F54:  BTFSS  FD8.0
03F56:  BRA    3F5E
03F58:  MOVLB  0
03F5A:  GOTO   3F96
03F5E:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03F60:  MOVLB  3
03F62:  MOVF   xD9,W
03F64:  ADDWF  xD6,W
03F66:  MOVWF  FE9
03F68:  MOVLW  00
03F6A:  ADDWFC xD7,W
03F6C:  MOVWF  FEA
03F6E:  MOVF   FEF,W
03F70:  SUBLW  AA
03F72:  BTFSC  FD8.2
03F74:  BRA    3F7C
03F76:  MOVLB  0
03F78:  GOTO   3F8C
03F7C:  MOVLB  0
....................          return i+1;
03F7E:  MOVLW  01
03F80:  MOVLB  3
03F82:  ADDWF  xD9,W
03F84:  MOVWF  01
03F86:  MOVLB  0
03F88:  GOTO   3FE8
03F8C:  MOVLB  3
03F8E:  INCF   xD9,F
03F90:  MOVLB  0
03F92:  GOTO   3F4C
....................    if (receive_signal[i] == SFD)
03F96:  MOVLB  3
03F98:  MOVF   xD9,W
03F9A:  ADDWF  xD6,W
03F9C:  MOVWF  FE9
03F9E:  MOVLW  00
03FA0:  ADDWFC xD7,W
03FA2:  MOVWF  FEA
03FA4:  MOVF   FEF,W
03FA6:  SUBLW  AA
03FA8:  BTFSC  FD8.2
03FAA:  BRA    3FB2
03FAC:  MOVLB  0
03FAE:  GOTO   3FD0
03FB2:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03FB4:  MOVLW  0A
03FB6:  MOVWF  FF6
03FB8:  MOVLW  03
03FBA:  MOVWF  FF7
03FBC:  MOVLW  00
03FBE:  MOVWF  FF8
03FC0:  CALL   1D18
....................       return -1;
03FC4:  MOVLW  FF
03FC6:  MOVWF  01
03FC8:  GOTO   3FE8
....................    }
03FCC:  GOTO   3FE8
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03FD0:  MOVLW  20
03FD2:  MOVWF  FF6
03FD4:  MOVLW  03
03FD6:  MOVWF  FF7
03FD8:  MOVLW  00
03FDA:  MOVWF  FF8
03FDC:  CALL   1D18
....................       return -1;
03FE0:  MOVLW  FF
03FE2:  MOVWF  01
03FE4:  GOTO   3FE8
....................    }
03FE8:  GOTO   434A (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03FEC:  MOVLB  3
03FEE:  CLRF   xD7
03FF0:  MOVLB  0
03FF2:  MOVLB  3
03FF4:  MOVF   xD7,W
03FF6:  SUBLW  02
03FF8:  BTFSC  FD8.0
03FFA:  BRA    4002
03FFC:  MOVLB  0
03FFE:  GOTO   4060
04002:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04004:  BCF    FD8.0
04006:  MOVLB  3
04008:  RLCF   xD7,W
0400A:  CLRF   xD9
0400C:  MOVWF  xD8
0400E:  MOVLW  F6
04010:  ADDWF  xD8,W
04012:  MOVWF  FE9
04014:  MOVLW  00
04016:  ADDWFC xD9,W
04018:  MOVWF  FEA
0401A:  MOVF   FEF,W
0401C:  SUBWF  xD6,W
0401E:  BTFSC  FD8.2
04020:  BRA    4028
04022:  MOVLB  0
04024:  GOTO   4056
04028:  MOVLB  0
....................          return frame_ids[i].length;
0402A:  BCF    FD8.0
0402C:  MOVLB  3
0402E:  RLCF   xD7,W
04030:  CLRF   xD9
04032:  MOVWF  xD8
04034:  MOVLW  01
04036:  ADDWF  xD8,W
04038:  MOVWF  01
0403A:  MOVLW  00
0403C:  ADDWFC xD9,W
0403E:  MOVWF  03
04040:  MOVF   01,W
04042:  ADDLW  F6
04044:  MOVWF  FE9
04046:  MOVLW  00
04048:  ADDWFC 03,W
0404A:  MOVWF  FEA
0404C:  MOVF   FEF,W
0404E:  MOVWF  01
04050:  MOVLB  0
04052:  GOTO   40A4
04056:  MOVLB  3
04058:  INCF   xD7,F
0405A:  MOVLB  0
0405C:  GOTO   3FF2
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
04060:  MOVLW  32
04062:  MOVWF  FF6
04064:  MOVLW  03
04066:  MOVWF  FF7
04068:  MOVLW  00
0406A:  MOVWF  FF8
0406C:  MOVLW  1F
0406E:  MOVLB  8
04070:  MOVWF  x25
04072:  MOVLB  0
04074:  CALL   1D48
04078:  MOVFF  3D6,4C7
0407C:  MOVLW  37
0407E:  MOVLB  4
04080:  MOVWF  xC8
04082:  MOVLB  0
04084:  CALL   1F0A
04088:  MOVLW  0D
0408A:  MOVLB  8
0408C:  MOVWF  x68
0408E:  MOVLB  0
04090:  CALL   1CC6
04094:  MOVLW  0A
04096:  MOVLB  8
04098:  MOVWF  x68
0409A:  MOVLB  0
0409C:  CALL   1CC6
....................    return -1;
040A0:  MOVLW  FF
040A2:  MOVWF  01
040A4:  GOTO   439A (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
040F2:  MOVLW  01
040F4:  MOVLB  3
040F6:  SUBWF  xD8,W
040F8:  ADDWF  xD6,W
040FA:  MOVWF  FE9
040FC:  MOVLW  00
040FE:  ADDWFC xD7,W
04100:  MOVWF  FEA
04102:  MOVFF  FEF,3D9
04106:  MOVLW  01
04108:  SUBWF  xD8,W
0410A:  MOVWF  xDB
0410C:  MOVFF  3D7,826
04110:  MOVFF  3D6,825
04114:  MOVFF  3DB,827
04118:  MOVLB  0
0411A:  CALL   40A8
0411E:  MOVFF  01,3DA
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
04122:  MOVLB  3
04124:  MOVF   xDA,W
04126:  SUBWF  xD9,W
04128:  BTFSC  FD8.2
0412A:  BRA    4132
0412C:  MOVLB  0
0412E:  GOTO   4140
04132:  MOVLB  0
....................       return TRUE;
04134:  MOVLW  01
04136:  MOVWF  01
04138:  GOTO   41D8
0413C:  GOTO   41D8
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
04140:  MOVLW  56
04142:  MOVWF  FF6
04144:  MOVLW  03
04146:  MOVWF  FF7
04148:  MOVLW  00
0414A:  MOVWF  FF8
0414C:  CALL   1D18
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
04150:  MOVLW  68
04152:  MOVWF  FF6
04154:  MOVLW  03
04156:  MOVWF  FF7
04158:  MOVLW  00
0415A:  MOVWF  FF8
0415C:  MOVLW  13
0415E:  MOVLB  8
04160:  MOVWF  x25
04162:  MOVLB  0
04164:  CALL   1D48
04168:  MOVFF  3D9,4C7
0416C:  MOVLW  37
0416E:  MOVLB  4
04170:  MOVWF  xC8
04172:  MOVLB  0
04174:  CALL   1F0A
04178:  MOVLW  0D
0417A:  MOVLB  8
0417C:  MOVWF  x68
0417E:  MOVLB  0
04180:  CALL   1CC6
04184:  MOVLW  0A
04186:  MOVLB  8
04188:  MOVWF  x68
0418A:  MOVLB  0
0418C:  CALL   1CC6
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
04190:  MOVLW  80
04192:  MOVWF  FF6
04194:  MOVLW  03
04196:  MOVWF  FF7
04198:  MOVLW  00
0419A:  MOVWF  FF8
0419C:  MOVLW  13
0419E:  MOVLB  8
041A0:  MOVWF  x25
041A2:  MOVLB  0
041A4:  CALL   1D48
041A8:  MOVFF  3DA,4C7
041AC:  MOVLW  37
041AE:  MOVLB  4
041B0:  MOVWF  xC8
041B2:  MOVLB  0
041B4:  CALL   1F0A
041B8:  MOVLW  0D
041BA:  MOVLB  8
041BC:  MOVWF  x68
041BE:  MOVLB  0
041C0:  CALL   1CC6
041C4:  MOVLW  0A
041C6:  MOVLB  8
041C8:  MOVWF  x68
041CA:  MOVLB  0
041CC:  CALL   1CC6
....................       return FALSE;
041D0:  MOVLW  00
041D2:  MOVWF  01
041D4:  GOTO   41D8
....................    }
041D8:  GOTO   43D6 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
041DC:  MOVLB  3
041DE:  MOVF   xD7,W
041E0:  SUBLW  0C
041E2:  BTFSC  FD8.2
041E4:  BRA    41EC
041E6:  MOVLB  0
041E8:  GOTO   41FA
041EC:  MOVLB  0
....................       return TRUE;
041EE:  MOVLW  01
041F0:  MOVWF  01
041F2:  GOTO   4292
041F6:  GOTO   4292
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
041FA:  MOVLW  98
041FC:  MOVWF  FF6
041FE:  MOVLW  03
04200:  MOVWF  FF7
04202:  MOVLW  00
04204:  MOVWF  FF8
04206:  CALL   1D18
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
0420A:  MOVLW  BA
0420C:  MOVWF  FF6
0420E:  MOVLW  03
04210:  MOVWF  FF7
04212:  MOVLW  00
04214:  MOVWF  FF8
04216:  MOVLW  13
04218:  MOVLB  8
0421A:  MOVWF  x25
0421C:  MOVLB  0
0421E:  CALL   1D48
04222:  MOVFF  3D7,4C7
04226:  MOVLW  37
04228:  MOVLB  4
0422A:  MOVWF  xC8
0422C:  MOVLB  0
0422E:  CALL   1F0A
04232:  MOVLW  0D
04234:  MOVLB  8
04236:  MOVWF  x68
04238:  MOVLB  0
0423A:  CALL   1CC6
0423E:  MOVLW  0A
04240:  MOVLB  8
04242:  MOVWF  x68
04244:  MOVLB  0
04246:  CALL   1CC6
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0424A:  MOVLW  D2
0424C:  MOVWF  FF6
0424E:  MOVLW  03
04250:  MOVWF  FF7
04252:  MOVLW  00
04254:  MOVWF  FF8
04256:  MOVLW  13
04258:  MOVLB  8
0425A:  MOVWF  x25
0425C:  MOVLB  0
0425E:  CALL   1D48
04262:  MOVLW  0C
04264:  MOVLB  4
04266:  MOVWF  xC7
04268:  MOVLW  37
0426A:  MOVWF  xC8
0426C:  MOVLB  0
0426E:  CALL   1F0A
04272:  MOVLW  0D
04274:  MOVLB  8
04276:  MOVWF  x68
04278:  MOVLB  0
0427A:  CALL   1CC6
0427E:  MOVLW  0A
04280:  MOVLB  8
04282:  MOVWF  x68
04284:  MOVLB  0
04286:  CALL   1CC6
....................       return FALSE;  
0428A:  MOVLW  00
0428C:  MOVWF  01
0428E:  GOTO   4292
....................    }
04292:  GOTO   440C (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
045BC:  MOVLW  AA
045BE:  MOVLB  3
045C0:  MOVWF  xC6
....................    data[1] = (BOSS_PIC << 4) | frame_id;
045C2:  MOVF   xC2,W
045C4:  IORLW  50
045C6:  MOVWF  xC7
....................    memcpy(&data[2], content, size);
045C8:  MOVLW  03
045CA:  MOVWF  FEA
045CC:  MOVLW  C8
045CE:  MOVWF  FE9
045D0:  MOVFF  3C4,FE2
045D4:  MOVFF  3C3,FE1
045D8:  MOVF   xC5,W
045DA:  MOVWF  01
045DC:  BTFSS  FD8.2
045DE:  BRA    45E6
045E0:  MOVLB  0
045E2:  GOTO   45F2
045E6:  MOVLB  0
045E8:  MOVFF  FE6,FEE
045EC:  DECFSZ 01,F
045EE:  GOTO   45E8
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
045F2:  MOVLW  02
045F4:  MOVLB  3
045F6:  ADDWF  xC5,W
045F8:  MOVWF  xD6
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
045FA:  CLRF   03
045FC:  MOVF   xD6,W
045FE:  ADDLW  C6
04600:  MOVWF  01
04602:  MOVLW  03
04604:  ADDWFC 03,F
04606:  MOVF   01,W
04608:  MOVWF  xD8
0460A:  MOVFF  03,3D9
0460E:  MOVLW  01
04610:  SUBWF  xD6,W
04612:  MOVWF  xDA
04614:  MOVLW  03
04616:  MOVLB  8
04618:  MOVWF  x26
0461A:  MOVLW  C7
0461C:  MOVWF  x25
0461E:  MOVFF  3DA,827
04622:  MOVLB  0
04624:  CALL   40A8
04628:  MOVFF  3D9,FEA
0462C:  MOVFF  3D8,FE9
04630:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
04634:  MOVLW  01
04636:  MOVLB  3
04638:  ADDWF  xD6,W
0463A:  MOVWF  xD7
....................    
....................    transmit(data, data_size);
0463C:  MOVLW  03
0463E:  MOVWF  xD9
04640:  MOVLW  C6
04642:  MOVWF  xD8
04644:  MOVFF  3D7,3DA
04648:  MOVLB  0
0464A:  GOTO   4504
0464E:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
04504:  MOVLB  3
04506:  CLRF   xDB
04508:  MOVLB  0
0450A:  MOVLB  3
0450C:  MOVF   xDA,W
0450E:  SUBWF  xDB,W
04510:  BTFSS  FD8.0
04512:  BRA    451A
04514:  MOVLB  0
04516:  GOTO   4540
0451A:  MOVLB  0
....................       fputc(data[i], BOSS);
0451C:  MOVLB  3
0451E:  MOVF   xDB,W
04520:  ADDWF  xD8,W
04522:  MOVWF  FE9
04524:  MOVLW  00
04526:  ADDWFC xD9,W
04528:  MOVWF  FEA
0452A:  MOVFF  FEF,3DD
0452E:  MOVF   xDD,W
04530:  MOVLB  0
04532:  GOTO   44F4
04536:  MOVLB  3
04538:  INCF   xDB,F
0453A:  MOVLB  0
0453C:  GOTO   450A
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04540:  MOVLW  EA
04542:  MOVWF  FF6
04544:  MOVLW  03
04546:  MOVWF  FF7
04548:  MOVLW  00
0454A:  MOVWF  FF8
0454C:  CALL   1D18
....................    for(int i = 0; i < data_size; i++)
04550:  MOVLB  3
04552:  CLRF   xDC
04554:  MOVLB  0
04556:  MOVLB  3
04558:  MOVF   xDA,W
0455A:  SUBWF  xDC,W
0455C:  BTFSS  FD8.0
0455E:  BRA    4566
04560:  MOVLB  0
04562:  GOTO   45A0
04566:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
04568:  MOVLB  3
0456A:  MOVF   xDC,W
0456C:  ADDWF  xD8,W
0456E:  MOVWF  FE9
04570:  MOVLW  00
04572:  ADDWFC xD9,W
04574:  MOVWF  FEA
04576:  MOVFF  FEF,3DD
0457A:  MOVFF  3DD,4C7
0457E:  MOVLW  37
04580:  MOVLB  4
04582:  MOVWF  xC8
04584:  MOVLB  0
04586:  CALL   1F0A
0458A:  MOVLW  20
0458C:  MOVLB  8
0458E:  MOVWF  x68
04590:  MOVLB  0
04592:  CALL   1CC6
04596:  MOVLB  3
04598:  INCF   xDC,F
0459A:  MOVLB  0
0459C:  GOTO   4556
....................    fprintf(PC, "\r\n");
045A0:  MOVLW  0D
045A2:  MOVLB  8
045A4:  MOVWF  x68
045A6:  MOVLB  0
045A8:  CALL   1CC6
045AC:  MOVLW  0A
045AE:  MOVLB  8
045B0:  MOVWF  x68
045B2:  MOVLB  0
045B4:  CALL   1CC6
045B8:  GOTO   464E (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04650:  MOVLW  0F
04652:  MOVLB  3
04654:  MOVWF  xC2
04656:  CLRF   xC4
04658:  CLRF   xC3
0465A:  CLRF   xC5
0465C:  MOVLB  0
0465E:  CALL   45BC
04662:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
07D60:  MOVLW  03
07D62:  MOVLB  3
07D64:  MOVWF  xC2
07D66:  CLRF   xC4
07D68:  MOVLW  48
07D6A:  MOVWF  xC3
07D6C:  MOVLW  04
07D6E:  MOVWF  xC5
07D70:  MOVLB  0
07D72:  CALL   45BC
07D76:  GOTO   7D9E (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_func.c"
.................... #include "mmj_cigs_func.h"               // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
04C4C:  MOVLW  5A
04C4E:  MOVWF  FF6
04C50:  MOVLW  05
04C52:  MOVWF  FF7
04C54:  MOVLW  00
04C56:  MOVWF  FF8
04C58:  CALL   1D18
....................     output_high(CONNECT_CIGS1);
04C5C:  BCF    F94.0
04C5E:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04C60:  BCF    F94.7
04C62:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
04C64:  MOVLW  85
04C66:  MOVWF  00
04C68:  DECFSZ 00,F
04C6A:  BRA    4C68
....................     fprintf(PC, "step, voltage, current\r\n");
04C6C:  MOVLW  6E
04C6E:  MOVWF  FF6
04C70:  MOVLW  05
04C72:  MOVWF  FF7
04C74:  MOVLW  00
04C76:  MOVWF  FF8
04C78:  CALL   1D18
....................     mcp4901_1_write(0); // Initialize DAC to 0
04C7C:  MOVLB  8
04C7E:  CLRF   x26
04C80:  CLRF   x25
04C82:  MOVLB  0
04C84:  CALL   4AE4
....................     delay_ms(100); // wait for the DAC to stabilize
04C88:  MOVLW  64
04C8A:  MOVLB  8
04C8C:  MOVWF  x7D
04C8E:  MOVLB  0
04C90:  CALL   1C98
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
04C94:  MOVLB  3
04C96:  CLRF   xCD
04C98:  MOVLB  0
04C9A:  MOVLB  3
04C9C:  MOVF   xC8,W
04C9E:  SUBWF  xCD,W
04CA0:  BTFSS  FD8.0
04CA2:  BRA    4CAA
04CA4:  MOVLB  0
04CA6:  GOTO   4D70
04CAA:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04CAC:  MOVLB  8
04CAE:  CLRF   x26
04CB0:  MOVFF  3CD,825
04CB4:  MOVLB  0
04CB6:  CALL   4AE4
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
04CBA:  MOVLW  02
04CBC:  MOVLB  8
04CBE:  MOVWF  x27
04CC0:  MOVLB  0
04CC2:  CALL   1E7E
04CC6:  MOVFF  02,3CA
04CCA:  MOVFF  01,3C9
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
04CCE:  MOVLW  01
04CD0:  MOVLB  8
04CD2:  MOVWF  x27
04CD4:  MOVLB  0
04CD6:  CALL   1E7E
04CDA:  MOVFF  02,3CC
04CDE:  MOVFF  01,3CB
....................         
....................         printf("%u, %lu, %lu\r\n", count, volt, curr);
04CE2:  MOVFF  3CD,825
04CE6:  MOVLW  1B
04CE8:  MOVLB  8
04CEA:  MOVWF  x26
04CEC:  MOVLB  0
04CEE:  CALL   48E4
04CF2:  MOVLW  2C
04CF4:  MOVLB  8
04CF6:  MOVWF  x68
04CF8:  MOVLB  0
04CFA:  CALL   1CC6
04CFE:  MOVLW  20
04D00:  MOVLB  8
04D02:  MOVWF  x68
04D04:  MOVLB  0
04D06:  CALL   1CC6
04D0A:  MOVLW  10
04D0C:  MOVWF  FE9
04D0E:  MOVFF  3CA,3CF
04D12:  MOVFF  3C9,3CE
04D16:  CALL   4B22
04D1A:  MOVLW  2C
04D1C:  MOVLB  8
04D1E:  MOVWF  x68
04D20:  MOVLB  0
04D22:  CALL   1CC6
04D26:  MOVLW  20
04D28:  MOVLB  8
04D2A:  MOVWF  x68
04D2C:  MOVLB  0
04D2E:  CALL   1CC6
04D32:  MOVLW  10
04D34:  MOVWF  FE9
04D36:  MOVFF  3CC,3CF
04D3A:  MOVFF  3CB,3CE
04D3E:  CALL   4B22
04D42:  MOVLW  0D
04D44:  MOVLB  8
04D46:  MOVWF  x68
04D48:  MOVLB  0
04D4A:  CALL   1CC6
04D4E:  MOVLW  0A
04D50:  MOVLB  8
04D52:  MOVWF  x68
04D54:  MOVLB  0
04D56:  CALL   1CC6
....................         delay_ms(1); // wait for the ADC to stabilize
04D5A:  MOVLW  01
04D5C:  MOVLB  8
04D5E:  MOVWF  x7D
04D60:  MOVLB  0
04D62:  CALL   1C98
04D66:  MOVLB  3
04D68:  INCF   xCD,F
04D6A:  MOVLB  0
04D6C:  GOTO   4C9A
....................     }
04D70:  GOTO   4DE8 (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
04E04:  MOVLB  8
04E06:  CLRF   x26
04E08:  CLRF   x25
04E0A:  MOVLB  0
04E0C:  CALL   4AE4
....................     fprintf(PC, "Start ADC TEST\r\n");
04E10:  MOVLW  88
04E12:  MOVWF  FF6
04E14:  MOVLW  05
04E16:  MOVWF  FF7
04E18:  MOVLW  00
04E1A:  MOVWF  FF8
04E1C:  CALL   1D18
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
04E20:  MOVLB  8
04E22:  CLRF   x27
04E24:  MOVLB  0
04E26:  CALL   1E7E
04E2A:  MOVFF  02,3C4
04E2E:  MOVFF  01,3C3
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04E32:  MOVLW  9A
04E34:  MOVWF  FF6
04E36:  MOVLW  05
04E38:  MOVWF  FF7
04E3A:  MOVLW  00
04E3C:  MOVWF  FF8
04E3E:  MOVLW  0D
04E40:  MOVLB  8
04E42:  MOVWF  x25
04E44:  MOVLB  0
04E46:  CALL   1D48
04E4A:  MOVFF  3C4,4C7
04E4E:  MOVLW  37
04E50:  MOVLB  4
04E52:  MOVWF  xC8
04E54:  MOVLB  0
04E56:  CALL   1F0A
04E5A:  MOVFF  3C3,4C7
04E5E:  MOVLW  37
04E60:  MOVLB  4
04E62:  MOVWF  xC8
04E64:  MOVLB  0
04E66:  CALL   1F0A
04E6A:  MOVLW  0D
04E6C:  MOVLB  8
04E6E:  MOVWF  x68
04E70:  MOVLB  0
04E72:  CALL   1CC6
04E76:  MOVLW  0A
04E78:  MOVLB  8
04E7A:  MOVWF  x68
04E7C:  MOVLB  0
04E7E:  CALL   1CC6
....................     ans = ad7490_read(ADC_CIGS1_CURR);
04E82:  MOVLW  01
04E84:  MOVLB  8
04E86:  MOVWF  x27
04E88:  MOVLB  0
04E8A:  CALL   1E7E
04E8E:  MOVFF  02,3C4
04E92:  MOVFF  01,3C3
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04E96:  MOVLW  B0
04E98:  MOVWF  FF6
04E9A:  MOVLW  05
04E9C:  MOVWF  FF7
04E9E:  MOVLW  00
04EA0:  MOVWF  FF8
04EA2:  MOVLW  0D
04EA4:  MOVLB  8
04EA6:  MOVWF  x25
04EA8:  MOVLB  0
04EAA:  CALL   1D48
04EAE:  MOVFF  3C4,4C7
04EB2:  MOVLW  37
04EB4:  MOVLB  4
04EB6:  MOVWF  xC8
04EB8:  MOVLB  0
04EBA:  CALL   1F0A
04EBE:  MOVFF  3C3,4C7
04EC2:  MOVLW  37
04EC4:  MOVLB  4
04EC6:  MOVWF  xC8
04EC8:  MOVLB  0
04ECA:  CALL   1F0A
04ECE:  MOVLW  0D
04ED0:  MOVLB  8
04ED2:  MOVWF  x68
04ED4:  MOVLB  0
04ED6:  CALL   1CC6
04EDA:  MOVLW  0A
04EDC:  MOVLB  8
04EDE:  MOVWF  x68
04EE0:  MOVLB  0
04EE2:  CALL   1CC6
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04EE6:  MOVLW  02
04EE8:  MOVLB  8
04EEA:  MOVWF  x27
04EEC:  MOVLB  0
04EEE:  CALL   1E7E
04EF2:  MOVFF  02,3C4
04EF6:  MOVFF  01,3C3
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
04EFA:  MOVLW  C6
04EFC:  MOVWF  FF6
04EFE:  MOVLW  05
04F00:  MOVWF  FF7
04F02:  MOVLW  00
04F04:  MOVWF  FF8
04F06:  MOVLW  0F
04F08:  MOVLB  8
04F0A:  MOVWF  x25
04F0C:  MOVLB  0
04F0E:  CALL   1D48
04F12:  MOVFF  3C4,4C7
04F16:  MOVLW  37
04F18:  MOVLB  4
04F1A:  MOVWF  xC8
04F1C:  MOVLB  0
04F1E:  CALL   1F0A
04F22:  MOVFF  3C3,4C7
04F26:  MOVLW  37
04F28:  MOVLB  4
04F2A:  MOVWF  xC8
04F2C:  MOVLB  0
04F2E:  CALL   1F0A
04F32:  MOVLW  0D
04F34:  MOVLB  8
04F36:  MOVWF  x68
04F38:  MOVLB  0
04F3A:  CALL   1CC6
04F3E:  MOVLW  0A
04F40:  MOVLB  8
04F42:  MOVWF  x68
04F44:  MOVLB  0
04F46:  CALL   1CC6
....................     ans = ad7490_read(ADC_CIGS1_VREF);
04F4A:  MOVLW  03
04F4C:  MOVLB  8
04F4E:  MOVWF  x27
04F50:  MOVLB  0
04F52:  CALL   1E7E
04F56:  MOVFF  02,3C4
04F5A:  MOVFF  01,3C3
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04F5E:  MOVLW  DE
04F60:  MOVWF  FF6
04F62:  MOVLW  05
04F64:  MOVWF  FF7
04F66:  MOVLW  00
04F68:  MOVWF  FF8
04F6A:  MOVLW  10
04F6C:  MOVLB  8
04F6E:  MOVWF  x25
04F70:  MOVLB  0
04F72:  CALL   1D48
04F76:  MOVFF  3C4,4C7
04F7A:  MOVLW  37
04F7C:  MOVLB  4
04F7E:  MOVWF  xC8
04F80:  MOVLB  0
04F82:  CALL   1F0A
04F86:  MOVFF  3C3,4C7
04F8A:  MOVLW  37
04F8C:  MOVLB  4
04F8E:  MOVWF  xC8
04F90:  MOVLB  0
04F92:  CALL   1F0A
04F96:  MOVLW  0D
04F98:  MOVLB  8
04F9A:  MOVWF  x68
04F9C:  MOVLB  0
04F9E:  CALL   1CC6
04FA2:  MOVLW  0A
04FA4:  MOVLB  8
04FA6:  MOVWF  x68
04FA8:  MOVLB  0
04FAA:  CALL   1CC6
04FAE:  GOTO   7B82 (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
04FB2:  MOVLW  50
04FB4:  MOVWF  FF6
04FB6:  MOVLW  06
04FB8:  MOVWF  FF7
04FBA:  MOVLW  00
04FBC:  MOVWF  FF8
04FBE:  CALL   1D18
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04FC2:  MOVLW  64
04FC4:  MOVWF  FF6
04FC6:  MOVLW  06
04FC8:  MOVWF  FF7
04FCA:  MOVLW  00
04FCC:  MOVWF  FF8
04FCE:  MOVLW  0E
04FD0:  MOVLB  8
04FD2:  MOVWF  x25
04FD4:  MOVLB  0
04FD6:  CALL   1D48
04FDA:  MOVFF  3CF,825
04FDE:  MOVLW  1B
04FE0:  MOVLB  8
04FE2:  MOVWF  x26
04FE4:  MOVLB  0
04FE6:  CALL   48E4
04FEA:  MOVLW  0D
04FEC:  MOVLB  8
04FEE:  MOVWF  x68
04FF0:  MOVLB  0
04FF2:  CALL   1CC6
04FF6:  MOVLW  0A
04FF8:  MOVLB  8
04FFA:  MOVWF  x68
04FFC:  MOVLB  0
04FFE:  CALL   1CC6
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
05002:  BCF    F94.0
05004:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
05006:  BCF    F94.5
05008:  BCF    F8B.5
....................     output_low(EN_NPWR); 
0500A:  BCF    F94.7
0500C:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
0500E:  CALL   3146
05012:  MOVFF  03,3D3
05016:  MOVFF  02,3D2
0501A:  MOVFF  01,3D1
0501E:  MOVFF  00,3D0
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
05022:  MOVLW  0D
05024:  MOVLB  8
05026:  MOVWF  x27
05028:  MOVLB  0
0502A:  CALL   1E7E
0502E:  MOVFF  02,3D5
05032:  MOVFF  01,3D4
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
05036:  MOVLW  0E
05038:  MOVLB  8
0503A:  MOVWF  x27
0503C:  MOVLB  0
0503E:  CALL   1E7E
05042:  MOVFF  02,3D7
05046:  MOVFF  01,3D6
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
0504A:  MOVLW  0C
0504C:  MOVLB  8
0504E:  MOVWF  x27
05050:  MOVLB  0
05052:  CALL   1E7E
05056:  MOVFF  02,3D9
0505A:  MOVFF  01,3D8
....................     measured_data.pd = ad7490_read(ADC_PD); 
0505E:  MOVLW  0F
05060:  MOVLB  8
05062:  MOVWF  x27
05064:  MOVLB  0
05066:  CALL   1E7E
0506A:  MOVFF  02,3DB
0506E:  MOVFF  01,3DA
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
05072:  MOVLB  7
05074:  CLRF   xD8
05076:  MOVLB  0
05078:  MOVLB  3
0507A:  MOVF   xCF,W
0507C:  MOVLB  7
0507E:  SUBWF  xD8,W
05080:  BTFSS  FD8.0
05082:  BRA    508A
05084:  MOVLB  0
05086:  GOTO   512C
0508A:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
0508C:  MOVLB  8
0508E:  CLRF   x26
05090:  MOVFF  7D8,825
05094:  MOVLB  0
05096:  CALL   4AE4
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
0509A:  MOVLW  0A
0509C:  MOVLB  8
0509E:  MOVWF  x7D
050A0:  MOVLB  0
050A2:  CALL   1C98
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
050A6:  CLRF   03
050A8:  MOVLB  7
050AA:  MOVF   xD8,W
050AC:  MOVWF  02
050AE:  BCF    FD8.0
050B0:  RLCF   02,F
050B2:  RLCF   03,F
050B4:  MOVF   02,W
050B6:  ADDLW  DC
050B8:  MOVWF  01
050BA:  MOVLW  03
050BC:  ADDWFC 03,F
050BE:  MOVF   01,W
050C0:  MOVLB  8
050C2:  MOVWF  x25
050C4:  MOVFF  03,826
050C8:  MOVLW  02
050CA:  MOVWF  x27
050CC:  MOVLB  0
050CE:  CALL   1E7E
050D2:  MOVFF  826,FEA
050D6:  MOVFF  825,FE9
050DA:  MOVFF  02,FEC
050DE:  MOVF   FED,F
050E0:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
050E4:  CLRF   03
050E6:  MOVLB  7
050E8:  MOVF   xD8,W
050EA:  MOVWF  02
050EC:  BCF    FD8.0
050EE:  RLCF   02,F
050F0:  RLCF   03,F
050F2:  MOVF   02,W
050F4:  ADDLW  DA
050F6:  MOVWF  01
050F8:  MOVLW  05
050FA:  ADDWFC 03,F
050FC:  MOVF   01,W
050FE:  MOVLB  8
05100:  MOVWF  x25
05102:  MOVFF  03,826
05106:  MOVLW  01
05108:  MOVWF  x27
0510A:  MOVLB  0
0510C:  CALL   1E7E
05110:  MOVFF  826,FEA
05114:  MOVFF  825,FE9
05118:  MOVFF  02,FEC
0511C:  MOVF   FED,F
0511E:  MOVFF  01,FEF
05122:  MOVLB  7
05124:  INCF   xD8,F
05126:  MOVLB  0
05128:  GOTO   5078
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
0512C:  BCF    F94.0
0512E:  BCF    F8B.0
....................     output_high(EN_NPWR);
05130:  BCF    F94.7
05132:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
05134:  MOVLW  78
05136:  MOVWF  FF6
05138:  MOVLW  06
0513A:  MOVWF  FF7
0513C:  MOVLW  00
0513E:  MOVWF  FF8
05140:  CALL   1D18
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
05144:  MOVLW  8A
05146:  MOVWF  FF6
05148:  MOVLW  06
0514A:  MOVWF  FF7
0514C:  MOVLW  00
0514E:  MOVWF  FF8
05150:  CALL   1D18
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
05154:  MOVLB  7
05156:  CLRF   xD9
05158:  CLRF   xDA
0515A:  CLRF   xDB
0515C:  CLRF   xDC
0515E:  CLRF   xDD
05160:  CLRF   xDE
05162:  CLRF   xDF
05164:  CLRF   xE0
05166:  CLRF   xE1
05168:  CLRF   xE2
0516A:  CLRF   xE3
0516C:  CLRF   xE4
0516E:  CLRF   xE5
05170:  CLRF   xE6
05172:  CLRF   xE7
05174:  CLRF   xE8
05176:  CLRF   xE9
05178:  CLRF   xEA
0517A:  CLRF   xEB
0517C:  CLRF   xEC
0517E:  CLRF   xED
05180:  CLRF   xEE
05182:  CLRF   xEF
05184:  CLRF   xF0
05186:  CLRF   xF1
05188:  CLRF   xF2
0518A:  CLRF   xF3
0518C:  CLRF   xF4
0518E:  CLRF   xF5
05190:  CLRF   xF6
05192:  CLRF   xF7
05194:  CLRF   xF8
05196:  CLRF   xF9
05198:  CLRF   xFA
0519A:  CLRF   xFB
0519C:  CLRF   xFC
0519E:  CLRF   xFD
051A0:  CLRF   xFE
051A2:  CLRF   xFF
051A4:  MOVLB  8
051A6:  CLRF   x00
051A8:  CLRF   x01
051AA:  CLRF   x02
051AC:  CLRF   x03
051AE:  CLRF   x04
051B0:  CLRF   x05
051B2:  CLRF   x06
051B4:  CLRF   x07
051B6:  CLRF   x08
051B8:  CLRF   x09
051BA:  CLRF   x0A
051BC:  CLRF   x0B
051BE:  CLRF   x0C
051C0:  CLRF   x0D
051C2:  CLRF   x0E
051C4:  CLRF   x0F
051C6:  CLRF   x10
051C8:  CLRF   x11
051CA:  CLRF   x12
051CC:  CLRF   x13
051CE:  CLRF   x14
051D0:  CLRF   x15
051D2:  CLRF   x16
051D4:  CLRF   x17
051D6:  CLRF   x18
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
051D8:  CLRF   x19
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
051DA:  CLRF   x1B
051DC:  CLRF   x1A
051DE:  MOVLB  0
051E0:  MOVLB  8
051E2:  MOVF   x1B,F
051E4:  BTFSC  FD8.2
051E6:  BRA    51EE
051E8:  MOVLB  0
051EA:  GOTO   5422
051EE:  MOVLB  0
051F0:  MOVLB  3
051F2:  MOVF   xCF,W
051F4:  MOVLB  8
051F6:  SUBWF  x1A,W
051F8:  BTFSS  FD8.0
051FA:  BRA    5202
051FC:  MOVLB  0
051FE:  GOTO   5422
05202:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
05204:  CLRF   03
05206:  MOVLB  8
05208:  MOVF   x19,W
0520A:  ADDLW  D9
0520C:  MOVWF  01
0520E:  MOVLW  07
05210:  ADDWFC 03,F
05212:  MOVF   01,W
05214:  MOVWF  x25
05216:  MOVFF  03,826
0521A:  BCF    FD8.0
0521C:  RLCF   x1A,W
0521E:  MOVWF  02
05220:  RLCF   x1B,W
05222:  MOVWF  03
05224:  MOVF   02,W
05226:  ADDLW  DC
05228:  MOVWF  FE9
0522A:  MOVLW  03
0522C:  ADDWFC 03,W
0522E:  MOVWF  FEA
05230:  MOVFF  FEC,828
05234:  MOVF   FED,F
05236:  MOVFF  FEF,827
0523A:  RRCF   x28,F
0523C:  RRCF   x27,F
0523E:  RRCF   x28,F
05240:  RRCF   x27,F
05242:  RRCF   x28,F
05244:  RRCF   x27,F
05246:  RRCF   x28,F
05248:  RRCF   x27,F
0524A:  MOVLW  0F
0524C:  ANDWF  x28,F
0524E:  MOVF   x27,W
05250:  MOVWF  00
05252:  CLRF   03
05254:  MOVF   00,W
05256:  MOVWF  x27
05258:  MOVFF  03,828
0525C:  MOVFF  826,FEA
05260:  MOVFF  825,FE9
05264:  MOVFF  827,FEF
....................         packetdata_index++; 
05268:  INCF   x19,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
0526A:  CLRF   03
0526C:  MOVF   x19,W
0526E:  ADDLW  D9
05270:  MOVWF  01
05272:  MOVLW  07
05274:  ADDWFC 03,F
05276:  MOVF   01,W
05278:  MOVWF  x25
0527A:  MOVFF  03,826
0527E:  BCF    FD8.0
05280:  RLCF   x1A,W
05282:  MOVWF  02
05284:  RLCF   x1B,W
05286:  MOVWF  03
05288:  MOVF   02,W
0528A:  ADDLW  DC
0528C:  MOVWF  FE9
0528E:  MOVLW  03
05290:  ADDWFC 03,W
05292:  MOVWF  FEA
05294:  MOVFF  FEC,828
05298:  MOVF   FED,F
0529A:  MOVFF  FEF,827
0529E:  MOVLW  0F
052A0:  ANDWF  x27,F
052A2:  CLRF   x28
052A4:  RLCF   x27,F
052A6:  RLCF   x28,F
052A8:  RLCF   x27,F
052AA:  RLCF   x28,F
052AC:  RLCF   x27,F
052AE:  RLCF   x28,F
052B0:  RLCF   x27,F
052B2:  RLCF   x28,F
052B4:  MOVLW  F0
052B6:  ANDWF  x27,F
052B8:  BCF    FD8.0
052BA:  RLCF   x1A,W
052BC:  MOVWF  02
052BE:  RLCF   x1B,W
052C0:  MOVWF  03
052C2:  MOVF   02,W
052C4:  ADDLW  DA
052C6:  MOVWF  FE9
052C8:  MOVLW  05
052CA:  ADDWFC 03,W
052CC:  MOVWF  FEA
052CE:  MOVFF  FEC,82A
052D2:  MOVF   FED,F
052D4:  MOVFF  FEF,829
052D8:  MOVFF  82A,829
052DC:  CLRF   x2A
052DE:  MOVF   x29,W
052E0:  ANDLW  0F
052E2:  MOVWF  00
052E4:  CLRF   03
052E6:  MOVF   00,W
052E8:  IORWF  x27,W
052EA:  MOVWF  00
052EC:  MOVF   03,W
052EE:  IORWF  x28,W
052F0:  MOVWF  03
052F2:  MOVF   00,W
052F4:  MOVWF  x27
052F6:  MOVFF  03,828
052FA:  MOVFF  826,FEA
052FE:  MOVFF  825,FE9
05302:  MOVFF  827,FEF
....................         packetdata_index++; 
05306:  INCF   x19,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
05308:  CLRF   03
0530A:  MOVF   x19,W
0530C:  ADDLW  D9
0530E:  MOVWF  01
05310:  MOVLW  07
05312:  ADDWFC 03,F
05314:  MOVF   01,W
05316:  MOVWF  x25
05318:  MOVFF  03,826
0531C:  BCF    FD8.0
0531E:  RLCF   x1A,W
05320:  MOVWF  02
05322:  RLCF   x1B,W
05324:  MOVWF  03
05326:  MOVF   02,W
05328:  ADDLW  DA
0532A:  MOVWF  FE9
0532C:  MOVLW  05
0532E:  ADDWFC 03,W
05330:  MOVWF  FEA
05332:  MOVFF  FEC,828
05336:  MOVF   FED,F
05338:  MOVFF  FEF,827
0533C:  MOVF   x27,W
0533E:  MOVWF  00
05340:  CLRF   03
05342:  MOVF   00,W
05344:  MOVWF  x27
05346:  MOVFF  03,828
0534A:  MOVFF  826,FEA
0534E:  MOVFF  825,FE9
05352:  MOVFF  827,FEF
....................         packetdata_index++; 
05356:  INCF   x19,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
05358:  MOVF   x19,W
0535A:  SUBLW  3F
0535C:  BTFSC  FD8.2
0535E:  BRA    5366
05360:  MOVLB  0
05362:  GOTO   5414
05366:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
05368:  MOVLW  07
0536A:  MOVLB  8
0536C:  MOVWF  x26
0536E:  MOVLW  D9
05370:  MOVWF  x25
05372:  MOVLW  3F
05374:  MOVWF  x27
05376:  MOVLB  0
05378:  CALL   40A8
0537C:  MOVFF  01,818
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
05380:  MOVLB  3
05382:  MOVF   x74,W
05384:  MOVLB  8
05386:  MOVWF  x1C
05388:  MOVLB  3
0538A:  MOVF   x75,W
0538C:  MOVLB  8
0538E:  MOVWF  x1D
05390:  MOVLW  16
05392:  MOVLB  3
05394:  ADDWF  x76,W
05396:  MOVLB  8
05398:  MOVWF  x1E
0539A:  MOVLW  00
0539C:  MOVLB  3
0539E:  ADDWFC x77,W
053A0:  MOVLB  8
053A2:  MOVWF  x1F
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
053A4:  MOVFF  F1,868
053A8:  MOVFF  F0,867
053AC:  MOVFF  EF,866
053B0:  MOVFF  EE,865
053B4:  MOVFF  81F,86C
053B8:  MOVFF  81E,86B
053BC:  MOVFF  81D,86A
053C0:  MOVFF  81C,869
053C4:  MOVLW  07
053C6:  MOVWF  x6E
053C8:  MOVLW  D9
053CA:  MOVWF  x6D
053CC:  CLRF   x70
053CE:  MOVLW  40
053D0:  MOVWF  x6F
053D2:  MOVLB  0
053D4:  CALL   344C
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
053D8:  MOVLW  40
053DA:  MOVLB  3
053DC:  ADDWF  x74,F
053DE:  MOVLW  00
053E0:  ADDWFC x75,F
053E2:  MOVLW  00
053E4:  ADDWFC x76,F
053E6:  MOVLW  00
053E8:  ADDWFC x77,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
053EA:  MOVLW  40
053EC:  ADDWF  x79,F
053EE:  MOVLW  00
053F0:  ADDWFC x7A,F
053F2:  MOVLW  00
053F4:  ADDWFC x7B,F
053F6:  MOVLW  00
053F8:  ADDWFC x7C,F
....................             packetdata_index = 0; // Reset packet byte counter
053FA:  MOVLB  8
053FC:  CLRF   x19
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
053FE:  MOVLW  07
05400:  MOVWF  FEA
05402:  MOVLW  D9
05404:  MOVWF  FE9
05406:  CLRF   00
05408:  CLRF   02
0540A:  MOVLW  40
0540C:  MOVWF  01
0540E:  MOVLB  0
05410:  CALL   4492
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
05414:  MOVLB  8
05416:  INCF   x1A,F
05418:  BTFSC  FD8.2
0541A:  INCF   x1B,F
0541C:  MOVLB  0
0541E:  GOTO   51E0
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
05422:  MOVLB  8
05424:  MOVF   x19,W
05426:  SUBLW  3E
05428:  BTFSC  FD8.0
0542A:  BRA    5432
0542C:  MOVLB  0
0542E:  GOTO   54E4
05432:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
05434:  MOVFF  819,820
05438:  MOVLB  8
0543A:  MOVF   x20,W
0543C:  SUBLW  3E
0543E:  BTFSC  FD8.0
05440:  BRA    5448
05442:  MOVLB  0
05444:  GOTO   5468
05448:  MOVLB  0
....................             packetdata[j] = 0x00;
0544A:  CLRF   03
0544C:  MOVLB  8
0544E:  MOVF   x20,W
05450:  ADDLW  D9
05452:  MOVWF  FE9
05454:  MOVLW  07
05456:  ADDWFC 03,W
05458:  MOVWF  FEA
0545A:  CLRF   FEF
0545C:  MOVLB  0
0545E:  MOVLB  8
05460:  INCF   x20,F
05462:  MOVLB  0
05464:  GOTO   5438
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
05468:  MOVLB  3
0546A:  MOVF   x74,W
0546C:  MOVLB  8
0546E:  MOVWF  x21
05470:  MOVLB  3
05472:  MOVF   x75,W
05474:  MOVLB  8
05476:  MOVWF  x22
05478:  MOVLW  16
0547A:  MOVLB  3
0547C:  ADDWF  x76,W
0547E:  MOVLB  8
05480:  MOVWF  x23
05482:  MOVLW  00
05484:  MOVLB  3
05486:  ADDWFC x77,W
05488:  MOVLB  8
0548A:  MOVWF  x24
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0548C:  MOVFF  F1,868
05490:  MOVFF  F0,867
05494:  MOVFF  EF,866
05498:  MOVFF  EE,865
0549C:  MOVFF  824,86C
054A0:  MOVFF  823,86B
054A4:  MOVFF  822,86A
054A8:  MOVFF  821,869
054AC:  MOVLW  07
054AE:  MOVWF  x6E
054B0:  MOVLW  D9
054B2:  MOVWF  x6D
054B4:  CLRF   x70
054B6:  MOVLW  40
054B8:  MOVWF  x6F
054BA:  MOVLB  0
054BC:  CALL   344C
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
054C0:  MOVLW  40
054C2:  MOVLB  3
054C4:  ADDWF  x74,F
054C6:  MOVLW  00
054C8:  ADDWFC x75,F
054CA:  MOVLW  00
054CC:  ADDWFC x76,F
054CE:  MOVLW  00
054D0:  ADDWFC x77,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
054D2:  MOVLW  40
054D4:  ADDWF  x79,F
054D6:  MOVLW  00
054D8:  ADDWFC x7A,F
054DA:  MOVLW  00
054DC:  ADDWFC x7B,F
054DE:  MOVLW  00
054E0:  ADDWFC x7C,F
054E2:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
054E4:  CALL   3B28
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
054E8:  MOVLW  A8
054EA:  MOVWF  FF6
054EC:  MOVLW  06
054EE:  MOVWF  FF7
054F0:  MOVLW  00
054F2:  MOVWF  FF8
054F4:  CALL   1D18
054F8:  GOTO   5672 (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... /*
.................... void add_smf_queue_data()
.................... {
....................     SmfDataStruct smf_data;
....................     smf_data.type = SMF_DATA_TYPE_CIGS;
....................     smf_data.length = PACKET_SIZE;
....................     memcpy(smf_data.data, packetdata, PACKET_SIZE);
....................     enqueue_smf_data(&smf_data);
.................... }
.................... */
.................... void add_smf_queue_piclog()
.................... {}
.................... 
.................... void convert_datas(MEASUREMENT_DATA measured_data, )
.................... {
.................... 
.................... }
.................... 
.................... void sweep_with_threshold(unsigned int16 curr_threshold, unsigned int16 pd_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, "Start SWEEP with threshold\r\n");
....................     // fprintf(PC, "\tCurrent threshold: %d\r\n", curr_threshold);
....................     // fprintf(PC, "\tPD threshold: %d\r\n", pd_threshold);
....................     // fprintf(PC, "\tCurrent limit: %d\r\n", curr_limit);
....................     
....................     // Enable both CIGS ports
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR);
....................     delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     int16 pd_value;
....................     int16 count = 0;
....................     int16 cigs1_buffer[2][255]; // Buffer for CIGS1 voltage and current data
....................     int16 cigs2_buffer[2][255]; // Buffer for CIGS2 voltage and current data
....................     
....................     // Port status flags
....................     int1 cigs1_active = 1; // CIGS1 is active
....................     int1 cigs2_active = 1; // CIGS2 is active
....................     
....................     // Individual step counters for each port
....................     int16 cigs1_steps = 0; // Number of steps measured for CIGS1
....................     int16 cigs2_steps = 0; // Number of steps measured for CIGS2
.................... 
....................     // Initialize DACs to 0
....................     mcp4901_1_write(0);
....................     mcp4901_2_write(0);
....................     delay_ms(10);
.................... 
....................     // Read initial PD value
....................     pd_value = ad7490_read(ADC_PD);
....................     //fprintf(PC, "Initial PD value: %d\r\n", pd_value);
.................... 
....................     // Continue measurement while at least one port is active
....................     while (cigs1_active || cigs2_active)
....................     {
....................         // Set DAC values for both ports (synchronized timing)
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         delay_ms(1); // wait for DAC to stabilize
.................... 
....................         // Read CIGS1 data (port1) only if still active
....................         if (cigs1_active) {
....................             cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................             cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................             cigs1_steps = count + 1; // Update CIGS1 step counter
....................         }
....................         
....................         // Read CIGS2 data (port2) only if still active
....................         if (cigs2_active) {
....................             cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................             cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................             cigs2_steps = count + 1; // Update CIGS2 step counter
....................         }
.................... 
....................         // Monitor progress
....................         if (count % 10 == 0) {
.................... //!            fprintf(PC, "Step %d - CIGS1: V=%d, I=%d (active=%d) - CIGS2: V=%d, I=%d (active=%d)\r\n", 
.................... //!                    count, 
.................... //!                    cigs1_active ? cigs1_buffer[0][count] : 0, cigs1_active ? cigs1_buffer[1][count] : 0, cigs1_active,
.................... //!                    cigs2_active ? cigs2_buffer[0][count] : 0, cigs2_active ? cigs2_buffer[1][count] : 0, cigs2_active);
....................         }
.................... 
....................         count++;
.................... 
....................         // Check global exit conditions
....................         if (count >= 255) {
....................             fprintf(PC, "Maximum step count reached: %x\r\n", count);
....................             break;
....................         }
....................         
....................         // Check PD threshold (global condition)
....................         pd_value = ad7490_read(ADC_PD);
....................         if (pd_value < pd_threshold) {
....................             //fprintf(PC, "PD value below threshold: %d < %d - stopping all measurements\r\n", pd_value, pd_threshold);
....................             break;
....................         }
....................         
....................         // Check CIGS1 specific conditions
....................         if (cigs1_active) {
....................             if (cigs1_buffer[1][count-1] > curr_limit) {
....................                 fprintf(PC, "CIGS1 current limit reached: %x > %x - stopping CIGS1 at step %x\r\n", cigs1_buffer[1][count-1], curr_limit, cigs1_steps);
....................                 cigs1_active = 0;
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
....................             }
....................             else if (cigs1_buffer[1][count-1] < curr_threshold) {
....................                 fprintf(PC, "CIGS1 current below threshold: %x < %x - stopping CIGS1 at step %x\r\n", cigs1_buffer[1][count-1], curr_threshold, cigs1_steps);
....................                 cigs1_active = 0;
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
....................             }
....................         }
....................         
....................         // Check CIGS2 specific conditions
....................         if (cigs2_active) {
....................             if (cigs2_buffer[1][count-1] > curr_limit) {
....................                 fprintf(PC, "CIGS2 current limit reached: %x > %x - stopping CIGS2 at step %x\r\n", cigs2_buffer[1][count-1], curr_limit, cigs2_steps);
....................                 cigs2_active = 0;
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
....................             }
....................             else if (cigs2_buffer[1][count-1] < curr_threshold) {
....................                 fprintf(PC, "CIGS2 current below threshold: %x < %x - stopping CIGS2 at step %x\r\n", cigs2_buffer[1][count-1], curr_threshold, cigs2_steps);
....................                 cigs2_active = 0;
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
....................             }
....................         }
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
....................     
....................     fprintf(PC, "END SWEEP with threshold - Total steps: %x\r\n", count);
....................     fprintf(PC, "CIGS1 measured steps: %x\r\n", cigs1_steps);
....................     fprintf(PC, "CIGS2 measured steps: %x\r\n", cigs2_steps);
....................     
....................     // Data conversion and storage can be added here similar to other sweep functions
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     // TODO: Implement data storage to flash memory if needed
....................     fprintf(PC, "End CIGS data conversion\r\n");
.................... }
.................... 
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, unsigned int8 port_num, int8 *data_buffer)
.................... {
....................     
.................... }
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03DCC:  CALL   3146
03DD0:  MOVFF  03,4D5
03DD4:  MOVFF  02,4D4
03DD8:  MOVFF  01,4D3
03DDC:  MOVFF  00,4D2
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03DE0:  MOVFF  4D5,4DB
03DE4:  MOVLB  4
03DE6:  CLRF   xDC
03DE8:  CLRF   xDD
03DEA:  CLRF   xDE
03DEC:  MOVF   xDB,W
03DEE:  MOVWF  xCC
....................     piclog[1] = (time >> 16) & 0xFF;
03DF0:  MOVFF  4D4,4DB
03DF4:  MOVFF  4D5,4DC
03DF8:  CLRF   xDD
03DFA:  CLRF   xDE
03DFC:  MOVF   xDB,W
03DFE:  MOVWF  xCD
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03E00:  MOVFF  4D3,4DB
03E04:  MOVFF  4D4,4DC
03E08:  MOVFF  4D5,4DD
03E0C:  CLRF   xDE
03E0E:  MOVF   xDB,W
03E10:  MOVWF  xCE
....................     piclog[3] = time & 0xFF;         // Time low byte
03E12:  MOVF   xD2,W
03E14:  MOVWF  xCF
....................     piclog[4] = function;            // Function code
03E16:  MOVFF  4CA,4D0
....................     piclog[5] = parameter;           // Parameter code
03E1A:  MOVFF  4CB,4D1
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03E1E:  MOVLB  3
03E20:  MOVF   x6A,W
03E22:  MOVLB  4
03E24:  MOVWF  xD6
03E26:  MOVLB  3
03E28:  MOVF   x6B,W
03E2A:  MOVLB  4
03E2C:  MOVWF  xD7
03E2E:  MOVLW  02
03E30:  MOVLB  3
03E32:  ADDWF  x6C,W
03E34:  MOVLB  4
03E36:  MOVWF  xD8
03E38:  MOVLW  00
03E3A:  MOVLB  3
03E3C:  ADDWFC x6D,W
03E3E:  MOVLB  4
03E40:  MOVWF  xD9
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03E42:  MOVFF  F1,868
03E46:  MOVFF  F0,867
03E4A:  MOVFF  EF,866
03E4E:  MOVFF  EE,865
03E52:  MOVLB  0
03E54:  CALL   237C
03E58:  MOVF   01,F
03E5A:  BTFSS  FD8.2
03E5C:  GOTO   3E70
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03E60:  MOVLW  10
03E62:  MOVWF  FF6
03E64:  MOVLW  09
03E66:  MOVWF  FF7
03E68:  MOVLW  00
03E6A:  MOVWF  FF8
03E6C:  CALL   1D18
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03E70:  MOVFF  F1,868
03E74:  MOVFF  F0,867
03E78:  MOVFF  EF,866
03E7C:  MOVFF  EE,865
03E80:  MOVFF  4D9,86C
03E84:  MOVFF  4D8,86B
03E88:  MOVFF  4D7,86A
03E8C:  MOVFF  4D6,869
03E90:  MOVLW  04
03E92:  MOVLB  8
03E94:  MOVWF  x6E
03E96:  MOVLW  CC
03E98:  MOVWF  x6D
03E9A:  CLRF   x70
03E9C:  MOVLW  06
03E9E:  MOVWF  x6F
03EA0:  MOVLB  0
03EA2:  CALL   344C
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03EA6:  MOVLW  06
03EA8:  MOVLB  3
03EAA:  ADDWF  x6A,F
03EAC:  MOVLW  00
03EAE:  ADDWFC x6B,F
03EB0:  MOVLW  00
03EB2:  ADDWFC x6C,F
03EB4:  MOVLW  00
03EB6:  ADDWFC x6D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03EB8:  MOVLW  06
03EBA:  ADDWF  x6F,F
03EBC:  MOVLW  00
03EBE:  ADDWFC x70,F
03EC0:  MOVLW  00
03EC2:  ADDWFC x71,F
03EC4:  MOVLW  00
03EC6:  ADDWFC x72,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03EC8:  MOVLW  06
03ECA:  ADDWF  x73,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03ECC:  MOVLW  06
03ECE:  ADDWF  x73,W
03ED0:  SUBLW  3F
03ED2:  BTFSS  FD8.0
03ED4:  BRA    3EDC
03ED6:  MOVLB  0
03ED8:  GOTO   3F3E
03EDC:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03EDE:  MOVLB  3
03EE0:  MOVF   x6A,W
03EE2:  MOVLB  4
03EE4:  MOVWF  xD6
03EE6:  MOVLB  3
03EE8:  MOVF   x6B,W
03EEA:  MOVLB  4
03EEC:  MOVWF  xD7
03EEE:  MOVLW  02
03EF0:  MOVLB  3
03EF2:  ADDWF  x6C,W
03EF4:  MOVLB  4
03EF6:  MOVWF  xD8
03EF8:  MOVLW  00
03EFA:  MOVLB  3
03EFC:  ADDWFC x6D,W
03EFE:  MOVLB  4
03F00:  MOVWF  xD9
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03F02:  MOVFF  F1,868
03F06:  MOVFF  F0,867
03F0A:  MOVFF  EF,866
03F0E:  MOVFF  EE,865
03F12:  MOVFF  4D9,86C
03F16:  MOVFF  4D8,86B
03F1A:  MOVFF  4D7,86A
03F1E:  MOVFF  4D6,869
03F22:  MOVLW  03
03F24:  MOVLB  8
03F26:  MOVWF  x6E
03F28:  MOVLW  7E
03F2A:  MOVWF  x6D
03F2C:  CLRF   x70
03F2E:  MOVLW  06
03F30:  MOVWF  x6F
03F32:  MOVLB  0
03F34:  CALL   344C
....................         misf_piclog_write_counter = 0;
03F38:  MOVLB  3
03F3A:  CLRF   x73
03F3C:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03F3E:  CALL   3B28
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03F42:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"         // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"        // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数
.................... 
.................... void read_smf_header()
.................... {
....................     int8 read_data[PACKET_SIZE];
....................     int8 retry_count;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
081C8:  MOVLB  4
081CA:  CLRF   x8B
081CC:  MOVLB  0
081CE:  MOVLB  4
081D0:  MOVF   x8B,W
081D2:  SUBLW  04
081D4:  BTFSC  FD8.0
081D6:  BRA    81DE
081D8:  MOVLB  0
081DA:  GOTO   8288
081DE:  MOVLB  0
....................     {
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, read_data, PACKET_SIZE);
081E0:  MOVFF  F5,4D0
081E4:  MOVFF  F4,4CF
081E8:  MOVFF  F3,4CE
081EC:  MOVFF  F2,4CD
081F0:  MOVLW  06
081F2:  MOVLB  4
081F4:  MOVWF  xD4
081F6:  MOVLW  AA
081F8:  MOVWF  xD3
081FA:  CLRF   xD2
081FC:  CLRF   xD1
081FE:  MOVLW  04
08200:  MOVWF  xD6
08202:  MOVLW  4B
08204:  MOVWF  xD5
08206:  CLRF   xDA
08208:  CLRF   xD9
0820A:  CLRF   xD8
0820C:  MOVLW  40
0820E:  MOVWF  xD7
08210:  MOVLB  0
08212:  CALL   2442
....................         if (is_crc_valid(read_data, PACKET_SIZE-1))
08216:  MOVLW  04
08218:  MOVLB  4
0821A:  MOVWF  xCE
0821C:  MOVLW  4B
0821E:  MOVWF  xCD
08220:  MOVLW  3F
08222:  MOVWF  xCF
08224:  MOVLB  0
08226:  CALL   80BA
0822A:  MOVF   01,F
0822C:  BTFSC  FD8.2
0822E:  GOTO   827E
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
08232:  MOVLW  01
08234:  MOVLB  4
08236:  ADDWF  x8B,W
08238:  MOVWF  x8C
0823A:  MOVLW  32
0823C:  MOVWF  FF6
0823E:  MOVLW  09
08240:  MOVWF  FF7
08242:  MOVLW  00
08244:  MOVWF  FF8
08246:  MOVLW  23
08248:  MOVLB  8
0824A:  MOVWF  x25
0824C:  MOVLB  0
0824E:  CALL   1D48
08252:  MOVFF  48C,4CE
08256:  MOVLW  18
08258:  MOVLB  4
0825A:  MOVWF  xCF
0825C:  MOVLB  0
0825E:  CALL   76E6
08262:  MOVLW  0D
08264:  MOVLB  8
08266:  MOVWF  x68
08268:  MOVLB  0
0826A:  CALL   1CC6
0826E:  MOVLW  0A
08270:  MOVLB  8
08272:  MOVWF  x68
08274:  MOVLB  0
08276:  CALL   1CC6
....................             break;
0827A:  GOTO   8288
....................         }
0827E:  MOVLB  4
08280:  INCF   x8B,F
08282:  MOVLB  0
08284:  GOTO   81CE
....................     }
....................     param.meas.used_size = lsb_array_to_int32(read_data, 0);
08288:  MOVLW  04
0828A:  MOVLB  4
0828C:  MOVWF  x8D
0828E:  MOVLW  4B
08290:  MOVWF  x8C
08292:  CLRF   x8E
08294:  MOVLB  0
08296:  CALL   8108
0829A:  MOVFF  03,388
0829E:  MOVFF  02,387
082A2:  MOVFF  01,386
082A6:  MOVFF  00,385
....................     param.meas.loop_counter = read_data[4];
082AA:  MOVLB  3
082AC:  CLRF   x8C
082AE:  CLRF   x8B
082B0:  CLRF   x8A
082B2:  MOVFF  44F,389
....................     param.piclog.used_size = lsb_array_to_int32(read_data, 5);
082B6:  MOVLW  04
082B8:  MOVLB  4
082BA:  MOVWF  x8D
082BC:  MOVLW  4B
082BE:  MOVWF  x8C
082C0:  MOVLW  05
082C2:  MOVWF  x8E
082C4:  MOVLB  0
082C6:  CALL   8108
082CA:  MOVFF  03,393
082CE:  MOVFF  02,392
082D2:  MOVFF  01,391
082D6:  MOVFF  00,390
....................     param.piclog.loop_counter = read_data[9];
082DA:  MOVLB  3
082DC:  CLRF   x97
082DE:  CLRF   x96
082E0:  CLRF   x95
082E2:  MOVFF  454,394
082E6:  MOVLB  0
082E8:  GOTO   89CC (RETURN)
.................... }
.................... 
.................... void write_smf_header()
.................... {
....................     int8 writedata[PACKET_SIZE];
.................... 
....................     // ヘッダー情報をwritedataに設定
....................     int32_to_be_array(param.meas.used_size, writedata, 0);
*
084D8:  MOVFF  388,4D0
084DC:  MOVFF  387,4CF
084E0:  MOVFF  386,4CE
084E4:  MOVFF  385,4CD
084E8:  MOVLW  04
084EA:  MOVLB  4
084EC:  MOVWF  xD2
084EE:  MOVLW  4B
084F0:  MOVWF  xD1
084F2:  CLRF   xD3
084F4:  MOVLB  0
084F6:  CALL   8468
....................     writedata[4] = param.meas.loop_counter;
084FA:  MOVFF  389,44F
....................     int32_to_be_array(param.piclog.used_size, writedata, 5);
084FE:  MOVFF  393,4D0
08502:  MOVFF  392,4CF
08506:  MOVFF  391,4CE
0850A:  MOVFF  390,4CD
0850E:  MOVLW  04
08510:  MOVLB  4
08512:  MOVWF  xD2
08514:  MOVLW  4B
08516:  MOVWF  xD1
08518:  MOVLW  05
0851A:  MOVWF  xD3
0851C:  MOVLB  0
0851E:  CALL   8468
....................     writedata[9] = param.piclog.loop_counter;
08522:  MOVFF  394,454
.................... 
....................     writedata[63] = calc_crc8(writedata, PACKET_SIZE-1); // CRCを計算してバッファに書き込み
08526:  MOVLW  04
08528:  MOVLB  8
0852A:  MOVWF  x26
0852C:  MOVLW  4B
0852E:  MOVWF  x25
08530:  MOVLW  3F
08532:  MOVWF  x27
08534:  MOVLB  0
08536:  CALL   40A8
0853A:  MOVFF  01,48A
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
0853E:  MOVLB  4
08540:  BCF    xCC.0
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
08542:  CLRF   xCB
08544:  MOVLB  0
08546:  MOVLB  4
08548:  MOVF   xCB,W
0854A:  SUBLW  04
0854C:  BTFSC  FD8.0
0854E:  BRA    8556
08550:  MOVLB  0
08552:  GOTO   8656
08556:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
08558:  MOVFF  F5,868
0855C:  MOVFF  F4,867
08560:  MOVFF  F3,866
08564:  MOVFF  F2,865
08568:  MOVLW  06
0856A:  MOVLB  8
0856C:  MOVWF  x6C
0856E:  MOVLW  AA
08570:  MOVWF  x6B
08572:  CLRF   x6A
08574:  CLRF   x69
08576:  MOVLB  0
08578:  CALL   37D0
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, writedata, PACKET_SIZE); // ヘッダーを書き込み
0857C:  MOVFF  F5,868
08580:  MOVFF  F4,867
08584:  MOVFF  F3,866
08588:  MOVFF  F2,865
0858C:  MOVLW  06
0858E:  MOVLB  8
08590:  MOVWF  x6C
08592:  MOVLW  AA
08594:  MOVWF  x6B
08596:  CLRF   x6A
08598:  CLRF   x69
0859A:  MOVLW  04
0859C:  MOVWF  x6E
0859E:  MOVLW  4B
085A0:  MOVWF  x6D
085A2:  CLRF   x70
085A4:  MOVLW  40
085A6:  MOVWF  x6F
085A8:  MOVLB  0
085AA:  CALL   344C
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
085AE:  MOVFF  F5,4D0
085B2:  MOVFF  F4,4CF
085B6:  MOVFF  F3,4CE
085BA:  MOVFF  F2,4CD
085BE:  MOVLW  06
085C0:  MOVLB  4
085C2:  MOVWF  xD4
085C4:  MOVLW  AA
085C6:  MOVWF  xD3
085C8:  CLRF   xD2
085CA:  CLRF   xD1
085CC:  MOVLW  04
085CE:  MOVWF  xD6
085D0:  MOVLW  8B
085D2:  MOVWF  xD5
085D4:  CLRF   xDA
085D6:  CLRF   xD9
085D8:  CLRF   xD8
085DA:  MOVLW  40
085DC:  MOVWF  xD7
085DE:  MOVLB  0
085E0:  CALL   2442
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
085E4:  MOVLW  04
085E6:  MOVLB  4
085E8:  MOVWF  xCE
085EA:  MOVLW  8B
085EC:  MOVWF  xCD
085EE:  MOVLW  3F
085F0:  MOVWF  xCF
085F2:  MOVLB  0
085F4:  CALL   80BA
085F8:  MOVF   01,F
085FA:  BTFSC  FD8.2
085FC:  GOTO   864C
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
08600:  MOVLW  01
08602:  MOVLB  4
08604:  ADDWF  xCB,W
08606:  MOVWF  xCD
08608:  MOVLW  5A
0860A:  MOVWF  FF6
0860C:  MOVLW  09
0860E:  MOVWF  FF7
08610:  MOVLW  00
08612:  MOVWF  FF8
08614:  MOVLW  23
08616:  MOVLB  8
08618:  MOVWF  x25
0861A:  MOVLB  0
0861C:  CALL   1D48
08620:  MOVFF  4CD,4CE
08624:  MOVLW  18
08626:  MOVLB  4
08628:  MOVWF  xCF
0862A:  MOVLB  0
0862C:  CALL   76E6
08630:  MOVLW  0D
08632:  MOVLB  8
08634:  MOVWF  x68
08636:  MOVLB  0
08638:  CALL   1CC6
0863C:  MOVLW  0A
0863E:  MOVLB  8
08640:  MOVWF  x68
08642:  MOVLB  0
08644:  CALL   1CC6
....................             break;
08648:  GOTO   8656
....................         }
0864C:  MOVLB  4
0864E:  INCF   xCB,F
08650:  MOVLB  0
08652:  GOTO   8546
....................     }
....................     if (!crc_valid)
08656:  MOVLB  4
08658:  BTFSS  xCC.0
0865A:  BRA    8662
0865C:  MOVLB  0
0865E:  GOTO   86A8
08662:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
08664:  MOVLW  82
08666:  MOVWF  FF6
08668:  MOVLW  09
0866A:  MOVWF  FF7
0866C:  MOVLW  00
0866E:  MOVWF  FF8
08670:  MOVLW  25
08672:  MOVLB  8
08674:  MOVWF  x25
08676:  MOVLB  0
08678:  CALL   1D48
0867C:  MOVLW  05
0867E:  MOVLB  4
08680:  MOVWF  xCE
08682:  MOVLW  18
08684:  MOVWF  xCF
08686:  MOVLB  0
08688:  CALL   76E6
0868C:  MOVLW  A9
0868E:  MOVWF  FF6
08690:  MOVLW  09
08692:  MOVWF  FF7
08694:  MOVLW  00
08696:  MOVWF  FF8
08698:  MOVLW  0B
0869A:  MOVLB  8
0869C:  MOVWF  x25
0869E:  MOVLB  0
086A0:  CALL   1D48
....................         return; 
086A4:  GOTO   86A8
....................     }
086A8:  GOTO   8F98 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
086AC:  MOVLW  B6
086AE:  MOVWF  FF6
086B0:  MOVLW  09
086B2:  MOVWF  FF7
086B4:  MOVLW  00
086B6:  MOVWF  FF8
086B8:  CALL   1D18
....................     fprintf(PC, "___Start copy_data__\r\n");
086BC:  MOVLW  D0
086BE:  MOVWF  FF6
086C0:  MOVLW  09
086C2:  MOVWF  FF7
086C4:  MOVLW  00
086C6:  MOVWF  FF8
086C8:  CALL   1D18
....................     
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
086CC:  MOVLW  01
086CE:  MOVLB  3
086D0:  ADDWF  xAB,W
086D2:  MOVWF  FE9
086D4:  MOVLW  00
086D6:  ADDWFC xAC,W
086D8:  MOVWF  FEA
086DA:  MOVFF  FEF,449
086DE:  MOVFF  449,452
086E2:  MOVLB  0
086E4:  CALL   7E2A
086E8:  MOVFF  02,03
086EC:  MOVF   01,W
086EE:  MOVWF  FE1
086F0:  MOVFF  03,FE2
086F4:  MOVLW  04
086F6:  MOVWF  FEA
086F8:  MOVLW  02
086FA:  MOVWF  FE9
086FC:  MOVLW  08
086FE:  MOVWF  01
08700:  MOVFF  FE6,FEE
08704:  DECFSZ 01,F
08706:  GOTO   8700
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0870A:  MOVLW  01
0870C:  MOVLB  3
0870E:  ADDWF  xAB,W
08710:  MOVWF  FE9
08712:  MOVLW  00
08714:  ADDWFC xAC,W
08716:  MOVWF  FEA
08718:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 write_src = smf_data->src;
....................     unsigned int32 write_size = smf_data->size;
0871C:  MOVFF  405,40D
08720:  MOVFF  404,40C
08724:  MOVFF  403,40B
08728:  MOVFF  402,40A
0872C:  MOVFF  409,411
08730:  MOVFF  408,410
08734:  MOVFF  407,40F
08738:  MOVFF  406,40E
0873C:  MOVLW  02
0873E:  ADDWF  xAB,W
08740:  MOVWF  FE9
08742:  MOVLW  00
08744:  ADDWFC xAC,W
08746:  MOVWF  FEA
08748:  MOVFF  FEF,412
0874C:  MOVFF  FEC,413
08750:  MOVFF  FEC,414
08754:  MOVFF  FEC,415
08758:  MOVF   FED,F
0875A:  MOVF   FED,F
0875C:  MOVF   FED,F
0875E:  MOVLW  06
08760:  ADDWF  xAB,W
08762:  MOVWF  FE9
08764:  MOVLW  00
08766:  ADDWFC xAC,W
08768:  MOVWF  FEA
0876A:  MOVFF  FEF,416
0876E:  MOVFF  FEC,417
08772:  MOVFF  FEC,418
08776:  MOVFF  FEC,419
0877A:  MOVF   FED,F
0877C:  MOVF   FED,F
0877E:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
08780:  MOVLW  E8
08782:  MOVWF  FF6
08784:  MOVLW  09
08786:  MOVWF  FF7
08788:  MOVLW  00
0878A:  MOVWF  FF8
0878C:  MOVLW  25
0878E:  MOVLB  8
08790:  MOVWF  x25
08792:  MOVLB  0
08794:  CALL   1D48
08798:  MOVFF  40D,4C7
0879C:  MOVLW  37
0879E:  MOVLB  4
087A0:  MOVWF  xC8
087A2:  MOVLB  0
087A4:  CALL   1F0A
087A8:  MOVFF  40C,4C7
087AC:  MOVLW  37
087AE:  MOVLB  4
087B0:  MOVWF  xC8
087B2:  MOVLB  0
087B4:  CALL   1F0A
087B8:  MOVFF  40B,4C7
087BC:  MOVLW  37
087BE:  MOVLB  4
087C0:  MOVWF  xC8
087C2:  MOVLB  0
087C4:  CALL   1F0A
087C8:  MOVFF  40A,4C7
087CC:  MOVLW  37
087CE:  MOVLB  4
087D0:  MOVWF  xC8
087D2:  MOVLB  0
087D4:  CALL   1F0A
087D8:  MOVLW  0D
087DA:  MOVLB  8
087DC:  MOVWF  x68
087DE:  MOVLB  0
087E0:  CALL   1CC6
087E4:  MOVLW  0A
087E6:  MOVLB  8
087E8:  MOVWF  x68
087EA:  MOVLB  0
087EC:  CALL   1CC6
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
087F0:  MOVLW  14
087F2:  MOVWF  FF6
087F4:  MOVLW  0A
087F6:  MOVWF  FF7
087F8:  MOVLW  00
087FA:  MOVWF  FF8
087FC:  MOVLW  25
087FE:  MOVLB  8
08800:  MOVWF  x25
08802:  MOVLB  0
08804:  CALL   1D48
08808:  MOVFF  411,4C7
0880C:  MOVLW  37
0880E:  MOVLB  4
08810:  MOVWF  xC8
08812:  MOVLB  0
08814:  CALL   1F0A
08818:  MOVFF  410,4C7
0881C:  MOVLW  37
0881E:  MOVLB  4
08820:  MOVWF  xC8
08822:  MOVLB  0
08824:  CALL   1F0A
08828:  MOVFF  40F,4C7
0882C:  MOVLW  37
0882E:  MOVLB  4
08830:  MOVWF  xC8
08832:  MOVLB  0
08834:  CALL   1F0A
08838:  MOVFF  40E,4C7
0883C:  MOVLW  37
0883E:  MOVLB  4
08840:  MOVWF  xC8
08842:  MOVLB  0
08844:  CALL   1F0A
08848:  MOVLW  0D
0884A:  MOVLB  8
0884C:  MOVWF  x68
0884E:  MOVLB  0
08850:  CALL   1CC6
08854:  MOVLW  0A
08856:  MOVLB  8
08858:  MOVWF  x68
0885A:  MOVLB  0
0885C:  CALL   1CC6
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
08860:  MOVLW  40
08862:  MOVWF  FF6
08864:  MOVLW  0A
08866:  MOVWF  FF7
08868:  MOVLW  00
0886A:  MOVWF  FF8
0886C:  MOVLW  25
0886E:  MOVLB  8
08870:  MOVWF  x25
08872:  MOVLB  0
08874:  CALL   1D48
08878:  MOVFF  415,4C7
0887C:  MOVLW  37
0887E:  MOVLB  4
08880:  MOVWF  xC8
08882:  MOVLB  0
08884:  CALL   1F0A
08888:  MOVFF  414,4C7
0888C:  MOVLW  37
0888E:  MOVLB  4
08890:  MOVWF  xC8
08892:  MOVLB  0
08894:  CALL   1F0A
08898:  MOVFF  413,4C7
0889C:  MOVLW  37
0889E:  MOVLB  4
088A0:  MOVWF  xC8
088A2:  MOVLB  0
088A4:  CALL   1F0A
088A8:  MOVFF  412,4C7
088AC:  MOVLW  37
088AE:  MOVLB  4
088B0:  MOVWF  xC8
088B2:  MOVLB  0
088B4:  CALL   1F0A
088B8:  MOVLW  0D
088BA:  MOVLB  8
088BC:  MOVWF  x68
088BE:  MOVLB  0
088C0:  CALL   1CC6
088C4:  MOVLW  0A
088C6:  MOVLB  8
088C8:  MOVWF  x68
088CA:  MOVLB  0
088CC:  CALL   1CC6
....................     fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
088D0:  MOVLW  6C
088D2:  MOVWF  FF6
088D4:  MOVLW  0A
088D6:  MOVWF  FF7
088D8:  MOVLW  00
088DA:  MOVWF  FF8
088DC:  MOVLW  25
088DE:  MOVLB  8
088E0:  MOVWF  x25
088E2:  MOVLB  0
088E4:  CALL   1D48
088E8:  MOVLW  41
088EA:  MOVWF  FE9
088EC:  MOVFF  419,44E
088F0:  MOVFF  418,44D
088F4:  MOVFF  417,44C
088F8:  MOVFF  416,44B
088FC:  CALL   7FBA
08900:  MOVLW  94
08902:  MOVWF  FF6
08904:  MOVLW  0A
08906:  MOVWF  FF7
08908:  MOVLW  00
0890A:  MOVWF  FF8
0890C:  MOVLW  04
0890E:  MOVLB  8
08910:  MOVWF  x25
08912:  MOVLB  0
08914:  CALL   1D48
08918:  MOVFF  419,4C7
0891C:  MOVLW  57
0891E:  MOVLB  4
08920:  MOVWF  xC8
08922:  MOVLB  0
08924:  CALL   1F0A
08928:  MOVFF  418,4C7
0892C:  MOVLW  57
0892E:  MOVLB  4
08930:  MOVWF  xC8
08932:  MOVLB  0
08934:  CALL   1F0A
08938:  MOVFF  417,4C7
0893C:  MOVLW  57
0893E:  MOVLB  4
08940:  MOVWF  xC8
08942:  MOVLB  0
08944:  CALL   1F0A
08948:  MOVFF  416,4C7
0894C:  MOVLW  57
0894E:  MOVLB  4
08950:  MOVWF  xC8
08952:  MOVLB  0
08954:  CALL   1F0A
08958:  MOVLW  9B
0895A:  MOVWF  FF6
0895C:  MOVLW  0A
0895E:  MOVWF  FF7
08960:  MOVLW  00
08962:  MOVWF  FF8
08964:  MOVLW  05
08966:  MOVLB  8
08968:  MOVWF  x25
0896A:  MOVLB  0
0896C:  CALL   1D48
.................... 
....................     if (!is_connect(mis_fm))
08970:  MOVFF  F1,868
08974:  MOVFF  F0,867
08978:  MOVFF  EF,866
0897C:  MOVFF  EE,865
08980:  CALL   237C
08984:  MOVF   01,F
08986:  BTFSS  FD8.2
08988:  GOTO   899C
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0898C:  MOVLW  A2
0898E:  MOVWF  FF6
08990:  MOVLW  0A
08992:  MOVWF  FF7
08994:  MOVLW  00
08996:  MOVWF  FF8
08998:  CALL   1D18
....................     }    
.................... 
....................     if (!is_connect(smf))
0899C:  MOVFF  F5,868
089A0:  MOVFF  F4,867
089A4:  MOVFF  F3,866
089A8:  MOVFF  F2,865
089AC:  CALL   237C
089B0:  MOVF   01,F
089B2:  BTFSS  FD8.2
089B4:  GOTO   89C8
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
089B8:  MOVLW  C4
089BA:  MOVWF  FF6
089BC:  MOVLW  0A
089BE:  MOVWF  FF7
089C0:  MOVLW  00
089C2:  MOVWF  FF8
089C4:  CALL   1D18
....................     }    
....................     /*
....................     while (!is_connect(smf))
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
....................         delay_ms(100);
....................     }
....................     */
.................... 
....................     // read size area with CRC verification retry
....................     read_smf_header();
089C8:  GOTO   81C8
.................... 
....................     // PartitionParamから値を取得
....................     int32 used_size = param.meas.used_size;
....................     int8 loop_count = param.meas.loop_counter;
089CC:  MOVFF  388,41D
089D0:  MOVFF  387,41C
089D4:  MOVFF  386,41B
089D8:  MOVFF  385,41A
089DC:  MOVFF  389,41E
....................     fprintf(PC, "Size area read\r\n");
089E0:  MOVLW  E2
089E2:  MOVWF  FF6
089E4:  MOVLW  0A
089E6:  MOVWF  FF7
089E8:  MOVLW  00
089EA:  MOVWF  FF8
089EC:  CALL   1D18
....................     fprintf(PC, "used_size = %ld (src 0x%08LX)\r\n", used_size, mis_start_address);
089F0:  MOVLW  F4
089F2:  MOVWF  FF6
089F4:  MOVLW  0A
089F6:  MOVWF  FF7
089F8:  MOVLW  00
089FA:  MOVWF  FF8
089FC:  MOVLW  0C
089FE:  MOVLB  8
08A00:  MOVWF  x25
08A02:  MOVLB  0
08A04:  CALL   1D48
08A08:  MOVLW  41
08A0A:  MOVWF  FE9
08A0C:  MOVFF  41D,44E
08A10:  MOVFF  41C,44D
08A14:  MOVFF  41B,44C
08A18:  MOVFF  41A,44B
08A1C:  CALL   82EC
08A20:  MOVLW  03
08A22:  MOVWF  FF6
08A24:  MOVLW  0B
08A26:  MOVWF  FF7
08A28:  MOVLW  00
08A2A:  MOVWF  FF8
08A2C:  MOVLW  08
08A2E:  MOVLB  8
08A30:  MOVWF  x25
08A32:  MOVLB  0
08A34:  CALL   1D48
08A38:  MOVFF  40D,4C7
08A3C:  MOVLW  37
08A3E:  MOVLB  4
08A40:  MOVWF  xC8
08A42:  MOVLB  0
08A44:  CALL   1F0A
08A48:  MOVFF  40C,4C7
08A4C:  MOVLW  37
08A4E:  MOVLB  4
08A50:  MOVWF  xC8
08A52:  MOVLB  0
08A54:  CALL   1F0A
08A58:  MOVFF  40B,4C7
08A5C:  MOVLW  37
08A5E:  MOVLB  4
08A60:  MOVWF  xC8
08A62:  MOVLB  0
08A64:  CALL   1F0A
08A68:  MOVFF  40A,4C7
08A6C:  MOVLW  37
08A6E:  MOVLB  4
08A70:  MOVWF  xC8
08A72:  MOVLB  0
08A74:  CALL   1F0A
08A78:  MOVLW  10
08A7A:  MOVWF  FF6
08A7C:  MOVLW  0B
08A7E:  MOVWF  FF7
08A80:  MOVLW  00
08A82:  MOVWF  FF8
08A84:  MOVLW  03
08A86:  MOVLB  8
08A88:  MOVWF  x25
08A8A:  MOVLB  0
08A8C:  CALL   1D48
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
08A90:  MOVLW  04
08A92:  MOVLB  4
08A94:  ADDWF  x0A,W
08A96:  MOVWF  x49
08A98:  MOVLW  00
08A9A:  ADDWFC x0B,W
08A9C:  MOVWF  x4A
08A9E:  MOVLW  00
08AA0:  ADDWFC x0C,W
08AA2:  MOVWF  x4B
08AA4:  MOVLW  00
08AA6:  ADDWFC x0D,W
08AA8:  MOVWF  x4C
08AAA:  MOVLW  14
08AAC:  MOVWF  FF6
08AAE:  MOVLW  0B
08AB0:  MOVWF  FF7
08AB2:  MOVLW  00
08AB4:  MOVWF  FF8
08AB6:  MOVLW  0C
08AB8:  MOVLB  8
08ABA:  MOVWF  x25
08ABC:  MOVLB  0
08ABE:  CALL   1D48
08AC2:  MOVFF  41E,4CE
08AC6:  MOVLW  18
08AC8:  MOVLB  4
08ACA:  MOVWF  xCF
08ACC:  MOVLB  0
08ACE:  CALL   76E6
08AD2:  MOVLW  22
08AD4:  MOVWF  FF6
08AD6:  MOVLW  0B
08AD8:  MOVWF  FF7
08ADA:  MOVLW  00
08ADC:  MOVWF  FF8
08ADE:  MOVLW  09
08AE0:  MOVLB  8
08AE2:  MOVWF  x25
08AE4:  MOVLB  0
08AE6:  CALL   1D48
08AEA:  MOVFF  44C,4C7
08AEE:  MOVLW  37
08AF0:  MOVLB  4
08AF2:  MOVWF  xC8
08AF4:  MOVLB  0
08AF6:  CALL   1F0A
08AFA:  MOVFF  44B,4C7
08AFE:  MOVLW  37
08B00:  MOVLB  4
08B02:  MOVWF  xC8
08B04:  MOVLB  0
08B06:  CALL   1F0A
08B0A:  MOVFF  44A,4C7
08B0E:  MOVLW  37
08B10:  MOVLB  4
08B12:  MOVWF  xC8
08B14:  MOVLB  0
08B16:  CALL   1F0A
08B1A:  MOVFF  449,4C7
08B1E:  MOVLW  37
08B20:  MOVLB  4
08B22:  MOVWF  xC8
08B24:  MOVLB  0
08B26:  CALL   1F0A
08B2A:  MOVLW  30
08B2C:  MOVWF  FF6
08B2E:  MOVLW  0B
08B30:  MOVWF  FF7
08B32:  MOVLW  00
08B34:  MOVWF  FF8
08B36:  MOVLW  05
08B38:  MOVLB  8
08B3A:  MOVWF  x25
08B3C:  MOVLB  0
08B3E:  CALL   1D48
....................     
.................... 
....................     // Calculate data write address and check for wrap-around
....................     unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................     unsigned int32 data_region_end = mis_end_address;
....................     unsigned int32 data_region_size = data_region_end - data_region_start;
....................     unsigned int32 data_write_addr = data_region_start + used_size;
08B42:  MOVLB  4
08B44:  MOVF   x0A,W
08B46:  MOVWF  x1F
08B48:  MOVLW  10
08B4A:  ADDWF  x0B,W
08B4C:  MOVWF  x20
08B4E:  MOVLW  00
08B50:  ADDWFC x0C,W
08B52:  MOVWF  x21
08B54:  MOVLW  00
08B56:  ADDWFC x0D,W
08B58:  MOVWF  x22
08B5A:  MOVFF  411,426
08B5E:  MOVFF  410,425
08B62:  MOVFF  40F,424
08B66:  MOVFF  40E,423
08B6A:  MOVF   x1F,W
08B6C:  SUBWF  x23,W
08B6E:  MOVWF  x27
08B70:  MOVF   x20,W
08B72:  SUBWFB x24,W
08B74:  MOVWF  x28
08B76:  MOVF   x21,W
08B78:  SUBWFB x25,W
08B7A:  MOVWF  x29
08B7C:  MOVF   x22,W
08B7E:  SUBWFB x26,W
08B80:  MOVWF  x2A
08B82:  MOVF   x1A,W
08B84:  ADDWF  x1F,W
08B86:  MOVWF  x2B
08B88:  MOVF   x1B,W
08B8A:  ADDWFC x20,W
08B8C:  MOVWF  x2C
08B8E:  MOVF   x1C,W
08B90:  ADDWFC x21,W
08B92:  MOVWF  x2D
08B94:  MOVF   x1D,W
08B96:  ADDWFC x22,W
08B98:  MOVWF  x2E
.................... 
.................... 
....................     // Delete the first part in advance in case of looping
....................     if ((used_size + write_size) > data_region_size)
08B9A:  MOVF   x16,W
08B9C:  ADDWF  x1A,W
08B9E:  MOVWF  x49
08BA0:  MOVF   x17,W
08BA2:  ADDWFC x1B,W
08BA4:  MOVWF  x4A
08BA6:  MOVF   x18,W
08BA8:  ADDWFC x1C,W
08BAA:  MOVWF  x4B
08BAC:  MOVF   x19,W
08BAE:  ADDWFC x1D,W
08BB0:  MOVWF  x4C
08BB2:  MOVF   x2A,W
08BB4:  SUBWF  x4C,W
08BB6:  BTFSC  FD8.0
08BB8:  BRA    8BC0
08BBA:  MOVLB  0
08BBC:  GOTO   8CDA
08BC0:  MOVLB  0
08BC2:  BTFSS  FD8.2
08BC4:  GOTO   8C0A
08BC8:  MOVLB  4
08BCA:  MOVF   x29,W
08BCC:  SUBWF  x4B,W
08BCE:  BTFSC  FD8.0
08BD0:  BRA    8BD8
08BD2:  MOVLB  0
08BD4:  GOTO   8CDA
08BD8:  MOVLB  0
08BDA:  BTFSS  FD8.2
08BDC:  GOTO   8C0A
08BE0:  MOVLB  4
08BE2:  MOVF   x28,W
08BE4:  SUBWF  x4A,W
08BE6:  BTFSC  FD8.0
08BE8:  BRA    8BF0
08BEA:  MOVLB  0
08BEC:  GOTO   8CDA
08BF0:  MOVLB  0
08BF2:  BTFSS  FD8.2
08BF4:  GOTO   8C0A
08BF8:  MOVLB  4
08BFA:  MOVF   x49,W
08BFC:  SUBWF  x27,W
08BFE:  BTFSS  FD8.0
08C00:  BRA    8C08
08C02:  MOVLB  0
08C04:  GOTO   8CDA
08C08:  MOVLB  0
....................     {
....................         fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
08C0A:  MOVLW  36
08C0C:  MOVWF  FF6
08C0E:  MOVLW  0B
08C10:  MOVWF  FF7
08C12:  MOVLW  00
08C14:  MOVWF  FF8
08C16:  CALL   1D18
....................         loop_count++;
08C1A:  MOVLB  4
08C1C:  INCF   x1E,F
....................         used_size = 0;
08C1E:  CLRF   x1D
08C20:  CLRF   x1C
08C22:  CLRF   x1B
08C24:  CLRF   x1A
....................         data_write_addr = data_region_start;
08C26:  MOVFF  422,42E
08C2A:  MOVFF  421,42D
08C2E:  MOVFF  420,42C
08C32:  MOVFF  41F,42B
....................         unsigned int32 erase_ptr = data_region_start;
08C36:  MOVFF  422,432
08C3A:  MOVFF  421,431
08C3E:  MOVFF  420,430
08C42:  MOVFF  41F,42F
08C46:  MOVLB  0
....................         while (erase_ptr < data_region_end)
08C48:  MOVLB  4
08C4A:  MOVF   x32,W
08C4C:  SUBWF  x26,W
08C4E:  BTFSC  FD8.0
08C50:  BRA    8C58
08C52:  MOVLB  0
08C54:  GOTO   8CDA
08C58:  MOVLB  0
08C5A:  BTFSS  FD8.2
08C5C:  GOTO   8CA2
08C60:  MOVLB  4
08C62:  MOVF   x31,W
08C64:  SUBWF  x25,W
08C66:  BTFSC  FD8.0
08C68:  BRA    8C70
08C6A:  MOVLB  0
08C6C:  GOTO   8CDA
08C70:  MOVLB  0
08C72:  BTFSS  FD8.2
08C74:  GOTO   8CA2
08C78:  MOVLB  4
08C7A:  MOVF   x30,W
08C7C:  SUBWF  x24,W
08C7E:  BTFSC  FD8.0
08C80:  BRA    8C88
08C82:  MOVLB  0
08C84:  GOTO   8CDA
08C88:  MOVLB  0
08C8A:  BTFSS  FD8.2
08C8C:  GOTO   8CA2
08C90:  MOVLB  4
08C92:  MOVF   x23,W
08C94:  SUBWF  x2F,W
08C96:  BTFSS  FD8.0
08C98:  BRA    8CA0
08C9A:  MOVLB  0
08C9C:  GOTO   8CDA
08CA0:  MOVLB  0
....................         {
....................             subsector_4kByte_erase(smf, erase_ptr);
08CA2:  MOVFF  F5,868
08CA6:  MOVFF  F4,867
08CAA:  MOVFF  F3,866
08CAE:  MOVFF  F2,865
08CB2:  MOVFF  432,86C
08CB6:  MOVFF  431,86B
08CBA:  MOVFF  430,86A
08CBE:  MOVFF  42F,869
08CC2:  CALL   37D0
....................             erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
08CC6:  MOVLW  10
08CC8:  MOVLB  4
08CCA:  ADDWF  x30,F
08CCC:  MOVLW  00
08CCE:  ADDWFC x31,F
08CD0:  MOVLW  00
08CD2:  ADDWFC x32,F
08CD4:  MOVLB  0
08CD6:  GOTO   8C48
....................         }
....................     }
.................... 
.................... 
....................     // Erase the space you will be writing in now
....................     unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................     unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
08CDA:  MOVLB  4
08CDC:  CLRF   x33
08CDE:  MOVF   x2C,W
08CE0:  ANDLW  F0
08CE2:  MOVWF  x34
08CE4:  CLRF   x35
08CE6:  CLRF   x36
08CE8:  MOVF   x16,W
08CEA:  ADDWF  x2B,W
08CEC:  MOVWF  x49
08CEE:  MOVF   x17,W
08CF0:  ADDWFC x2C,W
08CF2:  MOVWF  x4A
08CF4:  MOVF   x18,W
08CF6:  ADDWFC x2D,W
08CF8:  MOVWF  x4B
08CFA:  MOVF   x19,W
08CFC:  ADDWFC x2E,W
08CFE:  MOVWF  x4C
08D00:  MOVLW  FF
08D02:  ADDWF  x49,F
08D04:  MOVLW  0F
08D06:  ADDWFC x4A,F
08D08:  MOVLW  00
08D0A:  ADDWFC x4B,F
08D0C:  MOVLW  00
08D0E:  ADDWFC x4C,F
08D10:  CLRF   x37
08D12:  MOVF   x4A,W
08D14:  ANDLW  F0
08D16:  MOVWF  x38
08D18:  CLRF   x39
08D1A:  CLRF   x3A
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
08D1C:  MOVFF  436,43E
08D20:  MOVFF  435,43D
08D24:  MOVFF  434,43C
08D28:  MOVFF  433,43B
08D2C:  MOVLB  0
08D2E:  MOVLB  4
08D30:  MOVF   x3E,W
08D32:  SUBWF  x3A,W
08D34:  BTFSC  FD8.0
08D36:  BRA    8D3E
08D38:  MOVLB  0
08D3A:  GOTO   8E1A
08D3E:  MOVLB  0
08D40:  BTFSS  FD8.2
08D42:  GOTO   8D88
08D46:  MOVLB  4
08D48:  MOVF   x3D,W
08D4A:  SUBWF  x39,W
08D4C:  BTFSC  FD8.0
08D4E:  BRA    8D56
08D50:  MOVLB  0
08D52:  GOTO   8E1A
08D56:  MOVLB  0
08D58:  BTFSS  FD8.2
08D5A:  GOTO   8D88
08D5E:  MOVLB  4
08D60:  MOVF   x3C,W
08D62:  SUBWF  x38,W
08D64:  BTFSC  FD8.0
08D66:  BRA    8D6E
08D68:  MOVLB  0
08D6A:  GOTO   8E1A
08D6E:  MOVLB  0
08D70:  BTFSS  FD8.2
08D72:  GOTO   8D88
08D76:  MOVLB  4
08D78:  MOVF   x37,W
08D7A:  SUBWF  x3B,W
08D7C:  BTFSS  FD8.0
08D7E:  BRA    8D86
08D80:  MOVLB  0
08D82:  GOTO   8E1A
08D86:  MOVLB  0
08D88:  MOVLB  4
08D8A:  MOVF   x3E,W
08D8C:  SUBWF  x11,W
08D8E:  BTFSC  FD8.0
08D90:  BRA    8D98
08D92:  MOVLB  0
08D94:  GOTO   8E1A
08D98:  MOVLB  0
08D9A:  BTFSS  FD8.2
08D9C:  GOTO   8DE2
08DA0:  MOVLB  4
08DA2:  MOVF   x3D,W
08DA4:  SUBWF  x10,W
08DA6:  BTFSC  FD8.0
08DA8:  BRA    8DB0
08DAA:  MOVLB  0
08DAC:  GOTO   8E1A
08DB0:  MOVLB  0
08DB2:  BTFSS  FD8.2
08DB4:  GOTO   8DE2
08DB8:  MOVLB  4
08DBA:  MOVF   x3C,W
08DBC:  SUBWF  x0F,W
08DBE:  BTFSC  FD8.0
08DC0:  BRA    8DC8
08DC2:  MOVLB  0
08DC4:  GOTO   8E1A
08DC8:  MOVLB  0
08DCA:  BTFSS  FD8.2
08DCC:  GOTO   8DE2
08DD0:  MOVLB  4
08DD2:  MOVF   x0E,W
08DD4:  SUBWF  x3B,W
08DD6:  BTFSS  FD8.0
08DD8:  BRA    8DE0
08DDA:  MOVLB  0
08DDC:  GOTO   8E1A
08DE0:  MOVLB  0
....................         subsector_4kByte_erase(smf, addr);
08DE2:  MOVFF  F5,868
08DE6:  MOVFF  F4,867
08DEA:  MOVFF  F3,866
08DEE:  MOVFF  F2,865
08DF2:  MOVFF  43E,86C
08DF6:  MOVFF  43D,86B
08DFA:  MOVFF  43C,86A
08DFE:  MOVFF  43B,869
08E02:  CALL   37D0
08E06:  MOVLW  10
08E08:  MOVLB  4
08E0A:  ADDWF  x3C,F
08E0C:  MOVLW  00
08E0E:  ADDWFC x3D,F
08E10:  MOVLW  00
08E12:  ADDWFC x3E,F
08E14:  MOVLB  0
08E16:  GOTO   8D2E
.................... 
....................     unsigned int32 remaining = write_size;
....................     unsigned int32 src_addr = write_src;
08E1A:  MOVFF  419,442
08E1E:  MOVFF  418,441
08E22:  MOVFF  417,440
08E26:  MOVFF  416,43F
08E2A:  MOVFF  415,446
08E2E:  MOVFF  414,445
08E32:  MOVFF  413,444
08E36:  MOVFF  412,443
....................     while (remaining > 0)
08E3A:  MOVLB  4
08E3C:  MOVF   x3F,F
08E3E:  BTFSC  FD8.2
08E40:  BRA    8E48
08E42:  MOVLB  0
08E44:  GOTO   8E7A
08E48:  MOVLB  0
08E4A:  MOVLB  4
08E4C:  MOVF   x40,F
08E4E:  BTFSC  FD8.2
08E50:  BRA    8E58
08E52:  MOVLB  0
08E54:  GOTO   8E7A
08E58:  MOVLB  0
08E5A:  MOVLB  4
08E5C:  MOVF   x41,F
08E5E:  BTFSC  FD8.2
08E60:  BRA    8E68
08E62:  MOVLB  0
08E64:  GOTO   8E7A
08E68:  MOVLB  0
08E6A:  MOVLB  4
08E6C:  MOVF   x42,F
08E6E:  BTFSS  FD8.2
08E70:  BRA    8E78
08E72:  MOVLB  0
08E74:  GOTO   8F94
08E78:  MOVLB  0
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
08E7A:  MOVLB  4
08E7C:  MOVF   x42,F
08E7E:  BTFSC  FD8.2
08E80:  BRA    8E88
08E82:  MOVLB  0
08E84:  GOTO   8EBC
08E88:  MOVLB  0
08E8A:  MOVLB  4
08E8C:  MOVF   x41,F
08E8E:  BTFSC  FD8.2
08E90:  BRA    8E98
08E92:  MOVLB  0
08E94:  GOTO   8EBC
08E98:  MOVLB  0
08E9A:  MOVLB  4
08E9C:  MOVF   x40,F
08E9E:  BTFSC  FD8.2
08EA0:  BRA    8EA8
08EA2:  MOVLB  0
08EA4:  GOTO   8EBC
08EA8:  MOVLB  0
08EAA:  MOVLB  4
08EAC:  MOVF   x3F,W
08EAE:  SUBLW  40
08EB0:  BTFSS  FD8.0
08EB2:  BRA    8EBA
08EB4:  MOVLB  0
08EB6:  GOTO   8EC4
08EBA:  MOVLB  0
08EBC:  CLRF   03
08EBE:  MOVLW  40
08EC0:  GOTO   8ECE
08EC4:  MOVFF  440,03
08EC8:  MOVLB  4
08ECA:  MOVF   x3F,W
08ECC:  MOVLB  0
08ECE:  MOVLB  4
08ED0:  MOVWF  x47
08ED2:  MOVFF  03,448
08ED6:  MOVLB  0
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
08ED8:  MOVFF  F1,4D0
08EDC:  MOVFF  F0,4CF
08EE0:  MOVFF  EF,4CE
08EE4:  MOVFF  EE,4CD
08EE8:  MOVFF  446,4D4
08EEC:  MOVFF  445,4D3
08EF0:  MOVFF  444,4D2
08EF4:  MOVFF  443,4D1
08EF8:  MOVLW  03
08EFA:  MOVLB  4
08EFC:  MOVWF  xD6
08EFE:  MOVLW  C2
08F00:  MOVWF  xD5
08F02:  CLRF   xDA
08F04:  CLRF   xD9
08F06:  MOVFF  448,4D8
08F0A:  MOVFF  447,4D7
08F0E:  MOVLB  0
08F10:  CALL   2442
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
08F14:  MOVFF  F5,868
08F18:  MOVFF  F4,867
08F1C:  MOVFF  F3,866
08F20:  MOVFF  F2,865
08F24:  MOVFF  42E,86C
08F28:  MOVFF  42D,86B
08F2C:  MOVFF  42C,86A
08F30:  MOVFF  42B,869
08F34:  MOVLW  03
08F36:  MOVLB  8
08F38:  MOVWF  x6E
08F3A:  MOVLW  C2
08F3C:  MOVWF  x6D
08F3E:  MOVFF  448,870
08F42:  MOVFF  447,86F
08F46:  MOVLB  0
08F48:  CALL   344C
....................         src_addr += chunk;
08F4C:  MOVLB  4
08F4E:  MOVF   x47,W
08F50:  ADDWF  x43,F
08F52:  MOVF   x48,W
08F54:  ADDWFC x44,F
08F56:  MOVLW  00
08F58:  ADDWFC x45,F
08F5A:  MOVLW  00
08F5C:  ADDWFC x46,F
....................         data_write_addr += chunk;
08F5E:  MOVF   x47,W
08F60:  ADDWF  x2B,F
08F62:  MOVF   x48,W
08F64:  ADDWFC x2C,F
08F66:  MOVLW  00
08F68:  ADDWFC x2D,F
08F6A:  MOVLW  00
08F6C:  ADDWFC x2E,F
....................         used_size += chunk;
08F6E:  MOVF   x47,W
08F70:  ADDWF  x1A,F
08F72:  MOVF   x48,W
08F74:  ADDWFC x1B,F
08F76:  MOVLW  00
08F78:  ADDWFC x1C,F
08F7A:  MOVLW  00
08F7C:  ADDWFC x1D,F
....................         remaining -= chunk;
08F7E:  MOVF   x47,W
08F80:  SUBWF  x3F,F
08F82:  MOVF   x48,W
08F84:  SUBWFB x40,F
08F86:  MOVLW  00
08F88:  SUBWFB x41,F
08F8A:  MOVLW  00
08F8C:  SUBWFB x42,F
08F8E:  MOVLB  0
08F90:  GOTO   8E3A
....................     }
....................     // write size area
....................     write_smf_header();
08F94:  GOTO   84D8
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
08F98:  MOVLW  6C
08F9A:  MOVWF  FF6
08F9C:  MOVLW  0B
08F9E:  MOVWF  FF7
08FA0:  MOVLW  00
08FA2:  MOVWF  FF8
08FA4:  MOVLW  0C
08FA6:  MOVLB  8
08FA8:  MOVWF  x25
08FAA:  MOVLB  0
08FAC:  CALL   1D48
08FB0:  MOVLW  41
08FB2:  MOVWF  FE9
08FB4:  MOVFF  41D,44E
08FB8:  MOVFF  41C,44D
08FBC:  MOVFF  41B,44C
08FC0:  MOVFF  41A,44B
08FC4:  CALL   82EC
08FC8:  MOVLW  0D
08FCA:  MOVLB  8
08FCC:  MOVWF  x68
08FCE:  MOVLB  0
08FD0:  CALL   1CC6
08FD4:  MOVLW  0A
08FD6:  MOVLB  8
08FD8:  MOVWF  x68
08FDA:  MOVLB  0
08FDC:  CALL   1CC6
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
08FE0:  MOVLW  7E
08FE2:  MOVWF  FF6
08FE4:  MOVLW  0B
08FE6:  MOVWF  FF7
08FE8:  MOVLW  00
08FEA:  MOVWF  FF8
08FEC:  MOVLW  0D
08FEE:  MOVLB  8
08FF0:  MOVWF  x25
08FF2:  MOVLB  0
08FF4:  CALL   1D48
08FF8:  MOVFF  41E,825
08FFC:  MOVLW  1B
08FFE:  MOVLB  8
09000:  MOVWF  x26
09002:  MOVLB  0
09004:  CALL   48E4
09008:  MOVLW  8D
0900A:  MOVWF  FF6
0900C:  MOVLW  0B
0900E:  MOVWF  FF7
09010:  MOVLW  00
09012:  MOVWF  FF8
09014:  MOVLW  04
09016:  MOVLB  8
09018:  MOVWF  x25
0901A:  MOVLB  0
0901C:  CALL   1D48
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
09020:  MOVLW  92
09022:  MOVWF  FF6
09024:  MOVLW  0B
09026:  MOVWF  FF7
09028:  MOVLW  00
0902A:  MOVWF  FF8
0902C:  CALL   1D18
....................     fprintf(PC, "____________________\r\n\r\n");
09030:  MOVLW  AC
09032:  MOVWF  FF6
09034:  MOVLW  0B
09036:  MOVWF  FF7
09038:  MOVLW  00
0903A:  MOVWF  FF8
0903C:  CALL   1D18
09040:  GOTO   9B28 (RETURN)
.................... }
.................... 
.................... void smf_read(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
09044:  MOVLW  C6
09046:  MOVWF  FF6
09048:  MOVLW  0B
0904A:  MOVWF  FF7
0904C:  MOVLW  00
0904E:  MOVWF  FF8
09050:  CALL   1D18
....................     fprintf(PC, "___Start SMF Read____\r\n");
09054:  MOVLW  E0
09056:  MOVWF  FF6
09058:  MOVLW  0B
0905A:  MOVWF  FF7
0905C:  MOVLW  00
0905E:  MOVWF  FF8
09060:  CALL   1D18
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
09064:  MOVLW  01
09066:  MOVLB  3
09068:  ADDWF  xC2,W
0906A:  MOVWF  FE9
0906C:  MOVLW  00
0906E:  ADDWFC xC3,W
09070:  MOVWF  FEA
09072:  MOVFF  FEF,41C
09076:  MOVFF  41C,452
0907A:  MOVLB  0
0907C:  CALL   7E2A
09080:  MOVFF  02,03
09084:  MOVF   01,W
09086:  MOVWF  FE1
09088:  MOVFF  03,FE2
0908C:  MOVLW  04
0908E:  MOVWF  FEA
09090:  MOVLW  04
09092:  MOVWF  FE9
09094:  MOVLW  08
09096:  MOVWF  01
09098:  MOVFF  FE6,FEE
0909C:  DECFSZ 01,F
0909E:  GOTO   9098
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
090A2:  MOVLW  01
090A4:  MOVLB  3
090A6:  ADDWF  xC2,W
090A8:  MOVWF  FE9
090AA:  MOVLW  00
090AC:  ADDWFC xC3,W
090AE:  MOVWF  FEA
090B0:  MOVFF  FEF,49
....................     unsigned int32 read_src = smf_data->src;
....................     unsigned int32 read_size = smf_data->size;
090B4:  MOVLW  02
090B6:  ADDWF  xC2,W
090B8:  MOVWF  FE9
090BA:  MOVLW  00
090BC:  ADDWFC xC3,W
090BE:  MOVWF  FEA
090C0:  MOVFF  FEF,40C
090C4:  MOVFF  FEC,40D
090C8:  MOVFF  FEC,40E
090CC:  MOVFF  FEC,40F
090D0:  MOVF   FED,F
090D2:  MOVF   FED,F
090D4:  MOVF   FED,F
090D6:  MOVLW  06
090D8:  ADDWF  xC2,W
090DA:  MOVWF  FE9
090DC:  MOVLW  00
090DE:  ADDWFC xC3,W
090E0:  MOVWF  FEA
090E2:  MOVFF  FEF,410
090E6:  MOVFF  FEC,411
090EA:  MOVFF  FEC,412
090EE:  MOVFF  FEC,413
090F2:  MOVF   FED,F
090F4:  MOVF   FED,F
090F6:  MOVF   FED,F
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_src);
090F8:  MOVLW  F8
090FA:  MOVWF  FF6
090FC:  MOVLW  0B
090FE:  MOVWF  FF7
09100:  MOVLW  00
09102:  MOVWF  FF8
09104:  MOVLW  21
09106:  MOVLB  8
09108:  MOVWF  x25
0910A:  MOVLB  0
0910C:  CALL   1D48
09110:  MOVFF  40F,4C7
09114:  MOVLW  37
09116:  MOVLB  4
09118:  MOVWF  xC8
0911A:  MOVLB  0
0911C:  CALL   1F0A
09120:  MOVFF  40E,4C7
09124:  MOVLW  37
09126:  MOVLB  4
09128:  MOVWF  xC8
0912A:  MOVLB  0
0912C:  CALL   1F0A
09130:  MOVFF  40D,4C7
09134:  MOVLW  37
09136:  MOVLB  4
09138:  MOVWF  xC8
0913A:  MOVLB  0
0913C:  CALL   1F0A
09140:  MOVFF  40C,4C7
09144:  MOVLW  37
09146:  MOVLB  4
09148:  MOVWF  xC8
0914A:  MOVLB  0
0914C:  CALL   1F0A
09150:  MOVLW  0D
09152:  MOVLB  8
09154:  MOVWF  x68
09156:  MOVLB  0
09158:  CALL   1CC6
0915C:  MOVLW  0A
0915E:  MOVLB  8
09160:  MOVWF  x68
09162:  MOVLB  0
09164:  CALL   1CC6
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
09168:  MOVLW  20
0916A:  MOVWF  FF6
0916C:  MOVLW  0C
0916E:  MOVWF  FF7
09170:  MOVLW  00
09172:  MOVWF  FF8
09174:  MOVLW  21
09176:  MOVLB  8
09178:  MOVWF  x25
0917A:  MOVLB  0
0917C:  CALL   1D48
09180:  MOVLW  41
09182:  MOVWF  FE9
09184:  MOVFF  413,44E
09188:  MOVFF  412,44D
0918C:  MOVFF  411,44C
09190:  MOVFF  410,44B
09194:  CALL   7FBA
09198:  MOVLW  44
0919A:  MOVWF  FF6
0919C:  MOVLW  0C
0919E:  MOVWF  FF7
091A0:  MOVLW  00
091A2:  MOVWF  FF8
091A4:  MOVLW  04
091A6:  MOVLB  8
091A8:  MOVWF  x25
091AA:  MOVLB  0
091AC:  CALL   1D48
091B0:  MOVFF  413,4C7
091B4:  MOVLW  57
091B6:  MOVLB  4
091B8:  MOVWF  xC8
091BA:  MOVLB  0
091BC:  CALL   1F0A
091C0:  MOVFF  412,4C7
091C4:  MOVLW  57
091C6:  MOVLB  4
091C8:  MOVWF  xC8
091CA:  MOVLB  0
091CC:  CALL   1F0A
091D0:  MOVFF  411,4C7
091D4:  MOVLW  57
091D6:  MOVLB  4
091D8:  MOVWF  xC8
091DA:  MOVLB  0
091DC:  CALL   1F0A
091E0:  MOVFF  410,4C7
091E4:  MOVLW  57
091E6:  MOVLB  4
091E8:  MOVWF  xC8
091EA:  MOVLB  0
091EC:  CALL   1F0A
091F0:  MOVLW  4B
091F2:  MOVWF  FF6
091F4:  MOVLW  0C
091F6:  MOVWF  FF7
091F8:  MOVLW  00
091FA:  MOVWF  FF8
091FC:  MOVLW  05
091FE:  MOVLB  8
09200:  MOVWF  x25
09202:  MOVLB  0
09204:  CALL   1D48
.................... 
....................     if (!is_connect(smf)){
09208:  MOVFF  F5,868
0920C:  MOVFF  F4,867
09210:  MOVFF  F3,866
09214:  MOVFF  F2,865
09218:  CALL   237C
0921C:  MOVF   01,F
0921E:  BTFSS  FD8.2
09220:  GOTO   9234
....................         fprintf(PC, "Error: SMF is not connected\r\n");
09224:  MOVLW  52
09226:  MOVWF  FF6
09228:  MOVLW  0C
0922A:  MOVWF  FF7
0922C:  MOVLW  00
0922E:  MOVWF  FF8
09230:  CALL   1D18
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
09234:  MOVLW  70
09236:  MOVWF  FF6
09238:  MOVLW  0C
0923A:  MOVWF  FF7
0923C:  MOVLW  00
0923E:  MOVWF  FF8
09240:  CALL   1D18
....................     for (unsigned int32 addr = read_src; addr < read_src + read_size; addr += PACKET_SIZE)
09244:  MOVFF  40F,417
09248:  MOVFF  40E,416
0924C:  MOVFF  40D,415
09250:  MOVFF  40C,414
09254:  MOVLB  4
09256:  MOVF   x10,W
09258:  ADDWF  x0C,W
0925A:  MOVWF  00
0925C:  MOVF   x11,W
0925E:  ADDWFC x0D,W
09260:  MOVWF  01
09262:  MOVF   x12,W
09264:  ADDWFC x0E,W
09266:  MOVWF  02
09268:  MOVF   x13,W
0926A:  ADDWFC x0F,W
0926C:  MOVWF  03
0926E:  MOVF   x17,W
09270:  SUBWF  03,W
09272:  BTFSC  FD8.0
09274:  BRA    927C
09276:  MOVLB  0
09278:  GOTO   93C2
0927C:  MOVLB  0
0927E:  BTFSS  FD8.2
09280:  GOTO   92C6
09284:  MOVLB  4
09286:  MOVF   x16,W
09288:  SUBWF  02,W
0928A:  BTFSC  FD8.0
0928C:  BRA    9294
0928E:  MOVLB  0
09290:  GOTO   93C2
09294:  MOVLB  0
09296:  BTFSS  FD8.2
09298:  GOTO   92C6
0929C:  MOVLB  4
0929E:  MOVF   x15,W
092A0:  SUBWF  01,W
092A2:  BTFSC  FD8.0
092A4:  BRA    92AC
092A6:  MOVLB  0
092A8:  GOTO   93C2
092AC:  MOVLB  0
092AE:  BTFSS  FD8.2
092B0:  GOTO   92C6
092B4:  MOVF   00,W
092B6:  MOVLB  4
092B8:  SUBWF  x14,W
092BA:  BTFSS  FD8.0
092BC:  BRA    92C4
092BE:  MOVLB  0
092C0:  GOTO   93C2
092C4:  MOVLB  0
....................     {
....................         read_data_bytes(smf, addr, buffer, PACKET_SIZE);
092C6:  MOVFF  F5,4D0
092CA:  MOVFF  F4,4CF
092CE:  MOVFF  F3,4CE
092D2:  MOVFF  F2,4CD
092D6:  MOVFF  417,4D4
092DA:  MOVFF  416,4D3
092DE:  MOVFF  415,4D2
092E2:  MOVFF  414,4D1
092E6:  MOVLW  03
092E8:  MOVLB  4
092EA:  MOVWF  xD6
092EC:  MOVLW  C4
092EE:  MOVWF  xD5
092F0:  CLRF   xDA
092F2:  CLRF   xD9
092F4:  CLRF   xD8
092F6:  MOVLW  40
092F8:  MOVWF  xD7
092FA:  MOVLB  0
092FC:  CALL   2442
....................         for (unsigned int32 i = 0; i < PACKET_SIZE; i++)
09300:  MOVLB  4
09302:  CLRF   x1B
09304:  CLRF   x1A
09306:  CLRF   x19
09308:  CLRF   x18
0930A:  MOVLB  0
0930C:  MOVLB  4
0930E:  MOVF   x1B,F
09310:  BTFSC  FD8.2
09312:  BRA    931A
09314:  MOVLB  0
09316:  GOTO   9392
0931A:  MOVLB  0
0931C:  MOVLB  4
0931E:  MOVF   x1A,F
09320:  BTFSC  FD8.2
09322:  BRA    932A
09324:  MOVLB  0
09326:  GOTO   9392
0932A:  MOVLB  0
0932C:  MOVLB  4
0932E:  MOVF   x19,F
09330:  BTFSC  FD8.2
09332:  BRA    933A
09334:  MOVLB  0
09336:  GOTO   9392
0933A:  MOVLB  0
0933C:  MOVLB  4
0933E:  MOVF   x18,W
09340:  SUBLW  3F
09342:  BTFSC  FD8.0
09344:  BRA    934C
09346:  MOVLB  0
09348:  GOTO   9392
0934C:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0934E:  MOVLW  C4
09350:  MOVLB  4
09352:  ADDWF  x18,W
09354:  MOVWF  FE9
09356:  MOVLW  03
09358:  ADDWFC x19,W
0935A:  MOVWF  FEA
0935C:  MOVFF  FEF,41C
09360:  MOVFF  41C,4C7
09364:  MOVLW  37
09366:  MOVWF  xC8
09368:  MOVLB  0
0936A:  CALL   1F0A
0936E:  MOVLW  20
09370:  MOVLB  8
09372:  MOVWF  x68
09374:  MOVLB  0
09376:  CALL   1CC6
0937A:  MOVLW  01
0937C:  MOVLB  4
0937E:  ADDWF  x18,F
09380:  BTFSC  FD8.0
09382:  INCF   x19,F
09384:  BTFSC  FD8.2
09386:  INCF   x1A,F
09388:  BTFSC  FD8.2
0938A:  INCF   x1B,F
0938C:  MOVLB  0
0938E:  GOTO   930C
....................         }
....................         fprintf(PC, "\r\n");
09392:  MOVLW  0D
09394:  MOVLB  8
09396:  MOVWF  x68
09398:  MOVLB  0
0939A:  CALL   1CC6
0939E:  MOVLW  0A
093A0:  MOVLB  8
093A2:  MOVWF  x68
093A4:  MOVLB  0
093A6:  CALL   1CC6
093AA:  MOVLW  40
093AC:  MOVLB  4
093AE:  ADDWF  x14,F
093B0:  MOVLW  00
093B2:  ADDWFC x15,F
093B4:  MOVLW  00
093B6:  ADDWFC x16,F
093B8:  MOVLW  00
093BA:  ADDWFC x17,F
093BC:  MOVLB  0
093BE:  GOTO   9254
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
093C2:  MOVLW  88
093C4:  MOVWF  FF6
093C6:  MOVLW  0C
093C8:  MOVWF  FF7
093CA:  MOVLW  00
093CC:  MOVWF  FF8
093CE:  CALL   1D18
....................     fprintf(PC, "____________________\r\n\r\n");
093D2:  MOVLW  A0
093D4:  MOVWF  FF6
093D6:  MOVLW  0C
093D8:  MOVWF  FF7
093DA:  MOVLW  00
093DC:  MOVWF  FF8
093DE:  CALL   1D18
093E2:  GOTO   9B56 (RETURN)
.................... }
.................... 
.................... void smf_erase(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
093E6:  MOVLW  BA
093E8:  MOVWF  FF6
093EA:  MOVLW  0C
093EC:  MOVWF  FF7
093EE:  MOVLW  00
093F0:  MOVWF  FF8
093F2:  CALL   1D18
....................     fprintf(PC, "___Start smf_erase____\r\n");
093F6:  MOVLW  D4
093F8:  MOVWF  FF6
093FA:  MOVLW  0C
093FC:  MOVWF  FF7
093FE:  MOVLW  00
09400:  MOVWF  FF8
09402:  CALL   1D18
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
09406:  MOVLW  01
09408:  MOVLB  3
0940A:  ADDWF  xC2,W
0940C:  MOVWF  FE9
0940E:  MOVLW  00
09410:  ADDWFC xC3,W
09412:  MOVWF  FEA
09414:  MOVFF  FEF,3DC
09418:  MOVFF  3DC,452
0941C:  MOVLB  0
0941E:  CALL   7E2A
09422:  MOVFF  02,03
09426:  MOVF   01,W
09428:  MOVWF  FE1
0942A:  MOVFF  03,FE2
0942E:  MOVLW  03
09430:  MOVWF  FEA
09432:  MOVLW  C4
09434:  MOVWF  FE9
09436:  MOVLW  08
09438:  MOVWF  01
0943A:  MOVFF  FE6,FEE
0943E:  DECFSZ 01,F
09440:  GOTO   943A
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
09444:  MOVLW  01
09446:  MOVLB  3
09448:  ADDWF  xC2,W
0944A:  MOVWF  FE9
0944C:  MOVLW  00
0944E:  ADDWFC xC3,W
09450:  MOVWF  FEA
09452:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 erase_src = smf_data->src;
....................     unsigned int32 erase_size = smf_data->size;
09456:  MOVFF  3C7,3CF
0945A:  MOVFF  3C6,3CE
0945E:  MOVFF  3C5,3CD
09462:  MOVFF  3C4,3CC
09466:  MOVFF  3CB,3D3
0946A:  MOVFF  3CA,3D2
0946E:  MOVFF  3C9,3D1
09472:  MOVFF  3C8,3D0
09476:  MOVLW  02
09478:  ADDWF  xC2,W
0947A:  MOVWF  FE9
0947C:  MOVLW  00
0947E:  ADDWFC xC3,W
09480:  MOVWF  FEA
09482:  MOVFF  FEF,3D4
09486:  MOVFF  FEC,3D5
0948A:  MOVFF  FEC,3D6
0948E:  MOVFF  FEC,3D7
09492:  MOVF   FED,F
09494:  MOVF   FED,F
09496:  MOVF   FED,F
09498:  MOVLW  06
0949A:  ADDWF  xC2,W
0949C:  MOVWF  FE9
0949E:  MOVLW  00
094A0:  ADDWFC xC3,W
094A2:  MOVWF  FEA
094A4:  MOVFF  FEF,3D8
094A8:  MOVFF  FEC,3D9
094AC:  MOVFF  FEC,3DA
094B0:  MOVFF  FEC,3DB
094B4:  MOVF   FED,F
094B6:  MOVF   FED,F
094B8:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
094BA:  MOVLW  EE
094BC:  MOVWF  FF6
094BE:  MOVLW  0C
094C0:  MOVWF  FF7
094C2:  MOVLW  00
094C4:  MOVWF  FF8
094C6:  MOVLW  25
094C8:  MOVLB  8
094CA:  MOVWF  x25
094CC:  MOVLB  0
094CE:  CALL   1D48
094D2:  MOVFF  3CF,4C7
094D6:  MOVLW  37
094D8:  MOVLB  4
094DA:  MOVWF  xC8
094DC:  MOVLB  0
094DE:  CALL   1F0A
094E2:  MOVFF  3CE,4C7
094E6:  MOVLW  37
094E8:  MOVLB  4
094EA:  MOVWF  xC8
094EC:  MOVLB  0
094EE:  CALL   1F0A
094F2:  MOVFF  3CD,4C7
094F6:  MOVLW  37
094F8:  MOVLB  4
094FA:  MOVWF  xC8
094FC:  MOVLB  0
094FE:  CALL   1F0A
09502:  MOVFF  3CC,4C7
09506:  MOVLW  37
09508:  MOVLB  4
0950A:  MOVWF  xC8
0950C:  MOVLB  0
0950E:  CALL   1F0A
09512:  MOVLW  0D
09514:  MOVLB  8
09516:  MOVWF  x68
09518:  MOVLB  0
0951A:  CALL   1CC6
0951E:  MOVLW  0A
09520:  MOVLB  8
09522:  MOVWF  x68
09524:  MOVLB  0
09526:  CALL   1CC6
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0952A:  MOVLW  1A
0952C:  MOVWF  FF6
0952E:  MOVLW  0D
09530:  MOVWF  FF7
09532:  MOVLW  00
09534:  MOVWF  FF8
09536:  MOVLW  25
09538:  MOVLB  8
0953A:  MOVWF  x25
0953C:  MOVLB  0
0953E:  CALL   1D48
09542:  MOVFF  3D3,4C7
09546:  MOVLW  37
09548:  MOVLB  4
0954A:  MOVWF  xC8
0954C:  MOVLB  0
0954E:  CALL   1F0A
09552:  MOVFF  3D2,4C7
09556:  MOVLW  37
09558:  MOVLB  4
0955A:  MOVWF  xC8
0955C:  MOVLB  0
0955E:  CALL   1F0A
09562:  MOVFF  3D1,4C7
09566:  MOVLW  37
09568:  MOVLB  4
0956A:  MOVWF  xC8
0956C:  MOVLB  0
0956E:  CALL   1F0A
09572:  MOVFF  3D0,4C7
09576:  MOVLW  37
09578:  MOVLB  4
0957A:  MOVWF  xC8
0957C:  MOVLB  0
0957E:  CALL   1F0A
09582:  MOVLW  0D
09584:  MOVLB  8
09586:  MOVWF  x68
09588:  MOVLB  0
0958A:  CALL   1CC6
0958E:  MOVLW  0A
09590:  MOVLB  8
09592:  MOVWF  x68
09594:  MOVLB  0
09596:  CALL   1CC6
....................     fprintf(PC, "In SMF Erase source data address: %LX\r\n", erase_src);
0959A:  MOVLW  46
0959C:  MOVWF  FF6
0959E:  MOVLW  0D
095A0:  MOVWF  FF7
095A2:  MOVLW  00
095A4:  MOVWF  FF8
095A6:  MOVLW  22
095A8:  MOVLB  8
095AA:  MOVWF  x25
095AC:  MOVLB  0
095AE:  CALL   1D48
095B2:  MOVFF  3D7,4C7
095B6:  MOVLW  37
095B8:  MOVLB  4
095BA:  MOVWF  xC8
095BC:  MOVLB  0
095BE:  CALL   1F0A
095C2:  MOVFF  3D6,4C7
095C6:  MOVLW  37
095C8:  MOVLB  4
095CA:  MOVWF  xC8
095CC:  MOVLB  0
095CE:  CALL   1F0A
095D2:  MOVFF  3D5,4C7
095D6:  MOVLW  37
095D8:  MOVLB  4
095DA:  MOVWF  xC8
095DC:  MOVLB  0
095DE:  CALL   1F0A
095E2:  MOVFF  3D4,4C7
095E6:  MOVLW  37
095E8:  MOVLB  4
095EA:  MOVWF  xC8
095EC:  MOVLB  0
095EE:  CALL   1F0A
095F2:  MOVLW  0D
095F4:  MOVLB  8
095F6:  MOVWF  x68
095F8:  MOVLB  0
095FA:  CALL   1CC6
095FE:  MOVLW  0A
09600:  MOVLB  8
09602:  MOVWF  x68
09604:  MOVLB  0
09606:  CALL   1CC6
....................     fprintf(PC, "In SMF Erase data size          : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0960A:  MOVLW  6E
0960C:  MOVWF  FF6
0960E:  MOVLW  0D
09610:  MOVWF  FF7
09612:  MOVLW  00
09614:  MOVWF  FF8
09616:  MOVLW  22
09618:  MOVLB  8
0961A:  MOVWF  x25
0961C:  MOVLB  0
0961E:  CALL   1D48
09622:  MOVLW  41
09624:  MOVWF  FE9
09626:  MOVFF  3DB,44E
0962A:  MOVFF  3DA,44D
0962E:  MOVFF  3D9,44C
09632:  MOVFF  3D8,44B
09636:  CALL   7FBA
0963A:  MOVLW  93
0963C:  MOVWF  FF6
0963E:  MOVLW  0D
09640:  MOVWF  FF7
09642:  MOVLW  00
09644:  MOVWF  FF8
09646:  MOVLW  04
09648:  MOVLB  8
0964A:  MOVWF  x25
0964C:  MOVLB  0
0964E:  CALL   1D48
09652:  MOVFF  3DB,4C7
09656:  MOVLW  57
09658:  MOVLB  4
0965A:  MOVWF  xC8
0965C:  MOVLB  0
0965E:  CALL   1F0A
09662:  MOVFF  3DA,4C7
09666:  MOVLW  57
09668:  MOVLB  4
0966A:  MOVWF  xC8
0966C:  MOVLB  0
0966E:  CALL   1F0A
09672:  MOVFF  3D9,4C7
09676:  MOVLW  57
09678:  MOVLB  4
0967A:  MOVWF  xC8
0967C:  MOVLB  0
0967E:  CALL   1F0A
09682:  MOVFF  3D8,4C7
09686:  MOVLW  57
09688:  MOVLB  4
0968A:  MOVWF  xC8
0968C:  MOVLB  0
0968E:  CALL   1F0A
09692:  MOVLW  9A
09694:  MOVWF  FF6
09696:  MOVLW  0D
09698:  MOVWF  FF7
0969A:  MOVLW  00
0969C:  MOVWF  FF8
0969E:  MOVLW  05
096A0:  MOVLB  8
096A2:  MOVWF  x25
096A4:  MOVLB  0
096A6:  CALL   1D48
.................... 
....................     if (!is_connect(smf)){
096AA:  MOVFF  F5,868
096AE:  MOVFF  F4,867
096B2:  MOVFF  F3,866
096B6:  MOVFF  F2,865
096BA:  CALL   237C
096BE:  MOVF   01,F
096C0:  BTFSS  FD8.2
096C2:  GOTO   96DA
....................         fprintf(PC, "Error: SMF is not connected\r\n");
096C6:  MOVLW  A0
096C8:  MOVWF  FF6
096CA:  MOVLW  0D
096CC:  MOVWF  FF7
096CE:  MOVLW  00
096D0:  MOVWF  FF8
096D2:  CALL   1D18
....................         return;
096D6:  GOTO   9A14
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_src < mis_start_address || erase_src >= mis_end_address) {
096DA:  MOVLB  3
096DC:  MOVF   xD7,W
096DE:  SUBWF  xCF,W
096E0:  BTFSC  FD8.0
096E2:  BRA    96EA
096E4:  MOVLB  0
096E6:  GOTO   9734
096EA:  MOVLB  0
096EC:  BTFSS  FD8.2
096EE:  GOTO   978E
096F2:  MOVLB  3
096F4:  MOVF   xD6,W
096F6:  SUBWF  xCE,W
096F8:  BTFSC  FD8.0
096FA:  BRA    9702
096FC:  MOVLB  0
096FE:  GOTO   9734
09702:  MOVLB  0
09704:  BTFSS  FD8.2
09706:  GOTO   978E
0970A:  MOVLB  3
0970C:  MOVF   xD5,W
0970E:  SUBWF  xCD,W
09710:  BTFSC  FD8.0
09712:  BRA    971A
09714:  MOVLB  0
09716:  GOTO   9734
0971A:  MOVLB  0
0971C:  BTFSS  FD8.2
0971E:  GOTO   978E
09722:  MOVLB  3
09724:  MOVF   xCC,W
09726:  SUBWF  xD4,W
09728:  BTFSC  FD8.0
0972A:  BRA    9732
0972C:  MOVLB  0
0972E:  GOTO   978E
09732:  MOVLB  0
09734:  MOVLB  3
09736:  MOVF   xD3,W
09738:  SUBWF  xD7,W
0973A:  BTFSC  FD8.0
0973C:  BRA    9744
0973E:  MOVLB  0
09740:  GOTO   98B2
09744:  MOVLB  0
09746:  BTFSS  FD8.2
09748:  GOTO   978E
0974C:  MOVLB  3
0974E:  MOVF   xD2,W
09750:  SUBWF  xD6,W
09752:  BTFSC  FD8.0
09754:  BRA    975C
09756:  MOVLB  0
09758:  GOTO   98B2
0975C:  MOVLB  0
0975E:  BTFSS  FD8.2
09760:  GOTO   978E
09764:  MOVLB  3
09766:  MOVF   xD1,W
09768:  SUBWF  xD5,W
0976A:  BTFSC  FD8.0
0976C:  BRA    9774
0976E:  MOVLB  0
09770:  GOTO   98B2
09774:  MOVLB  0
09776:  BTFSS  FD8.2
09778:  GOTO   978E
0977C:  MOVLB  3
0977E:  MOVF   xD0,W
09780:  SUBWF  xD4,W
09782:  BTFSC  FD8.0
09784:  BRA    978C
09786:  MOVLB  0
09788:  GOTO   98B2
0978C:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_src, mis_start_address, mis_end_address);
0978E:  MOVLW  BE
09790:  MOVWF  FF6
09792:  MOVLW  0D
09794:  MOVWF  FF7
09796:  MOVLW  00
09798:  MOVWF  FF8
0979A:  MOVLW  1E
0979C:  MOVLB  8
0979E:  MOVWF  x25
097A0:  MOVLB  0
097A2:  CALL   1D48
097A6:  MOVFF  3D7,4C7
097AA:  MOVLW  37
097AC:  MOVLB  4
097AE:  MOVWF  xC8
097B0:  MOVLB  0
097B2:  CALL   1F0A
097B6:  MOVFF  3D6,4C7
097BA:  MOVLW  37
097BC:  MOVLB  4
097BE:  MOVWF  xC8
097C0:  MOVLB  0
097C2:  CALL   1F0A
097C6:  MOVFF  3D5,4C7
097CA:  MOVLW  37
097CC:  MOVLB  4
097CE:  MOVWF  xC8
097D0:  MOVLB  0
097D2:  CALL   1F0A
097D6:  MOVFF  3D4,4C7
097DA:  MOVLW  37
097DC:  MOVLB  4
097DE:  MOVWF  xC8
097E0:  MOVLB  0
097E2:  CALL   1F0A
097E6:  MOVLW  DF
097E8:  MOVWF  FF6
097EA:  MOVLW  0D
097EC:  MOVWF  FF7
097EE:  MOVLW  00
097F0:  MOVWF  FF8
097F2:  MOVLW  1D
097F4:  MOVLB  8
097F6:  MOVWF  x25
097F8:  MOVLB  0
097FA:  CALL   1D48
097FE:  MOVFF  3CF,4C7
09802:  MOVLW  37
09804:  MOVLB  4
09806:  MOVWF  xC8
09808:  MOVLB  0
0980A:  CALL   1F0A
0980E:  MOVFF  3CE,4C7
09812:  MOVLW  37
09814:  MOVLB  4
09816:  MOVWF  xC8
09818:  MOVLB  0
0981A:  CALL   1F0A
0981E:  MOVFF  3CD,4C7
09822:  MOVLW  37
09824:  MOVLB  4
09826:  MOVWF  xC8
09828:  MOVLB  0
0982A:  CALL   1F0A
0982E:  MOVFF  3CC,4C7
09832:  MOVLW  37
09834:  MOVLB  4
09836:  MOVWF  xC8
09838:  MOVLB  0
0983A:  CALL   1F0A
0983E:  MOVLW  FF
09840:  MOVWF  FF6
09842:  MOVLW  0D
09844:  MOVWF  FF7
09846:  MOVLW  00
09848:  MOVWF  FF8
0984A:  MOVLW  05
0984C:  MOVLB  8
0984E:  MOVWF  x25
09850:  MOVLB  0
09852:  CALL   1D48
09856:  MOVFF  3D3,4C7
0985A:  MOVLW  37
0985C:  MOVLB  4
0985E:  MOVWF  xC8
09860:  MOVLB  0
09862:  CALL   1F0A
09866:  MOVFF  3D2,4C7
0986A:  MOVLW  37
0986C:  MOVLB  4
0986E:  MOVWF  xC8
09870:  MOVLB  0
09872:  CALL   1F0A
09876:  MOVFF  3D1,4C7
0987A:  MOVLW  37
0987C:  MOVLB  4
0987E:  MOVWF  xC8
09880:  MOVLB  0
09882:  CALL   1F0A
09886:  MOVFF  3D0,4C7
0988A:  MOVLW  37
0988C:  MOVLB  4
0988E:  MOVWF  xC8
09890:  MOVLB  0
09892:  CALL   1F0A
09896:  MOVLW  07
09898:  MOVWF  FF6
0989A:  MOVLW  0E
0989C:  MOVWF  FF7
0989E:  MOVLW  00
098A0:  MOVWF  FF8
098A2:  MOVLW  03
098A4:  MOVLB  8
098A6:  MOVWF  x25
098A8:  MOVLB  0
098AA:  CALL   1D48
....................         return;
098AE:  GOTO   9A14
....................     }
....................     
....................     if ((erase_src + erase_size) > mis_end_address) {
098B2:  MOVLB  3
098B4:  MOVF   xD8,W
098B6:  ADDWF  xD4,W
098B8:  MOVWF  xDC
098BA:  MOVF   xD9,W
098BC:  ADDWFC xD5,W
098BE:  MOVWF  xDD
098C0:  MOVF   xDA,W
098C2:  ADDWFC xD6,W
098C4:  MOVWF  xDE
098C6:  MOVF   xDB,W
098C8:  ADDWFC xD7,W
098CA:  MOVWF  xDF
098CC:  MOVF   xD3,W
098CE:  SUBWF  xDF,W
098D0:  BTFSC  FD8.0
098D2:  BRA    98DA
098D4:  MOVLB  0
098D6:  GOTO   99C0
098DA:  MOVLB  0
098DC:  BTFSS  FD8.2
098DE:  GOTO   9924
098E2:  MOVLB  3
098E4:  MOVF   xD2,W
098E6:  SUBWF  xDE,W
098E8:  BTFSC  FD8.0
098EA:  BRA    98F2
098EC:  MOVLB  0
098EE:  GOTO   99C0
098F2:  MOVLB  0
098F4:  BTFSS  FD8.2
098F6:  GOTO   9924
098FA:  MOVLB  3
098FC:  MOVF   xD1,W
098FE:  SUBWF  xDD,W
09900:  BTFSC  FD8.0
09902:  BRA    990A
09904:  MOVLB  0
09906:  GOTO   99C0
0990A:  MOVLB  0
0990C:  BTFSS  FD8.2
0990E:  GOTO   9924
09912:  MOVLB  3
09914:  MOVF   xDC,W
09916:  SUBWF  xD0,W
09918:  BTFSS  FD8.0
0991A:  BRA    9922
0991C:  MOVLB  0
0991E:  GOTO   99C0
09922:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mis_end_address);
09924:  MOVLW  0C
09926:  MOVWF  FF6
09928:  MOVLW  0E
0992A:  MOVWF  FF7
0992C:  MOVLW  00
0992E:  MOVWF  FF8
09930:  MOVLW  3A
09932:  MOVLB  8
09934:  MOVWF  x25
09936:  MOVLB  0
09938:  CALL   1D48
0993C:  MOVFF  3D3,4C7
09940:  MOVLW  37
09942:  MOVLB  4
09944:  MOVWF  xC8
09946:  MOVLB  0
09948:  CALL   1F0A
0994C:  MOVFF  3D2,4C7
09950:  MOVLW  37
09952:  MOVLB  4
09954:  MOVWF  xC8
09956:  MOVLB  0
09958:  CALL   1F0A
0995C:  MOVFF  3D1,4C7
09960:  MOVLW  37
09962:  MOVLB  4
09964:  MOVWF  xC8
09966:  MOVLB  0
09968:  CALL   1F0A
0996C:  MOVFF  3D0,4C7
09970:  MOVLW  37
09972:  MOVLB  4
09974:  MOVWF  xC8
09976:  MOVLB  0
09978:  CALL   1F0A
0997C:  MOVLW  0D
0997E:  MOVLB  8
09980:  MOVWF  x68
09982:  MOVLB  0
09984:  CALL   1CC6
09988:  MOVLW  0A
0998A:  MOVLB  8
0998C:  MOVWF  x68
0998E:  MOVLB  0
09990:  CALL   1CC6
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
09994:  MOVLW  4C
09996:  MOVWF  FF6
09998:  MOVLW  0E
0999A:  MOVWF  FF7
0999C:  MOVLW  00
0999E:  MOVWF  FF8
099A0:  CALL   1D18
....................         erase_size = mis_end_address - erase_src;
099A4:  MOVLB  3
099A6:  MOVF   xD4,W
099A8:  SUBWF  xD0,W
099AA:  MOVWF  xD8
099AC:  MOVF   xD5,W
099AE:  SUBWFB xD1,W
099B0:  MOVWF  xD9
099B2:  MOVF   xD6,W
099B4:  SUBWFB xD2,W
099B6:  MOVWF  xDA
099B8:  MOVF   xD7,W
099BA:  SUBWFB xD3,W
099BC:  MOVWF  xDB
099BE:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
099C0:  MOVLW  80
099C2:  MOVWF  FF6
099C4:  MOVLW  0E
099C6:  MOVWF  FF7
099C8:  MOVLW  00
099CA:  MOVWF  FF8
099CC:  CALL   1D18
....................     subsector_4kByte_erase(smf, erase_src);
099D0:  MOVFF  F5,868
099D4:  MOVFF  F4,867
099D8:  MOVFF  F3,866
099DC:  MOVFF  F2,865
099E0:  MOVFF  3D7,86C
099E4:  MOVFF  3D6,86B
099E8:  MOVFF  3D5,86A
099EC:  MOVFF  3D4,869
099F0:  CALL   37D0
....................     
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
099F4:  MOVLW  B2
099F6:  MOVWF  FF6
099F8:  MOVLW  0E
099FA:  MOVWF  FF7
099FC:  MOVLW  00
099FE:  MOVWF  FF8
09A00:  CALL   1D18
....................     fprintf(PC, "____________________\r\n\r\n");
09A04:  MOVLW  CC
09A06:  MOVWF  FF6
09A08:  MOVLW  0E
09A0A:  MOVWF  FF7
09A0C:  MOVLW  00
09A0E:  MOVWF  FF8
09A10:  CALL   1D18
09A14:  GOTO   9B84 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.meas;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0265A:  MOVLW  52
0265C:  MOVWF  FF6
0265E:  MOVLW  0F
02660:  MOVWF  FF7
02662:  MOVLW  00
02664:  MOVWF  FF8
02666:  CALL   1D18
.................... 
....................     output_high(MIS_FM_CS);
0266A:  BCF    F92.5
0266C:  BSF    F89.5
....................     output_high(SMF_CS);
0266E:  BCF    F92.2
02670:  BSF    F89.2
....................     delay_ms(100); 
02672:  MOVLW  64
02674:  MOVLB  8
02676:  MOVWF  x7D
02678:  MOVLB  0
0267A:  CALL   1C98
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
0267E:  MOVLW  9F
02680:  MOVLB  4
02682:  MOVWF  x1B
....................     output_low(mis_fm.cs_pin);
02684:  MOVFF  F0,883
02688:  MOVLB  8
0268A:  CLRF   x84
0268C:  MOVLW  0F
0268E:  MOVWF  x86
02690:  MOVLW  89
02692:  MOVWF  x85
02694:  MOVLB  0
02696:  CALL   2072
0269A:  MOVFF  F0,883
0269E:  MOVLB  8
026A0:  CLRF   x84
026A2:  MOVLW  0F
026A4:  MOVWF  x86
026A6:  MOVLW  92
026A8:  MOVWF  x85
026AA:  MOVLB  0
026AC:  CALL   2072
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
026B0:  MOVFF  F1,886
026B4:  MOVFF  F0,885
026B8:  MOVFF  EF,884
026BC:  MOVFF  EE,883
026C0:  MOVLW  04
026C2:  MOVLB  8
026C4:  MOVWF  x88
026C6:  MOVLW  1B
026C8:  MOVWF  x87
026CA:  CLRF   x8A
026CC:  MOVLW  01
026CE:  MOVWF  x89
026D0:  MOVLW  04
026D2:  MOVWF  x8C
026D4:  MOVLW  07
026D6:  MOVWF  x8B
026D8:  CLRF   x90
026DA:  CLRF   x8F
026DC:  CLRF   x8E
026DE:  MOVLW  14
026E0:  MOVWF  x8D
026E2:  MOVLB  0
026E4:  CALL   2156
....................     output_high(mis_fm.cs_pin);
026E8:  MOVFF  F0,883
026EC:  MOVLW  01
026EE:  MOVLB  8
026F0:  MOVWF  x84
026F2:  MOVLW  0F
026F4:  MOVWF  x86
026F6:  MOVLW  89
026F8:  MOVWF  x85
026FA:  MOVLB  0
026FC:  CALL   2072
02700:  MOVFF  F0,883
02704:  MOVLB  8
02706:  CLRF   x84
02708:  MOVLW  0F
0270A:  MOVWF  x86
0270C:  MOVLW  92
0270E:  MOVWF  x85
02710:  MOVLB  0
02712:  CALL   2072
....................     fprintf(PC, "\t[MIS FM]READ ID:");
02716:  MOVLW  6E
02718:  MOVWF  FF6
0271A:  MOVLW  0F
0271C:  MOVWF  FF7
0271E:  MOVLW  00
02720:  MOVWF  FF8
02722:  CALL   1D18
....................     for (unsigned int8 index = 0; index < 4; index++)
02726:  MOVLB  4
02728:  CLRF   x1C
0272A:  MOVLB  0
0272C:  MOVLB  4
0272E:  MOVF   x1C,W
02730:  SUBLW  03
02732:  BTFSC  FD8.0
02734:  BRA    273C
02736:  MOVLB  0
02738:  GOTO   2776
0273C:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
0273E:  CLRF   03
02740:  MOVLB  4
02742:  MOVF   x1C,W
02744:  ADDLW  07
02746:  MOVWF  FE9
02748:  MOVLW  04
0274A:  ADDWFC 03,W
0274C:  MOVWF  FEA
0274E:  MOVFF  FEF,45E
02752:  MOVFF  45E,4C7
02756:  MOVLW  37
02758:  MOVWF  xC8
0275A:  MOVLB  0
0275C:  CALL   1F0A
02760:  MOVLW  20
02762:  MOVLB  8
02764:  MOVWF  x68
02766:  MOVLB  0
02768:  CALL   1CC6
0276C:  MOVLB  4
0276E:  INCF   x1C,F
02770:  MOVLB  0
02772:  GOTO   272C
....................     }
....................     fprintf(PC,"\r\n");
02776:  MOVLW  0D
02778:  MOVLB  8
0277A:  MOVWF  x68
0277C:  MOVLB  0
0277E:  CALL   1CC6
02782:  MOVLW  0A
02784:  MOVLB  8
02786:  MOVWF  x68
02788:  MOVLB  0
0278A:  CALL   1CC6
.................... 
....................     output_low(smf.cs_pin);
0278E:  MOVFF  F4,883
02792:  MOVLB  8
02794:  CLRF   x84
02796:  MOVLW  0F
02798:  MOVWF  x86
0279A:  MOVLW  89
0279C:  MOVWF  x85
0279E:  MOVLB  0
027A0:  CALL   2072
027A4:  MOVFF  F4,883
027A8:  MOVLB  8
027AA:  CLRF   x84
027AC:  MOVLW  0F
027AE:  MOVWF  x86
027B0:  MOVLW  92
027B2:  MOVWF  x85
027B4:  MOVLB  0
027B6:  CALL   2072
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
027BA:  MOVFF  F5,886
027BE:  MOVFF  F4,885
027C2:  MOVFF  F3,884
027C6:  MOVFF  F2,883
027CA:  MOVLW  04
027CC:  MOVLB  8
027CE:  MOVWF  x88
027D0:  MOVLW  1B
027D2:  MOVWF  x87
027D4:  CLRF   x8A
027D6:  MOVLW  01
027D8:  MOVWF  x89
027DA:  MOVLW  04
027DC:  MOVWF  x8C
027DE:  MOVLW  07
027E0:  MOVWF  x8B
027E2:  CLRF   x90
027E4:  CLRF   x8F
027E6:  CLRF   x8E
027E8:  MOVLW  14
027EA:  MOVWF  x8D
027EC:  MOVLB  0
027EE:  CALL   2156
....................     output_high(smf.cs_pin);
027F2:  MOVFF  F4,883
027F6:  MOVLW  01
027F8:  MOVLB  8
027FA:  MOVWF  x84
027FC:  MOVLW  0F
027FE:  MOVWF  x86
02800:  MOVLW  89
02802:  MOVWF  x85
02804:  MOVLB  0
02806:  CALL   2072
0280A:  MOVFF  F4,883
0280E:  MOVLB  8
02810:  CLRF   x84
02812:  MOVLW  0F
02814:  MOVWF  x86
02816:  MOVLW  92
02818:  MOVWF  x85
0281A:  MOVLB  0
0281C:  CALL   2072
....................     fprintf(PC, "\t[SMF]\tREAD ID:");
02820:  MOVLW  80
02822:  MOVWF  FF6
02824:  MOVLW  0F
02826:  MOVWF  FF7
02828:  MOVLW  00
0282A:  MOVWF  FF8
0282C:  CALL   1D18
....................     for (unsigned int8 index = 0; index < 4; index++)
02830:  MOVLB  4
02832:  CLRF   x1D
02834:  MOVLB  0
02836:  MOVLB  4
02838:  MOVF   x1D,W
0283A:  SUBLW  03
0283C:  BTFSC  FD8.0
0283E:  BRA    2846
02840:  MOVLB  0
02842:  GOTO   2880
02846:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02848:  CLRF   03
0284A:  MOVLB  4
0284C:  MOVF   x1D,W
0284E:  ADDLW  07
02850:  MOVWF  FE9
02852:  MOVLW  04
02854:  ADDWFC 03,W
02856:  MOVWF  FEA
02858:  MOVFF  FEF,45E
0285C:  MOVFF  45E,4C7
02860:  MOVLW  37
02862:  MOVWF  xC8
02864:  MOVLB  0
02866:  CALL   1F0A
0286A:  MOVLW  20
0286C:  MOVLB  8
0286E:  MOVWF  x68
02870:  MOVLB  0
02872:  CALL   1CC6
02876:  MOVLB  4
02878:  INCF   x1D,F
0287A:  MOVLB  0
0287C:  GOTO   2836
....................     }
....................     fprintf(PC,"\r\n");
02880:  MOVLW  0D
02882:  MOVLB  8
02884:  MOVWF  x68
02886:  MOVLB  0
02888:  CALL   1CC6
0288C:  MOVLW  0A
0288E:  MOVLB  8
02890:  MOVWF  x68
02892:  MOVLB  0
02894:  CALL   1CC6
.................... 
....................     if (!is_connect(smf)) {
02898:  MOVFF  F5,868
0289C:  MOVFF  F4,867
028A0:  MOVFF  F3,866
028A4:  MOVFF  F2,865
028A8:  CALL   237C
028AC:  MOVF   01,F
028AE:  BTFSS  FD8.2
028B0:  GOTO   28C8
....................         fprintf(PC, "\t[SMF]\tconnect error!\r\n");
028B4:  MOVLW  90
028B6:  MOVWF  FF6
028B8:  MOVLW  0F
028BA:  MOVWF  FF7
028BC:  MOVLW  00
028BE:  MOVWF  FF8
028C0:  CALL   1D18
....................         // return;
....................     }else {
028C4:  GOTO   28D8
....................         fprintf(PC, "\t[SMF]\tis connected\r\n");
028C8:  MOVLW  A8
028CA:  MOVWF  FF6
028CC:  MOVLW  0F
028CE:  MOVWF  FF7
028D0:  MOVLW  00
028D2:  MOVWF  FF8
028D4:  CALL   1D18
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
028D8:  MOVLW  64
028DA:  MOVLB  8
028DC:  MOVWF  x7D
028DE:  MOVLB  0
028E0:  CALL   1C98
....................     if (!is_connect(mis_fm)) {
028E4:  MOVFF  F1,868
028E8:  MOVFF  F0,867
028EC:  MOVFF  EF,866
028F0:  MOVFF  EE,865
028F4:  CALL   237C
028F8:  MOVF   01,F
028FA:  BTFSS  FD8.2
028FC:  GOTO   2914
....................         fprintf(PC, "\t[MIS FM]connect error!\r\n");
02900:  MOVLW  BE
02902:  MOVWF  FF6
02904:  MOVLW  0F
02906:  MOVWF  FF7
02908:  MOVLW  00
0290A:  MOVWF  FF8
0290C:  CALL   1D18
....................     }else {
02910:  GOTO   2924
....................         fprintf(PC, "\t[MIS FM]is connected\r\n");
02914:  MOVLW  D8
02916:  MOVWF  FF6
02918:  MOVLW  0F
0291A:  MOVWF  FF7
0291C:  MOVLW  00
0291E:  MOVWF  FF8
02920:  CALL   1D18
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
02924:  MOVFF  F1,4D0
02928:  MOVFF  F0,4CF
0292C:  MOVFF  EF,4CE
02930:  MOVFF  EE,4CD
02934:  MOVLB  4
02936:  CLRF   xD4
02938:  CLRF   xD3
0293A:  CLRF   xD2
0293C:  CLRF   xD1
0293E:  MOVLW  04
02940:  MOVWF  xD6
02942:  MOVLW  1E
02944:  MOVWF  xD5
02946:  CLRF   xDA
02948:  CLRF   xD9
0294A:  CLRF   xD8
0294C:  MOVLW  40
0294E:  MOVWF  xD7
02950:  MOVLB  0
02952:  CALL   2442
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
02956:  MOVLB  4
02958:  CLRF   x61
0295A:  CLRF   x60
0295C:  CLRF   x5F
0295E:  MOVFF  41E,45E
02962:  MOVFF  45E,461
02966:  CLRF   x5E
02968:  CLRF   x5F
0296A:  CLRF   x60
0296C:  CLRF   x66
0296E:  CLRF   x65
02970:  CLRF   x64
02972:  MOVFF  41F,463
02976:  MOVFF  464,03
0297A:  MOVFF  463,02
0297E:  CLRF   00
02980:  CLRF   01
02982:  MOVF   00,W
02984:  IORWF  x5E,F
02986:  MOVF   01,W
02988:  IORWF  x5F,F
0298A:  MOVF   02,W
0298C:  IORWF  x60,F
0298E:  MOVF   03,W
02990:  IORWF  x61,F
02992:  CLRF   x66
02994:  CLRF   x65
02996:  CLRF   x64
02998:  MOVFF  420,463
0299C:  MOVFF  465,03
029A0:  MOVFF  464,02
029A4:  MOVFF  463,01
029A8:  CLRF   00
029AA:  MOVF   00,W
029AC:  IORWF  x5E,F
029AE:  MOVF   01,W
029B0:  IORWF  x5F,F
029B2:  MOVF   02,W
029B4:  IORWF  x60,F
029B6:  MOVF   03,W
029B8:  IORWF  x61,F
029BA:  MOVFF  421,00
029BE:  CLRF   01
029C0:  CLRF   02
029C2:  CLRF   03
029C4:  MOVF   00,W
029C6:  IORWF  x5E,W
029C8:  MOVLB  3
029CA:  MOVWF  x60
029CC:  MOVF   01,W
029CE:  MOVLB  4
029D0:  IORWF  x5F,W
029D2:  MOVLB  3
029D4:  MOVWF  x61
029D6:  MOVF   02,W
029D8:  MOVLB  4
029DA:  IORWF  x60,W
029DC:  MOVLB  3
029DE:  MOVWF  x62
029E0:  MOVF   03,W
029E2:  MOVLB  4
029E4:  IORWF  x61,W
029E6:  MOVLB  3
029E8:  MOVWF  x63
....................     smf_piclog_loop_counter = readdata[4];
029EA:  MOVFF  422,364
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
029EE:  MOVLB  4
029F0:  CLRF   x61
029F2:  CLRF   x60
029F4:  CLRF   x5F
029F6:  MOVFF  423,45E
029FA:  MOVFF  45E,461
029FE:  CLRF   x5E
02A00:  CLRF   x5F
02A02:  CLRF   x60
02A04:  CLRF   x66
02A06:  CLRF   x65
02A08:  CLRF   x64
02A0A:  MOVFF  424,463
02A0E:  MOVFF  464,03
02A12:  MOVFF  463,02
02A16:  CLRF   00
02A18:  CLRF   01
02A1A:  MOVF   00,W
02A1C:  IORWF  x5E,F
02A1E:  MOVF   01,W
02A20:  IORWF  x5F,F
02A22:  MOVF   02,W
02A24:  IORWF  x60,F
02A26:  MOVF   03,W
02A28:  IORWF  x61,F
02A2A:  CLRF   x66
02A2C:  CLRF   x65
02A2E:  CLRF   x64
02A30:  MOVFF  425,463
02A34:  MOVFF  465,03
02A38:  MOVFF  464,02
02A3C:  MOVFF  463,01
02A40:  CLRF   00
02A42:  MOVF   00,W
02A44:  IORWF  x5E,F
02A46:  MOVF   01,W
02A48:  IORWF  x5F,F
02A4A:  MOVF   02,W
02A4C:  IORWF  x60,F
02A4E:  MOVF   03,W
02A50:  IORWF  x61,F
02A52:  MOVFF  426,00
02A56:  CLRF   01
02A58:  CLRF   02
02A5A:  CLRF   03
02A5C:  MOVF   00,W
02A5E:  IORWF  x5E,W
02A60:  MOVLB  3
02A62:  MOVWF  x65
02A64:  MOVF   01,W
02A66:  MOVLB  4
02A68:  IORWF  x5F,W
02A6A:  MOVLB  3
02A6C:  MOVWF  x66
02A6E:  MOVF   02,W
02A70:  MOVLB  4
02A72:  IORWF  x60,W
02A74:  MOVLB  3
02A76:  MOVWF  x67
02A78:  MOVF   03,W
02A7A:  MOVLB  4
02A7C:  IORWF  x61,W
02A7E:  MOVLB  3
02A80:  MOVWF  x68
....................     smf_meas_loop_counter = readdata[9];
02A82:  MOVFF  427,369
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
02A86:  MOVLB  4
02A88:  CLRF   x61
02A8A:  CLRF   x60
02A8C:  CLRF   x5F
02A8E:  MOVFF  428,45E
02A92:  MOVFF  45E,461
02A96:  CLRF   x5E
02A98:  CLRF   x5F
02A9A:  CLRF   x60
02A9C:  CLRF   x66
02A9E:  CLRF   x65
02AA0:  CLRF   x64
02AA2:  MOVFF  429,463
02AA6:  MOVFF  464,03
02AAA:  MOVFF  463,02
02AAE:  CLRF   00
02AB0:  CLRF   01
02AB2:  MOVF   00,W
02AB4:  IORWF  x5E,F
02AB6:  MOVF   01,W
02AB8:  IORWF  x5F,F
02ABA:  MOVF   02,W
02ABC:  IORWF  x60,F
02ABE:  MOVF   03,W
02AC0:  IORWF  x61,F
02AC2:  CLRF   x66
02AC4:  CLRF   x65
02AC6:  CLRF   x64
02AC8:  MOVFF  42A,463
02ACC:  MOVFF  465,03
02AD0:  MOVFF  464,02
02AD4:  MOVFF  463,01
02AD8:  CLRF   00
02ADA:  MOVF   00,W
02ADC:  IORWF  x5E,F
02ADE:  MOVF   01,W
02AE0:  IORWF  x5F,F
02AE2:  MOVF   02,W
02AE4:  IORWF  x60,F
02AE6:  MOVF   03,W
02AE8:  IORWF  x61,F
02AEA:  MOVFF  42B,00
02AEE:  CLRF   01
02AF0:  CLRF   02
02AF2:  CLRF   03
02AF4:  MOVF   00,W
02AF6:  IORWF  x5E,W
02AF8:  MOVLB  3
02AFA:  MOVWF  x6A
02AFC:  MOVF   01,W
02AFE:  MOVLB  4
02B00:  IORWF  x5F,W
02B02:  MOVLB  3
02B04:  MOVWF  x6B
02B06:  MOVF   02,W
02B08:  MOVLB  4
02B0A:  IORWF  x60,W
02B0C:  MOVLB  3
02B0E:  MOVWF  x6C
02B10:  MOVF   03,W
02B12:  MOVLB  4
02B14:  IORWF  x61,W
02B16:  MOVLB  3
02B18:  MOVWF  x6D
....................     misf_piclog_loop_counter = readdata[14];
02B1A:  MOVFF  42C,36E
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
02B1E:  MOVLB  4
02B20:  CLRF   x61
02B22:  CLRF   x60
02B24:  CLRF   x5F
02B26:  MOVFF  42D,45E
02B2A:  MOVFF  45E,461
02B2E:  CLRF   x5E
02B30:  CLRF   x5F
02B32:  CLRF   x60
02B34:  CLRF   x66
02B36:  CLRF   x65
02B38:  CLRF   x64
02B3A:  MOVFF  42E,463
02B3E:  MOVFF  464,03
02B42:  MOVFF  463,02
02B46:  CLRF   00
02B48:  CLRF   01
02B4A:  MOVF   00,W
02B4C:  IORWF  x5E,F
02B4E:  MOVF   01,W
02B50:  IORWF  x5F,F
02B52:  MOVF   02,W
02B54:  IORWF  x60,F
02B56:  MOVF   03,W
02B58:  IORWF  x61,F
02B5A:  CLRF   x66
02B5C:  CLRF   x65
02B5E:  CLRF   x64
02B60:  MOVFF  42F,463
02B64:  MOVFF  465,03
02B68:  MOVFF  464,02
02B6C:  MOVFF  463,01
02B70:  CLRF   00
02B72:  MOVF   00,W
02B74:  IORWF  x5E,F
02B76:  MOVF   01,W
02B78:  IORWF  x5F,F
02B7A:  MOVF   02,W
02B7C:  IORWF  x60,F
02B7E:  MOVF   03,W
02B80:  IORWF  x61,F
02B82:  MOVFF  430,00
02B86:  CLRF   01
02B88:  CLRF   02
02B8A:  CLRF   03
02B8C:  MOVF   00,W
02B8E:  IORWF  x5E,W
02B90:  MOVLB  3
02B92:  MOVWF  x6F
02B94:  MOVF   01,W
02B96:  MOVLB  4
02B98:  IORWF  x5F,W
02B9A:  MOVLB  3
02B9C:  MOVWF  x70
02B9E:  MOVF   02,W
02BA0:  MOVLB  4
02BA2:  IORWF  x60,W
02BA4:  MOVLB  3
02BA6:  MOVWF  x71
02BA8:  MOVF   03,W
02BAA:  MOVLB  4
02BAC:  IORWF  x61,W
02BAE:  MOVLB  3
02BB0:  MOVWF  x72
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
02BB2:  MOVLB  4
02BB4:  CLRF   x61
02BB6:  CLRF   x60
02BB8:  CLRF   x5F
02BBA:  MOVFF  431,45E
02BBE:  MOVFF  45E,461
02BC2:  CLRF   x5E
02BC4:  CLRF   x5F
02BC6:  CLRF   x60
02BC8:  CLRF   x66
02BCA:  CLRF   x65
02BCC:  CLRF   x64
02BCE:  MOVFF  432,463
02BD2:  MOVFF  464,03
02BD6:  MOVFF  463,02
02BDA:  CLRF   00
02BDC:  CLRF   01
02BDE:  MOVF   00,W
02BE0:  IORWF  x5E,F
02BE2:  MOVF   01,W
02BE4:  IORWF  x5F,F
02BE6:  MOVF   02,W
02BE8:  IORWF  x60,F
02BEA:  MOVF   03,W
02BEC:  IORWF  x61,F
02BEE:  CLRF   x66
02BF0:  CLRF   x65
02BF2:  CLRF   x64
02BF4:  MOVFF  433,463
02BF8:  MOVFF  465,03
02BFC:  MOVFF  464,02
02C00:  MOVFF  463,01
02C04:  CLRF   00
02C06:  MOVF   00,W
02C08:  IORWF  x5E,F
02C0A:  MOVF   01,W
02C0C:  IORWF  x5F,F
02C0E:  MOVF   02,W
02C10:  IORWF  x60,F
02C12:  MOVF   03,W
02C14:  IORWF  x61,F
02C16:  MOVFF  434,00
02C1A:  CLRF   01
02C1C:  CLRF   02
02C1E:  CLRF   03
02C20:  MOVF   00,W
02C22:  IORWF  x5E,W
02C24:  MOVLB  3
02C26:  MOVWF  x73
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
02C28:  MOVLB  4
02C2A:  CLRF   x61
02C2C:  CLRF   x60
02C2E:  CLRF   x5F
02C30:  MOVFF  435,45E
02C34:  MOVFF  45E,461
02C38:  CLRF   x5E
02C3A:  CLRF   x5F
02C3C:  CLRF   x60
02C3E:  CLRF   x66
02C40:  CLRF   x65
02C42:  CLRF   x64
02C44:  MOVFF  436,463
02C48:  MOVFF  464,03
02C4C:  MOVFF  463,02
02C50:  CLRF   00
02C52:  CLRF   01
02C54:  MOVF   00,W
02C56:  IORWF  x5E,F
02C58:  MOVF   01,W
02C5A:  IORWF  x5F,F
02C5C:  MOVF   02,W
02C5E:  IORWF  x60,F
02C60:  MOVF   03,W
02C62:  IORWF  x61,F
02C64:  CLRF   x66
02C66:  CLRF   x65
02C68:  CLRF   x64
02C6A:  MOVFF  437,463
02C6E:  MOVFF  465,03
02C72:  MOVFF  464,02
02C76:  MOVFF  463,01
02C7A:  CLRF   00
02C7C:  MOVF   00,W
02C7E:  IORWF  x5E,F
02C80:  MOVF   01,W
02C82:  IORWF  x5F,F
02C84:  MOVF   02,W
02C86:  IORWF  x60,F
02C88:  MOVF   03,W
02C8A:  IORWF  x61,F
02C8C:  MOVFF  438,00
02C90:  CLRF   01
02C92:  CLRF   02
02C94:  CLRF   03
02C96:  MOVF   00,W
02C98:  IORWF  x5E,W
02C9A:  MOVLB  3
02C9C:  MOVWF  x74
02C9E:  MOVF   01,W
02CA0:  MOVLB  4
02CA2:  IORWF  x5F,W
02CA4:  MOVLB  3
02CA6:  MOVWF  x75
02CA8:  MOVF   02,W
02CAA:  MOVLB  4
02CAC:  IORWF  x60,W
02CAE:  MOVLB  3
02CB0:  MOVWF  x76
02CB2:  MOVF   03,W
02CB4:  MOVLB  4
02CB6:  IORWF  x61,W
02CB8:  MOVLB  3
02CBA:  MOVWF  x77
....................     misf_meas_loop_counter = readdata[27];
02CBC:  MOVFF  439,378
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
02CC0:  MOVLB  4
02CC2:  CLRF   x61
02CC4:  CLRF   x60
02CC6:  CLRF   x5F
02CC8:  MOVFF  43A,45E
02CCC:  MOVFF  45E,461
02CD0:  CLRF   x5E
02CD2:  CLRF   x5F
02CD4:  CLRF   x60
02CD6:  CLRF   x66
02CD8:  CLRF   x65
02CDA:  CLRF   x64
02CDC:  MOVFF  43B,463
02CE0:  MOVFF  464,03
02CE4:  MOVFF  463,02
02CE8:  CLRF   00
02CEA:  CLRF   01
02CEC:  MOVF   00,W
02CEE:  IORWF  x5E,F
02CF0:  MOVF   01,W
02CF2:  IORWF  x5F,F
02CF4:  MOVF   02,W
02CF6:  IORWF  x60,F
02CF8:  MOVF   03,W
02CFA:  IORWF  x61,F
02CFC:  CLRF   x66
02CFE:  CLRF   x65
02D00:  CLRF   x64
02D02:  MOVFF  43C,463
02D06:  MOVFF  465,03
02D0A:  MOVFF  464,02
02D0E:  MOVFF  463,01
02D12:  CLRF   00
02D14:  MOVF   00,W
02D16:  IORWF  x5E,F
02D18:  MOVF   01,W
02D1A:  IORWF  x5F,F
02D1C:  MOVF   02,W
02D1E:  IORWF  x60,F
02D20:  MOVF   03,W
02D22:  IORWF  x61,F
02D24:  MOVFF  43D,00
02D28:  CLRF   01
02D2A:  CLRF   02
02D2C:  CLRF   03
02D2E:  MOVF   00,W
02D30:  IORWF  x5E,W
02D32:  MOVLB  3
02D34:  MOVWF  x79
02D36:  MOVF   01,W
02D38:  MOVLB  4
02D3A:  IORWF  x5F,W
02D3C:  MOVLB  3
02D3E:  MOVWF  x7A
02D40:  MOVF   02,W
02D42:  MOVLB  4
02D44:  IORWF  x60,W
02D46:  MOVLB  3
02D48:  MOVWF  x7B
02D4A:  MOVF   03,W
02D4C:  MOVLB  4
02D4E:  IORWF  x61,W
02D50:  MOVLB  3
02D52:  MOVWF  x7C
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02D54:  MOVLW  F0
02D56:  MOVWF  FF6
02D58:  MOVLW  0F
02D5A:  MOVWF  FF7
02D5C:  MOVLW  00
02D5E:  MOVWF  FF8
02D60:  MOVLW  28
02D62:  MOVLB  8
02D64:  MOVWF  x25
02D66:  MOVLB  0
02D68:  CALL   1D48
02D6C:  MOVFF  363,4C7
02D70:  MOVLW  37
02D72:  MOVLB  4
02D74:  MOVWF  xC8
02D76:  MOVLB  0
02D78:  CALL   1F0A
02D7C:  MOVFF  362,4C7
02D80:  MOVLW  37
02D82:  MOVLB  4
02D84:  MOVWF  xC8
02D86:  MOVLB  0
02D88:  CALL   1F0A
02D8C:  MOVFF  361,4C7
02D90:  MOVLW  37
02D92:  MOVLB  4
02D94:  MOVWF  xC8
02D96:  MOVLB  0
02D98:  CALL   1F0A
02D9C:  MOVFF  360,4C7
02DA0:  MOVLW  37
02DA2:  MOVLB  4
02DA4:  MOVWF  xC8
02DA6:  MOVLB  0
02DA8:  CALL   1F0A
02DAC:  MOVLW  0D
02DAE:  MOVLB  8
02DB0:  MOVWF  x68
02DB2:  MOVLB  0
02DB4:  CALL   1CC6
02DB8:  MOVLW  0A
02DBA:  MOVLB  8
02DBC:  MOVWF  x68
02DBE:  MOVLB  0
02DC0:  CALL   1CC6
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02DC4:  MOVLW  20
02DC6:  MOVWF  FF6
02DC8:  MOVLW  10
02DCA:  MOVWF  FF7
02DCC:  MOVLW  00
02DCE:  MOVWF  FF8
02DD0:  MOVLW  28
02DD2:  MOVLB  8
02DD4:  MOVWF  x25
02DD6:  MOVLB  0
02DD8:  CALL   1D48
02DDC:  MOVFF  364,4C7
02DE0:  MOVLW  37
02DE2:  MOVLB  4
02DE4:  MOVWF  xC8
02DE6:  MOVLB  0
02DE8:  CALL   1F0A
02DEC:  MOVLW  0D
02DEE:  MOVLB  8
02DF0:  MOVWF  x68
02DF2:  MOVLB  0
02DF4:  CALL   1CC6
02DF8:  MOVLW  0A
02DFA:  MOVLB  8
02DFC:  MOVWF  x68
02DFE:  MOVLB  0
02E00:  CALL   1CC6
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02E04:  MOVLW  50
02E06:  MOVWF  FF6
02E08:  MOVLW  10
02E0A:  MOVWF  FF7
02E0C:  MOVLW  00
02E0E:  MOVWF  FF8
02E10:  MOVLW  28
02E12:  MOVLB  8
02E14:  MOVWF  x25
02E16:  MOVLB  0
02E18:  CALL   1D48
02E1C:  MOVFF  368,4C7
02E20:  MOVLW  37
02E22:  MOVLB  4
02E24:  MOVWF  xC8
02E26:  MOVLB  0
02E28:  CALL   1F0A
02E2C:  MOVFF  367,4C7
02E30:  MOVLW  37
02E32:  MOVLB  4
02E34:  MOVWF  xC8
02E36:  MOVLB  0
02E38:  CALL   1F0A
02E3C:  MOVFF  366,4C7
02E40:  MOVLW  37
02E42:  MOVLB  4
02E44:  MOVWF  xC8
02E46:  MOVLB  0
02E48:  CALL   1F0A
02E4C:  MOVFF  365,4C7
02E50:  MOVLW  37
02E52:  MOVLB  4
02E54:  MOVWF  xC8
02E56:  MOVLB  0
02E58:  CALL   1F0A
02E5C:  MOVLW  0D
02E5E:  MOVLB  8
02E60:  MOVWF  x68
02E62:  MOVLB  0
02E64:  CALL   1CC6
02E68:  MOVLW  0A
02E6A:  MOVLB  8
02E6C:  MOVWF  x68
02E6E:  MOVLB  0
02E70:  CALL   1CC6
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02E74:  MOVLW  80
02E76:  MOVWF  FF6
02E78:  MOVLW  10
02E7A:  MOVWF  FF7
02E7C:  MOVLW  00
02E7E:  MOVWF  FF8
02E80:  MOVLW  28
02E82:  MOVLB  8
02E84:  MOVWF  x25
02E86:  MOVLB  0
02E88:  CALL   1D48
02E8C:  MOVFF  369,4C7
02E90:  MOVLW  37
02E92:  MOVLB  4
02E94:  MOVWF  xC8
02E96:  MOVLB  0
02E98:  CALL   1F0A
02E9C:  MOVLW  0D
02E9E:  MOVLB  8
02EA0:  MOVWF  x68
02EA2:  MOVLB  0
02EA4:  CALL   1CC6
02EA8:  MOVLW  0A
02EAA:  MOVLB  8
02EAC:  MOVWF  x68
02EAE:  MOVLB  0
02EB0:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02EB4:  MOVLW  B0
02EB6:  MOVWF  FF6
02EB8:  MOVLW  10
02EBA:  MOVWF  FF7
02EBC:  MOVLW  00
02EBE:  MOVWF  FF8
02EC0:  MOVLW  28
02EC2:  MOVLB  8
02EC4:  MOVWF  x25
02EC6:  MOVLB  0
02EC8:  CALL   1D48
02ECC:  MOVFF  36D,4C7
02ED0:  MOVLW  37
02ED2:  MOVLB  4
02ED4:  MOVWF  xC8
02ED6:  MOVLB  0
02ED8:  CALL   1F0A
02EDC:  MOVFF  36C,4C7
02EE0:  MOVLW  37
02EE2:  MOVLB  4
02EE4:  MOVWF  xC8
02EE6:  MOVLB  0
02EE8:  CALL   1F0A
02EEC:  MOVFF  36B,4C7
02EF0:  MOVLW  37
02EF2:  MOVLB  4
02EF4:  MOVWF  xC8
02EF6:  MOVLB  0
02EF8:  CALL   1F0A
02EFC:  MOVFF  36A,4C7
02F00:  MOVLW  37
02F02:  MOVLB  4
02F04:  MOVWF  xC8
02F06:  MOVLB  0
02F08:  CALL   1F0A
02F0C:  MOVLW  0D
02F0E:  MOVLB  8
02F10:  MOVWF  x68
02F12:  MOVLB  0
02F14:  CALL   1CC6
02F18:  MOVLW  0A
02F1A:  MOVLB  8
02F1C:  MOVWF  x68
02F1E:  MOVLB  0
02F20:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02F24:  MOVLW  E0
02F26:  MOVWF  FF6
02F28:  MOVLW  10
02F2A:  MOVWF  FF7
02F2C:  MOVLW  00
02F2E:  MOVWF  FF8
02F30:  MOVLW  28
02F32:  MOVLB  8
02F34:  MOVWF  x25
02F36:  MOVLB  0
02F38:  CALL   1D48
02F3C:  MOVFF  372,4C7
02F40:  MOVLW  37
02F42:  MOVLB  4
02F44:  MOVWF  xC8
02F46:  MOVLB  0
02F48:  CALL   1F0A
02F4C:  MOVFF  371,4C7
02F50:  MOVLW  37
02F52:  MOVLB  4
02F54:  MOVWF  xC8
02F56:  MOVLB  0
02F58:  CALL   1F0A
02F5C:  MOVFF  370,4C7
02F60:  MOVLW  37
02F62:  MOVLB  4
02F64:  MOVWF  xC8
02F66:  MOVLB  0
02F68:  CALL   1F0A
02F6C:  MOVFF  36F,4C7
02F70:  MOVLW  37
02F72:  MOVLB  4
02F74:  MOVWF  xC8
02F76:  MOVLB  0
02F78:  CALL   1F0A
02F7C:  MOVLW  0D
02F7E:  MOVLB  8
02F80:  MOVWF  x68
02F82:  MOVLB  0
02F84:  CALL   1CC6
02F88:  MOVLW  0A
02F8A:  MOVLB  8
02F8C:  MOVWF  x68
02F8E:  MOVLB  0
02F90:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02F94:  MOVLW  10
02F96:  MOVWF  FF6
02F98:  MOVLW  11
02F9A:  MOVWF  FF7
02F9C:  MOVLW  00
02F9E:  MOVWF  FF8
02FA0:  MOVLW  28
02FA2:  MOVLB  8
02FA4:  MOVWF  x25
02FA6:  MOVLB  0
02FA8:  CALL   1D48
02FAC:  MOVFF  36E,4C7
02FB0:  MOVLW  37
02FB2:  MOVLB  4
02FB4:  MOVWF  xC8
02FB6:  MOVLB  0
02FB8:  CALL   1F0A
02FBC:  MOVLW  0D
02FBE:  MOVLB  8
02FC0:  MOVWF  x68
02FC2:  MOVLB  0
02FC4:  CALL   1CC6
02FC8:  MOVLW  0A
02FCA:  MOVLB  8
02FCC:  MOVWF  x68
02FCE:  MOVLB  0
02FD0:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02FD4:  MOVLW  40
02FD6:  MOVWF  FF6
02FD8:  MOVLW  11
02FDA:  MOVWF  FF7
02FDC:  MOVLW  00
02FDE:  MOVWF  FF8
02FE0:  MOVLW  28
02FE2:  MOVLB  8
02FE4:  MOVWF  x25
02FE6:  MOVLB  0
02FE8:  CALL   1D48
02FEC:  MOVFF  373,4C7
02FF0:  MOVLW  37
02FF2:  MOVLB  4
02FF4:  MOVWF  xC8
02FF6:  MOVLB  0
02FF8:  CALL   1F0A
02FFC:  MOVLW  0D
02FFE:  MOVLB  8
03000:  MOVWF  x68
03002:  MOVLB  0
03004:  CALL   1CC6
03008:  MOVLW  0A
0300A:  MOVLB  8
0300C:  MOVWF  x68
0300E:  MOVLB  0
03010:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
03014:  MOVLW  70
03016:  MOVWF  FF6
03018:  MOVLW  11
0301A:  MOVWF  FF7
0301C:  MOVLW  00
0301E:  MOVWF  FF8
03020:  MOVLW  28
03022:  MOVLB  8
03024:  MOVWF  x25
03026:  MOVLB  0
03028:  CALL   1D48
0302C:  MOVFF  377,4C7
03030:  MOVLW  37
03032:  MOVLB  4
03034:  MOVWF  xC8
03036:  MOVLB  0
03038:  CALL   1F0A
0303C:  MOVFF  376,4C7
03040:  MOVLW  37
03042:  MOVLB  4
03044:  MOVWF  xC8
03046:  MOVLB  0
03048:  CALL   1F0A
0304C:  MOVFF  375,4C7
03050:  MOVLW  37
03052:  MOVLB  4
03054:  MOVWF  xC8
03056:  MOVLB  0
03058:  CALL   1F0A
0305C:  MOVFF  374,4C7
03060:  MOVLW  37
03062:  MOVLB  4
03064:  MOVWF  xC8
03066:  MOVLB  0
03068:  CALL   1F0A
0306C:  MOVLW  0D
0306E:  MOVLB  8
03070:  MOVWF  x68
03072:  MOVLB  0
03074:  CALL   1CC6
03078:  MOVLW  0A
0307A:  MOVLB  8
0307C:  MOVWF  x68
0307E:  MOVLB  0
03080:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
03084:  MOVLW  A0
03086:  MOVWF  FF6
03088:  MOVLW  11
0308A:  MOVWF  FF7
0308C:  MOVLW  00
0308E:  MOVWF  FF8
03090:  MOVLW  28
03092:  MOVLB  8
03094:  MOVWF  x25
03096:  MOVLB  0
03098:  CALL   1D48
0309C:  MOVFF  37C,4C7
030A0:  MOVLW  37
030A2:  MOVLB  4
030A4:  MOVWF  xC8
030A6:  MOVLB  0
030A8:  CALL   1F0A
030AC:  MOVFF  37B,4C7
030B0:  MOVLW  37
030B2:  MOVLB  4
030B4:  MOVWF  xC8
030B6:  MOVLB  0
030B8:  CALL   1F0A
030BC:  MOVFF  37A,4C7
030C0:  MOVLW  37
030C2:  MOVLB  4
030C4:  MOVWF  xC8
030C6:  MOVLB  0
030C8:  CALL   1F0A
030CC:  MOVFF  379,4C7
030D0:  MOVLW  37
030D2:  MOVLB  4
030D4:  MOVWF  xC8
030D6:  MOVLB  0
030D8:  CALL   1F0A
030DC:  MOVLW  0D
030DE:  MOVLB  8
030E0:  MOVWF  x68
030E2:  MOVLB  0
030E4:  CALL   1CC6
030E8:  MOVLW  0A
030EA:  MOVLB  8
030EC:  MOVWF  x68
030EE:  MOVLB  0
030F0:  CALL   1CC6
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
030F4:  MOVLW  D0
030F6:  MOVWF  FF6
030F8:  MOVLW  11
030FA:  MOVWF  FF7
030FC:  MOVLW  00
030FE:  MOVWF  FF8
03100:  MOVLW  28
03102:  MOVLB  8
03104:  MOVWF  x25
03106:  MOVLB  0
03108:  CALL   1D48
0310C:  MOVFF  378,4C7
03110:  MOVLW  37
03112:  MOVLB  4
03114:  MOVWF  xC8
03116:  MOVLB  0
03118:  CALL   1F0A
0311C:  MOVLW  0D
0311E:  MOVLB  8
03120:  MOVWF  x68
03122:  MOVLB  0
03124:  CALL   1CC6
03128:  MOVLW  0A
0312A:  MOVLB  8
0312C:  MOVWF  x68
0312E:  MOVLB  0
03130:  CALL   1CC6
....................     fprintf(PC, "\tComplete\r\n");
03134:  MOVLW  00
03136:  MOVWF  FF6
03138:  MOVLW  12
0313A:  MOVWF  FF7
0313C:  MOVLW  00
0313E:  MOVWF  FF8
03140:  CALL   1D18
03144:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
06F72:  GOTO   70FA (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
03B28:  MOVFF  F1,868
03B2C:  MOVFF  F0,867
03B30:  MOVFF  EF,866
03B34:  MOVFF  EE,865
03B38:  CALL   237C
03B3C:  MOVF   01,F
03B3E:  BTFSS  FD8.2
03B40:  GOTO   3B58
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03B44:  MOVLW  0C
03B46:  MOVWF  FF6
03B48:  MOVLW  12
03B4A:  MOVWF  FF7
03B4C:  MOVLW  00
03B4E:  MOVWF  FF8
03B50:  CALL   1D18
....................         return;
03B54:  GOTO   3DCA
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
03B58:  MOVLB  8
03B5A:  CLRF   x25
03B5C:  CLRF   x26
03B5E:  CLRF   x27
03B60:  CLRF   x28
03B62:  CLRF   x29
03B64:  CLRF   x2A
03B66:  CLRF   x2B
03B68:  CLRF   x2C
03B6A:  CLRF   x2D
03B6C:  CLRF   x2E
03B6E:  CLRF   x2F
03B70:  CLRF   x30
03B72:  CLRF   x31
03B74:  CLRF   x32
03B76:  CLRF   x33
03B78:  CLRF   x34
03B7A:  CLRF   x35
03B7C:  CLRF   x36
03B7E:  CLRF   x37
03B80:  CLRF   x38
03B82:  CLRF   x39
03B84:  CLRF   x3A
03B86:  CLRF   x3B
03B88:  CLRF   x3C
03B8A:  CLRF   x3D
03B8C:  CLRF   x3E
03B8E:  CLRF   x3F
03B90:  CLRF   x40
03B92:  CLRF   x41
03B94:  CLRF   x42
03B96:  CLRF   x43
03B98:  CLRF   x44
03B9A:  CLRF   x45
03B9C:  CLRF   x46
03B9E:  CLRF   x47
03BA0:  CLRF   x48
03BA2:  CLRF   x49
03BA4:  CLRF   x4A
03BA6:  CLRF   x4B
03BA8:  CLRF   x4C
03BAA:  CLRF   x4D
03BAC:  CLRF   x4E
03BAE:  CLRF   x4F
03BB0:  CLRF   x50
03BB2:  CLRF   x51
03BB4:  CLRF   x52
03BB6:  CLRF   x53
03BB8:  CLRF   x54
03BBA:  CLRF   x55
03BBC:  CLRF   x56
03BBE:  CLRF   x57
03BC0:  CLRF   x58
03BC2:  CLRF   x59
03BC4:  CLRF   x5A
03BC6:  CLRF   x5B
03BC8:  CLRF   x5C
03BCA:  CLRF   x5D
03BCC:  CLRF   x5E
03BCE:  CLRF   x5F
03BD0:  CLRF   x60
03BD2:  CLRF   x61
03BD4:  CLRF   x62
03BD6:  CLRF   x63
03BD8:  CLRF   x64
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
03BDA:  MOVFF  363,866
03BDE:  CLRF   x67
03BE0:  CLRF   x68
03BE2:  CLRF   x69
03BE4:  MOVF   x66,W
03BE6:  MOVWF  x25
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
03BE8:  MOVFF  362,866
03BEC:  MOVFF  363,867
03BF0:  CLRF   x68
03BF2:  CLRF   x69
03BF4:  MOVF   x66,W
03BF6:  MOVWF  x26
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03BF8:  MOVFF  361,866
03BFC:  MOVFF  362,867
03C00:  MOVFF  363,868
03C04:  CLRF   x69
03C06:  MOVF   x66,W
03C08:  MOVWF  x27
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
03C0A:  MOVLB  3
03C0C:  MOVF   x60,W
03C0E:  MOVLB  8
03C10:  MOVWF  x28
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
03C12:  MOVFF  364,829
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
03C16:  MOVFF  368,866
03C1A:  CLRF   x67
03C1C:  CLRF   x68
03C1E:  CLRF   x69
03C20:  MOVF   x66,W
03C22:  MOVWF  x2A
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
03C24:  MOVFF  367,866
03C28:  MOVFF  368,867
03C2C:  CLRF   x68
03C2E:  CLRF   x69
03C30:  MOVF   x66,W
03C32:  MOVWF  x2B
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
03C34:  MOVFF  366,866
03C38:  MOVFF  367,867
03C3C:  MOVFF  368,868
03C40:  CLRF   x69
03C42:  MOVF   x66,W
03C44:  MOVWF  x2C
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03C46:  MOVLB  3
03C48:  MOVF   x65,W
03C4A:  MOVLB  8
03C4C:  MOVWF  x2D
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
03C4E:  MOVFF  369,82E
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
03C52:  MOVFF  36D,866
03C56:  CLRF   x67
03C58:  CLRF   x68
03C5A:  CLRF   x69
03C5C:  MOVF   x66,W
03C5E:  MOVWF  x2F
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03C60:  MOVFF  36C,866
03C64:  MOVFF  36D,867
03C68:  CLRF   x68
03C6A:  CLRF   x69
03C6C:  MOVF   x66,W
03C6E:  MOVWF  x30
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03C70:  MOVFF  36B,866
03C74:  MOVFF  36C,867
03C78:  MOVFF  36D,868
03C7C:  CLRF   x69
03C7E:  MOVF   x66,W
03C80:  MOVWF  x31
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
03C82:  MOVLB  3
03C84:  MOVF   x6A,W
03C86:  MOVLB  8
03C88:  MOVWF  x32
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03C8A:  MOVFF  36E,833
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03C8E:  MOVFF  372,866
03C92:  CLRF   x67
03C94:  CLRF   x68
03C96:  CLRF   x69
03C98:  MOVF   x66,W
03C9A:  MOVWF  x34
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03C9C:  MOVFF  371,866
03CA0:  MOVFF  372,867
03CA4:  CLRF   x68
03CA6:  CLRF   x69
03CA8:  MOVF   x66,W
03CAA:  MOVWF  x35
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
03CAC:  MOVFF  370,866
03CB0:  MOVFF  371,867
03CB4:  MOVFF  372,868
03CB8:  CLRF   x69
03CBA:  MOVF   x66,W
03CBC:  MOVWF  x36
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03CBE:  MOVLB  3
03CC0:  MOVF   x6F,W
03CC2:  MOVLB  8
03CC4:  MOVWF  x37
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
03CC6:  MOVLW  00
03CC8:  MOVWF  x38
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
03CCA:  MOVLW  00
03CCC:  MOVWF  x39
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03CCE:  MOVLW  00
03CD0:  MOVWF  x3A
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03CD2:  MOVLB  3
03CD4:  MOVF   x73,W
03CD6:  MOVLB  8
03CD8:  MOVWF  x3B
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03CDA:  MOVFF  377,866
03CDE:  CLRF   x67
03CE0:  CLRF   x68
03CE2:  CLRF   x69
03CE4:  MOVF   x66,W
03CE6:  MOVWF  x3C
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
03CE8:  MOVFF  376,866
03CEC:  MOVFF  377,867
03CF0:  CLRF   x68
03CF2:  CLRF   x69
03CF4:  MOVF   x66,W
03CF6:  MOVWF  x3D
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03CF8:  MOVFF  375,866
03CFC:  MOVFF  376,867
03D00:  MOVFF  377,868
03D04:  CLRF   x69
03D06:  MOVF   x66,W
03D08:  MOVWF  x3E
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03D0A:  MOVLB  3
03D0C:  MOVF   x74,W
03D0E:  MOVLB  8
03D10:  MOVWF  x3F
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03D12:  MOVFF  378,840
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03D16:  MOVFF  37C,866
03D1A:  CLRF   x67
03D1C:  CLRF   x68
03D1E:  CLRF   x69
03D20:  MOVF   x66,W
03D22:  MOVWF  x41
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03D24:  MOVFF  37B,866
03D28:  MOVFF  37C,867
03D2C:  CLRF   x68
03D2E:  CLRF   x69
03D30:  MOVF   x66,W
03D32:  MOVWF  x42
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03D34:  MOVFF  37A,866
03D38:  MOVFF  37B,867
03D3C:  MOVFF  37C,868
03D40:  CLRF   x69
03D42:  MOVF   x66,W
03D44:  MOVWF  x43
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03D46:  MOVLB  3
03D48:  MOVF   x79,W
03D4A:  MOVLB  8
03D4C:  MOVWF  x44
.................... 
....................     if (!is_connect(mis_fm)) {
03D4E:  MOVFF  F1,868
03D52:  MOVFF  F0,867
03D56:  MOVFF  EF,866
03D5A:  MOVFF  EE,865
03D5E:  MOVLB  0
03D60:  CALL   237C
03D64:  MOVF   01,F
03D66:  BTFSS  FD8.2
03D68:  GOTO   3D7C
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03D6C:  MOVLW  2E
03D6E:  MOVWF  FF6
03D70:  MOVLW  12
03D72:  MOVWF  FF7
03D74:  MOVLW  00
03D76:  MOVWF  FF8
03D78:  CALL   1D18
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03D7C:  MOVFF  F1,868
03D80:  MOVFF  F0,867
03D84:  MOVFF  EF,866
03D88:  MOVFF  EE,865
03D8C:  MOVLB  8
03D8E:  CLRF   x6C
03D90:  CLRF   x6B
03D92:  CLRF   x6A
03D94:  CLRF   x69
03D96:  MOVLB  0
03D98:  CALL   37D0
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03D9C:  MOVFF  F1,868
03DA0:  MOVFF  F0,867
03DA4:  MOVFF  EF,866
03DA8:  MOVFF  EE,865
03DAC:  MOVLB  8
03DAE:  CLRF   x6C
03DB0:  CLRF   x6B
03DB2:  CLRF   x6A
03DB4:  CLRF   x69
03DB6:  MOVLW  08
03DB8:  MOVWF  x6E
03DBA:  MOVLW  25
03DBC:  MOVWF  x6D
03DBE:  CLRF   x70
03DC0:  MOVLW  40
03DC2:  MOVWF  x6F
03DC4:  MOVLB  0
03DC6:  CALL   344C
03DCA:  RETURN 0
....................     //fprintf(PC, "Write MISF Address Area Complete\r\n");
.................... 
.................... }
.................... 
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 *uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
07A3C:  MOVLB  3
07A3E:  MOVF   xC0,W
07A40:  MOVWF  FE9
07A42:  MOVF   xC1,W
07A44:  MOVWF  FEA
07A46:  MOVFF  FEF,3C2
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
07A4A:  MOVLW  50
07A4C:  MOVWF  FF6
07A4E:  MOVLW  12
07A50:  MOVWF  FF7
07A52:  MOVLW  00
07A54:  MOVWF  FF8
07A56:  MOVLB  0
07A58:  CALL   1D18
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
07A5C:  MOVLW  96
07A5E:  MOVWF  FF6
07A60:  MOVLW  12
07A62:  MOVWF  FF7
07A64:  MOVLW  00
07A66:  MOVWF  FF8
07A68:  MOVLW  0C
07A6A:  MOVLB  8
07A6C:  MOVWF  x25
07A6E:  MOVLB  0
07A70:  CALL   1D48
07A74:  MOVFF  3C2,4C7
07A78:  MOVLW  37
07A7A:  MOVLB  4
07A7C:  MOVWF  xC8
07A7E:  MOVLB  0
07A80:  CALL   1F0A
07A84:  MOVLW  A4
07A86:  MOVWF  FF6
07A88:  MOVLW  12
07A8A:  MOVWF  FF7
07A8C:  MOVLW  00
07A8E:  MOVWF  FF8
07A90:  MOVLW  04
07A92:  MOVLB  8
07A94:  MOVWF  x25
07A96:  MOVLB  0
07A98:  CALL   1D48
....................    switch(command_id)
07A9C:  MOVLB  3
07A9E:  MOVF   xC2,W
07AA0:  XORLW  10
07AA2:  MOVLB  0
07AA4:  BTFSC  FD8.2
07AA6:  GOTO   7B5E
07AAA:  XORLW  01
07AAC:  BTFSC  FD8.2
07AAE:  GOTO   7B6E
07AB2:  XORLW  03
07AB4:  BTFSC  FD8.2
07AB6:  GOTO   7B7E
07ABA:  XORLW  13
07ABC:  BTFSC  FD8.2
07ABE:  GOTO   7B86
07AC2:  XORLW  12
07AC4:  BTFSC  FD8.2
07AC6:  GOTO   7B8A
07ACA:  XORLW  93
07ACC:  BTFSC  FD8.2
07ACE:  GOTO   7BAA
07AD2:  XORLW  01
07AD4:  BTFSC  FD8.2
07AD6:  GOTO   7BBA
07ADA:  XORLW  03
07ADC:  BTFSC  FD8.2
07ADE:  GOTO   7BCA
07AE2:  XORLW  01
07AE4:  BTFSC  FD8.2
07AE6:  GOTO   7BDA
07AEA:  XORLW  07
07AEC:  BTFSC  FD8.2
07AEE:  GOTO   7BEA
07AF2:  XORLW  01
07AF4:  BTFSC  FD8.2
07AF6:  GOTO   7BFA
07AFA:  XORLW  03
07AFC:  BTFSC  FD8.2
07AFE:  GOTO   7C0A
07B02:  XORLW  01
07B04:  BTFSC  FD8.2
07B06:  GOTO   7C1A
07B0A:  XORLW  0F
07B0C:  BTFSC  FD8.2
07B0E:  GOTO   7C2A
07B12:  XORLW  18
07B14:  BTFSC  FD8.2
07B16:  GOTO   7C3A
07B1A:  XORLW  01
07B1C:  BTFSC  FD8.2
07B1E:  GOTO   7C4A
07B22:  XORLW  03
07B24:  BTFSC  FD8.2
07B26:  GOTO   7C5A
07B2A:  XORLW  01
07B2C:  BTFSC  FD8.2
07B2E:  GOTO   7C6A
07B32:  XORLW  07
07B34:  BTFSC  FD8.2
07B36:  GOTO   7C7A
07B3A:  XORLW  01
07B3C:  BTFSC  FD8.2
07B3E:  GOTO   7C8A
07B42:  XORLW  03
07B44:  BTFSC  FD8.2
07B46:  GOTO   7C9A
07B4A:  XORLW  36
07B4C:  BTFSC  FD8.2
07B4E:  GOTO   7CAA
07B52:  XORLW  03
07B54:  BTFSC  FD8.2
07B56:  GOTO   7CBA
07B5A:  GOTO   7CBE
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
07B5E:  MOVFF  3C1,3C4
07B62:  MOVFF  3C0,3C3
07B66:  GOTO   4664
....................          //mode_iv_meas_adc();
....................          break;
07B6A:  GOTO   7CCE
....................       case 0x11:
....................          mode_test_iv(content);
07B6E:  MOVFF  3C1,3C4
07B72:  MOVFF  3C0,3C3
07B76:  GOTO   4D74
....................          break;
07B7A:  GOTO   7CCE
....................       case 0x12:
....................          test_adc();
07B7E:  GOTO   4E04
....................          break;
07B82:  GOTO   7CCE
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
07B86:  GOTO   7CCE
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
07B8A:  MOVLW  01
07B8C:  MOVLB  3
07B8E:  ADDWF  xC0,W
07B90:  MOVWF  FE9
07B92:  MOVLW  00
07B94:  ADDWFC xC1,W
07B96:  MOVWF  FEA
07B98:  MOVFF  FEF,3C3
07B9C:  MOVFF  3C3,3C4
07BA0:  MOVLB  0
07BA2:  GOTO   5666
....................          break;
07BA6:  GOTO   7CCE
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
07BAA:  MOVFF  3C1,3C6
07BAE:  MOVFF  3C0,3C5
07BB2:  CALL   5A1E
....................          break;
07BB6:  GOTO   7CCE
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
07BBA:  MOVFF  3C1,3C4
07BBE:  MOVFF  3C0,3C3
07BC2:  GOTO   5AE6
....................          break;
07BC6:  GOTO   7CCE
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
07BCA:  MOVFF  3C1,3C4
07BCE:  MOVFF  3C0,3C3
07BD2:  GOTO   5C80
....................          break;
07BD6:  GOTO   7CCE
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
07BDA:  MOVFF  3C1,3C4
07BDE:  MOVFF  3C0,3C3
07BE2:  GOTO   5E16
....................          break;
07BE6:  GOTO   7CCE
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
07BEA:  MOVFF  3C1,3C4
07BEE:  MOVFF  3C0,3C3
07BF2:  GOTO   5F8C
....................          break;
07BF6:  GOTO   7CCE
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
07BFA:  MOVFF  3C1,3C4
07BFE:  MOVFF  3C0,3C3
07C02:  GOTO   63C6
....................          break;
07C06:  GOTO   7CCE
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
07C0A:  MOVFF  3C1,3C4
07C0E:  MOVFF  3C0,3C3
07C12:  GOTO   6684
....................          break;
07C16:  GOTO   7CCE
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
07C1A:  MOVFF  3C1,3C4
07C1E:  MOVFF  3C0,3C3
07C22:  GOTO   6B48
....................          break;
07C26:  GOTO   7CCE
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
07C2A:  MOVFF  3C1,3C4
07C2E:  MOVFF  3C0,3C3
07C32:  GOTO   6D6E
....................          break;
07C36:  GOTO   7CCE
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
07C3A:  MOVFF  3C1,3C4
07C3E:  MOVFF  3C0,3C3
07C42:  GOTO   6DC8
....................          break;
07C46:  GOTO   7CCE
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
07C4A:  MOVFF  3C1,3C4
07C4E:  MOVFF  3C0,3C3
07C52:  GOTO   6E98
....................          break;
07C56:  GOTO   7CCE
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
07C5A:  MOVFF  3C1,3C4
07C5E:  MOVFF  3C0,3C3
07C62:  GOTO   6F0A
....................          break;
07C66:  GOTO   7CCE
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
07C6A:  MOVFF  3C1,3C4
07C6E:  MOVFF  3C0,3C3
07C72:  CALL   6F76
....................          break;
07C76:  GOTO   7CCE
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
07C7A:  MOVFF  3C1,3C4
07C7E:  MOVFF  3C0,3C3
07C82:  GOTO   712A
....................          break;
07C86:  GOTO   7CCE
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
07C8A:  MOVFF  3C1,3C4
07C8E:  MOVFF  3C0,3C3
07C92:  GOTO   7550
....................          break;
07C96:  GOTO   7CCE
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
07C9A:  MOVFF  3C1,3C4
07C9E:  MOVFF  3C0,3C3
07CA2:  CALL   6F76
....................          break;
07CA6:  GOTO   7CCE
....................       
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
07CAA:  MOVFF  3C1,3C4
07CAE:  MOVFF  3C0,3C3
07CB2:  GOTO   77F6
....................          break;
07CB6:  GOTO   7CCE
.................... 
....................       case ID_MEAS_IV_CURR_AND_PD_SELECT:
....................          //mode_meas_iv_curr_and_pd_select(content);
....................          break;
07CBA:  GOTO   7CCE
.................... 
....................       
....................       
....................       
....................       
....................          default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
07CBE:  MOVLW  AA
07CC0:  MOVWF  FF6
07CC2:  MOVLW  12
07CC4:  MOVWF  FF7
07CC6:  MOVLW  00
07CC8:  MOVWF  FF8
07CCA:  CALL   1D18
.................... 
.................... 
....................       
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
07CCE:  MOVLW  C2
07CD0:  MOVWF  FF6
07CD2:  MOVLW  12
07CD4:  MOVWF  FF7
07CD6:  MOVLW  00
07CD8:  MOVWF  FF8
07CDA:  CALL   1D18
07CDE:  GOTO   7D44 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
09C24:  MOVLW  08
09C26:  MOVWF  FF6
09C28:  MOVLW  13
09C2A:  MOVWF  FF7
09C2C:  MOVLW  00
09C2E:  MOVWF  FF8
09C30:  CALL   1D18
....................    
....................    switch(command->frame_id)
09C34:  MOVLB  3
09C36:  MOVF   xBA,W
09C38:  MOVWF  FE9
09C3A:  MOVF   xBB,W
09C3C:  MOVWF  FEA
09C3E:  MOVF   FEF,W
09C40:  XORLW  00
09C42:  MOVLB  0
09C44:  BTFSC  FD8.2
09C46:  GOTO   9C5E
09C4A:  XORLW  01
09C4C:  BTFSC  FD8.2
09C4E:  GOTO   9C6E
09C52:  XORLW  03
09C54:  BTFSC  FD8.2
09C56:  GOTO   9C8E
09C5A:  GOTO   9C9E
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
09C5E:  MOVFF  3BB,3BD
09C62:  MOVFF  3BA,3BC
09C66:  GOTO   7CF8
....................          break;
09C6A:  GOTO   9C9E
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
09C6E:  MOVFF  3BB,3BD
09C72:  MOVFF  3BA,3BC
09C76:  GOTO   7D7A
09C7A:  MOVF   01,F
09C7C:  BTFSC  FD8.2
09C7E:  GOTO   9C8A
....................             return TRUE; // if status is finished, return TRUE
09C82:  MOVLW  01
09C84:  MOVWF  01
09C86:  GOTO   9CA2
....................          }        
....................          break;
09C8A:  GOTO   9C9E
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
09C8E:  MOVFF  3BB,3BD
09C92:  MOVFF  3BA,3BC
09C96:  GOTO   9A18
....................          break;
09C9A:  GOTO   9C9E
....................    }
....................    return FALSE;
09C9E:  MOVLW  00
09CA0:  MOVWF  01
09CA2:  GOTO   A596 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
07CF8:  MOVLW  20
07CFA:  MOVWF  FF6
07CFC:  MOVLW  13
07CFE:  MOVWF  FF7
07D00:  MOVLW  00
07D02:  MOVWF  FF8
07D04:  CALL   1D18
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
07D08:  MOVLW  36
07D0A:  MOVWF  FF6
07D0C:  MOVLW  13
07D0E:  MOVWF  FF7
07D10:  MOVLW  00
07D12:  MOVWF  FF8
07D14:  CALL   1D18
....................    transmit_ack();
07D18:  CALL   4650
.................... 
....................    status[0] = EXECUTING_MISSION;
07D1C:  MOVLW  02
07D1E:  MOVWF  48
....................    execute_mission(command->content);
07D20:  MOVLW  03
07D22:  MOVLB  3
07D24:  ADDWF  xBC,W
07D26:  MOVWF  01
07D28:  MOVLW  00
07D2A:  ADDWFC xBD,W
07D2C:  MOVWF  03
07D2E:  MOVF   01,W
07D30:  MOVWF  xBE
07D32:  MOVFF  03,3BF
07D36:  MOVFF  3BF,3C1
07D3A:  MOVFF  3BE,3C0
07D3E:  MOVLB  0
07D40:  GOTO   7A3C
....................    if (is_empty_smf_data())
07D44:  CALL   7CE2
07D48:  MOVF   01,F
07D4A:  BTFSC  FD8.2
07D4C:  GOTO   7D58
....................       status[0] = FINISHED;
07D50:  MOVLW  06
07D52:  MOVWF  48
07D54:  GOTO   7D5C
....................    else
....................       status[0] = SMF_USE_REQ;
07D58:  MOVLW  04
07D5A:  MOVWF  48
07D5C:  GOTO   9C6A (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
07D7A:  MOVLW  50
07D7C:  MOVWF  FF6
07D7E:  MOVLW  13
07D80:  MOVWF  FF7
07D82:  MOVLW  00
07D84:  MOVWF  FF8
07D86:  CALL   1D18
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
07D8A:  MOVLW  64
07D8C:  MOVWF  FF6
07D8E:  MOVLW  13
07D90:  MOVWF  FF7
07D92:  MOVLW  00
07D94:  MOVWF  FF8
07D96:  CALL   1D18
....................    transmit_status();
07D9A:  GOTO   7D60
....................    if (status[0] == FINISHED)
07D9E:  MOVF   48,W
07DA0:  SUBLW  06
07DA2:  BTFSS  FD8.2
07DA4:  GOTO   7DC4
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
07DA8:  MOVLW  82
07DAA:  MOVWF  FF6
07DAC:  MOVLW  13
07DAE:  MOVWF  FF7
07DB0:  MOVLW  00
07DB2:  MOVWF  FF8
07DB4:  CALL   1D18
....................       return TRUE;
07DB8:  MOVLW  01
07DBA:  MOVWF  01
07DBC:  GOTO   7DCC
....................    }
07DC0:  GOTO   7DCC
....................    else{
....................       return FALSE;
07DC4:  MOVLW  00
07DC6:  MOVWF  01
07DC8:  GOTO   7DCC
....................    }
07DCC:  GOTO   9C7A (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................    fprintf(PC, "\t-> SMF available check\r\n");
*
09A18:  MOVLW  9E
09A1A:  MOVWF  FF6
09A1C:  MOVLW  13
09A1E:  MOVWF  FF7
09A20:  MOVLW  00
09A22:  MOVWF  FF8
09A24:  CALL   1D18
....................    fprintf(PC, "\t   Transmit Acknowledgement\r\n");
09A28:  MOVLW  B8
09A2A:  MOVWF  FF6
09A2C:  MOVLW  13
09A2E:  MOVWF  FF7
09A30:  MOVLW  00
09A32:  MOVWF  FF8
09A34:  CALL   1D18
....................    transmit_ack();
09A38:  CALL   4650
....................    
....................    if (command->content[0] == ALLOW) {
09A3C:  MOVLW  03
09A3E:  MOVLB  3
09A40:  ADDWF  xBC,W
09A42:  MOVWF  FE9
09A44:  MOVLW  00
09A46:  ADDWFC xBD,W
09A48:  MOVWF  FEA
09A4A:  DECFSZ FEF,W
09A4C:  BRA    9A52
09A4E:  BRA    9A58
09A50:  MOVLB  0
09A52:  MOVLB  0
09A54:  GOTO   9C10
09A58:  MOVLB  0
....................       fprintf(PC, "\t\t-> allowed\r\n");
09A5A:  MOVLW  D8
09A5C:  MOVWF  FF6
09A5E:  MOVLW  13
09A60:  MOVWF  FF7
09A62:  MOVLW  00
09A64:  MOVWF  FF8
09A66:  CALL   1D18
....................       status[0] = COPYING;
09A6A:  MOVLW  05
09A6C:  MOVWF  48
.................... 
....................       // キューが空になるまでループ処理
....................       int8 processed_count = 0;
09A6E:  MOVLB  3
09A70:  CLRF   xBE
09A72:  MOVLB  0
....................       while (!is_empty_smf_data()) {
09A74:  CALL   7CE2
09A78:  MOVF   01,F
09A7A:  BTFSS  FD8.2
09A7C:  GOTO   9BC8
....................          fprintf(PC, "\t\t-> Processing SMF data [%d]\r\n", processed_count);
09A80:  MOVLW  E8
09A82:  MOVWF  FF6
09A84:  MOVLW  13
09A86:  MOVWF  FF7
09A88:  MOVLW  00
09A8A:  MOVWF  FF8
09A8C:  MOVLW  1A
09A8E:  MOVLB  8
09A90:  MOVWF  x25
09A92:  MOVLB  0
09A94:  CALL   1D48
09A98:  MOVFF  3BE,4CE
09A9C:  MOVLW  18
09A9E:  MOVLB  4
09AA0:  MOVWF  xCF
09AA2:  MOVLB  0
09AA4:  CALL   76E6
09AA8:  MOVLW  04
09AAA:  MOVWF  FF6
09AAC:  MOVLW  14
09AAE:  MOVWF  FF7
09AB0:  MOVLW  00
09AB2:  MOVWF  FF8
09AB4:  MOVLW  03
09AB6:  MOVLB  8
09AB8:  MOVWF  x25
09ABA:  MOVLB  0
09ABC:  CALL   1D48
....................          
....................          SmfDataStruct *smf_data = dequeue_smf_data();
09AC0:  GOTO   7DD0
09AC4:  MOVFF  02,3C0
09AC8:  MOVFF  01,3BF
....................          if (smf_data != 0x00) {
09ACC:  MOVLB  3
09ACE:  MOVF   xBF,F
09AD0:  BTFSC  FD8.2
09AD2:  BRA    9ADA
09AD4:  MOVLB  0
09AD6:  GOTO   9AEC
09ADA:  MOVLB  0
09ADC:  MOVLB  3
09ADE:  MOVF   xC0,F
09AE0:  BTFSS  FD8.2
09AE2:  BRA    9AEA
09AE4:  MOVLB  0
09AE6:  GOTO   9BB0
09AEA:  MOVLB  0
....................             int8 func_type = smf_data->func_type;
09AEC:  MOVLB  3
09AEE:  MOVF   xBF,W
09AF0:  MOVWF  FE9
09AF2:  MOVF   xC0,W
09AF4:  MOVWF  FEA
09AF6:  MOVFF  FEF,3C1
09AFA:  MOVLB  0
....................             if (func_type == 0) {  // SMF_WRITE
09AFC:  MOVLB  3
09AFE:  MOVF   xC1,F
09B00:  BTFSC  FD8.2
09B02:  BRA    9B0A
09B04:  MOVLB  0
09B06:  GOTO   9B28
09B0A:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF WRITE (single)\r\n");
09B0C:  MOVLW  08
09B0E:  MOVWF  FF6
09B10:  MOVLW  14
09B12:  MOVWF  FF7
09B14:  MOVLW  00
09B16:  MOVWF  FF8
09B18:  CALL   1D18
....................                smf_write(smf_data);
09B1C:  MOVFF  3C0,3AC
09B20:  MOVFF  3BF,3AB
09B24:  GOTO   86AC
....................             }
....................             if (func_type == 1) {  // SMF_READ
09B28:  MOVLB  3
09B2A:  DECFSZ xC1,W
09B2C:  BRA    9B32
09B2E:  BRA    9B38
09B30:  MOVLB  0
09B32:  MOVLB  0
09B34:  GOTO   9B56
09B38:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF READ (single)\r\n");
09B3A:  MOVLW  2C
09B3C:  MOVWF  FF6
09B3E:  MOVLW  14
09B40:  MOVWF  FF7
09B42:  MOVLW  00
09B44:  MOVWF  FF8
09B46:  CALL   1D18
....................                smf_read(smf_data);
09B4A:  MOVFF  3C0,3C3
09B4E:  MOVFF  3BF,3C2
09B52:  GOTO   9044
....................             }
....................             if (func_type == 2) {  // SMF_ERASE
09B56:  MOVLB  3
09B58:  MOVF   xC1,W
09B5A:  SUBLW  02
09B5C:  BTFSC  FD8.2
09B5E:  BRA    9B66
09B60:  MOVLB  0
09B62:  GOTO   9B84
09B66:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF ERASE (single)\r\n");
09B68:  MOVLW  50
09B6A:  MOVWF  FF6
09B6C:  MOVLW  14
09B6E:  MOVWF  FF7
09B70:  MOVLW  00
09B72:  MOVWF  FF8
09B74:  CALL   1D18
....................                smf_erase(smf_data);
09B78:  MOVFF  3C0,3C3
09B7C:  MOVFF  3BF,3C2
09B80:  GOTO   93E6
....................             }
....................             if (func_type > 2) {
09B84:  MOVLB  3
09B86:  MOVF   xC1,W
09B88:  SUBLW  02
09B8A:  BTFSS  FD8.0
09B8C:  BRA    9B94
09B8E:  MOVLB  0
09B90:  GOTO   9BA6
09B94:  MOVLB  0
....................                fprintf(PC, "\t\t-> Unknown SMF function type\r\n");
09B96:  MOVLW  74
09B98:  MOVWF  FF6
09B9A:  MOVLW  14
09B9C:  MOVWF  FF7
09B9E:  MOVLW  00
09BA0:  MOVWF  FF8
09BA2:  CALL   1D18
....................             }
....................             processed_count++;
09BA6:  MOVLB  3
09BA8:  INCF   xBE,F
09BAA:  MOVLB  0
....................          } else {
09BAC:  GOTO   9BC4
....................             fprintf(PC, "\t\t-> Error: Failed to dequeue SMF data\r\n");
09BB0:  MOVLW  96
09BB2:  MOVWF  FF6
09BB4:  MOVLW  14
09BB6:  MOVWF  FF7
09BB8:  MOVLW  00
09BBA:  MOVWF  FF8
09BBC:  CALL   1D18
....................             break;
09BC0:  GOTO   9BC8
....................          }
09BC4:  GOTO   9A74
....................       }
....................       
....................       fprintf(PC, "\t\t-> Completed processing %d SMF operations\r\n", processed_count);
09BC8:  MOVLW  C0
09BCA:  MOVWF  FF6
09BCC:  MOVLW  14
09BCE:  MOVWF  FF7
09BD0:  MOVLW  00
09BD2:  MOVWF  FF8
09BD4:  MOVLW  1A
09BD6:  MOVLB  8
09BD8:  MOVWF  x25
09BDA:  MOVLB  0
09BDC:  CALL   1D48
09BE0:  MOVFF  3BE,4CE
09BE4:  MOVLW  18
09BE6:  MOVLB  4
09BE8:  MOVWF  xCF
09BEA:  MOVLB  0
09BEC:  CALL   76E6
09BF0:  MOVLW  DC
09BF2:  MOVWF  FF6
09BF4:  MOVLW  14
09BF6:  MOVWF  FF7
09BF8:  MOVLW  00
09BFA:  MOVWF  FF8
09BFC:  MOVLW  11
09BFE:  MOVLB  8
09C00:  MOVWF  x25
09C02:  MOVLB  0
09C04:  CALL   1D48
....................       status[0] = FINISHED;
09C08:  MOVLW  06
09C0A:  MOVWF  48
....................    } else {
09C0C:  GOTO   9C20
....................       fprintf(PC, "\t\t-> denied\r\n");
09C10:  MOVLW  EE
09C12:  MOVWF  FF6
09C14:  MOVLW  14
09C16:  MOVWF  FF7
09C18:  MOVLW  00
09C1A:  MOVWF  FF8
09C1C:  CALL   1D18
....................    }
09C20:  GOTO   9C9A (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 *uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 *uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
04664:  MOVLW  FC
04666:  MOVWF  FF6
04668:  MOVLW  14
0466A:  MOVWF  FF7
0466C:  MOVLW  00
0466E:  MOVWF  FF8
04670:  CALL   1D18
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
04674:  MOVLB  3
04676:  MOVF   xC3,W
04678:  MOVWF  FE9
0467A:  MOVF   xC4,W
0467C:  MOVWF  FEA
0467E:  MOVFF  FEF,3C5
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
04682:  MOVLW  01
04684:  ADDWF  xC3,W
04686:  MOVWF  FE9
04688:  MOVLW  00
0468A:  ADDWFC xC4,W
0468C:  MOVWF  FEA
0468E:  MOVF   FEF,W
04690:  CLRF   xCF
04692:  CLRF   xCE
04694:  CLRF   xCD
04696:  MOVWF  xCC
04698:  MOVFF  3CC,3CF
0469C:  CLRF   xCC
0469E:  CLRF   xCD
046A0:  CLRF   xCE
046A2:  MOVLW  02
046A4:  ADDWF  xC3,W
046A6:  MOVWF  FE9
046A8:  MOVLW  00
046AA:  ADDWFC xC4,W
046AC:  MOVWF  FEA
046AE:  MOVF   FEF,W
046B0:  CLRF   xD4
046B2:  CLRF   xD3
046B4:  CLRF   xD2
046B6:  MOVWF  xD1
046B8:  MOVFF  3D2,03
046BC:  MOVFF  3D1,02
046C0:  CLRF   00
046C2:  CLRF   01
046C4:  MOVF   00,W
046C6:  IORWF  xCC,F
046C8:  MOVF   01,W
046CA:  IORWF  xCD,F
046CC:  MOVF   02,W
046CE:  IORWF  xCE,F
046D0:  MOVF   03,W
046D2:  IORWF  xCF,F
046D4:  MOVLW  03
046D6:  ADDWF  xC3,W
046D8:  MOVWF  FE9
046DA:  MOVLW  00
046DC:  ADDWFC xC4,W
046DE:  MOVWF  FEA
046E0:  MOVF   FEF,W
046E2:  CLRF   xD4
046E4:  CLRF   xD3
046E6:  CLRF   xD2
046E8:  MOVWF  xD1
046EA:  MOVFF  3D3,03
046EE:  MOVFF  3D2,02
046F2:  MOVFF  3D1,01
046F6:  CLRF   00
046F8:  MOVF   00,W
046FA:  IORWF  xCC,F
046FC:  MOVF   01,W
046FE:  IORWF  xCD,F
04700:  MOVF   02,W
04702:  IORWF  xCE,F
04704:  MOVF   03,W
04706:  IORWF  xCF,F
04708:  MOVLW  04
0470A:  ADDWF  xC3,W
0470C:  MOVWF  FE9
0470E:  MOVLW  00
04710:  ADDWFC xC4,W
04712:  MOVWF  FEA
04714:  MOVF   FEF,W
04716:  MOVWF  00
04718:  CLRF   01
0471A:  CLRF   02
0471C:  CLRF   03
0471E:  MOVF   00,W
04720:  IORWF  xCC,W
04722:  MOVWF  xC6
04724:  MOVF   01,W
04726:  IORWF  xCD,W
04728:  MOVWF  xC7
0472A:  MOVF   02,W
0472C:  IORWF  xCE,W
0472E:  MOVWF  xC8
04730:  MOVF   03,W
04732:  IORWF  xCF,W
04734:  MOVWF  xC9
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
04736:  MOVLW  05
04738:  ADDWF  xC3,W
0473A:  MOVWF  FE9
0473C:  MOVLW  00
0473E:  ADDWFC xC4,W
04740:  MOVWF  FEA
04742:  MOVF   FEF,W
04744:  CLRF   xCD
04746:  MOVWF  xCC
04748:  MOVFF  3CC,3CD
0474C:  CLRF   xCC
0474E:  MOVLW  06
04750:  ADDWF  xC3,W
04752:  MOVWF  FE9
04754:  MOVLW  00
04756:  ADDWFC xC4,W
04758:  MOVWF  FEA
0475A:  MOVF   FEF,W
0475C:  CLRF   03
0475E:  IORWF  xCC,W
04760:  MOVWF  xCA
04762:  MOVF   03,W
04764:  IORWF  xCD,W
04766:  MOVWF  xCB
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
04768:  MOVLW  10
0476A:  MOVWF  FF6
0476C:  MOVLW  15
0476E:  MOVWF  FF7
04770:  MOVLW  00
04772:  MOVWF  FF8
04774:  MOVLW  0C
04776:  MOVLB  8
04778:  MOVWF  x25
0477A:  MOVLB  0
0477C:  CALL   1D48
04780:  MOVFF  3C5,4C7
04784:  MOVLW  37
04786:  MOVLB  4
04788:  MOVWF  xC8
0478A:  MOVLB  0
0478C:  CALL   1F0A
04790:  MOVLW  0D
04792:  MOVLB  8
04794:  MOVWF  x68
04796:  MOVLB  0
04798:  CALL   1CC6
0479C:  MOVLW  0A
0479E:  MOVLB  8
047A0:  MOVWF  x68
047A2:  MOVLB  0
047A4:  CALL   1CC6
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
047A8:  MOVLW  24
047AA:  MOVWF  FF6
047AC:  MOVLW  15
047AE:  MOVWF  FF7
047B0:  MOVLW  00
047B2:  MOVWF  FF8
047B4:  MOVLW  0E
047B6:  MOVLB  8
047B8:  MOVWF  x25
047BA:  MOVLB  0
047BC:  CALL   1D48
047C0:  MOVFF  3C9,4C7
047C4:  MOVLW  37
047C6:  MOVLB  4
047C8:  MOVWF  xC8
047CA:  MOVLB  0
047CC:  CALL   1F0A
047D0:  MOVFF  3C8,4C7
047D4:  MOVLW  37
047D6:  MOVLB  4
047D8:  MOVWF  xC8
047DA:  MOVLB  0
047DC:  CALL   1F0A
047E0:  MOVFF  3C7,4C7
047E4:  MOVLW  37
047E6:  MOVLB  4
047E8:  MOVWF  xC8
047EA:  MOVLB  0
047EC:  CALL   1F0A
047F0:  MOVFF  3C6,4C7
047F4:  MOVLW  37
047F6:  MOVLB  4
047F8:  MOVWF  xC8
047FA:  MOVLB  0
047FC:  CALL   1F0A
04800:  MOVLW  0D
04802:  MOVLB  8
04804:  MOVWF  x68
04806:  MOVLB  0
04808:  CALL   1CC6
0480C:  MOVLW  0A
0480E:  MOVLB  8
04810:  MOVWF  x68
04812:  MOVLB  0
04814:  CALL   1CC6
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
04818:  MOVLW  3A
0481A:  MOVWF  FF6
0481C:  MOVLW  15
0481E:  MOVWF  FF7
04820:  MOVLW  00
04822:  MOVWF  FF8
04824:  MOVLW  0E
04826:  MOVLB  8
04828:  MOVWF  x25
0482A:  MOVLB  0
0482C:  CALL   1D48
04830:  MOVFF  3CB,4C7
04834:  MOVLW  37
04836:  MOVLB  4
04838:  MOVWF  xC8
0483A:  MOVLB  0
0483C:  CALL   1F0A
04840:  MOVFF  3CA,4C7
04844:  MOVLW  37
04846:  MOVLB  4
04848:  MOVWF  xC8
0484A:  MOVLB  0
0484C:  CALL   1F0A
04850:  MOVLW  0D
04852:  MOVLB  8
04854:  MOVWF  x68
04856:  MOVLB  0
04858:  CALL   1CC6
0485C:  MOVLW  0A
0485E:  MOVLB  8
04860:  MOVWF  x68
04862:  MOVLB  0
04864:  CALL   1CC6
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
04868:  MOVFF  3C5,4CA
0486C:  MOVLW  01
0486E:  MOVLB  4
04870:  MOVWF  xCB
04872:  MOVLB  0
04874:  CALL   3DCC
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
04878:  MOVFF  3C5,4CA
0487C:  MOVLW  02
0487E:  MOVLB  4
04880:  MOVWF  xCB
04882:  MOVLB  0
04884:  CALL   3DCC
....................    fprintf(PC, "End MODE DUMMY\r\n");
04888:  MOVLW  50
0488A:  MOVWF  FF6
0488C:  MOVLW  15
0488E:  MOVWF  FF7
04890:  MOVLW  00
04892:  MOVWF  FF8
04894:  CALL   1D18
04898:  GOTO   7B6A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
04D74:  MOVLW  01
04D76:  MOVLB  3
04D78:  ADDWF  xC3,W
04D7A:  MOVWF  FE9
04D7C:  MOVLW  00
04D7E:  ADDWFC xC4,W
04D80:  MOVWF  FEA
04D82:  MOVFF  FEF,3C5
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
04D86:  MOVLW  62
04D88:  MOVWF  FF6
04D8A:  MOVLW  15
04D8C:  MOVWF  FF7
04D8E:  MOVLW  00
04D90:  MOVWF  FF8
04D92:  MOVLB  0
04D94:  CALL   1D18
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04D98:  MOVLW  78
04D9A:  MOVWF  FF6
04D9C:  MOVLW  15
04D9E:  MOVWF  FF7
04DA0:  MOVLW  00
04DA2:  MOVWF  FF8
04DA4:  MOVLW  0E
04DA6:  MOVLB  8
04DA8:  MOVWF  x25
04DAA:  MOVLB  0
04DAC:  CALL   1D48
04DB0:  MOVFF  3C5,825
04DB4:  MOVLW  1B
04DB6:  MOVLB  8
04DB8:  MOVWF  x26
04DBA:  MOVLB  0
04DBC:  CALL   48E4
04DC0:  MOVLW  0D
04DC2:  MOVLB  8
04DC4:  MOVWF  x68
04DC6:  MOVLB  0
04DC8:  CALL   1CC6
04DCC:  MOVLW  0A
04DCE:  MOVLB  8
04DD0:  MOVWF  x68
04DD2:  MOVLB  0
04DD4:  CALL   1CC6
....................    output_high(CONNECT_CIGS1);
04DD8:  BCF    F94.0
04DDA:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
04DDC:  BCF    F94.7
04DDE:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
04DE0:  MOVFF  3C3,3C8
04DE4:  GOTO   4C4C
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
04DE8:  MOVLW  8C
04DEA:  MOVWF  FF6
04DEC:  MOVLW  15
04DEE:  MOVWF  FF7
04DF0:  MOVLW  00
04DF2:  MOVWF  FF8
04DF4:  CALL   1D18
....................    output_low(CONNECT_CIGS1);
04DF8:  BCF    F94.0
04DFA:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
04DFC:  BCF    F94.7
04DFE:  BSF    F8B.7
04E00:  GOTO   7B7A (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
05666:  MOVLW  50
05668:  MOVLB  3
0566A:  MOVWF  xCF
0566C:  MOVLB  0
0566E:  GOTO   4FB2
....................    SmfDataStruct data;
....................    //data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
05672:  MOVLB  3
05674:  MOVF   x74,W
05676:  MOVWF  xCF
05678:  MOVF   x75,W
0567A:  MOVWF  xD0
0567C:  MOVLW  16
0567E:  ADDWF  x76,W
05680:  MOVWF  xD1
05682:  MOVLW  00
05684:  ADDWFC x77,W
05686:  MOVWF  xD2
05688:  MOVF   x79,W
0568A:  SUBWF  xCF,W
0568C:  MOVWF  xC7
0568E:  MOVF   x7A,W
05690:  SUBWFB xD0,W
05692:  MOVWF  xC8
05694:  MOVF   x7B,W
05696:  SUBWFB xD1,W
05698:  MOVWF  xC9
0569A:  MOVF   x7C,W
0569C:  SUBWFB xD2,W
0569E:  MOVWF  xCA
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
056A0:  MOVFF  37C,3CE
056A4:  MOVFF  37B,3CD
056A8:  MOVFF  37A,3CC
056AC:  MOVFF  379,3CB
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
056B0:  MOVLW  03
056B2:  MOVWF  xE0
056B4:  MOVLW  C5
056B6:  MOVWF  xDF
056B8:  MOVLB  0
056BA:  CALL   54FC
056BE:  GOTO   7BA6 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[])
.................... {
....................    printf("Start MODE MEAS IV\r\n");
*
077F6:  MOVLW  E4
077F8:  MOVWF  FF6
077FA:  MOVLW  15
077FC:  MOVWF  FF7
077FE:  MOVLW  00
07800:  MOVWF  FF8
07802:  CALL   1D18
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd); // Create the measurement command structure
07806:  MOVFF  3C4,3E6
0780A:  MOVFF  3C3,3E5
0780E:  GOTO   761A
07812:  MOVFF  02,03
07816:  MOVF   01,W
07818:  MOVWF  FE1
0781A:  MOVFF  03,FE2
0781E:  MOVLW  03
07820:  MOVWF  FEA
07822:  MOVLW  C5
07824:  MOVWF  FE9
07826:  MOVLW  0C
07828:  MOVWF  01
0782A:  MOVFF  FE6,FEE
0782E:  DECFSZ 01,F
07830:  GOTO   782A
....................    printf("\tID: %02X\r\n", cmd.id);
07834:  MOVLW  FA
07836:  MOVWF  FF6
07838:  MOVLW  15
0783A:  MOVWF  FF7
0783C:  MOVLW  00
0783E:  MOVWF  FF8
07840:  MOVLW  05
07842:  MOVLB  8
07844:  MOVWF  x25
07846:  MOVLB  0
07848:  CALL   1D48
0784C:  MOVFF  3C5,4C7
07850:  MOVLW  37
07852:  MOVLB  4
07854:  MOVWF  xC8
07856:  MOVLB  0
07858:  CALL   1F0A
0785C:  MOVLW  0D
0785E:  MOVLB  8
07860:  MOVWF  x68
07862:  MOVLB  0
07864:  CALL   1CC6
07868:  MOVLW  0A
0786A:  MOVLB  8
0786C:  MOVWF  x68
0786E:  MOVLB  0
07870:  CALL   1CC6
....................    //printf("\tSleep Time: %d ms\r\n", cmd.sleep_time);
....................    //printf("\tCurrent Threshold: %d mA\r\n", cmd.curr_threshold);
....................    //printf("\tPD Threshold: %d mA\r\n", cmd.pd_threshold);
....................    //printf("\tCurrent Limit: %d mA\r\n", cmd.curr_limit);
....................    //printf("\tMeasurement Time: %d ms\r\n", cmd.meas_time);
....................    printf("\tIs Finished: %d\r\n", cmd.is_finished);   
07874:  MOVLW  06
07876:  MOVWF  FF6
07878:  MOVLW  16
0787A:  MOVWF  FF7
0787C:  MOVLW  00
0787E:  MOVWF  FF8
07880:  MOVLW  0E
07882:  MOVLB  8
07884:  MOVWF  x25
07886:  MOVLB  0
07888:  CALL   1D48
0788C:  MOVFF  3D0,4CE
07890:  MOVLW  18
07892:  MOVLB  4
07894:  MOVWF  xCF
07896:  MOVLB  0
07898:  CALL   76E6
0789C:  MOVLW  0D
0789E:  MOVLB  8
078A0:  MOVWF  x68
078A2:  MOVLB  0
078A4:  CALL   1CC6
078A8:  MOVLW  0A
078AA:  MOVLB  8
078AC:  MOVWF  x68
078AE:  MOVLB  0
078B0:  CALL   1CC6
.................... 
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the end of the command execution
078B4:  MOVLB  3
078B6:  MOVF   xC3,W
078B8:  MOVWF  FE9
078BA:  MOVF   xC4,W
078BC:  MOVWF  FEA
078BE:  MOVFF  FEF,3DF
078C2:  MOVFF  3DF,4CA
078C6:  MOVLW  01
078C8:  MOVLB  4
078CA:  MOVWF  xCB
078CC:  MOVLB  0
078CE:  CALL   3DCC
.................... 
....................    unsigned int16 start_time = get_current_sec();
....................    unsigned int16 current_sec = 0;
078D2:  CALL   3146
078D6:  MOVFF  01,3D2
078DA:  MOVFF  00,3D1
078DE:  MOVLB  3
078E0:  CLRF   xD4
078E2:  CLRF   xD3
078E4:  MOVLB  0
....................    while(get_current_sec() - start_time < cmd.meas_time)
078E6:  CALL   3146
078EA:  MOVFF  03,3E2
078EE:  MOVFF  02,3E1
078F2:  MOVFF  01,3E0
078F6:  MOVFF  00,3DF
078FA:  MOVLB  3
078FC:  MOVF   xD1,W
078FE:  SUBWF  xDF,F
07900:  MOVF   xD2,W
07902:  SUBWFB xE0,F
07904:  MOVLW  00
07906:  SUBWFB xE1,F
07908:  MOVLW  00
0790A:  SUBWFB xE2,F
0790C:  MOVF   xE2,F
0790E:  BTFSC  FD8.2
07910:  BRA    7918
07912:  MOVLB  0
07914:  GOTO   79C6
07918:  MOVLB  0
0791A:  MOVLB  3
0791C:  MOVF   xE1,F
0791E:  BTFSC  FD8.2
07920:  BRA    7928
07922:  MOVLB  0
07924:  GOTO   79C6
07928:  MOVLB  0
0792A:  MOVLB  3
0792C:  MOVF   xE0,W
0792E:  SUBWF  xCF,W
07930:  BTFSC  FD8.0
07932:  BRA    793A
07934:  MOVLB  0
07936:  GOTO   79C6
0793A:  MOVLB  0
0793C:  BTFSS  FD8.2
0793E:  GOTO   7954
07942:  MOVLB  3
07944:  MOVF   xCE,W
07946:  SUBWF  xDF,W
07948:  BTFSS  FD8.0
0794A:  BRA    7952
0794C:  MOVLB  0
0794E:  GOTO   79C6
07952:  MOVLB  0
....................    {
....................       current_sec = get_current_sec();
07954:  CALL   3146
07958:  MOVFF  01,3D4
0795C:  MOVFF  00,3D3
....................       if (current_sec - start_time >= cmd.meas_time) {
07960:  MOVLB  3
07962:  MOVF   xD1,W
07964:  SUBWF  xD3,W
07966:  MOVWF  xDF
07968:  MOVF   xD2,W
0796A:  SUBWFB xD4,W
0796C:  MOVWF  xE0
0796E:  MOVF   xCF,W
07970:  SUBWF  xE0,W
07972:  BTFSC  FD8.0
07974:  BRA    797C
07976:  MOVLB  0
07978:  GOTO   799A
0797C:  MOVLB  0
0797E:  BTFSS  FD8.2
07980:  GOTO   7996
07984:  MOVLB  3
07986:  MOVF   xCE,W
07988:  SUBWF  xDF,W
0798A:  BTFSC  FD8.0
0798C:  BRA    7994
0798E:  MOVLB  0
07990:  GOTO   799A
07994:  MOVLB  0
....................           break;
07996:  GOTO   79C6
....................       }
.................... 
....................       // Sleep for the specified time
....................       delay_ms(cmd.sleep_time);
0799A:  MOVFF  3C7,3DF
0799E:  MOVLB  3
079A0:  INCF   xDF,F
079A2:  MOVLB  0
079A4:  MOVLB  3
079A6:  DECFSZ xDF,F
079A8:  BRA    79AE
079AA:  MOVLB  0
079AC:  BRA    79BA
079AE:  MOVLB  8
079B0:  SETF   x7D
079B2:  MOVLB  0
079B4:  CALL   1C98
079B8:  BRA    79A4
079BA:  MOVFF  3C6,87D
079BE:  CALL   1C98
079C2:  GOTO   78E6
....................    }
.................... 
.................... 
....................    SmfDataStruct data;
....................    data.func_type = SMF_WRITE; // Set the function type for measurement data
079C6:  CLRF   03
079C8:  MOVLW  00
079CA:  MOVWF  02
079CC:  MOVLW  86
079CE:  MOVWF  01
079D0:  MOVLW  AC
079D2:  MOVWF  00
079D4:  MOVFF  00,3D5
....................    data.mission_id = ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
079D8:  MOVLW  C1
079DA:  MOVLB  3
079DC:  MOVWF  xD6
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
079DE:  MOVF   x74,W
079E0:  MOVWF  xDF
079E2:  MOVF   x75,W
079E4:  MOVWF  xE0
079E6:  MOVLW  16
079E8:  ADDWF  x76,W
079EA:  MOVWF  xE1
079EC:  MOVLW  00
079EE:  ADDWFC x77,W
079F0:  MOVWF  xE2
079F2:  MOVF   x79,W
079F4:  SUBWF  xDF,W
079F6:  MOVWF  xD7
079F8:  MOVF   x7A,W
079FA:  SUBWFB xE0,W
079FC:  MOVWF  xD8
079FE:  MOVF   x7B,W
07A00:  SUBWFB xE1,W
07A02:  MOVWF  xD9
07A04:  MOVF   x7C,W
07A06:  SUBWFB xE2,W
07A08:  MOVWF  xDA
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
07A0A:  MOVFF  37C,3DE
07A0E:  MOVFF  37B,3DD
07A12:  MOVFF  37A,3DC
07A16:  MOVFF  379,3DB
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
07A1A:  MOVLW  03
07A1C:  MOVWF  xE0
07A1E:  MOVLW  D5
07A20:  MOVWF  xDF
07A22:  MOVLB  0
07A24:  CALL   54FC
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
....................    fprintf(PC, "End MODE MEAS IV\r\n");
07A28:  MOVLW  1A
07A2A:  MOVWF  FF6
07A2C:  MOVLW  16
07A2E:  MOVWF  FF7
07A30:  MOVLW  00
07A32:  MOVWF  FF8
07A34:  CALL   1D18
07A38:  GOTO   7CB6 (RETURN)
.................... }
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
0761A:  MOVLB  3
0761C:  MOVF   xE5,W
0761E:  MOVWF  FE9
07620:  MOVF   xE6,W
07622:  MOVWF  FEA
07624:  MOVFF  FEF,3E7
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
07628:  MOVLW  01
0762A:  ADDWF  xE5,W
0762C:  MOVWF  FE9
0762E:  MOVLW  00
07630:  ADDWFC xE6,W
07632:  MOVWF  FEA
07634:  MOVF   FEF,W
07636:  CLRF   xF4
07638:  MOVWF  xF3
0763A:  MOVFF  3F3,3F4
0763E:  CLRF   xF3
07640:  MOVLW  02
07642:  ADDWF  xE5,W
07644:  MOVWF  FE9
07646:  MOVLW  00
07648:  ADDWFC xE6,W
0764A:  MOVWF  FEA
0764C:  MOVF   FEF,W
0764E:  CLRF   03
07650:  IORWF  xF3,W
07652:  MOVWF  xE8
07654:  MOVF   03,W
07656:  IORWF  xF4,W
07658:  MOVWF  xE9
....................    cmd.curr_threshold = uplinkcmd[3]<< 4;
0765A:  MOVLW  03
0765C:  ADDWF  xE5,W
0765E:  MOVWF  FE9
07660:  MOVLW  00
07662:  ADDWFC xE6,W
07664:  MOVWF  FEA
07666:  SWAPF  FEF,W
07668:  MOVWF  xEA
0766A:  MOVLW  F0
0766C:  ANDWF  xEA,F
....................    cmd.pd_threshold = uplinkcmd[4]<< 4;
0766E:  MOVLW  04
07670:  ADDWF  xE5,W
07672:  MOVWF  FE9
07674:  MOVLW  00
07676:  ADDWFC xE6,W
07678:  MOVWF  FEA
0767A:  SWAPF  FEF,W
0767C:  MOVWF  xEC
0767E:  MOVLW  F0
07680:  ANDWF  xEC,F
....................    cmd.curr_limit = uplinkcmd[5]<< 4;
07682:  MOVLW  05
07684:  ADDWF  xE5,W
07686:  MOVWF  FE9
07688:  MOVLW  00
0768A:  ADDWFC xE6,W
0768C:  MOVWF  FEA
0768E:  SWAPF  FEF,W
07690:  MOVWF  xEE
07692:  MOVLW  F0
07694:  ANDWF  xEE,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
07696:  MOVLW  06
07698:  ADDWF  xE5,W
0769A:  MOVWF  FE9
0769C:  MOVLW  00
0769E:  ADDWFC xE6,W
076A0:  MOVWF  FEA
076A2:  MOVF   FEF,W
076A4:  CLRF   xF4
076A6:  MOVWF  xF3
076A8:  MOVFF  3F3,3F4
076AC:  CLRF   xF3
076AE:  MOVLW  07
076B0:  ADDWF  xE5,W
076B2:  MOVWF  FE9
076B4:  MOVLW  00
076B6:  ADDWFC xE6,W
076B8:  MOVWF  FEA
076BA:  MOVF   FEF,W
076BC:  CLRF   03
076BE:  IORWF  xF3,W
076C0:  MOVWF  xF0
076C2:  MOVF   03,W
076C4:  IORWF  xF4,W
076C6:  MOVWF  xF1
....................    cmd.is_finished = uplinkcmd[8];
076C8:  MOVLW  08
076CA:  ADDWF  xE5,W
076CC:  MOVWF  FE9
076CE:  MOVLW  00
076D0:  ADDWFC xE6,W
076D2:  MOVWF  FEA
076D4:  MOVFF  FEF,3F2
....................    return cmd;
076D8:  MOVLW  E7
076DA:  MOVWF  01
076DC:  MOVLW  03
076DE:  MOVWF  02
076E0:  MOVLB  0
076E2:  GOTO   7812 (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE,    // SMF書き込み操作
....................    SMF_READ,     // SMF読み込み操作
....................    SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     FunctionType   func_type;
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
05A1E:  MOVLW  2E
05A20:  MOVWF  FF6
05A22:  MOVLW  16
05A24:  MOVWF  FF7
05A26:  MOVLW  00
05A28:  MOVWF  FF8
05A2A:  CALL   1D18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
05A2E:  MOVLB  3
05A30:  MOVF   xC5,W
05A32:  MOVWF  FE9
05A34:  MOVF   xC6,W
05A36:  MOVWF  FEA
05A38:  MOVFF  FEF,3C7
....................    piclog_make(cmd, 0x00); // Log the command execution
05A3C:  MOVFF  3C7,4CA
05A40:  MOVLB  4
05A42:  CLRF   xCB
05A44:  MOVLB  0
05A46:  CALL   3DCC
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
05A4A:  MOVLB  3
05A4C:  CLRF   xCB
05A4E:  CLRF   xCA
05A50:  CLRF   xC9
05A52:  CLRF   xC8
05A54:  MOVLB  0
05A56:  MOVLB  3
05A58:  MOVF   xCB,F
05A5A:  BTFSC  FD8.2
05A5C:  BRA    5A64
05A5E:  MOVLB  0
05A60:  GOTO   5AC4
05A64:  MOVLB  0
05A66:  MOVLB  3
05A68:  MOVF   xCA,W
05A6A:  SUBLW  F4
05A6C:  BTFSC  FD8.0
05A6E:  BRA    5A76
05A70:  MOVLB  0
05A72:  GOTO   5AC4
05A76:  MOVLB  0
05A78:  BTFSS  FD8.2
05A7A:  GOTO   5A90
05A7E:  MOVLB  3
05A80:  MOVF   xC9,W
05A82:  SUBLW  23
05A84:  BTFSC  FD8.0
05A86:  BRA    5A8E
05A88:  MOVLB  0
05A8A:  GOTO   5AC4
05A8E:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05A90:  MOVFF  F1,40C
05A94:  MOVFF  F0,40B
05A98:  MOVFF  EF,40A
05A9C:  MOVFF  EE,409
05AA0:  MOVFF  3CB,410
05AA4:  MOVFF  3CA,40F
05AA8:  MOVFF  3C9,40E
05AAC:  MOVFF  3C8,40D
05AB0:  CALL   56C2
05AB4:  MOVLW  01
05AB6:  MOVLB  3
05AB8:  ADDWF  xCA,F
05ABA:  MOVLW  00
05ABC:  ADDWFC xCB,F
05ABE:  MOVLB  0
05AC0:  GOTO   5A56
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05AC4:  MOVFF  3C7,4CA
05AC8:  MOVLW  02
05ACA:  MOVLB  4
05ACC:  MOVWF  xCB
05ACE:  MOVLB  0
05AD0:  CALL   3DCC
....................    fprintf(PC, "End Flash Erase All\r\n");
05AD4:  MOVLW  46
05AD6:  MOVWF  FF6
05AD8:  MOVLW  16
05ADA:  MOVWF  FF7
05ADC:  MOVLW  00
05ADE:  MOVWF  FF8
05AE0:  CALL   1D18
05AE4:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
05AE6:  MOVLW  5C
05AE8:  MOVWF  FF6
05AEA:  MOVLW  16
05AEC:  MOVWF  FF7
05AEE:  MOVLW  00
05AF0:  MOVWF  FF8
05AF2:  CALL   1D18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05AF6:  MOVLB  3
05AF8:  MOVF   xC3,W
05AFA:  MOVWF  FE9
05AFC:  MOVF   xC4,W
05AFE:  MOVWF  FEA
05B00:  MOVFF  FEF,3C5
05B04:  MOVLW  01
05B06:  ADDWF  xC3,W
05B08:  MOVWF  FE9
05B0A:  MOVLW  00
05B0C:  ADDWFC xC4,W
05B0E:  MOVWF  FEA
05B10:  MOVF   FEF,W
05B12:  CLRF   xCD
05B14:  CLRF   xCC
05B16:  CLRF   xCB
05B18:  MOVWF  xCA
05B1A:  MOVFF  3CA,3CD
05B1E:  CLRF   xCA
05B20:  CLRF   xCB
05B22:  CLRF   xCC
05B24:  MOVLW  02
05B26:  ADDWF  xC3,W
05B28:  MOVWF  FE9
05B2A:  MOVLW  00
05B2C:  ADDWFC xC4,W
05B2E:  MOVWF  FEA
05B30:  MOVF   FEF,W
05B32:  CLRF   xD2
05B34:  CLRF   xD1
05B36:  CLRF   xD0
05B38:  MOVWF  xCF
05B3A:  MOVFF  3D0,03
05B3E:  MOVFF  3CF,02
05B42:  CLRF   00
05B44:  CLRF   01
05B46:  MOVF   00,W
05B48:  IORWF  xCA,F
05B4A:  MOVF   01,W
05B4C:  IORWF  xCB,F
05B4E:  MOVF   02,W
05B50:  IORWF  xCC,F
05B52:  MOVF   03,W
05B54:  IORWF  xCD,F
05B56:  MOVLW  03
05B58:  ADDWF  xC3,W
05B5A:  MOVWF  FE9
05B5C:  MOVLW  00
05B5E:  ADDWFC xC4,W
05B60:  MOVWF  FEA
05B62:  MOVF   FEF,W
05B64:  CLRF   xD2
05B66:  CLRF   xD1
05B68:  CLRF   xD0
05B6A:  MOVWF  xCF
05B6C:  MOVFF  3D1,03
05B70:  MOVFF  3D0,02
05B74:  MOVFF  3CF,01
05B78:  CLRF   00
05B7A:  MOVF   00,W
05B7C:  IORWF  xCA,F
05B7E:  MOVF   01,W
05B80:  IORWF  xCB,F
05B82:  MOVF   02,W
05B84:  IORWF  xCC,F
05B86:  MOVF   03,W
05B88:  IORWF  xCD,F
05B8A:  MOVLW  04
05B8C:  ADDWF  xC3,W
05B8E:  MOVWF  FE9
05B90:  MOVLW  00
05B92:  ADDWFC xC4,W
05B94:  MOVWF  FEA
05B96:  MOVF   FEF,W
05B98:  MOVWF  00
05B9A:  CLRF   01
05B9C:  CLRF   02
05B9E:  CLRF   03
05BA0:  MOVF   00,W
05BA2:  IORWF  xCA,W
05BA4:  MOVWF  xC6
05BA6:  MOVF   01,W
05BA8:  IORWF  xCB,W
05BAA:  MOVWF  xC7
05BAC:  MOVF   02,W
05BAE:  IORWF  xCC,W
05BB0:  MOVWF  xC8
05BB2:  MOVF   03,W
05BB4:  IORWF  xCD,W
05BB6:  MOVWF  xC9
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
05BB8:  MOVLW  7A
05BBA:  MOVWF  FF6
05BBC:  MOVLW  16
05BBE:  MOVWF  FF7
05BC0:  MOVLW  00
05BC2:  MOVWF  FF8
05BC4:  MOVLW  13
05BC6:  MOVLB  8
05BC8:  MOVWF  x25
05BCA:  MOVLB  0
05BCC:  CALL   1D48
05BD0:  MOVFF  3C9,4C7
05BD4:  MOVLW  37
05BD6:  MOVLB  4
05BD8:  MOVWF  xC8
05BDA:  MOVLB  0
05BDC:  CALL   1F0A
05BE0:  MOVFF  3C8,4C7
05BE4:  MOVLW  37
05BE6:  MOVLB  4
05BE8:  MOVWF  xC8
05BEA:  MOVLB  0
05BEC:  CALL   1F0A
05BF0:  MOVFF  3C7,4C7
05BF4:  MOVLW  37
05BF6:  MOVLB  4
05BF8:  MOVWF  xC8
05BFA:  MOVLB  0
05BFC:  CALL   1F0A
05C00:  MOVFF  3C6,4C7
05C04:  MOVLW  37
05C06:  MOVLB  4
05C08:  MOVWF  xC8
05C0A:  MOVLB  0
05C0C:  CALL   1F0A
05C10:  MOVLW  0D
05C12:  MOVLB  8
05C14:  MOVWF  x68
05C16:  MOVLB  0
05C18:  CALL   1CC6
05C1C:  MOVLW  0A
05C1E:  MOVLB  8
05C20:  MOVWF  x68
05C22:  MOVLB  0
05C24:  CALL   1CC6
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05C28:  MOVFF  3C5,4CA
05C2C:  MOVLW  01
05C2E:  MOVLB  4
05C30:  MOVWF  xCB
05C32:  MOVLB  0
05C34:  CALL   3DCC
....................    
....................    sector_erase(mis_fm, sector_address);
05C38:  MOVFF  F1,40C
05C3C:  MOVFF  F0,40B
05C40:  MOVFF  EF,40A
05C44:  MOVFF  EE,409
05C48:  MOVFF  3C9,410
05C4C:  MOVFF  3C8,40F
05C50:  MOVFF  3C7,40E
05C54:  MOVFF  3C6,40D
05C58:  CALL   56C2
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05C5C:  MOVFF  3C5,4CA
05C60:  MOVLW  02
05C62:  MOVLB  4
05C64:  MOVWF  xCB
05C66:  MOVLB  0
05C68:  CALL   3DCC
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
05C6C:  MOVLW  96
05C6E:  MOVWF  FF6
05C70:  MOVLW  16
05C72:  MOVWF  FF7
05C74:  MOVLW  00
05C76:  MOVWF  FF8
05C78:  CALL   1D18
05C7C:  GOTO   7BC6 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
05C80:  MOVLW  B2
05C82:  MOVWF  FF6
05C84:  MOVLW  16
05C86:  MOVWF  FF7
05C88:  MOVLW  00
05C8A:  MOVWF  FF8
05C8C:  CALL   1D18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05C90:  MOVLB  3
05C92:  MOVF   xC3,W
05C94:  MOVWF  FE9
05C96:  MOVF   xC4,W
05C98:  MOVWF  FEA
05C9A:  MOVFF  FEF,3C5
05C9E:  MOVLW  01
05CA0:  ADDWF  xC3,W
05CA2:  MOVWF  FE9
05CA4:  MOVLW  00
05CA6:  ADDWFC xC4,W
05CA8:  MOVWF  FEA
05CAA:  MOVF   FEF,W
05CAC:  CLRF   xCD
05CAE:  CLRF   xCC
05CB0:  CLRF   xCB
05CB2:  MOVWF  xCA
05CB4:  MOVFF  3CA,3CD
05CB8:  CLRF   xCA
05CBA:  CLRF   xCB
05CBC:  CLRF   xCC
05CBE:  MOVLW  02
05CC0:  ADDWF  xC3,W
05CC2:  MOVWF  FE9
05CC4:  MOVLW  00
05CC6:  ADDWFC xC4,W
05CC8:  MOVWF  FEA
05CCA:  MOVF   FEF,W
05CCC:  CLRF   xD2
05CCE:  CLRF   xD1
05CD0:  CLRF   xD0
05CD2:  MOVWF  xCF
05CD4:  MOVFF  3D0,03
05CD8:  MOVFF  3CF,02
05CDC:  CLRF   00
05CDE:  CLRF   01
05CE0:  MOVF   00,W
05CE2:  IORWF  xCA,F
05CE4:  MOVF   01,W
05CE6:  IORWF  xCB,F
05CE8:  MOVF   02,W
05CEA:  IORWF  xCC,F
05CEC:  MOVF   03,W
05CEE:  IORWF  xCD,F
05CF0:  MOVLW  03
05CF2:  ADDWF  xC3,W
05CF4:  MOVWF  FE9
05CF6:  MOVLW  00
05CF8:  ADDWFC xC4,W
05CFA:  MOVWF  FEA
05CFC:  MOVF   FEF,W
05CFE:  CLRF   xD2
05D00:  CLRF   xD1
05D02:  CLRF   xD0
05D04:  MOVWF  xCF
05D06:  MOVFF  3D1,03
05D0A:  MOVFF  3D0,02
05D0E:  MOVFF  3CF,01
05D12:  CLRF   00
05D14:  MOVF   00,W
05D16:  IORWF  xCA,F
05D18:  MOVF   01,W
05D1A:  IORWF  xCB,F
05D1C:  MOVF   02,W
05D1E:  IORWF  xCC,F
05D20:  MOVF   03,W
05D22:  IORWF  xCD,F
05D24:  MOVLW  04
05D26:  ADDWF  xC3,W
05D28:  MOVWF  FE9
05D2A:  MOVLW  00
05D2C:  ADDWFC xC4,W
05D2E:  MOVWF  FEA
05D30:  MOVF   FEF,W
05D32:  MOVWF  00
05D34:  CLRF   01
05D36:  CLRF   02
05D38:  CLRF   03
05D3A:  MOVF   00,W
05D3C:  IORWF  xCA,W
05D3E:  MOVWF  xC6
05D40:  MOVF   01,W
05D42:  IORWF  xCB,W
05D44:  MOVWF  xC7
05D46:  MOVF   02,W
05D48:  IORWF  xCC,W
05D4A:  MOVWF  xC8
05D4C:  MOVF   03,W
05D4E:  IORWF  xCD,W
05D50:  MOVWF  xC9
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05D52:  MOVLW  CE
05D54:  MOVWF  FF6
05D56:  MOVLW  16
05D58:  MOVWF  FF7
05D5A:  MOVLW  00
05D5C:  MOVWF  FF8
05D5E:  MOVLW  16
05D60:  MOVLB  8
05D62:  MOVWF  x25
05D64:  MOVLB  0
05D66:  CALL   1D48
05D6A:  MOVFF  3C9,4C7
05D6E:  MOVLW  37
05D70:  MOVLB  4
05D72:  MOVWF  xC8
05D74:  MOVLB  0
05D76:  CALL   1F0A
05D7A:  MOVFF  3C8,4C7
05D7E:  MOVLW  37
05D80:  MOVLB  4
05D82:  MOVWF  xC8
05D84:  MOVLB  0
05D86:  CALL   1F0A
05D8A:  MOVFF  3C7,4C7
05D8E:  MOVLW  37
05D90:  MOVLB  4
05D92:  MOVWF  xC8
05D94:  MOVLB  0
05D96:  CALL   1F0A
05D9A:  MOVFF  3C6,4C7
05D9E:  MOVLW  37
05DA0:  MOVLB  4
05DA2:  MOVWF  xC8
05DA4:  MOVLB  0
05DA6:  CALL   1F0A
05DAA:  MOVLW  0D
05DAC:  MOVLB  8
05DAE:  MOVWF  x68
05DB0:  MOVLB  0
05DB2:  CALL   1CC6
05DB6:  MOVLW  0A
05DB8:  MOVLB  8
05DBA:  MOVWF  x68
05DBC:  MOVLB  0
05DBE:  CALL   1CC6
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05DC2:  MOVFF  3C5,4CA
05DC6:  MOVLW  01
05DC8:  MOVLB  4
05DCA:  MOVWF  xCB
05DCC:  MOVLB  0
05DCE:  CALL   3DCC
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
05DD2:  MOVFF  F1,868
05DD6:  MOVFF  F0,867
05DDA:  MOVFF  EF,866
05DDE:  MOVFF  EE,865
05DE2:  MOVLB  8
05DE4:  CLRF   x6C
05DE6:  CLRF   x6B
05DE8:  CLRF   x6A
05DEA:  CLRF   x69
05DEC:  MOVLB  0
05DEE:  CALL   37D0
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05DF2:  MOVFF  3C5,4CA
05DF6:  MOVLW  02
05DF8:  MOVLB  4
05DFA:  MOVWF  xCB
05DFC:  MOVLB  0
05DFE:  CALL   3DCC
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
05E02:  MOVLW  EC
05E04:  MOVWF  FF6
05E06:  MOVLW  16
05E08:  MOVWF  FF7
05E0A:  MOVLW  00
05E0C:  MOVWF  FF8
05E0E:  CALL   1D18
05E12:  GOTO   7BD6 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05E16:  MOVLW  06
05E18:  MOVWF  FF6
05E1A:  MOVLW  17
05E1C:  MOVWF  FF7
05E1E:  MOVLW  00
05E20:  MOVWF  FF8
05E22:  CALL   1D18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05E26:  MOVLB  3
05E28:  MOVF   xC3,W
05E2A:  MOVWF  FE9
05E2C:  MOVF   xC4,W
05E2E:  MOVWF  FEA
05E30:  MOVFF  FEF,3C5
05E34:  MOVLW  01
05E36:  ADDWF  xC3,W
05E38:  MOVWF  FE9
05E3A:  MOVLW  00
05E3C:  ADDWFC xC4,W
05E3E:  MOVWF  FEA
05E40:  MOVF   FEF,W
05E42:  CLRF   xCD
05E44:  CLRF   xCC
05E46:  CLRF   xCB
05E48:  MOVWF  xCA
05E4A:  MOVFF  3CA,3CD
05E4E:  CLRF   xCA
05E50:  CLRF   xCB
05E52:  CLRF   xCC
05E54:  MOVLW  02
05E56:  ADDWF  xC3,W
05E58:  MOVWF  FE9
05E5A:  MOVLW  00
05E5C:  ADDWFC xC4,W
05E5E:  MOVWF  FEA
05E60:  MOVF   FEF,W
05E62:  CLRF   xD2
05E64:  CLRF   xD1
05E66:  CLRF   xD0
05E68:  MOVWF  xCF
05E6A:  MOVFF  3D0,03
05E6E:  MOVFF  3CF,02
05E72:  CLRF   00
05E74:  CLRF   01
05E76:  MOVF   00,W
05E78:  IORWF  xCA,F
05E7A:  MOVF   01,W
05E7C:  IORWF  xCB,F
05E7E:  MOVF   02,W
05E80:  IORWF  xCC,F
05E82:  MOVF   03,W
05E84:  IORWF  xCD,F
05E86:  MOVLW  03
05E88:  ADDWF  xC3,W
05E8A:  MOVWF  FE9
05E8C:  MOVLW  00
05E8E:  ADDWFC xC4,W
05E90:  MOVWF  FEA
05E92:  MOVF   FEF,W
05E94:  CLRF   xD2
05E96:  CLRF   xD1
05E98:  CLRF   xD0
05E9A:  MOVWF  xCF
05E9C:  MOVFF  3D1,03
05EA0:  MOVFF  3D0,02
05EA4:  MOVFF  3CF,01
05EA8:  CLRF   00
05EAA:  MOVF   00,W
05EAC:  IORWF  xCA,F
05EAE:  MOVF   01,W
05EB0:  IORWF  xCB,F
05EB2:  MOVF   02,W
05EB4:  IORWF  xCC,F
05EB6:  MOVF   03,W
05EB8:  IORWF  xCD,F
05EBA:  MOVLW  04
05EBC:  ADDWF  xC3,W
05EBE:  MOVWF  FE9
05EC0:  MOVLW  00
05EC2:  ADDWFC xC4,W
05EC4:  MOVWF  FEA
05EC6:  MOVF   FEF,W
05EC8:  MOVWF  00
05ECA:  CLRF   01
05ECC:  CLRF   02
05ECE:  CLRF   03
05ED0:  MOVF   00,W
05ED2:  IORWF  xCA,W
05ED4:  MOVWF  xC6
05ED6:  MOVF   01,W
05ED8:  IORWF  xCB,W
05EDA:  MOVWF  xC7
05EDC:  MOVF   02,W
05EDE:  IORWF  xCC,W
05EE0:  MOVWF  xC8
05EE2:  MOVF   03,W
05EE4:  IORWF  xCD,W
05EE6:  MOVWF  xC9
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05EE8:  MOVLW  2C
05EEA:  MOVWF  FF6
05EEC:  MOVLW  17
05EEE:  MOVWF  FF7
05EF0:  MOVLW  00
05EF2:  MOVWF  FF8
05EF4:  MOVLW  16
05EF6:  MOVLB  8
05EF8:  MOVWF  x25
05EFA:  MOVLB  0
05EFC:  CALL   1D48
05F00:  MOVFF  3C9,4C7
05F04:  MOVLW  37
05F06:  MOVLB  4
05F08:  MOVWF  xC8
05F0A:  MOVLB  0
05F0C:  CALL   1F0A
05F10:  MOVFF  3C8,4C7
05F14:  MOVLW  37
05F16:  MOVLB  4
05F18:  MOVWF  xC8
05F1A:  MOVLB  0
05F1C:  CALL   1F0A
05F20:  MOVFF  3C7,4C7
05F24:  MOVLW  37
05F26:  MOVLB  4
05F28:  MOVWF  xC8
05F2A:  MOVLB  0
05F2C:  CALL   1F0A
05F30:  MOVFF  3C6,4C7
05F34:  MOVLW  37
05F36:  MOVLB  4
05F38:  MOVWF  xC8
05F3A:  MOVLB  0
05F3C:  CALL   1F0A
05F40:  MOVLW  0D
05F42:  MOVLB  8
05F44:  MOVWF  x68
05F46:  MOVLB  0
05F48:  CALL   1CC6
05F4C:  MOVLW  0A
05F4E:  MOVLB  8
05F50:  MOVWF  x68
05F52:  MOVLB  0
05F54:  CALL   1CC6
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05F58:  MOVFF  3C5,4CA
05F5C:  MOVLW  01
05F5E:  MOVLB  4
05F60:  MOVWF  xCB
05F62:  MOVLB  0
05F64:  CALL   3DCC
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05F68:  MOVFF  3C5,4CA
05F6C:  MOVLW  02
05F6E:  MOVLB  4
05F70:  MOVWF  xCB
05F72:  MOVLB  0
05F74:  CALL   3DCC
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05F78:  MOVLW  4A
05F7A:  MOVWF  FF6
05F7C:  MOVLW  17
05F7E:  MOVWF  FF7
05F80:  MOVLW  00
05F82:  MOVWF  FF8
05F84:  CALL   1D18
05F88:  GOTO   7BE6 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
05F8C:  MOVLW  6E
05F8E:  MOVWF  FF6
05F90:  MOVLW  17
05F92:  MOVWF  FF7
05F94:  MOVLW  00
05F96:  MOVWF  FF8
05F98:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05F9C:  MOVLB  3
05F9E:  MOVF   xC3,W
05FA0:  MOVWF  FE9
05FA2:  MOVF   xC4,W
05FA4:  MOVWF  FEA
05FA6:  MOVFF  FEF,415
05FAA:  MOVFF  415,4CA
05FAE:  MOVLW  01
05FB0:  MOVLB  4
05FB2:  MOVWF  xCB
05FB4:  MOVLB  0
05FB6:  CALL   3DCC
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05FBA:  MOVLB  3
05FBC:  CLRF   xC5
05FBE:  CLRF   xC6
05FC0:  CLRF   xC7
05FC2:  CLRF   xC8
05FC4:  CLRF   xC9
05FC6:  CLRF   xCA
05FC8:  CLRF   xCB
....................    
....................    flash_write_param.id = parameter[0];
05FCA:  MOVF   xC3,W
05FCC:  MOVWF  FE9
05FCE:  MOVF   xC4,W
05FD0:  MOVWF  FEA
05FD2:  MOVFF  FEF,3C5
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05FD6:  MOVLW  01
05FD8:  ADDWF  xC3,W
05FDA:  MOVWF  FE9
05FDC:  MOVLW  00
05FDE:  ADDWFC xC4,W
05FE0:  MOVWF  FEA
05FE2:  MOVF   FEF,W
05FE4:  MOVLB  4
05FE6:  CLRF   x18
05FE8:  CLRF   x17
05FEA:  CLRF   x16
05FEC:  MOVWF  x15
05FEE:  MOVFF  415,418
05FF2:  CLRF   x15
05FF4:  CLRF   x16
05FF6:  CLRF   x17
05FF8:  MOVLW  02
05FFA:  MOVLB  3
05FFC:  ADDWF  xC3,W
05FFE:  MOVWF  FE9
06000:  MOVLW  00
06002:  ADDWFC xC4,W
06004:  MOVWF  FEA
06006:  MOVF   FEF,W
06008:  MOVLB  4
0600A:  CLRF   x1D
0600C:  CLRF   x1C
0600E:  CLRF   x1B
06010:  MOVWF  x1A
06012:  MOVFF  41B,03
06016:  MOVFF  41A,02
0601A:  CLRF   00
0601C:  CLRF   01
0601E:  MOVF   00,W
06020:  IORWF  x15,F
06022:  MOVF   01,W
06024:  IORWF  x16,F
06026:  MOVF   02,W
06028:  IORWF  x17,F
0602A:  MOVF   03,W
0602C:  IORWF  x18,F
0602E:  MOVLW  03
06030:  MOVLB  3
06032:  ADDWF  xC3,W
06034:  MOVWF  FE9
06036:  MOVLW  00
06038:  ADDWFC xC4,W
0603A:  MOVWF  FEA
0603C:  MOVF   FEF,W
0603E:  MOVLB  4
06040:  CLRF   x1D
06042:  CLRF   x1C
06044:  CLRF   x1B
06046:  MOVWF  x1A
06048:  MOVFF  41C,03
0604C:  MOVFF  41B,02
06050:  MOVFF  41A,01
06054:  CLRF   00
06056:  MOVF   00,W
06058:  IORWF  x15,F
0605A:  MOVF   01,W
0605C:  IORWF  x16,F
0605E:  MOVF   02,W
06060:  IORWF  x17,F
06062:  MOVF   03,W
06064:  IORWF  x18,F
06066:  MOVLW  04
06068:  MOVLB  3
0606A:  ADDWF  xC3,W
0606C:  MOVWF  FE9
0606E:  MOVLW  00
06070:  ADDWFC xC4,W
06072:  MOVWF  FEA
06074:  MOVF   FEF,W
06076:  MOVWF  00
06078:  CLRF   01
0607A:  CLRF   02
0607C:  CLRF   03
0607E:  MOVF   00,W
06080:  MOVLB  4
06082:  IORWF  x15,W
06084:  MOVLB  3
06086:  MOVWF  xC6
06088:  MOVF   01,W
0608A:  MOVLB  4
0608C:  IORWF  x16,W
0608E:  MOVLB  3
06090:  MOVWF  xC7
06092:  MOVF   02,W
06094:  MOVLB  4
06096:  IORWF  x17,W
06098:  MOVLB  3
0609A:  MOVWF  xC8
0609C:  MOVF   03,W
0609E:  MOVLB  4
060A0:  IORWF  x18,W
060A2:  MOVLB  3
060A4:  MOVWF  xC9
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
060A6:  MOVLW  07
060A8:  ADDWF  xC3,W
060AA:  MOVWF  FE9
060AC:  MOVLW  00
060AE:  ADDWFC xC4,W
060B0:  MOVWF  FEA
060B2:  MOVF   FEF,W
060B4:  MOVLB  4
060B6:  CLRF   x16
060B8:  MOVWF  x15
060BA:  MOVFF  415,416
060BE:  CLRF   x15
060C0:  MOVLW  08
060C2:  MOVLB  3
060C4:  ADDWF  xC3,W
060C6:  MOVWF  FE9
060C8:  MOVLW  00
060CA:  ADDWFC xC4,W
060CC:  MOVWF  FEA
060CE:  MOVF   FEF,W
060D0:  CLRF   03
060D2:  MOVLB  4
060D4:  IORWF  x15,W
060D6:  MOVLB  3
060D8:  MOVWF  xCA
060DA:  MOVF   03,W
060DC:  MOVLB  4
060DE:  IORWF  x16,W
060E0:  MOVLB  3
060E2:  MOVWF  xCB
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
060E4:  MOVLW  88
060E6:  MOVWF  FF6
060E8:  MOVLW  17
060EA:  MOVWF  FF7
060EC:  MOVLW  00
060EE:  MOVWF  FF8
060F0:  MOVLW  0C
060F2:  MOVLB  8
060F4:  MOVWF  x25
060F6:  MOVLB  0
060F8:  CALL   1D48
060FC:  MOVFF  3C5,4C7
06100:  MOVLW  37
06102:  MOVLB  4
06104:  MOVWF  xC8
06106:  MOVLB  0
06108:  CALL   1F0A
0610C:  MOVLW  0D
0610E:  MOVLB  8
06110:  MOVWF  x68
06112:  MOVLB  0
06114:  CALL   1CC6
06118:  MOVLW  0A
0611A:  MOVLB  8
0611C:  MOVWF  x68
0611E:  MOVLB  0
06120:  CALL   1CC6
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
06124:  MOVLW  9C
06126:  MOVWF  FF6
06128:  MOVLW  17
0612A:  MOVWF  FF7
0612C:  MOVLW  00
0612E:  MOVWF  FF8
06130:  MOVLW  0E
06132:  MOVLB  8
06134:  MOVWF  x25
06136:  MOVLB  0
06138:  CALL   1D48
0613C:  MOVFF  3C9,4C7
06140:  MOVLW  37
06142:  MOVLB  4
06144:  MOVWF  xC8
06146:  MOVLB  0
06148:  CALL   1F0A
0614C:  MOVFF  3C8,4C7
06150:  MOVLW  37
06152:  MOVLB  4
06154:  MOVWF  xC8
06156:  MOVLB  0
06158:  CALL   1F0A
0615C:  MOVFF  3C7,4C7
06160:  MOVLW  37
06162:  MOVLB  4
06164:  MOVWF  xC8
06166:  MOVLB  0
06168:  CALL   1F0A
0616C:  MOVFF  3C6,4C7
06170:  MOVLW  37
06172:  MOVLB  4
06174:  MOVWF  xC8
06176:  MOVLB  0
06178:  CALL   1F0A
0617C:  MOVLW  0D
0617E:  MOVLB  8
06180:  MOVWF  x68
06182:  MOVLB  0
06184:  CALL   1CC6
06188:  MOVLW  0A
0618A:  MOVLB  8
0618C:  MOVWF  x68
0618E:  MOVLB  0
06190:  CALL   1CC6
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
06194:  MOVLW  B2
06196:  MOVWF  FF6
06198:  MOVLW  17
0619A:  MOVWF  FF7
0619C:  MOVLW  00
0619E:  MOVWF  FF8
061A0:  MOVLW  0E
061A2:  MOVLB  8
061A4:  MOVWF  x25
061A6:  MOVLB  0
061A8:  CALL   1D48
061AC:  MOVFF  3CB,4C7
061B0:  MOVLW  37
061B2:  MOVLB  4
061B4:  MOVWF  xC8
061B6:  MOVLB  0
061B8:  CALL   1F0A
061BC:  MOVFF  3CA,4C7
061C0:  MOVLW  37
061C2:  MOVLB  4
061C4:  MOVWF  xC8
061C6:  MOVLB  0
061C8:  CALL   1F0A
061CC:  MOVLW  0D
061CE:  MOVLB  8
061D0:  MOVWF  x68
061D2:  MOVLB  0
061D4:  CALL   1CC6
061D8:  MOVLW  0A
061DA:  MOVLB  8
061DC:  MOVWF  x68
061DE:  MOVLB  0
061E0:  CALL   1CC6
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
061E4:  MOVFF  3C5,4CA
061E8:  MOVLB  4
061EA:  CLRF   xCB
061EC:  MOVLB  0
061EE:  CALL   3DCC
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
061F2:  MOVLW  C8
061F4:  MOVWF  FF6
061F6:  MOVLW  17
061F8:  MOVWF  FF7
061FA:  MOVLW  00
061FC:  MOVWF  FF8
061FE:  CALL   1D18
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06202:  MOVLB  4
06204:  CLRF   x0D
06206:  CLRF   x0C
06208:  MOVLB  0
0620A:  MOVLB  4
0620C:  MOVF   x0D,W
0620E:  MOVLB  3
06210:  SUBWF  xCB,W
06212:  BTFSC  FD8.0
06214:  BRA    621C
06216:  MOVLB  0
06218:  GOTO   635A
0621C:  MOVLB  0
0621E:  BTFSS  FD8.2
06220:  GOTO   6238
06224:  MOVLB  3
06226:  MOVF   xCA,W
06228:  MOVLB  4
0622A:  SUBWF  x0C,W
0622C:  BTFSS  FD8.0
0622E:  BRA    6236
06230:  MOVLB  0
06232:  GOTO   635A
06236:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
06238:  MOVLB  4
0623A:  RLCF   x0C,W
0623C:  MOVWF  x0E
0623E:  RLCF   x0D,W
06240:  MOVWF  x0F
06242:  RLCF   x0E,F
06244:  RLCF   x0F,F
06246:  RLCF   x0E,F
06248:  RLCF   x0F,F
0624A:  RLCF   x0E,F
0624C:  RLCF   x0F,F
0624E:  RLCF   x0E,F
06250:  RLCF   x0F,F
06252:  RLCF   x0E,F
06254:  RLCF   x0F,F
06256:  MOVLW  C0
06258:  ANDWF  x0E,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
0625A:  CLRF   x10
0625C:  MOVLB  0
0625E:  MOVLB  4
06260:  MOVF   x10,W
06262:  SUBLW  3F
06264:  BTFSC  FD8.0
06266:  BRA    626E
06268:  MOVLB  0
0626A:  GOTO   62CC
0626E:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
06270:  CLRF   03
06272:  MOVLB  4
06274:  MOVF   x10,W
06276:  ADDLW  CC
06278:  MOVWF  FE9
0627A:  MOVLW  03
0627C:  ADDWFC 03,W
0627E:  MOVWF  FEA
06280:  MOVF   x10,W
06282:  ADDWF  x0E,W
06284:  MOVWF  x17
06286:  MOVLW  00
06288:  ADDWFC x0F,W
0628A:  MOVWF  x18
0628C:  MOVF   x17,W
0628E:  MOVWF  00
06290:  CLRF   03
06292:  MOVF   00,W
06294:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
06296:  CLRF   03
06298:  MOVF   x10,W
0629A:  ADDLW  CC
0629C:  MOVWF  FE9
0629E:  MOVLW  03
062A0:  ADDWFC 03,W
062A2:  MOVWF  FEA
062A4:  MOVFF  FEF,415
062A8:  MOVFF  415,4C7
062AC:  MOVLW  37
062AE:  MOVWF  xC8
062B0:  MOVLB  0
062B2:  CALL   1F0A
062B6:  MOVLW  20
062B8:  MOVLB  8
062BA:  MOVWF  x68
062BC:  MOVLB  0
062BE:  CALL   1CC6
062C2:  MOVLB  4
062C4:  INCF   x10,F
062C6:  MOVLB  0
062C8:  GOTO   625E
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
062CC:  MOVLB  4
062CE:  RLCF   x0C,W
062D0:  MOVWF  02
062D2:  RLCF   x0D,W
062D4:  MOVWF  03
062D6:  RLCF   02,F
062D8:  RLCF   03,F
062DA:  RLCF   02,F
062DC:  RLCF   03,F
062DE:  RLCF   02,F
062E0:  RLCF   03,F
062E2:  RLCF   02,F
062E4:  RLCF   03,F
062E6:  RLCF   02,F
062E8:  RLCF   03,F
062EA:  MOVLW  C0
062EC:  ANDWF  02,F
062EE:  MOVF   02,W
062F0:  MOVLB  3
062F2:  ADDWF  xC6,W
062F4:  MOVLB  4
062F6:  MOVWF  x11
062F8:  MOVF   03,W
062FA:  MOVLB  3
062FC:  ADDWFC xC7,W
062FE:  MOVLB  4
06300:  MOVWF  x12
06302:  MOVLW  00
06304:  MOVLB  3
06306:  ADDWFC xC8,W
06308:  MOVLB  4
0630A:  MOVWF  x13
0630C:  MOVLW  00
0630E:  MOVLB  3
06310:  ADDWFC xC9,W
06312:  MOVLB  4
06314:  MOVWF  x14
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
06316:  MOVFF  F1,868
0631A:  MOVFF  F0,867
0631E:  MOVFF  EF,866
06322:  MOVFF  EE,865
06326:  MOVFF  414,86C
0632A:  MOVFF  413,86B
0632E:  MOVFF  412,86A
06332:  MOVFF  411,869
06336:  MOVLW  03
06338:  MOVLB  8
0633A:  MOVWF  x6E
0633C:  MOVLW  CC
0633E:  MOVWF  x6D
06340:  CLRF   x70
06342:  MOVLW  40
06344:  MOVWF  x6F
06346:  MOVLB  0
06348:  CALL   344C
0634C:  MOVLB  4
0634E:  INCF   x0C,F
06350:  BTFSC  FD8.2
06352:  INCF   x0D,F
06354:  MOVLB  0
06356:  GOTO   620A
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
0635A:  MOVFF  3C5,4CA
0635E:  MOVLW  02
06360:  MOVLB  4
06362:  MOVWF  xCB
06364:  MOVLB  0
06366:  CALL   3DCC
....................    fprintf(PC, "\r\n");
0636A:  MOVLW  0D
0636C:  MOVLB  8
0636E:  MOVWF  x68
06370:  MOVLB  0
06372:  CALL   1CC6
06376:  MOVLW  0A
06378:  MOVLB  8
0637A:  MOVWF  x68
0637C:  MOVLB  0
0637E:  CALL   1CC6
....................    fprintf(PC, "End Flash Write Demo\r\n");
06382:  MOVLW  D6
06384:  MOVWF  FF6
06386:  MOVLW  17
06388:  MOVWF  FF7
0638A:  MOVLW  00
0638C:  MOVWF  FF8
0638E:  CALL   1D18
06392:  GOTO   7BF6 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
063C6:  MOVLW  EE
063C8:  MOVWF  FF6
063CA:  MOVLW  17
063CC:  MOVWF  FF7
063CE:  MOVLW  00
063D0:  MOVWF  FF8
063D2:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
063D6:  MOVLB  3
063D8:  MOVF   xC3,W
063DA:  MOVWF  FE9
063DC:  MOVF   xC4,W
063DE:  MOVWF  FEA
063E0:  MOVFF  FEF,4C9
063E4:  MOVFF  4C9,4CA
063E8:  MOVLW  01
063EA:  MOVLB  4
063EC:  MOVWF  xCB
063EE:  MOVLB  0
063F0:  CALL   3DCC
....................    flash_setting(mis_fm);
063F4:  MOVFF  F1,4D0
063F8:  MOVFF  F0,4CF
063FC:  MOVFF  EF,4CE
06400:  MOVFF  EE,4CD
06404:  CALL   6396
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
06408:  MOVLB  3
0640A:  CLRF   xC8
0640C:  CLRF   xC7
0640E:  CLRF   xC6
06410:  CLRF   xC5
06412:  MOVLW  01
06414:  MOVWF  xC9
06416:  MOVLW  02
06418:  MOVWF  xCA
0641A:  MOVLW  03
0641C:  MOVWF  xCB
0641E:  MOVLW  04
06420:  MOVWF  xCC
06422:  CLRF   xCD
06424:  CLRF   xCE
06426:  CLRF   xCF
06428:  CLRF   xD0
0642A:  CLRF   xD1
0642C:  CLRF   xD2
0642E:  CLRF   xD3
06430:  CLRF   xD4
06432:  CLRF   xD5
06434:  CLRF   xD6
06436:  CLRF   xD7
06438:  CLRF   xD8
0643A:  CLRF   xD9
0643C:  CLRF   xDA
0643E:  CLRF   xDB
06440:  CLRF   xDC
06442:  CLRF   xDD
06444:  CLRF   xDE
06446:  CLRF   xDF
06448:  CLRF   xE0
0644A:  CLRF   xE1
0644C:  CLRF   xE2
0644E:  CLRF   xE3
06450:  CLRF   xE4
06452:  CLRF   xE5
06454:  CLRF   xE6
06456:  CLRF   xE7
06458:  CLRF   xE8
0645A:  CLRF   xE9
0645C:  CLRF   xEA
0645E:  CLRF   xEB
06460:  CLRF   xEC
06462:  CLRF   xED
06464:  CLRF   xEE
06466:  CLRF   xEF
06468:  CLRF   xF0
0646A:  CLRF   xF1
0646C:  CLRF   xF2
0646E:  CLRF   xF3
06470:  CLRF   xF4
06472:  CLRF   xF5
06474:  CLRF   xF6
06476:  CLRF   xF7
06478:  CLRF   xF8
0647A:  CLRF   xF9
0647C:  CLRF   xFA
0647E:  CLRF   xFB
06480:  CLRF   xFC
06482:  CLRF   xFD
06484:  CLRF   xFE
06486:  CLRF   xFF
06488:  MOVLB  4
0648A:  CLRF   x00
0648C:  CLRF   x01
0648E:  CLRF   x02
06490:  CLRF   x03
06492:  CLRF   x04
06494:  CLRF   x05
06496:  CLRF   x06
06498:  CLRF   x07
0649A:  CLRF   x08
0649C:  CLRF   x09
0649E:  CLRF   x0A
064A0:  CLRF   x0B
064A2:  CLRF   x0C
064A4:  CLRF   x0D
064A6:  CLRF   x0E
064A8:  CLRF   x0F
064AA:  CLRF   x10
064AC:  CLRF   x11
064AE:  CLRF   x12
064B0:  CLRF   x13
064B2:  CLRF   x14
064B4:  CLRF   x15
064B6:  CLRF   x16
064B8:  CLRF   x17
064BA:  CLRF   x18
064BC:  CLRF   x19
064BE:  CLRF   x1A
064C0:  CLRF   x1B
064C2:  CLRF   x1C
064C4:  CLRF   x1D
064C6:  CLRF   x1E
064C8:  CLRF   x1F
064CA:  CLRF   x20
064CC:  CLRF   x21
064CE:  CLRF   x22
064D0:  CLRF   x23
064D2:  CLRF   x24
064D4:  CLRF   x25
064D6:  CLRF   x26
064D8:  CLRF   x27
064DA:  CLRF   x28
064DC:  CLRF   x29
064DE:  CLRF   x2A
064E0:  CLRF   x2B
064E2:  CLRF   x2C
064E4:  CLRF   x2D
064E6:  CLRF   x2E
064E8:  CLRF   x2F
064EA:  CLRF   x30
064EC:  CLRF   x31
064EE:  CLRF   x32
064F0:  CLRF   x33
064F2:  CLRF   x34
064F4:  CLRF   x35
064F6:  CLRF   x36
064F8:  CLRF   x37
064FA:  CLRF   x38
064FC:  CLRF   x39
064FE:  CLRF   x3A
06500:  CLRF   x3B
06502:  CLRF   x3C
06504:  CLRF   x3D
06506:  CLRF   x3E
06508:  CLRF   x3F
0650A:  CLRF   x40
0650C:  CLRF   x41
0650E:  CLRF   x42
06510:  CLRF   x43
06512:  CLRF   x44
06514:  CLRF   x45
06516:  CLRF   x46
06518:  CLRF   x47
0651A:  CLRF   x48
0651C:  CLRF   x49
0651E:  CLRF   x4A
06520:  CLRF   x4B
06522:  CLRF   x4C
06524:  CLRF   x4D
06526:  CLRF   x4E
06528:  CLRF   x4F
0652A:  CLRF   x50
0652C:  CLRF   x51
0652E:  CLRF   x52
06530:  CLRF   x53
06532:  CLRF   x54
06534:  CLRF   x55
06536:  CLRF   x56
06538:  CLRF   x57
0653A:  CLRF   x58
0653C:  CLRF   x59
0653E:  CLRF   x5A
06540:  CLRF   x5B
06542:  CLRF   x5C
06544:  CLRF   x5D
06546:  CLRF   x5E
06548:  CLRF   x5F
0654A:  CLRF   x60
0654C:  CLRF   x61
0654E:  CLRF   x62
06550:  CLRF   x63
06552:  CLRF   x64
06554:  CLRF   x65
06556:  CLRF   x66
06558:  CLRF   x67
0655A:  CLRF   x68
0655C:  CLRF   x69
0655E:  CLRF   x6A
06560:  CLRF   x6B
06562:  CLRF   x6C
06564:  CLRF   x6D
06566:  CLRF   x6E
06568:  CLRF   x6F
0656A:  CLRF   x70
0656C:  CLRF   x71
0656E:  CLRF   x72
06570:  CLRF   x73
06572:  CLRF   x74
06574:  CLRF   x75
06576:  CLRF   x76
06578:  CLRF   x77
0657A:  CLRF   x78
0657C:  CLRF   x79
0657E:  CLRF   x7A
06580:  CLRF   x7B
06582:  CLRF   x7C
06584:  CLRF   x7D
06586:  CLRF   x7E
06588:  CLRF   x7F
0658A:  CLRF   x80
0658C:  CLRF   x81
0658E:  CLRF   x82
06590:  CLRF   x83
06592:  CLRF   x84
06594:  CLRF   x85
06596:  CLRF   x86
06598:  CLRF   x87
0659A:  CLRF   x88
0659C:  CLRF   x89
0659E:  CLRF   x8A
065A0:  CLRF   x8B
065A2:  CLRF   x8C
065A4:  CLRF   x8D
065A6:  CLRF   x8E
065A8:  CLRF   x8F
065AA:  CLRF   x90
065AC:  CLRF   x91
065AE:  CLRF   x92
065B0:  CLRF   x93
065B2:  CLRF   x94
065B4:  CLRF   x95
065B6:  CLRF   x96
065B8:  CLRF   x97
065BA:  CLRF   x98
065BC:  CLRF   x99
065BE:  CLRF   x9A
065C0:  CLRF   x9B
065C2:  CLRF   x9C
065C4:  CLRF   x9D
065C6:  CLRF   x9E
065C8:  CLRF   x9F
065CA:  CLRF   xA0
065CC:  CLRF   xA1
065CE:  CLRF   xA2
065D0:  CLRF   xA3
065D2:  CLRF   xA4
065D4:  CLRF   xA5
065D6:  CLRF   xA6
065D8:  CLRF   xA7
065DA:  CLRF   xA8
065DC:  CLRF   xA9
065DE:  CLRF   xAA
065E0:  CLRF   xAB
065E2:  CLRF   xAC
065E4:  CLRF   xAD
065E6:  CLRF   xAE
065E8:  CLRF   xAF
065EA:  CLRF   xB0
065EC:  CLRF   xB1
065EE:  CLRF   xB2
065F0:  CLRF   xB3
065F2:  CLRF   xB4
065F4:  CLRF   xB5
065F6:  CLRF   xB6
065F8:  CLRF   xB7
065FA:  CLRF   xB8
065FC:  CLRF   xB9
065FE:  CLRF   xBA
06600:  CLRF   xBB
06602:  CLRF   xBC
06604:  CLRF   xBD
06606:  CLRF   xBE
06608:  CLRF   xBF
0660A:  CLRF   xC0
0660C:  CLRF   xC1
0660E:  CLRF   xC2
06610:  CLRF   xC3
06612:  CLRF   xC4
06614:  CLRF   xC5
06616:  CLRF   xC6
06618:  CLRF   xC7
0661A:  CLRF   xC8
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
0661C:  MOVFF  F1,868
06620:  MOVFF  F0,867
06624:  MOVFF  EF,866
06628:  MOVFF  EE,865
0662C:  MOVFF  3C8,86C
06630:  MOVFF  3C7,86B
06634:  MOVFF  3C6,86A
06638:  MOVFF  3C5,869
0663C:  MOVLW  03
0663E:  MOVLB  8
06640:  MOVWF  x6E
06642:  MOVLW  C9
06644:  MOVWF  x6D
06646:  MOVLW  01
06648:  MOVWF  x70
0664A:  CLRF   x6F
0664C:  MOVLB  0
0664E:  CALL   344C
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06652:  MOVLB  3
06654:  MOVF   xC3,W
06656:  MOVWF  FE9
06658:  MOVF   xC4,W
0665A:  MOVWF  FEA
0665C:  MOVFF  FEF,4C9
06660:  MOVFF  4C9,4CA
06664:  MOVLW  02
06666:  MOVLB  4
06668:  MOVWF  xCB
0666A:  MOVLB  0
0666C:  CALL   3DCC
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06670:  MOVLW  14
06672:  MOVWF  FF6
06674:  MOVLW  18
06676:  MOVWF  FF7
06678:  MOVLW  00
0667A:  MOVWF  FF8
0667C:  CALL   1D18
06680:  GOTO   7C06 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06684:  MOVLW  38
06686:  MOVWF  FF6
06688:  MOVLW  18
0668A:  MOVWF  FF7
0668C:  MOVLW  00
0668E:  MOVWF  FF8
06690:  CALL   1D18
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
06694:  MOVLB  3
06696:  MOVF   xC3,W
06698:  MOVWF  FE9
0669A:  MOVF   xC4,W
0669C:  MOVWF  FEA
0669E:  MOVFF  FEF,415
066A2:  MOVFF  415,4CA
066A6:  MOVLW  01
066A8:  MOVLB  4
066AA:  MOVWF  xCB
066AC:  MOVLB  0
066AE:  CALL   3DCC
....................    FLASH_PARAM flash_param = {0};
066B2:  MOVLB  3
066B4:  CLRF   xC5
066B6:  CLRF   xC6
066B8:  CLRF   xC7
066BA:  CLRF   xC8
066BC:  CLRF   xC9
066BE:  CLRF   xCA
066C0:  CLRF   xCB
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
066C2:  MOVF   xC3,W
066C4:  MOVWF  FE9
066C6:  MOVF   xC4,W
066C8:  MOVWF  FEA
066CA:  MOVFF  FEF,3C5
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
066CE:  MOVLW  01
066D0:  ADDWF  xC3,W
066D2:  MOVWF  FE9
066D4:  MOVLW  00
066D6:  ADDWFC xC4,W
066D8:  MOVWF  FEA
066DA:  MOVF   FEF,W
066DC:  MOVLB  4
066DE:  CLRF   x18
066E0:  CLRF   x17
066E2:  CLRF   x16
066E4:  MOVWF  x15
066E6:  MOVFF  415,418
066EA:  CLRF   x15
066EC:  CLRF   x16
066EE:  CLRF   x17
066F0:  MOVLW  02
066F2:  MOVLB  3
066F4:  ADDWF  xC3,W
066F6:  MOVWF  FE9
066F8:  MOVLW  00
066FA:  ADDWFC xC4,W
066FC:  MOVWF  FEA
066FE:  MOVF   FEF,W
06700:  MOVLB  4
06702:  CLRF   x1D
06704:  CLRF   x1C
06706:  CLRF   x1B
06708:  MOVWF  x1A
0670A:  MOVFF  41B,03
0670E:  MOVFF  41A,02
06712:  CLRF   00
06714:  CLRF   01
06716:  MOVF   00,W
06718:  IORWF  x15,F
0671A:  MOVF   01,W
0671C:  IORWF  x16,F
0671E:  MOVF   02,W
06720:  IORWF  x17,F
06722:  MOVF   03,W
06724:  IORWF  x18,F
06726:  MOVLW  03
06728:  MOVLB  3
0672A:  ADDWF  xC3,W
0672C:  MOVWF  FE9
0672E:  MOVLW  00
06730:  ADDWFC xC4,W
06732:  MOVWF  FEA
06734:  MOVF   FEF,W
06736:  MOVLB  4
06738:  CLRF   x1D
0673A:  CLRF   x1C
0673C:  CLRF   x1B
0673E:  MOVWF  x1A
06740:  MOVFF  41C,03
06744:  MOVFF  41B,02
06748:  MOVFF  41A,01
0674C:  CLRF   00
0674E:  MOVF   00,W
06750:  IORWF  x15,F
06752:  MOVF   01,W
06754:  IORWF  x16,F
06756:  MOVF   02,W
06758:  IORWF  x17,F
0675A:  MOVF   03,W
0675C:  IORWF  x18,F
0675E:  MOVLW  04
06760:  MOVLB  3
06762:  ADDWF  xC3,W
06764:  MOVWF  FE9
06766:  MOVLW  00
06768:  ADDWFC xC4,W
0676A:  MOVWF  FEA
0676C:  MOVF   FEF,W
0676E:  MOVWF  00
06770:  CLRF   01
06772:  CLRF   02
06774:  CLRF   03
06776:  MOVF   00,W
06778:  MOVLB  4
0677A:  IORWF  x15,W
0677C:  MOVLB  3
0677E:  MOVWF  xC8
06780:  MOVF   01,W
06782:  MOVLB  4
06784:  IORWF  x16,W
06786:  MOVLB  3
06788:  MOVWF  xC9
0678A:  MOVF   02,W
0678C:  MOVLB  4
0678E:  IORWF  x17,W
06790:  MOVLB  3
06792:  MOVWF  xCA
06794:  MOVF   03,W
06796:  MOVLB  4
06798:  IORWF  x18,W
0679A:  MOVLB  3
0679C:  MOVWF  xCB
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
0679E:  MOVLW  07
067A0:  ADDWF  xC3,W
067A2:  MOVWF  FE9
067A4:  MOVLW  00
067A6:  ADDWFC xC4,W
067A8:  MOVWF  FEA
067AA:  MOVF   FEF,W
067AC:  MOVLB  4
067AE:  CLRF   x16
067B0:  MOVWF  x15
067B2:  MOVFF  415,416
067B6:  CLRF   x15
067B8:  MOVLW  08
067BA:  MOVLB  3
067BC:  ADDWF  xC3,W
067BE:  MOVWF  FE9
067C0:  MOVLW  00
067C2:  ADDWFC xC4,W
067C4:  MOVWF  FEA
067C6:  MOVF   FEF,W
067C8:  CLRF   03
067CA:  MOVLB  4
067CC:  IORWF  x15,W
067CE:  MOVLB  3
067D0:  MOVWF  xC6
067D2:  MOVF   03,W
067D4:  MOVLB  4
067D6:  IORWF  x16,W
067D8:  MOVLB  3
067DA:  MOVWF  xC7
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
067DC:  MOVLW  4C
067DE:  MOVWF  FF6
067E0:  MOVLW  18
067E2:  MOVWF  FF7
067E4:  MOVLW  00
067E6:  MOVWF  FF8
067E8:  MOVLW  0C
067EA:  MOVLB  8
067EC:  MOVWF  x25
067EE:  MOVLB  0
067F0:  CALL   1D48
067F4:  MOVFF  3C5,4C7
067F8:  MOVLW  37
067FA:  MOVLB  4
067FC:  MOVWF  xC8
067FE:  MOVLB  0
06800:  CALL   1F0A
06804:  MOVLW  0D
06806:  MOVLB  8
06808:  MOVWF  x68
0680A:  MOVLB  0
0680C:  CALL   1CC6
06810:  MOVLW  0A
06812:  MOVLB  8
06814:  MOVWF  x68
06816:  MOVLB  0
06818:  CALL   1CC6
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
0681C:  MOVLW  60
0681E:  MOVWF  FF6
06820:  MOVLW  18
06822:  MOVWF  FF7
06824:  MOVLW  00
06826:  MOVWF  FF8
06828:  MOVLW  0E
0682A:  MOVLB  8
0682C:  MOVWF  x25
0682E:  MOVLB  0
06830:  CALL   1D48
06834:  MOVFF  3CB,4C7
06838:  MOVLW  37
0683A:  MOVLB  4
0683C:  MOVWF  xC8
0683E:  MOVLB  0
06840:  CALL   1F0A
06844:  MOVFF  3CA,4C7
06848:  MOVLW  37
0684A:  MOVLB  4
0684C:  MOVWF  xC8
0684E:  MOVLB  0
06850:  CALL   1F0A
06854:  MOVFF  3C9,4C7
06858:  MOVLW  37
0685A:  MOVLB  4
0685C:  MOVWF  xC8
0685E:  MOVLB  0
06860:  CALL   1F0A
06864:  MOVFF  3C8,4C7
06868:  MOVLW  37
0686A:  MOVLB  4
0686C:  MOVWF  xC8
0686E:  MOVLB  0
06870:  CALL   1F0A
06874:  MOVLW  0D
06876:  MOVLB  8
06878:  MOVWF  x68
0687A:  MOVLB  0
0687C:  CALL   1CC6
06880:  MOVLW  0A
06882:  MOVLB  8
06884:  MOVWF  x68
06886:  MOVLB  0
06888:  CALL   1CC6
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
0688C:  MOVLW  76
0688E:  MOVWF  FF6
06890:  MOVLW  18
06892:  MOVWF  FF7
06894:  MOVLW  00
06896:  MOVWF  FF8
06898:  MOVLW  0E
0689A:  MOVLB  8
0689C:  MOVWF  x25
0689E:  MOVLB  0
068A0:  CALL   1D48
068A4:  MOVFF  3C7,4C7
068A8:  MOVLW  37
068AA:  MOVLB  4
068AC:  MOVWF  xC8
068AE:  MOVLB  0
068B0:  CALL   1F0A
068B4:  MOVFF  3C6,4C7
068B8:  MOVLW  37
068BA:  MOVLB  4
068BC:  MOVWF  xC8
068BE:  MOVLB  0
068C0:  CALL   1F0A
068C4:  MOVLW  0D
068C6:  MOVLB  8
068C8:  MOVWF  x68
068CA:  MOVLB  0
068CC:  CALL   1CC6
068D0:  MOVLW  0A
068D2:  MOVLB  8
068D4:  MOVWF  x68
068D6:  MOVLB  0
068D8:  CALL   1CC6
....................    
....................    piclog_make(flash_param.id, 0x00);
068DC:  MOVFF  3C5,4CA
068E0:  MOVLB  4
068E2:  CLRF   xCB
068E4:  MOVLB  0
068E6:  CALL   3DCC
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
068EA:  MOVLB  3
068EC:  CLRF   xCC
068EE:  CLRF   xCD
068F0:  CLRF   xCE
068F2:  CLRF   xCF
068F4:  CLRF   xD0
068F6:  CLRF   xD1
068F8:  CLRF   xD2
068FA:  CLRF   xD3
068FC:  CLRF   xD4
068FE:  CLRF   xD5
06900:  CLRF   xD6
06902:  CLRF   xD7
06904:  CLRF   xD8
06906:  CLRF   xD9
06908:  CLRF   xDA
0690A:  CLRF   xDB
0690C:  CLRF   xDC
0690E:  CLRF   xDD
06910:  CLRF   xDE
06912:  CLRF   xDF
06914:  CLRF   xE0
06916:  CLRF   xE1
06918:  CLRF   xE2
0691A:  CLRF   xE3
0691C:  CLRF   xE4
0691E:  CLRF   xE5
06920:  CLRF   xE6
06922:  CLRF   xE7
06924:  CLRF   xE8
06926:  CLRF   xE9
06928:  CLRF   xEA
0692A:  CLRF   xEB
0692C:  CLRF   xEC
0692E:  CLRF   xED
06930:  CLRF   xEE
06932:  CLRF   xEF
06934:  CLRF   xF0
06936:  CLRF   xF1
06938:  CLRF   xF2
0693A:  CLRF   xF3
0693C:  CLRF   xF4
0693E:  CLRF   xF5
06940:  CLRF   xF6
06942:  CLRF   xF7
06944:  CLRF   xF8
06946:  CLRF   xF9
06948:  CLRF   xFA
0694A:  CLRF   xFB
0694C:  CLRF   xFC
0694E:  CLRF   xFD
06950:  CLRF   xFE
06952:  CLRF   xFF
06954:  MOVLB  4
06956:  CLRF   x00
06958:  CLRF   x01
0695A:  CLRF   x02
0695C:  CLRF   x03
0695E:  CLRF   x04
06960:  CLRF   x05
06962:  CLRF   x06
06964:  CLRF   x07
06966:  CLRF   x08
06968:  CLRF   x09
0696A:  CLRF   x0A
0696C:  CLRF   x0B
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
0696E:  MOVLW  8C
06970:  MOVWF  FF6
06972:  MOVLW  18
06974:  MOVWF  FF7
06976:  MOVLW  00
06978:  MOVWF  FF8
0697A:  MOVLB  0
0697C:  CALL   1D18
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06980:  MOVFF  F1,868
06984:  MOVFF  F0,867
06988:  MOVFF  EF,866
0698C:  MOVFF  EE,865
06990:  CALL   237C
06994:  MOVF   01,F
06996:  BTFSS  FD8.2
06998:  GOTO   69AC
....................       fprintf(PC, "Mission Flash is not connected\r\n");
0699C:  MOVLW  98
0699E:  MOVWF  FF6
069A0:  MOVLW  18
069A2:  MOVWF  FF7
069A4:  MOVLW  00
069A6:  MOVWF  FF8
069A8:  CALL   1D18
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
069AC:  MOVLB  4
069AE:  CLRF   x13
069B0:  CLRF   x12
069B2:  CLRF   x11
069B4:  CLRF   x10
069B6:  MOVLB  0
069B8:  MOVLB  4
069BA:  MOVF   x13,F
069BC:  BTFSC  FD8.2
069BE:  BRA    69C6
069C0:  MOVLB  0
069C2:  GOTO   6B24
069C6:  MOVLB  0
069C8:  MOVLB  4
069CA:  MOVF   x12,F
069CC:  BTFSC  FD8.2
069CE:  BRA    69D6
069D0:  MOVLB  0
069D2:  GOTO   6B24
069D6:  MOVLB  0
069D8:  MOVLB  4
069DA:  MOVF   x11,W
069DC:  MOVLB  3
069DE:  SUBWF  xC7,W
069E0:  BTFSC  FD8.0
069E2:  BRA    69EA
069E4:  MOVLB  0
069E6:  GOTO   6B24
069EA:  MOVLB  0
069EC:  BTFSS  FD8.2
069EE:  GOTO   6A06
069F2:  MOVLB  3
069F4:  MOVF   xC6,W
069F6:  MOVLB  4
069F8:  SUBWF  x10,W
069FA:  BTFSS  FD8.0
069FC:  BRA    6A04
069FE:  MOVLB  0
06A00:  GOTO   6B24
06A04:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06A06:  MOVLB  4
06A08:  RLCF   x10,W
06A0A:  MOVWF  00
06A0C:  RLCF   x11,W
06A0E:  MOVWF  01
06A10:  RLCF   x12,W
06A12:  MOVWF  02
06A14:  RLCF   x13,W
06A16:  MOVWF  03
06A18:  RLCF   00,F
06A1A:  RLCF   01,F
06A1C:  RLCF   02,F
06A1E:  RLCF   03,F
06A20:  RLCF   00,F
06A22:  RLCF   01,F
06A24:  RLCF   02,F
06A26:  RLCF   03,F
06A28:  RLCF   00,F
06A2A:  RLCF   01,F
06A2C:  RLCF   02,F
06A2E:  RLCF   03,F
06A30:  RLCF   00,F
06A32:  RLCF   01,F
06A34:  RLCF   02,F
06A36:  RLCF   03,F
06A38:  RLCF   00,F
06A3A:  RLCF   01,F
06A3C:  RLCF   02,F
06A3E:  RLCF   03,F
06A40:  MOVLW  C0
06A42:  ANDWF  00,F
06A44:  MOVF   00,W
06A46:  MOVLB  3
06A48:  ADDWF  xC8,W
06A4A:  MOVLB  4
06A4C:  MOVWF  x0C
06A4E:  MOVF   01,W
06A50:  MOVLB  3
06A52:  ADDWFC xC9,W
06A54:  MOVLB  4
06A56:  MOVWF  x0D
06A58:  MOVF   02,W
06A5A:  MOVLB  3
06A5C:  ADDWFC xCA,W
06A5E:  MOVLB  4
06A60:  MOVWF  x0E
06A62:  MOVF   03,W
06A64:  MOVLB  3
06A66:  ADDWFC xCB,W
06A68:  MOVLB  4
06A6A:  MOVWF  x0F
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06A6C:  MOVFF  F1,4D0
06A70:  MOVFF  F0,4CF
06A74:  MOVFF  EF,4CE
06A78:  MOVFF  EE,4CD
06A7C:  MOVFF  40F,4D4
06A80:  MOVFF  40E,4D3
06A84:  MOVFF  40D,4D2
06A88:  MOVFF  40C,4D1
06A8C:  MOVLW  03
06A8E:  MOVWF  xD6
06A90:  MOVLW  CC
06A92:  MOVWF  xD5
06A94:  CLRF   xDA
06A96:  CLRF   xD9
06A98:  CLRF   xD8
06A9A:  MOVLW  40
06A9C:  MOVWF  xD7
06A9E:  MOVLB  0
06AA0:  CALL   2442
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06AA4:  MOVLB  4
06AA6:  CLRF   x14
06AA8:  MOVLB  0
06AAA:  MOVLB  4
06AAC:  MOVF   x14,W
06AAE:  SUBLW  3F
06AB0:  BTFSC  FD8.0
06AB2:  BRA    6ABA
06AB4:  MOVLB  0
06AB6:  GOTO   6AF4
06ABA:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06ABC:  CLRF   03
06ABE:  MOVLB  4
06AC0:  MOVF   x14,W
06AC2:  ADDLW  CC
06AC4:  MOVWF  FE9
06AC6:  MOVLW  03
06AC8:  ADDWFC 03,W
06ACA:  MOVWF  FEA
06ACC:  MOVFF  FEF,415
06AD0:  MOVFF  415,4C7
06AD4:  MOVLW  37
06AD6:  MOVWF  xC8
06AD8:  MOVLB  0
06ADA:  CALL   1F0A
06ADE:  MOVLW  20
06AE0:  MOVLB  8
06AE2:  MOVWF  x68
06AE4:  MOVLB  0
06AE6:  CALL   1CC6
06AEA:  MOVLB  4
06AEC:  INCF   x14,F
06AEE:  MOVLB  0
06AF0:  GOTO   6AAA
....................       }
....................       fprintf(PC,"\r\n");
06AF4:  MOVLW  0D
06AF6:  MOVLB  8
06AF8:  MOVWF  x68
06AFA:  MOVLB  0
06AFC:  CALL   1CC6
06B00:  MOVLW  0A
06B02:  MOVLB  8
06B04:  MOVWF  x68
06B06:  MOVLB  0
06B08:  CALL   1CC6
06B0C:  MOVLW  01
06B0E:  MOVLB  4
06B10:  ADDWF  x10,F
06B12:  BTFSC  FD8.0
06B14:  INCF   x11,F
06B16:  BTFSC  FD8.2
06B18:  INCF   x12,F
06B1A:  BTFSC  FD8.2
06B1C:  INCF   x13,F
06B1E:  MOVLB  0
06B20:  GOTO   69B8
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06B24:  MOVFF  3C5,4CA
06B28:  MOVLW  02
06B2A:  MOVLB  4
06B2C:  MOVWF  xCB
06B2E:  MOVLB  0
06B30:  CALL   3DCC
....................    fprintf(PC, "End Flash Read\r\n");
06B34:  MOVLW  BA
06B36:  MOVWF  FF6
06B38:  MOVLW  18
06B3A:  MOVWF  FF7
06B3C:  MOVLW  00
06B3E:  MOVWF  FF8
06B40:  CALL   1D18
06B44:  GOTO   7C16 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06B48:  MOVLW  CC
06B4A:  MOVWF  FF6
06B4C:  MOVLW  18
06B4E:  MOVWF  FF7
06B50:  MOVLW  00
06B52:  MOVWF  FF8
06B54:  CALL   1D18
....................    flash_setting(mis_fm);
06B58:  MOVFF  F1,4D0
06B5C:  MOVFF  F0,4CF
06B60:  MOVFF  EF,4CE
06B64:  MOVFF  EE,4CD
06B68:  CALL   6396
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06B6C:  MOVLB  3
06B6E:  CLRF   xC8
06B70:  CLRF   xC7
06B72:  CLRF   xC6
06B74:  CLRF   xC5
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06B76:  MOVFF  F1,4D0
06B7A:  MOVFF  F0,4CF
06B7E:  MOVFF  EF,4CE
06B82:  MOVFF  EE,4CD
06B86:  MOVFF  3C8,4D4
06B8A:  MOVFF  3C7,4D3
06B8E:  MOVFF  3C6,4D2
06B92:  MOVFF  3C5,4D1
06B96:  MOVLW  03
06B98:  MOVLB  4
06B9A:  MOVWF  xD6
06B9C:  MOVLW  C9
06B9E:  MOVWF  xD5
06BA0:  CLRF   xDA
06BA2:  CLRF   xD9
06BA4:  CLRF   xD8
06BA6:  MOVLW  04
06BA8:  MOVWF  xD7
06BAA:  MOVLB  0
06BAC:  CALL   2442
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06BB0:  MOVLW  E8
06BB2:  MOVWF  FF6
06BB4:  MOVLW  18
06BB6:  MOVWF  FF7
06BB8:  MOVLW  00
06BBA:  MOVWF  FF8
06BBC:  MOVLW  0B
06BBE:  MOVLB  8
06BC0:  MOVWF  x25
06BC2:  MOVLB  0
06BC4:  CALL   1D48
06BC8:  MOVFF  3C9,4C7
06BCC:  MOVLW  37
06BCE:  MOVLB  4
06BD0:  MOVWF  xC8
06BD2:  MOVLB  0
06BD4:  CALL   1F0A
06BD8:  MOVLW  20
06BDA:  MOVLB  8
06BDC:  MOVWF  x68
06BDE:  MOVLB  0
06BE0:  CALL   1CC6
06BE4:  MOVFF  3CA,4C7
06BE8:  MOVLW  37
06BEA:  MOVLB  4
06BEC:  MOVWF  xC8
06BEE:  MOVLB  0
06BF0:  CALL   1F0A
06BF4:  MOVLW  20
06BF6:  MOVLB  8
06BF8:  MOVWF  x68
06BFA:  MOVLB  0
06BFC:  CALL   1CC6
06C00:  MOVFF  3CB,4C7
06C04:  MOVLW  37
06C06:  MOVLB  4
06C08:  MOVWF  xC8
06C0A:  MOVLB  0
06C0C:  CALL   1F0A
06C10:  MOVLW  20
06C12:  MOVLB  8
06C14:  MOVWF  x68
06C16:  MOVLB  0
06C18:  CALL   1CC6
06C1C:  MOVFF  3CC,4C7
06C20:  MOVLW  37
06C22:  MOVLB  4
06C24:  MOVWF  xC8
06C26:  MOVLB  0
06C28:  CALL   1F0A
06C2C:  MOVLW  0D
06C2E:  MOVLB  8
06C30:  MOVWF  x68
06C32:  MOVLB  0
06C34:  CALL   1CC6
06C38:  MOVLW  0A
06C3A:  MOVLB  8
06C3C:  MOVWF  x68
06C3E:  MOVLB  0
06C40:  CALL   1CC6
....................    fprintf(PC, "End Flash Read Address\r\n");
06C44:  MOVLW  0A
06C46:  MOVWF  FF6
06C48:  MOVLW  19
06C4A:  MOVWF  FF7
06C4C:  MOVLW  00
06C4E:  MOVWF  FF8
06C50:  CALL   1D18
06C54:  GOTO   7C26 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06D6E:  MOVLW  24
06D70:  MOVWF  FF6
06D72:  MOVLW  19
06D74:  MOVWF  FF7
06D76:  MOVLW  00
06D78:  MOVWF  FF8
06D7A:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06D7E:  MOVLB  3
06D80:  MOVF   xC3,W
06D82:  MOVWF  FE9
06D84:  MOVF   xC4,W
06D86:  MOVWF  FEA
06D88:  MOVFF  FEF,3C5
06D8C:  MOVFF  3C5,4CA
06D90:  MOVLW  01
06D92:  MOVLB  4
06D94:  MOVWF  xCB
06D96:  MOVLB  0
06D98:  CALL   3DCC
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
06D9C:  MOVFF  3C4,3C6
06DA0:  MOVFF  3C3,3C5
06DA4:  CALL   5A1E
....................    mode_misf_address_reset(parameter); // Reset the address area
06DA8:  MOVFF  3C4,3C6
06DAC:  MOVFF  3C3,3C5
06DB0:  GOTO   6C58
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
06DB4:  MOVLW  42
06DB6:  MOVWF  FF6
06DB8:  MOVLW  19
06DBA:  MOVWF  FF7
06DBC:  MOVLW  00
06DBE:  MOVWF  FF8
06DC0:  CALL   1D18
06DC4:  GOTO   7C36 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
06DC8:  MOVLW  94
06DCA:  MOVWF  FF6
06DCC:  MOVLW  19
06DCE:  MOVWF  FF7
06DD0:  MOVLW  00
06DD2:  MOVWF  FF8
06DD4:  CALL   1D18
....................    flash_setting(mis_fm);
06DD8:  MOVFF  F1,4D0
06DDC:  MOVFF  F0,4CF
06DE0:  MOVFF  EF,4CE
06DE4:  MOVFF  EE,4CD
06DE8:  CALL   6396
....................    flash_setting(smf);
06DEC:  MOVFF  F5,4D0
06DF0:  MOVFF  F4,4CF
06DF4:  MOVFF  F3,4CE
06DF8:  MOVFF  F2,4CD
06DFC:  CALL   6396
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
06E00:  MOVLB  3
06E02:  CLRF   xC8
06E04:  CLRF   xC7
06E06:  CLRF   xC6
06E08:  CLRF   xC5
06E0A:  CLRF   xCC
06E0C:  CLRF   xCB
06E0E:  MOVLW  10
06E10:  MOVWF  xCA
06E12:  CLRF   xC9
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
06E14:  MOVFF  F1,4D0
06E18:  MOVFF  F0,4CF
06E1C:  MOVFF  EF,4CE
06E20:  MOVFF  EE,4CD
06E24:  MOVFF  3C8,4D4
06E28:  MOVFF  3C7,4D3
06E2C:  MOVFF  3C6,4D2
06E30:  MOVFF  3C5,4D1
06E34:  MOVLW  03
06E36:  MOVLB  4
06E38:  MOVWF  xD6
06E3A:  MOVLW  CD
06E3C:  MOVWF  xD5
06E3E:  CLRF   xDA
06E40:  CLRF   xD9
06E42:  MOVLW  01
06E44:  MOVWF  xD8
06E46:  CLRF   xD7
06E48:  MOVLB  0
06E4A:  CALL   2442
....................    write_data_bytes(smf, dest_address, read_data, 256);
06E4E:  MOVFF  F5,868
06E52:  MOVFF  F4,867
06E56:  MOVFF  F3,866
06E5A:  MOVFF  F2,865
06E5E:  MOVFF  3CC,86C
06E62:  MOVFF  3CB,86B
06E66:  MOVFF  3CA,86A
06E6A:  MOVFF  3C9,869
06E6E:  MOVLW  03
06E70:  MOVLB  8
06E72:  MOVWF  x6E
06E74:  MOVLW  CD
06E76:  MOVWF  x6D
06E78:  MOVLW  01
06E7A:  MOVWF  x70
06E7C:  CLRF   x6F
06E7E:  MOVLB  0
06E80:  CALL   344C
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
06E84:  MOVLW  AC
06E86:  MOVWF  FF6
06E88:  MOVLW  19
06E8A:  MOVWF  FF7
06E8C:  MOVLW  00
06E8E:  MOVWF  FF8
06E90:  CALL   1D18
06E94:  GOTO   7C46 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
06E98:  MOVLW  C2
06E9A:  MOVWF  FF6
06E9C:  MOVLW  19
06E9E:  MOVWF  FF7
06EA0:  MOVLW  00
06EA2:  MOVWF  FF8
06EA4:  CALL   1D18
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
06EA8:  MOVLW  DA
06EAA:  MOVWF  FF6
06EAC:  MOVLW  19
06EAE:  MOVWF  FF7
06EB0:  MOVLW  00
06EB2:  MOVWF  FF8
06EB4:  CALL   1D18
....................    for (int i = 0; i < 256; i++)
06EB8:  MOVLB  4
06EBA:  CLRF   xC5
06EBC:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
06EBE:  CLRF   03
06EC0:  MOVLB  4
06EC2:  MOVF   xC5,W
06EC4:  ADDLW  C5
06EC6:  MOVWF  FE9
06EC8:  MOVLW  03
06ECA:  ADDWFC 03,W
06ECC:  MOVWF  FEA
06ECE:  MOVFF  FEF,4C6
06ED2:  MOVFF  4C6,4C7
06ED6:  MOVLW  37
06ED8:  MOVWF  xC8
06EDA:  MOVLB  0
06EDC:  CALL   1F0A
06EE0:  MOVLW  20
06EE2:  MOVLB  8
06EE4:  MOVWF  x68
06EE6:  MOVLB  0
06EE8:  CALL   1CC6
06EEC:  MOVLB  4
06EEE:  INCF   xC5,F
06EF0:  MOVLB  0
06EF2:  GOTO   6EBE
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
06EF6:  MOVLW  E6
06EF8:  MOVWF  FF6
06EFA:  MOVLW  19
06EFC:  MOVWF  FF7
06EFE:  MOVLW  00
06F00:  MOVWF  FF8
06F02:  CALL   1D18
06F06:  GOTO   7C56 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
06F0A:  MOVLW  FE
06F0C:  MOVWF  FF6
06F0E:  MOVLW  19
06F10:  MOVWF  FF7
06F12:  MOVLW  00
06F14:  MOVWF  FF8
06F16:  CALL   1D18
....................    flash_setting(smf);
06F1A:  MOVFF  F5,4D0
06F1E:  MOVFF  F4,4CF
06F22:  MOVFF  F3,4CE
06F26:  MOVFF  F2,4CD
06F2A:  CALL   6396
....................    unsigned int32 erase_address = 0x00000000; // Example address
06F2E:  MOVLB  3
06F30:  CLRF   xC8
06F32:  CLRF   xC7
06F34:  CLRF   xC6
06F36:  CLRF   xC5
....................    sector_erase(smf, erase_address); // Erase the sector
06F38:  MOVFF  F5,40C
06F3C:  MOVFF  F4,40B
06F40:  MOVFF  F3,40A
06F44:  MOVFF  F2,409
06F48:  MOVFF  3C8,410
06F4C:  MOVFF  3C7,40F
06F50:  MOVFF  3C6,40E
06F54:  MOVFF  3C5,40D
06F58:  MOVLB  0
06F5A:  CALL   56C2
....................    fprintf(PC, "End Flash SMF Erase\r\n");
06F5E:  MOVLW  16
06F60:  MOVWF  FF6
06F62:  MOVLW  1A
06F64:  MOVWF  FF7
06F66:  MOVLW  00
06F68:  MOVWF  FF8
06F6A:  CALL   1D18
06F6E:  GOTO   7C66 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06C58:  MOVLW  2C
06C5A:  MOVWF  FF6
06C5C:  MOVLW  1A
06C5E:  MOVWF  FF7
06C60:  MOVLW  00
06C62:  MOVWF  FF8
06C64:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06C68:  MOVLB  3
06C6A:  MOVF   xC5,W
06C6C:  MOVWF  FE9
06C6E:  MOVF   xC6,W
06C70:  MOVWF  FEA
06C72:  MOVFF  FEF,407
06C76:  MOVFF  407,4CA
06C7A:  MOVLW  01
06C7C:  MOVLB  4
06C7E:  MOVWF  xCB
06C80:  MOVLB  0
06C82:  CALL   3DCC
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06C86:  MOVLB  3
06C88:  CLRF   xC7
06C8A:  CLRF   xC8
06C8C:  CLRF   xC9
06C8E:  CLRF   xCA
06C90:  CLRF   xCB
06C92:  CLRF   xCC
06C94:  CLRF   xCD
06C96:  CLRF   xCE
06C98:  CLRF   xCF
06C9A:  CLRF   xD0
06C9C:  CLRF   xD1
06C9E:  CLRF   xD2
06CA0:  CLRF   xD3
06CA2:  CLRF   xD4
06CA4:  CLRF   xD5
06CA6:  CLRF   xD6
06CA8:  CLRF   xD7
06CAA:  CLRF   xD8
06CAC:  CLRF   xD9
06CAE:  CLRF   xDA
06CB0:  CLRF   xDB
06CB2:  CLRF   xDC
06CB4:  CLRF   xDD
06CB6:  CLRF   xDE
06CB8:  CLRF   xDF
06CBA:  CLRF   xE0
06CBC:  CLRF   xE1
06CBE:  CLRF   xE2
06CC0:  CLRF   xE3
06CC2:  CLRF   xE4
06CC4:  CLRF   xE5
06CC6:  CLRF   xE6
06CC8:  CLRF   xE7
06CCA:  CLRF   xE8
06CCC:  CLRF   xE9
06CCE:  CLRF   xEA
06CD0:  CLRF   xEB
06CD2:  CLRF   xEC
06CD4:  CLRF   xED
06CD6:  CLRF   xEE
06CD8:  CLRF   xEF
06CDA:  CLRF   xF0
06CDC:  CLRF   xF1
06CDE:  CLRF   xF2
06CE0:  CLRF   xF3
06CE2:  CLRF   xF4
06CE4:  CLRF   xF5
06CE6:  CLRF   xF6
06CE8:  CLRF   xF7
06CEA:  CLRF   xF8
06CEC:  CLRF   xF9
06CEE:  CLRF   xFA
06CF0:  CLRF   xFB
06CF2:  CLRF   xFC
06CF4:  CLRF   xFD
06CF6:  CLRF   xFE
06CF8:  CLRF   xFF
06CFA:  MOVLB  4
06CFC:  CLRF   x00
06CFE:  CLRF   x01
06D00:  CLRF   x02
06D02:  CLRF   x03
06D04:  CLRF   x04
06D06:  CLRF   x05
06D08:  CLRF   x06
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
06D0A:  MOVFF  F1,868
06D0E:  MOVFF  F0,867
06D12:  MOVFF  EF,866
06D16:  MOVFF  EE,865
06D1A:  MOVLB  8
06D1C:  CLRF   x6C
06D1E:  CLRF   x6B
06D20:  CLRF   x6A
06D22:  CLRF   x69
06D24:  MOVLW  03
06D26:  MOVWF  x6E
06D28:  MOVLW  C7
06D2A:  MOVWF  x6D
06D2C:  CLRF   x70
06D2E:  MOVLW  40
06D30:  MOVWF  x6F
06D32:  MOVLB  0
06D34:  CALL   344C
....................    misf_init(); // Update the address area after writing
06D38:  CALL   265A
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06D3C:  MOVLB  3
06D3E:  MOVF   xC5,W
06D40:  MOVWF  FE9
06D42:  MOVF   xC6,W
06D44:  MOVWF  FEA
06D46:  MOVFF  FEF,407
06D4A:  MOVFF  407,4CA
06D4E:  MOVLW  02
06D50:  MOVLB  4
06D52:  MOVWF  xCB
06D54:  MOVLB  0
06D56:  CALL   3DCC
....................    fprintf(PC, "End Flash Address Reset\r\n");
06D5A:  MOVLW  48
06D5C:  MOVWF  FF6
06D5E:  MOVLW  1A
06D60:  MOVWF  FF7
06D62:  MOVLW  00
06D64:  MOVWF  FF8
06D66:  CALL   1D18
06D6A:  GOTO   6DB4 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
0712A:  MOVLW  01
0712C:  MOVLB  3
0712E:  ADDWF  xC3,W
07130:  MOVWF  FE9
07132:  MOVLW  00
07134:  ADDWFC xC4,W
07136:  MOVWF  FEA
07138:  MOVF   FEF,W
0713A:  MOVLB  4
0713C:  CLRF   x15
0713E:  CLRF   x14
07140:  CLRF   x13
07142:  MOVWF  x12
07144:  MOVFF  412,415
07148:  CLRF   x12
0714A:  CLRF   x13
0714C:  CLRF   x14
0714E:  MOVLW  02
07150:  MOVLB  3
07152:  ADDWF  xC3,W
07154:  MOVWF  FE9
07156:  MOVLW  00
07158:  ADDWFC xC4,W
0715A:  MOVWF  FEA
0715C:  MOVF   FEF,W
0715E:  MOVLB  4
07160:  CLRF   x1A
07162:  CLRF   x19
07164:  CLRF   x18
07166:  MOVWF  x17
07168:  MOVFF  418,03
0716C:  MOVFF  417,02
07170:  CLRF   00
07172:  CLRF   01
07174:  MOVF   00,W
07176:  IORWF  x12,F
07178:  MOVF   01,W
0717A:  IORWF  x13,F
0717C:  MOVF   02,W
0717E:  IORWF  x14,F
07180:  MOVF   03,W
07182:  IORWF  x15,F
07184:  MOVLW  03
07186:  MOVLB  3
07188:  ADDWF  xC3,W
0718A:  MOVWF  FE9
0718C:  MOVLW  00
0718E:  ADDWFC xC4,W
07190:  MOVWF  FEA
07192:  MOVF   FEF,W
07194:  MOVLB  4
07196:  CLRF   x1A
07198:  CLRF   x19
0719A:  CLRF   x18
0719C:  MOVWF  x17
0719E:  MOVFF  419,03
071A2:  MOVFF  418,02
071A6:  MOVFF  417,01
071AA:  CLRF   00
071AC:  MOVF   00,W
071AE:  IORWF  x12,F
071B0:  MOVF   01,W
071B2:  IORWF  x13,F
071B4:  MOVF   02,W
071B6:  IORWF  x14,F
071B8:  MOVF   03,W
071BA:  IORWF  x15,F
071BC:  MOVLW  04
071BE:  MOVLB  3
071C0:  ADDWF  xC3,W
071C2:  MOVWF  FE9
071C4:  MOVLW  00
071C6:  ADDWFC xC4,W
071C8:  MOVWF  FEA
071CA:  MOVF   FEF,W
071CC:  MOVWF  00
071CE:  CLRF   01
071D0:  CLRF   02
071D2:  CLRF   03
071D4:  MOVF   00,W
071D6:  MOVLB  4
071D8:  IORWF  x12,W
071DA:  MOVLB  3
071DC:  MOVWF  xC5
071DE:  MOVF   01,W
071E0:  MOVLB  4
071E2:  IORWF  x13,W
071E4:  MOVLB  3
071E6:  MOVWF  xC6
071E8:  MOVF   02,W
071EA:  MOVLB  4
071EC:  IORWF  x14,W
071EE:  MOVLB  3
071F0:  MOVWF  xC7
071F2:  MOVF   03,W
071F4:  MOVLB  4
071F6:  IORWF  x15,W
071F8:  MOVLB  3
071FA:  MOVWF  xC8
071FC:  MOVLW  07
071FE:  ADDWF  xC3,W
07200:  MOVWF  FE9
07202:  MOVLW  00
07204:  ADDWFC xC4,W
07206:  MOVWF  FEA
07208:  MOVF   FEF,W
0720A:  MOVLB  4
0720C:  CLRF   x13
0720E:  MOVWF  x12
07210:  MOVFF  412,413
07214:  CLRF   x12
07216:  MOVLW  08
07218:  MOVLB  3
0721A:  ADDWF  xC3,W
0721C:  MOVWF  FE9
0721E:  MOVLW  00
07220:  ADDWFC xC4,W
07222:  MOVWF  FEA
07224:  MOVF   FEF,W
07226:  CLRF   03
07228:  MOVLB  4
0722A:  IORWF  x12,W
0722C:  MOVLB  3
0722E:  MOVWF  xC9
07230:  MOVF   03,W
07232:  MOVLB  4
07234:  IORWF  x13,W
07236:  MOVLB  3
07238:  MOVWF  xCA
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
0723A:  CLRF   xCB
0723C:  CLRF   xCC
0723E:  CLRF   xCD
07240:  CLRF   xCE
07242:  CLRF   xCF
07244:  CLRF   xD0
07246:  CLRF   xD1
07248:  CLRF   xD2
0724A:  CLRF   xD3
0724C:  CLRF   xD4
0724E:  CLRF   xD5
07250:  CLRF   xD6
07252:  CLRF   xD7
07254:  CLRF   xD8
07256:  CLRF   xD9
07258:  CLRF   xDA
0725A:  CLRF   xDB
0725C:  CLRF   xDC
0725E:  CLRF   xDD
07260:  CLRF   xDE
07262:  CLRF   xDF
07264:  CLRF   xE0
07266:  CLRF   xE1
07268:  CLRF   xE2
0726A:  CLRF   xE3
0726C:  CLRF   xE4
0726E:  CLRF   xE5
07270:  CLRF   xE6
07272:  CLRF   xE7
07274:  CLRF   xE8
07276:  CLRF   xE9
07278:  CLRF   xEA
0727A:  CLRF   xEB
0727C:  CLRF   xEC
0727E:  CLRF   xED
07280:  CLRF   xEE
07282:  CLRF   xEF
07284:  CLRF   xF0
07286:  CLRF   xF1
07288:  CLRF   xF2
0728A:  CLRF   xF3
0728C:  CLRF   xF4
0728E:  CLRF   xF5
07290:  CLRF   xF6
07292:  CLRF   xF7
07294:  CLRF   xF8
07296:  CLRF   xF9
07298:  CLRF   xFA
0729A:  CLRF   xFB
0729C:  CLRF   xFC
0729E:  CLRF   xFD
072A0:  CLRF   xFE
072A2:  CLRF   xFF
072A4:  MOVLB  4
072A6:  CLRF   x00
072A8:  CLRF   x01
072AA:  CLRF   x02
072AC:  CLRF   x03
072AE:  CLRF   x04
072B0:  CLRF   x05
072B2:  CLRF   x06
072B4:  CLRF   x07
072B6:  CLRF   x08
072B8:  CLRF   x09
072BA:  CLRF   x0A
....................    if(!is_connect(smf)) {
072BC:  MOVFF  F5,868
072C0:  MOVFF  F4,867
072C4:  MOVFF  F3,866
072C8:  MOVFF  F2,865
072CC:  MOVLB  0
072CE:  CALL   237C
072D2:  MOVF   01,F
072D4:  BTFSS  FD8.2
072D6:  GOTO   72EE
....................       fprintf(PC, "SMF is not connected\r\n");
072DA:  MOVLW  62
072DC:  MOVWF  FF6
072DE:  MOVLW  1A
072E0:  MOVWF  FF7
072E2:  MOVLW  00
072E4:  MOVWF  FF8
072E6:  CALL   1D18
....................       return;
072EA:  GOTO   754C
....................    }
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
072EE:  MOVLW  7A
072F0:  MOVWF  FF6
072F2:  MOVLW  1A
072F4:  MOVWF  FF7
072F6:  MOVLW  00
072F8:  MOVWF  FF8
072FA:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
072FE:  MOVLB  3
07300:  MOVF   xC3,W
07302:  MOVWF  FE9
07304:  MOVF   xC4,W
07306:  MOVWF  FEA
07308:  MOVFF  FEF,412
0730C:  MOVFF  412,4CA
07310:  MOVLW  01
07312:  MOVLB  4
07314:  MOVWF  xCB
07316:  MOVLB  0
07318:  CALL   3DCC
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
0731C:  MOVLW  98
0731E:  MOVWF  FF6
07320:  MOVLW  1A
07322:  MOVWF  FF7
07324:  MOVLW  00
07326:  MOVWF  FF8
07328:  MOVLW  0E
0732A:  MOVLB  8
0732C:  MOVWF  x25
0732E:  MOVLB  0
07330:  CALL   1D48
07334:  MOVFF  3C8,4C7
07338:  MOVLW  37
0733A:  MOVLB  4
0733C:  MOVWF  xC8
0733E:  MOVLB  0
07340:  CALL   1F0A
07344:  MOVFF  3C7,4C7
07348:  MOVLW  37
0734A:  MOVLB  4
0734C:  MOVWF  xC8
0734E:  MOVLB  0
07350:  CALL   1F0A
07354:  MOVFF  3C6,4C7
07358:  MOVLW  37
0735A:  MOVLB  4
0735C:  MOVWF  xC8
0735E:  MOVLB  0
07360:  CALL   1F0A
07364:  MOVFF  3C5,4C7
07368:  MOVLW  37
0736A:  MOVLB  4
0736C:  MOVWF  xC8
0736E:  MOVLB  0
07370:  CALL   1F0A
07374:  MOVLW  0D
07376:  MOVLB  8
07378:  MOVWF  x68
0737A:  MOVLB  0
0737C:  CALL   1CC6
07380:  MOVLW  0A
07382:  MOVLB  8
07384:  MOVWF  x68
07386:  MOVLB  0
07388:  CALL   1CC6
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
0738C:  MOVLW  AE
0738E:  MOVWF  FF6
07390:  MOVLW  1A
07392:  MOVWF  FF7
07394:  MOVLW  00
07396:  MOVWF  FF8
07398:  MOVLW  0E
0739A:  MOVLB  8
0739C:  MOVWF  x25
0739E:  MOVLB  0
073A0:  CALL   1D48
073A4:  MOVFF  3CA,4C7
073A8:  MOVLW  37
073AA:  MOVLB  4
073AC:  MOVWF  xC8
073AE:  MOVLB  0
073B0:  CALL   1F0A
073B4:  MOVFF  3C9,4C7
073B8:  MOVLW  37
073BA:  MOVLB  4
073BC:  MOVWF  xC8
073BE:  MOVLB  0
073C0:  CALL   1F0A
073C4:  MOVLW  0D
073C6:  MOVLB  8
073C8:  MOVWF  x68
073CA:  MOVLB  0
073CC:  CALL   1CC6
073D0:  MOVLW  0A
073D2:  MOVLB  8
073D4:  MOVWF  x68
073D6:  MOVLB  0
073D8:  CALL   1CC6
....................    fprintf(PC, "read data\r\n");
073DC:  MOVLW  C4
073DE:  MOVWF  FF6
073E0:  MOVLW  1A
073E2:  MOVWF  FF7
073E4:  MOVLW  00
073E6:  MOVWF  FF8
073E8:  CALL   1D18
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
073EC:  MOVLB  4
073EE:  CLRF   x0C
073F0:  CLRF   x0B
073F2:  MOVLB  0
073F4:  MOVLB  4
073F6:  MOVF   x0C,W
073F8:  MOVLB  3
073FA:  SUBWF  xCA,W
073FC:  BTFSC  FD8.0
073FE:  BRA    7406
07400:  MOVLB  0
07402:  GOTO   751E
07406:  MOVLB  0
07408:  BTFSS  FD8.2
0740A:  GOTO   7422
0740E:  MOVLB  3
07410:  MOVF   xC9,W
07412:  MOVLB  4
07414:  SUBWF  x0B,W
07416:  BTFSS  FD8.0
07418:  BRA    7420
0741A:  MOVLB  0
0741C:  GOTO   751E
07420:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
07422:  MOVLB  4
07424:  RLCF   x0B,W
07426:  MOVWF  02
07428:  RLCF   x0C,W
0742A:  MOVWF  03
0742C:  RLCF   02,F
0742E:  RLCF   03,F
07430:  RLCF   02,F
07432:  RLCF   03,F
07434:  RLCF   02,F
07436:  RLCF   03,F
07438:  RLCF   02,F
0743A:  RLCF   03,F
0743C:  RLCF   02,F
0743E:  RLCF   03,F
07440:  MOVLW  C0
07442:  ANDWF  02,F
07444:  MOVF   02,W
07446:  MOVLB  3
07448:  ADDWF  xC5,W
0744A:  MOVLB  4
0744C:  MOVWF  x0D
0744E:  MOVF   03,W
07450:  MOVLB  3
07452:  ADDWFC xC6,W
07454:  MOVLB  4
07456:  MOVWF  x0E
07458:  MOVLW  00
0745A:  MOVLB  3
0745C:  ADDWFC xC7,W
0745E:  MOVLB  4
07460:  MOVWF  x0F
07462:  MOVLW  00
07464:  MOVLB  3
07466:  ADDWFC xC8,W
07468:  MOVLB  4
0746A:  MOVWF  x10
0746C:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0746E:  MOVFF  F5,4D0
07472:  MOVFF  F4,4CF
07476:  MOVFF  F3,4CE
0747A:  MOVFF  F2,4CD
0747E:  MOVFF  410,4D4
07482:  MOVFF  40F,4D3
07486:  MOVFF  40E,4D2
0748A:  MOVFF  40D,4D1
0748E:  MOVLW  03
07490:  MOVLB  4
07492:  MOVWF  xD6
07494:  MOVLW  CB
07496:  MOVWF  xD5
07498:  CLRF   xDA
0749A:  CLRF   xD9
0749C:  CLRF   xD8
0749E:  MOVLW  40
074A0:  MOVWF  xD7
074A2:  MOVLB  0
074A4:  CALL   2442
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
074A8:  MOVLB  4
074AA:  CLRF   x11
074AC:  MOVLB  0
074AE:  MOVLB  4
074B0:  MOVF   x11,W
074B2:  SUBLW  3F
074B4:  BTFSC  FD8.0
074B6:  BRA    74BE
074B8:  MOVLB  0
074BA:  GOTO   74F8
074BE:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
074C0:  CLRF   03
074C2:  MOVLB  4
074C4:  MOVF   x11,W
074C6:  ADDLW  CB
074C8:  MOVWF  FE9
074CA:  MOVLW  03
074CC:  ADDWFC 03,W
074CE:  MOVWF  FEA
074D0:  MOVFF  FEF,412
074D4:  MOVFF  412,4C7
074D8:  MOVLW  37
074DA:  MOVWF  xC8
074DC:  MOVLB  0
074DE:  CALL   1F0A
074E2:  MOVLW  20
074E4:  MOVLB  8
074E6:  MOVWF  x68
074E8:  MOVLB  0
074EA:  CALL   1CC6
074EE:  MOVLB  4
074F0:  INCF   x11,F
074F2:  MOVLB  0
074F4:  GOTO   74AE
....................       }
....................       fprintf(PC, "\r\n");
074F8:  MOVLW  0D
074FA:  MOVLB  8
074FC:  MOVWF  x68
074FE:  MOVLB  0
07500:  CALL   1CC6
07504:  MOVLW  0A
07506:  MOVLB  8
07508:  MOVWF  x68
0750A:  MOVLB  0
0750C:  CALL   1CC6
07510:  MOVLB  4
07512:  INCF   x0B,F
07514:  BTFSC  FD8.2
07516:  INCF   x0C,F
07518:  MOVLB  0
0751A:  GOTO   73F4
....................    }
.................... 
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
0751E:  MOVLW  D0
07520:  MOVWF  FF6
07522:  MOVLW  1A
07524:  MOVWF  FF7
07526:  MOVLW  00
07528:  MOVWF  FF8
0752A:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0752E:  MOVLB  3
07530:  MOVF   xC3,W
07532:  MOVWF  FE9
07534:  MOVF   xC4,W
07536:  MOVWF  FEA
07538:  MOVFF  FEF,412
0753C:  MOVFF  412,4CA
07540:  MOVLW  02
07542:  MOVLB  4
07544:  MOVWF  xCB
07546:  MOVLB  0
07548:  CALL   3DCC
0754C:  GOTO   7C86 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
07550:  MOVLW  EE
07552:  MOVWF  FF6
07554:  MOVLW  1A
07556:  MOVWF  FF7
07558:  MOVLW  00
0755A:  MOVWF  FF8
0755C:  CALL   1D18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
07560:  MOVLB  3
07562:  MOVF   xC3,W
07564:  MOVWF  FE9
07566:  MOVF   xC4,W
07568:  MOVWF  FEA
0756A:  MOVFF  FEF,3C5
....................    piclog_make(cmd, 0x00); // Log the command execution
0756E:  MOVFF  3C5,4CA
07572:  MOVLB  4
07574:  CLRF   xCB
07576:  MOVLB  0
07578:  CALL   3DCC
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
0757C:  MOVLB  3
0757E:  CLRF   xC9
07580:  CLRF   xC8
07582:  CLRF   xC7
07584:  CLRF   xC6
07586:  MOVLB  0
07588:  MOVLB  3
0758A:  MOVF   xC9,F
0758C:  BTFSC  FD8.2
0758E:  BRA    7596
07590:  MOVLB  0
07592:  GOTO   75F6
07596:  MOVLB  0
07598:  MOVLB  3
0759A:  MOVF   xC8,W
0759C:  SUBLW  F4
0759E:  BTFSC  FD8.0
075A0:  BRA    75A8
075A2:  MOVLB  0
075A4:  GOTO   75F6
075A8:  MOVLB  0
075AA:  BTFSS  FD8.2
075AC:  GOTO   75C2
075B0:  MOVLB  3
075B2:  MOVF   xC7,W
075B4:  SUBLW  23
075B6:  BTFSC  FD8.0
075B8:  BRA    75C0
075BA:  MOVLB  0
075BC:  GOTO   75F6
075C0:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
075C2:  MOVFF  F5,40C
075C6:  MOVFF  F4,40B
075CA:  MOVFF  F3,40A
075CE:  MOVFF  F2,409
075D2:  MOVFF  3C9,410
075D6:  MOVFF  3C8,40F
075DA:  MOVFF  3C7,40E
075DE:  MOVFF  3C6,40D
075E2:  CALL   56C2
075E6:  MOVLW  01
075E8:  MOVLB  3
075EA:  ADDWF  xC8,F
075EC:  MOVLW  00
075EE:  ADDWFC xC9,F
075F0:  MOVLB  0
075F2:  GOTO   7588
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
075F6:  MOVFF  3C5,4CA
075FA:  MOVLW  02
075FC:  MOVLB  4
075FE:  MOVWF  xCB
07600:  MOVLB  0
07602:  CALL   3DCC
....................    fprintf(PC, "End SMF Erase All\r\n");
07606:  MOVLW  04
07608:  MOVWF  FF6
0760A:  MOVLW  1B
0760C:  MOVWF  FF7
0760E:  MOVLW  00
07610:  MOVWF  FF8
07612:  CALL   1D18
07616:  GOTO   7C96 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
06F76:  MOVLW  18
06F78:  MOVWF  FF6
06F7A:  MOVLW  1B
06F7C:  MOVWF  FF7
06F7E:  MOVLW  00
06F80:  MOVWF  FF8
06F82:  CALL   1D18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06F86:  MOVLB  3
06F88:  MOVF   xC3,W
06F8A:  MOVWF  FE9
06F8C:  MOVF   xC4,W
06F8E:  MOVWF  FEA
06F90:  MOVFF  FEF,409
06F94:  MOVFF  409,4CA
06F98:  MOVLW  01
06F9A:  MOVLB  4
06F9C:  MOVWF  xCB
06F9E:  MOVLB  0
06FA0:  CALL   3DCC
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06FA4:  MOVLB  3
06FA6:  CLRF   xC5
06FA8:  CLRF   xC6
06FAA:  CLRF   xC7
06FAC:  CLRF   xC8
06FAE:  CLRF   xC9
06FB0:  CLRF   xCA
06FB2:  CLRF   xCB
06FB4:  CLRF   xCC
06FB6:  CLRF   xCD
06FB8:  CLRF   xCE
06FBA:  CLRF   xCF
06FBC:  CLRF   xD0
06FBE:  CLRF   xD1
06FC0:  CLRF   xD2
06FC2:  CLRF   xD3
06FC4:  CLRF   xD4
06FC6:  CLRF   xD5
06FC8:  CLRF   xD6
06FCA:  CLRF   xD7
06FCC:  CLRF   xD8
06FCE:  CLRF   xD9
06FD0:  CLRF   xDA
06FD2:  CLRF   xDB
06FD4:  CLRF   xDC
06FD6:  CLRF   xDD
06FD8:  CLRF   xDE
06FDA:  CLRF   xDF
06FDC:  CLRF   xE0
06FDE:  CLRF   xE1
06FE0:  CLRF   xE2
06FE2:  CLRF   xE3
06FE4:  CLRF   xE4
06FE6:  CLRF   xE5
06FE8:  CLRF   xE6
06FEA:  CLRF   xE7
06FEC:  CLRF   xE8
06FEE:  CLRF   xE9
06FF0:  CLRF   xEA
06FF2:  CLRF   xEB
06FF4:  CLRF   xEC
06FF6:  CLRF   xED
06FF8:  CLRF   xEE
06FFA:  CLRF   xEF
06FFC:  CLRF   xF0
06FFE:  CLRF   xF1
07000:  CLRF   xF2
07002:  CLRF   xF3
07004:  CLRF   xF4
07006:  CLRF   xF5
07008:  CLRF   xF6
0700A:  CLRF   xF7
0700C:  CLRF   xF8
0700E:  CLRF   xF9
07010:  CLRF   xFA
07012:  CLRF   xFB
07014:  CLRF   xFC
07016:  CLRF   xFD
07018:  CLRF   xFE
0701A:  CLRF   xFF
0701C:  MOVLB  4
0701E:  CLRF   x00
07020:  CLRF   x01
07022:  CLRF   x02
07024:  CLRF   x03
07026:  CLRF   x04
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
07028:  MOVLW  04
0702A:  MOVWF  x08
0702C:  MOVLW  EC
0702E:  MOVWF  x07
07030:  CLRF   x06
07032:  CLRF   x05
07034:  MOVLB  0
07036:  MOVLB  4
07038:  MOVF   x08,W
0703A:  SUBLW  05
0703C:  BTFSC  FD8.0
0703E:  BRA    7046
07040:  MOVLB  0
07042:  GOTO   70C4
07046:  MOVLB  0
07048:  BTFSS  FD8.2
0704A:  GOTO   7090
0704E:  MOVLB  4
07050:  MOVF   x07,W
07052:  SUBLW  6B
07054:  BTFSC  FD8.0
07056:  BRA    705E
07058:  MOVLB  0
0705A:  GOTO   70C4
0705E:  MOVLB  0
07060:  BTFSS  FD8.2
07062:  GOTO   7090
07066:  MOVLB  4
07068:  MOVF   x06,W
0706A:  SUBLW  FF
0706C:  BTFSC  FD8.0
0706E:  BRA    7076
07070:  MOVLB  0
07072:  GOTO   70C4
07076:  MOVLB  0
07078:  BTFSS  FD8.2
0707A:  GOTO   7090
0707E:  MOVLB  4
07080:  MOVF   x05,W
07082:  SUBLW  FE
07084:  BTFSC  FD8.0
07086:  BRA    708E
07088:  MOVLB  0
0708A:  GOTO   70C4
0708E:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07090:  MOVFF  F5,40C
07094:  MOVFF  F4,40B
07098:  MOVFF  F3,40A
0709C:  MOVFF  F2,409
070A0:  MOVFF  408,410
070A4:  MOVFF  407,40F
070A8:  MOVFF  406,40E
070AC:  MOVFF  405,40D
070B0:  CALL   56C2
070B4:  MOVLW  01
070B6:  MOVLB  4
070B8:  ADDWF  x07,F
070BA:  MOVLW  00
070BC:  ADDWFC x08,F
070BE:  MOVLB  0
070C0:  GOTO   7036
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
070C4:  MOVFF  F5,868
070C8:  MOVFF  F4,867
070CC:  MOVFF  F3,866
070D0:  MOVFF  F2,865
070D4:  MOVLW  04
070D6:  MOVLB  8
070D8:  MOVWF  x6C
070DA:  MOVLW  EC
070DC:  MOVWF  x6B
070DE:  CLRF   x6A
070E0:  CLRF   x69
070E2:  MOVLW  03
070E4:  MOVWF  x6E
070E6:  MOVLW  C5
070E8:  MOVWF  x6D
070EA:  CLRF   x70
070EC:  MOVLW  40
070EE:  MOVWF  x6F
070F0:  MOVLB  0
070F2:  CALL   344C
....................    smf_init(); // Update the address area after writing
070F6:  GOTO   6F72
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
070FA:  MOVLB  3
070FC:  MOVF   xC3,W
070FE:  MOVWF  FE9
07100:  MOVF   xC4,W
07102:  MOVWF  FEA
07104:  MOVFF  FEF,409
07108:  MOVFF  409,4CA
0710C:  MOVLW  02
0710E:  MOVLB  4
07110:  MOVWF  xCB
07112:  MOVLB  0
07114:  CALL   3DCC
....................    fprintf(PC, "End SMF Reset\r\n");
07118:  MOVLW  2A
0711A:  MOVWF  FF6
0711C:  MOVLW  1B
0711E:  MOVWF  FF7
07120:  MOVLW  00
07122:  MOVWF  FF8
07124:  CALL   1D18
07128:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
09CA6:  CLRF   FF8
09CA8:  BCF    FD0.7
09CAA:  BSF    07.7
09CAC:  MOVLB  E
09CAE:  MOVLW  55
09CB0:  MOVWF  F7E
09CB2:  MOVLW  AA
09CB4:  MOVWF  F7E
09CB6:  BCF    F66.6
09CB8:  MOVLW  F9
09CBA:  MOVWF  x2C
09CBC:  MOVLW  00
09CBE:  MOVWF  x2E
09CC0:  MOVLW  40
09CC2:  MOVWF  x12
09CC4:  MOVLW  30
09CC6:  MOVWF  x13
09CC8:  MOVLW  20
09CCA:  MOVWF  x22
09CCC:  MOVLW  55
09CCE:  MOVWF  F7E
09CD0:  MOVLW  AA
09CD2:  MOVWF  F7E
09CD4:  BSF    F66.6
09CD6:  CLRF   F9B
09CD8:  CLRF   F64
09CDA:  CLRF   F65
09CDC:  CLRF   F66
09CDE:  MOVLW  02
09CE0:  MOVWF  FD3
09CE2:  CLRF   1B
09CE4:  MOVLB  F
09CE6:  BSF    x2D.3
09CE8:  MOVLW  A0
09CEA:  MOVWF  x2B
09CEC:  MOVLW  01
09CEE:  MOVWF  x2C
09CF0:  MOVLW  A6
09CF2:  MOVWF  x2E
09CF4:  MOVLW  90
09CF6:  MOVWF  x2F
09CF8:  BCF    F93.6
09CFA:  BSF    F8A.6
09CFC:  BCF    FC6.5
09CFE:  MOVLW  40
09D00:  MOVWF  FC7
09D02:  MOVLW  13
09D04:  MOVWF  FC8
09D06:  MOVLW  2A
09D08:  MOVWF  FC6
09D0A:  BCF    F92.1
09D0C:  BSF    F92.0
09D0E:  BCF    F92.3
09D10:  BSF    F96.0
09D12:  BCF    F96.6
09D14:  BCF    F96.1
09D16:  BCF    F8D.1
09D18:  BSF    F93.4
09D1A:  BCF    F93.5
09D1C:  BCF    F93.2
09D1E:  BCF    F8A.2
09D20:  CLRF   1F
09D22:  CLRF   1E
09D24:  CLRF   1D
09D26:  CLRF   1C
09D28:  CLRF   23
09D2A:  CLRF   22
09D2C:  CLRF   21
09D2E:  CLRF   20
09D30:  CLRF   25
09D32:  CLRF   24
09D34:  CLRF   46
09D36:  BCF    47.0
09D38:  MOVLB  3
09D3A:  CLRF   x57
09D3C:  CLRF   x56
09D3E:  CLRF   x55
09D40:  CLRF   x54
09D42:  CLRF   x59
09D44:  CLRF   x58
09D46:  CLRF   x5B
09D48:  CLRF   x5A
09D4A:  CLRF   x5D
09D4C:  CLRF   x5C
09D4E:  CLRF   x5F
09D50:  CLRF   x5E
09D52:  CLRF   x7D
09D54:  MOVLW  1E
09D56:  MOVWF  x82
09D58:  CLRF   x84
09D5A:  CLRF   x83
09D5C:  MOVLB  E
09D5E:  CLRF   xD9
09D60:  CLRF   xDA
09D62:  CLRF   xCE
09D64:  CLRF   xCF
09D66:  CLRF   xD0
09D68:  CLRF   xD1
09D6A:  CLRF   xD2
09D6C:  CLRF   xD3
09D6E:  CLRF   xD4
09D70:  CLRF   xD5
09D72:  CLRF   x45
09D74:  CLRF   x46
09D76:  CLRF   x47
09D78:  BCF    x8D.7
09D7A:  BCF    x8D.6
09D7C:  BCF    x8D.5
09D7E:  MOVLB  F
09D80:  CLRF   x53
09D82:  CLRF   x38
09D84:  CLRF   x37
09D86:  MOVLB  0
09D88:  CLRF   26
09D8A:  CLRF   27
09D8C:  CLRF   28
09D8E:  CLRF   29
09D90:  CLRF   2A
09D92:  CLRF   2B
09D94:  CLRF   2C
09D96:  CLRF   2D
09D98:  CLRF   2E
09D9A:  CLRF   2F
09D9C:  CLRF   30
09D9E:  CLRF   31
09DA0:  CLRF   32
09DA2:  CLRF   33
09DA4:  CLRF   34
09DA6:  CLRF   35
09DA8:  CLRF   36
09DAA:  CLRF   37
09DAC:  CLRF   38
09DAE:  CLRF   39
09DB0:  CLRF   3A
09DB2:  CLRF   3B
09DB4:  CLRF   3C
09DB6:  CLRF   3D
09DB8:  CLRF   3E
09DBA:  CLRF   3F
09DBC:  CLRF   40
09DBE:  CLRF   41
09DC0:  CLRF   42
09DC2:  CLRF   43
09DC4:  CLRF   44
09DC6:  CLRF   45
09DC8:  MOVLW  03
09DCA:  MOVWF  48
09DCC:  CLRF   49
09DCE:  CLRF   4A
09DD0:  CLRF   4B
09DD2:  CLRF   4C
09DD4:  CLRF   4D
09DD6:  CLRF   4E
09DD8:  CLRF   4F
09DDA:  CLRF   50
09DDC:  CLRF   51
09DDE:  CLRF   52
09DE0:  CLRF   53
09DE2:  CLRF   54
09DE4:  CLRF   55
09DE6:  CLRF   56
09DE8:  CLRF   57
09DEA:  CLRF   58
09DEC:  CLRF   59
09DEE:  CLRF   5A
09DF0:  CLRF   5B
09DF2:  CLRF   5C
09DF4:  CLRF   5D
09DF6:  CLRF   5E
09DF8:  CLRF   5F
09DFA:  CLRF   x60
09DFC:  CLRF   x61
09DFE:  CLRF   x62
09E00:  CLRF   x63
09E02:  CLRF   x64
09E04:  CLRF   x65
09E06:  CLRF   x66
09E08:  CLRF   x67
09E0A:  CLRF   x68
09E0C:  CLRF   x69
09E0E:  CLRF   x6A
09E10:  CLRF   x6B
09E12:  CLRF   x6C
09E14:  CLRF   x6D
09E16:  CLRF   x6E
09E18:  CLRF   x6F
09E1A:  CLRF   x70
09E1C:  CLRF   x71
09E1E:  CLRF   x72
09E20:  CLRF   x73
09E22:  CLRF   x74
09E24:  CLRF   x75
09E26:  CLRF   x76
09E28:  CLRF   x77
09E2A:  CLRF   x78
09E2C:  CLRF   x79
09E2E:  CLRF   x7A
09E30:  CLRF   x7B
09E32:  CLRF   x7C
09E34:  CLRF   x7D
09E36:  CLRF   x7E
09E38:  CLRF   x7F
09E3A:  CLRF   x80
09E3C:  CLRF   x81
09E3E:  CLRF   x82
09E40:  CLRF   x83
09E42:  CLRF   x84
09E44:  CLRF   x85
09E46:  CLRF   x86
09E48:  CLRF   x87
09E4A:  CLRF   x88
09E4C:  CLRF   x89
09E4E:  CLRF   x8A
09E50:  CLRF   x8B
09E52:  CLRF   x8C
09E54:  CLRF   x8D
09E56:  CLRF   x8E
09E58:  CLRF   x8F
09E5A:  CLRF   x90
09E5C:  CLRF   x91
09E5E:  CLRF   x92
09E60:  CLRF   x93
09E62:  CLRF   x94
09E64:  CLRF   x95
09E66:  CLRF   x96
09E68:  CLRF   x97
09E6A:  CLRF   x98
09E6C:  CLRF   x99
09E6E:  CLRF   x9A
09E70:  CLRF   x9B
09E72:  CLRF   x9C
09E74:  CLRF   x9D
09E76:  CLRF   x9E
09E78:  CLRF   x9F
09E7A:  CLRF   xA0
09E7C:  CLRF   xA1
09E7E:  CLRF   xA2
09E80:  CLRF   xA3
09E82:  CLRF   xA4
09E84:  CLRF   xA5
09E86:  CLRF   xA6
09E88:  CLRF   xA7
09E8A:  CLRF   xA8
09E8C:  CLRF   xA9
09E8E:  CLRF   xAA
09E90:  CLRF   xAB
09E92:  CLRF   xAC
09E94:  CLRF   xAD
09E96:  CLRF   xAE
09E98:  CLRF   xAF
09E9A:  CLRF   xB0
09E9C:  CLRF   xB1
09E9E:  CLRF   xB2
09EA0:  CLRF   xB3
09EA2:  CLRF   xB4
09EA4:  CLRF   xB5
09EA6:  CLRF   xB6
09EA8:  CLRF   xB7
09EAA:  CLRF   xB8
09EAC:  CLRF   xB9
09EAE:  CLRF   xBA
09EB0:  CLRF   xBB
09EB2:  CLRF   xBC
09EB4:  CLRF   xBD
09EB6:  CLRF   xBE
09EB8:  CLRF   xBF
09EBA:  CLRF   xC0
09EBC:  CLRF   xC1
09EBE:  CLRF   xC2
09EC0:  CLRF   xC3
09EC2:  CLRF   xC4
09EC4:  CLRF   xC5
09EC6:  CLRF   xC6
09EC8:  CLRF   xC7
09ECA:  CLRF   xC8
09ECC:  CLRF   xC9
09ECE:  CLRF   xCA
09ED0:  CLRF   xCB
09ED2:  CLRF   xCC
09ED4:  CLRF   xCD
09ED6:  CLRF   xCE
09ED8:  CLRF   xCF
09EDA:  CLRF   xD0
09EDC:  CLRF   xD1
09EDE:  CLRF   xD2
09EE0:  CLRF   xD3
09EE2:  CLRF   xD4
09EE4:  CLRF   xD5
09EE6:  CLRF   xD6
09EE8:  CLRF   xD7
09EEA:  CLRF   xD8
09EEC:  CLRF   xD9
09EEE:  CLRF   xDA
09EF0:  CLRF   xDB
09EF2:  CLRF   xDC
09EF4:  CLRF   xDD
09EF6:  CLRF   xDE
09EF8:  CLRF   xDF
09EFA:  CLRF   xE0
09EFC:  CLRF   xE1
09EFE:  CLRF   xE2
09F00:  CLRF   xE3
09F02:  CLRF   xE4
09F04:  CLRF   xE5
09F06:  CLRF   xE6
09F08:  CLRF   xE7
09F0A:  CLRF   xE8
09F0C:  CLRF   xE9
09F0E:  CLRF   xEA
09F10:  CLRF   xEB
09F12:  CLRF   xEC
09F14:  CLRF   xED
09F16:  CLRF   xEE
09F18:  CLRF   xEF
09F1A:  MOVLW  05
09F1C:  MOVWF  xF0
09F1E:  MOVLW  7C
09F20:  MOVWF  xF1
09F22:  MOVLW  01
09F24:  MOVWF  xF2
09F26:  MOVLW  01
09F28:  MOVWF  xF3
09F2A:  MOVLW  02
09F2C:  MOVWF  xF4
09F2E:  MOVLW  7C
09F30:  MOVWF  xF5
09F32:  CLRF   xF6
09F34:  MOVLW  09
09F36:  MOVWF  xF7
09F38:  MOVLW  01
09F3A:  MOVWF  xF8
09F3C:  CLRF   xF9
09F3E:  MOVLW  02
09F40:  MOVWF  xFA
09F42:  MOVLW  01
09F44:  MOVWF  xFB
09F46:  CLRF   xFC
09F48:  CLRF   xFD
09F4A:  CLRF   xFE
09F4C:  CLRF   xFF
09F4E:  MOVLB  1
09F50:  CLRF   x00
09F52:  CLRF   x01
09F54:  CLRF   x02
09F56:  CLRF   x03
09F58:  CLRF   x04
09F5A:  CLRF   x05
09F5C:  CLRF   x06
09F5E:  CLRF   x07
09F60:  CLRF   x08
09F62:  CLRF   x09
09F64:  CLRF   x0A
09F66:  CLRF   x0B
09F68:  CLRF   x0C
09F6A:  CLRF   x0D
09F6C:  CLRF   x0E
09F6E:  CLRF   x0F
09F70:  CLRF   x10
09F72:  CLRF   x11
09F74:  CLRF   x12
09F76:  CLRF   x13
09F78:  CLRF   x14
09F7A:  CLRF   x15
09F7C:  CLRF   x16
09F7E:  CLRF   x17
09F80:  CLRF   x18
09F82:  CLRF   x19
09F84:  CLRF   x1A
09F86:  CLRF   x1B
09F88:  CLRF   x1C
09F8A:  CLRF   x1D
09F8C:  CLRF   x1E
09F8E:  CLRF   x1F
09F90:  CLRF   x20
09F92:  CLRF   x21
09F94:  CLRF   x22
09F96:  CLRF   x23
09F98:  CLRF   x24
09F9A:  CLRF   x25
09F9C:  CLRF   x26
09F9E:  CLRF   x27
09FA0:  CLRF   x28
09FA2:  CLRF   x29
09FA4:  CLRF   x2A
09FA6:  CLRF   x2B
09FA8:  CLRF   x2C
09FAA:  CLRF   x2D
09FAC:  CLRF   x2E
09FAE:  CLRF   x2F
09FB0:  CLRF   x30
09FB2:  CLRF   x31
09FB4:  CLRF   x32
09FB6:  CLRF   x33
09FB8:  CLRF   x34
09FBA:  CLRF   x35
09FBC:  CLRF   x36
09FBE:  CLRF   x37
09FC0:  CLRF   x38
09FC2:  CLRF   x39
09FC4:  CLRF   x3A
09FC6:  CLRF   x3B
09FC8:  CLRF   x3C
09FCA:  CLRF   x3D
09FCC:  CLRF   x3E
09FCE:  CLRF   x3F
09FD0:  CLRF   x40
09FD2:  CLRF   x41
09FD4:  CLRF   x42
09FD6:  CLRF   x43
09FD8:  CLRF   x44
09FDA:  CLRF   x45
09FDC:  CLRF   x46
09FDE:  CLRF   x47
09FE0:  CLRF   x48
09FE2:  CLRF   x49
09FE4:  CLRF   x4A
09FE6:  CLRF   x4B
09FE8:  CLRF   x4C
09FEA:  CLRF   x4D
09FEC:  CLRF   x4E
09FEE:  CLRF   x4F
09FF0:  CLRF   x50
09FF2:  CLRF   x51
09FF4:  CLRF   x52
09FF6:  CLRF   x53
09FF8:  CLRF   x54
09FFA:  CLRF   x55
09FFC:  CLRF   x56
09FFE:  CLRF   x57
0A000:  CLRF   x58
0A002:  CLRF   x59
0A004:  CLRF   x5A
0A006:  CLRF   x5B
0A008:  CLRF   x5C
0A00A:  CLRF   x5D
0A00C:  CLRF   x5E
0A00E:  CLRF   x5F
0A010:  CLRF   x60
0A012:  CLRF   x61
0A014:  CLRF   x62
0A016:  CLRF   x63
0A018:  CLRF   x64
0A01A:  CLRF   x65
0A01C:  CLRF   x66
0A01E:  CLRF   x67
0A020:  CLRF   x68
0A022:  CLRF   x69
0A024:  CLRF   x6A
0A026:  CLRF   x6B
0A028:  CLRF   x6C
0A02A:  CLRF   x6D
0A02C:  CLRF   x6E
0A02E:  CLRF   x6F
0A030:  CLRF   x70
0A032:  CLRF   x71
0A034:  CLRF   x72
0A036:  CLRF   x73
0A038:  CLRF   x74
0A03A:  CLRF   x75
0A03C:  CLRF   x76
0A03E:  CLRF   x77
0A040:  CLRF   x78
0A042:  CLRF   x79
0A044:  CLRF   x7A
0A046:  CLRF   x7B
0A048:  CLRF   x7C
0A04A:  CLRF   x7D
0A04C:  CLRF   x7E
0A04E:  CLRF   x7F
0A050:  CLRF   x80
0A052:  CLRF   x81
0A054:  CLRF   x82
0A056:  CLRF   x83
0A058:  CLRF   x84
0A05A:  CLRF   x85
0A05C:  CLRF   x86
0A05E:  CLRF   x87
0A060:  CLRF   x88
0A062:  CLRF   x89
0A064:  CLRF   x8A
0A066:  CLRF   x8B
0A068:  CLRF   x8C
0A06A:  CLRF   x8D
0A06C:  CLRF   x8E
0A06E:  CLRF   x8F
0A070:  CLRF   x90
0A072:  CLRF   x91
0A074:  CLRF   x92
0A076:  CLRF   x93
0A078:  CLRF   x94
0A07A:  CLRF   x95
0A07C:  CLRF   x96
0A07E:  CLRF   x97
0A080:  CLRF   x98
0A082:  CLRF   x99
0A084:  CLRF   x9A
0A086:  CLRF   x9B
0A088:  CLRF   x9C
0A08A:  CLRF   x9D
0A08C:  CLRF   x9E
0A08E:  CLRF   x9F
0A090:  CLRF   xA0
0A092:  CLRF   xA1
0A094:  CLRF   xA2
0A096:  CLRF   xA3
0A098:  CLRF   xA4
0A09A:  CLRF   xA5
0A09C:  CLRF   xA6
0A09E:  CLRF   xA7
0A0A0:  CLRF   xA8
0A0A2:  CLRF   xA9
0A0A4:  CLRF   xAA
0A0A6:  CLRF   xAB
0A0A8:  CLRF   xAC
0A0AA:  CLRF   xAD
0A0AC:  CLRF   xAE
0A0AE:  CLRF   xAF
0A0B0:  CLRF   xB0
0A0B2:  CLRF   xB1
0A0B4:  CLRF   xB2
0A0B6:  CLRF   xB3
0A0B8:  CLRF   xB4
0A0BA:  CLRF   xB5
0A0BC:  CLRF   xB6
0A0BE:  CLRF   xB7
0A0C0:  CLRF   xB8
0A0C2:  CLRF   xB9
0A0C4:  CLRF   xBA
0A0C6:  CLRF   xBB
0A0C8:  CLRF   xBC
0A0CA:  CLRF   xBD
0A0CC:  CLRF   xBE
0A0CE:  CLRF   xBF
0A0D0:  CLRF   xC0
0A0D2:  CLRF   xC1
0A0D4:  CLRF   xC2
0A0D6:  CLRF   xC3
0A0D8:  CLRF   xC4
0A0DA:  CLRF   xC5
0A0DC:  CLRF   xC6
0A0DE:  CLRF   xC7
0A0E0:  CLRF   xC8
0A0E2:  CLRF   xC9
0A0E4:  CLRF   xCA
0A0E6:  CLRF   xCB
0A0E8:  CLRF   xCC
0A0EA:  CLRF   xCD
0A0EC:  CLRF   xCE
0A0EE:  CLRF   xCF
0A0F0:  CLRF   xD0
0A0F2:  CLRF   xD1
0A0F4:  CLRF   xD2
0A0F6:  CLRF   xD3
0A0F8:  CLRF   xD4
0A0FA:  CLRF   xD5
0A0FC:  CLRF   xD6
0A0FE:  CLRF   xD7
0A100:  CLRF   xD8
0A102:  CLRF   xD9
0A104:  CLRF   xDA
0A106:  CLRF   xDB
0A108:  CLRF   xDC
0A10A:  CLRF   xDD
0A10C:  CLRF   xDE
0A10E:  CLRF   xDF
0A110:  CLRF   xE0
0A112:  CLRF   xE1
0A114:  CLRF   xE2
0A116:  CLRF   xE3
0A118:  CLRF   xE4
0A11A:  CLRF   xE5
0A11C:  CLRF   xE6
0A11E:  CLRF   xE7
0A120:  CLRF   xE8
0A122:  CLRF   xE9
0A124:  CLRF   xEA
0A126:  CLRF   xEB
0A128:  CLRF   xEC
0A12A:  CLRF   xED
0A12C:  CLRF   xEE
0A12E:  CLRF   xEF
0A130:  CLRF   xF0
0A132:  CLRF   xF1
0A134:  CLRF   xF2
0A136:  CLRF   xF3
0A138:  CLRF   xF4
0A13A:  CLRF   xF5
0A13C:  CLRF   xF6
0A13E:  CLRF   xF7
0A140:  CLRF   xF8
0A142:  CLRF   xF9
0A144:  CLRF   xFA
0A146:  CLRF   xFB
0A148:  CLRF   xFC
0A14A:  CLRF   xFD
0A14C:  CLRF   xFE
0A14E:  CLRF   xFF
0A150:  MOVLB  2
0A152:  CLRF   x00
0A154:  CLRF   x01
0A156:  CLRF   x02
0A158:  CLRF   x03
0A15A:  CLRF   x04
0A15C:  CLRF   x05
0A15E:  CLRF   x06
0A160:  CLRF   x07
0A162:  CLRF   x08
0A164:  CLRF   x09
0A166:  CLRF   x0A
0A168:  CLRF   x0B
0A16A:  CLRF   x0C
0A16C:  CLRF   x0D
0A16E:  CLRF   x0E
0A170:  CLRF   x0F
0A172:  CLRF   x10
0A174:  CLRF   x11
0A176:  CLRF   x12
0A178:  CLRF   x13
0A17A:  CLRF   x14
0A17C:  CLRF   x15
0A17E:  CLRF   x16
0A180:  CLRF   x17
0A182:  CLRF   x18
0A184:  CLRF   x19
0A186:  CLRF   x1A
0A188:  CLRF   x1B
0A18A:  CLRF   x1C
0A18C:  CLRF   x1D
0A18E:  CLRF   x1E
0A190:  CLRF   x1F
0A192:  CLRF   x20
0A194:  CLRF   x21
0A196:  CLRF   x22
0A198:  CLRF   x23
0A19A:  CLRF   x24
0A19C:  CLRF   x25
0A19E:  CLRF   x26
0A1A0:  CLRF   x27
0A1A2:  CLRF   x28
0A1A4:  CLRF   x29
0A1A6:  CLRF   x2A
0A1A8:  CLRF   x2B
0A1AA:  CLRF   x2C
0A1AC:  CLRF   x2D
0A1AE:  CLRF   x2E
0A1B0:  CLRF   x2F
0A1B2:  CLRF   x30
0A1B4:  CLRF   x31
0A1B6:  CLRF   x32
0A1B8:  CLRF   x33
0A1BA:  CLRF   x34
0A1BC:  CLRF   x35
0A1BE:  CLRF   x36
0A1C0:  CLRF   x37
0A1C2:  CLRF   x38
0A1C4:  CLRF   x39
0A1C6:  CLRF   x3A
0A1C8:  CLRF   x3B
0A1CA:  CLRF   x3C
0A1CC:  CLRF   x3D
0A1CE:  CLRF   x3E
0A1D0:  CLRF   x3F
0A1D2:  CLRF   x40
0A1D4:  CLRF   x41
0A1D6:  CLRF   x42
0A1D8:  CLRF   x43
0A1DA:  CLRF   x44
0A1DC:  CLRF   x45
0A1DE:  CLRF   x46
0A1E0:  CLRF   x47
0A1E2:  CLRF   x48
0A1E4:  CLRF   x49
0A1E6:  CLRF   x4A
0A1E8:  CLRF   x4B
0A1EA:  CLRF   x4C
0A1EC:  CLRF   x4D
0A1EE:  CLRF   x4E
0A1F0:  CLRF   x4F
0A1F2:  CLRF   x50
0A1F4:  CLRF   x51
0A1F6:  CLRF   x52
0A1F8:  CLRF   x53
0A1FA:  CLRF   x54
0A1FC:  CLRF   x55
0A1FE:  CLRF   x56
0A200:  CLRF   x57
0A202:  CLRF   x58
0A204:  CLRF   x59
0A206:  CLRF   x5A
0A208:  CLRF   x5B
0A20A:  CLRF   x5C
0A20C:  CLRF   x5D
0A20E:  CLRF   x5E
0A210:  CLRF   x5F
0A212:  CLRF   x60
0A214:  CLRF   x61
0A216:  CLRF   x62
0A218:  CLRF   x63
0A21A:  CLRF   x64
0A21C:  CLRF   x65
0A21E:  CLRF   x66
0A220:  CLRF   x67
0A222:  CLRF   x68
0A224:  CLRF   x69
0A226:  CLRF   x6A
0A228:  CLRF   x6B
0A22A:  CLRF   x6C
0A22C:  CLRF   x6D
0A22E:  CLRF   x6E
0A230:  CLRF   x6F
0A232:  CLRF   x70
0A234:  CLRF   x71
0A236:  CLRF   x72
0A238:  CLRF   x73
0A23A:  CLRF   x74
0A23C:  CLRF   x75
0A23E:  CLRF   x76
0A240:  CLRF   x77
0A242:  CLRF   x78
0A244:  CLRF   x79
0A246:  CLRF   x7A
0A248:  CLRF   x7B
0A24A:  CLRF   x7C
0A24C:  CLRF   x7D
0A24E:  CLRF   x7E
0A250:  CLRF   x7F
0A252:  CLRF   x80
0A254:  CLRF   x81
0A256:  CLRF   x82
0A258:  CLRF   x83
0A25A:  CLRF   x84
0A25C:  CLRF   x85
0A25E:  CLRF   x86
0A260:  CLRF   x87
0A262:  CLRF   x88
0A264:  CLRF   x89
0A266:  CLRF   x8A
0A268:  CLRF   x8B
0A26A:  CLRF   x8C
0A26C:  CLRF   x8D
0A26E:  CLRF   x8E
0A270:  CLRF   x8F
0A272:  CLRF   x90
0A274:  CLRF   x91
0A276:  CLRF   x92
0A278:  CLRF   x93
0A27A:  CLRF   x94
0A27C:  CLRF   x95
0A27E:  CLRF   x96
0A280:  CLRF   x97
0A282:  CLRF   x98
0A284:  CLRF   x99
0A286:  CLRF   x9A
0A288:  CLRF   x9B
0A28A:  CLRF   x9C
0A28C:  CLRF   x9D
0A28E:  CLRF   x9E
0A290:  CLRF   x9F
0A292:  CLRF   xA0
0A294:  CLRF   xA1
0A296:  CLRF   xA2
0A298:  CLRF   xA3
0A29A:  CLRF   xA4
0A29C:  CLRF   xA5
0A29E:  CLRF   xA6
0A2A0:  CLRF   xA7
0A2A2:  CLRF   xA8
0A2A4:  CLRF   xA9
0A2A6:  CLRF   xAA
0A2A8:  CLRF   xAB
0A2AA:  CLRF   xAC
0A2AC:  CLRF   xAD
0A2AE:  CLRF   xAE
0A2B0:  CLRF   xAF
0A2B2:  CLRF   xB0
0A2B4:  CLRF   xB1
0A2B6:  CLRF   xB2
0A2B8:  CLRF   xB3
0A2BA:  CLRF   xB4
0A2BC:  CLRF   xB5
0A2BE:  CLRF   xB6
0A2C0:  CLRF   xB7
0A2C2:  CLRF   xB8
0A2C4:  CLRF   xB9
0A2C6:  CLRF   xBA
0A2C8:  CLRF   xBB
0A2CA:  CLRF   xBC
0A2CC:  CLRF   xBD
0A2CE:  CLRF   xBE
0A2D0:  CLRF   xBF
0A2D2:  CLRF   xC0
0A2D4:  CLRF   xC1
0A2D6:  CLRF   xC2
0A2D8:  CLRF   xC3
0A2DA:  CLRF   xC4
0A2DC:  CLRF   xC5
0A2DE:  CLRF   xC6
0A2E0:  CLRF   xC7
0A2E2:  CLRF   xC8
0A2E4:  CLRF   xC9
0A2E6:  CLRF   xCA
0A2E8:  CLRF   xCB
0A2EA:  CLRF   xCC
0A2EC:  CLRF   xCD
0A2EE:  CLRF   xCE
0A2F0:  CLRF   xCF
0A2F2:  CLRF   xD0
0A2F4:  CLRF   xD1
0A2F6:  CLRF   xD2
0A2F8:  CLRF   xD3
0A2FA:  CLRF   xD4
0A2FC:  CLRF   xD5
0A2FE:  CLRF   xD6
0A300:  CLRF   xD7
0A302:  CLRF   xD8
0A304:  CLRF   xD9
0A306:  CLRF   xDA
0A308:  CLRF   xDB
0A30A:  CLRF   xDC
0A30C:  CLRF   xDD
0A30E:  CLRF   xDE
0A310:  CLRF   xDF
0A312:  CLRF   xE0
0A314:  CLRF   xE1
0A316:  CLRF   xE2
0A318:  CLRF   xE3
0A31A:  CLRF   xE4
0A31C:  CLRF   xE5
0A31E:  CLRF   xE6
0A320:  CLRF   xE7
0A322:  CLRF   xE8
0A324:  CLRF   xE9
0A326:  CLRF   xEA
0A328:  CLRF   xEB
0A32A:  CLRF   xEC
0A32C:  CLRF   xED
0A32E:  CLRF   xEE
0A330:  CLRF   xEF
0A332:  CLRF   xF0
0A334:  CLRF   xF1
0A336:  CLRF   xF2
0A338:  CLRF   xF3
0A33A:  CLRF   xF4
0A33C:  CLRF   xF5
0A33E:  CLRF   xF6
0A340:  CLRF   xF7
0A342:  CLRF   xF8
0A344:  CLRF   xF9
0A346:  CLRF   xFA
0A348:  CLRF   xFB
0A34A:  CLRF   xFC
0A34C:  CLRF   xFD
0A34E:  CLRF   xFE
0A350:  CLRF   xFF
0A352:  MOVLB  3
0A354:  CLRF   x00
0A356:  CLRF   x01
0A358:  CLRF   x02
0A35A:  CLRF   x03
0A35C:  CLRF   x04
0A35E:  CLRF   x05
0A360:  CLRF   x06
0A362:  CLRF   x07
0A364:  CLRF   x08
0A366:  CLRF   x09
0A368:  CLRF   x0A
0A36A:  CLRF   x0B
0A36C:  CLRF   x0C
0A36E:  CLRF   x0D
0A370:  CLRF   x0E
0A372:  CLRF   x0F
0A374:  CLRF   x10
0A376:  CLRF   x11
0A378:  CLRF   x12
0A37A:  CLRF   x13
0A37C:  CLRF   x14
0A37E:  CLRF   x15
0A380:  CLRF   x16
0A382:  CLRF   x17
0A384:  CLRF   x18
0A386:  CLRF   x19
0A388:  CLRF   x1A
0A38A:  CLRF   x1B
0A38C:  CLRF   x1C
0A38E:  CLRF   x1D
0A390:  CLRF   x1E
0A392:  CLRF   x1F
0A394:  CLRF   x20
0A396:  CLRF   x21
0A398:  CLRF   x22
0A39A:  CLRF   x23
0A39C:  CLRF   x24
0A39E:  CLRF   x25
0A3A0:  CLRF   x26
0A3A2:  CLRF   x27
0A3A4:  CLRF   x28
0A3A6:  CLRF   x29
0A3A8:  CLRF   x2A
0A3AA:  CLRF   x2B
0A3AC:  CLRF   x2C
0A3AE:  CLRF   x2D
0A3B0:  CLRF   x2E
0A3B2:  CLRF   x2F
0A3B4:  CLRF   x30
0A3B6:  CLRF   x31
0A3B8:  CLRF   x32
0A3BA:  CLRF   x33
0A3BC:  CLRF   x34
0A3BE:  CLRF   x35
0A3C0:  CLRF   x36
0A3C2:  CLRF   x37
0A3C4:  CLRF   x38
0A3C6:  CLRF   x39
0A3C8:  CLRF   x3A
0A3CA:  CLRF   x3B
0A3CC:  CLRF   x3C
0A3CE:  CLRF   x3D
0A3D0:  CLRF   x3E
0A3D2:  CLRF   x3F
0A3D4:  CLRF   x40
0A3D6:  CLRF   x41
0A3D8:  CLRF   x42
0A3DA:  CLRF   x43
0A3DC:  CLRF   x44
0A3DE:  CLRF   x45
0A3E0:  CLRF   x46
0A3E2:  CLRF   x47
0A3E4:  CLRF   x48
0A3E6:  CLRF   x49
0A3E8:  CLRF   x4A
0A3EA:  CLRF   x4B
0A3EC:  CLRF   x4C
0A3EE:  CLRF   x4D
0A3F0:  CLRF   x4E
0A3F2:  CLRF   x4F
0A3F4:  CLRF   x50
0A3F6:  CLRF   x51
0A3F8:  CLRF   x52
0A3FA:  CLRF   x53
0A3FC:  CLRF   x7E
0A3FE:  CLRF   x7F
0A400:  CLRF   x80
0A402:  CLRF   x81
0A404:  CLRF   x85
0A406:  CLRF   x86
0A408:  CLRF   x87
0A40A:  CLRF   x88
0A40C:  CLRF   x89
0A40E:  CLRF   x8A
0A410:  CLRF   x8B
0A412:  CLRF   x8C
0A414:  CLRF   x8D
0A416:  CLRF   x8E
0A418:  CLRF   x8F
0A41A:  CLRF   x90
0A41C:  CLRF   x91
0A41E:  CLRF   x92
0A420:  CLRF   x93
0A422:  CLRF   x94
0A424:  CLRF   x95
0A426:  CLRF   x96
0A428:  CLRF   x97
0A42A:  CLRF   x98
0A42C:  CLRF   x99
0A42E:  CLRF   x9A
0A430:  CLRF   x9B
0A432:  CLRF   x9C
0A434:  CLRF   x9D
0A436:  CLRF   x9E
0A438:  CLRF   x9F
0A43A:  CLRF   xA0
0A43C:  CLRF   xA1
0A43E:  CLRF   xA2
0A440:  CLRF   xA3
0A442:  CLRF   xA4
0A444:  CLRF   xA5
0A446:  CLRF   xA6
0A448:  CLRF   xA7
0A44A:  CLRF   xA8
0A44C:  CLRF   xA9
0A44E:  CLRF   xAA
0A450:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
0A452:  MOVLW  64
0A454:  MOVLB  8
0A456:  MOVWF  x7D
0A458:  MOVLB  0
0A45A:  CALL   1C98
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
0A45E:  MOVLW  3A
0A460:  MOVWF  FF6
0A462:  MOVLW  1B
0A464:  MOVWF  FF7
0A466:  MOVLW  00
0A468:  MOVWF  FF8
0A46A:  CALL   1D18
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM4.\r\n");
0A46E:  MOVLW  80
0A470:  MOVWF  FF6
0A472:  MOVLW  1B
0A474:  MOVWF  FF7
0A476:  MOVLW  00
0A478:  MOVWF  FF8
0A47A:  CALL   1D18
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
0A47E:  MOVLW  AE
0A480:  MOVWF  FF6
0A482:  MOVLW  1B
0A484:  MOVWF  FF7
0A486:  MOVLW  00
0A488:  MOVWF  FF8
0A48A:  MOVLW  10
0A48C:  MOVLB  8
0A48E:  MOVWF  x25
0A490:  MOVLB  0
0A492:  CALL   1D48
0A496:  MOVLW  D4
0A498:  MOVWF  FF6
0A49A:  MOVLW  1B
0A49C:  MOVWF  FF7
0A49E:  MOVLW  00
0A4A0:  MOVWF  FF8
0A4A2:  CALL   1D18
0A4A6:  MOVLW  20
0A4A8:  MOVLB  8
0A4AA:  MOVWF  x68
0A4AC:  MOVLB  0
0A4AE:  CALL   1CC6
0A4B2:  MOVLW  DE
0A4B4:  MOVWF  FF6
0A4B6:  MOVLW  1B
0A4B8:  MOVWF  FF7
0A4BA:  MOVLW  00
0A4BC:  MOVWF  FF8
0A4BE:  CALL   1D18
0A4C2:  MOVLW  C3
0A4C4:  MOVWF  FF6
0A4C6:  MOVLW  1B
0A4C8:  MOVWF  FF7
0A4CA:  MOVLW  00
0A4CC:  MOVWF  FF8
0A4CE:  MOVLW  0F
0A4D0:  MOVLB  8
0A4D2:  MOVWF  x25
0A4D4:  MOVLB  0
0A4D6:  CALL   1D48
....................    
....................    //io_init();
....................    setup_uart_to_boss();
0A4DA:  GOTO   1D7E
....................    //setup_timer();
....................    ad7490_init();
0A4DE:  GOTO   1F7A
....................    misf_init();
0A4E2:  CALL   265A
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
0A4E6:  MOVFF  37D,4CA
0A4EA:  MOVLB  4
0A4EC:  CLRF   xCB
0A4EE:  MOVLB  0
0A4F0:  CALL   3DCC
.................... 
....................    int1 is_finished = FALSE;
0A4F4:  MOVLB  3
0A4F6:  BCF    xAD.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
0A4F8:  MOVLW  E8
0A4FA:  MOVWF  FF6
0A4FC:  MOVLW  1B
0A4FE:  MOVWF  FF7
0A500:  MOVLW  00
0A502:  MOVWF  FF8
0A504:  MOVLB  0
0A506:  CALL   1D18
....................    
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
0A50A:  MOVLW  0E
0A50C:  MOVWF  FF6
0A50E:  MOVLW  1C
0A510:  MOVWF  FF7
0A512:  MOVLW  00
0A514:  MOVWF  FF8
0A516:  CALL   1D18
....................    
....................    //Start loop
....................    while(!is_finished)
0A51A:  MOVLB  3
0A51C:  BTFSS  xAD.0
0A51E:  BRA    A526
0A520:  MOVLB  0
0A522:  GOTO   A5F4
0A526:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0A528:  MOVF   46,F
0A52A:  BTFSC  FD8.2
0A52C:  GOTO   A5B0
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
0A530:  MOVLB  3
0A532:  CLRF   xC1
0A534:  MOVLW  26
0A536:  MOVWF  xC0
0A538:  MOVFF  46,3C2
0A53C:  MOVLB  0
0A53E:  GOTO   4296
0A542:  MOVFF  02,03
0A546:  MOVF   01,W
0A548:  MOVWF  FE1
0A54A:  MOVFF  03,FE2
0A54E:  MOVLW  03
0A550:  MOVWF  FEA
0A552:  MOVLW  AE
0A554:  MOVWF  FE9
0A556:  MOVLW  0C
0A558:  MOVWF  01
0A55A:  MOVFF  FE6,FEE
0A55E:  DECFSZ 01,F
0A560:  GOTO   A55A
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A564:  MOVLB  3
0A566:  CLRF   xBB
0A568:  MOVLW  26
0A56A:  MOVWF  xBA
0A56C:  CLRF   xBD
0A56E:  MOVLW  46
0A570:  MOVWF  xBC
0A572:  MOVLB  0
0A574:  GOTO   44B6
....................          
....................          if(recieve_cmd.is_exist)
0A578:  MOVLB  3
0A57A:  BTFSC  xB0.0
0A57C:  BRA    A584
0A57E:  MOVLB  0
0A580:  GOTO   A5A0
0A584:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0A586:  MOVLW  03
0A588:  MOVLB  3
0A58A:  MOVWF  xBB
0A58C:  MOVLW  AE
0A58E:  MOVWF  xBA
0A590:  MOVLB  0
0A592:  GOTO   9C24
0A596:  MOVLB  3
0A598:  BCF    xAD.1
0A59A:  BTFSC  01.0
0A59C:  BSF    xAD.1
0A59E:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0A5A0:  MOVLW  2C
0A5A2:  MOVWF  FF6
0A5A4:  MOVLW  1C
0A5A6:  MOVWF  FF7
0A5A8:  MOVLW  00
0A5AA:  MOVWF  FF8
0A5AC:  CALL   1D18
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0A5B0:  MOVLB  3
0A5B2:  BTFSC  xAD.0
0A5B4:  BRA    A5BC
0A5B6:  MOVLB  0
0A5B8:  GOTO   A5C2
0A5BC:  MOVLB  0
....................          break;
0A5BE:  GOTO   A5F4
....................          
....................       delay_ms(400);
0A5C2:  MOVLW  02
0A5C4:  MOVLB  3
0A5C6:  MOVWF  xBA
0A5C8:  MOVLB  0
0A5CA:  MOVLW  C8
0A5CC:  MOVLB  8
0A5CE:  MOVWF  x7D
0A5D0:  MOVLB  0
0A5D2:  CALL   1C98
0A5D6:  MOVLB  3
0A5D8:  DECFSZ xBA,F
0A5DA:  BRA    A5E0
0A5DC:  BRA    A5E4
0A5DE:  MOVLB  0
0A5E0:  MOVLB  0
0A5E2:  BRA    A5CA
....................       fprintf(PC, ".");
0A5E4:  MOVLW  2E
0A5E6:  MOVLB  8
0A5E8:  MOVWF  x68
0A5EA:  MOVLB  0
0A5EC:  CALL   1CC6
0A5F0:  GOTO   A51A
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0A5F4:  MOVLW  4C
0A5F6:  MOVWF  FF6
0A5F8:  MOVLW  1C
0A5FA:  MOVWF  FF7
0A5FC:  MOVLW  00
0A5FE:  MOVWF  FF8
0A600:  CALL   1D18
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0A604:  MOVLW  2E
0A606:  MOVLB  8
0A608:  MOVWF  x68
0A60A:  MOVLB  0
0A60C:  CALL   1CC6
....................       delay_ms(1000);
0A610:  MOVLW  04
0A612:  MOVLB  3
0A614:  MOVWF  xBA
0A616:  MOVLB  0
0A618:  MOVLW  FA
0A61A:  MOVLB  8
0A61C:  MOVWF  x7D
0A61E:  MOVLB  0
0A620:  CALL   1C98
0A624:  MOVLB  3
0A626:  DECFSZ xBA,F
0A628:  BRA    A62E
0A62A:  BRA    A632
0A62C:  MOVLB  0
0A62E:  MOVLB  0
0A630:  BRA    A618
0A632:  MOVLB  0
0A634:  GOTO   A604
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0A638:  MOVLW  8C
0A63A:  MOVWF  FF6
0A63C:  MOVLW  1C
0A63E:  MOVWF  FF7
0A640:  MOVLW  00
0A642:  MOVWF  FF8
0A644:  CALL   1D18
....................    
.................... }
.................... 
0A648:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
