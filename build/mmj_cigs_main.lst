CCS PCH C Compiler, Version 5.104, 57077               04-8-25 15:55

               Filename:   build\mmj_cigs_main.lst

               ROM used:   45692 bytes (35%)
                           Largest free fragment is 65520
               RAM used:   343 (10%) at main() level
                           2672 (75%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   AD9E
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,43
001AE:  DATA 6F,6E
001B0:  DATA 6E,65
001B2:  DATA 63,74
001B4:  DATA 20,65
001B6:  DATA 72,72
001B8:  DATA 6F,72
001BA:  DATA 21,0D
001BC:  DATA 0A,00
001BE:  DATA 09,43
001C0:  DATA 6F,6E
001C2:  DATA 6E,65
001C4:  DATA 63,74
001C6:  DATA 20,73
001C8:  DATA 75,63
001CA:  DATA 63,65
001CC:  DATA 73,73
001CE:  DATA 66,75
001D0:  DATA 6C,0D
001D2:  DATA 0A,00
001D4:  DATA 09,43
001D6:  DATA 6F,6D
001D8:  DATA 70,6C
001DA:  DATA 65,74
001DC:  DATA 65,0D
001DE:  DATA 0A,00
001E0:  DATA 4D,43
001E2:  DATA 50,34
001E4:  DATA 39,30
001E6:  DATA 31,20
001E8:  DATA 49,6E
001EA:  DATA 69,74
001EC:  DATA 69,61
001EE:  DATA 6C,69
001F0:  DATA 7A,65
001F2:  DATA 0D,0A
001F4:  DATA 00,00
001F6:  DATA 09,5B
001F8:  DATA 44,41
001FA:  DATA 43,20
001FC:  DATA 50,6F
001FE:  DATA 72,74
00200:  DATA 20,31
00202:  DATA 5D,20
00204:  DATA 43,6F
00206:  DATA 6E,6E
00208:  DATA 65,63
0020A:  DATA 74,20
0020C:  DATA 65,72
0020E:  DATA 72,6F
00210:  DATA 72,21
00212:  DATA 0D,0A
00214:  DATA 00,00
00216:  DATA 09,5B
00218:  DATA 44,41
0021A:  DATA 43,20
0021C:  DATA 50,6F
0021E:  DATA 72,74
00220:  DATA 20,31
00222:  DATA 5D,20
00224:  DATA 43,6F
00226:  DATA 6E,6E
00228:  DATA 65,63
0022A:  DATA 74,20
0022C:  DATA 73,75
0022E:  DATA 63,63
00230:  DATA 65,73
00232:  DATA 73,66
00234:  DATA 75,6C
00236:  DATA 0D,0A
00238:  DATA 00,00
0023A:  DATA 09,5B
0023C:  DATA 44,41
0023E:  DATA 43,20
00240:  DATA 50,6F
00242:  DATA 72,74
00244:  DATA 20,32
00246:  DATA 5D,20
00248:  DATA 43,6F
0024A:  DATA 6E,6E
0024C:  DATA 65,63
0024E:  DATA 74,20
00250:  DATA 65,72
00252:  DATA 72,6F
00254:  DATA 72,21
00256:  DATA 0D,0A
00258:  DATA 00,00
0025A:  DATA 09,5B
0025C:  DATA 44,41
0025E:  DATA 43,20
00260:  DATA 50,6F
00262:  DATA 72,74
00264:  DATA 20,32
00266:  DATA 5D,20
00268:  DATA 43,6F
0026A:  DATA 6E,6E
0026C:  DATA 65,63
0026E:  DATA 74,20
00270:  DATA 73,75
00272:  DATA 63,63
00274:  DATA 65,73
00276:  DATA 73,66
00278:  DATA 75,6C
0027A:  DATA 0D,0A
0027C:  DATA 00,00
0027E:  DATA 09,43
00280:  DATA 6F,6D
00282:  DATA 70,6C
00284:  DATA 65,74
00286:  DATA 65,0D
00288:  DATA 0A,00
0028A:  DATA 53,4D
0028C:  DATA 46,20
0028E:  DATA 64,61
00290:  DATA 74,61
00292:  DATA 20,6C
00294:  DATA 69,73
00296:  DATA 74,20
00298:  DATA 69,73
0029A:  DATA 20,66
0029C:  DATA 75,6C
0029E:  DATA 6C,21
002A0:  DATA 21,21
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 53,4D
002A8:  DATA 46,20
002AA:  DATA 64,61
002AC:  DATA 74,61
002AE:  DATA 20,6C
002B0:  DATA 69,73
002B2:  DATA 74,20
002B4:  DATA 69,73
002B6:  DATA 20,65
002B8:  DATA 6D,70
002BA:  DATA 74,79
002BC:  DATA 0D,0A
002BE:  DATA 00,00
002C0:  DATA 0D,0A
002C2:  DATA 53,74
002C4:  DATA 61,72
002C6:  DATA 74,20
002C8:  DATA 6D,61
002CA:  DATA 6B,65
002CC:  DATA 5F,72
002CE:  DATA 65,63
002D0:  DATA 65,69
002D2:  DATA 76,65
002D4:  DATA 5F,63
002D6:  DATA 6F,6D
002D8:  DATA 6D,61
002DA:  DATA 6E,64
002DC:  DATA 0D,0A
002DE:  DATA 00,00
002E0:  DATA 09,5B
002E2:  DATA 42,4F
002E4:  DATA 53,53
002E6:  DATA 5D,20
002E8:  DATA 3E,3E
002EA:  DATA 3E,20
002EC:  DATA 00,00
002EE:  DATA 45,6E
002F0:  DATA 64,20
002F2:  DATA 6D,61
002F4:  DATA 6B,65
002F6:  DATA 5F,72
002F8:  DATA 65,63
002FA:  DATA 69,76
002FC:  DATA 65,5F
002FE:  DATA 63,6F
00300:  DATA 6D,6D
00302:  DATA 61,6E
00304:  DATA 64,0D
00306:  DATA 0A,0D
00308:  DATA 0A,00
0030A:  DATA 73,69
0030C:  DATA 67,6E
0030E:  DATA 61,6C
00310:  DATA 20,65
00312:  DATA 6E,64
00314:  DATA 20,77
00316:  DATA 69,74
00318:  DATA 68,20
0031A:  DATA 53,46
0031C:  DATA 44,0D
0031E:  DATA 0A,00
00320:  DATA 64,6F
00322:  DATA 6E,27
00324:  DATA 74,20
00326:  DATA 66,69
00328:  DATA 6E,64
0032A:  DATA 20,53
0032C:  DATA 46,44
0032E:  DATA 0D,0A
00330:  DATA 00,00
00332:  DATA 09,2D
00334:  DATA 3E,20
00336:  DATA 49,6E
00338:  DATA 76,61
0033A:  DATA 6C,69
0033C:  DATA 64,20
0033E:  DATA 46,72
00340:  DATA 61,6D
00342:  DATA 65,20
00344:  DATA 49,44
00346:  DATA 20,72
00348:  DATA 65,63
0034A:  DATA 65,69
0034C:  DATA 76,65
0034E:  DATA 64,3A
00350:  DATA 20,25
00352:  DATA 58,0D
00354:  DATA 0A,00
00356:  DATA 09,2D
00358:  DATA 3E,20
0035A:  DATA 43,52
0035C:  DATA 43,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,09
0036A:  DATA 2D,3E
0036C:  DATA 20,72
0036E:  DATA 65,63
00370:  DATA 65,69
00372:  DATA 76,65
00374:  DATA 64,20
00376:  DATA 43,52
00378:  DATA 43,3A
0037A:  DATA 20,25
0037C:  DATA 58,0D
0037E:  DATA 0A,00
00380:  DATA 09,09
00382:  DATA 20,20
00384:  DATA 20,63
00386:  DATA 6F,6C
00388:  DATA 6C,65
0038A:  DATA 63,74
0038C:  DATA 20,43
0038E:  DATA 52,43
00390:  DATA 20,3A
00392:  DATA 20,25
00394:  DATA 58,0D
00396:  DATA 0A,00
00398:  DATA 09,2D
0039A:  DATA 3E,20
0039C:  DATA 49,6E
0039E:  DATA 76,61
003A0:  DATA 6C,69
003A2:  DATA 64,20
003A4:  DATA 64,65
003A6:  DATA 76,69
003A8:  DATA 63,65
003AA:  DATA 20,49
003AC:  DATA 44,20
003AE:  DATA 72,65
003B0:  DATA 63,65
003B2:  DATA 69,76
003B4:  DATA 65,64
003B6:  DATA 0D,0A
003B8:  DATA 00,00
003BA:  DATA 09,09
003BC:  DATA 2D,3E
003BE:  DATA 20,72
003C0:  DATA 65,63
003C2:  DATA 65,69
003C4:  DATA 76,65
003C6:  DATA 64,3A
003C8:  DATA 20,20
003CA:  DATA 20,20
003CC:  DATA 20,25
003CE:  DATA 58,0D
003D0:  DATA 0A,00
003D2:  DATA 09,09
003D4:  DATA 20,20
003D6:  DATA 20,4D
003D8:  DATA 79,20
003DA:  DATA 64,65
003DC:  DATA 76,69
003DE:  DATA 63,65
003E0:  DATA 20,49
003E2:  DATA 44,3A
003E4:  DATA 20,25
003E6:  DATA 58,0D
003E8:  DATA 0A,00
003EA:  DATA 09,5B
003EC:  DATA 42,4F
003EE:  DATA 53,53
003F0:  DATA 5D,20
003F2:  DATA 3C,3C
003F4:  DATA 3C,20
003F6:  DATA 00,00
003F8:  DATA 53,74
003FA:  DATA 61,72
003FC:  DATA 74,20
003FE:  DATA 53,4D
00400:  DATA 46,20
00402:  DATA 75,73
00404:  DATA 69,6E
00406:  DATA 67,20
00408:  DATA 72,65
0040A:  DATA 71,65
0040C:  DATA 73,74
0040E:  DATA 20,73
00410:  DATA 65,61
00412:  DATA 71,75
00414:  DATA 65,6E
00416:  DATA 63,65
00418:  DATA 0D,0A
0041A:  DATA 00,00
0041C:  DATA 45,72
0041E:  DATA 72,6F
00420:  DATA 72,21
00422:  DATA 20,52
00424:  DATA 65,63
00426:  DATA 65,69
00428:  DATA 76,69
0042A:  DATA 6E,67
0042C:  DATA 20,63
0042E:  DATA 6F,6D
00430:  DATA 6D,61
00432:  DATA 6E,64
00434:  DATA 20,69
00436:  DATA 6E,63
00438:  DATA 6F,6E
0043A:  DATA 73,69
0043C:  DATA 73,74
0043E:  DATA 65,6E
00440:  DATA 74,20
00442:  DATA 77,69
00444:  DATA 74,68
00446:  DATA 20,74
00448:  DATA 68,65
0044A:  DATA 20,64
0044C:  DATA 65,73
0044E:  DATA 69,67
00450:  DATA 6E,0D
00452:  DATA 0A,00
00454:  DATA 53,4D
00456:  DATA 46,20
00458:  DATA 75,73
0045A:  DATA 65,20
0045C:  DATA 72,65
0045E:  DATA 71,75
00460:  DATA 65,73
00462:  DATA 74,20
00464:  DATA 61,6C
00466:  DATA 6C,6F
00468:  DATA 77,65
0046A:  DATA 64,0D
0046C:  DATA 0A,00
0046E:  DATA 53,4D
00470:  DATA 46,20
00472:  DATA 75,73
00474:  DATA 65,20
00476:  DATA 72,65
00478:  DATA 71,75
0047A:  DATA 65,73
0047C:  DATA 74,20
0047E:  DATA 64,65
00480:  DATA 6E,79
00482:  DATA 65,64
00484:  DATA 0D,0A
00486:  DATA 00,00
00488:  DATA 52,65
0048A:  DATA 74,72
0048C:  DATA 79,20
0048E:  DATA 72,65
00490:  DATA 71,75
00492:  DATA 65,73
00494:  DATA 74,20
00496:  DATA 74,6F
00498:  DATA 20,42
0049A:  DATA 4F,53
0049C:  DATA 53,20
0049E:  DATA 50,49
004A0:  DATA 43,0D
004A2:  DATA 0A,00
004A4:  DATA 45,72
004A6:  DATA 72,6F
004A8:  DATA 72,21
004AA:  DATA 20,52
004AC:  DATA 65,63
004AE:  DATA 65,69
004B0:  DATA 76,69
004B2:  DATA 6E,67
004B4:  DATA 20,63
004B6:  DATA 6F,6D
004B8:  DATA 6D,61
004BA:  DATA 6E,64
004BC:  DATA 20,69
004BE:  DATA 6E,63
004C0:  DATA 6F,6E
004C2:  DATA 73,69
004C4:  DATA 73,74
004C6:  DATA 65,6E
004C8:  DATA 74,20
004CA:  DATA 77,69
004CC:  DATA 74,68
004CE:  DATA 20,74
004D0:  DATA 68,65
004D2:  DATA 20,64
004D4:  DATA 65,73
004D6:  DATA 69,67
004D8:  DATA 6E,0D
004DA:  DATA 0A,00
004DC:  DATA 45,6E
004DE:  DATA 64,20
004E0:  DATA 53,4D
004E2:  DATA 46,20
004E4:  DATA 75,73
004E6:  DATA 69,6E
004E8:  DATA 67,20
004EA:  DATA 72,65
004EC:  DATA 71,65
004EE:  DATA 73,74
004F0:  DATA 20,73
004F2:  DATA 65,61
004F4:  DATA 71,75
004F6:  DATA 65,6E
004F8:  DATA 63,65
004FA:  DATA 0D,0A
004FC:  DATA 00,00
004FE:  DATA 49,4F
00500:  DATA 20,49
00502:  DATA 6E,69
00504:  DATA 74,69
00506:  DATA 61,6C
00508:  DATA 69,7A
0050A:  DATA 65,0D
0050C:  DATA 0A,00
0050E:  DATA 09,43
00510:  DATA 6F,6D
00512:  DATA 70,6C
00514:  DATA 65,74
00516:  DATA 65,0D
00518:  DATA 0A,00
0051A:  DATA 41,44
0051C:  DATA 43,20
0051E:  DATA 49,6E
00520:  DATA 69,74
00522:  DATA 69,61
00524:  DATA 6C,69
00526:  DATA 7A,65
00528:  DATA 0D,0A
0052A:  DATA 00,00
0052C:  DATA 09,43
0052E:  DATA 6F,6D
00530:  DATA 70,6C
00532:  DATA 65,74
00534:  DATA 65,0D
00536:  DATA 0A,00
00538:  DATA 53,74
0053A:  DATA 61,72
0053C:  DATA 74,20
0053E:  DATA 53,57
00540:  DATA 45,45
00542:  DATA 50,0D
00544:  DATA 0A,00
00546:  DATA 09,53
00548:  DATA 77,65
0054A:  DATA 65,70
0054C:  DATA 20,73
0054E:  DATA 74,65
00550:  DATA 70,20
00552:  DATA 3A,20
00554:  DATA 25,75
00556:  DATA 0D,0A
00558:  DATA 00,00
0055A:  DATA 53,74
0055C:  DATA 61,72
0055E:  DATA 74,20
00560:  DATA 54,45
00562:  DATA 53,54
00564:  DATA 20,53
00566:  DATA 57,45
00568:  DATA 45,50
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 73,74
00570:  DATA 65,70
00572:  DATA 2C,20
00574:  DATA 76,6F
00576:  DATA 6C,74
00578:  DATA 61,67
0057A:  DATA 65,2C
0057C:  DATA 20,63
0057E:  DATA 75,72
00580:  DATA 72,65
00582:  DATA 6E,74
00584:  DATA 0D,0A
00586:  DATA 00,00
00588:  DATA 53,74
0058A:  DATA 61,72
0058C:  DATA 74,20
0058E:  DATA 41,44
00590:  DATA 43,20
00592:  DATA 54,45
00594:  DATA 53,54
00596:  DATA 0D,0A
00598:  DATA 00,00
0059A:  DATA 41,44
0059C:  DATA 43,20
0059E:  DATA 56,6F
005A0:  DATA 6C,74
005A2:  DATA 61,67
005A4:  DATA 65,3A
005A6:  DATA 20,25
005A8:  DATA 30,34
005AA:  DATA 4C,58
005AC:  DATA 0D,0A
005AE:  DATA 00,00
005B0:  DATA 41,44
005B2:  DATA 43,20
005B4:  DATA 43,75
005B6:  DATA 72,72
005B8:  DATA 65,6E
005BA:  DATA 74,3A
005BC:  DATA 20,25
005BE:  DATA 30,34
005C0:  DATA 4C,58
005C2:  DATA 0D,0A
005C4:  DATA 00,00
005C6:  DATA 41,44
005C8:  DATA 43,20
005CA:  DATA 43,49
005CC:  DATA 47,53
005CE:  DATA 31,20
005D0:  DATA 41,6D
005D2:  DATA 70,3A
005D4:  DATA 20,25
005D6:  DATA 30,34
005D8:  DATA 4C,58
005DA:  DATA 0D,0A
005DC:  DATA 00,00
005DE:  DATA 41,44
005E0:  DATA 43,20
005E2:  DATA 43,49
005E4:  DATA 47,53
005E6:  DATA 31,20
005E8:  DATA 56,52
005EA:  DATA 45,46
005EC:  DATA 3A,20
005EE:  DATA 25,30
005F0:  DATA 34,4C
005F2:  DATA 58,0D
005F4:  DATA 0A,00
005F6:  DATA 53,74
005F8:  DATA 61,72
005FA:  DATA 74,20
005FC:  DATA 53,57
005FE:  DATA 45,45
00600:  DATA 50,20
00602:  DATA 32,70
00604:  DATA 6F,72
00606:  DATA 74,73
00608:  DATA 0D,0A
0060A:  DATA 00,00
0060C:  DATA 09,53
0060E:  DATA 77,65
00610:  DATA 65,70
00612:  DATA 20,73
00614:  DATA 74,65
00616:  DATA 70,20
00618:  DATA 3A,20
0061A:  DATA 25,75
0061C:  DATA 0D,0A
0061E:  DATA 00,00
00620:  DATA 45,4E
00622:  DATA 44,20
00624:  DATA 53,57
00626:  DATA 45,45
00628:  DATA 50,20
0062A:  DATA 32,70
0062C:  DATA 6F,72
0062E:  DATA 74,0D
00630:  DATA 0A,00
00632:  DATA 53,74
00634:  DATA 61,72
00636:  DATA 74,20
00638:  DATA 43,49
0063A:  DATA 47,53
0063C:  DATA 20,64
0063E:  DATA 61,74
00640:  DATA 61,20
00642:  DATA 63,6F
00644:  DATA 6E,76
00646:  DATA 65,72
00648:  DATA 73,69
0064A:  DATA 6F,6E
0064C:  DATA 0D,0A
0064E:  DATA 00,00
00650:  DATA 53,74
00652:  DATA 61,72
00654:  DATA 74,20
00656:  DATA 53,57
00658:  DATA 45,45
0065A:  DATA 50,20
0065C:  DATA 50,4F
0065E:  DATA 52,54
00660:  DATA 31,0D
00662:  DATA 0A,00
00664:  DATA 09,53
00666:  DATA 77,65
00668:  DATA 65,70
0066A:  DATA 20,73
0066C:  DATA 74,65
0066E:  DATA 70,20
00670:  DATA 3A,20
00672:  DATA 25,75
00674:  DATA 0D,0A
00676:  DATA 00,00
00678:  DATA 45,4E
0067A:  DATA 44,20
0067C:  DATA 53,57
0067E:  DATA 45,45
00680:  DATA 50,20
00682:  DATA 50,4F
00684:  DATA 52,54
00686:  DATA 31,0D
00688:  DATA 0A,00
0068A:  DATA 53,74
0068C:  DATA 61,72
0068E:  DATA 74,20
00690:  DATA 43,49
00692:  DATA 47,53
00694:  DATA 20,64
00696:  DATA 61,74
00698:  DATA 61,20
0069A:  DATA 63,6F
0069C:  DATA 6E,76
0069E:  DATA 65,72
006A0:  DATA 73,69
006A2:  DATA 6F,6E
006A4:  DATA 0D,0A
006A6:  DATA 00,00
006A8:  DATA 45,6E
006AA:  DATA 64,20
006AC:  DATA 43,49
006AE:  DATA 47,53
006B0:  DATA 20,64
006B2:  DATA 61,74
006B4:  DATA 61,20
006B6:  DATA 63,6F
006B8:  DATA 6E,76
006BA:  DATA 65,72
006BC:  DATA 73,69
006BE:  DATA 6F,6E
006C0:  DATA 0D,0A
006C2:  DATA 00,00
006C4:  DATA 53,74
006C6:  DATA 61,72
006C8:  DATA 74,20
006CA:  DATA 53,57
006CC:  DATA 45,45
006CE:  DATA 50,20
006D0:  DATA 50,4F
006D2:  DATA 52,54
006D4:  DATA 32,0D
006D6:  DATA 0A,00
006D8:  DATA 09,53
006DA:  DATA 77,65
006DC:  DATA 65,70
006DE:  DATA 20,73
006E0:  DATA 74,65
006E2:  DATA 70,20
006E4:  DATA 3A,20
006E6:  DATA 25,75
006E8:  DATA 0D,0A
006EA:  DATA 00,00
006EC:  DATA 45,4E
006EE:  DATA 44,20
006F0:  DATA 53,57
006F2:  DATA 45,45
006F4:  DATA 50,20
006F6:  DATA 50,4F
006F8:  DATA 52,54
006FA:  DATA 32,0D
006FC:  DATA 0A,00
006FE:  DATA 53,74
00700:  DATA 61,72
00702:  DATA 74,20
00704:  DATA 43,49
00706:  DATA 47,53
00708:  DATA 20,64
0070A:  DATA 61,74
0070C:  DATA 61,20
0070E:  DATA 63,6F
00710:  DATA 6E,76
00712:  DATA 65,72
00714:  DATA 73,69
00716:  DATA 6F,6E
00718:  DATA 0D,0A
0071A:  DATA 00,00
0071C:  DATA 53,74
0071E:  DATA 61,72
00720:  DATA 74,20
00722:  DATA 53,57
00724:  DATA 45,45
00726:  DATA 50,20
00728:  DATA 77,69
0072A:  DATA 74,68
0072C:  DATA 20,74
0072E:  DATA 68,72
00730:  DATA 65,73
00732:  DATA 68,6F
00734:  DATA 6C,64
00736:  DATA 0D,0A
00738:  DATA 00,00
0073A:  DATA 43,49
0073C:  DATA 47,53
0073E:  DATA 32,20
00740:  DATA 64,61
00742:  DATA 74,61
00744:  DATA 3A,20
00746:  DATA 25,30
00748:  DATA 34,4C
0074A:  DATA 58,2C
0074C:  DATA 20,25
0074E:  DATA 30,34
00750:  DATA 4C,58
00752:  DATA 0D,0A
00754:  DATA 00,00
00756:  DATA 4D,61
00758:  DATA 78,69
0075A:  DATA 6D,75
0075C:  DATA 6D,20
0075E:  DATA 73,74
00760:  DATA 65,70
00762:  DATA 20,63
00764:  DATA 6F,75
00766:  DATA 6E,74
00768:  DATA 20,72
0076A:  DATA 65,61
0076C:  DATA 63,68
0076E:  DATA 65,64
00770:  DATA 3A,20
00772:  DATA 25,6C
00774:  DATA 64,0D
00776:  DATA 0A,00
00778:  DATA 43,49
0077A:  DATA 47,53
0077C:  DATA 31,20
0077E:  DATA 63,75
00780:  DATA 72,72
00782:  DATA 65,6E
00784:  DATA 74,20
00786:  DATA 6C,69
00788:  DATA 6D,69
0078A:  DATA 74,20
0078C:  DATA 72,65
0078E:  DATA 61,63
00790:  DATA 68,65
00792:  DATA 64,3A
00794:  DATA 00,00
00796:  DATA 43,49
00798:  DATA 47,53
0079A:  DATA 31,20
0079C:  DATA 63,75
0079E:  DATA 72,72
007A0:  DATA 65,6E
007A2:  DATA 74,20
007A4:  DATA 62,65
007A6:  DATA 6C,6F
007A8:  DATA 77,20
007AA:  DATA 74,68
007AC:  DATA 72,65
007AE:  DATA 73,68
007B0:  DATA 6F,6C
007B2:  DATA 64,00
007B4:  DATA 43,49
007B6:  DATA 47,53
007B8:  DATA 32,20
007BA:  DATA 63,75
007BC:  DATA 72,72
007BE:  DATA 65,6E
007C0:  DATA 74,20
007C2:  DATA 6C,69
007C4:  DATA 6D,69
007C6:  DATA 74,20
007C8:  DATA 72,65
007CA:  DATA 61,63
007CC:  DATA 68,65
007CE:  DATA 64,3A
007D0:  DATA 20,00
007D2:  DATA 43,49
007D4:  DATA 47,53
007D6:  DATA 32,20
007D8:  DATA 63,75
007DA:  DATA 72,72
007DC:  DATA 65,6E
007DE:  DATA 74,20
007E0:  DATA 62,65
007E2:  DATA 6C,6F
007E4:  DATA 77,20
007E6:  DATA 74,68
007E8:  DATA 72,65
007EA:  DATA 73,68
007EC:  DATA 6F,6C
007EE:  DATA 64,3A
007F0:  DATA 00,00
007F2:  DATA 45,6E
007F4:  DATA 64,20
007F6:  DATA 53,57
007F8:  DATA 45,45
007FA:  DATA 50,20
007FC:  DATA 77,69
007FE:  DATA 74,68
00800:  DATA 20,74
00802:  DATA 68,72
00804:  DATA 65,73
00806:  DATA 68,6F
00808:  DATA 6C,64
0080A:  DATA 0D,0A
0080C:  DATA 00,00
0080E:  DATA 45,6E
00810:  DATA 64,20
00812:  DATA 43,49
00814:  DATA 47,53
00816:  DATA 20,64
00818:  DATA 61,74
0081A:  DATA 61,20
0081C:  DATA 63,6F
0081E:  DATA 6E,76
00820:  DATA 65,72
00822:  DATA 73,69
00824:  DATA 6F,6E
00826:  DATA 0D,0A
00828:  DATA 00,00
0082A:  DATA 4D,69
0082C:  DATA 73,73
0082E:  DATA 69,6F
00830:  DATA 6E,20
00832:  DATA 46,6C
00834:  DATA 61,73
00836:  DATA 68,20
00838:  DATA 69,73
0083A:  DATA 20,6E
0083C:  DATA 6F,74
0083E:  DATA 20,63
00840:  DATA 6F,6E
00842:  DATA 6E,65
00844:  DATA 63,74
00846:  DATA 65,64
00848:  DATA 0D,0A
0084A:  DATA 00,00
0084C:  DATA 43,52
0084E:  DATA 43,20
00850:  DATA 76,65
00852:  DATA 72,69
00854:  DATA 66,69
00856:  DATA 63,61
00858:  DATA 74,69
0085A:  DATA 6F,6E
0085C:  DATA 20,70
0085E:  DATA 61,73
00860:  DATA 73,65
00862:  DATA 64,20
00864:  DATA 6F,6E
00866:  DATA 20,61
00868:  DATA 74,74
0086A:  DATA 65,6D
0086C:  DATA 70,74
0086E:  DATA 20,25
00870:  DATA 64,0D
00872:  DATA 0A,00
00874:  DATA 43,52
00876:  DATA 43,20
00878:  DATA 76,65
0087A:  DATA 72,69
0087C:  DATA 66,69
0087E:  DATA 63,61
00880:  DATA 74,69
00882:  DATA 6F,6E
00884:  DATA 20,70
00886:  DATA 61,73
00888:  DATA 73,65
0088A:  DATA 64,20
0088C:  DATA 6F,6E
0088E:  DATA 20,61
00890:  DATA 74,74
00892:  DATA 65,6D
00894:  DATA 70,74
00896:  DATA 20,25
00898:  DATA 64,0D
0089A:  DATA 0A,00
0089C:  DATA 45,72
0089E:  DATA 72,6F
008A0:  DATA 72,3A
008A2:  DATA 20,43
008A4:  DATA 52,43
008A6:  DATA 20,76
008A8:  DATA 65,72
008AA:  DATA 69,66
008AC:  DATA 69,63
008AE:  DATA 61,74
008B0:  DATA 69,6F
008B2:  DATA 6E,20
008B4:  DATA 66,61
008B6:  DATA 69,6C
008B8:  DATA 65,64
008BA:  DATA 20,61
008BC:  DATA 66,74
008BE:  DATA 65,72
008C0:  DATA 20,25
008C2:  DATA 64,20
008C4:  DATA 61,74
008C6:  DATA 74,65
008C8:  DATA 6D,70
008CA:  DATA 74,73
008CC:  DATA 0D,0A
008CE:  DATA 00,00
008D0:  DATA 0D,0A
008D2:  DATA 5F,5F
008D4:  DATA 5F,5F
008D6:  DATA 5F,5F
008D8:  DATA 5F,5F
008DA:  DATA 5F,5F
008DC:  DATA 5F,5F
008DE:  DATA 5F,5F
008E0:  DATA 5F,5F
008E2:  DATA 5F,5F
008E4:  DATA 5F,5F
008E6:  DATA 0D,0A
008E8:  DATA 00,00
008EA:  DATA 5F,5F
008EC:  DATA 5F,53
008EE:  DATA 74,61
008F0:  DATA 72,74
008F2:  DATA 20,63
008F4:  DATA 6F,70
008F6:  DATA 79,5F
008F8:  DATA 64,61
008FA:  DATA 74,61
008FC:  DATA 5F,5F
008FE:  DATA 0D,0A
00900:  DATA 00,00
00902:  DATA 49,6E
00904:  DATA 20,53
00906:  DATA 4D,46
00908:  DATA 20,6D
0090A:  DATA 69,73
0090C:  DATA 73,69
0090E:  DATA 6F,6E
00910:  DATA 20,64
00912:  DATA 61,74
00914:  DATA 61,20
00916:  DATA 73,74
00918:  DATA 61,72
0091A:  DATA 74,20
0091C:  DATA 20,20
0091E:  DATA 61,64
00920:  DATA 64,72
00922:  DATA 65,73
00924:  DATA 73,3A
00926:  DATA 20,25
00928:  DATA 4C,58
0092A:  DATA 0D,0A
0092C:  DATA 00,00
0092E:  DATA 49,6E
00930:  DATA 20,53
00932:  DATA 4D,46
00934:  DATA 20,6D
00936:  DATA 69,73
00938:  DATA 73,69
0093A:  DATA 6F,6E
0093C:  DATA 20,64
0093E:  DATA 61,74
00940:  DATA 61,20
00942:  DATA 65,6E
00944:  DATA 64,20
00946:  DATA 20,20
00948:  DATA 20,20
0094A:  DATA 61,64
0094C:  DATA 64,72
0094E:  DATA 65,73
00950:  DATA 73,3A
00952:  DATA 20,25
00954:  DATA 4C,58
00956:  DATA 0D,0A
00958:  DATA 00,00
0095A:  DATA 49,6E
0095C:  DATA 20,4D
0095E:  DATA 49,53
00960:  DATA 20,46
00962:  DATA 4D,20
00964:  DATA 57,72
00966:  DATA 69,74
00968:  DATA 65,20
0096A:  DATA 73,6F
0096C:  DATA 75,72
0096E:  DATA 63,65
00970:  DATA 20,64
00972:  DATA 61,74
00974:  DATA 61,20
00976:  DATA 61,64
00978:  DATA 64,72
0097A:  DATA 65,73
0097C:  DATA 73,3A
0097E:  DATA 20,25
00980:  DATA 4C,58
00982:  DATA 0D,0A
00984:  DATA 00,00
00986:  DATA 49,6E
00988:  DATA 20,4D
0098A:  DATA 49,53
0098C:  DATA 20,46
0098E:  DATA 4D,20
00990:  DATA 57,72
00992:  DATA 69,74
00994:  DATA 65,20
00996:  DATA 64,61
00998:  DATA 74,61
0099A:  DATA 20,73
0099C:  DATA 69,7A
0099E:  DATA 65,20
009A0:  DATA 20,20
009A2:  DATA 20,20
009A4:  DATA 20,20
009A6:  DATA 20,20
009A8:  DATA 20,3A
009AA:  DATA 20,25
009AC:  DATA 6C,75
009AE:  DATA 20,28
009B0:  DATA 30,78
009B2:  DATA 25,6C
009B4:  DATA 78,29
009B6:  DATA 0D,0A
009B8:  DATA 0D,0A
009BA:  DATA 00,00
009BC:  DATA 45,72
009BE:  DATA 72,6F
009C0:  DATA 72,3A
009C2:  DATA 20,4D
009C4:  DATA 49,53
009C6:  DATA 20,46
009C8:  DATA 4D,20
009CA:  DATA 69,73
009CC:  DATA 20,6E
009CE:  DATA 6F,74
009D0:  DATA 20,63
009D2:  DATA 6F,6E
009D4:  DATA 6E,65
009D6:  DATA 63,74
009D8:  DATA 65,64
009DA:  DATA 0D,0A
009DC:  DATA 00,00
009DE:  DATA 45,72
009E0:  DATA 72,6F
009E2:  DATA 72,3A
009E4:  DATA 20,53
009E6:  DATA 4D,46
009E8:  DATA 20,69
009EA:  DATA 73,20
009EC:  DATA 6E,6F
009EE:  DATA 74,20
009F0:  DATA 63,6F
009F2:  DATA 6E,6E
009F4:  DATA 65,63
009F6:  DATA 74,65
009F8:  DATA 64,0D
009FA:  DATA 0A,00
009FC:  DATA 53,69
009FE:  DATA 7A,65
00A00:  DATA 20,61
00A02:  DATA 72,65
00A04:  DATA 61,20
00A06:  DATA 72,65
00A08:  DATA 61,64
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 75,73
00A10:  DATA 65,64
00A12:  DATA 5F,73
00A14:  DATA 69,7A
00A16:  DATA 65,20
00A18:  DATA 3D,20
00A1A:  DATA 25,6C
00A1C:  DATA 64,20
00A1E:  DATA 28,73
00A20:  DATA 72,63
00A22:  DATA 20,30
00A24:  DATA 78,25
00A26:  DATA 30,38
00A28:  DATA 4C,58
00A2A:  DATA 29,0D
00A2C:  DATA 0A,00
00A2E:  DATA 6C,6F
00A30:  DATA 6F,70
00A32:  DATA 20,63
00A34:  DATA 6F,75
00A36:  DATA 6E,74
00A38:  DATA 3D,20
00A3A:  DATA 25,64
00A3C:  DATA 20,20
00A3E:  DATA 28,73
00A40:  DATA 72,63
00A42:  DATA 20,30
00A44:  DATA 78,25
00A46:  DATA 30,38
00A48:  DATA 4C,58
00A4A:  DATA 29,0D
00A4C:  DATA 0A,0D
00A4E:  DATA 0A,00
00A50:  DATA 57,72
00A52:  DATA 61,70
00A54:  DATA 20,74
00A56:  DATA 72,69
00A58:  DATA 67,67
00A5A:  DATA 65,72
00A5C:  DATA 65,64
00A5E:  DATA 3A,20
00A60:  DATA 52,65
00A62:  DATA 73,65
00A64:  DATA 74,74
00A66:  DATA 69,6E
00A68:  DATA 67,20
00A6A:  DATA 64,61
00A6C:  DATA 74,61
00A6E:  DATA 5F,77
00A70:  DATA 72,69
00A72:  DATA 74,65
00A74:  DATA 5F,61
00A76:  DATA 64,64
00A78:  DATA 72,20
00A7A:  DATA 74,6F
00A7C:  DATA 20,73
00A7E:  DATA 74,61
00A80:  DATA 72,74
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 75,73
00A88:  DATA 65,64
00A8A:  DATA 5F,73
00A8C:  DATA 69,7A
00A8E:  DATA 65,20
00A90:  DATA 3D,20
00A92:  DATA 25,6C
00A94:  DATA 64,0D
00A96:  DATA 0A,00
00A98:  DATA 6C,6F
00A9A:  DATA 6F,70
00A9C:  DATA 5F,63
00A9E:  DATA 6F,75
00AA0:  DATA 6E,74
00AA2:  DATA 20,3D
00AA4:  DATA 20,25
00AA6:  DATA 75,0D
00AA8:  DATA 0A,0D
00AAA:  DATA 0A,00
00AAC:  DATA 0D,0A
00AAE:  DATA 5F,5F
00AB0:  DATA 5F,45
00AB2:  DATA 6E,64
00AB4:  DATA 20,63
00AB6:  DATA 6F,70
00AB8:  DATA 79,5F
00ABA:  DATA 64,61
00ABC:  DATA 74,61
00ABE:  DATA 5F,5F
00AC0:  DATA 5F,5F
00AC2:  DATA 0D,0A
00AC4:  DATA 00,00
00AC6:  DATA 5F,5F
00AC8:  DATA 5F,5F
00ACA:  DATA 5F,5F
00ACC:  DATA 5F,5F
00ACE:  DATA 5F,5F
00AD0:  DATA 5F,5F
00AD2:  DATA 5F,5F
00AD4:  DATA 5F,5F
00AD6:  DATA 5F,5F
00AD8:  DATA 5F,5F
00ADA:  DATA 0D,0A
00ADC:  DATA 0D,0A
00ADE:  DATA 00,00
00AE0:  DATA 0D,0A
00AE2:  DATA 5F,5F
00AE4:  DATA 5F,5F
00AE6:  DATA 5F,5F
00AE8:  DATA 5F,5F
00AEA:  DATA 5F,5F
00AEC:  DATA 5F,5F
00AEE:  DATA 5F,5F
00AF0:  DATA 5F,5F
00AF2:  DATA 5F,5F
00AF4:  DATA 5F,5F
00AF6:  DATA 0D,0A
00AF8:  DATA 00,00
00AFA:  DATA 5F,5F
00AFC:  DATA 5F,53
00AFE:  DATA 74,61
00B00:  DATA 72,74
00B02:  DATA 20,53
00B04:  DATA 4D,46
00B06:  DATA 20,52
00B08:  DATA 65,61
00B0A:  DATA 64,5F
00B0C:  DATA 5F,5F
00B0E:  DATA 5F,0D
00B10:  DATA 0A,00
00B12:  DATA 49,6E
00B14:  DATA 20,53
00B16:  DATA 4D,46
00B18:  DATA 20,52
00B1A:  DATA 65,61
00B1C:  DATA 64,20
00B1E:  DATA 73,6F
00B20:  DATA 75,72
00B22:  DATA 63,65
00B24:  DATA 20,64
00B26:  DATA 61,74
00B28:  DATA 61,20
00B2A:  DATA 61,64
00B2C:  DATA 64,72
00B2E:  DATA 65,73
00B30:  DATA 73,3A
00B32:  DATA 20,25
00B34:  DATA 4C,58
00B36:  DATA 0D,0A
00B38:  DATA 00,00
00B3A:  DATA 49,6E
00B3C:  DATA 20,53
00B3E:  DATA 4D,46
00B40:  DATA 20,52
00B42:  DATA 65,61
00B44:  DATA 64,20
00B46:  DATA 64,61
00B48:  DATA 74,61
00B4A:  DATA 20,73
00B4C:  DATA 69,7A
00B4E:  DATA 65,20
00B50:  DATA 20,20
00B52:  DATA 20,20
00B54:  DATA 20,20
00B56:  DATA 20,20
00B58:  DATA 20,3A
00B5A:  DATA 20,25
00B5C:  DATA 6C,75
00B5E:  DATA 20,28
00B60:  DATA 30,78
00B62:  DATA 25,6C
00B64:  DATA 78,29
00B66:  DATA 0D,0A
00B68:  DATA 0D,0A
00B6A:  DATA 00,00
00B6C:  DATA 45,72
00B6E:  DATA 72,6F
00B70:  DATA 72,3A
00B72:  DATA 20,53
00B74:  DATA 4D,46
00B76:  DATA 20,69
00B78:  DATA 73,20
00B7A:  DATA 6E,6F
00B7C:  DATA 74,20
00B7E:  DATA 63,6F
00B80:  DATA 6E,6E
00B82:  DATA 65,63
00B84:  DATA 74,65
00B86:  DATA 64,0D
00B88:  DATA 0A,00
00B8A:  DATA 52,45
00B8C:  DATA 41,44
00B8E:  DATA 20,44
00B90:  DATA 41,54
00B92:  DATA 41,20
00B94:  DATA 46,52
00B96:  DATA 4F,4D
00B98:  DATA 20,53
00B9A:  DATA 4D,46
00B9C:  DATA 2E,2E
00B9E:  DATA 2E,0D
00BA0:  DATA 0A,00
00BA2:  DATA 0D,0A
00BA4:  DATA 5F,5F
00BA6:  DATA 5F,45
00BA8:  DATA 6E,64
00BAA:  DATA 20,53
00BAC:  DATA 4D,46
00BAE:  DATA 20,52
00BB0:  DATA 65,61
00BB2:  DATA 64,5F
00BB4:  DATA 5F,5F
00BB6:  DATA 5F,0D
00BB8:  DATA 0A,00
00BBA:  DATA 5F,5F
00BBC:  DATA 5F,5F
00BBE:  DATA 5F,5F
00BC0:  DATA 5F,5F
00BC2:  DATA 5F,5F
00BC4:  DATA 5F,5F
00BC6:  DATA 5F,5F
00BC8:  DATA 5F,5F
00BCA:  DATA 5F,5F
00BCC:  DATA 5F,5F
00BCE:  DATA 0D,0A
00BD0:  DATA 0D,0A
00BD2:  DATA 00,00
00BD4:  DATA 0D,0A
00BD6:  DATA 5F,5F
00BD8:  DATA 5F,5F
00BDA:  DATA 5F,5F
00BDC:  DATA 5F,5F
00BDE:  DATA 5F,5F
00BE0:  DATA 5F,5F
00BE2:  DATA 5F,5F
00BE4:  DATA 5F,5F
00BE6:  DATA 5F,5F
00BE8:  DATA 5F,5F
00BEA:  DATA 0D,0A
00BEC:  DATA 00,00
00BEE:  DATA 5F,5F
00BF0:  DATA 5F,53
00BF2:  DATA 74,61
00BF4:  DATA 72,74
00BF6:  DATA 20,73
00BF8:  DATA 6D,66
00BFA:  DATA 5F,65
00BFC:  DATA 72,61
00BFE:  DATA 73,65
00C00:  DATA 5F,5F
00C02:  DATA 5F,5F
00C04:  DATA 0D,0A
00C06:  DATA 00,00
00C08:  DATA 49,6E
00C0A:  DATA 20,53
00C0C:  DATA 4D,46
00C0E:  DATA 20,6D
00C10:  DATA 69,73
00C12:  DATA 73,69
00C14:  DATA 6F,6E
00C16:  DATA 20,64
00C18:  DATA 61,74
00C1A:  DATA 61,20
00C1C:  DATA 73,74
00C1E:  DATA 61,72
00C20:  DATA 74,20
00C22:  DATA 20,20
00C24:  DATA 61,64
00C26:  DATA 64,72
00C28:  DATA 65,73
00C2A:  DATA 73,3A
00C2C:  DATA 20,25
00C2E:  DATA 4C,58
00C30:  DATA 0D,0A
00C32:  DATA 00,00
00C34:  DATA 49,6E
00C36:  DATA 20,53
00C38:  DATA 4D,46
00C3A:  DATA 20,6D
00C3C:  DATA 69,73
00C3E:  DATA 73,69
00C40:  DATA 6F,6E
00C42:  DATA 20,64
00C44:  DATA 61,74
00C46:  DATA 61,20
00C48:  DATA 65,6E
00C4A:  DATA 64,20
00C4C:  DATA 20,20
00C4E:  DATA 20,20
00C50:  DATA 61,64
00C52:  DATA 64,72
00C54:  DATA 65,73
00C56:  DATA 73,3A
00C58:  DATA 20,25
00C5A:  DATA 4C,58
00C5C:  DATA 0D,0A
00C5E:  DATA 00,00
00C60:  DATA 49,6E
00C62:  DATA 20,53
00C64:  DATA 4D,46
00C66:  DATA 20,45
00C68:  DATA 72,61
00C6A:  DATA 73,65
00C6C:  DATA 20,73
00C6E:  DATA 6F,75
00C70:  DATA 72,63
00C72:  DATA 65,20
00C74:  DATA 64,61
00C76:  DATA 74,61
00C78:  DATA 20,61
00C7A:  DATA 64,64
00C7C:  DATA 72,65
00C7E:  DATA 73,73
00C80:  DATA 3A,20
00C82:  DATA 25,4C
00C84:  DATA 58,0D
00C86:  DATA 0A,00
00C88:  DATA 49,6E
00C8A:  DATA 20,53
00C8C:  DATA 4D,46
00C8E:  DATA 20,45
00C90:  DATA 72,61
00C92:  DATA 73,65
00C94:  DATA 20,64
00C96:  DATA 61,74
00C98:  DATA 61,20
00C9A:  DATA 73,69
00C9C:  DATA 7A,65
00C9E:  DATA 20,20
00CA0:  DATA 20,20
00CA2:  DATA 20,20
00CA4:  DATA 20,20
00CA6:  DATA 20,20
00CA8:  DATA 3A,20
00CAA:  DATA 25,6C
00CAC:  DATA 75,20
00CAE:  DATA 28,30
00CB0:  DATA 78,25
00CB2:  DATA 6C,78
00CB4:  DATA 29,0D
00CB6:  DATA 0A,0D
00CB8:  DATA 0A,00
00CBA:  DATA 45,72
00CBC:  DATA 72,6F
00CBE:  DATA 72,3A
00CC0:  DATA 20,53
00CC2:  DATA 4D,46
00CC4:  DATA 20,69
00CC6:  DATA 73,20
00CC8:  DATA 6E,6F
00CCA:  DATA 74,20
00CCC:  DATA 63,6F
00CCE:  DATA 6E,6E
00CD0:  DATA 65,63
00CD2:  DATA 74,65
00CD4:  DATA 64,0D
00CD6:  DATA 0A,00
00CD8:  DATA 45,72
00CDA:  DATA 72,6F
00CDC:  DATA 72,3A
00CDE:  DATA 20,45
00CE0:  DATA 72,61
00CE2:  DATA 73,65
00CE4:  DATA 20,73
00CE6:  DATA 6F,75
00CE8:  DATA 72,63
00CEA:  DATA 65,20
00CEC:  DATA 61,64
00CEE:  DATA 64,72
00CF0:  DATA 65,73
00CF2:  DATA 73,20
00CF4:  DATA 30,78
00CF6:  DATA 25,4C
00CF8:  DATA 58,20
00CFA:  DATA 69,73
00CFC:  DATA 20,6F
00CFE:  DATA 75,74
00D00:  DATA 73,69
00D02:  DATA 64,65
00D04:  DATA 20,6D
00D06:  DATA 69,73
00D08:  DATA 73,69
00D0A:  DATA 6F,6E
00D0C:  DATA 20,72
00D0E:  DATA 61,6E
00D10:  DATA 67,65
00D12:  DATA 20,5B
00D14:  DATA 30,78
00D16:  DATA 25,4C
00D18:  DATA 58,20
00D1A:  DATA 2D,20
00D1C:  DATA 30,78
00D1E:  DATA 25,4C
00D20:  DATA 58,5D
00D22:  DATA 0D,0A
00D24:  DATA 00,00
00D26:  DATA 45,72
00D28:  DATA 72,6F
00D2A:  DATA 72,3A
00D2C:  DATA 20,45
00D2E:  DATA 72,61
00D30:  DATA 73,65
00D32:  DATA 20,6F
00D34:  DATA 70,65
00D36:  DATA 72,61
00D38:  DATA 74,69
00D3A:  DATA 6F,6E
00D3C:  DATA 20,77
00D3E:  DATA 6F,75
00D40:  DATA 6C,64
00D42:  DATA 20,65
00D44:  DATA 78,63
00D46:  DATA 65,65
00D48:  DATA 64,20
00D4A:  DATA 6D,69
00D4C:  DATA 73,73
00D4E:  DATA 69,6F
00D50:  DATA 6E,20
00D52:  DATA 65,6E
00D54:  DATA 64,20
00D56:  DATA 61,64
00D58:  DATA 64,72
00D5A:  DATA 65,73
00D5C:  DATA 73,20
00D5E:  DATA 30,78
00D60:  DATA 25,4C
00D62:  DATA 58,0D
00D64:  DATA 0A,00
00D66:  DATA 4C,69
00D68:  DATA 6D,69
00D6A:  DATA 74,69
00D6C:  DATA 6E,67
00D6E:  DATA 20,65
00D70:  DATA 72,61
00D72:  DATA 73,65
00D74:  DATA 20,73
00D76:  DATA 69,7A
00D78:  DATA 65,20
00D7A:  DATA 74,6F
00D7C:  DATA 20,73
00D7E:  DATA 74,61
00D80:  DATA 79,20
00D82:  DATA 77,69
00D84:  DATA 74,68
00D86:  DATA 69,6E
00D88:  DATA 20,6D
00D8A:  DATA 69,73
00D8C:  DATA 73,69
00D8E:  DATA 6F,6E
00D90:  DATA 20,62
00D92:  DATA 6F,75
00D94:  DATA 6E,64
00D96:  DATA 73,0D
00D98:  DATA 0A,00
00D9A:  DATA 45,72
00D9C:  DATA 61,73
00D9E:  DATA 65,20
00DA0:  DATA 6F,70
00DA2:  DATA 65,72
00DA4:  DATA 61,74
00DA6:  DATA 69,6F
00DA8:  DATA 6E,20
00DAA:  DATA 76,61
00DAC:  DATA 6C,69
00DAE:  DATA 64,61
00DB0:  DATA 74,65
00DB2:  DATA 64,20
00DB4:  DATA 77,69
00DB6:  DATA 74,68
00DB8:  DATA 69,6E
00DBA:  DATA 20,6D
00DBC:  DATA 69,73
00DBE:  DATA 73,69
00DC0:  DATA 6F,6E
00DC2:  DATA 20,72
00DC4:  DATA 61,6E
00DC6:  DATA 67,65
00DC8:  DATA 0D,0A
00DCA:  DATA 00,00
00DCC:  DATA 0D,0A
00DCE:  DATA 5F,5F
00DD0:  DATA 5F,45
00DD2:  DATA 6E,64
00DD4:  DATA 20,73
00DD6:  DATA 6D,66
00DD8:  DATA 5F,65
00DDA:  DATA 72,61
00DDC:  DATA 73,65
00DDE:  DATA 5F,5F
00DE0:  DATA 5F,5F
00DE2:  DATA 0D,0A
00DE4:  DATA 00,00
00DE6:  DATA 5F,5F
00DE8:  DATA 5F,5F
00DEA:  DATA 5F,5F
00DEC:  DATA 5F,5F
00DEE:  DATA 5F,5F
00DF0:  DATA 5F,5F
00DF2:  DATA 5F,5F
00DF4:  DATA 5F,5F
00DF6:  DATA 5F,5F
00DF8:  DATA 5F,5F
00DFA:  DATA 0D,0A
00DFC:  DATA 0D,0A
00DFE:  DATA 00,00
00E00:  DATA 45,72
00E02:  DATA 72,6F
00E04:  DATA 72,3A
00E06:  DATA 20,55
00E08:  DATA 6E,6B
00E0A:  DATA 6E,6F
00E0C:  DATA 77,6E
00E0E:  DATA 20,6D
00E10:  DATA 69,73
00E12:  DATA 73,69
00E14:  DATA 6F,6E
00E16:  DATA 5F,69
00E18:  DATA 64,3A
00E1A:  DATA 20,25
00E1C:  DATA 30,32
00E1E:  DATA 58,0D
00E20:  DATA 0A,00
00E22:  DATA 55,70
00E24:  DATA 64,61
00E26:  DATA 74,65
00E28:  DATA 64,20
00E2A:  DATA 70,61
00E2C:  DATA 72,74
00E2E:  DATA 69,74
00E30:  DATA 69,6F
00E32:  DATA 6E,20
00E34:  DATA 66,6F
00E36:  DATA 72,20
00E38:  DATA 6D,69
00E3A:  DATA 73,73
00E3C:  DATA 69,6F
00E3E:  DATA 6E,5F
00E40:  DATA 69,64
00E42:  DATA 20,25
00E44:  DATA 30,32
00E46:  DATA 58,3A
00E48:  DATA 20,75
00E4A:  DATA 73,65
00E4C:  DATA 64,5F
00E4E:  DATA 73,69
00E50:  DATA 7A,65
00E52:  DATA 3D,25
00E54:  DATA 6C,64
00E56:  DATA 2C,20
00E58:  DATA 6C,6F
00E5A:  DATA 6F,70
00E5C:  DATA 5F,63
00E5E:  DATA 6F,75
00E60:  DATA 6E,74
00E62:  DATA 65,72
00E64:  DATA 3D,25
00E66:  DATA 6C,64
00E68:  DATA 0D,0A
00E6A:  DATA 00,00
00E6C:  DATA 4D,49
00E6E:  DATA 53,53
00E70:  DATA 49,4F
00E72:  DATA 4E,20
00E74:  DATA 46,4C
00E76:  DATA 41,53
00E78:  DATA 48,20
00E7A:  DATA 49,6E
00E7C:  DATA 69,74
00E7E:  DATA 69,61
00E80:  DATA 6C,69
00E82:  DATA 7A,65
00E84:  DATA 0D,0A
00E86:  DATA 00,00
00E88:  DATA 09,5B
00E8A:  DATA 4D,49
00E8C:  DATA 53,20
00E8E:  DATA 46,4D
00E90:  DATA 5D,52
00E92:  DATA 45,41
00E94:  DATA 44,20
00E96:  DATA 49,44
00E98:  DATA 3A,00
00E9A:  DATA 09,5B
00E9C:  DATA 53,4D
00E9E:  DATA 46,5D
00EA0:  DATA 09,52
00EA2:  DATA 45,41
00EA4:  DATA 44,20
00EA6:  DATA 49,44
00EA8:  DATA 3A,00
00EAA:  DATA 09,5B
00EAC:  DATA 53,4D
00EAE:  DATA 46,5D
00EB0:  DATA 09,63
00EB2:  DATA 6F,6E
00EB4:  DATA 6E,65
00EB6:  DATA 63,74
00EB8:  DATA 20,65
00EBA:  DATA 72,72
00EBC:  DATA 6F,72
00EBE:  DATA 21,0D
00EC0:  DATA 0A,00
00EC2:  DATA 09,5B
00EC4:  DATA 53,4D
00EC6:  DATA 46,5D
00EC8:  DATA 09,69
00ECA:  DATA 73,20
00ECC:  DATA 63,6F
00ECE:  DATA 6E,6E
00ED0:  DATA 65,63
00ED2:  DATA 74,65
00ED4:  DATA 64,0D
00ED6:  DATA 0A,00
00ED8:  DATA 09,5B
00EDA:  DATA 4D,49
00EDC:  DATA 53,20
00EDE:  DATA 46,4D
00EE0:  DATA 5D,63
00EE2:  DATA 6F,6E
00EE4:  DATA 6E,65
00EE6:  DATA 63,74
00EE8:  DATA 20,65
00EEA:  DATA 72,72
00EEC:  DATA 6F,72
00EEE:  DATA 21,0D
00EF0:  DATA 0A,00
00EF2:  DATA 09,5B
00EF4:  DATA 4D,49
00EF6:  DATA 53,20
00EF8:  DATA 46,4D
00EFA:  DATA 5D,69
00EFC:  DATA 73,20
00EFE:  DATA 63,6F
00F00:  DATA 6E,6E
00F02:  DATA 65,63
00F04:  DATA 74,65
00F06:  DATA 64,0D
00F08:  DATA 0A,00
00F0A:  DATA 09,7C
00F0C:  DATA 20,53
00F0E:  DATA 4D,46
00F10:  DATA 20,20
00F12:  DATA 7C,20
00F14:  DATA 50,49
00F16:  DATA 43,4C
00F18:  DATA 4F,47
00F1A:  DATA 20,7C
00F1C:  DATA 20,55
00F1E:  DATA 73,65
00F20:  DATA 20,43
00F22:  DATA 6F,75
00F24:  DATA 6E,74
00F26:  DATA 65,72
00F28:  DATA 20,20
00F2A:  DATA 20,20
00F2C:  DATA 20,20
00F2E:  DATA 3A,20
00F30:  DATA 30,78
00F32:  DATA 25,30
00F34:  DATA 38,4C
00F36:  DATA 58,0D
00F38:  DATA 0A,00
00F3A:  DATA 09,7C
00F3C:  DATA 20,53
00F3E:  DATA 4D,46
00F40:  DATA 20,20
00F42:  DATA 7C,20
00F44:  DATA 50,49
00F46:  DATA 43,4C
00F48:  DATA 4F,47
00F4A:  DATA 20,7C
00F4C:  DATA 20,4C
00F4E:  DATA 6F,6F
00F50:  DATA 70,20
00F52:  DATA 43,6F
00F54:  DATA 75,6E
00F56:  DATA 74,65
00F58:  DATA 72,20
00F5A:  DATA 20,20
00F5C:  DATA 20,20
00F5E:  DATA 3A,20
00F60:  DATA 30,78
00F62:  DATA 25,30
00F64:  DATA 32,58
00F66:  DATA 0D,0A
00F68:  DATA 00,00
00F6A:  DATA 09,7C
00F6C:  DATA 20,53
00F6E:  DATA 4D,46
00F70:  DATA 20,20
00F72:  DATA 7C,20
00F74:  DATA 4D,45
00F76:  DATA 41,53
00F78:  DATA 20,20
00F7A:  DATA 20,7C
00F7C:  DATA 20,55
00F7E:  DATA 73,65
00F80:  DATA 20,43
00F82:  DATA 6F,75
00F84:  DATA 6E,74
00F86:  DATA 65,72
00F88:  DATA 20,20
00F8A:  DATA 20,20
00F8C:  DATA 20,20
00F8E:  DATA 3A,20
00F90:  DATA 30,78
00F92:  DATA 25,30
00F94:  DATA 38,4C
00F96:  DATA 58,0D
00F98:  DATA 0A,00
00F9A:  DATA 09,7C
00F9C:  DATA 20,53
00F9E:  DATA 4D,46
00FA0:  DATA 20,20
00FA2:  DATA 7C,20
00FA4:  DATA 4D,45
00FA6:  DATA 41,53
00FA8:  DATA 20,20
00FAA:  DATA 20,7C
00FAC:  DATA 20,4C
00FAE:  DATA 6F,6F
00FB0:  DATA 70,20
00FB2:  DATA 43,6F
00FB4:  DATA 75,6E
00FB6:  DATA 74,65
00FB8:  DATA 72,20
00FBA:  DATA 20,20
00FBC:  DATA 20,20
00FBE:  DATA 3A,20
00FC0:  DATA 30,78
00FC2:  DATA 25,30
00FC4:  DATA 32,58
00FC6:  DATA 0D,0A
00FC8:  DATA 00,00
00FCA:  DATA 09,7C
00FCC:  DATA 20,4D
00FCE:  DATA 49,53
00FD0:  DATA 46,20
00FD2:  DATA 7C,20
00FD4:  DATA 50,49
00FD6:  DATA 43,4C
00FD8:  DATA 4F,47
00FDA:  DATA 20,7C
00FDC:  DATA 20,55
00FDE:  DATA 73,65
00FE0:  DATA 20,43
00FE2:  DATA 6F,75
00FE4:  DATA 6E,74
00FE6:  DATA 65,72
00FE8:  DATA 20,20
00FEA:  DATA 20,20
00FEC:  DATA 20,20
00FEE:  DATA 3A,20
00FF0:  DATA 30,78
00FF2:  DATA 25,30
00FF4:  DATA 38,4C
00FF6:  DATA 58,0D
00FF8:  DATA 0A,00
00FFA:  DATA 09,7C
00FFC:  DATA 20,4D
00FFE:  DATA 49,53
01000:  DATA 46,20
01002:  DATA 7C,20
01004:  DATA 50,49
01006:  DATA 43,4C
01008:  DATA 4F,47
0100A:  DATA 20,7C
0100C:  DATA 20,55
0100E:  DATA 6E,63
01010:  DATA 6F,70
01012:  DATA 79,65
01014:  DATA 64,20
01016:  DATA 43,6F
01018:  DATA 75,6E
0101A:  DATA 74,65
0101C:  DATA 72,20
0101E:  DATA 3A,20
01020:  DATA 30,78
01022:  DATA 25,30
01024:  DATA 38,4C
01026:  DATA 58,0D
01028:  DATA 0A,00
0102A:  DATA 09,7C
0102C:  DATA 20,4D
0102E:  DATA 49,53
01030:  DATA 46,20
01032:  DATA 7C,20
01034:  DATA 50,49
01036:  DATA 43,4C
01038:  DATA 4F,47
0103A:  DATA 20,7C
0103C:  DATA 20,4C
0103E:  DATA 6F,6F
01040:  DATA 70,20
01042:  DATA 43,6F
01044:  DATA 75,6E
01046:  DATA 74,65
01048:  DATA 72,20
0104A:  DATA 20,20
0104C:  DATA 20,20
0104E:  DATA 3A,20
01050:  DATA 30,78
01052:  DATA 25,30
01054:  DATA 32,58
01056:  DATA 0D,0A
01058:  DATA 00,00
0105A:  DATA 09,7C
0105C:  DATA 20,4D
0105E:  DATA 49,53
01060:  DATA 46,20
01062:  DATA 7C,20
01064:  DATA 50,49
01066:  DATA 43,4C
01068:  DATA 4F,47
0106A:  DATA 20,7C
0106C:  DATA 20,57
0106E:  DATA 72,69
01070:  DATA 74,65
01072:  DATA 20,43
01074:  DATA 6F,75
01076:  DATA 6E,74
01078:  DATA 65,72
0107A:  DATA 20,20
0107C:  DATA 20,20
0107E:  DATA 3A,20
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 32,58
01086:  DATA 0D,0A
01088:  DATA 00,00
0108A:  DATA 09,7C
0108C:  DATA 20,4D
0108E:  DATA 49,53
01090:  DATA 46,20
01092:  DATA 7C,20
01094:  DATA 4D,45
01096:  DATA 41,53
01098:  DATA 20,20
0109A:  DATA 20,7C
0109C:  DATA 20,55
0109E:  DATA 73,65
010A0:  DATA 20,43
010A2:  DATA 6F,75
010A4:  DATA 6E,74
010A6:  DATA 65,72
010A8:  DATA 20,20
010AA:  DATA 20,20
010AC:  DATA 20,20
010AE:  DATA 3A,20
010B0:  DATA 30,78
010B2:  DATA 25,30
010B4:  DATA 38,4C
010B6:  DATA 58,0D
010B8:  DATA 0A,00
010BA:  DATA 09,7C
010BC:  DATA 20,4D
010BE:  DATA 49,53
010C0:  DATA 46,20
010C2:  DATA 7C,20
010C4:  DATA 4D,45
010C6:  DATA 41,53
010C8:  DATA 20,20
010CA:  DATA 20,7C
010CC:  DATA 20,55
010CE:  DATA 6E,63
010D0:  DATA 6F,70
010D2:  DATA 79,65
010D4:  DATA 64,20
010D6:  DATA 43,6F
010D8:  DATA 75,6E
010DA:  DATA 74,65
010DC:  DATA 72,20
010DE:  DATA 3A,20
010E0:  DATA 30,78
010E2:  DATA 25,30
010E4:  DATA 38,4C
010E6:  DATA 58,0D
010E8:  DATA 0A,00
010EA:  DATA 09,7C
010EC:  DATA 20,4D
010EE:  DATA 49,53
010F0:  DATA 46,20
010F2:  DATA 7C,20
010F4:  DATA 4D,45
010F6:  DATA 41,53
010F8:  DATA 20,20
010FA:  DATA 20,7C
010FC:  DATA 20,4C
010FE:  DATA 6F,6F
01100:  DATA 70,20
01102:  DATA 43,6F
01104:  DATA 75,6E
01106:  DATA 74,65
01108:  DATA 72,20
0110A:  DATA 20,20
0110C:  DATA 20,20
0110E:  DATA 3A,20
01110:  DATA 30,78
01112:  DATA 25,30
01114:  DATA 32,58
01116:  DATA 0D,0A
01118:  DATA 00,00
0111A:  DATA 09,43
0111C:  DATA 6F,6D
0111E:  DATA 70,6C
01120:  DATA 65,74
01122:  DATA 65,0D
01124:  DATA 0A,00
01126:  DATA 4D,69
01128:  DATA 73,73
0112A:  DATA 69,6F
0112C:  DATA 6E,20
0112E:  DATA 46,6C
01130:  DATA 61,73
01132:  DATA 68,20
01134:  DATA 69,73
01136:  DATA 20,6E
01138:  DATA 6F,74
0113A:  DATA 20,63
0113C:  DATA 6F,6E
0113E:  DATA 6E,65
01140:  DATA 63,74
01142:  DATA 65,64
01144:  DATA 0D,0A
01146:  DATA 00,00
01148:  DATA 4D,69
0114A:  DATA 73,73
0114C:  DATA 69,6F
0114E:  DATA 6E,20
01150:  DATA 46,6C
01152:  DATA 61,73
01154:  DATA 68,20
01156:  DATA 69,73
01158:  DATA 20,6E
0115A:  DATA 6F,74
0115C:  DATA 20,63
0115E:  DATA 6F,6E
01160:  DATA 6E,65
01162:  DATA 63,74
01164:  DATA 65,64
01166:  DATA 0D,0A
01168:  DATA 00,00
0116A:  DATA 0D,0A
0116C:  DATA 5F,5F
0116E:  DATA 5F,5F
01170:  DATA 5F,5F
01172:  DATA 5F,5F
01174:  DATA 5F,5F
01176:  DATA 5F,5F
01178:  DATA 5F,5F
0117A:  DATA 5F,5F
0117C:  DATA 5F,5F
0117E:  DATA 5F,5F
01180:  DATA 5F,5F
01182:  DATA 5F,5F
01184:  DATA 5F,5F
01186:  DATA 5F,5F
01188:  DATA 5F,5F
0118A:  DATA 0D,0A
0118C:  DATA 5F,5F
0118E:  DATA 5F,5F
01190:  DATA 5F,53
01192:  DATA 74,61
01194:  DATA 72,74
01196:  DATA 20,65
01198:  DATA 78,65
0119A:  DATA 63,75
0119C:  DATA 74,65
0119E:  DATA 5F,6D
011A0:  DATA 69,73
011A2:  DATA 73,69
011A4:  DATA 6F,6E
011A6:  DATA 5F,5F
011A8:  DATA 5F,5F
011AA:  DATA 5F,0D
011AC:  DATA 0A,0D
011AE:  DATA 0A,00
011B0:  DATA 43,6F
011B2:  DATA 6D,6D
011B4:  DATA 61,6E
011B6:  DATA 64,20
011B8:  DATA 49,44
011BA:  DATA 3A,20
011BC:  DATA 25,58
011BE:  DATA 0D,0A
011C0:  DATA 0D,0A
011C2:  DATA 00,00
011C4:  DATA 09,09
011C6:  DATA 2D,3E
011C8:  DATA 20,49
011CA:  DATA 6E,76
011CC:  DATA 61,6C
011CE:  DATA 69,64
011D0:  DATA 20,43
011D2:  DATA 4D,44
011D4:  DATA 20,49
011D6:  DATA 44,21
011D8:  DATA 0D,0A
011DA:  DATA 00,00
011DC:  DATA 0D,0A
011DE:  DATA 5F,5F
011E0:  DATA 5F,5F
011E2:  DATA 5F,5F
011E4:  DATA 45,6E
011E6:  DATA 64,20
011E8:  DATA 65,78
011EA:  DATA 65,63
011EC:  DATA 75,74
011EE:  DATA 65,5F
011F0:  DATA 6D,69
011F2:  DATA 73,73
011F4:  DATA 69,6F
011F6:  DATA 6E,5F
011F8:  DATA 5F,5F
011FA:  DATA 5F,5F
011FC:  DATA 5F,0D
011FE:  DATA 0A,5F
01200:  DATA 5F,5F
01202:  DATA 5F,5F
01204:  DATA 5F,5F
01206:  DATA 5F,5F
01208:  DATA 5F,5F
0120A:  DATA 5F,5F
0120C:  DATA 5F,5F
0120E:  DATA 5F,5F
01210:  DATA 5F,5F
01212:  DATA 5F,5F
01214:  DATA 5F,5F
01216:  DATA 5F,5F
01218:  DATA 5F,5F
0121A:  DATA 5F,5F
0121C:  DATA 5F,5F
0121E:  DATA 0D,0A
01220:  DATA 00,00
01222:  DATA 53,74
01224:  DATA 61,72
01226:  DATA 74,20
01228:  DATA 65,78
0122A:  DATA 65,63
0122C:  DATA 75,74
0122E:  DATA 65,5F
01230:  DATA 63,6F
01232:  DATA 6D,6D
01234:  DATA 61,6E
01236:  DATA 64,0D
01238:  DATA 0A,00
0123A:  DATA 09,2D
0123C:  DATA 3E,20
0123E:  DATA 55,70
01240:  DATA 6C,69
01242:  DATA 6E,6B
01244:  DATA 20,63
01246:  DATA 6F,6D
01248:  DATA 6D,61
0124A:  DATA 6E,64
0124C:  DATA 0D,0A
0124E:  DATA 00,00
01250:  DATA 09,20
01252:  DATA 20,20
01254:  DATA 54,72
01256:  DATA 61,6E
01258:  DATA 73,6D
0125A:  DATA 69,74
0125C:  DATA 20,41
0125E:  DATA 63,6B
01260:  DATA 6E,6F
01262:  DATA 6C,65
01264:  DATA 67,64
01266:  DATA 65,0D
01268:  DATA 0A,00
0126A:  DATA 09,2D
0126C:  DATA 3E,20
0126E:  DATA 53,74
01270:  DATA 61,74
01272:  DATA 75,73
01274:  DATA 20,63
01276:  DATA 68,65
01278:  DATA 63,6B
0127A:  DATA 0D,0A
0127C:  DATA 00,00
0127E:  DATA 09,20
01280:  DATA 20,20
01282:  DATA 54,72
01284:  DATA 61,6E
01286:  DATA 73,6D
01288:  DATA 69,74
0128A:  DATA 20,4D
0128C:  DATA 49,53
0128E:  DATA 20,4D
01290:  DATA 43,55
01292:  DATA 20,53
01294:  DATA 74,61
01296:  DATA 74,75
01298:  DATA 73,0D
0129A:  DATA 0A,00
0129C:  DATA 66,69
0129E:  DATA 6E,69
012A0:  DATA 73,68
012A2:  DATA 65,64
012A4:  DATA 20,69
012A6:  DATA 6E,20
012A8:  DATA 73,74
012AA:  DATA 61,74
012AC:  DATA 75,73
012AE:  DATA 5F,63
012B0:  DATA 68,65
012B2:  DATA 63,6B
012B4:  DATA 0D,0A
012B6:  DATA 00,00
012B8:  DATA 09,2D
012BA:  DATA 3E,20
012BC:  DATA 53,4D
012BE:  DATA 46,20
012C0:  DATA 61,76
012C2:  DATA 61,69
012C4:  DATA 6C,61
012C6:  DATA 62,6C
012C8:  DATA 65,20
012CA:  DATA 63,68
012CC:  DATA 65,63
012CE:  DATA 6B,0D
012D0:  DATA 0A,00
012D2:  DATA 09,20
012D4:  DATA 20,20
012D6:  DATA 54,72
012D8:  DATA 61,6E
012DA:  DATA 73,6D
012DC:  DATA 69,74
012DE:  DATA 20,41
012E0:  DATA 63,6B
012E2:  DATA 6E,6F
012E4:  DATA 77,6C
012E6:  DATA 65,64
012E8:  DATA 67,65
012EA:  DATA 6D,65
012EC:  DATA 6E,74
012EE:  DATA 0D,0A
012F0:  DATA 00,00
012F2:  DATA 09,09
012F4:  DATA 2D,3E
012F6:  DATA 20,61
012F8:  DATA 6C,6C
012FA:  DATA 6F,77
012FC:  DATA 65,64
012FE:  DATA 0D,0A
01300:  DATA 00,00
01302:  DATA 09,09
01304:  DATA 2D,3E
01306:  DATA 20,50
01308:  DATA 72,6F
0130A:  DATA 63,65
0130C:  DATA 73,73
0130E:  DATA 69,6E
01310:  DATA 67,20
01312:  DATA 53,4D
01314:  DATA 46,20
01316:  DATA 64,61
01318:  DATA 74,61
0131A:  DATA 20,5B
0131C:  DATA 25,64
0131E:  DATA 5D,0D
01320:  DATA 0A,00
01322:  DATA 66,75
01324:  DATA 6E,63
01326:  DATA 20,74
01328:  DATA 79,70
0132A:  DATA 65,20
0132C:  DATA 3A,20
0132E:  DATA 30,78
01330:  DATA 25,30
01332:  DATA 32,58
01334:  DATA 00,00
01336:  DATA 09,09
01338:  DATA 2D,3E
0133A:  DATA 20,45
0133C:  DATA 78,65
0133E:  DATA 63,75
01340:  DATA 74,69
01342:  DATA 6E,67
01344:  DATA 20,53
01346:  DATA 4D,46
01348:  DATA 20,57
0134A:  DATA 52,49
0134C:  DATA 54,45
0134E:  DATA 20,28
01350:  DATA 73,69
01352:  DATA 6E,67
01354:  DATA 6C,65
01356:  DATA 29,0D
01358:  DATA 0A,00
0135A:  DATA 09,09
0135C:  DATA 2D,3E
0135E:  DATA 20,45
01360:  DATA 78,65
01362:  DATA 63,75
01364:  DATA 74,69
01366:  DATA 6E,67
01368:  DATA 20,53
0136A:  DATA 4D,46
0136C:  DATA 20,52
0136E:  DATA 45,41
01370:  DATA 44,20
01372:  DATA 28,73
01374:  DATA 69,6E
01376:  DATA 67,6C
01378:  DATA 65,29
0137A:  DATA 0D,0A
0137C:  DATA 00,00
0137E:  DATA 09,09
01380:  DATA 2D,3E
01382:  DATA 20,45
01384:  DATA 78,65
01386:  DATA 63,75
01388:  DATA 74,69
0138A:  DATA 6E,67
0138C:  DATA 20,53
0138E:  DATA 4D,46
01390:  DATA 20,45
01392:  DATA 52,41
01394:  DATA 53,45
01396:  DATA 20,28
01398:  DATA 73,69
0139A:  DATA 6E,67
0139C:  DATA 6C,65
0139E:  DATA 29,0D
013A0:  DATA 0A,00
013A2:  DATA 09,09
013A4:  DATA 2D,3E
013A6:  DATA 20,55
013A8:  DATA 6E,6B
013AA:  DATA 6E,6F
013AC:  DATA 77,6E
013AE:  DATA 20,53
013B0:  DATA 4D,46
013B2:  DATA 20,66
013B4:  DATA 75,6E
013B6:  DATA 63,74
013B8:  DATA 69,6F
013BA:  DATA 6E,20
013BC:  DATA 74,79
013BE:  DATA 70,65
013C0:  DATA 0D,0A
013C2:  DATA 00,00
013C4:  DATA 09,09
013C6:  DATA 2D,3E
013C8:  DATA 20,45
013CA:  DATA 72,72
013CC:  DATA 6F,72
013CE:  DATA 3A,20
013D0:  DATA 46,61
013D2:  DATA 69,6C
013D4:  DATA 65,64
013D6:  DATA 20,74
013D8:  DATA 6F,20
013DA:  DATA 64,65
013DC:  DATA 71,75
013DE:  DATA 65,75
013E0:  DATA 65,20
013E2:  DATA 53,4D
013E4:  DATA 46,20
013E6:  DATA 64,61
013E8:  DATA 74,61
013EA:  DATA 0D,0A
013EC:  DATA 00,00
013EE:  DATA 09,09
013F0:  DATA 2D,3E
013F2:  DATA 20,43
013F4:  DATA 6F,6D
013F6:  DATA 70,6C
013F8:  DATA 65,74
013FA:  DATA 65,64
013FC:  DATA 20,70
013FE:  DATA 72,6F
01400:  DATA 63,65
01402:  DATA 73,73
01404:  DATA 69,6E
01406:  DATA 67,20
01408:  DATA 25,64
0140A:  DATA 20,53
0140C:  DATA 4D,46
0140E:  DATA 20,6F
01410:  DATA 70,65
01412:  DATA 72,61
01414:  DATA 74,69
01416:  DATA 6F,6E
01418:  DATA 73,0D
0141A:  DATA 0A,00
0141C:  DATA 09,09
0141E:  DATA 2D,3E
01420:  DATA 20,64
01422:  DATA 65,6E
01424:  DATA 69,65
01426:  DATA 64,0D
01428:  DATA 0A,00
0142A:  DATA 53,74
0142C:  DATA 61,72
0142E:  DATA 74,20
01430:  DATA 4D,4F
01432:  DATA 44,45
01434:  DATA 20,44
01436:  DATA 55,4D
01438:  DATA 4D,59
0143A:  DATA 0D,0A
0143C:  DATA 00,00
0143E:  DATA 09,4D
01440:  DATA 4F,44
01442:  DATA 45,20
01444:  DATA 20,20
01446:  DATA 20,20
01448:  DATA 3A,20
0144A:  DATA 25,30
0144C:  DATA 32,58
0144E:  DATA 0D,0A
01450:  DATA 00,00
01452:  DATA 09,50
01454:  DATA 61,72
01456:  DATA 61,6D
01458:  DATA 31,20
0145A:  DATA 20,20
0145C:  DATA 3A,20
0145E:  DATA 30,78
01460:  DATA 25,30
01462:  DATA 38,4C
01464:  DATA 58,0D
01466:  DATA 0A,00
01468:  DATA 09,50
0146A:  DATA 61,72
0146C:  DATA 61,6D
0146E:  DATA 32,20
01470:  DATA 20,20
01472:  DATA 3A,20
01474:  DATA 30,78
01476:  DATA 25,30
01478:  DATA 34,4C
0147A:  DATA 58,0D
0147C:  DATA 0A,00
0147E:  DATA 45,6E
01480:  DATA 64,20
01482:  DATA 4D,4F
01484:  DATA 44,45
01486:  DATA 20,44
01488:  DATA 55,4D
0148A:  DATA 4D,59
0148C:  DATA 0D,0A
0148E:  DATA 00,00
01490:  DATA 53,74
01492:  DATA 61,72
01494:  DATA 74,20
01496:  DATA 4D,4F
01498:  DATA 44,45
0149A:  DATA 20,54
0149C:  DATA 45,53
0149E:  DATA 54,20
014A0:  DATA 49,56
014A2:  DATA 0D,0A
014A4:  DATA 00,00
014A6:  DATA 09,53
014A8:  DATA 77,65
014AA:  DATA 65,70
014AC:  DATA 20,73
014AE:  DATA 74,65
014B0:  DATA 70,20
014B2:  DATA 3A,20
014B4:  DATA 25,75
014B6:  DATA 0D,0A
014B8:  DATA 00,00
014BA:  DATA 45,6E
014BC:  DATA 64,20
014BE:  DATA 4D,4F
014C0:  DATA 44,45
014C2:  DATA 20,54
014C4:  DATA 45,53
014C6:  DATA 54,20
014C8:  DATA 49,56
014CA:  DATA 0D,0A
014CC:  DATA 00,00
014CE:  DATA 53,74
014D0:  DATA 61,72
014D2:  DATA 74,20
014D4:  DATA 4D,4F
014D6:  DATA 44,45
014D8:  DATA 20,4D
014DA:  DATA 45,41
014DC:  DATA 53,20
014DE:  DATA 49,56
014E0:  DATA 0D,0A
014E2:  DATA 00,00
014E4:  DATA 09,49
014E6:  DATA 44,3A
014E8:  DATA 20,25
014EA:  DATA 30,32
014EC:  DATA 58,0D
014EE:  DATA 0A,00
014F0:  DATA 09,53
014F2:  DATA 6C,65
014F4:  DATA 65,70
014F6:  DATA 20,54
014F8:  DATA 69,6D
014FA:  DATA 65,3A
014FC:  DATA 20,25
014FE:  DATA 30,34
01500:  DATA 4C,58
01502:  DATA 20,6D
01504:  DATA 73,0D
01506:  DATA 0A,00
01508:  DATA 09,43
0150A:  DATA 75,72
0150C:  DATA 72,65
0150E:  DATA 6E,74
01510:  DATA 20,54
01512:  DATA 68,72
01514:  DATA 65,73
01516:  DATA 68,6F
01518:  DATA 6C,64
0151A:  DATA 3A,20
0151C:  DATA 25,30
0151E:  DATA 34,4C
01520:  DATA 58,20
01522:  DATA 6D,41
01524:  DATA 0D,0A
01526:  DATA 00,00
01528:  DATA 09,50
0152A:  DATA 44,20
0152C:  DATA 54,68
0152E:  DATA 72,65
01530:  DATA 73,68
01532:  DATA 6F,6C
01534:  DATA 64,3A
01536:  DATA 20,25
01538:  DATA 30,34
0153A:  DATA 4C,58
0153C:  DATA 20,6D
0153E:  DATA 41,0D
01540:  DATA 0A,00
01542:  DATA 09,43
01544:  DATA 75,72
01546:  DATA 72,65
01548:  DATA 6E,74
0154A:  DATA 20,4C
0154C:  DATA 69,6D
0154E:  DATA 69,74
01550:  DATA 3A,20
01552:  DATA 25,30
01554:  DATA 34,4C
01556:  DATA 58,20
01558:  DATA 6D,41
0155A:  DATA 0D,0A
0155C:  DATA 00,00
0155E:  DATA 09,4D
01560:  DATA 65,61
01562:  DATA 73,75
01564:  DATA 72,65
01566:  DATA 6D,65
01568:  DATA 6E,74
0156A:  DATA 20,54
0156C:  DATA 69,6D
0156E:  DATA 65,3A
01570:  DATA 20,25
01572:  DATA 30,34
01574:  DATA 4C,58
01576:  DATA 20,73
01578:  DATA 0D,0A
0157A:  DATA 00,00
0157C:  DATA 09,49
0157E:  DATA 73,20
01580:  DATA 46,69
01582:  DATA 6E,69
01584:  DATA 73,68
01586:  DATA 65,64
01588:  DATA 3A,20
0158A:  DATA 25,75
0158C:  DATA 0D,0A
0158E:  DATA 00,00
01590:  DATA 45,6E
01592:  DATA 64,20
01594:  DATA 4D,4F
01596:  DATA 44,45
01598:  DATA 20,4D
0159A:  DATA 45,41
0159C:  DATA 53,20
0159E:  DATA 49,56
015A0:  DATA 0D,0A
015A2:  DATA 00,00
015A4:  DATA 53,74
015A6:  DATA 61,72
015A8:  DATA 74,20
015AA:  DATA 46,6C
015AC:  DATA 61,73
015AE:  DATA 68,20
015B0:  DATA 45,72
015B2:  DATA 61,73
015B4:  DATA 65,20
015B6:  DATA 41,6C
015B8:  DATA 6C,0D
015BA:  DATA 0A,00
015BC:  DATA 45,6E
015BE:  DATA 64,20
015C0:  DATA 46,6C
015C2:  DATA 61,73
015C4:  DATA 68,20
015C6:  DATA 45,72
015C8:  DATA 61,73
015CA:  DATA 65,20
015CC:  DATA 41,6C
015CE:  DATA 6C,0D
015D0:  DATA 0A,00
015D2:  DATA 53,74
015D4:  DATA 61,72
015D6:  DATA 74,20
015D8:  DATA 46,6C
015DA:  DATA 61,73
015DC:  DATA 68,20
015DE:  DATA 45,72
015E0:  DATA 61,73
015E2:  DATA 65,20
015E4:  DATA 31,20
015E6:  DATA 53,65
015E8:  DATA 63,74
015EA:  DATA 6F,72
015EC:  DATA 0D,0A
015EE:  DATA 00,00
015F0:  DATA 09,53
015F2:  DATA 65,63
015F4:  DATA 74,6F
015F6:  DATA 72,20
015F8:  DATA 41,64
015FA:  DATA 64,72
015FC:  DATA 65,73
015FE:  DATA 73,3A
01600:  DATA 20,30
01602:  DATA 78,25
01604:  DATA 30,38
01606:  DATA 4C,58
01608:  DATA 0D,0A
0160A:  DATA 00,00
0160C:  DATA 45,6E
0160E:  DATA 64,20
01610:  DATA 46,6C
01612:  DATA 61,73
01614:  DATA 68,20
01616:  DATA 45,72
01618:  DATA 61,73
0161A:  DATA 65,20
0161C:  DATA 31,20
0161E:  DATA 53,65
01620:  DATA 63,74
01622:  DATA 6F,72
01624:  DATA 0D,0A
01626:  DATA 00,00
01628:  DATA 53,74
0162A:  DATA 61,72
0162C:  DATA 74,20
0162E:  DATA 46,6C
01630:  DATA 61,73
01632:  DATA 68,20
01634:  DATA 43,6F
01636:  DATA 70,79
01638:  DATA 20,31
0163A:  DATA 20,53
0163C:  DATA 65,63
0163E:  DATA 74,6F
01640:  DATA 72,0D
01642:  DATA 0A,00
01644:  DATA 09,53
01646:  DATA 75,62
01648:  DATA 73,65
0164A:  DATA 63,74
0164C:  DATA 6F,72
0164E:  DATA 20,41
01650:  DATA 64,64
01652:  DATA 72,65
01654:  DATA 73,73
01656:  DATA 3A,20
01658:  DATA 30,78
0165A:  DATA 25,30
0165C:  DATA 38,4C
0165E:  DATA 58,0D
01660:  DATA 0A,00
01662:  DATA 45,6E
01664:  DATA 64,20
01666:  DATA 46,6C
01668:  DATA 61,73
0166A:  DATA 68,20
0166C:  DATA 43,6F
0166E:  DATA 70,79
01670:  DATA 20,31
01672:  DATA 20,53
01674:  DATA 65,63
01676:  DATA 74,6F
01678:  DATA 72,0D
0167A:  DATA 0A,00
0167C:  DATA 53,74
0167E:  DATA 61,72
01680:  DATA 74,20
01682:  DATA 46,6C
01684:  DATA 61,73
01686:  DATA 68,20
01688:  DATA 45,72
0168A:  DATA 61,73
0168C:  DATA 65,20
0168E:  DATA 36,34
01690:  DATA 6B,42
01692:  DATA 79,74
01694:  DATA 65,20
01696:  DATA 53,75
01698:  DATA 62,73
0169A:  DATA 65,63
0169C:  DATA 74,6F
0169E:  DATA 72,0D
016A0:  DATA 0A,00
016A2:  DATA 09,53
016A4:  DATA 75,62
016A6:  DATA 73,65
016A8:  DATA 63,74
016AA:  DATA 6F,72
016AC:  DATA 20,41
016AE:  DATA 64,64
016B0:  DATA 72,65
016B2:  DATA 73,73
016B4:  DATA 3A,20
016B6:  DATA 30,78
016B8:  DATA 25,30
016BA:  DATA 38,4C
016BC:  DATA 58,0D
016BE:  DATA 0A,00
016C0:  DATA 45,6E
016C2:  DATA 64,20
016C4:  DATA 46,6C
016C6:  DATA 61,73
016C8:  DATA 68,20
016CA:  DATA 45,72
016CC:  DATA 61,73
016CE:  DATA 65,20
016D0:  DATA 36,34
016D2:  DATA 6B,42
016D4:  DATA 79,74
016D6:  DATA 65,20
016D8:  DATA 53,75
016DA:  DATA 62,73
016DC:  DATA 65,63
016DE:  DATA 74,6F
016E0:  DATA 72,0D
016E2:  DATA 0A,00
016E4:  DATA 53,74
016E6:  DATA 61,72
016E8:  DATA 74,20
016EA:  DATA 46,6C
016EC:  DATA 61,73
016EE:  DATA 68,20
016F0:  DATA 57,72
016F2:  DATA 69,74
016F4:  DATA 65,20
016F6:  DATA 44,65
016F8:  DATA 6D,6F
016FA:  DATA 0D,0A
016FC:  DATA 00,00
016FE:  DATA 09,4D
01700:  DATA 4F,44
01702:  DATA 45,20
01704:  DATA 20,20
01706:  DATA 20,20
01708:  DATA 3A,20
0170A:  DATA 25,30
0170C:  DATA 32,58
0170E:  DATA 0D,0A
01710:  DATA 00,00
01712:  DATA 09,41
01714:  DATA 64,64
01716:  DATA 72,65
01718:  DATA 73,73
0171A:  DATA 20,20
0171C:  DATA 3A,20
0171E:  DATA 30,78
01720:  DATA 25,30
01722:  DATA 38,4C
01724:  DATA 58,0D
01726:  DATA 0A,00
01728:  DATA 09,50
0172A:  DATA 61,63
0172C:  DATA 6B,65
0172E:  DATA 74,4E
01730:  DATA 75,6D
01732:  DATA 3A,20
01734:  DATA 30,78
01736:  DATA 25,30
01738:  DATA 34,4C
0173A:  DATA 58,0D
0173C:  DATA 0A,00
0173E:  DATA 57,72
01740:  DATA 69,74
01742:  DATA 65,20
01744:  DATA 44,61
01746:  DATA 74,61
01748:  DATA 0D,0A
0174A:  DATA 00,00
0174C:  DATA 45,6E
0174E:  DATA 64,20
01750:  DATA 46,6C
01752:  DATA 61,73
01754:  DATA 68,20
01756:  DATA 57,72
01758:  DATA 69,74
0175A:  DATA 65,20
0175C:  DATA 44,65
0175E:  DATA 6D,6F
01760:  DATA 0D,0A
01762:  DATA 00,00
01764:  DATA 53,74
01766:  DATA 61,72
01768:  DATA 74,20
0176A:  DATA 46,6C
0176C:  DATA 61,73
0176E:  DATA 68,20
01770:  DATA 57,72
01772:  DATA 69,74
01774:  DATA 65,20
01776:  DATA 34,6B
01778:  DATA 42,79
0177A:  DATA 74,65
0177C:  DATA 20,53
0177E:  DATA 75,62
01780:  DATA 73,65
01782:  DATA 63,74
01784:  DATA 6F,72
01786:  DATA 0D,0A
01788:  DATA 00,00
0178A:  DATA 45,6E
0178C:  DATA 64,20
0178E:  DATA 46,6C
01790:  DATA 61,73
01792:  DATA 68,20
01794:  DATA 57,72
01796:  DATA 69,74
01798:  DATA 65,20
0179A:  DATA 34,6B
0179C:  DATA 42,79
0179E:  DATA 74,65
017A0:  DATA 20,53
017A2:  DATA 75,62
017A4:  DATA 73,65
017A6:  DATA 63,74
017A8:  DATA 6F,72
017AA:  DATA 0D,0A
017AC:  DATA 00,00
017AE:  DATA 53,74
017B0:  DATA 61,72
017B2:  DATA 74,20
017B4:  DATA 46,6C
017B6:  DATA 61,73
017B8:  DATA 68,20
017BA:  DATA 52,65
017BC:  DATA 61,64
017BE:  DATA 0D,0A
017C0:  DATA 00,00
017C2:  DATA 09,4D
017C4:  DATA 4F,44
017C6:  DATA 45,20
017C8:  DATA 20,20
017CA:  DATA 20,20
017CC:  DATA 3A,20
017CE:  DATA 25,30
017D0:  DATA 32,58
017D2:  DATA 0D,0A
017D4:  DATA 00,00
017D6:  DATA 09,41
017D8:  DATA 64,64
017DA:  DATA 72,65
017DC:  DATA 73,73
017DE:  DATA 20,20
017E0:  DATA 3A,20
017E2:  DATA 30,78
017E4:  DATA 25,30
017E6:  DATA 38,4C
017E8:  DATA 58,0D
017EA:  DATA 0A,00
017EC:  DATA 09,50
017EE:  DATA 61,63
017F0:  DATA 6B,65
017F2:  DATA 74,4E
017F4:  DATA 75,6D
017F6:  DATA 3A,20
017F8:  DATA 30,78
017FA:  DATA 25,30
017FC:  DATA 34,4C
017FE:  DATA 58,0D
01800:  DATA 0A,00
01802:  DATA 52,45
01804:  DATA 41,44
01806:  DATA 20,44
01808:  DATA 41,54
0180A:  DATA 41,0D
0180C:  DATA 0A,00
0180E:  DATA 4D,69
01810:  DATA 73,73
01812:  DATA 69,6F
01814:  DATA 6E,20
01816:  DATA 46,6C
01818:  DATA 61,73
0181A:  DATA 68,20
0181C:  DATA 69,73
0181E:  DATA 20,6E
01820:  DATA 6F,74
01822:  DATA 20,63
01824:  DATA 6F,6E
01826:  DATA 6E,65
01828:  DATA 63,74
0182A:  DATA 65,64
0182C:  DATA 0D,0A
0182E:  DATA 00,00
01830:  DATA 45,6E
01832:  DATA 64,20
01834:  DATA 46,6C
01836:  DATA 61,73
01838:  DATA 68,20
0183A:  DATA 52,65
0183C:  DATA 61,64
0183E:  DATA 0D,0A
01840:  DATA 00,00
01842:  DATA 53,74
01844:  DATA 61,72
01846:  DATA 74,20
01848:  DATA 46,6C
0184A:  DATA 61,73
0184C:  DATA 68,20
0184E:  DATA 52,65
01850:  DATA 61,64
01852:  DATA 20,41
01854:  DATA 64,64
01856:  DATA 72,65
01858:  DATA 73,73
0185A:  DATA 0D,0A
0185C:  DATA 00,00
0185E:  DATA 52,65
01860:  DATA 61,64
01862:  DATA 20,44
01864:  DATA 61,74
01866:  DATA 61,3A
01868:  DATA 20,25
0186A:  DATA 30,32
0186C:  DATA 58,20
0186E:  DATA 25,30
01870:  DATA 32,58
01872:  DATA 20,25
01874:  DATA 30,32
01876:  DATA 58,20
01878:  DATA 25,30
0187A:  DATA 32,58
0187C:  DATA 0D,0A
0187E:  DATA 00,00
01880:  DATA 45,6E
01882:  DATA 64,20
01884:  DATA 46,6C
01886:  DATA 61,73
01888:  DATA 68,20
0188A:  DATA 52,65
0188C:  DATA 61,64
0188E:  DATA 20,41
01890:  DATA 64,64
01892:  DATA 72,65
01894:  DATA 73,73
01896:  DATA 0D,0A
01898:  DATA 00,00
0189A:  DATA 53,74
0189C:  DATA 61,72
0189E:  DATA 74,20
018A0:  DATA 46,6C
018A2:  DATA 61,73
018A4:  DATA 68,20
018A6:  DATA 45,72
018A8:  DATA 61,73
018AA:  DATA 65,20
018AC:  DATA 61,6E
018AE:  DATA 64,20
018B0:  DATA 52,65
018B2:  DATA 73,65
018B4:  DATA 74,0D
018B6:  DATA 0A,00
018B8:  DATA 45,6E
018BA:  DATA 64,20
018BC:  DATA 46,6C
018BE:  DATA 61,73
018C0:  DATA 68,20
018C2:  DATA 45,72
018C4:  DATA 61,73
018C6:  DATA 65,20
018C8:  DATA 61,6E
018CA:  DATA 64,20
018CC:  DATA 52,65
018CE:  DATA 73,65
018D0:  DATA 74,0D
018D2:  DATA 0A,00
018D4:  DATA 53,74
018D6:  DATA 61,72
018D8:  DATA 74,20
018DA:  DATA 46,6C
018DC:  DATA 61,73
018DE:  DATA 68,20
018E0:  DATA 41,64
018E2:  DATA 64,72
018E4:  DATA 65,73
018E6:  DATA 73,20
018E8:  DATA 52,65
018EA:  DATA 73,65
018EC:  DATA 74,0D
018EE:  DATA 0A,00
018F0:  DATA 45,6E
018F2:  DATA 64,20
018F4:  DATA 46,6C
018F6:  DATA 61,73
018F8:  DATA 68,20
018FA:  DATA 41,64
018FC:  DATA 64,72
018FE:  DATA 65,73
01900:  DATA 73,20
01902:  DATA 52,65
01904:  DATA 73,65
01906:  DATA 74,0D
01908:  DATA 0A,00
0190A:  DATA 53,74
0190C:  DATA 61,72
0190E:  DATA 74,20
01910:  DATA 46,6C
01912:  DATA 61,73
01914:  DATA 68,20
01916:  DATA 53,4D
01918:  DATA 46,20
0191A:  DATA 43,6F
0191C:  DATA 70,79
0191E:  DATA 0D,0A
01920:  DATA 00,00
01922:  DATA 45,6E
01924:  DATA 64,20
01926:  DATA 46,6C
01928:  DATA 61,73
0192A:  DATA 68,20
0192C:  DATA 53,4D
0192E:  DATA 46,20
01930:  DATA 43,6F
01932:  DATA 70,79
01934:  DATA 0D,0A
01936:  DATA 00,00
01938:  DATA 53,74
0193A:  DATA 61,72
0193C:  DATA 74,20
0193E:  DATA 46,6C
01940:  DATA 61,73
01942:  DATA 68,20
01944:  DATA 53,4D
01946:  DATA 46,20
01948:  DATA 52,65
0194A:  DATA 61,64
0194C:  DATA 0D,0A
0194E:  DATA 00,00
01950:  DATA 52,65
01952:  DATA 61,64
01954:  DATA 20,44
01956:  DATA 61,74
01958:  DATA 61,3A
0195A:  DATA 20,00
0195C:  DATA 0D,0A
0195E:  DATA 45,6E
01960:  DATA 64,20
01962:  DATA 46,6C
01964:  DATA 61,73
01966:  DATA 68,20
01968:  DATA 53,4D
0196A:  DATA 46,20
0196C:  DATA 52,65
0196E:  DATA 61,64
01970:  DATA 0D,0A
01972:  DATA 00,00
01974:  DATA 53,74
01976:  DATA 61,72
01978:  DATA 74,20
0197A:  DATA 46,6C
0197C:  DATA 61,73
0197E:  DATA 68,20
01980:  DATA 53,4D
01982:  DATA 46,20
01984:  DATA 45,72
01986:  DATA 61,73
01988:  DATA 65,0D
0198A:  DATA 0A,00
0198C:  DATA 45,6E
0198E:  DATA 64,20
01990:  DATA 46,6C
01992:  DATA 61,73
01994:  DATA 68,20
01996:  DATA 53,4D
01998:  DATA 46,20
0199A:  DATA 45,72
0199C:  DATA 61,73
0199E:  DATA 65,0D
019A0:  DATA 0A,00
019A2:  DATA 53,74
019A4:  DATA 61,72
019A6:  DATA 74,20
019A8:  DATA 46,6C
019AA:  DATA 61,73
019AC:  DATA 68,20
019AE:  DATA 41,64
019B0:  DATA 64,72
019B2:  DATA 65,73
019B4:  DATA 73,20
019B6:  DATA 52,65
019B8:  DATA 73,65
019BA:  DATA 74,0D
019BC:  DATA 0A,00
019BE:  DATA 45,6E
019C0:  DATA 64,20
019C2:  DATA 46,6C
019C4:  DATA 61,73
019C6:  DATA 68,20
019C8:  DATA 41,64
019CA:  DATA 64,72
019CC:  DATA 65,73
019CE:  DATA 73,20
019D0:  DATA 52,65
019D2:  DATA 73,65
019D4:  DATA 74,0D
019D6:  DATA 0A,00
019D8:  DATA 53,4D
019DA:  DATA 46,20
019DC:  DATA 69,73
019DE:  DATA 20,6E
019E0:  DATA 6F,74
019E2:  DATA 20,63
019E4:  DATA 6F,6E
019E6:  DATA 6E,65
019E8:  DATA 63,74
019EA:  DATA 65,64
019EC:  DATA 0D,0A
019EE:  DATA 00,00
019F0:  DATA 53,74
019F2:  DATA 61,72
019F4:  DATA 74,20
019F6:  DATA 46,6C
019F8:  DATA 61,73
019FA:  DATA 68,20
019FC:  DATA 53,4D
019FE:  DATA 46,20
01A00:  DATA 52,65
01A02:  DATA 61,64
01A04:  DATA 20,46
01A06:  DATA 6F,72
01A08:  DATA 63,65
01A0A:  DATA 0D,0A
01A0C:  DATA 00,00
01A0E:  DATA 09,41
01A10:  DATA 64,64
01A12:  DATA 72,65
01A14:  DATA 73,73
01A16:  DATA 20,20
01A18:  DATA 3A,20
01A1A:  DATA 30,78
01A1C:  DATA 25,30
01A1E:  DATA 38,4C
01A20:  DATA 58,0D
01A22:  DATA 0A,00
01A24:  DATA 09,50
01A26:  DATA 61,63
01A28:  DATA 6B,65
01A2A:  DATA 74,4E
01A2C:  DATA 75,6D
01A2E:  DATA 3A,20
01A30:  DATA 30,78
01A32:  DATA 25,30
01A34:  DATA 34,4C
01A36:  DATA 58,0D
01A38:  DATA 0A,00
01A3A:  DATA 72,65
01A3C:  DATA 61,64
01A3E:  DATA 20,64
01A40:  DATA 61,74
01A42:  DATA 61,0D
01A44:  DATA 0A,00
01A46:  DATA 0D,0A
01A48:  DATA 45,6E
01A4A:  DATA 64,20
01A4C:  DATA 46,6C
01A4E:  DATA 61,73
01A50:  DATA 68,20
01A52:  DATA 53,4D
01A54:  DATA 46,20
01A56:  DATA 52,65
01A58:  DATA 61,64
01A5A:  DATA 20,46
01A5C:  DATA 6F,72
01A5E:  DATA 63,65
01A60:  DATA 0D,0A
01A62:  DATA 00,00
01A64:  DATA 53,74
01A66:  DATA 61,72
01A68:  DATA 74,20
01A6A:  DATA 53,4D
01A6C:  DATA 46,20
01A6E:  DATA 45,72
01A70:  DATA 61,73
01A72:  DATA 65,20
01A74:  DATA 41,6C
01A76:  DATA 6C,0D
01A78:  DATA 0A,00
01A7A:  DATA 45,6E
01A7C:  DATA 64,20
01A7E:  DATA 53,4D
01A80:  DATA 46,20
01A82:  DATA 45,72
01A84:  DATA 61,73
01A86:  DATA 65,20
01A88:  DATA 41,6C
01A8A:  DATA 6C,0D
01A8C:  DATA 0A,00
01A8E:  DATA 53,74
01A90:  DATA 61,72
01A92:  DATA 74,20
01A94:  DATA 53,4D
01A96:  DATA 46,20
01A98:  DATA 52,65
01A9A:  DATA 73,65
01A9C:  DATA 74,0D
01A9E:  DATA 0A,00
01AA0:  DATA 45,6E
01AA2:  DATA 64,20
01AA4:  DATA 53,4D
01AA6:  DATA 46,20
01AA8:  DATA 52,65
01AAA:  DATA 73,65
01AAC:  DATA 74,0D
01AAE:  DATA 0A,00
01AB0:  DATA 0D,0A
01AB2:  DATA 0D,0A
01AB4:  DATA 0D,0A
01AB6:  DATA 3D,3D
01AB8:  DATA 3D,3D
01ABA:  DATA 3D,3D
01ABC:  DATA 3D,3D
01ABE:  DATA 3D,3D
01AC0:  DATA 3D,3D
01AC2:  DATA 3D,3D
01AC4:  DATA 3D,3D
01AC6:  DATA 3D,3D
01AC8:  DATA 3D,3D
01ACA:  DATA 3D,3D
01ACC:  DATA 3D,3D
01ACE:  DATA 3D,3D
01AD0:  DATA 3D,3D
01AD2:  DATA 3D,3D
01AD4:  DATA 3D,3D
01AD6:  DATA 3D,3D
01AD8:  DATA 3D,3D
01ADA:  DATA 3D,3D
01ADC:  DATA 3D,3D
01ADE:  DATA 3D,3D
01AE0:  DATA 3D,3D
01AE2:  DATA 3D,3D
01AE4:  DATA 3D,3D
01AE6:  DATA 3D,3D
01AE8:  DATA 3D,3D
01AEA:  DATA 3D,3D
01AEC:  DATA 3D,3D
01AEE:  DATA 3D,3D
01AF0:  DATA 3D,3D
01AF2:  DATA 0D,0A
01AF4:  DATA 00,00
01AF6:  DATA 54,68
01AF8:  DATA 69,73
01AFA:  DATA 20,69
01AFC:  DATA 73,20
01AFE:  DATA 4D,4F
01B00:  DATA 4D,49
01B02:  DATA 4A,49
01B04:  DATA 20,43
01B06:  DATA 49,47
01B08:  DATA 53,20
01B0A:  DATA 50,49
01B0C:  DATA 43,20
01B0E:  DATA 42,42
01B10:  DATA 4D,20
01B12:  DATA 66,6F
01B14:  DATA 72,20
01B16:  DATA 4D,49
01B18:  DATA 53,37
01B1A:  DATA 5F,42
01B1C:  DATA 42,4D
01B1E:  DATA 34,2E
01B20:  DATA 0D,0A
01B22:  DATA 00,00
01B24:  DATA 4C,61
01B26:  DATA 73,74
01B28:  DATA 20,75
01B2A:  DATA 70,64
01B2C:  DATA 61,74
01B2E:  DATA 65,64
01B30:  DATA 20,6F
01B32:  DATA 6E,20
01B34:  DATA 25,73
01B36:  DATA 20,25
01B38:  DATA 73,2C
01B3A:  DATA 20,62
01B3C:  DATA 79,20
01B3E:  DATA 49,6E
01B40:  DATA 6F,75
01B42:  DATA 65,2E
01B44:  DATA 0D,0A
01B46:  DATA 0D,0A
01B48:  DATA 00,00
01B4A:  DATA 34,2D
01B4C:  DATA 41,75
01B4E:  DATA 67,2D
01B50:  DATA 32,35
01B52:  DATA 00,00
01B54:  DATA 31,35
01B56:  DATA 3A,35
01B58:  DATA 35,3A
01B5A:  DATA 34,34
01B5C:  DATA 00,00
01B5E:  DATA 5F,5F
01B60:  DATA 5F,5F
01B62:  DATA 43,49
01B64:  DATA 47,53
01B66:  DATA 20,50
01B68:  DATA 49,43
01B6A:  DATA 20,53
01B6C:  DATA 74,61
01B6E:  DATA 72,74
01B70:  DATA 20,4F
01B72:  DATA 70,65
01B74:  DATA 72,61
01B76:  DATA 74,69
01B78:  DATA 6F,6E
01B7A:  DATA 5F,5F
01B7C:  DATA 5F,5F
01B7E:  DATA 5F,0D
01B80:  DATA 0A,0D
01B82:  DATA 0A,00
01B84:  DATA 77,61
01B86:  DATA 69,74
01B88:  DATA 69,6E
01B8A:  DATA 67,20
01B8C:  DATA 66,6F
01B8E:  DATA 72,20
01B90:  DATA 42,4F
01B92:  DATA 53,53
01B94:  DATA 20,50
01B96:  DATA 49,43
01B98:  DATA 20,63
01B9A:  DATA 6F,6D
01B9C:  DATA 6D,61
01B9E:  DATA 6E,64
01BA0:  DATA 00,00
01BA2:  DATA 0D,0A
01BA4:  DATA 77,61
01BA6:  DATA 69,74
01BA8:  DATA 69,6E
01BAA:  DATA 67,20
01BAC:  DATA 66,6F
01BAE:  DATA 72,20
01BB0:  DATA 42,4F
01BB2:  DATA 53,53
01BB4:  DATA 20,50
01BB6:  DATA 49,43
01BB8:  DATA 20,63
01BBA:  DATA 6F,6D
01BBC:  DATA 6D,61
01BBE:  DATA 6E,64
01BC0:  DATA 00,00
01BC2:  DATA 0D,0A
01BC4:  DATA 0D,0A
01BC6:  DATA 3D,3D
01BC8:  DATA 3D,3D
01BCA:  DATA 3D,3D
01BCC:  DATA 0D,0A
01BCE:  DATA 0D,0A
01BD0:  DATA 46,69
01BD2:  DATA 6E,69
01BD4:  DATA 73,68
01BD6:  DATA 65,64
01BD8:  DATA 20,70
01BDA:  DATA 72,6F
01BDC:  DATA 63,65
01BDE:  DATA 73,73
01BE0:  DATA 2E,0D
01BE2:  DATA 0A,57
01BE4:  DATA 61,69
01BE6:  DATA 74,20
01BE8:  DATA 66,6F
01BEA:  DATA 72,20
01BEC:  DATA 42,4F
01BEE:  DATA 53,53
01BF0:  DATA 20,50
01BF2:  DATA 49,43
01BF4:  DATA 20,74
01BF6:  DATA 75,72
01BF8:  DATA 6E,20
01BFA:  DATA 6F,66
01BFC:  DATA 66,20
01BFE:  DATA 6D,65
01C00:  DATA 00,00
01C02:  DATA 45,6E
01C04:  DATA 64,20
01C06:  DATA 6D,61
01C08:  DATA 69,6E
01C0A:  DATA 0D,0A
01C0C:  DATA 00,00
*
01C8E:  TBLRD*+
01C90:  MOVF   FF5,F
01C92:  BTFSC  FD8.2
01C94:  GOTO   1CBC
01C98:  MOVFF  FF6,A26
01C9C:  MOVFF  FF7,A27
01CA0:  MOVFF  FF8,A28
01CA4:  MOVFF  FF5,A29
01CA8:  CALL   1C3C
01CAC:  MOVFF  A26,FF6
01CB0:  MOVFF  A27,FF7
01CB4:  MOVFF  A28,FF8
01CB8:  GOTO   1C8E
01CBC:  RETURN 0
01CBE:  TBLRD*+
01CC0:  MOVFF  FF6,997
01CC4:  MOVFF  FF7,998
01CC8:  MOVFF  FF8,999
01CCC:  MOVFF  FF5,A29
01CD0:  CALL   1C3C
01CD4:  MOVFF  997,FF6
01CD8:  MOVFF  998,FF7
01CDC:  MOVFF  999,FF8
01CE0:  MOVLB  9
01CE2:  DECFSZ x96,F
01CE4:  BRA    1CEA
01CE6:  BRA    1CF0
01CE8:  MOVLB  0
01CEA:  MOVLB  0
01CEC:  GOTO   1CBE
01CF0:  MOVLB  0
01CF2:  RETURN 0
*
01EBC:  MOVLB  9
01EBE:  BTFSS  x97.7
01EC0:  BRA    1EC8
01EC2:  MOVLB  0
01EC4:  GOTO   1EF8
01EC8:  MOVLW  0F
01ECA:  MOVWF  00
01ECC:  SWAPF  x96,W
01ECE:  ANDWF  00,F
01ED0:  MOVLW  0A
01ED2:  SUBWF  00,W
01ED4:  BTFSS  FD8.0
01ED6:  BRA    1EDE
01ED8:  MOVLB  0
01EDA:  GOTO   1EE8
01EDE:  MOVLW  30
01EE0:  ADDWF  00,F
01EE2:  MOVLB  0
01EE4:  GOTO   1EF0
01EE8:  MOVLB  9
01EEA:  MOVF   x97,W
01EEC:  ADDWF  00,F
01EEE:  MOVLB  0
01EF0:  MOVFF  00,A29
01EF4:  CALL   1C3C
01EF8:  MOVLW  0F
01EFA:  MOVLB  9
01EFC:  ANDWF  x96,F
01EFE:  MOVLW  0A
01F00:  SUBWF  x96,W
01F02:  BTFSS  FD8.0
01F04:  BRA    1F0C
01F06:  MOVLB  0
01F08:  GOTO   1F14
01F0C:  MOVLW  30
01F0E:  MOVLB  0
01F10:  GOTO   1F1C
01F14:  MOVLB  9
01F16:  BCF    x97.7
01F18:  MOVF   x97,W
01F1A:  MOVLB  0
01F1C:  MOVLB  9
01F1E:  ADDWF  x96,F
01F20:  MOVFF  996,A29
01F24:  MOVLB  0
01F26:  CALL   1C3C
01F2A:  RETURN 0
*
02024:  MOVLB  A
02026:  MOVF   x44,W
02028:  ANDLW  07
0202A:  MOVWF  00
0202C:  RRCF   x44,W
0202E:  MOVWF  01
02030:  RRCF   01,F
02032:  RRCF   01,F
02034:  MOVLW  1F
02036:  ANDWF  01,F
02038:  MOVF   01,W
0203A:  ADDWF  x46,W
0203C:  MOVWF  FE9
0203E:  MOVLW  00
02040:  ADDWFC x47,W
02042:  MOVWF  FEA
02044:  CLRF   01
02046:  INCF   01,F
02048:  INCF   00,F
0204A:  MOVLB  0
0204C:  GOTO   2052
02050:  RLCF   01,F
02052:  DECFSZ 00,F
02054:  GOTO   2050
02058:  MOVLB  A
0205A:  MOVF   x45,F
0205C:  BTFSS  FD8.2
0205E:  BRA    2066
02060:  MOVLB  0
02062:  GOTO   2070
02066:  MOVF   01,W
02068:  IORWF  FEF,F
0206A:  MOVLB  0
0206C:  GOTO   2076
02070:  COMF   01,F
02072:  MOVF   01,W
02074:  ANDWF  FEF,F
02076:  RETURN 0
*
04252:  TSTFSZ 01
04254:  GOTO   4262
04258:  TSTFSZ 02
0425A:  GOTO   4264
0425E:  GOTO   4274
04262:  INCF   02,F
04264:  MOVFF  00,FEE
04268:  DECFSZ 01,F
0426A:  GOTO   4264
0426E:  DECFSZ 02,F
04270:  GOTO   4264
04274:  RETURN 0
*
063D8:  MOVLB  2
063DA:  MOVF   x75,W
063DC:  CLRF   01
063DE:  SUBWF  x74,W
063E0:  BTFSS  FD8.0
063E2:  BRA    63EA
063E4:  MOVLB  0
063E6:  GOTO   63F4
063EA:  MOVF   x74,W
063EC:  MOVWF  00
063EE:  MOVLB  0
063F0:  GOTO   641E
063F4:  CLRF   00
063F6:  MOVLW  08
063F8:  MOVLB  2
063FA:  MOVWF  x76
063FC:  MOVLB  0
063FE:  MOVLB  2
06400:  RLCF   x74,F
06402:  RLCF   00,F
06404:  MOVF   x75,W
06406:  SUBWF  00,W
06408:  BTFSC  FD8.0
0640A:  MOVWF  00
0640C:  RLCF   01,F
0640E:  DECFSZ x76,F
06410:  BRA    6416
06412:  BRA    641C
06414:  MOVLB  0
06416:  MOVLB  0
06418:  GOTO   63FE
0641C:  MOVLB  0
0641E:  RETURN 0
06420:  MOVF   01,W
06422:  MOVFF  1EB,274
06426:  MOVLW  64
06428:  MOVLB  2
0642A:  MOVWF  x75
0642C:  MOVLB  0
0642E:  CALL   63D8
06432:  MOVFF  00,1EB
06436:  MOVF   01,W
06438:  MOVLW  30
0643A:  BTFSS  FD8.2
0643C:  GOTO   6460
06440:  MOVLB  1
06442:  BTFSC  xEC.1
06444:  BRA    644C
06446:  MOVLB  0
06448:  GOTO   6474
0644C:  BTFSS  xEC.3
0644E:  BRA    6456
06450:  MOVLB  0
06452:  GOTO   6474
06456:  BTFSC  xEC.4
06458:  MOVLW  20
0645A:  MOVLB  0
0645C:  GOTO   646A
06460:  MOVLB  1
06462:  BCF    xEC.3
06464:  BCF    xEC.4
06466:  BSF    xEC.0
06468:  MOVLB  0
0646A:  ADDWF  01,F
0646C:  MOVFF  01,A29
06470:  CALL   1C3C
06474:  MOVFF  1EB,274
06478:  MOVLW  0A
0647A:  MOVLB  2
0647C:  MOVWF  x75
0647E:  MOVLB  0
06480:  CALL   63D8
06484:  MOVFF  00,1EB
06488:  MOVF   01,W
0648A:  MOVLW  30
0648C:  BTFSS  FD8.2
0648E:  GOTO   64AE
06492:  MOVLB  1
06494:  BTFSS  xEC.3
06496:  BRA    649E
06498:  MOVLB  0
0649A:  GOTO   64B8
0649E:  BTFSC  xEC.0
064A0:  BRA    64A8
064A2:  MOVLB  0
064A4:  GOTO   64B8
064A8:  BTFSC  xEC.4
064AA:  MOVLW  20
064AC:  MOVLB  0
064AE:  ADDWF  01,F
064B0:  MOVFF  01,A29
064B4:  CALL   1C3C
064B8:  MOVLW  30
064BA:  MOVLB  1
064BC:  ADDWF  xEB,F
064BE:  MOVFF  1EB,A29
064C2:  MOVLB  0
064C4:  CALL   1C3C
064C8:  RETURN 0
*
0669A:  BTFSC  FD8.1
0669C:  GOTO   66A8
066A0:  MOVLW  09
066A2:  MOVWF  FEA
066A4:  MOVLW  AF
066A6:  MOVWF  FE9
066A8:  CLRF   00
066AA:  CLRF   01
066AC:  CLRF   02
066AE:  CLRF   03
066B0:  MOVLB  9
066B2:  CLRF   xAF
066B4:  CLRF   xB0
066B6:  CLRF   xB1
066B8:  CLRF   xB2
066BA:  MOVF   xAE,W
066BC:  IORWF  xAD,W
066BE:  IORWF  xAC,W
066C0:  IORWF  xAB,W
066C2:  BTFSS  FD8.2
066C4:  BRA    66CC
066C6:  MOVLB  0
066C8:  GOTO   675C
066CC:  MOVLB  0
066CE:  MOVLW  20
066D0:  MOVLB  9
066D2:  MOVWF  xB3
066D4:  MOVLB  0
066D6:  BCF    FD8.0
066D8:  MOVLB  9
066DA:  RLCF   xA7,F
066DC:  RLCF   xA8,F
066DE:  RLCF   xA9,F
066E0:  RLCF   xAA,F
066E2:  RLCF   xAF,F
066E4:  RLCF   xB0,F
066E6:  RLCF   xB1,F
066E8:  RLCF   xB2,F
066EA:  MOVF   xAE,W
066EC:  SUBWF  xB2,W
066EE:  BTFSC  FD8.2
066F0:  BRA    66F8
066F2:  MOVLB  0
066F4:  GOTO   671A
066F8:  MOVF   xAD,W
066FA:  SUBWF  xB1,W
066FC:  BTFSC  FD8.2
066FE:  BRA    6706
06700:  MOVLB  0
06702:  GOTO   671A
06706:  MOVF   xAC,W
06708:  SUBWF  xB0,W
0670A:  BTFSC  FD8.2
0670C:  BRA    6714
0670E:  MOVLB  0
06710:  GOTO   671A
06714:  MOVF   xAB,W
06716:  SUBWF  xAF,W
06718:  MOVLB  0
0671A:  BTFSS  FD8.0
0671C:  GOTO   6742
06720:  MOVLB  9
06722:  MOVF   xAB,W
06724:  SUBWF  xAF,F
06726:  MOVF   xAC,W
06728:  BTFSS  FD8.0
0672A:  INCFSZ xAC,W
0672C:  SUBWF  xB0,F
0672E:  MOVF   xAD,W
06730:  BTFSS  FD8.0
06732:  INCFSZ xAD,W
06734:  SUBWF  xB1,F
06736:  MOVF   xAE,W
06738:  BTFSS  FD8.0
0673A:  INCFSZ xAE,W
0673C:  SUBWF  xB2,F
0673E:  BSF    FD8.0
06740:  MOVLB  0
06742:  RLCF   00,F
06744:  RLCF   01,F
06746:  RLCF   02,F
06748:  RLCF   03,F
0674A:  MOVLB  9
0674C:  DECFSZ xB3,F
0674E:  BRA    6754
06750:  BRA    675A
06752:  MOVLB  0
06754:  MOVLB  0
06756:  GOTO   66D6
0675A:  MOVLB  0
0675C:  MOVFF  9AF,FEF
06760:  MOVFF  9B0,FEC
06764:  MOVFF  9B1,FEC
06768:  MOVFF  9B2,FEC
0676C:  MOVF   FED,F
0676E:  MOVF   FED,F
06770:  MOVF   FED,F
06772:  RETURN 0
*
0682E:  MOVFF  FEA,99A
06832:  MOVFF  FE9,999
06836:  MOVLB  9
06838:  BTFSC  x93.7
0683A:  BRA    6842
0683C:  MOVLB  0
0683E:  GOTO   6854
06842:  BSF    x99.7
06844:  BTFSS  x99.4
06846:  INCF   x99,F
06848:  COMF   x92,F
0684A:  COMF   x93,F
0684C:  INCF   x92,F
0684E:  BTFSC  FD8.2
06850:  INCF   x93,F
06852:  MOVLB  0
06854:  MOVLB  9
06856:  SWAPF  x93,W
06858:  IORLW  F0
0685A:  MOVWF  x95
0685C:  ADDWF  x95,F
0685E:  ADDLW  E2
06860:  MOVWF  x96
06862:  ADDLW  32
06864:  MOVWF  x98
06866:  MOVF   x93,W
06868:  ANDLW  0F
0686A:  ADDWF  x96,F
0686C:  ADDWF  x96,F
0686E:  ADDWF  x98,F
06870:  ADDLW  E9
06872:  MOVWF  x97
06874:  ADDWF  x97,F
06876:  ADDWF  x97,F
06878:  SWAPF  x92,W
0687A:  ANDLW  0F
0687C:  ADDWF  x97,F
0687E:  ADDWF  x98,F
06880:  RLCF   x97,F
06882:  RLCF   x98,F
06884:  COMF   x98,F
06886:  RLCF   x98,F
06888:  MOVF   x92,W
0688A:  ANDLW  0F
0688C:  ADDWF  x98,F
0688E:  RLCF   x95,F
06890:  MOVLW  07
06892:  MOVWF  x94
06894:  MOVLW  0A
06896:  MOVLB  0
06898:  MOVLB  9
0689A:  DECF   x97,F
0689C:  ADDWF  x98,F
0689E:  BTFSC  FD8.0
068A0:  BRA    68A8
068A2:  MOVLB  0
068A4:  GOTO   6898
068A8:  MOVLB  0
068AA:  MOVLB  9
068AC:  DECF   x96,F
068AE:  ADDWF  x97,F
068B0:  BTFSC  FD8.0
068B2:  BRA    68BA
068B4:  MOVLB  0
068B6:  GOTO   68AA
068BA:  MOVLB  0
068BC:  MOVLB  9
068BE:  DECF   x95,F
068C0:  ADDWF  x96,F
068C2:  BTFSC  FD8.0
068C4:  BRA    68CC
068C6:  MOVLB  0
068C8:  GOTO   68BC
068CC:  MOVLB  0
068CE:  MOVLB  9
068D0:  DECF   x94,F
068D2:  ADDWF  x95,F
068D4:  BTFSC  FD8.0
068D6:  BRA    68DE
068D8:  MOVLB  0
068DA:  GOTO   68CE
068DE:  MOVLW  09
068E0:  MOVWF  FEA
068E2:  MOVLW  94
068E4:  MOVWF  FE9
068E6:  MOVLW  07
068E8:  ANDWF  x99,W
068EA:  BCF    x99.6
068EC:  MOVF   FED,F
068EE:  ANDWF  x99,W
068F0:  BTFSC  FD8.2
068F2:  BRA    68FA
068F4:  MOVLB  0
068F6:  GOTO   6912
068FA:  BTFSC  x99.4
068FC:  MOVF   FEE,F
068FE:  BTFSS  x99.4
06900:  BRA    6908
06902:  MOVLB  0
06904:  GOTO   6912
06908:  MOVLW  20
0690A:  MOVWF  00
0690C:  MOVLB  0
0690E:  GOTO   698C
06912:  ADDWF  FE9,F
06914:  MOVLW  00
06916:  ADDWFC FEA,F
06918:  MOVF   FE9,W
0691A:  SUBLW  98
0691C:  BTFSS  FD8.2
0691E:  GOTO   6932
06922:  MOVF   FEA,W
06924:  SUBLW  09
06926:  BTFSS  FD8.2
06928:  GOTO   6932
0692C:  MOVLB  9
0692E:  BSF    x99.6
06930:  MOVLB  0
06932:  MOVF   FEF,W
06934:  MOVWF  00
06936:  BTFSS  FD8.2
06938:  GOTO   6964
0693C:  MOVLB  9
0693E:  BTFSS  x99.6
06940:  BRA    6948
06942:  MOVLB  0
06944:  GOTO   6964
06948:  BTFSS  x99.4
0694A:  BRA    6952
0694C:  MOVLB  0
0694E:  GOTO   69A4
06952:  BTFSS  x99.3
06954:  BRA    695C
06956:  MOVLB  0
06958:  GOTO   6964
0695C:  MOVLW  20
0695E:  MOVLB  0
06960:  GOTO   698A
06964:  MOVLB  9
06966:  BTFSC  x99.7
06968:  BRA    6970
0696A:  MOVLB  0
0696C:  GOTO   6980
06970:  MOVLW  2D
06972:  MOVWF  00
06974:  MOVF   FED,W
06976:  BCF    x99.6
06978:  BCF    x99.7
0697A:  MOVLB  0
0697C:  GOTO   698C
06980:  MOVLB  9
06982:  BSF    x99.3
06984:  BCF    x99.4
06986:  MOVLW  30
06988:  MOVLB  0
0698A:  ADDWF  00,F
0698C:  MOVFF  FEA,993
06990:  MOVFF  FE9,992
06994:  MOVFF  00,A29
06998:  CALL   1C3C
0699C:  MOVFF  993,FEA
069A0:  MOVFF  992,FE9
069A4:  MOVF   FEE,W
069A6:  MOVLB  9
069A8:  BTFSC  x99.6
069AA:  BRA    69B2
069AC:  MOVLB  0
069AE:  GOTO   6918
069B2:  MOVLB  0
069B4:  GOTO   82D8 (RETURN)
*
08DE6:  MOVLW  20
08DE8:  MOVLB  2
08DEA:  BTFSS  x6F.4
08DEC:  MOVLW  30
08DEE:  MOVWF  x70
08DF0:  MOVFF  26E,00
08DF4:  BTFSC  00.7
08DF6:  BRA    8DFE
08DF8:  MOVLB  0
08DFA:  GOTO   8E10
08DFE:  COMF   00,F
08E00:  INCF   00,F
08E02:  MOVFF  00,26E
08E06:  MOVLW  2D
08E08:  MOVWF  x70
08E0A:  BSF    x6F.7
08E0C:  BSF    x6F.0
08E0E:  MOVLB  0
08E10:  MOVF   01,W
08E12:  MOVFF  26E,274
08E16:  MOVLW  64
08E18:  MOVLB  2
08E1A:  MOVWF  x75
08E1C:  MOVLB  0
08E1E:  CALL   63D8
08E22:  MOVFF  00,26E
08E26:  MOVLW  30
08E28:  ADDWF  01,W
08E2A:  MOVLB  2
08E2C:  MOVWF  x71
08E2E:  MOVFF  26E,274
08E32:  MOVLW  0A
08E34:  MOVWF  x75
08E36:  MOVLB  0
08E38:  CALL   63D8
08E3C:  MOVLW  30
08E3E:  ADDWF  00,W
08E40:  MOVLB  2
08E42:  MOVWF  x73
08E44:  MOVLW  30
08E46:  ADDWF  01,W
08E48:  MOVWF  x72
08E4A:  MOVFF  270,00
08E4E:  MOVLB  0
08E50:  MOVLW  30
08E52:  MOVLB  2
08E54:  SUBWF  x71,W
08E56:  BTFSS  FD8.2
08E58:  BRA    8E60
08E5A:  MOVLB  0
08E5C:  GOTO   8E6C
08E60:  BSF    x6F.1
08E62:  BTFSC  x6F.7
08E64:  BSF    x6F.2
08E66:  MOVLB  0
08E68:  GOTO   8EAC
08E6C:  MOVFF  270,271
08E70:  MOVLW  20
08E72:  MOVLB  2
08E74:  MOVWF  x70
08E76:  MOVLW  30
08E78:  SUBWF  x72,W
08E7A:  BTFSS  FD8.2
08E7C:  BRA    8E84
08E7E:  MOVLB  0
08E80:  GOTO   8E90
08E84:  BSF    x6F.0
08E86:  BTFSC  x6F.7
08E88:  BSF    x6F.1
08E8A:  MOVLB  0
08E8C:  GOTO   8EAC
08E90:  BTFSC  FD8.2
08E92:  BRA    8E9A
08E94:  MOVLB  2
08E96:  BSF    x6F.0
08E98:  MOVLB  0
08E9A:  BTFSS  FD8.2
08E9C:  GOTO   8EAC
08EA0:  MOVFF  271,272
08EA4:  MOVLW  20
08EA6:  MOVLB  2
08EA8:  MOVWF  x71
08EAA:  MOVLB  0
08EAC:  MOVLB  2
08EAE:  BTFSS  x6F.2
08EB0:  BRA    8EB8
08EB2:  MOVLB  0
08EB4:  GOTO   8ED2
08EB8:  BTFSS  x6F.1
08EBA:  BRA    8EC2
08EBC:  MOVLB  0
08EBE:  GOTO   8EDA
08EC2:  BTFSS  x6F.0
08EC4:  BRA    8ECC
08EC6:  MOVLB  0
08EC8:  GOTO   8EE2
08ECC:  MOVLB  0
08ECE:  GOTO   8EEA
08ED2:  MOVFF  270,A29
08ED6:  CALL   1C3C
08EDA:  MOVFF  271,A29
08EDE:  CALL   1C3C
08EE2:  MOVFF  272,A29
08EE6:  CALL   1C3C
08EEA:  MOVFF  273,A29
08EEE:  CALL   1C3C
08EF2:  RETURN 0
*
09004:  MOVF   FE9,W
09006:  MOVLB  1
09008:  MOVWF  xEF
0900A:  MOVLW  3B
0900C:  MOVWF  xF6
0900E:  MOVLW  9A
09010:  MOVWF  xF5
09012:  MOVLW  CA
09014:  MOVWF  xF4
09016:  CLRF   xF3
09018:  MOVLW  0A
0901A:  MOVWF  xF1
0901C:  MOVLB  0
0901E:  BSF    FD8.1
09020:  MOVLW  01
09022:  MOVWF  FEA
09024:  MOVLW  EB
09026:  MOVWF  FE9
09028:  MOVFF  1EE,9AA
0902C:  MOVFF  1ED,9A9
09030:  MOVFF  1EC,9A8
09034:  MOVFF  1EB,9A7
09038:  MOVFF  1F6,9AE
0903C:  MOVFF  1F5,9AD
09040:  MOVFF  1F4,9AC
09044:  MOVFF  1F3,9AB
09048:  CALL   669A
0904C:  MOVF   01,W
0904E:  MOVF   00,F
09050:  BTFSS  FD8.2
09052:  GOTO   90AA
09056:  MOVLB  1
09058:  MOVF   xF1,W
0905A:  XORLW  01
0905C:  BTFSS  FD8.2
0905E:  BRA    9066
09060:  MOVLB  0
09062:  GOTO   90AA
09066:  MOVF   xEF,W
09068:  BTFSS  FD8.2
0906A:  BRA    9072
0906C:  MOVLB  0
0906E:  GOTO   90B0
09072:  ANDLW  0F
09074:  SUBWF  xF1,W
09076:  BTFSS  FD8.2
09078:  BRA    9080
0907A:  MOVLB  0
0907C:  GOTO   908C
09080:  BTFSS  FD8.0
09082:  BRA    908A
09084:  MOVLB  0
09086:  GOTO   90BC
0908A:  MOVLB  0
0908C:  MOVLB  1
0908E:  BTFSS  xEF.7
09090:  BRA    9098
09092:  MOVLB  0
09094:  GOTO   90BC
09098:  BTFSS  xEF.6
0909A:  BRA    90A2
0909C:  MOVLB  0
0909E:  GOTO   90B0
090A2:  MOVLW  20
090A4:  MOVLB  0
090A6:  GOTO   90B2
090AA:  MOVLB  1
090AC:  CLRF   xEF
090AE:  MOVLB  0
090B0:  MOVLW  30
090B2:  ADDWF  00,F
090B4:  MOVFF  00,A29
090B8:  CALL   1C3C
090BC:  BCF    FD8.1
090BE:  MOVFF  1F6,9AA
090C2:  MOVFF  1F5,9A9
090C6:  MOVFF  1F4,9A8
090CA:  MOVFF  1F3,9A7
090CE:  MOVLB  9
090D0:  CLRF   xAE
090D2:  CLRF   xAD
090D4:  CLRF   xAC
090D6:  MOVLW  0A
090D8:  MOVWF  xAB
090DA:  MOVLB  0
090DC:  CALL   669A
090E0:  MOVFF  03,1F6
090E4:  MOVFF  02,1F5
090E8:  MOVFF  01,1F4
090EC:  MOVFF  00,1F3
090F0:  MOVLB  1
090F2:  DECFSZ xF1,F
090F4:  BRA    90FA
090F6:  BRA    9100
090F8:  MOVLB  0
090FA:  MOVLB  0
090FC:  GOTO   901E
09100:  MOVLB  0
09102:  RETURN 0
*
09336:  MOVF   FE9,W
09338:  MOVLB  1
0933A:  MOVWF  xEF
0933C:  BTFSC  xEE.7
0933E:  BRA    9346
09340:  MOVLB  0
09342:  GOTO   9362
09346:  DECF   xEF,F
09348:  BSF    xEF.5
0934A:  COMF   xEB,F
0934C:  COMF   xEC,F
0934E:  COMF   xED,F
09350:  COMF   xEE,F
09352:  INCF   xEB,F
09354:  BTFSC  FD8.2
09356:  INCF   xEC,F
09358:  BTFSC  FD8.2
0935A:  INCF   xED,F
0935C:  BTFSC  FD8.2
0935E:  INCF   xEE,F
09360:  MOVLB  0
09362:  MOVLW  3B
09364:  MOVLB  1
09366:  MOVWF  xF6
09368:  MOVLW  9A
0936A:  MOVWF  xF5
0936C:  MOVLW  CA
0936E:  MOVWF  xF4
09370:  CLRF   xF3
09372:  MOVLW  0A
09374:  MOVWF  xF1
09376:  MOVLB  0
09378:  BSF    FD8.1
0937A:  MOVLW  01
0937C:  MOVWF  FEA
0937E:  MOVLW  EB
09380:  MOVWF  FE9
09382:  MOVFF  1EE,9AA
09386:  MOVFF  1ED,9A9
0938A:  MOVFF  1EC,9A8
0938E:  MOVFF  1EB,9A7
09392:  MOVFF  1F6,9AE
09396:  MOVFF  1F5,9AD
0939A:  MOVFF  1F4,9AC
0939E:  MOVFF  1F3,9AB
093A2:  CALL   669A
093A6:  MOVF   01,W
093A8:  MOVF   00,F
093AA:  BTFSS  FD8.2
093AC:  GOTO   9404
093B0:  MOVLB  1
093B2:  MOVF   xF1,W
093B4:  XORLW  01
093B6:  BTFSS  FD8.2
093B8:  BRA    93C0
093BA:  MOVLB  0
093BC:  GOTO   9404
093C0:  MOVF   xEF,W
093C2:  BTFSS  FD8.2
093C4:  BRA    93CC
093C6:  MOVLB  0
093C8:  GOTO   940C
093CC:  ANDLW  0F
093CE:  SUBWF  xF1,W
093D0:  BTFSS  FD8.2
093D2:  BRA    93DA
093D4:  MOVLB  0
093D6:  GOTO   93E6
093DA:  BTFSS  FD8.0
093DC:  BRA    93E4
093DE:  MOVLB  0
093E0:  GOTO   946A
093E4:  MOVLB  0
093E6:  MOVLB  1
093E8:  BTFSS  xEF.7
093EA:  BRA    93F2
093EC:  MOVLB  0
093EE:  GOTO   946A
093F2:  BTFSS  xEF.6
093F4:  BRA    93FC
093F6:  MOVLB  0
093F8:  GOTO   940C
093FC:  MOVLW  20
093FE:  MOVLB  0
09400:  GOTO   9460
09404:  MOVLW  20
09406:  MOVLB  1
09408:  ANDWF  xEF,F
0940A:  MOVLB  0
0940C:  MOVLB  1
0940E:  BTFSC  xEF.5
09410:  BRA    9418
09412:  MOVLB  0
09414:  GOTO   9434
09418:  BCF    xEF.5
0941A:  MOVF   00,W
0941C:  MOVWF  xEF
0941E:  MOVLW  2D
09420:  MOVLB  A
09422:  MOVWF  x29
09424:  MOVLB  0
09426:  CALL   1C3C
0942A:  MOVLB  1
0942C:  MOVF   xEF,W
0942E:  MOVWF  00
09430:  CLRF   xEF
09432:  MOVLB  0
09434:  MOVLW  30
09436:  MOVLB  1
09438:  BTFSC  xEF.5
0943A:  BRA    9442
0943C:  MOVLB  0
0943E:  GOTO   9460
09442:  BCF    xEF.5
09444:  MOVF   00,W
09446:  MOVWF  xEF
09448:  MOVLW  2D
0944A:  MOVLB  A
0944C:  MOVWF  x29
0944E:  MOVLB  0
09450:  CALL   1C3C
09454:  MOVLB  1
09456:  MOVF   xEF,W
09458:  MOVWF  00
0945A:  CLRF   xEF
0945C:  MOVLW  30
0945E:  MOVLB  0
09460:  ADDWF  00,F
09462:  MOVFF  00,A29
09466:  CALL   1C3C
0946A:  BCF    FD8.1
0946C:  MOVFF  1F6,9AA
09470:  MOVFF  1F5,9A9
09474:  MOVFF  1F4,9A8
09478:  MOVFF  1F3,9A7
0947C:  MOVLB  9
0947E:  CLRF   xAE
09480:  CLRF   xAD
09482:  CLRF   xAC
09484:  MOVLW  0A
09486:  MOVWF  xAB
09488:  MOVLB  0
0948A:  CALL   669A
0948E:  MOVFF  03,1F6
09492:  MOVFF  02,1F5
09496:  MOVFF  01,1F4
0949A:  MOVFF  00,1F3
0949E:  MOVLB  1
094A0:  DECFSZ xF1,F
094A2:  BRA    94A8
094A4:  BRA    94AE
094A6:  MOVLB  0
094A8:  MOVLB  0
094AA:  GOTO   9378
094AE:  MOVLB  0
094B0:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01C0E:  MOVLW  0A
01C10:  MOVWF  FEA
01C12:  MOVLW  3E
01C14:  MOVWF  FE9
01C16:  MOVF   FEF,W
01C18:  BTFSC  FD8.2
01C1A:  GOTO   1C3A
01C1E:  MOVLW  05
01C20:  MOVWF  01
01C22:  CLRF   00
01C24:  DECFSZ 00,F
01C26:  BRA    1C24
01C28:  DECFSZ 01,F
01C2A:  BRA    1C22
01C2C:  MOVLW  2E
01C2E:  MOVWF  00
01C30:  DECFSZ 00,F
01C32:  BRA    1C30
01C34:  BRA    1C36
01C36:  DECFSZ FEF,F
01C38:  BRA    1C1E
01C3A:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
042B4:  BTFSS  FA6.4
042B6:  GOTO   42B4
042BA:  MOVLB  F
042BC:  MOVWF  x29
042BE:  MOVLB  0
042C0:  GOTO   42F6 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01C3C:  BCF    F93.6
01C3E:  BCF    F8A.6
01C40:  MOVLW  08
01C42:  MOVWF  01
01C44:  BRA    1C46
01C46:  NOP   
01C48:  BSF    01.7
01C4A:  GOTO   1C72
01C4E:  BCF    01.7
01C50:  MOVLB  A
01C52:  RRCF   x29,F
01C54:  MOVLB  0
01C56:  BTFSC  FD8.0
01C58:  BSF    F8A.6
01C5A:  BTFSS  FD8.0
01C5C:  BCF    F8A.6
01C5E:  BSF    01.6
01C60:  GOTO   1C72
01C64:  BCF    01.6
01C66:  DECFSZ 01,F
01C68:  GOTO   1C50
01C6C:  BRA    1C6E
01C6E:  NOP   
01C70:  BSF    F8A.6
01C72:  MOVLW  84
01C74:  MOVWF  FE9
01C76:  DECFSZ FE9,F
01C78:  GOTO   1C76
01C7C:  BRA    1C7E
01C7E:  NOP   
01C80:  BTFSC  01.7
01C82:  GOTO   1C4E
01C86:  BTFSC  01.6
01C88:  GOTO   1C64
01C8C:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
020F4:  MOVF   FC9,W
020F6:  MOVFF  A60,FC9
020FA:  RRCF   FC7,W
020FC:  BTFSS  FD8.0
020FE:  GOTO   20FA
02102:  MOVFF  FC9,00
02106:  RETURN 0
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02078:  MOVLB  A
0207A:  MOVF   x61,W
0207C:  SUBLW  08
0207E:  BTFSS  FD8.2
02080:  BRA    2088
02082:  MOVLB  0
02084:  GOTO   20A0
02088:  MOVWF  x63
0208A:  MOVLB  0
0208C:  MOVLB  A
0208E:  RLCF   x60,F
02090:  DECFSZ x63,F
02092:  BRA    2098
02094:  BRA    209E
02096:  MOVLB  0
02098:  MOVLB  0
0209A:  GOTO   208C
0209E:  MOVLB  0
020A0:  BSF    F96.4
020A2:  BCF    F96.1
020A4:  BCF    F95.7
020A6:  BCF    F8C.7
020A8:  MOVFF  A61,A63
020AC:  MOVLB  A
020AE:  BTFSS  x60.7
020B0:  BCF    F8D.1
020B2:  BTFSC  x60.7
020B4:  BSF    F8D.1
020B6:  RLCF   x60,F
020B8:  BSF    F8C.7
020BA:  MOVLW  02
020BC:  MOVWF  x64
020BE:  MOVLB  0
020C0:  MOVLB  A
020C2:  DECFSZ x64,F
020C4:  BRA    20CA
020C6:  BRA    20D0
020C8:  MOVLB  0
020CA:  MOVLB  0
020CC:  GOTO   20C0
020D0:  RLCF   01,F
020D2:  BTFSS  F84.4
020D4:  BCF    01.0
020D6:  BTFSC  F84.4
020D8:  BSF    01.0
020DA:  BCF    F8C.7
020DC:  MOVLB  0
020DE:  BRA    20E0
020E0:  MOVLB  A
020E2:  DECFSZ x63,F
020E4:  BRA    20EA
020E6:  BRA    20F0
020E8:  MOVLB  0
020EA:  MOVLB  0
020EC:  GOTO   20AC
020F0:  MOVLB  0
020F2:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01DCA:  MOVLB  9
01DCC:  MOVF   xB0,W
01DCE:  SUBLW  10
01DD0:  BTFSS  FD8.2
01DD2:  BRA    1DDA
01DD4:  MOVLB  0
01DD6:  GOTO   1DF4
01DDA:  MOVWF  xB2
01DDC:  MOVLB  0
01DDE:  MOVLB  9
01DE0:  RLCF   xAE,F
01DE2:  RLCF   xAF,F
01DE4:  DECFSZ xB2,F
01DE6:  BRA    1DEC
01DE8:  BRA    1DF2
01DEA:  MOVLB  0
01DEC:  MOVLB  0
01DEE:  GOTO   1DDE
01DF2:  MOVLB  0
01DF4:  BSF    F93.4
01DF6:  BCF    F93.5
01DF8:  BCF    F93.2
01DFA:  BCF    F8A.2
01DFC:  MOVFF  9B0,9B2
01E00:  MOVLB  9
01E02:  BTFSS  xAF.7
01E04:  BCF    F8A.5
01E06:  BTFSC  xAF.7
01E08:  BSF    F8A.5
01E0A:  RLCF   xAE,F
01E0C:  RLCF   xAF,F
01E0E:  BSF    F8A.2
01E10:  RLCF   01,F
01E12:  RLCF   02,F
01E14:  BTFSS  F81.4
01E16:  BCF    01.0
01E18:  BTFSC  F81.4
01E1A:  BSF    01.0
01E1C:  BCF    F8A.2
01E1E:  DECFSZ xB2,F
01E20:  BRA    1E26
01E22:  BRA    1E2C
01E24:  MOVLB  0
01E26:  MOVLB  0
01E28:  GOTO   1E00
01E2C:  MOVLB  0
01E2E:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01D1E:  MOVLW  EA
01D20:  MOVWF  FF6
01D22:  MOVLW  00
01D24:  MOVWF  FF7
01D26:  MOVLW  00
01D28:  MOVWF  FF8
01D2A:  CALL   1C8E
....................    clear_interrupt(INT_TIMER1);
01D2E:  BCF    F9E.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01D30:  MOVLW  8F
01D32:  MOVWF  FCD
01D34:  CLRF   FAA
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
01D36:  MOVLW  80
01D38:  MOVWF  FCF
01D3A:  MOVLW  12
01D3C:  MOVWF  FCE
01D3E:  NOP   
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
01D40:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
01D42:  MOVLW  C0
01D44:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01D46:  MOVLW  FE
01D48:  MOVWF  FF6
01D4A:  MOVLW  00
01D4C:  MOVWF  FF7
01D4E:  MOVLW  00
01D50:  MOVWF  FF8
01D52:  CALL   1C8E
01D56:  GOTO   B10E (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02ECA:  MOVFF  20,00
02ECE:  MOVFF  21,01
02ED2:  MOVFF  22,02
02ED6:  MOVFF  23,03
02EDA:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
*
06774:  BCF    FD8.1
06776:  MOVFF  1F,9AA
0677A:  MOVFF  1E,9A9
0677E:  MOVFF  1D,9A8
06782:  MOVFF  1C,9A7
06786:  MOVLB  9
06788:  CLRF   xAE
0678A:  CLRF   xAD
0678C:  CLRF   xAC
0678E:  MOVLW  0A
06790:  MOVWF  xAB
06792:  MOVLB  0
06794:  CALL   669A
06798:  MOVF   01,W
0679A:  MOVWF  02
0679C:  MOVF   00,W
0679E:  MOVWF  01
067A0:  GOTO   67BC (RETURN)
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,A6F
00160:  MOVFF  FE9,A6E
00164:  GOTO   010A
00168:  MOVFF  A6F,FEA
0016C:  MOVFF  A6E,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01CF4:  MOVLW  7A
01CF6:  MOVWF  FF6
01CF8:  MOVLW  01
01CFA:  MOVWF  FF7
01CFC:  MOVLW  00
01CFE:  MOVWF  FF8
01D00:  CALL   1C8E
....................    enable_interrupts(INT_RDA3);
01D04:  BSF    F61.5
....................    enable_interrupts(global);
01D06:  MOVLW  C0
01D08:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01D0A:  MOVLW  8C
01D0C:  MOVWF  FF6
01D0E:  MOVLW  01
01D10:  MOVWF  FF7
01D12:  MOVLW  00
01D14:  MOVWF  FF8
01D16:  CALL   1C8E
01D1A:  GOTO   B10A (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
04276:  MOVFF  159,03
0427A:  MOVLB  1
0427C:  MOVF   x58,W
0427E:  MOVWF  FE9
04280:  MOVFF  03,FEA
04284:  MOVFF  FEF,15A
04288:  MOVFF  157,FEA
0428C:  MOVFF  156,FE9
04290:  CLRF   00
04292:  CLRF   02
04294:  MOVFF  15A,01
04298:  MOVLB  0
0429A:  CALL   4252
....................    *receive_signal_size = 0;
0429E:  MOVFF  159,03
042A2:  MOVLB  1
042A4:  MOVF   x58,W
042A6:  MOVWF  FE9
042A8:  MOVFF  03,FEA
042AC:  CLRF   FEF
042AE:  MOVLB  0
042B0:  GOTO   B1AC (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01F2C:  MOVLW  98
01F2E:  MOVWF  FF6
01F30:  MOVLW  01
01F32:  MOVWF  FF7
01F34:  MOVLW  00
01F36:  MOVWF  FF8
01F38:  CALL   1C8E
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
01F3C:  BCF    F93.1
01F3E:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
01F40:  MOVLW  0A
01F42:  MOVLB  A
01F44:  MOVWF  x3E
01F46:  MOVLB  0
01F48:  CALL   1C0E
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
01F4C:  MOVLW  0D
01F4E:  MOVLB  9
01F50:  MOVWF  xA7
01F52:  MOVLB  0
01F54:  CALL   1E30
01F58:  MOVFF  02,157
01F5C:  MOVFF  01,156
....................     fprintf(PC, "\t%04LX\r\n", readdata);
01F60:  MOVLW  09
01F62:  MOVLB  A
01F64:  MOVWF  x29
01F66:  MOVLB  0
01F68:  CALL   1C3C
01F6C:  MOVFF  157,996
01F70:  MOVLW  37
01F72:  MOVLB  9
01F74:  MOVWF  x97
01F76:  MOVLB  0
01F78:  CALL   1EBC
01F7C:  MOVFF  156,996
01F80:  MOVLW  37
01F82:  MOVLB  9
01F84:  MOVWF  x97
01F86:  MOVLB  0
01F88:  CALL   1EBC
01F8C:  MOVLW  0D
01F8E:  MOVLB  A
01F90:  MOVWF  x29
01F92:  MOVLB  0
01F94:  CALL   1C3C
01F98:  MOVLW  0A
01F9A:  MOVLB  A
01F9C:  MOVWF  x29
01F9E:  MOVLB  0
01FA0:  CALL   1C3C
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
01FA4:  MOVLB  1
01FA6:  INCFSZ x56,W
01FA8:  BRA    1FAE
01FAA:  BRA    1FB4
01FAC:  MOVLB  0
01FAE:  MOVLB  0
01FB0:  GOTO   1FCC
01FB4:  MOVLB  0
01FB6:  MOVLB  1
01FB8:  INCFSZ x57,W
01FBA:  BRA    1FC0
01FBC:  BRA    1FC6
01FBE:  MOVLB  0
01FC0:  MOVLB  0
01FC2:  GOTO   1FCC
01FC6:  MOVLB  0
01FC8:  GOTO   1FEC
01FCC:  MOVLB  1
01FCE:  MOVF   x56,F
01FD0:  BTFSC  FD8.2
01FD2:  BRA    1FDA
01FD4:  MOVLB  0
01FD6:  GOTO   2000
01FDA:  MOVLB  0
01FDC:  MOVLB  1
01FDE:  MOVF   x57,F
01FE0:  BTFSC  FD8.2
01FE2:  BRA    1FEA
01FE4:  MOVLB  0
01FE6:  GOTO   2000
01FEA:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
01FEC:  MOVLW  AC
01FEE:  MOVWF  FF6
01FF0:  MOVLW  01
01FF2:  MOVWF  FF7
01FF4:  MOVLW  00
01FF6:  MOVWF  FF8
01FF8:  CALL   1C8E
....................     } else {
01FFC:  GOTO   2010
....................         fprintf(PC, "\tConnect successful\r\n");
02000:  MOVLW  BE
02002:  MOVWF  FF6
02004:  MOVLW  01
02006:  MOVWF  FF7
02008:  MOVLW  00
0200A:  MOVWF  FF8
0200C:  CALL   1C8E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02010:  MOVLW  D4
02012:  MOVWF  FF6
02014:  MOVLW  01
02016:  MOVWF  FF7
02018:  MOVLW  00
0201A:  MOVWF  FF8
0201C:  CALL   1C8E
02020:  GOTO   B112 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
01E30:  MOVFF  9A7,9AE
01E34:  GOTO   1D5A
01E38:  MOVFF  02,9A9
01E3C:  MOVFF  01,9A8
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
01E40:  BCF    F93.1
01E42:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01E44:  MOVLW  0D
01E46:  MOVWF  00
01E48:  DECFSZ 00,F
01E4A:  BRA    1E48
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
01E4C:  MOVFF  9A9,9AF
01E50:  MOVFF  9A8,9AE
01E54:  MOVLW  10
01E56:  MOVLB  9
01E58:  MOVWF  xB0
01E5A:  MOVLW  01
01E5C:  MOVWF  xB1
01E5E:  MOVLB  0
01E60:  CALL   1DCA
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
01E64:  MOVLW  0D
01E66:  MOVWF  00
01E68:  DECFSZ 00,F
01E6A:  BRA    1E68
....................     output_high(ADC_CS); // Set CS pin high to end communication
01E6C:  BCF    F93.1
01E6E:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
01E70:  MOVLW  0D
01E72:  MOVWF  00
01E74:  DECFSZ 00,F
01E76:  BRA    1E74
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01E78:  BCF    F93.1
01E7A:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01E7C:  MOVLW  0D
01E7E:  MOVWF  00
01E80:  DECFSZ 00,F
01E82:  BRA    1E80
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
01E84:  MOVLB  9
01E86:  CLRF   xAF
01E88:  CLRF   xAE
01E8A:  MOVLW  10
01E8C:  MOVWF  xB0
01E8E:  MOVLW  01
01E90:  MOVWF  xB1
01E92:  MOVLB  0
01E94:  CALL   1DCA
01E98:  MOVFF  02,9AB
01E9C:  MOVFF  01,9AA
....................     output_high(ADC_CS); 
01EA0:  BCF    F93.1
01EA2:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01EA4:  MOVLB  9
01EA6:  MOVF   xAA,W
01EA8:  MOVWF  xAC
01EAA:  MOVF   xAB,W
01EAC:  ANDLW  0F
01EAE:  MOVWF  xAD
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01EB0:  MOVF   xAC,W
01EB2:  MOVWF  01
01EB4:  MOVF   xAD,W
01EB6:  MOVWF  02
01EB8:  MOVLB  0
01EBA:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); 
....................     output_high(DAC2_CS); 
....................     delay_ms(10); 
....................     mcp4901_1_write(0); 
....................     mcp4901_2_write(0); 
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); 
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); 
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
0661E:  MOVFF  993,997
06622:  MOVFF  992,996
06626:  CALL   64CA
0662A:  MOVFF  02,995
0662E:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); 
06632:  BCF    F93.3
06634:  BCF    F8A.3
....................    delay_us(10); 
06636:  MOVLW  0D
06638:  MOVWF  00
0663A:  DECFSZ 00,F
0663C:  BRA    663A
....................    spi_xfer(ADCDAC_STREAM, cmd); 
0663E:  MOVFF  995,9AF
06642:  MOVFF  994,9AE
06646:  MOVLW  10
06648:  MOVLB  9
0664A:  MOVWF  xB0
0664C:  MOVLW  01
0664E:  MOVWF  xB1
06650:  MOVLB  0
06652:  CALL   1DCA
....................    output_high(DAC1_CS); 
06656:  BCF    F93.3
06658:  BSF    F8A.3
0665A:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
0665C:  MOVFF  993,997
06660:  MOVFF  992,996
06664:  CALL   64CA
06668:  MOVFF  02,995
0666C:  MOVFF  01,994
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
06670:  BCF    F93.0
06672:  BCF    F8A.0
....................    delay_us(10); 
06674:  MOVLW  0D
06676:  MOVWF  00
06678:  DECFSZ 00,F
0667A:  BRA    6678
....................    spi_xfer(ADCDAC_STREAM, cmd); 
0667C:  MOVFF  995,9AF
06680:  MOVFF  994,9AE
06684:  MOVLW  10
06686:  MOVLB  9
06688:  MOVWF  xB0
0668A:  MOVLW  01
0668C:  MOVWF  xB1
0668E:  MOVLB  0
06690:  CALL   1DCA
....................    output_high(DAC2_CS); 
06694:  BCF    F93.0
06696:  BSF    F8A.0
06698:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01D5A:  MOVLB  9
01D5C:  BCF    xAF.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01D5E:  BCF    xAF.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01D60:  BCF    xAF.2
....................     cmd.fields.reserved3 = 0;
01D62:  BCF    xAF.3
....................     cmd.fields.coding = 1; // Two's complement
01D64:  BSF    xAF.4
....................     cmd.fields.range = 1; // Normal mode
01D66:  BSF    xAF.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01D68:  BCF    xAF.6
....................     cmd.fields.shadow = 0; // Direct access
01D6A:  BCF    xAF.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01D6C:  BSF    xB0.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01D6E:  BSF    xB0.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01D70:  MOVF   xAE,W
01D72:  ANDLW  01
01D74:  MOVWF  01
01D76:  BCF    xB0.2
01D78:  BTFSC  01.0
01D7A:  BSF    xB0.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01D7C:  BCF    FD8.0
01D7E:  RRCF   xAE,W
01D80:  ANDLW  01
01D82:  MOVWF  01
01D84:  BCF    xB0.3
01D86:  BTFSC  01.0
01D88:  BSF    xB0.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01D8A:  RRCF   xAE,W
01D8C:  MOVWF  00
01D8E:  RRCF   00,F
01D90:  MOVLW  3F
01D92:  ANDWF  00,F
01D94:  MOVF   00,W
01D96:  ANDLW  01
01D98:  MOVWF  01
01D9A:  BCF    xB0.4
01D9C:  BTFSC  01.0
01D9E:  BSF    xB0.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01DA0:  RRCF   xAE,W
01DA2:  MOVWF  00
01DA4:  RRCF   00,F
01DA6:  RRCF   00,F
01DA8:  MOVLW  1F
01DAA:  ANDWF  00,F
01DAC:  MOVF   00,W
01DAE:  ANDLW  01
01DB0:  MOVWF  01
01DB2:  BCF    xB0.5
01DB4:  BTFSC  01.0
01DB6:  BSF    xB0.5
....................     cmd.fields.seq = 0; // Random mode
01DB8:  BCF    xB0.6
....................     cmd.fields.write = 1; // Read operation
01DBA:  BSF    xB0.7
.................... 
.................... 
....................     return cmd.value;
01DBC:  MOVF   xAF,W
01DBE:  MOVWF  01
01DC0:  MOVF   xB0,W
01DC2:  MOVWF  02
01DC4:  MOVLB  0
01DC6:  GOTO   1E38 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
064CA:  MOVLB  9
064CC:  BCF    x99.7
....................    cmd.fields.buffer = 1; // Buffer used
064CE:  BSF    x99.6
....................    cmd.fields.gain = 1; // Gain 1x
064D0:  BSF    x99.5
....................    cmd.fields.shutdown = 1; // Normal operation
064D2:  BSF    x99.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
064D4:  RRCF   x97,W
064D6:  MOVWF  x9B
064D8:  RRCF   x96,W
064DA:  MOVWF  x9A
064DC:  RRCF   x9B,F
064DE:  RRCF   x9A,F
064E0:  RRCF   x9B,F
064E2:  RRCF   x9A,F
064E4:  RRCF   x9B,F
064E6:  RRCF   x9A,F
064E8:  RRCF   x9B,F
064EA:  RRCF   x9A,F
064EC:  RRCF   x9B,F
064EE:  RRCF   x9A,F
064F0:  RRCF   x9B,F
064F2:  RRCF   x9A,F
064F4:  MOVLW  01
064F6:  ANDWF  x9B,F
064F8:  MOVF   x9A,W
064FA:  ANDLW  01
064FC:  MOVWF  00
064FE:  CLRF   03
06500:  MOVF   00,W
06502:  MOVWF  01
06504:  BCF    x99.3
06506:  BTFSC  01.0
06508:  BSF    x99.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
0650A:  RRCF   x97,W
0650C:  MOVWF  x9B
0650E:  RRCF   x96,W
06510:  MOVWF  x9A
06512:  RRCF   x9B,F
06514:  RRCF   x9A,F
06516:  RRCF   x9B,F
06518:  RRCF   x9A,F
0651A:  RRCF   x9B,F
0651C:  RRCF   x9A,F
0651E:  RRCF   x9B,F
06520:  RRCF   x9A,F
06522:  RRCF   x9B,F
06524:  RRCF   x9A,F
06526:  MOVLW  03
06528:  ANDWF  x9B,F
0652A:  MOVF   x9A,W
0652C:  ANDLW  01
0652E:  MOVWF  00
06530:  CLRF   03
06532:  MOVF   00,W
06534:  MOVWF  01
06536:  BCF    x99.2
06538:  BTFSC  01.0
0653A:  BSF    x99.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0653C:  RRCF   x97,W
0653E:  MOVWF  x9B
06540:  RRCF   x96,W
06542:  MOVWF  x9A
06544:  RRCF   x9B,F
06546:  RRCF   x9A,F
06548:  RRCF   x9B,F
0654A:  RRCF   x9A,F
0654C:  RRCF   x9B,F
0654E:  RRCF   x9A,F
06550:  RRCF   x9B,F
06552:  RRCF   x9A,F
06554:  MOVLW  07
06556:  ANDWF  x9B,F
06558:  MOVF   x9A,W
0655A:  ANDLW  01
0655C:  MOVWF  00
0655E:  CLRF   03
06560:  MOVF   00,W
06562:  MOVWF  01
06564:  BCF    x99.1
06566:  BTFSC  01.0
06568:  BSF    x99.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
0656A:  RRCF   x97,W
0656C:  MOVWF  x9B
0656E:  RRCF   x96,W
06570:  MOVWF  x9A
06572:  RRCF   x9B,F
06574:  RRCF   x9A,F
06576:  RRCF   x9B,F
06578:  RRCF   x9A,F
0657A:  RRCF   x9B,F
0657C:  RRCF   x9A,F
0657E:  MOVLW  0F
06580:  ANDWF  x9B,F
06582:  MOVF   x9A,W
06584:  ANDLW  01
06586:  MOVWF  00
06588:  CLRF   03
0658A:  MOVF   00,W
0658C:  MOVWF  01
0658E:  BCF    x99.0
06590:  BTFSC  01.0
06592:  BSF    x99.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
06594:  RRCF   x97,W
06596:  MOVWF  x9B
06598:  RRCF   x96,W
0659A:  MOVWF  x9A
0659C:  RRCF   x9B,F
0659E:  RRCF   x9A,F
065A0:  RRCF   x9B,F
065A2:  RRCF   x9A,F
065A4:  MOVLW  1F
065A6:  ANDWF  x9B,F
065A8:  MOVF   x9A,W
065AA:  ANDLW  01
065AC:  MOVWF  00
065AE:  CLRF   03
065B0:  MOVF   00,W
065B2:  MOVWF  01
065B4:  BCF    x98.7
065B6:  BTFSC  01.0
065B8:  BSF    x98.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
065BA:  RRCF   x97,W
065BC:  MOVWF  x9B
065BE:  RRCF   x96,W
065C0:  MOVWF  x9A
065C2:  RRCF   x9B,F
065C4:  RRCF   x9A,F
065C6:  MOVLW  3F
065C8:  ANDWF  x9B,F
065CA:  MOVF   x9A,W
065CC:  ANDLW  01
065CE:  MOVWF  00
065D0:  CLRF   03
065D2:  MOVF   00,W
065D4:  MOVWF  01
065D6:  BCF    x98.6
065D8:  BTFSC  01.0
065DA:  BSF    x98.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
065DC:  BCF    FD8.0
065DE:  RRCF   x97,W
065E0:  MOVWF  x9B
065E2:  RRCF   x96,W
065E4:  MOVWF  x9A
065E6:  MOVF   x9A,W
065E8:  ANDLW  01
065EA:  MOVWF  00
065EC:  CLRF   03
065EE:  MOVF   00,W
065F0:  MOVWF  01
065F2:  BCF    x98.5
065F4:  BTFSC  01.0
065F6:  BSF    x98.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
065F8:  MOVF   x96,W
065FA:  ANDLW  01
065FC:  MOVWF  00
065FE:  CLRF   03
06600:  MOVF   00,W
06602:  MOVWF  01
06604:  BCF    x98.4
06606:  BTFSC  01.0
06608:  BSF    x98.4
....................    cmd.fields.reserved = 0; // Reserved bits
0660A:  BCF    x98.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
0660C:  BCF    x98.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0660E:  BCF    x98.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
06610:  BCF    x98.0
.................... 
....................    return cmd.value;
06612:  MOVF   x98,W
06614:  MOVWF  01
06616:  MOVF   x99,W
06618:  MOVWF  02
0661A:  MOVLB  0
0661C:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02EDC:  MOVLB  A
02EDE:  MOVF   x3E,W
02EE0:  XORLW  00
02EE2:  MOVLB  0
02EE4:  BTFSC  FD8.2
02EE6:  GOTO   2EF6
02EEA:  XORLW  01
02EEC:  BTFSC  FD8.2
02EEE:  GOTO   2F5E
02EF2:  GOTO   2FBE
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02EF6:  MOVLB  A
02EF8:  CLRF   x47
02EFA:  CLRF   x46
02EFC:  MOVLB  0
02EFE:  MOVLB  A
02F00:  MOVF   x47,W
02F02:  SUBWF  x45,W
02F04:  BTFSC  FD8.0
02F06:  BRA    2F0E
02F08:  MOVLB  0
02F0A:  GOTO   2F5A
02F0E:  MOVLB  0
02F10:  BTFSS  FD8.2
02F12:  GOTO   2F28
02F16:  MOVLB  A
02F18:  MOVF   x44,W
02F1A:  SUBWF  x46,W
02F1C:  BTFSS  FD8.0
02F1E:  BRA    2F26
02F20:  MOVLB  0
02F22:  GOTO   2F5A
02F26:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02F28:  MOVLB  A
02F2A:  MOVF   x42,W
02F2C:  ADDWF  x46,W
02F2E:  MOVWF  FE9
02F30:  MOVF   x43,W
02F32:  ADDWFC x47,W
02F34:  MOVWF  FEA
02F36:  MOVFF  FEF,A4A
02F3A:  MOVFF  A4A,A60
02F3E:  MOVLW  08
02F40:  MOVWF  x61
02F42:  MOVLW  01
02F44:  MOVWF  x62
02F46:  MOVLB  0
02F48:  CALL   2078
02F4C:  MOVLB  A
02F4E:  INCF   x46,F
02F50:  BTFSC  FD8.2
02F52:  INCF   x47,F
02F54:  MOVLB  0
02F56:  GOTO   2EFE
....................          break;
02F5A:  GOTO   2FC2
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02F5E:  MOVLB  A
02F60:  CLRF   x49
02F62:  CLRF   x48
02F64:  MOVLB  0
02F66:  MOVLB  A
02F68:  MOVF   x49,W
02F6A:  SUBWF  x45,W
02F6C:  BTFSC  FD8.0
02F6E:  BRA    2F76
02F70:  MOVLB  0
02F72:  GOTO   2FBA
02F76:  MOVLB  0
02F78:  BTFSS  FD8.2
02F7A:  GOTO   2F90
02F7E:  MOVLB  A
02F80:  MOVF   x44,W
02F82:  SUBWF  x48,W
02F84:  BTFSS  FD8.0
02F86:  BRA    2F8E
02F88:  MOVLB  0
02F8A:  GOTO   2FBA
02F8E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02F90:  MOVLB  A
02F92:  MOVF   x42,W
02F94:  ADDWF  x48,W
02F96:  MOVWF  FE9
02F98:  MOVF   x43,W
02F9A:  ADDWFC x49,W
02F9C:  MOVWF  FEA
02F9E:  MOVFF  FEF,A4A
02FA2:  MOVFF  A4A,A60
02FA6:  MOVLB  0
02FA8:  CALL   20F4
02FAC:  MOVLB  A
02FAE:  INCF   x48,F
02FB0:  BTFSC  FD8.2
02FB2:  INCF   x49,F
02FB4:  MOVLB  0
02FB6:  GOTO   2F66
....................          break;
02FBA:  GOTO   2FC2
....................          
....................       default:
....................          break;
02FBE:  GOTO   2FC2
....................    }
....................    return;
02FC2:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02108:  MOVLB  A
0210A:  MOVF   x44,W
0210C:  XORLW  00
0210E:  MOVLB  0
02110:  BTFSC  FD8.2
02112:  GOTO   2122
02116:  XORLW  01
02118:  BTFSC  FD8.2
0211A:  GOTO   222C
0211E:  GOTO   2328
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02122:  MOVLB  A
02124:  CLRF   x53
02126:  CLRF   x52
02128:  MOVLB  0
0212A:  MOVLB  A
0212C:  MOVF   x53,W
0212E:  SUBWF  x4B,W
02130:  BTFSC  FD8.0
02132:  BRA    213A
02134:  MOVLB  0
02136:  GOTO   2186
0213A:  MOVLB  0
0213C:  BTFSS  FD8.2
0213E:  GOTO   2154
02142:  MOVLB  A
02144:  MOVF   x4A,W
02146:  SUBWF  x52,W
02148:  BTFSS  FD8.0
0214A:  BRA    2152
0214C:  MOVLB  0
0214E:  GOTO   2186
02152:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02154:  MOVLB  A
02156:  MOVF   x48,W
02158:  ADDWF  x52,W
0215A:  MOVWF  FE9
0215C:  MOVF   x49,W
0215E:  ADDWFC x53,W
02160:  MOVWF  FEA
02162:  MOVFF  FEF,A5E
02166:  MOVFF  A5E,A60
0216A:  MOVLW  08
0216C:  MOVWF  x61
0216E:  MOVLW  01
02170:  MOVWF  x62
02172:  MOVLB  0
02174:  CALL   2078
02178:  MOVLB  A
0217A:  INCF   x52,F
0217C:  BTFSC  FD8.2
0217E:  INCF   x53,F
02180:  MOVLB  0
02182:  GOTO   212A
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02186:  MOVLB  A
02188:  CLRF   x57
0218A:  CLRF   x56
0218C:  CLRF   x55
0218E:  CLRF   x54
02190:  MOVLB  0
02192:  MOVLB  A
02194:  MOVF   x57,W
02196:  SUBWF  x51,W
02198:  BTFSC  FD8.0
0219A:  BRA    21A2
0219C:  MOVLB  0
0219E:  GOTO   2228
021A2:  MOVLB  0
021A4:  BTFSS  FD8.2
021A6:  GOTO   21EC
021AA:  MOVLB  A
021AC:  MOVF   x56,W
021AE:  SUBWF  x50,W
021B0:  BTFSC  FD8.0
021B2:  BRA    21BA
021B4:  MOVLB  0
021B6:  GOTO   2228
021BA:  MOVLB  0
021BC:  BTFSS  FD8.2
021BE:  GOTO   21EC
021C2:  MOVLB  A
021C4:  MOVF   x55,W
021C6:  SUBWF  x4F,W
021C8:  BTFSC  FD8.0
021CA:  BRA    21D2
021CC:  MOVLB  0
021CE:  GOTO   2228
021D2:  MOVLB  0
021D4:  BTFSS  FD8.2
021D6:  GOTO   21EC
021DA:  MOVLB  A
021DC:  MOVF   x4E,W
021DE:  SUBWF  x54,W
021E0:  BTFSS  FD8.0
021E2:  BRA    21EA
021E4:  MOVLB  0
021E6:  GOTO   2228
021EA:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
021EC:  MOVLB  A
021EE:  MOVF   x4C,W
021F0:  ADDWF  x54,W
021F2:  MOVWF  FE9
021F4:  MOVF   x4D,W
021F6:  ADDWFC x55,W
021F8:  MOVWF  FEA
021FA:  MOVLW  02
021FC:  MOVWF  x60
021FE:  MOVLW  08
02200:  MOVWF  x61
02202:  MOVLW  01
02204:  MOVWF  x62
02206:  MOVLB  0
02208:  CALL   2078
0220C:  MOVFF  01,FEF
02210:  MOVLW  01
02212:  MOVLB  A
02214:  ADDWF  x54,F
02216:  BTFSC  FD8.0
02218:  INCF   x55,F
0221A:  BTFSC  FD8.2
0221C:  INCF   x56,F
0221E:  BTFSC  FD8.2
02220:  INCF   x57,F
02222:  MOVLB  0
02224:  GOTO   2192
....................          break;
02228:  GOTO   232C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0222C:  MOVLB  A
0222E:  CLRF   x59
02230:  CLRF   x58
02232:  MOVLB  0
02234:  MOVLB  A
02236:  MOVF   x59,W
02238:  SUBWF  x4B,W
0223A:  BTFSC  FD8.0
0223C:  BRA    2244
0223E:  MOVLB  0
02240:  GOTO   2288
02244:  MOVLB  0
02246:  BTFSS  FD8.2
02248:  GOTO   225E
0224C:  MOVLB  A
0224E:  MOVF   x4A,W
02250:  SUBWF  x58,W
02252:  BTFSS  FD8.0
02254:  BRA    225C
02256:  MOVLB  0
02258:  GOTO   2288
0225C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0225E:  MOVLB  A
02260:  MOVF   x48,W
02262:  ADDWF  x58,W
02264:  MOVWF  FE9
02266:  MOVF   x49,W
02268:  ADDWFC x59,W
0226A:  MOVWF  FEA
0226C:  MOVFF  FEF,A5E
02270:  MOVFF  A5E,A60
02274:  MOVLB  0
02276:  CALL   20F4
0227A:  MOVLB  A
0227C:  INCF   x58,F
0227E:  BTFSC  FD8.2
02280:  INCF   x59,F
02282:  MOVLB  0
02284:  GOTO   2234
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02288:  MOVLB  A
0228A:  CLRF   x5D
0228C:  CLRF   x5C
0228E:  CLRF   x5B
02290:  CLRF   x5A
02292:  MOVLB  0
02294:  MOVLB  A
02296:  MOVF   x5D,W
02298:  SUBWF  x51,W
0229A:  BTFSC  FD8.0
0229C:  BRA    22A4
0229E:  MOVLB  0
022A0:  GOTO   2324
022A4:  MOVLB  0
022A6:  BTFSS  FD8.2
022A8:  GOTO   22EE
022AC:  MOVLB  A
022AE:  MOVF   x5C,W
022B0:  SUBWF  x50,W
022B2:  BTFSC  FD8.0
022B4:  BRA    22BC
022B6:  MOVLB  0
022B8:  GOTO   2324
022BC:  MOVLB  0
022BE:  BTFSS  FD8.2
022C0:  GOTO   22EE
022C4:  MOVLB  A
022C6:  MOVF   x5B,W
022C8:  SUBWF  x4F,W
022CA:  BTFSC  FD8.0
022CC:  BRA    22D4
022CE:  MOVLB  0
022D0:  GOTO   2324
022D4:  MOVLB  0
022D6:  BTFSS  FD8.2
022D8:  GOTO   22EE
022DC:  MOVLB  A
022DE:  MOVF   x4E,W
022E0:  SUBWF  x5A,W
022E2:  BTFSS  FD8.0
022E4:  BRA    22EC
022E6:  MOVLB  0
022E8:  GOTO   2324
022EC:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
022EE:  MOVLB  A
022F0:  MOVF   x4C,W
022F2:  ADDWF  x5A,W
022F4:  MOVWF  FE9
022F6:  MOVF   x4D,W
022F8:  ADDWFC x5B,W
022FA:  MOVWF  FEA
022FC:  MOVLW  01
022FE:  MOVWF  x60
02300:  MOVLB  0
02302:  CALL   20F4
02306:  MOVF   01,W
02308:  MOVFF  00,FEF
0230C:  MOVLW  01
0230E:  MOVLB  A
02310:  ADDWF  x5A,F
02312:  BTFSC  FD8.0
02314:  INCF   x5B,F
02316:  BTFSC  FD8.2
02318:  INCF   x5C,F
0231A:  BTFSC  FD8.2
0231C:  INCF   x5D,F
0231E:  MOVLB  0
02320:  GOTO   2294
....................          break;
02324:  GOTO   232C
....................    
....................          
....................       default:
....................          break;
02328:  GOTO   232C
....................    }
....................    return;
0232C:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02FC4:  MOVLB  A
02FC6:  MOVF   x3E,W
02FC8:  XORLW  00
02FCA:  MOVLB  0
02FCC:  BTFSC  FD8.2
02FCE:  GOTO   2FDE
02FD2:  XORLW  01
02FD4:  BTFSC  FD8.2
02FD6:  GOTO   308C
02FDA:  GOTO   312A
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02FDE:  MOVLB  A
02FE0:  CLRF   x49
02FE2:  MOVLB  0
02FE4:  MOVLB  A
02FE6:  MOVF   x44,W
02FE8:  SUBWF  x49,W
02FEA:  BTFSS  FD8.0
02FEC:  BRA    2FF4
02FEE:  MOVLB  0
02FF0:  GOTO   3024
02FF4:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02FF6:  MOVLB  A
02FF8:  MOVF   x49,W
02FFA:  ADDWF  x42,W
02FFC:  MOVWF  FE9
02FFE:  MOVLW  00
03000:  ADDWFC x43,W
03002:  MOVWF  FEA
03004:  MOVFF  FEF,A4F
03008:  MOVFF  A4F,A60
0300C:  MOVLW  08
0300E:  MOVWF  x61
03010:  MOVLW  01
03012:  MOVWF  x62
03014:  MOVLB  0
03016:  CALL   2078
0301A:  MOVLB  A
0301C:  INCF   x49,F
0301E:  MOVLB  0
03020:  GOTO   2FE4
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03024:  MOVLB  A
03026:  CLRF   x4B
03028:  CLRF   x4A
0302A:  MOVLB  0
0302C:  MOVLB  A
0302E:  MOVF   x4B,W
03030:  SUBWF  x48,W
03032:  BTFSC  FD8.0
03034:  BRA    303C
03036:  MOVLB  0
03038:  GOTO   3088
0303C:  MOVLB  0
0303E:  BTFSS  FD8.2
03040:  GOTO   3056
03044:  MOVLB  A
03046:  MOVF   x47,W
03048:  SUBWF  x4A,W
0304A:  BTFSS  FD8.0
0304C:  BRA    3054
0304E:  MOVLB  0
03050:  GOTO   3088
03054:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03056:  MOVLB  A
03058:  MOVF   x45,W
0305A:  ADDWF  x4A,W
0305C:  MOVWF  FE9
0305E:  MOVF   x46,W
03060:  ADDWFC x4B,W
03062:  MOVWF  FEA
03064:  MOVFF  FEF,A4F
03068:  MOVFF  A4F,A60
0306C:  MOVLW  08
0306E:  MOVWF  x61
03070:  MOVLW  01
03072:  MOVWF  x62
03074:  MOVLB  0
03076:  CALL   2078
0307A:  MOVLB  A
0307C:  INCF   x4A,F
0307E:  BTFSC  FD8.2
03080:  INCF   x4B,F
03082:  MOVLB  0
03084:  GOTO   302C
....................          break;
03088:  GOTO   312E
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0308C:  MOVLB  A
0308E:  CLRF   x4C
03090:  MOVLB  0
03092:  MOVLB  A
03094:  MOVF   x44,W
03096:  SUBWF  x4C,W
03098:  BTFSS  FD8.0
0309A:  BRA    30A2
0309C:  MOVLB  0
0309E:  GOTO   30CA
030A2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
030A4:  MOVLB  A
030A6:  MOVF   x4C,W
030A8:  ADDWF  x42,W
030AA:  MOVWF  FE9
030AC:  MOVLW  00
030AE:  ADDWFC x43,W
030B0:  MOVWF  FEA
030B2:  MOVFF  FEF,A4F
030B6:  MOVFF  A4F,A60
030BA:  MOVLB  0
030BC:  CALL   20F4
030C0:  MOVLB  A
030C2:  INCF   x4C,F
030C4:  MOVLB  0
030C6:  GOTO   3092
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
030CA:  MOVLB  A
030CC:  CLRF   x4E
030CE:  CLRF   x4D
030D0:  MOVLB  0
030D2:  MOVLB  A
030D4:  MOVF   x4E,W
030D6:  SUBWF  x48,W
030D8:  BTFSC  FD8.0
030DA:  BRA    30E2
030DC:  MOVLB  0
030DE:  GOTO   3126
030E2:  MOVLB  0
030E4:  BTFSS  FD8.2
030E6:  GOTO   30FC
030EA:  MOVLB  A
030EC:  MOVF   x47,W
030EE:  SUBWF  x4D,W
030F0:  BTFSS  FD8.0
030F2:  BRA    30FA
030F4:  MOVLB  0
030F6:  GOTO   3126
030FA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
030FC:  MOVLB  A
030FE:  MOVF   x45,W
03100:  ADDWF  x4D,W
03102:  MOVWF  FE9
03104:  MOVF   x46,W
03106:  ADDWFC x4E,W
03108:  MOVWF  FEA
0310A:  MOVFF  FEF,A4F
0310E:  MOVFF  A4F,A60
03112:  MOVLB  0
03114:  CALL   20F4
03118:  MOVLB  A
0311A:  INCF   x4D,F
0311C:  BTFSC  FD8.2
0311E:  INCF   x4E,F
03120:  MOVLB  0
03122:  GOTO   30D2
....................          break;
03126:  GOTO   312E
....................          
....................       default:
....................          break;
0312A:  GOTO   312E
....................    }
....................    return;
0312E:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
050BE:  MOVFF  26B,A44
050C2:  MOVLW  01
050C4:  MOVLB  A
050C6:  MOVWF  x45
050C8:  MOVLW  0F
050CA:  MOVWF  x47
050CC:  MOVLW  89
050CE:  MOVWF  x46
050D0:  MOVLB  0
050D2:  CALL   2024
050D6:  MOVFF  26B,A44
050DA:  MOVLB  A
050DC:  CLRF   x45
050DE:  MOVLW  0F
050E0:  MOVWF  x47
050E2:  MOVLW  92
050E4:  MOVWF  x46
050E6:  MOVLB  0
050E8:  CALL   2024
050EC:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03130:  MOVLW  05
03132:  MOVLB  A
03134:  MOVWF  x42
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03136:  MOVFF  A40,A44
0313A:  CLRF   x45
0313C:  MOVLW  0F
0313E:  MOVWF  x47
03140:  MOVLW  89
03142:  MOVWF  x46
03144:  MOVLB  0
03146:  CALL   2024
0314A:  MOVFF  A40,A44
0314E:  MOVLB  A
03150:  CLRF   x45
03152:  MOVLW  0F
03154:  MOVWF  x47
03156:  MOVLW  92
03158:  MOVWF  x46
0315A:  MOVLB  0
0315C:  CALL   2024
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03160:  MOVFF  A41,A47
03164:  MOVFF  A40,A46
03168:  MOVFF  A3F,A45
0316C:  MOVFF  A3E,A44
03170:  MOVLW  0A
03172:  MOVLB  A
03174:  MOVWF  x49
03176:  MOVLW  42
03178:  MOVWF  x48
0317A:  CLRF   x4B
0317C:  MOVLW  01
0317E:  MOVWF  x4A
03180:  MOVLW  0A
03182:  MOVWF  x4D
03184:  MOVLW  43
03186:  MOVWF  x4C
03188:  CLRF   x51
0318A:  CLRF   x50
0318C:  CLRF   x4F
0318E:  MOVLW  01
03190:  MOVWF  x4E
03192:  MOVLB  0
03194:  CALL   2108
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03198:  MOVFF  A40,A44
0319C:  MOVLW  01
0319E:  MOVLB  A
031A0:  MOVWF  x45
031A2:  MOVLW  0F
031A4:  MOVWF  x47
031A6:  MOVLW  89
031A8:  MOVWF  x46
031AA:  MOVLB  0
031AC:  CALL   2024
031B0:  MOVFF  A40,A44
031B4:  MOVLB  A
031B6:  CLRF   x45
031B8:  MOVLW  0F
031BA:  MOVWF  x47
031BC:  MOVLW  92
031BE:  MOVWF  x46
031C0:  MOVLB  0
031C2:  CALL   2024
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
031C6:  MOVLB  A
031C8:  MOVF   x43,W
031CA:  MOVWF  01
031CC:  MOVLB  0
031CE:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04424:  MOVLB  1
04426:  MOVF   xA6,F
04428:  BTFSC  FD8.2
0442A:  BRA    4432
0442C:  MOVLB  0
0442E:  GOTO   458A
04432:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04434:  MOVLW  06
04436:  MOVLB  1
04438:  MOVWF  xAD
0443A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0443C:  MOVLW  D8
0443E:  MOVLB  1
04440:  MOVWF  xAE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04442:  MOVFF  1AB,1BA
04446:  MOVFF  1AC,1BB
0444A:  CLRF   xBC
0444C:  CLRF   xBD
0444E:  MOVF   xBA,W
04450:  MOVWF  00
04452:  CLRF   01
04454:  CLRF   02
04456:  CLRF   03
04458:  MOVFF  00,1AF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0445C:  MOVFF  1AA,1BA
04460:  MOVFF  1AB,1BB
04464:  MOVFF  1AC,1BC
04468:  CLRF   xBD
0446A:  MOVF   xBA,W
0446C:  MOVWF  00
0446E:  CLRF   01
04470:  CLRF   02
04472:  CLRF   03
04474:  MOVFF  00,1B0
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04478:  MOVF   xA9,W
0447A:  MOVWF  00
0447C:  CLRF   01
0447E:  CLRF   02
04480:  CLRF   03
04482:  MOVFF  00,1B1
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04486:  MOVFF  1A7,A44
0448A:  MOVLB  A
0448C:  CLRF   x45
0448E:  MOVLW  0F
04490:  MOVWF  x47
04492:  MOVLW  89
04494:  MOVWF  x46
04496:  MOVLB  0
04498:  CALL   2024
0449C:  MOVFF  1A7,A44
044A0:  MOVLB  A
044A2:  CLRF   x45
044A4:  MOVLW  0F
044A6:  MOVWF  x47
044A8:  MOVLW  92
044AA:  MOVWF  x46
044AC:  MOVLB  0
044AE:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
044B2:  MOVFF  1A8,A41
044B6:  MOVFF  1A7,A40
044BA:  MOVFF  1A6,A3F
044BE:  MOVFF  1A5,A3E
044C2:  MOVLW  01
044C4:  MOVLB  A
044C6:  MOVWF  x43
044C8:  MOVLW  AD
044CA:  MOVWF  x42
044CC:  CLRF   x45
044CE:  MOVLW  01
044D0:  MOVWF  x44
044D2:  MOVLB  0
044D4:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
044D8:  MOVFF  1A7,A44
044DC:  MOVLW  01
044DE:  MOVLB  A
044E0:  MOVWF  x45
044E2:  MOVLW  0F
044E4:  MOVWF  x47
044E6:  MOVLW  89
044E8:  MOVWF  x46
044EA:  MOVLB  0
044EC:  CALL   2024
044F0:  MOVFF  1A7,A44
044F4:  MOVLB  A
044F6:  CLRF   x45
044F8:  MOVLW  0F
044FA:  MOVWF  x47
044FC:  MOVLW  92
044FE:  MOVWF  x46
04500:  MOVLB  0
04502:  CALL   2024
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04506:  MOVFF  1A7,A44
0450A:  MOVLB  A
0450C:  CLRF   x45
0450E:  MOVLW  0F
04510:  MOVWF  x47
04512:  MOVLW  89
04514:  MOVWF  x46
04516:  MOVLB  0
04518:  CALL   2024
0451C:  MOVFF  1A7,A44
04520:  MOVLB  A
04522:  CLRF   x45
04524:  MOVLW  0F
04526:  MOVWF  x47
04528:  MOVLW  92
0452A:  MOVWF  x46
0452C:  MOVLB  0
0452E:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04532:  MOVFF  1A8,A41
04536:  MOVFF  1A7,A40
0453A:  MOVFF  1A6,A3F
0453E:  MOVFF  1A5,A3E
04542:  MOVLW  01
04544:  MOVLB  A
04546:  MOVWF  x43
04548:  MOVLW  AE
0454A:  MOVWF  x42
0454C:  CLRF   x45
0454E:  MOVLW  04
04550:  MOVWF  x44
04552:  MOVLB  0
04554:  CALL   2EDC
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04558:  MOVFF  1A7,A44
0455C:  MOVLW  01
0455E:  MOVLB  A
04560:  MOVWF  x45
04562:  MOVLW  0F
04564:  MOVWF  x47
04566:  MOVLW  89
04568:  MOVWF  x46
0456A:  MOVLB  0
0456C:  CALL   2024
04570:  MOVFF  1A7,A44
04574:  MOVLB  A
04576:  CLRF   x45
04578:  MOVLW  0F
0457A:  MOVWF  x47
0457C:  MOVLW  92
0457E:  MOVWF  x46
04580:  MOVLB  0
04582:  CALL   2024
....................    }
04586:  GOTO   470A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0458A:  MOVLB  1
0458C:  DECFSZ xA6,W
0458E:  BRA    4594
04590:  BRA    459A
04592:  MOVLB  0
04594:  MOVLB  0
04596:  GOTO   470A
0459A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0459C:  MOVLW  06
0459E:  MOVLB  1
045A0:  MOVWF  xB2
045A2:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
045A4:  MOVLW  DC
045A6:  MOVLB  1
045A8:  MOVWF  xB3
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
045AA:  MOVFF  1AC,1BA
045AE:  CLRF   xBB
045B0:  CLRF   xBC
045B2:  CLRF   xBD
045B4:  MOVF   xBA,W
045B6:  MOVWF  00
045B8:  CLRF   01
045BA:  CLRF   02
045BC:  CLRF   03
045BE:  MOVFF  00,1B4
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
045C2:  MOVFF  1AB,1BA
045C6:  MOVFF  1AC,1BB
045CA:  CLRF   xBC
045CC:  CLRF   xBD
045CE:  MOVF   xBA,W
045D0:  MOVWF  00
045D2:  CLRF   01
045D4:  CLRF   02
045D6:  CLRF   03
045D8:  MOVFF  00,1B5
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
045DC:  MOVFF  1AA,1BA
045E0:  MOVFF  1AB,1BB
045E4:  MOVFF  1AC,1BC
045E8:  CLRF   xBD
045EA:  MOVF   xBA,W
045EC:  MOVWF  00
045EE:  CLRF   01
045F0:  CLRF   02
045F2:  CLRF   03
045F4:  MOVFF  00,1B6
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
045F8:  MOVF   xA9,W
045FA:  MOVWF  00
045FC:  CLRF   01
045FE:  CLRF   02
04600:  CLRF   03
04602:  MOVFF  00,1B7
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04606:  MOVFF  1A7,A44
0460A:  MOVLB  A
0460C:  CLRF   x45
0460E:  MOVLW  0F
04610:  MOVWF  x47
04612:  MOVLW  89
04614:  MOVWF  x46
04616:  MOVLB  0
04618:  CALL   2024
0461C:  MOVFF  1A7,A44
04620:  MOVLB  A
04622:  CLRF   x45
04624:  MOVLW  0F
04626:  MOVWF  x47
04628:  MOVLW  92
0462A:  MOVWF  x46
0462C:  MOVLB  0
0462E:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04632:  MOVFF  1A8,A41
04636:  MOVFF  1A7,A40
0463A:  MOVFF  1A6,A3F
0463E:  MOVFF  1A5,A3E
04642:  MOVLW  01
04644:  MOVLB  A
04646:  MOVWF  x43
04648:  MOVLW  B2
0464A:  MOVWF  x42
0464C:  CLRF   x45
0464E:  MOVLW  01
04650:  MOVWF  x44
04652:  MOVLB  0
04654:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
04658:  MOVFF  1A7,A44
0465C:  MOVLW  01
0465E:  MOVLB  A
04660:  MOVWF  x45
04662:  MOVLW  0F
04664:  MOVWF  x47
04666:  MOVLW  89
04668:  MOVWF  x46
0466A:  MOVLB  0
0466C:  CALL   2024
04670:  MOVFF  1A7,A44
04674:  MOVLB  A
04676:  CLRF   x45
04678:  MOVLW  0F
0467A:  MOVWF  x47
0467C:  MOVLW  92
0467E:  MOVWF  x46
04680:  MOVLB  0
04682:  CALL   2024
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04686:  MOVFF  1A7,A44
0468A:  MOVLB  A
0468C:  CLRF   x45
0468E:  MOVLW  0F
04690:  MOVWF  x47
04692:  MOVLW  89
04694:  MOVWF  x46
04696:  MOVLB  0
04698:  CALL   2024
0469C:  MOVFF  1A7,A44
046A0:  MOVLB  A
046A2:  CLRF   x45
046A4:  MOVLW  0F
046A6:  MOVWF  x47
046A8:  MOVLW  92
046AA:  MOVWF  x46
046AC:  MOVLB  0
046AE:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
046B2:  MOVFF  1A8,A41
046B6:  MOVFF  1A7,A40
046BA:  MOVFF  1A6,A3F
046BE:  MOVFF  1A5,A3E
046C2:  MOVLW  01
046C4:  MOVLB  A
046C6:  MOVWF  x43
046C8:  MOVLW  B3
046CA:  MOVWF  x42
046CC:  CLRF   x45
046CE:  MOVLW  05
046D0:  MOVWF  x44
046D2:  MOVLB  0
046D4:  CALL   2EDC
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
046D8:  MOVFF  1A7,A44
046DC:  MOVLW  01
046DE:  MOVLB  A
046E0:  MOVWF  x45
046E2:  MOVLW  0F
046E4:  MOVWF  x47
046E6:  MOVLW  89
046E8:  MOVWF  x46
046EA:  MOVLB  0
046EC:  CALL   2024
046F0:  MOVFF  1A7,A44
046F4:  MOVLB  A
046F6:  CLRF   x45
046F8:  MOVLW  0F
046FA:  MOVWF  x47
046FC:  MOVLW  92
046FE:  MOVWF  x46
04700:  MOVLB  0
04702:  CALL   2024
....................    }
04706:  GOTO   470A
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0470A:  MOVLB  1
0470C:  CLRF   xB8
0470E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04710:  MOVFF  1A8,A41
04714:  MOVFF  1A7,A40
04718:  MOVFF  1A6,A3F
0471C:  MOVFF  1A5,A3E
04720:  CALL   3130
04724:  MOVF   01,W
04726:  ANDLW  01
04728:  SUBLW  01
0472A:  BTFSS  FD8.2
0472C:  GOTO   477E
....................       if(timeout_counter > 10)
04730:  MOVLB  1
04732:  MOVF   xB8,W
04734:  SUBLW  0A
04736:  BTFSS  FD8.0
04738:  BRA    4740
0473A:  MOVLB  0
0473C:  GOTO   4752
04740:  MOVLB  0
....................          delay_ms(200);
04742:  MOVLW  C8
04744:  MOVLB  A
04746:  MOVWF  x3E
04748:  MOVLB  0
0474A:  CALL   1C0E
0474E:  GOTO   475E
....................       else
....................          delay_ms(10);   
04752:  MOVLW  0A
04754:  MOVLB  A
04756:  MOVWF  x3E
04758:  MOVLB  0
0475A:  CALL   1C0E
....................       
....................       if(timeout_counter > 100){
0475E:  MOVLB  1
04760:  MOVF   xB8,W
04762:  SUBLW  64
04764:  BTFSS  FD8.0
04766:  BRA    476E
04768:  MOVLB  0
0476A:  GOTO   4774
0476E:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
04770:  GOTO   477E
....................       }  
....................       timeout_counter++;
04774:  MOVLB  1
04776:  INCF   xB8,F
04778:  MOVLB  0
0477A:  GOTO   4710
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
0477E:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03554:  MOVLB  A
03556:  MOVF   x27,F
03558:  BTFSC  FD8.2
0355A:  BRA    3562
0355C:  MOVLB  0
0355E:  GOTO   36B8
03562:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03564:  MOVLW  06
03566:  MOVLB  A
03568:  MOVWF  x2E
0356A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
0356C:  MOVLW  20
0356E:  MOVLB  A
03570:  MOVWF  x2F
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03572:  MOVFF  A2C,A3B
03576:  MOVFF  A2D,A3C
0357A:  CLRF   x3D
0357C:  CLRF   x3E
0357E:  MOVF   x3B,W
03580:  MOVWF  00
03582:  CLRF   01
03584:  CLRF   02
03586:  CLRF   03
03588:  MOVFF  00,A30
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0358C:  MOVFF  A2B,A3B
03590:  MOVFF  A2C,A3C
03594:  MOVFF  A2D,A3D
03598:  CLRF   x3E
0359A:  MOVF   x3B,W
0359C:  MOVWF  00
0359E:  CLRF   01
035A0:  CLRF   02
035A2:  CLRF   03
035A4:  MOVFF  00,A31
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
035A8:  MOVF   x2A,W
035AA:  MOVWF  00
035AC:  CLRF   01
035AE:  CLRF   02
035B0:  CLRF   03
035B2:  MOVFF  00,A32
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
035B6:  MOVFF  A28,A44
035BA:  CLRF   x45
035BC:  MOVLW  0F
035BE:  MOVWF  x47
035C0:  MOVLW  89
035C2:  MOVWF  x46
035C4:  MOVLB  0
035C6:  CALL   2024
035CA:  MOVFF  A28,A44
035CE:  MOVLB  A
035D0:  CLRF   x45
035D2:  MOVLW  0F
035D4:  MOVWF  x47
035D6:  MOVLW  92
035D8:  MOVWF  x46
035DA:  MOVLB  0
035DC:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
035E0:  MOVFF  A29,A41
035E4:  MOVFF  A28,A40
035E8:  MOVFF  A27,A3F
035EC:  MOVFF  A26,A3E
035F0:  MOVLW  0A
035F2:  MOVLB  A
035F4:  MOVWF  x43
035F6:  MOVLW  2E
035F8:  MOVWF  x42
035FA:  CLRF   x45
035FC:  MOVLW  01
035FE:  MOVWF  x44
03600:  MOVLB  0
03602:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
03606:  MOVFF  A28,A44
0360A:  MOVLW  01
0360C:  MOVLB  A
0360E:  MOVWF  x45
03610:  MOVLW  0F
03612:  MOVWF  x47
03614:  MOVLW  89
03616:  MOVWF  x46
03618:  MOVLB  0
0361A:  CALL   2024
0361E:  MOVFF  A28,A44
03622:  MOVLB  A
03624:  CLRF   x45
03626:  MOVLW  0F
03628:  MOVWF  x47
0362A:  MOVLW  92
0362C:  MOVWF  x46
0362E:  MOVLB  0
03630:  CALL   2024
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03634:  MOVFF  A28,A44
03638:  MOVLB  A
0363A:  CLRF   x45
0363C:  MOVLW  0F
0363E:  MOVWF  x47
03640:  MOVLW  89
03642:  MOVWF  x46
03644:  MOVLB  0
03646:  CALL   2024
0364A:  MOVFF  A28,A44
0364E:  MOVLB  A
03650:  CLRF   x45
03652:  MOVLW  0F
03654:  MOVWF  x47
03656:  MOVLW  92
03658:  MOVWF  x46
0365A:  MOVLB  0
0365C:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
03660:  MOVFF  A29,A41
03664:  MOVFF  A28,A40
03668:  MOVFF  A27,A3F
0366C:  MOVFF  A26,A3E
03670:  MOVLW  0A
03672:  MOVLB  A
03674:  MOVWF  x43
03676:  MOVLW  2F
03678:  MOVWF  x42
0367A:  CLRF   x45
0367C:  MOVLW  04
0367E:  MOVWF  x44
03680:  MOVLB  0
03682:  CALL   2EDC
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03686:  MOVFF  A28,A44
0368A:  MOVLW  01
0368C:  MOVLB  A
0368E:  MOVWF  x45
03690:  MOVLW  0F
03692:  MOVWF  x47
03694:  MOVLW  89
03696:  MOVWF  x46
03698:  MOVLB  0
0369A:  CALL   2024
0369E:  MOVFF  A28,A44
036A2:  MOVLB  A
036A4:  CLRF   x45
036A6:  MOVLW  0F
036A8:  MOVWF  x47
036AA:  MOVLW  92
036AC:  MOVWF  x46
036AE:  MOVLB  0
036B0:  CALL   2024
....................    }
036B4:  GOTO   3836
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
036B8:  MOVLB  A
036BA:  DECFSZ x27,W
036BC:  BRA    36C2
036BE:  BRA    36C8
036C0:  MOVLB  0
036C2:  MOVLB  0
036C4:  GOTO   3836
036C8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
036CA:  MOVLW  06
036CC:  MOVLB  A
036CE:  MOVWF  x33
036D0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
036D2:  MOVLW  21
036D4:  MOVLB  A
036D6:  MOVWF  x34
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
036D8:  MOVFF  A2D,A3B
036DC:  CLRF   x3C
036DE:  CLRF   x3D
036E0:  CLRF   x3E
036E2:  MOVF   x3B,W
036E4:  MOVWF  00
036E6:  CLRF   01
036E8:  CLRF   02
036EA:  CLRF   03
036EC:  MOVFF  00,A35
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
036F0:  MOVFF  A2C,A3B
036F4:  MOVFF  A2D,A3C
036F8:  CLRF   x3D
036FA:  CLRF   x3E
036FC:  MOVF   x3B,W
036FE:  MOVWF  00
03700:  CLRF   01
03702:  CLRF   02
03704:  CLRF   03
03706:  MOVFF  00,A36
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0370A:  MOVFF  A2B,A3B
0370E:  MOVFF  A2C,A3C
03712:  MOVFF  A2D,A3D
03716:  CLRF   x3E
03718:  MOVF   x3B,W
0371A:  MOVWF  00
0371C:  CLRF   01
0371E:  CLRF   02
03720:  CLRF   03
03722:  MOVFF  00,A37
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03726:  MOVF   x2A,W
03728:  MOVWF  00
0372A:  CLRF   01
0372C:  CLRF   02
0372E:  CLRF   03
03730:  MOVFF  00,A38
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03734:  MOVFF  A28,A44
03738:  CLRF   x45
0373A:  MOVLW  0F
0373C:  MOVWF  x47
0373E:  MOVLW  89
03740:  MOVWF  x46
03742:  MOVLB  0
03744:  CALL   2024
03748:  MOVFF  A28,A44
0374C:  MOVLB  A
0374E:  CLRF   x45
03750:  MOVLW  0F
03752:  MOVWF  x47
03754:  MOVLW  92
03756:  MOVWF  x46
03758:  MOVLB  0
0375A:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0375E:  MOVFF  A29,A41
03762:  MOVFF  A28,A40
03766:  MOVFF  A27,A3F
0376A:  MOVFF  A26,A3E
0376E:  MOVLW  0A
03770:  MOVLB  A
03772:  MOVWF  x43
03774:  MOVLW  33
03776:  MOVWF  x42
03778:  CLRF   x45
0377A:  MOVLW  01
0377C:  MOVWF  x44
0377E:  MOVLB  0
03780:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
03784:  MOVFF  A28,A44
03788:  MOVLW  01
0378A:  MOVLB  A
0378C:  MOVWF  x45
0378E:  MOVLW  0F
03790:  MOVWF  x47
03792:  MOVLW  89
03794:  MOVWF  x46
03796:  MOVLB  0
03798:  CALL   2024
0379C:  MOVFF  A28,A44
037A0:  MOVLB  A
037A2:  CLRF   x45
037A4:  MOVLW  0F
037A6:  MOVWF  x47
037A8:  MOVLW  92
037AA:  MOVWF  x46
037AC:  MOVLB  0
037AE:  CALL   2024
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
037B2:  MOVFF  A28,A44
037B6:  MOVLB  A
037B8:  CLRF   x45
037BA:  MOVLW  0F
037BC:  MOVWF  x47
037BE:  MOVLW  89
037C0:  MOVWF  x46
037C2:  MOVLB  0
037C4:  CALL   2024
037C8:  MOVFF  A28,A44
037CC:  MOVLB  A
037CE:  CLRF   x45
037D0:  MOVLW  0F
037D2:  MOVWF  x47
037D4:  MOVLW  92
037D6:  MOVWF  x46
037D8:  MOVLB  0
037DA:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
037DE:  MOVFF  A29,A41
037E2:  MOVFF  A28,A40
037E6:  MOVFF  A27,A3F
037EA:  MOVFF  A26,A3E
037EE:  MOVLW  0A
037F0:  MOVLB  A
037F2:  MOVWF  x43
037F4:  MOVLW  34
037F6:  MOVWF  x42
037F8:  CLRF   x45
037FA:  MOVLW  05
037FC:  MOVWF  x44
037FE:  MOVLB  0
03800:  CALL   2EDC
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03804:  MOVFF  A28,A44
03808:  MOVLW  01
0380A:  MOVLB  A
0380C:  MOVWF  x45
0380E:  MOVLW  0F
03810:  MOVWF  x47
03812:  MOVLW  89
03814:  MOVWF  x46
03816:  MOVLB  0
03818:  CALL   2024
0381C:  MOVFF  A28,A44
03820:  MOVLB  A
03822:  CLRF   x45
03824:  MOVLW  0F
03826:  MOVWF  x47
03828:  MOVLW  92
0382A:  MOVWF  x46
0382C:  MOVLB  0
0382E:  CALL   2024
....................    }
03832:  GOTO   3836
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03836:  MOVLB  A
03838:  CLRF   x39
0383A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0383C:  MOVFF  A29,A41
03840:  MOVFF  A28,A40
03844:  MOVFF  A27,A3F
03848:  MOVFF  A26,A3E
0384C:  CALL   3130
03850:  MOVF   01,W
03852:  ANDLW  01
03854:  SUBLW  01
03856:  BTFSS  FD8.2
03858:  GOTO   38AA
....................       if(timeout_counter > 10)
0385C:  MOVLB  A
0385E:  MOVF   x39,W
03860:  SUBLW  0A
03862:  BTFSS  FD8.0
03864:  BRA    386C
03866:  MOVLB  0
03868:  GOTO   387E
0386C:  MOVLB  0
....................          delay_ms(200);
0386E:  MOVLW  C8
03870:  MOVLB  A
03872:  MOVWF  x3E
03874:  MOVLB  0
03876:  CALL   1C0E
0387A:  GOTO   388A
....................       else
....................          delay_ms(10);   
0387E:  MOVLW  0A
03880:  MOVLB  A
03882:  MOVWF  x3E
03884:  MOVLB  0
03886:  CALL   1C0E
....................       
....................       if(timeout_counter > 100){
0388A:  MOVLB  A
0388C:  MOVF   x39,W
0388E:  SUBLW  64
03890:  BTFSS  FD8.0
03892:  BRA    389A
03894:  MOVLB  0
03896:  GOTO   38A0
0389A:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0389C:  GOTO   38AA
....................       }  
....................       timeout_counter++;
038A0:  MOVLB  A
038A2:  INCF   x39,F
038A4:  MOVLB  0
038A6:  GOTO   383C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
038AA:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
023F4:  MOVLB  2
023F6:  MOVF   x6E,F
023F8:  BTFSC  FD8.2
023FA:  BRA    2402
023FC:  MOVLB  0
023FE:  GOTO   24F4
02402:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02404:  MOVLW  03
02406:  MOVLB  2
02408:  MOVWF  x7B
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0240A:  MOVFF  273,285
0240E:  MOVFF  274,286
02412:  CLRF   x87
02414:  CLRF   x88
02416:  MOVF   x85,W
02418:  MOVWF  00
0241A:  CLRF   01
0241C:  CLRF   02
0241E:  CLRF   03
02420:  MOVFF  00,27C
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02424:  MOVFF  272,285
02428:  MOVFF  273,286
0242C:  MOVFF  274,287
02430:  CLRF   x88
02432:  MOVF   x85,W
02434:  MOVWF  00
02436:  CLRF   01
02438:  CLRF   02
0243A:  CLRF   03
0243C:  MOVFF  00,27D
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02440:  MOVF   x71,W
02442:  MOVWF  00
02444:  CLRF   01
02446:  CLRF   02
02448:  CLRF   03
0244A:  MOVFF  00,27E
....................             
....................       output_low(flash_stream.cs_pin);
0244E:  MOVFF  26F,A44
02452:  MOVLB  A
02454:  CLRF   x45
02456:  MOVLW  0F
02458:  MOVWF  x47
0245A:  MOVLW  89
0245C:  MOVWF  x46
0245E:  MOVLB  0
02460:  CALL   2024
02464:  MOVFF  26F,A44
02468:  MOVLB  A
0246A:  CLRF   x45
0246C:  MOVLW  0F
0246E:  MOVWF  x47
02470:  MOVLW  92
02472:  MOVWF  x46
02474:  MOVLB  0
02476:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0247A:  MOVFF  270,A47
0247E:  MOVFF  26F,A46
02482:  MOVFF  26E,A45
02486:  MOVFF  26D,A44
0248A:  MOVLW  02
0248C:  MOVLB  A
0248E:  MOVWF  x49
02490:  MOVLW  7B
02492:  MOVWF  x48
02494:  CLRF   x4B
02496:  MOVLW  04
02498:  MOVWF  x4A
0249A:  MOVFF  276,A4D
0249E:  MOVFF  275,A4C
024A2:  MOVFF  27A,A51
024A6:  MOVFF  279,A50
024AA:  MOVFF  278,A4F
024AE:  MOVFF  277,A4E
024B2:  MOVLB  0
024B4:  CALL   2108
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
024B8:  MOVLW  02
024BA:  MOVWF  00
024BC:  DECFSZ 00,F
024BE:  BRA    24BC
024C0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
024C2:  MOVFF  26F,A44
024C6:  MOVLW  01
024C8:  MOVLB  A
024CA:  MOVWF  x45
024CC:  MOVLW  0F
024CE:  MOVWF  x47
024D0:  MOVLW  89
024D2:  MOVWF  x46
024D4:  MOVLB  0
024D6:  CALL   2024
024DA:  MOVFF  26F,A44
024DE:  MOVLB  A
024E0:  CLRF   x45
024E2:  MOVLW  0F
024E4:  MOVWF  x47
024E6:  MOVLW  92
024E8:  MOVWF  x46
024EA:  MOVLB  0
024EC:  CALL   2024
....................    }
024F0:  GOTO   260A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
024F4:  MOVLB  2
024F6:  DECFSZ x6E,W
024F8:  BRA    24FE
024FA:  BRA    2504
024FC:  MOVLB  0
024FE:  MOVLB  0
02500:  GOTO   260A
02504:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02506:  MOVLW  13
02508:  MOVLB  2
0250A:  MOVWF  x7F
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0250C:  MOVFF  274,285
02510:  CLRF   x86
02512:  CLRF   x87
02514:  CLRF   x88
02516:  MOVF   x85,W
02518:  MOVWF  00
0251A:  CLRF   01
0251C:  CLRF   02
0251E:  CLRF   03
02520:  MOVFF  00,280
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02524:  MOVFF  273,285
02528:  MOVFF  274,286
0252C:  CLRF   x87
0252E:  CLRF   x88
02530:  MOVF   x85,W
02532:  MOVWF  00
02534:  CLRF   01
02536:  CLRF   02
02538:  CLRF   03
0253A:  MOVFF  00,281
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0253E:  MOVFF  272,285
02542:  MOVFF  273,286
02546:  MOVFF  274,287
0254A:  CLRF   x88
0254C:  MOVF   x85,W
0254E:  MOVWF  00
02550:  CLRF   01
02552:  CLRF   02
02554:  CLRF   03
02556:  MOVFF  00,282
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0255A:  MOVF   x71,W
0255C:  MOVWF  00
0255E:  CLRF   01
02560:  CLRF   02
02562:  CLRF   03
02564:  MOVFF  00,283
....................    
....................       output_low(flash_stream.cs_pin);
02568:  MOVFF  26F,A44
0256C:  MOVLB  A
0256E:  CLRF   x45
02570:  MOVLW  0F
02572:  MOVWF  x47
02574:  MOVLW  89
02576:  MOVWF  x46
02578:  MOVLB  0
0257A:  CALL   2024
0257E:  MOVFF  26F,A44
02582:  MOVLB  A
02584:  CLRF   x45
02586:  MOVLW  0F
02588:  MOVWF  x47
0258A:  MOVLW  92
0258C:  MOVWF  x46
0258E:  MOVLB  0
02590:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02594:  MOVFF  270,A47
02598:  MOVFF  26F,A46
0259C:  MOVFF  26E,A45
025A0:  MOVFF  26D,A44
025A4:  MOVLW  02
025A6:  MOVLB  A
025A8:  MOVWF  x49
025AA:  MOVLW  7F
025AC:  MOVWF  x48
025AE:  CLRF   x4B
025B0:  MOVLW  05
025B2:  MOVWF  x4A
025B4:  MOVFF  276,A4D
025B8:  MOVFF  275,A4C
025BC:  MOVFF  27A,A51
025C0:  MOVFF  279,A50
025C4:  MOVFF  278,A4F
025C8:  MOVFF  277,A4E
025CC:  MOVLB  0
025CE:  CALL   2108
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
025D2:  MOVLW  02
025D4:  MOVWF  00
025D6:  DECFSZ 00,F
025D8:  BRA    25D6
025DA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
025DC:  MOVFF  26F,A44
025E0:  MOVLW  01
025E2:  MOVLB  A
025E4:  MOVWF  x45
025E6:  MOVLW  0F
025E8:  MOVWF  x47
025EA:  MOVLW  89
025EC:  MOVWF  x46
025EE:  MOVLB  0
025F0:  CALL   2024
025F4:  MOVFF  26F,A44
025F8:  MOVLB  A
025FA:  CLRF   x45
025FC:  MOVLW  0F
025FE:  MOVWF  x47
02600:  MOVLW  92
02602:  MOVWF  x46
02604:  MOVLB  0
02606:  CALL   2024
....................    }
....................    return;
0260A:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
031D0:  MOVLB  A
031D2:  MOVF   x27,F
031D4:  BTFSC  FD8.2
031D6:  BRA    31DE
031D8:  MOVLB  0
031DA:  GOTO   334C
031DE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
031E0:  MOVLW  06
031E2:  MOVLB  A
031E4:  MOVWF  x32
031E6:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
031E8:  MOVLW  02
031EA:  MOVLB  A
031EC:  MOVWF  x33
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
031EE:  MOVFF  A2C,A3F
031F2:  MOVFF  A2D,A40
031F6:  CLRF   x41
031F8:  CLRF   x42
031FA:  MOVF   x3F,W
031FC:  MOVWF  00
031FE:  CLRF   01
03200:  CLRF   02
03202:  CLRF   03
03204:  MOVFF  00,A34
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03208:  MOVFF  A2B,A3F
0320C:  MOVFF  A2C,A40
03210:  MOVFF  A2D,A41
03214:  CLRF   x42
03216:  MOVF   x3F,W
03218:  MOVWF  00
0321A:  CLRF   01
0321C:  CLRF   02
0321E:  CLRF   03
03220:  MOVFF  00,A35
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03224:  MOVF   x2A,W
03226:  MOVWF  00
03228:  CLRF   01
0322A:  CLRF   02
0322C:  CLRF   03
0322E:  MOVFF  00,A36
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03232:  MOVFF  A28,A44
03236:  CLRF   x45
03238:  MOVLW  0F
0323A:  MOVWF  x47
0323C:  MOVLW  89
0323E:  MOVWF  x46
03240:  MOVLB  0
03242:  CALL   2024
03246:  MOVFF  A28,A44
0324A:  MOVLB  A
0324C:  CLRF   x45
0324E:  MOVLW  0F
03250:  MOVWF  x47
03252:  MOVLW  92
03254:  MOVWF  x46
03256:  MOVLB  0
03258:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0325C:  MOVFF  A29,A41
03260:  MOVFF  A28,A40
03264:  MOVFF  A27,A3F
03268:  MOVFF  A26,A3E
0326C:  MOVLW  0A
0326E:  MOVLB  A
03270:  MOVWF  x43
03272:  MOVLW  32
03274:  MOVWF  x42
03276:  CLRF   x45
03278:  MOVLW  01
0327A:  MOVWF  x44
0327C:  MOVLB  0
0327E:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
03282:  MOVFF  A28,A44
03286:  MOVLW  01
03288:  MOVLB  A
0328A:  MOVWF  x45
0328C:  MOVLW  0F
0328E:  MOVWF  x47
03290:  MOVLW  89
03292:  MOVWF  x46
03294:  MOVLB  0
03296:  CALL   2024
0329A:  MOVFF  A28,A44
0329E:  MOVLB  A
032A0:  CLRF   x45
032A2:  MOVLW  0F
032A4:  MOVWF  x47
032A6:  MOVLW  92
032A8:  MOVWF  x46
032AA:  MOVLB  0
032AC:  CALL   2024
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
032B0:  MOVFF  A28,A44
032B4:  MOVLB  A
032B6:  CLRF   x45
032B8:  MOVLW  0F
032BA:  MOVWF  x47
032BC:  MOVLW  89
032BE:  MOVWF  x46
032C0:  MOVLB  0
032C2:  CALL   2024
032C6:  MOVFF  A28,A44
032CA:  MOVLB  A
032CC:  CLRF   x45
032CE:  MOVLW  0F
032D0:  MOVWF  x47
032D2:  MOVLW  92
032D4:  MOVWF  x46
032D6:  MOVLB  0
032D8:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
032DC:  MOVFF  A29,A41
032E0:  MOVFF  A28,A40
032E4:  MOVFF  A27,A3F
032E8:  MOVFF  A26,A3E
032EC:  MOVLW  0A
032EE:  MOVLB  A
032F0:  MOVWF  x43
032F2:  MOVLW  33
032F4:  MOVWF  x42
032F6:  MOVLW  04
032F8:  MOVWF  x44
032FA:  MOVFF  A2F,A46
032FE:  MOVFF  A2E,A45
03302:  MOVFF  A31,A48
03306:  MOVFF  A30,A47
0330A:  MOVLB  0
0330C:  CALL   2FC4
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03310:  MOVLW  02
03312:  MOVWF  00
03314:  DECFSZ 00,F
03316:  BRA    3314
03318:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0331A:  MOVFF  A28,A44
0331E:  MOVLW  01
03320:  MOVLB  A
03322:  MOVWF  x45
03324:  MOVLW  0F
03326:  MOVWF  x47
03328:  MOVLW  89
0332A:  MOVWF  x46
0332C:  MOVLB  0
0332E:  CALL   2024
03332:  MOVFF  A28,A44
03336:  MOVLB  A
03338:  CLRF   x45
0333A:  MOVLW  0F
0333C:  MOVWF  x47
0333E:  MOVLW  92
03340:  MOVWF  x46
03342:  MOVLB  0
03344:  CALL   2024
....................    }
03348:  GOTO   34DE
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0334C:  MOVLB  A
0334E:  DECFSZ x27,W
03350:  BRA    3356
03352:  BRA    335C
03354:  MOVLB  0
03356:  MOVLB  0
03358:  GOTO   34DE
0335C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0335E:  MOVLW  06
03360:  MOVLB  A
03362:  MOVWF  x37
03364:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03366:  MOVLW  12
03368:  MOVLB  A
0336A:  MOVWF  x38
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0336C:  MOVFF  A2D,A3F
03370:  CLRF   x40
03372:  CLRF   x41
03374:  CLRF   x42
03376:  MOVF   x3F,W
03378:  MOVWF  00
0337A:  CLRF   01
0337C:  CLRF   02
0337E:  CLRF   03
03380:  MOVFF  00,A39
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03384:  MOVFF  A2C,A3F
03388:  MOVFF  A2D,A40
0338C:  CLRF   x41
0338E:  CLRF   x42
03390:  MOVF   x3F,W
03392:  MOVWF  00
03394:  CLRF   01
03396:  CLRF   02
03398:  CLRF   03
0339A:  MOVFF  00,A3A
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0339E:  MOVFF  A2B,A3F
033A2:  MOVFF  A2C,A40
033A6:  MOVFF  A2D,A41
033AA:  CLRF   x42
033AC:  MOVF   x3F,W
033AE:  MOVWF  00
033B0:  CLRF   01
033B2:  CLRF   02
033B4:  CLRF   03
033B6:  MOVFF  00,A3B
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
033BA:  MOVF   x2A,W
033BC:  MOVWF  00
033BE:  CLRF   01
033C0:  CLRF   02
033C2:  CLRF   03
033C4:  MOVFF  00,A3C
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
033C8:  MOVFF  A28,A44
033CC:  CLRF   x45
033CE:  MOVLW  0F
033D0:  MOVWF  x47
033D2:  MOVLW  89
033D4:  MOVWF  x46
033D6:  MOVLB  0
033D8:  CALL   2024
033DC:  MOVFF  A28,A44
033E0:  MOVLB  A
033E2:  CLRF   x45
033E4:  MOVLW  0F
033E6:  MOVWF  x47
033E8:  MOVLW  92
033EA:  MOVWF  x46
033EC:  MOVLB  0
033EE:  CALL   2024
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
033F2:  MOVFF  A29,A41
033F6:  MOVFF  A28,A40
033FA:  MOVFF  A27,A3F
033FE:  MOVFF  A26,A3E
03402:  MOVLW  0A
03404:  MOVLB  A
03406:  MOVWF  x43
03408:  MOVLW  37
0340A:  MOVWF  x42
0340C:  CLRF   x45
0340E:  MOVLW  01
03410:  MOVWF  x44
03412:  MOVLB  0
03414:  CALL   2EDC
....................       output_high(flash_stream.cs_pin);
03418:  MOVFF  A28,A44
0341C:  MOVLW  01
0341E:  MOVLB  A
03420:  MOVWF  x45
03422:  MOVLW  0F
03424:  MOVWF  x47
03426:  MOVLW  89
03428:  MOVWF  x46
0342A:  MOVLB  0
0342C:  CALL   2024
03430:  MOVFF  A28,A44
03434:  MOVLB  A
03436:  CLRF   x45
03438:  MOVLW  0F
0343A:  MOVWF  x47
0343C:  MOVLW  92
0343E:  MOVWF  x46
03440:  MOVLB  0
03442:  CALL   2024
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03446:  MOVFF  A28,A44
0344A:  MOVLB  A
0344C:  CLRF   x45
0344E:  MOVLW  0F
03450:  MOVWF  x47
03452:  MOVLW  89
03454:  MOVWF  x46
03456:  MOVLB  0
03458:  CALL   2024
0345C:  MOVFF  A28,A44
03460:  MOVLB  A
03462:  CLRF   x45
03464:  MOVLW  0F
03466:  MOVWF  x47
03468:  MOVLW  92
0346A:  MOVWF  x46
0346C:  MOVLB  0
0346E:  CALL   2024
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03472:  MOVFF  A29,A41
03476:  MOVFF  A28,A40
0347A:  MOVFF  A27,A3F
0347E:  MOVFF  A26,A3E
03482:  MOVLW  0A
03484:  MOVLB  A
03486:  MOVWF  x43
03488:  MOVLW  38
0348A:  MOVWF  x42
0348C:  MOVLW  05
0348E:  MOVWF  x44
03490:  MOVFF  A2F,A46
03494:  MOVFF  A2E,A45
03498:  MOVFF  A31,A48
0349C:  MOVFF  A30,A47
034A0:  MOVLB  0
034A2:  CALL   2FC4
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
034A6:  MOVLW  02
034A8:  MOVWF  00
034AA:  DECFSZ 00,F
034AC:  BRA    34AA
034AE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
034B0:  MOVFF  A28,A44
034B4:  MOVLW  01
034B6:  MOVLB  A
034B8:  MOVWF  x45
034BA:  MOVLW  0F
034BC:  MOVWF  x47
034BE:  MOVLW  89
034C0:  MOVWF  x46
034C2:  MOVLB  0
034C4:  CALL   2024
034C8:  MOVFF  A28,A44
034CC:  MOVLB  A
034CE:  CLRF   x45
034D0:  MOVLW  0F
034D2:  MOVWF  x47
034D4:  MOVLW  92
034D6:  MOVWF  x46
034D8:  MOVLB  0
034DA:  CALL   2024
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
034DE:  MOVLB  A
034E0:  CLRF   x3D
034E2:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
034E4:  MOVFF  A29,A41
034E8:  MOVFF  A28,A40
034EC:  MOVFF  A27,A3F
034F0:  MOVFF  A26,A3E
034F4:  CALL   3130
034F8:  MOVF   01,W
034FA:  ANDLW  01
034FC:  SUBLW  01
034FE:  BTFSS  FD8.2
03500:  GOTO   3552
....................       if(timeout_counter > 10)
03504:  MOVLB  A
03506:  MOVF   x3D,W
03508:  SUBLW  0A
0350A:  BTFSS  FD8.0
0350C:  BRA    3514
0350E:  MOVLB  0
03510:  GOTO   3526
03514:  MOVLB  0
....................          delay_ms(200);
03516:  MOVLW  C8
03518:  MOVLB  A
0351A:  MOVWF  x3E
0351C:  MOVLB  0
0351E:  CALL   1C0E
03522:  GOTO   3532
....................       else
....................          delay_ms(10);   
03526:  MOVLW  0A
03528:  MOVLB  A
0352A:  MOVWF  x3E
0352C:  MOVLB  0
0352E:  CALL   1C0E
....................       
....................       if(timeout_counter > 100){
03532:  MOVLB  A
03534:  MOVF   x3D,W
03536:  SUBLW  64
03538:  BTFSS  FD8.0
0353A:  BRA    3542
0353C:  MOVLB  0
0353E:  GOTO   3548
03542:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03544:  GOTO   3552
....................       }  
....................       timeout_counter++;
03548:  MOVLB  A
0354A:  INCF   x3D,F
0354C:  MOVLB  0
0354E:  GOTO   34E4
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03552:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
0232E:  MOVLW  9F
02330:  MOVLB  A
02332:  MOVWF  x3E
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02334:  MOVFF  A28,A44
02338:  CLRF   x45
0233A:  MOVLW  0F
0233C:  MOVWF  x47
0233E:  MOVLW  89
02340:  MOVWF  x46
02342:  MOVLB  0
02344:  CALL   2024
02348:  MOVFF  A28,A44
0234C:  MOVLB  A
0234E:  CLRF   x45
02350:  MOVLW  0F
02352:  MOVWF  x47
02354:  MOVLW  92
02356:  MOVWF  x46
02358:  MOVLB  0
0235A:  CALL   2024
....................    delay_us(10);  
0235E:  MOVLW  0D
02360:  MOVWF  00
02362:  DECFSZ 00,F
02364:  BRA    2362
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02366:  MOVFF  A29,A47
0236A:  MOVFF  A28,A46
0236E:  MOVFF  A27,A45
02372:  MOVFF  A26,A44
02376:  MOVLW  0A
02378:  MOVLB  A
0237A:  MOVWF  x49
0237C:  MOVLW  3E
0237E:  MOVWF  x48
02380:  CLRF   x4B
02382:  MOVLW  01
02384:  MOVWF  x4A
02386:  MOVLW  0A
02388:  MOVWF  x4D
0238A:  MOVLW  2A
0238C:  MOVWF  x4C
0238E:  CLRF   x51
02390:  CLRF   x50
02392:  CLRF   x4F
02394:  MOVLW  14
02396:  MOVWF  x4E
02398:  MOVLB  0
0239A:  CALL   2108
....................    output_high(flash_stream.cs_pin);
0239E:  MOVFF  A28,A44
023A2:  MOVLW  01
023A4:  MOVLB  A
023A6:  MOVWF  x45
023A8:  MOVLW  0F
023AA:  MOVWF  x47
023AC:  MOVLW  89
023AE:  MOVWF  x46
023B0:  MOVLB  0
023B2:  CALL   2024
023B6:  MOVFF  A28,A44
023BA:  MOVLB  A
023BC:  CLRF   x45
023BE:  MOVLW  0F
023C0:  MOVWF  x47
023C2:  MOVLW  92
023C4:  MOVWF  x46
023C6:  MOVLB  0
023C8:  CALL   2024
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
023CC:  MOVLB  A
023CE:  MOVF   x2A,W
023D0:  SUBLW  20
023D2:  BTFSC  FD8.2
023D4:  BRA    23DC
023D6:  MOVLB  0
023D8:  GOTO   23EA
023DC:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
023DE:  MOVLW  01
023E0:  MOVWF  01
023E2:  GOTO   23F2
....................    }
023E6:  GOTO   23F2
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
023EA:  MOVLW  00
023EC:  MOVWF  01
023EE:  GOTO   23F2
....................    }
023F2:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03E68:  MOVLB  9
03E6A:  MOVF   xE6,W
03E6C:  MOVWF  FE9
03E6E:  MOVF   xE7,W
03E70:  MOVWF  FEA
03E72:  MOVFF  FEF,9E9
03E76:  MOVLW  01
03E78:  MOVWF  xEA
03E7A:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03E7C:  MOVLB  9
03E7E:  MOVF   xE8,W
03E80:  SUBWF  xEA,W
03E82:  BTFSS  FD8.0
03E84:  BRA    3E8C
03E86:  MOVLB  0
03E88:  GOTO   3EA8
03E8C:  MOVLB  0
....................       crc ^= frame[i++];
03E8E:  MOVLB  9
03E90:  MOVF   xEA,W
03E92:  INCF   xEA,F
03E94:  ADDWF  xE6,W
03E96:  MOVWF  FE9
03E98:  MOVLW  00
03E9A:  ADDWFC xE7,W
03E9C:  MOVWF  FEA
03E9E:  MOVF   FEF,W
03EA0:  XORWF  xE9,F
03EA2:  MOVLB  0
03EA4:  GOTO   3E7C
....................    return crc;
03EA8:  MOVLB  9
03EAA:  MOVF   xE9,W
03EAC:  MOVWF  01
03EAE:  MOVLB  0
03EB0:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size)
*
09104:  MOVLW  01
09106:  MOVLB  2
09108:  SUBWF  x6F,W
0910A:  ADDWF  x6D,W
0910C:  MOVWF  FE9
0910E:  MOVLW  00
09110:  ADDWFC x6E,W
09112:  MOVWF  FEA
09114:  MOVFF  FEF,270
09118:  MOVLW  01
0911A:  SUBWF  x6F,W
0911C:  MOVWF  x72
0911E:  MOVFF  26E,9E7
09122:  MOVFF  26D,9E6
09126:  MOVFF  272,9E8
0912A:  MOVLB  0
0912C:  CALL   3E68
09130:  MOVFF  01,271
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
09134:  MOVLB  2
09136:  MOVF   x71,W
09138:  SUBWF  x70,W
0913A:  BTFSS  FD8.2
0913C:  BRA    9144
0913E:  MOVLB  0
09140:  GOTO   914C
09144:  MOVLB  0
09146:  MOVLW  00
09148:  GOTO   914E
0914C:  MOVLW  01
0914E:  MOVWF  01
09150:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
*
094B2:  MOVLB  2
094B4:  MOVF   x73,W
094B6:  ADDWF  x71,W
094B8:  MOVWF  FE9
094BA:  MOVLW  00
094BC:  ADDWFC x72,W
094BE:  MOVWF  FEA
094C0:  MOVFF  270,00
094C4:  CLRF   01
094C6:  CLRF   02
094C8:  CLRF   03
094CA:  MOVFF  00,FEF
....................     buf[index + 1] = (int8)(value >> 16);
094CE:  MOVLW  01
094D0:  ADDWF  x73,W
094D2:  ADDWF  x71,W
094D4:  MOVWF  FE9
094D6:  MOVLW  00
094D8:  ADDWFC x72,W
094DA:  MOVWF  FEA
094DC:  MOVFF  26F,00
094E0:  MOVFF  270,01
094E4:  CLRF   02
094E6:  CLRF   03
094E8:  MOVFF  00,FEF
....................     buf[index + 2] = (int8)(value >>  8);
094EC:  MOVLW  02
094EE:  ADDWF  x73,W
094F0:  ADDWF  x71,W
094F2:  MOVWF  FE9
094F4:  MOVLW  00
094F6:  ADDWFC x72,W
094F8:  MOVWF  FEA
094FA:  MOVFF  26E,00
094FE:  MOVFF  26F,01
09502:  MOVFF  270,02
09506:  CLRF   03
09508:  MOVFF  00,FEF
....................     buf[index + 3] = (int8)(value      );   // LSB
0950C:  MOVLW  03
0950E:  ADDWF  x73,W
09510:  ADDWF  x71,W
09512:  MOVWF  FE9
09514:  MOVLW  00
09516:  ADDWFC x72,W
09518:  MOVWF  FEA
0951A:  MOVFF  26D,FEF
0951E:  MOVLB  0
09520:  RETURN 0
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
*
09152:  MOVLB  2
09154:  MOVF   x2E,W
09156:  ADDWF  x2C,W
09158:  MOVWF  FE9
0915A:  MOVLW  00
0915C:  ADDWFC x2D,W
0915E:  MOVWF  FEA
09160:  MOVF   FEF,W
09162:  CLRF   x32
09164:  CLRF   x31
09166:  CLRF   x30
09168:  MOVWF  x2F
0916A:  MOVLW  01
0916C:  ADDWF  x2E,W
0916E:  ADDWF  x2C,W
09170:  MOVWF  FE9
09172:  MOVLW  00
09174:  ADDWFC x2D,W
09176:  MOVWF  FEA
09178:  MOVF   FEF,W
0917A:  CLRF   x37
0917C:  CLRF   x36
0917E:  CLRF   x35
09180:  MOVWF  x34
09182:  MOVFF  236,03
09186:  MOVFF  235,02
0918A:  MOVFF  234,01
0918E:  CLRF   00
09190:  MOVF   00,W
09192:  IORWF  x2F,F
09194:  MOVF   01,W
09196:  IORWF  x30,F
09198:  MOVF   02,W
0919A:  IORWF  x31,F
0919C:  MOVF   03,W
0919E:  IORWF  x32,F
091A0:  MOVLW  02
091A2:  ADDWF  x2E,W
091A4:  ADDWF  x2C,W
091A6:  MOVWF  FE9
091A8:  MOVLW  00
091AA:  ADDWFC x2D,W
091AC:  MOVWF  FEA
091AE:  MOVF   FEF,W
091B0:  CLRF   x37
091B2:  CLRF   x36
091B4:  CLRF   x35
091B6:  MOVWF  x34
091B8:  MOVFF  235,03
091BC:  MOVFF  234,02
091C0:  CLRF   00
091C2:  CLRF   01
091C4:  MOVF   00,W
091C6:  IORWF  x2F,F
091C8:  MOVF   01,W
091CA:  IORWF  x30,F
091CC:  MOVF   02,W
091CE:  IORWF  x31,F
091D0:  MOVF   03,W
091D2:  IORWF  x32,F
091D4:  MOVLW  03
091D6:  ADDWF  x2E,W
091D8:  ADDWF  x2C,W
091DA:  MOVWF  FE9
091DC:  MOVLW  00
091DE:  ADDWFC x2D,W
091E0:  MOVWF  FEA
091E2:  MOVF   FEF,W
091E4:  CLRF   x37
091E6:  CLRF   x36
091E8:  CLRF   x35
091EA:  MOVWF  x34
091EC:  MOVFF  234,03
091F0:  CLRF   00
091F2:  CLRF   01
091F4:  CLRF   02
091F6:  MOVF   00,W
091F8:  IORWF  x2F,W
091FA:  MOVWF  00
091FC:  MOVF   01,W
091FE:  IORWF  x30,W
09200:  MOVWF  01
09202:  MOVF   02,W
09204:  IORWF  x31,W
09206:  MOVWF  02
09208:  MOVF   03,W
0920A:  IORWF  x32,W
0920C:  MOVWF  03
0920E:  MOVLB  0
09210:  RETURN 0
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
*
0260C:  MOVLB  1
0260E:  MOVF   xFC,W
02610:  ADDWF  xFA,W
02612:  MOVWF  FE9
02614:  MOVLW  00
02616:  ADDWFC xFB,W
02618:  MOVWF  FEA
0261A:  MOVF   FEF,W
0261C:  MOVLB  2
0261E:  CLRF   x03
02620:  CLRF   x02
02622:  CLRF   x01
02624:  MOVWF  x00
02626:  MOVFF  200,203
0262A:  CLRF   x00
0262C:  CLRF   x01
0262E:  CLRF   x02
02630:  MOVLW  01
02632:  MOVLB  1
02634:  ADDWF  xFC,W
02636:  ADDWF  xFA,W
02638:  MOVWF  FE9
0263A:  MOVLW  00
0263C:  ADDWFC xFB,W
0263E:  MOVWF  FEA
02640:  MOVF   FEF,W
02642:  MOVLB  2
02644:  CLRF   x08
02646:  CLRF   x07
02648:  CLRF   x06
0264A:  MOVWF  x05
0264C:  MOVFF  206,03
02650:  MOVFF  205,02
02654:  CLRF   00
02656:  CLRF   01
02658:  MOVF   00,W
0265A:  IORWF  x00,F
0265C:  MOVF   01,W
0265E:  IORWF  x01,F
02660:  MOVF   02,W
02662:  IORWF  x02,F
02664:  MOVF   03,W
02666:  IORWF  x03,F
02668:  MOVLW  02
0266A:  MOVLB  1
0266C:  ADDWF  xFC,W
0266E:  ADDWF  xFA,W
02670:  MOVWF  FE9
02672:  MOVLW  00
02674:  ADDWFC xFB,W
02676:  MOVWF  FEA
02678:  MOVF   FEF,W
0267A:  MOVLB  2
0267C:  CLRF   x08
0267E:  CLRF   x07
02680:  CLRF   x06
02682:  MOVWF  x05
02684:  MOVFF  207,03
02688:  MOVFF  206,02
0268C:  MOVFF  205,01
02690:  CLRF   00
02692:  MOVF   00,W
02694:  IORWF  x00,F
02696:  MOVF   01,W
02698:  IORWF  x01,F
0269A:  MOVF   02,W
0269C:  IORWF  x02,F
0269E:  MOVF   03,W
026A0:  IORWF  x03,F
026A2:  MOVLW  03
026A4:  MOVLB  1
026A6:  ADDWF  xFC,W
026A8:  ADDWF  xFA,W
026AA:  MOVWF  FE9
026AC:  MOVLW  00
026AE:  ADDWFC xFB,W
026B0:  MOVWF  FEA
026B2:  MOVF   FEF,W
026B4:  MOVWF  00
026B6:  CLRF   01
026B8:  CLRF   02
026BA:  CLRF   03
026BC:  MOVF   00,W
026BE:  MOVLB  2
026C0:  IORWF  x00,W
026C2:  MOVWF  00
026C4:  MOVF   01,W
026C6:  IORWF  x01,W
026C8:  MOVWF  01
026CA:  MOVF   02,W
026CC:  IORWF  x02,W
026CE:  MOVWF  02
026D0:  MOVF   03,W
026D2:  IORWF  x03,W
026D4:  MOVWF  03
026D6:  MOVLB  0
026D8:  RETURN 0
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
08538:  MOVLW  01
0853A:  ADDWF  xED,W
0853C:  ANDLW  0F
0853E:  MOVLB  1
08540:  MOVWF  x7D
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
08542:  MOVLB  0
08544:  MOVF   xEC,W
08546:  MOVLB  1
08548:  SUBWF  x7D,W
0854A:  BTFSC  FD8.2
0854C:  BRA    8554
0854E:  MOVLB  0
08550:  GOTO   856A
08554:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
08556:  MOVLW  8A
08558:  MOVWF  FF6
0855A:  MOVLW  02
0855C:  MOVWF  FF7
0855E:  MOVLW  00
08560:  MOVWF  FF8
08562:  CALL   1C8E
08566:  GOTO   86AC
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].func_type = data->func_type;
0856A:  MOVF   xED,W
0856C:  MULLW  0A
0856E:  MOVF   FF3,W
08570:  MOVLB  1
08572:  CLRF   x7F
08574:  MOVWF  x7E
08576:  MOVLW  09
08578:  ADDWF  x7E,W
0857A:  MOVWF  01
0857C:  MOVLW  00
0857E:  ADDWFC x7F,W
08580:  MOVWF  03
08582:  MOVF   01,W
08584:  ADDLW  4C
08586:  MOVWF  01
08588:  MOVLW  00
0858A:  ADDWFC 03,F
0858C:  MOVF   01,W
0858E:  MOVWF  x7E
08590:  MOVFF  03,17F
08594:  MOVLW  09
08596:  ADDWF  x7B,W
08598:  MOVWF  FE9
0859A:  MOVLW  00
0859C:  ADDWFC x7C,W
0859E:  MOVWF  FEA
085A0:  MOVF   FEF,W
085A2:  MOVWF  x80
085A4:  MOVFF  17F,FEA
085A8:  MOVFF  17E,FE9
085AC:  MOVFF  180,FEF
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src       = data->src;
085B0:  MOVLB  0
085B2:  MOVF   xED,W
085B4:  MULLW  0A
085B6:  MOVF   FF3,W
085B8:  MOVLB  1
085BA:  CLRF   x7F
085BC:  MOVWF  x7E
085BE:  MOVLW  01
085C0:  ADDWF  x7E,W
085C2:  MOVWF  01
085C4:  MOVLW  00
085C6:  ADDWFC x7F,W
085C8:  MOVWF  03
085CA:  MOVF   01,W
085CC:  ADDLW  4C
085CE:  MOVWF  01
085D0:  MOVLW  00
085D2:  ADDWFC 03,F
085D4:  MOVF   01,W
085D6:  MOVWF  x7E
085D8:  MOVFF  03,17F
085DC:  MOVLW  01
085DE:  ADDWF  x7B,W
085E0:  MOVWF  FE9
085E2:  MOVLW  00
085E4:  ADDWFC x7C,W
085E6:  MOVWF  FEA
085E8:  MOVFF  FEF,00
085EC:  MOVFF  FEC,01
085F0:  MOVFF  FEC,02
085F4:  MOVFF  FEC,03
085F8:  MOVF   FED,F
085FA:  MOVF   FED,F
085FC:  MOVF   FED,F
085FE:  MOVFF  03,183
08602:  MOVFF  02,182
08606:  MOVFF  01,181
0860A:  MOVFF  00,180
0860E:  MOVFF  17F,FEA
08612:  MOVFF  17E,FE9
08616:  MOVFF  180,FEF
0861A:  MOVFF  181,FEC
0861E:  MOVFF  182,FEC
08622:  MOVFF  183,FEC
08626:  MOVF   FED,F
08628:  MOVF   FED,F
0862A:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size      = data->size;
0862C:  MOVLB  0
0862E:  MOVF   xED,W
08630:  MULLW  0A
08632:  MOVF   FF3,W
08634:  MOVLB  1
08636:  CLRF   x7F
08638:  MOVWF  x7E
0863A:  MOVLW  05
0863C:  ADDWF  x7E,W
0863E:  MOVWF  01
08640:  MOVLW  00
08642:  ADDWFC x7F,W
08644:  MOVWF  03
08646:  MOVF   01,W
08648:  ADDLW  4C
0864A:  MOVWF  01
0864C:  MOVLW  00
0864E:  ADDWFC 03,F
08650:  MOVF   01,W
08652:  MOVWF  x7E
08654:  MOVFF  03,17F
08658:  MOVLW  05
0865A:  ADDWF  x7B,W
0865C:  MOVWF  FE9
0865E:  MOVLW  00
08660:  ADDWFC x7C,W
08662:  MOVWF  FEA
08664:  MOVFF  FEF,00
08668:  MOVFF  FEC,01
0866C:  MOVFF  FEC,02
08670:  MOVFF  FEC,03
08674:  MOVF   FED,F
08676:  MOVF   FED,F
08678:  MOVF   FED,F
0867A:  MOVFF  03,183
0867E:  MOVFF  02,182
08682:  MOVFF  01,181
08686:  MOVFF  00,180
0868A:  MOVFF  17F,FEA
0868E:  MOVFF  17E,FE9
08692:  MOVFF  180,FEF
08696:  MOVFF  181,FEC
0869A:  MOVFF  182,FEC
0869E:  MOVFF  183,FEC
086A2:  MOVF   FED,F
086A4:  MOVF   FED,F
086A6:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
086A8:  MOVFF  17D,ED
086AC:  MOVLB  0
....................    }
086AE:  GOTO   8A82 (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
08EF4:  MOVF   xED,W
08EF6:  SUBWF  xEC,W
08EF8:  BTFSS  FD8.2
08EFA:  GOTO   8F1E
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
08EFE:  MOVLW  A6
08F00:  MOVWF  FF6
08F02:  MOVLW  02
08F04:  MOVWF  FF7
08F06:  MOVLW  00
08F08:  MOVWF  FF8
08F0A:  CALL   1C8E
....................       return 0x00;
08F0E:  MOVLW  00
08F10:  MOVWF  01
08F12:  MOVLW  00
08F14:  MOVWF  02
08F16:  GOTO   8F4A
....................    }
08F1A:  GOTO   8F4A
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
08F1E:  MOVFF  EC,15E
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
08F22:  MOVLW  01
08F24:  ADDWF  xEC,W
08F26:  ANDLW  0F
08F28:  MOVWF  xEC
....................       return &smf_queue.smf_data[current_head];
08F2A:  MOVLB  1
08F2C:  MOVF   x5E,W
08F2E:  MULLW  0A
08F30:  MOVF   FF3,W
08F32:  CLRF   03
08F34:  ADDLW  4C
08F36:  MOVWF  01
08F38:  MOVLW  00
08F3A:  ADDWFC 03,F
08F3C:  MOVF   01,W
08F3E:  MOVWF  01
08F40:  MOVF   03,W
08F42:  MOVWF  02
08F44:  MOVLB  0
08F46:  GOTO   8F4A
....................    }
08F4A:  GOTO   AB90 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
08CF8:  MOVF   xED,W
08CFA:  SUBWF  xEC,W
08CFC:  BTFSC  FD8.2
08CFE:  GOTO   8D08
08D02:  MOVLW  00
08D04:  GOTO   8D0A
08D08:  MOVLW  01
08D0A:  MOVWF  01
08D0C:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(mission_id)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
08F4E:  MOVLB  1
08F50:  CLRF   xF3
08F52:  CLRF   xF4
08F54:  CLRF   xF5
08F56:  CLRF   xF6
08F58:  CLRF   xF7
08F5A:  CLRF   xF8
08F5C:  CLRF   xF9
08F5E:  CLRF   xFA
....................    
....................    if (mission_id == ID_CIGS_DATA_TABLE)
08F60:  MOVF   xF2,W
08F62:  SUBLW  C0
08F64:  BTFSC  FD8.2
08F66:  BRA    8F6E
08F68:  MOVLB  0
08F6A:  GOTO   8F92
08F6E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
08F70:  MOVLW  06
08F72:  MOVLB  1
08F74:  MOVWF  xF6
08F76:  MOVLW  AA
08F78:  MOVWF  xF5
08F7A:  CLRF   xF4
08F7C:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
08F7E:  MOVLW  06
08F80:  MOVWF  xFA
08F82:  MOVLW  AA
08F84:  MOVWF  xF9
08F86:  MOVLW  0F
08F88:  MOVWF  xF8
08F8A:  SETF   xF7
08F8C:  MOVLB  0
....................    }
08F8E:  GOTO   8FFA
....................    else if (mission_id == ID_CIGS_MEASURE_DATA)
08F92:  MOVLB  1
08F94:  MOVF   xF2,W
08F96:  SUBLW  C1
08F98:  BTFSC  FD8.2
08F9A:  BRA    8FA2
08F9C:  MOVLB  0
08F9E:  GOTO   8FC8
08FA2:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_MEASURE_DATA_START_ADDRESS;
08FA4:  MOVLW  06
08FA6:  MOVLB  1
08FA8:  MOVWF  xF6
08FAA:  MOVLW  AA
08FAC:  MOVWF  xF5
08FAE:  MOVLW  10
08FB0:  MOVWF  xF4
08FB2:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_MEASURE_DATA_END_ADDRESS;
08FB4:  MOVLW  07
08FB6:  MOVWF  xFA
08FB8:  MOVLW  AA
08FBA:  MOVWF  xF9
08FBC:  MOVLW  0F
08FBE:  MOVWF  xF8
08FC0:  SETF   xF7
08FC2:  MOVLB  0
....................    }
08FC4:  GOTO   8FFA
....................    else if (mission_id == ID_CIGS_PICLOG)
08FC8:  MOVLB  1
08FCA:  MOVF   xF2,W
08FCC:  SUBLW  CF
08FCE:  BTFSC  FD8.2
08FD0:  BRA    8FD8
08FD2:  MOVLB  0
08FD4:  GOTO   8FFA
08FD8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
08FDA:  MOVLW  07
08FDC:  MOVLB  1
08FDE:  MOVWF  xF6
08FE0:  MOVLW  AA
08FE2:  MOVWF  xF5
08FE4:  MOVLW  10
08FE6:  MOVWF  xF4
08FE8:  CLRF   xF3
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
08FEA:  MOVLW  07
08FEC:  MOVWF  xFA
08FEE:  MOVLW  AA
08FF0:  MOVWF  xF9
08FF2:  MOVLW  1F
08FF4:  MOVWF  xF8
08FF6:  SETF   xF7
08FF8:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
08FFA:  MOVLW  F3
08FFC:  MOVWF  01
08FFE:  MOVLW  01
09000:  MOVWF  02
09002:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
04056:  MOVLB  1
04058:  CLRF   x5F
0405A:  CLRF   x60
0405C:  CLRF   x61
0405E:  CLRF   x62
04060:  CLRF   x63
04062:  CLRF   x64
04064:  CLRF   x65
04066:  CLRF   x66
04068:  CLRF   x67
0406A:  CLRF   x68
0406C:  CLRF   x69
0406E:  CLRF   x6A
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
04070:  MOVLW  C0
04072:  MOVWF  FF6
04074:  MOVLW  02
04076:  MOVWF  FF7
04078:  MOVLW  00
0407A:  MOVWF  FF8
0407C:  MOVLB  0
0407E:  CALL   1C8E
....................    fprintf(PC, "\t[BOSS] >>> ");
04082:  MOVLW  E0
04084:  MOVWF  FF6
04086:  MOVLW  02
04088:  MOVWF  FF7
0408A:  MOVLW  00
0408C:  MOVWF  FF8
0408E:  CALL   1C8E
....................    for (int8 i = 0; i < receive_signal_size; i++)
04092:  MOVLB  1
04094:  CLRF   x6B
04096:  MOVLB  0
04098:  MOVLB  1
0409A:  MOVF   x5E,W
0409C:  SUBWF  x6B,W
0409E:  BTFSS  FD8.0
040A0:  BRA    40A8
040A2:  MOVLB  0
040A4:  GOTO   40E2
040A8:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
040AA:  MOVLB  1
040AC:  MOVF   x6B,W
040AE:  ADDWF  x5C,W
040B0:  MOVWF  FE9
040B2:  MOVLW  00
040B4:  ADDWFC x5D,W
040B6:  MOVWF  FEA
040B8:  MOVFF  FEF,172
040BC:  MOVFF  172,996
040C0:  MOVLW  37
040C2:  MOVLB  9
040C4:  MOVWF  x97
040C6:  MOVLB  0
040C8:  CALL   1EBC
040CC:  MOVLW  20
040CE:  MOVLB  A
040D0:  MOVWF  x29
040D2:  MOVLB  0
040D4:  CALL   1C3C
040D8:  MOVLB  1
040DA:  INCF   x6B,F
040DC:  MOVLB  0
040DE:  GOTO   4098
....................    fprintf(PC, "\r\n");
040E2:  MOVLW  0D
040E4:  MOVLB  A
040E6:  MOVWF  x29
040E8:  MOVLB  0
040EA:  CALL   1C3C
040EE:  MOVLW  0A
040F0:  MOVLB  A
040F2:  MOVWF  x29
040F4:  MOVLB  0
040F6:  CALL   1C3C
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
040FA:  MOVFF  15D,173
040FE:  MOVFF  15C,172
04102:  MOVFF  15E,174
04106:  GOTO   3D04
0410A:  MOVFF  01,16C
....................    if (frame_start_position == -1)
0410E:  MOVLB  1
04110:  MOVF   x6C,W
04112:  SUBLW  FF
04114:  BTFSC  FD8.2
04116:  BRA    411E
04118:  MOVLB  0
0411A:  GOTO   412C
0411E:  MOVLB  0
....................       return command;
04120:  MOVLW  5F
04122:  MOVWF  01
04124:  MOVLW  01
04126:  MOVWF  02
04128:  GOTO   424E
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0412C:  MOVLB  1
0412E:  MOVF   x6C,W
04130:  ADDWF  x5C,W
04132:  MOVWF  01
04134:  MOVLW  00
04136:  ADDWFC x5D,W
04138:  MOVWF  03
0413A:  MOVF   01,W
0413C:  MOVWF  x6D
0413E:  MOVFF  03,16E
04142:  MOVF   x6D,W
04144:  MOVWF  FE9
04146:  MOVF   x6E,W
04148:  MOVWF  FEA
0414A:  MOVF   FEF,W
0414C:  ANDLW  0F
0414E:  MOVWF  x6F
04150:  MOVFF  16F,172
04154:  MOVLB  0
04156:  GOTO   3DAC
0415A:  MOVFF  01,170
....................    if (content_size == -1)
0415E:  MOVLB  1
04160:  MOVF   x70,W
04162:  SUBLW  FF
04164:  BTFSC  FD8.2
04166:  BRA    416E
04168:  MOVLB  0
0416A:  GOTO   417C
0416E:  MOVLB  0
....................       return command;
04170:  MOVLW  5F
04172:  MOVWF  01
04174:  MOVLW  01
04176:  MOVWF  02
04178:  GOTO   424E
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0417C:  MOVLB  1
0417E:  MOVF   x6C,W
04180:  SUBWF  x5E,W
04182:  MOVWF  x71
....................    
....................    if (!check_crc(frame, receive_frame_size))
04184:  MOVFF  16E,173
04188:  MOVFF  16D,172
0418C:  MOVFF  171,174
04190:  MOVLB  0
04192:  GOTO   3EB2
04196:  MOVF   01,F
04198:  BTFSS  FD8.2
0419A:  GOTO   41AA
....................       return command;
0419E:  MOVLW  5F
041A0:  MOVWF  01
041A2:  MOVLW  01
041A4:  MOVWF  02
041A6:  GOTO   424E
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
041AA:  MOVLB  1
041AC:  MOVF   x6D,W
041AE:  MOVWF  FE9
041B0:  MOVF   x6E,W
041B2:  MOVWF  FEA
041B4:  MOVF   FEF,W
041B6:  ANDLW  F0
041B8:  MOVWF  00
041BA:  SWAPF  00,W
041BC:  MOVWF  x72
041BE:  MOVLW  0F
041C0:  ANDWF  x72,F
041C2:  MOVFF  172,173
041C6:  MOVLB  0
041C8:  GOTO   3F9C
041CC:  MOVF   01,F
041CE:  BTFSS  FD8.2
041D0:  GOTO   41E0
....................       return command;
041D4:  MOVLW  5F
041D6:  MOVWF  01
041D8:  MOVLW  01
041DA:  MOVWF  02
041DC:  GOTO   424E
.................... 
....................    command.frame_id = frame_id;
041E0:  MOVFF  16F,15F
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
041E4:  MOVLW  01
041E6:  MOVLB  1
041E8:  ADDWF  x6D,W
041EA:  MOVWF  01
041EC:  MOVLW  00
041EE:  ADDWFC x6E,W
041F0:  MOVWF  03
041F2:  MOVF   01,W
041F4:  MOVWF  x72
041F6:  MOVFF  03,173
041FA:  MOVLW  02
041FC:  SUBWF  x71,W
041FE:  MOVWF  x74
04200:  MOVLW  01
04202:  MOVWF  FEA
04204:  MOVLW  62
04206:  MOVWF  FE9
04208:  MOVFF  173,FE2
0420C:  MOVFF  172,FE1
04210:  MOVF   x74,W
04212:  MOVWF  01
04214:  BTFSS  FD8.2
04216:  BRA    421E
04218:  MOVLB  0
0421A:  GOTO   422A
0421E:  MOVLB  0
04220:  MOVFF  FE6,FEE
04224:  DECFSZ 01,F
04226:  GOTO   4220
....................    command.size = receive_frame_size-2;
0422A:  MOVLW  02
0422C:  MOVLB  1
0422E:  SUBWF  x71,W
04230:  MOVWF  x60
....................    command.is_exist = TRUE;
04232:  BSF    x61.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
04234:  MOVLW  EE
04236:  MOVWF  FF6
04238:  MOVLW  02
0423A:  MOVWF  FF7
0423C:  MOVLW  00
0423E:  MOVWF  FF8
04240:  MOVLB  0
04242:  CALL   1C8E
....................    return command;
04246:  MOVLW  5F
04248:  MOVWF  01
0424A:  MOVLW  01
0424C:  MOVWF  02
0424E:  GOTO   B176 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03D04:  MOVLB  1
03D06:  CLRF   x75
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03D08:  CLRF   x75
03D0A:  MOVLB  0
03D0C:  MOVLW  01
03D0E:  MOVLB  1
03D10:  SUBWF  x74,W
03D12:  SUBWF  x75,W
03D14:  BTFSS  FD8.0
03D16:  BRA    3D1E
03D18:  MOVLB  0
03D1A:  GOTO   3D56
03D1E:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03D20:  MOVLB  1
03D22:  MOVF   x75,W
03D24:  ADDWF  x72,W
03D26:  MOVWF  FE9
03D28:  MOVLW  00
03D2A:  ADDWFC x73,W
03D2C:  MOVWF  FEA
03D2E:  MOVF   FEF,W
03D30:  SUBLW  AA
03D32:  BTFSC  FD8.2
03D34:  BRA    3D3C
03D36:  MOVLB  0
03D38:  GOTO   3D4C
03D3C:  MOVLB  0
....................          return i+1;
03D3E:  MOVLW  01
03D40:  MOVLB  1
03D42:  ADDWF  x75,W
03D44:  MOVWF  01
03D46:  MOVLB  0
03D48:  GOTO   3DA8
03D4C:  MOVLB  1
03D4E:  INCF   x75,F
03D50:  MOVLB  0
03D52:  GOTO   3D0C
....................    if (receive_signal[i] == SFD)
03D56:  MOVLB  1
03D58:  MOVF   x75,W
03D5A:  ADDWF  x72,W
03D5C:  MOVWF  FE9
03D5E:  MOVLW  00
03D60:  ADDWFC x73,W
03D62:  MOVWF  FEA
03D64:  MOVF   FEF,W
03D66:  SUBLW  AA
03D68:  BTFSC  FD8.2
03D6A:  BRA    3D72
03D6C:  MOVLB  0
03D6E:  GOTO   3D90
03D72:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03D74:  MOVLW  0A
03D76:  MOVWF  FF6
03D78:  MOVLW  03
03D7A:  MOVWF  FF7
03D7C:  MOVLW  00
03D7E:  MOVWF  FF8
03D80:  CALL   1C8E
....................       return -1;
03D84:  MOVLW  FF
03D86:  MOVWF  01
03D88:  GOTO   3DA8
....................    }
03D8C:  GOTO   3DA8
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03D90:  MOVLW  20
03D92:  MOVWF  FF6
03D94:  MOVLW  03
03D96:  MOVWF  FF7
03D98:  MOVLW  00
03D9A:  MOVWF  FF8
03D9C:  CALL   1C8E
....................       return -1;
03DA0:  MOVLW  FF
03DA2:  MOVWF  01
03DA4:  GOTO   3DA8
....................    }
03DA8:  GOTO   410A (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03DAC:  MOVLB  1
03DAE:  CLRF   x73
03DB0:  MOVLB  0
03DB2:  MOVLB  1
03DB4:  MOVF   x73,W
03DB6:  SUBLW  02
03DB8:  BTFSC  FD8.0
03DBA:  BRA    3DC2
03DBC:  MOVLB  0
03DBE:  GOTO   3E20
03DC2:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03DC4:  BCF    FD8.0
03DC6:  MOVLB  1
03DC8:  RLCF   x73,W
03DCA:  CLRF   x75
03DCC:  MOVWF  x74
03DCE:  MOVLW  F6
03DD0:  ADDWF  x74,W
03DD2:  MOVWF  FE9
03DD4:  MOVLW  00
03DD6:  ADDWFC x75,W
03DD8:  MOVWF  FEA
03DDA:  MOVF   FEF,W
03DDC:  SUBWF  x72,W
03DDE:  BTFSC  FD8.2
03DE0:  BRA    3DE8
03DE2:  MOVLB  0
03DE4:  GOTO   3E16
03DE8:  MOVLB  0
....................          return frame_ids[i].length;
03DEA:  BCF    FD8.0
03DEC:  MOVLB  1
03DEE:  RLCF   x73,W
03DF0:  CLRF   x75
03DF2:  MOVWF  x74
03DF4:  MOVLW  01
03DF6:  ADDWF  x74,W
03DF8:  MOVWF  01
03DFA:  MOVLW  00
03DFC:  ADDWFC x75,W
03DFE:  MOVWF  03
03E00:  MOVF   01,W
03E02:  ADDLW  F6
03E04:  MOVWF  FE9
03E06:  MOVLW  00
03E08:  ADDWFC 03,W
03E0A:  MOVWF  FEA
03E0C:  MOVF   FEF,W
03E0E:  MOVWF  01
03E10:  MOVLB  0
03E12:  GOTO   3E64
03E16:  MOVLB  1
03E18:  INCF   x73,F
03E1A:  MOVLB  0
03E1C:  GOTO   3DB2
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
03E20:  MOVLW  32
03E22:  MOVWF  FF6
03E24:  MOVLW  03
03E26:  MOVWF  FF7
03E28:  MOVLW  00
03E2A:  MOVWF  FF8
03E2C:  MOVLW  1F
03E2E:  MOVLB  9
03E30:  MOVWF  x96
03E32:  MOVLB  0
03E34:  CALL   1CBE
03E38:  MOVFF  172,996
03E3C:  MOVLW  37
03E3E:  MOVLB  9
03E40:  MOVWF  x97
03E42:  MOVLB  0
03E44:  CALL   1EBC
03E48:  MOVLW  0D
03E4A:  MOVLB  A
03E4C:  MOVWF  x29
03E4E:  MOVLB  0
03E50:  CALL   1C3C
03E54:  MOVLW  0A
03E56:  MOVLB  A
03E58:  MOVWF  x29
03E5A:  MOVLB  0
03E5C:  CALL   1C3C
....................    return -1;
03E60:  MOVLW  FF
03E62:  MOVWF  01
03E64:  GOTO   415A (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03EB2:  MOVLW  01
03EB4:  MOVLB  1
03EB6:  SUBWF  x74,W
03EB8:  ADDWF  x72,W
03EBA:  MOVWF  FE9
03EBC:  MOVLW  00
03EBE:  ADDWFC x73,W
03EC0:  MOVWF  FEA
03EC2:  MOVFF  FEF,175
03EC6:  MOVLW  01
03EC8:  SUBWF  x74,W
03ECA:  MOVWF  x77
03ECC:  MOVFF  173,9E7
03ED0:  MOVFF  172,9E6
03ED4:  MOVFF  177,9E8
03ED8:  MOVLB  0
03EDA:  CALL   3E68
03EDE:  MOVFF  01,176
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03EE2:  MOVLB  1
03EE4:  MOVF   x76,W
03EE6:  SUBWF  x75,W
03EE8:  BTFSC  FD8.2
03EEA:  BRA    3EF2
03EEC:  MOVLB  0
03EEE:  GOTO   3F00
03EF2:  MOVLB  0
....................       return TRUE;
03EF4:  MOVLW  01
03EF6:  MOVWF  01
03EF8:  GOTO   3F98
03EFC:  GOTO   3F98
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03F00:  MOVLW  56
03F02:  MOVWF  FF6
03F04:  MOVLW  03
03F06:  MOVWF  FF7
03F08:  MOVLW  00
03F0A:  MOVWF  FF8
03F0C:  CALL   1C8E
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03F10:  MOVLW  68
03F12:  MOVWF  FF6
03F14:  MOVLW  03
03F16:  MOVWF  FF7
03F18:  MOVLW  00
03F1A:  MOVWF  FF8
03F1C:  MOVLW  13
03F1E:  MOVLB  9
03F20:  MOVWF  x96
03F22:  MOVLB  0
03F24:  CALL   1CBE
03F28:  MOVFF  175,996
03F2C:  MOVLW  37
03F2E:  MOVLB  9
03F30:  MOVWF  x97
03F32:  MOVLB  0
03F34:  CALL   1EBC
03F38:  MOVLW  0D
03F3A:  MOVLB  A
03F3C:  MOVWF  x29
03F3E:  MOVLB  0
03F40:  CALL   1C3C
03F44:  MOVLW  0A
03F46:  MOVLB  A
03F48:  MOVWF  x29
03F4A:  MOVLB  0
03F4C:  CALL   1C3C
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03F50:  MOVLW  80
03F52:  MOVWF  FF6
03F54:  MOVLW  03
03F56:  MOVWF  FF7
03F58:  MOVLW  00
03F5A:  MOVWF  FF8
03F5C:  MOVLW  13
03F5E:  MOVLB  9
03F60:  MOVWF  x96
03F62:  MOVLB  0
03F64:  CALL   1CBE
03F68:  MOVFF  176,996
03F6C:  MOVLW  37
03F6E:  MOVLB  9
03F70:  MOVWF  x97
03F72:  MOVLB  0
03F74:  CALL   1EBC
03F78:  MOVLW  0D
03F7A:  MOVLB  A
03F7C:  MOVWF  x29
03F7E:  MOVLB  0
03F80:  CALL   1C3C
03F84:  MOVLW  0A
03F86:  MOVLB  A
03F88:  MOVWF  x29
03F8A:  MOVLB  0
03F8C:  CALL   1C3C
....................       return FALSE;
03F90:  MOVLW  00
03F92:  MOVWF  01
03F94:  GOTO   3F98
....................    }
03F98:  GOTO   4196 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03F9C:  MOVLB  1
03F9E:  MOVF   x73,W
03FA0:  SUBLW  0C
03FA2:  BTFSC  FD8.2
03FA4:  BRA    3FAC
03FA6:  MOVLB  0
03FA8:  GOTO   3FBA
03FAC:  MOVLB  0
....................       return TRUE;
03FAE:  MOVLW  01
03FB0:  MOVWF  01
03FB2:  GOTO   4052
03FB6:  GOTO   4052
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03FBA:  MOVLW  98
03FBC:  MOVWF  FF6
03FBE:  MOVLW  03
03FC0:  MOVWF  FF7
03FC2:  MOVLW  00
03FC4:  MOVWF  FF8
03FC6:  CALL   1C8E
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03FCA:  MOVLW  BA
03FCC:  MOVWF  FF6
03FCE:  MOVLW  03
03FD0:  MOVWF  FF7
03FD2:  MOVLW  00
03FD4:  MOVWF  FF8
03FD6:  MOVLW  13
03FD8:  MOVLB  9
03FDA:  MOVWF  x96
03FDC:  MOVLB  0
03FDE:  CALL   1CBE
03FE2:  MOVFF  173,996
03FE6:  MOVLW  37
03FE8:  MOVLB  9
03FEA:  MOVWF  x97
03FEC:  MOVLB  0
03FEE:  CALL   1EBC
03FF2:  MOVLW  0D
03FF4:  MOVLB  A
03FF6:  MOVWF  x29
03FF8:  MOVLB  0
03FFA:  CALL   1C3C
03FFE:  MOVLW  0A
04000:  MOVLB  A
04002:  MOVWF  x29
04004:  MOVLB  0
04006:  CALL   1C3C
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0400A:  MOVLW  D2
0400C:  MOVWF  FF6
0400E:  MOVLW  03
04010:  MOVWF  FF7
04012:  MOVLW  00
04014:  MOVWF  FF8
04016:  MOVLW  13
04018:  MOVLB  9
0401A:  MOVWF  x96
0401C:  MOVLB  0
0401E:  CALL   1CBE
04022:  MOVLW  0C
04024:  MOVLB  9
04026:  MOVWF  x96
04028:  MOVLW  37
0402A:  MOVWF  x97
0402C:  MOVLB  0
0402E:  CALL   1EBC
04032:  MOVLW  0D
04034:  MOVLB  A
04036:  MOVWF  x29
04038:  MOVLB  0
0403A:  CALL   1C3C
0403E:  MOVLW  0A
04040:  MOVLB  A
04042:  MOVWF  x29
04044:  MOVLB  0
04046:  CALL   1C3C
....................       return FALSE;  
0404A:  MOVLW  00
0404C:  MOVWF  01
0404E:  GOTO   4052
....................    }
04052:  GOTO   41CC (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0437C:  MOVLW  AA
0437E:  MOVLB  1
04380:  MOVWF  x62
....................    data[1] = (BOSS_PIC << 4) | frame_id;
04382:  MOVF   x5E,W
04384:  IORLW  50
04386:  MOVWF  x63
....................    memcpy(&data[2], content, size);
04388:  MOVLW  01
0438A:  MOVWF  FEA
0438C:  MOVLW  64
0438E:  MOVWF  FE9
04390:  MOVFF  160,FE2
04394:  MOVFF  15F,FE1
04398:  MOVF   x61,W
0439A:  MOVWF  01
0439C:  BTFSS  FD8.2
0439E:  BRA    43A6
043A0:  MOVLB  0
043A2:  GOTO   43B2
043A6:  MOVLB  0
043A8:  MOVFF  FE6,FEE
043AC:  DECFSZ 01,F
043AE:  GOTO   43A8
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
043B2:  MOVLW  02
043B4:  MOVLB  1
043B6:  ADDWF  x61,W
043B8:  MOVWF  x72
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
043BA:  CLRF   03
043BC:  MOVF   x72,W
043BE:  ADDLW  62
043C0:  MOVWF  01
043C2:  MOVLW  01
043C4:  ADDWFC 03,F
043C6:  MOVF   01,W
043C8:  MOVWF  x74
043CA:  MOVFF  03,175
043CE:  MOVLW  01
043D0:  SUBWF  x72,W
043D2:  MOVWF  x76
043D4:  MOVLW  01
043D6:  MOVLB  9
043D8:  MOVWF  xE7
043DA:  MOVLW  63
043DC:  MOVWF  xE6
043DE:  MOVFF  176,9E8
043E2:  MOVLB  0
043E4:  CALL   3E68
043E8:  MOVFF  175,FEA
043EC:  MOVFF  174,FE9
043F0:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
043F4:  MOVLW  01
043F6:  MOVLB  1
043F8:  ADDWF  x72,W
043FA:  MOVWF  x73
....................    
....................    transmit(data, data_size);
043FC:  MOVLW  01
043FE:  MOVWF  x75
04400:  MOVLW  62
04402:  MOVWF  x74
04404:  MOVFF  173,176
04408:  MOVLB  0
0440A:  GOTO   42C4
0440E:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
042C4:  MOVLB  1
042C6:  CLRF   x77
042C8:  MOVLB  0
042CA:  MOVLB  1
042CC:  MOVF   x76,W
042CE:  SUBWF  x77,W
042D0:  BTFSS  FD8.0
042D2:  BRA    42DA
042D4:  MOVLB  0
042D6:  GOTO   4300
042DA:  MOVLB  0
....................       fputc(data[i], BOSS);
042DC:  MOVLB  1
042DE:  MOVF   x77,W
042E0:  ADDWF  x74,W
042E2:  MOVWF  FE9
042E4:  MOVLW  00
042E6:  ADDWFC x75,W
042E8:  MOVWF  FEA
042EA:  MOVFF  FEF,179
042EE:  MOVF   x79,W
042F0:  MOVLB  0
042F2:  GOTO   42B4
042F6:  MOVLB  1
042F8:  INCF   x77,F
042FA:  MOVLB  0
042FC:  GOTO   42CA
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04300:  MOVLW  EA
04302:  MOVWF  FF6
04304:  MOVLW  03
04306:  MOVWF  FF7
04308:  MOVLW  00
0430A:  MOVWF  FF8
0430C:  CALL   1C8E
....................    for(int i = 0; i < data_size; i++)
04310:  MOVLB  1
04312:  CLRF   x78
04314:  MOVLB  0
04316:  MOVLB  1
04318:  MOVF   x76,W
0431A:  SUBWF  x78,W
0431C:  BTFSS  FD8.0
0431E:  BRA    4326
04320:  MOVLB  0
04322:  GOTO   4360
04326:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
04328:  MOVLB  1
0432A:  MOVF   x78,W
0432C:  ADDWF  x74,W
0432E:  MOVWF  FE9
04330:  MOVLW  00
04332:  ADDWFC x75,W
04334:  MOVWF  FEA
04336:  MOVFF  FEF,179
0433A:  MOVFF  179,996
0433E:  MOVLW  37
04340:  MOVLB  9
04342:  MOVWF  x97
04344:  MOVLB  0
04346:  CALL   1EBC
0434A:  MOVLW  20
0434C:  MOVLB  A
0434E:  MOVWF  x29
04350:  MOVLB  0
04352:  CALL   1C3C
04356:  MOVLB  1
04358:  INCF   x78,F
0435A:  MOVLB  0
0435C:  GOTO   4316
....................    fprintf(PC, "\r\n");
04360:  MOVLW  0D
04362:  MOVLB  A
04364:  MOVWF  x29
04366:  MOVLB  0
04368:  CALL   1C3C
0436C:  MOVLW  0A
0436E:  MOVLB  A
04370:  MOVWF  x29
04372:  MOVLB  0
04374:  CALL   1C3C
04378:  GOTO   440E (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04410:  MOVLW  0F
04412:  MOVLB  1
04414:  MOVWF  x5E
04416:  CLRF   x60
04418:  CLRF   x5F
0441A:  CLRF   x61
0441C:  MOVLB  0
0441E:  CALL   437C
04422:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
08D76:  MOVLW  03
08D78:  MOVLB  1
08D7A:  MOVWF  x5E
08D7C:  CLRF   x60
08D7E:  MOVLW  48
08D80:  MOVWF  x5F
08D82:  MOVLW  04
08D84:  MOVWF  x61
08D86:  MOVLB  0
08D88:  CALL   437C
08D8C:  GOTO   8DB4 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"               // 同じフォルダのヘッダー
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... /*
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... */
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
....................     output_high(CONNECT_CIGS1);
....................     output_low(EN_NPWR); // Enable power to CIGS
....................     delay_us(100); // wait for the CIGS to stabilize
....................     fprintf(PC, "step, voltage, current\r\n");
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     delay_ms(100); // wait for the DAC to stabilize
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
....................         delay_ms(1); // wait for the ADC to stabilize
....................     }
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
....................     fprintf(PC, "Start ADC TEST\r\n");
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_CURR);
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_AMP);
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
....................     ans = ad7490_read(ADC_CIGS1_VREF);
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time_sec = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... /*
.................... void add_smf_queue_data()
.................... {
....................     SmfDataStruct smf_data;
....................     smf_data.type = SMF_DATA_TYPE_CIGS;
....................     smf_data.length = PACKET_SIZE;
....................     memcpy(smf_data.data, packetdata, PACKET_SIZE);
....................     enqueue_smf_data(&smf_data);
.................... }
.................... */
.................... void add_smf_queue_piclog()
.................... {}
.................... 
.................... void convert_datas(MEASUREMENT_DATA measured_data, )
.................... {
.................... 
.................... }
.................... 
.................... void sweep_with_threshold(unsigned int16 curr_threshold, unsigned int16 pd_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, "Start SWEEP with threshold\r\n");
*
06F94:  MOVLW  1C
06F96:  MOVWF  FF6
06F98:  MOVLW  07
06F9A:  MOVWF  FF7
06F9C:  MOVLW  00
06F9E:  MOVWF  FF8
06FA0:  CALL   1C8E
....................    
....................     // Enable both CIGS ports
....................     output_high(CONNECT_CIGS1);
06FA4:  BCF    F94.0
06FA6:  BSF    F8B.0
....................     output_high(CONNECT_CIGS2);
06FA8:  BCF    F94.5
06FAA:  BSF    F8B.5
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     SWEEP_CONFIG port1 = {0};
06FAC:  MOVLB  1
06FAE:  CLRF   x81
06FB0:  CLRF   x82
06FB2:  CLRF   x83
06FB4:  CLRF   x84
06FB6:  CLRF   x85
06FB8:  CLRF   x86
06FBA:  CLRF   x87
06FBC:  CLRF   x88
06FBE:  CLRF   x89
06FC0:  CLRF   x8A
06FC2:  CLRF   x8B
06FC4:  CLRF   x8C
06FC6:  CLRF   x8D
06FC8:  CLRF   x8E
06FCA:  CLRF   x8F
06FCC:  CLRF   x90
06FCE:  CLRF   x91
06FD0:  CLRF   x92
06FD2:  CLRF   x93
06FD4:  CLRF   x94
06FD6:  CLRF   x95
06FD8:  CLRF   x96
06FDA:  CLRF   x97
06FDC:  CLRF   x98
06FDE:  CLRF   x99
06FE0:  CLRF   x9A
06FE2:  CLRF   x9B
06FE4:  CLRF   x9C
06FE6:  CLRF   x9D
06FE8:  CLRF   x9E
06FEA:  CLRF   x9F
06FEC:  CLRF   xA0
06FEE:  CLRF   xA1
06FF0:  CLRF   xA2
06FF2:  CLRF   xA3
06FF4:  CLRF   xA4
06FF6:  CLRF   xA5
06FF8:  CLRF   xA6
06FFA:  CLRF   xA7
06FFC:  CLRF   xA8
06FFE:  CLRF   xA9
07000:  CLRF   xAA
07002:  CLRF   xAB
07004:  CLRF   xAC
07006:  CLRF   xAD
07008:  CLRF   xAE
0700A:  CLRF   xAF
0700C:  CLRF   xB0
0700E:  CLRF   xB1
07010:  CLRF   xB2
07012:  CLRF   xB3
07014:  CLRF   xB4
07016:  CLRF   xB5
07018:  CLRF   xB6
0701A:  CLRF   xB7
0701C:  CLRF   xB8
0701E:  CLRF   xB9
07020:  CLRF   xBA
07022:  CLRF   xBB
07024:  CLRF   xBC
07026:  CLRF   xBD
07028:  CLRF   xBE
0702A:  CLRF   xBF
0702C:  CLRF   xC0
0702E:  CLRF   xC1
07030:  CLRF   xC2
07032:  CLRF   xC3
07034:  CLRF   xC4
07036:  CLRF   xC5
07038:  CLRF   xC6
0703A:  CLRF   xC7
0703C:  CLRF   xC8
0703E:  CLRF   xC9
07040:  CLRF   xCA
07042:  CLRF   xCB
07044:  CLRF   xCC
07046:  CLRF   xCD
07048:  CLRF   xCE
0704A:  CLRF   xCF
0704C:  CLRF   xD0
0704E:  CLRF   xD1
07050:  CLRF   xD2
07052:  CLRF   xD3
07054:  CLRF   xD4
07056:  CLRF   xD5
07058:  CLRF   xD6
0705A:  CLRF   xD7
0705C:  CLRF   xD8
0705E:  CLRF   xD9
07060:  CLRF   xDA
07062:  CLRF   xDB
07064:  CLRF   xDC
07066:  CLRF   xDD
07068:  CLRF   xDE
0706A:  CLRF   xDF
0706C:  CLRF   xE0
0706E:  CLRF   xE1
07070:  CLRF   xE2
07072:  CLRF   xE3
07074:  CLRF   xE4
07076:  CLRF   xE5
07078:  CLRF   xE6
0707A:  CLRF   xE7
0707C:  CLRF   xE8
0707E:  CLRF   xE9
07080:  CLRF   xEA
07082:  CLRF   xEB
07084:  CLRF   xEC
07086:  CLRF   xED
07088:  CLRF   xEE
0708A:  CLRF   xEF
0708C:  CLRF   xF0
0708E:  CLRF   xF1
07090:  CLRF   xF2
07092:  CLRF   xF3
07094:  CLRF   xF4
07096:  CLRF   xF5
07098:  CLRF   xF6
0709A:  CLRF   xF7
0709C:  CLRF   xF8
0709E:  CLRF   xF9
070A0:  CLRF   xFA
070A2:  CLRF   xFB
070A4:  CLRF   xFC
070A6:  CLRF   xFD
070A8:  CLRF   xFE
070AA:  CLRF   xFF
070AC:  MOVLB  2
070AE:  CLRF   x00
070B0:  CLRF   x01
070B2:  CLRF   x02
070B4:  CLRF   x03
070B6:  CLRF   x04
070B8:  CLRF   x05
070BA:  CLRF   x06
070BC:  CLRF   x07
070BE:  CLRF   x08
070C0:  CLRF   x09
070C2:  CLRF   x0A
070C4:  CLRF   x0B
070C6:  CLRF   x0C
070C8:  CLRF   x0D
070CA:  CLRF   x0E
070CC:  CLRF   x0F
070CE:  CLRF   x10
070D0:  CLRF   x11
070D2:  CLRF   x12
070D4:  CLRF   x13
070D6:  CLRF   x14
070D8:  CLRF   x15
070DA:  CLRF   x16
070DC:  CLRF   x17
070DE:  CLRF   x18
070E0:  CLRF   x19
070E2:  CLRF   x1A
070E4:  CLRF   x1B
070E6:  CLRF   x1C
070E8:  CLRF   x1D
070EA:  CLRF   x1E
070EC:  CLRF   x1F
070EE:  CLRF   x20
070F0:  CLRF   x21
070F2:  CLRF   x22
070F4:  CLRF   x23
070F6:  CLRF   x24
070F8:  CLRF   x25
070FA:  CLRF   x26
070FC:  CLRF   x27
070FE:  CLRF   x28
07100:  CLRF   x29
07102:  CLRF   x2A
07104:  CLRF   x2B
07106:  CLRF   x2C
07108:  CLRF   x2D
0710A:  CLRF   x2E
0710C:  CLRF   x2F
0710E:  CLRF   x30
07110:  CLRF   x31
07112:  CLRF   x32
07114:  CLRF   x33
07116:  CLRF   x34
07118:  CLRF   x35
0711A:  CLRF   x36
0711C:  CLRF   x37
0711E:  CLRF   x38
07120:  CLRF   x39
07122:  CLRF   x3A
07124:  CLRF   x3B
07126:  CLRF   x3C
07128:  CLRF   x3D
0712A:  CLRF   x3E
0712C:  CLRF   x3F
0712E:  CLRF   x40
07130:  CLRF   x41
07132:  CLRF   x42
07134:  CLRF   x43
07136:  CLRF   x44
07138:  CLRF   x45
0713A:  CLRF   x46
0713C:  CLRF   x47
0713E:  CLRF   x48
07140:  CLRF   x49
07142:  CLRF   x4A
07144:  CLRF   x4B
07146:  CLRF   x4C
07148:  CLRF   x4D
0714A:  CLRF   x4E
0714C:  CLRF   x4F
0714E:  CLRF   x50
07150:  CLRF   x51
07152:  CLRF   x52
07154:  CLRF   x53
07156:  CLRF   x54
07158:  CLRF   x55
0715A:  CLRF   x56
0715C:  CLRF   x57
0715E:  CLRF   x58
07160:  CLRF   x59
07162:  CLRF   x5A
07164:  CLRF   x5B
07166:  CLRF   x5C
07168:  CLRF   x5D
0716A:  CLRF   x5E
0716C:  CLRF   x5F
0716E:  CLRF   x60
07170:  CLRF   x61
07172:  CLRF   x62
07174:  CLRF   x63
07176:  CLRF   x64
07178:  CLRF   x65
0717A:  CLRF   x66
0717C:  CLRF   x67
0717E:  CLRF   x68
07180:  CLRF   x69
07182:  CLRF   x6A
07184:  CLRF   x6B
07186:  CLRF   x6C
07188:  CLRF   x6D
0718A:  CLRF   x6E
0718C:  CLRF   x6F
0718E:  CLRF   x70
07190:  CLRF   x71
07192:  CLRF   x72
07194:  CLRF   x73
07196:  CLRF   x74
07198:  CLRF   x75
0719A:  CLRF   x76
0719C:  CLRF   x77
0719E:  CLRF   x78
071A0:  CLRF   x79
071A2:  CLRF   x7A
071A4:  CLRF   x7B
071A6:  CLRF   x7C
071A8:  CLRF   x7D
071AA:  CLRF   x7E
071AC:  CLRF   x7F
071AE:  CLRF   x80
071B0:  CLRF   x81
071B2:  CLRF   x82
071B4:  CLRF   x83
071B6:  CLRF   x84
071B8:  CLRF   x85
071BA:  CLRF   x86
071BC:  CLRF   x87
071BE:  CLRF   x88
071C0:  CLRF   x89
071C2:  CLRF   x8A
071C4:  CLRF   x8B
071C6:  CLRF   x8C
071C8:  CLRF   x8D
071CA:  CLRF   x8E
071CC:  CLRF   x8F
071CE:  CLRF   x90
071D0:  CLRF   x91
071D2:  CLRF   x92
071D4:  CLRF   x93
071D6:  CLRF   x94
071D8:  CLRF   x95
071DA:  CLRF   x96
071DC:  CLRF   x97
071DE:  CLRF   x98
071E0:  CLRF   x99
071E2:  CLRF   x9A
071E4:  CLRF   x9B
071E6:  CLRF   x9C
071E8:  CLRF   x9D
071EA:  CLRF   x9E
071EC:  CLRF   x9F
071EE:  CLRF   xA0
071F0:  CLRF   xA1
071F2:  CLRF   xA2
071F4:  CLRF   xA3
071F6:  CLRF   xA4
071F8:  CLRF   xA5
071FA:  CLRF   xA6
071FC:  CLRF   xA7
071FE:  CLRF   xA8
07200:  CLRF   xA9
07202:  CLRF   xAA
07204:  CLRF   xAB
07206:  CLRF   xAC
07208:  CLRF   xAD
0720A:  CLRF   xAE
0720C:  CLRF   xAF
0720E:  CLRF   xB0
07210:  CLRF   xB1
07212:  CLRF   xB2
07214:  CLRF   xB3
07216:  CLRF   xB4
07218:  CLRF   xB5
0721A:  CLRF   xB6
0721C:  CLRF   xB7
0721E:  CLRF   xB8
07220:  CLRF   xB9
07222:  CLRF   xBA
07224:  CLRF   xBB
07226:  CLRF   xBC
07228:  CLRF   xBD
0722A:  CLRF   xBE
0722C:  CLRF   xBF
0722E:  CLRF   xC0
07230:  CLRF   xC1
07232:  CLRF   xC2
07234:  CLRF   xC3
07236:  CLRF   xC4
07238:  CLRF   xC5
0723A:  CLRF   xC6
0723C:  CLRF   xC7
0723E:  CLRF   xC8
07240:  CLRF   xC9
07242:  CLRF   xCA
07244:  CLRF   xCB
07246:  CLRF   xCC
07248:  CLRF   xCD
0724A:  CLRF   xCE
0724C:  CLRF   xCF
0724E:  CLRF   xD0
07250:  CLRF   xD1
07252:  CLRF   xD2
07254:  CLRF   xD3
07256:  CLRF   xD4
07258:  CLRF   xD5
0725A:  CLRF   xD6
0725C:  CLRF   xD7
0725E:  CLRF   xD8
07260:  CLRF   xD9
07262:  CLRF   xDA
07264:  CLRF   xDB
07266:  CLRF   xDC
07268:  CLRF   xDD
0726A:  CLRF   xDE
0726C:  CLRF   xDF
0726E:  CLRF   xE0
07270:  CLRF   xE1
07272:  CLRF   xE2
07274:  CLRF   xE3
07276:  CLRF   xE4
07278:  CLRF   xE5
0727A:  CLRF   xE6
0727C:  CLRF   xE7
0727E:  CLRF   xE8
07280:  CLRF   xE9
07282:  CLRF   xEA
07284:  CLRF   xEB
07286:  CLRF   xEC
07288:  CLRF   xED
0728A:  CLRF   xEE
0728C:  CLRF   xEF
0728E:  CLRF   xF0
07290:  CLRF   xF1
07292:  CLRF   xF2
07294:  CLRF   xF3
07296:  CLRF   xF4
07298:  CLRF   xF5
0729A:  CLRF   xF6
0729C:  CLRF   xF7
0729E:  CLRF   xF8
072A0:  CLRF   xF9
072A2:  CLRF   xFA
072A4:  CLRF   xFB
072A6:  CLRF   xFC
072A8:  CLRF   xFD
072AA:  CLRF   xFE
072AC:  CLRF   xFF
072AE:  MOVLB  3
072B0:  CLRF   x00
072B2:  CLRF   x01
072B4:  CLRF   x02
072B6:  CLRF   x03
072B8:  CLRF   x04
072BA:  CLRF   x05
072BC:  CLRF   x06
072BE:  CLRF   x07
072C0:  CLRF   x08
072C2:  CLRF   x09
072C4:  CLRF   x0A
072C6:  CLRF   x0B
072C8:  CLRF   x0C
072CA:  CLRF   x0D
072CC:  CLRF   x0E
072CE:  CLRF   x0F
072D0:  CLRF   x10
072D2:  CLRF   x11
072D4:  CLRF   x12
072D6:  CLRF   x13
072D8:  CLRF   x14
072DA:  CLRF   x15
072DC:  CLRF   x16
072DE:  CLRF   x17
072E0:  CLRF   x18
072E2:  CLRF   x19
072E4:  CLRF   x1A
072E6:  CLRF   x1B
072E8:  CLRF   x1C
072EA:  CLRF   x1D
072EC:  CLRF   x1E
072EE:  CLRF   x1F
072F0:  CLRF   x20
072F2:  CLRF   x21
072F4:  CLRF   x22
072F6:  CLRF   x23
072F8:  CLRF   x24
072FA:  CLRF   x25
072FC:  CLRF   x26
072FE:  CLRF   x27
07300:  CLRF   x28
07302:  CLRF   x29
07304:  CLRF   x2A
07306:  CLRF   x2B
07308:  CLRF   x2C
0730A:  CLRF   x2D
0730C:  CLRF   x2E
0730E:  CLRF   x2F
07310:  CLRF   x30
07312:  CLRF   x31
07314:  CLRF   x32
07316:  CLRF   x33
07318:  CLRF   x34
0731A:  CLRF   x35
0731C:  CLRF   x36
0731E:  CLRF   x37
07320:  CLRF   x38
07322:  CLRF   x39
07324:  CLRF   x3A
07326:  CLRF   x3B
07328:  CLRF   x3C
0732A:  CLRF   x3D
0732C:  CLRF   x3E
0732E:  CLRF   x3F
07330:  CLRF   x40
07332:  CLRF   x41
07334:  CLRF   x42
07336:  CLRF   x43
07338:  CLRF   x44
0733A:  CLRF   x45
0733C:  CLRF   x46
0733E:  CLRF   x47
07340:  CLRF   x48
07342:  CLRF   x49
07344:  CLRF   x4A
07346:  CLRF   x4B
07348:  CLRF   x4C
0734A:  CLRF   x4D
0734C:  CLRF   x4E
0734E:  CLRF   x4F
07350:  CLRF   x50
07352:  CLRF   x51
07354:  CLRF   x52
07356:  CLRF   x53
07358:  CLRF   x54
0735A:  CLRF   x55
0735C:  CLRF   x56
0735E:  CLRF   x57
07360:  CLRF   x58
07362:  CLRF   x59
07364:  CLRF   x5A
07366:  CLRF   x5B
07368:  CLRF   x5C
0736A:  CLRF   x5D
0736C:  CLRF   x5E
0736E:  CLRF   x5F
07370:  CLRF   x60
07372:  CLRF   x61
07374:  CLRF   x62
07376:  CLRF   x63
07378:  CLRF   x64
0737A:  CLRF   x65
0737C:  CLRF   x66
0737E:  CLRF   x67
07380:  CLRF   x68
07382:  CLRF   x69
07384:  CLRF   x6A
07386:  CLRF   x6B
07388:  CLRF   x6C
0738A:  CLRF   x6D
0738C:  CLRF   x6E
0738E:  CLRF   x6F
07390:  CLRF   x70
07392:  CLRF   x71
07394:  CLRF   x72
07396:  CLRF   x73
07398:  CLRF   x74
0739A:  CLRF   x75
0739C:  CLRF   x76
0739E:  CLRF   x77
073A0:  CLRF   x78
073A2:  CLRF   x79
073A4:  CLRF   x7A
073A6:  CLRF   x7B
073A8:  CLRF   x7C
073AA:  CLRF   x7D
073AC:  CLRF   x7E
073AE:  CLRF   x7F
073B0:  CLRF   x80
073B2:  CLRF   x81
073B4:  CLRF   x82
073B6:  CLRF   x83
073B8:  CLRF   x84
073BA:  CLRF   x85
073BC:  CLRF   x86
073BE:  CLRF   x87
073C0:  CLRF   x88
073C2:  CLRF   x89
073C4:  CLRF   x8A
073C6:  CLRF   x8B
073C8:  CLRF   x8C
073CA:  CLRF   x8D
073CC:  CLRF   x8E
073CE:  CLRF   x8F
073D0:  CLRF   x90
073D2:  CLRF   x91
073D4:  CLRF   x92
073D6:  CLRF   x93
073D8:  CLRF   x94
073DA:  CLRF   x95
073DC:  CLRF   x96
073DE:  CLRF   x97
073E0:  CLRF   x98
073E2:  CLRF   x99
073E4:  CLRF   x9A
073E6:  CLRF   x9B
073E8:  CLRF   x9C
073EA:  CLRF   x9D
073EC:  CLRF   x9E
073EE:  CLRF   x9F
073F0:  CLRF   xA0
073F2:  CLRF   xA1
073F4:  CLRF   xA2
073F6:  CLRF   xA3
073F8:  CLRF   xA4
073FA:  CLRF   xA5
073FC:  CLRF   xA6
073FE:  CLRF   xA7
07400:  CLRF   xA8
07402:  CLRF   xA9
07404:  CLRF   xAA
07406:  CLRF   xAB
07408:  CLRF   xAC
0740A:  CLRF   xAD
0740C:  CLRF   xAE
0740E:  CLRF   xAF
07410:  CLRF   xB0
07412:  CLRF   xB1
07414:  CLRF   xB2
07416:  CLRF   xB3
07418:  CLRF   xB4
0741A:  CLRF   xB5
0741C:  CLRF   xB6
0741E:  CLRF   xB7
07420:  CLRF   xB8
07422:  CLRF   xB9
07424:  CLRF   xBA
07426:  CLRF   xBB
07428:  CLRF   xBC
0742A:  CLRF   xBD
0742C:  CLRF   xBE
0742E:  CLRF   xBF
07430:  CLRF   xC0
07432:  CLRF   xC1
07434:  CLRF   xC2
07436:  CLRF   xC3
07438:  CLRF   xC4
0743A:  CLRF   xC5
0743C:  CLRF   xC6
0743E:  CLRF   xC7
07440:  CLRF   xC8
07442:  CLRF   xC9
07444:  CLRF   xCA
07446:  CLRF   xCB
07448:  CLRF   xCC
0744A:  CLRF   xCD
0744C:  CLRF   xCE
0744E:  CLRF   xCF
07450:  CLRF   xD0
07452:  CLRF   xD1
07454:  CLRF   xD2
07456:  CLRF   xD3
07458:  CLRF   xD4
0745A:  CLRF   xD5
0745C:  CLRF   xD6
0745E:  CLRF   xD7
07460:  CLRF   xD8
07462:  CLRF   xD9
07464:  CLRF   xDA
07466:  CLRF   xDB
07468:  CLRF   xDC
0746A:  CLRF   xDD
0746C:  CLRF   xDE
0746E:  CLRF   xDF
07470:  CLRF   xE0
07472:  CLRF   xE1
07474:  CLRF   xE2
07476:  CLRF   xE3
07478:  CLRF   xE4
0747A:  CLRF   xE5
0747C:  CLRF   xE6
0747E:  CLRF   xE7
07480:  CLRF   xE8
07482:  CLRF   xE9
07484:  CLRF   xEA
07486:  CLRF   xEB
07488:  CLRF   xEC
0748A:  CLRF   xED
0748C:  CLRF   xEE
0748E:  CLRF   xEF
07490:  CLRF   xF0
07492:  CLRF   xF1
07494:  CLRF   xF2
07496:  CLRF   xF3
07498:  CLRF   xF4
0749A:  CLRF   xF5
0749C:  CLRF   xF6
0749E:  CLRF   xF7
074A0:  CLRF   xF8
074A2:  CLRF   xF9
074A4:  CLRF   xFA
074A6:  CLRF   xFB
074A8:  CLRF   xFC
074AA:  CLRF   xFD
074AC:  CLRF   xFE
074AE:  CLRF   xFF
074B0:  MOVLB  4
074B2:  CLRF   x00
074B4:  CLRF   x01
074B6:  CLRF   x02
074B8:  CLRF   x03
074BA:  CLRF   x04
074BC:  CLRF   x05
074BE:  CLRF   x06
074C0:  CLRF   x07
074C2:  CLRF   x08
074C4:  CLRF   x09
074C6:  CLRF   x0A
074C8:  CLRF   x0B
074CA:  CLRF   x0C
074CC:  CLRF   x0D
074CE:  CLRF   x0E
074D0:  CLRF   x0F
074D2:  CLRF   x10
074D4:  CLRF   x11
074D6:  CLRF   x12
074D8:  CLRF   x13
074DA:  CLRF   x14
074DC:  CLRF   x15
074DE:  CLRF   x16
074E0:  CLRF   x17
074E2:  CLRF   x18
074E4:  CLRF   x19
074E6:  CLRF   x1A
074E8:  CLRF   x1B
074EA:  CLRF   x1C
074EC:  CLRF   x1D
074EE:  CLRF   x1E
074F0:  CLRF   x1F
074F2:  CLRF   x20
074F4:  CLRF   x21
074F6:  CLRF   x22
074F8:  CLRF   x23
074FA:  CLRF   x24
074FC:  CLRF   x25
074FE:  CLRF   x26
07500:  CLRF   x27
07502:  CLRF   x28
07504:  CLRF   x29
07506:  CLRF   x2A
07508:  CLRF   x2B
0750A:  CLRF   x2C
0750C:  CLRF   x2D
0750E:  CLRF   x2E
07510:  CLRF   x2F
07512:  CLRF   x30
07514:  CLRF   x31
07516:  CLRF   x32
07518:  CLRF   x33
0751A:  CLRF   x34
0751C:  CLRF   x35
0751E:  CLRF   x36
07520:  CLRF   x37
07522:  CLRF   x38
07524:  CLRF   x39
07526:  CLRF   x3A
07528:  CLRF   x3B
0752A:  CLRF   x3C
0752C:  CLRF   x3D
0752E:  CLRF   x3E
07530:  CLRF   x3F
07532:  CLRF   x40
07534:  CLRF   x41
07536:  CLRF   x42
07538:  CLRF   x43
0753A:  CLRF   x44
0753C:  CLRF   x45
0753E:  CLRF   x46
07540:  CLRF   x47
07542:  CLRF   x48
07544:  CLRF   x49
07546:  CLRF   x4A
07548:  CLRF   x4B
0754A:  CLRF   x4C
0754C:  CLRF   x4D
0754E:  CLRF   x4E
07550:  CLRF   x4F
07552:  CLRF   x50
07554:  CLRF   x51
07556:  CLRF   x52
07558:  CLRF   x53
0755A:  CLRF   x54
0755C:  CLRF   x55
0755E:  CLRF   x56
07560:  CLRF   x57
07562:  CLRF   x58
07564:  CLRF   x59
07566:  CLRF   x5A
07568:  CLRF   x5B
0756A:  CLRF   x5C
0756C:  CLRF   x5D
0756E:  CLRF   x5E
07570:  CLRF   x5F
07572:  CLRF   x60
07574:  CLRF   x61
07576:  CLRF   x62
07578:  CLRF   x63
0757A:  CLRF   x64
0757C:  CLRF   x65
0757E:  CLRF   x66
07580:  CLRF   x67
07582:  CLRF   x68
07584:  CLRF   x69
07586:  CLRF   x6A
07588:  CLRF   x6B
0758A:  CLRF   x6C
0758C:  CLRF   x6D
0758E:  CLRF   x6E
07590:  CLRF   x6F
07592:  CLRF   x70
07594:  CLRF   x71
07596:  CLRF   x72
07598:  CLRF   x73
0759A:  CLRF   x74
0759C:  CLRF   x75
0759E:  CLRF   x76
075A0:  CLRF   x77
075A2:  CLRF   x78
075A4:  CLRF   x79
075A6:  CLRF   x7A
075A8:  CLRF   x7B
075AA:  CLRF   x7C
075AC:  CLRF   x7D
075AE:  CLRF   x7E
075B0:  CLRF   x7F
075B2:  CLRF   x80
075B4:  CLRF   x81
075B6:  CLRF   x82
075B8:  CLRF   x83
075BA:  CLRF   x84
075BC:  CLRF   x85
075BE:  CLRF   x86
075C0:  CLRF   x87
075C2:  CLRF   x88
075C4:  CLRF   x89
075C6:  CLRF   x8A
075C8:  CLRF   x8B
075CA:  CLRF   x8C
075CC:  CLRF   x8D
075CE:  CLRF   x8E
075D0:  CLRF   x8F
075D2:  CLRF   x90
075D4:  CLRF   x91
075D6:  CLRF   x92
075D8:  CLRF   x93
075DA:  CLRF   x94
075DC:  CLRF   x95
075DE:  CLRF   x96
075E0:  CLRF   x97
075E2:  CLRF   x98
075E4:  CLRF   x99
075E6:  CLRF   x9A
075E8:  CLRF   x9B
075EA:  CLRF   x9C
075EC:  CLRF   x9D
075EE:  CLRF   x9E
075F0:  CLRF   x9F
075F2:  CLRF   xA0
075F4:  CLRF   xA1
075F6:  CLRF   xA2
075F8:  CLRF   xA3
075FA:  CLRF   xA4
075FC:  CLRF   xA5
075FE:  CLRF   xA6
07600:  CLRF   xA7
07602:  CLRF   xA8
07604:  CLRF   xA9
07606:  CLRF   xAA
07608:  CLRF   xAB
0760A:  CLRF   xAC
0760C:  CLRF   xAD
0760E:  CLRF   xAE
07610:  CLRF   xAF
07612:  CLRF   xB0
07614:  CLRF   xB1
07616:  CLRF   xB2
07618:  CLRF   xB3
0761A:  CLRF   xB4
0761C:  CLRF   xB5
0761E:  CLRF   xB6
07620:  CLRF   xB7
07622:  CLRF   xB8
07624:  CLRF   xB9
07626:  CLRF   xBA
07628:  CLRF   xBB
0762A:  CLRF   xBC
0762C:  CLRF   xBD
0762E:  CLRF   xBE
07630:  CLRF   xBF
07632:  CLRF   xC0
07634:  CLRF   xC1
07636:  CLRF   xC2
07638:  CLRF   xC3
0763A:  CLRF   xC4
0763C:  CLRF   xC5
0763E:  CLRF   xC6
07640:  CLRF   xC7
07642:  CLRF   xC8
07644:  CLRF   xC9
07646:  CLRF   xCA
07648:  CLRF   xCB
0764A:  CLRF   xCC
0764C:  CLRF   xCD
0764E:  CLRF   xCE
07650:  CLRF   xCF
07652:  CLRF   xD0
07654:  CLRF   xD1
07656:  CLRF   xD2
07658:  CLRF   xD3
0765A:  CLRF   xD4
0765C:  CLRF   xD5
0765E:  CLRF   xD6
07660:  CLRF   xD7
07662:  CLRF   xD8
07664:  CLRF   xD9
07666:  CLRF   xDA
07668:  CLRF   xDB
0766A:  CLRF   xDC
0766C:  CLRF   xDD
0766E:  CLRF   xDE
07670:  CLRF   xDF
07672:  CLRF   xE0
07674:  CLRF   xE1
07676:  CLRF   xE2
07678:  CLRF   xE3
0767A:  CLRF   xE4
0767C:  CLRF   xE5
0767E:  CLRF   xE6
07680:  CLRF   xE7
07682:  CLRF   xE8
07684:  CLRF   xE9
07686:  CLRF   xEA
07688:  CLRF   xEB
0768A:  CLRF   xEC
0768C:  CLRF   xED
0768E:  CLRF   xEE
07690:  CLRF   xEF
07692:  CLRF   xF0
07694:  CLRF   xF1
07696:  CLRF   xF2
07698:  CLRF   xF3
0769A:  CLRF   xF4
0769C:  CLRF   xF5
0769E:  CLRF   xF6
076A0:  CLRF   xF7
076A2:  CLRF   xF8
076A4:  CLRF   xF9
076A6:  CLRF   xFA
076A8:  CLRF   xFB
076AA:  CLRF   xFC
076AC:  CLRF   xFD
076AE:  CLRF   xFE
076B0:  CLRF   xFF
076B2:  MOVLB  5
076B4:  CLRF   x00
076B6:  CLRF   x01
076B8:  CLRF   x02
076BA:  CLRF   x03
076BC:  CLRF   x04
076BE:  CLRF   x05
076C0:  CLRF   x06
076C2:  CLRF   x07
076C4:  CLRF   x08
076C6:  CLRF   x09
076C8:  CLRF   x0A
076CA:  CLRF   x0B
076CC:  CLRF   x0C
076CE:  CLRF   x0D
076D0:  CLRF   x0E
076D2:  CLRF   x0F
076D4:  CLRF   x10
076D6:  CLRF   x11
076D8:  CLRF   x12
076DA:  CLRF   x13
076DC:  CLRF   x14
076DE:  CLRF   x15
076E0:  CLRF   x16
076E2:  CLRF   x17
076E4:  CLRF   x18
076E6:  CLRF   x19
076E8:  CLRF   x1A
076EA:  CLRF   x1B
076EC:  CLRF   x1C
076EE:  CLRF   x1D
076F0:  CLRF   x1E
076F2:  CLRF   x1F
076F4:  CLRF   x20
076F6:  CLRF   x21
076F8:  CLRF   x22
076FA:  CLRF   x23
076FC:  CLRF   x24
076FE:  CLRF   x25
07700:  CLRF   x26
07702:  CLRF   x27
07704:  CLRF   x28
07706:  CLRF   x29
07708:  CLRF   x2A
0770A:  CLRF   x2B
0770C:  CLRF   x2C
0770E:  CLRF   x2D
07710:  CLRF   x2E
07712:  CLRF   x2F
07714:  CLRF   x30
07716:  CLRF   x31
07718:  CLRF   x32
0771A:  CLRF   x33
0771C:  CLRF   x34
0771E:  CLRF   x35
07720:  CLRF   x36
07722:  CLRF   x37
07724:  CLRF   x38
07726:  CLRF   x39
07728:  CLRF   x3A
0772A:  CLRF   x3B
0772C:  CLRF   x3C
0772E:  CLRF   x3D
07730:  CLRF   x3E
07732:  CLRF   x3F
07734:  CLRF   x40
07736:  CLRF   x41
07738:  CLRF   x42
0773A:  CLRF   x43
0773C:  CLRF   x44
0773E:  CLRF   x45
07740:  CLRF   x46
07742:  CLRF   x47
07744:  CLRF   x48
07746:  CLRF   x49
07748:  CLRF   x4A
0774A:  CLRF   x4B
0774C:  CLRF   x4C
0774E:  CLRF   x4D
07750:  CLRF   x4E
07752:  CLRF   x4F
07754:  CLRF   x50
07756:  CLRF   x51
07758:  CLRF   x52
0775A:  CLRF   x53
0775C:  CLRF   x54
0775E:  CLRF   x55
07760:  CLRF   x56
07762:  CLRF   x57
07764:  CLRF   x58
07766:  CLRF   x59
07768:  CLRF   x5A
0776A:  CLRF   x5B
0776C:  CLRF   x5C
0776E:  CLRF   x5D
07770:  CLRF   x5E
07772:  CLRF   x5F
07774:  CLRF   x60
07776:  CLRF   x61
07778:  CLRF   x62
0777A:  CLRF   x63
0777C:  CLRF   x64
0777E:  CLRF   x65
07780:  CLRF   x66
07782:  CLRF   x67
07784:  CLRF   x68
07786:  CLRF   x69
07788:  CLRF   x6A
0778A:  CLRF   x6B
0778C:  CLRF   x6C
0778E:  CLRF   x6D
07790:  CLRF   x6E
07792:  CLRF   x6F
07794:  CLRF   x70
07796:  CLRF   x71
07798:  CLRF   x72
0779A:  CLRF   x73
0779C:  CLRF   x74
0779E:  CLRF   x75
077A0:  CLRF   x76
077A2:  CLRF   x77
077A4:  CLRF   x78
077A6:  CLRF   x79
077A8:  CLRF   x7A
077AA:  CLRF   x7B
077AC:  CLRF   x7C
077AE:  CLRF   x7D
077B0:  CLRF   x7E
077B2:  CLRF   x7F
077B4:  CLRF   x80
....................     port1.port_num = 1;
077B6:  MOVLW  01
077B8:  MOVLB  1
077BA:  MOVWF  x81
....................     port1.sweep_step = 0;
077BC:  CLRF   x83
077BE:  CLRF   x82
....................     port1.active = 1;
077C0:  MOVLB  5
077C2:  BSF    x80.0
.................... 
....................     // Init Port2
....................     SWEEP_CONFIG port2 = {0};
077C4:  CLRF   x81
077C6:  CLRF   x82
077C8:  CLRF   x83
077CA:  CLRF   x84
077CC:  CLRF   x85
077CE:  CLRF   x86
077D0:  CLRF   x87
077D2:  CLRF   x88
077D4:  CLRF   x89
077D6:  CLRF   x8A
077D8:  CLRF   x8B
077DA:  CLRF   x8C
077DC:  CLRF   x8D
077DE:  CLRF   x8E
077E0:  CLRF   x8F
077E2:  CLRF   x90
077E4:  CLRF   x91
077E6:  CLRF   x92
077E8:  CLRF   x93
077EA:  CLRF   x94
077EC:  CLRF   x95
077EE:  CLRF   x96
077F0:  CLRF   x97
077F2:  CLRF   x98
077F4:  CLRF   x99
077F6:  CLRF   x9A
077F8:  CLRF   x9B
077FA:  CLRF   x9C
077FC:  CLRF   x9D
077FE:  CLRF   x9E
07800:  CLRF   x9F
07802:  CLRF   xA0
07804:  CLRF   xA1
07806:  CLRF   xA2
07808:  CLRF   xA3
0780A:  CLRF   xA4
0780C:  CLRF   xA5
0780E:  CLRF   xA6
07810:  CLRF   xA7
07812:  CLRF   xA8
07814:  CLRF   xA9
07816:  CLRF   xAA
07818:  CLRF   xAB
0781A:  CLRF   xAC
0781C:  CLRF   xAD
0781E:  CLRF   xAE
07820:  CLRF   xAF
07822:  CLRF   xB0
07824:  CLRF   xB1
07826:  CLRF   xB2
07828:  CLRF   xB3
0782A:  CLRF   xB4
0782C:  CLRF   xB5
0782E:  CLRF   xB6
07830:  CLRF   xB7
07832:  CLRF   xB8
07834:  CLRF   xB9
07836:  CLRF   xBA
07838:  CLRF   xBB
0783A:  CLRF   xBC
0783C:  CLRF   xBD
0783E:  CLRF   xBE
07840:  CLRF   xBF
07842:  CLRF   xC0
07844:  CLRF   xC1
07846:  CLRF   xC2
07848:  CLRF   xC3
0784A:  CLRF   xC4
0784C:  CLRF   xC5
0784E:  CLRF   xC6
07850:  CLRF   xC7
07852:  CLRF   xC8
07854:  CLRF   xC9
07856:  CLRF   xCA
07858:  CLRF   xCB
0785A:  CLRF   xCC
0785C:  CLRF   xCD
0785E:  CLRF   xCE
07860:  CLRF   xCF
07862:  CLRF   xD0
07864:  CLRF   xD1
07866:  CLRF   xD2
07868:  CLRF   xD3
0786A:  CLRF   xD4
0786C:  CLRF   xD5
0786E:  CLRF   xD6
07870:  CLRF   xD7
07872:  CLRF   xD8
07874:  CLRF   xD9
07876:  CLRF   xDA
07878:  CLRF   xDB
0787A:  CLRF   xDC
0787C:  CLRF   xDD
0787E:  CLRF   xDE
07880:  CLRF   xDF
07882:  CLRF   xE0
07884:  CLRF   xE1
07886:  CLRF   xE2
07888:  CLRF   xE3
0788A:  CLRF   xE4
0788C:  CLRF   xE5
0788E:  CLRF   xE6
07890:  CLRF   xE7
07892:  CLRF   xE8
07894:  CLRF   xE9
07896:  CLRF   xEA
07898:  CLRF   xEB
0789A:  CLRF   xEC
0789C:  CLRF   xED
0789E:  CLRF   xEE
078A0:  CLRF   xEF
078A2:  CLRF   xF0
078A4:  CLRF   xF1
078A6:  CLRF   xF2
078A8:  CLRF   xF3
078AA:  CLRF   xF4
078AC:  CLRF   xF5
078AE:  CLRF   xF6
078B0:  CLRF   xF7
078B2:  CLRF   xF8
078B4:  CLRF   xF9
078B6:  CLRF   xFA
078B8:  CLRF   xFB
078BA:  CLRF   xFC
078BC:  CLRF   xFD
078BE:  CLRF   xFE
078C0:  CLRF   xFF
078C2:  MOVLB  6
078C4:  CLRF   x00
078C6:  CLRF   x01
078C8:  CLRF   x02
078CA:  CLRF   x03
078CC:  CLRF   x04
078CE:  CLRF   x05
078D0:  CLRF   x06
078D2:  CLRF   x07
078D4:  CLRF   x08
078D6:  CLRF   x09
078D8:  CLRF   x0A
078DA:  CLRF   x0B
078DC:  CLRF   x0C
078DE:  CLRF   x0D
078E0:  CLRF   x0E
078E2:  CLRF   x0F
078E4:  CLRF   x10
078E6:  CLRF   x11
078E8:  CLRF   x12
078EA:  CLRF   x13
078EC:  CLRF   x14
078EE:  CLRF   x15
078F0:  CLRF   x16
078F2:  CLRF   x17
078F4:  CLRF   x18
078F6:  CLRF   x19
078F8:  CLRF   x1A
078FA:  CLRF   x1B
078FC:  CLRF   x1C
078FE:  CLRF   x1D
07900:  CLRF   x1E
07902:  CLRF   x1F
07904:  CLRF   x20
07906:  CLRF   x21
07908:  CLRF   x22
0790A:  CLRF   x23
0790C:  CLRF   x24
0790E:  CLRF   x25
07910:  CLRF   x26
07912:  CLRF   x27
07914:  CLRF   x28
07916:  CLRF   x29
07918:  CLRF   x2A
0791A:  CLRF   x2B
0791C:  CLRF   x2C
0791E:  CLRF   x2D
07920:  CLRF   x2E
07922:  CLRF   x2F
07924:  CLRF   x30
07926:  CLRF   x31
07928:  CLRF   x32
0792A:  CLRF   x33
0792C:  CLRF   x34
0792E:  CLRF   x35
07930:  CLRF   x36
07932:  CLRF   x37
07934:  CLRF   x38
07936:  CLRF   x39
07938:  CLRF   x3A
0793A:  CLRF   x3B
0793C:  CLRF   x3C
0793E:  CLRF   x3D
07940:  CLRF   x3E
07942:  CLRF   x3F
07944:  CLRF   x40
07946:  CLRF   x41
07948:  CLRF   x42
0794A:  CLRF   x43
0794C:  CLRF   x44
0794E:  CLRF   x45
07950:  CLRF   x46
07952:  CLRF   x47
07954:  CLRF   x48
07956:  CLRF   x49
07958:  CLRF   x4A
0795A:  CLRF   x4B
0795C:  CLRF   x4C
0795E:  CLRF   x4D
07960:  CLRF   x4E
07962:  CLRF   x4F
07964:  CLRF   x50
07966:  CLRF   x51
07968:  CLRF   x52
0796A:  CLRF   x53
0796C:  CLRF   x54
0796E:  CLRF   x55
07970:  CLRF   x56
07972:  CLRF   x57
07974:  CLRF   x58
07976:  CLRF   x59
07978:  CLRF   x5A
0797A:  CLRF   x5B
0797C:  CLRF   x5C
0797E:  CLRF   x5D
07980:  CLRF   x5E
07982:  CLRF   x5F
07984:  CLRF   x60
07986:  CLRF   x61
07988:  CLRF   x62
0798A:  CLRF   x63
0798C:  CLRF   x64
0798E:  CLRF   x65
07990:  CLRF   x66
07992:  CLRF   x67
07994:  CLRF   x68
07996:  CLRF   x69
07998:  CLRF   x6A
0799A:  CLRF   x6B
0799C:  CLRF   x6C
0799E:  CLRF   x6D
079A0:  CLRF   x6E
079A2:  CLRF   x6F
079A4:  CLRF   x70
079A6:  CLRF   x71
079A8:  CLRF   x72
079AA:  CLRF   x73
079AC:  CLRF   x74
079AE:  CLRF   x75
079B0:  CLRF   x76
079B2:  CLRF   x77
079B4:  CLRF   x78
079B6:  CLRF   x79
079B8:  CLRF   x7A
079BA:  CLRF   x7B
079BC:  CLRF   x7C
079BE:  CLRF   x7D
079C0:  CLRF   x7E
079C2:  CLRF   x7F
079C4:  CLRF   x80
079C6:  CLRF   x81
079C8:  CLRF   x82
079CA:  CLRF   x83
079CC:  CLRF   x84
079CE:  CLRF   x85
079D0:  CLRF   x86
079D2:  CLRF   x87
079D4:  CLRF   x88
079D6:  CLRF   x89
079D8:  CLRF   x8A
079DA:  CLRF   x8B
079DC:  CLRF   x8C
079DE:  CLRF   x8D
079E0:  CLRF   x8E
079E2:  CLRF   x8F
079E4:  CLRF   x90
079E6:  CLRF   x91
079E8:  CLRF   x92
079EA:  CLRF   x93
079EC:  CLRF   x94
079EE:  CLRF   x95
079F0:  CLRF   x96
079F2:  CLRF   x97
079F4:  CLRF   x98
079F6:  CLRF   x99
079F8:  CLRF   x9A
079FA:  CLRF   x9B
079FC:  CLRF   x9C
079FE:  CLRF   x9D
07A00:  CLRF   x9E
07A02:  CLRF   x9F
07A04:  CLRF   xA0
07A06:  CLRF   xA1
07A08:  CLRF   xA2
07A0A:  CLRF   xA3
07A0C:  CLRF   xA4
07A0E:  CLRF   xA5
07A10:  CLRF   xA6
07A12:  CLRF   xA7
07A14:  CLRF   xA8
07A16:  CLRF   xA9
07A18:  CLRF   xAA
07A1A:  CLRF   xAB
07A1C:  CLRF   xAC
07A1E:  CLRF   xAD
07A20:  CLRF   xAE
07A22:  CLRF   xAF
07A24:  CLRF   xB0
07A26:  CLRF   xB1
07A28:  CLRF   xB2
07A2A:  CLRF   xB3
07A2C:  CLRF   xB4
07A2E:  CLRF   xB5
07A30:  CLRF   xB6
07A32:  CLRF   xB7
07A34:  CLRF   xB8
07A36:  CLRF   xB9
07A38:  CLRF   xBA
07A3A:  CLRF   xBB
07A3C:  CLRF   xBC
07A3E:  CLRF   xBD
07A40:  CLRF   xBE
07A42:  CLRF   xBF
07A44:  CLRF   xC0
07A46:  CLRF   xC1
07A48:  CLRF   xC2
07A4A:  CLRF   xC3
07A4C:  CLRF   xC4
07A4E:  CLRF   xC5
07A50:  CLRF   xC6
07A52:  CLRF   xC7
07A54:  CLRF   xC8
07A56:  CLRF   xC9
07A58:  CLRF   xCA
07A5A:  CLRF   xCB
07A5C:  CLRF   xCC
07A5E:  CLRF   xCD
07A60:  CLRF   xCE
07A62:  CLRF   xCF
07A64:  CLRF   xD0
07A66:  CLRF   xD1
07A68:  CLRF   xD2
07A6A:  CLRF   xD3
07A6C:  CLRF   xD4
07A6E:  CLRF   xD5
07A70:  CLRF   xD6
07A72:  CLRF   xD7
07A74:  CLRF   xD8
07A76:  CLRF   xD9
07A78:  CLRF   xDA
07A7A:  CLRF   xDB
07A7C:  CLRF   xDC
07A7E:  CLRF   xDD
07A80:  CLRF   xDE
07A82:  CLRF   xDF
07A84:  CLRF   xE0
07A86:  CLRF   xE1
07A88:  CLRF   xE2
07A8A:  CLRF   xE3
07A8C:  CLRF   xE4
07A8E:  CLRF   xE5
07A90:  CLRF   xE6
07A92:  CLRF   xE7
07A94:  CLRF   xE8
07A96:  CLRF   xE9
07A98:  CLRF   xEA
07A9A:  CLRF   xEB
07A9C:  CLRF   xEC
07A9E:  CLRF   xED
07AA0:  CLRF   xEE
07AA2:  CLRF   xEF
07AA4:  CLRF   xF0
07AA6:  CLRF   xF1
07AA8:  CLRF   xF2
07AAA:  CLRF   xF3
07AAC:  CLRF   xF4
07AAE:  CLRF   xF5
07AB0:  CLRF   xF6
07AB2:  CLRF   xF7
07AB4:  CLRF   xF8
07AB6:  CLRF   xF9
07AB8:  CLRF   xFA
07ABA:  CLRF   xFB
07ABC:  CLRF   xFC
07ABE:  CLRF   xFD
07AC0:  CLRF   xFE
07AC2:  CLRF   xFF
07AC4:  MOVLB  7
07AC6:  CLRF   x00
07AC8:  CLRF   x01
07ACA:  CLRF   x02
07ACC:  CLRF   x03
07ACE:  CLRF   x04
07AD0:  CLRF   x05
07AD2:  CLRF   x06
07AD4:  CLRF   x07
07AD6:  CLRF   x08
07AD8:  CLRF   x09
07ADA:  CLRF   x0A
07ADC:  CLRF   x0B
07ADE:  CLRF   x0C
07AE0:  CLRF   x0D
07AE2:  CLRF   x0E
07AE4:  CLRF   x0F
07AE6:  CLRF   x10
07AE8:  CLRF   x11
07AEA:  CLRF   x12
07AEC:  CLRF   x13
07AEE:  CLRF   x14
07AF0:  CLRF   x15
07AF2:  CLRF   x16
07AF4:  CLRF   x17
07AF6:  CLRF   x18
07AF8:  CLRF   x19
07AFA:  CLRF   x1A
07AFC:  CLRF   x1B
07AFE:  CLRF   x1C
07B00:  CLRF   x1D
07B02:  CLRF   x1E
07B04:  CLRF   x1F
07B06:  CLRF   x20
07B08:  CLRF   x21
07B0A:  CLRF   x22
07B0C:  CLRF   x23
07B0E:  CLRF   x24
07B10:  CLRF   x25
07B12:  CLRF   x26
07B14:  CLRF   x27
07B16:  CLRF   x28
07B18:  CLRF   x29
07B1A:  CLRF   x2A
07B1C:  CLRF   x2B
07B1E:  CLRF   x2C
07B20:  CLRF   x2D
07B22:  CLRF   x2E
07B24:  CLRF   x2F
07B26:  CLRF   x30
07B28:  CLRF   x31
07B2A:  CLRF   x32
07B2C:  CLRF   x33
07B2E:  CLRF   x34
07B30:  CLRF   x35
07B32:  CLRF   x36
07B34:  CLRF   x37
07B36:  CLRF   x38
07B38:  CLRF   x39
07B3A:  CLRF   x3A
07B3C:  CLRF   x3B
07B3E:  CLRF   x3C
07B40:  CLRF   x3D
07B42:  CLRF   x3E
07B44:  CLRF   x3F
07B46:  CLRF   x40
07B48:  CLRF   x41
07B4A:  CLRF   x42
07B4C:  CLRF   x43
07B4E:  CLRF   x44
07B50:  CLRF   x45
07B52:  CLRF   x46
07B54:  CLRF   x47
07B56:  CLRF   x48
07B58:  CLRF   x49
07B5A:  CLRF   x4A
07B5C:  CLRF   x4B
07B5E:  CLRF   x4C
07B60:  CLRF   x4D
07B62:  CLRF   x4E
07B64:  CLRF   x4F
07B66:  CLRF   x50
07B68:  CLRF   x51
07B6A:  CLRF   x52
07B6C:  CLRF   x53
07B6E:  CLRF   x54
07B70:  CLRF   x55
07B72:  CLRF   x56
07B74:  CLRF   x57
07B76:  CLRF   x58
07B78:  CLRF   x59
07B7A:  CLRF   x5A
07B7C:  CLRF   x5B
07B7E:  CLRF   x5C
07B80:  CLRF   x5D
07B82:  CLRF   x5E
07B84:  CLRF   x5F
07B86:  CLRF   x60
07B88:  CLRF   x61
07B8A:  CLRF   x62
07B8C:  CLRF   x63
07B8E:  CLRF   x64
07B90:  CLRF   x65
07B92:  CLRF   x66
07B94:  CLRF   x67
07B96:  CLRF   x68
07B98:  CLRF   x69
07B9A:  CLRF   x6A
07B9C:  CLRF   x6B
07B9E:  CLRF   x6C
07BA0:  CLRF   x6D
07BA2:  CLRF   x6E
07BA4:  CLRF   x6F
07BA6:  CLRF   x70
07BA8:  CLRF   x71
07BAA:  CLRF   x72
07BAC:  CLRF   x73
07BAE:  CLRF   x74
07BB0:  CLRF   x75
07BB2:  CLRF   x76
07BB4:  CLRF   x77
07BB6:  CLRF   x78
07BB8:  CLRF   x79
07BBA:  CLRF   x7A
07BBC:  CLRF   x7B
07BBE:  CLRF   x7C
07BC0:  CLRF   x7D
07BC2:  CLRF   x7E
07BC4:  CLRF   x7F
07BC6:  CLRF   x80
07BC8:  CLRF   x81
07BCA:  CLRF   x82
07BCC:  CLRF   x83
07BCE:  CLRF   x84
07BD0:  CLRF   x85
07BD2:  CLRF   x86
07BD4:  CLRF   x87
07BD6:  CLRF   x88
07BD8:  CLRF   x89
07BDA:  CLRF   x8A
07BDC:  CLRF   x8B
07BDE:  CLRF   x8C
07BE0:  CLRF   x8D
07BE2:  CLRF   x8E
07BE4:  CLRF   x8F
07BE6:  CLRF   x90
07BE8:  CLRF   x91
07BEA:  CLRF   x92
07BEC:  CLRF   x93
07BEE:  CLRF   x94
07BF0:  CLRF   x95
07BF2:  CLRF   x96
07BF4:  CLRF   x97
07BF6:  CLRF   x98
07BF8:  CLRF   x99
07BFA:  CLRF   x9A
07BFC:  CLRF   x9B
07BFE:  CLRF   x9C
07C00:  CLRF   x9D
07C02:  CLRF   x9E
07C04:  CLRF   x9F
07C06:  CLRF   xA0
07C08:  CLRF   xA1
07C0A:  CLRF   xA2
07C0C:  CLRF   xA3
07C0E:  CLRF   xA4
07C10:  CLRF   xA5
07C12:  CLRF   xA6
07C14:  CLRF   xA7
07C16:  CLRF   xA8
07C18:  CLRF   xA9
07C1A:  CLRF   xAA
07C1C:  CLRF   xAB
07C1E:  CLRF   xAC
07C20:  CLRF   xAD
07C22:  CLRF   xAE
07C24:  CLRF   xAF
07C26:  CLRF   xB0
07C28:  CLRF   xB1
07C2A:  CLRF   xB2
07C2C:  CLRF   xB3
07C2E:  CLRF   xB4
07C30:  CLRF   xB5
07C32:  CLRF   xB6
07C34:  CLRF   xB7
07C36:  CLRF   xB8
07C38:  CLRF   xB9
07C3A:  CLRF   xBA
07C3C:  CLRF   xBB
07C3E:  CLRF   xBC
07C40:  CLRF   xBD
07C42:  CLRF   xBE
07C44:  CLRF   xBF
07C46:  CLRF   xC0
07C48:  CLRF   xC1
07C4A:  CLRF   xC2
07C4C:  CLRF   xC3
07C4E:  CLRF   xC4
07C50:  CLRF   xC5
07C52:  CLRF   xC6
07C54:  CLRF   xC7
07C56:  CLRF   xC8
07C58:  CLRF   xC9
07C5A:  CLRF   xCA
07C5C:  CLRF   xCB
07C5E:  CLRF   xCC
07C60:  CLRF   xCD
07C62:  CLRF   xCE
07C64:  CLRF   xCF
07C66:  CLRF   xD0
07C68:  CLRF   xD1
07C6A:  CLRF   xD2
07C6C:  CLRF   xD3
07C6E:  CLRF   xD4
07C70:  CLRF   xD5
07C72:  CLRF   xD6
07C74:  CLRF   xD7
07C76:  CLRF   xD8
07C78:  CLRF   xD9
07C7A:  CLRF   xDA
07C7C:  CLRF   xDB
07C7E:  CLRF   xDC
07C80:  CLRF   xDD
07C82:  CLRF   xDE
07C84:  CLRF   xDF
07C86:  CLRF   xE0
07C88:  CLRF   xE1
07C8A:  CLRF   xE2
07C8C:  CLRF   xE3
07C8E:  CLRF   xE4
07C90:  CLRF   xE5
07C92:  CLRF   xE6
07C94:  CLRF   xE7
07C96:  CLRF   xE8
07C98:  CLRF   xE9
07C9A:  CLRF   xEA
07C9C:  CLRF   xEB
07C9E:  CLRF   xEC
07CA0:  CLRF   xED
07CA2:  CLRF   xEE
07CA4:  CLRF   xEF
07CA6:  CLRF   xF0
07CA8:  CLRF   xF1
07CAA:  CLRF   xF2
07CAC:  CLRF   xF3
07CAE:  CLRF   xF4
07CB0:  CLRF   xF5
07CB2:  CLRF   xF6
07CB4:  CLRF   xF7
07CB6:  CLRF   xF8
07CB8:  CLRF   xF9
07CBA:  CLRF   xFA
07CBC:  CLRF   xFB
07CBE:  CLRF   xFC
07CC0:  CLRF   xFD
07CC2:  CLRF   xFE
07CC4:  CLRF   xFF
07CC6:  MOVLB  8
07CC8:  CLRF   x00
07CCA:  CLRF   x01
07CCC:  CLRF   x02
07CCE:  CLRF   x03
07CD0:  CLRF   x04
07CD2:  CLRF   x05
07CD4:  CLRF   x06
07CD6:  CLRF   x07
07CD8:  CLRF   x08
07CDA:  CLRF   x09
07CDC:  CLRF   x0A
07CDE:  CLRF   x0B
07CE0:  CLRF   x0C
07CE2:  CLRF   x0D
07CE4:  CLRF   x0E
07CE6:  CLRF   x0F
07CE8:  CLRF   x10
07CEA:  CLRF   x11
07CEC:  CLRF   x12
07CEE:  CLRF   x13
07CF0:  CLRF   x14
07CF2:  CLRF   x15
07CF4:  CLRF   x16
07CF6:  CLRF   x17
07CF8:  CLRF   x18
07CFA:  CLRF   x19
07CFC:  CLRF   x1A
07CFE:  CLRF   x1B
07D00:  CLRF   x1C
07D02:  CLRF   x1D
07D04:  CLRF   x1E
07D06:  CLRF   x1F
07D08:  CLRF   x20
07D0A:  CLRF   x21
07D0C:  CLRF   x22
07D0E:  CLRF   x23
07D10:  CLRF   x24
07D12:  CLRF   x25
07D14:  CLRF   x26
07D16:  CLRF   x27
07D18:  CLRF   x28
07D1A:  CLRF   x29
07D1C:  CLRF   x2A
07D1E:  CLRF   x2B
07D20:  CLRF   x2C
07D22:  CLRF   x2D
07D24:  CLRF   x2E
07D26:  CLRF   x2F
07D28:  CLRF   x30
07D2A:  CLRF   x31
07D2C:  CLRF   x32
07D2E:  CLRF   x33
07D30:  CLRF   x34
07D32:  CLRF   x35
07D34:  CLRF   x36
07D36:  CLRF   x37
07D38:  CLRF   x38
07D3A:  CLRF   x39
07D3C:  CLRF   x3A
07D3E:  CLRF   x3B
07D40:  CLRF   x3C
07D42:  CLRF   x3D
07D44:  CLRF   x3E
07D46:  CLRF   x3F
07D48:  CLRF   x40
07D4A:  CLRF   x41
07D4C:  CLRF   x42
07D4E:  CLRF   x43
07D50:  CLRF   x44
07D52:  CLRF   x45
07D54:  CLRF   x46
07D56:  CLRF   x47
07D58:  CLRF   x48
07D5A:  CLRF   x49
07D5C:  CLRF   x4A
07D5E:  CLRF   x4B
07D60:  CLRF   x4C
07D62:  CLRF   x4D
07D64:  CLRF   x4E
07D66:  CLRF   x4F
07D68:  CLRF   x50
07D6A:  CLRF   x51
07D6C:  CLRF   x52
07D6E:  CLRF   x53
07D70:  CLRF   x54
07D72:  CLRF   x55
07D74:  CLRF   x56
07D76:  CLRF   x57
07D78:  CLRF   x58
07D7A:  CLRF   x59
07D7C:  CLRF   x5A
07D7E:  CLRF   x5B
07D80:  CLRF   x5C
07D82:  CLRF   x5D
07D84:  CLRF   x5E
07D86:  CLRF   x5F
07D88:  CLRF   x60
07D8A:  CLRF   x61
07D8C:  CLRF   x62
07D8E:  CLRF   x63
07D90:  CLRF   x64
07D92:  CLRF   x65
07D94:  CLRF   x66
07D96:  CLRF   x67
07D98:  CLRF   x68
07D9A:  CLRF   x69
07D9C:  CLRF   x6A
07D9E:  CLRF   x6B
07DA0:  CLRF   x6C
07DA2:  CLRF   x6D
07DA4:  CLRF   x6E
07DA6:  CLRF   x6F
07DA8:  CLRF   x70
07DAA:  CLRF   x71
07DAC:  CLRF   x72
07DAE:  CLRF   x73
07DB0:  CLRF   x74
07DB2:  CLRF   x75
07DB4:  CLRF   x76
07DB6:  CLRF   x77
07DB8:  CLRF   x78
07DBA:  CLRF   x79
07DBC:  CLRF   x7A
07DBE:  CLRF   x7B
07DC0:  CLRF   x7C
07DC2:  CLRF   x7D
07DC4:  CLRF   x7E
07DC6:  CLRF   x7F
07DC8:  CLRF   x80
07DCA:  CLRF   x81
07DCC:  CLRF   x82
07DCE:  CLRF   x83
07DD0:  CLRF   x84
07DD2:  CLRF   x85
07DD4:  CLRF   x86
07DD6:  CLRF   x87
07DD8:  CLRF   x88
07DDA:  CLRF   x89
07DDC:  CLRF   x8A
07DDE:  CLRF   x8B
07DE0:  CLRF   x8C
07DE2:  CLRF   x8D
07DE4:  CLRF   x8E
07DE6:  CLRF   x8F
07DE8:  CLRF   x90
07DEA:  CLRF   x91
07DEC:  CLRF   x92
07DEE:  CLRF   x93
07DF0:  CLRF   x94
07DF2:  CLRF   x95
07DF4:  CLRF   x96
07DF6:  CLRF   x97
07DF8:  CLRF   x98
07DFA:  CLRF   x99
07DFC:  CLRF   x9A
07DFE:  CLRF   x9B
07E00:  CLRF   x9C
07E02:  CLRF   x9D
07E04:  CLRF   x9E
07E06:  CLRF   x9F
07E08:  CLRF   xA0
07E0A:  CLRF   xA1
07E0C:  CLRF   xA2
07E0E:  CLRF   xA3
07E10:  CLRF   xA4
07E12:  CLRF   xA5
07E14:  CLRF   xA6
07E16:  CLRF   xA7
07E18:  CLRF   xA8
07E1A:  CLRF   xA9
07E1C:  CLRF   xAA
07E1E:  CLRF   xAB
07E20:  CLRF   xAC
07E22:  CLRF   xAD
07E24:  CLRF   xAE
07E26:  CLRF   xAF
07E28:  CLRF   xB0
07E2A:  CLRF   xB1
07E2C:  CLRF   xB2
07E2E:  CLRF   xB3
07E30:  CLRF   xB4
07E32:  CLRF   xB5
07E34:  CLRF   xB6
07E36:  CLRF   xB7
07E38:  CLRF   xB8
07E3A:  CLRF   xB9
07E3C:  CLRF   xBA
07E3E:  CLRF   xBB
07E40:  CLRF   xBC
07E42:  CLRF   xBD
07E44:  CLRF   xBE
07E46:  CLRF   xBF
07E48:  CLRF   xC0
07E4A:  CLRF   xC1
07E4C:  CLRF   xC2
07E4E:  CLRF   xC3
07E50:  CLRF   xC4
07E52:  CLRF   xC5
07E54:  CLRF   xC6
07E56:  CLRF   xC7
07E58:  CLRF   xC8
07E5A:  CLRF   xC9
07E5C:  CLRF   xCA
07E5E:  CLRF   xCB
07E60:  CLRF   xCC
07E62:  CLRF   xCD
07E64:  CLRF   xCE
07E66:  CLRF   xCF
07E68:  CLRF   xD0
07E6A:  CLRF   xD1
07E6C:  CLRF   xD2
07E6E:  CLRF   xD3
07E70:  CLRF   xD4
07E72:  CLRF   xD5
07E74:  CLRF   xD6
07E76:  CLRF   xD7
07E78:  CLRF   xD8
07E7A:  CLRF   xD9
07E7C:  CLRF   xDA
07E7E:  CLRF   xDB
07E80:  CLRF   xDC
07E82:  CLRF   xDD
07E84:  CLRF   xDE
07E86:  CLRF   xDF
07E88:  CLRF   xE0
07E8A:  CLRF   xE1
07E8C:  CLRF   xE2
07E8E:  CLRF   xE3
07E90:  CLRF   xE4
07E92:  CLRF   xE5
07E94:  CLRF   xE6
07E96:  CLRF   xE7
07E98:  CLRF   xE8
07E9A:  CLRF   xE9
07E9C:  CLRF   xEA
07E9E:  CLRF   xEB
07EA0:  CLRF   xEC
07EA2:  CLRF   xED
07EA4:  CLRF   xEE
07EA6:  CLRF   xEF
07EA8:  CLRF   xF0
07EAA:  CLRF   xF1
07EAC:  CLRF   xF2
07EAE:  CLRF   xF3
07EB0:  CLRF   xF4
07EB2:  CLRF   xF5
07EB4:  CLRF   xF6
07EB6:  CLRF   xF7
07EB8:  CLRF   xF8
07EBA:  CLRF   xF9
07EBC:  CLRF   xFA
07EBE:  CLRF   xFB
07EC0:  CLRF   xFC
07EC2:  CLRF   xFD
07EC4:  CLRF   xFE
07EC6:  CLRF   xFF
07EC8:  MOVLB  9
07ECA:  CLRF   x00
07ECC:  CLRF   x01
07ECE:  CLRF   x02
07ED0:  CLRF   x03
07ED2:  CLRF   x04
07ED4:  CLRF   x05
07ED6:  CLRF   x06
07ED8:  CLRF   x07
07EDA:  CLRF   x08
07EDC:  CLRF   x09
07EDE:  CLRF   x0A
07EE0:  CLRF   x0B
07EE2:  CLRF   x0C
07EE4:  CLRF   x0D
07EE6:  CLRF   x0E
07EE8:  CLRF   x0F
07EEA:  CLRF   x10
07EEC:  CLRF   x11
07EEE:  CLRF   x12
07EF0:  CLRF   x13
07EF2:  CLRF   x14
07EF4:  CLRF   x15
07EF6:  CLRF   x16
07EF8:  CLRF   x17
07EFA:  CLRF   x18
07EFC:  CLRF   x19
07EFE:  CLRF   x1A
07F00:  CLRF   x1B
07F02:  CLRF   x1C
07F04:  CLRF   x1D
07F06:  CLRF   x1E
07F08:  CLRF   x1F
07F0A:  CLRF   x20
07F0C:  CLRF   x21
07F0E:  CLRF   x22
07F10:  CLRF   x23
07F12:  CLRF   x24
07F14:  CLRF   x25
07F16:  CLRF   x26
07F18:  CLRF   x27
07F1A:  CLRF   x28
07F1C:  CLRF   x29
07F1E:  CLRF   x2A
07F20:  CLRF   x2B
07F22:  CLRF   x2C
07F24:  CLRF   x2D
07F26:  CLRF   x2E
07F28:  CLRF   x2F
07F2A:  CLRF   x30
07F2C:  CLRF   x31
07F2E:  CLRF   x32
07F30:  CLRF   x33
07F32:  CLRF   x34
07F34:  CLRF   x35
07F36:  CLRF   x36
07F38:  CLRF   x37
07F3A:  CLRF   x38
07F3C:  CLRF   x39
07F3E:  CLRF   x3A
07F40:  CLRF   x3B
07F42:  CLRF   x3C
07F44:  CLRF   x3D
07F46:  CLRF   x3E
07F48:  CLRF   x3F
07F4A:  CLRF   x40
07F4C:  CLRF   x41
07F4E:  CLRF   x42
07F50:  CLRF   x43
07F52:  CLRF   x44
07F54:  CLRF   x45
07F56:  CLRF   x46
07F58:  CLRF   x47
07F5A:  CLRF   x48
07F5C:  CLRF   x49
07F5E:  CLRF   x4A
07F60:  CLRF   x4B
07F62:  CLRF   x4C
07F64:  CLRF   x4D
07F66:  CLRF   x4E
07F68:  CLRF   x4F
07F6A:  CLRF   x50
07F6C:  CLRF   x51
07F6E:  CLRF   x52
07F70:  CLRF   x53
07F72:  CLRF   x54
07F74:  CLRF   x55
07F76:  CLRF   x56
07F78:  CLRF   x57
07F7A:  CLRF   x58
07F7C:  CLRF   x59
07F7E:  CLRF   x5A
07F80:  CLRF   x5B
07F82:  CLRF   x5C
07F84:  CLRF   x5D
07F86:  CLRF   x5E
07F88:  CLRF   x5F
07F8A:  CLRF   x60
07F8C:  CLRF   x61
07F8E:  CLRF   x62
07F90:  CLRF   x63
07F92:  CLRF   x64
07F94:  CLRF   x65
07F96:  CLRF   x66
07F98:  CLRF   x67
07F9A:  CLRF   x68
07F9C:  CLRF   x69
07F9E:  CLRF   x6A
07FA0:  CLRF   x6B
07FA2:  CLRF   x6C
07FA4:  CLRF   x6D
07FA6:  CLRF   x6E
07FA8:  CLRF   x6F
07FAA:  CLRF   x70
07FAC:  CLRF   x71
07FAE:  CLRF   x72
07FB0:  CLRF   x73
07FB2:  CLRF   x74
07FB4:  CLRF   x75
07FB6:  CLRF   x76
07FB8:  CLRF   x77
07FBA:  CLRF   x78
07FBC:  CLRF   x79
07FBE:  CLRF   x7A
07FC0:  CLRF   x7B
07FC2:  CLRF   x7C
07FC4:  CLRF   x7D
07FC6:  CLRF   x7E
07FC8:  CLRF   x7F
07FCA:  CLRF   x80
....................     port2.port_num = 2;
07FCC:  MOVLW  02
07FCE:  MOVLB  5
07FD0:  MOVWF  x81
....................     port2.sweep_step = 0;
07FD2:  CLRF   x83
07FD4:  CLRF   x82
....................     port2.active = 1;
07FD6:  MOVLB  9
07FD8:  BSF    x80.0
.................... 
....................     int16 count = 1;
07FDA:  CLRF   x82
07FDC:  MOVLW  01
07FDE:  MOVWF  x81
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
07FE0:  CLRF   x93
07FE2:  MOVLW  01
07FE4:  MOVWF  x92
07FE6:  MOVLB  0
07FE8:  CALL   661E
....................     mcp4901_2_write(1);
07FEC:  MOVLB  9
07FEE:  CLRF   x93
07FF0:  MOVLW  01
07FF2:  MOVWF  x92
07FF4:  MOVLB  0
07FF6:  CALL   665C
....................     ad7490_read(ADC_CIGS1_CURR);
07FFA:  MOVLW  01
07FFC:  MOVLB  9
07FFE:  MOVWF  xA7
08000:  MOVLB  0
08002:  CALL   1E30
....................     ad7490_read(ADC_CIGS2_CURR);
08006:  MOVLW  05
08008:  MOVLB  9
0800A:  MOVWF  xA7
0800C:  MOVLB  0
0800E:  CALL   1E30
....................     ad7490_read(ADC_CIGS2_CURR);
08012:  MOVLW  05
08014:  MOVLB  9
08016:  MOVWF  xA7
08018:  MOVLB  0
0801A:  CALL   1E30
....................     delay_ms(200);
0801E:  MOVLW  C8
08020:  MOVLB  A
08022:  MOVWF  x3E
08024:  MOVLB  0
08026:  CALL   1C0E
.................... 
....................     // Read initial PD value
....................     MEASUREMENT_DATA measured_data = create_meas_data();
0802A:  GOTO   67A4
0802E:  MOVFF  02,03
08032:  MOVF   01,W
08034:  MOVWF  FE1
08036:  MOVFF  03,FE2
0803A:  MOVLW  09
0803C:  MOVWF  FEA
0803E:  MOVLW  83
08040:  MOVWF  FE9
08042:  MOVLW  0F
08044:  MOVWF  01
08046:  MOVFF  FE6,FEE
0804A:  DECFSZ 01,F
0804C:  GOTO   8046
....................     // Continue measurement while at least one port is active
....................     while (port1.active || port2.active)
08050:  MOVLB  5
08052:  BTFSS  x80.0
08054:  BRA    805C
08056:  MOVLB  0
08058:  GOTO   806C
0805C:  MOVLB  0
0805E:  MOVLB  9
08060:  BTFSC  x80.0
08062:  BRA    806A
08064:  MOVLB  0
08066:  GOTO   84EC
0806A:  MOVLB  0
....................     {
....................         // Set DAC values for both ports (synchronized timing)
....................         mcp4901_1_write(count);
0806C:  MOVFF  982,993
08070:  MOVFF  981,992
08074:  CALL   661E
....................         mcp4901_2_write(count);
08078:  MOVFF  982,993
0807C:  MOVFF  981,992
08080:  CALL   665C
....................         delay_ms(1); // wait for DAC to stabilize
08084:  MOVLW  01
08086:  MOVLB  A
08088:  MOVWF  x3E
0808A:  MOVLB  0
0808C:  CALL   1C0E
.................... 
....................         // Read CIGS1 data (port1) only if still active
....................         if (port1.active) {
08090:  MOVLB  5
08092:  BTFSC  x80.0
08094:  BRA    809C
08096:  MOVLB  0
08098:  GOTO   8128
0809C:  MOVLB  0
....................             port1.data_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
0809E:  BCF    FD8.0
080A0:  MOVLB  9
080A2:  RLCF   x81,W
080A4:  MOVWF  02
080A6:  RLCF   x82,W
080A8:  MOVWF  03
080AA:  MOVF   02,W
080AC:  ADDLW  84
080AE:  MOVWF  01
080B0:  MOVLW  01
080B2:  ADDWFC 03,F
080B4:  MOVF   01,W
080B6:  MOVWF  x92
080B8:  MOVFF  03,993
080BC:  MOVLW  02
080BE:  MOVWF  xA7
080C0:  MOVLB  0
080C2:  CALL   1E30
080C6:  MOVFF  993,FEA
080CA:  MOVFF  992,FE9
080CE:  MOVFF  02,FEC
080D2:  MOVF   FED,F
080D4:  MOVFF  01,FEF
....................             port1.data_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
080D8:  BCF    FD8.0
080DA:  MOVLB  9
080DC:  RLCF   x81,W
080DE:  MOVWF  02
080E0:  RLCF   x82,W
080E2:  MOVWF  03
080E4:  MOVF   02,W
080E6:  ADDLW  82
080E8:  MOVWF  01
080EA:  MOVLW  03
080EC:  ADDWFC 03,F
080EE:  MOVF   01,W
080F0:  MOVWF  x92
080F2:  MOVFF  03,993
080F6:  MOVLW  01
080F8:  MOVWF  xA7
080FA:  MOVLB  0
080FC:  CALL   1E30
08100:  MOVFF  993,FEA
08104:  MOVFF  992,FE9
08108:  MOVFF  02,FEC
0810C:  MOVF   FED,F
0810E:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; // Update CIGS1 step counter
08112:  MOVLW  01
08114:  MOVLB  9
08116:  ADDWF  x81,W
08118:  MOVLB  1
0811A:  MOVWF  x82
0811C:  MOVLW  00
0811E:  MOVLB  9
08120:  ADDWFC x82,W
08122:  MOVLB  1
08124:  MOVWF  x83
08126:  MOVLB  0
....................         }
....................         
....................         // Read CIGS2 data (port2) only if still active
....................         if (port2.active) {
08128:  MOVLB  9
0812A:  BTFSC  x80.0
0812C:  BRA    8134
0812E:  MOVLB  0
08130:  GOTO   8288
08134:  MOVLB  0
....................             port2.data_buffer[0][count] = ad7490_read(ADC_CIGS2_AMP);
08136:  BCF    FD8.0
08138:  MOVLB  9
0813A:  RLCF   x81,W
0813C:  MOVWF  02
0813E:  RLCF   x82,W
08140:  MOVWF  03
08142:  MOVF   02,W
08144:  ADDLW  84
08146:  MOVWF  01
08148:  MOVLW  05
0814A:  ADDWFC 03,F
0814C:  MOVF   01,W
0814E:  MOVWF  x92
08150:  MOVFF  03,993
08154:  MOVLW  06
08156:  MOVWF  xA7
08158:  MOVLB  0
0815A:  CALL   1E30
0815E:  MOVFF  993,FEA
08162:  MOVFF  992,FE9
08166:  MOVFF  02,FEC
0816A:  MOVF   FED,F
0816C:  MOVFF  01,FEF
....................             port2.data_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
08170:  BCF    FD8.0
08172:  MOVLB  9
08174:  RLCF   x81,W
08176:  MOVWF  02
08178:  RLCF   x82,W
0817A:  MOVWF  03
0817C:  MOVF   02,W
0817E:  ADDLW  82
08180:  MOVWF  01
08182:  MOVLW  07
08184:  ADDWFC 03,F
08186:  MOVF   01,W
08188:  MOVWF  x92
0818A:  MOVFF  03,993
0818E:  MOVLW  05
08190:  MOVWF  xA7
08192:  MOVLB  0
08194:  CALL   1E30
08198:  MOVFF  993,FEA
0819C:  MOVFF  992,FE9
081A0:  MOVFF  02,FEC
081A4:  MOVF   FED,F
081A6:  MOVFF  01,FEF
....................             fprintf(PC, "CIGS2 data: %04LX, %04LX\r\n", port2.data_buffer[0][count], port2.data_buffer[1][count]);
081AA:  BCF    FD8.0
081AC:  MOVLB  9
081AE:  RLCF   x81,W
081B0:  MOVWF  02
081B2:  RLCF   x82,W
081B4:  MOVWF  03
081B6:  MOVF   02,W
081B8:  ADDLW  84
081BA:  MOVWF  FE9
081BC:  MOVLW  05
081BE:  ADDWFC 03,W
081C0:  MOVWF  FEA
081C2:  MOVFF  FEC,993
081C6:  MOVF   FED,F
081C8:  MOVFF  FEF,992
081CC:  BCF    FD8.0
081CE:  RLCF   x81,W
081D0:  MOVWF  02
081D2:  RLCF   x82,W
081D4:  MOVWF  03
081D6:  MOVF   02,W
081D8:  ADDLW  82
081DA:  MOVWF  FE9
081DC:  MOVLW  07
081DE:  ADDWFC 03,W
081E0:  MOVWF  FEA
081E2:  MOVFF  FEC,995
081E6:  MOVF   FED,F
081E8:  MOVFF  FEF,994
081EC:  MOVLW  3A
081EE:  MOVWF  FF6
081F0:  MOVLW  07
081F2:  MOVWF  FF7
081F4:  MOVLW  00
081F6:  MOVWF  FF8
081F8:  MOVLW  0C
081FA:  MOVWF  x96
081FC:  MOVLB  0
081FE:  CALL   1CBE
08202:  MOVFF  993,996
08206:  MOVLW  37
08208:  MOVLB  9
0820A:  MOVWF  x97
0820C:  MOVLB  0
0820E:  CALL   1EBC
08212:  MOVFF  992,996
08216:  MOVLW  37
08218:  MOVLB  9
0821A:  MOVWF  x97
0821C:  MOVLB  0
0821E:  CALL   1EBC
08222:  MOVLW  2C
08224:  MOVLB  A
08226:  MOVWF  x29
08228:  MOVLB  0
0822A:  CALL   1C3C
0822E:  MOVLW  20
08230:  MOVLB  A
08232:  MOVWF  x29
08234:  MOVLB  0
08236:  CALL   1C3C
0823A:  MOVFF  995,996
0823E:  MOVLW  37
08240:  MOVLB  9
08242:  MOVWF  x97
08244:  MOVLB  0
08246:  CALL   1EBC
0824A:  MOVFF  994,996
0824E:  MOVLW  37
08250:  MOVLB  9
08252:  MOVWF  x97
08254:  MOVLB  0
08256:  CALL   1EBC
0825A:  MOVLW  0D
0825C:  MOVLB  A
0825E:  MOVWF  x29
08260:  MOVLB  0
08262:  CALL   1C3C
08266:  MOVLW  0A
08268:  MOVLB  A
0826A:  MOVWF  x29
0826C:  MOVLB  0
0826E:  CALL   1C3C
....................             port2.sweep_step = count + 1; // Update CIGS2 step counter
08272:  MOVLW  01
08274:  MOVLB  9
08276:  ADDWF  x81,W
08278:  MOVLB  5
0827A:  MOVWF  x82
0827C:  MOVLW  00
0827E:  MOVLB  9
08280:  ADDWFC x82,W
08282:  MOVLB  5
08284:  MOVWF  x83
08286:  MOVLB  0
....................         }
.................... 
....................         count++;
08288:  MOVLB  9
0828A:  INCF   x81,F
0828C:  BTFSC  FD8.2
0828E:  INCF   x82,F
.................... 
....................         // Check global exit conditions
....................         if (count >= 255) {
08290:  MOVF   x82,F
08292:  BTFSC  FD8.2
08294:  BRA    829C
08296:  MOVLB  0
08298:  GOTO   82B0
0829C:  MOVLB  0
0829E:  MOVLB  9
082A0:  MOVF   x81,W
082A2:  SUBLW  FE
082A4:  BTFSS  FD8.0
082A6:  BRA    82AE
082A8:  MOVLB  0
082AA:  GOTO   82F4
082AE:  MOVLB  0
....................             fprintf(PC, "Maximum step count reached: %ld\r\n", count);
082B0:  MOVLW  56
082B2:  MOVWF  FF6
082B4:  MOVLW  07
082B6:  MOVWF  FF7
082B8:  MOVLW  00
082BA:  MOVWF  FF8
082BC:  MOVLW  1C
082BE:  MOVLB  9
082C0:  MOVWF  x96
082C2:  MOVLB  0
082C4:  CALL   1CBE
082C8:  MOVLW  10
082CA:  MOVWF  FE9
082CC:  MOVFF  982,993
082D0:  MOVFF  981,992
082D4:  GOTO   682E
082D8:  MOVLW  0D
082DA:  MOVLB  A
082DC:  MOVWF  x29
082DE:  MOVLB  0
082E0:  CALL   1C3C
082E4:  MOVLW  0A
082E6:  MOVLB  A
082E8:  MOVWF  x29
082EA:  MOVLB  0
082EC:  CALL   1C3C
....................             break;
082F0:  GOTO   84EC
....................         }
....................         
....................         // Check CIGS1 specific conditions
....................         if (port1.active) {
082F4:  MOVLB  5
082F6:  BTFSC  x80.0
082F8:  BRA    8300
082FA:  MOVLB  0
082FC:  GOTO   83EE
08300:  MOVLB  0
....................             if (port1.data_buffer[1][count-1] < curr_limit) {
08302:  MOVLW  01
08304:  MOVLB  9
08306:  SUBWF  x81,W
08308:  MOVWF  x92
0830A:  MOVLW  00
0830C:  SUBWFB x82,W
0830E:  MOVWF  x93
08310:  BCF    FD8.0
08312:  RLCF   x92,W
08314:  MOVWF  02
08316:  RLCF   x93,W
08318:  MOVWF  03
0831A:  MOVF   02,W
0831C:  ADDLW  82
0831E:  MOVWF  FE9
08320:  MOVLW  03
08322:  ADDWFC 03,W
08324:  MOVWF  FEA
08326:  MOVFF  FEC,993
0832A:  MOVF   FED,F
0832C:  MOVFF  FEF,992
08330:  MOVF   x93,W
08332:  MOVLB  1
08334:  SUBWF  x80,W
08336:  BTFSC  FD8.0
08338:  BRA    8340
0833A:  MOVLB  0
0833C:  GOTO   837A
08340:  MOVLB  0
08342:  BTFSS  FD8.2
08344:  GOTO   835C
08348:  MOVLB  1
0834A:  MOVF   x7F,W
0834C:  MOVLB  9
0834E:  SUBWF  x92,W
08350:  BTFSS  FD8.0
08352:  BRA    835A
08354:  MOVLB  0
08356:  GOTO   837A
0835A:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current limit reached:");
0835C:  MOVLW  78
0835E:  MOVWF  FF6
08360:  MOVLW  07
08362:  MOVWF  FF7
08364:  MOVLW  00
08366:  MOVWF  FF8
08368:  CALL   1C8E
....................                 port1.active = 0;
0836C:  MOVLB  5
0836E:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
08370:  BCF    F94.0
08372:  BCF    F8B.0
08374:  MOVLB  0
....................             }
08376:  GOTO   83EE
....................             else if (port1.data_buffer[1][count-1] < curr_threshold) {
0837A:  MOVLW  01
0837C:  MOVLB  9
0837E:  SUBWF  x81,W
08380:  MOVWF  x92
08382:  MOVLW  00
08384:  SUBWFB x82,W
08386:  MOVWF  x93
08388:  BCF    FD8.0
0838A:  RLCF   x92,W
0838C:  MOVWF  02
0838E:  RLCF   x93,W
08390:  MOVWF  03
08392:  MOVF   02,W
08394:  ADDLW  82
08396:  MOVWF  FE9
08398:  MOVLW  03
0839A:  ADDWFC 03,W
0839C:  MOVWF  FEA
0839E:  MOVFF  FEC,993
083A2:  MOVF   FED,F
083A4:  MOVFF  FEF,992
083A8:  MOVF   x93,W
083AA:  MOVLB  1
083AC:  SUBWF  x7C,W
083AE:  BTFSC  FD8.0
083B0:  BRA    83B8
083B2:  MOVLB  0
083B4:  GOTO   83EE
083B8:  MOVLB  0
083BA:  BTFSS  FD8.2
083BC:  GOTO   83D4
083C0:  MOVLB  1
083C2:  MOVF   x7B,W
083C4:  MOVLB  9
083C6:  SUBWF  x92,W
083C8:  BTFSS  FD8.0
083CA:  BRA    83D2
083CC:  MOVLB  0
083CE:  GOTO   83EE
083D2:  MOVLB  0
....................                 fprintf(PC, "CIGS1 current below threshold");
083D4:  MOVLW  96
083D6:  MOVWF  FF6
083D8:  MOVLW  07
083DA:  MOVWF  FF7
083DC:  MOVLW  00
083DE:  MOVWF  FF8
083E0:  CALL   1C8E
....................                 port1.active = 0;
083E4:  MOVLB  5
083E6:  BCF    x80.0
....................                 output_low(CONNECT_CIGS1); // Disconnect CIGS1
083E8:  BCF    F94.0
083EA:  BCF    F8B.0
083EC:  MOVLB  0
....................             }
....................         }
....................         
....................         // Check CIGS2 specific conditions
....................         if (port2.active) {
083EE:  MOVLB  9
083F0:  BTFSC  x80.0
083F2:  BRA    83FA
083F4:  MOVLB  0
083F6:  GOTO   84E8
083FA:  MOVLB  0
....................             if (port2.data_buffer[1][count-1] < curr_limit) {
083FC:  MOVLW  01
083FE:  MOVLB  9
08400:  SUBWF  x81,W
08402:  MOVWF  x92
08404:  MOVLW  00
08406:  SUBWFB x82,W
08408:  MOVWF  x93
0840A:  BCF    FD8.0
0840C:  RLCF   x92,W
0840E:  MOVWF  02
08410:  RLCF   x93,W
08412:  MOVWF  03
08414:  MOVF   02,W
08416:  ADDLW  82
08418:  MOVWF  FE9
0841A:  MOVLW  07
0841C:  ADDWFC 03,W
0841E:  MOVWF  FEA
08420:  MOVFF  FEC,993
08424:  MOVF   FED,F
08426:  MOVFF  FEF,992
0842A:  MOVF   x93,W
0842C:  MOVLB  1
0842E:  SUBWF  x80,W
08430:  BTFSC  FD8.0
08432:  BRA    843A
08434:  MOVLB  0
08436:  GOTO   8474
0843A:  MOVLB  0
0843C:  BTFSS  FD8.2
0843E:  GOTO   8456
08442:  MOVLB  1
08444:  MOVF   x7F,W
08446:  MOVLB  9
08448:  SUBWF  x92,W
0844A:  BTFSS  FD8.0
0844C:  BRA    8454
0844E:  MOVLB  0
08450:  GOTO   8474
08454:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current limit reached: ");
08456:  MOVLW  B4
08458:  MOVWF  FF6
0845A:  MOVLW  07
0845C:  MOVWF  FF7
0845E:  MOVLW  00
08460:  MOVWF  FF8
08462:  CALL   1C8E
....................                 port2.active = 0;
08466:  MOVLB  9
08468:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
0846A:  BCF    F94.5
0846C:  BCF    F8B.5
0846E:  MOVLB  0
....................             }
08470:  GOTO   84E8
....................             else if (port2.data_buffer[1][count-1] < curr_threshold) {
08474:  MOVLW  01
08476:  MOVLB  9
08478:  SUBWF  x81,W
0847A:  MOVWF  x92
0847C:  MOVLW  00
0847E:  SUBWFB x82,W
08480:  MOVWF  x93
08482:  BCF    FD8.0
08484:  RLCF   x92,W
08486:  MOVWF  02
08488:  RLCF   x93,W
0848A:  MOVWF  03
0848C:  MOVF   02,W
0848E:  ADDLW  82
08490:  MOVWF  FE9
08492:  MOVLW  07
08494:  ADDWFC 03,W
08496:  MOVWF  FEA
08498:  MOVFF  FEC,993
0849C:  MOVF   FED,F
0849E:  MOVFF  FEF,992
084A2:  MOVF   x93,W
084A4:  MOVLB  1
084A6:  SUBWF  x7C,W
084A8:  BTFSC  FD8.0
084AA:  BRA    84B2
084AC:  MOVLB  0
084AE:  GOTO   84E8
084B2:  MOVLB  0
084B4:  BTFSS  FD8.2
084B6:  GOTO   84CE
084BA:  MOVLB  1
084BC:  MOVF   x7B,W
084BE:  MOVLB  9
084C0:  SUBWF  x92,W
084C2:  BTFSS  FD8.0
084C4:  BRA    84CC
084C6:  MOVLB  0
084C8:  GOTO   84E8
084CC:  MOVLB  0
....................                 fprintf(PC, "CIGS2 current below threshold:");
084CE:  MOVLW  D2
084D0:  MOVWF  FF6
084D2:  MOVLW  07
084D4:  MOVWF  FF7
084D6:  MOVLW  00
084D8:  MOVWF  FF8
084DA:  CALL   1C8E
....................                 port2.active = 0;
084DE:  MOVLB  9
084E0:  BCF    x80.0
....................                 output_low(CONNECT_CIGS2); // Disconnect CIGS2
084E2:  BCF    F94.5
084E4:  BCF    F8B.5
084E6:  MOVLB  0
....................             }
....................         }
084E8:  GOTO   8050
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     output_low(CONNECT_CIGS1);
084EC:  BCF    F94.0
084EE:  BCF    F8B.0
....................     output_low(CONNECT_CIGS2);
084F0:  BCF    F94.5
084F2:  BCF    F8B.5
....................     // output_high(EN_NPWR);
.................... 
....................     log_meas_data(&measured_data, &port1); // Log data for CIGS1
084F4:  MOVLW  09
084F6:  MOVLB  9
084F8:  MOVWF  x93
084FA:  MOVLW  83
084FC:  MOVWF  x92
084FE:  MOVLW  01
08500:  MOVWF  x95
08502:  MOVLW  81
08504:  MOVWF  x94
08506:  MOVLB  0
08508:  CALL   69B8
....................     log_meas_data(&measured_data, &port2); // Log data for CIGS2
0850C:  MOVLW  09
0850E:  MOVLB  9
08510:  MOVWF  x93
08512:  MOVLW  83
08514:  MOVWF  x92
08516:  MOVLW  05
08518:  MOVWF  x95
0851A:  MOVLW  81
0851C:  MOVWF  x94
0851E:  MOVLB  0
08520:  CALL   69B8
.................... 
....................     fprintf(PC, "End SWEEP with threshold\r\n");
08524:  MOVLW  F2
08526:  MOVWF  FF6
08528:  MOVLW  07
0852A:  MOVWF  FF7
0852C:  MOVLW  00
0852E:  MOVWF  FF8
08530:  CALL   1C8E
08534:  GOTO   89F4 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data)
*
06A3A:  CLRF   xD6
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
*
069B8:  MOVLB  9
069BA:  CLRF   x96
069BC:  CLRF   x97
069BE:  CLRF   x98
069C0:  CLRF   x99
069C2:  CLRF   x9A
069C4:  CLRF   x9B
069C6:  CLRF   x9C
069C8:  CLRF   x9D
069CA:  CLRF   x9E
069CC:  CLRF   x9F
069CE:  CLRF   xA0
069D0:  CLRF   xA1
069D2:  CLRF   xA2
069D4:  CLRF   xA3
069D6:  CLRF   xA4
069D8:  CLRF   xA5
069DA:  CLRF   xA6
069DC:  CLRF   xA7
069DE:  CLRF   xA8
069E0:  CLRF   xA9
069E2:  CLRF   xAA
069E4:  CLRF   xAB
069E6:  CLRF   xAC
069E8:  CLRF   xAD
069EA:  CLRF   xAE
069EC:  CLRF   xAF
069EE:  CLRF   xB0
069F0:  CLRF   xB1
069F2:  CLRF   xB2
069F4:  CLRF   xB3
069F6:  CLRF   xB4
069F8:  CLRF   xB5
069FA:  CLRF   xB6
069FC:  CLRF   xB7
069FE:  CLRF   xB8
06A00:  CLRF   xB9
06A02:  CLRF   xBA
06A04:  CLRF   xBB
06A06:  CLRF   xBC
06A08:  CLRF   xBD
06A0A:  CLRF   xBE
06A0C:  CLRF   xBF
06A0E:  CLRF   xC0
06A10:  CLRF   xC1
06A12:  CLRF   xC2
06A14:  CLRF   xC3
06A16:  CLRF   xC4
06A18:  CLRF   xC5
06A1A:  CLRF   xC6
06A1C:  CLRF   xC7
06A1E:  CLRF   xC8
06A20:  CLRF   xC9
06A22:  CLRF   xCA
06A24:  CLRF   xCB
06A26:  CLRF   xCC
06A28:  CLRF   xCD
06A2A:  CLRF   xCE
06A2C:  CLRF   xCF
06A2E:  CLRF   xD0
06A30:  CLRF   xD1
06A32:  CLRF   xD2
06A34:  CLRF   xD3
06A36:  CLRF   xD4
06A38:  CLRF   xD5
....................     unsigned int8 packetdata_index = 0; // Index for packet data
.................... 
.................... 
....................     // Header creation
....................     packetdata[0] = START_MAKER;
*
06A3C:  SETF   x96
....................     packetdata[1] = (START_MAKER & 0xF0) | (port_data->port_num & 0x0F);
06A3E:  MOVF   x94,W
06A40:  MOVWF  FE9
06A42:  MOVF   x95,W
06A44:  MOVWF  FEA
06A46:  MOVF   FEF,W
06A48:  ANDLW  0F
06A4A:  IORLW  F0
06A4C:  MOVWF  x97
....................     packetdata[2] = measured_data->time_sec >> 24 & 0xFF;
06A4E:  MOVF   x92,W
06A50:  MOVWF  FE9
06A52:  MOVF   x93,W
06A54:  MOVWF  FEA
06A56:  MOVFF  FEF,9E6
06A5A:  MOVFF  FEC,9E7
06A5E:  MOVFF  FEC,9E8
06A62:  MOVFF  FEC,9E9
06A66:  MOVF   FED,F
06A68:  MOVF   FED,F
06A6A:  MOVF   FED,F
06A6C:  MOVFF  9E9,9E6
06A70:  CLRF   xE7
06A72:  CLRF   xE8
06A74:  CLRF   xE9
06A76:  MOVF   xE6,W
06A78:  MOVWF  x98
....................     packetdata[3] = measured_data->time_sec >> 16 & 0xFF;
06A7A:  MOVF   x92,W
06A7C:  MOVWF  FE9
06A7E:  MOVF   x93,W
06A80:  MOVWF  FEA
06A82:  MOVFF  FEF,9E6
06A86:  MOVFF  FEC,9E7
06A8A:  MOVFF  FEC,9E8
06A8E:  MOVFF  FEC,9E9
06A92:  MOVF   FED,F
06A94:  MOVF   FED,F
06A96:  MOVF   FED,F
06A98:  MOVFF  9E8,9E6
06A9C:  MOVFF  9E9,9E7
06AA0:  CLRF   xE8
06AA2:  CLRF   xE9
06AA4:  MOVF   xE6,W
06AA6:  MOVWF  x99
....................     packetdata[4] = measured_data->time_sec >> 8 & 0xFF;
06AA8:  MOVF   x92,W
06AAA:  MOVWF  FE9
06AAC:  MOVF   x93,W
06AAE:  MOVWF  FEA
06AB0:  MOVFF  FEF,9E6
06AB4:  MOVFF  FEC,9E7
06AB8:  MOVFF  FEC,9E8
06ABC:  MOVFF  FEC,9E9
06AC0:  MOVF   FED,F
06AC2:  MOVF   FED,F
06AC4:  MOVF   FED,F
06AC6:  MOVFF  9E7,9E6
06ACA:  MOVFF  9E8,9E7
06ACE:  MOVFF  9E9,9E8
06AD2:  CLRF   xE9
06AD4:  MOVF   xE6,W
06AD6:  MOVWF  x9A
....................     packetdata[5] = measured_data->time_sec & 0xFF;
06AD8:  MOVF   x92,W
06ADA:  MOVWF  FE9
06ADC:  MOVF   x93,W
06ADE:  MOVWF  FEA
06AE0:  MOVFF  FEF,9E6
06AE4:  MOVFF  FEC,9E7
06AE8:  MOVFF  FEC,9E8
06AEC:  MOVFF  FEC,9E9
06AF0:  MOVF   FED,F
06AF2:  MOVF   FED,F
06AF4:  MOVF   FED,F
06AF6:  MOVF   xE6,W
06AF8:  MOVWF  x9B
....................     packetdata[6] = (measured_data->time_msec & 0x0F) >>4 | measured_data->pd >> 8 & 0x0F;
06AFA:  MOVLW  04
06AFC:  ADDWF  x92,W
06AFE:  MOVWF  FE9
06B00:  MOVLW  00
06B02:  ADDWFC x93,W
06B04:  MOVWF  FEA
06B06:  MOVF   FEF,W
06B08:  ANDLW  0F
06B0A:  MOVWF  00
06B0C:  SWAPF  00,W
06B0E:  MOVWF  xE6
06B10:  MOVLW  0F
06B12:  ANDWF  xE6,F
06B14:  MOVLW  0D
06B16:  ADDWF  x92,W
06B18:  MOVWF  FE9
06B1A:  MOVLW  00
06B1C:  ADDWFC x93,W
06B1E:  MOVWF  FEA
06B20:  MOVFF  FEC,9E8
06B24:  MOVF   FED,F
06B26:  MOVFF  FEF,9E7
06B2A:  MOVFF  9E8,9E7
06B2E:  CLRF   xE8
06B30:  MOVF   xE7,W
06B32:  ANDLW  0F
06B34:  MOVWF  00
06B36:  CLRF   03
06B38:  MOVF   00,W
06B3A:  IORWF  xE6,W
06B3C:  MOVWF  x9C
....................     packetdata[7] = measured_data->pd & 0xFF;
06B3E:  MOVLW  0D
06B40:  ADDWF  x92,W
06B42:  MOVWF  FE9
06B44:  MOVLW  00
06B46:  ADDWFC x93,W
06B48:  MOVWF  FEA
06B4A:  MOVFF  FEC,9E7
06B4E:  MOVF   FED,F
06B50:  MOVFF  FEF,9E6
06B54:  MOVF   xE6,W
06B56:  MOVWF  x9D
....................     packetdata[8] = (measured_data->open_voltage >> 4) & 0xFF; // PD start low byte
06B58:  MOVLW  05
06B5A:  ADDWF  x92,W
06B5C:  MOVWF  FE9
06B5E:  MOVLW  00
06B60:  ADDWFC x93,W
06B62:  MOVWF  FEA
06B64:  MOVFF  FEC,9E7
06B68:  MOVF   FED,F
06B6A:  MOVFF  FEF,9E6
06B6E:  RRCF   xE7,F
06B70:  RRCF   xE6,F
06B72:  RRCF   xE7,F
06B74:  RRCF   xE6,F
06B76:  RRCF   xE7,F
06B78:  RRCF   xE6,F
06B7A:  RRCF   xE7,F
06B7C:  RRCF   xE6,F
06B7E:  MOVLW  0F
06B80:  ANDWF  xE7,F
06B82:  MOVF   xE6,W
06B84:  MOVWF  x9E
....................     packetdata[9] = (measured_data->open_voltage & 0x0F) << 4 | (measured_data->temp_py_top >> 8) & 0x0F;
06B86:  MOVLW  05
06B88:  ADDWF  x92,W
06B8A:  MOVWF  FE9
06B8C:  MOVLW  00
06B8E:  ADDWFC x93,W
06B90:  MOVWF  FEA
06B92:  MOVFF  FEC,9E7
06B96:  MOVF   FED,F
06B98:  MOVFF  FEF,9E6
06B9C:  MOVLW  0F
06B9E:  ANDWF  xE6,F
06BA0:  CLRF   xE7
06BA2:  RLCF   xE6,F
06BA4:  RLCF   xE7,F
06BA6:  RLCF   xE6,F
06BA8:  RLCF   xE7,F
06BAA:  RLCF   xE6,F
06BAC:  RLCF   xE7,F
06BAE:  RLCF   xE6,F
06BB0:  RLCF   xE7,F
06BB2:  MOVLW  F0
06BB4:  ANDWF  xE6,F
06BB6:  MOVLW  07
06BB8:  ADDWF  x92,W
06BBA:  MOVWF  FE9
06BBC:  MOVLW  00
06BBE:  ADDWFC x93,W
06BC0:  MOVWF  FEA
06BC2:  MOVFF  FEC,9E9
06BC6:  MOVF   FED,F
06BC8:  MOVFF  FEF,9E8
06BCC:  MOVFF  9E9,9E8
06BD0:  CLRF   xE9
06BD2:  MOVF   xE8,W
06BD4:  ANDLW  0F
06BD6:  MOVWF  00
06BD8:  CLRF   03
06BDA:  MOVF   00,W
06BDC:  IORWF  xE6,W
06BDE:  MOVWF  x9F
....................     packetdata[10] = measured_data->temp_py_top & 0xFF;
06BE0:  MOVLW  07
06BE2:  ADDWF  x92,W
06BE4:  MOVWF  FE9
06BE6:  MOVLW  00
06BE8:  ADDWFC x93,W
06BEA:  MOVWF  FEA
06BEC:  MOVFF  FEC,9E7
06BF0:  MOVF   FED,F
06BF2:  MOVFF  FEF,9E6
06BF6:  MOVF   xE6,W
06BF8:  MOVWF  xA0
....................     packetdata[11] = (measured_data->temp_py_bot >> 4) & 0xFF; // PD start low byte
06BFA:  MOVLW  09
06BFC:  ADDWF  x92,W
06BFE:  MOVWF  FE9
06C00:  MOVLW  00
06C02:  ADDWFC x93,W
06C04:  MOVWF  FEA
06C06:  MOVFF  FEC,9E7
06C0A:  MOVF   FED,F
06C0C:  MOVFF  FEF,9E6
06C10:  RRCF   xE7,F
06C12:  RRCF   xE6,F
06C14:  RRCF   xE7,F
06C16:  RRCF   xE6,F
06C18:  RRCF   xE7,F
06C1A:  RRCF   xE6,F
06C1C:  RRCF   xE7,F
06C1E:  RRCF   xE6,F
06C20:  MOVLW  0F
06C22:  ANDWF  xE7,F
06C24:  MOVF   xE6,W
06C26:  MOVWF  xA1
....................     packetdata[12] = (measured_data->temp_py_bot & 0x0F) << 4 | (measured_data->temp_mis7 >> 8) & 0x0F;
06C28:  MOVLW  09
06C2A:  ADDWF  x92,W
06C2C:  MOVWF  FE9
06C2E:  MOVLW  00
06C30:  ADDWFC x93,W
06C32:  MOVWF  FEA
06C34:  MOVFF  FEC,9E7
06C38:  MOVF   FED,F
06C3A:  MOVFF  FEF,9E6
06C3E:  MOVLW  0F
06C40:  ANDWF  xE6,F
06C42:  CLRF   xE7
06C44:  RLCF   xE6,F
06C46:  RLCF   xE7,F
06C48:  RLCF   xE6,F
06C4A:  RLCF   xE7,F
06C4C:  RLCF   xE6,F
06C4E:  RLCF   xE7,F
06C50:  RLCF   xE6,F
06C52:  RLCF   xE7,F
06C54:  MOVLW  F0
06C56:  ANDWF  xE6,F
06C58:  MOVLW  0B
06C5A:  ADDWF  x92,W
06C5C:  MOVWF  FE9
06C5E:  MOVLW  00
06C60:  ADDWFC x93,W
06C62:  MOVWF  FEA
06C64:  MOVFF  FEC,9E9
06C68:  MOVF   FED,F
06C6A:  MOVFF  FEF,9E8
06C6E:  MOVFF  9E9,9E8
06C72:  CLRF   xE9
06C74:  MOVF   xE8,W
06C76:  ANDLW  0F
06C78:  MOVWF  00
06C7A:  CLRF   03
06C7C:  MOVF   00,W
06C7E:  IORWF  xE6,W
06C80:  MOVWF  xA2
....................     packetdata[13] = measured_data->temp_mis7 & 0xFF;
06C82:  MOVLW  0B
06C84:  ADDWF  x92,W
06C86:  MOVWF  FE9
06C88:  MOVLW  00
06C8A:  ADDWFC x93,W
06C8C:  MOVWF  FEA
06C8E:  MOVFF  FEC,9E7
06C92:  MOVF   FED,F
06C94:  MOVFF  FEF,9E6
06C98:  MOVF   xE6,W
06C9A:  MOVWF  xA3
.................... 
....................     packetdata_index = 14; // Start index for data
06C9C:  MOVLW  0E
06C9E:  MOVWF  xD6
.................... 
....................     for (unsigned int16 i = 0; i < port_data->sweep_step ; i++) {
06CA0:  CLRF   xD8
06CA2:  CLRF   xD7
06CA4:  MOVLB  0
06CA6:  MOVLW  01
06CA8:  MOVLB  9
06CAA:  ADDWF  x94,W
06CAC:  MOVWF  FE9
06CAE:  MOVLW  00
06CB0:  ADDWFC x95,W
06CB2:  MOVWF  FEA
06CB4:  MOVFF  FEC,03
06CB8:  MOVF   FED,F
06CBA:  MOVF   FEF,W
06CBC:  MOVWF  01
06CBE:  MOVF   xD8,W
06CC0:  SUBWF  03,W
06CC2:  BTFSC  FD8.0
06CC4:  BRA    6CCC
06CC6:  MOVLB  0
06CC8:  GOTO   6EA4
06CCC:  MOVLB  0
06CCE:  BTFSS  FD8.2
06CD0:  GOTO   6CE6
06CD4:  MOVF   01,W
06CD6:  MOVLB  9
06CD8:  SUBWF  xD7,W
06CDA:  BTFSS  FD8.0
06CDC:  BRA    6CE4
06CDE:  MOVLB  0
06CE0:  GOTO   6EA4
06CE4:  MOVLB  0
....................         unsigned int16 data0 = port_data->data_buffer[0][i];
....................         unsigned int16 data1 = port_data->data_buffer[1][i];
06CE6:  BCF    FD8.0
06CE8:  MOVLB  9
06CEA:  RLCF   xD7,W
06CEC:  MOVWF  02
06CEE:  RLCF   xD8,W
06CF0:  MOVWF  03
06CF2:  MOVF   02,W
06CF4:  ADDLW  03
06CF6:  MOVWF  01
06CF8:  MOVLW  00
06CFA:  ADDWFC 03,F
06CFC:  MOVF   01,W
06CFE:  ADDWF  x94,W
06D00:  MOVWF  FE9
06D02:  MOVF   x95,W
06D04:  ADDWFC 03,W
06D06:  MOVWF  FEA
06D08:  MOVFF  FEC,9DA
06D0C:  MOVF   FED,F
06D0E:  MOVFF  FEF,9D9
06D12:  BCF    FD8.0
06D14:  RLCF   xD7,W
06D16:  MOVWF  02
06D18:  RLCF   xD8,W
06D1A:  MOVWF  03
06D1C:  MOVF   02,W
06D1E:  ADDLW  01
06D20:  MOVWF  01
06D22:  MOVLW  02
06D24:  ADDWFC 03,F
06D26:  MOVF   01,W
06D28:  ADDWF  x94,W
06D2A:  MOVWF  FE9
06D2C:  MOVF   x95,W
06D2E:  ADDWFC 03,W
06D30:  MOVWF  FEA
06D32:  MOVFF  FEC,9DC
06D36:  MOVF   FED,F
06D38:  MOVFF  FEF,9DB
06D3C:  MOVLB  0
.................... 
....................         packetdata[packetdata_index++] = (data0 >> 4) & 0xFF;
06D3E:  MOVLB  9
06D40:  MOVF   xD6,W
06D42:  INCF   xD6,F
06D44:  CLRF   03
06D46:  ADDLW  96
06D48:  MOVWF  FE9
06D4A:  MOVLW  09
06D4C:  ADDWFC 03,W
06D4E:  MOVWF  FEA
06D50:  RRCF   xDA,W
06D52:  MOVWF  xE9
06D54:  RRCF   xD9,W
06D56:  MOVWF  xE8
06D58:  RRCF   xE9,F
06D5A:  RRCF   xE8,F
06D5C:  RRCF   xE9,F
06D5E:  RRCF   xE8,F
06D60:  RRCF   xE9,F
06D62:  RRCF   xE8,F
06D64:  MOVLW  0F
06D66:  ANDWF  xE9,F
06D68:  MOVF   xE8,W
06D6A:  MOVWF  00
06D6C:  CLRF   03
06D6E:  MOVF   00,W
06D70:  MOVWF  FEF
....................         packetdata[packetdata_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
06D72:  MOVF   xD6,W
06D74:  INCF   xD6,F
06D76:  CLRF   03
06D78:  ADDLW  96
06D7A:  MOVWF  FE9
06D7C:  MOVLW  09
06D7E:  ADDWFC 03,W
06D80:  MOVWF  FEA
06D82:  MOVF   xD9,W
06D84:  ANDLW  0F
06D86:  MOVWF  xE8
06D88:  CLRF   xE9
06D8A:  RLCF   xE8,F
06D8C:  RLCF   xE9,F
06D8E:  RLCF   xE8,F
06D90:  RLCF   xE9,F
06D92:  RLCF   xE8,F
06D94:  RLCF   xE9,F
06D96:  RLCF   xE8,F
06D98:  RLCF   xE9,F
06D9A:  MOVLW  F0
06D9C:  ANDWF  xE8,F
06D9E:  MOVFF  9DC,9EA
06DA2:  CLRF   xEB
06DA4:  MOVF   xEA,W
06DA6:  ANDLW  0F
06DA8:  MOVWF  00
06DAA:  CLRF   03
06DAC:  MOVF   00,W
06DAE:  IORWF  xE8,W
06DB0:  MOVWF  00
06DB2:  MOVF   03,W
06DB4:  IORWF  xE9,W
06DB6:  MOVWF  03
06DB8:  MOVF   00,W
06DBA:  MOVWF  FEF
....................         packetdata[packetdata_index++] = data1 & 0xFF;
06DBC:  MOVF   xD6,W
06DBE:  INCF   xD6,F
06DC0:  CLRF   03
06DC2:  ADDLW  96
06DC4:  MOVWF  FE9
06DC6:  MOVLW  09
06DC8:  ADDWFC 03,W
06DCA:  MOVWF  FEA
06DCC:  MOVF   xDB,W
06DCE:  MOVWF  00
06DD0:  CLRF   03
06DD2:  MOVF   00,W
06DD4:  MOVWF  FEF
.................... 
....................         if (packetdata_index + 3 >= PACKET_SIZE - 1) {
06DD6:  MOVLW  03
06DD8:  ADDWF  xD6,W
06DDA:  SUBLW  3E
06DDC:  BTFSS  FD8.0
06DDE:  BRA    6DE6
06DE0:  MOVLB  0
06DE2:  GOTO   6E96
06DE6:  MOVLB  0
....................             packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
06DE8:  MOVLW  09
06DEA:  MOVLB  9
06DEC:  MOVWF  xE7
06DEE:  MOVLW  96
06DF0:  MOVWF  xE6
06DF2:  MOVLW  3F
06DF4:  MOVWF  xE8
06DF6:  MOVLB  0
06DF8:  CALL   3E68
06DFC:  MOVFF  01,9D5
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
06E00:  MOVLB  1
06E02:  MOVF   x10,W
06E04:  MOVLB  9
06E06:  MOVWF  xDD
06E08:  MOVLB  1
06E0A:  MOVF   x11,W
06E0C:  MOVLB  9
06E0E:  MOVWF  xDE
06E10:  MOVLW  16
06E12:  MOVLB  1
06E14:  ADDWF  x12,W
06E16:  MOVLB  9
06E18:  MOVWF  xDF
06E1A:  MOVLW  00
06E1C:  MOVLB  1
06E1E:  ADDWFC x13,W
06E20:  MOVLB  9
06E22:  MOVWF  xE0
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
06E24:  MOVFF  F1,A29
06E28:  MOVFF  F0,A28
06E2C:  MOVFF  EF,A27
06E30:  MOVFF  EE,A26
06E34:  MOVFF  9E0,A2D
06E38:  MOVFF  9DF,A2C
06E3C:  MOVFF  9DE,A2B
06E40:  MOVFF  9DD,A2A
06E44:  MOVLW  09
06E46:  MOVLB  A
06E48:  MOVWF  x2F
06E4A:  MOVLW  96
06E4C:  MOVWF  x2E
06E4E:  CLRF   x31
06E50:  MOVLW  40
06E52:  MOVWF  x30
06E54:  MOVLB  0
06E56:  CALL   31D0
....................             misf_meas_use_counter += PACKET_SIZE;
06E5A:  MOVLW  40
06E5C:  MOVLB  1
06E5E:  ADDWF  x10,F
06E60:  MOVLW  00
06E62:  ADDWFC x11,F
06E64:  MOVLW  00
06E66:  ADDWFC x12,F
06E68:  MOVLW  00
06E6A:  ADDWFC x13,F
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
06E6C:  MOVLW  40
06E6E:  ADDWF  x15,F
06E70:  MOVLW  00
06E72:  ADDWFC x16,F
06E74:  MOVLW  00
06E76:  ADDWFC x17,F
06E78:  MOVLW  00
06E7A:  ADDWFC x18,F
....................             packetdata_index = 0;
06E7C:  MOVLB  9
06E7E:  CLRF   xD6
....................             memset(packetdata, 0x00, PACKET_SIZE);
06E80:  MOVLW  09
06E82:  MOVWF  FEA
06E84:  MOVLW  96
06E86:  MOVWF  FE9
06E88:  CLRF   00
06E8A:  CLRF   02
06E8C:  MOVLW  40
06E8E:  MOVWF  01
06E90:  MOVLB  0
06E92:  CALL   4252
....................         }
06E96:  MOVLB  9
06E98:  INCF   xD7,F
06E9A:  BTFSC  FD8.2
06E9C:  INCF   xD8,F
06E9E:  MOVLB  0
06EA0:  GOTO   6CA6
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packetdata_index > 0) {
06EA4:  MOVLB  9
06EA6:  MOVF   xD6,F
06EA8:  BTFSS  FD8.2
06EAA:  BRA    6EB2
06EAC:  MOVLB  0
06EAE:  GOTO   6F7E
06EB2:  MOVLB  0
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE - 1; j++) {
06EB4:  MOVFF  9D6,9E1
06EB8:  MOVLB  9
06EBA:  MOVF   xE1,W
06EBC:  SUBLW  3E
06EBE:  BTFSC  FD8.0
06EC0:  BRA    6EC8
06EC2:  MOVLB  0
06EC4:  GOTO   6EE8
06EC8:  MOVLB  0
....................             packetdata[j] = 0x00;
06ECA:  CLRF   03
06ECC:  MOVLB  9
06ECE:  MOVF   xE1,W
06ED0:  ADDLW  96
06ED2:  MOVWF  FE9
06ED4:  MOVLW  09
06ED6:  ADDWFC 03,W
06ED8:  MOVWF  FEA
06EDA:  CLRF   FEF
06EDC:  MOVLB  0
06EDE:  MOVLB  9
06EE0:  INCF   xE1,F
06EE2:  MOVLB  0
06EE4:  GOTO   6EB8
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
06EE8:  MOVLW  09
06EEA:  MOVLB  9
06EEC:  MOVWF  xE7
06EEE:  MOVLW  96
06EF0:  MOVWF  xE6
06EF2:  MOVLW  3F
06EF4:  MOVWF  xE8
06EF6:  MOVLB  0
06EF8:  CALL   3E68
06EFC:  MOVFF  01,9D5
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
06F00:  MOVLB  1
06F02:  MOVF   x10,W
06F04:  MOVLB  9
06F06:  MOVWF  xE2
06F08:  MOVLB  1
06F0A:  MOVF   x11,W
06F0C:  MOVLB  9
06F0E:  MOVWF  xE3
06F10:  MOVLW  16
06F12:  MOVLB  1
06F14:  ADDWF  x12,W
06F16:  MOVLB  9
06F18:  MOVWF  xE4
06F1A:  MOVLW  00
06F1C:  MOVLB  1
06F1E:  ADDWFC x13,W
06F20:  MOVLB  9
06F22:  MOVWF  xE5
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
06F24:  MOVFF  F1,A29
06F28:  MOVFF  F0,A28
06F2C:  MOVFF  EF,A27
06F30:  MOVFF  EE,A26
06F34:  MOVFF  9E5,A2D
06F38:  MOVFF  9E4,A2C
06F3C:  MOVFF  9E3,A2B
06F40:  MOVFF  9E2,A2A
06F44:  MOVLW  09
06F46:  MOVLB  A
06F48:  MOVWF  x2F
06F4A:  MOVLW  96
06F4C:  MOVWF  x2E
06F4E:  CLRF   x31
06F50:  MOVLW  40
06F52:  MOVWF  x30
06F54:  MOVLB  0
06F56:  CALL   31D0
....................         misf_meas_use_counter += PACKET_SIZE;
06F5A:  MOVLW  40
06F5C:  MOVLB  1
06F5E:  ADDWF  x10,F
06F60:  MOVLW  00
06F62:  ADDWFC x11,F
06F64:  MOVLW  00
06F66:  ADDWFC x12,F
06F68:  MOVLW  00
06F6A:  ADDWFC x13,F
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
06F6C:  MOVLW  40
06F6E:  ADDWF  x15,F
06F70:  MOVLW  00
06F72:  ADDWFC x16,F
06F74:  MOVLW  00
06F76:  ADDWFC x17,F
06F78:  MOVLW  00
06F7A:  ADDWFC x18,F
06F7C:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "End CIGS data conversion\r\n");
06F7E:  MOVLW  0E
06F80:  MOVWF  FF6
06F82:  MOVLW  08
06F84:  MOVWF  FF7
06F86:  MOVLW  00
06F88:  MOVWF  FF8
06F8A:  CALL   1C8E
....................     write_misf_address_area(); // Write the mission flash address area
06F8E:  CALL   38AC
06F92:  RETURN 0
.................... }
.................... 
.................... MEASUREMENT_DATA create_meas_data()
.................... {
....................     MEASUREMENT_DATA data;
....................     data.time_sec = get_current_sec();
*
067A4:  CALL   2ECA
067A8:  MOVFF  03,99B
067AC:  MOVFF  02,99A
067B0:  MOVFF  01,999
067B4:  MOVFF  00,998
....................     data.time_msec = get_current_msec();
067B8:  GOTO   6774
067BC:  MOVFF  01,99C
....................     data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
067C0:  MOVLW  0D
067C2:  MOVLB  9
067C4:  MOVWF  xA7
067C6:  MOVLB  0
067C8:  CALL   1E30
067CC:  MOVFF  02,9A0
067D0:  MOVFF  01,99F
....................     data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
067D4:  MOVLW  0E
067D6:  MOVLB  9
067D8:  MOVWF  xA7
067DA:  MOVLB  0
067DC:  CALL   1E30
067E0:  MOVFF  02,9A2
067E4:  MOVFF  01,9A1
....................     data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
067E8:  MOVLW  0C
067EA:  MOVLB  9
067EC:  MOVWF  xA7
067EE:  MOVLB  0
067F0:  CALL   1E30
067F4:  MOVFF  02,9A4
067F8:  MOVFF  01,9A3
....................     data.pd = ad7490_read(ADC_PD);
067FC:  MOVLW  0F
067FE:  MOVLB  9
06800:  MOVWF  xA7
06802:  MOVLB  0
06804:  CALL   1E30
06808:  MOVFF  02,9A6
0680C:  MOVFF  01,9A5
....................     data.open_voltage = ad7490_read(ADC_CIGS1_VOLT); // Assuming this is the correct ADC channel for open voltage
06810:  MOVLB  9
06812:  CLRF   xA7
06814:  MOVLB  0
06816:  CALL   1E30
0681A:  MOVFF  02,99E
0681E:  MOVFF  01,99D
....................     return data;
06822:  MOVLW  98
06824:  MOVWF  01
06826:  MOVLW  09
06828:  MOVWF  02
0682A:  GOTO   802E (RETURN)
.................... }
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03B8C:  CALL   2ECA
03B90:  MOVFF  03,271
03B94:  MOVFF  02,270
03B98:  MOVFF  01,26F
03B9C:  MOVFF  00,26E
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03BA0:  MOVFF  271,277
03BA4:  MOVLB  2
03BA6:  CLRF   x78
03BA8:  CLRF   x79
03BAA:  CLRF   x7A
03BAC:  MOVF   x77,W
03BAE:  MOVWF  x68
....................     piclog[1] = (time >> 16) & 0xFF;
03BB0:  MOVFF  270,277
03BB4:  MOVFF  271,278
03BB8:  CLRF   x79
03BBA:  CLRF   x7A
03BBC:  MOVF   x77,W
03BBE:  MOVWF  x69
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03BC0:  MOVFF  26F,277
03BC4:  MOVFF  270,278
03BC8:  MOVFF  271,279
03BCC:  CLRF   x7A
03BCE:  MOVF   x77,W
03BD0:  MOVWF  x6A
....................     piclog[3] = time & 0xFF;         // Time low byte
03BD2:  MOVF   x6E,W
03BD4:  MOVWF  x6B
....................     piclog[4] = function;            // Function code
03BD6:  MOVFF  266,26C
....................     piclog[5] = parameter;           // Parameter code
03BDA:  MOVFF  267,26D
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03BDE:  MOVLB  1
03BE0:  MOVF   x06,W
03BE2:  MOVLB  2
03BE4:  MOVWF  x72
03BE6:  MOVLB  1
03BE8:  MOVF   x07,W
03BEA:  MOVLB  2
03BEC:  MOVWF  x73
03BEE:  MOVLW  02
03BF0:  MOVLB  1
03BF2:  ADDWF  x08,W
03BF4:  MOVLB  2
03BF6:  MOVWF  x74
03BF8:  MOVLW  00
03BFA:  MOVLB  1
03BFC:  ADDWFC x09,W
03BFE:  MOVLB  2
03C00:  MOVWF  x75
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03C02:  MOVFF  F1,A29
03C06:  MOVFF  F0,A28
03C0A:  MOVFF  EF,A27
03C0E:  MOVFF  EE,A26
03C12:  MOVLB  0
03C14:  CALL   232E
03C18:  MOVF   01,F
03C1A:  BTFSS  FD8.2
03C1C:  GOTO   3C30
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03C20:  MOVLW  2A
03C22:  MOVWF  FF6
03C24:  MOVLW  08
03C26:  MOVWF  FF7
03C28:  MOVLW  00
03C2A:  MOVWF  FF8
03C2C:  CALL   1C8E
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03C30:  MOVFF  F1,A29
03C34:  MOVFF  F0,A28
03C38:  MOVFF  EF,A27
03C3C:  MOVFF  EE,A26
03C40:  MOVFF  275,A2D
03C44:  MOVFF  274,A2C
03C48:  MOVFF  273,A2B
03C4C:  MOVFF  272,A2A
03C50:  MOVLW  02
03C52:  MOVLB  A
03C54:  MOVWF  x2F
03C56:  MOVLW  68
03C58:  MOVWF  x2E
03C5A:  CLRF   x31
03C5C:  MOVLW  06
03C5E:  MOVWF  x30
03C60:  MOVLB  0
03C62:  CALL   31D0
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03C66:  MOVLW  06
03C68:  MOVLB  1
03C6A:  ADDWF  x06,F
03C6C:  MOVLW  00
03C6E:  ADDWFC x07,F
03C70:  MOVLW  00
03C72:  ADDWFC x08,F
03C74:  MOVLW  00
03C76:  ADDWFC x09,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03C78:  MOVLW  06
03C7A:  ADDWF  x0B,F
03C7C:  MOVLW  00
03C7E:  ADDWFC x0C,F
03C80:  MOVLW  00
03C82:  ADDWFC x0D,F
03C84:  MOVLW  00
03C86:  ADDWFC x0E,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03C88:  MOVLW  06
03C8A:  ADDWF  x0F,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03C8C:  MOVLW  06
03C8E:  ADDWF  x0F,W
03C90:  SUBLW  3F
03C92:  BTFSS  FD8.0
03C94:  BRA    3C9C
03C96:  MOVLB  0
03C98:  GOTO   3CFE
03C9C:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03C9E:  MOVLB  1
03CA0:  MOVF   x06,W
03CA2:  MOVLB  2
03CA4:  MOVWF  x72
03CA6:  MOVLB  1
03CA8:  MOVF   x07,W
03CAA:  MOVLB  2
03CAC:  MOVWF  x73
03CAE:  MOVLW  02
03CB0:  MOVLB  1
03CB2:  ADDWF  x08,W
03CB4:  MOVLB  2
03CB6:  MOVWF  x74
03CB8:  MOVLW  00
03CBA:  MOVLB  1
03CBC:  ADDWFC x09,W
03CBE:  MOVLB  2
03CC0:  MOVWF  x75
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03CC2:  MOVFF  F1,A29
03CC6:  MOVFF  F0,A28
03CCA:  MOVFF  EF,A27
03CCE:  MOVFF  EE,A26
03CD2:  MOVFF  275,A2D
03CD6:  MOVFF  274,A2C
03CDA:  MOVFF  273,A2B
03CDE:  MOVFF  272,A2A
03CE2:  MOVLW  01
03CE4:  MOVLB  A
03CE6:  MOVWF  x2F
03CE8:  MOVLW  1A
03CEA:  MOVWF  x2E
03CEC:  CLRF   x31
03CEE:  MOVLW  06
03CF0:  MOVWF  x30
03CF2:  MOVLB  0
03CF4:  CALL   31D0
....................         misf_piclog_write_counter = 0;
03CF8:  MOVLB  1
03CFA:  CLRF   x0F
03CFC:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03CFE:  CALL   38AC
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03D02:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"         // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"        // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_MEASURE_DATA_START_ADDRESS 0x06AA1000
.................... #define CIGS_MEASURE_DATA_END_ADDRESS 0x07AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x07AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x07AA1FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数
.................... 
.................... void read_smf_header()
.................... {
....................     int8 read_data[PACKET_SIZE];
....................     int8 retry_count;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
09212:  MOVLB  2
09214:  CLRF   x2B
09216:  MOVLB  0
09218:  MOVLB  2
0921A:  MOVF   x2B,W
0921C:  SUBLW  04
0921E:  BTFSC  FD8.0
09220:  BRA    9228
09222:  MOVLB  0
09224:  GOTO   92D2
09228:  MOVLB  0
....................     {
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, read_data, PACKET_SIZE);
0922A:  MOVFF  F5,270
0922E:  MOVFF  F4,26F
09232:  MOVFF  F3,26E
09236:  MOVFF  F2,26D
0923A:  MOVLW  06
0923C:  MOVLB  2
0923E:  MOVWF  x74
09240:  MOVLW  AA
09242:  MOVWF  x73
09244:  CLRF   x72
09246:  CLRF   x71
09248:  MOVLW  01
0924A:  MOVWF  x76
0924C:  MOVLW  EB
0924E:  MOVWF  x75
09250:  CLRF   x7A
09252:  CLRF   x79
09254:  CLRF   x78
09256:  MOVLW  40
09258:  MOVWF  x77
0925A:  MOVLB  0
0925C:  CALL   23F4
....................         if (is_crc_valid(read_data, PACKET_SIZE-1))
09260:  MOVLW  01
09262:  MOVLB  2
09264:  MOVWF  x6E
09266:  MOVLW  EB
09268:  MOVWF  x6D
0926A:  MOVLW  3F
0926C:  MOVWF  x6F
0926E:  MOVLB  0
09270:  CALL   9104
09274:  MOVF   01,F
09276:  BTFSC  FD8.2
09278:  GOTO   92C8
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0927C:  MOVLW  01
0927E:  MOVLB  2
09280:  ADDWF  x2B,W
09282:  MOVWF  x2C
09284:  MOVLW  4C
09286:  MOVWF  FF6
09288:  MOVLW  08
0928A:  MOVWF  FF7
0928C:  MOVLW  00
0928E:  MOVWF  FF8
09290:  MOVLW  23
09292:  MOVLB  9
09294:  MOVWF  x96
09296:  MOVLB  0
09298:  CALL   1CBE
0929C:  MOVFF  22C,26E
092A0:  MOVLW  18
092A2:  MOVLB  2
092A4:  MOVWF  x6F
092A6:  MOVLB  0
092A8:  CALL   8DE6
092AC:  MOVLW  0D
092AE:  MOVLB  A
092B0:  MOVWF  x29
092B2:  MOVLB  0
092B4:  CALL   1C3C
092B8:  MOVLW  0A
092BA:  MOVLB  A
092BC:  MOVWF  x29
092BE:  MOVLB  0
092C0:  CALL   1C3C
....................             break;
092C4:  GOTO   92D2
....................         }
092C8:  MOVLB  2
092CA:  INCF   x2B,F
092CC:  MOVLB  0
092CE:  GOTO   9218
....................     }
....................     param.meas.used_size = lsb_array_to_int32(read_data, 0);
092D2:  MOVLW  01
092D4:  MOVLB  2
092D6:  MOVWF  x2D
092D8:  MOVLW  EB
092DA:  MOVWF  x2C
092DC:  CLRF   x2E
092DE:  MOVLB  0
092E0:  CALL   9152
092E4:  MOVFF  03,124
092E8:  MOVFF  02,123
092EC:  MOVFF  01,122
092F0:  MOVFF  00,121
....................     param.meas.loop_counter = read_data[4];
092F4:  MOVLB  1
092F6:  CLRF   x28
092F8:  CLRF   x27
092FA:  CLRF   x26
092FC:  MOVFF  1EF,125
....................     param.piclog.used_size = lsb_array_to_int32(read_data, 5);
09300:  MOVLW  01
09302:  MOVLB  2
09304:  MOVWF  x2D
09306:  MOVLW  EB
09308:  MOVWF  x2C
0930A:  MOVLW  05
0930C:  MOVWF  x2E
0930E:  MOVLB  0
09310:  CALL   9152
09314:  MOVFF  03,12F
09318:  MOVFF  02,12E
0931C:  MOVFF  01,12D
09320:  MOVFF  00,12C
....................     param.piclog.loop_counter = read_data[9];
09324:  MOVLB  1
09326:  CLRF   x33
09328:  CLRF   x32
0932A:  CLRF   x31
0932C:  MOVFF  1F4,130
09330:  MOVLB  0
09332:  GOTO   9A0A (RETURN)
.................... }
.................... 
.................... void write_smf_header()
.................... {
....................     int8 writedata[PACKET_SIZE];
.................... 
....................     // ヘッダー情報をwritedataに設定
....................     int32_to_be_array(param.meas.used_size, writedata, 0);
*
09522:  MOVFF  124,270
09526:  MOVFF  123,26F
0952A:  MOVFF  122,26E
0952E:  MOVFF  121,26D
09532:  MOVLW  01
09534:  MOVLB  2
09536:  MOVWF  x72
09538:  MOVLW  EB
0953A:  MOVWF  x71
0953C:  CLRF   x73
0953E:  MOVLB  0
09540:  CALL   94B2
....................     writedata[4] = param.meas.loop_counter;
09544:  MOVFF  125,1EF
....................     int32_to_be_array(param.piclog.used_size, writedata, 5);
09548:  MOVFF  12F,270
0954C:  MOVFF  12E,26F
09550:  MOVFF  12D,26E
09554:  MOVFF  12C,26D
09558:  MOVLW  01
0955A:  MOVLB  2
0955C:  MOVWF  x72
0955E:  MOVLW  EB
09560:  MOVWF  x71
09562:  MOVLW  05
09564:  MOVWF  x73
09566:  MOVLB  0
09568:  CALL   94B2
....................     writedata[9] = param.piclog.loop_counter;
0956C:  MOVFF  130,1F4
.................... 
....................     writedata[63] = calc_crc8(writedata, PACKET_SIZE-1); // CRCを計算してバッファに書き込み
09570:  MOVLW  01
09572:  MOVLB  9
09574:  MOVWF  xE7
09576:  MOVLW  EB
09578:  MOVWF  xE6
0957A:  MOVLW  3F
0957C:  MOVWF  xE8
0957E:  MOVLB  0
09580:  CALL   3E68
09584:  MOVFF  01,22A
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
09588:  MOVLB  2
0958A:  BCF    x6C.0
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0958C:  CLRF   x6B
0958E:  MOVLB  0
09590:  MOVLB  2
09592:  MOVF   x6B,W
09594:  SUBLW  04
09596:  BTFSC  FD8.0
09598:  BRA    95A0
0959A:  MOVLB  0
0959C:  GOTO   96A0
095A0:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
095A2:  MOVFF  F5,A29
095A6:  MOVFF  F4,A28
095AA:  MOVFF  F3,A27
095AE:  MOVFF  F2,A26
095B2:  MOVLW  06
095B4:  MOVLB  A
095B6:  MOVWF  x2D
095B8:  MOVLW  AA
095BA:  MOVWF  x2C
095BC:  CLRF   x2B
095BE:  CLRF   x2A
095C0:  MOVLB  0
095C2:  CALL   3554
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, writedata, PACKET_SIZE); // ヘッダーを書き込み
095C6:  MOVFF  F5,A29
095CA:  MOVFF  F4,A28
095CE:  MOVFF  F3,A27
095D2:  MOVFF  F2,A26
095D6:  MOVLW  06
095D8:  MOVLB  A
095DA:  MOVWF  x2D
095DC:  MOVLW  AA
095DE:  MOVWF  x2C
095E0:  CLRF   x2B
095E2:  CLRF   x2A
095E4:  MOVLW  01
095E6:  MOVWF  x2F
095E8:  MOVLW  EB
095EA:  MOVWF  x2E
095EC:  CLRF   x31
095EE:  MOVLW  40
095F0:  MOVWF  x30
095F2:  MOVLB  0
095F4:  CALL   31D0
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
095F8:  MOVFF  F5,270
095FC:  MOVFF  F4,26F
09600:  MOVFF  F3,26E
09604:  MOVFF  F2,26D
09608:  MOVLW  06
0960A:  MOVLB  2
0960C:  MOVWF  x74
0960E:  MOVLW  AA
09610:  MOVWF  x73
09612:  CLRF   x72
09614:  CLRF   x71
09616:  MOVLW  02
09618:  MOVWF  x76
0961A:  MOVLW  2B
0961C:  MOVWF  x75
0961E:  CLRF   x7A
09620:  CLRF   x79
09622:  CLRF   x78
09624:  MOVLW  40
09626:  MOVWF  x77
09628:  MOVLB  0
0962A:  CALL   23F4
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
0962E:  MOVLW  02
09630:  MOVLB  2
09632:  MOVWF  x6E
09634:  MOVLW  2B
09636:  MOVWF  x6D
09638:  MOVLW  3F
0963A:  MOVWF  x6F
0963C:  MOVLB  0
0963E:  CALL   9104
09642:  MOVF   01,F
09644:  BTFSC  FD8.2
09646:  GOTO   9696
....................         {
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0964A:  MOVLW  01
0964C:  MOVLB  2
0964E:  ADDWF  x6B,W
09650:  MOVWF  x6D
09652:  MOVLW  74
09654:  MOVWF  FF6
09656:  MOVLW  08
09658:  MOVWF  FF7
0965A:  MOVLW  00
0965C:  MOVWF  FF8
0965E:  MOVLW  23
09660:  MOVLB  9
09662:  MOVWF  x96
09664:  MOVLB  0
09666:  CALL   1CBE
0966A:  MOVFF  26D,26E
0966E:  MOVLW  18
09670:  MOVLB  2
09672:  MOVWF  x6F
09674:  MOVLB  0
09676:  CALL   8DE6
0967A:  MOVLW  0D
0967C:  MOVLB  A
0967E:  MOVWF  x29
09680:  MOVLB  0
09682:  CALL   1C3C
09686:  MOVLW  0A
09688:  MOVLB  A
0968A:  MOVWF  x29
0968C:  MOVLB  0
0968E:  CALL   1C3C
....................             break;
09692:  GOTO   96A0
....................         }
09696:  MOVLB  2
09698:  INCF   x6B,F
0969A:  MOVLB  0
0969C:  GOTO   9590
....................     }
....................     if (!crc_valid)
096A0:  MOVLB  2
096A2:  BTFSS  x6C.0
096A4:  BRA    96AC
096A6:  MOVLB  0
096A8:  GOTO   96EE
096AC:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
096AE:  MOVLW  9C
096B0:  MOVWF  FF6
096B2:  MOVLW  08
096B4:  MOVWF  FF7
096B6:  MOVLW  00
096B8:  MOVWF  FF8
096BA:  MOVLW  25
096BC:  MOVLB  9
096BE:  MOVWF  x96
096C0:  MOVLB  0
096C2:  CALL   1CBE
096C6:  MOVLW  05
096C8:  MOVLB  2
096CA:  MOVWF  x6E
096CC:  MOVLW  18
096CE:  MOVWF  x6F
096D0:  MOVLB  0
096D2:  CALL   8DE6
096D6:  MOVLW  C3
096D8:  MOVWF  FF6
096DA:  MOVLW  08
096DC:  MOVWF  FF7
096DE:  MOVLW  00
096E0:  MOVWF  FF8
096E2:  MOVLW  0B
096E4:  MOVLB  9
096E6:  MOVWF  x96
096E8:  MOVLB  0
096EA:  CALL   1CBE
....................         // return; 
....................     }
096EE:  GOTO   A072 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
096F2:  MOVLW  D0
096F4:  MOVWF  FF6
096F6:  MOVLW  08
096F8:  MOVWF  FF7
096FA:  MOVLW  00
096FC:  MOVWF  FF8
096FE:  CALL   1C8E
....................     fprintf(PC, "___Start copy_data__\r\n");
09702:  MOVLW  EA
09704:  MOVWF  FF6
09706:  MOVLW  08
09708:  MOVWF  FF7
0970A:  MOVLW  00
0970C:  MOVWF  FF8
0970E:  CALL   1C8E
....................     
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
09712:  MOVLB  1
09714:  MOVF   x47,W
09716:  MOVWF  FE9
09718:  MOVF   x48,W
0971A:  MOVWF  FEA
0971C:  MOVFF  FEF,1E9
09720:  MOVFF  1E9,1F2
09724:  MOVLB  0
09726:  CALL   8F4E
0972A:  MOVFF  02,03
0972E:  MOVF   01,W
09730:  MOVWF  FE1
09732:  MOVFF  03,FE2
09736:  MOVLW  01
09738:  MOVWF  FEA
0973A:  MOVLW  9E
0973C:  MOVWF  FE9
0973E:  MOVLW  08
09740:  MOVWF  01
09742:  MOVFF  FE6,FEE
09746:  DECFSZ 01,F
09748:  GOTO   9742
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0974C:  MOVLB  1
0974E:  MOVF   x47,W
09750:  MOVWF  FE9
09752:  MOVF   x48,W
09754:  MOVWF  FEA
09756:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 write_src = smf_data->src;
....................     unsigned int32 write_size = smf_data->size;
0975A:  MOVFF  1A1,1A9
0975E:  MOVFF  1A0,1A8
09762:  MOVFF  19F,1A7
09766:  MOVFF  19E,1A6
0976A:  MOVFF  1A5,1AD
0976E:  MOVFF  1A4,1AC
09772:  MOVFF  1A3,1AB
09776:  MOVFF  1A2,1AA
0977A:  MOVLW  01
0977C:  ADDWF  x47,W
0977E:  MOVWF  FE9
09780:  MOVLW  00
09782:  ADDWFC x48,W
09784:  MOVWF  FEA
09786:  MOVFF  FEF,1AE
0978A:  MOVFF  FEC,1AF
0978E:  MOVFF  FEC,1B0
09792:  MOVFF  FEC,1B1
09796:  MOVF   FED,F
09798:  MOVF   FED,F
0979A:  MOVF   FED,F
0979C:  MOVLW  05
0979E:  ADDWF  x47,W
097A0:  MOVWF  FE9
097A2:  MOVLW  00
097A4:  ADDWFC x48,W
097A6:  MOVWF  FEA
097A8:  MOVFF  FEF,1B2
097AC:  MOVFF  FEC,1B3
097B0:  MOVFF  FEC,1B4
097B4:  MOVFF  FEC,1B5
097B8:  MOVF   FED,F
097BA:  MOVF   FED,F
097BC:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
097BE:  MOVLW  02
097C0:  MOVWF  FF6
097C2:  MOVLW  09
097C4:  MOVWF  FF7
097C6:  MOVLW  00
097C8:  MOVWF  FF8
097CA:  MOVLW  25
097CC:  MOVLB  9
097CE:  MOVWF  x96
097D0:  MOVLB  0
097D2:  CALL   1CBE
097D6:  MOVFF  1A9,996
097DA:  MOVLW  37
097DC:  MOVLB  9
097DE:  MOVWF  x97
097E0:  MOVLB  0
097E2:  CALL   1EBC
097E6:  MOVFF  1A8,996
097EA:  MOVLW  37
097EC:  MOVLB  9
097EE:  MOVWF  x97
097F0:  MOVLB  0
097F2:  CALL   1EBC
097F6:  MOVFF  1A7,996
097FA:  MOVLW  37
097FC:  MOVLB  9
097FE:  MOVWF  x97
09800:  MOVLB  0
09802:  CALL   1EBC
09806:  MOVFF  1A6,996
0980A:  MOVLW  37
0980C:  MOVLB  9
0980E:  MOVWF  x97
09810:  MOVLB  0
09812:  CALL   1EBC
09816:  MOVLW  0D
09818:  MOVLB  A
0981A:  MOVWF  x29
0981C:  MOVLB  0
0981E:  CALL   1C3C
09822:  MOVLW  0A
09824:  MOVLB  A
09826:  MOVWF  x29
09828:  MOVLB  0
0982A:  CALL   1C3C
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0982E:  MOVLW  2E
09830:  MOVWF  FF6
09832:  MOVLW  09
09834:  MOVWF  FF7
09836:  MOVLW  00
09838:  MOVWF  FF8
0983A:  MOVLW  25
0983C:  MOVLB  9
0983E:  MOVWF  x96
09840:  MOVLB  0
09842:  CALL   1CBE
09846:  MOVFF  1AD,996
0984A:  MOVLW  37
0984C:  MOVLB  9
0984E:  MOVWF  x97
09850:  MOVLB  0
09852:  CALL   1EBC
09856:  MOVFF  1AC,996
0985A:  MOVLW  37
0985C:  MOVLB  9
0985E:  MOVWF  x97
09860:  MOVLB  0
09862:  CALL   1EBC
09866:  MOVFF  1AB,996
0986A:  MOVLW  37
0986C:  MOVLB  9
0986E:  MOVWF  x97
09870:  MOVLB  0
09872:  CALL   1EBC
09876:  MOVFF  1AA,996
0987A:  MOVLW  37
0987C:  MOVLB  9
0987E:  MOVWF  x97
09880:  MOVLB  0
09882:  CALL   1EBC
09886:  MOVLW  0D
09888:  MOVLB  A
0988A:  MOVWF  x29
0988C:  MOVLB  0
0988E:  CALL   1C3C
09892:  MOVLW  0A
09894:  MOVLB  A
09896:  MOVWF  x29
09898:  MOVLB  0
0989A:  CALL   1C3C
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
0989E:  MOVLW  5A
098A0:  MOVWF  FF6
098A2:  MOVLW  09
098A4:  MOVWF  FF7
098A6:  MOVLW  00
098A8:  MOVWF  FF8
098AA:  MOVLW  25
098AC:  MOVLB  9
098AE:  MOVWF  x96
098B0:  MOVLB  0
098B2:  CALL   1CBE
098B6:  MOVFF  1B1,996
098BA:  MOVLW  37
098BC:  MOVLB  9
098BE:  MOVWF  x97
098C0:  MOVLB  0
098C2:  CALL   1EBC
098C6:  MOVFF  1B0,996
098CA:  MOVLW  37
098CC:  MOVLB  9
098CE:  MOVWF  x97
098D0:  MOVLB  0
098D2:  CALL   1EBC
098D6:  MOVFF  1AF,996
098DA:  MOVLW  37
098DC:  MOVLB  9
098DE:  MOVWF  x97
098E0:  MOVLB  0
098E2:  CALL   1EBC
098E6:  MOVFF  1AE,996
098EA:  MOVLW  37
098EC:  MOVLB  9
098EE:  MOVWF  x97
098F0:  MOVLB  0
098F2:  CALL   1EBC
098F6:  MOVLW  0D
098F8:  MOVLB  A
098FA:  MOVWF  x29
098FC:  MOVLB  0
098FE:  CALL   1C3C
09902:  MOVLW  0A
09904:  MOVLB  A
09906:  MOVWF  x29
09908:  MOVLB  0
0990A:  CALL   1C3C
....................     fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
0990E:  MOVLW  86
09910:  MOVWF  FF6
09912:  MOVLW  09
09914:  MOVWF  FF7
09916:  MOVLW  00
09918:  MOVWF  FF8
0991A:  MOVLW  25
0991C:  MOVLB  9
0991E:  MOVWF  x96
09920:  MOVLB  0
09922:  CALL   1CBE
09926:  MOVLW  41
09928:  MOVWF  FE9
0992A:  MOVFF  1B5,1EE
0992E:  MOVFF  1B4,1ED
09932:  MOVFF  1B3,1EC
09936:  MOVFF  1B2,1EB
0993A:  CALL   9004
0993E:  MOVLW  AE
09940:  MOVWF  FF6
09942:  MOVLW  09
09944:  MOVWF  FF7
09946:  MOVLW  00
09948:  MOVWF  FF8
0994A:  MOVLW  04
0994C:  MOVLB  9
0994E:  MOVWF  x96
09950:  MOVLB  0
09952:  CALL   1CBE
09956:  MOVFF  1B5,996
0995A:  MOVLW  57
0995C:  MOVLB  9
0995E:  MOVWF  x97
09960:  MOVLB  0
09962:  CALL   1EBC
09966:  MOVFF  1B4,996
0996A:  MOVLW  57
0996C:  MOVLB  9
0996E:  MOVWF  x97
09970:  MOVLB  0
09972:  CALL   1EBC
09976:  MOVFF  1B3,996
0997A:  MOVLW  57
0997C:  MOVLB  9
0997E:  MOVWF  x97
09980:  MOVLB  0
09982:  CALL   1EBC
09986:  MOVFF  1B2,996
0998A:  MOVLW  57
0998C:  MOVLB  9
0998E:  MOVWF  x97
09990:  MOVLB  0
09992:  CALL   1EBC
09996:  MOVLW  B5
09998:  MOVWF  FF6
0999A:  MOVLW  09
0999C:  MOVWF  FF7
0999E:  MOVLW  00
099A0:  MOVWF  FF8
099A2:  MOVLW  05
099A4:  MOVLB  9
099A6:  MOVWF  x96
099A8:  MOVLB  0
099AA:  CALL   1CBE
.................... 
....................     if (!is_connect(mis_fm))
099AE:  MOVFF  F1,A29
099B2:  MOVFF  F0,A28
099B6:  MOVFF  EF,A27
099BA:  MOVFF  EE,A26
099BE:  CALL   232E
099C2:  MOVF   01,F
099C4:  BTFSS  FD8.2
099C6:  GOTO   99DA
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
099CA:  MOVLW  BC
099CC:  MOVWF  FF6
099CE:  MOVLW  09
099D0:  MOVWF  FF7
099D2:  MOVLW  00
099D4:  MOVWF  FF8
099D6:  CALL   1C8E
....................     }    
.................... 
....................     if (!is_connect(smf))
099DA:  MOVFF  F5,A29
099DE:  MOVFF  F4,A28
099E2:  MOVFF  F3,A27
099E6:  MOVFF  F2,A26
099EA:  CALL   232E
099EE:  MOVF   01,F
099F0:  BTFSS  FD8.2
099F2:  GOTO   9A06
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
099F6:  MOVLW  DE
099F8:  MOVWF  FF6
099FA:  MOVLW  09
099FC:  MOVWF  FF7
099FE:  MOVLW  00
09A00:  MOVWF  FF8
09A02:  CALL   1C8E
....................     }    
....................     /*
....................     while (!is_connect(smf))
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
....................         delay_ms(100);
....................     }
....................     */
.................... 
....................     // read size area with CRC verification retry
....................     read_smf_header();
09A06:  GOTO   9212
.................... 
....................     // PartitionParamから値を取得
....................     int32 used_size = param.meas.used_size;
....................     int8 loop_count = param.meas.loop_counter;
09A0A:  MOVFF  124,1B9
09A0E:  MOVFF  123,1B8
09A12:  MOVFF  122,1B7
09A16:  MOVFF  121,1B6
09A1A:  MOVFF  125,1BA
....................     fprintf(PC, "Size area read\r\n");
09A1E:  MOVLW  FC
09A20:  MOVWF  FF6
09A22:  MOVLW  09
09A24:  MOVWF  FF7
09A26:  MOVLW  00
09A28:  MOVWF  FF8
09A2A:  CALL   1C8E
....................     fprintf(PC, "used_size = %ld (src 0x%08LX)\r\n", used_size, mis_start_address);
09A2E:  MOVLW  0E
09A30:  MOVWF  FF6
09A32:  MOVLW  0A
09A34:  MOVWF  FF7
09A36:  MOVLW  00
09A38:  MOVWF  FF8
09A3A:  MOVLW  0C
09A3C:  MOVLB  9
09A3E:  MOVWF  x96
09A40:  MOVLB  0
09A42:  CALL   1CBE
09A46:  MOVLW  41
09A48:  MOVWF  FE9
09A4A:  MOVFF  1B9,1EE
09A4E:  MOVFF  1B8,1ED
09A52:  MOVFF  1B7,1EC
09A56:  MOVFF  1B6,1EB
09A5A:  CALL   9336
09A5E:  MOVLW  1D
09A60:  MOVWF  FF6
09A62:  MOVLW  0A
09A64:  MOVWF  FF7
09A66:  MOVLW  00
09A68:  MOVWF  FF8
09A6A:  MOVLW  08
09A6C:  MOVLB  9
09A6E:  MOVWF  x96
09A70:  MOVLB  0
09A72:  CALL   1CBE
09A76:  MOVFF  1A9,996
09A7A:  MOVLW  37
09A7C:  MOVLB  9
09A7E:  MOVWF  x97
09A80:  MOVLB  0
09A82:  CALL   1EBC
09A86:  MOVFF  1A8,996
09A8A:  MOVLW  37
09A8C:  MOVLB  9
09A8E:  MOVWF  x97
09A90:  MOVLB  0
09A92:  CALL   1EBC
09A96:  MOVFF  1A7,996
09A9A:  MOVLW  37
09A9C:  MOVLB  9
09A9E:  MOVWF  x97
09AA0:  MOVLB  0
09AA2:  CALL   1EBC
09AA6:  MOVFF  1A6,996
09AAA:  MOVLW  37
09AAC:  MOVLB  9
09AAE:  MOVWF  x97
09AB0:  MOVLB  0
09AB2:  CALL   1EBC
09AB6:  MOVLW  2A
09AB8:  MOVWF  FF6
09ABA:  MOVLW  0A
09ABC:  MOVWF  FF7
09ABE:  MOVLW  00
09AC0:  MOVWF  FF8
09AC2:  MOVLW  03
09AC4:  MOVLB  9
09AC6:  MOVWF  x96
09AC8:  MOVLB  0
09ACA:  CALL   1CBE
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
09ACE:  MOVLW  04
09AD0:  MOVLB  1
09AD2:  ADDWF  xA6,W
09AD4:  MOVWF  xE9
09AD6:  MOVLW  00
09AD8:  ADDWFC xA7,W
09ADA:  MOVWF  xEA
09ADC:  MOVLW  00
09ADE:  ADDWFC xA8,W
09AE0:  MOVWF  xEB
09AE2:  MOVLW  00
09AE4:  ADDWFC xA9,W
09AE6:  MOVWF  xEC
09AE8:  MOVLW  2E
09AEA:  MOVWF  FF6
09AEC:  MOVLW  0A
09AEE:  MOVWF  FF7
09AF0:  MOVLW  00
09AF2:  MOVWF  FF8
09AF4:  MOVLW  0C
09AF6:  MOVLB  9
09AF8:  MOVWF  x96
09AFA:  MOVLB  0
09AFC:  CALL   1CBE
09B00:  MOVFF  1BA,26E
09B04:  MOVLW  18
09B06:  MOVLB  2
09B08:  MOVWF  x6F
09B0A:  MOVLB  0
09B0C:  CALL   8DE6
09B10:  MOVLW  3C
09B12:  MOVWF  FF6
09B14:  MOVLW  0A
09B16:  MOVWF  FF7
09B18:  MOVLW  00
09B1A:  MOVWF  FF8
09B1C:  MOVLW  09
09B1E:  MOVLB  9
09B20:  MOVWF  x96
09B22:  MOVLB  0
09B24:  CALL   1CBE
09B28:  MOVFF  1EC,996
09B2C:  MOVLW  37
09B2E:  MOVLB  9
09B30:  MOVWF  x97
09B32:  MOVLB  0
09B34:  CALL   1EBC
09B38:  MOVFF  1EB,996
09B3C:  MOVLW  37
09B3E:  MOVLB  9
09B40:  MOVWF  x97
09B42:  MOVLB  0
09B44:  CALL   1EBC
09B48:  MOVFF  1EA,996
09B4C:  MOVLW  37
09B4E:  MOVLB  9
09B50:  MOVWF  x97
09B52:  MOVLB  0
09B54:  CALL   1EBC
09B58:  MOVFF  1E9,996
09B5C:  MOVLW  37
09B5E:  MOVLB  9
09B60:  MOVWF  x97
09B62:  MOVLB  0
09B64:  CALL   1EBC
09B68:  MOVLW  4A
09B6A:  MOVWF  FF6
09B6C:  MOVLW  0A
09B6E:  MOVWF  FF7
09B70:  MOVLW  00
09B72:  MOVWF  FF8
09B74:  MOVLW  05
09B76:  MOVLB  9
09B78:  MOVWF  x96
09B7A:  MOVLB  0
09B7C:  CALL   1CBE
....................     
.................... 
....................     // Calculate data write address and check for wrap-around
....................     unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................     unsigned int32 data_region_end = mis_end_address;
....................     unsigned int32 data_region_size = data_region_end - data_region_start;
....................     unsigned int32 data_write_addr = data_region_start + used_size;
09B80:  MOVLB  1
09B82:  MOVF   xA6,W
09B84:  MOVWF  xBB
09B86:  MOVLW  10
09B88:  ADDWF  xA7,W
09B8A:  MOVWF  xBC
09B8C:  MOVLW  00
09B8E:  ADDWFC xA8,W
09B90:  MOVWF  xBD
09B92:  MOVLW  00
09B94:  ADDWFC xA9,W
09B96:  MOVWF  xBE
09B98:  MOVFF  1AD,1C2
09B9C:  MOVFF  1AC,1C1
09BA0:  MOVFF  1AB,1C0
09BA4:  MOVFF  1AA,1BF
09BA8:  MOVF   xBB,W
09BAA:  SUBWF  xBF,W
09BAC:  MOVWF  xC3
09BAE:  MOVF   xBC,W
09BB0:  SUBWFB xC0,W
09BB2:  MOVWF  xC4
09BB4:  MOVF   xBD,W
09BB6:  SUBWFB xC1,W
09BB8:  MOVWF  xC5
09BBA:  MOVF   xBE,W
09BBC:  SUBWFB xC2,W
09BBE:  MOVWF  xC6
09BC0:  MOVF   xB6,W
09BC2:  ADDWF  xBB,W
09BC4:  MOVWF  xC7
09BC6:  MOVF   xB7,W
09BC8:  ADDWFC xBC,W
09BCA:  MOVWF  xC8
09BCC:  MOVF   xB8,W
09BCE:  ADDWFC xBD,W
09BD0:  MOVWF  xC9
09BD2:  MOVF   xB9,W
09BD4:  ADDWFC xBE,W
09BD6:  MOVWF  xCA
.................... 
.................... 
....................     // Delete the first part in advance in case of looping
....................     if ((used_size + write_size) > data_region_size)
09BD8:  MOVF   xB2,W
09BDA:  ADDWF  xB6,W
09BDC:  MOVWF  xE9
09BDE:  MOVF   xB3,W
09BE0:  ADDWFC xB7,W
09BE2:  MOVWF  xEA
09BE4:  MOVF   xB4,W
09BE6:  ADDWFC xB8,W
09BE8:  MOVWF  xEB
09BEA:  MOVF   xB5,W
09BEC:  ADDWFC xB9,W
09BEE:  MOVWF  xEC
09BF0:  MOVF   xC6,W
09BF2:  SUBWF  xEC,W
09BF4:  BTFSC  FD8.0
09BF6:  BRA    9BFE
09BF8:  MOVLB  0
09BFA:  GOTO   9D18
09BFE:  MOVLB  0
09C00:  BTFSS  FD8.2
09C02:  GOTO   9C48
09C06:  MOVLB  1
09C08:  MOVF   xC5,W
09C0A:  SUBWF  xEB,W
09C0C:  BTFSC  FD8.0
09C0E:  BRA    9C16
09C10:  MOVLB  0
09C12:  GOTO   9D18
09C16:  MOVLB  0
09C18:  BTFSS  FD8.2
09C1A:  GOTO   9C48
09C1E:  MOVLB  1
09C20:  MOVF   xC4,W
09C22:  SUBWF  xEA,W
09C24:  BTFSC  FD8.0
09C26:  BRA    9C2E
09C28:  MOVLB  0
09C2A:  GOTO   9D18
09C2E:  MOVLB  0
09C30:  BTFSS  FD8.2
09C32:  GOTO   9C48
09C36:  MOVLB  1
09C38:  MOVF   xE9,W
09C3A:  SUBWF  xC3,W
09C3C:  BTFSS  FD8.0
09C3E:  BRA    9C46
09C40:  MOVLB  0
09C42:  GOTO   9D18
09C46:  MOVLB  0
....................     {
....................         fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
09C48:  MOVLW  50
09C4A:  MOVWF  FF6
09C4C:  MOVLW  0A
09C4E:  MOVWF  FF7
09C50:  MOVLW  00
09C52:  MOVWF  FF8
09C54:  CALL   1C8E
....................         loop_count++;
09C58:  MOVLB  1
09C5A:  INCF   xBA,F
....................         used_size = 0;
09C5C:  CLRF   xB9
09C5E:  CLRF   xB8
09C60:  CLRF   xB7
09C62:  CLRF   xB6
....................         data_write_addr = data_region_start;
09C64:  MOVFF  1BE,1CA
09C68:  MOVFF  1BD,1C9
09C6C:  MOVFF  1BC,1C8
09C70:  MOVFF  1BB,1C7
....................         unsigned int32 erase_ptr = data_region_start;
09C74:  MOVFF  1BE,1CE
09C78:  MOVFF  1BD,1CD
09C7C:  MOVFF  1BC,1CC
09C80:  MOVFF  1BB,1CB
09C84:  MOVLB  0
....................         while (erase_ptr < data_region_end)
09C86:  MOVLB  1
09C88:  MOVF   xCE,W
09C8A:  SUBWF  xC2,W
09C8C:  BTFSC  FD8.0
09C8E:  BRA    9C96
09C90:  MOVLB  0
09C92:  GOTO   9D18
09C96:  MOVLB  0
09C98:  BTFSS  FD8.2
09C9A:  GOTO   9CE0
09C9E:  MOVLB  1
09CA0:  MOVF   xCD,W
09CA2:  SUBWF  xC1,W
09CA4:  BTFSC  FD8.0
09CA6:  BRA    9CAE
09CA8:  MOVLB  0
09CAA:  GOTO   9D18
09CAE:  MOVLB  0
09CB0:  BTFSS  FD8.2
09CB2:  GOTO   9CE0
09CB6:  MOVLB  1
09CB8:  MOVF   xCC,W
09CBA:  SUBWF  xC0,W
09CBC:  BTFSC  FD8.0
09CBE:  BRA    9CC6
09CC0:  MOVLB  0
09CC2:  GOTO   9D18
09CC6:  MOVLB  0
09CC8:  BTFSS  FD8.2
09CCA:  GOTO   9CE0
09CCE:  MOVLB  1
09CD0:  MOVF   xBF,W
09CD2:  SUBWF  xCB,W
09CD4:  BTFSS  FD8.0
09CD6:  BRA    9CDE
09CD8:  MOVLB  0
09CDA:  GOTO   9D18
09CDE:  MOVLB  0
....................         {
....................             subsector_4kByte_erase(smf, erase_ptr);
09CE0:  MOVFF  F5,A29
09CE4:  MOVFF  F4,A28
09CE8:  MOVFF  F3,A27
09CEC:  MOVFF  F2,A26
09CF0:  MOVFF  1CE,A2D
09CF4:  MOVFF  1CD,A2C
09CF8:  MOVFF  1CC,A2B
09CFC:  MOVFF  1CB,A2A
09D00:  CALL   3554
....................             erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
09D04:  MOVLW  10
09D06:  MOVLB  1
09D08:  ADDWF  xCC,F
09D0A:  MOVLW  00
09D0C:  ADDWFC xCD,F
09D0E:  MOVLW  00
09D10:  ADDWFC xCE,F
09D12:  MOVLB  0
09D14:  GOTO   9C86
....................         }
....................     }
.................... 
.................... 
....................     // Erase the space you will be writing in now
....................     unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................     unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
09D18:  MOVLB  1
09D1A:  CLRF   xCF
09D1C:  MOVF   xC8,W
09D1E:  ANDLW  F0
09D20:  MOVWF  xD0
09D22:  CLRF   xD1
09D24:  CLRF   xD2
09D26:  MOVF   xB2,W
09D28:  ADDWF  xC7,W
09D2A:  MOVWF  xE9
09D2C:  MOVF   xB3,W
09D2E:  ADDWFC xC8,W
09D30:  MOVWF  xEA
09D32:  MOVF   xB4,W
09D34:  ADDWFC xC9,W
09D36:  MOVWF  xEB
09D38:  MOVF   xB5,W
09D3A:  ADDWFC xCA,W
09D3C:  MOVWF  xEC
09D3E:  MOVLW  FF
09D40:  ADDWF  xE9,F
09D42:  MOVLW  0F
09D44:  ADDWFC xEA,F
09D46:  MOVLW  00
09D48:  ADDWFC xEB,F
09D4A:  MOVLW  00
09D4C:  ADDWFC xEC,F
09D4E:  CLRF   xD3
09D50:  MOVF   xEA,W
09D52:  ANDLW  F0
09D54:  MOVWF  xD4
09D56:  CLRF   xD5
09D58:  CLRF   xD6
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
09D5A:  MOVFF  1D2,1DA
09D5E:  MOVFF  1D1,1D9
09D62:  MOVFF  1D0,1D8
09D66:  MOVFF  1CF,1D7
09D6A:  MOVLB  0
09D6C:  MOVLB  1
09D6E:  MOVF   xDA,W
09D70:  SUBWF  xD6,W
09D72:  BTFSC  FD8.0
09D74:  BRA    9D7C
09D76:  MOVLB  0
09D78:  GOTO   9E58
09D7C:  MOVLB  0
09D7E:  BTFSS  FD8.2
09D80:  GOTO   9DC6
09D84:  MOVLB  1
09D86:  MOVF   xD9,W
09D88:  SUBWF  xD5,W
09D8A:  BTFSC  FD8.0
09D8C:  BRA    9D94
09D8E:  MOVLB  0
09D90:  GOTO   9E58
09D94:  MOVLB  0
09D96:  BTFSS  FD8.2
09D98:  GOTO   9DC6
09D9C:  MOVLB  1
09D9E:  MOVF   xD8,W
09DA0:  SUBWF  xD4,W
09DA2:  BTFSC  FD8.0
09DA4:  BRA    9DAC
09DA6:  MOVLB  0
09DA8:  GOTO   9E58
09DAC:  MOVLB  0
09DAE:  BTFSS  FD8.2
09DB0:  GOTO   9DC6
09DB4:  MOVLB  1
09DB6:  MOVF   xD3,W
09DB8:  SUBWF  xD7,W
09DBA:  BTFSS  FD8.0
09DBC:  BRA    9DC4
09DBE:  MOVLB  0
09DC0:  GOTO   9E58
09DC4:  MOVLB  0
09DC6:  MOVLB  1
09DC8:  MOVF   xDA,W
09DCA:  SUBWF  xAD,W
09DCC:  BTFSC  FD8.0
09DCE:  BRA    9DD6
09DD0:  MOVLB  0
09DD2:  GOTO   9E58
09DD6:  MOVLB  0
09DD8:  BTFSS  FD8.2
09DDA:  GOTO   9E20
09DDE:  MOVLB  1
09DE0:  MOVF   xD9,W
09DE2:  SUBWF  xAC,W
09DE4:  BTFSC  FD8.0
09DE6:  BRA    9DEE
09DE8:  MOVLB  0
09DEA:  GOTO   9E58
09DEE:  MOVLB  0
09DF0:  BTFSS  FD8.2
09DF2:  GOTO   9E20
09DF6:  MOVLB  1
09DF8:  MOVF   xD8,W
09DFA:  SUBWF  xAB,W
09DFC:  BTFSC  FD8.0
09DFE:  BRA    9E06
09E00:  MOVLB  0
09E02:  GOTO   9E58
09E06:  MOVLB  0
09E08:  BTFSS  FD8.2
09E0A:  GOTO   9E20
09E0E:  MOVLB  1
09E10:  MOVF   xAA,W
09E12:  SUBWF  xD7,W
09E14:  BTFSS  FD8.0
09E16:  BRA    9E1E
09E18:  MOVLB  0
09E1A:  GOTO   9E58
09E1E:  MOVLB  0
....................         subsector_4kByte_erase(smf, addr);
09E20:  MOVFF  F5,A29
09E24:  MOVFF  F4,A28
09E28:  MOVFF  F3,A27
09E2C:  MOVFF  F2,A26
09E30:  MOVFF  1DA,A2D
09E34:  MOVFF  1D9,A2C
09E38:  MOVFF  1D8,A2B
09E3C:  MOVFF  1D7,A2A
09E40:  CALL   3554
09E44:  MOVLW  10
09E46:  MOVLB  1
09E48:  ADDWF  xD8,F
09E4A:  MOVLW  00
09E4C:  ADDWFC xD9,F
09E4E:  MOVLW  00
09E50:  ADDWFC xDA,F
09E52:  MOVLB  0
09E54:  GOTO   9D6C
.................... 
....................     unsigned int32 remaining = write_size;
....................     unsigned int32 src_addr = write_src;
09E58:  MOVFF  1B5,1DE
09E5C:  MOVFF  1B4,1DD
09E60:  MOVFF  1B3,1DC
09E64:  MOVFF  1B2,1DB
09E68:  MOVFF  1B1,1E2
09E6C:  MOVFF  1B0,1E1
09E70:  MOVFF  1AF,1E0
09E74:  MOVFF  1AE,1DF
....................     while (remaining > 0)
09E78:  MOVLB  1
09E7A:  MOVF   xDB,F
09E7C:  BTFSC  FD8.2
09E7E:  BRA    9E86
09E80:  MOVLB  0
09E82:  GOTO   9EB8
09E86:  MOVLB  0
09E88:  MOVLB  1
09E8A:  MOVF   xDC,F
09E8C:  BTFSC  FD8.2
09E8E:  BRA    9E96
09E90:  MOVLB  0
09E92:  GOTO   9EB8
09E96:  MOVLB  0
09E98:  MOVLB  1
09E9A:  MOVF   xDD,F
09E9C:  BTFSC  FD8.2
09E9E:  BRA    9EA6
09EA0:  MOVLB  0
09EA2:  GOTO   9EB8
09EA6:  MOVLB  0
09EA8:  MOVLB  1
09EAA:  MOVF   xDE,F
09EAC:  BTFSS  FD8.2
09EAE:  BRA    9EB6
09EB0:  MOVLB  0
09EB2:  GOTO   A06E
09EB6:  MOVLB  0
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
09EB8:  MOVLB  1
09EBA:  MOVF   xDE,F
09EBC:  BTFSC  FD8.2
09EBE:  BRA    9EC6
09EC0:  MOVLB  0
09EC2:  GOTO   9EFA
09EC6:  MOVLB  0
09EC8:  MOVLB  1
09ECA:  MOVF   xDD,F
09ECC:  BTFSC  FD8.2
09ECE:  BRA    9ED6
09ED0:  MOVLB  0
09ED2:  GOTO   9EFA
09ED6:  MOVLB  0
09ED8:  MOVLB  1
09EDA:  MOVF   xDC,F
09EDC:  BTFSC  FD8.2
09EDE:  BRA    9EE6
09EE0:  MOVLB  0
09EE2:  GOTO   9EFA
09EE6:  MOVLB  0
09EE8:  MOVLB  1
09EEA:  MOVF   xDB,W
09EEC:  SUBLW  40
09EEE:  BTFSS  FD8.0
09EF0:  BRA    9EF8
09EF2:  MOVLB  0
09EF4:  GOTO   9F02
09EF8:  MOVLB  0
09EFA:  CLRF   03
09EFC:  MOVLW  40
09EFE:  GOTO   9F0C
09F02:  MOVFF  1DC,03
09F06:  MOVLB  1
09F08:  MOVF   xDB,W
09F0A:  MOVLB  0
09F0C:  MOVLB  1
09F0E:  MOVWF  xE3
09F10:  MOVFF  03,1E4
09F14:  MOVLB  0
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
09F16:  MOVFF  F1,270
09F1A:  MOVFF  F0,26F
09F1E:  MOVFF  EF,26E
09F22:  MOVFF  EE,26D
09F26:  MOVFF  1E2,274
09F2A:  MOVFF  1E1,273
09F2E:  MOVFF  1E0,272
09F32:  MOVFF  1DF,271
09F36:  MOVLW  01
09F38:  MOVLB  2
09F3A:  MOVWF  x76
09F3C:  MOVLW  5E
09F3E:  MOVWF  x75
09F40:  CLRF   x7A
09F42:  CLRF   x79
09F44:  MOVFF  1E4,278
09F48:  MOVFF  1E3,277
09F4C:  MOVLB  0
09F4E:  CALL   23F4
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
09F52:  MOVFF  F5,A29
09F56:  MOVFF  F4,A28
09F5A:  MOVFF  F3,A27
09F5E:  MOVFF  F2,A26
09F62:  MOVFF  1CA,A2D
09F66:  MOVFF  1C9,A2C
09F6A:  MOVFF  1C8,A2B
09F6E:  MOVFF  1C7,A2A
09F72:  MOVLW  01
09F74:  MOVLB  A
09F76:  MOVWF  x2F
09F78:  MOVLW  5E
09F7A:  MOVWF  x2E
09F7C:  MOVFF  1E4,A31
09F80:  MOVFF  1E3,A30
09F84:  MOVLB  0
09F86:  CALL   31D0
....................         for (unsigned int32 i = 0; i < chunk; i++)
09F8A:  MOVLB  1
09F8C:  CLRF   xE8
09F8E:  CLRF   xE7
09F90:  CLRF   xE6
09F92:  CLRF   xE5
09F94:  MOVLB  0
09F96:  MOVLB  1
09F98:  MOVF   xE8,F
09F9A:  BTFSC  FD8.2
09F9C:  BRA    9FA4
09F9E:  MOVLB  0
09FA0:  GOTO   A026
09FA4:  MOVLB  0
09FA6:  MOVLB  1
09FA8:  MOVF   xE7,F
09FAA:  BTFSC  FD8.2
09FAC:  BRA    9FB4
09FAE:  MOVLB  0
09FB0:  GOTO   A026
09FB4:  MOVLB  0
09FB6:  MOVLB  1
09FB8:  MOVF   xE6,W
09FBA:  SUBWF  xE4,W
09FBC:  BTFSC  FD8.0
09FBE:  BRA    9FC6
09FC0:  MOVLB  0
09FC2:  GOTO   A026
09FC6:  MOVLB  0
09FC8:  BTFSS  FD8.2
09FCA:  GOTO   9FE0
09FCE:  MOVLB  1
09FD0:  MOVF   xE3,W
09FD2:  SUBWF  xE5,W
09FD4:  BTFSS  FD8.0
09FD6:  BRA    9FDE
09FD8:  MOVLB  0
09FDA:  GOTO   A026
09FDE:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
09FE0:  MOVLW  5E
09FE2:  MOVLB  1
09FE4:  ADDWF  xE5,W
09FE6:  MOVWF  FE9
09FE8:  MOVLW  01
09FEA:  ADDWFC xE6,W
09FEC:  MOVWF  FEA
09FEE:  MOVFF  FEF,1E9
09FF2:  MOVFF  1E9,996
09FF6:  MOVLW  37
09FF8:  MOVLB  9
09FFA:  MOVWF  x97
09FFC:  MOVLB  0
09FFE:  CALL   1EBC
0A002:  MOVLW  20
0A004:  MOVLB  A
0A006:  MOVWF  x29
0A008:  MOVLB  0
0A00A:  CALL   1C3C
0A00E:  MOVLW  01
0A010:  MOVLB  1
0A012:  ADDWF  xE5,F
0A014:  BTFSC  FD8.0
0A016:  INCF   xE6,F
0A018:  BTFSC  FD8.2
0A01A:  INCF   xE7,F
0A01C:  BTFSC  FD8.2
0A01E:  INCF   xE8,F
0A020:  MOVLB  0
0A022:  GOTO   9F96
....................         }
....................         src_addr += chunk;
0A026:  MOVLB  1
0A028:  MOVF   xE3,W
0A02A:  ADDWF  xDF,F
0A02C:  MOVF   xE4,W
0A02E:  ADDWFC xE0,F
0A030:  MOVLW  00
0A032:  ADDWFC xE1,F
0A034:  MOVLW  00
0A036:  ADDWFC xE2,F
....................         data_write_addr += chunk;
0A038:  MOVF   xE3,W
0A03A:  ADDWF  xC7,F
0A03C:  MOVF   xE4,W
0A03E:  ADDWFC xC8,F
0A040:  MOVLW  00
0A042:  ADDWFC xC9,F
0A044:  MOVLW  00
0A046:  ADDWFC xCA,F
....................         used_size += chunk;
0A048:  MOVF   xE3,W
0A04A:  ADDWF  xB6,F
0A04C:  MOVF   xE4,W
0A04E:  ADDWFC xB7,F
0A050:  MOVLW  00
0A052:  ADDWFC xB8,F
0A054:  MOVLW  00
0A056:  ADDWFC xB9,F
....................         remaining -= chunk;
0A058:  MOVF   xE3,W
0A05A:  SUBWF  xDB,F
0A05C:  MOVF   xE4,W
0A05E:  SUBWFB xDC,F
0A060:  MOVLW  00
0A062:  SUBWFB xDD,F
0A064:  MOVLW  00
0A066:  SUBWFB xDE,F
0A068:  MOVLB  0
0A06A:  GOTO   9E78
....................     }
....................     // write size area
....................     write_smf_header();
0A06E:  GOTO   9522
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
0A072:  MOVLW  86
0A074:  MOVWF  FF6
0A076:  MOVLW  0A
0A078:  MOVWF  FF7
0A07A:  MOVLW  00
0A07C:  MOVWF  FF8
0A07E:  MOVLW  0C
0A080:  MOVLB  9
0A082:  MOVWF  x96
0A084:  MOVLB  0
0A086:  CALL   1CBE
0A08A:  MOVLW  41
0A08C:  MOVWF  FE9
0A08E:  MOVFF  1B9,1EE
0A092:  MOVFF  1B8,1ED
0A096:  MOVFF  1B7,1EC
0A09A:  MOVFF  1B6,1EB
0A09E:  CALL   9336
0A0A2:  MOVLW  0D
0A0A4:  MOVLB  A
0A0A6:  MOVWF  x29
0A0A8:  MOVLB  0
0A0AA:  CALL   1C3C
0A0AE:  MOVLW  0A
0A0B0:  MOVLB  A
0A0B2:  MOVWF  x29
0A0B4:  MOVLB  0
0A0B6:  CALL   1C3C
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
0A0BA:  MOVLW  98
0A0BC:  MOVWF  FF6
0A0BE:  MOVLW  0A
0A0C0:  MOVWF  FF7
0A0C2:  MOVLW  00
0A0C4:  MOVWF  FF8
0A0C6:  MOVLW  0D
0A0C8:  MOVLB  9
0A0CA:  MOVWF  x96
0A0CC:  MOVLB  0
0A0CE:  CALL   1CBE
0A0D2:  MOVFF  1BA,1EB
0A0D6:  MOVLW  1B
0A0D8:  MOVLB  1
0A0DA:  MOVWF  xEC
0A0DC:  MOVLB  0
0A0DE:  CALL   6420
0A0E2:  MOVLW  A7
0A0E4:  MOVWF  FF6
0A0E6:  MOVLW  0A
0A0E8:  MOVWF  FF7
0A0EA:  MOVLW  00
0A0EC:  MOVWF  FF8
0A0EE:  MOVLW  04
0A0F0:  MOVLB  9
0A0F2:  MOVWF  x96
0A0F4:  MOVLB  0
0A0F6:  CALL   1CBE
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
0A0FA:  MOVLW  AC
0A0FC:  MOVWF  FF6
0A0FE:  MOVLW  0A
0A100:  MOVWF  FF7
0A102:  MOVLW  00
0A104:  MOVWF  FF8
0A106:  CALL   1C8E
....................     fprintf(PC, "____________________\r\n\r\n");
0A10A:  MOVLW  C6
0A10C:  MOVWF  FF6
0A10E:  MOVLW  0A
0A110:  MOVWF  FF7
0A112:  MOVLW  00
0A114:  MOVWF  FF8
0A116:  CALL   1C8E
0A11A:  GOTO   AC20 (RETURN)
.................... }
.................... 
.................... void smf_read(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0A11E:  MOVLW  E0
0A120:  MOVWF  FF6
0A122:  MOVLW  0A
0A124:  MOVWF  FF7
0A126:  MOVLW  00
0A128:  MOVWF  FF8
0A12A:  CALL   1C8E
....................     fprintf(PC, "___Start SMF Read____\r\n");
0A12E:  MOVLW  FA
0A130:  MOVWF  FF6
0A132:  MOVLW  0A
0A134:  MOVWF  FF7
0A136:  MOVLW  00
0A138:  MOVWF  FF8
0A13A:  CALL   1C8E
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
0A13E:  MOVLB  1
0A140:  MOVF   x5E,W
0A142:  MOVWF  FE9
0A144:  MOVF   x5F,W
0A146:  MOVWF  FEA
0A148:  MOVFF  FEF,1B8
0A14C:  MOVFF  1B8,1F2
0A150:  MOVLB  0
0A152:  CALL   8F4E
0A156:  MOVFF  02,03
0A15A:  MOVF   01,W
0A15C:  MOVWF  FE1
0A15E:  MOVFF  03,FE2
0A162:  MOVLW  01
0A164:  MOVWF  FEA
0A166:  MOVLW  A0
0A168:  MOVWF  FE9
0A16A:  MOVLW  08
0A16C:  MOVWF  01
0A16E:  MOVFF  FE6,FEE
0A172:  DECFSZ 01,F
0A174:  GOTO   A16E
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0A178:  MOVLB  1
0A17A:  MOVF   x5E,W
0A17C:  MOVWF  FE9
0A17E:  MOVF   x5F,W
0A180:  MOVWF  FEA
0A182:  MOVFF  FEF,49
....................     unsigned int32 read_src = smf_data->src;
....................     unsigned int32 read_size = smf_data->size;
0A186:  MOVLW  01
0A188:  ADDWF  x5E,W
0A18A:  MOVWF  FE9
0A18C:  MOVLW  00
0A18E:  ADDWFC x5F,W
0A190:  MOVWF  FEA
0A192:  MOVFF  FEF,1A8
0A196:  MOVFF  FEC,1A9
0A19A:  MOVFF  FEC,1AA
0A19E:  MOVFF  FEC,1AB
0A1A2:  MOVF   FED,F
0A1A4:  MOVF   FED,F
0A1A6:  MOVF   FED,F
0A1A8:  MOVLW  05
0A1AA:  ADDWF  x5E,W
0A1AC:  MOVWF  FE9
0A1AE:  MOVLW  00
0A1B0:  ADDWFC x5F,W
0A1B2:  MOVWF  FEA
0A1B4:  MOVFF  FEF,1AC
0A1B8:  MOVFF  FEC,1AD
0A1BC:  MOVFF  FEC,1AE
0A1C0:  MOVFF  FEC,1AF
0A1C4:  MOVF   FED,F
0A1C6:  MOVF   FED,F
0A1C8:  MOVF   FED,F
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_src);
0A1CA:  MOVLW  12
0A1CC:  MOVWF  FF6
0A1CE:  MOVLW  0B
0A1D0:  MOVWF  FF7
0A1D2:  MOVLW  00
0A1D4:  MOVWF  FF8
0A1D6:  MOVLW  21
0A1D8:  MOVLB  9
0A1DA:  MOVWF  x96
0A1DC:  MOVLB  0
0A1DE:  CALL   1CBE
0A1E2:  MOVFF  1AB,996
0A1E6:  MOVLW  37
0A1E8:  MOVLB  9
0A1EA:  MOVWF  x97
0A1EC:  MOVLB  0
0A1EE:  CALL   1EBC
0A1F2:  MOVFF  1AA,996
0A1F6:  MOVLW  37
0A1F8:  MOVLB  9
0A1FA:  MOVWF  x97
0A1FC:  MOVLB  0
0A1FE:  CALL   1EBC
0A202:  MOVFF  1A9,996
0A206:  MOVLW  37
0A208:  MOVLB  9
0A20A:  MOVWF  x97
0A20C:  MOVLB  0
0A20E:  CALL   1EBC
0A212:  MOVFF  1A8,996
0A216:  MOVLW  37
0A218:  MOVLB  9
0A21A:  MOVWF  x97
0A21C:  MOVLB  0
0A21E:  CALL   1EBC
0A222:  MOVLW  0D
0A224:  MOVLB  A
0A226:  MOVWF  x29
0A228:  MOVLB  0
0A22A:  CALL   1C3C
0A22E:  MOVLW  0A
0A230:  MOVLB  A
0A232:  MOVWF  x29
0A234:  MOVLB  0
0A236:  CALL   1C3C
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0A23A:  MOVLW  3A
0A23C:  MOVWF  FF6
0A23E:  MOVLW  0B
0A240:  MOVWF  FF7
0A242:  MOVLW  00
0A244:  MOVWF  FF8
0A246:  MOVLW  21
0A248:  MOVLB  9
0A24A:  MOVWF  x96
0A24C:  MOVLB  0
0A24E:  CALL   1CBE
0A252:  MOVLW  41
0A254:  MOVWF  FE9
0A256:  MOVFF  1AF,1EE
0A25A:  MOVFF  1AE,1ED
0A25E:  MOVFF  1AD,1EC
0A262:  MOVFF  1AC,1EB
0A266:  CALL   9004
0A26A:  MOVLW  5E
0A26C:  MOVWF  FF6
0A26E:  MOVLW  0B
0A270:  MOVWF  FF7
0A272:  MOVLW  00
0A274:  MOVWF  FF8
0A276:  MOVLW  04
0A278:  MOVLB  9
0A27A:  MOVWF  x96
0A27C:  MOVLB  0
0A27E:  CALL   1CBE
0A282:  MOVFF  1AF,996
0A286:  MOVLW  57
0A288:  MOVLB  9
0A28A:  MOVWF  x97
0A28C:  MOVLB  0
0A28E:  CALL   1EBC
0A292:  MOVFF  1AE,996
0A296:  MOVLW  57
0A298:  MOVLB  9
0A29A:  MOVWF  x97
0A29C:  MOVLB  0
0A29E:  CALL   1EBC
0A2A2:  MOVFF  1AD,996
0A2A6:  MOVLW  57
0A2A8:  MOVLB  9
0A2AA:  MOVWF  x97
0A2AC:  MOVLB  0
0A2AE:  CALL   1EBC
0A2B2:  MOVFF  1AC,996
0A2B6:  MOVLW  57
0A2B8:  MOVLB  9
0A2BA:  MOVWF  x97
0A2BC:  MOVLB  0
0A2BE:  CALL   1EBC
0A2C2:  MOVLW  65
0A2C4:  MOVWF  FF6
0A2C6:  MOVLW  0B
0A2C8:  MOVWF  FF7
0A2CA:  MOVLW  00
0A2CC:  MOVWF  FF8
0A2CE:  MOVLW  05
0A2D0:  MOVLB  9
0A2D2:  MOVWF  x96
0A2D4:  MOVLB  0
0A2D6:  CALL   1CBE
.................... 
....................     if (!is_connect(smf)){
0A2DA:  MOVFF  F5,A29
0A2DE:  MOVFF  F4,A28
0A2E2:  MOVFF  F3,A27
0A2E6:  MOVFF  F2,A26
0A2EA:  CALL   232E
0A2EE:  MOVF   01,F
0A2F0:  BTFSS  FD8.2
0A2F2:  GOTO   A306
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0A2F6:  MOVLW  6C
0A2F8:  MOVWF  FF6
0A2FA:  MOVLW  0B
0A2FC:  MOVWF  FF7
0A2FE:  MOVLW  00
0A300:  MOVWF  FF8
0A302:  CALL   1C8E
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0A306:  MOVLW  8A
0A308:  MOVWF  FF6
0A30A:  MOVLW  0B
0A30C:  MOVWF  FF7
0A30E:  MOVLW  00
0A310:  MOVWF  FF8
0A312:  CALL   1C8E
....................     for (unsigned int32 addr = read_src; addr < read_src + read_size; addr += PACKET_SIZE)
0A316:  MOVFF  1AB,1B3
0A31A:  MOVFF  1AA,1B2
0A31E:  MOVFF  1A9,1B1
0A322:  MOVFF  1A8,1B0
0A326:  MOVLB  1
0A328:  MOVF   xAC,W
0A32A:  ADDWF  xA8,W
0A32C:  MOVWF  00
0A32E:  MOVF   xAD,W
0A330:  ADDWFC xA9,W
0A332:  MOVWF  01
0A334:  MOVF   xAE,W
0A336:  ADDWFC xAA,W
0A338:  MOVWF  02
0A33A:  MOVF   xAF,W
0A33C:  ADDWFC xAB,W
0A33E:  MOVWF  03
0A340:  MOVF   xB3,W
0A342:  SUBWF  03,W
0A344:  BTFSC  FD8.0
0A346:  BRA    A34E
0A348:  MOVLB  0
0A34A:  GOTO   A496
0A34E:  MOVLB  0
0A350:  BTFSS  FD8.2
0A352:  GOTO   A398
0A356:  MOVLB  1
0A358:  MOVF   xB2,W
0A35A:  SUBWF  02,W
0A35C:  BTFSC  FD8.0
0A35E:  BRA    A366
0A360:  MOVLB  0
0A362:  GOTO   A496
0A366:  MOVLB  0
0A368:  BTFSS  FD8.2
0A36A:  GOTO   A398
0A36E:  MOVLB  1
0A370:  MOVF   xB1,W
0A372:  SUBWF  01,W
0A374:  BTFSC  FD8.0
0A376:  BRA    A37E
0A378:  MOVLB  0
0A37A:  GOTO   A496
0A37E:  MOVLB  0
0A380:  BTFSS  FD8.2
0A382:  GOTO   A398
0A386:  MOVF   00,W
0A388:  MOVLB  1
0A38A:  SUBWF  xB0,W
0A38C:  BTFSS  FD8.0
0A38E:  BRA    A396
0A390:  MOVLB  0
0A392:  GOTO   A496
0A396:  MOVLB  0
....................     {
....................         read_data_bytes(smf, addr, buffer, PACKET_SIZE);
0A398:  MOVFF  F5,270
0A39C:  MOVFF  F4,26F
0A3A0:  MOVFF  F3,26E
0A3A4:  MOVFF  F2,26D
0A3A8:  MOVFF  1B3,274
0A3AC:  MOVFF  1B2,273
0A3B0:  MOVFF  1B1,272
0A3B4:  MOVFF  1B0,271
0A3B8:  MOVLW  01
0A3BA:  MOVLB  2
0A3BC:  MOVWF  x76
0A3BE:  MOVLW  60
0A3C0:  MOVWF  x75
0A3C2:  CLRF   x7A
0A3C4:  CLRF   x79
0A3C6:  CLRF   x78
0A3C8:  MOVLW  40
0A3CA:  MOVWF  x77
0A3CC:  MOVLB  0
0A3CE:  CALL   23F4
....................         for (unsigned int32 i = 0; i < PACKET_SIZE; i++)
0A3D2:  MOVLB  1
0A3D4:  CLRF   xB7
0A3D6:  CLRF   xB6
0A3D8:  CLRF   xB5
0A3DA:  CLRF   xB4
0A3DC:  MOVLB  0
0A3DE:  MOVLB  1
0A3E0:  MOVF   xB7,F
0A3E2:  BTFSC  FD8.2
0A3E4:  BRA    A3EC
0A3E6:  MOVLB  0
0A3E8:  GOTO   A466
0A3EC:  MOVLB  0
0A3EE:  MOVLB  1
0A3F0:  MOVF   xB6,F
0A3F2:  BTFSC  FD8.2
0A3F4:  BRA    A3FC
0A3F6:  MOVLB  0
0A3F8:  GOTO   A466
0A3FC:  MOVLB  0
0A3FE:  MOVLB  1
0A400:  MOVF   xB5,F
0A402:  BTFSC  FD8.2
0A404:  BRA    A40C
0A406:  MOVLB  0
0A408:  GOTO   A466
0A40C:  MOVLB  0
0A40E:  MOVLB  1
0A410:  MOVF   xB4,W
0A412:  SUBLW  3F
0A414:  BTFSC  FD8.0
0A416:  BRA    A41E
0A418:  MOVLB  0
0A41A:  GOTO   A466
0A41E:  MOVLB  0
....................         {
....................             fprintf(PC, "%02X ", buffer[i]);
0A420:  MOVLW  60
0A422:  MOVLB  1
0A424:  ADDWF  xB4,W
0A426:  MOVWF  FE9
0A428:  MOVLW  01
0A42A:  ADDWFC xB5,W
0A42C:  MOVWF  FEA
0A42E:  MOVFF  FEF,1B8
0A432:  MOVFF  1B8,996
0A436:  MOVLW  37
0A438:  MOVLB  9
0A43A:  MOVWF  x97
0A43C:  MOVLB  0
0A43E:  CALL   1EBC
0A442:  MOVLW  20
0A444:  MOVLB  A
0A446:  MOVWF  x29
0A448:  MOVLB  0
0A44A:  CALL   1C3C
0A44E:  MOVLW  01
0A450:  MOVLB  1
0A452:  ADDWF  xB4,F
0A454:  BTFSC  FD8.0
0A456:  INCF   xB5,F
0A458:  BTFSC  FD8.2
0A45A:  INCF   xB6,F
0A45C:  BTFSC  FD8.2
0A45E:  INCF   xB7,F
0A460:  MOVLB  0
0A462:  GOTO   A3DE
....................         }
....................         fprintf(PC, "\r\n");
0A466:  MOVLW  0D
0A468:  MOVLB  A
0A46A:  MOVWF  x29
0A46C:  MOVLB  0
0A46E:  CALL   1C3C
0A472:  MOVLW  0A
0A474:  MOVLB  A
0A476:  MOVWF  x29
0A478:  MOVLB  0
0A47A:  CALL   1C3C
0A47E:  MOVLW  40
0A480:  MOVLB  1
0A482:  ADDWF  xB0,F
0A484:  MOVLW  00
0A486:  ADDWFC xB1,F
0A488:  MOVLW  00
0A48A:  ADDWFC xB2,F
0A48C:  MOVLW  00
0A48E:  ADDWFC xB3,F
0A490:  MOVLB  0
0A492:  GOTO   A326
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0A496:  MOVLW  A2
0A498:  MOVWF  FF6
0A49A:  MOVLW  0B
0A49C:  MOVWF  FF7
0A49E:  MOVLW  00
0A4A0:  MOVWF  FF8
0A4A2:  CALL   1C8E
....................     fprintf(PC, "____________________\r\n\r\n");
0A4A6:  MOVLW  BA
0A4A8:  MOVWF  FF6
0A4AA:  MOVLW  0B
0A4AC:  MOVWF  FF7
0A4AE:  MOVLW  00
0A4B0:  MOVWF  FF8
0A4B2:  CALL   1C8E
0A4B6:  GOTO   AC4E (RETURN)
.................... }
.................... 
.................... void smf_erase(SmfDataStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0A4BA:  MOVLW  D4
0A4BC:  MOVWF  FF6
0A4BE:  MOVLW  0B
0A4C0:  MOVWF  FF7
0A4C2:  MOVLW  00
0A4C4:  MOVWF  FF8
0A4C6:  CALL   1C8E
....................     fprintf(PC, "___Start smf_erase____\r\n");
0A4CA:  MOVLW  EE
0A4CC:  MOVWF  FF6
0A4CE:  MOVLW  0B
0A4D0:  MOVWF  FF7
0A4D2:  MOVLW  00
0A4D4:  MOVWF  FF8
0A4D6:  CALL   1C8E
.................... 
....................     MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_id);
0A4DA:  MOVLB  1
0A4DC:  MOVF   x5E,W
0A4DE:  MOVWF  FE9
0A4E0:  MOVF   x5F,W
0A4E2:  MOVWF  FEA
0A4E4:  MOVFF  FEF,178
0A4E8:  MOVFF  178,1F2
0A4EC:  MOVLB  0
0A4EE:  CALL   8F4E
0A4F2:  MOVFF  02,03
0A4F6:  MOVF   01,W
0A4F8:  MOVWF  FE1
0A4FA:  MOVFF  03,FE2
0A4FE:  MOVLW  01
0A500:  MOVWF  FEA
0A502:  MOVLW  60
0A504:  MOVWF  FE9
0A506:  MOVLW  08
0A508:  MOVWF  01
0A50A:  MOVFF  FE6,FEE
0A50E:  DECFSZ 01,F
0A510:  GOTO   A50A
....................     status[1] = smf_data->mission_id; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
0A514:  MOVLB  1
0A516:  MOVF   x5E,W
0A518:  MOVWF  FE9
0A51A:  MOVF   x5F,W
0A51C:  MOVWF  FEA
0A51E:  MOVFF  FEF,49
....................     unsigned int32 mis_start_address = mission_type.start_address;
....................     unsigned int32 mis_end_address = mission_type.end_address;
....................     unsigned int32 erase_src = smf_data->src;
....................     unsigned int32 erase_size = smf_data->size;
0A522:  MOVFF  163,16B
0A526:  MOVFF  162,16A
0A52A:  MOVFF  161,169
0A52E:  MOVFF  160,168
0A532:  MOVFF  167,16F
0A536:  MOVFF  166,16E
0A53A:  MOVFF  165,16D
0A53E:  MOVFF  164,16C
0A542:  MOVLW  01
0A544:  ADDWF  x5E,W
0A546:  MOVWF  FE9
0A548:  MOVLW  00
0A54A:  ADDWFC x5F,W
0A54C:  MOVWF  FEA
0A54E:  MOVFF  FEF,170
0A552:  MOVFF  FEC,171
0A556:  MOVFF  FEC,172
0A55A:  MOVFF  FEC,173
0A55E:  MOVF   FED,F
0A560:  MOVF   FED,F
0A562:  MOVF   FED,F
0A564:  MOVLW  05
0A566:  ADDWF  x5E,W
0A568:  MOVWF  FE9
0A56A:  MOVLW  00
0A56C:  ADDWFC x5F,W
0A56E:  MOVWF  FEA
0A570:  MOVFF  FEF,174
0A574:  MOVFF  FEC,175
0A578:  MOVFF  FEC,176
0A57C:  MOVFF  FEC,177
0A580:  MOVF   FED,F
0A582:  MOVF   FED,F
0A584:  MOVF   FED,F
....................     fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
0A586:  MOVLW  08
0A588:  MOVWF  FF6
0A58A:  MOVLW  0C
0A58C:  MOVWF  FF7
0A58E:  MOVLW  00
0A590:  MOVWF  FF8
0A592:  MOVLW  25
0A594:  MOVLB  9
0A596:  MOVWF  x96
0A598:  MOVLB  0
0A59A:  CALL   1CBE
0A59E:  MOVFF  16B,996
0A5A2:  MOVLW  37
0A5A4:  MOVLB  9
0A5A6:  MOVWF  x97
0A5A8:  MOVLB  0
0A5AA:  CALL   1EBC
0A5AE:  MOVFF  16A,996
0A5B2:  MOVLW  37
0A5B4:  MOVLB  9
0A5B6:  MOVWF  x97
0A5B8:  MOVLB  0
0A5BA:  CALL   1EBC
0A5BE:  MOVFF  169,996
0A5C2:  MOVLW  37
0A5C4:  MOVLB  9
0A5C6:  MOVWF  x97
0A5C8:  MOVLB  0
0A5CA:  CALL   1EBC
0A5CE:  MOVFF  168,996
0A5D2:  MOVLW  37
0A5D4:  MOVLB  9
0A5D6:  MOVWF  x97
0A5D8:  MOVLB  0
0A5DA:  CALL   1EBC
0A5DE:  MOVLW  0D
0A5E0:  MOVLB  A
0A5E2:  MOVWF  x29
0A5E4:  MOVLB  0
0A5E6:  CALL   1C3C
0A5EA:  MOVLW  0A
0A5EC:  MOVLB  A
0A5EE:  MOVWF  x29
0A5F0:  MOVLB  0
0A5F2:  CALL   1C3C
....................     fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
0A5F6:  MOVLW  34
0A5F8:  MOVWF  FF6
0A5FA:  MOVLW  0C
0A5FC:  MOVWF  FF7
0A5FE:  MOVLW  00
0A600:  MOVWF  FF8
0A602:  MOVLW  25
0A604:  MOVLB  9
0A606:  MOVWF  x96
0A608:  MOVLB  0
0A60A:  CALL   1CBE
0A60E:  MOVFF  16F,996
0A612:  MOVLW  37
0A614:  MOVLB  9
0A616:  MOVWF  x97
0A618:  MOVLB  0
0A61A:  CALL   1EBC
0A61E:  MOVFF  16E,996
0A622:  MOVLW  37
0A624:  MOVLB  9
0A626:  MOVWF  x97
0A628:  MOVLB  0
0A62A:  CALL   1EBC
0A62E:  MOVFF  16D,996
0A632:  MOVLW  37
0A634:  MOVLB  9
0A636:  MOVWF  x97
0A638:  MOVLB  0
0A63A:  CALL   1EBC
0A63E:  MOVFF  16C,996
0A642:  MOVLW  37
0A644:  MOVLB  9
0A646:  MOVWF  x97
0A648:  MOVLB  0
0A64A:  CALL   1EBC
0A64E:  MOVLW  0D
0A650:  MOVLB  A
0A652:  MOVWF  x29
0A654:  MOVLB  0
0A656:  CALL   1C3C
0A65A:  MOVLW  0A
0A65C:  MOVLB  A
0A65E:  MOVWF  x29
0A660:  MOVLB  0
0A662:  CALL   1C3C
....................     fprintf(PC, "In SMF Erase source data address: %LX\r\n", erase_src);
0A666:  MOVLW  60
0A668:  MOVWF  FF6
0A66A:  MOVLW  0C
0A66C:  MOVWF  FF7
0A66E:  MOVLW  00
0A670:  MOVWF  FF8
0A672:  MOVLW  22
0A674:  MOVLB  9
0A676:  MOVWF  x96
0A678:  MOVLB  0
0A67A:  CALL   1CBE
0A67E:  MOVFF  173,996
0A682:  MOVLW  37
0A684:  MOVLB  9
0A686:  MOVWF  x97
0A688:  MOVLB  0
0A68A:  CALL   1EBC
0A68E:  MOVFF  172,996
0A692:  MOVLW  37
0A694:  MOVLB  9
0A696:  MOVWF  x97
0A698:  MOVLB  0
0A69A:  CALL   1EBC
0A69E:  MOVFF  171,996
0A6A2:  MOVLW  37
0A6A4:  MOVLB  9
0A6A6:  MOVWF  x97
0A6A8:  MOVLB  0
0A6AA:  CALL   1EBC
0A6AE:  MOVFF  170,996
0A6B2:  MOVLW  37
0A6B4:  MOVLB  9
0A6B6:  MOVWF  x97
0A6B8:  MOVLB  0
0A6BA:  CALL   1EBC
0A6BE:  MOVLW  0D
0A6C0:  MOVLB  A
0A6C2:  MOVWF  x29
0A6C4:  MOVLB  0
0A6C6:  CALL   1C3C
0A6CA:  MOVLW  0A
0A6CC:  MOVLB  A
0A6CE:  MOVWF  x29
0A6D0:  MOVLB  0
0A6D2:  CALL   1C3C
....................     fprintf(PC, "In SMF Erase data size          : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0A6D6:  MOVLW  88
0A6D8:  MOVWF  FF6
0A6DA:  MOVLW  0C
0A6DC:  MOVWF  FF7
0A6DE:  MOVLW  00
0A6E0:  MOVWF  FF8
0A6E2:  MOVLW  22
0A6E4:  MOVLB  9
0A6E6:  MOVWF  x96
0A6E8:  MOVLB  0
0A6EA:  CALL   1CBE
0A6EE:  MOVLW  41
0A6F0:  MOVWF  FE9
0A6F2:  MOVFF  177,1EE
0A6F6:  MOVFF  176,1ED
0A6FA:  MOVFF  175,1EC
0A6FE:  MOVFF  174,1EB
0A702:  CALL   9004
0A706:  MOVLW  AD
0A708:  MOVWF  FF6
0A70A:  MOVLW  0C
0A70C:  MOVWF  FF7
0A70E:  MOVLW  00
0A710:  MOVWF  FF8
0A712:  MOVLW  04
0A714:  MOVLB  9
0A716:  MOVWF  x96
0A718:  MOVLB  0
0A71A:  CALL   1CBE
0A71E:  MOVFF  177,996
0A722:  MOVLW  57
0A724:  MOVLB  9
0A726:  MOVWF  x97
0A728:  MOVLB  0
0A72A:  CALL   1EBC
0A72E:  MOVFF  176,996
0A732:  MOVLW  57
0A734:  MOVLB  9
0A736:  MOVWF  x97
0A738:  MOVLB  0
0A73A:  CALL   1EBC
0A73E:  MOVFF  175,996
0A742:  MOVLW  57
0A744:  MOVLB  9
0A746:  MOVWF  x97
0A748:  MOVLB  0
0A74A:  CALL   1EBC
0A74E:  MOVFF  174,996
0A752:  MOVLW  57
0A754:  MOVLB  9
0A756:  MOVWF  x97
0A758:  MOVLB  0
0A75A:  CALL   1EBC
0A75E:  MOVLW  B4
0A760:  MOVWF  FF6
0A762:  MOVLW  0C
0A764:  MOVWF  FF7
0A766:  MOVLW  00
0A768:  MOVWF  FF8
0A76A:  MOVLW  05
0A76C:  MOVLB  9
0A76E:  MOVWF  x96
0A770:  MOVLB  0
0A772:  CALL   1CBE
.................... 
....................     if (!is_connect(smf)){
0A776:  MOVFF  F5,A29
0A77A:  MOVFF  F4,A28
0A77E:  MOVFF  F3,A27
0A782:  MOVFF  F2,A26
0A786:  CALL   232E
0A78A:  MOVF   01,F
0A78C:  BTFSS  FD8.2
0A78E:  GOTO   A7A6
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0A792:  MOVLW  BA
0A794:  MOVWF  FF6
0A796:  MOVLW  0C
0A798:  MOVWF  FF7
0A79A:  MOVLW  00
0A79C:  MOVWF  FF8
0A79E:  CALL   1C8E
....................         return;
0A7A2:  GOTO   AAE0
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_src < mis_start_address || erase_src >= mis_end_address) {
0A7A6:  MOVLB  1
0A7A8:  MOVF   x73,W
0A7AA:  SUBWF  x6B,W
0A7AC:  BTFSC  FD8.0
0A7AE:  BRA    A7B6
0A7B0:  MOVLB  0
0A7B2:  GOTO   A800
0A7B6:  MOVLB  0
0A7B8:  BTFSS  FD8.2
0A7BA:  GOTO   A85A
0A7BE:  MOVLB  1
0A7C0:  MOVF   x72,W
0A7C2:  SUBWF  x6A,W
0A7C4:  BTFSC  FD8.0
0A7C6:  BRA    A7CE
0A7C8:  MOVLB  0
0A7CA:  GOTO   A800
0A7CE:  MOVLB  0
0A7D0:  BTFSS  FD8.2
0A7D2:  GOTO   A85A
0A7D6:  MOVLB  1
0A7D8:  MOVF   x71,W
0A7DA:  SUBWF  x69,W
0A7DC:  BTFSC  FD8.0
0A7DE:  BRA    A7E6
0A7E0:  MOVLB  0
0A7E2:  GOTO   A800
0A7E6:  MOVLB  0
0A7E8:  BTFSS  FD8.2
0A7EA:  GOTO   A85A
0A7EE:  MOVLB  1
0A7F0:  MOVF   x68,W
0A7F2:  SUBWF  x70,W
0A7F4:  BTFSC  FD8.0
0A7F6:  BRA    A7FE
0A7F8:  MOVLB  0
0A7FA:  GOTO   A85A
0A7FE:  MOVLB  0
0A800:  MOVLB  1
0A802:  MOVF   x6F,W
0A804:  SUBWF  x73,W
0A806:  BTFSC  FD8.0
0A808:  BRA    A810
0A80A:  MOVLB  0
0A80C:  GOTO   A97E
0A810:  MOVLB  0
0A812:  BTFSS  FD8.2
0A814:  GOTO   A85A
0A818:  MOVLB  1
0A81A:  MOVF   x6E,W
0A81C:  SUBWF  x72,W
0A81E:  BTFSC  FD8.0
0A820:  BRA    A828
0A822:  MOVLB  0
0A824:  GOTO   A97E
0A828:  MOVLB  0
0A82A:  BTFSS  FD8.2
0A82C:  GOTO   A85A
0A830:  MOVLB  1
0A832:  MOVF   x6D,W
0A834:  SUBWF  x71,W
0A836:  BTFSC  FD8.0
0A838:  BRA    A840
0A83A:  MOVLB  0
0A83C:  GOTO   A97E
0A840:  MOVLB  0
0A842:  BTFSS  FD8.2
0A844:  GOTO   A85A
0A848:  MOVLB  1
0A84A:  MOVF   x6C,W
0A84C:  SUBWF  x70,W
0A84E:  BTFSC  FD8.0
0A850:  BRA    A858
0A852:  MOVLB  0
0A854:  GOTO   A97E
0A858:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_src, mis_start_address, mis_end_address);
0A85A:  MOVLW  D8
0A85C:  MOVWF  FF6
0A85E:  MOVLW  0C
0A860:  MOVWF  FF7
0A862:  MOVLW  00
0A864:  MOVWF  FF8
0A866:  MOVLW  1E
0A868:  MOVLB  9
0A86A:  MOVWF  x96
0A86C:  MOVLB  0
0A86E:  CALL   1CBE
0A872:  MOVFF  173,996
0A876:  MOVLW  37
0A878:  MOVLB  9
0A87A:  MOVWF  x97
0A87C:  MOVLB  0
0A87E:  CALL   1EBC
0A882:  MOVFF  172,996
0A886:  MOVLW  37
0A888:  MOVLB  9
0A88A:  MOVWF  x97
0A88C:  MOVLB  0
0A88E:  CALL   1EBC
0A892:  MOVFF  171,996
0A896:  MOVLW  37
0A898:  MOVLB  9
0A89A:  MOVWF  x97
0A89C:  MOVLB  0
0A89E:  CALL   1EBC
0A8A2:  MOVFF  170,996
0A8A6:  MOVLW  37
0A8A8:  MOVLB  9
0A8AA:  MOVWF  x97
0A8AC:  MOVLB  0
0A8AE:  CALL   1EBC
0A8B2:  MOVLW  F9
0A8B4:  MOVWF  FF6
0A8B6:  MOVLW  0C
0A8B8:  MOVWF  FF7
0A8BA:  MOVLW  00
0A8BC:  MOVWF  FF8
0A8BE:  MOVLW  1D
0A8C0:  MOVLB  9
0A8C2:  MOVWF  x96
0A8C4:  MOVLB  0
0A8C6:  CALL   1CBE
0A8CA:  MOVFF  16B,996
0A8CE:  MOVLW  37
0A8D0:  MOVLB  9
0A8D2:  MOVWF  x97
0A8D4:  MOVLB  0
0A8D6:  CALL   1EBC
0A8DA:  MOVFF  16A,996
0A8DE:  MOVLW  37
0A8E0:  MOVLB  9
0A8E2:  MOVWF  x97
0A8E4:  MOVLB  0
0A8E6:  CALL   1EBC
0A8EA:  MOVFF  169,996
0A8EE:  MOVLW  37
0A8F0:  MOVLB  9
0A8F2:  MOVWF  x97
0A8F4:  MOVLB  0
0A8F6:  CALL   1EBC
0A8FA:  MOVFF  168,996
0A8FE:  MOVLW  37
0A900:  MOVLB  9
0A902:  MOVWF  x97
0A904:  MOVLB  0
0A906:  CALL   1EBC
0A90A:  MOVLW  19
0A90C:  MOVWF  FF6
0A90E:  MOVLW  0D
0A910:  MOVWF  FF7
0A912:  MOVLW  00
0A914:  MOVWF  FF8
0A916:  MOVLW  05
0A918:  MOVLB  9
0A91A:  MOVWF  x96
0A91C:  MOVLB  0
0A91E:  CALL   1CBE
0A922:  MOVFF  16F,996
0A926:  MOVLW  37
0A928:  MOVLB  9
0A92A:  MOVWF  x97
0A92C:  MOVLB  0
0A92E:  CALL   1EBC
0A932:  MOVFF  16E,996
0A936:  MOVLW  37
0A938:  MOVLB  9
0A93A:  MOVWF  x97
0A93C:  MOVLB  0
0A93E:  CALL   1EBC
0A942:  MOVFF  16D,996
0A946:  MOVLW  37
0A948:  MOVLB  9
0A94A:  MOVWF  x97
0A94C:  MOVLB  0
0A94E:  CALL   1EBC
0A952:  MOVFF  16C,996
0A956:  MOVLW  37
0A958:  MOVLB  9
0A95A:  MOVWF  x97
0A95C:  MOVLB  0
0A95E:  CALL   1EBC
0A962:  MOVLW  21
0A964:  MOVWF  FF6
0A966:  MOVLW  0D
0A968:  MOVWF  FF7
0A96A:  MOVLW  00
0A96C:  MOVWF  FF8
0A96E:  MOVLW  03
0A970:  MOVLB  9
0A972:  MOVWF  x96
0A974:  MOVLB  0
0A976:  CALL   1CBE
....................         return;
0A97A:  GOTO   AAE0
....................     }
....................     
....................     if ((erase_src + erase_size) > mis_end_address) {
0A97E:  MOVLB  1
0A980:  MOVF   x74,W
0A982:  ADDWF  x70,W
0A984:  MOVWF  x78
0A986:  MOVF   x75,W
0A988:  ADDWFC x71,W
0A98A:  MOVWF  x79
0A98C:  MOVF   x76,W
0A98E:  ADDWFC x72,W
0A990:  MOVWF  x7A
0A992:  MOVF   x77,W
0A994:  ADDWFC x73,W
0A996:  MOVWF  x7B
0A998:  MOVF   x6F,W
0A99A:  SUBWF  x7B,W
0A99C:  BTFSC  FD8.0
0A99E:  BRA    A9A6
0A9A0:  MOVLB  0
0A9A2:  GOTO   AA8C
0A9A6:  MOVLB  0
0A9A8:  BTFSS  FD8.2
0A9AA:  GOTO   A9F0
0A9AE:  MOVLB  1
0A9B0:  MOVF   x6E,W
0A9B2:  SUBWF  x7A,W
0A9B4:  BTFSC  FD8.0
0A9B6:  BRA    A9BE
0A9B8:  MOVLB  0
0A9BA:  GOTO   AA8C
0A9BE:  MOVLB  0
0A9C0:  BTFSS  FD8.2
0A9C2:  GOTO   A9F0
0A9C6:  MOVLB  1
0A9C8:  MOVF   x6D,W
0A9CA:  SUBWF  x79,W
0A9CC:  BTFSC  FD8.0
0A9CE:  BRA    A9D6
0A9D0:  MOVLB  0
0A9D2:  GOTO   AA8C
0A9D6:  MOVLB  0
0A9D8:  BTFSS  FD8.2
0A9DA:  GOTO   A9F0
0A9DE:  MOVLB  1
0A9E0:  MOVF   x78,W
0A9E2:  SUBWF  x6C,W
0A9E4:  BTFSS  FD8.0
0A9E6:  BRA    A9EE
0A9E8:  MOVLB  0
0A9EA:  GOTO   AA8C
0A9EE:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mis_end_address);
0A9F0:  MOVLW  26
0A9F2:  MOVWF  FF6
0A9F4:  MOVLW  0D
0A9F6:  MOVWF  FF7
0A9F8:  MOVLW  00
0A9FA:  MOVWF  FF8
0A9FC:  MOVLW  3A
0A9FE:  MOVLB  9
0AA00:  MOVWF  x96
0AA02:  MOVLB  0
0AA04:  CALL   1CBE
0AA08:  MOVFF  16F,996
0AA0C:  MOVLW  37
0AA0E:  MOVLB  9
0AA10:  MOVWF  x97
0AA12:  MOVLB  0
0AA14:  CALL   1EBC
0AA18:  MOVFF  16E,996
0AA1C:  MOVLW  37
0AA1E:  MOVLB  9
0AA20:  MOVWF  x97
0AA22:  MOVLB  0
0AA24:  CALL   1EBC
0AA28:  MOVFF  16D,996
0AA2C:  MOVLW  37
0AA2E:  MOVLB  9
0AA30:  MOVWF  x97
0AA32:  MOVLB  0
0AA34:  CALL   1EBC
0AA38:  MOVFF  16C,996
0AA3C:  MOVLW  37
0AA3E:  MOVLB  9
0AA40:  MOVWF  x97
0AA42:  MOVLB  0
0AA44:  CALL   1EBC
0AA48:  MOVLW  0D
0AA4A:  MOVLB  A
0AA4C:  MOVWF  x29
0AA4E:  MOVLB  0
0AA50:  CALL   1C3C
0AA54:  MOVLW  0A
0AA56:  MOVLB  A
0AA58:  MOVWF  x29
0AA5A:  MOVLB  0
0AA5C:  CALL   1C3C
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
0AA60:  MOVLW  66
0AA62:  MOVWF  FF6
0AA64:  MOVLW  0D
0AA66:  MOVWF  FF7
0AA68:  MOVLW  00
0AA6A:  MOVWF  FF8
0AA6C:  CALL   1C8E
....................         erase_size = mis_end_address - erase_src;
0AA70:  MOVLB  1
0AA72:  MOVF   x70,W
0AA74:  SUBWF  x6C,W
0AA76:  MOVWF  x74
0AA78:  MOVF   x71,W
0AA7A:  SUBWFB x6D,W
0AA7C:  MOVWF  x75
0AA7E:  MOVF   x72,W
0AA80:  SUBWFB x6E,W
0AA82:  MOVWF  x76
0AA84:  MOVF   x73,W
0AA86:  SUBWFB x6F,W
0AA88:  MOVWF  x77
0AA8A:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0AA8C:  MOVLW  9A
0AA8E:  MOVWF  FF6
0AA90:  MOVLW  0D
0AA92:  MOVWF  FF7
0AA94:  MOVLW  00
0AA96:  MOVWF  FF8
0AA98:  CALL   1C8E
....................     subsector_4kByte_erase(smf, erase_src);
0AA9C:  MOVFF  F5,A29
0AAA0:  MOVFF  F4,A28
0AAA4:  MOVFF  F3,A27
0AAA8:  MOVFF  F2,A26
0AAAC:  MOVFF  173,A2D
0AAB0:  MOVFF  172,A2C
0AAB4:  MOVFF  171,A2B
0AAB8:  MOVFF  170,A2A
0AABC:  CALL   3554
....................     
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
0AAC0:  MOVLW  CC
0AAC2:  MOVWF  FF6
0AAC4:  MOVLW  0D
0AAC6:  MOVWF  FF7
0AAC8:  MOVLW  00
0AACA:  MOVWF  FF8
0AACC:  CALL   1C8E
....................     fprintf(PC, "____________________\r\n\r\n");
0AAD0:  MOVLW  E6
0AAD2:  MOVWF  FF6
0AAD4:  MOVLW  0D
0AAD6:  MOVWF  FF7
0AAD8:  MOVLW  00
0AADA:  MOVWF  FF8
0AADC:  CALL   1C8E
0AAE0:  GOTO   AC7C (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.meas;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/tool/calc_tools.h"              // ツールライブラリ
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 frame[], int8 payload_size);        
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
026DA:  MOVLW  6C
026DC:  MOVWF  FF6
026DE:  MOVLW  0E
026E0:  MOVWF  FF7
026E2:  MOVLW  00
026E4:  MOVWF  FF8
026E6:  CALL   1C8E
.................... 
....................     output_high(MIS_FM_CS);
026EA:  BCF    F92.5
026EC:  BSF    F89.5
....................     output_high(SMF_CS);
026EE:  BCF    F92.2
026F0:  BSF    F89.2
....................     delay_ms(100); 
026F2:  MOVLW  64
026F4:  MOVLB  A
026F6:  MOVWF  x3E
026F8:  MOVLB  0
026FA:  CALL   1C0E
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
026FE:  MOVLW  9F
02700:  MOVLB  1
02702:  MOVWF  xB7
....................     output_low(mis_fm.cs_pin);
02704:  MOVFF  F0,A44
02708:  MOVLB  A
0270A:  CLRF   x45
0270C:  MOVLW  0F
0270E:  MOVWF  x47
02710:  MOVLW  89
02712:  MOVWF  x46
02714:  MOVLB  0
02716:  CALL   2024
0271A:  MOVFF  F0,A44
0271E:  MOVLB  A
02720:  CLRF   x45
02722:  MOVLW  0F
02724:  MOVWF  x47
02726:  MOVLW  92
02728:  MOVWF  x46
0272A:  MOVLB  0
0272C:  CALL   2024
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02730:  MOVFF  F1,A47
02734:  MOVFF  F0,A46
02738:  MOVFF  EF,A45
0273C:  MOVFF  EE,A44
02740:  MOVLW  01
02742:  MOVLB  A
02744:  MOVWF  x49
02746:  MOVLW  B7
02748:  MOVWF  x48
0274A:  CLRF   x4B
0274C:  MOVLW  01
0274E:  MOVWF  x4A
02750:  MOVLW  01
02752:  MOVWF  x4D
02754:  MOVLW  A3
02756:  MOVWF  x4C
02758:  CLRF   x51
0275A:  CLRF   x50
0275C:  CLRF   x4F
0275E:  MOVLW  14
02760:  MOVWF  x4E
02762:  MOVLB  0
02764:  CALL   2108
....................     output_high(mis_fm.cs_pin);
02768:  MOVFF  F0,A44
0276C:  MOVLW  01
0276E:  MOVLB  A
02770:  MOVWF  x45
02772:  MOVLW  0F
02774:  MOVWF  x47
02776:  MOVLW  89
02778:  MOVWF  x46
0277A:  MOVLB  0
0277C:  CALL   2024
02780:  MOVFF  F0,A44
02784:  MOVLB  A
02786:  CLRF   x45
02788:  MOVLW  0F
0278A:  MOVWF  x47
0278C:  MOVLW  92
0278E:  MOVWF  x46
02790:  MOVLB  0
02792:  CALL   2024
....................     fprintf(PC, "\t[MIS FM]READ ID:");
02796:  MOVLW  88
02798:  MOVWF  FF6
0279A:  MOVLW  0E
0279C:  MOVWF  FF7
0279E:  MOVLW  00
027A0:  MOVWF  FF8
027A2:  CALL   1C8E
....................     for (unsigned int8 index = 0; index < 4; index++)
027A6:  MOVLB  1
027A8:  CLRF   xB8
027AA:  MOVLB  0
027AC:  MOVLB  1
027AE:  MOVF   xB8,W
027B0:  SUBLW  03
027B2:  BTFSC  FD8.0
027B4:  BRA    27BC
027B6:  MOVLB  0
027B8:  GOTO   27F8
027BC:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
027BE:  CLRF   03
027C0:  MOVLB  1
027C2:  MOVF   xB8,W
027C4:  ADDLW  A3
027C6:  MOVWF  FE9
027C8:  MOVLW  01
027CA:  ADDWFC 03,W
027CC:  MOVWF  FEA
027CE:  MOVFF  FEF,1FA
027D2:  MOVFF  1FA,996
027D6:  MOVLW  37
027D8:  MOVLB  9
027DA:  MOVWF  x97
027DC:  MOVLB  0
027DE:  CALL   1EBC
027E2:  MOVLW  20
027E4:  MOVLB  A
027E6:  MOVWF  x29
027E8:  MOVLB  0
027EA:  CALL   1C3C
027EE:  MOVLB  1
027F0:  INCF   xB8,F
027F2:  MOVLB  0
027F4:  GOTO   27AC
....................     }
....................     fprintf(PC,"\r\n");
027F8:  MOVLW  0D
027FA:  MOVLB  A
027FC:  MOVWF  x29
027FE:  MOVLB  0
02800:  CALL   1C3C
02804:  MOVLW  0A
02806:  MOVLB  A
02808:  MOVWF  x29
0280A:  MOVLB  0
0280C:  CALL   1C3C
.................... 
....................     output_low(smf.cs_pin);
02810:  MOVFF  F4,A44
02814:  MOVLB  A
02816:  CLRF   x45
02818:  MOVLW  0F
0281A:  MOVWF  x47
0281C:  MOVLW  89
0281E:  MOVWF  x46
02820:  MOVLB  0
02822:  CALL   2024
02826:  MOVFF  F4,A44
0282A:  MOVLB  A
0282C:  CLRF   x45
0282E:  MOVLW  0F
02830:  MOVWF  x47
02832:  MOVLW  92
02834:  MOVWF  x46
02836:  MOVLB  0
02838:  CALL   2024
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
0283C:  MOVFF  F5,A47
02840:  MOVFF  F4,A46
02844:  MOVFF  F3,A45
02848:  MOVFF  F2,A44
0284C:  MOVLW  01
0284E:  MOVLB  A
02850:  MOVWF  x49
02852:  MOVLW  B7
02854:  MOVWF  x48
02856:  CLRF   x4B
02858:  MOVLW  01
0285A:  MOVWF  x4A
0285C:  MOVLW  01
0285E:  MOVWF  x4D
02860:  MOVLW  A3
02862:  MOVWF  x4C
02864:  CLRF   x51
02866:  CLRF   x50
02868:  CLRF   x4F
0286A:  MOVLW  14
0286C:  MOVWF  x4E
0286E:  MOVLB  0
02870:  CALL   2108
....................     output_high(smf.cs_pin);
02874:  MOVFF  F4,A44
02878:  MOVLW  01
0287A:  MOVLB  A
0287C:  MOVWF  x45
0287E:  MOVLW  0F
02880:  MOVWF  x47
02882:  MOVLW  89
02884:  MOVWF  x46
02886:  MOVLB  0
02888:  CALL   2024
0288C:  MOVFF  F4,A44
02890:  MOVLB  A
02892:  CLRF   x45
02894:  MOVLW  0F
02896:  MOVWF  x47
02898:  MOVLW  92
0289A:  MOVWF  x46
0289C:  MOVLB  0
0289E:  CALL   2024
....................     fprintf(PC, "\t[SMF]\tREAD ID:");
028A2:  MOVLW  9A
028A4:  MOVWF  FF6
028A6:  MOVLW  0E
028A8:  MOVWF  FF7
028AA:  MOVLW  00
028AC:  MOVWF  FF8
028AE:  CALL   1C8E
....................     for (unsigned int8 index = 0; index < 4; index++)
028B2:  MOVLB  1
028B4:  CLRF   xB9
028B6:  MOVLB  0
028B8:  MOVLB  1
028BA:  MOVF   xB9,W
028BC:  SUBLW  03
028BE:  BTFSC  FD8.0
028C0:  BRA    28C8
028C2:  MOVLB  0
028C4:  GOTO   2904
028C8:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
028CA:  CLRF   03
028CC:  MOVLB  1
028CE:  MOVF   xB9,W
028D0:  ADDLW  A3
028D2:  MOVWF  FE9
028D4:  MOVLW  01
028D6:  ADDWFC 03,W
028D8:  MOVWF  FEA
028DA:  MOVFF  FEF,1FA
028DE:  MOVFF  1FA,996
028E2:  MOVLW  37
028E4:  MOVLB  9
028E6:  MOVWF  x97
028E8:  MOVLB  0
028EA:  CALL   1EBC
028EE:  MOVLW  20
028F0:  MOVLB  A
028F2:  MOVWF  x29
028F4:  MOVLB  0
028F6:  CALL   1C3C
028FA:  MOVLB  1
028FC:  INCF   xB9,F
028FE:  MOVLB  0
02900:  GOTO   28B8
....................     }
....................     fprintf(PC,"\r\n");
02904:  MOVLW  0D
02906:  MOVLB  A
02908:  MOVWF  x29
0290A:  MOVLB  0
0290C:  CALL   1C3C
02910:  MOVLW  0A
02912:  MOVLB  A
02914:  MOVWF  x29
02916:  MOVLB  0
02918:  CALL   1C3C
.................... 
....................     if (!is_connect(smf)) {
0291C:  MOVFF  F5,A29
02920:  MOVFF  F4,A28
02924:  MOVFF  F3,A27
02928:  MOVFF  F2,A26
0292C:  CALL   232E
02930:  MOVF   01,F
02932:  BTFSS  FD8.2
02934:  GOTO   294C
....................         fprintf(PC, "\t[SMF]\tconnect error!\r\n");
02938:  MOVLW  AA
0293A:  MOVWF  FF6
0293C:  MOVLW  0E
0293E:  MOVWF  FF7
02940:  MOVLW  00
02942:  MOVWF  FF8
02944:  CALL   1C8E
....................         // return;
....................     }else {
02948:  GOTO   295C
....................         fprintf(PC, "\t[SMF]\tis connected\r\n");
0294C:  MOVLW  C2
0294E:  MOVWF  FF6
02950:  MOVLW  0E
02952:  MOVWF  FF7
02954:  MOVLW  00
02956:  MOVWF  FF8
02958:  CALL   1C8E
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
0295C:  MOVLW  64
0295E:  MOVLB  A
02960:  MOVWF  x3E
02962:  MOVLB  0
02964:  CALL   1C0E
....................     if (!is_connect(mis_fm)) {
02968:  MOVFF  F1,A29
0296C:  MOVFF  F0,A28
02970:  MOVFF  EF,A27
02974:  MOVFF  EE,A26
02978:  CALL   232E
0297C:  MOVF   01,F
0297E:  BTFSS  FD8.2
02980:  GOTO   2998
....................         fprintf(PC, "\t[MIS FM]connect error!\r\n");
02984:  MOVLW  D8
02986:  MOVWF  FF6
02988:  MOVLW  0E
0298A:  MOVWF  FF7
0298C:  MOVLW  00
0298E:  MOVWF  FF8
02990:  CALL   1C8E
....................     }else {
02994:  GOTO   29A8
....................         fprintf(PC, "\t[MIS FM]is connected\r\n");
02998:  MOVLW  F2
0299A:  MOVWF  FF6
0299C:  MOVLW  0E
0299E:  MOVWF  FF7
029A0:  MOVLW  00
029A2:  MOVWF  FF8
029A4:  CALL   1C8E
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
029A8:  MOVFF  F1,270
029AC:  MOVFF  F0,26F
029B0:  MOVFF  EF,26E
029B4:  MOVFF  EE,26D
029B8:  MOVLB  2
029BA:  CLRF   x74
029BC:  CLRF   x73
029BE:  CLRF   x72
029C0:  CLRF   x71
029C2:  MOVLW  01
029C4:  MOVWF  x76
029C6:  MOVLW  BA
029C8:  MOVWF  x75
029CA:  CLRF   x7A
029CC:  CLRF   x79
029CE:  CLRF   x78
029D0:  MOVLW  40
029D2:  MOVWF  x77
029D4:  MOVLB  0
029D6:  CALL   23F4
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = msb_array_to_int32(readdata, 0);
029DA:  MOVLW  01
029DC:  MOVLB  1
029DE:  MOVWF  xFB
029E0:  MOVLW  BA
029E2:  MOVWF  xFA
029E4:  CLRF   xFC
029E6:  MOVLB  0
029E8:  CALL   260C
029EC:  MOVFF  03,FF
029F0:  MOVFF  02,FE
029F4:  MOVFF  01,FD
029F8:  MOVFF  00,FC
....................     smf_piclog_loop_counter = readdata[4];
029FC:  MOVFF  1BE,100
....................     smf_meas_use_counter = msb_array_to_int32(readdata, 5);
02A00:  MOVLW  01
02A02:  MOVLB  1
02A04:  MOVWF  xFB
02A06:  MOVLW  BA
02A08:  MOVWF  xFA
02A0A:  MOVLW  05
02A0C:  MOVWF  xFC
02A0E:  MOVLB  0
02A10:  CALL   260C
02A14:  MOVFF  03,104
02A18:  MOVFF  02,103
02A1C:  MOVFF  01,102
02A20:  MOVFF  00,101
....................     smf_meas_loop_counter = readdata[9];
02A24:  MOVFF  1C3,105
....................     misf_piclog_use_counter = msb_array_to_int32(readdata, 10);
02A28:  MOVLW  01
02A2A:  MOVLB  1
02A2C:  MOVWF  xFB
02A2E:  MOVLW  BA
02A30:  MOVWF  xFA
02A32:  MOVLW  0A
02A34:  MOVWF  xFC
02A36:  MOVLB  0
02A38:  CALL   260C
02A3C:  MOVFF  03,109
02A40:  MOVFF  02,108
02A44:  MOVFF  01,107
02A48:  MOVFF  00,106
....................     misf_piclog_loop_counter = readdata[14];
02A4C:  MOVFF  1C8,10A
....................     misf_piclog_uncopyed_counter = msb_array_to_int32(readdata, 15);
02A50:  MOVLW  01
02A52:  MOVLB  1
02A54:  MOVWF  xFB
02A56:  MOVLW  BA
02A58:  MOVWF  xFA
02A5A:  MOVLW  0F
02A5C:  MOVWF  xFC
02A5E:  MOVLB  0
02A60:  CALL   260C
02A64:  MOVFF  03,10E
02A68:  MOVFF  02,10D
02A6C:  MOVFF  01,10C
02A70:  MOVFF  00,10B
....................     misf_piclog_write_counter = msb_array_to_int32(readdata, 19);
02A74:  MOVLW  01
02A76:  MOVLB  1
02A78:  MOVWF  xFB
02A7A:  MOVLW  BA
02A7C:  MOVWF  xFA
02A7E:  MOVLW  13
02A80:  MOVWF  xFC
02A82:  MOVLB  0
02A84:  CALL   260C
02A88:  MOVFF  00,10F
....................     misf_meas_use_counter = msb_array_to_int32(readdata, 23);
02A8C:  MOVLW  01
02A8E:  MOVLB  1
02A90:  MOVWF  xFB
02A92:  MOVLW  BA
02A94:  MOVWF  xFA
02A96:  MOVLW  17
02A98:  MOVWF  xFC
02A9A:  MOVLB  0
02A9C:  CALL   260C
02AA0:  MOVFF  03,113
02AA4:  MOVFF  02,112
02AA8:  MOVFF  01,111
02AAC:  MOVFF  00,110
....................     misf_meas_loop_counter = readdata[27];
02AB0:  MOVFF  1D5,114
....................     misf_meas_uncopyed_counter = msb_array_to_int32(readdata, 28);
02AB4:  MOVLW  01
02AB6:  MOVLB  1
02AB8:  MOVWF  xFB
02ABA:  MOVLW  BA
02ABC:  MOVWF  xFA
02ABE:  MOVLW  1C
02AC0:  MOVWF  xFC
02AC2:  MOVLB  0
02AC4:  CALL   260C
02AC8:  MOVFF  03,118
02ACC:  MOVFF  02,117
02AD0:  MOVFF  01,116
02AD4:  MOVFF  00,115
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02AD8:  MOVLW  0A
02ADA:  MOVWF  FF6
02ADC:  MOVLW  0F
02ADE:  MOVWF  FF7
02AE0:  MOVLW  00
02AE2:  MOVWF  FF8
02AE4:  MOVLW  28
02AE6:  MOVLB  9
02AE8:  MOVWF  x96
02AEA:  MOVLB  0
02AEC:  CALL   1CBE
02AF0:  MOVFF  FF,996
02AF4:  MOVLW  37
02AF6:  MOVLB  9
02AF8:  MOVWF  x97
02AFA:  MOVLB  0
02AFC:  CALL   1EBC
02B00:  MOVFF  FE,996
02B04:  MOVLW  37
02B06:  MOVLB  9
02B08:  MOVWF  x97
02B0A:  MOVLB  0
02B0C:  CALL   1EBC
02B10:  MOVFF  FD,996
02B14:  MOVLW  37
02B16:  MOVLB  9
02B18:  MOVWF  x97
02B1A:  MOVLB  0
02B1C:  CALL   1EBC
02B20:  MOVFF  FC,996
02B24:  MOVLW  37
02B26:  MOVLB  9
02B28:  MOVWF  x97
02B2A:  MOVLB  0
02B2C:  CALL   1EBC
02B30:  MOVLW  0D
02B32:  MOVLB  A
02B34:  MOVWF  x29
02B36:  MOVLB  0
02B38:  CALL   1C3C
02B3C:  MOVLW  0A
02B3E:  MOVLB  A
02B40:  MOVWF  x29
02B42:  MOVLB  0
02B44:  CALL   1C3C
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02B48:  MOVLW  3A
02B4A:  MOVWF  FF6
02B4C:  MOVLW  0F
02B4E:  MOVWF  FF7
02B50:  MOVLW  00
02B52:  MOVWF  FF8
02B54:  MOVLW  28
02B56:  MOVLB  9
02B58:  MOVWF  x96
02B5A:  MOVLB  0
02B5C:  CALL   1CBE
02B60:  MOVFF  100,996
02B64:  MOVLW  37
02B66:  MOVLB  9
02B68:  MOVWF  x97
02B6A:  MOVLB  0
02B6C:  CALL   1EBC
02B70:  MOVLW  0D
02B72:  MOVLB  A
02B74:  MOVWF  x29
02B76:  MOVLB  0
02B78:  CALL   1C3C
02B7C:  MOVLW  0A
02B7E:  MOVLB  A
02B80:  MOVWF  x29
02B82:  MOVLB  0
02B84:  CALL   1C3C
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
02B88:  MOVLW  6A
02B8A:  MOVWF  FF6
02B8C:  MOVLW  0F
02B8E:  MOVWF  FF7
02B90:  MOVLW  00
02B92:  MOVWF  FF8
02B94:  MOVLW  28
02B96:  MOVLB  9
02B98:  MOVWF  x96
02B9A:  MOVLB  0
02B9C:  CALL   1CBE
02BA0:  MOVFF  104,996
02BA4:  MOVLW  37
02BA6:  MOVLB  9
02BA8:  MOVWF  x97
02BAA:  MOVLB  0
02BAC:  CALL   1EBC
02BB0:  MOVFF  103,996
02BB4:  MOVLW  37
02BB6:  MOVLB  9
02BB8:  MOVWF  x97
02BBA:  MOVLB  0
02BBC:  CALL   1EBC
02BC0:  MOVFF  102,996
02BC4:  MOVLW  37
02BC6:  MOVLB  9
02BC8:  MOVWF  x97
02BCA:  MOVLB  0
02BCC:  CALL   1EBC
02BD0:  MOVFF  101,996
02BD4:  MOVLW  37
02BD6:  MOVLB  9
02BD8:  MOVWF  x97
02BDA:  MOVLB  0
02BDC:  CALL   1EBC
02BE0:  MOVLW  0D
02BE2:  MOVLB  A
02BE4:  MOVWF  x29
02BE6:  MOVLB  0
02BE8:  CALL   1C3C
02BEC:  MOVLW  0A
02BEE:  MOVLB  A
02BF0:  MOVWF  x29
02BF2:  MOVLB  0
02BF4:  CALL   1C3C
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02BF8:  MOVLW  9A
02BFA:  MOVWF  FF6
02BFC:  MOVLW  0F
02BFE:  MOVWF  FF7
02C00:  MOVLW  00
02C02:  MOVWF  FF8
02C04:  MOVLW  28
02C06:  MOVLB  9
02C08:  MOVWF  x96
02C0A:  MOVLB  0
02C0C:  CALL   1CBE
02C10:  MOVFF  105,996
02C14:  MOVLW  37
02C16:  MOVLB  9
02C18:  MOVWF  x97
02C1A:  MOVLB  0
02C1C:  CALL   1EBC
02C20:  MOVLW  0D
02C22:  MOVLB  A
02C24:  MOVWF  x29
02C26:  MOVLB  0
02C28:  CALL   1C3C
02C2C:  MOVLW  0A
02C2E:  MOVLB  A
02C30:  MOVWF  x29
02C32:  MOVLB  0
02C34:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02C38:  MOVLW  CA
02C3A:  MOVWF  FF6
02C3C:  MOVLW  0F
02C3E:  MOVWF  FF7
02C40:  MOVLW  00
02C42:  MOVWF  FF8
02C44:  MOVLW  28
02C46:  MOVLB  9
02C48:  MOVWF  x96
02C4A:  MOVLB  0
02C4C:  CALL   1CBE
02C50:  MOVFF  109,996
02C54:  MOVLW  37
02C56:  MOVLB  9
02C58:  MOVWF  x97
02C5A:  MOVLB  0
02C5C:  CALL   1EBC
02C60:  MOVFF  108,996
02C64:  MOVLW  37
02C66:  MOVLB  9
02C68:  MOVWF  x97
02C6A:  MOVLB  0
02C6C:  CALL   1EBC
02C70:  MOVFF  107,996
02C74:  MOVLW  37
02C76:  MOVLB  9
02C78:  MOVWF  x97
02C7A:  MOVLB  0
02C7C:  CALL   1EBC
02C80:  MOVFF  106,996
02C84:  MOVLW  37
02C86:  MOVLB  9
02C88:  MOVWF  x97
02C8A:  MOVLB  0
02C8C:  CALL   1EBC
02C90:  MOVLW  0D
02C92:  MOVLB  A
02C94:  MOVWF  x29
02C96:  MOVLB  0
02C98:  CALL   1C3C
02C9C:  MOVLW  0A
02C9E:  MOVLB  A
02CA0:  MOVWF  x29
02CA2:  MOVLB  0
02CA4:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02CA8:  MOVLW  FA
02CAA:  MOVWF  FF6
02CAC:  MOVLW  0F
02CAE:  MOVWF  FF7
02CB0:  MOVLW  00
02CB2:  MOVWF  FF8
02CB4:  MOVLW  28
02CB6:  MOVLB  9
02CB8:  MOVWF  x96
02CBA:  MOVLB  0
02CBC:  CALL   1CBE
02CC0:  MOVFF  10E,996
02CC4:  MOVLW  37
02CC6:  MOVLB  9
02CC8:  MOVWF  x97
02CCA:  MOVLB  0
02CCC:  CALL   1EBC
02CD0:  MOVFF  10D,996
02CD4:  MOVLW  37
02CD6:  MOVLB  9
02CD8:  MOVWF  x97
02CDA:  MOVLB  0
02CDC:  CALL   1EBC
02CE0:  MOVFF  10C,996
02CE4:  MOVLW  37
02CE6:  MOVLB  9
02CE8:  MOVWF  x97
02CEA:  MOVLB  0
02CEC:  CALL   1EBC
02CF0:  MOVFF  10B,996
02CF4:  MOVLW  37
02CF6:  MOVLB  9
02CF8:  MOVWF  x97
02CFA:  MOVLB  0
02CFC:  CALL   1EBC
02D00:  MOVLW  0D
02D02:  MOVLB  A
02D04:  MOVWF  x29
02D06:  MOVLB  0
02D08:  CALL   1C3C
02D0C:  MOVLW  0A
02D0E:  MOVLB  A
02D10:  MOVWF  x29
02D12:  MOVLB  0
02D14:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02D18:  MOVLW  2A
02D1A:  MOVWF  FF6
02D1C:  MOVLW  10
02D1E:  MOVWF  FF7
02D20:  MOVLW  00
02D22:  MOVWF  FF8
02D24:  MOVLW  28
02D26:  MOVLB  9
02D28:  MOVWF  x96
02D2A:  MOVLB  0
02D2C:  CALL   1CBE
02D30:  MOVFF  10A,996
02D34:  MOVLW  37
02D36:  MOVLB  9
02D38:  MOVWF  x97
02D3A:  MOVLB  0
02D3C:  CALL   1EBC
02D40:  MOVLW  0D
02D42:  MOVLB  A
02D44:  MOVWF  x29
02D46:  MOVLB  0
02D48:  CALL   1C3C
02D4C:  MOVLW  0A
02D4E:  MOVLB  A
02D50:  MOVWF  x29
02D52:  MOVLB  0
02D54:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02D58:  MOVLW  5A
02D5A:  MOVWF  FF6
02D5C:  MOVLW  10
02D5E:  MOVWF  FF7
02D60:  MOVLW  00
02D62:  MOVWF  FF8
02D64:  MOVLW  28
02D66:  MOVLB  9
02D68:  MOVWF  x96
02D6A:  MOVLB  0
02D6C:  CALL   1CBE
02D70:  MOVFF  10F,996
02D74:  MOVLW  37
02D76:  MOVLB  9
02D78:  MOVWF  x97
02D7A:  MOVLB  0
02D7C:  CALL   1EBC
02D80:  MOVLW  0D
02D82:  MOVLB  A
02D84:  MOVWF  x29
02D86:  MOVLB  0
02D88:  CALL   1C3C
02D8C:  MOVLW  0A
02D8E:  MOVLB  A
02D90:  MOVWF  x29
02D92:  MOVLB  0
02D94:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02D98:  MOVLW  8A
02D9A:  MOVWF  FF6
02D9C:  MOVLW  10
02D9E:  MOVWF  FF7
02DA0:  MOVLW  00
02DA2:  MOVWF  FF8
02DA4:  MOVLW  28
02DA6:  MOVLB  9
02DA8:  MOVWF  x96
02DAA:  MOVLB  0
02DAC:  CALL   1CBE
02DB0:  MOVFF  113,996
02DB4:  MOVLW  37
02DB6:  MOVLB  9
02DB8:  MOVWF  x97
02DBA:  MOVLB  0
02DBC:  CALL   1EBC
02DC0:  MOVFF  112,996
02DC4:  MOVLW  37
02DC6:  MOVLB  9
02DC8:  MOVWF  x97
02DCA:  MOVLB  0
02DCC:  CALL   1EBC
02DD0:  MOVFF  111,996
02DD4:  MOVLW  37
02DD6:  MOVLB  9
02DD8:  MOVWF  x97
02DDA:  MOVLB  0
02DDC:  CALL   1EBC
02DE0:  MOVFF  110,996
02DE4:  MOVLW  37
02DE6:  MOVLB  9
02DE8:  MOVWF  x97
02DEA:  MOVLB  0
02DEC:  CALL   1EBC
02DF0:  MOVLW  0D
02DF2:  MOVLB  A
02DF4:  MOVWF  x29
02DF6:  MOVLB  0
02DF8:  CALL   1C3C
02DFC:  MOVLW  0A
02DFE:  MOVLB  A
02E00:  MOVWF  x29
02E02:  MOVLB  0
02E04:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02E08:  MOVLW  BA
02E0A:  MOVWF  FF6
02E0C:  MOVLW  10
02E0E:  MOVWF  FF7
02E10:  MOVLW  00
02E12:  MOVWF  FF8
02E14:  MOVLW  28
02E16:  MOVLB  9
02E18:  MOVWF  x96
02E1A:  MOVLB  0
02E1C:  CALL   1CBE
02E20:  MOVFF  118,996
02E24:  MOVLW  37
02E26:  MOVLB  9
02E28:  MOVWF  x97
02E2A:  MOVLB  0
02E2C:  CALL   1EBC
02E30:  MOVFF  117,996
02E34:  MOVLW  37
02E36:  MOVLB  9
02E38:  MOVWF  x97
02E3A:  MOVLB  0
02E3C:  CALL   1EBC
02E40:  MOVFF  116,996
02E44:  MOVLW  37
02E46:  MOVLB  9
02E48:  MOVWF  x97
02E4A:  MOVLB  0
02E4C:  CALL   1EBC
02E50:  MOVFF  115,996
02E54:  MOVLW  37
02E56:  MOVLB  9
02E58:  MOVWF  x97
02E5A:  MOVLB  0
02E5C:  CALL   1EBC
02E60:  MOVLW  0D
02E62:  MOVLB  A
02E64:  MOVWF  x29
02E66:  MOVLB  0
02E68:  CALL   1C3C
02E6C:  MOVLW  0A
02E6E:  MOVLB  A
02E70:  MOVWF  x29
02E72:  MOVLB  0
02E74:  CALL   1C3C
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
02E78:  MOVLW  EA
02E7A:  MOVWF  FF6
02E7C:  MOVLW  10
02E7E:  MOVWF  FF7
02E80:  MOVLW  00
02E82:  MOVWF  FF8
02E84:  MOVLW  28
02E86:  MOVLB  9
02E88:  MOVWF  x96
02E8A:  MOVLB  0
02E8C:  CALL   1CBE
02E90:  MOVFF  114,996
02E94:  MOVLW  37
02E96:  MOVLB  9
02E98:  MOVWF  x97
02E9A:  MOVLB  0
02E9C:  CALL   1EBC
02EA0:  MOVLW  0D
02EA2:  MOVLB  A
02EA4:  MOVWF  x29
02EA6:  MOVLB  0
02EA8:  CALL   1C3C
02EAC:  MOVLW  0A
02EAE:  MOVLB  A
02EB0:  MOVWF  x29
02EB2:  MOVLB  0
02EB4:  CALL   1C3C
....................     fprintf(PC, "\tComplete\r\n");
02EB8:  MOVLW  1A
02EBA:  MOVWF  FF6
02EBC:  MOVLW  11
02EBE:  MOVWF  FF7
02EC0:  MOVLW  00
02EC2:  MOVWF  FF8
02EC4:  CALL   1C8E
02EC8:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
05C60:  GOTO   5DE6 (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
038AC:  MOVFF  F1,A29
038B0:  MOVFF  F0,A28
038B4:  MOVFF  EF,A27
038B8:  MOVFF  EE,A26
038BC:  CALL   232E
038C0:  MOVF   01,F
038C2:  BTFSS  FD8.2
038C4:  GOTO   38DC
....................         fprintf(PC, "Mission Flash is not connected\r\n");
038C8:  MOVLW  26
038CA:  MOVWF  FF6
038CC:  MOVLW  11
038CE:  MOVWF  FF7
038D0:  MOVLW  00
038D2:  MOVWF  FF8
038D4:  CALL   1C8E
....................         return;
038D8:  GOTO   3B8A
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
038DC:  MOVLB  9
038DE:  CLRF   xE6
038E0:  CLRF   xE7
038E2:  CLRF   xE8
038E4:  CLRF   xE9
038E6:  CLRF   xEA
038E8:  CLRF   xEB
038EA:  CLRF   xEC
038EC:  CLRF   xED
038EE:  CLRF   xEE
038F0:  CLRF   xEF
038F2:  CLRF   xF0
038F4:  CLRF   xF1
038F6:  CLRF   xF2
038F8:  CLRF   xF3
038FA:  CLRF   xF4
038FC:  CLRF   xF5
038FE:  CLRF   xF6
03900:  CLRF   xF7
03902:  CLRF   xF8
03904:  CLRF   xF9
03906:  CLRF   xFA
03908:  CLRF   xFB
0390A:  CLRF   xFC
0390C:  CLRF   xFD
0390E:  CLRF   xFE
03910:  CLRF   xFF
03912:  MOVLB  A
03914:  CLRF   x00
03916:  CLRF   x01
03918:  CLRF   x02
0391A:  CLRF   x03
0391C:  CLRF   x04
0391E:  CLRF   x05
03920:  CLRF   x06
03922:  CLRF   x07
03924:  CLRF   x08
03926:  CLRF   x09
03928:  CLRF   x0A
0392A:  CLRF   x0B
0392C:  CLRF   x0C
0392E:  CLRF   x0D
03930:  CLRF   x0E
03932:  CLRF   x0F
03934:  CLRF   x10
03936:  CLRF   x11
03938:  CLRF   x12
0393A:  CLRF   x13
0393C:  CLRF   x14
0393E:  CLRF   x15
03940:  CLRF   x16
03942:  CLRF   x17
03944:  CLRF   x18
03946:  CLRF   x19
03948:  CLRF   x1A
0394A:  CLRF   x1B
0394C:  CLRF   x1C
0394E:  CLRF   x1D
03950:  CLRF   x1E
03952:  CLRF   x1F
03954:  CLRF   x20
03956:  CLRF   x21
03958:  CLRF   x22
0395A:  CLRF   x23
0395C:  CLRF   x24
0395E:  CLRF   x25
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
03960:  MOVFF  FF,A27
03964:  CLRF   x28
03966:  CLRF   x29
03968:  CLRF   x2A
0396A:  MOVF   x27,W
0396C:  MOVLB  9
0396E:  MOVWF  xE6
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
03970:  MOVFF  FE,A27
03974:  MOVFF  FF,A28
03978:  MOVLB  A
0397A:  CLRF   x29
0397C:  CLRF   x2A
0397E:  MOVF   x27,W
03980:  MOVLB  9
03982:  MOVWF  xE7
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03984:  MOVFF  FD,A27
03988:  MOVFF  FE,A28
0398C:  MOVFF  FF,A29
03990:  MOVLB  A
03992:  CLRF   x2A
03994:  MOVF   x27,W
03996:  MOVLB  9
03998:  MOVWF  xE8
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
0399A:  MOVLB  0
0399C:  MOVF   xFC,W
0399E:  MOVLB  9
039A0:  MOVWF  xE9
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
039A2:  MOVFF  100,9EA
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
039A6:  MOVFF  104,A27
039AA:  MOVLB  A
039AC:  CLRF   x28
039AE:  CLRF   x29
039B0:  CLRF   x2A
039B2:  MOVF   x27,W
039B4:  MOVLB  9
039B6:  MOVWF  xEB
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
039B8:  MOVFF  103,A27
039BC:  MOVFF  104,A28
039C0:  MOVLB  A
039C2:  CLRF   x29
039C4:  CLRF   x2A
039C6:  MOVF   x27,W
039C8:  MOVLB  9
039CA:  MOVWF  xEC
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
039CC:  MOVFF  102,A27
039D0:  MOVFF  103,A28
039D4:  MOVFF  104,A29
039D8:  MOVLB  A
039DA:  CLRF   x2A
039DC:  MOVF   x27,W
039DE:  MOVLB  9
039E0:  MOVWF  xED
....................     writedata[8] = smf_meas_use_counter & 0xFF;
039E2:  MOVLB  1
039E4:  MOVF   x01,W
039E6:  MOVLB  9
039E8:  MOVWF  xEE
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
039EA:  MOVFF  105,9EF
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
039EE:  MOVFF  109,A27
039F2:  MOVLB  A
039F4:  CLRF   x28
039F6:  CLRF   x29
039F8:  CLRF   x2A
039FA:  MOVF   x27,W
039FC:  MOVLB  9
039FE:  MOVWF  xF0
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03A00:  MOVFF  108,A27
03A04:  MOVFF  109,A28
03A08:  MOVLB  A
03A0A:  CLRF   x29
03A0C:  CLRF   x2A
03A0E:  MOVF   x27,W
03A10:  MOVLB  9
03A12:  MOVWF  xF1
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03A14:  MOVFF  107,A27
03A18:  MOVFF  108,A28
03A1C:  MOVFF  109,A29
03A20:  MOVLB  A
03A22:  CLRF   x2A
03A24:  MOVF   x27,W
03A26:  MOVLB  9
03A28:  MOVWF  xF2
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
03A2A:  MOVLB  1
03A2C:  MOVF   x06,W
03A2E:  MOVLB  9
03A30:  MOVWF  xF3
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03A32:  MOVFF  10A,9F4
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03A36:  MOVFF  10E,A27
03A3A:  MOVLB  A
03A3C:  CLRF   x28
03A3E:  CLRF   x29
03A40:  CLRF   x2A
03A42:  MOVF   x27,W
03A44:  MOVLB  9
03A46:  MOVWF  xF5
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
03A48:  MOVFF  10D,A27
03A4C:  MOVFF  10E,A28
03A50:  MOVLB  A
03A52:  CLRF   x29
03A54:  CLRF   x2A
03A56:  MOVF   x27,W
03A58:  MOVLB  9
03A5A:  MOVWF  xF6
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
03A5C:  MOVFF  10C,A27
03A60:  MOVFF  10D,A28
03A64:  MOVFF  10E,A29
03A68:  MOVLB  A
03A6A:  CLRF   x2A
03A6C:  MOVF   x27,W
03A6E:  MOVLB  9
03A70:  MOVWF  xF7
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
03A72:  MOVLB  1
03A74:  MOVF   x0B,W
03A76:  MOVLB  9
03A78:  MOVWF  xF8
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
03A7A:  MOVLW  00
03A7C:  MOVWF  xF9
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
03A7E:  MOVLW  00
03A80:  MOVWF  xFA
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03A82:  MOVLW  00
03A84:  MOVWF  xFB
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03A86:  MOVLB  1
03A88:  MOVF   x0F,W
03A8A:  MOVLB  9
03A8C:  MOVWF  xFC
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
03A8E:  MOVFF  113,A27
03A92:  MOVLB  A
03A94:  CLRF   x28
03A96:  CLRF   x29
03A98:  CLRF   x2A
03A9A:  MOVF   x27,W
03A9C:  MOVLB  9
03A9E:  MOVWF  xFD
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
03AA0:  MOVFF  112,A27
03AA4:  MOVFF  113,A28
03AA8:  MOVLB  A
03AAA:  CLRF   x29
03AAC:  CLRF   x2A
03AAE:  MOVF   x27,W
03AB0:  MOVLB  9
03AB2:  MOVWF  xFE
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03AB4:  MOVFF  111,A27
03AB8:  MOVFF  112,A28
03ABC:  MOVFF  113,A29
03AC0:  MOVLB  A
03AC2:  CLRF   x2A
03AC4:  MOVF   x27,W
03AC6:  MOVLB  9
03AC8:  MOVWF  xFF
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03ACA:  MOVLB  1
03ACC:  MOVF   x10,W
03ACE:  MOVLB  A
03AD0:  MOVWF  x00
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03AD2:  MOVFF  114,A01
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03AD6:  MOVFF  118,A27
03ADA:  CLRF   x28
03ADC:  CLRF   x29
03ADE:  CLRF   x2A
03AE0:  MOVF   x27,W
03AE2:  MOVWF  x02
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03AE4:  MOVFF  117,A27
03AE8:  MOVFF  118,A28
03AEC:  CLRF   x29
03AEE:  CLRF   x2A
03AF0:  MOVF   x27,W
03AF2:  MOVWF  x03
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03AF4:  MOVFF  116,A27
03AF8:  MOVFF  117,A28
03AFC:  MOVFF  118,A29
03B00:  CLRF   x2A
03B02:  MOVF   x27,W
03B04:  MOVWF  x04
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03B06:  MOVLB  1
03B08:  MOVF   x15,W
03B0A:  MOVLB  A
03B0C:  MOVWF  x05
.................... 
....................     if (!is_connect(mis_fm)) {
03B0E:  MOVFF  F1,A29
03B12:  MOVFF  F0,A28
03B16:  MOVFF  EF,A27
03B1A:  MOVFF  EE,A26
03B1E:  MOVLB  0
03B20:  CALL   232E
03B24:  MOVF   01,F
03B26:  BTFSS  FD8.2
03B28:  GOTO   3B3C
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03B2C:  MOVLW  48
03B2E:  MOVWF  FF6
03B30:  MOVLW  11
03B32:  MOVWF  FF7
03B34:  MOVLW  00
03B36:  MOVWF  FF8
03B38:  CALL   1C8E
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03B3C:  MOVFF  F1,A29
03B40:  MOVFF  F0,A28
03B44:  MOVFF  EF,A27
03B48:  MOVFF  EE,A26
03B4C:  MOVLB  A
03B4E:  CLRF   x2D
03B50:  CLRF   x2C
03B52:  CLRF   x2B
03B54:  CLRF   x2A
03B56:  MOVLB  0
03B58:  CALL   3554
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
03B5C:  MOVFF  F1,A29
03B60:  MOVFF  F0,A28
03B64:  MOVFF  EF,A27
03B68:  MOVFF  EE,A26
03B6C:  MOVLB  A
03B6E:  CLRF   x2D
03B70:  CLRF   x2C
03B72:  CLRF   x2B
03B74:  CLRF   x2A
03B76:  MOVLW  09
03B78:  MOVWF  x2F
03B7A:  MOVLW  E6
03B7C:  MOVWF  x2E
03B7E:  CLRF   x31
03B80:  MOVLW  40
03B82:  MOVWF  x30
03B84:  MOVLB  0
03B86:  CALL   31D0
03B8A:  RETURN 0
....................     //fprintf(PC, "Write MISF Address Area Complete\r\n");
.................... 
.................... }
.................... 
.................... void add_smf_queue(unsigned int8 mission_id)
.................... {
....................     SmfDataStruct data;
....................     MissionTypeStruct mis_struct = getMissionTypeStruct(mission_id);
....................     data.func_type = SMF_WRITE;
....................     data.mission_id = mission_id;
....................     data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................     data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
.................... 
....................     enqueue_smf_data(&data);
.................... }
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     // #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../../../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_smf.h"
.................... 
.................... #define PACKET_SIZE 64  // パケットサイズ定義
.................... 
.................... 
.................... 
.................... void smf_write(SmfDataStruct *smf_data);
.................... void smf_read(SmfDataStruct *smf_data);
.................... void smf_erase(SmfDataStruct *smf_data);
.................... 
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... //
.................... typedef struct {
....................     SMF_PARTITION meas;
....................     SMF_PARTITION piclog;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数
.................... void set_meas_used_size_msb(int32 value);
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_meas_used_size_msb(void);
.................... int32 get_piclog_used_size_msb(void);
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
08A96:  MOVLB  1
08A98:  MOVF   x5C,W
08A9A:  MOVWF  FE9
08A9C:  MOVF   x5D,W
08A9E:  MOVWF  FEA
08AA0:  MOVFF  FEF,15E
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
08AA4:  MOVLW  6A
08AA6:  MOVWF  FF6
08AA8:  MOVLW  11
08AAA:  MOVWF  FF7
08AAC:  MOVLW  00
08AAE:  MOVWF  FF8
08AB0:  MOVLB  0
08AB2:  CALL   1C8E
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
08AB6:  MOVLW  B0
08AB8:  MOVWF  FF6
08ABA:  MOVLW  11
08ABC:  MOVWF  FF7
08ABE:  MOVLW  00
08AC0:  MOVWF  FF8
08AC2:  MOVLW  0C
08AC4:  MOVLB  9
08AC6:  MOVWF  x96
08AC8:  MOVLB  0
08ACA:  CALL   1CBE
08ACE:  MOVFF  15E,996
08AD2:  MOVLW  37
08AD4:  MOVLB  9
08AD6:  MOVWF  x97
08AD8:  MOVLB  0
08ADA:  CALL   1EBC
08ADE:  MOVLW  BE
08AE0:  MOVWF  FF6
08AE2:  MOVLW  11
08AE4:  MOVWF  FF7
08AE6:  MOVLW  00
08AE8:  MOVWF  FF8
08AEA:  MOVLW  04
08AEC:  MOVLB  9
08AEE:  MOVWF  x96
08AF0:  MOVLB  0
08AF2:  CALL   1CBE
....................    switch(command_id)
08AF6:  MOVLB  1
08AF8:  MOVF   x5E,W
08AFA:  XORLW  10
08AFC:  MOVLB  0
08AFE:  BTFSC  FD8.2
08B00:  GOTO   8BB0
08B04:  XORLW  01
08B06:  BTFSC  FD8.2
08B08:  GOTO   8BB4
08B0C:  XORLW  03
08B0E:  BTFSC  FD8.2
08B10:  GOTO   8BB8
08B14:  XORLW  13
08B16:  BTFSC  FD8.2
08B18:  GOTO   8BBC
08B1C:  XORLW  12
08B1E:  BTFSC  FD8.2
08B20:  GOTO   8BC0
08B24:  XORLW  93
08B26:  BTFSC  FD8.2
08B28:  GOTO   8BC4
08B2C:  XORLW  01
08B2E:  BTFSC  FD8.2
08B30:  GOTO   8BD4
08B34:  XORLW  03
08B36:  BTFSC  FD8.2
08B38:  GOTO   8BE4
08B3C:  XORLW  01
08B3E:  BTFSC  FD8.2
08B40:  GOTO   8BF4
08B44:  XORLW  07
08B46:  BTFSC  FD8.2
08B48:  GOTO   8C04
08B4C:  XORLW  01
08B4E:  BTFSC  FD8.2
08B50:  GOTO   8C14
08B54:  XORLW  03
08B56:  BTFSC  FD8.2
08B58:  GOTO   8C24
08B5C:  XORLW  01
08B5E:  BTFSC  FD8.2
08B60:  GOTO   8C34
08B64:  XORLW  0F
08B66:  BTFSC  FD8.2
08B68:  GOTO   8C44
08B6C:  XORLW  18
08B6E:  BTFSC  FD8.2
08B70:  GOTO   8C54
08B74:  XORLW  01
08B76:  BTFSC  FD8.2
08B78:  GOTO   8C64
08B7C:  XORLW  03
08B7E:  BTFSC  FD8.2
08B80:  GOTO   8C74
08B84:  XORLW  01
08B86:  BTFSC  FD8.2
08B88:  GOTO   8C84
08B8C:  XORLW  07
08B8E:  BTFSC  FD8.2
08B90:  GOTO   8C94
08B94:  XORLW  01
08B96:  BTFSC  FD8.2
08B98:  GOTO   8CA4
08B9C:  XORLW  03
08B9E:  BTFSC  FD8.2
08BA0:  GOTO   8CB4
08BA4:  XORLW  36
08BA6:  BTFSC  FD8.2
08BA8:  GOTO   8CC4
08BAC:  GOTO   8CD4
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
08BB0:  GOTO   8CE4
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
08BB4:  GOTO   8CE4
....................       case 0x12:
....................          // test_adc();
....................          break;
08BB8:  GOTO   8CE4
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
08BBC:  GOTO   8CE4
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
08BC0:  GOTO   8CE4
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
08BC4:  MOVFF  15D,162
08BC8:  MOVFF  15C,161
08BCC:  CALL   4780
....................          break;
08BD0:  GOTO   8CE4
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
08BD4:  MOVFF  15D,160
08BD8:  MOVFF  15C,15F
08BDC:  GOTO   4848
....................          break;
08BE0:  GOTO   8CE4
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
08BE4:  MOVFF  15D,160
08BE8:  MOVFF  15C,15F
08BEC:  GOTO   49E2
....................          break;
08BF0:  GOTO   8CE4
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
08BF4:  MOVFF  15D,160
08BF8:  MOVFF  15C,15F
08BFC:  GOTO   4B78
....................          break;
08C00:  GOTO   8CE4
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
08C04:  MOVFF  15D,160
08C08:  MOVFF  15C,15F
08C0C:  GOTO   4CEE
....................          break;
08C10:  GOTO   8CE4
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
08C14:  MOVFF  15D,160
08C18:  MOVFF  15C,15F
08C1C:  GOTO   50EE
....................          break;
08C20:  GOTO   8CE4
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
08C24:  MOVFF  15D,160
08C28:  MOVFF  15C,15F
08C2C:  GOTO   53AC
....................          break;
08C30:  GOTO   8CE4
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
08C34:  MOVFF  15D,160
08C38:  MOVFF  15C,15F
08C3C:  GOTO   5836
....................          break;
08C40:  GOTO   8CE4
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
08C44:  MOVFF  15D,160
08C48:  MOVFF  15C,15F
08C4C:  GOTO   5A5A
....................          break;
08C50:  GOTO   8CE4
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
08C54:  MOVFF  15D,160
08C58:  MOVFF  15C,15F
08C5C:  GOTO   5AB4
....................          break;
08C60:  GOTO   8CE4
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
08C64:  MOVFF  15D,160
08C68:  MOVFF  15C,15F
08C6C:  GOTO   5B84
....................          break;
08C70:  GOTO   8CE4
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
08C74:  MOVFF  15D,160
08C78:  MOVFF  15C,15F
08C7C:  GOTO   5BF8
....................          break;
08C80:  GOTO   8CE4
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
08C84:  MOVFF  15D,160
08C88:  MOVFF  15C,15F
08C8C:  CALL   5C64
....................          break;
08C90:  GOTO   8CE4
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
08C94:  MOVFF  15D,160
08C98:  MOVFF  15C,15F
08C9C:  GOTO   5E16
....................          break;
08CA0:  GOTO   8CE4
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
08CA4:  MOVFF  15D,160
08CA8:  MOVFF  15C,15F
08CAC:  GOTO   6200
....................          break;
08CB0:  GOTO   8CE4
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
08CB4:  MOVFF  15D,160
08CB8:  MOVFF  15C,15F
08CBC:  CALL   5C64
....................          break;
08CC0:  GOTO   8CE4
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
08CC4:  MOVFF  15D,160
08CC8:  MOVFF  15C,15F
08CCC:  GOTO   86B2
....................          break;
08CD0:  GOTO   8CE4
....................             
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
08CD4:  MOVLW  C4
08CD6:  MOVWF  FF6
08CD8:  MOVLW  11
08CDA:  MOVWF  FF7
08CDC:  MOVLW  00
08CDE:  MOVWF  FF8
08CE0:  CALL   1C8E
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
08CE4:  MOVLW  DC
08CE6:  MOVWF  FF6
08CE8:  MOVLW  11
08CEA:  MOVWF  FF7
08CEC:  MOVLW  00
08CEE:  MOVWF  FF8
08CF0:  CALL   1C8E
08CF4:  GOTO   8D5A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0AD1C:  MOVLW  22
0AD1E:  MOVWF  FF6
0AD20:  MOVLW  12
0AD22:  MOVWF  FF7
0AD24:  MOVLW  00
0AD26:  MOVWF  FF8
0AD28:  CALL   1C8E
....................    
....................    switch(command->frame_id)
0AD2C:  MOVLB  1
0AD2E:  MOVF   x56,W
0AD30:  MOVWF  FE9
0AD32:  MOVF   x57,W
0AD34:  MOVWF  FEA
0AD36:  MOVF   FEF,W
0AD38:  XORLW  00
0AD3A:  MOVLB  0
0AD3C:  BTFSC  FD8.2
0AD3E:  GOTO   AD56
0AD42:  XORLW  01
0AD44:  BTFSC  FD8.2
0AD46:  GOTO   AD66
0AD4A:  XORLW  03
0AD4C:  BTFSC  FD8.2
0AD4E:  GOTO   AD86
0AD52:  GOTO   AD96
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0AD56:  MOVFF  157,159
0AD5A:  MOVFF  156,158
0AD5E:  GOTO   8D0E
....................          break;
0AD62:  GOTO   AD96
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0AD66:  MOVFF  157,159
0AD6A:  MOVFF  156,158
0AD6E:  GOTO   8D90
0AD72:  MOVF   01,F
0AD74:  BTFSC  FD8.2
0AD76:  GOTO   AD82
....................             return TRUE; // if status is finished, return TRUE
0AD7A:  MOVLW  01
0AD7C:  MOVWF  01
0AD7E:  GOTO   AD9A
....................          }        
....................          break;
0AD82:  GOTO   AD96
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0AD86:  MOVFF  157,159
0AD8A:  MOVFF  156,158
0AD8E:  GOTO   AAE4
....................          break;
0AD92:  GOTO   AD96
....................    }
....................    return FALSE;
0AD96:  MOVLW  00
0AD98:  MOVWF  01
0AD9A:  GOTO   B1CA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
08D0E:  MOVLW  3A
08D10:  MOVWF  FF6
08D12:  MOVLW  12
08D14:  MOVWF  FF7
08D16:  MOVLW  00
08D18:  MOVWF  FF8
08D1A:  CALL   1C8E
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
08D1E:  MOVLW  50
08D20:  MOVWF  FF6
08D22:  MOVLW  12
08D24:  MOVWF  FF7
08D26:  MOVLW  00
08D28:  MOVWF  FF8
08D2A:  CALL   1C8E
....................    transmit_ack();
08D2E:  CALL   4410
.................... 
....................    status[0] = EXECUTING_MISSION;
08D32:  MOVLW  02
08D34:  MOVWF  48
....................    execute_mission(command->content);
08D36:  MOVLW  03
08D38:  MOVLB  1
08D3A:  ADDWF  x58,W
08D3C:  MOVWF  01
08D3E:  MOVLW  00
08D40:  ADDWFC x59,W
08D42:  MOVWF  03
08D44:  MOVF   01,W
08D46:  MOVWF  x5A
08D48:  MOVFF  03,15B
08D4C:  MOVFF  15B,15D
08D50:  MOVFF  15A,15C
08D54:  MOVLB  0
08D56:  GOTO   8A96
....................    if (is_empty_smf_data())
08D5A:  CALL   8CF8
08D5E:  MOVF   01,F
08D60:  BTFSC  FD8.2
08D62:  GOTO   8D6E
....................       status[0] = FINISHED;
08D66:  MOVLW  06
08D68:  MOVWF  48
08D6A:  GOTO   8D72
....................    else
....................       status[0] = SMF_USE_REQ;
08D6E:  MOVLW  04
08D70:  MOVWF  48
08D72:  GOTO   AD62 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
08D90:  MOVLW  6A
08D92:  MOVWF  FF6
08D94:  MOVLW  12
08D96:  MOVWF  FF7
08D98:  MOVLW  00
08D9A:  MOVWF  FF8
08D9C:  CALL   1C8E
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
08DA0:  MOVLW  7E
08DA2:  MOVWF  FF6
08DA4:  MOVLW  12
08DA6:  MOVWF  FF7
08DA8:  MOVLW  00
08DAA:  MOVWF  FF8
08DAC:  CALL   1C8E
....................    transmit_status();
08DB0:  GOTO   8D76
....................    if (status[0] == FINISHED)
08DB4:  MOVF   48,W
08DB6:  SUBLW  06
08DB8:  BTFSS  FD8.2
08DBA:  GOTO   8DDA
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
08DBE:  MOVLW  9C
08DC0:  MOVWF  FF6
08DC2:  MOVLW  12
08DC4:  MOVWF  FF7
08DC6:  MOVLW  00
08DC8:  MOVWF  FF8
08DCA:  CALL   1C8E
....................       return TRUE;
08DCE:  MOVLW  01
08DD0:  MOVWF  01
08DD2:  GOTO   8DE2
....................    }
08DD6:  GOTO   8DE2
....................    else{
....................       return FALSE;
08DDA:  MOVLW  00
08DDC:  MOVWF  01
08DDE:  GOTO   8DE2
....................    }
08DE2:  GOTO   AD72 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................    fprintf(PC, "\t-> SMF available check\r\n");
*
0AAE4:  MOVLW  B8
0AAE6:  MOVWF  FF6
0AAE8:  MOVLW  12
0AAEA:  MOVWF  FF7
0AAEC:  MOVLW  00
0AAEE:  MOVWF  FF8
0AAF0:  CALL   1C8E
....................    fprintf(PC, "\t   Transmit Acknowledgement\r\n");
0AAF4:  MOVLW  D2
0AAF6:  MOVWF  FF6
0AAF8:  MOVLW  12
0AAFA:  MOVWF  FF7
0AAFC:  MOVLW  00
0AAFE:  MOVWF  FF8
0AB00:  CALL   1C8E
....................    transmit_ack();
0AB04:  CALL   4410
....................    
....................    if (command->content[0] == ALLOW) {
0AB08:  MOVLW  03
0AB0A:  MOVLB  1
0AB0C:  ADDWF  x58,W
0AB0E:  MOVWF  FE9
0AB10:  MOVLW  00
0AB12:  ADDWFC x59,W
0AB14:  MOVWF  FEA
0AB16:  DECFSZ FEF,W
0AB18:  BRA    AB1E
0AB1A:  BRA    AB24
0AB1C:  MOVLB  0
0AB1E:  MOVLB  0
0AB20:  GOTO   AD08
0AB24:  MOVLB  0
....................       fprintf(PC, "\t\t-> allowed\r\n");
0AB26:  MOVLW  F2
0AB28:  MOVWF  FF6
0AB2A:  MOVLW  12
0AB2C:  MOVWF  FF7
0AB2E:  MOVLW  00
0AB30:  MOVWF  FF8
0AB32:  CALL   1C8E
....................       status[0] = COPYING;
0AB36:  MOVLW  05
0AB38:  MOVWF  48
.................... 
....................       // キューが空になるまでループ処理
....................       int8 processed_count = 0;
0AB3A:  MOVLB  1
0AB3C:  CLRF   x5A
0AB3E:  MOVLB  0
....................       while (!is_empty_smf_data()) {
0AB40:  CALL   8CF8
0AB44:  MOVF   01,F
0AB46:  BTFSS  FD8.2
0AB48:  GOTO   ACC0
....................          fprintf(PC, "\t\t-> Processing SMF data [%d]\r\n", processed_count);
0AB4C:  MOVLW  02
0AB4E:  MOVWF  FF6
0AB50:  MOVLW  13
0AB52:  MOVWF  FF7
0AB54:  MOVLW  00
0AB56:  MOVWF  FF8
0AB58:  MOVLW  1A
0AB5A:  MOVLB  9
0AB5C:  MOVWF  x96
0AB5E:  MOVLB  0
0AB60:  CALL   1CBE
0AB64:  MOVFF  15A,26E
0AB68:  MOVLW  18
0AB6A:  MOVLB  2
0AB6C:  MOVWF  x6F
0AB6E:  MOVLB  0
0AB70:  CALL   8DE6
0AB74:  MOVLW  1E
0AB76:  MOVWF  FF6
0AB78:  MOVLW  13
0AB7A:  MOVWF  FF7
0AB7C:  MOVLW  00
0AB7E:  MOVWF  FF8
0AB80:  MOVLW  03
0AB82:  MOVLB  9
0AB84:  MOVWF  x96
0AB86:  MOVLB  0
0AB88:  CALL   1CBE
....................          
....................          SmfDataStruct *smf_data = dequeue_smf_data();
0AB8C:  GOTO   8EF4
0AB90:  MOVFF  02,15C
0AB94:  MOVFF  01,15B
....................          if (smf_data != 0x00) {
0AB98:  MOVLB  1
0AB9A:  MOVF   x5B,F
0AB9C:  BTFSC  FD8.2
0AB9E:  BRA    ABA6
0ABA0:  MOVLB  0
0ABA2:  GOTO   ABB8
0ABA6:  MOVLB  0
0ABA8:  MOVLB  1
0ABAA:  MOVF   x5C,F
0ABAC:  BTFSS  FD8.2
0ABAE:  BRA    ABB6
0ABB0:  MOVLB  0
0ABB2:  GOTO   ACA8
0ABB6:  MOVLB  0
....................             int8 func_type = smf_data->func_type;
0ABB8:  MOVLW  09
0ABBA:  MOVLB  1
0ABBC:  ADDWF  x5B,W
0ABBE:  MOVWF  FE9
0ABC0:  MOVLW  00
0ABC2:  ADDWFC x5C,W
0ABC4:  MOVWF  FEA
0ABC6:  MOVFF  FEF,15D
0ABCA:  MOVLB  0
....................             fprintf(PC, "func type : 0x%02X",func_type);
0ABCC:  MOVLW  22
0ABCE:  MOVWF  FF6
0ABD0:  MOVLW  13
0ABD2:  MOVWF  FF7
0ABD4:  MOVLW  00
0ABD6:  MOVWF  FF8
0ABD8:  MOVLW  0E
0ABDA:  MOVLB  9
0ABDC:  MOVWF  x96
0ABDE:  MOVLB  0
0ABE0:  CALL   1CBE
0ABE4:  MOVFF  15D,996
0ABE8:  MOVLW  37
0ABEA:  MOVLB  9
0ABEC:  MOVWF  x97
0ABEE:  MOVLB  0
0ABF0:  CALL   1EBC
....................             if (func_type == 0x00) {  // SMF_WRITE
0ABF4:  MOVLB  1
0ABF6:  MOVF   x5D,F
0ABF8:  BTFSC  FD8.2
0ABFA:  BRA    AC02
0ABFC:  MOVLB  0
0ABFE:  GOTO   AC20
0AC02:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF WRITE (single)\r\n");
0AC04:  MOVLW  36
0AC06:  MOVWF  FF6
0AC08:  MOVLW  13
0AC0A:  MOVWF  FF7
0AC0C:  MOVLW  00
0AC0E:  MOVWF  FF8
0AC10:  CALL   1C8E
....................                smf_write(smf_data);
0AC14:  MOVFF  15C,148
0AC18:  MOVFF  15B,147
0AC1C:  GOTO   96F2
....................             }
....................             if (func_type == 0x01) {  // SMF_READ
0AC20:  MOVLB  1
0AC22:  DECFSZ x5D,W
0AC24:  BRA    AC2A
0AC26:  BRA    AC30
0AC28:  MOVLB  0
0AC2A:  MOVLB  0
0AC2C:  GOTO   AC4E
0AC30:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF READ (single)\r\n");
0AC32:  MOVLW  5A
0AC34:  MOVWF  FF6
0AC36:  MOVLW  13
0AC38:  MOVWF  FF7
0AC3A:  MOVLW  00
0AC3C:  MOVWF  FF8
0AC3E:  CALL   1C8E
....................                smf_read(smf_data);
0AC42:  MOVFF  15C,15F
0AC46:  MOVFF  15B,15E
0AC4A:  GOTO   A11E
....................             }
.................... 
....................             if (func_type == 0x02) {  // SMF_ERASE
0AC4E:  MOVLB  1
0AC50:  MOVF   x5D,W
0AC52:  SUBLW  02
0AC54:  BTFSC  FD8.2
0AC56:  BRA    AC5E
0AC58:  MOVLB  0
0AC5A:  GOTO   AC7C
0AC5E:  MOVLB  0
....................                fprintf(PC, "\t\t-> Executing SMF ERASE (single)\r\n");
0AC60:  MOVLW  7E
0AC62:  MOVWF  FF6
0AC64:  MOVLW  13
0AC66:  MOVWF  FF7
0AC68:  MOVLW  00
0AC6A:  MOVWF  FF8
0AC6C:  CALL   1C8E
....................                smf_erase(smf_data);
0AC70:  MOVFF  15C,15F
0AC74:  MOVFF  15B,15E
0AC78:  GOTO   A4BA
....................             }
....................             if (func_type > 2) {
0AC7C:  MOVLB  1
0AC7E:  MOVF   x5D,W
0AC80:  SUBLW  02
0AC82:  BTFSS  FD8.0
0AC84:  BRA    AC8C
0AC86:  MOVLB  0
0AC88:  GOTO   AC9E
0AC8C:  MOVLB  0
....................                fprintf(PC, "\t\t-> Unknown SMF function type\r\n");
0AC8E:  MOVLW  A2
0AC90:  MOVWF  FF6
0AC92:  MOVLW  13
0AC94:  MOVWF  FF7
0AC96:  MOVLW  00
0AC98:  MOVWF  FF8
0AC9A:  CALL   1C8E
....................             }
....................             processed_count++;
0AC9E:  MOVLB  1
0ACA0:  INCF   x5A,F
0ACA2:  MOVLB  0
....................          } else {
0ACA4:  GOTO   ACBC
....................             fprintf(PC, "\t\t-> Error: Failed to dequeue SMF data\r\n");
0ACA8:  MOVLW  C4
0ACAA:  MOVWF  FF6
0ACAC:  MOVLW  13
0ACAE:  MOVWF  FF7
0ACB0:  MOVLW  00
0ACB2:  MOVWF  FF8
0ACB4:  CALL   1C8E
....................             break;
0ACB8:  GOTO   ACC0
....................          }
0ACBC:  GOTO   AB40
....................       }
....................       
....................       fprintf(PC, "\t\t-> Completed processing %d SMF operations\r\n", processed_count);
0ACC0:  MOVLW  EE
0ACC2:  MOVWF  FF6
0ACC4:  MOVLW  13
0ACC6:  MOVWF  FF7
0ACC8:  MOVLW  00
0ACCA:  MOVWF  FF8
0ACCC:  MOVLW  1A
0ACCE:  MOVLB  9
0ACD0:  MOVWF  x96
0ACD2:  MOVLB  0
0ACD4:  CALL   1CBE
0ACD8:  MOVFF  15A,26E
0ACDC:  MOVLW  18
0ACDE:  MOVLB  2
0ACE0:  MOVWF  x6F
0ACE2:  MOVLB  0
0ACE4:  CALL   8DE6
0ACE8:  MOVLW  0A
0ACEA:  MOVWF  FF6
0ACEC:  MOVLW  14
0ACEE:  MOVWF  FF7
0ACF0:  MOVLW  00
0ACF2:  MOVWF  FF8
0ACF4:  MOVLW  11
0ACF6:  MOVLB  9
0ACF8:  MOVWF  x96
0ACFA:  MOVLB  0
0ACFC:  CALL   1CBE
....................       status[0] = FINISHED;
0AD00:  MOVLW  06
0AD02:  MOVWF  48
....................    } else {
0AD04:  GOTO   AD18
....................       fprintf(PC, "\t\t-> denied\r\n");
0AD08:  MOVLW  1C
0AD0A:  MOVWF  FF6
0AD0C:  MOVLW  14
0AD0E:  MOVWF  FF7
0AD10:  MOVLW  00
0AD12:  MOVWF  FF8
0AD14:  CALL   1C8E
....................    }
0AD18:  GOTO   AD92 (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_IV_CURR_SELECT 0xA1
.................... #define ID_MEAS_IV_PD_SELECT 0xA2
.................... #define ID_MEAS_IV_CURR_AND_PD_SELECT 0xA3
.................... #define ID_MEAS_ENVIRONMENT 0xA4
.................... #define ID_MEAS_ENVIRONMENT_DEBUG 0xA5
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_iv_curr_and_pd_select(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment(unsigned int8 uplinkcmd[]);
.................... void mode_meas_environment_debug(unsigned int8 uplinkcmd[]);
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     unsigned int8 is_finished; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... 
.................... 
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End MODE DUMMY\r\n");
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
....................    output_low(EN_NPWR); // Enable NPWR
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
....................    output_low(CONNECT_CIGS1);
....................    output_high(EN_NPWR); // Disable NPWR
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... /*
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... */
.................... 
.................... /*
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... */
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
....................    SmfDataStruct data;
....................    //data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
086B2:  MOVLW  CE
086B4:  MOVWF  FF6
086B6:  MOVLW  14
086B8:  MOVWF  FF7
086BA:  MOVLW  00
086BC:  MOVWF  FF8
086BE:  CALL   1C8E
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd); // Create the measurement command structure
086C2:  MOVFF  160,182
086C6:  MOVFF  15F,181
086CA:  GOTO   62CA
086CE:  MOVFF  02,03
086D2:  MOVF   01,W
086D4:  MOVWF  FE1
086D6:  MOVFF  03,FE2
086DA:  MOVLW  01
086DC:  MOVWF  FEA
086DE:  MOVLW  61
086E0:  MOVWF  FE9
086E2:  MOVLW  0C
086E4:  MOVWF  01
086E6:  MOVFF  FE6,FEE
086EA:  DECFSZ 01,F
086EC:  GOTO   86E6
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
086F0:  MOVLW  E4
086F2:  MOVWF  FF6
086F4:  MOVLW  14
086F6:  MOVWF  FF7
086F8:  MOVLW  00
086FA:  MOVWF  FF8
086FC:  MOVLW  05
086FE:  MOVLB  9
08700:  MOVWF  x96
08702:  MOVLB  0
08704:  CALL   1CBE
08708:  MOVFF  161,996
0870C:  MOVLW  37
0870E:  MOVLB  9
08710:  MOVWF  x97
08712:  MOVLB  0
08714:  CALL   1EBC
08718:  MOVLW  0D
0871A:  MOVLB  A
0871C:  MOVWF  x29
0871E:  MOVLB  0
08720:  CALL   1C3C
08724:  MOVLW  0A
08726:  MOVLB  A
08728:  MOVWF  x29
0872A:  MOVLB  0
0872C:  CALL   1C3C
....................    fprintf(PC, "\tSleep Time: %04LX ms\r\n", cmd.sleep_time);
08730:  MOVLW  F0
08732:  MOVWF  FF6
08734:  MOVLW  14
08736:  MOVWF  FF7
08738:  MOVLW  00
0873A:  MOVWF  FF8
0873C:  MOVLW  0D
0873E:  MOVLB  9
08740:  MOVWF  x96
08742:  MOVLB  0
08744:  CALL   1CBE
08748:  MOVFF  163,996
0874C:  MOVLW  37
0874E:  MOVLB  9
08750:  MOVWF  x97
08752:  MOVLB  0
08754:  CALL   1EBC
08758:  MOVFF  162,996
0875C:  MOVLW  37
0875E:  MOVLB  9
08760:  MOVWF  x97
08762:  MOVLB  0
08764:  CALL   1EBC
08768:  MOVLW  02
0876A:  MOVWF  FF6
0876C:  MOVLW  15
0876E:  MOVWF  FF7
08770:  MOVLW  00
08772:  MOVWF  FF8
08774:  MOVLW  05
08776:  MOVLB  9
08778:  MOVWF  x96
0877A:  MOVLB  0
0877C:  CALL   1CBE
....................    fprintf(PC, "\tCurrent Threshold: %04LX mA\r\n", cmd.curr_threshold);
08780:  MOVLW  08
08782:  MOVWF  FF6
08784:  MOVLW  15
08786:  MOVWF  FF7
08788:  MOVLW  00
0878A:  MOVWF  FF8
0878C:  MOVLW  14
0878E:  MOVLB  9
08790:  MOVWF  x96
08792:  MOVLB  0
08794:  CALL   1CBE
08798:  MOVFF  165,996
0879C:  MOVLW  37
0879E:  MOVLB  9
087A0:  MOVWF  x97
087A2:  MOVLB  0
087A4:  CALL   1EBC
087A8:  MOVFF  164,996
087AC:  MOVLW  37
087AE:  MOVLB  9
087B0:  MOVWF  x97
087B2:  MOVLB  0
087B4:  CALL   1EBC
087B8:  MOVLW  21
087BA:  MOVWF  FF6
087BC:  MOVLW  15
087BE:  MOVWF  FF7
087C0:  MOVLW  00
087C2:  MOVWF  FF8
087C4:  MOVLW  05
087C6:  MOVLB  9
087C8:  MOVWF  x96
087CA:  MOVLB  0
087CC:  CALL   1CBE
....................    fprintf(PC, "\tPD Threshold: %04LX mA\r\n", cmd.pd_threshold);
087D0:  MOVLW  28
087D2:  MOVWF  FF6
087D4:  MOVLW  15
087D6:  MOVWF  FF7
087D8:  MOVLW  00
087DA:  MOVWF  FF8
087DC:  MOVLW  0F
087DE:  MOVLB  9
087E0:  MOVWF  x96
087E2:  MOVLB  0
087E4:  CALL   1CBE
087E8:  MOVFF  167,996
087EC:  MOVLW  37
087EE:  MOVLB  9
087F0:  MOVWF  x97
087F2:  MOVLB  0
087F4:  CALL   1EBC
087F8:  MOVFF  166,996
087FC:  MOVLW  37
087FE:  MOVLB  9
08800:  MOVWF  x97
08802:  MOVLB  0
08804:  CALL   1EBC
08808:  MOVLW  3C
0880A:  MOVWF  FF6
0880C:  MOVLW  15
0880E:  MOVWF  FF7
08810:  MOVLW  00
08812:  MOVWF  FF8
08814:  MOVLW  05
08816:  MOVLB  9
08818:  MOVWF  x96
0881A:  MOVLB  0
0881C:  CALL   1CBE
....................    fprintf(PC, "\tCurrent Limit: %04LX mA\r\n", cmd.curr_limit);
08820:  MOVLW  42
08822:  MOVWF  FF6
08824:  MOVLW  15
08826:  MOVWF  FF7
08828:  MOVLW  00
0882A:  MOVWF  FF8
0882C:  MOVLW  10
0882E:  MOVLB  9
08830:  MOVWF  x96
08832:  MOVLB  0
08834:  CALL   1CBE
08838:  MOVFF  169,996
0883C:  MOVLW  37
0883E:  MOVLB  9
08840:  MOVWF  x97
08842:  MOVLB  0
08844:  CALL   1EBC
08848:  MOVFF  168,996
0884C:  MOVLW  37
0884E:  MOVLB  9
08850:  MOVWF  x97
08852:  MOVLB  0
08854:  CALL   1EBC
08858:  MOVLW  57
0885A:  MOVWF  FF6
0885C:  MOVLW  15
0885E:  MOVWF  FF7
08860:  MOVLW  00
08862:  MOVWF  FF8
08864:  MOVLW  05
08866:  MOVLB  9
08868:  MOVWF  x96
0886A:  MOVLB  0
0886C:  CALL   1CBE
....................    fprintf(PC, "\tMeasurement Time: %04LX s\r\n", cmd.meas_time);
08870:  MOVLW  5E
08872:  MOVWF  FF6
08874:  MOVLW  15
08876:  MOVWF  FF7
08878:  MOVLW  00
0887A:  MOVWF  FF8
0887C:  MOVLW  13
0887E:  MOVLB  9
08880:  MOVWF  x96
08882:  MOVLB  0
08884:  CALL   1CBE
08888:  MOVFF  16B,996
0888C:  MOVLW  37
0888E:  MOVLB  9
08890:  MOVWF  x97
08892:  MOVLB  0
08894:  CALL   1EBC
08898:  MOVFF  16A,996
0889C:  MOVLW  37
0889E:  MOVLB  9
088A0:  MOVWF  x97
088A2:  MOVLB  0
088A4:  CALL   1EBC
088A8:  MOVLW  76
088AA:  MOVWF  FF6
088AC:  MOVLW  15
088AE:  MOVWF  FF7
088B0:  MOVLW  00
088B2:  MOVWF  FF8
088B4:  MOVLW  04
088B6:  MOVLB  9
088B8:  MOVWF  x96
088BA:  MOVLB  0
088BC:  CALL   1CBE
....................    fprintf(PC, "\tIs Finished: %u\r\n", cmd.is_finished);
088C0:  MOVLW  7C
088C2:  MOVWF  FF6
088C4:  MOVLW  15
088C6:  MOVWF  FF7
088C8:  MOVLW  00
088CA:  MOVWF  FF8
088CC:  MOVLW  0E
088CE:  MOVLB  9
088D0:  MOVWF  x96
088D2:  MOVLB  0
088D4:  CALL   1CBE
088D8:  MOVFF  16C,1EB
088DC:  MOVLW  1B
088DE:  MOVLB  1
088E0:  MOVWF  xEC
088E2:  MOVLB  0
088E4:  CALL   6420
088E8:  MOVLW  0D
088EA:  MOVLB  A
088EC:  MOVWF  x29
088EE:  MOVLB  0
088F0:  CALL   1C3C
088F4:  MOVLW  0A
088F6:  MOVLB  A
088F8:  MOVWF  x29
088FA:  MOVLB  0
088FC:  CALL   1C3C
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
08900:  MOVFF  161,266
08904:  MOVLW  01
08906:  MOVLB  2
08908:  MOVWF  x67
0890A:  MOVLB  0
0890C:  CALL   3B8C
.................... 
....................    unsigned int16 start_time = get_current_sec();
....................    unsigned int16 current_sec = 0;
08910:  CALL   2ECA
08914:  MOVFF  01,16E
08918:  MOVFF  00,16D
0891C:  MOVLB  1
0891E:  CLRF   x70
08920:  CLRF   x6F
08922:  MOVLB  0
....................    while(get_current_sec() - start_time < cmd.meas_time)
08924:  CALL   2ECA
08928:  MOVFF  03,17E
0892C:  MOVFF  02,17D
08930:  MOVFF  01,17C
08934:  MOVFF  00,17B
08938:  MOVLB  1
0893A:  MOVF   x6D,W
0893C:  SUBWF  x7B,F
0893E:  MOVF   x6E,W
08940:  SUBWFB x7C,F
08942:  MOVLW  00
08944:  SUBWFB x7D,F
08946:  MOVLW  00
08948:  SUBWFB x7E,F
0894A:  MOVF   x7E,F
0894C:  BTFSC  FD8.2
0894E:  BRA    8956
08950:  MOVLB  0
08952:  GOTO   8A20
08956:  MOVLB  0
08958:  MOVLB  1
0895A:  MOVF   x7D,F
0895C:  BTFSC  FD8.2
0895E:  BRA    8966
08960:  MOVLB  0
08962:  GOTO   8A20
08966:  MOVLB  0
08968:  MOVLB  1
0896A:  MOVF   x7C,W
0896C:  SUBWF  x6B,W
0896E:  BTFSC  FD8.0
08970:  BRA    8978
08972:  MOVLB  0
08974:  GOTO   8A20
08978:  MOVLB  0
0897A:  BTFSS  FD8.2
0897C:  GOTO   8992
08980:  MOVLB  1
08982:  MOVF   x6A,W
08984:  SUBWF  x7B,W
08986:  BTFSS  FD8.0
08988:  BRA    8990
0898A:  MOVLB  0
0898C:  GOTO   8A20
08990:  MOVLB  0
....................    {
....................       current_sec = get_current_sec();
08992:  CALL   2ECA
08996:  MOVFF  01,170
0899A:  MOVFF  00,16F
....................       if (current_sec - start_time >= cmd.meas_time) {
0899E:  MOVLB  1
089A0:  MOVF   x6D,W
089A2:  SUBWF  x6F,W
089A4:  MOVWF  x7B
089A6:  MOVF   x6E,W
089A8:  SUBWFB x70,W
089AA:  MOVWF  x7C
089AC:  MOVF   x6B,W
089AE:  SUBWF  x7C,W
089B0:  BTFSC  FD8.0
089B2:  BRA    89BA
089B4:  MOVLB  0
089B6:  GOTO   89D8
089BA:  MOVLB  0
089BC:  BTFSS  FD8.2
089BE:  GOTO   89D4
089C2:  MOVLB  1
089C4:  MOVF   x6A,W
089C6:  SUBWF  x7B,W
089C8:  BTFSC  FD8.0
089CA:  BRA    89D2
089CC:  MOVLB  0
089CE:  GOTO   89D8
089D2:  MOVLB  0
....................           break;
089D4:  GOTO   8A20
....................       }
....................       sweep_with_threshold(cmd.curr_threshold, cmd.pd_threshold, cmd.curr_limit); // Perform the sweep with thresholds
089D8:  MOVFF  165,17C
089DC:  MOVFF  164,17B
089E0:  MOVFF  167,17E
089E4:  MOVFF  166,17D
089E8:  MOVFF  169,180
089EC:  MOVFF  168,17F
089F0:  GOTO   6F94
....................       // Sleep for the specified time
....................       delay_ms(cmd.sleep_time);
089F4:  MOVFF  163,17B
089F8:  MOVLB  1
089FA:  INCF   x7B,F
089FC:  MOVLB  0
089FE:  MOVLB  1
08A00:  DECFSZ x7B,F
08A02:  BRA    8A08
08A04:  MOVLB  0
08A06:  BRA    8A14
08A08:  MOVLB  A
08A0A:  SETF   x3E
08A0C:  MOVLB  0
08A0E:  CALL   1C0E
08A12:  BRA    89FE
08A14:  MOVFF  162,A3E
08A18:  CALL   1C0E
08A1C:  GOTO   8924
....................    }
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
08A20:  MOVFF  161,266
08A24:  MOVLW  02
08A26:  MOVLB  2
08A28:  MOVWF  x67
08A2A:  MOVLB  0
08A2C:  CALL   3B8C
.................... 
....................    SmfDataStruct data;
....................    data.func_type = 0x00;
08A30:  MOVLB  1
08A32:  CLRF   x7A
....................    data.mission_id = ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
08A34:  MOVLW  C1
08A36:  MOVWF  x71
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
08A38:  MOVF   x10,W
08A3A:  MOVWF  x7B
08A3C:  MOVF   x11,W
08A3E:  MOVWF  x7C
08A40:  MOVLW  16
08A42:  ADDWF  x12,W
08A44:  MOVWF  x7D
08A46:  MOVLW  00
08A48:  ADDWFC x13,W
08A4A:  MOVWF  x7E
08A4C:  MOVF   x15,W
08A4E:  SUBWF  x7B,W
08A50:  MOVWF  x72
08A52:  MOVF   x16,W
08A54:  SUBWFB x7C,W
08A56:  MOVWF  x73
08A58:  MOVF   x17,W
08A5A:  SUBWFB x7D,W
08A5C:  MOVWF  x74
08A5E:  MOVF   x18,W
08A60:  SUBWFB x7E,W
08A62:  MOVWF  x75
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
08A64:  MOVFF  118,179
08A68:  MOVFF  117,178
08A6C:  MOVFF  116,177
08A70:  MOVFF  115,176
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
08A74:  MOVLW  01
08A76:  MOVWF  x7C
08A78:  MOVLW  71
08A7A:  MOVWF  x7B
08A7C:  MOVLB  0
08A7E:  GOTO   8538
.................... 
....................    fprintf(PC, "End MODE MEAS IV\r\n");
08A82:  MOVLW  90
08A84:  MOVWF  FF6
08A86:  MOVLW  15
08A88:  MOVWF  FF7
08A8A:  MOVLW  00
08A8C:  MOVWF  FF8
08A8E:  CALL   1C8E
08A92:  GOTO   8CD0 (RETURN)
.................... }
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
062CA:  MOVLB  1
062CC:  MOVF   x81,W
062CE:  MOVWF  FE9
062D0:  MOVF   x82,W
062D2:  MOVWF  FEA
062D4:  MOVFF  FEF,183
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
062D8:  MOVLW  01
062DA:  ADDWF  x81,W
062DC:  MOVWF  FE9
062DE:  MOVLW  00
062E0:  ADDWFC x82,W
062E2:  MOVWF  FEA
062E4:  MOVF   FEF,W
062E6:  CLRF   x90
062E8:  MOVWF  x8F
062EA:  MOVFF  18F,190
062EE:  CLRF   x8F
062F0:  MOVLW  02
062F2:  ADDWF  x81,W
062F4:  MOVWF  FE9
062F6:  MOVLW  00
062F8:  ADDWFC x82,W
062FA:  MOVWF  FEA
062FC:  MOVF   FEF,W
062FE:  CLRF   03
06300:  IORWF  x8F,W
06302:  MOVWF  x84
06304:  MOVF   03,W
06306:  IORWF  x90,W
06308:  MOVWF  x85
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
0630A:  MOVLW  03
0630C:  ADDWF  x81,W
0630E:  MOVWF  FE9
06310:  MOVLW  00
06312:  ADDWFC x82,W
06314:  MOVWF  FEA
06316:  MOVF   FEF,W
06318:  CLRF   x90
0631A:  MOVWF  x8F
0631C:  RLCF   x8F,W
0631E:  MOVWF  x86
06320:  RLCF   x90,W
06322:  MOVWF  x87
06324:  RLCF   x86,F
06326:  RLCF   x87,F
06328:  RLCF   x86,F
0632A:  RLCF   x87,F
0632C:  RLCF   x86,F
0632E:  RLCF   x87,F
06330:  MOVLW  F0
06332:  ANDWF  x86,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
06334:  MOVLW  04
06336:  ADDWF  x81,W
06338:  MOVWF  FE9
0633A:  MOVLW  00
0633C:  ADDWFC x82,W
0633E:  MOVWF  FEA
06340:  MOVF   FEF,W
06342:  CLRF   x90
06344:  MOVWF  x8F
06346:  RLCF   x8F,W
06348:  MOVWF  x88
0634A:  RLCF   x90,W
0634C:  MOVWF  x89
0634E:  RLCF   x88,F
06350:  RLCF   x89,F
06352:  RLCF   x88,F
06354:  RLCF   x89,F
06356:  RLCF   x88,F
06358:  RLCF   x89,F
0635A:  MOVLW  F0
0635C:  ANDWF  x88,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
0635E:  MOVLW  05
06360:  ADDWF  x81,W
06362:  MOVWF  FE9
06364:  MOVLW  00
06366:  ADDWFC x82,W
06368:  MOVWF  FEA
0636A:  MOVF   FEF,W
0636C:  CLRF   x90
0636E:  MOVWF  x8F
06370:  RLCF   x8F,W
06372:  MOVWF  x8A
06374:  RLCF   x90,W
06376:  MOVWF  x8B
06378:  RLCF   x8A,F
0637A:  RLCF   x8B,F
0637C:  RLCF   x8A,F
0637E:  RLCF   x8B,F
06380:  RLCF   x8A,F
06382:  RLCF   x8B,F
06384:  MOVLW  F0
06386:  ANDWF  x8A,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
06388:  MOVLW  06
0638A:  ADDWF  x81,W
0638C:  MOVWF  FE9
0638E:  MOVLW  00
06390:  ADDWFC x82,W
06392:  MOVWF  FEA
06394:  MOVF   FEF,W
06396:  CLRF   x90
06398:  MOVWF  x8F
0639A:  MOVFF  18F,190
0639E:  CLRF   x8F
063A0:  MOVLW  07
063A2:  ADDWF  x81,W
063A4:  MOVWF  FE9
063A6:  MOVLW  00
063A8:  ADDWFC x82,W
063AA:  MOVWF  FEA
063AC:  MOVF   FEF,W
063AE:  CLRF   03
063B0:  IORWF  x8F,W
063B2:  MOVWF  x8C
063B4:  MOVF   03,W
063B6:  IORWF  x90,W
063B8:  MOVWF  x8D
....................    cmd.is_finished = uplinkcmd[8];
063BA:  MOVLW  08
063BC:  ADDWF  x81,W
063BE:  MOVWF  FE9
063C0:  MOVLW  00
063C2:  ADDWFC x82,W
063C4:  MOVWF  FEA
063C6:  MOVFF  FEF,18E
....................    return cmd;
063CA:  MOVLW  83
063CC:  MOVWF  01
063CE:  MOVLW  01
063D0:  MOVWF  02
063D2:  MOVLB  0
063D4:  GOTO   86CE (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... /*
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... */
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time_sec;
....................     unsigned int8 time_msec;
....................     unsigned int16 open_voltage;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } SWEEP_CONFIG;
.................... 
.................... 
.................... 
.................... MEASUREMENT_DATA create_meas_data();
.................... void log_meas_data(MEASUREMENT_DATA *measured_data, SWEEP_CONFIG *port_data);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    SMF_WRITE = 0x00,    // SMF書き込み操作
....................    SMF_READ = 0x01,     // SMF読み込み操作
....................    SMF_ERASE = 0x02     // SMF消去操作
.................... } FunctionType;
.................... 
.................... /*
....................  * 使用例:
....................  * SmfDataStruct write_data = {SMF_WRITE, 0x1000, 256};
....................  * SmfDataStruct read_data = {SMF_READ, 0x2000, 512};
....................  * SmfDataStruct erase_data = {SMF_ERASE, 0x3000, 1024};
....................  */
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     int8 mission_id; 
....................     int32 src;
....................     int32 size;
....................     FunctionType   func_type;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... SmfDataStruct *peek_smf_data(void);
.................... 
.................... void remove_smf_data(void);
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(FunctionType func_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
04780:  MOVLW  A4
04782:  MOVWF  FF6
04784:  MOVLW  15
04786:  MOVWF  FF7
04788:  MOVLW  00
0478A:  MOVWF  FF8
0478C:  CALL   1C8E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
04790:  MOVLB  1
04792:  MOVF   x61,W
04794:  MOVWF  FE9
04796:  MOVF   x62,W
04798:  MOVWF  FEA
0479A:  MOVFF  FEF,163
....................    piclog_make(cmd, 0x00); // Log the command execution
0479E:  MOVFF  163,266
047A2:  MOVLB  2
047A4:  CLRF   x67
047A6:  MOVLB  0
047A8:  CALL   3B8C
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
047AC:  MOVLB  1
047AE:  CLRF   x67
047B0:  CLRF   x66
047B2:  CLRF   x65
047B4:  CLRF   x64
047B6:  MOVLB  0
047B8:  MOVLB  1
047BA:  MOVF   x67,F
047BC:  BTFSC  FD8.2
047BE:  BRA    47C6
047C0:  MOVLB  0
047C2:  GOTO   4826
047C6:  MOVLB  0
047C8:  MOVLB  1
047CA:  MOVF   x66,W
047CC:  SUBLW  F4
047CE:  BTFSC  FD8.0
047D0:  BRA    47D8
047D2:  MOVLB  0
047D4:  GOTO   4826
047D8:  MOVLB  0
047DA:  BTFSS  FD8.2
047DC:  GOTO   47F2
047E0:  MOVLB  1
047E2:  MOVF   x65,W
047E4:  SUBLW  23
047E6:  BTFSC  FD8.0
047E8:  BRA    47F0
047EA:  MOVLB  0
047EC:  GOTO   4826
047F0:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
047F2:  MOVFF  F1,1A8
047F6:  MOVFF  F0,1A7
047FA:  MOVFF  EF,1A6
047FE:  MOVFF  EE,1A5
04802:  MOVFF  167,1AC
04806:  MOVFF  166,1AB
0480A:  MOVFF  165,1AA
0480E:  MOVFF  164,1A9
04812:  CALL   4424
04816:  MOVLW  01
04818:  MOVLB  1
0481A:  ADDWF  x66,F
0481C:  MOVLW  00
0481E:  ADDWFC x67,F
04820:  MOVLB  0
04822:  GOTO   47B8
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04826:  MOVFF  163,266
0482A:  MOVLW  02
0482C:  MOVLB  2
0482E:  MOVWF  x67
04830:  MOVLB  0
04832:  CALL   3B8C
....................    fprintf(PC, "End Flash Erase All\r\n");
04836:  MOVLW  BC
04838:  MOVWF  FF6
0483A:  MOVLW  15
0483C:  MOVWF  FF7
0483E:  MOVLW  00
04840:  MOVWF  FF8
04842:  CALL   1C8E
04846:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
04848:  MOVLW  D2
0484A:  MOVWF  FF6
0484C:  MOVLW  15
0484E:  MOVWF  FF7
04850:  MOVLW  00
04852:  MOVWF  FF8
04854:  CALL   1C8E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04858:  MOVLB  1
0485A:  MOVF   x5F,W
0485C:  MOVWF  FE9
0485E:  MOVF   x60,W
04860:  MOVWF  FEA
04862:  MOVFF  FEF,161
04866:  MOVLW  01
04868:  ADDWF  x5F,W
0486A:  MOVWF  FE9
0486C:  MOVLW  00
0486E:  ADDWFC x60,W
04870:  MOVWF  FEA
04872:  MOVF   FEF,W
04874:  CLRF   x69
04876:  CLRF   x68
04878:  CLRF   x67
0487A:  MOVWF  x66
0487C:  MOVFF  166,169
04880:  CLRF   x66
04882:  CLRF   x67
04884:  CLRF   x68
04886:  MOVLW  02
04888:  ADDWF  x5F,W
0488A:  MOVWF  FE9
0488C:  MOVLW  00
0488E:  ADDWFC x60,W
04890:  MOVWF  FEA
04892:  MOVF   FEF,W
04894:  CLRF   x6E
04896:  CLRF   x6D
04898:  CLRF   x6C
0489A:  MOVWF  x6B
0489C:  MOVFF  16C,03
048A0:  MOVFF  16B,02
048A4:  CLRF   00
048A6:  CLRF   01
048A8:  MOVF   00,W
048AA:  IORWF  x66,F
048AC:  MOVF   01,W
048AE:  IORWF  x67,F
048B0:  MOVF   02,W
048B2:  IORWF  x68,F
048B4:  MOVF   03,W
048B6:  IORWF  x69,F
048B8:  MOVLW  03
048BA:  ADDWF  x5F,W
048BC:  MOVWF  FE9
048BE:  MOVLW  00
048C0:  ADDWFC x60,W
048C2:  MOVWF  FEA
048C4:  MOVF   FEF,W
048C6:  CLRF   x6E
048C8:  CLRF   x6D
048CA:  CLRF   x6C
048CC:  MOVWF  x6B
048CE:  MOVFF  16D,03
048D2:  MOVFF  16C,02
048D6:  MOVFF  16B,01
048DA:  CLRF   00
048DC:  MOVF   00,W
048DE:  IORWF  x66,F
048E0:  MOVF   01,W
048E2:  IORWF  x67,F
048E4:  MOVF   02,W
048E6:  IORWF  x68,F
048E8:  MOVF   03,W
048EA:  IORWF  x69,F
048EC:  MOVLW  04
048EE:  ADDWF  x5F,W
048F0:  MOVWF  FE9
048F2:  MOVLW  00
048F4:  ADDWFC x60,W
048F6:  MOVWF  FEA
048F8:  MOVF   FEF,W
048FA:  MOVWF  00
048FC:  CLRF   01
048FE:  CLRF   02
04900:  CLRF   03
04902:  MOVF   00,W
04904:  IORWF  x66,W
04906:  MOVWF  x62
04908:  MOVF   01,W
0490A:  IORWF  x67,W
0490C:  MOVWF  x63
0490E:  MOVF   02,W
04910:  IORWF  x68,W
04912:  MOVWF  x64
04914:  MOVF   03,W
04916:  IORWF  x69,W
04918:  MOVWF  x65
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
0491A:  MOVLW  F0
0491C:  MOVWF  FF6
0491E:  MOVLW  15
04920:  MOVWF  FF7
04922:  MOVLW  00
04924:  MOVWF  FF8
04926:  MOVLW  13
04928:  MOVLB  9
0492A:  MOVWF  x96
0492C:  MOVLB  0
0492E:  CALL   1CBE
04932:  MOVFF  165,996
04936:  MOVLW  37
04938:  MOVLB  9
0493A:  MOVWF  x97
0493C:  MOVLB  0
0493E:  CALL   1EBC
04942:  MOVFF  164,996
04946:  MOVLW  37
04948:  MOVLB  9
0494A:  MOVWF  x97
0494C:  MOVLB  0
0494E:  CALL   1EBC
04952:  MOVFF  163,996
04956:  MOVLW  37
04958:  MOVLB  9
0495A:  MOVWF  x97
0495C:  MOVLB  0
0495E:  CALL   1EBC
04962:  MOVFF  162,996
04966:  MOVLW  37
04968:  MOVLB  9
0496A:  MOVWF  x97
0496C:  MOVLB  0
0496E:  CALL   1EBC
04972:  MOVLW  0D
04974:  MOVLB  A
04976:  MOVWF  x29
04978:  MOVLB  0
0497A:  CALL   1C3C
0497E:  MOVLW  0A
04980:  MOVLB  A
04982:  MOVWF  x29
04984:  MOVLB  0
04986:  CALL   1C3C
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
0498A:  MOVFF  161,266
0498E:  MOVLW  01
04990:  MOVLB  2
04992:  MOVWF  x67
04994:  MOVLB  0
04996:  CALL   3B8C
....................    
....................    sector_erase(mis_fm, sector_address);
0499A:  MOVFF  F1,1A8
0499E:  MOVFF  F0,1A7
049A2:  MOVFF  EF,1A6
049A6:  MOVFF  EE,1A5
049AA:  MOVFF  165,1AC
049AE:  MOVFF  164,1AB
049B2:  MOVFF  163,1AA
049B6:  MOVFF  162,1A9
049BA:  CALL   4424
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
049BE:  MOVFF  161,266
049C2:  MOVLW  02
049C4:  MOVLB  2
049C6:  MOVWF  x67
049C8:  MOVLB  0
049CA:  CALL   3B8C
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
049CE:  MOVLW  0C
049D0:  MOVWF  FF6
049D2:  MOVLW  16
049D4:  MOVWF  FF7
049D6:  MOVLW  00
049D8:  MOVWF  FF8
049DA:  CALL   1C8E
049DE:  GOTO   8BE0 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
049E2:  MOVLW  28
049E4:  MOVWF  FF6
049E6:  MOVLW  16
049E8:  MOVWF  FF7
049EA:  MOVLW  00
049EC:  MOVWF  FF8
049EE:  CALL   1C8E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
049F2:  MOVLB  1
049F4:  MOVF   x5F,W
049F6:  MOVWF  FE9
049F8:  MOVF   x60,W
049FA:  MOVWF  FEA
049FC:  MOVFF  FEF,161
04A00:  MOVLW  01
04A02:  ADDWF  x5F,W
04A04:  MOVWF  FE9
04A06:  MOVLW  00
04A08:  ADDWFC x60,W
04A0A:  MOVWF  FEA
04A0C:  MOVF   FEF,W
04A0E:  CLRF   x69
04A10:  CLRF   x68
04A12:  CLRF   x67
04A14:  MOVWF  x66
04A16:  MOVFF  166,169
04A1A:  CLRF   x66
04A1C:  CLRF   x67
04A1E:  CLRF   x68
04A20:  MOVLW  02
04A22:  ADDWF  x5F,W
04A24:  MOVWF  FE9
04A26:  MOVLW  00
04A28:  ADDWFC x60,W
04A2A:  MOVWF  FEA
04A2C:  MOVF   FEF,W
04A2E:  CLRF   x6E
04A30:  CLRF   x6D
04A32:  CLRF   x6C
04A34:  MOVWF  x6B
04A36:  MOVFF  16C,03
04A3A:  MOVFF  16B,02
04A3E:  CLRF   00
04A40:  CLRF   01
04A42:  MOVF   00,W
04A44:  IORWF  x66,F
04A46:  MOVF   01,W
04A48:  IORWF  x67,F
04A4A:  MOVF   02,W
04A4C:  IORWF  x68,F
04A4E:  MOVF   03,W
04A50:  IORWF  x69,F
04A52:  MOVLW  03
04A54:  ADDWF  x5F,W
04A56:  MOVWF  FE9
04A58:  MOVLW  00
04A5A:  ADDWFC x60,W
04A5C:  MOVWF  FEA
04A5E:  MOVF   FEF,W
04A60:  CLRF   x6E
04A62:  CLRF   x6D
04A64:  CLRF   x6C
04A66:  MOVWF  x6B
04A68:  MOVFF  16D,03
04A6C:  MOVFF  16C,02
04A70:  MOVFF  16B,01
04A74:  CLRF   00
04A76:  MOVF   00,W
04A78:  IORWF  x66,F
04A7A:  MOVF   01,W
04A7C:  IORWF  x67,F
04A7E:  MOVF   02,W
04A80:  IORWF  x68,F
04A82:  MOVF   03,W
04A84:  IORWF  x69,F
04A86:  MOVLW  04
04A88:  ADDWF  x5F,W
04A8A:  MOVWF  FE9
04A8C:  MOVLW  00
04A8E:  ADDWFC x60,W
04A90:  MOVWF  FEA
04A92:  MOVF   FEF,W
04A94:  MOVWF  00
04A96:  CLRF   01
04A98:  CLRF   02
04A9A:  CLRF   03
04A9C:  MOVF   00,W
04A9E:  IORWF  x66,W
04AA0:  MOVWF  x62
04AA2:  MOVF   01,W
04AA4:  IORWF  x67,W
04AA6:  MOVWF  x63
04AA8:  MOVF   02,W
04AAA:  IORWF  x68,W
04AAC:  MOVWF  x64
04AAE:  MOVF   03,W
04AB0:  IORWF  x69,W
04AB2:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04AB4:  MOVLW  44
04AB6:  MOVWF  FF6
04AB8:  MOVLW  16
04ABA:  MOVWF  FF7
04ABC:  MOVLW  00
04ABE:  MOVWF  FF8
04AC0:  MOVLW  16
04AC2:  MOVLB  9
04AC4:  MOVWF  x96
04AC6:  MOVLB  0
04AC8:  CALL   1CBE
04ACC:  MOVFF  165,996
04AD0:  MOVLW  37
04AD2:  MOVLB  9
04AD4:  MOVWF  x97
04AD6:  MOVLB  0
04AD8:  CALL   1EBC
04ADC:  MOVFF  164,996
04AE0:  MOVLW  37
04AE2:  MOVLB  9
04AE4:  MOVWF  x97
04AE6:  MOVLB  0
04AE8:  CALL   1EBC
04AEC:  MOVFF  163,996
04AF0:  MOVLW  37
04AF2:  MOVLB  9
04AF4:  MOVWF  x97
04AF6:  MOVLB  0
04AF8:  CALL   1EBC
04AFC:  MOVFF  162,996
04B00:  MOVLW  37
04B02:  MOVLB  9
04B04:  MOVWF  x97
04B06:  MOVLB  0
04B08:  CALL   1EBC
04B0C:  MOVLW  0D
04B0E:  MOVLB  A
04B10:  MOVWF  x29
04B12:  MOVLB  0
04B14:  CALL   1C3C
04B18:  MOVLW  0A
04B1A:  MOVLB  A
04B1C:  MOVWF  x29
04B1E:  MOVLB  0
04B20:  CALL   1C3C
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04B24:  MOVFF  161,266
04B28:  MOVLW  01
04B2A:  MOVLB  2
04B2C:  MOVWF  x67
04B2E:  MOVLB  0
04B30:  CALL   3B8C
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
04B34:  MOVFF  F1,A29
04B38:  MOVFF  F0,A28
04B3C:  MOVFF  EF,A27
04B40:  MOVFF  EE,A26
04B44:  MOVLB  A
04B46:  CLRF   x2D
04B48:  CLRF   x2C
04B4A:  CLRF   x2B
04B4C:  CLRF   x2A
04B4E:  MOVLB  0
04B50:  CALL   3554
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04B54:  MOVFF  161,266
04B58:  MOVLW  02
04B5A:  MOVLB  2
04B5C:  MOVWF  x67
04B5E:  MOVLB  0
04B60:  CALL   3B8C
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
04B64:  MOVLW  62
04B66:  MOVWF  FF6
04B68:  MOVLW  16
04B6A:  MOVWF  FF7
04B6C:  MOVLW  00
04B6E:  MOVWF  FF8
04B70:  CALL   1C8E
04B74:  GOTO   8BF0 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
04B78:  MOVLW  7C
04B7A:  MOVWF  FF6
04B7C:  MOVLW  16
04B7E:  MOVWF  FF7
04B80:  MOVLW  00
04B82:  MOVWF  FF8
04B84:  CALL   1C8E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04B88:  MOVLB  1
04B8A:  MOVF   x5F,W
04B8C:  MOVWF  FE9
04B8E:  MOVF   x60,W
04B90:  MOVWF  FEA
04B92:  MOVFF  FEF,161
04B96:  MOVLW  01
04B98:  ADDWF  x5F,W
04B9A:  MOVWF  FE9
04B9C:  MOVLW  00
04B9E:  ADDWFC x60,W
04BA0:  MOVWF  FEA
04BA2:  MOVF   FEF,W
04BA4:  CLRF   x69
04BA6:  CLRF   x68
04BA8:  CLRF   x67
04BAA:  MOVWF  x66
04BAC:  MOVFF  166,169
04BB0:  CLRF   x66
04BB2:  CLRF   x67
04BB4:  CLRF   x68
04BB6:  MOVLW  02
04BB8:  ADDWF  x5F,W
04BBA:  MOVWF  FE9
04BBC:  MOVLW  00
04BBE:  ADDWFC x60,W
04BC0:  MOVWF  FEA
04BC2:  MOVF   FEF,W
04BC4:  CLRF   x6E
04BC6:  CLRF   x6D
04BC8:  CLRF   x6C
04BCA:  MOVWF  x6B
04BCC:  MOVFF  16C,03
04BD0:  MOVFF  16B,02
04BD4:  CLRF   00
04BD6:  CLRF   01
04BD8:  MOVF   00,W
04BDA:  IORWF  x66,F
04BDC:  MOVF   01,W
04BDE:  IORWF  x67,F
04BE0:  MOVF   02,W
04BE2:  IORWF  x68,F
04BE4:  MOVF   03,W
04BE6:  IORWF  x69,F
04BE8:  MOVLW  03
04BEA:  ADDWF  x5F,W
04BEC:  MOVWF  FE9
04BEE:  MOVLW  00
04BF0:  ADDWFC x60,W
04BF2:  MOVWF  FEA
04BF4:  MOVF   FEF,W
04BF6:  CLRF   x6E
04BF8:  CLRF   x6D
04BFA:  CLRF   x6C
04BFC:  MOVWF  x6B
04BFE:  MOVFF  16D,03
04C02:  MOVFF  16C,02
04C06:  MOVFF  16B,01
04C0A:  CLRF   00
04C0C:  MOVF   00,W
04C0E:  IORWF  x66,F
04C10:  MOVF   01,W
04C12:  IORWF  x67,F
04C14:  MOVF   02,W
04C16:  IORWF  x68,F
04C18:  MOVF   03,W
04C1A:  IORWF  x69,F
04C1C:  MOVLW  04
04C1E:  ADDWF  x5F,W
04C20:  MOVWF  FE9
04C22:  MOVLW  00
04C24:  ADDWFC x60,W
04C26:  MOVWF  FEA
04C28:  MOVF   FEF,W
04C2A:  MOVWF  00
04C2C:  CLRF   01
04C2E:  CLRF   02
04C30:  CLRF   03
04C32:  MOVF   00,W
04C34:  IORWF  x66,W
04C36:  MOVWF  x62
04C38:  MOVF   01,W
04C3A:  IORWF  x67,W
04C3C:  MOVWF  x63
04C3E:  MOVF   02,W
04C40:  IORWF  x68,W
04C42:  MOVWF  x64
04C44:  MOVF   03,W
04C46:  IORWF  x69,W
04C48:  MOVWF  x65
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04C4A:  MOVLW  A2
04C4C:  MOVWF  FF6
04C4E:  MOVLW  16
04C50:  MOVWF  FF7
04C52:  MOVLW  00
04C54:  MOVWF  FF8
04C56:  MOVLW  16
04C58:  MOVLB  9
04C5A:  MOVWF  x96
04C5C:  MOVLB  0
04C5E:  CALL   1CBE
04C62:  MOVFF  165,996
04C66:  MOVLW  37
04C68:  MOVLB  9
04C6A:  MOVWF  x97
04C6C:  MOVLB  0
04C6E:  CALL   1EBC
04C72:  MOVFF  164,996
04C76:  MOVLW  37
04C78:  MOVLB  9
04C7A:  MOVWF  x97
04C7C:  MOVLB  0
04C7E:  CALL   1EBC
04C82:  MOVFF  163,996
04C86:  MOVLW  37
04C88:  MOVLB  9
04C8A:  MOVWF  x97
04C8C:  MOVLB  0
04C8E:  CALL   1EBC
04C92:  MOVFF  162,996
04C96:  MOVLW  37
04C98:  MOVLB  9
04C9A:  MOVWF  x97
04C9C:  MOVLB  0
04C9E:  CALL   1EBC
04CA2:  MOVLW  0D
04CA4:  MOVLB  A
04CA6:  MOVWF  x29
04CA8:  MOVLB  0
04CAA:  CALL   1C3C
04CAE:  MOVLW  0A
04CB0:  MOVLB  A
04CB2:  MOVWF  x29
04CB4:  MOVLB  0
04CB6:  CALL   1C3C
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04CBA:  MOVFF  161,266
04CBE:  MOVLW  01
04CC0:  MOVLB  2
04CC2:  MOVWF  x67
04CC4:  MOVLB  0
04CC6:  CALL   3B8C
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04CCA:  MOVFF  161,266
04CCE:  MOVLW  02
04CD0:  MOVLB  2
04CD2:  MOVWF  x67
04CD4:  MOVLB  0
04CD6:  CALL   3B8C
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
04CDA:  MOVLW  C0
04CDC:  MOVWF  FF6
04CDE:  MOVLW  16
04CE0:  MOVWF  FF7
04CE2:  MOVLW  00
04CE4:  MOVWF  FF8
04CE6:  CALL   1C8E
04CEA:  GOTO   8C00 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
04CEE:  MOVLW  E4
04CF0:  MOVWF  FF6
04CF2:  MOVLW  16
04CF4:  MOVWF  FF7
04CF6:  MOVLW  00
04CF8:  MOVWF  FF8
04CFA:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04CFE:  MOVLB  1
04D00:  MOVF   x5F,W
04D02:  MOVWF  FE9
04D04:  MOVF   x60,W
04D06:  MOVWF  FEA
04D08:  MOVFF  FEF,1B1
04D0C:  MOVFF  1B1,266
04D10:  MOVLW  01
04D12:  MOVLB  2
04D14:  MOVWF  x67
04D16:  MOVLB  0
04D18:  CALL   3B8C
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
04D1C:  MOVLB  1
04D1E:  CLRF   x61
04D20:  CLRF   x62
04D22:  CLRF   x63
04D24:  CLRF   x64
04D26:  CLRF   x65
04D28:  CLRF   x66
04D2A:  CLRF   x67
....................    
....................    flash_write_param.id = parameter[0];
04D2C:  MOVF   x5F,W
04D2E:  MOVWF  FE9
04D30:  MOVF   x60,W
04D32:  MOVWF  FEA
04D34:  MOVFF  FEF,161
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
04D38:  MOVLW  01
04D3A:  ADDWF  x5F,W
04D3C:  MOVWF  FE9
04D3E:  MOVLW  00
04D40:  ADDWFC x60,W
04D42:  MOVWF  FEA
04D44:  MOVF   FEF,W
04D46:  CLRF   xB4
04D48:  CLRF   xB3
04D4A:  CLRF   xB2
04D4C:  MOVWF  xB1
04D4E:  MOVFF  1B1,1B4
04D52:  CLRF   xB1
04D54:  CLRF   xB2
04D56:  CLRF   xB3
04D58:  MOVLW  02
04D5A:  ADDWF  x5F,W
04D5C:  MOVWF  FE9
04D5E:  MOVLW  00
04D60:  ADDWFC x60,W
04D62:  MOVWF  FEA
04D64:  MOVF   FEF,W
04D66:  CLRF   xB9
04D68:  CLRF   xB8
04D6A:  CLRF   xB7
04D6C:  MOVWF  xB6
04D6E:  MOVFF  1B7,03
04D72:  MOVFF  1B6,02
04D76:  CLRF   00
04D78:  CLRF   01
04D7A:  MOVF   00,W
04D7C:  IORWF  xB1,F
04D7E:  MOVF   01,W
04D80:  IORWF  xB2,F
04D82:  MOVF   02,W
04D84:  IORWF  xB3,F
04D86:  MOVF   03,W
04D88:  IORWF  xB4,F
04D8A:  MOVLW  03
04D8C:  ADDWF  x5F,W
04D8E:  MOVWF  FE9
04D90:  MOVLW  00
04D92:  ADDWFC x60,W
04D94:  MOVWF  FEA
04D96:  MOVF   FEF,W
04D98:  CLRF   xB9
04D9A:  CLRF   xB8
04D9C:  CLRF   xB7
04D9E:  MOVWF  xB6
04DA0:  MOVFF  1B8,03
04DA4:  MOVFF  1B7,02
04DA8:  MOVFF  1B6,01
04DAC:  CLRF   00
04DAE:  MOVF   00,W
04DB0:  IORWF  xB1,F
04DB2:  MOVF   01,W
04DB4:  IORWF  xB2,F
04DB6:  MOVF   02,W
04DB8:  IORWF  xB3,F
04DBA:  MOVF   03,W
04DBC:  IORWF  xB4,F
04DBE:  MOVLW  04
04DC0:  ADDWF  x5F,W
04DC2:  MOVWF  FE9
04DC4:  MOVLW  00
04DC6:  ADDWFC x60,W
04DC8:  MOVWF  FEA
04DCA:  MOVF   FEF,W
04DCC:  MOVWF  00
04DCE:  CLRF   01
04DD0:  CLRF   02
04DD2:  CLRF   03
04DD4:  MOVF   00,W
04DD6:  IORWF  xB1,W
04DD8:  MOVWF  x62
04DDA:  MOVF   01,W
04DDC:  IORWF  xB2,W
04DDE:  MOVWF  x63
04DE0:  MOVF   02,W
04DE2:  IORWF  xB3,W
04DE4:  MOVWF  x64
04DE6:  MOVF   03,W
04DE8:  IORWF  xB4,W
04DEA:  MOVWF  x65
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
04DEC:  MOVLW  07
04DEE:  ADDWF  x5F,W
04DF0:  MOVWF  FE9
04DF2:  MOVLW  00
04DF4:  ADDWFC x60,W
04DF6:  MOVWF  FEA
04DF8:  MOVF   FEF,W
04DFA:  CLRF   xB2
04DFC:  MOVWF  xB1
04DFE:  MOVFF  1B1,1B2
04E02:  CLRF   xB1
04E04:  MOVLW  08
04E06:  ADDWF  x5F,W
04E08:  MOVWF  FE9
04E0A:  MOVLW  00
04E0C:  ADDWFC x60,W
04E0E:  MOVWF  FEA
04E10:  MOVF   FEF,W
04E12:  CLRF   03
04E14:  IORWF  xB1,W
04E16:  MOVWF  x66
04E18:  MOVF   03,W
04E1A:  IORWF  xB2,W
04E1C:  MOVWF  x67
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
04E1E:  MOVLW  FE
04E20:  MOVWF  FF6
04E22:  MOVLW  16
04E24:  MOVWF  FF7
04E26:  MOVLW  00
04E28:  MOVWF  FF8
04E2A:  MOVLW  0C
04E2C:  MOVLB  9
04E2E:  MOVWF  x96
04E30:  MOVLB  0
04E32:  CALL   1CBE
04E36:  MOVFF  161,996
04E3A:  MOVLW  37
04E3C:  MOVLB  9
04E3E:  MOVWF  x97
04E40:  MOVLB  0
04E42:  CALL   1EBC
04E46:  MOVLW  0D
04E48:  MOVLB  A
04E4A:  MOVWF  x29
04E4C:  MOVLB  0
04E4E:  CALL   1C3C
04E52:  MOVLW  0A
04E54:  MOVLB  A
04E56:  MOVWF  x29
04E58:  MOVLB  0
04E5A:  CALL   1C3C
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
04E5E:  MOVLW  12
04E60:  MOVWF  FF6
04E62:  MOVLW  17
04E64:  MOVWF  FF7
04E66:  MOVLW  00
04E68:  MOVWF  FF8
04E6A:  MOVLW  0E
04E6C:  MOVLB  9
04E6E:  MOVWF  x96
04E70:  MOVLB  0
04E72:  CALL   1CBE
04E76:  MOVFF  165,996
04E7A:  MOVLW  37
04E7C:  MOVLB  9
04E7E:  MOVWF  x97
04E80:  MOVLB  0
04E82:  CALL   1EBC
04E86:  MOVFF  164,996
04E8A:  MOVLW  37
04E8C:  MOVLB  9
04E8E:  MOVWF  x97
04E90:  MOVLB  0
04E92:  CALL   1EBC
04E96:  MOVFF  163,996
04E9A:  MOVLW  37
04E9C:  MOVLB  9
04E9E:  MOVWF  x97
04EA0:  MOVLB  0
04EA2:  CALL   1EBC
04EA6:  MOVFF  162,996
04EAA:  MOVLW  37
04EAC:  MOVLB  9
04EAE:  MOVWF  x97
04EB0:  MOVLB  0
04EB2:  CALL   1EBC
04EB6:  MOVLW  0D
04EB8:  MOVLB  A
04EBA:  MOVWF  x29
04EBC:  MOVLB  0
04EBE:  CALL   1C3C
04EC2:  MOVLW  0A
04EC4:  MOVLB  A
04EC6:  MOVWF  x29
04EC8:  MOVLB  0
04ECA:  CALL   1C3C
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
04ECE:  MOVLW  28
04ED0:  MOVWF  FF6
04ED2:  MOVLW  17
04ED4:  MOVWF  FF7
04ED6:  MOVLW  00
04ED8:  MOVWF  FF8
04EDA:  MOVLW  0E
04EDC:  MOVLB  9
04EDE:  MOVWF  x96
04EE0:  MOVLB  0
04EE2:  CALL   1CBE
04EE6:  MOVFF  167,996
04EEA:  MOVLW  37
04EEC:  MOVLB  9
04EEE:  MOVWF  x97
04EF0:  MOVLB  0
04EF2:  CALL   1EBC
04EF6:  MOVFF  166,996
04EFA:  MOVLW  37
04EFC:  MOVLB  9
04EFE:  MOVWF  x97
04F00:  MOVLB  0
04F02:  CALL   1EBC
04F06:  MOVLW  0D
04F08:  MOVLB  A
04F0A:  MOVWF  x29
04F0C:  MOVLB  0
04F0E:  CALL   1C3C
04F12:  MOVLW  0A
04F14:  MOVLB  A
04F16:  MOVWF  x29
04F18:  MOVLB  0
04F1A:  CALL   1C3C
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
04F1E:  MOVFF  161,266
04F22:  MOVLB  2
04F24:  CLRF   x67
04F26:  MOVLB  0
04F28:  CALL   3B8C
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
04F2C:  MOVLW  3E
04F2E:  MOVWF  FF6
04F30:  MOVLW  17
04F32:  MOVWF  FF7
04F34:  MOVLW  00
04F36:  MOVWF  FF8
04F38:  CALL   1C8E
....................    for (p = 0; p < flash_write_param.packetnum; p++)
04F3C:  MOVLB  1
04F3E:  CLRF   xA9
04F40:  CLRF   xA8
04F42:  MOVLB  0
04F44:  MOVLB  1
04F46:  MOVF   xA9,W
04F48:  SUBWF  x67,W
04F4A:  BTFSC  FD8.0
04F4C:  BRA    4F54
04F4E:  MOVLB  0
04F50:  GOTO   5082
04F54:  MOVLB  0
04F56:  BTFSS  FD8.2
04F58:  GOTO   4F6E
04F5C:  MOVLB  1
04F5E:  MOVF   x66,W
04F60:  SUBWF  xA8,W
04F62:  BTFSS  FD8.0
04F64:  BRA    4F6C
04F66:  MOVLB  0
04F68:  GOTO   5082
04F6C:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
04F6E:  MOVLB  1
04F70:  RLCF   xA8,W
04F72:  MOVWF  xAA
04F74:  RLCF   xA9,W
04F76:  MOVWF  xAB
04F78:  RLCF   xAA,F
04F7A:  RLCF   xAB,F
04F7C:  RLCF   xAA,F
04F7E:  RLCF   xAB,F
04F80:  RLCF   xAA,F
04F82:  RLCF   xAB,F
04F84:  RLCF   xAA,F
04F86:  RLCF   xAB,F
04F88:  RLCF   xAA,F
04F8A:  RLCF   xAB,F
04F8C:  MOVLW  C0
04F8E:  ANDWF  xAA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
04F90:  CLRF   xAC
04F92:  MOVLB  0
04F94:  MOVLB  1
04F96:  MOVF   xAC,W
04F98:  SUBLW  3F
04F9A:  BTFSC  FD8.0
04F9C:  BRA    4FA4
04F9E:  MOVLB  0
04FA0:  GOTO   5004
04FA4:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
04FA6:  CLRF   03
04FA8:  MOVLB  1
04FAA:  MOVF   xAC,W
04FAC:  ADDLW  68
04FAE:  MOVWF  FE9
04FB0:  MOVLW  01
04FB2:  ADDWFC 03,W
04FB4:  MOVWF  FEA
04FB6:  MOVF   xAC,W
04FB8:  ADDWF  xAA,W
04FBA:  MOVWF  xB3
04FBC:  MOVLW  00
04FBE:  ADDWFC xAB,W
04FC0:  MOVWF  xB4
04FC2:  MOVF   xB3,W
04FC4:  MOVWF  00
04FC6:  CLRF   03
04FC8:  MOVF   00,W
04FCA:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
04FCC:  CLRF   03
04FCE:  MOVF   xAC,W
04FD0:  ADDLW  68
04FD2:  MOVWF  FE9
04FD4:  MOVLW  01
04FD6:  ADDWFC 03,W
04FD8:  MOVWF  FEA
04FDA:  MOVFF  FEF,1B1
04FDE:  MOVFF  1B1,996
04FE2:  MOVLW  37
04FE4:  MOVLB  9
04FE6:  MOVWF  x97
04FE8:  MOVLB  0
04FEA:  CALL   1EBC
04FEE:  MOVLW  20
04FF0:  MOVLB  A
04FF2:  MOVWF  x29
04FF4:  MOVLB  0
04FF6:  CALL   1C3C
04FFA:  MOVLB  1
04FFC:  INCF   xAC,F
04FFE:  MOVLB  0
05000:  GOTO   4F94
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05004:  MOVLB  1
05006:  RLCF   xA8,W
05008:  MOVWF  02
0500A:  RLCF   xA9,W
0500C:  MOVWF  03
0500E:  RLCF   02,F
05010:  RLCF   03,F
05012:  RLCF   02,F
05014:  RLCF   03,F
05016:  RLCF   02,F
05018:  RLCF   03,F
0501A:  RLCF   02,F
0501C:  RLCF   03,F
0501E:  RLCF   02,F
05020:  RLCF   03,F
05022:  MOVLW  C0
05024:  ANDWF  02,F
05026:  MOVF   02,W
05028:  ADDWF  x62,W
0502A:  MOVWF  xAD
0502C:  MOVF   03,W
0502E:  ADDWFC x63,W
05030:  MOVWF  xAE
05032:  MOVLW  00
05034:  ADDWFC x64,W
05036:  MOVWF  xAF
05038:  MOVLW  00
0503A:  ADDWFC x65,W
0503C:  MOVWF  xB0
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0503E:  MOVFF  F1,A29
05042:  MOVFF  F0,A28
05046:  MOVFF  EF,A27
0504A:  MOVFF  EE,A26
0504E:  MOVFF  1B0,A2D
05052:  MOVFF  1AF,A2C
05056:  MOVFF  1AE,A2B
0505A:  MOVFF  1AD,A2A
0505E:  MOVLW  01
05060:  MOVLB  A
05062:  MOVWF  x2F
05064:  MOVLW  68
05066:  MOVWF  x2E
05068:  CLRF   x31
0506A:  MOVLW  40
0506C:  MOVWF  x30
0506E:  MOVLB  0
05070:  CALL   31D0
05074:  MOVLB  1
05076:  INCF   xA8,F
05078:  BTFSC  FD8.2
0507A:  INCF   xA9,F
0507C:  MOVLB  0
0507E:  GOTO   4F44
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05082:  MOVFF  161,266
05086:  MOVLW  02
05088:  MOVLB  2
0508A:  MOVWF  x67
0508C:  MOVLB  0
0508E:  CALL   3B8C
....................    fprintf(PC, "\r\n");
05092:  MOVLW  0D
05094:  MOVLB  A
05096:  MOVWF  x29
05098:  MOVLB  0
0509A:  CALL   1C3C
0509E:  MOVLW  0A
050A0:  MOVLB  A
050A2:  MOVWF  x29
050A4:  MOVLB  0
050A6:  CALL   1C3C
....................    fprintf(PC, "End Flash Write Demo\r\n");
050AA:  MOVLW  4C
050AC:  MOVWF  FF6
050AE:  MOVLW  17
050B0:  MOVWF  FF7
050B2:  MOVLW  00
050B4:  MOVWF  FF8
050B6:  CALL   1C8E
050BA:  GOTO   8C10 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
050EE:  MOVLW  64
050F0:  MOVWF  FF6
050F2:  MOVLW  17
050F4:  MOVWF  FF7
050F6:  MOVLW  00
050F8:  MOVWF  FF8
050FA:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
050FE:  MOVLB  1
05100:  MOVF   x5F,W
05102:  MOVWF  FE9
05104:  MOVF   x60,W
05106:  MOVWF  FEA
05108:  MOVFF  FEF,265
0510C:  MOVFF  265,266
05110:  MOVLW  01
05112:  MOVLB  2
05114:  MOVWF  x67
05116:  MOVLB  0
05118:  CALL   3B8C
....................    flash_setting(mis_fm);
0511C:  MOVFF  F1,26C
05120:  MOVFF  F0,26B
05124:  MOVFF  EF,26A
05128:  MOVFF  EE,269
0512C:  CALL   50BE
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
05130:  MOVLB  1
05132:  CLRF   x64
05134:  CLRF   x63
05136:  CLRF   x62
05138:  CLRF   x61
0513A:  MOVLW  01
0513C:  MOVWF  x65
0513E:  MOVLW  02
05140:  MOVWF  x66
05142:  MOVLW  03
05144:  MOVWF  x67
05146:  MOVLW  04
05148:  MOVWF  x68
0514A:  CLRF   x69
0514C:  CLRF   x6A
0514E:  CLRF   x6B
05150:  CLRF   x6C
05152:  CLRF   x6D
05154:  CLRF   x6E
05156:  CLRF   x6F
05158:  CLRF   x70
0515A:  CLRF   x71
0515C:  CLRF   x72
0515E:  CLRF   x73
05160:  CLRF   x74
05162:  CLRF   x75
05164:  CLRF   x76
05166:  CLRF   x77
05168:  CLRF   x78
0516A:  CLRF   x79
0516C:  CLRF   x7A
0516E:  CLRF   x7B
05170:  CLRF   x7C
05172:  CLRF   x7D
05174:  CLRF   x7E
05176:  CLRF   x7F
05178:  CLRF   x80
0517A:  CLRF   x81
0517C:  CLRF   x82
0517E:  CLRF   x83
05180:  CLRF   x84
05182:  CLRF   x85
05184:  CLRF   x86
05186:  CLRF   x87
05188:  CLRF   x88
0518A:  CLRF   x89
0518C:  CLRF   x8A
0518E:  CLRF   x8B
05190:  CLRF   x8C
05192:  CLRF   x8D
05194:  CLRF   x8E
05196:  CLRF   x8F
05198:  CLRF   x90
0519A:  CLRF   x91
0519C:  CLRF   x92
0519E:  CLRF   x93
051A0:  CLRF   x94
051A2:  CLRF   x95
051A4:  CLRF   x96
051A6:  CLRF   x97
051A8:  CLRF   x98
051AA:  CLRF   x99
051AC:  CLRF   x9A
051AE:  CLRF   x9B
051B0:  CLRF   x9C
051B2:  CLRF   x9D
051B4:  CLRF   x9E
051B6:  CLRF   x9F
051B8:  CLRF   xA0
051BA:  CLRF   xA1
051BC:  CLRF   xA2
051BE:  CLRF   xA3
051C0:  CLRF   xA4
051C2:  CLRF   xA5
051C4:  CLRF   xA6
051C6:  CLRF   xA7
051C8:  CLRF   xA8
051CA:  CLRF   xA9
051CC:  CLRF   xAA
051CE:  CLRF   xAB
051D0:  CLRF   xAC
051D2:  CLRF   xAD
051D4:  CLRF   xAE
051D6:  CLRF   xAF
051D8:  CLRF   xB0
051DA:  CLRF   xB1
051DC:  CLRF   xB2
051DE:  CLRF   xB3
051E0:  CLRF   xB4
051E2:  CLRF   xB5
051E4:  CLRF   xB6
051E6:  CLRF   xB7
051E8:  CLRF   xB8
051EA:  CLRF   xB9
051EC:  CLRF   xBA
051EE:  CLRF   xBB
051F0:  CLRF   xBC
051F2:  CLRF   xBD
051F4:  CLRF   xBE
051F6:  CLRF   xBF
051F8:  CLRF   xC0
051FA:  CLRF   xC1
051FC:  CLRF   xC2
051FE:  CLRF   xC3
05200:  CLRF   xC4
05202:  CLRF   xC5
05204:  CLRF   xC6
05206:  CLRF   xC7
05208:  CLRF   xC8
0520A:  CLRF   xC9
0520C:  CLRF   xCA
0520E:  CLRF   xCB
05210:  CLRF   xCC
05212:  CLRF   xCD
05214:  CLRF   xCE
05216:  CLRF   xCF
05218:  CLRF   xD0
0521A:  CLRF   xD1
0521C:  CLRF   xD2
0521E:  CLRF   xD3
05220:  CLRF   xD4
05222:  CLRF   xD5
05224:  CLRF   xD6
05226:  CLRF   xD7
05228:  CLRF   xD8
0522A:  CLRF   xD9
0522C:  CLRF   xDA
0522E:  CLRF   xDB
05230:  CLRF   xDC
05232:  CLRF   xDD
05234:  CLRF   xDE
05236:  CLRF   xDF
05238:  CLRF   xE0
0523A:  CLRF   xE1
0523C:  CLRF   xE2
0523E:  CLRF   xE3
05240:  CLRF   xE4
05242:  CLRF   xE5
05244:  CLRF   xE6
05246:  CLRF   xE7
05248:  CLRF   xE8
0524A:  CLRF   xE9
0524C:  CLRF   xEA
0524E:  CLRF   xEB
05250:  CLRF   xEC
05252:  CLRF   xED
05254:  CLRF   xEE
05256:  CLRF   xEF
05258:  CLRF   xF0
0525A:  CLRF   xF1
0525C:  CLRF   xF2
0525E:  CLRF   xF3
05260:  CLRF   xF4
05262:  CLRF   xF5
05264:  CLRF   xF6
05266:  CLRF   xF7
05268:  CLRF   xF8
0526A:  CLRF   xF9
0526C:  CLRF   xFA
0526E:  CLRF   xFB
05270:  CLRF   xFC
05272:  CLRF   xFD
05274:  CLRF   xFE
05276:  CLRF   xFF
05278:  MOVLB  2
0527A:  CLRF   x00
0527C:  CLRF   x01
0527E:  CLRF   x02
05280:  CLRF   x03
05282:  CLRF   x04
05284:  CLRF   x05
05286:  CLRF   x06
05288:  CLRF   x07
0528A:  CLRF   x08
0528C:  CLRF   x09
0528E:  CLRF   x0A
05290:  CLRF   x0B
05292:  CLRF   x0C
05294:  CLRF   x0D
05296:  CLRF   x0E
05298:  CLRF   x0F
0529A:  CLRF   x10
0529C:  CLRF   x11
0529E:  CLRF   x12
052A0:  CLRF   x13
052A2:  CLRF   x14
052A4:  CLRF   x15
052A6:  CLRF   x16
052A8:  CLRF   x17
052AA:  CLRF   x18
052AC:  CLRF   x19
052AE:  CLRF   x1A
052B0:  CLRF   x1B
052B2:  CLRF   x1C
052B4:  CLRF   x1D
052B6:  CLRF   x1E
052B8:  CLRF   x1F
052BA:  CLRF   x20
052BC:  CLRF   x21
052BE:  CLRF   x22
052C0:  CLRF   x23
052C2:  CLRF   x24
052C4:  CLRF   x25
052C6:  CLRF   x26
052C8:  CLRF   x27
052CA:  CLRF   x28
052CC:  CLRF   x29
052CE:  CLRF   x2A
052D0:  CLRF   x2B
052D2:  CLRF   x2C
052D4:  CLRF   x2D
052D6:  CLRF   x2E
052D8:  CLRF   x2F
052DA:  CLRF   x30
052DC:  CLRF   x31
052DE:  CLRF   x32
052E0:  CLRF   x33
052E2:  CLRF   x34
052E4:  CLRF   x35
052E6:  CLRF   x36
052E8:  CLRF   x37
052EA:  CLRF   x38
052EC:  CLRF   x39
052EE:  CLRF   x3A
052F0:  CLRF   x3B
052F2:  CLRF   x3C
052F4:  CLRF   x3D
052F6:  CLRF   x3E
052F8:  CLRF   x3F
052FA:  CLRF   x40
052FC:  CLRF   x41
052FE:  CLRF   x42
05300:  CLRF   x43
05302:  CLRF   x44
05304:  CLRF   x45
05306:  CLRF   x46
05308:  CLRF   x47
0530A:  CLRF   x48
0530C:  CLRF   x49
0530E:  CLRF   x4A
05310:  CLRF   x4B
05312:  CLRF   x4C
05314:  CLRF   x4D
05316:  CLRF   x4E
05318:  CLRF   x4F
0531A:  CLRF   x50
0531C:  CLRF   x51
0531E:  CLRF   x52
05320:  CLRF   x53
05322:  CLRF   x54
05324:  CLRF   x55
05326:  CLRF   x56
05328:  CLRF   x57
0532A:  CLRF   x58
0532C:  CLRF   x59
0532E:  CLRF   x5A
05330:  CLRF   x5B
05332:  CLRF   x5C
05334:  CLRF   x5D
05336:  CLRF   x5E
05338:  CLRF   x5F
0533A:  CLRF   x60
0533C:  CLRF   x61
0533E:  CLRF   x62
05340:  CLRF   x63
05342:  CLRF   x64
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
05344:  MOVFF  F1,A29
05348:  MOVFF  F0,A28
0534C:  MOVFF  EF,A27
05350:  MOVFF  EE,A26
05354:  MOVFF  164,A2D
05358:  MOVFF  163,A2C
0535C:  MOVFF  162,A2B
05360:  MOVFF  161,A2A
05364:  MOVLW  01
05366:  MOVLB  A
05368:  MOVWF  x2F
0536A:  MOVLW  65
0536C:  MOVWF  x2E
0536E:  MOVLW  01
05370:  MOVWF  x31
05372:  CLRF   x30
05374:  MOVLB  0
05376:  CALL   31D0
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0537A:  MOVLB  1
0537C:  MOVF   x5F,W
0537E:  MOVWF  FE9
05380:  MOVF   x60,W
05382:  MOVWF  FEA
05384:  MOVFF  FEF,265
05388:  MOVFF  265,266
0538C:  MOVLW  02
0538E:  MOVLB  2
05390:  MOVWF  x67
05392:  MOVLB  0
05394:  CALL   3B8C
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
05398:  MOVLW  8A
0539A:  MOVWF  FF6
0539C:  MOVLW  17
0539E:  MOVWF  FF7
053A0:  MOVLW  00
053A2:  MOVWF  FF8
053A4:  CALL   1C8E
053A8:  GOTO   8C20 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
053AC:  MOVLW  AE
053AE:  MOVWF  FF6
053B0:  MOVLW  17
053B2:  MOVWF  FF7
053B4:  MOVLW  00
053B6:  MOVWF  FF8
053B8:  CALL   1C8E
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
053BC:  MOVLB  1
053BE:  MOVF   x5F,W
053C0:  MOVWF  FE9
053C2:  MOVF   x60,W
053C4:  MOVWF  FEA
053C6:  MOVFF  FEF,1B1
053CA:  MOVFF  1B1,266
053CE:  MOVLW  01
053D0:  MOVLB  2
053D2:  MOVWF  x67
053D4:  MOVLB  0
053D6:  CALL   3B8C
....................    FLASH_PARAM flash_param = {0};
053DA:  MOVLB  1
053DC:  CLRF   x61
053DE:  CLRF   x62
053E0:  CLRF   x63
053E2:  CLRF   x64
053E4:  CLRF   x65
053E6:  CLRF   x66
053E8:  CLRF   x67
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
053EA:  MOVF   x5F,W
053EC:  MOVWF  FE9
053EE:  MOVF   x60,W
053F0:  MOVWF  FEA
053F2:  MOVFF  FEF,161
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
053F6:  MOVLW  01
053F8:  ADDWF  x5F,W
053FA:  MOVWF  FE9
053FC:  MOVLW  00
053FE:  ADDWFC x60,W
05400:  MOVWF  FEA
05402:  MOVF   FEF,W
05404:  CLRF   xB4
05406:  CLRF   xB3
05408:  CLRF   xB2
0540A:  MOVWF  xB1
0540C:  MOVFF  1B1,1B4
05410:  CLRF   xB1
05412:  CLRF   xB2
05414:  CLRF   xB3
05416:  MOVLW  02
05418:  ADDWF  x5F,W
0541A:  MOVWF  FE9
0541C:  MOVLW  00
0541E:  ADDWFC x60,W
05420:  MOVWF  FEA
05422:  MOVF   FEF,W
05424:  CLRF   xB9
05426:  CLRF   xB8
05428:  CLRF   xB7
0542A:  MOVWF  xB6
0542C:  MOVFF  1B7,03
05430:  MOVFF  1B6,02
05434:  CLRF   00
05436:  CLRF   01
05438:  MOVF   00,W
0543A:  IORWF  xB1,F
0543C:  MOVF   01,W
0543E:  IORWF  xB2,F
05440:  MOVF   02,W
05442:  IORWF  xB3,F
05444:  MOVF   03,W
05446:  IORWF  xB4,F
05448:  MOVLW  03
0544A:  ADDWF  x5F,W
0544C:  MOVWF  FE9
0544E:  MOVLW  00
05450:  ADDWFC x60,W
05452:  MOVWF  FEA
05454:  MOVF   FEF,W
05456:  CLRF   xB9
05458:  CLRF   xB8
0545A:  CLRF   xB7
0545C:  MOVWF  xB6
0545E:  MOVFF  1B8,03
05462:  MOVFF  1B7,02
05466:  MOVFF  1B6,01
0546A:  CLRF   00
0546C:  MOVF   00,W
0546E:  IORWF  xB1,F
05470:  MOVF   01,W
05472:  IORWF  xB2,F
05474:  MOVF   02,W
05476:  IORWF  xB3,F
05478:  MOVF   03,W
0547A:  IORWF  xB4,F
0547C:  MOVLW  04
0547E:  ADDWF  x5F,W
05480:  MOVWF  FE9
05482:  MOVLW  00
05484:  ADDWFC x60,W
05486:  MOVWF  FEA
05488:  MOVF   FEF,W
0548A:  MOVWF  00
0548C:  CLRF   01
0548E:  CLRF   02
05490:  CLRF   03
05492:  MOVF   00,W
05494:  IORWF  xB1,W
05496:  MOVWF  x64
05498:  MOVF   01,W
0549A:  IORWF  xB2,W
0549C:  MOVWF  x65
0549E:  MOVF   02,W
054A0:  IORWF  xB3,W
054A2:  MOVWF  x66
054A4:  MOVF   03,W
054A6:  IORWF  xB4,W
054A8:  MOVWF  x67
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
054AA:  MOVLW  07
054AC:  ADDWF  x5F,W
054AE:  MOVWF  FE9
054B0:  MOVLW  00
054B2:  ADDWFC x60,W
054B4:  MOVWF  FEA
054B6:  MOVF   FEF,W
054B8:  CLRF   xB2
054BA:  MOVWF  xB1
054BC:  MOVFF  1B1,1B2
054C0:  CLRF   xB1
054C2:  MOVLW  08
054C4:  ADDWF  x5F,W
054C6:  MOVWF  FE9
054C8:  MOVLW  00
054CA:  ADDWFC x60,W
054CC:  MOVWF  FEA
054CE:  MOVF   FEF,W
054D0:  CLRF   03
054D2:  IORWF  xB1,W
054D4:  MOVWF  x62
054D6:  MOVF   03,W
054D8:  IORWF  xB2,W
054DA:  MOVWF  x63
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
054DC:  MOVLW  C2
054DE:  MOVWF  FF6
054E0:  MOVLW  17
054E2:  MOVWF  FF7
054E4:  MOVLW  00
054E6:  MOVWF  FF8
054E8:  MOVLW  0C
054EA:  MOVLB  9
054EC:  MOVWF  x96
054EE:  MOVLB  0
054F0:  CALL   1CBE
054F4:  MOVFF  161,996
054F8:  MOVLW  37
054FA:  MOVLB  9
054FC:  MOVWF  x97
054FE:  MOVLB  0
05500:  CALL   1EBC
05504:  MOVLW  0D
05506:  MOVLB  A
05508:  MOVWF  x29
0550A:  MOVLB  0
0550C:  CALL   1C3C
05510:  MOVLW  0A
05512:  MOVLB  A
05514:  MOVWF  x29
05516:  MOVLB  0
05518:  CALL   1C3C
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
0551C:  MOVLW  D6
0551E:  MOVWF  FF6
05520:  MOVLW  17
05522:  MOVWF  FF7
05524:  MOVLW  00
05526:  MOVWF  FF8
05528:  MOVLW  0E
0552A:  MOVLB  9
0552C:  MOVWF  x96
0552E:  MOVLB  0
05530:  CALL   1CBE
05534:  MOVFF  167,996
05538:  MOVLW  37
0553A:  MOVLB  9
0553C:  MOVWF  x97
0553E:  MOVLB  0
05540:  CALL   1EBC
05544:  MOVFF  166,996
05548:  MOVLW  37
0554A:  MOVLB  9
0554C:  MOVWF  x97
0554E:  MOVLB  0
05550:  CALL   1EBC
05554:  MOVFF  165,996
05558:  MOVLW  37
0555A:  MOVLB  9
0555C:  MOVWF  x97
0555E:  MOVLB  0
05560:  CALL   1EBC
05564:  MOVFF  164,996
05568:  MOVLW  37
0556A:  MOVLB  9
0556C:  MOVWF  x97
0556E:  MOVLB  0
05570:  CALL   1EBC
05574:  MOVLW  0D
05576:  MOVLB  A
05578:  MOVWF  x29
0557A:  MOVLB  0
0557C:  CALL   1C3C
05580:  MOVLW  0A
05582:  MOVLB  A
05584:  MOVWF  x29
05586:  MOVLB  0
05588:  CALL   1C3C
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
0558C:  MOVLW  EC
0558E:  MOVWF  FF6
05590:  MOVLW  17
05592:  MOVWF  FF7
05594:  MOVLW  00
05596:  MOVWF  FF8
05598:  MOVLW  0E
0559A:  MOVLB  9
0559C:  MOVWF  x96
0559E:  MOVLB  0
055A0:  CALL   1CBE
055A4:  MOVFF  163,996
055A8:  MOVLW  37
055AA:  MOVLB  9
055AC:  MOVWF  x97
055AE:  MOVLB  0
055B0:  CALL   1EBC
055B4:  MOVFF  162,996
055B8:  MOVLW  37
055BA:  MOVLB  9
055BC:  MOVWF  x97
055BE:  MOVLB  0
055C0:  CALL   1EBC
055C4:  MOVLW  0D
055C6:  MOVLB  A
055C8:  MOVWF  x29
055CA:  MOVLB  0
055CC:  CALL   1C3C
055D0:  MOVLW  0A
055D2:  MOVLB  A
055D4:  MOVWF  x29
055D6:  MOVLB  0
055D8:  CALL   1C3C
....................    
....................    piclog_make(flash_param.id, 0x00);
055DC:  MOVFF  161,266
055E0:  MOVLB  2
055E2:  CLRF   x67
055E4:  MOVLB  0
055E6:  CALL   3B8C
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
055EA:  MOVLB  1
055EC:  CLRF   x68
055EE:  CLRF   x69
055F0:  CLRF   x6A
055F2:  CLRF   x6B
055F4:  CLRF   x6C
055F6:  CLRF   x6D
055F8:  CLRF   x6E
055FA:  CLRF   x6F
055FC:  CLRF   x70
055FE:  CLRF   x71
05600:  CLRF   x72
05602:  CLRF   x73
05604:  CLRF   x74
05606:  CLRF   x75
05608:  CLRF   x76
0560A:  CLRF   x77
0560C:  CLRF   x78
0560E:  CLRF   x79
05610:  CLRF   x7A
05612:  CLRF   x7B
05614:  CLRF   x7C
05616:  CLRF   x7D
05618:  CLRF   x7E
0561A:  CLRF   x7F
0561C:  CLRF   x80
0561E:  CLRF   x81
05620:  CLRF   x82
05622:  CLRF   x83
05624:  CLRF   x84
05626:  CLRF   x85
05628:  CLRF   x86
0562A:  CLRF   x87
0562C:  CLRF   x88
0562E:  CLRF   x89
05630:  CLRF   x8A
05632:  CLRF   x8B
05634:  CLRF   x8C
05636:  CLRF   x8D
05638:  CLRF   x8E
0563A:  CLRF   x8F
0563C:  CLRF   x90
0563E:  CLRF   x91
05640:  CLRF   x92
05642:  CLRF   x93
05644:  CLRF   x94
05646:  CLRF   x95
05648:  CLRF   x96
0564A:  CLRF   x97
0564C:  CLRF   x98
0564E:  CLRF   x99
05650:  CLRF   x9A
05652:  CLRF   x9B
05654:  CLRF   x9C
05656:  CLRF   x9D
05658:  CLRF   x9E
0565A:  CLRF   x9F
0565C:  CLRF   xA0
0565E:  CLRF   xA1
05660:  CLRF   xA2
05662:  CLRF   xA3
05664:  CLRF   xA4
05666:  CLRF   xA5
05668:  CLRF   xA6
0566A:  CLRF   xA7
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
0566C:  MOVLW  02
0566E:  MOVWF  FF6
05670:  MOVLW  18
05672:  MOVWF  FF7
05674:  MOVLW  00
05676:  MOVWF  FF8
05678:  MOVLB  0
0567A:  CALL   1C8E
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
0567E:  MOVFF  F1,A29
05682:  MOVFF  F0,A28
05686:  MOVFF  EF,A27
0568A:  MOVFF  EE,A26
0568E:  CALL   232E
05692:  MOVF   01,F
05694:  BTFSS  FD8.2
05696:  GOTO   56AA
....................       fprintf(PC, "Mission Flash is not connected\r\n");
0569A:  MOVLW  0E
0569C:  MOVWF  FF6
0569E:  MOVLW  18
056A0:  MOVWF  FF7
056A2:  MOVLW  00
056A4:  MOVWF  FF8
056A6:  CALL   1C8E
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
056AA:  MOVLB  1
056AC:  CLRF   xAF
056AE:  CLRF   xAE
056B0:  CLRF   xAD
056B2:  CLRF   xAC
056B4:  MOVLB  0
056B6:  MOVLB  1
056B8:  MOVF   xAF,F
056BA:  BTFSC  FD8.2
056BC:  BRA    56C4
056BE:  MOVLB  0
056C0:  GOTO   5812
056C4:  MOVLB  0
056C6:  MOVLB  1
056C8:  MOVF   xAE,F
056CA:  BTFSC  FD8.2
056CC:  BRA    56D4
056CE:  MOVLB  0
056D0:  GOTO   5812
056D4:  MOVLB  0
056D6:  MOVLB  1
056D8:  MOVF   xAD,W
056DA:  SUBWF  x63,W
056DC:  BTFSC  FD8.0
056DE:  BRA    56E6
056E0:  MOVLB  0
056E2:  GOTO   5812
056E6:  MOVLB  0
056E8:  BTFSS  FD8.2
056EA:  GOTO   5700
056EE:  MOVLB  1
056F0:  MOVF   x62,W
056F2:  SUBWF  xAC,W
056F4:  BTFSS  FD8.0
056F6:  BRA    56FE
056F8:  MOVLB  0
056FA:  GOTO   5812
056FE:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
05700:  MOVLB  1
05702:  RLCF   xAC,W
05704:  MOVWF  00
05706:  RLCF   xAD,W
05708:  MOVWF  01
0570A:  RLCF   xAE,W
0570C:  MOVWF  02
0570E:  RLCF   xAF,W
05710:  MOVWF  03
05712:  RLCF   00,F
05714:  RLCF   01,F
05716:  RLCF   02,F
05718:  RLCF   03,F
0571A:  RLCF   00,F
0571C:  RLCF   01,F
0571E:  RLCF   02,F
05720:  RLCF   03,F
05722:  RLCF   00,F
05724:  RLCF   01,F
05726:  RLCF   02,F
05728:  RLCF   03,F
0572A:  RLCF   00,F
0572C:  RLCF   01,F
0572E:  RLCF   02,F
05730:  RLCF   03,F
05732:  RLCF   00,F
05734:  RLCF   01,F
05736:  RLCF   02,F
05738:  RLCF   03,F
0573A:  MOVLW  C0
0573C:  ANDWF  00,F
0573E:  MOVF   00,W
05740:  ADDWF  x64,W
05742:  MOVWF  xA8
05744:  MOVF   01,W
05746:  ADDWFC x65,W
05748:  MOVWF  xA9
0574A:  MOVF   02,W
0574C:  ADDWFC x66,W
0574E:  MOVWF  xAA
05750:  MOVF   03,W
05752:  ADDWFC x67,W
05754:  MOVWF  xAB
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
05756:  MOVFF  F1,270
0575A:  MOVFF  F0,26F
0575E:  MOVFF  EF,26E
05762:  MOVFF  EE,26D
05766:  MOVFF  1AB,274
0576A:  MOVFF  1AA,273
0576E:  MOVFF  1A9,272
05772:  MOVFF  1A8,271
05776:  MOVLW  01
05778:  MOVLB  2
0577A:  MOVWF  x76
0577C:  MOVLW  68
0577E:  MOVWF  x75
05780:  CLRF   x7A
05782:  CLRF   x79
05784:  CLRF   x78
05786:  MOVLW  40
05788:  MOVWF  x77
0578A:  MOVLB  0
0578C:  CALL   23F4
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
05790:  MOVLB  1
05792:  CLRF   xB0
05794:  MOVLB  0
05796:  MOVLB  1
05798:  MOVF   xB0,W
0579A:  SUBLW  3F
0579C:  BTFSC  FD8.0
0579E:  BRA    57A6
057A0:  MOVLB  0
057A2:  GOTO   57E2
057A6:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
057A8:  CLRF   03
057AA:  MOVLB  1
057AC:  MOVF   xB0,W
057AE:  ADDLW  68
057B0:  MOVWF  FE9
057B2:  MOVLW  01
057B4:  ADDWFC 03,W
057B6:  MOVWF  FEA
057B8:  MOVFF  FEF,1B1
057BC:  MOVFF  1B1,996
057C0:  MOVLW  37
057C2:  MOVLB  9
057C4:  MOVWF  x97
057C6:  MOVLB  0
057C8:  CALL   1EBC
057CC:  MOVLW  20
057CE:  MOVLB  A
057D0:  MOVWF  x29
057D2:  MOVLB  0
057D4:  CALL   1C3C
057D8:  MOVLB  1
057DA:  INCF   xB0,F
057DC:  MOVLB  0
057DE:  GOTO   5796
....................       }
....................       fprintf(PC,"\r\n");
057E2:  MOVLW  0D
057E4:  MOVLB  A
057E6:  MOVWF  x29
057E8:  MOVLB  0
057EA:  CALL   1C3C
057EE:  MOVLW  0A
057F0:  MOVLB  A
057F2:  MOVWF  x29
057F4:  MOVLB  0
057F6:  CALL   1C3C
057FA:  MOVLW  01
057FC:  MOVLB  1
057FE:  ADDWF  xAC,F
05800:  BTFSC  FD8.0
05802:  INCF   xAD,F
05804:  BTFSC  FD8.2
05806:  INCF   xAE,F
05808:  BTFSC  FD8.2
0580A:  INCF   xAF,F
0580C:  MOVLB  0
0580E:  GOTO   56B6
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05812:  MOVFF  161,266
05816:  MOVLW  02
05818:  MOVLB  2
0581A:  MOVWF  x67
0581C:  MOVLB  0
0581E:  CALL   3B8C
....................    fprintf(PC, "End Flash Read\r\n");
05822:  MOVLW  30
05824:  MOVWF  FF6
05826:  MOVLW  18
05828:  MOVWF  FF7
0582A:  MOVLW  00
0582C:  MOVWF  FF8
0582E:  CALL   1C8E
05832:  GOTO   8C30 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
05836:  MOVLW  42
05838:  MOVWF  FF6
0583A:  MOVLW  18
0583C:  MOVWF  FF7
0583E:  MOVLW  00
05840:  MOVWF  FF8
05842:  CALL   1C8E
....................    flash_setting(mis_fm);
05846:  MOVFF  F1,26C
0584A:  MOVFF  F0,26B
0584E:  MOVFF  EF,26A
05852:  MOVFF  EE,269
05856:  CALL   50BE
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
0585A:  MOVLB  1
0585C:  CLRF   x64
0585E:  CLRF   x63
05860:  CLRF   x62
05862:  CLRF   x61
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
05864:  MOVFF  F1,270
05868:  MOVFF  F0,26F
0586C:  MOVFF  EF,26E
05870:  MOVFF  EE,26D
05874:  MOVFF  164,274
05878:  MOVFF  163,273
0587C:  MOVFF  162,272
05880:  MOVFF  161,271
05884:  MOVLW  01
05886:  MOVLB  2
05888:  MOVWF  x76
0588A:  MOVLW  65
0588C:  MOVWF  x75
0588E:  CLRF   x7A
05890:  CLRF   x79
05892:  CLRF   x78
05894:  MOVLW  04
05896:  MOVWF  x77
05898:  MOVLB  0
0589A:  CALL   23F4
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
0589E:  MOVLW  5E
058A0:  MOVWF  FF6
058A2:  MOVLW  18
058A4:  MOVWF  FF7
058A6:  MOVLW  00
058A8:  MOVWF  FF8
058AA:  MOVLW  0B
058AC:  MOVLB  9
058AE:  MOVWF  x96
058B0:  MOVLB  0
058B2:  CALL   1CBE
058B6:  MOVFF  165,996
058BA:  MOVLW  37
058BC:  MOVLB  9
058BE:  MOVWF  x97
058C0:  MOVLB  0
058C2:  CALL   1EBC
058C6:  MOVLW  20
058C8:  MOVLB  A
058CA:  MOVWF  x29
058CC:  MOVLB  0
058CE:  CALL   1C3C
058D2:  MOVFF  166,996
058D6:  MOVLW  37
058D8:  MOVLB  9
058DA:  MOVWF  x97
058DC:  MOVLB  0
058DE:  CALL   1EBC
058E2:  MOVLW  20
058E4:  MOVLB  A
058E6:  MOVWF  x29
058E8:  MOVLB  0
058EA:  CALL   1C3C
058EE:  MOVFF  167,996
058F2:  MOVLW  37
058F4:  MOVLB  9
058F6:  MOVWF  x97
058F8:  MOVLB  0
058FA:  CALL   1EBC
058FE:  MOVLW  20
05900:  MOVLB  A
05902:  MOVWF  x29
05904:  MOVLB  0
05906:  CALL   1C3C
0590A:  MOVFF  168,996
0590E:  MOVLW  37
05910:  MOVLB  9
05912:  MOVWF  x97
05914:  MOVLB  0
05916:  CALL   1EBC
0591A:  MOVLW  0D
0591C:  MOVLB  A
0591E:  MOVWF  x29
05920:  MOVLB  0
05922:  CALL   1C3C
05926:  MOVLW  0A
05928:  MOVLB  A
0592A:  MOVWF  x29
0592C:  MOVLB  0
0592E:  CALL   1C3C
....................    fprintf(PC, "End Flash Read Address\r\n");
05932:  MOVLW  80
05934:  MOVWF  FF6
05936:  MOVLW  18
05938:  MOVWF  FF7
0593A:  MOVLW  00
0593C:  MOVWF  FF8
0593E:  CALL   1C8E
05942:  GOTO   8C40 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
05A5A:  MOVLW  9A
05A5C:  MOVWF  FF6
05A5E:  MOVLW  18
05A60:  MOVWF  FF7
05A62:  MOVLW  00
05A64:  MOVWF  FF8
05A66:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05A6A:  MOVLB  1
05A6C:  MOVF   x5F,W
05A6E:  MOVWF  FE9
05A70:  MOVF   x60,W
05A72:  MOVWF  FEA
05A74:  MOVFF  FEF,161
05A78:  MOVFF  161,266
05A7C:  MOVLW  01
05A7E:  MOVLB  2
05A80:  MOVWF  x67
05A82:  MOVLB  0
05A84:  CALL   3B8C
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
05A88:  MOVFF  160,162
05A8C:  MOVFF  15F,161
05A90:  CALL   4780
....................    mode_misf_address_reset(parameter); // Reset the address area
05A94:  MOVFF  160,162
05A98:  MOVFF  15F,161
05A9C:  GOTO   5946
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
05AA0:  MOVLW  B8
05AA2:  MOVWF  FF6
05AA4:  MOVLW  18
05AA6:  MOVWF  FF7
05AA8:  MOVLW  00
05AAA:  MOVWF  FF8
05AAC:  CALL   1C8E
05AB0:  GOTO   8C50 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
05AB4:  MOVLW  0A
05AB6:  MOVWF  FF6
05AB8:  MOVLW  19
05ABA:  MOVWF  FF7
05ABC:  MOVLW  00
05ABE:  MOVWF  FF8
05AC0:  CALL   1C8E
....................    flash_setting(mis_fm);
05AC4:  MOVFF  F1,26C
05AC8:  MOVFF  F0,26B
05ACC:  MOVFF  EF,26A
05AD0:  MOVFF  EE,269
05AD4:  CALL   50BE
....................    flash_setting(smf);
05AD8:  MOVFF  F5,26C
05ADC:  MOVFF  F4,26B
05AE0:  MOVFF  F3,26A
05AE4:  MOVFF  F2,269
05AE8:  CALL   50BE
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
05AEC:  MOVLB  1
05AEE:  CLRF   x64
05AF0:  CLRF   x63
05AF2:  CLRF   x62
05AF4:  CLRF   x61
05AF6:  CLRF   x68
05AF8:  CLRF   x67
05AFA:  MOVLW  10
05AFC:  MOVWF  x66
05AFE:  CLRF   x65
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
05B00:  MOVFF  F1,270
05B04:  MOVFF  F0,26F
05B08:  MOVFF  EF,26E
05B0C:  MOVFF  EE,26D
05B10:  MOVFF  164,274
05B14:  MOVFF  163,273
05B18:  MOVFF  162,272
05B1C:  MOVFF  161,271
05B20:  MOVLW  01
05B22:  MOVLB  2
05B24:  MOVWF  x76
05B26:  MOVLW  69
05B28:  MOVWF  x75
05B2A:  CLRF   x7A
05B2C:  CLRF   x79
05B2E:  MOVLW  01
05B30:  MOVWF  x78
05B32:  CLRF   x77
05B34:  MOVLB  0
05B36:  CALL   23F4
....................    write_data_bytes(smf, dest_address, read_data, 256);
05B3A:  MOVFF  F5,A29
05B3E:  MOVFF  F4,A28
05B42:  MOVFF  F3,A27
05B46:  MOVFF  F2,A26
05B4A:  MOVFF  168,A2D
05B4E:  MOVFF  167,A2C
05B52:  MOVFF  166,A2B
05B56:  MOVFF  165,A2A
05B5A:  MOVLW  01
05B5C:  MOVLB  A
05B5E:  MOVWF  x2F
05B60:  MOVLW  69
05B62:  MOVWF  x2E
05B64:  MOVLW  01
05B66:  MOVWF  x31
05B68:  CLRF   x30
05B6A:  MOVLB  0
05B6C:  CALL   31D0
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
05B70:  MOVLW  22
05B72:  MOVWF  FF6
05B74:  MOVLW  19
05B76:  MOVWF  FF7
05B78:  MOVLW  00
05B7A:  MOVWF  FF8
05B7C:  CALL   1C8E
05B80:  GOTO   8C60 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
05B84:  MOVLW  38
05B86:  MOVWF  FF6
05B88:  MOVLW  19
05B8A:  MOVWF  FF7
05B8C:  MOVLW  00
05B8E:  MOVWF  FF8
05B90:  CALL   1C8E
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
05B94:  MOVLW  50
05B96:  MOVWF  FF6
05B98:  MOVLW  19
05B9A:  MOVWF  FF7
05B9C:  MOVLW  00
05B9E:  MOVWF  FF8
05BA0:  CALL   1C8E
....................    for (int i = 0; i < 256; i++)
05BA4:  MOVLB  2
05BA6:  CLRF   x61
05BA8:  MOVLB  0
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
05BAA:  CLRF   03
05BAC:  MOVLB  2
05BAE:  MOVF   x61,W
05BB0:  ADDLW  61
05BB2:  MOVWF  FE9
05BB4:  MOVLW  01
05BB6:  ADDWFC 03,W
05BB8:  MOVWF  FEA
05BBA:  MOVFF  FEF,262
05BBE:  MOVFF  262,996
05BC2:  MOVLW  37
05BC4:  MOVLB  9
05BC6:  MOVWF  x97
05BC8:  MOVLB  0
05BCA:  CALL   1EBC
05BCE:  MOVLW  20
05BD0:  MOVLB  A
05BD2:  MOVWF  x29
05BD4:  MOVLB  0
05BD6:  CALL   1C3C
05BDA:  MOVLB  2
05BDC:  INCF   x61,F
05BDE:  MOVLB  0
05BE0:  GOTO   5BAA
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
05BE4:  MOVLW  5C
05BE6:  MOVWF  FF6
05BE8:  MOVLW  19
05BEA:  MOVWF  FF7
05BEC:  MOVLW  00
05BEE:  MOVWF  FF8
05BF0:  CALL   1C8E
05BF4:  GOTO   8C70 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
05BF8:  MOVLW  74
05BFA:  MOVWF  FF6
05BFC:  MOVLW  19
05BFE:  MOVWF  FF7
05C00:  MOVLW  00
05C02:  MOVWF  FF8
05C04:  CALL   1C8E
....................    flash_setting(smf);
05C08:  MOVFF  F5,26C
05C0C:  MOVFF  F4,26B
05C10:  MOVFF  F3,26A
05C14:  MOVFF  F2,269
05C18:  CALL   50BE
....................    unsigned int32 erase_address = 0x00000000; // Example address
05C1C:  MOVLB  1
05C1E:  CLRF   x64
05C20:  CLRF   x63
05C22:  CLRF   x62
05C24:  CLRF   x61
....................    sector_erase(smf, erase_address); // Erase the sector
05C26:  MOVFF  F5,1A8
05C2A:  MOVFF  F4,1A7
05C2E:  MOVFF  F3,1A6
05C32:  MOVFF  F2,1A5
05C36:  MOVFF  164,1AC
05C3A:  MOVFF  163,1AB
05C3E:  MOVFF  162,1AA
05C42:  MOVFF  161,1A9
05C46:  MOVLB  0
05C48:  CALL   4424
....................    fprintf(PC, "End Flash SMF Erase\r\n");
05C4C:  MOVLW  8C
05C4E:  MOVWF  FF6
05C50:  MOVLW  19
05C52:  MOVWF  FF7
05C54:  MOVLW  00
05C56:  MOVWF  FF8
05C58:  CALL   1C8E
05C5C:  GOTO   8C80 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
05946:  MOVLW  A2
05948:  MOVWF  FF6
0594A:  MOVLW  19
0594C:  MOVWF  FF7
0594E:  MOVLW  00
05950:  MOVWF  FF8
05952:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05956:  MOVLB  1
05958:  MOVF   x61,W
0595A:  MOVWF  FE9
0595C:  MOVF   x62,W
0595E:  MOVWF  FEA
05960:  MOVFF  FEF,1A3
05964:  MOVFF  1A3,266
05968:  MOVLW  01
0596A:  MOVLB  2
0596C:  MOVWF  x67
0596E:  MOVLB  0
05970:  CALL   3B8C
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05974:  MOVLB  1
05976:  CLRF   x63
05978:  CLRF   x64
0597A:  CLRF   x65
0597C:  CLRF   x66
0597E:  CLRF   x67
05980:  CLRF   x68
05982:  CLRF   x69
05984:  CLRF   x6A
05986:  CLRF   x6B
05988:  CLRF   x6C
0598A:  CLRF   x6D
0598C:  CLRF   x6E
0598E:  CLRF   x6F
05990:  CLRF   x70
05992:  CLRF   x71
05994:  CLRF   x72
05996:  CLRF   x73
05998:  CLRF   x74
0599A:  CLRF   x75
0599C:  CLRF   x76
0599E:  CLRF   x77
059A0:  CLRF   x78
059A2:  CLRF   x79
059A4:  CLRF   x7A
059A6:  CLRF   x7B
059A8:  CLRF   x7C
059AA:  CLRF   x7D
059AC:  CLRF   x7E
059AE:  CLRF   x7F
059B0:  CLRF   x80
059B2:  CLRF   x81
059B4:  CLRF   x82
059B6:  CLRF   x83
059B8:  CLRF   x84
059BA:  CLRF   x85
059BC:  CLRF   x86
059BE:  CLRF   x87
059C0:  CLRF   x88
059C2:  CLRF   x89
059C4:  CLRF   x8A
059C6:  CLRF   x8B
059C8:  CLRF   x8C
059CA:  CLRF   x8D
059CC:  CLRF   x8E
059CE:  CLRF   x8F
059D0:  CLRF   x90
059D2:  CLRF   x91
059D4:  CLRF   x92
059D6:  CLRF   x93
059D8:  CLRF   x94
059DA:  CLRF   x95
059DC:  CLRF   x96
059DE:  CLRF   x97
059E0:  CLRF   x98
059E2:  CLRF   x99
059E4:  CLRF   x9A
059E6:  CLRF   x9B
059E8:  CLRF   x9C
059EA:  CLRF   x9D
059EC:  CLRF   x9E
059EE:  CLRF   x9F
059F0:  CLRF   xA0
059F2:  CLRF   xA1
059F4:  CLRF   xA2
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
059F6:  MOVFF  F1,A29
059FA:  MOVFF  F0,A28
059FE:  MOVFF  EF,A27
05A02:  MOVFF  EE,A26
05A06:  MOVLB  A
05A08:  CLRF   x2D
05A0A:  CLRF   x2C
05A0C:  CLRF   x2B
05A0E:  CLRF   x2A
05A10:  MOVLW  01
05A12:  MOVWF  x2F
05A14:  MOVLW  63
05A16:  MOVWF  x2E
05A18:  CLRF   x31
05A1A:  MOVLW  40
05A1C:  MOVWF  x30
05A1E:  MOVLB  0
05A20:  CALL   31D0
....................    misf_init(); // Update the address area after writing
05A24:  CALL   26DA
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05A28:  MOVLB  1
05A2A:  MOVF   x61,W
05A2C:  MOVWF  FE9
05A2E:  MOVF   x62,W
05A30:  MOVWF  FEA
05A32:  MOVFF  FEF,1A3
05A36:  MOVFF  1A3,266
05A3A:  MOVLW  02
05A3C:  MOVLB  2
05A3E:  MOVWF  x67
05A40:  MOVLB  0
05A42:  CALL   3B8C
....................    fprintf(PC, "End Flash Address Reset\r\n");
05A46:  MOVLW  BE
05A48:  MOVWF  FF6
05A4A:  MOVLW  19
05A4C:  MOVWF  FF7
05A4E:  MOVLW  00
05A50:  MOVWF  FF8
05A52:  CALL   1C8E
05A56:  GOTO   5AA0 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
05E16:  MOVLW  01
05E18:  MOVLB  1
05E1A:  ADDWF  x5F,W
05E1C:  MOVWF  FE9
05E1E:  MOVLW  00
05E20:  ADDWFC x60,W
05E22:  MOVWF  FEA
05E24:  MOVF   FEF,W
05E26:  CLRF   xB1
05E28:  CLRF   xB0
05E2A:  CLRF   xAF
05E2C:  MOVWF  xAE
05E2E:  MOVFF  1AE,1B1
05E32:  CLRF   xAE
05E34:  CLRF   xAF
05E36:  CLRF   xB0
05E38:  MOVLW  02
05E3A:  ADDWF  x5F,W
05E3C:  MOVWF  FE9
05E3E:  MOVLW  00
05E40:  ADDWFC x60,W
05E42:  MOVWF  FEA
05E44:  MOVF   FEF,W
05E46:  CLRF   xB6
05E48:  CLRF   xB5
05E4A:  CLRF   xB4
05E4C:  MOVWF  xB3
05E4E:  MOVFF  1B4,03
05E52:  MOVFF  1B3,02
05E56:  CLRF   00
05E58:  CLRF   01
05E5A:  MOVF   00,W
05E5C:  IORWF  xAE,F
05E5E:  MOVF   01,W
05E60:  IORWF  xAF,F
05E62:  MOVF   02,W
05E64:  IORWF  xB0,F
05E66:  MOVF   03,W
05E68:  IORWF  xB1,F
05E6A:  MOVLW  03
05E6C:  ADDWF  x5F,W
05E6E:  MOVWF  FE9
05E70:  MOVLW  00
05E72:  ADDWFC x60,W
05E74:  MOVWF  FEA
05E76:  MOVF   FEF,W
05E78:  CLRF   xB6
05E7A:  CLRF   xB5
05E7C:  CLRF   xB4
05E7E:  MOVWF  xB3
05E80:  MOVFF  1B5,03
05E84:  MOVFF  1B4,02
05E88:  MOVFF  1B3,01
05E8C:  CLRF   00
05E8E:  MOVF   00,W
05E90:  IORWF  xAE,F
05E92:  MOVF   01,W
05E94:  IORWF  xAF,F
05E96:  MOVF   02,W
05E98:  IORWF  xB0,F
05E9A:  MOVF   03,W
05E9C:  IORWF  xB1,F
05E9E:  MOVLW  04
05EA0:  ADDWF  x5F,W
05EA2:  MOVWF  FE9
05EA4:  MOVLW  00
05EA6:  ADDWFC x60,W
05EA8:  MOVWF  FEA
05EAA:  MOVF   FEF,W
05EAC:  MOVWF  00
05EAE:  CLRF   01
05EB0:  CLRF   02
05EB2:  CLRF   03
05EB4:  MOVF   00,W
05EB6:  IORWF  xAE,W
05EB8:  MOVWF  x61
05EBA:  MOVF   01,W
05EBC:  IORWF  xAF,W
05EBE:  MOVWF  x62
05EC0:  MOVF   02,W
05EC2:  IORWF  xB0,W
05EC4:  MOVWF  x63
05EC6:  MOVF   03,W
05EC8:  IORWF  xB1,W
05ECA:  MOVWF  x64
05ECC:  MOVLW  07
05ECE:  ADDWF  x5F,W
05ED0:  MOVWF  FE9
05ED2:  MOVLW  00
05ED4:  ADDWFC x60,W
05ED6:  MOVWF  FEA
05ED8:  MOVF   FEF,W
05EDA:  CLRF   xAF
05EDC:  MOVWF  xAE
05EDE:  MOVFF  1AE,1AF
05EE2:  CLRF   xAE
05EE4:  MOVLW  08
05EE6:  ADDWF  x5F,W
05EE8:  MOVWF  FE9
05EEA:  MOVLW  00
05EEC:  ADDWFC x60,W
05EEE:  MOVWF  FEA
05EF0:  MOVF   FEF,W
05EF2:  CLRF   03
05EF4:  IORWF  xAE,W
05EF6:  MOVWF  x65
05EF8:  MOVF   03,W
05EFA:  IORWF  xAF,W
05EFC:  MOVWF  x66
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
05EFE:  CLRF   x67
05F00:  CLRF   x68
05F02:  CLRF   x69
05F04:  CLRF   x6A
05F06:  CLRF   x6B
05F08:  CLRF   x6C
05F0A:  CLRF   x6D
05F0C:  CLRF   x6E
05F0E:  CLRF   x6F
05F10:  CLRF   x70
05F12:  CLRF   x71
05F14:  CLRF   x72
05F16:  CLRF   x73
05F18:  CLRF   x74
05F1A:  CLRF   x75
05F1C:  CLRF   x76
05F1E:  CLRF   x77
05F20:  CLRF   x78
05F22:  CLRF   x79
05F24:  CLRF   x7A
05F26:  CLRF   x7B
05F28:  CLRF   x7C
05F2A:  CLRF   x7D
05F2C:  CLRF   x7E
05F2E:  CLRF   x7F
05F30:  CLRF   x80
05F32:  CLRF   x81
05F34:  CLRF   x82
05F36:  CLRF   x83
05F38:  CLRF   x84
05F3A:  CLRF   x85
05F3C:  CLRF   x86
05F3E:  CLRF   x87
05F40:  CLRF   x88
05F42:  CLRF   x89
05F44:  CLRF   x8A
05F46:  CLRF   x8B
05F48:  CLRF   x8C
05F4A:  CLRF   x8D
05F4C:  CLRF   x8E
05F4E:  CLRF   x8F
05F50:  CLRF   x90
05F52:  CLRF   x91
05F54:  CLRF   x92
05F56:  CLRF   x93
05F58:  CLRF   x94
05F5A:  CLRF   x95
05F5C:  CLRF   x96
05F5E:  CLRF   x97
05F60:  CLRF   x98
05F62:  CLRF   x99
05F64:  CLRF   x9A
05F66:  CLRF   x9B
05F68:  CLRF   x9C
05F6A:  CLRF   x9D
05F6C:  CLRF   x9E
05F6E:  CLRF   x9F
05F70:  CLRF   xA0
05F72:  CLRF   xA1
05F74:  CLRF   xA2
05F76:  CLRF   xA3
05F78:  CLRF   xA4
05F7A:  CLRF   xA5
05F7C:  CLRF   xA6
....................    if(!is_connect(smf)) {
05F7E:  MOVFF  F5,A29
05F82:  MOVFF  F4,A28
05F86:  MOVFF  F3,A27
05F8A:  MOVFF  F2,A26
05F8E:  MOVLB  0
05F90:  CALL   232E
05F94:  MOVF   01,F
05F96:  BTFSS  FD8.2
05F98:  GOTO   5FB0
....................       fprintf(PC, "SMF is not connected\r\n");
05F9C:  MOVLW  D8
05F9E:  MOVWF  FF6
05FA0:  MOVLW  19
05FA2:  MOVWF  FF7
05FA4:  MOVLW  00
05FA6:  MOVWF  FF8
05FA8:  CALL   1C8E
....................       return;
05FAC:  GOTO   61FC
....................    }
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
05FB0:  MOVLW  F0
05FB2:  MOVWF  FF6
05FB4:  MOVLW  19
05FB6:  MOVWF  FF7
05FB8:  MOVLW  00
05FBA:  MOVWF  FF8
05FBC:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05FC0:  MOVLB  1
05FC2:  MOVF   x5F,W
05FC4:  MOVWF  FE9
05FC6:  MOVF   x60,W
05FC8:  MOVWF  FEA
05FCA:  MOVFF  FEF,1AE
05FCE:  MOVFF  1AE,266
05FD2:  MOVLW  01
05FD4:  MOVLB  2
05FD6:  MOVWF  x67
05FD8:  MOVLB  0
05FDA:  CALL   3B8C
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
05FDE:  MOVLW  0E
05FE0:  MOVWF  FF6
05FE2:  MOVLW  1A
05FE4:  MOVWF  FF7
05FE6:  MOVLW  00
05FE8:  MOVWF  FF8
05FEA:  MOVLW  0E
05FEC:  MOVLB  9
05FEE:  MOVWF  x96
05FF0:  MOVLB  0
05FF2:  CALL   1CBE
05FF6:  MOVFF  164,996
05FFA:  MOVLW  37
05FFC:  MOVLB  9
05FFE:  MOVWF  x97
06000:  MOVLB  0
06002:  CALL   1EBC
06006:  MOVFF  163,996
0600A:  MOVLW  37
0600C:  MOVLB  9
0600E:  MOVWF  x97
06010:  MOVLB  0
06012:  CALL   1EBC
06016:  MOVFF  162,996
0601A:  MOVLW  37
0601C:  MOVLB  9
0601E:  MOVWF  x97
06020:  MOVLB  0
06022:  CALL   1EBC
06026:  MOVFF  161,996
0602A:  MOVLW  37
0602C:  MOVLB  9
0602E:  MOVWF  x97
06030:  MOVLB  0
06032:  CALL   1EBC
06036:  MOVLW  0D
06038:  MOVLB  A
0603A:  MOVWF  x29
0603C:  MOVLB  0
0603E:  CALL   1C3C
06042:  MOVLW  0A
06044:  MOVLB  A
06046:  MOVWF  x29
06048:  MOVLB  0
0604A:  CALL   1C3C
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
0604E:  MOVLW  24
06050:  MOVWF  FF6
06052:  MOVLW  1A
06054:  MOVWF  FF7
06056:  MOVLW  00
06058:  MOVWF  FF8
0605A:  MOVLW  0E
0605C:  MOVLB  9
0605E:  MOVWF  x96
06060:  MOVLB  0
06062:  CALL   1CBE
06066:  MOVFF  166,996
0606A:  MOVLW  37
0606C:  MOVLB  9
0606E:  MOVWF  x97
06070:  MOVLB  0
06072:  CALL   1EBC
06076:  MOVFF  165,996
0607A:  MOVLW  37
0607C:  MOVLB  9
0607E:  MOVWF  x97
06080:  MOVLB  0
06082:  CALL   1EBC
06086:  MOVLW  0D
06088:  MOVLB  A
0608A:  MOVWF  x29
0608C:  MOVLB  0
0608E:  CALL   1C3C
06092:  MOVLW  0A
06094:  MOVLB  A
06096:  MOVWF  x29
06098:  MOVLB  0
0609A:  CALL   1C3C
....................    fprintf(PC, "read data\r\n");
0609E:  MOVLW  3A
060A0:  MOVWF  FF6
060A2:  MOVLW  1A
060A4:  MOVWF  FF7
060A6:  MOVLW  00
060A8:  MOVWF  FF8
060AA:  CALL   1C8E
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
060AE:  MOVLB  1
060B0:  CLRF   xA8
060B2:  CLRF   xA7
060B4:  MOVLB  0
060B6:  MOVLB  1
060B8:  MOVF   xA8,W
060BA:  SUBWF  x66,W
060BC:  BTFSC  FD8.0
060BE:  BRA    60C6
060C0:  MOVLB  0
060C2:  GOTO   61CE
060C6:  MOVLB  0
060C8:  BTFSS  FD8.2
060CA:  GOTO   60E0
060CE:  MOVLB  1
060D0:  MOVF   x65,W
060D2:  SUBWF  xA7,W
060D4:  BTFSS  FD8.0
060D6:  BRA    60DE
060D8:  MOVLB  0
060DA:  GOTO   61CE
060DE:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
060E0:  MOVLB  1
060E2:  RLCF   xA7,W
060E4:  MOVWF  02
060E6:  RLCF   xA8,W
060E8:  MOVWF  03
060EA:  RLCF   02,F
060EC:  RLCF   03,F
060EE:  RLCF   02,F
060F0:  RLCF   03,F
060F2:  RLCF   02,F
060F4:  RLCF   03,F
060F6:  RLCF   02,F
060F8:  RLCF   03,F
060FA:  RLCF   02,F
060FC:  RLCF   03,F
060FE:  MOVLW  C0
06100:  ANDWF  02,F
06102:  MOVF   02,W
06104:  ADDWF  x61,W
06106:  MOVWF  xA9
06108:  MOVF   03,W
0610A:  ADDWFC x62,W
0610C:  MOVWF  xAA
0610E:  MOVLW  00
06110:  ADDWFC x63,W
06112:  MOVWF  xAB
06114:  MOVLW  00
06116:  ADDWFC x64,W
06118:  MOVWF  xAC
0611A:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0611C:  MOVFF  F5,270
06120:  MOVFF  F4,26F
06124:  MOVFF  F3,26E
06128:  MOVFF  F2,26D
0612C:  MOVFF  1AC,274
06130:  MOVFF  1AB,273
06134:  MOVFF  1AA,272
06138:  MOVFF  1A9,271
0613C:  MOVLW  01
0613E:  MOVLB  2
06140:  MOVWF  x76
06142:  MOVLW  67
06144:  MOVWF  x75
06146:  CLRF   x7A
06148:  CLRF   x79
0614A:  CLRF   x78
0614C:  MOVLW  40
0614E:  MOVWF  x77
06150:  MOVLB  0
06152:  CALL   23F4
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
06156:  MOVLB  1
06158:  CLRF   xAD
0615A:  MOVLB  0
0615C:  MOVLB  1
0615E:  MOVF   xAD,W
06160:  SUBLW  3F
06162:  BTFSC  FD8.0
06164:  BRA    616C
06166:  MOVLB  0
06168:  GOTO   61A8
0616C:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
0616E:  CLRF   03
06170:  MOVLB  1
06172:  MOVF   xAD,W
06174:  ADDLW  67
06176:  MOVWF  FE9
06178:  MOVLW  01
0617A:  ADDWFC 03,W
0617C:  MOVWF  FEA
0617E:  MOVFF  FEF,1AE
06182:  MOVFF  1AE,996
06186:  MOVLW  37
06188:  MOVLB  9
0618A:  MOVWF  x97
0618C:  MOVLB  0
0618E:  CALL   1EBC
06192:  MOVLW  20
06194:  MOVLB  A
06196:  MOVWF  x29
06198:  MOVLB  0
0619A:  CALL   1C3C
0619E:  MOVLB  1
061A0:  INCF   xAD,F
061A2:  MOVLB  0
061A4:  GOTO   615C
....................       }
....................       fprintf(PC, "\r\n");
061A8:  MOVLW  0D
061AA:  MOVLB  A
061AC:  MOVWF  x29
061AE:  MOVLB  0
061B0:  CALL   1C3C
061B4:  MOVLW  0A
061B6:  MOVLB  A
061B8:  MOVWF  x29
061BA:  MOVLB  0
061BC:  CALL   1C3C
061C0:  MOVLB  1
061C2:  INCF   xA7,F
061C4:  BTFSC  FD8.2
061C6:  INCF   xA8,F
061C8:  MOVLB  0
061CA:  GOTO   60B6
....................    }
.................... 
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
061CE:  MOVLW  46
061D0:  MOVWF  FF6
061D2:  MOVLW  1A
061D4:  MOVWF  FF7
061D6:  MOVLW  00
061D8:  MOVWF  FF8
061DA:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
061DE:  MOVLB  1
061E0:  MOVF   x5F,W
061E2:  MOVWF  FE9
061E4:  MOVF   x60,W
061E6:  MOVWF  FEA
061E8:  MOVFF  FEF,1AE
061EC:  MOVFF  1AE,266
061F0:  MOVLW  02
061F2:  MOVLB  2
061F4:  MOVWF  x67
061F6:  MOVLB  0
061F8:  CALL   3B8C
061FC:  GOTO   8CA0 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
06200:  MOVLW  64
06202:  MOVWF  FF6
06204:  MOVLW  1A
06206:  MOVWF  FF7
06208:  MOVLW  00
0620A:  MOVWF  FF8
0620C:  CALL   1C8E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
06210:  MOVLB  1
06212:  MOVF   x5F,W
06214:  MOVWF  FE9
06216:  MOVF   x60,W
06218:  MOVWF  FEA
0621A:  MOVFF  FEF,161
....................    piclog_make(cmd, 0x00); // Log the command execution
0621E:  MOVFF  161,266
06222:  MOVLB  2
06224:  CLRF   x67
06226:  MOVLB  0
06228:  CALL   3B8C
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
0622C:  MOVLB  1
0622E:  CLRF   x65
06230:  CLRF   x64
06232:  CLRF   x63
06234:  CLRF   x62
06236:  MOVLB  0
06238:  MOVLB  1
0623A:  MOVF   x65,F
0623C:  BTFSC  FD8.2
0623E:  BRA    6246
06240:  MOVLB  0
06242:  GOTO   62A6
06246:  MOVLB  0
06248:  MOVLB  1
0624A:  MOVF   x64,W
0624C:  SUBLW  F4
0624E:  BTFSC  FD8.0
06250:  BRA    6258
06252:  MOVLB  0
06254:  GOTO   62A6
06258:  MOVLB  0
0625A:  BTFSS  FD8.2
0625C:  GOTO   6272
06260:  MOVLB  1
06262:  MOVF   x63,W
06264:  SUBLW  23
06266:  BTFSC  FD8.0
06268:  BRA    6270
0626A:  MOVLB  0
0626C:  GOTO   62A6
06270:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06272:  MOVFF  F5,1A8
06276:  MOVFF  F4,1A7
0627A:  MOVFF  F3,1A6
0627E:  MOVFF  F2,1A5
06282:  MOVFF  165,1AC
06286:  MOVFF  164,1AB
0628A:  MOVFF  163,1AA
0628E:  MOVFF  162,1A9
06292:  CALL   4424
06296:  MOVLW  01
06298:  MOVLB  1
0629A:  ADDWF  x64,F
0629C:  MOVLW  00
0629E:  ADDWFC x65,F
062A0:  MOVLB  0
062A2:  GOTO   6238
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
062A6:  MOVFF  161,266
062AA:  MOVLW  02
062AC:  MOVLB  2
062AE:  MOVWF  x67
062B0:  MOVLB  0
062B2:  CALL   3B8C
....................    fprintf(PC, "End SMF Erase All\r\n");
062B6:  MOVLW  7A
062B8:  MOVWF  FF6
062BA:  MOVLW  1A
062BC:  MOVWF  FF7
062BE:  MOVLW  00
062C0:  MOVWF  FF8
062C2:  CALL   1C8E
062C6:  GOTO   8CB0 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
05C64:  MOVLW  8E
05C66:  MOVWF  FF6
05C68:  MOVLW  1A
05C6A:  MOVWF  FF7
05C6C:  MOVLW  00
05C6E:  MOVWF  FF8
05C70:  CALL   1C8E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05C74:  MOVLB  1
05C76:  MOVF   x5F,W
05C78:  MOVWF  FE9
05C7A:  MOVF   x60,W
05C7C:  MOVWF  FEA
05C7E:  MOVFF  FEF,1A5
05C82:  MOVFF  1A5,266
05C86:  MOVLW  01
05C88:  MOVLB  2
05C8A:  MOVWF  x67
05C8C:  MOVLB  0
05C8E:  CALL   3B8C
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
05C92:  MOVLB  1
05C94:  CLRF   x61
05C96:  CLRF   x62
05C98:  CLRF   x63
05C9A:  CLRF   x64
05C9C:  CLRF   x65
05C9E:  CLRF   x66
05CA0:  CLRF   x67
05CA2:  CLRF   x68
05CA4:  CLRF   x69
05CA6:  CLRF   x6A
05CA8:  CLRF   x6B
05CAA:  CLRF   x6C
05CAC:  CLRF   x6D
05CAE:  CLRF   x6E
05CB0:  CLRF   x6F
05CB2:  CLRF   x70
05CB4:  CLRF   x71
05CB6:  CLRF   x72
05CB8:  CLRF   x73
05CBA:  CLRF   x74
05CBC:  CLRF   x75
05CBE:  CLRF   x76
05CC0:  CLRF   x77
05CC2:  CLRF   x78
05CC4:  CLRF   x79
05CC6:  CLRF   x7A
05CC8:  CLRF   x7B
05CCA:  CLRF   x7C
05CCC:  CLRF   x7D
05CCE:  CLRF   x7E
05CD0:  CLRF   x7F
05CD2:  CLRF   x80
05CD4:  CLRF   x81
05CD6:  CLRF   x82
05CD8:  CLRF   x83
05CDA:  CLRF   x84
05CDC:  CLRF   x85
05CDE:  CLRF   x86
05CE0:  CLRF   x87
05CE2:  CLRF   x88
05CE4:  CLRF   x89
05CE6:  CLRF   x8A
05CE8:  CLRF   x8B
05CEA:  CLRF   x8C
05CEC:  CLRF   x8D
05CEE:  CLRF   x8E
05CF0:  CLRF   x8F
05CF2:  CLRF   x90
05CF4:  CLRF   x91
05CF6:  CLRF   x92
05CF8:  CLRF   x93
05CFA:  CLRF   x94
05CFC:  CLRF   x95
05CFE:  CLRF   x96
05D00:  CLRF   x97
05D02:  CLRF   x98
05D04:  CLRF   x99
05D06:  CLRF   x9A
05D08:  CLRF   x9B
05D0A:  CLRF   x9C
05D0C:  CLRF   x9D
05D0E:  CLRF   x9E
05D10:  CLRF   x9F
05D12:  CLRF   xA0
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
05D14:  MOVLW  04
05D16:  MOVWF  xA4
05D18:  MOVLW  EC
05D1A:  MOVWF  xA3
05D1C:  CLRF   xA2
05D1E:  CLRF   xA1
05D20:  MOVLB  0
05D22:  MOVLB  1
05D24:  MOVF   xA4,W
05D26:  SUBLW  05
05D28:  BTFSC  FD8.0
05D2A:  BRA    5D32
05D2C:  MOVLB  0
05D2E:  GOTO   5DB0
05D32:  MOVLB  0
05D34:  BTFSS  FD8.2
05D36:  GOTO   5D7C
05D3A:  MOVLB  1
05D3C:  MOVF   xA3,W
05D3E:  SUBLW  6B
05D40:  BTFSC  FD8.0
05D42:  BRA    5D4A
05D44:  MOVLB  0
05D46:  GOTO   5DB0
05D4A:  MOVLB  0
05D4C:  BTFSS  FD8.2
05D4E:  GOTO   5D7C
05D52:  MOVLB  1
05D54:  MOVF   xA2,W
05D56:  SUBLW  FF
05D58:  BTFSC  FD8.0
05D5A:  BRA    5D62
05D5C:  MOVLB  0
05D5E:  GOTO   5DB0
05D62:  MOVLB  0
05D64:  BTFSS  FD8.2
05D66:  GOTO   5D7C
05D6A:  MOVLB  1
05D6C:  MOVF   xA1,W
05D6E:  SUBLW  FE
05D70:  BTFSC  FD8.0
05D72:  BRA    5D7A
05D74:  MOVLB  0
05D76:  GOTO   5DB0
05D7A:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
05D7C:  MOVFF  F5,1A8
05D80:  MOVFF  F4,1A7
05D84:  MOVFF  F3,1A6
05D88:  MOVFF  F2,1A5
05D8C:  MOVFF  1A4,1AC
05D90:  MOVFF  1A3,1AB
05D94:  MOVFF  1A2,1AA
05D98:  MOVFF  1A1,1A9
05D9C:  CALL   4424
05DA0:  MOVLW  01
05DA2:  MOVLB  1
05DA4:  ADDWF  xA3,F
05DA6:  MOVLW  00
05DA8:  ADDWFC xA4,F
05DAA:  MOVLB  0
05DAC:  GOTO   5D22
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
05DB0:  MOVFF  F5,A29
05DB4:  MOVFF  F4,A28
05DB8:  MOVFF  F3,A27
05DBC:  MOVFF  F2,A26
05DC0:  MOVLW  04
05DC2:  MOVLB  A
05DC4:  MOVWF  x2D
05DC6:  MOVLW  EC
05DC8:  MOVWF  x2C
05DCA:  CLRF   x2B
05DCC:  CLRF   x2A
05DCE:  MOVLW  01
05DD0:  MOVWF  x2F
05DD2:  MOVLW  61
05DD4:  MOVWF  x2E
05DD6:  CLRF   x31
05DD8:  MOVLW  40
05DDA:  MOVWF  x30
05DDC:  MOVLB  0
05DDE:  CALL   31D0
....................    smf_init(); // Update the address area after writing
05DE2:  GOTO   5C60
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05DE6:  MOVLB  1
05DE8:  MOVF   x5F,W
05DEA:  MOVWF  FE9
05DEC:  MOVF   x60,W
05DEE:  MOVWF  FEA
05DF0:  MOVFF  FEF,1A5
05DF4:  MOVFF  1A5,266
05DF8:  MOVLW  02
05DFA:  MOVLB  2
05DFC:  MOVWF  x67
05DFE:  MOVLB  0
05E00:  CALL   3B8C
....................    fprintf(PC, "End SMF Reset\r\n");
05E04:  MOVLW  A0
05E06:  MOVWF  FF6
05E08:  MOVLW  1A
05E0A:  MOVWF  FF7
05E0C:  MOVLW  00
05E0E:  MOVWF  FF8
05E10:  CALL   1C8E
05E14:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
0AD9E:  CLRF   FF8
0ADA0:  BCF    FD0.7
0ADA2:  BSF    07.7
0ADA4:  MOVLB  E
0ADA6:  MOVLW  55
0ADA8:  MOVWF  F7E
0ADAA:  MOVLW  AA
0ADAC:  MOVWF  F7E
0ADAE:  BCF    F66.6
0ADB0:  MOVLW  F9
0ADB2:  MOVWF  x2C
0ADB4:  MOVLW  00
0ADB6:  MOVWF  x2E
0ADB8:  MOVLW  40
0ADBA:  MOVWF  x12
0ADBC:  MOVLW  30
0ADBE:  MOVWF  x13
0ADC0:  MOVLW  20
0ADC2:  MOVWF  x22
0ADC4:  MOVLW  55
0ADC6:  MOVWF  F7E
0ADC8:  MOVLW  AA
0ADCA:  MOVWF  F7E
0ADCC:  BSF    F66.6
0ADCE:  CLRF   F9B
0ADD0:  CLRF   F64
0ADD2:  CLRF   F65
0ADD4:  CLRF   F66
0ADD6:  MOVLW  02
0ADD8:  MOVWF  FD3
0ADDA:  CLRF   1B
0ADDC:  MOVLB  F
0ADDE:  BSF    x2D.3
0ADE0:  MOVLW  A0
0ADE2:  MOVWF  x2B
0ADE4:  MOVLW  01
0ADE6:  MOVWF  x2C
0ADE8:  MOVLW  A6
0ADEA:  MOVWF  x2E
0ADEC:  MOVLW  90
0ADEE:  MOVWF  x2F
0ADF0:  BCF    F93.6
0ADF2:  BSF    F8A.6
0ADF4:  BCF    FC6.5
0ADF6:  MOVLW  40
0ADF8:  MOVWF  FC7
0ADFA:  MOVLW  13
0ADFC:  MOVWF  FC8
0ADFE:  MOVLW  2A
0AE00:  MOVWF  FC6
0AE02:  BCF    F92.1
0AE04:  BSF    F92.0
0AE06:  BCF    F92.3
0AE08:  BSF    F96.4
0AE0A:  BCF    F96.1
0AE0C:  BCF    F95.7
0AE0E:  BCF    F8C.7
0AE10:  BSF    F93.4
0AE12:  BCF    F93.5
0AE14:  BCF    F93.2
0AE16:  BCF    F8A.2
0AE18:  CLRF   1F
0AE1A:  CLRF   1E
0AE1C:  CLRF   1D
0AE1E:  CLRF   1C
0AE20:  CLRF   23
0AE22:  CLRF   22
0AE24:  CLRF   21
0AE26:  CLRF   20
0AE28:  CLRF   25
0AE2A:  CLRF   24
0AE2C:  CLRF   46
0AE2E:  BCF    47.0
0AE30:  MOVLB  1
0AE32:  CLRF   x19
0AE34:  MOVLW  1E
0AE36:  MOVWF  x1E
0AE38:  CLRF   x20
0AE3A:  CLRF   x1F
0AE3C:  MOVLB  E
0AE3E:  CLRF   xD9
0AE40:  CLRF   xDA
0AE42:  CLRF   xCE
0AE44:  CLRF   xCF
0AE46:  CLRF   xD0
0AE48:  CLRF   xD1
0AE4A:  CLRF   xD2
0AE4C:  CLRF   xD3
0AE4E:  CLRF   xD4
0AE50:  CLRF   xD5
0AE52:  CLRF   x45
0AE54:  CLRF   x46
0AE56:  CLRF   x47
0AE58:  BCF    x8D.7
0AE5A:  BCF    x8D.6
0AE5C:  BCF    x8D.5
0AE5E:  MOVLB  F
0AE60:  CLRF   x53
0AE62:  CLRF   x38
0AE64:  CLRF   x37
0AE66:  MOVLB  0
0AE68:  CLRF   26
0AE6A:  CLRF   27
0AE6C:  CLRF   28
0AE6E:  CLRF   29
0AE70:  CLRF   2A
0AE72:  CLRF   2B
0AE74:  CLRF   2C
0AE76:  CLRF   2D
0AE78:  CLRF   2E
0AE7A:  CLRF   2F
0AE7C:  CLRF   30
0AE7E:  CLRF   31
0AE80:  CLRF   32
0AE82:  CLRF   33
0AE84:  CLRF   34
0AE86:  CLRF   35
0AE88:  CLRF   36
0AE8A:  CLRF   37
0AE8C:  CLRF   38
0AE8E:  CLRF   39
0AE90:  CLRF   3A
0AE92:  CLRF   3B
0AE94:  CLRF   3C
0AE96:  CLRF   3D
0AE98:  CLRF   3E
0AE9A:  CLRF   3F
0AE9C:  CLRF   40
0AE9E:  CLRF   41
0AEA0:  CLRF   42
0AEA2:  CLRF   43
0AEA4:  CLRF   44
0AEA6:  CLRF   45
0AEA8:  MOVLW  03
0AEAA:  MOVWF  48
0AEAC:  CLRF   49
0AEAE:  CLRF   4A
0AEB0:  CLRF   4B
0AEB2:  CLRF   4C
0AEB4:  CLRF   4D
0AEB6:  CLRF   4E
0AEB8:  CLRF   4F
0AEBA:  CLRF   50
0AEBC:  CLRF   51
0AEBE:  CLRF   52
0AEC0:  CLRF   53
0AEC2:  CLRF   54
0AEC4:  CLRF   55
0AEC6:  CLRF   56
0AEC8:  CLRF   57
0AECA:  CLRF   58
0AECC:  CLRF   59
0AECE:  CLRF   5A
0AED0:  CLRF   5B
0AED2:  CLRF   5C
0AED4:  CLRF   5D
0AED6:  CLRF   5E
0AED8:  CLRF   5F
0AEDA:  CLRF   x60
0AEDC:  CLRF   x61
0AEDE:  CLRF   x62
0AEE0:  CLRF   x63
0AEE2:  CLRF   x64
0AEE4:  CLRF   x65
0AEE6:  CLRF   x66
0AEE8:  CLRF   x67
0AEEA:  CLRF   x68
0AEEC:  CLRF   x69
0AEEE:  CLRF   x6A
0AEF0:  CLRF   x6B
0AEF2:  CLRF   x6C
0AEF4:  CLRF   x6D
0AEF6:  CLRF   x6E
0AEF8:  CLRF   x6F
0AEFA:  CLRF   x70
0AEFC:  CLRF   x71
0AEFE:  CLRF   x72
0AF00:  CLRF   x73
0AF02:  CLRF   x74
0AF04:  CLRF   x75
0AF06:  CLRF   x76
0AF08:  CLRF   x77
0AF0A:  CLRF   x78
0AF0C:  CLRF   x79
0AF0E:  CLRF   x7A
0AF10:  CLRF   x7B
0AF12:  CLRF   x7C
0AF14:  CLRF   x7D
0AF16:  CLRF   x7E
0AF18:  CLRF   x7F
0AF1A:  CLRF   x80
0AF1C:  CLRF   x81
0AF1E:  CLRF   x82
0AF20:  CLRF   x83
0AF22:  CLRF   x84
0AF24:  CLRF   x85
0AF26:  CLRF   x86
0AF28:  CLRF   x87
0AF2A:  CLRF   x88
0AF2C:  CLRF   x89
0AF2E:  CLRF   x8A
0AF30:  CLRF   x8B
0AF32:  CLRF   x8C
0AF34:  CLRF   x8D
0AF36:  CLRF   x8E
0AF38:  CLRF   x8F
0AF3A:  CLRF   x90
0AF3C:  CLRF   x91
0AF3E:  CLRF   x92
0AF40:  CLRF   x93
0AF42:  CLRF   x94
0AF44:  CLRF   x95
0AF46:  CLRF   x96
0AF48:  CLRF   x97
0AF4A:  CLRF   x98
0AF4C:  CLRF   x99
0AF4E:  CLRF   x9A
0AF50:  CLRF   x9B
0AF52:  CLRF   x9C
0AF54:  CLRF   x9D
0AF56:  CLRF   x9E
0AF58:  CLRF   x9F
0AF5A:  CLRF   xA0
0AF5C:  CLRF   xA1
0AF5E:  CLRF   xA2
0AF60:  CLRF   xA3
0AF62:  CLRF   xA4
0AF64:  CLRF   xA5
0AF66:  CLRF   xA6
0AF68:  CLRF   xA7
0AF6A:  CLRF   xA8
0AF6C:  CLRF   xA9
0AF6E:  CLRF   xAA
0AF70:  CLRF   xAB
0AF72:  CLRF   xAC
0AF74:  CLRF   xAD
0AF76:  CLRF   xAE
0AF78:  CLRF   xAF
0AF7A:  CLRF   xB0
0AF7C:  CLRF   xB1
0AF7E:  CLRF   xB2
0AF80:  CLRF   xB3
0AF82:  CLRF   xB4
0AF84:  CLRF   xB5
0AF86:  CLRF   xB6
0AF88:  CLRF   xB7
0AF8A:  CLRF   xB8
0AF8C:  CLRF   xB9
0AF8E:  CLRF   xBA
0AF90:  CLRF   xBB
0AF92:  CLRF   xBC
0AF94:  CLRF   xBD
0AF96:  CLRF   xBE
0AF98:  CLRF   xBF
0AF9A:  CLRF   xC0
0AF9C:  CLRF   xC1
0AF9E:  CLRF   xC2
0AFA0:  CLRF   xC3
0AFA2:  CLRF   xC4
0AFA4:  CLRF   xC5
0AFA6:  CLRF   xC6
0AFA8:  CLRF   xC7
0AFAA:  CLRF   xC8
0AFAC:  CLRF   xC9
0AFAE:  CLRF   xCA
0AFB0:  CLRF   xCB
0AFB2:  CLRF   xCC
0AFB4:  CLRF   xCD
0AFB6:  CLRF   xCE
0AFB8:  CLRF   xCF
0AFBA:  CLRF   xD0
0AFBC:  CLRF   xD1
0AFBE:  CLRF   xD2
0AFC0:  CLRF   xD3
0AFC2:  CLRF   xD4
0AFC4:  CLRF   xD5
0AFC6:  CLRF   xD6
0AFC8:  CLRF   xD7
0AFCA:  CLRF   xD8
0AFCC:  CLRF   xD9
0AFCE:  CLRF   xDA
0AFD0:  CLRF   xDB
0AFD2:  CLRF   xDC
0AFD4:  CLRF   xDD
0AFD6:  CLRF   xDE
0AFD8:  CLRF   xDF
0AFDA:  CLRF   xE0
0AFDC:  CLRF   xE1
0AFDE:  CLRF   xE2
0AFE0:  CLRF   xE3
0AFE2:  CLRF   xE4
0AFE4:  CLRF   xE5
0AFE6:  CLRF   xE6
0AFE8:  CLRF   xE7
0AFEA:  CLRF   xE8
0AFEC:  CLRF   xE9
0AFEE:  CLRF   xEA
0AFF0:  CLRF   xEB
0AFF2:  CLRF   xEC
0AFF4:  CLRF   xED
0AFF6:  CLRF   xEE
0AFF8:  CLRF   xEF
0AFFA:  MOVLW  05
0AFFC:  MOVWF  xF0
0AFFE:  MOVLW  7C
0B000:  MOVWF  xF1
0B002:  MOVLW  01
0B004:  MOVWF  xF2
0B006:  MOVLW  01
0B008:  MOVWF  xF3
0B00A:  MOVLW  02
0B00C:  MOVWF  xF4
0B00E:  MOVLW  7C
0B010:  MOVWF  xF5
0B012:  CLRF   xF6
0B014:  MOVLW  09
0B016:  MOVWF  xF7
0B018:  MOVLW  01
0B01A:  MOVWF  xF8
0B01C:  CLRF   xF9
0B01E:  MOVLW  02
0B020:  MOVWF  xFA
0B022:  MOVLW  01
0B024:  MOVWF  xFB
0B026:  MOVLB  1
0B028:  CLRF   x1A
0B02A:  CLRF   x1B
0B02C:  CLRF   x1C
0B02E:  CLRF   x1D
0B030:  CLRF   x21
0B032:  CLRF   x22
0B034:  CLRF   x23
0B036:  CLRF   x24
0B038:  CLRF   x25
0B03A:  CLRF   x26
0B03C:  CLRF   x27
0B03E:  CLRF   x28
0B040:  CLRF   x29
0B042:  CLRF   x2A
0B044:  CLRF   x2B
0B046:  CLRF   x2C
0B048:  CLRF   x2D
0B04A:  CLRF   x2E
0B04C:  CLRF   x2F
0B04E:  CLRF   x30
0B050:  CLRF   x31
0B052:  CLRF   x32
0B054:  CLRF   x33
0B056:  CLRF   x34
0B058:  CLRF   x35
0B05A:  CLRF   x36
0B05C:  CLRF   x37
0B05E:  CLRF   x38
0B060:  CLRF   x39
0B062:  CLRF   x3A
0B064:  CLRF   x3B
0B066:  CLRF   x3C
0B068:  CLRF   x3D
0B06A:  CLRF   x3E
0B06C:  CLRF   x3F
0B06E:  CLRF   x40
0B070:  CLRF   x41
0B072:  CLRF   x42
0B074:  CLRF   x43
0B076:  CLRF   x44
0B078:  CLRF   x45
0B07A:  CLRF   x46
0B07C:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
0B07E:  MOVLW  64
0B080:  MOVLB  A
0B082:  MOVWF  x3E
0B084:  MOVLB  0
0B086:  CALL   1C0E
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
0B08A:  MOVLW  B0
0B08C:  MOVWF  FF6
0B08E:  MOVLW  1A
0B090:  MOVWF  FF7
0B092:  MOVLW  00
0B094:  MOVWF  FF8
0B096:  CALL   1C8E
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM4.\r\n");
0B09A:  MOVLW  F6
0B09C:  MOVWF  FF6
0B09E:  MOVLW  1A
0B0A0:  MOVWF  FF7
0B0A2:  MOVLW  00
0B0A4:  MOVWF  FF8
0B0A6:  CALL   1C8E
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
0B0AA:  MOVLW  24
0B0AC:  MOVWF  FF6
0B0AE:  MOVLW  1B
0B0B0:  MOVWF  FF7
0B0B2:  MOVLW  00
0B0B4:  MOVWF  FF8
0B0B6:  MOVLW  10
0B0B8:  MOVLB  9
0B0BA:  MOVWF  x96
0B0BC:  MOVLB  0
0B0BE:  CALL   1CBE
0B0C2:  MOVLW  4A
0B0C4:  MOVWF  FF6
0B0C6:  MOVLW  1B
0B0C8:  MOVWF  FF7
0B0CA:  MOVLW  00
0B0CC:  MOVWF  FF8
0B0CE:  CALL   1C8E
0B0D2:  MOVLW  20
0B0D4:  MOVLB  A
0B0D6:  MOVWF  x29
0B0D8:  MOVLB  0
0B0DA:  CALL   1C3C
0B0DE:  MOVLW  54
0B0E0:  MOVWF  FF6
0B0E2:  MOVLW  1B
0B0E4:  MOVWF  FF7
0B0E6:  MOVLW  00
0B0E8:  MOVWF  FF8
0B0EA:  CALL   1C8E
0B0EE:  MOVLW  39
0B0F0:  MOVWF  FF6
0B0F2:  MOVLW  1B
0B0F4:  MOVWF  FF7
0B0F6:  MOVLW  00
0B0F8:  MOVWF  FF8
0B0FA:  MOVLW  0F
0B0FC:  MOVLB  9
0B0FE:  MOVWF  x96
0B100:  MOVLB  0
0B102:  CALL   1CBE
....................    
....................    //io_init();
....................    setup_uart_to_boss();
0B106:  GOTO   1CF4
....................    setup_timer();
0B10A:  GOTO   1D1E
....................    ad7490_init();
0B10E:  GOTO   1F2C
....................    misf_init();
0B112:  CALL   26DA
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
0B116:  MOVFF  119,266
0B11A:  MOVLB  2
0B11C:  CLRF   x67
0B11E:  MOVLB  0
0B120:  CALL   3B8C
.................... 
....................    int1 is_finished = FALSE;
0B124:  MOVLB  1
0B126:  BCF    x49.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
0B128:  MOVLW  5E
0B12A:  MOVWF  FF6
0B12C:  MOVLW  1B
0B12E:  MOVWF  FF7
0B130:  MOVLW  00
0B132:  MOVWF  FF8
0B134:  MOVLB  0
0B136:  CALL   1C8E
....................    
....................    output_low(EN_NPWR);
0B13A:  BCF    F94.7
0B13C:  BCF    F8B.7
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
0B13E:  MOVLW  84
0B140:  MOVWF  FF6
0B142:  MOVLW  1B
0B144:  MOVWF  FF7
0B146:  MOVLW  00
0B148:  MOVWF  FF8
0B14A:  CALL   1C8E
....................    
....................    //Start loop
....................    while(!is_finished)
0B14E:  MOVLB  1
0B150:  BTFSS  x49.0
0B152:  BRA    B15A
0B154:  MOVLB  0
0B156:  GOTO   B228
0B15A:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0B15C:  MOVF   46,F
0B15E:  BTFSC  FD8.2
0B160:  GOTO   B1E4
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
0B164:  MOVLB  1
0B166:  CLRF   x5D
0B168:  MOVLW  26
0B16A:  MOVWF  x5C
0B16C:  MOVFF  46,15E
0B170:  MOVLB  0
0B172:  GOTO   4056
0B176:  MOVFF  02,03
0B17A:  MOVF   01,W
0B17C:  MOVWF  FE1
0B17E:  MOVFF  03,FE2
0B182:  MOVLW  01
0B184:  MOVWF  FEA
0B186:  MOVLW  4A
0B188:  MOVWF  FE9
0B18A:  MOVLW  0C
0B18C:  MOVWF  01
0B18E:  MOVFF  FE6,FEE
0B192:  DECFSZ 01,F
0B194:  GOTO   B18E
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0B198:  MOVLB  1
0B19A:  CLRF   x57
0B19C:  MOVLW  26
0B19E:  MOVWF  x56
0B1A0:  CLRF   x59
0B1A2:  MOVLW  46
0B1A4:  MOVWF  x58
0B1A6:  MOVLB  0
0B1A8:  GOTO   4276
....................          
....................          if(recieve_cmd.is_exist)
0B1AC:  MOVLB  1
0B1AE:  BTFSC  x4C.0
0B1B0:  BRA    B1B8
0B1B2:  MOVLB  0
0B1B4:  GOTO   B1D4
0B1B8:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0B1BA:  MOVLW  01
0B1BC:  MOVLB  1
0B1BE:  MOVWF  x57
0B1C0:  MOVLW  4A
0B1C2:  MOVWF  x56
0B1C4:  MOVLB  0
0B1C6:  GOTO   AD1C
0B1CA:  MOVLB  1
0B1CC:  BCF    x49.1
0B1CE:  BTFSC  01.0
0B1D0:  BSF    x49.1
0B1D2:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0B1D4:  MOVLW  A2
0B1D6:  MOVWF  FF6
0B1D8:  MOVLW  1B
0B1DA:  MOVWF  FF7
0B1DC:  MOVLW  00
0B1DE:  MOVWF  FF8
0B1E0:  CALL   1C8E
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0B1E4:  MOVLB  1
0B1E6:  BTFSC  x49.0
0B1E8:  BRA    B1F0
0B1EA:  MOVLB  0
0B1EC:  GOTO   B1F6
0B1F0:  MOVLB  0
....................          break;
0B1F2:  GOTO   B228
....................          
....................       delay_ms(400);
0B1F6:  MOVLW  02
0B1F8:  MOVLB  1
0B1FA:  MOVWF  x56
0B1FC:  MOVLB  0
0B1FE:  MOVLW  C8
0B200:  MOVLB  A
0B202:  MOVWF  x3E
0B204:  MOVLB  0
0B206:  CALL   1C0E
0B20A:  MOVLB  1
0B20C:  DECFSZ x56,F
0B20E:  BRA    B214
0B210:  BRA    B218
0B212:  MOVLB  0
0B214:  MOVLB  0
0B216:  BRA    B1FE
....................       fprintf(PC, ".");
0B218:  MOVLW  2E
0B21A:  MOVLB  A
0B21C:  MOVWF  x29
0B21E:  MOVLB  0
0B220:  CALL   1C3C
0B224:  GOTO   B14E
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0B228:  MOVLW  C2
0B22A:  MOVWF  FF6
0B22C:  MOVLW  1B
0B22E:  MOVWF  FF7
0B230:  MOVLW  00
0B232:  MOVWF  FF8
0B234:  CALL   1C8E
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0B238:  MOVLW  2E
0B23A:  MOVLB  A
0B23C:  MOVWF  x29
0B23E:  MOVLB  0
0B240:  CALL   1C3C
....................       delay_ms(1000);
0B244:  MOVLW  04
0B246:  MOVLB  1
0B248:  MOVWF  x56
0B24A:  MOVLB  0
0B24C:  MOVLW  FA
0B24E:  MOVLB  A
0B250:  MOVWF  x3E
0B252:  MOVLB  0
0B254:  CALL   1C0E
0B258:  MOVLB  1
0B25A:  DECFSZ x56,F
0B25C:  BRA    B262
0B25E:  BRA    B266
0B260:  MOVLB  0
0B262:  MOVLB  0
0B264:  BRA    B24C
0B266:  MOVLB  0
0B268:  GOTO   B238
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0B26C:  MOVLW  02
0B26E:  MOVWF  FF6
0B270:  MOVLW  1C
0B272:  MOVWF  FF7
0B274:  MOVLW  00
0B276:  MOVWF  FF8
0B278:  CALL   1C8E
....................    
.................... }
.................... 
0B27C:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
