CCS PCM C Compiler, Version 5.104, 57077               27-6-25 13:03

               Filename:   build\mmj_cigs_main.lst

               ROM used:   15736 words (96%)
                           Largest free fragment is 578
               RAM used:   892 (44%) at main() level
                           1313 (64%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  38
0001:  GOTO   42B
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06B
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005B:  DATA D4,34
005C:  DATA ED,32
005D:  DATA 72,10
005E:  DATA 49,37
005F:  DATA 69,3A
0060:  DATA E9,30
0061:  DATA EC,34
0062:  DATA FA,32
0063:  DATA 0D,05
0064:  DATA 00,00
0065:  DATA 89,21
0066:  DATA EF,36
0067:  DATA 70,36
0068:  DATA 65,3A
0069:  DATA E5,06
006A:  DATA 0A,00
*
0084:  DATA D5,20
0085:  DATA 52,2A
0086:  DATA A0,24
0087:  DATA EE,34
0088:  DATA F4,34
0089:  DATA 61,36
008A:  DATA 69,3D
008B:  DATA E5,06
008C:  DATA 0A,00
008D:  DATA 89,21
008E:  DATA EF,36
008F:  DATA 70,36
0090:  DATA 65,3A
0091:  DATA E5,06
0092:  DATA 0A,00
0093:  DATA CD,24
0094:  DATA D3,29
0095:  DATA C9,27
0096:  DATA 4E,10
0097:  DATA 46,26
0098:  DATA C1,29
0099:  DATA 48,10
009A:  DATA 49,37
009B:  DATA 69,3A
009C:  DATA E9,30
009D:  DATA EC,34
009E:  DATA FA,32
009F:  DATA 0D,05
00A0:  DATA 00,01
00A1:  DATA 09,23
00A2:  DATA EC,30
00A3:  DATA 73,34
00A4:  DATA A0,34
00A5:  DATA 73,10
00A6:  DATA EE,37
00A7:  DATA 74,10
00A8:  DATA E3,37
00A9:  DATA 6E,37
00AA:  DATA E5,31
00AB:  DATA F4,32
00AC:  DATA E4,06
00AD:  DATA 0A,00
00AE:  DATA 89,29
00AF:  DATA 4D,23
00B0:  DATA 20,10
00B1:  DATA D0,24
00B2:  DATA 43,26
00B3:  DATA CF,23
00B4:  DATA A0,2A
00B5:  DATA F3,32
00B6:  DATA A0,21
00B7:  DATA EF,3A
00B8:  DATA 6E,3A
00B9:  DATA 65,39
00BA:  DATA 20,10
00BB:  DATA 20,10
00BC:  DATA 20,10
00BD:  DATA 3A,10
00BE:  DATA 30,3C
00BF:  DATA 25,18
00C0:  DATA 38,26
00C1:  DATA D8,06
00C2:  DATA 0A,00
00C3:  DATA 89,29
00C4:  DATA 4D,23
00C5:  DATA 20,10
00C6:  DATA D0,24
00C7:  DATA 43,26
00C8:  DATA CF,23
00C9:  DATA 20,26
00CA:  DATA EF,37
00CB:  DATA 70,10
00CC:  DATA C3,37
00CD:  DATA 75,37
00CE:  DATA F4,32
00CF:  DATA 72,10
00D0:  DATA 20,10
00D1:  DATA 20,10
00D2:  DATA 3A,10
00D3:  DATA 30,3C
00D4:  DATA 25,18
00D5:  DATA 32,2C
00D6:  DATA 0D,05
00D7:  DATA 00,01
00D8:  DATA 89,29
00D9:  DATA 4D,23
00DA:  DATA 20,10
00DB:  DATA CD,22
00DC:  DATA C1,29
00DD:  DATA 20,10
00DE:  DATA A0,2A
00DF:  DATA F3,32
00E0:  DATA A0,21
00E1:  DATA EF,3A
00E2:  DATA 6E,3A
00E3:  DATA 65,39
00E4:  DATA 20,10
00E5:  DATA 20,10
00E6:  DATA 20,10
00E7:  DATA 3A,10
00E8:  DATA 30,3C
00E9:  DATA 25,18
00EA:  DATA 38,26
00EB:  DATA D8,06
00EC:  DATA 0A,00
00ED:  DATA 89,29
00EE:  DATA 4D,23
00EF:  DATA 20,10
00F0:  DATA CD,22
00F1:  DATA C1,29
00F2:  DATA 20,10
00F3:  DATA 20,26
00F4:  DATA EF,37
00F5:  DATA 70,10
00F6:  DATA C3,37
00F7:  DATA 75,37
00F8:  DATA F4,32
00F9:  DATA 72,10
00FA:  DATA 20,10
00FB:  DATA 20,10
00FC:  DATA 3A,10
00FD:  DATA 30,3C
00FE:  DATA 25,18
00FF:  DATA 32,2C
0100:  DATA 0D,05
0101:  DATA 00,01
0102:  DATA 89,26
0103:  DATA C9,29
0104:  DATA 46,10
0105:  DATA D0,24
0106:  DATA 43,26
0107:  DATA CF,23
0108:  DATA A0,2A
0109:  DATA F3,32
010A:  DATA A0,21
010B:  DATA EF,3A
010C:  DATA 6E,3A
010D:  DATA 65,39
010E:  DATA 20,10
010F:  DATA 20,10
0110:  DATA 20,10
0111:  DATA 3A,10
0112:  DATA 30,3C
0113:  DATA 25,18
0114:  DATA 38,26
0115:  DATA D8,06
0116:  DATA 0A,00
0117:  DATA 89,26
0118:  DATA C9,29
0119:  DATA 46,10
011A:  DATA D0,24
011B:  DATA 43,26
011C:  DATA CF,23
011D:  DATA A0,2A
011E:  DATA EE,31
011F:  DATA 6F,38
0120:  DATA F9,32
0121:  DATA 64,10
0122:  DATA C3,37
0123:  DATA 75,37
0124:  DATA F4,32
0125:  DATA 72,10
0126:  DATA 3A,10
0127:  DATA 30,3C
0128:  DATA 25,18
0129:  DATA 38,26
012A:  DATA D8,06
012B:  DATA 0A,00
012C:  DATA 89,26
012D:  DATA C9,29
012E:  DATA 46,10
012F:  DATA D0,24
0130:  DATA 43,26
0131:  DATA CF,23
0132:  DATA 20,26
0133:  DATA EF,37
0134:  DATA 70,10
0135:  DATA C3,37
0136:  DATA 75,37
0137:  DATA F4,32
0138:  DATA 72,10
0139:  DATA 20,10
013A:  DATA 20,10
013B:  DATA 3A,10
013C:  DATA 30,3C
013D:  DATA 25,18
013E:  DATA 32,2C
013F:  DATA 0D,05
0140:  DATA 00,01
0141:  DATA 89,26
0142:  DATA C9,29
0143:  DATA 46,10
0144:  DATA D0,24
0145:  DATA 43,26
0146:  DATA CF,23
0147:  DATA A0,2B
0148:  DATA F2,34
0149:  DATA F4,32
014A:  DATA A0,21
014B:  DATA EF,3A
014C:  DATA 6E,3A
014D:  DATA 65,39
014E:  DATA 20,10
014F:  DATA 20,10
0150:  DATA 3A,10
0151:  DATA 30,3C
0152:  DATA 25,18
0153:  DATA 32,2C
0154:  DATA 0D,05
0155:  DATA 00,01
0156:  DATA 89,26
0157:  DATA C9,29
0158:  DATA 46,10
0159:  DATA CD,22
015A:  DATA C1,29
015B:  DATA 20,10
015C:  DATA A0,2A
015D:  DATA F3,32
015E:  DATA A0,21
015F:  DATA EF,3A
0160:  DATA 6E,3A
0161:  DATA 65,39
0162:  DATA 20,10
0163:  DATA 20,10
0164:  DATA 20,10
0165:  DATA 3A,10
0166:  DATA 30,3C
0167:  DATA 25,18
0168:  DATA 38,26
0169:  DATA D8,06
016A:  DATA 0A,00
016B:  DATA 89,26
016C:  DATA C9,29
016D:  DATA 46,10
016E:  DATA CD,22
016F:  DATA C1,29
0170:  DATA 20,10
0171:  DATA A0,2A
0172:  DATA EE,31
0173:  DATA 6F,38
0174:  DATA F9,32
0175:  DATA 64,10
0176:  DATA C3,37
0177:  DATA 75,37
0178:  DATA F4,32
0179:  DATA 72,10
017A:  DATA 3A,10
017B:  DATA 30,3C
017C:  DATA 25,18
017D:  DATA 38,26
017E:  DATA D8,06
017F:  DATA 0A,00
0180:  DATA 89,26
0181:  DATA C9,29
0182:  DATA 46,10
0183:  DATA CD,22
0184:  DATA C1,29
0185:  DATA 20,10
0186:  DATA 20,26
0187:  DATA EF,37
0188:  DATA 70,10
0189:  DATA C3,37
018A:  DATA 75,37
018B:  DATA F4,32
018C:  DATA 72,10
018D:  DATA 20,10
018E:  DATA 20,10
018F:  DATA 3A,10
0190:  DATA 30,3C
0191:  DATA 25,18
0192:  DATA 32,2C
0193:  DATA 0D,05
0194:  DATA 00,01
0195:  DATA 89,21
0196:  DATA EF,36
0197:  DATA 70,36
0198:  DATA 65,3A
0199:  DATA E5,06
019A:  DATA 0A,00
019B:  DATA CD,34
019C:  DATA F3,39
019D:  DATA E9,37
019E:  DATA 6E,10
019F:  DATA 46,36
01A0:  DATA E1,39
01A1:  DATA 68,10
01A2:  DATA E9,39
01A3:  DATA 20,37
01A4:  DATA 6F,3A
01A5:  DATA A0,31
01A6:  DATA 6F,37
01A7:  DATA EE,32
01A8:  DATA 63,3A
01A9:  DATA 65,32
01AA:  DATA 0D,05
01AB:  DATA 00,00
01AC:  DATA 5B,28
01AD:  DATA C9,21
01AE:  DATA CC,27
01AF:  DATA C7,2E
01B0:  DATA 20,1D
01B1:  DATA 20,00
01B2:  DATA CD,34
01B3:  DATA F3,39
01B4:  DATA E9,37
01B5:  DATA 6E,10
01B6:  DATA 46,36
01B7:  DATA E1,39
01B8:  DATA 68,10
01B9:  DATA E9,39
01BA:  DATA 20,37
01BB:  DATA 6F,3A
01BC:  DATA A0,31
01BD:  DATA 6F,37
01BE:  DATA EE,32
01BF:  DATA 63,3A
01C0:  DATA 65,32
01C1:  DATA 0D,05
01C2:  DATA 00,00
01C3:  DATA 41,22
01C4:  DATA 37,1A
01C5:  DATA 39,18
01C6:  DATA A0,24
01C7:  DATA EE,34
01C8:  DATA F4,34
01C9:  DATA 61,36
01CA:  DATA 69,3D
01CB:  DATA E5,06
01CC:  DATA 0A,00
01CD:  DATA 89,21
01CE:  DATA EF,36
01CF:  DATA 70,36
01D0:  DATA 65,3A
01D1:  DATA E5,06
01D2:  DATA 0A,00
01D3:  DATA 89,2B
01D4:  DATA D2,24
01D5:  DATA D4,22
01D6:  DATA 20,1D
01D7:  DATA A0,12
01D8:  DATA 64,10
01D9:  DATA A8,12
01DA:  DATA 30,1A
01DB:  DATA 4C,2C
01DC:  DATA A9,06
01DD:  DATA 0A,00
01DE:  DATA 89,29
01DF:  DATA C5,28
01E0:  DATA 20,10
01E1:  DATA 20,1D
01E2:  DATA A0,12
01E3:  DATA 64,10
01E4:  DATA A8,12
01E5:  DATA 30,1A
01E6:  DATA 4C,2C
01E7:  DATA A9,06
01E8:  DATA 0A,00
01E9:  DATA 89,20
01EA:  DATA 44,22
01EB:  DATA 52,10
01EC:  DATA 20,1D
01ED:  DATA A0,12
01EE:  DATA 64,10
01EF:  DATA A8,12
01F0:  DATA 30,1A
01F1:  DATA 4C,2C
01F2:  DATA A9,06
01F3:  DATA 0A,00
01F4:  DATA 09,28
01F5:  DATA 4D,10
01F6:  DATA 20,10
01F7:  DATA 20,10
01F8:  DATA 3A,10
01F9:  DATA 25,32
01FA:  DATA 20,14
01FB:  DATA 25,18
01FC:  DATA 34,26
01FD:  DATA D8,14
01FE:  DATA 0D,05
01FF:  DATA 00,01
0200:  DATA 89,29
0201:  DATA C8,20
0202:  DATA C4,27
0203:  DATA 57,10
0204:  DATA 3A,10
0205:  DATA 25,32
0206:  DATA 20,14
0207:  DATA 25,18
0208:  DATA 34,26
0209:  DATA D8,14
020A:  DATA 0D,05
020B:  DATA 00,01
020C:  DATA 89,2B
020D:  DATA C5,20
020E:  DATA CB,17
020F:  DATA 54,29
0210:  DATA 49,10
0211:  DATA 3A,10
0212:  DATA 25,32
0213:  DATA 20,14
0214:  DATA 25,18
0215:  DATA 34,26
0216:  DATA D8,14
0217:  DATA 0D,05
0218:  DATA 00,01
0219:  DATA 09,29
021A:  DATA 41,27
021B:  DATA C7,22
021C:  DATA 20,10
021D:  DATA 3A,10
021E:  DATA 25,32
021F:  DATA 20,14
0220:  DATA 25,18
0221:  DATA 34,26
0222:  DATA D8,14
0223:  DATA 0D,05
0224:  DATA 00,01
0225:  DATA 89,21
0226:  DATA 4F,22
0227:  DATA 49,27
0228:  DATA 47,10
0229:  DATA 3A,10
022A:  DATA 25,32
022B:  DATA 20,14
022C:  DATA 25,18
022D:  DATA 34,26
022E:  DATA D8,14
022F:  DATA 0D,05
0230:  DATA 00,01
0231:  DATA 89,2D
0232:  DATA 41,22
0233:  DATA 37,1A
0234:  DATA 39,18
0235:  DATA 5D,10
0236:  DATA C6,34
0237:  DATA EE,30
0238:  DATA 6C,10
0239:  DATA C3,37
023A:  DATA ED,36
023B:  DATA 61,37
023C:  DATA 64,10
023D:  DATA 3A,10
023E:  DATA 25,18
023F:  DATA 34,26
0240:  DATA D8,06
0241:  DATA 0A,00
0242:  DATA 0D,05
0243:  DATA 53,3A
0244:  DATA 61,39
0245:  DATA 74,10
0246:  DATA ED,30
0247:  DATA EB,32
0248:  DATA 5F,39
0249:  DATA E5,31
024A:  DATA E5,34
024B:  DATA F6,32
024C:  DATA DF,31
024D:  DATA EF,36
024E:  DATA ED,30
024F:  DATA 6E,32
0250:  DATA 0D,05
0251:  DATA 00,01
0252:  DATA 89,2D
0253:  DATA C2,27
0254:  DATA D3,29
0255:  DATA 5D,10
0256:  DATA 3E,1F
0257:  DATA 3E,10
0258:  DATA 00,01
0259:  DATA 45,37
025A:  DATA 64,10
025B:  DATA ED,30
025C:  DATA EB,32
025D:  DATA 5F,39
025E:  DATA E5,31
025F:  DATA 69,3B
0260:  DATA E5,2F
0261:  DATA E3,37
0262:  DATA ED,36
0263:  DATA 61,37
0264:  DATA E4,06
0265:  DATA 8A,06
0266:  DATA 0A,00
0267:  DATA F3,34
0268:  DATA 67,37
0269:  DATA 61,36
026A:  DATA A0,32
026B:  DATA 6E,32
026C:  DATA A0,3B
026D:  DATA 69,3A
026E:  DATA 68,10
026F:  DATA 53,23
0270:  DATA C4,06
0271:  DATA 0A,00
0272:  DATA E4,37
0273:  DATA EE,13
0274:  DATA 74,10
0275:  DATA E6,34
0276:  DATA 6E,32
0277:  DATA A0,29
0278:  DATA 46,22
0279:  DATA 0D,05
027A:  DATA 00,00
027B:  DATA 89,16
027C:  DATA 3E,10
027D:  DATA 49,37
027E:  DATA F6,30
027F:  DATA EC,34
0280:  DATA 64,10
0281:  DATA 46,39
0282:  DATA E1,36
0283:  DATA 65,10
0284:  DATA 49,22
0285:  DATA 20,39
0286:  DATA E5,31
0287:  DATA E5,34
0288:  DATA F6,32
0289:  DATA 64,1D
028A:  DATA A0,12
028B:  DATA D8,06
028C:  DATA 0A,00
028D:  DATA 89,16
028E:  DATA 3E,10
028F:  DATA 43,29
0290:  DATA 43,10
0291:  DATA 65,39
0292:  DATA F2,37
0293:  DATA F2,10
0294:  DATA 0D,05
0295:  DATA 00,01
0296:  DATA 89,04
0297:  DATA 2D,1F
0298:  DATA 20,39
0299:  DATA E5,31
029A:  DATA E5,34
029B:  DATA F6,32
029C:  DATA 64,10
029D:  DATA 43,29
029E:  DATA 43,1D
029F:  DATA A0,12
02A0:  DATA D8,06
02A1:  DATA 0A,00
02A2:  DATA 89,04
02A3:  DATA 20,10
02A4:  DATA A0,31
02A5:  DATA 6F,36
02A6:  DATA EC,32
02A7:  DATA 63,3A
02A8:  DATA A0,21
02A9:  DATA D2,21
02AA:  DATA 20,1D
02AB:  DATA A0,12
02AC:  DATA D8,06
02AD:  DATA 0A,00
02AE:  DATA 89,16
02AF:  DATA 3E,10
02B0:  DATA 49,37
02B1:  DATA F6,30
02B2:  DATA EC,34
02B3:  DATA 64,10
02B4:  DATA E4,32
02B5:  DATA F6,34
02B6:  DATA E3,32
02B7:  DATA A0,24
02B8:  DATA 44,10
02B9:  DATA F2,32
02BA:  DATA E3,32
02BB:  DATA 69,3B
02BC:  DATA 65,32
02BD:  DATA 0D,05
02BE:  DATA 00,01
02BF:  DATA 89,04
02C0:  DATA 2D,1F
02C1:  DATA 20,39
02C2:  DATA E5,31
02C3:  DATA E5,34
02C4:  DATA F6,32
02C5:  DATA 64,1D
02C6:  DATA 20,10
02C7:  DATA 20,10
02C8:  DATA A0,12
02C9:  DATA D8,06
02CA:  DATA 0A,00
02CB:  DATA 89,04
02CC:  DATA 20,10
02CD:  DATA A0,26
02CE:  DATA 79,10
02CF:  DATA E4,32
02D0:  DATA F6,34
02D1:  DATA E3,32
02D2:  DATA A0,24
02D3:  DATA 44,1D
02D4:  DATA A0,12
02D5:  DATA D8,06
02D6:  DATA 0A,00
02D7:  DATA 89,2D
02D8:  DATA C2,27
02D9:  DATA D3,29
02DA:  DATA 5D,10
02DB:  DATA 3C,1E
02DC:  DATA 3C,10
02DD:  DATA 00,01
02DE:  DATA 89,16
02DF:  DATA 3E,10
02E0:  DATA 46,39
02E1:  DATA E1,36
02E2:  DATA 65,10
02E3:  DATA 49,22
02E4:  DATA 3A,10
02E5:  DATA 25,2C
02E6:  DATA 0D,05
02E7:  DATA 00,01
02E8:  DATA 89,16
02E9:  DATA 3E,10
02EA:  DATA C3,37
02EB:  DATA 6E,3A
02EC:  DATA 65,37
02ED:  DATA 74,10
02EE:  DATA F3,34
02EF:  DATA FA,32
02F0:  DATA 3A,10
02F1:  DATA 25,32
02F2:  DATA 0D,05
02F3:  DATA 00,00
02F4:  DATA 53,3A
02F5:  DATA 61,39
02F6:  DATA 74,10
02F7:  DATA D3,26
02F8:  DATA 46,10
02F9:  DATA F5,39
02FA:  DATA 69,37
02FB:  DATA 67,10
02FC:  DATA F2,32
02FD:  DATA F1,32
02FE:  DATA 73,3A
02FF:  DATA A0,39
0300:  DATA E5,30
0301:  DATA F1,3A
0302:  DATA 65,37
0303:  DATA E3,32
0304:  DATA 0D,05
0305:  DATA 00,01
0306:  DATA 45,39
0307:  DATA F2,37
0308:  DATA F2,10
0309:  DATA 20,29
030A:  DATA E5,31
030B:  DATA E5,34
030C:  DATA F6,34
030D:  DATA EE,33
030E:  DATA A0,31
030F:  DATA EF,36
0310:  DATA ED,30
0311:  DATA 6E,32
0312:  DATA A0,34
0313:  DATA EE,31
0314:  DATA 6F,37
0315:  DATA F3,34
0316:  DATA 73,3A
0317:  DATA 65,37
0318:  DATA 74,10
0319:  DATA F7,34
031A:  DATA 74,34
031B:  DATA 20,3A
031C:  DATA E8,32
031D:  DATA 20,32
031E:  DATA E5,39
031F:  DATA E9,33
0320:  DATA EE,06
0321:  DATA 0A,00
0322:  DATA D3,26
0323:  DATA 46,10
0324:  DATA F5,39
0325:  DATA 65,10
0326:  DATA F2,32
0327:  DATA F1,3A
0328:  DATA E5,39
0329:  DATA 74,10
032A:  DATA 61,36
032B:  DATA EC,37
032C:  DATA F7,32
032D:  DATA E4,06
032E:  DATA 0A,00
032F:  DATA D3,26
0330:  DATA 46,10
0331:  DATA F5,39
0332:  DATA 65,10
0333:  DATA F2,32
0334:  DATA F1,3A
0335:  DATA E5,39
0336:  DATA 74,10
0337:  DATA E4,32
0338:  DATA EE,3C
0339:  DATA 65,32
033A:  DATA 0D,05
033B:  DATA 00,01
033C:  DATA D2,32
033D:  DATA 74,39
033E:  DATA 79,10
033F:  DATA F2,32
0340:  DATA F1,3A
0341:  DATA E5,39
0342:  DATA 74,10
0343:  DATA F4,37
0344:  DATA 20,21
0345:  DATA CF,29
0346:  DATA 53,10
0347:  DATA D0,24
0348:  DATA C3,06
0349:  DATA 0A,00
034A:  DATA 45,39
034B:  DATA F2,37
034C:  DATA F2,10
034D:  DATA 20,29
034E:  DATA E5,31
034F:  DATA E5,34
0350:  DATA F6,34
0351:  DATA EE,33
0352:  DATA A0,31
0353:  DATA EF,36
0354:  DATA ED,30
0355:  DATA 6E,32
0356:  DATA A0,34
0357:  DATA EE,31
0358:  DATA 6F,37
0359:  DATA F3,34
035A:  DATA 73,3A
035B:  DATA 65,37
035C:  DATA 74,10
035D:  DATA F7,34
035E:  DATA 74,34
035F:  DATA 20,3A
0360:  DATA E8,32
0361:  DATA 20,32
0362:  DATA E5,39
0363:  DATA E9,33
0364:  DATA EE,06
0365:  DATA 0A,00
0366:  DATA 45,37
0367:  DATA 64,10
0368:  DATA D3,26
0369:  DATA 46,10
036A:  DATA F5,39
036B:  DATA 69,37
036C:  DATA 67,10
036D:  DATA F2,32
036E:  DATA F1,32
036F:  DATA 73,3A
0370:  DATA A0,39
0371:  DATA E5,30
0372:  DATA F1,3A
0373:  DATA 65,37
0374:  DATA E3,32
0375:  DATA 0D,05
0376:  DATA 00,00
0377:  DATA C9,27
0378:  DATA A0,24
0379:  DATA EE,34
037A:  DATA F4,34
037B:  DATA 61,36
037C:  DATA 69,3D
037D:  DATA E5,06
037E:  DATA 0A,00
037F:  DATA 89,21
0380:  DATA EF,36
0381:  DATA 70,36
0382:  DATA 65,3A
0383:  DATA E5,06
0384:  DATA 0A,00
0385:  DATA 41,22
0386:  DATA 43,10
0387:  DATA 49,37
0388:  DATA 69,3A
0389:  DATA E9,30
038A:  DATA EC,34
038B:  DATA FA,32
038C:  DATA 0D,05
038D:  DATA 00,01
038E:  DATA 89,21
038F:  DATA EF,36
0390:  DATA 70,36
0391:  DATA 65,3A
0392:  DATA E5,06
0393:  DATA 0A,00
0394:  DATA 53,3A
0395:  DATA 61,39
0396:  DATA 74,10
0397:  DATA D3,2B
0398:  DATA C5,22
0399:  DATA D0,06
039A:  DATA 0A,00
039B:  DATA 89,29
039C:  DATA F7,32
039D:  DATA 65,38
039E:  DATA A0,39
039F:  DATA F4,32
03A0:  DATA 70,10
03A1:  DATA 3A,10
03A2:  DATA A5,3A
03A3:  DATA 0D,05
03A4:  DATA 00,01
03A5:  DATA 45,27
03A6:  DATA 44,10
03A7:  DATA D3,2B
03A8:  DATA C5,22
03A9:  DATA D0,06
03AA:  DATA 0A,00
03AB:  DATA 53,3A
03AC:  DATA 61,39
03AD:  DATA 74,10
03AE:  DATA C3,24
03AF:  DATA C7,29
03B0:  DATA 20,32
03B1:  DATA 61,3A
03B2:  DATA 61,10
03B3:  DATA E3,37
03B4:  DATA 6E,3B
03B5:  DATA 65,39
03B6:  DATA F3,34
03B7:  DATA 6F,37
03B8:  DATA 0D,05
03B9:  DATA 80,00
03BA:  DATA D3,26
03BB:  DATA 46,10
03BC:  DATA E4,30
03BD:  DATA F4,30
03BE:  DATA 20,36
03BF:  DATA E9,39
03C0:  DATA 74,10
03C1:  DATA E9,39
03C2:  DATA 20,33
03C3:  DATA 75,36
03C4:  DATA EC,10
03C5:  DATA A1,10
03C6:  DATA 0D,05
03C7:  DATA 00,00
03C8:  DATA D3,26
03C9:  DATA 46,10
03CA:  DATA E4,30
03CB:  DATA F4,30
03CC:  DATA 20,36
03CD:  DATA E9,39
03CE:  DATA 74,10
03CF:  DATA E9,39
03D0:  DATA A0,32
03D1:  DATA 6D,38
03D2:  DATA F4,3C
03D3:  DATA 0D,05
03D4:  DATA 00,00
03D5:  DATA 53,3A
03D6:  DATA 61,39
03D7:  DATA 74,10
03D8:  DATA CD,27
03D9:  DATA C4,22
03DA:  DATA 20,22
03DB:  DATA D5,26
03DC:  DATA CD,2C
03DD:  DATA 0D,05
03DE:  DATA 00,01
03DF:  DATA 89,26
03E0:  DATA 4F,22
03E1:  DATA 45,10
03E2:  DATA 20,10
03E3:  DATA 20,10
03E4:  DATA 3A,10
03E5:  DATA 25,18
03E6:  DATA 32,2C
03E7:  DATA 0D,05
03E8:  DATA 00,01
03E9:  DATA 09,28
03EA:  DATA 61,39
03EB:  DATA E1,36
03EC:  DATA 31,10
03ED:  DATA 20,10
03EE:  DATA 3A,10
03EF:  DATA 30,3C
03F0:  DATA 25,18
03F1:  DATA 38,26
03F2:  DATA D8,06
03F3:  DATA 0A,00
03F4:  DATA 09,28
03F5:  DATA 61,39
03F6:  DATA E1,36
03F7:  DATA 32,10
03F8:  DATA 20,10
03F9:  DATA 3A,10
03FA:  DATA 30,3C
03FB:  DATA 25,18
03FC:  DATA 34,26
03FD:  DATA D8,06
03FE:  DATA 0A,00
03FF:  DATA 45,37
0400:  DATA 64,10
0401:  DATA CD,27
0402:  DATA C4,22
0403:  DATA 20,22
0404:  DATA D5,26
0405:  DATA CD,2C
0406:  DATA 0D,05
0407:  DATA 00,00
0408:  DATA 53,3A
0409:  DATA 61,39
040A:  DATA 74,10
040B:  DATA CD,27
040C:  DATA C4,22
040D:  DATA A0,26
040E:  DATA C5,20
040F:  DATA D3,2A
0410:  DATA D2,22
0411:  DATA 0D,05
0412:  DATA 00,00
0413:  DATA 53,3A
0414:  DATA 61,39
0415:  DATA 74,10
0416:  DATA CD,27
0417:  DATA C4,22
0418:  DATA A0,26
0419:  DATA C5,20
041A:  DATA D3,2A
041B:  DATA D2,22
041C:  DATA 20,2B
041D:  DATA 6F,36
041E:  DATA F4,30
041F:  DATA E7,32
0420:  DATA 0D,05
0421:  DATA 00,00
0422:  DATA 53,3A
0423:  DATA 61,39
0424:  DATA 74,10
0425:  DATA D3,2B
0426:  DATA C5,22
0427:  DATA D0,06
0428:  DATA 0A,00
0429:  DATA 89,29
042A:  DATA F7,32
042B:  DATA 65,38
042C:  DATA A0,39
042D:  DATA F4,32
042E:  DATA 70,10
042F:  DATA 3A,10
0430:  DATA A5,3A
0431:  DATA 0D,05
0432:  DATA 80,01
0433:  DATA 45,27
0434:  DATA 44,10
0435:  DATA D3,2B
0436:  DATA C5,22
0437:  DATA D0,06
0438:  DATA 0A,00
0439:  DATA F4,32
043A:  DATA 6D,38
043B:  DATA 5F,3A
043C:  DATA 6F,38
043D:  DATA 3A,10
043E:  DATA 25,2C
043F:  DATA 0D,05
0440:  DATA 00,01
0441:  DATA F4,32
0442:  DATA 6D,38
0443:  DATA 5F,31
0444:  DATA 6F,3A
0445:  DATA 3A,10
0446:  DATA 25,2C
0447:  DATA 0D,05
0448:  DATA 00,00
0449:  DATA 70,32
044A:  DATA 5F,3B
044B:  DATA 61,36
044C:  DATA F5,32
044D:  DATA 3A,10
044E:  DATA 25,2C
044F:  DATA 0D,05
0450:  DATA 00,00
0451:  DATA E3,34
0452:  DATA E7,39
0453:  DATA 5F,3B
0454:  DATA 61,36
0455:  DATA F5,32
0456:  DATA 3A,10
0457:  DATA 25,2C
0458:  DATA 0D,05
0459:  DATA 00,00
045A:  DATA E3,3A
045B:  DATA 72,39
045C:  DATA 65,37
045D:  DATA F4,2F
045E:  DATA F6,30
045F:  DATA EC,3A
0460:  DATA 65,1D
0461:  DATA A0,12
0462:  DATA D8,06
0463:  DATA 0A,00
0464:  DATA F6,37
0465:  DATA 6C,3A
0466:  DATA E1,33
0467:  DATA E5,2F
0468:  DATA F6,30
0469:  DATA EC,3A
046A:  DATA 65,1D
046B:  DATA A0,12
046C:  DATA D8,06
046D:  DATA 0A,00
046E:  DATA 53,3A
046F:  DATA 61,39
0470:  DATA 74,10
0471:  DATA CD,27
0472:  DATA C4,22
0473:  DATA 20,2A
0474:  DATA C5,29
0475:  DATA 54,10
0476:  DATA 49,2B
0477:  DATA 0D,05
0478:  DATA 00,01
0479:  DATA 89,29
047A:  DATA F7,32
047B:  DATA 65,38
047C:  DATA A0,39
047D:  DATA F4,32
047E:  DATA 70,10
047F:  DATA 3A,10
0480:  DATA A5,3A
0481:  DATA 0D,05
0482:  DATA 00,01
0483:  DATA 53,3A
0484:  DATA 61,39
0485:  DATA 74,10
0486:  DATA 46,36
0487:  DATA E1,39
0488:  DATA 68,10
0489:  DATA 45,39
048A:  DATA E1,39
048B:  DATA 65,10
048C:  DATA 41,36
048D:  DATA EC,06
048E:  DATA 0A,00
048F:  DATA 45,37
0490:  DATA 64,10
0491:  DATA 46,36
0492:  DATA E1,39
0493:  DATA 68,10
0494:  DATA 45,39
0495:  DATA E1,39
0496:  DATA 65,10
0497:  DATA 41,36
0498:  DATA EC,06
0499:  DATA 0A,00
049A:  DATA 53,3A
049B:  DATA 61,39
049C:  DATA 74,10
049D:  DATA 46,36
049E:  DATA E1,39
049F:  DATA 68,10
04A0:  DATA 45,39
04A1:  DATA E1,39
04A2:  DATA 65,10
04A3:  DATA 31,10
04A4:  DATA D3,32
04A5:  DATA 63,3A
04A6:  DATA 6F,39
04A7:  DATA 0D,05
04A8:  DATA 00,01
04A9:  DATA 89,29
04AA:  DATA E5,31
04AB:  DATA F4,37
04AC:  DATA 72,10
04AD:  DATA 41,32
04AE:  DATA 64,39
04AF:  DATA E5,39
04B0:  DATA 73,1D
04B1:  DATA 20,18
04B2:  DATA F8,12
04B3:  DATA 30,1C
04B4:  DATA 4C,2C
04B5:  DATA 0D,05
04B6:  DATA 00,01
04B7:  DATA 45,37
04B8:  DATA 64,10
04B9:  DATA 46,36
04BA:  DATA E1,39
04BB:  DATA 68,10
04BC:  DATA 45,39
04BD:  DATA E1,39
04BE:  DATA 65,10
04BF:  DATA 31,10
04C0:  DATA D3,32
04C1:  DATA 63,3A
04C2:  DATA 6F,39
04C3:  DATA 0D,05
04C4:  DATA 00,00
04C5:  DATA 53,3A
04C6:  DATA 61,39
04C7:  DATA 74,10
04C8:  DATA 46,36
04C9:  DATA E1,39
04CA:  DATA 68,10
04CB:  DATA C3,37
04CC:  DATA F0,3C
04CD:  DATA A0,18
04CE:  DATA A0,29
04CF:  DATA E5,31
04D0:  DATA F4,37
04D1:  DATA F2,06
04D2:  DATA 0A,00
04D3:  DATA 89,29
04D4:  DATA 75,31
04D5:  DATA F3,32
04D6:  DATA 63,3A
04D7:  DATA 6F,39
04D8:  DATA A0,20
04D9:  DATA 64,32
04DA:  DATA F2,32
04DB:  DATA F3,39
04DC:  DATA 3A,10
04DD:  DATA 30,3C
04DE:  DATA 25,18
04DF:  DATA 38,26
04E0:  DATA D8,06
04E1:  DATA 0A,00
04E2:  DATA 45,37
04E3:  DATA 64,10
04E4:  DATA 46,36
04E5:  DATA E1,39
04E6:  DATA 68,10
04E7:  DATA C3,37
04E8:  DATA F0,3C
04E9:  DATA A0,18
04EA:  DATA A0,29
04EB:  DATA E5,31
04EC:  DATA F4,37
04ED:  DATA F2,06
04EE:  DATA 0A,00
04EF:  DATA 53,3A
04F0:  DATA 61,39
04F1:  DATA 74,10
04F2:  DATA 46,36
04F3:  DATA E1,39
04F4:  DATA 68,10
04F5:  DATA 57,39
04F6:  DATA 69,3A
04F7:  DATA 65,10
04F8:  DATA C4,32
04F9:  DATA ED,37
04FA:  DATA 0D,05
04FB:  DATA 00,01
04FC:  DATA 89,26
04FD:  DATA 4F,22
04FE:  DATA 45,10
04FF:  DATA 20,10
0500:  DATA 20,10
0501:  DATA 3A,10
0502:  DATA 25,18
0503:  DATA 32,2C
0504:  DATA 0D,05
0505:  DATA 00,01
0506:  DATA 89,20
0507:  DATA 64,32
0508:  DATA F2,32
0509:  DATA F3,39
050A:  DATA 20,10
050B:  DATA 3A,10
050C:  DATA 30,3C
050D:  DATA 25,18
050E:  DATA 38,26
050F:  DATA D8,06
0510:  DATA 0A,00
0511:  DATA 09,28
0512:  DATA E1,31
0513:  DATA EB,32
0514:  DATA 74,27
0515:  DATA F5,36
0516:  DATA 3A,10
0517:  DATA 30,3C
0518:  DATA 25,18
0519:  DATA 34,26
051A:  DATA D8,06
051B:  DATA 0A,00
051C:  DATA 57,39
051D:  DATA 69,3A
051E:  DATA 65,10
051F:  DATA C4,30
0520:  DATA F4,30
0521:  DATA 0D,05
0522:  DATA 00,01
0523:  DATA 45,37
0524:  DATA 64,10
0525:  DATA 46,36
0526:  DATA E1,39
0527:  DATA 68,10
0528:  DATA 57,39
0529:  DATA 69,3A
052A:  DATA 65,10
052B:  DATA C4,32
052C:  DATA ED,37
052D:  DATA 0D,05
052E:  DATA 00,00
052F:  DATA 53,3A
0530:  DATA 61,39
0531:  DATA 74,10
0532:  DATA 46,36
0533:  DATA E1,39
0534:  DATA 68,10
0535:  DATA 57,39
0536:  DATA 69,3A
0537:  DATA 65,10
0538:  DATA B4,35
0539:  DATA C2,3C
053A:  DATA F4,32
053B:  DATA A0,29
053C:  DATA 75,31
053D:  DATA F3,32
053E:  DATA 63,3A
053F:  DATA 6F,39
0540:  DATA 0D,05
0541:  DATA 00,01
0542:  DATA 45,37
0543:  DATA 64,10
0544:  DATA 46,36
0545:  DATA E1,39
0546:  DATA 68,10
0547:  DATA 57,39
0548:  DATA 69,3A
0549:  DATA 65,10
054A:  DATA B4,35
054B:  DATA C2,3C
054C:  DATA F4,32
054D:  DATA A0,29
054E:  DATA 75,31
054F:  DATA F3,32
0550:  DATA 63,3A
0551:  DATA 6F,39
0552:  DATA 0D,05
0553:  DATA 00,00
0554:  DATA 53,3A
0555:  DATA 61,39
0556:  DATA 74,10
0557:  DATA 46,36
0558:  DATA E1,39
0559:  DATA 68,10
055A:  DATA D2,32
055B:  DATA 61,32
055C:  DATA 0D,05
055D:  DATA 00,01
055E:  DATA 89,26
055F:  DATA 4F,22
0560:  DATA 45,10
0561:  DATA 20,10
0562:  DATA 20,10
0563:  DATA 3A,10
0564:  DATA 25,18
0565:  DATA 32,2C
0566:  DATA 0D,05
0567:  DATA 00,01
0568:  DATA 89,20
0569:  DATA 64,32
056A:  DATA F2,32
056B:  DATA F3,39
056C:  DATA 20,10
056D:  DATA 3A,10
056E:  DATA 30,3C
056F:  DATA 25,18
0570:  DATA 38,26
0571:  DATA D8,06
0572:  DATA 0A,00
0573:  DATA 09,28
0574:  DATA E1,31
0575:  DATA EB,32
0576:  DATA 74,27
0577:  DATA F5,36
0578:  DATA 3A,10
0579:  DATA 30,3C
057A:  DATA 25,18
057B:  DATA 34,26
057C:  DATA D8,06
057D:  DATA 0A,00
057E:  DATA D2,22
057F:  DATA 41,22
0580:  DATA 20,22
0581:  DATA 41,2A
0582:  DATA C1,06
0583:  DATA 0A,00
0584:  DATA CD,34
0585:  DATA F3,39
0586:  DATA E9,37
0587:  DATA 6E,10
0588:  DATA 46,36
0589:  DATA E1,39
058A:  DATA 68,10
058B:  DATA E9,39
058C:  DATA 20,37
058D:  DATA 6F,3A
058E:  DATA A0,31
058F:  DATA 6F,37
0590:  DATA EE,32
0591:  DATA 63,3A
0592:  DATA 65,32
0593:  DATA 0D,05
0594:  DATA 00,01
0595:  DATA 45,37
0596:  DATA 64,10
0597:  DATA 46,36
0598:  DATA E1,39
0599:  DATA 68,10
059A:  DATA D2,32
059B:  DATA 61,32
059C:  DATA 0D,05
059D:  DATA 00,00
059E:  DATA 53,3A
059F:  DATA 61,39
05A0:  DATA 74,10
05A1:  DATA 46,36
05A2:  DATA E1,39
05A3:  DATA 68,10
05A4:  DATA D2,32
05A5:  DATA 61,32
05A6:  DATA A0,20
05A7:  DATA 64,32
05A8:  DATA F2,32
05A9:  DATA F3,39
05AA:  DATA 0D,05
05AB:  DATA 00,01
05AC:  DATA D2,32
05AD:  DATA 61,32
05AE:  DATA 20,22
05AF:  DATA 61,3A
05B0:  DATA 61,1D
05B1:  DATA A0,12
05B2:  DATA 30,19
05B3:  DATA 58,10
05B4:  DATA 25,18
05B5:  DATA 32,2C
05B6:  DATA A0,12
05B7:  DATA 30,19
05B8:  DATA 58,10
05B9:  DATA 25,18
05BA:  DATA 32,2C
05BB:  DATA 0D,05
05BC:  DATA 00,01
05BD:  DATA 45,37
05BE:  DATA 64,10
05BF:  DATA 46,36
05C0:  DATA E1,39
05C1:  DATA 68,10
05C2:  DATA D2,32
05C3:  DATA 61,32
05C4:  DATA A0,20
05C5:  DATA 64,32
05C6:  DATA F2,32
05C7:  DATA F3,39
05C8:  DATA 0D,05
05C9:  DATA 00,00
05CA:  DATA 53,3A
05CB:  DATA 61,39
05CC:  DATA 74,10
05CD:  DATA 46,36
05CE:  DATA E1,39
05CF:  DATA 68,10
05D0:  DATA D3,26
05D1:  DATA 46,10
05D2:  DATA C3,37
05D3:  DATA F0,3C
05D4:  DATA 0D,05
05D5:  DATA 00,01
05D6:  DATA 45,37
05D7:  DATA 64,10
05D8:  DATA 46,36
05D9:  DATA E1,39
05DA:  DATA 68,10
05DB:  DATA D3,26
05DC:  DATA 46,10
05DD:  DATA C3,37
05DE:  DATA F0,3C
05DF:  DATA 0D,05
05E0:  DATA 00,00
05E1:  DATA 53,3A
05E2:  DATA 61,39
05E3:  DATA 74,10
05E4:  DATA 46,36
05E5:  DATA E1,39
05E6:  DATA 68,10
05E7:  DATA D3,26
05E8:  DATA 46,10
05E9:  DATA D2,32
05EA:  DATA 61,32
05EB:  DATA 0D,05
05EC:  DATA 00,01
05ED:  DATA D2,32
05EE:  DATA 61,32
05EF:  DATA 20,22
05F0:  DATA 61,3A
05F1:  DATA 61,1D
05F2:  DATA 20,00
05F3:  DATA 0D,05
05F4:  DATA 45,37
05F5:  DATA 64,10
05F6:  DATA 46,36
05F7:  DATA E1,39
05F8:  DATA 68,10
05F9:  DATA D3,26
05FA:  DATA 46,10
05FB:  DATA D2,32
05FC:  DATA 61,32
05FD:  DATA 0D,05
05FE:  DATA 00,00
05FF:  DATA 53,3A
0600:  DATA 61,39
0601:  DATA 74,10
0602:  DATA 46,36
0603:  DATA E1,39
0604:  DATA 68,10
0605:  DATA D3,26
0606:  DATA 46,10
0607:  DATA 57,39
0608:  DATA 69,3A
0609:  DATA E5,06
060A:  DATA 0A,00
060B:  DATA 45,37
060C:  DATA 64,10
060D:  DATA 46,36
060E:  DATA E1,39
060F:  DATA 68,10
0610:  DATA D3,26
0611:  DATA 46,10
0612:  DATA 57,39
0613:  DATA 69,3A
0614:  DATA E5,06
0615:  DATA 0A,00
0616:  DATA 53,3A
0617:  DATA 61,39
0618:  DATA 74,10
0619:  DATA 46,36
061A:  DATA E1,39
061B:  DATA 68,10
061C:  DATA 41,32
061D:  DATA 64,39
061E:  DATA E5,39
061F:  DATA 73,10
0620:  DATA D2,32
0621:  DATA F3,32
0622:  DATA F4,06
0623:  DATA 0A,00
0624:  DATA 45,37
0625:  DATA 64,10
0626:  DATA 46,36
0627:  DATA E1,39
0628:  DATA 68,10
0629:  DATA 41,32
062A:  DATA 64,39
062B:  DATA E5,39
062C:  DATA 73,10
062D:  DATA D2,32
062E:  DATA F3,32
062F:  DATA F4,06
0630:  DATA 0A,00
0631:  DATA 0D,05
0632:  DATA DF,2F
0633:  DATA DF,2F
0634:  DATA DF,2F
0635:  DATA DF,2F
0636:  DATA DF,2F
0637:  DATA DF,2F
0638:  DATA DF,2F
0639:  DATA DF,2F
063A:  DATA DF,2F
063B:  DATA DF,2F
063C:  DATA 0D,05
063D:  DATA 00,01
063E:  DATA DF,2F
063F:  DATA DF,29
0640:  DATA F4,30
0641:  DATA 72,3A
0642:  DATA A0,31
0643:  DATA 6F,38
0644:  DATA F9,2F
0645:  DATA E4,30
0646:  DATA F4,30
0647:  DATA DF,2F
0648:  DATA 0D,05
0649:  DATA 00,01
064A:  DATA 53,3A
064B:  DATA 61,39
064C:  DATA 74,10
064D:  DATA DB,12
064E:  DATA 64,10
064F:  DATA 74,34
0650:  DATA 5D,10
0651:  DATA E4,30
0652:  DATA F4,30
0653:  DATA A0,31
0654:  DATA 6F,38
0655:  DATA F9,06
0656:  DATA 8A,06
0657:  DATA 0A,00
0658:  DATA 0D,05
0659:  DATA DF,2F
065A:  DATA DF,22
065B:  DATA 6E,32
065C:  DATA A0,31
065D:  DATA 6F,38
065E:  DATA F9,2F
065F:  DATA E4,30
0660:  DATA F4,30
0661:  DATA DF,2F
0662:  DATA DF,2F
0663:  DATA 0D,05
0664:  DATA 00,01
0665:  DATA DF,2F
0666:  DATA DF,2F
0667:  DATA DF,2F
0668:  DATA DF,2F
0669:  DATA DF,2F
066A:  DATA DF,2F
066B:  DATA DF,2F
066C:  DATA DF,2F
066D:  DATA DF,2F
066E:  DATA DF,2F
066F:  DATA 0D,05
0670:  DATA 0D,05
0671:  DATA 00,00
0672:  DATA 49,37
0673:  DATA A0,39
0674:  DATA 6D,33
0675:  DATA A0,36
0676:  DATA E9,39
0677:  DATA F3,34
0678:  DATA 6F,37
0679:  DATA 20,32
067A:  DATA 61,3A
067B:  DATA 61,10
067C:  DATA 73,3A
067D:  DATA 61,39
067E:  DATA 74,10
067F:  DATA 20,10
0680:  DATA 61,32
0681:  DATA 64,39
0682:  DATA E5,39
0683:  DATA 73,1D
0684:  DATA A0,12
0685:  DATA 4C,2C
0686:  DATA 0D,05
0687:  DATA 00,01
0688:  DATA 49,37
0689:  DATA A0,39
068A:  DATA 6D,33
068B:  DATA A0,36
068C:  DATA E9,39
068D:  DATA F3,34
068E:  DATA 6F,37
068F:  DATA 20,32
0690:  DATA 61,3A
0691:  DATA 61,10
0692:  DATA 65,37
0693:  DATA 64,10
0694:  DATA 20,10
0695:  DATA 20,10
0696:  DATA 61,32
0697:  DATA 64,39
0698:  DATA E5,39
0699:  DATA 73,1D
069A:  DATA A0,12
069B:  DATA 4C,2C
069C:  DATA 0D,05
069D:  DATA 00,01
069E:  DATA 49,37
069F:  DATA A0,26
06A0:  DATA C9,29
06A1:  DATA 20,23
06A2:  DATA 4D,10
06A3:  DATA 57,39
06A4:  DATA 69,3A
06A5:  DATA 65,10
06A6:  DATA F3,37
06A7:  DATA 75,39
06A8:  DATA E3,32
06A9:  DATA 20,32
06AA:  DATA 61,3A
06AB:  DATA 61,10
06AC:  DATA 61,32
06AD:  DATA 64,39
06AE:  DATA E5,39
06AF:  DATA 73,1D
06B0:  DATA A0,12
06B1:  DATA 4C,2C
06B2:  DATA 0D,05
06B3:  DATA 00,01
06B4:  DATA 49,37
06B5:  DATA A0,26
06B6:  DATA C9,29
06B7:  DATA 20,23
06B8:  DATA 4D,10
06B9:  DATA 57,39
06BA:  DATA 69,3A
06BB:  DATA 65,10
06BC:  DATA E4,30
06BD:  DATA F4,30
06BE:  DATA A0,39
06BF:  DATA 69,3D
06C0:  DATA 65,10
06C1:  DATA 20,10
06C2:  DATA 20,10
06C3:  DATA 20,10
06C4:  DATA 20,10
06C5:  DATA 20,1D
06C6:  DATA A0,12
06C7:  DATA EC,3A
06C8:  DATA 0D,05
06C9:  DATA 0D,05
06CA:  DATA 00,02
06CB:  DATA D3,34
06CC:  DATA FA,32
06CD:  DATA A0,30
06CE:  DATA F2,32
06CF:  DATA 61,10
06D0:  DATA F2,32
06D1:  DATA 61,32
06D2:  DATA 0D,05
06D3:  DATA 00,01
06D4:  DATA F5,39
06D5:  DATA 65,32
06D6:  DATA DF,39
06D7:  DATA 69,3D
06D8:  DATA 65,10
06D9:  DATA 3D,10
06DA:  DATA 25,36
06DB:  DATA 75,10
06DC:  DATA A8,39
06DD:  DATA F2,31
06DE:  DATA 20,18
06DF:  DATA F8,12
06E0:  DATA 30,1C
06E1:  DATA 4C,2C
06E2:  DATA A9,06
06E3:  DATA 0A,00
06E4:  DATA EC,37
06E5:  DATA 6F,38
06E6:  DATA A0,31
06E7:  DATA EF,3A
06E8:  DATA 6E,3A
06E9:  DATA 3D,10
06EA:  DATA 25,32
06EB:  DATA 20,10
06EC:  DATA A8,39
06ED:  DATA F2,31
06EE:  DATA 20,18
06EF:  DATA F8,12
06F0:  DATA 30,1C
06F1:  DATA 4C,2C
06F2:  DATA A9,06
06F3:  DATA 8A,06
06F4:  DATA 0A,00
06F5:  DATA 57,39
06F6:  DATA 61,38
06F7:  DATA 20,3A
06F8:  DATA F2,34
06F9:  DATA E7,33
06FA:  DATA 65,39
06FB:  DATA 65,32
06FC:  DATA 3A,10
06FD:  DATA D2,32
06FE:  DATA F3,32
06FF:  DATA 74,3A
0700:  DATA 69,37
0701:  DATA 67,10
0702:  DATA E4,30
0703:  DATA F4,30
0704:  DATA DF,3B
0705:  DATA F2,34
0706:  DATA F4,32
0707:  DATA DF,30
0708:  DATA 64,32
0709:  DATA 72,10
070A:  DATA F4,37
070B:  DATA A0,39
070C:  DATA F4,30
070D:  DATA 72,3A
070E:  DATA 0D,05
070F:  DATA 00,00
0710:  DATA 55,38
0711:  DATA E4,30
0712:  DATA F4,32
0713:  DATA A0,39
0714:  DATA 69,3D
0715:  DATA 65,10
0716:  DATA 61,39
0717:  DATA E5,30
0718:  DATA 0D,05
0719:  DATA 00,01
071A:  DATA F5,39
071B:  DATA 65,32
071C:  DATA DF,39
071D:  DATA 69,3D
071E:  DATA 65,10
071F:  DATA 3D,10
0720:  DATA 25,36
0721:  DATA E4,06
0722:  DATA 0A,00
0723:  DATA EC,37
0724:  DATA 6F,38
0725:  DATA DF,31
0726:  DATA EF,3A
0727:  DATA 6E,3A
0728:  DATA A0,1E
0729:  DATA A0,12
072A:  DATA F5,06
072B:  DATA 8A,06
072C:  DATA 0A,00
072D:  DATA 0D,05
072E:  DATA DF,2F
072F:  DATA DF,2F
0730:  DATA DF,2F
0731:  DATA DF,2F
0732:  DATA DF,2F
0733:  DATA DF,2F
0734:  DATA DF,2F
0735:  DATA DF,2F
0736:  DATA DF,2F
0737:  DATA DF,2F
0738:  DATA DF,2F
0739:  DATA DF,2F
073A:  DATA DF,2F
073B:  DATA DF,2F
073C:  DATA DF,2F
073D:  DATA 0D,05
073E:  DATA DF,2F
073F:  DATA DF,2F
0740:  DATA DF,29
0741:  DATA F4,30
0742:  DATA 72,3A
0743:  DATA A0,32
0744:  DATA F8,32
0745:  DATA E3,3A
0746:  DATA F4,32
0747:  DATA DF,36
0748:  DATA E9,39
0749:  DATA F3,34
074A:  DATA 6F,37
074B:  DATA DF,2F
074C:  DATA DF,2F
074D:  DATA DF,06
074E:  DATA 8A,06
074F:  DATA 0A,00
0750:  DATA C3,37
0751:  DATA ED,36
0752:  DATA 61,37
0753:  DATA 64,10
0754:  DATA 49,22
0755:  DATA 3A,10
0756:  DATA 25,2C
0757:  DATA 0D,05
0758:  DATA 0D,05
0759:  DATA 00,01
075A:  DATA 89,04
075B:  DATA 2D,1F
075C:  DATA A0,24
075D:  DATA 6E,3B
075E:  DATA 61,36
075F:  DATA 69,32
0760:  DATA A0,21
0761:  DATA 4D,22
0762:  DATA A0,24
0763:  DATA C4,10
0764:  DATA 0D,05
0765:  DATA 00,01
0766:  DATA 0D,05
0767:  DATA DF,2F
0768:  DATA DF,2F
0769:  DATA DF,2F
076A:  DATA 45,37
076B:  DATA 64,10
076C:  DATA 65,3C
076D:  DATA E5,31
076E:  DATA 75,3A
076F:  DATA E5,2F
0770:  DATA ED,34
0771:  DATA F3,39
0772:  DATA E9,37
0773:  DATA EE,2F
0774:  DATA DF,2F
0775:  DATA DF,2F
0776:  DATA DF,06
0777:  DATA 8A,2F
0778:  DATA DF,2F
0779:  DATA DF,2F
077A:  DATA DF,2F
077B:  DATA DF,2F
077C:  DATA DF,2F
077D:  DATA DF,2F
077E:  DATA DF,2F
077F:  DATA DF,2F
0780:  DATA DF,2F
0781:  DATA DF,2F
0782:  DATA DF,2F
0783:  DATA DF,2F
0784:  DATA DF,2F
0785:  DATA DF,2F
0786:  DATA DF,2F
0787:  DATA 0D,05
0788:  DATA 00,00
0789:  DATA 53,3A
078A:  DATA 61,39
078B:  DATA 74,10
078C:  DATA 65,3C
078D:  DATA E5,31
078E:  DATA 75,3A
078F:  DATA E5,2F
0790:  DATA E3,37
0791:  DATA ED,36
0792:  DATA 61,37
0793:  DATA E4,06
0794:  DATA 0A,00
0795:  DATA 89,16
0796:  DATA 3E,10
0797:  DATA 55,38
0798:  DATA EC,34
0799:  DATA EE,35
079A:  DATA A0,31
079B:  DATA EF,36
079C:  DATA ED,30
079D:  DATA 6E,32
079E:  DATA 0D,05
079F:  DATA 00,01
07A0:  DATA 09,10
07A1:  DATA 20,10
07A2:  DATA 54,39
07A3:  DATA 61,37
07A4:  DATA F3,36
07A5:  DATA 69,3A
07A6:  DATA A0,20
07A7:  DATA E3,35
07A8:  DATA EE,37
07A9:  DATA EC,32
07AA:  DATA 67,32
07AB:  DATA E5,06
07AC:  DATA 0A,00
07AD:  DATA 89,16
07AE:  DATA 3E,10
07AF:  DATA 53,3A
07B0:  DATA 61,3A
07B1:  DATA F5,39
07B2:  DATA A0,31
07B3:  DATA E8,32
07B4:  DATA E3,35
07B5:  DATA 0D,05
07B6:  DATA 00,01
07B7:  DATA 09,10
07B8:  DATA 20,10
07B9:  DATA 54,39
07BA:  DATA 61,37
07BB:  DATA F3,36
07BC:  DATA 69,3A
07BD:  DATA A0,26
07BE:  DATA C9,29
07BF:  DATA A0,26
07C0:  DATA C3,2A
07C1:  DATA A0,29
07C2:  DATA F4,30
07C3:  DATA F4,3A
07C4:  DATA F3,06
07C5:  DATA 0A,00
07C6:  DATA E6,34
07C7:  DATA EE,34
07C8:  DATA 73,34
07C9:  DATA 65,32
07CA:  DATA A0,34
07CB:  DATA 6E,10
07CC:  DATA 73,3A
07CD:  DATA 61,3A
07CE:  DATA F5,39
07CF:  DATA DF,31
07D0:  DATA E8,32
07D1:  DATA E3,35
07D2:  DATA 0D,05
07D3:  DATA 00,00
07D4:  DATA 89,16
07D5:  DATA 3E,10
07D6:  DATA D3,26
07D7:  DATA 46,10
07D8:  DATA 61,3B
07D9:  DATA E1,34
07DA:  DATA EC,30
07DB:  DATA 62,36
07DC:  DATA 65,10
07DD:  DATA 63,34
07DE:  DATA E5,31
07DF:  DATA EB,06
07E0:  DATA 0A,00
07E1:  DATA 09,10
07E2:  DATA 20,10
07E3:  DATA 54,39
07E4:  DATA 61,37
07E5:  DATA F3,36
07E6:  DATA 69,3A
07E7:  DATA A0,20
07E8:  DATA E3,35
07E9:  DATA EE,37
07EA:  DATA EC,32
07EB:  DATA 67,32
07EC:  DATA E5,06
07ED:  DATA 0A,00
07EE:  DATA 89,04
07EF:  DATA 2D,1F
07F0:  DATA A0,30
07F1:  DATA 6C,36
07F2:  DATA EF,3B
07F3:  DATA E4,06
07F4:  DATA 0A,00
07F5:  DATA 89,04
07F6:  DATA 2D,1F
07F7:  DATA 20,32
07F8:  DATA 65,37
07F9:  DATA F9,32
07FA:  DATA E4,06
07FB:  DATA 0A,00
*
0800:  DATA 0D,05
0801:  DATA 0D,05
0802:  DATA 0D,05
0803:  DATA BD,1E
0804:  DATA BD,1E
0805:  DATA BD,1E
0806:  DATA BD,1E
0807:  DATA BD,1E
0808:  DATA BD,1E
0809:  DATA BD,1E
080A:  DATA BD,1E
080B:  DATA BD,1E
080C:  DATA BD,1E
080D:  DATA BD,1E
080E:  DATA BD,1E
080F:  DATA BD,1E
0810:  DATA BD,1E
0811:  DATA BD,1E
0812:  DATA BD,1E
0813:  DATA BD,1E
0814:  DATA BD,1E
0815:  DATA BD,1E
0816:  DATA BD,1E
0817:  DATA BD,1E
0818:  DATA BD,1E
0819:  DATA BD,1E
081A:  DATA BD,1E
081B:  DATA BD,1E
081C:  DATA BD,1E
081D:  DATA BD,1E
081E:  DATA BD,1E
081F:  DATA BD,1E
0820:  DATA BD,1E
0821:  DATA 0D,05
0822:  DATA 00,01
0823:  DATA 54,34
0824:  DATA E9,39
0825:  DATA A0,34
0826:  DATA 73,10
0827:  DATA CD,27
0828:  DATA CD,24
0829:  DATA CA,24
082A:  DATA A0,21
082B:  DATA C9,23
082C:  DATA 53,10
082D:  DATA D0,24
082E:  DATA 43,10
082F:  DATA 42,21
0830:  DATA 4D,10
0831:  DATA E6,37
0832:  DATA 72,10
0833:  DATA CD,24
0834:  DATA D3,1B
0835:  DATA 5F,21
0836:  DATA C2,26
0837:  DATA 33,17
0838:  DATA 0D,05
0839:  DATA 00,01
083A:  DATA CC,30
083B:  DATA 73,3A
083C:  DATA A0,3A
083D:  DATA 70,32
083E:  DATA 61,3A
083F:  DATA 65,32
0840:  DATA A0,37
0841:  DATA 6E,10
0842:  DATA A5,39
0843:  DATA A0,12
0844:  DATA 73,16
0845:  DATA 20,31
0846:  DATA 79,10
0847:  DATA 49,37
0848:  DATA EF,3A
0849:  DATA 65,17
084A:  DATA 0D,05
084B:  DATA 0D,05
084C:  DATA 00,01
084D:  DATA B2,1B
084E:  DATA 2D,25
084F:  DATA 75,37
0850:  DATA 2D,19
0851:  DATA 35,00
0852:  DATA B1,19
0853:  DATA 3A,18
0854:  DATA 33,1D
0855:  DATA B3,1A
0856:  DATA 00,01
0857:  DATA DF,2F
0858:  DATA DF,2F
0859:  DATA C3,24
085A:  DATA C7,29
085B:  DATA 20,28
085C:  DATA C9,21
085D:  DATA A0,29
085E:  DATA F4,30
085F:  DATA 72,3A
0860:  DATA A0,27
0861:  DATA F0,32
0862:  DATA F2,30
0863:  DATA F4,34
0864:  DATA 6F,37
0865:  DATA DF,2F
0866:  DATA DF,2F
0867:  DATA DF,06
0868:  DATA 8A,06
0869:  DATA 0A,00
086A:  DATA F7,30
086B:  DATA 69,3A
086C:  DATA 69,37
086D:  DATA 67,10
086E:  DATA E6,37
086F:  DATA 72,10
0870:  DATA C2,27
0871:  DATA D3,29
0872:  DATA 20,28
0873:  DATA C9,21
0874:  DATA A0,31
0875:  DATA EF,36
0876:  DATA ED,30
0877:  DATA 6E,32
0878:  DATA 00,01
0879:  DATA 0D,05
087A:  DATA F7,30
087B:  DATA 69,3A
087C:  DATA 69,37
087D:  DATA 67,10
087E:  DATA E6,37
087F:  DATA 72,10
0880:  DATA C2,27
0881:  DATA D3,29
0882:  DATA 20,28
0883:  DATA C9,21
0884:  DATA A0,31
0885:  DATA EF,36
0886:  DATA ED,30
0887:  DATA 6E,32
0888:  DATA 00,01
0889:  DATA 0D,05
088A:  DATA 0D,05
088B:  DATA BD,1E
088C:  DATA BD,1E
088D:  DATA BD,1E
088E:  DATA 0D,05
088F:  DATA 0D,05
0890:  DATA C6,34
0891:  DATA EE,34
0892:  DATA 73,34
0893:  DATA 65,32
0894:  DATA 20,38
0895:  DATA F2,37
0896:  DATA E3,32
0897:  DATA F3,39
0898:  DATA AE,06
0899:  DATA 8A,2B
089A:  DATA E1,34
089B:  DATA 74,10
089C:  DATA E6,37
089D:  DATA 72,10
089E:  DATA C2,27
089F:  DATA D3,29
08A0:  DATA 20,28
08A1:  DATA C9,21
08A2:  DATA 20,3A
08A3:  DATA 75,39
08A4:  DATA 6E,10
08A5:  DATA 6F,33
08A6:  DATA 66,10
08A7:  DATA ED,32
08A8:  DATA 00,01
08A9:  DATA 45,37
08AA:  DATA 64,10
08AB:  DATA ED,30
08AC:  DATA 69,37
08AD:  DATA 0D,05
08AE:  DATA 00,00
*
08D4:  MOVF   0B,W
08D5:  BCF    0B.7
08D6:  MOVLB  03
08D7:  BSF    15.7
08D8:  BSF    15.0
08D9:  NOP
08DA:  NOP
08DB:  BTFSC  09.7
08DC:  BSF    0B.7
08DD:  MOVF   13,W
08DE:  ANDLW  7F
08DF:  BTFSC  03.2
08E0:  GOTO   120
08E1:  MOVLB  0F
08E2:  MOVWF  40
08E3:  MOVLB  03
08E4:  MOVF   11,W
08E5:  MOVLB  0F
08E6:  MOVWF  41
08E7:  MOVLB  03
08E8:  MOVF   12,W
08E9:  MOVLB  0F
08EA:  MOVWF  42
08EB:  MOVF   40,W
08EC:  MOVWF  43
08ED:  MOVLB  00
08EE:  CALL   0AF
08EF:  MOVLB  0F
08F0:  MOVF   41,W
08F1:  MOVLB  03
08F2:  MOVWF  11
08F3:  MOVLB  0F
08F4:  MOVF   42,W
08F5:  MOVLB  03
08F6:  MOVWF  12
08F7:  MOVF   0B,W
08F8:  BCF    0B.7
08F9:  BSF    15.7
08FA:  BSF    15.0
08FB:  NOP
08FC:  NOP
08FD:  BTFSC  09.7
08FE:  BSF    0B.7
08FF:  RLF    13,W
0900:  RLF    14,W
0901:  ANDLW  7F
0902:  BTFSC  03.2
0903:  GOTO   120
0904:  MOVLB  0F
0905:  MOVWF  40
0906:  MOVLB  03
0907:  MOVF   11,W
0908:  MOVLB  0F
0909:  MOVWF  41
090A:  MOVLB  03
090B:  MOVF   12,W
090C:  MOVLB  0F
090D:  MOVWF  42
090E:  MOVF   40,W
090F:  MOVWF  43
0910:  MOVLB  00
0911:  CALL   0AF
0912:  MOVLB  0F
0913:  MOVF   41,W
0914:  MOVLB  03
0915:  MOVWF  11
0916:  MOVLB  0F
0917:  MOVF   42,W
0918:  MOVLB  03
0919:  MOVWF  12
091A:  INCF   11,F
091B:  BTFSC  03.2
091C:  INCF   12,F
091D:  MOVLB  00
091E:  GOTO   0D4
091F:  MOVLB  03
0920:  MOVLB  00
0921:  RETURN
0922:  MOVF   0B,W
0923:  BCF    0B.7
0924:  MOVLB  03
0925:  BSF    15.7
0926:  BSF    15.0
0927:  NOP
0928:  NOP
0929:  BTFSC  09.7
092A:  BSF    0B.7
092B:  BTFSC  03.0
092C:  GOTO   156
092D:  MOVF   13,W
092E:  ANDLW  7F
092F:  MOVLB  0C
0930:  MOVWF  61
0931:  MOVLB  03
0932:  MOVF   11,W
0933:  MOVLB  0C
0934:  MOVWF  62
0935:  MOVLB  03
0936:  MOVF   12,W
0937:  MOVLB  0C
0938:  MOVWF  63
0939:  MOVF   61,W
093A:  MOVLB  0F
093B:  MOVWF  43
093C:  MOVLB  00
093D:  CALL   0AF
093E:  MOVLB  0C
093F:  MOVF   62,W
0940:  MOVLB  03
0941:  MOVWF  11
0942:  MOVLB  0C
0943:  MOVF   63,W
0944:  MOVLB  03
0945:  MOVWF  12
0946:  MOVF   0B,W
0947:  BCF    0B.7
0948:  BSF    15.7
0949:  BSF    15.0
094A:  NOP
094B:  NOP
094C:  BTFSC  09.7
094D:  BSF    0B.7
094E:  MOVLB  0C
094F:  DECFSZ 5E,F
0950:  GOTO   152
0951:  GOTO   154
0952:  MOVLB  03
0953:  GOTO   156
0954:  GOTO   17A
0955:  MOVLB  03
0956:  RLF    13,W
0957:  RLF    14,W
0958:  ANDLW  7F
0959:  MOVLB  0C
095A:  MOVWF  61
095B:  MOVLB  03
095C:  MOVF   11,W
095D:  MOVLB  0C
095E:  MOVWF  62
095F:  MOVLB  03
0960:  MOVF   12,W
0961:  MOVLB  0C
0962:  MOVWF  63
0963:  MOVF   61,W
0964:  MOVLB  0F
0965:  MOVWF  43
0966:  MOVLB  00
0967:  CALL   0AF
0968:  MOVLB  0C
0969:  MOVF   62,W
096A:  MOVLB  03
096B:  MOVWF  11
096C:  MOVLB  0C
096D:  MOVF   63,W
096E:  MOVLB  03
096F:  MOVWF  12
0970:  INCF   11,F
0971:  BTFSC  03.2
0972:  INCF   12,F
0973:  BCF    03.0
0974:  MOVLB  0C
0975:  DECFSZ 5E,F
0976:  GOTO   178
0977:  GOTO   17A
0978:  MOVLB  00
0979:  GOTO   122
097A:  MOVLB  00
097B:  RETURN
*
0A0C:  MOVLB  0F
0A0D:  MOVF   5D,W
0A0E:  ANDLW  07
0A0F:  MOVWF  77
0A10:  RRF    5D,W
0A11:  MOVWF  78
0A12:  RRF    78,F
0A13:  RRF    78,F
0A14:  MOVLW  1F
0A15:  ANDWF  78,F
0A16:  MOVF   78,W
0A17:  ADDWF  5F,W
0A18:  MOVWF  04
0A19:  MOVLW  00
0A1A:  ADDWFC 60,W
0A1B:  MOVWF  05
0A1C:  CLRF   78
0A1D:  INCF   78,F
0A1E:  INCF   77,F
0A1F:  GOTO   221
0A20:  RLF    78,F
0A21:  DECFSZ 77,F
0A22:  GOTO   220
0A23:  MOVF   5E,F
0A24:  BTFSC  03.2
0A25:  GOTO   229
0A26:  MOVF   78,W
0A27:  IORWF  00,F
0A28:  GOTO   22C
0A29:  COMF   78,F
0A2A:  MOVF   78,W
0A2B:  ANDWF  00,F
0A2C:  MOVLB  00
0A2D:  RETURN
*
0C79:  MOVLB  0E
0C7A:  BTFSC  4F.7
0C7B:  GOTO   48F
0C7C:  MOVLW  0F
0C7D:  MOVWF  77
0C7E:  SWAPF  4E,W
0C7F:  ANDWF  77,F
0C80:  MOVLW  0A
0C81:  SUBWF  77,W
0C82:  BTFSC  03.0
0C83:  GOTO   487
0C84:  MOVLW  30
0C85:  ADDWF  77,F
0C86:  GOTO   489
0C87:  MOVF   4F,W
0C88:  ADDWF  77,F
0C89:  MOVF   77,W
0C8A:  MOVLB  0F
0C8B:  MOVWF  43
0C8C:  MOVLB  00
0C8D:  CALL   0AF
0C8E:  MOVLB  0E
0C8F:  MOVLW  0F
0C90:  ANDWF  4E,F
0C91:  MOVLW  0A
0C92:  SUBWF  4E,W
0C93:  BTFSC  03.0
0C94:  GOTO   497
0C95:  MOVLW  30
0C96:  GOTO   499
0C97:  BCF    4F.7
0C98:  MOVF   4F,W
0C99:  ADDWF  4E,F
0C9A:  MOVF   4E,W
0C9B:  MOVLB  0F
0C9C:  MOVWF  43
0C9D:  MOVLB  00
0C9E:  CALL   0AF
0C9F:  RETURN
*
1666:  MOVF   78,W
1667:  BTFSC  03.2
1668:  GOTO   66D
1669:  MOVF   77,W
166A:  MOVWI  W,[FSR0++]
166B:  DECFSZ 78,F
166C:  GOTO   669
*
1705:  MOVLB  0C
1706:  MOVF   65,W
1707:  CLRF   78
1708:  SUBWF  64,W
1709:  BTFSC  03.0
170A:  GOTO   70E
170B:  MOVF   64,W
170C:  MOVWF  77
170D:  GOTO   71A
170E:  CLRF   77
170F:  MOVLW  08
1710:  MOVWF  66
1711:  RLF    64,F
1712:  RLF    77,F
1713:  MOVF   65,W
1714:  SUBWF  77,W
1715:  BTFSC  03.0
1716:  MOVWF  77
1717:  RLF    78,F
1718:  DECFSZ 66,F
1719:  GOTO   711
171A:  MOVLB  00
171B:  RETURN
171C:  MOVF   78,W
171D:  MOVLB  0C
171E:  MOVF   4C,W
171F:  MOVWF  64
1720:  MOVLW  64
1721:  MOVWF  65
1722:  MOVLB  00
1723:  CALL   705
1724:  MOVF   77,W
1725:  MOVLB  0C
1726:  MOVWF  4C
1727:  MOVF   78,W
1728:  MOVLW  30
1729:  BTFSS  03.2
172A:  GOTO   732
172B:  BTFSS  4D.1
172C:  GOTO   73E
172D:  BTFSC  4D.3
172E:  GOTO   73E
172F:  BTFSC  4D.4
1730:  MOVLW  20
1731:  GOTO   735
1732:  BCF    4D.3
1733:  BCF    4D.4
1734:  BSF    4D.0
1735:  ADDWF  78,F
1736:  MOVF   78,W
1737:  MOVLB  0F
1738:  MOVWF  43
1739:  MOVLP  08
173A:  MOVLB  00
173B:  CALL   0AF
173C:  MOVLP  10
173D:  MOVLB  0C
173E:  MOVF   4C,W
173F:  MOVWF  64
1740:  MOVLW  0A
1741:  MOVWF  65
1742:  MOVLB  00
1743:  CALL   705
1744:  MOVF   77,W
1745:  MOVLB  0C
1746:  MOVWF  4C
1747:  MOVF   78,W
1748:  MOVLW  30
1749:  BTFSS  03.2
174A:  GOTO   751
174B:  BTFSC  4D.3
174C:  GOTO   75A
174D:  BTFSS  4D.0
174E:  GOTO   75A
174F:  BTFSC  4D.4
1750:  MOVLW  20
1751:  ADDWF  78,F
1752:  MOVF   78,W
1753:  MOVLB  0F
1754:  MOVWF  43
1755:  MOVLP  08
1756:  MOVLB  00
1757:  CALL   0AF
1758:  MOVLP  10
1759:  MOVLB  0C
175A:  MOVLW  30
175B:  ADDWF  4C,F
175C:  MOVF   4C,W
175D:  MOVLB  0F
175E:  MOVWF  43
175F:  MOVLP  08
1760:  MOVLB  00
1761:  CALL   0AF
1762:  MOVLP  10
1763:  RETURN
*
2800:  MOVLW  20
2801:  MOVLB  0C
2802:  BTFSS  5C.4
2803:  MOVLW  30
2804:  MOVWF  60
2805:  MOVF   5B,W
2806:  MOVWF  77
2807:  BTFSS  5B.7
2808:  GOTO   011
2809:  COMF   77,F
280A:  INCF   77,F
280B:  MOVF   77,W
280C:  MOVWF  5B
280D:  MOVLW  2D
280E:  MOVWF  60
280F:  BSF    5C.7
2810:  BSF    5C.0
2811:  MOVF   5B,W
2812:  MOVWF  64
2813:  MOVLW  64
2814:  MOVWF  65
2815:  MOVLP  10
2816:  MOVLB  00
2817:  CALL   705
2818:  MOVLP  28
2819:  MOVF   77,W
281A:  MOVLB  0C
281B:  MOVWF  5B
281C:  MOVLW  30
281D:  ADDWF  78,W
281E:  MOVWF  61
281F:  MOVF   5B,W
2820:  MOVWF  64
2821:  MOVLW  0A
2822:  MOVWF  65
2823:  MOVLP  10
2824:  MOVLB  00
2825:  CALL   705
2826:  MOVLP  28
2827:  MOVLW  30
2828:  ADDWF  77,W
2829:  MOVLB  0C
282A:  MOVWF  63
282B:  MOVLW  30
282C:  ADDWF  78,W
282D:  MOVWF  62
282E:  MOVF   60,W
282F:  MOVWF  77
2830:  MOVLW  30
2831:  SUBWF  61,W
2832:  BTFSC  03.2
2833:  GOTO   038
2834:  BSF    5C.1
2835:  BTFSC  5C.7
2836:  BSF    5C.2
2837:  GOTO   04C
2838:  MOVF   60,W
2839:  MOVWF  61
283A:  MOVLW  20
283B:  MOVWF  60
283C:  MOVLW  30
283D:  SUBWF  62,W
283E:  BTFSC  03.2
283F:  GOTO   044
2840:  BSF    5C.0
2841:  BTFSC  5C.7
2842:  BSF    5C.1
2843:  GOTO   04C
2844:  BTFSS  03.2
2845:  BSF    5C.0
2846:  BTFSS  03.2
2847:  GOTO   04C
2848:  MOVF   61,W
2849:  MOVWF  62
284A:  MOVLW  20
284B:  MOVWF  61
284C:  BTFSC  5C.2
284D:  GOTO   053
284E:  BTFSC  5C.1
284F:  GOTO   05B
2850:  BTFSC  5C.0
2851:  GOTO   063
2852:  GOTO   06B
2853:  MOVF   60,W
2854:  MOVLB  0F
2855:  MOVWF  43
2856:  MOVLP  08
2857:  MOVLB  00
2858:  CALL   0AF
2859:  MOVLP  28
285A:  MOVLB  0C
285B:  MOVF   61,W
285C:  MOVLB  0F
285D:  MOVWF  43
285E:  MOVLP  08
285F:  MOVLB  00
2860:  CALL   0AF
2861:  MOVLP  28
2862:  MOVLB  0C
2863:  MOVF   62,W
2864:  MOVLB  0F
2865:  MOVWF  43
2866:  MOVLP  08
2867:  MOVLB  00
2868:  CALL   0AF
2869:  MOVLP  28
286A:  MOVLB  0C
286B:  MOVF   63,W
286C:  MOVLB  0F
286D:  MOVWF  43
286E:  MOVLP  08
286F:  MOVLB  00
2870:  CALL   0AF
2871:  MOVLP  28
2872:  RETURN
*
2BDC:  BTFSC  03.1
2BDD:  GOTO   3E2
2BDE:  MOVLW  24
2BDF:  MOVWF  05
2BE0:  MOVLW  1A
2BE1:  MOVWF  04
2BE2:  CLRF   77
2BE3:  CLRF   78
2BE4:  CLRF   79
2BE5:  CLRF   7A
2BE6:  MOVLB  0D
2BE7:  CLRF   2A
2BE8:  CLRF   2B
2BE9:  CLRF   2C
2BEA:  CLRF   2D
2BEB:  MOVF   27,W
2BEC:  IORWF  26,W
2BED:  IORWF  25,W
2BEE:  IORWF  24,W
2BEF:  BTFSC  03.2
2BF0:  GOTO   421
2BF1:  MOVLW  20
2BF2:  MOVWF  2E
2BF3:  BCF    03.0
2BF4:  RLF    20,F
2BF5:  RLF    21,F
2BF6:  RLF    22,F
2BF7:  RLF    23,F
2BF8:  RLF    2A,F
2BF9:  RLF    2B,F
2BFA:  RLF    2C,F
2BFB:  RLF    2D,F
2BFC:  MOVF   27,W
2BFD:  SUBWF  2D,W
2BFE:  BTFSS  03.2
2BFF:  GOTO   40A
2C00:  MOVF   26,W
2C01:  SUBWF  2C,W
2C02:  BTFSS  03.2
2C03:  GOTO   40A
2C04:  MOVF   25,W
2C05:  SUBWF  2B,W
2C06:  BTFSS  03.2
2C07:  GOTO   40A
2C08:  MOVF   24,W
2C09:  SUBWF  2A,W
2C0A:  BTFSS  03.0
2C0B:  GOTO   41B
2C0C:  MOVF   24,W
2C0D:  SUBWF  2A,F
2C0E:  MOVF   25,W
2C0F:  BTFSS  03.0
2C10:  INCFSZ 25,W
2C11:  SUBWF  2B,F
2C12:  MOVF   26,W
2C13:  BTFSS  03.0
2C14:  INCFSZ 26,W
2C15:  SUBWF  2C,F
2C16:  MOVF   27,W
2C17:  BTFSS  03.0
2C18:  INCFSZ 27,W
2C19:  SUBWF  2D,F
2C1A:  BSF    03.0
2C1B:  RLF    77,F
2C1C:  RLF    78,F
2C1D:  RLF    79,F
2C1E:  RLF    7A,F
2C1F:  DECFSZ 2E,F
2C20:  GOTO   3F3
2C21:  MOVF   2A,W
2C22:  MOVWF  00
2C23:  MOVF   2B,W
2C24:  MOVWI  W,[FSR0+01]
2C25:  MOVF   2C,W
2C26:  MOVWI  W,[FSR0+02]
2C27:  MOVF   2D,W
2C28:  MOVWI  W,[FSR0+03]
2C29:  MOVLB  00
2C2A:  RETURN
*
2EA6:  CLRF   77
2EA7:  CLRF   78
2EA8:  MOVF   42,W
2EA9:  BCF    03.0
2EAA:  BTFSC  43.0
2EAB:  ADDWF  77,F
2EAC:  RRF    77,F
2EAD:  RRF    78,F
2EAE:  BTFSC  43.1
2EAF:  ADDWF  77,F
2EB0:  RRF    77,F
2EB1:  RRF    78,F
2EB2:  BTFSC  43.2
2EB3:  ADDWF  77,F
2EB4:  RRF    77,F
2EB5:  RRF    78,F
2EB6:  BTFSC  43.3
2EB7:  ADDWF  77,F
2EB8:  RRF    77,F
2EB9:  RRF    78,F
2EBA:  BTFSC  43.4
2EBB:  ADDWF  77,F
2EBC:  RRF    77,F
2EBD:  RRF    78,F
2EBE:  BTFSC  43.5
2EBF:  ADDWF  77,F
2EC0:  RRF    77,F
2EC1:  RRF    78,F
2EC2:  BTFSC  43.6
2EC3:  ADDWF  77,F
2EC4:  RRF    77,F
2EC5:  RRF    78,F
2EC6:  BTFSC  43.7
2EC7:  ADDWF  77,F
2EC8:  RRF    77,F
2EC9:  RRF    78,F
*
2F45:  MOVF   04,W
2F46:  MOVLB  0C
2F47:  MOVWF  68
2F48:  MOVLW  3B
2F49:  MOVWF  6F
2F4A:  MOVLW  9A
2F4B:  MOVWF  6E
2F4C:  MOVLW  CA
2F4D:  MOVWF  6D
2F4E:  CLRF   6C
2F4F:  MOVLW  0A
2F50:  MOVWF  6A
2F51:  BSF    03.1
2F52:  MOVLW  23
2F53:  MOVWF  05
2F54:  MOVLW  FE
2F55:  MOVWF  04
2F56:  MOVF   61,W
2F57:  MOVLB  0D
2F58:  MOVWF  23
2F59:  MOVLB  0C
2F5A:  MOVF   60,W
2F5B:  MOVLB  0D
2F5C:  MOVWF  22
2F5D:  MOVLB  0C
2F5E:  MOVF   5F,W
2F5F:  MOVLB  0D
2F60:  MOVWF  21
2F61:  MOVLB  0C
2F62:  MOVF   5E,W
2F63:  MOVLB  0D
2F64:  MOVWF  20
2F65:  MOVLB  0C
2F66:  MOVF   6F,W
2F67:  MOVLB  0D
2F68:  MOVWF  27
2F69:  MOVLB  0C
2F6A:  MOVF   6E,W
2F6B:  MOVLB  0D
2F6C:  MOVWF  26
2F6D:  MOVLB  0C
2F6E:  MOVF   6D,W
2F6F:  MOVLB  0D
2F70:  MOVWF  25
2F71:  MOVLB  0C
2F72:  MOVF   6C,W
2F73:  MOVLB  0D
2F74:  MOVWF  24
2F75:  MOVLB  00
2F76:  CALL   3DC
2F77:  MOVF   78,W
2F78:  MOVF   77,F
2F79:  BTFSS  03.2
2F7A:  GOTO   792
2F7B:  MOVLB  0C
2F7C:  MOVF   6A,W
2F7D:  XORLW  01
2F7E:  BTFSS  03.2
2F7F:  GOTO   782
2F80:  MOVLB  00
2F81:  GOTO   792
2F82:  MOVF   68,W
2F83:  BTFSC  03.2
2F84:  GOTO   794
2F85:  ANDLW  0F
2F86:  SUBWF  6A,W
2F87:  BTFSC  03.2
2F88:  GOTO   78B
2F89:  BTFSC  03.0
2F8A:  GOTO   79E
2F8B:  BTFSC  68.7
2F8C:  GOTO   79E
2F8D:  BTFSC  68.6
2F8E:  GOTO   794
2F8F:  MOVLW  20
2F90:  GOTO   795
2F91:  MOVLB  00
2F92:  MOVLB  0C
2F93:  CLRF   68
2F94:  MOVLW  30
2F95:  ADDWF  77,F
2F96:  MOVF   77,W
2F97:  MOVLB  0F
2F98:  MOVWF  43
2F99:  MOVLP  08
2F9A:  MOVLB  00
2F9B:  CALL   0AF
2F9C:  MOVLP  28
2F9D:  MOVLB  0C
2F9E:  BCF    03.1
2F9F:  MOVF   6F,W
2FA0:  MOVLB  0D
2FA1:  MOVWF  23
2FA2:  MOVLB  0C
2FA3:  MOVF   6E,W
2FA4:  MOVLB  0D
2FA5:  MOVWF  22
2FA6:  MOVLB  0C
2FA7:  MOVF   6D,W
2FA8:  MOVLB  0D
2FA9:  MOVWF  21
2FAA:  MOVLB  0C
2FAB:  MOVF   6C,W
2FAC:  MOVLB  0D
2FAD:  MOVWF  20
2FAE:  CLRF   27
2FAF:  CLRF   26
2FB0:  CLRF   25
2FB1:  MOVLW  0A
2FB2:  MOVWF  24
2FB3:  MOVLB  00
2FB4:  CALL   3DC
2FB5:  MOVF   7A,W
2FB6:  MOVLB  0C
2FB7:  MOVWF  6F
2FB8:  MOVF   79,W
2FB9:  MOVWF  6E
2FBA:  MOVF   78,W
2FBB:  MOVWF  6D
2FBC:  MOVF   77,W
2FBD:  MOVWF  6C
2FBE:  DECFSZ 6A,F
2FBF:  GOTO   751
2FC0:  MOVLB  00
2FC1:  RETURN
*
3B07:  MOVF   04,W
3B08:  MOVWF  50
3B09:  BTFSS  4F.7
3B0A:  GOTO   318
3B0B:  DECF   50,F
3B0C:  BSF    50.5
3B0D:  COMF   4C,F
3B0E:  COMF   4D,F
3B0F:  COMF   4E,F
3B10:  COMF   4F,F
3B11:  INCF   4C,F
3B12:  BTFSC  03.2
3B13:  INCF   4D,F
3B14:  BTFSC  03.2
3B15:  INCF   4E,F
3B16:  BTFSC  03.2
3B17:  INCF   4F,F
3B18:  MOVLW  3B
3B19:  MOVWF  57
3B1A:  MOVLW  9A
3B1B:  MOVWF  56
3B1C:  MOVLW  CA
3B1D:  MOVWF  55
3B1E:  CLRF   54
3B1F:  MOVLW  0A
3B20:  MOVWF  52
3B21:  BSF    03.1
3B22:  MOVLW  23
3B23:  MOVWF  05
3B24:  MOVLW  EC
3B25:  MOVWF  04
3B26:  MOVF   4F,W
3B27:  MOVLB  0D
3B28:  MOVWF  23
3B29:  MOVLB  0C
3B2A:  MOVF   4E,W
3B2B:  MOVLB  0D
3B2C:  MOVWF  22
3B2D:  MOVLB  0C
3B2E:  MOVF   4D,W
3B2F:  MOVLB  0D
3B30:  MOVWF  21
3B31:  MOVLB  0C
3B32:  MOVF   4C,W
3B33:  MOVLB  0D
3B34:  MOVWF  20
3B35:  MOVLB  0C
3B36:  MOVF   57,W
3B37:  MOVLB  0D
3B38:  MOVWF  27
3B39:  MOVLB  0C
3B3A:  MOVF   56,W
3B3B:  MOVLB  0D
3B3C:  MOVWF  26
3B3D:  MOVLB  0C
3B3E:  MOVF   55,W
3B3F:  MOVLB  0D
3B40:  MOVWF  25
3B41:  MOVLB  0C
3B42:  MOVF   54,W
3B43:  MOVLB  0D
3B44:  MOVWF  24
3B45:  MOVLP  28
3B46:  MOVLB  00
3B47:  CALL   3DC
3B48:  MOVLP  38
3B49:  MOVF   78,W
3B4A:  MOVF   77,F
3B4B:  BTFSS  03.2
3B4C:  GOTO   364
3B4D:  MOVLB  0C
3B4E:  MOVF   52,W
3B4F:  XORLW  01
3B50:  BTFSS  03.2
3B51:  GOTO   354
3B52:  MOVLB  00
3B53:  GOTO   364
3B54:  MOVF   50,W
3B55:  BTFSC  03.2
3B56:  GOTO   367
3B57:  ANDLW  0F
3B58:  SUBWF  52,W
3B59:  BTFSC  03.2
3B5A:  GOTO   35D
3B5B:  BTFSC  03.0
3B5C:  GOTO   392
3B5D:  BTFSC  50.7
3B5E:  GOTO   392
3B5F:  BTFSC  50.6
3B60:  GOTO   367
3B61:  MOVLW  20
3B62:  GOTO   389
3B63:  MOVLB  00
3B64:  MOVLW  20
3B65:  MOVLB  0C
3B66:  ANDWF  50,F
3B67:  BTFSS  50.5
3B68:  GOTO   377
3B69:  BCF    50.5
3B6A:  MOVF   77,W
3B6B:  MOVWF  50
3B6C:  MOVLW  2D
3B6D:  MOVLB  0F
3B6E:  MOVWF  43
3B6F:  MOVLP  08
3B70:  MOVLB  00
3B71:  CALL   0AF
3B72:  MOVLP  38
3B73:  MOVLB  0C
3B74:  MOVF   50,W
3B75:  MOVWF  77
3B76:  CLRF   50
3B77:  MOVLW  30
3B78:  BTFSS  50.5
3B79:  GOTO   389
3B7A:  BCF    50.5
3B7B:  MOVF   77,W
3B7C:  MOVWF  50
3B7D:  MOVLW  2D
3B7E:  MOVLB  0F
3B7F:  MOVWF  43
3B80:  MOVLP  08
3B81:  MOVLB  00
3B82:  CALL   0AF
3B83:  MOVLP  38
3B84:  MOVLB  0C
3B85:  MOVF   50,W
3B86:  MOVWF  77
3B87:  CLRF   50
3B88:  MOVLW  30
3B89:  ADDWF  77,F
3B8A:  MOVF   77,W
3B8B:  MOVLB  0F
3B8C:  MOVWF  43
3B8D:  MOVLP  08
3B8E:  MOVLB  00
3B8F:  CALL   0AF
3B90:  MOVLP  38
3B91:  MOVLB  0C
3B92:  BCF    03.1
3B93:  MOVF   57,W
3B94:  MOVLB  0D
3B95:  MOVWF  23
3B96:  MOVLB  0C
3B97:  MOVF   56,W
3B98:  MOVLB  0D
3B99:  MOVWF  22
3B9A:  MOVLB  0C
3B9B:  MOVF   55,W
3B9C:  MOVLB  0D
3B9D:  MOVWF  21
3B9E:  MOVLB  0C
3B9F:  MOVF   54,W
3BA0:  MOVLB  0D
3BA1:  MOVWF  20
3BA2:  CLRF   27
3BA3:  CLRF   26
3BA4:  CLRF   25
3BA5:  MOVLW  0A
3BA6:  MOVWF  24
3BA7:  MOVLP  28
3BA8:  MOVLB  00
3BA9:  CALL   3DC
3BAA:  MOVLP  38
3BAB:  MOVF   7A,W
3BAC:  MOVLB  0C
3BAD:  MOVWF  57
3BAE:  MOVF   79,W
3BAF:  MOVWF  56
3BB0:  MOVF   78,W
3BB1:  MOVWF  55
3BB2:  MOVF   77,W
3BB3:  MOVWF  54
3BB4:  DECFSZ 52,F
3BB5:  GOTO   321
.................... 
.................... #list
.................... 
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
*
0FB6:  MOVLW  24
0FB7:  MOVWF  05
0FB8:  MOVLW  E7
0FB9:  MOVWF  04
0FBA:  MOVF   00,W
0FBB:  BTFSC  03.2
0FBC:  GOTO   7CB
0FBD:  MOVLW  05
0FBE:  MOVWF  78
0FBF:  CLRF   77
0FC0:  DECFSZ 77,F
0FC1:  GOTO   7C0
0FC2:  DECFSZ 78,F
0FC3:  GOTO   7BF
0FC4:  MOVLW  2E
0FC5:  MOVWF  77
0FC6:  DECFSZ 77,F
0FC7:  GOTO   7C6
0FC8:  GOTO   7C9
0FC9:  DECFSZ 00,F
0FCA:  GOTO   7BD
0FCB:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
16C5:  MOVLB  00
16C6:  BTFSS  11.4
16C7:  GOTO   6C6
16C8:  MOVLB  03
16C9:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
08AF:  MOVLB  01
08B0:  BCF    0D.4
08B1:  MOVLB  02
08B2:  BCF    0D.4
08B3:  MOVLW  08
08B4:  MOVWF  78
08B5:  GOTO   0B6
08B6:  NOP
08B7:  BSF    78.7
08B8:  GOTO   0C9
08B9:  BCF    78.7
08BA:  MOVLB  0F
08BB:  RRF    43,F
08BC:  MOVLB  02
08BD:  BTFSC  03.0
08BE:  BSF    0D.4
08BF:  BTFSS  03.0
08C0:  BCF    0D.4
08C1:  BSF    78.6
08C2:  GOTO   0C9
08C3:  BCF    78.6
08C4:  DECFSZ 78,F
08C5:  GOTO   0BA
08C6:  GOTO   0C7
08C7:  NOP
08C8:  BSF    0D.4
08C9:  MOVLW  84
08CA:  MOVWF  04
08CB:  DECFSZ 04,F
08CC:  GOTO   0CB
08CD:  NOP
08CE:  BTFSC  78.7
08CF:  GOTO   0B9
08D0:  BTFSC  78.6
08D1:  GOTO   0C3
08D2:  MOVLB  00
08D3:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
0A2E:  MOVLB  04
0A2F:  MOVF   11,W
0A30:  MOVLB  10
0A31:  MOVF   2C,W
0A32:  MOVLB  04
0A33:  MOVWF  11
0A34:  RRF    14,W
0A35:  BTFSS  03.0
0A36:  GOTO   234
0A37:  MOVF   11,W
0A38:  MOVWF  77
0A39:  MOVLB  00
0A3A:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
0A3B:  MOVLB  04
0A3C:  MOVF   11,W
0A3D:  MOVLB  10
0A3E:  MOVF   2C,W
0A3F:  MOVLB  04
0A40:  MOVWF  11
0A41:  RRF    14,W
0A42:  BTFSS  03.0
0A43:  GOTO   241
0A44:  MOVF   11,W
0A45:  MOVWF  77
0A46:  MOVLB  00
0A47:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 9600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
*
1764:  MOVLB  01
1765:  BCF    0F.2
1766:  MOVLB  02
1767:  BCF    0F.2
1768:  MOVLB  04
1769:  MOVF   11,W
176A:  MOVLB  0B
176B:  MOVF   38,W
176C:  MOVLB  04
176D:  MOVWF  11
176E:  RRF    14,W
176F:  BTFSS  03.0
1770:  GOTO   76E
1771:  MOVF   11,W
1772:  MOVWF  78
1773:  MOVF   11,W
1774:  MOVLB  0B
1775:  MOVF   37,W
1776:  MOVLB  04
1777:  MOVWF  11
1778:  RRF    14,W
1779:  BTFSS  03.0
177A:  GOTO   778
177B:  MOVF   11,W
177C:  MOVWF  77
177D:  MOVLB  01
177E:  BCF    0F.2
177F:  MOVLB  02
1780:  BSF    0F.2
1781:  MOVLB  00
1782:  RETURN
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(2^16-CLOCK_FREQUENCY); 
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  MOVLW  12
004E:  MOVWF  16
004F:  NOP
....................    sec++;
0050:  MOVLW  01
0051:  ADDWF  31,F
0052:  BTFSC  03.0
0053:  INCF   32,F
0054:  BTFSC  03.2
0055:  INCF   33,F
0056:  BTFSC  03.2
0057:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0058:  BCF    11.0
0059:  MOVLP  00
005A:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
09D0:  MOVLW  5B
09D1:  MOVLB  03
09D2:  MOVWF  11
09D3:  MOVLW  00
09D4:  MOVWF  12
09D5:  MOVLB  00
09D6:  CALL   0D4
....................    clear_interrupt(INT_TIMER1);
09D7:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
09D8:  MOVLW  8F
09D9:  MOVWF  18
09DA:  CLRF   19
....................    set_timer1(2^16-CLOCK_FREQUENCY); 
09DB:  CLRF   16
09DC:  MOVLW  80
09DD:  MOVWF  17
09DE:  MOVLW  12
09DF:  MOVWF  16
09E0:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
09E1:  MOVLB  01
09E2:  BSF    11.0
....................    enable_interrupts(GLOBAL);
09E3:  MOVLW  C0
09E4:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
09E5:  MOVLW  65
09E6:  MOVLB  03
09E7:  MOVWF  11
09E8:  MOVLW  00
09E9:  MOVWF  12
09EA:  MOVLB  00
09EB:  CALL   0D4
09EC:  MOVLP  38
09ED:  GOTO   513 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
13A7:  MOVF   31,W
13A8:  MOVWF  77
13A9:  MOVF   32,W
13AA:  MOVWF  78
13AB:  MOVF   33,W
13AC:  MOVWF  79
13AD:  MOVF   34,W
13AE:  MOVWF  7A
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006B:  GOTO   06E
006C:  BTFSS  28.0
006D:  GOTO   081
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006E:  MOVF   59,W
006F:  SUBLW  1F
0070:  BTFSS  03.0
0071:  GOTO   081
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0072:  MOVF   59,W
0073:  INCF   59,F
0074:  ANDLW  1F
0075:  ADDLW  19
0076:  MOVWF  04
0077:  MOVLW  20
0078:  MOVWF  05
0079:  BTFSC  03.0
007A:  INCF   05,F
007B:  BTFSS  11.5
007C:  GOTO   07B
007D:  MOVLB  03
007E:  MOVF   19,W
007F:  MOVWF  00
0080:  MOVLB  00
0081:  BCF    11.5
0082:  MOVLP  00
0083:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
09BC:  MOVLW  84
09BD:  MOVLB  03
09BE:  MOVWF  11
09BF:  MOVLW  00
09C0:  MOVWF  12
09C1:  MOVLB  00
09C2:  CALL   0D4
....................    enable_interrupts(INT_RDA);
09C3:  MOVLB  01
09C4:  BSF    11.5
....................    enable_interrupts(global);
09C5:  MOVLW  C0
09C6:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
09C7:  MOVLW  8D
09C8:  MOVLB  03
09C9:  MOVWF  11
09CA:  MOVLW  00
09CB:  MOVWF  12
09CC:  MOVLB  00
09CD:  CALL   0D4
09CE:  MOVLP  38
09CF:  GOTO   510 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
1653:  MOVLB  0A
1654:  MOVF   6E,W
1655:  MOVWF  7A
1656:  MOVF   6D,W
1657:  MOVWF  04
1658:  MOVF   7A,W
1659:  MOVWF  05
165A:  MOVF   00,W
165B:  MOVLB  0B
165C:  MOVWF  20
165D:  MOVLB  0A
165E:  MOVF   6C,W
165F:  MOVWF  05
1660:  MOVF   6B,W
1661:  MOVWF  04
1662:  CLRF   77
1663:  MOVLB  0B
1664:  MOVF   20,W
1665:  MOVWF  78
....................    *receive_signal_size = 0;
*
166D:  MOVLB  0A
166E:  MOVF   6D,W
166F:  MOVWF  04
1670:  MOVF   6E,W
1671:  MOVWF  05
1672:  CLRF   00
1673:  MOVLP  38
1674:  MOVLB  00
1675:  GOTO   566 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 9600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 9600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0F10:  MOVLB  0F
0F11:  MOVF   57,W
0F12:  XORLW  00
0F13:  MOVLB  00
0F14:  BTFSC  03.2
0F15:  GOTO   71A
0F16:  XORLW  01
0F17:  BTFSC  03.2
0F18:  GOTO   743
0F19:  GOTO   76D
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0F1A:  MOVLB  0F
0F1B:  CLRF   60
0F1C:  CLRF   5F
0F1D:  MOVF   60,W
0F1E:  SUBWF  5E,W
0F1F:  BTFSS  03.0
0F20:  GOTO   742
0F21:  BTFSS  03.2
0F22:  GOTO   727
0F23:  MOVF   5D,W
0F24:  SUBWF  5F,W
0F25:  BTFSC  03.0
0F26:  GOTO   742
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0F27:  MOVF   5B,W
0F28:  ADDWF  5F,W
0F29:  MOVWF  04
0F2A:  MOVF   5C,W
0F2B:  ADDWFC 60,W
0F2C:  MOVWF  05
0F2D:  MOVF   00,W
0F2E:  MOVWF  63
0F2F:  MOVLB  04
0F30:  BCF    15.5
0F31:  MOVLW  40
0F32:  MOVWF  14
0F33:  MOVLW  09
0F34:  MOVWF  12
0F35:  MOVLW  2A
0F36:  MOVWF  15
0F37:  MOVLB  0F
0F38:  MOVF   63,W
0F39:  MOVLB  10
0F3A:  MOVWF  2C
0F3B:  MOVLB  00
0F3C:  CALL   22E
0F3D:  MOVLB  0F
0F3E:  INCF   5F,F
0F3F:  BTFSC  03.2
0F40:  INCF   60,F
0F41:  GOTO   71D
....................          break;
0F42:  GOTO   76E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0F43:  MOVLB  0F
0F44:  CLRF   62
0F45:  CLRF   61
0F46:  MOVF   62,W
0F47:  SUBWF  5E,W
0F48:  BTFSS  03.0
0F49:  GOTO   76B
0F4A:  BTFSS  03.2
0F4B:  GOTO   750
0F4C:  MOVF   5D,W
0F4D:  SUBWF  61,W
0F4E:  BTFSC  03.0
0F4F:  GOTO   76B
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0F50:  MOVF   5B,W
0F51:  ADDWF  61,W
0F52:  MOVWF  04
0F53:  MOVF   5C,W
0F54:  ADDWFC 62,W
0F55:  MOVWF  05
0F56:  MOVF   00,W
0F57:  MOVWF  63
0F58:  MOVLB  04
0F59:  BCF    15.5
0F5A:  MOVLW  40
0F5B:  MOVWF  14
0F5C:  MOVLW  09
0F5D:  MOVWF  12
0F5E:  MOVLW  2A
0F5F:  MOVWF  15
0F60:  MOVLB  0F
0F61:  MOVF   63,W
0F62:  MOVLB  10
0F63:  MOVWF  2C
0F64:  MOVLB  00
0F65:  CALL   23B
0F66:  MOVLB  0F
0F67:  INCF   61,F
0F68:  BTFSC  03.2
0F69:  INCF   62,F
0F6A:  GOTO   746
....................          break;
0F6B:  GOTO   76E
0F6C:  MOVLB  00
....................          
....................       default:
....................          break;
0F6D:  MOVLB  0F
....................    }
....................    return;
0F6E:  MOVLB  00
0F6F:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0A48:  MOVLB  0F
0A49:  MOVF   5D,W
0A4A:  XORLW  00
0A4B:  MOVLB  00
0A4C:  BTFSC  03.2
0A4D:  GOTO   252
0A4E:  XORLW  01
0A4F:  BTFSC  03.2
0A50:  GOTO   2C2
0A51:  GOTO   333
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0A52:  MOVLB  0F
0A53:  CLRF   6C
0A54:  CLRF   6B
0A55:  MOVF   6C,W
0A56:  SUBWF  64,W
0A57:  BTFSS  03.0
0A58:  GOTO   27A
0A59:  BTFSS  03.2
0A5A:  GOTO   25F
0A5B:  MOVF   63,W
0A5C:  SUBWF  6B,W
0A5D:  BTFSC  03.0
0A5E:  GOTO   27A
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0A5F:  MOVF   61,W
0A60:  ADDWF  6B,W
0A61:  MOVWF  04
0A62:  MOVF   62,W
0A63:  ADDWFC 6C,W
0A64:  MOVWF  05
0A65:  MOVF   00,W
0A66:  MOVLB  10
0A67:  MOVWF  28
0A68:  MOVLB  04
0A69:  BCF    15.5
0A6A:  MOVLW  40
0A6B:  MOVWF  14
0A6C:  MOVLW  09
0A6D:  MOVWF  12
0A6E:  MOVLW  2A
0A6F:  MOVWF  15
0A70:  MOVLB  10
0A71:  MOVF   28,W
0A72:  MOVWF  2C
0A73:  MOVLB  00
0A74:  CALL   22E
0A75:  MOVLB  0F
0A76:  INCF   6B,F
0A77:  BTFSC  03.2
0A78:  INCF   6C,F
0A79:  GOTO   255
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0A7A:  MOVLB  10
0A7B:  CLRF   23
0A7C:  CLRF   22
0A7D:  CLRF   21
0A7E:  CLRF   20
0A7F:  MOVF   23,W
0A80:  MOVLB  0F
0A81:  SUBWF  6A,W
0A82:  BTFSS  03.0
0A83:  GOTO   2C1
0A84:  BTFSS  03.2
0A85:  GOTO   29E
0A86:  MOVLB  10
0A87:  MOVF   22,W
0A88:  MOVLB  0F
0A89:  SUBWF  69,W
0A8A:  BTFSS  03.0
0A8B:  GOTO   2C1
0A8C:  BTFSS  03.2
0A8D:  GOTO   29E
0A8E:  MOVLB  10
0A8F:  MOVF   21,W
0A90:  MOVLB  0F
0A91:  SUBWF  68,W
0A92:  BTFSS  03.0
0A93:  GOTO   2C1
0A94:  BTFSS  03.2
0A95:  GOTO   29E
0A96:  MOVF   67,W
0A97:  MOVLB  10
0A98:  SUBWF  20,W
0A99:  BTFSS  03.0
0A9A:  GOTO   29D
0A9B:  MOVLB  0F
0A9C:  GOTO   2C1
0A9D:  MOVLB  0F
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0A9E:  MOVF   65,W
0A9F:  MOVLB  10
0AA0:  ADDWF  20,W
0AA1:  MOVWF  04
0AA2:  MOVLB  0F
0AA3:  MOVF   66,W
0AA4:  MOVLB  10
0AA5:  ADDWFC 21,W
0AA6:  MOVWF  05
0AA7:  MOVLB  04
0AA8:  BCF    15.5
0AA9:  MOVLW  40
0AAA:  MOVWF  14
0AAB:  MOVLW  09
0AAC:  MOVWF  12
0AAD:  MOVLW  2A
0AAE:  MOVWF  15
0AAF:  MOVLW  01
0AB0:  MOVLB  10
0AB1:  MOVWF  2C
0AB2:  MOVLB  00
0AB3:  CALL   22E
0AB4:  MOVF   77,W
0AB5:  MOVWF  00
0AB6:  MOVLW  01
0AB7:  MOVLB  10
0AB8:  ADDWF  20,F
0AB9:  BTFSC  03.0
0ABA:  INCF   21,F
0ABB:  BTFSC  03.2
0ABC:  INCF   22,F
0ABD:  BTFSC  03.2
0ABE:  INCF   23,F
0ABF:  GOTO   27F
0AC0:  MOVLB  0F
....................          break;
0AC1:  GOTO   334
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0AC2:  MOVLB  0F
0AC3:  CLRF   6E
0AC4:  CLRF   6D
0AC5:  MOVF   6E,W
0AC6:  SUBWF  64,W
0AC7:  BTFSS  03.0
0AC8:  GOTO   2EA
0AC9:  BTFSS  03.2
0ACA:  GOTO   2CF
0ACB:  MOVF   63,W
0ACC:  SUBWF  6D,W
0ACD:  BTFSC  03.0
0ACE:  GOTO   2EA
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0ACF:  MOVF   61,W
0AD0:  ADDWF  6D,W
0AD1:  MOVWF  04
0AD2:  MOVF   62,W
0AD3:  ADDWFC 6E,W
0AD4:  MOVWF  05
0AD5:  MOVF   00,W
0AD6:  MOVLB  10
0AD7:  MOVWF  28
0AD8:  MOVLB  04
0AD9:  BCF    15.5
0ADA:  MOVLW  40
0ADB:  MOVWF  14
0ADC:  MOVLW  09
0ADD:  MOVWF  12
0ADE:  MOVLW  2A
0ADF:  MOVWF  15
0AE0:  MOVLB  10
0AE1:  MOVF   28,W
0AE2:  MOVWF  2C
0AE3:  MOVLB  00
0AE4:  CALL   23B
0AE5:  MOVLB  0F
0AE6:  INCF   6D,F
0AE7:  BTFSC  03.2
0AE8:  INCF   6E,F
0AE9:  GOTO   2C5
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0AEA:  MOVLB  10
0AEB:  CLRF   27
0AEC:  CLRF   26
0AED:  CLRF   25
0AEE:  CLRF   24
0AEF:  MOVF   27,W
0AF0:  MOVLB  0F
0AF1:  SUBWF  6A,W
0AF2:  BTFSS  03.0
0AF3:  GOTO   331
0AF4:  BTFSS  03.2
0AF5:  GOTO   30E
0AF6:  MOVLB  10
0AF7:  MOVF   26,W
0AF8:  MOVLB  0F
0AF9:  SUBWF  69,W
0AFA:  BTFSS  03.0
0AFB:  GOTO   331
0AFC:  BTFSS  03.2
0AFD:  GOTO   30E
0AFE:  MOVLB  10
0AFF:  MOVF   25,W
0B00:  MOVLB  0F
0B01:  SUBWF  68,W
0B02:  BTFSS  03.0
0B03:  GOTO   331
0B04:  BTFSS  03.2
0B05:  GOTO   30E
0B06:  MOVF   67,W
0B07:  MOVLB  10
0B08:  SUBWF  24,W
0B09:  BTFSS  03.0
0B0A:  GOTO   30D
0B0B:  MOVLB  0F
0B0C:  GOTO   331
0B0D:  MOVLB  0F
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0B0E:  MOVF   65,W
0B0F:  MOVLB  10
0B10:  ADDWF  24,W
0B11:  MOVWF  04
0B12:  MOVLB  0F
0B13:  MOVF   66,W
0B14:  MOVLB  10
0B15:  ADDWFC 25,W
0B16:  MOVWF  05
0B17:  MOVLB  04
0B18:  BCF    15.5
0B19:  MOVLW  40
0B1A:  MOVWF  14
0B1B:  MOVLW  09
0B1C:  MOVWF  12
0B1D:  MOVLW  2A
0B1E:  MOVWF  15
0B1F:  MOVLW  02
0B20:  MOVLB  10
0B21:  MOVWF  2C
0B22:  MOVLB  00
0B23:  CALL   23B
0B24:  MOVF   77,W
0B25:  MOVWF  00
0B26:  MOVLW  01
0B27:  MOVLB  10
0B28:  ADDWF  24,F
0B29:  BTFSC  03.0
0B2A:  INCF   25,F
0B2B:  BTFSC  03.2
0B2C:  INCF   26,F
0B2D:  BTFSC  03.2
0B2E:  INCF   27,F
0B2F:  GOTO   2EF
0B30:  MOVLB  0F
....................          break;
0B31:  GOTO   334
0B32:  MOVLB  00
....................    
....................          
....................       default:
....................          break;
0B33:  MOVLB  0F
....................    }
....................    return;
0B34:  MOVLB  00
0B35:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
1000:  MOVLB  0F
1001:  MOVF   57,W
1002:  XORLW  00
1003:  MOVLB  00
1004:  BTFSC  03.2
1005:  GOTO   00A
1006:  XORLW  01
1007:  BTFSC  03.2
1008:  GOTO   055
1009:  GOTO   0A1
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
100A:  MOVLB  0F
100B:  CLRF   62
100C:  MOVF   5D,W
100D:  SUBWF  62,W
100E:  BTFSC  03.0
100F:  GOTO   02B
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
1010:  MOVF   62,W
1011:  ADDWF  5B,W
1012:  MOVWF  04
1013:  MOVLW  00
1014:  ADDWFC 5C,W
1015:  MOVWF  05
1016:  MOVF   00,W
1017:  MOVWF  68
1018:  MOVLB  04
1019:  BCF    15.5
101A:  MOVLW  40
101B:  MOVWF  14
101C:  MOVLW  09
101D:  MOVWF  12
101E:  MOVLW  2A
101F:  MOVWF  15
1020:  MOVLB  0F
1021:  MOVF   68,W
1022:  MOVLB  10
1023:  MOVWF  2C
1024:  MOVLP  08
1025:  MOVLB  00
1026:  CALL   22E
1027:  MOVLP  10
1028:  MOVLB  0F
1029:  INCF   62,F
102A:  GOTO   00C
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
102B:  CLRF   64
102C:  CLRF   63
102D:  MOVF   64,W
102E:  SUBWF  61,W
102F:  BTFSS  03.0
1030:  GOTO   054
1031:  BTFSS  03.2
1032:  GOTO   037
1033:  MOVF   60,W
1034:  SUBWF  63,W
1035:  BTFSC  03.0
1036:  GOTO   054
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
1037:  MOVF   5E,W
1038:  ADDWF  63,W
1039:  MOVWF  04
103A:  MOVF   5F,W
103B:  ADDWFC 64,W
103C:  MOVWF  05
103D:  MOVF   00,W
103E:  MOVWF  68
103F:  MOVLB  04
1040:  BCF    15.5
1041:  MOVLW  40
1042:  MOVWF  14
1043:  MOVLW  09
1044:  MOVWF  12
1045:  MOVLW  2A
1046:  MOVWF  15
1047:  MOVLB  0F
1048:  MOVF   68,W
1049:  MOVLB  10
104A:  MOVWF  2C
104B:  MOVLP  08
104C:  MOVLB  00
104D:  CALL   22E
104E:  MOVLP  10
104F:  MOVLB  0F
1050:  INCF   63,F
1051:  BTFSC  03.2
1052:  INCF   64,F
1053:  GOTO   02D
....................          break;
1054:  GOTO   0A3
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
1055:  MOVLB  0F
1056:  CLRF   65
1057:  MOVF   5D,W
1058:  SUBWF  65,W
1059:  BTFSC  03.0
105A:  GOTO   076
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
105B:  MOVF   65,W
105C:  ADDWF  5B,W
105D:  MOVWF  04
105E:  MOVLW  00
105F:  ADDWFC 5C,W
1060:  MOVWF  05
1061:  MOVF   00,W
1062:  MOVWF  68
1063:  MOVLB  04
1064:  BCF    15.5
1065:  MOVLW  40
1066:  MOVWF  14
1067:  MOVLW  09
1068:  MOVWF  12
1069:  MOVLW  2A
106A:  MOVWF  15
106B:  MOVLB  0F
106C:  MOVF   68,W
106D:  MOVLB  10
106E:  MOVWF  2C
106F:  MOVLP  08
1070:  MOVLB  00
1071:  CALL   23B
1072:  MOVLP  10
1073:  MOVLB  0F
1074:  INCF   65,F
1075:  GOTO   057
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
1076:  CLRF   67
1077:  CLRF   66
1078:  MOVF   67,W
1079:  SUBWF  61,W
107A:  BTFSS  03.0
107B:  GOTO   09F
107C:  BTFSS  03.2
107D:  GOTO   082
107E:  MOVF   60,W
107F:  SUBWF  66,W
1080:  BTFSC  03.0
1081:  GOTO   09F
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
1082:  MOVF   5E,W
1083:  ADDWF  66,W
1084:  MOVWF  04
1085:  MOVF   5F,W
1086:  ADDWFC 67,W
1087:  MOVWF  05
1088:  MOVF   00,W
1089:  MOVWF  68
108A:  MOVLB  04
108B:  BCF    15.5
108C:  MOVLW  40
108D:  MOVWF  14
108E:  MOVLW  09
108F:  MOVWF  12
1090:  MOVLW  2A
1091:  MOVWF  15
1092:  MOVLB  0F
1093:  MOVF   68,W
1094:  MOVLB  10
1095:  MOVWF  2C
1096:  MOVLP  08
1097:  MOVLB  00
1098:  CALL   23B
1099:  MOVLP  10
109A:  MOVLB  0F
109B:  INCF   66,F
109C:  BTFSC  03.2
109D:  INCF   67,F
109E:  GOTO   078
....................          break;
109F:  GOTO   0A3
10A0:  MOVLB  00
....................          
....................       default:
....................          break;
10A1:  MOVLB  0F
10A2:  GOTO   0A3
....................    }
....................    return;
10A3:  MOVLB  00
10A4:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
17B0:  MOVLB  0E
17B1:  MOVF   41,W
17B2:  MOVLB  0F
17B3:  MOVWF  5D
17B4:  MOVLW  01
17B5:  MOVWF  5E
17B6:  MOVWF  60
17B7:  CLRF   5F
17B8:  MOVLP  08
17B9:  MOVLB  00
17BA:  CALL   20C
17BB:  MOVLP  10
17BC:  MOVLB  0E
17BD:  MOVF   41,W
17BE:  MOVLB  0F
17BF:  MOVWF  5D
17C0:  CLRF   5E
17C1:  CLRF   60
17C2:  MOVLW  80
17C3:  MOVWF  5F
17C4:  MOVLP  08
17C5:  MOVLB  00
17C6:  CALL   20C
17C7:  MOVLP  10
17C8:  RETURN
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
0F70:  MOVLW  05
0F71:  MOVLB  0F
0F72:  MOVWF  5B
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0F73:  MOVF   59,W
0F74:  MOVWF  5D
0F75:  CLRF   5E
0F76:  MOVLW  01
0F77:  MOVWF  60
0F78:  CLRF   5F
0F79:  MOVLB  00
0F7A:  CALL   20C
0F7B:  MOVLB  0F
0F7C:  MOVF   59,W
0F7D:  MOVWF  5D
0F7E:  CLRF   5E
0F7F:  CLRF   60
0F80:  MOVLW  80
0F81:  MOVWF  5F
0F82:  MOVLB  00
0F83:  CALL   20C
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0F84:  MOVLB  0F
0F85:  MOVF   5A,W
0F86:  MOVWF  60
0F87:  MOVF   59,W
0F88:  MOVWF  5F
0F89:  MOVF   58,W
0F8A:  MOVWF  5E
0F8B:  MOVF   57,W
0F8C:  MOVWF  5D
0F8D:  MOVLW  24
0F8E:  MOVWF  62
0F8F:  MOVLW  EB
0F90:  MOVWF  61
0F91:  CLRF   64
0F92:  MOVLW  01
0F93:  MOVWF  63
0F94:  MOVLW  24
0F95:  MOVWF  66
0F96:  MOVLW  EC
0F97:  MOVWF  65
0F98:  CLRF   6A
0F99:  CLRF   69
0F9A:  CLRF   68
0F9B:  MOVLW  01
0F9C:  MOVWF  67
0F9D:  MOVLB  00
0F9E:  CALL   248
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
0F9F:  MOVLB  0F
0FA0:  MOVF   59,W
0FA1:  MOVWF  5D
0FA2:  MOVLW  01
0FA3:  MOVWF  5E
0FA4:  MOVWF  60
0FA5:  CLRF   5F
0FA6:  MOVLB  00
0FA7:  CALL   20C
0FA8:  MOVLB  0F
0FA9:  MOVF   59,W
0FAA:  MOVWF  5D
0FAB:  CLRF   5E
0FAC:  CLRF   60
0FAD:  MOVLW  80
0FAE:  MOVWF  5F
0FAF:  MOVLB  00
0FB0:  CALL   20C
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
0FB1:  MOVLB  0F
0FB2:  MOVF   5C,W
0FB3:  MOVWF  78
0FB4:  MOVLB  00
0FB5:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1C12:  MOVLB  0B
1C13:  MOVF   2F,F
1C14:  BTFSS  03.2
1C15:  GOTO   4C3
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1C16:  MOVLW  06
1C17:  MOVWF  36
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
1C18:  MOVLW  D8
1C19:  MOVWF  37
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1C1A:  CLRF   46
1C1B:  CLRF   47
1C1C:  CLRF   78
1C1D:  CLRF   79
1C1E:  CLRF   7A
1C1F:  MOVF   34,W
1C20:  MOVWF  38
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1C21:  CLRF   47
1C22:  CLRF   78
1C23:  CLRF   79
1C24:  CLRF   7A
1C25:  MOVF   33,W
1C26:  MOVWF  39
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1C27:  CLRF   78
1C28:  CLRF   79
1C29:  CLRF   7A
1C2A:  MOVF   32,W
1C2B:  MOVWF  3A
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1C2C:  MOVF   30,W
1C2D:  MOVLB  0F
1C2E:  MOVWF  5D
1C2F:  CLRF   5E
1C30:  MOVLW  01
1C31:  MOVWF  60
1C32:  CLRF   5F
1C33:  MOVLP  08
1C34:  MOVLB  00
1C35:  CALL   20C
1C36:  MOVLP  18
1C37:  MOVLB  0B
1C38:  MOVF   30,W
1C39:  MOVLB  0F
1C3A:  MOVWF  5D
1C3B:  CLRF   5E
1C3C:  CLRF   60
1C3D:  MOVLW  80
1C3E:  MOVWF  5F
1C3F:  MOVLP  08
1C40:  MOVLB  00
1C41:  CALL   20C
1C42:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1C43:  MOVLB  0B
1C44:  MOVF   31,W
1C45:  MOVLB  0F
1C46:  MOVWF  5A
1C47:  MOVLB  0B
1C48:  MOVF   30,W
1C49:  MOVLB  0F
1C4A:  MOVWF  59
1C4B:  MOVLB  0B
1C4C:  MOVF   2F,W
1C4D:  MOVLB  0F
1C4E:  MOVWF  58
1C4F:  MOVLB  0B
1C50:  MOVF   2E,W
1C51:  MOVLB  0F
1C52:  MOVWF  57
1C53:  MOVLW  23
1C54:  MOVWF  5C
1C55:  MOVLW  86
1C56:  MOVWF  5B
1C57:  CLRF   5E
1C58:  MOVLW  01
1C59:  MOVWF  5D
1C5A:  MOVLP  08
1C5B:  MOVLB  00
1C5C:  CALL   710
1C5D:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1C5E:  MOVLB  0B
1C5F:  MOVF   30,W
1C60:  MOVLB  0F
1C61:  MOVWF  5D
1C62:  MOVLW  01
1C63:  MOVWF  5E
1C64:  MOVWF  60
1C65:  CLRF   5F
1C66:  MOVLP  08
1C67:  MOVLB  00
1C68:  CALL   20C
1C69:  MOVLP  18
1C6A:  MOVLB  0B
1C6B:  MOVF   30,W
1C6C:  MOVLB  0F
1C6D:  MOVWF  5D
1C6E:  CLRF   5E
1C6F:  CLRF   60
1C70:  MOVLW  80
1C71:  MOVWF  5F
1C72:  MOVLP  08
1C73:  MOVLB  00
1C74:  CALL   20C
1C75:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1C76:  MOVLB  0B
1C77:  MOVF   30,W
1C78:  MOVLB  0F
1C79:  MOVWF  5D
1C7A:  CLRF   5E
1C7B:  MOVLW  01
1C7C:  MOVWF  60
1C7D:  CLRF   5F
1C7E:  MOVLP  08
1C7F:  MOVLB  00
1C80:  CALL   20C
1C81:  MOVLP  18
1C82:  MOVLB  0B
1C83:  MOVF   30,W
1C84:  MOVLB  0F
1C85:  MOVWF  5D
1C86:  CLRF   5E
1C87:  CLRF   60
1C88:  MOVLW  80
1C89:  MOVWF  5F
1C8A:  MOVLP  08
1C8B:  MOVLB  00
1C8C:  CALL   20C
1C8D:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1C8E:  MOVLB  0B
1C8F:  MOVF   31,W
1C90:  MOVLB  0F
1C91:  MOVWF  5A
1C92:  MOVLB  0B
1C93:  MOVF   30,W
1C94:  MOVLB  0F
1C95:  MOVWF  59
1C96:  MOVLB  0B
1C97:  MOVF   2F,W
1C98:  MOVLB  0F
1C99:  MOVWF  58
1C9A:  MOVLB  0B
1C9B:  MOVF   2E,W
1C9C:  MOVLB  0F
1C9D:  MOVWF  57
1C9E:  MOVLW  23
1C9F:  MOVWF  5C
1CA0:  MOVLW  87
1CA1:  MOVWF  5B
1CA2:  CLRF   5E
1CA3:  MOVLW  04
1CA4:  MOVWF  5D
1CA5:  MOVLP  08
1CA6:  MOVLB  00
1CA7:  CALL   710
1CA8:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1CA9:  MOVLB  0B
1CAA:  MOVF   30,W
1CAB:  MOVLB  0F
1CAC:  MOVWF  5D
1CAD:  MOVLW  01
1CAE:  MOVWF  5E
1CAF:  MOVWF  60
1CB0:  CLRF   5F
1CB1:  MOVLP  08
1CB2:  MOVLB  00
1CB3:  CALL   20C
1CB4:  MOVLP  18
1CB5:  MOVLB  0B
1CB6:  MOVF   30,W
1CB7:  MOVLB  0F
1CB8:  MOVWF  5D
1CB9:  CLRF   5E
1CBA:  CLRF   60
1CBB:  MOVLW  80
1CBC:  MOVWF  5F
1CBD:  MOVLP  08
1CBE:  MOVLB  00
1CBF:  CALL   20C
1CC0:  MOVLP  18
....................    }
1CC1:  GOTO   578
1CC2:  MOVLB  0B
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1CC3:  DECFSZ 2F,W
1CC4:  GOTO   579
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1CC5:  MOVLW  06
1CC6:  MOVWF  3B
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
1CC7:  MOVLW  DC
1CC8:  MOVWF  3C
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1CC9:  CLRF   45
1CCA:  CLRF   46
1CCB:  CLRF   47
1CCC:  CLRF   78
1CCD:  CLRF   79
1CCE:  CLRF   7A
1CCF:  MOVF   35,W
1CD0:  MOVWF  3D
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1CD1:  CLRF   46
1CD2:  CLRF   47
1CD3:  CLRF   78
1CD4:  CLRF   79
1CD5:  CLRF   7A
1CD6:  MOVF   34,W
1CD7:  MOVWF  3E
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1CD8:  CLRF   47
1CD9:  CLRF   78
1CDA:  CLRF   79
1CDB:  CLRF   7A
1CDC:  MOVF   33,W
1CDD:  MOVWF  3F
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1CDE:  CLRF   78
1CDF:  CLRF   79
1CE0:  CLRF   7A
1CE1:  MOVF   32,W
1CE2:  MOVWF  40
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1CE3:  MOVF   30,W
1CE4:  MOVLB  0F
1CE5:  MOVWF  5D
1CE6:  CLRF   5E
1CE7:  MOVLW  01
1CE8:  MOVWF  60
1CE9:  CLRF   5F
1CEA:  MOVLP  08
1CEB:  MOVLB  00
1CEC:  CALL   20C
1CED:  MOVLP  18
1CEE:  MOVLB  0B
1CEF:  MOVF   30,W
1CF0:  MOVLB  0F
1CF1:  MOVWF  5D
1CF2:  CLRF   5E
1CF3:  CLRF   60
1CF4:  MOVLW  80
1CF5:  MOVWF  5F
1CF6:  MOVLP  08
1CF7:  MOVLB  00
1CF8:  CALL   20C
1CF9:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1CFA:  MOVLB  0B
1CFB:  MOVF   31,W
1CFC:  MOVLB  0F
1CFD:  MOVWF  5A
1CFE:  MOVLB  0B
1CFF:  MOVF   30,W
1D00:  MOVLB  0F
1D01:  MOVWF  59
1D02:  MOVLB  0B
1D03:  MOVF   2F,W
1D04:  MOVLB  0F
1D05:  MOVWF  58
1D06:  MOVLB  0B
1D07:  MOVF   2E,W
1D08:  MOVLB  0F
1D09:  MOVWF  57
1D0A:  MOVLW  23
1D0B:  MOVWF  5C
1D0C:  MOVLW  8B
1D0D:  MOVWF  5B
1D0E:  CLRF   5E
1D0F:  MOVLW  01
1D10:  MOVWF  5D
1D11:  MOVLP  08
1D12:  MOVLB  00
1D13:  CALL   710
1D14:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1D15:  MOVLB  0B
1D16:  MOVF   30,W
1D17:  MOVLB  0F
1D18:  MOVWF  5D
1D19:  MOVLW  01
1D1A:  MOVWF  5E
1D1B:  MOVWF  60
1D1C:  CLRF   5F
1D1D:  MOVLP  08
1D1E:  MOVLB  00
1D1F:  CALL   20C
1D20:  MOVLP  18
1D21:  MOVLB  0B
1D22:  MOVF   30,W
1D23:  MOVLB  0F
1D24:  MOVWF  5D
1D25:  CLRF   5E
1D26:  CLRF   60
1D27:  MOVLW  80
1D28:  MOVWF  5F
1D29:  MOVLP  08
1D2A:  MOVLB  00
1D2B:  CALL   20C
1D2C:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1D2D:  MOVLB  0B
1D2E:  MOVF   30,W
1D2F:  MOVLB  0F
1D30:  MOVWF  5D
1D31:  CLRF   5E
1D32:  MOVLW  01
1D33:  MOVWF  60
1D34:  CLRF   5F
1D35:  MOVLP  08
1D36:  MOVLB  00
1D37:  CALL   20C
1D38:  MOVLP  18
1D39:  MOVLB  0B
1D3A:  MOVF   30,W
1D3B:  MOVLB  0F
1D3C:  MOVWF  5D
1D3D:  CLRF   5E
1D3E:  CLRF   60
1D3F:  MOVLW  80
1D40:  MOVWF  5F
1D41:  MOVLP  08
1D42:  MOVLB  00
1D43:  CALL   20C
1D44:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1D45:  MOVLB  0B
1D46:  MOVF   31,W
1D47:  MOVLB  0F
1D48:  MOVWF  5A
1D49:  MOVLB  0B
1D4A:  MOVF   30,W
1D4B:  MOVLB  0F
1D4C:  MOVWF  59
1D4D:  MOVLB  0B
1D4E:  MOVF   2F,W
1D4F:  MOVLB  0F
1D50:  MOVWF  58
1D51:  MOVLB  0B
1D52:  MOVF   2E,W
1D53:  MOVLB  0F
1D54:  MOVWF  57
1D55:  MOVLW  23
1D56:  MOVWF  5C
1D57:  MOVLW  8C
1D58:  MOVWF  5B
1D59:  CLRF   5E
1D5A:  MOVLW  05
1D5B:  MOVWF  5D
1D5C:  MOVLP  08
1D5D:  MOVLB  00
1D5E:  CALL   710
1D5F:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1D60:  MOVLB  0B
1D61:  MOVF   30,W
1D62:  MOVLB  0F
1D63:  MOVWF  5D
1D64:  MOVLW  01
1D65:  MOVWF  5E
1D66:  MOVWF  60
1D67:  CLRF   5F
1D68:  MOVLP  08
1D69:  MOVLB  00
1D6A:  CALL   20C
1D6B:  MOVLP  18
1D6C:  MOVLB  0B
1D6D:  MOVF   30,W
1D6E:  MOVLB  0F
1D6F:  MOVWF  5D
1D70:  CLRF   5E
1D71:  CLRF   60
1D72:  MOVLW  80
1D73:  MOVWF  5F
1D74:  MOVLP  08
1D75:  MOVLB  00
1D76:  CALL   20C
1D77:  MOVLP  18
....................    }
1D78:  MOVLB  0B
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1D79:  CLRF   41
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
1D7A:  MOVF   31,W
1D7B:  MOVLB  0F
1D7C:  MOVWF  5A
1D7D:  MOVLB  0B
1D7E:  MOVF   30,W
1D7F:  MOVLB  0F
1D80:  MOVWF  59
1D81:  MOVLB  0B
1D82:  MOVF   2F,W
1D83:  MOVLB  0F
1D84:  MOVWF  58
1D85:  MOVLB  0B
1D86:  MOVF   2E,W
1D87:  MOVLB  0F
1D88:  MOVWF  57
1D89:  MOVLP  08
1D8A:  MOVLB  00
1D8B:  CALL   770
1D8C:  MOVLP  18
1D8D:  MOVF   78,W
1D8E:  ANDLW  01
1D8F:  SUBLW  01
1D90:  BTFSS  03.2
1D91:  GOTO   5B1
....................       if(timeout_counter > 10)
1D92:  MOVLB  0B
1D93:  MOVF   41,W
1D94:  SUBLW  0A
1D95:  BTFSC  03.0
1D96:  GOTO   5A0
....................          delay_ms(200);
1D97:  MOVLW  C8
1D98:  MOVLB  0F
1D99:  MOVWF  57
1D9A:  MOVLP  08
1D9B:  MOVLB  00
1D9C:  CALL   7B6
1D9D:  MOVLP  18
1D9E:  GOTO   5A7
1D9F:  MOVLB  0B
....................       else
....................          delay_ms(10);   
1DA0:  MOVLW  0A
1DA1:  MOVLB  0F
1DA2:  MOVWF  57
1DA3:  MOVLP  08
1DA4:  MOVLB  00
1DA5:  CALL   7B6
1DA6:  MOVLP  18
....................       
....................       if(timeout_counter > 100){
1DA7:  MOVLB  0B
1DA8:  MOVF   41,W
1DA9:  SUBLW  64
1DAA:  BTFSC  03.0
1DAB:  GOTO   5AF
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1DAC:  MOVLB  00
1DAD:  GOTO   5B1
1DAE:  MOVLB  0B
....................       }  
....................       timeout_counter++;
1DAF:  INCF   41,F
1DB0:  GOTO   57A
1DB1:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
1DB2:  RETURN
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
123B:  MOVLB  0F
123C:  MOVF   3F,F
123D:  BTFSS  03.2
123E:  GOTO   2D6
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
123F:  MOVLW  06
1240:  MOVWF  46
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
1241:  MOVLW  20
1242:  MOVWF  47
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1243:  CLRF   55
1244:  CLRF   56
1245:  CLRF   78
1246:  CLRF   79
1247:  CLRF   7A
1248:  MOVF   44,W
1249:  MOVWF  48
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
124A:  CLRF   56
124B:  CLRF   78
124C:  CLRF   79
124D:  CLRF   7A
124E:  MOVF   43,W
124F:  MOVWF  49
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
1250:  CLRF   78
1251:  CLRF   79
1252:  CLRF   7A
1253:  MOVF   42,W
1254:  MOVWF  4A
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1255:  MOVF   40,W
1256:  MOVWF  5D
1257:  CLRF   5E
1258:  MOVLW  01
1259:  MOVWF  60
125A:  CLRF   5F
125B:  MOVLP  08
125C:  MOVLB  00
125D:  CALL   20C
125E:  MOVLP  10
125F:  MOVLB  0F
1260:  MOVF   40,W
1261:  MOVWF  5D
1262:  CLRF   5E
1263:  CLRF   60
1264:  MOVLW  80
1265:  MOVWF  5F
1266:  MOVLP  08
1267:  MOVLB  00
1268:  CALL   20C
1269:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
126A:  MOVLB  0F
126B:  MOVF   41,W
126C:  MOVWF  5A
126D:  MOVF   40,W
126E:  MOVWF  59
126F:  MOVF   3F,W
1270:  MOVWF  58
1271:  MOVF   3E,W
1272:  MOVWF  57
1273:  MOVLW  24
1274:  MOVWF  5C
1275:  MOVLW  D6
1276:  MOVWF  5B
1277:  CLRF   5E
1278:  MOVLW  01
1279:  MOVWF  5D
127A:  MOVLP  08
127B:  MOVLB  00
127C:  CALL   710
127D:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
127E:  MOVLB  0F
127F:  MOVF   40,W
1280:  MOVWF  5D
1281:  MOVLW  01
1282:  MOVWF  5E
1283:  MOVWF  60
1284:  CLRF   5F
1285:  MOVLP  08
1286:  MOVLB  00
1287:  CALL   20C
1288:  MOVLP  10
1289:  MOVLB  0F
128A:  MOVF   40,W
128B:  MOVWF  5D
128C:  CLRF   5E
128D:  CLRF   60
128E:  MOVLW  80
128F:  MOVWF  5F
1290:  MOVLP  08
1291:  MOVLB  00
1292:  CALL   20C
1293:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1294:  MOVLB  0F
1295:  MOVF   40,W
1296:  MOVWF  5D
1297:  CLRF   5E
1298:  MOVLW  01
1299:  MOVWF  60
129A:  CLRF   5F
129B:  MOVLP  08
129C:  MOVLB  00
129D:  CALL   20C
129E:  MOVLP  10
129F:  MOVLB  0F
12A0:  MOVF   40,W
12A1:  MOVWF  5D
12A2:  CLRF   5E
12A3:  CLRF   60
12A4:  MOVLW  80
12A5:  MOVWF  5F
12A6:  MOVLP  08
12A7:  MOVLB  00
12A8:  CALL   20C
12A9:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
12AA:  MOVLB  0F
12AB:  MOVF   41,W
12AC:  MOVWF  5A
12AD:  MOVF   40,W
12AE:  MOVWF  59
12AF:  MOVF   3F,W
12B0:  MOVWF  58
12B1:  MOVF   3E,W
12B2:  MOVWF  57
12B3:  MOVLW  24
12B4:  MOVWF  5C
12B5:  MOVLW  D7
12B6:  MOVWF  5B
12B7:  CLRF   5E
12B8:  MOVLW  04
12B9:  MOVWF  5D
12BA:  MOVLP  08
12BB:  MOVLB  00
12BC:  CALL   710
12BD:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
12BE:  MOVLB  0F
12BF:  MOVF   40,W
12C0:  MOVWF  5D
12C1:  MOVLW  01
12C2:  MOVWF  5E
12C3:  MOVWF  60
12C4:  CLRF   5F
12C5:  MOVLP  08
12C6:  MOVLB  00
12C7:  CALL   20C
12C8:  MOVLP  10
12C9:  MOVLB  0F
12CA:  MOVF   40,W
12CB:  MOVWF  5D
12CC:  CLRF   5E
12CD:  CLRF   60
12CE:  MOVLW  80
12CF:  MOVWF  5F
12D0:  MOVLP  08
12D1:  MOVLB  00
12D2:  CALL   20C
12D3:  MOVLP  10
....................    }
12D4:  GOTO   375
12D5:  MOVLB  0F
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
12D6:  DECFSZ 3F,W
12D7:  GOTO   376
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
12D8:  MOVLW  06
12D9:  MOVWF  4B
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
12DA:  MOVLW  21
12DB:  MOVWF  4C
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
12DC:  CLRF   54
12DD:  CLRF   55
12DE:  CLRF   56
12DF:  CLRF   78
12E0:  CLRF   79
12E1:  CLRF   7A
12E2:  MOVF   45,W
12E3:  MOVWF  4D
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
12E4:  CLRF   55
12E5:  CLRF   56
12E6:  CLRF   78
12E7:  CLRF   79
12E8:  CLRF   7A
12E9:  MOVF   44,W
12EA:  MOVWF  4E
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
12EB:  CLRF   56
12EC:  CLRF   78
12ED:  CLRF   79
12EE:  CLRF   7A
12EF:  MOVF   43,W
12F0:  MOVWF  4F
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
12F1:  CLRF   78
12F2:  CLRF   79
12F3:  CLRF   7A
12F4:  MOVF   42,W
12F5:  MOVWF  50
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
12F6:  MOVF   40,W
12F7:  MOVWF  5D
12F8:  CLRF   5E
12F9:  MOVLW  01
12FA:  MOVWF  60
12FB:  CLRF   5F
12FC:  MOVLP  08
12FD:  MOVLB  00
12FE:  CALL   20C
12FF:  MOVLP  10
1300:  MOVLB  0F
1301:  MOVF   40,W
1302:  MOVWF  5D
1303:  CLRF   5E
1304:  CLRF   60
1305:  MOVLW  80
1306:  MOVWF  5F
1307:  MOVLP  08
1308:  MOVLB  00
1309:  CALL   20C
130A:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
130B:  MOVLB  0F
130C:  MOVF   41,W
130D:  MOVWF  5A
130E:  MOVF   40,W
130F:  MOVWF  59
1310:  MOVF   3F,W
1311:  MOVWF  58
1312:  MOVF   3E,W
1313:  MOVWF  57
1314:  MOVLW  24
1315:  MOVWF  5C
1316:  MOVLW  DB
1317:  MOVWF  5B
1318:  CLRF   5E
1319:  MOVLW  01
131A:  MOVWF  5D
131B:  MOVLP  08
131C:  MOVLB  00
131D:  CALL   710
131E:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
131F:  MOVLB  0F
1320:  MOVF   40,W
1321:  MOVWF  5D
1322:  MOVLW  01
1323:  MOVWF  5E
1324:  MOVWF  60
1325:  CLRF   5F
1326:  MOVLP  08
1327:  MOVLB  00
1328:  CALL   20C
1329:  MOVLP  10
132A:  MOVLB  0F
132B:  MOVF   40,W
132C:  MOVWF  5D
132D:  CLRF   5E
132E:  CLRF   60
132F:  MOVLW  80
1330:  MOVWF  5F
1331:  MOVLP  08
1332:  MOVLB  00
1333:  CALL   20C
1334:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1335:  MOVLB  0F
1336:  MOVF   40,W
1337:  MOVWF  5D
1338:  CLRF   5E
1339:  MOVLW  01
133A:  MOVWF  60
133B:  CLRF   5F
133C:  MOVLP  08
133D:  MOVLB  00
133E:  CALL   20C
133F:  MOVLP  10
1340:  MOVLB  0F
1341:  MOVF   40,W
1342:  MOVWF  5D
1343:  CLRF   5E
1344:  CLRF   60
1345:  MOVLW  80
1346:  MOVWF  5F
1347:  MOVLP  08
1348:  MOVLB  00
1349:  CALL   20C
134A:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
134B:  MOVLB  0F
134C:  MOVF   41,W
134D:  MOVWF  5A
134E:  MOVF   40,W
134F:  MOVWF  59
1350:  MOVF   3F,W
1351:  MOVWF  58
1352:  MOVF   3E,W
1353:  MOVWF  57
1354:  MOVLW  24
1355:  MOVWF  5C
1356:  MOVLW  DC
1357:  MOVWF  5B
1358:  CLRF   5E
1359:  MOVLW  05
135A:  MOVWF  5D
135B:  MOVLP  08
135C:  MOVLB  00
135D:  CALL   710
135E:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
135F:  MOVLB  0F
1360:  MOVF   40,W
1361:  MOVWF  5D
1362:  MOVLW  01
1363:  MOVWF  5E
1364:  MOVWF  60
1365:  CLRF   5F
1366:  MOVLP  08
1367:  MOVLB  00
1368:  CALL   20C
1369:  MOVLP  10
136A:  MOVLB  0F
136B:  MOVF   40,W
136C:  MOVWF  5D
136D:  CLRF   5E
136E:  CLRF   60
136F:  MOVLW  80
1370:  MOVWF  5F
1371:  MOVLP  08
1372:  MOVLB  00
1373:  CALL   20C
1374:  MOVLP  10
....................    }
1375:  MOVLB  0F
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1376:  CLRF   51
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1377:  MOVF   41,W
1378:  MOVWF  5A
1379:  MOVF   40,W
137A:  MOVWF  59
137B:  MOVF   3F,W
137C:  MOVWF  58
137D:  MOVF   3E,W
137E:  MOVWF  57
137F:  MOVLP  08
1380:  MOVLB  00
1381:  CALL   770
1382:  MOVLP  10
1383:  MOVF   78,W
1384:  ANDLW  01
1385:  SUBLW  01
1386:  BTFSS  03.2
1387:  GOTO   3A5
....................       if(timeout_counter > 10)
1388:  MOVLB  0F
1389:  MOVF   51,W
138A:  SUBLW  0A
138B:  BTFSC  03.0
138C:  GOTO   395
....................          delay_ms(200);
138D:  MOVLW  C8
138E:  MOVWF  57
138F:  MOVLP  08
1390:  MOVLB  00
1391:  CALL   7B6
1392:  MOVLP  10
1393:  GOTO   39B
1394:  MOVLB  0F
....................       else
....................          delay_ms(10);   
1395:  MOVLW  0A
1396:  MOVWF  57
1397:  MOVLP  08
1398:  MOVLB  00
1399:  CALL   7B6
139A:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
139B:  MOVLB  0F
139C:  MOVF   51,W
139D:  SUBLW  64
139E:  BTFSC  03.0
139F:  GOTO   3A3
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
13A0:  MOVLB  00
13A1:  GOTO   3A5
13A2:  MOVLB  0F
....................       }  
....................       timeout_counter++;
13A3:  INCF   51,F
13A4:  GOTO   377
13A5:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
13A6:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
3000:  MOVLB  0C
3001:  MOVF   5D,F
3002:  BTFSS  03.2
3003:  GOTO   086
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
3004:  MOVLW  03
3005:  MOVWF  65
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3006:  MOVF   62,W
3007:  MOVLB  0D
3008:  MOVWF  21
3009:  MOVLB  0C
300A:  MOVF   63,W
300B:  MOVLB  0D
300C:  MOVWF  22
300D:  CLRF   23
300E:  CLRF   24
300F:  CLRF   78
3010:  CLRF   79
3011:  CLRF   7A
3012:  MOVF   21,W
3013:  MOVLB  0C
3014:  MOVWF  66
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3015:  MOVF   61,W
3016:  MOVLB  0D
3017:  MOVWF  21
3018:  MOVLB  0C
3019:  MOVF   62,W
301A:  MOVLB  0D
301B:  MOVWF  22
301C:  MOVLB  0C
301D:  MOVF   63,W
301E:  MOVLB  0D
301F:  MOVWF  23
3020:  CLRF   24
3021:  CLRF   78
3022:  CLRF   79
3023:  CLRF   7A
3024:  MOVF   21,W
3025:  MOVLB  0C
3026:  MOVWF  67
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
3027:  CLRF   78
3028:  CLRF   79
3029:  CLRF   7A
302A:  MOVF   60,W
302B:  MOVWF  68
....................             
....................       output_low(flash_stream.cs_pin);
302C:  MOVF   5E,W
302D:  MOVLB  0F
302E:  MOVWF  5D
302F:  CLRF   5E
3030:  MOVLW  01
3031:  MOVWF  60
3032:  CLRF   5F
3033:  MOVLP  08
3034:  MOVLB  00
3035:  CALL   20C
3036:  MOVLP  30
3037:  MOVLB  0C
3038:  MOVF   5E,W
3039:  MOVLB  0F
303A:  MOVWF  5D
303B:  CLRF   5E
303C:  CLRF   60
303D:  MOVLW  80
303E:  MOVWF  5F
303F:  MOVLP  08
3040:  MOVLB  00
3041:  CALL   20C
3042:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
3043:  MOVLB  0C
3044:  MOVF   5F,W
3045:  MOVLB  0F
3046:  MOVWF  60
3047:  MOVLB  0C
3048:  MOVF   5E,W
3049:  MOVLB  0F
304A:  MOVWF  5F
304B:  MOVLB  0C
304C:  MOVF   5D,W
304D:  MOVLB  0F
304E:  MOVWF  5E
304F:  MOVLB  0C
3050:  MOVF   5C,W
3051:  MOVLB  0F
3052:  MOVWF  5D
3053:  MOVLW  24
3054:  MOVWF  62
3055:  MOVLW  05
3056:  MOVWF  61
3057:  CLRF   64
3058:  MOVLW  04
3059:  MOVWF  63
305A:  MOVLW  24
305B:  MOVWF  66
305C:  MOVLW  04
305D:  MOVWF  65
305E:  CLRF   6A
305F:  CLRF   69
3060:  CLRF   68
3061:  MOVLW  01
3062:  MOVWF  67
3063:  MOVLP  08
3064:  MOVLB  00
3065:  CALL   248
3066:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3067:  MOVLW  02
3068:  MOVWF  77
3069:  DECFSZ 77,F
306A:  GOTO   069
306B:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
306C:  MOVLB  0C
306D:  MOVF   5E,W
306E:  MOVLB  0F
306F:  MOVWF  5D
3070:  MOVLW  01
3071:  MOVWF  5E
3072:  MOVWF  60
3073:  CLRF   5F
3074:  MOVLP  08
3075:  MOVLB  00
3076:  CALL   20C
3077:  MOVLP  30
3078:  MOVLB  0C
3079:  MOVF   5E,W
307A:  MOVLB  0F
307B:  MOVWF  5D
307C:  CLRF   5E
307D:  CLRF   60
307E:  MOVLW  80
307F:  MOVWF  5F
3080:  MOVLP  08
3081:  MOVLB  00
3082:  CALL   20C
3083:  MOVLP  30
....................    }
3084:  GOTO   114
3085:  MOVLB  0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
3086:  DECFSZ 5D,W
3087:  GOTO   115
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
3088:  MOVLW  13
3089:  MOVWF  69
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
308A:  MOVF   63,W
308B:  MOVLB  0D
308C:  MOVWF  21
308D:  CLRF   22
308E:  CLRF   23
308F:  CLRF   24
3090:  CLRF   78
3091:  CLRF   79
3092:  CLRF   7A
3093:  MOVF   21,W
3094:  MOVLB  0C
3095:  MOVWF  6A
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3096:  MOVF   62,W
3097:  MOVLB  0D
3098:  MOVWF  21
3099:  MOVLB  0C
309A:  MOVF   63,W
309B:  MOVLB  0D
309C:  MOVWF  22
309D:  CLRF   23
309E:  CLRF   24
309F:  CLRF   78
30A0:  CLRF   79
30A1:  CLRF   7A
30A2:  MOVF   21,W
30A3:  MOVLB  0C
30A4:  MOVWF  6B
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
30A5:  MOVF   61,W
30A6:  MOVLB  0D
30A7:  MOVWF  21
30A8:  MOVLB  0C
30A9:  MOVF   62,W
30AA:  MOVLB  0D
30AB:  MOVWF  22
30AC:  MOVLB  0C
30AD:  MOVF   63,W
30AE:  MOVLB  0D
30AF:  MOVWF  23
30B0:  CLRF   24
30B1:  CLRF   78
30B2:  CLRF   79
30B3:  CLRF   7A
30B4:  MOVF   21,W
30B5:  MOVLB  0C
30B6:  MOVWF  6C
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
30B7:  CLRF   78
30B8:  CLRF   79
30B9:  CLRF   7A
30BA:  MOVF   60,W
30BB:  MOVWF  6D
....................    
....................       output_low(flash_stream.cs_pin);
30BC:  MOVF   5E,W
30BD:  MOVLB  0F
30BE:  MOVWF  5D
30BF:  CLRF   5E
30C0:  MOVLW  01
30C1:  MOVWF  60
30C2:  CLRF   5F
30C3:  MOVLP  08
30C4:  MOVLB  00
30C5:  CALL   20C
30C6:  MOVLP  30
30C7:  MOVLB  0C
30C8:  MOVF   5E,W
30C9:  MOVLB  0F
30CA:  MOVWF  5D
30CB:  CLRF   5E
30CC:  CLRF   60
30CD:  MOVLW  80
30CE:  MOVWF  5F
30CF:  MOVLP  08
30D0:  MOVLB  00
30D1:  CALL   20C
30D2:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
30D3:  MOVLB  0C
30D4:  MOVF   5F,W
30D5:  MOVLB  0F
30D6:  MOVWF  60
30D7:  MOVLB  0C
30D8:  MOVF   5E,W
30D9:  MOVLB  0F
30DA:  MOVWF  5F
30DB:  MOVLB  0C
30DC:  MOVF   5D,W
30DD:  MOVLB  0F
30DE:  MOVWF  5E
30DF:  MOVLB  0C
30E0:  MOVF   5C,W
30E1:  MOVLB  0F
30E2:  MOVWF  5D
30E3:  MOVLW  24
30E4:  MOVWF  62
30E5:  MOVLW  09
30E6:  MOVWF  61
30E7:  CLRF   64
30E8:  MOVLW  05
30E9:  MOVWF  63
30EA:  MOVLW  24
30EB:  MOVWF  66
30EC:  MOVLW  04
30ED:  MOVWF  65
30EE:  CLRF   6A
30EF:  CLRF   69
30F0:  CLRF   68
30F1:  MOVLW  01
30F2:  MOVWF  67
30F3:  MOVLP  08
30F4:  MOVLB  00
30F5:  CALL   248
30F6:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
30F7:  MOVLW  02
30F8:  MOVWF  77
30F9:  DECFSZ 77,F
30FA:  GOTO   0F9
30FB:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
30FC:  MOVLB  0C
30FD:  MOVF   5E,W
30FE:  MOVLB  0F
30FF:  MOVWF  5D
3100:  MOVLW  01
3101:  MOVWF  5E
3102:  MOVWF  60
3103:  CLRF   5F
3104:  MOVLP  08
3105:  MOVLB  00
3106:  CALL   20C
3107:  MOVLP  30
3108:  MOVLB  0C
3109:  MOVF   5E,W
310A:  MOVLB  0F
310B:  MOVWF  5D
310C:  CLRF   5E
310D:  CLRF   60
310E:  MOVLW  80
310F:  MOVWF  5F
3110:  MOVLP  08
3111:  MOVLB  00
3112:  CALL   20C
3113:  MOVLP  30
3114:  MOVLB  0C
....................    }
....................    return read_data;
3115:  MOVF   64,W
3116:  MOVWF  78
3117:  MOVLP  30
3118:  MOVLB  00
3119:  GOTO   3CF (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0B84:  MOVLB  0E
0B85:  MOVF   40,F
0B86:  BTFSS  03.2
0B87:  GOTO   3FB
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0B88:  MOVLW  03
0B89:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0B8A:  CLRF   5A
0B8B:  CLRF   5B
0B8C:  CLRF   78
0B8D:  CLRF   79
0B8E:  CLRF   7A
0B8F:  MOVF   45,W
0B90:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0B91:  CLRF   5B
0B92:  CLRF   78
0B93:  CLRF   79
0B94:  CLRF   7A
0B95:  MOVF   44,W
0B96:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0B97:  CLRF   78
0B98:  CLRF   79
0B99:  CLRF   7A
0B9A:  MOVF   43,W
0B9B:  MOVWF  50
....................             
....................       output_low(flash_stream.cs_pin);
0B9C:  MOVF   41,W
0B9D:  MOVLB  0F
0B9E:  MOVWF  5D
0B9F:  CLRF   5E
0BA0:  MOVLW  01
0BA1:  MOVWF  60
0BA2:  CLRF   5F
0BA3:  MOVLB  00
0BA4:  CALL   20C
0BA5:  MOVLB  0E
0BA6:  MOVF   41,W
0BA7:  MOVLB  0F
0BA8:  MOVWF  5D
0BA9:  CLRF   5E
0BAA:  CLRF   60
0BAB:  MOVLW  80
0BAC:  MOVWF  5F
0BAD:  MOVLB  00
0BAE:  CALL   20C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0BAF:  MOVLB  0E
0BB0:  MOVF   42,W
0BB1:  MOVLB  0F
0BB2:  MOVWF  60
0BB3:  MOVLB  0E
0BB4:  MOVF   41,W
0BB5:  MOVLB  0F
0BB6:  MOVWF  5F
0BB7:  MOVLB  0E
0BB8:  MOVF   40,W
0BB9:  MOVLB  0F
0BBA:  MOVWF  5E
0BBB:  MOVLB  0E
0BBC:  MOVF   3F,W
0BBD:  MOVLB  0F
0BBE:  MOVWF  5D
0BBF:  MOVLW  24
0BC0:  MOVWF  62
0BC1:  MOVLW  8D
0BC2:  MOVWF  61
0BC3:  CLRF   64
0BC4:  MOVLW  04
0BC5:  MOVWF  63
0BC6:  MOVLB  0E
0BC7:  MOVF   48,W
0BC8:  MOVLB  0F
0BC9:  MOVWF  66
0BCA:  MOVLB  0E
0BCB:  MOVF   47,W
0BCC:  MOVLB  0F
0BCD:  MOVWF  65
0BCE:  MOVLB  0E
0BCF:  MOVF   4C,W
0BD0:  MOVLB  0F
0BD1:  MOVWF  6A
0BD2:  MOVLB  0E
0BD3:  MOVF   4B,W
0BD4:  MOVLB  0F
0BD5:  MOVWF  69
0BD6:  MOVLB  0E
0BD7:  MOVF   4A,W
0BD8:  MOVLB  0F
0BD9:  MOVWF  68
0BDA:  MOVLB  0E
0BDB:  MOVF   49,W
0BDC:  MOVLB  0F
0BDD:  MOVWF  67
0BDE:  MOVLB  00
0BDF:  CALL   248
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0BE0:  MOVLW  02
0BE1:  MOVWF  77
0BE2:  DECFSZ 77,F
0BE3:  GOTO   3E2
0BE4:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0BE5:  MOVLB  0E
0BE6:  MOVF   41,W
0BE7:  MOVLB  0F
0BE8:  MOVWF  5D
0BE9:  MOVLW  01
0BEA:  MOVWF  5E
0BEB:  MOVWF  60
0BEC:  CLRF   5F
0BED:  MOVLB  00
0BEE:  CALL   20C
0BEF:  MOVLB  0E
0BF0:  MOVF   41,W
0BF1:  MOVLB  0F
0BF2:  MOVWF  5D
0BF3:  CLRF   5E
0BF4:  CLRF   60
0BF5:  MOVLW  80
0BF6:  MOVWF  5F
0BF7:  MOVLB  00
0BF8:  CALL   20C
....................    }
0BF9:  GOTO   476
0BFA:  MOVLB  0E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0BFB:  DECFSZ 40,W
0BFC:  GOTO   477
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0BFD:  MOVLW  13
0BFE:  MOVWF  51
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0BFF:  CLRF   59
0C00:  CLRF   5A
0C01:  CLRF   5B
0C02:  CLRF   78
0C03:  CLRF   79
0C04:  CLRF   7A
0C05:  MOVF   46,W
0C06:  MOVWF  52
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0C07:  CLRF   5A
0C08:  CLRF   5B
0C09:  CLRF   78
0C0A:  CLRF   79
0C0B:  CLRF   7A
0C0C:  MOVF   45,W
0C0D:  MOVWF  53
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0C0E:  CLRF   5B
0C0F:  CLRF   78
0C10:  CLRF   79
0C11:  CLRF   7A
0C12:  MOVF   44,W
0C13:  MOVWF  54
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0C14:  CLRF   78
0C15:  CLRF   79
0C16:  CLRF   7A
0C17:  MOVF   43,W
0C18:  MOVWF  55
....................    
....................       output_low(flash_stream.cs_pin);
0C19:  MOVF   41,W
0C1A:  MOVLB  0F
0C1B:  MOVWF  5D
0C1C:  CLRF   5E
0C1D:  MOVLW  01
0C1E:  MOVWF  60
0C1F:  CLRF   5F
0C20:  MOVLB  00
0C21:  CALL   20C
0C22:  MOVLB  0E
0C23:  MOVF   41,W
0C24:  MOVLB  0F
0C25:  MOVWF  5D
0C26:  CLRF   5E
0C27:  CLRF   60
0C28:  MOVLW  80
0C29:  MOVWF  5F
0C2A:  MOVLB  00
0C2B:  CALL   20C
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0C2C:  MOVLB  0E
0C2D:  MOVF   42,W
0C2E:  MOVLB  0F
0C2F:  MOVWF  60
0C30:  MOVLB  0E
0C31:  MOVF   41,W
0C32:  MOVLB  0F
0C33:  MOVWF  5F
0C34:  MOVLB  0E
0C35:  MOVF   40,W
0C36:  MOVLB  0F
0C37:  MOVWF  5E
0C38:  MOVLB  0E
0C39:  MOVF   3F,W
0C3A:  MOVLB  0F
0C3B:  MOVWF  5D
0C3C:  MOVLW  24
0C3D:  MOVWF  62
0C3E:  MOVLW  91
0C3F:  MOVWF  61
0C40:  CLRF   64
0C41:  MOVLW  05
0C42:  MOVWF  63
0C43:  MOVLB  0E
0C44:  MOVF   48,W
0C45:  MOVLB  0F
0C46:  MOVWF  66
0C47:  MOVLB  0E
0C48:  MOVF   47,W
0C49:  MOVLB  0F
0C4A:  MOVWF  65
0C4B:  MOVLB  0E
0C4C:  MOVF   4C,W
0C4D:  MOVLB  0F
0C4E:  MOVWF  6A
0C4F:  MOVLB  0E
0C50:  MOVF   4B,W
0C51:  MOVLB  0F
0C52:  MOVWF  69
0C53:  MOVLB  0E
0C54:  MOVF   4A,W
0C55:  MOVLB  0F
0C56:  MOVWF  68
0C57:  MOVLB  0E
0C58:  MOVF   49,W
0C59:  MOVLB  0F
0C5A:  MOVWF  67
0C5B:  MOVLB  00
0C5C:  CALL   248
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0C5D:  MOVLW  02
0C5E:  MOVWF  77
0C5F:  DECFSZ 77,F
0C60:  GOTO   45F
0C61:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0C62:  MOVLB  0E
0C63:  MOVF   41,W
0C64:  MOVLB  0F
0C65:  MOVWF  5D
0C66:  MOVLW  01
0C67:  MOVWF  5E
0C68:  MOVWF  60
0C69:  CLRF   5F
0C6A:  MOVLB  00
0C6B:  CALL   20C
0C6C:  MOVLB  0E
0C6D:  MOVF   41,W
0C6E:  MOVLB  0F
0C6F:  MOVWF  5D
0C70:  CLRF   5E
0C71:  CLRF   60
0C72:  MOVLW  80
0C73:  MOVWF  5F
0C74:  MOVLB  00
0C75:  CALL   20C
0C76:  MOVLB  0E
....................    }
....................    return;
0C77:  MOVLB  00
0C78:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
3800:  MOVLB  0C
3801:  MOVF   56,F
3802:  BTFSS  03.2
3803:  GOTO   0CC
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
3804:  MOVLW  06
3805:  MOVWF  5E
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
3806:  MOVLW  02
3807:  MOVWF  5F
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3808:  MOVF   5B,W
3809:  MOVLB  0D
380A:  MOVWF  21
380B:  MOVLB  0C
380C:  MOVF   5C,W
380D:  MOVLB  0D
380E:  MOVWF  22
380F:  CLRF   23
3810:  CLRF   24
3811:  CLRF   78
3812:  CLRF   79
3813:  CLRF   7A
3814:  MOVF   21,W
3815:  MOVLB  0C
3816:  MOVWF  60
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3817:  MOVF   5A,W
3818:  MOVLB  0D
3819:  MOVWF  21
381A:  MOVLB  0C
381B:  MOVF   5B,W
381C:  MOVLB  0D
381D:  MOVWF  22
381E:  MOVLB  0C
381F:  MOVF   5C,W
3820:  MOVLB  0D
3821:  MOVWF  23
3822:  CLRF   24
3823:  CLRF   78
3824:  CLRF   79
3825:  CLRF   7A
3826:  MOVF   21,W
3827:  MOVLB  0C
3828:  MOVWF  61
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
3829:  CLRF   78
382A:  CLRF   79
382B:  CLRF   7A
382C:  MOVF   59,W
382D:  MOVWF  62
....................       flash_cmd[4] = write_data;
382E:  MOVF   5D,W
382F:  MOVWF  63
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3830:  MOVF   57,W
3831:  MOVLB  0F
3832:  MOVWF  5D
3833:  CLRF   5E
3834:  MOVLW  01
3835:  MOVWF  60
3836:  CLRF   5F
3837:  MOVLP  08
3838:  MOVLB  00
3839:  CALL   20C
383A:  MOVLP  38
383B:  MOVLB  0C
383C:  MOVF   57,W
383D:  MOVLB  0F
383E:  MOVWF  5D
383F:  CLRF   5E
3840:  CLRF   60
3841:  MOVLW  80
3842:  MOVWF  5F
3843:  MOVLP  08
3844:  MOVLB  00
3845:  CALL   20C
3846:  MOVLP  38
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
3847:  MOVLB  0C
3848:  MOVF   58,W
3849:  MOVLB  0F
384A:  MOVWF  5A
384B:  MOVLB  0C
384C:  MOVF   57,W
384D:  MOVLB  0F
384E:  MOVWF  59
384F:  MOVLB  0C
3850:  MOVF   56,W
3851:  MOVLB  0F
3852:  MOVWF  58
3853:  MOVLB  0C
3854:  MOVF   55,W
3855:  MOVLB  0F
3856:  MOVWF  57
3857:  MOVLW  23
3858:  MOVWF  5C
3859:  MOVLW  FE
385A:  MOVWF  5B
385B:  CLRF   5E
385C:  MOVLW  01
385D:  MOVWF  5D
385E:  MOVLP  08
385F:  MOVLB  00
3860:  CALL   710
3861:  MOVLP  38
....................       output_high(flash_stream.cs_pin);
3862:  MOVLB  0C
3863:  MOVF   57,W
3864:  MOVLB  0F
3865:  MOVWF  5D
3866:  MOVLW  01
3867:  MOVWF  5E
3868:  MOVWF  60
3869:  CLRF   5F
386A:  MOVLP  08
386B:  MOVLB  00
386C:  CALL   20C
386D:  MOVLP  38
386E:  MOVLB  0C
386F:  MOVF   57,W
3870:  MOVLB  0F
3871:  MOVWF  5D
3872:  CLRF   5E
3873:  CLRF   60
3874:  MOVLW  80
3875:  MOVWF  5F
3876:  MOVLP  08
3877:  MOVLB  00
3878:  CALL   20C
3879:  MOVLP  38
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
387A:  MOVLB  0C
387B:  MOVF   57,W
387C:  MOVLB  0F
387D:  MOVWF  5D
387E:  CLRF   5E
387F:  MOVLW  01
3880:  MOVWF  60
3881:  CLRF   5F
3882:  MOVLP  08
3883:  MOVLB  00
3884:  CALL   20C
3885:  MOVLP  38
3886:  MOVLB  0C
3887:  MOVF   57,W
3888:  MOVLB  0F
3889:  MOVWF  5D
388A:  CLRF   5E
388B:  CLRF   60
388C:  MOVLW  80
388D:  MOVWF  5F
388E:  MOVLP  08
388F:  MOVLB  00
3890:  CALL   20C
3891:  MOVLP  38
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
3892:  MOVLB  0C
3893:  MOVF   58,W
3894:  MOVLB  0F
3895:  MOVWF  5A
3896:  MOVLB  0C
3897:  MOVF   57,W
3898:  MOVLB  0F
3899:  MOVWF  59
389A:  MOVLB  0C
389B:  MOVF   56,W
389C:  MOVLB  0F
389D:  MOVWF  58
389E:  MOVLB  0C
389F:  MOVF   55,W
38A0:  MOVLB  0F
38A1:  MOVWF  57
38A2:  MOVLW  23
38A3:  MOVWF  5C
38A4:  MOVLW  FF
38A5:  MOVWF  5B
38A6:  CLRF   5E
38A7:  MOVLW  05
38A8:  MOVWF  5D
38A9:  MOVLP  08
38AA:  MOVLB  00
38AB:  CALL   710
38AC:  MOVLP  38
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
38AD:  MOVLW  02
38AE:  MOVWF  77
38AF:  DECFSZ 77,F
38B0:  GOTO   0AF
38B1:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
38B2:  MOVLB  0C
38B3:  MOVF   57,W
38B4:  MOVLB  0F
38B5:  MOVWF  5D
38B6:  MOVLW  01
38B7:  MOVWF  5E
38B8:  MOVWF  60
38B9:  CLRF   5F
38BA:  MOVLP  08
38BB:  MOVLB  00
38BC:  CALL   20C
38BD:  MOVLP  38
38BE:  MOVLB  0C
38BF:  MOVF   57,W
38C0:  MOVLB  0F
38C1:  MOVWF  5D
38C2:  CLRF   5E
38C3:  CLRF   60
38C4:  MOVLW  80
38C5:  MOVWF  5F
38C6:  MOVLP  08
38C7:  MOVLB  00
38C8:  CALL   20C
38C9:  MOVLP  38
....................    }
38CA:  GOTO   1A0
38CB:  MOVLB  0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
38CC:  DECFSZ 56,W
38CD:  GOTO   1A1
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
38CE:  MOVLW  06
38CF:  MOVWF  64
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
38D0:  MOVLW  12
38D1:  MOVWF  65
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
38D2:  MOVF   5C,W
38D3:  MOVLB  0D
38D4:  MOVWF  21
38D5:  CLRF   22
38D6:  CLRF   23
38D7:  CLRF   24
38D8:  CLRF   78
38D9:  CLRF   79
38DA:  CLRF   7A
38DB:  MOVF   21,W
38DC:  MOVLB  0C
38DD:  MOVWF  66
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
38DE:  MOVF   5B,W
38DF:  MOVLB  0D
38E0:  MOVWF  21
38E1:  MOVLB  0C
38E2:  MOVF   5C,W
38E3:  MOVLB  0D
38E4:  MOVWF  22
38E5:  CLRF   23
38E6:  CLRF   24
38E7:  CLRF   78
38E8:  CLRF   79
38E9:  CLRF   7A
38EA:  MOVF   21,W
38EB:  MOVLB  0C
38EC:  MOVWF  67
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
38ED:  MOVF   5A,W
38EE:  MOVLB  0D
38EF:  MOVWF  21
38F0:  MOVLB  0C
38F1:  MOVF   5B,W
38F2:  MOVLB  0D
38F3:  MOVWF  22
38F4:  MOVLB  0C
38F5:  MOVF   5C,W
38F6:  MOVLB  0D
38F7:  MOVWF  23
38F8:  CLRF   24
38F9:  CLRF   78
38FA:  CLRF   79
38FB:  CLRF   7A
38FC:  MOVF   21,W
38FD:  MOVLB  0C
38FE:  MOVWF  68
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
38FF:  CLRF   78
3900:  CLRF   79
3901:  CLRF   7A
3902:  MOVF   59,W
3903:  MOVWF  69
....................       flash_cmd[5] = write_data;
3904:  MOVF   5D,W
3905:  MOVWF  6A
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3906:  MOVF   57,W
3907:  MOVLB  0F
3908:  MOVWF  5D
3909:  CLRF   5E
390A:  MOVLW  01
390B:  MOVWF  60
390C:  CLRF   5F
390D:  MOVLP  08
390E:  MOVLB  00
390F:  CALL   20C
3910:  MOVLP  38
3911:  MOVLB  0C
3912:  MOVF   57,W
3913:  MOVLB  0F
3914:  MOVWF  5D
3915:  CLRF   5E
3916:  CLRF   60
3917:  MOVLW  80
3918:  MOVWF  5F
3919:  MOVLP  08
391A:  MOVLB  00
391B:  CALL   20C
391C:  MOVLP  38
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
391D:  MOVLB  0C
391E:  MOVF   58,W
391F:  MOVLB  0F
3920:  MOVWF  5A
3921:  MOVLB  0C
3922:  MOVF   57,W
3923:  MOVLB  0F
3924:  MOVWF  59
3925:  MOVLB  0C
3926:  MOVF   56,W
3927:  MOVLB  0F
3928:  MOVWF  58
3929:  MOVLB  0C
392A:  MOVF   55,W
392B:  MOVLB  0F
392C:  MOVWF  57
392D:  MOVLW  24
392E:  MOVWF  5C
392F:  MOVLW  04
3930:  MOVWF  5B
3931:  CLRF   5E
3932:  MOVLW  01
3933:  MOVWF  5D
3934:  MOVLP  08
3935:  MOVLB  00
3936:  CALL   710
3937:  MOVLP  38
....................       output_high(flash_stream.cs_pin);
3938:  MOVLB  0C
3939:  MOVF   57,W
393A:  MOVLB  0F
393B:  MOVWF  5D
393C:  MOVLW  01
393D:  MOVWF  5E
393E:  MOVWF  60
393F:  CLRF   5F
3940:  MOVLP  08
3941:  MOVLB  00
3942:  CALL   20C
3943:  MOVLP  38
3944:  MOVLB  0C
3945:  MOVF   57,W
3946:  MOVLB  0F
3947:  MOVWF  5D
3948:  CLRF   5E
3949:  CLRF   60
394A:  MOVLW  80
394B:  MOVWF  5F
394C:  MOVLP  08
394D:  MOVLB  00
394E:  CALL   20C
394F:  MOVLP  38
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
3950:  MOVLB  0C
3951:  MOVF   57,W
3952:  MOVLB  0F
3953:  MOVWF  5D
3954:  CLRF   5E
3955:  MOVLW  01
3956:  MOVWF  60
3957:  CLRF   5F
3958:  MOVLP  08
3959:  MOVLB  00
395A:  CALL   20C
395B:  MOVLP  38
395C:  MOVLB  0C
395D:  MOVF   57,W
395E:  MOVLB  0F
395F:  MOVWF  5D
3960:  CLRF   5E
3961:  CLRF   60
3962:  MOVLW  80
3963:  MOVWF  5F
3964:  MOVLP  08
3965:  MOVLB  00
3966:  CALL   20C
3967:  MOVLP  38
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
3968:  MOVLB  0C
3969:  MOVF   58,W
396A:  MOVLB  0F
396B:  MOVWF  5A
396C:  MOVLB  0C
396D:  MOVF   57,W
396E:  MOVLB  0F
396F:  MOVWF  59
3970:  MOVLB  0C
3971:  MOVF   56,W
3972:  MOVLB  0F
3973:  MOVWF  58
3974:  MOVLB  0C
3975:  MOVF   55,W
3976:  MOVLB  0F
3977:  MOVWF  57
3978:  MOVLW  24
3979:  MOVWF  5C
397A:  MOVLW  05
397B:  MOVWF  5B
397C:  CLRF   5E
397D:  MOVLW  06
397E:  MOVWF  5D
397F:  MOVLP  08
3980:  MOVLB  00
3981:  CALL   710
3982:  MOVLP  38
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3983:  MOVLW  02
3984:  MOVWF  77
3985:  DECFSZ 77,F
3986:  GOTO   185
3987:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
3988:  MOVLB  0C
3989:  MOVF   57,W
398A:  MOVLB  0F
398B:  MOVWF  5D
398C:  MOVLW  01
398D:  MOVWF  5E
398E:  MOVWF  60
398F:  CLRF   5F
3990:  MOVLP  08
3991:  MOVLB  00
3992:  CALL   20C
3993:  MOVLP  38
3994:  MOVLB  0C
3995:  MOVF   57,W
3996:  MOVLB  0F
3997:  MOVWF  5D
3998:  CLRF   5E
3999:  CLRF   60
399A:  MOVLW  80
399B:  MOVWF  5F
399C:  MOVLP  08
399D:  MOVLB  00
399E:  CALL   20C
399F:  MOVLP  38
39A0:  MOVLB  0C
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
39A1:  CLRF   6B
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
39A2:  MOVF   58,W
39A3:  MOVLB  0F
39A4:  MOVWF  5A
39A5:  MOVLB  0C
39A6:  MOVF   57,W
39A7:  MOVLB  0F
39A8:  MOVWF  59
39A9:  MOVLB  0C
39AA:  MOVF   56,W
39AB:  MOVLB  0F
39AC:  MOVWF  58
39AD:  MOVLB  0C
39AE:  MOVF   55,W
39AF:  MOVLB  0F
39B0:  MOVWF  57
39B1:  MOVLP  08
39B2:  MOVLB  00
39B3:  CALL   770
39B4:  MOVLP  38
39B5:  MOVF   78,W
39B6:  ANDLW  01
39B7:  SUBLW  01
39B8:  BTFSS  03.2
39B9:  GOTO   1D9
....................       if(timeout_counter > 10)
39BA:  MOVLB  0C
39BB:  MOVF   6B,W
39BC:  SUBLW  0A
39BD:  BTFSC  03.0
39BE:  GOTO   1C8
....................          delay_ms(200);
39BF:  MOVLW  C8
39C0:  MOVLB  0F
39C1:  MOVWF  57
39C2:  MOVLP  08
39C3:  MOVLB  00
39C4:  CALL   7B6
39C5:  MOVLP  38
39C6:  GOTO   1CF
39C7:  MOVLB  0C
....................       else
....................          delay_ms(10);   
39C8:  MOVLW  0A
39C9:  MOVLB  0F
39CA:  MOVWF  57
39CB:  MOVLP  08
39CC:  MOVLB  00
39CD:  CALL   7B6
39CE:  MOVLP  38
....................       
....................       if(timeout_counter > 100){
39CF:  MOVLB  0C
39D0:  MOVF   6B,W
39D1:  SUBLW  64
39D2:  BTFSC  03.0
39D3:  GOTO   1D7
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
39D4:  MOVLB  00
39D5:  GOTO   1D9
39D6:  MOVLB  0C
....................       }  
....................       timeout_counter++;
39D7:  INCF   6B,F
39D8:  GOTO   1A2
39D9:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
39DA:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
10A5:  MOVLB  0F
10A6:  MOVF   3F,F
10A7:  BTFSS  03.2
10A8:  GOTO   154
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
10A9:  MOVLW  06
10AA:  MOVWF  4A
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
10AB:  MOVLW  02
10AC:  MOVWF  4B
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10AD:  MOVF   44,W
10AE:  MOVWF  58
10AF:  MOVF   45,W
10B0:  MOVWF  59
10B1:  CLRF   5A
10B2:  CLRF   5B
10B3:  CLRF   78
10B4:  CLRF   79
10B5:  CLRF   7A
10B6:  MOVF   58,W
10B7:  MOVWF  4C
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10B8:  MOVF   43,W
10B9:  MOVWF  58
10BA:  MOVF   44,W
10BB:  MOVWF  59
10BC:  MOVF   45,W
10BD:  MOVWF  5A
10BE:  CLRF   5B
10BF:  CLRF   78
10C0:  CLRF   79
10C1:  CLRF   7A
10C2:  MOVF   58,W
10C3:  MOVWF  4D
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
10C4:  CLRF   78
10C5:  CLRF   79
10C6:  CLRF   7A
10C7:  MOVF   42,W
10C8:  MOVWF  4E
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10C9:  MOVF   40,W
10CA:  MOVWF  5D
10CB:  CLRF   5E
10CC:  MOVLW  01
10CD:  MOVWF  60
10CE:  CLRF   5F
10CF:  MOVLP  08
10D0:  MOVLB  00
10D1:  CALL   20C
10D2:  MOVLP  10
10D3:  MOVLB  0F
10D4:  MOVF   40,W
10D5:  MOVWF  5D
10D6:  CLRF   5E
10D7:  CLRF   60
10D8:  MOVLW  80
10D9:  MOVWF  5F
10DA:  MOVLP  08
10DB:  MOVLB  00
10DC:  CALL   20C
10DD:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10DE:  MOVLB  0F
10DF:  MOVF   41,W
10E0:  MOVWF  5A
10E1:  MOVF   40,W
10E2:  MOVWF  59
10E3:  MOVF   3F,W
10E4:  MOVWF  58
10E5:  MOVF   3E,W
10E6:  MOVWF  57
10E7:  MOVLW  24
10E8:  MOVWF  5C
10E9:  MOVLW  DA
10EA:  MOVWF  5B
10EB:  CLRF   5E
10EC:  MOVLW  01
10ED:  MOVWF  5D
10EE:  MOVLP  08
10EF:  MOVLB  00
10F0:  CALL   710
10F1:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
10F2:  MOVLB  0F
10F3:  MOVF   40,W
10F4:  MOVWF  5D
10F5:  MOVLW  01
10F6:  MOVWF  5E
10F7:  MOVWF  60
10F8:  CLRF   5F
10F9:  MOVLP  08
10FA:  MOVLB  00
10FB:  CALL   20C
10FC:  MOVLP  10
10FD:  MOVLB  0F
10FE:  MOVF   40,W
10FF:  MOVWF  5D
1100:  CLRF   5E
1101:  CLRF   60
1102:  MOVLW  80
1103:  MOVWF  5F
1104:  MOVLP  08
1105:  MOVLB  00
1106:  CALL   20C
1107:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1108:  MOVLB  0F
1109:  MOVF   40,W
110A:  MOVWF  5D
110B:  CLRF   5E
110C:  MOVLW  01
110D:  MOVWF  60
110E:  CLRF   5F
110F:  MOVLP  08
1110:  MOVLB  00
1111:  CALL   20C
1112:  MOVLP  10
1113:  MOVLB  0F
1114:  MOVF   40,W
1115:  MOVWF  5D
1116:  CLRF   5E
1117:  CLRF   60
1118:  MOVLW  80
1119:  MOVWF  5F
111A:  MOVLP  08
111B:  MOVLB  00
111C:  CALL   20C
111D:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
111E:  MOVLB  0F
111F:  MOVF   41,W
1120:  MOVWF  5A
1121:  MOVF   40,W
1122:  MOVWF  59
1123:  MOVF   3F,W
1124:  MOVWF  58
1125:  MOVF   3E,W
1126:  MOVWF  57
1127:  MOVLW  24
1128:  MOVWF  5C
1129:  MOVLW  DB
112A:  MOVWF  5B
112B:  MOVLW  04
112C:  MOVWF  5D
112D:  MOVF   47,W
112E:  MOVWF  5F
112F:  MOVF   46,W
1130:  MOVWF  5E
1131:  MOVF   49,W
1132:  MOVWF  61
1133:  MOVF   48,W
1134:  MOVWF  60
1135:  MOVLB  00
1136:  CALL   000
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
1137:  MOVLW  02
1138:  MOVWF  77
1139:  DECFSZ 77,F
113A:  GOTO   139
113B:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
113C:  MOVLB  0F
113D:  MOVF   40,W
113E:  MOVWF  5D
113F:  MOVLW  01
1140:  MOVWF  5E
1141:  MOVWF  60
1142:  CLRF   5F
1143:  MOVLP  08
1144:  MOVLB  00
1145:  CALL   20C
1146:  MOVLP  10
1147:  MOVLB  0F
1148:  MOVF   40,W
1149:  MOVWF  5D
114A:  CLRF   5E
114B:  CLRF   60
114C:  MOVLW  80
114D:  MOVWF  5F
114E:  MOVLP  08
114F:  MOVLB  00
1150:  CALL   20C
1151:  MOVLP  10
....................    }
1152:  GOTO   209
1153:  MOVLB  0F
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1154:  DECFSZ 3F,W
1155:  GOTO   20A
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1156:  MOVLW  06
1157:  MOVWF  4F
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
1158:  MOVLW  12
1159:  MOVWF  50
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
115A:  MOVF   45,W
115B:  MOVWF  58
115C:  CLRF   59
115D:  CLRF   5A
115E:  CLRF   5B
115F:  CLRF   78
1160:  CLRF   79
1161:  CLRF   7A
1162:  MOVF   58,W
1163:  MOVWF  51
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1164:  MOVF   44,W
1165:  MOVWF  58
1166:  MOVF   45,W
1167:  MOVWF  59
1168:  CLRF   5A
1169:  CLRF   5B
116A:  CLRF   78
116B:  CLRF   79
116C:  CLRF   7A
116D:  MOVF   58,W
116E:  MOVWF  52
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
116F:  MOVF   43,W
1170:  MOVWF  58
1171:  MOVF   44,W
1172:  MOVWF  59
1173:  MOVF   45,W
1174:  MOVWF  5A
1175:  CLRF   5B
1176:  CLRF   78
1177:  CLRF   79
1178:  CLRF   7A
1179:  MOVF   58,W
117A:  MOVWF  53
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
117B:  CLRF   78
117C:  CLRF   79
117D:  CLRF   7A
117E:  MOVF   42,W
117F:  MOVWF  54
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1180:  MOVF   40,W
1181:  MOVWF  5D
1182:  CLRF   5E
1183:  MOVLW  01
1184:  MOVWF  60
1185:  CLRF   5F
1186:  MOVLP  08
1187:  MOVLB  00
1188:  CALL   20C
1189:  MOVLP  10
118A:  MOVLB  0F
118B:  MOVF   40,W
118C:  MOVWF  5D
118D:  CLRF   5E
118E:  CLRF   60
118F:  MOVLW  80
1190:  MOVWF  5F
1191:  MOVLP  08
1192:  MOVLB  00
1193:  CALL   20C
1194:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1195:  MOVLB  0F
1196:  MOVF   41,W
1197:  MOVWF  5A
1198:  MOVF   40,W
1199:  MOVWF  59
119A:  MOVF   3F,W
119B:  MOVWF  58
119C:  MOVF   3E,W
119D:  MOVWF  57
119E:  MOVLW  24
119F:  MOVWF  5C
11A0:  MOVLW  DF
11A1:  MOVWF  5B
11A2:  CLRF   5E
11A3:  MOVLW  01
11A4:  MOVWF  5D
11A5:  MOVLP  08
11A6:  MOVLB  00
11A7:  CALL   710
11A8:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
11A9:  MOVLB  0F
11AA:  MOVF   40,W
11AB:  MOVWF  5D
11AC:  MOVLW  01
11AD:  MOVWF  5E
11AE:  MOVWF  60
11AF:  CLRF   5F
11B0:  MOVLP  08
11B1:  MOVLB  00
11B2:  CALL   20C
11B3:  MOVLP  10
11B4:  MOVLB  0F
11B5:  MOVF   40,W
11B6:  MOVWF  5D
11B7:  CLRF   5E
11B8:  CLRF   60
11B9:  MOVLW  80
11BA:  MOVWF  5F
11BB:  MOVLP  08
11BC:  MOVLB  00
11BD:  CALL   20C
11BE:  MOVLP  10
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
11BF:  MOVLB  0F
11C0:  MOVF   40,W
11C1:  MOVWF  5D
11C2:  CLRF   5E
11C3:  MOVLW  01
11C4:  MOVWF  60
11C5:  CLRF   5F
11C6:  MOVLP  08
11C7:  MOVLB  00
11C8:  CALL   20C
11C9:  MOVLP  10
11CA:  MOVLB  0F
11CB:  MOVF   40,W
11CC:  MOVWF  5D
11CD:  CLRF   5E
11CE:  CLRF   60
11CF:  MOVLW  80
11D0:  MOVWF  5F
11D1:  MOVLP  08
11D2:  MOVLB  00
11D3:  CALL   20C
11D4:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
11D5:  MOVLB  0F
11D6:  MOVF   41,W
11D7:  MOVWF  5A
11D8:  MOVF   40,W
11D9:  MOVWF  59
11DA:  MOVF   3F,W
11DB:  MOVWF  58
11DC:  MOVF   3E,W
11DD:  MOVWF  57
11DE:  MOVLW  24
11DF:  MOVWF  5C
11E0:  MOVLW  E0
11E1:  MOVWF  5B
11E2:  MOVLW  05
11E3:  MOVWF  5D
11E4:  MOVF   47,W
11E5:  MOVWF  5F
11E6:  MOVF   46,W
11E7:  MOVWF  5E
11E8:  MOVF   49,W
11E9:  MOVWF  61
11EA:  MOVF   48,W
11EB:  MOVWF  60
11EC:  MOVLB  00
11ED:  CALL   000
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
11EE:  MOVLW  02
11EF:  MOVWF  77
11F0:  DECFSZ 77,F
11F1:  GOTO   1F0
11F2:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
11F3:  MOVLB  0F
11F4:  MOVF   40,W
11F5:  MOVWF  5D
11F6:  MOVLW  01
11F7:  MOVWF  5E
11F8:  MOVWF  60
11F9:  CLRF   5F
11FA:  MOVLP  08
11FB:  MOVLB  00
11FC:  CALL   20C
11FD:  MOVLP  10
11FE:  MOVLB  0F
11FF:  MOVF   40,W
1200:  MOVWF  5D
1201:  CLRF   5E
1202:  CLRF   60
1203:  MOVLW  80
1204:  MOVWF  5F
1205:  MOVLP  08
1206:  MOVLB  00
1207:  CALL   20C
1208:  MOVLP  10
1209:  MOVLB  0F
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
120A:  CLRF   55
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
120B:  MOVF   41,W
120C:  MOVWF  5A
120D:  MOVF   40,W
120E:  MOVWF  59
120F:  MOVF   3F,W
1210:  MOVWF  58
1211:  MOVF   3E,W
1212:  MOVWF  57
1213:  MOVLP  08
1214:  MOVLB  00
1215:  CALL   770
1216:  MOVLP  10
1217:  MOVF   78,W
1218:  ANDLW  01
1219:  SUBLW  01
121A:  BTFSS  03.2
121B:  GOTO   239
....................       if(timeout_counter > 10)
121C:  MOVLB  0F
121D:  MOVF   55,W
121E:  SUBLW  0A
121F:  BTFSC  03.0
1220:  GOTO   229
....................          delay_ms(200);
1221:  MOVLW  C8
1222:  MOVWF  57
1223:  MOVLP  08
1224:  MOVLB  00
1225:  CALL   7B6
1226:  MOVLP  10
1227:  GOTO   22F
1228:  MOVLB  0F
....................       else
....................          delay_ms(10);   
1229:  MOVLW  0A
122A:  MOVWF  57
122B:  MOVLP  08
122C:  MOVLB  00
122D:  CALL   7B6
122E:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
122F:  MOVLB  0F
1230:  MOVF   55,W
1231:  SUBLW  64
1232:  BTFSC  03.0
1233:  GOTO   237
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1234:  MOVLB  00
1235:  GOTO   239
1236:  MOVLB  0F
....................       }  
....................       timeout_counter++;
1237:  INCF   55,F
1238:  GOTO   20B
1239:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
123A:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0B36:  MOVLW  9F
0B37:  MOVLB  0F
0B38:  MOVWF  46
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0B39:  MOVF   40,W
0B3A:  MOVWF  5D
0B3B:  CLRF   5E
0B3C:  MOVLW  01
0B3D:  MOVWF  60
0B3E:  CLRF   5F
0B3F:  MOVLB  00
0B40:  CALL   20C
0B41:  MOVLB  0F
0B42:  MOVF   40,W
0B43:  MOVWF  5D
0B44:  CLRF   5E
0B45:  CLRF   60
0B46:  MOVLW  80
0B47:  MOVWF  5F
0B48:  MOVLB  00
0B49:  CALL   20C
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0B4A:  MOVLB  0F
0B4B:  MOVF   41,W
0B4C:  MOVWF  60
0B4D:  MOVF   40,W
0B4E:  MOVWF  5F
0B4F:  MOVF   3F,W
0B50:  MOVWF  5E
0B51:  MOVF   3E,W
0B52:  MOVWF  5D
0B53:  MOVLW  24
0B54:  MOVWF  62
0B55:  MOVLW  D6
0B56:  MOVWF  61
0B57:  CLRF   64
0B58:  MOVLW  01
0B59:  MOVWF  63
0B5A:  MOVLW  24
0B5B:  MOVWF  66
0B5C:  MOVLW  D2
0B5D:  MOVWF  65
0B5E:  CLRF   6A
0B5F:  CLRF   69
0B60:  CLRF   68
0B61:  MOVLW  04
0B62:  MOVWF  67
0B63:  MOVLB  00
0B64:  CALL   248
....................    output_high(flash_stream.cs_pin);
0B65:  MOVLB  0F
0B66:  MOVF   40,W
0B67:  MOVWF  5D
0B68:  MOVLW  01
0B69:  MOVWF  5E
0B6A:  MOVWF  60
0B6B:  CLRF   5F
0B6C:  MOVLB  00
0B6D:  CALL   20C
0B6E:  MOVLB  0F
0B6F:  MOVF   40,W
0B70:  MOVWF  5D
0B71:  CLRF   5E
0B72:  CLRF   60
0B73:  MOVLW  80
0B74:  MOVWF  5F
0B75:  MOVLB  00
0B76:  CALL   20C
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0B77:  MOVLB  0F
0B78:  MOVF   42,W
0B79:  SUBLW  20
0B7A:  BTFSS  03.2
0B7B:  GOTO   380
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0B7C:  MOVLW  01
0B7D:  MOVWF  78
0B7E:  GOTO   382
....................    }
0B7F:  GOTO   382
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0B80:  MOVLW  00
0B81:  MOVWF  78
....................    }
0B82:  MOVLB  00
0B83:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0CA0:  MOVLW  93
0CA1:  MOVLB  03
0CA2:  MOVWF  11
0CA3:  MOVLW  00
0CA4:  MOVWF  12
0CA5:  MOVLB  00
0CA6:  CALL   0D4
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0CA7:  MOVLB  01
0CA8:  BCF    0F.3
0CA9:  MOVLB  02
0CAA:  BSF    0F.3
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0CAB:  MOVLB  01
0CAC:  BCF    0F.1
0CAD:  MOVLB  02
0CAE:  BSF    0F.1
....................     
....................     unsigned int8 readdata[PACKET_SIZE];
.................... 
....................     if (!is_connect(mis_fm)) {
0CAF:  MOVLB  08
0CB0:  MOVF   5D,W
0CB1:  MOVLB  0F
0CB2:  MOVWF  41
0CB3:  MOVLB  08
0CB4:  MOVF   5C,W
0CB5:  MOVLB  0F
0CB6:  MOVWF  40
0CB7:  MOVLB  08
0CB8:  MOVF   5B,W
0CB9:  MOVLB  0F
0CBA:  MOVWF  3F
0CBB:  MOVLB  08
0CBC:  MOVF   5A,W
0CBD:  MOVLB  0F
0CBE:  MOVWF  3E
0CBF:  MOVLB  00
0CC0:  CALL   336
0CC1:  MOVF   78,F
0CC2:  BTFSS  03.2
0CC3:  GOTO   4CC
....................         fprintf(PC, "\tFlash is not connected\r\n");
0CC4:  MOVLW  A1
0CC5:  MOVLB  03
0CC6:  MOVWF  11
0CC7:  MOVLW  00
0CC8:  MOVWF  12
0CC9:  MOVLB  00
0CCA:  CALL   0D4
....................         return;
0CCB:  GOTO   70F
....................     }else {
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
0CCC:  MOVLB  08
0CCD:  MOVF   5D,W
0CCE:  MOVLB  0E
0CCF:  MOVWF  42
0CD0:  MOVLB  08
0CD1:  MOVF   5C,W
0CD2:  MOVLB  0E
0CD3:  MOVWF  41
0CD4:  MOVLB  08
0CD5:  MOVF   5B,W
0CD6:  MOVLB  0E
0CD7:  MOVWF  40
0CD8:  MOVLB  08
0CD9:  MOVF   5A,W
0CDA:  MOVLB  0E
0CDB:  MOVWF  3F
0CDC:  CLRF   46
0CDD:  CLRF   45
0CDE:  CLRF   44
0CDF:  CLRF   43
0CE0:  MOVLW  23
0CE1:  MOVWF  48
0CE2:  MOVLW  B7
0CE3:  MOVWF  47
0CE4:  CLRF   4C
0CE5:  CLRF   4B
0CE6:  CLRF   4A
0CE7:  MOVLW  40
0CE8:  MOVWF  49
0CE9:  MOVLB  00
0CEA:  CALL   384
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = (readdata[0] << 24) | (readdata[1] << 16) | (readdata[2] << 8) | readdata[3];
0CEB:  MOVLB  0C
0CEC:  CLRF   59
0CED:  MOVLW  00
0CEE:  IORWF  59,F
0CEF:  IORWF  59,W
0CF0:  MOVLB  0B
0CF1:  IORWF  6A,W
0CF2:  MOVLB  08
0CF3:  MOVWF  42
0CF4:  CLRF   43
0CF5:  CLRF   44
0CF6:  CLRF   45
....................     smf_piclog_loop_counter = readdata[4];
0CF7:  MOVLB  0B
0CF8:  MOVF   6B,W
0CF9:  MOVWF  71
....................     smf_meas_use_counter = (readdata[5] << 24) | (readdata[6] << 16) | (readdata[7] << 8) | readdata[8];
0CFA:  MOVLB  0C
0CFB:  CLRF   59
0CFC:  MOVLW  00
0CFD:  IORWF  59,F
0CFE:  IORWF  59,W
0CFF:  MOVLB  0B
0D00:  IORWF  6F,W
0D01:  MOVLB  08
0D02:  MOVWF  46
0D03:  CLRF   47
0D04:  CLRF   48
0D05:  CLRF   49
....................     smf_meas_loop_counter = readdata[9];
0D06:  MOVLB  0C
0D07:  MOVF   20,W
0D08:  MOVWF  72
.................... 
....................     misf_piclog_use_counter = (readdata[10] << 24) | (readdata[11] << 16) | (readdata[12] << 8) | readdata[13];
0D09:  CLRF   59
0D0A:  MOVLW  00
0D0B:  IORWF  59,F
0D0C:  IORWF  59,W
0D0D:  IORWF  24,W
0D0E:  MOVLB  08
0D0F:  MOVWF  4A
0D10:  CLRF   4B
0D11:  CLRF   4C
0D12:  CLRF   4D
....................     misf_piclog_loop_counter = readdata[14];
0D13:  MOVLB  0C
0D14:  MOVF   25,W
0D15:  MOVWF  73
....................     misf_piclog_uncopyed_counter = (readdata[15] << 24) | (readdata[16] << 16) | (readdata[17] << 8) | readdata[18];
0D16:  CLRF   59
0D17:  MOVLW  00
0D18:  IORWF  59,F
0D19:  IORWF  59,W
0D1A:  IORWF  29,W
0D1B:  MOVLB  08
0D1C:  MOVWF  4E
0D1D:  CLRF   4F
0D1E:  CLRF   50
0D1F:  CLRF   51
....................     misf_piclog_write_counter = (readdata[19] << 24) | (readdata[20] << 16) | (readdata[21] << 8) | readdata[22];
0D20:  MOVLB  0C
0D21:  CLRF   58
0D22:  MOVLW  00
0D23:  IORWF  58,F
0D24:  IORWF  58,W
0D25:  IORWF  2D,W
0D26:  MOVWF  74
....................     misf_meas_use_counter = (readdata[23] << 24) | (readdata[24] << 16) | (readdata[25] << 8) | readdata[26];
0D27:  CLRF   59
0D28:  MOVLW  00
0D29:  IORWF  59,F
0D2A:  IORWF  59,W
0D2B:  IORWF  31,W
0D2C:  MOVLB  08
0D2D:  MOVWF  52
0D2E:  CLRF   53
0D2F:  CLRF   54
0D30:  CLRF   55
....................     misf_meas_loop_counter = readdata[27];
0D31:  MOVLB  0C
0D32:  MOVF   32,W
0D33:  MOVWF  75
....................     misf_meas_uncopyed_counter = (readdata[28] << 24) | (readdata[29] << 16) | (readdata[30] << 8) | readdata[31];
0D34:  CLRF   59
0D35:  MOVLW  00
0D36:  IORWF  59,F
0D37:  IORWF  59,W
0D38:  IORWF  36,W
0D39:  MOVLB  08
0D3A:  MOVWF  56
0D3B:  CLRF   57
0D3C:  CLRF   58
0D3D:  CLRF   59
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
0D3E:  MOVLW  AE
0D3F:  MOVLB  03
0D40:  MOVWF  11
0D41:  MOVLW  00
0D42:  MOVWF  12
0D43:  BCF    03.0
0D44:  MOVLW  22
0D45:  MOVLB  0C
0D46:  MOVWF  5E
0D47:  MOVLB  00
0D48:  CALL   122
0D49:  MOVLB  08
0D4A:  MOVF   45,W
0D4B:  MOVLB  0E
0D4C:  MOVWF  4E
0D4D:  MOVLW  37
0D4E:  MOVWF  4F
0D4F:  MOVLB  00
0D50:  CALL   479
0D51:  MOVLB  08
0D52:  MOVF   44,W
0D53:  MOVLB  0E
0D54:  MOVWF  4E
0D55:  MOVLW  37
0D56:  MOVWF  4F
0D57:  MOVLB  00
0D58:  CALL   479
0D59:  MOVLB  08
0D5A:  MOVF   43,W
0D5B:  MOVLB  0E
0D5C:  MOVWF  4E
0D5D:  MOVLW  37
0D5E:  MOVWF  4F
0D5F:  MOVLB  00
0D60:  CALL   479
0D61:  MOVLB  08
0D62:  MOVF   42,W
0D63:  MOVLB  0E
0D64:  MOVWF  4E
0D65:  MOVLW  37
0D66:  MOVWF  4F
0D67:  MOVLB  00
0D68:  CALL   479
0D69:  MOVLW  0D
0D6A:  MOVLB  0F
0D6B:  MOVWF  43
0D6C:  MOVLB  00
0D6D:  CALL   0AF
0D6E:  MOVLW  0A
0D6F:  MOVLB  0F
0D70:  MOVWF  43
0D71:  MOVLB  00
0D72:  CALL   0AF
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
0D73:  MOVLW  C3
0D74:  MOVLB  03
0D75:  MOVWF  11
0D76:  MOVLW  00
0D77:  MOVWF  12
0D78:  BCF    03.0
0D79:  MOVLW  22
0D7A:  MOVLB  0C
0D7B:  MOVWF  5E
0D7C:  MOVLB  00
0D7D:  CALL   122
0D7E:  MOVF   71,W
0D7F:  MOVLB  0E
0D80:  MOVWF  4E
0D81:  MOVLW  37
0D82:  MOVWF  4F
0D83:  MOVLB  00
0D84:  CALL   479
0D85:  MOVLW  0D
0D86:  MOVLB  0F
0D87:  MOVWF  43
0D88:  MOVLB  00
0D89:  CALL   0AF
0D8A:  MOVLW  0A
0D8B:  MOVLB  0F
0D8C:  MOVWF  43
0D8D:  MOVLB  00
0D8E:  CALL   0AF
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
0D8F:  MOVLW  D8
0D90:  MOVLB  03
0D91:  MOVWF  11
0D92:  MOVLW  00
0D93:  MOVWF  12
0D94:  BCF    03.0
0D95:  MOVLW  22
0D96:  MOVLB  0C
0D97:  MOVWF  5E
0D98:  MOVLB  00
0D99:  CALL   122
0D9A:  MOVLB  08
0D9B:  MOVF   49,W
0D9C:  MOVLB  0E
0D9D:  MOVWF  4E
0D9E:  MOVLW  37
0D9F:  MOVWF  4F
0DA0:  MOVLB  00
0DA1:  CALL   479
0DA2:  MOVLB  08
0DA3:  MOVF   48,W
0DA4:  MOVLB  0E
0DA5:  MOVWF  4E
0DA6:  MOVLW  37
0DA7:  MOVWF  4F
0DA8:  MOVLB  00
0DA9:  CALL   479
0DAA:  MOVLB  08
0DAB:  MOVF   47,W
0DAC:  MOVLB  0E
0DAD:  MOVWF  4E
0DAE:  MOVLW  37
0DAF:  MOVWF  4F
0DB0:  MOVLB  00
0DB1:  CALL   479
0DB2:  MOVLB  08
0DB3:  MOVF   46,W
0DB4:  MOVLB  0E
0DB5:  MOVWF  4E
0DB6:  MOVLW  37
0DB7:  MOVWF  4F
0DB8:  MOVLB  00
0DB9:  CALL   479
0DBA:  MOVLW  0D
0DBB:  MOVLB  0F
0DBC:  MOVWF  43
0DBD:  MOVLB  00
0DBE:  CALL   0AF
0DBF:  MOVLW  0A
0DC0:  MOVLB  0F
0DC1:  MOVWF  43
0DC2:  MOVLB  00
0DC3:  CALL   0AF
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
0DC4:  MOVLW  ED
0DC5:  MOVLB  03
0DC6:  MOVWF  11
0DC7:  MOVLW  00
0DC8:  MOVWF  12
0DC9:  BCF    03.0
0DCA:  MOVLW  22
0DCB:  MOVLB  0C
0DCC:  MOVWF  5E
0DCD:  MOVLB  00
0DCE:  CALL   122
0DCF:  MOVF   72,W
0DD0:  MOVLB  0E
0DD1:  MOVWF  4E
0DD2:  MOVLW  37
0DD3:  MOVWF  4F
0DD4:  MOVLB  00
0DD5:  CALL   479
0DD6:  MOVLW  0D
0DD7:  MOVLB  0F
0DD8:  MOVWF  43
0DD9:  MOVLB  00
0DDA:  CALL   0AF
0DDB:  MOVLW  0A
0DDC:  MOVLB  0F
0DDD:  MOVWF  43
0DDE:  MOVLB  00
0DDF:  CALL   0AF
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
0DE0:  MOVLW  02
0DE1:  MOVLB  03
0DE2:  MOVWF  11
0DE3:  MOVLW  01
0DE4:  MOVWF  12
0DE5:  BCF    03.0
0DE6:  MOVLW  22
0DE7:  MOVLB  0C
0DE8:  MOVWF  5E
0DE9:  MOVLB  00
0DEA:  CALL   122
0DEB:  MOVLB  08
0DEC:  MOVF   4D,W
0DED:  MOVLB  0E
0DEE:  MOVWF  4E
0DEF:  MOVLW  37
0DF0:  MOVWF  4F
0DF1:  MOVLB  00
0DF2:  CALL   479
0DF3:  MOVLB  08
0DF4:  MOVF   4C,W
0DF5:  MOVLB  0E
0DF6:  MOVWF  4E
0DF7:  MOVLW  37
0DF8:  MOVWF  4F
0DF9:  MOVLB  00
0DFA:  CALL   479
0DFB:  MOVLB  08
0DFC:  MOVF   4B,W
0DFD:  MOVLB  0E
0DFE:  MOVWF  4E
0DFF:  MOVLW  37
0E00:  MOVWF  4F
0E01:  MOVLB  00
0E02:  CALL   479
0E03:  MOVLB  08
0E04:  MOVF   4A,W
0E05:  MOVLB  0E
0E06:  MOVWF  4E
0E07:  MOVLW  37
0E08:  MOVWF  4F
0E09:  MOVLB  00
0E0A:  CALL   479
0E0B:  MOVLW  0D
0E0C:  MOVLB  0F
0E0D:  MOVWF  43
0E0E:  MOVLB  00
0E0F:  CALL   0AF
0E10:  MOVLW  0A
0E11:  MOVLB  0F
0E12:  MOVWF  43
0E13:  MOVLB  00
0E14:  CALL   0AF
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
0E15:  MOVLW  17
0E16:  MOVLB  03
0E17:  MOVWF  11
0E18:  MOVLW  01
0E19:  MOVWF  12
0E1A:  BCF    03.0
0E1B:  MOVLW  22
0E1C:  MOVLB  0C
0E1D:  MOVWF  5E
0E1E:  MOVLB  00
0E1F:  CALL   122
0E20:  MOVLB  08
0E21:  MOVF   51,W
0E22:  MOVLB  0E
0E23:  MOVWF  4E
0E24:  MOVLW  37
0E25:  MOVWF  4F
0E26:  MOVLB  00
0E27:  CALL   479
0E28:  MOVLB  08
0E29:  MOVF   50,W
0E2A:  MOVLB  0E
0E2B:  MOVWF  4E
0E2C:  MOVLW  37
0E2D:  MOVWF  4F
0E2E:  MOVLB  00
0E2F:  CALL   479
0E30:  MOVLB  08
0E31:  MOVF   4F,W
0E32:  MOVLB  0E
0E33:  MOVWF  4E
0E34:  MOVLW  37
0E35:  MOVWF  4F
0E36:  MOVLB  00
0E37:  CALL   479
0E38:  MOVLB  08
0E39:  MOVF   4E,W
0E3A:  MOVLB  0E
0E3B:  MOVWF  4E
0E3C:  MOVLW  37
0E3D:  MOVWF  4F
0E3E:  MOVLB  00
0E3F:  CALL   479
0E40:  MOVLW  0D
0E41:  MOVLB  0F
0E42:  MOVWF  43
0E43:  MOVLB  00
0E44:  CALL   0AF
0E45:  MOVLW  0A
0E46:  MOVLB  0F
0E47:  MOVWF  43
0E48:  MOVLB  00
0E49:  CALL   0AF
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
0E4A:  MOVLW  2C
0E4B:  MOVLB  03
0E4C:  MOVWF  11
0E4D:  MOVLW  01
0E4E:  MOVWF  12
0E4F:  BCF    03.0
0E50:  MOVLW  22
0E51:  MOVLB  0C
0E52:  MOVWF  5E
0E53:  MOVLB  00
0E54:  CALL   122
0E55:  MOVF   73,W
0E56:  MOVLB  0E
0E57:  MOVWF  4E
0E58:  MOVLW  37
0E59:  MOVWF  4F
0E5A:  MOVLB  00
0E5B:  CALL   479
0E5C:  MOVLW  0D
0E5D:  MOVLB  0F
0E5E:  MOVWF  43
0E5F:  MOVLB  00
0E60:  CALL   0AF
0E61:  MOVLW  0A
0E62:  MOVLB  0F
0E63:  MOVWF  43
0E64:  MOVLB  00
0E65:  CALL   0AF
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
0E66:  MOVLW  41
0E67:  MOVLB  03
0E68:  MOVWF  11
0E69:  MOVLW  01
0E6A:  MOVWF  12
0E6B:  BCF    03.0
0E6C:  MOVLW  22
0E6D:  MOVLB  0C
0E6E:  MOVWF  5E
0E6F:  MOVLB  00
0E70:  CALL   122
0E71:  MOVF   74,W
0E72:  MOVLB  0E
0E73:  MOVWF  4E
0E74:  MOVLW  37
0E75:  MOVWF  4F
0E76:  MOVLB  00
0E77:  CALL   479
0E78:  MOVLW  0D
0E79:  MOVLB  0F
0E7A:  MOVWF  43
0E7B:  MOVLB  00
0E7C:  CALL   0AF
0E7D:  MOVLW  0A
0E7E:  MOVLB  0F
0E7F:  MOVWF  43
0E80:  MOVLB  00
0E81:  CALL   0AF
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
0E82:  MOVLW  56
0E83:  MOVLB  03
0E84:  MOVWF  11
0E85:  MOVLW  01
0E86:  MOVWF  12
0E87:  BCF    03.0
0E88:  MOVLW  22
0E89:  MOVLB  0C
0E8A:  MOVWF  5E
0E8B:  MOVLB  00
0E8C:  CALL   122
0E8D:  MOVLB  08
0E8E:  MOVF   55,W
0E8F:  MOVLB  0E
0E90:  MOVWF  4E
0E91:  MOVLW  37
0E92:  MOVWF  4F
0E93:  MOVLB  00
0E94:  CALL   479
0E95:  MOVLB  08
0E96:  MOVF   54,W
0E97:  MOVLB  0E
0E98:  MOVWF  4E
0E99:  MOVLW  37
0E9A:  MOVWF  4F
0E9B:  MOVLB  00
0E9C:  CALL   479
0E9D:  MOVLB  08
0E9E:  MOVF   53,W
0E9F:  MOVLB  0E
0EA0:  MOVWF  4E
0EA1:  MOVLW  37
0EA2:  MOVWF  4F
0EA3:  MOVLB  00
0EA4:  CALL   479
0EA5:  MOVLB  08
0EA6:  MOVF   52,W
0EA7:  MOVLB  0E
0EA8:  MOVWF  4E
0EA9:  MOVLW  37
0EAA:  MOVWF  4F
0EAB:  MOVLB  00
0EAC:  CALL   479
0EAD:  MOVLW  0D
0EAE:  MOVLB  0F
0EAF:  MOVWF  43
0EB0:  MOVLB  00
0EB1:  CALL   0AF
0EB2:  MOVLW  0A
0EB3:  MOVLB  0F
0EB4:  MOVWF  43
0EB5:  MOVLB  00
0EB6:  CALL   0AF
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);  
0EB7:  MOVLW  6B
0EB8:  MOVLB  03
0EB9:  MOVWF  11
0EBA:  MOVLW  01
0EBB:  MOVWF  12
0EBC:  BCF    03.0
0EBD:  MOVLW  22
0EBE:  MOVLB  0C
0EBF:  MOVWF  5E
0EC0:  MOVLB  00
0EC1:  CALL   122
0EC2:  MOVLB  08
0EC3:  MOVF   59,W
0EC4:  MOVLB  0E
0EC5:  MOVWF  4E
0EC6:  MOVLW  37
0EC7:  MOVWF  4F
0EC8:  MOVLB  00
0EC9:  CALL   479
0ECA:  MOVLB  08
0ECB:  MOVF   58,W
0ECC:  MOVLB  0E
0ECD:  MOVWF  4E
0ECE:  MOVLW  37
0ECF:  MOVWF  4F
0ED0:  MOVLB  00
0ED1:  CALL   479
0ED2:  MOVLB  08
0ED3:  MOVF   57,W
0ED4:  MOVLB  0E
0ED5:  MOVWF  4E
0ED6:  MOVLW  37
0ED7:  MOVWF  4F
0ED8:  MOVLB  00
0ED9:  CALL   479
0EDA:  MOVLB  08
0EDB:  MOVF   56,W
0EDC:  MOVLB  0E
0EDD:  MOVWF  4E
0EDE:  MOVLW  37
0EDF:  MOVWF  4F
0EE0:  MOVLB  00
0EE1:  CALL   479
0EE2:  MOVLW  0D
0EE3:  MOVLB  0F
0EE4:  MOVWF  43
0EE5:  MOVLB  00
0EE6:  CALL   0AF
0EE7:  MOVLW  0A
0EE8:  MOVLB  0F
0EE9:  MOVWF  43
0EEA:  MOVLB  00
0EEB:  CALL   0AF
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
0EEC:  MOVLW  80
0EED:  MOVLB  03
0EEE:  MOVWF  11
0EEF:  MOVLW  01
0EF0:  MOVWF  12
0EF1:  BCF    03.0
0EF2:  MOVLW  22
0EF3:  MOVLB  0C
0EF4:  MOVWF  5E
0EF5:  MOVLB  00
0EF6:  CALL   122
0EF7:  MOVF   75,W
0EF8:  MOVLB  0E
0EF9:  MOVWF  4E
0EFA:  MOVLW  37
0EFB:  MOVWF  4F
0EFC:  MOVLB  00
0EFD:  CALL   479
0EFE:  MOVLW  0D
0EFF:  MOVLB  0F
0F00:  MOVWF  43
0F01:  MOVLB  00
0F02:  CALL   0AF
0F03:  MOVLW  0A
0F04:  MOVLB  0F
0F05:  MOVWF  43
0F06:  MOVLB  00
0F07:  CALL   0AF
....................     fprintf(PC, "\tComplete\r\n");
0F08:  MOVLW  95
0F09:  MOVLB  03
0F0A:  MOVWF  11
0F0B:  MOVLW  01
0F0C:  MOVWF  12
0F0D:  MOVLB  00
0F0E:  CALL   0D4
0F0F:  RETURN
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
14AC:  MOVLB  0E
14AD:  CLRF   4D
14AE:  CLRF   4E
14AF:  CLRF   4F
14B0:  CLRF   50
14B1:  CLRF   51
14B2:  CLRF   52
14B3:  CLRF   53
14B4:  CLRF   54
14B5:  CLRF   55
14B6:  CLRF   56
14B7:  CLRF   57
14B8:  CLRF   58
14B9:  CLRF   59
14BA:  CLRF   5A
14BB:  CLRF   5B
14BC:  CLRF   5C
14BD:  CLRF   5D
14BE:  CLRF   5E
14BF:  CLRF   5F
14C0:  CLRF   60
14C1:  CLRF   61
14C2:  CLRF   62
14C3:  CLRF   63
14C4:  CLRF   64
14C5:  CLRF   65
14C6:  CLRF   66
14C7:  CLRF   67
14C8:  CLRF   68
14C9:  CLRF   69
14CA:  CLRF   6A
14CB:  CLRF   6B
14CC:  CLRF   6C
14CD:  CLRF   6D
14CE:  CLRF   6E
14CF:  CLRF   6F
14D0:  MOVLB  0F
14D1:  CLRF   20
14D2:  CLRF   21
14D3:  CLRF   22
14D4:  CLRF   23
14D5:  CLRF   24
14D6:  CLRF   25
14D7:  CLRF   26
14D8:  CLRF   27
14D9:  CLRF   28
14DA:  CLRF   29
14DB:  CLRF   2A
14DC:  CLRF   2B
14DD:  CLRF   2C
14DE:  CLRF   2D
14DF:  CLRF   2E
14E0:  CLRF   2F
14E1:  CLRF   30
14E2:  CLRF   31
14E3:  CLRF   32
14E4:  CLRF   33
14E5:  CLRF   34
14E6:  CLRF   35
14E7:  CLRF   36
14E8:  CLRF   37
14E9:  CLRF   38
14EA:  CLRF   39
14EB:  CLRF   3A
14EC:  CLRF   3B
14ED:  CLRF   3C
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
14EE:  MOVLB  08
14EF:  MOVF   45,W
14F0:  MOVLB  0F
14F1:  MOVWF  3F
14F2:  CLRF   40
14F3:  CLRF   41
14F4:  CLRF   42
14F5:  MOVF   3F,W
14F6:  MOVLB  0E
14F7:  MOVWF  4D
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
14F8:  MOVLB  08
14F9:  MOVF   44,W
14FA:  MOVLB  0F
14FB:  MOVWF  3F
14FC:  MOVLB  08
14FD:  MOVF   45,W
14FE:  MOVLB  0F
14FF:  MOVWF  40
1500:  CLRF   41
1501:  CLRF   42
1502:  MOVF   3F,W
1503:  MOVLB  0E
1504:  MOVWF  4E
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
1505:  MOVLB  08
1506:  MOVF   43,W
1507:  MOVLB  0F
1508:  MOVWF  3F
1509:  MOVLB  08
150A:  MOVF   44,W
150B:  MOVLB  0F
150C:  MOVWF  40
150D:  MOVLB  08
150E:  MOVF   45,W
150F:  MOVLB  0F
1510:  MOVWF  41
1511:  CLRF   42
1512:  MOVF   3F,W
1513:  MOVLB  0E
1514:  MOVWF  4F
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
1515:  MOVLB  08
1516:  MOVF   42,W
1517:  MOVLB  0E
1518:  MOVWF  50
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
1519:  MOVF   71,W
151A:  MOVWF  51
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
151B:  MOVLB  08
151C:  MOVF   49,W
151D:  MOVLB  0F
151E:  MOVWF  3F
151F:  CLRF   40
1520:  CLRF   41
1521:  CLRF   42
1522:  MOVF   3F,W
1523:  MOVLB  0E
1524:  MOVWF  52
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
1525:  MOVLB  08
1526:  MOVF   48,W
1527:  MOVLB  0F
1528:  MOVWF  3F
1529:  MOVLB  08
152A:  MOVF   49,W
152B:  MOVLB  0F
152C:  MOVWF  40
152D:  CLRF   41
152E:  CLRF   42
152F:  MOVF   3F,W
1530:  MOVLB  0E
1531:  MOVWF  53
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
1532:  MOVLB  08
1533:  MOVF   47,W
1534:  MOVLB  0F
1535:  MOVWF  3F
1536:  MOVLB  08
1537:  MOVF   48,W
1538:  MOVLB  0F
1539:  MOVWF  40
153A:  MOVLB  08
153B:  MOVF   49,W
153C:  MOVLB  0F
153D:  MOVWF  41
153E:  CLRF   42
153F:  MOVF   3F,W
1540:  MOVLB  0E
1541:  MOVWF  54
....................     writedata[8] = smf_meas_use_counter & 0xFF;
1542:  MOVLB  08
1543:  MOVF   46,W
1544:  MOVLB  0E
1545:  MOVWF  55
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
1546:  MOVF   72,W
1547:  MOVWF  56
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
1548:  MOVLB  08
1549:  MOVF   4D,W
154A:  MOVLB  0F
154B:  MOVWF  3F
154C:  CLRF   40
154D:  CLRF   41
154E:  CLRF   42
154F:  MOVF   3F,W
1550:  MOVLB  0E
1551:  MOVWF  57
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
1552:  MOVLB  08
1553:  MOVF   4C,W
1554:  MOVLB  0F
1555:  MOVWF  3F
1556:  MOVLB  08
1557:  MOVF   4D,W
1558:  MOVLB  0F
1559:  MOVWF  40
155A:  CLRF   41
155B:  CLRF   42
155C:  MOVF   3F,W
155D:  MOVLB  0E
155E:  MOVWF  58
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
155F:  MOVLB  08
1560:  MOVF   4B,W
1561:  MOVLB  0F
1562:  MOVWF  3F
1563:  MOVLB  08
1564:  MOVF   4C,W
1565:  MOVLB  0F
1566:  MOVWF  40
1567:  MOVLB  08
1568:  MOVF   4D,W
1569:  MOVLB  0F
156A:  MOVWF  41
156B:  CLRF   42
156C:  MOVF   3F,W
156D:  MOVLB  0E
156E:  MOVWF  59
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
156F:  MOVLB  08
1570:  MOVF   4A,W
1571:  MOVLB  0E
1572:  MOVWF  5A
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
1573:  MOVF   73,W
1574:  MOVWF  5B
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
1575:  MOVLB  08
1576:  MOVF   51,W
1577:  MOVLB  0F
1578:  MOVWF  3F
1579:  CLRF   40
157A:  CLRF   41
157B:  CLRF   42
157C:  MOVF   3F,W
157D:  MOVLB  0E
157E:  MOVWF  5C
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
157F:  MOVLB  08
1580:  MOVF   50,W
1581:  MOVLB  0F
1582:  MOVWF  3F
1583:  MOVLB  08
1584:  MOVF   51,W
1585:  MOVLB  0F
1586:  MOVWF  40
1587:  CLRF   41
1588:  CLRF   42
1589:  MOVF   3F,W
158A:  MOVLB  0E
158B:  MOVWF  5D
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
158C:  MOVLB  08
158D:  MOVF   4F,W
158E:  MOVLB  0F
158F:  MOVWF  3F
1590:  MOVLB  08
1591:  MOVF   50,W
1592:  MOVLB  0F
1593:  MOVWF  40
1594:  MOVLB  08
1595:  MOVF   51,W
1596:  MOVLB  0F
1597:  MOVWF  41
1598:  CLRF   42
1599:  MOVF   3F,W
159A:  MOVLB  0E
159B:  MOVWF  5E
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
159C:  MOVLB  08
159D:  MOVF   4E,W
159E:  MOVLB  0E
159F:  MOVWF  5F
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
15A0:  MOVLW  00
15A1:  MOVWF  60
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
15A2:  MOVWF  61
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
15A3:  MOVWF  62
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
15A4:  MOVF   74,W
15A5:  MOVWF  63
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
15A6:  MOVLB  08
15A7:  MOVF   55,W
15A8:  MOVLB  0F
15A9:  MOVWF  3F
15AA:  CLRF   40
15AB:  CLRF   41
15AC:  CLRF   42
15AD:  MOVF   3F,W
15AE:  MOVLB  0E
15AF:  MOVWF  64
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
15B0:  MOVLB  08
15B1:  MOVF   54,W
15B2:  MOVLB  0F
15B3:  MOVWF  3F
15B4:  MOVLB  08
15B5:  MOVF   55,W
15B6:  MOVLB  0F
15B7:  MOVWF  40
15B8:  CLRF   41
15B9:  CLRF   42
15BA:  MOVF   3F,W
15BB:  MOVLB  0E
15BC:  MOVWF  65
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
15BD:  MOVLB  08
15BE:  MOVF   53,W
15BF:  MOVLB  0F
15C0:  MOVWF  3F
15C1:  MOVLB  08
15C2:  MOVF   54,W
15C3:  MOVLB  0F
15C4:  MOVWF  40
15C5:  MOVLB  08
15C6:  MOVF   55,W
15C7:  MOVLB  0F
15C8:  MOVWF  41
15C9:  CLRF   42
15CA:  MOVF   3F,W
15CB:  MOVLB  0E
15CC:  MOVWF  66
....................     writedata[26] = misf_meas_use_counter & 0xFF;
15CD:  MOVLB  08
15CE:  MOVF   52,W
15CF:  MOVLB  0E
15D0:  MOVWF  67
.................... 
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
15D1:  MOVF   75,W
15D2:  MOVWF  68
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
15D3:  MOVLB  08
15D4:  MOVF   59,W
15D5:  MOVLB  0F
15D6:  MOVWF  3F
15D7:  CLRF   40
15D8:  CLRF   41
15D9:  CLRF   42
15DA:  MOVF   3F,W
15DB:  MOVLB  0E
15DC:  MOVWF  69
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
15DD:  MOVLB  08
15DE:  MOVF   58,W
15DF:  MOVLB  0F
15E0:  MOVWF  3F
15E1:  MOVLB  08
15E2:  MOVF   59,W
15E3:  MOVLB  0F
15E4:  MOVWF  40
15E5:  CLRF   41
15E6:  CLRF   42
15E7:  MOVF   3F,W
15E8:  MOVLB  0E
15E9:  MOVWF  6A
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
15EA:  MOVLB  08
15EB:  MOVF   57,W
15EC:  MOVLB  0F
15ED:  MOVWF  3F
15EE:  MOVLB  08
15EF:  MOVF   58,W
15F0:  MOVLB  0F
15F1:  MOVWF  40
15F2:  MOVLB  08
15F3:  MOVF   59,W
15F4:  MOVLB  0F
15F5:  MOVWF  41
15F6:  CLRF   42
15F7:  MOVF   3F,W
15F8:  MOVLB  0E
15F9:  MOVWF  6B
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
15FA:  MOVLB  08
15FB:  MOVF   56,W
15FC:  MOVLB  0E
15FD:  MOVWF  6C
.................... 
....................     if (!is_connect(mis_fm)) {
15FE:  MOVLB  08
15FF:  MOVF   5D,W
1600:  MOVLB  0F
1601:  MOVWF  41
1602:  MOVLB  08
1603:  MOVF   5C,W
1604:  MOVLB  0F
1605:  MOVWF  40
1606:  MOVLB  08
1607:  MOVF   5B,W
1608:  MOVLB  0F
1609:  MOVWF  3F
160A:  MOVLB  08
160B:  MOVF   5A,W
160C:  MOVLB  0F
160D:  MOVWF  3E
160E:  MOVLP  08
160F:  MOVLB  00
1610:  CALL   336
1611:  MOVLP  10
1612:  MOVF   78,F
1613:  BTFSS  03.2
1614:  GOTO   61F
....................         fprintf(PC, "Mission Flash is not connected\r\n");
1615:  MOVLW  9B
1616:  MOVLB  03
1617:  MOVWF  11
1618:  MOVLW  01
1619:  MOVWF  12
161A:  MOVLP  08
161B:  MOVLB  00
161C:  CALL   0D4
161D:  MOVLP  10
....................         return;
161E:  GOTO   652
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
161F:  MOVLB  08
1620:  MOVF   5D,W
1621:  MOVLB  0F
1622:  MOVWF  41
1623:  MOVLB  08
1624:  MOVF   5C,W
1625:  MOVLB  0F
1626:  MOVWF  40
1627:  MOVLB  08
1628:  MOVF   5B,W
1629:  MOVLB  0F
162A:  MOVWF  3F
162B:  MOVLB  08
162C:  MOVF   5A,W
162D:  MOVLB  0F
162E:  MOVWF  3E
162F:  CLRF   45
1630:  CLRF   44
1631:  CLRF   43
1632:  CLRF   42
1633:  MOVLB  00
1634:  CALL   23B
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
1635:  MOVLB  08
1636:  MOVF   5D,W
1637:  MOVLB  0F
1638:  MOVWF  41
1639:  MOVLB  08
163A:  MOVF   5C,W
163B:  MOVLB  0F
163C:  MOVWF  40
163D:  MOVLB  08
163E:  MOVF   5B,W
163F:  MOVLB  0F
1640:  MOVWF  3F
1641:  MOVLB  08
1642:  MOVF   5A,W
1643:  MOVLB  0F
1644:  MOVWF  3E
1645:  CLRF   45
1646:  CLRF   44
1647:  CLRF   43
1648:  CLRF   42
1649:  MOVLW  24
164A:  MOVWF  47
164B:  MOVLW  8D
164C:  MOVWF  46
164D:  CLRF   49
164E:  MOVLW  40
164F:  MOVWF  48
1650:  MOVLB  00
1651:  CALL   0A5
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
13AF:  MOVF   7A,W
13B0:  MOVLB  0E
13B1:  MOVWF  47
13B2:  MOVF   79,W
13B3:  MOVWF  46
13B4:  MOVF   78,W
13B5:  MOVWF  45
13B6:  MOVF   77,W
13B7:  MOVWF  44
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
13B8:  CLRF   4F
13B9:  CLRF   50
13BA:  CLRF   51
13BB:  MOVF   47,W
13BC:  MOVWF  3E
....................     piclog[1] = (time >> 16) & 0xFF;
13BD:  CLRF   50
13BE:  CLRF   51
13BF:  MOVF   46,W
13C0:  MOVWF  3F
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
13C1:  CLRF   51
13C2:  MOVF   45,W
13C3:  MOVWF  40
....................     piclog[3] = time & 0xFF;         // Time low byte
13C4:  MOVF   44,W
13C5:  MOVWF  41
....................     piclog[4] = function;            // Function code
13C6:  MOVF   3C,W
13C7:  MOVWF  42
....................     piclog[5] = parameter;           // Parameter code
13C8:  MOVF   3D,W
13C9:  MOVWF  43
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
13CA:  MOVLW  AC
13CB:  MOVLB  03
13CC:  MOVWF  11
13CD:  MOVLW  01
13CE:  MOVWF  12
13CF:  MOVLP  08
13D0:  MOVLB  00
13D1:  CALL   0D4
13D2:  MOVLP  10
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
13D3:  MOVLB  0E
13D4:  CLRF   48
13D5:  MOVF   48,W
13D6:  SUBLW  05
13D7:  BTFSS  03.0
13D8:  GOTO   3F3
....................             fprintf(PC, "%02X ", piclog[i]);
13D9:  MOVLW  7E
13DA:  ADDWF  48,W
13DB:  MOVWF  04
13DC:  MOVLW  24
13DD:  MOVWF  05
13DE:  BTFSC  03.0
13DF:  INCF   05,F
13E0:  MOVF   00,W
13E1:  MOVWF  4D
13E2:  MOVWF  4E
13E3:  MOVLW  37
13E4:  MOVWF  4F
13E5:  MOVLP  08
13E6:  MOVLB  00
13E7:  CALL   479
13E8:  MOVLP  10
13E9:  MOVLW  20
13EA:  MOVLB  0F
13EB:  MOVWF  43
13EC:  MOVLP  08
13ED:  MOVLB  00
13EE:  CALL   0AF
13EF:  MOVLP  10
13F0:  MOVLB  0E
13F1:  INCF   48,F
13F2:  GOTO   3D5
....................         }
....................         fprintf(PC, "\r\n");
13F3:  MOVLW  0D
13F4:  MOVLB  0F
13F5:  MOVWF  43
13F6:  MOVLP  08
13F7:  MOVLB  00
13F8:  CALL   0AF
13F9:  MOVLP  10
13FA:  MOVLW  0A
13FB:  MOVLB  0F
13FC:  MOVWF  43
13FD:  MOVLP  08
13FE:  MOVLB  00
13FF:  CALL   0AF
1400:  MOVLP  10
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1401:  MOVLB  08
1402:  MOVF   4A,W
1403:  MOVLB  0E
1404:  MOVWF  49
1405:  MOVLB  08
1406:  MOVF   4B,W
1407:  MOVLB  0E
1408:  MOVWF  4A
1409:  MOVLW  02
140A:  MOVLB  08
140B:  ADDWF  4C,W
140C:  MOVLB  0E
140D:  MOVWF  4B
140E:  MOVLW  00
140F:  MOVLB  08
1410:  ADDWFC 4D,W
1411:  MOVLB  0E
1412:  MOVWF  4C
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
1413:  MOVLB  08
1414:  MOVF   5D,W
1415:  MOVLB  0F
1416:  MOVWF  41
1417:  MOVLB  08
1418:  MOVF   5C,W
1419:  MOVLB  0F
141A:  MOVWF  40
141B:  MOVLB  08
141C:  MOVF   5B,W
141D:  MOVLB  0F
141E:  MOVWF  3F
141F:  MOVLB  08
1420:  MOVF   5A,W
1421:  MOVLB  0F
1422:  MOVWF  3E
1423:  MOVLP  08
1424:  MOVLB  00
1425:  CALL   336
1426:  MOVLP  10
1427:  MOVF   78,F
1428:  BTFSS  03.2
1429:  GOTO   434
....................         fprintf(PC, "Mission Flash is not connected\r\n");
142A:  MOVLW  B2
142B:  MOVLB  03
142C:  MOVWF  11
142D:  MOVLW  01
142E:  MOVWF  12
142F:  MOVLP  08
1430:  MOVLB  00
1431:  CALL   0D4
1432:  MOVLP  10
....................         return;
1433:  GOTO   652
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
1434:  MOVLB  08
1435:  MOVF   5D,W
1436:  MOVLB  0F
1437:  MOVWF  41
1438:  MOVLB  08
1439:  MOVF   5C,W
143A:  MOVLB  0F
143B:  MOVWF  40
143C:  MOVLB  08
143D:  MOVF   5B,W
143E:  MOVLB  0F
143F:  MOVWF  3F
1440:  MOVLB  08
1441:  MOVF   5A,W
1442:  MOVLB  0F
1443:  MOVWF  3E
1444:  MOVLB  0E
1445:  MOVF   4C,W
1446:  MOVLB  0F
1447:  MOVWF  45
1448:  MOVLB  0E
1449:  MOVF   4B,W
144A:  MOVLB  0F
144B:  MOVWF  44
144C:  MOVLB  0E
144D:  MOVF   4A,W
144E:  MOVLB  0F
144F:  MOVWF  43
1450:  MOVLB  0E
1451:  MOVF   49,W
1452:  MOVLB  0F
1453:  MOVWF  42
1454:  MOVLW  24
1455:  MOVWF  47
1456:  MOVLW  7E
1457:  MOVWF  46
1458:  CLRF   49
1459:  MOVLW  06
145A:  MOVWF  48
145B:  MOVLB  00
145C:  CALL   0A5
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
145D:  MOVLW  06
145E:  MOVLB  08
145F:  ADDWF  4A,F
1460:  MOVLW  00
1461:  ADDWFC 4B,F
1462:  ADDWFC 4C,F
1463:  ADDWFC 4D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
1464:  MOVLW  06
1465:  ADDWF  4E,F
1466:  MOVLW  00
1467:  ADDWFC 4F,F
1468:  ADDWFC 50,F
1469:  ADDWFC 51,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
146A:  MOVLW  06
146B:  ADDWF  74,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
146C:  ADDWF  74,W
146D:  SUBLW  3F
146E:  BTFSC  03.0
146F:  GOTO   4AC
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1470:  MOVF   4A,W
1471:  MOVLB  0E
1472:  MOVWF  49
1473:  MOVLB  08
1474:  MOVF   4B,W
1475:  MOVLB  0E
1476:  MOVWF  4A
1477:  MOVLW  02
1478:  MOVLB  08
1479:  ADDWF  4C,W
147A:  MOVLB  0E
147B:  MOVWF  4B
147C:  MOVLW  00
147D:  MOVLB  08
147E:  ADDWFC 4D,W
147F:  MOVLB  0E
1480:  MOVWF  4C
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
1481:  MOVLB  08
1482:  MOVF   5D,W
1483:  MOVLB  0F
1484:  MOVWF  41
1485:  MOVLB  08
1486:  MOVF   5C,W
1487:  MOVLB  0F
1488:  MOVWF  40
1489:  MOVLB  08
148A:  MOVF   5B,W
148B:  MOVLB  0F
148C:  MOVWF  3F
148D:  MOVLB  08
148E:  MOVF   5A,W
148F:  MOVLB  0F
1490:  MOVWF  3E
1491:  MOVLB  0E
1492:  MOVF   4C,W
1493:  MOVLB  0F
1494:  MOVWF  45
1495:  MOVLB  0E
1496:  MOVF   4B,W
1497:  MOVLB  0F
1498:  MOVWF  44
1499:  MOVLB  0E
149A:  MOVF   4A,W
149B:  MOVLB  0F
149C:  MOVWF  43
149D:  MOVLB  0E
149E:  MOVF   49,W
149F:  MOVLB  0F
14A0:  MOVWF  42
14A1:  MOVLW  22
14A2:  MOVWF  47
14A3:  MOVLW  9E
14A4:  MOVWF  46
14A5:  CLRF   49
14A6:  MOVLW  06
14A7:  MOVWF  48
14A8:  MOVLB  00
14A9:  CALL   0A5
....................         misf_piclog_write_counter = 0;
14AA:  CLRF   74
14AB:  MOVLB  08
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
*
1652:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... 
.................... //#define AD7490_DEBUG
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     //output_low(ADC_CS); // Set CS pin low to select the ADC
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
*
1783:  MOVLB  04
1784:  BCF    15.5
1785:  MOVLW  40
1786:  MOVWF  14
1787:  MOVLW  FF
1788:  MOVWF  12
1789:  MOVLW  3A
178A:  MOVWF  15
178B:  MOVLB  0B
178C:  MOVF   2B,W
178D:  MOVWF  38
178E:  MOVF   2A,W
178F:  MOVWF  37
1790:  MOVLB  00
1791:  CALL   764
....................     //output_high(ADC_CS); // Set CS pin high to end communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] << %04LX\r\n", channel);
....................     #endif
....................     //output_high(ADC_CS); // Set CS pin high to end communication
....................     //delay_us(10); // Wait for the ADC to process the command
....................     //output_low(ADC_CS); // Set CS pin low to select the ADC again
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
1792:  MOVLB  04
1793:  BCF    15.5
1794:  MOVLW  40
1795:  MOVWF  14
1796:  MOVLW  FF
1797:  MOVWF  12
1798:  MOVLW  3A
1799:  MOVWF  15
179A:  MOVLB  0B
179B:  CLRF   38
179C:  MOVLW  03
179D:  MOVWF  37
179E:  MOVLB  00
179F:  CALL   764
17A0:  MOVF   78,W
17A1:  MOVLB  0B
17A2:  MOVWF  2D
17A3:  MOVF   77,W
17A4:  MOVWF  2C
....................     //output_high(ADC_CS); // Set CS pin low to select the ADC again
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
17A5:  MOVF   2C,W
17A6:  MOVWF  77
17A7:  MOVF   2D,W
17A8:  ANDLW  0F
17A9:  MOVWF  7A
17AA:  MOVF   2C,W
17AB:  MOVWF  78
17AC:  MOVF   7A,W
17AD:  MOVWF  79
17AE:  MOVLB  00
17AF:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
09EE:  MOVLW  C3
09EF:  MOVLB  03
09F0:  MOVWF  11
09F1:  MOVLW  01
09F2:  MOVWF  12
09F3:  MOVLB  00
09F4:  CALL   0D4
....................     // Set default register values
....................     reg.fields.coding = 1; // 1: Two's complement, 0: Binary
09F5:  MOVLB  08
09F6:  BSF    63.4
....................     reg.fields.write = 1;
09F7:  BSF    64.0
....................     reg.fields.seq = 0; 
09F8:  BCF    64.1
....................     reg.fields.range = 1;
09F9:  BSF    63.5
....................     reg.fields.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
09FA:  BCF    63.6
....................     reg.fields.shadow = 0; // 1: Shadow register, 0: Direct access
09FB:  BCF    63.7
....................     coding = 1;
09FC:  MOVLW  01
09FD:  MOVWF  76
....................     write = 1;
09FE:  MOVWF  7B
....................     seq = 0;
09FF:  CLRF   7C
....................     range = 1;
0A00:  MOVWF  7D
....................     weak_tri = 0;
0A01:  CLRF   7E
....................     shadow = 0;
0A02:  CLRF   62
....................     fprintf(PC, "\tComplete\r\n");
0A03:  MOVLW  CD
0A04:  MOVLB  03
0A05:  MOVWF  11
0A06:  MOVLW  01
0A07:  MOVWF  12
0A08:  MOVLB  00
0A09:  CALL   0D4
0A0A:  MOVLP  38
0A0B:  GOTO   516 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
.................... {   
....................     //AD7490_RESISTOR reg;
....................         reg.fields.coding = 1; // 1: Two's complement, 0: Binary
*
2873:  MOVLB  08
2874:  BSF    63.4
....................     reg.fields.write = 1;
2875:  BSF    64.0
....................     reg.fields.seq = 0; 
2876:  BCF    64.1
....................     reg.fields.range = 1;
2877:  BSF    63.5
....................     reg.fields.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
2878:  BCF    63.6
....................     reg.fields.shadow = 0; // 1: Shadow register, 0: Direct access
2879:  BCF    63.7
....................     set_add(channel);
287A:  MOVLB  0B
287B:  MOVF   30,W
287C:  MOVWF  37
....................     set_pm(AD7490_PM_AUTO_STANDBY); // Set power mode to normal
*
28A8:  MOVLW  03
28A9:  MOVLB  0B
28AA:  MOVWF  37
.................... 
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
*
28BB:  MOVLB  0B
28BC:  MOVF   30,W
28BD:  MOVWF  37
*
2B92:  MOVF   79,W
2B93:  MOVWF  32
2B94:  MOVF   78,W
2B95:  MOVWF  31
....................     
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
2B96:  MOVLB  01
2B97:  BCF    0F.2
2B98:  MOVLB  02
2B99:  BCF    0F.2
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
2B9A:  MOVLB  04
2B9B:  BCF    15.5
2B9C:  MOVLW  40
2B9D:  MOVWF  14
2B9E:  MOVLW  FF
2B9F:  MOVWF  12
2BA0:  MOVLW  3A
2BA1:  MOVWF  15
2BA2:  MOVLB  0B
2BA3:  MOVF   32,W
2BA4:  MOVWF  38
2BA5:  MOVF   31,W
2BA6:  MOVWF  37
2BA7:  MOVLP  10
2BA8:  MOVLB  00
2BA9:  CALL   764
2BAA:  MOVLP  28
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC, "AD7490 Read Channel: %d\r\n", channel);
....................         fprintf(PC,"\t[ADC] << %04LX\r\n", reg.value);
....................     #endif
....................     output_high(ADC_CS); // Set CS pin high to end communication
2BAB:  MOVLB  01
2BAC:  BCF    0F.2
2BAD:  MOVLB  02
2BAE:  BSF    0F.2
....................     delay_us(10); // Wait for the ADC to process the command
2BAF:  MOVLW  0D
2BB0:  MOVWF  77
2BB1:  DECFSZ 77,F
2BB2:  GOTO   3B1
....................     output_low(ADC_CS); // Set CS pin low to select the ADC again
2BB3:  MOVLB  01
2BB4:  BCF    0F.2
2BB5:  MOVLB  02
2BB6:  BCF    0F.2
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
2BB7:  MOVLB  04
2BB8:  BCF    15.5
2BB9:  MOVLW  40
2BBA:  MOVWF  14
2BBB:  MOVLW  FF
2BBC:  MOVWF  12
2BBD:  MOVLW  3A
2BBE:  MOVWF  15
2BBF:  MOVLB  0B
2BC0:  CLRF   38
2BC1:  MOVLW  03
2BC2:  MOVWF  37
2BC3:  MOVLP  10
2BC4:  MOVLB  00
2BC5:  CALL   764
2BC6:  MOVLP  28
2BC7:  MOVF   78,W
2BC8:  MOVLB  0B
2BC9:  MOVWF  34
2BCA:  MOVF   77,W
2BCB:  MOVWF  33
....................     output_high(ADC_CS); // Set CS pin high to end communication
2BCC:  MOVLB  01
2BCD:  BCF    0F.2
2BCE:  MOVLB  02
2BCF:  BSF    0F.2
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
2BD0:  MOVLB  0B
2BD1:  MOVF   33,W
2BD2:  MOVWF  35
2BD3:  MOVF   34,W
2BD4:  ANDLW  0F
2BD5:  MOVWF  36
....................     //unsigned int16 readdata = 0;
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
2BD6:  MOVF   35,W
2BD7:  MOVWF  78
2BD8:  MOVF   36,W
2BD9:  MOVWF  79
2BDA:  MOVLB  00
2BDB:  RETURN
.................... }
.................... 
.................... void set_add(int8 channel)
.................... {
....................     reg.fields.add0 = (channel >> 0) & 0x1;
*
287D:  MOVF   37,W
287E:  ANDLW  01
287F:  MOVWF  78
2880:  MOVLB  08
2881:  BCF    64.5
2882:  BTFSC  78.0
2883:  BSF    64.5
....................     reg.fields.add1 = (channel >> 1) & 0x1;
2884:  BCF    03.0
2885:  MOVLB  0B
2886:  RRF    37,W
2887:  ANDLW  01
2888:  MOVWF  78
2889:  MOVLB  08
288A:  BCF    64.4
288B:  BTFSC  78.0
288C:  BSF    64.4
....................     reg.fields.add2 = (channel >> 2) & 0x1;
288D:  MOVLB  0B
288E:  RRF    37,W
288F:  MOVWF  77
2890:  RRF    77,F
2891:  MOVLW  3F
2892:  ANDWF  77,F
2893:  MOVF   77,W
2894:  ANDLW  01
2895:  MOVWF  78
2896:  MOVLB  08
2897:  BCF    64.3
2898:  BTFSC  78.0
2899:  BSF    64.3
....................     reg.fields.add3 = (channel >> 3) & 0x1;
289A:  MOVLB  0B
289B:  RRF    37,W
289C:  MOVWF  77
289D:  RRF    77,F
289E:  RRF    77,F
289F:  MOVLW  1F
28A0:  ANDWF  77,F
28A1:  MOVF   77,W
28A2:  ANDLW  01
28A3:  MOVWF  78
28A4:  MOVLB  08
28A5:  BCF    64.2
28A6:  BTFSC  78.0
28A7:  BSF    64.2
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.fields.pm0 = (powermode >> 0) & 0x1;
*
28AB:  MOVF   37,W
28AC:  ANDLW  01
28AD:  MOVWF  78
28AE:  MOVLB  08
28AF:  BCF    64.7
28B0:  BTFSC  78.0
28B1:  BSF    64.7
....................     reg.fields.pm1 = (powermode >> 1) & 0x1;
28B2:  BCF    03.0
28B3:  MOVLB  0B
28B4:  RRF    37,W
28B5:  ANDLW  01
28B6:  MOVWF  78
28B7:  MOVLB  08
28B8:  BCF    64.6
28B9:  BTFSC  78.0
28BA:  BSF    64.6
....................     
.................... }
.................... 
.................... void set_blank()
.................... {
....................     reg.fields.blank0 = 0;
....................     reg.fields.blank1 = 0;
....................     reg.fields.blank2 = 0;
....................     reg.fields.blank3 = 0;
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
*
28BE:  CLRF   39
28BF:  CLRF   38
.................... {
....................     unsigned int16 cmd = 0x0000;
.................... 
....................     // WRITE (Bit11)
....................     cmd |= (write & 0x01) << 11;
28C0:  MOVF   7B,W
28C1:  ANDLW  01
28C2:  MOVLW  00
28C3:  IORWF  38,F
....................     fprintf(PC, "\tWRITE : %d (%04LX)\r\n", write, cmd);
28C4:  MOVLW  D3
28C5:  MOVLB  03
28C6:  MOVWF  11
28C7:  MOVLW  01
28C8:  MOVWF  12
28C9:  BCF    03.0
28CA:  MOVLW  09
28CB:  MOVLB  0C
28CC:  MOVWF  5E
28CD:  MOVLP  08
28CE:  MOVLB  00
28CF:  CALL   122
28D0:  MOVLP  28
28D1:  MOVF   7B,W
28D2:  MOVLB  0C
28D3:  MOVWF  5B
28D4:  MOVLW  18
28D5:  MOVWF  5C
28D6:  MOVLB  00
28D7:  CALL   000
28D8:  MOVLW  20
28D9:  MOVLB  0F
28DA:  MOVWF  43
28DB:  MOVLP  08
28DC:  MOVLB  00
28DD:  CALL   0AF
28DE:  MOVLP  28
28DF:  MOVLW  28
28E0:  MOVLB  0F
28E1:  MOVWF  43
28E2:  MOVLP  08
28E3:  MOVLB  00
28E4:  CALL   0AF
28E5:  MOVLP  28
28E6:  MOVLB  0B
28E7:  MOVF   39,W
28E8:  MOVLB  0E
28E9:  MOVWF  4E
28EA:  MOVLW  37
28EB:  MOVWF  4F
28EC:  MOVLP  08
28ED:  MOVLB  00
28EE:  CALL   479
28EF:  MOVLP  28
28F0:  MOVLB  0B
28F1:  MOVF   38,W
28F2:  MOVLB  0E
28F3:  MOVWF  4E
28F4:  MOVLW  37
28F5:  MOVWF  4F
28F6:  MOVLP  08
28F7:  MOVLB  00
28F8:  CALL   479
28F9:  MOVLP  28
28FA:  MOVLW  29
28FB:  MOVLB  0F
28FC:  MOVWF  43
28FD:  MOVLP  08
28FE:  MOVLB  00
28FF:  CALL   0AF
2900:  MOVLP  28
2901:  MOVLW  0D
2902:  MOVLB  0F
2903:  MOVWF  43
2904:  MOVLP  08
2905:  MOVLB  00
2906:  CALL   0AF
2907:  MOVLP  28
2908:  MOVLW  0A
2909:  MOVLB  0F
290A:  MOVWF  43
290B:  MOVLP  08
290C:  MOVLB  00
290D:  CALL   0AF
290E:  MOVLP  28
.................... 
....................     // SEQ (Bit10)
....................     cmd |= (seq & 0x01) << 10;
290F:  MOVF   7C,W
2910:  ANDLW  01
2911:  MOVLW  00
2912:  MOVLB  0B
2913:  IORWF  38,F
....................     fprintf(PC, "\tSEQ   : %d (%04LX)\r\n", seq, cmd);
2914:  MOVLW  DE
2915:  MOVLB  03
2916:  MOVWF  11
2917:  MOVLW  01
2918:  MOVWF  12
2919:  BCF    03.0
291A:  MOVLW  09
291B:  MOVLB  0C
291C:  MOVWF  5E
291D:  MOVLP  08
291E:  MOVLB  00
291F:  CALL   122
2920:  MOVLP  28
2921:  MOVF   7C,W
2922:  MOVLB  0C
2923:  MOVWF  5B
2924:  MOVLW  18
2925:  MOVWF  5C
2926:  MOVLB  00
2927:  CALL   000
2928:  MOVLW  20
2929:  MOVLB  0F
292A:  MOVWF  43
292B:  MOVLP  08
292C:  MOVLB  00
292D:  CALL   0AF
292E:  MOVLP  28
292F:  MOVLW  28
2930:  MOVLB  0F
2931:  MOVWF  43
2932:  MOVLP  08
2933:  MOVLB  00
2934:  CALL   0AF
2935:  MOVLP  28
2936:  MOVLB  0B
2937:  MOVF   39,W
2938:  MOVLB  0E
2939:  MOVWF  4E
293A:  MOVLW  37
293B:  MOVWF  4F
293C:  MOVLP  08
293D:  MOVLB  00
293E:  CALL   479
293F:  MOVLP  28
2940:  MOVLB  0B
2941:  MOVF   38,W
2942:  MOVLB  0E
2943:  MOVWF  4E
2944:  MOVLW  37
2945:  MOVWF  4F
2946:  MOVLP  08
2947:  MOVLB  00
2948:  CALL   479
2949:  MOVLP  28
294A:  MOVLW  29
294B:  MOVLB  0F
294C:  MOVWF  43
294D:  MOVLP  08
294E:  MOVLB  00
294F:  CALL   0AF
2950:  MOVLP  28
2951:  MOVLW  0D
2952:  MOVLB  0F
2953:  MOVWF  43
2954:  MOVLP  08
2955:  MOVLB  00
2956:  CALL   0AF
2957:  MOVLP  28
2958:  MOVLW  0A
2959:  MOVLB  0F
295A:  MOVWF  43
295B:  MOVLP  08
295C:  MOVLB  00
295D:  CALL   0AF
295E:  MOVLP  28
.................... 
....................     // ADDR (Bit9-6)
....................     cmd |= (channel & 0x0F) << 6;
295F:  MOVLB  0B
2960:  MOVF   37,W
2961:  ANDLW  0F
2962:  MOVWF  77
2963:  SWAPF  77,F
2964:  RLF    77,F
2965:  RLF    77,F
2966:  MOVLW  C0
2967:  ANDWF  77,F
2968:  MOVF   77,W
2969:  IORWF  38,F
....................     fprintf(PC, "\tADDR  : %d (%04LX)\r\n", channel, cmd);
296A:  MOVLW  E9
296B:  MOVLB  03
296C:  MOVWF  11
296D:  MOVLW  01
296E:  MOVWF  12
296F:  BCF    03.0
2970:  MOVLW  09
2971:  MOVLB  0C
2972:  MOVWF  5E
2973:  MOVLP  08
2974:  MOVLB  00
2975:  CALL   122
2976:  MOVLP  28
2977:  MOVLB  0B
2978:  MOVF   37,W
2979:  MOVLB  0C
297A:  MOVWF  5B
297B:  MOVLW  18
297C:  MOVWF  5C
297D:  MOVLB  00
297E:  CALL   000
297F:  MOVLW  20
2980:  MOVLB  0F
2981:  MOVWF  43
2982:  MOVLP  08
2983:  MOVLB  00
2984:  CALL   0AF
2985:  MOVLP  28
2986:  MOVLW  28
2987:  MOVLB  0F
2988:  MOVWF  43
2989:  MOVLP  08
298A:  MOVLB  00
298B:  CALL   0AF
298C:  MOVLP  28
298D:  MOVLB  0B
298E:  MOVF   39,W
298F:  MOVLB  0E
2990:  MOVWF  4E
2991:  MOVLW  37
2992:  MOVWF  4F
2993:  MOVLP  08
2994:  MOVLB  00
2995:  CALL   479
2996:  MOVLP  28
2997:  MOVLB  0B
2998:  MOVF   38,W
2999:  MOVLB  0E
299A:  MOVWF  4E
299B:  MOVLW  37
299C:  MOVWF  4F
299D:  MOVLP  08
299E:  MOVLB  00
299F:  CALL   479
29A0:  MOVLP  28
29A1:  MOVLW  29
29A2:  MOVLB  0F
29A3:  MOVWF  43
29A4:  MOVLP  08
29A5:  MOVLB  00
29A6:  CALL   0AF
29A7:  MOVLP  28
29A8:  MOVLW  0D
29A9:  MOVLB  0F
29AA:  MOVWF  43
29AB:  MOVLP  08
29AC:  MOVLB  00
29AD:  CALL   0AF
29AE:  MOVLP  28
29AF:  MOVLW  0A
29B0:  MOVLB  0F
29B1:  MOVWF  43
29B2:  MOVLP  08
29B3:  MOVLB  00
29B4:  CALL   0AF
29B5:  MOVLP  28
.................... 
....................     // PM1/PM0 (Bit5-4)
....................     cmd |= (AD7490_PM_AUTO_STANDBY & 0x03) << 4;
29B6:  MOVLW  30
29B7:  MOVLB  0B
29B8:  IORWF  38,F
....................     fprintf(PC, "\tPM     : %d (%04LX)\r\n", AD7490_PM_AUTO_STANDBY, cmd);
29B9:  MOVLW  F4
29BA:  MOVLB  03
29BB:  MOVWF  11
29BC:  MOVLW  01
29BD:  MOVWF  12
29BE:  BCF    03.0
29BF:  MOVLW  0A
29C0:  MOVLB  0C
29C1:  MOVWF  5E
29C2:  MOVLP  08
29C3:  MOVLB  00
29C4:  CALL   122
29C5:  MOVLP  28
29C6:  MOVLW  03
29C7:  MOVLB  0C
29C8:  MOVWF  5B
29C9:  MOVLW  18
29CA:  MOVWF  5C
29CB:  MOVLB  00
29CC:  CALL   000
29CD:  MOVLW  20
29CE:  MOVLB  0F
29CF:  MOVWF  43
29D0:  MOVLP  08
29D1:  MOVLB  00
29D2:  CALL   0AF
29D3:  MOVLP  28
29D4:  MOVLW  28
29D5:  MOVLB  0F
29D6:  MOVWF  43
29D7:  MOVLP  08
29D8:  MOVLB  00
29D9:  CALL   0AF
29DA:  MOVLP  28
29DB:  MOVLB  0B
29DC:  MOVF   39,W
29DD:  MOVLB  0E
29DE:  MOVWF  4E
29DF:  MOVLW  37
29E0:  MOVWF  4F
29E1:  MOVLP  08
29E2:  MOVLB  00
29E3:  CALL   479
29E4:  MOVLP  28
29E5:  MOVLB  0B
29E6:  MOVF   38,W
29E7:  MOVLB  0E
29E8:  MOVWF  4E
29E9:  MOVLW  37
29EA:  MOVWF  4F
29EB:  MOVLP  08
29EC:  MOVLB  00
29ED:  CALL   479
29EE:  MOVLP  28
29EF:  MOVLW  29
29F0:  MOVLB  0F
29F1:  MOVWF  43
29F2:  MOVLP  08
29F3:  MOVLB  00
29F4:  CALL   0AF
29F5:  MOVLP  28
29F6:  MOVLW  0D
29F7:  MOVLB  0F
29F8:  MOVWF  43
29F9:  MOVLP  08
29FA:  MOVLB  00
29FB:  CALL   0AF
29FC:  MOVLP  28
29FD:  MOVLW  0A
29FE:  MOVLB  0F
29FF:  MOVWF  43
2A00:  MOVLP  08
2A01:  MOVLB  00
2A02:  CALL   0AF
2A03:  MOVLP  28
.................... 
....................     // SHADOW (Bit3)
....................     cmd |= (shadow & 0x01) << 3;
2A04:  MOVLB  08
2A05:  MOVF   62,W
2A06:  ANDLW  01
2A07:  MOVWF  77
2A08:  RLF    77,F
2A09:  RLF    77,F
2A0A:  RLF    77,F
2A0B:  MOVLW  F8
2A0C:  ANDWF  77,F
2A0D:  MOVF   77,W
2A0E:  MOVLB  0B
2A0F:  IORWF  38,F
....................     fprintf(PC, "\tSHADOW : %d (%04LX)\r\n", shadow, cmd);
2A10:  MOVLW  00
2A11:  MOVLB  03
2A12:  MOVWF  11
2A13:  MOVLW  02
2A14:  MOVWF  12
2A15:  BCF    03.0
2A16:  MOVLW  0A
2A17:  MOVLB  0C
2A18:  MOVWF  5E
2A19:  MOVLP  08
2A1A:  MOVLB  00
2A1B:  CALL   122
2A1C:  MOVLP  28
2A1D:  MOVLB  08
2A1E:  MOVF   62,W
2A1F:  MOVLB  0C
2A20:  MOVWF  5B
2A21:  MOVLW  18
2A22:  MOVWF  5C
2A23:  MOVLB  00
2A24:  CALL   000
2A25:  MOVLW  20
2A26:  MOVLB  0F
2A27:  MOVWF  43
2A28:  MOVLP  08
2A29:  MOVLB  00
2A2A:  CALL   0AF
2A2B:  MOVLP  28
2A2C:  MOVLW  28
2A2D:  MOVLB  0F
2A2E:  MOVWF  43
2A2F:  MOVLP  08
2A30:  MOVLB  00
2A31:  CALL   0AF
2A32:  MOVLP  28
2A33:  MOVLB  0B
2A34:  MOVF   39,W
2A35:  MOVLB  0E
2A36:  MOVWF  4E
2A37:  MOVLW  37
2A38:  MOVWF  4F
2A39:  MOVLP  08
2A3A:  MOVLB  00
2A3B:  CALL   479
2A3C:  MOVLP  28
2A3D:  MOVLB  0B
2A3E:  MOVF   38,W
2A3F:  MOVLB  0E
2A40:  MOVWF  4E
2A41:  MOVLW  37
2A42:  MOVWF  4F
2A43:  MOVLP  08
2A44:  MOVLB  00
2A45:  CALL   479
2A46:  MOVLP  28
2A47:  MOVLW  29
2A48:  MOVLB  0F
2A49:  MOVWF  43
2A4A:  MOVLP  08
2A4B:  MOVLB  00
2A4C:  CALL   0AF
2A4D:  MOVLP  28
2A4E:  MOVLW  0D
2A4F:  MOVLB  0F
2A50:  MOVWF  43
2A51:  MOVLP  08
2A52:  MOVLB  00
2A53:  CALL   0AF
2A54:  MOVLP  28
2A55:  MOVLW  0A
2A56:  MOVLB  0F
2A57:  MOVWF  43
2A58:  MOVLP  08
2A59:  MOVLB  00
2A5A:  CALL   0AF
2A5B:  MOVLP  28
.................... 
....................     // WEAK/TRI (Bit2)
....................     cmd |= (weak_tri & 0x01) << 2;
2A5C:  MOVF   7E,W
2A5D:  ANDLW  01
2A5E:  MOVWF  77
2A5F:  RLF    77,F
2A60:  RLF    77,F
2A61:  MOVLW  FC
2A62:  ANDWF  77,F
2A63:  MOVF   77,W
2A64:  MOVLB  0B
2A65:  IORWF  38,F
....................     fprintf(PC, "\tWEAK/TRI : %d (%04LX)\r\n", weak_tri, cmd);
2A66:  MOVLW  0C
2A67:  MOVLB  03
2A68:  MOVWF  11
2A69:  MOVLW  02
2A6A:  MOVWF  12
2A6B:  BCF    03.0
2A6C:  MOVLW  0C
2A6D:  MOVLB  0C
2A6E:  MOVWF  5E
2A6F:  MOVLP  08
2A70:  MOVLB  00
2A71:  CALL   122
2A72:  MOVLP  28
2A73:  MOVF   7E,W
2A74:  MOVLB  0C
2A75:  MOVWF  5B
2A76:  MOVLW  18
2A77:  MOVWF  5C
2A78:  MOVLB  00
2A79:  CALL   000
2A7A:  MOVLW  20
2A7B:  MOVLB  0F
2A7C:  MOVWF  43
2A7D:  MOVLP  08
2A7E:  MOVLB  00
2A7F:  CALL   0AF
2A80:  MOVLP  28
2A81:  MOVLW  28
2A82:  MOVLB  0F
2A83:  MOVWF  43
2A84:  MOVLP  08
2A85:  MOVLB  00
2A86:  CALL   0AF
2A87:  MOVLP  28
2A88:  MOVLB  0B
2A89:  MOVF   39,W
2A8A:  MOVLB  0E
2A8B:  MOVWF  4E
2A8C:  MOVLW  37
2A8D:  MOVWF  4F
2A8E:  MOVLP  08
2A8F:  MOVLB  00
2A90:  CALL   479
2A91:  MOVLP  28
2A92:  MOVLB  0B
2A93:  MOVF   38,W
2A94:  MOVLB  0E
2A95:  MOVWF  4E
2A96:  MOVLW  37
2A97:  MOVWF  4F
2A98:  MOVLP  08
2A99:  MOVLB  00
2A9A:  CALL   479
2A9B:  MOVLP  28
2A9C:  MOVLW  29
2A9D:  MOVLB  0F
2A9E:  MOVWF  43
2A9F:  MOVLP  08
2AA0:  MOVLB  00
2AA1:  CALL   0AF
2AA2:  MOVLP  28
2AA3:  MOVLW  0D
2AA4:  MOVLB  0F
2AA5:  MOVWF  43
2AA6:  MOVLP  08
2AA7:  MOVLB  00
2AA8:  CALL   0AF
2AA9:  MOVLP  28
2AAA:  MOVLW  0A
2AAB:  MOVLB  0F
2AAC:  MOVWF  43
2AAD:  MOVLP  08
2AAE:  MOVLB  00
2AAF:  CALL   0AF
2AB0:  MOVLP  28
.................... 
....................     // RANGE (Bit1)
....................     cmd |= (range & 0x01) << 1;
2AB1:  MOVF   7D,W
2AB2:  ANDLW  01
2AB3:  MOVWF  77
2AB4:  BCF    03.0
2AB5:  RLF    77,F
2AB6:  MOVF   77,W
2AB7:  MOVLB  0B
2AB8:  IORWF  38,F
....................     fprintf(PC, "\tRANGE  : %d (%04LX)\r\n", range, cmd);
2AB9:  MOVLW  19
2ABA:  MOVLB  03
2ABB:  MOVWF  11
2ABC:  MOVLW  02
2ABD:  MOVWF  12
2ABE:  BCF    03.0
2ABF:  MOVLW  0A
2AC0:  MOVLB  0C
2AC1:  MOVWF  5E
2AC2:  MOVLP  08
2AC3:  MOVLB  00
2AC4:  CALL   122
2AC5:  MOVLP  28
2AC6:  MOVF   7D,W
2AC7:  MOVLB  0C
2AC8:  MOVWF  5B
2AC9:  MOVLW  18
2ACA:  MOVWF  5C
2ACB:  MOVLB  00
2ACC:  CALL   000
2ACD:  MOVLW  20
2ACE:  MOVLB  0F
2ACF:  MOVWF  43
2AD0:  MOVLP  08
2AD1:  MOVLB  00
2AD2:  CALL   0AF
2AD3:  MOVLP  28
2AD4:  MOVLW  28
2AD5:  MOVLB  0F
2AD6:  MOVWF  43
2AD7:  MOVLP  08
2AD8:  MOVLB  00
2AD9:  CALL   0AF
2ADA:  MOVLP  28
2ADB:  MOVLB  0B
2ADC:  MOVF   39,W
2ADD:  MOVLB  0E
2ADE:  MOVWF  4E
2ADF:  MOVLW  37
2AE0:  MOVWF  4F
2AE1:  MOVLP  08
2AE2:  MOVLB  00
2AE3:  CALL   479
2AE4:  MOVLP  28
2AE5:  MOVLB  0B
2AE6:  MOVF   38,W
2AE7:  MOVLB  0E
2AE8:  MOVWF  4E
2AE9:  MOVLW  37
2AEA:  MOVWF  4F
2AEB:  MOVLP  08
2AEC:  MOVLB  00
2AED:  CALL   479
2AEE:  MOVLP  28
2AEF:  MOVLW  29
2AF0:  MOVLB  0F
2AF1:  MOVWF  43
2AF2:  MOVLP  08
2AF3:  MOVLB  00
2AF4:  CALL   0AF
2AF5:  MOVLP  28
2AF6:  MOVLW  0D
2AF7:  MOVLB  0F
2AF8:  MOVWF  43
2AF9:  MOVLP  08
2AFA:  MOVLB  00
2AFB:  CALL   0AF
2AFC:  MOVLP  28
2AFD:  MOVLW  0A
2AFE:  MOVLB  0F
2AFF:  MOVWF  43
2B00:  MOVLP  08
2B01:  MOVLB  00
2B02:  CALL   0AF
2B03:  MOVLP  28
.................... 
....................     // CODING (Bit0)
....................     cmd |= (coding & 0x01) << 0;
2B04:  MOVF   76,W
2B05:  ANDLW  01
2B06:  MOVLB  0B
2B07:  IORWF  38,F
....................     fprintf(PC, "\tCODING : %d (%04LX)\r\n", coding, cmd);
2B08:  MOVLW  25
2B09:  MOVLB  03
2B0A:  MOVWF  11
2B0B:  MOVLW  02
2B0C:  MOVWF  12
2B0D:  BCF    03.0
2B0E:  MOVLW  0A
2B0F:  MOVLB  0C
2B10:  MOVWF  5E
2B11:  MOVLP  08
2B12:  MOVLB  00
2B13:  CALL   122
2B14:  MOVLP  28
2B15:  MOVF   76,W
2B16:  MOVLB  0C
2B17:  MOVWF  5B
2B18:  MOVLW  18
2B19:  MOVWF  5C
2B1A:  MOVLB  00
2B1B:  CALL   000
2B1C:  MOVLW  20
2B1D:  MOVLB  0F
2B1E:  MOVWF  43
2B1F:  MOVLP  08
2B20:  MOVLB  00
2B21:  CALL   0AF
2B22:  MOVLP  28
2B23:  MOVLW  28
2B24:  MOVLB  0F
2B25:  MOVWF  43
2B26:  MOVLP  08
2B27:  MOVLB  00
2B28:  CALL   0AF
2B29:  MOVLP  28
2B2A:  MOVLB  0B
2B2B:  MOVF   39,W
2B2C:  MOVLB  0E
2B2D:  MOVWF  4E
2B2E:  MOVLW  37
2B2F:  MOVWF  4F
2B30:  MOVLP  08
2B31:  MOVLB  00
2B32:  CALL   479
2B33:  MOVLP  28
2B34:  MOVLB  0B
2B35:  MOVF   38,W
2B36:  MOVLB  0E
2B37:  MOVWF  4E
2B38:  MOVLW  37
2B39:  MOVWF  4F
2B3A:  MOVLP  08
2B3B:  MOVLB  00
2B3C:  CALL   479
2B3D:  MOVLP  28
2B3E:  MOVLW  29
2B3F:  MOVLB  0F
2B40:  MOVWF  43
2B41:  MOVLP  08
2B42:  MOVLB  00
2B43:  CALL   0AF
2B44:  MOVLP  28
2B45:  MOVLW  0D
2B46:  MOVLB  0F
2B47:  MOVWF  43
2B48:  MOVLP  08
2B49:  MOVLB  00
2B4A:  CALL   0AF
2B4B:  MOVLP  28
2B4C:  MOVLW  0A
2B4D:  MOVLB  0F
2B4E:  MOVWF  43
2B4F:  MOVLP  08
2B50:  MOVLB  00
2B51:  CALL   0AF
2B52:  MOVLP  28
.................... 
....................     // コマンドを左詰め (12bit→16bit)
....................     cmd <<= 4;
2B53:  MOVLB  0B
2B54:  RLF    38,F
2B55:  RLF    39,F
2B56:  RLF    38,F
2B57:  RLF    39,F
2B58:  RLF    38,F
2B59:  RLF    39,F
2B5A:  RLF    38,F
2B5B:  RLF    39,F
2B5C:  MOVLW  F0
2B5D:  ANDWF  38,F
....................     fprintf(PC, "\t[AD7490] Final Command : %04LX\r\n", cmd);
2B5E:  MOVLW  31
2B5F:  MOVLB  03
2B60:  MOVWF  11
2B61:  MOVLW  02
2B62:  MOVWF  12
2B63:  BCF    03.0
2B64:  MOVLW  1A
2B65:  MOVLB  0C
2B66:  MOVWF  5E
2B67:  MOVLP  08
2B68:  MOVLB  00
2B69:  CALL   122
2B6A:  MOVLP  28
2B6B:  MOVLB  0B
2B6C:  MOVF   39,W
2B6D:  MOVLB  0E
2B6E:  MOVWF  4E
2B6F:  MOVLW  37
2B70:  MOVWF  4F
2B71:  MOVLP  08
2B72:  MOVLB  00
2B73:  CALL   479
2B74:  MOVLP  28
2B75:  MOVLB  0B
2B76:  MOVF   38,W
2B77:  MOVLB  0E
2B78:  MOVWF  4E
2B79:  MOVLW  37
2B7A:  MOVWF  4F
2B7B:  MOVLP  08
2B7C:  MOVLB  00
2B7D:  CALL   479
2B7E:  MOVLP  28
2B7F:  MOVLW  0D
2B80:  MOVLB  0F
2B81:  MOVWF  43
2B82:  MOVLP  08
2B83:  MOVLB  00
2B84:  CALL   0AF
2B85:  MOVLP  28
2B86:  MOVLW  0A
2B87:  MOVLB  0F
2B88:  MOVWF  43
2B89:  MOVLP  08
2B8A:  MOVLB  00
2B8B:  CALL   0AF
2B8C:  MOVLP  28
.................... 
....................     return cmd;
2B8D:  MOVLB  0B
2B8E:  MOVF   38,W
2B8F:  MOVWF  78
2B90:  MOVF   39,W
2B91:  MOVWF  79
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
1800:  MOVLB  0B
1801:  CLRF   24
1802:  CLRF   25
1803:  CLRF   26
1804:  CLRF   27
1805:  CLRF   28
1806:  CLRF   29
1807:  CLRF   2A
1808:  CLRF   2B
1809:  CLRF   2C
180A:  CLRF   2D
180B:  CLRF   2E
180C:  CLRF   2F
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
180D:  MOVLW  42
180E:  MOVLB  03
180F:  MOVWF  11
1810:  MOVLW  02
1811:  MOVWF  12
1812:  MOVLP  08
1813:  MOVLB  00
1814:  CALL   0D4
1815:  MOVLP  18
....................    fprintf(PC, "\t[BOSS] >>> ");
1816:  MOVLW  52
1817:  MOVLB  03
1818:  MOVWF  11
1819:  MOVLW  02
181A:  MOVWF  12
181B:  MOVLP  08
181C:  MOVLB  00
181D:  CALL   0D4
181E:  MOVLP  18
....................    for (int8 i = 0; i < receive_signal_size; i++)
181F:  MOVLB  0B
1820:  CLRF   30
1821:  MOVF   23,W
1822:  SUBWF  30,W
1823:  BTFSC  03.0
1824:  GOTO   03F
....................       fprintf(PC, "%X ", receive_signal[i]);
1825:  MOVF   30,W
1826:  ADDWF  21,W
1827:  MOVWF  04
1828:  MOVLW  00
1829:  ADDWFC 22,W
182A:  MOVWF  05
182B:  MOVF   00,W
182C:  MOVWF  37
182D:  MOVLB  0E
182E:  MOVWF  4E
182F:  MOVLW  37
1830:  MOVWF  4F
1831:  MOVLP  08
1832:  MOVLB  00
1833:  CALL   479
1834:  MOVLP  18
1835:  MOVLW  20
1836:  MOVLB  0F
1837:  MOVWF  43
1838:  MOVLP  08
1839:  MOVLB  00
183A:  CALL   0AF
183B:  MOVLP  18
183C:  MOVLB  0B
183D:  INCF   30,F
183E:  GOTO   021
....................    fprintf(PC, "\r\n");
183F:  MOVLW  0D
1840:  MOVLB  0F
1841:  MOVWF  43
1842:  MOVLP  08
1843:  MOVLB  00
1844:  CALL   0AF
1845:  MOVLP  18
1846:  MOVLW  0A
1847:  MOVLB  0F
1848:  MOVWF  43
1849:  MOVLP  08
184A:  MOVLB  00
184B:  CALL   0AF
184C:  MOVLP  18
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
184D:  MOVLB  0B
184E:  MOVF   22,W
184F:  MOVWF  38
1850:  MOVF   21,W
1851:  MOVWF  37
1852:  MOVF   23,W
1853:  MOVWF  39
*
1890:  MOVF   78,W
1891:  MOVWF  31
....................    if (frame_start_position == -1)
1892:  MOVF   31,W
1893:  SUBLW  FF
1894:  BTFSS  03.2
1895:  GOTO   09B
....................       return command;
1896:  MOVLW  A4
1897:  MOVWF  78
1898:  MOVLW  05
1899:  MOVWF  79
189A:  GOTO   227
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
189B:  MOVF   31,W
189C:  ADDWF  21,W
189D:  MOVWF  32
189E:  MOVLW  00
189F:  ADDWFC 22,W
18A0:  MOVWF  33
18A1:  MOVF   32,W
18A2:  MOVWF  04
18A3:  MOVF   33,W
18A4:  MOVWF  05
18A5:  ADDFSR 00,FSR0
18A6:  MOVF   00,W
18A7:  ANDLW  0F
18A8:  MOVWF  34
18A9:  MOVF   34,W
18AA:  MOVWF  37
*
18F2:  MOVF   78,W
18F3:  MOVWF  35
....................    if (content_size == -1)
18F4:  MOVF   35,W
18F5:  SUBLW  FF
18F6:  BTFSS  03.2
18F7:  GOTO   0FD
....................       return command;
18F8:  MOVLW  A4
18F9:  MOVWF  78
18FA:  MOVLW  05
18FB:  MOVWF  79
18FC:  GOTO   227
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
18FD:  MOVF   31,W
18FE:  SUBWF  23,W
18FF:  MOVWF  36
....................    
....................    if (!check_crc(frame, receive_frame_size))
1900:  MOVF   33,W
1901:  MOVWF  38
1902:  MOVF   32,W
1903:  MOVWF  37
1904:  MOVF   36,W
1905:  MOVWF  39
*
197E:  MOVF   78,F
197F:  BTFSS  03.2
1980:  GOTO   186
....................       return command;
1981:  MOVLW  A4
1982:  MOVWF  78
1983:  MOVLW  05
1984:  MOVWF  79
1985:  GOTO   227
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
1986:  MOVF   32,W
1987:  MOVWF  04
1988:  MOVF   33,W
1989:  MOVWF  05
198A:  ADDFSR 00,FSR0
198B:  MOVF   00,W
198C:  ANDLW  F0
198D:  MOVWF  77
198E:  SWAPF  77,W
198F:  MOVWF  37
1990:  MOVLW  0F
1991:  ANDWF  37,F
1992:  MOVF   37,W
1993:  MOVWF  38
*
19F2:  MOVF   78,F
19F3:  BTFSS  03.2
19F4:  GOTO   1FA
....................       return command;
19F5:  MOVLW  A4
19F6:  MOVWF  78
19F7:  MOVLW  05
19F8:  MOVWF  79
19F9:  GOTO   227
.................... 
....................    command.frame_id = frame_id;
19FA:  MOVF   34,W
19FB:  MOVWF  24
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
19FC:  MOVLW  01
19FD:  ADDWF  32,W
19FE:  MOVWF  37
19FF:  MOVLW  00
1A00:  ADDWFC 33,W
1A01:  MOVWF  38
1A02:  MOVLW  02
1A03:  SUBWF  36,W
1A04:  MOVWF  39
1A05:  MOVF   38,W
1A06:  MOVWF  05
1A07:  MOVF   37,W
1A08:  MOVWF  04
1A09:  MOVF   39,W
1A0A:  MOVWF  78
1A0B:  BTFSC  03.2
1A0C:  GOTO   215
1A0D:  MOVLW  23
1A0E:  MOVWF  07
1A0F:  MOVLW  77
1A10:  MOVWF  06
1A11:  MOVIW  [FSR0++],W
1A12:  MOVWI  W,[FSR1++]
1A13:  DECFSZ 78,F
1A14:  GOTO   211
....................    command.size = receive_frame_size-2;
1A15:  MOVLW  02
1A16:  SUBWF  36,W
1A17:  MOVWF  25
....................    command.is_exist = TRUE;
1A18:  BSF    26.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1A19:  MOVLW  59
1A1A:  MOVLB  03
1A1B:  MOVWF  11
1A1C:  MOVLW  02
1A1D:  MOVWF  12
1A1E:  MOVLP  08
1A1F:  MOVLB  00
1A20:  CALL   0D4
1A21:  MOVLP  18
....................    return command;
1A22:  MOVLW  A4
1A23:  MOVWF  78
1A24:  MOVLW  05
1A25:  MOVWF  79
1A26:  MOVLB  0B
1A27:  MOVLP  38
1A28:  MOVLB  00
1A29:  GOTO   549 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
1854:  CLRF   3A
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
1855:  CLRF   3A
1856:  MOVLW  01
1857:  SUBWF  39,W
1858:  SUBWF  3A,W
1859:  BTFSC  03.0
185A:  GOTO   06B
....................       if(receive_signal[i] == SFD)
185B:  MOVF   3A,W
185C:  ADDWF  37,W
185D:  MOVWF  04
185E:  MOVLW  00
185F:  ADDWFC 38,W
1860:  MOVWF  05
1861:  MOVF   00,W
1862:  SUBLW  AA
1863:  BTFSS  03.2
1864:  GOTO   069
....................          return i+1;
1865:  MOVLW  01
1866:  ADDWF  3A,W
1867:  MOVWF  78
1868:  GOTO   090
1869:  INCF   3A,F
186A:  GOTO   056
....................    if (receive_signal[i] == SFD)
186B:  MOVF   3A,W
186C:  ADDWF  37,W
186D:  MOVWF  04
186E:  MOVLW  00
186F:  ADDWFC 38,W
1870:  MOVWF  05
1871:  MOVF   00,W
1872:  SUBLW  AA
1873:  BTFSS  03.2
1874:  GOTO   083
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
1875:  MOVLW  67
1876:  MOVLB  03
1877:  MOVWF  11
1878:  MOVLW  02
1879:  MOVWF  12
187A:  MOVLP  08
187B:  MOVLB  00
187C:  CALL   0D4
187D:  MOVLP  18
....................       return -1;
187E:  MOVLW  FF
187F:  MOVWF  78
1880:  MOVLB  0B
1881:  GOTO   090
....................    }
1882:  GOTO   090
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
1883:  MOVLW  72
1884:  MOVLB  03
1885:  MOVWF  11
1886:  MOVLW  02
1887:  MOVWF  12
1888:  MOVLP  08
1889:  MOVLB  00
188A:  CALL   0D4
188B:  MOVLP  18
....................       return -1;
188C:  MOVLW  FF
188D:  MOVWF  78
188E:  MOVLB  0B
188F:  GOTO   090
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
18AB:  CLRF   38
18AC:  MOVF   38,W
18AD:  SUBLW  02
18AE:  BTFSS  03.0
18AF:  GOTO   0CA
....................       if (frame_id == frame_ids[i].id)
18B0:  BCF    03.0
18B1:  RLF    38,W
18B2:  ADDLW  C5
18B3:  MOVWF  04
18B4:  MOVLW  22
18B5:  MOVWF  05
18B6:  BTFSC  03.0
18B7:  INCF   05,F
18B8:  MOVF   00,W
18B9:  SUBWF  37,W
18BA:  BTFSS  03.2
18BB:  GOTO   0C8
....................          return frame_ids[i].length;
18BC:  BCF    03.0
18BD:  RLF    38,W
18BE:  ADDLW  01
18BF:  ADDLW  C5
18C0:  MOVWF  04
18C1:  MOVLW  22
18C2:  MOVWF  05
18C3:  BTFSC  03.0
18C4:  INCF   05,F
18C5:  MOVF   00,W
18C6:  MOVWF  78
18C7:  GOTO   0F2
18C8:  INCF   38,F
18C9:  GOTO   0AC
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
18CA:  MOVLW  7B
18CB:  MOVLB  03
18CC:  MOVWF  11
18CD:  MOVLW  02
18CE:  MOVWF  12
18CF:  BCF    03.0
18D0:  MOVLW  1F
18D1:  MOVLB  0C
18D2:  MOVWF  5E
18D3:  MOVLP  08
18D4:  MOVLB  00
18D5:  CALL   122
18D6:  MOVLP  18
18D7:  MOVLB  0B
18D8:  MOVF   37,W
18D9:  MOVLB  0E
18DA:  MOVWF  4E
18DB:  MOVLW  37
18DC:  MOVWF  4F
18DD:  MOVLP  08
18DE:  MOVLB  00
18DF:  CALL   479
18E0:  MOVLP  18
18E1:  MOVLW  0D
18E2:  MOVLB  0F
18E3:  MOVWF  43
18E4:  MOVLP  08
18E5:  MOVLB  00
18E6:  CALL   0AF
18E7:  MOVLP  18
18E8:  MOVLW  0A
18E9:  MOVLB  0F
18EA:  MOVWF  43
18EB:  MOVLP  08
18EC:  MOVLB  00
18ED:  CALL   0AF
18EE:  MOVLP  18
....................    return -1;
18EF:  MOVLW  FF
18F0:  MOVWF  78
18F1:  MOVLB  0B
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
1906:  MOVLW  01
1907:  SUBWF  39,W
1908:  ADDWF  37,W
1909:  MOVWF  04
190A:  MOVLW  00
190B:  ADDWFC 38,W
190C:  MOVWF  05
190D:  MOVF   00,W
190E:  MOVWF  3A
190F:  MOVLW  01
1910:  SUBWF  39,W
1911:  MOVWF  3C
1912:  MOVF   38,W
1913:  MOVWF  3E
1914:  MOVF   37,W
1915:  MOVWF  3D
1916:  MOVF   3C,W
1917:  MOVWF  3F
1918:  MOVLP  08
1919:  MOVLB  00
191A:  CALL   7CC
191B:  MOVLP  18
191C:  MOVF   78,W
191D:  MOVLB  0B
191E:  MOVWF  3B
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
191F:  MOVF   3B,W
1920:  SUBWF  3A,W
1921:  BTFSS  03.2
1922:  GOTO   127
....................       return TRUE;
1923:  MOVLW  01
1924:  MOVWF  78
1925:  GOTO   17E
1926:  GOTO   17E
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1927:  MOVLW  8D
1928:  MOVLB  03
1929:  MOVWF  11
192A:  MOVLW  02
192B:  MOVWF  12
192C:  MOVLP  08
192D:  MOVLB  00
192E:  CALL   0D4
192F:  MOVLP  18
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
1930:  MOVLW  96
1931:  MOVLB  03
1932:  MOVWF  11
1933:  MOVLW  02
1934:  MOVWF  12
1935:  BCF    03.0
1936:  MOVLW  13
1937:  MOVLB  0C
1938:  MOVWF  5E
1939:  MOVLP  08
193A:  MOVLB  00
193B:  CALL   122
193C:  MOVLP  18
193D:  MOVLB  0B
193E:  MOVF   3A,W
193F:  MOVLB  0E
1940:  MOVWF  4E
1941:  MOVLW  37
1942:  MOVWF  4F
1943:  MOVLP  08
1944:  MOVLB  00
1945:  CALL   479
1946:  MOVLP  18
1947:  MOVLW  0D
1948:  MOVLB  0F
1949:  MOVWF  43
194A:  MOVLP  08
194B:  MOVLB  00
194C:  CALL   0AF
194D:  MOVLP  18
194E:  MOVLW  0A
194F:  MOVLB  0F
1950:  MOVWF  43
1951:  MOVLP  08
1952:  MOVLB  00
1953:  CALL   0AF
1954:  MOVLP  18
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1955:  MOVLW  A2
1956:  MOVLB  03
1957:  MOVWF  11
1958:  MOVLW  02
1959:  MOVWF  12
195A:  BCF    03.0
195B:  MOVLW  13
195C:  MOVLB  0C
195D:  MOVWF  5E
195E:  MOVLP  08
195F:  MOVLB  00
1960:  CALL   122
1961:  MOVLP  18
1962:  MOVLB  0B
1963:  MOVF   3B,W
1964:  MOVLB  0E
1965:  MOVWF  4E
1966:  MOVLW  37
1967:  MOVWF  4F
1968:  MOVLP  08
1969:  MOVLB  00
196A:  CALL   479
196B:  MOVLP  18
196C:  MOVLW  0D
196D:  MOVLB  0F
196E:  MOVWF  43
196F:  MOVLP  08
1970:  MOVLB  00
1971:  CALL   0AF
1972:  MOVLP  18
1973:  MOVLW  0A
1974:  MOVLB  0F
1975:  MOVWF  43
1976:  MOVLP  08
1977:  MOVLB  00
1978:  CALL   0AF
1979:  MOVLP  18
....................       return FALSE;
197A:  MOVLW  00
197B:  MOVWF  78
197C:  MOVLB  0B
197D:  GOTO   17E
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
1994:  MOVF   38,W
1995:  SUBLW  0C
1996:  BTFSS  03.2
1997:  GOTO   19C
....................       return TRUE;
1998:  MOVLW  01
1999:  MOVWF  78
199A:  GOTO   1F2
199B:  GOTO   1F2
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
199C:  MOVLW  AE
199D:  MOVLB  03
199E:  MOVWF  11
199F:  MOVLW  02
19A0:  MOVWF  12
19A1:  MOVLP  08
19A2:  MOVLB  00
19A3:  CALL   0D4
19A4:  MOVLP  18
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
19A5:  MOVLW  BF
19A6:  MOVLB  03
19A7:  MOVWF  11
19A8:  MOVLW  02
19A9:  MOVWF  12
19AA:  BCF    03.0
19AB:  MOVLW  13
19AC:  MOVLB  0C
19AD:  MOVWF  5E
19AE:  MOVLP  08
19AF:  MOVLB  00
19B0:  CALL   122
19B1:  MOVLP  18
19B2:  MOVLB  0B
19B3:  MOVF   38,W
19B4:  MOVLB  0E
19B5:  MOVWF  4E
19B6:  MOVLW  37
19B7:  MOVWF  4F
19B8:  MOVLP  08
19B9:  MOVLB  00
19BA:  CALL   479
19BB:  MOVLP  18
19BC:  MOVLW  0D
19BD:  MOVLB  0F
19BE:  MOVWF  43
19BF:  MOVLP  08
19C0:  MOVLB  00
19C1:  CALL   0AF
19C2:  MOVLP  18
19C3:  MOVLW  0A
19C4:  MOVLB  0F
19C5:  MOVWF  43
19C6:  MOVLP  08
19C7:  MOVLB  00
19C8:  CALL   0AF
19C9:  MOVLP  18
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
19CA:  MOVLW  CB
19CB:  MOVLB  03
19CC:  MOVWF  11
19CD:  MOVLW  02
19CE:  MOVWF  12
19CF:  BCF    03.0
19D0:  MOVLW  13
19D1:  MOVLB  0C
19D2:  MOVWF  5E
19D3:  MOVLP  08
19D4:  MOVLB  00
19D5:  CALL   122
19D6:  MOVLP  18
19D7:  MOVLW  0C
19D8:  MOVLB  0E
19D9:  MOVWF  4E
19DA:  MOVLW  37
19DB:  MOVWF  4F
19DC:  MOVLP  08
19DD:  MOVLB  00
19DE:  CALL   479
19DF:  MOVLP  18
19E0:  MOVLW  0D
19E1:  MOVLB  0F
19E2:  MOVWF  43
19E3:  MOVLP  08
19E4:  MOVLB  00
19E5:  CALL   0AF
19E6:  MOVLP  18
19E7:  MOVLW  0A
19E8:  MOVLB  0F
19E9:  MOVWF  43
19EA:  MOVLP  08
19EB:  MOVLB  00
19EC:  CALL   0AF
19ED:  MOVLP  18
....................       return FALSE;  
19EE:  MOVLW  00
19EF:  MOVWF  78
19F0:  MOVLB  0B
19F1:  GOTO   1F2
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
1676:  MOVLW  AA
1677:  MOVLB  0B
1678:  MOVWF  24
....................    data[1] = (BOSS_PIC << 4) | frame_id;
1679:  MOVF   20,W
167A:  IORLW  50
167B:  MOVWF  25
....................    memcpy(&data[2], content, size);
167C:  MOVF   22,W
167D:  MOVWF  05
167E:  MOVF   21,W
167F:  MOVWF  04
1680:  MOVF   23,W
1681:  MOVWF  78
1682:  BTFSC  03.2
1683:  GOTO   68C
1684:  MOVLW  23
1685:  MOVWF  07
1686:  MOVLW  76
1687:  MOVWF  06
1688:  MOVIW  [FSR0++],W
1689:  MOVWI  W,[FSR1++]
168A:  DECFSZ 78,F
168B:  GOTO   688
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
168C:  MOVLW  02
168D:  ADDWF  23,W
168E:  MOVWF  34
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
168F:  MOVLW  74
1690:  ADDWF  34,W
1691:  MOVWF  78
1692:  MOVLW  23
1693:  MOVWF  7A
1694:  BTFSC  03.0
1695:  INCF   7A,F
1696:  MOVF   78,W
1697:  MOVWF  37
1698:  MOVF   7A,W
1699:  MOVWF  38
169A:  MOVLW  01
169B:  SUBWF  34,W
169C:  MOVWF  39
169D:  MOVLW  23
169E:  MOVWF  3E
169F:  MOVLW  75
16A0:  MOVWF  3D
16A1:  MOVF   39,W
16A2:  MOVWF  3F
16A3:  MOVLP  08
16A4:  MOVLB  00
16A5:  CALL   7CC
16A6:  MOVLP  10
16A7:  MOVLB  0B
16A8:  MOVF   38,W
16A9:  MOVWF  05
16AA:  MOVF   37,W
16AB:  MOVWF  04
16AC:  MOVF   78,W
16AD:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
16AE:  MOVLW  01
16AF:  ADDWF  34,W
16B0:  MOVWF  35
....................    
....................    transmit(data, data_size);
16B1:  MOVLW  23
16B2:  MOVWF  38
16B3:  MOVLW  74
16B4:  MOVWF  37
16B5:  MOVF   35,W
16B6:  MOVWF  39
*
1704:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
16B7:  CLRF   3A
16B8:  MOVF   39,W
16B9:  SUBWF  3A,W
16BA:  BTFSC  03.0
16BB:  GOTO   6CD
....................       fputc(data[i], BOSS);
16BC:  MOVF   3A,W
16BD:  ADDWF  37,W
16BE:  MOVWF  04
16BF:  MOVLW  00
16C0:  ADDWFC 38,W
16C1:  MOVWF  05
16C2:  MOVF   00,W
16C3:  MOVWF  3C
16C4:  MOVF   3C,W
*
16CA:  MOVLB  0B
16CB:  INCF   3A,F
16CC:  GOTO   6B8
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
16CD:  MOVLW  D7
16CE:  MOVLB  03
16CF:  MOVWF  11
16D0:  MOVLW  02
16D1:  MOVWF  12
16D2:  MOVLP  08
16D3:  MOVLB  00
16D4:  CALL   0D4
16D5:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
16D6:  MOVLB  0B
16D7:  CLRF   3B
16D8:  MOVF   39,W
16D9:  SUBWF  3B,W
16DA:  BTFSC  03.0
16DB:  GOTO   6F6
....................       fprintf(PC, "%X ", data[i]);
16DC:  MOVF   3B,W
16DD:  ADDWF  37,W
16DE:  MOVWF  04
16DF:  MOVLW  00
16E0:  ADDWFC 38,W
16E1:  MOVWF  05
16E2:  MOVF   00,W
16E3:  MOVWF  3C
16E4:  MOVLB  0E
16E5:  MOVWF  4E
16E6:  MOVLW  37
16E7:  MOVWF  4F
16E8:  MOVLP  08
16E9:  MOVLB  00
16EA:  CALL   479
16EB:  MOVLP  10
16EC:  MOVLW  20
16ED:  MOVLB  0F
16EE:  MOVWF  43
16EF:  MOVLP  08
16F0:  MOVLB  00
16F1:  CALL   0AF
16F2:  MOVLP  10
16F3:  MOVLB  0B
16F4:  INCF   3B,F
16F5:  GOTO   6D8
....................    fprintf(PC, "\r\n");
16F6:  MOVLW  0D
16F7:  MOVLB  0F
16F8:  MOVWF  43
16F9:  MOVLP  08
16FA:  MOVLB  00
16FB:  CALL   0AF
16FC:  MOVLP  10
16FD:  MOVLW  0A
16FE:  MOVLB  0F
16FF:  MOVWF  43
1700:  MOVLP  08
1701:  MOVLB  00
1702:  CALL   0AF
1703:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0FCC:  MOVLB  0B
0FCD:  MOVF   3D,W
0FCE:  MOVWF  04
0FCF:  MOVF   3E,W
0FD0:  MOVWF  05
0FD1:  MOVIW  [FSR0+00],W
0FD2:  MOVWF  40
0FD3:  MOVLW  01
0FD4:  MOVWF  41
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0FD5:  MOVF   3F,W
0FD6:  SUBWF  41,W
0FD7:  BTFSC  03.0
0FD8:  GOTO   7E3
....................       crc ^= frame[i++];
0FD9:  MOVF   41,W
0FDA:  INCF   41,F
0FDB:  ADDWF  3D,W
0FDC:  MOVWF  04
0FDD:  MOVLW  00
0FDE:  ADDWFC 3E,W
0FDF:  MOVWF  05
0FE0:  MOVF   00,W
0FE1:  XORWF  40,F
0FE2:  GOTO   7D5
....................    return crc;
0FE3:  MOVF   40,W
0FE4:  MOVWF  78
0FE5:  MOVLB  00
0FE6:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
0FE7:  MOVLW  0F
0FE8:  MOVLB  0B
0FE9:  MOVWF  20
0FEA:  CLRF   22
0FEB:  CLRF   21
0FEC:  CLRF   23
0FED:  MOVLP  10
0FEE:  MOVLB  00
0FEF:  CALL   676
0FF0:  MOVLP  08
0FF1:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
1FD1:  MOVLW  03
1FD2:  MOVLB  0B
1FD3:  MOVWF  20
1FD4:  MOVLW  20
1FD5:  MOVWF  22
1FD6:  MOVLW  09
1FD7:  MOVWF  21
1FD8:  MOVLW  04
1FD9:  MOVWF  23
1FDA:  MOVLP  10
1FDB:  MOVLB  00
1FDC:  CALL   676
1FDD:  MOVLP  18
1FDE:  MOVLP  28
1FDF:  GOTO   66F (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... ////
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
097C:  MOVLW  77
097D:  MOVLB  03
097E:  MOVWF  11
097F:  MOVLW  03
0980:  MOVWF  12
0981:  MOVLB  00
0982:  CALL   0D4
....................     output_low(CONNECT_CIGS);
0983:  MOVLB  01
0984:  BCF    10.0
0985:  MOVLB  02
0986:  BCF    10.0
....................     output_low(EN_NPWR);
0987:  MOVLB  01
0988:  BCF    0C.4
0989:  MOVLB  02
098A:  BCF    0C.4
....................     fprintf(PC, "\tComplete\r\n");
098B:  MOVLW  7F
098C:  MOVLB  03
098D:  MOVWF  11
098E:  MOVLW  03
098F:  MOVWF  12
0990:  MOVLB  00
0991:  CALL   0D4
0992:  MOVLP  38
0993:  GOTO   50A (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
0994:  MOVLW  85
0995:  MOVLB  03
0996:  MOVWF  11
0997:  MOVLW  03
0998:  MOVWF  12
0999:  MOVLB  00
099A:  CALL   0D4
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
099B:  MOVLW  78
099C:  MOVLB  01
099D:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
099E:  BCF    1E.0
099F:  BCF    1E.1
09A0:  BCF    1E.2
09A1:  MOVLW  00
09A2:  MOVLB  03
09A3:  MOVWF  0C
09A4:  MOVWF  10
09A5:  MOVWF  0D
09A6:  MOVLW  EB
09A7:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
09A8:  MOVLB  01
09A9:  BCF    1E.4
09AA:  BSF    1E.5
09AB:  BSF    1E.6
09AC:  BCF    1E.7
09AD:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
09AE:  MOVLW  90
09AF:  MOVLB  02
09B0:  MOVWF  18
....................    dac_write(50);                                                               
09B1:  MOVLW  32
09B2:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
09B3:  MOVLW  8E
09B4:  MOVLB  03
09B5:  MOVWF  11
09B6:  MOVLW  03
09B7:  MOVWF  12
09B8:  MOVLB  00
09B9:  CALL   0D4
09BA:  MOVLP  38
09BB:  GOTO   50D (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
....................     // read header data
....................     measured_time = get_current_sec(); // read time from timer0
....................     measured_pd = ad7490_read(ADC_PD); // read PD value
....................     measured_temp_top = ad7490_read(ADC_TEMP_TOP); // read temperature at top
....................     measured_temp_bot = ad7490_read(ADC_TEMP_BOT); // read temperature at bottom
....................     measured_open_voltage = ad7490_read(ADC_CIGS_VOLT); // read open voltage at CIGS
.................... 
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_read(ADC_CIGS_VOLT);
....................         data_buffer[count*2+1] = ad7490_read(ADC_CIGS_CURR); // read voltage at adc pin
....................     }
.................... 
....................     output_low(CONNECT_CIGS);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00};
....................     
....................     make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetbytecounter = 21; // Start after header size
....................     
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata[i*3+2]    = data_buffer[i*2+1] & 0xFF;
....................         packetbytecounter += 3; // Each CIGS data takes 3 bytes
.................... 
....................         if (packetbytecounter == PACKET_SIZE-1) {
....................             // Add CRC
....................             packetdata[PACKET_SIZE-2] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
.................... 
....................             // カウンタ更新
....................             misf_meas_use_counter += PACKET_SIZE;
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             write_misf_address_area();
....................         }
....................     }
.................... 
....................     if (packetbytecounter < PACKET_SIZE) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetbytecounter; j < PACKET_SIZE; j++) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................         write_misf_address_area();
....................     }
.................... 
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
2E85:  MOVLB  0A
2E86:  MOVF   5C,W
2E87:  SUBWF  5B,W
2E88:  BTFSS  03.2
2E89:  GOTO   699
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
2E8A:  MOVLW  C8
2E8B:  MOVLB  03
2E8C:  MOVWF  11
2E8D:  MOVLW  03
2E8E:  MOVWF  12
2E8F:  MOVLP  08
2E90:  MOVLB  00
2E91:  CALL   0D4
2E92:  MOVLP  28
....................       return 0x00;
2E93:  MOVLW  00
2E94:  MOVWF  78
2E95:  MOVWF  79
2E96:  GOTO   6D4
....................    }
2E97:  GOTO   6D4
2E98:  MOVLB  0A
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
2E99:  MOVF   5B,W
2E9A:  MOVLB  0C
2E9B:  MOVWF  41
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
2E9C:  MOVLW  01
2E9D:  MOVLB  0A
2E9E:  ADDWF  5B,W
2E9F:  ANDLW  0F
2EA0:  MOVWF  5B
....................       return &smf_queue.smf_data[current_head];
2EA1:  MOVLB  0C
2EA2:  MOVF   41,W
2EA3:  MOVWF  42
2EA4:  MOVLW  09
2EA5:  MOVWF  43
*
2ECA:  MOVF   78,W
2ECB:  ADDLW  CB
2ECC:  MOVWF  78
2ECD:  MOVLW  22
2ECE:  MOVWF  7A
2ECF:  BTFSC  03.0
2ED0:  INCF   7A,F
2ED1:  MOVF   7A,W
2ED2:  MOVWF  79
2ED3:  MOVLB  00
....................    }
2ED4:  MOVLP  30
2ED5:  GOTO   6D4 (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0FF2:  MOVLB  0A
0FF3:  MOVF   5C,W
0FF4:  SUBWF  5B,W
0FF5:  BTFSC  03.2
0FF6:  GOTO   7F9
0FF7:  MOVLW  00
0FF8:  GOTO   7FA
0FF9:  MOVLW  01
0FFA:  MOVWF  78
0FFB:  MOVLB  00
0FFC:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
2ED6:  MOVLB  0C
2ED7:  CLRF   60
2ED8:  CLRF   61
2ED9:  CLRF   62
2EDA:  CLRF   63
2EDB:  CLRF   64
2EDC:  CLRF   65
2EDD:  CLRF   66
2EDE:  CLRF   67
2EDF:  CLRF   68
....................    
....................    if (mis_type == APRS_DATA)
2EE0:  MOVF   5F,F
2EE1:  BTFSS  03.2
2EE2:  GOTO   6F4
....................    {
....................       mis_struct.start_address   = 0x02400000;
2EE3:  MOVLW  02
2EE4:  MOVWF  63
2EE5:  MOVLW  40
2EE6:  MOVWF  62
2EE7:  CLRF   61
2EE8:  CLRF   60
....................       mis_struct.end_address     = 0x02500FFF;
2EE9:  MOVLW  02
2EEA:  MOVWF  67
2EEB:  MOVLW  50
2EEC:  MOVWF  66
2EED:  MOVLW  0F
2EEE:  MOVWF  65
2EEF:  MOVLW  FF
2EF0:  MOVWF  64
....................       mis_struct.mission_flag    = 0b10000000;
2EF1:  MOVLW  80
2EF2:  MOVWF  68
....................    }
2EF3:  GOTO   73E
....................    else if (mis_type == IN_VEHICLE)
2EF4:  DECFSZ 5F,W
2EF5:  GOTO   708
....................    {
....................       mis_struct.start_address   = 0x02501000;
2EF6:  MOVLW  02
2EF7:  MOVWF  63
2EF8:  MOVLW  50
2EF9:  MOVWF  62
2EFA:  MOVLW  10
2EFB:  MOVWF  61
2EFC:  CLRF   60
....................       mis_struct.end_address     = 0x02501FFF;
2EFD:  MOVLW  02
2EFE:  MOVWF  67
2EFF:  MOVLW  50
2F00:  MOVWF  66
2F01:  MOVLW  1F
2F02:  MOVWF  65
2F03:  MOVLW  FF
2F04:  MOVWF  64
....................       mis_struct.mission_flag    = 0b10000001;  
2F05:  MOVLW  81
2F06:  MOVWF  68
....................    }
2F07:  GOTO   73E
....................    else if (mis_type == ECOSYSTEM_DATA)
2F08:  MOVF   5F,W
2F09:  SUBLW  02
2F0A:  BTFSS  03.2
2F0B:  GOTO   71E
....................    {
....................       mis_struct.start_address   = 0x02506000;
2F0C:  MOVLW  02
2F0D:  MOVWF  63
2F0E:  MOVLW  50
2F0F:  MOVWF  62
2F10:  MOVLW  60
2F11:  MOVWF  61
2F12:  CLRF   60
....................       mis_struct.end_address     = 0x02516FFF;
2F13:  MOVLW  02
2F14:  MOVWF  67
2F15:  MOVLW  51
2F16:  MOVWF  66
2F17:  MOVLW  6F
2F18:  MOVWF  65
2F19:  MOVLW  FF
2F1A:  MOVWF  64
....................       mis_struct.mission_flag    = 0b10000011;  
2F1B:  MOVLW  83
2F1C:  MOVWF  68
....................    }
2F1D:  GOTO   73E
....................    else if (mis_type == APRS_PIC_LOG)
2F1E:  MOVF   5F,W
2F1F:  SUBLW  03
2F20:  BTFSS  03.2
2F21:  GOTO   734
....................    {
....................       mis_struct.start_address   = 0x02517000;
2F22:  MOVLW  02
2F23:  MOVWF  63
2F24:  MOVLW  51
2F25:  MOVWF  62
2F26:  MOVLW  70
2F27:  MOVWF  61
2F28:  CLRF   60
....................       mis_struct.end_address     = 0x02517FFF;
2F29:  MOVLW  02
2F2A:  MOVWF  67
2F2B:  MOVLW  51
2F2C:  MOVWF  66
2F2D:  MOVLW  7F
2F2E:  MOVWF  65
2F2F:  MOVLW  FF
2F30:  MOVWF  64
....................       mis_struct.mission_flag    = 0b10000100;  
2F31:  MOVLW  84
2F32:  MOVWF  68
....................    }
2F33:  GOTO   73E
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
2F34:  MOVLW  FF
2F35:  MOVWF  63
2F36:  MOVWF  62
2F37:  MOVWF  61
2F38:  MOVWF  60
....................       mis_struct.end_address     = 0xFFFFFFFF;
2F39:  MOVWF  67
2F3A:  MOVWF  66
2F3B:  MOVWF  65
2F3C:  MOVWF  64
....................       mis_struct.mission_flag    = 0b11111111; 
2F3D:  MOVWF  68
....................    }
....................    
....................    return mis_struct;
2F3E:  MOVLW  60
2F3F:  MOVWF  78
2F40:  MOVLW  06
2F41:  MOVWF  79
2F42:  MOVLP  30
2F43:  MOVLB  00
2F44:  GOTO   12C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
1A2A:  MOVLW  D5
1A2B:  MOVLB  03
1A2C:  MOVWF  11
1A2D:  MOVLW  03
1A2E:  MOVWF  12
1A2F:  MOVLP  08
1A30:  MOVLB  00
1A31:  CALL   0D4
1A32:  MOVLP  18
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
1A33:  MOVLB  0B
1A34:  MOVF   25,W
1A35:  MOVWF  04
1A36:  MOVF   26,W
1A37:  MOVWF  05
1A38:  MOVIW  [FSR0+00],W
1A39:  MOVWF  27
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
1A3A:  MOVF   25,W
1A3B:  MOVWF  04
1A3C:  MOVF   26,W
1A3D:  MOVWF  05
1A3E:  ADDFSR 01,FSR0
1A3F:  MOVF   00,W
1A40:  CLRF   31
1A41:  CLRF   30
1A42:  CLRF   2F
1A43:  MOVWF  2E
1A44:  MOVWF  31
1A45:  CLRF   2E
1A46:  CLRF   2F
1A47:  CLRF   30
1A48:  MOVF   25,W
1A49:  MOVWF  04
1A4A:  MOVF   26,W
1A4B:  MOVWF  05
1A4C:  ADDFSR 02,FSR0
1A4D:  MOVF   00,W
1A4E:  CLRF   36
1A4F:  CLRF   35
1A50:  CLRF   34
1A51:  MOVWF  33
1A52:  MOVF   34,W
1A53:  MOVWF  7A
1A54:  MOVF   33,W
1A55:  MOVWF  79
1A56:  CLRF   77
1A57:  CLRF   78
1A58:  MOVF   77,W
1A59:  IORWF  2E,F
1A5A:  MOVF   78,W
1A5B:  IORWF  2F,F
1A5C:  MOVF   33,W
1A5D:  IORWF  30,F
1A5E:  MOVF   34,W
1A5F:  IORWF  31,F
1A60:  MOVF   25,W
1A61:  MOVWF  04
1A62:  MOVF   26,W
1A63:  MOVWF  05
1A64:  ADDFSR 03,FSR0
1A65:  MOVF   00,W
1A66:  CLRF   36
1A67:  CLRF   35
1A68:  CLRF   34
1A69:  MOVWF  33
1A6A:  MOVF   35,W
1A6B:  MOVWF  7A
1A6C:  MOVF   34,W
1A6D:  MOVWF  79
1A6E:  MOVF   33,W
1A6F:  MOVWF  78
1A70:  CLRF   77
1A71:  MOVF   77,W
1A72:  IORWF  2E,F
1A73:  MOVF   33,W
1A74:  IORWF  2F,F
1A75:  MOVF   34,W
1A76:  IORWF  30,F
1A77:  MOVF   35,W
1A78:  IORWF  31,F
1A79:  MOVF   25,W
1A7A:  MOVWF  04
1A7B:  MOVF   26,W
1A7C:  MOVWF  05
1A7D:  MOVIW  [FSR0+04],W
1A7E:  MOVWF  77
1A7F:  CLRF   78
1A80:  CLRF   79
1A81:  CLRF   7A
1A82:  MOVF   77,W
1A83:  IORWF  2E,W
1A84:  MOVWF  28
1A85:  MOVF   78,W
1A86:  IORWF  2F,W
1A87:  MOVWF  29
1A88:  MOVF   79,W
1A89:  IORWF  30,W
1A8A:  MOVWF  2A
1A8B:  MOVF   7A,W
1A8C:  IORWF  31,W
1A8D:  MOVWF  2B
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
1A8E:  MOVF   25,W
1A8F:  MOVWF  04
1A90:  MOVF   26,W
1A91:  MOVWF  05
1A92:  ADDFSR 05,FSR0
1A93:  MOVF   00,W
1A94:  CLRF   2F
1A95:  MOVWF  2E
1A96:  MOVWF  2F
1A97:  CLRF   2E
1A98:  MOVF   25,W
1A99:  MOVWF  04
1A9A:  MOVF   26,W
1A9B:  MOVWF  05
1A9C:  MOVIW  [FSR0+06],W
1A9D:  CLRF   7A
1A9E:  IORWF  2E,W
1A9F:  MOVWF  2C
1AA0:  MOVF   7A,W
1AA1:  IORWF  2F,W
1AA2:  MOVWF  2D
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
1AA3:  MOVLW  DF
1AA4:  MOVLB  03
1AA5:  MOVWF  11
1AA6:  MOVLW  03
1AA7:  MOVWF  12
1AA8:  BCF    03.0
1AA9:  MOVLW  0C
1AAA:  MOVLB  0C
1AAB:  MOVWF  5E
1AAC:  MOVLP  08
1AAD:  MOVLB  00
1AAE:  CALL   122
1AAF:  MOVLP  18
1AB0:  MOVLB  0B
1AB1:  MOVF   27,W
1AB2:  MOVLB  0E
1AB3:  MOVWF  4E
1AB4:  MOVLW  37
1AB5:  MOVWF  4F
1AB6:  MOVLP  08
1AB7:  MOVLB  00
1AB8:  CALL   479
1AB9:  MOVLP  18
1ABA:  MOVLW  0D
1ABB:  MOVLB  0F
1ABC:  MOVWF  43
1ABD:  MOVLP  08
1ABE:  MOVLB  00
1ABF:  CALL   0AF
1AC0:  MOVLP  18
1AC1:  MOVLW  0A
1AC2:  MOVLB  0F
1AC3:  MOVWF  43
1AC4:  MOVLP  08
1AC5:  MOVLB  00
1AC6:  CALL   0AF
1AC7:  MOVLP  18
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
1AC8:  MOVLW  E9
1AC9:  MOVLB  03
1ACA:  MOVWF  11
1ACB:  MOVLW  03
1ACC:  MOVWF  12
1ACD:  BCF    03.0
1ACE:  MOVLW  0E
1ACF:  MOVLB  0C
1AD0:  MOVWF  5E
1AD1:  MOVLP  08
1AD2:  MOVLB  00
1AD3:  CALL   122
1AD4:  MOVLP  18
1AD5:  MOVLB  0B
1AD6:  MOVF   2B,W
1AD7:  MOVLB  0E
1AD8:  MOVWF  4E
1AD9:  MOVLW  37
1ADA:  MOVWF  4F
1ADB:  MOVLP  08
1ADC:  MOVLB  00
1ADD:  CALL   479
1ADE:  MOVLP  18
1ADF:  MOVLB  0B
1AE0:  MOVF   2A,W
1AE1:  MOVLB  0E
1AE2:  MOVWF  4E
1AE3:  MOVLW  37
1AE4:  MOVWF  4F
1AE5:  MOVLP  08
1AE6:  MOVLB  00
1AE7:  CALL   479
1AE8:  MOVLP  18
1AE9:  MOVLB  0B
1AEA:  MOVF   29,W
1AEB:  MOVLB  0E
1AEC:  MOVWF  4E
1AED:  MOVLW  37
1AEE:  MOVWF  4F
1AEF:  MOVLP  08
1AF0:  MOVLB  00
1AF1:  CALL   479
1AF2:  MOVLP  18
1AF3:  MOVLB  0B
1AF4:  MOVF   28,W
1AF5:  MOVLB  0E
1AF6:  MOVWF  4E
1AF7:  MOVLW  37
1AF8:  MOVWF  4F
1AF9:  MOVLP  08
1AFA:  MOVLB  00
1AFB:  CALL   479
1AFC:  MOVLP  18
1AFD:  MOVLW  0D
1AFE:  MOVLB  0F
1AFF:  MOVWF  43
1B00:  MOVLP  08
1B01:  MOVLB  00
1B02:  CALL   0AF
1B03:  MOVLP  18
1B04:  MOVLW  0A
1B05:  MOVLB  0F
1B06:  MOVWF  43
1B07:  MOVLP  08
1B08:  MOVLB  00
1B09:  CALL   0AF
1B0A:  MOVLP  18
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
1B0B:  MOVLW  F4
1B0C:  MOVLB  03
1B0D:  MOVWF  11
1B0E:  MOVLW  03
1B0F:  MOVWF  12
1B10:  BCF    03.0
1B11:  MOVLW  0E
1B12:  MOVLB  0C
1B13:  MOVWF  5E
1B14:  MOVLP  08
1B15:  MOVLB  00
1B16:  CALL   122
1B17:  MOVLP  18
1B18:  MOVLB  0B
1B19:  MOVF   2D,W
1B1A:  MOVLB  0E
1B1B:  MOVWF  4E
1B1C:  MOVLW  37
1B1D:  MOVWF  4F
1B1E:  MOVLP  08
1B1F:  MOVLB  00
1B20:  CALL   479
1B21:  MOVLP  18
1B22:  MOVLB  0B
1B23:  MOVF   2C,W
1B24:  MOVLB  0E
1B25:  MOVWF  4E
1B26:  MOVLW  37
1B27:  MOVWF  4F
1B28:  MOVLP  08
1B29:  MOVLB  00
1B2A:  CALL   479
1B2B:  MOVLP  18
1B2C:  MOVLW  0D
1B2D:  MOVLB  0F
1B2E:  MOVWF  43
1B2F:  MOVLP  08
1B30:  MOVLB  00
1B31:  CALL   0AF
1B32:  MOVLP  18
1B33:  MOVLW  0A
1B34:  MOVLB  0F
1B35:  MOVWF  43
1B36:  MOVLP  08
1B37:  MOVLB  00
1B38:  CALL   0AF
1B39:  MOVLP  18
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
1B3A:  MOVLB  0B
1B3B:  MOVF   27,W
1B3C:  MOVLB  0E
1B3D:  MOVWF  3C
1B3E:  MOVLW  01
1B3F:  MOVWF  3D
1B40:  MOVLP  10
1B41:  MOVLB  00
1B42:  CALL   3A7
1B43:  MOVLP  18
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
1B44:  MOVLB  0B
1B45:  MOVF   27,W
1B46:  MOVLB  0E
1B47:  MOVWF  3C
1B48:  MOVLW  02
1B49:  MOVWF  3D
1B4A:  MOVLP  10
1B4B:  MOVLB  00
1B4C:  CALL   3A7
1B4D:  MOVLP  18
....................    fprintf(PC, "End MODE DUMMY\r\n");
1B4E:  MOVLW  FF
1B4F:  MOVLB  03
1B50:  MOVWF  11
1B51:  MOVLW  03
1B52:  MOVWF  12
1B53:  MOVLP  08
1B54:  MOVLB  00
1B55:  CALL   0D4
1B56:  MOVLP  18
1B57:  MOVLP  28
1B58:  GOTO   650 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    sweep(parameter);
....................    
....................    
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
2C2B:  MOVLW  22
2C2C:  MOVLB  03
2C2D:  MOVWF  11
2C2E:  MOVLW  04
2C2F:  MOVWF  12
2C30:  MOVLP  08
2C31:  MOVLB  00
2C32:  CALL   0D4
2C33:  MOVLP  28
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
2C34:  MOVLW  64
2C35:  MOVLB  0B
2C36:  MOVWF  25
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
2C37:  MOVLW  29
2C38:  MOVLB  03
2C39:  MOVWF  11
2C3A:  MOVLW  04
2C3B:  MOVWF  12
2C3C:  BCF    03.0
2C3D:  MOVLW  0E
2C3E:  MOVLB  0C
2C3F:  MOVWF  5E
2C40:  MOVLP  08
2C41:  MOVLB  00
2C42:  CALL   122
2C43:  MOVLP  28
2C44:  MOVLB  0B
2C45:  MOVF   25,W
2C46:  MOVLB  0C
2C47:  MOVWF  4C
2C48:  MOVLW  1B
2C49:  MOVWF  4D
2C4A:  MOVLP  10
2C4B:  MOVLB  00
2C4C:  CALL   71C
2C4D:  MOVLP  28
2C4E:  MOVLW  0D
2C4F:  MOVLB  0F
2C50:  MOVWF  43
2C51:  MOVLP  08
2C52:  MOVLB  00
2C53:  CALL   0AF
2C54:  MOVLP  28
2C55:  MOVLW  0A
2C56:  MOVLB  0F
2C57:  MOVWF  43
2C58:  MOVLP  08
2C59:  MOVLB  00
2C5A:  CALL   0AF
2C5B:  MOVLP  28
....................    output_high(CONNECT_CIGS);
2C5C:  MOVLB  01
2C5D:  BCF    10.0
2C5E:  MOVLB  02
2C5F:  BSF    10.0
.................... 
....................    // read temperature
....................    set_adc_channel(TEMP_TOP);
2C60:  MOVLW  20
2C61:  MOVWF  78
2C62:  MOVLB  01
2C63:  MOVF   1D,W
2C64:  ANDLW  83
2C65:  IORWF  78,W
2C66:  MOVWF  1D
2C67:  MOVLW  0F
2C68:  MOVWF  78
2C69:  MOVF   1F,W
2C6A:  ANDLW  F0
2C6B:  IORWF  78,W
2C6C:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
2C6D:  MOVLW  0D
2C6E:  MOVWF  77
2C6F:  DECFSZ 77,F
2C70:  GOTO   46F
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2C71:  MOVLB  0B
2C72:  CLRF   30
2C73:  MOVLB  00
2C74:  CALL   073
2C75:  MOVF   79,W
2C76:  MOVLB  08
2C77:  MOVWF  3B
2C78:  MOVF   78,W
2C79:  MOVWF  3A
....................    set_adc_channel(TEMP_BOT);
2C7A:  MOVLW  0C
2C7B:  MOVWF  78
2C7C:  MOVLB  01
2C7D:  MOVF   1D,W
2C7E:  ANDLW  83
2C7F:  IORWF  78,W
2C80:  MOVWF  1D
2C81:  MOVLW  0F
2C82:  MOVWF  78
2C83:  MOVF   1F,W
2C84:  ANDLW  F0
2C85:  IORWF  78,W
2C86:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
2C87:  MOVLW  0D
2C88:  MOVWF  77
2C89:  DECFSZ 77,F
2C8A:  GOTO   489
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2C8B:  MOVLB  0B
2C8C:  CLRF   30
2C8D:  MOVLB  00
2C8E:  CALL   073
2C8F:  MOVF   79,W
2C90:  MOVLB  08
2C91:  MOVWF  3D
2C92:  MOVF   78,W
2C93:  MOVWF  3C
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
2C94:  MOVLW  00
2C95:  MOVWF  78
2C96:  MOVLB  01
2C97:  MOVF   1D,W
2C98:  ANDLW  83
2C99:  IORWF  78,W
2C9A:  MOVWF  1D
2C9B:  MOVLW  0F
2C9C:  MOVWF  78
2C9D:  MOVF   1F,W
2C9E:  ANDLW  F0
2C9F:  IORWF  78,W
2CA0:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
2CA1:  MOVLW  0D
2CA2:  MOVWF  77
2CA3:  DECFSZ 77,F
2CA4:  GOTO   4A3
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
2CA5:  MOVLB  0B
2CA6:  CLRF   2B
2CA7:  CLRF   2A
2CA8:  MOVF   2B,F
2CA9:  BTFSS  03.2
2CAA:  GOTO   54F
2CAB:  MOVF   25,W
2CAC:  SUBWF  2A,W
2CAD:  BTFSC  03.0
2CAE:  GOTO   54F
....................    {    
....................       // set DAC value
....................       dac_write(count);
2CAF:  MOVF   2A,W
2CB0:  MOVLB  02
2CB1:  MOVWF  19
....................       delay_us(100); // wait for the DAC to stabilize
2CB2:  MOVLW  85
2CB3:  MOVWF  77
2CB4:  DECFSZ 77,F
2CB5:  GOTO   4B4
.................... 
....................       // read CIGS voltage and current
....................       set_adc_channel(CIGS_VOLT);       
2CB6:  MOVLW  00
2CB7:  MOVWF  78
2CB8:  MOVLB  01
2CB9:  MOVF   1D,W
2CBA:  ANDLW  83
2CBB:  IORWF  78,W
2CBC:  MOVWF  1D
2CBD:  MOVLW  0F
2CBE:  MOVWF  78
2CBF:  MOVF   1F,W
2CC0:  ANDLW  F0
2CC1:  IORWF  78,W
2CC2:  MOVWF  1F
....................       delay_us(10); // wait for the ADC to stabilize
2CC3:  MOVLW  0D
2CC4:  MOVWF  77
2CC5:  DECFSZ 77,F
2CC6:  GOTO   4C5
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
2CC7:  BCF    03.0
2CC8:  MOVLB  0B
2CC9:  RLF    2A,W
2CCA:  MOVWF  2E
2CCB:  RLF    2B,W
2CCC:  MOVWF  2F
2CCD:  BCF    03.0
2CCE:  RLF    2E,W
2CCF:  MOVWF  79
2CD0:  RLF    2F,W
2CD1:  MOVWF  7A
2CD2:  MOVF   79,W
2CD3:  ADDLW  3A
2CD4:  MOVWF  78
2CD5:  MOVLW  20
2CD6:  ADDWFC 7A,F
2CD7:  MOVF   78,W
2CD8:  MOVWF  2E
2CD9:  MOVF   7A,W
2CDA:  MOVWF  2F
2CDB:  CLRF   30
2CDC:  MOVLB  00
2CDD:  CALL   073
2CDE:  MOVLB  0B
2CDF:  MOVF   2F,W
2CE0:  MOVWF  05
2CE1:  MOVF   2E,W
2CE2:  MOVWF  04
2CE3:  MOVF   78,W
2CE4:  MOVWF  00
2CE5:  MOVF   79,W
2CE6:  MOVWI  W,[FSR0+01]
....................       
....................       set_adc_channel(CIGS_CURR);
2CE7:  MOVLW  04
2CE8:  MOVWF  78
2CE9:  MOVLB  01
2CEA:  MOVF   1D,W
2CEB:  ANDLW  83
2CEC:  IORWF  78,W
2CED:  MOVWF  1D
2CEE:  MOVLW  0F
2CEF:  MOVWF  78
2CF0:  MOVF   1F,W
2CF1:  ANDLW  F0
2CF2:  IORWF  78,W
2CF3:  MOVWF  1F
....................       current = 0; // reset current value
2CF4:  MOVLB  0B
2CF5:  CLRF   29
2CF6:  CLRF   28
2CF7:  CLRF   27
2CF8:  CLRF   26
....................       for(int k=0; k<10; k++)
2CF9:  CLRF   2C
2CFA:  MOVF   2C,W
2CFB:  SUBLW  09
2CFC:  BTFSS  03.0
2CFD:  GOTO   50F
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
2CFE:  MOVLW  0D
2CFF:  MOVWF  77
2D00:  DECFSZ 77,F
2D01:  GOTO   500
....................             current = current + ad7490_read(AD7490_VIN0); 
2D02:  CLRF   30
2D03:  MOVLB  00
2D04:  CALL   073
2D05:  MOVF   78,W
2D06:  MOVLB  0B
2D07:  ADDWF  26,F
2D08:  MOVF   79,W
2D09:  ADDWFC 27,F
2D0A:  MOVLW  00
2D0B:  ADDWFC 28,F
2D0C:  ADDWFC 29,F
2D0D:  INCF   2C,F
2D0E:  GOTO   4FA
....................       }    
....................       
....................       current = current / 10; // average the current value
2D0F:  BCF    03.1
2D10:  MOVF   29,W
2D11:  MOVLB  0D
2D12:  MOVWF  23
2D13:  MOVLB  0B
2D14:  MOVF   28,W
2D15:  MOVLB  0D
2D16:  MOVWF  22
2D17:  MOVLB  0B
2D18:  MOVF   27,W
2D19:  MOVLB  0D
2D1A:  MOVWF  21
2D1B:  MOVLB  0B
2D1C:  MOVF   26,W
2D1D:  MOVLB  0D
2D1E:  MOVWF  20
2D1F:  CLRF   27
2D20:  CLRF   26
2D21:  CLRF   25
2D22:  MOVLW  0A
2D23:  MOVWF  24
2D24:  MOVLB  00
2D25:  CALL   3DC
2D26:  MOVF   7A,W
2D27:  MOVLB  0B
2D28:  MOVWF  29
2D29:  MOVF   79,W
2D2A:  MOVWF  28
2D2B:  MOVF   78,W
2D2C:  MOVWF  27
2D2D:  MOVF   77,W
2D2E:  MOVWF  26
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
2D2F:  MOVLW  0D
2D30:  MOVWF  77
2D31:  DECFSZ 77,F
2D32:  GOTO   531
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
2D33:  BCF    03.0
2D34:  RLF    2A,W
2D35:  MOVWF  2E
2D36:  RLF    2B,W
2D37:  MOVWF  2F
2D38:  MOVLW  01
2D39:  ADDWF  2E,F
2D3A:  MOVLW  00
2D3B:  ADDWFC 2F,F
2D3C:  BCF    03.0
2D3D:  RLF    2E,W
2D3E:  MOVWF  79
2D3F:  RLF    2F,W
2D40:  MOVWF  7A
2D41:  MOVF   79,W
2D42:  ADDLW  3A
2D43:  MOVWF  04
2D44:  MOVLW  20
2D45:  ADDWFC 7A,W
2D46:  MOVWF  05
2D47:  MOVF   26,W
2D48:  MOVWF  00
2D49:  MOVF   27,W
2D4A:  MOVWI  W,[FSR0+01]
2D4B:  INCF   2A,F
2D4C:  BTFSC  03.2
2D4D:  INCF   2B,F
2D4E:  GOTO   4A8
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
2D4F:  MOVLW  33
2D50:  MOVLB  03
2D51:  MOVWF  11
2D52:  MOVLW  04
2D53:  MOVWF  12
2D54:  MOVLP  08
2D55:  MOVLB  00
2D56:  CALL   0D4
2D57:  MOVLP  28
....................    // read PD value
....................    set_adc_channel(PD);
2D58:  MOVLW  00
2D59:  MOVWF  78
2D5A:  MOVLB  01
2D5B:  MOVF   1D,W
2D5C:  ANDLW  83
2D5D:  IORWF  78,W
2D5E:  MOVWF  1D
2D5F:  MOVLW  0F
2D60:  MOVWF  78
2D61:  MOVF   1F,W
2D62:  ANDLW  F0
2D63:  IORWF  78,W
2D64:  MOVWF  1F
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS);
2D65:  BCF    10.0
2D66:  MOVLB  02
2D67:  BCF    10.0
2D68:  MOVLB  00
2D69:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... #separate
.................... void mode_test_iv()
*
1B59:  MOVLW  64
1B5A:  MOVLB  0B
1B5B:  MOVWF  25
.................... {
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
1B5C:  MOVLW  6E
1B5D:  MOVLB  03
1B5E:  MOVWF  11
1B5F:  MOVLW  04
1B60:  MOVWF  12
1B61:  MOVLP  08
1B62:  MOVLB  00
1B63:  CALL   0D4
1B64:  MOVLP  18
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
1B65:  MOVLW  79
1B66:  MOVLB  03
1B67:  MOVWF  11
1B68:  MOVLW  04
1B69:  MOVWF  12
1B6A:  BCF    03.0
1B6B:  MOVLW  0E
1B6C:  MOVLB  0C
1B6D:  MOVWF  5E
1B6E:  MOVLP  08
1B6F:  MOVLB  00
1B70:  CALL   122
1B71:  MOVLP  18
1B72:  MOVLB  0B
1B73:  MOVF   25,W
1B74:  MOVLB  0C
1B75:  MOVWF  4C
1B76:  MOVLW  1B
1B77:  MOVWF  4D
1B78:  MOVLP  10
1B79:  MOVLB  00
1B7A:  CALL   71C
1B7B:  MOVLP  18
1B7C:  MOVLW  0D
1B7D:  MOVLB  0F
1B7E:  MOVWF  43
1B7F:  MOVLP  08
1B80:  MOVLB  00
1B81:  CALL   0AF
1B82:  MOVLP  18
1B83:  MOVLW  0A
1B84:  MOVLB  0F
1B85:  MOVWF  43
1B86:  MOVLP  08
1B87:  MOVLB  00
1B88:  CALL   0AF
1B89:  MOVLP  18
....................    //unsigned int16 test = 0x9330;
....................    //fprintf (PC, "Test value: %04LX\r\n", test);
....................    output_high(EN_MEAS_VOL);
1B8A:  MOVLB  01
1B8B:  BCF    0C.5
1B8C:  MOVLB  02
1B8D:  BSF    0C.5
....................    output_high(CONNECT_CIGS);
1B8E:  MOVLB  01
1B8F:  BCF    10.0
1B90:  MOVLB  02
1B91:  BSF    10.0
....................    output_low(EN_NPWR); // Enable NPWR
1B92:  MOVLB  01
1B93:  BCF    0C.4
1B94:  MOVLB  02
1B95:  BCF    0C.4
....................    unsigned int16 readdata;
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_VDD);   
1B96:  MOVLW  90
1B97:  MOVWF  18
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
1B98:  MOVLB  0B
1B99:  CLRF   29
1B9A:  CLRF   28
1B9B:  MOVF   29,F
1B9C:  BTFSS  03.2
1B9D:  GOTO   40F
1B9E:  MOVF   25,W
1B9F:  SUBWF  28,W
1BA0:  BTFSC  03.0
1BA1:  GOTO   40F
....................    {    
....................       // set DAC value
....................       dac_write(count);
1BA2:  MOVF   28,W
1BA3:  MOVLB  02
1BA4:  MOVWF  19
....................       delay_ms(100); // wait for the DAC to stabilize
1BA5:  MOVLW  64
1BA6:  MOVLB  0F
1BA7:  MOVWF  57
1BA8:  MOVLP  08
1BA9:  MOVLB  00
1BAA:  CALL   7B6
1BAB:  MOVLP  18
....................       readdata = ad7490_readdata(0x8330);  // read voltage at adc pin
1BAC:  MOVLW  83
1BAD:  MOVLB  0B
1BAE:  MOVWF  2B
1BAF:  MOVLW  30
1BB0:  MOVWF  2A
1BB1:  MOVLP  10
1BB2:  MOVLB  00
1BB3:  CALL   783
1BB4:  MOVLP  18
1BB5:  MOVF   79,W
1BB6:  MOVLB  0B
1BB7:  MOVWF  27
1BB8:  MOVF   78,W
1BB9:  MOVWF  26
....................       fprintf(PC, "%04LX, ", readdata);
1BBA:  MOVF   27,W
1BBB:  MOVLB  0E
1BBC:  MOVWF  4E
1BBD:  MOVLW  37
1BBE:  MOVWF  4F
1BBF:  MOVLP  08
1BC0:  MOVLB  00
1BC1:  CALL   479
1BC2:  MOVLP  18
1BC3:  MOVLB  0B
1BC4:  MOVF   26,W
1BC5:  MOVLB  0E
1BC6:  MOVWF  4E
1BC7:  MOVLW  37
1BC8:  MOVWF  4F
1BC9:  MOVLP  08
1BCA:  MOVLB  00
1BCB:  CALL   479
1BCC:  MOVLP  18
1BCD:  MOVLW  2C
1BCE:  MOVLB  0F
1BCF:  MOVWF  43
1BD0:  MOVLP  08
1BD1:  MOVLB  00
1BD2:  CALL   0AF
1BD3:  MOVLP  18
1BD4:  MOVLW  20
1BD5:  MOVLB  0F
1BD6:  MOVWF  43
1BD7:  MOVLP  08
1BD8:  MOVLB  00
1BD9:  CALL   0AF
1BDA:  MOVLP  18
....................       readdata = ad7490_readdata(0xAF30);  // read voltage at adc pin
1BDB:  MOVLW  AF
1BDC:  MOVLB  0B
1BDD:  MOVWF  2B
1BDE:  MOVLW  30
1BDF:  MOVWF  2A
1BE0:  MOVLP  10
1BE1:  MOVLB  00
1BE2:  CALL   783
1BE3:  MOVLP  18
1BE4:  MOVF   79,W
1BE5:  MOVLB  0B
1BE6:  MOVWF  27
1BE7:  MOVF   78,W
1BE8:  MOVWF  26
....................       fprintf(PC, "%04LX\r\n", readdata);
1BE9:  MOVF   27,W
1BEA:  MOVLB  0E
1BEB:  MOVWF  4E
1BEC:  MOVLW  37
1BED:  MOVWF  4F
1BEE:  MOVLP  08
1BEF:  MOVLB  00
1BF0:  CALL   479
1BF1:  MOVLP  18
1BF2:  MOVLB  0B
1BF3:  MOVF   26,W
1BF4:  MOVLB  0E
1BF5:  MOVWF  4E
1BF6:  MOVLW  37
1BF7:  MOVWF  4F
1BF8:  MOVLP  08
1BF9:  MOVLB  00
1BFA:  CALL   479
1BFB:  MOVLP  18
1BFC:  MOVLW  0D
1BFD:  MOVLB  0F
1BFE:  MOVWF  43
1BFF:  MOVLP  08
1C00:  MOVLB  00
1C01:  CALL   0AF
1C02:  MOVLP  18
1C03:  MOVLW  0A
1C04:  MOVLB  0F
1C05:  MOVWF  43
1C06:  MOVLP  08
1C07:  MOVLB  00
1C08:  CALL   0AF
1C09:  MOVLP  18
1C0A:  MOVLB  0B
1C0B:  INCF   28,F
1C0C:  BTFSC  03.2
1C0D:  INCF   29,F
1C0E:  GOTO   39B
....................    }
1C0F:  MOVLP  28
1C10:  MOVLB  00
1C11:  GOTO   650 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
1DB3:  MOVLW  83
1DB4:  MOVLB  03
1DB5:  MOVWF  11
1DB6:  MOVLW  04
1DB7:  MOVWF  12
1DB8:  MOVLP  08
1DB9:  MOVLB  00
1DBA:  CALL   0D4
1DBB:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
1DBC:  MOVLB  0B
1DBD:  MOVF   25,W
1DBE:  MOVWF  04
1DBF:  MOVF   26,W
1DC0:  MOVWF  05
1DC1:  MOVIW  [FSR0+00],W
1DC2:  MOVWF  27
....................    piclog_make(cmd, 0x00); // Log the command execution
1DC3:  MOVF   27,W
1DC4:  MOVLB  0E
1DC5:  MOVWF  3C
1DC6:  CLRF   3D
1DC7:  MOVLP  10
1DC8:  MOVLB  00
1DC9:  CALL   3A7
1DCA:  MOVLP  18
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
1DCB:  MOVLB  0B
1DCC:  CLRF   2B
1DCD:  CLRF   2A
1DCE:  CLRF   29
1DCF:  CLRF   28
1DD0:  MOVF   2B,F
1DD1:  BTFSS  03.2
1DD2:  GOTO   5FD
1DD3:  MOVF   2A,W
1DD4:  SUBLW  F4
1DD5:  BTFSS  03.0
1DD6:  GOTO   5FD
1DD7:  BTFSS  03.2
1DD8:  GOTO   5DD
1DD9:  MOVF   29,W
1DDA:  SUBLW  23
1DDB:  BTFSS  03.0
1DDC:  GOTO   5FD
....................       sector_erase(mis_fm, address); // Erase each sector
1DDD:  MOVLB  08
1DDE:  MOVF   5D,W
1DDF:  MOVLB  0B
1DE0:  MOVWF  31
1DE1:  MOVLB  08
1DE2:  MOVF   5C,W
1DE3:  MOVLB  0B
1DE4:  MOVWF  30
1DE5:  MOVLB  08
1DE6:  MOVF   5B,W
1DE7:  MOVLB  0B
1DE8:  MOVWF  2F
1DE9:  MOVLB  08
1DEA:  MOVF   5A,W
1DEB:  MOVLB  0B
1DEC:  MOVWF  2E
1DED:  MOVF   2B,W
1DEE:  MOVWF  35
1DEF:  MOVF   2A,W
1DF0:  MOVWF  34
1DF1:  MOVF   29,W
1DF2:  MOVWF  33
1DF3:  MOVF   28,W
1DF4:  MOVWF  32
1DF5:  MOVLB  00
1DF6:  CALL   412
1DF7:  MOVLW  01
1DF8:  MOVLB  0B
1DF9:  ADDWF  2A,F
1DFA:  MOVLW  00
1DFB:  ADDWFC 2B,F
1DFC:  GOTO   5D0
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
1DFD:  MOVF   27,W
1DFE:  MOVLB  0E
1DFF:  MOVWF  3C
1E00:  MOVLW  02
1E01:  MOVWF  3D
1E02:  MOVLP  10
1E03:  MOVLB  00
1E04:  CALL   3A7
1E05:  MOVLP  18
....................    fprintf(PC, "End Flash Erase All\r\n");
1E06:  MOVLW  8F
1E07:  MOVLB  03
1E08:  MOVWF  11
1E09:  MOVLW  04
1E0A:  MOVWF  12
1E0B:  MOVLP  08
1E0C:  MOVLB  00
1E0D:  CALL   0D4
1E0E:  MOVLP  18
1E0F:  MOVLP  28
1E10:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
1E11:  MOVLW  9A
1E12:  MOVLB  03
1E13:  MOVWF  11
1E14:  MOVLW  04
1E15:  MOVWF  12
1E16:  MOVLP  08
1E17:  MOVLB  00
1E18:  CALL   0D4
1E19:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1E1A:  MOVLB  0B
1E1B:  MOVF   25,W
1E1C:  MOVWF  04
1E1D:  MOVF   26,W
1E1E:  MOVWF  05
1E1F:  ADDFSR 00,FSR0
1E20:  MOVF   00,W
1E21:  MOVWF  27
1E22:  MOVF   25,W
1E23:  MOVWF  04
1E24:  MOVF   26,W
1E25:  MOVWF  05
1E26:  ADDFSR 01,FSR0
1E27:  MOVF   00,W
1E28:  CLRF   31
1E29:  CLRF   30
1E2A:  CLRF   2F
1E2B:  MOVWF  2E
1E2C:  MOVWF  31
1E2D:  CLRF   2E
1E2E:  CLRF   2F
1E2F:  CLRF   30
1E30:  MOVF   25,W
1E31:  MOVWF  04
1E32:  MOVF   26,W
1E33:  MOVWF  05
1E34:  ADDFSR 02,FSR0
1E35:  MOVF   00,W
1E36:  CLRF   36
1E37:  CLRF   35
1E38:  CLRF   34
1E39:  MOVWF  33
1E3A:  MOVF   34,W
1E3B:  MOVWF  7A
1E3C:  MOVF   33,W
1E3D:  MOVWF  79
1E3E:  CLRF   77
1E3F:  CLRF   78
1E40:  MOVF   77,W
1E41:  IORWF  2E,F
1E42:  MOVF   78,W
1E43:  IORWF  2F,F
1E44:  MOVF   33,W
1E45:  IORWF  30,F
1E46:  MOVF   34,W
1E47:  IORWF  31,F
1E48:  MOVF   25,W
1E49:  MOVWF  04
1E4A:  MOVF   26,W
1E4B:  MOVWF  05
1E4C:  ADDFSR 03,FSR0
1E4D:  MOVF   00,W
1E4E:  CLRF   36
1E4F:  CLRF   35
1E50:  CLRF   34
1E51:  MOVWF  33
1E52:  MOVF   35,W
1E53:  MOVWF  7A
1E54:  MOVF   34,W
1E55:  MOVWF  79
1E56:  MOVF   33,W
1E57:  MOVWF  78
1E58:  CLRF   77
1E59:  MOVF   77,W
1E5A:  IORWF  2E,F
1E5B:  MOVF   33,W
1E5C:  IORWF  2F,F
1E5D:  MOVF   34,W
1E5E:  IORWF  30,F
1E5F:  MOVF   35,W
1E60:  IORWF  31,F
1E61:  MOVF   25,W
1E62:  MOVWF  04
1E63:  MOVF   26,W
1E64:  MOVWF  05
1E65:  MOVIW  [FSR0+04],W
1E66:  MOVWF  77
1E67:  CLRF   78
1E68:  CLRF   79
1E69:  CLRF   7A
1E6A:  MOVF   77,W
1E6B:  IORWF  2E,W
1E6C:  MOVWF  28
1E6D:  MOVF   78,W
1E6E:  IORWF  2F,W
1E6F:  MOVWF  29
1E70:  MOVF   79,W
1E71:  IORWF  30,W
1E72:  MOVWF  2A
1E73:  MOVF   7A,W
1E74:  IORWF  31,W
1E75:  MOVWF  2B
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
1E76:  MOVLW  A9
1E77:  MOVLB  03
1E78:  MOVWF  11
1E79:  MOVLW  04
1E7A:  MOVWF  12
1E7B:  BCF    03.0
1E7C:  MOVLW  13
1E7D:  MOVLB  0C
1E7E:  MOVWF  5E
1E7F:  MOVLP  08
1E80:  MOVLB  00
1E81:  CALL   122
1E82:  MOVLP  18
1E83:  MOVLB  0B
1E84:  MOVF   2B,W
1E85:  MOVLB  0E
1E86:  MOVWF  4E
1E87:  MOVLW  37
1E88:  MOVWF  4F
1E89:  MOVLP  08
1E8A:  MOVLB  00
1E8B:  CALL   479
1E8C:  MOVLP  18
1E8D:  MOVLB  0B
1E8E:  MOVF   2A,W
1E8F:  MOVLB  0E
1E90:  MOVWF  4E
1E91:  MOVLW  37
1E92:  MOVWF  4F
1E93:  MOVLP  08
1E94:  MOVLB  00
1E95:  CALL   479
1E96:  MOVLP  18
1E97:  MOVLB  0B
1E98:  MOVF   29,W
1E99:  MOVLB  0E
1E9A:  MOVWF  4E
1E9B:  MOVLW  37
1E9C:  MOVWF  4F
1E9D:  MOVLP  08
1E9E:  MOVLB  00
1E9F:  CALL   479
1EA0:  MOVLP  18
1EA1:  MOVLB  0B
1EA2:  MOVF   28,W
1EA3:  MOVLB  0E
1EA4:  MOVWF  4E
1EA5:  MOVLW  37
1EA6:  MOVWF  4F
1EA7:  MOVLP  08
1EA8:  MOVLB  00
1EA9:  CALL   479
1EAA:  MOVLP  18
1EAB:  MOVLW  0D
1EAC:  MOVLB  0F
1EAD:  MOVWF  43
1EAE:  MOVLP  08
1EAF:  MOVLB  00
1EB0:  CALL   0AF
1EB1:  MOVLP  18
1EB2:  MOVLW  0A
1EB3:  MOVLB  0F
1EB4:  MOVWF  43
1EB5:  MOVLP  08
1EB6:  MOVLB  00
1EB7:  CALL   0AF
1EB8:  MOVLP  18
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
1EB9:  MOVLB  0B
1EBA:  MOVF   27,W
1EBB:  MOVLB  0E
1EBC:  MOVWF  3C
1EBD:  MOVLW  01
1EBE:  MOVWF  3D
1EBF:  MOVLP  10
1EC0:  MOVLB  00
1EC1:  CALL   3A7
1EC2:  MOVLP  18
....................    
....................    sector_erase(mis_fm, sector_address);
1EC3:  MOVLB  08
1EC4:  MOVF   5D,W
1EC5:  MOVLB  0B
1EC6:  MOVWF  31
1EC7:  MOVLB  08
1EC8:  MOVF   5C,W
1EC9:  MOVLB  0B
1ECA:  MOVWF  30
1ECB:  MOVLB  08
1ECC:  MOVF   5B,W
1ECD:  MOVLB  0B
1ECE:  MOVWF  2F
1ECF:  MOVLB  08
1ED0:  MOVF   5A,W
1ED1:  MOVLB  0B
1ED2:  MOVWF  2E
1ED3:  MOVF   2B,W
1ED4:  MOVWF  35
1ED5:  MOVF   2A,W
1ED6:  MOVWF  34
1ED7:  MOVF   29,W
1ED8:  MOVWF  33
1ED9:  MOVF   28,W
1EDA:  MOVWF  32
1EDB:  MOVLB  00
1EDC:  CALL   412
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
1EDD:  MOVLB  0B
1EDE:  MOVF   27,W
1EDF:  MOVLB  0E
1EE0:  MOVWF  3C
1EE1:  MOVLW  02
1EE2:  MOVWF  3D
1EE3:  MOVLP  10
1EE4:  MOVLB  00
1EE5:  CALL   3A7
1EE6:  MOVLP  18
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
1EE7:  MOVLW  B7
1EE8:  MOVLB  03
1EE9:  MOVWF  11
1EEA:  MOVLW  04
1EEB:  MOVWF  12
1EEC:  MOVLP  08
1EED:  MOVLB  00
1EEE:  CALL   0D4
1EEF:  MOVLP  18
1EF0:  MOVLP  28
1EF1:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
1EF2:  MOVLW  C5
1EF3:  MOVLB  03
1EF4:  MOVWF  11
1EF5:  MOVLW  04
1EF6:  MOVWF  12
1EF7:  MOVLP  08
1EF8:  MOVLB  00
1EF9:  CALL   0D4
1EFA:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1EFB:  MOVLB  0B
1EFC:  MOVF   25,W
1EFD:  MOVWF  04
1EFE:  MOVF   26,W
1EFF:  MOVWF  05
1F00:  ADDFSR 00,FSR0
1F01:  MOVF   00,W
1F02:  MOVWF  27
1F03:  MOVF   25,W
1F04:  MOVWF  04
1F05:  MOVF   26,W
1F06:  MOVWF  05
1F07:  ADDFSR 01,FSR0
1F08:  MOVF   00,W
1F09:  CLRF   31
1F0A:  CLRF   30
1F0B:  CLRF   2F
1F0C:  MOVWF  2E
1F0D:  MOVWF  31
1F0E:  CLRF   2E
1F0F:  CLRF   2F
1F10:  CLRF   30
1F11:  MOVF   25,W
1F12:  MOVWF  04
1F13:  MOVF   26,W
1F14:  MOVWF  05
1F15:  ADDFSR 02,FSR0
1F16:  MOVF   00,W
1F17:  CLRF   36
1F18:  CLRF   35
1F19:  CLRF   34
1F1A:  MOVWF  33
1F1B:  MOVF   34,W
1F1C:  MOVWF  7A
1F1D:  MOVF   33,W
1F1E:  MOVWF  79
1F1F:  CLRF   77
1F20:  CLRF   78
1F21:  MOVF   77,W
1F22:  IORWF  2E,F
1F23:  MOVF   78,W
1F24:  IORWF  2F,F
1F25:  MOVF   33,W
1F26:  IORWF  30,F
1F27:  MOVF   34,W
1F28:  IORWF  31,F
1F29:  MOVF   25,W
1F2A:  MOVWF  04
1F2B:  MOVF   26,W
1F2C:  MOVWF  05
1F2D:  ADDFSR 03,FSR0
1F2E:  MOVF   00,W
1F2F:  CLRF   36
1F30:  CLRF   35
1F31:  CLRF   34
1F32:  MOVWF  33
1F33:  MOVF   35,W
1F34:  MOVWF  7A
1F35:  MOVF   34,W
1F36:  MOVWF  79
1F37:  MOVF   33,W
1F38:  MOVWF  78
1F39:  CLRF   77
1F3A:  MOVF   77,W
1F3B:  IORWF  2E,F
1F3C:  MOVF   33,W
1F3D:  IORWF  2F,F
1F3E:  MOVF   34,W
1F3F:  IORWF  30,F
1F40:  MOVF   35,W
1F41:  IORWF  31,F
1F42:  MOVF   25,W
1F43:  MOVWF  04
1F44:  MOVF   26,W
1F45:  MOVWF  05
1F46:  MOVIW  [FSR0+04],W
1F47:  MOVWF  77
1F48:  CLRF   78
1F49:  CLRF   79
1F4A:  CLRF   7A
1F4B:  MOVF   77,W
1F4C:  IORWF  2E,W
1F4D:  MOVWF  28
1F4E:  MOVF   78,W
1F4F:  IORWF  2F,W
1F50:  MOVWF  29
1F51:  MOVF   79,W
1F52:  IORWF  30,W
1F53:  MOVWF  2A
1F54:  MOVF   7A,W
1F55:  IORWF  31,W
1F56:  MOVWF  2B
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
1F57:  MOVLW  D3
1F58:  MOVLB  03
1F59:  MOVWF  11
1F5A:  MOVLW  04
1F5B:  MOVWF  12
1F5C:  BCF    03.0
1F5D:  MOVLW  16
1F5E:  MOVLB  0C
1F5F:  MOVWF  5E
1F60:  MOVLP  08
1F61:  MOVLB  00
1F62:  CALL   122
1F63:  MOVLP  18
1F64:  MOVLB  0B
1F65:  MOVF   2B,W
1F66:  MOVLB  0E
1F67:  MOVWF  4E
1F68:  MOVLW  37
1F69:  MOVWF  4F
1F6A:  MOVLP  08
1F6B:  MOVLB  00
1F6C:  CALL   479
1F6D:  MOVLP  18
1F6E:  MOVLB  0B
1F6F:  MOVF   2A,W
1F70:  MOVLB  0E
1F71:  MOVWF  4E
1F72:  MOVLW  37
1F73:  MOVWF  4F
1F74:  MOVLP  08
1F75:  MOVLB  00
1F76:  CALL   479
1F77:  MOVLP  18
1F78:  MOVLB  0B
1F79:  MOVF   29,W
1F7A:  MOVLB  0E
1F7B:  MOVWF  4E
1F7C:  MOVLW  37
1F7D:  MOVWF  4F
1F7E:  MOVLP  08
1F7F:  MOVLB  00
1F80:  CALL   479
1F81:  MOVLP  18
1F82:  MOVLB  0B
1F83:  MOVF   28,W
1F84:  MOVLB  0E
1F85:  MOVWF  4E
1F86:  MOVLW  37
1F87:  MOVWF  4F
1F88:  MOVLP  08
1F89:  MOVLB  00
1F8A:  CALL   479
1F8B:  MOVLP  18
1F8C:  MOVLW  0D
1F8D:  MOVLB  0F
1F8E:  MOVWF  43
1F8F:  MOVLP  08
1F90:  MOVLB  00
1F91:  CALL   0AF
1F92:  MOVLP  18
1F93:  MOVLW  0A
1F94:  MOVLB  0F
1F95:  MOVWF  43
1F96:  MOVLP  08
1F97:  MOVLB  00
1F98:  CALL   0AF
1F99:  MOVLP  18
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
1F9A:  MOVLB  0B
1F9B:  MOVF   27,W
1F9C:  MOVLB  0E
1F9D:  MOVWF  3C
1F9E:  MOVLW  01
1F9F:  MOVWF  3D
1FA0:  MOVLP  10
1FA1:  MOVLB  00
1FA2:  CALL   3A7
1FA3:  MOVLP  18
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
1FA4:  MOVLB  08
1FA5:  MOVF   5D,W
1FA6:  MOVLB  0F
1FA7:  MOVWF  41
1FA8:  MOVLB  08
1FA9:  MOVF   5C,W
1FAA:  MOVLB  0F
1FAB:  MOVWF  40
1FAC:  MOVLB  08
1FAD:  MOVF   5B,W
1FAE:  MOVLB  0F
1FAF:  MOVWF  3F
1FB0:  MOVLB  08
1FB1:  MOVF   5A,W
1FB2:  MOVLB  0F
1FB3:  MOVWF  3E
1FB4:  CLRF   45
1FB5:  CLRF   44
1FB6:  CLRF   43
1FB7:  CLRF   42
1FB8:  MOVLP  10
1FB9:  MOVLB  00
1FBA:  CALL   23B
1FBB:  MOVLP  18
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
1FBC:  MOVLB  0B
1FBD:  MOVF   27,W
1FBE:  MOVLB  0E
1FBF:  MOVWF  3C
1FC0:  MOVLW  02
1FC1:  MOVWF  3D
1FC2:  MOVLP  10
1FC3:  MOVLB  00
1FC4:  CALL   3A7
1FC5:  MOVLP  18
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
1FC6:  MOVLW  E2
1FC7:  MOVLB  03
1FC8:  MOVWF  11
1FC9:  MOVLW  04
1FCA:  MOVWF  12
1FCB:  MOVLP  08
1FCC:  MOVLB  00
1FCD:  CALL   0D4
1FCE:  MOVLP  18
1FCF:  MOVLP  28
1FD0:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
2000:  MOVLW  EF
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  04
2004:  MOVWF  12
2005:  MOVLP  08
2006:  MOVLB  00
2007:  CALL   0D4
2008:  MOVLP  20
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
2009:  MOVLB  0B
200A:  MOVF   25,W
200B:  MOVWF  04
200C:  MOVF   26,W
200D:  MOVWF  05
200E:  ADDFSR 00,FSR0
200F:  MOVF   00,W
2010:  MOVLB  0C
2011:  MOVWF  2E
2012:  MOVLB  0E
2013:  MOVWF  3C
2014:  MOVLW  01
2015:  MOVWF  3D
2016:  MOVLP  10
2017:  MOVLB  00
2018:  CALL   3A7
2019:  MOVLP  20
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
201A:  MOVLB  0B
201B:  CLRF   27
201C:  CLRF   28
201D:  CLRF   29
201E:  CLRF   2A
201F:  CLRF   2B
2020:  CLRF   2C
2021:  CLRF   2D
....................    
....................    flash_write_param.id = parameter[0];
2022:  MOVF   25,W
2023:  MOVWF  04
2024:  MOVF   26,W
2025:  MOVWF  05
2026:  MOVIW  [FSR0+00],W
2027:  MOVWF  27
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
2028:  MOVF   25,W
2029:  MOVWF  04
202A:  MOVF   26,W
202B:  MOVWF  05
202C:  ADDFSR 01,FSR0
202D:  MOVF   00,W
202E:  MOVLB  0C
202F:  CLRF   31
2030:  CLRF   30
2031:  CLRF   2F
2032:  MOVWF  2E
2033:  MOVWF  31
2034:  CLRF   2E
2035:  CLRF   2F
2036:  CLRF   30
2037:  MOVLB  0B
2038:  MOVF   25,W
2039:  MOVWF  04
203A:  MOVF   26,W
203B:  MOVWF  05
203C:  ADDFSR 02,FSR0
203D:  MOVF   00,W
203E:  MOVLB  0C
203F:  CLRF   36
2040:  CLRF   35
2041:  CLRF   34
2042:  MOVWF  33
2043:  MOVF   34,W
2044:  MOVWF  7A
2045:  MOVF   33,W
2046:  MOVWF  79
2047:  CLRF   77
2048:  CLRF   78
2049:  MOVF   77,W
204A:  IORWF  2E,F
204B:  MOVF   78,W
204C:  IORWF  2F,F
204D:  MOVF   33,W
204E:  IORWF  30,F
204F:  MOVF   34,W
2050:  IORWF  31,F
2051:  MOVLB  0B
2052:  MOVF   25,W
2053:  MOVWF  04
2054:  MOVF   26,W
2055:  MOVWF  05
2056:  ADDFSR 03,FSR0
2057:  MOVF   00,W
2058:  MOVLB  0C
2059:  CLRF   36
205A:  CLRF   35
205B:  CLRF   34
205C:  MOVWF  33
205D:  MOVF   35,W
205E:  MOVWF  7A
205F:  MOVF   34,W
2060:  MOVWF  79
2061:  MOVF   33,W
2062:  MOVWF  78
2063:  CLRF   77
2064:  MOVF   77,W
2065:  IORWF  2E,F
2066:  MOVF   33,W
2067:  IORWF  2F,F
2068:  MOVF   34,W
2069:  IORWF  30,F
206A:  MOVF   35,W
206B:  IORWF  31,F
206C:  MOVLB  0B
206D:  MOVF   25,W
206E:  MOVWF  04
206F:  MOVF   26,W
2070:  MOVWF  05
2071:  MOVIW  [FSR0+04],W
2072:  MOVWF  77
2073:  CLRF   78
2074:  CLRF   79
2075:  CLRF   7A
2076:  MOVF   77,W
2077:  MOVLB  0C
2078:  IORWF  2E,W
2079:  MOVLB  0B
207A:  MOVWF  28
207B:  MOVF   78,W
207C:  MOVLB  0C
207D:  IORWF  2F,W
207E:  MOVLB  0B
207F:  MOVWF  29
2080:  MOVF   79,W
2081:  MOVLB  0C
2082:  IORWF  30,W
2083:  MOVLB  0B
2084:  MOVWF  2A
2085:  MOVF   7A,W
2086:  MOVLB  0C
2087:  IORWF  31,W
2088:  MOVLB  0B
2089:  MOVWF  2B
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
208A:  MOVF   25,W
208B:  MOVWF  04
208C:  MOVF   26,W
208D:  MOVWF  05
208E:  ADDFSR 07,FSR0
208F:  MOVF   00,W
2090:  MOVLB  0C
2091:  CLRF   2F
2092:  MOVWF  2E
2093:  MOVWF  2F
2094:  CLRF   2E
2095:  MOVLB  0B
2096:  MOVF   25,W
2097:  MOVWF  04
2098:  MOVF   26,W
2099:  MOVWF  05
209A:  MOVIW  [FSR0+08],W
209B:  CLRF   7A
209C:  MOVLB  0C
209D:  IORWF  2E,W
209E:  MOVLB  0B
209F:  MOVWF  2C
20A0:  MOVF   7A,W
20A1:  MOVLB  0C
20A2:  IORWF  2F,W
20A3:  MOVLB  0B
20A4:  MOVWF  2D
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
20A5:  MOVLW  FC
20A6:  MOVLB  03
20A7:  MOVWF  11
20A8:  MOVLW  04
20A9:  MOVWF  12
20AA:  BCF    03.0
20AB:  MOVLW  0C
20AC:  MOVLB  0C
20AD:  MOVWF  5E
20AE:  MOVLP  08
20AF:  MOVLB  00
20B0:  CALL   122
20B1:  MOVLP  20
20B2:  MOVLB  0B
20B3:  MOVF   27,W
20B4:  MOVLB  0E
20B5:  MOVWF  4E
20B6:  MOVLW  37
20B7:  MOVWF  4F
20B8:  MOVLP  08
20B9:  MOVLB  00
20BA:  CALL   479
20BB:  MOVLP  20
20BC:  MOVLW  0D
20BD:  MOVLB  0F
20BE:  MOVWF  43
20BF:  MOVLP  08
20C0:  MOVLB  00
20C1:  CALL   0AF
20C2:  MOVLP  20
20C3:  MOVLW  0A
20C4:  MOVLB  0F
20C5:  MOVWF  43
20C6:  MOVLP  08
20C7:  MOVLB  00
20C8:  CALL   0AF
20C9:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
20CA:  MOVLW  06
20CB:  MOVLB  03
20CC:  MOVWF  11
20CD:  MOVLW  05
20CE:  MOVWF  12
20CF:  BCF    03.0
20D0:  MOVLW  0E
20D1:  MOVLB  0C
20D2:  MOVWF  5E
20D3:  MOVLP  08
20D4:  MOVLB  00
20D5:  CALL   122
20D6:  MOVLP  20
20D7:  MOVLB  0B
20D8:  MOVF   2B,W
20D9:  MOVLB  0E
20DA:  MOVWF  4E
20DB:  MOVLW  37
20DC:  MOVWF  4F
20DD:  MOVLP  08
20DE:  MOVLB  00
20DF:  CALL   479
20E0:  MOVLP  20
20E1:  MOVLB  0B
20E2:  MOVF   2A,W
20E3:  MOVLB  0E
20E4:  MOVWF  4E
20E5:  MOVLW  37
20E6:  MOVWF  4F
20E7:  MOVLP  08
20E8:  MOVLB  00
20E9:  CALL   479
20EA:  MOVLP  20
20EB:  MOVLB  0B
20EC:  MOVF   29,W
20ED:  MOVLB  0E
20EE:  MOVWF  4E
20EF:  MOVLW  37
20F0:  MOVWF  4F
20F1:  MOVLP  08
20F2:  MOVLB  00
20F3:  CALL   479
20F4:  MOVLP  20
20F5:  MOVLB  0B
20F6:  MOVF   28,W
20F7:  MOVLB  0E
20F8:  MOVWF  4E
20F9:  MOVLW  37
20FA:  MOVWF  4F
20FB:  MOVLP  08
20FC:  MOVLB  00
20FD:  CALL   479
20FE:  MOVLP  20
20FF:  MOVLW  0D
2100:  MOVLB  0F
2101:  MOVWF  43
2102:  MOVLP  08
2103:  MOVLB  00
2104:  CALL   0AF
2105:  MOVLP  20
2106:  MOVLW  0A
2107:  MOVLB  0F
2108:  MOVWF  43
2109:  MOVLP  08
210A:  MOVLB  00
210B:  CALL   0AF
210C:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
210D:  MOVLW  11
210E:  MOVLB  03
210F:  MOVWF  11
2110:  MOVLW  05
2111:  MOVWF  12
2112:  BCF    03.0
2113:  MOVLW  0E
2114:  MOVLB  0C
2115:  MOVWF  5E
2116:  MOVLP  08
2117:  MOVLB  00
2118:  CALL   122
2119:  MOVLP  20
211A:  MOVLB  0B
211B:  MOVF   2D,W
211C:  MOVLB  0E
211D:  MOVWF  4E
211E:  MOVLW  37
211F:  MOVWF  4F
2120:  MOVLP  08
2121:  MOVLB  00
2122:  CALL   479
2123:  MOVLP  20
2124:  MOVLB  0B
2125:  MOVF   2C,W
2126:  MOVLB  0E
2127:  MOVWF  4E
2128:  MOVLW  37
2129:  MOVWF  4F
212A:  MOVLP  08
212B:  MOVLB  00
212C:  CALL   479
212D:  MOVLP  20
212E:  MOVLW  0D
212F:  MOVLB  0F
2130:  MOVWF  43
2131:  MOVLP  08
2132:  MOVLB  00
2133:  CALL   0AF
2134:  MOVLP  20
2135:  MOVLW  0A
2136:  MOVLB  0F
2137:  MOVWF  43
2138:  MOVLP  08
2139:  MOVLB  00
213A:  CALL   0AF
213B:  MOVLP  20
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
213C:  MOVLB  0B
213D:  MOVF   27,W
213E:  MOVLB  0E
213F:  MOVWF  3C
2140:  CLRF   3D
2141:  MOVLP  10
2142:  MOVLB  00
2143:  CALL   3A7
2144:  MOVLP  20
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
2145:  MOVLW  1C
2146:  MOVLB  03
2147:  MOVWF  11
2148:  MOVLW  05
2149:  MOVWF  12
214A:  MOVLP  08
214B:  MOVLB  00
214C:  CALL   0D4
214D:  MOVLP  20
....................    for (p = 0; p < flash_write_param.packetnum; p++)
214E:  MOVLB  0B
214F:  CLRF   6F
2150:  CLRF   6E
2151:  MOVF   6F,W
2152:  SUBWF  2D,W
2153:  BTFSS  03.0
2154:  GOTO   1F2
2155:  BTFSS  03.2
2156:  GOTO   15B
2157:  MOVF   2C,W
2158:  SUBWF  6E,W
2159:  BTFSC  03.0
215A:  GOTO   1F2
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
215B:  RLF    6E,W
215C:  MOVLB  0C
215D:  MOVWF  20
215E:  MOVLB  0B
215F:  RLF    6F,W
2160:  MOVLB  0C
2161:  MOVWF  21
2162:  RLF    20,F
2163:  RLF    21,F
2164:  RLF    20,F
2165:  RLF    21,F
2166:  RLF    20,F
2167:  RLF    21,F
2168:  RLF    20,F
2169:  RLF    21,F
216A:  RLF    20,F
216B:  RLF    21,F
216C:  MOVLW  C0
216D:  ANDWF  20,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
216E:  CLRF   22
216F:  MOVF   22,W
2170:  SUBLW  3F
2171:  BTFSS  03.0
2172:  GOTO   19E
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
2173:  MOVLW  7E
2174:  ADDWF  22,W
2175:  MOVWF  04
2176:  MOVLW  23
2177:  MOVWF  05
2178:  BTFSC  03.0
2179:  INCF   05,F
217A:  MOVF   22,W
217B:  ADDWF  20,W
217C:  MOVWF  30
217D:  MOVLW  00
217E:  ADDWFC 21,W
217F:  MOVWF  31
2180:  CLRF   7A
2181:  MOVF   30,W
2182:  MOVWF  00
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
2183:  MOVLW  7E
2184:  ADDWF  22,W
2185:  MOVWF  04
2186:  MOVLW  23
2187:  MOVWF  05
2188:  BTFSC  03.0
2189:  INCF   05,F
218A:  MOVF   00,W
218B:  MOVWF  2E
218C:  MOVLB  0E
218D:  MOVWF  4E
218E:  MOVLW  37
218F:  MOVWF  4F
2190:  MOVLP  08
2191:  MOVLB  00
2192:  CALL   479
2193:  MOVLP  20
2194:  MOVLW  20
2195:  MOVLB  0F
2196:  MOVWF  43
2197:  MOVLP  08
2198:  MOVLB  00
2199:  CALL   0AF
219A:  MOVLP  20
219B:  MOVLB  0C
219C:  INCF   22,F
219D:  GOTO   16F
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
219E:  MOVLB  0B
219F:  RLF    6E,W
21A0:  MOVWF  79
21A1:  RLF    6F,W
21A2:  MOVWF  7A
21A3:  RLF    79,F
21A4:  RLF    7A,F
21A5:  RLF    79,F
21A6:  RLF    7A,F
21A7:  RLF    79,F
21A8:  RLF    7A,F
21A9:  RLF    79,F
21AA:  RLF    7A,F
21AB:  RLF    79,F
21AC:  RLF    7A,F
21AD:  MOVLW  C0
21AE:  ANDWF  79,F
21AF:  MOVF   79,W
21B0:  ADDWF  28,W
21B1:  MOVLB  0C
21B2:  MOVWF  23
21B3:  MOVF   7A,W
21B4:  MOVLB  0B
21B5:  ADDWFC 29,W
21B6:  MOVLB  0C
21B7:  MOVWF  24
21B8:  MOVLW  00
21B9:  MOVLB  0B
21BA:  ADDWFC 2A,W
21BB:  MOVLB  0C
21BC:  MOVWF  25
21BD:  MOVLW  00
21BE:  MOVLB  0B
21BF:  ADDWFC 2B,W
21C0:  MOVLB  0C
21C1:  MOVWF  26
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
21C2:  MOVLB  08
21C3:  MOVF   5D,W
21C4:  MOVLB  0F
21C5:  MOVWF  41
21C6:  MOVLB  08
21C7:  MOVF   5C,W
21C8:  MOVLB  0F
21C9:  MOVWF  40
21CA:  MOVLB  08
21CB:  MOVF   5B,W
21CC:  MOVLB  0F
21CD:  MOVWF  3F
21CE:  MOVLB  08
21CF:  MOVF   5A,W
21D0:  MOVLB  0F
21D1:  MOVWF  3E
21D2:  MOVLB  0C
21D3:  MOVF   26,W
21D4:  MOVLB  0F
21D5:  MOVWF  45
21D6:  MOVLB  0C
21D7:  MOVF   25,W
21D8:  MOVLB  0F
21D9:  MOVWF  44
21DA:  MOVLB  0C
21DB:  MOVF   24,W
21DC:  MOVLB  0F
21DD:  MOVWF  43
21DE:  MOVLB  0C
21DF:  MOVF   23,W
21E0:  MOVLB  0F
21E1:  MOVWF  42
21E2:  MOVLW  23
21E3:  MOVWF  47
21E4:  MOVLW  7E
21E5:  MOVWF  46
21E6:  CLRF   49
21E7:  MOVLW  40
21E8:  MOVWF  48
21E9:  MOVLP  10
21EA:  MOVLB  00
21EB:  CALL   0A5
21EC:  MOVLP  20
21ED:  MOVLB  0B
21EE:  INCF   6E,F
21EF:  BTFSC  03.2
21F0:  INCF   6F,F
21F1:  GOTO   151
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
21F2:  MOVF   27,W
21F3:  MOVLB  0E
21F4:  MOVWF  3C
21F5:  MOVLW  02
21F6:  MOVWF  3D
21F7:  MOVLP  10
21F8:  MOVLB  00
21F9:  CALL   3A7
21FA:  MOVLP  20
....................    fprintf(PC, "\r\n");
21FB:  MOVLW  0D
21FC:  MOVLB  0F
21FD:  MOVWF  43
21FE:  MOVLP  08
21FF:  MOVLB  00
2200:  CALL   0AF
2201:  MOVLP  20
2202:  MOVLW  0A
2203:  MOVLB  0F
2204:  MOVWF  43
2205:  MOVLP  08
2206:  MOVLB  00
2207:  CALL   0AF
2208:  MOVLP  20
....................    fprintf(PC, "End Flash Write Demo\r\n");
2209:  MOVLW  23
220A:  MOVLB  03
220B:  MOVWF  11
220C:  MOVLW  05
220D:  MOVWF  12
220E:  MOVLP  08
220F:  MOVLB  00
2210:  CALL   0D4
2211:  MOVLP  20
2212:  MOVLP  28
2213:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
2214:  MOVLW  2F
2215:  MOVLB  03
2216:  MOVWF  11
2217:  MOVLW  05
2218:  MOVWF  12
2219:  MOVLP  08
221A:  MOVLB  00
221B:  CALL   0D4
221C:  MOVLP  20
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
221D:  MOVLB  0B
221E:  MOVF   25,W
221F:  MOVWF  04
2220:  MOVF   26,W
2221:  MOVWF  05
2222:  ADDFSR 00,FSR0
2223:  MOVF   00,W
2224:  MOVLB  0E
2225:  MOVWF  3B
2226:  MOVWF  3C
2227:  MOVLW  01
2228:  MOVWF  3D
2229:  MOVLP  10
222A:  MOVLB  00
222B:  CALL   3A7
222C:  MOVLP  20
....................    flash_setting(mis_fm);
222D:  MOVLB  08
222E:  MOVF   5D,W
222F:  MOVLB  0E
2230:  MOVWF  42
2231:  MOVLB  08
2232:  MOVF   5C,W
2233:  MOVLB  0E
2234:  MOVWF  41
2235:  MOVLB  08
2236:  MOVF   5B,W
2237:  MOVLB  0E
2238:  MOVWF  40
2239:  MOVLB  08
223A:  MOVF   5A,W
223B:  MOVLB  0E
223C:  MOVWF  3F
223D:  MOVLP  10
223E:  MOVLB  00
223F:  CALL   7B0
2240:  MOVLP  20
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
2241:  MOVLB  0B
2242:  CLRF   2A
2243:  CLRF   29
2244:  CLRF   28
2245:  CLRF   27
2246:  MOVLW  01
2247:  MOVWF  2B
2248:  MOVLW  02
2249:  MOVWF  2C
224A:  MOVLW  03
224B:  MOVWF  2D
224C:  MOVLW  04
224D:  MOVWF  2E
224E:  CLRF   2F
224F:  CLRF   30
2250:  CLRF   31
2251:  CLRF   32
2252:  CLRF   33
2253:  CLRF   34
2254:  CLRF   35
2255:  CLRF   36
2256:  CLRF   37
2257:  CLRF   38
2258:  CLRF   39
2259:  CLRF   3A
225A:  CLRF   3B
225B:  CLRF   3C
225C:  CLRF   3D
225D:  CLRF   3E
225E:  CLRF   3F
225F:  CLRF   40
2260:  CLRF   41
2261:  CLRF   42
2262:  CLRF   43
2263:  CLRF   44
2264:  CLRF   45
2265:  CLRF   46
2266:  CLRF   47
2267:  CLRF   48
2268:  CLRF   49
2269:  CLRF   4A
226A:  CLRF   4B
226B:  CLRF   4C
226C:  CLRF   4D
226D:  CLRF   4E
226E:  CLRF   4F
226F:  CLRF   50
2270:  CLRF   51
2271:  CLRF   52
2272:  CLRF   53
2273:  CLRF   54
2274:  CLRF   55
2275:  CLRF   56
2276:  CLRF   57
2277:  CLRF   58
2278:  CLRF   59
2279:  CLRF   5A
227A:  CLRF   5B
227B:  CLRF   5C
227C:  CLRF   5D
227D:  CLRF   5E
227E:  CLRF   5F
227F:  CLRF   60
2280:  CLRF   61
2281:  CLRF   62
2282:  CLRF   63
2283:  CLRF   64
2284:  CLRF   65
2285:  CLRF   66
2286:  CLRF   67
2287:  CLRF   68
2288:  CLRF   69
2289:  CLRF   6A
228A:  CLRF   6B
228B:  CLRF   6C
228C:  CLRF   6D
228D:  CLRF   6E
228E:  CLRF   6F
228F:  MOVLB  0C
2290:  CLRF   20
2291:  CLRF   21
2292:  CLRF   22
2293:  CLRF   23
2294:  CLRF   24
2295:  CLRF   25
2296:  CLRF   26
2297:  CLRF   27
2298:  CLRF   28
2299:  CLRF   29
229A:  CLRF   2A
229B:  CLRF   2B
229C:  CLRF   2C
229D:  CLRF   2D
229E:  CLRF   2E
229F:  CLRF   2F
22A0:  CLRF   30
22A1:  CLRF   31
22A2:  CLRF   32
22A3:  CLRF   33
22A4:  CLRF   34
22A5:  CLRF   35
22A6:  CLRF   36
22A7:  CLRF   37
22A8:  CLRF   38
22A9:  CLRF   39
22AA:  CLRF   3A
22AB:  CLRF   3B
22AC:  CLRF   3C
22AD:  CLRF   3D
22AE:  CLRF   3E
22AF:  CLRF   3F
22B0:  CLRF   40
22B1:  CLRF   41
22B2:  CLRF   42
22B3:  CLRF   43
22B4:  CLRF   44
22B5:  CLRF   45
22B6:  CLRF   46
22B7:  CLRF   47
22B8:  CLRF   48
22B9:  CLRF   49
22BA:  CLRF   4A
22BB:  CLRF   4B
22BC:  CLRF   4C
22BD:  CLRF   4D
22BE:  CLRF   4E
22BF:  CLRF   4F
22C0:  CLRF   50
22C1:  CLRF   51
22C2:  CLRF   52
22C3:  CLRF   53
22C4:  CLRF   54
22C5:  CLRF   55
22C6:  CLRF   56
22C7:  CLRF   57
22C8:  CLRF   58
22C9:  CLRF   59
22CA:  CLRF   5A
22CB:  CLRF   5B
22CC:  CLRF   5C
22CD:  CLRF   5D
22CE:  CLRF   5E
22CF:  CLRF   5F
22D0:  CLRF   60
22D1:  CLRF   61
22D2:  CLRF   62
22D3:  CLRF   63
22D4:  CLRF   64
22D5:  CLRF   65
22D6:  CLRF   66
22D7:  CLRF   67
22D8:  CLRF   68
22D9:  CLRF   69
22DA:  CLRF   6A
22DB:  CLRF   6B
22DC:  CLRF   6C
22DD:  CLRF   6D
22DE:  CLRF   6E
22DF:  CLRF   6F
22E0:  MOVLB  0D
22E1:  CLRF   20
22E2:  CLRF   21
22E3:  CLRF   22
22E4:  CLRF   23
22E5:  CLRF   24
22E6:  CLRF   25
22E7:  CLRF   26
22E8:  CLRF   27
22E9:  CLRF   28
22EA:  CLRF   29
22EB:  CLRF   2A
22EC:  CLRF   2B
22ED:  CLRF   2C
22EE:  CLRF   2D
22EF:  CLRF   2E
22F0:  CLRF   2F
22F1:  CLRF   30
22F2:  CLRF   31
22F3:  CLRF   32
22F4:  CLRF   33
22F5:  CLRF   34
22F6:  CLRF   35
22F7:  CLRF   36
22F8:  CLRF   37
22F9:  CLRF   38
22FA:  CLRF   39
22FB:  CLRF   3A
22FC:  CLRF   3B
22FD:  CLRF   3C
22FE:  CLRF   3D
22FF:  CLRF   3E
2300:  CLRF   3F
2301:  CLRF   40
2302:  CLRF   41
2303:  CLRF   42
2304:  CLRF   43
2305:  CLRF   44
2306:  CLRF   45
2307:  CLRF   46
2308:  CLRF   47
2309:  CLRF   48
230A:  CLRF   49
230B:  CLRF   4A
230C:  CLRF   4B
230D:  CLRF   4C
230E:  CLRF   4D
230F:  CLRF   4E
2310:  CLRF   4F
2311:  CLRF   50
2312:  CLRF   51
2313:  CLRF   52
2314:  CLRF   53
2315:  CLRF   54
2316:  CLRF   55
2317:  CLRF   56
2318:  CLRF   57
2319:  CLRF   58
231A:  CLRF   59
231B:  CLRF   5A
231C:  CLRF   5B
231D:  CLRF   5C
231E:  CLRF   5D
231F:  CLRF   5E
2320:  CLRF   5F
2321:  CLRF   60
2322:  CLRF   61
2323:  CLRF   62
2324:  CLRF   63
2325:  CLRF   64
2326:  CLRF   65
2327:  CLRF   66
2328:  CLRF   67
2329:  CLRF   68
232A:  CLRF   69
232B:  CLRF   6A
232C:  CLRF   6B
232D:  CLRF   6C
232E:  CLRF   6D
232F:  CLRF   6E
2330:  CLRF   6F
2331:  MOVLB  0E
2332:  CLRF   20
2333:  CLRF   21
2334:  CLRF   22
2335:  CLRF   23
2336:  CLRF   24
2337:  CLRF   25
2338:  CLRF   26
2339:  CLRF   27
233A:  CLRF   28
233B:  CLRF   29
233C:  CLRF   2A
233D:  CLRF   2B
233E:  CLRF   2C
233F:  CLRF   2D
2340:  CLRF   2E
2341:  CLRF   2F
2342:  CLRF   30
2343:  CLRF   31
2344:  CLRF   32
2345:  CLRF   33
2346:  CLRF   34
2347:  CLRF   35
2348:  CLRF   36
2349:  CLRF   37
234A:  CLRF   38
234B:  CLRF   39
234C:  CLRF   3A
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
234D:  MOVLB  08
234E:  MOVF   5D,W
234F:  MOVLB  0F
2350:  MOVWF  41
2351:  MOVLB  08
2352:  MOVF   5C,W
2353:  MOVLB  0F
2354:  MOVWF  40
2355:  MOVLB  08
2356:  MOVF   5B,W
2357:  MOVLB  0F
2358:  MOVWF  3F
2359:  MOVLB  08
235A:  MOVF   5A,W
235B:  MOVLB  0F
235C:  MOVWF  3E
235D:  MOVLB  0B
235E:  MOVF   2A,W
235F:  MOVLB  0F
2360:  MOVWF  45
2361:  MOVLB  0B
2362:  MOVF   29,W
2363:  MOVLB  0F
2364:  MOVWF  44
2365:  MOVLB  0B
2366:  MOVF   28,W
2367:  MOVLB  0F
2368:  MOVWF  43
2369:  MOVLB  0B
236A:  MOVF   27,W
236B:  MOVLB  0F
236C:  MOVWF  42
236D:  MOVLW  23
236E:  MOVWF  47
236F:  MOVLW  7B
2370:  MOVWF  46
2371:  MOVLW  01
2372:  MOVWF  49
2373:  CLRF   48
2374:  MOVLP  10
2375:  MOVLB  00
2376:  CALL   0A5
2377:  MOVLP  20
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
2378:  MOVLB  0B
2379:  MOVF   25,W
237A:  MOVWF  04
237B:  MOVF   26,W
237C:  MOVWF  05
237D:  ADDFSR 00,FSR0
237E:  MOVF   00,W
237F:  MOVLB  0E
2380:  MOVWF  3B
2381:  MOVWF  3C
2382:  MOVLW  02
2383:  MOVWF  3D
2384:  MOVLP  10
2385:  MOVLB  00
2386:  CALL   3A7
2387:  MOVLP  20
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
2388:  MOVLW  42
2389:  MOVLB  03
238A:  MOVWF  11
238B:  MOVLW  05
238C:  MOVWF  12
238D:  MOVLP  08
238E:  MOVLB  00
238F:  CALL   0D4
2390:  MOVLP  20
2391:  MOVLP  28
2392:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
2393:  MOVLW  54
2394:  MOVLB  03
2395:  MOVWF  11
2396:  MOVLW  05
2397:  MOVWF  12
2398:  MOVLP  08
2399:  MOVLB  00
239A:  CALL   0D4
239B:  MOVLP  20
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
239C:  MOVLB  0B
239D:  MOVF   25,W
239E:  MOVWF  04
239F:  MOVF   26,W
23A0:  MOVWF  05
23A1:  ADDFSR 00,FSR0
23A2:  MOVF   00,W
23A3:  MOVLB  0C
23A4:  MOVWF  2E
23A5:  MOVLB  0E
23A6:  MOVWF  3C
23A7:  MOVLW  01
23A8:  MOVWF  3D
23A9:  MOVLP  10
23AA:  MOVLB  00
23AB:  CALL   3A7
23AC:  MOVLP  20
....................    FLASH_PARAM flash_param = {0};
23AD:  MOVLB  0B
23AE:  CLRF   27
23AF:  CLRF   28
23B0:  CLRF   29
23B1:  CLRF   2A
23B2:  CLRF   2B
23B3:  CLRF   2C
23B4:  CLRF   2D
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
23B5:  MOVF   25,W
23B6:  MOVWF  04
23B7:  MOVF   26,W
23B8:  MOVWF  05
23B9:  MOVIW  [FSR0+00],W
23BA:  MOVWF  27
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
23BB:  MOVF   25,W
23BC:  MOVWF  04
23BD:  MOVF   26,W
23BE:  MOVWF  05
23BF:  ADDFSR 01,FSR0
23C0:  MOVF   00,W
23C1:  MOVLB  0C
23C2:  CLRF   31
23C3:  CLRF   30
23C4:  CLRF   2F
23C5:  MOVWF  2E
23C6:  MOVWF  31
23C7:  CLRF   2E
23C8:  CLRF   2F
23C9:  CLRF   30
23CA:  MOVLB  0B
23CB:  MOVF   25,W
23CC:  MOVWF  04
23CD:  MOVF   26,W
23CE:  MOVWF  05
23CF:  ADDFSR 02,FSR0
23D0:  MOVF   00,W
23D1:  MOVLB  0C
23D2:  CLRF   36
23D3:  CLRF   35
23D4:  CLRF   34
23D5:  MOVWF  33
23D6:  MOVF   34,W
23D7:  MOVWF  7A
23D8:  MOVF   33,W
23D9:  MOVWF  79
23DA:  CLRF   77
23DB:  CLRF   78
23DC:  MOVF   77,W
23DD:  IORWF  2E,F
23DE:  MOVF   78,W
23DF:  IORWF  2F,F
23E0:  MOVF   33,W
23E1:  IORWF  30,F
23E2:  MOVF   34,W
23E3:  IORWF  31,F
23E4:  MOVLB  0B
23E5:  MOVF   25,W
23E6:  MOVWF  04
23E7:  MOVF   26,W
23E8:  MOVWF  05
23E9:  ADDFSR 03,FSR0
23EA:  MOVF   00,W
23EB:  MOVLB  0C
23EC:  CLRF   36
23ED:  CLRF   35
23EE:  CLRF   34
23EF:  MOVWF  33
23F0:  MOVF   35,W
23F1:  MOVWF  7A
23F2:  MOVF   34,W
23F3:  MOVWF  79
23F4:  MOVF   33,W
23F5:  MOVWF  78
23F6:  CLRF   77
23F7:  MOVF   77,W
23F8:  IORWF  2E,F
23F9:  MOVF   33,W
23FA:  IORWF  2F,F
23FB:  MOVF   34,W
23FC:  IORWF  30,F
23FD:  MOVF   35,W
23FE:  IORWF  31,F
23FF:  MOVLB  0B
2400:  MOVF   25,W
2401:  MOVWF  04
2402:  MOVF   26,W
2403:  MOVWF  05
2404:  MOVIW  [FSR0+04],W
2405:  MOVWF  77
2406:  CLRF   78
2407:  CLRF   79
2408:  CLRF   7A
2409:  MOVF   77,W
240A:  MOVLB  0C
240B:  IORWF  2E,W
240C:  MOVLB  0B
240D:  MOVWF  2A
240E:  MOVF   78,W
240F:  MOVLB  0C
2410:  IORWF  2F,W
2411:  MOVLB  0B
2412:  MOVWF  2B
2413:  MOVF   79,W
2414:  MOVLB  0C
2415:  IORWF  30,W
2416:  MOVLB  0B
2417:  MOVWF  2C
2418:  MOVF   7A,W
2419:  MOVLB  0C
241A:  IORWF  31,W
241B:  MOVLB  0B
241C:  MOVWF  2D
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
241D:  MOVF   25,W
241E:  MOVWF  04
241F:  MOVF   26,W
2420:  MOVWF  05
2421:  ADDFSR 07,FSR0
2422:  MOVF   00,W
2423:  MOVLB  0C
2424:  CLRF   2F
2425:  MOVWF  2E
2426:  MOVWF  2F
2427:  CLRF   2E
2428:  MOVLB  0B
2429:  MOVF   25,W
242A:  MOVWF  04
242B:  MOVF   26,W
242C:  MOVWF  05
242D:  MOVIW  [FSR0+08],W
242E:  CLRF   7A
242F:  MOVLB  0C
2430:  IORWF  2E,W
2431:  MOVLB  0B
2432:  MOVWF  28
2433:  MOVF   7A,W
2434:  MOVLB  0C
2435:  IORWF  2F,W
2436:  MOVLB  0B
2437:  MOVWF  29
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
2438:  MOVLW  5E
2439:  MOVLB  03
243A:  MOVWF  11
243B:  MOVLW  05
243C:  MOVWF  12
243D:  BCF    03.0
243E:  MOVLW  0C
243F:  MOVLB  0C
2440:  MOVWF  5E
2441:  MOVLP  08
2442:  MOVLB  00
2443:  CALL   122
2444:  MOVLP  20
2445:  MOVLB  0B
2446:  MOVF   27,W
2447:  MOVLB  0E
2448:  MOVWF  4E
2449:  MOVLW  37
244A:  MOVWF  4F
244B:  MOVLP  08
244C:  MOVLB  00
244D:  CALL   479
244E:  MOVLP  20
244F:  MOVLW  0D
2450:  MOVLB  0F
2451:  MOVWF  43
2452:  MOVLP  08
2453:  MOVLB  00
2454:  CALL   0AF
2455:  MOVLP  20
2456:  MOVLW  0A
2457:  MOVLB  0F
2458:  MOVWF  43
2459:  MOVLP  08
245A:  MOVLB  00
245B:  CALL   0AF
245C:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
245D:  MOVLW  68
245E:  MOVLB  03
245F:  MOVWF  11
2460:  MOVLW  05
2461:  MOVWF  12
2462:  BCF    03.0
2463:  MOVLW  0E
2464:  MOVLB  0C
2465:  MOVWF  5E
2466:  MOVLP  08
2467:  MOVLB  00
2468:  CALL   122
2469:  MOVLP  20
246A:  MOVLB  0B
246B:  MOVF   2D,W
246C:  MOVLB  0E
246D:  MOVWF  4E
246E:  MOVLW  37
246F:  MOVWF  4F
2470:  MOVLP  08
2471:  MOVLB  00
2472:  CALL   479
2473:  MOVLP  20
2474:  MOVLB  0B
2475:  MOVF   2C,W
2476:  MOVLB  0E
2477:  MOVWF  4E
2478:  MOVLW  37
2479:  MOVWF  4F
247A:  MOVLP  08
247B:  MOVLB  00
247C:  CALL   479
247D:  MOVLP  20
247E:  MOVLB  0B
247F:  MOVF   2B,W
2480:  MOVLB  0E
2481:  MOVWF  4E
2482:  MOVLW  37
2483:  MOVWF  4F
2484:  MOVLP  08
2485:  MOVLB  00
2486:  CALL   479
2487:  MOVLP  20
2488:  MOVLB  0B
2489:  MOVF   2A,W
248A:  MOVLB  0E
248B:  MOVWF  4E
248C:  MOVLW  37
248D:  MOVWF  4F
248E:  MOVLP  08
248F:  MOVLB  00
2490:  CALL   479
2491:  MOVLP  20
2492:  MOVLW  0D
2493:  MOVLB  0F
2494:  MOVWF  43
2495:  MOVLP  08
2496:  MOVLB  00
2497:  CALL   0AF
2498:  MOVLP  20
2499:  MOVLW  0A
249A:  MOVLB  0F
249B:  MOVWF  43
249C:  MOVLP  08
249D:  MOVLB  00
249E:  CALL   0AF
249F:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
24A0:  MOVLW  73
24A1:  MOVLB  03
24A2:  MOVWF  11
24A3:  MOVLW  05
24A4:  MOVWF  12
24A5:  BCF    03.0
24A6:  MOVLW  0E
24A7:  MOVLB  0C
24A8:  MOVWF  5E
24A9:  MOVLP  08
24AA:  MOVLB  00
24AB:  CALL   122
24AC:  MOVLP  20
24AD:  MOVLB  0B
24AE:  MOVF   29,W
24AF:  MOVLB  0E
24B0:  MOVWF  4E
24B1:  MOVLW  37
24B2:  MOVWF  4F
24B3:  MOVLP  08
24B4:  MOVLB  00
24B5:  CALL   479
24B6:  MOVLP  20
24B7:  MOVLB  0B
24B8:  MOVF   28,W
24B9:  MOVLB  0E
24BA:  MOVWF  4E
24BB:  MOVLW  37
24BC:  MOVWF  4F
24BD:  MOVLP  08
24BE:  MOVLB  00
24BF:  CALL   479
24C0:  MOVLP  20
24C1:  MOVLW  0D
24C2:  MOVLB  0F
24C3:  MOVWF  43
24C4:  MOVLP  08
24C5:  MOVLB  00
24C6:  CALL   0AF
24C7:  MOVLP  20
24C8:  MOVLW  0A
24C9:  MOVLB  0F
24CA:  MOVWF  43
24CB:  MOVLP  08
24CC:  MOVLB  00
24CD:  CALL   0AF
24CE:  MOVLP  20
....................    
....................    piclog_make(flash_param.id, 0x00);
24CF:  MOVLB  0B
24D0:  MOVF   27,W
24D1:  MOVLB  0E
24D2:  MOVWF  3C
24D3:  CLRF   3D
24D4:  MOVLP  10
24D5:  MOVLB  00
24D6:  CALL   3A7
24D7:  MOVLP  20
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
24D8:  MOVLB  0B
24D9:  CLRF   2E
24DA:  CLRF   2F
24DB:  CLRF   30
24DC:  CLRF   31
24DD:  CLRF   32
24DE:  CLRF   33
24DF:  CLRF   34
24E0:  CLRF   35
24E1:  CLRF   36
24E2:  CLRF   37
24E3:  CLRF   38
24E4:  CLRF   39
24E5:  CLRF   3A
24E6:  CLRF   3B
24E7:  CLRF   3C
24E8:  CLRF   3D
24E9:  CLRF   3E
24EA:  CLRF   3F
24EB:  CLRF   40
24EC:  CLRF   41
24ED:  CLRF   42
24EE:  CLRF   43
24EF:  CLRF   44
24F0:  CLRF   45
24F1:  CLRF   46
24F2:  CLRF   47
24F3:  CLRF   48
24F4:  CLRF   49
24F5:  CLRF   4A
24F6:  CLRF   4B
24F7:  CLRF   4C
24F8:  CLRF   4D
24F9:  CLRF   4E
24FA:  CLRF   4F
24FB:  CLRF   50
24FC:  CLRF   51
24FD:  CLRF   52
24FE:  CLRF   53
24FF:  CLRF   54
2500:  CLRF   55
2501:  CLRF   56
2502:  CLRF   57
2503:  CLRF   58
2504:  CLRF   59
2505:  CLRF   5A
2506:  CLRF   5B
2507:  CLRF   5C
2508:  CLRF   5D
2509:  CLRF   5E
250A:  CLRF   5F
250B:  CLRF   60
250C:  CLRF   61
250D:  CLRF   62
250E:  CLRF   63
250F:  CLRF   64
2510:  CLRF   65
2511:  CLRF   66
2512:  CLRF   67
2513:  CLRF   68
2514:  CLRF   69
2515:  CLRF   6A
2516:  CLRF   6B
2517:  CLRF   6C
2518:  CLRF   6D
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
2519:  MOVLW  7E
251A:  MOVLB  03
251B:  MOVWF  11
251C:  MOVLW  05
251D:  MOVWF  12
251E:  MOVLP  08
251F:  MOVLB  00
2520:  CALL   0D4
2521:  MOVLP  20
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
2522:  MOVLB  08
2523:  MOVF   5D,W
2524:  MOVLB  0F
2525:  MOVWF  41
2526:  MOVLB  08
2527:  MOVF   5C,W
2528:  MOVLB  0F
2529:  MOVWF  40
252A:  MOVLB  08
252B:  MOVF   5B,W
252C:  MOVLB  0F
252D:  MOVWF  3F
252E:  MOVLB  08
252F:  MOVF   5A,W
2530:  MOVLB  0F
2531:  MOVWF  3E
2532:  MOVLP  08
2533:  MOVLB  00
2534:  CALL   336
2535:  MOVLP  20
2536:  MOVF   78,F
2537:  BTFSS  03.2
2538:  GOTO   543
....................       fprintf(PC, "Mission Flash is not connected\r\n");
2539:  MOVLW  84
253A:  MOVLB  03
253B:  MOVWF  11
253C:  MOVLW  05
253D:  MOVWF  12
253E:  MOVLP  08
253F:  MOVLB  00
2540:  CALL   0D4
2541:  MOVLP  20
....................       return;
2542:  GOTO   60A
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
2543:  MOVLB  0C
2544:  CLRF   27
2545:  CLRF   26
2546:  CLRF   25
2547:  CLRF   24
2548:  MOVF   27,F
2549:  BTFSS  03.2
254A:  GOTO   5F7
254B:  MOVF   26,F
254C:  BTFSS  03.2
254D:  GOTO   5F7
254E:  MOVF   25,W
254F:  MOVLB  0B
2550:  SUBWF  29,W
2551:  BTFSC  03.0
2552:  GOTO   555
2553:  MOVLB  0C
2554:  GOTO   5F7
2555:  BTFSS  03.2
2556:  GOTO   55D
2557:  MOVF   28,W
2558:  MOVLB  0C
2559:  SUBWF  24,W
255A:  BTFSC  03.0
255B:  GOTO   5F7
255C:  MOVLB  0B
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
255D:  MOVLB  0C
255E:  RLF    24,W
255F:  MOVWF  77
2560:  RLF    25,W
2561:  MOVWF  78
2562:  RLF    26,W
2563:  MOVWF  79
2564:  RLF    27,W
2565:  MOVWF  7A
2566:  RLF    77,F
2567:  RLF    78,F
2568:  RLF    79,F
2569:  RLF    7A,F
256A:  RLF    77,F
256B:  RLF    78,F
256C:  RLF    79,F
256D:  RLF    7A,F
256E:  RLF    77,F
256F:  RLF    78,F
2570:  RLF    79,F
2571:  RLF    7A,F
2572:  RLF    77,F
2573:  RLF    78,F
2574:  RLF    79,F
2575:  RLF    7A,F
2576:  RLF    77,F
2577:  RLF    78,F
2578:  RLF    79,F
2579:  RLF    7A,F
257A:  MOVLW  C0
257B:  ANDWF  77,F
257C:  MOVF   77,W
257D:  MOVLB  0B
257E:  ADDWF  2A,W
257F:  MOVLB  0C
2580:  MOVWF  20
2581:  MOVF   78,W
2582:  MOVLB  0B
2583:  ADDWFC 2B,W
2584:  MOVLB  0C
2585:  MOVWF  21
2586:  MOVF   79,W
2587:  MOVLB  0B
2588:  ADDWFC 2C,W
2589:  MOVLB  0C
258A:  MOVWF  22
258B:  MOVF   7A,W
258C:  MOVLB  0B
258D:  ADDWFC 2D,W
258E:  MOVLB  0C
258F:  MOVWF  23
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
2590:  MOVLB  08
2591:  MOVF   5D,W
2592:  MOVLB  0E
2593:  MOVWF  42
2594:  MOVLB  08
2595:  MOVF   5C,W
2596:  MOVLB  0E
2597:  MOVWF  41
2598:  MOVLB  08
2599:  MOVF   5B,W
259A:  MOVLB  0E
259B:  MOVWF  40
259C:  MOVLB  08
259D:  MOVF   5A,W
259E:  MOVLB  0E
259F:  MOVWF  3F
25A0:  MOVLB  0C
25A1:  MOVF   23,W
25A2:  MOVLB  0E
25A3:  MOVWF  46
25A4:  MOVLB  0C
25A5:  MOVF   22,W
25A6:  MOVLB  0E
25A7:  MOVWF  45
25A8:  MOVLB  0C
25A9:  MOVF   21,W
25AA:  MOVLB  0E
25AB:  MOVWF  44
25AC:  MOVLB  0C
25AD:  MOVF   20,W
25AE:  MOVLB  0E
25AF:  MOVWF  43
25B0:  MOVLW  23
25B1:  MOVWF  48
25B2:  MOVLW  7E
25B3:  MOVWF  47
25B4:  CLRF   4C
25B5:  CLRF   4B
25B6:  CLRF   4A
25B7:  MOVLW  40
25B8:  MOVWF  49
25B9:  MOVLP  08
25BA:  MOVLB  00
25BB:  CALL   384
25BC:  MOVLP  20
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
25BD:  MOVLB  0B
25BE:  CLRF   6E
25BF:  MOVF   6E,W
25C0:  SUBLW  3F
25C1:  BTFSS  03.0
25C2:  GOTO   5DF
....................          fprintf(PC,"%02X ",readdata[bytecount]);
25C3:  MOVLW  7E
25C4:  ADDWF  6E,W
25C5:  MOVWF  04
25C6:  MOVLW  23
25C7:  MOVWF  05
25C8:  BTFSC  03.0
25C9:  INCF   05,F
25CA:  MOVF   00,W
25CB:  MOVLB  0C
25CC:  MOVWF  2E
25CD:  MOVLB  0E
25CE:  MOVWF  4E
25CF:  MOVLW  37
25D0:  MOVWF  4F
25D1:  MOVLP  08
25D2:  MOVLB  00
25D3:  CALL   479
25D4:  MOVLP  20
25D5:  MOVLW  20
25D6:  MOVLB  0F
25D7:  MOVWF  43
25D8:  MOVLP  08
25D9:  MOVLB  00
25DA:  CALL   0AF
25DB:  MOVLP  20
25DC:  MOVLB  0B
25DD:  INCF   6E,F
25DE:  GOTO   5BF
....................       }
....................       fprintf(PC,"\r\n");
25DF:  MOVLW  0D
25E0:  MOVLB  0F
25E1:  MOVWF  43
25E2:  MOVLP  08
25E3:  MOVLB  00
25E4:  CALL   0AF
25E5:  MOVLP  20
25E6:  MOVLW  0A
25E7:  MOVLB  0F
25E8:  MOVWF  43
25E9:  MOVLP  08
25EA:  MOVLB  00
25EB:  CALL   0AF
25EC:  MOVLP  20
25ED:  MOVLW  01
25EE:  MOVLB  0C
25EF:  ADDWF  24,F
25F0:  BTFSC  03.0
25F1:  INCF   25,F
25F2:  BTFSC  03.2
25F3:  INCF   26,F
25F4:  BTFSC  03.2
25F5:  INCF   27,F
25F6:  GOTO   548
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
25F7:  MOVLB  0B
25F8:  MOVF   27,W
25F9:  MOVLB  0E
25FA:  MOVWF  3C
25FB:  MOVLW  02
25FC:  MOVWF  3D
25FD:  MOVLP  10
25FE:  MOVLB  00
25FF:  CALL   3A7
2600:  MOVLP  20
....................    fprintf(PC, "End Flash Read\r\n");
2601:  MOVLW  95
2602:  MOVLB  03
2603:  MOVWF  11
2604:  MOVLW  05
2605:  MOVWF  12
2606:  MOVLP  08
2607:  MOVLB  00
2608:  CALL   0D4
2609:  MOVLP  20
260A:  MOVLP  28
260B:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
260C:  MOVLW  9E
260D:  MOVLB  03
260E:  MOVWF  11
260F:  MOVLW  05
2610:  MOVWF  12
2611:  MOVLP  08
2612:  MOVLB  00
2613:  CALL   0D4
2614:  MOVLP  20
....................    flash_setting(mis_fm);
2615:  MOVLB  08
2616:  MOVF   5D,W
2617:  MOVLB  0E
2618:  MOVWF  42
2619:  MOVLB  08
261A:  MOVF   5C,W
261B:  MOVLB  0E
261C:  MOVWF  41
261D:  MOVLB  08
261E:  MOVF   5B,W
261F:  MOVLB  0E
2620:  MOVWF  40
2621:  MOVLB  08
2622:  MOVF   5A,W
2623:  MOVLB  0E
2624:  MOVWF  3F
2625:  MOVLP  10
2626:  MOVLB  00
2627:  CALL   7B0
2628:  MOVLP  20
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
2629:  MOVLB  0B
262A:  CLRF   2A
262B:  CLRF   29
262C:  CLRF   28
262D:  CLRF   27
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
262E:  MOVLB  08
262F:  MOVF   5D,W
2630:  MOVLB  0E
2631:  MOVWF  42
2632:  MOVLB  08
2633:  MOVF   5C,W
2634:  MOVLB  0E
2635:  MOVWF  41
2636:  MOVLB  08
2637:  MOVF   5B,W
2638:  MOVLB  0E
2639:  MOVWF  40
263A:  MOVLB  08
263B:  MOVF   5A,W
263C:  MOVLB  0E
263D:  MOVWF  3F
263E:  MOVLB  0B
263F:  MOVF   2A,W
2640:  MOVLB  0E
2641:  MOVWF  46
2642:  MOVLB  0B
2643:  MOVF   29,W
2644:  MOVLB  0E
2645:  MOVWF  45
2646:  MOVLB  0B
2647:  MOVF   28,W
2648:  MOVLB  0E
2649:  MOVWF  44
264A:  MOVLB  0B
264B:  MOVF   27,W
264C:  MOVLB  0E
264D:  MOVWF  43
264E:  MOVLW  23
264F:  MOVWF  48
2650:  MOVLW  7B
2651:  MOVWF  47
2652:  CLRF   4C
2653:  CLRF   4B
2654:  CLRF   4A
2655:  MOVLW  04
2656:  MOVWF  49
2657:  MOVLP  08
2658:  MOVLB  00
2659:  CALL   384
265A:  MOVLP  20
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
265B:  MOVLW  AC
265C:  MOVLB  03
265D:  MOVWF  11
265E:  MOVLW  05
265F:  MOVWF  12
2660:  BCF    03.0
2661:  MOVLW  0B
2662:  MOVLB  0C
2663:  MOVWF  5E
2664:  MOVLP  08
2665:  MOVLB  00
2666:  CALL   122
2667:  MOVLP  20
2668:  MOVLB  0B
2669:  MOVF   2B,W
266A:  MOVLB  0E
266B:  MOVWF  4E
266C:  MOVLW  37
266D:  MOVWF  4F
266E:  MOVLP  08
266F:  MOVLB  00
2670:  CALL   479
2671:  MOVLP  20
2672:  MOVLW  20
2673:  MOVLB  0F
2674:  MOVWF  43
2675:  MOVLP  08
2676:  MOVLB  00
2677:  CALL   0AF
2678:  MOVLP  20
2679:  MOVLB  0B
267A:  MOVF   2C,W
267B:  MOVLB  0E
267C:  MOVWF  4E
267D:  MOVLW  37
267E:  MOVWF  4F
267F:  MOVLP  08
2680:  MOVLB  00
2681:  CALL   479
2682:  MOVLP  20
2683:  MOVLW  20
2684:  MOVLB  0F
2685:  MOVWF  43
2686:  MOVLP  08
2687:  MOVLB  00
2688:  CALL   0AF
2689:  MOVLP  20
268A:  MOVLB  0B
268B:  MOVF   2D,W
268C:  MOVLB  0E
268D:  MOVWF  4E
268E:  MOVLW  37
268F:  MOVWF  4F
2690:  MOVLP  08
2691:  MOVLB  00
2692:  CALL   479
2693:  MOVLP  20
2694:  MOVLW  20
2695:  MOVLB  0F
2696:  MOVWF  43
2697:  MOVLP  08
2698:  MOVLB  00
2699:  CALL   0AF
269A:  MOVLP  20
269B:  MOVLB  0B
269C:  MOVF   2E,W
269D:  MOVLB  0E
269E:  MOVWF  4E
269F:  MOVLW  37
26A0:  MOVWF  4F
26A1:  MOVLP  08
26A2:  MOVLB  00
26A3:  CALL   479
26A4:  MOVLP  20
26A5:  MOVLW  0D
26A6:  MOVLB  0F
26A7:  MOVWF  43
26A8:  MOVLP  08
26A9:  MOVLB  00
26AA:  CALL   0AF
26AB:  MOVLP  20
26AC:  MOVLW  0A
26AD:  MOVLB  0F
26AE:  MOVWF  43
26AF:  MOVLP  08
26B0:  MOVLB  00
26B1:  CALL   0AF
26B2:  MOVLP  20
....................    fprintf(PC, "End Flash Read Address\r\n");
26B3:  MOVLW  BD
26B4:  MOVLB  03
26B5:  MOVWF  11
26B6:  MOVLW  05
26B7:  MOVWF  12
26B8:  MOVLP  08
26B9:  MOVLB  00
26BA:  CALL   0D4
26BB:  MOVLP  20
26BC:  MOVLP  28
26BD:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
26BE:  MOVLW  CA
26BF:  MOVLB  03
26C0:  MOVWF  11
26C1:  MOVLW  05
26C2:  MOVWF  12
26C3:  MOVLP  08
26C4:  MOVLB  00
26C5:  CALL   0D4
26C6:  MOVLP  20
....................    flash_setting(mis_fm);
26C7:  MOVLB  08
26C8:  MOVF   5D,W
26C9:  MOVLB  0E
26CA:  MOVWF  42
26CB:  MOVLB  08
26CC:  MOVF   5C,W
26CD:  MOVLB  0E
26CE:  MOVWF  41
26CF:  MOVLB  08
26D0:  MOVF   5B,W
26D1:  MOVLB  0E
26D2:  MOVWF  40
26D3:  MOVLB  08
26D4:  MOVF   5A,W
26D5:  MOVLB  0E
26D6:  MOVWF  3F
26D7:  MOVLP  10
26D8:  MOVLB  00
26D9:  CALL   7B0
26DA:  MOVLP  20
....................    flash_setting(smf);
26DB:  MOVLB  08
26DC:  MOVF   61,W
26DD:  MOVLB  0E
26DE:  MOVWF  42
26DF:  MOVLB  08
26E0:  MOVF   60,W
26E1:  MOVLB  0E
26E2:  MOVWF  41
26E3:  MOVLB  08
26E4:  MOVF   5F,W
26E5:  MOVLB  0E
26E6:  MOVWF  40
26E7:  MOVLB  08
26E8:  MOVF   5E,W
26E9:  MOVLB  0E
26EA:  MOVWF  3F
26EB:  MOVLP  10
26EC:  MOVLB  00
26ED:  CALL   7B0
26EE:  MOVLP  20
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
26EF:  MOVLB  0B
26F0:  CLRF   2A
26F1:  CLRF   29
26F2:  CLRF   28
26F3:  CLRF   27
26F4:  CLRF   2E
26F5:  CLRF   2D
26F6:  MOVLW  10
26F7:  MOVWF  2C
26F8:  CLRF   2B
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
26F9:  MOVLB  08
26FA:  MOVF   5D,W
26FB:  MOVLB  0E
26FC:  MOVWF  42
26FD:  MOVLB  08
26FE:  MOVF   5C,W
26FF:  MOVLB  0E
2700:  MOVWF  41
2701:  MOVLB  08
2702:  MOVF   5B,W
2703:  MOVLB  0E
2704:  MOVWF  40
2705:  MOVLB  08
2706:  MOVF   5A,W
2707:  MOVLB  0E
2708:  MOVWF  3F
2709:  MOVLB  0B
270A:  MOVF   2A,W
270B:  MOVLB  0E
270C:  MOVWF  46
270D:  MOVLB  0B
270E:  MOVF   29,W
270F:  MOVLB  0E
2710:  MOVWF  45
2711:  MOVLB  0B
2712:  MOVF   28,W
2713:  MOVLB  0E
2714:  MOVWF  44
2715:  MOVLB  0B
2716:  MOVF   27,W
2717:  MOVLB  0E
2718:  MOVWF  43
2719:  MOVLW  23
271A:  MOVWF  48
271B:  MOVLW  7F
271C:  MOVWF  47
271D:  CLRF   4C
271E:  CLRF   4B
271F:  MOVLW  01
2720:  MOVWF  4A
2721:  CLRF   49
2722:  MOVLP  08
2723:  MOVLB  00
2724:  CALL   384
2725:  MOVLP  20
....................    write_data_bytes(smf, dest_address, read_data, 256);
2726:  MOVLB  08
2727:  MOVF   61,W
2728:  MOVLB  0F
2729:  MOVWF  41
272A:  MOVLB  08
272B:  MOVF   60,W
272C:  MOVLB  0F
272D:  MOVWF  40
272E:  MOVLB  08
272F:  MOVF   5F,W
2730:  MOVLB  0F
2731:  MOVWF  3F
2732:  MOVLB  08
2733:  MOVF   5E,W
2734:  MOVLB  0F
2735:  MOVWF  3E
2736:  MOVLB  0B
2737:  MOVF   2E,W
2738:  MOVLB  0F
2739:  MOVWF  45
273A:  MOVLB  0B
273B:  MOVF   2D,W
273C:  MOVLB  0F
273D:  MOVWF  44
273E:  MOVLB  0B
273F:  MOVF   2C,W
2740:  MOVLB  0F
2741:  MOVWF  43
2742:  MOVLB  0B
2743:  MOVF   2B,W
2744:  MOVLB  0F
2745:  MOVWF  42
2746:  MOVLW  23
2747:  MOVWF  47
2748:  MOVLW  7F
2749:  MOVWF  46
274A:  MOVLW  01
274B:  MOVWF  49
274C:  CLRF   48
274D:  MOVLP  10
274E:  MOVLB  00
274F:  CALL   0A5
2750:  MOVLP  20
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
2751:  MOVLW  D6
2752:  MOVLB  03
2753:  MOVWF  11
2754:  MOVLW  05
2755:  MOVWF  12
2756:  MOVLP  08
2757:  MOVLB  00
2758:  CALL   0D4
2759:  MOVLP  20
275A:  MOVLP  28
275B:  GOTO   650 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
275C:  MOVLW  16
275D:  MOVLB  03
275E:  MOVWF  11
275F:  MOVLW  06
2760:  MOVWF  12
2761:  MOVLP  08
2762:  MOVLB  00
2763:  CALL   0D4
2764:  MOVLP  20
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
2765:  MOVLB  0B
2766:  MOVF   25,W
2767:  MOVWF  04
2768:  MOVF   26,W
2769:  MOVWF  05
276A:  ADDFSR 00,FSR0
276B:  MOVF   00,W
276C:  MOVWF  67
276D:  MOVLB  0E
276E:  MOVWF  3C
276F:  MOVLW  01
2770:  MOVWF  3D
2771:  MOVLP  10
2772:  MOVLB  00
2773:  CALL   3A7
2774:  MOVLP  20
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
2775:  MOVLB  0B
2776:  CLRF   27
2777:  CLRF   28
2778:  CLRF   29
2779:  CLRF   2A
277A:  CLRF   2B
277B:  CLRF   2C
277C:  CLRF   2D
277D:  CLRF   2E
277E:  CLRF   2F
277F:  CLRF   30
2780:  CLRF   31
2781:  CLRF   32
2782:  CLRF   33
2783:  CLRF   34
2784:  CLRF   35
2785:  CLRF   36
2786:  CLRF   37
2787:  CLRF   38
2788:  CLRF   39
2789:  CLRF   3A
278A:  CLRF   3B
278B:  CLRF   3C
278C:  CLRF   3D
278D:  CLRF   3E
278E:  CLRF   3F
278F:  CLRF   40
2790:  CLRF   41
2791:  CLRF   42
2792:  CLRF   43
2793:  CLRF   44
2794:  CLRF   45
2795:  CLRF   46
2796:  CLRF   47
2797:  CLRF   48
2798:  CLRF   49
2799:  CLRF   4A
279A:  CLRF   4B
279B:  CLRF   4C
279C:  CLRF   4D
279D:  CLRF   4E
279E:  CLRF   4F
279F:  CLRF   50
27A0:  CLRF   51
27A1:  CLRF   52
27A2:  CLRF   53
27A3:  CLRF   54
27A4:  CLRF   55
27A5:  CLRF   56
27A6:  CLRF   57
27A7:  CLRF   58
27A8:  CLRF   59
27A9:  CLRF   5A
27AA:  CLRF   5B
27AB:  CLRF   5C
27AC:  CLRF   5D
27AD:  CLRF   5E
27AE:  CLRF   5F
27AF:  CLRF   60
27B0:  CLRF   61
27B1:  CLRF   62
27B2:  CLRF   63
27B3:  CLRF   64
27B4:  CLRF   65
27B5:  CLRF   66
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
27B6:  MOVLB  08
27B7:  MOVF   5D,W
27B8:  MOVLB  0F
27B9:  MOVWF  41
27BA:  MOVLB  08
27BB:  MOVF   5C,W
27BC:  MOVLB  0F
27BD:  MOVWF  40
27BE:  MOVLB  08
27BF:  MOVF   5B,W
27C0:  MOVLB  0F
27C1:  MOVWF  3F
27C2:  MOVLB  08
27C3:  MOVF   5A,W
27C4:  MOVLB  0F
27C5:  MOVWF  3E
27C6:  CLRF   45
27C7:  CLRF   44
27C8:  CLRF   43
27C9:  CLRF   42
27CA:  MOVLW  23
27CB:  MOVWF  47
27CC:  MOVLW  77
27CD:  MOVWF  46
27CE:  CLRF   49
27CF:  MOVLW  40
27D0:  MOVWF  48
27D1:  MOVLP  10
27D2:  MOVLB  00
27D3:  CALL   0A5
27D4:  MOVLP  20
....................    misf_init(); // Update the address area after writing
27D5:  MOVLP  08
27D6:  CALL   4A0
27D7:  MOVLP  20
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
27D8:  MOVLB  0B
27D9:  MOVF   25,W
27DA:  MOVWF  04
27DB:  MOVF   26,W
27DC:  MOVWF  05
27DD:  ADDFSR 00,FSR0
27DE:  MOVF   00,W
27DF:  MOVWF  67
27E0:  MOVLB  0E
27E1:  MOVWF  3C
27E2:  MOVLW  02
27E3:  MOVWF  3D
27E4:  MOVLP  10
27E5:  MOVLB  00
27E6:  CALL   3A7
27E7:  MOVLP  20
....................    fprintf(PC, "End Flash Address Reset\r\n");
27E8:  MOVLW  24
27E9:  MOVLB  03
27EA:  MOVWF  11
27EB:  MOVLW  06
27EC:  MOVWF  12
27ED:  MOVLP  08
27EE:  MOVLB  00
27EF:  CALL   0D4
27F0:  MOVLP  20
27F1:  MOVLP  28
27F2:  GOTO   650 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
3693:  MOVLW  31
3694:  MOVLB  03
3695:  MOVWF  11
3696:  MOVLW  06
3697:  MOVWF  12
3698:  MOVLP  08
3699:  MOVLB  00
369A:  CALL   0D4
369B:  MOVLP  30
....................     fprintf(PC, "___Start copy_data__\r\n");
369C:  MOVLW  3E
369D:  MOVLB  03
369E:  MOVWF  11
369F:  MOVLW  06
36A0:  MOVWF  12
36A1:  MOVLP  08
36A2:  MOVLB  00
36A3:  CALL   0D4
36A4:  MOVLP  30
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
36A5:  MOVLB  0B
36A6:  CLRF   5F
36A7:  MOVLP  08
36A8:  MOVLB  00
36A9:  CALL   7F2
36AA:  MOVLP  30
36AB:  MOVF   78,F
36AC:  BTFSS  03.2
36AD:  GOTO   7E0
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
36AE:  MOVLW  4A
36AF:  MOVLB  03
36B0:  MOVWF  11
36B1:  MOVLW  06
36B2:  MOVWF  12
36B3:  BCF    03.0
36B4:  MOVLW  07
36B5:  MOVLB  0C
36B6:  MOVWF  5E
36B7:  MOVLP  08
36B8:  MOVLB  00
36B9:  CALL   122
36BA:  MOVLP  30
36BB:  MOVLB  0B
36BC:  MOVF   5F,W
36BD:  MOVLB  0C
36BE:  MOVWF  5B
36BF:  MOVLW  18
36C0:  MOVWF  5C
36C1:  MOVLP  28
36C2:  MOVLB  00
36C3:  CALL   000
36C4:  MOVLP  30
36C5:  MOVLW  4E
36C6:  MOVLB  03
36C7:  MOVWF  11
36C8:  MOVLW  06
36C9:  MOVWF  12
36CA:  BSF    03.0
36CB:  MOVLW  12
36CC:  MOVLB  0C
36CD:  MOVWF  5E
36CE:  MOVLP  08
36CF:  MOVLB  00
36D0:  CALL   122
36D1:  MOVLP  30
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
36D2:  MOVLP  28
36D3:  GOTO   685
36D4:  MOVLP  30
36D5:  MOVF   79,W
36D6:  MOVLB  0B
36D7:  MOVWF  61
36D8:  MOVF   78,W
36D9:  MOVWF  60
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
36DA:  MOVF   61,W
36DB:  MOVLB  0C
36DC:  MOVWF  42
36DD:  MOVLB  0B
36DE:  MOVF   60,W
36DF:  MOVLB  0C
36E0:  MOVWF  41
36E1:  MOVLW  23
36E2:  MOVWF  44
36E3:  MOVLW  B2
36E4:  MOVWF  43
36E5:  MOVLW  23
36E6:  MOVWF  46
36E7:  MOVLW  BB
36E8:  MOVWF  45
36E9:  MOVLW  23
36EA:  MOVWF  48
36EB:  MOVLW  C0
36EC:  MOVWF  47
36ED:  MOVLW  23
36EE:  MOVWF  4A
36EF:  MOVLW  C4
36F0:  MOVWF  49
36F1:  MOVLW  23
36F2:  MOVWF  4C
36F3:  MOVLW  C8
36F4:  MOVWF  4B
36F5:  MOVLW  23
36F6:  MOVWF  4E
36F7:  MOVLW  BF
36F8:  MOVWF  4D
36F9:  MOVLW  23
36FA:  MOVWF  50
36FB:  MOVLW  CC
36FC:  MOVWF  4F
36FD:  MOVLB  00
36FE:  GOTO   11A
....................         status[i+1] = mission_type.mission_flag;
36FF:  MOVLW  01
3700:  MOVLB  0B
3701:  ADDWF  5F,W
3702:  ADDLW  09
3703:  MOVWF  04
3704:  MOVLW  20
3705:  MOVWF  05
3706:  BTFSC  03.0
3707:  INCF   05,F
3708:  MOVF   6A,W
3709:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
370A:  MOVF   6B,W
370B:  MOVLB  0C
370C:  MOVWF  30
370D:  MOVLW  10
370E:  MOVLB  0B
370F:  ADDWF  6C,W
3710:  MOVLB  0C
3711:  MOVWF  31
3712:  MOVLW  00
3713:  MOVLB  0B
3714:  ADDWFC 6D,W
3715:  MOVLB  0C
3716:  MOVWF  32
3717:  MOVLW  00
3718:  MOVLB  0B
3719:  ADDWFC 6E,W
371A:  MOVLB  0C
371B:  MOVWF  33
371C:  MOVF   23,W
371D:  MOVWF  37
371E:  MOVF   22,W
371F:  MOVWF  36
3720:  MOVF   21,W
3721:  MOVWF  35
3722:  MOVF   20,W
3723:  MOVWF  34
3724:  MOVF   30,W
3725:  SUBWF  34,W
3726:  MOVWF  38
3727:  MOVF   31,W
3728:  SUBWFC 35,W
3729:  MOVWF  39
372A:  MOVF   32,W
372B:  SUBWFC 36,W
372C:  MOVWF  3A
372D:  MOVF   33,W
372E:  SUBWFC 37,W
372F:  MOVWF  3B
3730:  MOVF   2C,W
3731:  ADDWF  30,W
3732:  MOVWF  3C
3733:  MOVF   2D,W
3734:  ADDWFC 31,W
3735:  MOVWF  3D
3736:  MOVF   2E,W
3737:  ADDWFC 32,W
3738:  MOVWF  3E
3739:  MOVF   2F,W
373A:  ADDWFC 33,W
373B:  MOVWF  3F
.................... 
....................         if ((used_size + write_size) > data_region_size)
373C:  MOVF   28,W
373D:  ADDWF  2C,W
373E:  MOVWF  40
373F:  MOVF   29,W
3740:  ADDWFC 2D,W
3741:  MOVWF  41
3742:  MOVF   2A,W
3743:  ADDWFC 2E,W
3744:  MOVWF  42
3745:  MOVF   2B,W
3746:  ADDWFC 2F,W
3747:  MOVWF  43
3748:  MOVF   3B,W
3749:  SUBWF  43,W
374A:  BTFSS  03.0
374B:  GOTO   77F
374C:  BTFSS  03.2
374D:  GOTO   75E
374E:  MOVF   3A,W
374F:  SUBWF  42,W
3750:  BTFSS  03.0
3751:  GOTO   77F
3752:  BTFSS  03.2
3753:  GOTO   75E
3754:  MOVF   39,W
3755:  SUBWF  41,W
3756:  BTFSS  03.0
3757:  GOTO   77F
3758:  BTFSS  03.2
3759:  GOTO   75E
375A:  MOVF   40,W
375B:  SUBWF  38,W
375C:  BTFSC  03.0
375D:  GOTO   77F
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
375E:  MOVF   33,W
375F:  MOVWF  44
3760:  MOVF   32,W
3761:  MOVWF  43
3762:  MOVF   31,W
3763:  MOVWF  42
3764:  MOVF   30,W
3765:  MOVWF  41
3766:  MOVF   37,W
3767:  MOVWF  48
3768:  MOVF   36,W
3769:  MOVWF  47
376A:  MOVF   35,W
376B:  MOVWF  46
376C:  MOVF   34,W
376D:  MOVWF  45
376E:  MOVLB  00
376F:  GOTO   4E1
....................             loop_count++;
3770:  MOVLB  0B
3771:  INCF   6F,F
....................             used_size = 0;
3772:  MOVLB  0C
3773:  CLRF   2F
3774:  CLRF   2E
3775:  CLRF   2D
3776:  CLRF   2C
....................             data_write_addr = data_region_start;
3777:  MOVF   33,W
3778:  MOVWF  3F
3779:  MOVF   32,W
377A:  MOVWF  3E
377B:  MOVF   31,W
377C:  MOVWF  3D
377D:  MOVF   30,W
377E:  MOVWF  3C
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
377F:  MOVF   3F,W
3780:  MOVWF  44
3781:  MOVF   3E,W
3782:  MOVWF  43
3783:  MOVF   3D,W
3784:  MOVWF  42
3785:  MOVF   3C,W
3786:  MOVWF  41
3787:  MOVF   2B,W
3788:  MOVWF  48
3789:  MOVF   2A,W
378A:  MOVWF  47
378B:  MOVF   29,W
378C:  MOVWF  46
378D:  MOVF   28,W
378E:  MOVWF  45
378F:  MOVF   23,W
3790:  MOVWF  4C
3791:  MOVF   22,W
3792:  MOVWF  4B
3793:  MOVF   21,W
3794:  MOVWF  4A
3795:  MOVF   20,W
3796:  MOVWF  49
3797:  MOVLB  00
3798:  GOTO   537
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
3799:  MOVLB  0C
379A:  MOVF   27,W
379B:  MOVWF  44
379C:  MOVF   26,W
379D:  MOVWF  43
379E:  MOVF   25,W
379F:  MOVWF  42
37A0:  MOVF   24,W
37A1:  MOVWF  41
37A2:  MOVF   2B,W
37A3:  MOVWF  48
37A4:  MOVF   2A,W
37A5:  MOVWF  47
37A6:  MOVF   29,W
37A7:  MOVWF  46
37A8:  MOVF   28,W
37A9:  MOVWF  45
37AA:  MOVF   3F,W
37AB:  MOVWF  4C
37AC:  MOVF   3E,W
37AD:  MOVWF  4B
37AE:  MOVF   3D,W
37AF:  MOVWF  4A
37B0:  MOVF   3C,W
37B1:  MOVWF  49
37B2:  MOVLW  23
37B3:  MOVWF  4E
37B4:  MOVLW  6F
37B5:  MOVWF  4D
37B6:  MOVLW  23
37B7:  MOVWF  50
37B8:  MOVLW  CC
37B9:  MOVWF  4F
37BA:  MOVLB  00
37BB:  GOTO   5B9
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
37BC:  MOVLB  0B
37BD:  MOVF   6E,W
37BE:  MOVLB  0C
37BF:  MOVWF  44
37C0:  MOVLB  0B
37C1:  MOVF   6D,W
37C2:  MOVLB  0C
37C3:  MOVWF  43
37C4:  MOVLB  0B
37C5:  MOVF   6C,W
37C6:  MOVLB  0C
37C7:  MOVWF  42
37C8:  MOVLB  0B
37C9:  MOVF   6B,W
37CA:  MOVLB  0C
37CB:  MOVWF  41
37CC:  MOVF   2F,W
37CD:  MOVWF  48
37CE:  MOVF   2E,W
37CF:  MOVWF  47
37D0:  MOVF   2D,W
37D1:  MOVWF  46
37D2:  MOVF   2C,W
37D3:  MOVWF  45
37D4:  MOVLB  0B
37D5:  MOVF   6F,W
37D6:  MOVLB  0C
37D7:  MOVWF  49
37D8:  MOVLP  38
37D9:  MOVLB  00
37DA:  GOTO   1DB
37DB:  MOVLP  30
37DC:  MOVLB  0B
37DD:  INCF   5F,F
37DE:  GOTO   6A7
37DF:  MOVLB  00
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
37E0:  MOVLW  58
37E1:  MOVLB  03
37E2:  MOVWF  11
37E3:  MOVLW  06
37E4:  MOVWF  12
37E5:  MOVLP  08
37E6:  MOVLB  00
37E7:  CALL   0D4
37E8:  MOVLP  30
....................     fprintf(PC, "____________________\r\n\r\n");
37E9:  MOVLW  65
37EA:  MOVLB  03
37EB:  MOVWF  11
37EC:  MOVLW  06
37ED:  MOVWF  12
37EE:  MOVLP  08
37EF:  MOVLB  00
37F0:  CALL   0D4
37F1:  MOVLP  30
37F2:  MOVLP  28
37F3:  GOTO   7ED (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
311A:  MOVLB  0C
311B:  MOVF   44,W
311C:  MOVWF  7A
311D:  MOVF   43,W
311E:  MOVWF  56
311F:  MOVF   7A,W
3120:  MOVWF  57
3121:  MOVF   41,W
3122:  MOVWF  04
3123:  MOVF   42,W
3124:  MOVWF  05
3125:  ADDFSR 00,FSR0
3126:  MOVF   00,W
3127:  MOVWF  58
3128:  MOVWF  5F
3129:  MOVLP  28
312A:  MOVLB  00
312B:  GOTO   6D6
312C:  MOVLP  30
312D:  MOVF   79,W
312E:  MOVWF  7A
312F:  MOVF   78,W
3130:  MOVWF  04
3131:  MOVF   7A,W
3132:  MOVWF  05
3133:  MOVLW  09
3134:  MOVWF  78
3135:  MOVLB  0C
3136:  MOVF   57,W
3137:  MOVWF  07
3138:  MOVF   56,W
3139:  MOVWF  06
313A:  MOVIW  [FSR0++],W
313B:  MOVWI  W,[FSR1++]
313C:  DECFSZ 78,F
313D:  GOTO   13A
....................     *mis_start_address = mission_type->start_address;
313E:  MOVF   46,W
313F:  MOVWF  7A
3140:  MOVF   7A,W
3141:  MOVWF  57
3142:  MOVF   43,W
3143:  MOVWF  04
3144:  MOVF   44,W
3145:  MOVWF  05
3146:  ADDFSR 00,FSR0
3147:  MOVF   00,W
3148:  MOVWF  77
3149:  ADDFSR 01,FSR0
314A:  MOVF   00,W
314B:  MOVWF  78
314C:  ADDFSR 01,FSR0
314D:  MOVF   00,W
314E:  MOVWF  79
314F:  ADDFSR 01,FSR0
3150:  MOVF   00,W
3151:  MOVWF  7A
3152:  ADDFSR 3D,FSR0
3153:  MOVF   7A,W
3154:  MOVWF  5B
3155:  MOVF   79,W
3156:  MOVWF  5A
3157:  MOVF   78,W
3158:  MOVWF  59
3159:  MOVF   77,W
315A:  MOVWF  58
315B:  MOVF   57,W
315C:  MOVWF  05
315D:  MOVF   45,W
315E:  MOVWF  04
315F:  MOVF   58,W
3160:  MOVWF  00
3161:  MOVF   59,W
3162:  MOVWI  W,[FSR0+01]
3163:  MOVF   5A,W
3164:  MOVWI  W,[FSR0+02]
3165:  MOVF   5B,W
3166:  MOVWI  W,[FSR0+03]
....................     *mis_end_address = mission_type->end_address;
3167:  MOVF   43,W
3168:  MOVWF  04
3169:  MOVF   44,W
316A:  MOVWF  05
316B:  ADDFSR 04,FSR0
316C:  MOVF   00,W
316D:  MOVWF  77
316E:  ADDFSR 01,FSR0
316F:  MOVF   00,W
3170:  MOVWF  78
3171:  ADDFSR 01,FSR0
3172:  MOVF   00,W
3173:  MOVWF  79
3174:  ADDFSR 01,FSR0
3175:  MOVF   00,W
3176:  MOVWF  7A
3177:  ADDFSR 3D,FSR0
3178:  MOVF   7A,W
3179:  MOVWF  5B
317A:  MOVF   79,W
317B:  MOVWF  5A
317C:  MOVF   78,W
317D:  MOVWF  59
317E:  MOVF   77,W
317F:  MOVWF  58
3180:  MOVF   48,W
3181:  MOVWF  05
3182:  MOVF   47,W
3183:  MOVWF  04
3184:  MOVF   58,W
3185:  MOVWF  00
3186:  MOVF   59,W
3187:  MOVWI  W,[FSR0+01]
3188:  MOVF   5A,W
3189:  MOVWI  W,[FSR0+02]
318A:  MOVF   5B,W
318B:  MOVWI  W,[FSR0+03]
....................     *write_src = smf_data->src;
318C:  MOVF   41,W
318D:  MOVWF  04
318E:  MOVF   42,W
318F:  MOVWF  05
3190:  ADDFSR 01,FSR0
3191:  MOVF   00,W
3192:  MOVWF  77
3193:  ADDFSR 01,FSR0
3194:  MOVF   00,W
3195:  MOVWF  78
3196:  ADDFSR 01,FSR0
3197:  MOVF   00,W
3198:  MOVWF  79
3199:  ADDFSR 01,FSR0
319A:  MOVF   00,W
319B:  MOVWF  7A
319C:  ADDFSR 3D,FSR0
319D:  MOVF   7A,W
319E:  MOVWF  5B
319F:  MOVF   79,W
31A0:  MOVWF  5A
31A1:  MOVF   78,W
31A2:  MOVWF  59
31A3:  MOVF   77,W
31A4:  MOVWF  58
31A5:  MOVF   4A,W
31A6:  MOVWF  05
31A7:  MOVF   49,W
31A8:  MOVWF  04
31A9:  MOVF   58,W
31AA:  MOVWF  00
31AB:  MOVF   59,W
31AC:  MOVWI  W,[FSR0+01]
31AD:  MOVF   5A,W
31AE:  MOVWI  W,[FSR0+02]
31AF:  MOVF   5B,W
31B0:  MOVWI  W,[FSR0+03]
....................     *write_size = smf_data->size;
31B1:  MOVF   41,W
31B2:  MOVWF  04
31B3:  MOVF   42,W
31B4:  MOVWF  05
31B5:  ADDFSR 05,FSR0
31B6:  MOVF   00,W
31B7:  MOVWF  77
31B8:  ADDFSR 01,FSR0
31B9:  MOVF   00,W
31BA:  MOVWF  78
31BB:  ADDFSR 01,FSR0
31BC:  MOVF   00,W
31BD:  MOVWF  79
31BE:  ADDFSR 01,FSR0
31BF:  MOVF   00,W
31C0:  MOVWF  7A
31C1:  ADDFSR 3D,FSR0
31C2:  MOVF   7A,W
31C3:  MOVWF  5B
31C4:  MOVF   79,W
31C5:  MOVWF  5A
31C6:  MOVF   78,W
31C7:  MOVWF  59
31C8:  MOVF   77,W
31C9:  MOVWF  58
31CA:  MOVF   4C,W
31CB:  MOVWF  05
31CC:  MOVF   4B,W
31CD:  MOVWF  04
31CE:  MOVF   58,W
31CF:  MOVWF  00
31D0:  MOVF   59,W
31D1:  MOVWI  W,[FSR0+01]
31D2:  MOVF   5A,W
31D3:  MOVWI  W,[FSR0+02]
31D4:  MOVF   5B,W
31D5:  MOVWI  W,[FSR0+03]
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
31D6:  MOVF   46,W
31D7:  MOVWF  7A
31D8:  MOVF   45,W
31D9:  MOVWF  04
31DA:  MOVF   46,W
31DB:  MOVWF  05
31DC:  MOVF   00,W
31DD:  MOVWF  56
31DE:  ADDFSR 01,FSR0
31DF:  MOVF   00,W
31E0:  MOVWF  57
31E1:  ADDFSR 01,FSR0
31E2:  MOVF   00,W
31E3:  MOVWF  58
31E4:  ADDFSR 01,FSR0
31E5:  MOVF   00,W
31E6:  MOVWF  59
31E7:  ADDFSR 3D,FSR0
31E8:  MOVLW  72
31E9:  MOVLB  03
31EA:  MOVWF  11
31EB:  MOVLW  06
31EC:  MOVWF  12
31ED:  BCF    03.0
31EE:  MOVLW  25
31EF:  MOVLB  0C
31F0:  MOVWF  5E
31F1:  MOVLP  08
31F2:  MOVLB  00
31F3:  CALL   122
31F4:  MOVLP  30
31F5:  MOVLB  0C
31F6:  MOVF   59,W
31F7:  MOVLB  0E
31F8:  MOVWF  4E
31F9:  MOVLW  37
31FA:  MOVWF  4F
31FB:  MOVLP  08
31FC:  MOVLB  00
31FD:  CALL   479
31FE:  MOVLP  30
31FF:  MOVLB  0C
3200:  MOVF   58,W
3201:  MOVLB  0E
3202:  MOVWF  4E
3203:  MOVLW  37
3204:  MOVWF  4F
3205:  MOVLP  08
3206:  MOVLB  00
3207:  CALL   479
3208:  MOVLP  30
3209:  MOVLB  0C
320A:  MOVF   57,W
320B:  MOVLB  0E
320C:  MOVWF  4E
320D:  MOVLW  37
320E:  MOVWF  4F
320F:  MOVLP  08
3210:  MOVLB  00
3211:  CALL   479
3212:  MOVLP  30
3213:  MOVLB  0C
3214:  MOVF   56,W
3215:  MOVLB  0E
3216:  MOVWF  4E
3217:  MOVLW  37
3218:  MOVWF  4F
3219:  MOVLP  08
321A:  MOVLB  00
321B:  CALL   479
321C:  MOVLP  30
321D:  MOVLW  0D
321E:  MOVLB  0F
321F:  MOVWF  43
3220:  MOVLP  08
3221:  MOVLB  00
3222:  CALL   0AF
3223:  MOVLP  30
3224:  MOVLW  0A
3225:  MOVLB  0F
3226:  MOVWF  43
3227:  MOVLP  08
3228:  MOVLB  00
3229:  CALL   0AF
322A:  MOVLP  30
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
322B:  MOVLB  0C
322C:  MOVF   48,W
322D:  MOVWF  7A
322E:  MOVF   47,W
322F:  MOVWF  04
3230:  MOVF   48,W
3231:  MOVWF  05
3232:  MOVF   00,W
3233:  MOVWF  56
3234:  ADDFSR 01,FSR0
3235:  MOVF   00,W
3236:  MOVWF  57
3237:  ADDFSR 01,FSR0
3238:  MOVF   00,W
3239:  MOVWF  58
323A:  ADDFSR 01,FSR0
323B:  MOVF   00,W
323C:  MOVWF  59
323D:  ADDFSR 3D,FSR0
323E:  MOVLW  88
323F:  MOVLB  03
3240:  MOVWF  11
3241:  MOVLW  06
3242:  MOVWF  12
3243:  BCF    03.0
3244:  MOVLW  25
3245:  MOVLB  0C
3246:  MOVWF  5E
3247:  MOVLP  08
3248:  MOVLB  00
3249:  CALL   122
324A:  MOVLP  30
324B:  MOVLB  0C
324C:  MOVF   59,W
324D:  MOVLB  0E
324E:  MOVWF  4E
324F:  MOVLW  37
3250:  MOVWF  4F
3251:  MOVLP  08
3252:  MOVLB  00
3253:  CALL   479
3254:  MOVLP  30
3255:  MOVLB  0C
3256:  MOVF   58,W
3257:  MOVLB  0E
3258:  MOVWF  4E
3259:  MOVLW  37
325A:  MOVWF  4F
325B:  MOVLP  08
325C:  MOVLB  00
325D:  CALL   479
325E:  MOVLP  30
325F:  MOVLB  0C
3260:  MOVF   57,W
3261:  MOVLB  0E
3262:  MOVWF  4E
3263:  MOVLW  37
3264:  MOVWF  4F
3265:  MOVLP  08
3266:  MOVLB  00
3267:  CALL   479
3268:  MOVLP  30
3269:  MOVLB  0C
326A:  MOVF   56,W
326B:  MOVLB  0E
326C:  MOVWF  4E
326D:  MOVLW  37
326E:  MOVWF  4F
326F:  MOVLP  08
3270:  MOVLB  00
3271:  CALL   479
3272:  MOVLP  30
3273:  MOVLW  0D
3274:  MOVLB  0F
3275:  MOVWF  43
3276:  MOVLP  08
3277:  MOVLB  00
3278:  CALL   0AF
3279:  MOVLP  30
327A:  MOVLW  0A
327B:  MOVLB  0F
327C:  MOVWF  43
327D:  MOVLP  08
327E:  MOVLB  00
327F:  CALL   0AF
3280:  MOVLP  30
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
3281:  MOVLB  0C
3282:  MOVF   4A,W
3283:  MOVWF  7A
3284:  MOVF   49,W
3285:  MOVWF  04
3286:  MOVF   4A,W
3287:  MOVWF  05
3288:  MOVF   00,W
3289:  MOVWF  56
328A:  ADDFSR 01,FSR0
328B:  MOVF   00,W
328C:  MOVWF  57
328D:  ADDFSR 01,FSR0
328E:  MOVF   00,W
328F:  MOVWF  58
3290:  ADDFSR 01,FSR0
3291:  MOVF   00,W
3292:  MOVWF  59
3293:  ADDFSR 3D,FSR0
3294:  MOVLW  9E
3295:  MOVLB  03
3296:  MOVWF  11
3297:  MOVLW  06
3298:  MOVWF  12
3299:  BCF    03.0
329A:  MOVLW  25
329B:  MOVLB  0C
329C:  MOVWF  5E
329D:  MOVLP  08
329E:  MOVLB  00
329F:  CALL   122
32A0:  MOVLP  30
32A1:  MOVLB  0C
32A2:  MOVF   59,W
32A3:  MOVLB  0E
32A4:  MOVWF  4E
32A5:  MOVLW  37
32A6:  MOVWF  4F
32A7:  MOVLP  08
32A8:  MOVLB  00
32A9:  CALL   479
32AA:  MOVLP  30
32AB:  MOVLB  0C
32AC:  MOVF   58,W
32AD:  MOVLB  0E
32AE:  MOVWF  4E
32AF:  MOVLW  37
32B0:  MOVWF  4F
32B1:  MOVLP  08
32B2:  MOVLB  00
32B3:  CALL   479
32B4:  MOVLP  30
32B5:  MOVLB  0C
32B6:  MOVF   57,W
32B7:  MOVLB  0E
32B8:  MOVWF  4E
32B9:  MOVLW  37
32BA:  MOVWF  4F
32BB:  MOVLP  08
32BC:  MOVLB  00
32BD:  CALL   479
32BE:  MOVLP  30
32BF:  MOVLB  0C
32C0:  MOVF   56,W
32C1:  MOVLB  0E
32C2:  MOVWF  4E
32C3:  MOVLW  37
32C4:  MOVWF  4F
32C5:  MOVLP  08
32C6:  MOVLB  00
32C7:  CALL   479
32C8:  MOVLP  30
32C9:  MOVLW  0D
32CA:  MOVLB  0F
32CB:  MOVWF  43
32CC:  MOVLP  08
32CD:  MOVLB  00
32CE:  CALL   0AF
32CF:  MOVLP  30
32D0:  MOVLW  0A
32D1:  MOVLB  0F
32D2:  MOVWF  43
32D3:  MOVLP  08
32D4:  MOVLB  00
32D5:  CALL   0AF
32D6:  MOVLP  30
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
32D7:  MOVLB  0C
32D8:  MOVF   4C,W
32D9:  MOVWF  7A
32DA:  MOVF   4B,W
32DB:  MOVWF  04
32DC:  MOVF   4C,W
32DD:  MOVWF  05
32DE:  MOVF   00,W
32DF:  MOVWF  56
32E0:  ADDFSR 01,FSR0
32E1:  MOVF   00,W
32E2:  MOVWF  57
32E3:  ADDFSR 01,FSR0
32E4:  MOVF   00,W
32E5:  MOVWF  58
32E6:  ADDFSR 01,FSR0
32E7:  MOVF   00,W
32E8:  MOVWF  59
32E9:  ADDFSR 3D,FSR0
32EA:  MOVLW  B4
32EB:  MOVLB  03
32EC:  MOVWF  11
32ED:  MOVLW  06
32EE:  MOVWF  12
32EF:  BCF    03.0
32F0:  MOVLW  25
32F1:  MOVLB  0C
32F2:  MOVWF  5E
32F3:  MOVLP  08
32F4:  MOVLB  00
32F5:  CALL   122
32F6:  MOVLP  30
32F7:  MOVLW  41
32F8:  MOVWF  04
32F9:  MOVLB  0C
32FA:  MOVF   59,W
32FB:  MOVWF  61
32FC:  MOVF   58,W
32FD:  MOVWF  60
32FE:  MOVF   57,W
32FF:  MOVWF  5F
3300:  MOVF   56,W
3301:  MOVWF  5E
3302:  MOVLP  28
3303:  MOVLB  00
3304:  CALL   745
3305:  MOVLP  30
3306:  MOVLW  C8
3307:  MOVLB  03
3308:  MOVWF  11
3309:  MOVLW  06
330A:  MOVWF  12
330B:  BCF    03.0
330C:  MOVLW  04
330D:  MOVLB  0C
330E:  MOVWF  5E
330F:  MOVLP  08
3310:  MOVLB  00
3311:  CALL   122
3312:  MOVLP  30
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
3313:  MOVLB  0C
3314:  MOVF   46,W
3315:  MOVWF  7A
3316:  MOVF   45,W
3317:  MOVWF  04
3318:  MOVF   46,W
3319:  MOVWF  05
331A:  MOVF   00,W
331B:  MOVWF  56
331C:  ADDFSR 01,FSR0
331D:  MOVF   00,W
331E:  MOVWF  57
331F:  ADDFSR 01,FSR0
3320:  MOVF   00,W
3321:  MOVWF  58
3322:  ADDFSR 01,FSR0
3323:  MOVF   00,W
3324:  MOVWF  59
3325:  ADDFSR 3D,FSR0
3326:  MOVLB  08
3327:  MOVF   61,W
3328:  MOVLB  0E
3329:  MOVWF  42
332A:  MOVLB  08
332B:  MOVF   60,W
332C:  MOVLB  0E
332D:  MOVWF  41
332E:  MOVLB  08
332F:  MOVF   5F,W
3330:  MOVLB  0E
3331:  MOVWF  40
3332:  MOVLB  08
3333:  MOVF   5E,W
3334:  MOVLB  0E
3335:  MOVWF  3F
3336:  MOVLB  0C
3337:  MOVF   59,W
3338:  MOVLB  0E
3339:  MOVWF  46
333A:  MOVLB  0C
333B:  MOVF   58,W
333C:  MOVLB  0E
333D:  MOVWF  45
333E:  MOVLB  0C
333F:  MOVF   57,W
3340:  MOVLB  0E
3341:  MOVWF  44
3342:  MOVLB  0C
3343:  MOVF   56,W
3344:  MOVLB  0E
3345:  MOVWF  43
3346:  MOVLW  23
3347:  MOVWF  48
3348:  MOVLW  F1
3349:  MOVWF  47
334A:  CLRF   4C
334B:  CLRF   4B
334C:  CLRF   4A
334D:  MOVLW  04
334E:  MOVWF  49
334F:  MOVLP  08
3350:  MOVLB  00
3351:  CALL   384
3352:  MOVLP  30
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
3353:  MOVLB  0C
3354:  MOVF   4F,W
3355:  MOVWF  04
3356:  MOVF   50,W
3357:  MOVWF  05
3358:  CLRF   5B
3359:  CLRF   5A
335A:  CLRF   59
335B:  MOVF   54,W
335C:  MOVWF  58
335D:  MOVWF  5B
335E:  CLRF   58
335F:  CLRF   59
3360:  CLRF   5A
3361:  CLRF   60
3362:  CLRF   5F
3363:  CLRF   5E
3364:  MOVF   5E,W
3365:  MOVWF  7A
3366:  CLRF   77
3367:  CLRF   78
3368:  MOVF   77,W
3369:  IORWF  58,F
336A:  MOVF   78,W
336B:  IORWF  59,F
336C:  MOVF   53,W
336D:  IORWF  5A,F
336E:  MOVF   5E,W
336F:  IORWF  5B,F
3370:  CLRF   60
3371:  CLRF   5F
3372:  CLRF   5E
3373:  MOVF   5F,W
3374:  MOVWF  7A
3375:  MOVF   5E,W
3376:  MOVWF  79
3377:  MOVF   52,W
3378:  MOVWF  78
3379:  CLRF   77
337A:  MOVF   77,W
337B:  IORWF  58,F
337C:  MOVF   52,W
337D:  IORWF  59,F
337E:  MOVF   5E,W
337F:  IORWF  5A,F
3380:  MOVF   5F,W
3381:  IORWF  5B,F
3382:  CLRF   78
3383:  CLRF   79
3384:  CLRF   7A
3385:  MOVF   51,W
3386:  IORWF  58,W
3387:  MOVWF  77
3388:  MOVF   78,W
3389:  IORWF  59,W
338A:  MOVWF  78
338B:  MOVF   79,W
338C:  IORWF  5A,W
338D:  MOVWF  79
338E:  MOVF   7A,W
338F:  IORWF  5B,W
3390:  MOVWF  7A
3391:  MOVF   77,W
3392:  MOVWF  00
3393:  MOVF   78,W
3394:  MOVWI  W,[FSR0+01]
3395:  MOVF   79,W
3396:  MOVWI  W,[FSR0+02]
3397:  MOVF   7A,W
3398:  MOVWI  W,[FSR0+03]
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
3399:  MOVF   4D,W
339A:  MOVWF  56
339B:  MOVF   4E,W
339C:  MOVWF  57
339D:  MOVF   46,W
339E:  MOVWF  7A
339F:  MOVF   45,W
33A0:  MOVWF  04
33A1:  MOVF   46,W
33A2:  MOVWF  05
33A3:  MOVF   00,W
33A4:  MOVWF  58
33A5:  ADDFSR 01,FSR0
33A6:  MOVF   00,W
33A7:  MOVWF  59
33A8:  ADDFSR 01,FSR0
33A9:  MOVF   00,W
33AA:  MOVWF  5A
33AB:  ADDFSR 01,FSR0
33AC:  MOVF   00,W
33AD:  MOVWF  5B
33AE:  ADDFSR 3D,FSR0
33AF:  MOVLW  04
33B0:  ADDWF  58,F
33B1:  MOVLW  00
33B2:  ADDWFC 59,F
33B3:  ADDWFC 5A,F
33B4:  ADDWFC 5B,F
33B5:  MOVLB  08
33B6:  MOVF   61,W
33B7:  MOVLB  0C
33B8:  MOVWF  5F
33B9:  MOVLB  08
33BA:  MOVF   60,W
33BB:  MOVLB  0C
33BC:  MOVWF  5E
33BD:  MOVLB  08
33BE:  MOVF   5F,W
33BF:  MOVLB  0C
33C0:  MOVWF  5D
33C1:  MOVLB  08
33C2:  MOVF   5E,W
33C3:  MOVLB  0C
33C4:  MOVWF  5C
33C5:  MOVF   5B,W
33C6:  MOVWF  63
33C7:  MOVF   5A,W
33C8:  MOVWF  62
33C9:  MOVF   59,W
33CA:  MOVWF  61
33CB:  MOVF   58,W
33CC:  MOVWF  60
33CD:  MOVLB  00
33CE:  GOTO   000
33CF:  MOVLB  0C
33D0:  MOVF   57,W
33D1:  MOVWF  05
33D2:  MOVF   56,W
33D3:  MOVWF  04
33D4:  MOVF   78,W
33D5:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
33D6:  MOVLW  CB
33D7:  MOVLB  03
33D8:  MOVWF  11
33D9:  MOVLW  06
33DA:  MOVWF  12
33DB:  MOVLP  08
33DC:  MOVLB  00
33DD:  CALL   0D4
33DE:  MOVLP  30
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
33DF:  MOVLB  0C
33E0:  MOVF   4F,W
33E1:  MOVWF  04
33E2:  MOVF   50,W
33E3:  MOVWF  05
33E4:  MOVF   00,W
33E5:  MOVWF  56
33E6:  ADDFSR 01,FSR0
33E7:  MOVF   00,W
33E8:  MOVWF  57
33E9:  ADDFSR 01,FSR0
33EA:  MOVF   00,W
33EB:  MOVWF  58
33EC:  ADDFSR 01,FSR0
33ED:  MOVF   00,W
33EE:  MOVWF  59
33EF:  ADDFSR 3D,FSR0
33F0:  MOVF   46,W
33F1:  MOVWF  7A
33F2:  MOVF   45,W
33F3:  MOVWF  04
33F4:  MOVF   46,W
33F5:  MOVWF  05
33F6:  MOVF   00,W
33F7:  MOVWF  5A
33F8:  ADDFSR 01,FSR0
33F9:  MOVF   00,W
33FA:  MOVWF  5B
33FB:  ADDFSR 01,FSR0
33FC:  MOVF   00,W
33FD:  MOVWF  5C
33FE:  ADDFSR 01,FSR0
33FF:  MOVF   00,W
3400:  MOVWF  5D
3401:  ADDFSR 3D,FSR0
3402:  MOVLW  D4
3403:  MOVLB  03
3404:  MOVWF  11
3405:  MOVLW  06
3406:  MOVWF  12
3407:  BCF    03.0
3408:  MOVLW  0C
3409:  MOVLB  0C
340A:  MOVWF  5E
340B:  MOVLP  08
340C:  MOVLB  00
340D:  CALL   122
340E:  MOVLP  30
340F:  MOVLW  41
3410:  MOVWF  04
3411:  MOVLB  0C
3412:  MOVF   59,W
3413:  MOVWF  61
3414:  MOVF   58,W
3415:  MOVWF  60
3416:  MOVF   57,W
3417:  MOVWF  5F
3418:  MOVF   56,W
3419:  MOVWF  5E
341A:  MOVLP  28
341B:  MOVLB  00
341C:  CALL   745
341D:  MOVLP  30
341E:  MOVLW  DB
341F:  MOVLB  03
3420:  MOVWF  11
3421:  MOVLW  06
3422:  MOVWF  12
3423:  BSF    03.0
3424:  MOVLW  08
3425:  MOVLB  0C
3426:  MOVWF  5E
3427:  MOVLP  08
3428:  MOVLB  00
3429:  CALL   122
342A:  MOVLP  30
342B:  MOVLB  0C
342C:  MOVF   5D,W
342D:  MOVLB  0E
342E:  MOVWF  4E
342F:  MOVLW  37
3430:  MOVWF  4F
3431:  MOVLP  08
3432:  MOVLB  00
3433:  CALL   479
3434:  MOVLP  30
3435:  MOVLB  0C
3436:  MOVF   5C,W
3437:  MOVLB  0E
3438:  MOVWF  4E
3439:  MOVLW  37
343A:  MOVWF  4F
343B:  MOVLP  08
343C:  MOVLB  00
343D:  CALL   479
343E:  MOVLP  30
343F:  MOVLB  0C
3440:  MOVF   5B,W
3441:  MOVLB  0E
3442:  MOVWF  4E
3443:  MOVLW  37
3444:  MOVWF  4F
3445:  MOVLP  08
3446:  MOVLB  00
3447:  CALL   479
3448:  MOVLP  30
3449:  MOVLB  0C
344A:  MOVF   5A,W
344B:  MOVLB  0E
344C:  MOVWF  4E
344D:  MOVLW  37
344E:  MOVWF  4F
344F:  MOVLP  08
3450:  MOVLB  00
3451:  CALL   479
3452:  MOVLP  30
3453:  MOVLW  29
3454:  MOVLB  0F
3455:  MOVWF  43
3456:  MOVLP  08
3457:  MOVLB  00
3458:  CALL   0AF
3459:  MOVLP  30
345A:  MOVLW  0D
345B:  MOVLB  0F
345C:  MOVWF  43
345D:  MOVLP  08
345E:  MOVLB  00
345F:  CALL   0AF
3460:  MOVLP  30
3461:  MOVLW  0A
3462:  MOVLB  0F
3463:  MOVWF  43
3464:  MOVLP  08
3465:  MOVLB  00
3466:  CALL   0AF
3467:  MOVLP  30
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
3468:  MOVLB  0C
3469:  MOVF   4D,W
346A:  MOVWF  04
346B:  MOVF   4E,W
346C:  MOVWF  05
346D:  MOVF   00,W
346E:  MOVWF  56
346F:  MOVF   46,W
3470:  MOVWF  7A
3471:  MOVF   45,W
3472:  MOVWF  04
3473:  MOVF   46,W
3474:  MOVWF  05
3475:  MOVF   00,W
3476:  MOVWF  57
3477:  ADDFSR 01,FSR0
3478:  MOVF   00,W
3479:  MOVWF  58
347A:  ADDFSR 01,FSR0
347B:  MOVF   00,W
347C:  MOVWF  59
347D:  ADDFSR 01,FSR0
347E:  MOVF   00,W
347F:  MOVWF  5A
3480:  ADDFSR 3D,FSR0
3481:  MOVLW  04
3482:  ADDWF  57,F
3483:  MOVLW  00
3484:  ADDWFC 58,F
3485:  ADDWFC 59,F
3486:  ADDWFC 5A,F
3487:  MOVLW  E4
3488:  MOVLB  03
3489:  MOVWF  11
348A:  MOVLW  06
348B:  MOVWF  12
348C:  BCF    03.0
348D:  MOVLW  0C
348E:  MOVLB  0C
348F:  MOVWF  5E
3490:  MOVLP  08
3491:  MOVLB  00
3492:  CALL   122
3493:  MOVLP  30
3494:  MOVLB  0C
3495:  MOVF   56,W
3496:  MOVWF  5B
3497:  MOVLW  18
3498:  MOVWF  5C
3499:  MOVLP  28
349A:  MOVLB  00
349B:  CALL   000
349C:  MOVLP  30
349D:  MOVLW  EB
349E:  MOVLB  03
349F:  MOVWF  11
34A0:  MOVLW  06
34A1:  MOVWF  12
34A2:  BCF    03.0
34A3:  MOVLW  09
34A4:  MOVLB  0C
34A5:  MOVWF  5E
34A6:  MOVLP  08
34A7:  MOVLB  00
34A8:  CALL   122
34A9:  MOVLP  30
34AA:  MOVLB  0C
34AB:  MOVF   5A,W
34AC:  MOVLB  0E
34AD:  MOVWF  4E
34AE:  MOVLW  37
34AF:  MOVWF  4F
34B0:  MOVLP  08
34B1:  MOVLB  00
34B2:  CALL   479
34B3:  MOVLP  30
34B4:  MOVLB  0C
34B5:  MOVF   59,W
34B6:  MOVLB  0E
34B7:  MOVWF  4E
34B8:  MOVLW  37
34B9:  MOVWF  4F
34BA:  MOVLP  08
34BB:  MOVLB  00
34BC:  CALL   479
34BD:  MOVLP  30
34BE:  MOVLB  0C
34BF:  MOVF   58,W
34C0:  MOVLB  0E
34C1:  MOVWF  4E
34C2:  MOVLW  37
34C3:  MOVWF  4F
34C4:  MOVLP  08
34C5:  MOVLB  00
34C6:  CALL   479
34C7:  MOVLP  30
34C8:  MOVLB  0C
34C9:  MOVF   57,W
34CA:  MOVLB  0E
34CB:  MOVWF  4E
34CC:  MOVLW  37
34CD:  MOVWF  4F
34CE:  MOVLP  08
34CF:  MOVLB  00
34D0:  CALL   479
34D1:  MOVLP  30
34D2:  MOVLW  F2
34D3:  MOVLB  03
34D4:  MOVWF  11
34D5:  MOVLW  06
34D6:  MOVWF  12
34D7:  BCF    03.0
34D8:  MOVLW  05
34D9:  MOVLB  0C
34DA:  MOVWF  5E
34DB:  MOVLP  08
34DC:  MOVLB  00
34DD:  CALL   122
34DE:  MOVLP  30
34DF:  MOVLP  30
34E0:  GOTO   6FF (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
34E1:  MOVLW  F5
34E2:  MOVLB  03
34E3:  MOVWF  11
34E4:  MOVLW  06
34E5:  MOVWF  12
34E6:  MOVLP  08
34E7:  MOVLB  00
34E8:  CALL   0D4
34E9:  MOVLP  30
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
34EA:  MOVLB  0C
34EB:  MOVF   44,W
34EC:  MOVWF  4C
34ED:  MOVF   43,W
34EE:  MOVWF  4B
34EF:  MOVF   42,W
34F0:  MOVWF  4A
34F1:  MOVF   41,W
34F2:  MOVWF  49
34F3:  MOVF   4C,W
34F4:  SUBWF  48,W
34F5:  BTFSS  03.0
34F6:  GOTO   534
34F7:  BTFSS  03.2
34F8:  GOTO   509
34F9:  MOVF   4B,W
34FA:  SUBWF  47,W
34FB:  BTFSS  03.0
34FC:  GOTO   534
34FD:  BTFSS  03.2
34FE:  GOTO   509
34FF:  MOVF   4A,W
3500:  SUBWF  46,W
3501:  BTFSS  03.0
3502:  GOTO   534
3503:  BTFSS  03.2
3504:  GOTO   509
3505:  MOVF   45,W
3506:  SUBWF  49,W
3507:  BTFSC  03.0
3508:  GOTO   534
....................         subsector_4kByte_erase(smf, addr);
3509:  MOVLB  08
350A:  MOVF   61,W
350B:  MOVLB  0F
350C:  MOVWF  41
350D:  MOVLB  08
350E:  MOVF   60,W
350F:  MOVLB  0F
3510:  MOVWF  40
3511:  MOVLB  08
3512:  MOVF   5F,W
3513:  MOVLB  0F
3514:  MOVWF  3F
3515:  MOVLB  08
3516:  MOVF   5E,W
3517:  MOVLB  0F
3518:  MOVWF  3E
3519:  MOVLB  0C
351A:  MOVF   4C,W
351B:  MOVLB  0F
351C:  MOVWF  45
351D:  MOVLB  0C
351E:  MOVF   4B,W
351F:  MOVLB  0F
3520:  MOVWF  44
3521:  MOVLB  0C
3522:  MOVF   4A,W
3523:  MOVLB  0F
3524:  MOVWF  43
3525:  MOVLB  0C
3526:  MOVF   49,W
3527:  MOVLB  0F
3528:  MOVWF  42
3529:  MOVLP  10
352A:  MOVLB  00
352B:  CALL   23B
352C:  MOVLP  30
352D:  MOVLW  10
352E:  MOVLB  0C
352F:  ADDWF  4A,F
3530:  MOVLW  00
3531:  ADDWFC 4B,F
3532:  ADDWFC 4C,F
3533:  GOTO   4F3
3534:  MOVLP  30
3535:  MOVLB  00
3536:  GOTO   770 (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
3537:  MOVLB  0C
3538:  CLRF   4D
3539:  MOVF   42,W
353A:  ANDLW  F0
353B:  MOVWF  4E
353C:  CLRF   4F
353D:  CLRF   50
353E:  MOVF   45,W
353F:  ADDWF  41,W
3540:  MOVWF  5C
3541:  MOVF   46,W
3542:  ADDWFC 42,W
3543:  MOVWF  5D
3544:  MOVF   47,W
3545:  ADDWFC 43,W
3546:  MOVWF  5E
3547:  MOVF   48,W
3548:  ADDWFC 44,W
3549:  MOVWF  5F
354A:  MOVLW  FF
354B:  ADDWF  5C,F
354C:  MOVLW  0F
354D:  ADDWFC 5D,F
354E:  MOVLW  00
354F:  ADDWFC 5E,F
3550:  ADDWFC 5F,F
3551:  CLRF   51
3552:  MOVF   5D,W
3553:  ANDLW  F0
3554:  MOVWF  52
3555:  CLRF   53
3556:  CLRF   54
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
3557:  MOVF   50,W
3558:  MOVWF  58
3559:  MOVF   4F,W
355A:  MOVWF  57
355B:  MOVF   4E,W
355C:  MOVWF  56
355D:  MOVF   4D,W
355E:  MOVWF  55
355F:  MOVF   58,W
3560:  SUBWF  54,W
3561:  BTFSS  03.0
3562:  GOTO   5B6
3563:  BTFSS  03.2
3564:  GOTO   575
3565:  MOVF   57,W
3566:  SUBWF  53,W
3567:  BTFSS  03.0
3568:  GOTO   5B6
3569:  BTFSS  03.2
356A:  GOTO   575
356B:  MOVF   56,W
356C:  SUBWF  52,W
356D:  BTFSS  03.0
356E:  GOTO   5B6
356F:  BTFSS  03.2
3570:  GOTO   575
3571:  MOVF   51,W
3572:  SUBWF  55,W
3573:  BTFSC  03.0
3574:  GOTO   5B6
3575:  MOVF   58,W
3576:  SUBWF  4C,W
3577:  BTFSS  03.0
3578:  GOTO   5B6
3579:  BTFSS  03.2
357A:  GOTO   58B
357B:  MOVF   57,W
357C:  SUBWF  4B,W
357D:  BTFSS  03.0
357E:  GOTO   5B6
357F:  BTFSS  03.2
3580:  GOTO   58B
3581:  MOVF   56,W
3582:  SUBWF  4A,W
3583:  BTFSS  03.0
3584:  GOTO   5B6
3585:  BTFSS  03.2
3586:  GOTO   58B
3587:  MOVF   49,W
3588:  SUBWF  55,W
3589:  BTFSC  03.0
358A:  GOTO   5B6
....................         subsector_4kByte_erase(smf, addr);
358B:  MOVLB  08
358C:  MOVF   61,W
358D:  MOVLB  0F
358E:  MOVWF  41
358F:  MOVLB  08
3590:  MOVF   60,W
3591:  MOVLB  0F
3592:  MOVWF  40
3593:  MOVLB  08
3594:  MOVF   5F,W
3595:  MOVLB  0F
3596:  MOVWF  3F
3597:  MOVLB  08
3598:  MOVF   5E,W
3599:  MOVLB  0F
359A:  MOVWF  3E
359B:  MOVLB  0C
359C:  MOVF   58,W
359D:  MOVLB  0F
359E:  MOVWF  45
359F:  MOVLB  0C
35A0:  MOVF   57,W
35A1:  MOVLB  0F
35A2:  MOVWF  44
35A3:  MOVLB  0C
35A4:  MOVF   56,W
35A5:  MOVLB  0F
35A6:  MOVWF  43
35A7:  MOVLB  0C
35A8:  MOVF   55,W
35A9:  MOVLB  0F
35AA:  MOVWF  42
35AB:  MOVLP  10
35AC:  MOVLB  00
35AD:  CALL   23B
35AE:  MOVLP  30
35AF:  MOVLW  10
35B0:  MOVLB  0C
35B1:  ADDWF  56,F
35B2:  MOVLW  00
35B3:  ADDWFC 57,F
35B4:  ADDWFC 58,F
35B5:  GOTO   55F
35B6:  MOVLP  30
35B7:  MOVLB  00
35B8:  GOTO   799 (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
35B9:  MOVLB  0C
35BA:  MOVF   48,W
35BB:  MOVWF  54
35BC:  MOVF   47,W
35BD:  MOVWF  53
35BE:  MOVF   46,W
35BF:  MOVWF  52
35C0:  MOVF   45,W
35C1:  MOVWF  51
35C2:  MOVF   44,W
35C3:  MOVWF  58
35C4:  MOVF   43,W
35C5:  MOVWF  57
35C6:  MOVF   42,W
35C7:  MOVWF  56
35C8:  MOVF   41,W
35C9:  MOVWF  55
35CA:  MOVF   4C,W
35CB:  MOVWF  5C
35CC:  MOVF   4B,W
35CD:  MOVWF  5B
35CE:  MOVF   4A,W
35CF:  MOVWF  5A
35D0:  MOVF   49,W
35D1:  MOVWF  59
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
35D2:  MOVF   51,F
35D3:  BTFSS  03.2
35D4:  GOTO   5DE
35D5:  MOVF   52,F
35D6:  BTFSS  03.2
35D7:  GOTO   5DE
35D8:  MOVF   53,F
35D9:  BTFSS  03.2
35DA:  GOTO   5DE
35DB:  MOVF   54,F
35DC:  BTFSC  03.2
35DD:  GOTO   690
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
35DE:  MOVF   54,F
35DF:  BTFSS  03.2
35E0:  GOTO   5EB
35E1:  MOVF   53,F
35E2:  BTFSS  03.2
35E3:  GOTO   5EB
35E4:  MOVF   52,F
35E5:  BTFSS  03.2
35E6:  GOTO   5EB
35E7:  MOVF   51,W
35E8:  SUBLW  40
35E9:  BTFSC  03.0
35EA:  GOTO   5EE
35EB:  CLRF   7A
35EC:  MOVLW  40
35ED:  GOTO   5F1
35EE:  MOVF   52,W
35EF:  MOVWF  7A
35F0:  MOVF   51,W
35F1:  MOVWF  5D
35F2:  MOVF   7A,W
35F3:  MOVWF  5E
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
35F4:  MOVLB  08
35F5:  MOVF   5D,W
35F6:  MOVLB  0E
35F7:  MOVWF  42
35F8:  MOVLB  08
35F9:  MOVF   5C,W
35FA:  MOVLB  0E
35FB:  MOVWF  41
35FC:  MOVLB  08
35FD:  MOVF   5B,W
35FE:  MOVLB  0E
35FF:  MOVWF  40
3600:  MOVLB  08
3601:  MOVF   5A,W
3602:  MOVLB  0E
3603:  MOVWF  3F
3604:  MOVLB  0C
3605:  MOVF   58,W
3606:  MOVLB  0E
3607:  MOVWF  46
3608:  MOVLB  0C
3609:  MOVF   57,W
360A:  MOVLB  0E
360B:  MOVWF  45
360C:  MOVLB  0C
360D:  MOVF   56,W
360E:  MOVLB  0E
360F:  MOVWF  44
3610:  MOVLB  0C
3611:  MOVF   55,W
3612:  MOVLB  0E
3613:  MOVWF  43
3614:  MOVLB  0C
3615:  MOVF   4E,W
3616:  MOVLB  0E
3617:  MOVWF  48
3618:  MOVLB  0C
3619:  MOVF   4D,W
361A:  MOVLB  0E
361B:  MOVWF  47
361C:  CLRF   4C
361D:  CLRF   4B
361E:  MOVLB  0C
361F:  MOVF   5E,W
3620:  MOVLB  0E
3621:  MOVWF  4A
3622:  MOVLB  0C
3623:  MOVF   5D,W
3624:  MOVLB  0E
3625:  MOVWF  49
3626:  MOVLP  08
3627:  MOVLB  00
3628:  CALL   384
3629:  MOVLP  30
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
362A:  MOVLB  08
362B:  MOVF   61,W
362C:  MOVLB  0F
362D:  MOVWF  41
362E:  MOVLB  08
362F:  MOVF   60,W
3630:  MOVLB  0F
3631:  MOVWF  40
3632:  MOVLB  08
3633:  MOVF   5F,W
3634:  MOVLB  0F
3635:  MOVWF  3F
3636:  MOVLB  08
3637:  MOVF   5E,W
3638:  MOVLB  0F
3639:  MOVWF  3E
363A:  MOVLB  0C
363B:  MOVF   5C,W
363C:  MOVLB  0F
363D:  MOVWF  45
363E:  MOVLB  0C
363F:  MOVF   5B,W
3640:  MOVLB  0F
3641:  MOVWF  44
3642:  MOVLB  0C
3643:  MOVF   5A,W
3644:  MOVLB  0F
3645:  MOVWF  43
3646:  MOVLB  0C
3647:  MOVF   59,W
3648:  MOVLB  0F
3649:  MOVWF  42
364A:  MOVLB  0C
364B:  MOVF   4E,W
364C:  MOVLB  0F
364D:  MOVWF  47
364E:  MOVLB  0C
364F:  MOVF   4D,W
3650:  MOVLB  0F
3651:  MOVWF  46
3652:  MOVLB  0C
3653:  MOVF   5E,W
3654:  MOVLB  0F
3655:  MOVWF  49
3656:  MOVLB  0C
3657:  MOVF   5D,W
3658:  MOVLB  0F
3659:  MOVWF  48
365A:  MOVLP  10
365B:  MOVLB  00
365C:  CALL   0A5
365D:  MOVLP  30
.................... 
....................         src_addr += chunk;
365E:  MOVLB  0C
365F:  MOVF   5D,W
3660:  ADDWF  55,F
3661:  MOVF   5E,W
3662:  ADDWFC 56,F
3663:  MOVLW  00
3664:  ADDWFC 57,F
3665:  ADDWFC 58,F
....................         data_write_addr += chunk;
3666:  MOVF   5D,W
3667:  ADDWF  59,F
3668:  MOVF   5E,W
3669:  ADDWFC 5A,F
366A:  MOVLW  00
366B:  ADDWFC 5B,F
366C:  ADDWFC 5C,F
....................         *used_size += chunk;
366D:  MOVF   4F,W
366E:  MOVWF  04
366F:  MOVF   50,W
3670:  MOVWF  05
3671:  MOVF   5D,W
3672:  ADDWF  00,W
3673:  MOVWF  77
3674:  ADDFSR 01,FSR0
3675:  MOVF   5E,W
3676:  ADDWFC 00,W
3677:  MOVWF  78
3678:  ADDFSR 01,FSR0
3679:  MOVLW  00
367A:  ADDWFC 00,W
367B:  MOVWF  79
367C:  ADDFSR 01,FSR0
367D:  MOVLW  00
367E:  ADDWFC 00,W
367F:  MOVWF  7A
3680:  MOVF   77,W
3681:  MOVWI  W,[FSR0-03]
3682:  MOVF   78,W
3683:  MOVWI  W,[FSR0-02]
3684:  MOVF   79,W
3685:  MOVWI  W,[FSR0-01]
3686:  MOVF   7A,W
3687:  MOVWI  W,[FSR0+00]
....................         remaining -= chunk;
3688:  MOVF   5D,W
3689:  SUBWF  51,F
368A:  MOVF   5E,W
368B:  SUBWFC 52,F
368C:  MOVLW  00
368D:  SUBWFC 53,F
368E:  SUBWFC 54,F
368F:  GOTO   5D2
....................     }
3690:  MOVLP  30
3691:  MOVLB  00
3692:  GOTO   7BC (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
39DB:  MOVLW  10
39DC:  MOVLB  03
39DD:  MOVWF  11
39DE:  MOVLW  07
39DF:  MOVWF  12
39E0:  MOVLP  08
39E1:  MOVLB  00
39E2:  CALL   0D4
39E3:  MOVLP  38
....................     subsector_4kByte_erase(smf, base_addr);
39E4:  MOVLB  08
39E5:  MOVF   61,W
39E6:  MOVLB  0F
39E7:  MOVWF  41
39E8:  MOVLB  08
39E9:  MOVF   60,W
39EA:  MOVLB  0F
39EB:  MOVWF  40
39EC:  MOVLB  08
39ED:  MOVF   5F,W
39EE:  MOVLB  0F
39EF:  MOVWF  3F
39F0:  MOVLB  08
39F1:  MOVF   5E,W
39F2:  MOVLB  0F
39F3:  MOVWF  3E
39F4:  MOVLB  0C
39F5:  MOVF   44,W
39F6:  MOVLB  0F
39F7:  MOVWF  45
39F8:  MOVLB  0C
39F9:  MOVF   43,W
39FA:  MOVLB  0F
39FB:  MOVWF  44
39FC:  MOVLB  0C
39FD:  MOVF   42,W
39FE:  MOVLB  0F
39FF:  MOVWF  43
3A00:  MOVLB  0C
3A01:  MOVF   41,W
3A02:  MOVLB  0F
3A03:  MOVWF  42
3A04:  MOVLP  10
3A05:  MOVLB  00
3A06:  CALL   23B
3A07:  MOVLP  38
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
3A08:  MOVLB  0C
3A09:  MOVF   48,W
3A0A:  MOVWF  50
3A0B:  MOVF   47,W
3A0C:  MOVWF  4F
3A0D:  MOVF   46,W
3A0E:  MOVWF  4E
3A0F:  MOVF   45,W
3A10:  MOVWF  4D
3A11:  CLRF   4E
3A12:  CLRF   4F
3A13:  CLRF   50
3A14:  MOVLB  08
3A15:  MOVF   61,W
3A16:  MOVLB  0C
3A17:  MOVWF  58
3A18:  MOVLB  08
3A19:  MOVF   60,W
3A1A:  MOVLB  0C
3A1B:  MOVWF  57
3A1C:  MOVLB  08
3A1D:  MOVF   5F,W
3A1E:  MOVLB  0C
3A1F:  MOVWF  56
3A20:  MOVLB  08
3A21:  MOVF   5E,W
3A22:  MOVLB  0C
3A23:  MOVWF  55
3A24:  MOVF   44,W
3A25:  MOVWF  5C
3A26:  MOVF   43,W
3A27:  MOVWF  5B
3A28:  MOVF   42,W
3A29:  MOVWF  5A
3A2A:  MOVF   41,W
3A2B:  MOVWF  59
3A2C:  MOVF   45,W
3A2D:  MOVWF  5D
3A2E:  MOVLB  00
3A2F:  CALL   000
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
3A30:  MOVLW  01
3A31:  MOVLB  0C
3A32:  ADDWF  41,W
3A33:  MOVWF  4C
3A34:  MOVLW  00
3A35:  ADDWFC 42,W
3A36:  MOVWF  4D
3A37:  MOVLW  00
3A38:  ADDWFC 43,W
3A39:  MOVWF  4E
3A3A:  MOVLW  00
3A3B:  ADDWFC 44,W
3A3C:  MOVWF  4F
3A3D:  MOVF   46,W
3A3E:  MOVWF  51
3A3F:  MOVF   47,W
3A40:  MOVWF  52
3A41:  MOVF   48,W
3A42:  MOVWF  53
3A43:  CLRF   54
3A44:  CLRF   52
3A45:  CLRF   53
3A46:  CLRF   54
3A47:  MOVLB  08
3A48:  MOVF   61,W
3A49:  MOVLB  0C
3A4A:  MOVWF  58
3A4B:  MOVLB  08
3A4C:  MOVF   60,W
3A4D:  MOVLB  0C
3A4E:  MOVWF  57
3A4F:  MOVLB  08
3A50:  MOVF   5F,W
3A51:  MOVLB  0C
3A52:  MOVWF  56
3A53:  MOVLB  08
3A54:  MOVF   5E,W
3A55:  MOVLB  0C
3A56:  MOVWF  55
3A57:  MOVF   4F,W
3A58:  MOVWF  5C
3A59:  MOVF   4E,W
3A5A:  MOVWF  5B
3A5B:  MOVF   4D,W
3A5C:  MOVWF  5A
3A5D:  MOVF   4C,W
3A5E:  MOVWF  59
3A5F:  MOVF   46,W
3A60:  MOVWF  5D
3A61:  MOVLB  00
3A62:  CALL   000
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
3A63:  MOVLW  02
3A64:  MOVLB  0C
3A65:  ADDWF  41,W
3A66:  MOVWF  4C
3A67:  MOVLW  00
3A68:  ADDWFC 42,W
3A69:  MOVWF  4D
3A6A:  MOVLW  00
3A6B:  ADDWFC 43,W
3A6C:  MOVWF  4E
3A6D:  MOVLW  00
3A6E:  ADDWFC 44,W
3A6F:  MOVWF  4F
3A70:  MOVF   47,W
3A71:  MOVWF  51
3A72:  MOVF   48,W
3A73:  MOVWF  52
3A74:  CLRF   53
3A75:  CLRF   54
3A76:  CLRF   52
3A77:  CLRF   53
3A78:  CLRF   54
3A79:  MOVLB  08
3A7A:  MOVF   61,W
3A7B:  MOVLB  0C
3A7C:  MOVWF  58
3A7D:  MOVLB  08
3A7E:  MOVF   60,W
3A7F:  MOVLB  0C
3A80:  MOVWF  57
3A81:  MOVLB  08
3A82:  MOVF   5F,W
3A83:  MOVLB  0C
3A84:  MOVWF  56
3A85:  MOVLB  08
3A86:  MOVF   5E,W
3A87:  MOVLB  0C
3A88:  MOVWF  55
3A89:  MOVF   4F,W
3A8A:  MOVWF  5C
3A8B:  MOVF   4E,W
3A8C:  MOVWF  5B
3A8D:  MOVF   4D,W
3A8E:  MOVWF  5A
3A8F:  MOVF   4C,W
3A90:  MOVWF  59
3A91:  MOVF   47,W
3A92:  MOVWF  5D
3A93:  MOVLB  00
3A94:  CALL   000
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
3A95:  MOVLW  03
3A96:  MOVLB  0C
3A97:  ADDWF  41,W
3A98:  MOVWF  4C
3A99:  MOVLW  00
3A9A:  ADDWFC 42,W
3A9B:  MOVWF  4D
3A9C:  MOVLW  00
3A9D:  ADDWFC 43,W
3A9E:  MOVWF  4E
3A9F:  MOVLW  00
3AA0:  ADDWFC 44,W
3AA1:  MOVWF  4F
3AA2:  MOVF   48,W
3AA3:  MOVWF  51
3AA4:  CLRF   52
3AA5:  CLRF   53
3AA6:  CLRF   54
3AA7:  CLRF   52
3AA8:  CLRF   53
3AA9:  CLRF   54
3AAA:  MOVLB  08
3AAB:  MOVF   61,W
3AAC:  MOVLB  0C
3AAD:  MOVWF  58
3AAE:  MOVLB  08
3AAF:  MOVF   60,W
3AB0:  MOVLB  0C
3AB1:  MOVWF  57
3AB2:  MOVLB  08
3AB3:  MOVF   5F,W
3AB4:  MOVLB  0C
3AB5:  MOVWF  56
3AB6:  MOVLB  08
3AB7:  MOVF   5E,W
3AB8:  MOVLB  0C
3AB9:  MOVWF  55
3ABA:  MOVF   4F,W
3ABB:  MOVWF  5C
3ABC:  MOVF   4E,W
3ABD:  MOVWF  5B
3ABE:  MOVF   4D,W
3ABF:  MOVWF  5A
3AC0:  MOVF   4C,W
3AC1:  MOVWF  59
3AC2:  MOVF   48,W
3AC3:  MOVWF  5D
3AC4:  MOVLB  00
3AC5:  CALL   000
....................     write_data_byte(smf, base_addr + 4, loop_count);
3AC6:  MOVLW  04
3AC7:  MOVLB  0C
3AC8:  ADDWF  41,W
3AC9:  MOVWF  4C
3ACA:  MOVLW  00
3ACB:  ADDWFC 42,W
3ACC:  MOVWF  4D
3ACD:  MOVLW  00
3ACE:  ADDWFC 43,W
3ACF:  MOVWF  4E
3AD0:  MOVLW  00
3AD1:  ADDWFC 44,W
3AD2:  MOVWF  4F
3AD3:  MOVLB  08
3AD4:  MOVF   61,W
3AD5:  MOVLB  0C
3AD6:  MOVWF  58
3AD7:  MOVLB  08
3AD8:  MOVF   60,W
3AD9:  MOVLB  0C
3ADA:  MOVWF  57
3ADB:  MOVLB  08
3ADC:  MOVF   5F,W
3ADD:  MOVLB  0C
3ADE:  MOVWF  56
3ADF:  MOVLB  08
3AE0:  MOVF   5E,W
3AE1:  MOVLB  0C
3AE2:  MOVWF  55
3AE3:  MOVF   4F,W
3AE4:  MOVWF  5C
3AE5:  MOVF   4E,W
3AE6:  MOVWF  5B
3AE7:  MOVF   4D,W
3AE8:  MOVWF  5A
3AE9:  MOVF   4C,W
3AEA:  MOVWF  59
3AEB:  MOVF   49,W
3AEC:  MOVWF  5D
3AED:  MOVLB  00
3AEE:  CALL   000
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
3AEF:  MOVLW  1A
3AF0:  MOVLB  03
3AF1:  MOVWF  11
3AF2:  MOVLW  07
3AF3:  MOVWF  12
3AF4:  BCF    03.0
3AF5:  MOVLW  0C
3AF6:  MOVLB  0C
3AF7:  MOVWF  5E
3AF8:  MOVLP  08
3AF9:  MOVLB  00
3AFA:  CALL   122
3AFB:  MOVLP  38
3AFC:  MOVLW  41
3AFD:  MOVWF  04
3AFE:  MOVLB  0C
3AFF:  MOVF   48,W
3B00:  MOVWF  4F
3B01:  MOVF   47,W
3B02:  MOVWF  4E
3B03:  MOVF   46,W
3B04:  MOVWF  4D
3B05:  MOVF   45,W
3B06:  MOVWF  4C
*
3BB6:  MOVLW  0D
3BB7:  MOVLB  0F
3BB8:  MOVWF  43
3BB9:  MOVLP  08
3BBA:  MOVLB  00
3BBB:  CALL   0AF
3BBC:  MOVLP  38
3BBD:  MOVLW  0A
3BBE:  MOVLB  0F
3BBF:  MOVWF  43
3BC0:  MOVLP  08
3BC1:  MOVLB  00
3BC2:  CALL   0AF
3BC3:  MOVLP  38
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
3BC4:  MOVLW  23
3BC5:  MOVLB  03
3BC6:  MOVWF  11
3BC7:  MOVLW  07
3BC8:  MOVWF  12
3BC9:  BCF    03.0
3BCA:  MOVLW  0D
3BCB:  MOVLB  0C
3BCC:  MOVWF  5E
3BCD:  MOVLP  08
3BCE:  MOVLB  00
3BCF:  CALL   122
3BD0:  MOVLP  38
3BD1:  MOVLB  0C
3BD2:  MOVF   49,W
3BD3:  MOVWF  4C
3BD4:  MOVLW  1B
3BD5:  MOVWF  4D
3BD6:  MOVLP  10
3BD7:  MOVLB  00
3BD8:  CALL   71C
3BD9:  MOVLP  38
3BDA:  MOVLW  2A
3BDB:  MOVLB  03
3BDC:  MOVWF  11
3BDD:  MOVLW  07
3BDE:  MOVWF  12
3BDF:  BSF    03.0
3BE0:  MOVLW  04
3BE1:  MOVLB  0C
3BE2:  MOVWF  5E
3BE3:  MOVLP  08
3BE4:  MOVLB  00
3BE5:  CALL   122
3BE6:  MOVLP  38
3BE7:  MOVLP  30
3BE8:  GOTO   7DB (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 9600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
2D6A:  MOVLB  0B
2D6B:  MOVF   22,W
2D6C:  MOVWF  04
2D6D:  MOVF   23,W
2D6E:  MOVWF  05
2D6F:  MOVIW  [FSR0+00],W
2D70:  MOVWF  24
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
2D71:  MOVLW  2D
2D72:  MOVLB  03
2D73:  MOVWF  11
2D74:  MOVLW  07
2D75:  MOVWF  12
2D76:  MOVLP  08
2D77:  MOVLB  00
2D78:  CALL   0D4
2D79:  MOVLP  28
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
2D7A:  MOVLW  50
2D7B:  MOVLB  03
2D7C:  MOVWF  11
2D7D:  MOVLW  07
2D7E:  MOVWF  12
2D7F:  BCF    03.0
2D80:  MOVLW  0C
2D81:  MOVLB  0C
2D82:  MOVWF  5E
2D83:  MOVLP  08
2D84:  MOVLB  00
2D85:  CALL   122
2D86:  MOVLP  28
2D87:  MOVLB  0B
2D88:  MOVF   24,W
2D89:  MOVLB  0E
2D8A:  MOVWF  4E
2D8B:  MOVLW  37
2D8C:  MOVWF  4F
2D8D:  MOVLP  08
2D8E:  MOVLB  00
2D8F:  CALL   479
2D90:  MOVLP  28
2D91:  MOVLW  57
2D92:  MOVLB  03
2D93:  MOVWF  11
2D94:  MOVLW  07
2D95:  MOVWF  12
2D96:  BCF    03.0
2D97:  MOVLW  04
2D98:  MOVLB  0C
2D99:  MOVWF  5E
2D9A:  MOVLP  08
2D9B:  MOVLB  00
2D9C:  CALL   122
2D9D:  MOVLP  28
....................    switch(command_id)
2D9E:  MOVLB  0B
2D9F:  MOVF   24,W
2DA0:  XORLW  00
2DA1:  MOVLB  00
2DA2:  BTFSC  03.2
2DA3:  GOTO   5D5
2DA4:  XORLW  10
2DA5:  BTFSC  03.2
2DA6:  GOTO   5DF
2DA7:  XORLW  11
2DA8:  BTFSC  03.2
2DA9:  GOTO   5E3
2DAA:  XORLW  03
2DAB:  BTFSC  03.2
2DAC:  GOTO   5E4
2DAD:  XORLW  92
2DAE:  BTFSC  03.2
2DAF:  GOTO   5E5
2DB0:  XORLW  01
2DB1:  BTFSC  03.2
2DB2:  GOTO   5EF
2DB3:  XORLW  03
2DB4:  BTFSC  03.2
2DB5:  GOTO   5F9
2DB6:  XORLW  01
2DB7:  BTFSC  03.2
2DB8:  GOTO   603
2DB9:  XORLW  07
2DBA:  BTFSC  03.2
2DBB:  GOTO   60D
2DBC:  XORLW  02
2DBD:  BTFSC  03.2
2DBE:  GOTO   617
2DBF:  XORLW  01
2DC0:  BTFSC  03.2
2DC1:  GOTO   621
2DC2:  XORLW  0D
2DC3:  BTFSC  03.2
2DC4:  GOTO   62B
2DC5:  XORLW  05
2DC6:  BTFSC  03.2
2DC7:  GOTO   635
2DC8:  XORLW  EE
2DC9:  BTFSC  03.2
2DCA:  GOTO   63F
2DCB:  XORLW  03
2DCC:  BTFSC  03.2
2DCD:  GOTO   641
2DCE:  XORLW  01
2DCF:  BTFSC  03.2
2DD0:  GOTO   643
2DD1:  XORLW  03
2DD2:  BTFSC  03.2
2DD3:  GOTO   645
2DD4:  GOTO   647
....................    {
....................       case ID_DUMMY: // example command
....................          mode_dummy(content);
2DD5:  MOVLB  0B
2DD6:  MOVF   23,W
2DD7:  MOVWF  26
2DD8:  MOVF   22,W
2DD9:  MOVWF  25
2DDA:  MOVLP  18
2DDB:  MOVLB  00
2DDC:  GOTO   22A
2DDD:  MOVLP  28
....................          //mode_iv_meas_adc();
....................          break;
2DDE:  GOTO   650
....................       case 0x10:
....................          mode_test_iv();
2DDF:  MOVLP  18
2DE0:  GOTO   359
2DE1:  MOVLP  28
....................          break;
2DE2:  GOTO   650
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
2DE3:  GOTO   650
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
2DE4:  GOTO   650
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
2DE5:  MOVLB  0B
2DE6:  MOVF   23,W
2DE7:  MOVWF  26
2DE8:  MOVF   22,W
2DE9:  MOVWF  25
2DEA:  MOVLP  18
2DEB:  MOVLB  00
2DEC:  GOTO   5B3
2DED:  MOVLP  28
....................          break;
2DEE:  GOTO   650
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
2DEF:  MOVLB  0B
2DF0:  MOVF   23,W
2DF1:  MOVWF  26
2DF2:  MOVF   22,W
2DF3:  MOVWF  25
2DF4:  MOVLP  18
2DF5:  MOVLB  00
2DF6:  GOTO   611
2DF7:  MOVLP  28
....................          break;
2DF8:  GOTO   650
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
2DF9:  MOVLB  0B
2DFA:  MOVF   23,W
2DFB:  MOVWF  26
2DFC:  MOVF   22,W
2DFD:  MOVWF  25
2DFE:  MOVLP  18
2DFF:  MOVLB  00
2E00:  GOTO   6F2
2E01:  MOVLP  28
....................          break;
2E02:  GOTO   650
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
2E03:  MOVLB  0B
2E04:  MOVF   23,W
2E05:  MOVWF  26
2E06:  MOVF   22,W
2E07:  MOVWF  25
2E08:  MOVLP  20
2E09:  MOVLB  00
2E0A:  GOTO   000
2E0B:  MOVLP  28
....................          break;
2E0C:  GOTO   650
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
2E0D:  MOVLB  0B
2E0E:  MOVF   23,W
2E0F:  MOVWF  26
2E10:  MOVF   22,W
2E11:  MOVWF  25
2E12:  MOVLP  20
2E13:  MOVLB  00
2E14:  GOTO   214
2E15:  MOVLP  28
....................          break;
2E16:  GOTO   650
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
2E17:  MOVLB  0B
2E18:  MOVF   23,W
2E19:  MOVWF  26
2E1A:  MOVF   22,W
2E1B:  MOVWF  25
2E1C:  MOVLP  20
2E1D:  MOVLB  00
2E1E:  GOTO   393
2E1F:  MOVLP  28
....................          break;
2E20:  GOTO   650
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
2E21:  MOVLB  0B
2E22:  MOVF   23,W
2E23:  MOVWF  26
2E24:  MOVF   22,W
2E25:  MOVWF  25
2E26:  MOVLP  20
2E27:  MOVLB  00
2E28:  GOTO   60C
2E29:  MOVLP  28
....................          break;
2E2A:  GOTO   650
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
2E2B:  MOVLB  0B
2E2C:  MOVF   23,W
2E2D:  MOVWF  26
2E2E:  MOVF   22,W
2E2F:  MOVWF  25
2E30:  MOVLP  20
2E31:  MOVLB  00
2E32:  GOTO   6BE
2E33:  MOVLP  28
....................          break;
2E34:  GOTO   650
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
2E35:  MOVLB  0B
2E36:  MOVF   23,W
2E37:  MOVWF  26
2E38:  MOVF   22,W
2E39:  MOVWF  25
2E3A:  MOVLP  20
2E3B:  MOVLB  00
2E3C:  GOTO   75C
2E3D:  MOVLP  28
....................          break;
2E3E:  GOTO   650
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
2E3F:  CALL   42B
....................          break;
2E40:  GOTO   650
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
2E41:  CALL   42B
....................          break;
2E42:  GOTO   650
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
2E43:  CALL   42B
....................          break;
2E44:  GOTO   650
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
2E45:  CALL   42B
....................          break;
2E46:  GOTO   650
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
2E47:  MOVLW  5A
2E48:  MOVLB  03
2E49:  MOVWF  11
2E4A:  MOVLW  07
2E4B:  MOVWF  12
2E4C:  MOVLP  08
2E4D:  MOVLB  00
2E4E:  CALL   0D4
2E4F:  MOVLP  28
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
2E50:  MOVLW  66
2E51:  MOVLB  03
2E52:  MOVWF  11
2E53:  MOVLW  07
2E54:  MOVWF  12
2E55:  MOVLP  08
2E56:  MOVLB  00
2E57:  CALL   0D4
2E58:  MOVLP  28
2E59:  MOVLP  10
2E5A:  GOTO   7F0 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
3BE9:  MOVLW  89
3BEA:  MOVLB  03
3BEB:  MOVWF  11
3BEC:  MOVLW  07
3BED:  MOVWF  12
3BEE:  MOVLP  08
3BEF:  MOVLB  00
3BF0:  CALL   0D4
3BF1:  MOVLP  38
....................    
....................    switch(command->frame_id)
3BF2:  MOVLB  0A
3BF3:  MOVF   6B,W
3BF4:  MOVWF  04
3BF5:  MOVF   6C,W
3BF6:  MOVWF  05
3BF7:  ADDFSR 00,FSR0
3BF8:  MOVF   00,W
3BF9:  XORLW  00
3BFA:  MOVLB  00
3BFB:  BTFSC  03.2
3BFC:  GOTO   404
3BFD:  XORLW  01
3BFE:  BTFSC  03.2
3BFF:  GOTO   40E
3C00:  XORLW  03
3C01:  BTFSC  03.2
3C02:  GOTO   41E
3C03:  GOTO   427
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
3C04:  MOVLB  0A
3C05:  MOVF   6C,W
3C06:  MOVWF  6E
3C07:  MOVF   6B,W
3C08:  MOVWF  6D
3C09:  MOVLP  10
3C0A:  MOVLB  00
3C0B:  GOTO   7C9
3C0C:  MOVLP  38
....................          break;
3C0D:  GOTO   427
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
3C0E:  MOVLB  0A
3C0F:  MOVF   6C,W
3C10:  MOVWF  6E
3C11:  MOVF   6B,W
3C12:  MOVWF  6D
3C13:  MOVLP  28
3C14:  MOVLB  00
3C15:  GOTO   65B
3C16:  MOVLP  38
3C17:  MOVF   78,F
3C18:  BTFSC  03.2
3C19:  GOTO   41D
....................             return TRUE; // if status is finished, return TRUE
3C1A:  MOVLW  01
3C1B:  MOVWF  78
3C1C:  GOTO   429
....................          }        
....................          break;
3C1D:  GOTO   427
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
3C1E:  MOVLB  0A
3C1F:  MOVF   6C,W
3C20:  MOVWF  6E
3C21:  MOVF   6B,W
3C22:  MOVWF  6D
3C23:  MOVLP  28
3C24:  MOVLB  00
3C25:  GOTO   7C2
3C26:  MOVLP  38
....................          break;
....................    }
....................    return FALSE;
3C27:  MOVLW  00
3C28:  MOVWF  78
3C29:  MOVLP  38
3C2A:  GOTO   570 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
17C9:  MOVLW  95
17CA:  MOVLB  03
17CB:  MOVWF  11
17CC:  MOVLW  07
17CD:  MOVWF  12
17CE:  MOVLP  08
17CF:  MOVLB  00
17D0:  CALL   0D4
17D1:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
17D2:  MOVLW  A0
17D3:  MOVLB  03
17D4:  MOVWF  11
17D5:  MOVLW  07
17D6:  MOVWF  12
17D7:  MOVLP  08
17D8:  MOVLB  00
17D9:  CALL   0D4
17DA:  MOVLP  10
....................    transmit_ack();
17DB:  MOVLP  08
17DC:  CALL   7E7
17DD:  MOVLP  10
.................... 
....................    status[0] = EXECUTING_MISSION;
17DE:  MOVLW  02
17DF:  MOVWF  29
....................    execute_mission(command->content);
17E0:  MOVLW  03
17E1:  MOVLB  0A
17E2:  ADDWF  6D,W
17E3:  MOVLB  0B
17E4:  MOVWF  20
17E5:  MOVLW  00
17E6:  MOVLB  0A
17E7:  ADDWFC 6E,W
17E8:  MOVLB  0B
17E9:  MOVWF  21
17EA:  MOVWF  23
17EB:  MOVF   20,W
17EC:  MOVWF  22
17ED:  MOVLP  28
17EE:  MOVLB  00
17EF:  GOTO   56A
17F0:  MOVLP  10
....................    if (is_empty_smf_data())
17F1:  MOVLP  08
17F2:  CALL   7F2
17F3:  MOVLP  10
17F4:  MOVF   78,F
17F5:  BTFSC  03.2
17F6:  GOTO   7FA
....................       status[0] = FINISHED;
17F7:  MOVLW  06
17F8:  MOVWF  29
17F9:  GOTO   7FC
....................    else
....................       status[0] = SMF_USE_REQ;
17FA:  MOVLW  04
17FB:  MOVWF  29
17FC:  MOVLP  38
17FD:  GOTO   427 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
2E5B:  MOVLW  AD
2E5C:  MOVLB  03
2E5D:  MOVWF  11
2E5E:  MOVLW  07
2E5F:  MOVWF  12
2E60:  MOVLP  08
2E61:  MOVLB  00
2E62:  CALL   0D4
2E63:  MOVLP  28
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
2E64:  MOVLW  B7
2E65:  MOVLB  03
2E66:  MOVWF  11
2E67:  MOVLW  07
2E68:  MOVWF  12
2E69:  MOVLP  08
2E6A:  MOVLB  00
2E6B:  CALL   0D4
2E6C:  MOVLP  28
....................    transmit_status();
2E6D:  MOVLP  18
2E6E:  GOTO   7D1
2E6F:  MOVLP  28
....................    if (status[0] == FINISHED)
2E70:  MOVF   29,W
2E71:  SUBLW  06
2E72:  BTFSS  03.2
2E73:  GOTO   681
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
2E74:  MOVLW  C6
2E75:  MOVLB  03
2E76:  MOVWF  11
2E77:  MOVLW  07
2E78:  MOVWF  12
2E79:  MOVLP  08
2E7A:  MOVLB  00
2E7B:  CALL   0D4
2E7C:  MOVLP  28
....................       return TRUE;
2E7D:  MOVLW  01
2E7E:  MOVWF  78
2E7F:  GOTO   683
....................    }
2E80:  GOTO   683
....................    else{
....................       return FALSE;
2E81:  MOVLW  00
2E82:  MOVWF  78
....................    }
2E83:  MOVLP  38
2E84:  GOTO   416 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
2FC2:  MOVLW  D4
2FC3:  MOVLB  03
2FC4:  MOVWF  11
2FC5:  MOVLW  07
2FC6:  MOVWF  12
2FC7:  MOVLP  08
2FC8:  MOVLB  00
2FC9:  CALL   0D4
2FCA:  MOVLP  28
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
2FCB:  MOVLW  E1
2FCC:  MOVLB  03
2FCD:  MOVWF  11
2FCE:  MOVLW  07
2FCF:  MOVWF  12
2FD0:  MOVLP  08
2FD1:  MOVLB  00
2FD2:  CALL   0D4
2FD3:  MOVLP  28
....................     transmit_ack();
2FD4:  MOVLP  08
2FD5:  CALL   7E7
2FD6:  MOVLP  28
....................     
....................     if (command->content[0] == ALLOW) {
2FD7:  MOVLB  0A
2FD8:  MOVF   6D,W
2FD9:  MOVWF  04
2FDA:  MOVF   6E,W
2FDB:  MOVWF  05
2FDC:  ADDFSR 03,FSR0
2FDD:  MOVF   00,F
2FDE:  BTFSS  03.2
2FDF:  GOTO   7F2
....................         fprintf(PC, "\t\t-> allowd\r\n");
2FE0:  MOVLW  EE
2FE1:  MOVLB  03
2FE2:  MOVWF  11
2FE3:  MOVLW  07
2FE4:  MOVWF  12
2FE5:  MOVLP  08
2FE6:  MOVLB  00
2FE7:  CALL   0D4
2FE8:  MOVLP  28
....................         status[0] = COPYING;
2FE9:  MOVLW  05
2FEA:  MOVWF  29
....................         copy_data();
2FEB:  MOVLP  30
2FEC:  GOTO   693
2FED:  MOVLP  28
....................         status[0] = FINISHED;
2FEE:  MOVLW  06
2FEF:  MOVWF  29
....................     } else {
2FF0:  GOTO   7FB
2FF1:  MOVLB  0A
....................         fprintf(PC, "\t\t-> denyed\r\n");
2FF2:  MOVLW  F5
2FF3:  MOVLB  03
2FF4:  MOVWF  11
2FF5:  MOVLW  07
2FF6:  MOVWF  12
2FF7:  MOVLP  08
2FF8:  MOVLB  00
2FF9:  CALL   0D4
2FFA:  MOVLP  28
....................     }
2FFB:  MOVLP  38
2FFC:  GOTO   427 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
3C2B:  MOVLB  03
3C2C:  BSF    1F.3
3C2D:  MOVLW  A0
3C2E:  MOVWF  1B
3C2F:  MOVLW  01
3C30:  MOVWF  1C
3C31:  MOVLW  A6
3C32:  MOVWF  1E
3C33:  MOVLW  90
3C34:  MOVWF  1D
3C35:  MOVLB  01
3C36:  BCF    0D.4
3C37:  MOVLB  02
3C38:  BSF    0D.4
3C39:  MOVLB  04
3C3A:  BCF    15.5
3C3B:  MOVLW  40
3C3C:  MOVWF  14
3C3D:  MOVLW  09
3C3E:  MOVWF  12
3C3F:  MOVLW  2A
3C40:  MOVWF  15
3C41:  MOVLB  02
3C42:  BCF    1D.5
3C43:  BCF    1D.3
3C44:  BCF    1D.4
3C45:  MOVLB  01
3C46:  BCF    0E.5
3C47:  BSF    0E.4
3C48:  BCF    0E.3
3C49:  MOVLB  00
3C4A:  BCF    28.0
3C4B:  CLRF   30
3C4C:  CLRF   2F
3C4D:  CLRF   2E
3C4E:  CLRF   2D
3C4F:  CLRF   34
3C50:  CLRF   33
3C51:  CLRF   32
3C52:  CLRF   31
3C53:  CLRF   36
3C54:  CLRF   35
3C55:  CLRF   38
3C56:  CLRF   37
3C57:  CLRF   59
3C58:  MOVLB  08
3C59:  CLRF   35
3C5A:  CLRF   34
3C5B:  CLRF   33
3C5C:  CLRF   32
3C5D:  CLRF   37
3C5E:  CLRF   36
3C5F:  CLRF   39
3C60:  CLRF   38
3C61:  CLRF   3B
3C62:  CLRF   3A
3C63:  CLRF   3D
3C64:  CLRF   3C
3C65:  CLRF   70
3C66:  MOVLW  1E
3C67:  MOVLB  0A
3C68:  MOVWF  5D
3C69:  MOVLB  03
3C6A:  CLRF   0C
3C6B:  CLRF   0D
3C6C:  CLRF   0E
3C6D:  CLRF   0F
3C6E:  CLRF   10
3C6F:  MOVLB  02
3C70:  CLRF   12
3C71:  CLRF   11
3C72:  GOTO   4A9
3C73:  DATA 04,34
3C74:  DATA 20,34
3C75:  DATA 09,34
3C76:  DATA 03,34
3C77:  DATA 00,34
3C78:  DATA 00,34
3C79:  DATA 00,34
3C7A:  DATA 20,34
3C7B:  DATA 60,34
3C7C:  DATA 19,34
3C7D:  DATA 00,34
3C7E:  DATA FF,34
3C7F:  DATA 60,34
3C80:  DATA 3A,34
3C81:  DATA 00,34
3C82:  DATA FF,34
3C83:  DATA C0,34
3C84:  DATA 00,34
3C85:  DATA 5A,34
3C86:  DATA C0,34
3C87:  DATA 00,34
3C88:  DATA 04,34
3C89:  DATA 22,34
3C8A:  DATA 9E,34
3C8B:  DATA 00,34
3C8C:  DATA 00,34
3C8D:  DATA 00,34
3C8E:  DATA 00,34
3C8F:  DATA 08,34
3C90:  DATA 22,34
3C91:  DATA BA,34
3C92:  DATA 00,34
3C93:  DATA 00,34
3C94:  DATA 7B,34
3C95:  DATA 00,34
3C96:  DATA 01,34
3C97:  DATA 01,34
3C98:  DATA 79,34
3C99:  DATA 00,34
3C9A:  DATA 08,34
3C9B:  DATA 22,34
3C9C:  DATA C3,34
3C9D:  DATA 00,34
3C9E:  DATA 00,34
3C9F:  DATA 00,34
3CA0:  DATA 09,34
3CA1:  DATA 01,34
3CA2:  DATA 00,34
3CA3:  DATA 02,34
3CA4:  DATA 01,34
3CA5:  DATA 92,34
3CA6:  DATA C0,34
3CA7:  DATA 00,34
3CA8:  DATA 00,34
3CA9:  MOVLW  3C
3CAA:  MOVWF  05
3CAB:  MOVLW  73
3CAC:  MOVWF  04
3CAD:  BSF    05.7
3CAE:  MOVIW  [FSR0++],W
3CAF:  MOVWF  77
3CB0:  XORLW  00
3CB1:  BTFSC  03.2
3CB2:  GOTO   4C3
3CB3:  MOVIW  [FSR0++],W
3CB4:  MOVWF  78
3CB5:  BTFSC  78.7
3CB6:  GOTO   4BB
3CB7:  ANDLW  3F
3CB8:  MOVWF  07
3CB9:  MOVIW  [FSR0++],W
3CBA:  MOVWF  06
3CBB:  BTFSC  78.6
3CBC:  MOVIW  [FSR0++],W
3CBD:  BTFSS  78.6
3CBE:  MOVIW  [FSR0++],W
3CBF:  MOVWI  W,[FSR1++]
3CC0:  DECFSZ 77,F
3CC1:  GOTO   4BD
3CC2:  GOTO   4AE
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
3CC3:  MOVLW  00
3CC4:  MOVLB  03
3CC5:  MOVWF  11
3CC6:  MOVLW  08
3CC7:  MOVWF  12
3CC8:  MOVLP  08
3CC9:  MOVLB  00
3CCA:  CALL   0D4
3CCB:  MOVLP  38
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
3CCC:  MOVLW  23
3CCD:  MOVLB  03
3CCE:  MOVWF  11
3CCF:  MOVLW  08
3CD0:  MOVWF  12
3CD1:  MOVLP  08
3CD2:  MOVLB  00
3CD3:  CALL   0D4
3CD4:  MOVLP  38
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
3CD5:  MOVLW  3A
3CD6:  MOVLB  03
3CD7:  MOVWF  11
3CD8:  MOVLW  08
3CD9:  MOVWF  12
3CDA:  BCF    03.0
3CDB:  MOVLW  10
3CDC:  MOVLB  0C
3CDD:  MOVWF  5E
3CDE:  MOVLP  08
3CDF:  MOVLB  00
3CE0:  CALL   122
3CE1:  MOVLP  38
3CE2:  MOVLW  4D
3CE3:  MOVLB  03
3CE4:  MOVWF  11
3CE5:  MOVLW  08
3CE6:  MOVWF  12
3CE7:  MOVLP  08
3CE8:  MOVLB  00
3CE9:  CALL   0D4
3CEA:  MOVLP  38
3CEB:  MOVLW  20
3CEC:  MOVLB  0F
3CED:  MOVWF  43
3CEE:  MOVLP  08
3CEF:  MOVLB  00
3CF0:  CALL   0AF
3CF1:  MOVLP  38
3CF2:  MOVLW  52
3CF3:  MOVLB  03
3CF4:  MOVWF  11
3CF5:  MOVLW  08
3CF6:  MOVWF  12
3CF7:  MOVLP  08
3CF8:  MOVLB  00
3CF9:  CALL   0D4
3CFA:  MOVLP  38
3CFB:  MOVLW  44
3CFC:  MOVLB  03
3CFD:  MOVWF  11
3CFE:  MOVLW  08
3CFF:  MOVWF  12
3D00:  BSF    03.0
3D01:  MOVLW  0F
3D02:  MOVLB  0C
3D03:  MOVWF  5E
3D04:  MOVLP  08
3D05:  MOVLB  00
3D06:  CALL   122
3D07:  MOVLP  38
....................    
....................    io_init();
3D08:  MOVLP  08
3D09:  GOTO   17C
3D0A:  MOVLP  38
....................    adc_init();
3D0B:  MOVLP  08
3D0C:  GOTO   194
3D0D:  MOVLP  38
....................    setup_uart_to_boss();
3D0E:  MOVLP  08
3D0F:  GOTO   1BC
3D10:  MOVLP  38
....................    setup_timer();
3D11:  MOVLP  08
3D12:  GOTO   1D0
3D13:  MOVLP  38
....................    ad7490_init();
3D14:  MOVLP  08
3D15:  GOTO   1EE
3D16:  MOVLP  38
....................    misf_init();
3D17:  MOVLP  08
3D18:  CALL   4A0
3D19:  MOVLP  38
....................    piclog_make(PICLOG_STARTUP,0x00);
3D1A:  MOVF   70,W
3D1B:  MOVLB  0E
3D1C:  MOVWF  3C
3D1D:  CLRF   3D
3D1E:  MOVLP  10
3D1F:  MOVLB  00
3D20:  CALL   3A7
3D21:  MOVLP  38
.................... 
....................    int1 is_finished = FALSE;
3D22:  MOVLB  0A
3D23:  BCF    5E.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
3D24:  MOVLW  57
3D25:  MOVLB  03
3D26:  MOVWF  11
3D27:  MOVLW  08
3D28:  MOVWF  12
3D29:  MOVLP  08
3D2A:  MOVLB  00
3D2B:  CALL   0D4
3D2C:  MOVLP  38
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
3D2D:  MOVLW  6A
3D2E:  MOVLB  03
3D2F:  MOVWF  11
3D30:  MOVLW  08
3D31:  MOVWF  12
3D32:  MOVLP  08
3D33:  MOVLB  00
3D34:  CALL   0D4
3D35:  MOVLP  38
....................    
....................    //Start loop
....................    while(!is_finished)
3D36:  MOVLB  0A
3D37:  BTFSC  5E.0
3D38:  GOTO   595
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
3D39:  MOVLB  00
3D3A:  MOVF   59,F
3D3B:  BTFSC  03.2
3D3C:  GOTO   57D
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
3D3D:  MOVLW  20
3D3E:  MOVLB  0B
3D3F:  MOVWF  22
3D40:  MOVLW  19
3D41:  MOVWF  21
3D42:  MOVLB  00
3D43:  MOVF   59,W
3D44:  MOVLB  0B
3D45:  MOVWF  23
3D46:  MOVLP  18
3D47:  MOVLB  00
3D48:  GOTO   000
3D49:  MOVLP  38
3D4A:  MOVF   79,W
3D4B:  MOVWF  7A
3D4C:  MOVF   78,W
3D4D:  MOVWF  04
3D4E:  MOVF   7A,W
3D4F:  MOVWF  05
3D50:  MOVLW  0C
3D51:  MOVWF  78
3D52:  MOVLW  23
3D53:  MOVWF  07
3D54:  MOVLW  5F
3D55:  MOVWF  06
3D56:  MOVIW  [FSR0++],W
3D57:  MOVWI  W,[FSR1++]
3D58:  DECFSZ 78,F
3D59:  GOTO   556
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
3D5A:  MOVLW  20
3D5B:  MOVLB  0A
3D5C:  MOVWF  6C
3D5D:  MOVLW  19
3D5E:  MOVWF  6B
3D5F:  MOVLW  20
3D60:  MOVWF  6E
3D61:  MOVLW  39
3D62:  MOVWF  6D
3D63:  MOVLP  10
3D64:  MOVLB  00
3D65:  GOTO   653
3D66:  MOVLP  38
....................          
....................          if(recieve_cmd.is_exist)
3D67:  MOVLB  0A
3D68:  BTFSS  61.0
3D69:  GOTO   574
....................             is_finished = execute_command(&recieve_cmd); 
3D6A:  MOVLW  23
3D6B:  MOVWF  6C
3D6C:  MOVLW  5F
3D6D:  MOVWF  6B
3D6E:  MOVLB  00
3D6F:  GOTO   3E9
3D70:  MOVLB  0A
3D71:  BCF    5E.0
3D72:  BTFSC  78.0
3D73:  BSF    5E.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
3D74:  MOVLW  79
3D75:  MOVLB  03
3D76:  MOVWF  11
3D77:  MOVLW  08
3D78:  MOVWF  12
3D79:  MOVLP  08
3D7A:  MOVLB  00
3D7B:  CALL   0D4
3D7C:  MOVLP  38
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
3D7D:  MOVLB  0A
3D7E:  BTFSC  5E.0
....................          break;
3D7F:  GOTO   595
....................          
....................       delay_ms(400);
3D80:  MOVLW  02
3D81:  MOVWF  6B
3D82:  MOVLW  C8
3D83:  MOVLB  0F
3D84:  MOVWF  57
3D85:  MOVLP  08
3D86:  MOVLB  00
3D87:  CALL   7B6
3D88:  MOVLP  38
3D89:  MOVLB  0A
3D8A:  DECFSZ 6B,F
3D8B:  GOTO   582
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
3D8C:  MOVLW  2E
3D8D:  MOVLB  0F
3D8E:  MOVWF  43
3D8F:  MOVLP  08
3D90:  MOVLB  00
3D91:  CALL   0AF
3D92:  MOVLP  38
3D93:  GOTO   536
3D94:  MOVLB  0A
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
3D95:  MOVLW  89
3D96:  MOVLB  03
3D97:  MOVWF  11
3D98:  MOVLW  08
3D99:  MOVWF  12
3D9A:  MOVLP  08
3D9B:  MOVLB  00
3D9C:  CALL   0D4
3D9D:  MOVLP  38
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3D9E:  MOVLW  2E
3D9F:  MOVLB  0F
3DA0:  MOVWF  43
3DA1:  MOVLP  08
3DA2:  MOVLB  00
3DA3:  CALL   0AF
3DA4:  MOVLP  38
....................       delay_ms(1000);
3DA5:  MOVLW  04
3DA6:  MOVLB  0A
3DA7:  MOVWF  6B
3DA8:  MOVLW  FA
3DA9:  MOVLB  0F
3DAA:  MOVWF  57
3DAB:  MOVLP  08
3DAC:  MOVLB  00
3DAD:  CALL   7B6
3DAE:  MOVLP  38
3DAF:  MOVLB  0A
3DB0:  DECFSZ 6B,F
3DB1:  GOTO   5A8
3DB2:  MOVLB  00
3DB3:  GOTO   59E
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
3DB4:  MOVLW  A9
3DB5:  MOVLB  03
3DB6:  MOVWF  11
3DB7:  MOVLW  08
3DB8:  MOVWF  12
3DB9:  MOVLP  08
3DBA:  MOVLB  00
3DBB:  CALL   0D4
3DBC:  MOVLP  38
....................    
.................... }
.................... 
3DBD:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
