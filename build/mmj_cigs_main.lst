CCS PCM C Compiler, Version 5.104, 57077               15-6-25 18:32

               Filename:   build\mmj_cigs_main.lst

               ROM used:   12685 words (77%)
                           Largest free fragment is 2048
               RAM used:   1264 (62%) at main() level
                           1493 (73%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  30
0001:  GOTO   000
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   043
0023:  CLRF   05
0024:  MOVLW  91
0025:  MOVWF  04
0026:  BTFSS  00.5
0027:  GOTO   02A
0028:  BTFSC  11.5
0029:  GOTO   045
002A:  MOVF   20,W
002B:  MOVWF  77
002C:  MOVF   21,W
002D:  MOVWF  78
002E:  MOVF   22,W
002F:  MOVWF  79
0030:  MOVF   23,W
0031:  MOVWF  7A
0032:  MOVF   24,W
0033:  MOVLB  03
0034:  MOVWF  11
0035:  MOVLB  00
0036:  MOVF   25,W
0037:  MOVLB  03
0038:  MOVWF  12
0039:  MOVLB  00
003A:  MOVF   26,W
003B:  MOVLB  03
003C:  MOVWF  13
003D:  MOVLB  00
003E:  MOVF   27,W
003F:  MOVLB  03
0040:  MOVWF  14
0041:  RETFIE
0042:  MOVLB  00
0043:  MOVLP  00
0044:  GOTO   047
0045:  MOVLP  00
0046:  GOTO   085
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
009F:  DATA D5,20
00A0:  DATA 52,2A
00A1:  DATA A0,24
00A2:  DATA EE,34
00A3:  DATA F4,34
00A4:  DATA 61,36
00A5:  DATA 69,3D
00A6:  DATA E5,06
00A7:  DATA 0A,00
00A8:  DATA 89,21
00A9:  DATA EF,36
00AA:  DATA 70,36
00AB:  DATA 65,3A
00AC:  DATA E5,06
00AD:  DATA 0A,00
00AE:  DATA C9,27
00AF:  DATA A0,24
00B0:  DATA EE,34
00B1:  DATA F4,34
00B2:  DATA 61,36
00B3:  DATA 69,3D
00B4:  DATA E5,06
00B5:  DATA 0A,00
00B6:  DATA 89,21
00B7:  DATA EF,36
00B8:  DATA 70,36
00B9:  DATA 65,3A
00BA:  DATA E5,06
00BB:  DATA 0A,00
00BC:  DATA 41,22
00BD:  DATA 43,10
00BE:  DATA 49,37
00BF:  DATA 69,3A
00C0:  DATA E9,30
00C1:  DATA EC,34
00C2:  DATA FA,32
00C3:  DATA 0D,05
00C4:  DATA 00,01
00C5:  DATA 89,21
00C6:  DATA EF,36
00C7:  DATA 70,36
00C8:  DATA 65,3A
00C9:  DATA E5,06
00CA:  DATA 0A,00
00CB:  DATA 53,3A
00CC:  DATA 61,39
00CD:  DATA 74,10
00CE:  DATA D3,2B
00CF:  DATA C5,22
00D0:  DATA D0,06
00D1:  DATA 0A,00
00D2:  DATA 89,29
00D3:  DATA F7,32
00D4:  DATA 65,38
00D5:  DATA A0,39
00D6:  DATA F4,32
00D7:  DATA 70,10
00D8:  DATA 3A,10
00D9:  DATA A5,3A
00DA:  DATA 0D,05
00DB:  DATA 00,00
00DC:  DATA 45,27
00DD:  DATA 44,10
00DE:  DATA D3,2B
00DF:  DATA C5,22
00E0:  DATA D0,06
00E1:  DATA 0A,00
00E2:  DATA CC,37
00E3:  DATA E7,33
00E4:  DATA 65,32
00E5:  DATA A0,21
00E6:  DATA C9,23
00E7:  DATA 53,10
00E8:  DATA E4,30
00E9:  DATA F4,30
00EA:  DATA 0D,05
00EB:  DATA 80,00
00EC:  DATA D3,26
00ED:  DATA 46,10
00EE:  DATA E4,30
00EF:  DATA F4,30
00F0:  DATA 20,36
00F1:  DATA E9,39
00F2:  DATA 74,10
00F3:  DATA E9,39
00F4:  DATA 20,33
00F5:  DATA 75,36
00F6:  DATA EC,10
00F7:  DATA A1,10
00F8:  DATA 0D,05
00F9:  DATA 00,00
00FA:  DATA D3,26
00FB:  DATA 46,10
00FC:  DATA E4,30
00FD:  DATA F4,30
00FE:  DATA 20,36
00FF:  DATA E9,39
0100:  DATA 74,10
0101:  DATA E9,39
0102:  DATA A0,32
0103:  DATA 6D,38
0104:  DATA F4,3C
0105:  DATA 0D,05
0106:  DATA 00,00
0107:  DATA 66,36
0108:  DATA E1,39
0109:  DATA 68,10
010A:  DATA E2,3A
010B:  DATA F3,3C
010C:  DATA 8A,06
010D:  DATA 00,00
010E:  DATA D2,32
010F:  DATA 61,32
0110:  DATA A0,24
0111:  DATA 44,1D
0112:  DATA 00,01
0113:  DATA 66,36
0114:  DATA E1,39
0115:  DATA 68,10
0116:  DATA E3,37
0117:  DATA 6E,37
0118:  DATA E5,31
0119:  DATA 74,10
011A:  DATA CF,25
011B:  DATA 0D,05
011C:  DATA 00,01
011D:  DATA 66,36
011E:  DATA E1,39
011F:  DATA 68,10
0120:  DATA EE,37
0121:  DATA 74,10
0122:  DATA E3,37
0123:  DATA 6E,37
0124:  DATA E5,31
0125:  DATA F4,06
0126:  DATA 0A,00
0127:  DATA 65,39
0128:  DATA F2,37
0129:  DATA 72,1D
012A:  DATA 66,36
012B:  DATA E1,39
012C:  DATA 68,10
012D:  DATA ED,37
012E:  DATA E4,32
012F:  DATA 6C,10
0130:  DATA E9,39
0131:  DATA A0,34
0132:  DATA 6E,3B
0133:  DATA 61,36
0134:  DATA 69,32
0135:  DATA 0D,05
0136:  DATA 00,01
0137:  DATA 66,36
0138:  DATA E1,39
0139:  DATA 68,10
013A:  DATA F4,34
013B:  DATA ED,32
013C:  DATA EF,3A
013D:  DATA F4,06
013E:  DATA 0A,00
013F:  DATA 66,36
0140:  DATA E1,39
0141:  DATA 68,10
0142:  DATA F3,32
0143:  DATA 63,3A
0144:  DATA 6F,39
0145:  DATA A0,32
0146:  DATA F2,30
0147:  DATA F3,32
0148:  DATA A0,31
0149:  DATA EF,36
014A:  DATA 70,36
014B:  DATA 65,3A
014C:  DATA E5,06
014D:  DATA 0A,00
014E:  DATA 65,39
014F:  DATA F2,37
0150:  DATA 72,1D
0151:  DATA 66,36
0152:  DATA E1,39
0153:  DATA 68,10
0154:  DATA ED,37
0155:  DATA E4,32
0156:  DATA 6C,10
0157:  DATA E9,39
0158:  DATA A0,34
0159:  DATA 6E,3B
015A:  DATA 61,36
015B:  DATA 69,32
015C:  DATA 0D,05
015D:  DATA 00,01
015E:  DATA 66,36
015F:  DATA E1,39
0160:  DATA 68,10
0161:  DATA F4,34
0162:  DATA ED,32
0163:  DATA EF,3A
0164:  DATA F4,06
0165:  DATA 0A,00
0166:  DATA 66,36
0167:  DATA E1,39
0168:  DATA 68,10
0169:  DATA 33,19
016A:  DATA 6B,21
016B:  DATA 79,3A
016C:  DATA 65,10
016D:  DATA F3,3A
016E:  DATA E2,39
016F:  DATA E5,31
0170:  DATA F4,37
0171:  DATA 72,10
0172:  DATA 65,39
0173:  DATA E1,39
0174:  DATA 65,10
0175:  DATA E3,37
0176:  DATA 6D,38
0177:  DATA EC,32
0178:  DATA F4,32
0179:  DATA 0D,05
017A:  DATA 00,00
017B:  DATA 65,39
017C:  DATA F2,37
017D:  DATA 72,1D
017E:  DATA 66,36
017F:  DATA E1,39
0180:  DATA 68,10
0181:  DATA ED,37
0182:  DATA E4,32
0183:  DATA 6C,10
0184:  DATA E9,39
0185:  DATA A0,34
0186:  DATA 6E,3B
0187:  DATA 61,36
0188:  DATA 69,32
0189:  DATA 0D,05
018A:  DATA 00,01
018B:  DATA 66,36
018C:  DATA E1,39
018D:  DATA 68,10
018E:  DATA F4,34
018F:  DATA ED,32
0190:  DATA EF,3A
0191:  DATA F4,06
0192:  DATA 0A,00
0193:  DATA 66,36
0194:  DATA E1,39
0195:  DATA 68,10
0196:  DATA B4,35
0197:  DATA C2,3C
0198:  DATA F4,32
0199:  DATA A0,39
019A:  DATA 75,31
019B:  DATA F3,32
019C:  DATA 63,3A
019D:  DATA 6F,39
019E:  DATA A0,32
019F:  DATA F2,30
01A0:  DATA F3,32
01A1:  DATA A0,31
01A2:  DATA EF,36
01A3:  DATA 70,36
01A4:  DATA 65,3A
01A5:  DATA E5,06
01A6:  DATA 0A,00
01A7:  DATA 66,36
01A8:  DATA E1,39
01A9:  DATA 68,10
01AA:  DATA F4,34
01AB:  DATA ED,32
01AC:  DATA EF,3A
01AD:  DATA F4,06
01AE:  DATA 0A,00
01AF:  DATA 66,36
01B0:  DATA E1,39
01B1:  DATA 68,10
01B2:  DATA 77,39
01B3:  DATA 69,3A
01B4:  DATA 65,10
01B5:  DATA E3,37
01B6:  DATA 6D,38
01B7:  DATA EC,32
01B8:  DATA F4,32
01B9:  DATA 0D,05
01BA:  DATA 00,00
01BB:  DATA 66,36
01BC:  DATA E1,39
01BD:  DATA 68,10
01BE:  DATA F4,34
01BF:  DATA ED,32
01C0:  DATA EF,3A
01C1:  DATA F4,06
01C2:  DATA 0A,00
01C3:  DATA 66,36
01C4:  DATA E1,39
01C5:  DATA 68,10
01C6:  DATA 77,39
01C7:  DATA 69,3A
01C8:  DATA 65,10
01C9:  DATA E3,37
01CA:  DATA 6D,38
01CB:  DATA EC,32
01CC:  DATA F4,32
01CD:  DATA 0D,05
01CE:  DATA 00,00
01CF:  DATA D2,32
01D0:  DATA 61,32
01D1:  DATA A0,24
01D2:  DATA 44,1D
01D3:  DATA 00,01
01D4:  DATA 66,36
01D5:  DATA E1,39
01D6:  DATA 68,10
01D7:  DATA E3,37
01D8:  DATA 6E,37
01D9:  DATA E5,31
01DA:  DATA 74,10
01DB:  DATA CF,25
01DC:  DATA 0D,05
01DD:  DATA 00,01
01DE:  DATA 66,36
01DF:  DATA E1,39
01E0:  DATA 68,10
01E1:  DATA EE,37
01E2:  DATA 74,10
01E3:  DATA E3,37
01E4:  DATA 6E,37
01E5:  DATA E5,31
01E6:  DATA F4,06
01E7:  DATA 0A,00
01E8:  DATA 0D,05
01E9:  DATA 53,3A
01EA:  DATA 61,39
01EB:  DATA 74,10
01EC:  DATA ED,30
01ED:  DATA EB,32
01EE:  DATA 5F,39
01EF:  DATA E5,31
01F0:  DATA E5,34
01F1:  DATA F6,32
01F2:  DATA DF,31
01F3:  DATA EF,36
01F4:  DATA ED,30
01F5:  DATA 6E,32
01F6:  DATA 0D,05
01F7:  DATA 00,01
01F8:  DATA 89,2D
01F9:  DATA C2,27
01FA:  DATA D3,29
01FB:  DATA 5D,10
01FC:  DATA 3E,1F
01FD:  DATA 3E,10
01FE:  DATA 00,01
01FF:  DATA 89,16
0200:  DATA 3E,10
0201:  DATA 46,39
0202:  DATA E1,36
0203:  DATA 65,10
0204:  DATA 49,22
0205:  DATA 3A,10
0206:  DATA 25,2C
0207:  DATA 0D,05
0208:  DATA 00,01
0209:  DATA 89,16
020A:  DATA 3E,10
020B:  DATA C3,37
020C:  DATA 6E,3A
020D:  DATA 65,37
020E:  DATA 74,10
020F:  DATA F3,34
0210:  DATA FA,32
0211:  DATA 3A,10
0212:  DATA 25,32
0213:  DATA 0D,05
0214:  DATA 00,10
0215:  DATA 89,16
0216:  DATA 3E,10
0217:  DATA E9,39
0218:  DATA DF,32
0219:  DATA F8,34
021A:  DATA 73,3A
021B:  DATA 3A,10
021C:  DATA 25,32
021D:  DATA 0D,05
021E:  DATA 00,01
021F:  DATA 45,37
0220:  DATA 64,10
0221:  DATA ED,30
0222:  DATA EB,32
0223:  DATA 5F,39
0224:  DATA E5,31
0225:  DATA 69,3B
0226:  DATA E5,2F
0227:  DATA E3,37
0228:  DATA ED,36
0229:  DATA 61,37
022A:  DATA E4,06
022B:  DATA 8A,06
022C:  DATA 0A,00
022D:  DATA F3,34
022E:  DATA 67,37
022F:  DATA 61,36
0230:  DATA A0,32
0231:  DATA 6E,32
0232:  DATA A0,3B
0233:  DATA 69,3A
0234:  DATA 68,10
0235:  DATA 53,23
0236:  DATA C4,06
0237:  DATA 0A,00
0238:  DATA E4,37
0239:  DATA EE,13
023A:  DATA 74,10
023B:  DATA E6,34
023C:  DATA 6E,32
023D:  DATA A0,29
023E:  DATA 46,22
023F:  DATA 0D,05
0240:  DATA 00,00
0241:  DATA 89,16
0242:  DATA 3E,10
0243:  DATA 49,37
0244:  DATA F6,30
0245:  DATA EC,34
0246:  DATA 64,10
0247:  DATA 46,39
0248:  DATA E1,36
0249:  DATA 65,10
024A:  DATA 49,22
024B:  DATA 20,39
024C:  DATA E5,31
024D:  DATA E5,34
024E:  DATA F6,32
024F:  DATA 64,1D
0250:  DATA A0,12
0251:  DATA D8,06
0252:  DATA 0A,00
0253:  DATA 89,16
0254:  DATA 3E,10
0255:  DATA 43,29
0256:  DATA 43,10
0257:  DATA 65,39
0258:  DATA F2,37
0259:  DATA F2,10
025A:  DATA 0D,05
025B:  DATA 00,01
025C:  DATA 89,04
025D:  DATA 2D,1F
025E:  DATA 20,39
025F:  DATA E5,31
0260:  DATA E5,34
0261:  DATA F6,32
0262:  DATA 64,10
0263:  DATA 43,29
0264:  DATA 43,1D
0265:  DATA A0,12
0266:  DATA D8,06
0267:  DATA 0A,00
0268:  DATA 89,04
0269:  DATA 20,10
026A:  DATA A0,31
026B:  DATA 6F,36
026C:  DATA EC,32
026D:  DATA 63,3A
026E:  DATA A0,21
026F:  DATA D2,21
0270:  DATA 20,1D
0271:  DATA A0,12
0272:  DATA D8,06
0273:  DATA 0A,00
0274:  DATA 89,16
0275:  DATA 3E,10
0276:  DATA 49,37
0277:  DATA F6,30
0278:  DATA EC,34
0279:  DATA 64,10
027A:  DATA E4,32
027B:  DATA F6,34
027C:  DATA E3,32
027D:  DATA A0,24
027E:  DATA 44,10
027F:  DATA F2,32
0280:  DATA E3,32
0281:  DATA 69,3B
0282:  DATA 65,32
0283:  DATA 0D,05
0284:  DATA 00,01
0285:  DATA 89,04
0286:  DATA 2D,1F
0287:  DATA 20,39
0288:  DATA E5,31
0289:  DATA E5,34
028A:  DATA F6,32
028B:  DATA 64,1D
028C:  DATA 20,10
028D:  DATA 20,10
028E:  DATA A0,12
028F:  DATA D8,06
0290:  DATA 0A,00
0291:  DATA 89,04
0292:  DATA 20,10
0293:  DATA A0,26
0294:  DATA 79,10
0295:  DATA E4,32
0296:  DATA F6,34
0297:  DATA E3,32
0298:  DATA A0,24
0299:  DATA 44,1D
029A:  DATA A0,12
029B:  DATA D8,06
029C:  DATA 0A,00
029D:  DATA 89,2D
029E:  DATA C2,27
029F:  DATA D3,29
02A0:  DATA 5D,10
02A1:  DATA 3C,1E
02A2:  DATA 3C,10
02A3:  DATA 00,01
02A4:  DATA 89,16
02A5:  DATA 3E,10
02A6:  DATA 46,39
02A7:  DATA E1,36
02A8:  DATA 65,10
02A9:  DATA 49,22
02AA:  DATA 3A,10
02AB:  DATA 25,2C
02AC:  DATA 0D,05
02AD:  DATA 00,01
02AE:  DATA 89,16
02AF:  DATA 3E,10
02B0:  DATA C3,37
02B1:  DATA 6E,3A
02B2:  DATA 65,37
02B3:  DATA 74,10
02B4:  DATA F3,34
02B5:  DATA FA,32
02B6:  DATA 3A,10
02B7:  DATA 25,32
02B8:  DATA 0D,05
02B9:  DATA 00,00
02BA:  DATA 53,3A
02BB:  DATA 61,39
02BC:  DATA 74,10
02BD:  DATA D3,26
02BE:  DATA 46,10
02BF:  DATA F5,39
02C0:  DATA 69,37
02C1:  DATA 67,10
02C2:  DATA F2,32
02C3:  DATA F1,32
02C4:  DATA 73,3A
02C5:  DATA A0,39
02C6:  DATA E5,30
02C7:  DATA F1,3A
02C8:  DATA 65,37
02C9:  DATA E3,32
02CA:  DATA 0D,05
02CB:  DATA 00,01
02CC:  DATA 45,39
02CD:  DATA F2,37
02CE:  DATA F2,10
02CF:  DATA 20,29
02D0:  DATA E5,31
02D1:  DATA E5,34
02D2:  DATA F6,34
02D3:  DATA EE,33
02D4:  DATA A0,31
02D5:  DATA EF,36
02D6:  DATA ED,30
02D7:  DATA 6E,32
02D8:  DATA A0,34
02D9:  DATA EE,31
02DA:  DATA 6F,37
02DB:  DATA F3,34
02DC:  DATA 73,3A
02DD:  DATA 65,37
02DE:  DATA 74,10
02DF:  DATA F7,34
02E0:  DATA 74,34
02E1:  DATA 20,3A
02E2:  DATA E8,32
02E3:  DATA 20,32
02E4:  DATA E5,39
02E5:  DATA E9,33
02E6:  DATA EE,06
02E7:  DATA 0A,00
02E8:  DATA D3,26
02E9:  DATA 46,10
02EA:  DATA F5,39
02EB:  DATA 65,10
02EC:  DATA F2,32
02ED:  DATA F1,3A
02EE:  DATA E5,39
02EF:  DATA 74,10
02F0:  DATA 61,36
02F1:  DATA EC,37
02F2:  DATA F7,32
02F3:  DATA E4,06
02F4:  DATA 0A,00
02F5:  DATA D3,26
02F6:  DATA 46,10
02F7:  DATA F5,39
02F8:  DATA 65,10
02F9:  DATA F2,32
02FA:  DATA F1,3A
02FB:  DATA E5,39
02FC:  DATA 74,10
02FD:  DATA E4,32
02FE:  DATA EE,3C
02FF:  DATA 65,32
0300:  DATA 0D,05
0301:  DATA 00,01
0302:  DATA D2,32
0303:  DATA 74,39
0304:  DATA 79,10
0305:  DATA F2,32
0306:  DATA F1,3A
0307:  DATA E5,39
0308:  DATA 74,10
0309:  DATA F4,37
030A:  DATA 20,21
030B:  DATA CF,29
030C:  DATA 53,10
030D:  DATA D0,24
030E:  DATA C3,06
030F:  DATA 0A,00
0310:  DATA 45,39
0311:  DATA F2,37
0312:  DATA F2,10
0313:  DATA 20,29
0314:  DATA E5,31
0315:  DATA E5,34
0316:  DATA F6,34
0317:  DATA EE,33
0318:  DATA A0,31
0319:  DATA EF,36
031A:  DATA ED,30
031B:  DATA 6E,32
031C:  DATA A0,34
031D:  DATA EE,31
031E:  DATA 6F,37
031F:  DATA F3,34
0320:  DATA 73,3A
0321:  DATA 65,37
0322:  DATA 74,10
0323:  DATA F7,34
0324:  DATA 74,34
0325:  DATA 20,3A
0326:  DATA E8,32
0327:  DATA 20,32
0328:  DATA E5,39
0329:  DATA E9,33
032A:  DATA EE,06
032B:  DATA 0A,00
032C:  DATA 45,37
032D:  DATA 64,10
032E:  DATA D3,26
032F:  DATA 46,10
0330:  DATA F5,39
0331:  DATA 69,37
0332:  DATA 67,10
0333:  DATA F2,32
0334:  DATA F1,32
0335:  DATA 73,3A
0336:  DATA A0,39
0337:  DATA E5,30
0338:  DATA F1,3A
0339:  DATA 65,37
033A:  DATA E3,32
033B:  DATA 0D,05
033C:  DATA 00,00
033D:  DATA 53,3A
033E:  DATA 61,39
033F:  DATA 74,10
0340:  DATA CD,27
0341:  DATA C4,22
0342:  DATA A0,26
0343:  DATA C5,20
0344:  DATA D3,2A
0345:  DATA D2,22
0346:  DATA 0D,05
0347:  DATA 00,00
0348:  DATA 53,3A
0349:  DATA 61,39
034A:  DATA 74,10
034B:  DATA CD,27
034C:  DATA C4,22
034D:  DATA A0,26
034E:  DATA C5,20
034F:  DATA D3,2A
0350:  DATA D2,22
0351:  DATA 20,2B
0352:  DATA 6F,36
0353:  DATA F4,30
0354:  DATA E7,32
0355:  DATA 0D,05
0356:  DATA 00,00
0357:  DATA 53,3A
0358:  DATA 61,39
0359:  DATA 74,10
035A:  DATA D3,2B
035B:  DATA C5,22
035C:  DATA D0,06
035D:  DATA 0A,00
035E:  DATA 89,29
035F:  DATA F7,32
0360:  DATA 65,38
0361:  DATA A0,39
0362:  DATA F4,32
0363:  DATA 70,10
0364:  DATA 3A,10
0365:  DATA A5,3A
0366:  DATA 0D,05
0367:  DATA 00,01
0368:  DATA 45,27
0369:  DATA 44,10
036A:  DATA D3,2B
036B:  DATA C5,22
036C:  DATA D0,06
036D:  DATA 0A,00
036E:  DATA F4,32
036F:  DATA 6D,38
0370:  DATA 5F,3A
0371:  DATA 6F,38
0372:  DATA 3A,10
0373:  DATA 25,2C
0374:  DATA 0D,05
0375:  DATA 00,01
0376:  DATA F4,32
0377:  DATA 6D,38
0378:  DATA 5F,31
0379:  DATA 6F,3A
037A:  DATA 3A,10
037B:  DATA 25,2C
037C:  DATA 0D,05
037D:  DATA 00,00
037E:  DATA 70,32
037F:  DATA 5F,3B
0380:  DATA 61,36
0381:  DATA F5,32
0382:  DATA 3A,10
0383:  DATA 25,2C
0384:  DATA 0D,05
0385:  DATA 00,00
0386:  DATA E3,34
0387:  DATA E7,39
0388:  DATA 5F,3B
0389:  DATA 61,36
038A:  DATA F5,32
038B:  DATA 3A,10
038C:  DATA 25,2C
038D:  DATA 0D,05
038E:  DATA 00,00
038F:  DATA E3,3A
0390:  DATA 72,39
0391:  DATA 65,37
0392:  DATA F4,2F
0393:  DATA F6,30
0394:  DATA EC,3A
0395:  DATA 65,1D
0396:  DATA A0,12
0397:  DATA D8,06
0398:  DATA 0A,00
0399:  DATA F6,37
039A:  DATA 6C,3A
039B:  DATA E1,33
039C:  DATA E5,2F
039D:  DATA F6,30
039E:  DATA EC,3A
039F:  DATA 65,1D
03A0:  DATA A0,12
03A1:  DATA D8,06
03A2:  DATA 0A,00
03A3:  DATA 0D,05
03A4:  DATA DF,2F
03A5:  DATA DF,2F
03A6:  DATA DF,2F
03A7:  DATA DF,2F
03A8:  DATA DF,2F
03A9:  DATA DF,2F
03AA:  DATA DF,2F
03AB:  DATA DF,2F
03AC:  DATA DF,2F
03AD:  DATA DF,2F
03AE:  DATA 0D,05
03AF:  DATA 00,01
03B0:  DATA DF,2F
03B1:  DATA DF,29
03B2:  DATA F4,30
03B3:  DATA 72,3A
03B4:  DATA A0,31
03B5:  DATA 6F,38
03B6:  DATA F9,2F
03B7:  DATA E4,30
03B8:  DATA F4,30
03B9:  DATA DF,2F
03BA:  DATA 0D,05
03BB:  DATA 00,01
03BC:  DATA 53,3A
03BD:  DATA 61,39
03BE:  DATA 74,10
03BF:  DATA DB,12
03C0:  DATA 64,10
03C1:  DATA 74,34
03C2:  DATA 5D,10
03C3:  DATA E4,30
03C4:  DATA F4,30
03C5:  DATA A0,31
03C6:  DATA 6F,38
03C7:  DATA F9,06
03C8:  DATA 8A,06
03C9:  DATA 0A,00
03CA:  DATA 0D,05
03CB:  DATA DF,2F
03CC:  DATA DF,22
03CD:  DATA 6E,32
03CE:  DATA A0,31
03CF:  DATA 6F,38
03D0:  DATA F9,2F
03D1:  DATA E4,30
03D2:  DATA F4,30
03D3:  DATA DF,2F
03D4:  DATA DF,2F
03D5:  DATA 0D,05
03D6:  DATA 00,01
03D7:  DATA DF,2F
03D8:  DATA DF,2F
03D9:  DATA DF,2F
03DA:  DATA DF,2F
03DB:  DATA DF,2F
03DC:  DATA DF,2F
03DD:  DATA DF,2F
03DE:  DATA DF,2F
03DF:  DATA DF,2F
03E0:  DATA DF,2F
03E1:  DATA 0D,05
03E2:  DATA 0D,05
03E3:  DATA 00,00
03E4:  DATA 49,37
03E5:  DATA A0,39
03E6:  DATA 6D,33
03E7:  DATA A0,36
03E8:  DATA E9,39
03E9:  DATA F3,34
03EA:  DATA 6F,37
03EB:  DATA 20,32
03EC:  DATA 61,3A
03ED:  DATA 61,10
03EE:  DATA 73,3A
03EF:  DATA 61,39
03F0:  DATA 74,10
03F1:  DATA 20,10
03F2:  DATA 61,32
03F3:  DATA 64,39
03F4:  DATA E5,39
03F5:  DATA 73,1D
03F6:  DATA A0,12
03F7:  DATA 4C,2C
03F8:  DATA 0D,05
03F9:  DATA 00,01
03FA:  DATA 49,37
03FB:  DATA A0,39
03FC:  DATA 6D,33
03FD:  DATA A0,36
03FE:  DATA E9,39
03FF:  DATA F3,34
0400:  DATA 6F,37
0401:  DATA 20,32
0402:  DATA 61,3A
0403:  DATA 61,10
0404:  DATA 65,37
0405:  DATA 64,10
0406:  DATA 20,10
0407:  DATA 20,10
0408:  DATA 61,32
0409:  DATA 64,39
040A:  DATA E5,39
040B:  DATA 73,1D
040C:  DATA A0,12
040D:  DATA 4C,2C
040E:  DATA 0D,05
040F:  DATA 00,01
0410:  DATA 49,37
0411:  DATA A0,26
0412:  DATA C9,29
0413:  DATA 20,23
0414:  DATA 4D,10
0415:  DATA 57,39
0416:  DATA 69,3A
0417:  DATA 65,10
0418:  DATA F3,37
0419:  DATA 75,39
041A:  DATA E3,32
041B:  DATA 20,32
041C:  DATA 61,3A
041D:  DATA 61,10
041E:  DATA 61,32
041F:  DATA 64,39
0420:  DATA E5,39
0421:  DATA 73,1D
0422:  DATA A0,12
0423:  DATA 4C,2C
0424:  DATA 0D,05
0425:  DATA 00,01
0426:  DATA 49,37
0427:  DATA A0,26
0428:  DATA C9,29
0429:  DATA 20,23
042A:  DATA 4D,10
042B:  DATA 57,39
042C:  DATA 69,3A
042D:  DATA 65,10
042E:  DATA E4,30
042F:  DATA F4,30
0430:  DATA A0,39
0431:  DATA 69,3D
0432:  DATA 65,10
0433:  DATA 20,10
0434:  DATA 20,10
0435:  DATA 20,10
0436:  DATA 20,10
0437:  DATA 20,1D
0438:  DATA A0,12
0439:  DATA EC,3A
043A:  DATA 0D,05
043B:  DATA 0D,05
043C:  DATA 00,02
043D:  DATA D3,34
043E:  DATA FA,32
043F:  DATA A0,30
0440:  DATA F2,32
0441:  DATA 61,10
0442:  DATA F2,32
0443:  DATA 61,32
0444:  DATA 0D,05
0445:  DATA 00,01
0446:  DATA F5,39
0447:  DATA 65,32
0448:  DATA DF,39
0449:  DATA 69,3D
044A:  DATA 65,10
044B:  DATA 3D,10
044C:  DATA 25,36
044D:  DATA 75,10
044E:  DATA A8,39
044F:  DATA F2,31
0450:  DATA 20,18
0451:  DATA F8,12
0452:  DATA 30,1C
0453:  DATA 4C,2C
0454:  DATA A9,06
0455:  DATA 0A,00
0456:  DATA EC,37
0457:  DATA 6F,38
0458:  DATA A0,31
0459:  DATA EF,3A
045A:  DATA 6E,3A
045B:  DATA 3D,10
045C:  DATA 25,32
045D:  DATA 20,10
045E:  DATA A8,39
045F:  DATA F2,31
0460:  DATA 20,18
0461:  DATA F8,12
0462:  DATA 30,1C
0463:  DATA 4C,2C
0464:  DATA A9,06
0465:  DATA 8A,06
0466:  DATA 0A,00
0467:  DATA 57,39
0468:  DATA 61,38
0469:  DATA 20,3A
046A:  DATA F2,34
046B:  DATA E7,33
046C:  DATA 65,39
046D:  DATA 65,32
046E:  DATA 3A,10
046F:  DATA D2,32
0470:  DATA F3,32
0471:  DATA 74,3A
0472:  DATA 69,37
0473:  DATA 67,10
0474:  DATA E4,30
0475:  DATA F4,30
0476:  DATA DF,3B
0477:  DATA F2,34
0478:  DATA F4,32
0479:  DATA DF,30
047A:  DATA 64,32
047B:  DATA 72,10
047C:  DATA F4,37
047D:  DATA A0,39
047E:  DATA F4,30
047F:  DATA 72,3A
0480:  DATA 0D,05
0481:  DATA 00,00
0482:  DATA 55,38
0483:  DATA E4,30
0484:  DATA F4,32
0485:  DATA A0,39
0486:  DATA 69,3D
0487:  DATA 65,10
0488:  DATA 61,39
0489:  DATA E5,30
048A:  DATA 0D,05
048B:  DATA 00,01
048C:  DATA F5,39
048D:  DATA 65,32
048E:  DATA DF,39
048F:  DATA 69,3D
0490:  DATA 65,10
0491:  DATA 3D,10
0492:  DATA 25,36
0493:  DATA E4,06
0494:  DATA 0A,00
0495:  DATA EC,37
0496:  DATA 6F,38
0497:  DATA DF,31
0498:  DATA EF,3A
0499:  DATA 6E,3A
049A:  DATA A0,1E
049B:  DATA A0,12
049C:  DATA F5,06
049D:  DATA 8A,06
049E:  DATA 0A,00
049F:  DATA 0D,05
04A0:  DATA DF,2F
04A1:  DATA DF,2F
04A2:  DATA DF,2F
04A3:  DATA DF,2F
04A4:  DATA DF,2F
04A5:  DATA DF,2F
04A6:  DATA DF,2F
04A7:  DATA DF,2F
04A8:  DATA DF,2F
04A9:  DATA DF,2F
04AA:  DATA DF,2F
04AB:  DATA DF,2F
04AC:  DATA DF,2F
04AD:  DATA DF,2F
04AE:  DATA DF,2F
04AF:  DATA 0D,05
04B0:  DATA DF,2F
04B1:  DATA DF,2F
04B2:  DATA DF,29
04B3:  DATA F4,30
04B4:  DATA 72,3A
04B5:  DATA A0,32
04B6:  DATA F8,32
04B7:  DATA E3,3A
04B8:  DATA F4,32
04B9:  DATA DF,36
04BA:  DATA E9,39
04BB:  DATA F3,34
04BC:  DATA 6F,37
04BD:  DATA DF,2F
04BE:  DATA DF,2F
04BF:  DATA DF,06
04C0:  DATA 8A,06
04C1:  DATA 0A,00
04C2:  DATA C3,37
04C3:  DATA ED,36
04C4:  DATA 61,37
04C5:  DATA 64,10
04C6:  DATA 49,22
04C7:  DATA 3A,10
04C8:  DATA 25,2C
04C9:  DATA 0D,05
04CA:  DATA 0D,05
04CB:  DATA 00,01
04CC:  DATA 89,16
04CD:  DATA 3E,10
04CE:  DATA 45,3C
04CF:  DATA E1,36
04D0:  DATA 70,36
04D1:  DATA 65,10
04D2:  DATA E3,37
04D3:  DATA ED,36
04D4:  DATA 61,37
04D5:  DATA 64,10
04D6:  DATA 30,3C
04D7:  DATA 30,18
04D8:  DATA 0D,05
04D9:  DATA 00,01
04DA:  DATA 89,04
04DB:  DATA 2D,1F
04DC:  DATA A0,24
04DD:  DATA 6E,3B
04DE:  DATA 61,36
04DF:  DATA 69,32
04E0:  DATA A0,21
04E1:  DATA 4D,22
04E2:  DATA A0,24
04E3:  DATA C4,10
04E4:  DATA 0D,05
04E5:  DATA 00,01
04E6:  DATA 0D,05
04E7:  DATA DF,2F
04E8:  DATA DF,2F
04E9:  DATA DF,2F
04EA:  DATA 45,37
04EB:  DATA 64,10
04EC:  DATA 65,3C
04ED:  DATA E5,31
04EE:  DATA 75,3A
04EF:  DATA E5,2F
04F0:  DATA ED,34
04F1:  DATA F3,39
04F2:  DATA E9,37
04F3:  DATA EE,2F
04F4:  DATA DF,2F
04F5:  DATA DF,2F
04F6:  DATA DF,06
04F7:  DATA 8A,2F
04F8:  DATA DF,2F
04F9:  DATA DF,2F
04FA:  DATA DF,2F
04FB:  DATA DF,2F
04FC:  DATA DF,2F
04FD:  DATA DF,2F
04FE:  DATA DF,2F
04FF:  DATA DF,2F
0500:  DATA DF,2F
0501:  DATA DF,2F
0502:  DATA DF,2F
0503:  DATA DF,2F
0504:  DATA DF,2F
0505:  DATA DF,2F
0506:  DATA DF,2F
0507:  DATA 0D,05
0508:  DATA 00,00
0509:  DATA 53,3A
050A:  DATA 61,39
050B:  DATA 74,10
050C:  DATA 65,3C
050D:  DATA E5,31
050E:  DATA 75,3A
050F:  DATA E5,2F
0510:  DATA E3,37
0511:  DATA ED,36
0512:  DATA 61,37
0513:  DATA E4,06
0514:  DATA 0A,00
0515:  DATA 89,16
0516:  DATA 3E,10
0517:  DATA 55,38
0518:  DATA EC,34
0519:  DATA EE,35
051A:  DATA A0,31
051B:  DATA EF,36
051C:  DATA ED,30
051D:  DATA 6E,32
051E:  DATA 0D,05
051F:  DATA 00,01
0520:  DATA 09,10
0521:  DATA 20,10
0522:  DATA 54,39
0523:  DATA 61,37
0524:  DATA F3,36
0525:  DATA 69,3A
0526:  DATA A0,20
0527:  DATA E3,35
0528:  DATA EE,37
0529:  DATA EC,32
052A:  DATA 67,32
052B:  DATA E5,06
052C:  DATA 0A,00
052D:  DATA 89,16
052E:  DATA 3E,10
052F:  DATA 53,3A
0530:  DATA 61,3A
0531:  DATA F5,39
0532:  DATA A0,31
0533:  DATA E8,32
0534:  DATA E3,35
0535:  DATA 0D,05
0536:  DATA 00,01
0537:  DATA 09,10
0538:  DATA 20,10
0539:  DATA 54,39
053A:  DATA 61,37
053B:  DATA F3,36
053C:  DATA 69,3A
053D:  DATA A0,26
053E:  DATA C9,29
053F:  DATA A0,26
0540:  DATA C3,2A
0541:  DATA A0,29
0542:  DATA F4,30
0543:  DATA F4,3A
0544:  DATA F3,06
0545:  DATA 0A,00
0546:  DATA E6,34
0547:  DATA EE,34
0548:  DATA 73,34
0549:  DATA 65,32
054A:  DATA A0,34
054B:  DATA 6E,10
054C:  DATA 73,3A
054D:  DATA 61,3A
054E:  DATA F5,39
054F:  DATA DF,31
0550:  DATA E8,32
0551:  DATA E3,35
0552:  DATA 0D,05
0553:  DATA 00,00
0554:  DATA 89,16
0555:  DATA 3E,10
0556:  DATA D3,26
0557:  DATA 46,10
0558:  DATA 61,3B
0559:  DATA E1,34
055A:  DATA EC,30
055B:  DATA 62,36
055C:  DATA 65,10
055D:  DATA 63,34
055E:  DATA E5,31
055F:  DATA EB,06
0560:  DATA 0A,00
0561:  DATA 09,10
0562:  DATA 20,10
0563:  DATA 54,39
0564:  DATA 61,37
0565:  DATA F3,36
0566:  DATA 69,3A
0567:  DATA A0,20
0568:  DATA E3,35
0569:  DATA EE,37
056A:  DATA EC,32
056B:  DATA 67,32
056C:  DATA E5,06
056D:  DATA 0A,00
056E:  DATA 89,04
056F:  DATA 2D,1F
0570:  DATA A0,30
0571:  DATA 6C,36
0572:  DATA EF,3B
0573:  DATA E4,06
0574:  DATA 0A,00
0575:  DATA 89,04
0576:  DATA 2D,1F
0577:  DATA 20,32
0578:  DATA 65,37
0579:  DATA F9,32
057A:  DATA E4,06
057B:  DATA 0A,00
057C:  DATA CD,24
057D:  DATA D3,29
057E:  DATA C9,27
057F:  DATA 4E,10
0580:  DATA 46,26
0581:  DATA C1,29
0582:  DATA 48,10
0583:  DATA 49,37
0584:  DATA 69,3A
0585:  DATA E9,30
0586:  DATA EC,34
0587:  DATA FA,32
0588:  DATA 0D,05
0589:  DATA 00,01
058A:  DATA 46,36
058B:  DATA E1,39
058C:  DATA 68,10
058D:  DATA E9,39
058E:  DATA 20,37
058F:  DATA 6F,3A
0590:  DATA A0,31
0591:  DATA 6F,37
0592:  DATA EE,32
0593:  DATA 63,3A
0594:  DATA 65,32
0595:  DATA 0D,05
0596:  DATA 00,01
0597:  DATA 89,2F
0598:  DATA 5F,28
0599:  DATA C9,21
059A:  DATA CC,27
059B:  DATA C7,2F
059C:  DATA DF,06
059D:  DATA 0A,00
059E:  DATA 89,04
059F:  DATA F0,34
05A0:  DATA 63,36
05A1:  DATA EF,33
05A2:  DATA DF,3B
05A3:  DATA F2,34
05A4:  DATA F4,32
05A5:  DATA DF,31
05A6:  DATA EF,3A
05A7:  DATA 6E,3A
05A8:  DATA 65,39
05A9:  DATA 20,10
05AA:  DATA 20,1D
05AB:  DATA A0,12
05AC:  DATA EC,3A
05AD:  DATA 0D,05
05AE:  DATA 00,01
05AF:  DATA 89,04
05B0:  DATA F0,34
05B1:  DATA 63,36
05B2:  DATA EF,33
05B3:  DATA 5F,36
05B4:  DATA EF,37
05B5:  DATA F0,2F
05B6:  DATA E3,37
05B7:  DATA 75,37
05B8:  DATA F4,32
05B9:  DATA 72,10
05BA:  DATA 20,10
05BB:  DATA 20,1D
05BC:  DATA A0,12
05BD:  DATA E4,06
05BE:  DATA 0A,00
05BF:  DATA 89,04
05C0:  DATA F0,34
05C1:  DATA 63,36
05C2:  DATA EF,33
05C3:  DATA DF,39
05C4:  DATA 6D,33
05C5:  DATA 77,39
05C6:  DATA 69,3A
05C7:  DATA E5,2F
05C8:  DATA E3,37
05C9:  DATA 75,37
05CA:  DATA F4,32
05CB:  DATA 72,1D
05CC:  DATA A0,12
05CD:  DATA EC,3A
05CE:  DATA 0D,05
05CF:  DATA 00,01
05D0:  DATA 89,04
05D1:  DATA F0,34
05D2:  DATA 63,36
05D3:  DATA EF,33
05D4:  DATA DF,39
05D5:  DATA 6D,33
05D6:  DATA 5F,36
05D7:  DATA EF,37
05D8:  DATA F0,2F
05D9:  DATA E3,37
05DA:  DATA 75,37
05DB:  DATA F4,32
05DC:  DATA 72,1D
05DD:  DATA A0,12
05DE:  DATA E4,06
05DF:  DATA 0A,00
05E0:  DATA 89,2F
05E1:  DATA DF,26
05E2:  DATA C5,20
05E3:  DATA D3,2A
05E4:  DATA D2,22
05E5:  DATA CD,22
05E6:  DATA 4E,2A
05E7:  DATA DF,2F
05E8:  DATA 0D,05
05E9:  DATA 00,01
05EA:  DATA 89,04
05EB:  DATA ED,32
05EC:  DATA E1,39
05ED:  DATA 75,39
05EE:  DATA E5,36
05EF:  DATA 65,37
05F0:  DATA F4,2F
05F1:  DATA E4,30
05F2:  DATA F4,30
05F3:  DATA DF,31
05F4:  DATA EF,3A
05F5:  DATA 6E,3A
05F6:  DATA 65,39
05F7:  DATA 20,10
05F8:  DATA 20,10
05F9:  DATA 3A,10
05FA:  DATA 25,36
05FB:  DATA F5,06
05FC:  DATA 0A,00
05FD:  DATA 89,04
05FE:  DATA ED,32
05FF:  DATA E1,39
0600:  DATA 5F,36
0601:  DATA EF,37
0602:  DATA F0,2F
0603:  DATA E3,37
0604:  DATA 75,37
0605:  DATA F4,32
0606:  DATA 72,10
0607:  DATA 20,10
0608:  DATA 20,10
0609:  DATA 20,10
060A:  DATA 20,10
060B:  DATA 20,10
060C:  DATA 3A,10
060D:  DATA 25,32
060E:  DATA 0D,05
060F:  DATA 00,01
0610:  DATA 89,04
0611:  DATA ED,32
0612:  DATA E1,39
0613:  DATA 75,39
0614:  DATA E5,36
0615:  DATA 65,37
0616:  DATA F4,2F
0617:  DATA E4,30
0618:  DATA F4,30
0619:  DATA DF,39
061A:  DATA 6D,33
061B:  DATA DF,31
061C:  DATA EF,3A
061D:  DATA 6E,3A
061E:  DATA 65,39
061F:  DATA 3A,10
0620:  DATA 25,36
0621:  DATA F5,06
0622:  DATA 0A,00
0623:  DATA 89,04
0624:  DATA ED,32
0625:  DATA E1,39
0626:  DATA DF,39
0627:  DATA 6D,33
0628:  DATA 5F,36
0629:  DATA EF,37
062A:  DATA F0,2F
062B:  DATA E3,37
062C:  DATA 75,37
062D:  DATA F4,32
062E:  DATA 72,10
062F:  DATA 20,10
0630:  DATA 20,10
0631:  DATA 20,10
0632:  DATA 3A,10
0633:  DATA 25,32
0634:  DATA 0D,05
0635:  DATA 00,01
0636:  DATA 89,21
0637:  DATA EF,36
0638:  DATA 70,36
0639:  DATA 65,3A
063A:  DATA E5,06
063B:  DATA 0A,00
063C:  DATA 0D,05
063D:  DATA 0D,05
063E:  DATA 0D,05
063F:  DATA BD,1E
0640:  DATA BD,1E
0641:  DATA BD,1E
0642:  DATA BD,1E
0643:  DATA BD,1E
0644:  DATA BD,1E
0645:  DATA BD,1E
0646:  DATA BD,1E
0647:  DATA BD,1E
0648:  DATA BD,1E
0649:  DATA BD,1E
064A:  DATA BD,1E
064B:  DATA BD,1E
064C:  DATA BD,1E
064D:  DATA BD,1E
064E:  DATA BD,1E
064F:  DATA BD,1E
0650:  DATA BD,1E
0651:  DATA BD,1E
0652:  DATA BD,1E
0653:  DATA BD,1E
0654:  DATA BD,1E
0655:  DATA BD,1E
0656:  DATA BD,1E
0657:  DATA BD,1E
0658:  DATA BD,1E
0659:  DATA BD,1E
065A:  DATA BD,1E
065B:  DATA BD,1E
065C:  DATA BD,1E
065D:  DATA 0D,05
065E:  DATA 00,01
065F:  DATA 54,34
0660:  DATA E9,39
0661:  DATA A0,34
0662:  DATA 73,10
0663:  DATA CD,27
0664:  DATA CD,24
0665:  DATA CA,24
0666:  DATA A0,21
0667:  DATA C9,23
0668:  DATA 53,10
0669:  DATA D0,24
066A:  DATA 43,10
066B:  DATA 42,21
066C:  DATA 4D,10
066D:  DATA E6,37
066E:  DATA 72,10
066F:  DATA CD,24
0670:  DATA D3,1B
0671:  DATA 5F,21
0672:  DATA C2,26
0673:  DATA 31,17
0674:  DATA 0D,05
0675:  DATA 00,01
0676:  DATA CC,30
0677:  DATA 73,3A
0678:  DATA A0,3A
0679:  DATA 70,32
067A:  DATA 61,3A
067B:  DATA 65,32
067C:  DATA A0,37
067D:  DATA 6E,10
067E:  DATA 32,18
067F:  DATA B2,1A
0680:  DATA 2F,18
0681:  DATA B6,17
0682:  DATA B1,1A
0683:  DATA 2C,10
0684:  DATA E2,3C
0685:  DATA A0,24
0686:  DATA EE,37
0687:  DATA F5,32
0688:  DATA AE,06
0689:  DATA 8A,06
068A:  DATA 0A,00
068B:  DATA DF,2F
068C:  DATA DF,2F
068D:  DATA C3,24
068E:  DATA C7,29
068F:  DATA 20,28
0690:  DATA C9,21
0691:  DATA A0,29
0692:  DATA F4,30
0693:  DATA 72,3A
0694:  DATA A0,27
0695:  DATA F0,32
0696:  DATA F2,30
0697:  DATA F4,34
0698:  DATA 6F,37
0699:  DATA DF,2F
069A:  DATA DF,2F
069B:  DATA DF,06
069C:  DATA 8A,06
069D:  DATA 0A,00
069E:  DATA F7,30
069F:  DATA 69,3A
06A0:  DATA 69,37
06A1:  DATA 67,10
06A2:  DATA E6,37
06A3:  DATA 72,10
06A4:  DATA C2,27
06A5:  DATA D3,29
06A6:  DATA 20,28
06A7:  DATA C9,21
06A8:  DATA A0,31
06A9:  DATA EF,36
06AA:  DATA ED,30
06AB:  DATA 6E,32
06AC:  DATA 00,01
06AD:  DATA 46,39
06AE:  DATA E1,36
06AF:  DATA 65,10
06B0:  DATA 49,22
06B1:  DATA 3A,10
06B2:  DATA 25,2C
06B3:  DATA 0D,05
06B4:  DATA 00,01
06B5:  DATA C3,37
06B6:  DATA 6E,3A
06B7:  DATA 65,37
06B8:  DATA 74,10
06B9:  DATA F3,34
06BA:  DATA FA,32
06BB:  DATA 3A,10
06BC:  DATA A5,3A
06BD:  DATA 0D,05
06BE:  DATA 00,01
06BF:  DATA F0,30
06C0:  DATA 79,36
06C1:  DATA EF,30
06C2:  DATA 64,1D
06C3:  DATA 20,00
06C4:  DATA 0D,05
06C5:  DATA 0D,05
06C6:  DATA 00,01
06C7:  DATA E9,39
06C8:  DATA DF,32
06C9:  DATA F8,34
06CA:  DATA 73,3A
06CB:  DATA 3A,10
06CC:  DATA 25,32
06CD:  DATA 0D,05
06CE:  DATA 00,01
06CF:  DATA 0D,05
06D0:  DATA 0D,05
06D1:  DATA BD,1E
06D2:  DATA BD,1E
06D3:  DATA BD,1E
06D4:  DATA 0D,05
06D5:  DATA 0D,05
06D6:  DATA C6,34
06D7:  DATA EE,34
06D8:  DATA 73,34
06D9:  DATA 65,32
06DA:  DATA 20,38
06DB:  DATA F2,37
06DC:  DATA E3,32
06DD:  DATA F3,39
06DE:  DATA AE,06
06DF:  DATA 8A,2B
06E0:  DATA E1,34
06E1:  DATA 74,10
06E2:  DATA E6,37
06E3:  DATA 72,10
06E4:  DATA C2,27
06E5:  DATA D3,29
06E6:  DATA 20,28
06E7:  DATA C9,21
06E8:  DATA 20,3A
06E9:  DATA 75,39
06EA:  DATA 6E,10
06EB:  DATA 6F,33
06EC:  DATA 66,10
06ED:  DATA ED,32
06EE:  DATA 00,01
06EF:  DATA 45,37
06F0:  DATA 64,10
06F1:  DATA ED,30
06F2:  DATA 69,37
06F3:  DATA 0D,05
06F4:  DATA 00,00
*
071D:  MOVF   0B,W
071E:  BCF    0B.7
071F:  MOVLB  03
0720:  BSF    15.7
0721:  BSF    15.0
0722:  NOP
0723:  NOP
0724:  BTFSC  09.7
0725:  BSF    0B.7
0726:  MOVF   13,W
0727:  ANDLW  7F
0728:  BTFSS  03.2
0729:  GOTO   72C
072A:  MOVLB  00
072B:  GOTO   76C
072C:  MOVLB  12
072D:  MOVWF  22
072E:  MOVLB  03
072F:  MOVF   11,W
0730:  MOVLB  12
0731:  MOVWF  23
0732:  MOVLB  03
0733:  MOVF   12,W
0734:  MOVLB  12
0735:  MOVWF  24
0736:  MOVF   22,W
0737:  MOVWF  25
0738:  MOVLB  00
0739:  CALL   6F5
073A:  MOVLB  12
073B:  MOVF   23,W
073C:  MOVLB  03
073D:  MOVWF  11
073E:  MOVLB  12
073F:  MOVF   24,W
0740:  MOVLB  03
0741:  MOVWF  12
0742:  MOVF   0B,W
0743:  BCF    0B.7
0744:  BSF    15.7
0745:  BSF    15.0
0746:  NOP
0747:  NOP
0748:  BTFSC  09.7
0749:  BSF    0B.7
074A:  RLF    13,W
074B:  RLF    14,W
074C:  ANDLW  7F
074D:  BTFSS  03.2
074E:  GOTO   751
074F:  MOVLB  00
0750:  GOTO   76C
0751:  MOVLB  12
0752:  MOVWF  22
0753:  MOVLB  03
0754:  MOVF   11,W
0755:  MOVLB  12
0756:  MOVWF  23
0757:  MOVLB  03
0758:  MOVF   12,W
0759:  MOVLB  12
075A:  MOVWF  24
075B:  MOVF   22,W
075C:  MOVWF  25
075D:  MOVLB  00
075E:  CALL   6F5
075F:  MOVLB  12
0760:  MOVF   23,W
0761:  MOVLB  03
0762:  MOVWF  11
0763:  MOVLB  12
0764:  MOVF   24,W
0765:  MOVLB  03
0766:  MOVWF  12
0767:  INCF   11,F
0768:  BTFSC  03.2
0769:  INCF   12,F
076A:  MOVLB  00
076B:  GOTO   71D
076C:  RETURN
*
07D6:  MOVLB  12
07D7:  MOVF   21,W
07D8:  ANDLW  07
07D9:  MOVWF  77
07DA:  RRF    21,W
07DB:  MOVWF  78
07DC:  RRF    78,F
07DD:  RRF    78,F
07DE:  MOVLW  1F
07DF:  ANDWF  78,F
07E0:  MOVF   78,W
07E1:  ADDWF  23,W
07E2:  MOVWF  04
07E3:  MOVLW  00
07E4:  ADDWFC 24,W
07E5:  MOVWF  05
07E6:  CLRF   78
07E7:  INCF   78,F
07E8:  INCF   77,F
07E9:  MOVLB  00
07EA:  GOTO   7EC
07EB:  RLF    78,F
07EC:  DECFSZ 77,F
07ED:  GOTO   7EB
07EE:  MOVLB  12
07EF:  MOVF   22,F
07F0:  BTFSS  03.2
07F1:  GOTO   7F4
07F2:  MOVLB  00
07F3:  GOTO   7F8
07F4:  MOVF   78,W
07F5:  IORWF  00,F
07F6:  MOVLB  00
07F7:  GOTO   7FB
07F8:  COMF   78,F
07F9:  MOVF   78,W
07FA:  ANDWF  00,F
07FB:  RETURN
*
0AE4:  MOVF   0B,W
0AE5:  BCF    0B.7
0AE6:  MOVLB  03
0AE7:  BSF    15.7
0AE8:  BSF    15.0
0AE9:  NOP
0AEA:  NOP
0AEB:  BTFSC  09.7
0AEC:  BSF    0B.7
0AED:  BTFSS  03.0
0AEE:  GOTO   2F1
0AEF:  MOVLB  00
0AF0:  GOTO   31D
0AF1:  MOVF   13,W
0AF2:  ANDLW  7F
0AF3:  MOVLB  11
0AF4:  MOVWF  52
0AF5:  MOVLB  03
0AF6:  MOVF   11,W
0AF7:  MOVLB  11
0AF8:  MOVWF  53
0AF9:  MOVLB  03
0AFA:  MOVF   12,W
0AFB:  MOVLB  11
0AFC:  MOVWF  54
0AFD:  MOVF   52,W
0AFE:  MOVLB  12
0AFF:  MOVWF  25
0B00:  MOVLP  00
0B01:  MOVLB  00
0B02:  CALL   6F5
0B03:  MOVLP  08
0B04:  MOVLB  11
0B05:  MOVF   53,W
0B06:  MOVLB  03
0B07:  MOVWF  11
0B08:  MOVLB  11
0B09:  MOVF   54,W
0B0A:  MOVLB  03
0B0B:  MOVWF  12
0B0C:  MOVF   0B,W
0B0D:  BCF    0B.7
0B0E:  BSF    15.7
0B0F:  BSF    15.0
0B10:  NOP
0B11:  NOP
0B12:  BTFSC  09.7
0B13:  BSF    0B.7
0B14:  MOVLB  11
0B15:  DECFSZ 51,F
0B16:  GOTO   319
0B17:  GOTO   31B
0B18:  MOVLB  00
0B19:  MOVLB  00
0B1A:  GOTO   31D
0B1B:  MOVLB  00
0B1C:  GOTO   345
0B1D:  MOVLB  03
0B1E:  RLF    13,W
0B1F:  RLF    14,W
0B20:  ANDLW  7F
0B21:  MOVLB  11
0B22:  MOVWF  52
0B23:  MOVLB  03
0B24:  MOVF   11,W
0B25:  MOVLB  11
0B26:  MOVWF  53
0B27:  MOVLB  03
0B28:  MOVF   12,W
0B29:  MOVLB  11
0B2A:  MOVWF  54
0B2B:  MOVF   52,W
0B2C:  MOVLB  12
0B2D:  MOVWF  25
0B2E:  MOVLP  00
0B2F:  MOVLB  00
0B30:  CALL   6F5
0B31:  MOVLP  08
0B32:  MOVLB  11
0B33:  MOVF   53,W
0B34:  MOVLB  03
0B35:  MOVWF  11
0B36:  MOVLB  11
0B37:  MOVF   54,W
0B38:  MOVLB  03
0B39:  MOVWF  12
0B3A:  INCF   11,F
0B3B:  BTFSC  03.2
0B3C:  INCF   12,F
0B3D:  BCF    03.0
0B3E:  MOVLB  11
0B3F:  DECFSZ 51,F
0B40:  GOTO   343
0B41:  GOTO   345
0B42:  MOVLB  00
0B43:  MOVLB  00
0B44:  GOTO   2E4
0B45:  MOVLB  00
0B46:  RETURN
0B47:  BTFSC  03.1
0B48:  GOTO   34D
0B49:  MOVLW  25
0B4A:  MOVWF  05
0B4B:  MOVLW  9B
0B4C:  MOVWF  04
0B4D:  CLRF   77
0B4E:  CLRF   78
0B4F:  CLRF   79
0B50:  CLRF   7A
0B51:  MOVLB  11
0B52:  CLRF   6B
0B53:  CLRF   6C
0B54:  CLRF   6D
0B55:  CLRF   6E
0B56:  MOVF   67,W
0B57:  IORWF  66,W
0B58:  IORWF  65,W
0B59:  IORWF  64,W
0B5A:  BTFSS  03.2
0B5B:  GOTO   35E
0B5C:  MOVLB  00
0B5D:  GOTO   3A1
0B5E:  MOVLB  00
0B5F:  MOVLW  20
0B60:  MOVLB  11
0B61:  MOVWF  6F
0B62:  MOVLB  00
0B63:  BCF    03.0
0B64:  MOVLB  11
0B65:  RLF    60,F
0B66:  RLF    61,F
0B67:  RLF    62,F
0B68:  RLF    63,F
0B69:  RLF    6B,F
0B6A:  RLF    6C,F
0B6B:  RLF    6D,F
0B6C:  RLF    6E,F
0B6D:  MOVF   67,W
0B6E:  SUBWF  6E,W
0B6F:  BTFSC  03.2
0B70:  GOTO   373
0B71:  MOVLB  00
0B72:  GOTO   382
0B73:  MOVF   66,W
0B74:  SUBWF  6D,W
0B75:  BTFSC  03.2
0B76:  GOTO   379
0B77:  MOVLB  00
0B78:  GOTO   382
0B79:  MOVF   65,W
0B7A:  SUBWF  6C,W
0B7B:  BTFSC  03.2
0B7C:  GOTO   37F
0B7D:  MOVLB  00
0B7E:  GOTO   382
0B7F:  MOVF   64,W
0B80:  SUBWF  6B,W
0B81:  MOVLB  00
0B82:  BTFSS  03.0
0B83:  GOTO   395
0B84:  MOVLB  11
0B85:  MOVF   64,W
0B86:  SUBWF  6B,F
0B87:  MOVF   65,W
0B88:  BTFSS  03.0
0B89:  INCFSZ 65,W
0B8A:  SUBWF  6C,F
0B8B:  MOVF   66,W
0B8C:  BTFSS  03.0
0B8D:  INCFSZ 66,W
0B8E:  SUBWF  6D,F
0B8F:  MOVF   67,W
0B90:  BTFSS  03.0
0B91:  INCFSZ 67,W
0B92:  SUBWF  6E,F
0B93:  BSF    03.0
0B94:  MOVLB  00
0B95:  RLF    77,F
0B96:  RLF    78,F
0B97:  RLF    79,F
0B98:  RLF    7A,F
0B99:  MOVLB  11
0B9A:  DECFSZ 6F,F
0B9B:  GOTO   39E
0B9C:  GOTO   3A0
0B9D:  MOVLB  00
0B9E:  MOVLB  00
0B9F:  GOTO   363
0BA0:  MOVLB  00
0BA1:  MOVLB  11
0BA2:  MOVF   6B,W
0BA3:  MOVWF  00
0BA4:  ADDFSR 01,FSR0
0BA5:  MOVF   6C,W
0BA6:  MOVWF  00
0BA7:  ADDFSR 01,FSR0
0BA8:  MOVF   6D,W
0BA9:  MOVWF  00
0BAA:  ADDFSR 01,FSR0
0BAB:  MOVF   6E,W
0BAC:  MOVWF  00
0BAD:  ADDFSR 3D,FSR0
0BAE:  MOVLB  00
0BAF:  RETURN
0BB0:  MOVF   04,W
0BB1:  MOVLB  11
0BB2:  MOVWF  58
0BB3:  MOVLW  3B
0BB4:  MOVWF  5F
0BB5:  MOVLW  9A
0BB6:  MOVWF  5E
0BB7:  MOVLW  CA
0BB8:  MOVWF  5D
0BB9:  CLRF   5C
0BBA:  MOVLW  0A
0BBB:  MOVWF  5A
0BBC:  MOVLB  00
0BBD:  BSF    03.1
0BBE:  MOVLW  25
0BBF:  MOVWF  05
0BC0:  MOVLW  81
0BC1:  MOVWF  04
0BC2:  MOVLB  11
0BC3:  MOVF   54,W
0BC4:  MOVWF  63
0BC5:  MOVF   53,W
0BC6:  MOVWF  62
0BC7:  MOVF   52,W
0BC8:  MOVWF  61
0BC9:  MOVF   51,W
0BCA:  MOVWF  60
0BCB:  MOVF   5F,W
0BCC:  MOVWF  67
0BCD:  MOVF   5E,W
0BCE:  MOVWF  66
0BCF:  MOVF   5D,W
0BD0:  MOVWF  65
0BD1:  MOVF   5C,W
0BD2:  MOVWF  64
0BD3:  MOVLB  00
0BD4:  CALL   347
0BD5:  MOVF   78,W
0BD6:  MOVF   77,F
0BD7:  BTFSS  03.2
0BD8:  GOTO   3FC
0BD9:  MOVLB  11
0BDA:  MOVF   5A,W
0BDB:  XORLW  01
0BDC:  BTFSS  03.2
0BDD:  GOTO   3E0
0BDE:  MOVLB  00
0BDF:  GOTO   3FC
0BE0:  MOVF   58,W
0BE1:  BTFSS  03.2
0BE2:  GOTO   3E5
0BE3:  MOVLB  00
0BE4:  GOTO   3FF
0BE5:  ANDLW  0F
0BE6:  SUBWF  5A,W
0BE7:  BTFSS  03.2
0BE8:  GOTO   3EB
0BE9:  MOVLB  00
0BEA:  GOTO   3F0
0BEB:  BTFSS  03.0
0BEC:  GOTO   3EF
0BED:  MOVLB  00
0BEE:  GOTO   408
0BEF:  MOVLB  00
0BF0:  MOVLB  11
0BF1:  BTFSS  58.7
0BF2:  GOTO   3F5
0BF3:  MOVLB  00
0BF4:  GOTO   408
0BF5:  BTFSS  58.6
0BF6:  GOTO   3F9
0BF7:  MOVLB  00
0BF8:  GOTO   3FF
0BF9:  MOVLW  20
0BFA:  MOVLB  00
0BFB:  GOTO   400
0BFC:  MOVLB  11
0BFD:  CLRF   58
0BFE:  MOVLB  00
0BFF:  MOVLW  30
0C00:  ADDWF  77,F
0C01:  MOVF   77,W
0C02:  MOVLB  12
0C03:  MOVWF  25
0C04:  MOVLP  00
0C05:  MOVLB  00
0C06:  CALL   6F5
0C07:  MOVLP  08
0C08:  BCF    03.1
0C09:  MOVLB  11
0C0A:  MOVF   5F,W
0C0B:  MOVWF  63
0C0C:  MOVF   5E,W
0C0D:  MOVWF  62
0C0E:  MOVF   5D,W
0C0F:  MOVWF  61
0C10:  MOVF   5C,W
0C11:  MOVWF  60
0C12:  CLRF   67
0C13:  CLRF   66
0C14:  CLRF   65
0C15:  MOVLW  0A
0C16:  MOVWF  64
0C17:  MOVLB  00
0C18:  CALL   347
0C19:  MOVF   7A,W
0C1A:  MOVLB  11
0C1B:  MOVWF  5F
0C1C:  MOVF   79,W
0C1D:  MOVWF  5E
0C1E:  MOVF   78,W
0C1F:  MOVWF  5D
0C20:  MOVF   77,W
0C21:  MOVWF  5C
0C22:  DECFSZ 5A,F
0C23:  GOTO   426
0C24:  GOTO   428
0C25:  MOVLB  00
0C26:  MOVLB  00
0C27:  GOTO   3BD
0C28:  MOVLB  00
0C29:  RETURN
0C2A:  MOVLB  11
0C2B:  MOVF   55,W
0C2C:  CLRF   78
0C2D:  SUBWF  54,W
0C2E:  BTFSS  03.0
0C2F:  GOTO   432
0C30:  MOVLB  00
0C31:  GOTO   436
0C32:  MOVF   54,W
0C33:  MOVWF  77
0C34:  MOVLB  00
0C35:  GOTO   449
0C36:  CLRF   77
0C37:  MOVLW  08
0C38:  MOVLB  11
0C39:  MOVWF  56
0C3A:  MOVLB  00
0C3B:  MOVLB  11
0C3C:  RLF    54,F
0C3D:  RLF    77,F
0C3E:  MOVF   55,W
0C3F:  SUBWF  77,W
0C40:  BTFSC  03.0
0C41:  MOVWF  77
0C42:  RLF    78,F
0C43:  DECFSZ 56,F
0C44:  GOTO   447
0C45:  GOTO   449
0C46:  MOVLB  00
0C47:  MOVLB  00
0C48:  GOTO   43B
0C49:  MOVLB  00
0C4A:  RETURN
0C4B:  MOVLW  20
0C4C:  MOVLB  11
0C4D:  BTFSS  4F.4
0C4E:  MOVLW  30
0C4F:  MOVWF  50
0C50:  MOVF   4E,W
0C51:  MOVWF  77
0C52:  BTFSC  77.7
0C53:  GOTO   456
0C54:  MOVLB  00
0C55:  GOTO   45F
0C56:  COMF   77,F
0C57:  INCF   77,F
0C58:  MOVF   77,W
0C59:  MOVWF  4E
0C5A:  MOVLW  2D
0C5B:  MOVWF  50
0C5C:  BSF    4F.7
0C5D:  BSF    4F.0
0C5E:  MOVLB  00
0C5F:  MOVF   78,W
0C60:  MOVLB  11
0C61:  MOVF   4E,W
0C62:  MOVWF  54
0C63:  MOVLW  64
0C64:  MOVWF  55
0C65:  MOVLB  00
0C66:  CALL   42A
0C67:  MOVF   77,W
0C68:  MOVLB  11
0C69:  MOVWF  4E
0C6A:  MOVLW  30
0C6B:  ADDWF  78,W
0C6C:  MOVWF  51
0C6D:  MOVF   4E,W
0C6E:  MOVWF  54
0C6F:  MOVLW  0A
0C70:  MOVWF  55
0C71:  MOVLB  00
0C72:  CALL   42A
0C73:  MOVLW  30
0C74:  ADDWF  77,W
0C75:  MOVLB  11
0C76:  MOVWF  53
0C77:  MOVLW  30
0C78:  ADDWF  78,W
0C79:  MOVWF  52
0C7A:  MOVF   50,W
0C7B:  MOVWF  77
0C7C:  MOVLB  00
0C7D:  MOVLW  30
0C7E:  MOVLB  11
0C7F:  SUBWF  51,W
0C80:  BTFSS  03.2
0C81:  GOTO   484
0C82:  MOVLB  00
0C83:  GOTO   489
0C84:  BSF    4F.1
0C85:  BTFSC  4F.7
0C86:  BSF    4F.2
0C87:  MOVLB  00
0C88:  GOTO   4A6
0C89:  MOVLB  11
0C8A:  MOVF   50,W
0C8B:  MOVWF  51
0C8C:  MOVLW  20
0C8D:  MOVWF  50
0C8E:  MOVLW  30
0C8F:  SUBWF  52,W
0C90:  BTFSS  03.2
0C91:  GOTO   494
0C92:  MOVLB  00
0C93:  GOTO   499
0C94:  BSF    4F.0
0C95:  BTFSC  4F.7
0C96:  BSF    4F.1
0C97:  MOVLB  00
0C98:  GOTO   4A6
0C99:  BTFSC  03.2
0C9A:  GOTO   49E
0C9B:  MOVLB  11
0C9C:  BSF    4F.0
0C9D:  MOVLB  00
0C9E:  BTFSS  03.2
0C9F:  GOTO   4A6
0CA0:  MOVLB  11
0CA1:  MOVF   51,W
0CA2:  MOVWF  52
0CA3:  MOVLW  20
0CA4:  MOVWF  51
0CA5:  MOVLB  00
0CA6:  MOVLB  11
0CA7:  BTFSS  4F.2
0CA8:  GOTO   4AB
0CA9:  MOVLB  00
0CAA:  GOTO   4B5
0CAB:  BTFSS  4F.1
0CAC:  GOTO   4AF
0CAD:  MOVLB  00
0CAE:  GOTO   4BD
0CAF:  BTFSS  4F.0
0CB0:  GOTO   4B3
0CB1:  MOVLB  00
0CB2:  GOTO   4C5
0CB3:  MOVLB  00
0CB4:  GOTO   4CD
0CB5:  MOVLB  11
0CB6:  MOVF   50,W
0CB7:  MOVLB  12
0CB8:  MOVWF  25
0CB9:  MOVLP  00
0CBA:  MOVLB  00
0CBB:  CALL   6F5
0CBC:  MOVLP  08
0CBD:  MOVLB  11
0CBE:  MOVF   51,W
0CBF:  MOVLB  12
0CC0:  MOVWF  25
0CC1:  MOVLP  00
0CC2:  MOVLB  00
0CC3:  CALL   6F5
0CC4:  MOVLP  08
0CC5:  MOVLB  11
0CC6:  MOVF   52,W
0CC7:  MOVLB  12
0CC8:  MOVWF  25
0CC9:  MOVLP  00
0CCA:  MOVLB  00
0CCB:  CALL   6F5
0CCC:  MOVLP  08
0CCD:  MOVLB  11
0CCE:  MOVF   53,W
0CCF:  MOVLB  12
0CD0:  MOVWF  25
0CD1:  MOVLP  00
0CD2:  MOVLB  00
0CD3:  CALL   6F5
0CD4:  MOVLP  08
0CD5:  RETURN
*
0E99:  MOVLB  11
0E9A:  BTFSS  52.7
0E9B:  GOTO   69E
0E9C:  MOVLB  00
0E9D:  GOTO   6B7
0E9E:  MOVLW  0F
0E9F:  MOVWF  77
0EA0:  SWAPF  51,W
0EA1:  ANDWF  77,F
0EA2:  MOVLW  0A
0EA3:  SUBWF  77,W
0EA4:  BTFSS  03.0
0EA5:  GOTO   6A8
0EA6:  MOVLB  00
0EA7:  GOTO   6AC
0EA8:  MOVLW  30
0EA9:  ADDWF  77,F
0EAA:  MOVLB  00
0EAB:  GOTO   6B0
0EAC:  MOVLB  11
0EAD:  MOVF   52,W
0EAE:  ADDWF  77,F
0EAF:  MOVLB  00
0EB0:  MOVF   77,W
0EB1:  MOVLB  12
0EB2:  MOVWF  25
0EB3:  MOVLP  00
0EB4:  MOVLB  00
0EB5:  CALL   6F5
0EB6:  MOVLP  08
0EB7:  MOVLW  0F
0EB8:  MOVLB  11
0EB9:  ANDWF  51,F
0EBA:  MOVLW  0A
0EBB:  SUBWF  51,W
0EBC:  BTFSS  03.0
0EBD:  GOTO   6C0
0EBE:  MOVLB  00
0EBF:  GOTO   6C3
0EC0:  MOVLW  30
0EC1:  MOVLB  00
0EC2:  GOTO   6C7
0EC3:  MOVLB  11
0EC4:  BCF    52.7
0EC5:  MOVF   52,W
0EC6:  MOVLB  00
0EC7:  MOVLB  11
0EC8:  ADDWF  51,F
0EC9:  MOVF   51,W
0ECA:  MOVLB  12
0ECB:  MOVWF  25
0ECC:  MOVLP  00
0ECD:  MOVLB  00
0ECE:  CALL   6F5
0ECF:  MOVLP  08
0ED0:  RETURN
*
0EF5:  MOVF   78,W
0EF6:  MOVLB  11
0EF7:  MOVF   3A,W
0EF8:  MOVWF  54
0EF9:  MOVLW  64
0EFA:  MOVWF  55
0EFB:  MOVLB  00
0EFC:  CALL   42A
0EFD:  MOVF   77,W
0EFE:  MOVLB  11
0EFF:  MOVWF  3A
0F00:  MOVF   78,W
0F01:  MOVLW  30
0F02:  BTFSC  03.2
0F03:  GOTO   706
0F04:  MOVLB  00
0F05:  GOTO   712
0F06:  BTFSC  3B.1
0F07:  GOTO   70A
0F08:  MOVLB  00
0F09:  GOTO   71F
0F0A:  BTFSS  3B.3
0F0B:  GOTO   70E
0F0C:  MOVLB  00
0F0D:  GOTO   71F
0F0E:  BTFSC  3B.4
0F0F:  MOVLW  20
0F10:  MOVLB  00
0F11:  GOTO   717
0F12:  MOVLB  11
0F13:  BCF    3B.3
0F14:  BCF    3B.4
0F15:  BSF    3B.0
0F16:  MOVLB  00
0F17:  ADDWF  78,F
0F18:  MOVF   78,W
0F19:  MOVLB  12
0F1A:  MOVWF  25
0F1B:  MOVLP  00
0F1C:  MOVLB  00
0F1D:  CALL   6F5
0F1E:  MOVLP  08
0F1F:  MOVLB  11
0F20:  MOVF   3A,W
0F21:  MOVWF  54
0F22:  MOVLW  0A
0F23:  MOVWF  55
0F24:  MOVLB  00
0F25:  CALL   42A
0F26:  MOVF   77,W
0F27:  MOVLB  11
0F28:  MOVWF  3A
0F29:  MOVF   78,W
0F2A:  MOVLW  30
0F2B:  BTFSC  03.2
0F2C:  GOTO   72F
0F2D:  MOVLB  00
0F2E:  GOTO   73A
0F2F:  BTFSS  3B.3
0F30:  GOTO   733
0F31:  MOVLB  00
0F32:  GOTO   742
0F33:  BTFSC  3B.0
0F34:  GOTO   737
0F35:  MOVLB  00
0F36:  GOTO   742
0F37:  BTFSC  3B.4
0F38:  MOVLW  20
0F39:  MOVLB  00
0F3A:  ADDWF  78,F
0F3B:  MOVF   78,W
0F3C:  MOVLB  12
0F3D:  MOVWF  25
0F3E:  MOVLP  00
0F3F:  MOVLB  00
0F40:  CALL   6F5
0F41:  MOVLP  08
0F42:  MOVLW  30
0F43:  MOVLB  11
0F44:  ADDWF  3A,F
0F45:  MOVF   3A,W
0F46:  MOVLB  12
0F47:  MOVWF  25
0F48:  MOVLP  00
0F49:  MOVLB  00
0F4A:  CALL   6F5
0F4B:  MOVLP  08
0F4C:  RETURN
*
0F5E:  MOVF   78,W
0F5F:  BTFSC  03.2
0F60:  GOTO   765
0F61:  MOVF   77,W
0F62:  MOVWI  W,[FSR0++]
0F63:  DECFSZ 78,F
0F64:  GOTO   761
*
13A7:  CLRF   77
13A8:  CLRF   78
13A9:  MOVLB  11
13AA:  MOVF   31,W
13AB:  BCF    03.0
13AC:  BTFSC  32.0
13AD:  ADDWF  77,F
13AE:  RRF    77,F
13AF:  RRF    78,F
13B0:  BTFSC  32.1
13B1:  ADDWF  77,F
13B2:  RRF    77,F
13B3:  RRF    78,F
13B4:  BTFSC  32.2
13B5:  ADDWF  77,F
13B6:  RRF    77,F
13B7:  RRF    78,F
13B8:  BTFSC  32.3
13B9:  ADDWF  77,F
13BA:  RRF    77,F
13BB:  RRF    78,F
13BC:  BTFSC  32.4
13BD:  ADDWF  77,F
13BE:  RRF    77,F
13BF:  RRF    78,F
13C0:  BTFSC  32.5
13C1:  ADDWF  77,F
13C2:  RRF    77,F
13C3:  RRF    78,F
13C4:  BTFSC  32.6
13C5:  ADDWF  77,F
13C6:  RRF    77,F
13C7:  RRF    78,F
13C8:  BTFSC  32.7
13C9:  ADDWF  77,F
13CA:  RRF    77,F
13CB:  RRF    78,F
13CC:  MOVLB  00
13CD:  RETURN
*
292F:  MOVF   04,W
2930:  MOVLB  11
2931:  MOVWF  40
2932:  BTFSC  3D.7
2933:  GOTO   136
2934:  MOVLB  00
2935:  GOTO   144
2936:  DECF   40,F
2937:  BSF    40.5
2938:  COMF   3A,F
2939:  COMF   3B,F
293A:  COMF   3C,F
293B:  COMF   3D,F
293C:  INCF   3A,F
293D:  BTFSC  03.2
293E:  INCF   3B,F
293F:  BTFSC  03.2
2940:  INCF   3C,F
2941:  BTFSC  03.2
2942:  INCF   3D,F
2943:  MOVLB  00
2944:  MOVLW  3B
2945:  MOVLB  11
2946:  MOVWF  47
2947:  MOVLW  9A
2948:  MOVWF  46
2949:  MOVLW  CA
294A:  MOVWF  45
294B:  CLRF   44
294C:  MOVLW  0A
294D:  MOVWF  42
294E:  MOVLB  00
294F:  BSF    03.1
2950:  MOVLW  25
2951:  MOVWF  05
2952:  MOVLW  6A
2953:  MOVWF  04
2954:  MOVLB  11
2955:  MOVF   3D,W
2956:  MOVWF  63
2957:  MOVF   3C,W
2958:  MOVWF  62
2959:  MOVF   3B,W
295A:  MOVWF  61
295B:  MOVF   3A,W
295C:  MOVWF  60
295D:  MOVF   47,W
295E:  MOVWF  67
295F:  MOVF   46,W
2960:  MOVWF  66
2961:  MOVF   45,W
2962:  MOVWF  65
2963:  MOVF   44,W
2964:  MOVWF  64
2965:  MOVLP  08
2966:  MOVLB  00
2967:  CALL   347
2968:  MOVLP  28
2969:  MOVF   78,W
296A:  MOVF   77,F
296B:  BTFSS  03.2
296C:  GOTO   190
296D:  MOVLB  11
296E:  MOVF   42,W
296F:  XORLW  01
2970:  BTFSS  03.2
2971:  GOTO   174
2972:  MOVLB  00
2973:  GOTO   190
2974:  MOVF   40,W
2975:  BTFSS  03.2
2976:  GOTO   179
2977:  MOVLB  00
2978:  GOTO   194
2979:  ANDLW  0F
297A:  SUBWF  42,W
297B:  BTFSS  03.2
297C:  GOTO   17F
297D:  MOVLB  00
297E:  GOTO   184
297F:  BTFSS  03.0
2980:  GOTO   183
2981:  MOVLB  00
2982:  GOTO   1C6
2983:  MOVLB  00
2984:  MOVLB  11
2985:  BTFSS  40.7
2986:  GOTO   189
2987:  MOVLB  00
2988:  GOTO   1C6
2989:  BTFSS  40.6
298A:  GOTO   18D
298B:  MOVLB  00
298C:  GOTO   194
298D:  MOVLW  20
298E:  MOVLB  00
298F:  GOTO   1BE
2990:  MOVLW  20
2991:  MOVLB  11
2992:  ANDWF  40,F
2993:  MOVLB  00
2994:  MOVLB  11
2995:  BTFSC  40.5
2996:  GOTO   199
2997:  MOVLB  00
2998:  GOTO   1A8
2999:  BCF    40.5
299A:  MOVF   77,W
299B:  MOVWF  40
299C:  MOVLW  2D
299D:  MOVLB  12
299E:  MOVWF  25
299F:  MOVLP  00
29A0:  MOVLB  00
29A1:  CALL   6F5
29A2:  MOVLP  28
29A3:  MOVLB  11
29A4:  MOVF   40,W
29A5:  MOVWF  77
29A6:  CLRF   40
29A7:  MOVLB  00
29A8:  MOVLW  30
29A9:  MOVLB  11
29AA:  BTFSC  40.5
29AB:  GOTO   1AE
29AC:  MOVLB  00
29AD:  GOTO   1BE
29AE:  BCF    40.5
29AF:  MOVF   77,W
29B0:  MOVWF  40
29B1:  MOVLW  2D
29B2:  MOVLB  12
29B3:  MOVWF  25
29B4:  MOVLP  00
29B5:  MOVLB  00
29B6:  CALL   6F5
29B7:  MOVLP  28
29B8:  MOVLB  11
29B9:  MOVF   40,W
29BA:  MOVWF  77
29BB:  CLRF   40
29BC:  MOVLW  30
29BD:  MOVLB  00
29BE:  ADDWF  77,F
29BF:  MOVF   77,W
29C0:  MOVLB  12
29C1:  MOVWF  25
29C2:  MOVLP  00
29C3:  MOVLB  00
29C4:  CALL   6F5
29C5:  MOVLP  28
29C6:  BCF    03.1
29C7:  MOVLB  11
29C8:  MOVF   47,W
29C9:  MOVWF  63
29CA:  MOVF   46,W
29CB:  MOVWF  62
29CC:  MOVF   45,W
29CD:  MOVWF  61
29CE:  MOVF   44,W
29CF:  MOVWF  60
29D0:  CLRF   67
29D1:  CLRF   66
29D2:  CLRF   65
29D3:  MOVLW  0A
29D4:  MOVWF  64
29D5:  MOVLP  08
29D6:  MOVLB  00
29D7:  CALL   347
29D8:  MOVLP  28
29D9:  MOVF   7A,W
29DA:  MOVLB  11
29DB:  MOVWF  47
29DC:  MOVF   79,W
29DD:  MOVWF  46
29DE:  MOVF   78,W
29DF:  MOVWF  45
29E0:  MOVF   77,W
29E1:  MOVWF  44
29E2:  DECFSZ 42,F
29E3:  GOTO   1E6
29E4:  GOTO   1E8
29E5:  MOVLB  00
29E6:  MOVLB  00
29E7:  GOTO   14F
29E8:  MOVLB  00
.................... 
.................... #list
.................... 
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
*
17E0:  MOVLW  25
17E1:  MOVWF  05
17E2:  MOVLW  9B
17E3:  MOVWF  04
17E4:  MOVF   00,W
17E5:  BTFSC  03.2
17E6:  GOTO   7F5
17E7:  MOVLW  05
17E8:  MOVWF  78
17E9:  CLRF   77
17EA:  DECFSZ 77,F
17EB:  GOTO   7EA
17EC:  DECFSZ 78,F
17ED:  GOTO   7E9
17EE:  MOVLW  2E
17EF:  MOVWF  77
17F0:  DECFSZ 77,F
17F1:  GOTO   7F0
17F2:  GOTO   7F3
17F3:  DECFSZ 00,F
17F4:  GOTO   7E7
17F5:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
135E:  BTFSS  11.4
135F:  GOTO   35E
1360:  MOVLB  03
1361:  MOVWF  1A
1362:  MOVLB  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
06F5:  MOVLB  01
06F6:  BCF    0D.4
06F7:  MOVLB  02
06F8:  BCF    0D.4
06F9:  MOVLW  08
06FA:  MOVWF  78
06FB:  MOVLB  00
06FC:  GOTO   6FD
06FD:  NOP
06FE:  BSF    78.7
06FF:  GOTO   713
0700:  BCF    78.7
0701:  MOVLB  12
0702:  RRF    25,F
0703:  MOVLB  02
0704:  BTFSC  03.0
0705:  BSF    0D.4
0706:  BTFSS  03.0
0707:  BCF    0D.4
0708:  MOVLB  00
0709:  BSF    78.6
070A:  GOTO   713
070B:  BCF    78.6
070C:  DECFSZ 78,F
070D:  GOTO   701
070E:  GOTO   70F
070F:  NOP
0710:  MOVLB  02
0711:  BSF    0D.4
0712:  MOVLB  00
0713:  MOVLW  84
0714:  MOVWF  04
0715:  DECFSZ 04,F
0716:  GOTO   715
0717:  NOP
0718:  BTFSC  78.7
0719:  GOTO   700
071A:  BTFSC  78.6
071B:  GOTO   70B
071C:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
0800:  MOVLB  04
0801:  MOVF   11,W
0802:  MOVLB  12
0803:  MOVF   3E,W
0804:  MOVLB  04
0805:  MOVWF  11
0806:  MOVLB  00
0807:  MOVLB  04
0808:  RRF    14,W
0809:  BTFSC  03.0
080A:  GOTO   00D
080B:  MOVLB  00
080C:  GOTO   007
080D:  MOVF   11,W
080E:  MOVWF  77
080F:  MOVLB  00
0810:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
0811:  MOVLB  04
0812:  MOVF   11,W
0813:  MOVLB  12
0814:  MOVF   3E,W
0815:  MOVLB  04
0816:  MOVWF  11
0817:  MOVLB  00
0818:  MOVLB  04
0819:  RRF    14,W
081A:  BTFSC  03.0
081B:  GOTO   01E
081C:  MOVLB  00
081D:  GOTO   018
081E:  MOVF   11,W
081F:  MOVWF  77
0820:  MOVLB  00
0821:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... volatile unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER0
.................... static void TIMER0_isr(void)
.................... {
....................    // every 0.01 sec interrupts
....................    set_timer0(100);
*
0047:  MOVLW  64
0048:  MOVWF  15
.................... 
....................    if (++subsec >= 100)
0049:  MOVLW  01
004A:  ADDWF  2D,F
004B:  BTFSC  03.0
004C:  INCF   2E,F
004D:  BTFSC  03.2
004E:  INCF   2F,F
004F:  BTFSC  03.2
0050:  INCF   30,F
0051:  MOVF   30,F
0052:  BTFSS  03.2
0053:  GOTO   05E
0054:  MOVF   2F,F
0055:  BTFSS  03.2
0056:  GOTO   05E
0057:  MOVF   2E,F
0058:  BTFSS  03.2
0059:  GOTO   05E
005A:  MOVF   2D,W
005B:  SUBLW  63
005C:  BTFSC  03.0
005D:  GOTO   082
....................    {
....................       subsec = 0;
005E:  CLRF   30
005F:  CLRF   2F
0060:  CLRF   2E
0061:  CLRF   2D
....................       sec++;
0062:  MOVLW  01
0063:  ADDWF  31,F
0064:  BTFSC  03.0
0065:  INCF   32,F
0066:  BTFSC  03.2
0067:  INCF   33,F
0068:  BTFSC  03.2
0069:  INCF   34,F
.................... 
....................       if (sec >= SEC_IN_A_DAY)
006A:  MOVF   34,F
006B:  BTFSS  03.2
006C:  GOTO   07F
006D:  MOVF   33,W
006E:  SUBLW  00
006F:  BTFSC  03.0
0070:  GOTO   082
0071:  XORLW  FF
0072:  BTFSS  03.2
0073:  GOTO   07F
0074:  MOVF   32,W
0075:  SUBLW  50
0076:  BTFSC  03.0
0077:  GOTO   082
0078:  XORLW  FF
0079:  BTFSS  03.2
007A:  GOTO   07F
007B:  MOVF   31,W
007C:  SUBLW  7F
007D:  BTFSC  03.0
007E:  GOTO   082
....................       {
....................          day++;
007F:  INCF   35,F
0080:  BTFSC  03.2
0081:  INCF   36,F
....................       }
....................    }
0082:  BCF    0B.2
0083:  MOVLP  00
0084:  GOTO   02A
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    setup_timer_0(T0_INTERNAL | T0_DIV_256 | RTCC_8_BIT);
*
07C3:  MOVLB  01
07C4:  MOVF   15,W
07C5:  ANDLW  C0
07C6:  IORLW  07
07C7:  MOVWF  15
....................    enable_interrupts(INT_TIMER1);
07C8:  BSF    11.0
07C9:  MOVLB  00
07CA:  MOVLP  30
07CB:  GOTO   519 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... 
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
0085:  GOTO   086
0086:  GOTO   089
0087:  BTFSS  28.0
0088:  GOTO   09C
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0089:  MOVF   57,W
008A:  SUBLW  1F
008B:  BTFSS  03.0
008C:  GOTO   09C
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
008D:  MOVF   57,W
008E:  INCF   57,F
008F:  ANDLW  1F
0090:  ADDLW  17
0091:  MOVWF  04
0092:  MOVLW  20
0093:  MOVWF  05
0094:  BTFSC  03.0
0095:  INCF   05,F
0096:  BTFSS  11.5
0097:  GOTO   096
0098:  MOVLB  03
0099:  MOVF   19,W
009A:  MOVWF  00
009B:  MOVLB  00
009C:  BCF    11.5
009D:  MOVLP  00
009E:  GOTO   02A
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
07AF:  MOVLW  9F
07B0:  MOVLB  03
07B1:  MOVWF  11
07B2:  MOVLW  00
07B3:  MOVWF  12
07B4:  MOVLB  00
07B5:  CALL   71D
....................    enable_interrupts(INT_RDA);
07B6:  MOVLB  01
07B7:  BSF    11.5
....................    enable_interrupts(global);
07B8:  MOVLW  C0
07B9:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
07BA:  MOVLW  A8
07BB:  MOVLB  03
07BC:  MOVWF  11
07BD:  MOVLW  00
07BE:  MOVWF  12
07BF:  MOVLB  00
07C0:  CALL   71D
07C1:  MOVLP  30
07C2:  GOTO   516 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0F4D:  MOVLB  0F
0F4E:  MOVF   5B,W
0F4F:  MOVWF  7A
0F50:  MOVF   5A,W
0F51:  MOVWF  04
0F52:  MOVF   7A,W
0F53:  MOVWF  05
0F54:  MOVF   00,W
0F55:  MOVWF  5C
0F56:  MOVF   59,W
0F57:  MOVWF  05
0F58:  MOVF   58,W
0F59:  MOVWF  04
0F5A:  CLRF   77
0F5B:  MOVF   5C,W
0F5C:  MOVWF  78
0F5D:  MOVLB  00
....................    *receive_signal_size = 0;
*
0F65:  MOVLB  0F
0F66:  MOVF   5B,W
0F67:  MOVWF  7A
0F68:  MOVF   5A,W
0F69:  MOVWF  04
0F6A:  MOVF   7A,W
0F6B:  MOVWF  05
0F6C:  CLRF   00
0F6D:  MOVLB  00
0F6E:  MOVLP  30
0F6F:  GOTO   615 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... /*
.................... 
.................... // Packet format
.................... #define PACKET_SIZE 64
.................... #define CHECKSUM
.................... //volatile unsigned int8 PACKET_DATA[MISSION_DATA_SIZE] = {0x00};
.................... */
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer[DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8 cigs_data[DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8 cigs_data_header[HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... unsigned int32 current;
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8 function;
....................         unsigned int8 parameter;
....................     };
....................     unsigned int8 bytes[6];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... 
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... #define PICLOG_PACKET_SIZE = 60 // PICLOGのパケットサイズ
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8 function;
....................         unsigned int8 parameter;
....................     };
....................     unsigned int8 bytes[6];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... 
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... #define PICLOG_PACKET_SIZE = 60 // PICLOGのパケットサイズ
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... volatile unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
.................... {
....................     PICLOG piclog_data;
....................     piclog_data.time = get_current_sec();
....................     piclog_data.function = function;
....................     piclog_data.parameter = parameter;
....................     /*
....................     // フラッシュ書き込み
....................     piclog_write(piclog_data.bytes);
....................     fprintf(PC, "PICLOG data written: Function %d, Parameter %d\r\n", function, parameter);
....................     piclog_data_counter += sizeof(PICLOG);
....................     if (piclog_data_counter >= PICLOG_PACKET_SIZE)
....................     {
....................         spi_xfer_write(SMF_CS, piclog_data.bytes, sizeof(PICLOG)); // SPIでフラッシュに書き込み
....................         //unsigned int8 crc = calc_crc8(piclog_data.bytes, sizeof(PICLOG) - 1); // CRC計算
....................         piclog_data_counter = 0; // リセット
....................     }
....................     */
.................... }
.................... 
.................... void piclog_write(unsigned int8 *data)
.................... {
....................     /*
....................     if (flash_isconnect(SMF_STREM))
....................     {
....................         fprintf(PC, "PICLOG data write\r\n");
....................         unsigned int8 data[sizeof(PICLOG)];
....................         //flash_write(ADDRESS_PICLOG_START, *piclog_data[bytes],8); // フラッシュに書き込み
....................     }
....................     else
....................     {
....................         fprintf(PC, "Flash is not connected\r\n");
....................         return;
....................     }
....................     */
.................... }
....................     
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
076D:  MOVLW  AE
076E:  MOVLB  03
076F:  MOVWF  11
0770:  MOVLW  00
0771:  MOVWF  12
0772:  MOVLB  00
0773:  CALL   71D
....................     output_low(CONNECT_CIGS);
0774:  MOVLB  01
0775:  BCF    0E.0
0776:  MOVLB  02
0777:  BCF    0E.0
....................     output_low(EN_NPWR);
0778:  MOVLB  01
0779:  BCF    0E.3
077A:  MOVLB  02
077B:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
077C:  MOVLW  B6
077D:  MOVLB  03
077E:  MOVWF  11
077F:  MOVLW  00
0780:  MOVWF  12
0781:  MOVLB  00
0782:  CALL   71D
0783:  MOVLP  30
0784:  GOTO   510 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
0785:  MOVLW  BC
0786:  MOVLB  03
0787:  MOVWF  11
0788:  MOVLW  00
0789:  MOVWF  12
078A:  MOVLB  00
078B:  CALL   71D
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
078C:  MOVLW  78
078D:  MOVLB  01
078E:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
078F:  BCF    1E.0
0790:  BCF    1E.1
0791:  BCF    1E.2
0792:  MOVLW  00
0793:  MOVLB  03
0794:  MOVWF  0C
0795:  MOVLW  00
0796:  MOVWF  10
0797:  MOVLW  00
0798:  MOVWF  0D
0799:  MOVLW  EB
079A:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
079B:  MOVLB  01
079C:  BCF    1E.4
079D:  BSF    1E.5
079E:  BSF    1E.6
079F:  BCF    1E.7
07A0:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_FVR);                                        //DAC output at pin DAC output1 from 0-VDD volts  
07A1:  MOVLW  98
07A2:  MOVLB  02
07A3:  MOVWF  18
....................    dac_write(50);                                                               
07A4:  MOVLW  32
07A5:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
07A6:  MOVLW  C5
07A7:  MOVLB  03
07A8:  MOVWF  11
07A9:  MOVLW  00
07AA:  MOVWF  12
07AB:  MOVLB  00
07AC:  CALL   71D
07AD:  MOVLP  30
07AE:  GOTO   513 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     set_adc_channel(TEMP_BOT);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_us(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
....................         
....................         set_adc_channel(CIGS_CURR);
....................         current = 0; // reset current value
....................         for(int k=0; k<10; k++)
....................         {
....................                                             //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + read_adc(ADC_START_AND_READ);
....................         }    
....................         
....................         current = current / 10; // average the current value
.................... 
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2+1] = current; // store the current value in the buffer
....................         //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
....................     // read PD value
....................     set_adc_channel(PD);
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     convert_cigs_data(measurement_step);
....................     //convert_header_data();    
....................     output_low(CONNECT_CIGS);
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
155A:  MOVLW  E2
155B:  MOVLB  03
155C:  MOVWF  11
155D:  MOVLW  00
155E:  MOVWF  12
155F:  MOVLP  00
1560:  MOVLB  00
1561:  CALL   71D
1562:  MOVLP  10
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
1563:  MOVLB  0F
1564:  CLRF   69
1565:  MOVLB  00
1566:  MOVLB  0F
1567:  MOVF   68,W
1568:  SUBWF  69,W
1569:  BTFSS  03.0
156A:  GOTO   56D
156B:  MOVLB  00
156C:  GOTO   6AB
156D:  MOVLB  00
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
156E:  MOVLB  0F
156F:  MOVF   69,W
1570:  MOVLB  11
1571:  MOVWF  31
1572:  MOVLW  03
1573:  MOVWF  32
1574:  MOVLB  00
1575:  CALL   3A7
1576:  MOVLW  92
1577:  ADDWF  78,W
1578:  MOVWF  78
1579:  MOVLW  22
157A:  MOVWF  7A
157B:  BTFSC  03.0
157C:  INCF   7A,F
157D:  MOVF   78,W
157E:  MOVLB  0F
157F:  MOVWF  6A
1580:  MOVF   7A,W
1581:  MOVWF  6B
1582:  BCF    03.0
1583:  RLF    69,W
1584:  CLRF   7A
1585:  MOVWF  79
1586:  BCF    03.0
1587:  RLF    79,F
1588:  RLF    7A,F
1589:  MOVF   79,W
158A:  ADDLW  3A
158B:  MOVWF  04
158C:  MOVLW  20
158D:  ADDWFC 7A,W
158E:  MOVWF  05
158F:  MOVF   00,W
1590:  MOVWF  6C
1591:  ADDFSR 01,FSR0
1592:  MOVF   00,W
1593:  MOVWF  6D
1594:  ADDFSR 3F,FSR0
1595:  RRF    6D,F
1596:  RRF    6C,F
1597:  RRF    6D,F
1598:  RRF    6C,F
1599:  RRF    6D,F
159A:  RRF    6C,F
159B:  RRF    6D,F
159C:  RRF    6C,F
159D:  MOVLW  0F
159E:  ANDWF  6D,F
159F:  MOVF   6C,W
15A0:  MOVWF  77
15A1:  CLRF   7A
15A2:  MOVF   77,W
15A3:  MOVWF  6C
15A4:  MOVF   7A,W
15A5:  MOVWF  6D
15A6:  MOVF   6B,W
15A7:  MOVWF  05
15A8:  MOVF   6A,W
15A9:  MOVWF  04
15AA:  MOVF   6C,W
15AB:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
15AC:  MOVF   69,W
15AD:  MOVLB  11
15AE:  MOVWF  31
15AF:  MOVLW  03
15B0:  MOVWF  32
15B1:  MOVLB  00
15B2:  CALL   3A7
15B3:  MOVLW  92
15B4:  ADDWF  78,W
15B5:  MOVWF  04
15B6:  MOVLW  22
15B7:  MOVWF  05
15B8:  BTFSC  03.0
15B9:  INCF   05,F
15BA:  MOVF   00,W
15BB:  MOVLB  0F
15BC:  MOVWF  6A
15BD:  MOVF   6A,W
15BE:  MOVLB  11
15BF:  MOVWF  51
15C0:  MOVLW  37
15C1:  MOVWF  52
15C2:  MOVLP  08
15C3:  MOVLB  00
15C4:  CALL   699
15C5:  MOVLP  10
15C6:  MOVLW  20
15C7:  MOVLB  12
15C8:  MOVWF  25
15C9:  MOVLP  00
15CA:  MOVLB  00
15CB:  CALL   6F5
15CC:  MOVLP  10
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
15CD:  MOVLB  0F
15CE:  MOVF   69,W
15CF:  MOVLB  11
15D0:  MOVWF  31
15D1:  MOVLW  03
15D2:  MOVWF  32
15D3:  MOVLB  00
15D4:  CALL   3A7
15D5:  MOVLW  01
15D6:  ADDWF  78,W
15D7:  ADDLW  92
15D8:  MOVWF  78
15D9:  MOVLW  22
15DA:  MOVWF  7A
15DB:  BTFSC  03.0
15DC:  INCF   7A,F
15DD:  MOVF   78,W
15DE:  MOVLB  0F
15DF:  MOVWF  6A
15E0:  MOVF   7A,W
15E1:  MOVWF  6B
15E2:  BCF    03.0
15E3:  RLF    69,W
15E4:  CLRF   7A
15E5:  MOVWF  79
15E6:  BCF    03.0
15E7:  RLF    79,F
15E8:  RLF    7A,F
15E9:  MOVF   79,W
15EA:  ADDLW  3A
15EB:  MOVWF  04
15EC:  MOVLW  20
15ED:  ADDWFC 7A,W
15EE:  MOVWF  05
15EF:  MOVF   00,W
15F0:  MOVWF  6C
15F1:  ADDFSR 01,FSR0
15F2:  MOVF   00,W
15F3:  MOVWF  6D
15F4:  ADDFSR 3F,FSR0
15F5:  MOVLW  0F
15F6:  ANDWF  6C,F
15F7:  CLRF   6D
15F8:  RLF    6C,F
15F9:  RLF    6D,F
15FA:  RLF    6C,F
15FB:  RLF    6D,F
15FC:  RLF    6C,F
15FD:  RLF    6D,F
15FE:  RLF    6C,F
15FF:  RLF    6D,F
1600:  MOVLW  F0
1601:  ANDWF  6C,F
1602:  BCF    03.0
1603:  RLF    69,W
1604:  ADDLW  01
1605:  CLRF   7A
1606:  MOVWF  79
1607:  BCF    03.0
1608:  RLF    79,F
1609:  RLF    7A,F
160A:  MOVF   79,W
160B:  ADDLW  3A
160C:  MOVWF  04
160D:  MOVLW  20
160E:  ADDWFC 7A,W
160F:  MOVWF  05
1610:  MOVF   00,W
1611:  MOVWF  6E
1612:  ADDFSR 01,FSR0
1613:  MOVF   00,W
1614:  MOVWF  6F
1615:  ADDFSR 3F,FSR0
1616:  MOVF   6F,W
1617:  MOVWF  6E
1618:  CLRF   6F
1619:  MOVF   6E,W
161A:  ANDLW  0F
161B:  MOVWF  77
161C:  CLRF   7A
161D:  MOVF   77,W
161E:  IORWF  6C,W
161F:  MOVWF  77
1620:  MOVF   7A,W
1621:  IORWF  6D,W
1622:  MOVWF  7A
1623:  MOVF   77,W
1624:  MOVWF  6C
1625:  MOVF   7A,W
1626:  MOVWF  6D
1627:  MOVF   6B,W
1628:  MOVWF  05
1629:  MOVF   6A,W
162A:  MOVWF  04
162B:  MOVF   6C,W
162C:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
162D:  MOVF   69,W
162E:  MOVLB  11
162F:  MOVWF  31
1630:  MOVLW  03
1631:  MOVWF  32
1632:  MOVLB  00
1633:  CALL   3A7
1634:  MOVLW  01
1635:  ADDWF  78,W
1636:  ADDLW  92
1637:  MOVWF  04
1638:  MOVLW  22
1639:  MOVWF  05
163A:  BTFSC  03.0
163B:  INCF   05,F
163C:  MOVF   00,W
163D:  MOVLB  0F
163E:  MOVWF  6A
163F:  MOVF   6A,W
1640:  MOVLB  11
1641:  MOVWF  51
1642:  MOVLW  37
1643:  MOVWF  52
1644:  MOVLP  08
1645:  MOVLB  00
1646:  CALL   699
1647:  MOVLP  10
1648:  MOVLW  20
1649:  MOVLB  12
164A:  MOVWF  25
164B:  MOVLP  00
164C:  MOVLB  00
164D:  CALL   6F5
164E:  MOVLP  10
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
164F:  MOVLB  0F
1650:  MOVF   69,W
1651:  MOVLB  11
1652:  MOVWF  31
1653:  MOVLW  03
1654:  MOVWF  32
1655:  MOVLB  00
1656:  CALL   3A7
1657:  MOVLW  02
1658:  ADDWF  78,W
1659:  ADDLW  92
165A:  MOVWF  78
165B:  MOVLW  22
165C:  MOVWF  7A
165D:  BTFSC  03.0
165E:  INCF   7A,F
165F:  MOVF   78,W
1660:  MOVLB  0F
1661:  MOVWF  6A
1662:  MOVF   7A,W
1663:  MOVWF  6B
1664:  BCF    03.0
1665:  RLF    69,W
1666:  ADDLW  01
1667:  CLRF   7A
1668:  MOVWF  79
1669:  BCF    03.0
166A:  RLF    79,F
166B:  RLF    7A,F
166C:  MOVF   79,W
166D:  ADDLW  3A
166E:  MOVWF  04
166F:  MOVLW  20
1670:  ADDWFC 7A,W
1671:  MOVWF  05
1672:  MOVF   00,W
1673:  MOVWF  6C
1674:  ADDFSR 01,FSR0
1675:  MOVF   00,W
1676:  MOVWF  6D
1677:  ADDFSR 3F,FSR0
1678:  MOVF   6C,W
1679:  MOVWF  77
167A:  CLRF   7A
167B:  MOVF   77,W
167C:  MOVWF  6C
167D:  MOVF   7A,W
167E:  MOVWF  6D
167F:  MOVF   6B,W
1680:  MOVWF  05
1681:  MOVF   6A,W
1682:  MOVWF  04
1683:  MOVF   6C,W
1684:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
1685:  MOVF   69,W
1686:  MOVLB  11
1687:  MOVWF  31
1688:  MOVLW  03
1689:  MOVWF  32
168A:  MOVLB  00
168B:  CALL   3A7
168C:  MOVLW  02
168D:  ADDWF  78,W
168E:  ADDLW  92
168F:  MOVWF  04
1690:  MOVLW  22
1691:  MOVWF  05
1692:  BTFSC  03.0
1693:  INCF   05,F
1694:  MOVF   00,W
1695:  MOVLB  0F
1696:  MOVWF  6A
1697:  MOVF   6A,W
1698:  MOVLB  11
1699:  MOVWF  51
169A:  MOVLW  37
169B:  MOVWF  52
169C:  MOVLP  08
169D:  MOVLB  00
169E:  CALL   699
169F:  MOVLP  10
16A0:  MOVLW  20
16A1:  MOVLB  12
16A2:  MOVWF  25
16A3:  MOVLP  00
16A4:  MOVLB  00
16A5:  CALL   6F5
16A6:  MOVLP  10
16A7:  MOVLB  0F
16A8:  INCF   69,F
16A9:  MOVLB  00
16AA:  GOTO   566
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
16AB:  MOVLW  0D
16AC:  MOVLB  12
16AD:  MOVWF  25
16AE:  MOVLP  00
16AF:  MOVLB  00
16B0:  CALL   6F5
16B1:  MOVLP  10
16B2:  MOVLW  0A
16B3:  MOVLB  12
16B4:  MOVWF  25
16B5:  MOVLP  00
16B6:  MOVLB  00
16B7:  CALL   6F5
16B8:  MOVLP  10
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
17AA:  MOVLB  0E
17AB:  MOVF   6B,W
17AC:  SUBWF  6A,W
17AD:  BTFSC  03.2
17AE:  GOTO   7B1
17AF:  MOVLB  00
17B0:  GOTO   7C1
17B1:  MOVLB  00
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
17B2:  MOVLW  FA
17B3:  MOVLB  03
17B4:  MOVWF  11
17B5:  MOVLW  00
17B6:  MOVWF  12
17B7:  MOVLP  00
17B8:  MOVLB  00
17B9:  CALL   71D
17BA:  MOVLP  10
....................       return 0x00;
17BB:  MOVLW  00
17BC:  MOVWF  78
17BD:  MOVLW  00
17BE:  MOVWF  79
17BF:  GOTO   7DE
....................    }
17C0:  GOTO   7DE
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
17C1:  MOVLB  0E
17C2:  MOVF   6A,W
17C3:  MOVLB  11
17C4:  MOVWF  30
17C5:  MOVLB  00
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
17C6:  MOVLW  01
17C7:  MOVLB  0E
17C8:  ADDWF  6A,W
17C9:  ANDLW  0F
17CA:  MOVWF  6A
....................       return &smf_queue.smf_data[current_head];
17CB:  MOVLB  11
17CC:  MOVF   30,W
17CD:  MOVWF  31
17CE:  MOVLW  09
17CF:  MOVWF  32
17D0:  MOVLB  00
17D1:  CALL   3A7
17D2:  MOVF   78,W
17D3:  ADDLW  1A
17D4:  MOVWF  78
17D5:  MOVLW  24
17D6:  MOVWF  7A
17D7:  BTFSC  03.0
17D8:  INCF   7A,F
17D9:  MOVF   78,W
17DA:  MOVWF  78
17DB:  MOVF   7A,W
17DC:  MOVWF  79
17DD:  GOTO   7DE
....................    }
17DE:  MOVLP  28
17DF:  GOTO   25D (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0FED:  MOVLB  0E
0FEE:  MOVF   6B,W
0FEF:  SUBWF  6A,W
0FF0:  BTFSS  03.2
0FF1:  GOTO   7F4
0FF2:  MOVLB  00
0FF3:  GOTO   7F7
0FF4:  MOVLB  00
0FF5:  MOVLW  00
0FF6:  GOTO   7F8
0FF7:  MOVLW  01
0FF8:  MOVWF  78
0FF9:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
1800:  MOVLB  11
1801:  CLRF   53
1802:  CLRF   54
1803:  CLRF   55
1804:  CLRF   56
1805:  CLRF   57
1806:  CLRF   58
1807:  CLRF   59
1808:  CLRF   5A
1809:  CLRF   5B
....................    
....................    if (mis_type == APRS_DATA)
180A:  MOVF   52,F
180B:  BTFSC  03.2
180C:  GOTO   00F
180D:  MOVLB  00
180E:  GOTO   023
180F:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02400000;
1810:  MOVLW  02
1811:  MOVLB  11
1812:  MOVWF  56
1813:  MOVLW  40
1814:  MOVWF  55
1815:  CLRF   54
1816:  CLRF   53
....................       mis_struct.end_address     = 0x02500FFF;
1817:  MOVLW  02
1818:  MOVWF  5A
1819:  MOVLW  50
181A:  MOVWF  59
181B:  MOVLW  0F
181C:  MOVWF  58
181D:  MOVLW  FF
181E:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000000;
181F:  MOVLW  80
1820:  MOVWF  5B
1821:  MOVLB  00
....................    }
1822:  GOTO   08B
....................    else if (mis_type == IN_VEHICLE)
1823:  MOVLB  11
1824:  DECFSZ 52,W
1825:  GOTO   028
1826:  GOTO   02A
1827:  MOVLB  00
1828:  MOVLB  00
1829:  GOTO   03F
182A:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02501000;
182B:  MOVLW  02
182C:  MOVLB  11
182D:  MOVWF  56
182E:  MOVLW  50
182F:  MOVWF  55
1830:  MOVLW  10
1831:  MOVWF  54
1832:  CLRF   53
....................       mis_struct.end_address     = 0x02501FFF;
1833:  MOVLW  02
1834:  MOVWF  5A
1835:  MOVLW  50
1836:  MOVWF  59
1837:  MOVLW  1F
1838:  MOVWF  58
1839:  MOVLW  FF
183A:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000001;  
183B:  MOVLW  81
183C:  MOVWF  5B
183D:  MOVLB  00
....................    }
183E:  GOTO   08B
....................    else if (mis_type == ECOSYSTEM_DATA)
183F:  MOVLB  11
1840:  MOVF   52,W
1841:  SUBLW  02
1842:  BTFSC  03.2
1843:  GOTO   046
1844:  MOVLB  00
1845:  GOTO   05B
1846:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02506000;
1847:  MOVLW  02
1848:  MOVLB  11
1849:  MOVWF  56
184A:  MOVLW  50
184B:  MOVWF  55
184C:  MOVLW  60
184D:  MOVWF  54
184E:  CLRF   53
....................       mis_struct.end_address     = 0x02516FFF;
184F:  MOVLW  02
1850:  MOVWF  5A
1851:  MOVLW  51
1852:  MOVWF  59
1853:  MOVLW  6F
1854:  MOVWF  58
1855:  MOVLW  FF
1856:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000011;  
1857:  MOVLW  83
1858:  MOVWF  5B
1859:  MOVLB  00
....................    }
185A:  GOTO   08B
....................    else if (mis_type == APRS_PIC_LOG)
185B:  MOVLB  11
185C:  MOVF   52,W
185D:  SUBLW  03
185E:  BTFSC  03.2
185F:  GOTO   062
1860:  MOVLB  00
1861:  GOTO   077
1862:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02517000;
1863:  MOVLW  02
1864:  MOVLB  11
1865:  MOVWF  56
1866:  MOVLW  51
1867:  MOVWF  55
1868:  MOVLW  70
1869:  MOVWF  54
186A:  CLRF   53
....................       mis_struct.end_address     = 0x02517FFF;
186B:  MOVLW  02
186C:  MOVWF  5A
186D:  MOVLW  51
186E:  MOVWF  59
186F:  MOVLW  7F
1870:  MOVWF  58
1871:  MOVLW  FF
1872:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000100;  
1873:  MOVLW  84
1874:  MOVWF  5B
1875:  MOVLB  00
....................    }
1876:  GOTO   08B
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
1877:  MOVLW  FF
1878:  MOVLB  11
1879:  MOVWF  56
187A:  MOVLW  FF
187B:  MOVWF  55
187C:  MOVLW  FF
187D:  MOVWF  54
187E:  MOVLW  FF
187F:  MOVWF  53
....................       mis_struct.end_address     = 0xFFFFFFFF;
1880:  MOVLW  FF
1881:  MOVWF  5A
1882:  MOVLW  FF
1883:  MOVWF  59
1884:  MOVLW  FF
1885:  MOVWF  58
1886:  MOVLW  FF
1887:  MOVWF  57
....................       mis_struct.mission_flag    = 0b11111111; 
1888:  MOVLW  FF
1889:  MOVWF  5B
188A:  MOVLB  00
....................    }
....................    
....................    return mis_struct;
188B:  MOVLW  D3
188C:  MOVWF  78
188D:  MOVLW  08
188E:  MOVWF  79
188F:  MOVLP  18
1890:  GOTO   1C1 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... #define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... #define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
1D98:  MOVLB  11
1D99:  MOVF   6B,W
1D9A:  XORLW  00
1D9B:  MOVLB  00
1D9C:  BTFSC  03.2
1D9D:  GOTO   5A2
1D9E:  XORLW  01
1D9F:  BTFSC  03.2
1DA0:  GOTO   5D9
1DA1:  GOTO   610
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
1DA2:  MOVLB  12
1DA3:  CLRF   25
1DA4:  CLRF   24
1DA5:  MOVLB  00
1DA6:  MOVLB  12
1DA7:  MOVF   25,W
1DA8:  SUBWF  23,W
1DA9:  BTFSC  03.0
1DAA:  GOTO   5AD
1DAB:  MOVLB  00
1DAC:  GOTO   5D8
1DAD:  MOVLB  00
1DAE:  BTFSS  03.2
1DAF:  GOTO   5B8
1DB0:  MOVLB  12
1DB1:  MOVF   22,W
1DB2:  SUBWF  24,W
1DB3:  BTFSS  03.0
1DB4:  GOTO   5B7
1DB5:  MOVLB  00
1DB6:  GOTO   5D8
1DB7:  MOVLB  00
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
1DB8:  MOVLB  12
1DB9:  MOVF   20,W
1DBA:  ADDWF  24,W
1DBB:  MOVWF  04
1DBC:  MOVF   21,W
1DBD:  ADDWFC 25,W
1DBE:  MOVWF  05
1DBF:  MOVF   00,W
1DC0:  MOVLB  11
1DC1:  MOVWF  6F
1DC2:  MOVLB  04
1DC3:  BCF    15.5
1DC4:  MOVLW  40
1DC5:  MOVWF  14
1DC6:  MOVLW  09
1DC7:  MOVWF  12
1DC8:  MOVLW  2A
1DC9:  MOVWF  15
1DCA:  MOVLB  11
1DCB:  MOVF   6F,W
1DCC:  MOVLB  12
1DCD:  MOVWF  3E
1DCE:  MOVLP  08
1DCF:  MOVLB  00
1DD0:  CALL   000
1DD1:  MOVLP  18
1DD2:  MOVLB  12
1DD3:  INCF   24,F
1DD4:  BTFSC  03.2
1DD5:  INCF   25,F
1DD6:  MOVLB  00
1DD7:  GOTO   5A6
....................          break;
1DD8:  GOTO   611
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
1DD9:  MOVLB  12
1DDA:  CLRF   27
1DDB:  CLRF   26
1DDC:  MOVLB  00
1DDD:  MOVLB  12
1DDE:  MOVF   27,W
1DDF:  SUBWF  23,W
1DE0:  BTFSC  03.0
1DE1:  GOTO   5E4
1DE2:  MOVLB  00
1DE3:  GOTO   60F
1DE4:  MOVLB  00
1DE5:  BTFSS  03.2
1DE6:  GOTO   5EF
1DE7:  MOVLB  12
1DE8:  MOVF   22,W
1DE9:  SUBWF  26,W
1DEA:  BTFSS  03.0
1DEB:  GOTO   5EE
1DEC:  MOVLB  00
1DED:  GOTO   60F
1DEE:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
1DEF:  MOVLB  12
1DF0:  MOVF   20,W
1DF1:  ADDWF  26,W
1DF2:  MOVWF  04
1DF3:  MOVF   21,W
1DF4:  ADDWFC 27,W
1DF5:  MOVWF  05
1DF6:  MOVF   00,W
1DF7:  MOVLB  11
1DF8:  MOVWF  6F
1DF9:  MOVLB  04
1DFA:  BCF    15.5
1DFB:  MOVLW  40
1DFC:  MOVWF  14
1DFD:  MOVLW  09
1DFE:  MOVWF  12
1DFF:  MOVLW  2A
1E00:  MOVWF  15
1E01:  MOVLB  11
1E02:  MOVF   6F,W
1E03:  MOVLB  12
1E04:  MOVWF  3E
1E05:  MOVLP  08
1E06:  MOVLB  00
1E07:  CALL   011
1E08:  MOVLP  18
1E09:  MOVLB  12
1E0A:  INCF   26,F
1E0B:  BTFSC  03.2
1E0C:  INCF   27,F
1E0D:  MOVLB  00
1E0E:  GOTO   5DD
....................          break;
1E0F:  GOTO   611
....................          
....................       default:
....................          break;
1E10:  GOTO   611
....................    }
....................    return;
1E11:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0822:  MOVLB  12
0823:  MOVF   21,W
0824:  XORLW  00
0825:  MOVLB  00
0826:  BTFSC  03.2
0827:  GOTO   02C
0828:  XORLW  01
0829:  BTFSC  03.2
082A:  GOTO   0AD
082B:  GOTO   12E
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
082C:  MOVLB  12
082D:  CLRF   30
082E:  CLRF   2F
082F:  MOVLB  00
0830:  MOVLB  12
0831:  MOVF   30,W
0832:  SUBWF  28,W
0833:  BTFSC  03.0
0834:  GOTO   037
0835:  MOVLB  00
0836:  GOTO   05E
0837:  MOVLB  00
0838:  BTFSS  03.2
0839:  GOTO   042
083A:  MOVLB  12
083B:  MOVF   27,W
083C:  SUBWF  2F,W
083D:  BTFSS  03.0
083E:  GOTO   041
083F:  MOVLB  00
0840:  GOTO   05E
0841:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0842:  MOVLB  12
0843:  MOVF   25,W
0844:  ADDWF  2F,W
0845:  MOVWF  04
0846:  MOVF   26,W
0847:  ADDWFC 30,W
0848:  MOVWF  05
0849:  MOVF   00,W
084A:  MOVWF  3C
084B:  MOVLB  04
084C:  BCF    15.5
084D:  MOVLW  40
084E:  MOVWF  14
084F:  MOVLW  09
0850:  MOVWF  12
0851:  MOVLW  2A
0852:  MOVWF  15
0853:  MOVLB  12
0854:  MOVF   3C,W
0855:  MOVWF  3E
0856:  MOVLB  00
0857:  CALL   000
0858:  MOVLB  12
0859:  INCF   2F,F
085A:  BTFSC  03.2
085B:  INCF   30,F
085C:  MOVLB  00
085D:  GOTO   030
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
085E:  MOVLB  12
085F:  CLRF   34
0860:  CLRF   33
0861:  CLRF   32
0862:  CLRF   31
0863:  MOVLB  00
0864:  MOVLB  12
0865:  MOVF   34,W
0866:  SUBWF  2E,W
0867:  BTFSC  03.0
0868:  GOTO   06B
0869:  MOVLB  00
086A:  GOTO   0AC
086B:  MOVLB  00
086C:  BTFSS  03.2
086D:  GOTO   08A
086E:  MOVLB  12
086F:  MOVF   33,W
0870:  SUBWF  2D,W
0871:  BTFSC  03.0
0872:  GOTO   075
0873:  MOVLB  00
0874:  GOTO   0AC
0875:  MOVLB  00
0876:  BTFSS  03.2
0877:  GOTO   08A
0878:  MOVLB  12
0879:  MOVF   32,W
087A:  SUBWF  2C,W
087B:  BTFSC  03.0
087C:  GOTO   07F
087D:  MOVLB  00
087E:  GOTO   0AC
087F:  MOVLB  00
0880:  BTFSS  03.2
0881:  GOTO   08A
0882:  MOVLB  12
0883:  MOVF   2B,W
0884:  SUBWF  31,W
0885:  BTFSS  03.0
0886:  GOTO   089
0887:  MOVLB  00
0888:  GOTO   0AC
0889:  MOVLB  00
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
088A:  MOVLB  12
088B:  MOVF   29,W
088C:  ADDWF  31,W
088D:  MOVWF  04
088E:  MOVF   2A,W
088F:  ADDWFC 32,W
0890:  MOVWF  05
0891:  MOVLB  04
0892:  BCF    15.5
0893:  MOVLW  40
0894:  MOVWF  14
0895:  MOVLW  09
0896:  MOVWF  12
0897:  MOVLW  2A
0898:  MOVWF  15
0899:  MOVLW  01
089A:  MOVLB  12
089B:  MOVWF  3E
089C:  MOVLB  00
089D:  CALL   000
089E:  MOVF   78,W
089F:  MOVF   77,W
08A0:  MOVWF  00
08A1:  MOVLW  01
08A2:  MOVLB  12
08A3:  ADDWF  31,F
08A4:  BTFSC  03.0
08A5:  INCF   32,F
08A6:  BTFSC  03.2
08A7:  INCF   33,F
08A8:  BTFSC  03.2
08A9:  INCF   34,F
08AA:  MOVLB  00
08AB:  GOTO   064
....................          break;
08AC:  GOTO   12F
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
08AD:  MOVLB  12
08AE:  CLRF   36
08AF:  CLRF   35
08B0:  MOVLB  00
08B1:  MOVLB  12
08B2:  MOVF   36,W
08B3:  SUBWF  28,W
08B4:  BTFSC  03.0
08B5:  GOTO   0B8
08B6:  MOVLB  00
08B7:  GOTO   0DF
08B8:  MOVLB  00
08B9:  BTFSS  03.2
08BA:  GOTO   0C3
08BB:  MOVLB  12
08BC:  MOVF   27,W
08BD:  SUBWF  35,W
08BE:  BTFSS  03.0
08BF:  GOTO   0C2
08C0:  MOVLB  00
08C1:  GOTO   0DF
08C2:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
08C3:  MOVLB  12
08C4:  MOVF   25,W
08C5:  ADDWF  35,W
08C6:  MOVWF  04
08C7:  MOVF   26,W
08C8:  ADDWFC 36,W
08C9:  MOVWF  05
08CA:  MOVF   00,W
08CB:  MOVWF  3C
08CC:  MOVLB  04
08CD:  BCF    15.5
08CE:  MOVLW  40
08CF:  MOVWF  14
08D0:  MOVLW  09
08D1:  MOVWF  12
08D2:  MOVLW  2A
08D3:  MOVWF  15
08D4:  MOVLB  12
08D5:  MOVF   3C,W
08D6:  MOVWF  3E
08D7:  MOVLB  00
08D8:  CALL   011
08D9:  MOVLB  12
08DA:  INCF   35,F
08DB:  BTFSC  03.2
08DC:  INCF   36,F
08DD:  MOVLB  00
08DE:  GOTO   0B1
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
08DF:  MOVLB  12
08E0:  CLRF   3A
08E1:  CLRF   39
08E2:  CLRF   38
08E3:  CLRF   37
08E4:  MOVLB  00
08E5:  MOVLB  12
08E6:  MOVF   3A,W
08E7:  SUBWF  2E,W
08E8:  BTFSC  03.0
08E9:  GOTO   0EC
08EA:  MOVLB  00
08EB:  GOTO   12D
08EC:  MOVLB  00
08ED:  BTFSS  03.2
08EE:  GOTO   10B
08EF:  MOVLB  12
08F0:  MOVF   39,W
08F1:  SUBWF  2D,W
08F2:  BTFSC  03.0
08F3:  GOTO   0F6
08F4:  MOVLB  00
08F5:  GOTO   12D
08F6:  MOVLB  00
08F7:  BTFSS  03.2
08F8:  GOTO   10B
08F9:  MOVLB  12
08FA:  MOVF   38,W
08FB:  SUBWF  2C,W
08FC:  BTFSC  03.0
08FD:  GOTO   100
08FE:  MOVLB  00
08FF:  GOTO   12D
0900:  MOVLB  00
0901:  BTFSS  03.2
0902:  GOTO   10B
0903:  MOVLB  12
0904:  MOVF   2B,W
0905:  SUBWF  37,W
0906:  BTFSS  03.0
0907:  GOTO   10A
0908:  MOVLB  00
0909:  GOTO   12D
090A:  MOVLB  00
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
090B:  MOVLB  12
090C:  MOVF   29,W
090D:  ADDWF  37,W
090E:  MOVWF  04
090F:  MOVF   2A,W
0910:  ADDWFC 38,W
0911:  MOVWF  05
0912:  MOVLB  04
0913:  BCF    15.5
0914:  MOVLW  40
0915:  MOVWF  14
0916:  MOVLW  09
0917:  MOVWF  12
0918:  MOVLW  2A
0919:  MOVWF  15
091A:  MOVLW  02
091B:  MOVLB  12
091C:  MOVWF  3E
091D:  MOVLB  00
091E:  CALL   011
091F:  MOVF   78,W
0920:  MOVF   77,W
0921:  MOVWF  00
0922:  MOVLW  01
0923:  MOVLB  12
0924:  ADDWF  37,F
0925:  BTFSC  03.0
0926:  INCF   38,F
0927:  BTFSC  03.2
0928:  INCF   39,F
0929:  BTFSC  03.2
092A:  INCF   3A,F
092B:  MOVLB  00
092C:  GOTO   0E5
....................          break;
092D:  GOTO   12F
....................    
....................          
....................       default:
....................          break;
092E:  GOTO   12F
....................    }
....................    return;
092F:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
21DA:  MOVLB  11
21DB:  MOVF   6B,W
21DC:  XORLW  00
21DD:  MOVLB  00
21DE:  BTFSC  03.2
21DF:  GOTO   1E4
21E0:  XORLW  01
21E1:  BTFSC  03.2
21E2:  GOTO   241
21E3:  GOTO   29E
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
21E4:  MOVLB  12
21E5:  CLRF   26
21E6:  MOVLB  00
21E7:  MOVLB  11
21E8:  MOVF   6F,W
21E9:  MOVLB  12
21EA:  SUBWF  26,W
21EB:  BTFSS  03.0
21EC:  GOTO   1EF
21ED:  MOVLB  00
21EE:  GOTO   20C
21EF:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
21F0:  MOVLB  12
21F1:  MOVF   26,W
21F2:  ADDWF  20,W
21F3:  MOVWF  04
21F4:  MOVLW  00
21F5:  ADDWFC 21,W
21F6:  MOVWF  05
21F7:  MOVF   00,W
21F8:  MOVWF  2C
21F9:  MOVLB  04
21FA:  BCF    15.5
21FB:  MOVLW  40
21FC:  MOVWF  14
21FD:  MOVLW  09
21FE:  MOVWF  12
21FF:  MOVLW  2A
2200:  MOVWF  15
2201:  MOVLB  12
2202:  MOVF   2C,W
2203:  MOVWF  3E
2204:  MOVLP  08
2205:  MOVLB  00
2206:  CALL   000
2207:  MOVLP  20
2208:  MOVLB  12
2209:  INCF   26,F
220A:  MOVLB  00
220B:  GOTO   1E7
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
220C:  MOVLB  12
220D:  CLRF   28
220E:  CLRF   27
220F:  MOVLB  00
2210:  MOVLB  12
2211:  MOVF   28,W
2212:  SUBWF  25,W
2213:  BTFSC  03.0
2214:  GOTO   217
2215:  MOVLB  00
2216:  GOTO   240
2217:  MOVLB  00
2218:  BTFSS  03.2
2219:  GOTO   222
221A:  MOVLB  12
221B:  MOVF   24,W
221C:  SUBWF  27,W
221D:  BTFSS  03.0
221E:  GOTO   221
221F:  MOVLB  00
2220:  GOTO   240
2221:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
2222:  MOVLB  12
2223:  MOVF   22,W
2224:  ADDWF  27,W
2225:  MOVWF  04
2226:  MOVF   23,W
2227:  ADDWFC 28,W
2228:  MOVWF  05
2229:  MOVF   00,W
222A:  MOVWF  2C
222B:  MOVLB  04
222C:  BCF    15.5
222D:  MOVLW  40
222E:  MOVWF  14
222F:  MOVLW  09
2230:  MOVWF  12
2231:  MOVLW  2A
2232:  MOVWF  15
2233:  MOVLB  12
2234:  MOVF   2C,W
2235:  MOVWF  3E
2236:  MOVLP  08
2237:  MOVLB  00
2238:  CALL   000
2239:  MOVLP  20
223A:  MOVLB  12
223B:  INCF   27,F
223C:  BTFSC  03.2
223D:  INCF   28,F
223E:  MOVLB  00
223F:  GOTO   210
....................          break;
2240:  GOTO   29F
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
2241:  MOVLB  12
2242:  CLRF   29
2243:  MOVLB  00
2244:  MOVLB  11
2245:  MOVF   6F,W
2246:  MOVLB  12
2247:  SUBWF  29,W
2248:  BTFSS  03.0
2249:  GOTO   24C
224A:  MOVLB  00
224B:  GOTO   269
224C:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
224D:  MOVLB  12
224E:  MOVF   29,W
224F:  ADDWF  20,W
2250:  MOVWF  04
2251:  MOVLW  00
2252:  ADDWFC 21,W
2253:  MOVWF  05
2254:  MOVF   00,W
2255:  MOVWF  2C
2256:  MOVLB  04
2257:  BCF    15.5
2258:  MOVLW  40
2259:  MOVWF  14
225A:  MOVLW  09
225B:  MOVWF  12
225C:  MOVLW  2A
225D:  MOVWF  15
225E:  MOVLB  12
225F:  MOVF   2C,W
2260:  MOVWF  3E
2261:  MOVLP  08
2262:  MOVLB  00
2263:  CALL   011
2264:  MOVLP  20
2265:  MOVLB  12
2266:  INCF   29,F
2267:  MOVLB  00
2268:  GOTO   244
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
2269:  MOVLB  12
226A:  CLRF   2B
226B:  CLRF   2A
226C:  MOVLB  00
226D:  MOVLB  12
226E:  MOVF   2B,W
226F:  SUBWF  25,W
2270:  BTFSC  03.0
2271:  GOTO   274
2272:  MOVLB  00
2273:  GOTO   29D
2274:  MOVLB  00
2275:  BTFSS  03.2
2276:  GOTO   27F
2277:  MOVLB  12
2278:  MOVF   24,W
2279:  SUBWF  2A,W
227A:  BTFSS  03.0
227B:  GOTO   27E
227C:  MOVLB  00
227D:  GOTO   29D
227E:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
227F:  MOVLB  12
2280:  MOVF   22,W
2281:  ADDWF  2A,W
2282:  MOVWF  04
2283:  MOVF   23,W
2284:  ADDWFC 2B,W
2285:  MOVWF  05
2286:  MOVF   00,W
2287:  MOVWF  2C
2288:  MOVLB  04
2289:  BCF    15.5
228A:  MOVLW  40
228B:  MOVWF  14
228C:  MOVLW  09
228D:  MOVWF  12
228E:  MOVLW  2A
228F:  MOVWF  15
2290:  MOVLB  12
2291:  MOVF   2C,W
2292:  MOVWF  3E
2293:  MOVLP  08
2294:  MOVLB  00
2295:  CALL   011
2296:  MOVLP  20
2297:  MOVLB  12
2298:  INCF   2A,F
2299:  BTFSC  03.2
229A:  INCF   2B,F
229B:  MOVLB  00
229C:  GOTO   26D
....................          break;
229D:  GOTO   29F
....................          
....................       default:
....................          break;
229E:  GOTO   29F
....................    }
....................    return;
229F:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
1E12:  MOVLW  05
1E13:  MOVLB  11
1E14:  MOVWF  6F
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
1E15:  MOVF   6D,W
1E16:  MOVLB  12
1E17:  MOVWF  21
1E18:  CLRF   22
1E19:  MOVLW  01
1E1A:  MOVWF  24
1E1B:  CLRF   23
1E1C:  MOVLP  00
1E1D:  MOVLB  00
1E1E:  CALL   7D6
1E1F:  MOVLP  18
1E20:  MOVLB  11
1E21:  MOVF   6D,W
1E22:  MOVLB  12
1E23:  MOVWF  21
1E24:  CLRF   22
1E25:  CLRF   24
1E26:  MOVLW  80
1E27:  MOVWF  23
1E28:  MOVLP  00
1E29:  MOVLB  00
1E2A:  CALL   7D6
1E2B:  MOVLP  18
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
1E2C:  MOVLB  11
1E2D:  MOVF   6E,W
1E2E:  MOVLB  12
1E2F:  MOVWF  24
1E30:  MOVLB  11
1E31:  MOVF   6D,W
1E32:  MOVLB  12
1E33:  MOVWF  23
1E34:  MOVLB  11
1E35:  MOVF   6C,W
1E36:  MOVLB  12
1E37:  MOVWF  22
1E38:  MOVLB  11
1E39:  MOVF   6B,W
1E3A:  MOVLB  12
1E3B:  MOVWF  21
1E3C:  MOVLW  25
1E3D:  MOVWF  26
1E3E:  MOVLW  9F
1E3F:  MOVWF  25
1E40:  CLRF   28
1E41:  MOVLW  01
1E42:  MOVWF  27
1E43:  MOVLW  25
1E44:  MOVWF  2A
1E45:  MOVLW  A0
1E46:  MOVWF  29
1E47:  CLRF   2E
1E48:  CLRF   2D
1E49:  CLRF   2C
1E4A:  MOVLW  01
1E4B:  MOVWF  2B
1E4C:  MOVLP  08
1E4D:  MOVLB  00
1E4E:  CALL   022
1E4F:  MOVLP  18
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
1E50:  MOVLB  11
1E51:  MOVF   6D,W
1E52:  MOVLB  12
1E53:  MOVWF  21
1E54:  MOVLW  01
1E55:  MOVWF  22
1E56:  MOVLW  01
1E57:  MOVWF  24
1E58:  CLRF   23
1E59:  MOVLP  00
1E5A:  MOVLB  00
1E5B:  CALL   7D6
1E5C:  MOVLP  18
1E5D:  MOVLB  11
1E5E:  MOVF   6D,W
1E5F:  MOVLB  12
1E60:  MOVWF  21
1E61:  CLRF   22
1E62:  CLRF   24
1E63:  MOVLW  80
1E64:  MOVWF  23
1E65:  MOVLP  00
1E66:  MOVLB  00
1E67:  CALL   7D6
1E68:  MOVLP  18
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
1E69:  MOVLB  12
1E6A:  MOVF   20,W
1E6B:  ANDLW  01
1E6C:  SUBLW  01
1E6D:  BTFSC  03.2
1E6E:  GOTO   671
1E6F:  MOVLB  00
1E70:  GOTO   67B
1E71:  MOVLB  00
....................          fprintf(PC,"flash busy\n\r");
1E72:  MOVLW  07
1E73:  MOVLB  03
1E74:  MOVWF  11
1E75:  MOVLW  01
1E76:  MOVWF  12
1E77:  MOVLP  00
1E78:  MOVLB  00
1E79:  CALL   71D
1E7A:  MOVLP  18
....................    #endif
....................    return status_reg;  
1E7B:  MOVLB  12
1E7C:  MOVF   20,W
1E7D:  MOVWF  78
1E7E:  MOVLB  00
1E7F:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2000:  MOVLB  11
2001:  MOVF   49,F
2002:  BTFSC  03.2
2003:  GOTO   006
2004:  MOVLB  00
2005:  GOTO   0BC
2006:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
2007:  MOVLW  06
2008:  MOVLB  11
2009:  MOVWF  50
200A:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
200B:  MOVLW  20
200C:  MOVLB  11
200D:  MOVWF  51
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
200E:  MOVF   4E,W
200F:  MOVWF  5D
2010:  MOVF   4F,W
2011:  MOVWF  5E
2012:  CLRF   5F
2013:  CLRF   60
2014:  MOVF   5D,W
2015:  MOVWF  77
2016:  CLRF   78
2017:  CLRF   79
2018:  CLRF   7A
2019:  MOVF   77,W
201A:  MOVWF  52
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
201B:  MOVF   4D,W
201C:  MOVWF  5D
201D:  MOVF   4E,W
201E:  MOVWF  5E
201F:  MOVF   4F,W
2020:  MOVWF  5F
2021:  CLRF   60
2022:  MOVF   5D,W
2023:  MOVWF  77
2024:  CLRF   78
2025:  CLRF   79
2026:  CLRF   7A
2027:  MOVF   77,W
2028:  MOVWF  53
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
2029:  MOVF   4C,W
202A:  MOVWF  77
202B:  CLRF   78
202C:  CLRF   79
202D:  CLRF   7A
202E:  MOVF   77,W
202F:  MOVWF  54
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
2030:  MOVF   4A,W
2031:  MOVLB  12
2032:  MOVWF  21
2033:  CLRF   22
2034:  MOVLW  01
2035:  MOVWF  24
2036:  CLRF   23
2037:  MOVLP  00
2038:  MOVLB  00
2039:  CALL   7D6
203A:  MOVLP  20
203B:  MOVLB  11
203C:  MOVF   4A,W
203D:  MOVLB  12
203E:  MOVWF  21
203F:  CLRF   22
2040:  CLRF   24
2041:  MOVLW  80
2042:  MOVWF  23
2043:  MOVLP  00
2044:  MOVLB  00
2045:  CALL   7D6
2046:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
2047:  MOVLB  11
2048:  MOVF   4B,W
2049:  MOVWF  6E
204A:  MOVF   4A,W
204B:  MOVWF  6D
204C:  MOVF   49,W
204D:  MOVWF  6C
204E:  MOVF   48,W
204F:  MOVWF  6B
2050:  MOVLW  25
2051:  MOVLB  12
2052:  MOVWF  21
2053:  MOVLW  80
2054:  MOVWF  20
2055:  CLRF   23
2056:  MOVLW  01
2057:  MOVWF  22
2058:  MOVLP  18
2059:  MOVLB  00
205A:  CALL   598
205B:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
205C:  MOVLB  11
205D:  MOVF   4A,W
205E:  MOVLB  12
205F:  MOVWF  21
2060:  MOVLW  01
2061:  MOVWF  22
2062:  MOVLW  01
2063:  MOVWF  24
2064:  CLRF   23
2065:  MOVLP  00
2066:  MOVLB  00
2067:  CALL   7D6
2068:  MOVLP  20
2069:  MOVLB  11
206A:  MOVF   4A,W
206B:  MOVLB  12
206C:  MOVWF  21
206D:  CLRF   22
206E:  CLRF   24
206F:  MOVLW  80
2070:  MOVWF  23
2071:  MOVLP  00
2072:  MOVLB  00
2073:  CALL   7D6
2074:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
2075:  MOVLB  11
2076:  MOVF   4A,W
2077:  MOVLB  12
2078:  MOVWF  21
2079:  CLRF   22
207A:  MOVLW  01
207B:  MOVWF  24
207C:  CLRF   23
207D:  MOVLP  00
207E:  MOVLB  00
207F:  CALL   7D6
2080:  MOVLP  20
2081:  MOVLB  11
2082:  MOVF   4A,W
2083:  MOVLB  12
2084:  MOVWF  21
2085:  CLRF   22
2086:  CLRF   24
2087:  MOVLW  80
2088:  MOVWF  23
2089:  MOVLP  00
208A:  MOVLB  00
208B:  CALL   7D6
208C:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
208D:  MOVLB  11
208E:  MOVF   4B,W
208F:  MOVWF  6E
2090:  MOVF   4A,W
2091:  MOVWF  6D
2092:  MOVF   49,W
2093:  MOVWF  6C
2094:  MOVF   48,W
2095:  MOVWF  6B
2096:  MOVLW  25
2097:  MOVLB  12
2098:  MOVWF  21
2099:  MOVLW  81
209A:  MOVWF  20
209B:  CLRF   23
209C:  MOVLW  04
209D:  MOVWF  22
209E:  MOVLP  18
209F:  MOVLB  00
20A0:  CALL   598
20A1:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
20A2:  MOVLB  11
20A3:  MOVF   4A,W
20A4:  MOVLB  12
20A5:  MOVWF  21
20A6:  MOVLW  01
20A7:  MOVWF  22
20A8:  MOVLW  01
20A9:  MOVWF  24
20AA:  CLRF   23
20AB:  MOVLP  00
20AC:  MOVLB  00
20AD:  CALL   7D6
20AE:  MOVLP  20
20AF:  MOVLB  11
20B0:  MOVF   4A,W
20B1:  MOVLB  12
20B2:  MOVWF  21
20B3:  CLRF   22
20B4:  CLRF   24
20B5:  MOVLW  80
20B6:  MOVWF  23
20B7:  MOVLP  00
20B8:  MOVLB  00
20B9:  CALL   7D6
20BA:  MOVLP  20
....................    }
20BB:  GOTO   18E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
20BC:  MOVLB  11
20BD:  DECFSZ 49,W
20BE:  GOTO   0C1
20BF:  GOTO   0C3
20C0:  MOVLB  00
20C1:  MOVLB  00
20C2:  GOTO   185
20C3:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
20C4:  MOVLW  06
20C5:  MOVLB  11
20C6:  MOVWF  55
20C7:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
20C8:  MOVLW  21
20C9:  MOVLB  11
20CA:  MOVWF  56
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
20CB:  MOVF   4F,W
20CC:  MOVWF  5D
20CD:  CLRF   5E
20CE:  CLRF   5F
20CF:  CLRF   60
20D0:  MOVF   5D,W
20D1:  MOVWF  77
20D2:  CLRF   78
20D3:  CLRF   79
20D4:  CLRF   7A
20D5:  MOVF   77,W
20D6:  MOVWF  57
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
20D7:  MOVF   4E,W
20D8:  MOVWF  5D
20D9:  MOVF   4F,W
20DA:  MOVWF  5E
20DB:  CLRF   5F
20DC:  CLRF   60
20DD:  MOVF   5D,W
20DE:  MOVWF  77
20DF:  CLRF   78
20E0:  CLRF   79
20E1:  CLRF   7A
20E2:  MOVF   77,W
20E3:  MOVWF  58
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
20E4:  MOVF   4D,W
20E5:  MOVWF  5D
20E6:  MOVF   4E,W
20E7:  MOVWF  5E
20E8:  MOVF   4F,W
20E9:  MOVWF  5F
20EA:  CLRF   60
20EB:  MOVF   5D,W
20EC:  MOVWF  77
20ED:  CLRF   78
20EE:  CLRF   79
20EF:  CLRF   7A
20F0:  MOVF   77,W
20F1:  MOVWF  59
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
20F2:  MOVF   4C,W
20F3:  MOVWF  77
20F4:  CLRF   78
20F5:  CLRF   79
20F6:  CLRF   7A
20F7:  MOVF   77,W
20F8:  MOVWF  5A
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
20F9:  MOVF   4A,W
20FA:  MOVLB  12
20FB:  MOVWF  21
20FC:  CLRF   22
20FD:  MOVLW  01
20FE:  MOVWF  24
20FF:  CLRF   23
2100:  MOVLP  00
2101:  MOVLB  00
2102:  CALL   7D6
2103:  MOVLP  20
2104:  MOVLB  11
2105:  MOVF   4A,W
2106:  MOVLB  12
2107:  MOVWF  21
2108:  CLRF   22
2109:  CLRF   24
210A:  MOVLW  80
210B:  MOVWF  23
210C:  MOVLP  00
210D:  MOVLB  00
210E:  CALL   7D6
210F:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
2110:  MOVLB  11
2111:  MOVF   4B,W
2112:  MOVWF  6E
2113:  MOVF   4A,W
2114:  MOVWF  6D
2115:  MOVF   49,W
2116:  MOVWF  6C
2117:  MOVF   48,W
2118:  MOVWF  6B
2119:  MOVLW  25
211A:  MOVLB  12
211B:  MOVWF  21
211C:  MOVLW  85
211D:  MOVWF  20
211E:  CLRF   23
211F:  MOVLW  01
2120:  MOVWF  22
2121:  MOVLP  18
2122:  MOVLB  00
2123:  CALL   598
2124:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
2125:  MOVLB  11
2126:  MOVF   4A,W
2127:  MOVLB  12
2128:  MOVWF  21
2129:  MOVLW  01
212A:  MOVWF  22
212B:  MOVLW  01
212C:  MOVWF  24
212D:  CLRF   23
212E:  MOVLP  00
212F:  MOVLB  00
2130:  CALL   7D6
2131:  MOVLP  20
2132:  MOVLB  11
2133:  MOVF   4A,W
2134:  MOVLB  12
2135:  MOVWF  21
2136:  CLRF   22
2137:  CLRF   24
2138:  MOVLW  80
2139:  MOVWF  23
213A:  MOVLP  00
213B:  MOVLB  00
213C:  CALL   7D6
213D:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
213E:  MOVLB  11
213F:  MOVF   4A,W
2140:  MOVLB  12
2141:  MOVWF  21
2142:  CLRF   22
2143:  MOVLW  01
2144:  MOVWF  24
2145:  CLRF   23
2146:  MOVLP  00
2147:  MOVLB  00
2148:  CALL   7D6
2149:  MOVLP  20
214A:  MOVLB  11
214B:  MOVF   4A,W
214C:  MOVLB  12
214D:  MOVWF  21
214E:  CLRF   22
214F:  CLRF   24
2150:  MOVLW  80
2151:  MOVWF  23
2152:  MOVLP  00
2153:  MOVLB  00
2154:  CALL   7D6
2155:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
2156:  MOVLB  11
2157:  MOVF   4B,W
2158:  MOVWF  6E
2159:  MOVF   4A,W
215A:  MOVWF  6D
215B:  MOVF   49,W
215C:  MOVWF  6C
215D:  MOVF   48,W
215E:  MOVWF  6B
215F:  MOVLW  25
2160:  MOVLB  12
2161:  MOVWF  21
2162:  MOVLW  86
2163:  MOVWF  20
2164:  CLRF   23
2165:  MOVLW  05
2166:  MOVWF  22
2167:  MOVLP  18
2168:  MOVLB  00
2169:  CALL   598
216A:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
216B:  MOVLB  11
216C:  MOVF   4A,W
216D:  MOVLB  12
216E:  MOVWF  21
216F:  MOVLW  01
2170:  MOVWF  22
2171:  MOVLW  01
2172:  MOVWF  24
2173:  CLRF   23
2174:  MOVLP  00
2175:  MOVLB  00
2176:  CALL   7D6
2177:  MOVLP  20
2178:  MOVLB  11
2179:  MOVF   4A,W
217A:  MOVLB  12
217B:  MOVWF  21
217C:  CLRF   22
217D:  CLRF   24
217E:  MOVLW  80
217F:  MOVWF  23
2180:  MOVLP  00
2181:  MOVLB  00
2182:  CALL   7D6
2183:  MOVLP  20
....................    }
2184:  GOTO   18E
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
2185:  MOVLW  7B
2186:  MOVLB  03
2187:  MOVWF  11
2188:  MOVLW  01
2189:  MOVWF  12
218A:  MOVLP  00
218B:  MOVLB  00
218C:  CALL   71D
218D:  MOVLP  20
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
218E:  MOVLB  11
218F:  CLRF   5B
2190:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
2191:  MOVLB  11
2192:  MOVF   4B,W
2193:  MOVWF  6E
2194:  MOVF   4A,W
2195:  MOVWF  6D
2196:  MOVF   49,W
2197:  MOVWF  6C
2198:  MOVF   48,W
2199:  MOVWF  6B
219A:  MOVLP  18
219B:  MOVLB  00
219C:  CALL   612
219D:  MOVLP  20
219E:  MOVF   78,W
219F:  ANDLW  01
21A0:  SUBLW  01
21A1:  BTFSS  03.2
21A2:  GOTO   1D0
....................       if(timeout_counter > 10)
21A3:  MOVLB  11
21A4:  MOVF   5B,W
21A5:  SUBLW  0A
21A6:  BTFSS  03.0
21A7:  GOTO   1AA
21A8:  MOVLB  00
21A9:  GOTO   1B3
21AA:  MOVLB  00
....................          delay_ms(200);
21AB:  MOVLW  C8
21AC:  MOVLB  11
21AD:  MOVWF  6B
21AE:  MOVLP  10
21AF:  MOVLB  00
21B0:  CALL   7E0
21B1:  MOVLP  20
21B2:  GOTO   1BA
....................       else
....................          delay_ms(10);   
21B3:  MOVLW  0A
21B4:  MOVLB  11
21B5:  MOVWF  6B
21B6:  MOVLP  10
21B7:  MOVLB  00
21B8:  CALL   7E0
21B9:  MOVLP  20
....................       
....................       if(timeout_counter > 100){
21BA:  MOVLB  11
21BB:  MOVF   5B,W
21BC:  SUBLW  64
21BD:  BTFSS  03.0
21BE:  GOTO   1C1
21BF:  MOVLB  00
21C0:  GOTO   1CC
21C1:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
21C2:  MOVLW  8B
21C3:  MOVLB  03
21C4:  MOVWF  11
21C5:  MOVLW  01
21C6:  MOVWF  12
21C7:  MOVLP  00
21C8:  MOVLB  00
21C9:  CALL   71D
21CA:  MOVLP  20
....................          #endif
....................          break;
21CB:  GOTO   1D0
....................       }  
....................       timeout_counter++;
21CC:  MOVLB  11
21CD:  INCF   5B,F
21CE:  MOVLB  00
21CF:  GOTO   191
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
21D0:  MOVLW  93
21D1:  MOVLB  03
21D2:  MOVWF  11
21D3:  MOVLW  01
21D4:  MOVWF  12
21D5:  MOVLP  00
21D6:  MOVLB  00
21D7:  CALL   71D
21D8:  MOVLP  20
....................    #endif
....................    return;
21D9:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1891:  MOVLB  11
1892:  MOVF   50,F
1893:  BTFSC  03.2
1894:  GOTO   097
1895:  MOVLB  00
1896:  GOTO   117
1897:  MOVLB  00
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
1898:  MOVLW  03
1899:  MOVLB  11
189A:  MOVWF  58
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
189B:  MOVF   55,W
189C:  MOVWF  62
189D:  MOVF   56,W
189E:  MOVWF  63
189F:  CLRF   64
18A0:  CLRF   65
18A1:  MOVF   62,W
18A2:  MOVWF  77
18A3:  CLRF   78
18A4:  CLRF   79
18A5:  CLRF   7A
18A6:  MOVF   77,W
18A7:  MOVWF  59
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
18A8:  MOVF   54,W
18A9:  MOVWF  62
18AA:  MOVF   55,W
18AB:  MOVWF  63
18AC:  MOVF   56,W
18AD:  MOVWF  64
18AE:  CLRF   65
18AF:  MOVF   62,W
18B0:  MOVWF  77
18B1:  CLRF   78
18B2:  CLRF   79
18B3:  CLRF   7A
18B4:  MOVF   77,W
18B5:  MOVWF  5A
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
18B6:  MOVF   53,W
18B7:  MOVWF  77
18B8:  CLRF   78
18B9:  CLRF   79
18BA:  CLRF   7A
18BB:  MOVF   77,W
18BC:  MOVWF  5B
....................             
....................       output_low(flash_stream.cs_pin);
18BD:  MOVF   51,W
18BE:  MOVLB  12
18BF:  MOVWF  21
18C0:  CLRF   22
18C1:  MOVLW  01
18C2:  MOVWF  24
18C3:  CLRF   23
18C4:  MOVLP  00
18C5:  MOVLB  00
18C6:  CALL   7D6
18C7:  MOVLP  18
18C8:  MOVLB  11
18C9:  MOVF   51,W
18CA:  MOVLB  12
18CB:  MOVWF  21
18CC:  CLRF   22
18CD:  CLRF   24
18CE:  MOVLW  80
18CF:  MOVWF  23
18D0:  MOVLP  00
18D1:  MOVLB  00
18D2:  CALL   7D6
18D3:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
18D4:  MOVLB  11
18D5:  MOVF   52,W
18D6:  MOVLB  12
18D7:  MOVWF  24
18D8:  MOVLB  11
18D9:  MOVF   51,W
18DA:  MOVLB  12
18DB:  MOVWF  23
18DC:  MOVLB  11
18DD:  MOVF   50,W
18DE:  MOVLB  12
18DF:  MOVWF  22
18E0:  MOVLB  11
18E1:  MOVF   4F,W
18E2:  MOVLB  12
18E3:  MOVWF  21
18E4:  MOVLW  25
18E5:  MOVWF  26
18E6:  MOVLW  88
18E7:  MOVWF  25
18E8:  CLRF   28
18E9:  MOVLW  04
18EA:  MOVWF  27
18EB:  MOVLW  25
18EC:  MOVWF  2A
18ED:  MOVLW  87
18EE:  MOVWF  29
18EF:  CLRF   2E
18F0:  CLRF   2D
18F1:  CLRF   2C
18F2:  MOVLW  01
18F3:  MOVWF  2B
18F4:  MOVLP  08
18F5:  MOVLB  00
18F6:  CALL   022
18F7:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
18F8:  MOVLW  02
18F9:  MOVWF  77
18FA:  DECFSZ 77,F
18FB:  GOTO   0FA
18FC:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
18FD:  MOVLB  11
18FE:  MOVF   51,W
18FF:  MOVLB  12
1900:  MOVWF  21
1901:  MOVLW  01
1902:  MOVWF  22
1903:  MOVLW  01
1904:  MOVWF  24
1905:  CLRF   23
1906:  MOVLP  00
1907:  MOVLB  00
1908:  CALL   7D6
1909:  MOVLP  18
190A:  MOVLB  11
190B:  MOVF   51,W
190C:  MOVLB  12
190D:  MOVWF  21
190E:  CLRF   22
190F:  CLRF   24
1910:  MOVLW  80
1911:  MOVWF  23
1912:  MOVLP  00
1913:  MOVLB  00
1914:  CALL   7D6
1915:  MOVLP  18
....................    }
1916:  GOTO   1A9
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1917:  MOVLB  11
1918:  DECFSZ 50,W
1919:  GOTO   11C
191A:  GOTO   11E
191B:  MOVLB  00
191C:  MOVLB  00
191D:  GOTO   1A9
191E:  MOVLB  00
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
191F:  MOVLW  13
1920:  MOVLB  11
1921:  MOVWF  5C
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
1922:  MOVF   56,W
1923:  MOVWF  62
1924:  CLRF   63
1925:  CLRF   64
1926:  CLRF   65
1927:  MOVF   62,W
1928:  MOVWF  77
1929:  CLRF   78
192A:  CLRF   79
192B:  CLRF   7A
192C:  MOVF   77,W
192D:  MOVWF  5D
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
192E:  MOVF   55,W
192F:  MOVWF  62
1930:  MOVF   56,W
1931:  MOVWF  63
1932:  CLRF   64
1933:  CLRF   65
1934:  MOVF   62,W
1935:  MOVWF  77
1936:  CLRF   78
1937:  CLRF   79
1938:  CLRF   7A
1939:  MOVF   77,W
193A:  MOVWF  5E
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
193B:  MOVF   54,W
193C:  MOVWF  62
193D:  MOVF   55,W
193E:  MOVWF  63
193F:  MOVF   56,W
1940:  MOVWF  64
1941:  CLRF   65
1942:  MOVF   62,W
1943:  MOVWF  77
1944:  CLRF   78
1945:  CLRF   79
1946:  CLRF   7A
1947:  MOVF   77,W
1948:  MOVWF  5F
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
1949:  MOVF   53,W
194A:  MOVWF  77
194B:  CLRF   78
194C:  CLRF   79
194D:  CLRF   7A
194E:  MOVF   77,W
194F:  MOVWF  60
....................    
....................       output_low(flash_stream.cs_pin);
1950:  MOVF   51,W
1951:  MOVLB  12
1952:  MOVWF  21
1953:  CLRF   22
1954:  MOVLW  01
1955:  MOVWF  24
1956:  CLRF   23
1957:  MOVLP  00
1958:  MOVLB  00
1959:  CALL   7D6
195A:  MOVLP  18
195B:  MOVLB  11
195C:  MOVF   51,W
195D:  MOVLB  12
195E:  MOVWF  21
195F:  CLRF   22
1960:  CLRF   24
1961:  MOVLW  80
1962:  MOVWF  23
1963:  MOVLP  00
1964:  MOVLB  00
1965:  CALL   7D6
1966:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
1967:  MOVLB  11
1968:  MOVF   52,W
1969:  MOVLB  12
196A:  MOVWF  24
196B:  MOVLB  11
196C:  MOVF   51,W
196D:  MOVLB  12
196E:  MOVWF  23
196F:  MOVLB  11
1970:  MOVF   50,W
1971:  MOVLB  12
1972:  MOVWF  22
1973:  MOVLB  11
1974:  MOVF   4F,W
1975:  MOVLB  12
1976:  MOVWF  21
1977:  MOVLW  25
1978:  MOVWF  26
1979:  MOVLW  8C
197A:  MOVWF  25
197B:  CLRF   28
197C:  MOVLW  05
197D:  MOVWF  27
197E:  MOVLW  25
197F:  MOVWF  2A
1980:  MOVLW  87
1981:  MOVWF  29
1982:  CLRF   2E
1983:  CLRF   2D
1984:  CLRF   2C
1985:  MOVLW  01
1986:  MOVWF  2B
1987:  MOVLP  08
1988:  MOVLB  00
1989:  CALL   022
198A:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
198B:  MOVLW  02
198C:  MOVWF  77
198D:  DECFSZ 77,F
198E:  GOTO   18D
198F:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1990:  MOVLB  11
1991:  MOVF   51,W
1992:  MOVLB  12
1993:  MOVWF  21
1994:  MOVLW  01
1995:  MOVWF  22
1996:  MOVLW  01
1997:  MOVWF  24
1998:  CLRF   23
1999:  MOVLP  00
199A:  MOVLB  00
199B:  CALL   7D6
199C:  MOVLP  18
199D:  MOVLB  11
199E:  MOVF   51,W
199F:  MOVLB  12
19A0:  MOVWF  21
19A1:  CLRF   22
19A2:  CLRF   24
19A3:  MOVLW  80
19A4:  MOVWF  23
19A5:  MOVLP  00
19A6:  MOVLB  00
19A7:  CALL   7D6
19A8:  MOVLP  18
....................    }
....................    return read_data;
19A9:  MOVLB  11
19AA:  MOVF   57,W
19AB:  MOVWF  78
19AC:  MOVLB  00
19AD:  MOVLP  18
19AE:  GOTO   488 (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
09B1:  MOVLB  11
09B2:  MOVF   53,F
09B3:  BTFSC  03.2
09B4:  GOTO   1B7
09B5:  MOVLB  00
09B6:  GOTO   244
09B7:  MOVLB  00
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
09B8:  MOVLW  03
09B9:  MOVLB  11
09BA:  MOVWF  60
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
09BB:  MOVF   58,W
09BC:  MOVWF  6C
09BD:  MOVF   59,W
09BE:  MOVWF  6D
09BF:  CLRF   6E
09C0:  CLRF   6F
09C1:  MOVF   6C,W
09C2:  MOVWF  77
09C3:  CLRF   78
09C4:  CLRF   79
09C5:  CLRF   7A
09C6:  MOVF   77,W
09C7:  MOVWF  61
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
09C8:  MOVF   57,W
09C9:  MOVWF  6C
09CA:  MOVF   58,W
09CB:  MOVWF  6D
09CC:  MOVF   59,W
09CD:  MOVWF  6E
09CE:  CLRF   6F
09CF:  MOVF   6C,W
09D0:  MOVWF  77
09D1:  CLRF   78
09D2:  CLRF   79
09D3:  CLRF   7A
09D4:  MOVF   77,W
09D5:  MOVWF  62
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
09D6:  MOVF   56,W
09D7:  MOVWF  77
09D8:  CLRF   78
09D9:  CLRF   79
09DA:  CLRF   7A
09DB:  MOVF   77,W
09DC:  MOVWF  63
....................             
....................       output_low(flash_stream.cs_pin);
09DD:  MOVF   54,W
09DE:  MOVLB  12
09DF:  MOVWF  21
09E0:  CLRF   22
09E1:  MOVLW  01
09E2:  MOVWF  24
09E3:  CLRF   23
09E4:  MOVLP  00
09E5:  MOVLB  00
09E6:  CALL   7D6
09E7:  MOVLP  08
09E8:  MOVLB  11
09E9:  MOVF   54,W
09EA:  MOVLB  12
09EB:  MOVWF  21
09EC:  CLRF   22
09ED:  CLRF   24
09EE:  MOVLW  80
09EF:  MOVWF  23
09F0:  MOVLP  00
09F1:  MOVLB  00
09F2:  CALL   7D6
09F3:  MOVLP  08
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
09F4:  MOVLB  11
09F5:  MOVF   55,W
09F6:  MOVLB  12
09F7:  MOVWF  24
09F8:  MOVLB  11
09F9:  MOVF   54,W
09FA:  MOVLB  12
09FB:  MOVWF  23
09FC:  MOVLB  11
09FD:  MOVF   53,W
09FE:  MOVLB  12
09FF:  MOVWF  22
0A00:  MOVLB  11
0A01:  MOVF   52,W
0A02:  MOVLB  12
0A03:  MOVWF  21
0A04:  MOVLW  25
0A05:  MOVWF  26
0A06:  MOVLW  90
0A07:  MOVWF  25
0A08:  CLRF   28
0A09:  MOVLW  04
0A0A:  MOVWF  27
0A0B:  MOVLB  11
0A0C:  MOVF   5B,W
0A0D:  MOVLB  12
0A0E:  MOVWF  2A
0A0F:  MOVLB  11
0A10:  MOVF   5A,W
0A11:  MOVLB  12
0A12:  MOVWF  29
0A13:  MOVLB  11
0A14:  MOVF   5F,W
0A15:  MOVLB  12
0A16:  MOVWF  2E
0A17:  MOVLB  11
0A18:  MOVF   5E,W
0A19:  MOVLB  12
0A1A:  MOVWF  2D
0A1B:  MOVLB  11
0A1C:  MOVF   5D,W
0A1D:  MOVLB  12
0A1E:  MOVWF  2C
0A1F:  MOVLB  11
0A20:  MOVF   5C,W
0A21:  MOVLB  12
0A22:  MOVWF  2B
0A23:  MOVLB  00
0A24:  CALL   022
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0A25:  MOVLW  02
0A26:  MOVWF  77
0A27:  DECFSZ 77,F
0A28:  GOTO   227
0A29:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0A2A:  MOVLB  11
0A2B:  MOVF   54,W
0A2C:  MOVLB  12
0A2D:  MOVWF  21
0A2E:  MOVLW  01
0A2F:  MOVWF  22
0A30:  MOVLW  01
0A31:  MOVWF  24
0A32:  CLRF   23
0A33:  MOVLP  00
0A34:  MOVLB  00
0A35:  CALL   7D6
0A36:  MOVLP  08
0A37:  MOVLB  11
0A38:  MOVF   54,W
0A39:  MOVLB  12
0A3A:  MOVWF  21
0A3B:  CLRF   22
0A3C:  CLRF   24
0A3D:  MOVLW  80
0A3E:  MOVWF  23
0A3F:  MOVLP  00
0A40:  MOVLB  00
0A41:  CALL   7D6
0A42:  MOVLP  08
....................    }
0A43:  GOTO   2E3
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0A44:  MOVLB  11
0A45:  DECFSZ 53,W
0A46:  GOTO   249
0A47:  GOTO   24B
0A48:  MOVLB  00
0A49:  MOVLB  00
0A4A:  GOTO   2E3
0A4B:  MOVLB  00
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0A4C:  MOVLW  13
0A4D:  MOVLB  11
0A4E:  MOVWF  64
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0A4F:  MOVF   59,W
0A50:  MOVWF  6C
0A51:  CLRF   6D
0A52:  CLRF   6E
0A53:  CLRF   6F
0A54:  MOVF   6C,W
0A55:  MOVWF  77
0A56:  CLRF   78
0A57:  CLRF   79
0A58:  CLRF   7A
0A59:  MOVF   77,W
0A5A:  MOVWF  65
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A5B:  MOVF   58,W
0A5C:  MOVWF  6C
0A5D:  MOVF   59,W
0A5E:  MOVWF  6D
0A5F:  CLRF   6E
0A60:  CLRF   6F
0A61:  MOVF   6C,W
0A62:  MOVWF  77
0A63:  CLRF   78
0A64:  CLRF   79
0A65:  CLRF   7A
0A66:  MOVF   77,W
0A67:  MOVWF  66
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A68:  MOVF   57,W
0A69:  MOVWF  6C
0A6A:  MOVF   58,W
0A6B:  MOVWF  6D
0A6C:  MOVF   59,W
0A6D:  MOVWF  6E
0A6E:  CLRF   6F
0A6F:  MOVF   6C,W
0A70:  MOVWF  77
0A71:  CLRF   78
0A72:  CLRF   79
0A73:  CLRF   7A
0A74:  MOVF   77,W
0A75:  MOVWF  67
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0A76:  MOVF   56,W
0A77:  MOVWF  77
0A78:  CLRF   78
0A79:  CLRF   79
0A7A:  CLRF   7A
0A7B:  MOVF   77,W
0A7C:  MOVWF  68
....................    
....................       output_low(flash_stream.cs_pin);
0A7D:  MOVF   54,W
0A7E:  MOVLB  12
0A7F:  MOVWF  21
0A80:  CLRF   22
0A81:  MOVLW  01
0A82:  MOVWF  24
0A83:  CLRF   23
0A84:  MOVLP  00
0A85:  MOVLB  00
0A86:  CALL   7D6
0A87:  MOVLP  08
0A88:  MOVLB  11
0A89:  MOVF   54,W
0A8A:  MOVLB  12
0A8B:  MOVWF  21
0A8C:  CLRF   22
0A8D:  CLRF   24
0A8E:  MOVLW  80
0A8F:  MOVWF  23
0A90:  MOVLP  00
0A91:  MOVLB  00
0A92:  CALL   7D6
0A93:  MOVLP  08
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0A94:  MOVLB  11
0A95:  MOVF   55,W
0A96:  MOVLB  12
0A97:  MOVWF  24
0A98:  MOVLB  11
0A99:  MOVF   54,W
0A9A:  MOVLB  12
0A9B:  MOVWF  23
0A9C:  MOVLB  11
0A9D:  MOVF   53,W
0A9E:  MOVLB  12
0A9F:  MOVWF  22
0AA0:  MOVLB  11
0AA1:  MOVF   52,W
0AA2:  MOVLB  12
0AA3:  MOVWF  21
0AA4:  MOVLW  25
0AA5:  MOVWF  26
0AA6:  MOVLW  94
0AA7:  MOVWF  25
0AA8:  CLRF   28
0AA9:  MOVLW  05
0AAA:  MOVWF  27
0AAB:  MOVLB  11
0AAC:  MOVF   5B,W
0AAD:  MOVLB  12
0AAE:  MOVWF  2A
0AAF:  MOVLB  11
0AB0:  MOVF   5A,W
0AB1:  MOVLB  12
0AB2:  MOVWF  29
0AB3:  MOVLB  11
0AB4:  MOVF   5F,W
0AB5:  MOVLB  12
0AB6:  MOVWF  2E
0AB7:  MOVLB  11
0AB8:  MOVF   5E,W
0AB9:  MOVLB  12
0ABA:  MOVWF  2D
0ABB:  MOVLB  11
0ABC:  MOVF   5D,W
0ABD:  MOVLB  12
0ABE:  MOVWF  2C
0ABF:  MOVLB  11
0AC0:  MOVF   5C,W
0AC1:  MOVLB  12
0AC2:  MOVWF  2B
0AC3:  MOVLB  00
0AC4:  CALL   022
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0AC5:  MOVLW  02
0AC6:  MOVWF  77
0AC7:  DECFSZ 77,F
0AC8:  GOTO   2C7
0AC9:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0ACA:  MOVLB  11
0ACB:  MOVF   54,W
0ACC:  MOVLB  12
0ACD:  MOVWF  21
0ACE:  MOVLW  01
0ACF:  MOVWF  22
0AD0:  MOVLW  01
0AD1:  MOVWF  24
0AD2:  CLRF   23
0AD3:  MOVLP  00
0AD4:  MOVLB  00
0AD5:  CALL   7D6
0AD6:  MOVLP  08
0AD7:  MOVLB  11
0AD8:  MOVF   54,W
0AD9:  MOVLB  12
0ADA:  MOVWF  21
0ADB:  CLRF   22
0ADC:  CLRF   24
0ADD:  MOVLW  80
0ADE:  MOVWF  23
0ADF:  MOVLP  00
0AE0:  MOVLB  00
0AE1:  CALL   7D6
0AE2:  MOVLP  08
....................    }
....................    return;
0AE3:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
257C:  MOVLB  11
257D:  MOVF   44,F
257E:  BTFSC  03.2
257F:  GOTO   582
2580:  MOVLB  00
2581:  GOTO   63F
2582:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
2583:  MOVLW  06
2584:  MOVLB  11
2585:  MOVWF  4C
2586:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
2587:  MOVLW  02
2588:  MOVLB  11
2589:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
258A:  MOVF   49,W
258B:  MOVWF  5D
258C:  MOVF   4A,W
258D:  MOVWF  5E
258E:  CLRF   5F
258F:  CLRF   60
2590:  MOVF   5D,W
2591:  MOVWF  77
2592:  CLRF   78
2593:  CLRF   79
2594:  CLRF   7A
2595:  MOVF   77,W
2596:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2597:  MOVF   48,W
2598:  MOVWF  5D
2599:  MOVF   49,W
259A:  MOVWF  5E
259B:  MOVF   4A,W
259C:  MOVWF  5F
259D:  CLRF   60
259E:  MOVF   5D,W
259F:  MOVWF  77
25A0:  CLRF   78
25A1:  CLRF   79
25A2:  CLRF   7A
25A3:  MOVF   77,W
25A4:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
25A5:  MOVF   47,W
25A6:  MOVWF  77
25A7:  CLRF   78
25A8:  CLRF   79
25A9:  CLRF   7A
25AA:  MOVF   77,W
25AB:  MOVWF  50
....................       flash_cmd[4] = write_data;
25AC:  MOVF   4B,W
25AD:  MOVWF  51
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
25AE:  MOVF   45,W
25AF:  MOVLB  12
25B0:  MOVWF  21
25B1:  CLRF   22
25B2:  MOVLW  01
25B3:  MOVWF  24
25B4:  CLRF   23
25B5:  MOVLP  00
25B6:  MOVLB  00
25B7:  CALL   7D6
25B8:  MOVLP  20
25B9:  MOVLB  11
25BA:  MOVF   45,W
25BB:  MOVLB  12
25BC:  MOVWF  21
25BD:  CLRF   22
25BE:  CLRF   24
25BF:  MOVLW  80
25C0:  MOVWF  23
25C1:  MOVLP  00
25C2:  MOVLB  00
25C3:  CALL   7D6
25C4:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
25C5:  MOVLB  11
25C6:  MOVF   46,W
25C7:  MOVWF  6E
25C8:  MOVF   45,W
25C9:  MOVWF  6D
25CA:  MOVF   44,W
25CB:  MOVWF  6C
25CC:  MOVF   43,W
25CD:  MOVWF  6B
25CE:  MOVLW  25
25CF:  MOVLB  12
25D0:  MOVWF  21
25D1:  MOVLW  7C
25D2:  MOVWF  20
25D3:  CLRF   23
25D4:  MOVLW  01
25D5:  MOVWF  22
25D6:  MOVLP  18
25D7:  MOVLB  00
25D8:  CALL   598
25D9:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
25DA:  MOVLB  11
25DB:  MOVF   45,W
25DC:  MOVLB  12
25DD:  MOVWF  21
25DE:  MOVLW  01
25DF:  MOVWF  22
25E0:  MOVLW  01
25E1:  MOVWF  24
25E2:  CLRF   23
25E3:  MOVLP  00
25E4:  MOVLB  00
25E5:  CALL   7D6
25E6:  MOVLP  20
25E7:  MOVLB  11
25E8:  MOVF   45,W
25E9:  MOVLB  12
25EA:  MOVWF  21
25EB:  CLRF   22
25EC:  CLRF   24
25ED:  MOVLW  80
25EE:  MOVWF  23
25EF:  MOVLP  00
25F0:  MOVLB  00
25F1:  CALL   7D6
25F2:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
25F3:  MOVLB  11
25F4:  MOVF   45,W
25F5:  MOVLB  12
25F6:  MOVWF  21
25F7:  CLRF   22
25F8:  MOVLW  01
25F9:  MOVWF  24
25FA:  CLRF   23
25FB:  MOVLP  00
25FC:  MOVLB  00
25FD:  CALL   7D6
25FE:  MOVLP  20
25FF:  MOVLB  11
2600:  MOVF   45,W
2601:  MOVLB  12
2602:  MOVWF  21
2603:  CLRF   22
2604:  CLRF   24
2605:  MOVLW  80
2606:  MOVWF  23
2607:  MOVLP  00
2608:  MOVLB  00
2609:  CALL   7D6
260A:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
260B:  MOVLB  11
260C:  MOVF   46,W
260D:  MOVWF  6E
260E:  MOVF   45,W
260F:  MOVWF  6D
2610:  MOVF   44,W
2611:  MOVWF  6C
2612:  MOVF   43,W
2613:  MOVWF  6B
2614:  MOVLW  25
2615:  MOVLB  12
2616:  MOVWF  21
2617:  MOVLW  7D
2618:  MOVWF  20
2619:  CLRF   23
261A:  MOVLW  05
261B:  MOVWF  22
261C:  MOVLP  18
261D:  MOVLB  00
261E:  CALL   598
261F:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2620:  MOVLW  02
2621:  MOVWF  77
2622:  DECFSZ 77,F
2623:  GOTO   622
2624:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2625:  MOVLB  11
2626:  MOVF   45,W
2627:  MOVLB  12
2628:  MOVWF  21
2629:  MOVLW  01
262A:  MOVWF  22
262B:  MOVLW  01
262C:  MOVWF  24
262D:  CLRF   23
262E:  MOVLP  00
262F:  MOVLB  00
2630:  CALL   7D6
2631:  MOVLP  20
2632:  MOVLB  11
2633:  MOVF   45,W
2634:  MOVLB  12
2635:  MOVWF  21
2636:  CLRF   22
2637:  CLRF   24
2638:  MOVLW  80
2639:  MOVWF  23
263A:  MOVLP  00
263B:  MOVLB  00
263C:  CALL   7D6
263D:  MOVLP  20
....................    }
263E:  GOTO   70E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
263F:  MOVLB  11
2640:  DECFSZ 44,W
2641:  GOTO   644
2642:  GOTO   646
2643:  MOVLB  00
2644:  MOVLB  00
2645:  GOTO   70E
2646:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
2647:  MOVLW  06
2648:  MOVLB  11
2649:  MOVWF  52
264A:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
264B:  MOVLW  12
264C:  MOVLB  11
264D:  MOVWF  53
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
264E:  MOVF   4A,W
264F:  MOVWF  5D
2650:  CLRF   5E
2651:  CLRF   5F
2652:  CLRF   60
2653:  MOVF   5D,W
2654:  MOVWF  77
2655:  CLRF   78
2656:  CLRF   79
2657:  CLRF   7A
2658:  MOVF   77,W
2659:  MOVWF  54
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
265A:  MOVF   49,W
265B:  MOVWF  5D
265C:  MOVF   4A,W
265D:  MOVWF  5E
265E:  CLRF   5F
265F:  CLRF   60
2660:  MOVF   5D,W
2661:  MOVWF  77
2662:  CLRF   78
2663:  CLRF   79
2664:  CLRF   7A
2665:  MOVF   77,W
2666:  MOVWF  55
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2667:  MOVF   48,W
2668:  MOVWF  5D
2669:  MOVF   49,W
266A:  MOVWF  5E
266B:  MOVF   4A,W
266C:  MOVWF  5F
266D:  CLRF   60
266E:  MOVF   5D,W
266F:  MOVWF  77
2670:  CLRF   78
2671:  CLRF   79
2672:  CLRF   7A
2673:  MOVF   77,W
2674:  MOVWF  56
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
2675:  MOVF   47,W
2676:  MOVWF  77
2677:  CLRF   78
2678:  CLRF   79
2679:  CLRF   7A
267A:  MOVF   77,W
267B:  MOVWF  57
....................       flash_cmd[5] = write_data;
267C:  MOVF   4B,W
267D:  MOVWF  58
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
267E:  MOVF   45,W
267F:  MOVLB  12
2680:  MOVWF  21
2681:  CLRF   22
2682:  MOVLW  01
2683:  MOVWF  24
2684:  CLRF   23
2685:  MOVLP  00
2686:  MOVLB  00
2687:  CALL   7D6
2688:  MOVLP  20
2689:  MOVLB  11
268A:  MOVF   45,W
268B:  MOVLB  12
268C:  MOVWF  21
268D:  CLRF   22
268E:  CLRF   24
268F:  MOVLW  80
2690:  MOVWF  23
2691:  MOVLP  00
2692:  MOVLB  00
2693:  CALL   7D6
2694:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
2695:  MOVLB  11
2696:  MOVF   46,W
2697:  MOVWF  6E
2698:  MOVF   45,W
2699:  MOVWF  6D
269A:  MOVF   44,W
269B:  MOVWF  6C
269C:  MOVF   43,W
269D:  MOVWF  6B
269E:  MOVLW  25
269F:  MOVLB  12
26A0:  MOVWF  21
26A1:  MOVLW  82
26A2:  MOVWF  20
26A3:  CLRF   23
26A4:  MOVLW  01
26A5:  MOVWF  22
26A6:  MOVLP  18
26A7:  MOVLB  00
26A8:  CALL   598
26A9:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
26AA:  MOVLB  11
26AB:  MOVF   45,W
26AC:  MOVLB  12
26AD:  MOVWF  21
26AE:  MOVLW  01
26AF:  MOVWF  22
26B0:  MOVLW  01
26B1:  MOVWF  24
26B2:  CLRF   23
26B3:  MOVLP  00
26B4:  MOVLB  00
26B5:  CALL   7D6
26B6:  MOVLP  20
26B7:  MOVLB  11
26B8:  MOVF   45,W
26B9:  MOVLB  12
26BA:  MOVWF  21
26BB:  CLRF   22
26BC:  CLRF   24
26BD:  MOVLW  80
26BE:  MOVWF  23
26BF:  MOVLP  00
26C0:  MOVLB  00
26C1:  CALL   7D6
26C2:  MOVLP  20
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
26C3:  MOVLB  11
26C4:  MOVF   45,W
26C5:  MOVLB  12
26C6:  MOVWF  21
26C7:  CLRF   22
26C8:  MOVLW  01
26C9:  MOVWF  24
26CA:  CLRF   23
26CB:  MOVLP  00
26CC:  MOVLB  00
26CD:  CALL   7D6
26CE:  MOVLP  20
26CF:  MOVLB  11
26D0:  MOVF   45,W
26D1:  MOVLB  12
26D2:  MOVWF  21
26D3:  CLRF   22
26D4:  CLRF   24
26D5:  MOVLW  80
26D6:  MOVWF  23
26D7:  MOVLP  00
26D8:  MOVLB  00
26D9:  CALL   7D6
26DA:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
26DB:  MOVLB  11
26DC:  MOVF   46,W
26DD:  MOVWF  6E
26DE:  MOVF   45,W
26DF:  MOVWF  6D
26E0:  MOVF   44,W
26E1:  MOVWF  6C
26E2:  MOVF   43,W
26E3:  MOVWF  6B
26E4:  MOVLW  25
26E5:  MOVLB  12
26E6:  MOVWF  21
26E7:  MOVLW  83
26E8:  MOVWF  20
26E9:  CLRF   23
26EA:  MOVLW  06
26EB:  MOVWF  22
26EC:  MOVLP  18
26ED:  MOVLB  00
26EE:  CALL   598
26EF:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
26F0:  MOVLW  02
26F1:  MOVWF  77
26F2:  DECFSZ 77,F
26F3:  GOTO   6F2
26F4:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
26F5:  MOVLB  11
26F6:  MOVF   45,W
26F7:  MOVLB  12
26F8:  MOVWF  21
26F9:  MOVLW  01
26FA:  MOVWF  22
26FB:  MOVLW  01
26FC:  MOVWF  24
26FD:  CLRF   23
26FE:  MOVLP  00
26FF:  MOVLB  00
2700:  CALL   7D6
2701:  MOVLP  20
2702:  MOVLB  11
2703:  MOVF   45,W
2704:  MOVLB  12
2705:  MOVWF  21
2706:  CLRF   22
2707:  CLRF   24
2708:  MOVLW  80
2709:  MOVWF  23
270A:  MOVLP  00
270B:  MOVLB  00
270C:  CALL   7D6
270D:  MOVLP  20
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
270E:  MOVLB  11
270F:  CLRF   59
2710:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
2711:  MOVLB  11
2712:  MOVF   46,W
2713:  MOVWF  6E
2714:  MOVF   45,W
2715:  MOVWF  6D
2716:  MOVF   44,W
2717:  MOVWF  6C
2718:  MOVF   43,W
2719:  MOVWF  6B
271A:  MOVLP  18
271B:  MOVLB  00
271C:  CALL   612
271D:  MOVLP  20
271E:  MOVF   78,W
271F:  ANDLW  01
2720:  SUBLW  01
2721:  BTFSS  03.2
2722:  GOTO   750
....................       if(timeout_counter > 10)
2723:  MOVLB  11
2724:  MOVF   59,W
2725:  SUBLW  0A
2726:  BTFSS  03.0
2727:  GOTO   72A
2728:  MOVLB  00
2729:  GOTO   733
272A:  MOVLB  00
....................          delay_ms(200);
272B:  MOVLW  C8
272C:  MOVLB  11
272D:  MOVWF  6B
272E:  MOVLP  10
272F:  MOVLB  00
2730:  CALL   7E0
2731:  MOVLP  20
2732:  GOTO   73A
....................       else
....................          delay_ms(10);   
2733:  MOVLW  0A
2734:  MOVLB  11
2735:  MOVWF  6B
2736:  MOVLP  10
2737:  MOVLB  00
2738:  CALL   7E0
2739:  MOVLP  20
....................       
....................       if(timeout_counter > 100){
273A:  MOVLB  11
273B:  MOVF   59,W
273C:  SUBLW  64
273D:  BTFSS  03.0
273E:  GOTO   741
273F:  MOVLB  00
2740:  GOTO   74C
2741:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
2742:  MOVLW  A7
2743:  MOVLB  03
2744:  MOVWF  11
2745:  MOVLW  01
2746:  MOVWF  12
2747:  MOVLP  00
2748:  MOVLB  00
2749:  CALL   71D
274A:  MOVLP  20
....................          #endif
....................          break;
274B:  GOTO   750
....................       }  
....................       timeout_counter++;
274C:  MOVLB  11
274D:  INCF   59,F
274E:  MOVLB  00
274F:  GOTO   711
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
2750:  MOVLW  AF
2751:  MOVLB  03
2752:  MOVWF  11
2753:  MOVLW  01
2754:  MOVWF  12
2755:  MOVLP  00
2756:  MOVLB  00
2757:  CALL   71D
2758:  MOVLP  20
....................    #endif
....................    return;
2759:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
22A0:  MOVLB  11
22A1:  MOVF   53,F
22A2:  BTFSC  03.2
22A3:  GOTO   2A6
22A4:  MOVLB  00
22A5:  GOTO   36E
22A6:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
22A7:  MOVLW  06
22A8:  MOVLB  11
22A9:  MOVWF  5E
22AA:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
22AB:  MOVLW  02
22AC:  MOVLB  11
22AD:  MOVWF  5F
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
22AE:  MOVF   58,W
22AF:  MOVWF  6C
22B0:  MOVF   59,W
22B1:  MOVWF  6D
22B2:  CLRF   6E
22B3:  CLRF   6F
22B4:  MOVF   6C,W
22B5:  MOVWF  77
22B6:  CLRF   78
22B7:  CLRF   79
22B8:  CLRF   7A
22B9:  MOVF   77,W
22BA:  MOVWF  60
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
22BB:  MOVF   57,W
22BC:  MOVWF  6C
22BD:  MOVF   58,W
22BE:  MOVWF  6D
22BF:  MOVF   59,W
22C0:  MOVWF  6E
22C1:  CLRF   6F
22C2:  MOVF   6C,W
22C3:  MOVWF  77
22C4:  CLRF   78
22C5:  CLRF   79
22C6:  CLRF   7A
22C7:  MOVF   77,W
22C8:  MOVWF  61
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
22C9:  MOVF   56,W
22CA:  MOVWF  77
22CB:  CLRF   78
22CC:  CLRF   79
22CD:  CLRF   7A
22CE:  MOVF   77,W
22CF:  MOVWF  62
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
22D0:  MOVF   54,W
22D1:  MOVLB  12
22D2:  MOVWF  21
22D3:  CLRF   22
22D4:  MOVLW  01
22D5:  MOVWF  24
22D6:  CLRF   23
22D7:  MOVLP  00
22D8:  MOVLB  00
22D9:  CALL   7D6
22DA:  MOVLP  20
22DB:  MOVLB  11
22DC:  MOVF   54,W
22DD:  MOVLB  12
22DE:  MOVWF  21
22DF:  CLRF   22
22E0:  CLRF   24
22E1:  MOVLW  80
22E2:  MOVWF  23
22E3:  MOVLP  00
22E4:  MOVLB  00
22E5:  CALL   7D6
22E6:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
22E7:  MOVLB  11
22E8:  MOVF   55,W
22E9:  MOVWF  6E
22EA:  MOVF   54,W
22EB:  MOVWF  6D
22EC:  MOVF   53,W
22ED:  MOVWF  6C
22EE:  MOVF   52,W
22EF:  MOVWF  6B
22F0:  MOVLW  25
22F1:  MOVLB  12
22F2:  MOVWF  21
22F3:  MOVLW  8E
22F4:  MOVWF  20
22F5:  CLRF   23
22F6:  MOVLW  01
22F7:  MOVWF  22
22F8:  MOVLP  18
22F9:  MOVLB  00
22FA:  CALL   598
22FB:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
22FC:  MOVLB  11
22FD:  MOVF   54,W
22FE:  MOVLB  12
22FF:  MOVWF  21
2300:  MOVLW  01
2301:  MOVWF  22
2302:  MOVLW  01
2303:  MOVWF  24
2304:  CLRF   23
2305:  MOVLP  00
2306:  MOVLB  00
2307:  CALL   7D6
2308:  MOVLP  20
2309:  MOVLB  11
230A:  MOVF   54,W
230B:  MOVLB  12
230C:  MOVWF  21
230D:  CLRF   22
230E:  CLRF   24
230F:  MOVLW  80
2310:  MOVWF  23
2311:  MOVLP  00
2312:  MOVLB  00
2313:  CALL   7D6
2314:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
2315:  MOVLB  11
2316:  MOVF   54,W
2317:  MOVLB  12
2318:  MOVWF  21
2319:  CLRF   22
231A:  MOVLW  01
231B:  MOVWF  24
231C:  CLRF   23
231D:  MOVLP  00
231E:  MOVLB  00
231F:  CALL   7D6
2320:  MOVLP  20
2321:  MOVLB  11
2322:  MOVF   54,W
2323:  MOVLB  12
2324:  MOVWF  21
2325:  CLRF   22
2326:  CLRF   24
2327:  MOVLW  80
2328:  MOVWF  23
2329:  MOVLP  00
232A:  MOVLB  00
232B:  CALL   7D6
232C:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
232D:  MOVLB  11
232E:  MOVF   55,W
232F:  MOVWF  6E
2330:  MOVF   54,W
2331:  MOVWF  6D
2332:  MOVF   53,W
2333:  MOVWF  6C
2334:  MOVF   52,W
2335:  MOVWF  6B
2336:  MOVLW  25
2337:  MOVLB  12
2338:  MOVWF  21
2339:  MOVLW  8F
233A:  MOVWF  20
233B:  MOVLW  04
233C:  MOVLB  11
233D:  MOVWF  6F
233E:  MOVF   5B,W
233F:  MOVLB  12
2340:  MOVWF  23
2341:  MOVLB  11
2342:  MOVF   5A,W
2343:  MOVLB  12
2344:  MOVWF  22
2345:  MOVLB  11
2346:  MOVF   5D,W
2347:  MOVLB  12
2348:  MOVWF  25
2349:  MOVLB  11
234A:  MOVF   5C,W
234B:  MOVLB  12
234C:  MOVWF  24
234D:  MOVLB  00
234E:  CALL   1DA
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
234F:  MOVLW  02
2350:  MOVWF  77
2351:  DECFSZ 77,F
2352:  GOTO   351
2353:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2354:  MOVLB  11
2355:  MOVF   54,W
2356:  MOVLB  12
2357:  MOVWF  21
2358:  MOVLW  01
2359:  MOVWF  22
235A:  MOVLW  01
235B:  MOVWF  24
235C:  CLRF   23
235D:  MOVLP  00
235E:  MOVLB  00
235F:  CALL   7D6
2360:  MOVLP  20
2361:  MOVLB  11
2362:  MOVF   54,W
2363:  MOVLB  12
2364:  MOVWF  21
2365:  CLRF   22
2366:  CLRF   24
2367:  MOVLW  80
2368:  MOVWF  23
2369:  MOVLP  00
236A:  MOVLB  00
236B:  CALL   7D6
236C:  MOVLP  20
....................    }
236D:  GOTO   448
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
236E:  MOVLB  11
236F:  DECFSZ 53,W
2370:  GOTO   373
2371:  GOTO   375
2372:  MOVLB  00
2373:  MOVLB  00
2374:  GOTO   448
2375:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
2376:  MOVLW  06
2377:  MOVLB  11
2378:  MOVWF  63
2379:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
237A:  MOVLW  12
237B:  MOVLB  11
237C:  MOVWF  64
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
237D:  MOVF   59,W
237E:  MOVWF  6C
237F:  CLRF   6D
2380:  CLRF   6E
2381:  CLRF   6F
2382:  MOVF   6C,W
2383:  MOVWF  77
2384:  CLRF   78
2385:  CLRF   79
2386:  CLRF   7A
2387:  MOVF   77,W
2388:  MOVWF  65
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2389:  MOVF   58,W
238A:  MOVWF  6C
238B:  MOVF   59,W
238C:  MOVWF  6D
238D:  CLRF   6E
238E:  CLRF   6F
238F:  MOVF   6C,W
2390:  MOVWF  77
2391:  CLRF   78
2392:  CLRF   79
2393:  CLRF   7A
2394:  MOVF   77,W
2395:  MOVWF  66
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2396:  MOVF   57,W
2397:  MOVWF  6C
2398:  MOVF   58,W
2399:  MOVWF  6D
239A:  MOVF   59,W
239B:  MOVWF  6E
239C:  CLRF   6F
239D:  MOVF   6C,W
239E:  MOVWF  77
239F:  CLRF   78
23A0:  CLRF   79
23A1:  CLRF   7A
23A2:  MOVF   77,W
23A3:  MOVWF  67
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
23A4:  MOVF   56,W
23A5:  MOVWF  77
23A6:  CLRF   78
23A7:  CLRF   79
23A8:  CLRF   7A
23A9:  MOVF   77,W
23AA:  MOVWF  68
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
23AB:  MOVF   54,W
23AC:  MOVLB  12
23AD:  MOVWF  21
23AE:  CLRF   22
23AF:  MOVLW  01
23B0:  MOVWF  24
23B1:  CLRF   23
23B2:  MOVLP  00
23B3:  MOVLB  00
23B4:  CALL   7D6
23B5:  MOVLP  20
23B6:  MOVLB  11
23B7:  MOVF   54,W
23B8:  MOVLB  12
23B9:  MOVWF  21
23BA:  CLRF   22
23BB:  CLRF   24
23BC:  MOVLW  80
23BD:  MOVWF  23
23BE:  MOVLP  00
23BF:  MOVLB  00
23C0:  CALL   7D6
23C1:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
23C2:  MOVLB  11
23C3:  MOVF   55,W
23C4:  MOVWF  6E
23C5:  MOVF   54,W
23C6:  MOVWF  6D
23C7:  MOVF   53,W
23C8:  MOVWF  6C
23C9:  MOVF   52,W
23CA:  MOVWF  6B
23CB:  MOVLW  25
23CC:  MOVLB  12
23CD:  MOVWF  21
23CE:  MOVLW  93
23CF:  MOVWF  20
23D0:  CLRF   23
23D1:  MOVLW  01
23D2:  MOVWF  22
23D3:  MOVLP  18
23D4:  MOVLB  00
23D5:  CALL   598
23D6:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
23D7:  MOVLB  11
23D8:  MOVF   54,W
23D9:  MOVLB  12
23DA:  MOVWF  21
23DB:  MOVLW  01
23DC:  MOVWF  22
23DD:  MOVLW  01
23DE:  MOVWF  24
23DF:  CLRF   23
23E0:  MOVLP  00
23E1:  MOVLB  00
23E2:  CALL   7D6
23E3:  MOVLP  20
23E4:  MOVLB  11
23E5:  MOVF   54,W
23E6:  MOVLB  12
23E7:  MOVWF  21
23E8:  CLRF   22
23E9:  CLRF   24
23EA:  MOVLW  80
23EB:  MOVWF  23
23EC:  MOVLP  00
23ED:  MOVLB  00
23EE:  CALL   7D6
23EF:  MOVLP  20
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
23F0:  MOVLB  11
23F1:  MOVF   54,W
23F2:  MOVLB  12
23F3:  MOVWF  21
23F4:  CLRF   22
23F5:  MOVLW  01
23F6:  MOVWF  24
23F7:  CLRF   23
23F8:  MOVLP  00
23F9:  MOVLB  00
23FA:  CALL   7D6
23FB:  MOVLP  20
23FC:  MOVLB  11
23FD:  MOVF   54,W
23FE:  MOVLB  12
23FF:  MOVWF  21
2400:  CLRF   22
2401:  CLRF   24
2402:  MOVLW  80
2403:  MOVWF  23
2404:  MOVLP  00
2405:  MOVLB  00
2406:  CALL   7D6
2407:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
2408:  MOVLB  11
2409:  MOVF   55,W
240A:  MOVWF  6E
240B:  MOVF   54,W
240C:  MOVWF  6D
240D:  MOVF   53,W
240E:  MOVWF  6C
240F:  MOVF   52,W
2410:  MOVWF  6B
2411:  MOVLW  25
2412:  MOVLB  12
2413:  MOVWF  21
2414:  MOVLW  94
2415:  MOVWF  20
2416:  MOVLW  05
2417:  MOVLB  11
2418:  MOVWF  6F
2419:  MOVF   5B,W
241A:  MOVLB  12
241B:  MOVWF  23
241C:  MOVLB  11
241D:  MOVF   5A,W
241E:  MOVLB  12
241F:  MOVWF  22
2420:  MOVLB  11
2421:  MOVF   5D,W
2422:  MOVLB  12
2423:  MOVWF  25
2424:  MOVLB  11
2425:  MOVF   5C,W
2426:  MOVLB  12
2427:  MOVWF  24
2428:  MOVLB  00
2429:  CALL   1DA
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
242A:  MOVLW  02
242B:  MOVWF  77
242C:  DECFSZ 77,F
242D:  GOTO   42C
242E:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
242F:  MOVLB  11
2430:  MOVF   54,W
2431:  MOVLB  12
2432:  MOVWF  21
2433:  MOVLW  01
2434:  MOVWF  22
2435:  MOVLW  01
2436:  MOVWF  24
2437:  CLRF   23
2438:  MOVLP  00
2439:  MOVLB  00
243A:  CALL   7D6
243B:  MOVLP  20
243C:  MOVLB  11
243D:  MOVF   54,W
243E:  MOVLB  12
243F:  MOVWF  21
2440:  CLRF   22
2441:  CLRF   24
2442:  MOVLW  80
2443:  MOVWF  23
2444:  MOVLP  00
2445:  MOVLB  00
2446:  CALL   7D6
2447:  MOVLP  20
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
2448:  MOVLB  11
2449:  CLRF   69
244A:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
244B:  MOVLB  11
244C:  MOVF   55,W
244D:  MOVWF  6E
244E:  MOVF   54,W
244F:  MOVWF  6D
2450:  MOVF   53,W
2451:  MOVWF  6C
2452:  MOVF   52,W
2453:  MOVWF  6B
2454:  MOVLP  18
2455:  MOVLB  00
2456:  CALL   612
2457:  MOVLP  20
2458:  MOVF   78,W
2459:  ANDLW  01
245A:  SUBLW  01
245B:  BTFSS  03.2
245C:  GOTO   48A
....................       if(timeout_counter > 10)
245D:  MOVLB  11
245E:  MOVF   69,W
245F:  SUBLW  0A
2460:  BTFSS  03.0
2461:  GOTO   464
2462:  MOVLB  00
2463:  GOTO   46D
2464:  MOVLB  00
....................          delay_ms(200);
2465:  MOVLW  C8
2466:  MOVLB  11
2467:  MOVWF  6B
2468:  MOVLP  10
2469:  MOVLB  00
246A:  CALL   7E0
246B:  MOVLP  20
246C:  GOTO   474
....................       else
....................          delay_ms(10);   
246D:  MOVLW  0A
246E:  MOVLB  11
246F:  MOVWF  6B
2470:  MOVLP  10
2471:  MOVLB  00
2472:  CALL   7E0
2473:  MOVLP  20
....................       
....................       if(timeout_counter > 100){
2474:  MOVLB  11
2475:  MOVF   69,W
2476:  SUBLW  64
2477:  BTFSS  03.0
2478:  GOTO   47B
2479:  MOVLB  00
247A:  GOTO   486
247B:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
247C:  MOVLW  BB
247D:  MOVLB  03
247E:  MOVWF  11
247F:  MOVLW  01
2480:  MOVWF  12
2481:  MOVLP  00
2482:  MOVLB  00
2483:  CALL   71D
2484:  MOVLP  20
....................          #endif
....................          break;
2485:  GOTO   48A
....................       }  
....................       timeout_counter++;
2486:  MOVLB  11
2487:  INCF   69,F
2488:  MOVLB  00
2489:  GOTO   44B
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
248A:  MOVLW  C3
248B:  MOVLB  03
248C:  MOVWF  11
248D:  MOVLW  01
248E:  MOVWF  12
248F:  MOVLP  00
2490:  MOVLB  00
2491:  CALL   71D
2492:  MOVLP  20
....................    #endif
....................    return;
2493:  MOVLP  20
2494:  GOTO   53D (RETURN)
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0930:  MOVLW  9F
0931:  MOVLB  11
0932:  MOVWF  40
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0933:  MOVF   3A,W
0934:  MOVLB  12
0935:  MOVWF  21
0936:  CLRF   22
0937:  MOVLW  01
0938:  MOVWF  24
0939:  CLRF   23
093A:  MOVLP  00
093B:  MOVLB  00
093C:  CALL   7D6
093D:  MOVLP  08
093E:  MOVLB  11
093F:  MOVF   3A,W
0940:  MOVLB  12
0941:  MOVWF  21
0942:  CLRF   22
0943:  CLRF   24
0944:  MOVLW  80
0945:  MOVWF  23
0946:  MOVLP  00
0947:  MOVLB  00
0948:  CALL   7D6
0949:  MOVLP  08
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
094A:  MOVLB  11
094B:  MOVF   3B,W
094C:  MOVLB  12
094D:  MOVWF  24
094E:  MOVLB  11
094F:  MOVF   3A,W
0950:  MOVLB  12
0951:  MOVWF  23
0952:  MOVLB  11
0953:  MOVF   39,W
0954:  MOVLB  12
0955:  MOVWF  22
0956:  MOVLB  11
0957:  MOVF   38,W
0958:  MOVLB  12
0959:  MOVWF  21
095A:  MOVLW  25
095B:  MOVWF  26
095C:  MOVLW  70
095D:  MOVWF  25
095E:  CLRF   28
095F:  MOVLW  01
0960:  MOVWF  27
0961:  MOVLW  25
0962:  MOVWF  2A
0963:  MOVLW  6C
0964:  MOVWF  29
0965:  CLRF   2E
0966:  CLRF   2D
0967:  CLRF   2C
0968:  MOVLW  04
0969:  MOVWF  2B
096A:  MOVLB  00
096B:  CALL   022
....................    output_high(flash_stream.cs_pin);
096C:  MOVLB  11
096D:  MOVF   3A,W
096E:  MOVLB  12
096F:  MOVWF  21
0970:  MOVLW  01
0971:  MOVWF  22
0972:  MOVLW  01
0973:  MOVWF  24
0974:  CLRF   23
0975:  MOVLP  00
0976:  MOVLB  00
0977:  CALL   7D6
0978:  MOVLP  08
0979:  MOVLB  11
097A:  MOVF   3A,W
097B:  MOVLB  12
097C:  MOVWF  21
097D:  CLRF   22
097E:  CLRF   24
097F:  MOVLW  80
0980:  MOVWF  23
0981:  MOVLP  00
0982:  MOVLB  00
0983:  CALL   7D6
0984:  MOVLP  08
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
0985:  MOVLW  CF
0986:  MOVLB  03
0987:  MOVWF  11
0988:  MOVLW  01
0989:  MOVWF  12
098A:  MOVLP  00
098B:  MOVLB  00
098C:  CALL   71D
098D:  MOVLP  08
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
098E:  MOVLB  11
098F:  MOVF   3C,W
0990:  SUBLW  20
0991:  BTFSC  03.2
0992:  GOTO   195
0993:  MOVLB  00
0994:  GOTO   1A3
0995:  MOVLB  00
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
0996:  MOVLW  D4
0997:  MOVLB  03
0998:  MOVWF  11
0999:  MOVLW  01
099A:  MOVWF  12
099B:  MOVLP  00
099C:  MOVLB  00
099D:  CALL   71D
099E:  MOVLP  08
....................       #endif
....................       return true;
099F:  MOVLW  01
09A0:  MOVWF  78
09A1:  GOTO   1AF
....................    }
09A2:  GOTO   1AF
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
09A3:  MOVLW  DE
09A4:  MOVLB  03
09A5:  MOVWF  11
09A6:  MOVLW  01
09A7:  MOVWF  12
09A8:  MOVLP  00
09A9:  MOVLB  00
09AA:  CALL   71D
09AB:  MOVLP  08
....................       #endif
....................       return false;
09AC:  MOVLW  00
09AD:  MOVWF  78
09AE:  GOTO   1AF
....................    }
09AF:  MOVLP  08
09B0:  GOTO   4F9 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 32
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
1000:  MOVLB  0F
1001:  CLRF   61
1002:  CLRF   62
1003:  CLRF   63
1004:  CLRF   64
1005:  CLRF   65
1006:  CLRF   66
1007:  CLRF   67
1008:  CLRF   68
1009:  CLRF   69
100A:  CLRF   6A
100B:  CLRF   6B
100C:  CLRF   6C
100D:  CLRF   6D
100E:  CLRF   6E
100F:  CLRF   6F
1010:  MOVLB  10
1011:  CLRF   20
1012:  CLRF   21
1013:  CLRF   22
1014:  CLRF   23
1015:  CLRF   24
1016:  CLRF   25
1017:  CLRF   26
1018:  CLRF   27
1019:  CLRF   28
101A:  CLRF   29
101B:  CLRF   2A
101C:  CLRF   2B
101D:  CLRF   2C
101E:  CLRF   2D
101F:  CLRF   2E
1020:  CLRF   2F
1021:  CLRF   30
1022:  CLRF   31
1023:  CLRF   32
1024:  CLRF   33
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
1025:  MOVLW  E8
1026:  MOVLB  03
1027:  MOVWF  11
1028:  MOVLW  01
1029:  MOVWF  12
102A:  MOVLP  00
102B:  MOVLB  00
102C:  CALL   71D
102D:  MOVLP  10
....................    fprintf(PC, "\t[BOSS] >>> ");
102E:  MOVLW  F8
102F:  MOVLB  03
1030:  MOVWF  11
1031:  MOVLW  01
1032:  MOVWF  12
1033:  MOVLP  00
1034:  MOVLB  00
1035:  CALL   71D
1036:  MOVLP  10
....................    for (int8 i = 0; i < receive_signal_size; i++)
1037:  MOVLB  10
1038:  CLRF   34
1039:  MOVLB  00
103A:  MOVLB  0F
103B:  MOVF   60,W
103C:  MOVLB  10
103D:  SUBWF  34,W
103E:  BTFSS  03.0
103F:  GOTO   042
1040:  MOVLB  00
1041:  GOTO   062
1042:  MOVLB  00
....................       fprintf(PC, "%X ", receive_signal[i]);
1043:  MOVLB  10
1044:  MOVF   34,W
1045:  MOVLB  0F
1046:  ADDWF  5E,W
1047:  MOVWF  04
1048:  MOVLW  00
1049:  ADDWFC 5F,W
104A:  MOVWF  05
104B:  MOVF   00,W
104C:  MOVLB  10
104D:  MOVWF  3D
104E:  MOVF   3D,W
104F:  MOVLB  11
1050:  MOVWF  51
1051:  MOVLW  37
1052:  MOVWF  52
1053:  MOVLP  08
1054:  MOVLB  00
1055:  CALL   699
1056:  MOVLP  10
1057:  MOVLW  20
1058:  MOVLB  12
1059:  MOVWF  25
105A:  MOVLP  00
105B:  MOVLB  00
105C:  CALL   6F5
105D:  MOVLP  10
105E:  MOVLB  10
105F:  INCF   34,F
1060:  MOVLB  00
1061:  GOTO   03A
....................    fprintf(PC, "\r\n");
1062:  MOVLW  0D
1063:  MOVLB  12
1064:  MOVWF  25
1065:  MOVLP  00
1066:  MOVLB  00
1067:  CALL   6F5
1068:  MOVLP  10
1069:  MOVLW  0A
106A:  MOVLB  12
106B:  MOVWF  25
106C:  MOVLP  00
106D:  MOVLB  00
106E:  CALL   6F5
106F:  MOVLP  10
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
1070:  MOVLB  0F
1071:  MOVF   5F,W
1072:  MOVLB  10
1073:  MOVWF  3E
1074:  MOVLB  0F
1075:  MOVF   5E,W
1076:  MOVLB  10
1077:  MOVWF  3D
1078:  MOVLB  0F
1079:  MOVF   60,W
107A:  MOVLB  10
107B:  MOVWF  3F
107C:  MOVLB  00
*
10C9:  MOVF   78,W
10CA:  MOVLB  10
10CB:  MOVWF  35
....................    if (frame_start_position == -1)
10CC:  MOVF   35,W
10CD:  SUBLW  FF
10CE:  BTFSC  03.2
10CF:  GOTO   0D2
10D0:  MOVLB  00
10D1:  GOTO   0D8
10D2:  MOVLB  00
....................       return command;
10D3:  MOVLW  E1
10D4:  MOVWF  78
10D5:  MOVLW  07
10D6:  MOVWF  79
10D7:  GOTO   303
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
10D8:  MOVLB  10
10D9:  MOVF   35,W
10DA:  MOVLB  0F
10DB:  ADDWF  5E,W
10DC:  MOVLB  10
10DD:  MOVWF  36
10DE:  MOVLW  00
10DF:  MOVLB  0F
10E0:  ADDWFC 5F,W
10E1:  MOVLB  10
10E2:  MOVWF  37
10E3:  MOVF   36,W
10E4:  MOVWF  04
10E5:  MOVF   37,W
10E6:  MOVWF  05
10E7:  ADDFSR 00,FSR0
10E8:  MOVF   00,W
10E9:  ANDLW  0F
10EA:  MOVWF  38
10EB:  MOVF   38,W
10EC:  MOVWF  3D
10ED:  MOVLB  00
*
1142:  MOVF   78,W
1143:  MOVLB  10
1144:  MOVWF  39
....................    if (content_size == -1)
1145:  MOVF   39,W
1146:  SUBLW  FF
1147:  BTFSC  03.2
1148:  GOTO   14B
1149:  MOVLB  00
114A:  GOTO   151
114B:  MOVLB  00
....................       return command;
114C:  MOVLW  E1
114D:  MOVWF  78
114E:  MOVLW  07
114F:  MOVWF  79
1150:  GOTO   303
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
1151:  MOVLB  10
1152:  MOVF   35,W
1153:  MOVLB  0F
1154:  SUBWF  60,W
1155:  MOVLB  10
1156:  MOVWF  3A
....................    
....................    if (!check_crc(frame, receive_frame_size))
1157:  MOVF   37,W
1158:  MOVWF  3E
1159:  MOVF   36,W
115A:  MOVWF  3D
115B:  MOVF   3A,W
115C:  MOVWF  3F
115D:  MOVLB  00
*
11D9:  MOVF   78,F
11DA:  BTFSS  03.2
11DB:  GOTO   1E1
....................       return command;
11DC:  MOVLW  E1
11DD:  MOVWF  78
11DE:  MOVLW  07
11DF:  MOVWF  79
11E0:  GOTO   303
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
11E1:  MOVLB  10
11E2:  MOVF   36,W
11E3:  MOVWF  04
11E4:  MOVF   37,W
11E5:  MOVWF  05
11E6:  ADDFSR 00,FSR0
11E7:  MOVF   00,W
11E8:  ANDLW  F0
11E9:  MOVWF  77
11EA:  SWAPF  77,W
11EB:  MOVWF  3D
11EC:  MOVLW  0F
11ED:  ANDWF  3D,F
11EE:  MOVF   3D,W
11EF:  MOVWF  3E
11F0:  MOVLB  00
*
1252:  MOVF   78,F
1253:  BTFSS  03.2
1254:  GOTO   25A
....................       return command;
1255:  MOVLW  E1
1256:  MOVWF  78
1257:  MOVLW  07
1258:  MOVWF  79
1259:  GOTO   303
.................... 
....................    command.frame_id = frame_id;
125A:  MOVLB  10
125B:  MOVF   38,W
125C:  MOVLB  0F
125D:  MOVWF  61
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
125E:  MOVLW  01
125F:  MOVLB  10
1260:  ADDWF  36,W
1261:  MOVWF  3D
1262:  MOVLW  00
1263:  ADDWFC 37,W
1264:  MOVWF  3E
1265:  MOVLW  02
1266:  SUBWF  3A,W
1267:  MOVWF  3F
1268:  MOVF   3E,W
1269:  MOVWF  05
126A:  MOVF   3D,W
126B:  MOVWF  04
126C:  MOVF   3F,W
126D:  MOVWF  78
126E:  BTFSS  03.2
126F:  GOTO   272
1270:  MOVLB  00
1271:  GOTO   27B
1272:  MOVLW  24
1273:  MOVWF  07
1274:  MOVLW  F4
1275:  MOVWF  06
1276:  MOVLB  00
1277:  MOVIW  [FSR0++],W
1278:  MOVWI  W,[FSR1++]
1279:  DECFSZ 78,F
127A:  GOTO   277
....................    command.size = receive_frame_size-2;
127B:  MOVLW  02
127C:  MOVLB  10
127D:  SUBWF  3A,W
127E:  MOVLB  0F
127F:  MOVWF  62
....................    command.is_exist = TRUE;
1280:  BSF    63.0
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
1281:  MOVLW  FF
1282:  MOVLB  03
1283:  MOVWF  11
1284:  MOVLW  01
1285:  MOVWF  12
1286:  BCF    03.0
1287:  MOVLW  0E
1288:  MOVLB  11
1289:  MOVWF  51
128A:  MOVLP  08
128B:  MOVLB  00
128C:  CALL   2E4
128D:  MOVLP  10
128E:  MOVLB  0F
128F:  MOVF   61,W
1290:  MOVLB  11
1291:  MOVWF  51
1292:  MOVLW  37
1293:  MOVWF  52
1294:  MOVLP  08
1295:  MOVLB  00
1296:  CALL   699
1297:  MOVLP  10
1298:  MOVLW  0D
1299:  MOVLB  12
129A:  MOVWF  25
129B:  MOVLP  00
129C:  MOVLB  00
129D:  CALL   6F5
129E:  MOVLP  10
129F:  MOVLW  0A
12A0:  MOVLB  12
12A1:  MOVWF  25
12A2:  MOVLP  00
12A3:  MOVLB  00
12A4:  CALL   6F5
12A5:  MOVLP  10
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
12A6:  MOVLW  09
12A7:  MOVLB  03
12A8:  MOVWF  11
12A9:  MOVLW  02
12AA:  MOVWF  12
12AB:  BCF    03.0
12AC:  MOVLW  12
12AD:  MOVLB  11
12AE:  MOVWF  51
12AF:  MOVLP  08
12B0:  MOVLB  00
12B1:  CALL   2E4
12B2:  MOVLP  10
12B3:  MOVLB  0F
12B4:  MOVF   62,W
12B5:  MOVLB  11
12B6:  MOVWF  4E
12B7:  MOVLW  18
12B8:  MOVWF  4F
12B9:  MOVLP  08
12BA:  MOVLB  00
12BB:  CALL   44B
12BC:  MOVLP  10
12BD:  MOVLW  0D
12BE:  MOVLB  12
12BF:  MOVWF  25
12C0:  MOVLP  00
12C1:  MOVLB  00
12C2:  CALL   6F5
12C3:  MOVLP  10
12C4:  MOVLW  0A
12C5:  MOVLB  12
12C6:  MOVWF  25
12C7:  MOVLP  00
12C8:  MOVLB  00
12C9:  CALL   6F5
12CA:  MOVLP  10
....................    fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
12CB:  MOVLW  00
12CC:  MOVLB  0F
12CD:  BTFSC  63.0
12CE:  MOVLW  01
12CF:  MOVLB  10
12D0:  MOVWF  3D
12D1:  MOVLW  15
12D2:  MOVLB  03
12D3:  MOVWF  11
12D4:  MOVLW  02
12D5:  MOVWF  12
12D6:  BCF    03.0
12D7:  MOVLW  0E
12D8:  MOVLB  11
12D9:  MOVWF  51
12DA:  MOVLP  08
12DB:  MOVLB  00
12DC:  CALL   2E4
12DD:  MOVLP  10
12DE:  MOVLB  10
12DF:  MOVF   3D,W
12E0:  MOVLB  11
12E1:  MOVWF  4E
12E2:  MOVLW  18
12E3:  MOVWF  4F
12E4:  MOVLP  08
12E5:  MOVLB  00
12E6:  CALL   44B
12E7:  MOVLP  10
12E8:  MOVLW  0D
12E9:  MOVLB  12
12EA:  MOVWF  25
12EB:  MOVLP  00
12EC:  MOVLB  00
12ED:  CALL   6F5
12EE:  MOVLP  10
12EF:  MOVLW  0A
12F0:  MOVLB  12
12F1:  MOVWF  25
12F2:  MOVLP  00
12F3:  MOVLB  00
12F4:  CALL   6F5
12F5:  MOVLP  10
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
12F6:  MOVLW  1F
12F7:  MOVLB  03
12F8:  MOVWF  11
12F9:  MOVLW  02
12FA:  MOVWF  12
12FB:  MOVLP  00
12FC:  MOVLB  00
12FD:  CALL   71D
12FE:  MOVLP  10
....................    return command;
12FF:  MOVLW  E1
1300:  MOVWF  78
1301:  MOVLW  07
1302:  MOVWF  79
1303:  MOVLP  30
1304:  GOTO   549 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
107D:  MOVLB  10
107E:  CLRF   40
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
107F:  CLRF   40
1080:  MOVLB  00
1081:  MOVLW  01
1082:  MOVLB  10
1083:  SUBWF  3F,W
1084:  SUBWF  40,W
1085:  BTFSS  03.0
1086:  GOTO   089
1087:  MOVLB  00
1088:  GOTO   0A2
1089:  MOVLB  00
....................       if(receive_signal[i] == SFD)
108A:  MOVLB  10
108B:  MOVF   40,W
108C:  ADDWF  3D,W
108D:  MOVWF  04
108E:  MOVLW  00
108F:  ADDWFC 3E,W
1090:  MOVWF  05
1091:  MOVF   00,W
1092:  SUBLW  AA
1093:  BTFSC  03.2
1094:  GOTO   097
1095:  MOVLB  00
1096:  GOTO   09E
1097:  MOVLB  00
....................          return i+1;
1098:  MOVLW  01
1099:  MOVLB  10
109A:  ADDWF  40,W
109B:  MOVWF  78
109C:  MOVLB  00
109D:  GOTO   0C9
109E:  MOVLB  10
109F:  INCF   40,F
10A0:  MOVLB  00
10A1:  GOTO   081
....................    if (receive_signal[i] == SFD)
10A2:  MOVLB  10
10A3:  MOVF   40,W
10A4:  ADDWF  3D,W
10A5:  MOVWF  04
10A6:  MOVLW  00
10A7:  ADDWFC 3E,W
10A8:  MOVWF  05
10A9:  MOVF   00,W
10AA:  SUBLW  AA
10AB:  BTFSC  03.2
10AC:  GOTO   0AF
10AD:  MOVLB  00
10AE:  GOTO   0BD
10AF:  MOVLB  00
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
10B0:  MOVLW  2D
10B1:  MOVLB  03
10B2:  MOVWF  11
10B3:  MOVLW  02
10B4:  MOVWF  12
10B5:  MOVLP  00
10B6:  MOVLB  00
10B7:  CALL   71D
10B8:  MOVLP  10
....................       return -1;
10B9:  MOVLW  FF
10BA:  MOVWF  78
10BB:  GOTO   0C9
....................    }
10BC:  GOTO   0C9
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
10BD:  MOVLW  38
10BE:  MOVLB  03
10BF:  MOVWF  11
10C0:  MOVLW  02
10C1:  MOVWF  12
10C2:  MOVLP  00
10C3:  MOVLB  00
10C4:  CALL   71D
10C5:  MOVLP  10
....................       return -1;
10C6:  MOVLW  FF
10C7:  MOVWF  78
10C8:  GOTO   0C9
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
10EE:  MOVLB  10
10EF:  CLRF   3E
10F0:  MOVLB  00
10F1:  MOVLB  10
10F2:  MOVF   3E,W
10F3:  SUBLW  02
10F4:  BTFSC  03.0
10F5:  GOTO   0F8
10F6:  MOVLB  00
10F7:  GOTO   11B
10F8:  MOVLB  00
....................       if (frame_id == frame_ids[i].id)
10F9:  BCF    03.0
10FA:  MOVLB  10
10FB:  RLF    3E,W
10FC:  ADDLW  B4
10FD:  MOVWF  04
10FE:  MOVLW  24
10FF:  MOVWF  05
1100:  BTFSC  03.0
1101:  INCF   05,F
1102:  MOVF   00,W
1103:  SUBWF  3D,W
1104:  BTFSC  03.2
1105:  GOTO   108
1106:  MOVLB  00
1107:  GOTO   117
1108:  MOVLB  00
....................          return frame_ids[i].length;
1109:  BCF    03.0
110A:  MOVLB  10
110B:  RLF    3E,W
110C:  ADDLW  01
110D:  ADDLW  B4
110E:  MOVWF  04
110F:  MOVLW  24
1110:  MOVWF  05
1111:  BTFSC  03.0
1112:  INCF   05,F
1113:  MOVF   00,W
1114:  MOVWF  78
1115:  MOVLB  00
1116:  GOTO   142
1117:  MOVLB  10
1118:  INCF   3E,F
1119:  MOVLB  00
111A:  GOTO   0F1
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
111B:  MOVLW  41
111C:  MOVLB  03
111D:  MOVWF  11
111E:  MOVLW  02
111F:  MOVWF  12
1120:  BCF    03.0
1121:  MOVLW  1F
1122:  MOVLB  11
1123:  MOVWF  51
1124:  MOVLP  08
1125:  MOVLB  00
1126:  CALL   2E4
1127:  MOVLP  10
1128:  MOVLB  10
1129:  MOVF   3D,W
112A:  MOVLB  11
112B:  MOVWF  51
112C:  MOVLW  37
112D:  MOVWF  52
112E:  MOVLP  08
112F:  MOVLB  00
1130:  CALL   699
1131:  MOVLP  10
1132:  MOVLW  0D
1133:  MOVLB  12
1134:  MOVWF  25
1135:  MOVLP  00
1136:  MOVLB  00
1137:  CALL   6F5
1138:  MOVLP  10
1139:  MOVLW  0A
113A:  MOVLB  12
113B:  MOVWF  25
113C:  MOVLP  00
113D:  MOVLB  00
113E:  CALL   6F5
113F:  MOVLP  10
....................    return -1;
1140:  MOVLW  FF
1141:  MOVWF  78
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
115E:  MOVLW  01
115F:  MOVLB  10
1160:  SUBWF  3F,W
1161:  ADDWF  3D,W
1162:  MOVWF  04
1163:  MOVLW  00
1164:  ADDWFC 3E,W
1165:  MOVWF  05
1166:  MOVF   00,W
1167:  MOVWF  40
1168:  MOVLW  01
1169:  SUBWF  3F,W
116A:  MOVWF  42
116B:  MOVF   3E,W
116C:  MOVWF  44
116D:  MOVF   3D,W
116E:  MOVWF  43
116F:  MOVF   42,W
1170:  MOVWF  45
1171:  MOVLP  08
1172:  MOVLB  00
1173:  CALL   6D1
1174:  MOVLP  10
1175:  MOVF   78,W
1176:  MOVLB  10
1177:  MOVWF  41
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
1178:  MOVF   41,W
1179:  SUBWF  40,W
117A:  BTFSC  03.2
117B:  GOTO   17E
117C:  MOVLB  00
117D:  GOTO   183
117E:  MOVLB  00
....................       return TRUE;
117F:  MOVLW  01
1180:  MOVWF  78
1181:  GOTO   1D9
1182:  GOTO   1D9
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1183:  MOVLW  53
1184:  MOVLB  03
1185:  MOVWF  11
1186:  MOVLW  02
1187:  MOVWF  12
1188:  MOVLP  00
1189:  MOVLB  00
118A:  CALL   71D
118B:  MOVLP  10
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
118C:  MOVLW  5C
118D:  MOVLB  03
118E:  MOVWF  11
118F:  MOVLW  02
1190:  MOVWF  12
1191:  BCF    03.0
1192:  MOVLW  13
1193:  MOVLB  11
1194:  MOVWF  51
1195:  MOVLP  08
1196:  MOVLB  00
1197:  CALL   2E4
1198:  MOVLP  10
1199:  MOVLB  10
119A:  MOVF   40,W
119B:  MOVLB  11
119C:  MOVWF  51
119D:  MOVLW  37
119E:  MOVWF  52
119F:  MOVLP  08
11A0:  MOVLB  00
11A1:  CALL   699
11A2:  MOVLP  10
11A3:  MOVLW  0D
11A4:  MOVLB  12
11A5:  MOVWF  25
11A6:  MOVLP  00
11A7:  MOVLB  00
11A8:  CALL   6F5
11A9:  MOVLP  10
11AA:  MOVLW  0A
11AB:  MOVLB  12
11AC:  MOVWF  25
11AD:  MOVLP  00
11AE:  MOVLB  00
11AF:  CALL   6F5
11B0:  MOVLP  10
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
11B1:  MOVLW  68
11B2:  MOVLB  03
11B3:  MOVWF  11
11B4:  MOVLW  02
11B5:  MOVWF  12
11B6:  BCF    03.0
11B7:  MOVLW  13
11B8:  MOVLB  11
11B9:  MOVWF  51
11BA:  MOVLP  08
11BB:  MOVLB  00
11BC:  CALL   2E4
11BD:  MOVLP  10
11BE:  MOVLB  10
11BF:  MOVF   41,W
11C0:  MOVLB  11
11C1:  MOVWF  51
11C2:  MOVLW  37
11C3:  MOVWF  52
11C4:  MOVLP  08
11C5:  MOVLB  00
11C6:  CALL   699
11C7:  MOVLP  10
11C8:  MOVLW  0D
11C9:  MOVLB  12
11CA:  MOVWF  25
11CB:  MOVLP  00
11CC:  MOVLB  00
11CD:  CALL   6F5
11CE:  MOVLP  10
11CF:  MOVLW  0A
11D0:  MOVLB  12
11D1:  MOVWF  25
11D2:  MOVLP  00
11D3:  MOVLB  00
11D4:  CALL   6F5
11D5:  MOVLP  10
....................       return FALSE;
11D6:  MOVLW  00
11D7:  MOVWF  78
11D8:  GOTO   1D9
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
11F1:  MOVLB  10
11F2:  MOVF   3E,W
11F3:  SUBLW  0C
11F4:  BTFSC  03.2
11F5:  GOTO   1F8
11F6:  MOVLB  00
11F7:  GOTO   1FD
11F8:  MOVLB  00
....................       return TRUE;
11F9:  MOVLW  01
11FA:  MOVWF  78
11FB:  GOTO   252
11FC:  GOTO   252
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
11FD:  MOVLW  74
11FE:  MOVLB  03
11FF:  MOVWF  11
1200:  MOVLW  02
1201:  MOVWF  12
1202:  MOVLP  00
1203:  MOVLB  00
1204:  CALL   71D
1205:  MOVLP  10
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
1206:  MOVLW  85
1207:  MOVLB  03
1208:  MOVWF  11
1209:  MOVLW  02
120A:  MOVWF  12
120B:  BCF    03.0
120C:  MOVLW  13
120D:  MOVLB  11
120E:  MOVWF  51
120F:  MOVLP  08
1210:  MOVLB  00
1211:  CALL   2E4
1212:  MOVLP  10
1213:  MOVLB  10
1214:  MOVF   3E,W
1215:  MOVLB  11
1216:  MOVWF  51
1217:  MOVLW  37
1218:  MOVWF  52
1219:  MOVLP  08
121A:  MOVLB  00
121B:  CALL   699
121C:  MOVLP  10
121D:  MOVLW  0D
121E:  MOVLB  12
121F:  MOVWF  25
1220:  MOVLP  00
1221:  MOVLB  00
1222:  CALL   6F5
1223:  MOVLP  10
1224:  MOVLW  0A
1225:  MOVLB  12
1226:  MOVWF  25
1227:  MOVLP  00
1228:  MOVLB  00
1229:  CALL   6F5
122A:  MOVLP  10
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
122B:  MOVLW  91
122C:  MOVLB  03
122D:  MOVWF  11
122E:  MOVLW  02
122F:  MOVWF  12
1230:  BCF    03.0
1231:  MOVLW  13
1232:  MOVLB  11
1233:  MOVWF  51
1234:  MOVLP  08
1235:  MOVLB  00
1236:  CALL   2E4
1237:  MOVLP  10
1238:  MOVLW  0C
1239:  MOVLB  11
123A:  MOVWF  51
123B:  MOVLW  37
123C:  MOVWF  52
123D:  MOVLP  08
123E:  MOVLB  00
123F:  CALL   699
1240:  MOVLP  10
1241:  MOVLW  0D
1242:  MOVLB  12
1243:  MOVWF  25
1244:  MOVLP  00
1245:  MOVLB  00
1246:  CALL   6F5
1247:  MOVLP  10
1248:  MOVLW  0A
1249:  MOVLB  12
124A:  MOVWF  25
124B:  MOVLP  00
124C:  MOVLB  00
124D:  CALL   6F5
124E:  MOVLP  10
....................       return FALSE;  
124F:  MOVLW  00
1250:  MOVWF  78
1251:  GOTO   252
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
1305:  MOVLW  AA
1306:  MOVLB  0F
1307:  MOVWF  60
....................    data[1] = (BOSS_PIC << 4) | frame_id;
1308:  MOVF   5C,W
1309:  IORLW  50
130A:  MOVWF  61
....................    memcpy(&data[2], content, size);
130B:  MOVF   5E,W
130C:  MOVWF  05
130D:  MOVF   5D,W
130E:  MOVWF  04
130F:  MOVF   5F,W
1310:  MOVWF  78
1311:  BTFSS  03.2
1312:  GOTO   315
1313:  MOVLB  00
1314:  GOTO   31E
1315:  MOVLW  24
1316:  MOVWF  07
1317:  MOVLW  F2
1318:  MOVWF  06
1319:  MOVLB  00
131A:  MOVIW  [FSR0++],W
131B:  MOVWI  W,[FSR1++]
131C:  DECFSZ 78,F
131D:  GOTO   31A
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
131E:  MOVLW  02
131F:  MOVLB  0F
1320:  ADDWF  5F,W
1321:  MOVLB  10
1322:  MOVWF  20
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
1323:  MOVLW  F0
1324:  ADDWF  20,W
1325:  MOVWF  22
1326:  MOVLW  24
1327:  MOVWF  23
1328:  BTFSC  03.0
1329:  INCF   23,F
132A:  MOVLW  01
132B:  SUBWF  20,W
132C:  MOVWF  24
132D:  MOVLW  24
132E:  MOVWF  44
132F:  MOVLW  F1
1330:  MOVWF  43
1331:  MOVF   24,W
1332:  MOVWF  45
1333:  MOVLP  08
1334:  MOVLB  00
1335:  CALL   6D1
1336:  MOVLP  10
1337:  MOVLB  10
1338:  MOVF   23,W
1339:  MOVWF  05
133A:  MOVF   22,W
133B:  MOVWF  04
133C:  MOVF   78,W
133D:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
133E:  MOVLW  01
133F:  ADDWF  20,W
1340:  MOVWF  21
....................    
....................    transmit(data, data_size);
1341:  MOVLW  24
1342:  MOVWF  23
1343:  MOVLW  F0
1344:  MOVWF  22
1345:  MOVF   21,W
1346:  MOVWF  24
1347:  MOVLB  00
*
13A6:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
1348:  MOVLB  10
1349:  CLRF   25
134A:  MOVLB  00
134B:  MOVLB  10
134C:  MOVF   24,W
134D:  SUBWF  25,W
134E:  BTFSS  03.0
134F:  GOTO   352
1350:  MOVLB  00
1351:  GOTO   367
1352:  MOVLB  00
....................       fputc(data[i], BOSS);
1353:  MOVLB  10
1354:  MOVF   25,W
1355:  ADDWF  22,W
1356:  MOVWF  04
1357:  MOVLW  00
1358:  ADDWFC 23,W
1359:  MOVWF  05
135A:  MOVF   00,W
135B:  MOVWF  27
135C:  MOVF   27,W
135D:  MOVLB  00
*
1363:  MOVLB  10
1364:  INCF   25,F
1365:  MOVLB  00
1366:  GOTO   34B
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
1367:  MOVLW  9D
1368:  MOVLB  03
1369:  MOVWF  11
136A:  MOVLW  02
136B:  MOVWF  12
136C:  MOVLP  00
136D:  MOVLB  00
136E:  CALL   71D
136F:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
1370:  MOVLB  10
1371:  CLRF   26
1372:  MOVLB  00
1373:  MOVLB  10
1374:  MOVF   24,W
1375:  SUBWF  26,W
1376:  BTFSS  03.0
1377:  GOTO   37A
1378:  MOVLB  00
1379:  GOTO   398
137A:  MOVLB  00
....................       fprintf(PC, "%X ", data[i]);
137B:  MOVLB  10
137C:  MOVF   26,W
137D:  ADDWF  22,W
137E:  MOVWF  04
137F:  MOVLW  00
1380:  ADDWFC 23,W
1381:  MOVWF  05
1382:  MOVF   00,W
1383:  MOVWF  27
1384:  MOVF   27,W
1385:  MOVLB  11
1386:  MOVWF  51
1387:  MOVLW  37
1388:  MOVWF  52
1389:  MOVLP  08
138A:  MOVLB  00
138B:  CALL   699
138C:  MOVLP  10
138D:  MOVLW  20
138E:  MOVLB  12
138F:  MOVWF  25
1390:  MOVLP  00
1391:  MOVLB  00
1392:  CALL   6F5
1393:  MOVLP  10
1394:  MOVLB  10
1395:  INCF   26,F
1396:  MOVLB  00
1397:  GOTO   373
....................    fprintf(PC, "\r\n");
1398:  MOVLW  0D
1399:  MOVLB  12
139A:  MOVWF  25
139B:  MOVLP  00
139C:  MOVLB  00
139D:  CALL   6F5
139E:  MOVLP  10
139F:  MOVLW  0A
13A0:  MOVLB  12
13A1:  MOVWF  25
13A2:  MOVLP  00
13A3:  MOVLB  00
13A4:  CALL   6F5
13A5:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0ED1:  MOVLB  10
0ED2:  MOVF   43,W
0ED3:  MOVWF  04
0ED4:  MOVF   44,W
0ED5:  MOVWF  05
0ED6:  ADDFSR 00,FSR0
0ED7:  MOVF   00,W
0ED8:  MOVWF  46
0ED9:  MOVLW  01
0EDA:  MOVWF  47
0EDB:  MOVLB  00
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0EDC:  MOVLB  10
0EDD:  MOVF   45,W
0EDE:  SUBWF  47,W
0EDF:  BTFSS  03.0
0EE0:  GOTO   6E3
0EE1:  MOVLB  00
0EE2:  GOTO   6F0
0EE3:  MOVLB  00
....................       crc ^= frame[i++];
0EE4:  MOVLB  10
0EE5:  MOVF   47,W
0EE6:  INCF   47,F
0EE7:  ADDWF  43,W
0EE8:  MOVWF  04
0EE9:  MOVLW  00
0EEA:  ADDWFC 44,W
0EEB:  MOVWF  05
0EEC:  MOVF   00,W
0EED:  XORWF  46,F
0EEE:  MOVLB  00
0EEF:  GOTO   6DC
....................    return crc;
0EF0:  MOVLB  10
0EF1:  MOVF   46,W
0EF2:  MOVWF  78
0EF3:  MOVLB  00
0EF4:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0F70:  MOVLW  0F
0F71:  MOVLB  0F
0F72:  MOVWF  5C
0F73:  CLRF   5E
0F74:  CLRF   5D
0F75:  CLRF   5F
0F76:  MOVLP  10
0F77:  MOVLB  00
0F78:  CALL   305
0F79:  MOVLP  08
0F7A:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
1774:  MOVLW  03
1775:  MOVLB  0F
1776:  MOVWF  5C
1777:  MOVLW  20
1778:  MOVWF  5E
1779:  MOVLW  09
177A:  MOVWF  5D
177B:  MOVLW  04
177C:  MOVWF  5F
177D:  MOVLB  00
177E:  CALL   305
177F:  MOVLP  10
1780:  GOTO   794 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... union AD7490_RESISTOR reg;
.................... struct AD7490_STREAM adf7490_stream;
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     // Set default register values
....................     reg.coding = 0; // 1: Two's complement, 0: Binary
*
07CC:  MOVLB  0F
07CD:  BCF    2A.0
....................     reg.write = 1;
07CE:  BSF    2B.3
....................     reg.seq = 0; 
07CF:  BCF    2B.2
....................     reg.randge = 0;
07D0:  BCF    2A.1
....................     reg.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
07D1:  BCF    2A.2
....................     reg.shadow = 0; // 1: Shadow register, 0: Direct access
07D2:  BCF    2A.3
07D3:  MOVLB  00
07D4:  MOVLP  30
07D5:  GOTO   51C (RETURN)
.................... 
.................... }
.................... 
.................... unsigned int16 ad7490_read(int16 channel)
.................... {   
....................     set_add(channel);
*
0F7B:  MOVLB  0F
0F7C:  MOVF   6B,W
0F7D:  MOVWF  6F
0F7E:  MOVF   6A,W
0F7F:  MOVWF  6E
0F80:  MOVLB  00
....................     set_pm(AD7490_PM_NORMAL);
*
0FD2:  MOVLB  0F
0FD3:  CLRF   6E
0FD4:  MOVLB  00
....................     //spi_xfer(adf7490_stream.spi_stream, reg.value); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] << %04X\r\n", reg.value);
....................     #endif
....................     
....................     //unsigned int16 ans = spi_xfer(adf7490_stream.spi_stream);
....................     //unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata = 0;
*
0FE4:  MOVLB  0F
0FE5:  CLRF   6D
0FE6:  CLRF   6C
....................     
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC,"\t[ADC] >> %04X\r\n", readdata);
....................     #endif
....................     return readdata;
0FE7:  MOVF   6C,W
0FE8:  MOVWF  78
0FE9:  MOVF   6D,W
0FEA:  MOVWF  79
0FEB:  MOVLB  00
0FEC:  RETURN
.................... }
.................... 
.................... void set_add(int16 channel)
.................... {
....................     reg.add0 = (channel >> 0) & 0x1;
*
0F81:  MOVLB  0F
0F82:  MOVF   6F,W
0F83:  MOVLB  10
0F84:  MOVWF  21
0F85:  MOVLB  0F
0F86:  MOVF   6E,W
0F87:  MOVLB  10
0F88:  MOVWF  20
0F89:  MOVF   20,W
0F8A:  ANDLW  01
0F8B:  MOVWF  77
0F8C:  CLRF   7A
0F8D:  MOVF   77,W
0F8E:  MOVWF  78
0F8F:  MOVLB  0F
0F90:  BCF    2A.6
0F91:  BTFSC  78.0
0F92:  BSF    2A.6
....................     reg.add1 = (channel >> 1) & 0x1;
0F93:  BCF    03.0
0F94:  RRF    6F,W
0F95:  MOVLB  10
0F96:  MOVWF  21
0F97:  MOVLB  0F
0F98:  RRF    6E,W
0F99:  MOVLB  10
0F9A:  MOVWF  20
0F9B:  MOVF   20,W
0F9C:  ANDLW  01
0F9D:  MOVWF  77
0F9E:  CLRF   7A
0F9F:  MOVF   77,W
0FA0:  MOVWF  78
0FA1:  MOVLB  0F
0FA2:  BCF    2A.7
0FA3:  BTFSC  78.0
0FA4:  BSF    2A.7
....................     reg.add2 = (channel >> 2) & 0x1;
0FA5:  RRF    6F,W
0FA6:  MOVLB  10
0FA7:  MOVWF  21
0FA8:  MOVLB  0F
0FA9:  RRF    6E,W
0FAA:  MOVLB  10
0FAB:  MOVWF  20
0FAC:  RRF    21,F
0FAD:  RRF    20,F
0FAE:  MOVLW  3F
0FAF:  ANDWF  21,F
0FB0:  MOVF   20,W
0FB1:  ANDLW  01
0FB2:  MOVWF  77
0FB3:  CLRF   7A
0FB4:  MOVF   77,W
0FB5:  MOVWF  78
0FB6:  MOVLB  0F
0FB7:  BCF    2B.0
0FB8:  BTFSC  78.0
0FB9:  BSF    2B.0
....................     reg.add3 = (channel >> 3) & 0x1;
0FBA:  RRF    6F,W
0FBB:  MOVLB  10
0FBC:  MOVWF  21
0FBD:  MOVLB  0F
0FBE:  RRF    6E,W
0FBF:  MOVLB  10
0FC0:  MOVWF  20
0FC1:  RRF    21,F
0FC2:  RRF    20,F
0FC3:  RRF    21,F
0FC4:  RRF    20,F
0FC5:  MOVLW  1F
0FC6:  ANDWF  21,F
0FC7:  MOVF   20,W
0FC8:  ANDLW  01
0FC9:  MOVWF  77
0FCA:  CLRF   7A
0FCB:  MOVF   77,W
0FCC:  MOVWF  78
0FCD:  MOVLB  0F
0FCE:  BCF    2B.1
0FCF:  BTFSC  78.0
0FD0:  BSF    2B.1
0FD1:  MOVLB  00
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.pm0 = (powermode >> 0) & 0x1;
*
0FD5:  MOVLB  0F
0FD6:  MOVF   6E,W
0FD7:  ANDLW  01
0FD8:  MOVWF  78
0FD9:  BCF    2A.4
0FDA:  BTFSC  78.0
0FDB:  BSF    2A.4
....................     reg.pm1 = (powermode >> 1) & 0x1;
0FDC:  BCF    03.0
0FDD:  RRF    6E,W
0FDE:  ANDLW  01
0FDF:  MOVWF  78
0FE0:  BCF    2A.5
0FE1:  BTFSC  78.0
0FE2:  BSF    2A.5
0FE3:  MOVLB  00
....................     
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    
....................    //adc_init();
....................    sweep(sweep_step);
....................    //copy_data();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
13CE:  MOVLW  57
13CF:  MOVLB  03
13D0:  MOVWF  11
13D1:  MOVLW  03
13D2:  MOVWF  12
13D3:  MOVLP  00
13D4:  MOVLB  00
13D5:  CALL   71D
13D6:  MOVLP  10
....................     unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
13D7:  MOVLW  64
13D8:  MOVLB  0F
13D9:  MOVWF  63
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
13DA:  MOVLW  5E
13DB:  MOVLB  03
13DC:  MOVWF  11
13DD:  MOVLW  03
13DE:  MOVWF  12
13DF:  BCF    03.0
13E0:  MOVLW  0E
13E1:  MOVLB  11
13E2:  MOVWF  51
13E3:  MOVLP  08
13E4:  MOVLB  00
13E5:  CALL   2E4
13E6:  MOVLP  10
13E7:  MOVLB  0F
13E8:  MOVF   63,W
13E9:  MOVLB  11
13EA:  MOVWF  3A
13EB:  MOVLW  1B
13EC:  MOVWF  3B
13ED:  MOVLP  08
13EE:  MOVLB  00
13EF:  CALL   6F5
13F0:  MOVLP  10
13F1:  MOVLW  0D
13F2:  MOVLB  12
13F3:  MOVWF  25
13F4:  MOVLP  00
13F5:  MOVLB  00
13F6:  CALL   6F5
13F7:  MOVLP  10
13F8:  MOVLW  0A
13F9:  MOVLB  12
13FA:  MOVWF  25
13FB:  MOVLP  00
13FC:  MOVLB  00
13FD:  CALL   6F5
13FE:  MOVLP  10
....................     output_high(CONNECT_CIGS);
13FF:  MOVLB  01
1400:  BCF    0E.0
1401:  MOVLB  02
1402:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
1403:  MOVLW  20
1404:  MOVWF  78
1405:  MOVLB  01
1406:  MOVF   1D,W
1407:  ANDLW  83
1408:  IORWF  78,W
1409:  MOVWF  1D
140A:  MOVLW  0F
140B:  MOVWF  78
140C:  MOVF   1F,W
140D:  ANDLW  F0
140E:  IORWF  78,W
140F:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
1410:  MOVLW  0D
1411:  MOVWF  77
1412:  MOVLB  00
1413:  DECFSZ 77,F
1414:  GOTO   413
....................     measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
1415:  MOVLB  0F
1416:  CLRF   6B
1417:  CLRF   6A
1418:  MOVLP  08
1419:  MOVLB  00
141A:  CALL   77B
141B:  MOVLP  10
141C:  MOVF   79,W
141D:  MOVLB  0C
141E:  MOVWF  33
141F:  MOVF   78,W
1420:  MOVWF  32
....................     set_adc_channel(TEMP_BOT);
1421:  MOVLW  0C
1422:  MOVWF  78
1423:  MOVLB  01
1424:  MOVF   1D,W
1425:  ANDLW  83
1426:  IORWF  78,W
1427:  MOVWF  1D
1428:  MOVLW  0F
1429:  MOVWF  78
142A:  MOVF   1F,W
142B:  ANDLW  F0
142C:  IORWF  78,W
142D:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
142E:  MOVLW  0D
142F:  MOVWF  77
1430:  MOVLB  00
1431:  DECFSZ 77,F
1432:  GOTO   431
....................     measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
1433:  MOVLB  0F
1434:  CLRF   6B
1435:  CLRF   6A
1436:  MOVLP  08
1437:  MOVLB  00
1438:  CALL   77B
1439:  MOVLP  10
143A:  MOVF   79,W
143B:  MOVLB  0C
143C:  MOVWF  35
143D:  MOVF   78,W
143E:  MOVWF  34
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
143F:  MOVLW  00
1440:  MOVWF  78
1441:  MOVLB  01
1442:  MOVF   1D,W
1443:  ANDLW  83
1444:  IORWF  78,W
1445:  MOVWF  1D
1446:  MOVLW  0F
1447:  MOVWF  78
1448:  MOVF   1F,W
1449:  ANDLW  F0
144A:  IORWF  78,W
144B:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
144C:  MOVLW  0D
144D:  MOVWF  77
144E:  MOVLB  00
144F:  DECFSZ 77,F
1450:  GOTO   44F
....................     measured_pd_start = ad7490_read(AD7490_VIN0); // voltage at adc pin
1451:  MOVLB  0F
1452:  CLRF   6B
1453:  CLRF   6A
1454:  MOVLP  08
1455:  MOVLB  00
1456:  CALL   77B
1457:  MOVLP  10
1458:  MOVF   79,W
1459:  MOVLB  0C
145A:  MOVWF  2F
145B:  MOVF   78,W
145C:  MOVWF  2E
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
145D:  MOVLB  0F
145E:  CLRF   65
145F:  CLRF   64
1460:  MOVLB  00
1461:  MOVLB  0F
1462:  MOVF   65,F
1463:  BTFSC  03.2
1464:  GOTO   467
1465:  MOVLB  00
1466:  GOTO   533
1467:  MOVLB  00
1468:  MOVLB  0F
1469:  MOVF   63,W
146A:  SUBWF  64,W
146B:  BTFSS  03.0
146C:  GOTO   46F
146D:  MOVLB  00
146E:  GOTO   533
146F:  MOVLB  00
....................     {    
....................         // set DAC value
....................         dac_write(count);
1470:  MOVLB  0F
1471:  MOVF   64,W
1472:  MOVLB  02
1473:  MOVWF  19
....................         delay_us(100); // wait for the DAC to stabilize
1474:  MOVLW  85
1475:  MOVWF  77
1476:  MOVLB  00
1477:  DECFSZ 77,F
1478:  GOTO   477
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
1479:  MOVLW  00
147A:  MOVWF  78
147B:  MOVLB  01
147C:  MOVF   1D,W
147D:  ANDLW  83
147E:  IORWF  78,W
147F:  MOVWF  1D
1480:  MOVLW  0F
1481:  MOVWF  78
1482:  MOVF   1F,W
1483:  ANDLW  F0
1484:  IORWF  78,W
1485:  MOVWF  1F
....................         delay_us(10); // wait for the ADC to stabilize
1486:  MOVLW  0D
1487:  MOVWF  77
1488:  MOVLB  00
1489:  DECFSZ 77,F
148A:  GOTO   489
....................         data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
148B:  BCF    03.0
148C:  MOVLB  0F
148D:  RLF    64,W
148E:  MOVWF  68
148F:  RLF    65,W
1490:  MOVWF  69
1491:  BCF    03.0
1492:  RLF    68,W
1493:  MOVWF  79
1494:  RLF    69,W
1495:  MOVWF  7A
1496:  MOVF   79,W
1497:  ADDLW  3A
1498:  MOVWF  78
1499:  MOVLW  20
149A:  ADDWFC 7A,F
149B:  MOVF   78,W
149C:  MOVWF  68
149D:  MOVF   7A,W
149E:  MOVWF  69
149F:  CLRF   6B
14A0:  CLRF   6A
14A1:  MOVLP  08
14A2:  MOVLB  00
14A3:  CALL   77B
14A4:  MOVLP  10
14A5:  MOVLB  0F
14A6:  MOVF   69,W
14A7:  MOVWF  05
14A8:  MOVF   68,W
14A9:  MOVWF  04
14AA:  MOVF   78,W
14AB:  MOVWF  00
14AC:  ADDFSR 01,FSR0
14AD:  MOVF   79,W
14AE:  MOVWF  00
14AF:  ADDFSR 3F,FSR0
....................         
....................         set_adc_channel(CIGS_CURR);
14B0:  MOVLW  04
14B1:  MOVWF  78
14B2:  MOVLB  01
14B3:  MOVF   1D,W
14B4:  ANDLW  83
14B5:  IORWF  78,W
14B6:  MOVWF  1D
14B7:  MOVLW  0F
14B8:  MOVWF  78
14B9:  MOVF   1F,W
14BA:  ANDLW  F0
14BB:  IORWF  78,W
14BC:  MOVWF  1F
....................         current = 0; // reset current value
14BD:  MOVLB  0C
14BE:  CLRF   39
14BF:  CLRF   38
14C0:  CLRF   37
14C1:  CLRF   36
....................         for(int k=0; k<10; k++)
14C2:  MOVLB  0F
14C3:  CLRF   66
14C4:  MOVLB  00
14C5:  MOVLB  0F
14C6:  MOVF   66,W
14C7:  SUBLW  09
14C8:  BTFSC  03.0
14C9:  GOTO   4CC
14CA:  MOVLB  00
14CB:  GOTO   4E8
14CC:  MOVLB  00
....................         {
....................                                             //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
14CD:  MOVLW  0D
14CE:  MOVWF  77
14CF:  DECFSZ 77,F
14D0:  GOTO   4CF
....................             current = current + ad7490_read(AD7490_VIN0); 
14D1:  MOVLB  0F
14D2:  CLRF   6B
14D3:  CLRF   6A
14D4:  MOVLP  08
14D5:  MOVLB  00
14D6:  CALL   77B
14D7:  MOVLP  10
14D8:  MOVF   79,W
14D9:  MOVWF  7A
14DA:  MOVF   78,W
14DB:  MOVLB  0C
14DC:  ADDWF  36,F
14DD:  MOVF   7A,W
14DE:  ADDWFC 37,F
14DF:  MOVLW  00
14E0:  ADDWFC 38,F
14E1:  MOVLW  00
14E2:  ADDWFC 39,F
14E3:  MOVLB  00
14E4:  MOVLB  0F
14E5:  INCF   66,F
14E6:  MOVLB  00
14E7:  GOTO   4C5
....................         }    
....................         
....................         current = current / 10; // average the current value
14E8:  BCF    03.1
14E9:  MOVLB  0C
14EA:  MOVF   39,W
14EB:  MOVLB  11
14EC:  MOVWF  63
14ED:  MOVLB  0C
14EE:  MOVF   38,W
14EF:  MOVLB  11
14F0:  MOVWF  62
14F1:  MOVLB  0C
14F2:  MOVF   37,W
14F3:  MOVLB  11
14F4:  MOVWF  61
14F5:  MOVLB  0C
14F6:  MOVF   36,W
14F7:  MOVLB  11
14F8:  MOVWF  60
14F9:  CLRF   67
14FA:  CLRF   66
14FB:  CLRF   65
14FC:  MOVLW  0A
14FD:  MOVWF  64
14FE:  MOVLP  08
14FF:  MOVLB  00
1500:  CALL   347
1501:  MOVLP  10
1502:  MOVF   7A,W
1503:  MOVLB  0C
1504:  MOVWF  39
1505:  MOVF   79,W
1506:  MOVWF  38
1507:  MOVF   78,W
1508:  MOVWF  37
1509:  MOVF   77,W
150A:  MOVWF  36
.................... 
....................         delay_us(10); // wait for the ADC to stabilize
150B:  MOVLW  0D
150C:  MOVWF  77
150D:  MOVLB  00
150E:  DECFSZ 77,F
150F:  GOTO   50E
....................         data_buffer[count*2+1] = current; // store the current value in the buffer
1510:  BCF    03.0
1511:  MOVLB  0F
1512:  RLF    64,W
1513:  MOVWF  68
1514:  RLF    65,W
1515:  MOVWF  69
1516:  MOVLW  01
1517:  ADDWF  68,F
1518:  MOVLW  00
1519:  ADDWFC 69,F
151A:  BCF    03.0
151B:  RLF    68,W
151C:  MOVWF  79
151D:  RLF    69,W
151E:  MOVWF  7A
151F:  MOVF   79,W
1520:  ADDLW  3A
1521:  MOVWF  04
1522:  MOVLW  20
1523:  ADDWFC 7A,W
1524:  MOVWF  05
1525:  MOVLB  0C
1526:  MOVF   36,W
1527:  MOVWF  00
1528:  ADDFSR 01,FSR0
1529:  MOVF   37,W
152A:  MOVWF  00
152B:  ADDFSR 3F,FSR0
152C:  MOVLB  00
152D:  MOVLB  0F
152E:  INCF   64,F
152F:  BTFSC  03.2
1530:  INCF   65,F
1531:  MOVLB  00
1532:  GOTO   461
....................         //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
1533:  MOVLW  68
1534:  MOVLB  03
1535:  MOVWF  11
1536:  MOVLW  03
1537:  MOVWF  12
1538:  MOVLP  00
1539:  MOVLB  00
153A:  CALL   71D
153B:  MOVLP  10
....................     // read PD value
....................     set_adc_channel(PD);
153C:  MOVLW  00
153D:  MOVWF  78
153E:  MOVLB  01
153F:  MOVF   1D,W
1540:  ANDLW  83
1541:  IORWF  78,W
1542:  MOVWF  1D
1543:  MOVLW  0F
1544:  MOVWF  78
1545:  MOVF   1F,W
1546:  ANDLW  F0
1547:  IORWF  78,W
1548:  MOVWF  1F
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
1549:  BSF    1D.1
154A:  MOVLB  00
154B:  MOVLB  01
154C:  BTFSS  1D.1
154D:  GOTO   550
154E:  MOVLB  00
154F:  GOTO   54B
1550:  MOVLB  0C
1551:  CLRF   31
1552:  MOVLB  01
1553:  MOVF   1C,W
1554:  MOVLB  0C
1555:  MOVWF  30
.................... 
....................     convert_cigs_data(measurement_step);
1556:  MOVLB  0F
1557:  MOVF   63,W
1558:  MOVWF  68
1559:  MOVLB  00
....................     //convert_header_data();    
....................     output_low(CONNECT_CIGS);
*
16B9:  MOVLB  01
16BA:  BCF    0E.0
16BB:  MOVLB  02
16BC:  BCF    0E.0
16BD:  MOVLB  00
16BE:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... /*
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all()
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase All\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector()
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_copy_1sector()
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
.................... }
.................... */
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... #define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
2A1C:  MOVLW  A3
2A1D:  MOVLB  03
2A1E:  MOVWF  11
2A1F:  MOVLW  03
2A20:  MOVWF  12
2A21:  MOVLP  00
2A22:  MOVLB  00
2A23:  CALL   71D
2A24:  MOVLP  28
....................     fprintf(PC, "___Start copy_data__\r\n");
2A25:  MOVLW  B0
2A26:  MOVLB  03
2A27:  MOVWF  11
2A28:  MOVLW  03
2A29:  MOVWF  12
2A2A:  MOVLP  00
2A2B:  MOVLB  00
2A2C:  CALL   71D
2A2D:  MOVLP  28
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
2A2E:  MOVLB  10
2A2F:  CLRF   4C
2A30:  MOVLB  00
2A31:  MOVLP  08
2A32:  CALL   7ED
2A33:  MOVLP  28
2A34:  MOVF   78,F
2A35:  BTFSS  03.2
2A36:  GOTO   3C0
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
2A37:  MOVLW  BC
2A38:  MOVLB  03
2A39:  MOVWF  11
2A3A:  MOVLW  03
2A3B:  MOVWF  12
2A3C:  BCF    03.0
2A3D:  MOVLW  07
2A3E:  MOVLB  11
2A3F:  MOVWF  51
2A40:  MOVLP  08
2A41:  MOVLB  00
2A42:  CALL   2E4
2A43:  MOVLP  28
2A44:  MOVLB  10
2A45:  MOVF   4C,W
2A46:  MOVLB  11
2A47:  MOVWF  4E
2A48:  MOVLW  18
2A49:  MOVWF  4F
2A4A:  MOVLP  08
2A4B:  MOVLB  00
2A4C:  CALL   44B
2A4D:  MOVLP  28
2A4E:  MOVLW  C0
2A4F:  MOVLB  03
2A50:  MOVWF  11
2A51:  MOVLW  03
2A52:  MOVWF  12
2A53:  BSF    03.0
2A54:  MOVLW  12
2A55:  MOVLB  11
2A56:  MOVWF  51
2A57:  MOVLP  08
2A58:  MOVLB  00
2A59:  CALL   2E4
2A5A:  MOVLP  28
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
2A5B:  MOVLP  10
2A5C:  GOTO   7AA
2A5D:  MOVLP  28
2A5E:  MOVF   79,W
2A5F:  MOVLB  10
2A60:  MOVWF  4E
2A61:  MOVF   78,W
2A62:  MOVWF  4D
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
2A63:  MOVF   4E,W
2A64:  MOVLB  11
2A65:  MOVWF  31
2A66:  MOVLB  10
2A67:  MOVF   4D,W
2A68:  MOVLB  11
2A69:  MOVWF  30
2A6A:  MOVLW  25
2A6B:  MOVWF  33
2A6C:  MOVLW  2F
2A6D:  MOVWF  32
2A6E:  MOVLW  25
2A6F:  MOVWF  35
2A70:  MOVLW  38
2A71:  MOVWF  34
2A72:  MOVLW  25
2A73:  MOVWF  37
2A74:  MOVLW  3C
2A75:  MOVWF  36
2A76:  MOVLW  25
2A77:  MOVWF  39
2A78:  MOVLW  40
2A79:  MOVWF  38
2A7A:  MOVLW  25
2A7B:  MOVWF  3B
2A7C:  MOVLW  44
2A7D:  MOVWF  3A
2A7E:  MOVLW  25
2A7F:  MOVWF  3D
2A80:  MOVLW  48
2A81:  MOVWF  3C
2A82:  MOVLW  25
2A83:  MOVWF  3F
2A84:  MOVLW  49
2A85:  MOVWF  3E
2A86:  MOVLP  18
2A87:  MOVLB  00
2A88:  GOTO   1AF
2A89:  MOVLP  28
....................         status[i+1] = mission_type.mission_flag;
2A8A:  MOVLW  01
2A8B:  MOVLB  10
2A8C:  ADDWF  4C,W
2A8D:  ADDLW  09
2A8E:  MOVWF  04
2A8F:  MOVLW  20
2A90:  MOVWF  05
2A91:  BTFSC  03.0
2A92:  INCF   05,F
2A93:  MOVF   57,W
2A94:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
2A95:  MOVF   58,W
2A96:  MOVLB  11
2A97:  MOVWF  20
2A98:  MOVLW  10
2A99:  MOVLB  10
2A9A:  ADDWF  59,W
2A9B:  MOVLB  11
2A9C:  MOVWF  21
2A9D:  MOVLW  00
2A9E:  MOVLB  10
2A9F:  ADDWFC 5A,W
2AA0:  MOVLB  11
2AA1:  MOVWF  22
2AA2:  MOVLW  00
2AA3:  MOVLB  10
2AA4:  ADDWFC 5B,W
2AA5:  MOVLB  11
2AA6:  MOVWF  23
2AA7:  MOVLB  10
2AA8:  MOVF   5F,W
2AA9:  MOVLB  11
2AAA:  MOVWF  27
2AAB:  MOVLB  10
2AAC:  MOVF   5E,W
2AAD:  MOVLB  11
2AAE:  MOVWF  26
2AAF:  MOVLB  10
2AB0:  MOVF   5D,W
2AB1:  MOVLB  11
2AB2:  MOVWF  25
2AB3:  MOVLB  10
2AB4:  MOVF   5C,W
2AB5:  MOVLB  11
2AB6:  MOVWF  24
2AB7:  MOVF   20,W
2AB8:  SUBWF  24,W
2AB9:  MOVWF  28
2ABA:  MOVF   21,W
2ABB:  SUBWFC 25,W
2ABC:  MOVWF  29
2ABD:  MOVF   22,W
2ABE:  SUBWFC 26,W
2ABF:  MOVWF  2A
2AC0:  MOVF   23,W
2AC1:  SUBWFC 27,W
2AC2:  MOVWF  2B
2AC3:  MOVLB  10
2AC4:  MOVF   69,W
2AC5:  MOVLB  11
2AC6:  ADDWF  20,W
2AC7:  MOVWF  2C
2AC8:  MOVLB  10
2AC9:  MOVF   6A,W
2ACA:  MOVLB  11
2ACB:  ADDWFC 21,W
2ACC:  MOVWF  2D
2ACD:  MOVLB  10
2ACE:  MOVF   6B,W
2ACF:  MOVLB  11
2AD0:  ADDWFC 22,W
2AD1:  MOVWF  2E
2AD2:  MOVLB  10
2AD3:  MOVF   6C,W
2AD4:  MOVLB  11
2AD5:  ADDWFC 23,W
2AD6:  MOVWF  2F
.................... 
....................         if ((used_size + write_size) > data_region_size)
2AD7:  MOVLB  10
2AD8:  MOVF   64,W
2AD9:  ADDWF  69,W
2ADA:  MOVLB  11
2ADB:  MOVWF  30
2ADC:  MOVLB  10
2ADD:  MOVF   65,W
2ADE:  ADDWFC 6A,W
2ADF:  MOVLB  11
2AE0:  MOVWF  31
2AE1:  MOVLB  10
2AE2:  MOVF   66,W
2AE3:  ADDWFC 6B,W
2AE4:  MOVLB  11
2AE5:  MOVWF  32
2AE6:  MOVLB  10
2AE7:  MOVF   67,W
2AE8:  ADDWFC 6C,W
2AE9:  MOVLB  11
2AEA:  MOVWF  33
2AEB:  MOVF   2B,W
2AEC:  SUBWF  33,W
2AED:  BTFSC  03.0
2AEE:  GOTO   2F1
2AEF:  MOVLB  00
2AF0:  GOTO   335
2AF1:  MOVLB  00
2AF2:  BTFSS  03.2
2AF3:  GOTO   310
2AF4:  MOVLB  11
2AF5:  MOVF   2A,W
2AF6:  SUBWF  32,W
2AF7:  BTFSC  03.0
2AF8:  GOTO   2FB
2AF9:  MOVLB  00
2AFA:  GOTO   335
2AFB:  MOVLB  00
2AFC:  BTFSS  03.2
2AFD:  GOTO   310
2AFE:  MOVLB  11
2AFF:  MOVF   29,W
2B00:  SUBWF  31,W
2B01:  BTFSC  03.0
2B02:  GOTO   305
2B03:  MOVLB  00
2B04:  GOTO   335
2B05:  MOVLB  00
2B06:  BTFSS  03.2
2B07:  GOTO   310
2B08:  MOVLB  11
2B09:  MOVF   30,W
2B0A:  SUBWF  28,W
2B0B:  BTFSS  03.0
2B0C:  GOTO   30F
2B0D:  MOVLB  00
2B0E:  GOTO   335
2B0F:  MOVLB  00
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
2B10:  MOVLB  11
2B11:  MOVF   23,W
2B12:  MOVWF  33
2B13:  MOVF   22,W
2B14:  MOVWF  32
2B15:  MOVF   21,W
2B16:  MOVWF  31
2B17:  MOVF   20,W
2B18:  MOVWF  30
2B19:  MOVF   27,W
2B1A:  MOVWF  37
2B1B:  MOVF   26,W
2B1C:  MOVWF  36
2B1D:  MOVF   25,W
2B1E:  MOVWF  35
2B1F:  MOVF   24,W
2B20:  MOVWF  34
2B21:  MOVLP  18
2B22:  MOVLB  00
2B23:  GOTO   680
2B24:  MOVLP  28
....................             loop_count++;
2B25:  MOVLB  10
2B26:  INCF   68,F
....................             used_size = 0;
2B27:  CLRF   6C
2B28:  CLRF   6B
2B29:  CLRF   6A
2B2A:  CLRF   69
....................             data_write_addr = data_region_start;
2B2B:  MOVLB  11
2B2C:  MOVF   23,W
2B2D:  MOVWF  2F
2B2E:  MOVF   22,W
2B2F:  MOVWF  2E
2B30:  MOVF   21,W
2B31:  MOVWF  2D
2B32:  MOVF   20,W
2B33:  MOVWF  2C
2B34:  MOVLB  00
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
2B35:  MOVLB  11
2B36:  MOVF   2F,W
2B37:  MOVWF  33
2B38:  MOVF   2E,W
2B39:  MOVWF  32
2B3A:  MOVF   2D,W
2B3B:  MOVWF  31
2B3C:  MOVF   2C,W
2B3D:  MOVWF  30
2B3E:  MOVLB  10
2B3F:  MOVF   67,W
2B40:  MOVLB  11
2B41:  MOVWF  37
2B42:  MOVLB  10
2B43:  MOVF   66,W
2B44:  MOVLB  11
2B45:  MOVWF  36
2B46:  MOVLB  10
2B47:  MOVF   65,W
2B48:  MOVLB  11
2B49:  MOVWF  35
2B4A:  MOVLB  10
2B4B:  MOVF   64,W
2B4C:  MOVLB  11
2B4D:  MOVWF  34
2B4E:  MOVLB  10
2B4F:  MOVF   5F,W
2B50:  MOVLB  11
2B51:  MOVWF  3B
2B52:  MOVLB  10
2B53:  MOVF   5E,W
2B54:  MOVLB  11
2B55:  MOVWF  3A
2B56:  MOVLB  10
2B57:  MOVF   5D,W
2B58:  MOVLB  11
2B59:  MOVWF  39
2B5A:  MOVLB  10
2B5B:  MOVF   5C,W
2B5C:  MOVLB  11
2B5D:  MOVWF  38
2B5E:  MOVLP  18
2B5F:  MOVLB  00
2B60:  GOTO   6E0
2B61:  MOVLP  28
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
2B62:  MOVLB  10
2B63:  MOVF   63,W
2B64:  MOVLB  11
2B65:  MOVWF  33
2B66:  MOVLB  10
2B67:  MOVF   62,W
2B68:  MOVLB  11
2B69:  MOVWF  32
2B6A:  MOVLB  10
2B6B:  MOVF   61,W
2B6C:  MOVLB  11
2B6D:  MOVWF  31
2B6E:  MOVLB  10
2B6F:  MOVF   60,W
2B70:  MOVLB  11
2B71:  MOVWF  30
2B72:  MOVLB  10
2B73:  MOVF   67,W
2B74:  MOVLB  11
2B75:  MOVWF  37
2B76:  MOVLB  10
2B77:  MOVF   66,W
2B78:  MOVLB  11
2B79:  MOVWF  36
2B7A:  MOVLB  10
2B7B:  MOVF   65,W
2B7C:  MOVLB  11
2B7D:  MOVWF  35
2B7E:  MOVLB  10
2B7F:  MOVF   64,W
2B80:  MOVLB  11
2B81:  MOVWF  34
2B82:  MOVF   2F,W
2B83:  MOVWF  3B
2B84:  MOVF   2E,W
2B85:  MOVWF  3A
2B86:  MOVF   2D,W
2B87:  MOVWF  39
2B88:  MOVF   2C,W
2B89:  MOVWF  38
2B8A:  MOVLW  24
2B8B:  MOVWF  3D
2B8C:  MOVLW  EC
2B8D:  MOVWF  3C
2B8E:  MOVLW  25
2B8F:  MOVWF  3F
2B90:  MOVLW  49
2B91:  MOVWF  3E
2B92:  MOVLP  20
2B93:  MOVLB  00
2B94:  GOTO   495
2B95:  MOVLP  28
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
2B96:  MOVLB  10
2B97:  MOVF   5B,W
2B98:  MOVLB  11
2B99:  MOVWF  33
2B9A:  MOVLB  10
2B9B:  MOVF   5A,W
2B9C:  MOVLB  11
2B9D:  MOVWF  32
2B9E:  MOVLB  10
2B9F:  MOVF   59,W
2BA0:  MOVLB  11
2BA1:  MOVWF  31
2BA2:  MOVLB  10
2BA3:  MOVF   58,W
2BA4:  MOVLB  11
2BA5:  MOVWF  30
2BA6:  MOVLB  10
2BA7:  MOVF   6C,W
2BA8:  MOVLB  11
2BA9:  MOVWF  37
2BAA:  MOVLB  10
2BAB:  MOVF   6B,W
2BAC:  MOVLB  11
2BAD:  MOVWF  36
2BAE:  MOVLB  10
2BAF:  MOVF   6A,W
2BB0:  MOVLB  11
2BB1:  MOVWF  35
2BB2:  MOVLB  10
2BB3:  MOVF   69,W
2BB4:  MOVLB  11
2BB5:  MOVWF  34
2BB6:  MOVLB  10
2BB7:  MOVF   68,W
2BB8:  MOVLB  11
2BB9:  MOVWF  38
2BBA:  MOVLB  00
2BBB:  GOTO   000
2BBC:  MOVLB  10
2BBD:  INCF   4C,F
2BBE:  MOVLB  00
2BBF:  GOTO   231
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
2BC0:  MOVLW  CA
2BC1:  MOVLB  03
2BC2:  MOVWF  11
2BC3:  MOVLW  03
2BC4:  MOVWF  12
2BC5:  MOVLP  00
2BC6:  MOVLB  00
2BC7:  CALL   71D
2BC8:  MOVLP  28
....................     fprintf(PC, "____________________\r\n\r\n");
2BC9:  MOVLW  D7
2BCA:  MOVLB  03
2BCB:  MOVWF  11
2BCC:  MOVLW  03
2BCD:  MOVWF  12
2BCE:  MOVLP  00
2BCF:  MOVLB  00
2BD0:  CALL   71D
2BD1:  MOVLP  28
2BD2:  MOVLP  18
2BD3:  GOTO   7AB (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
19AF:  MOVLB  11
19B0:  MOVF   33,W
19B1:  MOVWF  7A
19B2:  MOVF   32,W
19B3:  MOVWF  49
19B4:  MOVF   7A,W
19B5:  MOVWF  4A
19B6:  MOVF   30,W
19B7:  MOVWF  04
19B8:  MOVF   31,W
19B9:  MOVWF  05
19BA:  ADDFSR 00,FSR0
19BB:  MOVF   00,W
19BC:  MOVWF  4B
19BD:  MOVF   4B,W
19BE:  MOVWF  52
19BF:  MOVLB  00
19C0:  GOTO   000
19C1:  MOVF   79,W
19C2:  MOVWF  7A
19C3:  MOVF   78,W
19C4:  MOVWF  04
19C5:  MOVF   7A,W
19C6:  MOVWF  05
19C7:  MOVLW  09
19C8:  MOVWF  78
19C9:  MOVLB  11
19CA:  MOVF   4A,W
19CB:  MOVWF  07
19CC:  MOVF   49,W
19CD:  MOVWF  06
19CE:  MOVLB  00
19CF:  MOVIW  [FSR0++],W
19D0:  MOVWI  W,[FSR1++]
19D1:  DECFSZ 78,F
19D2:  GOTO   1CF
....................     *mis_start_address = mission_type->start_address;
19D3:  MOVLB  11
19D4:  MOVF   35,W
19D5:  MOVWF  7A
19D6:  MOVF   34,W
19D7:  MOVWF  49
19D8:  MOVF   7A,W
19D9:  MOVWF  4A
19DA:  MOVF   32,W
19DB:  MOVWF  04
19DC:  MOVF   33,W
19DD:  MOVWF  05
19DE:  ADDFSR 00,FSR0
19DF:  MOVF   00,W
19E0:  MOVWF  77
19E1:  ADDFSR 01,FSR0
19E2:  MOVF   00,W
19E3:  MOVWF  78
19E4:  ADDFSR 01,FSR0
19E5:  MOVF   00,W
19E6:  MOVWF  79
19E7:  ADDFSR 01,FSR0
19E8:  MOVF   00,W
19E9:  MOVWF  7A
19EA:  ADDFSR 3D,FSR0
19EB:  MOVF   7A,W
19EC:  MOVWF  4E
19ED:  MOVF   79,W
19EE:  MOVWF  4D
19EF:  MOVF   78,W
19F0:  MOVWF  4C
19F1:  MOVF   77,W
19F2:  MOVWF  4B
19F3:  MOVF   4A,W
19F4:  MOVWF  05
19F5:  MOVF   49,W
19F6:  MOVWF  04
19F7:  MOVF   4B,W
19F8:  MOVWF  00
19F9:  ADDFSR 01,FSR0
19FA:  MOVF   4C,W
19FB:  MOVWF  00
19FC:  ADDFSR 01,FSR0
19FD:  MOVF   4D,W
19FE:  MOVWF  00
19FF:  ADDFSR 01,FSR0
1A00:  MOVF   4E,W
1A01:  MOVWF  00
1A02:  ADDFSR 3D,FSR0
....................     *mis_end_address = mission_type->end_address;
1A03:  MOVF   37,W
1A04:  MOVWF  7A
1A05:  MOVF   36,W
1A06:  MOVWF  49
1A07:  MOVF   7A,W
1A08:  MOVWF  4A
1A09:  MOVF   32,W
1A0A:  MOVWF  04
1A0B:  MOVF   33,W
1A0C:  MOVWF  05
1A0D:  ADDFSR 04,FSR0
1A0E:  MOVF   00,W
1A0F:  MOVWF  77
1A10:  ADDFSR 01,FSR0
1A11:  MOVF   00,W
1A12:  MOVWF  78
1A13:  ADDFSR 01,FSR0
1A14:  MOVF   00,W
1A15:  MOVWF  79
1A16:  ADDFSR 01,FSR0
1A17:  MOVF   00,W
1A18:  MOVWF  7A
1A19:  ADDFSR 3D,FSR0
1A1A:  MOVF   7A,W
1A1B:  MOVWF  4E
1A1C:  MOVF   79,W
1A1D:  MOVWF  4D
1A1E:  MOVF   78,W
1A1F:  MOVWF  4C
1A20:  MOVF   77,W
1A21:  MOVWF  4B
1A22:  MOVF   4A,W
1A23:  MOVWF  05
1A24:  MOVF   49,W
1A25:  MOVWF  04
1A26:  MOVF   4B,W
1A27:  MOVWF  00
1A28:  ADDFSR 01,FSR0
1A29:  MOVF   4C,W
1A2A:  MOVWF  00
1A2B:  ADDFSR 01,FSR0
1A2C:  MOVF   4D,W
1A2D:  MOVWF  00
1A2E:  ADDFSR 01,FSR0
1A2F:  MOVF   4E,W
1A30:  MOVWF  00
1A31:  ADDFSR 3D,FSR0
....................     *write_src = smf_data->src;
1A32:  MOVF   39,W
1A33:  MOVWF  7A
1A34:  MOVF   38,W
1A35:  MOVWF  49
1A36:  MOVF   7A,W
1A37:  MOVWF  4A
1A38:  MOVF   30,W
1A39:  MOVWF  04
1A3A:  MOVF   31,W
1A3B:  MOVWF  05
1A3C:  ADDFSR 01,FSR0
1A3D:  MOVF   00,W
1A3E:  MOVWF  77
1A3F:  ADDFSR 01,FSR0
1A40:  MOVF   00,W
1A41:  MOVWF  78
1A42:  ADDFSR 01,FSR0
1A43:  MOVF   00,W
1A44:  MOVWF  79
1A45:  ADDFSR 01,FSR0
1A46:  MOVF   00,W
1A47:  MOVWF  7A
1A48:  ADDFSR 3D,FSR0
1A49:  MOVF   7A,W
1A4A:  MOVWF  4E
1A4B:  MOVF   79,W
1A4C:  MOVWF  4D
1A4D:  MOVF   78,W
1A4E:  MOVWF  4C
1A4F:  MOVF   77,W
1A50:  MOVWF  4B
1A51:  MOVF   4A,W
1A52:  MOVWF  05
1A53:  MOVF   49,W
1A54:  MOVWF  04
1A55:  MOVF   4B,W
1A56:  MOVWF  00
1A57:  ADDFSR 01,FSR0
1A58:  MOVF   4C,W
1A59:  MOVWF  00
1A5A:  ADDFSR 01,FSR0
1A5B:  MOVF   4D,W
1A5C:  MOVWF  00
1A5D:  ADDFSR 01,FSR0
1A5E:  MOVF   4E,W
1A5F:  MOVWF  00
1A60:  ADDFSR 3D,FSR0
....................     *write_size = smf_data->size;
1A61:  MOVF   3B,W
1A62:  MOVWF  7A
1A63:  MOVF   3A,W
1A64:  MOVWF  49
1A65:  MOVF   7A,W
1A66:  MOVWF  4A
1A67:  MOVF   30,W
1A68:  MOVWF  04
1A69:  MOVF   31,W
1A6A:  MOVWF  05
1A6B:  ADDFSR 05,FSR0
1A6C:  MOVF   00,W
1A6D:  MOVWF  77
1A6E:  ADDFSR 01,FSR0
1A6F:  MOVF   00,W
1A70:  MOVWF  78
1A71:  ADDFSR 01,FSR0
1A72:  MOVF   00,W
1A73:  MOVWF  79
1A74:  ADDFSR 01,FSR0
1A75:  MOVF   00,W
1A76:  MOVWF  7A
1A77:  ADDFSR 3D,FSR0
1A78:  MOVF   7A,W
1A79:  MOVWF  4E
1A7A:  MOVF   79,W
1A7B:  MOVWF  4D
1A7C:  MOVF   78,W
1A7D:  MOVWF  4C
1A7E:  MOVF   77,W
1A7F:  MOVWF  4B
1A80:  MOVF   4A,W
1A81:  MOVWF  05
1A82:  MOVF   49,W
1A83:  MOVWF  04
1A84:  MOVF   4B,W
1A85:  MOVWF  00
1A86:  ADDFSR 01,FSR0
1A87:  MOVF   4C,W
1A88:  MOVWF  00
1A89:  ADDFSR 01,FSR0
1A8A:  MOVF   4D,W
1A8B:  MOVWF  00
1A8C:  ADDFSR 01,FSR0
1A8D:  MOVF   4E,W
1A8E:  MOVWF  00
1A8F:  ADDFSR 3D,FSR0
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
1A90:  MOVF   35,W
1A91:  MOVWF  7A
1A92:  MOVF   34,W
1A93:  MOVWF  04
1A94:  MOVF   7A,W
1A95:  MOVWF  05
1A96:  MOVF   00,W
1A97:  MOVWF  49
1A98:  ADDFSR 01,FSR0
1A99:  MOVF   00,W
1A9A:  MOVWF  4A
1A9B:  ADDFSR 01,FSR0
1A9C:  MOVF   00,W
1A9D:  MOVWF  4B
1A9E:  ADDFSR 01,FSR0
1A9F:  MOVF   00,W
1AA0:  MOVWF  4C
1AA1:  ADDFSR 3D,FSR0
1AA2:  MOVLW  E4
1AA3:  MOVLB  03
1AA4:  MOVWF  11
1AA5:  MOVLW  03
1AA6:  MOVWF  12
1AA7:  BCF    03.0
1AA8:  MOVLW  25
1AA9:  MOVLB  11
1AAA:  MOVWF  51
1AAB:  MOVLP  08
1AAC:  MOVLB  00
1AAD:  CALL   2E4
1AAE:  MOVLP  18
1AAF:  MOVLB  11
1AB0:  MOVF   4C,W
1AB1:  MOVWF  51
1AB2:  MOVLW  37
1AB3:  MOVWF  52
1AB4:  MOVLP  08
1AB5:  MOVLB  00
1AB6:  CALL   699
1AB7:  MOVLP  18
1AB8:  MOVLB  11
1AB9:  MOVF   4B,W
1ABA:  MOVWF  51
1ABB:  MOVLW  37
1ABC:  MOVWF  52
1ABD:  MOVLP  08
1ABE:  MOVLB  00
1ABF:  CALL   699
1AC0:  MOVLP  18
1AC1:  MOVLB  11
1AC2:  MOVF   4A,W
1AC3:  MOVWF  51
1AC4:  MOVLW  37
1AC5:  MOVWF  52
1AC6:  MOVLP  08
1AC7:  MOVLB  00
1AC8:  CALL   699
1AC9:  MOVLP  18
1ACA:  MOVLB  11
1ACB:  MOVF   49,W
1ACC:  MOVWF  51
1ACD:  MOVLW  37
1ACE:  MOVWF  52
1ACF:  MOVLP  08
1AD0:  MOVLB  00
1AD1:  CALL   699
1AD2:  MOVLP  18
1AD3:  MOVLW  0D
1AD4:  MOVLB  12
1AD5:  MOVWF  25
1AD6:  MOVLP  00
1AD7:  MOVLB  00
1AD8:  CALL   6F5
1AD9:  MOVLP  18
1ADA:  MOVLW  0A
1ADB:  MOVLB  12
1ADC:  MOVWF  25
1ADD:  MOVLP  00
1ADE:  MOVLB  00
1ADF:  CALL   6F5
1AE0:  MOVLP  18
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
1AE1:  MOVLB  11
1AE2:  MOVF   37,W
1AE3:  MOVWF  7A
1AE4:  MOVF   36,W
1AE5:  MOVWF  04
1AE6:  MOVF   7A,W
1AE7:  MOVWF  05
1AE8:  MOVF   00,W
1AE9:  MOVWF  49
1AEA:  ADDFSR 01,FSR0
1AEB:  MOVF   00,W
1AEC:  MOVWF  4A
1AED:  ADDFSR 01,FSR0
1AEE:  MOVF   00,W
1AEF:  MOVWF  4B
1AF0:  ADDFSR 01,FSR0
1AF1:  MOVF   00,W
1AF2:  MOVWF  4C
1AF3:  ADDFSR 3D,FSR0
1AF4:  MOVLW  FA
1AF5:  MOVLB  03
1AF6:  MOVWF  11
1AF7:  MOVLW  03
1AF8:  MOVWF  12
1AF9:  BCF    03.0
1AFA:  MOVLW  25
1AFB:  MOVLB  11
1AFC:  MOVWF  51
1AFD:  MOVLP  08
1AFE:  MOVLB  00
1AFF:  CALL   2E4
1B00:  MOVLP  18
1B01:  MOVLB  11
1B02:  MOVF   4C,W
1B03:  MOVWF  51
1B04:  MOVLW  37
1B05:  MOVWF  52
1B06:  MOVLP  08
1B07:  MOVLB  00
1B08:  CALL   699
1B09:  MOVLP  18
1B0A:  MOVLB  11
1B0B:  MOVF   4B,W
1B0C:  MOVWF  51
1B0D:  MOVLW  37
1B0E:  MOVWF  52
1B0F:  MOVLP  08
1B10:  MOVLB  00
1B11:  CALL   699
1B12:  MOVLP  18
1B13:  MOVLB  11
1B14:  MOVF   4A,W
1B15:  MOVWF  51
1B16:  MOVLW  37
1B17:  MOVWF  52
1B18:  MOVLP  08
1B19:  MOVLB  00
1B1A:  CALL   699
1B1B:  MOVLP  18
1B1C:  MOVLB  11
1B1D:  MOVF   49,W
1B1E:  MOVWF  51
1B1F:  MOVLW  37
1B20:  MOVWF  52
1B21:  MOVLP  08
1B22:  MOVLB  00
1B23:  CALL   699
1B24:  MOVLP  18
1B25:  MOVLW  0D
1B26:  MOVLB  12
1B27:  MOVWF  25
1B28:  MOVLP  00
1B29:  MOVLB  00
1B2A:  CALL   6F5
1B2B:  MOVLP  18
1B2C:  MOVLW  0A
1B2D:  MOVLB  12
1B2E:  MOVWF  25
1B2F:  MOVLP  00
1B30:  MOVLB  00
1B31:  CALL   6F5
1B32:  MOVLP  18
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
1B33:  MOVLB  11
1B34:  MOVF   39,W
1B35:  MOVWF  7A
1B36:  MOVF   38,W
1B37:  MOVWF  04
1B38:  MOVF   7A,W
1B39:  MOVWF  05
1B3A:  MOVF   00,W
1B3B:  MOVWF  49
1B3C:  ADDFSR 01,FSR0
1B3D:  MOVF   00,W
1B3E:  MOVWF  4A
1B3F:  ADDFSR 01,FSR0
1B40:  MOVF   00,W
1B41:  MOVWF  4B
1B42:  ADDFSR 01,FSR0
1B43:  MOVF   00,W
1B44:  MOVWF  4C
1B45:  ADDFSR 3D,FSR0
1B46:  MOVLW  10
1B47:  MOVLB  03
1B48:  MOVWF  11
1B49:  MOVLW  04
1B4A:  MOVWF  12
1B4B:  BCF    03.0
1B4C:  MOVLW  25
1B4D:  MOVLB  11
1B4E:  MOVWF  51
1B4F:  MOVLP  08
1B50:  MOVLB  00
1B51:  CALL   2E4
1B52:  MOVLP  18
1B53:  MOVLB  11
1B54:  MOVF   4C,W
1B55:  MOVWF  51
1B56:  MOVLW  37
1B57:  MOVWF  52
1B58:  MOVLP  08
1B59:  MOVLB  00
1B5A:  CALL   699
1B5B:  MOVLP  18
1B5C:  MOVLB  11
1B5D:  MOVF   4B,W
1B5E:  MOVWF  51
1B5F:  MOVLW  37
1B60:  MOVWF  52
1B61:  MOVLP  08
1B62:  MOVLB  00
1B63:  CALL   699
1B64:  MOVLP  18
1B65:  MOVLB  11
1B66:  MOVF   4A,W
1B67:  MOVWF  51
1B68:  MOVLW  37
1B69:  MOVWF  52
1B6A:  MOVLP  08
1B6B:  MOVLB  00
1B6C:  CALL   699
1B6D:  MOVLP  18
1B6E:  MOVLB  11
1B6F:  MOVF   49,W
1B70:  MOVWF  51
1B71:  MOVLW  37
1B72:  MOVWF  52
1B73:  MOVLP  08
1B74:  MOVLB  00
1B75:  CALL   699
1B76:  MOVLP  18
1B77:  MOVLW  0D
1B78:  MOVLB  12
1B79:  MOVWF  25
1B7A:  MOVLP  00
1B7B:  MOVLB  00
1B7C:  CALL   6F5
1B7D:  MOVLP  18
1B7E:  MOVLW  0A
1B7F:  MOVLB  12
1B80:  MOVWF  25
1B81:  MOVLP  00
1B82:  MOVLB  00
1B83:  CALL   6F5
1B84:  MOVLP  18
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
1B85:  MOVLB  11
1B86:  MOVF   3B,W
1B87:  MOVWF  7A
1B88:  MOVF   3A,W
1B89:  MOVWF  04
1B8A:  MOVF   7A,W
1B8B:  MOVWF  05
1B8C:  MOVF   00,W
1B8D:  MOVWF  49
1B8E:  ADDFSR 01,FSR0
1B8F:  MOVF   00,W
1B90:  MOVWF  4A
1B91:  ADDFSR 01,FSR0
1B92:  MOVF   00,W
1B93:  MOVWF  4B
1B94:  ADDFSR 01,FSR0
1B95:  MOVF   00,W
1B96:  MOVWF  4C
1B97:  ADDFSR 3D,FSR0
1B98:  MOVLW  26
1B99:  MOVLB  03
1B9A:  MOVWF  11
1B9B:  MOVLW  04
1B9C:  MOVWF  12
1B9D:  BCF    03.0
1B9E:  MOVLW  25
1B9F:  MOVLB  11
1BA0:  MOVWF  51
1BA1:  MOVLP  08
1BA2:  MOVLB  00
1BA3:  CALL   2E4
1BA4:  MOVLP  18
1BA5:  MOVLW  41
1BA6:  MOVWF  04
1BA7:  MOVLB  11
1BA8:  MOVF   4C,W
1BA9:  MOVWF  54
1BAA:  MOVF   4B,W
1BAB:  MOVWF  53
1BAC:  MOVF   4A,W
1BAD:  MOVWF  52
1BAE:  MOVF   49,W
1BAF:  MOVWF  51
1BB0:  MOVLP  08
1BB1:  MOVLB  00
1BB2:  CALL   3B0
1BB3:  MOVLP  18
1BB4:  MOVLW  3A
1BB5:  MOVLB  03
1BB6:  MOVWF  11
1BB7:  MOVLW  04
1BB8:  MOVWF  12
1BB9:  BCF    03.0
1BBA:  MOVLW  04
1BBB:  MOVLB  11
1BBC:  MOVWF  51
1BBD:  MOVLP  08
1BBE:  MOVLB  00
1BBF:  CALL   2E4
1BC0:  MOVLP  18
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
1BC1:  MOVLB  11
1BC2:  MOVF   35,W
1BC3:  MOVWF  7A
1BC4:  MOVF   34,W
1BC5:  MOVWF  04
1BC6:  MOVF   7A,W
1BC7:  MOVWF  05
1BC8:  MOVF   00,W
1BC9:  MOVWF  49
1BCA:  ADDFSR 01,FSR0
1BCB:  MOVF   00,W
1BCC:  MOVWF  4A
1BCD:  ADDFSR 01,FSR0
1BCE:  MOVF   00,W
1BCF:  MOVWF  4B
1BD0:  ADDFSR 01,FSR0
1BD1:  MOVF   00,W
1BD2:  MOVWF  4C
1BD3:  ADDFSR 3D,FSR0
1BD4:  MOVLB  0F
1BD5:  MOVF   23,W
1BD6:  MOVLB  11
1BD7:  MOVWF  55
1BD8:  MOVLB  0F
1BD9:  MOVF   22,W
1BDA:  MOVLB  11
1BDB:  MOVWF  54
1BDC:  MOVLB  0F
1BDD:  MOVF   21,W
1BDE:  MOVLB  11
1BDF:  MOVWF  53
1BE0:  MOVLB  0F
1BE1:  MOVF   20,W
1BE2:  MOVLB  11
1BE3:  MOVWF  52
1BE4:  MOVF   4C,W
1BE5:  MOVWF  59
1BE6:  MOVF   4B,W
1BE7:  MOVWF  58
1BE8:  MOVF   4A,W
1BE9:  MOVWF  57
1BEA:  MOVF   49,W
1BEB:  MOVWF  56
1BEC:  MOVLW  25
1BED:  MOVWF  5B
1BEE:  MOVLW  70
1BEF:  MOVWF  5A
1BF0:  CLRF   5F
1BF1:  CLRF   5E
1BF2:  CLRF   5D
1BF3:  MOVLW  04
1BF4:  MOVWF  5C
1BF5:  MOVLP  08
1BF6:  MOVLB  00
1BF7:  CALL   1B1
1BF8:  MOVLP  18
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
1BF9:  MOVLB  11
1BFA:  MOVF   3F,W
1BFB:  MOVWF  7A
1BFC:  MOVF   3E,W
1BFD:  MOVWF  04
1BFE:  MOVF   7A,W
1BFF:  MOVWF  05
1C00:  CLRF   4E
1C01:  CLRF   4D
1C02:  CLRF   4C
1C03:  MOVF   43,W
1C04:  MOVWF  4B
1C05:  MOVF   4B,W
1C06:  MOVWF  4E
1C07:  CLRF   4B
1C08:  CLRF   4C
1C09:  CLRF   4D
1C0A:  CLRF   53
1C0B:  CLRF   52
1C0C:  CLRF   51
1C0D:  MOVF   42,W
1C0E:  MOVWF  50
1C0F:  MOVF   51,W
1C10:  MOVWF  7A
1C11:  MOVF   50,W
1C12:  MOVWF  79
1C13:  CLRF   77
1C14:  CLRF   78
1C15:  MOVF   77,W
1C16:  IORWF  4B,F
1C17:  MOVF   78,W
1C18:  IORWF  4C,F
1C19:  MOVF   79,W
1C1A:  IORWF  4D,F
1C1B:  MOVF   7A,W
1C1C:  IORWF  4E,F
1C1D:  CLRF   53
1C1E:  CLRF   52
1C1F:  CLRF   51
1C20:  MOVF   41,W
1C21:  MOVWF  50
1C22:  MOVF   52,W
1C23:  MOVWF  7A
1C24:  MOVF   51,W
1C25:  MOVWF  79
1C26:  MOVF   50,W
1C27:  MOVWF  78
1C28:  CLRF   77
1C29:  MOVF   77,W
1C2A:  IORWF  4B,F
1C2B:  MOVF   78,W
1C2C:  IORWF  4C,F
1C2D:  MOVF   79,W
1C2E:  IORWF  4D,F
1C2F:  MOVF   7A,W
1C30:  IORWF  4E,F
1C31:  MOVF   40,W
1C32:  MOVWF  77
1C33:  CLRF   78
1C34:  CLRF   79
1C35:  CLRF   7A
1C36:  MOVF   77,W
1C37:  IORWF  4B,W
1C38:  MOVWF  77
1C39:  MOVF   78,W
1C3A:  IORWF  4C,W
1C3B:  MOVWF  78
1C3C:  MOVF   79,W
1C3D:  IORWF  4D,W
1C3E:  MOVWF  79
1C3F:  MOVF   7A,W
1C40:  IORWF  4E,W
1C41:  MOVWF  7A
1C42:  MOVF   77,W
1C43:  MOVWF  00
1C44:  ADDFSR 01,FSR0
1C45:  MOVF   78,W
1C46:  MOVWF  00
1C47:  ADDFSR 01,FSR0
1C48:  MOVF   79,W
1C49:  MOVWF  00
1C4A:  ADDFSR 01,FSR0
1C4B:  MOVF   7A,W
1C4C:  MOVWF  00
1C4D:  ADDFSR 3D,FSR0
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
1C4E:  MOVF   3D,W
1C4F:  MOVWF  7A
1C50:  MOVF   3C,W
1C51:  MOVWF  49
1C52:  MOVF   7A,W
1C53:  MOVWF  4A
1C54:  MOVF   35,W
1C55:  MOVWF  7A
1C56:  MOVF   34,W
1C57:  MOVWF  04
1C58:  MOVF   7A,W
1C59:  MOVWF  05
1C5A:  MOVF   00,W
1C5B:  MOVWF  4B
1C5C:  ADDFSR 01,FSR0
1C5D:  MOVF   00,W
1C5E:  MOVWF  4C
1C5F:  ADDFSR 01,FSR0
1C60:  MOVF   00,W
1C61:  MOVWF  4D
1C62:  ADDFSR 01,FSR0
1C63:  MOVF   00,W
1C64:  MOVWF  4E
1C65:  ADDFSR 3D,FSR0
1C66:  MOVLW  04
1C67:  ADDWF  4B,F
1C68:  MOVLW  00
1C69:  ADDWFC 4C,F
1C6A:  MOVLW  00
1C6B:  ADDWFC 4D,F
1C6C:  MOVLW  00
1C6D:  ADDWFC 4E,F
1C6E:  MOVLB  0F
1C6F:  MOVF   23,W
1C70:  MOVLB  11
1C71:  MOVWF  52
1C72:  MOVLB  0F
1C73:  MOVF   22,W
1C74:  MOVLB  11
1C75:  MOVWF  51
1C76:  MOVLB  0F
1C77:  MOVF   21,W
1C78:  MOVLB  11
1C79:  MOVWF  50
1C7A:  MOVLB  0F
1C7B:  MOVF   20,W
1C7C:  MOVLB  11
1C7D:  MOVWF  4F
1C7E:  MOVF   4E,W
1C7F:  MOVWF  56
1C80:  MOVF   4D,W
1C81:  MOVWF  55
1C82:  MOVF   4C,W
1C83:  MOVWF  54
1C84:  MOVF   4B,W
1C85:  MOVWF  53
1C86:  MOVLB  00
1C87:  GOTO   091
1C88:  MOVLB  11
1C89:  MOVF   4A,W
1C8A:  MOVWF  05
1C8B:  MOVF   49,W
1C8C:  MOVWF  04
1C8D:  MOVF   78,W
1C8E:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
1C8F:  MOVLW  3D
1C90:  MOVLB  03
1C91:  MOVWF  11
1C92:  MOVLW  04
1C93:  MOVWF  12
1C94:  MOVLP  00
1C95:  MOVLB  00
1C96:  CALL   71D
1C97:  MOVLP  18
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
1C98:  MOVLB  11
1C99:  MOVF   3F,W
1C9A:  MOVWF  7A
1C9B:  MOVF   3E,W
1C9C:  MOVWF  04
1C9D:  MOVF   7A,W
1C9E:  MOVWF  05
1C9F:  MOVF   00,W
1CA0:  MOVWF  49
1CA1:  ADDFSR 01,FSR0
1CA2:  MOVF   00,W
1CA3:  MOVWF  4A
1CA4:  ADDFSR 01,FSR0
1CA5:  MOVF   00,W
1CA6:  MOVWF  4B
1CA7:  ADDFSR 01,FSR0
1CA8:  MOVF   00,W
1CA9:  MOVWF  4C
1CAA:  ADDFSR 3D,FSR0
1CAB:  MOVF   35,W
1CAC:  MOVWF  7A
1CAD:  MOVF   34,W
1CAE:  MOVWF  04
1CAF:  MOVF   7A,W
1CB0:  MOVWF  05
1CB1:  MOVF   00,W
1CB2:  MOVWF  4D
1CB3:  ADDFSR 01,FSR0
1CB4:  MOVF   00,W
1CB5:  MOVWF  4E
1CB6:  ADDFSR 01,FSR0
1CB7:  MOVF   00,W
1CB8:  MOVWF  4F
1CB9:  ADDFSR 01,FSR0
1CBA:  MOVF   00,W
1CBB:  MOVWF  50
1CBC:  ADDFSR 3D,FSR0
1CBD:  MOVLW  46
1CBE:  MOVLB  03
1CBF:  MOVWF  11
1CC0:  MOVLW  04
1CC1:  MOVWF  12
1CC2:  BCF    03.0
1CC3:  MOVLW  0C
1CC4:  MOVLB  11
1CC5:  MOVWF  51
1CC6:  MOVLP  08
1CC7:  MOVLB  00
1CC8:  CALL   2E4
1CC9:  MOVLP  18
1CCA:  MOVLW  41
1CCB:  MOVWF  04
1CCC:  MOVLB  11
1CCD:  MOVF   4C,W
1CCE:  MOVWF  54
1CCF:  MOVF   4B,W
1CD0:  MOVWF  53
1CD1:  MOVF   4A,W
1CD2:  MOVWF  52
1CD3:  MOVF   49,W
1CD4:  MOVWF  51
1CD5:  MOVLP  08
1CD6:  MOVLB  00
1CD7:  CALL   3B0
1CD8:  MOVLP  18
1CD9:  MOVLW  4D
1CDA:  MOVLB  03
1CDB:  MOVWF  11
1CDC:  MOVLW  04
1CDD:  MOVWF  12
1CDE:  BSF    03.0
1CDF:  MOVLW  08
1CE0:  MOVLB  11
1CE1:  MOVWF  51
1CE2:  MOVLP  08
1CE3:  MOVLB  00
1CE4:  CALL   2E4
1CE5:  MOVLP  18
1CE6:  MOVLB  11
1CE7:  MOVF   50,W
1CE8:  MOVWF  51
1CE9:  MOVLW  37
1CEA:  MOVWF  52
1CEB:  MOVLP  08
1CEC:  MOVLB  00
1CED:  CALL   699
1CEE:  MOVLP  18
1CEF:  MOVLB  11
1CF0:  MOVF   4F,W
1CF1:  MOVWF  51
1CF2:  MOVLW  37
1CF3:  MOVWF  52
1CF4:  MOVLP  08
1CF5:  MOVLB  00
1CF6:  CALL   699
1CF7:  MOVLP  18
1CF8:  MOVLB  11
1CF9:  MOVF   4E,W
1CFA:  MOVWF  51
1CFB:  MOVLW  37
1CFC:  MOVWF  52
1CFD:  MOVLP  08
1CFE:  MOVLB  00
1CFF:  CALL   699
1D00:  MOVLP  18
1D01:  MOVLB  11
1D02:  MOVF   4D,W
1D03:  MOVWF  51
1D04:  MOVLW  37
1D05:  MOVWF  52
1D06:  MOVLP  08
1D07:  MOVLB  00
1D08:  CALL   699
1D09:  MOVLP  18
1D0A:  MOVLW  29
1D0B:  MOVLB  12
1D0C:  MOVWF  25
1D0D:  MOVLP  00
1D0E:  MOVLB  00
1D0F:  CALL   6F5
1D10:  MOVLP  18
1D11:  MOVLW  0D
1D12:  MOVLB  12
1D13:  MOVWF  25
1D14:  MOVLP  00
1D15:  MOVLB  00
1D16:  CALL   6F5
1D17:  MOVLP  18
1D18:  MOVLW  0A
1D19:  MOVLB  12
1D1A:  MOVWF  25
1D1B:  MOVLP  00
1D1C:  MOVLB  00
1D1D:  CALL   6F5
1D1E:  MOVLP  18
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
1D1F:  MOVLB  11
1D20:  MOVF   3D,W
1D21:  MOVWF  7A
1D22:  MOVF   3C,W
1D23:  MOVWF  04
1D24:  MOVF   7A,W
1D25:  MOVWF  05
1D26:  MOVF   00,W
1D27:  MOVWF  49
1D28:  MOVF   35,W
1D29:  MOVWF  7A
1D2A:  MOVF   34,W
1D2B:  MOVWF  04
1D2C:  MOVF   7A,W
1D2D:  MOVWF  05
1D2E:  MOVF   00,W
1D2F:  MOVWF  4A
1D30:  ADDFSR 01,FSR0
1D31:  MOVF   00,W
1D32:  MOVWF  4B
1D33:  ADDFSR 01,FSR0
1D34:  MOVF   00,W
1D35:  MOVWF  4C
1D36:  ADDFSR 01,FSR0
1D37:  MOVF   00,W
1D38:  MOVWF  4D
1D39:  ADDFSR 3D,FSR0
1D3A:  MOVLW  04
1D3B:  ADDWF  4A,F
1D3C:  MOVLW  00
1D3D:  ADDWFC 4B,F
1D3E:  MOVLW  00
1D3F:  ADDWFC 4C,F
1D40:  MOVLW  00
1D41:  ADDWFC 4D,F
1D42:  MOVLW  56
1D43:  MOVLB  03
1D44:  MOVWF  11
1D45:  MOVLW  04
1D46:  MOVWF  12
1D47:  BCF    03.0
1D48:  MOVLW  0C
1D49:  MOVLB  11
1D4A:  MOVWF  51
1D4B:  MOVLP  08
1D4C:  MOVLB  00
1D4D:  CALL   2E4
1D4E:  MOVLP  18
1D4F:  MOVLB  11
1D50:  MOVF   49,W
1D51:  MOVWF  4E
1D52:  MOVLW  18
1D53:  MOVWF  4F
1D54:  MOVLP  08
1D55:  MOVLB  00
1D56:  CALL   44B
1D57:  MOVLP  18
1D58:  MOVLW  5D
1D59:  MOVLB  03
1D5A:  MOVWF  11
1D5B:  MOVLW  04
1D5C:  MOVWF  12
1D5D:  BCF    03.0
1D5E:  MOVLW  09
1D5F:  MOVLB  11
1D60:  MOVWF  51
1D61:  MOVLP  08
1D62:  MOVLB  00
1D63:  CALL   2E4
1D64:  MOVLP  18
1D65:  MOVLB  11
1D66:  MOVF   4D,W
1D67:  MOVWF  51
1D68:  MOVLW  37
1D69:  MOVWF  52
1D6A:  MOVLP  08
1D6B:  MOVLB  00
1D6C:  CALL   699
1D6D:  MOVLP  18
1D6E:  MOVLB  11
1D6F:  MOVF   4C,W
1D70:  MOVWF  51
1D71:  MOVLW  37
1D72:  MOVWF  52
1D73:  MOVLP  08
1D74:  MOVLB  00
1D75:  CALL   699
1D76:  MOVLP  18
1D77:  MOVLB  11
1D78:  MOVF   4B,W
1D79:  MOVWF  51
1D7A:  MOVLW  37
1D7B:  MOVWF  52
1D7C:  MOVLP  08
1D7D:  MOVLB  00
1D7E:  CALL   699
1D7F:  MOVLP  18
1D80:  MOVLB  11
1D81:  MOVF   4A,W
1D82:  MOVWF  51
1D83:  MOVLW  37
1D84:  MOVWF  52
1D85:  MOVLP  08
1D86:  MOVLB  00
1D87:  CALL   699
1D88:  MOVLP  18
1D89:  MOVLW  64
1D8A:  MOVLB  03
1D8B:  MOVWF  11
1D8C:  MOVLW  04
1D8D:  MOVWF  12
1D8E:  BCF    03.0
1D8F:  MOVLW  05
1D90:  MOVLB  11
1D91:  MOVWF  51
1D92:  MOVLP  08
1D93:  MOVLB  00
1D94:  CALL   2E4
1D95:  MOVLP  18
1D96:  MOVLP  28
1D97:  GOTO   289 (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
*
1E80:  MOVLW  67
1E81:  MOVLB  03
1E82:  MOVWF  11
1E83:  MOVLW  04
1E84:  MOVWF  12
1E85:  MOVLP  00
1E86:  MOVLB  00
1E87:  CALL   71D
1E88:  MOVLP  18
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
1E89:  MOVLB  11
1E8A:  MOVF   33,W
1E8B:  MOVWF  3B
1E8C:  MOVF   32,W
1E8D:  MOVWF  3A
1E8E:  MOVF   31,W
1E8F:  MOVWF  39
1E90:  MOVF   30,W
1E91:  MOVWF  38
1E92:  MOVLB  00
1E93:  MOVLB  11
1E94:  MOVF   3B,W
1E95:  SUBWF  37,W
1E96:  BTFSC  03.0
1E97:  GOTO   69A
1E98:  MOVLB  00
1E99:  GOTO   6DE
1E9A:  MOVLB  00
1E9B:  BTFSS  03.2
1E9C:  GOTO   6B9
1E9D:  MOVLB  11
1E9E:  MOVF   3A,W
1E9F:  SUBWF  36,W
1EA0:  BTFSC  03.0
1EA1:  GOTO   6A4
1EA2:  MOVLB  00
1EA3:  GOTO   6DE
1EA4:  MOVLB  00
1EA5:  BTFSS  03.2
1EA6:  GOTO   6B9
1EA7:  MOVLB  11
1EA8:  MOVF   39,W
1EA9:  SUBWF  35,W
1EAA:  BTFSC  03.0
1EAB:  GOTO   6AE
1EAC:  MOVLB  00
1EAD:  GOTO   6DE
1EAE:  MOVLB  00
1EAF:  BTFSS  03.2
1EB0:  GOTO   6B9
1EB1:  MOVLB  11
1EB2:  MOVF   34,W
1EB3:  SUBWF  38,W
1EB4:  BTFSS  03.0
1EB5:  GOTO   6B8
1EB6:  MOVLB  00
1EB7:  GOTO   6DE
1EB8:  MOVLB  00
....................         subsector_4kByte_erase(smf, addr);
1EB9:  MOVLB  0F
1EBA:  MOVF   23,W
1EBB:  MOVLB  11
1EBC:  MOVWF  4B
1EBD:  MOVLB  0F
1EBE:  MOVF   22,W
1EBF:  MOVLB  11
1EC0:  MOVWF  4A
1EC1:  MOVLB  0F
1EC2:  MOVF   21,W
1EC3:  MOVLB  11
1EC4:  MOVWF  49
1EC5:  MOVLB  0F
1EC6:  MOVF   20,W
1EC7:  MOVLB  11
1EC8:  MOVWF  48
1EC9:  MOVF   3B,W
1ECA:  MOVWF  4F
1ECB:  MOVF   3A,W
1ECC:  MOVWF  4E
1ECD:  MOVF   39,W
1ECE:  MOVWF  4D
1ECF:  MOVF   38,W
1ED0:  MOVWF  4C
1ED1:  MOVLP  20
1ED2:  MOVLB  00
1ED3:  CALL   000
1ED4:  MOVLP  18
1ED5:  MOVLW  10
1ED6:  MOVLB  11
1ED7:  ADDWF  39,F
1ED8:  MOVLW  00
1ED9:  ADDWFC 3A,F
1EDA:  MOVLW  00
1EDB:  ADDWFC 3B,F
1EDC:  MOVLB  00
1EDD:  GOTO   693
1EDE:  MOVLP  28
1EDF:  GOTO   324 (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
1EE0:  MOVLB  11
1EE1:  CLRF   3C
1EE2:  MOVF   31,W
1EE3:  ANDLW  F0
1EE4:  MOVWF  3D
1EE5:  CLRF   3E
1EE6:  CLRF   3F
1EE7:  MOVF   34,W
1EE8:  ADDWF  30,W
1EE9:  MOVWF  48
1EEA:  MOVF   35,W
1EEB:  ADDWFC 31,W
1EEC:  MOVWF  49
1EED:  MOVF   36,W
1EEE:  ADDWFC 32,W
1EEF:  MOVWF  4A
1EF0:  MOVF   37,W
1EF1:  ADDWFC 33,W
1EF2:  MOVWF  4B
1EF3:  MOVLW  FF
1EF4:  ADDWF  48,F
1EF5:  MOVLW  0F
1EF6:  ADDWFC 49,F
1EF7:  MOVLW  00
1EF8:  ADDWFC 4A,F
1EF9:  MOVLW  00
1EFA:  ADDWFC 4B,F
1EFB:  CLRF   40
1EFC:  MOVF   49,W
1EFD:  ANDLW  F0
1EFE:  MOVWF  41
1EFF:  CLRF   42
1F00:  CLRF   43
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
1F01:  MOVF   3F,W
1F02:  MOVWF  47
1F03:  MOVF   3E,W
1F04:  MOVWF  46
1F05:  MOVF   3D,W
1F06:  MOVWF  45
1F07:  MOVF   3C,W
1F08:  MOVWF  44
1F09:  MOVLB  00
1F0A:  MOVLB  11
1F0B:  MOVF   47,W
1F0C:  SUBWF  43,W
1F0D:  BTFSC  03.0
1F0E:  GOTO   711
1F0F:  MOVLB  00
1F10:  GOTO   77B
1F11:  MOVLB  00
1F12:  BTFSS  03.2
1F13:  GOTO   730
1F14:  MOVLB  11
1F15:  MOVF   46,W
1F16:  SUBWF  42,W
1F17:  BTFSC  03.0
1F18:  GOTO   71B
1F19:  MOVLB  00
1F1A:  GOTO   77B
1F1B:  MOVLB  00
1F1C:  BTFSS  03.2
1F1D:  GOTO   730
1F1E:  MOVLB  11
1F1F:  MOVF   45,W
1F20:  SUBWF  41,W
1F21:  BTFSC  03.0
1F22:  GOTO   725
1F23:  MOVLB  00
1F24:  GOTO   77B
1F25:  MOVLB  00
1F26:  BTFSS  03.2
1F27:  GOTO   730
1F28:  MOVLB  11
1F29:  MOVF   40,W
1F2A:  SUBWF  44,W
1F2B:  BTFSS  03.0
1F2C:  GOTO   72F
1F2D:  MOVLB  00
1F2E:  GOTO   77B
1F2F:  MOVLB  00
1F30:  MOVLB  11
1F31:  MOVF   47,W
1F32:  SUBWF  3B,W
1F33:  BTFSC  03.0
1F34:  GOTO   737
1F35:  MOVLB  00
1F36:  GOTO   77B
1F37:  MOVLB  00
1F38:  BTFSS  03.2
1F39:  GOTO   756
1F3A:  MOVLB  11
1F3B:  MOVF   46,W
1F3C:  SUBWF  3A,W
1F3D:  BTFSC  03.0
1F3E:  GOTO   741
1F3F:  MOVLB  00
1F40:  GOTO   77B
1F41:  MOVLB  00
1F42:  BTFSS  03.2
1F43:  GOTO   756
1F44:  MOVLB  11
1F45:  MOVF   45,W
1F46:  SUBWF  39,W
1F47:  BTFSC  03.0
1F48:  GOTO   74B
1F49:  MOVLB  00
1F4A:  GOTO   77B
1F4B:  MOVLB  00
1F4C:  BTFSS  03.2
1F4D:  GOTO   756
1F4E:  MOVLB  11
1F4F:  MOVF   38,W
1F50:  SUBWF  44,W
1F51:  BTFSS  03.0
1F52:  GOTO   755
1F53:  MOVLB  00
1F54:  GOTO   77B
1F55:  MOVLB  00
....................         subsector_4kByte_erase(smf, addr);
1F56:  MOVLB  0F
1F57:  MOVF   23,W
1F58:  MOVLB  11
1F59:  MOVWF  4B
1F5A:  MOVLB  0F
1F5B:  MOVF   22,W
1F5C:  MOVLB  11
1F5D:  MOVWF  4A
1F5E:  MOVLB  0F
1F5F:  MOVF   21,W
1F60:  MOVLB  11
1F61:  MOVWF  49
1F62:  MOVLB  0F
1F63:  MOVF   20,W
1F64:  MOVLB  11
1F65:  MOVWF  48
1F66:  MOVF   47,W
1F67:  MOVWF  4F
1F68:  MOVF   46,W
1F69:  MOVWF  4E
1F6A:  MOVF   45,W
1F6B:  MOVWF  4D
1F6C:  MOVF   44,W
1F6D:  MOVWF  4C
1F6E:  MOVLP  20
1F6F:  MOVLB  00
1F70:  CALL   000
1F71:  MOVLP  18
1F72:  MOVLW  10
1F73:  MOVLB  11
1F74:  ADDWF  45,F
1F75:  MOVLW  00
1F76:  ADDWFC 46,F
1F77:  MOVLW  00
1F78:  ADDWFC 47,F
1F79:  MOVLB  00
1F7A:  GOTO   70A
1F7B:  MOVLP  28
1F7C:  GOTO   361 (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
*
2495:  MOVLB  11
2496:  MOVF   37,W
2497:  MOVWF  43
2498:  MOVF   36,W
2499:  MOVWF  42
249A:  MOVF   35,W
249B:  MOVWF  41
249C:  MOVF   34,W
249D:  MOVWF  40
249E:  MOVF   33,W
249F:  MOVWF  47
24A0:  MOVF   32,W
24A1:  MOVWF  46
24A2:  MOVF   31,W
24A3:  MOVWF  45
24A4:  MOVF   30,W
24A5:  MOVWF  44
24A6:  MOVF   3B,W
24A7:  MOVWF  4B
24A8:  MOVF   3A,W
24A9:  MOVWF  4A
24AA:  MOVF   39,W
24AB:  MOVWF  49
24AC:  MOVF   38,W
24AD:  MOVWF  48
24AE:  MOVLB  00
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
24AF:  MOVLB  11
24B0:  MOVF   40,F
24B1:  BTFSC  03.2
24B2:  GOTO   4B5
24B3:  MOVLB  00
24B4:  GOTO   4CB
24B5:  MOVLB  00
24B6:  MOVLB  11
24B7:  MOVF   41,F
24B8:  BTFSC  03.2
24B9:  GOTO   4BC
24BA:  MOVLB  00
24BB:  GOTO   4CB
24BC:  MOVLB  00
24BD:  MOVLB  11
24BE:  MOVF   42,F
24BF:  BTFSC  03.2
24C0:  GOTO   4C3
24C1:  MOVLB  00
24C2:  GOTO   4CB
24C3:  MOVLB  00
24C4:  MOVLB  11
24C5:  MOVF   43,F
24C6:  BTFSS  03.2
24C7:  GOTO   4CA
24C8:  MOVLB  00
24C9:  GOTO   57A
24CA:  MOVLB  00
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
24CB:  MOVLB  11
24CC:  MOVF   43,F
24CD:  BTFSC  03.2
24CE:  GOTO   4D1
24CF:  MOVLB  00
24D0:  GOTO   4E8
24D1:  MOVLB  00
24D2:  MOVLB  11
24D3:  MOVF   42,F
24D4:  BTFSC  03.2
24D5:  GOTO   4D8
24D6:  MOVLB  00
24D7:  GOTO   4E8
24D8:  MOVLB  00
24D9:  MOVLB  11
24DA:  MOVF   41,F
24DB:  BTFSC  03.2
24DC:  GOTO   4DF
24DD:  MOVLB  00
24DE:  GOTO   4E8
24DF:  MOVLB  00
24E0:  MOVLB  11
24E1:  MOVF   40,W
24E2:  SUBLW  40
24E3:  BTFSS  03.0
24E4:  GOTO   4E7
24E5:  MOVLB  00
24E6:  GOTO   4EB
24E7:  MOVLB  00
24E8:  CLRF   7A
24E9:  MOVLW  40
24EA:  GOTO   4F0
24EB:  MOVLB  11
24EC:  MOVF   41,W
24ED:  MOVWF  7A
24EE:  MOVF   40,W
24EF:  MOVLB  00
24F0:  MOVLB  11
24F1:  MOVWF  4C
24F2:  MOVF   7A,W
24F3:  MOVWF  4D
24F4:  MOVLB  00
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
24F5:  MOVLB  0E
24F6:  MOVF   6F,W
24F7:  MOVLB  11
24F8:  MOVWF  55
24F9:  MOVLB  0E
24FA:  MOVF   6E,W
24FB:  MOVLB  11
24FC:  MOVWF  54
24FD:  MOVLB  0E
24FE:  MOVF   6D,W
24FF:  MOVLB  11
2500:  MOVWF  53
2501:  MOVLB  0E
2502:  MOVF   6C,W
2503:  MOVLB  11
2504:  MOVWF  52
2505:  MOVF   47,W
2506:  MOVWF  59
2507:  MOVF   46,W
2508:  MOVWF  58
2509:  MOVF   45,W
250A:  MOVWF  57
250B:  MOVF   44,W
250C:  MOVWF  56
250D:  MOVF   3D,W
250E:  MOVWF  5B
250F:  MOVF   3C,W
2510:  MOVWF  5A
2511:  CLRF   5F
2512:  CLRF   5E
2513:  MOVF   4D,W
2514:  MOVWF  5D
2515:  MOVF   4C,W
2516:  MOVWF  5C
2517:  MOVLP  08
2518:  MOVLB  00
2519:  CALL   1B1
251A:  MOVLP  20
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
251B:  MOVLB  0F
251C:  MOVF   23,W
251D:  MOVLB  11
251E:  MOVWF  55
251F:  MOVLB  0F
2520:  MOVF   22,W
2521:  MOVLB  11
2522:  MOVWF  54
2523:  MOVLB  0F
2524:  MOVF   21,W
2525:  MOVLB  11
2526:  MOVWF  53
2527:  MOVLB  0F
2528:  MOVF   20,W
2529:  MOVLB  11
252A:  MOVWF  52
252B:  MOVF   4B,W
252C:  MOVWF  59
252D:  MOVF   4A,W
252E:  MOVWF  58
252F:  MOVF   49,W
2530:  MOVWF  57
2531:  MOVF   48,W
2532:  MOVWF  56
2533:  MOVF   3D,W
2534:  MOVWF  5B
2535:  MOVF   3C,W
2536:  MOVWF  5A
2537:  MOVF   4D,W
2538:  MOVWF  5D
2539:  MOVF   4C,W
253A:  MOVWF  5C
253B:  MOVLB  00
253C:  GOTO   2A0
.................... 
....................         src_addr += chunk;
253D:  MOVLB  11
253E:  MOVF   4C,W
253F:  ADDWF  44,F
2540:  MOVF   4D,W
2541:  ADDWFC 45,F
2542:  MOVLW  00
2543:  ADDWFC 46,F
2544:  MOVLW  00
2545:  ADDWFC 47,F
....................         data_write_addr += chunk;
2546:  MOVF   4C,W
2547:  ADDWF  48,F
2548:  MOVF   4D,W
2549:  ADDWFC 49,F
254A:  MOVLW  00
254B:  ADDWFC 4A,F
254C:  MOVLW  00
254D:  ADDWFC 4B,F
....................         *used_size += chunk;
254E:  MOVF   3F,W
254F:  MOVWF  7A
2550:  MOVF   3E,W
2551:  MOVWF  04
2552:  MOVF   7A,W
2553:  MOVWF  05
2554:  MOVF   4C,W
2555:  ADDWF  00,W
2556:  MOVWF  77
2557:  ADDFSR 01,FSR0
2558:  MOVF   4D,W
2559:  ADDWFC 00,W
255A:  MOVWF  78
255B:  ADDFSR 01,FSR0
255C:  MOVLW  00
255D:  ADDWFC 00,W
255E:  MOVWF  79
255F:  ADDFSR 01,FSR0
2560:  MOVLW  00
2561:  ADDWFC 00,W
2562:  MOVWF  7A
2563:  ADDFSR 3D,FSR0
2564:  MOVF   77,W
2565:  MOVWF  00
2566:  ADDFSR 01,FSR0
2567:  MOVF   78,W
2568:  MOVWF  00
2569:  ADDFSR 01,FSR0
256A:  MOVF   79,W
256B:  MOVWF  00
256C:  ADDFSR 01,FSR0
256D:  MOVF   7A,W
256E:  MOVWF  00
256F:  ADDFSR 3D,FSR0
....................         remaining -= chunk;
2570:  MOVF   4C,W
2571:  SUBWF  40,F
2572:  MOVF   4D,W
2573:  SUBWFC 41,F
2574:  MOVLW  00
2575:  SUBWFC 42,F
2576:  MOVLW  00
2577:  SUBWFC 43,F
2578:  MOVLB  00
2579:  GOTO   4AF
....................     }
257A:  MOVLP  28
257B:  GOTO   395 (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
2800:  MOVLW  82
2801:  MOVLB  03
2802:  MOVWF  11
2803:  MOVLW  04
2804:  MOVWF  12
2805:  MOVLP  00
2806:  MOVLB  00
2807:  CALL   71D
2808:  MOVLP  28
....................     subsector_4kByte_erase(smf, base_addr);
2809:  MOVLB  0F
280A:  MOVF   23,W
280B:  MOVLB  11
280C:  MOVWF  4B
280D:  MOVLB  0F
280E:  MOVF   22,W
280F:  MOVLB  11
2810:  MOVWF  4A
2811:  MOVLB  0F
2812:  MOVF   21,W
2813:  MOVLB  11
2814:  MOVWF  49
2815:  MOVLB  0F
2816:  MOVF   20,W
2817:  MOVLB  11
2818:  MOVWF  48
2819:  MOVF   33,W
281A:  MOVWF  4F
281B:  MOVF   32,W
281C:  MOVWF  4E
281D:  MOVF   31,W
281E:  MOVWF  4D
281F:  MOVF   30,W
2820:  MOVWF  4C
2821:  MOVLP  20
2822:  MOVLB  00
2823:  CALL   000
2824:  MOVLP  28
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
2825:  MOVLB  11
2826:  MOVF   37,W
2827:  MOVWF  3E
2828:  MOVF   36,W
2829:  MOVWF  3D
282A:  MOVF   35,W
282B:  MOVWF  3C
282C:  MOVF   34,W
282D:  MOVWF  3B
282E:  CLRF   3C
282F:  CLRF   3D
2830:  CLRF   3E
2831:  MOVLB  0F
2832:  MOVF   23,W
2833:  MOVLB  11
2834:  MOVWF  46
2835:  MOVLB  0F
2836:  MOVF   22,W
2837:  MOVLB  11
2838:  MOVWF  45
2839:  MOVLB  0F
283A:  MOVF   21,W
283B:  MOVLB  11
283C:  MOVWF  44
283D:  MOVLB  0F
283E:  MOVF   20,W
283F:  MOVLB  11
2840:  MOVWF  43
2841:  MOVF   33,W
2842:  MOVWF  4A
2843:  MOVF   32,W
2844:  MOVWF  49
2845:  MOVF   31,W
2846:  MOVWF  48
2847:  MOVF   30,W
2848:  MOVWF  47
2849:  MOVF   3B,W
284A:  MOVWF  4B
284B:  MOVLP  20
284C:  MOVLB  00
284D:  CALL   57C
284E:  MOVLP  28
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
284F:  MOVLW  01
2850:  MOVLB  11
2851:  ADDWF  30,W
2852:  MOVWF  3A
2853:  MOVLW  00
2854:  ADDWFC 31,W
2855:  MOVWF  3B
2856:  MOVLW  00
2857:  ADDWFC 32,W
2858:  MOVWF  3C
2859:  MOVLW  00
285A:  ADDWFC 33,W
285B:  MOVWF  3D
285C:  MOVF   35,W
285D:  MOVWF  3F
285E:  MOVF   36,W
285F:  MOVWF  40
2860:  MOVF   37,W
2861:  MOVWF  41
2862:  CLRF   42
2863:  CLRF   40
2864:  CLRF   41
2865:  CLRF   42
2866:  MOVLB  0F
2867:  MOVF   23,W
2868:  MOVLB  11
2869:  MOVWF  46
286A:  MOVLB  0F
286B:  MOVF   22,W
286C:  MOVLB  11
286D:  MOVWF  45
286E:  MOVLB  0F
286F:  MOVF   21,W
2870:  MOVLB  11
2871:  MOVWF  44
2872:  MOVLB  0F
2873:  MOVF   20,W
2874:  MOVLB  11
2875:  MOVWF  43
2876:  MOVF   3D,W
2877:  MOVWF  4A
2878:  MOVF   3C,W
2879:  MOVWF  49
287A:  MOVF   3B,W
287B:  MOVWF  48
287C:  MOVF   3A,W
287D:  MOVWF  47
287E:  MOVF   3F,W
287F:  MOVWF  4B
2880:  MOVLP  20
2881:  MOVLB  00
2882:  CALL   57C
2883:  MOVLP  28
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
2884:  MOVLW  02
2885:  MOVLB  11
2886:  ADDWF  30,W
2887:  MOVWF  3A
2888:  MOVLW  00
2889:  ADDWFC 31,W
288A:  MOVWF  3B
288B:  MOVLW  00
288C:  ADDWFC 32,W
288D:  MOVWF  3C
288E:  MOVLW  00
288F:  ADDWFC 33,W
2890:  MOVWF  3D
2891:  MOVF   36,W
2892:  MOVWF  3F
2893:  MOVF   37,W
2894:  MOVWF  40
2895:  CLRF   41
2896:  CLRF   42
2897:  CLRF   40
2898:  CLRF   41
2899:  CLRF   42
289A:  MOVLB  0F
289B:  MOVF   23,W
289C:  MOVLB  11
289D:  MOVWF  46
289E:  MOVLB  0F
289F:  MOVF   22,W
28A0:  MOVLB  11
28A1:  MOVWF  45
28A2:  MOVLB  0F
28A3:  MOVF   21,W
28A4:  MOVLB  11
28A5:  MOVWF  44
28A6:  MOVLB  0F
28A7:  MOVF   20,W
28A8:  MOVLB  11
28A9:  MOVWF  43
28AA:  MOVF   3D,W
28AB:  MOVWF  4A
28AC:  MOVF   3C,W
28AD:  MOVWF  49
28AE:  MOVF   3B,W
28AF:  MOVWF  48
28B0:  MOVF   3A,W
28B1:  MOVWF  47
28B2:  MOVF   3F,W
28B3:  MOVWF  4B
28B4:  MOVLP  20
28B5:  MOVLB  00
28B6:  CALL   57C
28B7:  MOVLP  28
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
28B8:  MOVLW  03
28B9:  MOVLB  11
28BA:  ADDWF  30,W
28BB:  MOVWF  3A
28BC:  MOVLW  00
28BD:  ADDWFC 31,W
28BE:  MOVWF  3B
28BF:  MOVLW  00
28C0:  ADDWFC 32,W
28C1:  MOVWF  3C
28C2:  MOVLW  00
28C3:  ADDWFC 33,W
28C4:  MOVWF  3D
28C5:  MOVF   37,W
28C6:  MOVWF  3F
28C7:  CLRF   40
28C8:  CLRF   41
28C9:  CLRF   42
28CA:  CLRF   40
28CB:  CLRF   41
28CC:  CLRF   42
28CD:  MOVLB  0F
28CE:  MOVF   23,W
28CF:  MOVLB  11
28D0:  MOVWF  46
28D1:  MOVLB  0F
28D2:  MOVF   22,W
28D3:  MOVLB  11
28D4:  MOVWF  45
28D5:  MOVLB  0F
28D6:  MOVF   21,W
28D7:  MOVLB  11
28D8:  MOVWF  44
28D9:  MOVLB  0F
28DA:  MOVF   20,W
28DB:  MOVLB  11
28DC:  MOVWF  43
28DD:  MOVF   3D,W
28DE:  MOVWF  4A
28DF:  MOVF   3C,W
28E0:  MOVWF  49
28E1:  MOVF   3B,W
28E2:  MOVWF  48
28E3:  MOVF   3A,W
28E4:  MOVWF  47
28E5:  MOVF   3F,W
28E6:  MOVWF  4B
28E7:  MOVLP  20
28E8:  MOVLB  00
28E9:  CALL   57C
28EA:  MOVLP  28
....................     write_data_byte(smf, base_addr + 4, loop_count);
28EB:  MOVLW  04
28EC:  MOVLB  11
28ED:  ADDWF  30,W
28EE:  MOVWF  3A
28EF:  MOVLW  00
28F0:  ADDWFC 31,W
28F1:  MOVWF  3B
28F2:  MOVLW  00
28F3:  ADDWFC 32,W
28F4:  MOVWF  3C
28F5:  MOVLW  00
28F6:  ADDWFC 33,W
28F7:  MOVWF  3D
28F8:  MOVLB  0F
28F9:  MOVF   23,W
28FA:  MOVLB  11
28FB:  MOVWF  46
28FC:  MOVLB  0F
28FD:  MOVF   22,W
28FE:  MOVLB  11
28FF:  MOVWF  45
2900:  MOVLB  0F
2901:  MOVF   21,W
2902:  MOVLB  11
2903:  MOVWF  44
2904:  MOVLB  0F
2905:  MOVF   20,W
2906:  MOVLB  11
2907:  MOVWF  43
2908:  MOVF   3D,W
2909:  MOVWF  4A
290A:  MOVF   3C,W
290B:  MOVWF  49
290C:  MOVF   3B,W
290D:  MOVWF  48
290E:  MOVF   3A,W
290F:  MOVWF  47
2910:  MOVF   38,W
2911:  MOVWF  4B
2912:  MOVLP  20
2913:  MOVLB  00
2914:  CALL   57C
2915:  MOVLP  28
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
2916:  MOVLW  8C
2917:  MOVLB  03
2918:  MOVWF  11
2919:  MOVLW  04
291A:  MOVWF  12
291B:  BCF    03.0
291C:  MOVLW  0C
291D:  MOVLB  11
291E:  MOVWF  51
291F:  MOVLP  08
2920:  MOVLB  00
2921:  CALL   2E4
2922:  MOVLP  28
2923:  MOVLW  41
2924:  MOVWF  04
2925:  MOVLB  11
2926:  MOVF   37,W
2927:  MOVWF  3D
2928:  MOVF   36,W
2929:  MOVWF  3C
292A:  MOVF   35,W
292B:  MOVWF  3B
292C:  MOVF   34,W
292D:  MOVWF  3A
292E:  MOVLB  00
*
29E9:  MOVLW  0D
29EA:  MOVLB  12
29EB:  MOVWF  25
29EC:  MOVLP  00
29ED:  MOVLB  00
29EE:  CALL   6F5
29EF:  MOVLP  28
29F0:  MOVLW  0A
29F1:  MOVLB  12
29F2:  MOVWF  25
29F3:  MOVLP  00
29F4:  MOVLB  00
29F5:  CALL   6F5
29F6:  MOVLP  28
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
29F7:  MOVLW  95
29F8:  MOVLB  03
29F9:  MOVWF  11
29FA:  MOVLW  04
29FB:  MOVWF  12
29FC:  BCF    03.0
29FD:  MOVLW  0D
29FE:  MOVLB  11
29FF:  MOVWF  51
2A00:  MOVLP  08
2A01:  MOVLB  00
2A02:  CALL   2E4
2A03:  MOVLP  28
2A04:  MOVLB  11
2A05:  MOVF   38,W
2A06:  MOVWF  3A
2A07:  MOVLW  1B
2A08:  MOVWF  3B
2A09:  MOVLP  08
2A0A:  MOVLB  00
2A0B:  CALL   6F5
2A0C:  MOVLP  28
2A0D:  MOVLW  9C
2A0E:  MOVLB  03
2A0F:  MOVWF  11
2A10:  MOVLW  04
2A11:  MOVWF  12
2A12:  BSF    03.0
2A13:  MOVLW  04
2A14:  MOVLB  11
2A15:  MOVWF  51
2A16:  MOVLP  08
2A17:  MOVLB  00
2A18:  CALL   2E4
2A19:  MOVLP  28
2A1A:  MOVLP  28
2A1B:  GOTO   3BC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... #define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... #define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... #define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
16BF:  MOVLB  0F
16C0:  MOVF   5E,W
16C1:  MOVWF  04
16C2:  MOVF   5F,W
16C3:  MOVWF  05
16C4:  ADDFSR 00,FSR0
16C5:  MOVF   00,W
16C6:  MOVWF  60
16C7:  MOVLW  01
16C8:  ADDWF  5E,W
16C9:  MOVWF  78
16CA:  MOVLW  00
16CB:  ADDWFC 5F,W
16CC:  MOVWF  7A
16CD:  MOVF   78,W
16CE:  MOVWF  61
16CF:  MOVF   7A,W
16D0:  MOVWF  62
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
16D1:  MOVLW  9F
16D2:  MOVLB  03
16D3:  MOVWF  11
16D4:  MOVLW  04
16D5:  MOVWF  12
16D6:  MOVLP  00
16D7:  MOVLB  00
16D8:  CALL   71D
16D9:  MOVLP  10
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
16DA:  MOVLW  C2
16DB:  MOVLB  03
16DC:  MOVWF  11
16DD:  MOVLW  04
16DE:  MOVWF  12
16DF:  BCF    03.0
16E0:  MOVLW  0C
16E1:  MOVLB  11
16E2:  MOVWF  51
16E3:  MOVLP  08
16E4:  MOVLB  00
16E5:  CALL   2E4
16E6:  MOVLP  10
16E7:  MOVLB  0F
16E8:  MOVF   60,W
16E9:  MOVLB  11
16EA:  MOVWF  51
16EB:  MOVLW  37
16EC:  MOVWF  52
16ED:  MOVLP  08
16EE:  MOVLB  00
16EF:  CALL   699
16F0:  MOVLP  10
16F1:  MOVLW  C9
16F2:  MOVLB  03
16F3:  MOVWF  11
16F4:  MOVLW  04
16F5:  MOVWF  12
16F6:  BCF    03.0
16F7:  MOVLW  04
16F8:  MOVLB  11
16F9:  MOVWF  51
16FA:  MOVLP  08
16FB:  MOVLB  00
16FC:  CALL   2E4
16FD:  MOVLP  10
....................    switch(command_id)
16FE:  MOVLB  0F
16FF:  MOVF   60,W
1700:  XORLW  00
1701:  MOVLB  00
1702:  BTFSC  03.2
1703:  GOTO   71A
1704:  XORLW  10
1705:  BTFSC  03.2
1706:  GOTO   724
1707:  XORLW  11
1708:  BTFSC  03.2
1709:  GOTO   725
170A:  XORLW  03
170B:  BTFSC  03.2
170C:  GOTO   726
170D:  XORLW  73
170E:  BTFSC  03.2
170F:  GOTO   727
1710:  XORLW  03
1711:  BTFSC  03.2
1712:  GOTO   729
1713:  XORLW  01
1714:  BTFSC  03.2
1715:  GOTO   72B
1716:  XORLW  03
1717:  BTFSC  03.2
1718:  GOTO   72D
1719:  GOTO   72F
....................    {
....................       case 0x00: // example command
....................          fprintf(PC, "\t-> Example command 0x00\r\n");
171A:  MOVLW  CC
171B:  MOVLB  03
171C:  MOVWF  11
171D:  MOVLW  04
171E:  MOVWF  12
171F:  MOVLP  00
1720:  MOVLB  00
1721:  CALL   71D
1722:  MOVLP  10
....................          //mode_iv_meas_adc();
....................          break;
1723:  GOTO   738
....................       case 0x10:
....................          //mode_measure(parameter);
....................          break;
1724:  GOTO   738
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
1725:  GOTO   738
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
1726:  GOTO   738
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
1727:  CALL   3CE
....................          break;
1728:  GOTO   738
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
1729:  CALL   3CE
....................          break;
172A:  GOTO   738
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
172B:  CALL   3CE
....................          break;
172C:  GOTO   738
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
172D:  CALL   3CE
....................          break;
172E:  GOTO   738
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
172F:  MOVLW  DA
1730:  MOVLB  03
1731:  MOVWF  11
1732:  MOVLW  04
1733:  MOVWF  12
1734:  MOVLP  00
1735:  MOVLB  00
1736:  CALL   71D
1737:  MOVLP  10
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
1738:  MOVLW  E6
1739:  MOVLB  03
173A:  MOVWF  11
173B:  MOVLW  04
173C:  MOVWF  12
173D:  MOVLP  00
173E:  MOVLB  00
173F:  CALL   71D
1740:  MOVLP  10
1741:  MOVLP  10
1742:  GOTO   767 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
1FBA:  MOVLW  09
1FBB:  MOVLB  03
1FBC:  MOVWF  11
1FBD:  MOVLW  05
1FBE:  MOVWF  12
1FBF:  MOVLP  00
1FC0:  MOVLB  00
1FC1:  CALL   71D
1FC2:  MOVLP  18
....................    
....................    switch(command->frame_id)
1FC3:  MOVLB  0F
1FC4:  MOVF   58,W
1FC5:  MOVWF  04
1FC6:  MOVF   59,W
1FC7:  MOVWF  05
1FC8:  ADDFSR 00,FSR0
1FC9:  MOVF   00,W
1FCA:  XORLW  00
1FCB:  MOVLB  00
1FCC:  BTFSC  03.2
1FCD:  GOTO   7D5
1FCE:  XORLW  01
1FCF:  BTFSC  03.2
1FD0:  GOTO   7DF
1FD1:  XORLW  03
1FD2:  BTFSC  03.2
1FD3:  GOTO   7EF
1FD4:  GOTO   7F7
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
1FD5:  MOVLB  0F
1FD6:  MOVF   59,W
1FD7:  MOVWF  5B
1FD8:  MOVF   58,W
1FD9:  MOVWF  5A
1FDA:  MOVLP  10
1FDB:  MOVLB  00
1FDC:  GOTO   743
1FDD:  MOVLP  18
....................          break;
1FDE:  GOTO   7F7
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
1FDF:  MOVLB  0F
1FE0:  MOVF   59,W
1FE1:  MOVWF  5B
1FE2:  MOVF   58,W
1FE3:  MOVWF  5A
1FE4:  MOVLP  10
1FE5:  MOVLB  00
1FE6:  GOTO   781
1FE7:  MOVLP  18
1FE8:  MOVF   78,F
1FE9:  BTFSC  03.2
1FEA:  GOTO   7EE
....................             return TRUE; // if status is finished, return TRUE
1FEB:  MOVLW  01
1FEC:  MOVWF  78
1FED:  GOTO   7F9
....................          }        
....................          break;
1FEE:  GOTO   7F7
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
1FEF:  MOVLB  0F
1FF0:  MOVF   59,W
1FF1:  MOVWF  5B
1FF2:  MOVF   58,W
1FF3:  MOVWF  5A
1FF4:  MOVLB  00
1FF5:  GOTO   77D
....................          break;
1FF6:  GOTO   7F7
....................    }
....................    return FALSE;
1FF7:  MOVLW  00
1FF8:  MOVWF  78
1FF9:  MOVLP  30
1FFA:  GOTO   624 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
1743:  MOVLW  15
1744:  MOVLB  03
1745:  MOVWF  11
1746:  MOVLW  05
1747:  MOVWF  12
1748:  MOVLP  00
1749:  MOVLB  00
174A:  CALL   71D
174B:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
174C:  MOVLW  20
174D:  MOVLB  03
174E:  MOVWF  11
174F:  MOVLW  05
1750:  MOVWF  12
1751:  MOVLP  00
1752:  MOVLB  00
1753:  CALL   71D
1754:  MOVLP  10
....................    transmit_ack();
1755:  MOVLP  08
1756:  CALL   770
1757:  MOVLP  10
.................... 
....................    status[0] = EXECUTING_MISSION;
1758:  MOVLW  02
1759:  MOVWF  29
....................    execute_mission(command->content);
175A:  MOVLW  03
175B:  MOVLB  0F
175C:  ADDWF  5A,W
175D:  MOVWF  5C
175E:  MOVLW  00
175F:  ADDWFC 5B,W
1760:  MOVWF  5D
1761:  MOVF   5D,W
1762:  MOVWF  5F
1763:  MOVF   5C,W
1764:  MOVWF  5E
1765:  MOVLB  00
1766:  GOTO   6BF
....................    if (is_empty_smf_data())
1767:  MOVLP  08
1768:  CALL   7ED
1769:  MOVLP  10
176A:  MOVF   78,F
176B:  BTFSC  03.2
176C:  GOTO   770
....................       status[0] = FINISHED;
176D:  MOVLW  06
176E:  MOVWF  29
176F:  GOTO   772
....................    else
....................       status[0] = SMF_USE_REQ;
1770:  MOVLW  04
1771:  MOVWF  29
1772:  MOVLP  18
1773:  GOTO   7DD (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
1781:  MOVLW  2D
1782:  MOVLB  03
1783:  MOVWF  11
1784:  MOVLW  05
1785:  MOVWF  12
1786:  MOVLP  00
1787:  MOVLB  00
1788:  CALL   71D
1789:  MOVLP  10
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
178A:  MOVLW  37
178B:  MOVLB  03
178C:  MOVWF  11
178D:  MOVLW  05
178E:  MOVWF  12
178F:  MOVLP  00
1790:  MOVLB  00
1791:  CALL   71D
1792:  MOVLP  10
....................    transmit_status();
1793:  GOTO   774
....................    if (status[0] == FINISHED)
1794:  MOVF   29,W
1795:  SUBLW  06
1796:  BTFSS  03.2
1797:  GOTO   7A5
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
1798:  MOVLW  46
1799:  MOVLB  03
179A:  MOVWF  11
179B:  MOVLW  05
179C:  MOVWF  12
179D:  MOVLP  00
179E:  MOVLB  00
179F:  CALL   71D
17A0:  MOVLP  10
....................       return TRUE;
17A1:  MOVLW  01
17A2:  MOVWF  78
17A3:  GOTO   7A8
....................    }
17A4:  GOTO   7A8
....................    else{
....................       return FALSE;
17A5:  MOVLW  00
17A6:  MOVWF  78
17A7:  GOTO   7A8
....................    }
17A8:  MOVLP  18
17A9:  GOTO   7E7 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
1F7D:  MOVLW  54
1F7E:  MOVLB  03
1F7F:  MOVWF  11
1F80:  MOVLW  05
1F81:  MOVWF  12
1F82:  MOVLP  00
1F83:  MOVLB  00
1F84:  CALL   71D
1F85:  MOVLP  18
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
1F86:  MOVLW  61
1F87:  MOVLB  03
1F88:  MOVWF  11
1F89:  MOVLW  05
1F8A:  MOVWF  12
1F8B:  MOVLP  00
1F8C:  MOVLB  00
1F8D:  CALL   71D
1F8E:  MOVLP  18
....................     transmit_ack();
1F8F:  MOVLP  08
1F90:  CALL   770
1F91:  MOVLP  18
....................     
....................     if (command->content[0] == ALLOW) {
1F92:  MOVLB  0F
1F93:  MOVF   5A,W
1F94:  MOVWF  04
1F95:  MOVF   5B,W
1F96:  MOVWF  05
1F97:  ADDFSR 03,FSR0
1F98:  MOVF   00,F
1F99:  BTFSC  03.2
1F9A:  GOTO   79D
1F9B:  MOVLB  00
1F9C:  GOTO   7AF
1F9D:  MOVLB  00
....................         fprintf(PC, "\t\t-> allowd\r\n");
1F9E:  MOVLW  6E
1F9F:  MOVLB  03
1FA0:  MOVWF  11
1FA1:  MOVLW  05
1FA2:  MOVWF  12
1FA3:  MOVLP  00
1FA4:  MOVLB  00
1FA5:  CALL   71D
1FA6:  MOVLP  18
....................         status[0] = COPYING;
1FA7:  MOVLW  05
1FA8:  MOVWF  29
....................         copy_data();
1FA9:  MOVLP  28
1FAA:  GOTO   21C
1FAB:  MOVLP  18
....................         status[0] = FINISHED;
1FAC:  MOVLW  06
1FAD:  MOVWF  29
....................     } else {
1FAE:  GOTO   7B8
....................         fprintf(PC, "\t\t-> denyed\r\n");
1FAF:  MOVLW  75
1FB0:  MOVLB  03
1FB1:  MOVWF  11
1FB2:  MOVLW  05
1FB3:  MOVWF  12
1FB4:  MOVLP  00
1FB5:  MOVLB  00
1FB6:  CALL   71D
1FB7:  MOVLP  18
....................     }
1FB8:  MOVLP  18
1FB9:  GOTO   7F6 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8 function;
....................         unsigned int8 parameter;
....................     };
....................     unsigned int8 bytes[6];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... 
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... #define PICLOG_PACKET_SIZE = 60 // PICLOGのパケットサイズ
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... /*
.................... 
.................... // Packet format
.................... #define PACKET_SIZE 64
.................... #define CHECKSUM
.................... //volatile unsigned int8 PACKET_DATA[MISSION_DATA_SIZE] = {0x00};
.................... */
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer[DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8 cigs_data[DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8 cigs_data_header[HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... unsigned int32 current;
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... 
.................... // __________MISF-ADDRESS__________
.................... // DATA SIZE AREA
.................... #define ADDRESS_DATA_SIZE_START 0x000000
.................... #define ADDRESS_DATA_SIZE_END   0x000003
.................... #define DATA_SIZE 4 // データサイズのサイズ
.................... unsigned int8 data_size_loop_counter; // データサイズループカウンター
.................... unsigned int32 data_size_counter; // データサイズカウンター
.................... 
.................... 
.................... // PICLOG AREA
.................... #define ADDRESS_PICLOG_START 0x000000
.................... #define ADDRESS_PICLOG_END   0x000007
.................... #define PICLOG_SIZE 6 // PICLOGのサイズ
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32 piclog_write_counter; // 時間
....................         unsigned int8 piclog_loop_counter; // 関数
....................         unsigned int32 piclog_smfwrite_counter; // パラメータ
....................         unsigned int8 piclog_smf_loop_counter; // SMF書き込みループカウンター
....................     }   fields; // フィールド
....................     unsigned int8 bytes[MISF_DATA_HEADER_SIZE]; // バイト配列
.................... } PICLOG_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // MEASUREMENT DATA AREA
.................... #define ADDRESS_MEASUREMENT_START ｓ
.................... #define ADDRESS_MEASUREMENT_END   0x001FFF
.................... #define MEASUREMENT_SIZE 16 // 測定データのサイズ
.................... typedef union {
....................     struct {
....................         unsigned int32 measurement_data_counter;
....................         unsigned int8 meas_loop_counter;
....................         unsigned int32 measurement_data_smf_counter;
....................         unsigned int8 meas_smf_loop_counter;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[MISF_DATA_HEADER_SIZE]; // バイト配列
.................... } MEAS_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... 
.................... // __________MISF-ADDRESS__________
.................... // DATA SIZE AREA
.................... #define ADDRESS_DATA_SIZE_START 0x000000
.................... #define ADDRESS_DATA_SIZE_END   0x000003
.................... #define DATA_SIZE 4 // データサイズのサイズ
.................... unsigned int8 data_size_loop_counter; // データサイズループカウンター
.................... unsigned int32 data_size_counter; // データサイズカウンター
.................... 
.................... 
.................... // PICLOG AREA
.................... #define ADDRESS_PICLOG_START 0x000000
.................... #define ADDRESS_PICLOG_END   0x000007
.................... #define PICLOG_SIZE 6 // PICLOGのサイズ
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32 piclog_write_counter; // 時間
....................         unsigned int8 piclog_loop_counter; // 関数
....................         unsigned int32 piclog_smfwrite_counter; // パラメータ
....................         unsigned int8 piclog_smf_loop_counter; // SMF書き込みループカウンター
....................     }   fields; // フィールド
....................     unsigned int8 bytes[MISF_DATA_HEADER_SIZE]; // バイト配列
.................... } PICLOG_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // MEASUREMENT DATA AREA
.................... #define ADDRESS_MEASUREMENT_START ｓ
.................... #define ADDRESS_MEASUREMENT_END   0x001FFF
.................... #define MEASUREMENT_SIZE 16 // 測定データのサイズ
.................... typedef union {
....................     struct {
....................         unsigned int32 measurement_data_counter;
....................         unsigned int8 meas_loop_counter;
....................         unsigned int32 measurement_data_smf_counter;
....................         unsigned int8 meas_smf_loop_counter;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[MISF_DATA_HEADER_SIZE]; // バイト配列
.................... } MEAS_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... #define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0CD6:  MOVLW  7C
0CD7:  MOVLB  03
0CD8:  MOVWF  11
0CD9:  MOVLW  05
0CDA:  MOVWF  12
0CDB:  MOVLP  00
0CDC:  MOVLB  00
0CDD:  CALL   71D
0CDE:  MOVLP  08
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0CDF:  MOVLB  01
0CE0:  BCF    0F.1
0CE1:  MOVLB  02
0CE2:  BSF    0F.1
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0CE3:  MOVLB  01
0CE4:  BCF    0E.2
0CE5:  MOVLB  02
0CE6:  BSF    0E.2
....................     PICLOG_DATA_HEADER piclog_data_header;
....................     MEAS_DATA_HEADER meas_data_header;
.................... 
....................     if (!is_connect(mis_fm)) {
0CE7:  MOVLB  0E
0CE8:  MOVF   6F,W
0CE9:  MOVLB  11
0CEA:  MOVWF  3B
0CEB:  MOVLB  0E
0CEC:  MOVF   6E,W
0CED:  MOVLB  11
0CEE:  MOVWF  3A
0CEF:  MOVLB  0E
0CF0:  MOVF   6D,W
0CF1:  MOVLB  11
0CF2:  MOVWF  39
0CF3:  MOVLB  0E
0CF4:  MOVF   6C,W
0CF5:  MOVLB  11
0CF6:  MOVWF  38
0CF7:  MOVLB  00
0CF8:  GOTO   130
0CF9:  MOVF   78,F
0CFA:  BTFSS  03.2
0CFB:  GOTO   506
....................         fprintf(PC, "Flash is not connected\r\n");
0CFC:  MOVLW  8A
0CFD:  MOVLB  03
0CFE:  MOVWF  11
0CFF:  MOVLW  05
0D00:  MOVWF  12
0D01:  MOVLP  00
0D02:  MOVLB  00
0D03:  CALL   71D
0D04:  MOVLP  08
....................         return;
0D05:  GOTO   697
....................     }
....................     read_data_bytes(mis_fm, ADDRESS_PICLOG_START, piclog_data_header.bytes, sizeof(piclog_data_header.bytes)); // Clear the stream
0D06:  MOVLB  0E
0D07:  MOVF   6F,W
0D08:  MOVLB  11
0D09:  MOVWF  55
0D0A:  MOVLB  0E
0D0B:  MOVF   6E,W
0D0C:  MOVLB  11
0D0D:  MOVWF  54
0D0E:  MOVLB  0E
0D0F:  MOVF   6D,W
0D10:  MOVLB  11
0D11:  MOVWF  53
0D12:  MOVLB  0E
0D13:  MOVF   6C,W
0D14:  MOVLB  11
0D15:  MOVWF  52
0D16:  CLRF   59
0D17:  CLRF   58
0D18:  CLRF   57
0D19:  CLRF   56
0D1A:  MOVLW  24
0D1B:  MOVWF  5B
0D1C:  MOVLW  E8
0D1D:  MOVWF  5A
0D1E:  CLRF   5F
0D1F:  CLRF   5E
0D20:  CLRF   5D
0D21:  MOVLW  40
0D22:  MOVWF  5C
0D23:  MOVLB  00
0D24:  CALL   1B1
....................     fprintf(PC, "\t__PICLOG__\r\n");
0D25:  MOVLW  97
0D26:  MOVLB  03
0D27:  MOVWF  11
0D28:  MOVLW  05
0D29:  MOVWF  12
0D2A:  MOVLP  00
0D2B:  MOVLB  00
0D2C:  CALL   71D
0D2D:  MOVLP  08
....................     fprintf(PC, "\t\tpiclog_write_counter   : %lu\r\n", piclog_data_header.fields.piclog_write_counter);
0D2E:  MOVLW  9E
0D2F:  MOVLB  03
0D30:  MOVWF  11
0D31:  MOVLW  05
0D32:  MOVWF  12
0D33:  BCF    03.0
0D34:  MOVLW  1B
0D35:  MOVLB  11
0D36:  MOVWF  51
0D37:  MOVLB  00
0D38:  CALL   2E4
0D39:  MOVLW  41
0D3A:  MOVWF  04
0D3B:  MOVLB  0F
0D3C:  MOVF   5B,W
0D3D:  MOVLB  11
0D3E:  MOVWF  54
0D3F:  MOVLB  0F
0D40:  MOVF   5A,W
0D41:  MOVLB  11
0D42:  MOVWF  53
0D43:  MOVLB  0F
0D44:  MOVF   59,W
0D45:  MOVLB  11
0D46:  MOVWF  52
0D47:  MOVLB  0F
0D48:  MOVF   58,W
0D49:  MOVLB  11
0D4A:  MOVWF  51
0D4B:  MOVLB  00
0D4C:  CALL   3B0
0D4D:  MOVLW  0D
0D4E:  MOVLB  12
0D4F:  MOVWF  25
0D50:  MOVLP  00
0D51:  MOVLB  00
0D52:  CALL   6F5
0D53:  MOVLP  08
0D54:  MOVLW  0A
0D55:  MOVLB  12
0D56:  MOVWF  25
0D57:  MOVLP  00
0D58:  MOVLB  00
0D59:  CALL   6F5
0D5A:  MOVLP  08
....................     fprintf(PC, "\t\tpiclog_loop_counter    : %d\r\n", piclog_data_header.fields.piclog_loop_counter);
0D5B:  MOVLW  AF
0D5C:  MOVLB  03
0D5D:  MOVWF  11
0D5E:  MOVLW  05
0D5F:  MOVWF  12
0D60:  BCF    03.0
0D61:  MOVLW  1B
0D62:  MOVLB  11
0D63:  MOVWF  51
0D64:  MOVLB  00
0D65:  CALL   2E4
0D66:  MOVLB  0F
0D67:  MOVF   5C,W
0D68:  MOVLB  11
0D69:  MOVWF  4E
0D6A:  MOVLW  18
0D6B:  MOVWF  4F
0D6C:  MOVLB  00
0D6D:  CALL   44B
0D6E:  MOVLW  0D
0D6F:  MOVLB  12
0D70:  MOVWF  25
0D71:  MOVLP  00
0D72:  MOVLB  00
0D73:  CALL   6F5
0D74:  MOVLP  08
0D75:  MOVLW  0A
0D76:  MOVLB  12
0D77:  MOVWF  25
0D78:  MOVLP  00
0D79:  MOVLB  00
0D7A:  CALL   6F5
0D7B:  MOVLP  08
....................     fprintf(PC, "\t\tpiclog_smfwrite_counter: %lu\r\n", piclog_data_header.fields.piclog_smfwrite_counter);
0D7C:  MOVLW  BF
0D7D:  MOVLB  03
0D7E:  MOVWF  11
0D7F:  MOVLW  05
0D80:  MOVWF  12
0D81:  BCF    03.0
0D82:  MOVLW  1B
0D83:  MOVLB  11
0D84:  MOVWF  51
0D85:  MOVLB  00
0D86:  CALL   2E4
0D87:  MOVLW  41
0D88:  MOVWF  04
0D89:  MOVLB  0F
0D8A:  MOVF   60,W
0D8B:  MOVLB  11
0D8C:  MOVWF  54
0D8D:  MOVLB  0F
0D8E:  MOVF   5F,W
0D8F:  MOVLB  11
0D90:  MOVWF  53
0D91:  MOVLB  0F
0D92:  MOVF   5E,W
0D93:  MOVLB  11
0D94:  MOVWF  52
0D95:  MOVLB  0F
0D96:  MOVF   5D,W
0D97:  MOVLB  11
0D98:  MOVWF  51
0D99:  MOVLB  00
0D9A:  CALL   3B0
0D9B:  MOVLW  0D
0D9C:  MOVLB  12
0D9D:  MOVWF  25
0D9E:  MOVLP  00
0D9F:  MOVLB  00
0DA0:  CALL   6F5
0DA1:  MOVLP  08
0DA2:  MOVLW  0A
0DA3:  MOVLB  12
0DA4:  MOVWF  25
0DA5:  MOVLP  00
0DA6:  MOVLB  00
0DA7:  CALL   6F5
0DA8:  MOVLP  08
....................     fprintf(PC, "\t\tpiclog_smf_loop_counter: %d\r\n", piclog_data_header.fields.piclog_smf_loop_counter);
0DA9:  MOVLW  D0
0DAA:  MOVLB  03
0DAB:  MOVWF  11
0DAC:  MOVLW  05
0DAD:  MOVWF  12
0DAE:  BCF    03.0
0DAF:  MOVLW  1B
0DB0:  MOVLB  11
0DB1:  MOVWF  51
0DB2:  MOVLB  00
0DB3:  CALL   2E4
0DB4:  MOVLB  0F
0DB5:  MOVF   61,W
0DB6:  MOVLB  11
0DB7:  MOVWF  4E
0DB8:  MOVLW  18
0DB9:  MOVWF  4F
0DBA:  MOVLB  00
0DBB:  CALL   44B
0DBC:  MOVLW  0D
0DBD:  MOVLB  12
0DBE:  MOVWF  25
0DBF:  MOVLP  00
0DC0:  MOVLB  00
0DC1:  CALL   6F5
0DC2:  MOVLP  08
0DC3:  MOVLW  0A
0DC4:  MOVLB  12
0DC5:  MOVWF  25
0DC6:  MOVLP  00
0DC7:  MOVLB  00
0DC8:  CALL   6F5
0DC9:  MOVLP  08
.................... 
....................     read_data_bytes(mis_fm, ADDRESS_PICLOG_START, meas_data_header.bytes, sizeof(meas_data_header.bytes)); // Clear the stream
0DCA:  MOVLB  0E
0DCB:  MOVF   6F,W
0DCC:  MOVLB  11
0DCD:  MOVWF  55
0DCE:  MOVLB  0E
0DCF:  MOVF   6E,W
0DD0:  MOVLB  11
0DD1:  MOVWF  54
0DD2:  MOVLB  0E
0DD3:  MOVF   6D,W
0DD4:  MOVLB  11
0DD5:  MOVWF  53
0DD6:  MOVLB  0E
0DD7:  MOVF   6C,W
0DD8:  MOVLB  11
0DD9:  MOVWF  52
0DDA:  CLRF   59
0DDB:  CLRF   58
0DDC:  CLRF   57
0DDD:  CLRF   56
0DDE:  MOVLW  25
0DDF:  MOVWF  5B
0DE0:  MOVLW  28
0DE1:  MOVWF  5A
0DE2:  CLRF   5F
0DE3:  CLRF   5E
0DE4:  CLRF   5D
0DE5:  MOVLW  40
0DE6:  MOVWF  5C
0DE7:  MOVLB  00
0DE8:  CALL   1B1
....................     fprintf(PC, "\t__MEASUREMENT__\r\n");
0DE9:  MOVLW  E0
0DEA:  MOVLB  03
0DEB:  MOVWF  11
0DEC:  MOVLW  05
0DED:  MOVWF  12
0DEE:  MOVLP  00
0DEF:  MOVLB  00
0DF0:  CALL   71D
0DF1:  MOVLP  08
....................     fprintf(PC, "\t\tmeasurement_data_counter    : %lu\r\n", meas_data_header.fields.measurement_data_counter); 
0DF2:  MOVLW  EA
0DF3:  MOVLB  03
0DF4:  MOVWF  11
0DF5:  MOVLW  05
0DF6:  MOVWF  12
0DF7:  BCF    03.0
0DF8:  MOVLW  20
0DF9:  MOVLB  11
0DFA:  MOVWF  51
0DFB:  MOVLB  00
0DFC:  CALL   2E4
0DFD:  MOVLW  41
0DFE:  MOVWF  04
0DFF:  MOVLB  10
0E00:  MOVF   4B,W
0E01:  MOVLB  11
0E02:  MOVWF  54
0E03:  MOVLB  10
0E04:  MOVF   4A,W
0E05:  MOVLB  11
0E06:  MOVWF  53
0E07:  MOVLB  10
0E08:  MOVF   49,W
0E09:  MOVLB  11
0E0A:  MOVWF  52
0E0B:  MOVLB  10
0E0C:  MOVF   48,W
0E0D:  MOVLB  11
0E0E:  MOVWF  51
0E0F:  MOVLB  00
0E10:  CALL   3B0
0E11:  MOVLW  0D
0E12:  MOVLB  12
0E13:  MOVWF  25
0E14:  MOVLP  00
0E15:  MOVLB  00
0E16:  CALL   6F5
0E17:  MOVLP  08
0E18:  MOVLW  0A
0E19:  MOVLB  12
0E1A:  MOVWF  25
0E1B:  MOVLP  00
0E1C:  MOVLB  00
0E1D:  CALL   6F5
0E1E:  MOVLP  08
....................     fprintf(PC, "\t\tmeas_loop_counter           : %d\r\n", meas_data_header.fields.meas_loop_counter);
0E1F:  MOVLW  FD
0E20:  MOVLB  03
0E21:  MOVWF  11
0E22:  MOVLW  05
0E23:  MOVWF  12
0E24:  BCF    03.0
0E25:  MOVLW  20
0E26:  MOVLB  11
0E27:  MOVWF  51
0E28:  MOVLB  00
0E29:  CALL   2E4
0E2A:  MOVLB  10
0E2B:  MOVF   4C,W
0E2C:  MOVLB  11
0E2D:  MOVWF  4E
0E2E:  MOVLW  18
0E2F:  MOVWF  4F
0E30:  MOVLB  00
0E31:  CALL   44B
0E32:  MOVLW  0D
0E33:  MOVLB  12
0E34:  MOVWF  25
0E35:  MOVLP  00
0E36:  MOVLB  00
0E37:  CALL   6F5
0E38:  MOVLP  08
0E39:  MOVLW  0A
0E3A:  MOVLB  12
0E3B:  MOVWF  25
0E3C:  MOVLP  00
0E3D:  MOVLB  00
0E3E:  CALL   6F5
0E3F:  MOVLP  08
....................     fprintf(PC, "\t\tmeasurement_data_smf_counter: %lu\r\n", meas_data_header.fields.measurement_data_smf_counter);
0E40:  MOVLW  10
0E41:  MOVLB  03
0E42:  MOVWF  11
0E43:  MOVLW  06
0E44:  MOVWF  12
0E45:  BCF    03.0
0E46:  MOVLW  20
0E47:  MOVLB  11
0E48:  MOVWF  51
0E49:  MOVLB  00
0E4A:  CALL   2E4
0E4B:  MOVLW  41
0E4C:  MOVWF  04
0E4D:  MOVLB  10
0E4E:  MOVF   50,W
0E4F:  MOVLB  11
0E50:  MOVWF  54
0E51:  MOVLB  10
0E52:  MOVF   4F,W
0E53:  MOVLB  11
0E54:  MOVWF  53
0E55:  MOVLB  10
0E56:  MOVF   4E,W
0E57:  MOVLB  11
0E58:  MOVWF  52
0E59:  MOVLB  10
0E5A:  MOVF   4D,W
0E5B:  MOVLB  11
0E5C:  MOVWF  51
0E5D:  MOVLB  00
0E5E:  CALL   3B0
0E5F:  MOVLW  0D
0E60:  MOVLB  12
0E61:  MOVWF  25
0E62:  MOVLP  00
0E63:  MOVLB  00
0E64:  CALL   6F5
0E65:  MOVLP  08
0E66:  MOVLW  0A
0E67:  MOVLB  12
0E68:  MOVWF  25
0E69:  MOVLP  00
0E6A:  MOVLB  00
0E6B:  CALL   6F5
0E6C:  MOVLP  08
....................     fprintf(PC, "\t\tmeas_smf_loop_counter       : %d\r\n", meas_data_header.fields.meas_smf_loop_counter);
0E6D:  MOVLW  23
0E6E:  MOVLB  03
0E6F:  MOVWF  11
0E70:  MOVLW  06
0E71:  MOVWF  12
0E72:  BCF    03.0
0E73:  MOVLW  20
0E74:  MOVLB  11
0E75:  MOVWF  51
0E76:  MOVLB  00
0E77:  CALL   2E4
0E78:  MOVLB  10
0E79:  MOVF   51,W
0E7A:  MOVLB  11
0E7B:  MOVWF  4E
0E7C:  MOVLW  18
0E7D:  MOVWF  4F
0E7E:  MOVLB  00
0E7F:  CALL   44B
0E80:  MOVLW  0D
0E81:  MOVLB  12
0E82:  MOVWF  25
0E83:  MOVLP  00
0E84:  MOVLB  00
0E85:  CALL   6F5
0E86:  MOVLP  08
0E87:  MOVLW  0A
0E88:  MOVLB  12
0E89:  MOVWF  25
0E8A:  MOVLP  00
0E8B:  MOVLB  00
0E8C:  CALL   6F5
0E8D:  MOVLP  08
....................     fprintf(PC, "\tComplete\r\n");
0E8E:  MOVLW  36
0E8F:  MOVLB  03
0E90:  MOVWF  11
0E91:  MOVLW  06
0E92:  MOVWF  12
0E93:  MOVLP  00
0E94:  MOVLB  00
0E95:  CALL   71D
0E96:  MOVLP  08
0E97:  MOVLP  30
0E98:  GOTO   51F (RETURN)
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
3000:  MOVLB  03
3001:  BSF    1F.3
3002:  MOVLW  A0
3003:  MOVWF  1B
3004:  MOVLW  01
3005:  MOVWF  1C
3006:  MOVLW  A6
3007:  MOVWF  1E
3008:  MOVLW  90
3009:  MOVWF  1D
300A:  MOVLB  01
300B:  BCF    0D.4
300C:  MOVLB  02
300D:  BSF    0D.4
300E:  MOVLB  04
300F:  BCF    15.5
3010:  MOVLW  40
3011:  MOVWF  14
3012:  MOVLW  09
3013:  MOVWF  12
3014:  MOVLW  2A
3015:  MOVWF  15
3016:  MOVLB  02
3017:  BCF    1D.5
3018:  BCF    1D.3
3019:  BCF    1D.4
301A:  MOVLB  01
301B:  BCF    0E.5
301C:  BSF    0E.4
301D:  BCF    0E.3
301E:  MOVLB  00
301F:  BCF    28.0
3020:  CLRF   30
3021:  CLRF   2F
3022:  CLRF   2E
3023:  CLRF   2D
3024:  CLRF   34
3025:  CLRF   33
3026:  CLRF   32
3027:  CLRF   31
3028:  CLRF   36
3029:  CLRF   35
302A:  CLRF   57
302B:  CLRF   59
302C:  CLRF   58
302D:  MOVLB  0C
302E:  CLRF   2D
302F:  CLRF   2C
3030:  CLRF   2B
3031:  CLRF   2A
3032:  CLRF   2F
3033:  CLRF   2E
3034:  CLRF   31
3035:  CLRF   30
3036:  CLRF   33
3037:  CLRF   32
3038:  CLRF   35
3039:  CLRF   34
303A:  MOVLW  1E
303B:  MOVWF  70
303C:  MOVLB  03
303D:  CLRF   0C
303E:  CLRF   0D
303F:  CLRF   0E
3040:  CLRF   0F
3041:  CLRF   10
3042:  MOVLB  02
3043:  CLRF   12
3044:  CLRF   11
3045:  MOVLB  00
3046:  MOVLW  03
3047:  MOVWF  29
3048:  CLRF   2A
3049:  CLRF   2B
304A:  CLRF   2C
304B:  CLRF   37
304C:  CLRF   38
304D:  CLRF   39
304E:  CLRF   3A
304F:  CLRF   3B
3050:  CLRF   3C
3051:  CLRF   3D
3052:  CLRF   3E
3053:  CLRF   3F
3054:  CLRF   40
3055:  CLRF   41
3056:  CLRF   42
3057:  CLRF   43
3058:  CLRF   44
3059:  CLRF   45
305A:  CLRF   46
305B:  CLRF   47
305C:  CLRF   48
305D:  CLRF   49
305E:  CLRF   4A
305F:  CLRF   4B
3060:  CLRF   4C
3061:  CLRF   4D
3062:  CLRF   4E
3063:  CLRF   4F
3064:  CLRF   50
3065:  CLRF   51
3066:  CLRF   52
3067:  CLRF   53
3068:  CLRF   54
3069:  CLRF   55
306A:  CLRF   56
306B:  CLRF   5A
306C:  CLRF   5B
306D:  CLRF   5C
306E:  CLRF   5D
306F:  CLRF   5E
3070:  CLRF   5F
3071:  CLRF   60
3072:  CLRF   61
3073:  CLRF   62
3074:  CLRF   63
3075:  CLRF   64
3076:  CLRF   65
3077:  CLRF   66
3078:  CLRF   67
3079:  CLRF   68
307A:  CLRF   69
307B:  CLRF   6A
307C:  CLRF   6B
307D:  CLRF   6C
307E:  CLRF   6D
307F:  CLRF   6E
3080:  CLRF   6F
3081:  MOVLB  01
3082:  CLRF   20
3083:  CLRF   21
3084:  CLRF   22
3085:  CLRF   23
3086:  CLRF   24
3087:  CLRF   25
3088:  CLRF   26
3089:  CLRF   27
308A:  CLRF   28
308B:  CLRF   29
308C:  CLRF   2A
308D:  CLRF   2B
308E:  CLRF   2C
308F:  CLRF   2D
3090:  CLRF   2E
3091:  CLRF   2F
3092:  CLRF   30
3093:  CLRF   31
3094:  CLRF   32
3095:  CLRF   33
3096:  CLRF   34
3097:  CLRF   35
3098:  CLRF   36
3099:  CLRF   37
309A:  CLRF   38
309B:  CLRF   39
309C:  CLRF   3A
309D:  CLRF   3B
309E:  CLRF   3C
309F:  CLRF   3D
30A0:  CLRF   3E
30A1:  CLRF   3F
30A2:  CLRF   40
30A3:  CLRF   41
30A4:  CLRF   42
30A5:  CLRF   43
30A6:  CLRF   44
30A7:  CLRF   45
30A8:  CLRF   46
30A9:  CLRF   47
30AA:  CLRF   48
30AB:  CLRF   49
30AC:  CLRF   4A
30AD:  CLRF   4B
30AE:  CLRF   4C
30AF:  CLRF   4D
30B0:  CLRF   4E
30B1:  CLRF   4F
30B2:  CLRF   50
30B3:  CLRF   51
30B4:  CLRF   52
30B5:  CLRF   53
30B6:  CLRF   54
30B7:  CLRF   55
30B8:  CLRF   56
30B9:  CLRF   57
30BA:  CLRF   58
30BB:  CLRF   59
30BC:  CLRF   5A
30BD:  CLRF   5B
30BE:  CLRF   5C
30BF:  CLRF   5D
30C0:  CLRF   5E
30C1:  CLRF   5F
30C2:  CLRF   60
30C3:  CLRF   61
30C4:  CLRF   62
30C5:  CLRF   63
30C6:  CLRF   64
30C7:  CLRF   65
30C8:  CLRF   66
30C9:  CLRF   67
30CA:  CLRF   68
30CB:  CLRF   69
30CC:  CLRF   6A
30CD:  CLRF   6B
30CE:  CLRF   6C
30CF:  CLRF   6D
30D0:  CLRF   6E
30D1:  CLRF   6F
30D2:  MOVLB  02
30D3:  CLRF   20
30D4:  CLRF   21
30D5:  CLRF   22
30D6:  CLRF   23
30D7:  CLRF   24
30D8:  CLRF   25
30D9:  CLRF   26
30DA:  CLRF   27
30DB:  CLRF   28
30DC:  CLRF   29
30DD:  CLRF   2A
30DE:  CLRF   2B
30DF:  CLRF   2C
30E0:  CLRF   2D
30E1:  CLRF   2E
30E2:  CLRF   2F
30E3:  CLRF   30
30E4:  CLRF   31
30E5:  CLRF   32
30E6:  CLRF   33
30E7:  CLRF   34
30E8:  CLRF   35
30E9:  CLRF   36
30EA:  CLRF   37
30EB:  CLRF   38
30EC:  CLRF   39
30ED:  CLRF   3A
30EE:  CLRF   3B
30EF:  CLRF   3C
30F0:  CLRF   3D
30F1:  CLRF   3E
30F2:  CLRF   3F
30F3:  CLRF   40
30F4:  CLRF   41
30F5:  CLRF   42
30F6:  CLRF   43
30F7:  CLRF   44
30F8:  CLRF   45
30F9:  CLRF   46
30FA:  CLRF   47
30FB:  CLRF   48
30FC:  CLRF   49
30FD:  CLRF   4A
30FE:  CLRF   4B
30FF:  CLRF   4C
3100:  CLRF   4D
3101:  CLRF   4E
3102:  CLRF   4F
3103:  CLRF   50
3104:  CLRF   51
3105:  CLRF   52
3106:  CLRF   53
3107:  CLRF   54
3108:  CLRF   55
3109:  CLRF   56
310A:  CLRF   57
310B:  CLRF   58
310C:  CLRF   59
310D:  CLRF   5A
310E:  CLRF   5B
310F:  CLRF   5C
3110:  CLRF   5D
3111:  CLRF   5E
3112:  CLRF   5F
3113:  CLRF   60
3114:  CLRF   61
3115:  CLRF   62
3116:  CLRF   63
3117:  CLRF   64
3118:  CLRF   65
3119:  CLRF   66
311A:  CLRF   67
311B:  CLRF   68
311C:  CLRF   69
311D:  CLRF   6A
311E:  CLRF   6B
311F:  CLRF   6C
3120:  CLRF   6D
3121:  CLRF   6E
3122:  CLRF   6F
3123:  MOVLB  03
3124:  CLRF   20
3125:  CLRF   21
3126:  CLRF   22
3127:  CLRF   23
3128:  CLRF   24
3129:  CLRF   25
312A:  CLRF   26
312B:  CLRF   27
312C:  CLRF   28
312D:  CLRF   29
312E:  CLRF   2A
312F:  CLRF   2B
3130:  CLRF   2C
3131:  CLRF   2D
3132:  CLRF   2E
3133:  CLRF   2F
3134:  CLRF   30
3135:  CLRF   31
3136:  CLRF   32
3137:  CLRF   33
3138:  CLRF   34
3139:  CLRF   35
313A:  CLRF   36
313B:  CLRF   37
313C:  CLRF   38
313D:  CLRF   39
313E:  CLRF   3A
313F:  CLRF   3B
3140:  CLRF   3C
3141:  CLRF   3D
3142:  CLRF   3E
3143:  CLRF   3F
3144:  CLRF   40
3145:  CLRF   41
3146:  CLRF   42
3147:  CLRF   43
3148:  CLRF   44
3149:  CLRF   45
314A:  CLRF   46
314B:  CLRF   47
314C:  CLRF   48
314D:  CLRF   49
314E:  CLRF   4A
314F:  CLRF   4B
3150:  CLRF   4C
3151:  CLRF   4D
3152:  CLRF   4E
3153:  CLRF   4F
3154:  CLRF   50
3155:  CLRF   51
3156:  CLRF   52
3157:  CLRF   53
3158:  CLRF   54
3159:  CLRF   55
315A:  CLRF   56
315B:  CLRF   57
315C:  CLRF   58
315D:  CLRF   59
315E:  CLRF   5A
315F:  CLRF   5B
3160:  CLRF   5C
3161:  CLRF   5D
3162:  CLRF   5E
3163:  CLRF   5F
3164:  CLRF   60
3165:  CLRF   61
3166:  CLRF   62
3167:  CLRF   63
3168:  CLRF   64
3169:  CLRF   65
316A:  CLRF   66
316B:  CLRF   67
316C:  CLRF   68
316D:  CLRF   69
316E:  CLRF   6A
316F:  CLRF   6B
3170:  CLRF   6C
3171:  CLRF   6D
3172:  CLRF   6E
3173:  CLRF   6F
3174:  MOVLB  04
3175:  CLRF   20
3176:  CLRF   21
3177:  CLRF   22
3178:  CLRF   23
3179:  CLRF   24
317A:  CLRF   25
317B:  CLRF   26
317C:  CLRF   27
317D:  CLRF   28
317E:  CLRF   29
317F:  CLRF   2A
3180:  CLRF   2B
3181:  CLRF   2C
3182:  CLRF   2D
3183:  CLRF   2E
3184:  CLRF   2F
3185:  CLRF   30
3186:  CLRF   31
3187:  CLRF   32
3188:  CLRF   33
3189:  CLRF   34
318A:  CLRF   35
318B:  CLRF   36
318C:  CLRF   37
318D:  CLRF   38
318E:  CLRF   39
318F:  CLRF   3A
3190:  CLRF   3B
3191:  CLRF   3C
3192:  CLRF   3D
3193:  CLRF   3E
3194:  CLRF   3F
3195:  CLRF   40
3196:  CLRF   41
3197:  CLRF   42
3198:  CLRF   43
3199:  CLRF   44
319A:  CLRF   45
319B:  CLRF   46
319C:  CLRF   47
319D:  CLRF   48
319E:  CLRF   49
319F:  CLRF   4A
31A0:  CLRF   4B
31A1:  CLRF   4C
31A2:  CLRF   4D
31A3:  CLRF   4E
31A4:  CLRF   4F
31A5:  CLRF   50
31A6:  CLRF   51
31A7:  CLRF   52
31A8:  CLRF   53
31A9:  CLRF   54
31AA:  CLRF   55
31AB:  CLRF   56
31AC:  CLRF   57
31AD:  CLRF   58
31AE:  CLRF   59
31AF:  CLRF   5A
31B0:  CLRF   5B
31B1:  CLRF   5C
31B2:  CLRF   5D
31B3:  CLRF   5E
31B4:  CLRF   5F
31B5:  CLRF   60
31B6:  CLRF   61
31B7:  CLRF   62
31B8:  CLRF   63
31B9:  CLRF   64
31BA:  CLRF   65
31BB:  CLRF   66
31BC:  CLRF   67
31BD:  CLRF   68
31BE:  CLRF   69
31BF:  CLRF   6A
31C0:  CLRF   6B
31C1:  CLRF   6C
31C2:  CLRF   6D
31C3:  CLRF   6E
31C4:  CLRF   6F
31C5:  MOVLB  05
31C6:  CLRF   20
31C7:  CLRF   21
31C8:  CLRF   22
31C9:  CLRF   23
31CA:  CLRF   24
31CB:  CLRF   25
31CC:  CLRF   26
31CD:  CLRF   27
31CE:  CLRF   28
31CF:  CLRF   29
31D0:  CLRF   2A
31D1:  CLRF   2B
31D2:  CLRF   2C
31D3:  CLRF   2D
31D4:  CLRF   2E
31D5:  CLRF   2F
31D6:  CLRF   30
31D7:  CLRF   31
31D8:  CLRF   32
31D9:  CLRF   33
31DA:  CLRF   34
31DB:  CLRF   35
31DC:  CLRF   36
31DD:  CLRF   37
31DE:  CLRF   38
31DF:  CLRF   39
31E0:  CLRF   3A
31E1:  CLRF   3B
31E2:  CLRF   3C
31E3:  CLRF   3D
31E4:  CLRF   3E
31E5:  CLRF   3F
31E6:  CLRF   40
31E7:  CLRF   41
31E8:  CLRF   42
31E9:  CLRF   43
31EA:  CLRF   44
31EB:  CLRF   45
31EC:  CLRF   46
31ED:  CLRF   47
31EE:  CLRF   48
31EF:  CLRF   49
31F0:  CLRF   4A
31F1:  CLRF   4B
31F2:  CLRF   4C
31F3:  CLRF   4D
31F4:  CLRF   4E
31F5:  CLRF   4F
31F6:  CLRF   50
31F7:  CLRF   51
31F8:  CLRF   52
31F9:  CLRF   53
31FA:  CLRF   54
31FB:  CLRF   55
31FC:  CLRF   56
31FD:  CLRF   57
31FE:  CLRF   58
31FF:  CLRF   59
3200:  CLRF   5A
3201:  CLRF   5B
3202:  CLRF   5C
3203:  CLRF   5D
3204:  CLRF   5E
3205:  CLRF   5F
3206:  CLRF   60
3207:  CLRF   61
3208:  CLRF   62
3209:  CLRF   63
320A:  CLRF   64
320B:  CLRF   65
320C:  CLRF   66
320D:  CLRF   67
320E:  CLRF   68
320F:  CLRF   69
3210:  CLRF   6A
3211:  CLRF   6B
3212:  CLRF   6C
3213:  CLRF   6D
3214:  CLRF   6E
3215:  CLRF   6F
3216:  MOVLB  06
3217:  CLRF   20
3218:  CLRF   21
3219:  CLRF   22
321A:  CLRF   23
321B:  CLRF   24
321C:  CLRF   25
321D:  CLRF   26
321E:  CLRF   27
321F:  CLRF   28
3220:  CLRF   29
3221:  CLRF   2A
3222:  CLRF   2B
3223:  CLRF   2C
3224:  CLRF   2D
3225:  CLRF   2E
3226:  CLRF   2F
3227:  CLRF   30
3228:  CLRF   31
3229:  CLRF   32
322A:  CLRF   33
322B:  CLRF   34
322C:  CLRF   35
322D:  CLRF   36
322E:  CLRF   37
322F:  CLRF   38
3230:  CLRF   39
3231:  CLRF   3A
3232:  CLRF   3B
3233:  CLRF   3C
3234:  CLRF   3D
3235:  CLRF   3E
3236:  CLRF   3F
3237:  CLRF   40
3238:  CLRF   41
3239:  CLRF   42
323A:  CLRF   43
323B:  CLRF   44
323C:  CLRF   45
323D:  CLRF   46
323E:  CLRF   47
323F:  CLRF   48
3240:  CLRF   49
3241:  CLRF   4A
3242:  CLRF   4B
3243:  CLRF   4C
3244:  CLRF   4D
3245:  CLRF   4E
3246:  CLRF   4F
3247:  CLRF   50
3248:  CLRF   51
3249:  CLRF   52
324A:  CLRF   53
324B:  CLRF   54
324C:  CLRF   55
324D:  CLRF   56
324E:  CLRF   57
324F:  CLRF   58
3250:  CLRF   59
3251:  CLRF   5A
3252:  CLRF   5B
3253:  CLRF   5C
3254:  CLRF   5D
3255:  CLRF   5E
3256:  CLRF   5F
3257:  CLRF   60
3258:  CLRF   61
3259:  CLRF   62
325A:  CLRF   63
325B:  CLRF   64
325C:  CLRF   65
325D:  CLRF   66
325E:  CLRF   67
325F:  CLRF   68
3260:  CLRF   69
3261:  CLRF   6A
3262:  CLRF   6B
3263:  CLRF   6C
3264:  CLRF   6D
3265:  CLRF   6E
3266:  CLRF   6F
3267:  MOVLB  07
3268:  CLRF   20
3269:  CLRF   21
326A:  CLRF   22
326B:  CLRF   23
326C:  CLRF   24
326D:  CLRF   25
326E:  CLRF   26
326F:  CLRF   27
3270:  CLRF   28
3271:  CLRF   29
3272:  CLRF   2A
3273:  CLRF   2B
3274:  CLRF   2C
3275:  CLRF   2D
3276:  CLRF   2E
3277:  CLRF   2F
3278:  CLRF   30
3279:  CLRF   31
327A:  CLRF   32
327B:  CLRF   33
327C:  CLRF   34
327D:  CLRF   35
327E:  CLRF   36
327F:  CLRF   37
3280:  CLRF   38
3281:  CLRF   39
3282:  CLRF   3A
3283:  CLRF   3B
3284:  CLRF   3C
3285:  CLRF   3D
3286:  CLRF   3E
3287:  CLRF   3F
3288:  CLRF   40
3289:  CLRF   41
328A:  CLRF   42
328B:  CLRF   43
328C:  CLRF   44
328D:  CLRF   45
328E:  CLRF   46
328F:  CLRF   47
3290:  CLRF   48
3291:  CLRF   49
3292:  CLRF   4A
3293:  CLRF   4B
3294:  CLRF   4C
3295:  CLRF   4D
3296:  CLRF   4E
3297:  CLRF   4F
3298:  CLRF   50
3299:  CLRF   51
329A:  CLRF   52
329B:  CLRF   53
329C:  CLRF   54
329D:  CLRF   55
329E:  CLRF   56
329F:  CLRF   57
32A0:  CLRF   58
32A1:  CLRF   59
32A2:  CLRF   5A
32A3:  CLRF   5B
32A4:  CLRF   5C
32A5:  CLRF   5D
32A6:  CLRF   5E
32A7:  CLRF   5F
32A8:  CLRF   60
32A9:  CLRF   61
32AA:  CLRF   62
32AB:  CLRF   63
32AC:  CLRF   64
32AD:  CLRF   65
32AE:  CLRF   66
32AF:  CLRF   67
32B0:  CLRF   68
32B1:  CLRF   69
32B2:  CLRF   6A
32B3:  CLRF   6B
32B4:  CLRF   6C
32B5:  CLRF   6D
32B6:  CLRF   6E
32B7:  CLRF   6F
32B8:  MOVLB  08
32B9:  CLRF   20
32BA:  CLRF   21
32BB:  CLRF   22
32BC:  CLRF   23
32BD:  CLRF   24
32BE:  CLRF   25
32BF:  CLRF   26
32C0:  CLRF   27
32C1:  CLRF   28
32C2:  CLRF   29
32C3:  CLRF   2A
32C4:  CLRF   2B
32C5:  CLRF   2C
32C6:  CLRF   2D
32C7:  CLRF   2E
32C8:  CLRF   2F
32C9:  CLRF   30
32CA:  CLRF   31
32CB:  CLRF   32
32CC:  CLRF   33
32CD:  CLRF   34
32CE:  CLRF   35
32CF:  CLRF   36
32D0:  CLRF   37
32D1:  CLRF   38
32D2:  CLRF   39
32D3:  CLRF   3A
32D4:  CLRF   3B
32D5:  CLRF   3C
32D6:  CLRF   3D
32D7:  CLRF   3E
32D8:  CLRF   3F
32D9:  CLRF   40
32DA:  CLRF   41
32DB:  CLRF   42
32DC:  CLRF   43
32DD:  CLRF   44
32DE:  CLRF   45
32DF:  CLRF   46
32E0:  CLRF   47
32E1:  CLRF   48
32E2:  CLRF   49
32E3:  CLRF   4A
32E4:  CLRF   4B
32E5:  CLRF   4C
32E6:  CLRF   4D
32E7:  CLRF   4E
32E8:  CLRF   4F
32E9:  CLRF   50
32EA:  CLRF   51
32EB:  CLRF   52
32EC:  CLRF   53
32ED:  CLRF   54
32EE:  CLRF   55
32EF:  CLRF   56
32F0:  CLRF   57
32F1:  CLRF   58
32F2:  CLRF   59
32F3:  CLRF   5A
32F4:  CLRF   5B
32F5:  CLRF   5C
32F6:  CLRF   5D
32F7:  CLRF   5E
32F8:  CLRF   5F
32F9:  CLRF   60
32FA:  CLRF   61
32FB:  CLRF   62
32FC:  CLRF   63
32FD:  CLRF   64
32FE:  CLRF   65
32FF:  CLRF   66
3300:  CLRF   67
3301:  CLRF   68
3302:  CLRF   69
3303:  CLRF   6A
3304:  CLRF   6B
3305:  CLRF   6C
3306:  CLRF   6D
3307:  CLRF   6E
3308:  CLRF   6F
3309:  MOVLB  09
330A:  CLRF   20
330B:  CLRF   21
330C:  CLRF   22
330D:  CLRF   23
330E:  CLRF   24
330F:  CLRF   25
3310:  CLRF   26
3311:  CLRF   27
3312:  CLRF   28
3313:  CLRF   29
3314:  CLRF   2A
3315:  CLRF   2B
3316:  CLRF   2C
3317:  CLRF   2D
3318:  CLRF   2E
3319:  CLRF   2F
331A:  CLRF   30
331B:  CLRF   31
331C:  CLRF   32
331D:  CLRF   33
331E:  CLRF   34
331F:  CLRF   35
3320:  CLRF   36
3321:  CLRF   37
3322:  CLRF   38
3323:  CLRF   39
3324:  CLRF   3A
3325:  CLRF   3B
3326:  CLRF   3C
3327:  CLRF   3D
3328:  CLRF   3E
3329:  CLRF   3F
332A:  CLRF   40
332B:  CLRF   41
332C:  CLRF   42
332D:  CLRF   43
332E:  CLRF   44
332F:  CLRF   45
3330:  CLRF   46
3331:  CLRF   47
3332:  CLRF   48
3333:  CLRF   49
3334:  CLRF   4A
3335:  CLRF   4B
3336:  CLRF   4C
3337:  CLRF   4D
3338:  CLRF   4E
3339:  CLRF   4F
333A:  CLRF   50
333B:  CLRF   51
333C:  CLRF   52
333D:  CLRF   53
333E:  CLRF   54
333F:  CLRF   55
3340:  CLRF   56
3341:  CLRF   57
3342:  CLRF   58
3343:  CLRF   59
3344:  CLRF   5A
3345:  CLRF   5B
3346:  CLRF   5C
3347:  CLRF   5D
3348:  CLRF   5E
3349:  CLRF   5F
334A:  CLRF   60
334B:  CLRF   61
334C:  CLRF   62
334D:  CLRF   63
334E:  CLRF   64
334F:  CLRF   65
3350:  CLRF   66
3351:  CLRF   67
3352:  CLRF   68
3353:  CLRF   69
3354:  CLRF   6A
3355:  CLRF   6B
3356:  CLRF   6C
3357:  CLRF   6D
3358:  CLRF   6E
3359:  CLRF   6F
335A:  MOVLB  0A
335B:  CLRF   20
335C:  CLRF   21
335D:  CLRF   22
335E:  CLRF   23
335F:  CLRF   24
3360:  CLRF   25
3361:  CLRF   26
3362:  CLRF   27
3363:  CLRF   28
3364:  CLRF   29
3365:  CLRF   2A
3366:  CLRF   2B
3367:  CLRF   2C
3368:  CLRF   2D
3369:  CLRF   2E
336A:  CLRF   2F
336B:  CLRF   30
336C:  CLRF   31
336D:  CLRF   32
336E:  CLRF   33
336F:  CLRF   34
3370:  CLRF   35
3371:  CLRF   36
3372:  CLRF   37
3373:  CLRF   38
3374:  CLRF   39
3375:  CLRF   3A
3376:  CLRF   3B
3377:  CLRF   3C
3378:  CLRF   3D
3379:  CLRF   3E
337A:  CLRF   3F
337B:  CLRF   40
337C:  CLRF   41
337D:  CLRF   42
337E:  CLRF   43
337F:  CLRF   44
3380:  CLRF   45
3381:  CLRF   46
3382:  CLRF   47
3383:  CLRF   48
3384:  CLRF   49
3385:  CLRF   4A
3386:  CLRF   4B
3387:  CLRF   4C
3388:  CLRF   4D
3389:  CLRF   4E
338A:  CLRF   4F
338B:  CLRF   50
338C:  CLRF   51
338D:  CLRF   52
338E:  CLRF   53
338F:  CLRF   54
3390:  CLRF   55
3391:  CLRF   56
3392:  CLRF   57
3393:  CLRF   58
3394:  CLRF   59
3395:  CLRF   5A
3396:  CLRF   5B
3397:  CLRF   5C
3398:  CLRF   5D
3399:  CLRF   5E
339A:  CLRF   5F
339B:  CLRF   60
339C:  CLRF   61
339D:  CLRF   62
339E:  CLRF   63
339F:  CLRF   64
33A0:  CLRF   65
33A1:  CLRF   66
33A2:  CLRF   67
33A3:  CLRF   68
33A4:  CLRF   69
33A5:  CLRF   6A
33A6:  CLRF   6B
33A7:  CLRF   6C
33A8:  CLRF   6D
33A9:  CLRF   6E
33AA:  CLRF   6F
33AB:  MOVLB  0B
33AC:  CLRF   20
33AD:  CLRF   21
33AE:  CLRF   22
33AF:  CLRF   23
33B0:  CLRF   24
33B1:  CLRF   25
33B2:  CLRF   26
33B3:  CLRF   27
33B4:  CLRF   28
33B5:  CLRF   29
33B6:  CLRF   2A
33B7:  CLRF   2B
33B8:  CLRF   2C
33B9:  CLRF   2D
33BA:  CLRF   2E
33BB:  CLRF   2F
33BC:  CLRF   30
33BD:  CLRF   31
33BE:  CLRF   32
33BF:  CLRF   33
33C0:  CLRF   34
33C1:  CLRF   35
33C2:  CLRF   36
33C3:  CLRF   37
33C4:  CLRF   38
33C5:  CLRF   39
33C6:  CLRF   3A
33C7:  CLRF   3B
33C8:  CLRF   3C
33C9:  CLRF   3D
33CA:  CLRF   3E
33CB:  CLRF   3F
33CC:  CLRF   40
33CD:  CLRF   41
33CE:  CLRF   42
33CF:  CLRF   43
33D0:  CLRF   44
33D1:  CLRF   45
33D2:  CLRF   46
33D3:  CLRF   47
33D4:  CLRF   48
33D5:  CLRF   49
33D6:  CLRF   4A
33D7:  CLRF   4B
33D8:  CLRF   4C
33D9:  CLRF   4D
33DA:  CLRF   4E
33DB:  CLRF   4F
33DC:  CLRF   50
33DD:  CLRF   51
33DE:  CLRF   52
33DF:  CLRF   53
33E0:  CLRF   54
33E1:  CLRF   55
33E2:  CLRF   56
33E3:  CLRF   57
33E4:  CLRF   58
33E5:  CLRF   59
33E6:  CLRF   5A
33E7:  CLRF   5B
33E8:  CLRF   5C
33E9:  CLRF   5D
33EA:  CLRF   5E
33EB:  CLRF   5F
33EC:  CLRF   60
33ED:  CLRF   61
33EE:  CLRF   62
33EF:  CLRF   63
33F0:  CLRF   64
33F1:  CLRF   65
33F2:  CLRF   66
33F3:  CLRF   67
33F4:  CLRF   68
33F5:  CLRF   69
33F6:  CLRF   6A
33F7:  CLRF   6B
33F8:  CLRF   6C
33F9:  CLRF   6D
33FA:  CLRF   6E
33FB:  CLRF   6F
33FC:  MOVLB  0C
33FD:  CLRF   20
33FE:  CLRF   21
33FF:  CLRF   22
3400:  CLRF   23
3401:  CLRF   24
3402:  CLRF   25
3403:  CLRF   26
3404:  CLRF   27
3405:  CLRF   28
3406:  CLRF   29
3407:  CLRF   3A
3408:  CLRF   3B
3409:  CLRF   3C
340A:  CLRF   3D
340B:  CLRF   3E
340C:  CLRF   3F
340D:  CLRF   40
340E:  CLRF   41
340F:  CLRF   42
3410:  CLRF   43
3411:  CLRF   44
3412:  CLRF   45
3413:  CLRF   46
3414:  CLRF   47
3415:  CLRF   48
3416:  CLRF   49
3417:  CLRF   4A
3418:  CLRF   4B
3419:  CLRF   4C
341A:  CLRF   4D
341B:  CLRF   4E
341C:  CLRF   4F
341D:  CLRF   50
341E:  CLRF   51
341F:  CLRF   52
3420:  CLRF   53
3421:  CLRF   54
3422:  CLRF   55
3423:  CLRF   56
3424:  CLRF   57
3425:  CLRF   58
3426:  CLRF   59
3427:  CLRF   5A
3428:  CLRF   5B
3429:  CLRF   5C
342A:  CLRF   5D
342B:  CLRF   5E
342C:  CLRF   5F
342D:  CLRF   60
342E:  CLRF   61
342F:  CLRF   62
3430:  CLRF   63
3431:  CLRF   64
3432:  CLRF   65
3433:  CLRF   66
3434:  CLRF   67
3435:  CLRF   68
3436:  CLRF   69
3437:  CLRF   6A
3438:  CLRF   6B
3439:  CLRF   6C
343A:  CLRF   6D
343B:  CLRF   6E
343C:  CLRF   6F
343D:  MOVLB  0D
343E:  CLRF   20
343F:  CLRF   21
3440:  CLRF   22
3441:  CLRF   23
3442:  CLRF   24
3443:  CLRF   25
3444:  CLRF   26
3445:  CLRF   27
3446:  CLRF   28
3447:  CLRF   29
3448:  CLRF   2A
3449:  CLRF   2B
344A:  CLRF   2C
344B:  CLRF   2D
344C:  CLRF   2E
344D:  CLRF   2F
344E:  CLRF   30
344F:  CLRF   31
3450:  CLRF   32
3451:  CLRF   33
3452:  CLRF   34
3453:  CLRF   35
3454:  CLRF   36
3455:  CLRF   37
3456:  CLRF   38
3457:  CLRF   39
3458:  CLRF   3A
3459:  CLRF   3B
345A:  CLRF   3C
345B:  CLRF   3D
345C:  CLRF   3E
345D:  CLRF   3F
345E:  CLRF   40
345F:  CLRF   41
3460:  CLRF   42
3461:  CLRF   43
3462:  CLRF   44
3463:  CLRF   45
3464:  CLRF   46
3465:  CLRF   47
3466:  CLRF   48
3467:  CLRF   49
3468:  CLRF   4A
3469:  CLRF   4B
346A:  CLRF   4C
346B:  CLRF   4D
346C:  CLRF   4E
346D:  CLRF   4F
346E:  CLRF   50
346F:  CLRF   51
3470:  CLRF   52
3471:  CLRF   53
3472:  CLRF   54
3473:  CLRF   55
3474:  CLRF   56
3475:  CLRF   57
3476:  CLRF   58
3477:  CLRF   59
3478:  CLRF   5A
3479:  CLRF   5B
347A:  CLRF   5C
347B:  CLRF   5D
347C:  CLRF   5E
347D:  CLRF   5F
347E:  CLRF   60
347F:  CLRF   61
3480:  CLRF   62
3481:  CLRF   63
3482:  CLRF   64
3483:  CLRF   65
3484:  CLRF   66
3485:  CLRF   67
3486:  CLRF   68
3487:  CLRF   69
3488:  CLRF   6A
3489:  CLRF   6B
348A:  CLRF   6C
348B:  CLRF   6D
348C:  CLRF   6E
348D:  CLRF   6F
348E:  MOVLB  0E
348F:  CLRF   20
3490:  CLRF   21
3491:  CLRF   22
3492:  CLRF   23
3493:  CLRF   24
3494:  CLRF   25
3495:  CLRF   26
3496:  CLRF   27
3497:  CLRF   28
3498:  CLRF   29
3499:  CLRF   2A
349A:  CLRF   2B
349B:  CLRF   2C
349C:  CLRF   2D
349D:  CLRF   2E
349E:  CLRF   2F
349F:  CLRF   30
34A0:  CLRF   31
34A1:  CLRF   32
34A2:  CLRF   33
34A3:  CLRF   34
34A4:  CLRF   35
34A5:  CLRF   36
34A6:  CLRF   37
34A7:  CLRF   38
34A8:  CLRF   39
34A9:  CLRF   3A
34AA:  CLRF   3B
34AB:  CLRF   3C
34AC:  CLRF   3D
34AD:  CLRF   3E
34AE:  CLRF   3F
34AF:  CLRF   40
34B0:  CLRF   41
34B1:  CLRF   42
34B2:  CLRF   43
34B3:  CLRF   44
34B4:  CLRF   45
34B5:  CLRF   46
34B6:  CLRF   47
34B7:  CLRF   48
34B8:  CLRF   49
34B9:  CLRF   4A
34BA:  CLRF   4B
34BB:  CLRF   4C
34BC:  CLRF   4D
34BD:  CLRF   4E
34BE:  CLRF   4F
34BF:  CLRF   50
34C0:  CLRF   51
34C1:  CLRF   52
34C2:  CLRF   53
34C3:  CLRF   54
34C4:  CLRF   55
34C5:  CLRF   56
34C6:  CLRF   57
34C7:  CLRF   58
34C8:  CLRF   59
34C9:  CLRF   5A
34CA:  CLRF   5B
34CB:  CLRF   5C
34CC:  CLRF   5D
34CD:  CLRF   5E
34CE:  CLRF   5F
34CF:  CLRF   60
34D0:  CLRF   61
34D1:  CLRF   62
34D2:  CLRF   63
34D3:  CLRF   64
34D4:  CLRF   65
34D5:  CLRF   66
34D6:  CLRF   67
34D7:  CLRF   68
34D8:  CLRF   69
34D9:  CLRF   6A
34DA:  CLRF   6B
34DB:  CLRF   6C
34DC:  CLRF   6D
34DD:  MOVLW  79
34DE:  MOVWF  6E
34DF:  CLRF   6F
34E0:  MOVLW  01
34E1:  MOVLB  0F
34E2:  MOVWF  20
34E3:  MOVLW  01
34E4:  MOVWF  21
34E5:  MOVLW  72
34E6:  MOVWF  22
34E7:  CLRF   23
34E8:  CLRF   24
34E9:  MOVLW  09
34EA:  MOVWF  25
34EB:  MOVLW  01
34EC:  MOVWF  26
34ED:  CLRF   27
34EE:  MOVLW  02
34EF:  MOVWF  28
34F0:  MOVLW  01
34F1:  MOVWF  29
34F2:  MOVLB  00
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
34F3:  MOVLW  3C
34F4:  MOVLB  03
34F5:  MOVWF  11
34F6:  MOVLW  06
34F7:  MOVWF  12
34F8:  MOVLP  00
34F9:  MOVLB  00
34FA:  CALL   71D
34FB:  MOVLP  30
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
34FC:  MOVLW  5F
34FD:  MOVLB  03
34FE:  MOVWF  11
34FF:  MOVLW  06
3500:  MOVWF  12
3501:  MOVLP  00
3502:  MOVLB  00
3503:  CALL   71D
3504:  MOVLP  30
....................    fprintf(PC,"Last updated on 2025/06/15, by Inoue.\r\n\r\n");  
3505:  MOVLW  76
3506:  MOVLB  03
3507:  MOVWF  11
3508:  MOVLW  06
3509:  MOVWF  12
350A:  MOVLP  00
350B:  MOVLB  00
350C:  CALL   71D
350D:  MOVLP  30
.................... 
....................    
....................    io_init();
350E:  MOVLP  00
350F:  GOTO   76D
3510:  MOVLP  30
....................    adc_init();
3511:  MOVLP  00
3512:  GOTO   785
3513:  MOVLP  30
....................    setup_uart_to_boss();
3514:  MOVLP  00
3515:  GOTO   7AF
3516:  MOVLP  30
....................    setup_timer();
3517:  MOVLP  00
3518:  GOTO   7C3
3519:  MOVLP  30
....................    ad7490_init();
351A:  MOVLP  00
351B:  GOTO   7CC
351C:  MOVLP  30
....................    misf_init();
351D:  MOVLP  08
351E:  GOTO   4D6
351F:  MOVLP  30
.................... 
.................... 
....................    int1 is_finished = FALSE;
3520:  MOVLB  0F
3521:  BCF    33.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
3522:  MOVLW  8B
3523:  MOVLB  03
3524:  MOVWF  11
3525:  MOVLW  06
3526:  MOVWF  12
3527:  MOVLP  00
3528:  MOVLB  00
3529:  CALL   71D
352A:  MOVLP  30
....................    fprintf(PC,"waiting for BOSS PIC command");
352B:  MOVLW  9E
352C:  MOVLB  03
352D:  MOVWF  11
352E:  MOVLW  06
352F:  MOVWF  12
3530:  MOVLP  00
3531:  MOVLB  00
3532:  CALL   71D
3533:  MOVLP  30
....................    
....................    //Start loop
....................    while(!is_finished)
3534:  MOVLB  0F
3535:  BTFSS  33.0
3536:  GOTO   539
3537:  MOVLB  00
3538:  GOTO   64B
3539:  MOVLB  00
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
353A:  MOVF   57,F
353B:  BTFSC  03.2
353C:  GOTO   62A
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
353D:  MOVLW  20
353E:  MOVLB  0F
353F:  MOVWF  5F
3540:  MOVLW  17
3541:  MOVWF  5E
3542:  MOVLB  00
3543:  MOVF   57,W
3544:  MOVLB  0F
3545:  MOVWF  60
3546:  MOVLP  10
3547:  MOVLB  00
3548:  GOTO   000
3549:  MOVLP  30
354A:  MOVF   79,W
354B:  MOVWF  7A
354C:  MOVF   78,W
354D:  MOVWF  04
354E:  MOVF   7A,W
354F:  MOVWF  05
3550:  MOVLW  23
3551:  MOVWF  78
3552:  MOVLW  24
3553:  MOVWF  07
3554:  MOVLW  C4
3555:  MOVWF  06
3556:  MOVIW  [FSR0++],W
3557:  MOVWI  W,[FSR1++]
3558:  DECFSZ 78,F
3559:  GOTO   556
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
355A:  MOVLW  AD
355B:  MOVLB  03
355C:  MOVWF  11
355D:  MOVLW  06
355E:  MOVWF  12
355F:  BCF    03.0
3560:  MOVLW  0A
3561:  MOVLB  11
3562:  MOVWF  51
3563:  MOVLP  08
3564:  MOVLB  00
3565:  CALL   2E4
3566:  MOVLP  30
3567:  MOVLB  0F
3568:  MOVF   34,W
3569:  MOVLB  11
356A:  MOVWF  51
356B:  MOVLW  37
356C:  MOVWF  52
356D:  MOVLP  08
356E:  MOVLB  00
356F:  CALL   699
3570:  MOVLP  30
3571:  MOVLW  0D
3572:  MOVLB  12
3573:  MOVWF  25
3574:  MOVLP  00
3575:  MOVLB  00
3576:  CALL   6F5
3577:  MOVLP  30
3578:  MOVLW  0A
3579:  MOVLB  12
357A:  MOVWF  25
357B:  MOVLP  00
357C:  MOVLB  00
357D:  CALL   6F5
357E:  MOVLP  30
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
357F:  MOVLW  B5
3580:  MOVLB  03
3581:  MOVWF  11
3582:  MOVLW  06
3583:  MOVWF  12
3584:  BCF    03.0
3585:  MOVLW  0E
3586:  MOVLB  11
3587:  MOVWF  51
3588:  MOVLP  08
3589:  MOVLB  00
358A:  CALL   2E4
358B:  MOVLP  30
358C:  MOVLB  0F
358D:  MOVF   35,W
358E:  MOVLB  11
358F:  MOVWF  3A
3590:  MOVLW  1B
3591:  MOVWF  3B
3592:  MOVLP  08
3593:  MOVLB  00
3594:  CALL   6F5
3595:  MOVLP  30
3596:  MOVLW  0D
3597:  MOVLB  12
3598:  MOVWF  25
3599:  MOVLP  00
359A:  MOVLB  00
359B:  CALL   6F5
359C:  MOVLP  30
359D:  MOVLW  0A
359E:  MOVLB  12
359F:  MOVWF  25
35A0:  MOVLP  00
35A1:  MOVLB  00
35A2:  CALL   6F5
35A3:  MOVLP  30
....................          fprintf(PC, "payload: ");
35A4:  MOVLW  BF
35A5:  MOVLB  03
35A6:  MOVWF  11
35A7:  MOVLW  06
35A8:  MOVWF  12
35A9:  MOVLP  00
35AA:  MOVLB  00
35AB:  CALL   71D
35AC:  MOVLP  30
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
35AD:  MOVLB  0F
35AE:  CLRF   57
35AF:  MOVLB  00
35B0:  MOVLB  0F
35B1:  MOVF   35,W
35B2:  SUBWF  57,W
35B3:  BTFSS  03.0
35B4:  GOTO   5B7
35B5:  MOVLB  00
35B6:  GOTO   5D6
35B7:  MOVLB  00
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
35B8:  MOVLW  C7
35B9:  MOVLB  0F
35BA:  ADDWF  57,W
35BB:  MOVWF  04
35BC:  MOVLW  24
35BD:  MOVWF  05
35BE:  BTFSC  03.0
35BF:  INCF   05,F
35C0:  MOVF   00,W
35C1:  MOVWF  58
35C2:  MOVF   58,W
35C3:  MOVLB  11
35C4:  MOVWF  51
35C5:  MOVLW  37
35C6:  MOVWF  52
35C7:  MOVLP  08
35C8:  MOVLB  00
35C9:  CALL   699
35CA:  MOVLP  30
35CB:  MOVLW  20
35CC:  MOVLB  12
35CD:  MOVWF  25
35CE:  MOVLP  00
35CF:  MOVLB  00
35D0:  CALL   6F5
35D1:  MOVLP  30
35D2:  MOVLB  0F
35D3:  INCF   57,F
35D4:  MOVLB  00
35D5:  GOTO   5B0
....................          fprintf(PC, "\r\n\r\n");
35D6:  MOVLW  C4
35D7:  MOVLB  03
35D8:  MOVWF  11
35D9:  MOVLW  06
35DA:  MOVWF  12
35DB:  MOVLP  00
35DC:  MOVLB  00
35DD:  CALL   71D
35DE:  MOVLP  30
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
35DF:  MOVLW  00
35E0:  MOVLB  0F
35E1:  BTFSC  36.0
35E2:  MOVLW  01
35E3:  MOVWF  58
35E4:  MOVLW  C7
35E5:  MOVLB  03
35E6:  MOVWF  11
35E7:  MOVLW  06
35E8:  MOVWF  12
35E9:  BCF    03.0
35EA:  MOVLW  0A
35EB:  MOVLB  11
35EC:  MOVWF  51
35ED:  MOVLP  08
35EE:  MOVLB  00
35EF:  CALL   2E4
35F0:  MOVLP  30
35F1:  MOVLB  0F
35F2:  MOVF   58,W
35F3:  MOVLB  11
35F4:  MOVWF  4E
35F5:  MOVLW  18
35F6:  MOVWF  4F
35F7:  MOVLP  08
35F8:  MOVLB  00
35F9:  CALL   44B
35FA:  MOVLP  30
35FB:  MOVLW  0D
35FC:  MOVLB  12
35FD:  MOVWF  25
35FE:  MOVLP  00
35FF:  MOVLB  00
3600:  CALL   6F5
3601:  MOVLP  30
3602:  MOVLW  0A
3603:  MOVLB  12
3604:  MOVWF  25
3605:  MOVLP  00
3606:  MOVLB  00
3607:  CALL   6F5
3608:  MOVLP  30
....................          
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
3609:  MOVLW  20
360A:  MOVLB  0F
360B:  MOVWF  59
360C:  MOVLW  17
360D:  MOVWF  58
360E:  MOVLW  20
360F:  MOVWF  5B
3610:  MOVLW  37
3611:  MOVWF  5A
3612:  MOVLP  08
3613:  MOVLB  00
3614:  GOTO   74D
3615:  MOVLP  30
....................          
....................          if(recieve_cmd.is_exist)
3616:  MOVLB  0F
3617:  BTFSC  36.0
3618:  GOTO   61B
3619:  MOVLB  00
361A:  GOTO   62A
361B:  MOVLB  00
....................             is_finished = execute_command(&recieve_cmd); 
361C:  MOVLW  24
361D:  MOVLB  0F
361E:  MOVWF  59
361F:  MOVLW  C4
3620:  MOVWF  58
3621:  MOVLP  18
3622:  MOVLB  00
3623:  GOTO   7BA
3624:  MOVLP  30
3625:  MOVLB  0F
3626:  BCF    33.0
3627:  BTFSC  78.0
3628:  BSF    33.0
3629:  MOVLB  00
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
362A:  MOVLB  0F
362B:  BTFSC  33.0
362C:  GOTO   62F
362D:  MOVLB  00
362E:  GOTO   631
362F:  MOVLB  00
....................          break;
3630:  GOTO   64B
....................          
....................       delay_ms(400);
3631:  MOVLW  02
3632:  MOVLB  0F
3633:  MOVWF  58
3634:  MOVLB  00
3635:  MOVLW  C8
3636:  MOVLB  11
3637:  MOVWF  6B
3638:  MOVLP  10
3639:  MOVLB  00
363A:  CALL   7E0
363B:  MOVLP  30
363C:  MOVLB  0F
363D:  DECFSZ 58,F
363E:  GOTO   641
363F:  GOTO   643
3640:  MOVLB  00
3641:  MOVLB  00
3642:  GOTO   635
....................       fprintf(PC,".");
3643:  MOVLW  2E
3644:  MOVLB  12
3645:  MOVWF  25
3646:  MOVLP  00
3647:  MOVLB  00
3648:  CALL   6F5
3649:  MOVLP  30
364A:  GOTO   534
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
364B:  MOVLW  CF
364C:  MOVLB  03
364D:  MOVWF  11
364E:  MOVLW  06
364F:  MOVWF  12
3650:  MOVLP  00
3651:  MOVLB  00
3652:  CALL   71D
3653:  MOVLP  30
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3654:  MOVLW  2E
3655:  MOVLB  12
3656:  MOVWF  25
3657:  MOVLP  00
3658:  MOVLB  00
3659:  CALL   6F5
365A:  MOVLP  30
....................       delay_ms(1000);
365B:  MOVLW  04
365C:  MOVLB  0F
365D:  MOVWF  58
365E:  MOVLB  00
365F:  MOVLW  FA
3660:  MOVLB  11
3661:  MOVWF  6B
3662:  MOVLP  10
3663:  MOVLB  00
3664:  CALL   7E0
3665:  MOVLP  30
3666:  MOVLB  0F
3667:  DECFSZ 58,F
3668:  GOTO   66B
3669:  GOTO   66D
366A:  MOVLB  00
366B:  MOVLB  00
366C:  GOTO   65F
366D:  MOVLB  00
366E:  GOTO   654
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
366F:  MOVLW  EF
3670:  MOVLB  03
3671:  MOVWF  11
3672:  MOVLW  06
3673:  MOVWF  12
3674:  MOVLP  00
3675:  MOVLB  00
3676:  CALL   71D
3677:  MOVLP  30
....................    
.................... }
.................... 
3678:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
