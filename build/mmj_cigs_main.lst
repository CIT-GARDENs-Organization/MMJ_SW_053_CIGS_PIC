CCS PCM C Compiler, Version 5.104, 57077               20-6-25 15:58

               Filename:   build\mmj_cigs_main.lst

               ROM used:   14755 words (90%)
                           Largest free fragment is 1253
               RAM used:   1265 (62%) at main() level
                           1611 (79%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  38
0001:  GOTO   1B6
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06A
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005A:  DATA D4,34
005B:  DATA ED,32
005C:  DATA 72,10
005D:  DATA 49,37
005E:  DATA 69,3A
005F:  DATA E9,30
0060:  DATA EC,34
0061:  DATA FA,32
0062:  DATA 0D,05
0063:  DATA 00,00
0064:  DATA 89,21
0065:  DATA EF,36
0066:  DATA 70,36
0067:  DATA 65,3A
0068:  DATA E5,06
0069:  DATA 0A,00
*
0083:  DATA D5,20
0084:  DATA 52,2A
0085:  DATA A0,24
0086:  DATA EE,34
0087:  DATA F4,34
0088:  DATA 61,36
0089:  DATA 69,3D
008A:  DATA E5,06
008B:  DATA 0A,00
008C:  DATA 89,21
008D:  DATA EF,36
008E:  DATA 70,36
008F:  DATA 65,3A
0090:  DATA E5,06
0091:  DATA 0A,00
0092:  DATA CD,24
0093:  DATA D3,29
0094:  DATA C9,27
0095:  DATA 4E,10
0096:  DATA 46,26
0097:  DATA C1,29
0098:  DATA 48,10
0099:  DATA 49,37
009A:  DATA 69,3A
009B:  DATA E9,30
009C:  DATA EC,34
009D:  DATA FA,32
009E:  DATA 0D,05
009F:  DATA 00,01
00A0:  DATA 09,23
00A1:  DATA EC,30
00A2:  DATA 73,34
00A3:  DATA A0,34
00A4:  DATA 73,10
00A5:  DATA EE,37
00A6:  DATA 74,10
00A7:  DATA E3,37
00A8:  DATA 6E,37
00A9:  DATA E5,31
00AA:  DATA F4,32
00AB:  DATA E4,06
00AC:  DATA 0A,00
00AD:  DATA 89,29
00AE:  DATA 4D,23
00AF:  DATA 20,10
00B0:  DATA D0,24
00B1:  DATA 43,26
00B2:  DATA CF,23
00B3:  DATA A0,2A
00B4:  DATA F3,32
00B5:  DATA A0,21
00B6:  DATA EF,3A
00B7:  DATA 6E,3A
00B8:  DATA 65,39
00B9:  DATA 20,10
00BA:  DATA 20,10
00BB:  DATA 20,10
00BC:  DATA 3A,10
00BD:  DATA 30,3C
00BE:  DATA 25,18
00BF:  DATA 38,26
00C0:  DATA D8,06
00C1:  DATA 0A,00
00C2:  DATA 89,29
00C3:  DATA 4D,23
00C4:  DATA 20,10
00C5:  DATA D0,24
00C6:  DATA 43,26
00C7:  DATA CF,23
00C8:  DATA 20,26
00C9:  DATA EF,37
00CA:  DATA 70,10
00CB:  DATA C3,37
00CC:  DATA 75,37
00CD:  DATA F4,32
00CE:  DATA 72,10
00CF:  DATA 20,10
00D0:  DATA 20,10
00D1:  DATA 3A,10
00D2:  DATA 30,3C
00D3:  DATA 25,18
00D4:  DATA 32,2C
00D5:  DATA 0D,05
00D6:  DATA 00,01
00D7:  DATA 89,29
00D8:  DATA 4D,23
00D9:  DATA 20,10
00DA:  DATA CD,22
00DB:  DATA C1,29
00DC:  DATA 20,10
00DD:  DATA A0,2A
00DE:  DATA F3,32
00DF:  DATA A0,21
00E0:  DATA EF,3A
00E1:  DATA 6E,3A
00E2:  DATA 65,39
00E3:  DATA 20,10
00E4:  DATA 20,10
00E5:  DATA 20,10
00E6:  DATA 3A,10
00E7:  DATA 30,3C
00E8:  DATA 25,18
00E9:  DATA 38,26
00EA:  DATA D8,06
00EB:  DATA 0A,00
00EC:  DATA 89,29
00ED:  DATA 4D,23
00EE:  DATA 20,10
00EF:  DATA CD,22
00F0:  DATA C1,29
00F1:  DATA 20,10
00F2:  DATA 20,26
00F3:  DATA EF,37
00F4:  DATA 70,10
00F5:  DATA C3,37
00F6:  DATA 75,37
00F7:  DATA F4,32
00F8:  DATA 72,10
00F9:  DATA 20,10
00FA:  DATA 20,10
00FB:  DATA 3A,10
00FC:  DATA 30,3C
00FD:  DATA 25,18
00FE:  DATA 32,2C
00FF:  DATA 0D,05
0100:  DATA 00,01
0101:  DATA 89,26
0102:  DATA C9,29
0103:  DATA 46,10
0104:  DATA D0,24
0105:  DATA 43,26
0106:  DATA CF,23
0107:  DATA A0,2A
0108:  DATA F3,32
0109:  DATA A0,21
010A:  DATA EF,3A
010B:  DATA 6E,3A
010C:  DATA 65,39
010D:  DATA 20,10
010E:  DATA 20,10
010F:  DATA 20,10
0110:  DATA 3A,10
0111:  DATA 30,3C
0112:  DATA 25,18
0113:  DATA 38,26
0114:  DATA D8,06
0115:  DATA 0A,00
0116:  DATA 89,26
0117:  DATA C9,29
0118:  DATA 46,10
0119:  DATA D0,24
011A:  DATA 43,26
011B:  DATA CF,23
011C:  DATA A0,2A
011D:  DATA EE,31
011E:  DATA 6F,38
011F:  DATA F9,32
0120:  DATA 64,10
0121:  DATA C3,37
0122:  DATA 75,37
0123:  DATA F4,32
0124:  DATA 72,10
0125:  DATA 3A,10
0126:  DATA 30,3C
0127:  DATA 25,18
0128:  DATA 38,26
0129:  DATA D8,06
012A:  DATA 0A,00
012B:  DATA 89,26
012C:  DATA C9,29
012D:  DATA 46,10
012E:  DATA D0,24
012F:  DATA 43,26
0130:  DATA CF,23
0131:  DATA 20,26
0132:  DATA EF,37
0133:  DATA 70,10
0134:  DATA C3,37
0135:  DATA 75,37
0136:  DATA F4,32
0137:  DATA 72,10
0138:  DATA 20,10
0139:  DATA 20,10
013A:  DATA 3A,10
013B:  DATA 30,3C
013C:  DATA 25,18
013D:  DATA 32,2C
013E:  DATA 0D,05
013F:  DATA 00,01
0140:  DATA 89,26
0141:  DATA C9,29
0142:  DATA 46,10
0143:  DATA D0,24
0144:  DATA 43,26
0145:  DATA CF,23
0146:  DATA A0,2B
0147:  DATA F2,34
0148:  DATA F4,32
0149:  DATA A0,21
014A:  DATA EF,3A
014B:  DATA 6E,3A
014C:  DATA 65,39
014D:  DATA 20,10
014E:  DATA 20,10
014F:  DATA 3A,10
0150:  DATA 30,3C
0151:  DATA 25,18
0152:  DATA 32,2C
0153:  DATA 0D,05
0154:  DATA 00,01
0155:  DATA 89,26
0156:  DATA C9,29
0157:  DATA 46,10
0158:  DATA CD,22
0159:  DATA C1,29
015A:  DATA 20,10
015B:  DATA A0,2A
015C:  DATA F3,32
015D:  DATA A0,21
015E:  DATA EF,3A
015F:  DATA 6E,3A
0160:  DATA 65,39
0161:  DATA 20,10
0162:  DATA 20,10
0163:  DATA 20,10
0164:  DATA 3A,10
0165:  DATA 30,3C
0166:  DATA 25,18
0167:  DATA 38,26
0168:  DATA D8,06
0169:  DATA 0A,00
016A:  DATA 89,26
016B:  DATA C9,29
016C:  DATA 46,10
016D:  DATA CD,22
016E:  DATA C1,29
016F:  DATA 20,10
0170:  DATA A0,2A
0171:  DATA EE,31
0172:  DATA 6F,38
0173:  DATA F9,32
0174:  DATA 64,10
0175:  DATA C3,37
0176:  DATA 75,37
0177:  DATA F4,32
0178:  DATA 72,10
0179:  DATA 3A,10
017A:  DATA 30,3C
017B:  DATA 25,18
017C:  DATA 38,26
017D:  DATA D8,06
017E:  DATA 0A,00
017F:  DATA 89,26
0180:  DATA C9,29
0181:  DATA 46,10
0182:  DATA CD,22
0183:  DATA C1,29
0184:  DATA 20,10
0185:  DATA 20,26
0186:  DATA EF,37
0187:  DATA 70,10
0188:  DATA C3,37
0189:  DATA 75,37
018A:  DATA F4,32
018B:  DATA 72,10
018C:  DATA 20,10
018D:  DATA 20,10
018E:  DATA 3A,10
018F:  DATA 30,3C
0190:  DATA 25,18
0191:  DATA 32,2C
0192:  DATA 0D,05
0193:  DATA 00,01
0194:  DATA 89,21
0195:  DATA EF,36
0196:  DATA 70,36
0197:  DATA 65,3A
0198:  DATA E5,06
0199:  DATA 0A,00
019A:  DATA CD,34
019B:  DATA F3,39
019C:  DATA E9,37
019D:  DATA 6E,10
019E:  DATA 46,36
019F:  DATA E1,39
01A0:  DATA 68,10
01A1:  DATA E9,39
01A2:  DATA 20,37
01A3:  DATA 6F,3A
01A4:  DATA A0,31
01A5:  DATA 6F,37
01A6:  DATA EE,32
01A7:  DATA 63,3A
01A8:  DATA 65,32
01A9:  DATA 0D,05
01AA:  DATA 00,00
01AB:  DATA 5B,28
01AC:  DATA C9,21
01AD:  DATA CC,27
01AE:  DATA C7,2E
01AF:  DATA 20,1D
01B0:  DATA 20,00
01B1:  DATA CD,34
01B2:  DATA F3,39
01B3:  DATA E9,37
01B4:  DATA 6E,10
01B5:  DATA 46,36
01B6:  DATA E1,39
01B7:  DATA 68,10
01B8:  DATA E9,39
01B9:  DATA 20,37
01BA:  DATA 6F,3A
01BB:  DATA A0,31
01BC:  DATA 6F,37
01BD:  DATA EE,32
01BE:  DATA 63,3A
01BF:  DATA 65,32
01C0:  DATA 0D,05
01C1:  DATA 00,00
01C2:  DATA C9,27
01C3:  DATA A0,24
01C4:  DATA EE,34
01C5:  DATA F4,34
01C6:  DATA 61,36
01C7:  DATA 69,3D
01C8:  DATA E5,06
01C9:  DATA 0A,00
01CA:  DATA 89,21
01CB:  DATA EF,36
01CC:  DATA 70,36
01CD:  DATA 65,3A
01CE:  DATA E5,06
01CF:  DATA 0A,00
01D0:  DATA 41,22
01D1:  DATA 43,10
01D2:  DATA 49,37
01D3:  DATA 69,3A
01D4:  DATA E9,30
01D5:  DATA EC,34
01D6:  DATA FA,32
01D7:  DATA 0D,05
01D8:  DATA 00,01
01D9:  DATA 89,21
01DA:  DATA EF,36
01DB:  DATA 70,36
01DC:  DATA 65,3A
01DD:  DATA E5,06
01DE:  DATA 0A,00
01DF:  DATA 53,3A
01E0:  DATA 61,39
01E1:  DATA 74,10
01E2:  DATA D3,2B
01E3:  DATA C5,22
01E4:  DATA D0,06
01E5:  DATA 0A,00
01E6:  DATA 89,29
01E7:  DATA F7,32
01E8:  DATA 65,38
01E9:  DATA A0,39
01EA:  DATA F4,32
01EB:  DATA 70,10
01EC:  DATA 3A,10
01ED:  DATA A5,3A
01EE:  DATA 0D,05
01EF:  DATA 80,0B
01F0:  DATA 45,27
01F1:  DATA 44,10
01F2:  DATA D3,2B
01F3:  DATA C5,22
01F4:  DATA D0,06
01F5:  DATA 0A,00
01F6:  DATA CC,37
01F7:  DATA E7,33
01F8:  DATA 65,32
01F9:  DATA A0,21
01FA:  DATA C9,23
01FB:  DATA 53,10
01FC:  DATA E4,30
01FD:  DATA F4,30
01FE:  DATA 0D,05
01FF:  DATA 80,00
0200:  DATA D3,26
0201:  DATA 46,10
0202:  DATA E4,30
0203:  DATA F4,30
0204:  DATA 20,36
0205:  DATA E9,39
0206:  DATA 74,10
0207:  DATA E9,39
0208:  DATA 20,33
0209:  DATA 75,36
020A:  DATA EC,10
020B:  DATA A1,10
020C:  DATA 0D,05
020D:  DATA 00,00
020E:  DATA D3,26
020F:  DATA 46,10
0210:  DATA E4,30
0211:  DATA F4,30
0212:  DATA 20,36
0213:  DATA E9,39
0214:  DATA 74,10
0215:  DATA E9,39
0216:  DATA A0,32
0217:  DATA 6D,38
0218:  DATA F4,3C
0219:  DATA 0D,05
021A:  DATA 00,00
021B:  DATA 0D,05
021C:  DATA 53,3A
021D:  DATA 61,39
021E:  DATA 74,10
021F:  DATA ED,30
0220:  DATA EB,32
0221:  DATA 5F,39
0222:  DATA E5,31
0223:  DATA E5,34
0224:  DATA F6,32
0225:  DATA DF,31
0226:  DATA EF,36
0227:  DATA ED,30
0228:  DATA 6E,32
0229:  DATA 0D,05
022A:  DATA 00,01
022B:  DATA 89,2D
022C:  DATA C2,27
022D:  DATA D3,29
022E:  DATA 5D,10
022F:  DATA 3E,1F
0230:  DATA 3E,10
0231:  DATA 00,01
0232:  DATA 45,37
0233:  DATA 64,10
0234:  DATA ED,30
0235:  DATA EB,32
0236:  DATA 5F,39
0237:  DATA E5,31
0238:  DATA 69,3B
0239:  DATA E5,2F
023A:  DATA E3,37
023B:  DATA ED,36
023C:  DATA 61,37
023D:  DATA E4,06
023E:  DATA 8A,06
023F:  DATA 0A,00
0240:  DATA F3,34
0241:  DATA 67,37
0242:  DATA 61,36
0243:  DATA A0,32
0244:  DATA 6E,32
0245:  DATA A0,3B
0246:  DATA 69,3A
0247:  DATA 68,10
0248:  DATA 53,23
0249:  DATA C4,06
024A:  DATA 0A,00
024B:  DATA E4,37
024C:  DATA EE,13
024D:  DATA 74,10
024E:  DATA E6,34
024F:  DATA 6E,32
0250:  DATA A0,29
0251:  DATA 46,22
0252:  DATA 0D,05
0253:  DATA 00,00
0254:  DATA 89,16
0255:  DATA 3E,10
0256:  DATA 49,37
0257:  DATA F6,30
0258:  DATA EC,34
0259:  DATA 64,10
025A:  DATA 46,39
025B:  DATA E1,36
025C:  DATA 65,10
025D:  DATA 49,22
025E:  DATA 20,39
025F:  DATA E5,31
0260:  DATA E5,34
0261:  DATA F6,32
0262:  DATA 64,1D
0263:  DATA A0,12
0264:  DATA D8,06
0265:  DATA 0A,00
0266:  DATA 89,16
0267:  DATA 3E,10
0268:  DATA 43,29
0269:  DATA 43,10
026A:  DATA 65,39
026B:  DATA F2,37
026C:  DATA F2,10
026D:  DATA 0D,05
026E:  DATA 00,01
026F:  DATA 89,04
0270:  DATA 2D,1F
0271:  DATA 20,39
0272:  DATA E5,31
0273:  DATA E5,34
0274:  DATA F6,32
0275:  DATA 64,10
0276:  DATA 43,29
0277:  DATA 43,1D
0278:  DATA A0,12
0279:  DATA D8,06
027A:  DATA 0A,00
027B:  DATA 89,04
027C:  DATA 20,10
027D:  DATA A0,31
027E:  DATA 6F,36
027F:  DATA EC,32
0280:  DATA 63,3A
0281:  DATA A0,21
0282:  DATA D2,21
0283:  DATA 20,1D
0284:  DATA A0,12
0285:  DATA D8,06
0286:  DATA 0A,00
0287:  DATA 89,16
0288:  DATA 3E,10
0289:  DATA 49,37
028A:  DATA F6,30
028B:  DATA EC,34
028C:  DATA 64,10
028D:  DATA E4,32
028E:  DATA F6,34
028F:  DATA E3,32
0290:  DATA A0,24
0291:  DATA 44,10
0292:  DATA F2,32
0293:  DATA E3,32
0294:  DATA 69,3B
0295:  DATA 65,32
0296:  DATA 0D,05
0297:  DATA 00,01
0298:  DATA 89,04
0299:  DATA 2D,1F
029A:  DATA 20,39
029B:  DATA E5,31
029C:  DATA E5,34
029D:  DATA F6,32
029E:  DATA 64,1D
029F:  DATA 20,10
02A0:  DATA 20,10
02A1:  DATA A0,12
02A2:  DATA D8,06
02A3:  DATA 0A,00
02A4:  DATA 89,04
02A5:  DATA 20,10
02A6:  DATA A0,26
02A7:  DATA 79,10
02A8:  DATA E4,32
02A9:  DATA F6,34
02AA:  DATA E3,32
02AB:  DATA A0,24
02AC:  DATA 44,1D
02AD:  DATA A0,12
02AE:  DATA D8,06
02AF:  DATA 0A,00
02B0:  DATA 89,2D
02B1:  DATA C2,27
02B2:  DATA D3,29
02B3:  DATA 5D,10
02B4:  DATA 3C,1E
02B5:  DATA 3C,10
02B6:  DATA 00,01
02B7:  DATA 89,16
02B8:  DATA 3E,10
02B9:  DATA 46,39
02BA:  DATA E1,36
02BB:  DATA 65,10
02BC:  DATA 49,22
02BD:  DATA 3A,10
02BE:  DATA 25,2C
02BF:  DATA 0D,05
02C0:  DATA 00,01
02C1:  DATA 89,16
02C2:  DATA 3E,10
02C3:  DATA C3,37
02C4:  DATA 6E,3A
02C5:  DATA 65,37
02C6:  DATA 74,10
02C7:  DATA F3,34
02C8:  DATA FA,32
02C9:  DATA 3A,10
02CA:  DATA 25,32
02CB:  DATA 0D,05
02CC:  DATA 00,10
02CD:  DATA 53,3A
02CE:  DATA 61,39
02CF:  DATA 74,10
02D0:  DATA D3,26
02D1:  DATA 46,10
02D2:  DATA F5,39
02D3:  DATA 69,37
02D4:  DATA 67,10
02D5:  DATA F2,32
02D6:  DATA F1,32
02D7:  DATA 73,3A
02D8:  DATA A0,39
02D9:  DATA E5,30
02DA:  DATA F1,3A
02DB:  DATA 65,37
02DC:  DATA E3,32
02DD:  DATA 0D,05
02DE:  DATA 00,01
02DF:  DATA 45,39
02E0:  DATA F2,37
02E1:  DATA F2,10
02E2:  DATA 20,29
02E3:  DATA E5,31
02E4:  DATA E5,34
02E5:  DATA F6,34
02E6:  DATA EE,33
02E7:  DATA A0,31
02E8:  DATA EF,36
02E9:  DATA ED,30
02EA:  DATA 6E,32
02EB:  DATA A0,34
02EC:  DATA EE,31
02ED:  DATA 6F,37
02EE:  DATA F3,34
02EF:  DATA 73,3A
02F0:  DATA 65,37
02F1:  DATA 74,10
02F2:  DATA F7,34
02F3:  DATA 74,34
02F4:  DATA 20,3A
02F5:  DATA E8,32
02F6:  DATA 20,32
02F7:  DATA E5,39
02F8:  DATA E9,33
02F9:  DATA EE,06
02FA:  DATA 0A,00
02FB:  DATA D3,26
02FC:  DATA 46,10
02FD:  DATA F5,39
02FE:  DATA 65,10
02FF:  DATA F2,32
0300:  DATA F1,3A
0301:  DATA E5,39
0302:  DATA 74,10
0303:  DATA 61,36
0304:  DATA EC,37
0305:  DATA F7,32
0306:  DATA E4,06
0307:  DATA 0A,00
0308:  DATA D3,26
0309:  DATA 46,10
030A:  DATA F5,39
030B:  DATA 65,10
030C:  DATA F2,32
030D:  DATA F1,3A
030E:  DATA E5,39
030F:  DATA 74,10
0310:  DATA E4,32
0311:  DATA EE,3C
0312:  DATA 65,32
0313:  DATA 0D,05
0314:  DATA 00,01
0315:  DATA D2,32
0316:  DATA 74,39
0317:  DATA 79,10
0318:  DATA F2,32
0319:  DATA F1,3A
031A:  DATA E5,39
031B:  DATA 74,10
031C:  DATA F4,37
031D:  DATA 20,21
031E:  DATA CF,29
031F:  DATA 53,10
0320:  DATA D0,24
0321:  DATA C3,06
0322:  DATA 0A,00
0323:  DATA 45,39
0324:  DATA F2,37
0325:  DATA F2,10
0326:  DATA 20,29
0327:  DATA E5,31
0328:  DATA E5,34
0329:  DATA F6,34
032A:  DATA EE,33
032B:  DATA A0,31
032C:  DATA EF,36
032D:  DATA ED,30
032E:  DATA 6E,32
032F:  DATA A0,34
0330:  DATA EE,31
0331:  DATA 6F,37
0332:  DATA F3,34
0333:  DATA 73,3A
0334:  DATA 65,37
0335:  DATA 74,10
0336:  DATA F7,34
0337:  DATA 74,34
0338:  DATA 20,3A
0339:  DATA E8,32
033A:  DATA 20,32
033B:  DATA E5,39
033C:  DATA E9,33
033D:  DATA EE,06
033E:  DATA 0A,00
033F:  DATA 45,37
0340:  DATA 64,10
0341:  DATA D3,26
0342:  DATA 46,10
0343:  DATA F5,39
0344:  DATA 69,37
0345:  DATA 67,10
0346:  DATA F2,32
0347:  DATA F1,32
0348:  DATA 73,3A
0349:  DATA A0,39
034A:  DATA E5,30
034B:  DATA F1,3A
034C:  DATA 65,37
034D:  DATA E3,32
034E:  DATA 0D,05
034F:  DATA 00,00
0350:  DATA 53,3A
0351:  DATA 61,39
0352:  DATA 74,10
0353:  DATA CD,27
0354:  DATA C4,22
0355:  DATA 20,22
0356:  DATA D5,26
0357:  DATA CD,2C
0358:  DATA 0D,05
0359:  DATA 00,01
035A:  DATA 89,26
035B:  DATA 4F,22
035C:  DATA 45,10
035D:  DATA 20,10
035E:  DATA 20,10
035F:  DATA 3A,10
0360:  DATA 25,18
0361:  DATA 32,2C
0362:  DATA 0D,05
0363:  DATA 00,01
0364:  DATA 09,28
0365:  DATA 61,39
0366:  DATA E1,36
0367:  DATA 31,10
0368:  DATA 20,10
0369:  DATA 3A,10
036A:  DATA 30,3C
036B:  DATA 25,18
036C:  DATA 38,26
036D:  DATA D8,06
036E:  DATA 0A,00
036F:  DATA 09,28
0370:  DATA 61,39
0371:  DATA E1,36
0372:  DATA 32,10
0373:  DATA 20,10
0374:  DATA 3A,10
0375:  DATA 30,3C
0376:  DATA 25,18
0377:  DATA 34,26
0378:  DATA D8,06
0379:  DATA 0A,00
037A:  DATA 45,37
037B:  DATA 64,10
037C:  DATA CD,27
037D:  DATA C4,22
037E:  DATA 20,22
037F:  DATA D5,26
0380:  DATA CD,2C
0381:  DATA 0D,05
0382:  DATA 00,00
0383:  DATA 53,3A
0384:  DATA 61,39
0385:  DATA 74,10
0386:  DATA CD,27
0387:  DATA C4,22
0388:  DATA A0,26
0389:  DATA C5,20
038A:  DATA D3,2A
038B:  DATA D2,22
038C:  DATA 0D,05
038D:  DATA 00,00
038E:  DATA 53,3A
038F:  DATA 61,39
0390:  DATA 74,10
0391:  DATA CD,27
0392:  DATA C4,22
0393:  DATA A0,26
0394:  DATA C5,20
0395:  DATA D3,2A
0396:  DATA D2,22
0397:  DATA 20,2B
0398:  DATA 6F,36
0399:  DATA F4,30
039A:  DATA E7,32
039B:  DATA 0D,05
039C:  DATA 00,00
039D:  DATA 53,3A
039E:  DATA 61,39
039F:  DATA 74,10
03A0:  DATA D3,2B
03A1:  DATA C5,22
03A2:  DATA D0,06
03A3:  DATA 0A,00
03A4:  DATA 89,29
03A5:  DATA F7,32
03A6:  DATA 65,38
03A7:  DATA A0,39
03A8:  DATA F4,32
03A9:  DATA 70,10
03AA:  DATA 3A,10
03AB:  DATA A5,3A
03AC:  DATA 0D,05
03AD:  DATA 00,01
03AE:  DATA 45,27
03AF:  DATA 44,10
03B0:  DATA D3,2B
03B1:  DATA C5,22
03B2:  DATA D0,06
03B3:  DATA 0A,00
03B4:  DATA F4,32
03B5:  DATA 6D,38
03B6:  DATA 5F,3A
03B7:  DATA 6F,38
03B8:  DATA 3A,10
03B9:  DATA 25,2C
03BA:  DATA 0D,05
03BB:  DATA 00,01
03BC:  DATA F4,32
03BD:  DATA 6D,38
03BE:  DATA 5F,31
03BF:  DATA 6F,3A
03C0:  DATA 3A,10
03C1:  DATA 25,2C
03C2:  DATA 0D,05
03C3:  DATA 00,00
03C4:  DATA 70,32
03C5:  DATA 5F,3B
03C6:  DATA 61,36
03C7:  DATA F5,32
03C8:  DATA 3A,10
03C9:  DATA 25,2C
03CA:  DATA 0D,05
03CB:  DATA 00,00
03CC:  DATA E3,34
03CD:  DATA E7,39
03CE:  DATA 5F,3B
03CF:  DATA 61,36
03D0:  DATA F5,32
03D1:  DATA 3A,10
03D2:  DATA 25,2C
03D3:  DATA 0D,05
03D4:  DATA 00,00
03D5:  DATA E3,3A
03D6:  DATA 72,39
03D7:  DATA 65,37
03D8:  DATA F4,2F
03D9:  DATA F6,30
03DA:  DATA EC,3A
03DB:  DATA 65,1D
03DC:  DATA A0,12
03DD:  DATA D8,06
03DE:  DATA 0A,00
03DF:  DATA F6,37
03E0:  DATA 6C,3A
03E1:  DATA E1,33
03E2:  DATA E5,2F
03E3:  DATA F6,30
03E4:  DATA EC,3A
03E5:  DATA 65,1D
03E6:  DATA A0,12
03E7:  DATA D8,06
03E8:  DATA 0A,00
03E9:  DATA 53,3A
03EA:  DATA 61,39
03EB:  DATA 74,10
03EC:  DATA 46,36
03ED:  DATA E1,39
03EE:  DATA 68,10
03EF:  DATA 45,39
03F0:  DATA E1,39
03F1:  DATA 65,10
03F2:  DATA 41,36
03F3:  DATA EC,06
03F4:  DATA 0A,00
03F5:  DATA 45,37
03F6:  DATA 64,10
03F7:  DATA 46,36
03F8:  DATA E1,39
03F9:  DATA 68,10
03FA:  DATA 45,39
03FB:  DATA E1,39
03FC:  DATA 65,10
03FD:  DATA 41,36
03FE:  DATA EC,06
03FF:  DATA 0A,00
0400:  DATA 53,3A
0401:  DATA 61,39
0402:  DATA 74,10
0403:  DATA 46,36
0404:  DATA E1,39
0405:  DATA 68,10
0406:  DATA 45,39
0407:  DATA E1,39
0408:  DATA 65,10
0409:  DATA 31,10
040A:  DATA D3,32
040B:  DATA 63,3A
040C:  DATA 6F,39
040D:  DATA 0D,05
040E:  DATA 00,01
040F:  DATA 89,29
0410:  DATA E5,31
0411:  DATA F4,37
0412:  DATA 72,10
0413:  DATA 41,32
0414:  DATA 64,39
0415:  DATA E5,39
0416:  DATA 73,1D
0417:  DATA 20,18
0418:  DATA F8,12
0419:  DATA 30,1C
041A:  DATA 4C,2C
041B:  DATA 0D,05
041C:  DATA 00,01
041D:  DATA 45,37
041E:  DATA 64,10
041F:  DATA 46,36
0420:  DATA E1,39
0421:  DATA 68,10
0422:  DATA 45,39
0423:  DATA E1,39
0424:  DATA 65,10
0425:  DATA 31,10
0426:  DATA D3,32
0427:  DATA 63,3A
0428:  DATA 6F,39
0429:  DATA 0D,05
042A:  DATA 00,00
042B:  DATA 53,3A
042C:  DATA 61,39
042D:  DATA 74,10
042E:  DATA 46,36
042F:  DATA E1,39
0430:  DATA 68,10
0431:  DATA C3,37
0432:  DATA F0,3C
0433:  DATA A0,18
0434:  DATA A0,29
0435:  DATA E5,31
0436:  DATA F4,37
0437:  DATA F2,06
0438:  DATA 0A,00
0439:  DATA 89,29
043A:  DATA 75,31
043B:  DATA F3,32
043C:  DATA 63,3A
043D:  DATA 6F,39
043E:  DATA A0,20
043F:  DATA 64,32
0440:  DATA F2,32
0441:  DATA F3,39
0442:  DATA 3A,10
0443:  DATA 30,3C
0444:  DATA 25,18
0445:  DATA 38,26
0446:  DATA D8,06
0447:  DATA 0A,00
0448:  DATA 45,37
0449:  DATA 64,10
044A:  DATA 46,36
044B:  DATA E1,39
044C:  DATA 68,10
044D:  DATA C3,37
044E:  DATA F0,3C
044F:  DATA A0,18
0450:  DATA A0,29
0451:  DATA E5,31
0452:  DATA F4,37
0453:  DATA F2,06
0454:  DATA 0A,00
0455:  DATA 53,3A
0456:  DATA 61,39
0457:  DATA 74,10
0458:  DATA 46,36
0459:  DATA E1,39
045A:  DATA 68,10
045B:  DATA 57,39
045C:  DATA 69,3A
045D:  DATA 65,10
045E:  DATA C4,32
045F:  DATA ED,37
0460:  DATA 0D,05
0461:  DATA 00,01
0462:  DATA 89,26
0463:  DATA 4F,22
0464:  DATA 45,10
0465:  DATA 20,10
0466:  DATA 20,10
0467:  DATA 3A,10
0468:  DATA 25,18
0469:  DATA 32,2C
046A:  DATA 0D,05
046B:  DATA 00,01
046C:  DATA 89,20
046D:  DATA 64,32
046E:  DATA F2,32
046F:  DATA F3,39
0470:  DATA 20,10
0471:  DATA 3A,10
0472:  DATA 30,3C
0473:  DATA 25,18
0474:  DATA 38,26
0475:  DATA D8,06
0476:  DATA 0A,00
0477:  DATA 09,28
0478:  DATA E1,31
0479:  DATA EB,32
047A:  DATA 74,27
047B:  DATA F5,36
047C:  DATA 3A,10
047D:  DATA 30,3C
047E:  DATA 25,18
047F:  DATA 34,26
0480:  DATA D8,06
0481:  DATA 0A,00
0482:  DATA 57,39
0483:  DATA 69,3A
0484:  DATA 65,10
0485:  DATA C4,30
0486:  DATA F4,30
0487:  DATA 0D,05
0488:  DATA 00,01
0489:  DATA 45,37
048A:  DATA 64,10
048B:  DATA 46,36
048C:  DATA E1,39
048D:  DATA 68,10
048E:  DATA 57,39
048F:  DATA 69,3A
0490:  DATA 65,10
0491:  DATA C4,32
0492:  DATA ED,37
0493:  DATA 0D,05
0494:  DATA 00,00
0495:  DATA 53,3A
0496:  DATA 61,39
0497:  DATA 74,10
0498:  DATA 46,36
0499:  DATA E1,39
049A:  DATA 68,10
049B:  DATA 57,39
049C:  DATA 69,3A
049D:  DATA 65,10
049E:  DATA B4,35
049F:  DATA C2,3C
04A0:  DATA F4,32
04A1:  DATA A0,29
04A2:  DATA 75,31
04A3:  DATA F3,32
04A4:  DATA 63,3A
04A5:  DATA 6F,39
04A6:  DATA 0D,05
04A7:  DATA 00,01
04A8:  DATA 45,37
04A9:  DATA 64,10
04AA:  DATA 46,36
04AB:  DATA E1,39
04AC:  DATA 68,10
04AD:  DATA 57,39
04AE:  DATA 69,3A
04AF:  DATA 65,10
04B0:  DATA B4,35
04B1:  DATA C2,3C
04B2:  DATA F4,32
04B3:  DATA A0,29
04B4:  DATA 75,31
04B5:  DATA F3,32
04B6:  DATA 63,3A
04B7:  DATA 6F,39
04B8:  DATA 0D,05
04B9:  DATA 00,00
04BA:  DATA 53,3A
04BB:  DATA 61,39
04BC:  DATA 74,10
04BD:  DATA 46,36
04BE:  DATA E1,39
04BF:  DATA 68,10
04C0:  DATA D2,32
04C1:  DATA 61,32
04C2:  DATA 0D,05
04C3:  DATA 00,01
04C4:  DATA 89,26
04C5:  DATA 4F,22
04C6:  DATA 45,10
04C7:  DATA 20,10
04C8:  DATA 20,10
04C9:  DATA 3A,10
04CA:  DATA 25,18
04CB:  DATA 32,2C
04CC:  DATA 0D,05
04CD:  DATA 00,01
04CE:  DATA 89,20
04CF:  DATA 64,32
04D0:  DATA F2,32
04D1:  DATA F3,39
04D2:  DATA 20,10
04D3:  DATA 3A,10
04D4:  DATA 30,3C
04D5:  DATA 25,18
04D6:  DATA 38,26
04D7:  DATA D8,06
04D8:  DATA 0A,00
04D9:  DATA 09,28
04DA:  DATA E1,31
04DB:  DATA EB,32
04DC:  DATA 74,27
04DD:  DATA F5,36
04DE:  DATA 3A,10
04DF:  DATA 30,3C
04E0:  DATA 25,18
04E1:  DATA 34,26
04E2:  DATA D8,06
04E3:  DATA 0A,00
04E4:  DATA D2,22
04E5:  DATA 41,22
04E6:  DATA 20,22
04E7:  DATA 41,2A
04E8:  DATA C1,06
04E9:  DATA 0A,00
04EA:  DATA CD,34
04EB:  DATA F3,39
04EC:  DATA E9,37
04ED:  DATA 6E,10
04EE:  DATA 46,36
04EF:  DATA E1,39
04F0:  DATA 68,10
04F1:  DATA E9,39
04F2:  DATA 20,37
04F3:  DATA 6F,3A
04F4:  DATA A0,31
04F5:  DATA 6F,37
04F6:  DATA EE,32
04F7:  DATA 63,3A
04F8:  DATA 65,32
04F9:  DATA 0D,05
04FA:  DATA 00,01
04FB:  DATA 45,37
04FC:  DATA 64,10
04FD:  DATA 46,36
04FE:  DATA E1,39
04FF:  DATA 68,10
0500:  DATA D2,32
0501:  DATA 61,32
0502:  DATA 0D,05
0503:  DATA 00,00
0504:  DATA 53,3A
0505:  DATA 61,39
0506:  DATA 74,10
0507:  DATA 46,36
0508:  DATA E1,39
0509:  DATA 68,10
050A:  DATA D2,32
050B:  DATA 61,32
050C:  DATA A0,20
050D:  DATA 64,32
050E:  DATA F2,32
050F:  DATA F3,39
0510:  DATA 0D,05
0511:  DATA 00,01
0512:  DATA D2,32
0513:  DATA 61,32
0514:  DATA 20,22
0515:  DATA 61,3A
0516:  DATA 61,1D
0517:  DATA A0,12
0518:  DATA 30,19
0519:  DATA 58,10
051A:  DATA 25,18
051B:  DATA 32,2C
051C:  DATA A0,12
051D:  DATA 30,19
051E:  DATA 58,10
051F:  DATA 25,18
0520:  DATA 32,2C
0521:  DATA 0D,05
0522:  DATA 00,01
0523:  DATA 45,37
0524:  DATA 64,10
0525:  DATA 46,36
0526:  DATA E1,39
0527:  DATA 68,10
0528:  DATA D2,32
0529:  DATA 61,32
052A:  DATA A0,20
052B:  DATA 64,32
052C:  DATA F2,32
052D:  DATA F3,39
052E:  DATA 0D,05
052F:  DATA 00,00
0530:  DATA 53,3A
0531:  DATA 61,39
0532:  DATA 74,10
0533:  DATA 46,36
0534:  DATA E1,39
0535:  DATA 68,10
0536:  DATA D3,26
0537:  DATA 46,10
0538:  DATA C3,37
0539:  DATA F0,3C
053A:  DATA 0D,05
053B:  DATA 00,01
053C:  DATA 45,37
053D:  DATA 64,10
053E:  DATA 46,36
053F:  DATA E1,39
0540:  DATA 68,10
0541:  DATA D3,26
0542:  DATA 46,10
0543:  DATA C3,37
0544:  DATA F0,3C
0545:  DATA 0D,05
0546:  DATA 00,00
0547:  DATA 53,3A
0548:  DATA 61,39
0549:  DATA 74,10
054A:  DATA 46,36
054B:  DATA E1,39
054C:  DATA 68,10
054D:  DATA D3,26
054E:  DATA 46,10
054F:  DATA D2,32
0550:  DATA 61,32
0551:  DATA 0D,05
0552:  DATA 00,01
0553:  DATA D2,32
0554:  DATA 61,32
0555:  DATA 20,22
0556:  DATA 61,3A
0557:  DATA 61,1D
0558:  DATA 20,00
0559:  DATA 0D,05
055A:  DATA 45,37
055B:  DATA 64,10
055C:  DATA 46,36
055D:  DATA E1,39
055E:  DATA 68,10
055F:  DATA D3,26
0560:  DATA 46,10
0561:  DATA D2,32
0562:  DATA 61,32
0563:  DATA 0D,05
0564:  DATA 00,00
0565:  DATA 53,3A
0566:  DATA 61,39
0567:  DATA 74,10
0568:  DATA 46,36
0569:  DATA E1,39
056A:  DATA 68,10
056B:  DATA D3,26
056C:  DATA 46,10
056D:  DATA 57,39
056E:  DATA 69,3A
056F:  DATA E5,06
0570:  DATA 0A,00
0571:  DATA 45,37
0572:  DATA 64,10
0573:  DATA 46,36
0574:  DATA E1,39
0575:  DATA 68,10
0576:  DATA D3,26
0577:  DATA 46,10
0578:  DATA 57,39
0579:  DATA 69,3A
057A:  DATA E5,06
057B:  DATA 0A,00
057C:  DATA 53,3A
057D:  DATA 61,39
057E:  DATA 74,10
057F:  DATA 46,36
0580:  DATA E1,39
0581:  DATA 68,10
0582:  DATA 41,32
0583:  DATA 64,39
0584:  DATA E5,39
0585:  DATA 73,10
0586:  DATA D2,32
0587:  DATA F3,32
0588:  DATA F4,06
0589:  DATA 0A,00
058A:  DATA 45,37
058B:  DATA 64,10
058C:  DATA 46,36
058D:  DATA E1,39
058E:  DATA 68,10
058F:  DATA 41,32
0590:  DATA 64,39
0591:  DATA E5,39
0592:  DATA 73,10
0593:  DATA D2,32
0594:  DATA F3,32
0595:  DATA F4,06
0596:  DATA 0A,00
0597:  DATA 0D,05
0598:  DATA DF,2F
0599:  DATA DF,2F
059A:  DATA DF,2F
059B:  DATA DF,2F
059C:  DATA DF,2F
059D:  DATA DF,2F
059E:  DATA DF,2F
059F:  DATA DF,2F
05A0:  DATA DF,2F
05A1:  DATA DF,2F
05A2:  DATA 0D,05
05A3:  DATA 00,01
05A4:  DATA DF,2F
05A5:  DATA DF,29
05A6:  DATA F4,30
05A7:  DATA 72,3A
05A8:  DATA A0,31
05A9:  DATA 6F,38
05AA:  DATA F9,2F
05AB:  DATA E4,30
05AC:  DATA F4,30
05AD:  DATA DF,2F
05AE:  DATA 0D,05
05AF:  DATA 00,01
05B0:  DATA 53,3A
05B1:  DATA 61,39
05B2:  DATA 74,10
05B3:  DATA DB,12
05B4:  DATA 64,10
05B5:  DATA 74,34
05B6:  DATA 5D,10
05B7:  DATA E4,30
05B8:  DATA F4,30
05B9:  DATA A0,31
05BA:  DATA 6F,38
05BB:  DATA F9,06
05BC:  DATA 8A,06
05BD:  DATA 0A,00
05BE:  DATA 0D,05
05BF:  DATA DF,2F
05C0:  DATA DF,22
05C1:  DATA 6E,32
05C2:  DATA A0,31
05C3:  DATA 6F,38
05C4:  DATA F9,2F
05C5:  DATA E4,30
05C6:  DATA F4,30
05C7:  DATA DF,2F
05C8:  DATA DF,2F
05C9:  DATA 0D,05
05CA:  DATA 00,01
05CB:  DATA DF,2F
05CC:  DATA DF,2F
05CD:  DATA DF,2F
05CE:  DATA DF,2F
05CF:  DATA DF,2F
05D0:  DATA DF,2F
05D1:  DATA DF,2F
05D2:  DATA DF,2F
05D3:  DATA DF,2F
05D4:  DATA DF,2F
05D5:  DATA 0D,05
05D6:  DATA 0D,05
05D7:  DATA 00,00
05D8:  DATA 49,37
05D9:  DATA A0,39
05DA:  DATA 6D,33
05DB:  DATA A0,36
05DC:  DATA E9,39
05DD:  DATA F3,34
05DE:  DATA 6F,37
05DF:  DATA 20,32
05E0:  DATA 61,3A
05E1:  DATA 61,10
05E2:  DATA 73,3A
05E3:  DATA 61,39
05E4:  DATA 74,10
05E5:  DATA 20,10
05E6:  DATA 61,32
05E7:  DATA 64,39
05E8:  DATA E5,39
05E9:  DATA 73,1D
05EA:  DATA A0,12
05EB:  DATA 4C,2C
05EC:  DATA 0D,05
05ED:  DATA 00,01
05EE:  DATA 49,37
05EF:  DATA A0,39
05F0:  DATA 6D,33
05F1:  DATA A0,36
05F2:  DATA E9,39
05F3:  DATA F3,34
05F4:  DATA 6F,37
05F5:  DATA 20,32
05F6:  DATA 61,3A
05F7:  DATA 61,10
05F8:  DATA 65,37
05F9:  DATA 64,10
05FA:  DATA 20,10
05FB:  DATA 20,10
05FC:  DATA 61,32
05FD:  DATA 64,39
05FE:  DATA E5,39
05FF:  DATA 73,1D
0600:  DATA A0,12
0601:  DATA 4C,2C
0602:  DATA 0D,05
0603:  DATA 00,01
0604:  DATA 49,37
0605:  DATA A0,26
0606:  DATA C9,29
0607:  DATA 20,23
0608:  DATA 4D,10
0609:  DATA 57,39
060A:  DATA 69,3A
060B:  DATA 65,10
060C:  DATA F3,37
060D:  DATA 75,39
060E:  DATA E3,32
060F:  DATA 20,32
0610:  DATA 61,3A
0611:  DATA 61,10
0612:  DATA 61,32
0613:  DATA 64,39
0614:  DATA E5,39
0615:  DATA 73,1D
0616:  DATA A0,12
0617:  DATA 4C,2C
0618:  DATA 0D,05
0619:  DATA 00,01
061A:  DATA 49,37
061B:  DATA A0,26
061C:  DATA C9,29
061D:  DATA 20,23
061E:  DATA 4D,10
061F:  DATA 57,39
0620:  DATA 69,3A
0621:  DATA 65,10
0622:  DATA E4,30
0623:  DATA F4,30
0624:  DATA A0,39
0625:  DATA 69,3D
0626:  DATA 65,10
0627:  DATA 20,10
0628:  DATA 20,10
0629:  DATA 20,10
062A:  DATA 20,10
062B:  DATA 20,1D
062C:  DATA A0,12
062D:  DATA EC,3A
062E:  DATA 0D,05
062F:  DATA 0D,05
0630:  DATA 00,02
0631:  DATA D3,34
0632:  DATA FA,32
0633:  DATA A0,30
0634:  DATA F2,32
0635:  DATA 61,10
0636:  DATA F2,32
0637:  DATA 61,32
0638:  DATA 0D,05
0639:  DATA 00,01
063A:  DATA F5,39
063B:  DATA 65,32
063C:  DATA DF,39
063D:  DATA 69,3D
063E:  DATA 65,10
063F:  DATA 3D,10
0640:  DATA 25,36
0641:  DATA 75,10
0642:  DATA A8,39
0643:  DATA F2,31
0644:  DATA 20,18
0645:  DATA F8,12
0646:  DATA 30,1C
0647:  DATA 4C,2C
0648:  DATA A9,06
0649:  DATA 0A,00
064A:  DATA EC,37
064B:  DATA 6F,38
064C:  DATA A0,31
064D:  DATA EF,3A
064E:  DATA 6E,3A
064F:  DATA 3D,10
0650:  DATA 25,32
0651:  DATA 20,10
0652:  DATA A8,39
0653:  DATA F2,31
0654:  DATA 20,18
0655:  DATA F8,12
0656:  DATA 30,1C
0657:  DATA 4C,2C
0658:  DATA A9,06
0659:  DATA 8A,06
065A:  DATA 0A,00
065B:  DATA 57,39
065C:  DATA 61,38
065D:  DATA 20,3A
065E:  DATA F2,34
065F:  DATA E7,33
0660:  DATA 65,39
0661:  DATA 65,32
0662:  DATA 3A,10
0663:  DATA D2,32
0664:  DATA F3,32
0665:  DATA 74,3A
0666:  DATA 69,37
0667:  DATA 67,10
0668:  DATA E4,30
0669:  DATA F4,30
066A:  DATA DF,3B
066B:  DATA F2,34
066C:  DATA F4,32
066D:  DATA DF,30
066E:  DATA 64,32
066F:  DATA 72,10
0670:  DATA F4,37
0671:  DATA A0,39
0672:  DATA F4,30
0673:  DATA 72,3A
0674:  DATA 0D,05
0675:  DATA 00,00
0676:  DATA 55,38
0677:  DATA E4,30
0678:  DATA F4,32
0679:  DATA A0,39
067A:  DATA 69,3D
067B:  DATA 65,10
067C:  DATA 61,39
067D:  DATA E5,30
067E:  DATA 0D,05
067F:  DATA 00,01
0680:  DATA F5,39
0681:  DATA 65,32
0682:  DATA DF,39
0683:  DATA 69,3D
0684:  DATA 65,10
0685:  DATA 3D,10
0686:  DATA 25,36
0687:  DATA E4,06
0688:  DATA 0A,00
0689:  DATA EC,37
068A:  DATA 6F,38
068B:  DATA DF,31
068C:  DATA EF,3A
068D:  DATA 6E,3A
068E:  DATA A0,1E
068F:  DATA A0,12
0690:  DATA F5,06
0691:  DATA 8A,06
0692:  DATA 0A,00
0693:  DATA 0D,05
0694:  DATA DF,2F
0695:  DATA DF,2F
0696:  DATA DF,2F
0697:  DATA DF,2F
0698:  DATA DF,2F
0699:  DATA DF,2F
069A:  DATA DF,2F
069B:  DATA DF,2F
069C:  DATA DF,2F
069D:  DATA DF,2F
069E:  DATA DF,2F
069F:  DATA DF,2F
06A0:  DATA DF,2F
06A1:  DATA DF,2F
06A2:  DATA DF,2F
06A3:  DATA 0D,05
06A4:  DATA DF,2F
06A5:  DATA DF,2F
06A6:  DATA DF,29
06A7:  DATA F4,30
06A8:  DATA 72,3A
06A9:  DATA A0,32
06AA:  DATA F8,32
06AB:  DATA E3,3A
06AC:  DATA F4,32
06AD:  DATA DF,36
06AE:  DATA E9,39
06AF:  DATA F3,34
06B0:  DATA 6F,37
06B1:  DATA DF,2F
06B2:  DATA DF,2F
06B3:  DATA DF,06
06B4:  DATA 8A,06
06B5:  DATA 0A,00
06B6:  DATA C3,37
06B7:  DATA ED,36
06B8:  DATA 61,37
06B9:  DATA 64,10
06BA:  DATA 49,22
06BB:  DATA 3A,10
06BC:  DATA 25,2C
06BD:  DATA 0D,05
06BE:  DATA 0D,05
06BF:  DATA 00,01
06C0:  DATA 89,04
06C1:  DATA 2D,1F
06C2:  DATA A0,24
06C3:  DATA 6E,3B
06C4:  DATA 61,36
06C5:  DATA 69,32
06C6:  DATA A0,21
06C7:  DATA 4D,22
06C8:  DATA A0,24
06C9:  DATA C4,10
06CA:  DATA 0D,05
06CB:  DATA 00,01
06CC:  DATA 0D,05
06CD:  DATA DF,2F
06CE:  DATA DF,2F
06CF:  DATA DF,2F
06D0:  DATA 45,37
06D1:  DATA 64,10
06D2:  DATA 65,3C
06D3:  DATA E5,31
06D4:  DATA 75,3A
06D5:  DATA E5,2F
06D6:  DATA ED,34
06D7:  DATA F3,39
06D8:  DATA E9,37
06D9:  DATA EE,2F
06DA:  DATA DF,2F
06DB:  DATA DF,2F
06DC:  DATA DF,06
06DD:  DATA 8A,2F
06DE:  DATA DF,2F
06DF:  DATA DF,2F
06E0:  DATA DF,2F
06E1:  DATA DF,2F
06E2:  DATA DF,2F
06E3:  DATA DF,2F
06E4:  DATA DF,2F
06E5:  DATA DF,2F
06E6:  DATA DF,2F
06E7:  DATA DF,2F
06E8:  DATA DF,2F
06E9:  DATA DF,2F
06EA:  DATA DF,2F
06EB:  DATA DF,2F
06EC:  DATA DF,2F
06ED:  DATA 0D,05
06EE:  DATA 00,00
06EF:  DATA 53,3A
06F0:  DATA 61,39
06F1:  DATA 74,10
06F2:  DATA 65,3C
06F3:  DATA E5,31
06F4:  DATA 75,3A
06F5:  DATA E5,2F
06F6:  DATA E3,37
06F7:  DATA ED,36
06F8:  DATA 61,37
06F9:  DATA E4,06
06FA:  DATA 0A,00
06FB:  DATA 89,16
06FC:  DATA 3E,10
06FD:  DATA 55,38
06FE:  DATA EC,34
06FF:  DATA EE,35
0700:  DATA A0,31
0701:  DATA EF,36
0702:  DATA ED,30
0703:  DATA 6E,32
0704:  DATA 0D,05
0705:  DATA 00,01
0706:  DATA 09,10
0707:  DATA 20,10
0708:  DATA 54,39
0709:  DATA 61,37
070A:  DATA F3,36
070B:  DATA 69,3A
070C:  DATA A0,20
070D:  DATA E3,35
070E:  DATA EE,37
070F:  DATA EC,32
0710:  DATA 67,32
0711:  DATA E5,06
0712:  DATA 0A,00
0713:  DATA 89,16
0714:  DATA 3E,10
0715:  DATA 53,3A
0716:  DATA 61,3A
0717:  DATA F5,39
0718:  DATA A0,31
0719:  DATA E8,32
071A:  DATA E3,35
071B:  DATA 0D,05
071C:  DATA 00,01
071D:  DATA 09,10
071E:  DATA 20,10
071F:  DATA 54,39
0720:  DATA 61,37
0721:  DATA F3,36
0722:  DATA 69,3A
0723:  DATA A0,26
0724:  DATA C9,29
0725:  DATA A0,26
0726:  DATA C3,2A
0727:  DATA A0,29
0728:  DATA F4,30
0729:  DATA F4,3A
072A:  DATA F3,06
072B:  DATA 0A,00
072C:  DATA E6,34
072D:  DATA EE,34
072E:  DATA 73,34
072F:  DATA 65,32
0730:  DATA A0,34
0731:  DATA 6E,10
0732:  DATA 73,3A
0733:  DATA 61,3A
0734:  DATA F5,39
0735:  DATA DF,31
0736:  DATA E8,32
0737:  DATA E3,35
0738:  DATA 0D,05
0739:  DATA 00,00
073A:  DATA 89,16
073B:  DATA 3E,10
073C:  DATA D3,26
073D:  DATA 46,10
073E:  DATA 61,3B
073F:  DATA E1,34
0740:  DATA EC,30
0741:  DATA 62,36
0742:  DATA 65,10
0743:  DATA 63,34
0744:  DATA E5,31
0745:  DATA EB,06
0746:  DATA 0A,00
0747:  DATA 09,10
0748:  DATA 20,10
0749:  DATA 54,39
074A:  DATA 61,37
074B:  DATA F3,36
074C:  DATA 69,3A
074D:  DATA A0,20
074E:  DATA E3,35
074F:  DATA EE,37
0750:  DATA EC,32
0751:  DATA 67,32
0752:  DATA E5,06
0753:  DATA 0A,00
0754:  DATA 89,04
0755:  DATA 2D,1F
0756:  DATA A0,30
0757:  DATA 6C,36
0758:  DATA EF,3B
0759:  DATA E4,06
075A:  DATA 0A,00
075B:  DATA 89,04
075C:  DATA 2D,1F
075D:  DATA 20,32
075E:  DATA 65,37
075F:  DATA F9,32
0760:  DATA E4,06
0761:  DATA 0A,00
0762:  DATA 0D,05
0763:  DATA 0D,05
0764:  DATA 0D,05
0765:  DATA BD,1E
0766:  DATA BD,1E
0767:  DATA BD,1E
0768:  DATA BD,1E
0769:  DATA BD,1E
076A:  DATA BD,1E
076B:  DATA BD,1E
076C:  DATA BD,1E
076D:  DATA BD,1E
076E:  DATA BD,1E
076F:  DATA BD,1E
0770:  DATA BD,1E
0771:  DATA BD,1E
0772:  DATA BD,1E
0773:  DATA BD,1E
0774:  DATA BD,1E
0775:  DATA BD,1E
0776:  DATA BD,1E
0777:  DATA BD,1E
0778:  DATA BD,1E
0779:  DATA BD,1E
077A:  DATA BD,1E
077B:  DATA BD,1E
077C:  DATA BD,1E
077D:  DATA BD,1E
077E:  DATA BD,1E
077F:  DATA BD,1E
0780:  DATA BD,1E
0781:  DATA BD,1E
0782:  DATA BD,1E
0783:  DATA 0D,05
0784:  DATA 00,01
0785:  DATA 54,34
0786:  DATA E9,39
0787:  DATA A0,34
0788:  DATA 73,10
0789:  DATA CD,27
078A:  DATA CD,24
078B:  DATA CA,24
078C:  DATA A0,21
078D:  DATA C9,23
078E:  DATA 53,10
078F:  DATA D0,24
0790:  DATA 43,10
0791:  DATA 42,21
0792:  DATA 4D,10
0793:  DATA E6,37
0794:  DATA 72,10
0795:  DATA CD,24
0796:  DATA D3,1B
0797:  DATA 5F,21
0798:  DATA C2,26
0799:  DATA 31,17
079A:  DATA 0D,05
079B:  DATA 00,01
079C:  DATA CC,30
079D:  DATA 73,3A
079E:  DATA A0,3A
079F:  DATA 70,32
07A0:  DATA 61,3A
07A1:  DATA 65,32
07A2:  DATA A0,37
07A3:  DATA 6E,10
07A4:  DATA 32,18
07A5:  DATA B2,1A
07A6:  DATA 2F,18
07A7:  DATA B6,17
07A8:  DATA B1,1A
07A9:  DATA 2C,10
07AA:  DATA E2,3C
07AB:  DATA A0,24
07AC:  DATA EE,37
07AD:  DATA F5,32
07AE:  DATA AE,06
07AF:  DATA 8A,06
07B0:  DATA 0A,00
07B1:  DATA DF,2F
07B2:  DATA DF,2F
07B3:  DATA C3,24
07B4:  DATA C7,29
07B5:  DATA 20,28
07B6:  DATA C9,21
07B7:  DATA A0,29
07B8:  DATA F4,30
07B9:  DATA 72,3A
07BA:  DATA A0,27
07BB:  DATA F0,32
07BC:  DATA F2,30
07BD:  DATA F4,34
07BE:  DATA 6F,37
07BF:  DATA DF,2F
07C0:  DATA DF,2F
07C1:  DATA DF,06
07C2:  DATA 8A,06
07C3:  DATA 0A,00
07C4:  DATA F7,30
07C5:  DATA 69,3A
07C6:  DATA 69,37
07C7:  DATA 67,10
07C8:  DATA E6,37
07C9:  DATA 72,10
07CA:  DATA C2,27
07CB:  DATA D3,29
07CC:  DATA 20,28
07CD:  DATA C9,21
07CE:  DATA A0,31
07CF:  DATA EF,36
07D0:  DATA ED,30
07D1:  DATA 6E,32
07D2:  DATA 00,01
07D3:  DATA 0D,05
07D4:  DATA F7,30
07D5:  DATA 69,3A
07D6:  DATA 69,37
07D7:  DATA 67,10
07D8:  DATA E6,37
07D9:  DATA 72,10
07DA:  DATA C2,27
07DB:  DATA D3,29
07DC:  DATA 20,28
07DD:  DATA C9,21
07DE:  DATA A0,31
07DF:  DATA EF,36
07E0:  DATA ED,30
07E1:  DATA 6E,32
07E2:  DATA 00,01
07E3:  DATA 45,37
07E4:  DATA 64,10
07E5:  DATA ED,30
07E6:  DATA 69,37
07E7:  DATA 0D,05
07E8:  DATA 00,00
*
0800:  DATA 0D,05
0801:  DATA 0D,05
0802:  DATA BD,1E
0803:  DATA BD,1E
0804:  DATA BD,1E
0805:  DATA 0D,05
0806:  DATA 0D,05
0807:  DATA C6,34
0808:  DATA EE,34
0809:  DATA 73,34
080A:  DATA 65,32
080B:  DATA 20,38
080C:  DATA F2,37
080D:  DATA E3,32
080E:  DATA F3,39
080F:  DATA AE,06
0810:  DATA 8A,2B
0811:  DATA E1,34
0812:  DATA 74,10
0813:  DATA E6,37
0814:  DATA 72,10
0815:  DATA C2,27
0816:  DATA D3,29
0817:  DATA 20,28
0818:  DATA C9,21
0819:  DATA 20,3A
081A:  DATA 75,39
081B:  DATA 6E,10
081C:  DATA 6F,33
081D:  DATA 66,10
081E:  DATA ED,32
081F:  DATA 00,01
*
0845:  MOVF   0B,W
0846:  BCF    0B.7
0847:  MOVLB  03
0848:  BSF    15.7
0849:  BSF    15.0
084A:  NOP
084B:  NOP
084C:  BTFSC  09.7
084D:  BSF    0B.7
084E:  MOVF   13,W
084F:  ANDLW  7F
0850:  BTFSC  03.2
0851:  GOTO   091
0852:  MOVLB  13
0853:  MOVWF  28
0854:  MOVLB  03
0855:  MOVF   11,W
0856:  MOVLB  13
0857:  MOVWF  29
0858:  MOVLB  03
0859:  MOVF   12,W
085A:  MOVLB  13
085B:  MOVWF  2A
085C:  MOVF   28,W
085D:  MOVWF  2B
085E:  MOVLB  00
085F:  CALL   020
0860:  MOVLB  13
0861:  MOVF   29,W
0862:  MOVLB  03
0863:  MOVWF  11
0864:  MOVLB  13
0865:  MOVF   2A,W
0866:  MOVLB  03
0867:  MOVWF  12
0868:  MOVF   0B,W
0869:  BCF    0B.7
086A:  BSF    15.7
086B:  BSF    15.0
086C:  NOP
086D:  NOP
086E:  BTFSC  09.7
086F:  BSF    0B.7
0870:  RLF    13,W
0871:  RLF    14,W
0872:  ANDLW  7F
0873:  BTFSC  03.2
0874:  GOTO   091
0875:  MOVLB  13
0876:  MOVWF  28
0877:  MOVLB  03
0878:  MOVF   11,W
0879:  MOVLB  13
087A:  MOVWF  29
087B:  MOVLB  03
087C:  MOVF   12,W
087D:  MOVLB  13
087E:  MOVWF  2A
087F:  MOVF   28,W
0880:  MOVWF  2B
0881:  MOVLB  00
0882:  CALL   020
0883:  MOVLB  13
0884:  MOVF   29,W
0885:  MOVLB  03
0886:  MOVWF  11
0887:  MOVLB  13
0888:  MOVF   2A,W
0889:  MOVLB  03
088A:  MOVWF  12
088B:  INCF   11,F
088C:  BTFSC  03.2
088D:  INCF   12,F
088E:  MOVLB  00
088F:  GOTO   045
0890:  MOVLB  03
0891:  MOVLB  00
0892:  RETURN
*
0904:  MOVLB  13
0905:  MOVF   49,W
0906:  ANDLW  07
0907:  MOVWF  77
0908:  RRF    49,W
0909:  MOVWF  78
090A:  RRF    78,F
090B:  RRF    78,F
090C:  MOVLW  1F
090D:  ANDWF  78,F
090E:  MOVF   78,W
090F:  ADDWF  4B,W
0910:  MOVWF  04
0911:  MOVLW  00
0912:  ADDWFC 4C,W
0913:  MOVWF  05
0914:  CLRF   78
0915:  INCF   78,F
0916:  INCF   77,F
0917:  GOTO   119
0918:  RLF    78,F
0919:  DECFSZ 77,F
091A:  GOTO   118
091B:  MOVF   4A,F
091C:  BTFSC  03.2
091D:  GOTO   121
091E:  MOVF   78,W
091F:  IORWF  00,F
0920:  GOTO   124
0921:  COMF   78,F
0922:  MOVF   78,W
0923:  ANDWF  00,F
0924:  MOVLB  00
0925:  RETURN
*
0B27:  MOVF   0B,W
0B28:  BCF    0B.7
0B29:  MOVLB  03
0B2A:  BSF    15.7
0B2B:  BSF    15.0
0B2C:  NOP
0B2D:  NOP
0B2E:  BTFSC  09.7
0B2F:  BSF    0B.7
0B30:  BTFSC  03.0
0B31:  GOTO   35B
0B32:  MOVF   13,W
0B33:  ANDLW  7F
0B34:  MOVLB  11
0B35:  MOVWF  52
0B36:  MOVLB  03
0B37:  MOVF   11,W
0B38:  MOVLB  11
0B39:  MOVWF  53
0B3A:  MOVLB  03
0B3B:  MOVF   12,W
0B3C:  MOVLB  11
0B3D:  MOVWF  54
0B3E:  MOVF   52,W
0B3F:  MOVLB  13
0B40:  MOVWF  2B
0B41:  MOVLB  00
0B42:  CALL   020
0B43:  MOVLB  11
0B44:  MOVF   53,W
0B45:  MOVLB  03
0B46:  MOVWF  11
0B47:  MOVLB  11
0B48:  MOVF   54,W
0B49:  MOVLB  03
0B4A:  MOVWF  12
0B4B:  MOVF   0B,W
0B4C:  BCF    0B.7
0B4D:  BSF    15.7
0B4E:  BSF    15.0
0B4F:  NOP
0B50:  NOP
0B51:  BTFSC  09.7
0B52:  BSF    0B.7
0B53:  MOVLB  11
0B54:  DECFSZ 51,F
0B55:  GOTO   357
0B56:  GOTO   359
0B57:  MOVLB  03
0B58:  GOTO   35B
0B59:  GOTO   37F
0B5A:  MOVLB  03
0B5B:  RLF    13,W
0B5C:  RLF    14,W
0B5D:  ANDLW  7F
0B5E:  MOVLB  11
0B5F:  MOVWF  52
0B60:  MOVLB  03
0B61:  MOVF   11,W
0B62:  MOVLB  11
0B63:  MOVWF  53
0B64:  MOVLB  03
0B65:  MOVF   12,W
0B66:  MOVLB  11
0B67:  MOVWF  54
0B68:  MOVF   52,W
0B69:  MOVLB  13
0B6A:  MOVWF  2B
0B6B:  MOVLB  00
0B6C:  CALL   020
0B6D:  MOVLB  11
0B6E:  MOVF   53,W
0B6F:  MOVLB  03
0B70:  MOVWF  11
0B71:  MOVLB  11
0B72:  MOVF   54,W
0B73:  MOVLB  03
0B74:  MOVWF  12
0B75:  INCF   11,F
0B76:  BTFSC  03.2
0B77:  INCF   12,F
0B78:  BCF    03.0
0B79:  MOVLB  11
0B7A:  DECFSZ 51,F
0B7B:  GOTO   37D
0B7C:  GOTO   37F
0B7D:  MOVLB  00
0B7E:  GOTO   327
0B7F:  MOVLB  00
0B80:  RETURN
0B81:  MOVLB  11
0B82:  BTFSC  52.7
0B83:  GOTO   397
0B84:  MOVLW  0F
0B85:  MOVWF  77
0B86:  SWAPF  51,W
0B87:  ANDWF  77,F
0B88:  MOVLW  0A
0B89:  SUBWF  77,W
0B8A:  BTFSC  03.0
0B8B:  GOTO   38F
0B8C:  MOVLW  30
0B8D:  ADDWF  77,F
0B8E:  GOTO   391
0B8F:  MOVF   52,W
0B90:  ADDWF  77,F
0B91:  MOVF   77,W
0B92:  MOVLB  13
0B93:  MOVWF  2B
0B94:  MOVLB  00
0B95:  CALL   020
0B96:  MOVLB  11
0B97:  MOVLW  0F
0B98:  ANDWF  51,F
0B99:  MOVLW  0A
0B9A:  SUBWF  51,W
0B9B:  BTFSC  03.0
0B9C:  GOTO   39F
0B9D:  MOVLW  30
0B9E:  GOTO   3A1
0B9F:  BCF    52.7
0BA0:  MOVF   52,W
0BA1:  ADDWF  51,F
0BA2:  MOVF   51,W
0BA3:  MOVLB  13
0BA4:  MOVWF  2B
0BA5:  MOVLB  00
0BA6:  CALL   020
0BA7:  RETURN
*
0FA4:  MOVF   78,W
0FA5:  BTFSC  03.2
0FA6:  GOTO   7AB
0FA7:  MOVF   77,W
0FA8:  MOVWI  W,[FSR0++]
0FA9:  DECFSZ 78,F
0FAA:  GOTO   7A7
*
0FD1:  MOVLB  11
0FD2:  MOVF   55,W
0FD3:  CLRF   78
0FD4:  SUBWF  54,W
0FD5:  BTFSC  03.0
0FD6:  GOTO   7DA
0FD7:  MOVF   54,W
0FD8:  MOVWF  77
0FD9:  GOTO   7E6
0FDA:  CLRF   77
0FDB:  MOVLW  08
0FDC:  MOVWF  56
0FDD:  RLF    54,F
0FDE:  RLF    77,F
0FDF:  MOVF   55,W
0FE0:  SUBWF  77,W
0FE1:  BTFSC  03.0
0FE2:  MOVWF  77
0FE3:  RLF    78,F
0FE4:  DECFSZ 56,F
0FE5:  GOTO   7DD
0FE6:  MOVLB  00
0FE7:  RETURN
*
1FC3:  CLRF   77
1FC4:  CLRF   78
1FC5:  MOVLB  11
1FC6:  MOVF   2D,W
1FC7:  BCF    03.0
1FC8:  BTFSC  2E.0
1FC9:  ADDWF  77,F
1FCA:  RRF    77,F
1FCB:  RRF    78,F
1FCC:  BTFSC  2E.1
1FCD:  ADDWF  77,F
1FCE:  RRF    77,F
1FCF:  RRF    78,F
1FD0:  BTFSC  2E.2
1FD1:  ADDWF  77,F
1FD2:  RRF    77,F
1FD3:  RRF    78,F
1FD4:  BTFSC  2E.3
1FD5:  ADDWF  77,F
1FD6:  RRF    77,F
1FD7:  RRF    78,F
1FD8:  BTFSC  2E.4
1FD9:  ADDWF  77,F
1FDA:  RRF    77,F
1FDB:  RRF    78,F
1FDC:  BTFSC  2E.5
1FDD:  ADDWF  77,F
1FDE:  RRF    77,F
1FDF:  RRF    78,F
1FE0:  BTFSC  2E.6
1FE1:  ADDWF  77,F
1FE2:  RRF    77,F
1FE3:  RRF    78,F
1FE4:  BTFSC  2E.7
1FE5:  ADDWF  77,F
1FE6:  RRF    77,F
1FE7:  RRF    78,F
1FE8:  MOVLB  00
1FE9:  RETURN
*
2595:  MOVF   78,W
2596:  MOVLB  11
2597:  MOVF   3A,W
2598:  MOVWF  54
2599:  MOVLW  64
259A:  MOVWF  55
259B:  MOVLP  08
259C:  MOVLB  00
259D:  CALL   7D1
259E:  MOVLP  20
259F:  MOVF   77,W
25A0:  MOVLB  11
25A1:  MOVWF  3A
25A2:  MOVF   78,W
25A3:  MOVLW  30
25A4:  BTFSS  03.2
25A5:  GOTO   5AD
25A6:  BTFSS  3B.1
25A7:  GOTO   5B9
25A8:  BTFSC  3B.3
25A9:  GOTO   5B9
25AA:  BTFSC  3B.4
25AB:  MOVLW  20
25AC:  GOTO   5B0
25AD:  BCF    3B.3
25AE:  BCF    3B.4
25AF:  BSF    3B.0
25B0:  ADDWF  78,F
25B1:  MOVF   78,W
25B2:  MOVLB  13
25B3:  MOVWF  2B
25B4:  MOVLP  08
25B5:  MOVLB  00
25B6:  CALL   020
25B7:  MOVLP  20
25B8:  MOVLB  11
25B9:  MOVF   3A,W
25BA:  MOVWF  54
25BB:  MOVLW  0A
25BC:  MOVWF  55
25BD:  MOVLP  08
25BE:  MOVLB  00
25BF:  CALL   7D1
25C0:  MOVLP  20
25C1:  MOVF   77,W
25C2:  MOVLB  11
25C3:  MOVWF  3A
25C4:  MOVF   78,W
25C5:  MOVLW  30
25C6:  BTFSS  03.2
25C7:  GOTO   5CE
25C8:  BTFSC  3B.3
25C9:  GOTO   5D7
25CA:  BTFSS  3B.0
25CB:  GOTO   5D7
25CC:  BTFSC  3B.4
25CD:  MOVLW  20
25CE:  ADDWF  78,F
25CF:  MOVF   78,W
25D0:  MOVLB  13
25D1:  MOVWF  2B
25D2:  MOVLP  08
25D3:  MOVLB  00
25D4:  CALL   020
25D5:  MOVLP  20
25D6:  MOVLB  11
25D7:  MOVLW  30
25D8:  ADDWF  3A,F
25D9:  MOVF   3A,W
25DA:  MOVLB  13
25DB:  MOVWF  2B
25DC:  MOVLP  08
25DD:  MOVLB  00
25DE:  CALL   020
25DF:  MOVLP  20
25E0:  RETURN
*
262E:  BTFSC  03.1
262F:  GOTO   634
2630:  MOVLW  25
2631:  MOVWF  05
2632:  MOVLW  9B
2633:  MOVWF  04
2634:  CLRF   77
2635:  CLRF   78
2636:  CLRF   79
2637:  CLRF   7A
2638:  MOVLB  11
2639:  CLRF   6B
263A:  CLRF   6C
263B:  CLRF   6D
263C:  CLRF   6E
263D:  MOVF   67,W
263E:  IORWF  66,W
263F:  IORWF  65,W
2640:  IORWF  64,W
2641:  BTFSC  03.2
2642:  GOTO   673
2643:  MOVLW  20
2644:  MOVWF  6F
2645:  BCF    03.0
2646:  RLF    60,F
2647:  RLF    61,F
2648:  RLF    62,F
2649:  RLF    63,F
264A:  RLF    6B,F
264B:  RLF    6C,F
264C:  RLF    6D,F
264D:  RLF    6E,F
264E:  MOVF   67,W
264F:  SUBWF  6E,W
2650:  BTFSS  03.2
2651:  GOTO   65C
2652:  MOVF   66,W
2653:  SUBWF  6D,W
2654:  BTFSS  03.2
2655:  GOTO   65C
2656:  MOVF   65,W
2657:  SUBWF  6C,W
2658:  BTFSS  03.2
2659:  GOTO   65C
265A:  MOVF   64,W
265B:  SUBWF  6B,W
265C:  BTFSS  03.0
265D:  GOTO   66D
265E:  MOVF   64,W
265F:  SUBWF  6B,F
2660:  MOVF   65,W
2661:  BTFSS  03.0
2662:  INCFSZ 65,W
2663:  SUBWF  6C,F
2664:  MOVF   66,W
2665:  BTFSS  03.0
2666:  INCFSZ 66,W
2667:  SUBWF  6D,F
2668:  MOVF   67,W
2669:  BTFSS  03.0
266A:  INCFSZ 67,W
266B:  SUBWF  6E,F
266C:  BSF    03.0
266D:  RLF    77,F
266E:  RLF    78,F
266F:  RLF    79,F
2670:  RLF    7A,F
2671:  DECFSZ 6F,F
2672:  GOTO   645
2673:  MOVF   6B,W
2674:  MOVWF  00
2675:  MOVF   6C,W
2676:  MOVWI  W,[FSR0+01]
2677:  MOVF   6D,W
2678:  MOVWI  W,[FSR0+02]
2679:  MOVF   6E,W
267A:  MOVWI  W,[FSR0+03]
267B:  MOVLB  00
267C:  RETURN
*
2AC0:  MOVLW  20
2AC1:  MOVLB  11
2AC2:  BTFSS  4F.4
2AC3:  MOVLW  30
2AC4:  MOVWF  50
2AC5:  MOVF   4E,W
2AC6:  MOVWF  77
2AC7:  BTFSS  4E.7
2AC8:  GOTO   2D1
2AC9:  COMF   77,F
2ACA:  INCF   77,F
2ACB:  MOVF   77,W
2ACC:  MOVWF  4E
2ACD:  MOVLW  2D
2ACE:  MOVWF  50
2ACF:  BSF    4F.7
2AD0:  BSF    4F.0
2AD1:  MOVF   4E,W
2AD2:  MOVWF  54
2AD3:  MOVLW  64
2AD4:  MOVWF  55
2AD5:  MOVLP  08
2AD6:  MOVLB  00
2AD7:  CALL   7D1
2AD8:  MOVLP  28
2AD9:  MOVF   77,W
2ADA:  MOVLB  11
2ADB:  MOVWF  4E
2ADC:  MOVLW  30
2ADD:  ADDWF  78,W
2ADE:  MOVWF  51
2ADF:  MOVF   4E,W
2AE0:  MOVWF  54
2AE1:  MOVLW  0A
2AE2:  MOVWF  55
2AE3:  MOVLP  08
2AE4:  MOVLB  00
2AE5:  CALL   7D1
2AE6:  MOVLP  28
2AE7:  MOVLW  30
2AE8:  ADDWF  77,W
2AE9:  MOVLB  11
2AEA:  MOVWF  53
2AEB:  MOVLW  30
2AEC:  ADDWF  78,W
2AED:  MOVWF  52
2AEE:  MOVF   50,W
2AEF:  MOVWF  77
2AF0:  MOVLW  30
2AF1:  SUBWF  51,W
2AF2:  BTFSC  03.2
2AF3:  GOTO   2F8
2AF4:  BSF    4F.1
2AF5:  BTFSC  4F.7
2AF6:  BSF    4F.2
2AF7:  GOTO   30C
2AF8:  MOVF   50,W
2AF9:  MOVWF  51
2AFA:  MOVLW  20
2AFB:  MOVWF  50
2AFC:  MOVLW  30
2AFD:  SUBWF  52,W
2AFE:  BTFSC  03.2
2AFF:  GOTO   304
2B00:  BSF    4F.0
2B01:  BTFSC  4F.7
2B02:  BSF    4F.1
2B03:  GOTO   30C
2B04:  BTFSS  03.2
2B05:  BSF    4F.0
2B06:  BTFSS  03.2
2B07:  GOTO   30C
2B08:  MOVF   51,W
2B09:  MOVWF  52
2B0A:  MOVLW  20
2B0B:  MOVWF  51
2B0C:  BTFSC  4F.2
2B0D:  GOTO   313
2B0E:  BTFSC  4F.1
2B0F:  GOTO   31B
2B10:  BTFSC  4F.0
2B11:  GOTO   323
2B12:  GOTO   32B
2B13:  MOVF   50,W
2B14:  MOVLB  13
2B15:  MOVWF  2B
2B16:  MOVLP  08
2B17:  MOVLB  00
2B18:  CALL   020
2B19:  MOVLP  28
2B1A:  MOVLB  11
2B1B:  MOVF   51,W
2B1C:  MOVLB  13
2B1D:  MOVWF  2B
2B1E:  MOVLP  08
2B1F:  MOVLB  00
2B20:  CALL   020
2B21:  MOVLP  28
2B22:  MOVLB  11
2B23:  MOVF   52,W
2B24:  MOVLB  13
2B25:  MOVWF  2B
2B26:  MOVLP  08
2B27:  MOVLB  00
2B28:  CALL   020
2B29:  MOVLP  28
2B2A:  MOVLB  11
2B2B:  MOVF   53,W
2B2C:  MOVLB  13
2B2D:  MOVWF  2B
2B2E:  MOVLP  08
2B2F:  MOVLB  00
2B30:  CALL   020
2B31:  MOVLP  28
2B32:  RETURN
*
2BA2:  MOVF   04,W
2BA3:  MOVLB  11
2BA4:  MOVWF  58
2BA5:  MOVLW  3B
2BA6:  MOVWF  5F
2BA7:  MOVLW  9A
2BA8:  MOVWF  5E
2BA9:  MOVLW  CA
2BAA:  MOVWF  5D
2BAB:  CLRF   5C
2BAC:  MOVLW  0A
2BAD:  MOVWF  5A
2BAE:  BSF    03.1
2BAF:  MOVLW  25
2BB0:  MOVWF  05
2BB1:  MOVLW  81
2BB2:  MOVWF  04
2BB3:  MOVF   54,W
2BB4:  MOVWF  63
2BB5:  MOVF   53,W
2BB6:  MOVWF  62
2BB7:  MOVF   52,W
2BB8:  MOVWF  61
2BB9:  MOVF   51,W
2BBA:  MOVWF  60
2BBB:  MOVF   5F,W
2BBC:  MOVWF  67
2BBD:  MOVF   5E,W
2BBE:  MOVWF  66
2BBF:  MOVF   5D,W
2BC0:  MOVWF  65
2BC1:  MOVF   5C,W
2BC2:  MOVWF  64
2BC3:  MOVLP  20
2BC4:  MOVLB  00
2BC5:  CALL   62E
2BC6:  MOVLP  28
2BC7:  MOVF   78,W
2BC8:  MOVF   77,F
2BC9:  BTFSS  03.2
2BCA:  GOTO   3E2
2BCB:  MOVLB  11
2BCC:  MOVF   5A,W
2BCD:  XORLW  01
2BCE:  BTFSS  03.2
2BCF:  GOTO   3D2
2BD0:  MOVLB  00
2BD1:  GOTO   3E2
2BD2:  MOVF   58,W
2BD3:  BTFSC  03.2
2BD4:  GOTO   3E4
2BD5:  ANDLW  0F
2BD6:  SUBWF  5A,W
2BD7:  BTFSC  03.2
2BD8:  GOTO   3DB
2BD9:  BTFSC  03.0
2BDA:  GOTO   3EE
2BDB:  BTFSC  58.7
2BDC:  GOTO   3EE
2BDD:  BTFSC  58.6
2BDE:  GOTO   3E4
2BDF:  MOVLW  20
2BE0:  GOTO   3E5
2BE1:  MOVLB  00
2BE2:  MOVLB  11
2BE3:  CLRF   58
2BE4:  MOVLW  30
2BE5:  ADDWF  77,F
2BE6:  MOVF   77,W
2BE7:  MOVLB  13
2BE8:  MOVWF  2B
2BE9:  MOVLP  08
2BEA:  MOVLB  00
2BEB:  CALL   020
2BEC:  MOVLP  28
2BED:  MOVLB  11
2BEE:  BCF    03.1
2BEF:  MOVF   5F,W
2BF0:  MOVWF  63
2BF1:  MOVF   5E,W
2BF2:  MOVWF  62
2BF3:  MOVF   5D,W
2BF4:  MOVWF  61
2BF5:  MOVF   5C,W
2BF6:  MOVWF  60
2BF7:  CLRF   67
2BF8:  CLRF   66
2BF9:  CLRF   65
2BFA:  MOVLW  0A
2BFB:  MOVWF  64
2BFC:  MOVLP  20
2BFD:  MOVLB  00
2BFE:  CALL   62E
2BFF:  MOVLP  28
2C00:  MOVF   7A,W
2C01:  MOVLB  11
2C02:  MOVWF  5F
2C03:  MOVF   79,W
2C04:  MOVWF  5E
2C05:  MOVF   78,W
2C06:  MOVWF  5D
2C07:  MOVF   77,W
2C08:  MOVWF  5C
2C09:  DECFSZ 5A,F
2C0A:  GOTO   3AE
2C0B:  MOVLB  00
2C0C:  RETURN
*
36B9:  MOVF   04,W
36BA:  MOVWF  40
36BB:  BTFSS  3D.7
36BC:  GOTO   6CA
36BD:  DECF   40,F
36BE:  BSF    40.5
36BF:  COMF   3A,F
36C0:  COMF   3B,F
36C1:  COMF   3C,F
36C2:  COMF   3D,F
36C3:  INCF   3A,F
36C4:  BTFSC  03.2
36C5:  INCF   3B,F
36C6:  BTFSC  03.2
36C7:  INCF   3C,F
36C8:  BTFSC  03.2
36C9:  INCF   3D,F
36CA:  MOVLW  3B
36CB:  MOVWF  47
36CC:  MOVLW  9A
36CD:  MOVWF  46
36CE:  MOVLW  CA
36CF:  MOVWF  45
36D0:  CLRF   44
36D1:  MOVLW  0A
36D2:  MOVWF  42
36D3:  BSF    03.1
36D4:  MOVLW  25
36D5:  MOVWF  05
36D6:  MOVLW  6A
36D7:  MOVWF  04
36D8:  MOVF   3D,W
36D9:  MOVWF  63
36DA:  MOVF   3C,W
36DB:  MOVWF  62
36DC:  MOVF   3B,W
36DD:  MOVWF  61
36DE:  MOVF   3A,W
36DF:  MOVWF  60
36E0:  MOVF   47,W
36E1:  MOVWF  67
36E2:  MOVF   46,W
36E3:  MOVWF  66
36E4:  MOVF   45,W
36E5:  MOVWF  65
36E6:  MOVF   44,W
36E7:  MOVWF  64
36E8:  MOVLP  20
36E9:  MOVLB  00
36EA:  CALL   62E
36EB:  MOVLP  30
36EC:  MOVF   78,W
36ED:  MOVF   77,F
36EE:  BTFSS  03.2
36EF:  GOTO   707
36F0:  MOVLB  11
36F1:  MOVF   42,W
36F2:  XORLW  01
36F3:  BTFSS  03.2
36F4:  GOTO   6F7
36F5:  MOVLB  00
36F6:  GOTO   707
36F7:  MOVF   40,W
36F8:  BTFSC  03.2
36F9:  GOTO   70A
36FA:  ANDLW  0F
36FB:  SUBWF  42,W
36FC:  BTFSC  03.2
36FD:  GOTO   700
36FE:  BTFSC  03.0
36FF:  GOTO   735
3700:  BTFSC  40.7
3701:  GOTO   735
3702:  BTFSC  40.6
3703:  GOTO   70A
3704:  MOVLW  20
3705:  GOTO   72C
3706:  MOVLB  00
3707:  MOVLW  20
3708:  MOVLB  11
3709:  ANDWF  40,F
370A:  BTFSS  40.5
370B:  GOTO   71A
370C:  BCF    40.5
370D:  MOVF   77,W
370E:  MOVWF  40
370F:  MOVLW  2D
3710:  MOVLB  13
3711:  MOVWF  2B
3712:  MOVLP  08
3713:  MOVLB  00
3714:  CALL   020
3715:  MOVLP  30
3716:  MOVLB  11
3717:  MOVF   40,W
3718:  MOVWF  77
3719:  CLRF   40
371A:  MOVLW  30
371B:  BTFSS  40.5
371C:  GOTO   72C
371D:  BCF    40.5
371E:  MOVF   77,W
371F:  MOVWF  40
3720:  MOVLW  2D
3721:  MOVLB  13
3722:  MOVWF  2B
3723:  MOVLP  08
3724:  MOVLB  00
3725:  CALL   020
3726:  MOVLP  30
3727:  MOVLB  11
3728:  MOVF   40,W
3729:  MOVWF  77
372A:  CLRF   40
372B:  MOVLW  30
372C:  ADDWF  77,F
372D:  MOVF   77,W
372E:  MOVLB  13
372F:  MOVWF  2B
3730:  MOVLP  08
3731:  MOVLB  00
3732:  CALL   020
3733:  MOVLP  30
3734:  MOVLB  11
3735:  BCF    03.1
3736:  MOVF   47,W
3737:  MOVWF  63
3738:  MOVF   46,W
3739:  MOVWF  62
373A:  MOVF   45,W
373B:  MOVWF  61
373C:  MOVF   44,W
373D:  MOVWF  60
373E:  CLRF   67
373F:  CLRF   66
3740:  CLRF   65
3741:  MOVLW  0A
3742:  MOVWF  64
3743:  MOVLP  20
3744:  MOVLB  00
3745:  CALL   62E
3746:  MOVLP  30
3747:  MOVF   7A,W
3748:  MOVLB  11
3749:  MOVWF  47
374A:  MOVF   79,W
374B:  MOVWF  46
374C:  MOVF   78,W
374D:  MOVWF  45
374E:  MOVF   77,W
374F:  MOVWF  44
3750:  DECFSZ 42,F
3751:  GOTO   6D3
.................... 
.................... #list
.................... 
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
*
0F63:  MOVLW  26
0F64:  MOVWF  05
0F65:  MOVLW  13
0F66:  MOVWF  04
0F67:  MOVF   00,W
0F68:  BTFSC  03.2
0F69:  GOTO   778
0F6A:  MOVLW  05
0F6B:  MOVWF  78
0F6C:  CLRF   77
0F6D:  DECFSZ 77,F
0F6E:  GOTO   76D
0F6F:  DECFSZ 78,F
0F70:  GOTO   76C
0F71:  MOVLW  2E
0F72:  MOVWF  77
0F73:  DECFSZ 77,F
0F74:  GOTO   773
0F75:  GOTO   776
0F76:  DECFSZ 00,F
0F77:  GOTO   76A
0F78:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
1634:  MOVLB  00
1635:  BTFSS  11.4
1636:  GOTO   635
1637:  MOVLB  03
1638:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
0820:  MOVLB  01
0821:  BCF    0D.4
0822:  MOVLB  02
0823:  BCF    0D.4
0824:  MOVLW  08
0825:  MOVWF  78
0826:  GOTO   027
0827:  NOP
0828:  BSF    78.7
0829:  GOTO   03A
082A:  BCF    78.7
082B:  MOVLB  13
082C:  RRF    2B,F
082D:  MOVLB  02
082E:  BTFSC  03.0
082F:  BSF    0D.4
0830:  BTFSS  03.0
0831:  BCF    0D.4
0832:  BSF    78.6
0833:  GOTO   03A
0834:  BCF    78.6
0835:  DECFSZ 78,F
0836:  GOTO   02B
0837:  GOTO   038
0838:  NOP
0839:  BSF    0D.4
083A:  MOVLW  84
083B:  MOVWF  04
083C:  DECFSZ 04,F
083D:  GOTO   03C
083E:  NOP
083F:  BTFSC  78.7
0840:  GOTO   02A
0841:  BTFSC  78.6
0842:  GOTO   034
0843:  MOVLB  00
0844:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
07F3:  MOVLB  04
07F4:  MOVF   11,W
07F5:  MOVLB  13
07F6:  MOVF   66,W
07F7:  MOVLB  04
07F8:  MOVWF  11
07F9:  RRF    14,W
07FA:  BTFSS  03.0
07FB:  GOTO   7F9
07FC:  MOVF   11,W
07FD:  MOVWF  77
07FE:  MOVLB  00
07FF:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
*
0926:  MOVLB  04
0927:  MOVF   11,W
0928:  MOVLB  13
0929:  MOVF   66,W
092A:  MOVLB  04
092B:  MOVWF  11
092C:  RRF    14,W
092D:  BTFSS  03.0
092E:  GOTO   12C
092F:  MOVF   11,W
0930:  MOVWF  77
0931:  MOVLB  00
0932:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(CLOCK_FREQUENCY); //3.2767秒後に割り込みを発生させる
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  CLRF   16
004E:  NOP
....................    sec++;
004F:  MOVLW  01
0050:  ADDWF  31,F
0051:  BTFSC  03.0
0052:  INCF   32,F
0053:  BTFSC  03.2
0054:  INCF   33,F
0055:  BTFSC  03.2
0056:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0057:  BCF    11.0
0058:  MOVLP  00
0059:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
08E7:  MOVLW  5A
08E8:  MOVLB  03
08E9:  MOVWF  11
08EA:  MOVLW  00
08EB:  MOVWF  12
08EC:  MOVLB  00
08ED:  CALL   045
....................    clear_interrupt(INT_TIMER1);
08EE:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
08EF:  MOVLW  8F
08F0:  MOVWF  18
08F1:  CLRF   19
....................    set_timer1(CLOCK_FREQUENCY); 
08F2:  CLRF   16
08F3:  MOVLW  80
08F4:  MOVWF  17
08F5:  CLRF   16
08F6:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
08F7:  MOVLB  01
08F8:  BSF    11.0
....................    enable_interrupts(GLOBAL);
08F9:  MOVLW  C0
08FA:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
08FB:  MOVLW  64
08FC:  MOVLB  03
08FD:  MOVWF  11
08FE:  MOVLW  00
08FF:  MOVWF  12
0900:  MOVLB  00
0901:  CALL   045
0902:  MOVLP  38
0903:  GOTO   26E (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... 
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
1340:  MOVF   31,W
1341:  MOVWF  77
1342:  MOVF   32,W
1343:  MOVWF  78
1344:  MOVF   33,W
1345:  MOVWF  79
1346:  MOVF   34,W
1347:  MOVWF  7A
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006A:  GOTO   06D
006B:  BTFSS  28.0
006C:  GOTO   080
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006D:  MOVF   59,W
006E:  SUBLW  1F
006F:  BTFSS  03.0
0070:  GOTO   080
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0071:  MOVF   59,W
0072:  INCF   59,F
0073:  ANDLW  1F
0074:  ADDLW  19
0075:  MOVWF  04
0076:  MOVLW  20
0077:  MOVWF  05
0078:  BTFSC  03.0
0079:  INCF   05,F
007A:  BTFSS  11.5
007B:  GOTO   07A
007C:  MOVLB  03
007D:  MOVF   19,W
007E:  MOVWF  00
007F:  MOVLB  00
0080:  BCF    11.5
0081:  MOVLP  00
0082:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
08D3:  MOVLW  83
08D4:  MOVLB  03
08D5:  MOVWF  11
08D6:  MOVLW  00
08D7:  MOVWF  12
08D8:  MOVLB  00
08D9:  CALL   045
....................    enable_interrupts(INT_RDA);
08DA:  MOVLB  01
08DB:  BSF    11.5
....................    enable_interrupts(global);
08DC:  MOVLW  C0
08DD:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
08DE:  MOVLW  8C
08DF:  MOVLB  03
08E0:  MOVWF  11
08E1:  MOVLW  00
08E2:  MOVWF  12
08E3:  MOVLB  00
08E4:  CALL   045
08E5:  MOVLP  38
08E6:  GOTO   26B (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0F94:  MOVLB  0F
0F95:  MOVF   57,W
0F96:  MOVWF  7A
0F97:  MOVF   56,W
0F98:  MOVWF  04
0F99:  MOVF   7A,W
0F9A:  MOVWF  05
0F9B:  MOVF   00,W
0F9C:  MOVWF  58
0F9D:  MOVF   55,W
0F9E:  MOVWF  05
0F9F:  MOVF   54,W
0FA0:  MOVWF  04
0FA1:  CLRF   77
0FA2:  MOVF   58,W
0FA3:  MOVWF  78
....................    *receive_signal_size = 0;
*
0FAB:  MOVF   56,W
0FAC:  MOVWF  04
0FAD:  MOVF   57,W
0FAE:  MOVWF  05
0FAF:  CLRF   00
0FB0:  MOVLP  38
0FB1:  MOVLB  00
0FB2:  GOTO   2C1 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0E21:  MOVLB  13
0E22:  MOVF   43,W
0E23:  XORLW  00
0E24:  MOVLB  00
0E25:  BTFSC  03.2
0E26:  GOTO   62B
0E27:  XORLW  01
0E28:  BTFSC  03.2
0E29:  GOTO   655
0E2A:  GOTO   67E
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E2B:  MOVLB  13
0E2C:  CLRF   4C
0E2D:  CLRF   4B
0E2E:  MOVF   4C,W
0E2F:  SUBWF  4A,W
0E30:  BTFSS  03.0
0E31:  GOTO   654
0E32:  BTFSS  03.2
0E33:  GOTO   638
0E34:  MOVF   49,W
0E35:  SUBWF  4B,W
0E36:  BTFSC  03.0
0E37:  GOTO   654
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0E38:  MOVF   47,W
0E39:  ADDWF  4B,W
0E3A:  MOVWF  04
0E3B:  MOVF   48,W
0E3C:  ADDWFC 4C,W
0E3D:  MOVWF  05
0E3E:  MOVF   00,W
0E3F:  MOVWF  4F
0E40:  MOVLB  04
0E41:  BCF    15.5
0E42:  MOVLW  40
0E43:  MOVWF  14
0E44:  MOVLW  09
0E45:  MOVWF  12
0E46:  MOVLW  2A
0E47:  MOVWF  15
0E48:  MOVLB  13
0E49:  MOVF   4F,W
0E4A:  MOVWF  66
0E4B:  MOVLP  00
0E4C:  MOVLB  00
0E4D:  CALL   7F3
0E4E:  MOVLP  08
0E4F:  MOVLB  13
0E50:  INCF   4B,F
0E51:  BTFSC  03.2
0E52:  INCF   4C,F
0E53:  GOTO   62E
....................          break;
0E54:  GOTO   67F
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E55:  MOVLB  13
0E56:  CLRF   4E
0E57:  CLRF   4D
0E58:  MOVF   4E,W
0E59:  SUBWF  4A,W
0E5A:  BTFSS  03.0
0E5B:  GOTO   67C
0E5C:  BTFSS  03.2
0E5D:  GOTO   662
0E5E:  MOVF   49,W
0E5F:  SUBWF  4D,W
0E60:  BTFSC  03.0
0E61:  GOTO   67C
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0E62:  MOVF   47,W
0E63:  ADDWF  4D,W
0E64:  MOVWF  04
0E65:  MOVF   48,W
0E66:  ADDWFC 4E,W
0E67:  MOVWF  05
0E68:  MOVF   00,W
0E69:  MOVWF  4F
0E6A:  MOVLB  04
0E6B:  BCF    15.5
0E6C:  MOVLW  40
0E6D:  MOVWF  14
0E6E:  MOVLW  09
0E6F:  MOVWF  12
0E70:  MOVLW  2A
0E71:  MOVWF  15
0E72:  MOVLB  13
0E73:  MOVF   4F,W
0E74:  MOVWF  66
0E75:  MOVLB  00
0E76:  CALL   126
0E77:  MOVLB  13
0E78:  INCF   4D,F
0E79:  BTFSC  03.2
0E7A:  INCF   4E,F
0E7B:  GOTO   658
....................          break;
0E7C:  GOTO   67F
0E7D:  MOVLB  00
....................          
....................       default:
....................          break;
0E7E:  MOVLB  13
....................    }
....................    return;
0E7F:  MOVLB  00
0E80:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0933:  MOVLB  13
0934:  MOVF   49,W
0935:  XORLW  00
0936:  MOVLB  00
0937:  BTFSC  03.2
0938:  GOTO   13D
0939:  XORLW  01
093A:  BTFSC  03.2
093B:  GOTO   1A2
093C:  GOTO   204
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
093D:  MOVLB  13
093E:  CLRF   58
093F:  CLRF   57
0940:  MOVF   58,W
0941:  SUBWF  50,W
0942:  BTFSS  03.0
0943:  GOTO   166
0944:  BTFSS  03.2
0945:  GOTO   14A
0946:  MOVF   4F,W
0947:  SUBWF  57,W
0948:  BTFSC  03.0
0949:  GOTO   166
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
094A:  MOVF   4D,W
094B:  ADDWF  57,W
094C:  MOVWF  04
094D:  MOVF   4E,W
094E:  ADDWFC 58,W
094F:  MOVWF  05
0950:  MOVF   00,W
0951:  MOVWF  64
0952:  MOVLB  04
0953:  BCF    15.5
0954:  MOVLW  40
0955:  MOVWF  14
0956:  MOVLW  09
0957:  MOVWF  12
0958:  MOVLW  2A
0959:  MOVWF  15
095A:  MOVLB  13
095B:  MOVF   64,W
095C:  MOVWF  66
095D:  MOVLP  00
095E:  MOVLB  00
095F:  CALL   7F3
0960:  MOVLP  08
0961:  MOVLB  13
0962:  INCF   57,F
0963:  BTFSC  03.2
0964:  INCF   58,F
0965:  GOTO   140
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0966:  CLRF   5C
0967:  CLRF   5B
0968:  CLRF   5A
0969:  CLRF   59
096A:  MOVF   5C,W
096B:  SUBWF  56,W
096C:  BTFSS  03.0
096D:  GOTO   1A1
096E:  BTFSS  03.2
096F:  GOTO   180
0970:  MOVF   5B,W
0971:  SUBWF  55,W
0972:  BTFSS  03.0
0973:  GOTO   1A1
0974:  BTFSS  03.2
0975:  GOTO   180
0976:  MOVF   5A,W
0977:  SUBWF  54,W
0978:  BTFSS  03.0
0979:  GOTO   1A1
097A:  BTFSS  03.2
097B:  GOTO   180
097C:  MOVF   53,W
097D:  SUBWF  59,W
097E:  BTFSC  03.0
097F:  GOTO   1A1
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0980:  MOVF   51,W
0981:  ADDWF  59,W
0982:  MOVWF  04
0983:  MOVF   52,W
0984:  ADDWFC 5A,W
0985:  MOVWF  05
0986:  MOVLB  04
0987:  BCF    15.5
0988:  MOVLW  40
0989:  MOVWF  14
098A:  MOVLW  09
098B:  MOVWF  12
098C:  MOVLW  2A
098D:  MOVWF  15
098E:  MOVLW  01
098F:  MOVLB  13
0990:  MOVWF  66
0991:  MOVLP  00
0992:  MOVLB  00
0993:  CALL   7F3
0994:  MOVLP  08
0995:  MOVF   77,W
0996:  MOVWF  00
0997:  MOVLW  01
0998:  MOVLB  13
0999:  ADDWF  59,F
099A:  BTFSC  03.0
099B:  INCF   5A,F
099C:  BTFSC  03.2
099D:  INCF   5B,F
099E:  BTFSC  03.2
099F:  INCF   5C,F
09A0:  GOTO   16A
....................          break;
09A1:  GOTO   205
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
09A2:  MOVLB  13
09A3:  CLRF   5E
09A4:  CLRF   5D
09A5:  MOVF   5E,W
09A6:  SUBWF  50,W
09A7:  BTFSS  03.0
09A8:  GOTO   1C9
09A9:  BTFSS  03.2
09AA:  GOTO   1AF
09AB:  MOVF   4F,W
09AC:  SUBWF  5D,W
09AD:  BTFSC  03.0
09AE:  GOTO   1C9
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
09AF:  MOVF   4D,W
09B0:  ADDWF  5D,W
09B1:  MOVWF  04
09B2:  MOVF   4E,W
09B3:  ADDWFC 5E,W
09B4:  MOVWF  05
09B5:  MOVF   00,W
09B6:  MOVWF  64
09B7:  MOVLB  04
09B8:  BCF    15.5
09B9:  MOVLW  40
09BA:  MOVWF  14
09BB:  MOVLW  09
09BC:  MOVWF  12
09BD:  MOVLW  2A
09BE:  MOVWF  15
09BF:  MOVLB  13
09C0:  MOVF   64,W
09C1:  MOVWF  66
09C2:  MOVLB  00
09C3:  CALL   126
09C4:  MOVLB  13
09C5:  INCF   5D,F
09C6:  BTFSC  03.2
09C7:  INCF   5E,F
09C8:  GOTO   1A5
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
09C9:  CLRF   62
09CA:  CLRF   61
09CB:  CLRF   60
09CC:  CLRF   5F
09CD:  MOVF   62,W
09CE:  SUBWF  56,W
09CF:  BTFSS  03.0
09D0:  GOTO   202
09D1:  BTFSS  03.2
09D2:  GOTO   1E3
09D3:  MOVF   61,W
09D4:  SUBWF  55,W
09D5:  BTFSS  03.0
09D6:  GOTO   202
09D7:  BTFSS  03.2
09D8:  GOTO   1E3
09D9:  MOVF   60,W
09DA:  SUBWF  54,W
09DB:  BTFSS  03.0
09DC:  GOTO   202
09DD:  BTFSS  03.2
09DE:  GOTO   1E3
09DF:  MOVF   53,W
09E0:  SUBWF  5F,W
09E1:  BTFSC  03.0
09E2:  GOTO   202
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
09E3:  MOVF   51,W
09E4:  ADDWF  5F,W
09E5:  MOVWF  04
09E6:  MOVF   52,W
09E7:  ADDWFC 60,W
09E8:  MOVWF  05
09E9:  MOVLB  04
09EA:  BCF    15.5
09EB:  MOVLW  40
09EC:  MOVWF  14
09ED:  MOVLW  09
09EE:  MOVWF  12
09EF:  MOVLW  2A
09F0:  MOVWF  15
09F1:  MOVLW  02
09F2:  MOVLB  13
09F3:  MOVWF  66
09F4:  MOVLB  00
09F5:  CALL   126
09F6:  MOVF   77,W
09F7:  MOVWF  00
09F8:  MOVLW  01
09F9:  MOVLB  13
09FA:  ADDWF  5F,F
09FB:  BTFSC  03.0
09FC:  INCF   60,F
09FD:  BTFSC  03.2
09FE:  INCF   61,F
09FF:  BTFSC  03.2
0A00:  INCF   62,F
0A01:  GOTO   1CD
....................          break;
0A02:  GOTO   205
0A03:  MOVLB  00
....................    
....................          
....................       default:
....................          break;
0A04:  MOVLB  13
....................    }
....................    return;
0A05:  MOVLB  00
0A06:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0E81:  MOVLB  13
0E82:  MOVF   43,W
0E83:  XORLW  00
0E84:  MOVLB  00
0E85:  BTFSC  03.2
0E86:  GOTO   68B
0E87:  XORLW  01
0E88:  BTFSC  03.2
0E89:  GOTO   6D4
0E8A:  GOTO   71A
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0E8B:  MOVLB  13
0E8C:  CLRF   4E
0E8D:  MOVF   49,W
0E8E:  SUBWF  4E,W
0E8F:  BTFSC  03.0
0E90:  GOTO   6AB
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0E91:  MOVF   4E,W
0E92:  ADDWF  47,W
0E93:  MOVWF  04
0E94:  MOVLW  00
0E95:  ADDWFC 48,W
0E96:  MOVWF  05
0E97:  MOVF   00,W
0E98:  MOVWF  54
0E99:  MOVLB  04
0E9A:  BCF    15.5
0E9B:  MOVLW  40
0E9C:  MOVWF  14
0E9D:  MOVLW  09
0E9E:  MOVWF  12
0E9F:  MOVLW  2A
0EA0:  MOVWF  15
0EA1:  MOVLB  13
0EA2:  MOVF   54,W
0EA3:  MOVWF  66
0EA4:  MOVLP  00
0EA5:  MOVLB  00
0EA6:  CALL   7F3
0EA7:  MOVLP  08
0EA8:  MOVLB  13
0EA9:  INCF   4E,F
0EAA:  GOTO   68D
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0EAB:  CLRF   50
0EAC:  CLRF   4F
0EAD:  MOVF   50,W
0EAE:  SUBWF  4D,W
0EAF:  BTFSS  03.0
0EB0:  GOTO   6D3
0EB1:  BTFSS  03.2
0EB2:  GOTO   6B7
0EB3:  MOVF   4C,W
0EB4:  SUBWF  4F,W
0EB5:  BTFSC  03.0
0EB6:  GOTO   6D3
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0EB7:  MOVF   4A,W
0EB8:  ADDWF  4F,W
0EB9:  MOVWF  04
0EBA:  MOVF   4B,W
0EBB:  ADDWFC 50,W
0EBC:  MOVWF  05
0EBD:  MOVF   00,W
0EBE:  MOVWF  54
0EBF:  MOVLB  04
0EC0:  BCF    15.5
0EC1:  MOVLW  40
0EC2:  MOVWF  14
0EC3:  MOVLW  09
0EC4:  MOVWF  12
0EC5:  MOVLW  2A
0EC6:  MOVWF  15
0EC7:  MOVLB  13
0EC8:  MOVF   54,W
0EC9:  MOVWF  66
0ECA:  MOVLP  00
0ECB:  MOVLB  00
0ECC:  CALL   7F3
0ECD:  MOVLP  08
0ECE:  MOVLB  13
0ECF:  INCF   4F,F
0ED0:  BTFSC  03.2
0ED1:  INCF   50,F
0ED2:  GOTO   6AD
....................          break;
0ED3:  GOTO   71B
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0ED4:  MOVLB  13
0ED5:  CLRF   51
0ED6:  MOVF   49,W
0ED7:  SUBWF  51,W
0ED8:  BTFSC  03.0
0ED9:  GOTO   6F2
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0EDA:  MOVF   51,W
0EDB:  ADDWF  47,W
0EDC:  MOVWF  04
0EDD:  MOVLW  00
0EDE:  ADDWFC 48,W
0EDF:  MOVWF  05
0EE0:  MOVF   00,W
0EE1:  MOVWF  54
0EE2:  MOVLB  04
0EE3:  BCF    15.5
0EE4:  MOVLW  40
0EE5:  MOVWF  14
0EE6:  MOVLW  09
0EE7:  MOVWF  12
0EE8:  MOVLW  2A
0EE9:  MOVWF  15
0EEA:  MOVLB  13
0EEB:  MOVF   54,W
0EEC:  MOVWF  66
0EED:  MOVLB  00
0EEE:  CALL   126
0EEF:  MOVLB  13
0EF0:  INCF   51,F
0EF1:  GOTO   6D6
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0EF2:  CLRF   53
0EF3:  CLRF   52
0EF4:  MOVF   53,W
0EF5:  SUBWF  4D,W
0EF6:  BTFSS  03.0
0EF7:  GOTO   718
0EF8:  BTFSS  03.2
0EF9:  GOTO   6FE
0EFA:  MOVF   4C,W
0EFB:  SUBWF  52,W
0EFC:  BTFSC  03.0
0EFD:  GOTO   718
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0EFE:  MOVF   4A,W
0EFF:  ADDWF  52,W
0F00:  MOVWF  04
0F01:  MOVF   4B,W
0F02:  ADDWFC 53,W
0F03:  MOVWF  05
0F04:  MOVF   00,W
0F05:  MOVWF  54
0F06:  MOVLB  04
0F07:  BCF    15.5
0F08:  MOVLW  40
0F09:  MOVWF  14
0F0A:  MOVLW  09
0F0B:  MOVWF  12
0F0C:  MOVLW  2A
0F0D:  MOVWF  15
0F0E:  MOVLB  13
0F0F:  MOVF   54,W
0F10:  MOVWF  66
0F11:  MOVLB  00
0F12:  CALL   126
0F13:  MOVLB  13
0F14:  INCF   52,F
0F15:  BTFSC  03.2
0F16:  INCF   53,F
0F17:  GOTO   6F4
....................          break;
0F18:  GOTO   71B
0F19:  MOVLB  00
....................          
....................       default:
....................          break;
0F1A:  MOVLB  13
....................    }
....................    return;
0F1B:  MOVLB  00
0F1C:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0FBE:  MOVLB  13
0FBF:  MOVF   29,W
0FC0:  MOVWF  49
0FC1:  MOVLW  01
0FC2:  MOVWF  4A
0FC3:  MOVWF  4C
0FC4:  CLRF   4B
0FC5:  MOVLB  00
0FC6:  CALL   104
0FC7:  MOVLB  13
0FC8:  MOVF   29,W
0FC9:  MOVWF  49
0FCA:  CLRF   4A
0FCB:  CLRF   4C
0FCC:  MOVLW  80
0FCD:  MOVWF  4B
0FCE:  MOVLB  00
0FCF:  CALL   104
0FD0:  RETURN
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
0F1D:  MOVLW  05
0F1E:  MOVLB  13
0F1F:  MOVWF  47
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0F20:  MOVF   45,W
0F21:  MOVWF  49
0F22:  CLRF   4A
0F23:  MOVLW  01
0F24:  MOVWF  4C
0F25:  CLRF   4B
0F26:  MOVLB  00
0F27:  CALL   104
0F28:  MOVLB  13
0F29:  MOVF   45,W
0F2A:  MOVWF  49
0F2B:  CLRF   4A
0F2C:  CLRF   4C
0F2D:  MOVLW  80
0F2E:  MOVWF  4B
0F2F:  MOVLB  00
0F30:  CALL   104
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0F31:  MOVLB  13
0F32:  MOVF   46,W
0F33:  MOVWF  4C
0F34:  MOVF   45,W
0F35:  MOVWF  4B
0F36:  MOVF   44,W
0F37:  MOVWF  4A
0F38:  MOVF   43,W
0F39:  MOVWF  49
0F3A:  MOVLW  26
0F3B:  MOVWF  4E
0F3C:  MOVLW  17
0F3D:  MOVWF  4D
0F3E:  CLRF   50
0F3F:  MOVLW  01
0F40:  MOVWF  4F
0F41:  MOVLW  26
0F42:  MOVWF  52
0F43:  MOVLW  18
0F44:  MOVWF  51
0F45:  CLRF   56
0F46:  CLRF   55
0F47:  CLRF   54
0F48:  MOVLW  01
0F49:  MOVWF  53
0F4A:  MOVLB  00
0F4B:  CALL   133
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
0F4C:  MOVLB  13
0F4D:  MOVF   45,W
0F4E:  MOVWF  49
0F4F:  MOVLW  01
0F50:  MOVWF  4A
0F51:  MOVWF  4C
0F52:  CLRF   4B
0F53:  MOVLB  00
0F54:  CALL   104
0F55:  MOVLB  13
0F56:  MOVF   45,W
0F57:  MOVWF  49
0F58:  CLRF   4A
0F59:  CLRF   4C
0F5A:  MOVLW  80
0F5B:  MOVWF  4B
0F5C:  MOVLB  00
0F5D:  CALL   104
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
0F5E:  MOVLB  13
0F5F:  MOVF   48,W
0F60:  MOVWF  78
0F61:  MOVLB  00
0F62:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1A45:  MOVLB  0F
1A46:  MOVF   66,F
1A47:  BTFSS  03.2
1A48:  GOTO   30C
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1A49:  MOVLW  06
1A4A:  MOVWF  6D
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
1A4B:  MOVLW  D8
1A4C:  MOVWF  6E
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1A4D:  MOVF   6B,W
1A4E:  MOVLB  10
1A4F:  MOVWF  2B
1A50:  MOVLB  0F
1A51:  MOVF   6C,W
1A52:  MOVLB  10
1A53:  MOVWF  2C
1A54:  CLRF   2D
1A55:  CLRF   2E
1A56:  CLRF   78
1A57:  CLRF   79
1A58:  CLRF   7A
1A59:  MOVF   2B,W
1A5A:  MOVLB  0F
1A5B:  MOVWF  6F
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1A5C:  MOVF   6A,W
1A5D:  MOVLB  10
1A5E:  MOVWF  2B
1A5F:  MOVLB  0F
1A60:  MOVF   6B,W
1A61:  MOVLB  10
1A62:  MOVWF  2C
1A63:  MOVLB  0F
1A64:  MOVF   6C,W
1A65:  MOVLB  10
1A66:  MOVWF  2D
1A67:  CLRF   2E
1A68:  CLRF   78
1A69:  CLRF   79
1A6A:  CLRF   7A
1A6B:  MOVF   2B,W
1A6C:  MOVWF  20
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1A6D:  MOVLB  0F
1A6E:  CLRF   78
1A6F:  CLRF   79
1A70:  CLRF   7A
1A71:  MOVF   69,W
1A72:  MOVLB  10
1A73:  MOVWF  21
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1A74:  MOVLB  0F
1A75:  MOVF   67,W
1A76:  MOVLB  13
1A77:  MOVWF  49
1A78:  CLRF   4A
1A79:  MOVLW  01
1A7A:  MOVWF  4C
1A7B:  CLRF   4B
1A7C:  MOVLP  08
1A7D:  MOVLB  00
1A7E:  CALL   104
1A7F:  MOVLP  18
1A80:  MOVLB  0F
1A81:  MOVF   67,W
1A82:  MOVLB  13
1A83:  MOVWF  49
1A84:  CLRF   4A
1A85:  CLRF   4C
1A86:  MOVLW  80
1A87:  MOVWF  4B
1A88:  MOVLP  08
1A89:  MOVLB  00
1A8A:  CALL   104
1A8B:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1A8C:  MOVLB  0F
1A8D:  MOVF   68,W
1A8E:  MOVLB  13
1A8F:  MOVWF  46
1A90:  MOVLB  0F
1A91:  MOVF   67,W
1A92:  MOVLB  13
1A93:  MOVWF  45
1A94:  MOVLB  0F
1A95:  MOVF   66,W
1A96:  MOVLB  13
1A97:  MOVWF  44
1A98:  MOVLB  0F
1A99:  MOVF   65,W
1A9A:  MOVLB  13
1A9B:  MOVWF  43
1A9C:  MOVLW  24
1A9D:  MOVWF  48
1A9E:  MOVLW  FD
1A9F:  MOVWF  47
1AA0:  CLRF   4A
1AA1:  MOVLW  01
1AA2:  MOVWF  49
1AA3:  MOVLP  08
1AA4:  MOVLB  00
1AA5:  CALL   621
1AA6:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1AA7:  MOVLB  0F
1AA8:  MOVF   67,W
1AA9:  MOVLB  13
1AAA:  MOVWF  49
1AAB:  MOVLW  01
1AAC:  MOVWF  4A
1AAD:  MOVWF  4C
1AAE:  CLRF   4B
1AAF:  MOVLP  08
1AB0:  MOVLB  00
1AB1:  CALL   104
1AB2:  MOVLP  18
1AB3:  MOVLB  0F
1AB4:  MOVF   67,W
1AB5:  MOVLB  13
1AB6:  MOVWF  49
1AB7:  CLRF   4A
1AB8:  CLRF   4C
1AB9:  MOVLW  80
1ABA:  MOVWF  4B
1ABB:  MOVLP  08
1ABC:  MOVLB  00
1ABD:  CALL   104
1ABE:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1ABF:  MOVLB  0F
1AC0:  MOVF   67,W
1AC1:  MOVLB  13
1AC2:  MOVWF  49
1AC3:  CLRF   4A
1AC4:  MOVLW  01
1AC5:  MOVWF  4C
1AC6:  CLRF   4B
1AC7:  MOVLP  08
1AC8:  MOVLB  00
1AC9:  CALL   104
1ACA:  MOVLP  18
1ACB:  MOVLB  0F
1ACC:  MOVF   67,W
1ACD:  MOVLB  13
1ACE:  MOVWF  49
1ACF:  CLRF   4A
1AD0:  CLRF   4C
1AD1:  MOVLW  80
1AD2:  MOVWF  4B
1AD3:  MOVLP  08
1AD4:  MOVLB  00
1AD5:  CALL   104
1AD6:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1AD7:  MOVLB  0F
1AD8:  MOVF   68,W
1AD9:  MOVLB  13
1ADA:  MOVWF  46
1ADB:  MOVLB  0F
1ADC:  MOVF   67,W
1ADD:  MOVLB  13
1ADE:  MOVWF  45
1ADF:  MOVLB  0F
1AE0:  MOVF   66,W
1AE1:  MOVLB  13
1AE2:  MOVWF  44
1AE3:  MOVLB  0F
1AE4:  MOVF   65,W
1AE5:  MOVLB  13
1AE6:  MOVWF  43
1AE7:  MOVLW  24
1AE8:  MOVWF  48
1AE9:  MOVLW  FE
1AEA:  MOVWF  47
1AEB:  CLRF   4A
1AEC:  MOVLW  04
1AED:  MOVWF  49
1AEE:  MOVLP  08
1AEF:  MOVLB  00
1AF0:  CALL   621
1AF1:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1AF2:  MOVLB  0F
1AF3:  MOVF   67,W
1AF4:  MOVLB  13
1AF5:  MOVWF  49
1AF6:  MOVLW  01
1AF7:  MOVWF  4A
1AF8:  MOVWF  4C
1AF9:  CLRF   4B
1AFA:  MOVLP  08
1AFB:  MOVLB  00
1AFC:  CALL   104
1AFD:  MOVLP  18
1AFE:  MOVLB  0F
1AFF:  MOVF   67,W
1B00:  MOVLB  13
1B01:  MOVWF  49
1B02:  CLRF   4A
1B03:  CLRF   4C
1B04:  MOVLW  80
1B05:  MOVWF  4B
1B06:  MOVLP  08
1B07:  MOVLB  00
1B08:  CALL   104
1B09:  MOVLP  18
....................    }
1B0A:  GOTO   3DD
1B0B:  MOVLB  0F
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1B0C:  DECFSZ 66,W
1B0D:  GOTO   3DE
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1B0E:  MOVLW  06
1B0F:  MOVLB  10
1B10:  MOVWF  22
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
1B11:  MOVLW  DC
1B12:  MOVWF  23
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1B13:  MOVLB  0F
1B14:  MOVF   6C,W
1B15:  MOVLB  10
1B16:  MOVWF  2B
1B17:  CLRF   2C
1B18:  CLRF   2D
1B19:  CLRF   2E
1B1A:  CLRF   78
1B1B:  CLRF   79
1B1C:  CLRF   7A
1B1D:  MOVF   2B,W
1B1E:  MOVWF  24
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1B1F:  MOVLB  0F
1B20:  MOVF   6B,W
1B21:  MOVLB  10
1B22:  MOVWF  2B
1B23:  MOVLB  0F
1B24:  MOVF   6C,W
1B25:  MOVLB  10
1B26:  MOVWF  2C
1B27:  CLRF   2D
1B28:  CLRF   2E
1B29:  CLRF   78
1B2A:  CLRF   79
1B2B:  CLRF   7A
1B2C:  MOVF   2B,W
1B2D:  MOVWF  25
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1B2E:  MOVLB  0F
1B2F:  MOVF   6A,W
1B30:  MOVLB  10
1B31:  MOVWF  2B
1B32:  MOVLB  0F
1B33:  MOVF   6B,W
1B34:  MOVLB  10
1B35:  MOVWF  2C
1B36:  MOVLB  0F
1B37:  MOVF   6C,W
1B38:  MOVLB  10
1B39:  MOVWF  2D
1B3A:  CLRF   2E
1B3B:  CLRF   78
1B3C:  CLRF   79
1B3D:  CLRF   7A
1B3E:  MOVF   2B,W
1B3F:  MOVWF  26
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1B40:  MOVLB  0F
1B41:  CLRF   78
1B42:  CLRF   79
1B43:  CLRF   7A
1B44:  MOVF   69,W
1B45:  MOVLB  10
1B46:  MOVWF  27
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1B47:  MOVLB  0F
1B48:  MOVF   67,W
1B49:  MOVLB  13
1B4A:  MOVWF  49
1B4B:  CLRF   4A
1B4C:  MOVLW  01
1B4D:  MOVWF  4C
1B4E:  CLRF   4B
1B4F:  MOVLP  08
1B50:  MOVLB  00
1B51:  CALL   104
1B52:  MOVLP  18
1B53:  MOVLB  0F
1B54:  MOVF   67,W
1B55:  MOVLB  13
1B56:  MOVWF  49
1B57:  CLRF   4A
1B58:  CLRF   4C
1B59:  MOVLW  80
1B5A:  MOVWF  4B
1B5B:  MOVLP  08
1B5C:  MOVLB  00
1B5D:  CALL   104
1B5E:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1B5F:  MOVLB  0F
1B60:  MOVF   68,W
1B61:  MOVLB  13
1B62:  MOVWF  46
1B63:  MOVLB  0F
1B64:  MOVF   67,W
1B65:  MOVLB  13
1B66:  MOVWF  45
1B67:  MOVLB  0F
1B68:  MOVF   66,W
1B69:  MOVLB  13
1B6A:  MOVWF  44
1B6B:  MOVLB  0F
1B6C:  MOVF   65,W
1B6D:  MOVLB  13
1B6E:  MOVWF  43
1B6F:  MOVLW  25
1B70:  MOVWF  48
1B71:  MOVLW  02
1B72:  MOVWF  47
1B73:  CLRF   4A
1B74:  MOVLW  01
1B75:  MOVWF  49
1B76:  MOVLP  08
1B77:  MOVLB  00
1B78:  CALL   621
1B79:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1B7A:  MOVLB  0F
1B7B:  MOVF   67,W
1B7C:  MOVLB  13
1B7D:  MOVWF  49
1B7E:  MOVLW  01
1B7F:  MOVWF  4A
1B80:  MOVWF  4C
1B81:  CLRF   4B
1B82:  MOVLP  08
1B83:  MOVLB  00
1B84:  CALL   104
1B85:  MOVLP  18
1B86:  MOVLB  0F
1B87:  MOVF   67,W
1B88:  MOVLB  13
1B89:  MOVWF  49
1B8A:  CLRF   4A
1B8B:  CLRF   4C
1B8C:  MOVLW  80
1B8D:  MOVWF  4B
1B8E:  MOVLP  08
1B8F:  MOVLB  00
1B90:  CALL   104
1B91:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1B92:  MOVLB  0F
1B93:  MOVF   67,W
1B94:  MOVLB  13
1B95:  MOVWF  49
1B96:  CLRF   4A
1B97:  MOVLW  01
1B98:  MOVWF  4C
1B99:  CLRF   4B
1B9A:  MOVLP  08
1B9B:  MOVLB  00
1B9C:  CALL   104
1B9D:  MOVLP  18
1B9E:  MOVLB  0F
1B9F:  MOVF   67,W
1BA0:  MOVLB  13
1BA1:  MOVWF  49
1BA2:  CLRF   4A
1BA3:  CLRF   4C
1BA4:  MOVLW  80
1BA5:  MOVWF  4B
1BA6:  MOVLP  08
1BA7:  MOVLB  00
1BA8:  CALL   104
1BA9:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1BAA:  MOVLB  0F
1BAB:  MOVF   68,W
1BAC:  MOVLB  13
1BAD:  MOVWF  46
1BAE:  MOVLB  0F
1BAF:  MOVF   67,W
1BB0:  MOVLB  13
1BB1:  MOVWF  45
1BB2:  MOVLB  0F
1BB3:  MOVF   66,W
1BB4:  MOVLB  13
1BB5:  MOVWF  44
1BB6:  MOVLB  0F
1BB7:  MOVF   65,W
1BB8:  MOVLB  13
1BB9:  MOVWF  43
1BBA:  MOVLW  25
1BBB:  MOVWF  48
1BBC:  MOVLW  03
1BBD:  MOVWF  47
1BBE:  CLRF   4A
1BBF:  MOVLW  05
1BC0:  MOVWF  49
1BC1:  MOVLP  08
1BC2:  MOVLB  00
1BC3:  CALL   621
1BC4:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1BC5:  MOVLB  0F
1BC6:  MOVF   67,W
1BC7:  MOVLB  13
1BC8:  MOVWF  49
1BC9:  MOVLW  01
1BCA:  MOVWF  4A
1BCB:  MOVWF  4C
1BCC:  CLRF   4B
1BCD:  MOVLP  08
1BCE:  MOVLB  00
1BCF:  CALL   104
1BD0:  MOVLP  18
1BD1:  MOVLB  0F
1BD2:  MOVF   67,W
1BD3:  MOVLB  13
1BD4:  MOVWF  49
1BD5:  CLRF   4A
1BD6:  CLRF   4C
1BD7:  MOVLW  80
1BD8:  MOVWF  4B
1BD9:  MOVLP  08
1BDA:  MOVLB  00
1BDB:  CALL   104
1BDC:  MOVLP  18
....................    }
1BDD:  MOVLB  0F
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1BDE:  MOVLB  10
1BDF:  CLRF   28
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
1BE0:  MOVLB  0F
1BE1:  MOVF   68,W
1BE2:  MOVLB  13
1BE3:  MOVWF  46
1BE4:  MOVLB  0F
1BE5:  MOVF   67,W
1BE6:  MOVLB  13
1BE7:  MOVWF  45
1BE8:  MOVLB  0F
1BE9:  MOVF   66,W
1BEA:  MOVLB  13
1BEB:  MOVWF  44
1BEC:  MOVLB  0F
1BED:  MOVF   65,W
1BEE:  MOVLB  13
1BEF:  MOVWF  43
1BF0:  MOVLP  08
1BF1:  MOVLB  00
1BF2:  CALL   71D
1BF3:  MOVLP  18
1BF4:  MOVF   78,W
1BF5:  ANDLW  01
1BF6:  SUBLW  01
1BF7:  BTFSS  03.2
1BF8:  GOTO   418
....................       if(timeout_counter > 10)
1BF9:  MOVLB  10
1BFA:  MOVF   28,W
1BFB:  SUBLW  0A
1BFC:  BTFSC  03.0
1BFD:  GOTO   407
....................          delay_ms(200);
1BFE:  MOVLW  C8
1BFF:  MOVLB  13
1C00:  MOVWF  43
1C01:  MOVLP  08
1C02:  MOVLB  00
1C03:  CALL   763
1C04:  MOVLP  18
1C05:  GOTO   40E
1C06:  MOVLB  10
....................       else
....................          delay_ms(10);   
1C07:  MOVLW  0A
1C08:  MOVLB  13
1C09:  MOVWF  43
1C0A:  MOVLP  08
1C0B:  MOVLB  00
1C0C:  CALL   763
1C0D:  MOVLP  18
....................       
....................       if(timeout_counter > 100){
1C0E:  MOVLB  10
1C0F:  MOVF   28,W
1C10:  SUBLW  64
1C11:  BTFSC  03.0
1C12:  GOTO   416
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1C13:  MOVLB  00
1C14:  GOTO   418
1C15:  MOVLB  10
....................       }  
....................       timeout_counter++;
1C16:  INCF   28,F
1C17:  GOTO   3E0
1C18:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
1C19:  RETURN
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1199:  MOVLB  11
119A:  MOVF   6C,F
119B:  BTFSS  03.2
119C:  GOTO   24C
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
119D:  MOVLW  06
119E:  MOVWF  6F
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
119F:  MOVLW  20
11A0:  MOVLB  12
11A1:  MOVWF  24
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
11A2:  CLRF   32
11A3:  CLRF   33
11A4:  CLRF   78
11A5:  CLRF   79
11A6:  CLRF   7A
11A7:  MOVF   22,W
11A8:  MOVWF  25
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
11A9:  CLRF   33
11AA:  CLRF   78
11AB:  CLRF   79
11AC:  CLRF   7A
11AD:  MOVF   21,W
11AE:  MOVWF  26
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
11AF:  CLRF   78
11B0:  CLRF   79
11B1:  CLRF   7A
11B2:  MOVF   20,W
11B3:  MOVWF  27
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
11B4:  MOVLB  11
11B5:  MOVF   6D,W
11B6:  MOVLB  13
11B7:  MOVWF  49
11B8:  CLRF   4A
11B9:  MOVLW  01
11BA:  MOVWF  4C
11BB:  CLRF   4B
11BC:  MOVLP  08
11BD:  MOVLB  00
11BE:  CALL   104
11BF:  MOVLP  10
11C0:  MOVLB  11
11C1:  MOVF   6D,W
11C2:  MOVLB  13
11C3:  MOVWF  49
11C4:  CLRF   4A
11C5:  CLRF   4C
11C6:  MOVLW  80
11C7:  MOVWF  4B
11C8:  MOVLP  08
11C9:  MOVLB  00
11CA:  CALL   104
11CB:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
11CC:  MOVLB  11
11CD:  MOVF   6E,W
11CE:  MOVLB  13
11CF:  MOVWF  46
11D0:  MOVLB  11
11D1:  MOVF   6D,W
11D2:  MOVLB  13
11D3:  MOVWF  45
11D4:  MOVLB  11
11D5:  MOVF   6C,W
11D6:  MOVLB  13
11D7:  MOVWF  44
11D8:  MOVLB  11
11D9:  MOVF   6B,W
11DA:  MOVLB  13
11DB:  MOVWF  43
11DC:  MOVLW  25
11DD:  MOVWF  48
11DE:  MOVLW  9F
11DF:  MOVWF  47
11E0:  CLRF   4A
11E1:  MOVLW  01
11E2:  MOVWF  49
11E3:  MOVLP  08
11E4:  MOVLB  00
11E5:  CALL   621
11E6:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
11E7:  MOVLB  11
11E8:  MOVF   6D,W
11E9:  MOVLB  13
11EA:  MOVWF  49
11EB:  MOVLW  01
11EC:  MOVWF  4A
11ED:  MOVWF  4C
11EE:  CLRF   4B
11EF:  MOVLP  08
11F0:  MOVLB  00
11F1:  CALL   104
11F2:  MOVLP  10
11F3:  MOVLB  11
11F4:  MOVF   6D,W
11F5:  MOVLB  13
11F6:  MOVWF  49
11F7:  CLRF   4A
11F8:  CLRF   4C
11F9:  MOVLW  80
11FA:  MOVWF  4B
11FB:  MOVLP  08
11FC:  MOVLB  00
11FD:  CALL   104
11FE:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
11FF:  MOVLB  11
1200:  MOVF   6D,W
1201:  MOVLB  13
1202:  MOVWF  49
1203:  CLRF   4A
1204:  MOVLW  01
1205:  MOVWF  4C
1206:  CLRF   4B
1207:  MOVLP  08
1208:  MOVLB  00
1209:  CALL   104
120A:  MOVLP  10
120B:  MOVLB  11
120C:  MOVF   6D,W
120D:  MOVLB  13
120E:  MOVWF  49
120F:  CLRF   4A
1210:  CLRF   4C
1211:  MOVLW  80
1212:  MOVWF  4B
1213:  MOVLP  08
1214:  MOVLB  00
1215:  CALL   104
1216:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1217:  MOVLB  11
1218:  MOVF   6E,W
1219:  MOVLB  13
121A:  MOVWF  46
121B:  MOVLB  11
121C:  MOVF   6D,W
121D:  MOVLB  13
121E:  MOVWF  45
121F:  MOVLB  11
1220:  MOVF   6C,W
1221:  MOVLB  13
1222:  MOVWF  44
1223:  MOVLB  11
1224:  MOVF   6B,W
1225:  MOVLB  13
1226:  MOVWF  43
1227:  MOVLW  25
1228:  MOVWF  48
1229:  MOVLW  A4
122A:  MOVWF  47
122B:  CLRF   4A
122C:  MOVLW  04
122D:  MOVWF  49
122E:  MOVLP  08
122F:  MOVLB  00
1230:  CALL   621
1231:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1232:  MOVLB  11
1233:  MOVF   6D,W
1234:  MOVLB  13
1235:  MOVWF  49
1236:  MOVLW  01
1237:  MOVWF  4A
1238:  MOVWF  4C
1239:  CLRF   4B
123A:  MOVLP  08
123B:  MOVLB  00
123C:  CALL   104
123D:  MOVLP  10
123E:  MOVLB  11
123F:  MOVF   6D,W
1240:  MOVLB  13
1241:  MOVWF  49
1242:  CLRF   4A
1243:  CLRF   4C
1244:  MOVLW  80
1245:  MOVWF  4B
1246:  MOVLP  08
1247:  MOVLB  00
1248:  CALL   104
1249:  MOVLP  10
....................    }
124A:  GOTO   303
124B:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
124C:  DECFSZ 6C,W
124D:  GOTO   304
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
124E:  MOVLW  06
124F:  MOVLB  12
1250:  MOVWF  28
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
1251:  MOVLW  21
1252:  MOVWF  29
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1253:  CLRF   31
1254:  CLRF   32
1255:  CLRF   33
1256:  CLRF   78
1257:  CLRF   79
1258:  CLRF   7A
1259:  MOVF   23,W
125A:  MOVWF  2A
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
125B:  CLRF   32
125C:  CLRF   33
125D:  CLRF   78
125E:  CLRF   79
125F:  CLRF   7A
1260:  MOVF   22,W
1261:  MOVWF  2B
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1262:  CLRF   33
1263:  CLRF   78
1264:  CLRF   79
1265:  CLRF   7A
1266:  MOVF   21,W
1267:  MOVWF  2C
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
1268:  CLRF   78
1269:  CLRF   79
126A:  CLRF   7A
126B:  MOVF   20,W
126C:  MOVWF  2D
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
126D:  MOVLB  11
126E:  MOVF   6D,W
126F:  MOVLB  13
1270:  MOVWF  49
1271:  CLRF   4A
1272:  MOVLW  01
1273:  MOVWF  4C
1274:  CLRF   4B
1275:  MOVLP  08
1276:  MOVLB  00
1277:  CALL   104
1278:  MOVLP  10
1279:  MOVLB  11
127A:  MOVF   6D,W
127B:  MOVLB  13
127C:  MOVWF  49
127D:  CLRF   4A
127E:  CLRF   4C
127F:  MOVLW  80
1280:  MOVWF  4B
1281:  MOVLP  08
1282:  MOVLB  00
1283:  CALL   104
1284:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1285:  MOVLB  11
1286:  MOVF   6E,W
1287:  MOVLB  13
1288:  MOVWF  46
1289:  MOVLB  11
128A:  MOVF   6D,W
128B:  MOVLB  13
128C:  MOVWF  45
128D:  MOVLB  11
128E:  MOVF   6C,W
128F:  MOVLB  13
1290:  MOVWF  44
1291:  MOVLB  11
1292:  MOVF   6B,W
1293:  MOVLB  13
1294:  MOVWF  43
1295:  MOVLW  25
1296:  MOVWF  48
1297:  MOVLW  A8
1298:  MOVWF  47
1299:  CLRF   4A
129A:  MOVLW  01
129B:  MOVWF  49
129C:  MOVLP  08
129D:  MOVLB  00
129E:  CALL   621
129F:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
12A0:  MOVLB  11
12A1:  MOVF   6D,W
12A2:  MOVLB  13
12A3:  MOVWF  49
12A4:  MOVLW  01
12A5:  MOVWF  4A
12A6:  MOVWF  4C
12A7:  CLRF   4B
12A8:  MOVLP  08
12A9:  MOVLB  00
12AA:  CALL   104
12AB:  MOVLP  10
12AC:  MOVLB  11
12AD:  MOVF   6D,W
12AE:  MOVLB  13
12AF:  MOVWF  49
12B0:  CLRF   4A
12B1:  CLRF   4C
12B2:  MOVLW  80
12B3:  MOVWF  4B
12B4:  MOVLP  08
12B5:  MOVLB  00
12B6:  CALL   104
12B7:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
12B8:  MOVLB  11
12B9:  MOVF   6D,W
12BA:  MOVLB  13
12BB:  MOVWF  49
12BC:  CLRF   4A
12BD:  MOVLW  01
12BE:  MOVWF  4C
12BF:  CLRF   4B
12C0:  MOVLP  08
12C1:  MOVLB  00
12C2:  CALL   104
12C3:  MOVLP  10
12C4:  MOVLB  11
12C5:  MOVF   6D,W
12C6:  MOVLB  13
12C7:  MOVWF  49
12C8:  CLRF   4A
12C9:  CLRF   4C
12CA:  MOVLW  80
12CB:  MOVWF  4B
12CC:  MOVLP  08
12CD:  MOVLB  00
12CE:  CALL   104
12CF:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
12D0:  MOVLB  11
12D1:  MOVF   6E,W
12D2:  MOVLB  13
12D3:  MOVWF  46
12D4:  MOVLB  11
12D5:  MOVF   6D,W
12D6:  MOVLB  13
12D7:  MOVWF  45
12D8:  MOVLB  11
12D9:  MOVF   6C,W
12DA:  MOVLB  13
12DB:  MOVWF  44
12DC:  MOVLB  11
12DD:  MOVF   6B,W
12DE:  MOVLB  13
12DF:  MOVWF  43
12E0:  MOVLW  25
12E1:  MOVWF  48
12E2:  MOVLW  A9
12E3:  MOVWF  47
12E4:  CLRF   4A
12E5:  MOVLW  05
12E6:  MOVWF  49
12E7:  MOVLP  08
12E8:  MOVLB  00
12E9:  CALL   621
12EA:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
12EB:  MOVLB  11
12EC:  MOVF   6D,W
12ED:  MOVLB  13
12EE:  MOVWF  49
12EF:  MOVLW  01
12F0:  MOVWF  4A
12F1:  MOVWF  4C
12F2:  CLRF   4B
12F3:  MOVLP  08
12F4:  MOVLB  00
12F5:  CALL   104
12F6:  MOVLP  10
12F7:  MOVLB  11
12F8:  MOVF   6D,W
12F9:  MOVLB  13
12FA:  MOVWF  49
12FB:  CLRF   4A
12FC:  CLRF   4C
12FD:  MOVLW  80
12FE:  MOVWF  4B
12FF:  MOVLP  08
1300:  MOVLB  00
1301:  CALL   104
1302:  MOVLP  10
....................    }
1303:  MOVLB  11
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1304:  MOVLB  12
1305:  CLRF   2E
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1306:  MOVLB  11
1307:  MOVF   6E,W
1308:  MOVLB  13
1309:  MOVWF  46
130A:  MOVLB  11
130B:  MOVF   6D,W
130C:  MOVLB  13
130D:  MOVWF  45
130E:  MOVLB  11
130F:  MOVF   6C,W
1310:  MOVLB  13
1311:  MOVWF  44
1312:  MOVLB  11
1313:  MOVF   6B,W
1314:  MOVLB  13
1315:  MOVWF  43
1316:  MOVLP  08
1317:  MOVLB  00
1318:  CALL   71D
1319:  MOVLP  10
131A:  MOVF   78,W
131B:  ANDLW  01
131C:  SUBLW  01
131D:  BTFSS  03.2
131E:  GOTO   33E
....................       if(timeout_counter > 10)
131F:  MOVLB  12
1320:  MOVF   2E,W
1321:  SUBLW  0A
1322:  BTFSC  03.0
1323:  GOTO   32D
....................          delay_ms(200);
1324:  MOVLW  C8
1325:  MOVLB  13
1326:  MOVWF  43
1327:  MOVLP  08
1328:  MOVLB  00
1329:  CALL   763
132A:  MOVLP  10
132B:  GOTO   334
132C:  MOVLB  12
....................       else
....................          delay_ms(10);   
132D:  MOVLW  0A
132E:  MOVLB  13
132F:  MOVWF  43
1330:  MOVLP  08
1331:  MOVLB  00
1332:  CALL   763
1333:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
1334:  MOVLB  12
1335:  MOVF   2E,W
1336:  SUBLW  64
1337:  BTFSC  03.0
1338:  GOTO   33C
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1339:  MOVLB  00
133A:  GOTO   33E
133B:  MOVLB  12
....................       }  
....................       timeout_counter++;
133C:  INCF   2E,F
133D:  GOTO   306
133E:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
133F:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2C0D:  MOVLB  11
2C0E:  MOVF   50,F
2C0F:  BTFSS  03.2
2C10:  GOTO   47F
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
2C11:  MOVLW  03
2C12:  MOVWF  58
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2C13:  CLRF   64
2C14:  CLRF   65
2C15:  CLRF   78
2C16:  CLRF   79
2C17:  CLRF   7A
2C18:  MOVF   55,W
2C19:  MOVWF  59
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2C1A:  CLRF   65
2C1B:  CLRF   78
2C1C:  CLRF   79
2C1D:  CLRF   7A
2C1E:  MOVF   54,W
2C1F:  MOVWF  5A
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2C20:  CLRF   78
2C21:  CLRF   79
2C22:  CLRF   7A
2C23:  MOVF   53,W
2C24:  MOVWF  5B
....................             
....................       output_low(flash_stream.cs_pin);
2C25:  MOVF   51,W
2C26:  MOVLB  13
2C27:  MOVWF  49
2C28:  CLRF   4A
2C29:  MOVLW  01
2C2A:  MOVWF  4C
2C2B:  CLRF   4B
2C2C:  MOVLP  08
2C2D:  MOVLB  00
2C2E:  CALL   104
2C2F:  MOVLP  28
2C30:  MOVLB  11
2C31:  MOVF   51,W
2C32:  MOVLB  13
2C33:  MOVWF  49
2C34:  CLRF   4A
2C35:  CLRF   4C
2C36:  MOVLW  80
2C37:  MOVWF  4B
2C38:  MOVLP  08
2C39:  MOVLB  00
2C3A:  CALL   104
2C3B:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
2C3C:  MOVLB  11
2C3D:  MOVF   52,W
2C3E:  MOVLB  13
2C3F:  MOVWF  4C
2C40:  MOVLB  11
2C41:  MOVF   51,W
2C42:  MOVLB  13
2C43:  MOVWF  4B
2C44:  MOVLB  11
2C45:  MOVF   50,W
2C46:  MOVLB  13
2C47:  MOVWF  4A
2C48:  MOVLB  11
2C49:  MOVF   4F,W
2C4A:  MOVLB  13
2C4B:  MOVWF  49
2C4C:  MOVLW  25
2C4D:  MOVWF  4E
2C4E:  MOVLW  88
2C4F:  MOVWF  4D
2C50:  CLRF   50
2C51:  MOVLW  04
2C52:  MOVWF  4F
2C53:  MOVLW  25
2C54:  MOVWF  52
2C55:  MOVLW  87
2C56:  MOVWF  51
2C57:  CLRF   56
2C58:  CLRF   55
2C59:  CLRF   54
2C5A:  MOVLW  01
2C5B:  MOVWF  53
2C5C:  MOVLP  08
2C5D:  MOVLB  00
2C5E:  CALL   133
2C5F:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2C60:  MOVLW  02
2C61:  MOVWF  77
2C62:  DECFSZ 77,F
2C63:  GOTO   462
2C64:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2C65:  MOVLB  11
2C66:  MOVF   51,W
2C67:  MOVLB  13
2C68:  MOVWF  49
2C69:  MOVLW  01
2C6A:  MOVWF  4A
2C6B:  MOVWF  4C
2C6C:  CLRF   4B
2C6D:  MOVLP  08
2C6E:  MOVLB  00
2C6F:  CALL   104
2C70:  MOVLP  28
2C71:  MOVLB  11
2C72:  MOVF   51,W
2C73:  MOVLB  13
2C74:  MOVWF  49
2C75:  CLRF   4A
2C76:  CLRF   4C
2C77:  MOVLW  80
2C78:  MOVWF  4B
2C79:  MOVLP  08
2C7A:  MOVLB  00
2C7B:  CALL   104
2C7C:  MOVLP  28
....................    }
2C7D:  GOTO   4F5
2C7E:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
2C7F:  DECFSZ 50,W
2C80:  GOTO   4F6
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
2C81:  MOVLW  13
2C82:  MOVWF  5C
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
2C83:  CLRF   63
2C84:  CLRF   64
2C85:  CLRF   65
2C86:  CLRF   78
2C87:  CLRF   79
2C88:  CLRF   7A
2C89:  MOVF   56,W
2C8A:  MOVWF  5D
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2C8B:  CLRF   64
2C8C:  CLRF   65
2C8D:  CLRF   78
2C8E:  CLRF   79
2C8F:  CLRF   7A
2C90:  MOVF   55,W
2C91:  MOVWF  5E
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2C92:  CLRF   65
2C93:  CLRF   78
2C94:  CLRF   79
2C95:  CLRF   7A
2C96:  MOVF   54,W
2C97:  MOVWF  5F
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2C98:  CLRF   78
2C99:  CLRF   79
2C9A:  CLRF   7A
2C9B:  MOVF   53,W
2C9C:  MOVWF  60
....................    
....................       output_low(flash_stream.cs_pin);
2C9D:  MOVF   51,W
2C9E:  MOVLB  13
2C9F:  MOVWF  49
2CA0:  CLRF   4A
2CA1:  MOVLW  01
2CA2:  MOVWF  4C
2CA3:  CLRF   4B
2CA4:  MOVLP  08
2CA5:  MOVLB  00
2CA6:  CALL   104
2CA7:  MOVLP  28
2CA8:  MOVLB  11
2CA9:  MOVF   51,W
2CAA:  MOVLB  13
2CAB:  MOVWF  49
2CAC:  CLRF   4A
2CAD:  CLRF   4C
2CAE:  MOVLW  80
2CAF:  MOVWF  4B
2CB0:  MOVLP  08
2CB1:  MOVLB  00
2CB2:  CALL   104
2CB3:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
2CB4:  MOVLB  11
2CB5:  MOVF   52,W
2CB6:  MOVLB  13
2CB7:  MOVWF  4C
2CB8:  MOVLB  11
2CB9:  MOVF   51,W
2CBA:  MOVLB  13
2CBB:  MOVWF  4B
2CBC:  MOVLB  11
2CBD:  MOVF   50,W
2CBE:  MOVLB  13
2CBF:  MOVWF  4A
2CC0:  MOVLB  11
2CC1:  MOVF   4F,W
2CC2:  MOVLB  13
2CC3:  MOVWF  49
2CC4:  MOVLW  25
2CC5:  MOVWF  4E
2CC6:  MOVLW  8C
2CC7:  MOVWF  4D
2CC8:  CLRF   50
2CC9:  MOVLW  05
2CCA:  MOVWF  4F
2CCB:  MOVLW  25
2CCC:  MOVWF  52
2CCD:  MOVLW  87
2CCE:  MOVWF  51
2CCF:  CLRF   56
2CD0:  CLRF   55
2CD1:  CLRF   54
2CD2:  MOVLW  01
2CD3:  MOVWF  53
2CD4:  MOVLP  08
2CD5:  MOVLB  00
2CD6:  CALL   133
2CD7:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2CD8:  MOVLW  02
2CD9:  MOVWF  77
2CDA:  DECFSZ 77,F
2CDB:  GOTO   4DA
2CDC:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2CDD:  MOVLB  11
2CDE:  MOVF   51,W
2CDF:  MOVLB  13
2CE0:  MOVWF  49
2CE1:  MOVLW  01
2CE2:  MOVWF  4A
2CE3:  MOVWF  4C
2CE4:  CLRF   4B
2CE5:  MOVLP  08
2CE6:  MOVLB  00
2CE7:  CALL   104
2CE8:  MOVLP  28
2CE9:  MOVLB  11
2CEA:  MOVF   51,W
2CEB:  MOVLB  13
2CEC:  MOVWF  49
2CED:  CLRF   4A
2CEE:  CLRF   4C
2CEF:  MOVLW  80
2CF0:  MOVWF  4B
2CF1:  MOVLP  08
2CF2:  MOVLB  00
2CF3:  CALL   104
2CF4:  MOVLP  28
2CF5:  MOVLB  11
....................    }
....................    return read_data;
2CF6:  MOVF   57,W
2CF7:  MOVWF  78
2CF8:  MOVLP  30
2CF9:  MOVLB  00
2CFA:  GOTO   2BE (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0A60:  MOVLB  13
0A61:  MOVF   28,F
0A62:  BTFSS  03.2
0A63:  GOTO   2C0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0A64:  MOVLW  03
0A65:  MOVWF  35
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A66:  CLRF   41
0A67:  CLRF   42
0A68:  CLRF   78
0A69:  CLRF   79
0A6A:  CLRF   7A
0A6B:  MOVF   2D,W
0A6C:  MOVWF  36
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A6D:  CLRF   42
0A6E:  CLRF   78
0A6F:  CLRF   79
0A70:  CLRF   7A
0A71:  MOVF   2C,W
0A72:  MOVWF  37
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0A73:  CLRF   78
0A74:  CLRF   79
0A75:  CLRF   7A
0A76:  MOVF   2B,W
0A77:  MOVWF  38
....................             
....................       output_low(flash_stream.cs_pin);
0A78:  MOVF   29,W
0A79:  MOVWF  49
0A7A:  CLRF   4A
0A7B:  MOVLW  01
0A7C:  MOVWF  4C
0A7D:  CLRF   4B
0A7E:  MOVLB  00
0A7F:  CALL   104
0A80:  MOVLB  13
0A81:  MOVF   29,W
0A82:  MOVWF  49
0A83:  CLRF   4A
0A84:  CLRF   4C
0A85:  MOVLW  80
0A86:  MOVWF  4B
0A87:  MOVLB  00
0A88:  CALL   104
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0A89:  MOVLB  13
0A8A:  MOVF   2A,W
0A8B:  MOVWF  4C
0A8C:  MOVF   29,W
0A8D:  MOVWF  4B
0A8E:  MOVF   28,W
0A8F:  MOVWF  4A
0A90:  MOVF   27,W
0A91:  MOVWF  49
0A92:  MOVLW  26
0A93:  MOVWF  4E
0A94:  MOVLW  05
0A95:  MOVWF  4D
0A96:  CLRF   50
0A97:  MOVLW  04
0A98:  MOVWF  4F
0A99:  MOVF   30,W
0A9A:  MOVWF  52
0A9B:  MOVF   2F,W
0A9C:  MOVWF  51
0A9D:  MOVF   34,W
0A9E:  MOVWF  56
0A9F:  MOVF   33,W
0AA0:  MOVWF  55
0AA1:  MOVF   32,W
0AA2:  MOVWF  54
0AA3:  MOVF   31,W
0AA4:  MOVWF  53
0AA5:  MOVLB  00
0AA6:  CALL   133
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0AA7:  MOVLW  02
0AA8:  MOVWF  77
0AA9:  DECFSZ 77,F
0AAA:  GOTO   2A9
0AAB:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0AAC:  MOVLB  13
0AAD:  MOVF   29,W
0AAE:  MOVWF  49
0AAF:  MOVLW  01
0AB0:  MOVWF  4A
0AB1:  MOVWF  4C
0AB2:  CLRF   4B
0AB3:  MOVLB  00
0AB4:  CALL   104
0AB5:  MOVLB  13
0AB6:  MOVF   29,W
0AB7:  MOVWF  49
0AB8:  CLRF   4A
0AB9:  CLRF   4C
0ABA:  MOVLW  80
0ABB:  MOVWF  4B
0ABC:  MOVLB  00
0ABD:  CALL   104
....................    }
0ABE:  GOTO   324
0ABF:  MOVLB  13
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0AC0:  DECFSZ 28,W
0AC1:  GOTO   325
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0AC2:  MOVLW  13
0AC3:  MOVWF  39
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0AC4:  CLRF   40
0AC5:  CLRF   41
0AC6:  CLRF   42
0AC7:  CLRF   78
0AC8:  CLRF   79
0AC9:  CLRF   7A
0ACA:  MOVF   2E,W
0ACB:  MOVWF  3A
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0ACC:  CLRF   41
0ACD:  CLRF   42
0ACE:  CLRF   78
0ACF:  CLRF   79
0AD0:  CLRF   7A
0AD1:  MOVF   2D,W
0AD2:  MOVWF  3B
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0AD3:  CLRF   42
0AD4:  CLRF   78
0AD5:  CLRF   79
0AD6:  CLRF   7A
0AD7:  MOVF   2C,W
0AD8:  MOVWF  3C
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0AD9:  CLRF   78
0ADA:  CLRF   79
0ADB:  CLRF   7A
0ADC:  MOVF   2B,W
0ADD:  MOVWF  3D
....................    
....................       output_low(flash_stream.cs_pin);
0ADE:  MOVF   29,W
0ADF:  MOVWF  49
0AE0:  CLRF   4A
0AE1:  MOVLW  01
0AE2:  MOVWF  4C
0AE3:  CLRF   4B
0AE4:  MOVLB  00
0AE5:  CALL   104
0AE6:  MOVLB  13
0AE7:  MOVF   29,W
0AE8:  MOVWF  49
0AE9:  CLRF   4A
0AEA:  CLRF   4C
0AEB:  MOVLW  80
0AEC:  MOVWF  4B
0AED:  MOVLB  00
0AEE:  CALL   104
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0AEF:  MOVLB  13
0AF0:  MOVF   2A,W
0AF1:  MOVWF  4C
0AF2:  MOVF   29,W
0AF3:  MOVWF  4B
0AF4:  MOVF   28,W
0AF5:  MOVWF  4A
0AF6:  MOVF   27,W
0AF7:  MOVWF  49
0AF8:  MOVLW  26
0AF9:  MOVWF  4E
0AFA:  MOVLW  09
0AFB:  MOVWF  4D
0AFC:  CLRF   50
0AFD:  MOVLW  05
0AFE:  MOVWF  4F
0AFF:  MOVF   30,W
0B00:  MOVWF  52
0B01:  MOVF   2F,W
0B02:  MOVWF  51
0B03:  MOVF   34,W
0B04:  MOVWF  56
0B05:  MOVF   33,W
0B06:  MOVWF  55
0B07:  MOVF   32,W
0B08:  MOVWF  54
0B09:  MOVF   31,W
0B0A:  MOVWF  53
0B0B:  MOVLB  00
0B0C:  CALL   133
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0B0D:  MOVLW  02
0B0E:  MOVWF  77
0B0F:  DECFSZ 77,F
0B10:  GOTO   30F
0B11:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0B12:  MOVLB  13
0B13:  MOVF   29,W
0B14:  MOVWF  49
0B15:  MOVLW  01
0B16:  MOVWF  4A
0B17:  MOVWF  4C
0B18:  CLRF   4B
0B19:  MOVLB  00
0B1A:  CALL   104
0B1B:  MOVLB  13
0B1C:  MOVF   29,W
0B1D:  MOVWF  49
0B1E:  CLRF   4A
0B1F:  CLRF   4C
0B20:  MOVLW  80
0B21:  MOVWF  4B
0B22:  MOVLB  00
0B23:  CALL   104
0B24:  MOVLB  13
....................    }
....................    return;
0B25:  MOVLB  00
0B26:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
33C9:  MOVLB  11
33CA:  MOVF   44,F
33CB:  BTFSS  03.2
33CC:  GOTO   48B
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
33CD:  MOVLW  06
33CE:  MOVWF  4C
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
33CF:  MOVLW  02
33D0:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
33D1:  MOVF   49,W
33D2:  MOVWF  5D
33D3:  MOVF   4A,W
33D4:  MOVWF  5E
33D5:  CLRF   5F
33D6:  CLRF   60
33D7:  CLRF   78
33D8:  CLRF   79
33D9:  CLRF   7A
33DA:  MOVF   5D,W
33DB:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
33DC:  MOVF   48,W
33DD:  MOVWF  5D
33DE:  MOVF   49,W
33DF:  MOVWF  5E
33E0:  MOVF   4A,W
33E1:  MOVWF  5F
33E2:  CLRF   60
33E3:  CLRF   78
33E4:  CLRF   79
33E5:  CLRF   7A
33E6:  MOVF   5D,W
33E7:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
33E8:  CLRF   78
33E9:  CLRF   79
33EA:  CLRF   7A
33EB:  MOVF   47,W
33EC:  MOVWF  50
....................       flash_cmd[4] = write_data;
33ED:  MOVF   4B,W
33EE:  MOVWF  51
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
33EF:  MOVF   45,W
33F0:  MOVLB  13
33F1:  MOVWF  49
33F2:  CLRF   4A
33F3:  MOVLW  01
33F4:  MOVWF  4C
33F5:  CLRF   4B
33F6:  MOVLP  08
33F7:  MOVLB  00
33F8:  CALL   104
33F9:  MOVLP  30
33FA:  MOVLB  11
33FB:  MOVF   45,W
33FC:  MOVLB  13
33FD:  MOVWF  49
33FE:  CLRF   4A
33FF:  CLRF   4C
3400:  MOVLW  80
3401:  MOVWF  4B
3402:  MOVLP  08
3403:  MOVLB  00
3404:  CALL   104
3405:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
3406:  MOVLB  11
3407:  MOVF   46,W
3408:  MOVLB  13
3409:  MOVWF  46
340A:  MOVLB  11
340B:  MOVF   45,W
340C:  MOVLB  13
340D:  MOVWF  45
340E:  MOVLB  11
340F:  MOVF   44,W
3410:  MOVLB  13
3411:  MOVWF  44
3412:  MOVLB  11
3413:  MOVF   43,W
3414:  MOVLB  13
3415:  MOVWF  43
3416:  MOVLW  25
3417:  MOVWF  48
3418:  MOVLW  7C
3419:  MOVWF  47
341A:  CLRF   4A
341B:  MOVLW  01
341C:  MOVWF  49
341D:  MOVLP  08
341E:  MOVLB  00
341F:  CALL   621
3420:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3421:  MOVLB  11
3422:  MOVF   45,W
3423:  MOVLB  13
3424:  MOVWF  49
3425:  MOVLW  01
3426:  MOVWF  4A
3427:  MOVWF  4C
3428:  CLRF   4B
3429:  MOVLP  08
342A:  MOVLB  00
342B:  CALL   104
342C:  MOVLP  30
342D:  MOVLB  11
342E:  MOVF   45,W
342F:  MOVLB  13
3430:  MOVWF  49
3431:  CLRF   4A
3432:  CLRF   4C
3433:  MOVLW  80
3434:  MOVWF  4B
3435:  MOVLP  08
3436:  MOVLB  00
3437:  CALL   104
3438:  MOVLP  30
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
3439:  MOVLB  11
343A:  MOVF   45,W
343B:  MOVLB  13
343C:  MOVWF  49
343D:  CLRF   4A
343E:  MOVLW  01
343F:  MOVWF  4C
3440:  CLRF   4B
3441:  MOVLP  08
3442:  MOVLB  00
3443:  CALL   104
3444:  MOVLP  30
3445:  MOVLB  11
3446:  MOVF   45,W
3447:  MOVLB  13
3448:  MOVWF  49
3449:  CLRF   4A
344A:  CLRF   4C
344B:  MOVLW  80
344C:  MOVWF  4B
344D:  MOVLP  08
344E:  MOVLB  00
344F:  CALL   104
3450:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
3451:  MOVLB  11
3452:  MOVF   46,W
3453:  MOVLB  13
3454:  MOVWF  46
3455:  MOVLB  11
3456:  MOVF   45,W
3457:  MOVLB  13
3458:  MOVWF  45
3459:  MOVLB  11
345A:  MOVF   44,W
345B:  MOVLB  13
345C:  MOVWF  44
345D:  MOVLB  11
345E:  MOVF   43,W
345F:  MOVLB  13
3460:  MOVWF  43
3461:  MOVLW  25
3462:  MOVWF  48
3463:  MOVLW  7D
3464:  MOVWF  47
3465:  CLRF   4A
3466:  MOVLW  05
3467:  MOVWF  49
3468:  MOVLP  08
3469:  MOVLB  00
346A:  CALL   621
346B:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
346C:  MOVLW  02
346D:  MOVWF  77
346E:  DECFSZ 77,F
346F:  GOTO   46E
3470:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
3471:  MOVLB  11
3472:  MOVF   45,W
3473:  MOVLB  13
3474:  MOVWF  49
3475:  MOVLW  01
3476:  MOVWF  4A
3477:  MOVWF  4C
3478:  CLRF   4B
3479:  MOVLP  08
347A:  MOVLB  00
347B:  CALL   104
347C:  MOVLP  30
347D:  MOVLB  11
347E:  MOVF   45,W
347F:  MOVLB  13
3480:  MOVWF  49
3481:  CLRF   4A
3482:  CLRF   4C
3483:  MOVLW  80
3484:  MOVWF  4B
3485:  MOVLP  08
3486:  MOVLB  00
3487:  CALL   104
3488:  MOVLP  30
....................    }
3489:  GOTO   553
348A:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
348B:  DECFSZ 44,W
348C:  GOTO   554
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
348D:  MOVLW  06
348E:  MOVWF  52
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
348F:  MOVLW  12
3490:  MOVWF  53
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
3491:  MOVF   4A,W
3492:  MOVWF  5D
3493:  CLRF   5E
3494:  CLRF   5F
3495:  CLRF   60
3496:  CLRF   78
3497:  CLRF   79
3498:  CLRF   7A
3499:  MOVF   5D,W
349A:  MOVWF  54
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
349B:  MOVF   49,W
349C:  MOVWF  5D
349D:  MOVF   4A,W
349E:  MOVWF  5E
349F:  CLRF   5F
34A0:  CLRF   60
34A1:  CLRF   78
34A2:  CLRF   79
34A3:  CLRF   7A
34A4:  MOVF   5D,W
34A5:  MOVWF  55
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
34A6:  MOVF   48,W
34A7:  MOVWF  5D
34A8:  MOVF   49,W
34A9:  MOVWF  5E
34AA:  MOVF   4A,W
34AB:  MOVWF  5F
34AC:  CLRF   60
34AD:  CLRF   78
34AE:  CLRF   79
34AF:  CLRF   7A
34B0:  MOVF   5D,W
34B1:  MOVWF  56
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
34B2:  CLRF   78
34B3:  CLRF   79
34B4:  CLRF   7A
34B5:  MOVF   47,W
34B6:  MOVWF  57
....................       flash_cmd[5] = write_data;
34B7:  MOVF   4B,W
34B8:  MOVWF  58
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
34B9:  MOVF   45,W
34BA:  MOVLB  13
34BB:  MOVWF  49
34BC:  CLRF   4A
34BD:  MOVLW  01
34BE:  MOVWF  4C
34BF:  CLRF   4B
34C0:  MOVLP  08
34C1:  MOVLB  00
34C2:  CALL   104
34C3:  MOVLP  30
34C4:  MOVLB  11
34C5:  MOVF   45,W
34C6:  MOVLB  13
34C7:  MOVWF  49
34C8:  CLRF   4A
34C9:  CLRF   4C
34CA:  MOVLW  80
34CB:  MOVWF  4B
34CC:  MOVLP  08
34CD:  MOVLB  00
34CE:  CALL   104
34CF:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
34D0:  MOVLB  11
34D1:  MOVF   46,W
34D2:  MOVLB  13
34D3:  MOVWF  46
34D4:  MOVLB  11
34D5:  MOVF   45,W
34D6:  MOVLB  13
34D7:  MOVWF  45
34D8:  MOVLB  11
34D9:  MOVF   44,W
34DA:  MOVLB  13
34DB:  MOVWF  44
34DC:  MOVLB  11
34DD:  MOVF   43,W
34DE:  MOVLB  13
34DF:  MOVWF  43
34E0:  MOVLW  25
34E1:  MOVWF  48
34E2:  MOVLW  82
34E3:  MOVWF  47
34E4:  CLRF   4A
34E5:  MOVLW  01
34E6:  MOVWF  49
34E7:  MOVLP  08
34E8:  MOVLB  00
34E9:  CALL   621
34EA:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
34EB:  MOVLB  11
34EC:  MOVF   45,W
34ED:  MOVLB  13
34EE:  MOVWF  49
34EF:  MOVLW  01
34F0:  MOVWF  4A
34F1:  MOVWF  4C
34F2:  CLRF   4B
34F3:  MOVLP  08
34F4:  MOVLB  00
34F5:  CALL   104
34F6:  MOVLP  30
34F7:  MOVLB  11
34F8:  MOVF   45,W
34F9:  MOVLB  13
34FA:  MOVWF  49
34FB:  CLRF   4A
34FC:  CLRF   4C
34FD:  MOVLW  80
34FE:  MOVWF  4B
34FF:  MOVLP  08
3500:  MOVLB  00
3501:  CALL   104
3502:  MOVLP  30
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
3503:  MOVLB  11
3504:  MOVF   45,W
3505:  MOVLB  13
3506:  MOVWF  49
3507:  CLRF   4A
3508:  MOVLW  01
3509:  MOVWF  4C
350A:  CLRF   4B
350B:  MOVLP  08
350C:  MOVLB  00
350D:  CALL   104
350E:  MOVLP  30
350F:  MOVLB  11
3510:  MOVF   45,W
3511:  MOVLB  13
3512:  MOVWF  49
3513:  CLRF   4A
3514:  CLRF   4C
3515:  MOVLW  80
3516:  MOVWF  4B
3517:  MOVLP  08
3518:  MOVLB  00
3519:  CALL   104
351A:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
351B:  MOVLB  11
351C:  MOVF   46,W
351D:  MOVLB  13
351E:  MOVWF  46
351F:  MOVLB  11
3520:  MOVF   45,W
3521:  MOVLB  13
3522:  MOVWF  45
3523:  MOVLB  11
3524:  MOVF   44,W
3525:  MOVLB  13
3526:  MOVWF  44
3527:  MOVLB  11
3528:  MOVF   43,W
3529:  MOVLB  13
352A:  MOVWF  43
352B:  MOVLW  25
352C:  MOVWF  48
352D:  MOVLW  83
352E:  MOVWF  47
352F:  CLRF   4A
3530:  MOVLW  06
3531:  MOVWF  49
3532:  MOVLP  08
3533:  MOVLB  00
3534:  CALL   621
3535:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3536:  MOVLW  02
3537:  MOVWF  77
3538:  DECFSZ 77,F
3539:  GOTO   538
353A:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
353B:  MOVLB  11
353C:  MOVF   45,W
353D:  MOVLB  13
353E:  MOVWF  49
353F:  MOVLW  01
3540:  MOVWF  4A
3541:  MOVWF  4C
3542:  CLRF   4B
3543:  MOVLP  08
3544:  MOVLB  00
3545:  CALL   104
3546:  MOVLP  30
3547:  MOVLB  11
3548:  MOVF   45,W
3549:  MOVLB  13
354A:  MOVWF  49
354B:  CLRF   4A
354C:  CLRF   4C
354D:  MOVLW  80
354E:  MOVWF  4B
354F:  MOVLP  08
3550:  MOVLB  00
3551:  CALL   104
3552:  MOVLP  30
3553:  MOVLB  11
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
3554:  CLRF   59
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
3555:  MOVF   46,W
3556:  MOVLB  13
3557:  MOVWF  46
3558:  MOVLB  11
3559:  MOVF   45,W
355A:  MOVLB  13
355B:  MOVWF  45
355C:  MOVLB  11
355D:  MOVF   44,W
355E:  MOVLB  13
355F:  MOVWF  44
3560:  MOVLB  11
3561:  MOVF   43,W
3562:  MOVLB  13
3563:  MOVWF  43
3564:  MOVLP  08
3565:  MOVLB  00
3566:  CALL   71D
3567:  MOVLP  30
3568:  MOVF   78,W
3569:  ANDLW  01
356A:  SUBLW  01
356B:  BTFSS  03.2
356C:  GOTO   58C
....................       if(timeout_counter > 10)
356D:  MOVLB  11
356E:  MOVF   59,W
356F:  SUBLW  0A
3570:  BTFSC  03.0
3571:  GOTO   57B
....................          delay_ms(200);
3572:  MOVLW  C8
3573:  MOVLB  13
3574:  MOVWF  43
3575:  MOVLP  08
3576:  MOVLB  00
3577:  CALL   763
3578:  MOVLP  30
3579:  GOTO   582
357A:  MOVLB  11
....................       else
....................          delay_ms(10);   
357B:  MOVLW  0A
357C:  MOVLB  13
357D:  MOVWF  43
357E:  MOVLP  08
357F:  MOVLB  00
3580:  CALL   763
3581:  MOVLP  30
....................       
....................       if(timeout_counter > 100){
3582:  MOVLB  11
3583:  MOVF   59,W
3584:  SUBLW  64
3585:  BTFSC  03.0
3586:  GOTO   58A
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
3587:  MOVLB  00
3588:  GOTO   58C
3589:  MOVLB  11
....................       }  
....................       timeout_counter++;
358A:  INCF   59,F
358B:  GOTO   555
358C:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
358D:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1000:  MOVLB  13
1001:  MOVF   28,F
1002:  BTFSS  03.2
1003:  GOTO   0B0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1004:  MOVLW  06
1005:  MOVWF  33
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
1006:  MOVLW  02
1007:  MOVWF  34
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1008:  MOVF   2D,W
1009:  MOVWF  44
100A:  MOVF   2E,W
100B:  MOVWF  45
100C:  CLRF   46
100D:  CLRF   47
100E:  CLRF   78
100F:  CLRF   79
1010:  CLRF   7A
1011:  MOVF   44,W
1012:  MOVWF  35
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1013:  MOVF   2C,W
1014:  MOVWF  44
1015:  MOVF   2D,W
1016:  MOVWF  45
1017:  MOVF   2E,W
1018:  MOVWF  46
1019:  CLRF   47
101A:  CLRF   78
101B:  CLRF   79
101C:  CLRF   7A
101D:  MOVF   44,W
101E:  MOVWF  36
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
101F:  CLRF   78
1020:  CLRF   79
1021:  CLRF   7A
1022:  MOVF   2B,W
1023:  MOVWF  37
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1024:  MOVF   29,W
1025:  MOVWF  49
1026:  CLRF   4A
1027:  MOVLW  01
1028:  MOVWF  4C
1029:  CLRF   4B
102A:  MOVLP  08
102B:  MOVLB  00
102C:  CALL   104
102D:  MOVLP  10
102E:  MOVLB  13
102F:  MOVF   29,W
1030:  MOVWF  49
1031:  CLRF   4A
1032:  CLRF   4C
1033:  MOVLW  80
1034:  MOVWF  4B
1035:  MOVLP  08
1036:  MOVLB  00
1037:  CALL   104
1038:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1039:  MOVLB  13
103A:  MOVF   2A,W
103B:  MOVWF  46
103C:  MOVF   29,W
103D:  MOVWF  45
103E:  MOVF   28,W
103F:  MOVWF  44
1040:  MOVF   27,W
1041:  MOVWF  43
1042:  MOVLW  26
1043:  MOVWF  48
1044:  MOVLW  03
1045:  MOVWF  47
1046:  CLRF   4A
1047:  MOVLW  01
1048:  MOVWF  49
1049:  MOVLP  08
104A:  MOVLB  00
104B:  CALL   621
104C:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
104D:  MOVLB  13
104E:  MOVF   29,W
104F:  MOVWF  49
1050:  MOVLW  01
1051:  MOVWF  4A
1052:  MOVWF  4C
1053:  CLRF   4B
1054:  MOVLP  08
1055:  MOVLB  00
1056:  CALL   104
1057:  MOVLP  10
1058:  MOVLB  13
1059:  MOVF   29,W
105A:  MOVWF  49
105B:  CLRF   4A
105C:  CLRF   4C
105D:  MOVLW  80
105E:  MOVWF  4B
105F:  MOVLP  08
1060:  MOVLB  00
1061:  CALL   104
1062:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1063:  MOVLB  13
1064:  MOVF   29,W
1065:  MOVWF  49
1066:  CLRF   4A
1067:  MOVLW  01
1068:  MOVWF  4C
1069:  CLRF   4B
106A:  MOVLP  08
106B:  MOVLB  00
106C:  CALL   104
106D:  MOVLP  10
106E:  MOVLB  13
106F:  MOVF   29,W
1070:  MOVWF  49
1071:  CLRF   4A
1072:  CLRF   4C
1073:  MOVLW  80
1074:  MOVWF  4B
1075:  MOVLP  08
1076:  MOVLB  00
1077:  CALL   104
1078:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
1079:  MOVLB  13
107A:  MOVF   2A,W
107B:  MOVWF  46
107C:  MOVF   29,W
107D:  MOVWF  45
107E:  MOVF   28,W
107F:  MOVWF  44
1080:  MOVF   27,W
1081:  MOVWF  43
1082:  MOVLW  26
1083:  MOVWF  48
1084:  MOVLW  04
1085:  MOVWF  47
1086:  MOVWF  49
1087:  MOVF   30,W
1088:  MOVWF  4B
1089:  MOVF   2F,W
108A:  MOVWF  4A
108B:  MOVF   32,W
108C:  MOVWF  4D
108D:  MOVF   31,W
108E:  MOVWF  4C
108F:  MOVLP  08
1090:  MOVLB  00
1091:  CALL   681
1092:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
1093:  MOVLW  02
1094:  MOVWF  77
1095:  DECFSZ 77,F
1096:  GOTO   095
1097:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1098:  MOVLB  13
1099:  MOVF   29,W
109A:  MOVWF  49
109B:  MOVLW  01
109C:  MOVWF  4A
109D:  MOVWF  4C
109E:  CLRF   4B
109F:  MOVLP  08
10A0:  MOVLB  00
10A1:  CALL   104
10A2:  MOVLP  10
10A3:  MOVLB  13
10A4:  MOVF   29,W
10A5:  MOVWF  49
10A6:  CLRF   4A
10A7:  CLRF   4C
10A8:  MOVLW  80
10A9:  MOVWF  4B
10AA:  MOVLP  08
10AB:  MOVLB  00
10AC:  CALL   104
10AD:  MOVLP  10
....................    }
10AE:  GOTO   167
10AF:  MOVLB  13
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
10B0:  DECFSZ 28,W
10B1:  GOTO   168
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10B2:  MOVLW  06
10B3:  MOVWF  38
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
10B4:  MOVLW  12
10B5:  MOVWF  39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
10B6:  MOVF   2E,W
10B7:  MOVWF  44
10B8:  CLRF   45
10B9:  CLRF   46
10BA:  CLRF   47
10BB:  CLRF   78
10BC:  CLRF   79
10BD:  CLRF   7A
10BE:  MOVF   44,W
10BF:  MOVWF  3A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10C0:  MOVF   2D,W
10C1:  MOVWF  44
10C2:  MOVF   2E,W
10C3:  MOVWF  45
10C4:  CLRF   46
10C5:  CLRF   47
10C6:  CLRF   78
10C7:  CLRF   79
10C8:  CLRF   7A
10C9:  MOVF   44,W
10CA:  MOVWF  3B
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10CB:  MOVF   2C,W
10CC:  MOVWF  44
10CD:  MOVF   2D,W
10CE:  MOVWF  45
10CF:  MOVF   2E,W
10D0:  MOVWF  46
10D1:  CLRF   47
10D2:  CLRF   78
10D3:  CLRF   79
10D4:  CLRF   7A
10D5:  MOVF   44,W
10D6:  MOVWF  3C
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
10D7:  CLRF   78
10D8:  CLRF   79
10D9:  CLRF   7A
10DA:  MOVF   2B,W
10DB:  MOVWF  3D
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10DC:  MOVF   29,W
10DD:  MOVWF  49
10DE:  CLRF   4A
10DF:  MOVLW  01
10E0:  MOVWF  4C
10E1:  CLRF   4B
10E2:  MOVLP  08
10E3:  MOVLB  00
10E4:  CALL   104
10E5:  MOVLP  10
10E6:  MOVLB  13
10E7:  MOVF   29,W
10E8:  MOVWF  49
10E9:  CLRF   4A
10EA:  CLRF   4C
10EB:  MOVLW  80
10EC:  MOVWF  4B
10ED:  MOVLP  08
10EE:  MOVLB  00
10EF:  CALL   104
10F0:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10F1:  MOVLB  13
10F2:  MOVF   2A,W
10F3:  MOVWF  46
10F4:  MOVF   29,W
10F5:  MOVWF  45
10F6:  MOVF   28,W
10F7:  MOVWF  44
10F8:  MOVF   27,W
10F9:  MOVWF  43
10FA:  MOVLW  26
10FB:  MOVWF  48
10FC:  MOVLW  08
10FD:  MOVWF  47
10FE:  CLRF   4A
10FF:  MOVLW  01
1100:  MOVWF  49
1101:  MOVLP  08
1102:  MOVLB  00
1103:  CALL   621
1104:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1105:  MOVLB  13
1106:  MOVF   29,W
1107:  MOVWF  49
1108:  MOVLW  01
1109:  MOVWF  4A
110A:  MOVWF  4C
110B:  CLRF   4B
110C:  MOVLP  08
110D:  MOVLB  00
110E:  CALL   104
110F:  MOVLP  10
1110:  MOVLB  13
1111:  MOVF   29,W
1112:  MOVWF  49
1113:  CLRF   4A
1114:  CLRF   4C
1115:  MOVLW  80
1116:  MOVWF  4B
1117:  MOVLP  08
1118:  MOVLB  00
1119:  CALL   104
111A:  MOVLP  10
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
111B:  MOVLB  13
111C:  MOVF   29,W
111D:  MOVWF  49
111E:  CLRF   4A
111F:  MOVLW  01
1120:  MOVWF  4C
1121:  CLRF   4B
1122:  MOVLP  08
1123:  MOVLB  00
1124:  CALL   104
1125:  MOVLP  10
1126:  MOVLB  13
1127:  MOVF   29,W
1128:  MOVWF  49
1129:  CLRF   4A
112A:  CLRF   4C
112B:  MOVLW  80
112C:  MOVWF  4B
112D:  MOVLP  08
112E:  MOVLB  00
112F:  CALL   104
1130:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
1131:  MOVLB  13
1132:  MOVF   2A,W
1133:  MOVWF  46
1134:  MOVF   29,W
1135:  MOVWF  45
1136:  MOVF   28,W
1137:  MOVWF  44
1138:  MOVF   27,W
1139:  MOVWF  43
113A:  MOVLW  26
113B:  MOVWF  48
113C:  MOVLW  09
113D:  MOVWF  47
113E:  MOVLW  05
113F:  MOVWF  49
1140:  MOVF   30,W
1141:  MOVWF  4B
1142:  MOVF   2F,W
1143:  MOVWF  4A
1144:  MOVF   32,W
1145:  MOVWF  4D
1146:  MOVF   31,W
1147:  MOVWF  4C
1148:  MOVLP  08
1149:  MOVLB  00
114A:  CALL   681
114B:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
114C:  MOVLW  02
114D:  MOVWF  77
114E:  DECFSZ 77,F
114F:  GOTO   14E
1150:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1151:  MOVLB  13
1152:  MOVF   29,W
1153:  MOVWF  49
1154:  MOVLW  01
1155:  MOVWF  4A
1156:  MOVWF  4C
1157:  CLRF   4B
1158:  MOVLP  08
1159:  MOVLB  00
115A:  CALL   104
115B:  MOVLP  10
115C:  MOVLB  13
115D:  MOVF   29,W
115E:  MOVWF  49
115F:  CLRF   4A
1160:  CLRF   4C
1161:  MOVLW  80
1162:  MOVWF  4B
1163:  MOVLP  08
1164:  MOVLB  00
1165:  CALL   104
1166:  MOVLP  10
1167:  MOVLB  13
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1168:  CLRF   3E
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1169:  MOVF   2A,W
116A:  MOVWF  46
116B:  MOVF   29,W
116C:  MOVWF  45
116D:  MOVF   28,W
116E:  MOVWF  44
116F:  MOVF   27,W
1170:  MOVWF  43
1171:  MOVLP  08
1172:  MOVLB  00
1173:  CALL   71D
1174:  MOVLP  10
1175:  MOVF   78,W
1176:  ANDLW  01
1177:  SUBLW  01
1178:  BTFSS  03.2
1179:  GOTO   197
....................       if(timeout_counter > 10)
117A:  MOVLB  13
117B:  MOVF   3E,W
117C:  SUBLW  0A
117D:  BTFSC  03.0
117E:  GOTO   187
....................          delay_ms(200);
117F:  MOVLW  C8
1180:  MOVWF  43
1181:  MOVLP  08
1182:  MOVLB  00
1183:  CALL   763
1184:  MOVLP  10
1185:  GOTO   18D
1186:  MOVLB  13
....................       else
....................          delay_ms(10);   
1187:  MOVLW  0A
1188:  MOVWF  43
1189:  MOVLP  08
118A:  MOVLB  00
118B:  CALL   763
118C:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
118D:  MOVLB  13
118E:  MOVF   3E,W
118F:  SUBLW  64
1190:  BTFSC  03.0
1191:  GOTO   195
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1192:  MOVLB  00
1193:  GOTO   197
1194:  MOVLB  13
....................       }  
....................       timeout_counter++;
1195:  INCF   3E,F
1196:  GOTO   169
1197:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
1198:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0A07:  MOVLW  9F
0A08:  MOVLB  11
0A09:  MOVWF  6F
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0A0A:  MOVF   6D,W
0A0B:  MOVLB  13
0A0C:  MOVWF  49
0A0D:  CLRF   4A
0A0E:  MOVLW  01
0A0F:  MOVWF  4C
0A10:  CLRF   4B
0A11:  MOVLB  00
0A12:  CALL   104
0A13:  MOVLB  11
0A14:  MOVF   6D,W
0A15:  MOVLB  13
0A16:  MOVWF  49
0A17:  CLRF   4A
0A18:  CLRF   4C
0A19:  MOVLW  80
0A1A:  MOVWF  4B
0A1B:  MOVLB  00
0A1C:  CALL   104
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0A1D:  MOVLB  11
0A1E:  MOVF   6E,W
0A1F:  MOVLB  13
0A20:  MOVWF  4C
0A21:  MOVLB  11
0A22:  MOVF   6D,W
0A23:  MOVLB  13
0A24:  MOVWF  4B
0A25:  MOVLB  11
0A26:  MOVF   6C,W
0A27:  MOVLB  13
0A28:  MOVWF  4A
0A29:  MOVLB  11
0A2A:  MOVF   6B,W
0A2B:  MOVLB  13
0A2C:  MOVWF  49
0A2D:  MOVLW  25
0A2E:  MOVWF  4E
0A2F:  MOVLW  9F
0A30:  MOVWF  4D
0A31:  CLRF   50
0A32:  MOVLW  01
0A33:  MOVWF  4F
0A34:  MOVLW  25
0A35:  MOVWF  52
0A36:  MOVLW  A0
0A37:  MOVWF  51
0A38:  CLRF   56
0A39:  CLRF   55
0A3A:  CLRF   54
0A3B:  MOVLW  04
0A3C:  MOVWF  53
0A3D:  MOVLB  00
0A3E:  CALL   133
....................    output_high(flash_stream.cs_pin);
0A3F:  MOVLB  11
0A40:  MOVF   6D,W
0A41:  MOVLB  13
0A42:  MOVWF  49
0A43:  MOVLW  01
0A44:  MOVWF  4A
0A45:  MOVWF  4C
0A46:  CLRF   4B
0A47:  MOVLB  00
0A48:  CALL   104
0A49:  MOVLB  11
0A4A:  MOVF   6D,W
0A4B:  MOVLB  13
0A4C:  MOVWF  49
0A4D:  CLRF   4A
0A4E:  CLRF   4C
0A4F:  MOVLW  80
0A50:  MOVWF  4B
0A51:  MOVLB  00
0A52:  CALL   104
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0A53:  MOVLB  12
0A54:  MOVF   20,W
0A55:  SUBLW  20
0A56:  BTFSS  03.2
0A57:  GOTO   25C
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0A58:  MOVLW  01
0A59:  MOVWF  78
0A5A:  GOTO   25E
....................    }
0A5B:  GOTO   25E
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0A5C:  MOVLW  00
0A5D:  MOVWF  78
....................    }
0A5E:  MOVLB  00
0A5F:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0BA8:  MOVLW  92
0BA9:  MOVLB  03
0BAA:  MOVWF  11
0BAB:  MOVLW  00
0BAC:  MOVWF  12
0BAD:  MOVLB  00
0BAE:  CALL   045
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0BAF:  MOVLB  01
0BB0:  BCF    0F.1
0BB1:  MOVLB  02
0BB2:  BSF    0F.1
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0BB3:  MOVLB  01
0BB4:  BCF    0F.2
0BB5:  MOVLB  02
0BB6:  BSF    0F.2
....................     
....................     unsigned int8 readdata[PACKET_SIZE];
.................... 
....................     if (!is_connect(mis_fm)) {
0BB7:  MOVLB  0D
0BB8:  MOVF   45,W
0BB9:  MOVLB  11
0BBA:  MOVWF  6E
0BBB:  MOVLB  0D
0BBC:  MOVF   44,W
0BBD:  MOVLB  11
0BBE:  MOVWF  6D
0BBF:  MOVLB  0D
0BC0:  MOVF   43,W
0BC1:  MOVLB  11
0BC2:  MOVWF  6C
0BC3:  MOVLB  0D
0BC4:  MOVF   42,W
0BC5:  MOVLB  11
0BC6:  MOVWF  6B
0BC7:  MOVLB  00
0BC8:  CALL   207
0BC9:  MOVF   78,F
0BCA:  BTFSS  03.2
0BCB:  GOTO   3D4
....................         fprintf(PC, "\tFlash is not connected\r\n");
0BCC:  MOVLW  A0
0BCD:  MOVLB  03
0BCE:  MOVWF  11
0BCF:  MOVLW  00
0BD0:  MOVWF  12
0BD1:  MOVLB  00
0BD2:  CALL   045
....................         return;
0BD3:  GOTO   620
....................     }else {
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
0BD4:  MOVLB  0D
0BD5:  MOVF   45,W
0BD6:  MOVLB  13
0BD7:  MOVWF  2A
0BD8:  MOVLB  0D
0BD9:  MOVF   44,W
0BDA:  MOVLB  13
0BDB:  MOVWF  29
0BDC:  MOVLB  0D
0BDD:  MOVF   43,W
0BDE:  MOVLB  13
0BDF:  MOVWF  28
0BE0:  MOVLB  0D
0BE1:  MOVF   42,W
0BE2:  MOVLB  13
0BE3:  MOVWF  27
0BE4:  CLRF   2E
0BE5:  CLRF   2D
0BE6:  CLRF   2C
0BE7:  CLRF   2B
0BE8:  MOVLW  25
0BE9:  MOVWF  30
0BEA:  MOVLW  2F
0BEB:  MOVWF  2F
0BEC:  CLRF   34
0BED:  CLRF   33
0BEE:  CLRF   32
0BEF:  MOVLW  40
0BF0:  MOVWF  31
0BF1:  MOVLB  00
0BF2:  CALL   260
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = (readdata[0] << 24) | (readdata[1] << 16) | (readdata[2] << 8) | readdata[3];
0BF3:  MOVLB  11
0BF4:  CLRF   41
0BF5:  MOVLW  00
0BF6:  IORWF  41,F
0BF7:  IORWF  41,W
0BF8:  MOVLB  10
0BF9:  IORWF  52,W
0BFA:  MOVLB  0D
0BFB:  MOVWF  2A
0BFC:  CLRF   2B
0BFD:  CLRF   2C
0BFE:  CLRF   2D
....................     smf_piclog_loop_counter = readdata[4];
0BFF:  MOVLB  10
0C00:  MOVF   53,W
0C01:  MOVWF  71
....................     smf_meas_use_counter = (readdata[5] << 24) | (readdata[6] << 16) | (readdata[7] << 8) | readdata[8];
0C02:  MOVLB  11
0C03:  CLRF   41
0C04:  MOVLW  00
0C05:  IORWF  41,F
0C06:  IORWF  41,W
0C07:  MOVLB  10
0C08:  IORWF  57,W
0C09:  MOVLB  0D
0C0A:  MOVWF  2E
0C0B:  CLRF   2F
0C0C:  CLRF   30
0C0D:  CLRF   31
....................     smf_meas_loop_counter = readdata[9];
0C0E:  MOVLB  10
0C0F:  MOVF   58,W
0C10:  MOVWF  72
.................... 
....................     misf_piclog_use_counter = (readdata[10] << 24) | (readdata[11] << 16) | (readdata[12] << 8) | readdata[13];
0C11:  MOVLB  11
0C12:  CLRF   41
0C13:  MOVLW  00
0C14:  IORWF  41,F
0C15:  IORWF  41,W
0C16:  MOVLB  10
0C17:  IORWF  5C,W
0C18:  MOVLB  0D
0C19:  MOVWF  32
0C1A:  CLRF   33
0C1B:  CLRF   34
0C1C:  CLRF   35
....................     misf_piclog_loop_counter = readdata[14];
0C1D:  MOVLB  10
0C1E:  MOVF   5D,W
0C1F:  MOVWF  73
....................     misf_piclog_uncopyed_counter = (readdata[15] << 24) | (readdata[16] << 16) | (readdata[17] << 8) | readdata[18];
0C20:  MOVLB  11
0C21:  CLRF   41
0C22:  MOVLW  00
0C23:  IORWF  41,F
0C24:  IORWF  41,W
0C25:  MOVLB  10
0C26:  IORWF  61,W
0C27:  MOVLB  0D
0C28:  MOVWF  36
0C29:  CLRF   37
0C2A:  CLRF   38
0C2B:  CLRF   39
....................     misf_piclog_write_counter = (readdata[19] << 24) | (readdata[20] << 16) | (readdata[21] << 8) | readdata[22];
0C2C:  MOVLB  11
0C2D:  CLRF   40
0C2E:  MOVLW  00
0C2F:  IORWF  40,F
0C30:  IORWF  40,W
0C31:  MOVLB  10
0C32:  IORWF  65,W
0C33:  MOVWF  74
....................     misf_meas_use_counter = (readdata[23] << 24) | (readdata[24] << 16) | (readdata[25] << 8) | readdata[26];
0C34:  MOVLB  11
0C35:  CLRF   41
0C36:  MOVLW  00
0C37:  IORWF  41,F
0C38:  IORWF  41,W
0C39:  MOVLB  10
0C3A:  IORWF  69,W
0C3B:  MOVLB  0D
0C3C:  MOVWF  3A
0C3D:  CLRF   3B
0C3E:  CLRF   3C
0C3F:  CLRF   3D
....................     misf_meas_loop_counter = readdata[27];
0C40:  MOVLB  10
0C41:  MOVF   6A,W
0C42:  MOVWF  75
....................     misf_meas_uncopyed_counter = (readdata[28] << 24) | (readdata[29] << 16) | (readdata[30] << 8) | readdata[31];
0C43:  MOVLB  11
0C44:  CLRF   41
0C45:  MOVLW  00
0C46:  IORWF  41,F
0C47:  IORWF  41,W
0C48:  MOVLB  10
0C49:  IORWF  6E,W
0C4A:  MOVLB  0D
0C4B:  MOVWF  3E
0C4C:  CLRF   3F
0C4D:  CLRF   40
0C4E:  CLRF   41
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
0C4F:  MOVLW  AD
0C50:  MOVLB  03
0C51:  MOVWF  11
0C52:  MOVLW  00
0C53:  MOVWF  12
0C54:  BCF    03.0
0C55:  MOVLW  22
0C56:  MOVLB  11
0C57:  MOVWF  51
0C58:  MOVLB  00
0C59:  CALL   327
0C5A:  MOVLB  0D
0C5B:  MOVF   2D,W
0C5C:  MOVLB  11
0C5D:  MOVWF  51
0C5E:  MOVLW  37
0C5F:  MOVWF  52
0C60:  MOVLB  00
0C61:  CALL   381
0C62:  MOVLB  0D
0C63:  MOVF   2C,W
0C64:  MOVLB  11
0C65:  MOVWF  51
0C66:  MOVLW  37
0C67:  MOVWF  52
0C68:  MOVLB  00
0C69:  CALL   381
0C6A:  MOVLB  0D
0C6B:  MOVF   2B,W
0C6C:  MOVLB  11
0C6D:  MOVWF  51
0C6E:  MOVLW  37
0C6F:  MOVWF  52
0C70:  MOVLB  00
0C71:  CALL   381
0C72:  MOVLB  0D
0C73:  MOVF   2A,W
0C74:  MOVLB  11
0C75:  MOVWF  51
0C76:  MOVLW  37
0C77:  MOVWF  52
0C78:  MOVLB  00
0C79:  CALL   381
0C7A:  MOVLW  0D
0C7B:  MOVLB  13
0C7C:  MOVWF  2B
0C7D:  MOVLB  00
0C7E:  CALL   020
0C7F:  MOVLW  0A
0C80:  MOVLB  13
0C81:  MOVWF  2B
0C82:  MOVLB  00
0C83:  CALL   020
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
0C84:  MOVLW  C2
0C85:  MOVLB  03
0C86:  MOVWF  11
0C87:  MOVLW  00
0C88:  MOVWF  12
0C89:  BCF    03.0
0C8A:  MOVLW  22
0C8B:  MOVLB  11
0C8C:  MOVWF  51
0C8D:  MOVLB  00
0C8E:  CALL   327
0C8F:  MOVF   71,W
0C90:  MOVLB  11
0C91:  MOVWF  51
0C92:  MOVLW  37
0C93:  MOVWF  52
0C94:  MOVLB  00
0C95:  CALL   381
0C96:  MOVLW  0D
0C97:  MOVLB  13
0C98:  MOVWF  2B
0C99:  MOVLB  00
0C9A:  CALL   020
0C9B:  MOVLW  0A
0C9C:  MOVLB  13
0C9D:  MOVWF  2B
0C9E:  MOVLB  00
0C9F:  CALL   020
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
0CA0:  MOVLW  D7
0CA1:  MOVLB  03
0CA2:  MOVWF  11
0CA3:  MOVLW  00
0CA4:  MOVWF  12
0CA5:  BCF    03.0
0CA6:  MOVLW  22
0CA7:  MOVLB  11
0CA8:  MOVWF  51
0CA9:  MOVLB  00
0CAA:  CALL   327
0CAB:  MOVLB  0D
0CAC:  MOVF   31,W
0CAD:  MOVLB  11
0CAE:  MOVWF  51
0CAF:  MOVLW  37
0CB0:  MOVWF  52
0CB1:  MOVLB  00
0CB2:  CALL   381
0CB3:  MOVLB  0D
0CB4:  MOVF   30,W
0CB5:  MOVLB  11
0CB6:  MOVWF  51
0CB7:  MOVLW  37
0CB8:  MOVWF  52
0CB9:  MOVLB  00
0CBA:  CALL   381
0CBB:  MOVLB  0D
0CBC:  MOVF   2F,W
0CBD:  MOVLB  11
0CBE:  MOVWF  51
0CBF:  MOVLW  37
0CC0:  MOVWF  52
0CC1:  MOVLB  00
0CC2:  CALL   381
0CC3:  MOVLB  0D
0CC4:  MOVF   2E,W
0CC5:  MOVLB  11
0CC6:  MOVWF  51
0CC7:  MOVLW  37
0CC8:  MOVWF  52
0CC9:  MOVLB  00
0CCA:  CALL   381
0CCB:  MOVLW  0D
0CCC:  MOVLB  13
0CCD:  MOVWF  2B
0CCE:  MOVLB  00
0CCF:  CALL   020
0CD0:  MOVLW  0A
0CD1:  MOVLB  13
0CD2:  MOVWF  2B
0CD3:  MOVLB  00
0CD4:  CALL   020
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
0CD5:  MOVLW  EC
0CD6:  MOVLB  03
0CD7:  MOVWF  11
0CD8:  MOVLW  00
0CD9:  MOVWF  12
0CDA:  BCF    03.0
0CDB:  MOVLW  22
0CDC:  MOVLB  11
0CDD:  MOVWF  51
0CDE:  MOVLB  00
0CDF:  CALL   327
0CE0:  MOVF   72,W
0CE1:  MOVLB  11
0CE2:  MOVWF  51
0CE3:  MOVLW  37
0CE4:  MOVWF  52
0CE5:  MOVLB  00
0CE6:  CALL   381
0CE7:  MOVLW  0D
0CE8:  MOVLB  13
0CE9:  MOVWF  2B
0CEA:  MOVLB  00
0CEB:  CALL   020
0CEC:  MOVLW  0A
0CED:  MOVLB  13
0CEE:  MOVWF  2B
0CEF:  MOVLB  00
0CF0:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
0CF1:  MOVLW  01
0CF2:  MOVLB  03
0CF3:  MOVWF  11
0CF4:  MOVLW  01
0CF5:  MOVWF  12
0CF6:  BCF    03.0
0CF7:  MOVLW  22
0CF8:  MOVLB  11
0CF9:  MOVWF  51
0CFA:  MOVLB  00
0CFB:  CALL   327
0CFC:  MOVLB  0D
0CFD:  MOVF   35,W
0CFE:  MOVLB  11
0CFF:  MOVWF  51
0D00:  MOVLW  37
0D01:  MOVWF  52
0D02:  MOVLB  00
0D03:  CALL   381
0D04:  MOVLB  0D
0D05:  MOVF   34,W
0D06:  MOVLB  11
0D07:  MOVWF  51
0D08:  MOVLW  37
0D09:  MOVWF  52
0D0A:  MOVLB  00
0D0B:  CALL   381
0D0C:  MOVLB  0D
0D0D:  MOVF   33,W
0D0E:  MOVLB  11
0D0F:  MOVWF  51
0D10:  MOVLW  37
0D11:  MOVWF  52
0D12:  MOVLB  00
0D13:  CALL   381
0D14:  MOVLB  0D
0D15:  MOVF   32,W
0D16:  MOVLB  11
0D17:  MOVWF  51
0D18:  MOVLW  37
0D19:  MOVWF  52
0D1A:  MOVLB  00
0D1B:  CALL   381
0D1C:  MOVLW  0D
0D1D:  MOVLB  13
0D1E:  MOVWF  2B
0D1F:  MOVLB  00
0D20:  CALL   020
0D21:  MOVLW  0A
0D22:  MOVLB  13
0D23:  MOVWF  2B
0D24:  MOVLB  00
0D25:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
0D26:  MOVLW  16
0D27:  MOVLB  03
0D28:  MOVWF  11
0D29:  MOVLW  01
0D2A:  MOVWF  12
0D2B:  BCF    03.0
0D2C:  MOVLW  22
0D2D:  MOVLB  11
0D2E:  MOVWF  51
0D2F:  MOVLB  00
0D30:  CALL   327
0D31:  MOVLB  0D
0D32:  MOVF   39,W
0D33:  MOVLB  11
0D34:  MOVWF  51
0D35:  MOVLW  37
0D36:  MOVWF  52
0D37:  MOVLB  00
0D38:  CALL   381
0D39:  MOVLB  0D
0D3A:  MOVF   38,W
0D3B:  MOVLB  11
0D3C:  MOVWF  51
0D3D:  MOVLW  37
0D3E:  MOVWF  52
0D3F:  MOVLB  00
0D40:  CALL   381
0D41:  MOVLB  0D
0D42:  MOVF   37,W
0D43:  MOVLB  11
0D44:  MOVWF  51
0D45:  MOVLW  37
0D46:  MOVWF  52
0D47:  MOVLB  00
0D48:  CALL   381
0D49:  MOVLB  0D
0D4A:  MOVF   36,W
0D4B:  MOVLB  11
0D4C:  MOVWF  51
0D4D:  MOVLW  37
0D4E:  MOVWF  52
0D4F:  MOVLB  00
0D50:  CALL   381
0D51:  MOVLW  0D
0D52:  MOVLB  13
0D53:  MOVWF  2B
0D54:  MOVLB  00
0D55:  CALL   020
0D56:  MOVLW  0A
0D57:  MOVLB  13
0D58:  MOVWF  2B
0D59:  MOVLB  00
0D5A:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
0D5B:  MOVLW  2B
0D5C:  MOVLB  03
0D5D:  MOVWF  11
0D5E:  MOVLW  01
0D5F:  MOVWF  12
0D60:  BCF    03.0
0D61:  MOVLW  22
0D62:  MOVLB  11
0D63:  MOVWF  51
0D64:  MOVLB  00
0D65:  CALL   327
0D66:  MOVF   73,W
0D67:  MOVLB  11
0D68:  MOVWF  51
0D69:  MOVLW  37
0D6A:  MOVWF  52
0D6B:  MOVLB  00
0D6C:  CALL   381
0D6D:  MOVLW  0D
0D6E:  MOVLB  13
0D6F:  MOVWF  2B
0D70:  MOVLB  00
0D71:  CALL   020
0D72:  MOVLW  0A
0D73:  MOVLB  13
0D74:  MOVWF  2B
0D75:  MOVLB  00
0D76:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
0D77:  MOVLW  40
0D78:  MOVLB  03
0D79:  MOVWF  11
0D7A:  MOVLW  01
0D7B:  MOVWF  12
0D7C:  BCF    03.0
0D7D:  MOVLW  22
0D7E:  MOVLB  11
0D7F:  MOVWF  51
0D80:  MOVLB  00
0D81:  CALL   327
0D82:  MOVF   74,W
0D83:  MOVLB  11
0D84:  MOVWF  51
0D85:  MOVLW  37
0D86:  MOVWF  52
0D87:  MOVLB  00
0D88:  CALL   381
0D89:  MOVLW  0D
0D8A:  MOVLB  13
0D8B:  MOVWF  2B
0D8C:  MOVLB  00
0D8D:  CALL   020
0D8E:  MOVLW  0A
0D8F:  MOVLB  13
0D90:  MOVWF  2B
0D91:  MOVLB  00
0D92:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
0D93:  MOVLW  55
0D94:  MOVLB  03
0D95:  MOVWF  11
0D96:  MOVLW  01
0D97:  MOVWF  12
0D98:  BCF    03.0
0D99:  MOVLW  22
0D9A:  MOVLB  11
0D9B:  MOVWF  51
0D9C:  MOVLB  00
0D9D:  CALL   327
0D9E:  MOVLB  0D
0D9F:  MOVF   3D,W
0DA0:  MOVLB  11
0DA1:  MOVWF  51
0DA2:  MOVLW  37
0DA3:  MOVWF  52
0DA4:  MOVLB  00
0DA5:  CALL   381
0DA6:  MOVLB  0D
0DA7:  MOVF   3C,W
0DA8:  MOVLB  11
0DA9:  MOVWF  51
0DAA:  MOVLW  37
0DAB:  MOVWF  52
0DAC:  MOVLB  00
0DAD:  CALL   381
0DAE:  MOVLB  0D
0DAF:  MOVF   3B,W
0DB0:  MOVLB  11
0DB1:  MOVWF  51
0DB2:  MOVLW  37
0DB3:  MOVWF  52
0DB4:  MOVLB  00
0DB5:  CALL   381
0DB6:  MOVLB  0D
0DB7:  MOVF   3A,W
0DB8:  MOVLB  11
0DB9:  MOVWF  51
0DBA:  MOVLW  37
0DBB:  MOVWF  52
0DBC:  MOVLB  00
0DBD:  CALL   381
0DBE:  MOVLW  0D
0DBF:  MOVLB  13
0DC0:  MOVWF  2B
0DC1:  MOVLB  00
0DC2:  CALL   020
0DC3:  MOVLW  0A
0DC4:  MOVLB  13
0DC5:  MOVWF  2B
0DC6:  MOVLB  00
0DC7:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);  
0DC8:  MOVLW  6A
0DC9:  MOVLB  03
0DCA:  MOVWF  11
0DCB:  MOVLW  01
0DCC:  MOVWF  12
0DCD:  BCF    03.0
0DCE:  MOVLW  22
0DCF:  MOVLB  11
0DD0:  MOVWF  51
0DD1:  MOVLB  00
0DD2:  CALL   327
0DD3:  MOVLB  0D
0DD4:  MOVF   41,W
0DD5:  MOVLB  11
0DD6:  MOVWF  51
0DD7:  MOVLW  37
0DD8:  MOVWF  52
0DD9:  MOVLB  00
0DDA:  CALL   381
0DDB:  MOVLB  0D
0DDC:  MOVF   40,W
0DDD:  MOVLB  11
0DDE:  MOVWF  51
0DDF:  MOVLW  37
0DE0:  MOVWF  52
0DE1:  MOVLB  00
0DE2:  CALL   381
0DE3:  MOVLB  0D
0DE4:  MOVF   3F,W
0DE5:  MOVLB  11
0DE6:  MOVWF  51
0DE7:  MOVLW  37
0DE8:  MOVWF  52
0DE9:  MOVLB  00
0DEA:  CALL   381
0DEB:  MOVLB  0D
0DEC:  MOVF   3E,W
0DED:  MOVLB  11
0DEE:  MOVWF  51
0DEF:  MOVLW  37
0DF0:  MOVWF  52
0DF1:  MOVLB  00
0DF2:  CALL   381
0DF3:  MOVLW  0D
0DF4:  MOVLB  13
0DF5:  MOVWF  2B
0DF6:  MOVLB  00
0DF7:  CALL   020
0DF8:  MOVLW  0A
0DF9:  MOVLB  13
0DFA:  MOVWF  2B
0DFB:  MOVLB  00
0DFC:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
0DFD:  MOVLW  7F
0DFE:  MOVLB  03
0DFF:  MOVWF  11
0E00:  MOVLW  01
0E01:  MOVWF  12
0E02:  BCF    03.0
0E03:  MOVLW  22
0E04:  MOVLB  11
0E05:  MOVWF  51
0E06:  MOVLB  00
0E07:  CALL   327
0E08:  MOVF   75,W
0E09:  MOVLB  11
0E0A:  MOVWF  51
0E0B:  MOVLW  37
0E0C:  MOVWF  52
0E0D:  MOVLB  00
0E0E:  CALL   381
0E0F:  MOVLW  0D
0E10:  MOVLB  13
0E11:  MOVWF  2B
0E12:  MOVLB  00
0E13:  CALL   020
0E14:  MOVLW  0A
0E15:  MOVLB  13
0E16:  MOVWF  2B
0E17:  MOVLB  00
0E18:  CALL   020
....................     fprintf(PC, "\tComplete\r\n");
0E19:  MOVLW  94
0E1A:  MOVLB  03
0E1B:  MOVWF  11
0E1C:  MOVLW  01
0E1D:  MOVWF  12
0E1E:  MOVLB  00
0E1F:  CALL   045
0E20:  RETURN
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
144D:  MOVLB  11
144E:  CLRF   2B
144F:  CLRF   2C
1450:  CLRF   2D
1451:  CLRF   2E
1452:  CLRF   2F
1453:  CLRF   30
1454:  CLRF   31
1455:  CLRF   32
1456:  CLRF   33
1457:  CLRF   34
1458:  CLRF   35
1459:  CLRF   36
145A:  CLRF   37
145B:  CLRF   38
145C:  CLRF   39
145D:  CLRF   3A
145E:  CLRF   3B
145F:  CLRF   3C
1460:  CLRF   3D
1461:  CLRF   3E
1462:  CLRF   3F
1463:  CLRF   40
1464:  CLRF   41
1465:  CLRF   42
1466:  CLRF   43
1467:  CLRF   44
1468:  CLRF   45
1469:  CLRF   46
146A:  CLRF   47
146B:  CLRF   48
146C:  CLRF   49
146D:  CLRF   4A
146E:  CLRF   4B
146F:  CLRF   4C
1470:  CLRF   4D
1471:  CLRF   4E
1472:  CLRF   4F
1473:  CLRF   50
1474:  CLRF   51
1475:  CLRF   52
1476:  CLRF   53
1477:  CLRF   54
1478:  CLRF   55
1479:  CLRF   56
147A:  CLRF   57
147B:  CLRF   58
147C:  CLRF   59
147D:  CLRF   5A
147E:  CLRF   5B
147F:  CLRF   5C
1480:  CLRF   5D
1481:  CLRF   5E
1482:  CLRF   5F
1483:  CLRF   60
1484:  CLRF   61
1485:  CLRF   62
1486:  CLRF   63
1487:  CLRF   64
1488:  CLRF   65
1489:  CLRF   66
148A:  CLRF   67
148B:  CLRF   68
148C:  CLRF   69
148D:  CLRF   6A
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
148E:  MOVLB  0D
148F:  MOVF   2D,W
1490:  MOVLB  11
1491:  MOVWF  6C
1492:  CLRF   6D
1493:  CLRF   6E
1494:  CLRF   6F
1495:  MOVF   6C,W
1496:  MOVWF  2B
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
1497:  MOVLB  0D
1498:  MOVF   2C,W
1499:  MOVLB  11
149A:  MOVWF  6C
149B:  MOVLB  0D
149C:  MOVF   2D,W
149D:  MOVLB  11
149E:  MOVWF  6D
149F:  CLRF   6E
14A0:  CLRF   6F
14A1:  MOVF   6C,W
14A2:  MOVWF  2C
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
14A3:  MOVLB  0D
14A4:  MOVF   2B,W
14A5:  MOVLB  11
14A6:  MOVWF  6C
14A7:  MOVLB  0D
14A8:  MOVF   2C,W
14A9:  MOVLB  11
14AA:  MOVWF  6D
14AB:  MOVLB  0D
14AC:  MOVF   2D,W
14AD:  MOVLB  11
14AE:  MOVWF  6E
14AF:  CLRF   6F
14B0:  MOVF   6C,W
14B1:  MOVWF  2D
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
14B2:  MOVLB  0D
14B3:  MOVF   2A,W
14B4:  MOVLB  11
14B5:  MOVWF  2E
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
14B6:  MOVF   71,W
14B7:  MOVWF  2F
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
14B8:  MOVLB  0D
14B9:  MOVF   31,W
14BA:  MOVLB  11
14BB:  MOVWF  6C
14BC:  CLRF   6D
14BD:  CLRF   6E
14BE:  CLRF   6F
14BF:  MOVF   6C,W
14C0:  MOVWF  30
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
14C1:  MOVLB  0D
14C2:  MOVF   30,W
14C3:  MOVLB  11
14C4:  MOVWF  6C
14C5:  MOVLB  0D
14C6:  MOVF   31,W
14C7:  MOVLB  11
14C8:  MOVWF  6D
14C9:  CLRF   6E
14CA:  CLRF   6F
14CB:  MOVF   6C,W
14CC:  MOVWF  31
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
14CD:  MOVLB  0D
14CE:  MOVF   2F,W
14CF:  MOVLB  11
14D0:  MOVWF  6C
14D1:  MOVLB  0D
14D2:  MOVF   30,W
14D3:  MOVLB  11
14D4:  MOVWF  6D
14D5:  MOVLB  0D
14D6:  MOVF   31,W
14D7:  MOVLB  11
14D8:  MOVWF  6E
14D9:  CLRF   6F
14DA:  MOVF   6C,W
14DB:  MOVWF  32
....................     writedata[8] = smf_meas_use_counter & 0xFF;
14DC:  MOVLB  0D
14DD:  MOVF   2E,W
14DE:  MOVLB  11
14DF:  MOVWF  33
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
14E0:  MOVF   72,W
14E1:  MOVWF  34
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
14E2:  MOVLB  0D
14E3:  MOVF   35,W
14E4:  MOVLB  11
14E5:  MOVWF  6C
14E6:  CLRF   6D
14E7:  CLRF   6E
14E8:  CLRF   6F
14E9:  MOVF   6C,W
14EA:  MOVWF  35
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
14EB:  MOVLB  0D
14EC:  MOVF   34,W
14ED:  MOVLB  11
14EE:  MOVWF  6C
14EF:  MOVLB  0D
14F0:  MOVF   35,W
14F1:  MOVLB  11
14F2:  MOVWF  6D
14F3:  CLRF   6E
14F4:  CLRF   6F
14F5:  MOVF   6C,W
14F6:  MOVWF  36
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
14F7:  MOVLB  0D
14F8:  MOVF   33,W
14F9:  MOVLB  11
14FA:  MOVWF  6C
14FB:  MOVLB  0D
14FC:  MOVF   34,W
14FD:  MOVLB  11
14FE:  MOVWF  6D
14FF:  MOVLB  0D
1500:  MOVF   35,W
1501:  MOVLB  11
1502:  MOVWF  6E
1503:  CLRF   6F
1504:  MOVF   6C,W
1505:  MOVWF  37
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
1506:  MOVLB  0D
1507:  MOVF   32,W
1508:  MOVLB  11
1509:  MOVWF  38
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
150A:  MOVF   73,W
150B:  MOVWF  39
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
150C:  MOVLB  0D
150D:  MOVF   39,W
150E:  MOVLB  11
150F:  MOVWF  6C
1510:  CLRF   6D
1511:  CLRF   6E
1512:  CLRF   6F
1513:  MOVF   6C,W
1514:  MOVWF  3A
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
1515:  MOVLB  0D
1516:  MOVF   38,W
1517:  MOVLB  11
1518:  MOVWF  6C
1519:  MOVLB  0D
151A:  MOVF   39,W
151B:  MOVLB  11
151C:  MOVWF  6D
151D:  CLRF   6E
151E:  CLRF   6F
151F:  MOVF   6C,W
1520:  MOVWF  3B
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
1521:  MOVLB  0D
1522:  MOVF   37,W
1523:  MOVLB  11
1524:  MOVWF  6C
1525:  MOVLB  0D
1526:  MOVF   38,W
1527:  MOVLB  11
1528:  MOVWF  6D
1529:  MOVLB  0D
152A:  MOVF   39,W
152B:  MOVLB  11
152C:  MOVWF  6E
152D:  CLRF   6F
152E:  MOVF   6C,W
152F:  MOVWF  3C
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
1530:  MOVLB  0D
1531:  MOVF   36,W
1532:  MOVLB  11
1533:  MOVWF  3D
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
1534:  MOVLW  00
1535:  MOVWF  3E
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
1536:  MOVWF  3F
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
1537:  MOVWF  40
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
1538:  MOVF   74,W
1539:  MOVWF  41
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
153A:  MOVLB  0D
153B:  MOVF   3D,W
153C:  MOVLB  11
153D:  MOVWF  6C
153E:  CLRF   6D
153F:  CLRF   6E
1540:  CLRF   6F
1541:  MOVF   6C,W
1542:  MOVWF  42
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
1543:  MOVLB  0D
1544:  MOVF   3C,W
1545:  MOVLB  11
1546:  MOVWF  6C
1547:  MOVLB  0D
1548:  MOVF   3D,W
1549:  MOVLB  11
154A:  MOVWF  6D
154B:  CLRF   6E
154C:  CLRF   6F
154D:  MOVF   6C,W
154E:  MOVWF  43
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
154F:  MOVLB  0D
1550:  MOVF   3B,W
1551:  MOVLB  11
1552:  MOVWF  6C
1553:  MOVLB  0D
1554:  MOVF   3C,W
1555:  MOVLB  11
1556:  MOVWF  6D
1557:  MOVLB  0D
1558:  MOVF   3D,W
1559:  MOVLB  11
155A:  MOVWF  6E
155B:  CLRF   6F
155C:  MOVF   6C,W
155D:  MOVWF  44
....................     writedata[26] = misf_meas_use_counter & 0xFF;
155E:  MOVLB  0D
155F:  MOVF   3A,W
1560:  MOVLB  11
1561:  MOVWF  45
.................... 
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
1562:  MOVF   75,W
1563:  MOVWF  46
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
1564:  MOVLB  0D
1565:  MOVF   41,W
1566:  MOVLB  11
1567:  MOVWF  6C
1568:  CLRF   6D
1569:  CLRF   6E
156A:  CLRF   6F
156B:  MOVF   6C,W
156C:  MOVWF  47
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
156D:  MOVLB  0D
156E:  MOVF   40,W
156F:  MOVLB  11
1570:  MOVWF  6C
1571:  MOVLB  0D
1572:  MOVF   41,W
1573:  MOVLB  11
1574:  MOVWF  6D
1575:  CLRF   6E
1576:  CLRF   6F
1577:  MOVF   6C,W
1578:  MOVWF  48
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
1579:  MOVLB  0D
157A:  MOVF   3F,W
157B:  MOVLB  11
157C:  MOVWF  6C
157D:  MOVLB  0D
157E:  MOVF   40,W
157F:  MOVLB  11
1580:  MOVWF  6D
1581:  MOVLB  0D
1582:  MOVF   41,W
1583:  MOVLB  11
1584:  MOVWF  6E
1585:  CLRF   6F
1586:  MOVF   6C,W
1587:  MOVWF  49
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
1588:  MOVLB  0D
1589:  MOVF   3E,W
158A:  MOVLB  11
158B:  MOVWF  4A
.................... 
....................     if (!is_connect(mis_fm)) {
158C:  MOVLB  0D
158D:  MOVF   45,W
158E:  MOVLB  11
158F:  MOVWF  6E
1590:  MOVLB  0D
1591:  MOVF   44,W
1592:  MOVLB  11
1593:  MOVWF  6D
1594:  MOVLB  0D
1595:  MOVF   43,W
1596:  MOVLB  11
1597:  MOVWF  6C
1598:  MOVLB  0D
1599:  MOVF   42,W
159A:  MOVLB  11
159B:  MOVWF  6B
159C:  MOVLP  08
159D:  MOVLB  00
159E:  CALL   207
159F:  MOVLP  10
15A0:  MOVF   78,F
15A1:  BTFSS  03.2
15A2:  GOTO   5AD
....................         fprintf(PC, "Mission Flash is not connected\r\n");
15A3:  MOVLW  9A
15A4:  MOVLB  03
15A5:  MOVWF  11
15A6:  MOVLW  01
15A7:  MOVWF  12
15A8:  MOVLP  08
15A9:  MOVLB  00
15AA:  CALL   045
15AB:  MOVLP  10
....................         return;
15AC:  GOTO   5E1
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
15AD:  MOVLB  0D
15AE:  MOVF   45,W
15AF:  MOVLB  11
15B0:  MOVWF  6E
15B1:  MOVLB  0D
15B2:  MOVF   44,W
15B3:  MOVLB  11
15B4:  MOVWF  6D
15B5:  MOVLB  0D
15B6:  MOVF   43,W
15B7:  MOVLB  11
15B8:  MOVWF  6C
15B9:  MOVLB  0D
15BA:  MOVF   42,W
15BB:  MOVLB  11
15BC:  MOVWF  6B
15BD:  MOVLB  12
15BE:  CLRF   23
15BF:  CLRF   22
15C0:  CLRF   21
15C1:  CLRF   20
15C2:  MOVLB  00
15C3:  CALL   199
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
15C4:  MOVLB  0D
15C5:  MOVF   45,W
15C6:  MOVLB  13
15C7:  MOVWF  2A
15C8:  MOVLB  0D
15C9:  MOVF   44,W
15CA:  MOVLB  13
15CB:  MOVWF  29
15CC:  MOVLB  0D
15CD:  MOVF   43,W
15CE:  MOVLB  13
15CF:  MOVWF  28
15D0:  MOVLB  0D
15D1:  MOVF   42,W
15D2:  MOVLB  13
15D3:  MOVWF  27
15D4:  CLRF   2E
15D5:  CLRF   2D
15D6:  CLRF   2C
15D7:  CLRF   2B
15D8:  MOVLW  25
15D9:  MOVWF  30
15DA:  MOVLW  5B
15DB:  MOVWF  2F
15DC:  CLRF   32
15DD:  MOVLW  40
15DE:  MOVWF  31
15DF:  MOVLB  00
15E0:  CALL   000
.................... }
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
1348:  MOVF   7A,W
1349:  MOVLB  11
134A:  MOVWF  23
134B:  MOVF   79,W
134C:  MOVWF  22
134D:  MOVF   78,W
134E:  MOVWF  21
134F:  MOVF   77,W
1350:  MOVWF  20
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
1351:  CLRF   2C
1352:  CLRF   2D
1353:  CLRF   2E
1354:  MOVF   23,W
1355:  MOVLB  10
1356:  MOVWF  67
....................     piclog[1] = (time >> 16) & 0xFF;
1357:  MOVLB  11
1358:  CLRF   2D
1359:  CLRF   2E
135A:  MOVF   22,W
135B:  MOVLB  10
135C:  MOVWF  68
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
135D:  MOVLB  11
135E:  CLRF   2E
135F:  MOVF   21,W
1360:  MOVLB  10
1361:  MOVWF  69
....................     piclog[3] = time & 0xFF;         // Time low byte
1362:  MOVLB  11
1363:  MOVF   20,W
1364:  MOVLB  10
1365:  MOVWF  6A
....................     piclog[4] = function;            // Function code
1366:  MOVF   65,W
1367:  MOVWF  6B
....................     piclog[5] = parameter;           // Parameter code
1368:  MOVF   66,W
1369:  MOVWF  6C
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
136A:  MOVLW  AB
136B:  MOVLB  03
136C:  MOVWF  11
136D:  MOVLW  01
136E:  MOVWF  12
136F:  MOVLP  08
1370:  MOVLB  00
1371:  CALL   045
1372:  MOVLP  10
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
1373:  MOVLB  10
1374:  CLRF   6D
1375:  MOVF   6D,W
1376:  SUBLW  05
1377:  BTFSS  03.0
1378:  GOTO   394
....................             fprintf(PC, "%02X ", piclog[i]);
1379:  MOVLW  47
137A:  ADDWF  6D,W
137B:  MOVWF  04
137C:  MOVLW  25
137D:  MOVWF  05
137E:  BTFSC  03.0
137F:  INCF   05,F
1380:  MOVF   00,W
1381:  MOVLB  11
1382:  MOVWF  2A
1383:  MOVWF  51
1384:  MOVLW  37
1385:  MOVWF  52
1386:  MOVLP  08
1387:  MOVLB  00
1388:  CALL   381
1389:  MOVLP  10
138A:  MOVLW  20
138B:  MOVLB  13
138C:  MOVWF  2B
138D:  MOVLP  08
138E:  MOVLB  00
138F:  CALL   020
1390:  MOVLP  10
1391:  MOVLB  10
1392:  INCF   6D,F
1393:  GOTO   375
....................         }
....................         fprintf(PC, "\r\n");
1394:  MOVLW  0D
1395:  MOVLB  13
1396:  MOVWF  2B
1397:  MOVLP  08
1398:  MOVLB  00
1399:  CALL   020
139A:  MOVLP  10
139B:  MOVLW  0A
139C:  MOVLB  13
139D:  MOVWF  2B
139E:  MOVLP  08
139F:  MOVLB  00
13A0:  CALL   020
13A1:  MOVLP  10
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
13A2:  MOVLB  0D
13A3:  MOVF   32,W
13A4:  MOVLB  11
13A5:  MOVWF  24
13A6:  MOVLB  0D
13A7:  MOVF   33,W
13A8:  MOVLB  11
13A9:  MOVWF  25
13AA:  MOVLW  02
13AB:  MOVLB  0D
13AC:  ADDWF  34,W
13AD:  MOVLB  11
13AE:  MOVWF  26
13AF:  MOVLW  00
13B0:  MOVLB  0D
13B1:  ADDWFC 35,W
13B2:  MOVLB  11
13B3:  MOVWF  27
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
13B4:  MOVLB  0D
13B5:  MOVF   45,W
13B6:  MOVLB  11
13B7:  MOVWF  6E
13B8:  MOVLB  0D
13B9:  MOVF   44,W
13BA:  MOVLB  11
13BB:  MOVWF  6D
13BC:  MOVLB  0D
13BD:  MOVF   43,W
13BE:  MOVLB  11
13BF:  MOVWF  6C
13C0:  MOVLB  0D
13C1:  MOVF   42,W
13C2:  MOVLB  11
13C3:  MOVWF  6B
13C4:  MOVLP  08
13C5:  MOVLB  00
13C6:  CALL   207
13C7:  MOVLP  10
13C8:  MOVF   78,F
13C9:  BTFSS  03.2
13CA:  GOTO   3D5
....................         fprintf(PC, "Mission Flash is not connected\r\n");
13CB:  MOVLW  B1
13CC:  MOVLB  03
13CD:  MOVWF  11
13CE:  MOVLW  01
13CF:  MOVWF  12
13D0:  MOVLP  08
13D1:  MOVLB  00
13D2:  CALL   045
13D3:  MOVLP  10
....................         return;
13D4:  GOTO   5E1
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
13D5:  MOVLB  0D
13D6:  MOVF   45,W
13D7:  MOVLB  13
13D8:  MOVWF  2A
13D9:  MOVLB  0D
13DA:  MOVF   44,W
13DB:  MOVLB  13
13DC:  MOVWF  29
13DD:  MOVLB  0D
13DE:  MOVF   43,W
13DF:  MOVLB  13
13E0:  MOVWF  28
13E1:  MOVLB  0D
13E2:  MOVF   42,W
13E3:  MOVLB  13
13E4:  MOVWF  27
13E5:  MOVLB  11
13E6:  MOVF   27,W
13E7:  MOVLB  13
13E8:  MOVWF  2E
13E9:  MOVLB  11
13EA:  MOVF   26,W
13EB:  MOVLB  13
13EC:  MOVWF  2D
13ED:  MOVLB  11
13EE:  MOVF   25,W
13EF:  MOVLB  13
13F0:  MOVWF  2C
13F1:  MOVLB  11
13F2:  MOVF   24,W
13F3:  MOVLB  13
13F4:  MOVWF  2B
13F5:  MOVLW  25
13F6:  MOVWF  30
13F7:  MOVLW  47
13F8:  MOVWF  2F
13F9:  CLRF   32
13FA:  MOVLW  06
13FB:  MOVWF  31
13FC:  MOVLB  00
13FD:  CALL   000
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
13FE:  MOVLW  06
13FF:  MOVLB  0D
1400:  ADDWF  32,F
1401:  MOVLW  00
1402:  ADDWFC 33,F
1403:  ADDWFC 34,F
1404:  ADDWFC 35,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
1405:  MOVLW  06
1406:  ADDWF  36,F
1407:  MOVLW  00
1408:  ADDWFC 37,F
1409:  ADDWFC 38,F
140A:  ADDWFC 39,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
140B:  MOVLW  06
140C:  ADDWF  74,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
140D:  ADDWF  74,W
140E:  SUBLW  3F
140F:  BTFSC  03.0
1410:  GOTO   44D
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1411:  MOVF   32,W
1412:  MOVLB  11
1413:  MOVWF  24
1414:  MOVLB  0D
1415:  MOVF   33,W
1416:  MOVLB  11
1417:  MOVWF  25
1418:  MOVLW  02
1419:  MOVLB  0D
141A:  ADDWF  34,W
141B:  MOVLB  11
141C:  MOVWF  26
141D:  MOVLW  00
141E:  MOVLB  0D
141F:  ADDWFC 35,W
1420:  MOVLB  11
1421:  MOVWF  27
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
1422:  MOVLB  0D
1423:  MOVF   45,W
1424:  MOVLB  13
1425:  MOVWF  2A
1426:  MOVLB  0D
1427:  MOVF   44,W
1428:  MOVLB  13
1429:  MOVWF  29
142A:  MOVLB  0D
142B:  MOVF   43,W
142C:  MOVLB  13
142D:  MOVWF  28
142E:  MOVLB  0D
142F:  MOVF   42,W
1430:  MOVLB  13
1431:  MOVWF  27
1432:  MOVLB  11
1433:  MOVF   27,W
1434:  MOVLB  13
1435:  MOVWF  2E
1436:  MOVLB  11
1437:  MOVF   26,W
1438:  MOVLB  13
1439:  MOVWF  2D
143A:  MOVLB  11
143B:  MOVF   25,W
143C:  MOVLB  13
143D:  MOVWF  2C
143E:  MOVLB  11
143F:  MOVF   24,W
1440:  MOVLB  13
1441:  MOVWF  2B
1442:  MOVLW  24
1443:  MOVWF  30
1444:  MOVLW  16
1445:  MOVWF  2F
1446:  CLRF   32
1447:  MOVLW  06
1448:  MOVWF  31
1449:  MOVLB  00
144A:  CALL   000
....................         misf_piclog_write_counter = 0;
144B:  CLRF   74
144C:  MOVLB  0D
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
*
15E1:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0893:  MOVLW  C2
0894:  MOVLB  03
0895:  MOVWF  11
0896:  MOVLW  01
0897:  MOVWF  12
0898:  MOVLB  00
0899:  CALL   045
....................     output_low(CONNECT_CIGS);
089A:  MOVLB  01
089B:  BCF    0E.0
089C:  MOVLB  02
089D:  BCF    0E.0
....................     output_low(EN_NPWR);
089E:  MOVLB  01
089F:  BCF    0E.3
08A0:  MOVLB  02
08A1:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
08A2:  MOVLW  CA
08A3:  MOVLB  03
08A4:  MOVWF  11
08A5:  MOVLW  01
08A6:  MOVWF  12
08A7:  MOVLB  00
08A8:  CALL   045
08A9:  MOVLP  38
08AA:  GOTO   265 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
08AB:  MOVLW  D0
08AC:  MOVLB  03
08AD:  MOVWF  11
08AE:  MOVLW  01
08AF:  MOVWF  12
08B0:  MOVLB  00
08B1:  CALL   045
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
08B2:  MOVLW  78
08B3:  MOVLB  01
08B4:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
08B5:  BCF    1E.0
08B6:  BCF    1E.1
08B7:  BCF    1E.2
08B8:  MOVLW  00
08B9:  MOVLB  03
08BA:  MOVWF  0C
08BB:  MOVWF  10
08BC:  MOVWF  0D
08BD:  MOVLW  EB
08BE:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
08BF:  MOVLB  01
08C0:  BCF    1E.4
08C1:  BSF    1E.5
08C2:  BSF    1E.6
08C3:  BCF    1E.7
08C4:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_FVR);                                        //DAC output at pin DAC output1 from 0-VDD volts  
08C5:  MOVLW  98
08C6:  MOVLB  02
08C7:  MOVWF  18
....................    dac_write(50);                                                               
08C8:  MOVLW  32
08C9:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
08CA:  MOVLW  D9
08CB:  MOVLB  03
08CC:  MOVWF  11
08CD:  MOVLW  01
08CE:  MOVWF  12
08CF:  MOVLB  00
08D0:  CALL   045
08D1:  MOVLP  38
08D2:  GOTO   268 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
.................... 
....................     set_adc_channel(TEMP_TOP);
....................     delay_us(10); 
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     set_adc_channel(TEMP_BOT);
....................     delay_us(10); 
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
....................    unsigned int32 current;
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_us(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
....................         
....................         set_adc_channel(CIGS_CURR);
....................         current = 0; // reset current value
....................         for(int k=0; k<10; k++)
....................         {
....................                                             //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + read_adc(ADC_START_AND_READ);
....................         }    
....................         
....................         current = current / 10; // average the current value
.................... 
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2+1] = current; // store the current value in the buffer
....................         //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
....................     // read PD value
....................     set_adc_channel(PD);
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     convert_cigs_data(measurement_step);
....................     //convert_header_data();    
....................     output_low(CONNECT_CIGS);
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
295D:  MOVLW  F6
295E:  MOVLB  03
295F:  MOVWF  11
2960:  MOVLW  01
2961:  MOVWF  12
2962:  MOVLP  08
2963:  MOVLB  00
2964:  CALL   045
2965:  MOVLP  28
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
2966:  MOVLB  0F
2967:  CLRF   67
2968:  MOVF   66,W
2969:  SUBWF  67,W
296A:  BTFSC  03.0
296B:  GOTO   2AC
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
296C:  MOVF   67,W
296D:  MOVLB  11
296E:  MOVWF  2D
296F:  MOVLW  03
2970:  MOVWF  2E
2971:  MOVLP  18
2972:  MOVLB  00
2973:  CALL   7C3
2974:  MOVLP  28
2975:  MOVLW  92
2976:  ADDWF  78,W
2977:  MOVWF  78
2978:  MOVLW  22
2979:  MOVWF  7A
297A:  BTFSC  03.0
297B:  INCF   7A,F
297C:  MOVF   78,W
297D:  MOVLB  0F
297E:  MOVWF  6A
297F:  MOVF   7A,W
2980:  MOVWF  6B
2981:  BCF    03.0
2982:  RLF    67,W
2983:  CLRF   7A
2984:  MOVWF  79
2985:  BCF    03.0
2986:  RLF    79,F
2987:  RLF    7A,F
2988:  MOVF   79,W
2989:  ADDLW  3A
298A:  MOVWF  04
298B:  MOVLW  20
298C:  ADDWFC 7A,W
298D:  MOVWF  05
298E:  MOVF   00,W
298F:  MOVWF  6C
2990:  ADDFSR 01,FSR0
2991:  MOVF   00,W
2992:  MOVWF  6D
2993:  ADDFSR 3F,FSR0
2994:  RRF    6D,F
2995:  RRF    6C,F
2996:  RRF    6D,F
2997:  RRF    6C,F
2998:  RRF    6D,F
2999:  RRF    6C,F
299A:  RRF    6D,F
299B:  RRF    6C,F
299C:  MOVLW  0F
299D:  ANDWF  6D,F
299E:  MOVF   6C,W
299F:  MOVWF  77
29A0:  CLRF   7A
29A1:  MOVF   7A,W
29A2:  MOVWF  6D
29A3:  MOVF   6B,W
29A4:  MOVWF  05
29A5:  MOVF   6A,W
29A6:  MOVWF  04
29A7:  MOVF   6C,W
29A8:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
29A9:  MOVF   67,W
29AA:  MOVLB  11
29AB:  MOVWF  2D
29AC:  MOVLW  03
29AD:  MOVWF  2E
29AE:  MOVLP  18
29AF:  MOVLB  00
29B0:  CALL   7C3
29B1:  MOVLP  28
29B2:  MOVLW  92
29B3:  ADDWF  78,W
29B4:  MOVWF  04
29B5:  MOVLW  22
29B6:  MOVWF  05
29B7:  BTFSC  03.0
29B8:  INCF   05,F
29B9:  MOVF   00,W
29BA:  MOVLB  0F
29BB:  MOVWF  6A
29BC:  MOVLB  11
29BD:  MOVWF  51
29BE:  MOVLW  37
29BF:  MOVWF  52
29C0:  MOVLP  08
29C1:  MOVLB  00
29C2:  CALL   381
29C3:  MOVLP  28
29C4:  MOVLW  20
29C5:  MOVLB  13
29C6:  MOVWF  2B
29C7:  MOVLP  08
29C8:  MOVLB  00
29C9:  CALL   020
29CA:  MOVLP  28
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
29CB:  MOVLB  0F
29CC:  MOVF   67,W
29CD:  MOVLB  11
29CE:  MOVWF  2D
29CF:  MOVLW  03
29D0:  MOVWF  2E
29D1:  MOVLP  18
29D2:  MOVLB  00
29D3:  CALL   7C3
29D4:  MOVLP  28
29D5:  MOVLW  01
29D6:  ADDWF  78,W
29D7:  ADDLW  92
29D8:  MOVWF  78
29D9:  MOVLW  22
29DA:  MOVWF  7A
29DB:  BTFSC  03.0
29DC:  INCF   7A,F
29DD:  MOVF   78,W
29DE:  MOVLB  0F
29DF:  MOVWF  6A
29E0:  MOVF   7A,W
29E1:  MOVWF  6B
29E2:  BCF    03.0
29E3:  RLF    67,W
29E4:  CLRF   7A
29E5:  MOVWF  79
29E6:  BCF    03.0
29E7:  RLF    79,F
29E8:  RLF    7A,F
29E9:  MOVF   79,W
29EA:  ADDLW  3A
29EB:  MOVWF  04
29EC:  MOVLW  20
29ED:  ADDWFC 7A,W
29EE:  MOVWF  05
29EF:  MOVF   00,W
29F0:  MOVWF  6C
29F1:  ADDFSR 01,FSR0
29F2:  MOVF   00,W
29F3:  MOVWF  6D
29F4:  ADDFSR 3F,FSR0
29F5:  MOVLW  0F
29F6:  ANDWF  6C,F
29F7:  CLRF   6D
29F8:  RLF    6C,F
29F9:  RLF    6D,F
29FA:  RLF    6C,F
29FB:  RLF    6D,F
29FC:  RLF    6C,F
29FD:  RLF    6D,F
29FE:  RLF    6C,F
29FF:  RLF    6D,F
2A00:  MOVLW  F0
2A01:  ANDWF  6C,F
2A02:  BCF    03.0
2A03:  RLF    67,W
2A04:  ADDLW  01
2A05:  CLRF   7A
2A06:  MOVWF  79
2A07:  BCF    03.0
2A08:  RLF    79,F
2A09:  RLF    7A,F
2A0A:  MOVF   79,W
2A0B:  ADDLW  3A
2A0C:  MOVWF  04
2A0D:  MOVLW  20
2A0E:  ADDWFC 7A,W
2A0F:  MOVWF  05
2A10:  MOVF   00,W
2A11:  MOVWF  6E
2A12:  ADDFSR 01,FSR0
2A13:  MOVF   00,W
2A14:  MOVWF  6F
2A15:  ADDFSR 3F,FSR0
2A16:  MOVF   6F,W
2A17:  MOVWF  6E
2A18:  CLRF   6F
2A19:  MOVF   6E,W
2A1A:  ANDLW  0F
2A1B:  MOVWF  77
2A1C:  CLRF   7A
2A1D:  MOVF   77,W
2A1E:  IORWF  6C,W
2A1F:  MOVWF  77
2A20:  MOVF   7A,W
2A21:  IORWF  6D,W
2A22:  MOVWF  7A
2A23:  MOVF   77,W
2A24:  MOVWF  6C
2A25:  MOVF   7A,W
2A26:  MOVWF  6D
2A27:  MOVF   6B,W
2A28:  MOVWF  05
2A29:  MOVF   6A,W
2A2A:  MOVWF  04
2A2B:  MOVF   6C,W
2A2C:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
2A2D:  MOVF   67,W
2A2E:  MOVLB  11
2A2F:  MOVWF  2D
2A30:  MOVLW  03
2A31:  MOVWF  2E
2A32:  MOVLP  18
2A33:  MOVLB  00
2A34:  CALL   7C3
2A35:  MOVLP  28
2A36:  MOVLW  01
2A37:  ADDWF  78,W
2A38:  ADDLW  92
2A39:  MOVWF  04
2A3A:  MOVLW  22
2A3B:  MOVWF  05
2A3C:  BTFSC  03.0
2A3D:  INCF   05,F
2A3E:  MOVF   00,W
2A3F:  MOVLB  0F
2A40:  MOVWF  6A
2A41:  MOVLB  11
2A42:  MOVWF  51
2A43:  MOVLW  37
2A44:  MOVWF  52
2A45:  MOVLP  08
2A46:  MOVLB  00
2A47:  CALL   381
2A48:  MOVLP  28
2A49:  MOVLW  20
2A4A:  MOVLB  13
2A4B:  MOVWF  2B
2A4C:  MOVLP  08
2A4D:  MOVLB  00
2A4E:  CALL   020
2A4F:  MOVLP  28
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
2A50:  MOVLB  0F
2A51:  MOVF   67,W
2A52:  MOVLB  11
2A53:  MOVWF  2D
2A54:  MOVLW  03
2A55:  MOVWF  2E
2A56:  MOVLP  18
2A57:  MOVLB  00
2A58:  CALL   7C3
2A59:  MOVLP  28
2A5A:  MOVLW  02
2A5B:  ADDWF  78,W
2A5C:  ADDLW  92
2A5D:  MOVWF  78
2A5E:  MOVLW  22
2A5F:  MOVWF  7A
2A60:  BTFSC  03.0
2A61:  INCF   7A,F
2A62:  MOVF   78,W
2A63:  MOVLB  0F
2A64:  MOVWF  6A
2A65:  MOVF   7A,W
2A66:  MOVWF  6B
2A67:  BCF    03.0
2A68:  RLF    67,W
2A69:  ADDLW  01
2A6A:  CLRF   7A
2A6B:  MOVWF  79
2A6C:  BCF    03.0
2A6D:  RLF    79,F
2A6E:  RLF    7A,F
2A6F:  MOVF   79,W
2A70:  ADDLW  3A
2A71:  MOVWF  04
2A72:  MOVLW  20
2A73:  ADDWFC 7A,W
2A74:  MOVWF  05
2A75:  MOVF   00,W
2A76:  MOVWF  6C
2A77:  ADDFSR 01,FSR0
2A78:  MOVF   00,W
2A79:  MOVWF  6D
2A7A:  ADDFSR 3F,FSR0
2A7B:  MOVF   6C,W
2A7C:  MOVWF  77
2A7D:  CLRF   7A
2A7E:  MOVF   7A,W
2A7F:  MOVWF  6D
2A80:  MOVF   6B,W
2A81:  MOVWF  05
2A82:  MOVF   6A,W
2A83:  MOVWF  04
2A84:  MOVF   6C,W
2A85:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
2A86:  MOVF   67,W
2A87:  MOVLB  11
2A88:  MOVWF  2D
2A89:  MOVLW  03
2A8A:  MOVWF  2E
2A8B:  MOVLP  18
2A8C:  MOVLB  00
2A8D:  CALL   7C3
2A8E:  MOVLP  28
2A8F:  MOVLW  02
2A90:  ADDWF  78,W
2A91:  ADDLW  92
2A92:  MOVWF  04
2A93:  MOVLW  22
2A94:  MOVWF  05
2A95:  BTFSC  03.0
2A96:  INCF   05,F
2A97:  MOVF   00,W
2A98:  MOVLB  0F
2A99:  MOVWF  6A
2A9A:  MOVLB  11
2A9B:  MOVWF  51
2A9C:  MOVLW  37
2A9D:  MOVWF  52
2A9E:  MOVLP  08
2A9F:  MOVLB  00
2AA0:  CALL   381
2AA1:  MOVLP  28
2AA2:  MOVLW  20
2AA3:  MOVLB  13
2AA4:  MOVWF  2B
2AA5:  MOVLP  08
2AA6:  MOVLB  00
2AA7:  CALL   020
2AA8:  MOVLP  28
2AA9:  MOVLB  0F
2AAA:  INCF   67,F
2AAB:  GOTO   168
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
2AAC:  MOVLW  0D
2AAD:  MOVLB  13
2AAE:  MOVWF  2B
2AAF:  MOVLP  08
2AB0:  MOVLB  00
2AB1:  CALL   020
2AB2:  MOVLP  28
2AB3:  MOVLW  0A
2AB4:  MOVLB  13
2AB5:  MOVWF  2B
2AB6:  MOVLP  08
2AB7:  MOVLB  00
2AB8:  CALL   020
2AB9:  MOVLP  28
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
27C3:  MOVLB  0F
27C4:  MOVF   3B,W
27C5:  SUBWF  3A,W
27C6:  BTFSS  03.2
27C7:  GOTO   7D7
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
27C8:  MOVLW  0E
27C9:  MOVLB  03
27CA:  MOVWF  11
27CB:  MOVLW  02
27CC:  MOVWF  12
27CD:  MOVLP  08
27CE:  MOVLB  00
27CF:  CALL   045
27D0:  MOVLP  20
....................       return 0x00;
27D1:  MOVLW  00
27D2:  MOVWF  78
27D3:  MOVWF  79
27D4:  GOTO   7F1
....................    }
27D5:  GOTO   7F1
27D6:  MOVLB  0F
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
27D7:  MOVF   3A,W
27D8:  MOVLB  11
27D9:  MOVWF  2C
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
27DA:  MOVLW  01
27DB:  MOVLB  0F
27DC:  ADDWF  3A,W
27DD:  ANDLW  0F
27DE:  MOVWF  3A
....................       return &smf_queue.smf_data[current_head];
27DF:  MOVLB  11
27E0:  MOVF   2C,W
27E1:  MOVWF  2D
27E2:  MOVLW  09
27E3:  MOVWF  2E
27E4:  MOVLP  18
27E5:  MOVLB  00
27E6:  CALL   7C3
27E7:  MOVLP  20
27E8:  MOVF   78,W
27E9:  ADDLW  3A
27EA:  MOVWF  78
27EB:  MOVLW  24
27EC:  MOVWF  7A
27ED:  BTFSC  03.0
27EE:  INCF   7A,F
27EF:  MOVF   7A,W
27F0:  MOVWF  79
....................    }
27F1:  MOVLP  38
27F2:  GOTO   041 (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0FE8:  MOVLB  0F
0FE9:  MOVF   3B,W
0FEA:  SUBWF  3A,W
0FEB:  BTFSC  03.2
0FEC:  GOTO   7EF
0FED:  MOVLW  00
0FEE:  GOTO   7F0
0FEF:  MOVLW  01
0FF0:  MOVWF  78
0FF1:  MOVLB  00
0FF2:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
2B33:  MOVLB  11
2B34:  CLRF   53
2B35:  CLRF   54
2B36:  CLRF   55
2B37:  CLRF   56
2B38:  CLRF   57
2B39:  CLRF   58
2B3A:  CLRF   59
2B3B:  CLRF   5A
2B3C:  CLRF   5B
....................    
....................    if (mis_type == APRS_DATA)
2B3D:  MOVF   52,F
2B3E:  BTFSS  03.2
2B3F:  GOTO   351
....................    {
....................       mis_struct.start_address   = 0x02400000;
2B40:  MOVLW  02
2B41:  MOVWF  56
2B42:  MOVLW  40
2B43:  MOVWF  55
2B44:  CLRF   54
2B45:  CLRF   53
....................       mis_struct.end_address     = 0x02500FFF;
2B46:  MOVLW  02
2B47:  MOVWF  5A
2B48:  MOVLW  50
2B49:  MOVWF  59
2B4A:  MOVLW  0F
2B4B:  MOVWF  58
2B4C:  MOVLW  FF
2B4D:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000000;
2B4E:  MOVLW  80
2B4F:  MOVWF  5B
....................    }
2B50:  GOTO   39B
....................    else if (mis_type == IN_VEHICLE)
2B51:  DECFSZ 52,W
2B52:  GOTO   365
....................    {
....................       mis_struct.start_address   = 0x02501000;
2B53:  MOVLW  02
2B54:  MOVWF  56
2B55:  MOVLW  50
2B56:  MOVWF  55
2B57:  MOVLW  10
2B58:  MOVWF  54
2B59:  CLRF   53
....................       mis_struct.end_address     = 0x02501FFF;
2B5A:  MOVLW  02
2B5B:  MOVWF  5A
2B5C:  MOVLW  50
2B5D:  MOVWF  59
2B5E:  MOVLW  1F
2B5F:  MOVWF  58
2B60:  MOVLW  FF
2B61:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000001;  
2B62:  MOVLW  81
2B63:  MOVWF  5B
....................    }
2B64:  GOTO   39B
....................    else if (mis_type == ECOSYSTEM_DATA)
2B65:  MOVF   52,W
2B66:  SUBLW  02
2B67:  BTFSS  03.2
2B68:  GOTO   37B
....................    {
....................       mis_struct.start_address   = 0x02506000;
2B69:  MOVLW  02
2B6A:  MOVWF  56
2B6B:  MOVLW  50
2B6C:  MOVWF  55
2B6D:  MOVLW  60
2B6E:  MOVWF  54
2B6F:  CLRF   53
....................       mis_struct.end_address     = 0x02516FFF;
2B70:  MOVLW  02
2B71:  MOVWF  5A
2B72:  MOVLW  51
2B73:  MOVWF  59
2B74:  MOVLW  6F
2B75:  MOVWF  58
2B76:  MOVLW  FF
2B77:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000011;  
2B78:  MOVLW  83
2B79:  MOVWF  5B
....................    }
2B7A:  GOTO   39B
....................    else if (mis_type == APRS_PIC_LOG)
2B7B:  MOVF   52,W
2B7C:  SUBLW  03
2B7D:  BTFSS  03.2
2B7E:  GOTO   391
....................    {
....................       mis_struct.start_address   = 0x02517000;
2B7F:  MOVLW  02
2B80:  MOVWF  56
2B81:  MOVLW  51
2B82:  MOVWF  55
2B83:  MOVLW  70
2B84:  MOVWF  54
2B85:  CLRF   53
....................       mis_struct.end_address     = 0x02517FFF;
2B86:  MOVLW  02
2B87:  MOVWF  5A
2B88:  MOVLW  51
2B89:  MOVWF  59
2B8A:  MOVLW  7F
2B8B:  MOVWF  58
2B8C:  MOVLW  FF
2B8D:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000100;  
2B8E:  MOVLW  84
2B8F:  MOVWF  5B
....................    }
2B90:  GOTO   39B
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
2B91:  MOVLW  FF
2B92:  MOVWF  56
2B93:  MOVWF  55
2B94:  MOVWF  54
2B95:  MOVWF  53
....................       mis_struct.end_address     = 0xFFFFFFFF;
2B96:  MOVWF  5A
2B97:  MOVWF  59
2B98:  MOVWF  58
2B99:  MOVWF  57
....................       mis_struct.mission_flag    = 0b11111111; 
2B9A:  MOVWF  5B
....................    }
....................    
....................    return mis_struct;
2B9B:  MOVLW  D3
2B9C:  MOVWF  78
2B9D:  MOVLW  08
2B9E:  MOVWF  79
2B9F:  MOVLP  30
2BA0:  MOVLB  00
2BA1:  GOTO   012 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
1800:  MOVLB  0F
1801:  CLRF   5D
1802:  CLRF   5E
1803:  CLRF   5F
1804:  CLRF   60
1805:  CLRF   61
1806:  CLRF   62
1807:  CLRF   63
1808:  CLRF   64
1809:  CLRF   65
180A:  CLRF   66
180B:  CLRF   67
180C:  CLRF   68
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
180D:  MOVLW  1B
180E:  MOVLB  03
180F:  MOVWF  11
1810:  MOVLW  02
1811:  MOVWF  12
1812:  MOVLP  08
1813:  MOVLB  00
1814:  CALL   045
1815:  MOVLP  18
....................    fprintf(PC, "\t[BOSS] >>> ");
1816:  MOVLW  2B
1817:  MOVLB  03
1818:  MOVWF  11
1819:  MOVLW  02
181A:  MOVWF  12
181B:  MOVLP  08
181C:  MOVLB  00
181D:  CALL   045
181E:  MOVLP  18
....................    for (int8 i = 0; i < receive_signal_size; i++)
181F:  MOVLB  0F
1820:  CLRF   69
1821:  MOVF   5C,W
1822:  SUBWF  69,W
1823:  BTFSC  03.0
1824:  GOTO   040
....................       fprintf(PC, "%X ", receive_signal[i]);
1825:  MOVF   69,W
1826:  ADDWF  5A,W
1827:  MOVWF  04
1828:  MOVLW  00
1829:  ADDWFC 5B,W
182A:  MOVWF  05
182B:  MOVF   00,W
182C:  MOVLB  10
182D:  MOVWF  22
182E:  MOVLB  11
182F:  MOVWF  51
1830:  MOVLW  37
1831:  MOVWF  52
1832:  MOVLP  08
1833:  MOVLB  00
1834:  CALL   381
1835:  MOVLP  18
1836:  MOVLW  20
1837:  MOVLB  13
1838:  MOVWF  2B
1839:  MOVLP  08
183A:  MOVLB  00
183B:  CALL   020
183C:  MOVLP  18
183D:  MOVLB  0F
183E:  INCF   69,F
183F:  GOTO   021
....................    fprintf(PC, "\r\n");
1840:  MOVLW  0D
1841:  MOVLB  13
1842:  MOVWF  2B
1843:  MOVLP  08
1844:  MOVLB  00
1845:  CALL   020
1846:  MOVLP  18
1847:  MOVLW  0A
1848:  MOVLB  13
1849:  MOVWF  2B
184A:  MOVLP  08
184B:  MOVLB  00
184C:  CALL   020
184D:  MOVLP  18
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
184E:  MOVLB  0F
184F:  MOVF   5B,W
1850:  MOVLB  10
1851:  MOVWF  23
1852:  MOVLB  0F
1853:  MOVF   5A,W
1854:  MOVLB  10
1855:  MOVWF  22
1856:  MOVLB  0F
1857:  MOVF   5C,W
1858:  MOVLB  10
1859:  MOVWF  24
*
1896:  MOVF   78,W
1897:  MOVLB  0F
1898:  MOVWF  6A
....................    if (frame_start_position == -1)
1899:  MOVF   6A,W
189A:  SUBLW  FF
189B:  BTFSS  03.2
189C:  GOTO   0A2
....................       return command;
189D:  MOVLW  DD
189E:  MOVWF  78
189F:  MOVLW  07
18A0:  MOVWF  79
18A1:  GOTO   242
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
18A2:  MOVF   6A,W
18A3:  ADDWF  5A,W
18A4:  MOVWF  6B
18A5:  MOVLW  00
18A6:  ADDWFC 5B,W
18A7:  MOVWF  6C
18A8:  MOVF   6B,W
18A9:  MOVWF  04
18AA:  MOVF   6C,W
18AB:  MOVWF  05
18AC:  ADDFSR 00,FSR0
18AD:  MOVF   00,W
18AE:  ANDLW  0F
18AF:  MOVWF  6D
18B0:  MOVF   6D,W
18B1:  MOVLB  10
18B2:  MOVWF  22
*
18FA:  MOVF   78,W
18FB:  MOVLB  0F
18FC:  MOVWF  6E
....................    if (content_size == -1)
18FD:  MOVF   6E,W
18FE:  SUBLW  FF
18FF:  BTFSS  03.2
1900:  GOTO   106
....................       return command;
1901:  MOVLW  DD
1902:  MOVWF  78
1903:  MOVLW  07
1904:  MOVWF  79
1905:  GOTO   242
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
1906:  MOVF   6A,W
1907:  SUBWF  5C,W
1908:  MOVWF  6F
....................    
....................    if (!check_crc(frame, receive_frame_size))
1909:  MOVF   6C,W
190A:  MOVLB  10
190B:  MOVWF  23
190C:  MOVLB  0F
190D:  MOVF   6B,W
190E:  MOVLB  10
190F:  MOVWF  22
1910:  MOVLB  0F
1911:  MOVF   6F,W
1912:  MOVLB  10
1913:  MOVWF  24
*
198C:  MOVF   78,F
198D:  BTFSS  03.2
198E:  GOTO   196
....................       return command;
198F:  MOVLW  DD
1990:  MOVWF  78
1991:  MOVLW  07
1992:  MOVWF  79
1993:  MOVLB  0F
1994:  GOTO   242
1995:  MOVLB  10
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
1996:  MOVLB  0F
1997:  MOVF   6B,W
1998:  MOVWF  04
1999:  MOVF   6C,W
199A:  MOVWF  05
199B:  ADDFSR 00,FSR0
199C:  MOVF   00,W
199D:  ANDLW  F0
199E:  MOVWF  77
199F:  SWAPF  77,W
19A0:  MOVLB  10
19A1:  MOVWF  22
19A2:  MOVLW  0F
19A3:  ANDWF  22,F
19A4:  MOVF   22,W
19A5:  MOVWF  23
*
1A04:  MOVF   78,F
1A05:  BTFSS  03.2
1A06:  GOTO   20E
....................       return command;
1A07:  MOVLW  DD
1A08:  MOVWF  78
1A09:  MOVLW  07
1A0A:  MOVWF  79
1A0B:  MOVLB  0F
1A0C:  GOTO   242
1A0D:  MOVLB  10
.................... 
....................    command.frame_id = frame_id;
1A0E:  MOVLB  0F
1A0F:  MOVF   6D,W
1A10:  MOVWF  5D
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
1A11:  MOVLW  01
1A12:  ADDWF  6B,W
1A13:  MOVLB  10
1A14:  MOVWF  22
1A15:  MOVLW  00
1A16:  MOVLB  0F
1A17:  ADDWFC 6C,W
1A18:  MOVLB  10
1A19:  MOVWF  23
1A1A:  MOVLW  02
1A1B:  MOVLB  0F
1A1C:  SUBWF  6F,W
1A1D:  MOVLB  10
1A1E:  MOVWF  24
1A1F:  MOVF   23,W
1A20:  MOVWF  05
1A21:  MOVF   22,W
1A22:  MOVWF  04
1A23:  MOVF   24,W
1A24:  MOVWF  78
1A25:  BTFSC  03.2
1A26:  GOTO   22F
1A27:  MOVLW  24
1A28:  MOVWF  07
1A29:  MOVLW  F0
1A2A:  MOVWF  06
1A2B:  MOVIW  [FSR0++],W
1A2C:  MOVWI  W,[FSR1++]
1A2D:  DECFSZ 78,F
1A2E:  GOTO   22B
....................    command.size = receive_frame_size-2;
1A2F:  MOVLW  02
1A30:  MOVLB  0F
1A31:  SUBWF  6F,W
1A32:  MOVWF  5E
....................    command.is_exist = TRUE;
1A33:  BSF    5F.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1A34:  MOVLW  32
1A35:  MOVLB  03
1A36:  MOVWF  11
1A37:  MOVLW  02
1A38:  MOVWF  12
1A39:  MOVLP  08
1A3A:  MOVLB  00
1A3B:  CALL   045
1A3C:  MOVLP  18
....................    return command;
1A3D:  MOVLW  DD
1A3E:  MOVWF  78
1A3F:  MOVLW  07
1A40:  MOVWF  79
1A41:  MOVLB  0F
1A42:  MOVLP  38
1A43:  MOVLB  00
1A44:  GOTO   2A4 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
185A:  CLRF   25
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
185B:  CLRF   25
185C:  MOVLW  01
185D:  SUBWF  24,W
185E:  SUBWF  25,W
185F:  BTFSC  03.0
1860:  GOTO   071
....................       if(receive_signal[i] == SFD)
1861:  MOVF   25,W
1862:  ADDWF  22,W
1863:  MOVWF  04
1864:  MOVLW  00
1865:  ADDWFC 23,W
1866:  MOVWF  05
1867:  MOVF   00,W
1868:  SUBLW  AA
1869:  BTFSS  03.2
186A:  GOTO   06F
....................          return i+1;
186B:  MOVLW  01
186C:  ADDWF  25,W
186D:  MOVWF  78
186E:  GOTO   096
186F:  INCF   25,F
1870:  GOTO   05C
....................    if (receive_signal[i] == SFD)
1871:  MOVF   25,W
1872:  ADDWF  22,W
1873:  MOVWF  04
1874:  MOVLW  00
1875:  ADDWFC 23,W
1876:  MOVWF  05
1877:  MOVF   00,W
1878:  SUBLW  AA
1879:  BTFSS  03.2
187A:  GOTO   089
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
187B:  MOVLW  40
187C:  MOVLB  03
187D:  MOVWF  11
187E:  MOVLW  02
187F:  MOVWF  12
1880:  MOVLP  08
1881:  MOVLB  00
1882:  CALL   045
1883:  MOVLP  18
....................       return -1;
1884:  MOVLW  FF
1885:  MOVWF  78
1886:  MOVLB  10
1887:  GOTO   096
....................    }
1888:  GOTO   096
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
1889:  MOVLW  4B
188A:  MOVLB  03
188B:  MOVWF  11
188C:  MOVLW  02
188D:  MOVWF  12
188E:  MOVLP  08
188F:  MOVLB  00
1890:  CALL   045
1891:  MOVLP  18
....................       return -1;
1892:  MOVLW  FF
1893:  MOVWF  78
1894:  MOVLB  10
1895:  GOTO   096
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
18B3:  CLRF   23
18B4:  MOVF   23,W
18B5:  SUBLW  02
18B6:  BTFSS  03.0
18B7:  GOTO   0D2
....................       if (frame_id == frame_ids[i].id)
18B8:  BCF    03.0
18B9:  RLF    23,W
18BA:  ADDLW  CC
18BB:  MOVWF  04
18BC:  MOVLW  24
18BD:  MOVWF  05
18BE:  BTFSC  03.0
18BF:  INCF   05,F
18C0:  MOVF   00,W
18C1:  SUBWF  22,W
18C2:  BTFSS  03.2
18C3:  GOTO   0D0
....................          return frame_ids[i].length;
18C4:  BCF    03.0
18C5:  RLF    23,W
18C6:  ADDLW  01
18C7:  ADDLW  CC
18C8:  MOVWF  04
18C9:  MOVLW  24
18CA:  MOVWF  05
18CB:  BTFSC  03.0
18CC:  INCF   05,F
18CD:  MOVF   00,W
18CE:  MOVWF  78
18CF:  GOTO   0FA
18D0:  INCF   23,F
18D1:  GOTO   0B4
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
18D2:  MOVLW  54
18D3:  MOVLB  03
18D4:  MOVWF  11
18D5:  MOVLW  02
18D6:  MOVWF  12
18D7:  BCF    03.0
18D8:  MOVLW  1F
18D9:  MOVLB  11
18DA:  MOVWF  51
18DB:  MOVLP  08
18DC:  MOVLB  00
18DD:  CALL   327
18DE:  MOVLP  18
18DF:  MOVLB  10
18E0:  MOVF   22,W
18E1:  MOVLB  11
18E2:  MOVWF  51
18E3:  MOVLW  37
18E4:  MOVWF  52
18E5:  MOVLP  08
18E6:  MOVLB  00
18E7:  CALL   381
18E8:  MOVLP  18
18E9:  MOVLW  0D
18EA:  MOVLB  13
18EB:  MOVWF  2B
18EC:  MOVLP  08
18ED:  MOVLB  00
18EE:  CALL   020
18EF:  MOVLP  18
18F0:  MOVLW  0A
18F1:  MOVLB  13
18F2:  MOVWF  2B
18F3:  MOVLP  08
18F4:  MOVLB  00
18F5:  CALL   020
18F6:  MOVLP  18
....................    return -1;
18F7:  MOVLW  FF
18F8:  MOVWF  78
18F9:  MOVLB  10
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
1914:  MOVLW  01
1915:  SUBWF  24,W
1916:  ADDWF  22,W
1917:  MOVWF  04
1918:  MOVLW  00
1919:  ADDWFC 23,W
191A:  MOVWF  05
191B:  MOVF   00,W
191C:  MOVWF  25
191D:  MOVLW  01
191E:  SUBWF  24,W
191F:  MOVWF  27
1920:  MOVF   23,W
1921:  MOVWF  29
1922:  MOVF   22,W
1923:  MOVWF  28
1924:  MOVF   27,W
1925:  MOVWF  2A
1926:  MOVLP  08
1927:  MOVLB  00
1928:  CALL   779
1929:  MOVLP  18
192A:  MOVF   78,W
192B:  MOVLB  10
192C:  MOVWF  26
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
192D:  MOVF   26,W
192E:  SUBWF  25,W
192F:  BTFSS  03.2
1930:  GOTO   135
....................       return TRUE;
1931:  MOVLW  01
1932:  MOVWF  78
1933:  GOTO   18C
1934:  GOTO   18C
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1935:  MOVLW  66
1936:  MOVLB  03
1937:  MOVWF  11
1938:  MOVLW  02
1939:  MOVWF  12
193A:  MOVLP  08
193B:  MOVLB  00
193C:  CALL   045
193D:  MOVLP  18
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
193E:  MOVLW  6F
193F:  MOVLB  03
1940:  MOVWF  11
1941:  MOVLW  02
1942:  MOVWF  12
1943:  BCF    03.0
1944:  MOVLW  13
1945:  MOVLB  11
1946:  MOVWF  51
1947:  MOVLP  08
1948:  MOVLB  00
1949:  CALL   327
194A:  MOVLP  18
194B:  MOVLB  10
194C:  MOVF   25,W
194D:  MOVLB  11
194E:  MOVWF  51
194F:  MOVLW  37
1950:  MOVWF  52
1951:  MOVLP  08
1952:  MOVLB  00
1953:  CALL   381
1954:  MOVLP  18
1955:  MOVLW  0D
1956:  MOVLB  13
1957:  MOVWF  2B
1958:  MOVLP  08
1959:  MOVLB  00
195A:  CALL   020
195B:  MOVLP  18
195C:  MOVLW  0A
195D:  MOVLB  13
195E:  MOVWF  2B
195F:  MOVLP  08
1960:  MOVLB  00
1961:  CALL   020
1962:  MOVLP  18
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1963:  MOVLW  7B
1964:  MOVLB  03
1965:  MOVWF  11
1966:  MOVLW  02
1967:  MOVWF  12
1968:  BCF    03.0
1969:  MOVLW  13
196A:  MOVLB  11
196B:  MOVWF  51
196C:  MOVLP  08
196D:  MOVLB  00
196E:  CALL   327
196F:  MOVLP  18
1970:  MOVLB  10
1971:  MOVF   26,W
1972:  MOVLB  11
1973:  MOVWF  51
1974:  MOVLW  37
1975:  MOVWF  52
1976:  MOVLP  08
1977:  MOVLB  00
1978:  CALL   381
1979:  MOVLP  18
197A:  MOVLW  0D
197B:  MOVLB  13
197C:  MOVWF  2B
197D:  MOVLP  08
197E:  MOVLB  00
197F:  CALL   020
1980:  MOVLP  18
1981:  MOVLW  0A
1982:  MOVLB  13
1983:  MOVWF  2B
1984:  MOVLP  08
1985:  MOVLB  00
1986:  CALL   020
1987:  MOVLP  18
....................       return FALSE;
1988:  MOVLW  00
1989:  MOVWF  78
198A:  MOVLB  10
198B:  GOTO   18C
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
19A6:  MOVF   23,W
19A7:  SUBLW  0C
19A8:  BTFSS  03.2
19A9:  GOTO   1AE
....................       return TRUE;
19AA:  MOVLW  01
19AB:  MOVWF  78
19AC:  GOTO   204
19AD:  GOTO   204
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
19AE:  MOVLW  87
19AF:  MOVLB  03
19B0:  MOVWF  11
19B1:  MOVLW  02
19B2:  MOVWF  12
19B3:  MOVLP  08
19B4:  MOVLB  00
19B5:  CALL   045
19B6:  MOVLP  18
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
19B7:  MOVLW  98
19B8:  MOVLB  03
19B9:  MOVWF  11
19BA:  MOVLW  02
19BB:  MOVWF  12
19BC:  BCF    03.0
19BD:  MOVLW  13
19BE:  MOVLB  11
19BF:  MOVWF  51
19C0:  MOVLP  08
19C1:  MOVLB  00
19C2:  CALL   327
19C3:  MOVLP  18
19C4:  MOVLB  10
19C5:  MOVF   23,W
19C6:  MOVLB  11
19C7:  MOVWF  51
19C8:  MOVLW  37
19C9:  MOVWF  52
19CA:  MOVLP  08
19CB:  MOVLB  00
19CC:  CALL   381
19CD:  MOVLP  18
19CE:  MOVLW  0D
19CF:  MOVLB  13
19D0:  MOVWF  2B
19D1:  MOVLP  08
19D2:  MOVLB  00
19D3:  CALL   020
19D4:  MOVLP  18
19D5:  MOVLW  0A
19D6:  MOVLB  13
19D7:  MOVWF  2B
19D8:  MOVLP  08
19D9:  MOVLB  00
19DA:  CALL   020
19DB:  MOVLP  18
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
19DC:  MOVLW  A4
19DD:  MOVLB  03
19DE:  MOVWF  11
19DF:  MOVLW  02
19E0:  MOVWF  12
19E1:  BCF    03.0
19E2:  MOVLW  13
19E3:  MOVLB  11
19E4:  MOVWF  51
19E5:  MOVLP  08
19E6:  MOVLB  00
19E7:  CALL   327
19E8:  MOVLP  18
19E9:  MOVLW  0C
19EA:  MOVLB  11
19EB:  MOVWF  51
19EC:  MOVLW  37
19ED:  MOVWF  52
19EE:  MOVLP  08
19EF:  MOVLB  00
19F0:  CALL   381
19F1:  MOVLP  18
19F2:  MOVLW  0D
19F3:  MOVLB  13
19F4:  MOVWF  2B
19F5:  MOVLP  08
19F6:  MOVLB  00
19F7:  CALL   020
19F8:  MOVLP  18
19F9:  MOVLW  0A
19FA:  MOVLB  13
19FB:  MOVWF  2B
19FC:  MOVLP  08
19FD:  MOVLB  00
19FE:  CALL   020
19FF:  MOVLP  18
....................       return FALSE;  
1A00:  MOVLW  00
1A01:  MOVWF  78
1A02:  MOVLB  10
1A03:  GOTO   204
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
15E2:  MOVLW  AA
15E3:  MOVLB  0F
15E4:  MOVWF  5C
....................    data[1] = (BOSS_PIC << 4) | frame_id;
15E5:  MOVF   58,W
15E6:  IORLW  50
15E7:  MOVWF  5D
....................    memcpy(&data[2], content, size);
15E8:  MOVF   5A,W
15E9:  MOVWF  05
15EA:  MOVF   59,W
15EB:  MOVWF  04
15EC:  MOVF   5B,W
15ED:  MOVWF  78
15EE:  BTFSC  03.2
15EF:  GOTO   5F8
15F0:  MOVLW  24
15F1:  MOVWF  07
15F2:  MOVLW  EE
15F3:  MOVWF  06
15F4:  MOVIW  [FSR0++],W
15F5:  MOVWI  W,[FSR1++]
15F6:  DECFSZ 78,F
15F7:  GOTO   5F4
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
15F8:  MOVLW  02
15F9:  ADDWF  5B,W
15FA:  MOVWF  6C
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
15FB:  MOVLW  EC
15FC:  ADDWF  6C,W
15FD:  MOVLB  10
15FE:  MOVWF  22
15FF:  MOVLW  24
1600:  MOVWF  23
1601:  BTFSC  03.0
1602:  INCF   23,F
1603:  MOVLW  01
1604:  MOVLB  0F
1605:  SUBWF  6C,W
1606:  MOVLB  10
1607:  MOVWF  24
1608:  MOVLW  24
1609:  MOVWF  29
160A:  MOVLW  ED
160B:  MOVWF  28
160C:  MOVF   24,W
160D:  MOVWF  2A
160E:  MOVLP  08
160F:  MOVLB  00
1610:  CALL   779
1611:  MOVLP  10
1612:  MOVLB  10
1613:  MOVF   23,W
1614:  MOVWF  05
1615:  MOVF   22,W
1616:  MOVWF  04
1617:  MOVF   78,W
1618:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
1619:  MOVLW  01
161A:  MOVLB  0F
161B:  ADDWF  6C,W
161C:  MOVWF  6D
....................    
....................    transmit(data, data_size);
161D:  MOVLW  24
161E:  MOVLB  10
161F:  MOVWF  23
1620:  MOVLW  EC
1621:  MOVWF  22
1622:  MOVLB  0F
1623:  MOVF   6D,W
1624:  MOVLB  10
1625:  MOVWF  24
*
1673:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
1626:  CLRF   25
1627:  MOVF   24,W
1628:  SUBWF  25,W
1629:  BTFSC  03.0
162A:  GOTO   63C
....................       fputc(data[i], BOSS);
162B:  MOVF   25,W
162C:  ADDWF  22,W
162D:  MOVWF  04
162E:  MOVLW  00
162F:  ADDWFC 23,W
1630:  MOVWF  05
1631:  MOVF   00,W
1632:  MOVWF  27
1633:  MOVF   27,W
*
1639:  MOVLB  10
163A:  INCF   25,F
163B:  GOTO   627
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
163C:  MOVLW  B0
163D:  MOVLB  03
163E:  MOVWF  11
163F:  MOVLW  02
1640:  MOVWF  12
1641:  MOVLP  08
1642:  MOVLB  00
1643:  CALL   045
1644:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
1645:  MOVLB  10
1646:  CLRF   26
1647:  MOVF   24,W
1648:  SUBWF  26,W
1649:  BTFSC  03.0
164A:  GOTO   665
....................       fprintf(PC, "%X ", data[i]);
164B:  MOVF   26,W
164C:  ADDWF  22,W
164D:  MOVWF  04
164E:  MOVLW  00
164F:  ADDWFC 23,W
1650:  MOVWF  05
1651:  MOVF   00,W
1652:  MOVWF  27
1653:  MOVLB  11
1654:  MOVWF  51
1655:  MOVLW  37
1656:  MOVWF  52
1657:  MOVLP  08
1658:  MOVLB  00
1659:  CALL   381
165A:  MOVLP  10
165B:  MOVLW  20
165C:  MOVLB  13
165D:  MOVWF  2B
165E:  MOVLP  08
165F:  MOVLB  00
1660:  CALL   020
1661:  MOVLP  10
1662:  MOVLB  10
1663:  INCF   26,F
1664:  GOTO   647
....................    fprintf(PC, "\r\n");
1665:  MOVLW  0D
1666:  MOVLB  13
1667:  MOVWF  2B
1668:  MOVLP  08
1669:  MOVLB  00
166A:  CALL   020
166B:  MOVLP  10
166C:  MOVLW  0A
166D:  MOVLB  13
166E:  MOVWF  2B
166F:  MOVLP  08
1670:  MOVLB  00
1671:  CALL   020
1672:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0F79:  MOVLB  10
0F7A:  MOVF   28,W
0F7B:  MOVWF  04
0F7C:  MOVF   29,W
0F7D:  MOVWF  05
0F7E:  MOVIW  [FSR0+00],W
0F7F:  MOVWF  2B
0F80:  MOVLW  01
0F81:  MOVWF  2C
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0F82:  MOVF   2A,W
0F83:  SUBWF  2C,W
0F84:  BTFSC  03.0
0F85:  GOTO   790
....................       crc ^= frame[i++];
0F86:  MOVF   2C,W
0F87:  INCF   2C,F
0F88:  ADDWF  28,W
0F89:  MOVWF  04
0F8A:  MOVLW  00
0F8B:  ADDWFC 29,W
0F8C:  MOVWF  05
0F8D:  MOVF   00,W
0F8E:  XORWF  2B,F
0F8F:  GOTO   782
....................    return crc;
0F90:  MOVF   2B,W
0F91:  MOVWF  78
0F92:  MOVLB  00
0F93:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0FB3:  MOVLW  0F
0FB4:  MOVLB  0F
0FB5:  MOVWF  58
0FB6:  CLRF   5A
0FB7:  CLRF   59
0FB8:  CLRF   5B
0FB9:  MOVLP  10
0FBA:  MOVLB  00
0FBB:  CALL   5E2
0FBC:  MOVLP  08
0FBD:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
1FEA:  MOVLW  03
1FEB:  MOVLB  0F
1FEC:  MOVWF  58
1FED:  MOVLW  20
1FEE:  MOVWF  5A
1FEF:  MOVLW  09
1FF0:  MOVWF  59
1FF1:  MOVLW  04
1FF2:  MOVWF  5B
1FF3:  MOVLP  10
1FF4:  MOVLB  00
1FF5:  CALL   5E2
1FF6:  MOVLP  18
1FF7:  MOVLP  20
1FF8:  GOTO   7AD (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... union AD7490_RESISTOR reg;
.................... struct AD7490_STREAM adf7490_stream;
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     // Set default register values
....................     reg.coding = 0; // 1: Two's complement, 0: Binary
*
07E9:  MOVLB  0F
07EA:  BCF    42.0
....................     reg.write = 1;
07EB:  BSF    43.3
....................     reg.seq = 0; 
07EC:  BCF    43.2
....................     reg.randge = 0;
07ED:  BCF    42.1
....................     reg.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
07EE:  BCF    42.2
....................     reg.shadow = 0; // 1: Shadow register, 0: Direct access
07EF:  BCF    42.3
07F0:  MOVLP  38
07F1:  MOVLB  00
07F2:  GOTO   271 (RETURN)
.................... 
.................... }
.................... 
.................... unsigned int16 ad7490_read(int16 channel)
.................... {   
....................     set_add(channel);
*
25E1:  MOVLB  0F
25E2:  MOVF   69,W
25E3:  MOVWF  6D
25E4:  MOVF   68,W
25E5:  MOVWF  6C
....................     set_pm(AD7490_PM_NORMAL);
*
2618:  CLRF   6C
....................     //spi_xfer(adf7490_stream.spi_stream, reg.value); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] << %04X\r\n", reg.value);
....................     #endif
....................     
....................     //unsigned int16 ans = spi_xfer(adf7490_stream.spi_stream);
....................     //unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata = 0;
*
2626:  CLRF   6B
2627:  CLRF   6A
....................     
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC,"\t[ADC] >> %04X\r\n", readdata);
....................     #endif
....................     return readdata;
2628:  MOVF   6A,W
2629:  MOVWF  78
262A:  MOVF   6B,W
262B:  MOVWF  79
262C:  MOVLB  00
262D:  RETURN
.................... }
.................... 
.................... void set_add(int16 channel)
.................... {
....................     reg.add0 = (channel >> 0) & 0x1;
*
25E6:  MOVF   6C,W
25E7:  ANDLW  01
25E8:  MOVWF  77
25E9:  CLRF   7A
25EA:  BCF    42.6
25EB:  BTFSC  77.0
25EC:  BSF    42.6
....................     reg.add1 = (channel >> 1) & 0x1;
25ED:  BCF    03.0
25EE:  RRF    6D,W
25EF:  MOVWF  6F
25F0:  RRF    6C,W
25F1:  MOVWF  6E
25F2:  ANDLW  01
25F3:  MOVWF  77
25F4:  CLRF   7A
25F5:  BCF    42.7
25F6:  BTFSC  77.0
25F7:  BSF    42.7
....................     reg.add2 = (channel >> 2) & 0x1;
25F8:  RRF    6D,W
25F9:  MOVWF  6F
25FA:  RRF    6C,W
25FB:  MOVWF  6E
25FC:  RRF    6F,F
25FD:  RRF    6E,F
25FE:  MOVLW  3F
25FF:  ANDWF  6F,F
2600:  MOVF   6E,W
2601:  ANDLW  01
2602:  MOVWF  77
2603:  CLRF   7A
2604:  BCF    43.0
2605:  BTFSC  77.0
2606:  BSF    43.0
....................     reg.add3 = (channel >> 3) & 0x1;
2607:  RRF    6D,W
2608:  MOVWF  6F
2609:  RRF    6C,W
260A:  MOVWF  6E
260B:  RRF    6F,F
260C:  RRF    6E,F
260D:  RRF    6F,F
260E:  RRF    6E,F
260F:  MOVLW  1F
2610:  ANDWF  6F,F
2611:  MOVF   6E,W
2612:  ANDLW  01
2613:  MOVWF  77
2614:  CLRF   7A
2615:  BCF    43.1
2616:  BTFSC  77.0
2617:  BSF    43.1
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.pm0 = (powermode >> 0) & 0x1;
*
2619:  MOVF   6C,W
261A:  ANDLW  01
261B:  MOVWF  78
261C:  BCF    42.4
261D:  BTFSC  78.0
261E:  BSF    42.4
....................     reg.pm1 = (powermode >> 1) & 0x1;
261F:  BCF    03.0
2620:  RRF    6C,W
2621:  ANDLW  01
2622:  MOVWF  78
2623:  BCF    42.5
2624:  BTFSC  78.0
2625:  BSF    42.5
....................     
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
1674:  MOVLW  50
1675:  MOVLB  03
1676:  MOVWF  11
1677:  MOVLW  03
1678:  MOVWF  12
1679:  MOVLP  08
167A:  MOVLB  00
167B:  CALL   045
167C:  MOVLP  10
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
167D:  MOVLB  0F
167E:  MOVF   5D,W
167F:  MOVWF  04
1680:  MOVF   5E,W
1681:  MOVWF  05
1682:  MOVIW  [FSR0+00],W
1683:  MOVWF  5F
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
1684:  MOVF   5D,W
1685:  MOVWF  04
1686:  MOVF   5E,W
1687:  MOVWF  05
1688:  ADDFSR 01,FSR0
1689:  MOVF   00,W
168A:  MOVLB  10
168B:  CLRF   26
168C:  CLRF   25
168D:  CLRF   24
168E:  MOVWF  23
168F:  MOVWF  26
1690:  CLRF   23
1691:  CLRF   24
1692:  CLRF   25
1693:  MOVLB  0F
1694:  MOVF   5D,W
1695:  MOVWF  04
1696:  MOVF   5E,W
1697:  MOVWF  05
1698:  ADDFSR 02,FSR0
1699:  MOVF   00,W
169A:  MOVLB  10
169B:  CLRF   2B
169C:  CLRF   2A
169D:  CLRF   29
169E:  MOVWF  28
169F:  MOVF   29,W
16A0:  MOVWF  7A
16A1:  MOVF   28,W
16A2:  MOVWF  79
16A3:  CLRF   77
16A4:  CLRF   78
16A5:  MOVF   77,W
16A6:  IORWF  23,F
16A7:  MOVF   78,W
16A8:  IORWF  24,F
16A9:  MOVF   28,W
16AA:  IORWF  25,F
16AB:  MOVF   29,W
16AC:  IORWF  26,F
16AD:  MOVLB  0F
16AE:  MOVF   5D,W
16AF:  MOVWF  04
16B0:  MOVF   5E,W
16B1:  MOVWF  05
16B2:  ADDFSR 03,FSR0
16B3:  MOVF   00,W
16B4:  MOVLB  10
16B5:  CLRF   2B
16B6:  CLRF   2A
16B7:  CLRF   29
16B8:  MOVWF  28
16B9:  MOVF   2A,W
16BA:  MOVWF  7A
16BB:  MOVF   29,W
16BC:  MOVWF  79
16BD:  MOVF   28,W
16BE:  MOVWF  78
16BF:  CLRF   77
16C0:  MOVF   77,W
16C1:  IORWF  23,F
16C2:  MOVF   28,W
16C3:  IORWF  24,F
16C4:  MOVF   29,W
16C5:  IORWF  25,F
16C6:  MOVF   2A,W
16C7:  IORWF  26,F
16C8:  MOVLB  0F
16C9:  MOVF   5D,W
16CA:  MOVWF  04
16CB:  MOVF   5E,W
16CC:  MOVWF  05
16CD:  MOVIW  [FSR0+04],W
16CE:  MOVWF  77
16CF:  CLRF   78
16D0:  CLRF   79
16D1:  CLRF   7A
16D2:  MOVF   77,W
16D3:  MOVLB  10
16D4:  IORWF  23,W
16D5:  MOVLB  0F
16D6:  MOVWF  60
16D7:  MOVF   78,W
16D8:  MOVLB  10
16D9:  IORWF  24,W
16DA:  MOVLB  0F
16DB:  MOVWF  61
16DC:  MOVF   79,W
16DD:  MOVLB  10
16DE:  IORWF  25,W
16DF:  MOVLB  0F
16E0:  MOVWF  62
16E1:  MOVF   7A,W
16E2:  MOVLB  10
16E3:  IORWF  26,W
16E4:  MOVLB  0F
16E5:  MOVWF  63
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
16E6:  MOVF   5D,W
16E7:  MOVWF  04
16E8:  MOVF   5E,W
16E9:  MOVWF  05
16EA:  ADDFSR 05,FSR0
16EB:  MOVF   00,W
16EC:  MOVLB  10
16ED:  CLRF   24
16EE:  MOVWF  23
16EF:  MOVWF  24
16F0:  CLRF   23
16F1:  MOVLB  0F
16F2:  MOVF   5D,W
16F3:  MOVWF  04
16F4:  MOVF   5E,W
16F5:  MOVWF  05
16F6:  MOVIW  [FSR0+06],W
16F7:  CLRF   7A
16F8:  MOVLB  10
16F9:  IORWF  23,W
16FA:  MOVLB  0F
16FB:  MOVWF  64
16FC:  MOVF   7A,W
16FD:  MOVLB  10
16FE:  IORWF  24,W
16FF:  MOVLB  0F
1700:  MOVWF  65
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
1701:  MOVLW  5A
1702:  MOVLB  03
1703:  MOVWF  11
1704:  MOVLW  03
1705:  MOVWF  12
1706:  BCF    03.0
1707:  MOVLW  0C
1708:  MOVLB  11
1709:  MOVWF  51
170A:  MOVLP  08
170B:  MOVLB  00
170C:  CALL   327
170D:  MOVLP  10
170E:  MOVLB  0F
170F:  MOVF   5F,W
1710:  MOVLB  11
1711:  MOVWF  51
1712:  MOVLW  37
1713:  MOVWF  52
1714:  MOVLP  08
1715:  MOVLB  00
1716:  CALL   381
1717:  MOVLP  10
1718:  MOVLW  0D
1719:  MOVLB  13
171A:  MOVWF  2B
171B:  MOVLP  08
171C:  MOVLB  00
171D:  CALL   020
171E:  MOVLP  10
171F:  MOVLW  0A
1720:  MOVLB  13
1721:  MOVWF  2B
1722:  MOVLP  08
1723:  MOVLB  00
1724:  CALL   020
1725:  MOVLP  10
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
1726:  MOVLW  64
1727:  MOVLB  03
1728:  MOVWF  11
1729:  MOVLW  03
172A:  MOVWF  12
172B:  BCF    03.0
172C:  MOVLW  0E
172D:  MOVLB  11
172E:  MOVWF  51
172F:  MOVLP  08
1730:  MOVLB  00
1731:  CALL   327
1732:  MOVLP  10
1733:  MOVLB  0F
1734:  MOVF   63,W
1735:  MOVLB  11
1736:  MOVWF  51
1737:  MOVLW  37
1738:  MOVWF  52
1739:  MOVLP  08
173A:  MOVLB  00
173B:  CALL   381
173C:  MOVLP  10
173D:  MOVLB  0F
173E:  MOVF   62,W
173F:  MOVLB  11
1740:  MOVWF  51
1741:  MOVLW  37
1742:  MOVWF  52
1743:  MOVLP  08
1744:  MOVLB  00
1745:  CALL   381
1746:  MOVLP  10
1747:  MOVLB  0F
1748:  MOVF   61,W
1749:  MOVLB  11
174A:  MOVWF  51
174B:  MOVLW  37
174C:  MOVWF  52
174D:  MOVLP  08
174E:  MOVLB  00
174F:  CALL   381
1750:  MOVLP  10
1751:  MOVLB  0F
1752:  MOVF   60,W
1753:  MOVLB  11
1754:  MOVWF  51
1755:  MOVLW  37
1756:  MOVWF  52
1757:  MOVLP  08
1758:  MOVLB  00
1759:  CALL   381
175A:  MOVLP  10
175B:  MOVLW  0D
175C:  MOVLB  13
175D:  MOVWF  2B
175E:  MOVLP  08
175F:  MOVLB  00
1760:  CALL   020
1761:  MOVLP  10
1762:  MOVLW  0A
1763:  MOVLB  13
1764:  MOVWF  2B
1765:  MOVLP  08
1766:  MOVLB  00
1767:  CALL   020
1768:  MOVLP  10
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
1769:  MOVLW  6F
176A:  MOVLB  03
176B:  MOVWF  11
176C:  MOVLW  03
176D:  MOVWF  12
176E:  BCF    03.0
176F:  MOVLW  0E
1770:  MOVLB  11
1771:  MOVWF  51
1772:  MOVLP  08
1773:  MOVLB  00
1774:  CALL   327
1775:  MOVLP  10
1776:  MOVLB  0F
1777:  MOVF   65,W
1778:  MOVLB  11
1779:  MOVWF  51
177A:  MOVLW  37
177B:  MOVWF  52
177C:  MOVLP  08
177D:  MOVLB  00
177E:  CALL   381
177F:  MOVLP  10
1780:  MOVLB  0F
1781:  MOVF   64,W
1782:  MOVLB  11
1783:  MOVWF  51
1784:  MOVLW  37
1785:  MOVWF  52
1786:  MOVLP  08
1787:  MOVLB  00
1788:  CALL   381
1789:  MOVLP  10
178A:  MOVLW  0D
178B:  MOVLB  13
178C:  MOVWF  2B
178D:  MOVLP  08
178E:  MOVLB  00
178F:  CALL   020
1790:  MOVLP  10
1791:  MOVLW  0A
1792:  MOVLB  13
1793:  MOVWF  2B
1794:  MOVLP  08
1795:  MOVLB  00
1796:  CALL   020
1797:  MOVLP  10
.................... 
....................    piclog_make(dummy_cmd.id, 0x00); // Log the command execution
1798:  MOVLB  0F
1799:  MOVF   5F,W
179A:  MOVLB  10
179B:  MOVWF  65
179C:  CLRF   66
179D:  MOVLB  00
179E:  CALL   340
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    fprintf(PC, "End MODE DUMMY\r\n");
179F:  MOVLW  7A
17A0:  MOVLB  03
17A1:  MOVWF  11
17A2:  MOVLW  03
17A3:  MOVWF  12
17A4:  MOVLP  08
17A5:  MOVLB  00
17A6:  CALL   045
17A7:  MOVLP  10
17A8:  MOVLP  20
17A9:  GOTO   75E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    
....................    //adc_init();
....................    sweep(sweep_step);
....................    //copy_data();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
2800:  MOVLW  9D
2801:  MOVLB  03
2802:  MOVWF  11
2803:  MOVLW  03
2804:  MOVWF  12
2805:  MOVLP  08
2806:  MOVLB  00
2807:  CALL   045
2808:  MOVLP  28
....................     unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
2809:  MOVLW  64
280A:  MOVLB  0F
280B:  MOVWF  5D
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
280C:  MOVLW  A4
280D:  MOVLB  03
280E:  MOVWF  11
280F:  MOVLW  03
2810:  MOVWF  12
2811:  BCF    03.0
2812:  MOVLW  0E
2813:  MOVLB  11
2814:  MOVWF  51
2815:  MOVLP  08
2816:  MOVLB  00
2817:  CALL   327
2818:  MOVLP  28
2819:  MOVLB  0F
281A:  MOVF   5D,W
281B:  MOVLB  11
281C:  MOVWF  3A
281D:  MOVLW  1B
281E:  MOVWF  3B
281F:  MOVLP  20
2820:  MOVLB  00
2821:  CALL   595
2822:  MOVLP  28
2823:  MOVLW  0D
2824:  MOVLB  13
2825:  MOVWF  2B
2826:  MOVLP  08
2827:  MOVLB  00
2828:  CALL   020
2829:  MOVLP  28
282A:  MOVLW  0A
282B:  MOVLB  13
282C:  MOVWF  2B
282D:  MOVLP  08
282E:  MOVLB  00
282F:  CALL   020
2830:  MOVLP  28
....................     output_high(CONNECT_CIGS);
2831:  MOVLB  01
2832:  BCF    0E.0
2833:  MOVLB  02
2834:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
2835:  MOVLW  20
2836:  MOVWF  78
2837:  MOVLB  01
2838:  MOVF   1D,W
2839:  ANDLW  83
283A:  IORWF  78,W
283B:  MOVWF  1D
283C:  MOVLW  0F
283D:  MOVWF  78
283E:  MOVF   1F,W
283F:  ANDLW  F0
2840:  IORWF  78,W
2841:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
2842:  MOVLW  0D
2843:  MOVWF  77
2844:  DECFSZ 77,F
2845:  GOTO   044
....................     measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2846:  MOVLB  0F
2847:  CLRF   69
2848:  CLRF   68
2849:  MOVLP  20
284A:  MOVLB  00
284B:  CALL   5E1
284C:  MOVLP  28
284D:  MOVF   79,W
284E:  MOVLB  0C
284F:  MOVWF  33
2850:  MOVF   78,W
2851:  MOVWF  32
....................     set_adc_channel(TEMP_BOT);
2852:  MOVLW  0C
2853:  MOVWF  78
2854:  MOVLB  01
2855:  MOVF   1D,W
2856:  ANDLW  83
2857:  IORWF  78,W
2858:  MOVWF  1D
2859:  MOVLW  0F
285A:  MOVWF  78
285B:  MOVF   1F,W
285C:  ANDLW  F0
285D:  IORWF  78,W
285E:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
285F:  MOVLW  0D
2860:  MOVWF  77
2861:  DECFSZ 77,F
2862:  GOTO   061
....................     measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2863:  MOVLB  0F
2864:  CLRF   69
2865:  CLRF   68
2866:  MOVLP  20
2867:  MOVLB  00
2868:  CALL   5E1
2869:  MOVLP  28
286A:  MOVF   79,W
286B:  MOVLB  0C
286C:  MOVWF  35
286D:  MOVF   78,W
286E:  MOVWF  34
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
286F:  MOVLW  00
2870:  MOVWF  78
2871:  MOVLB  01
2872:  MOVF   1D,W
2873:  ANDLW  83
2874:  IORWF  78,W
2875:  MOVWF  1D
2876:  MOVLW  0F
2877:  MOVWF  78
2878:  MOVF   1F,W
2879:  ANDLW  F0
287A:  IORWF  78,W
287B:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
287C:  MOVLW  0D
287D:  MOVWF  77
287E:  DECFSZ 77,F
287F:  GOTO   07E
....................     measured_pd_start = ad7490_read(AD7490_VIN0); // voltage at adc pin
2880:  MOVLB  0F
2881:  CLRF   69
2882:  CLRF   68
2883:  MOVLP  20
2884:  MOVLB  00
2885:  CALL   5E1
2886:  MOVLP  28
2887:  MOVF   79,W
2888:  MOVLB  0C
2889:  MOVWF  2F
288A:  MOVF   78,W
288B:  MOVWF  2E
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
288C:  MOVLB  0F
288D:  CLRF   63
288E:  CLRF   62
288F:  MOVF   63,F
2890:  BTFSS  03.2
2891:  GOTO   13B
2892:  MOVF   5D,W
2893:  SUBWF  62,W
2894:  BTFSC  03.0
2895:  GOTO   13B
....................     {    
....................          // set DAC value
....................          dac_write(count);
2896:  MOVF   62,W
2897:  MOVLB  02
2898:  MOVWF  19
....................          delay_us(100); // wait for the DAC to stabilize
2899:  MOVLW  85
289A:  MOVWF  77
289B:  DECFSZ 77,F
289C:  GOTO   09B
.................... 
....................          // read CIGS voltage and current
....................          set_adc_channel(CIGS_VOLT);       
289D:  MOVLW  00
289E:  MOVWF  78
289F:  MOVLB  01
28A0:  MOVF   1D,W
28A1:  ANDLW  83
28A2:  IORWF  78,W
28A3:  MOVWF  1D
28A4:  MOVLW  0F
28A5:  MOVWF  78
28A6:  MOVF   1F,W
28A7:  ANDLW  F0
28A8:  IORWF  78,W
28A9:  MOVWF  1F
....................          delay_us(10); // wait for the ADC to stabilize
28AA:  MOVLW  0D
28AB:  MOVWF  77
28AC:  DECFSZ 77,F
28AD:  GOTO   0AC
....................          data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
28AE:  BCF    03.0
28AF:  MOVLB  0F
28B0:  RLF    62,W
28B1:  MOVWF  66
28B2:  RLF    63,W
28B3:  MOVWF  67
28B4:  BCF    03.0
28B5:  RLF    66,W
28B6:  MOVWF  79
28B7:  RLF    67,W
28B8:  MOVWF  7A
28B9:  MOVF   79,W
28BA:  ADDLW  3A
28BB:  MOVWF  66
28BC:  MOVLW  20
28BD:  ADDWFC 7A,W
28BE:  MOVWF  67
28BF:  CLRF   69
28C0:  CLRF   68
28C1:  MOVLP  20
28C2:  MOVLB  00
28C3:  CALL   5E1
28C4:  MOVLP  28
28C5:  MOVLB  0F
28C6:  MOVF   67,W
28C7:  MOVWF  05
28C8:  MOVF   66,W
28C9:  MOVWF  04
28CA:  MOVF   78,W
28CB:  MOVWF  00
28CC:  MOVF   79,W
28CD:  MOVWI  W,[FSR0+01]
....................          
....................          set_adc_channel(CIGS_CURR);
28CE:  MOVLW  04
28CF:  MOVWF  78
28D0:  MOVLB  01
28D1:  MOVF   1D,W
28D2:  ANDLW  83
28D3:  IORWF  78,W
28D4:  MOVWF  1D
28D5:  MOVLW  0F
28D6:  MOVWF  78
28D7:  MOVF   1F,W
28D8:  ANDLW  F0
28D9:  IORWF  78,W
28DA:  MOVWF  1F
....................          current = 0; // reset current value
28DB:  MOVLB  0F
28DC:  CLRF   61
28DD:  CLRF   60
28DE:  CLRF   5F
28DF:  CLRF   5E
....................          for(int k=0; k<10; k++)
28E0:  CLRF   64
28E1:  MOVF   64,W
28E2:  SUBLW  09
28E3:  BTFSS  03.0
28E4:  GOTO   0F9
....................          {
....................                                              //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................                delay_us(10);
28E5:  MOVLW  0D
28E6:  MOVWF  77
28E7:  DECFSZ 77,F
28E8:  GOTO   0E7
....................                current = current + ad7490_read(AD7490_VIN0); 
28E9:  CLRF   69
28EA:  CLRF   68
28EB:  MOVLP  20
28EC:  MOVLB  00
28ED:  CALL   5E1
28EE:  MOVLP  28
28EF:  MOVF   78,W
28F0:  MOVLB  0F
28F1:  ADDWF  5E,F
28F2:  MOVF   79,W
28F3:  ADDWFC 5F,F
28F4:  MOVLW  00
28F5:  ADDWFC 60,F
28F6:  ADDWFC 61,F
28F7:  INCF   64,F
28F8:  GOTO   0E1
....................          }    
....................          
....................          current = current / 10; // average the current value
28F9:  BCF    03.1
28FA:  MOVF   61,W
28FB:  MOVLB  11
28FC:  MOVWF  63
28FD:  MOVLB  0F
28FE:  MOVF   60,W
28FF:  MOVLB  11
2900:  MOVWF  62
2901:  MOVLB  0F
2902:  MOVF   5F,W
2903:  MOVLB  11
2904:  MOVWF  61
2905:  MOVLB  0F
2906:  MOVF   5E,W
2907:  MOVLB  11
2908:  MOVWF  60
2909:  CLRF   67
290A:  CLRF   66
290B:  CLRF   65
290C:  MOVLW  0A
290D:  MOVWF  64
290E:  MOVLP  20
290F:  MOVLB  00
2910:  CALL   62E
2911:  MOVLP  28
2912:  MOVF   7A,W
2913:  MOVLB  0F
2914:  MOVWF  61
2915:  MOVF   79,W
2916:  MOVWF  60
2917:  MOVF   78,W
2918:  MOVWF  5F
2919:  MOVF   77,W
291A:  MOVWF  5E
.................... 
....................          delay_us(10); // wait for the ADC to stabilize
291B:  MOVLW  0D
291C:  MOVWF  77
291D:  DECFSZ 77,F
291E:  GOTO   11D
....................          data_buffer[count*2+1] = current; // store the current value in the buffer
291F:  BCF    03.0
2920:  RLF    62,W
2921:  MOVWF  66
2922:  RLF    63,W
2923:  MOVWF  67
2924:  MOVLW  01
2925:  ADDWF  66,F
2926:  MOVLW  00
2927:  ADDWFC 67,F
2928:  BCF    03.0
2929:  RLF    66,W
292A:  MOVWF  79
292B:  RLF    67,W
292C:  MOVWF  7A
292D:  MOVF   79,W
292E:  ADDLW  3A
292F:  MOVWF  04
2930:  MOVLW  20
2931:  ADDWFC 7A,W
2932:  MOVWF  05
2933:  MOVF   5E,W
2934:  MOVWF  00
2935:  MOVF   5F,W
2936:  MOVWI  W,[FSR0+01]
2937:  INCF   62,F
2938:  BTFSC  03.2
2939:  INCF   63,F
293A:  GOTO   08F
....................          //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................       fprintf(PC, "END SWEEP\r\n");
293B:  MOVLW  AE
293C:  MOVLB  03
293D:  MOVWF  11
293E:  MOVLW  03
293F:  MOVWF  12
2940:  MOVLP  08
2941:  MOVLB  00
2942:  CALL   045
2943:  MOVLP  28
....................       // read PD value
....................       set_adc_channel(PD);
2944:  MOVLW  00
2945:  MOVWF  78
2946:  MOVLB  01
2947:  MOVF   1D,W
2948:  ANDLW  83
2949:  IORWF  78,W
294A:  MOVWF  1D
294B:  MOVLW  0F
294C:  MOVWF  78
294D:  MOVF   1F,W
294E:  ANDLW  F0
294F:  IORWF  78,W
2950:  MOVWF  1F
....................       measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
2951:  BSF    1D.1
2952:  BTFSC  1D.1
2953:  GOTO   152
2954:  MOVLB  0C
2955:  CLRF   31
2956:  MOVLB  01
2957:  MOVF   1C,W
2958:  MOVLB  0C
2959:  MOVWF  30
.................... 
....................       convert_cigs_data(measurement_step);
295A:  MOVLB  0F
295B:  MOVF   5D,W
295C:  MOVWF  66
....................       //convert_header_data();    
....................       output_low(CONNECT_CIGS);
*
2ABA:  MOVLB  01
2ABB:  BCF    0E.0
2ABC:  MOVLB  02
2ABD:  BCF    0E.0
2ABE:  MOVLB  00
2ABF:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
17AA:  MOVLW  E9
17AB:  MOVLB  03
17AC:  MOVWF  11
17AD:  MOVLW  03
17AE:  MOVWF  12
17AF:  MOVLP  08
17B0:  MOVLB  00
17B1:  CALL   045
17B2:  MOVLP  10
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
17B3:  MOVLB  0F
17B4:  MOVF   5D,W
17B5:  MOVWF  04
17B6:  MOVF   5E,W
17B7:  MOVWF  05
17B8:  MOVIW  [FSR0+00],W
17B9:  MOVWF  5F
....................    piclog_make(cmd, 0x00); // Log the command execution
17BA:  MOVF   5F,W
17BB:  MOVLB  10
17BC:  MOVWF  65
17BD:  CLRF   66
17BE:  MOVLB  00
17BF:  CALL   340
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
17C0:  MOVLB  0F
17C1:  CLRF   63
17C2:  CLRF   62
17C3:  CLRF   61
17C4:  CLRF   60
17C5:  MOVF   63,F
17C6:  BTFSS  03.2
17C7:  GOTO   7F4
17C8:  MOVF   62,W
17C9:  SUBLW  F4
17CA:  BTFSS  03.0
17CB:  GOTO   7F4
17CC:  BTFSS  03.2
17CD:  GOTO   7D2
17CE:  MOVF   61,W
17CF:  SUBLW  23
17D0:  BTFSS  03.0
17D1:  GOTO   7F4
....................       sector_erase(mis_fm, address); // Erase each sector
17D2:  MOVLB  0D
17D3:  MOVF   45,W
17D4:  MOVLB  0F
17D5:  MOVWF  68
17D6:  MOVLB  0D
17D7:  MOVF   44,W
17D8:  MOVLB  0F
17D9:  MOVWF  67
17DA:  MOVLB  0D
17DB:  MOVF   43,W
17DC:  MOVLB  0F
17DD:  MOVWF  66
17DE:  MOVLB  0D
17DF:  MOVF   42,W
17E0:  MOVLB  0F
17E1:  MOVWF  65
17E2:  MOVF   63,W
17E3:  MOVWF  6C
17E4:  MOVF   62,W
17E5:  MOVWF  6B
17E6:  MOVF   61,W
17E7:  MOVWF  6A
17E8:  MOVF   60,W
17E9:  MOVWF  69
17EA:  MOVLP  18
17EB:  MOVLB  00
17EC:  CALL   245
17ED:  MOVLP  10
17EE:  MOVLW  01
17EF:  MOVLB  0F
17F0:  ADDWF  62,F
17F1:  MOVLW  00
17F2:  ADDWFC 63,F
17F3:  GOTO   7C5
....................    }
....................    fprintf(PC, "End Flash Erase All\r\n");
17F4:  MOVLW  F5
17F5:  MOVLB  03
17F6:  MOVWF  11
17F7:  MOVLW  03
17F8:  MOVWF  12
17F9:  MOVLP  08
17FA:  MOVLB  00
17FB:  CALL   045
17FC:  MOVLP  10
17FD:  MOVLP  20
17FE:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
*
1C1A:  MOVLW  00
1C1B:  MOVLB  03
1C1C:  MOVWF  11
1C1D:  MOVLW  04
1C1E:  MOVWF  12
1C1F:  MOVLP  08
1C20:  MOVLB  00
1C21:  CALL   045
1C22:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1C23:  MOVLB  0F
1C24:  MOVF   5D,W
1C25:  MOVWF  04
1C26:  MOVF   5E,W
1C27:  MOVWF  05
1C28:  ADDFSR 00,FSR0
1C29:  MOVF   00,W
1C2A:  MOVWF  5F
1C2B:  MOVF   5D,W
1C2C:  MOVWF  04
1C2D:  MOVF   5E,W
1C2E:  MOVWF  05
1C2F:  ADDFSR 01,FSR0
1C30:  MOVF   00,W
1C31:  CLRF   68
1C32:  CLRF   67
1C33:  CLRF   66
1C34:  MOVWF  65
1C35:  MOVWF  68
1C36:  CLRF   65
1C37:  CLRF   66
1C38:  CLRF   67
1C39:  MOVF   5D,W
1C3A:  MOVWF  04
1C3B:  MOVF   5E,W
1C3C:  MOVWF  05
1C3D:  ADDFSR 02,FSR0
1C3E:  MOVF   00,W
1C3F:  CLRF   6D
1C40:  CLRF   6C
1C41:  CLRF   6B
1C42:  MOVWF  6A
1C43:  MOVF   6B,W
1C44:  MOVWF  7A
1C45:  MOVF   6A,W
1C46:  MOVWF  79
1C47:  CLRF   77
1C48:  CLRF   78
1C49:  MOVF   77,W
1C4A:  IORWF  65,F
1C4B:  MOVF   78,W
1C4C:  IORWF  66,F
1C4D:  MOVF   6A,W
1C4E:  IORWF  67,F
1C4F:  MOVF   6B,W
1C50:  IORWF  68,F
1C51:  MOVF   5D,W
1C52:  MOVWF  04
1C53:  MOVF   5E,W
1C54:  MOVWF  05
1C55:  ADDFSR 03,FSR0
1C56:  MOVF   00,W
1C57:  CLRF   6D
1C58:  CLRF   6C
1C59:  CLRF   6B
1C5A:  MOVWF  6A
1C5B:  MOVF   6C,W
1C5C:  MOVWF  7A
1C5D:  MOVF   6B,W
1C5E:  MOVWF  79
1C5F:  MOVF   6A,W
1C60:  MOVWF  78
1C61:  CLRF   77
1C62:  MOVF   77,W
1C63:  IORWF  65,F
1C64:  MOVF   6A,W
1C65:  IORWF  66,F
1C66:  MOVF   6B,W
1C67:  IORWF  67,F
1C68:  MOVF   6C,W
1C69:  IORWF  68,F
1C6A:  MOVF   5D,W
1C6B:  MOVWF  04
1C6C:  MOVF   5E,W
1C6D:  MOVWF  05
1C6E:  MOVIW  [FSR0+04],W
1C6F:  MOVWF  77
1C70:  CLRF   78
1C71:  CLRF   79
1C72:  CLRF   7A
1C73:  MOVF   77,W
1C74:  IORWF  65,W
1C75:  MOVWF  60
1C76:  MOVF   78,W
1C77:  IORWF  66,W
1C78:  MOVWF  61
1C79:  MOVF   79,W
1C7A:  IORWF  67,W
1C7B:  MOVWF  62
1C7C:  MOVF   7A,W
1C7D:  IORWF  68,W
1C7E:  MOVWF  63
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
1C7F:  MOVLW  0F
1C80:  MOVLB  03
1C81:  MOVWF  11
1C82:  MOVLW  04
1C83:  MOVWF  12
1C84:  BCF    03.0
1C85:  MOVLW  13
1C86:  MOVLB  11
1C87:  MOVWF  51
1C88:  MOVLP  08
1C89:  MOVLB  00
1C8A:  CALL   327
1C8B:  MOVLP  18
1C8C:  MOVLB  0F
1C8D:  MOVF   63,W
1C8E:  MOVLB  11
1C8F:  MOVWF  51
1C90:  MOVLW  37
1C91:  MOVWF  52
1C92:  MOVLP  08
1C93:  MOVLB  00
1C94:  CALL   381
1C95:  MOVLP  18
1C96:  MOVLB  0F
1C97:  MOVF   62,W
1C98:  MOVLB  11
1C99:  MOVWF  51
1C9A:  MOVLW  37
1C9B:  MOVWF  52
1C9C:  MOVLP  08
1C9D:  MOVLB  00
1C9E:  CALL   381
1C9F:  MOVLP  18
1CA0:  MOVLB  0F
1CA1:  MOVF   61,W
1CA2:  MOVLB  11
1CA3:  MOVWF  51
1CA4:  MOVLW  37
1CA5:  MOVWF  52
1CA6:  MOVLP  08
1CA7:  MOVLB  00
1CA8:  CALL   381
1CA9:  MOVLP  18
1CAA:  MOVLB  0F
1CAB:  MOVF   60,W
1CAC:  MOVLB  11
1CAD:  MOVWF  51
1CAE:  MOVLW  37
1CAF:  MOVWF  52
1CB0:  MOVLP  08
1CB1:  MOVLB  00
1CB2:  CALL   381
1CB3:  MOVLP  18
1CB4:  MOVLW  0D
1CB5:  MOVLB  13
1CB6:  MOVWF  2B
1CB7:  MOVLP  08
1CB8:  MOVLB  00
1CB9:  CALL   020
1CBA:  MOVLP  18
1CBB:  MOVLW  0A
1CBC:  MOVLB  13
1CBD:  MOVWF  2B
1CBE:  MOVLP  08
1CBF:  MOVLB  00
1CC0:  CALL   020
1CC1:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1CC2:  MOVLB  0F
1CC3:  MOVF   5F,W
1CC4:  MOVLB  10
1CC5:  MOVWF  65
1CC6:  CLRF   66
1CC7:  MOVLP  10
1CC8:  MOVLB  00
1CC9:  CALL   340
1CCA:  MOVLP  18
....................    
....................    sector_erase(mis_fm, sector_address);
1CCB:  MOVLB  0D
1CCC:  MOVF   45,W
1CCD:  MOVLB  0F
1CCE:  MOVWF  68
1CCF:  MOVLB  0D
1CD0:  MOVF   44,W
1CD1:  MOVLB  0F
1CD2:  MOVWF  67
1CD3:  MOVLB  0D
1CD4:  MOVF   43,W
1CD5:  MOVLB  0F
1CD6:  MOVWF  66
1CD7:  MOVLB  0D
1CD8:  MOVF   42,W
1CD9:  MOVLB  0F
1CDA:  MOVWF  65
1CDB:  MOVF   63,W
1CDC:  MOVWF  6C
1CDD:  MOVF   62,W
1CDE:  MOVWF  6B
1CDF:  MOVF   61,W
1CE0:  MOVWF  6A
1CE1:  MOVF   60,W
1CE2:  MOVWF  69
1CE3:  MOVLB  00
1CE4:  CALL   245
....................    
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
1CE5:  MOVLW  1D
1CE6:  MOVLB  03
1CE7:  MOVWF  11
1CE8:  MOVLW  04
1CE9:  MOVWF  12
1CEA:  MOVLP  08
1CEB:  MOVLB  00
1CEC:  CALL   045
1CED:  MOVLP  18
1CEE:  MOVLP  20
1CEF:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
1CF0:  MOVLW  2B
1CF1:  MOVLB  03
1CF2:  MOVWF  11
1CF3:  MOVLW  04
1CF4:  MOVWF  12
1CF5:  MOVLP  08
1CF6:  MOVLB  00
1CF7:  CALL   045
1CF8:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1CF9:  MOVLB  0F
1CFA:  MOVF   5D,W
1CFB:  MOVWF  04
1CFC:  MOVF   5E,W
1CFD:  MOVWF  05
1CFE:  ADDFSR 00,FSR0
1CFF:  MOVF   00,W
1D00:  MOVWF  5F
1D01:  MOVF   5D,W
1D02:  MOVWF  04
1D03:  MOVF   5E,W
1D04:  MOVWF  05
1D05:  ADDFSR 01,FSR0
1D06:  MOVF   00,W
1D07:  CLRF   68
1D08:  CLRF   67
1D09:  CLRF   66
1D0A:  MOVWF  65
1D0B:  MOVWF  68
1D0C:  CLRF   65
1D0D:  CLRF   66
1D0E:  CLRF   67
1D0F:  MOVF   5D,W
1D10:  MOVWF  04
1D11:  MOVF   5E,W
1D12:  MOVWF  05
1D13:  ADDFSR 02,FSR0
1D14:  MOVF   00,W
1D15:  CLRF   6D
1D16:  CLRF   6C
1D17:  CLRF   6B
1D18:  MOVWF  6A
1D19:  MOVF   6B,W
1D1A:  MOVWF  7A
1D1B:  MOVF   6A,W
1D1C:  MOVWF  79
1D1D:  CLRF   77
1D1E:  CLRF   78
1D1F:  MOVF   77,W
1D20:  IORWF  65,F
1D21:  MOVF   78,W
1D22:  IORWF  66,F
1D23:  MOVF   6A,W
1D24:  IORWF  67,F
1D25:  MOVF   6B,W
1D26:  IORWF  68,F
1D27:  MOVF   5D,W
1D28:  MOVWF  04
1D29:  MOVF   5E,W
1D2A:  MOVWF  05
1D2B:  ADDFSR 03,FSR0
1D2C:  MOVF   00,W
1D2D:  CLRF   6D
1D2E:  CLRF   6C
1D2F:  CLRF   6B
1D30:  MOVWF  6A
1D31:  MOVF   6C,W
1D32:  MOVWF  7A
1D33:  MOVF   6B,W
1D34:  MOVWF  79
1D35:  MOVF   6A,W
1D36:  MOVWF  78
1D37:  CLRF   77
1D38:  MOVF   77,W
1D39:  IORWF  65,F
1D3A:  MOVF   6A,W
1D3B:  IORWF  66,F
1D3C:  MOVF   6B,W
1D3D:  IORWF  67,F
1D3E:  MOVF   6C,W
1D3F:  IORWF  68,F
1D40:  MOVF   5D,W
1D41:  MOVWF  04
1D42:  MOVF   5E,W
1D43:  MOVWF  05
1D44:  MOVIW  [FSR0+04],W
1D45:  MOVWF  77
1D46:  CLRF   78
1D47:  CLRF   79
1D48:  CLRF   7A
1D49:  MOVF   77,W
1D4A:  IORWF  65,W
1D4B:  MOVWF  60
1D4C:  MOVF   78,W
1D4D:  IORWF  66,W
1D4E:  MOVWF  61
1D4F:  MOVF   79,W
1D50:  IORWF  67,W
1D51:  MOVWF  62
1D52:  MOVF   7A,W
1D53:  IORWF  68,W
1D54:  MOVWF  63
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
1D55:  MOVLW  39
1D56:  MOVLB  03
1D57:  MOVWF  11
1D58:  MOVLW  04
1D59:  MOVWF  12
1D5A:  BCF    03.0
1D5B:  MOVLW  16
1D5C:  MOVLB  11
1D5D:  MOVWF  51
1D5E:  MOVLP  08
1D5F:  MOVLB  00
1D60:  CALL   327
1D61:  MOVLP  18
1D62:  MOVLB  0F
1D63:  MOVF   63,W
1D64:  MOVLB  11
1D65:  MOVWF  51
1D66:  MOVLW  37
1D67:  MOVWF  52
1D68:  MOVLP  08
1D69:  MOVLB  00
1D6A:  CALL   381
1D6B:  MOVLP  18
1D6C:  MOVLB  0F
1D6D:  MOVF   62,W
1D6E:  MOVLB  11
1D6F:  MOVWF  51
1D70:  MOVLW  37
1D71:  MOVWF  52
1D72:  MOVLP  08
1D73:  MOVLB  00
1D74:  CALL   381
1D75:  MOVLP  18
1D76:  MOVLB  0F
1D77:  MOVF   61,W
1D78:  MOVLB  11
1D79:  MOVWF  51
1D7A:  MOVLW  37
1D7B:  MOVWF  52
1D7C:  MOVLP  08
1D7D:  MOVLB  00
1D7E:  CALL   381
1D7F:  MOVLP  18
1D80:  MOVLB  0F
1D81:  MOVF   60,W
1D82:  MOVLB  11
1D83:  MOVWF  51
1D84:  MOVLW  37
1D85:  MOVWF  52
1D86:  MOVLP  08
1D87:  MOVLB  00
1D88:  CALL   381
1D89:  MOVLP  18
1D8A:  MOVLW  0D
1D8B:  MOVLB  13
1D8C:  MOVWF  2B
1D8D:  MOVLP  08
1D8E:  MOVLB  00
1D8F:  CALL   020
1D90:  MOVLP  18
1D91:  MOVLW  0A
1D92:  MOVLB  13
1D93:  MOVWF  2B
1D94:  MOVLP  08
1D95:  MOVLB  00
1D96:  CALL   020
1D97:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1D98:  MOVLB  0F
1D99:  MOVF   5F,W
1D9A:  MOVLB  10
1D9B:  MOVWF  65
1D9C:  CLRF   66
1D9D:  MOVLP  10
1D9E:  MOVLB  00
1D9F:  CALL   340
1DA0:  MOVLP  18
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
1DA1:  MOVLB  0D
1DA2:  MOVF   45,W
1DA3:  MOVLB  11
1DA4:  MOVWF  6E
1DA5:  MOVLB  0D
1DA6:  MOVF   44,W
1DA7:  MOVLB  11
1DA8:  MOVWF  6D
1DA9:  MOVLB  0D
1DAA:  MOVF   43,W
1DAB:  MOVLB  11
1DAC:  MOVWF  6C
1DAD:  MOVLB  0D
1DAE:  MOVF   42,W
1DAF:  MOVLB  11
1DB0:  MOVWF  6B
1DB1:  MOVLB  12
1DB2:  CLRF   23
1DB3:  CLRF   22
1DB4:  CLRF   21
1DB5:  CLRF   20
1DB6:  MOVLP  10
1DB7:  MOVLB  00
1DB8:  CALL   199
1DB9:  MOVLP  18
....................    
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
1DBA:  MOVLW  48
1DBB:  MOVLB  03
1DBC:  MOVWF  11
1DBD:  MOVLW  04
1DBE:  MOVWF  12
1DBF:  MOVLP  08
1DC0:  MOVLB  00
1DC1:  CALL   045
1DC2:  MOVLP  18
1DC3:  MOVLP  20
1DC4:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
1DC5:  MOVLW  55
1DC6:  MOVLB  03
1DC7:  MOVWF  11
1DC8:  MOVLW  04
1DC9:  MOVWF  12
1DCA:  MOVLP  08
1DCB:  MOVLB  00
1DCC:  CALL   045
1DCD:  MOVLP  18
....................    FLASH_WRITE_PARAM flash_write_param = {0};
1DCE:  MOVLB  0F
1DCF:  CLRF   5F
1DD0:  CLRF   60
1DD1:  CLRF   61
1DD2:  CLRF   62
1DD3:  CLRF   63
1DD4:  CLRF   64
1DD5:  CLRF   65
....................    
....................    flash_write_param.id = parameter[0];
1DD6:  MOVF   5D,W
1DD7:  MOVWF  04
1DD8:  MOVF   5E,W
1DD9:  MOVWF  05
1DDA:  MOVIW  [FSR0+00],W
1DDB:  MOVWF  5F
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
1DDC:  MOVF   5D,W
1DDD:  MOVWF  04
1DDE:  MOVF   5E,W
1DDF:  MOVWF  05
1DE0:  ADDFSR 01,FSR0
1DE1:  MOVF   00,W
1DE2:  MOVLB  10
1DE3:  CLRF   68
1DE4:  CLRF   67
1DE5:  CLRF   66
1DE6:  MOVWF  65
1DE7:  MOVWF  68
1DE8:  CLRF   65
1DE9:  CLRF   66
1DEA:  CLRF   67
1DEB:  MOVLB  0F
1DEC:  MOVF   5D,W
1DED:  MOVWF  04
1DEE:  MOVF   5E,W
1DEF:  MOVWF  05
1DF0:  ADDFSR 02,FSR0
1DF1:  MOVF   00,W
1DF2:  MOVLB  10
1DF3:  CLRF   6D
1DF4:  CLRF   6C
1DF5:  CLRF   6B
1DF6:  MOVWF  6A
1DF7:  MOVF   6B,W
1DF8:  MOVWF  7A
1DF9:  MOVF   6A,W
1DFA:  MOVWF  79
1DFB:  CLRF   77
1DFC:  CLRF   78
1DFD:  MOVF   77,W
1DFE:  IORWF  65,F
1DFF:  MOVF   78,W
1E00:  IORWF  66,F
1E01:  MOVF   6A,W
1E02:  IORWF  67,F
1E03:  MOVF   6B,W
1E04:  IORWF  68,F
1E05:  MOVLB  0F
1E06:  MOVF   5D,W
1E07:  MOVWF  04
1E08:  MOVF   5E,W
1E09:  MOVWF  05
1E0A:  ADDFSR 03,FSR0
1E0B:  MOVF   00,W
1E0C:  MOVLB  10
1E0D:  CLRF   6D
1E0E:  CLRF   6C
1E0F:  CLRF   6B
1E10:  MOVWF  6A
1E11:  MOVF   6C,W
1E12:  MOVWF  7A
1E13:  MOVF   6B,W
1E14:  MOVWF  79
1E15:  MOVF   6A,W
1E16:  MOVWF  78
1E17:  CLRF   77
1E18:  MOVF   77,W
1E19:  IORWF  65,F
1E1A:  MOVF   6A,W
1E1B:  IORWF  66,F
1E1C:  MOVF   6B,W
1E1D:  IORWF  67,F
1E1E:  MOVF   6C,W
1E1F:  IORWF  68,F
1E20:  MOVLB  0F
1E21:  MOVF   5D,W
1E22:  MOVWF  04
1E23:  MOVF   5E,W
1E24:  MOVWF  05
1E25:  MOVIW  [FSR0+04],W
1E26:  MOVWF  77
1E27:  CLRF   78
1E28:  CLRF   79
1E29:  CLRF   7A
1E2A:  MOVF   77,W
1E2B:  MOVLB  10
1E2C:  IORWF  65,W
1E2D:  MOVLB  0F
1E2E:  MOVWF  60
1E2F:  MOVF   78,W
1E30:  MOVLB  10
1E31:  IORWF  66,W
1E32:  MOVLB  0F
1E33:  MOVWF  61
1E34:  MOVF   79,W
1E35:  MOVLB  10
1E36:  IORWF  67,W
1E37:  MOVLB  0F
1E38:  MOVWF  62
1E39:  MOVF   7A,W
1E3A:  MOVLB  10
1E3B:  IORWF  68,W
1E3C:  MOVLB  0F
1E3D:  MOVWF  63
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
1E3E:  MOVF   5D,W
1E3F:  MOVWF  04
1E40:  MOVF   5E,W
1E41:  MOVWF  05
1E42:  ADDFSR 07,FSR0
1E43:  MOVF   00,W
1E44:  MOVLB  10
1E45:  CLRF   66
1E46:  MOVWF  65
1E47:  MOVWF  66
1E48:  CLRF   65
1E49:  MOVLB  0F
1E4A:  MOVF   5D,W
1E4B:  MOVWF  04
1E4C:  MOVF   5E,W
1E4D:  MOVWF  05
1E4E:  MOVIW  [FSR0+08],W
1E4F:  CLRF   7A
1E50:  MOVLB  10
1E51:  IORWF  65,W
1E52:  MOVLB  0F
1E53:  MOVWF  64
1E54:  MOVF   7A,W
1E55:  MOVLB  10
1E56:  IORWF  66,W
1E57:  MOVLB  0F
1E58:  MOVWF  65
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
1E59:  MOVLW  62
1E5A:  MOVLB  03
1E5B:  MOVWF  11
1E5C:  MOVLW  04
1E5D:  MOVWF  12
1E5E:  BCF    03.0
1E5F:  MOVLW  0C
1E60:  MOVLB  11
1E61:  MOVWF  51
1E62:  MOVLP  08
1E63:  MOVLB  00
1E64:  CALL   327
1E65:  MOVLP  18
1E66:  MOVLB  0F
1E67:  MOVF   5F,W
1E68:  MOVLB  11
1E69:  MOVWF  51
1E6A:  MOVLW  37
1E6B:  MOVWF  52
1E6C:  MOVLP  08
1E6D:  MOVLB  00
1E6E:  CALL   381
1E6F:  MOVLP  18
1E70:  MOVLW  0D
1E71:  MOVLB  13
1E72:  MOVWF  2B
1E73:  MOVLP  08
1E74:  MOVLB  00
1E75:  CALL   020
1E76:  MOVLP  18
1E77:  MOVLW  0A
1E78:  MOVLB  13
1E79:  MOVWF  2B
1E7A:  MOVLP  08
1E7B:  MOVLB  00
1E7C:  CALL   020
1E7D:  MOVLP  18
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
1E7E:  MOVLW  6C
1E7F:  MOVLB  03
1E80:  MOVWF  11
1E81:  MOVLW  04
1E82:  MOVWF  12
1E83:  BCF    03.0
1E84:  MOVLW  0E
1E85:  MOVLB  11
1E86:  MOVWF  51
1E87:  MOVLP  08
1E88:  MOVLB  00
1E89:  CALL   327
1E8A:  MOVLP  18
1E8B:  MOVLB  0F
1E8C:  MOVF   63,W
1E8D:  MOVLB  11
1E8E:  MOVWF  51
1E8F:  MOVLW  37
1E90:  MOVWF  52
1E91:  MOVLP  08
1E92:  MOVLB  00
1E93:  CALL   381
1E94:  MOVLP  18
1E95:  MOVLB  0F
1E96:  MOVF   62,W
1E97:  MOVLB  11
1E98:  MOVWF  51
1E99:  MOVLW  37
1E9A:  MOVWF  52
1E9B:  MOVLP  08
1E9C:  MOVLB  00
1E9D:  CALL   381
1E9E:  MOVLP  18
1E9F:  MOVLB  0F
1EA0:  MOVF   61,W
1EA1:  MOVLB  11
1EA2:  MOVWF  51
1EA3:  MOVLW  37
1EA4:  MOVWF  52
1EA5:  MOVLP  08
1EA6:  MOVLB  00
1EA7:  CALL   381
1EA8:  MOVLP  18
1EA9:  MOVLB  0F
1EAA:  MOVF   60,W
1EAB:  MOVLB  11
1EAC:  MOVWF  51
1EAD:  MOVLW  37
1EAE:  MOVWF  52
1EAF:  MOVLP  08
1EB0:  MOVLB  00
1EB1:  CALL   381
1EB2:  MOVLP  18
1EB3:  MOVLW  0D
1EB4:  MOVLB  13
1EB5:  MOVWF  2B
1EB6:  MOVLP  08
1EB7:  MOVLB  00
1EB8:  CALL   020
1EB9:  MOVLP  18
1EBA:  MOVLW  0A
1EBB:  MOVLB  13
1EBC:  MOVWF  2B
1EBD:  MOVLP  08
1EBE:  MOVLB  00
1EBF:  CALL   020
1EC0:  MOVLP  18
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
1EC1:  MOVLW  77
1EC2:  MOVLB  03
1EC3:  MOVWF  11
1EC4:  MOVLW  04
1EC5:  MOVWF  12
1EC6:  BCF    03.0
1EC7:  MOVLW  0E
1EC8:  MOVLB  11
1EC9:  MOVWF  51
1ECA:  MOVLP  08
1ECB:  MOVLB  00
1ECC:  CALL   327
1ECD:  MOVLP  18
1ECE:  MOVLB  0F
1ECF:  MOVF   65,W
1ED0:  MOVLB  11
1ED1:  MOVWF  51
1ED2:  MOVLW  37
1ED3:  MOVWF  52
1ED4:  MOVLP  08
1ED5:  MOVLB  00
1ED6:  CALL   381
1ED7:  MOVLP  18
1ED8:  MOVLB  0F
1ED9:  MOVF   64,W
1EDA:  MOVLB  11
1EDB:  MOVWF  51
1EDC:  MOVLW  37
1EDD:  MOVWF  52
1EDE:  MOVLP  08
1EDF:  MOVLB  00
1EE0:  CALL   381
1EE1:  MOVLP  18
1EE2:  MOVLW  0D
1EE3:  MOVLB  13
1EE4:  MOVWF  2B
1EE5:  MOVLP  08
1EE6:  MOVLB  00
1EE7:  CALL   020
1EE8:  MOVLP  18
1EE9:  MOVLW  0A
1EEA:  MOVLB  13
1EEB:  MOVWF  2B
1EEC:  MOVLP  08
1EED:  MOVLB  00
1EEE:  CALL   020
1EEF:  MOVLP  18
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
1EF0:  MOVLB  0F
1EF1:  MOVF   5F,W
1EF2:  MOVLB  10
1EF3:  MOVWF  65
1EF4:  CLRF   66
1EF5:  MOVLP  10
1EF6:  MOVLB  00
1EF7:  CALL   340
1EF8:  MOVLP  18
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
1EF9:  MOVLW  82
1EFA:  MOVLB  03
1EFB:  MOVWF  11
1EFC:  MOVLW  04
1EFD:  MOVWF  12
1EFE:  MOVLP  08
1EFF:  MOVLB  00
1F00:  CALL   045
1F01:  MOVLP  18
....................    for (p = 0; p < flash_write_param.packetnum; p++)
1F02:  MOVLB  10
1F03:  CLRF   57
1F04:  CLRF   56
1F05:  MOVF   57,W
1F06:  MOVLB  0F
1F07:  SUBWF  65,W
1F08:  BTFSS  03.0
1F09:  GOTO   7AA
1F0A:  BTFSS  03.2
1F0B:  GOTO   714
1F0C:  MOVF   64,W
1F0D:  MOVLB  10
1F0E:  SUBWF  56,W
1F0F:  BTFSS  03.0
1F10:  GOTO   713
1F11:  MOVLB  0F
1F12:  GOTO   7AA
1F13:  MOVLB  0F
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
1F14:  MOVLB  10
1F15:  RLF    56,W
1F16:  MOVWF  58
1F17:  RLF    57,W
1F18:  MOVWF  59
1F19:  RLF    58,F
1F1A:  RLF    59,F
1F1B:  RLF    58,F
1F1C:  RLF    59,F
1F1D:  RLF    58,F
1F1E:  RLF    59,F
1F1F:  RLF    58,F
1F20:  RLF    59,F
1F21:  RLF    58,F
1F22:  RLF    59,F
1F23:  MOVLW  C0
1F24:  ANDWF  58,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
1F25:  CLRF   5A
1F26:  MOVF   5A,W
1F27:  SUBLW  3F
1F28:  BTFSS  03.0
1F29:  GOTO   755
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
1F2A:  MOVLW  F6
1F2B:  ADDWF  5A,W
1F2C:  MOVWF  04
1F2D:  MOVLW  24
1F2E:  MOVWF  05
1F2F:  BTFSC  03.0
1F30:  INCF   05,F
1F31:  MOVF   5A,W
1F32:  ADDWF  58,W
1F33:  MOVWF  67
1F34:  MOVLW  00
1F35:  ADDWFC 59,W
1F36:  MOVWF  68
1F37:  CLRF   7A
1F38:  MOVF   67,W
1F39:  MOVWF  00
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
1F3A:  MOVLW  F6
1F3B:  ADDWF  5A,W
1F3C:  MOVWF  04
1F3D:  MOVLW  24
1F3E:  MOVWF  05
1F3F:  BTFSC  03.0
1F40:  INCF   05,F
1F41:  MOVF   00,W
1F42:  MOVWF  65
1F43:  MOVLB  11
1F44:  MOVWF  51
1F45:  MOVLW  37
1F46:  MOVWF  52
1F47:  MOVLP  08
1F48:  MOVLB  00
1F49:  CALL   381
1F4A:  MOVLP  18
1F4B:  MOVLW  20
1F4C:  MOVLB  13
1F4D:  MOVWF  2B
1F4E:  MOVLP  08
1F4F:  MOVLB  00
1F50:  CALL   020
1F51:  MOVLP  18
1F52:  MOVLB  10
1F53:  INCF   5A,F
1F54:  GOTO   726
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
1F55:  RLF    56,W
1F56:  MOVWF  79
1F57:  RLF    57,W
1F58:  MOVWF  7A
1F59:  RLF    79,F
1F5A:  RLF    7A,F
1F5B:  RLF    79,F
1F5C:  RLF    7A,F
1F5D:  RLF    79,F
1F5E:  RLF    7A,F
1F5F:  RLF    79,F
1F60:  RLF    7A,F
1F61:  RLF    79,F
1F62:  RLF    7A,F
1F63:  MOVLW  C0
1F64:  ANDWF  79,F
1F65:  MOVF   79,W
1F66:  MOVLB  0F
1F67:  ADDWF  60,W
1F68:  MOVLB  10
1F69:  MOVWF  5B
1F6A:  MOVF   7A,W
1F6B:  MOVLB  0F
1F6C:  ADDWFC 61,W
1F6D:  MOVLB  10
1F6E:  MOVWF  5C
1F6F:  MOVLW  00
1F70:  MOVLB  0F
1F71:  ADDWFC 62,W
1F72:  MOVLB  10
1F73:  MOVWF  5D
1F74:  MOVLW  00
1F75:  MOVLB  0F
1F76:  ADDWFC 63,W
1F77:  MOVLB  10
1F78:  MOVWF  5E
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
1F79:  MOVLB  0D
1F7A:  MOVF   45,W
1F7B:  MOVLB  13
1F7C:  MOVWF  2A
1F7D:  MOVLB  0D
1F7E:  MOVF   44,W
1F7F:  MOVLB  13
1F80:  MOVWF  29
1F81:  MOVLB  0D
1F82:  MOVF   43,W
1F83:  MOVLB  13
1F84:  MOVWF  28
1F85:  MOVLB  0D
1F86:  MOVF   42,W
1F87:  MOVLB  13
1F88:  MOVWF  27
1F89:  MOVLB  10
1F8A:  MOVF   5E,W
1F8B:  MOVLB  13
1F8C:  MOVWF  2E
1F8D:  MOVLB  10
1F8E:  MOVF   5D,W
1F8F:  MOVLB  13
1F90:  MOVWF  2D
1F91:  MOVLB  10
1F92:  MOVF   5C,W
1F93:  MOVLB  13
1F94:  MOVWF  2C
1F95:  MOVLB  10
1F96:  MOVF   5B,W
1F97:  MOVLB  13
1F98:  MOVWF  2B
1F99:  MOVLW  24
1F9A:  MOVWF  30
1F9B:  MOVLW  F6
1F9C:  MOVWF  2F
1F9D:  CLRF   32
1F9E:  MOVLW  40
1F9F:  MOVWF  31
1FA0:  MOVLP  10
1FA1:  MOVLB  00
1FA2:  CALL   000
1FA3:  MOVLP  18
1FA4:  MOVLB  10
1FA5:  INCF   56,F
1FA6:  BTFSC  03.2
1FA7:  INCF   57,F
1FA8:  GOTO   705
1FA9:  MOVLB  0F
....................    }
....................    fprintf(PC, "\r\n");
1FAA:  MOVLW  0D
1FAB:  MOVLB  13
1FAC:  MOVWF  2B
1FAD:  MOVLP  08
1FAE:  MOVLB  00
1FAF:  CALL   020
1FB0:  MOVLP  18
1FB1:  MOVLW  0A
1FB2:  MOVLB  13
1FB3:  MOVWF  2B
1FB4:  MOVLP  08
1FB5:  MOVLB  00
1FB6:  CALL   020
1FB7:  MOVLP  18
....................    fprintf(PC, "End Flash Write Demo\r\n");
1FB8:  MOVLW  89
1FB9:  MOVLB  03
1FBA:  MOVWF  11
1FBB:  MOVLW  04
1FBC:  MOVWF  12
1FBD:  MOVLP  08
1FBE:  MOVLB  00
1FBF:  CALL   045
1FC0:  MOVLP  18
1FC1:  MOVLP  20
1FC2:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
2000:  MOVLW  95
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  04
2004:  MOVWF  12
2005:  MOVLP  08
2006:  MOVLB  00
2007:  CALL   045
2008:  MOVLP  20
....................    flash_setting(mis_fm);
2009:  MOVLB  0D
200A:  MOVF   45,W
200B:  MOVLB  13
200C:  MOVWF  2A
200D:  MOVLB  0D
200E:  MOVF   44,W
200F:  MOVLB  13
2010:  MOVWF  29
2011:  MOVLB  0D
2012:  MOVF   43,W
2013:  MOVLB  13
2014:  MOVWF  28
2015:  MOVLB  0D
2016:  MOVF   42,W
2017:  MOVLB  13
2018:  MOVWF  27
2019:  MOVLP  08
201A:  MOVLB  00
201B:  CALL   7BE
201C:  MOVLP  20
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
201D:  MOVLB  0F
201E:  CLRF   62
201F:  CLRF   61
2020:  CLRF   60
2021:  CLRF   5F
2022:  MOVLW  01
2023:  MOVWF  63
2024:  MOVLW  02
2025:  MOVWF  64
2026:  MOVLW  03
2027:  MOVWF  65
2028:  MOVLW  04
2029:  MOVWF  66
202A:  CLRF   67
202B:  CLRF   68
202C:  CLRF   69
202D:  CLRF   6A
202E:  CLRF   6B
202F:  CLRF   6C
2030:  CLRF   6D
2031:  CLRF   6E
2032:  CLRF   6F
2033:  MOVLB  10
2034:  CLRF   20
2035:  CLRF   21
2036:  CLRF   22
2037:  CLRF   23
2038:  CLRF   24
2039:  CLRF   25
203A:  CLRF   26
203B:  CLRF   27
203C:  CLRF   28
203D:  CLRF   29
203E:  CLRF   2A
203F:  CLRF   2B
2040:  CLRF   2C
2041:  CLRF   2D
2042:  CLRF   2E
2043:  CLRF   2F
2044:  CLRF   30
2045:  CLRF   31
2046:  CLRF   32
2047:  CLRF   33
2048:  CLRF   34
2049:  CLRF   35
204A:  CLRF   36
204B:  CLRF   37
204C:  CLRF   38
204D:  CLRF   39
204E:  CLRF   3A
204F:  CLRF   3B
2050:  CLRF   3C
2051:  CLRF   3D
2052:  CLRF   3E
2053:  CLRF   3F
2054:  CLRF   40
2055:  CLRF   41
2056:  CLRF   42
2057:  CLRF   43
2058:  CLRF   44
2059:  CLRF   45
205A:  CLRF   46
205B:  CLRF   47
205C:  CLRF   48
205D:  CLRF   49
205E:  CLRF   4A
205F:  CLRF   4B
2060:  CLRF   4C
2061:  CLRF   4D
2062:  CLRF   4E
2063:  CLRF   4F
2064:  CLRF   50
2065:  CLRF   51
2066:  CLRF   52
2067:  CLRF   53
2068:  CLRF   54
2069:  CLRF   55
206A:  CLRF   56
206B:  CLRF   57
206C:  CLRF   58
206D:  CLRF   59
206E:  CLRF   5A
206F:  CLRF   5B
2070:  CLRF   5C
2071:  CLRF   5D
2072:  CLRF   5E
2073:  CLRF   5F
2074:  CLRF   60
2075:  CLRF   61
2076:  CLRF   62
2077:  CLRF   63
2078:  CLRF   64
2079:  CLRF   65
207A:  CLRF   66
207B:  CLRF   67
207C:  CLRF   68
207D:  CLRF   69
207E:  CLRF   6A
207F:  CLRF   6B
2080:  CLRF   6C
2081:  CLRF   6D
2082:  CLRF   6E
2083:  CLRF   6F
2084:  MOVLB  11
2085:  CLRF   20
2086:  CLRF   21
2087:  CLRF   22
2088:  CLRF   23
2089:  CLRF   24
208A:  CLRF   25
208B:  CLRF   26
208C:  CLRF   27
208D:  CLRF   28
208E:  CLRF   29
208F:  CLRF   2A
2090:  CLRF   2B
2091:  CLRF   2C
2092:  CLRF   2D
2093:  CLRF   2E
2094:  CLRF   2F
2095:  CLRF   30
2096:  CLRF   31
2097:  CLRF   32
2098:  CLRF   33
2099:  CLRF   34
209A:  CLRF   35
209B:  CLRF   36
209C:  CLRF   37
209D:  CLRF   38
209E:  CLRF   39
209F:  CLRF   3A
20A0:  CLRF   3B
20A1:  CLRF   3C
20A2:  CLRF   3D
20A3:  CLRF   3E
20A4:  CLRF   3F
20A5:  CLRF   40
20A6:  CLRF   41
20A7:  CLRF   42
20A8:  CLRF   43
20A9:  CLRF   44
20AA:  CLRF   45
20AB:  CLRF   46
20AC:  CLRF   47
20AD:  CLRF   48
20AE:  CLRF   49
20AF:  CLRF   4A
20B0:  CLRF   4B
20B1:  CLRF   4C
20B2:  CLRF   4D
20B3:  CLRF   4E
20B4:  CLRF   4F
20B5:  CLRF   50
20B6:  CLRF   51
20B7:  CLRF   52
20B8:  CLRF   53
20B9:  CLRF   54
20BA:  CLRF   55
20BB:  CLRF   56
20BC:  CLRF   57
20BD:  CLRF   58
20BE:  CLRF   59
20BF:  CLRF   5A
20C0:  CLRF   5B
20C1:  CLRF   5C
20C2:  CLRF   5D
20C3:  CLRF   5E
20C4:  CLRF   5F
20C5:  CLRF   60
20C6:  CLRF   61
20C7:  CLRF   62
20C8:  CLRF   63
20C9:  CLRF   64
20CA:  CLRF   65
20CB:  CLRF   66
20CC:  CLRF   67
20CD:  CLRF   68
20CE:  CLRF   69
20CF:  CLRF   6A
20D0:  CLRF   6B
20D1:  CLRF   6C
20D2:  CLRF   6D
20D3:  CLRF   6E
20D4:  CLRF   6F
20D5:  MOVLB  12
20D6:  CLRF   20
20D7:  CLRF   21
20D8:  CLRF   22
20D9:  CLRF   23
20DA:  CLRF   24
20DB:  CLRF   25
20DC:  CLRF   26
20DD:  CLRF   27
20DE:  CLRF   28
20DF:  CLRF   29
20E0:  CLRF   2A
20E1:  CLRF   2B
20E2:  CLRF   2C
20E3:  CLRF   2D
20E4:  CLRF   2E
20E5:  CLRF   2F
20E6:  CLRF   30
20E7:  CLRF   31
20E8:  CLRF   32
20E9:  CLRF   33
20EA:  CLRF   34
20EB:  CLRF   35
20EC:  CLRF   36
20ED:  CLRF   37
20EE:  CLRF   38
20EF:  CLRF   39
20F0:  CLRF   3A
20F1:  CLRF   3B
20F2:  CLRF   3C
20F3:  CLRF   3D
20F4:  CLRF   3E
20F5:  CLRF   3F
20F6:  CLRF   40
20F7:  CLRF   41
20F8:  CLRF   42
20F9:  CLRF   43
20FA:  CLRF   44
20FB:  CLRF   45
20FC:  CLRF   46
20FD:  CLRF   47
20FE:  CLRF   48
20FF:  CLRF   49
2100:  CLRF   4A
2101:  CLRF   4B
2102:  CLRF   4C
2103:  CLRF   4D
2104:  CLRF   4E
2105:  CLRF   4F
2106:  CLRF   50
2107:  CLRF   51
2108:  CLRF   52
2109:  CLRF   53
210A:  CLRF   54
210B:  CLRF   55
210C:  CLRF   56
210D:  CLRF   57
210E:  CLRF   58
210F:  CLRF   59
2110:  CLRF   5A
2111:  CLRF   5B
2112:  CLRF   5C
2113:  CLRF   5D
2114:  CLRF   5E
2115:  CLRF   5F
2116:  CLRF   60
2117:  CLRF   61
2118:  CLRF   62
2119:  CLRF   63
211A:  CLRF   64
211B:  CLRF   65
211C:  CLRF   66
211D:  CLRF   67
211E:  CLRF   68
211F:  CLRF   69
2120:  CLRF   6A
2121:  CLRF   6B
2122:  CLRF   6C
2123:  CLRF   6D
2124:  CLRF   6E
2125:  CLRF   6F
2126:  MOVLB  13
2127:  CLRF   20
2128:  CLRF   21
2129:  CLRF   22
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
212A:  MOVLB  0D
212B:  MOVF   45,W
212C:  MOVLB  13
212D:  MOVWF  2A
212E:  MOVLB  0D
212F:  MOVF   44,W
2130:  MOVLB  13
2131:  MOVWF  29
2132:  MOVLB  0D
2133:  MOVF   43,W
2134:  MOVLB  13
2135:  MOVWF  28
2136:  MOVLB  0D
2137:  MOVF   42,W
2138:  MOVLB  13
2139:  MOVWF  27
213A:  MOVLB  0F
213B:  MOVF   62,W
213C:  MOVLB  13
213D:  MOVWF  2E
213E:  MOVLB  0F
213F:  MOVF   61,W
2140:  MOVLB  13
2141:  MOVWF  2D
2142:  MOVLB  0F
2143:  MOVF   60,W
2144:  MOVLB  13
2145:  MOVWF  2C
2146:  MOVLB  0F
2147:  MOVF   5F,W
2148:  MOVLB  13
2149:  MOVWF  2B
214A:  MOVLW  24
214B:  MOVWF  30
214C:  MOVLW  F3
214D:  MOVWF  2F
214E:  MOVLW  01
214F:  MOVWF  32
2150:  CLRF   31
2151:  MOVLP  10
2152:  MOVLB  00
2153:  CALL   000
2154:  MOVLP  20
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
2155:  MOVLW  A8
2156:  MOVLB  03
2157:  MOVWF  11
2158:  MOVLW  04
2159:  MOVWF  12
215A:  MOVLP  08
215B:  MOVLB  00
215C:  CALL   045
215D:  MOVLP  20
215E:  MOVLP  20
215F:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
2160:  MOVLW  BA
2161:  MOVLB  03
2162:  MOVWF  11
2163:  MOVLW  04
2164:  MOVWF  12
2165:  MOVLP  08
2166:  MOVLB  00
2167:  CALL   045
2168:  MOVLP  20
....................    FLASH_PARAM flash_param = {0};
2169:  MOVLB  0F
216A:  CLRF   5F
216B:  CLRF   60
216C:  CLRF   61
216D:  CLRF   62
216E:  CLRF   63
216F:  CLRF   64
2170:  CLRF   65
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
2171:  MOVF   5D,W
2172:  MOVWF  04
2173:  MOVF   5E,W
2174:  MOVWF  05
2175:  MOVIW  [FSR0+00],W
2176:  MOVWF  5F
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
2177:  MOVF   5D,W
2178:  MOVWF  04
2179:  MOVF   5E,W
217A:  MOVWF  05
217B:  ADDFSR 01,FSR0
217C:  MOVF   00,W
217D:  MOVLB  10
217E:  CLRF   68
217F:  CLRF   67
2180:  CLRF   66
2181:  MOVWF  65
2182:  MOVWF  68
2183:  CLRF   65
2184:  CLRF   66
2185:  CLRF   67
2186:  MOVLB  0F
2187:  MOVF   5D,W
2188:  MOVWF  04
2189:  MOVF   5E,W
218A:  MOVWF  05
218B:  ADDFSR 02,FSR0
218C:  MOVF   00,W
218D:  MOVLB  10
218E:  CLRF   6D
218F:  CLRF   6C
2190:  CLRF   6B
2191:  MOVWF  6A
2192:  MOVF   6B,W
2193:  MOVWF  7A
2194:  MOVF   6A,W
2195:  MOVWF  79
2196:  CLRF   77
2197:  CLRF   78
2198:  MOVF   77,W
2199:  IORWF  65,F
219A:  MOVF   78,W
219B:  IORWF  66,F
219C:  MOVF   6A,W
219D:  IORWF  67,F
219E:  MOVF   6B,W
219F:  IORWF  68,F
21A0:  MOVLB  0F
21A1:  MOVF   5D,W
21A2:  MOVWF  04
21A3:  MOVF   5E,W
21A4:  MOVWF  05
21A5:  ADDFSR 03,FSR0
21A6:  MOVF   00,W
21A7:  MOVLB  10
21A8:  CLRF   6D
21A9:  CLRF   6C
21AA:  CLRF   6B
21AB:  MOVWF  6A
21AC:  MOVF   6C,W
21AD:  MOVWF  7A
21AE:  MOVF   6B,W
21AF:  MOVWF  79
21B0:  MOVF   6A,W
21B1:  MOVWF  78
21B2:  CLRF   77
21B3:  MOVF   77,W
21B4:  IORWF  65,F
21B5:  MOVF   6A,W
21B6:  IORWF  66,F
21B7:  MOVF   6B,W
21B8:  IORWF  67,F
21B9:  MOVF   6C,W
21BA:  IORWF  68,F
21BB:  MOVLB  0F
21BC:  MOVF   5D,W
21BD:  MOVWF  04
21BE:  MOVF   5E,W
21BF:  MOVWF  05
21C0:  MOVIW  [FSR0+04],W
21C1:  MOVWF  77
21C2:  CLRF   78
21C3:  CLRF   79
21C4:  CLRF   7A
21C5:  MOVF   77,W
21C6:  MOVLB  10
21C7:  IORWF  65,W
21C8:  MOVLB  0F
21C9:  MOVWF  62
21CA:  MOVF   78,W
21CB:  MOVLB  10
21CC:  IORWF  66,W
21CD:  MOVLB  0F
21CE:  MOVWF  63
21CF:  MOVF   79,W
21D0:  MOVLB  10
21D1:  IORWF  67,W
21D2:  MOVLB  0F
21D3:  MOVWF  64
21D4:  MOVF   7A,W
21D5:  MOVLB  10
21D6:  IORWF  68,W
21D7:  MOVLB  0F
21D8:  MOVWF  65
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
21D9:  MOVF   5D,W
21DA:  MOVWF  04
21DB:  MOVF   5E,W
21DC:  MOVWF  05
21DD:  ADDFSR 07,FSR0
21DE:  MOVF   00,W
21DF:  MOVLB  10
21E0:  CLRF   66
21E1:  MOVWF  65
21E2:  MOVWF  66
21E3:  CLRF   65
21E4:  MOVLB  0F
21E5:  MOVF   5D,W
21E6:  MOVWF  04
21E7:  MOVF   5E,W
21E8:  MOVWF  05
21E9:  MOVIW  [FSR0+08],W
21EA:  CLRF   7A
21EB:  MOVLB  10
21EC:  IORWF  65,W
21ED:  MOVLB  0F
21EE:  MOVWF  60
21EF:  MOVF   7A,W
21F0:  MOVLB  10
21F1:  IORWF  66,W
21F2:  MOVLB  0F
21F3:  MOVWF  61
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
21F4:  MOVLW  C4
21F5:  MOVLB  03
21F6:  MOVWF  11
21F7:  MOVLW  04
21F8:  MOVWF  12
21F9:  BCF    03.0
21FA:  MOVLW  0C
21FB:  MOVLB  11
21FC:  MOVWF  51
21FD:  MOVLP  08
21FE:  MOVLB  00
21FF:  CALL   327
2200:  MOVLP  20
2201:  MOVLB  0F
2202:  MOVF   5F,W
2203:  MOVLB  11
2204:  MOVWF  51
2205:  MOVLW  37
2206:  MOVWF  52
2207:  MOVLP  08
2208:  MOVLB  00
2209:  CALL   381
220A:  MOVLP  20
220B:  MOVLW  0D
220C:  MOVLB  13
220D:  MOVWF  2B
220E:  MOVLP  08
220F:  MOVLB  00
2210:  CALL   020
2211:  MOVLP  20
2212:  MOVLW  0A
2213:  MOVLB  13
2214:  MOVWF  2B
2215:  MOVLP  08
2216:  MOVLB  00
2217:  CALL   020
2218:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
2219:  MOVLW  CE
221A:  MOVLB  03
221B:  MOVWF  11
221C:  MOVLW  04
221D:  MOVWF  12
221E:  BCF    03.0
221F:  MOVLW  0E
2220:  MOVLB  11
2221:  MOVWF  51
2222:  MOVLP  08
2223:  MOVLB  00
2224:  CALL   327
2225:  MOVLP  20
2226:  MOVLB  0F
2227:  MOVF   65,W
2228:  MOVLB  11
2229:  MOVWF  51
222A:  MOVLW  37
222B:  MOVWF  52
222C:  MOVLP  08
222D:  MOVLB  00
222E:  CALL   381
222F:  MOVLP  20
2230:  MOVLB  0F
2231:  MOVF   64,W
2232:  MOVLB  11
2233:  MOVWF  51
2234:  MOVLW  37
2235:  MOVWF  52
2236:  MOVLP  08
2237:  MOVLB  00
2238:  CALL   381
2239:  MOVLP  20
223A:  MOVLB  0F
223B:  MOVF   63,W
223C:  MOVLB  11
223D:  MOVWF  51
223E:  MOVLW  37
223F:  MOVWF  52
2240:  MOVLP  08
2241:  MOVLB  00
2242:  CALL   381
2243:  MOVLP  20
2244:  MOVLB  0F
2245:  MOVF   62,W
2246:  MOVLB  11
2247:  MOVWF  51
2248:  MOVLW  37
2249:  MOVWF  52
224A:  MOVLP  08
224B:  MOVLB  00
224C:  CALL   381
224D:  MOVLP  20
224E:  MOVLW  0D
224F:  MOVLB  13
2250:  MOVWF  2B
2251:  MOVLP  08
2252:  MOVLB  00
2253:  CALL   020
2254:  MOVLP  20
2255:  MOVLW  0A
2256:  MOVLB  13
2257:  MOVWF  2B
2258:  MOVLP  08
2259:  MOVLB  00
225A:  CALL   020
225B:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
225C:  MOVLW  D9
225D:  MOVLB  03
225E:  MOVWF  11
225F:  MOVLW  04
2260:  MOVWF  12
2261:  BCF    03.0
2262:  MOVLW  0E
2263:  MOVLB  11
2264:  MOVWF  51
2265:  MOVLP  08
2266:  MOVLB  00
2267:  CALL   327
2268:  MOVLP  20
2269:  MOVLB  0F
226A:  MOVF   61,W
226B:  MOVLB  11
226C:  MOVWF  51
226D:  MOVLW  37
226E:  MOVWF  52
226F:  MOVLP  08
2270:  MOVLB  00
2271:  CALL   381
2272:  MOVLP  20
2273:  MOVLB  0F
2274:  MOVF   60,W
2275:  MOVLB  11
2276:  MOVWF  51
2277:  MOVLW  37
2278:  MOVWF  52
2279:  MOVLP  08
227A:  MOVLB  00
227B:  CALL   381
227C:  MOVLP  20
227D:  MOVLW  0D
227E:  MOVLB  13
227F:  MOVWF  2B
2280:  MOVLP  08
2281:  MOVLB  00
2282:  CALL   020
2283:  MOVLP  20
2284:  MOVLW  0A
2285:  MOVLB  13
2286:  MOVWF  2B
2287:  MOVLP  08
2288:  MOVLB  00
2289:  CALL   020
228A:  MOVLP  20
....................    
....................    piclog_make(flash_param.id, 0x00);
228B:  MOVLB  0F
228C:  MOVF   5F,W
228D:  MOVLB  10
228E:  MOVWF  65
228F:  CLRF   66
2290:  MOVLP  10
2291:  MOVLB  00
2292:  CALL   340
2293:  MOVLP  20
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
2294:  MOVLB  0F
2295:  CLRF   66
2296:  CLRF   67
2297:  CLRF   68
2298:  CLRF   69
2299:  CLRF   6A
229A:  CLRF   6B
229B:  CLRF   6C
229C:  CLRF   6D
229D:  CLRF   6E
229E:  CLRF   6F
229F:  MOVLB  10
22A0:  CLRF   20
22A1:  CLRF   21
22A2:  CLRF   22
22A3:  CLRF   23
22A4:  CLRF   24
22A5:  CLRF   25
22A6:  CLRF   26
22A7:  CLRF   27
22A8:  CLRF   28
22A9:  CLRF   29
22AA:  CLRF   2A
22AB:  CLRF   2B
22AC:  CLRF   2C
22AD:  CLRF   2D
22AE:  CLRF   2E
22AF:  CLRF   2F
22B0:  CLRF   30
22B1:  CLRF   31
22B2:  CLRF   32
22B3:  CLRF   33
22B4:  CLRF   34
22B5:  CLRF   35
22B6:  CLRF   36
22B7:  CLRF   37
22B8:  CLRF   38
22B9:  CLRF   39
22BA:  CLRF   3A
22BB:  CLRF   3B
22BC:  CLRF   3C
22BD:  CLRF   3D
22BE:  CLRF   3E
22BF:  CLRF   3F
22C0:  CLRF   40
22C1:  CLRF   41
22C2:  CLRF   42
22C3:  CLRF   43
22C4:  CLRF   44
22C5:  CLRF   45
22C6:  CLRF   46
22C7:  CLRF   47
22C8:  CLRF   48
22C9:  CLRF   49
22CA:  CLRF   4A
22CB:  CLRF   4B
22CC:  CLRF   4C
22CD:  CLRF   4D
22CE:  CLRF   4E
22CF:  CLRF   4F
22D0:  CLRF   50
22D1:  CLRF   51
22D2:  CLRF   52
22D3:  CLRF   53
22D4:  CLRF   54
22D5:  CLRF   55
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
22D6:  MOVLW  E4
22D7:  MOVLB  03
22D8:  MOVWF  11
22D9:  MOVLW  04
22DA:  MOVWF  12
22DB:  MOVLP  08
22DC:  MOVLB  00
22DD:  CALL   045
22DE:  MOVLP  20
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
22DF:  MOVLB  0D
22E0:  MOVF   45,W
22E1:  MOVLB  11
22E2:  MOVWF  6E
22E3:  MOVLB  0D
22E4:  MOVF   44,W
22E5:  MOVLB  11
22E6:  MOVWF  6D
22E7:  MOVLB  0D
22E8:  MOVF   43,W
22E9:  MOVLB  11
22EA:  MOVWF  6C
22EB:  MOVLB  0D
22EC:  MOVF   42,W
22ED:  MOVLB  11
22EE:  MOVWF  6B
22EF:  MOVLP  08
22F0:  MOVLB  00
22F1:  CALL   207
22F2:  MOVLP  20
22F3:  MOVF   78,F
22F4:  BTFSS  03.2
22F5:  GOTO   300
....................       fprintf(PC, "Mission Flash is not connected\r\n");
22F6:  MOVLW  EA
22F7:  MOVLB  03
22F8:  MOVWF  11
22F9:  MOVLW  04
22FA:  MOVWF  12
22FB:  MOVLP  08
22FC:  MOVLB  00
22FD:  CALL   045
22FE:  MOVLP  20
....................       return;
22FF:  GOTO   3BC
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
2300:  MOVLB  10
2301:  CLRF   5D
2302:  CLRF   5C
2303:  CLRF   5B
2304:  CLRF   5A
2305:  MOVF   5D,F
2306:  BTFSS  03.2
2307:  GOTO   3B3
2308:  MOVF   5C,F
2309:  BTFSS  03.2
230A:  GOTO   3B3
230B:  MOVF   5B,W
230C:  MOVLB  0F
230D:  SUBWF  61,W
230E:  BTFSC  03.0
230F:  GOTO   312
2310:  MOVLB  10
2311:  GOTO   3B3
2312:  BTFSS  03.2
2313:  GOTO   31A
2314:  MOVF   60,W
2315:  MOVLB  10
2316:  SUBWF  5A,W
2317:  BTFSC  03.0
2318:  GOTO   3B3
2319:  MOVLB  0F
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
231A:  MOVLB  10
231B:  RLF    5A,W
231C:  MOVWF  77
231D:  RLF    5B,W
231E:  MOVWF  78
231F:  RLF    5C,W
2320:  MOVWF  79
2321:  RLF    5D,W
2322:  MOVWF  7A
2323:  RLF    77,F
2324:  RLF    78,F
2325:  RLF    79,F
2326:  RLF    7A,F
2327:  RLF    77,F
2328:  RLF    78,F
2329:  RLF    79,F
232A:  RLF    7A,F
232B:  RLF    77,F
232C:  RLF    78,F
232D:  RLF    79,F
232E:  RLF    7A,F
232F:  RLF    77,F
2330:  RLF    78,F
2331:  RLF    79,F
2332:  RLF    7A,F
2333:  RLF    77,F
2334:  RLF    78,F
2335:  RLF    79,F
2336:  RLF    7A,F
2337:  MOVLW  C0
2338:  ANDWF  77,F
2339:  MOVF   77,W
233A:  MOVLB  0F
233B:  ADDWF  62,W
233C:  MOVLB  10
233D:  MOVWF  56
233E:  MOVF   78,W
233F:  MOVLB  0F
2340:  ADDWFC 63,W
2341:  MOVLB  10
2342:  MOVWF  57
2343:  MOVF   79,W
2344:  MOVLB  0F
2345:  ADDWFC 64,W
2346:  MOVLB  10
2347:  MOVWF  58
2348:  MOVF   7A,W
2349:  MOVLB  0F
234A:  ADDWFC 65,W
234B:  MOVLB  10
234C:  MOVWF  59
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
234D:  MOVLB  0D
234E:  MOVF   45,W
234F:  MOVLB  13
2350:  MOVWF  2A
2351:  MOVLB  0D
2352:  MOVF   44,W
2353:  MOVLB  13
2354:  MOVWF  29
2355:  MOVLB  0D
2356:  MOVF   43,W
2357:  MOVLB  13
2358:  MOVWF  28
2359:  MOVLB  0D
235A:  MOVF   42,W
235B:  MOVLB  13
235C:  MOVWF  27
235D:  MOVLB  10
235E:  MOVF   59,W
235F:  MOVLB  13
2360:  MOVWF  2E
2361:  MOVLB  10
2362:  MOVF   58,W
2363:  MOVLB  13
2364:  MOVWF  2D
2365:  MOVLB  10
2366:  MOVF   57,W
2367:  MOVLB  13
2368:  MOVWF  2C
2369:  MOVLB  10
236A:  MOVF   56,W
236B:  MOVLB  13
236C:  MOVWF  2B
236D:  MOVLW  24
236E:  MOVWF  30
236F:  MOVLW  F6
2370:  MOVWF  2F
2371:  CLRF   34
2372:  CLRF   33
2373:  CLRF   32
2374:  MOVLW  40
2375:  MOVWF  31
2376:  MOVLP  08
2377:  MOVLB  00
2378:  CALL   260
2379:  MOVLP  20
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
237A:  MOVLB  10
237B:  CLRF   5E
237C:  MOVF   5E,W
237D:  SUBLW  3F
237E:  BTFSS  03.0
237F:  GOTO   39B
....................          fprintf(PC,"%02X ",readdata[bytecount]);
2380:  MOVLW  F6
2381:  ADDWF  5E,W
2382:  MOVWF  04
2383:  MOVLW  24
2384:  MOVWF  05
2385:  BTFSC  03.0
2386:  INCF   05,F
2387:  MOVF   00,W
2388:  MOVWF  65
2389:  MOVLB  11
238A:  MOVWF  51
238B:  MOVLW  37
238C:  MOVWF  52
238D:  MOVLP  08
238E:  MOVLB  00
238F:  CALL   381
2390:  MOVLP  20
2391:  MOVLW  20
2392:  MOVLB  13
2393:  MOVWF  2B
2394:  MOVLP  08
2395:  MOVLB  00
2396:  CALL   020
2397:  MOVLP  20
2398:  MOVLB  10
2399:  INCF   5E,F
239A:  GOTO   37C
....................       }
....................       fprintf(PC,"\r\n");
239B:  MOVLW  0D
239C:  MOVLB  13
239D:  MOVWF  2B
239E:  MOVLP  08
239F:  MOVLB  00
23A0:  CALL   020
23A1:  MOVLP  20
23A2:  MOVLW  0A
23A3:  MOVLB  13
23A4:  MOVWF  2B
23A5:  MOVLP  08
23A6:  MOVLB  00
23A7:  CALL   020
23A8:  MOVLP  20
23A9:  MOVLW  01
23AA:  MOVLB  10
23AB:  ADDWF  5A,F
23AC:  BTFSC  03.0
23AD:  INCF   5B,F
23AE:  BTFSC  03.2
23AF:  INCF   5C,F
23B0:  BTFSC  03.2
23B1:  INCF   5D,F
23B2:  GOTO   305
....................    }
....................    fprintf(PC, "End Flash Read\r\n");
23B3:  MOVLW  FB
23B4:  MOVLB  03
23B5:  MOVWF  11
23B6:  MOVLW  04
23B7:  MOVWF  12
23B8:  MOVLP  08
23B9:  MOVLB  00
23BA:  CALL   045
23BB:  MOVLP  20
23BC:  MOVLP  20
23BD:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
23BE:  MOVLW  04
23BF:  MOVLB  03
23C0:  MOVWF  11
23C1:  MOVLW  05
23C2:  MOVWF  12
23C3:  MOVLP  08
23C4:  MOVLB  00
23C5:  CALL   045
23C6:  MOVLP  20
....................    flash_setting(mis_fm);
23C7:  MOVLB  0D
23C8:  MOVF   45,W
23C9:  MOVLB  13
23CA:  MOVWF  2A
23CB:  MOVLB  0D
23CC:  MOVF   44,W
23CD:  MOVLB  13
23CE:  MOVWF  29
23CF:  MOVLB  0D
23D0:  MOVF   43,W
23D1:  MOVLB  13
23D2:  MOVWF  28
23D3:  MOVLB  0D
23D4:  MOVF   42,W
23D5:  MOVLB  13
23D6:  MOVWF  27
23D7:  MOVLP  08
23D8:  MOVLB  00
23D9:  CALL   7BE
23DA:  MOVLP  20
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
23DB:  MOVLB  0F
23DC:  CLRF   62
23DD:  CLRF   61
23DE:  CLRF   60
23DF:  CLRF   5F
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
23E0:  MOVLB  0D
23E1:  MOVF   45,W
23E2:  MOVLB  13
23E3:  MOVWF  2A
23E4:  MOVLB  0D
23E5:  MOVF   44,W
23E6:  MOVLB  13
23E7:  MOVWF  29
23E8:  MOVLB  0D
23E9:  MOVF   43,W
23EA:  MOVLB  13
23EB:  MOVWF  28
23EC:  MOVLB  0D
23ED:  MOVF   42,W
23EE:  MOVLB  13
23EF:  MOVWF  27
23F0:  MOVLB  0F
23F1:  MOVF   62,W
23F2:  MOVLB  13
23F3:  MOVWF  2E
23F4:  MOVLB  0F
23F5:  MOVF   61,W
23F6:  MOVLB  13
23F7:  MOVWF  2D
23F8:  MOVLB  0F
23F9:  MOVF   60,W
23FA:  MOVLB  13
23FB:  MOVWF  2C
23FC:  MOVLB  0F
23FD:  MOVF   5F,W
23FE:  MOVLB  13
23FF:  MOVWF  2B
2400:  MOVLW  24
2401:  MOVWF  30
2402:  MOVLW  F3
2403:  MOVWF  2F
2404:  CLRF   34
2405:  CLRF   33
2406:  CLRF   32
2407:  MOVLW  04
2408:  MOVWF  31
2409:  MOVLP  08
240A:  MOVLB  00
240B:  CALL   260
240C:  MOVLP  20
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
240D:  MOVLW  12
240E:  MOVLB  03
240F:  MOVWF  11
2410:  MOVLW  05
2411:  MOVWF  12
2412:  BCF    03.0
2413:  MOVLW  0B
2414:  MOVLB  11
2415:  MOVWF  51
2416:  MOVLP  08
2417:  MOVLB  00
2418:  CALL   327
2419:  MOVLP  20
241A:  MOVLB  0F
241B:  MOVF   63,W
241C:  MOVLB  11
241D:  MOVWF  51
241E:  MOVLW  37
241F:  MOVWF  52
2420:  MOVLP  08
2421:  MOVLB  00
2422:  CALL   381
2423:  MOVLP  20
2424:  MOVLW  20
2425:  MOVLB  13
2426:  MOVWF  2B
2427:  MOVLP  08
2428:  MOVLB  00
2429:  CALL   020
242A:  MOVLP  20
242B:  MOVLB  0F
242C:  MOVF   64,W
242D:  MOVLB  11
242E:  MOVWF  51
242F:  MOVLW  37
2430:  MOVWF  52
2431:  MOVLP  08
2432:  MOVLB  00
2433:  CALL   381
2434:  MOVLP  20
2435:  MOVLW  20
2436:  MOVLB  13
2437:  MOVWF  2B
2438:  MOVLP  08
2439:  MOVLB  00
243A:  CALL   020
243B:  MOVLP  20
243C:  MOVLB  0F
243D:  MOVF   65,W
243E:  MOVLB  11
243F:  MOVWF  51
2440:  MOVLW  37
2441:  MOVWF  52
2442:  MOVLP  08
2443:  MOVLB  00
2444:  CALL   381
2445:  MOVLP  20
2446:  MOVLW  20
2447:  MOVLB  13
2448:  MOVWF  2B
2449:  MOVLP  08
244A:  MOVLB  00
244B:  CALL   020
244C:  MOVLP  20
244D:  MOVLB  0F
244E:  MOVF   66,W
244F:  MOVLB  11
2450:  MOVWF  51
2451:  MOVLW  37
2452:  MOVWF  52
2453:  MOVLP  08
2454:  MOVLB  00
2455:  CALL   381
2456:  MOVLP  20
2457:  MOVLW  0D
2458:  MOVLB  13
2459:  MOVWF  2B
245A:  MOVLP  08
245B:  MOVLB  00
245C:  CALL   020
245D:  MOVLP  20
245E:  MOVLW  0A
245F:  MOVLB  13
2460:  MOVWF  2B
2461:  MOVLP  08
2462:  MOVLB  00
2463:  CALL   020
2464:  MOVLP  20
....................    fprintf(PC, "End Flash Read Address\r\n");
2465:  MOVLW  23
2466:  MOVLB  03
2467:  MOVWF  11
2468:  MOVLW  05
2469:  MOVWF  12
246A:  MOVLP  08
246B:  MOVLB  00
246C:  CALL   045
246D:  MOVLP  20
246E:  MOVLP  20
246F:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
2470:  MOVLW  30
2471:  MOVLB  03
2472:  MOVWF  11
2473:  MOVLW  05
2474:  MOVWF  12
2475:  MOVLP  08
2476:  MOVLB  00
2477:  CALL   045
2478:  MOVLP  20
....................    flash_setting(mis_fm);
2479:  MOVLB  0D
247A:  MOVF   45,W
247B:  MOVLB  13
247C:  MOVWF  2A
247D:  MOVLB  0D
247E:  MOVF   44,W
247F:  MOVLB  13
2480:  MOVWF  29
2481:  MOVLB  0D
2482:  MOVF   43,W
2483:  MOVLB  13
2484:  MOVWF  28
2485:  MOVLB  0D
2486:  MOVF   42,W
2487:  MOVLB  13
2488:  MOVWF  27
2489:  MOVLP  08
248A:  MOVLB  00
248B:  CALL   7BE
248C:  MOVLP  20
....................    flash_setting(smf);
248D:  MOVLB  0D
248E:  MOVF   49,W
248F:  MOVLB  13
2490:  MOVWF  2A
2491:  MOVLB  0D
2492:  MOVF   48,W
2493:  MOVLB  13
2494:  MOVWF  29
2495:  MOVLB  0D
2496:  MOVF   47,W
2497:  MOVLB  13
2498:  MOVWF  28
2499:  MOVLB  0D
249A:  MOVF   46,W
249B:  MOVLB  13
249C:  MOVWF  27
249D:  MOVLP  08
249E:  MOVLB  00
249F:  CALL   7BE
24A0:  MOVLP  20
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
24A1:  MOVLB  0F
24A2:  CLRF   62
24A3:  CLRF   61
24A4:  CLRF   60
24A5:  CLRF   5F
24A6:  CLRF   66
24A7:  CLRF   65
24A8:  MOVLW  10
24A9:  MOVWF  64
24AA:  CLRF   63
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
24AB:  MOVLB  0D
24AC:  MOVF   45,W
24AD:  MOVLB  13
24AE:  MOVWF  2A
24AF:  MOVLB  0D
24B0:  MOVF   44,W
24B1:  MOVLB  13
24B2:  MOVWF  29
24B3:  MOVLB  0D
24B4:  MOVF   43,W
24B5:  MOVLB  13
24B6:  MOVWF  28
24B7:  MOVLB  0D
24B8:  MOVF   42,W
24B9:  MOVLB  13
24BA:  MOVWF  27
24BB:  MOVLB  0F
24BC:  MOVF   62,W
24BD:  MOVLB  13
24BE:  MOVWF  2E
24BF:  MOVLB  0F
24C0:  MOVF   61,W
24C1:  MOVLB  13
24C2:  MOVWF  2D
24C3:  MOVLB  0F
24C4:  MOVF   60,W
24C5:  MOVLB  13
24C6:  MOVWF  2C
24C7:  MOVLB  0F
24C8:  MOVF   5F,W
24C9:  MOVLB  13
24CA:  MOVWF  2B
24CB:  MOVLW  24
24CC:  MOVWF  30
24CD:  MOVLW  F7
24CE:  MOVWF  2F
24CF:  CLRF   34
24D0:  CLRF   33
24D1:  MOVLW  01
24D2:  MOVWF  32
24D3:  CLRF   31
24D4:  MOVLP  08
24D5:  MOVLB  00
24D6:  CALL   260
24D7:  MOVLP  20
....................    write_data_bytes(smf, dest_address, read_data, 256);
24D8:  MOVLB  0D
24D9:  MOVF   49,W
24DA:  MOVLB  13
24DB:  MOVWF  2A
24DC:  MOVLB  0D
24DD:  MOVF   48,W
24DE:  MOVLB  13
24DF:  MOVWF  29
24E0:  MOVLB  0D
24E1:  MOVF   47,W
24E2:  MOVLB  13
24E3:  MOVWF  28
24E4:  MOVLB  0D
24E5:  MOVF   46,W
24E6:  MOVLB  13
24E7:  MOVWF  27
24E8:  MOVLB  0F
24E9:  MOVF   66,W
24EA:  MOVLB  13
24EB:  MOVWF  2E
24EC:  MOVLB  0F
24ED:  MOVF   65,W
24EE:  MOVLB  13
24EF:  MOVWF  2D
24F0:  MOVLB  0F
24F1:  MOVF   64,W
24F2:  MOVLB  13
24F3:  MOVWF  2C
24F4:  MOVLB  0F
24F5:  MOVF   63,W
24F6:  MOVLB  13
24F7:  MOVWF  2B
24F8:  MOVLW  24
24F9:  MOVWF  30
24FA:  MOVLW  F7
24FB:  MOVWF  2F
24FC:  MOVLW  01
24FD:  MOVWF  32
24FE:  CLRF   31
24FF:  MOVLP  10
2500:  MOVLB  00
2501:  CALL   000
2502:  MOVLP  20
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
2503:  MOVLW  3C
2504:  MOVLB  03
2505:  MOVWF  11
2506:  MOVLW  05
2507:  MOVWF  12
2508:  MOVLP  08
2509:  MOVLB  00
250A:  CALL   045
250B:  MOVLP  20
250C:  MOVLP  20
250D:  GOTO   75E (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
250E:  MOVLW  7C
250F:  MOVLB  03
2510:  MOVWF  11
2511:  MOVLW  05
2512:  MOVWF  12
2513:  MOVLP  08
2514:  MOVLB  00
2515:  CALL   045
2516:  MOVLP  20
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
2517:  MOVLB  0F
2518:  CLRF   5F
2519:  CLRF   60
251A:  CLRF   61
251B:  CLRF   62
251C:  CLRF   63
251D:  CLRF   64
251E:  CLRF   65
251F:  CLRF   66
2520:  CLRF   67
2521:  CLRF   68
2522:  CLRF   69
2523:  CLRF   6A
2524:  CLRF   6B
2525:  CLRF   6C
2526:  CLRF   6D
2527:  CLRF   6E
2528:  CLRF   6F
2529:  MOVLB  10
252A:  CLRF   20
252B:  CLRF   21
252C:  CLRF   22
252D:  CLRF   23
252E:  CLRF   24
252F:  CLRF   25
2530:  CLRF   26
2531:  CLRF   27
2532:  CLRF   28
2533:  CLRF   29
2534:  CLRF   2A
2535:  CLRF   2B
2536:  CLRF   2C
2537:  CLRF   2D
2538:  CLRF   2E
2539:  CLRF   2F
253A:  CLRF   30
253B:  CLRF   31
253C:  CLRF   32
253D:  CLRF   33
253E:  CLRF   34
253F:  CLRF   35
2540:  CLRF   36
2541:  CLRF   37
2542:  CLRF   38
2543:  CLRF   39
2544:  CLRF   3A
2545:  CLRF   3B
2546:  CLRF   3C
2547:  CLRF   3D
2548:  CLRF   3E
2549:  CLRF   3F
254A:  CLRF   40
254B:  CLRF   41
254C:  CLRF   42
254D:  CLRF   43
254E:  CLRF   44
254F:  CLRF   45
2550:  CLRF   46
2551:  CLRF   47
2552:  CLRF   48
2553:  CLRF   49
2554:  CLRF   4A
2555:  CLRF   4B
2556:  CLRF   4C
2557:  CLRF   4D
2558:  CLRF   4E
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
2559:  MOVLB  0D
255A:  MOVF   45,W
255B:  MOVLB  13
255C:  MOVWF  2A
255D:  MOVLB  0D
255E:  MOVF   44,W
255F:  MOVLB  13
2560:  MOVWF  29
2561:  MOVLB  0D
2562:  MOVF   43,W
2563:  MOVLB  13
2564:  MOVWF  28
2565:  MOVLB  0D
2566:  MOVF   42,W
2567:  MOVLB  13
2568:  MOVWF  27
2569:  CLRF   2E
256A:  CLRF   2D
256B:  CLRF   2C
256C:  CLRF   2B
256D:  MOVLW  24
256E:  MOVWF  30
256F:  MOVLW  EF
2570:  MOVWF  2F
2571:  CLRF   32
2572:  MOVLW  40
2573:  MOVWF  31
2574:  MOVLP  10
2575:  MOVLB  00
2576:  CALL   000
2577:  MOVLP  20
....................    misf_init(); // Update the address area after writing
2578:  MOVLP  08
2579:  CALL   3A8
257A:  MOVLP  20
.................... 
....................    piclog_make(parameter[0], 0x00); // Log the command execution
257B:  MOVLB  0F
257C:  MOVF   5D,W
257D:  MOVWF  04
257E:  MOVF   5E,W
257F:  MOVWF  05
2580:  ADDFSR 00,FSR0
2581:  MOVF   00,W
2582:  MOVLB  10
2583:  MOVWF  4F
2584:  MOVWF  65
2585:  CLRF   66
2586:  MOVLP  10
2587:  MOVLB  00
2588:  CALL   340
2589:  MOVLP  20
.................... 
....................    fprintf(PC, "End Flash Address Reset\r\n");
258A:  MOVLW  8A
258B:  MOVLB  03
258C:  MOVWF  11
258D:  MOVLW  05
258E:  MOVWF  12
258F:  MOVLP  08
2590:  MOVLB  00
2591:  CALL   045
2592:  MOVLP  20
2593:  MOVLP  20
2594:  GOTO   75E (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
3800:  MOVLW  97
3801:  MOVLB  03
3802:  MOVWF  11
3803:  MOVLW  05
3804:  MOVWF  12
3805:  MOVLP  08
3806:  MOVLB  00
3807:  CALL   045
3808:  MOVLP  38
....................     fprintf(PC, "___Start copy_data__\r\n");
3809:  MOVLW  A4
380A:  MOVLB  03
380B:  MOVWF  11
380C:  MOVLW  05
380D:  MOVWF  12
380E:  MOVLP  08
380F:  MOVLB  00
3810:  CALL   045
3811:  MOVLP  38
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
3812:  MOVLB  10
3813:  CLRF   48
3814:  MOVLP  08
3815:  MOVLB  00
3816:  CALL   7E8
3817:  MOVLP  38
3818:  MOVF   78,F
3819:  BTFSS  03.2
381A:  GOTO   1A2
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
381B:  MOVLW  B0
381C:  MOVLB  03
381D:  MOVWF  11
381E:  MOVLW  05
381F:  MOVWF  12
3820:  BCF    03.0
3821:  MOVLW  07
3822:  MOVLB  11
3823:  MOVWF  51
3824:  MOVLP  08
3825:  MOVLB  00
3826:  CALL   327
3827:  MOVLP  38
3828:  MOVLB  10
3829:  MOVF   48,W
382A:  MOVLB  11
382B:  MOVWF  4E
382C:  MOVLW  18
382D:  MOVWF  4F
382E:  MOVLP  28
382F:  MOVLB  00
3830:  CALL   2C0
3831:  MOVLP  38
3832:  MOVLW  B4
3833:  MOVLB  03
3834:  MOVWF  11
3835:  MOVLW  05
3836:  MOVWF  12
3837:  BSF    03.0
3838:  MOVLW  12
3839:  MOVLB  11
383A:  MOVWF  51
383B:  MOVLP  08
383C:  MOVLB  00
383D:  CALL   327
383E:  MOVLP  38
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
383F:  MOVLP  20
3840:  GOTO   7C3
3841:  MOVLP  38
3842:  MOVF   79,W
3843:  MOVLB  10
3844:  MOVWF  4A
3845:  MOVF   78,W
3846:  MOVWF  49
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
3847:  MOVF   4A,W
3848:  MOVLB  11
3849:  MOVWF  2D
384A:  MOVLB  10
384B:  MOVF   49,W
384C:  MOVLB  11
384D:  MOVWF  2C
384E:  MOVLW  25
384F:  MOVWF  2F
3850:  MOVLW  2B
3851:  MOVWF  2E
3852:  MOVLW  25
3853:  MOVWF  31
3854:  MOVLW  34
3855:  MOVWF  30
3856:  MOVLW  25
3857:  MOVWF  33
3858:  MOVLW  38
3859:  MOVWF  32
385A:  MOVLW  25
385B:  MOVWF  35
385C:  MOVLW  3C
385D:  MOVWF  34
385E:  MOVLW  25
385F:  MOVWF  37
3860:  MOVLW  40
3861:  MOVWF  36
3862:  MOVLW  25
3863:  MOVWF  39
3864:  MOVLW  44
3865:  MOVWF  38
3866:  MOVLW  25
3867:  MOVWF  3B
3868:  MOVLW  45
3869:  MOVWF  3A
386A:  MOVLP  30
386B:  MOVLB  00
386C:  GOTO   000
386D:  MOVLP  38
....................         status[i+1] = mission_type.mission_flag;
386E:  MOVLW  01
386F:  MOVLB  10
3870:  ADDWF  48,W
3871:  ADDLW  09
3872:  MOVWF  04
3873:  MOVLW  20
3874:  MOVWF  05
3875:  BTFSC  03.0
3876:  INCF   05,F
3877:  MOVF   53,W
3878:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
3879:  MOVF   54,W
387A:  MOVWF  69
387B:  MOVLW  10
387C:  ADDWF  55,W
387D:  MOVWF  6A
387E:  MOVLW  00
387F:  ADDWFC 56,W
3880:  MOVWF  6B
3881:  MOVLW  00
3882:  ADDWFC 57,W
3883:  MOVWF  6C
3884:  MOVF   5B,W
3885:  MOVLB  11
3886:  MOVWF  23
3887:  MOVLB  10
3888:  MOVF   5A,W
3889:  MOVLB  11
388A:  MOVWF  22
388B:  MOVLB  10
388C:  MOVF   59,W
388D:  MOVLB  11
388E:  MOVWF  21
388F:  MOVLB  10
3890:  MOVF   58,W
3891:  MOVLB  11
3892:  MOVWF  20
3893:  MOVLB  10
3894:  MOVF   69,W
3895:  MOVLB  11
3896:  SUBWF  20,W
3897:  MOVWF  24
3898:  MOVLB  10
3899:  MOVF   6A,W
389A:  MOVLB  11
389B:  SUBWFC 21,W
389C:  MOVWF  25
389D:  MOVLB  10
389E:  MOVF   6B,W
389F:  MOVLB  11
38A0:  SUBWFC 22,W
38A1:  MOVWF  26
38A2:  MOVLB  10
38A3:  MOVF   6C,W
38A4:  MOVLB  11
38A5:  SUBWFC 23,W
38A6:  MOVWF  27
38A7:  MOVLB  10
38A8:  MOVF   65,W
38A9:  ADDWF  69,W
38AA:  MOVLB  11
38AB:  MOVWF  28
38AC:  MOVLB  10
38AD:  MOVF   66,W
38AE:  ADDWFC 6A,W
38AF:  MOVLB  11
38B0:  MOVWF  29
38B1:  MOVLB  10
38B2:  MOVF   67,W
38B3:  ADDWFC 6B,W
38B4:  MOVLB  11
38B5:  MOVWF  2A
38B6:  MOVLB  10
38B7:  MOVF   68,W
38B8:  ADDWFC 6C,W
38B9:  MOVLB  11
38BA:  MOVWF  2B
.................... 
....................         if ((used_size + write_size) > data_region_size)
38BB:  MOVLB  10
38BC:  MOVF   60,W
38BD:  ADDWF  65,W
38BE:  MOVLB  11
38BF:  MOVWF  2C
38C0:  MOVLB  10
38C1:  MOVF   61,W
38C2:  ADDWFC 66,W
38C3:  MOVLB  11
38C4:  MOVWF  2D
38C5:  MOVLB  10
38C6:  MOVF   62,W
38C7:  ADDWFC 67,W
38C8:  MOVLB  11
38C9:  MOVWF  2E
38CA:  MOVLB  10
38CB:  MOVF   63,W
38CC:  ADDWFC 68,W
38CD:  MOVLB  11
38CE:  MOVWF  2F
38CF:  MOVF   27,W
38D0:  SUBWF  2F,W
38D1:  BTFSS  03.0
38D2:  GOTO   116
38D3:  BTFSS  03.2
38D4:  GOTO   0E5
38D5:  MOVF   26,W
38D6:  SUBWF  2E,W
38D7:  BTFSS  03.0
38D8:  GOTO   116
38D9:  BTFSS  03.2
38DA:  GOTO   0E5
38DB:  MOVF   25,W
38DC:  SUBWF  2D,W
38DD:  BTFSS  03.0
38DE:  GOTO   116
38DF:  BTFSS  03.2
38E0:  GOTO   0E5
38E1:  MOVF   2C,W
38E2:  SUBWF  24,W
38E3:  BTFSC  03.0
38E4:  GOTO   116
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
38E5:  MOVLB  10
38E6:  MOVF   6C,W
38E7:  MOVLB  11
38E8:  MOVWF  2F
38E9:  MOVLB  10
38EA:  MOVF   6B,W
38EB:  MOVLB  11
38EC:  MOVWF  2E
38ED:  MOVLB  10
38EE:  MOVF   6A,W
38EF:  MOVLB  11
38F0:  MOVWF  2D
38F1:  MOVLB  10
38F2:  MOVF   69,W
38F3:  MOVLB  11
38F4:  MOVWF  2C
38F5:  MOVF   23,W
38F6:  MOVWF  33
38F7:  MOVF   22,W
38F8:  MOVWF  32
38F9:  MOVF   21,W
38FA:  MOVWF  31
38FB:  MOVF   20,W
38FC:  MOVWF  30
38FD:  MOVLP  28
38FE:  MOVLB  00
38FF:  GOTO   4FB
3900:  MOVLP  38
....................             loop_count++;
3901:  MOVLB  10
3902:  INCF   64,F
....................             used_size = 0;
3903:  CLRF   68
3904:  CLRF   67
3905:  CLRF   66
3906:  CLRF   65
....................             data_write_addr = data_region_start;
3907:  MOVF   6C,W
3908:  MOVLB  11
3909:  MOVWF  2B
390A:  MOVLB  10
390B:  MOVF   6B,W
390C:  MOVLB  11
390D:  MOVWF  2A
390E:  MOVLB  10
390F:  MOVF   6A,W
3910:  MOVLB  11
3911:  MOVWF  29
3912:  MOVLB  10
3913:  MOVF   69,W
3914:  MOVLB  11
3915:  MOVWF  28
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
3916:  MOVF   2B,W
3917:  MOVWF  2F
3918:  MOVF   2A,W
3919:  MOVWF  2E
391A:  MOVF   29,W
391B:  MOVWF  2D
391C:  MOVF   28,W
391D:  MOVWF  2C
391E:  MOVLB  10
391F:  MOVF   63,W
3920:  MOVLB  11
3921:  MOVWF  33
3922:  MOVLB  10
3923:  MOVF   62,W
3924:  MOVLB  11
3925:  MOVWF  32
3926:  MOVLB  10
3927:  MOVF   61,W
3928:  MOVLB  11
3929:  MOVWF  31
392A:  MOVLB  10
392B:  MOVF   60,W
392C:  MOVLB  11
392D:  MOVWF  30
392E:  MOVLB  10
392F:  MOVF   5B,W
3930:  MOVLB  11
3931:  MOVWF  37
3932:  MOVLB  10
3933:  MOVF   5A,W
3934:  MOVLB  11
3935:  MOVWF  36
3936:  MOVLB  10
3937:  MOVF   59,W
3938:  MOVLB  11
3939:  MOVWF  35
393A:  MOVLB  10
393B:  MOVF   58,W
393C:  MOVLB  11
393D:  MOVWF  34
393E:  MOVLP  28
393F:  MOVLB  00
3940:  GOTO   550
3941:  MOVLP  38
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
3942:  MOVLB  10
3943:  MOVF   5F,W
3944:  MOVLB  11
3945:  MOVWF  2F
3946:  MOVLB  10
3947:  MOVF   5E,W
3948:  MOVLB  11
3949:  MOVWF  2E
394A:  MOVLB  10
394B:  MOVF   5D,W
394C:  MOVLB  11
394D:  MOVWF  2D
394E:  MOVLB  10
394F:  MOVF   5C,W
3950:  MOVLB  11
3951:  MOVWF  2C
3952:  MOVLB  10
3953:  MOVF   63,W
3954:  MOVLB  11
3955:  MOVWF  33
3956:  MOVLB  10
3957:  MOVF   62,W
3958:  MOVLB  11
3959:  MOVWF  32
395A:  MOVLB  10
395B:  MOVF   61,W
395C:  MOVLB  11
395D:  MOVWF  31
395E:  MOVLB  10
395F:  MOVF   60,W
3960:  MOVLB  11
3961:  MOVWF  30
3962:  MOVF   2B,W
3963:  MOVWF  37
3964:  MOVF   2A,W
3965:  MOVWF  36
3966:  MOVF   29,W
3967:  MOVWF  35
3968:  MOVF   28,W
3969:  MOVWF  34
396A:  MOVLW  24
396B:  MOVWF  39
396C:  MOVLW  E8
396D:  MOVWF  38
396E:  MOVLW  25
396F:  MOVWF  3B
3970:  MOVLW  45
3971:  MOVWF  3A
3972:  MOVLP  28
3973:  MOVLB  00
3974:  GOTO   5D1
3975:  MOVLP  38
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
3976:  MOVLB  10
3977:  MOVF   57,W
3978:  MOVLB  11
3979:  MOVWF  2F
397A:  MOVLB  10
397B:  MOVF   56,W
397C:  MOVLB  11
397D:  MOVWF  2E
397E:  MOVLB  10
397F:  MOVF   55,W
3980:  MOVLB  11
3981:  MOVWF  2D
3982:  MOVLB  10
3983:  MOVF   54,W
3984:  MOVLB  11
3985:  MOVWF  2C
3986:  MOVLB  10
3987:  MOVF   68,W
3988:  MOVLB  11
3989:  MOVWF  33
398A:  MOVLB  10
398B:  MOVF   67,W
398C:  MOVLB  11
398D:  MOVWF  32
398E:  MOVLB  10
398F:  MOVF   66,W
3990:  MOVLB  11
3991:  MOVWF  31
3992:  MOVLB  10
3993:  MOVF   65,W
3994:  MOVLB  11
3995:  MOVWF  30
3996:  MOVLB  10
3997:  MOVF   64,W
3998:  MOVLB  11
3999:  MOVWF  34
399A:  MOVLP  30
399B:  MOVLB  00
399C:  GOTO   58E
399D:  MOVLP  38
399E:  MOVLB  10
399F:  INCF   48,F
39A0:  GOTO   014
39A1:  MOVLB  00
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
39A2:  MOVLW  BE
39A3:  MOVLB  03
39A4:  MOVWF  11
39A5:  MOVLW  05
39A6:  MOVWF  12
39A7:  MOVLP  08
39A8:  MOVLB  00
39A9:  CALL   045
39AA:  MOVLP  38
....................     fprintf(PC, "____________________\r\n\r\n");
39AB:  MOVLW  CB
39AC:  MOVLB  03
39AD:  MOVWF  11
39AE:  MOVLW  05
39AF:  MOVWF  12
39B0:  MOVLP  08
39B1:  MOVLB  00
39B2:  CALL   045
39B3:  MOVLP  38
39B4:  MOVLP  28
39B5:  GOTO   6D6 (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
3000:  MOVLB  11
3001:  MOVF   2F,W
3002:  MOVWF  7A
3003:  MOVF   2E,W
3004:  MOVWF  49
3005:  MOVF   7A,W
3006:  MOVWF  4A
3007:  MOVF   2C,W
3008:  MOVWF  04
3009:  MOVF   2D,W
300A:  MOVWF  05
300B:  ADDFSR 00,FSR0
300C:  MOVF   00,W
300D:  MOVWF  4B
300E:  MOVWF  52
300F:  MOVLP  28
3010:  MOVLB  00
3011:  GOTO   333
3012:  MOVLP  30
3013:  MOVF   79,W
3014:  MOVWF  7A
3015:  MOVF   78,W
3016:  MOVWF  04
3017:  MOVF   7A,W
3018:  MOVWF  05
3019:  MOVLW  09
301A:  MOVWF  78
301B:  MOVLB  11
301C:  MOVF   4A,W
301D:  MOVWF  07
301E:  MOVF   49,W
301F:  MOVWF  06
3020:  MOVIW  [FSR0++],W
3021:  MOVWI  W,[FSR1++]
3022:  DECFSZ 78,F
3023:  GOTO   020
....................     *mis_start_address = mission_type->start_address;
3024:  MOVF   31,W
3025:  MOVWF  7A
3026:  MOVF   30,W
3027:  MOVWF  49
3028:  MOVF   7A,W
3029:  MOVWF  4A
302A:  MOVF   2E,W
302B:  MOVWF  04
302C:  MOVF   2F,W
302D:  MOVWF  05
302E:  ADDFSR 00,FSR0
302F:  MOVF   00,W
3030:  MOVWF  77
3031:  ADDFSR 01,FSR0
3032:  MOVF   00,W
3033:  MOVWF  78
3034:  ADDFSR 01,FSR0
3035:  MOVF   00,W
3036:  MOVWF  79
3037:  ADDFSR 01,FSR0
3038:  MOVF   00,W
3039:  MOVWF  7A
303A:  ADDFSR 3D,FSR0
303B:  MOVF   7A,W
303C:  MOVWF  4E
303D:  MOVF   79,W
303E:  MOVWF  4D
303F:  MOVF   78,W
3040:  MOVWF  4C
3041:  MOVF   77,W
3042:  MOVWF  4B
3043:  MOVF   4A,W
3044:  MOVWF  05
3045:  MOVF   49,W
3046:  MOVWF  04
3047:  MOVF   4B,W
3048:  MOVWF  00
3049:  MOVF   4C,W
304A:  MOVWI  W,[FSR0+01]
304B:  MOVF   4D,W
304C:  MOVWI  W,[FSR0+02]
304D:  MOVF   4E,W
304E:  MOVWI  W,[FSR0+03]
....................     *mis_end_address = mission_type->end_address;
304F:  MOVF   32,W
3050:  MOVWF  49
3051:  MOVF   33,W
3052:  MOVWF  4A
3053:  MOVF   2E,W
3054:  MOVWF  04
3055:  MOVF   2F,W
3056:  MOVWF  05
3057:  ADDFSR 04,FSR0
3058:  MOVF   00,W
3059:  MOVWF  77
305A:  ADDFSR 01,FSR0
305B:  MOVF   00,W
305C:  MOVWF  78
305D:  ADDFSR 01,FSR0
305E:  MOVF   00,W
305F:  MOVWF  79
3060:  ADDFSR 01,FSR0
3061:  MOVF   00,W
3062:  MOVWF  7A
3063:  ADDFSR 3D,FSR0
3064:  MOVF   7A,W
3065:  MOVWF  4E
3066:  MOVF   79,W
3067:  MOVWF  4D
3068:  MOVF   78,W
3069:  MOVWF  4C
306A:  MOVF   77,W
306B:  MOVWF  4B
306C:  MOVF   4A,W
306D:  MOVWF  05
306E:  MOVF   49,W
306F:  MOVWF  04
3070:  MOVF   4B,W
3071:  MOVWF  00
3072:  MOVF   4C,W
3073:  MOVWI  W,[FSR0+01]
3074:  MOVF   4D,W
3075:  MOVWI  W,[FSR0+02]
3076:  MOVF   4E,W
3077:  MOVWI  W,[FSR0+03]
....................     *write_src = smf_data->src;
3078:  MOVF   34,W
3079:  MOVWF  49
307A:  MOVF   35,W
307B:  MOVWF  4A
307C:  MOVF   2C,W
307D:  MOVWF  04
307E:  MOVF   2D,W
307F:  MOVWF  05
3080:  ADDFSR 01,FSR0
3081:  MOVF   00,W
3082:  MOVWF  77
3083:  ADDFSR 01,FSR0
3084:  MOVF   00,W
3085:  MOVWF  78
3086:  ADDFSR 01,FSR0
3087:  MOVF   00,W
3088:  MOVWF  79
3089:  ADDFSR 01,FSR0
308A:  MOVF   00,W
308B:  MOVWF  7A
308C:  ADDFSR 3D,FSR0
308D:  MOVF   7A,W
308E:  MOVWF  4E
308F:  MOVF   79,W
3090:  MOVWF  4D
3091:  MOVF   78,W
3092:  MOVWF  4C
3093:  MOVF   77,W
3094:  MOVWF  4B
3095:  MOVF   4A,W
3096:  MOVWF  05
3097:  MOVF   49,W
3098:  MOVWF  04
3099:  MOVF   4B,W
309A:  MOVWF  00
309B:  MOVF   4C,W
309C:  MOVWI  W,[FSR0+01]
309D:  MOVF   4D,W
309E:  MOVWI  W,[FSR0+02]
309F:  MOVF   4E,W
30A0:  MOVWI  W,[FSR0+03]
....................     *write_size = smf_data->size;
30A1:  MOVF   36,W
30A2:  MOVWF  49
30A3:  MOVF   37,W
30A4:  MOVWF  4A
30A5:  MOVF   2C,W
30A6:  MOVWF  04
30A7:  MOVF   2D,W
30A8:  MOVWF  05
30A9:  ADDFSR 05,FSR0
30AA:  MOVF   00,W
30AB:  MOVWF  77
30AC:  ADDFSR 01,FSR0
30AD:  MOVF   00,W
30AE:  MOVWF  78
30AF:  ADDFSR 01,FSR0
30B0:  MOVF   00,W
30B1:  MOVWF  79
30B2:  ADDFSR 01,FSR0
30B3:  MOVF   00,W
30B4:  MOVWF  7A
30B5:  ADDFSR 3D,FSR0
30B6:  MOVF   7A,W
30B7:  MOVWF  4E
30B8:  MOVF   79,W
30B9:  MOVWF  4D
30BA:  MOVF   78,W
30BB:  MOVWF  4C
30BC:  MOVF   77,W
30BD:  MOVWF  4B
30BE:  MOVF   4A,W
30BF:  MOVWF  05
30C0:  MOVF   49,W
30C1:  MOVWF  04
30C2:  MOVF   4B,W
30C3:  MOVWF  00
30C4:  MOVF   4C,W
30C5:  MOVWI  W,[FSR0+01]
30C6:  MOVF   4D,W
30C7:  MOVWI  W,[FSR0+02]
30C8:  MOVF   4E,W
30C9:  MOVWI  W,[FSR0+03]
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
30CA:  MOVF   31,W
30CB:  MOVWF  7A
30CC:  MOVF   30,W
30CD:  MOVWF  04
30CE:  MOVF   31,W
30CF:  MOVWF  05
30D0:  MOVF   00,W
30D1:  MOVWF  49
30D2:  ADDFSR 01,FSR0
30D3:  MOVF   00,W
30D4:  MOVWF  4A
30D5:  ADDFSR 01,FSR0
30D6:  MOVF   00,W
30D7:  MOVWF  4B
30D8:  ADDFSR 01,FSR0
30D9:  MOVF   00,W
30DA:  MOVWF  4C
30DB:  ADDFSR 3D,FSR0
30DC:  MOVLW  D8
30DD:  MOVLB  03
30DE:  MOVWF  11
30DF:  MOVLW  05
30E0:  MOVWF  12
30E1:  BCF    03.0
30E2:  MOVLW  25
30E3:  MOVLB  11
30E4:  MOVWF  51
30E5:  MOVLP  08
30E6:  MOVLB  00
30E7:  CALL   327
30E8:  MOVLP  30
30E9:  MOVLB  11
30EA:  MOVF   4C,W
30EB:  MOVWF  51
30EC:  MOVLW  37
30ED:  MOVWF  52
30EE:  MOVLP  08
30EF:  MOVLB  00
30F0:  CALL   381
30F1:  MOVLP  30
30F2:  MOVLB  11
30F3:  MOVF   4B,W
30F4:  MOVWF  51
30F5:  MOVLW  37
30F6:  MOVWF  52
30F7:  MOVLP  08
30F8:  MOVLB  00
30F9:  CALL   381
30FA:  MOVLP  30
30FB:  MOVLB  11
30FC:  MOVF   4A,W
30FD:  MOVWF  51
30FE:  MOVLW  37
30FF:  MOVWF  52
3100:  MOVLP  08
3101:  MOVLB  00
3102:  CALL   381
3103:  MOVLP  30
3104:  MOVLB  11
3105:  MOVF   49,W
3106:  MOVWF  51
3107:  MOVLW  37
3108:  MOVWF  52
3109:  MOVLP  08
310A:  MOVLB  00
310B:  CALL   381
310C:  MOVLP  30
310D:  MOVLW  0D
310E:  MOVLB  13
310F:  MOVWF  2B
3110:  MOVLP  08
3111:  MOVLB  00
3112:  CALL   020
3113:  MOVLP  30
3114:  MOVLW  0A
3115:  MOVLB  13
3116:  MOVWF  2B
3117:  MOVLP  08
3118:  MOVLB  00
3119:  CALL   020
311A:  MOVLP  30
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
311B:  MOVLB  11
311C:  MOVF   33,W
311D:  MOVWF  7A
311E:  MOVF   32,W
311F:  MOVWF  04
3120:  MOVF   33,W
3121:  MOVWF  05
3122:  MOVF   00,W
3123:  MOVWF  49
3124:  ADDFSR 01,FSR0
3125:  MOVF   00,W
3126:  MOVWF  4A
3127:  ADDFSR 01,FSR0
3128:  MOVF   00,W
3129:  MOVWF  4B
312A:  ADDFSR 01,FSR0
312B:  MOVF   00,W
312C:  MOVWF  4C
312D:  ADDFSR 3D,FSR0
312E:  MOVLW  EE
312F:  MOVLB  03
3130:  MOVWF  11
3131:  MOVLW  05
3132:  MOVWF  12
3133:  BCF    03.0
3134:  MOVLW  25
3135:  MOVLB  11
3136:  MOVWF  51
3137:  MOVLP  08
3138:  MOVLB  00
3139:  CALL   327
313A:  MOVLP  30
313B:  MOVLB  11
313C:  MOVF   4C,W
313D:  MOVWF  51
313E:  MOVLW  37
313F:  MOVWF  52
3140:  MOVLP  08
3141:  MOVLB  00
3142:  CALL   381
3143:  MOVLP  30
3144:  MOVLB  11
3145:  MOVF   4B,W
3146:  MOVWF  51
3147:  MOVLW  37
3148:  MOVWF  52
3149:  MOVLP  08
314A:  MOVLB  00
314B:  CALL   381
314C:  MOVLP  30
314D:  MOVLB  11
314E:  MOVF   4A,W
314F:  MOVWF  51
3150:  MOVLW  37
3151:  MOVWF  52
3152:  MOVLP  08
3153:  MOVLB  00
3154:  CALL   381
3155:  MOVLP  30
3156:  MOVLB  11
3157:  MOVF   49,W
3158:  MOVWF  51
3159:  MOVLW  37
315A:  MOVWF  52
315B:  MOVLP  08
315C:  MOVLB  00
315D:  CALL   381
315E:  MOVLP  30
315F:  MOVLW  0D
3160:  MOVLB  13
3161:  MOVWF  2B
3162:  MOVLP  08
3163:  MOVLB  00
3164:  CALL   020
3165:  MOVLP  30
3166:  MOVLW  0A
3167:  MOVLB  13
3168:  MOVWF  2B
3169:  MOVLP  08
316A:  MOVLB  00
316B:  CALL   020
316C:  MOVLP  30
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
316D:  MOVLB  11
316E:  MOVF   35,W
316F:  MOVWF  7A
3170:  MOVF   34,W
3171:  MOVWF  04
3172:  MOVF   35,W
3173:  MOVWF  05
3174:  MOVF   00,W
3175:  MOVWF  49
3176:  ADDFSR 01,FSR0
3177:  MOVF   00,W
3178:  MOVWF  4A
3179:  ADDFSR 01,FSR0
317A:  MOVF   00,W
317B:  MOVWF  4B
317C:  ADDFSR 01,FSR0
317D:  MOVF   00,W
317E:  MOVWF  4C
317F:  ADDFSR 3D,FSR0
3180:  MOVLW  04
3181:  MOVLB  03
3182:  MOVWF  11
3183:  MOVLW  06
3184:  MOVWF  12
3185:  BCF    03.0
3186:  MOVLW  25
3187:  MOVLB  11
3188:  MOVWF  51
3189:  MOVLP  08
318A:  MOVLB  00
318B:  CALL   327
318C:  MOVLP  30
318D:  MOVLB  11
318E:  MOVF   4C,W
318F:  MOVWF  51
3190:  MOVLW  37
3191:  MOVWF  52
3192:  MOVLP  08
3193:  MOVLB  00
3194:  CALL   381
3195:  MOVLP  30
3196:  MOVLB  11
3197:  MOVF   4B,W
3198:  MOVWF  51
3199:  MOVLW  37
319A:  MOVWF  52
319B:  MOVLP  08
319C:  MOVLB  00
319D:  CALL   381
319E:  MOVLP  30
319F:  MOVLB  11
31A0:  MOVF   4A,W
31A1:  MOVWF  51
31A2:  MOVLW  37
31A3:  MOVWF  52
31A4:  MOVLP  08
31A5:  MOVLB  00
31A6:  CALL   381
31A7:  MOVLP  30
31A8:  MOVLB  11
31A9:  MOVF   49,W
31AA:  MOVWF  51
31AB:  MOVLW  37
31AC:  MOVWF  52
31AD:  MOVLP  08
31AE:  MOVLB  00
31AF:  CALL   381
31B0:  MOVLP  30
31B1:  MOVLW  0D
31B2:  MOVLB  13
31B3:  MOVWF  2B
31B4:  MOVLP  08
31B5:  MOVLB  00
31B6:  CALL   020
31B7:  MOVLP  30
31B8:  MOVLW  0A
31B9:  MOVLB  13
31BA:  MOVWF  2B
31BB:  MOVLP  08
31BC:  MOVLB  00
31BD:  CALL   020
31BE:  MOVLP  30
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
31BF:  MOVLB  11
31C0:  MOVF   37,W
31C1:  MOVWF  7A
31C2:  MOVF   36,W
31C3:  MOVWF  04
31C4:  MOVF   37,W
31C5:  MOVWF  05
31C6:  MOVF   00,W
31C7:  MOVWF  49
31C8:  ADDFSR 01,FSR0
31C9:  MOVF   00,W
31CA:  MOVWF  4A
31CB:  ADDFSR 01,FSR0
31CC:  MOVF   00,W
31CD:  MOVWF  4B
31CE:  ADDFSR 01,FSR0
31CF:  MOVF   00,W
31D0:  MOVWF  4C
31D1:  ADDFSR 3D,FSR0
31D2:  MOVLW  1A
31D3:  MOVLB  03
31D4:  MOVWF  11
31D5:  MOVLW  06
31D6:  MOVWF  12
31D7:  BCF    03.0
31D8:  MOVLW  25
31D9:  MOVLB  11
31DA:  MOVWF  51
31DB:  MOVLP  08
31DC:  MOVLB  00
31DD:  CALL   327
31DE:  MOVLP  30
31DF:  MOVLW  41
31E0:  MOVWF  04
31E1:  MOVLB  11
31E2:  MOVF   4C,W
31E3:  MOVWF  54
31E4:  MOVF   4B,W
31E5:  MOVWF  53
31E6:  MOVF   4A,W
31E7:  MOVWF  52
31E8:  MOVF   49,W
31E9:  MOVWF  51
31EA:  MOVLP  28
31EB:  MOVLB  00
31EC:  CALL   3A2
31ED:  MOVLP  30
31EE:  MOVLW  2E
31EF:  MOVLB  03
31F0:  MOVWF  11
31F1:  MOVLW  06
31F2:  MOVWF  12
31F3:  BCF    03.0
31F4:  MOVLW  04
31F5:  MOVLB  11
31F6:  MOVWF  51
31F7:  MOVLP  08
31F8:  MOVLB  00
31F9:  CALL   327
31FA:  MOVLP  30
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
31FB:  MOVLB  11
31FC:  MOVF   31,W
31FD:  MOVWF  7A
31FE:  MOVF   30,W
31FF:  MOVWF  04
3200:  MOVF   31,W
3201:  MOVWF  05
3202:  MOVF   00,W
3203:  MOVWF  49
3204:  ADDFSR 01,FSR0
3205:  MOVF   00,W
3206:  MOVWF  4A
3207:  ADDFSR 01,FSR0
3208:  MOVF   00,W
3209:  MOVWF  4B
320A:  ADDFSR 01,FSR0
320B:  MOVF   00,W
320C:  MOVWF  4C
320D:  ADDFSR 3D,FSR0
320E:  MOVLB  0D
320F:  MOVF   49,W
3210:  MOVLB  13
3211:  MOVWF  2A
3212:  MOVLB  0D
3213:  MOVF   48,W
3214:  MOVLB  13
3215:  MOVWF  29
3216:  MOVLB  0D
3217:  MOVF   47,W
3218:  MOVLB  13
3219:  MOVWF  28
321A:  MOVLB  0D
321B:  MOVF   46,W
321C:  MOVLB  13
321D:  MOVWF  27
321E:  MOVLB  11
321F:  MOVF   4C,W
3220:  MOVLB  13
3221:  MOVWF  2E
3222:  MOVLB  11
3223:  MOVF   4B,W
3224:  MOVLB  13
3225:  MOVWF  2D
3226:  MOVLB  11
3227:  MOVF   4A,W
3228:  MOVLB  13
3229:  MOVWF  2C
322A:  MOVLB  11
322B:  MOVF   49,W
322C:  MOVLB  13
322D:  MOVWF  2B
322E:  MOVLW  25
322F:  MOVWF  30
3230:  MOVLW  6C
3231:  MOVWF  2F
3232:  CLRF   34
3233:  CLRF   33
3234:  CLRF   32
3235:  MOVLW  04
3236:  MOVWF  31
3237:  MOVLP  08
3238:  MOVLB  00
3239:  CALL   260
323A:  MOVLP  30
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
323B:  MOVLB  11
323C:  MOVF   3A,W
323D:  MOVWF  04
323E:  MOVF   3B,W
323F:  MOVWF  05
3240:  CLRF   4E
3241:  CLRF   4D
3242:  CLRF   4C
3243:  MOVF   3F,W
3244:  MOVWF  4B
3245:  MOVWF  4E
3246:  CLRF   4B
3247:  CLRF   4C
3248:  CLRF   4D
3249:  CLRF   53
324A:  CLRF   52
324B:  CLRF   51
324C:  MOVF   3E,W
324D:  MOVWF  50
324E:  MOVF   51,W
324F:  MOVWF  7A
3250:  MOVF   50,W
3251:  MOVWF  79
3252:  CLRF   77
3253:  CLRF   78
3254:  MOVF   77,W
3255:  IORWF  4B,F
3256:  MOVF   78,W
3257:  IORWF  4C,F
3258:  MOVF   50,W
3259:  IORWF  4D,F
325A:  MOVF   51,W
325B:  IORWF  4E,F
325C:  CLRF   53
325D:  CLRF   52
325E:  CLRF   51
325F:  MOVF   3D,W
3260:  MOVWF  50
3261:  MOVF   52,W
3262:  MOVWF  7A
3263:  MOVF   51,W
3264:  MOVWF  79
3265:  MOVF   50,W
3266:  MOVWF  78
3267:  CLRF   77
3268:  MOVF   77,W
3269:  IORWF  4B,F
326A:  MOVF   50,W
326B:  IORWF  4C,F
326C:  MOVF   51,W
326D:  IORWF  4D,F
326E:  MOVF   52,W
326F:  IORWF  4E,F
3270:  CLRF   78
3271:  CLRF   79
3272:  CLRF   7A
3273:  MOVF   3C,W
3274:  IORWF  4B,W
3275:  MOVWF  77
3276:  MOVF   78,W
3277:  IORWF  4C,W
3278:  MOVWF  78
3279:  MOVF   79,W
327A:  IORWF  4D,W
327B:  MOVWF  79
327C:  MOVF   7A,W
327D:  IORWF  4E,W
327E:  MOVWF  7A
327F:  MOVF   77,W
3280:  MOVWF  00
3281:  MOVF   78,W
3282:  MOVWI  W,[FSR0+01]
3283:  MOVF   79,W
3284:  MOVWI  W,[FSR0+02]
3285:  MOVF   7A,W
3286:  MOVWI  W,[FSR0+03]
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
3287:  MOVF   38,W
3288:  MOVWF  49
3289:  MOVF   39,W
328A:  MOVWF  4A
328B:  MOVF   31,W
328C:  MOVWF  7A
328D:  MOVF   30,W
328E:  MOVWF  04
328F:  MOVF   31,W
3290:  MOVWF  05
3291:  MOVF   00,W
3292:  MOVWF  4B
3293:  ADDFSR 01,FSR0
3294:  MOVF   00,W
3295:  MOVWF  4C
3296:  ADDFSR 01,FSR0
3297:  MOVF   00,W
3298:  MOVWF  4D
3299:  ADDFSR 01,FSR0
329A:  MOVF   00,W
329B:  MOVWF  4E
329C:  ADDFSR 3D,FSR0
329D:  MOVLW  04
329E:  ADDWF  4B,F
329F:  MOVLW  00
32A0:  ADDWFC 4C,F
32A1:  ADDWFC 4D,F
32A2:  ADDWFC 4E,F
32A3:  MOVLB  0D
32A4:  MOVF   49,W
32A5:  MOVLB  11
32A6:  MOVWF  52
32A7:  MOVLB  0D
32A8:  MOVF   48,W
32A9:  MOVLB  11
32AA:  MOVWF  51
32AB:  MOVLB  0D
32AC:  MOVF   47,W
32AD:  MOVLB  11
32AE:  MOVWF  50
32AF:  MOVLB  0D
32B0:  MOVF   46,W
32B1:  MOVLB  11
32B2:  MOVWF  4F
32B3:  MOVF   4E,W
32B4:  MOVWF  56
32B5:  MOVF   4D,W
32B6:  MOVWF  55
32B7:  MOVF   4C,W
32B8:  MOVWF  54
32B9:  MOVF   4B,W
32BA:  MOVWF  53
32BB:  MOVLP  28
32BC:  MOVLB  00
32BD:  GOTO   40D
32BE:  MOVLP  30
32BF:  MOVLB  11
32C0:  MOVF   4A,W
32C1:  MOVWF  05
32C2:  MOVF   49,W
32C3:  MOVWF  04
32C4:  MOVF   78,W
32C5:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
32C6:  MOVLW  31
32C7:  MOVLB  03
32C8:  MOVWF  11
32C9:  MOVLW  06
32CA:  MOVWF  12
32CB:  MOVLP  08
32CC:  MOVLB  00
32CD:  CALL   045
32CE:  MOVLP  30
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
32CF:  MOVLB  11
32D0:  MOVF   3A,W
32D1:  MOVWF  04
32D2:  MOVF   3B,W
32D3:  MOVWF  05
32D4:  MOVF   00,W
32D5:  MOVWF  49
32D6:  ADDFSR 01,FSR0
32D7:  MOVF   00,W
32D8:  MOVWF  4A
32D9:  ADDFSR 01,FSR0
32DA:  MOVF   00,W
32DB:  MOVWF  4B
32DC:  ADDFSR 01,FSR0
32DD:  MOVF   00,W
32DE:  MOVWF  4C
32DF:  ADDFSR 3D,FSR0
32E0:  MOVF   31,W
32E1:  MOVWF  7A
32E2:  MOVF   30,W
32E3:  MOVWF  04
32E4:  MOVF   31,W
32E5:  MOVWF  05
32E6:  MOVF   00,W
32E7:  MOVWF  4D
32E8:  ADDFSR 01,FSR0
32E9:  MOVF   00,W
32EA:  MOVWF  4E
32EB:  ADDFSR 01,FSR0
32EC:  MOVF   00,W
32ED:  MOVWF  4F
32EE:  ADDFSR 01,FSR0
32EF:  MOVF   00,W
32F0:  MOVWF  50
32F1:  ADDFSR 3D,FSR0
32F2:  MOVLW  3A
32F3:  MOVLB  03
32F4:  MOVWF  11
32F5:  MOVLW  06
32F6:  MOVWF  12
32F7:  BCF    03.0
32F8:  MOVLW  0C
32F9:  MOVLB  11
32FA:  MOVWF  51
32FB:  MOVLP  08
32FC:  MOVLB  00
32FD:  CALL   327
32FE:  MOVLP  30
32FF:  MOVLW  41
3300:  MOVWF  04
3301:  MOVLB  11
3302:  MOVF   4C,W
3303:  MOVWF  54
3304:  MOVF   4B,W
3305:  MOVWF  53
3306:  MOVF   4A,W
3307:  MOVWF  52
3308:  MOVF   49,W
3309:  MOVWF  51
330A:  MOVLP  28
330B:  MOVLB  00
330C:  CALL   3A2
330D:  MOVLP  30
330E:  MOVLW  41
330F:  MOVLB  03
3310:  MOVWF  11
3311:  MOVLW  06
3312:  MOVWF  12
3313:  BSF    03.0
3314:  MOVLW  08
3315:  MOVLB  11
3316:  MOVWF  51
3317:  MOVLP  08
3318:  MOVLB  00
3319:  CALL   327
331A:  MOVLP  30
331B:  MOVLB  11
331C:  MOVF   50,W
331D:  MOVWF  51
331E:  MOVLW  37
331F:  MOVWF  52
3320:  MOVLP  08
3321:  MOVLB  00
3322:  CALL   381
3323:  MOVLP  30
3324:  MOVLB  11
3325:  MOVF   4F,W
3326:  MOVWF  51
3327:  MOVLW  37
3328:  MOVWF  52
3329:  MOVLP  08
332A:  MOVLB  00
332B:  CALL   381
332C:  MOVLP  30
332D:  MOVLB  11
332E:  MOVF   4E,W
332F:  MOVWF  51
3330:  MOVLW  37
3331:  MOVWF  52
3332:  MOVLP  08
3333:  MOVLB  00
3334:  CALL   381
3335:  MOVLP  30
3336:  MOVLB  11
3337:  MOVF   4D,W
3338:  MOVWF  51
3339:  MOVLW  37
333A:  MOVWF  52
333B:  MOVLP  08
333C:  MOVLB  00
333D:  CALL   381
333E:  MOVLP  30
333F:  MOVLW  29
3340:  MOVLB  13
3341:  MOVWF  2B
3342:  MOVLP  08
3343:  MOVLB  00
3344:  CALL   020
3345:  MOVLP  30
3346:  MOVLW  0D
3347:  MOVLB  13
3348:  MOVWF  2B
3349:  MOVLP  08
334A:  MOVLB  00
334B:  CALL   020
334C:  MOVLP  30
334D:  MOVLW  0A
334E:  MOVLB  13
334F:  MOVWF  2B
3350:  MOVLP  08
3351:  MOVLB  00
3352:  CALL   020
3353:  MOVLP  30
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
3354:  MOVLB  11
3355:  MOVF   38,W
3356:  MOVWF  04
3357:  MOVF   39,W
3358:  MOVWF  05
3359:  MOVF   00,W
335A:  MOVWF  49
335B:  MOVF   31,W
335C:  MOVWF  7A
335D:  MOVF   30,W
335E:  MOVWF  04
335F:  MOVF   31,W
3360:  MOVWF  05
3361:  MOVF   00,W
3362:  MOVWF  4A
3363:  ADDFSR 01,FSR0
3364:  MOVF   00,W
3365:  MOVWF  4B
3366:  ADDFSR 01,FSR0
3367:  MOVF   00,W
3368:  MOVWF  4C
3369:  ADDFSR 01,FSR0
336A:  MOVF   00,W
336B:  MOVWF  4D
336C:  ADDFSR 3D,FSR0
336D:  MOVLW  04
336E:  ADDWF  4A,F
336F:  MOVLW  00
3370:  ADDWFC 4B,F
3371:  ADDWFC 4C,F
3372:  ADDWFC 4D,F
3373:  MOVLW  4A
3374:  MOVLB  03
3375:  MOVWF  11
3376:  MOVLW  06
3377:  MOVWF  12
3378:  BCF    03.0
3379:  MOVLW  0C
337A:  MOVLB  11
337B:  MOVWF  51
337C:  MOVLP  08
337D:  MOVLB  00
337E:  CALL   327
337F:  MOVLP  30
3380:  MOVLB  11
3381:  MOVF   49,W
3382:  MOVWF  4E
3383:  MOVLW  18
3384:  MOVWF  4F
3385:  MOVLP  28
3386:  MOVLB  00
3387:  CALL   2C0
3388:  MOVLP  30
3389:  MOVLW  51
338A:  MOVLB  03
338B:  MOVWF  11
338C:  MOVLW  06
338D:  MOVWF  12
338E:  BCF    03.0
338F:  MOVLW  09
3390:  MOVLB  11
3391:  MOVWF  51
3392:  MOVLP  08
3393:  MOVLB  00
3394:  CALL   327
3395:  MOVLP  30
3396:  MOVLB  11
3397:  MOVF   4D,W
3398:  MOVWF  51
3399:  MOVLW  37
339A:  MOVWF  52
339B:  MOVLP  08
339C:  MOVLB  00
339D:  CALL   381
339E:  MOVLP  30
339F:  MOVLB  11
33A0:  MOVF   4C,W
33A1:  MOVWF  51
33A2:  MOVLW  37
33A3:  MOVWF  52
33A4:  MOVLP  08
33A5:  MOVLB  00
33A6:  CALL   381
33A7:  MOVLP  30
33A8:  MOVLB  11
33A9:  MOVF   4B,W
33AA:  MOVWF  51
33AB:  MOVLW  37
33AC:  MOVWF  52
33AD:  MOVLP  08
33AE:  MOVLB  00
33AF:  CALL   381
33B0:  MOVLP  30
33B1:  MOVLB  11
33B2:  MOVF   4A,W
33B3:  MOVWF  51
33B4:  MOVLW  37
33B5:  MOVWF  52
33B6:  MOVLP  08
33B7:  MOVLB  00
33B8:  CALL   381
33B9:  MOVLP  30
33BA:  MOVLW  58
33BB:  MOVLB  03
33BC:  MOVWF  11
33BD:  MOVLW  06
33BE:  MOVWF  12
33BF:  BCF    03.0
33C0:  MOVLW  05
33C1:  MOVLB  11
33C2:  MOVWF  51
33C3:  MOVLP  08
33C4:  MOVLB  00
33C5:  CALL   327
33C6:  MOVLP  30
33C7:  MOVLP  38
33C8:  GOTO   06D (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
*
2CFB:  MOVLW  5B
2CFC:  MOVLB  03
2CFD:  MOVWF  11
2CFE:  MOVLW  06
2CFF:  MOVWF  12
2D00:  MOVLP  08
2D01:  MOVLB  00
2D02:  CALL   045
2D03:  MOVLP  28
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
2D04:  MOVLB  11
2D05:  MOVF   2F,W
2D06:  MOVWF  37
2D07:  MOVF   2E,W
2D08:  MOVWF  36
2D09:  MOVF   2D,W
2D0A:  MOVWF  35
2D0B:  MOVF   2C,W
2D0C:  MOVWF  34
2D0D:  MOVF   37,W
2D0E:  SUBWF  33,W
2D0F:  BTFSS  03.0
2D10:  GOTO   54D
2D11:  BTFSS  03.2
2D12:  GOTO   523
2D13:  MOVF   36,W
2D14:  SUBWF  32,W
2D15:  BTFSS  03.0
2D16:  GOTO   54D
2D17:  BTFSS  03.2
2D18:  GOTO   523
2D19:  MOVF   35,W
2D1A:  SUBWF  31,W
2D1B:  BTFSS  03.0
2D1C:  GOTO   54D
2D1D:  BTFSS  03.2
2D1E:  GOTO   523
2D1F:  MOVF   30,W
2D20:  SUBWF  34,W
2D21:  BTFSC  03.0
2D22:  GOTO   54D
....................         subsector_4kByte_erase(smf, addr);
2D23:  MOVLB  0D
2D24:  MOVF   49,W
2D25:  MOVLB  11
2D26:  MOVWF  6E
2D27:  MOVLB  0D
2D28:  MOVF   48,W
2D29:  MOVLB  11
2D2A:  MOVWF  6D
2D2B:  MOVLB  0D
2D2C:  MOVF   47,W
2D2D:  MOVLB  11
2D2E:  MOVWF  6C
2D2F:  MOVLB  0D
2D30:  MOVF   46,W
2D31:  MOVLB  11
2D32:  MOVWF  6B
2D33:  MOVF   37,W
2D34:  MOVLB  12
2D35:  MOVWF  23
2D36:  MOVLB  11
2D37:  MOVF   36,W
2D38:  MOVLB  12
2D39:  MOVWF  22
2D3A:  MOVLB  11
2D3B:  MOVF   35,W
2D3C:  MOVLB  12
2D3D:  MOVWF  21
2D3E:  MOVLB  11
2D3F:  MOVF   34,W
2D40:  MOVLB  12
2D41:  MOVWF  20
2D42:  MOVLP  10
2D43:  MOVLB  00
2D44:  CALL   199
2D45:  MOVLP  28
2D46:  MOVLW  10
2D47:  MOVLB  11
2D48:  ADDWF  35,F
2D49:  MOVLW  00
2D4A:  ADDWFC 36,F
2D4B:  ADDWFC 37,F
2D4C:  GOTO   50D
2D4D:  MOVLP  38
2D4E:  MOVLB  00
2D4F:  GOTO   100 (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
2D50:  MOVLB  11
2D51:  CLRF   38
2D52:  MOVF   2D,W
2D53:  ANDLW  F0
2D54:  MOVWF  39
2D55:  CLRF   3A
2D56:  CLRF   3B
2D57:  MOVF   30,W
2D58:  ADDWF  2C,W
2D59:  MOVWF  44
2D5A:  MOVF   31,W
2D5B:  ADDWFC 2D,W
2D5C:  MOVWF  45
2D5D:  MOVF   32,W
2D5E:  ADDWFC 2E,W
2D5F:  MOVWF  46
2D60:  MOVF   33,W
2D61:  ADDWFC 2F,W
2D62:  MOVWF  47
2D63:  MOVLW  FF
2D64:  ADDWF  44,F
2D65:  MOVLW  0F
2D66:  ADDWFC 45,F
2D67:  MOVLW  00
2D68:  ADDWFC 46,F
2D69:  ADDWFC 47,F
2D6A:  CLRF   3C
2D6B:  MOVF   45,W
2D6C:  ANDLW  F0
2D6D:  MOVWF  3D
2D6E:  CLRF   3E
2D6F:  CLRF   3F
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
2D70:  MOVF   3B,W
2D71:  MOVWF  43
2D72:  MOVF   3A,W
2D73:  MOVWF  42
2D74:  MOVF   39,W
2D75:  MOVWF  41
2D76:  MOVF   38,W
2D77:  MOVWF  40
2D78:  MOVF   43,W
2D79:  SUBWF  3F,W
2D7A:  BTFSS  03.0
2D7B:  GOTO   5CE
2D7C:  BTFSS  03.2
2D7D:  GOTO   58E
2D7E:  MOVF   42,W
2D7F:  SUBWF  3E,W
2D80:  BTFSS  03.0
2D81:  GOTO   5CE
2D82:  BTFSS  03.2
2D83:  GOTO   58E
2D84:  MOVF   41,W
2D85:  SUBWF  3D,W
2D86:  BTFSS  03.0
2D87:  GOTO   5CE
2D88:  BTFSS  03.2
2D89:  GOTO   58E
2D8A:  MOVF   3C,W
2D8B:  SUBWF  40,W
2D8C:  BTFSC  03.0
2D8D:  GOTO   5CE
2D8E:  MOVF   43,W
2D8F:  SUBWF  37,W
2D90:  BTFSS  03.0
2D91:  GOTO   5CE
2D92:  BTFSS  03.2
2D93:  GOTO   5A4
2D94:  MOVF   42,W
2D95:  SUBWF  36,W
2D96:  BTFSS  03.0
2D97:  GOTO   5CE
2D98:  BTFSS  03.2
2D99:  GOTO   5A4
2D9A:  MOVF   41,W
2D9B:  SUBWF  35,W
2D9C:  BTFSS  03.0
2D9D:  GOTO   5CE
2D9E:  BTFSS  03.2
2D9F:  GOTO   5A4
2DA0:  MOVF   34,W
2DA1:  SUBWF  40,W
2DA2:  BTFSC  03.0
2DA3:  GOTO   5CE
....................         subsector_4kByte_erase(smf, addr);
2DA4:  MOVLB  0D
2DA5:  MOVF   49,W
2DA6:  MOVLB  11
2DA7:  MOVWF  6E
2DA8:  MOVLB  0D
2DA9:  MOVF   48,W
2DAA:  MOVLB  11
2DAB:  MOVWF  6D
2DAC:  MOVLB  0D
2DAD:  MOVF   47,W
2DAE:  MOVLB  11
2DAF:  MOVWF  6C
2DB0:  MOVLB  0D
2DB1:  MOVF   46,W
2DB2:  MOVLB  11
2DB3:  MOVWF  6B
2DB4:  MOVF   43,W
2DB5:  MOVLB  12
2DB6:  MOVWF  23
2DB7:  MOVLB  11
2DB8:  MOVF   42,W
2DB9:  MOVLB  12
2DBA:  MOVWF  22
2DBB:  MOVLB  11
2DBC:  MOVF   41,W
2DBD:  MOVLB  12
2DBE:  MOVWF  21
2DBF:  MOVLB  11
2DC0:  MOVF   40,W
2DC1:  MOVLB  12
2DC2:  MOVWF  20
2DC3:  MOVLP  10
2DC4:  MOVLB  00
2DC5:  CALL   199
2DC6:  MOVLP  28
2DC7:  MOVLW  10
2DC8:  MOVLB  11
2DC9:  ADDWF  41,F
2DCA:  MOVLW  00
2DCB:  ADDWFC 42,F
2DCC:  ADDWFC 43,F
2DCD:  GOTO   578
2DCE:  MOVLP  38
2DCF:  MOVLB  00
2DD0:  GOTO   141 (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
2DD1:  MOVLB  11
2DD2:  MOVF   33,W
2DD3:  MOVWF  3F
2DD4:  MOVF   32,W
2DD5:  MOVWF  3E
2DD6:  MOVF   31,W
2DD7:  MOVWF  3D
2DD8:  MOVF   30,W
2DD9:  MOVWF  3C
2DDA:  MOVF   2F,W
2DDB:  MOVWF  43
2DDC:  MOVF   2E,W
2DDD:  MOVWF  42
2DDE:  MOVF   2D,W
2DDF:  MOVWF  41
2DE0:  MOVF   2C,W
2DE1:  MOVWF  40
2DE2:  MOVF   37,W
2DE3:  MOVWF  47
2DE4:  MOVF   36,W
2DE5:  MOVWF  46
2DE6:  MOVF   35,W
2DE7:  MOVWF  45
2DE8:  MOVF   34,W
2DE9:  MOVWF  44
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
2DEA:  MOVF   3C,F
2DEB:  BTFSS  03.2
2DEC:  GOTO   5F6
2DED:  MOVF   3D,F
2DEE:  BTFSS  03.2
2DEF:  GOTO   5F6
2DF0:  MOVF   3E,F
2DF1:  BTFSS  03.2
2DF2:  GOTO   5F6
2DF3:  MOVF   3F,F
2DF4:  BTFSC  03.2
2DF5:  GOTO   6A8
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
2DF6:  MOVF   3F,F
2DF7:  BTFSS  03.2
2DF8:  GOTO   603
2DF9:  MOVF   3E,F
2DFA:  BTFSS  03.2
2DFB:  GOTO   603
2DFC:  MOVF   3D,F
2DFD:  BTFSS  03.2
2DFE:  GOTO   603
2DFF:  MOVF   3C,W
2E00:  SUBLW  40
2E01:  BTFSC  03.0
2E02:  GOTO   606
2E03:  CLRF   7A
2E04:  MOVLW  40
2E05:  GOTO   609
2E06:  MOVF   3D,W
2E07:  MOVWF  7A
2E08:  MOVF   3C,W
2E09:  MOVWF  48
2E0A:  MOVF   7A,W
2E0B:  MOVWF  49
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
2E0C:  MOVLB  0D
2E0D:  MOVF   45,W
2E0E:  MOVLB  13
2E0F:  MOVWF  2A
2E10:  MOVLB  0D
2E11:  MOVF   44,W
2E12:  MOVLB  13
2E13:  MOVWF  29
2E14:  MOVLB  0D
2E15:  MOVF   43,W
2E16:  MOVLB  13
2E17:  MOVWF  28
2E18:  MOVLB  0D
2E19:  MOVF   42,W
2E1A:  MOVLB  13
2E1B:  MOVWF  27
2E1C:  MOVLB  11
2E1D:  MOVF   43,W
2E1E:  MOVLB  13
2E1F:  MOVWF  2E
2E20:  MOVLB  11
2E21:  MOVF   42,W
2E22:  MOVLB  13
2E23:  MOVWF  2D
2E24:  MOVLB  11
2E25:  MOVF   41,W
2E26:  MOVLB  13
2E27:  MOVWF  2C
2E28:  MOVLB  11
2E29:  MOVF   40,W
2E2A:  MOVLB  13
2E2B:  MOVWF  2B
2E2C:  MOVLB  11
2E2D:  MOVF   39,W
2E2E:  MOVLB  13
2E2F:  MOVWF  30
2E30:  MOVLB  11
2E31:  MOVF   38,W
2E32:  MOVLB  13
2E33:  MOVWF  2F
2E34:  CLRF   34
2E35:  CLRF   33
2E36:  MOVLB  11
2E37:  MOVF   49,W
2E38:  MOVLB  13
2E39:  MOVWF  32
2E3A:  MOVLB  11
2E3B:  MOVF   48,W
2E3C:  MOVLB  13
2E3D:  MOVWF  31
2E3E:  MOVLP  08
2E3F:  MOVLB  00
2E40:  CALL   260
2E41:  MOVLP  28
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
2E42:  MOVLB  0D
2E43:  MOVF   49,W
2E44:  MOVLB  13
2E45:  MOVWF  2A
2E46:  MOVLB  0D
2E47:  MOVF   48,W
2E48:  MOVLB  13
2E49:  MOVWF  29
2E4A:  MOVLB  0D
2E4B:  MOVF   47,W
2E4C:  MOVLB  13
2E4D:  MOVWF  28
2E4E:  MOVLB  0D
2E4F:  MOVF   46,W
2E50:  MOVLB  13
2E51:  MOVWF  27
2E52:  MOVLB  11
2E53:  MOVF   47,W
2E54:  MOVLB  13
2E55:  MOVWF  2E
2E56:  MOVLB  11
2E57:  MOVF   46,W
2E58:  MOVLB  13
2E59:  MOVWF  2D
2E5A:  MOVLB  11
2E5B:  MOVF   45,W
2E5C:  MOVLB  13
2E5D:  MOVWF  2C
2E5E:  MOVLB  11
2E5F:  MOVF   44,W
2E60:  MOVLB  13
2E61:  MOVWF  2B
2E62:  MOVLB  11
2E63:  MOVF   39,W
2E64:  MOVLB  13
2E65:  MOVWF  30
2E66:  MOVLB  11
2E67:  MOVF   38,W
2E68:  MOVLB  13
2E69:  MOVWF  2F
2E6A:  MOVLB  11
2E6B:  MOVF   49,W
2E6C:  MOVLB  13
2E6D:  MOVWF  32
2E6E:  MOVLB  11
2E6F:  MOVF   48,W
2E70:  MOVLB  13
2E71:  MOVWF  31
2E72:  MOVLP  10
2E73:  MOVLB  00
2E74:  CALL   000
2E75:  MOVLP  28
.................... 
....................         src_addr += chunk;
2E76:  MOVLB  11
2E77:  MOVF   48,W
2E78:  ADDWF  40,F
2E79:  MOVF   49,W
2E7A:  ADDWFC 41,F
2E7B:  MOVLW  00
2E7C:  ADDWFC 42,F
2E7D:  ADDWFC 43,F
....................         data_write_addr += chunk;
2E7E:  MOVF   48,W
2E7F:  ADDWF  44,F
2E80:  MOVF   49,W
2E81:  ADDWFC 45,F
2E82:  MOVLW  00
2E83:  ADDWFC 46,F
2E84:  ADDWFC 47,F
....................         *used_size += chunk;
2E85:  MOVF   3A,W
2E86:  MOVWF  04
2E87:  MOVF   3B,W
2E88:  MOVWF  05
2E89:  MOVF   48,W
2E8A:  ADDWF  00,W
2E8B:  MOVWF  77
2E8C:  ADDFSR 01,FSR0
2E8D:  MOVF   49,W
2E8E:  ADDWFC 00,W
2E8F:  MOVWF  78
2E90:  ADDFSR 01,FSR0
2E91:  MOVLW  00
2E92:  ADDWFC 00,W
2E93:  MOVWF  79
2E94:  ADDFSR 01,FSR0
2E95:  MOVLW  00
2E96:  ADDWFC 00,W
2E97:  MOVWF  7A
2E98:  MOVF   77,W
2E99:  MOVWI  W,[FSR0-03]
2E9A:  MOVF   78,W
2E9B:  MOVWI  W,[FSR0-02]
2E9C:  MOVF   79,W
2E9D:  MOVWI  W,[FSR0-01]
2E9E:  MOVF   7A,W
2E9F:  MOVWI  W,[FSR0+00]
....................         remaining -= chunk;
2EA0:  MOVF   48,W
2EA1:  SUBWF  3C,F
2EA2:  MOVF   49,W
2EA3:  SUBWFC 3D,F
2EA4:  MOVLW  00
2EA5:  SUBWFC 3E,F
2EA6:  SUBWFC 3F,F
2EA7:  GOTO   5EA
....................     }
2EA8:  MOVLP  38
2EA9:  MOVLB  00
2EAA:  GOTO   175 (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
358E:  MOVLW  76
358F:  MOVLB  03
3590:  MOVWF  11
3591:  MOVLW  06
3592:  MOVWF  12
3593:  MOVLP  08
3594:  MOVLB  00
3595:  CALL   045
3596:  MOVLP  30
....................     subsector_4kByte_erase(smf, base_addr);
3597:  MOVLB  0D
3598:  MOVF   49,W
3599:  MOVLB  11
359A:  MOVWF  6E
359B:  MOVLB  0D
359C:  MOVF   48,W
359D:  MOVLB  11
359E:  MOVWF  6D
359F:  MOVLB  0D
35A0:  MOVF   47,W
35A1:  MOVLB  11
35A2:  MOVWF  6C
35A3:  MOVLB  0D
35A4:  MOVF   46,W
35A5:  MOVLB  11
35A6:  MOVWF  6B
35A7:  MOVF   2F,W
35A8:  MOVLB  12
35A9:  MOVWF  23
35AA:  MOVLB  11
35AB:  MOVF   2E,W
35AC:  MOVLB  12
35AD:  MOVWF  22
35AE:  MOVLB  11
35AF:  MOVF   2D,W
35B0:  MOVLB  12
35B1:  MOVWF  21
35B2:  MOVLB  11
35B3:  MOVF   2C,W
35B4:  MOVLB  12
35B5:  MOVWF  20
35B6:  MOVLP  10
35B7:  MOVLB  00
35B8:  CALL   199
35B9:  MOVLP  30
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
35BA:  MOVLB  11
35BB:  MOVF   33,W
35BC:  MOVWF  3E
35BD:  MOVF   32,W
35BE:  MOVWF  3D
35BF:  MOVF   31,W
35C0:  MOVWF  3C
35C1:  MOVF   30,W
35C2:  MOVWF  3B
35C3:  CLRF   3C
35C4:  CLRF   3D
35C5:  CLRF   3E
35C6:  MOVLB  0D
35C7:  MOVF   49,W
35C8:  MOVLB  11
35C9:  MOVWF  46
35CA:  MOVLB  0D
35CB:  MOVF   48,W
35CC:  MOVLB  11
35CD:  MOVWF  45
35CE:  MOVLB  0D
35CF:  MOVF   47,W
35D0:  MOVLB  11
35D1:  MOVWF  44
35D2:  MOVLB  0D
35D3:  MOVF   46,W
35D4:  MOVLB  11
35D5:  MOVWF  43
35D6:  MOVF   2F,W
35D7:  MOVWF  4A
35D8:  MOVF   2E,W
35D9:  MOVWF  49
35DA:  MOVF   2D,W
35DB:  MOVWF  48
35DC:  MOVF   2C,W
35DD:  MOVWF  47
35DE:  MOVF   30,W
35DF:  MOVWF  4B
35E0:  MOVLB  00
35E1:  CALL   3C9
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
35E2:  MOVLW  01
35E3:  MOVLB  11
35E4:  ADDWF  2C,W
35E5:  MOVWF  3A
35E6:  MOVLW  00
35E7:  ADDWFC 2D,W
35E8:  MOVWF  3B
35E9:  MOVLW  00
35EA:  ADDWFC 2E,W
35EB:  MOVWF  3C
35EC:  MOVLW  00
35ED:  ADDWFC 2F,W
35EE:  MOVWF  3D
35EF:  MOVF   31,W
35F0:  MOVWF  3F
35F1:  MOVF   32,W
35F2:  MOVWF  40
35F3:  MOVF   33,W
35F4:  MOVWF  41
35F5:  CLRF   42
35F6:  CLRF   40
35F7:  CLRF   41
35F8:  CLRF   42
35F9:  MOVLB  0D
35FA:  MOVF   49,W
35FB:  MOVLB  11
35FC:  MOVWF  46
35FD:  MOVLB  0D
35FE:  MOVF   48,W
35FF:  MOVLB  11
3600:  MOVWF  45
3601:  MOVLB  0D
3602:  MOVF   47,W
3603:  MOVLB  11
3604:  MOVWF  44
3605:  MOVLB  0D
3606:  MOVF   46,W
3607:  MOVLB  11
3608:  MOVWF  43
3609:  MOVF   3D,W
360A:  MOVWF  4A
360B:  MOVF   3C,W
360C:  MOVWF  49
360D:  MOVF   3B,W
360E:  MOVWF  48
360F:  MOVF   3A,W
3610:  MOVWF  47
3611:  MOVF   31,W
3612:  MOVWF  4B
3613:  MOVLB  00
3614:  CALL   3C9
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
3615:  MOVLW  02
3616:  MOVLB  11
3617:  ADDWF  2C,W
3618:  MOVWF  3A
3619:  MOVLW  00
361A:  ADDWFC 2D,W
361B:  MOVWF  3B
361C:  MOVLW  00
361D:  ADDWFC 2E,W
361E:  MOVWF  3C
361F:  MOVLW  00
3620:  ADDWFC 2F,W
3621:  MOVWF  3D
3622:  MOVF   32,W
3623:  MOVWF  3F
3624:  MOVF   33,W
3625:  MOVWF  40
3626:  CLRF   41
3627:  CLRF   42
3628:  CLRF   40
3629:  CLRF   41
362A:  CLRF   42
362B:  MOVLB  0D
362C:  MOVF   49,W
362D:  MOVLB  11
362E:  MOVWF  46
362F:  MOVLB  0D
3630:  MOVF   48,W
3631:  MOVLB  11
3632:  MOVWF  45
3633:  MOVLB  0D
3634:  MOVF   47,W
3635:  MOVLB  11
3636:  MOVWF  44
3637:  MOVLB  0D
3638:  MOVF   46,W
3639:  MOVLB  11
363A:  MOVWF  43
363B:  MOVF   3D,W
363C:  MOVWF  4A
363D:  MOVF   3C,W
363E:  MOVWF  49
363F:  MOVF   3B,W
3640:  MOVWF  48
3641:  MOVF   3A,W
3642:  MOVWF  47
3643:  MOVF   32,W
3644:  MOVWF  4B
3645:  MOVLB  00
3646:  CALL   3C9
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
3647:  MOVLW  03
3648:  MOVLB  11
3649:  ADDWF  2C,W
364A:  MOVWF  3A
364B:  MOVLW  00
364C:  ADDWFC 2D,W
364D:  MOVWF  3B
364E:  MOVLW  00
364F:  ADDWFC 2E,W
3650:  MOVWF  3C
3651:  MOVLW  00
3652:  ADDWFC 2F,W
3653:  MOVWF  3D
3654:  MOVF   33,W
3655:  MOVWF  3F
3656:  CLRF   40
3657:  CLRF   41
3658:  CLRF   42
3659:  CLRF   40
365A:  CLRF   41
365B:  CLRF   42
365C:  MOVLB  0D
365D:  MOVF   49,W
365E:  MOVLB  11
365F:  MOVWF  46
3660:  MOVLB  0D
3661:  MOVF   48,W
3662:  MOVLB  11
3663:  MOVWF  45
3664:  MOVLB  0D
3665:  MOVF   47,W
3666:  MOVLB  11
3667:  MOVWF  44
3668:  MOVLB  0D
3669:  MOVF   46,W
366A:  MOVLB  11
366B:  MOVWF  43
366C:  MOVF   3D,W
366D:  MOVWF  4A
366E:  MOVF   3C,W
366F:  MOVWF  49
3670:  MOVF   3B,W
3671:  MOVWF  48
3672:  MOVF   3A,W
3673:  MOVWF  47
3674:  MOVF   33,W
3675:  MOVWF  4B
3676:  MOVLB  00
3677:  CALL   3C9
....................     write_data_byte(smf, base_addr + 4, loop_count);
3678:  MOVLW  04
3679:  MOVLB  11
367A:  ADDWF  2C,W
367B:  MOVWF  3A
367C:  MOVLW  00
367D:  ADDWFC 2D,W
367E:  MOVWF  3B
367F:  MOVLW  00
3680:  ADDWFC 2E,W
3681:  MOVWF  3C
3682:  MOVLW  00
3683:  ADDWFC 2F,W
3684:  MOVWF  3D
3685:  MOVLB  0D
3686:  MOVF   49,W
3687:  MOVLB  11
3688:  MOVWF  46
3689:  MOVLB  0D
368A:  MOVF   48,W
368B:  MOVLB  11
368C:  MOVWF  45
368D:  MOVLB  0D
368E:  MOVF   47,W
368F:  MOVLB  11
3690:  MOVWF  44
3691:  MOVLB  0D
3692:  MOVF   46,W
3693:  MOVLB  11
3694:  MOVWF  43
3695:  MOVF   3D,W
3696:  MOVWF  4A
3697:  MOVF   3C,W
3698:  MOVWF  49
3699:  MOVF   3B,W
369A:  MOVWF  48
369B:  MOVF   3A,W
369C:  MOVWF  47
369D:  MOVF   34,W
369E:  MOVWF  4B
369F:  MOVLB  00
36A0:  CALL   3C9
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
36A1:  MOVLW  80
36A2:  MOVLB  03
36A3:  MOVWF  11
36A4:  MOVLW  06
36A5:  MOVWF  12
36A6:  BCF    03.0
36A7:  MOVLW  0C
36A8:  MOVLB  11
36A9:  MOVWF  51
36AA:  MOVLP  08
36AB:  MOVLB  00
36AC:  CALL   327
36AD:  MOVLP  30
36AE:  MOVLW  41
36AF:  MOVWF  04
36B0:  MOVLB  11
36B1:  MOVF   33,W
36B2:  MOVWF  3D
36B3:  MOVF   32,W
36B4:  MOVWF  3C
36B5:  MOVF   31,W
36B6:  MOVWF  3B
36B7:  MOVF   30,W
36B8:  MOVWF  3A
*
3752:  MOVLW  0D
3753:  MOVLB  13
3754:  MOVWF  2B
3755:  MOVLP  08
3756:  MOVLB  00
3757:  CALL   020
3758:  MOVLP  30
3759:  MOVLW  0A
375A:  MOVLB  13
375B:  MOVWF  2B
375C:  MOVLP  08
375D:  MOVLB  00
375E:  CALL   020
375F:  MOVLP  30
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
3760:  MOVLW  89
3761:  MOVLB  03
3762:  MOVWF  11
3763:  MOVLW  06
3764:  MOVWF  12
3765:  BCF    03.0
3766:  MOVLW  0D
3767:  MOVLB  11
3768:  MOVWF  51
3769:  MOVLP  08
376A:  MOVLB  00
376B:  CALL   327
376C:  MOVLP  30
376D:  MOVLB  11
376E:  MOVF   34,W
376F:  MOVWF  3A
3770:  MOVLW  1B
3771:  MOVWF  3B
3772:  MOVLP  20
3773:  MOVLB  00
3774:  CALL   595
3775:  MOVLP  30
3776:  MOVLW  90
3777:  MOVLB  03
3778:  MOVWF  11
3779:  MOVLW  06
377A:  MOVWF  12
377B:  BSF    03.0
377C:  MOVLW  04
377D:  MOVLB  11
377E:  MOVWF  51
377F:  MOVLP  08
3780:  MOVLB  00
3781:  CALL   327
3782:  MOVLP  30
3783:  MOVLP  38
3784:  GOTO   19D (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
267D:  MOVLB  0F
267E:  MOVF   5A,W
267F:  MOVWF  04
2680:  MOVF   5B,W
2681:  MOVWF  05
2682:  MOVIW  [FSR0+00],W
2683:  MOVWF  5C
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
2684:  MOVLW  93
2685:  MOVLB  03
2686:  MOVWF  11
2687:  MOVLW  06
2688:  MOVWF  12
2689:  MOVLP  08
268A:  MOVLB  00
268B:  CALL   045
268C:  MOVLP  20
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
268D:  MOVLW  B6
268E:  MOVLB  03
268F:  MOVWF  11
2690:  MOVLW  06
2691:  MOVWF  12
2692:  BCF    03.0
2693:  MOVLW  0C
2694:  MOVLB  11
2695:  MOVWF  51
2696:  MOVLP  08
2697:  MOVLB  00
2698:  CALL   327
2699:  MOVLP  20
269A:  MOVLB  0F
269B:  MOVF   5C,W
269C:  MOVLB  11
269D:  MOVWF  51
269E:  MOVLW  37
269F:  MOVWF  52
26A0:  MOVLP  08
26A1:  MOVLB  00
26A2:  CALL   381
26A3:  MOVLP  20
26A4:  MOVLW  BD
26A5:  MOVLB  03
26A6:  MOVWF  11
26A7:  MOVLW  06
26A8:  MOVWF  12
26A9:  BCF    03.0
26AA:  MOVLW  04
26AB:  MOVLB  11
26AC:  MOVWF  51
26AD:  MOVLP  08
26AE:  MOVLB  00
26AF:  CALL   327
26B0:  MOVLP  20
....................    switch(command_id)
26B1:  MOVLB  0F
26B2:  MOVF   5C,W
26B3:  XORLW  00
26B4:  MOVLB  00
26B5:  BTFSC  03.2
26B6:  GOTO   6E8
26B7:  XORLW  10
26B8:  BTFSC  03.2
26B9:  GOTO   6F2
26BA:  XORLW  11
26BB:  BTFSC  03.2
26BC:  GOTO   6F3
26BD:  XORLW  03
26BE:  BTFSC  03.2
26BF:  GOTO   6F4
26C0:  XORLW  92
26C1:  BTFSC  03.2
26C2:  GOTO   6F5
26C3:  XORLW  01
26C4:  BTFSC  03.2
26C5:  GOTO   6FF
26C6:  XORLW  03
26C7:  BTFSC  03.2
26C8:  GOTO   709
26C9:  XORLW  01
26CA:  BTFSC  03.2
26CB:  GOTO   713
26CC:  XORLW  07
26CD:  BTFSC  03.2
26CE:  GOTO   71D
26CF:  XORLW  02
26D0:  BTFSC  03.2
26D1:  GOTO   725
26D2:  XORLW  01
26D3:  BTFSC  03.2
26D4:  GOTO   72D
26D5:  XORLW  0D
26D6:  BTFSC  03.2
26D7:  GOTO   735
26D8:  XORLW  05
26D9:  BTFSC  03.2
26DA:  GOTO   73D
26DB:  XORLW  EE
26DC:  BTFSC  03.2
26DD:  GOTO   745
26DE:  XORLW  03
26DF:  BTFSC  03.2
26E0:  GOTO   749
26E1:  XORLW  01
26E2:  BTFSC  03.2
26E3:  GOTO   74D
26E4:  XORLW  03
26E5:  BTFSC  03.2
26E6:  GOTO   751
26E7:  GOTO   755
....................    {
....................       case ID_DUMMY: // example command
....................          mode_dummy(content);
26E8:  MOVLB  0F
26E9:  MOVF   5B,W
26EA:  MOVWF  5E
26EB:  MOVF   5A,W
26EC:  MOVWF  5D
26ED:  MOVLP  10
26EE:  MOVLB  00
26EF:  GOTO   674
26F0:  MOVLP  20
....................          //mode_iv_meas_adc();
....................          break;
26F1:  GOTO   75E
....................       case 0x10:
....................          //mode_measure(parameter);
....................          break;
26F2:  GOTO   75E
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
26F3:  GOTO   75E
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
26F4:  GOTO   75E
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
26F5:  MOVLB  0F
26F6:  MOVF   5B,W
26F7:  MOVWF  5E
26F8:  MOVF   5A,W
26F9:  MOVWF  5D
26FA:  MOVLP  10
26FB:  MOVLB  00
26FC:  GOTO   7AA
26FD:  MOVLP  20
....................          break;
26FE:  GOTO   75E
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
26FF:  MOVLB  0F
2700:  MOVF   5B,W
2701:  MOVWF  5E
2702:  MOVF   5A,W
2703:  MOVWF  5D
2704:  MOVLP  18
2705:  MOVLB  00
2706:  GOTO   41A
2707:  MOVLP  20
....................          break;
2708:  GOTO   75E
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
2709:  MOVLB  0F
270A:  MOVF   5B,W
270B:  MOVWF  5E
270C:  MOVF   5A,W
270D:  MOVWF  5D
270E:  MOVLP  18
270F:  MOVLB  00
2710:  GOTO   4F0
2711:  MOVLP  20
....................          break;
2712:  GOTO   75E
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
2713:  MOVLB  0F
2714:  MOVF   5B,W
2715:  MOVWF  5E
2716:  MOVF   5A,W
2717:  MOVWF  5D
2718:  MOVLP  18
2719:  MOVLB  00
271A:  GOTO   5C5
271B:  MOVLP  20
....................          break;
271C:  GOTO   75E
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
271D:  MOVLB  0F
271E:  MOVF   5B,W
271F:  MOVWF  5E
2720:  MOVF   5A,W
2721:  MOVWF  5D
2722:  MOVLB  00
2723:  GOTO   000
....................          break;
2724:  GOTO   75E
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
2725:  MOVLB  0F
2726:  MOVF   5B,W
2727:  MOVWF  5E
2728:  MOVF   5A,W
2729:  MOVWF  5D
272A:  MOVLB  00
272B:  GOTO   160
....................          break;
272C:  GOTO   75E
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
272D:  MOVLB  0F
272E:  MOVF   5B,W
272F:  MOVWF  5E
2730:  MOVF   5A,W
2731:  MOVWF  5D
2732:  MOVLB  00
2733:  GOTO   3BE
....................          break;
2734:  GOTO   75E
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
2735:  MOVLB  0F
2736:  MOVF   5B,W
2737:  MOVWF  5E
2738:  MOVF   5A,W
2739:  MOVWF  5D
273A:  MOVLB  00
273B:  GOTO   470
....................          break;
273C:  GOTO   75E
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
273D:  MOVLB  0F
273E:  MOVF   5B,W
273F:  MOVWF  5E
2740:  MOVF   5A,W
2741:  MOVWF  5D
2742:  MOVLB  00
2743:  GOTO   50E
....................          break;
2744:  GOTO   75E
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
2745:  MOVLP  28
2746:  CALL   000
2747:  MOVLP  20
....................          break;
2748:  GOTO   75E
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
2749:  MOVLP  28
274A:  CALL   000
274B:  MOVLP  20
....................          break;
274C:  GOTO   75E
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
274D:  MOVLP  28
274E:  CALL   000
274F:  MOVLP  20
....................          break;
2750:  GOTO   75E
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
2751:  MOVLP  28
2752:  CALL   000
2753:  MOVLP  20
....................          break;
2754:  GOTO   75E
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
2755:  MOVLW  C0
2756:  MOVLB  03
2757:  MOVWF  11
2758:  MOVLW  06
2759:  MOVWF  12
275A:  MOVLP  08
275B:  MOVLB  00
275C:  CALL   045
275D:  MOVLP  20
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
275E:  MOVLW  CC
275F:  MOVLB  03
2760:  MOVWF  11
2761:  MOVLW  06
2762:  MOVWF  12
2763:  MOVLP  08
2764:  MOVLB  00
2765:  CALL   045
2766:  MOVLP  20
2767:  MOVLP  20
2768:  GOTO   78C (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
2EE6:  MOVLW  EF
2EE7:  MOVLB  03
2EE8:  MOVWF  11
2EE9:  MOVLW  06
2EEA:  MOVWF  12
2EEB:  MOVLP  08
2EEC:  MOVLB  00
2EED:  CALL   045
2EEE:  MOVLP  28
....................    
....................    switch(command->frame_id)
2EEF:  MOVLB  0F
2EF0:  MOVF   54,W
2EF1:  MOVWF  04
2EF2:  MOVF   55,W
2EF3:  MOVWF  05
2EF4:  ADDFSR 00,FSR0
2EF5:  MOVF   00,W
2EF6:  XORLW  00
2EF7:  MOVLB  00
2EF8:  BTFSC  03.2
2EF9:  GOTO   701
2EFA:  XORLW  01
2EFB:  BTFSC  03.2
2EFC:  GOTO   70B
2EFD:  XORLW  03
2EFE:  BTFSC  03.2
2EFF:  GOTO   71B
2F00:  GOTO   722
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
2F01:  MOVLB  0F
2F02:  MOVF   55,W
2F03:  MOVWF  57
2F04:  MOVF   54,W
2F05:  MOVWF  56
2F06:  MOVLP  20
2F07:  MOVLB  00
2F08:  GOTO   769
2F09:  MOVLP  28
....................          break;
2F0A:  GOTO   722
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
2F0B:  MOVLB  0F
2F0C:  MOVF   55,W
2F0D:  MOVWF  57
2F0E:  MOVF   54,W
2F0F:  MOVWF  56
2F10:  MOVLP  20
2F11:  MOVLB  00
2F12:  GOTO   799
2F13:  MOVLP  28
2F14:  MOVF   78,F
2F15:  BTFSC  03.2
2F16:  GOTO   71A
....................             return TRUE; // if status is finished, return TRUE
2F17:  MOVLW  01
2F18:  MOVWF  78
2F19:  GOTO   724
....................          }        
....................          break;
2F1A:  GOTO   722
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
2F1B:  MOVLB  0F
2F1C:  MOVF   55,W
2F1D:  MOVWF  57
2F1E:  MOVF   54,W
2F1F:  MOVWF  56
2F20:  MOVLB  00
2F21:  GOTO   6AB
....................          break;
....................    }
....................    return FALSE;
2F22:  MOVLW  00
2F23:  MOVWF  78
2F24:  MOVLP  38
2F25:  GOTO   2CC (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
2769:  MOVLW  FB
276A:  MOVLB  03
276B:  MOVWF  11
276C:  MOVLW  06
276D:  MOVWF  12
276E:  MOVLP  08
276F:  MOVLB  00
2770:  CALL   045
2771:  MOVLP  20
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
2772:  MOVLW  06
2773:  MOVLB  03
2774:  MOVWF  11
2775:  MOVLW  07
2776:  MOVWF  12
2777:  MOVLP  08
2778:  MOVLB  00
2779:  CALL   045
277A:  MOVLP  20
....................    transmit_ack();
277B:  MOVLP  08
277C:  CALL   7B3
277D:  MOVLP  20
.................... 
....................    status[0] = EXECUTING_MISSION;
277E:  MOVLW  02
277F:  MOVWF  29
....................    execute_mission(command->content);
2780:  MOVLW  03
2781:  MOVLB  0F
2782:  ADDWF  56,W
2783:  MOVWF  58
2784:  MOVLW  00
2785:  ADDWFC 57,W
2786:  MOVWF  59
2787:  MOVWF  5B
2788:  MOVF   58,W
2789:  MOVWF  5A
278A:  MOVLB  00
278B:  GOTO   67D
....................    if (is_empty_smf_data())
278C:  MOVLP  08
278D:  CALL   7E8
278E:  MOVLP  20
278F:  MOVF   78,F
2790:  BTFSC  03.2
2791:  GOTO   795
....................       status[0] = FINISHED;
2792:  MOVLW  06
2793:  MOVWF  29
2794:  GOTO   797
....................    else
....................       status[0] = SMF_USE_REQ;
2795:  MOVLW  04
2796:  MOVWF  29
2797:  MOVLP  28
2798:  GOTO   722 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
2799:  MOVLW  13
279A:  MOVLB  03
279B:  MOVWF  11
279C:  MOVLW  07
279D:  MOVWF  12
279E:  MOVLP  08
279F:  MOVLB  00
27A0:  CALL   045
27A1:  MOVLP  20
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
27A2:  MOVLW  1D
27A3:  MOVLB  03
27A4:  MOVWF  11
27A5:  MOVLW  07
27A6:  MOVWF  12
27A7:  MOVLP  08
27A8:  MOVLB  00
27A9:  CALL   045
27AA:  MOVLP  20
....................    transmit_status();
27AB:  MOVLP  18
27AC:  GOTO   7EA
27AD:  MOVLP  20
....................    if (status[0] == FINISHED)
27AE:  MOVF   29,W
27AF:  SUBLW  06
27B0:  BTFSS  03.2
27B1:  GOTO   7BF
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
27B2:  MOVLW  2C
27B3:  MOVLB  03
27B4:  MOVWF  11
27B5:  MOVLW  07
27B6:  MOVWF  12
27B7:  MOVLP  08
27B8:  MOVLB  00
27B9:  CALL   045
27BA:  MOVLP  20
....................       return TRUE;
27BB:  MOVLW  01
27BC:  MOVWF  78
27BD:  GOTO   7C1
....................    }
27BE:  GOTO   7C1
....................    else{
....................       return FALSE;
27BF:  MOVLW  00
27C0:  MOVWF  78
....................    }
27C1:  MOVLP  28
27C2:  GOTO   713 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
2EAB:  MOVLW  3A
2EAC:  MOVLB  03
2EAD:  MOVWF  11
2EAE:  MOVLW  07
2EAF:  MOVWF  12
2EB0:  MOVLP  08
2EB1:  MOVLB  00
2EB2:  CALL   045
2EB3:  MOVLP  28
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
2EB4:  MOVLW  47
2EB5:  MOVLB  03
2EB6:  MOVWF  11
2EB7:  MOVLW  07
2EB8:  MOVWF  12
2EB9:  MOVLP  08
2EBA:  MOVLB  00
2EBB:  CALL   045
2EBC:  MOVLP  28
....................     transmit_ack();
2EBD:  MOVLP  08
2EBE:  CALL   7B3
2EBF:  MOVLP  28
....................     
....................     if (command->content[0] == ALLOW) {
2EC0:  MOVLB  0F
2EC1:  MOVF   56,W
2EC2:  MOVWF  04
2EC3:  MOVF   57,W
2EC4:  MOVWF  05
2EC5:  ADDFSR 03,FSR0
2EC6:  MOVF   00,F
2EC7:  BTFSS  03.2
2EC8:  GOTO   6DB
....................         fprintf(PC, "\t\t-> allowd\r\n");
2EC9:  MOVLW  54
2ECA:  MOVLB  03
2ECB:  MOVWF  11
2ECC:  MOVLW  07
2ECD:  MOVWF  12
2ECE:  MOVLP  08
2ECF:  MOVLB  00
2ED0:  CALL   045
2ED1:  MOVLP  28
....................         status[0] = COPYING;
2ED2:  MOVLW  05
2ED3:  MOVWF  29
....................         copy_data();
2ED4:  MOVLP  38
2ED5:  GOTO   000
2ED6:  MOVLP  28
....................         status[0] = FINISHED;
2ED7:  MOVLW  06
2ED8:  MOVWF  29
....................     } else {
2ED9:  GOTO   6E4
2EDA:  MOVLB  0F
....................         fprintf(PC, "\t\t-> denyed\r\n");
2EDB:  MOVLW  5B
2EDC:  MOVLB  03
2EDD:  MOVWF  11
2EDE:  MOVLW  07
2EDF:  MOVWF  12
2EE0:  MOVLP  08
2EE1:  MOVLB  00
2EE2:  CALL   045
2EE3:  MOVLP  28
....................     }
2EE4:  MOVLP  28
2EE5:  GOTO   722 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
39B6:  MOVLB  03
39B7:  BSF    1F.3
39B8:  MOVLW  A0
39B9:  MOVWF  1B
39BA:  MOVLW  01
39BB:  MOVWF  1C
39BC:  MOVLW  A6
39BD:  MOVWF  1E
39BE:  MOVLW  90
39BF:  MOVWF  1D
39C0:  MOVLB  01
39C1:  BCF    0D.4
39C2:  MOVLB  02
39C3:  BSF    0D.4
39C4:  MOVLB  04
39C5:  BCF    15.5
39C6:  MOVLW  40
39C7:  MOVWF  14
39C8:  MOVLW  09
39C9:  MOVWF  12
39CA:  MOVLW  2A
39CB:  MOVWF  15
39CC:  MOVLB  02
39CD:  BCF    1D.5
39CE:  BCF    1D.3
39CF:  BCF    1D.4
39D0:  MOVLB  01
39D1:  BCF    0E.5
39D2:  BSF    0E.4
39D3:  BCF    0E.3
39D4:  MOVLB  00
39D5:  BCF    28.0
39D6:  CLRF   30
39D7:  CLRF   2F
39D8:  CLRF   2E
39D9:  CLRF   2D
39DA:  CLRF   34
39DB:  CLRF   33
39DC:  CLRF   32
39DD:  CLRF   31
39DE:  CLRF   36
39DF:  CLRF   35
39E0:  CLRF   38
39E1:  CLRF   37
39E2:  CLRF   59
39E3:  MOVLB  0C
39E4:  CLRF   2D
39E5:  CLRF   2C
39E6:  CLRF   2B
39E7:  CLRF   2A
39E8:  CLRF   2F
39E9:  CLRF   2E
39EA:  CLRF   31
39EB:  CLRF   30
39EC:  CLRF   33
39ED:  CLRF   32
39EE:  CLRF   35
39EF:  CLRF   34
39F0:  CLRF   70
39F1:  MOVLW  1E
39F2:  MOVWF  76
39F3:  MOVLB  03
39F4:  CLRF   0C
39F5:  CLRF   0D
39F6:  CLRF   0E
39F7:  CLRF   0F
39F8:  CLRF   10
39F9:  MOVLB  02
39FA:  CLRF   12
39FB:  CLRF   11
39FC:  GOTO   22E
39FD:  DATA 04,34
39FE:  DATA 20,34
39FF:  DATA 09,34
3A00:  DATA 03,34
3A01:  DATA 00,34
3A02:  DATA 00,34
3A03:  DATA 00,34
3A04:  DATA 20,34
3A05:  DATA 60,34
3A06:  DATA 19,34
3A07:  DATA 00,34
3A08:  DATA FF,34
3A09:  DATA 60,34
3A0A:  DATA 3A,34
3A0B:  DATA 00,34
3A0C:  DATA FF,34
3A0D:  DATA C0,34
3A0E:  DATA 00,34
3A0F:  DATA FF,34
3A10:  DATA C0,34
3A11:  DATA 00,34
3A12:  DATA 93,34
3A13:  DATA C0,34
3A14:  DATA 00,34
3A15:  DATA 44,34
3A16:  DATA 63,34
3A17:  DATA D6,34
3A18:  DATA 00,34
3A19:  DATA 07,34
3A1A:  DATA 24,34
3A1B:  DATA 32,34
3A1C:  DATA 00,34
3A1D:  DATA 00,34
3A1E:  DATA 79,34
3A1F:  DATA 00,34
3A20:  DATA 01,34
3A21:  DATA 01,34
3A22:  DATA 7A,34
3A23:  DATA 94,34
3A24:  DATA C0,34
3A25:  DATA 00,34
3A26:  DATA 05,34
3A27:  DATA 80,34
3A28:  DATA 09,34
3A29:  DATA 01,34
3A2A:  DATA 00,34
3A2B:  DATA 02,34
3A2C:  DATA 01,34
3A2D:  DATA 00,34
3A2E:  MOVLW  39
3A2F:  MOVWF  05
3A30:  MOVLW  FD
3A31:  MOVWF  04
3A32:  BSF    05.7
3A33:  MOVIW  [FSR0++],W
3A34:  MOVWF  77
3A35:  XORLW  00
3A36:  BTFSC  03.2
3A37:  GOTO   248
3A38:  MOVIW  [FSR0++],W
3A39:  MOVWF  78
3A3A:  BTFSC  78.7
3A3B:  GOTO   240
3A3C:  ANDLW  3F
3A3D:  MOVWF  07
3A3E:  MOVIW  [FSR0++],W
3A3F:  MOVWF  06
3A40:  BTFSC  78.6
3A41:  MOVIW  [FSR0++],W
3A42:  BTFSS  78.6
3A43:  MOVIW  [FSR0++],W
3A44:  MOVWI  W,[FSR1++]
3A45:  DECFSZ 77,F
3A46:  GOTO   242
3A47:  GOTO   233
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
3A48:  MOVLW  62
3A49:  MOVLB  03
3A4A:  MOVWF  11
3A4B:  MOVLW  07
3A4C:  MOVWF  12
3A4D:  MOVLP  08
3A4E:  MOVLB  00
3A4F:  CALL   045
3A50:  MOVLP  38
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
3A51:  MOVLW  85
3A52:  MOVLB  03
3A53:  MOVWF  11
3A54:  MOVLW  07
3A55:  MOVWF  12
3A56:  MOVLP  08
3A57:  MOVLB  00
3A58:  CALL   045
3A59:  MOVLP  38
....................    fprintf(PC,"Last updated on 2025/06/15, by Inoue.\r\n\r\n");  
3A5A:  MOVLW  9C
3A5B:  MOVLB  03
3A5C:  MOVWF  11
3A5D:  MOVLW  07
3A5E:  MOVWF  12
3A5F:  MOVLP  08
3A60:  MOVLB  00
3A61:  CALL   045
3A62:  MOVLP  38
.................... 
....................    
....................    io_init();
3A63:  MOVLP  08
3A64:  GOTO   093
3A65:  MOVLP  38
....................    adc_init();
3A66:  MOVLP  08
3A67:  GOTO   0AB
3A68:  MOVLP  38
....................    setup_uart_to_boss();
3A69:  MOVLP  08
3A6A:  GOTO   0D3
3A6B:  MOVLP  38
....................    setup_timer();
3A6C:  MOVLP  08
3A6D:  GOTO   0E7
3A6E:  MOVLP  38
....................    ad7490_init();
3A6F:  MOVLP  00
3A70:  GOTO   7E9
3A71:  MOVLP  38
....................    misf_init();
3A72:  MOVLP  08
3A73:  CALL   3A8
3A74:  MOVLP  38
....................    piclog_make(PICLOG_STARTUP,0x00);
3A75:  MOVF   70,W
3A76:  MOVLB  10
3A77:  MOVWF  65
3A78:  CLRF   66
3A79:  MOVLP  10
3A7A:  MOVLB  00
3A7B:  CALL   340
3A7C:  MOVLP  38
.................... 
....................    int1 is_finished = FALSE;
3A7D:  MOVLB  0F
3A7E:  BCF    47.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
3A7F:  MOVLW  B1
3A80:  MOVLB  03
3A81:  MOVWF  11
3A82:  MOVLW  07
3A83:  MOVWF  12
3A84:  MOVLP  08
3A85:  MOVLB  00
3A86:  CALL   045
3A87:  MOVLP  38
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
3A88:  MOVLW  C4
3A89:  MOVLB  03
3A8A:  MOVWF  11
3A8B:  MOVLW  07
3A8C:  MOVWF  12
3A8D:  MOVLP  08
3A8E:  MOVLB  00
3A8F:  CALL   045
3A90:  MOVLP  38
....................    
....................    //Start loop
....................    while(!is_finished)
3A91:  MOVLB  0F
3A92:  BTFSC  47.0
3A93:  GOTO   2F2
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
3A94:  MOVLB  00
3A95:  MOVF   59,F
3A96:  BTFSC  03.2
3A97:  GOTO   2DA
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
3A98:  MOVLW  20
3A99:  MOVLB  0F
3A9A:  MOVWF  5B
3A9B:  MOVLW  19
3A9C:  MOVWF  5A
3A9D:  MOVLB  00
3A9E:  MOVF   59,W
3A9F:  MOVLB  0F
3AA0:  MOVWF  5C
3AA1:  MOVLP  18
3AA2:  MOVLB  00
3AA3:  GOTO   000
3AA4:  MOVLP  38
3AA5:  MOVF   79,W
3AA6:  MOVWF  7A
3AA7:  MOVF   78,W
3AA8:  MOVWF  04
3AA9:  MOVF   7A,W
3AAA:  MOVWF  05
3AAB:  MOVLW  0C
3AAC:  MOVWF  78
3AAD:  MOVLW  24
3AAE:  MOVWF  07
3AAF:  MOVLW  D8
3AB0:  MOVWF  06
3AB1:  MOVIW  [FSR0++],W
3AB2:  MOVWI  W,[FSR1++]
3AB3:  DECFSZ 78,F
3AB4:  GOTO   2B1
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
3AB5:  MOVLW  20
3AB6:  MOVLB  0F
3AB7:  MOVWF  55
3AB8:  MOVLW  19
3AB9:  MOVWF  54
3ABA:  MOVLW  20
3ABB:  MOVWF  57
3ABC:  MOVLW  39
3ABD:  MOVWF  56
3ABE:  MOVLP  08
3ABF:  MOVLB  00
3AC0:  GOTO   794
3AC1:  MOVLP  38
....................          
....................          if(recieve_cmd.is_exist)
3AC2:  MOVLB  0F
3AC3:  BTFSS  4A.0
3AC4:  GOTO   2D1
....................             is_finished = execute_command(&recieve_cmd); 
3AC5:  MOVLW  24
3AC6:  MOVWF  55
3AC7:  MOVLW  D8
3AC8:  MOVWF  54
3AC9:  MOVLP  28
3ACA:  MOVLB  00
3ACB:  GOTO   6E6
3ACC:  MOVLP  38
3ACD:  MOVLB  0F
3ACE:  BCF    47.0
3ACF:  BTFSC  78.0
3AD0:  BSF    47.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
3AD1:  MOVLW  D3
3AD2:  MOVLB  03
3AD3:  MOVWF  11
3AD4:  MOVLW  07
3AD5:  MOVWF  12
3AD6:  MOVLP  08
3AD7:  MOVLB  00
3AD8:  CALL   045
3AD9:  MOVLP  38
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
3ADA:  MOVLB  0F
3ADB:  BTFSC  47.0
....................          break;
3ADC:  GOTO   2F2
....................          
....................       delay_ms(400);
3ADD:  MOVLW  02
3ADE:  MOVWF  54
3ADF:  MOVLW  C8
3AE0:  MOVLB  13
3AE1:  MOVWF  43
3AE2:  MOVLP  08
3AE3:  MOVLB  00
3AE4:  CALL   763
3AE5:  MOVLP  38
3AE6:  MOVLB  0F
3AE7:  DECFSZ 54,F
3AE8:  GOTO   2DF
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
3AE9:  MOVLW  2E
3AEA:  MOVLB  13
3AEB:  MOVWF  2B
3AEC:  MOVLP  08
3AED:  MOVLB  00
3AEE:  CALL   020
3AEF:  MOVLP  38
3AF0:  GOTO   291
3AF1:  MOVLB  0F
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
3AF2:  MOVLW  00
3AF3:  MOVLB  03
3AF4:  MOVWF  11
3AF5:  MOVLW  08
3AF6:  MOVWF  12
3AF7:  MOVLP  08
3AF8:  MOVLB  00
3AF9:  CALL   045
3AFA:  MOVLP  38
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3AFB:  MOVLW  2E
3AFC:  MOVLB  13
3AFD:  MOVWF  2B
3AFE:  MOVLP  08
3AFF:  MOVLB  00
3B00:  CALL   020
3B01:  MOVLP  38
....................       delay_ms(1000);
3B02:  MOVLW  04
3B03:  MOVLB  0F
3B04:  MOVWF  54
3B05:  MOVLW  FA
3B06:  MOVLB  13
3B07:  MOVWF  43
3B08:  MOVLP  08
3B09:  MOVLB  00
3B0A:  CALL   763
3B0B:  MOVLP  38
3B0C:  MOVLB  0F
3B0D:  DECFSZ 54,F
3B0E:  GOTO   305
3B0F:  MOVLB  00
3B10:  GOTO   2FB
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
3B11:  MOVLW  E3
3B12:  MOVLB  03
3B13:  MOVWF  11
3B14:  MOVLW  07
3B15:  MOVWF  12
3B16:  MOVLP  08
3B17:  MOVLB  00
3B18:  CALL   045
3B19:  MOVLP  38
....................    
.................... }
.................... 
3B1A:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
