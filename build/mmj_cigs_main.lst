CCS PCH C Compiler, Version 5.104, 57077               25-7-25 00:12

               Filename:   build\mmj_cigs_main.lst

               ROM used:   38204 bytes (29%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           2160 (60%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   8C02
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,5B
001AE:  DATA 41,44
001B0:  DATA 43,5D
001B2:  DATA 20,43
001B4:  DATA 6F,6E
001B6:  DATA 6E,65
001B8:  DATA 63,74
001BA:  DATA 20,65
001BC:  DATA 72,72
001BE:  DATA 6F,72
001C0:  DATA 21,0D
001C2:  DATA 0A,00
001C4:  DATA 09,5B
001C6:  DATA 41,44
001C8:  DATA 43,5D
001CA:  DATA 20,43
001CC:  DATA 6F,6E
001CE:  DATA 6E,65
001D0:  DATA 63,74
001D2:  DATA 20,73
001D4:  DATA 75,63
001D6:  DATA 63,65
001D8:  DATA 73,73
001DA:  DATA 66,75
001DC:  DATA 6C,0D
001DE:  DATA 0A,00
001E0:  DATA 09,43
001E2:  DATA 6F,6D
001E4:  DATA 70,6C
001E6:  DATA 65,74
001E8:  DATA 65,0D
001EA:  DATA 0A,00
001EC:  DATA 4D,43
001EE:  DATA 50,34
001F0:  DATA 39,30
001F2:  DATA 31,20
001F4:  DATA 49,6E
001F6:  DATA 69,74
001F8:  DATA 69,61
001FA:  DATA 6C,69
001FC:  DATA 7A,65
001FE:  DATA 0D,0A
00200:  DATA 00,00
00202:  DATA 09,5B
00204:  DATA 44,41
00206:  DATA 43,20
00208:  DATA 50,6F
0020A:  DATA 72,74
0020C:  DATA 20,31
0020E:  DATA 5D,20
00210:  DATA 43,6F
00212:  DATA 6E,6E
00214:  DATA 65,63
00216:  DATA 74,20
00218:  DATA 65,72
0021A:  DATA 72,6F
0021C:  DATA 72,21
0021E:  DATA 0D,0A
00220:  DATA 00,00
00222:  DATA 09,5B
00224:  DATA 44,41
00226:  DATA 43,20
00228:  DATA 50,6F
0022A:  DATA 72,74
0022C:  DATA 20,31
0022E:  DATA 5D,20
00230:  DATA 43,6F
00232:  DATA 6E,6E
00234:  DATA 65,63
00236:  DATA 74,20
00238:  DATA 73,75
0023A:  DATA 63,63
0023C:  DATA 65,73
0023E:  DATA 73,66
00240:  DATA 75,6C
00242:  DATA 0D,0A
00244:  DATA 00,00
00246:  DATA 09,5B
00248:  DATA 44,41
0024A:  DATA 43,20
0024C:  DATA 50,6F
0024E:  DATA 72,74
00250:  DATA 20,32
00252:  DATA 5D,20
00254:  DATA 43,6F
00256:  DATA 6E,6E
00258:  DATA 65,63
0025A:  DATA 74,20
0025C:  DATA 65,72
0025E:  DATA 72,6F
00260:  DATA 72,21
00262:  DATA 0D,0A
00264:  DATA 00,00
00266:  DATA 09,5B
00268:  DATA 44,41
0026A:  DATA 43,20
0026C:  DATA 50,6F
0026E:  DATA 72,74
00270:  DATA 20,32
00272:  DATA 5D,20
00274:  DATA 43,6F
00276:  DATA 6E,6E
00278:  DATA 65,63
0027A:  DATA 74,20
0027C:  DATA 73,75
0027E:  DATA 63,63
00280:  DATA 65,73
00282:  DATA 73,66
00284:  DATA 75,6C
00286:  DATA 0D,0A
00288:  DATA 00,00
0028A:  DATA 09,43
0028C:  DATA 6F,6D
0028E:  DATA 70,6C
00290:  DATA 65,74
00292:  DATA 65,0D
00294:  DATA 0A,00
00296:  DATA 0D,0A
00298:  DATA 5F,5F
0029A:  DATA 5F,5F
0029C:  DATA 5F,5F
0029E:  DATA 5F,5F
002A0:  DATA 5F,5F
002A2:  DATA 5F,5F
002A4:  DATA 5F,5F
002A6:  DATA 5F,5F
002A8:  DATA 5F,5F
002AA:  DATA 5F,5F
002AC:  DATA 0D,0A
002AE:  DATA 00,00
002B0:  DATA 5F,5F
002B2:  DATA 5F,53
002B4:  DATA 74,61
002B6:  DATA 72,74
002B8:  DATA 20,63
002BA:  DATA 6F,70
002BC:  DATA 79,5F
002BE:  DATA 64,61
002C0:  DATA 74,61
002C2:  DATA 5F,5F
002C4:  DATA 0D,0A
002C6:  DATA 00,00
002C8:  DATA 53,74
002CA:  DATA 61,72
002CC:  DATA 74,20
002CE:  DATA 5B,25
002D0:  DATA 64,20
002D2:  DATA 74,68
002D4:  DATA 5D,20
002D6:  DATA 64,61
002D8:  DATA 74,61
002DA:  DATA 20,63
002DC:  DATA 6F,70
002DE:  DATA 79,0D
002E0:  DATA 0A,0D
002E2:  DATA 0A,00
002E4:  DATA 49,6E
002E6:  DATA 20,53
002E8:  DATA 4D,46
002EA:  DATA 20,6D
002EC:  DATA 69,73
002EE:  DATA 73,69
002F0:  DATA 6F,6E
002F2:  DATA 20,64
002F4:  DATA 61,74
002F6:  DATA 61,20
002F8:  DATA 73,74
002FA:  DATA 61,72
002FC:  DATA 74,20
002FE:  DATA 20,20
00300:  DATA 61,64
00302:  DATA 64,72
00304:  DATA 65,73
00306:  DATA 73,3A
00308:  DATA 20,25
0030A:  DATA 4C,58
0030C:  DATA 0D,0A
0030E:  DATA 00,00
00310:  DATA 49,6E
00312:  DATA 20,53
00314:  DATA 4D,46
00316:  DATA 20,6D
00318:  DATA 69,73
0031A:  DATA 73,69
0031C:  DATA 6F,6E
0031E:  DATA 20,64
00320:  DATA 61,74
00322:  DATA 61,20
00324:  DATA 65,6E
00326:  DATA 64,20
00328:  DATA 20,20
0032A:  DATA 20,20
0032C:  DATA 61,64
0032E:  DATA 64,72
00330:  DATA 65,73
00332:  DATA 73,3A
00334:  DATA 20,25
00336:  DATA 4C,58
00338:  DATA 0D,0A
0033A:  DATA 00,00
0033C:  DATA 49,6E
0033E:  DATA 20,4D
00340:  DATA 49,53
00342:  DATA 20,46
00344:  DATA 4D,20
00346:  DATA 57,72
00348:  DATA 69,74
0034A:  DATA 65,20
0034C:  DATA 73,6F
0034E:  DATA 75,72
00350:  DATA 63,65
00352:  DATA 20,64
00354:  DATA 61,74
00356:  DATA 61,20
00358:  DATA 61,64
0035A:  DATA 64,72
0035C:  DATA 65,73
0035E:  DATA 73,3A
00360:  DATA 20,25
00362:  DATA 4C,58
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 49,6E
0036A:  DATA 20,4D
0036C:  DATA 49,53
0036E:  DATA 20,46
00370:  DATA 4D,20
00372:  DATA 57,72
00374:  DATA 69,74
00376:  DATA 65,20
00378:  DATA 64,61
0037A:  DATA 74,61
0037C:  DATA 20,73
0037E:  DATA 69,7A
00380:  DATA 65,20
00382:  DATA 20,20
00384:  DATA 20,20
00386:  DATA 20,20
00388:  DATA 20,20
0038A:  DATA 20,3A
0038C:  DATA 20,25
0038E:  DATA 6C,75
00390:  DATA 20,28
00392:  DATA 30,78
00394:  DATA 25,6C
00396:  DATA 78,29
00398:  DATA 0D,0A
0039A:  DATA 0D,0A
0039C:  DATA 00,00
0039E:  DATA 53,69
003A0:  DATA 7A,65
003A2:  DATA 20,61
003A4:  DATA 72,65
003A6:  DATA 61,20
003A8:  DATA 72,65
003AA:  DATA 61,64
003AC:  DATA 0D,0A
003AE:  DATA 00,00
003B0:  DATA 75,73
003B2:  DATA 65,64
003B4:  DATA 5F,73
003B6:  DATA 69,7A
003B8:  DATA 65,20
003BA:  DATA 3D,20
003BC:  DATA 25,6C
003BE:  DATA 75,20
003C0:  DATA 28,73
003C2:  DATA 72,63
003C4:  DATA 20,30
003C6:  DATA 78,25
003C8:  DATA 30,38
003CA:  DATA 4C,58
003CC:  DATA 29,0D
003CE:  DATA 0A,00
003D0:  DATA 6C,6F
003D2:  DATA 6F,70
003D4:  DATA 20,63
003D6:  DATA 6F,75
003D8:  DATA 6E,74
003DA:  DATA 3D,20
003DC:  DATA 25,64
003DE:  DATA 20,20
003E0:  DATA 28,73
003E2:  DATA 72,63
003E4:  DATA 20,30
003E6:  DATA 78,25
003E8:  DATA 30,38
003EA:  DATA 4C,58
003EC:  DATA 29,0D
003EE:  DATA 0A,0D
003F0:  DATA 0A,00
003F2:  DATA 57,72
003F4:  DATA 61,70
003F6:  DATA 20,74
003F8:  DATA 72,69
003FA:  DATA 67,67
003FC:  DATA 65,72
003FE:  DATA 65,64
00400:  DATA 3A,20
00402:  DATA 52,65
00404:  DATA 73,65
00406:  DATA 74,74
00408:  DATA 69,6E
0040A:  DATA 67,20
0040C:  DATA 64,61
0040E:  DATA 74,61
00410:  DATA 5F,77
00412:  DATA 72,69
00414:  DATA 74,65
00416:  DATA 5F,61
00418:  DATA 64,64
0041A:  DATA 72,20
0041C:  DATA 74,6F
0041E:  DATA 20,73
00420:  DATA 74,61
00422:  DATA 72,74
00424:  DATA 0D,0A
00426:  DATA 00,00
00428:  DATA 5B,4D
0042A:  DATA 49,53
0042C:  DATA 20,46
0042E:  DATA 4D,5D
00430:  DATA 0D,0A
00432:  DATA 00,00
00434:  DATA 5B,53
00436:  DATA 4D,46
00438:  DATA 5D,0D
0043A:  DATA 0A,00
0043C:  DATA 55,70
0043E:  DATA 64,61
00440:  DATA 74,65
00442:  DATA 20,73
00444:  DATA 69,7A
00446:  DATA 65,20
00448:  DATA 61,72
0044A:  DATA 65,61
0044C:  DATA 0D,0A
0044E:  DATA 00,00
00450:  DATA 75,73
00452:  DATA 65,64
00454:  DATA 5F,73
00456:  DATA 69,7A
00458:  DATA 65,20
0045A:  DATA 3D,20
0045C:  DATA 25,6C
0045E:  DATA 64,0D
00460:  DATA 0A,00
00462:  DATA 6C,6F
00464:  DATA 6F,70
00466:  DATA 5F,63
00468:  DATA 6F,75
0046A:  DATA 6E,74
0046C:  DATA 20,3D
0046E:  DATA 20,25
00470:  DATA 75,0D
00472:  DATA 0A,0D
00474:  DATA 0A,00
00476:  DATA 0D,0A
00478:  DATA 5F,5F
0047A:  DATA 5F,45
0047C:  DATA 6E,64
0047E:  DATA 20,63
00480:  DATA 6F,70
00482:  DATA 79,5F
00484:  DATA 64,61
00486:  DATA 74,61
00488:  DATA 5F,5F
0048A:  DATA 5F,5F
0048C:  DATA 0D,0A
0048E:  DATA 00,00
00490:  DATA 5F,5F
00492:  DATA 5F,5F
00494:  DATA 5F,5F
00496:  DATA 5F,5F
00498:  DATA 5F,5F
0049A:  DATA 5F,5F
0049C:  DATA 5F,5F
0049E:  DATA 5F,5F
004A0:  DATA 5F,5F
004A2:  DATA 5F,5F
004A4:  DATA 0D,0A
004A6:  DATA 0D,0A
004A8:  DATA 00,00
004AA:  DATA 0D,0A
004AC:  DATA 5F,5F
004AE:  DATA 5F,5F
004B0:  DATA 5F,5F
004B2:  DATA 5F,5F
004B4:  DATA 5F,5F
004B6:  DATA 5F,5F
004B8:  DATA 5F,5F
004BA:  DATA 5F,5F
004BC:  DATA 5F,5F
004BE:  DATA 5F,5F
004C0:  DATA 0D,0A
004C2:  DATA 00,00
004C4:  DATA 5F,5F
004C6:  DATA 5F,53
004C8:  DATA 74,61
004CA:  DATA 72,74
004CC:  DATA 20,73
004CE:  DATA 6D,66
004D0:  DATA 5F,77
004D2:  DATA 72,69
004D4:  DATA 74,65
004D6:  DATA 5F,5F
004D8:  DATA 0D,0A
004DA:  DATA 00,00
004DC:  DATA 53,74
004DE:  DATA 61,72
004E0:  DATA 74,20
004E2:  DATA 5B,25
004E4:  DATA 64,20
004E6:  DATA 74,68
004E8:  DATA 5D,20
004EA:  DATA 64,61
004EC:  DATA 74,61
004EE:  DATA 20,63
004F0:  DATA 6F,70
004F2:  DATA 79,0D
004F4:  DATA 0A,0D
004F6:  DATA 0A,00
004F8:  DATA 49,6E
004FA:  DATA 20,73
004FC:  DATA 6D,66
004FE:  DATA 20,6D
00500:  DATA 69,73
00502:  DATA 73,69
00504:  DATA 6F,6E
00506:  DATA 20,64
00508:  DATA 61,74
0050A:  DATA 61,20
0050C:  DATA 73,74
0050E:  DATA 61,72
00510:  DATA 74,20
00512:  DATA 20,20
00514:  DATA 61,64
00516:  DATA 64,72
00518:  DATA 65,73
0051A:  DATA 73,3A
0051C:  DATA 20,25
0051E:  DATA 30,38
00520:  DATA 4C,58
00522:  DATA 0D,0A
00524:  DATA 00,00
00526:  DATA 49,6E
00528:  DATA 20,73
0052A:  DATA 6D,66
0052C:  DATA 20,6D
0052E:  DATA 69,73
00530:  DATA 73,69
00532:  DATA 6F,6E
00534:  DATA 20,64
00536:  DATA 61,74
00538:  DATA 61,20
0053A:  DATA 65,6E
0053C:  DATA 64,20
0053E:  DATA 20,20
00540:  DATA 20,20
00542:  DATA 61,64
00544:  DATA 64,72
00546:  DATA 65,73
00548:  DATA 73,3A
0054A:  DATA 20,25
0054C:  DATA 30,38
0054E:  DATA 4C,58
00550:  DATA 0D,0A
00552:  DATA 00,00
00554:  DATA 49,6E
00556:  DATA 20,4D
00558:  DATA 49,53
0055A:  DATA 20,46
0055C:  DATA 4D,20
0055E:  DATA 57,72
00560:  DATA 69,74
00562:  DATA 65,20
00564:  DATA 73,6F
00566:  DATA 75,72
00568:  DATA 63,65
0056A:  DATA 20,64
0056C:  DATA 61,74
0056E:  DATA 61,20
00570:  DATA 61,64
00572:  DATA 64,72
00574:  DATA 65,73
00576:  DATA 73,3A
00578:  DATA 20,25
0057A:  DATA 30,38
0057C:  DATA 4C,58
0057E:  DATA 0D,0A
00580:  DATA 00,00
00582:  DATA 49,6E
00584:  DATA 20,4D
00586:  DATA 49,53
00588:  DATA 20,46
0058A:  DATA 4D,20
0058C:  DATA 57,72
0058E:  DATA 69,74
00590:  DATA 65,20
00592:  DATA 64,61
00594:  DATA 74,61
00596:  DATA 20,73
00598:  DATA 69,7A
0059A:  DATA 65,20
0059C:  DATA 20,20
0059E:  DATA 20,20
005A0:  DATA 20,20
005A2:  DATA 20,20
005A4:  DATA 20,3A
005A6:  DATA 20,25
005A8:  DATA 6C,75
005AA:  DATA 20,28
005AC:  DATA 30,78
005AE:  DATA 25,6C
005B0:  DATA 78,29
005B2:  DATA 0D,0A
005B4:  DATA 0D,0A
005B6:  DATA 00,00
005B8:  DATA 45,72
005BA:  DATA 72,6F
005BC:  DATA 72,3A
005BE:  DATA 20,53
005C0:  DATA 4D,46
005C2:  DATA 20,69
005C4:  DATA 73,20
005C6:  DATA 6E,6F
005C8:  DATA 74,20
005CA:  DATA 63,6F
005CC:  DATA 6E,6E
005CE:  DATA 65,63
005D0:  DATA 74,65
005D2:  DATA 64,0D
005D4:  DATA 0A,00
005D6:  DATA 53,69
005D8:  DATA 7A,65
005DA:  DATA 20,61
005DC:  DATA 72,65
005DE:  DATA 61,20
005E0:  DATA 72,65
005E2:  DATA 61,64
005E4:  DATA 0D,0A
005E6:  DATA 00,00
005E8:  DATA 75,73
005EA:  DATA 65,64
005EC:  DATA 5F,73
005EE:  DATA 69,7A
005F0:  DATA 65,20
005F2:  DATA 3D,20
005F4:  DATA 25,6C
005F6:  DATA 75,20
005F8:  DATA 28,73
005FA:  DATA 72,63
005FC:  DATA 20,30
005FE:  DATA 78,25
00600:  DATA 30,38
00602:  DATA 4C,58
00604:  DATA 29,0D
00606:  DATA 0A,00
00608:  DATA 6C,6F
0060A:  DATA 6F,70
0060C:  DATA 20,63
0060E:  DATA 6F,75
00610:  DATA 6E,74
00612:  DATA 3D,20
00614:  DATA 25,64
00616:  DATA 20,20
00618:  DATA 28,73
0061A:  DATA 72,63
0061C:  DATA 20,30
0061E:  DATA 78,25
00620:  DATA 30,38
00622:  DATA 4C,58
00624:  DATA 29,0D
00626:  DATA 0A,0D
00628:  DATA 0A,00
0062A:  DATA 57,72
0062C:  DATA 61,70
0062E:  DATA 20,74
00630:  DATA 72,69
00632:  DATA 67,67
00634:  DATA 65,72
00636:  DATA 65,64
00638:  DATA 3A,20
0063A:  DATA 52,65
0063C:  DATA 73,65
0063E:  DATA 74,74
00640:  DATA 69,6E
00642:  DATA 67,20
00644:  DATA 64,61
00646:  DATA 74,61
00648:  DATA 5F,77
0064A:  DATA 72,69
0064C:  DATA 74,65
0064E:  DATA 5F,61
00650:  DATA 64,64
00652:  DATA 72,20
00654:  DATA 74,6F
00656:  DATA 20,73
00658:  DATA 74,61
0065A:  DATA 72,74
0065C:  DATA 0D,0A
0065E:  DATA 00,00
00660:  DATA 55,70
00662:  DATA 64,61
00664:  DATA 74,65
00666:  DATA 20,73
00668:  DATA 69,7A
0066A:  DATA 65,20
0066C:  DATA 61,72
0066E:  DATA 65,61
00670:  DATA 0D,0A
00672:  DATA 00,00
00674:  DATA 75,73
00676:  DATA 65,64
00678:  DATA 5F,73
0067A:  DATA 69,7A
0067C:  DATA 65,20
0067E:  DATA 3D,20
00680:  DATA 25,6C
00682:  DATA 64,0D
00684:  DATA 0A,00
00686:  DATA 6C,6F
00688:  DATA 6F,70
0068A:  DATA 5F,63
0068C:  DATA 6F,75
0068E:  DATA 6E,74
00690:  DATA 20,3D
00692:  DATA 20,25
00694:  DATA 75,0D
00696:  DATA 0A,0D
00698:  DATA 0A,00
0069A:  DATA 0D,0A
0069C:  DATA 5F,5F
0069E:  DATA 5F,45
006A0:  DATA 6E,64
006A2:  DATA 20,73
006A4:  DATA 6D,66
006A6:  DATA 5F,77
006A8:  DATA 72,69
006AA:  DATA 74,65
006AC:  DATA 5F,5F
006AE:  DATA 5F,5F
006B0:  DATA 0D,0A
006B2:  DATA 00,00
006B4:  DATA 5F,5F
006B6:  DATA 5F,5F
006B8:  DATA 5F,5F
006BA:  DATA 5F,5F
006BC:  DATA 5F,5F
006BE:  DATA 5F,5F
006C0:  DATA 5F,5F
006C2:  DATA 5F,5F
006C4:  DATA 5F,5F
006C6:  DATA 5F,5F
006C8:  DATA 0D,0A
006CA:  DATA 0D,0A
006CC:  DATA 00,00
006CE:  DATA 53,4D
006D0:  DATA 46,20
006D2:  DATA 64,61
006D4:  DATA 74,61
006D6:  DATA 20,6C
006D8:  DATA 69,73
006DA:  DATA 74,20
006DC:  DATA 69,73
006DE:  DATA 20,66
006E0:  DATA 75,6C
006E2:  DATA 6C,21
006E4:  DATA 21,21
006E6:  DATA 0D,0A
006E8:  DATA 00,00
006EA:  DATA 53,4D
006EC:  DATA 46,20
006EE:  DATA 64,61
006F0:  DATA 74,61
006F2:  DATA 20,6C
006F4:  DATA 69,73
006F6:  DATA 74,20
006F8:  DATA 69,73
006FA:  DATA 20,65
006FC:  DATA 6D,70
006FE:  DATA 74,79
00700:  DATA 0D,0A
00702:  DATA 00,00
00704:  DATA 0D,0A
00706:  DATA 53,74
00708:  DATA 61,72
0070A:  DATA 74,20
0070C:  DATA 6D,61
0070E:  DATA 6B,65
00710:  DATA 5F,72
00712:  DATA 65,63
00714:  DATA 65,69
00716:  DATA 76,65
00718:  DATA 5F,63
0071A:  DATA 6F,6D
0071C:  DATA 6D,61
0071E:  DATA 6E,64
00720:  DATA 0D,0A
00722:  DATA 00,00
00724:  DATA 09,5B
00726:  DATA 42,4F
00728:  DATA 53,53
0072A:  DATA 5D,20
0072C:  DATA 3E,3E
0072E:  DATA 3E,20
00730:  DATA 00,00
00732:  DATA 45,6E
00734:  DATA 64,20
00736:  DATA 6D,61
00738:  DATA 6B,65
0073A:  DATA 5F,72
0073C:  DATA 65,63
0073E:  DATA 69,76
00740:  DATA 65,5F
00742:  DATA 63,6F
00744:  DATA 6D,6D
00746:  DATA 61,6E
00748:  DATA 64,0D
0074A:  DATA 0A,0D
0074C:  DATA 0A,00
0074E:  DATA 73,69
00750:  DATA 67,6E
00752:  DATA 61,6C
00754:  DATA 20,65
00756:  DATA 6E,64
00758:  DATA 20,77
0075A:  DATA 69,74
0075C:  DATA 68,20
0075E:  DATA 53,46
00760:  DATA 44,0D
00762:  DATA 0A,00
00764:  DATA 64,6F
00766:  DATA 6E,27
00768:  DATA 74,20
0076A:  DATA 66,69
0076C:  DATA 6E,64
0076E:  DATA 20,53
00770:  DATA 46,44
00772:  DATA 0D,0A
00774:  DATA 00,00
00776:  DATA 09,2D
00778:  DATA 3E,20
0077A:  DATA 49,6E
0077C:  DATA 76,61
0077E:  DATA 6C,69
00780:  DATA 64,20
00782:  DATA 46,72
00784:  DATA 61,6D
00786:  DATA 65,20
00788:  DATA 49,44
0078A:  DATA 20,72
0078C:  DATA 65,63
0078E:  DATA 65,69
00790:  DATA 76,65
00792:  DATA 64,3A
00794:  DATA 20,25
00796:  DATA 58,0D
00798:  DATA 0A,00
0079A:  DATA 09,2D
0079C:  DATA 3E,20
0079E:  DATA 43,52
007A0:  DATA 43,20
007A2:  DATA 65,72
007A4:  DATA 72,6F
007A6:  DATA 72,21
007A8:  DATA 0D,0A
007AA:  DATA 00,00
007AC:  DATA 09,09
007AE:  DATA 2D,3E
007B0:  DATA 20,72
007B2:  DATA 65,63
007B4:  DATA 65,69
007B6:  DATA 76,65
007B8:  DATA 64,20
007BA:  DATA 43,52
007BC:  DATA 43,3A
007BE:  DATA 20,25
007C0:  DATA 58,0D
007C2:  DATA 0A,00
007C4:  DATA 09,09
007C6:  DATA 20,20
007C8:  DATA 20,63
007CA:  DATA 6F,6C
007CC:  DATA 6C,65
007CE:  DATA 63,74
007D0:  DATA 20,43
007D2:  DATA 52,43
007D4:  DATA 20,3A
007D6:  DATA 20,25
007D8:  DATA 58,0D
007DA:  DATA 0A,00
007DC:  DATA 09,2D
007DE:  DATA 3E,20
007E0:  DATA 49,6E
007E2:  DATA 76,61
007E4:  DATA 6C,69
007E6:  DATA 64,20
007E8:  DATA 64,65
007EA:  DATA 76,69
007EC:  DATA 63,65
007EE:  DATA 20,49
007F0:  DATA 44,20
007F2:  DATA 72,65
007F4:  DATA 63,65
007F6:  DATA 69,76
007F8:  DATA 65,64
007FA:  DATA 0D,0A
007FC:  DATA 00,00
007FE:  DATA 09,09
00800:  DATA 2D,3E
00802:  DATA 20,72
00804:  DATA 65,63
00806:  DATA 65,69
00808:  DATA 76,65
0080A:  DATA 64,3A
0080C:  DATA 20,20
0080E:  DATA 20,20
00810:  DATA 20,25
00812:  DATA 58,0D
00814:  DATA 0A,00
00816:  DATA 09,09
00818:  DATA 20,20
0081A:  DATA 20,4D
0081C:  DATA 79,20
0081E:  DATA 64,65
00820:  DATA 76,69
00822:  DATA 63,65
00824:  DATA 20,49
00826:  DATA 44,3A
00828:  DATA 20,25
0082A:  DATA 58,0D
0082C:  DATA 0A,00
0082E:  DATA 09,5B
00830:  DATA 42,4F
00832:  DATA 53,53
00834:  DATA 5D,20
00836:  DATA 3C,3C
00838:  DATA 3C,20
0083A:  DATA 00,00
0083C:  DATA 53,74
0083E:  DATA 61,72
00840:  DATA 74,20
00842:  DATA 53,4D
00844:  DATA 46,20
00846:  DATA 75,73
00848:  DATA 69,6E
0084A:  DATA 67,20
0084C:  DATA 72,65
0084E:  DATA 71,65
00850:  DATA 73,74
00852:  DATA 20,73
00854:  DATA 65,61
00856:  DATA 71,75
00858:  DATA 65,6E
0085A:  DATA 63,65
0085C:  DATA 0D,0A
0085E:  DATA 00,00
00860:  DATA 45,72
00862:  DATA 72,6F
00864:  DATA 72,21
00866:  DATA 20,52
00868:  DATA 65,63
0086A:  DATA 65,69
0086C:  DATA 76,69
0086E:  DATA 6E,67
00870:  DATA 20,63
00872:  DATA 6F,6D
00874:  DATA 6D,61
00876:  DATA 6E,64
00878:  DATA 20,69
0087A:  DATA 6E,63
0087C:  DATA 6F,6E
0087E:  DATA 73,69
00880:  DATA 73,74
00882:  DATA 65,6E
00884:  DATA 74,20
00886:  DATA 77,69
00888:  DATA 74,68
0088A:  DATA 20,74
0088C:  DATA 68,65
0088E:  DATA 20,64
00890:  DATA 65,73
00892:  DATA 69,67
00894:  DATA 6E,0D
00896:  DATA 0A,00
00898:  DATA 53,4D
0089A:  DATA 46,20
0089C:  DATA 75,73
0089E:  DATA 65,20
008A0:  DATA 72,65
008A2:  DATA 71,75
008A4:  DATA 65,73
008A6:  DATA 74,20
008A8:  DATA 61,6C
008AA:  DATA 6C,6F
008AC:  DATA 77,65
008AE:  DATA 64,0D
008B0:  DATA 0A,00
008B2:  DATA 53,4D
008B4:  DATA 46,20
008B6:  DATA 75,73
008B8:  DATA 65,20
008BA:  DATA 72,65
008BC:  DATA 71,75
008BE:  DATA 65,73
008C0:  DATA 74,20
008C2:  DATA 64,65
008C4:  DATA 6E,79
008C6:  DATA 65,64
008C8:  DATA 0D,0A
008CA:  DATA 00,00
008CC:  DATA 52,65
008CE:  DATA 74,72
008D0:  DATA 79,20
008D2:  DATA 72,65
008D4:  DATA 71,75
008D6:  DATA 65,73
008D8:  DATA 74,20
008DA:  DATA 74,6F
008DC:  DATA 20,42
008DE:  DATA 4F,53
008E0:  DATA 53,20
008E2:  DATA 50,49
008E4:  DATA 43,0D
008E6:  DATA 0A,00
008E8:  DATA 45,72
008EA:  DATA 72,6F
008EC:  DATA 72,21
008EE:  DATA 20,52
008F0:  DATA 65,63
008F2:  DATA 65,69
008F4:  DATA 76,69
008F6:  DATA 6E,67
008F8:  DATA 20,63
008FA:  DATA 6F,6D
008FC:  DATA 6D,61
008FE:  DATA 6E,64
00900:  DATA 20,69
00902:  DATA 6E,63
00904:  DATA 6F,6E
00906:  DATA 73,69
00908:  DATA 73,74
0090A:  DATA 65,6E
0090C:  DATA 74,20
0090E:  DATA 77,69
00910:  DATA 74,68
00912:  DATA 20,74
00914:  DATA 68,65
00916:  DATA 20,64
00918:  DATA 65,73
0091A:  DATA 69,67
0091C:  DATA 6E,0D
0091E:  DATA 0A,00
00920:  DATA 45,6E
00922:  DATA 64,20
00924:  DATA 53,4D
00926:  DATA 46,20
00928:  DATA 75,73
0092A:  DATA 69,6E
0092C:  DATA 67,20
0092E:  DATA 72,65
00930:  DATA 71,65
00932:  DATA 73,74
00934:  DATA 20,73
00936:  DATA 65,61
00938:  DATA 71,75
0093A:  DATA 65,6E
0093C:  DATA 63,65
0093E:  DATA 0D,0A
00940:  DATA 00,00
00942:  DATA 49,4F
00944:  DATA 20,49
00946:  DATA 6E,69
00948:  DATA 74,69
0094A:  DATA 61,6C
0094C:  DATA 69,7A
0094E:  DATA 65,0D
00950:  DATA 0A,00
00952:  DATA 09,43
00954:  DATA 6F,6D
00956:  DATA 70,6C
00958:  DATA 65,74
0095A:  DATA 65,0D
0095C:  DATA 0A,00
0095E:  DATA 41,44
00960:  DATA 43,20
00962:  DATA 49,6E
00964:  DATA 69,74
00966:  DATA 69,61
00968:  DATA 6C,69
0096A:  DATA 7A,65
0096C:  DATA 0D,0A
0096E:  DATA 00,00
00970:  DATA 09,43
00972:  DATA 6F,6D
00974:  DATA 70,6C
00976:  DATA 65,74
00978:  DATA 65,0D
0097A:  DATA 0A,00
0097C:  DATA 53,74
0097E:  DATA 61,72
00980:  DATA 74,20
00982:  DATA 53,57
00984:  DATA 45,45
00986:  DATA 50,0D
00988:  DATA 0A,00
0098A:  DATA 09,53
0098C:  DATA 77,65
0098E:  DATA 65,70
00990:  DATA 20,73
00992:  DATA 74,65
00994:  DATA 70,20
00996:  DATA 3A,20
00998:  DATA 25,75
0099A:  DATA 0D,0A
0099C:  DATA 00,00
0099E:  DATA 53,74
009A0:  DATA 61,72
009A2:  DATA 74,20
009A4:  DATA 54,45
009A6:  DATA 53,54
009A8:  DATA 20,53
009AA:  DATA 57,45
009AC:  DATA 45,50
009AE:  DATA 0D,0A
009B0:  DATA 00,00
009B2:  DATA 73,74
009B4:  DATA 65,70
009B6:  DATA 2C,20
009B8:  DATA 76,6F
009BA:  DATA 6C,74
009BC:  DATA 61,67
009BE:  DATA 65,2C
009C0:  DATA 20,63
009C2:  DATA 75,72
009C4:  DATA 72,65
009C6:  DATA 6E,74
009C8:  DATA 0D,0A
009CA:  DATA 00,00
009CC:  DATA 53,74
009CE:  DATA 61,72
009D0:  DATA 74,20
009D2:  DATA 41,44
009D4:  DATA 43,20
009D6:  DATA 54,45
009D8:  DATA 53,54
009DA:  DATA 0D,0A
009DC:  DATA 00,00
009DE:  DATA 41,44
009E0:  DATA 43,20
009E2:  DATA 56,6F
009E4:  DATA 6C,74
009E6:  DATA 61,67
009E8:  DATA 65,3A
009EA:  DATA 20,25
009EC:  DATA 30,34
009EE:  DATA 4C,58
009F0:  DATA 0D,0A
009F2:  DATA 00,00
009F4:  DATA 41,44
009F6:  DATA 43,20
009F8:  DATA 43,75
009FA:  DATA 72,72
009FC:  DATA 65,6E
009FE:  DATA 74,3A
00A00:  DATA 20,25
00A02:  DATA 30,34
00A04:  DATA 4C,58
00A06:  DATA 0D,0A
00A08:  DATA 00,00
00A0A:  DATA 41,44
00A0C:  DATA 43,20
00A0E:  DATA 43,49
00A10:  DATA 47,53
00A12:  DATA 31,20
00A14:  DATA 41,6D
00A16:  DATA 70,3A
00A18:  DATA 20,25
00A1A:  DATA 30,34
00A1C:  DATA 4C,58
00A1E:  DATA 0D,0A
00A20:  DATA 00,00
00A22:  DATA 41,44
00A24:  DATA 43,20
00A26:  DATA 43,49
00A28:  DATA 47,53
00A2A:  DATA 31,20
00A2C:  DATA 56,52
00A2E:  DATA 45,46
00A30:  DATA 3A,20
00A32:  DATA 25,30
00A34:  DATA 34,4C
00A36:  DATA 58,0D
00A38:  DATA 0A,00
00A3A:  DATA 53,74
00A3C:  DATA 61,72
00A3E:  DATA 74,20
00A40:  DATA 53,57
00A42:  DATA 45,45
00A44:  DATA 50,20
00A46:  DATA 32,70
00A48:  DATA 6F,72
00A4A:  DATA 74,73
00A4C:  DATA 0D,0A
00A4E:  DATA 00,00
00A50:  DATA 09,53
00A52:  DATA 77,65
00A54:  DATA 65,70
00A56:  DATA 20,73
00A58:  DATA 74,65
00A5A:  DATA 70,20
00A5C:  DATA 3A,20
00A5E:  DATA 25,75
00A60:  DATA 0D,0A
00A62:  DATA 00,00
00A64:  DATA 45,4E
00A66:  DATA 44,20
00A68:  DATA 53,57
00A6A:  DATA 45,45
00A6C:  DATA 50,20
00A6E:  DATA 32,70
00A70:  DATA 6F,72
00A72:  DATA 74,0D
00A74:  DATA 0A,00
00A76:  DATA 53,74
00A78:  DATA 61,72
00A7A:  DATA 74,20
00A7C:  DATA 43,49
00A7E:  DATA 47,53
00A80:  DATA 20,64
00A82:  DATA 61,74
00A84:  DATA 61,20
00A86:  DATA 63,6F
00A88:  DATA 6E,76
00A8A:  DATA 65,72
00A8C:  DATA 73,69
00A8E:  DATA 6F,6E
00A90:  DATA 0D,0A
00A92:  DATA 00,00
00A94:  DATA 53,74
00A96:  DATA 61,72
00A98:  DATA 74,20
00A9A:  DATA 53,57
00A9C:  DATA 45,45
00A9E:  DATA 50,20
00AA0:  DATA 50,4F
00AA2:  DATA 52,54
00AA4:  DATA 31,0D
00AA6:  DATA 0A,00
00AA8:  DATA 09,53
00AAA:  DATA 77,65
00AAC:  DATA 65,70
00AAE:  DATA 20,73
00AB0:  DATA 74,65
00AB2:  DATA 70,20
00AB4:  DATA 3A,20
00AB6:  DATA 25,75
00AB8:  DATA 0D,0A
00ABA:  DATA 00,00
00ABC:  DATA 45,4E
00ABE:  DATA 44,20
00AC0:  DATA 53,57
00AC2:  DATA 45,45
00AC4:  DATA 50,20
00AC6:  DATA 50,4F
00AC8:  DATA 52,54
00ACA:  DATA 31,0D
00ACC:  DATA 0A,00
00ACE:  DATA 53,74
00AD0:  DATA 61,72
00AD2:  DATA 74,20
00AD4:  DATA 43,49
00AD6:  DATA 47,53
00AD8:  DATA 20,64
00ADA:  DATA 61,74
00ADC:  DATA 61,20
00ADE:  DATA 63,6F
00AE0:  DATA 6E,76
00AE2:  DATA 65,72
00AE4:  DATA 73,69
00AE6:  DATA 6F,6E
00AE8:  DATA 0D,0A
00AEA:  DATA 00,00
00AEC:  DATA 45,6E
00AEE:  DATA 64,20
00AF0:  DATA 43,49
00AF2:  DATA 47,53
00AF4:  DATA 20,64
00AF6:  DATA 61,74
00AF8:  DATA 61,20
00AFA:  DATA 63,6F
00AFC:  DATA 6E,76
00AFE:  DATA 65,72
00B00:  DATA 73,69
00B02:  DATA 6F,6E
00B04:  DATA 0D,0A
00B06:  DATA 00,00
00B08:  DATA 53,74
00B0A:  DATA 61,72
00B0C:  DATA 74,20
00B0E:  DATA 53,57
00B10:  DATA 45,45
00B12:  DATA 50,20
00B14:  DATA 50,4F
00B16:  DATA 52,54
00B18:  DATA 32,0D
00B1A:  DATA 0A,00
00B1C:  DATA 09,53
00B1E:  DATA 77,65
00B20:  DATA 65,70
00B22:  DATA 20,73
00B24:  DATA 74,65
00B26:  DATA 70,20
00B28:  DATA 3A,20
00B2A:  DATA 25,75
00B2C:  DATA 0D,0A
00B2E:  DATA 00,00
00B30:  DATA 45,4E
00B32:  DATA 44,20
00B34:  DATA 53,57
00B36:  DATA 45,45
00B38:  DATA 50,20
00B3A:  DATA 50,4F
00B3C:  DATA 52,54
00B3E:  DATA 32,0D
00B40:  DATA 0A,00
00B42:  DATA 53,74
00B44:  DATA 61,72
00B46:  DATA 74,20
00B48:  DATA 43,49
00B4A:  DATA 47,53
00B4C:  DATA 20,64
00B4E:  DATA 61,74
00B50:  DATA 61,20
00B52:  DATA 63,6F
00B54:  DATA 6E,76
00B56:  DATA 65,72
00B58:  DATA 73,69
00B5A:  DATA 6F,6E
00B5C:  DATA 0D,0A
00B5E:  DATA 00,00
00B60:  DATA 4D,49
00B62:  DATA 53,53
00B64:  DATA 49,4F
00B66:  DATA 4E,20
00B68:  DATA 46,4C
00B6A:  DATA 41,53
00B6C:  DATA 48,20
00B6E:  DATA 49,6E
00B70:  DATA 69,74
00B72:  DATA 69,61
00B74:  DATA 6C,69
00B76:  DATA 7A,65
00B78:  DATA 0D,0A
00B7A:  DATA 00,00
00B7C:  DATA 09,5B
00B7E:  DATA 4D,49
00B80:  DATA 53,20
00B82:  DATA 46,4D
00B84:  DATA 5D,20
00B86:  DATA 46,6C
00B88:  DATA 61,73
00B8A:  DATA 68,20
00B8C:  DATA 49,44
00B8E:  DATA 3A,20
00B90:  DATA 00,00
00B92:  DATA 09,5B
00B94:  DATA 53,4D
00B96:  DATA 46,5D
00B98:  DATA 20,46
00B9A:  DATA 6C,61
00B9C:  DATA 73,68
00B9E:  DATA 20,49
00BA0:  DATA 44,3A
00BA2:  DATA 20,00
00BA4:  DATA 09,5B
00BA6:  DATA 53,4D
00BA8:  DATA 46,5D
00BAA:  DATA 20,63
00BAC:  DATA 6F,6E
00BAE:  DATA 6E,65
00BB0:  DATA 63,74
00BB2:  DATA 20,65
00BB4:  DATA 72,72
00BB6:  DATA 6F,72
00BB8:  DATA 21,0D
00BBA:  DATA 0A,00
00BBC:  DATA 09,5B
00BBE:  DATA 53,4D
00BC0:  DATA 46,5D
00BC2:  DATA 20,69
00BC4:  DATA 73,20
00BC6:  DATA 63,6F
00BC8:  DATA 6E,6E
00BCA:  DATA 65,63
00BCC:  DATA 74,65
00BCE:  DATA 64,0D
00BD0:  DATA 0A,00
00BD2:  DATA 09,5B
00BD4:  DATA 4D,49
00BD6:  DATA 53,20
00BD8:  DATA 46,4D
00BDA:  DATA 5D,20
00BDC:  DATA 63,6F
00BDE:  DATA 6E,6E
00BE0:  DATA 65,63
00BE2:  DATA 74,20
00BE4:  DATA 65,72
00BE6:  DATA 72,6F
00BE8:  DATA 72,21
00BEA:  DATA 0D,0A
00BEC:  DATA 00,00
00BEE:  DATA 09,5B
00BF0:  DATA 4D,49
00BF2:  DATA 53,20
00BF4:  DATA 46,4D
00BF6:  DATA 5D,20
00BF8:  DATA 69,73
00BFA:  DATA 20,63
00BFC:  DATA 6F,6E
00BFE:  DATA 6E,65
00C00:  DATA 63,74
00C02:  DATA 65,64
00C04:  DATA 0D,0A
00C06:  DATA 00,00
00C08:  DATA 09,7C
00C0A:  DATA 20,53
00C0C:  DATA 4D,46
00C0E:  DATA 20,20
00C10:  DATA 7C,20
00C12:  DATA 50,49
00C14:  DATA 43,4C
00C16:  DATA 4F,47
00C18:  DATA 20,7C
00C1A:  DATA 20,55
00C1C:  DATA 73,65
00C1E:  DATA 20,43
00C20:  DATA 6F,75
00C22:  DATA 6E,74
00C24:  DATA 65,72
00C26:  DATA 20,20
00C28:  DATA 20,20
00C2A:  DATA 20,20
00C2C:  DATA 3A,20
00C2E:  DATA 30,78
00C30:  DATA 25,30
00C32:  DATA 38,4C
00C34:  DATA 58,0D
00C36:  DATA 0A,00
00C38:  DATA 09,7C
00C3A:  DATA 20,53
00C3C:  DATA 4D,46
00C3E:  DATA 20,20
00C40:  DATA 7C,20
00C42:  DATA 50,49
00C44:  DATA 43,4C
00C46:  DATA 4F,47
00C48:  DATA 20,7C
00C4A:  DATA 20,4C
00C4C:  DATA 6F,6F
00C4E:  DATA 70,20
00C50:  DATA 43,6F
00C52:  DATA 75,6E
00C54:  DATA 74,65
00C56:  DATA 72,20
00C58:  DATA 20,20
00C5A:  DATA 20,20
00C5C:  DATA 3A,20
00C5E:  DATA 30,78
00C60:  DATA 25,30
00C62:  DATA 32,58
00C64:  DATA 0D,0A
00C66:  DATA 00,00
00C68:  DATA 09,7C
00C6A:  DATA 20,53
00C6C:  DATA 4D,46
00C6E:  DATA 20,20
00C70:  DATA 7C,20
00C72:  DATA 4D,45
00C74:  DATA 41,53
00C76:  DATA 20,20
00C78:  DATA 20,7C
00C7A:  DATA 20,55
00C7C:  DATA 73,65
00C7E:  DATA 20,43
00C80:  DATA 6F,75
00C82:  DATA 6E,74
00C84:  DATA 65,72
00C86:  DATA 20,20
00C88:  DATA 20,20
00C8A:  DATA 20,20
00C8C:  DATA 3A,20
00C8E:  DATA 30,78
00C90:  DATA 25,30
00C92:  DATA 38,4C
00C94:  DATA 58,0D
00C96:  DATA 0A,00
00C98:  DATA 09,7C
00C9A:  DATA 20,53
00C9C:  DATA 4D,46
00C9E:  DATA 20,20
00CA0:  DATA 7C,20
00CA2:  DATA 4D,45
00CA4:  DATA 41,53
00CA6:  DATA 20,20
00CA8:  DATA 20,7C
00CAA:  DATA 20,4C
00CAC:  DATA 6F,6F
00CAE:  DATA 70,20
00CB0:  DATA 43,6F
00CB2:  DATA 75,6E
00CB4:  DATA 74,65
00CB6:  DATA 72,20
00CB8:  DATA 20,20
00CBA:  DATA 20,20
00CBC:  DATA 3A,20
00CBE:  DATA 30,78
00CC0:  DATA 25,30
00CC2:  DATA 32,58
00CC4:  DATA 0D,0A
00CC6:  DATA 00,00
00CC8:  DATA 09,7C
00CCA:  DATA 20,4D
00CCC:  DATA 49,53
00CCE:  DATA 46,20
00CD0:  DATA 7C,20
00CD2:  DATA 50,49
00CD4:  DATA 43,4C
00CD6:  DATA 4F,47
00CD8:  DATA 20,7C
00CDA:  DATA 20,55
00CDC:  DATA 73,65
00CDE:  DATA 20,43
00CE0:  DATA 6F,75
00CE2:  DATA 6E,74
00CE4:  DATA 65,72
00CE6:  DATA 20,20
00CE8:  DATA 20,20
00CEA:  DATA 20,20
00CEC:  DATA 3A,20
00CEE:  DATA 30,78
00CF0:  DATA 25,30
00CF2:  DATA 38,4C
00CF4:  DATA 58,0D
00CF6:  DATA 0A,00
00CF8:  DATA 09,7C
00CFA:  DATA 20,4D
00CFC:  DATA 49,53
00CFE:  DATA 46,20
00D00:  DATA 7C,20
00D02:  DATA 50,49
00D04:  DATA 43,4C
00D06:  DATA 4F,47
00D08:  DATA 20,7C
00D0A:  DATA 20,55
00D0C:  DATA 6E,63
00D0E:  DATA 6F,70
00D10:  DATA 79,65
00D12:  DATA 64,20
00D14:  DATA 43,6F
00D16:  DATA 75,6E
00D18:  DATA 74,65
00D1A:  DATA 72,20
00D1C:  DATA 3A,20
00D1E:  DATA 30,78
00D20:  DATA 25,30
00D22:  DATA 38,4C
00D24:  DATA 58,0D
00D26:  DATA 0A,00
00D28:  DATA 09,7C
00D2A:  DATA 20,4D
00D2C:  DATA 49,53
00D2E:  DATA 46,20
00D30:  DATA 7C,20
00D32:  DATA 50,49
00D34:  DATA 43,4C
00D36:  DATA 4F,47
00D38:  DATA 20,7C
00D3A:  DATA 20,4C
00D3C:  DATA 6F,6F
00D3E:  DATA 70,20
00D40:  DATA 43,6F
00D42:  DATA 75,6E
00D44:  DATA 74,65
00D46:  DATA 72,20
00D48:  DATA 20,20
00D4A:  DATA 20,20
00D4C:  DATA 3A,20
00D4E:  DATA 30,78
00D50:  DATA 25,30
00D52:  DATA 32,58
00D54:  DATA 0D,0A
00D56:  DATA 00,00
00D58:  DATA 09,7C
00D5A:  DATA 20,4D
00D5C:  DATA 49,53
00D5E:  DATA 46,20
00D60:  DATA 7C,20
00D62:  DATA 50,49
00D64:  DATA 43,4C
00D66:  DATA 4F,47
00D68:  DATA 20,7C
00D6A:  DATA 20,57
00D6C:  DATA 72,69
00D6E:  DATA 74,65
00D70:  DATA 20,43
00D72:  DATA 6F,75
00D74:  DATA 6E,74
00D76:  DATA 65,72
00D78:  DATA 20,20
00D7A:  DATA 20,20
00D7C:  DATA 3A,20
00D7E:  DATA 30,78
00D80:  DATA 25,30
00D82:  DATA 32,58
00D84:  DATA 0D,0A
00D86:  DATA 00,00
00D88:  DATA 09,7C
00D8A:  DATA 20,4D
00D8C:  DATA 49,53
00D8E:  DATA 46,20
00D90:  DATA 7C,20
00D92:  DATA 4D,45
00D94:  DATA 41,53
00D96:  DATA 20,20
00D98:  DATA 20,7C
00D9A:  DATA 20,55
00D9C:  DATA 73,65
00D9E:  DATA 20,43
00DA0:  DATA 6F,75
00DA2:  DATA 6E,74
00DA4:  DATA 65,72
00DA6:  DATA 20,20
00DA8:  DATA 20,20
00DAA:  DATA 20,20
00DAC:  DATA 3A,20
00DAE:  DATA 30,78
00DB0:  DATA 25,30
00DB2:  DATA 38,4C
00DB4:  DATA 58,0D
00DB6:  DATA 0A,00
00DB8:  DATA 09,7C
00DBA:  DATA 20,4D
00DBC:  DATA 49,53
00DBE:  DATA 46,20
00DC0:  DATA 7C,20
00DC2:  DATA 4D,45
00DC4:  DATA 41,53
00DC6:  DATA 20,20
00DC8:  DATA 20,7C
00DCA:  DATA 20,55
00DCC:  DATA 6E,63
00DCE:  DATA 6F,70
00DD0:  DATA 79,65
00DD2:  DATA 64,20
00DD4:  DATA 43,6F
00DD6:  DATA 75,6E
00DD8:  DATA 74,65
00DDA:  DATA 72,20
00DDC:  DATA 3A,20
00DDE:  DATA 30,78
00DE0:  DATA 25,30
00DE2:  DATA 38,4C
00DE4:  DATA 58,0D
00DE6:  DATA 0A,00
00DE8:  DATA 09,7C
00DEA:  DATA 20,4D
00DEC:  DATA 49,53
00DEE:  DATA 46,20
00DF0:  DATA 7C,20
00DF2:  DATA 4D,45
00DF4:  DATA 41,53
00DF6:  DATA 20,20
00DF8:  DATA 20,7C
00DFA:  DATA 20,4C
00DFC:  DATA 6F,6F
00DFE:  DATA 70,20
00E00:  DATA 43,6F
00E02:  DATA 75,6E
00E04:  DATA 74,65
00E06:  DATA 72,20
00E08:  DATA 20,20
00E0A:  DATA 20,20
00E0C:  DATA 3A,20
00E0E:  DATA 30,78
00E10:  DATA 25,30
00E12:  DATA 32,58
00E14:  DATA 0D,0A
00E16:  DATA 00,00
00E18:  DATA 09,43
00E1A:  DATA 6F,6D
00E1C:  DATA 70,6C
00E1E:  DATA 65,74
00E20:  DATA 65,0D
00E22:  DATA 0A,00
00E24:  DATA 4D,69
00E26:  DATA 73,73
00E28:  DATA 69,6F
00E2A:  DATA 6E,20
00E2C:  DATA 46,6C
00E2E:  DATA 61,73
00E30:  DATA 68,20
00E32:  DATA 69,73
00E34:  DATA 20,6E
00E36:  DATA 6F,74
00E38:  DATA 20,63
00E3A:  DATA 6F,6E
00E3C:  DATA 6E,65
00E3E:  DATA 63,74
00E40:  DATA 65,64
00E42:  DATA 0D,0A
00E44:  DATA 00,00
00E46:  DATA 4D,69
00E48:  DATA 73,73
00E4A:  DATA 69,6F
00E4C:  DATA 6E,20
00E4E:  DATA 46,6C
00E50:  DATA 61,73
00E52:  DATA 68,20
00E54:  DATA 69,73
00E56:  DATA 20,6E
00E58:  DATA 6F,74
00E5A:  DATA 20,63
00E5C:  DATA 6F,6E
00E5E:  DATA 6E,65
00E60:  DATA 63,74
00E62:  DATA 65,64
00E64:  DATA 0D,0A
00E66:  DATA 00,00
00E68:  DATA 57,72
00E6A:  DATA 69,74
00E6C:  DATA 65,20
00E6E:  DATA 4D,49
00E70:  DATA 53,46
00E72:  DATA 20,41
00E74:  DATA 64,64
00E76:  DATA 72,65
00E78:  DATA 73,73
00E7A:  DATA 20,41
00E7C:  DATA 72,65
00E7E:  DATA 61,20
00E80:  DATA 43,6F
00E82:  DATA 6D,70
00E84:  DATA 6C,65
00E86:  DATA 74,65
00E88:  DATA 0D,0A
00E8A:  DATA 00,00
00E8C:  DATA 4D,69
00E8E:  DATA 73,73
00E90:  DATA 69,6F
00E92:  DATA 6E,20
00E94:  DATA 46,6C
00E96:  DATA 61,73
00E98:  DATA 68,20
00E9A:  DATA 69,73
00E9C:  DATA 20,6E
00E9E:  DATA 6F,74
00EA0:  DATA 20,63
00EA2:  DATA 6F,6E
00EA4:  DATA 6E,65
00EA6:  DATA 63,74
00EA8:  DATA 65,64
00EAA:  DATA 0D,0A
00EAC:  DATA 00,00
00EAE:  DATA 0D,0A
00EB0:  DATA 5F,5F
00EB2:  DATA 5F,5F
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,5F
00EBA:  DATA 5F,5F
00EBC:  DATA 5F,5F
00EBE:  DATA 5F,5F
00EC0:  DATA 5F,5F
00EC2:  DATA 5F,5F
00EC4:  DATA 5F,5F
00EC6:  DATA 5F,5F
00EC8:  DATA 5F,5F
00ECA:  DATA 5F,5F
00ECC:  DATA 5F,5F
00ECE:  DATA 0D,0A
00ED0:  DATA 5F,5F
00ED2:  DATA 5F,5F
00ED4:  DATA 5F,53
00ED6:  DATA 74,61
00ED8:  DATA 72,74
00EDA:  DATA 20,65
00EDC:  DATA 78,65
00EDE:  DATA 63,75
00EE0:  DATA 74,65
00EE2:  DATA 5F,6D
00EE4:  DATA 69,73
00EE6:  DATA 73,69
00EE8:  DATA 6F,6E
00EEA:  DATA 5F,5F
00EEC:  DATA 5F,5F
00EEE:  DATA 5F,0D
00EF0:  DATA 0A,0D
00EF2:  DATA 0A,00
00EF4:  DATA 43,6F
00EF6:  DATA 6D,6D
00EF8:  DATA 61,6E
00EFA:  DATA 64,20
00EFC:  DATA 49,44
00EFE:  DATA 3A,20
00F00:  DATA 25,58
00F02:  DATA 0D,0A
00F04:  DATA 0D,0A
00F06:  DATA 00,00
00F08:  DATA 09,09
00F0A:  DATA 2D,3E
00F0C:  DATA 20,49
00F0E:  DATA 6E,76
00F10:  DATA 61,6C
00F12:  DATA 69,64
00F14:  DATA 20,43
00F16:  DATA 4D,44
00F18:  DATA 20,49
00F1A:  DATA 44,21
00F1C:  DATA 0D,0A
00F1E:  DATA 00,00
00F20:  DATA 0D,0A
00F22:  DATA 5F,5F
00F24:  DATA 5F,5F
00F26:  DATA 5F,5F
00F28:  DATA 45,6E
00F2A:  DATA 64,20
00F2C:  DATA 65,78
00F2E:  DATA 65,63
00F30:  DATA 75,74
00F32:  DATA 65,5F
00F34:  DATA 6D,69
00F36:  DATA 73,73
00F38:  DATA 69,6F
00F3A:  DATA 6E,5F
00F3C:  DATA 5F,5F
00F3E:  DATA 5F,5F
00F40:  DATA 5F,0D
00F42:  DATA 0A,5F
00F44:  DATA 5F,5F
00F46:  DATA 5F,5F
00F48:  DATA 5F,5F
00F4A:  DATA 5F,5F
00F4C:  DATA 5F,5F
00F4E:  DATA 5F,5F
00F50:  DATA 5F,5F
00F52:  DATA 5F,5F
00F54:  DATA 5F,5F
00F56:  DATA 5F,5F
00F58:  DATA 5F,5F
00F5A:  DATA 5F,5F
00F5C:  DATA 5F,5F
00F5E:  DATA 5F,5F
00F60:  DATA 5F,5F
00F62:  DATA 0D,0A
00F64:  DATA 00,00
00F66:  DATA 53,74
00F68:  DATA 61,72
00F6A:  DATA 74,20
00F6C:  DATA 65,78
00F6E:  DATA 65,63
00F70:  DATA 75,74
00F72:  DATA 65,5F
00F74:  DATA 63,6F
00F76:  DATA 6D,6D
00F78:  DATA 61,6E
00F7A:  DATA 64,0D
00F7C:  DATA 0A,00
00F7E:  DATA 09,2D
00F80:  DATA 3E,20
00F82:  DATA 55,70
00F84:  DATA 6C,69
00F86:  DATA 6E,6B
00F88:  DATA 20,63
00F8A:  DATA 6F,6D
00F8C:  DATA 6D,61
00F8E:  DATA 6E,64
00F90:  DATA 0D,0A
00F92:  DATA 00,00
00F94:  DATA 09,20
00F96:  DATA 20,20
00F98:  DATA 54,72
00F9A:  DATA 61,6E
00F9C:  DATA 73,6D
00F9E:  DATA 69,74
00FA0:  DATA 20,41
00FA2:  DATA 63,6B
00FA4:  DATA 6E,6F
00FA6:  DATA 6C,65
00FA8:  DATA 67,64
00FAA:  DATA 65,0D
00FAC:  DATA 0A,00
00FAE:  DATA 09,2D
00FB0:  DATA 3E,20
00FB2:  DATA 53,74
00FB4:  DATA 61,74
00FB6:  DATA 75,73
00FB8:  DATA 20,63
00FBA:  DATA 68,65
00FBC:  DATA 63,6B
00FBE:  DATA 0D,0A
00FC0:  DATA 00,00
00FC2:  DATA 09,20
00FC4:  DATA 20,20
00FC6:  DATA 54,72
00FC8:  DATA 61,6E
00FCA:  DATA 73,6D
00FCC:  DATA 69,74
00FCE:  DATA 20,4D
00FD0:  DATA 49,53
00FD2:  DATA 20,4D
00FD4:  DATA 43,55
00FD6:  DATA 20,53
00FD8:  DATA 74,61
00FDA:  DATA 74,75
00FDC:  DATA 73,0D
00FDE:  DATA 0A,00
00FE0:  DATA 66,69
00FE2:  DATA 6E,69
00FE4:  DATA 73,68
00FE6:  DATA 65,64
00FE8:  DATA 20,69
00FEA:  DATA 6E,20
00FEC:  DATA 73,74
00FEE:  DATA 61,74
00FF0:  DATA 75,73
00FF2:  DATA 5F,63
00FF4:  DATA 68,65
00FF6:  DATA 63,6B
00FF8:  DATA 0D,0A
00FFA:  DATA 00,00
00FFC:  DATA 09,2D
00FFE:  DATA 3E,20
01000:  DATA 53,4D
01002:  DATA 46,20
01004:  DATA 61,76
01006:  DATA 61,69
01008:  DATA 6C,61
0100A:  DATA 62,6C
0100C:  DATA 65,20
0100E:  DATA 63,68
01010:  DATA 65,63
01012:  DATA 6B,0D
01014:  DATA 0A,00
01016:  DATA 09,20
01018:  DATA 20,20
0101A:  DATA 54,72
0101C:  DATA 61,6E
0101E:  DATA 73,6D
01020:  DATA 69,74
01022:  DATA 20,41
01024:  DATA 63,6B
01026:  DATA 6E,6F
01028:  DATA 6C,65
0102A:  DATA 67,64
0102C:  DATA 65,0D
0102E:  DATA 0A,00
01030:  DATA 09,09
01032:  DATA 2D,3E
01034:  DATA 20,61
01036:  DATA 6C,6C
01038:  DATA 6F,77
0103A:  DATA 64,0D
0103C:  DATA 0A,00
0103E:  DATA 09,09
01040:  DATA 2D,3E
01042:  DATA 20,64
01044:  DATA 65,6E
01046:  DATA 79,65
01048:  DATA 64,0D
0104A:  DATA 0A,00
0104C:  DATA 53,74
0104E:  DATA 61,72
01050:  DATA 74,20
01052:  DATA 4D,4F
01054:  DATA 44,45
01056:  DATA 20,44
01058:  DATA 55,4D
0105A:  DATA 4D,59
0105C:  DATA 0D,0A
0105E:  DATA 00,00
01060:  DATA 09,4D
01062:  DATA 4F,44
01064:  DATA 45,20
01066:  DATA 20,20
01068:  DATA 20,20
0106A:  DATA 3A,20
0106C:  DATA 25,30
0106E:  DATA 32,58
01070:  DATA 0D,0A
01072:  DATA 00,00
01074:  DATA 09,50
01076:  DATA 61,72
01078:  DATA 61,6D
0107A:  DATA 31,20
0107C:  DATA 20,20
0107E:  DATA 3A,20
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 38,4C
01086:  DATA 58,0D
01088:  DATA 0A,00
0108A:  DATA 09,50
0108C:  DATA 61,72
0108E:  DATA 61,6D
01090:  DATA 32,20
01092:  DATA 20,20
01094:  DATA 3A,20
01096:  DATA 30,78
01098:  DATA 25,30
0109A:  DATA 34,4C
0109C:  DATA 58,0D
0109E:  DATA 0A,00
010A0:  DATA 45,6E
010A2:  DATA 64,20
010A4:  DATA 4D,4F
010A6:  DATA 44,45
010A8:  DATA 20,44
010AA:  DATA 55,4D
010AC:  DATA 4D,59
010AE:  DATA 0D,0A
010B0:  DATA 00,00
010B2:  DATA 53,74
010B4:  DATA 61,72
010B6:  DATA 74,20
010B8:  DATA 4D,4F
010BA:  DATA 44,45
010BC:  DATA 20,54
010BE:  DATA 45,53
010C0:  DATA 54,20
010C2:  DATA 49,56
010C4:  DATA 0D,0A
010C6:  DATA 00,00
010C8:  DATA 09,53
010CA:  DATA 77,65
010CC:  DATA 65,70
010CE:  DATA 20,73
010D0:  DATA 74,65
010D2:  DATA 70,20
010D4:  DATA 3A,20
010D6:  DATA 25,75
010D8:  DATA 0D,0A
010DA:  DATA 00,00
010DC:  DATA 45,6E
010DE:  DATA 64,20
010E0:  DATA 4D,4F
010E2:  DATA 44,45
010E4:  DATA 20,54
010E6:  DATA 45,53
010E8:  DATA 54,20
010EA:  DATA 49,56
010EC:  DATA 0D,0A
010EE:  DATA 00,00
010F0:  DATA 53,74
010F2:  DATA 61,72
010F4:  DATA 74,20
010F6:  DATA 4D,4F
010F8:  DATA 44,45
010FA:  DATA 20,4D
010FC:  DATA 45,41
010FE:  DATA 53,55
01100:  DATA 52,45
01102:  DATA 0D,0A
01104:  DATA 00,00
01106:  DATA 53,74
01108:  DATA 61,72
0110A:  DATA 74,20
0110C:  DATA 53,57
0110E:  DATA 45,45
01110:  DATA 50,0D
01112:  DATA 0A,00
01114:  DATA 09,53
01116:  DATA 77,65
01118:  DATA 65,70
0111A:  DATA 20,73
0111C:  DATA 74,65
0111E:  DATA 70,20
01120:  DATA 3A,20
01122:  DATA 25,75
01124:  DATA 0D,0A
01126:  DATA 00,00
01128:  DATA 45,4E
0112A:  DATA 44,20
0112C:  DATA 53,57
0112E:  DATA 45,45
01130:  DATA 50,0D
01132:  DATA 0A,00
01134:  DATA 53,74
01136:  DATA 61,72
01138:  DATA 74,20
0113A:  DATA 46,6C
0113C:  DATA 61,73
0113E:  DATA 68,20
01140:  DATA 45,72
01142:  DATA 61,73
01144:  DATA 65,20
01146:  DATA 41,6C
01148:  DATA 6C,0D
0114A:  DATA 0A,00
0114C:  DATA 45,6E
0114E:  DATA 64,20
01150:  DATA 46,6C
01152:  DATA 61,73
01154:  DATA 68,20
01156:  DATA 45,72
01158:  DATA 61,73
0115A:  DATA 65,20
0115C:  DATA 41,6C
0115E:  DATA 6C,0D
01160:  DATA 0A,00
01162:  DATA 53,74
01164:  DATA 61,72
01166:  DATA 74,20
01168:  DATA 46,6C
0116A:  DATA 61,73
0116C:  DATA 68,20
0116E:  DATA 45,72
01170:  DATA 61,73
01172:  DATA 65,20
01174:  DATA 31,20
01176:  DATA 53,65
01178:  DATA 63,74
0117A:  DATA 6F,72
0117C:  DATA 0D,0A
0117E:  DATA 00,00
01180:  DATA 09,53
01182:  DATA 65,63
01184:  DATA 74,6F
01186:  DATA 72,20
01188:  DATA 41,64
0118A:  DATA 64,72
0118C:  DATA 65,73
0118E:  DATA 73,3A
01190:  DATA 20,30
01192:  DATA 78,25
01194:  DATA 30,38
01196:  DATA 4C,58
01198:  DATA 0D,0A
0119A:  DATA 00,00
0119C:  DATA 45,6E
0119E:  DATA 64,20
011A0:  DATA 46,6C
011A2:  DATA 61,73
011A4:  DATA 68,20
011A6:  DATA 45,72
011A8:  DATA 61,73
011AA:  DATA 65,20
011AC:  DATA 31,20
011AE:  DATA 53,65
011B0:  DATA 63,74
011B2:  DATA 6F,72
011B4:  DATA 0D,0A
011B6:  DATA 00,00
011B8:  DATA 53,74
011BA:  DATA 61,72
011BC:  DATA 74,20
011BE:  DATA 46,6C
011C0:  DATA 61,73
011C2:  DATA 68,20
011C4:  DATA 43,6F
011C6:  DATA 70,79
011C8:  DATA 20,31
011CA:  DATA 20,53
011CC:  DATA 65,63
011CE:  DATA 74,6F
011D0:  DATA 72,0D
011D2:  DATA 0A,00
011D4:  DATA 09,53
011D6:  DATA 75,62
011D8:  DATA 73,65
011DA:  DATA 63,74
011DC:  DATA 6F,72
011DE:  DATA 20,41
011E0:  DATA 64,64
011E2:  DATA 72,65
011E4:  DATA 73,73
011E6:  DATA 3A,20
011E8:  DATA 30,78
011EA:  DATA 25,30
011EC:  DATA 38,4C
011EE:  DATA 58,0D
011F0:  DATA 0A,00
011F2:  DATA 45,6E
011F4:  DATA 64,20
011F6:  DATA 46,6C
011F8:  DATA 61,73
011FA:  DATA 68,20
011FC:  DATA 43,6F
011FE:  DATA 70,79
01200:  DATA 20,31
01202:  DATA 20,53
01204:  DATA 65,63
01206:  DATA 74,6F
01208:  DATA 72,0D
0120A:  DATA 0A,00
0120C:  DATA 53,74
0120E:  DATA 61,72
01210:  DATA 74,20
01212:  DATA 46,6C
01214:  DATA 61,73
01216:  DATA 68,20
01218:  DATA 45,72
0121A:  DATA 61,73
0121C:  DATA 65,20
0121E:  DATA 36,34
01220:  DATA 6B,42
01222:  DATA 79,74
01224:  DATA 65,20
01226:  DATA 53,75
01228:  DATA 62,73
0122A:  DATA 65,63
0122C:  DATA 74,6F
0122E:  DATA 72,0D
01230:  DATA 0A,00
01232:  DATA 09,53
01234:  DATA 75,62
01236:  DATA 73,65
01238:  DATA 63,74
0123A:  DATA 6F,72
0123C:  DATA 20,41
0123E:  DATA 64,64
01240:  DATA 72,65
01242:  DATA 73,73
01244:  DATA 3A,20
01246:  DATA 30,78
01248:  DATA 25,30
0124A:  DATA 38,4C
0124C:  DATA 58,0D
0124E:  DATA 0A,00
01250:  DATA 45,6E
01252:  DATA 64,20
01254:  DATA 46,6C
01256:  DATA 61,73
01258:  DATA 68,20
0125A:  DATA 45,72
0125C:  DATA 61,73
0125E:  DATA 65,20
01260:  DATA 36,34
01262:  DATA 6B,42
01264:  DATA 79,74
01266:  DATA 65,20
01268:  DATA 53,75
0126A:  DATA 62,73
0126C:  DATA 65,63
0126E:  DATA 74,6F
01270:  DATA 72,0D
01272:  DATA 0A,00
01274:  DATA 53,74
01276:  DATA 61,72
01278:  DATA 74,20
0127A:  DATA 46,6C
0127C:  DATA 61,73
0127E:  DATA 68,20
01280:  DATA 57,72
01282:  DATA 69,74
01284:  DATA 65,20
01286:  DATA 44,65
01288:  DATA 6D,6F
0128A:  DATA 0D,0A
0128C:  DATA 00,00
0128E:  DATA 09,4D
01290:  DATA 4F,44
01292:  DATA 45,20
01294:  DATA 20,20
01296:  DATA 20,20
01298:  DATA 3A,20
0129A:  DATA 25,30
0129C:  DATA 32,58
0129E:  DATA 0D,0A
012A0:  DATA 00,00
012A2:  DATA 09,41
012A4:  DATA 64,64
012A6:  DATA 72,65
012A8:  DATA 73,73
012AA:  DATA 20,20
012AC:  DATA 3A,20
012AE:  DATA 30,78
012B0:  DATA 25,30
012B2:  DATA 38,4C
012B4:  DATA 58,0D
012B6:  DATA 0A,00
012B8:  DATA 09,50
012BA:  DATA 61,63
012BC:  DATA 6B,65
012BE:  DATA 74,4E
012C0:  DATA 75,6D
012C2:  DATA 3A,20
012C4:  DATA 30,78
012C6:  DATA 25,30
012C8:  DATA 34,4C
012CA:  DATA 58,0D
012CC:  DATA 0A,00
012CE:  DATA 57,72
012D0:  DATA 69,74
012D2:  DATA 65,20
012D4:  DATA 44,61
012D6:  DATA 74,61
012D8:  DATA 0D,0A
012DA:  DATA 00,00
012DC:  DATA 45,6E
012DE:  DATA 64,20
012E0:  DATA 46,6C
012E2:  DATA 61,73
012E4:  DATA 68,20
012E6:  DATA 57,72
012E8:  DATA 69,74
012EA:  DATA 65,20
012EC:  DATA 44,65
012EE:  DATA 6D,6F
012F0:  DATA 0D,0A
012F2:  DATA 00,00
012F4:  DATA 53,74
012F6:  DATA 61,72
012F8:  DATA 74,20
012FA:  DATA 46,6C
012FC:  DATA 61,73
012FE:  DATA 68,20
01300:  DATA 57,72
01302:  DATA 69,74
01304:  DATA 65,20
01306:  DATA 34,6B
01308:  DATA 42,79
0130A:  DATA 74,65
0130C:  DATA 20,53
0130E:  DATA 75,62
01310:  DATA 73,65
01312:  DATA 63,74
01314:  DATA 6F,72
01316:  DATA 0D,0A
01318:  DATA 00,00
0131A:  DATA 45,6E
0131C:  DATA 64,20
0131E:  DATA 46,6C
01320:  DATA 61,73
01322:  DATA 68,20
01324:  DATA 57,72
01326:  DATA 69,74
01328:  DATA 65,20
0132A:  DATA 34,6B
0132C:  DATA 42,79
0132E:  DATA 74,65
01330:  DATA 20,53
01332:  DATA 75,62
01334:  DATA 73,65
01336:  DATA 63,74
01338:  DATA 6F,72
0133A:  DATA 0D,0A
0133C:  DATA 00,00
0133E:  DATA 53,74
01340:  DATA 61,72
01342:  DATA 74,20
01344:  DATA 46,6C
01346:  DATA 61,73
01348:  DATA 68,20
0134A:  DATA 52,65
0134C:  DATA 61,64
0134E:  DATA 0D,0A
01350:  DATA 00,00
01352:  DATA 09,4D
01354:  DATA 4F,44
01356:  DATA 45,20
01358:  DATA 20,20
0135A:  DATA 20,20
0135C:  DATA 3A,20
0135E:  DATA 25,30
01360:  DATA 32,58
01362:  DATA 0D,0A
01364:  DATA 00,00
01366:  DATA 09,41
01368:  DATA 64,64
0136A:  DATA 72,65
0136C:  DATA 73,73
0136E:  DATA 20,20
01370:  DATA 3A,20
01372:  DATA 30,78
01374:  DATA 25,30
01376:  DATA 38,4C
01378:  DATA 58,0D
0137A:  DATA 0A,00
0137C:  DATA 09,50
0137E:  DATA 61,63
01380:  DATA 6B,65
01382:  DATA 74,4E
01384:  DATA 75,6D
01386:  DATA 3A,20
01388:  DATA 30,78
0138A:  DATA 25,30
0138C:  DATA 34,4C
0138E:  DATA 58,0D
01390:  DATA 0A,00
01392:  DATA 52,45
01394:  DATA 41,44
01396:  DATA 20,44
01398:  DATA 41,54
0139A:  DATA 41,0D
0139C:  DATA 0A,00
0139E:  DATA 4D,69
013A0:  DATA 73,73
013A2:  DATA 69,6F
013A4:  DATA 6E,20
013A6:  DATA 46,6C
013A8:  DATA 61,73
013AA:  DATA 68,20
013AC:  DATA 69,73
013AE:  DATA 20,6E
013B0:  DATA 6F,74
013B2:  DATA 20,63
013B4:  DATA 6F,6E
013B6:  DATA 6E,65
013B8:  DATA 63,74
013BA:  DATA 65,64
013BC:  DATA 0D,0A
013BE:  DATA 00,00
013C0:  DATA 45,6E
013C2:  DATA 64,20
013C4:  DATA 46,6C
013C6:  DATA 61,73
013C8:  DATA 68,20
013CA:  DATA 52,65
013CC:  DATA 61,64
013CE:  DATA 0D,0A
013D0:  DATA 00,00
013D2:  DATA 53,74
013D4:  DATA 61,72
013D6:  DATA 74,20
013D8:  DATA 46,6C
013DA:  DATA 61,73
013DC:  DATA 68,20
013DE:  DATA 52,65
013E0:  DATA 61,64
013E2:  DATA 20,41
013E4:  DATA 64,64
013E6:  DATA 72,65
013E8:  DATA 73,73
013EA:  DATA 0D,0A
013EC:  DATA 00,00
013EE:  DATA 52,65
013F0:  DATA 61,64
013F2:  DATA 20,44
013F4:  DATA 61,74
013F6:  DATA 61,3A
013F8:  DATA 20,25
013FA:  DATA 30,32
013FC:  DATA 58,20
013FE:  DATA 25,30
01400:  DATA 32,58
01402:  DATA 20,25
01404:  DATA 30,32
01406:  DATA 58,20
01408:  DATA 25,30
0140A:  DATA 32,58
0140C:  DATA 0D,0A
0140E:  DATA 00,00
01410:  DATA 45,6E
01412:  DATA 64,20
01414:  DATA 46,6C
01416:  DATA 61,73
01418:  DATA 68,20
0141A:  DATA 52,65
0141C:  DATA 61,64
0141E:  DATA 20,41
01420:  DATA 64,64
01422:  DATA 72,65
01424:  DATA 73,73
01426:  DATA 0D,0A
01428:  DATA 00,00
0142A:  DATA 53,74
0142C:  DATA 61,72
0142E:  DATA 74,20
01430:  DATA 46,6C
01432:  DATA 61,73
01434:  DATA 68,20
01436:  DATA 45,72
01438:  DATA 61,73
0143A:  DATA 65,20
0143C:  DATA 61,6E
0143E:  DATA 64,20
01440:  DATA 52,65
01442:  DATA 73,65
01444:  DATA 74,0D
01446:  DATA 0A,00
01448:  DATA 45,6E
0144A:  DATA 64,20
0144C:  DATA 46,6C
0144E:  DATA 61,73
01450:  DATA 68,20
01452:  DATA 45,72
01454:  DATA 61,73
01456:  DATA 65,20
01458:  DATA 61,6E
0145A:  DATA 64,20
0145C:  DATA 52,65
0145E:  DATA 73,65
01460:  DATA 74,0D
01462:  DATA 0A,00
01464:  DATA 53,74
01466:  DATA 61,72
01468:  DATA 74,20
0146A:  DATA 46,6C
0146C:  DATA 61,73
0146E:  DATA 68,20
01470:  DATA 41,64
01472:  DATA 64,72
01474:  DATA 65,73
01476:  DATA 73,20
01478:  DATA 52,65
0147A:  DATA 73,65
0147C:  DATA 74,0D
0147E:  DATA 0A,00
01480:  DATA 45,6E
01482:  DATA 64,20
01484:  DATA 46,6C
01486:  DATA 61,73
01488:  DATA 68,20
0148A:  DATA 41,64
0148C:  DATA 64,72
0148E:  DATA 65,73
01490:  DATA 73,20
01492:  DATA 52,65
01494:  DATA 73,65
01496:  DATA 74,0D
01498:  DATA 0A,00
0149A:  DATA 53,74
0149C:  DATA 61,72
0149E:  DATA 74,20
014A0:  DATA 46,6C
014A2:  DATA 61,73
014A4:  DATA 68,20
014A6:  DATA 53,4D
014A8:  DATA 46,20
014AA:  DATA 43,6F
014AC:  DATA 70,79
014AE:  DATA 0D,0A
014B0:  DATA 00,00
014B2:  DATA 45,6E
014B4:  DATA 64,20
014B6:  DATA 46,6C
014B8:  DATA 61,73
014BA:  DATA 68,20
014BC:  DATA 53,4D
014BE:  DATA 46,20
014C0:  DATA 43,6F
014C2:  DATA 70,79
014C4:  DATA 0D,0A
014C6:  DATA 00,00
014C8:  DATA 53,74
014CA:  DATA 61,72
014CC:  DATA 74,20
014CE:  DATA 46,6C
014D0:  DATA 61,73
014D2:  DATA 68,20
014D4:  DATA 53,4D
014D6:  DATA 46,20
014D8:  DATA 52,65
014DA:  DATA 61,64
014DC:  DATA 0D,0A
014DE:  DATA 00,00
014E0:  DATA 52,65
014E2:  DATA 61,64
014E4:  DATA 20,44
014E6:  DATA 61,74
014E8:  DATA 61,3A
014EA:  DATA 20,00
014EC:  DATA 0D,0A
014EE:  DATA 45,6E
014F0:  DATA 64,20
014F2:  DATA 46,6C
014F4:  DATA 61,73
014F6:  DATA 68,20
014F8:  DATA 53,4D
014FA:  DATA 46,20
014FC:  DATA 52,65
014FE:  DATA 61,64
01500:  DATA 0D,0A
01502:  DATA 00,00
01504:  DATA 53,74
01506:  DATA 61,72
01508:  DATA 74,20
0150A:  DATA 46,6C
0150C:  DATA 61,73
0150E:  DATA 68,20
01510:  DATA 53,4D
01512:  DATA 46,20
01514:  DATA 45,72
01516:  DATA 61,73
01518:  DATA 65,0D
0151A:  DATA 0A,00
0151C:  DATA 45,6E
0151E:  DATA 64,20
01520:  DATA 46,6C
01522:  DATA 61,73
01524:  DATA 68,20
01526:  DATA 53,4D
01528:  DATA 46,20
0152A:  DATA 45,72
0152C:  DATA 61,73
0152E:  DATA 65,0D
01530:  DATA 0A,00
01532:  DATA 53,74
01534:  DATA 61,72
01536:  DATA 74,20
01538:  DATA 46,6C
0153A:  DATA 61,73
0153C:  DATA 68,20
0153E:  DATA 41,64
01540:  DATA 64,72
01542:  DATA 65,73
01544:  DATA 73,20
01546:  DATA 52,65
01548:  DATA 73,65
0154A:  DATA 74,0D
0154C:  DATA 0A,00
0154E:  DATA 45,6E
01550:  DATA 64,20
01552:  DATA 46,6C
01554:  DATA 61,73
01556:  DATA 68,20
01558:  DATA 41,64
0155A:  DATA 64,72
0155C:  DATA 65,73
0155E:  DATA 73,20
01560:  DATA 52,65
01562:  DATA 73,65
01564:  DATA 74,0D
01566:  DATA 0A,00
01568:  DATA 53,74
0156A:  DATA 61,72
0156C:  DATA 74,20
0156E:  DATA 46,6C
01570:  DATA 61,73
01572:  DATA 68,20
01574:  DATA 53,4D
01576:  DATA 46,20
01578:  DATA 52,65
0157A:  DATA 61,64
0157C:  DATA 20,46
0157E:  DATA 6F,72
01580:  DATA 63,65
01582:  DATA 0D,0A
01584:  DATA 00,00
01586:  DATA 09,41
01588:  DATA 64,64
0158A:  DATA 72,65
0158C:  DATA 73,73
0158E:  DATA 20,20
01590:  DATA 3A,20
01592:  DATA 30,78
01594:  DATA 25,30
01596:  DATA 38,4C
01598:  DATA 58,0D
0159A:  DATA 0A,00
0159C:  DATA 09,50
0159E:  DATA 61,63
015A0:  DATA 6B,65
015A2:  DATA 74,4E
015A4:  DATA 75,6D
015A6:  DATA 3A,20
015A8:  DATA 30,78
015AA:  DATA 25,30
015AC:  DATA 34,4C
015AE:  DATA 58,0D
015B0:  DATA 0A,00
015B2:  DATA 72,65
015B4:  DATA 61,64
015B6:  DATA 20,64
015B8:  DATA 61,74
015BA:  DATA 61,0D
015BC:  DATA 0A,00
015BE:  DATA 53,4D
015C0:  DATA 46,20
015C2:  DATA 69,73
015C4:  DATA 20,6E
015C6:  DATA 6F,74
015C8:  DATA 20,63
015CA:  DATA 6F,6E
015CC:  DATA 6E,65
015CE:  DATA 63,74
015D0:  DATA 65,64
015D2:  DATA 0D,0A
015D4:  DATA 00,00
015D6:  DATA 0D,0A
015D8:  DATA 45,6E
015DA:  DATA 64,20
015DC:  DATA 46,6C
015DE:  DATA 61,73
015E0:  DATA 68,20
015E2:  DATA 53,4D
015E4:  DATA 46,20
015E6:  DATA 52,65
015E8:  DATA 61,64
015EA:  DATA 20,46
015EC:  DATA 6F,72
015EE:  DATA 63,65
015F0:  DATA 0D,0A
015F2:  DATA 00,00
015F4:  DATA 53,74
015F6:  DATA 61,72
015F8:  DATA 74,20
015FA:  DATA 53,4D
015FC:  DATA 46,20
015FE:  DATA 45,72
01600:  DATA 61,73
01602:  DATA 65,20
01604:  DATA 41,6C
01606:  DATA 6C,0D
01608:  DATA 0A,00
0160A:  DATA 45,6E
0160C:  DATA 64,20
0160E:  DATA 53,4D
01610:  DATA 46,20
01612:  DATA 45,72
01614:  DATA 61,73
01616:  DATA 65,20
01618:  DATA 41,6C
0161A:  DATA 6C,0D
0161C:  DATA 0A,00
0161E:  DATA 53,74
01620:  DATA 61,72
01622:  DATA 74,20
01624:  DATA 53,4D
01626:  DATA 46,20
01628:  DATA 52,65
0162A:  DATA 73,65
0162C:  DATA 74,0D
0162E:  DATA 0A,00
01630:  DATA 45,6E
01632:  DATA 64,20
01634:  DATA 53,4D
01636:  DATA 46,20
01638:  DATA 52,65
0163A:  DATA 73,65
0163C:  DATA 74,0D
0163E:  DATA 0A,00
01640:  DATA 0D,0A
01642:  DATA 0D,0A
01644:  DATA 0D,0A
01646:  DATA 3D,3D
01648:  DATA 3D,3D
0164A:  DATA 3D,3D
0164C:  DATA 3D,3D
0164E:  DATA 3D,3D
01650:  DATA 3D,3D
01652:  DATA 3D,3D
01654:  DATA 3D,3D
01656:  DATA 3D,3D
01658:  DATA 3D,3D
0165A:  DATA 3D,3D
0165C:  DATA 3D,3D
0165E:  DATA 3D,3D
01660:  DATA 3D,3D
01662:  DATA 3D,3D
01664:  DATA 3D,3D
01666:  DATA 3D,3D
01668:  DATA 3D,3D
0166A:  DATA 3D,3D
0166C:  DATA 3D,3D
0166E:  DATA 3D,3D
01670:  DATA 3D,3D
01672:  DATA 3D,3D
01674:  DATA 3D,3D
01676:  DATA 3D,3D
01678:  DATA 3D,3D
0167A:  DATA 3D,3D
0167C:  DATA 3D,3D
0167E:  DATA 3D,3D
01680:  DATA 3D,3D
01682:  DATA 0D,0A
01684:  DATA 00,00
01686:  DATA 54,68
01688:  DATA 69,73
0168A:  DATA 20,69
0168C:  DATA 73,20
0168E:  DATA 4D,4F
01690:  DATA 4D,49
01692:  DATA 4A,49
01694:  DATA 20,43
01696:  DATA 49,47
01698:  DATA 53,20
0169A:  DATA 50,49
0169C:  DATA 43,20
0169E:  DATA 42,42
016A0:  DATA 4D,20
016A2:  DATA 66,6F
016A4:  DATA 72,20
016A6:  DATA 4D,49
016A8:  DATA 53,37
016AA:  DATA 5F,42
016AC:  DATA 42,4D
016AE:  DATA 33,2E
016B0:  DATA 0D,0A
016B2:  DATA 00,00
016B4:  DATA 4C,61
016B6:  DATA 73,74
016B8:  DATA 20,75
016BA:  DATA 70,64
016BC:  DATA 61,74
016BE:  DATA 65,64
016C0:  DATA 20,6F
016C2:  DATA 6E,20
016C4:  DATA 25,73
016C6:  DATA 20,25
016C8:  DATA 73,2C
016CA:  DATA 20,62
016CC:  DATA 79,20
016CE:  DATA 49,6E
016D0:  DATA 6F,75
016D2:  DATA 65,2E
016D4:  DATA 0D,0A
016D6:  DATA 0D,0A
016D8:  DATA 00,00
016DA:  DATA 32,35
016DC:  DATA 2D,4A
016DE:  DATA 75,6C
016E0:  DATA 2D,32
016E2:  DATA 35,00
016E4:  DATA 30,30
016E6:  DATA 3A,31
016E8:  DATA 31,3A
016EA:  DATA 35,39
016EC:  DATA 00,00
016EE:  DATA 5F,5F
016F0:  DATA 5F,5F
016F2:  DATA 43,49
016F4:  DATA 47,53
016F6:  DATA 20,50
016F8:  DATA 49,43
016FA:  DATA 20,53
016FC:  DATA 74,61
016FE:  DATA 72,74
01700:  DATA 20,4F
01702:  DATA 70,65
01704:  DATA 72,61
01706:  DATA 74,69
01708:  DATA 6F,6E
0170A:  DATA 5F,5F
0170C:  DATA 5F,5F
0170E:  DATA 5F,0D
01710:  DATA 0A,0D
01712:  DATA 0A,00
01714:  DATA 77,61
01716:  DATA 69,74
01718:  DATA 69,6E
0171A:  DATA 67,20
0171C:  DATA 66,6F
0171E:  DATA 72,20
01720:  DATA 42,4F
01722:  DATA 53,53
01724:  DATA 20,50
01726:  DATA 49,43
01728:  DATA 20,63
0172A:  DATA 6F,6D
0172C:  DATA 6D,61
0172E:  DATA 6E,64
01730:  DATA 00,00
01732:  DATA 0D,0A
01734:  DATA 77,61
01736:  DATA 69,74
01738:  DATA 69,6E
0173A:  DATA 67,20
0173C:  DATA 66,6F
0173E:  DATA 72,20
01740:  DATA 42,4F
01742:  DATA 53,53
01744:  DATA 20,50
01746:  DATA 49,43
01748:  DATA 20,63
0174A:  DATA 6F,6D
0174C:  DATA 6D,61
0174E:  DATA 6E,64
01750:  DATA 00,00
01752:  DATA 0D,0A
01754:  DATA 0D,0A
01756:  DATA 3D,3D
01758:  DATA 3D,3D
0175A:  DATA 3D,3D
0175C:  DATA 0D,0A
0175E:  DATA 0D,0A
01760:  DATA 46,69
01762:  DATA 6E,69
01764:  DATA 73,68
01766:  DATA 65,64
01768:  DATA 20,70
0176A:  DATA 72,6F
0176C:  DATA 63,65
0176E:  DATA 73,73
01770:  DATA 2E,0D
01772:  DATA 0A,57
01774:  DATA 61,69
01776:  DATA 74,20
01778:  DATA 66,6F
0177A:  DATA 72,20
0177C:  DATA 42,4F
0177E:  DATA 53,53
01780:  DATA 20,50
01782:  DATA 49,43
01784:  DATA 20,74
01786:  DATA 75,72
01788:  DATA 6E,20
0178A:  DATA 6F,66
0178C:  DATA 66,20
0178E:  DATA 6D,65
01790:  DATA 00,00
01792:  DATA 45,6E
01794:  DATA 64,20
01796:  DATA 6D,61
01798:  DATA 69,6E
0179A:  DATA 0D,0A
0179C:  DATA 00,00
*
0181E:  TBLRD*+
01820:  MOVF   FF5,F
01822:  BTFSC  FD8.2
01824:  GOTO   184C
01828:  MOVFF  FF6,82C
0182C:  MOVFF  FF7,82D
01830:  MOVFF  FF8,82E
01834:  MOVFF  FF5,82F
01838:  CALL   17CC
0183C:  MOVFF  82C,FF6
01840:  MOVFF  82D,FF7
01844:  MOVFF  82E,FF8
01848:  GOTO   181E
0184C:  RETURN 0
0184E:  TBLRD*+
01850:  MOVFF  FF6,7ED
01854:  MOVFF  FF7,7EE
01858:  MOVFF  FF8,7EF
0185C:  MOVFF  FF5,82F
01860:  CALL   17CC
01864:  MOVFF  7ED,FF6
01868:  MOVFF  7EE,FF7
0186C:  MOVFF  7EF,FF8
01870:  MOVLB  7
01872:  DECFSZ xEC,F
01874:  BRA    187A
01876:  BRA    1880
01878:  MOVLB  0
0187A:  MOVLB  0
0187C:  GOTO   184E
01880:  MOVLB  0
01882:  RETURN 0
*
01A10:  MOVLB  4
01A12:  BTFSS  x28.7
01A14:  BRA    1A1C
01A16:  MOVLB  0
01A18:  GOTO   1A4C
01A1C:  MOVLW  0F
01A1E:  MOVWF  00
01A20:  SWAPF  x27,W
01A22:  ANDWF  00,F
01A24:  MOVLW  0A
01A26:  SUBWF  00,W
01A28:  BTFSS  FD8.0
01A2A:  BRA    1A32
01A2C:  MOVLB  0
01A2E:  GOTO   1A3C
01A32:  MOVLW  30
01A34:  ADDWF  00,F
01A36:  MOVLB  0
01A38:  GOTO   1A44
01A3C:  MOVLB  4
01A3E:  MOVF   x28,W
01A40:  ADDWF  00,F
01A42:  MOVLB  0
01A44:  MOVFF  00,82F
01A48:  CALL   17CC
01A4C:  MOVLW  0F
01A4E:  MOVLB  4
01A50:  ANDWF  x27,F
01A52:  MOVLW  0A
01A54:  SUBWF  x27,W
01A56:  BTFSS  FD8.0
01A58:  BRA    1A60
01A5A:  MOVLB  0
01A5C:  GOTO   1A68
01A60:  MOVLW  30
01A62:  MOVLB  0
01A64:  GOTO   1A70
01A68:  MOVLB  4
01A6A:  BCF    x28.7
01A6C:  MOVF   x28,W
01A6E:  MOVLB  0
01A70:  MOVLB  4
01A72:  ADDWF  x27,F
01A74:  MOVFF  427,82F
01A78:  MOVLB  0
01A7A:  CALL   17CC
01A7E:  RETURN 0
*
01B48:  MOVLB  8
01B4A:  MOVF   x4A,W
01B4C:  ANDLW  07
01B4E:  MOVWF  00
01B50:  RRCF   x4A,W
01B52:  MOVWF  01
01B54:  RRCF   01,F
01B56:  RRCF   01,F
01B58:  MOVLW  1F
01B5A:  ANDWF  01,F
01B5C:  MOVF   01,W
01B5E:  ADDWF  x4C,W
01B60:  MOVWF  FE9
01B62:  MOVLW  00
01B64:  ADDWFC x4D,W
01B66:  MOVWF  FEA
01B68:  CLRF   01
01B6A:  INCF   01,F
01B6C:  INCF   00,F
01B6E:  MOVLB  0
01B70:  GOTO   1B76
01B74:  RLCF   01,F
01B76:  DECFSZ 00,F
01B78:  GOTO   1B74
01B7C:  MOVLB  8
01B7E:  MOVF   x4B,F
01B80:  BTFSS  FD8.2
01B82:  BRA    1B8A
01B84:  MOVLB  0
01B86:  GOTO   1B94
01B8A:  MOVF   01,W
01B8C:  IORWF  FEF,F
01B8E:  MOVLB  0
01B90:  GOTO   1B9A
01B94:  COMF   01,F
01B96:  MOVF   01,W
01B98:  ANDWF  FEF,F
01B9A:  RETURN 0
*
03FB8:  TSTFSZ 01
03FBA:  GOTO   3FC8
03FBE:  TSTFSZ 02
03FC0:  GOTO   3FCA
03FC4:  GOTO   3FDA
03FC8:  INCF   02,F
03FCA:  MOVFF  00,FEE
03FCE:  DECFSZ 01,F
03FD0:  GOTO   3FCA
03FD4:  DECFSZ 02,F
03FD6:  GOTO   3FCA
03FDA:  RETURN 0
*
043C2:  MOVLB  7
043C4:  MOVF   xEF,W
043C6:  CLRF   01
043C8:  SUBWF  xEE,W
043CA:  BTFSS  FD8.0
043CC:  BRA    43D4
043CE:  MOVLB  0
043D0:  GOTO   43DE
043D4:  MOVF   xEE,W
043D6:  MOVWF  00
043D8:  MOVLB  0
043DA:  GOTO   4408
043DE:  CLRF   00
043E0:  MOVLW  08
043E2:  MOVLB  7
043E4:  MOVWF  xF0
043E6:  MOVLB  0
043E8:  MOVLB  7
043EA:  RLCF   xEE,F
043EC:  RLCF   00,F
043EE:  MOVF   xEF,W
043F0:  SUBWF  00,W
043F2:  BTFSC  FD8.0
043F4:  MOVWF  00
043F6:  RLCF   01,F
043F8:  DECFSZ xF0,F
043FA:  BRA    4400
043FC:  BRA    4406
043FE:  MOVLB  0
04400:  MOVLB  0
04402:  GOTO   43E8
04406:  MOVLB  0
04408:  RETURN 0
0440A:  MOVF   01,W
0440C:  MOVFF  7EC,7EE
04410:  MOVLW  64
04412:  MOVLB  7
04414:  MOVWF  xEF
04416:  MOVLB  0
04418:  CALL   43C2
0441C:  MOVFF  00,7EC
04420:  MOVF   01,W
04422:  MOVLW  30
04424:  BTFSS  FD8.2
04426:  GOTO   444A
0442A:  MOVLB  7
0442C:  BTFSC  xED.1
0442E:  BRA    4436
04430:  MOVLB  0
04432:  GOTO   445E
04436:  BTFSS  xED.3
04438:  BRA    4440
0443A:  MOVLB  0
0443C:  GOTO   445E
04440:  BTFSC  xED.4
04442:  MOVLW  20
04444:  MOVLB  0
04446:  GOTO   4454
0444A:  MOVLB  7
0444C:  BCF    xED.3
0444E:  BCF    xED.4
04450:  BSF    xED.0
04452:  MOVLB  0
04454:  ADDWF  01,F
04456:  MOVFF  01,82F
0445A:  CALL   17CC
0445E:  MOVFF  7EC,7EE
04462:  MOVLW  0A
04464:  MOVLB  7
04466:  MOVWF  xEF
04468:  MOVLB  0
0446A:  CALL   43C2
0446E:  MOVFF  00,7EC
04472:  MOVF   01,W
04474:  MOVLW  30
04476:  BTFSS  FD8.2
04478:  GOTO   4498
0447C:  MOVLB  7
0447E:  BTFSS  xED.3
04480:  BRA    4488
04482:  MOVLB  0
04484:  GOTO   44A2
04488:  BTFSC  xED.0
0448A:  BRA    4492
0448C:  MOVLB  0
0448E:  GOTO   44A2
04492:  BTFSC  xED.4
04494:  MOVLW  20
04496:  MOVLB  0
04498:  ADDWF  01,F
0449A:  MOVFF  01,82F
0449E:  CALL   17CC
044A2:  MOVLW  30
044A4:  MOVLB  7
044A6:  ADDWF  xEC,F
044A8:  MOVFF  7EC,82F
044AC:  MOVLB  0
044AE:  CALL   17CC
044B2:  RETURN 0
*
04648:  MOVFF  FEA,39E
0464C:  MOVFF  FE9,39D
04650:  MOVLB  3
04652:  SWAPF  x97,W
04654:  IORLW  F0
04656:  MOVWF  x99
04658:  ADDWF  x99,F
0465A:  ADDLW  E2
0465C:  MOVWF  x9A
0465E:  ADDLW  32
04660:  MOVWF  x9C
04662:  MOVF   x97,W
04664:  ANDLW  0F
04666:  ADDWF  x9A,F
04668:  ADDWF  x9A,F
0466A:  ADDWF  x9C,F
0466C:  ADDLW  E9
0466E:  MOVWF  x9B
04670:  ADDWF  x9B,F
04672:  ADDWF  x9B,F
04674:  SWAPF  x96,W
04676:  ANDLW  0F
04678:  ADDWF  x9B,F
0467A:  ADDWF  x9C,F
0467C:  RLCF   x9B,F
0467E:  RLCF   x9C,F
04680:  COMF   x9C,F
04682:  RLCF   x9C,F
04684:  MOVF   x96,W
04686:  ANDLW  0F
04688:  ADDWF  x9C,F
0468A:  RLCF   x99,F
0468C:  MOVLW  07
0468E:  MOVWF  x98
04690:  MOVLW  0A
04692:  MOVLB  0
04694:  MOVLB  3
04696:  DECF   x9B,F
04698:  ADDWF  x9C,F
0469A:  BTFSC  FD8.0
0469C:  BRA    46A4
0469E:  MOVLB  0
046A0:  GOTO   4694
046A4:  MOVLB  0
046A6:  MOVLB  3
046A8:  DECF   x9A,F
046AA:  ADDWF  x9B,F
046AC:  BTFSC  FD8.0
046AE:  BRA    46B6
046B0:  MOVLB  0
046B2:  GOTO   46A6
046B6:  MOVLB  0
046B8:  MOVLB  3
046BA:  DECF   x99,F
046BC:  ADDWF  x9A,F
046BE:  BTFSC  FD8.0
046C0:  BRA    46C8
046C2:  MOVLB  0
046C4:  GOTO   46B8
046C8:  MOVLB  0
046CA:  MOVLB  3
046CC:  DECF   x98,F
046CE:  ADDWF  x99,F
046D0:  BTFSC  FD8.0
046D2:  BRA    46DA
046D4:  MOVLB  0
046D6:  GOTO   46CA
046DA:  MOVLW  03
046DC:  MOVWF  FEA
046DE:  MOVLW  98
046E0:  MOVWF  FE9
046E2:  MOVLW  07
046E4:  ANDWF  x9D,W
046E6:  BCF    x9D.6
046E8:  MOVLB  0
046EA:  ADDWF  FE9,F
046EC:  MOVLW  00
046EE:  ADDWFC FEA,F
046F0:  MOVF   FE9,W
046F2:  SUBLW  9C
046F4:  BTFSS  FD8.2
046F6:  GOTO   470A
046FA:  MOVF   FEA,W
046FC:  SUBLW  03
046FE:  BTFSS  FD8.2
04700:  GOTO   470A
04704:  MOVLB  3
04706:  BSF    x9D.6
04708:  MOVLB  0
0470A:  MOVF   FEF,W
0470C:  MOVWF  00
0470E:  BTFSS  FD8.2
04710:  GOTO   473C
04714:  MOVLB  3
04716:  BTFSS  x9D.6
04718:  BRA    4720
0471A:  MOVLB  0
0471C:  GOTO   473C
04720:  BTFSS  x9D.4
04722:  BRA    472A
04724:  MOVLB  0
04726:  GOTO   4760
0472A:  BTFSS  x9D.3
0472C:  BRA    4734
0472E:  MOVLB  0
04730:  GOTO   473C
04734:  MOVLW  20
04736:  MOVLB  0
04738:  GOTO   4746
0473C:  MOVLB  3
0473E:  BSF    x9D.3
04740:  BCF    x9D.4
04742:  MOVLW  30
04744:  MOVLB  0
04746:  ADDWF  00,F
04748:  MOVFF  FEA,397
0474C:  MOVFF  FE9,396
04750:  MOVFF  00,82F
04754:  CALL   17CC
04758:  MOVFF  397,FEA
0475C:  MOVFF  396,FE9
04760:  MOVF   FEE,W
04762:  MOVLB  3
04764:  BTFSC  x9D.6
04766:  BRA    476E
04768:  MOVLB  0
0476A:  GOTO   46F0
0476E:  MOVLB  0
04770:  RETURN 0
*
07214:  MOVLW  20
07216:  MOVLB  4
07218:  BTFSS  x1C.4
0721A:  MOVLW  30
0721C:  MOVWF  x1D
0721E:  MOVFF  41B,00
07222:  BTFSC  00.7
07224:  BRA    722C
07226:  MOVLB  0
07228:  GOTO   723E
0722C:  COMF   00,F
0722E:  INCF   00,F
07230:  MOVFF  00,41B
07234:  MOVLW  2D
07236:  MOVWF  x1D
07238:  BSF    x1C.7
0723A:  BSF    x1C.0
0723C:  MOVLB  0
0723E:  MOVF   01,W
07240:  MOVFF  41B,7EE
07244:  MOVLW  64
07246:  MOVLB  7
07248:  MOVWF  xEF
0724A:  MOVLB  0
0724C:  CALL   43C2
07250:  MOVFF  00,41B
07254:  MOVLW  30
07256:  ADDWF  01,W
07258:  MOVLB  4
0725A:  MOVWF  x1E
0725C:  MOVFF  41B,7EE
07260:  MOVLW  0A
07262:  MOVLB  7
07264:  MOVWF  xEF
07266:  MOVLB  0
07268:  CALL   43C2
0726C:  MOVLW  30
0726E:  ADDWF  00,W
07270:  MOVLB  4
07272:  MOVWF  x20
07274:  MOVLW  30
07276:  ADDWF  01,W
07278:  MOVWF  x1F
0727A:  MOVFF  41D,00
0727E:  MOVLB  0
07280:  MOVLW  30
07282:  MOVLB  4
07284:  SUBWF  x1E,W
07286:  BTFSS  FD8.2
07288:  BRA    7290
0728A:  MOVLB  0
0728C:  GOTO   729C
07290:  BSF    x1C.1
07292:  BTFSC  x1C.7
07294:  BSF    x1C.2
07296:  MOVLB  0
07298:  GOTO   72DC
0729C:  MOVFF  41D,41E
072A0:  MOVLW  20
072A2:  MOVLB  4
072A4:  MOVWF  x1D
072A6:  MOVLW  30
072A8:  SUBWF  x1F,W
072AA:  BTFSS  FD8.2
072AC:  BRA    72B4
072AE:  MOVLB  0
072B0:  GOTO   72C0
072B4:  BSF    x1C.0
072B6:  BTFSC  x1C.7
072B8:  BSF    x1C.1
072BA:  MOVLB  0
072BC:  GOTO   72DC
072C0:  BTFSC  FD8.2
072C2:  BRA    72CA
072C4:  MOVLB  4
072C6:  BSF    x1C.0
072C8:  MOVLB  0
072CA:  BTFSS  FD8.2
072CC:  GOTO   72DC
072D0:  MOVFF  41E,41F
072D4:  MOVLW  20
072D6:  MOVLB  4
072D8:  MOVWF  x1E
072DA:  MOVLB  0
072DC:  MOVLB  4
072DE:  BTFSS  x1C.2
072E0:  BRA    72E8
072E2:  MOVLB  0
072E4:  GOTO   7302
072E8:  BTFSS  x1C.1
072EA:  BRA    72F2
072EC:  MOVLB  0
072EE:  GOTO   730A
072F2:  BTFSS  x1C.0
072F4:  BRA    72FC
072F6:  MOVLB  0
072F8:  GOTO   7312
072FC:  MOVLB  0
072FE:  GOTO   731A
07302:  MOVFF  41D,82F
07306:  CALL   17CC
0730A:  MOVFF  41E,82F
0730E:  CALL   17CC
07312:  MOVFF  41F,82F
07316:  CALL   17CC
0731A:  MOVFF  420,82F
0731E:  CALL   17CC
07322:  RETURN 0
*
0741C:  BTFSC  FD8.1
0741E:  GOTO   742A
07422:  MOVLW  04
07424:  MOVWF  FEA
07426:  MOVLW  2B
07428:  MOVWF  FE9
0742A:  CLRF   00
0742C:  CLRF   01
0742E:  CLRF   02
07430:  CLRF   03
07432:  MOVLB  4
07434:  CLRF   x2B
07436:  CLRF   x2C
07438:  CLRF   x2D
0743A:  CLRF   x2E
0743C:  MOVF   x2A,W
0743E:  IORWF  x29,W
07440:  IORWF  x28,W
07442:  IORWF  x27,W
07444:  BTFSS  FD8.2
07446:  BRA    744E
07448:  MOVLB  0
0744A:  GOTO   74DE
0744E:  MOVLB  0
07450:  MOVLW  20
07452:  MOVLB  4
07454:  MOVWF  x2F
07456:  MOVLB  0
07458:  BCF    FD8.0
0745A:  MOVLB  4
0745C:  RLCF   x23,F
0745E:  RLCF   x24,F
07460:  RLCF   x25,F
07462:  RLCF   x26,F
07464:  RLCF   x2B,F
07466:  RLCF   x2C,F
07468:  RLCF   x2D,F
0746A:  RLCF   x2E,F
0746C:  MOVF   x2A,W
0746E:  SUBWF  x2E,W
07470:  BTFSC  FD8.2
07472:  BRA    747A
07474:  MOVLB  0
07476:  GOTO   749C
0747A:  MOVF   x29,W
0747C:  SUBWF  x2D,W
0747E:  BTFSC  FD8.2
07480:  BRA    7488
07482:  MOVLB  0
07484:  GOTO   749C
07488:  MOVF   x28,W
0748A:  SUBWF  x2C,W
0748C:  BTFSC  FD8.2
0748E:  BRA    7496
07490:  MOVLB  0
07492:  GOTO   749C
07496:  MOVF   x27,W
07498:  SUBWF  x2B,W
0749A:  MOVLB  0
0749C:  BTFSS  FD8.0
0749E:  GOTO   74C4
074A2:  MOVLB  4
074A4:  MOVF   x27,W
074A6:  SUBWF  x2B,F
074A8:  MOVF   x28,W
074AA:  BTFSS  FD8.0
074AC:  INCFSZ x28,W
074AE:  SUBWF  x2C,F
074B0:  MOVF   x29,W
074B2:  BTFSS  FD8.0
074B4:  INCFSZ x29,W
074B6:  SUBWF  x2D,F
074B8:  MOVF   x2A,W
074BA:  BTFSS  FD8.0
074BC:  INCFSZ x2A,W
074BE:  SUBWF  x2E,F
074C0:  BSF    FD8.0
074C2:  MOVLB  0
074C4:  RLCF   00,F
074C6:  RLCF   01,F
074C8:  RLCF   02,F
074CA:  RLCF   03,F
074CC:  MOVLB  4
074CE:  DECFSZ x2F,F
074D0:  BRA    74D6
074D2:  BRA    74DC
074D4:  MOVLB  0
074D6:  MOVLB  0
074D8:  GOTO   7458
074DC:  MOVLB  0
074DE:  MOVFF  42B,FEF
074E2:  MOVFF  42C,FEC
074E6:  MOVFF  42D,FEC
074EA:  MOVFF  42E,FEC
074EE:  MOVF   FED,F
074F0:  MOVF   FED,F
074F2:  MOVF   FED,F
074F4:  RETURN 0
074F6:  MOVF   FE9,W
074F8:  MOVLB  4
074FA:  MOVWF  x1B
074FC:  MOVLW  3B
074FE:  MOVWF  x22
07500:  MOVLW  9A
07502:  MOVWF  x21
07504:  MOVLW  CA
07506:  MOVWF  x20
07508:  CLRF   x1F
0750A:  MOVLW  0A
0750C:  MOVWF  x1D
0750E:  MOVLB  0
07510:  BSF    FD8.1
07512:  MOVLW  04
07514:  MOVWF  FEA
07516:  MOVLW  17
07518:  MOVWF  FE9
0751A:  MOVFF  41A,426
0751E:  MOVFF  419,425
07522:  MOVFF  418,424
07526:  MOVFF  417,423
0752A:  MOVFF  422,42A
0752E:  MOVFF  421,429
07532:  MOVFF  420,428
07536:  MOVFF  41F,427
0753A:  CALL   741C
0753E:  MOVF   01,W
07540:  MOVF   00,F
07542:  BTFSS  FD8.2
07544:  GOTO   759C
07548:  MOVLB  4
0754A:  MOVF   x1D,W
0754C:  XORLW  01
0754E:  BTFSS  FD8.2
07550:  BRA    7558
07552:  MOVLB  0
07554:  GOTO   759C
07558:  MOVF   x1B,W
0755A:  BTFSS  FD8.2
0755C:  BRA    7564
0755E:  MOVLB  0
07560:  GOTO   75A2
07564:  ANDLW  0F
07566:  SUBWF  x1D,W
07568:  BTFSS  FD8.2
0756A:  BRA    7572
0756C:  MOVLB  0
0756E:  GOTO   757E
07572:  BTFSS  FD8.0
07574:  BRA    757C
07576:  MOVLB  0
07578:  GOTO   75AE
0757C:  MOVLB  0
0757E:  MOVLB  4
07580:  BTFSS  x1B.7
07582:  BRA    758A
07584:  MOVLB  0
07586:  GOTO   75AE
0758A:  BTFSS  x1B.6
0758C:  BRA    7594
0758E:  MOVLB  0
07590:  GOTO   75A2
07594:  MOVLW  20
07596:  MOVLB  0
07598:  GOTO   75A4
0759C:  MOVLB  4
0759E:  CLRF   x1B
075A0:  MOVLB  0
075A2:  MOVLW  30
075A4:  ADDWF  00,F
075A6:  MOVFF  00,82F
075AA:  CALL   17CC
075AE:  BCF    FD8.1
075B0:  MOVFF  422,426
075B4:  MOVFF  421,425
075B8:  MOVFF  420,424
075BC:  MOVFF  41F,423
075C0:  MOVLB  4
075C2:  CLRF   x2A
075C4:  CLRF   x29
075C6:  CLRF   x28
075C8:  MOVLW  0A
075CA:  MOVWF  x27
075CC:  MOVLB  0
075CE:  CALL   741C
075D2:  MOVFF  03,422
075D6:  MOVFF  02,421
075DA:  MOVFF  01,420
075DE:  MOVFF  00,41F
075E2:  MOVLB  4
075E4:  DECFSZ x1D,F
075E6:  BRA    75EC
075E8:  BRA    75F2
075EA:  MOVLB  0
075EC:  MOVLB  0
075EE:  GOTO   7510
075F2:  MOVLB  0
075F4:  RETURN 0
*
07B80:  MOVF   FE9,W
07B82:  MOVLB  4
07B84:  MOVWF  x1B
07B86:  BTFSC  x1A.7
07B88:  BRA    7B90
07B8A:  MOVLB  0
07B8C:  GOTO   7BAC
07B90:  DECF   x1B,F
07B92:  BSF    x1B.5
07B94:  COMF   x17,F
07B96:  COMF   x18,F
07B98:  COMF   x19,F
07B9A:  COMF   x1A,F
07B9C:  INCF   x17,F
07B9E:  BTFSC  FD8.2
07BA0:  INCF   x18,F
07BA2:  BTFSC  FD8.2
07BA4:  INCF   x19,F
07BA6:  BTFSC  FD8.2
07BA8:  INCF   x1A,F
07BAA:  MOVLB  0
07BAC:  MOVLW  3B
07BAE:  MOVLB  4
07BB0:  MOVWF  x22
07BB2:  MOVLW  9A
07BB4:  MOVWF  x21
07BB6:  MOVLW  CA
07BB8:  MOVWF  x20
07BBA:  CLRF   x1F
07BBC:  MOVLW  0A
07BBE:  MOVWF  x1D
07BC0:  MOVLB  0
07BC2:  BSF    FD8.1
07BC4:  MOVLW  04
07BC6:  MOVWF  FEA
07BC8:  MOVLW  17
07BCA:  MOVWF  FE9
07BCC:  MOVFF  41A,426
07BD0:  MOVFF  419,425
07BD4:  MOVFF  418,424
07BD8:  MOVFF  417,423
07BDC:  MOVFF  422,42A
07BE0:  MOVFF  421,429
07BE4:  MOVFF  420,428
07BE8:  MOVFF  41F,427
07BEC:  CALL   741C
07BF0:  MOVF   01,W
07BF2:  MOVF   00,F
07BF4:  BTFSS  FD8.2
07BF6:  GOTO   7C4E
07BFA:  MOVLB  4
07BFC:  MOVF   x1D,W
07BFE:  XORLW  01
07C00:  BTFSS  FD8.2
07C02:  BRA    7C0A
07C04:  MOVLB  0
07C06:  GOTO   7C4E
07C0A:  MOVF   x1B,W
07C0C:  BTFSS  FD8.2
07C0E:  BRA    7C16
07C10:  MOVLB  0
07C12:  GOTO   7C56
07C16:  ANDLW  0F
07C18:  SUBWF  x1D,W
07C1A:  BTFSS  FD8.2
07C1C:  BRA    7C24
07C1E:  MOVLB  0
07C20:  GOTO   7C30
07C24:  BTFSS  FD8.0
07C26:  BRA    7C2E
07C28:  MOVLB  0
07C2A:  GOTO   7CB4
07C2E:  MOVLB  0
07C30:  MOVLB  4
07C32:  BTFSS  x1B.7
07C34:  BRA    7C3C
07C36:  MOVLB  0
07C38:  GOTO   7CB4
07C3C:  BTFSS  x1B.6
07C3E:  BRA    7C46
07C40:  MOVLB  0
07C42:  GOTO   7C56
07C46:  MOVLW  20
07C48:  MOVLB  0
07C4A:  GOTO   7CAA
07C4E:  MOVLW  20
07C50:  MOVLB  4
07C52:  ANDWF  x1B,F
07C54:  MOVLB  0
07C56:  MOVLB  4
07C58:  BTFSC  x1B.5
07C5A:  BRA    7C62
07C5C:  MOVLB  0
07C5E:  GOTO   7C7E
07C62:  BCF    x1B.5
07C64:  MOVF   00,W
07C66:  MOVWF  x1B
07C68:  MOVLW  2D
07C6A:  MOVLB  8
07C6C:  MOVWF  x2F
07C6E:  MOVLB  0
07C70:  CALL   17CC
07C74:  MOVLB  4
07C76:  MOVF   x1B,W
07C78:  MOVWF  00
07C7A:  CLRF   x1B
07C7C:  MOVLB  0
07C7E:  MOVLW  30
07C80:  MOVLB  4
07C82:  BTFSC  x1B.5
07C84:  BRA    7C8C
07C86:  MOVLB  0
07C88:  GOTO   7CAA
07C8C:  BCF    x1B.5
07C8E:  MOVF   00,W
07C90:  MOVWF  x1B
07C92:  MOVLW  2D
07C94:  MOVLB  8
07C96:  MOVWF  x2F
07C98:  MOVLB  0
07C9A:  CALL   17CC
07C9E:  MOVLB  4
07CA0:  MOVF   x1B,W
07CA2:  MOVWF  00
07CA4:  CLRF   x1B
07CA6:  MOVLW  30
07CA8:  MOVLB  0
07CAA:  ADDWF  00,F
07CAC:  MOVFF  00,82F
07CB0:  CALL   17CC
07CB4:  BCF    FD8.1
07CB6:  MOVFF  422,426
07CBA:  MOVFF  421,425
07CBE:  MOVFF  420,424
07CC2:  MOVFF  41F,423
07CC6:  MOVLB  4
07CC8:  CLRF   x2A
07CCA:  CLRF   x29
07CCC:  CLRF   x28
07CCE:  MOVLW  0A
07CD0:  MOVWF  x27
07CD2:  MOVLB  0
07CD4:  CALL   741C
07CD8:  MOVFF  03,422
07CDC:  MOVFF  02,421
07CE0:  MOVFF  01,420
07CE4:  MOVFF  00,41F
07CE8:  MOVLB  4
07CEA:  DECFSZ x1D,F
07CEC:  BRA    7CF2
07CEE:  BRA    7CF8
07CF0:  MOVLB  0
07CF2:  MOVLB  0
07CF4:  GOTO   7BC2
07CF8:  MOVLB  0
07CFA:  GOTO   8A84 (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
0179E:  MOVLW  08
017A0:  MOVWF  FEA
017A2:  MOVLW  44
017A4:  MOVWF  FE9
017A6:  MOVF   FEF,W
017A8:  BTFSC  FD8.2
017AA:  GOTO   17CA
017AE:  MOVLW  05
017B0:  MOVWF  01
017B2:  CLRF   00
017B4:  DECFSZ 00,F
017B6:  BRA    17B4
017B8:  DECFSZ 01,F
017BA:  BRA    17B2
017BC:  MOVLW  2E
017BE:  MOVWF  00
017C0:  DECFSZ 00,F
017C2:  BRA    17C0
017C4:  BRA    17C6
017C6:  DECFSZ FEF,F
017C8:  BRA    17AE
017CA:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
0401A:  BTFSS  FA6.4
0401C:  GOTO   401A
04020:  MOVLB  F
04022:  MOVWF  x29
04024:  MOVLB  0
04026:  GOTO   405C (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
017CC:  BCF    F93.6
017CE:  BCF    F8A.6
017D0:  MOVLW  08
017D2:  MOVWF  01
017D4:  BRA    17D6
017D6:  NOP   
017D8:  BSF    01.7
017DA:  GOTO   1802
017DE:  BCF    01.7
017E0:  MOVLB  8
017E2:  RRCF   x2F,F
017E4:  MOVLB  0
017E6:  BTFSC  FD8.0
017E8:  BSF    F8A.6
017EA:  BTFSS  FD8.0
017EC:  BCF    F8A.6
017EE:  BSF    01.6
017F0:  GOTO   1802
017F4:  BCF    01.6
017F6:  DECFSZ 01,F
017F8:  GOTO   17E0
017FC:  BRA    17FE
017FE:  NOP   
01800:  BSF    F8A.6
01802:  MOVLW  84
01804:  MOVWF  FE9
01806:  DECFSZ FE9,F
01808:  GOTO   1806
0180C:  BRA    180E
0180E:  NOP   
01810:  BTFSC  01.7
01812:  GOTO   17DE
01816:  BTFSC  01.6
01818:  GOTO   17F4
0181C:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     // #define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01B9C:  MOVLB  8
01B9E:  MOVF   x67,W
01BA0:  SUBLW  08
01BA2:  BTFSS  FD8.2
01BA4:  BRA    1BAC
01BA6:  MOVLB  0
01BA8:  GOTO   1BC4
01BAC:  MOVWF  x69
01BAE:  MOVLB  0
01BB0:  MOVLB  8
01BB2:  RLCF   x66,F
01BB4:  DECFSZ x69,F
01BB6:  BRA    1BBC
01BB8:  BRA    1BC2
01BBA:  MOVLB  0
01BBC:  MOVLB  0
01BBE:  GOTO   1BB0
01BC2:  MOVLB  0
01BC4:  BSF    F92.1
01BC6:  BCF    F92.0
01BC8:  BCF    F92.3
01BCA:  BCF    F89.3
01BCC:  MOVFF  867,869
01BD0:  MOVLB  8
01BD2:  BTFSS  x66.7
01BD4:  BCF    F89.0
01BD6:  BTFSC  x66.7
01BD8:  BSF    F89.0
01BDA:  RLCF   x66,F
01BDC:  BSF    F89.3
01BDE:  MOVLW  02
01BE0:  MOVWF  x6A
01BE2:  MOVLB  0
01BE4:  MOVLB  8
01BE6:  DECFSZ x6A,F
01BE8:  BRA    1BEE
01BEA:  BRA    1BF4
01BEC:  MOVLB  0
01BEE:  MOVLB  0
01BF0:  GOTO   1BE4
01BF4:  RLCF   01,F
01BF6:  BTFSS  F80.1
01BF8:  BCF    01.0
01BFA:  BTFSC  F80.1
01BFC:  BSF    01.0
01BFE:  BCF    F89.3
01C00:  MOVLB  0
01C02:  BRA    1C04
01C04:  MOVLB  8
01C06:  DECFSZ x69,F
01C08:  BRA    1C0E
01C0A:  BRA    1C14
01C0C:  MOVLB  0
01C0E:  MOVLB  0
01C10:  GOTO   1BD0
01C14:  MOVLB  0
01C16:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
07D8E:  MOVLW  00
07D90:  BTFSC  FEF.0
07D92:  MOVLW  01
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
0191E:  MOVLB  7
01920:  MOVF   xF7,W
01922:  SUBLW  10
01924:  BTFSS  FD8.2
01926:  BRA    192E
01928:  MOVLB  0
0192A:  GOTO   1948
0192E:  MOVWF  xF9
01930:  MOVLB  0
01932:  MOVLB  7
01934:  RLCF   xF5,F
01936:  RLCF   xF6,F
01938:  DECFSZ xF9,F
0193A:  BRA    1940
0193C:  BRA    1946
0193E:  MOVLB  0
01940:  MOVLB  0
01942:  GOTO   1932
01946:  MOVLB  0
01948:  BSF    F93.4
0194A:  BCF    F93.5
0194C:  BCF    F93.2
0194E:  BCF    F8A.2
01950:  MOVFF  7F7,7F9
01954:  MOVLB  7
01956:  BTFSS  xF6.7
01958:  BCF    F8A.5
0195A:  BTFSC  xF6.7
0195C:  BSF    F8A.5
0195E:  RLCF   xF5,F
01960:  RLCF   xF6,F
01962:  BSF    F8A.2
01964:  RLCF   01,F
01966:  RLCF   02,F
01968:  BTFSS  F81.4
0196A:  BCF    01.0
0196C:  BTFSC  F81.4
0196E:  BSF    01.0
01970:  BCF    F8A.2
01972:  DECFSZ xF9,F
01974:  BRA    197A
01976:  BRA    1980
01978:  MOVLB  0
0197A:  MOVLB  0
0197C:  GOTO   1954
01980:  MOVLB  0
01982:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... 
.................... void smf_write(void);
.................... 
.................... 
.................... void smf_read(void);
.................... 
.................... 
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02C12:  MOVFF  20,00
02C16:  MOVFF  21,01
02C1A:  MOVFF  22,02
02C1E:  MOVFF  23,03
02C22:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,86F
00160:  MOVFF  FE9,86E
00164:  GOTO   010A
00168:  MOVFF  86F,FEA
0016C:  MOVFF  86E,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01884:  MOVLW  7A
01886:  MOVWF  FF6
01888:  MOVLW  01
0188A:  MOVWF  FF7
0188C:  MOVLW  00
0188E:  MOVWF  FF8
01890:  CALL   181E
....................    enable_interrupts(INT_RDA3);
01894:  BSF    F61.5
....................    enable_interrupts(global);
01896:  MOVLW  C0
01898:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
0189A:  MOVLW  8C
0189C:  MOVWF  FF6
0189E:  MOVLW  01
018A0:  MOVWF  FF7
018A2:  MOVLW  00
018A4:  MOVWF  FF8
018A6:  CALL   181E
018AA:  GOTO   93D2 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
03FDC:  MOVFF  385,03
03FE0:  MOVLB  3
03FE2:  MOVF   x84,W
03FE4:  MOVWF  FE9
03FE6:  MOVFF  03,FEA
03FEA:  MOVFF  FEF,386
03FEE:  MOVFF  383,FEA
03FF2:  MOVFF  382,FE9
03FF6:  CLRF   00
03FF8:  CLRF   02
03FFA:  MOVFF  386,01
03FFE:  MOVLB  0
04000:  CALL   3FB8
....................    *receive_signal_size = 0;
04004:  MOVFF  385,03
04008:  MOVLB  3
0400A:  MOVF   x84,W
0400C:  MOVWF  FE9
0400E:  MOVFF  03,FEA
04012:  CLRF   FEF
04014:  MOVLB  0
04016:  GOTO   946C (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     // #define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01A80:  MOVLW  98
01A82:  MOVWF  FF6
01A84:  MOVLW  01
01A86:  MOVWF  FF7
01A88:  MOVLW  00
01A8A:  MOVWF  FF8
01A8C:  CALL   181E
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
01A90:  BCF    F93.1
01A92:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
01A94:  MOVLW  0A
01A96:  MOVLB  8
01A98:  MOVWF  x44
01A9A:  MOVLB  0
01A9C:  CALL   179E
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
01AA0:  MOVLW  0D
01AA2:  MOVLB  7
01AA4:  MOVWF  xEE
01AA6:  MOVLB  0
01AA8:  CALL   1984
01AAC:  MOVFF  02,383
01AB0:  MOVFF  01,382
....................     fprintf(PC, "%04LX\r\n", readdata);
01AB4:  MOVFF  383,427
01AB8:  MOVLW  37
01ABA:  MOVLB  4
01ABC:  MOVWF  x28
01ABE:  MOVLB  0
01AC0:  CALL   1A10
01AC4:  MOVFF  382,427
01AC8:  MOVLW  37
01ACA:  MOVLB  4
01ACC:  MOVWF  x28
01ACE:  MOVLB  0
01AD0:  CALL   1A10
01AD4:  MOVLW  0D
01AD6:  MOVLB  8
01AD8:  MOVWF  x2F
01ADA:  MOVLB  0
01ADC:  CALL   17CC
01AE0:  MOVLW  0A
01AE2:  MOVLB  8
01AE4:  MOVWF  x2F
01AE6:  MOVLB  0
01AE8:  CALL   17CC
....................     if (readdata == 0xFFFF) {
01AEC:  MOVLB  3
01AEE:  INCFSZ x82,W
01AF0:  BRA    1AF6
01AF2:  BRA    1AFC
01AF4:  MOVLB  0
01AF6:  MOVLB  0
01AF8:  GOTO   1B24
01AFC:  MOVLB  0
01AFE:  MOVLB  3
01B00:  INCFSZ x83,W
01B02:  BRA    1B08
01B04:  BRA    1B0E
01B06:  MOVLB  0
01B08:  MOVLB  0
01B0A:  GOTO   1B24
01B0E:  MOVLB  0
....................         fprintf(PC, "\t[ADC] Connect error!\r\n");
01B10:  MOVLW  AC
01B12:  MOVWF  FF6
01B14:  MOVLW  01
01B16:  MOVWF  FF7
01B18:  MOVLW  00
01B1A:  MOVWF  FF8
01B1C:  CALL   181E
....................     } else {
01B20:  GOTO   1B34
....................         fprintf(PC, "\t[ADC] Connect successful\r\n");
01B24:  MOVLW  C4
01B26:  MOVWF  FF6
01B28:  MOVLW  01
01B2A:  MOVWF  FF7
01B2C:  MOVLW  00
01B2E:  MOVWF  FF8
01B30:  CALL   181E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
01B34:  MOVLW  E0
01B36:  MOVWF  FF6
01B38:  MOVLW  01
01B3A:  MOVWF  FF7
01B3C:  MOVLW  00
01B3E:  MOVWF  FF8
01B40:  CALL   181E
01B44:  GOTO   93D6 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
01984:  MOVFF  7EE,7F5
01988:  GOTO   18AE
0198C:  MOVFF  02,7F0
01990:  MOVFF  01,7EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
01994:  BCF    F93.1
01996:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01998:  MOVLW  0D
0199A:  MOVWF  00
0199C:  DECFSZ 00,F
0199E:  BRA    199C
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
019A0:  MOVFF  7F0,7F6
019A4:  MOVFF  7EF,7F5
019A8:  MOVLW  10
019AA:  MOVLB  7
019AC:  MOVWF  xF7
019AE:  MOVLW  01
019B0:  MOVWF  xF8
019B2:  MOVLB  0
019B4:  CALL   191E
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
019B8:  MOVLW  0D
019BA:  MOVWF  00
019BC:  DECFSZ 00,F
019BE:  BRA    19BC
....................     output_high(ADC_CS); // Set CS pin high to end communication
019C0:  BCF    F93.1
019C2:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
019C4:  MOVLW  0D
019C6:  MOVWF  00
019C8:  DECFSZ 00,F
019CA:  BRA    19C8
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
019CC:  BCF    F93.1
019CE:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
019D0:  MOVLW  0D
019D2:  MOVWF  00
019D4:  DECFSZ 00,F
019D6:  BRA    19D4
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
019D8:  MOVLB  7
019DA:  CLRF   xF6
019DC:  CLRF   xF5
019DE:  MOVLW  10
019E0:  MOVWF  xF7
019E2:  MOVLW  01
019E4:  MOVWF  xF8
019E6:  MOVLB  0
019E8:  CALL   191E
019EC:  MOVFF  02,7F2
019F0:  MOVFF  01,7F1
....................     output_high(ADC_CS); 
019F4:  BCF    F93.1
019F6:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
019F8:  MOVLB  7
019FA:  MOVF   xF1,W
019FC:  MOVWF  xF3
019FE:  MOVF   xF2,W
01A00:  ANDLW  0F
01A02:  MOVWF  xF4
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01A04:  MOVF   xF3,W
01A06:  MOVWF  01
01A08:  MOVF   xF4,W
01A0A:  MOVWF  02
01A0C:  MOVLB  0
01A0E:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     // #define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); // Set CS pin high to deselect the DAC
....................     output_high(DAC2_CS); // Set CS pin high to deselect the second DAC
....................     delay_ms(10); // Wait for the DAC to stabilize
....................     mcp4901_1_write(0); // Initialize DAC 1 to 0
....................     mcp4901_2_write(0); // Initialize DAC 2 to 0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); // Read a dummy value to initialize the DAC
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); // Read a dummy value to initialize the second DAC
....................     if (readdata == 0xFFFF) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
0460A:  MOVFF  7ED,7F1
0460E:  MOVFF  7EC,7F0
04612:  GOTO   44B4
04616:  MOVFF  02,7EF
0461A:  MOVFF  01,7EE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
0461E:  BCF    F93.3
04620:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
04622:  MOVLW  85
04624:  MOVWF  00
04626:  DECFSZ 00,F
04628:  BRA    4626
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
0462A:  MOVFF  7EF,7F6
0462E:  MOVFF  7EE,7F5
04632:  MOVLW  10
04634:  MOVLB  7
04636:  MOVWF  xF7
04638:  MOVLW  01
0463A:  MOVWF  xF8
0463C:  MOVLB  0
0463E:  CALL   191E
....................    output_high(DAC1_CS); // Deselect MCP4901
04642:  BCF    F93.3
04644:  BSF    F8A.3
04646:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
....................    delay_us(100); // Ensure CS is stable before sending data
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
....................    output_high(DAC2_CS); // Deselect MCP4901
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
018AE:  MOVLB  7
018B0:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
018B2:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
018B4:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
018B6:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
018B8:  BSF    xF6.4
....................     cmd.fields.range = 1; // Normal mode
018BA:  BSF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
018BC:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
018BE:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
018C0:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
018C2:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
018C4:  MOVF   xF5,W
018C6:  ANDLW  01
018C8:  MOVWF  01
018CA:  BCF    xF7.2
018CC:  BTFSC  01.0
018CE:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
018D0:  BCF    FD8.0
018D2:  RRCF   xF5,W
018D4:  ANDLW  01
018D6:  MOVWF  01
018D8:  BCF    xF7.3
018DA:  BTFSC  01.0
018DC:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
018DE:  RRCF   xF5,W
018E0:  MOVWF  00
018E2:  RRCF   00,F
018E4:  MOVLW  3F
018E6:  ANDWF  00,F
018E8:  MOVF   00,W
018EA:  ANDLW  01
018EC:  MOVWF  01
018EE:  BCF    xF7.4
018F0:  BTFSC  01.0
018F2:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
018F4:  RRCF   xF5,W
018F6:  MOVWF  00
018F8:  RRCF   00,F
018FA:  RRCF   00,F
018FC:  MOVLW  1F
018FE:  ANDWF  00,F
01900:  MOVF   00,W
01902:  ANDLW  01
01904:  MOVWF  01
01906:  BCF    xF7.5
01908:  BTFSC  01.0
0190A:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
0190C:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
0190E:  BSF    xF7.7
.................... 
.................... 
....................     return cmd.value;
01910:  MOVF   xF6,W
01912:  MOVWF  01
01914:  MOVF   xF7,W
01916:  MOVWF  02
01918:  MOVLB  0
0191A:  GOTO   198C (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
044B4:  MOVLB  7
044B6:  BCF    xF3.7
....................    cmd.fields.buffer = 1; // Buffer used
044B8:  BSF    xF3.6
....................    cmd.fields.gain = 1; // Gain 1x
044BA:  BSF    xF3.5
....................    cmd.fields.shutdown = 1; // Normal operation
044BC:  BSF    xF3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
044BE:  RRCF   xF1,W
044C0:  MOVWF  xF5
044C2:  RRCF   xF0,W
044C4:  MOVWF  xF4
044C6:  RRCF   xF5,F
044C8:  RRCF   xF4,F
044CA:  RRCF   xF5,F
044CC:  RRCF   xF4,F
044CE:  RRCF   xF5,F
044D0:  RRCF   xF4,F
044D2:  RRCF   xF5,F
044D4:  RRCF   xF4,F
044D6:  RRCF   xF5,F
044D8:  RRCF   xF4,F
044DA:  RRCF   xF5,F
044DC:  RRCF   xF4,F
044DE:  MOVLW  01
044E0:  ANDWF  xF5,F
044E2:  MOVF   xF4,W
044E4:  ANDLW  01
044E6:  MOVWF  00
044E8:  CLRF   03
044EA:  MOVF   00,W
044EC:  MOVWF  01
044EE:  BCF    xF3.3
044F0:  BTFSC  01.0
044F2:  BSF    xF3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
044F4:  RRCF   xF1,W
044F6:  MOVWF  xF5
044F8:  RRCF   xF0,W
044FA:  MOVWF  xF4
044FC:  RRCF   xF5,F
044FE:  RRCF   xF4,F
04500:  RRCF   xF5,F
04502:  RRCF   xF4,F
04504:  RRCF   xF5,F
04506:  RRCF   xF4,F
04508:  RRCF   xF5,F
0450A:  RRCF   xF4,F
0450C:  RRCF   xF5,F
0450E:  RRCF   xF4,F
04510:  MOVLW  03
04512:  ANDWF  xF5,F
04514:  MOVF   xF4,W
04516:  ANDLW  01
04518:  MOVWF  00
0451A:  CLRF   03
0451C:  MOVF   00,W
0451E:  MOVWF  01
04520:  BCF    xF3.2
04522:  BTFSC  01.0
04524:  BSF    xF3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
04526:  RRCF   xF1,W
04528:  MOVWF  xF5
0452A:  RRCF   xF0,W
0452C:  MOVWF  xF4
0452E:  RRCF   xF5,F
04530:  RRCF   xF4,F
04532:  RRCF   xF5,F
04534:  RRCF   xF4,F
04536:  RRCF   xF5,F
04538:  RRCF   xF4,F
0453A:  RRCF   xF5,F
0453C:  RRCF   xF4,F
0453E:  MOVLW  07
04540:  ANDWF  xF5,F
04542:  MOVF   xF4,W
04544:  ANDLW  01
04546:  MOVWF  00
04548:  CLRF   03
0454A:  MOVF   00,W
0454C:  MOVWF  01
0454E:  BCF    xF3.1
04550:  BTFSC  01.0
04552:  BSF    xF3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
04554:  RRCF   xF1,W
04556:  MOVWF  xF5
04558:  RRCF   xF0,W
0455A:  MOVWF  xF4
0455C:  RRCF   xF5,F
0455E:  RRCF   xF4,F
04560:  RRCF   xF5,F
04562:  RRCF   xF4,F
04564:  RRCF   xF5,F
04566:  RRCF   xF4,F
04568:  MOVLW  0F
0456A:  ANDWF  xF5,F
0456C:  MOVF   xF4,W
0456E:  ANDLW  01
04570:  MOVWF  00
04572:  CLRF   03
04574:  MOVF   00,W
04576:  MOVWF  01
04578:  BCF    xF3.0
0457A:  BTFSC  01.0
0457C:  BSF    xF3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
0457E:  RRCF   xF1,W
04580:  MOVWF  xF5
04582:  RRCF   xF0,W
04584:  MOVWF  xF4
04586:  RRCF   xF5,F
04588:  RRCF   xF4,F
0458A:  RRCF   xF5,F
0458C:  RRCF   xF4,F
0458E:  MOVLW  1F
04590:  ANDWF  xF5,F
04592:  MOVF   xF4,W
04594:  ANDLW  01
04596:  MOVWF  00
04598:  CLRF   03
0459A:  MOVF   00,W
0459C:  MOVWF  01
0459E:  BCF    xF2.7
045A0:  BTFSC  01.0
045A2:  BSF    xF2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
045A4:  RRCF   xF1,W
045A6:  MOVWF  xF5
045A8:  RRCF   xF0,W
045AA:  MOVWF  xF4
045AC:  RRCF   xF5,F
045AE:  RRCF   xF4,F
045B0:  MOVLW  3F
045B2:  ANDWF  xF5,F
045B4:  MOVF   xF4,W
045B6:  ANDLW  01
045B8:  MOVWF  00
045BA:  CLRF   03
045BC:  MOVF   00,W
045BE:  MOVWF  01
045C0:  BCF    xF2.6
045C2:  BTFSC  01.0
045C4:  BSF    xF2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
045C6:  BCF    FD8.0
045C8:  RRCF   xF1,W
045CA:  MOVWF  xF5
045CC:  RRCF   xF0,W
045CE:  MOVWF  xF4
045D0:  MOVF   xF4,W
045D2:  ANDLW  01
045D4:  MOVWF  00
045D6:  CLRF   03
045D8:  MOVF   00,W
045DA:  MOVWF  01
045DC:  BCF    xF2.5
045DE:  BTFSC  01.0
045E0:  BSF    xF2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
045E2:  MOVF   xF0,W
045E4:  ANDLW  01
045E6:  MOVWF  00
045E8:  CLRF   03
045EA:  MOVF   00,W
045EC:  MOVWF  01
045EE:  BCF    xF2.4
045F0:  BTFSC  01.0
045F2:  BSF    xF2.4
....................    cmd.fields.reserved = 0; // Reserved bits
045F4:  BCF    xF2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
045F6:  BCF    xF2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
045F8:  BCF    xF2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
045FA:  BCF    xF2.0
.................... 
....................    return cmd.value;
045FC:  MOVF   xF2,W
045FE:  MOVWF  01
04600:  MOVF   xF3,W
04602:  MOVWF  02
04604:  MOVLB  0
04606:  GOTO   4616 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02C24:  MOVLB  8
02C26:  MOVF   x44,W
02C28:  XORLW  00
02C2A:  MOVLB  0
02C2C:  BTFSC  FD8.2
02C2E:  GOTO   2C3E
02C32:  XORLW  01
02C34:  BTFSC  FD8.2
02C36:  GOTO   2CA6
02C3A:  GOTO   2D0E
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02C3E:  MOVLB  8
02C40:  CLRF   x4D
02C42:  CLRF   x4C
02C44:  MOVLB  0
02C46:  MOVLB  8
02C48:  MOVF   x4D,W
02C4A:  SUBWF  x4B,W
02C4C:  BTFSC  FD8.0
02C4E:  BRA    2C56
02C50:  MOVLB  0
02C52:  GOTO   2CA2
02C56:  MOVLB  0
02C58:  BTFSS  FD8.2
02C5A:  GOTO   2C70
02C5E:  MOVLB  8
02C60:  MOVF   x4A,W
02C62:  SUBWF  x4C,W
02C64:  BTFSS  FD8.0
02C66:  BRA    2C6E
02C68:  MOVLB  0
02C6A:  GOTO   2CA2
02C6E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02C70:  MOVLB  8
02C72:  MOVF   x48,W
02C74:  ADDWF  x4C,W
02C76:  MOVWF  FE9
02C78:  MOVF   x49,W
02C7A:  ADDWFC x4D,W
02C7C:  MOVWF  FEA
02C7E:  MOVFF  FEF,850
02C82:  MOVFF  850,866
02C86:  MOVLW  08
02C88:  MOVWF  x67
02C8A:  MOVLW  01
02C8C:  MOVWF  x68
02C8E:  MOVLB  0
02C90:  CALL   1B9C
02C94:  MOVLB  8
02C96:  INCF   x4C,F
02C98:  BTFSC  FD8.2
02C9A:  INCF   x4D,F
02C9C:  MOVLB  0
02C9E:  GOTO   2C46
....................          break;
02CA2:  GOTO   2D12
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02CA6:  MOVLB  8
02CA8:  CLRF   x4F
02CAA:  CLRF   x4E
02CAC:  MOVLB  0
02CAE:  MOVLB  8
02CB0:  MOVF   x4F,W
02CB2:  SUBWF  x4B,W
02CB4:  BTFSC  FD8.0
02CB6:  BRA    2CBE
02CB8:  MOVLB  0
02CBA:  GOTO   2D0A
02CBE:  MOVLB  0
02CC0:  BTFSS  FD8.2
02CC2:  GOTO   2CD8
02CC6:  MOVLB  8
02CC8:  MOVF   x4A,W
02CCA:  SUBWF  x4E,W
02CCC:  BTFSS  FD8.0
02CCE:  BRA    2CD6
02CD0:  MOVLB  0
02CD2:  GOTO   2D0A
02CD6:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02CD8:  MOVLB  8
02CDA:  MOVF   x48,W
02CDC:  ADDWF  x4E,W
02CDE:  MOVWF  FE9
02CE0:  MOVF   x49,W
02CE2:  ADDWFC x4F,W
02CE4:  MOVWF  FEA
02CE6:  MOVFF  FEF,850
02CEA:  MOVFF  850,866
02CEE:  MOVLW  08
02CF0:  MOVWF  x67
02CF2:  MOVLW  01
02CF4:  MOVWF  x68
02CF6:  MOVLB  0
02CF8:  CALL   1B9C
02CFC:  MOVLB  8
02CFE:  INCF   x4E,F
02D00:  BTFSC  FD8.2
02D02:  INCF   x4F,F
02D04:  MOVLB  0
02D06:  GOTO   2CAE
....................          break;
02D0A:  GOTO   2D12
....................          
....................       default:
....................          break;
02D0E:  GOTO   2D12
....................    }
....................    return;
02D12:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01C18:  MOVLB  8
01C1A:  MOVF   x4A,W
01C1C:  XORLW  00
01C1E:  MOVLB  0
01C20:  BTFSC  FD8.2
01C22:  GOTO   1C32
01C26:  XORLW  01
01C28:  BTFSC  FD8.2
01C2A:  GOTO   1D3C
01C2E:  GOTO   1E46
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01C32:  MOVLB  8
01C34:  CLRF   x59
01C36:  CLRF   x58
01C38:  MOVLB  0
01C3A:  MOVLB  8
01C3C:  MOVF   x59,W
01C3E:  SUBWF  x51,W
01C40:  BTFSC  FD8.0
01C42:  BRA    1C4A
01C44:  MOVLB  0
01C46:  GOTO   1C96
01C4A:  MOVLB  0
01C4C:  BTFSS  FD8.2
01C4E:  GOTO   1C64
01C52:  MOVLB  8
01C54:  MOVF   x50,W
01C56:  SUBWF  x58,W
01C58:  BTFSS  FD8.0
01C5A:  BRA    1C62
01C5C:  MOVLB  0
01C5E:  GOTO   1C96
01C62:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01C64:  MOVLB  8
01C66:  MOVF   x4E,W
01C68:  ADDWF  x58,W
01C6A:  MOVWF  FE9
01C6C:  MOVF   x4F,W
01C6E:  ADDWFC x59,W
01C70:  MOVWF  FEA
01C72:  MOVFF  FEF,864
01C76:  MOVFF  864,866
01C7A:  MOVLW  08
01C7C:  MOVWF  x67
01C7E:  MOVLW  01
01C80:  MOVWF  x68
01C82:  MOVLB  0
01C84:  CALL   1B9C
01C88:  MOVLB  8
01C8A:  INCF   x58,F
01C8C:  BTFSC  FD8.2
01C8E:  INCF   x59,F
01C90:  MOVLB  0
01C92:  GOTO   1C3A
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01C96:  MOVLB  8
01C98:  CLRF   x5D
01C9A:  CLRF   x5C
01C9C:  CLRF   x5B
01C9E:  CLRF   x5A
01CA0:  MOVLB  0
01CA2:  MOVLB  8
01CA4:  MOVF   x5D,W
01CA6:  SUBWF  x57,W
01CA8:  BTFSC  FD8.0
01CAA:  BRA    1CB2
01CAC:  MOVLB  0
01CAE:  GOTO   1D38
01CB2:  MOVLB  0
01CB4:  BTFSS  FD8.2
01CB6:  GOTO   1CFC
01CBA:  MOVLB  8
01CBC:  MOVF   x5C,W
01CBE:  SUBWF  x56,W
01CC0:  BTFSC  FD8.0
01CC2:  BRA    1CCA
01CC4:  MOVLB  0
01CC6:  GOTO   1D38
01CCA:  MOVLB  0
01CCC:  BTFSS  FD8.2
01CCE:  GOTO   1CFC
01CD2:  MOVLB  8
01CD4:  MOVF   x5B,W
01CD6:  SUBWF  x55,W
01CD8:  BTFSC  FD8.0
01CDA:  BRA    1CE2
01CDC:  MOVLB  0
01CDE:  GOTO   1D38
01CE2:  MOVLB  0
01CE4:  BTFSS  FD8.2
01CE6:  GOTO   1CFC
01CEA:  MOVLB  8
01CEC:  MOVF   x54,W
01CEE:  SUBWF  x5A,W
01CF0:  BTFSS  FD8.0
01CF2:  BRA    1CFA
01CF4:  MOVLB  0
01CF6:  GOTO   1D38
01CFA:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
01CFC:  MOVLB  8
01CFE:  MOVF   x52,W
01D00:  ADDWF  x5A,W
01D02:  MOVWF  FE9
01D04:  MOVF   x53,W
01D06:  ADDWFC x5B,W
01D08:  MOVWF  FEA
01D0A:  MOVLW  01
01D0C:  MOVWF  x66
01D0E:  MOVLW  08
01D10:  MOVWF  x67
01D12:  MOVLW  01
01D14:  MOVWF  x68
01D16:  MOVLB  0
01D18:  CALL   1B9C
01D1C:  MOVFF  01,FEF
01D20:  MOVLW  01
01D22:  MOVLB  8
01D24:  ADDWF  x5A,F
01D26:  BTFSC  FD8.0
01D28:  INCF   x5B,F
01D2A:  BTFSC  FD8.2
01D2C:  INCF   x5C,F
01D2E:  BTFSC  FD8.2
01D30:  INCF   x5D,F
01D32:  MOVLB  0
01D34:  GOTO   1CA2
....................          break;
01D38:  GOTO   1E4A
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01D3C:  MOVLB  8
01D3E:  CLRF   x5F
01D40:  CLRF   x5E
01D42:  MOVLB  0
01D44:  MOVLB  8
01D46:  MOVF   x5F,W
01D48:  SUBWF  x51,W
01D4A:  BTFSC  FD8.0
01D4C:  BRA    1D54
01D4E:  MOVLB  0
01D50:  GOTO   1DA0
01D54:  MOVLB  0
01D56:  BTFSS  FD8.2
01D58:  GOTO   1D6E
01D5C:  MOVLB  8
01D5E:  MOVF   x50,W
01D60:  SUBWF  x5E,W
01D62:  BTFSS  FD8.0
01D64:  BRA    1D6C
01D66:  MOVLB  0
01D68:  GOTO   1DA0
01D6C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
01D6E:  MOVLB  8
01D70:  MOVF   x4E,W
01D72:  ADDWF  x5E,W
01D74:  MOVWF  FE9
01D76:  MOVF   x4F,W
01D78:  ADDWFC x5F,W
01D7A:  MOVWF  FEA
01D7C:  MOVFF  FEF,864
01D80:  MOVFF  864,866
01D84:  MOVLW  08
01D86:  MOVWF  x67
01D88:  MOVLW  01
01D8A:  MOVWF  x68
01D8C:  MOVLB  0
01D8E:  CALL   1B9C
01D92:  MOVLB  8
01D94:  INCF   x5E,F
01D96:  BTFSC  FD8.2
01D98:  INCF   x5F,F
01D9A:  MOVLB  0
01D9C:  GOTO   1D44
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01DA0:  MOVLB  8
01DA2:  CLRF   x63
01DA4:  CLRF   x62
01DA6:  CLRF   x61
01DA8:  CLRF   x60
01DAA:  MOVLB  0
01DAC:  MOVLB  8
01DAE:  MOVF   x63,W
01DB0:  SUBWF  x57,W
01DB2:  BTFSC  FD8.0
01DB4:  BRA    1DBC
01DB6:  MOVLB  0
01DB8:  GOTO   1E42
01DBC:  MOVLB  0
01DBE:  BTFSS  FD8.2
01DC0:  GOTO   1E06
01DC4:  MOVLB  8
01DC6:  MOVF   x62,W
01DC8:  SUBWF  x56,W
01DCA:  BTFSC  FD8.0
01DCC:  BRA    1DD4
01DCE:  MOVLB  0
01DD0:  GOTO   1E42
01DD4:  MOVLB  0
01DD6:  BTFSS  FD8.2
01DD8:  GOTO   1E06
01DDC:  MOVLB  8
01DDE:  MOVF   x61,W
01DE0:  SUBWF  x55,W
01DE2:  BTFSC  FD8.0
01DE4:  BRA    1DEC
01DE6:  MOVLB  0
01DE8:  GOTO   1E42
01DEC:  MOVLB  0
01DEE:  BTFSS  FD8.2
01DF0:  GOTO   1E06
01DF4:  MOVLB  8
01DF6:  MOVF   x54,W
01DF8:  SUBWF  x60,W
01DFA:  BTFSS  FD8.0
01DFC:  BRA    1E04
01DFE:  MOVLB  0
01E00:  GOTO   1E42
01E04:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
01E06:  MOVLB  8
01E08:  MOVF   x52,W
01E0A:  ADDWF  x60,W
01E0C:  MOVWF  FE9
01E0E:  MOVF   x53,W
01E10:  ADDWFC x61,W
01E12:  MOVWF  FEA
01E14:  MOVLW  01
01E16:  MOVWF  x66
01E18:  MOVLW  08
01E1A:  MOVWF  x67
01E1C:  MOVLW  01
01E1E:  MOVWF  x68
01E20:  MOVLB  0
01E22:  CALL   1B9C
01E26:  MOVFF  01,FEF
01E2A:  MOVLW  01
01E2C:  MOVLB  8
01E2E:  ADDWF  x60,F
01E30:  BTFSC  FD8.0
01E32:  INCF   x61,F
01E34:  BTFSC  FD8.2
01E36:  INCF   x62,F
01E38:  BTFSC  FD8.2
01E3A:  INCF   x63,F
01E3C:  MOVLB  0
01E3E:  GOTO   1DAC
....................          break;
01E42:  GOTO   1E4A
....................    
....................          
....................       default:
....................          break;
01E46:  GOTO   1E4A
....................    }
....................    return;
01E4A:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02D14:  MOVLB  8
02D16:  MOVF   x44,W
02D18:  XORLW  00
02D1A:  MOVLB  0
02D1C:  BTFSC  FD8.2
02D1E:  GOTO   2D2E
02D22:  XORLW  01
02D24:  BTFSC  FD8.2
02D26:  GOTO   2DDC
02D2A:  GOTO   2E8A
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02D2E:  MOVLB  8
02D30:  CLRF   x4F
02D32:  MOVLB  0
02D34:  MOVLB  8
02D36:  MOVF   x4A,W
02D38:  SUBWF  x4F,W
02D3A:  BTFSS  FD8.0
02D3C:  BRA    2D44
02D3E:  MOVLB  0
02D40:  GOTO   2D74
02D44:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02D46:  MOVLB  8
02D48:  MOVF   x4F,W
02D4A:  ADDWF  x48,W
02D4C:  MOVWF  FE9
02D4E:  MOVLW  00
02D50:  ADDWFC x49,W
02D52:  MOVWF  FEA
02D54:  MOVFF  FEF,855
02D58:  MOVFF  855,866
02D5C:  MOVLW  08
02D5E:  MOVWF  x67
02D60:  MOVLW  01
02D62:  MOVWF  x68
02D64:  MOVLB  0
02D66:  CALL   1B9C
02D6A:  MOVLB  8
02D6C:  INCF   x4F,F
02D6E:  MOVLB  0
02D70:  GOTO   2D34
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02D74:  MOVLB  8
02D76:  CLRF   x51
02D78:  CLRF   x50
02D7A:  MOVLB  0
02D7C:  MOVLB  8
02D7E:  MOVF   x51,W
02D80:  SUBWF  x4E,W
02D82:  BTFSC  FD8.0
02D84:  BRA    2D8C
02D86:  MOVLB  0
02D88:  GOTO   2DD8
02D8C:  MOVLB  0
02D8E:  BTFSS  FD8.2
02D90:  GOTO   2DA6
02D94:  MOVLB  8
02D96:  MOVF   x4D,W
02D98:  SUBWF  x50,W
02D9A:  BTFSS  FD8.0
02D9C:  BRA    2DA4
02D9E:  MOVLB  0
02DA0:  GOTO   2DD8
02DA4:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02DA6:  MOVLB  8
02DA8:  MOVF   x4B,W
02DAA:  ADDWF  x50,W
02DAC:  MOVWF  FE9
02DAE:  MOVF   x4C,W
02DB0:  ADDWFC x51,W
02DB2:  MOVWF  FEA
02DB4:  MOVFF  FEF,855
02DB8:  MOVFF  855,866
02DBC:  MOVLW  08
02DBE:  MOVWF  x67
02DC0:  MOVLW  01
02DC2:  MOVWF  x68
02DC4:  MOVLB  0
02DC6:  CALL   1B9C
02DCA:  MOVLB  8
02DCC:  INCF   x50,F
02DCE:  BTFSC  FD8.2
02DD0:  INCF   x51,F
02DD2:  MOVLB  0
02DD4:  GOTO   2D7C
....................          break;
02DD8:  GOTO   2E8E
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02DDC:  MOVLB  8
02DDE:  CLRF   x52
02DE0:  MOVLB  0
02DE2:  MOVLB  8
02DE4:  MOVF   x4A,W
02DE6:  SUBWF  x52,W
02DE8:  BTFSS  FD8.0
02DEA:  BRA    2DF2
02DEC:  MOVLB  0
02DEE:  GOTO   2E22
02DF2:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
02DF4:  MOVLB  8
02DF6:  MOVF   x52,W
02DF8:  ADDWF  x48,W
02DFA:  MOVWF  FE9
02DFC:  MOVLW  00
02DFE:  ADDWFC x49,W
02E00:  MOVWF  FEA
02E02:  MOVFF  FEF,855
02E06:  MOVFF  855,866
02E0A:  MOVLW  08
02E0C:  MOVWF  x67
02E0E:  MOVLW  01
02E10:  MOVWF  x68
02E12:  MOVLB  0
02E14:  CALL   1B9C
02E18:  MOVLB  8
02E1A:  INCF   x52,F
02E1C:  MOVLB  0
02E1E:  GOTO   2DE2
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02E22:  MOVLB  8
02E24:  CLRF   x54
02E26:  CLRF   x53
02E28:  MOVLB  0
02E2A:  MOVLB  8
02E2C:  MOVF   x54,W
02E2E:  SUBWF  x4E,W
02E30:  BTFSC  FD8.0
02E32:  BRA    2E3A
02E34:  MOVLB  0
02E36:  GOTO   2E86
02E3A:  MOVLB  0
02E3C:  BTFSS  FD8.2
02E3E:  GOTO   2E54
02E42:  MOVLB  8
02E44:  MOVF   x4D,W
02E46:  SUBWF  x53,W
02E48:  BTFSS  FD8.0
02E4A:  BRA    2E52
02E4C:  MOVLB  0
02E4E:  GOTO   2E86
02E52:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02E54:  MOVLB  8
02E56:  MOVF   x4B,W
02E58:  ADDWF  x53,W
02E5A:  MOVWF  FE9
02E5C:  MOVF   x4C,W
02E5E:  ADDWFC x54,W
02E60:  MOVWF  FEA
02E62:  MOVFF  FEF,855
02E66:  MOVFF  855,866
02E6A:  MOVLW  08
02E6C:  MOVWF  x67
02E6E:  MOVLW  01
02E70:  MOVWF  x68
02E72:  MOVLB  0
02E74:  CALL   1B9C
02E78:  MOVLB  8
02E7A:  INCF   x53,F
02E7C:  BTFSC  FD8.2
02E7E:  INCF   x54,F
02E80:  MOVLB  0
02E82:  GOTO   2E2A
....................          break;
02E86:  GOTO   2E8E
....................          
....................       default:
....................          break;
02E8A:  GOTO   2E8E
....................    }
....................    return;
02E8E:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
05EA6:  MOVFF  493,84A
05EAA:  MOVLW  01
05EAC:  MOVLB  8
05EAE:  MOVWF  x4B
05EB0:  MOVLW  0F
05EB2:  MOVWF  x4D
05EB4:  MOVLW  89
05EB6:  MOVWF  x4C
05EB8:  MOVLB  0
05EBA:  CALL   1B48
05EBE:  MOVFF  493,84A
05EC2:  MOVLB  8
05EC4:  CLRF   x4B
05EC6:  MOVLW  0F
05EC8:  MOVWF  x4D
05ECA:  MOVLW  92
05ECC:  MOVWF  x4C
05ECE:  MOVLB  0
05ED0:  CALL   1B48
05ED4:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
02E90:  MOVLW  05
02E92:  MOVLB  8
02E94:  MOVWF  x48
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
02E96:  MOVFF  846,84A
02E9A:  CLRF   x4B
02E9C:  MOVLW  0F
02E9E:  MOVWF  x4D
02EA0:  MOVLW  89
02EA2:  MOVWF  x4C
02EA4:  MOVLB  0
02EA6:  CALL   1B48
02EAA:  MOVFF  846,84A
02EAE:  MOVLB  8
02EB0:  CLRF   x4B
02EB2:  MOVLW  0F
02EB4:  MOVWF  x4D
02EB6:  MOVLW  92
02EB8:  MOVWF  x4C
02EBA:  MOVLB  0
02EBC:  CALL   1B48
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
02EC0:  MOVFF  847,84D
02EC4:  MOVFF  846,84C
02EC8:  MOVFF  845,84B
02ECC:  MOVFF  844,84A
02ED0:  MOVLW  08
02ED2:  MOVLB  8
02ED4:  MOVWF  x4F
02ED6:  MOVLW  48
02ED8:  MOVWF  x4E
02EDA:  CLRF   x51
02EDC:  MOVLW  01
02EDE:  MOVWF  x50
02EE0:  MOVLW  08
02EE2:  MOVWF  x53
02EE4:  MOVLW  49
02EE6:  MOVWF  x52
02EE8:  CLRF   x57
02EEA:  CLRF   x56
02EEC:  CLRF   x55
02EEE:  MOVLW  01
02EF0:  MOVWF  x54
02EF2:  MOVLB  0
02EF4:  CALL   1C18
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
02EF8:  MOVFF  846,84A
02EFC:  MOVLW  01
02EFE:  MOVLB  8
02F00:  MOVWF  x4B
02F02:  MOVLW  0F
02F04:  MOVWF  x4D
02F06:  MOVLW  89
02F08:  MOVWF  x4C
02F0A:  MOVLB  0
02F0C:  CALL   1B48
02F10:  MOVFF  846,84A
02F14:  MOVLB  8
02F16:  CLRF   x4B
02F18:  MOVLW  0F
02F1A:  MOVWF  x4D
02F1C:  MOVLW  92
02F1E:  MOVWF  x4C
02F20:  MOVLB  0
02F22:  CALL   1B48
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
02F26:  MOVLB  8
02F28:  MOVF   x49,W
02F2A:  MOVWF  01
02F2C:  MOVLB  0
02F2E:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0520C:  MOVLB  3
0520E:  MOVF   xD2,F
05210:  BTFSC  FD8.2
05212:  BRA    521A
05214:  MOVLB  0
05216:  GOTO   5372
0521A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0521C:  MOVLW  06
0521E:  MOVLB  3
05220:  MOVWF  xD9
05222:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
05224:  MOVLW  D8
05226:  MOVLB  3
05228:  MOVWF  xDA
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0522A:  MOVFF  3D7,3E6
0522E:  MOVFF  3D8,3E7
05232:  CLRF   xE8
05234:  CLRF   xE9
05236:  MOVF   xE6,W
05238:  MOVWF  00
0523A:  CLRF   01
0523C:  CLRF   02
0523E:  CLRF   03
05240:  MOVFF  00,3DB
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05244:  MOVFF  3D6,3E6
05248:  MOVFF  3D7,3E7
0524C:  MOVFF  3D8,3E8
05250:  CLRF   xE9
05252:  MOVF   xE6,W
05254:  MOVWF  00
05256:  CLRF   01
05258:  CLRF   02
0525A:  CLRF   03
0525C:  MOVFF  00,3DC
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05260:  MOVF   xD5,W
05262:  MOVWF  00
05264:  CLRF   01
05266:  CLRF   02
05268:  CLRF   03
0526A:  MOVFF  00,3DD
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0526E:  MOVFF  3D3,84A
05272:  MOVLB  8
05274:  CLRF   x4B
05276:  MOVLW  0F
05278:  MOVWF  x4D
0527A:  MOVLW  89
0527C:  MOVWF  x4C
0527E:  MOVLB  0
05280:  CALL   1B48
05284:  MOVFF  3D3,84A
05288:  MOVLB  8
0528A:  CLRF   x4B
0528C:  MOVLW  0F
0528E:  MOVWF  x4D
05290:  MOVLW  92
05292:  MOVWF  x4C
05294:  MOVLB  0
05296:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0529A:  MOVFF  3D4,847
0529E:  MOVFF  3D3,846
052A2:  MOVFF  3D2,845
052A6:  MOVFF  3D1,844
052AA:  MOVLW  03
052AC:  MOVLB  8
052AE:  MOVWF  x49
052B0:  MOVLW  D9
052B2:  MOVWF  x48
052B4:  CLRF   x4B
052B6:  MOVLW  01
052B8:  MOVWF  x4A
052BA:  MOVLB  0
052BC:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
052C0:  MOVFF  3D3,84A
052C4:  MOVLW  01
052C6:  MOVLB  8
052C8:  MOVWF  x4B
052CA:  MOVLW  0F
052CC:  MOVWF  x4D
052CE:  MOVLW  89
052D0:  MOVWF  x4C
052D2:  MOVLB  0
052D4:  CALL   1B48
052D8:  MOVFF  3D3,84A
052DC:  MOVLB  8
052DE:  CLRF   x4B
052E0:  MOVLW  0F
052E2:  MOVWF  x4D
052E4:  MOVLW  92
052E6:  MOVWF  x4C
052E8:  MOVLB  0
052EA:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
052EE:  MOVFF  3D3,84A
052F2:  MOVLB  8
052F4:  CLRF   x4B
052F6:  MOVLW  0F
052F8:  MOVWF  x4D
052FA:  MOVLW  89
052FC:  MOVWF  x4C
052FE:  MOVLB  0
05300:  CALL   1B48
05304:  MOVFF  3D3,84A
05308:  MOVLB  8
0530A:  CLRF   x4B
0530C:  MOVLW  0F
0530E:  MOVWF  x4D
05310:  MOVLW  92
05312:  MOVWF  x4C
05314:  MOVLB  0
05316:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0531A:  MOVFF  3D4,847
0531E:  MOVFF  3D3,846
05322:  MOVFF  3D2,845
05326:  MOVFF  3D1,844
0532A:  MOVLW  03
0532C:  MOVLB  8
0532E:  MOVWF  x49
05330:  MOVLW  DA
05332:  MOVWF  x48
05334:  CLRF   x4B
05336:  MOVLW  04
05338:  MOVWF  x4A
0533A:  MOVLB  0
0533C:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05340:  MOVFF  3D3,84A
05344:  MOVLW  01
05346:  MOVLB  8
05348:  MOVWF  x4B
0534A:  MOVLW  0F
0534C:  MOVWF  x4D
0534E:  MOVLW  89
05350:  MOVWF  x4C
05352:  MOVLB  0
05354:  CALL   1B48
05358:  MOVFF  3D3,84A
0535C:  MOVLB  8
0535E:  CLRF   x4B
05360:  MOVLW  0F
05362:  MOVWF  x4D
05364:  MOVLW  92
05366:  MOVWF  x4C
05368:  MOVLB  0
0536A:  CALL   1B48
....................    }
0536E:  GOTO   54F2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05372:  MOVLB  3
05374:  DECFSZ xD2,W
05376:  BRA    537C
05378:  BRA    5382
0537A:  MOVLB  0
0537C:  MOVLB  0
0537E:  GOTO   54F2
05382:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05384:  MOVLW  06
05386:  MOVLB  3
05388:  MOVWF  xDE
0538A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
0538C:  MOVLW  DC
0538E:  MOVLB  3
05390:  MOVWF  xDF
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05392:  MOVFF  3D8,3E6
05396:  CLRF   xE7
05398:  CLRF   xE8
0539A:  CLRF   xE9
0539C:  MOVF   xE6,W
0539E:  MOVWF  00
053A0:  CLRF   01
053A2:  CLRF   02
053A4:  CLRF   03
053A6:  MOVFF  00,3E0
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
053AA:  MOVFF  3D7,3E6
053AE:  MOVFF  3D8,3E7
053B2:  CLRF   xE8
053B4:  CLRF   xE9
053B6:  MOVF   xE6,W
053B8:  MOVWF  00
053BA:  CLRF   01
053BC:  CLRF   02
053BE:  CLRF   03
053C0:  MOVFF  00,3E1
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
053C4:  MOVFF  3D6,3E6
053C8:  MOVFF  3D7,3E7
053CC:  MOVFF  3D8,3E8
053D0:  CLRF   xE9
053D2:  MOVF   xE6,W
053D4:  MOVWF  00
053D6:  CLRF   01
053D8:  CLRF   02
053DA:  CLRF   03
053DC:  MOVFF  00,3E2
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
053E0:  MOVF   xD5,W
053E2:  MOVWF  00
053E4:  CLRF   01
053E6:  CLRF   02
053E8:  CLRF   03
053EA:  MOVFF  00,3E3
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
053EE:  MOVFF  3D3,84A
053F2:  MOVLB  8
053F4:  CLRF   x4B
053F6:  MOVLW  0F
053F8:  MOVWF  x4D
053FA:  MOVLW  89
053FC:  MOVWF  x4C
053FE:  MOVLB  0
05400:  CALL   1B48
05404:  MOVFF  3D3,84A
05408:  MOVLB  8
0540A:  CLRF   x4B
0540C:  MOVLW  0F
0540E:  MOVWF  x4D
05410:  MOVLW  92
05412:  MOVWF  x4C
05414:  MOVLB  0
05416:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0541A:  MOVFF  3D4,847
0541E:  MOVFF  3D3,846
05422:  MOVFF  3D2,845
05426:  MOVFF  3D1,844
0542A:  MOVLW  03
0542C:  MOVLB  8
0542E:  MOVWF  x49
05430:  MOVLW  DE
05432:  MOVWF  x48
05434:  CLRF   x4B
05436:  MOVLW  01
05438:  MOVWF  x4A
0543A:  MOVLB  0
0543C:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
05440:  MOVFF  3D3,84A
05444:  MOVLW  01
05446:  MOVLB  8
05448:  MOVWF  x4B
0544A:  MOVLW  0F
0544C:  MOVWF  x4D
0544E:  MOVLW  89
05450:  MOVWF  x4C
05452:  MOVLB  0
05454:  CALL   1B48
05458:  MOVFF  3D3,84A
0545C:  MOVLB  8
0545E:  CLRF   x4B
05460:  MOVLW  0F
05462:  MOVWF  x4D
05464:  MOVLW  92
05466:  MOVWF  x4C
05468:  MOVLB  0
0546A:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0546E:  MOVFF  3D3,84A
05472:  MOVLB  8
05474:  CLRF   x4B
05476:  MOVLW  0F
05478:  MOVWF  x4D
0547A:  MOVLW  89
0547C:  MOVWF  x4C
0547E:  MOVLB  0
05480:  CALL   1B48
05484:  MOVFF  3D3,84A
05488:  MOVLB  8
0548A:  CLRF   x4B
0548C:  MOVLW  0F
0548E:  MOVWF  x4D
05490:  MOVLW  92
05492:  MOVWF  x4C
05494:  MOVLB  0
05496:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0549A:  MOVFF  3D4,847
0549E:  MOVFF  3D3,846
054A2:  MOVFF  3D2,845
054A6:  MOVFF  3D1,844
054AA:  MOVLW  03
054AC:  MOVLB  8
054AE:  MOVWF  x49
054B0:  MOVLW  DF
054B2:  MOVWF  x48
054B4:  CLRF   x4B
054B6:  MOVLW  05
054B8:  MOVWF  x4A
054BA:  MOVLB  0
054BC:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
054C0:  MOVFF  3D3,84A
054C4:  MOVLW  01
054C6:  MOVLB  8
054C8:  MOVWF  x4B
054CA:  MOVLW  0F
054CC:  MOVWF  x4D
054CE:  MOVLW  89
054D0:  MOVWF  x4C
054D2:  MOVLB  0
054D4:  CALL   1B48
054D8:  MOVFF  3D3,84A
054DC:  MOVLB  8
054DE:  CLRF   x4B
054E0:  MOVLW  0F
054E2:  MOVWF  x4D
054E4:  MOVLW  92
054E6:  MOVWF  x4C
054E8:  MOVLB  0
054EA:  CALL   1B48
....................    }
054EE:  GOTO   54F2
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
054F2:  MOVLB  3
054F4:  CLRF   xE4
054F6:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
054F8:  MOVFF  3D4,847
054FC:  MOVFF  3D3,846
05500:  MOVFF  3D2,845
05504:  MOVFF  3D1,844
05508:  CALL   2E90
0550C:  MOVF   01,W
0550E:  ANDLW  01
05510:  SUBLW  01
05512:  BTFSS  FD8.2
05514:  GOTO   5566
....................       if(timeout_counter > 10)
05518:  MOVLB  3
0551A:  MOVF   xE4,W
0551C:  SUBLW  0A
0551E:  BTFSS  FD8.0
05520:  BRA    5528
05522:  MOVLB  0
05524:  GOTO   553A
05528:  MOVLB  0
....................          delay_ms(200);
0552A:  MOVLW  C8
0552C:  MOVLB  8
0552E:  MOVWF  x44
05530:  MOVLB  0
05532:  CALL   179E
05536:  GOTO   5546
....................       else
....................          delay_ms(10);   
0553A:  MOVLW  0A
0553C:  MOVLB  8
0553E:  MOVWF  x44
05540:  MOVLB  0
05542:  CALL   179E
....................       
....................       if(timeout_counter > 100){
05546:  MOVLB  3
05548:  MOVF   xE4,W
0554A:  SUBLW  64
0554C:  BTFSS  FD8.0
0554E:  BRA    5556
05550:  MOVLB  0
05552:  GOTO   555C
05556:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05558:  GOTO   5566
....................       }  
....................       timeout_counter++;
0555C:  MOVLB  3
0555E:  INCF   xE4,F
05560:  MOVLB  0
05562:  GOTO   54F8
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05566:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
032B4:  MOVLB  8
032B6:  MOVF   x2D,F
032B8:  BTFSC  FD8.2
032BA:  BRA    32C2
032BC:  MOVLB  0
032BE:  GOTO   3418
032C2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
032C4:  MOVLW  06
032C6:  MOVLB  8
032C8:  MOVWF  x34
032CA:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
032CC:  MOVLW  20
032CE:  MOVLB  8
032D0:  MOVWF  x35
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
032D2:  MOVFF  832,841
032D6:  MOVFF  833,842
032DA:  CLRF   x43
032DC:  CLRF   x44
032DE:  MOVF   x41,W
032E0:  MOVWF  00
032E2:  CLRF   01
032E4:  CLRF   02
032E6:  CLRF   03
032E8:  MOVFF  00,836
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
032EC:  MOVFF  831,841
032F0:  MOVFF  832,842
032F4:  MOVFF  833,843
032F8:  CLRF   x44
032FA:  MOVF   x41,W
032FC:  MOVWF  00
032FE:  CLRF   01
03300:  CLRF   02
03302:  CLRF   03
03304:  MOVFF  00,837
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03308:  MOVF   x30,W
0330A:  MOVWF  00
0330C:  CLRF   01
0330E:  CLRF   02
03310:  CLRF   03
03312:  MOVFF  00,838
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03316:  MOVFF  82E,84A
0331A:  CLRF   x4B
0331C:  MOVLW  0F
0331E:  MOVWF  x4D
03320:  MOVLW  89
03322:  MOVWF  x4C
03324:  MOVLB  0
03326:  CALL   1B48
0332A:  MOVFF  82E,84A
0332E:  MOVLB  8
03330:  CLRF   x4B
03332:  MOVLW  0F
03334:  MOVWF  x4D
03336:  MOVLW  92
03338:  MOVWF  x4C
0333A:  MOVLB  0
0333C:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03340:  MOVFF  82F,847
03344:  MOVFF  82E,846
03348:  MOVFF  82D,845
0334C:  MOVFF  82C,844
03350:  MOVLW  08
03352:  MOVLB  8
03354:  MOVWF  x49
03356:  MOVLW  34
03358:  MOVWF  x48
0335A:  CLRF   x4B
0335C:  MOVLW  01
0335E:  MOVWF  x4A
03360:  MOVLB  0
03362:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
03366:  MOVFF  82E,84A
0336A:  MOVLW  01
0336C:  MOVLB  8
0336E:  MOVWF  x4B
03370:  MOVLW  0F
03372:  MOVWF  x4D
03374:  MOVLW  89
03376:  MOVWF  x4C
03378:  MOVLB  0
0337A:  CALL   1B48
0337E:  MOVFF  82E,84A
03382:  MOVLB  8
03384:  CLRF   x4B
03386:  MOVLW  0F
03388:  MOVWF  x4D
0338A:  MOVLW  92
0338C:  MOVWF  x4C
0338E:  MOVLB  0
03390:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03394:  MOVFF  82E,84A
03398:  MOVLB  8
0339A:  CLRF   x4B
0339C:  MOVLW  0F
0339E:  MOVWF  x4D
033A0:  MOVLW  89
033A2:  MOVWF  x4C
033A4:  MOVLB  0
033A6:  CALL   1B48
033AA:  MOVFF  82E,84A
033AE:  MOVLB  8
033B0:  CLRF   x4B
033B2:  MOVLW  0F
033B4:  MOVWF  x4D
033B6:  MOVLW  92
033B8:  MOVWF  x4C
033BA:  MOVLB  0
033BC:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
033C0:  MOVFF  82F,847
033C4:  MOVFF  82E,846
033C8:  MOVFF  82D,845
033CC:  MOVFF  82C,844
033D0:  MOVLW  08
033D2:  MOVLB  8
033D4:  MOVWF  x49
033D6:  MOVLW  35
033D8:  MOVWF  x48
033DA:  CLRF   x4B
033DC:  MOVLW  04
033DE:  MOVWF  x4A
033E0:  MOVLB  0
033E2:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
033E6:  MOVFF  82E,84A
033EA:  MOVLW  01
033EC:  MOVLB  8
033EE:  MOVWF  x4B
033F0:  MOVLW  0F
033F2:  MOVWF  x4D
033F4:  MOVLW  89
033F6:  MOVWF  x4C
033F8:  MOVLB  0
033FA:  CALL   1B48
033FE:  MOVFF  82E,84A
03402:  MOVLB  8
03404:  CLRF   x4B
03406:  MOVLW  0F
03408:  MOVWF  x4D
0340A:  MOVLW  92
0340C:  MOVWF  x4C
0340E:  MOVLB  0
03410:  CALL   1B48
....................    }
03414:  GOTO   3596
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03418:  MOVLB  8
0341A:  DECFSZ x2D,W
0341C:  BRA    3422
0341E:  BRA    3428
03420:  MOVLB  0
03422:  MOVLB  0
03424:  GOTO   3596
03428:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0342A:  MOVLW  06
0342C:  MOVLB  8
0342E:  MOVWF  x39
03430:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
03432:  MOVLW  21
03434:  MOVLB  8
03436:  MOVWF  x3A
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
03438:  MOVFF  833,841
0343C:  CLRF   x42
0343E:  CLRF   x43
03440:  CLRF   x44
03442:  MOVF   x41,W
03444:  MOVWF  00
03446:  CLRF   01
03448:  CLRF   02
0344A:  CLRF   03
0344C:  MOVFF  00,83B
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03450:  MOVFF  832,841
03454:  MOVFF  833,842
03458:  CLRF   x43
0345A:  CLRF   x44
0345C:  MOVF   x41,W
0345E:  MOVWF  00
03460:  CLRF   01
03462:  CLRF   02
03464:  CLRF   03
03466:  MOVFF  00,83C
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0346A:  MOVFF  831,841
0346E:  MOVFF  832,842
03472:  MOVFF  833,843
03476:  CLRF   x44
03478:  MOVF   x41,W
0347A:  MOVWF  00
0347C:  CLRF   01
0347E:  CLRF   02
03480:  CLRF   03
03482:  MOVFF  00,83D
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03486:  MOVF   x30,W
03488:  MOVWF  00
0348A:  CLRF   01
0348C:  CLRF   02
0348E:  CLRF   03
03490:  MOVFF  00,83E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03494:  MOVFF  82E,84A
03498:  CLRF   x4B
0349A:  MOVLW  0F
0349C:  MOVWF  x4D
0349E:  MOVLW  89
034A0:  MOVWF  x4C
034A2:  MOVLB  0
034A4:  CALL   1B48
034A8:  MOVFF  82E,84A
034AC:  MOVLB  8
034AE:  CLRF   x4B
034B0:  MOVLW  0F
034B2:  MOVWF  x4D
034B4:  MOVLW  92
034B6:  MOVWF  x4C
034B8:  MOVLB  0
034BA:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
034BE:  MOVFF  82F,847
034C2:  MOVFF  82E,846
034C6:  MOVFF  82D,845
034CA:  MOVFF  82C,844
034CE:  MOVLW  08
034D0:  MOVLB  8
034D2:  MOVWF  x49
034D4:  MOVLW  39
034D6:  MOVWF  x48
034D8:  CLRF   x4B
034DA:  MOVLW  01
034DC:  MOVWF  x4A
034DE:  MOVLB  0
034E0:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
034E4:  MOVFF  82E,84A
034E8:  MOVLW  01
034EA:  MOVLB  8
034EC:  MOVWF  x4B
034EE:  MOVLW  0F
034F0:  MOVWF  x4D
034F2:  MOVLW  89
034F4:  MOVWF  x4C
034F6:  MOVLB  0
034F8:  CALL   1B48
034FC:  MOVFF  82E,84A
03500:  MOVLB  8
03502:  CLRF   x4B
03504:  MOVLW  0F
03506:  MOVWF  x4D
03508:  MOVLW  92
0350A:  MOVWF  x4C
0350C:  MOVLB  0
0350E:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03512:  MOVFF  82E,84A
03516:  MOVLB  8
03518:  CLRF   x4B
0351A:  MOVLW  0F
0351C:  MOVWF  x4D
0351E:  MOVLW  89
03520:  MOVWF  x4C
03522:  MOVLB  0
03524:  CALL   1B48
03528:  MOVFF  82E,84A
0352C:  MOVLB  8
0352E:  CLRF   x4B
03530:  MOVLW  0F
03532:  MOVWF  x4D
03534:  MOVLW  92
03536:  MOVWF  x4C
03538:  MOVLB  0
0353A:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0353E:  MOVFF  82F,847
03542:  MOVFF  82E,846
03546:  MOVFF  82D,845
0354A:  MOVFF  82C,844
0354E:  MOVLW  08
03550:  MOVLB  8
03552:  MOVWF  x49
03554:  MOVLW  3A
03556:  MOVWF  x48
03558:  CLRF   x4B
0355A:  MOVLW  05
0355C:  MOVWF  x4A
0355E:  MOVLB  0
03560:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03564:  MOVFF  82E,84A
03568:  MOVLW  01
0356A:  MOVLB  8
0356C:  MOVWF  x4B
0356E:  MOVLW  0F
03570:  MOVWF  x4D
03572:  MOVLW  89
03574:  MOVWF  x4C
03576:  MOVLB  0
03578:  CALL   1B48
0357C:  MOVFF  82E,84A
03580:  MOVLB  8
03582:  CLRF   x4B
03584:  MOVLW  0F
03586:  MOVWF  x4D
03588:  MOVLW  92
0358A:  MOVWF  x4C
0358C:  MOVLB  0
0358E:  CALL   1B48
....................    }
03592:  GOTO   3596
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03596:  MOVLB  8
03598:  CLRF   x3F
0359A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0359C:  MOVFF  82F,847
035A0:  MOVFF  82E,846
035A4:  MOVFF  82D,845
035A8:  MOVFF  82C,844
035AC:  CALL   2E90
035B0:  MOVF   01,W
035B2:  ANDLW  01
035B4:  SUBLW  01
035B6:  BTFSS  FD8.2
035B8:  GOTO   360A
....................       if(timeout_counter > 10)
035BC:  MOVLB  8
035BE:  MOVF   x3F,W
035C0:  SUBLW  0A
035C2:  BTFSS  FD8.0
035C4:  BRA    35CC
035C6:  MOVLB  0
035C8:  GOTO   35DE
035CC:  MOVLB  0
....................          delay_ms(200);
035CE:  MOVLW  C8
035D0:  MOVLB  8
035D2:  MOVWF  x44
035D4:  MOVLB  0
035D6:  CALL   179E
035DA:  GOTO   35EA
....................       else
....................          delay_ms(10);   
035DE:  MOVLW  0A
035E0:  MOVLB  8
035E2:  MOVWF  x44
035E4:  MOVLB  0
035E6:  CALL   179E
....................       
....................       if(timeout_counter > 100){
035EA:  MOVLB  8
035EC:  MOVF   x3F,W
035EE:  SUBLW  64
035F0:  BTFSS  FD8.0
035F2:  BRA    35FA
035F4:  MOVLB  0
035F6:  GOTO   3600
035FA:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
035FC:  GOTO   360A
....................       }  
....................       timeout_counter++;
03600:  MOVLB  8
03602:  INCF   x3F,F
03604:  MOVLB  0
03606:  GOTO   359C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
0360A:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
075F6:  MOVLB  4
075F8:  MOVF   x23,F
075FA:  BTFSC  FD8.2
075FC:  BRA    7604
075FE:  MOVLB  0
07600:  GOTO   76F0
07604:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
07606:  MOVLW  03
07608:  MOVLB  4
0760A:  MOVWF  x2B
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0760C:  MOVFF  428,435
07610:  MOVFF  429,436
07614:  CLRF   x37
07616:  CLRF   x38
07618:  MOVF   x35,W
0761A:  MOVWF  00
0761C:  CLRF   01
0761E:  CLRF   02
07620:  CLRF   03
07622:  MOVFF  00,42C
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07626:  MOVFF  427,435
0762A:  MOVFF  428,436
0762E:  MOVFF  429,437
07632:  CLRF   x38
07634:  MOVF   x35,W
07636:  MOVWF  00
07638:  CLRF   01
0763A:  CLRF   02
0763C:  CLRF   03
0763E:  MOVFF  00,42D
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
07642:  MOVF   x26,W
07644:  MOVWF  00
07646:  CLRF   01
07648:  CLRF   02
0764A:  CLRF   03
0764C:  MOVFF  00,42E
....................             
....................       output_low(flash_stream.cs_pin);
07650:  MOVFF  424,84A
07654:  MOVLB  8
07656:  CLRF   x4B
07658:  MOVLW  0F
0765A:  MOVWF  x4D
0765C:  MOVLW  89
0765E:  MOVWF  x4C
07660:  MOVLB  0
07662:  CALL   1B48
07666:  MOVFF  424,84A
0766A:  MOVLB  8
0766C:  CLRF   x4B
0766E:  MOVLW  0F
07670:  MOVWF  x4D
07672:  MOVLW  92
07674:  MOVWF  x4C
07676:  MOVLB  0
07678:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
0767C:  MOVFF  425,84D
07680:  MOVFF  424,84C
07684:  MOVFF  423,84B
07688:  MOVFF  422,84A
0768C:  MOVLW  04
0768E:  MOVLB  8
07690:  MOVWF  x4F
07692:  MOVLW  2B
07694:  MOVWF  x4E
07696:  CLRF   x51
07698:  MOVLW  04
0769A:  MOVWF  x50
0769C:  MOVLW  04
0769E:  MOVWF  x53
076A0:  MOVLW  2A
076A2:  MOVWF  x52
076A4:  CLRF   x57
076A6:  CLRF   x56
076A8:  CLRF   x55
076AA:  MOVLW  01
076AC:  MOVWF  x54
076AE:  MOVLB  0
076B0:  CALL   1C18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
076B4:  MOVLW  02
076B6:  MOVWF  00
076B8:  DECFSZ 00,F
076BA:  BRA    76B8
076BC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
076BE:  MOVFF  424,84A
076C2:  MOVLW  01
076C4:  MOVLB  8
076C6:  MOVWF  x4B
076C8:  MOVLW  0F
076CA:  MOVWF  x4D
076CC:  MOVLW  89
076CE:  MOVWF  x4C
076D0:  MOVLB  0
076D2:  CALL   1B48
076D6:  MOVFF  424,84A
076DA:  MOVLB  8
076DC:  CLRF   x4B
076DE:  MOVLW  0F
076E0:  MOVWF  x4D
076E2:  MOVLW  92
076E4:  MOVWF  x4C
076E6:  MOVLB  0
076E8:  CALL   1B48
....................    }
076EC:  GOTO   7800
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
076F0:  MOVLB  4
076F2:  DECFSZ x23,W
076F4:  BRA    76FA
076F6:  BRA    7700
076F8:  MOVLB  0
076FA:  MOVLB  0
076FC:  GOTO   7800
07700:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
07702:  MOVLW  13
07704:  MOVLB  4
07706:  MOVWF  x2F
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
07708:  MOVFF  429,435
0770C:  CLRF   x36
0770E:  CLRF   x37
07710:  CLRF   x38
07712:  MOVF   x35,W
07714:  MOVWF  00
07716:  CLRF   01
07718:  CLRF   02
0771A:  CLRF   03
0771C:  MOVFF  00,430
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07720:  MOVFF  428,435
07724:  MOVFF  429,436
07728:  CLRF   x37
0772A:  CLRF   x38
0772C:  MOVF   x35,W
0772E:  MOVWF  00
07730:  CLRF   01
07732:  CLRF   02
07734:  CLRF   03
07736:  MOVFF  00,431
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0773A:  MOVFF  427,435
0773E:  MOVFF  428,436
07742:  MOVFF  429,437
07746:  CLRF   x38
07748:  MOVF   x35,W
0774A:  MOVWF  00
0774C:  CLRF   01
0774E:  CLRF   02
07750:  CLRF   03
07752:  MOVFF  00,432
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
07756:  MOVF   x26,W
07758:  MOVWF  00
0775A:  CLRF   01
0775C:  CLRF   02
0775E:  CLRF   03
07760:  MOVFF  00,433
....................    
....................       output_low(flash_stream.cs_pin);
07764:  MOVFF  424,84A
07768:  MOVLB  8
0776A:  CLRF   x4B
0776C:  MOVLW  0F
0776E:  MOVWF  x4D
07770:  MOVLW  89
07772:  MOVWF  x4C
07774:  MOVLB  0
07776:  CALL   1B48
0777A:  MOVFF  424,84A
0777E:  MOVLB  8
07780:  CLRF   x4B
07782:  MOVLW  0F
07784:  MOVWF  x4D
07786:  MOVLW  92
07788:  MOVWF  x4C
0778A:  MOVLB  0
0778C:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
07790:  MOVFF  425,84D
07794:  MOVFF  424,84C
07798:  MOVFF  423,84B
0779C:  MOVFF  422,84A
077A0:  MOVLW  04
077A2:  MOVLB  8
077A4:  MOVWF  x4F
077A6:  MOVLW  2F
077A8:  MOVWF  x4E
077AA:  CLRF   x51
077AC:  MOVLW  05
077AE:  MOVWF  x50
077B0:  MOVLW  04
077B2:  MOVWF  x53
077B4:  MOVLW  2A
077B6:  MOVWF  x52
077B8:  CLRF   x57
077BA:  CLRF   x56
077BC:  CLRF   x55
077BE:  MOVLW  01
077C0:  MOVWF  x54
077C2:  MOVLB  0
077C4:  CALL   1C18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
077C8:  MOVLW  02
077CA:  MOVWF  00
077CC:  DECFSZ 00,F
077CE:  BRA    77CC
077D0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
077D2:  MOVFF  424,84A
077D6:  MOVLW  01
077D8:  MOVLB  8
077DA:  MOVWF  x4B
077DC:  MOVLW  0F
077DE:  MOVWF  x4D
077E0:  MOVLW  89
077E2:  MOVWF  x4C
077E4:  MOVLB  0
077E6:  CALL   1B48
077EA:  MOVFF  424,84A
077EE:  MOVLB  8
077F0:  CLRF   x4B
077F2:  MOVLW  0F
077F4:  MOVWF  x4D
077F6:  MOVLW  92
077F8:  MOVWF  x4C
077FA:  MOVLB  0
077FC:  CALL   1B48
....................    }
....................    return read_data;
07800:  MOVLB  4
07802:  MOVF   x2A,W
07804:  MOVWF  01
07806:  MOVLB  0
07808:  GOTO   8148 (RETURN)
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
01F0A:  MOVLB  4
01F0C:  MOVF   x27,F
01F0E:  BTFSC  FD8.2
01F10:  BRA    1F18
01F12:  MOVLB  0
01F14:  GOTO   200A
01F18:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
01F1A:  MOVLW  03
01F1C:  MOVLB  4
01F1E:  MOVWF  x34
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
01F20:  MOVFF  42C,43E
01F24:  MOVFF  42D,43F
01F28:  CLRF   x40
01F2A:  CLRF   x41
01F2C:  MOVF   x3E,W
01F2E:  MOVWF  00
01F30:  CLRF   01
01F32:  CLRF   02
01F34:  CLRF   03
01F36:  MOVFF  00,435
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01F3A:  MOVFF  42B,43E
01F3E:  MOVFF  42C,43F
01F42:  MOVFF  42D,440
01F46:  CLRF   x41
01F48:  MOVF   x3E,W
01F4A:  MOVWF  00
01F4C:  CLRF   01
01F4E:  CLRF   02
01F50:  CLRF   03
01F52:  MOVFF  00,436
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01F56:  MOVF   x2A,W
01F58:  MOVWF  00
01F5A:  CLRF   01
01F5C:  CLRF   02
01F5E:  CLRF   03
01F60:  MOVFF  00,437
....................             
....................       output_low(flash_stream.cs_pin);
01F64:  MOVFF  428,84A
01F68:  MOVLB  8
01F6A:  CLRF   x4B
01F6C:  MOVLW  0F
01F6E:  MOVWF  x4D
01F70:  MOVLW  89
01F72:  MOVWF  x4C
01F74:  MOVLB  0
01F76:  CALL   1B48
01F7A:  MOVFF  428,84A
01F7E:  MOVLB  8
01F80:  CLRF   x4B
01F82:  MOVLW  0F
01F84:  MOVWF  x4D
01F86:  MOVLW  92
01F88:  MOVWF  x4C
01F8A:  MOVLB  0
01F8C:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
01F90:  MOVFF  429,84D
01F94:  MOVFF  428,84C
01F98:  MOVFF  427,84B
01F9C:  MOVFF  426,84A
01FA0:  MOVLW  04
01FA2:  MOVLB  8
01FA4:  MOVWF  x4F
01FA6:  MOVLW  34
01FA8:  MOVWF  x4E
01FAA:  CLRF   x51
01FAC:  MOVLW  04
01FAE:  MOVWF  x50
01FB0:  MOVFF  42F,853
01FB4:  MOVFF  42E,852
01FB8:  MOVFF  433,857
01FBC:  MOVFF  432,856
01FC0:  MOVFF  431,855
01FC4:  MOVFF  430,854
01FC8:  MOVLB  0
01FCA:  CALL   1C18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
01FCE:  MOVLW  02
01FD0:  MOVWF  00
01FD2:  DECFSZ 00,F
01FD4:  BRA    1FD2
01FD6:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
01FD8:  MOVFF  428,84A
01FDC:  MOVLW  01
01FDE:  MOVLB  8
01FE0:  MOVWF  x4B
01FE2:  MOVLW  0F
01FE4:  MOVWF  x4D
01FE6:  MOVLW  89
01FE8:  MOVWF  x4C
01FEA:  MOVLB  0
01FEC:  CALL   1B48
01FF0:  MOVFF  428,84A
01FF4:  MOVLB  8
01FF6:  CLRF   x4B
01FF8:  MOVLW  0F
01FFA:  MOVWF  x4D
01FFC:  MOVLW  92
01FFE:  MOVWF  x4C
02000:  MOVLB  0
02002:  CALL   1B48
....................    }
02006:  GOTO   2120
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0200A:  MOVLB  4
0200C:  DECFSZ x27,W
0200E:  BRA    2014
02010:  BRA    201A
02012:  MOVLB  0
02014:  MOVLB  0
02016:  GOTO   2120
0201A:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0201C:  MOVLW  13
0201E:  MOVLB  4
02020:  MOVWF  x38
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02022:  MOVFF  42D,43E
02026:  CLRF   x3F
02028:  CLRF   x40
0202A:  CLRF   x41
0202C:  MOVF   x3E,W
0202E:  MOVWF  00
02030:  CLRF   01
02032:  CLRF   02
02034:  CLRF   03
02036:  MOVFF  00,439
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0203A:  MOVFF  42C,43E
0203E:  MOVFF  42D,43F
02042:  CLRF   x40
02044:  CLRF   x41
02046:  MOVF   x3E,W
02048:  MOVWF  00
0204A:  CLRF   01
0204C:  CLRF   02
0204E:  CLRF   03
02050:  MOVFF  00,43A
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02054:  MOVFF  42B,43E
02058:  MOVFF  42C,43F
0205C:  MOVFF  42D,440
02060:  CLRF   x41
02062:  MOVF   x3E,W
02064:  MOVWF  00
02066:  CLRF   01
02068:  CLRF   02
0206A:  CLRF   03
0206C:  MOVFF  00,43B
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02070:  MOVF   x2A,W
02072:  MOVWF  00
02074:  CLRF   01
02076:  CLRF   02
02078:  CLRF   03
0207A:  MOVFF  00,43C
....................    
....................       output_low(flash_stream.cs_pin);
0207E:  MOVFF  428,84A
02082:  MOVLB  8
02084:  CLRF   x4B
02086:  MOVLW  0F
02088:  MOVWF  x4D
0208A:  MOVLW  89
0208C:  MOVWF  x4C
0208E:  MOVLB  0
02090:  CALL   1B48
02094:  MOVFF  428,84A
02098:  MOVLB  8
0209A:  CLRF   x4B
0209C:  MOVLW  0F
0209E:  MOVWF  x4D
020A0:  MOVLW  92
020A2:  MOVWF  x4C
020A4:  MOVLB  0
020A6:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
020AA:  MOVFF  429,84D
020AE:  MOVFF  428,84C
020B2:  MOVFF  427,84B
020B6:  MOVFF  426,84A
020BA:  MOVLW  04
020BC:  MOVLB  8
020BE:  MOVWF  x4F
020C0:  MOVLW  38
020C2:  MOVWF  x4E
020C4:  CLRF   x51
020C6:  MOVLW  05
020C8:  MOVWF  x50
020CA:  MOVFF  42F,853
020CE:  MOVFF  42E,852
020D2:  MOVFF  433,857
020D6:  MOVFF  432,856
020DA:  MOVFF  431,855
020DE:  MOVFF  430,854
020E2:  MOVLB  0
020E4:  CALL   1C18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
020E8:  MOVLW  02
020EA:  MOVWF  00
020EC:  DECFSZ 00,F
020EE:  BRA    20EC
020F0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
020F2:  MOVFF  428,84A
020F6:  MOVLW  01
020F8:  MOVLB  8
020FA:  MOVWF  x4B
020FC:  MOVLW  0F
020FE:  MOVWF  x4D
02100:  MOVLW  89
02102:  MOVWF  x4C
02104:  MOVLB  0
02106:  CALL   1B48
0210A:  MOVFF  428,84A
0210E:  MOVLB  8
02110:  CLRF   x4B
02112:  MOVLW  0F
02114:  MOVWF  x4D
02116:  MOVLW  92
02118:  MOVWF  x4C
0211A:  MOVLB  0
0211C:  CALL   1B48
....................    }
....................    return;
02120:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0780C:  MOVLB  4
0780E:  MOVF   x21,F
07810:  BTFSC  FD8.2
07812:  BRA    781A
07814:  MOVLB  0
07816:  GOTO   7980
0781A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0781C:  MOVLW  06
0781E:  MOVLB  4
07820:  MOVWF  x29
07822:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
07824:  MOVLW  02
07826:  MOVLB  4
07828:  MOVWF  x2A
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0782A:  MOVFF  426,438
0782E:  MOVFF  427,439
07832:  CLRF   x3A
07834:  CLRF   x3B
07836:  MOVF   x38,W
07838:  MOVWF  00
0783A:  CLRF   01
0783C:  CLRF   02
0783E:  CLRF   03
07840:  MOVFF  00,42B
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07844:  MOVFF  425,438
07848:  MOVFF  426,439
0784C:  MOVFF  427,43A
07850:  CLRF   x3B
07852:  MOVF   x38,W
07854:  MOVWF  00
07856:  CLRF   01
07858:  CLRF   02
0785A:  CLRF   03
0785C:  MOVFF  00,42C
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
07860:  MOVF   x24,W
07862:  MOVWF  00
07864:  CLRF   01
07866:  CLRF   02
07868:  CLRF   03
0786A:  MOVFF  00,42D
....................       flash_cmd[4] = write_data;
0786E:  MOVFF  428,42E
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07872:  MOVFF  422,84A
07876:  MOVLB  8
07878:  CLRF   x4B
0787A:  MOVLW  0F
0787C:  MOVWF  x4D
0787E:  MOVLW  89
07880:  MOVWF  x4C
07882:  MOVLB  0
07884:  CALL   1B48
07888:  MOVFF  422,84A
0788C:  MOVLB  8
0788E:  CLRF   x4B
07890:  MOVLW  0F
07892:  MOVWF  x4D
07894:  MOVLW  92
07896:  MOVWF  x4C
07898:  MOVLB  0
0789A:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0789E:  MOVFF  423,847
078A2:  MOVFF  422,846
078A6:  MOVFF  421,845
078AA:  MOVFF  420,844
078AE:  MOVLW  04
078B0:  MOVLB  8
078B2:  MOVWF  x49
078B4:  MOVLW  29
078B6:  MOVWF  x48
078B8:  CLRF   x4B
078BA:  MOVLW  01
078BC:  MOVWF  x4A
078BE:  MOVLB  0
078C0:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
078C4:  MOVFF  422,84A
078C8:  MOVLW  01
078CA:  MOVLB  8
078CC:  MOVWF  x4B
078CE:  MOVLW  0F
078D0:  MOVWF  x4D
078D2:  MOVLW  89
078D4:  MOVWF  x4C
078D6:  MOVLB  0
078D8:  CALL   1B48
078DC:  MOVFF  422,84A
078E0:  MOVLB  8
078E2:  CLRF   x4B
078E4:  MOVLW  0F
078E6:  MOVWF  x4D
078E8:  MOVLW  92
078EA:  MOVWF  x4C
078EC:  MOVLB  0
078EE:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
078F2:  MOVFF  422,84A
078F6:  MOVLB  8
078F8:  CLRF   x4B
078FA:  MOVLW  0F
078FC:  MOVWF  x4D
078FE:  MOVLW  89
07900:  MOVWF  x4C
07902:  MOVLB  0
07904:  CALL   1B48
07908:  MOVFF  422,84A
0790C:  MOVLB  8
0790E:  CLRF   x4B
07910:  MOVLW  0F
07912:  MOVWF  x4D
07914:  MOVLW  92
07916:  MOVWF  x4C
07918:  MOVLB  0
0791A:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0791E:  MOVFF  423,847
07922:  MOVFF  422,846
07926:  MOVFF  421,845
0792A:  MOVFF  420,844
0792E:  MOVLW  04
07930:  MOVLB  8
07932:  MOVWF  x49
07934:  MOVLW  2A
07936:  MOVWF  x48
07938:  CLRF   x4B
0793A:  MOVLW  05
0793C:  MOVWF  x4A
0793E:  MOVLB  0
07940:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
07944:  MOVLW  02
07946:  MOVWF  00
07948:  DECFSZ 00,F
0794A:  BRA    7948
0794C:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0794E:  MOVFF  422,84A
07952:  MOVLW  01
07954:  MOVLB  8
07956:  MOVWF  x4B
07958:  MOVLW  0F
0795A:  MOVWF  x4D
0795C:  MOVLW  89
0795E:  MOVWF  x4C
07960:  MOVLB  0
07962:  CALL   1B48
07966:  MOVFF  422,84A
0796A:  MOVLB  8
0796C:  CLRF   x4B
0796E:  MOVLW  0F
07970:  MOVWF  x4D
07972:  MOVLW  92
07974:  MOVWF  x4C
07976:  MOVLB  0
07978:  CALL   1B48
....................    }
0797C:  GOTO   7B0A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
07980:  MOVLB  4
07982:  DECFSZ x21,W
07984:  BRA    798A
07986:  BRA    7990
07988:  MOVLB  0
0798A:  MOVLB  0
0798C:  GOTO   7B0A
07990:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
07992:  MOVLW  06
07994:  MOVLB  4
07996:  MOVWF  x2F
07998:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
0799A:  MOVLW  12
0799C:  MOVLB  4
0799E:  MOVWF  x30
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
079A0:  MOVFF  427,438
079A4:  CLRF   x39
079A6:  CLRF   x3A
079A8:  CLRF   x3B
079AA:  MOVF   x38,W
079AC:  MOVWF  00
079AE:  CLRF   01
079B0:  CLRF   02
079B2:  CLRF   03
079B4:  MOVFF  00,431
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
079B8:  MOVFF  426,438
079BC:  MOVFF  427,439
079C0:  CLRF   x3A
079C2:  CLRF   x3B
079C4:  MOVF   x38,W
079C6:  MOVWF  00
079C8:  CLRF   01
079CA:  CLRF   02
079CC:  CLRF   03
079CE:  MOVFF  00,432
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
079D2:  MOVFF  425,438
079D6:  MOVFF  426,439
079DA:  MOVFF  427,43A
079DE:  CLRF   x3B
079E0:  MOVF   x38,W
079E2:  MOVWF  00
079E4:  CLRF   01
079E6:  CLRF   02
079E8:  CLRF   03
079EA:  MOVFF  00,433
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
079EE:  MOVF   x24,W
079F0:  MOVWF  00
079F2:  CLRF   01
079F4:  CLRF   02
079F6:  CLRF   03
079F8:  MOVFF  00,434
....................       flash_cmd[5] = write_data;
079FC:  MOVFF  428,435
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07A00:  MOVFF  422,84A
07A04:  MOVLB  8
07A06:  CLRF   x4B
07A08:  MOVLW  0F
07A0A:  MOVWF  x4D
07A0C:  MOVLW  89
07A0E:  MOVWF  x4C
07A10:  MOVLB  0
07A12:  CALL   1B48
07A16:  MOVFF  422,84A
07A1A:  MOVLB  8
07A1C:  CLRF   x4B
07A1E:  MOVLW  0F
07A20:  MOVWF  x4D
07A22:  MOVLW  92
07A24:  MOVWF  x4C
07A26:  MOVLB  0
07A28:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
07A2C:  MOVFF  423,847
07A30:  MOVFF  422,846
07A34:  MOVFF  421,845
07A38:  MOVFF  420,844
07A3C:  MOVLW  04
07A3E:  MOVLB  8
07A40:  MOVWF  x49
07A42:  MOVLW  2F
07A44:  MOVWF  x48
07A46:  CLRF   x4B
07A48:  MOVLW  01
07A4A:  MOVWF  x4A
07A4C:  MOVLB  0
07A4E:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
07A52:  MOVFF  422,84A
07A56:  MOVLW  01
07A58:  MOVLB  8
07A5A:  MOVWF  x4B
07A5C:  MOVLW  0F
07A5E:  MOVWF  x4D
07A60:  MOVLW  89
07A62:  MOVWF  x4C
07A64:  MOVLB  0
07A66:  CALL   1B48
07A6A:  MOVFF  422,84A
07A6E:  MOVLB  8
07A70:  CLRF   x4B
07A72:  MOVLW  0F
07A74:  MOVWF  x4D
07A76:  MOVLW  92
07A78:  MOVWF  x4C
07A7A:  MOVLB  0
07A7C:  CALL   1B48
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
07A80:  MOVFF  422,84A
07A84:  MOVLB  8
07A86:  CLRF   x4B
07A88:  MOVLW  0F
07A8A:  MOVWF  x4D
07A8C:  MOVLW  89
07A8E:  MOVWF  x4C
07A90:  MOVLB  0
07A92:  CALL   1B48
07A96:  MOVFF  422,84A
07A9A:  MOVLB  8
07A9C:  CLRF   x4B
07A9E:  MOVLW  0F
07AA0:  MOVWF  x4D
07AA2:  MOVLW  92
07AA4:  MOVWF  x4C
07AA6:  MOVLB  0
07AA8:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
07AAC:  MOVFF  423,847
07AB0:  MOVFF  422,846
07AB4:  MOVFF  421,845
07AB8:  MOVFF  420,844
07ABC:  MOVLW  04
07ABE:  MOVLB  8
07AC0:  MOVWF  x49
07AC2:  MOVLW  30
07AC4:  MOVWF  x48
07AC6:  CLRF   x4B
07AC8:  MOVLW  06
07ACA:  MOVWF  x4A
07ACC:  MOVLB  0
07ACE:  CALL   2C24
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
07AD2:  MOVLW  02
07AD4:  MOVWF  00
07AD6:  DECFSZ 00,F
07AD8:  BRA    7AD6
07ADA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07ADC:  MOVFF  422,84A
07AE0:  MOVLW  01
07AE2:  MOVLB  8
07AE4:  MOVWF  x4B
07AE6:  MOVLW  0F
07AE8:  MOVWF  x4D
07AEA:  MOVLW  89
07AEC:  MOVWF  x4C
07AEE:  MOVLB  0
07AF0:  CALL   1B48
07AF4:  MOVFF  422,84A
07AF8:  MOVLB  8
07AFA:  CLRF   x4B
07AFC:  MOVLW  0F
07AFE:  MOVWF  x4D
07B00:  MOVLW  92
07B02:  MOVWF  x4C
07B04:  MOVLB  0
07B06:  CALL   1B48
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
07B0A:  MOVLB  4
07B0C:  CLRF   x36
07B0E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
07B10:  MOVFF  423,847
07B14:  MOVFF  422,846
07B18:  MOVFF  421,845
07B1C:  MOVFF  420,844
07B20:  CALL   2E90
07B24:  MOVF   01,W
07B26:  ANDLW  01
07B28:  SUBLW  01
07B2A:  BTFSS  FD8.2
07B2C:  GOTO   7B7E
....................       if(timeout_counter > 10)
07B30:  MOVLB  4
07B32:  MOVF   x36,W
07B34:  SUBLW  0A
07B36:  BTFSS  FD8.0
07B38:  BRA    7B40
07B3A:  MOVLB  0
07B3C:  GOTO   7B52
07B40:  MOVLB  0
....................          delay_ms(200);
07B42:  MOVLW  C8
07B44:  MOVLB  8
07B46:  MOVWF  x44
07B48:  MOVLB  0
07B4A:  CALL   179E
07B4E:  GOTO   7B5E
....................       else
....................          delay_ms(10);   
07B52:  MOVLW  0A
07B54:  MOVLB  8
07B56:  MOVWF  x44
07B58:  MOVLB  0
07B5A:  CALL   179E
....................       
....................       if(timeout_counter > 100){
07B5E:  MOVLB  4
07B60:  MOVF   x36,W
07B62:  SUBLW  64
07B64:  BTFSS  FD8.0
07B66:  BRA    7B6E
07B68:  MOVLB  0
07B6A:  GOTO   7B74
07B6E:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
07B70:  GOTO   7B7E
....................       }  
....................       timeout_counter++;
07B74:  MOVLB  4
07B76:  INCF   x36,F
07B78:  MOVLB  0
07B7A:  GOTO   7B10
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
07B7E:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02F30:  MOVLB  8
02F32:  MOVF   x2D,F
02F34:  BTFSC  FD8.2
02F36:  BRA    2F3E
02F38:  MOVLB  0
02F3A:  GOTO   30AC
02F3E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02F40:  MOVLW  06
02F42:  MOVLB  8
02F44:  MOVWF  x38
02F46:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
02F48:  MOVLW  02
02F4A:  MOVLB  8
02F4C:  MOVWF  x39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02F4E:  MOVFF  832,845
02F52:  MOVFF  833,846
02F56:  CLRF   x47
02F58:  CLRF   x48
02F5A:  MOVF   x45,W
02F5C:  MOVWF  00
02F5E:  CLRF   01
02F60:  CLRF   02
02F62:  CLRF   03
02F64:  MOVFF  00,83A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02F68:  MOVFF  831,845
02F6C:  MOVFF  832,846
02F70:  MOVFF  833,847
02F74:  CLRF   x48
02F76:  MOVF   x45,W
02F78:  MOVWF  00
02F7A:  CLRF   01
02F7C:  CLRF   02
02F7E:  CLRF   03
02F80:  MOVFF  00,83B
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02F84:  MOVF   x30,W
02F86:  MOVWF  00
02F88:  CLRF   01
02F8A:  CLRF   02
02F8C:  CLRF   03
02F8E:  MOVFF  00,83C
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02F92:  MOVFF  82E,84A
02F96:  CLRF   x4B
02F98:  MOVLW  0F
02F9A:  MOVWF  x4D
02F9C:  MOVLW  89
02F9E:  MOVWF  x4C
02FA0:  MOVLB  0
02FA2:  CALL   1B48
02FA6:  MOVFF  82E,84A
02FAA:  MOVLB  8
02FAC:  CLRF   x4B
02FAE:  MOVLW  0F
02FB0:  MOVWF  x4D
02FB2:  MOVLW  92
02FB4:  MOVWF  x4C
02FB6:  MOVLB  0
02FB8:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02FBC:  MOVFF  82F,847
02FC0:  MOVFF  82E,846
02FC4:  MOVFF  82D,845
02FC8:  MOVFF  82C,844
02FCC:  MOVLW  08
02FCE:  MOVLB  8
02FD0:  MOVWF  x49
02FD2:  MOVLW  38
02FD4:  MOVWF  x48
02FD6:  CLRF   x4B
02FD8:  MOVLW  01
02FDA:  MOVWF  x4A
02FDC:  MOVLB  0
02FDE:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
02FE2:  MOVFF  82E,84A
02FE6:  MOVLW  01
02FE8:  MOVLB  8
02FEA:  MOVWF  x4B
02FEC:  MOVLW  0F
02FEE:  MOVWF  x4D
02FF0:  MOVLW  89
02FF2:  MOVWF  x4C
02FF4:  MOVLB  0
02FF6:  CALL   1B48
02FFA:  MOVFF  82E,84A
02FFE:  MOVLB  8
03000:  CLRF   x4B
03002:  MOVLW  0F
03004:  MOVWF  x4D
03006:  MOVLW  92
03008:  MOVWF  x4C
0300A:  MOVLB  0
0300C:  CALL   1B48
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03010:  MOVFF  82E,84A
03014:  MOVLB  8
03016:  CLRF   x4B
03018:  MOVLW  0F
0301A:  MOVWF  x4D
0301C:  MOVLW  89
0301E:  MOVWF  x4C
03020:  MOVLB  0
03022:  CALL   1B48
03026:  MOVFF  82E,84A
0302A:  MOVLB  8
0302C:  CLRF   x4B
0302E:  MOVLW  0F
03030:  MOVWF  x4D
03032:  MOVLW  92
03034:  MOVWF  x4C
03036:  MOVLB  0
03038:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0303C:  MOVFF  82F,847
03040:  MOVFF  82E,846
03044:  MOVFF  82D,845
03048:  MOVFF  82C,844
0304C:  MOVLW  08
0304E:  MOVLB  8
03050:  MOVWF  x49
03052:  MOVLW  39
03054:  MOVWF  x48
03056:  MOVLW  04
03058:  MOVWF  x4A
0305A:  MOVFF  835,84C
0305E:  MOVFF  834,84B
03062:  MOVFF  837,84E
03066:  MOVFF  836,84D
0306A:  MOVLB  0
0306C:  CALL   2D14
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03070:  MOVLW  02
03072:  MOVWF  00
03074:  DECFSZ 00,F
03076:  BRA    3074
03078:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0307A:  MOVFF  82E,84A
0307E:  MOVLW  01
03080:  MOVLB  8
03082:  MOVWF  x4B
03084:  MOVLW  0F
03086:  MOVWF  x4D
03088:  MOVLW  89
0308A:  MOVWF  x4C
0308C:  MOVLB  0
0308E:  CALL   1B48
03092:  MOVFF  82E,84A
03096:  MOVLB  8
03098:  CLRF   x4B
0309A:  MOVLW  0F
0309C:  MOVWF  x4D
0309E:  MOVLW  92
030A0:  MOVWF  x4C
030A2:  MOVLB  0
030A4:  CALL   1B48
....................    }
030A8:  GOTO   323E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
030AC:  MOVLB  8
030AE:  DECFSZ x2D,W
030B0:  BRA    30B6
030B2:  BRA    30BC
030B4:  MOVLB  0
030B6:  MOVLB  0
030B8:  GOTO   323E
030BC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
030BE:  MOVLW  06
030C0:  MOVLB  8
030C2:  MOVWF  x3D
030C4:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
030C6:  MOVLW  12
030C8:  MOVLB  8
030CA:  MOVWF  x3E
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
030CC:  MOVFF  833,845
030D0:  CLRF   x46
030D2:  CLRF   x47
030D4:  CLRF   x48
030D6:  MOVF   x45,W
030D8:  MOVWF  00
030DA:  CLRF   01
030DC:  CLRF   02
030DE:  CLRF   03
030E0:  MOVFF  00,83F
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
030E4:  MOVFF  832,845
030E8:  MOVFF  833,846
030EC:  CLRF   x47
030EE:  CLRF   x48
030F0:  MOVF   x45,W
030F2:  MOVWF  00
030F4:  CLRF   01
030F6:  CLRF   02
030F8:  CLRF   03
030FA:  MOVFF  00,840
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
030FE:  MOVFF  831,845
03102:  MOVFF  832,846
03106:  MOVFF  833,847
0310A:  CLRF   x48
0310C:  MOVF   x45,W
0310E:  MOVWF  00
03110:  CLRF   01
03112:  CLRF   02
03114:  CLRF   03
03116:  MOVFF  00,841
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
0311A:  MOVF   x30,W
0311C:  MOVWF  00
0311E:  CLRF   01
03120:  CLRF   02
03122:  CLRF   03
03124:  MOVFF  00,842
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03128:  MOVFF  82E,84A
0312C:  CLRF   x4B
0312E:  MOVLW  0F
03130:  MOVWF  x4D
03132:  MOVLW  89
03134:  MOVWF  x4C
03136:  MOVLB  0
03138:  CALL   1B48
0313C:  MOVFF  82E,84A
03140:  MOVLB  8
03142:  CLRF   x4B
03144:  MOVLW  0F
03146:  MOVWF  x4D
03148:  MOVLW  92
0314A:  MOVWF  x4C
0314C:  MOVLB  0
0314E:  CALL   1B48
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03152:  MOVFF  82F,847
03156:  MOVFF  82E,846
0315A:  MOVFF  82D,845
0315E:  MOVFF  82C,844
03162:  MOVLW  08
03164:  MOVLB  8
03166:  MOVWF  x49
03168:  MOVLW  3D
0316A:  MOVWF  x48
0316C:  CLRF   x4B
0316E:  MOVLW  01
03170:  MOVWF  x4A
03172:  MOVLB  0
03174:  CALL   2C24
....................       output_high(flash_stream.cs_pin);
03178:  MOVFF  82E,84A
0317C:  MOVLW  01
0317E:  MOVLB  8
03180:  MOVWF  x4B
03182:  MOVLW  0F
03184:  MOVWF  x4D
03186:  MOVLW  89
03188:  MOVWF  x4C
0318A:  MOVLB  0
0318C:  CALL   1B48
03190:  MOVFF  82E,84A
03194:  MOVLB  8
03196:  CLRF   x4B
03198:  MOVLW  0F
0319A:  MOVWF  x4D
0319C:  MOVLW  92
0319E:  MOVWF  x4C
031A0:  MOVLB  0
031A2:  CALL   1B48
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
031A6:  MOVFF  82E,84A
031AA:  MOVLB  8
031AC:  CLRF   x4B
031AE:  MOVLW  0F
031B0:  MOVWF  x4D
031B2:  MOVLW  89
031B4:  MOVWF  x4C
031B6:  MOVLB  0
031B8:  CALL   1B48
031BC:  MOVFF  82E,84A
031C0:  MOVLB  8
031C2:  CLRF   x4B
031C4:  MOVLW  0F
031C6:  MOVWF  x4D
031C8:  MOVLW  92
031CA:  MOVWF  x4C
031CC:  MOVLB  0
031CE:  CALL   1B48
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
031D2:  MOVFF  82F,847
031D6:  MOVFF  82E,846
031DA:  MOVFF  82D,845
031DE:  MOVFF  82C,844
031E2:  MOVLW  08
031E4:  MOVLB  8
031E6:  MOVWF  x49
031E8:  MOVLW  3E
031EA:  MOVWF  x48
031EC:  MOVLW  05
031EE:  MOVWF  x4A
031F0:  MOVFF  835,84C
031F4:  MOVFF  834,84B
031F8:  MOVFF  837,84E
031FC:  MOVFF  836,84D
03200:  MOVLB  0
03202:  CALL   2D14
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03206:  MOVLW  02
03208:  MOVWF  00
0320A:  DECFSZ 00,F
0320C:  BRA    320A
0320E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03210:  MOVFF  82E,84A
03214:  MOVLW  01
03216:  MOVLB  8
03218:  MOVWF  x4B
0321A:  MOVLW  0F
0321C:  MOVWF  x4D
0321E:  MOVLW  89
03220:  MOVWF  x4C
03222:  MOVLB  0
03224:  CALL   1B48
03228:  MOVFF  82E,84A
0322C:  MOVLB  8
0322E:  CLRF   x4B
03230:  MOVLW  0F
03232:  MOVWF  x4D
03234:  MOVLW  92
03236:  MOVWF  x4C
03238:  MOVLB  0
0323A:  CALL   1B48
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0323E:  MOVLB  8
03240:  CLRF   x43
03242:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03244:  MOVFF  82F,847
03248:  MOVFF  82E,846
0324C:  MOVFF  82D,845
03250:  MOVFF  82C,844
03254:  CALL   2E90
03258:  MOVF   01,W
0325A:  ANDLW  01
0325C:  SUBLW  01
0325E:  BTFSS  FD8.2
03260:  GOTO   32B2
....................       if(timeout_counter > 10)
03264:  MOVLB  8
03266:  MOVF   x43,W
03268:  SUBLW  0A
0326A:  BTFSS  FD8.0
0326C:  BRA    3274
0326E:  MOVLB  0
03270:  GOTO   3286
03274:  MOVLB  0
....................          delay_ms(200);
03276:  MOVLW  C8
03278:  MOVLB  8
0327A:  MOVWF  x44
0327C:  MOVLB  0
0327E:  CALL   179E
03282:  GOTO   3292
....................       else
....................          delay_ms(10);   
03286:  MOVLW  0A
03288:  MOVLB  8
0328A:  MOVWF  x44
0328C:  MOVLB  0
0328E:  CALL   179E
....................       
....................       if(timeout_counter > 100){
03292:  MOVLB  8
03294:  MOVF   x43,W
03296:  SUBLW  64
03298:  BTFSS  FD8.0
0329A:  BRA    32A2
0329C:  MOVLB  0
0329E:  GOTO   32A8
032A2:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
032A4:  GOTO   32B2
....................       }  
....................       timeout_counter++;
032A8:  MOVLB  8
032AA:  INCF   x43,F
032AC:  MOVLB  0
032AE:  GOTO   3244
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
032B2:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
01E4C:  MOVLW  9F
01E4E:  MOVLB  8
01E50:  MOVWF  x44
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
01E52:  MOVFF  82E,84A
01E56:  CLRF   x4B
01E58:  MOVLW  0F
01E5A:  MOVWF  x4D
01E5C:  MOVLW  89
01E5E:  MOVWF  x4C
01E60:  MOVLB  0
01E62:  CALL   1B48
01E66:  MOVFF  82E,84A
01E6A:  MOVLB  8
01E6C:  CLRF   x4B
01E6E:  MOVLW  0F
01E70:  MOVWF  x4D
01E72:  MOVLW  92
01E74:  MOVWF  x4C
01E76:  MOVLB  0
01E78:  CALL   1B48
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
01E7C:  MOVFF  82F,84D
01E80:  MOVFF  82E,84C
01E84:  MOVFF  82D,84B
01E88:  MOVFF  82C,84A
01E8C:  MOVLW  08
01E8E:  MOVLB  8
01E90:  MOVWF  x4F
01E92:  MOVLW  44
01E94:  MOVWF  x4E
01E96:  CLRF   x51
01E98:  MOVLW  01
01E9A:  MOVWF  x50
01E9C:  MOVLW  08
01E9E:  MOVWF  x53
01EA0:  MOVLW  30
01EA2:  MOVWF  x52
01EA4:  CLRF   x57
01EA6:  CLRF   x56
01EA8:  CLRF   x55
01EAA:  MOVLW  14
01EAC:  MOVWF  x54
01EAE:  MOVLB  0
01EB0:  CALL   1C18
....................    output_high(flash_stream.cs_pin);
01EB4:  MOVFF  82E,84A
01EB8:  MOVLW  01
01EBA:  MOVLB  8
01EBC:  MOVWF  x4B
01EBE:  MOVLW  0F
01EC0:  MOVWF  x4D
01EC2:  MOVLW  89
01EC4:  MOVWF  x4C
01EC6:  MOVLB  0
01EC8:  CALL   1B48
01ECC:  MOVFF  82E,84A
01ED0:  MOVLB  8
01ED2:  CLRF   x4B
01ED4:  MOVLW  0F
01ED6:  MOVWF  x4D
01ED8:  MOVLW  92
01EDA:  MOVWF  x4C
01EDC:  MOVLB  0
01EDE:  CALL   1B48
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
01EE2:  MOVLB  8
01EE4:  MOVF   x30,W
01EE6:  SUBLW  20
01EE8:  BTFSC  FD8.2
01EEA:  BRA    1EF2
01EEC:  MOVLB  0
01EEE:  GOTO   1F00
01EF2:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
01EF4:  MOVLW  01
01EF6:  MOVWF  01
01EF8:  GOTO   1F08
....................    }
01EFC:  GOTO   1F08
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
01F00:  MOVLW  00
01F02:  MOVWF  01
01F04:  GOTO   1F08
....................    }
01F08:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03BCE:  MOVLB  7
03BD0:  MOVF   xEC,W
03BD2:  MOVWF  FE9
03BD4:  MOVF   xED,W
03BD6:  MOVWF  FEA
03BD8:  MOVFF  FEF,7EF
03BDC:  MOVLW  01
03BDE:  MOVWF  xF0
03BE0:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03BE2:  MOVLB  7
03BE4:  MOVF   xEE,W
03BE6:  SUBWF  xF0,W
03BE8:  BTFSS  FD8.0
03BEA:  BRA    3BF2
03BEC:  MOVLB  0
03BEE:  GOTO   3C0E
03BF2:  MOVLB  0
....................       crc ^= frame[i++];
03BF4:  MOVLB  7
03BF6:  MOVF   xF0,W
03BF8:  INCF   xF0,F
03BFA:  ADDWF  xEC,W
03BFC:  MOVWF  FE9
03BFE:  MOVLW  00
03C00:  ADDWFC xED,W
03C02:  MOVWF  FEA
03C04:  MOVF   FEF,W
03C06:  XORWF  xEF,F
03C08:  MOVLB  0
03C0A:  GOTO   3BE2
....................    return crc;
03C0E:  MOVLB  7
03C10:  MOVF   xEF,W
03C12:  MOVWF  01
03C14:  MOVLB  0
03C16:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
07CFE:  MOVLW  96
07D00:  MOVWF  FF6
07D02:  MOVLW  02
07D04:  MOVWF  FF7
07D06:  MOVLW  00
07D08:  MOVWF  FF8
07D0A:  CALL   181E
....................     fprintf(PC, "___Start copy_data__\r\n");
07D0E:  MOVLW  B0
07D10:  MOVWF  FF6
07D12:  MOVLW  02
07D14:  MOVWF  FF7
07D16:  MOVLW  00
07D18:  MOVWF  FF8
07D1A:  CALL   181E
....................     
....................     int8 buffer[MAX_READ_SIZE];
....................     
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
07D1E:  MOVLB  3
07D20:  CLRF   xC6
07D22:  MOVLB  0
07D24:  CALL   7126
07D28:  MOVF   01,F
07D2A:  BTFSS  FD8.2
07D2C:  GOTO   8AE6
....................     {
....................       fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
07D30:  MOVLW  C8
07D32:  MOVWF  FF6
07D34:  MOVLW  02
07D36:  MOVWF  FF7
07D38:  MOVLW  00
07D3A:  MOVWF  FF8
07D3C:  MOVLW  07
07D3E:  MOVLB  7
07D40:  MOVWF  xEC
07D42:  MOVLB  0
07D44:  CALL   184E
07D48:  MOVFF  3C6,41B
07D4C:  MOVLW  18
07D4E:  MOVLB  4
07D50:  MOVWF  x1C
07D52:  MOVLB  0
07D54:  CALL   7214
07D58:  MOVLW  D1
07D5A:  MOVWF  FF6
07D5C:  MOVLW  02
07D5E:  MOVWF  FF7
07D60:  MOVLW  00
07D62:  MOVWF  FF8
07D64:  MOVLW  12
07D66:  MOVLB  7
07D68:  MOVWF  xEC
07D6A:  MOVLB  0
07D6C:  CALL   184E
....................       
....................       // value initialize
....................       SmfDataStruct *smf_data = dequeue_smf_data();
....................       MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
07D70:  GOTO   7324
07D74:  MOVFF  02,3C8
07D78:  MOVFF  01,3C7
07D7C:  MOVLB  3
07D7E:  MOVF   xC7,W
07D80:  MOVWF  01
07D82:  MOVF   xC8,W
07D84:  MOVWF  03
07D86:  MOVF   01,W
07D88:  MOVWF  FE9
07D8A:  MOVFF  03,FEA
*
07D94:  MOVLB  4
07D96:  MOVWF  x17
07D98:  MOVFF  417,41E
07D9C:  MOVLB  0
07D9E:  GOTO   737E
07DA2:  MOVFF  02,03
07DA6:  MOVF   01,W
07DA8:  MOVWF  FE1
07DAA:  MOVFF  03,FE2
07DAE:  MOVLW  03
07DB0:  MOVWF  FEA
07DB2:  MOVLW  C9
07DB4:  MOVWF  FE9
07DB6:  MOVLW  09
07DB8:  MOVWF  01
07DBA:  MOVFF  FE6,FEE
07DBE:  DECFSZ 01,F
07DC0:  GOTO   7DBA
....................       status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
07DC4:  MOVLW  01
07DC6:  MOVLB  3
07DC8:  ADDWF  xC6,W
07DCA:  CLRF   03
07DCC:  ADDLW  48
07DCE:  MOVWF  FE9
07DD0:  MOVLW  00
07DD2:  ADDWFC 03,W
07DD4:  MOVWF  FEA
07DD6:  MOVFF  3D1,FEF
....................       unsigned int32 mis_start_address = mission_type.start_address;
....................       unsigned int32 mis_end_address = mission_type.end_address;
....................       unsigned int32 write_src = smf_data->src;
....................       unsigned int32 write_size = smf_data->size;
07DDA:  MOVFF  3CC,3D5
07DDE:  MOVFF  3CB,3D4
07DE2:  MOVFF  3CA,3D3
07DE6:  MOVFF  3C9,3D2
07DEA:  MOVFF  3D0,3D9
07DEE:  MOVFF  3CF,3D8
07DF2:  MOVFF  3CE,3D7
07DF6:  MOVFF  3CD,3D6
07DFA:  MOVLW  01
07DFC:  ADDWF  xC7,W
07DFE:  MOVWF  FE9
07E00:  MOVLW  00
07E02:  ADDWFC xC8,W
07E04:  MOVWF  FEA
07E06:  MOVFF  FEF,3DA
07E0A:  MOVFF  FEC,3DB
07E0E:  MOVFF  FEC,3DC
07E12:  MOVFF  FEC,3DD
07E16:  MOVF   FED,F
07E18:  MOVF   FED,F
07E1A:  MOVF   FED,F
07E1C:  MOVLW  05
07E1E:  ADDWF  xC7,W
07E20:  MOVWF  FE9
07E22:  MOVLW  00
07E24:  ADDWFC xC8,W
07E26:  MOVWF  FEA
07E28:  MOVFF  FEF,3DE
07E2C:  MOVFF  FEC,3DF
07E30:  MOVFF  FEC,3E0
07E34:  MOVFF  FEC,3E1
07E38:  MOVF   FED,F
07E3A:  MOVF   FED,F
07E3C:  MOVF   FED,F
....................       fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
07E3E:  MOVLW  E4
07E40:  MOVWF  FF6
07E42:  MOVLW  02
07E44:  MOVWF  FF7
07E46:  MOVLW  00
07E48:  MOVWF  FF8
07E4A:  MOVLW  25
07E4C:  MOVLB  7
07E4E:  MOVWF  xEC
07E50:  MOVLB  0
07E52:  CALL   184E
07E56:  MOVFF  3D5,427
07E5A:  MOVLW  37
07E5C:  MOVLB  4
07E5E:  MOVWF  x28
07E60:  MOVLB  0
07E62:  CALL   1A10
07E66:  MOVFF  3D4,427
07E6A:  MOVLW  37
07E6C:  MOVLB  4
07E6E:  MOVWF  x28
07E70:  MOVLB  0
07E72:  CALL   1A10
07E76:  MOVFF  3D3,427
07E7A:  MOVLW  37
07E7C:  MOVLB  4
07E7E:  MOVWF  x28
07E80:  MOVLB  0
07E82:  CALL   1A10
07E86:  MOVFF  3D2,427
07E8A:  MOVLW  37
07E8C:  MOVLB  4
07E8E:  MOVWF  x28
07E90:  MOVLB  0
07E92:  CALL   1A10
07E96:  MOVLW  0D
07E98:  MOVLB  8
07E9A:  MOVWF  x2F
07E9C:  MOVLB  0
07E9E:  CALL   17CC
07EA2:  MOVLW  0A
07EA4:  MOVLB  8
07EA6:  MOVWF  x2F
07EA8:  MOVLB  0
07EAA:  CALL   17CC
....................       fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
07EAE:  MOVLW  10
07EB0:  MOVWF  FF6
07EB2:  MOVLW  03
07EB4:  MOVWF  FF7
07EB6:  MOVLW  00
07EB8:  MOVWF  FF8
07EBA:  MOVLW  25
07EBC:  MOVLB  7
07EBE:  MOVWF  xEC
07EC0:  MOVLB  0
07EC2:  CALL   184E
07EC6:  MOVFF  3D9,427
07ECA:  MOVLW  37
07ECC:  MOVLB  4
07ECE:  MOVWF  x28
07ED0:  MOVLB  0
07ED2:  CALL   1A10
07ED6:  MOVFF  3D8,427
07EDA:  MOVLW  37
07EDC:  MOVLB  4
07EDE:  MOVWF  x28
07EE0:  MOVLB  0
07EE2:  CALL   1A10
07EE6:  MOVFF  3D7,427
07EEA:  MOVLW  37
07EEC:  MOVLB  4
07EEE:  MOVWF  x28
07EF0:  MOVLB  0
07EF2:  CALL   1A10
07EF6:  MOVFF  3D6,427
07EFA:  MOVLW  37
07EFC:  MOVLB  4
07EFE:  MOVWF  x28
07F00:  MOVLB  0
07F02:  CALL   1A10
07F06:  MOVLW  0D
07F08:  MOVLB  8
07F0A:  MOVWF  x2F
07F0C:  MOVLB  0
07F0E:  CALL   17CC
07F12:  MOVLW  0A
07F14:  MOVLB  8
07F16:  MOVWF  x2F
07F18:  MOVLB  0
07F1A:  CALL   17CC
....................       fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
07F1E:  MOVLW  3C
07F20:  MOVWF  FF6
07F22:  MOVLW  03
07F24:  MOVWF  FF7
07F26:  MOVLW  00
07F28:  MOVWF  FF8
07F2A:  MOVLW  25
07F2C:  MOVLB  7
07F2E:  MOVWF  xEC
07F30:  MOVLB  0
07F32:  CALL   184E
07F36:  MOVFF  3DD,427
07F3A:  MOVLW  37
07F3C:  MOVLB  4
07F3E:  MOVWF  x28
07F40:  MOVLB  0
07F42:  CALL   1A10
07F46:  MOVFF  3DC,427
07F4A:  MOVLW  37
07F4C:  MOVLB  4
07F4E:  MOVWF  x28
07F50:  MOVLB  0
07F52:  CALL   1A10
07F56:  MOVFF  3DB,427
07F5A:  MOVLW  37
07F5C:  MOVLB  4
07F5E:  MOVWF  x28
07F60:  MOVLB  0
07F62:  CALL   1A10
07F66:  MOVFF  3DA,427
07F6A:  MOVLW  37
07F6C:  MOVLB  4
07F6E:  MOVWF  x28
07F70:  MOVLB  0
07F72:  CALL   1A10
07F76:  MOVLW  0D
07F78:  MOVLB  8
07F7A:  MOVWF  x2F
07F7C:  MOVLB  0
07F7E:  CALL   17CC
07F82:  MOVLW  0A
07F84:  MOVLB  8
07F86:  MOVWF  x2F
07F88:  MOVLB  0
07F8A:  CALL   17CC
....................       fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
07F8E:  MOVLW  68
07F90:  MOVWF  FF6
07F92:  MOVLW  03
07F94:  MOVWF  FF7
07F96:  MOVLW  00
07F98:  MOVWF  FF8
07F9A:  MOVLW  25
07F9C:  MOVLB  7
07F9E:  MOVWF  xEC
07FA0:  MOVLB  0
07FA2:  CALL   184E
07FA6:  MOVLW  41
07FA8:  MOVWF  FE9
07FAA:  MOVFF  3E1,41A
07FAE:  MOVFF  3E0,419
07FB2:  MOVFF  3DF,418
07FB6:  MOVFF  3DE,417
07FBA:  CALL   74F6
07FBE:  MOVLW  90
07FC0:  MOVWF  FF6
07FC2:  MOVLW  03
07FC4:  MOVWF  FF7
07FC6:  MOVLW  00
07FC8:  MOVWF  FF8
07FCA:  MOVLW  04
07FCC:  MOVLB  7
07FCE:  MOVWF  xEC
07FD0:  MOVLB  0
07FD2:  CALL   184E
07FD6:  MOVFF  3E1,427
07FDA:  MOVLW  57
07FDC:  MOVLB  4
07FDE:  MOVWF  x28
07FE0:  MOVLB  0
07FE2:  CALL   1A10
07FE6:  MOVFF  3E0,427
07FEA:  MOVLW  57
07FEC:  MOVLB  4
07FEE:  MOVWF  x28
07FF0:  MOVLB  0
07FF2:  CALL   1A10
07FF6:  MOVFF  3DF,427
07FFA:  MOVLW  57
07FFC:  MOVLB  4
07FFE:  MOVWF  x28
08000:  MOVLB  0
08002:  CALL   1A10
08006:  MOVFF  3DE,427
0800A:  MOVLW  57
0800C:  MOVLB  4
0800E:  MOVWF  x28
08010:  MOVLB  0
08012:  CALL   1A10
08016:  MOVLW  97
08018:  MOVWF  FF6
0801A:  MOVLW  03
0801C:  MOVWF  FF7
0801E:  MOVLW  00
08020:  MOVWF  FF8
08022:  MOVLW  05
08024:  MOVLB  7
08026:  MOVWF  xEC
08028:  MOVLB  0
0802A:  CALL   184E
....................       
....................     
.................... 
.................... 
....................       // read size area
....................         unsigned int8 used_size_bytes[4];
....................         read_data_bytes(SMF, mis_start_address, used_size_bytes, 4);
0802E:  MOVFF  E5,429
08032:  MOVFF  E4,428
08036:  MOVFF  E3,427
0803A:  MOVFF  E2,426
0803E:  MOVFF  3D5,42D
08042:  MOVFF  3D4,42C
08046:  MOVFF  3D3,42B
0804A:  MOVFF  3D2,42A
0804E:  MOVLW  03
08050:  MOVLB  4
08052:  MOVWF  x2F
08054:  MOVLW  E2
08056:  MOVWF  x2E
08058:  CLRF   x33
0805A:  CLRF   x32
0805C:  CLRF   x31
0805E:  MOVLW  04
08060:  MOVWF  x30
08062:  MOVLB  0
08064:  CALL   1F0A
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(SMF, mis_start_address + 4);
08068:  MOVLB  4
0806A:  CLRF   x1A
0806C:  CLRF   x19
0806E:  CLRF   x18
08070:  MOVFF  3E5,417
08074:  MOVFF  417,41A
08078:  CLRF   x17
0807A:  CLRF   x18
0807C:  CLRF   x19
0807E:  CLRF   x1F
08080:  CLRF   x1E
08082:  CLRF   x1D
08084:  MOVFF  3E4,41C
08088:  MOVFF  41D,03
0808C:  MOVFF  41C,02
08090:  CLRF   00
08092:  CLRF   01
08094:  MOVF   00,W
08096:  IORWF  x17,F
08098:  MOVF   01,W
0809A:  IORWF  x18,F
0809C:  MOVF   02,W
0809E:  IORWF  x19,F
080A0:  MOVF   03,W
080A2:  IORWF  x1A,F
080A4:  CLRF   x1F
080A6:  CLRF   x1E
080A8:  CLRF   x1D
080AA:  MOVFF  3E3,41C
080AE:  MOVFF  41E,03
080B2:  MOVFF  41D,02
080B6:  MOVFF  41C,01
080BA:  CLRF   00
080BC:  MOVF   00,W
080BE:  IORWF  x17,F
080C0:  MOVF   01,W
080C2:  IORWF  x18,F
080C4:  MOVF   02,W
080C6:  IORWF  x19,F
080C8:  MOVF   03,W
080CA:  IORWF  x1A,F
080CC:  MOVFF  3E2,00
080D0:  CLRF   01
080D2:  CLRF   02
080D4:  CLRF   03
080D6:  MOVF   00,W
080D8:  IORWF  x17,W
080DA:  MOVLB  3
080DC:  MOVWF  xE6
080DE:  MOVF   01,W
080E0:  MOVLB  4
080E2:  IORWF  x18,W
080E4:  MOVLB  3
080E6:  MOVWF  xE7
080E8:  MOVF   02,W
080EA:  MOVLB  4
080EC:  IORWF  x19,W
080EE:  MOVLB  3
080F0:  MOVWF  xE8
080F2:  MOVF   03,W
080F4:  MOVLB  4
080F6:  IORWF  x1A,W
080F8:  MOVLB  3
080FA:  MOVWF  xE9
080FC:  MOVLW  04
080FE:  ADDWF  xD2,W
08100:  MOVLB  4
08102:  MOVWF  x17
08104:  MOVLW  00
08106:  MOVLB  3
08108:  ADDWFC xD3,W
0810A:  MOVLB  4
0810C:  MOVWF  x18
0810E:  MOVLW  00
08110:  MOVLB  3
08112:  ADDWFC xD4,W
08114:  MOVLB  4
08116:  MOVWF  x19
08118:  MOVLW  00
0811A:  MOVLB  3
0811C:  ADDWFC xD5,W
0811E:  MOVLB  4
08120:  MOVWF  x1A
08122:  MOVFF  E5,425
08126:  MOVFF  E4,424
0812A:  MOVFF  E3,423
0812E:  MOVFF  E2,422
08132:  MOVFF  41A,429
08136:  MOVFF  419,428
0813A:  MOVFF  418,427
0813E:  MOVFF  417,426
08142:  MOVLB  0
08144:  GOTO   75F6
08148:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
0814C:  MOVLW  9E
0814E:  MOVWF  FF6
08150:  MOVLW  03
08152:  MOVWF  FF7
08154:  MOVLW  00
08156:  MOVWF  FF8
08158:  CALL   181E
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
0815C:  MOVLW  B0
0815E:  MOVWF  FF6
08160:  MOVLW  03
08162:  MOVWF  FF7
08164:  MOVLW  00
08166:  MOVWF  FF8
08168:  MOVLW  0C
0816A:  MOVLB  7
0816C:  MOVWF  xEC
0816E:  MOVLB  0
08170:  CALL   184E
08174:  MOVLW  41
08176:  MOVWF  FE9
08178:  MOVFF  3E9,41A
0817C:  MOVFF  3E8,419
08180:  MOVFF  3E7,418
08184:  MOVFF  3E6,417
08188:  CALL   74F6
0818C:  MOVLW  BF
0818E:  MOVWF  FF6
08190:  MOVLW  03
08192:  MOVWF  FF7
08194:  MOVLW  00
08196:  MOVWF  FF8
08198:  MOVLW  08
0819A:  MOVLB  7
0819C:  MOVWF  xEC
0819E:  MOVLB  0
081A0:  CALL   184E
081A4:  MOVFF  3D5,427
081A8:  MOVLW  37
081AA:  MOVLB  4
081AC:  MOVWF  x28
081AE:  MOVLB  0
081B0:  CALL   1A10
081B4:  MOVFF  3D4,427
081B8:  MOVLW  37
081BA:  MOVLB  4
081BC:  MOVWF  x28
081BE:  MOVLB  0
081C0:  CALL   1A10
081C4:  MOVFF  3D3,427
081C8:  MOVLW  37
081CA:  MOVLB  4
081CC:  MOVWF  x28
081CE:  MOVLB  0
081D0:  CALL   1A10
081D4:  MOVFF  3D2,427
081D8:  MOVLW  37
081DA:  MOVLB  4
081DC:  MOVWF  x28
081DE:  MOVLB  0
081E0:  CALL   1A10
081E4:  MOVLW  CC
081E6:  MOVWF  FF6
081E8:  MOVLW  03
081EA:  MOVWF  FF7
081EC:  MOVLW  00
081EE:  MOVWF  FF8
081F0:  MOVLW  03
081F2:  MOVLB  7
081F4:  MOVWF  xEC
081F6:  MOVLB  0
081F8:  CALL   184E
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
081FC:  MOVLW  04
081FE:  MOVLB  3
08200:  ADDWF  xD2,W
08202:  MOVLB  4
08204:  MOVWF  x17
08206:  MOVLW  00
08208:  MOVLB  3
0820A:  ADDWFC xD3,W
0820C:  MOVLB  4
0820E:  MOVWF  x18
08210:  MOVLW  00
08212:  MOVLB  3
08214:  ADDWFC xD4,W
08216:  MOVLB  4
08218:  MOVWF  x19
0821A:  MOVLW  00
0821C:  MOVLB  3
0821E:  ADDWFC xD5,W
08220:  MOVLB  4
08222:  MOVWF  x1A
08224:  MOVLW  D0
08226:  MOVWF  FF6
08228:  MOVLW  03
0822A:  MOVWF  FF7
0822C:  MOVLW  00
0822E:  MOVWF  FF8
08230:  MOVLW  0C
08232:  MOVLB  7
08234:  MOVWF  xEC
08236:  MOVLB  0
08238:  CALL   184E
0823C:  MOVFF  3EA,41B
08240:  MOVLW  18
08242:  MOVLB  4
08244:  MOVWF  x1C
08246:  MOVLB  0
08248:  CALL   7214
0824C:  MOVLW  DE
0824E:  MOVWF  FF6
08250:  MOVLW  03
08252:  MOVWF  FF7
08254:  MOVLW  00
08256:  MOVWF  FF8
08258:  MOVLW  09
0825A:  MOVLB  7
0825C:  MOVWF  xEC
0825E:  MOVLB  0
08260:  CALL   184E
08264:  MOVFF  41A,427
08268:  MOVLW  37
0826A:  MOVLB  4
0826C:  MOVWF  x28
0826E:  MOVLB  0
08270:  CALL   1A10
08274:  MOVFF  419,427
08278:  MOVLW  37
0827A:  MOVLB  4
0827C:  MOVWF  x28
0827E:  MOVLB  0
08280:  CALL   1A10
08284:  MOVFF  418,427
08288:  MOVLW  37
0828A:  MOVLB  4
0828C:  MOVWF  x28
0828E:  MOVLB  0
08290:  CALL   1A10
08294:  MOVFF  417,427
08298:  MOVLW  37
0829A:  MOVLB  4
0829C:  MOVWF  x28
0829E:  MOVLB  0
082A0:  CALL   1A10
082A4:  MOVLW  EC
082A6:  MOVWF  FF6
082A8:  MOVLW  03
082AA:  MOVWF  FF7
082AC:  MOVLW  00
082AE:  MOVWF  FF8
082B0:  MOVLW  05
082B2:  MOVLB  7
082B4:  MOVWF  xEC
082B6:  MOVLB  0
082B8:  CALL   184E
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
082BC:  MOVLB  3
082BE:  MOVF   xD2,W
082C0:  MOVWF  xEB
082C2:  MOVLW  10
082C4:  ADDWF  xD3,W
082C6:  MOVWF  xEC
082C8:  MOVLW  00
082CA:  ADDWFC xD4,W
082CC:  MOVWF  xED
082CE:  MOVLW  00
082D0:  ADDWFC xD5,W
082D2:  MOVWF  xEE
082D4:  MOVFF  3D9,3F2
082D8:  MOVFF  3D8,3F1
082DC:  MOVFF  3D7,3F0
082E0:  MOVFF  3D6,3EF
082E4:  MOVF   xEB,W
082E6:  SUBWF  xEF,W
082E8:  MOVWF  xF3
082EA:  MOVF   xEC,W
082EC:  SUBWFB xF0,W
082EE:  MOVWF  xF4
082F0:  MOVF   xED,W
082F2:  SUBWFB xF1,W
082F4:  MOVWF  xF5
082F6:  MOVF   xEE,W
082F8:  SUBWFB xF2,W
082FA:  MOVWF  xF6
082FC:  MOVF   xE6,W
082FE:  ADDWF  xEB,W
08300:  MOVWF  xF7
08302:  MOVF   xE7,W
08304:  ADDWFC xEC,W
08306:  MOVWF  xF8
08308:  MOVF   xE8,W
0830A:  ADDWFC xED,W
0830C:  MOVWF  xF9
0830E:  MOVF   xE9,W
08310:  ADDWFC xEE,W
08312:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
08314:  MOVF   xDE,W
08316:  ADDWF  xE6,W
08318:  MOVLB  4
0831A:  MOVWF  x17
0831C:  MOVLB  3
0831E:  MOVF   xDF,W
08320:  ADDWFC xE7,W
08322:  MOVLB  4
08324:  MOVWF  x18
08326:  MOVLB  3
08328:  MOVF   xE0,W
0832A:  ADDWFC xE8,W
0832C:  MOVLB  4
0832E:  MOVWF  x19
08330:  MOVLB  3
08332:  MOVF   xE1,W
08334:  ADDWFC xE9,W
08336:  MOVLB  4
08338:  MOVWF  x1A
0833A:  MOVLB  3
0833C:  MOVF   xF6,W
0833E:  MOVLB  4
08340:  SUBWF  x1A,W
08342:  BTFSC  FD8.0
08344:  BRA    834C
08346:  MOVLB  0
08348:  GOTO   846C
0834C:  MOVLB  0
0834E:  BTFSS  FD8.2
08350:  GOTO   839C
08354:  MOVLB  3
08356:  MOVF   xF5,W
08358:  MOVLB  4
0835A:  SUBWF  x19,W
0835C:  BTFSC  FD8.0
0835E:  BRA    8366
08360:  MOVLB  0
08362:  GOTO   846C
08366:  MOVLB  0
08368:  BTFSS  FD8.2
0836A:  GOTO   839C
0836E:  MOVLB  3
08370:  MOVF   xF4,W
08372:  MOVLB  4
08374:  SUBWF  x18,W
08376:  BTFSC  FD8.0
08378:  BRA    8380
0837A:  MOVLB  0
0837C:  GOTO   846C
08380:  MOVLB  0
08382:  BTFSS  FD8.2
08384:  GOTO   839C
08388:  MOVLB  4
0838A:  MOVF   x17,W
0838C:  MOVLB  3
0838E:  SUBWF  xF3,W
08390:  BTFSS  FD8.0
08392:  BRA    839A
08394:  MOVLB  0
08396:  GOTO   846C
0839A:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
0839C:  MOVLW  F2
0839E:  MOVWF  FF6
083A0:  MOVLW  03
083A2:  MOVWF  FF7
083A4:  MOVLW  00
083A6:  MOVWF  FF8
083A8:  CALL   181E
....................             loop_count++;
083AC:  MOVLB  3
083AE:  INCF   xEA,F
....................             used_size = 0;
083B0:  CLRF   xE9
083B2:  CLRF   xE8
083B4:  CLRF   xE7
083B6:  CLRF   xE6
....................             data_write_addr = data_region_start;
083B8:  MOVFF  3EE,3FA
083BC:  MOVFF  3ED,3F9
083C0:  MOVFF  3EC,3F8
083C4:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
083C8:  MOVFF  3EE,3FE
083CC:  MOVFF  3ED,3FD
083D0:  MOVFF  3EC,3FC
083D4:  MOVFF  3EB,3FB
083D8:  MOVLB  0
....................             while (erase_ptr < data_region_end)
083DA:  MOVLB  3
083DC:  MOVF   xFE,W
083DE:  SUBWF  xF2,W
083E0:  BTFSC  FD8.0
083E2:  BRA    83EA
083E4:  MOVLB  0
083E6:  GOTO   846C
083EA:  MOVLB  0
083EC:  BTFSS  FD8.2
083EE:  GOTO   8434
083F2:  MOVLB  3
083F4:  MOVF   xFD,W
083F6:  SUBWF  xF1,W
083F8:  BTFSC  FD8.0
083FA:  BRA    8402
083FC:  MOVLB  0
083FE:  GOTO   846C
08402:  MOVLB  0
08404:  BTFSS  FD8.2
08406:  GOTO   8434
0840A:  MOVLB  3
0840C:  MOVF   xFC,W
0840E:  SUBWF  xF0,W
08410:  BTFSC  FD8.0
08412:  BRA    841A
08414:  MOVLB  0
08416:  GOTO   846C
0841A:  MOVLB  0
0841C:  BTFSS  FD8.2
0841E:  GOTO   8434
08422:  MOVLB  3
08424:  MOVF   xEF,W
08426:  SUBWF  xFB,W
08428:  BTFSS  FD8.0
0842A:  BRA    8432
0842C:  MOVLB  0
0842E:  GOTO   846C
08432:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(SMF, erase_ptr);
08434:  MOVFF  E5,82F
08438:  MOVFF  E4,82E
0843C:  MOVFF  E3,82D
08440:  MOVFF  E2,82C
08444:  MOVFF  3FE,833
08448:  MOVFF  3FD,832
0844C:  MOVFF  3FC,831
08450:  MOVFF  3FB,830
08454:  CALL   32B4
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
08458:  MOVLW  10
0845A:  MOVLB  3
0845C:  ADDWF  xFC,F
0845E:  MOVLW  00
08460:  ADDWFC xFD,F
08462:  MOVLW  00
08464:  ADDWFC xFE,F
08466:  MOVLB  0
08468:  GOTO   83DA
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
0846C:  MOVLB  3
0846E:  CLRF   xFF
08470:  MOVF   xF8,W
08472:  ANDLW  F0
08474:  MOVLB  4
08476:  MOVWF  x00
08478:  CLRF   x01
0847A:  CLRF   x02
0847C:  MOVLB  3
0847E:  MOVF   xDE,W
08480:  ADDWF  xF7,W
08482:  MOVLB  4
08484:  MOVWF  x17
08486:  MOVLB  3
08488:  MOVF   xDF,W
0848A:  ADDWFC xF8,W
0848C:  MOVLB  4
0848E:  MOVWF  x18
08490:  MOVLB  3
08492:  MOVF   xE0,W
08494:  ADDWFC xF9,W
08496:  MOVLB  4
08498:  MOVWF  x19
0849A:  MOVLB  3
0849C:  MOVF   xE1,W
0849E:  ADDWFC xFA,W
084A0:  MOVLB  4
084A2:  MOVWF  x1A
084A4:  MOVLW  FF
084A6:  ADDWF  x17,F
084A8:  MOVLW  0F
084AA:  ADDWFC x18,F
084AC:  MOVLW  00
084AE:  ADDWFC x19,F
084B0:  MOVLW  00
084B2:  ADDWFC x1A,F
084B4:  CLRF   x03
084B6:  MOVF   x18,W
084B8:  ANDLW  F0
084BA:  MOVWF  x04
084BC:  CLRF   x05
084BE:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
084C0:  MOVFF  402,40A
084C4:  MOVFF  401,409
084C8:  MOVFF  400,408
084CC:  MOVFF  3FF,407
084D0:  MOVLB  0
084D2:  MOVLB  4
084D4:  MOVF   x0A,W
084D6:  SUBWF  x06,W
084D8:  BTFSC  FD8.0
084DA:  BRA    84E2
084DC:  MOVLB  0
084DE:  GOTO   85C6
084E2:  MOVLB  0
084E4:  BTFSS  FD8.2
084E6:  GOTO   852C
084EA:  MOVLB  4
084EC:  MOVF   x09,W
084EE:  SUBWF  x05,W
084F0:  BTFSC  FD8.0
084F2:  BRA    84FA
084F4:  MOVLB  0
084F6:  GOTO   85C6
084FA:  MOVLB  0
084FC:  BTFSS  FD8.2
084FE:  GOTO   852C
08502:  MOVLB  4
08504:  MOVF   x08,W
08506:  SUBWF  x04,W
08508:  BTFSC  FD8.0
0850A:  BRA    8512
0850C:  MOVLB  0
0850E:  GOTO   85C6
08512:  MOVLB  0
08514:  BTFSS  FD8.2
08516:  GOTO   852C
0851A:  MOVLB  4
0851C:  MOVF   x03,W
0851E:  SUBWF  x07,W
08520:  BTFSS  FD8.0
08522:  BRA    852A
08524:  MOVLB  0
08526:  GOTO   85C6
0852A:  MOVLB  0
0852C:  MOVLB  4
0852E:  MOVF   x0A,W
08530:  MOVLB  3
08532:  SUBWF  xD9,W
08534:  BTFSC  FD8.0
08536:  BRA    853E
08538:  MOVLB  0
0853A:  GOTO   85C6
0853E:  MOVLB  0
08540:  BTFSS  FD8.2
08542:  GOTO   858E
08546:  MOVLB  4
08548:  MOVF   x09,W
0854A:  MOVLB  3
0854C:  SUBWF  xD8,W
0854E:  BTFSC  FD8.0
08550:  BRA    8558
08552:  MOVLB  0
08554:  GOTO   85C6
08558:  MOVLB  0
0855A:  BTFSS  FD8.2
0855C:  GOTO   858E
08560:  MOVLB  4
08562:  MOVF   x08,W
08564:  MOVLB  3
08566:  SUBWF  xD7,W
08568:  BTFSC  FD8.0
0856A:  BRA    8572
0856C:  MOVLB  0
0856E:  GOTO   85C6
08572:  MOVLB  0
08574:  BTFSS  FD8.2
08576:  GOTO   858E
0857A:  MOVLB  3
0857C:  MOVF   xD6,W
0857E:  MOVLB  4
08580:  SUBWF  x07,W
08582:  BTFSS  FD8.0
08584:  BRA    858C
08586:  MOVLB  0
08588:  GOTO   85C6
0858C:  MOVLB  0
....................             subsector_4kByte_erase(SMF, addr);
0858E:  MOVFF  E5,82F
08592:  MOVFF  E4,82E
08596:  MOVFF  E3,82D
0859A:  MOVFF  E2,82C
0859E:  MOVFF  40A,833
085A2:  MOVFF  409,832
085A6:  MOVFF  408,831
085AA:  MOVFF  407,830
085AE:  CALL   32B4
085B2:  MOVLW  10
085B4:  MOVLB  4
085B6:  ADDWF  x08,F
085B8:  MOVLW  00
085BA:  ADDWFC x09,F
085BC:  MOVLW  00
085BE:  ADDWFC x0A,F
085C0:  MOVLB  0
085C2:  GOTO   84D2
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
085C6:  MOVFF  3E1,40E
085CA:  MOVFF  3E0,40D
085CE:  MOVFF  3DF,40C
085D2:  MOVFF  3DE,40B
085D6:  MOVFF  3DD,412
085DA:  MOVFF  3DC,411
085DE:  MOVFF  3DB,410
085E2:  MOVFF  3DA,40F
....................         while (remaining > 0)
085E6:  MOVLB  4
085E8:  MOVF   x0B,F
085EA:  BTFSC  FD8.2
085EC:  BRA    85F4
085EE:  MOVLB  0
085F0:  GOTO   8626
085F4:  MOVLB  0
085F6:  MOVLB  4
085F8:  MOVF   x0C,F
085FA:  BTFSC  FD8.2
085FC:  BRA    8604
085FE:  MOVLB  0
08600:  GOTO   8626
08604:  MOVLB  0
08606:  MOVLB  4
08608:  MOVF   x0D,F
0860A:  BTFSC  FD8.2
0860C:  BRA    8614
0860E:  MOVLB  0
08610:  GOTO   8626
08614:  MOVLB  0
08616:  MOVLB  4
08618:  MOVF   x0E,F
0861A:  BTFSS  FD8.2
0861C:  BRA    8624
0861E:  MOVLB  0
08620:  GOTO   8860
08624:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
08626:  MOVLB  4
08628:  MOVF   x0E,F
0862A:  BTFSC  FD8.2
0862C:  BRA    8634
0862E:  MOVLB  0
08630:  GOTO   8668
08634:  MOVLB  0
08636:  MOVLB  4
08638:  MOVF   x0D,F
0863A:  BTFSC  FD8.2
0863C:  BRA    8644
0863E:  MOVLB  0
08640:  GOTO   8668
08644:  MOVLB  0
08646:  MOVLB  4
08648:  MOVF   x0C,F
0864A:  BTFSC  FD8.2
0864C:  BRA    8654
0864E:  MOVLB  0
08650:  GOTO   8668
08654:  MOVLB  0
08656:  MOVLB  4
08658:  MOVF   x0B,W
0865A:  SUBLW  40
0865C:  BTFSS  FD8.0
0865E:  BRA    8666
08660:  MOVLB  0
08662:  GOTO   8670
08666:  MOVLB  0
08668:  CLRF   03
0866A:  MOVLW  40
0866C:  GOTO   867A
08670:  MOVFF  40C,03
08674:  MOVLB  4
08676:  MOVF   x0B,W
08678:  MOVLB  0
0867A:  MOVLB  4
0867C:  MOVWF  x13
0867E:  MOVFF  03,414
08682:  MOVLB  0
.................... 
....................             read_data_bytes(MIS_FM, src_addr, buffer, chunk);
08684:  MOVFF  E1,429
08688:  MOVFF  E0,428
0868C:  MOVFF  DF,427
08690:  MOVFF  DE,426
08694:  MOVFF  412,42D
08698:  MOVFF  411,42C
0869C:  MOVFF  410,42B
086A0:  MOVFF  40F,42A
086A4:  MOVLW  03
086A6:  MOVLB  4
086A8:  MOVWF  x2F
086AA:  MOVLW  86
086AC:  MOVWF  x2E
086AE:  CLRF   x33
086B0:  CLRF   x32
086B2:  MOVFF  414,431
086B6:  MOVFF  413,430
086BA:  MOVLB  0
086BC:  CALL   1F0A
....................             fprintf(PC, "[MIS FM]\r\n");
086C0:  MOVLW  28
086C2:  MOVWF  FF6
086C4:  MOVLW  04
086C6:  MOVWF  FF7
086C8:  MOVLW  00
086CA:  MOVWF  FF8
086CC:  CALL   181E
....................             for (unsigned int8 byte_count = 0; byte_count < chunk; byte_count++)
086D0:  MOVLB  4
086D2:  CLRF   x15
086D4:  MOVLB  0
086D6:  MOVLB  4
086D8:  MOVF   x14,F
086DA:  BTFSC  FD8.2
086DC:  BRA    86E4
086DE:  MOVLB  0
086E0:  GOTO   86F8
086E4:  MOVLB  0
086E6:  MOVLB  4
086E8:  MOVF   x13,W
086EA:  SUBWF  x15,W
086EC:  BTFSS  FD8.0
086EE:  BRA    86F6
086F0:  MOVLB  0
086F2:  GOTO   8730
086F6:  MOVLB  0
....................             {
....................                 fprintf(PC, "%02X ", buffer[byte_count]);
086F8:  CLRF   03
086FA:  MOVLB  4
086FC:  MOVF   x15,W
086FE:  ADDLW  86
08700:  MOVWF  FE9
08702:  MOVLW  03
08704:  ADDWFC 03,W
08706:  MOVWF  FEA
08708:  MOVFF  FEF,417
0870C:  MOVFF  417,427
08710:  MOVLW  37
08712:  MOVWF  x28
08714:  MOVLB  0
08716:  CALL   1A10
0871A:  MOVLW  20
0871C:  MOVLB  8
0871E:  MOVWF  x2F
08720:  MOVLB  0
08722:  CALL   17CC
08726:  MOVLB  4
08728:  INCF   x15,F
0872A:  MOVLB  0
0872C:  GOTO   86D6
....................             }
....................             fprintf(PC, "\r\n");
08730:  MOVLW  0D
08732:  MOVLB  8
08734:  MOVWF  x2F
08736:  MOVLB  0
08738:  CALL   17CC
0873C:  MOVLW  0A
0873E:  MOVLB  8
08740:  MOVWF  x2F
08742:  MOVLB  0
08744:  CALL   17CC
....................             write_data_bytes(SMF, data_write_addr, buffer, chunk);
08748:  MOVFF  E5,82F
0874C:  MOVFF  E4,82E
08750:  MOVFF  E3,82D
08754:  MOVFF  E2,82C
08758:  MOVFF  3FA,833
0875C:  MOVFF  3F9,832
08760:  MOVFF  3F8,831
08764:  MOVFF  3F7,830
08768:  MOVLW  03
0876A:  MOVLB  8
0876C:  MOVWF  x35
0876E:  MOVLW  86
08770:  MOVWF  x34
08772:  MOVFF  414,837
08776:  MOVFF  413,836
0877A:  MOVLB  0
0877C:  CALL   2F30
....................             fprintf(PC, "[SMF]\r\n");
08780:  MOVLW  34
08782:  MOVWF  FF6
08784:  MOVLW  04
08786:  MOVWF  FF7
08788:  MOVLW  00
0878A:  MOVWF  FF8
0878C:  CALL   181E
....................             for (unsigned int8 byte_count = 0; byte_count < chunk; byte_count++)
08790:  MOVLB  4
08792:  CLRF   x16
08794:  MOVLB  0
08796:  MOVLB  4
08798:  MOVF   x14,F
0879A:  BTFSC  FD8.2
0879C:  BRA    87A4
0879E:  MOVLB  0
087A0:  GOTO   87B8
087A4:  MOVLB  0
087A6:  MOVLB  4
087A8:  MOVF   x13,W
087AA:  SUBWF  x16,W
087AC:  BTFSS  FD8.0
087AE:  BRA    87B6
087B0:  MOVLB  0
087B2:  GOTO   87F0
087B6:  MOVLB  0
....................             {
....................                 fprintf(PC, "%02X ", buffer[byte_count]);
087B8:  CLRF   03
087BA:  MOVLB  4
087BC:  MOVF   x16,W
087BE:  ADDLW  86
087C0:  MOVWF  FE9
087C2:  MOVLW  03
087C4:  ADDWFC 03,W
087C6:  MOVWF  FEA
087C8:  MOVFF  FEF,417
087CC:  MOVFF  417,427
087D0:  MOVLW  37
087D2:  MOVWF  x28
087D4:  MOVLB  0
087D6:  CALL   1A10
087DA:  MOVLW  20
087DC:  MOVLB  8
087DE:  MOVWF  x2F
087E0:  MOVLB  0
087E2:  CALL   17CC
087E6:  MOVLB  4
087E8:  INCF   x16,F
087EA:  MOVLB  0
087EC:  GOTO   8796
....................             }
....................             fprintf(PC, "\r\n");
087F0:  MOVLW  0D
087F2:  MOVLB  8
087F4:  MOVWF  x2F
087F6:  MOVLB  0
087F8:  CALL   17CC
087FC:  MOVLW  0A
087FE:  MOVLB  8
08800:  MOVWF  x2F
08802:  MOVLB  0
08804:  CALL   17CC
.................... 
....................             src_addr += chunk;
08808:  MOVLB  4
0880A:  MOVF   x13,W
0880C:  ADDWF  x0F,F
0880E:  MOVF   x14,W
08810:  ADDWFC x10,F
08812:  MOVLW  00
08814:  ADDWFC x11,F
08816:  MOVLW  00
08818:  ADDWFC x12,F
....................             data_write_addr += chunk;
0881A:  MOVF   x13,W
0881C:  MOVLB  3
0881E:  ADDWF  xF7,F
08820:  MOVLB  4
08822:  MOVF   x14,W
08824:  MOVLB  3
08826:  ADDWFC xF8,F
08828:  MOVLW  00
0882A:  ADDWFC xF9,F
0882C:  MOVLW  00
0882E:  ADDWFC xFA,F
....................             used_size += chunk;
08830:  MOVLB  4
08832:  MOVF   x13,W
08834:  MOVLB  3
08836:  ADDWF  xE6,F
08838:  MOVLB  4
0883A:  MOVF   x14,W
0883C:  MOVLB  3
0883E:  ADDWFC xE7,F
08840:  MOVLW  00
08842:  ADDWFC xE8,F
08844:  MOVLW  00
08846:  ADDWFC xE9,F
....................             remaining -= chunk;
08848:  MOVLB  4
0884A:  MOVF   x13,W
0884C:  SUBWF  x0B,F
0884E:  MOVF   x14,W
08850:  SUBWFB x0C,F
08852:  MOVLW  00
08854:  SUBWFB x0D,F
08856:  MOVLW  00
08858:  SUBWFB x0E,F
0885A:  MOVLB  0
0885C:  GOTO   85E6
....................         }
.................... 
.................... 
....................        // write size area
....................        fprintf(PC, "Update size area\r\n");
08860:  MOVLW  3C
08862:  MOVWF  FF6
08864:  MOVLW  04
08866:  MOVWF  FF7
08868:  MOVLW  00
0886A:  MOVWF  FF8
0886C:  CALL   181E
....................        subsector_4kByte_erase(SMF, mis_start_address);
08870:  MOVFF  E5,82F
08874:  MOVFF  E4,82E
08878:  MOVFF  E3,82D
0887C:  MOVFF  E2,82C
08880:  MOVFF  3D5,833
08884:  MOVFF  3D4,832
08888:  MOVFF  3D3,831
0888C:  MOVFF  3D2,830
08890:  CALL   32B4
....................        write_data_byte(SMF, mis_start_address + 0, (used_size >> 0)  & 0xFF);
08894:  MOVFF  3E9,41B
08898:  MOVFF  3E8,41A
0889C:  MOVFF  3E7,419
088A0:  MOVFF  3E6,418
088A4:  MOVLB  4
088A6:  CLRF   x19
088A8:  CLRF   x1A
088AA:  CLRF   x1B
088AC:  MOVFF  E5,423
088B0:  MOVFF  E4,422
088B4:  MOVFF  E3,421
088B8:  MOVFF  E2,420
088BC:  MOVFF  3D5,427
088C0:  MOVFF  3D4,426
088C4:  MOVFF  3D3,425
088C8:  MOVFF  3D2,424
088CC:  MOVFF  418,428
088D0:  MOVLB  0
088D2:  CALL   780C
....................        write_data_byte(SMF, mis_start_address + 1, (used_size >> 8)  & 0xFF);
088D6:  MOVLW  01
088D8:  MOVLB  3
088DA:  ADDWF  xD2,W
088DC:  MOVLB  4
088DE:  MOVWF  x17
088E0:  MOVLW  00
088E2:  MOVLB  3
088E4:  ADDWFC xD3,W
088E6:  MOVLB  4
088E8:  MOVWF  x18
088EA:  MOVLW  00
088EC:  MOVLB  3
088EE:  ADDWFC xD4,W
088F0:  MOVLB  4
088F2:  MOVWF  x19
088F4:  MOVLW  00
088F6:  MOVLB  3
088F8:  ADDWFC xD5,W
088FA:  MOVLB  4
088FC:  MOVWF  x1A
088FE:  MOVFF  3E7,41C
08902:  MOVFF  3E8,41D
08906:  MOVFF  3E9,41E
0890A:  CLRF   x1F
0890C:  CLRF   x1D
0890E:  CLRF   x1E
08910:  CLRF   x1F
08912:  MOVFF  E5,423
08916:  MOVFF  E4,422
0891A:  MOVFF  E3,421
0891E:  MOVFF  E2,420
08922:  MOVFF  41A,427
08926:  MOVFF  419,426
0892A:  MOVFF  418,425
0892E:  MOVFF  417,424
08932:  MOVFF  41C,428
08936:  MOVLB  0
08938:  CALL   780C
....................        write_data_byte(SMF, mis_start_address + 2, (used_size >> 16) & 0xFF);
0893C:  MOVLW  02
0893E:  MOVLB  3
08940:  ADDWF  xD2,W
08942:  MOVLB  4
08944:  MOVWF  x17
08946:  MOVLW  00
08948:  MOVLB  3
0894A:  ADDWFC xD3,W
0894C:  MOVLB  4
0894E:  MOVWF  x18
08950:  MOVLW  00
08952:  MOVLB  3
08954:  ADDWFC xD4,W
08956:  MOVLB  4
08958:  MOVWF  x19
0895A:  MOVLW  00
0895C:  MOVLB  3
0895E:  ADDWFC xD5,W
08960:  MOVLB  4
08962:  MOVWF  x1A
08964:  MOVFF  3E8,41C
08968:  MOVFF  3E9,41D
0896C:  CLRF   x1E
0896E:  CLRF   x1F
08970:  CLRF   x1D
08972:  CLRF   x1E
08974:  CLRF   x1F
08976:  MOVFF  E5,423
0897A:  MOVFF  E4,422
0897E:  MOVFF  E3,421
08982:  MOVFF  E2,420
08986:  MOVFF  41A,427
0898A:  MOVFF  419,426
0898E:  MOVFF  418,425
08992:  MOVFF  417,424
08996:  MOVFF  41C,428
0899A:  MOVLB  0
0899C:  CALL   780C
....................        write_data_byte(SMF, mis_start_address + 3, (used_size >> 24) & 0xFF);
089A0:  MOVLW  03
089A2:  MOVLB  3
089A4:  ADDWF  xD2,W
089A6:  MOVLB  4
089A8:  MOVWF  x17
089AA:  MOVLW  00
089AC:  MOVLB  3
089AE:  ADDWFC xD3,W
089B0:  MOVLB  4
089B2:  MOVWF  x18
089B4:  MOVLW  00
089B6:  MOVLB  3
089B8:  ADDWFC xD4,W
089BA:  MOVLB  4
089BC:  MOVWF  x19
089BE:  MOVLW  00
089C0:  MOVLB  3
089C2:  ADDWFC xD5,W
089C4:  MOVLB  4
089C6:  MOVWF  x1A
089C8:  MOVFF  3E9,41C
089CC:  CLRF   x1D
089CE:  CLRF   x1E
089D0:  CLRF   x1F
089D2:  CLRF   x1D
089D4:  CLRF   x1E
089D6:  CLRF   x1F
089D8:  MOVFF  E5,423
089DC:  MOVFF  E4,422
089E0:  MOVFF  E3,421
089E4:  MOVFF  E2,420
089E8:  MOVFF  41A,427
089EC:  MOVFF  419,426
089F0:  MOVFF  418,425
089F4:  MOVFF  417,424
089F8:  MOVFF  41C,428
089FC:  MOVLB  0
089FE:  CALL   780C
....................        write_data_byte(SMF, mis_start_address + 4, loop_count);
08A02:  MOVLW  04
08A04:  MOVLB  3
08A06:  ADDWF  xD2,W
08A08:  MOVLB  4
08A0A:  MOVWF  x17
08A0C:  MOVLW  00
08A0E:  MOVLB  3
08A10:  ADDWFC xD3,W
08A12:  MOVLB  4
08A14:  MOVWF  x18
08A16:  MOVLW  00
08A18:  MOVLB  3
08A1A:  ADDWFC xD4,W
08A1C:  MOVLB  4
08A1E:  MOVWF  x19
08A20:  MOVLW  00
08A22:  MOVLB  3
08A24:  ADDWFC xD5,W
08A26:  MOVLB  4
08A28:  MOVWF  x1A
08A2A:  MOVFF  E5,423
08A2E:  MOVFF  E4,422
08A32:  MOVFF  E3,421
08A36:  MOVFF  E2,420
08A3A:  MOVFF  41A,427
08A3E:  MOVFF  419,426
08A42:  MOVFF  418,425
08A46:  MOVFF  417,424
08A4A:  MOVFF  3EA,428
08A4E:  MOVLB  0
08A50:  CALL   780C
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
08A54:  MOVLW  50
08A56:  MOVWF  FF6
08A58:  MOVLW  04
08A5A:  MOVWF  FF7
08A5C:  MOVLW  00
08A5E:  MOVWF  FF8
08A60:  MOVLW  0C
08A62:  MOVLB  7
08A64:  MOVWF  xEC
08A66:  MOVLB  0
08A68:  CALL   184E
08A6C:  MOVLW  41
08A6E:  MOVWF  FE9
08A70:  MOVFF  3E9,41A
08A74:  MOVFF  3E8,419
08A78:  MOVFF  3E7,418
08A7C:  MOVFF  3E6,417
08A80:  GOTO   7B80
08A84:  MOVLW  0D
08A86:  MOVLB  8
08A88:  MOVWF  x2F
08A8A:  MOVLB  0
08A8C:  CALL   17CC
08A90:  MOVLW  0A
08A92:  MOVLB  8
08A94:  MOVWF  x2F
08A96:  MOVLB  0
08A98:  CALL   17CC
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
08A9C:  MOVLW  62
08A9E:  MOVWF  FF6
08AA0:  MOVLW  04
08AA2:  MOVWF  FF7
08AA4:  MOVLW  00
08AA6:  MOVWF  FF8
08AA8:  MOVLW  0D
08AAA:  MOVLB  7
08AAC:  MOVWF  xEC
08AAE:  MOVLB  0
08AB0:  CALL   184E
08AB4:  MOVFF  3EA,7EC
08AB8:  MOVLW  1B
08ABA:  MOVLB  7
08ABC:  MOVWF  xED
08ABE:  MOVLB  0
08AC0:  CALL   440A
08AC4:  MOVLW  71
08AC6:  MOVWF  FF6
08AC8:  MOVLW  04
08ACA:  MOVWF  FF7
08ACC:  MOVLW  00
08ACE:  MOVWF  FF8
08AD0:  MOVLW  04
08AD2:  MOVLB  7
08AD4:  MOVWF  xEC
08AD6:  MOVLB  0
08AD8:  CALL   184E
08ADC:  MOVLB  3
08ADE:  INCF   xC6,F
08AE0:  MOVLB  0
08AE2:  GOTO   7D24
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
08AE6:  MOVLW  76
08AE8:  MOVWF  FF6
08AEA:  MOVLW  04
08AEC:  MOVWF  FF7
08AEE:  MOVLW  00
08AF0:  MOVWF  FF8
08AF2:  CALL   181E
....................     fprintf(PC, "____________________\r\n\r\n");
08AF6:  MOVLW  90
08AF8:  MOVWF  FF6
08AFA:  MOVLW  04
08AFC:  MOVWF  FF7
08AFE:  MOVLW  00
08B00:  MOVWF  FF8
08B02:  CALL   181E
08B06:  GOTO   8B64 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
05020:  MOVLW  01
05022:  ADDWF  xDD,W
05024:  ANDLW  0F
05026:  MOVLB  3
05028:  MOVWF  x98
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
0502A:  MOVLB  0
0502C:  MOVF   xDC,W
0502E:  MOVLB  3
05030:  SUBWF  x98,W
05032:  BTFSC  FD8.2
05034:  BRA    503C
05036:  MOVLB  0
05038:  GOTO   5052
0503C:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
0503E:  MOVLW  CE
05040:  MOVWF  FF6
05042:  MOVLW  06
05044:  MOVWF  FF7
05046:  MOVLW  00
05048:  MOVWF  FF8
0504A:  CALL   181E
0504E:  GOTO   51A8
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
05052:  MOVF   xDD,W
05054:  MULLW  09
05056:  MOVF   FF3,W
05058:  MOVLB  3
0505A:  CLRF   x9A
0505C:  MOVWF  x99
0505E:  MOVLW  4C
05060:  ADDWF  x99,W
05062:  MOVWF  01
05064:  MOVLW  00
05066:  ADDWFC x9A,W
05068:  MOVWF  03
0506A:  MOVF   01,W
0506C:  MOVWF  x9B
0506E:  MOVFF  03,39C
05072:  MOVF   x96,W
05074:  MOVWF  01
05076:  MOVF   x97,W
05078:  MOVWF  03
0507A:  MOVF   01,W
0507C:  MOVWF  FE9
0507E:  MOVFF  03,FEA
05082:  MOVLW  00
05084:  BTFSC  FEF.0
05086:  MOVLW  01
05088:  MOVWF  01
0508A:  BTFSS  01.0
0508C:  BRA    5094
0508E:  MOVLB  0
05090:  GOTO   50A4
05094:  MOVLB  0
05096:  MOVFF  39C,FEA
0509A:  MOVFF  39B,FE9
0509E:  BCF    FEF.0
050A0:  GOTO   50AE
050A4:  MOVFF  39C,FEA
050A8:  MOVFF  39B,FE9
050AC:  BSF    FEF.0
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
050AE:  MOVF   xDD,W
050B0:  MULLW  09
050B2:  MOVF   FF3,W
050B4:  MOVLB  3
050B6:  CLRF   x9A
050B8:  MOVWF  x99
050BA:  MOVLW  01
050BC:  ADDWF  x99,W
050BE:  MOVWF  01
050C0:  MOVLW  00
050C2:  ADDWFC x9A,W
050C4:  MOVWF  03
050C6:  MOVF   01,W
050C8:  ADDLW  4C
050CA:  MOVWF  01
050CC:  MOVLW  00
050CE:  ADDWFC 03,F
050D0:  MOVF   01,W
050D2:  MOVWF  x99
050D4:  MOVFF  03,39A
050D8:  MOVLW  01
050DA:  ADDWF  x96,W
050DC:  MOVWF  FE9
050DE:  MOVLW  00
050E0:  ADDWFC x97,W
050E2:  MOVWF  FEA
050E4:  MOVFF  FEF,00
050E8:  MOVFF  FEC,01
050EC:  MOVFF  FEC,02
050F0:  MOVFF  FEC,03
050F4:  MOVF   FED,F
050F6:  MOVF   FED,F
050F8:  MOVF   FED,F
050FA:  MOVFF  03,39E
050FE:  MOVFF  02,39D
05102:  MOVFF  01,39C
05106:  MOVFF  00,39B
0510A:  MOVFF  39A,FEA
0510E:  MOVFF  399,FE9
05112:  MOVFF  39B,FEF
05116:  MOVFF  39C,FEC
0511A:  MOVFF  39D,FEC
0511E:  MOVFF  39E,FEC
05122:  MOVF   FED,F
05124:  MOVF   FED,F
05126:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
05128:  MOVLB  0
0512A:  MOVF   xDD,W
0512C:  MULLW  09
0512E:  MOVF   FF3,W
05130:  MOVLB  3
05132:  CLRF   x9A
05134:  MOVWF  x99
05136:  MOVLW  05
05138:  ADDWF  x99,W
0513A:  MOVWF  01
0513C:  MOVLW  00
0513E:  ADDWFC x9A,W
05140:  MOVWF  03
05142:  MOVF   01,W
05144:  ADDLW  4C
05146:  MOVWF  01
05148:  MOVLW  00
0514A:  ADDWFC 03,F
0514C:  MOVF   01,W
0514E:  MOVWF  x99
05150:  MOVFF  03,39A
05154:  MOVLW  05
05156:  ADDWF  x96,W
05158:  MOVWF  FE9
0515A:  MOVLW  00
0515C:  ADDWFC x97,W
0515E:  MOVWF  FEA
05160:  MOVFF  FEF,00
05164:  MOVFF  FEC,01
05168:  MOVFF  FEC,02
0516C:  MOVFF  FEC,03
05170:  MOVF   FED,F
05172:  MOVF   FED,F
05174:  MOVF   FED,F
05176:  MOVFF  03,39E
0517A:  MOVFF  02,39D
0517E:  MOVFF  01,39C
05182:  MOVFF  00,39B
05186:  MOVFF  39A,FEA
0518A:  MOVFF  399,FE9
0518E:  MOVFF  39B,FEF
05192:  MOVFF  39C,FEC
05196:  MOVFF  39D,FEC
0519A:  MOVFF  39E,FEC
0519E:  MOVF   FED,F
051A0:  MOVF   FED,F
051A2:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
051A4:  MOVFF  398,DD
051A8:  MOVLB  0
....................    }
051AA:  GOTO   5208 (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
07324:  MOVF   xDD,W
07326:  SUBWF  xDC,W
07328:  BTFSS  FD8.2
0732A:  GOTO   734E
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
0732E:  MOVLW  EA
07330:  MOVWF  FF6
07332:  MOVLW  06
07334:  MOVWF  FF7
07336:  MOVLW  00
07338:  MOVWF  FF8
0733A:  CALL   181E
....................       return 0x00;
0733E:  MOVLW  00
07340:  MOVWF  01
07342:  MOVLW  00
07344:  MOVWF  02
07346:  GOTO   737A
....................    }
0734A:  GOTO   737A
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
0734E:  MOVFF  DC,417
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
07352:  MOVLW  01
07354:  ADDWF  xDC,W
07356:  ANDLW  0F
07358:  MOVWF  xDC
....................       return &smf_queue.smf_data[current_head];
0735A:  MOVLB  4
0735C:  MOVF   x17,W
0735E:  MULLW  09
07360:  MOVF   FF3,W
07362:  CLRF   03
07364:  ADDLW  4C
07366:  MOVWF  01
07368:  MOVLW  00
0736A:  ADDWFC 03,F
0736C:  MOVF   01,W
0736E:  MOVWF  01
07370:  MOVF   03,W
07372:  MOVWF  02
07374:  MOVLB  0
07376:  GOTO   737A
....................    }
0737A:  GOTO   7D74 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
07126:  MOVF   xDD,W
07128:  SUBWF  xDC,W
0712A:  BTFSC  FD8.2
0712C:  GOTO   7136
07130:  MOVLW  00
07132:  GOTO   7138
07136:  MOVLW  01
07138:  MOVWF  01
0713A:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
0737E:  MOVLB  4
07380:  CLRF   x1F
07382:  CLRF   x20
07384:  CLRF   x21
07386:  CLRF   x22
07388:  CLRF   x23
0738A:  CLRF   x24
0738C:  CLRF   x25
0738E:  CLRF   x26
07390:  CLRF   x27
....................    
....................    if (mis_type == MEAURE_DATA)
07392:  MOVF   x1E,F
07394:  BTFSC  FD8.2
07396:  BRA    739E
07398:  MOVLB  0
0739A:  GOTO   73C4
0739E:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
073A0:  MOVLW  04
073A2:  MOVLB  4
073A4:  MOVWF  x22
073A6:  MOVLW  EC
073A8:  MOVWF  x21
073AA:  CLRF   x20
073AC:  CLRF   x1F
....................       mis_struct.end_address     = 0x056BFFFF;
073AE:  MOVLW  05
073B0:  MOVWF  x26
073B2:  MOVLW  6B
073B4:  MOVWF  x25
073B6:  SETF   x24
073B8:  SETF   x23
....................       mis_struct.mission_flag    = 0b10000000;
073BA:  MOVLW  80
073BC:  MOVWF  x27
073BE:  MOVLB  0
....................    }
073C0:  GOTO   7410
....................    else if (mis_type == PICLOG_DATA)
073C4:  MOVLB  4
073C6:  DECFSZ x1E,W
073C8:  BRA    73CE
073CA:  BRA    73D4
073CC:  MOVLB  0
073CE:  MOVLB  0
073D0:  GOTO   73FA
073D4:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
073D6:  MOVLW  04
073D8:  MOVLB  4
073DA:  MOVWF  x22
073DC:  MOVLW  DC
073DE:  MOVWF  x21
073E0:  CLRF   x20
073E2:  CLRF   x1F
....................       mis_struct.end_address     = 0x04EBFFFF;
073E4:  MOVLW  04
073E6:  MOVWF  x26
073E8:  MOVLW  EB
073EA:  MOVWF  x25
073EC:  SETF   x24
073EE:  SETF   x23
....................       mis_struct.mission_flag    = 0b10000001;  
073F0:  MOVLW  81
073F2:  MOVWF  x27
073F4:  MOVLB  0
....................    }
073F6:  GOTO   7410
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
073FA:  MOVLB  4
073FC:  SETF   x22
073FE:  SETF   x21
07400:  SETF   x20
07402:  SETF   x1F
....................       mis_struct.end_address     = 0xFFFFFFFF;
07404:  SETF   x26
07406:  SETF   x25
07408:  SETF   x24
0740A:  SETF   x23
....................       mis_struct.mission_flag    = 0b11111111; 
0740C:  SETF   x27
0740E:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
07410:  MOVLW  1F
07412:  MOVWF  01
07414:  MOVLW  04
07416:  MOVWF  02
07418:  GOTO   7DA2 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
03DBC:  MOVLB  3
03DBE:  CLRF   x8B
03DC0:  CLRF   x8C
03DC2:  CLRF   x8D
03DC4:  CLRF   x8E
03DC6:  CLRF   x8F
03DC8:  CLRF   x90
03DCA:  CLRF   x91
03DCC:  CLRF   x92
03DCE:  CLRF   x93
03DD0:  CLRF   x94
03DD2:  CLRF   x95
03DD4:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
03DD6:  MOVLW  04
03DD8:  MOVWF  FF6
03DDA:  MOVLW  07
03DDC:  MOVWF  FF7
03DDE:  MOVLW  00
03DE0:  MOVWF  FF8
03DE2:  MOVLB  0
03DE4:  CALL   181E
....................    fprintf(PC, "\t[BOSS] >>> ");
03DE8:  MOVLW  24
03DEA:  MOVWF  FF6
03DEC:  MOVLW  07
03DEE:  MOVWF  FF7
03DF0:  MOVLW  00
03DF2:  MOVWF  FF8
03DF4:  CALL   181E
....................    for (int8 i = 0; i < receive_signal_size; i++)
03DF8:  MOVLB  3
03DFA:  CLRF   x97
03DFC:  MOVLB  0
03DFE:  MOVLB  3
03E00:  MOVF   x8A,W
03E02:  SUBWF  x97,W
03E04:  BTFSS  FD8.0
03E06:  BRA    3E0E
03E08:  MOVLB  0
03E0A:  GOTO   3E48
03E0E:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
03E10:  MOVLB  3
03E12:  MOVF   x97,W
03E14:  ADDWF  x88,W
03E16:  MOVWF  FE9
03E18:  MOVLW  00
03E1A:  ADDWFC x89,W
03E1C:  MOVWF  FEA
03E1E:  MOVFF  FEF,39E
03E22:  MOVFF  39E,427
03E26:  MOVLW  37
03E28:  MOVLB  4
03E2A:  MOVWF  x28
03E2C:  MOVLB  0
03E2E:  CALL   1A10
03E32:  MOVLW  20
03E34:  MOVLB  8
03E36:  MOVWF  x2F
03E38:  MOVLB  0
03E3A:  CALL   17CC
03E3E:  MOVLB  3
03E40:  INCF   x97,F
03E42:  MOVLB  0
03E44:  GOTO   3DFE
....................    fprintf(PC, "\r\n");
03E48:  MOVLW  0D
03E4A:  MOVLB  8
03E4C:  MOVWF  x2F
03E4E:  MOVLB  0
03E50:  CALL   17CC
03E54:  MOVLW  0A
03E56:  MOVLB  8
03E58:  MOVWF  x2F
03E5A:  MOVLB  0
03E5C:  CALL   17CC
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
03E60:  MOVFF  389,39F
03E64:  MOVFF  388,39E
03E68:  MOVFF  38A,3A0
03E6C:  GOTO   3A6A
03E70:  MOVFF  01,398
....................    if (frame_start_position == -1)
03E74:  MOVLB  3
03E76:  MOVF   x98,W
03E78:  SUBLW  FF
03E7A:  BTFSC  FD8.2
03E7C:  BRA    3E84
03E7E:  MOVLB  0
03E80:  GOTO   3E92
03E84:  MOVLB  0
....................       return command;
03E86:  MOVLW  8B
03E88:  MOVWF  01
03E8A:  MOVLW  03
03E8C:  MOVWF  02
03E8E:  GOTO   3FB4
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
03E92:  MOVLB  3
03E94:  MOVF   x98,W
03E96:  ADDWF  x88,W
03E98:  MOVWF  01
03E9A:  MOVLW  00
03E9C:  ADDWFC x89,W
03E9E:  MOVWF  03
03EA0:  MOVF   01,W
03EA2:  MOVWF  x99
03EA4:  MOVFF  03,39A
03EA8:  MOVF   x99,W
03EAA:  MOVWF  FE9
03EAC:  MOVF   x9A,W
03EAE:  MOVWF  FEA
03EB0:  MOVF   FEF,W
03EB2:  ANDLW  0F
03EB4:  MOVWF  x9B
03EB6:  MOVFF  39B,39E
03EBA:  MOVLB  0
03EBC:  GOTO   3B12
03EC0:  MOVFF  01,39C
....................    if (content_size == -1)
03EC4:  MOVLB  3
03EC6:  MOVF   x9C,W
03EC8:  SUBLW  FF
03ECA:  BTFSC  FD8.2
03ECC:  BRA    3ED4
03ECE:  MOVLB  0
03ED0:  GOTO   3EE2
03ED4:  MOVLB  0
....................       return command;
03ED6:  MOVLW  8B
03ED8:  MOVWF  01
03EDA:  MOVLW  03
03EDC:  MOVWF  02
03EDE:  GOTO   3FB4
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
03EE2:  MOVLB  3
03EE4:  MOVF   x98,W
03EE6:  SUBWF  x8A,W
03EE8:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
03EEA:  MOVFF  39A,39F
03EEE:  MOVFF  399,39E
03EF2:  MOVFF  39D,3A0
03EF6:  MOVLB  0
03EF8:  GOTO   3C18
03EFC:  MOVF   01,F
03EFE:  BTFSS  FD8.2
03F00:  GOTO   3F10
....................       return command;
03F04:  MOVLW  8B
03F06:  MOVWF  01
03F08:  MOVLW  03
03F0A:  MOVWF  02
03F0C:  GOTO   3FB4
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
03F10:  MOVLB  3
03F12:  MOVF   x99,W
03F14:  MOVWF  FE9
03F16:  MOVF   x9A,W
03F18:  MOVWF  FEA
03F1A:  MOVF   FEF,W
03F1C:  ANDLW  F0
03F1E:  MOVWF  00
03F20:  SWAPF  00,W
03F22:  MOVWF  x9E
03F24:  MOVLW  0F
03F26:  ANDWF  x9E,F
03F28:  MOVFF  39E,39F
03F2C:  MOVLB  0
03F2E:  GOTO   3D02
03F32:  MOVF   01,F
03F34:  BTFSS  FD8.2
03F36:  GOTO   3F46
....................       return command;
03F3A:  MOVLW  8B
03F3C:  MOVWF  01
03F3E:  MOVLW  03
03F40:  MOVWF  02
03F42:  GOTO   3FB4
.................... 
....................    command.frame_id = frame_id;
03F46:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
03F4A:  MOVLW  01
03F4C:  MOVLB  3
03F4E:  ADDWF  x99,W
03F50:  MOVWF  01
03F52:  MOVLW  00
03F54:  ADDWFC x9A,W
03F56:  MOVWF  03
03F58:  MOVF   01,W
03F5A:  MOVWF  x9E
03F5C:  MOVFF  03,39F
03F60:  MOVLW  02
03F62:  SUBWF  x9D,W
03F64:  MOVWF  xA0
03F66:  MOVLW  03
03F68:  MOVWF  FEA
03F6A:  MOVLW  8E
03F6C:  MOVWF  FE9
03F6E:  MOVFF  39F,FE2
03F72:  MOVFF  39E,FE1
03F76:  MOVF   xA0,W
03F78:  MOVWF  01
03F7A:  BTFSS  FD8.2
03F7C:  BRA    3F84
03F7E:  MOVLB  0
03F80:  GOTO   3F90
03F84:  MOVLB  0
03F86:  MOVFF  FE6,FEE
03F8A:  DECFSZ 01,F
03F8C:  GOTO   3F86
....................    command.size = receive_frame_size-2;
03F90:  MOVLW  02
03F92:  MOVLB  3
03F94:  SUBWF  x9D,W
03F96:  MOVWF  x8C
....................    command.is_exist = TRUE;
03F98:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
03F9A:  MOVLW  32
03F9C:  MOVWF  FF6
03F9E:  MOVLW  07
03FA0:  MOVWF  FF7
03FA2:  MOVLW  00
03FA4:  MOVWF  FF8
03FA6:  MOVLB  0
03FA8:  CALL   181E
....................    return command;
03FAC:  MOVLW  8B
03FAE:  MOVWF  01
03FB0:  MOVLW  03
03FB2:  MOVWF  02
03FB4:  GOTO   9436 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03A6A:  MOVLB  3
03A6C:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03A6E:  CLRF   xA1
03A70:  MOVLB  0
03A72:  MOVLW  01
03A74:  MOVLB  3
03A76:  SUBWF  xA0,W
03A78:  SUBWF  xA1,W
03A7A:  BTFSS  FD8.0
03A7C:  BRA    3A84
03A7E:  MOVLB  0
03A80:  GOTO   3ABC
03A84:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03A86:  MOVLB  3
03A88:  MOVF   xA1,W
03A8A:  ADDWF  x9E,W
03A8C:  MOVWF  FE9
03A8E:  MOVLW  00
03A90:  ADDWFC x9F,W
03A92:  MOVWF  FEA
03A94:  MOVF   FEF,W
03A96:  SUBLW  AA
03A98:  BTFSC  FD8.2
03A9A:  BRA    3AA2
03A9C:  MOVLB  0
03A9E:  GOTO   3AB2
03AA2:  MOVLB  0
....................          return i+1;
03AA4:  MOVLW  01
03AA6:  MOVLB  3
03AA8:  ADDWF  xA1,W
03AAA:  MOVWF  01
03AAC:  MOVLB  0
03AAE:  GOTO   3B0E
03AB2:  MOVLB  3
03AB4:  INCF   xA1,F
03AB6:  MOVLB  0
03AB8:  GOTO   3A72
....................    if (receive_signal[i] == SFD)
03ABC:  MOVLB  3
03ABE:  MOVF   xA1,W
03AC0:  ADDWF  x9E,W
03AC2:  MOVWF  FE9
03AC4:  MOVLW  00
03AC6:  ADDWFC x9F,W
03AC8:  MOVWF  FEA
03ACA:  MOVF   FEF,W
03ACC:  SUBLW  AA
03ACE:  BTFSC  FD8.2
03AD0:  BRA    3AD8
03AD2:  MOVLB  0
03AD4:  GOTO   3AF6
03AD8:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03ADA:  MOVLW  4E
03ADC:  MOVWF  FF6
03ADE:  MOVLW  07
03AE0:  MOVWF  FF7
03AE2:  MOVLW  00
03AE4:  MOVWF  FF8
03AE6:  CALL   181E
....................       return -1;
03AEA:  MOVLW  FF
03AEC:  MOVWF  01
03AEE:  GOTO   3B0E
....................    }
03AF2:  GOTO   3B0E
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03AF6:  MOVLW  64
03AF8:  MOVWF  FF6
03AFA:  MOVLW  07
03AFC:  MOVWF  FF7
03AFE:  MOVLW  00
03B00:  MOVWF  FF8
03B02:  CALL   181E
....................       return -1;
03B06:  MOVLW  FF
03B08:  MOVWF  01
03B0A:  GOTO   3B0E
....................    }
03B0E:  GOTO   3E70 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03B12:  MOVLB  3
03B14:  CLRF   x9F
03B16:  MOVLB  0
03B18:  MOVLB  3
03B1A:  MOVF   x9F,W
03B1C:  SUBLW  02
03B1E:  BTFSC  FD8.0
03B20:  BRA    3B28
03B22:  MOVLB  0
03B24:  GOTO   3B86
03B28:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03B2A:  BCF    FD8.0
03B2C:  MOVLB  3
03B2E:  RLCF   x9F,W
03B30:  CLRF   xA1
03B32:  MOVWF  xA0
03B34:  MOVLW  E6
03B36:  ADDWF  xA0,W
03B38:  MOVWF  FE9
03B3A:  MOVLW  00
03B3C:  ADDWFC xA1,W
03B3E:  MOVWF  FEA
03B40:  MOVF   FEF,W
03B42:  SUBWF  x9E,W
03B44:  BTFSC  FD8.2
03B46:  BRA    3B4E
03B48:  MOVLB  0
03B4A:  GOTO   3B7C
03B4E:  MOVLB  0
....................          return frame_ids[i].length;
03B50:  BCF    FD8.0
03B52:  MOVLB  3
03B54:  RLCF   x9F,W
03B56:  CLRF   xA1
03B58:  MOVWF  xA0
03B5A:  MOVLW  01
03B5C:  ADDWF  xA0,W
03B5E:  MOVWF  01
03B60:  MOVLW  00
03B62:  ADDWFC xA1,W
03B64:  MOVWF  03
03B66:  MOVF   01,W
03B68:  ADDLW  E6
03B6A:  MOVWF  FE9
03B6C:  MOVLW  00
03B6E:  ADDWFC 03,W
03B70:  MOVWF  FEA
03B72:  MOVF   FEF,W
03B74:  MOVWF  01
03B76:  MOVLB  0
03B78:  GOTO   3BCA
03B7C:  MOVLB  3
03B7E:  INCF   x9F,F
03B80:  MOVLB  0
03B82:  GOTO   3B18
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
03B86:  MOVLW  76
03B88:  MOVWF  FF6
03B8A:  MOVLW  07
03B8C:  MOVWF  FF7
03B8E:  MOVLW  00
03B90:  MOVWF  FF8
03B92:  MOVLW  1F
03B94:  MOVLB  7
03B96:  MOVWF  xEC
03B98:  MOVLB  0
03B9A:  CALL   184E
03B9E:  MOVFF  39E,427
03BA2:  MOVLW  37
03BA4:  MOVLB  4
03BA6:  MOVWF  x28
03BA8:  MOVLB  0
03BAA:  CALL   1A10
03BAE:  MOVLW  0D
03BB0:  MOVLB  8
03BB2:  MOVWF  x2F
03BB4:  MOVLB  0
03BB6:  CALL   17CC
03BBA:  MOVLW  0A
03BBC:  MOVLB  8
03BBE:  MOVWF  x2F
03BC0:  MOVLB  0
03BC2:  CALL   17CC
....................    return -1;
03BC6:  MOVLW  FF
03BC8:  MOVWF  01
03BCA:  GOTO   3EC0 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03C18:  MOVLW  01
03C1A:  MOVLB  3
03C1C:  SUBWF  xA0,W
03C1E:  ADDWF  x9E,W
03C20:  MOVWF  FE9
03C22:  MOVLW  00
03C24:  ADDWFC x9F,W
03C26:  MOVWF  FEA
03C28:  MOVFF  FEF,3A1
03C2C:  MOVLW  01
03C2E:  SUBWF  xA0,W
03C30:  MOVWF  xA3
03C32:  MOVFF  39F,7ED
03C36:  MOVFF  39E,7EC
03C3A:  MOVFF  3A3,7EE
03C3E:  MOVLB  0
03C40:  CALL   3BCE
03C44:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03C48:  MOVLB  3
03C4A:  MOVF   xA2,W
03C4C:  SUBWF  xA1,W
03C4E:  BTFSC  FD8.2
03C50:  BRA    3C58
03C52:  MOVLB  0
03C54:  GOTO   3C66
03C58:  MOVLB  0
....................       return TRUE;
03C5A:  MOVLW  01
03C5C:  MOVWF  01
03C5E:  GOTO   3CFE
03C62:  GOTO   3CFE
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03C66:  MOVLW  9A
03C68:  MOVWF  FF6
03C6A:  MOVLW  07
03C6C:  MOVWF  FF7
03C6E:  MOVLW  00
03C70:  MOVWF  FF8
03C72:  CALL   181E
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03C76:  MOVLW  AC
03C78:  MOVWF  FF6
03C7A:  MOVLW  07
03C7C:  MOVWF  FF7
03C7E:  MOVLW  00
03C80:  MOVWF  FF8
03C82:  MOVLW  13
03C84:  MOVLB  7
03C86:  MOVWF  xEC
03C88:  MOVLB  0
03C8A:  CALL   184E
03C8E:  MOVFF  3A1,427
03C92:  MOVLW  37
03C94:  MOVLB  4
03C96:  MOVWF  x28
03C98:  MOVLB  0
03C9A:  CALL   1A10
03C9E:  MOVLW  0D
03CA0:  MOVLB  8
03CA2:  MOVWF  x2F
03CA4:  MOVLB  0
03CA6:  CALL   17CC
03CAA:  MOVLW  0A
03CAC:  MOVLB  8
03CAE:  MOVWF  x2F
03CB0:  MOVLB  0
03CB2:  CALL   17CC
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03CB6:  MOVLW  C4
03CB8:  MOVWF  FF6
03CBA:  MOVLW  07
03CBC:  MOVWF  FF7
03CBE:  MOVLW  00
03CC0:  MOVWF  FF8
03CC2:  MOVLW  13
03CC4:  MOVLB  7
03CC6:  MOVWF  xEC
03CC8:  MOVLB  0
03CCA:  CALL   184E
03CCE:  MOVFF  3A2,427
03CD2:  MOVLW  37
03CD4:  MOVLB  4
03CD6:  MOVWF  x28
03CD8:  MOVLB  0
03CDA:  CALL   1A10
03CDE:  MOVLW  0D
03CE0:  MOVLB  8
03CE2:  MOVWF  x2F
03CE4:  MOVLB  0
03CE6:  CALL   17CC
03CEA:  MOVLW  0A
03CEC:  MOVLB  8
03CEE:  MOVWF  x2F
03CF0:  MOVLB  0
03CF2:  CALL   17CC
....................       return FALSE;
03CF6:  MOVLW  00
03CF8:  MOVWF  01
03CFA:  GOTO   3CFE
....................    }
03CFE:  GOTO   3EFC (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03D02:  MOVLB  3
03D04:  MOVF   x9F,W
03D06:  SUBLW  0C
03D08:  BTFSC  FD8.2
03D0A:  BRA    3D12
03D0C:  MOVLB  0
03D0E:  GOTO   3D20
03D12:  MOVLB  0
....................       return TRUE;
03D14:  MOVLW  01
03D16:  MOVWF  01
03D18:  GOTO   3DB8
03D1C:  GOTO   3DB8
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03D20:  MOVLW  DC
03D22:  MOVWF  FF6
03D24:  MOVLW  07
03D26:  MOVWF  FF7
03D28:  MOVLW  00
03D2A:  MOVWF  FF8
03D2C:  CALL   181E
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03D30:  MOVLW  FE
03D32:  MOVWF  FF6
03D34:  MOVLW  07
03D36:  MOVWF  FF7
03D38:  MOVLW  00
03D3A:  MOVWF  FF8
03D3C:  MOVLW  13
03D3E:  MOVLB  7
03D40:  MOVWF  xEC
03D42:  MOVLB  0
03D44:  CALL   184E
03D48:  MOVFF  39F,427
03D4C:  MOVLW  37
03D4E:  MOVLB  4
03D50:  MOVWF  x28
03D52:  MOVLB  0
03D54:  CALL   1A10
03D58:  MOVLW  0D
03D5A:  MOVLB  8
03D5C:  MOVWF  x2F
03D5E:  MOVLB  0
03D60:  CALL   17CC
03D64:  MOVLW  0A
03D66:  MOVLB  8
03D68:  MOVWF  x2F
03D6A:  MOVLB  0
03D6C:  CALL   17CC
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
03D70:  MOVLW  16
03D72:  MOVWF  FF6
03D74:  MOVLW  08
03D76:  MOVWF  FF7
03D78:  MOVLW  00
03D7A:  MOVWF  FF8
03D7C:  MOVLW  13
03D7E:  MOVLB  7
03D80:  MOVWF  xEC
03D82:  MOVLB  0
03D84:  CALL   184E
03D88:  MOVLW  0C
03D8A:  MOVLB  4
03D8C:  MOVWF  x27
03D8E:  MOVLW  37
03D90:  MOVWF  x28
03D92:  MOVLB  0
03D94:  CALL   1A10
03D98:  MOVLW  0D
03D9A:  MOVLB  8
03D9C:  MOVWF  x2F
03D9E:  MOVLB  0
03DA0:  CALL   17CC
03DA4:  MOVLW  0A
03DA6:  MOVLB  8
03DA8:  MOVWF  x2F
03DAA:  MOVLB  0
03DAC:  CALL   17CC
....................       return FALSE;  
03DB0:  MOVLW  00
03DB2:  MOVWF  01
03DB4:  GOTO   3DB8
....................    }
03DB8:  GOTO   3F32 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
040E2:  MOVLW  AA
040E4:  MOVLB  3
040E6:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
040E8:  MOVF   x86,W
040EA:  IORLW  50
040EC:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
040EE:  MOVLW  03
040F0:  MOVWF  FEA
040F2:  MOVLW  8C
040F4:  MOVWF  FE9
040F6:  MOVFF  388,FE2
040FA:  MOVFF  387,FE1
040FE:  MOVF   x89,W
04100:  MOVWF  01
04102:  BTFSS  FD8.2
04104:  BRA    410C
04106:  MOVLB  0
04108:  GOTO   4118
0410C:  MOVLB  0
0410E:  MOVFF  FE6,FEE
04112:  DECFSZ 01,F
04114:  GOTO   410E
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
04118:  MOVLW  02
0411A:  MOVLB  3
0411C:  ADDWF  x89,W
0411E:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
04120:  CLRF   03
04122:  MOVF   x9A,W
04124:  ADDLW  8A
04126:  MOVWF  01
04128:  MOVLW  03
0412A:  ADDWFC 03,F
0412C:  MOVF   01,W
0412E:  MOVWF  x9C
04130:  MOVFF  03,39D
04134:  MOVLW  01
04136:  SUBWF  x9A,W
04138:  MOVWF  x9E
0413A:  MOVLW  03
0413C:  MOVLB  7
0413E:  MOVWF  xED
04140:  MOVLW  8B
04142:  MOVWF  xEC
04144:  MOVFF  39E,7EE
04148:  MOVLB  0
0414A:  CALL   3BCE
0414E:  MOVFF  39D,FEA
04152:  MOVFF  39C,FE9
04156:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0415A:  MOVLW  01
0415C:  MOVLB  3
0415E:  ADDWF  x9A,W
04160:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
04162:  MOVLW  03
04164:  MOVWF  x9D
04166:  MOVLW  8A
04168:  MOVWF  x9C
0416A:  MOVFF  39B,39E
0416E:  MOVLB  0
04170:  GOTO   402A
04174:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0402A:  MOVLB  3
0402C:  CLRF   x9F
0402E:  MOVLB  0
04030:  MOVLB  3
04032:  MOVF   x9E,W
04034:  SUBWF  x9F,W
04036:  BTFSS  FD8.0
04038:  BRA    4040
0403A:  MOVLB  0
0403C:  GOTO   4066
04040:  MOVLB  0
....................       fputc(data[i], BOSS);
04042:  MOVLB  3
04044:  MOVF   x9F,W
04046:  ADDWF  x9C,W
04048:  MOVWF  FE9
0404A:  MOVLW  00
0404C:  ADDWFC x9D,W
0404E:  MOVWF  FEA
04050:  MOVFF  FEF,3A1
04054:  MOVF   xA1,W
04056:  MOVLB  0
04058:  GOTO   401A
0405C:  MOVLB  3
0405E:  INCF   x9F,F
04060:  MOVLB  0
04062:  GOTO   4030
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04066:  MOVLW  2E
04068:  MOVWF  FF6
0406A:  MOVLW  08
0406C:  MOVWF  FF7
0406E:  MOVLW  00
04070:  MOVWF  FF8
04072:  CALL   181E
....................    for(int i = 0; i < data_size; i++)
04076:  MOVLB  3
04078:  CLRF   xA0
0407A:  MOVLB  0
0407C:  MOVLB  3
0407E:  MOVF   x9E,W
04080:  SUBWF  xA0,W
04082:  BTFSS  FD8.0
04084:  BRA    408C
04086:  MOVLB  0
04088:  GOTO   40C6
0408C:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0408E:  MOVLB  3
04090:  MOVF   xA0,W
04092:  ADDWF  x9C,W
04094:  MOVWF  FE9
04096:  MOVLW  00
04098:  ADDWFC x9D,W
0409A:  MOVWF  FEA
0409C:  MOVFF  FEF,3A1
040A0:  MOVFF  3A1,427
040A4:  MOVLW  37
040A6:  MOVLB  4
040A8:  MOVWF  x28
040AA:  MOVLB  0
040AC:  CALL   1A10
040B0:  MOVLW  20
040B2:  MOVLB  8
040B4:  MOVWF  x2F
040B6:  MOVLB  0
040B8:  CALL   17CC
040BC:  MOVLB  3
040BE:  INCF   xA0,F
040C0:  MOVLB  0
040C2:  GOTO   407C
....................    fprintf(PC, "\r\n");
040C6:  MOVLW  0D
040C8:  MOVLB  8
040CA:  MOVWF  x2F
040CC:  MOVLB  0
040CE:  CALL   17CC
040D2:  MOVLW  0A
040D4:  MOVLB  8
040D6:  MOVWF  x2F
040D8:  MOVLB  0
040DA:  CALL   17CC
040DE:  GOTO   4174 (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04176:  MOVLW  0F
04178:  MOVLB  3
0417A:  MOVWF  x86
0417C:  CLRF   x88
0417E:  CLRF   x87
04180:  CLRF   x89
04182:  MOVLB  0
04184:  CALL   40E2
04188:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
071A4:  MOVLW  03
071A6:  MOVLB  3
071A8:  MOVWF  x86
071AA:  CLRF   x88
071AC:  MOVLW  48
071AE:  MOVWF  x87
071B0:  MOVLW  04
071B2:  MOVWF  x89
071B4:  MOVLB  0
071B6:  CALL   40E2
071BA:  GOTO   71E2 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_func.c"
.................... #include "mmj_cigs_func.h"               // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     // #define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
04772:  MOVLW  9E
04774:  MOVWF  FF6
04776:  MOVLW  09
04778:  MOVWF  FF7
0477A:  MOVLW  00
0477C:  MOVWF  FF8
0477E:  CALL   181E
....................     output_high(CONNECT_CIGS1);
04782:  BCF    F94.0
04784:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04786:  BCF    F94.7
04788:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
0478A:  MOVLW  85
0478C:  MOVWF  00
0478E:  DECFSZ 00,F
04790:  BRA    478E
....................     fprintf(PC, "step, voltage, current\r\n");
04792:  MOVLW  B2
04794:  MOVWF  FF6
04796:  MOVLW  09
04798:  MOVWF  FF7
0479A:  MOVLW  00
0479C:  MOVWF  FF8
0479E:  CALL   181E
....................     mcp4901_1_write(0); // Initialize DAC to 0
047A2:  MOVLB  7
047A4:  CLRF   xED
047A6:  CLRF   xEC
047A8:  MOVLB  0
047AA:  CALL   460A
....................     delay_ms(100); // wait for the DAC to stabilize
047AE:  MOVLW  64
047B0:  MOVLB  8
047B2:  MOVWF  x44
047B4:  MOVLB  0
047B6:  CALL   179E
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
047BA:  MOVLB  3
047BC:  CLRF   x95
047BE:  MOVLB  0
047C0:  MOVLB  3
047C2:  MOVF   x90,W
047C4:  SUBWF  x95,W
047C6:  BTFSS  FD8.0
047C8:  BRA    47D0
047CA:  MOVLB  0
047CC:  GOTO   4896
047D0:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
047D2:  MOVLB  7
047D4:  CLRF   xED
047D6:  MOVFF  395,7EC
047DA:  MOVLB  0
047DC:  CALL   460A
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
047E0:  MOVLW  02
047E2:  MOVLB  7
047E4:  MOVWF  xEE
047E6:  MOVLB  0
047E8:  CALL   1984
047EC:  MOVFF  02,392
047F0:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
047F4:  MOVLW  01
047F6:  MOVLB  7
047F8:  MOVWF  xEE
047FA:  MOVLB  0
047FC:  CALL   1984
04800:  MOVFF  02,394
04804:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
04808:  MOVFF  395,7EC
0480C:  MOVLW  1B
0480E:  MOVLB  7
04810:  MOVWF  xED
04812:  MOVLB  0
04814:  CALL   440A
04818:  MOVLW  2C
0481A:  MOVLB  8
0481C:  MOVWF  x2F
0481E:  MOVLB  0
04820:  CALL   17CC
04824:  MOVLW  20
04826:  MOVLB  8
04828:  MOVWF  x2F
0482A:  MOVLB  0
0482C:  CALL   17CC
04830:  MOVLW  10
04832:  MOVWF  FE9
04834:  MOVFF  392,397
04838:  MOVFF  391,396
0483C:  CALL   4648
04840:  MOVLW  2C
04842:  MOVLB  8
04844:  MOVWF  x2F
04846:  MOVLB  0
04848:  CALL   17CC
0484C:  MOVLW  20
0484E:  MOVLB  8
04850:  MOVWF  x2F
04852:  MOVLB  0
04854:  CALL   17CC
04858:  MOVLW  10
0485A:  MOVWF  FE9
0485C:  MOVFF  394,397
04860:  MOVFF  393,396
04864:  CALL   4648
04868:  MOVLW  0D
0486A:  MOVLB  8
0486C:  MOVWF  x2F
0486E:  MOVLB  0
04870:  CALL   17CC
04874:  MOVLW  0A
04876:  MOVLB  8
04878:  MOVWF  x2F
0487A:  MOVLB  0
0487C:  CALL   17CC
....................         delay_ms(1); // wait for the ADC to stabilize
04880:  MOVLW  01
04882:  MOVLB  8
04884:  MOVWF  x44
04886:  MOVLB  0
04888:  CALL   179E
0488C:  MOVLB  3
0488E:  INCF   x95,F
04890:  MOVLB  0
04892:  GOTO   47C0
....................     }
04896:  GOTO   490E (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
0492A:  MOVLB  7
0492C:  CLRF   xED
0492E:  CLRF   xEC
04930:  MOVLB  0
04932:  CALL   460A
....................     fprintf(PC, "Start ADC TEST\r\n");
04936:  MOVLW  CC
04938:  MOVWF  FF6
0493A:  MOVLW  09
0493C:  MOVWF  FF7
0493E:  MOVLW  00
04940:  MOVWF  FF8
04942:  CALL   181E
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
04946:  MOVLB  7
04948:  CLRF   xEE
0494A:  MOVLB  0
0494C:  CALL   1984
04950:  MOVFF  02,38C
04954:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04958:  MOVLW  DE
0495A:  MOVWF  FF6
0495C:  MOVLW  09
0495E:  MOVWF  FF7
04960:  MOVLW  00
04962:  MOVWF  FF8
04964:  MOVLW  0D
04966:  MOVLB  7
04968:  MOVWF  xEC
0496A:  MOVLB  0
0496C:  CALL   184E
04970:  MOVFF  38C,427
04974:  MOVLW  37
04976:  MOVLB  4
04978:  MOVWF  x28
0497A:  MOVLB  0
0497C:  CALL   1A10
04980:  MOVFF  38B,427
04984:  MOVLW  37
04986:  MOVLB  4
04988:  MOVWF  x28
0498A:  MOVLB  0
0498C:  CALL   1A10
04990:  MOVLW  0D
04992:  MOVLB  8
04994:  MOVWF  x2F
04996:  MOVLB  0
04998:  CALL   17CC
0499C:  MOVLW  0A
0499E:  MOVLB  8
049A0:  MOVWF  x2F
049A2:  MOVLB  0
049A4:  CALL   17CC
....................     ans = ad7490_read(ADC_CIGS1_CURR);
049A8:  MOVLW  01
049AA:  MOVLB  7
049AC:  MOVWF  xEE
049AE:  MOVLB  0
049B0:  CALL   1984
049B4:  MOVFF  02,38C
049B8:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
049BC:  MOVLW  F4
049BE:  MOVWF  FF6
049C0:  MOVLW  09
049C2:  MOVWF  FF7
049C4:  MOVLW  00
049C6:  MOVWF  FF8
049C8:  MOVLW  0D
049CA:  MOVLB  7
049CC:  MOVWF  xEC
049CE:  MOVLB  0
049D0:  CALL   184E
049D4:  MOVFF  38C,427
049D8:  MOVLW  37
049DA:  MOVLB  4
049DC:  MOVWF  x28
049DE:  MOVLB  0
049E0:  CALL   1A10
049E4:  MOVFF  38B,427
049E8:  MOVLW  37
049EA:  MOVLB  4
049EC:  MOVWF  x28
049EE:  MOVLB  0
049F0:  CALL   1A10
049F4:  MOVLW  0D
049F6:  MOVLB  8
049F8:  MOVWF  x2F
049FA:  MOVLB  0
049FC:  CALL   17CC
04A00:  MOVLW  0A
04A02:  MOVLB  8
04A04:  MOVWF  x2F
04A06:  MOVLB  0
04A08:  CALL   17CC
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04A0C:  MOVLW  02
04A0E:  MOVLB  7
04A10:  MOVWF  xEE
04A12:  MOVLB  0
04A14:  CALL   1984
04A18:  MOVFF  02,38C
04A1C:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
04A20:  MOVLW  0A
04A22:  MOVWF  FF6
04A24:  MOVLW  0A
04A26:  MOVWF  FF7
04A28:  MOVLW  00
04A2A:  MOVWF  FF8
04A2C:  MOVLW  0F
04A2E:  MOVLB  7
04A30:  MOVWF  xEC
04A32:  MOVLB  0
04A34:  CALL   184E
04A38:  MOVFF  38C,427
04A3C:  MOVLW  37
04A3E:  MOVLB  4
04A40:  MOVWF  x28
04A42:  MOVLB  0
04A44:  CALL   1A10
04A48:  MOVFF  38B,427
04A4C:  MOVLW  37
04A4E:  MOVLB  4
04A50:  MOVWF  x28
04A52:  MOVLB  0
04A54:  CALL   1A10
04A58:  MOVLW  0D
04A5A:  MOVLB  8
04A5C:  MOVWF  x2F
04A5E:  MOVLB  0
04A60:  CALL   17CC
04A64:  MOVLW  0A
04A66:  MOVLB  8
04A68:  MOVWF  x2F
04A6A:  MOVLB  0
04A6C:  CALL   17CC
....................     ans = ad7490_read(ADC_CIGS1_VREF);
04A70:  MOVLW  03
04A72:  MOVLB  7
04A74:  MOVWF  xEE
04A76:  MOVLB  0
04A78:  CALL   1984
04A7C:  MOVFF  02,38C
04A80:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04A84:  MOVLW  22
04A86:  MOVWF  FF6
04A88:  MOVLW  0A
04A8A:  MOVWF  FF7
04A8C:  MOVLW  00
04A8E:  MOVWF  FF8
04A90:  MOVLW  10
04A92:  MOVLB  7
04A94:  MOVWF  xEC
04A96:  MOVLB  0
04A98:  CALL   184E
04A9C:  MOVFF  38C,427
04AA0:  MOVLW  37
04AA2:  MOVLB  4
04AA4:  MOVWF  x28
04AA6:  MOVLB  0
04AA8:  CALL   1A10
04AAC:  MOVFF  38B,427
04AB0:  MOVLW  37
04AB2:  MOVLB  4
04AB4:  MOVWF  x28
04AB6:  MOVLB  0
04AB8:  CALL   1A10
04ABC:  MOVLW  0D
04ABE:  MOVLB  8
04AC0:  MOVWF  x2F
04AC2:  MOVLB  0
04AC4:  CALL   17CC
04AC8:  MOVLW  0A
04ACA:  MOVLB  8
04ACC:  MOVWF  x2F
04ACE:  MOVLB  0
04AD0:  CALL   17CC
04AD4:  GOTO   701A (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
04AD8:  MOVLW  94
04ADA:  MOVWF  FF6
04ADC:  MOVLW  0A
04ADE:  MOVWF  FF7
04AE0:  MOVLW  00
04AE2:  MOVWF  FF8
04AE4:  CALL   181E
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04AE8:  MOVLW  A8
04AEA:  MOVWF  FF6
04AEC:  MOVLW  0A
04AEE:  MOVWF  FF7
04AF0:  MOVLW  00
04AF2:  MOVWF  FF8
04AF4:  MOVLW  0E
04AF6:  MOVLB  7
04AF8:  MOVWF  xEC
04AFA:  MOVLB  0
04AFC:  CALL   184E
04B00:  MOVFF  396,7EC
04B04:  MOVLW  1B
04B06:  MOVLB  7
04B08:  MOVWF  xED
04B0A:  MOVLB  0
04B0C:  CALL   440A
04B10:  MOVLW  0D
04B12:  MOVLB  8
04B14:  MOVWF  x2F
04B16:  MOVLB  0
04B18:  CALL   17CC
04B1C:  MOVLW  0A
04B1E:  MOVLB  8
04B20:  MOVWF  x2F
04B22:  MOVLB  0
04B24:  CALL   17CC
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
04B28:  BCF    F94.0
04B2A:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
04B2C:  BCF    F94.5
04B2E:  BCF    F8B.5
....................     output_low(EN_NPWR); 
04B30:  BCF    F94.7
04B32:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
04B34:  CALL   2C12
04B38:  MOVFF  03,39A
04B3C:  MOVFF  02,399
04B40:  MOVFF  01,398
04B44:  MOVFF  00,397
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
04B48:  MOVLW  0D
04B4A:  MOVLB  7
04B4C:  MOVWF  xEE
04B4E:  MOVLB  0
04B50:  CALL   1984
04B54:  MOVFF  02,39C
04B58:  MOVFF  01,39B
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
04B5C:  MOVLW  0E
04B5E:  MOVLB  7
04B60:  MOVWF  xEE
04B62:  MOVLB  0
04B64:  CALL   1984
04B68:  MOVFF  02,39E
04B6C:  MOVFF  01,39D
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
04B70:  MOVLW  0C
04B72:  MOVLB  7
04B74:  MOVWF  xEE
04B76:  MOVLB  0
04B78:  CALL   1984
04B7C:  MOVFF  02,3A0
04B80:  MOVFF  01,39F
....................     measured_data.pd = ad7490_read(ADC_PD); 
04B84:  MOVLW  0F
04B86:  MOVLB  7
04B88:  MOVWF  xEE
04B8A:  MOVLB  0
04B8C:  CALL   1984
04B90:  MOVFF  02,3A2
04B94:  MOVFF  01,3A1
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
04B98:  MOVLB  7
04B9A:  CLRF   x9F
04B9C:  MOVLB  0
04B9E:  MOVLB  3
04BA0:  MOVF   x96,W
04BA2:  MOVLB  7
04BA4:  SUBWF  x9F,W
04BA6:  BTFSS  FD8.0
04BA8:  BRA    4BB0
04BAA:  MOVLB  0
04BAC:  GOTO   4C4E
04BB0:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04BB2:  MOVLB  7
04BB4:  CLRF   xED
04BB6:  MOVFF  79F,7EC
04BBA:  MOVLB  0
04BBC:  CALL   460A
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
04BC0:  MOVLW  0A
04BC2:  MOVLB  8
04BC4:  MOVWF  x44
04BC6:  MOVLB  0
04BC8:  CALL   179E
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
04BCC:  CLRF   03
04BCE:  MOVLB  7
04BD0:  MOVF   x9F,W
04BD2:  MOVWF  02
04BD4:  BCF    FD8.0
04BD6:  RLCF   02,F
04BD8:  RLCF   03,F
04BDA:  MOVF   02,W
04BDC:  ADDLW  A3
04BDE:  MOVWF  01
04BE0:  MOVLW  03
04BE2:  ADDWFC 03,F
04BE4:  MOVF   01,W
04BE6:  MOVWF  xEC
04BE8:  MOVFF  03,7ED
04BEC:  MOVLW  02
04BEE:  MOVWF  xEE
04BF0:  MOVLB  0
04BF2:  CALL   1984
04BF6:  MOVFF  7ED,FEA
04BFA:  MOVFF  7EC,FE9
04BFE:  MOVFF  02,FEC
04C02:  MOVF   FED,F
04C04:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
04C08:  CLRF   03
04C0A:  MOVLB  7
04C0C:  MOVF   x9F,W
04C0E:  MOVWF  02
04C10:  BCF    FD8.0
04C12:  RLCF   02,F
04C14:  RLCF   03,F
04C16:  MOVF   02,W
04C18:  ADDLW  A1
04C1A:  MOVWF  01
04C1C:  MOVLW  05
04C1E:  ADDWFC 03,F
04C20:  MOVF   01,W
04C22:  MOVWF  xEC
04C24:  MOVFF  03,7ED
04C28:  MOVLW  01
04C2A:  MOVWF  xEE
04C2C:  MOVLB  0
04C2E:  CALL   1984
04C32:  MOVFF  7ED,FEA
04C36:  MOVFF  7EC,FE9
04C3A:  MOVFF  02,FEC
04C3E:  MOVF   FED,F
04C40:  MOVFF  01,FEF
04C44:  MOVLB  7
04C46:  INCF   x9F,F
04C48:  MOVLB  0
04C4A:  GOTO   4B9E
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
04C4E:  BCF    F94.0
04C50:  BCF    F8B.0
....................     output_high(EN_NPWR);
04C52:  BCF    F94.7
04C54:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
04C56:  MOVLW  BC
04C58:  MOVWF  FF6
04C5A:  MOVLW  0A
04C5C:  MOVWF  FF7
04C5E:  MOVLW  00
04C60:  MOVWF  FF8
04C62:  CALL   181E
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
04C66:  MOVLW  CE
04C68:  MOVWF  FF6
04C6A:  MOVLW  0A
04C6C:  MOVWF  FF7
04C6E:  MOVLW  00
04C70:  MOVWF  FF8
04C72:  CALL   181E
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
04C76:  MOVLB  7
04C78:  CLRF   xA0
04C7A:  CLRF   xA1
04C7C:  CLRF   xA2
04C7E:  CLRF   xA3
04C80:  CLRF   xA4
04C82:  CLRF   xA5
04C84:  CLRF   xA6
04C86:  CLRF   xA7
04C88:  CLRF   xA8
04C8A:  CLRF   xA9
04C8C:  CLRF   xAA
04C8E:  CLRF   xAB
04C90:  CLRF   xAC
04C92:  CLRF   xAD
04C94:  CLRF   xAE
04C96:  CLRF   xAF
04C98:  CLRF   xB0
04C9A:  CLRF   xB1
04C9C:  CLRF   xB2
04C9E:  CLRF   xB3
04CA0:  CLRF   xB4
04CA2:  CLRF   xB5
04CA4:  CLRF   xB6
04CA6:  CLRF   xB7
04CA8:  CLRF   xB8
04CAA:  CLRF   xB9
04CAC:  CLRF   xBA
04CAE:  CLRF   xBB
04CB0:  CLRF   xBC
04CB2:  CLRF   xBD
04CB4:  CLRF   xBE
04CB6:  CLRF   xBF
04CB8:  CLRF   xC0
04CBA:  CLRF   xC1
04CBC:  CLRF   xC2
04CBE:  CLRF   xC3
04CC0:  CLRF   xC4
04CC2:  CLRF   xC5
04CC4:  CLRF   xC6
04CC6:  CLRF   xC7
04CC8:  CLRF   xC8
04CCA:  CLRF   xC9
04CCC:  CLRF   xCA
04CCE:  CLRF   xCB
04CD0:  CLRF   xCC
04CD2:  CLRF   xCD
04CD4:  CLRF   xCE
04CD6:  CLRF   xCF
04CD8:  CLRF   xD0
04CDA:  CLRF   xD1
04CDC:  CLRF   xD2
04CDE:  CLRF   xD3
04CE0:  CLRF   xD4
04CE2:  CLRF   xD5
04CE4:  CLRF   xD6
04CE6:  CLRF   xD7
04CE8:  CLRF   xD8
04CEA:  CLRF   xD9
04CEC:  CLRF   xDA
04CEE:  CLRF   xDB
04CF0:  CLRF   xDC
04CF2:  CLRF   xDD
04CF4:  CLRF   xDE
04CF6:  CLRF   xDF
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
04CF8:  CLRF   xE0
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
04CFA:  CLRF   xE2
04CFC:  CLRF   xE1
04CFE:  MOVLB  0
04D00:  MOVLB  7
04D02:  MOVF   xE2,F
04D04:  BTFSC  FD8.2
04D06:  BRA    4D0E
04D08:  MOVLB  0
04D0A:  GOTO   4F44
04D0E:  MOVLB  0
04D10:  MOVLB  3
04D12:  MOVF   x96,W
04D14:  MOVLB  7
04D16:  SUBWF  xE1,W
04D18:  BTFSS  FD8.0
04D1A:  BRA    4D22
04D1C:  MOVLB  0
04D1E:  GOTO   4F44
04D22:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
04D24:  CLRF   03
04D26:  MOVLB  7
04D28:  MOVF   xE0,W
04D2A:  ADDLW  A0
04D2C:  MOVWF  01
04D2E:  MOVLW  07
04D30:  ADDWFC 03,F
04D32:  MOVF   01,W
04D34:  MOVWF  xEC
04D36:  MOVFF  03,7ED
04D3A:  BCF    FD8.0
04D3C:  RLCF   xE1,W
04D3E:  MOVWF  02
04D40:  RLCF   xE2,W
04D42:  MOVWF  03
04D44:  MOVF   02,W
04D46:  ADDLW  A3
04D48:  MOVWF  FE9
04D4A:  MOVLW  03
04D4C:  ADDWFC 03,W
04D4E:  MOVWF  FEA
04D50:  MOVFF  FEC,7EF
04D54:  MOVF   FED,F
04D56:  MOVFF  FEF,7EE
04D5A:  RRCF   xEF,F
04D5C:  RRCF   xEE,F
04D5E:  RRCF   xEF,F
04D60:  RRCF   xEE,F
04D62:  RRCF   xEF,F
04D64:  RRCF   xEE,F
04D66:  RRCF   xEF,F
04D68:  RRCF   xEE,F
04D6A:  MOVLW  0F
04D6C:  ANDWF  xEF,F
04D6E:  MOVF   xEE,W
04D70:  MOVWF  00
04D72:  CLRF   03
04D74:  MOVF   00,W
04D76:  MOVWF  xEE
04D78:  MOVFF  03,7EF
04D7C:  MOVFF  7ED,FEA
04D80:  MOVFF  7EC,FE9
04D84:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04D88:  INCF   xE0,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
04D8A:  CLRF   03
04D8C:  MOVF   xE0,W
04D8E:  ADDLW  A0
04D90:  MOVWF  01
04D92:  MOVLW  07
04D94:  ADDWFC 03,F
04D96:  MOVF   01,W
04D98:  MOVWF  xEC
04D9A:  MOVFF  03,7ED
04D9E:  BCF    FD8.0
04DA0:  RLCF   xE1,W
04DA2:  MOVWF  02
04DA4:  RLCF   xE2,W
04DA6:  MOVWF  03
04DA8:  MOVF   02,W
04DAA:  ADDLW  A3
04DAC:  MOVWF  FE9
04DAE:  MOVLW  03
04DB0:  ADDWFC 03,W
04DB2:  MOVWF  FEA
04DB4:  MOVFF  FEC,7EF
04DB8:  MOVF   FED,F
04DBA:  MOVFF  FEF,7EE
04DBE:  MOVLW  0F
04DC0:  ANDWF  xEE,F
04DC2:  CLRF   xEF
04DC4:  RLCF   xEE,F
04DC6:  RLCF   xEF,F
04DC8:  RLCF   xEE,F
04DCA:  RLCF   xEF,F
04DCC:  RLCF   xEE,F
04DCE:  RLCF   xEF,F
04DD0:  RLCF   xEE,F
04DD2:  RLCF   xEF,F
04DD4:  MOVLW  F0
04DD6:  ANDWF  xEE,F
04DD8:  BCF    FD8.0
04DDA:  RLCF   xE1,W
04DDC:  MOVWF  02
04DDE:  RLCF   xE2,W
04DE0:  MOVWF  03
04DE2:  MOVF   02,W
04DE4:  ADDLW  A1
04DE6:  MOVWF  FE9
04DE8:  MOVLW  05
04DEA:  ADDWFC 03,W
04DEC:  MOVWF  FEA
04DEE:  MOVFF  FEC,7F1
04DF2:  MOVF   FED,F
04DF4:  MOVFF  FEF,7F0
04DF8:  MOVFF  7F1,7F0
04DFC:  CLRF   xF1
04DFE:  MOVF   xF0,W
04E00:  ANDLW  0F
04E02:  MOVWF  00
04E04:  CLRF   03
04E06:  MOVF   00,W
04E08:  IORWF  xEE,W
04E0A:  MOVWF  00
04E0C:  MOVF   03,W
04E0E:  IORWF  xEF,W
04E10:  MOVWF  03
04E12:  MOVF   00,W
04E14:  MOVWF  xEE
04E16:  MOVFF  03,7EF
04E1A:  MOVFF  7ED,FEA
04E1E:  MOVFF  7EC,FE9
04E22:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04E26:  INCF   xE0,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
04E28:  CLRF   03
04E2A:  MOVF   xE0,W
04E2C:  ADDLW  A0
04E2E:  MOVWF  01
04E30:  MOVLW  07
04E32:  ADDWFC 03,F
04E34:  MOVF   01,W
04E36:  MOVWF  xEC
04E38:  MOVFF  03,7ED
04E3C:  BCF    FD8.0
04E3E:  RLCF   xE1,W
04E40:  MOVWF  02
04E42:  RLCF   xE2,W
04E44:  MOVWF  03
04E46:  MOVF   02,W
04E48:  ADDLW  A1
04E4A:  MOVWF  FE9
04E4C:  MOVLW  05
04E4E:  ADDWFC 03,W
04E50:  MOVWF  FEA
04E52:  MOVFF  FEC,7EF
04E56:  MOVF   FED,F
04E58:  MOVFF  FEF,7EE
04E5C:  MOVF   xEE,W
04E5E:  MOVWF  00
04E60:  CLRF   03
04E62:  MOVF   00,W
04E64:  MOVWF  xEE
04E66:  MOVFF  03,7EF
04E6A:  MOVFF  7ED,FEA
04E6E:  MOVFF  7EC,FE9
04E72:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04E76:  INCF   xE0,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
04E78:  MOVF   xE0,W
04E7A:  SUBLW  3F
04E7C:  BTFSC  FD8.2
04E7E:  BRA    4E86
04E80:  MOVLB  0
04E82:  GOTO   4F36
04E86:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
04E88:  MOVLW  07
04E8A:  MOVLB  7
04E8C:  MOVWF  xED
04E8E:  MOVLW  A0
04E90:  MOVWF  xEC
04E92:  MOVLW  3F
04E94:  MOVWF  xEE
04E96:  MOVLB  0
04E98:  CALL   3BCE
04E9C:  MOVFF  01,7DF
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04EA0:  MOVLB  3
04EA2:  MOVF   x64,W
04EA4:  MOVLB  7
04EA6:  MOVWF  xE3
04EA8:  MOVLB  3
04EAA:  MOVF   x65,W
04EAC:  MOVLB  7
04EAE:  MOVWF  xE4
04EB0:  MOVLW  16
04EB2:  MOVLB  3
04EB4:  ADDWF  x66,W
04EB6:  MOVLB  7
04EB8:  MOVWF  xE5
04EBA:  MOVLW  00
04EBC:  MOVLB  3
04EBE:  ADDWFC x67,W
04EC0:  MOVLB  7
04EC2:  MOVWF  xE6
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04EC4:  MOVFF  E1,82F
04EC8:  MOVFF  E0,82E
04ECC:  MOVFF  DF,82D
04ED0:  MOVFF  DE,82C
04ED4:  MOVFF  7E6,833
04ED8:  MOVFF  7E5,832
04EDC:  MOVFF  7E4,831
04EE0:  MOVFF  7E3,830
04EE4:  MOVLW  07
04EE6:  MOVLB  8
04EE8:  MOVWF  x35
04EEA:  MOVLW  A0
04EEC:  MOVWF  x34
04EEE:  CLRF   x37
04EF0:  MOVLW  40
04EF2:  MOVWF  x36
04EF4:  MOVLB  0
04EF6:  CALL   2F30
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
04EFA:  MOVLW  40
04EFC:  MOVLB  3
04EFE:  ADDWF  x64,F
04F00:  MOVLW  00
04F02:  ADDWFC x65,F
04F04:  MOVLW  00
04F06:  ADDWFC x66,F
04F08:  MOVLW  00
04F0A:  ADDWFC x67,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
04F0C:  MOVLW  40
04F0E:  ADDWF  x69,F
04F10:  MOVLW  00
04F12:  ADDWFC x6A,F
04F14:  MOVLW  00
04F16:  ADDWFC x6B,F
04F18:  MOVLW  00
04F1A:  ADDWFC x6C,F
....................             packetdata_index = 0; // Reset packet byte counter
04F1C:  MOVLB  7
04F1E:  CLRF   xE0
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
04F20:  MOVLW  07
04F22:  MOVWF  FEA
04F24:  MOVLW  A0
04F26:  MOVWF  FE9
04F28:  CLRF   00
04F2A:  CLRF   02
04F2C:  MOVLW  40
04F2E:  MOVWF  01
04F30:  MOVLB  0
04F32:  CALL   3FB8
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
04F36:  MOVLB  7
04F38:  INCF   xE1,F
04F3A:  BTFSC  FD8.2
04F3C:  INCF   xE2,F
04F3E:  MOVLB  0
04F40:  GOTO   4D00
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
04F44:  MOVLB  7
04F46:  MOVF   xE0,W
04F48:  SUBLW  3E
04F4A:  BTFSC  FD8.0
04F4C:  BRA    4F54
04F4E:  MOVLB  0
04F50:  GOTO   5008
04F54:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
04F56:  MOVFF  7E0,7E7
04F5A:  MOVLB  7
04F5C:  MOVF   xE7,W
04F5E:  SUBLW  3E
04F60:  BTFSC  FD8.0
04F62:  BRA    4F6A
04F64:  MOVLB  0
04F66:  GOTO   4F8A
04F6A:  MOVLB  0
....................             packetdata[j] = 0x00;
04F6C:  CLRF   03
04F6E:  MOVLB  7
04F70:  MOVF   xE7,W
04F72:  ADDLW  A0
04F74:  MOVWF  FE9
04F76:  MOVLW  07
04F78:  ADDWFC 03,W
04F7A:  MOVWF  FEA
04F7C:  CLRF   FEF
04F7E:  MOVLB  0
04F80:  MOVLB  7
04F82:  INCF   xE7,F
04F84:  MOVLB  0
04F86:  GOTO   4F5A
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04F8A:  MOVLB  3
04F8C:  MOVF   x64,W
04F8E:  MOVLB  7
04F90:  MOVWF  xE8
04F92:  MOVLB  3
04F94:  MOVF   x65,W
04F96:  MOVLB  7
04F98:  MOVWF  xE9
04F9A:  MOVLW  16
04F9C:  MOVLB  3
04F9E:  ADDWF  x66,W
04FA0:  MOVLB  7
04FA2:  MOVWF  xEA
04FA4:  MOVLW  00
04FA6:  MOVLB  3
04FA8:  ADDWFC x67,W
04FAA:  MOVLB  7
04FAC:  MOVWF  xEB
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04FAE:  MOVFF  E1,82F
04FB2:  MOVFF  E0,82E
04FB6:  MOVFF  DF,82D
04FBA:  MOVFF  DE,82C
04FBE:  MOVFF  7EB,833
04FC2:  MOVFF  7EA,832
04FC6:  MOVFF  7E9,831
04FCA:  MOVFF  7E8,830
04FCE:  MOVLW  07
04FD0:  MOVLB  8
04FD2:  MOVWF  x35
04FD4:  MOVLW  A0
04FD6:  MOVWF  x34
04FD8:  CLRF   x37
04FDA:  MOVLW  40
04FDC:  MOVWF  x36
04FDE:  MOVLB  0
04FE0:  CALL   2F30
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
04FE4:  MOVLW  40
04FE6:  MOVLB  3
04FE8:  ADDWF  x64,F
04FEA:  MOVLW  00
04FEC:  ADDWFC x65,F
04FEE:  MOVLW  00
04FF0:  ADDWFC x66,F
04FF2:  MOVLW  00
04FF4:  ADDWFC x67,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
04FF6:  MOVLW  40
04FF8:  ADDWF  x69,F
04FFA:  MOVLW  00
04FFC:  ADDWFC x6A,F
04FFE:  MOVLW  00
05000:  ADDWFC x6B,F
05002:  MOVLW  00
05004:  ADDWFC x6C,F
05006:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
05008:  CALL   360C
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
0500C:  MOVLW  EC
0500E:  MOVWF  FF6
05010:  MOVLW  0A
05012:  MOVWF  FF7
05014:  MOVLW  00
05016:  MOVWF  FF8
05018:  CALL   181E
0501C:  GOTO   51BA (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     // #define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
02122:  MOVLW  60
02124:  MOVWF  FF6
02126:  MOVLW  0B
02128:  MOVWF  FF7
0212A:  MOVLW  00
0212C:  MOVWF  FF8
0212E:  CALL   181E
.................... 
....................     output_high(MIS_FM_CS);
02132:  BCF    F92.5
02134:  BSF    F89.5
....................     output_high(SMF_CS);
02136:  BCF    F92.2
02138:  BSF    F89.2
....................     delay_ms(100); 
0213A:  MOVLW  64
0213C:  MOVLB  8
0213E:  MOVWF  x44
02140:  MOVLB  0
02142:  CALL   179E
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
02146:  MOVLW  9F
02148:  MOVLB  3
0214A:  MOVWF  xE3
....................     output_low(mis_fm.cs_pin);
0214C:  MOVFF  E0,84A
02150:  MOVLB  8
02152:  CLRF   x4B
02154:  MOVLW  0F
02156:  MOVWF  x4D
02158:  MOVLW  89
0215A:  MOVWF  x4C
0215C:  MOVLB  0
0215E:  CALL   1B48
02162:  MOVFF  E0,84A
02166:  MOVLB  8
02168:  CLRF   x4B
0216A:  MOVLW  0F
0216C:  MOVWF  x4D
0216E:  MOVLW  92
02170:  MOVWF  x4C
02172:  MOVLB  0
02174:  CALL   1B48
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02178:  MOVFF  E1,84D
0217C:  MOVFF  E0,84C
02180:  MOVFF  DF,84B
02184:  MOVFF  DE,84A
02188:  MOVLW  03
0218A:  MOVLB  8
0218C:  MOVWF  x4F
0218E:  MOVLW  E3
02190:  MOVWF  x4E
02192:  CLRF   x51
02194:  MOVLW  01
02196:  MOVWF  x50
02198:  MOVLW  03
0219A:  MOVWF  x53
0219C:  MOVLW  CF
0219E:  MOVWF  x52
021A0:  CLRF   x57
021A2:  CLRF   x56
021A4:  CLRF   x55
021A6:  MOVLW  14
021A8:  MOVWF  x54
021AA:  MOVLB  0
021AC:  CALL   1C18
....................     output_high(mis_fm.cs_pin);
021B0:  MOVFF  E0,84A
021B4:  MOVLW  01
021B6:  MOVLB  8
021B8:  MOVWF  x4B
021BA:  MOVLW  0F
021BC:  MOVWF  x4D
021BE:  MOVLW  89
021C0:  MOVWF  x4C
021C2:  MOVLB  0
021C4:  CALL   1B48
021C8:  MOVFF  E0,84A
021CC:  MOVLB  8
021CE:  CLRF   x4B
021D0:  MOVLW  0F
021D2:  MOVWF  x4D
021D4:  MOVLW  92
021D6:  MOVWF  x4C
021D8:  MOVLB  0
021DA:  CALL   1B48
....................     fprintf(PC, "\t[MIS FM] Flash ID: ");
021DE:  MOVLW  7C
021E0:  MOVWF  FF6
021E2:  MOVLW  0B
021E4:  MOVWF  FF7
021E6:  MOVLW  00
021E8:  MOVWF  FF8
021EA:  CALL   181E
....................     for (unsigned int8 index = 0; index < READ_ID_DATASIZE; index++)
021EE:  MOVLB  3
021F0:  CLRF   xE4
021F2:  MOVLB  0
021F4:  MOVLB  3
021F6:  MOVF   xE4,W
021F8:  SUBLW  13
021FA:  BTFSC  FD8.0
021FC:  BRA    2204
021FE:  MOVLB  0
02200:  GOTO   2240
02204:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02206:  CLRF   03
02208:  MOVLB  3
0220A:  MOVF   xE4,W
0220C:  ADDLW  CF
0220E:  MOVWF  FE9
02210:  MOVLW  03
02212:  ADDWFC 03,W
02214:  MOVWF  FEA
02216:  MOVFF  FEF,426
0221A:  MOVFF  426,427
0221E:  MOVLW  37
02220:  MOVLB  4
02222:  MOVWF  x28
02224:  MOVLB  0
02226:  CALL   1A10
0222A:  MOVLW  20
0222C:  MOVLB  8
0222E:  MOVWF  x2F
02230:  MOVLB  0
02232:  CALL   17CC
02236:  MOVLB  3
02238:  INCF   xE4,F
0223A:  MOVLB  0
0223C:  GOTO   21F4
....................     }
....................     fprintf(PC,"\r\n");
02240:  MOVLW  0D
02242:  MOVLB  8
02244:  MOVWF  x2F
02246:  MOVLB  0
02248:  CALL   17CC
0224C:  MOVLW  0A
0224E:  MOVLB  8
02250:  MOVWF  x2F
02252:  MOVLB  0
02254:  CALL   17CC
.................... 
....................     output_low(smf.cs_pin);
02258:  MOVFF  E4,84A
0225C:  MOVLB  8
0225E:  CLRF   x4B
02260:  MOVLW  0F
02262:  MOVWF  x4D
02264:  MOVLW  89
02266:  MOVWF  x4C
02268:  MOVLB  0
0226A:  CALL   1B48
0226E:  MOVFF  E4,84A
02272:  MOVLB  8
02274:  CLRF   x4B
02276:  MOVLW  0F
02278:  MOVWF  x4D
0227A:  MOVLW  92
0227C:  MOVWF  x4C
0227E:  MOVLB  0
02280:  CALL   1B48
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02284:  MOVFF  E5,84D
02288:  MOVFF  E4,84C
0228C:  MOVFF  E3,84B
02290:  MOVFF  E2,84A
02294:  MOVLW  03
02296:  MOVLB  8
02298:  MOVWF  x4F
0229A:  MOVLW  E3
0229C:  MOVWF  x4E
0229E:  CLRF   x51
022A0:  MOVLW  01
022A2:  MOVWF  x50
022A4:  MOVLW  03
022A6:  MOVWF  x53
022A8:  MOVLW  CF
022AA:  MOVWF  x52
022AC:  CLRF   x57
022AE:  CLRF   x56
022B0:  CLRF   x55
022B2:  MOVLW  14
022B4:  MOVWF  x54
022B6:  MOVLB  0
022B8:  CALL   1C18
....................     output_high(smf.cs_pin);
022BC:  MOVFF  E4,84A
022C0:  MOVLW  01
022C2:  MOVLB  8
022C4:  MOVWF  x4B
022C6:  MOVLW  0F
022C8:  MOVWF  x4D
022CA:  MOVLW  89
022CC:  MOVWF  x4C
022CE:  MOVLB  0
022D0:  CALL   1B48
022D4:  MOVFF  E4,84A
022D8:  MOVLB  8
022DA:  CLRF   x4B
022DC:  MOVLW  0F
022DE:  MOVWF  x4D
022E0:  MOVLW  92
022E2:  MOVWF  x4C
022E4:  MOVLB  0
022E6:  CALL   1B48
....................     fprintf(PC, "\t[SMF] Flash ID: ");
022EA:  MOVLW  92
022EC:  MOVWF  FF6
022EE:  MOVLW  0B
022F0:  MOVWF  FF7
022F2:  MOVLW  00
022F4:  MOVWF  FF8
022F6:  CALL   181E
....................     for (unsigned int8 index = 0; index < READ_ID_DATASIZE; index++)
022FA:  MOVLB  3
022FC:  CLRF   xE5
022FE:  MOVLB  0
02300:  MOVLB  3
02302:  MOVF   xE5,W
02304:  SUBLW  13
02306:  BTFSC  FD8.0
02308:  BRA    2310
0230A:  MOVLB  0
0230C:  GOTO   234C
02310:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02312:  CLRF   03
02314:  MOVLB  3
02316:  MOVF   xE5,W
02318:  ADDLW  CF
0231A:  MOVWF  FE9
0231C:  MOVLW  03
0231E:  ADDWFC 03,W
02320:  MOVWF  FEA
02322:  MOVFF  FEF,426
02326:  MOVFF  426,427
0232A:  MOVLW  37
0232C:  MOVLB  4
0232E:  MOVWF  x28
02330:  MOVLB  0
02332:  CALL   1A10
02336:  MOVLW  20
02338:  MOVLB  8
0233A:  MOVWF  x2F
0233C:  MOVLB  0
0233E:  CALL   17CC
02342:  MOVLB  3
02344:  INCF   xE5,F
02346:  MOVLB  0
02348:  GOTO   2300
....................     }
....................     fprintf(PC,"\r\n");
0234C:  MOVLW  0D
0234E:  MOVLB  8
02350:  MOVWF  x2F
02352:  MOVLB  0
02354:  CALL   17CC
02358:  MOVLW  0A
0235A:  MOVLB  8
0235C:  MOVWF  x2F
0235E:  MOVLB  0
02360:  CALL   17CC
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
....................     if (!is_connect(smf)) {
02364:  MOVFF  E5,82F
02368:  MOVFF  E4,82E
0236C:  MOVFF  E3,82D
02370:  MOVFF  E2,82C
02374:  CALL   1E4C
02378:  MOVF   01,F
0237A:  BTFSS  FD8.2
0237C:  GOTO   2394
....................         fprintf(PC, "\t[SMF] connect error!\r\n");
02380:  MOVLW  A4
02382:  MOVWF  FF6
02384:  MOVLW  0B
02386:  MOVWF  FF7
02388:  MOVLW  00
0238A:  MOVWF  FF8
0238C:  CALL   181E
....................         // return;
....................     }else {
02390:  GOTO   23A4
....................         fprintf(PC, "\t[SMF] is connected\r\n");
02394:  MOVLW  BC
02396:  MOVWF  FF6
02398:  MOVLW  0B
0239A:  MOVWF  FF7
0239C:  MOVLW  00
0239E:  MOVWF  FF8
023A0:  CALL   181E
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
023A4:  MOVLW  64
023A6:  MOVLB  8
023A8:  MOVWF  x44
023AA:  MOVLB  0
023AC:  CALL   179E
....................     if (!is_connect(mis_fm)) {
023B0:  MOVFF  E1,82F
023B4:  MOVFF  E0,82E
023B8:  MOVFF  DF,82D
023BC:  MOVFF  DE,82C
023C0:  CALL   1E4C
023C4:  MOVF   01,F
023C6:  BTFSS  FD8.2
023C8:  GOTO   23E0
....................         fprintf(PC, "\t[MIS FM] connect error!\r\n");
023CC:  MOVLW  D2
023CE:  MOVWF  FF6
023D0:  MOVLW  0B
023D2:  MOVWF  FF7
023D4:  MOVLW  00
023D6:  MOVWF  FF8
023D8:  CALL   181E
....................     }else {
023DC:  GOTO   23F0
....................         fprintf(PC, "\t[MIS FM] is connected\r\n");
023E0:  MOVLW  EE
023E2:  MOVWF  FF6
023E4:  MOVLW  0B
023E6:  MOVWF  FF7
023E8:  MOVLW  00
023EA:  MOVWF  FF8
023EC:  CALL   181E
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
023F0:  MOVFF  E1,429
023F4:  MOVFF  E0,428
023F8:  MOVFF  DF,427
023FC:  MOVFF  DE,426
02400:  MOVLB  4
02402:  CLRF   x2D
02404:  CLRF   x2C
02406:  CLRF   x2B
02408:  CLRF   x2A
0240A:  MOVLW  03
0240C:  MOVWF  x2F
0240E:  MOVLW  E6
02410:  MOVWF  x2E
02412:  CLRF   x33
02414:  CLRF   x32
02416:  CLRF   x31
02418:  MOVLW  40
0241A:  MOVWF  x30
0241C:  MOVLB  0
0241E:  CALL   1F0A
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
02422:  MOVLB  4
02424:  CLRF   x29
02426:  CLRF   x28
02428:  CLRF   x27
0242A:  MOVFF  3E6,426
0242E:  MOVFF  426,429
02432:  CLRF   x26
02434:  CLRF   x27
02436:  CLRF   x28
02438:  CLRF   x2E
0243A:  CLRF   x2D
0243C:  CLRF   x2C
0243E:  MOVFF  3E7,42B
02442:  MOVFF  42C,03
02446:  MOVFF  42B,02
0244A:  CLRF   00
0244C:  CLRF   01
0244E:  MOVF   00,W
02450:  IORWF  x26,F
02452:  MOVF   01,W
02454:  IORWF  x27,F
02456:  MOVF   02,W
02458:  IORWF  x28,F
0245A:  MOVF   03,W
0245C:  IORWF  x29,F
0245E:  CLRF   x2E
02460:  CLRF   x2D
02462:  CLRF   x2C
02464:  MOVFF  3E8,42B
02468:  MOVFF  42D,03
0246C:  MOVFF  42C,02
02470:  MOVFF  42B,01
02474:  CLRF   00
02476:  MOVF   00,W
02478:  IORWF  x26,F
0247A:  MOVF   01,W
0247C:  IORWF  x27,F
0247E:  MOVF   02,W
02480:  IORWF  x28,F
02482:  MOVF   03,W
02484:  IORWF  x29,F
02486:  MOVFF  3E9,00
0248A:  CLRF   01
0248C:  CLRF   02
0248E:  CLRF   03
02490:  MOVF   00,W
02492:  IORWF  x26,W
02494:  MOVLB  3
02496:  MOVWF  x50
02498:  MOVF   01,W
0249A:  MOVLB  4
0249C:  IORWF  x27,W
0249E:  MOVLB  3
024A0:  MOVWF  x51
024A2:  MOVF   02,W
024A4:  MOVLB  4
024A6:  IORWF  x28,W
024A8:  MOVLB  3
024AA:  MOVWF  x52
024AC:  MOVF   03,W
024AE:  MOVLB  4
024B0:  IORWF  x29,W
024B2:  MOVLB  3
024B4:  MOVWF  x53
....................     smf_piclog_loop_counter = readdata[4];
024B6:  MOVFF  3EA,354
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
024BA:  MOVLB  4
024BC:  CLRF   x29
024BE:  CLRF   x28
024C0:  CLRF   x27
024C2:  MOVFF  3EB,426
024C6:  MOVFF  426,429
024CA:  CLRF   x26
024CC:  CLRF   x27
024CE:  CLRF   x28
024D0:  CLRF   x2E
024D2:  CLRF   x2D
024D4:  CLRF   x2C
024D6:  MOVFF  3EC,42B
024DA:  MOVFF  42C,03
024DE:  MOVFF  42B,02
024E2:  CLRF   00
024E4:  CLRF   01
024E6:  MOVF   00,W
024E8:  IORWF  x26,F
024EA:  MOVF   01,W
024EC:  IORWF  x27,F
024EE:  MOVF   02,W
024F0:  IORWF  x28,F
024F2:  MOVF   03,W
024F4:  IORWF  x29,F
024F6:  CLRF   x2E
024F8:  CLRF   x2D
024FA:  CLRF   x2C
024FC:  MOVFF  3ED,42B
02500:  MOVFF  42D,03
02504:  MOVFF  42C,02
02508:  MOVFF  42B,01
0250C:  CLRF   00
0250E:  MOVF   00,W
02510:  IORWF  x26,F
02512:  MOVF   01,W
02514:  IORWF  x27,F
02516:  MOVF   02,W
02518:  IORWF  x28,F
0251A:  MOVF   03,W
0251C:  IORWF  x29,F
0251E:  MOVFF  3EE,00
02522:  CLRF   01
02524:  CLRF   02
02526:  CLRF   03
02528:  MOVF   00,W
0252A:  IORWF  x26,W
0252C:  MOVLB  3
0252E:  MOVWF  x55
02530:  MOVF   01,W
02532:  MOVLB  4
02534:  IORWF  x27,W
02536:  MOVLB  3
02538:  MOVWF  x56
0253A:  MOVF   02,W
0253C:  MOVLB  4
0253E:  IORWF  x28,W
02540:  MOVLB  3
02542:  MOVWF  x57
02544:  MOVF   03,W
02546:  MOVLB  4
02548:  IORWF  x29,W
0254A:  MOVLB  3
0254C:  MOVWF  x58
....................     smf_meas_loop_counter = readdata[9];
0254E:  MOVFF  3EF,359
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
02552:  MOVLB  4
02554:  CLRF   x29
02556:  CLRF   x28
02558:  CLRF   x27
0255A:  MOVFF  3F0,426
0255E:  MOVFF  426,429
02562:  CLRF   x26
02564:  CLRF   x27
02566:  CLRF   x28
02568:  CLRF   x2E
0256A:  CLRF   x2D
0256C:  CLRF   x2C
0256E:  MOVFF  3F1,42B
02572:  MOVFF  42C,03
02576:  MOVFF  42B,02
0257A:  CLRF   00
0257C:  CLRF   01
0257E:  MOVF   00,W
02580:  IORWF  x26,F
02582:  MOVF   01,W
02584:  IORWF  x27,F
02586:  MOVF   02,W
02588:  IORWF  x28,F
0258A:  MOVF   03,W
0258C:  IORWF  x29,F
0258E:  CLRF   x2E
02590:  CLRF   x2D
02592:  CLRF   x2C
02594:  MOVFF  3F2,42B
02598:  MOVFF  42D,03
0259C:  MOVFF  42C,02
025A0:  MOVFF  42B,01
025A4:  CLRF   00
025A6:  MOVF   00,W
025A8:  IORWF  x26,F
025AA:  MOVF   01,W
025AC:  IORWF  x27,F
025AE:  MOVF   02,W
025B0:  IORWF  x28,F
025B2:  MOVF   03,W
025B4:  IORWF  x29,F
025B6:  MOVFF  3F3,00
025BA:  CLRF   01
025BC:  CLRF   02
025BE:  CLRF   03
025C0:  MOVF   00,W
025C2:  IORWF  x26,W
025C4:  MOVLB  3
025C6:  MOVWF  x5A
025C8:  MOVF   01,W
025CA:  MOVLB  4
025CC:  IORWF  x27,W
025CE:  MOVLB  3
025D0:  MOVWF  x5B
025D2:  MOVF   02,W
025D4:  MOVLB  4
025D6:  IORWF  x28,W
025D8:  MOVLB  3
025DA:  MOVWF  x5C
025DC:  MOVF   03,W
025DE:  MOVLB  4
025E0:  IORWF  x29,W
025E2:  MOVLB  3
025E4:  MOVWF  x5D
....................     misf_piclog_loop_counter = readdata[14];
025E6:  MOVFF  3F4,35E
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
025EA:  MOVLB  4
025EC:  CLRF   x29
025EE:  CLRF   x28
025F0:  CLRF   x27
025F2:  MOVFF  3F5,426
025F6:  MOVFF  426,429
025FA:  CLRF   x26
025FC:  CLRF   x27
025FE:  CLRF   x28
02600:  CLRF   x2E
02602:  CLRF   x2D
02604:  CLRF   x2C
02606:  MOVFF  3F6,42B
0260A:  MOVFF  42C,03
0260E:  MOVFF  42B,02
02612:  CLRF   00
02614:  CLRF   01
02616:  MOVF   00,W
02618:  IORWF  x26,F
0261A:  MOVF   01,W
0261C:  IORWF  x27,F
0261E:  MOVF   02,W
02620:  IORWF  x28,F
02622:  MOVF   03,W
02624:  IORWF  x29,F
02626:  CLRF   x2E
02628:  CLRF   x2D
0262A:  CLRF   x2C
0262C:  MOVFF  3F7,42B
02630:  MOVFF  42D,03
02634:  MOVFF  42C,02
02638:  MOVFF  42B,01
0263C:  CLRF   00
0263E:  MOVF   00,W
02640:  IORWF  x26,F
02642:  MOVF   01,W
02644:  IORWF  x27,F
02646:  MOVF   02,W
02648:  IORWF  x28,F
0264A:  MOVF   03,W
0264C:  IORWF  x29,F
0264E:  MOVFF  3F8,00
02652:  CLRF   01
02654:  CLRF   02
02656:  CLRF   03
02658:  MOVF   00,W
0265A:  IORWF  x26,W
0265C:  MOVLB  3
0265E:  MOVWF  x5F
02660:  MOVF   01,W
02662:  MOVLB  4
02664:  IORWF  x27,W
02666:  MOVLB  3
02668:  MOVWF  x60
0266A:  MOVF   02,W
0266C:  MOVLB  4
0266E:  IORWF  x28,W
02670:  MOVLB  3
02672:  MOVWF  x61
02674:  MOVF   03,W
02676:  MOVLB  4
02678:  IORWF  x29,W
0267A:  MOVLB  3
0267C:  MOVWF  x62
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
0267E:  MOVLB  4
02680:  CLRF   x29
02682:  CLRF   x28
02684:  CLRF   x27
02686:  MOVFF  3F9,426
0268A:  MOVFF  426,429
0268E:  CLRF   x26
02690:  CLRF   x27
02692:  CLRF   x28
02694:  CLRF   x2E
02696:  CLRF   x2D
02698:  CLRF   x2C
0269A:  MOVFF  3FA,42B
0269E:  MOVFF  42C,03
026A2:  MOVFF  42B,02
026A6:  CLRF   00
026A8:  CLRF   01
026AA:  MOVF   00,W
026AC:  IORWF  x26,F
026AE:  MOVF   01,W
026B0:  IORWF  x27,F
026B2:  MOVF   02,W
026B4:  IORWF  x28,F
026B6:  MOVF   03,W
026B8:  IORWF  x29,F
026BA:  CLRF   x2E
026BC:  CLRF   x2D
026BE:  CLRF   x2C
026C0:  MOVFF  3FB,42B
026C4:  MOVFF  42D,03
026C8:  MOVFF  42C,02
026CC:  MOVFF  42B,01
026D0:  CLRF   00
026D2:  MOVF   00,W
026D4:  IORWF  x26,F
026D6:  MOVF   01,W
026D8:  IORWF  x27,F
026DA:  MOVF   02,W
026DC:  IORWF  x28,F
026DE:  MOVF   03,W
026E0:  IORWF  x29,F
026E2:  MOVFF  3FC,00
026E6:  CLRF   01
026E8:  CLRF   02
026EA:  CLRF   03
026EC:  MOVF   00,W
026EE:  IORWF  x26,W
026F0:  MOVLB  3
026F2:  MOVWF  x63
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
026F4:  MOVLB  4
026F6:  CLRF   x29
026F8:  CLRF   x28
026FA:  CLRF   x27
026FC:  MOVFF  3FD,426
02700:  MOVFF  426,429
02704:  CLRF   x26
02706:  CLRF   x27
02708:  CLRF   x28
0270A:  CLRF   x2E
0270C:  CLRF   x2D
0270E:  CLRF   x2C
02710:  MOVFF  3FE,42B
02714:  MOVFF  42C,03
02718:  MOVFF  42B,02
0271C:  CLRF   00
0271E:  CLRF   01
02720:  MOVF   00,W
02722:  IORWF  x26,F
02724:  MOVF   01,W
02726:  IORWF  x27,F
02728:  MOVF   02,W
0272A:  IORWF  x28,F
0272C:  MOVF   03,W
0272E:  IORWF  x29,F
02730:  CLRF   x2E
02732:  CLRF   x2D
02734:  CLRF   x2C
02736:  MOVFF  3FF,42B
0273A:  MOVFF  42D,03
0273E:  MOVFF  42C,02
02742:  MOVFF  42B,01
02746:  CLRF   00
02748:  MOVF   00,W
0274A:  IORWF  x26,F
0274C:  MOVF   01,W
0274E:  IORWF  x27,F
02750:  MOVF   02,W
02752:  IORWF  x28,F
02754:  MOVF   03,W
02756:  IORWF  x29,F
02758:  MOVFF  400,00
0275C:  CLRF   01
0275E:  CLRF   02
02760:  CLRF   03
02762:  MOVF   00,W
02764:  IORWF  x26,W
02766:  MOVLB  3
02768:  MOVWF  x64
0276A:  MOVF   01,W
0276C:  MOVLB  4
0276E:  IORWF  x27,W
02770:  MOVLB  3
02772:  MOVWF  x65
02774:  MOVF   02,W
02776:  MOVLB  4
02778:  IORWF  x28,W
0277A:  MOVLB  3
0277C:  MOVWF  x66
0277E:  MOVF   03,W
02780:  MOVLB  4
02782:  IORWF  x29,W
02784:  MOVLB  3
02786:  MOVWF  x67
....................     misf_meas_loop_counter = readdata[27];
02788:  MOVFF  401,368
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
0278C:  MOVLB  4
0278E:  CLRF   x29
02790:  CLRF   x28
02792:  CLRF   x27
02794:  MOVFF  402,426
02798:  MOVFF  426,429
0279C:  CLRF   x26
0279E:  CLRF   x27
027A0:  CLRF   x28
027A2:  CLRF   x2E
027A4:  CLRF   x2D
027A6:  CLRF   x2C
027A8:  MOVFF  403,42B
027AC:  MOVFF  42C,03
027B0:  MOVFF  42B,02
027B4:  CLRF   00
027B6:  CLRF   01
027B8:  MOVF   00,W
027BA:  IORWF  x26,F
027BC:  MOVF   01,W
027BE:  IORWF  x27,F
027C0:  MOVF   02,W
027C2:  IORWF  x28,F
027C4:  MOVF   03,W
027C6:  IORWF  x29,F
027C8:  CLRF   x2E
027CA:  CLRF   x2D
027CC:  CLRF   x2C
027CE:  MOVFF  404,42B
027D2:  MOVFF  42D,03
027D6:  MOVFF  42C,02
027DA:  MOVFF  42B,01
027DE:  CLRF   00
027E0:  MOVF   00,W
027E2:  IORWF  x26,F
027E4:  MOVF   01,W
027E6:  IORWF  x27,F
027E8:  MOVF   02,W
027EA:  IORWF  x28,F
027EC:  MOVF   03,W
027EE:  IORWF  x29,F
027F0:  MOVFF  405,00
027F4:  CLRF   01
027F6:  CLRF   02
027F8:  CLRF   03
027FA:  MOVF   00,W
027FC:  IORWF  x26,W
027FE:  MOVLB  3
02800:  MOVWF  x69
02802:  MOVF   01,W
02804:  MOVLB  4
02806:  IORWF  x27,W
02808:  MOVLB  3
0280A:  MOVWF  x6A
0280C:  MOVF   02,W
0280E:  MOVLB  4
02810:  IORWF  x28,W
02812:  MOVLB  3
02814:  MOVWF  x6B
02816:  MOVF   03,W
02818:  MOVLB  4
0281A:  IORWF  x29,W
0281C:  MOVLB  3
0281E:  MOVWF  x6C
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02820:  MOVLW  08
02822:  MOVWF  FF6
02824:  MOVLW  0C
02826:  MOVWF  FF7
02828:  MOVLW  00
0282A:  MOVWF  FF8
0282C:  MOVLW  28
0282E:  MOVLB  7
02830:  MOVWF  xEC
02832:  MOVLB  0
02834:  CALL   184E
02838:  MOVFF  353,427
0283C:  MOVLW  37
0283E:  MOVLB  4
02840:  MOVWF  x28
02842:  MOVLB  0
02844:  CALL   1A10
02848:  MOVFF  352,427
0284C:  MOVLW  37
0284E:  MOVLB  4
02850:  MOVWF  x28
02852:  MOVLB  0
02854:  CALL   1A10
02858:  MOVFF  351,427
0285C:  MOVLW  37
0285E:  MOVLB  4
02860:  MOVWF  x28
02862:  MOVLB  0
02864:  CALL   1A10
02868:  MOVFF  350,427
0286C:  MOVLW  37
0286E:  MOVLB  4
02870:  MOVWF  x28
02872:  MOVLB  0
02874:  CALL   1A10
02878:  MOVLW  0D
0287A:  MOVLB  8
0287C:  MOVWF  x2F
0287E:  MOVLB  0
02880:  CALL   17CC
02884:  MOVLW  0A
02886:  MOVLB  8
02888:  MOVWF  x2F
0288A:  MOVLB  0
0288C:  CALL   17CC
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02890:  MOVLW  38
02892:  MOVWF  FF6
02894:  MOVLW  0C
02896:  MOVWF  FF7
02898:  MOVLW  00
0289A:  MOVWF  FF8
0289C:  MOVLW  28
0289E:  MOVLB  7
028A0:  MOVWF  xEC
028A2:  MOVLB  0
028A4:  CALL   184E
028A8:  MOVFF  354,427
028AC:  MOVLW  37
028AE:  MOVLB  4
028B0:  MOVWF  x28
028B2:  MOVLB  0
028B4:  CALL   1A10
028B8:  MOVLW  0D
028BA:  MOVLB  8
028BC:  MOVWF  x2F
028BE:  MOVLB  0
028C0:  CALL   17CC
028C4:  MOVLW  0A
028C6:  MOVLB  8
028C8:  MOVWF  x2F
028CA:  MOVLB  0
028CC:  CALL   17CC
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
028D0:  MOVLW  68
028D2:  MOVWF  FF6
028D4:  MOVLW  0C
028D6:  MOVWF  FF7
028D8:  MOVLW  00
028DA:  MOVWF  FF8
028DC:  MOVLW  28
028DE:  MOVLB  7
028E0:  MOVWF  xEC
028E2:  MOVLB  0
028E4:  CALL   184E
028E8:  MOVFF  358,427
028EC:  MOVLW  37
028EE:  MOVLB  4
028F0:  MOVWF  x28
028F2:  MOVLB  0
028F4:  CALL   1A10
028F8:  MOVFF  357,427
028FC:  MOVLW  37
028FE:  MOVLB  4
02900:  MOVWF  x28
02902:  MOVLB  0
02904:  CALL   1A10
02908:  MOVFF  356,427
0290C:  MOVLW  37
0290E:  MOVLB  4
02910:  MOVWF  x28
02912:  MOVLB  0
02914:  CALL   1A10
02918:  MOVFF  355,427
0291C:  MOVLW  37
0291E:  MOVLB  4
02920:  MOVWF  x28
02922:  MOVLB  0
02924:  CALL   1A10
02928:  MOVLW  0D
0292A:  MOVLB  8
0292C:  MOVWF  x2F
0292E:  MOVLB  0
02930:  CALL   17CC
02934:  MOVLW  0A
02936:  MOVLB  8
02938:  MOVWF  x2F
0293A:  MOVLB  0
0293C:  CALL   17CC
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02940:  MOVLW  98
02942:  MOVWF  FF6
02944:  MOVLW  0C
02946:  MOVWF  FF7
02948:  MOVLW  00
0294A:  MOVWF  FF8
0294C:  MOVLW  28
0294E:  MOVLB  7
02950:  MOVWF  xEC
02952:  MOVLB  0
02954:  CALL   184E
02958:  MOVFF  359,427
0295C:  MOVLW  37
0295E:  MOVLB  4
02960:  MOVWF  x28
02962:  MOVLB  0
02964:  CALL   1A10
02968:  MOVLW  0D
0296A:  MOVLB  8
0296C:  MOVWF  x2F
0296E:  MOVLB  0
02970:  CALL   17CC
02974:  MOVLW  0A
02976:  MOVLB  8
02978:  MOVWF  x2F
0297A:  MOVLB  0
0297C:  CALL   17CC
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02980:  MOVLW  C8
02982:  MOVWF  FF6
02984:  MOVLW  0C
02986:  MOVWF  FF7
02988:  MOVLW  00
0298A:  MOVWF  FF8
0298C:  MOVLW  28
0298E:  MOVLB  7
02990:  MOVWF  xEC
02992:  MOVLB  0
02994:  CALL   184E
02998:  MOVFF  35D,427
0299C:  MOVLW  37
0299E:  MOVLB  4
029A0:  MOVWF  x28
029A2:  MOVLB  0
029A4:  CALL   1A10
029A8:  MOVFF  35C,427
029AC:  MOVLW  37
029AE:  MOVLB  4
029B0:  MOVWF  x28
029B2:  MOVLB  0
029B4:  CALL   1A10
029B8:  MOVFF  35B,427
029BC:  MOVLW  37
029BE:  MOVLB  4
029C0:  MOVWF  x28
029C2:  MOVLB  0
029C4:  CALL   1A10
029C8:  MOVFF  35A,427
029CC:  MOVLW  37
029CE:  MOVLB  4
029D0:  MOVWF  x28
029D2:  MOVLB  0
029D4:  CALL   1A10
029D8:  MOVLW  0D
029DA:  MOVLB  8
029DC:  MOVWF  x2F
029DE:  MOVLB  0
029E0:  CALL   17CC
029E4:  MOVLW  0A
029E6:  MOVLB  8
029E8:  MOVWF  x2F
029EA:  MOVLB  0
029EC:  CALL   17CC
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
029F0:  MOVLW  F8
029F2:  MOVWF  FF6
029F4:  MOVLW  0C
029F6:  MOVWF  FF7
029F8:  MOVLW  00
029FA:  MOVWF  FF8
029FC:  MOVLW  28
029FE:  MOVLB  7
02A00:  MOVWF  xEC
02A02:  MOVLB  0
02A04:  CALL   184E
02A08:  MOVFF  362,427
02A0C:  MOVLW  37
02A0E:  MOVLB  4
02A10:  MOVWF  x28
02A12:  MOVLB  0
02A14:  CALL   1A10
02A18:  MOVFF  361,427
02A1C:  MOVLW  37
02A1E:  MOVLB  4
02A20:  MOVWF  x28
02A22:  MOVLB  0
02A24:  CALL   1A10
02A28:  MOVFF  360,427
02A2C:  MOVLW  37
02A2E:  MOVLB  4
02A30:  MOVWF  x28
02A32:  MOVLB  0
02A34:  CALL   1A10
02A38:  MOVFF  35F,427
02A3C:  MOVLW  37
02A3E:  MOVLB  4
02A40:  MOVWF  x28
02A42:  MOVLB  0
02A44:  CALL   1A10
02A48:  MOVLW  0D
02A4A:  MOVLB  8
02A4C:  MOVWF  x2F
02A4E:  MOVLB  0
02A50:  CALL   17CC
02A54:  MOVLW  0A
02A56:  MOVLB  8
02A58:  MOVWF  x2F
02A5A:  MOVLB  0
02A5C:  CALL   17CC
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02A60:  MOVLW  28
02A62:  MOVWF  FF6
02A64:  MOVLW  0D
02A66:  MOVWF  FF7
02A68:  MOVLW  00
02A6A:  MOVWF  FF8
02A6C:  MOVLW  28
02A6E:  MOVLB  7
02A70:  MOVWF  xEC
02A72:  MOVLB  0
02A74:  CALL   184E
02A78:  MOVFF  35E,427
02A7C:  MOVLW  37
02A7E:  MOVLB  4
02A80:  MOVWF  x28
02A82:  MOVLB  0
02A84:  CALL   1A10
02A88:  MOVLW  0D
02A8A:  MOVLB  8
02A8C:  MOVWF  x2F
02A8E:  MOVLB  0
02A90:  CALL   17CC
02A94:  MOVLW  0A
02A96:  MOVLB  8
02A98:  MOVWF  x2F
02A9A:  MOVLB  0
02A9C:  CALL   17CC
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02AA0:  MOVLW  58
02AA2:  MOVWF  FF6
02AA4:  MOVLW  0D
02AA6:  MOVWF  FF7
02AA8:  MOVLW  00
02AAA:  MOVWF  FF8
02AAC:  MOVLW  28
02AAE:  MOVLB  7
02AB0:  MOVWF  xEC
02AB2:  MOVLB  0
02AB4:  CALL   184E
02AB8:  MOVFF  363,427
02ABC:  MOVLW  37
02ABE:  MOVLB  4
02AC0:  MOVWF  x28
02AC2:  MOVLB  0
02AC4:  CALL   1A10
02AC8:  MOVLW  0D
02ACA:  MOVLB  8
02ACC:  MOVWF  x2F
02ACE:  MOVLB  0
02AD0:  CALL   17CC
02AD4:  MOVLW  0A
02AD6:  MOVLB  8
02AD8:  MOVWF  x2F
02ADA:  MOVLB  0
02ADC:  CALL   17CC
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02AE0:  MOVLW  88
02AE2:  MOVWF  FF6
02AE4:  MOVLW  0D
02AE6:  MOVWF  FF7
02AE8:  MOVLW  00
02AEA:  MOVWF  FF8
02AEC:  MOVLW  28
02AEE:  MOVLB  7
02AF0:  MOVWF  xEC
02AF2:  MOVLB  0
02AF4:  CALL   184E
02AF8:  MOVFF  367,427
02AFC:  MOVLW  37
02AFE:  MOVLB  4
02B00:  MOVWF  x28
02B02:  MOVLB  0
02B04:  CALL   1A10
02B08:  MOVFF  366,427
02B0C:  MOVLW  37
02B0E:  MOVLB  4
02B10:  MOVWF  x28
02B12:  MOVLB  0
02B14:  CALL   1A10
02B18:  MOVFF  365,427
02B1C:  MOVLW  37
02B1E:  MOVLB  4
02B20:  MOVWF  x28
02B22:  MOVLB  0
02B24:  CALL   1A10
02B28:  MOVFF  364,427
02B2C:  MOVLW  37
02B2E:  MOVLB  4
02B30:  MOVWF  x28
02B32:  MOVLB  0
02B34:  CALL   1A10
02B38:  MOVLW  0D
02B3A:  MOVLB  8
02B3C:  MOVWF  x2F
02B3E:  MOVLB  0
02B40:  CALL   17CC
02B44:  MOVLW  0A
02B46:  MOVLB  8
02B48:  MOVWF  x2F
02B4A:  MOVLB  0
02B4C:  CALL   17CC
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02B50:  MOVLW  B8
02B52:  MOVWF  FF6
02B54:  MOVLW  0D
02B56:  MOVWF  FF7
02B58:  MOVLW  00
02B5A:  MOVWF  FF8
02B5C:  MOVLW  28
02B5E:  MOVLB  7
02B60:  MOVWF  xEC
02B62:  MOVLB  0
02B64:  CALL   184E
02B68:  MOVFF  36C,427
02B6C:  MOVLW  37
02B6E:  MOVLB  4
02B70:  MOVWF  x28
02B72:  MOVLB  0
02B74:  CALL   1A10
02B78:  MOVFF  36B,427
02B7C:  MOVLW  37
02B7E:  MOVLB  4
02B80:  MOVWF  x28
02B82:  MOVLB  0
02B84:  CALL   1A10
02B88:  MOVFF  36A,427
02B8C:  MOVLW  37
02B8E:  MOVLB  4
02B90:  MOVWF  x28
02B92:  MOVLB  0
02B94:  CALL   1A10
02B98:  MOVFF  369,427
02B9C:  MOVLW  37
02B9E:  MOVLB  4
02BA0:  MOVWF  x28
02BA2:  MOVLB  0
02BA4:  CALL   1A10
02BA8:  MOVLW  0D
02BAA:  MOVLB  8
02BAC:  MOVWF  x2F
02BAE:  MOVLB  0
02BB0:  CALL   17CC
02BB4:  MOVLW  0A
02BB6:  MOVLB  8
02BB8:  MOVWF  x2F
02BBA:  MOVLB  0
02BBC:  CALL   17CC
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
02BC0:  MOVLW  E8
02BC2:  MOVWF  FF6
02BC4:  MOVLW  0D
02BC6:  MOVWF  FF7
02BC8:  MOVLW  00
02BCA:  MOVWF  FF8
02BCC:  MOVLW  28
02BCE:  MOVLB  7
02BD0:  MOVWF  xEC
02BD2:  MOVLB  0
02BD4:  CALL   184E
02BD8:  MOVFF  368,427
02BDC:  MOVLW  37
02BDE:  MOVLB  4
02BE0:  MOVWF  x28
02BE2:  MOVLB  0
02BE4:  CALL   1A10
02BE8:  MOVLW  0D
02BEA:  MOVLB  8
02BEC:  MOVWF  x2F
02BEE:  MOVLB  0
02BF0:  CALL   17CC
02BF4:  MOVLW  0A
02BF6:  MOVLB  8
02BF8:  MOVWF  x2F
02BFA:  MOVLB  0
02BFC:  CALL   17CC
....................     fprintf(PC, "\tComplete\r\n");
02C00:  MOVLW  18
02C02:  MOVWF  FF6
02C04:  MOVLW  0E
02C06:  MOVWF  FF7
02C08:  MOVLW  00
02C0A:  MOVWF  FF8
02C0C:  CALL   181E
02C10:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
06D4C:  GOTO   6ED2 (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
0360C:  MOVFF  E1,82F
03610:  MOVFF  E0,82E
03614:  MOVFF  DF,82D
03618:  MOVFF  DE,82C
0361C:  CALL   1E4C
03620:  MOVF   01,F
03622:  BTFSS  FD8.2
03624:  GOTO   363C
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03628:  MOVLW  24
0362A:  MOVWF  FF6
0362C:  MOVLW  0E
0362E:  MOVWF  FF7
03630:  MOVLW  00
03632:  MOVWF  FF8
03634:  CALL   181E
....................         return;
03638:  GOTO   38F0
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
0363C:  MOVLB  7
0363E:  CLRF   xEC
03640:  CLRF   xED
03642:  CLRF   xEE
03644:  CLRF   xEF
03646:  CLRF   xF0
03648:  CLRF   xF1
0364A:  CLRF   xF2
0364C:  CLRF   xF3
0364E:  CLRF   xF4
03650:  CLRF   xF5
03652:  CLRF   xF6
03654:  CLRF   xF7
03656:  CLRF   xF8
03658:  CLRF   xF9
0365A:  CLRF   xFA
0365C:  CLRF   xFB
0365E:  CLRF   xFC
03660:  CLRF   xFD
03662:  CLRF   xFE
03664:  CLRF   xFF
03666:  MOVLB  8
03668:  CLRF   x00
0366A:  CLRF   x01
0366C:  CLRF   x02
0366E:  CLRF   x03
03670:  CLRF   x04
03672:  CLRF   x05
03674:  CLRF   x06
03676:  CLRF   x07
03678:  CLRF   x08
0367A:  CLRF   x09
0367C:  CLRF   x0A
0367E:  CLRF   x0B
03680:  CLRF   x0C
03682:  CLRF   x0D
03684:  CLRF   x0E
03686:  CLRF   x0F
03688:  CLRF   x10
0368A:  CLRF   x11
0368C:  CLRF   x12
0368E:  CLRF   x13
03690:  CLRF   x14
03692:  CLRF   x15
03694:  CLRF   x16
03696:  CLRF   x17
03698:  CLRF   x18
0369A:  CLRF   x19
0369C:  CLRF   x1A
0369E:  CLRF   x1B
036A0:  CLRF   x1C
036A2:  CLRF   x1D
036A4:  CLRF   x1E
036A6:  CLRF   x1F
036A8:  CLRF   x20
036AA:  CLRF   x21
036AC:  CLRF   x22
036AE:  CLRF   x23
036B0:  CLRF   x24
036B2:  CLRF   x25
036B4:  CLRF   x26
036B6:  CLRF   x27
036B8:  CLRF   x28
036BA:  CLRF   x29
036BC:  CLRF   x2A
036BE:  CLRF   x2B
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
036C0:  MOVFF  353,82D
036C4:  CLRF   x2E
036C6:  CLRF   x2F
036C8:  CLRF   x30
036CA:  MOVF   x2D,W
036CC:  MOVLB  7
036CE:  MOVWF  xEC
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
036D0:  MOVFF  352,82D
036D4:  MOVFF  353,82E
036D8:  MOVLB  8
036DA:  CLRF   x2F
036DC:  CLRF   x30
036DE:  MOVF   x2D,W
036E0:  MOVLB  7
036E2:  MOVWF  xED
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
036E4:  MOVFF  351,82D
036E8:  MOVFF  352,82E
036EC:  MOVFF  353,82F
036F0:  MOVLB  8
036F2:  CLRF   x30
036F4:  MOVF   x2D,W
036F6:  MOVLB  7
036F8:  MOVWF  xEE
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
036FA:  MOVLB  3
036FC:  MOVF   x50,W
036FE:  MOVLB  7
03700:  MOVWF  xEF
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
03702:  MOVFF  354,7F0
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
03706:  MOVFF  358,82D
0370A:  MOVLB  8
0370C:  CLRF   x2E
0370E:  CLRF   x2F
03710:  CLRF   x30
03712:  MOVF   x2D,W
03714:  MOVLB  7
03716:  MOVWF  xF1
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
03718:  MOVFF  357,82D
0371C:  MOVFF  358,82E
03720:  MOVLB  8
03722:  CLRF   x2F
03724:  CLRF   x30
03726:  MOVF   x2D,W
03728:  MOVLB  7
0372A:  MOVWF  xF2
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
0372C:  MOVFF  356,82D
03730:  MOVFF  357,82E
03734:  MOVFF  358,82F
03738:  MOVLB  8
0373A:  CLRF   x30
0373C:  MOVF   x2D,W
0373E:  MOVLB  7
03740:  MOVWF  xF3
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03742:  MOVLB  3
03744:  MOVF   x55,W
03746:  MOVLB  7
03748:  MOVWF  xF4
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
0374A:  MOVFF  359,7F5
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
0374E:  MOVFF  35D,82D
03752:  MOVLB  8
03754:  CLRF   x2E
03756:  CLRF   x2F
03758:  CLRF   x30
0375A:  MOVF   x2D,W
0375C:  MOVLB  7
0375E:  MOVWF  xF6
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03760:  MOVFF  35C,82D
03764:  MOVFF  35D,82E
03768:  MOVLB  8
0376A:  CLRF   x2F
0376C:  CLRF   x30
0376E:  MOVF   x2D,W
03770:  MOVLB  7
03772:  MOVWF  xF7
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03774:  MOVFF  35B,82D
03778:  MOVFF  35C,82E
0377C:  MOVFF  35D,82F
03780:  MOVLB  8
03782:  CLRF   x30
03784:  MOVF   x2D,W
03786:  MOVLB  7
03788:  MOVWF  xF8
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
0378A:  MOVLB  3
0378C:  MOVF   x5A,W
0378E:  MOVLB  7
03790:  MOVWF  xF9
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03792:  MOVFF  35E,7FA
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03796:  MOVFF  362,82D
0379A:  MOVLB  8
0379C:  CLRF   x2E
0379E:  CLRF   x2F
037A0:  CLRF   x30
037A2:  MOVF   x2D,W
037A4:  MOVLB  7
037A6:  MOVWF  xFB
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
037A8:  MOVFF  361,82D
037AC:  MOVFF  362,82E
037B0:  MOVLB  8
037B2:  CLRF   x2F
037B4:  CLRF   x30
037B6:  MOVF   x2D,W
037B8:  MOVLB  7
037BA:  MOVWF  xFC
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
037BC:  MOVFF  360,82D
037C0:  MOVFF  361,82E
037C4:  MOVFF  362,82F
037C8:  MOVLB  8
037CA:  CLRF   x30
037CC:  MOVF   x2D,W
037CE:  MOVLB  7
037D0:  MOVWF  xFD
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
037D2:  MOVLB  3
037D4:  MOVF   x5F,W
037D6:  MOVLB  7
037D8:  MOVWF  xFE
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
037DA:  MOVLW  00
037DC:  MOVWF  xFF
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
037DE:  MOVLW  00
037E0:  MOVLB  8
037E2:  MOVWF  x00
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
037E4:  MOVLW  00
037E6:  MOVWF  x01
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
037E8:  MOVLB  3
037EA:  MOVF   x63,W
037EC:  MOVLB  8
037EE:  MOVWF  x02
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
037F0:  MOVFF  367,82D
037F4:  CLRF   x2E
037F6:  CLRF   x2F
037F8:  CLRF   x30
037FA:  MOVF   x2D,W
037FC:  MOVWF  x03
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
037FE:  MOVFF  366,82D
03802:  MOVFF  367,82E
03806:  CLRF   x2F
03808:  CLRF   x30
0380A:  MOVF   x2D,W
0380C:  MOVWF  x04
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
0380E:  MOVFF  365,82D
03812:  MOVFF  366,82E
03816:  MOVFF  367,82F
0381A:  CLRF   x30
0381C:  MOVF   x2D,W
0381E:  MOVWF  x05
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03820:  MOVLB  3
03822:  MOVF   x64,W
03824:  MOVLB  8
03826:  MOVWF  x06
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03828:  MOVFF  368,807
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
0382C:  MOVFF  36C,82D
03830:  CLRF   x2E
03832:  CLRF   x2F
03834:  CLRF   x30
03836:  MOVF   x2D,W
03838:  MOVWF  x08
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
0383A:  MOVFF  36B,82D
0383E:  MOVFF  36C,82E
03842:  CLRF   x2F
03844:  CLRF   x30
03846:  MOVF   x2D,W
03848:  MOVWF  x09
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
0384A:  MOVFF  36A,82D
0384E:  MOVFF  36B,82E
03852:  MOVFF  36C,82F
03856:  CLRF   x30
03858:  MOVF   x2D,W
0385A:  MOVWF  x0A
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
0385C:  MOVLB  3
0385E:  MOVF   x69,W
03860:  MOVLB  8
03862:  MOVWF  x0B
.................... 
....................     if (!is_connect(mis_fm)) {
03864:  MOVFF  E1,82F
03868:  MOVFF  E0,82E
0386C:  MOVFF  DF,82D
03870:  MOVFF  DE,82C
03874:  MOVLB  0
03876:  CALL   1E4C
0387A:  MOVF   01,F
0387C:  BTFSS  FD8.2
0387E:  GOTO   3892
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03882:  MOVLW  46
03884:  MOVWF  FF6
03886:  MOVLW  0E
03888:  MOVWF  FF7
0388A:  MOVLW  00
0388C:  MOVWF  FF8
0388E:  CALL   181E
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03892:  MOVFF  E1,82F
03896:  MOVFF  E0,82E
0389A:  MOVFF  DF,82D
0389E:  MOVFF  DE,82C
038A2:  MOVLB  8
038A4:  CLRF   x33
038A6:  CLRF   x32
038A8:  CLRF   x31
038AA:  CLRF   x30
038AC:  MOVLB  0
038AE:  CALL   32B4
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
038B2:  MOVFF  E1,82F
038B6:  MOVFF  E0,82E
038BA:  MOVFF  DF,82D
038BE:  MOVFF  DE,82C
038C2:  MOVLB  8
038C4:  CLRF   x33
038C6:  CLRF   x32
038C8:  CLRF   x31
038CA:  CLRF   x30
038CC:  MOVLW  07
038CE:  MOVWF  x35
038D0:  MOVLW  EC
038D2:  MOVWF  x34
038D4:  CLRF   x37
038D6:  MOVLW  40
038D8:  MOVWF  x36
038DA:  MOVLB  0
038DC:  CALL   2F30
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
038E0:  MOVLW  68
038E2:  MOVWF  FF6
038E4:  MOVLW  0E
038E6:  MOVWF  FF7
038E8:  MOVLW  00
038EA:  MOVWF  FF8
038EC:  CALL   181E
038F0:  RETURN 0
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
038F2:  CALL   2C12
038F6:  MOVFF  03,49D
038FA:  MOVFF  02,49C
038FE:  MOVFF  01,49B
03902:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03906:  MOVFF  49D,4A3
0390A:  MOVLB  4
0390C:  CLRF   xA4
0390E:  CLRF   xA5
03910:  CLRF   xA6
03912:  MOVF   xA3,W
03914:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
03916:  MOVFF  49C,4A3
0391A:  MOVFF  49D,4A4
0391E:  CLRF   xA5
03920:  CLRF   xA6
03922:  MOVF   xA3,W
03924:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03926:  MOVFF  49B,4A3
0392A:  MOVFF  49C,4A4
0392E:  MOVFF  49D,4A5
03932:  CLRF   xA6
03934:  MOVF   xA3,W
03936:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
03938:  MOVF   x9A,W
0393A:  MOVWF  x97
....................     piclog[4] = function;            // Function code
0393C:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
03940:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03944:  MOVLB  3
03946:  MOVF   x5A,W
03948:  MOVLB  4
0394A:  MOVWF  x9E
0394C:  MOVLB  3
0394E:  MOVF   x5B,W
03950:  MOVLB  4
03952:  MOVWF  x9F
03954:  MOVLW  02
03956:  MOVLB  3
03958:  ADDWF  x5C,W
0395A:  MOVLB  4
0395C:  MOVWF  xA0
0395E:  MOVLW  00
03960:  MOVLB  3
03962:  ADDWFC x5D,W
03964:  MOVLB  4
03966:  MOVWF  xA1
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03968:  MOVFF  E1,82F
0396C:  MOVFF  E0,82E
03970:  MOVFF  DF,82D
03974:  MOVFF  DE,82C
03978:  MOVLB  0
0397A:  CALL   1E4C
0397E:  MOVF   01,F
03980:  BTFSS  FD8.2
03982:  GOTO   3996
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03986:  MOVLW  8C
03988:  MOVWF  FF6
0398A:  MOVLW  0E
0398C:  MOVWF  FF7
0398E:  MOVLW  00
03990:  MOVWF  FF8
03992:  CALL   181E
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03996:  MOVFF  E1,82F
0399A:  MOVFF  E0,82E
0399E:  MOVFF  DF,82D
039A2:  MOVFF  DE,82C
039A6:  MOVFF  4A1,833
039AA:  MOVFF  4A0,832
039AE:  MOVFF  49F,831
039B2:  MOVFF  49E,830
039B6:  MOVLW  04
039B8:  MOVLB  8
039BA:  MOVWF  x35
039BC:  MOVLW  94
039BE:  MOVWF  x34
039C0:  CLRF   x37
039C2:  MOVLW  06
039C4:  MOVWF  x36
039C6:  MOVLB  0
039C8:  CALL   2F30
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
039CC:  MOVLW  06
039CE:  MOVLB  3
039D0:  ADDWF  x5A,F
039D2:  MOVLW  00
039D4:  ADDWFC x5B,F
039D6:  MOVLW  00
039D8:  ADDWFC x5C,F
039DA:  MOVLW  00
039DC:  ADDWFC x5D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
039DE:  MOVLW  06
039E0:  ADDWF  x5F,F
039E2:  MOVLW  00
039E4:  ADDWFC x60,F
039E6:  MOVLW  00
039E8:  ADDWFC x61,F
039EA:  MOVLW  00
039EC:  ADDWFC x62,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
039EE:  MOVLW  06
039F0:  ADDWF  x63,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
039F2:  MOVLW  06
039F4:  ADDWF  x63,W
039F6:  SUBLW  3F
039F8:  BTFSS  FD8.0
039FA:  BRA    3A02
039FC:  MOVLB  0
039FE:  GOTO   3A64
03A02:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03A04:  MOVLB  3
03A06:  MOVF   x5A,W
03A08:  MOVLB  4
03A0A:  MOVWF  x9E
03A0C:  MOVLB  3
03A0E:  MOVF   x5B,W
03A10:  MOVLB  4
03A12:  MOVWF  x9F
03A14:  MOVLW  02
03A16:  MOVLB  3
03A18:  ADDWF  x5C,W
03A1A:  MOVLB  4
03A1C:  MOVWF  xA0
03A1E:  MOVLW  00
03A20:  MOVLB  3
03A22:  ADDWFC x5D,W
03A24:  MOVLB  4
03A26:  MOVWF  xA1
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03A28:  MOVFF  E1,82F
03A2C:  MOVFF  E0,82E
03A30:  MOVFF  DF,82D
03A34:  MOVFF  DE,82C
03A38:  MOVFF  4A1,833
03A3C:  MOVFF  4A0,832
03A40:  MOVFF  49F,831
03A44:  MOVFF  49E,830
03A48:  MOVLW  03
03A4A:  MOVLB  8
03A4C:  MOVWF  x35
03A4E:  MOVLW  6E
03A50:  MOVWF  x34
03A52:  CLRF   x37
03A54:  MOVLW  06
03A56:  MOVWF  x36
03A58:  MOVLB  0
03A5A:  CALL   2F30
....................         misf_piclog_write_counter = 0;
03A5E:  MOVLB  3
03A60:  CLRF   x63
03A62:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03A64:  CALL   360C
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03A68:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
06F04:  MOVLB  3
06F06:  MOVF   x88,W
06F08:  MOVWF  FE9
06F0A:  MOVF   x89,W
06F0C:  MOVWF  FEA
06F0E:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
06F12:  MOVLW  AE
06F14:  MOVWF  FF6
06F16:  MOVLW  0E
06F18:  MOVWF  FF7
06F1A:  MOVLW  00
06F1C:  MOVWF  FF8
06F1E:  MOVLB  0
06F20:  CALL   181E
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
06F24:  MOVLW  F4
06F26:  MOVWF  FF6
06F28:  MOVLW  0E
06F2A:  MOVWF  FF7
06F2C:  MOVLW  00
06F2E:  MOVWF  FF8
06F30:  MOVLW  0C
06F32:  MOVLB  7
06F34:  MOVWF  xEC
06F36:  MOVLB  0
06F38:  CALL   184E
06F3C:  MOVFF  38A,427
06F40:  MOVLW  37
06F42:  MOVLB  4
06F44:  MOVWF  x28
06F46:  MOVLB  0
06F48:  CALL   1A10
06F4C:  MOVLW  02
06F4E:  MOVWF  FF6
06F50:  MOVLW  0F
06F52:  MOVWF  FF7
06F54:  MOVLW  00
06F56:  MOVWF  FF8
06F58:  MOVLW  04
06F5A:  MOVLB  7
06F5C:  MOVWF  xEC
06F5E:  MOVLB  0
06F60:  CALL   184E
....................    switch(command_id)
06F64:  MOVLB  3
06F66:  MOVF   x8A,W
06F68:  XORLW  10
06F6A:  MOVLB  0
06F6C:  BTFSC  FD8.2
06F6E:  GOTO   6FF6
06F72:  XORLW  01
06F74:  BTFSC  FD8.2
06F76:  GOTO   7006
06F7A:  XORLW  03
06F7C:  BTFSC  FD8.2
06F7E:  GOTO   7016
06F82:  XORLW  13
06F84:  BTFSC  FD8.2
06F86:  GOTO   701E
06F8A:  XORLW  12
06F8C:  BTFSC  FD8.2
06F8E:  GOTO   7022
06F92:  XORLW  93
06F94:  BTFSC  FD8.2
06F96:  GOTO   7042
06F9A:  XORLW  01
06F9C:  BTFSC  FD8.2
06F9E:  GOTO   7052
06FA2:  XORLW  03
06FA4:  BTFSC  FD8.2
06FA6:  GOTO   7062
06FAA:  XORLW  01
06FAC:  BTFSC  FD8.2
06FAE:  GOTO   7072
06FB2:  XORLW  07
06FB4:  BTFSC  FD8.2
06FB6:  GOTO   7082
06FBA:  XORLW  01
06FBC:  BTFSC  FD8.2
06FBE:  GOTO   7092
06FC2:  XORLW  03
06FC4:  BTFSC  FD8.2
06FC6:  GOTO   70A2
06FCA:  XORLW  01
06FCC:  BTFSC  FD8.2
06FCE:  GOTO   70B2
06FD2:  XORLW  0F
06FD4:  BTFSC  FD8.2
06FD6:  GOTO   70C2
06FDA:  XORLW  1C
06FDC:  BTFSC  FD8.2
06FDE:  GOTO   70D2
06FE2:  XORLW  01
06FE4:  BTFSC  FD8.2
06FE6:  GOTO   70E2
06FEA:  XORLW  03
06FEC:  BTFSC  FD8.2
06FEE:  GOTO   70F2
06FF2:  GOTO   7102
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
06FF6:  MOVFF  389,38C
06FFA:  MOVFF  388,38B
06FFE:  GOTO   418A
....................          //mode_iv_meas_adc();
....................          break;
07002:  GOTO   7112
....................       case 0x11:
....................          mode_test_iv(content);
07006:  MOVFF  389,38C
0700A:  MOVFF  388,38B
0700E:  GOTO   489A
....................          break;
07012:  GOTO   7112
....................       case 0x12:
....................          test_adc();
07016:  GOTO   492A
....................          break;
0701A:  GOTO   7112
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0701E:  GOTO   7112
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
07022:  MOVLW  01
07024:  MOVLB  3
07026:  ADDWF  x88,W
07028:  MOVWF  FE9
0702A:  MOVLW  00
0702C:  ADDWFC x89,W
0702E:  MOVWF  FEA
07030:  MOVFF  FEF,38B
07034:  MOVFF  38B,38C
07038:  MOVLB  0
0703A:  GOTO   51AE
....................          break;
0703E:  GOTO   7112
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
07042:  MOVFF  389,38E
07046:  MOVFF  388,38D
0704A:  CALL   5568
....................          break;
0704E:  GOTO   7112
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
07052:  MOVFF  389,38C
07056:  MOVFF  388,38B
0705A:  GOTO   5630
....................          break;
0705E:  GOTO   7112
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
07062:  MOVFF  389,38C
07066:  MOVFF  388,38B
0706A:  GOTO   57CA
....................          break;
0706E:  GOTO   7112
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
07072:  MOVFF  389,38C
07076:  MOVFF  388,38B
0707A:  GOTO   5960
....................          break;
0707E:  GOTO   7112
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
07082:  MOVFF  389,38C
07086:  MOVFF  388,38B
0708A:  GOTO   5AD6
....................          break;
0708E:  GOTO   7112
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
07092:  MOVFF  389,38C
07096:  MOVFF  388,38B
0709A:  GOTO   5ED6
....................          break;
0709E:  GOTO   7112
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
070A2:  MOVFF  389,38C
070A6:  MOVFF  388,38B
070AA:  GOTO   6194
....................          break;
070AE:  GOTO   7112
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
070B2:  MOVFF  389,38C
070B6:  MOVFF  388,38B
070BA:  GOTO   661E
....................          break;
070BE:  GOTO   7112
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
070C2:  MOVFF  389,38C
070C6:  MOVFF  388,38B
070CA:  GOTO   6842
....................          break;
070CE:  GOTO   7112
.................... 
....................       // ___________________ SMF Commands ______________________
....................       /*
....................       case ID_SMF_COPY:
....................          mode_misf_smf_copy(content);
....................          break;
....................       case ID_SMF_READ:
....................          mode_flash_smf_read(content);
....................          break;
....................       case ID_SMF_ERASE:
....................          mode_flash_smf_erase(content);
....................          break;
....................       case ID_SMF_COPY_FORCE:
....................          mode_flash_address_reset(content);
....................          break;
....................       */
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
070D2:  MOVFF  389,38C
070D6:  MOVFF  388,38B
070DA:  GOTO   689C
....................          break;
070DE:  GOTO   7112
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
070E2:  MOVFF  389,38C
070E6:  MOVFF  388,38B
070EA:  GOTO   6C82
....................          break;
070EE:  GOTO   7112
....................       case ID_SMF_RESET:
....................          mode_smf_reset(content);
070F2:  MOVFF  389,38C
070F6:  MOVFF  388,38B
070FA:  GOTO   6D50
....................          break;
070FE:  GOTO   7112
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
07102:  MOVLW  08
07104:  MOVWF  FF6
07106:  MOVLW  0F
07108:  MOVWF  FF7
0710A:  MOVLW  00
0710C:  MOVWF  FF8
0710E:  CALL   181E
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
07112:  MOVLW  20
07114:  MOVWF  FF6
07116:  MOVLW  0F
07118:  MOVWF  FF7
0711A:  MOVLW  00
0711C:  MOVWF  FF8
0711E:  CALL   181E
07122:  GOTO   7188 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
08B80:  MOVLW  66
08B82:  MOVWF  FF6
08B84:  MOVLW  0F
08B86:  MOVWF  FF7
08B88:  MOVLW  00
08B8A:  MOVWF  FF8
08B8C:  CALL   181E
....................    
....................    switch(command->frame_id)
08B90:  MOVLB  3
08B92:  MOVF   x82,W
08B94:  MOVWF  FE9
08B96:  MOVF   x83,W
08B98:  MOVWF  FEA
08B9A:  MOVF   FEF,W
08B9C:  XORLW  00
08B9E:  MOVLB  0
08BA0:  BTFSC  FD8.2
08BA2:  GOTO   8BBA
08BA6:  XORLW  01
08BA8:  BTFSC  FD8.2
08BAA:  GOTO   8BCA
08BAE:  XORLW  03
08BB0:  BTFSC  FD8.2
08BB2:  GOTO   8BEA
08BB6:  GOTO   8BFA
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
08BBA:  MOVFF  383,385
08BBE:  MOVFF  382,384
08BC2:  GOTO   713C
....................          break;
08BC6:  GOTO   8BFA
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
08BCA:  MOVFF  383,385
08BCE:  MOVFF  382,384
08BD2:  GOTO   71BE
08BD6:  MOVF   01,F
08BD8:  BTFSC  FD8.2
08BDA:  GOTO   8BE6
....................             return TRUE; // if status is finished, return TRUE
08BDE:  MOVLW  01
08BE0:  MOVWF  01
08BE2:  GOTO   8BFE
....................          }        
....................          break;
08BE6:  GOTO   8BFA
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
08BEA:  MOVFF  383,385
08BEE:  MOVFF  382,384
08BF2:  GOTO   8B0A
....................          break;
08BF6:  GOTO   8BFA
....................    }
....................    return FALSE;
08BFA:  MOVLW  00
08BFC:  MOVWF  01
08BFE:  GOTO   948A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0713C:  MOVLW  7E
0713E:  MOVWF  FF6
07140:  MOVLW  0F
07142:  MOVWF  FF7
07144:  MOVLW  00
07146:  MOVWF  FF8
07148:  CALL   181E
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0714C:  MOVLW  94
0714E:  MOVWF  FF6
07150:  MOVLW  0F
07152:  MOVWF  FF7
07154:  MOVLW  00
07156:  MOVWF  FF8
07158:  CALL   181E
....................    transmit_ack();
0715C:  CALL   4176
.................... 
....................    status[0] = EXECUTING_MISSION;
07160:  MOVLW  02
07162:  MOVWF  48
....................    execute_mission(command->content);
07164:  MOVLW  03
07166:  MOVLB  3
07168:  ADDWF  x84,W
0716A:  MOVWF  01
0716C:  MOVLW  00
0716E:  ADDWFC x85,W
07170:  MOVWF  03
07172:  MOVF   01,W
07174:  MOVWF  x86
07176:  MOVFF  03,387
0717A:  MOVFF  387,389
0717E:  MOVFF  386,388
07182:  MOVLB  0
07184:  GOTO   6F04
....................    if (is_empty_smf_data())
07188:  CALL   7126
0718C:  MOVF   01,F
0718E:  BTFSC  FD8.2
07190:  GOTO   719C
....................       status[0] = FINISHED;
07194:  MOVLW  06
07196:  MOVWF  48
07198:  GOTO   71A0
....................    else
....................       status[0] = SMF_USE_REQ;
0719C:  MOVLW  04
0719E:  MOVWF  48
071A0:  GOTO   8BC6 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
071BE:  MOVLW  AE
071C0:  MOVWF  FF6
071C2:  MOVLW  0F
071C4:  MOVWF  FF7
071C6:  MOVLW  00
071C8:  MOVWF  FF8
071CA:  CALL   181E
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
071CE:  MOVLW  C2
071D0:  MOVWF  FF6
071D2:  MOVLW  0F
071D4:  MOVWF  FF7
071D6:  MOVLW  00
071D8:  MOVWF  FF8
071DA:  CALL   181E
....................    transmit_status();
071DE:  GOTO   71A4
....................    if (status[0] == FINISHED)
071E2:  MOVF   48,W
071E4:  SUBLW  06
071E6:  BTFSS  FD8.2
071E8:  GOTO   7208
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
071EC:  MOVLW  E0
071EE:  MOVWF  FF6
071F0:  MOVLW  0F
071F2:  MOVWF  FF7
071F4:  MOVLW  00
071F6:  MOVWF  FF8
071F8:  CALL   181E
....................       return TRUE;
071FC:  MOVLW  01
071FE:  MOVWF  01
07200:  GOTO   7210
....................    }
07204:  GOTO   7210
....................    else{
....................       return FALSE;
07208:  MOVLW  00
0720A:  MOVWF  01
0720C:  GOTO   7210
....................    }
07210:  GOTO   8BD6 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
08B0A:  MOVLW  FC
08B0C:  MOVWF  FF6
08B0E:  MOVLW  0F
08B10:  MOVWF  FF7
08B12:  MOVLW  00
08B14:  MOVWF  FF8
08B16:  CALL   181E
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
08B1A:  MOVLW  16
08B1C:  MOVWF  FF6
08B1E:  MOVLW  10
08B20:  MOVWF  FF7
08B22:  MOVLW  00
08B24:  MOVWF  FF8
08B26:  CALL   181E
....................     transmit_ack();
08B2A:  CALL   4176
....................     
....................     if (command->content[0] == ALLOW) {
08B2E:  MOVLW  03
08B30:  MOVLB  3
08B32:  ADDWF  x84,W
08B34:  MOVWF  FE9
08B36:  MOVLW  00
08B38:  ADDWFC x85,W
08B3A:  MOVWF  FEA
08B3C:  DECFSZ FEF,W
08B3E:  BRA    8B44
08B40:  BRA    8B4A
08B42:  MOVLB  0
08B44:  MOVLB  0
08B46:  GOTO   8B6C
08B4A:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
08B4C:  MOVLW  30
08B4E:  MOVWF  FF6
08B50:  MOVLW  10
08B52:  MOVWF  FF7
08B54:  MOVLW  00
08B56:  MOVWF  FF8
08B58:  CALL   181E
....................         status[0] = COPYING;
08B5C:  MOVLW  05
08B5E:  MOVWF  48
....................       //   smf_write();
....................          data_copy();
08B60:  GOTO   7CFE
....................         status[0] = FINISHED;
08B64:  MOVLW  06
08B66:  MOVWF  48
....................     } else {
08B68:  GOTO   8B7C
....................         fprintf(PC, "\t\t-> denyed\r\n");
08B6C:  MOVLW  3E
08B6E:  MOVWF  FF6
08B70:  MOVLW  10
08B72:  MOVWF  FF7
08B74:  MOVLW  00
08B76:  MOVWF  FF8
08B78:  CALL   181E
....................     }
08B7C:  GOTO   8BF6 (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
0418A:  MOVLW  4C
0418C:  MOVWF  FF6
0418E:  MOVLW  10
04190:  MOVWF  FF7
04192:  MOVLW  00
04194:  MOVWF  FF8
04196:  CALL   181E
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
0419A:  MOVLB  3
0419C:  MOVF   x8B,W
0419E:  MOVWF  FE9
041A0:  MOVF   x8C,W
041A2:  MOVWF  FEA
041A4:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
041A8:  MOVLW  01
041AA:  ADDWF  x8B,W
041AC:  MOVWF  FE9
041AE:  MOVLW  00
041B0:  ADDWFC x8C,W
041B2:  MOVWF  FEA
041B4:  MOVF   FEF,W
041B6:  CLRF   x97
041B8:  CLRF   x96
041BA:  CLRF   x95
041BC:  MOVWF  x94
041BE:  MOVFF  394,397
041C2:  CLRF   x94
041C4:  CLRF   x95
041C6:  CLRF   x96
041C8:  MOVLW  02
041CA:  ADDWF  x8B,W
041CC:  MOVWF  FE9
041CE:  MOVLW  00
041D0:  ADDWFC x8C,W
041D2:  MOVWF  FEA
041D4:  MOVF   FEF,W
041D6:  CLRF   x9C
041D8:  CLRF   x9B
041DA:  CLRF   x9A
041DC:  MOVWF  x99
041DE:  MOVFF  39A,03
041E2:  MOVFF  399,02
041E6:  CLRF   00
041E8:  CLRF   01
041EA:  MOVF   00,W
041EC:  IORWF  x94,F
041EE:  MOVF   01,W
041F0:  IORWF  x95,F
041F2:  MOVF   02,W
041F4:  IORWF  x96,F
041F6:  MOVF   03,W
041F8:  IORWF  x97,F
041FA:  MOVLW  03
041FC:  ADDWF  x8B,W
041FE:  MOVWF  FE9
04200:  MOVLW  00
04202:  ADDWFC x8C,W
04204:  MOVWF  FEA
04206:  MOVF   FEF,W
04208:  CLRF   x9C
0420A:  CLRF   x9B
0420C:  CLRF   x9A
0420E:  MOVWF  x99
04210:  MOVFF  39B,03
04214:  MOVFF  39A,02
04218:  MOVFF  399,01
0421C:  CLRF   00
0421E:  MOVF   00,W
04220:  IORWF  x94,F
04222:  MOVF   01,W
04224:  IORWF  x95,F
04226:  MOVF   02,W
04228:  IORWF  x96,F
0422A:  MOVF   03,W
0422C:  IORWF  x97,F
0422E:  MOVLW  04
04230:  ADDWF  x8B,W
04232:  MOVWF  FE9
04234:  MOVLW  00
04236:  ADDWFC x8C,W
04238:  MOVWF  FEA
0423A:  MOVF   FEF,W
0423C:  MOVWF  00
0423E:  CLRF   01
04240:  CLRF   02
04242:  CLRF   03
04244:  MOVF   00,W
04246:  IORWF  x94,W
04248:  MOVWF  x8E
0424A:  MOVF   01,W
0424C:  IORWF  x95,W
0424E:  MOVWF  x8F
04250:  MOVF   02,W
04252:  IORWF  x96,W
04254:  MOVWF  x90
04256:  MOVF   03,W
04258:  IORWF  x97,W
0425A:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
0425C:  MOVLW  05
0425E:  ADDWF  x8B,W
04260:  MOVWF  FE9
04262:  MOVLW  00
04264:  ADDWFC x8C,W
04266:  MOVWF  FEA
04268:  MOVF   FEF,W
0426A:  CLRF   x95
0426C:  MOVWF  x94
0426E:  MOVFF  394,395
04272:  CLRF   x94
04274:  MOVLW  06
04276:  ADDWF  x8B,W
04278:  MOVWF  FE9
0427A:  MOVLW  00
0427C:  ADDWFC x8C,W
0427E:  MOVWF  FEA
04280:  MOVF   FEF,W
04282:  CLRF   03
04284:  IORWF  x94,W
04286:  MOVWF  x92
04288:  MOVF   03,W
0428A:  IORWF  x95,W
0428C:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
0428E:  MOVLW  60
04290:  MOVWF  FF6
04292:  MOVLW  10
04294:  MOVWF  FF7
04296:  MOVLW  00
04298:  MOVWF  FF8
0429A:  MOVLW  0C
0429C:  MOVLB  7
0429E:  MOVWF  xEC
042A0:  MOVLB  0
042A2:  CALL   184E
042A6:  MOVFF  38D,427
042AA:  MOVLW  37
042AC:  MOVLB  4
042AE:  MOVWF  x28
042B0:  MOVLB  0
042B2:  CALL   1A10
042B6:  MOVLW  0D
042B8:  MOVLB  8
042BA:  MOVWF  x2F
042BC:  MOVLB  0
042BE:  CALL   17CC
042C2:  MOVLW  0A
042C4:  MOVLB  8
042C6:  MOVWF  x2F
042C8:  MOVLB  0
042CA:  CALL   17CC
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
042CE:  MOVLW  74
042D0:  MOVWF  FF6
042D2:  MOVLW  10
042D4:  MOVWF  FF7
042D6:  MOVLW  00
042D8:  MOVWF  FF8
042DA:  MOVLW  0E
042DC:  MOVLB  7
042DE:  MOVWF  xEC
042E0:  MOVLB  0
042E2:  CALL   184E
042E6:  MOVFF  391,427
042EA:  MOVLW  37
042EC:  MOVLB  4
042EE:  MOVWF  x28
042F0:  MOVLB  0
042F2:  CALL   1A10
042F6:  MOVFF  390,427
042FA:  MOVLW  37
042FC:  MOVLB  4
042FE:  MOVWF  x28
04300:  MOVLB  0
04302:  CALL   1A10
04306:  MOVFF  38F,427
0430A:  MOVLW  37
0430C:  MOVLB  4
0430E:  MOVWF  x28
04310:  MOVLB  0
04312:  CALL   1A10
04316:  MOVFF  38E,427
0431A:  MOVLW  37
0431C:  MOVLB  4
0431E:  MOVWF  x28
04320:  MOVLB  0
04322:  CALL   1A10
04326:  MOVLW  0D
04328:  MOVLB  8
0432A:  MOVWF  x2F
0432C:  MOVLB  0
0432E:  CALL   17CC
04332:  MOVLW  0A
04334:  MOVLB  8
04336:  MOVWF  x2F
04338:  MOVLB  0
0433A:  CALL   17CC
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
0433E:  MOVLW  8A
04340:  MOVWF  FF6
04342:  MOVLW  10
04344:  MOVWF  FF7
04346:  MOVLW  00
04348:  MOVWF  FF8
0434A:  MOVLW  0E
0434C:  MOVLB  7
0434E:  MOVWF  xEC
04350:  MOVLB  0
04352:  CALL   184E
04356:  MOVFF  393,427
0435A:  MOVLW  37
0435C:  MOVLB  4
0435E:  MOVWF  x28
04360:  MOVLB  0
04362:  CALL   1A10
04366:  MOVFF  392,427
0436A:  MOVLW  37
0436C:  MOVLB  4
0436E:  MOVWF  x28
04370:  MOVLB  0
04372:  CALL   1A10
04376:  MOVLW  0D
04378:  MOVLB  8
0437A:  MOVWF  x2F
0437C:  MOVLB  0
0437E:  CALL   17CC
04382:  MOVLW  0A
04384:  MOVLB  8
04386:  MOVWF  x2F
04388:  MOVLB  0
0438A:  CALL   17CC
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
0438E:  MOVFF  38D,492
04392:  MOVLW  01
04394:  MOVLB  4
04396:  MOVWF  x93
04398:  MOVLB  0
0439A:  CALL   38F2
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0439E:  MOVFF  38D,492
043A2:  MOVLW  02
043A4:  MOVLB  4
043A6:  MOVWF  x93
043A8:  MOVLB  0
043AA:  CALL   38F2
....................    fprintf(PC, "End MODE DUMMY\r\n");
043AE:  MOVLW  A0
043B0:  MOVWF  FF6
043B2:  MOVLW  10
043B4:  MOVWF  FF7
043B6:  MOVLW  00
043B8:  MOVWF  FF8
043BA:  CALL   181E
043BE:  GOTO   7002 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
0489A:  MOVLW  01
0489C:  MOVLB  3
0489E:  ADDWF  x8B,W
048A0:  MOVWF  FE9
048A2:  MOVLW  00
048A4:  ADDWFC x8C,W
048A6:  MOVWF  FEA
048A8:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
048AC:  MOVLW  B2
048AE:  MOVWF  FF6
048B0:  MOVLW  10
048B2:  MOVWF  FF7
048B4:  MOVLW  00
048B6:  MOVWF  FF8
048B8:  MOVLB  0
048BA:  CALL   181E
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
048BE:  MOVLW  C8
048C0:  MOVWF  FF6
048C2:  MOVLW  10
048C4:  MOVWF  FF7
048C6:  MOVLW  00
048C8:  MOVWF  FF8
048CA:  MOVLW  0E
048CC:  MOVLB  7
048CE:  MOVWF  xEC
048D0:  MOVLB  0
048D2:  CALL   184E
048D6:  MOVFF  38D,7EC
048DA:  MOVLW  1B
048DC:  MOVLB  7
048DE:  MOVWF  xED
048E0:  MOVLB  0
048E2:  CALL   440A
048E6:  MOVLW  0D
048E8:  MOVLB  8
048EA:  MOVWF  x2F
048EC:  MOVLB  0
048EE:  CALL   17CC
048F2:  MOVLW  0A
048F4:  MOVLB  8
048F6:  MOVWF  x2F
048F8:  MOVLB  0
048FA:  CALL   17CC
....................    output_high(CONNECT_CIGS1);
048FE:  BCF    F94.0
04900:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
04902:  BCF    F94.7
04904:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
04906:  MOVFF  38B,390
0490A:  GOTO   4772
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
0490E:  MOVLW  DC
04910:  MOVWF  FF6
04912:  MOVLW  10
04914:  MOVWF  FF7
04916:  MOVLW  00
04918:  MOVWF  FF8
0491A:  CALL   181E
....................    output_low(CONNECT_CIGS1);
0491E:  BCF    F94.0
04920:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
04922:  BCF    F94.7
04924:  BSF    F8B.7
04926:  GOTO   7012 (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
051AE:  MOVLW  50
051B0:  MOVLB  3
051B2:  MOVWF  x96
051B4:  MOVLB  0
051B6:  GOTO   4AD8
....................    SmfDataStruct data;
....................    data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
051BA:  MOVLB  3
051BC:  BCF    x8D.0
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
051BE:  MOVF   x64,W
051C0:  MOVWF  x96
051C2:  MOVF   x65,W
051C4:  MOVWF  x97
051C6:  MOVLW  16
051C8:  ADDWF  x66,W
051CA:  MOVWF  x98
051CC:  MOVLW  00
051CE:  ADDWFC x67,W
051D0:  MOVWF  x99
051D2:  MOVF   x69,W
051D4:  SUBWF  x96,W
051D6:  MOVWF  x8E
051D8:  MOVF   x6A,W
051DA:  SUBWFB x97,W
051DC:  MOVWF  x8F
051DE:  MOVF   x6B,W
051E0:  SUBWFB x98,W
051E2:  MOVWF  x90
051E4:  MOVF   x6C,W
051E6:  SUBWFB x99,W
051E8:  MOVWF  x91
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
051EA:  MOVFF  36C,395
051EE:  MOVFF  36B,394
051F2:  MOVFF  36A,393
051F6:  MOVFF  369,392
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
051FA:  MOVLW  03
051FC:  MOVWF  x97
051FE:  MOVLW  8D
05200:  MOVWF  x96
05202:  MOVLB  0
05204:  GOTO   5020
05208:  GOTO   703E (RETURN)
.................... }
.................... 
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
05568:  MOVLW  34
0556A:  MOVWF  FF6
0556C:  MOVLW  11
0556E:  MOVWF  FF7
05570:  MOVLW  00
05572:  MOVWF  FF8
05574:  CALL   181E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
05578:  MOVLB  3
0557A:  MOVF   x8D,W
0557C:  MOVWF  FE9
0557E:  MOVF   x8E,W
05580:  MOVWF  FEA
05582:  MOVFF  FEF,38F
....................    piclog_make(cmd, 0x00); // Log the command execution
05586:  MOVFF  38F,492
0558A:  MOVLB  4
0558C:  CLRF   x93
0558E:  MOVLB  0
05590:  CALL   38F2
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
05594:  MOVLB  3
05596:  CLRF   x93
05598:  CLRF   x92
0559A:  CLRF   x91
0559C:  CLRF   x90
0559E:  MOVLB  0
055A0:  MOVLB  3
055A2:  MOVF   x93,F
055A4:  BTFSC  FD8.2
055A6:  BRA    55AE
055A8:  MOVLB  0
055AA:  GOTO   560E
055AE:  MOVLB  0
055B0:  MOVLB  3
055B2:  MOVF   x92,W
055B4:  SUBLW  F4
055B6:  BTFSC  FD8.0
055B8:  BRA    55C0
055BA:  MOVLB  0
055BC:  GOTO   560E
055C0:  MOVLB  0
055C2:  BTFSS  FD8.2
055C4:  GOTO   55DA
055C8:  MOVLB  3
055CA:  MOVF   x91,W
055CC:  SUBLW  23
055CE:  BTFSC  FD8.0
055D0:  BRA    55D8
055D2:  MOVLB  0
055D4:  GOTO   560E
055D8:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
055DA:  MOVFF  E1,3D4
055DE:  MOVFF  E0,3D3
055E2:  MOVFF  DF,3D2
055E6:  MOVFF  DE,3D1
055EA:  MOVFF  393,3D8
055EE:  MOVFF  392,3D7
055F2:  MOVFF  391,3D6
055F6:  MOVFF  390,3D5
055FA:  CALL   520C
055FE:  MOVLW  01
05600:  MOVLB  3
05602:  ADDWF  x92,F
05604:  MOVLW  00
05606:  ADDWFC x93,F
05608:  MOVLB  0
0560A:  GOTO   55A0
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0560E:  MOVFF  38F,492
05612:  MOVLW  02
05614:  MOVLB  4
05616:  MOVWF  x93
05618:  MOVLB  0
0561A:  CALL   38F2
....................    fprintf(PC, "End Flash Erase All\r\n");
0561E:  MOVLW  4C
05620:  MOVWF  FF6
05622:  MOVLW  11
05624:  MOVWF  FF7
05626:  MOVLW  00
05628:  MOVWF  FF8
0562A:  CALL   181E
0562E:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
05630:  MOVLW  62
05632:  MOVWF  FF6
05634:  MOVLW  11
05636:  MOVWF  FF7
05638:  MOVLW  00
0563A:  MOVWF  FF8
0563C:  CALL   181E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05640:  MOVLB  3
05642:  MOVF   x8B,W
05644:  MOVWF  FE9
05646:  MOVF   x8C,W
05648:  MOVWF  FEA
0564A:  MOVFF  FEF,38D
0564E:  MOVLW  01
05650:  ADDWF  x8B,W
05652:  MOVWF  FE9
05654:  MOVLW  00
05656:  ADDWFC x8C,W
05658:  MOVWF  FEA
0565A:  MOVF   FEF,W
0565C:  CLRF   x95
0565E:  CLRF   x94
05660:  CLRF   x93
05662:  MOVWF  x92
05664:  MOVFF  392,395
05668:  CLRF   x92
0566A:  CLRF   x93
0566C:  CLRF   x94
0566E:  MOVLW  02
05670:  ADDWF  x8B,W
05672:  MOVWF  FE9
05674:  MOVLW  00
05676:  ADDWFC x8C,W
05678:  MOVWF  FEA
0567A:  MOVF   FEF,W
0567C:  CLRF   x9A
0567E:  CLRF   x99
05680:  CLRF   x98
05682:  MOVWF  x97
05684:  MOVFF  398,03
05688:  MOVFF  397,02
0568C:  CLRF   00
0568E:  CLRF   01
05690:  MOVF   00,W
05692:  IORWF  x92,F
05694:  MOVF   01,W
05696:  IORWF  x93,F
05698:  MOVF   02,W
0569A:  IORWF  x94,F
0569C:  MOVF   03,W
0569E:  IORWF  x95,F
056A0:  MOVLW  03
056A2:  ADDWF  x8B,W
056A4:  MOVWF  FE9
056A6:  MOVLW  00
056A8:  ADDWFC x8C,W
056AA:  MOVWF  FEA
056AC:  MOVF   FEF,W
056AE:  CLRF   x9A
056B0:  CLRF   x99
056B2:  CLRF   x98
056B4:  MOVWF  x97
056B6:  MOVFF  399,03
056BA:  MOVFF  398,02
056BE:  MOVFF  397,01
056C2:  CLRF   00
056C4:  MOVF   00,W
056C6:  IORWF  x92,F
056C8:  MOVF   01,W
056CA:  IORWF  x93,F
056CC:  MOVF   02,W
056CE:  IORWF  x94,F
056D0:  MOVF   03,W
056D2:  IORWF  x95,F
056D4:  MOVLW  04
056D6:  ADDWF  x8B,W
056D8:  MOVWF  FE9
056DA:  MOVLW  00
056DC:  ADDWFC x8C,W
056DE:  MOVWF  FEA
056E0:  MOVF   FEF,W
056E2:  MOVWF  00
056E4:  CLRF   01
056E6:  CLRF   02
056E8:  CLRF   03
056EA:  MOVF   00,W
056EC:  IORWF  x92,W
056EE:  MOVWF  x8E
056F0:  MOVF   01,W
056F2:  IORWF  x93,W
056F4:  MOVWF  x8F
056F6:  MOVF   02,W
056F8:  IORWF  x94,W
056FA:  MOVWF  x90
056FC:  MOVF   03,W
056FE:  IORWF  x95,W
05700:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
05702:  MOVLW  80
05704:  MOVWF  FF6
05706:  MOVLW  11
05708:  MOVWF  FF7
0570A:  MOVLW  00
0570C:  MOVWF  FF8
0570E:  MOVLW  13
05710:  MOVLB  7
05712:  MOVWF  xEC
05714:  MOVLB  0
05716:  CALL   184E
0571A:  MOVFF  391,427
0571E:  MOVLW  37
05720:  MOVLB  4
05722:  MOVWF  x28
05724:  MOVLB  0
05726:  CALL   1A10
0572A:  MOVFF  390,427
0572E:  MOVLW  37
05730:  MOVLB  4
05732:  MOVWF  x28
05734:  MOVLB  0
05736:  CALL   1A10
0573A:  MOVFF  38F,427
0573E:  MOVLW  37
05740:  MOVLB  4
05742:  MOVWF  x28
05744:  MOVLB  0
05746:  CALL   1A10
0574A:  MOVFF  38E,427
0574E:  MOVLW  37
05750:  MOVLB  4
05752:  MOVWF  x28
05754:  MOVLB  0
05756:  CALL   1A10
0575A:  MOVLW  0D
0575C:  MOVLB  8
0575E:  MOVWF  x2F
05760:  MOVLB  0
05762:  CALL   17CC
05766:  MOVLW  0A
05768:  MOVLB  8
0576A:  MOVWF  x2F
0576C:  MOVLB  0
0576E:  CALL   17CC
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05772:  MOVFF  38D,492
05776:  MOVLW  01
05778:  MOVLB  4
0577A:  MOVWF  x93
0577C:  MOVLB  0
0577E:  CALL   38F2
....................    
....................    sector_erase(mis_fm, sector_address);
05782:  MOVFF  E1,3D4
05786:  MOVFF  E0,3D3
0578A:  MOVFF  DF,3D2
0578E:  MOVFF  DE,3D1
05792:  MOVFF  391,3D8
05796:  MOVFF  390,3D7
0579A:  MOVFF  38F,3D6
0579E:  MOVFF  38E,3D5
057A2:  CALL   520C
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
057A6:  MOVFF  38D,492
057AA:  MOVLW  02
057AC:  MOVLB  4
057AE:  MOVWF  x93
057B0:  MOVLB  0
057B2:  CALL   38F2
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
057B6:  MOVLW  9C
057B8:  MOVWF  FF6
057BA:  MOVLW  11
057BC:  MOVWF  FF7
057BE:  MOVLW  00
057C0:  MOVWF  FF8
057C2:  CALL   181E
057C6:  GOTO   705E (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
057CA:  MOVLW  B8
057CC:  MOVWF  FF6
057CE:  MOVLW  11
057D0:  MOVWF  FF7
057D2:  MOVLW  00
057D4:  MOVWF  FF8
057D6:  CALL   181E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
057DA:  MOVLB  3
057DC:  MOVF   x8B,W
057DE:  MOVWF  FE9
057E0:  MOVF   x8C,W
057E2:  MOVWF  FEA
057E4:  MOVFF  FEF,38D
057E8:  MOVLW  01
057EA:  ADDWF  x8B,W
057EC:  MOVWF  FE9
057EE:  MOVLW  00
057F0:  ADDWFC x8C,W
057F2:  MOVWF  FEA
057F4:  MOVF   FEF,W
057F6:  CLRF   x95
057F8:  CLRF   x94
057FA:  CLRF   x93
057FC:  MOVWF  x92
057FE:  MOVFF  392,395
05802:  CLRF   x92
05804:  CLRF   x93
05806:  CLRF   x94
05808:  MOVLW  02
0580A:  ADDWF  x8B,W
0580C:  MOVWF  FE9
0580E:  MOVLW  00
05810:  ADDWFC x8C,W
05812:  MOVWF  FEA
05814:  MOVF   FEF,W
05816:  CLRF   x9A
05818:  CLRF   x99
0581A:  CLRF   x98
0581C:  MOVWF  x97
0581E:  MOVFF  398,03
05822:  MOVFF  397,02
05826:  CLRF   00
05828:  CLRF   01
0582A:  MOVF   00,W
0582C:  IORWF  x92,F
0582E:  MOVF   01,W
05830:  IORWF  x93,F
05832:  MOVF   02,W
05834:  IORWF  x94,F
05836:  MOVF   03,W
05838:  IORWF  x95,F
0583A:  MOVLW  03
0583C:  ADDWF  x8B,W
0583E:  MOVWF  FE9
05840:  MOVLW  00
05842:  ADDWFC x8C,W
05844:  MOVWF  FEA
05846:  MOVF   FEF,W
05848:  CLRF   x9A
0584A:  CLRF   x99
0584C:  CLRF   x98
0584E:  MOVWF  x97
05850:  MOVFF  399,03
05854:  MOVFF  398,02
05858:  MOVFF  397,01
0585C:  CLRF   00
0585E:  MOVF   00,W
05860:  IORWF  x92,F
05862:  MOVF   01,W
05864:  IORWF  x93,F
05866:  MOVF   02,W
05868:  IORWF  x94,F
0586A:  MOVF   03,W
0586C:  IORWF  x95,F
0586E:  MOVLW  04
05870:  ADDWF  x8B,W
05872:  MOVWF  FE9
05874:  MOVLW  00
05876:  ADDWFC x8C,W
05878:  MOVWF  FEA
0587A:  MOVF   FEF,W
0587C:  MOVWF  00
0587E:  CLRF   01
05880:  CLRF   02
05882:  CLRF   03
05884:  MOVF   00,W
05886:  IORWF  x92,W
05888:  MOVWF  x8E
0588A:  MOVF   01,W
0588C:  IORWF  x93,W
0588E:  MOVWF  x8F
05890:  MOVF   02,W
05892:  IORWF  x94,W
05894:  MOVWF  x90
05896:  MOVF   03,W
05898:  IORWF  x95,W
0589A:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
0589C:  MOVLW  D4
0589E:  MOVWF  FF6
058A0:  MOVLW  11
058A2:  MOVWF  FF7
058A4:  MOVLW  00
058A6:  MOVWF  FF8
058A8:  MOVLW  16
058AA:  MOVLB  7
058AC:  MOVWF  xEC
058AE:  MOVLB  0
058B0:  CALL   184E
058B4:  MOVFF  391,427
058B8:  MOVLW  37
058BA:  MOVLB  4
058BC:  MOVWF  x28
058BE:  MOVLB  0
058C0:  CALL   1A10
058C4:  MOVFF  390,427
058C8:  MOVLW  37
058CA:  MOVLB  4
058CC:  MOVWF  x28
058CE:  MOVLB  0
058D0:  CALL   1A10
058D4:  MOVFF  38F,427
058D8:  MOVLW  37
058DA:  MOVLB  4
058DC:  MOVWF  x28
058DE:  MOVLB  0
058E0:  CALL   1A10
058E4:  MOVFF  38E,427
058E8:  MOVLW  37
058EA:  MOVLB  4
058EC:  MOVWF  x28
058EE:  MOVLB  0
058F0:  CALL   1A10
058F4:  MOVLW  0D
058F6:  MOVLB  8
058F8:  MOVWF  x2F
058FA:  MOVLB  0
058FC:  CALL   17CC
05900:  MOVLW  0A
05902:  MOVLB  8
05904:  MOVWF  x2F
05906:  MOVLB  0
05908:  CALL   17CC
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
0590C:  MOVFF  38D,492
05910:  MOVLW  01
05912:  MOVLB  4
05914:  MOVWF  x93
05916:  MOVLB  0
05918:  CALL   38F2
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
0591C:  MOVFF  E1,82F
05920:  MOVFF  E0,82E
05924:  MOVFF  DF,82D
05928:  MOVFF  DE,82C
0592C:  MOVLB  8
0592E:  CLRF   x33
05930:  CLRF   x32
05932:  CLRF   x31
05934:  CLRF   x30
05936:  MOVLB  0
05938:  CALL   32B4
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0593C:  MOVFF  38D,492
05940:  MOVLW  02
05942:  MOVLB  4
05944:  MOVWF  x93
05946:  MOVLB  0
05948:  CALL   38F2
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
0594C:  MOVLW  F2
0594E:  MOVWF  FF6
05950:  MOVLW  11
05952:  MOVWF  FF7
05954:  MOVLW  00
05956:  MOVWF  FF8
05958:  CALL   181E
0595C:  GOTO   706E (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05960:  MOVLW  0C
05962:  MOVWF  FF6
05964:  MOVLW  12
05966:  MOVWF  FF7
05968:  MOVLW  00
0596A:  MOVWF  FF8
0596C:  CALL   181E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05970:  MOVLB  3
05972:  MOVF   x8B,W
05974:  MOVWF  FE9
05976:  MOVF   x8C,W
05978:  MOVWF  FEA
0597A:  MOVFF  FEF,38D
0597E:  MOVLW  01
05980:  ADDWF  x8B,W
05982:  MOVWF  FE9
05984:  MOVLW  00
05986:  ADDWFC x8C,W
05988:  MOVWF  FEA
0598A:  MOVF   FEF,W
0598C:  CLRF   x95
0598E:  CLRF   x94
05990:  CLRF   x93
05992:  MOVWF  x92
05994:  MOVFF  392,395
05998:  CLRF   x92
0599A:  CLRF   x93
0599C:  CLRF   x94
0599E:  MOVLW  02
059A0:  ADDWF  x8B,W
059A2:  MOVWF  FE9
059A4:  MOVLW  00
059A6:  ADDWFC x8C,W
059A8:  MOVWF  FEA
059AA:  MOVF   FEF,W
059AC:  CLRF   x9A
059AE:  CLRF   x99
059B0:  CLRF   x98
059B2:  MOVWF  x97
059B4:  MOVFF  398,03
059B8:  MOVFF  397,02
059BC:  CLRF   00
059BE:  CLRF   01
059C0:  MOVF   00,W
059C2:  IORWF  x92,F
059C4:  MOVF   01,W
059C6:  IORWF  x93,F
059C8:  MOVF   02,W
059CA:  IORWF  x94,F
059CC:  MOVF   03,W
059CE:  IORWF  x95,F
059D0:  MOVLW  03
059D2:  ADDWF  x8B,W
059D4:  MOVWF  FE9
059D6:  MOVLW  00
059D8:  ADDWFC x8C,W
059DA:  MOVWF  FEA
059DC:  MOVF   FEF,W
059DE:  CLRF   x9A
059E0:  CLRF   x99
059E2:  CLRF   x98
059E4:  MOVWF  x97
059E6:  MOVFF  399,03
059EA:  MOVFF  398,02
059EE:  MOVFF  397,01
059F2:  CLRF   00
059F4:  MOVF   00,W
059F6:  IORWF  x92,F
059F8:  MOVF   01,W
059FA:  IORWF  x93,F
059FC:  MOVF   02,W
059FE:  IORWF  x94,F
05A00:  MOVF   03,W
05A02:  IORWF  x95,F
05A04:  MOVLW  04
05A06:  ADDWF  x8B,W
05A08:  MOVWF  FE9
05A0A:  MOVLW  00
05A0C:  ADDWFC x8C,W
05A0E:  MOVWF  FEA
05A10:  MOVF   FEF,W
05A12:  MOVWF  00
05A14:  CLRF   01
05A16:  CLRF   02
05A18:  CLRF   03
05A1A:  MOVF   00,W
05A1C:  IORWF  x92,W
05A1E:  MOVWF  x8E
05A20:  MOVF   01,W
05A22:  IORWF  x93,W
05A24:  MOVWF  x8F
05A26:  MOVF   02,W
05A28:  IORWF  x94,W
05A2A:  MOVWF  x90
05A2C:  MOVF   03,W
05A2E:  IORWF  x95,W
05A30:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05A32:  MOVLW  32
05A34:  MOVWF  FF6
05A36:  MOVLW  12
05A38:  MOVWF  FF7
05A3A:  MOVLW  00
05A3C:  MOVWF  FF8
05A3E:  MOVLW  16
05A40:  MOVLB  7
05A42:  MOVWF  xEC
05A44:  MOVLB  0
05A46:  CALL   184E
05A4A:  MOVFF  391,427
05A4E:  MOVLW  37
05A50:  MOVLB  4
05A52:  MOVWF  x28
05A54:  MOVLB  0
05A56:  CALL   1A10
05A5A:  MOVFF  390,427
05A5E:  MOVLW  37
05A60:  MOVLB  4
05A62:  MOVWF  x28
05A64:  MOVLB  0
05A66:  CALL   1A10
05A6A:  MOVFF  38F,427
05A6E:  MOVLW  37
05A70:  MOVLB  4
05A72:  MOVWF  x28
05A74:  MOVLB  0
05A76:  CALL   1A10
05A7A:  MOVFF  38E,427
05A7E:  MOVLW  37
05A80:  MOVLB  4
05A82:  MOVWF  x28
05A84:  MOVLB  0
05A86:  CALL   1A10
05A8A:  MOVLW  0D
05A8C:  MOVLB  8
05A8E:  MOVWF  x2F
05A90:  MOVLB  0
05A92:  CALL   17CC
05A96:  MOVLW  0A
05A98:  MOVLB  8
05A9A:  MOVWF  x2F
05A9C:  MOVLB  0
05A9E:  CALL   17CC
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05AA2:  MOVFF  38D,492
05AA6:  MOVLW  01
05AA8:  MOVLB  4
05AAA:  MOVWF  x93
05AAC:  MOVLB  0
05AAE:  CALL   38F2
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05AB2:  MOVFF  38D,492
05AB6:  MOVLW  02
05AB8:  MOVLB  4
05ABA:  MOVWF  x93
05ABC:  MOVLB  0
05ABE:  CALL   38F2
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05AC2:  MOVLW  50
05AC4:  MOVWF  FF6
05AC6:  MOVLW  12
05AC8:  MOVWF  FF7
05ACA:  MOVLW  00
05ACC:  MOVWF  FF8
05ACE:  CALL   181E
05AD2:  GOTO   707E (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
05AD6:  MOVLW  74
05AD8:  MOVWF  FF6
05ADA:  MOVLW  12
05ADC:  MOVWF  FF7
05ADE:  MOVLW  00
05AE0:  MOVWF  FF8
05AE2:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05AE6:  MOVLB  3
05AE8:  MOVF   x8B,W
05AEA:  MOVWF  FE9
05AEC:  MOVF   x8C,W
05AEE:  MOVWF  FEA
05AF0:  MOVFF  FEF,3DD
05AF4:  MOVFF  3DD,492
05AF8:  MOVLW  01
05AFA:  MOVLB  4
05AFC:  MOVWF  x93
05AFE:  MOVLB  0
05B00:  CALL   38F2
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05B04:  MOVLB  3
05B06:  CLRF   x8D
05B08:  CLRF   x8E
05B0A:  CLRF   x8F
05B0C:  CLRF   x90
05B0E:  CLRF   x91
05B10:  CLRF   x92
05B12:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
05B14:  MOVF   x8B,W
05B16:  MOVWF  FE9
05B18:  MOVF   x8C,W
05B1A:  MOVWF  FEA
05B1C:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05B20:  MOVLW  01
05B22:  ADDWF  x8B,W
05B24:  MOVWF  FE9
05B26:  MOVLW  00
05B28:  ADDWFC x8C,W
05B2A:  MOVWF  FEA
05B2C:  MOVF   FEF,W
05B2E:  CLRF   xE0
05B30:  CLRF   xDF
05B32:  CLRF   xDE
05B34:  MOVWF  xDD
05B36:  MOVFF  3DD,3E0
05B3A:  CLRF   xDD
05B3C:  CLRF   xDE
05B3E:  CLRF   xDF
05B40:  MOVLW  02
05B42:  ADDWF  x8B,W
05B44:  MOVWF  FE9
05B46:  MOVLW  00
05B48:  ADDWFC x8C,W
05B4A:  MOVWF  FEA
05B4C:  MOVF   FEF,W
05B4E:  CLRF   xE5
05B50:  CLRF   xE4
05B52:  CLRF   xE3
05B54:  MOVWF  xE2
05B56:  MOVFF  3E3,03
05B5A:  MOVFF  3E2,02
05B5E:  CLRF   00
05B60:  CLRF   01
05B62:  MOVF   00,W
05B64:  IORWF  xDD,F
05B66:  MOVF   01,W
05B68:  IORWF  xDE,F
05B6A:  MOVF   02,W
05B6C:  IORWF  xDF,F
05B6E:  MOVF   03,W
05B70:  IORWF  xE0,F
05B72:  MOVLW  03
05B74:  ADDWF  x8B,W
05B76:  MOVWF  FE9
05B78:  MOVLW  00
05B7A:  ADDWFC x8C,W
05B7C:  MOVWF  FEA
05B7E:  MOVF   FEF,W
05B80:  CLRF   xE5
05B82:  CLRF   xE4
05B84:  CLRF   xE3
05B86:  MOVWF  xE2
05B88:  MOVFF  3E4,03
05B8C:  MOVFF  3E3,02
05B90:  MOVFF  3E2,01
05B94:  CLRF   00
05B96:  MOVF   00,W
05B98:  IORWF  xDD,F
05B9A:  MOVF   01,W
05B9C:  IORWF  xDE,F
05B9E:  MOVF   02,W
05BA0:  IORWF  xDF,F
05BA2:  MOVF   03,W
05BA4:  IORWF  xE0,F
05BA6:  MOVLW  04
05BA8:  ADDWF  x8B,W
05BAA:  MOVWF  FE9
05BAC:  MOVLW  00
05BAE:  ADDWFC x8C,W
05BB0:  MOVWF  FEA
05BB2:  MOVF   FEF,W
05BB4:  MOVWF  00
05BB6:  CLRF   01
05BB8:  CLRF   02
05BBA:  CLRF   03
05BBC:  MOVF   00,W
05BBE:  IORWF  xDD,W
05BC0:  MOVWF  x8E
05BC2:  MOVF   01,W
05BC4:  IORWF  xDE,W
05BC6:  MOVWF  x8F
05BC8:  MOVF   02,W
05BCA:  IORWF  xDF,W
05BCC:  MOVWF  x90
05BCE:  MOVF   03,W
05BD0:  IORWF  xE0,W
05BD2:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05BD4:  MOVLW  07
05BD6:  ADDWF  x8B,W
05BD8:  MOVWF  FE9
05BDA:  MOVLW  00
05BDC:  ADDWFC x8C,W
05BDE:  MOVWF  FEA
05BE0:  MOVF   FEF,W
05BE2:  CLRF   xDE
05BE4:  MOVWF  xDD
05BE6:  MOVFF  3DD,3DE
05BEA:  CLRF   xDD
05BEC:  MOVLW  08
05BEE:  ADDWF  x8B,W
05BF0:  MOVWF  FE9
05BF2:  MOVLW  00
05BF4:  ADDWFC x8C,W
05BF6:  MOVWF  FEA
05BF8:  MOVF   FEF,W
05BFA:  CLRF   03
05BFC:  IORWF  xDD,W
05BFE:  MOVWF  x92
05C00:  MOVF   03,W
05C02:  IORWF  xDE,W
05C04:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05C06:  MOVLW  8E
05C08:  MOVWF  FF6
05C0A:  MOVLW  12
05C0C:  MOVWF  FF7
05C0E:  MOVLW  00
05C10:  MOVWF  FF8
05C12:  MOVLW  0C
05C14:  MOVLB  7
05C16:  MOVWF  xEC
05C18:  MOVLB  0
05C1A:  CALL   184E
05C1E:  MOVFF  38D,427
05C22:  MOVLW  37
05C24:  MOVLB  4
05C26:  MOVWF  x28
05C28:  MOVLB  0
05C2A:  CALL   1A10
05C2E:  MOVLW  0D
05C30:  MOVLB  8
05C32:  MOVWF  x2F
05C34:  MOVLB  0
05C36:  CALL   17CC
05C3A:  MOVLW  0A
05C3C:  MOVLB  8
05C3E:  MOVWF  x2F
05C40:  MOVLB  0
05C42:  CALL   17CC
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05C46:  MOVLW  A2
05C48:  MOVWF  FF6
05C4A:  MOVLW  12
05C4C:  MOVWF  FF7
05C4E:  MOVLW  00
05C50:  MOVWF  FF8
05C52:  MOVLW  0E
05C54:  MOVLB  7
05C56:  MOVWF  xEC
05C58:  MOVLB  0
05C5A:  CALL   184E
05C5E:  MOVFF  391,427
05C62:  MOVLW  37
05C64:  MOVLB  4
05C66:  MOVWF  x28
05C68:  MOVLB  0
05C6A:  CALL   1A10
05C6E:  MOVFF  390,427
05C72:  MOVLW  37
05C74:  MOVLB  4
05C76:  MOVWF  x28
05C78:  MOVLB  0
05C7A:  CALL   1A10
05C7E:  MOVFF  38F,427
05C82:  MOVLW  37
05C84:  MOVLB  4
05C86:  MOVWF  x28
05C88:  MOVLB  0
05C8A:  CALL   1A10
05C8E:  MOVFF  38E,427
05C92:  MOVLW  37
05C94:  MOVLB  4
05C96:  MOVWF  x28
05C98:  MOVLB  0
05C9A:  CALL   1A10
05C9E:  MOVLW  0D
05CA0:  MOVLB  8
05CA2:  MOVWF  x2F
05CA4:  MOVLB  0
05CA6:  CALL   17CC
05CAA:  MOVLW  0A
05CAC:  MOVLB  8
05CAE:  MOVWF  x2F
05CB0:  MOVLB  0
05CB2:  CALL   17CC
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05CB6:  MOVLW  B8
05CB8:  MOVWF  FF6
05CBA:  MOVLW  12
05CBC:  MOVWF  FF7
05CBE:  MOVLW  00
05CC0:  MOVWF  FF8
05CC2:  MOVLW  0E
05CC4:  MOVLB  7
05CC6:  MOVWF  xEC
05CC8:  MOVLB  0
05CCA:  CALL   184E
05CCE:  MOVFF  393,427
05CD2:  MOVLW  37
05CD4:  MOVLB  4
05CD6:  MOVWF  x28
05CD8:  MOVLB  0
05CDA:  CALL   1A10
05CDE:  MOVFF  392,427
05CE2:  MOVLW  37
05CE4:  MOVLB  4
05CE6:  MOVWF  x28
05CE8:  MOVLB  0
05CEA:  CALL   1A10
05CEE:  MOVLW  0D
05CF0:  MOVLB  8
05CF2:  MOVWF  x2F
05CF4:  MOVLB  0
05CF6:  CALL   17CC
05CFA:  MOVLW  0A
05CFC:  MOVLB  8
05CFE:  MOVWF  x2F
05D00:  MOVLB  0
05D02:  CALL   17CC
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05D06:  MOVFF  38D,492
05D0A:  MOVLB  4
05D0C:  CLRF   x93
05D0E:  MOVLB  0
05D10:  CALL   38F2
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05D14:  MOVLW  CE
05D16:  MOVWF  FF6
05D18:  MOVLW  12
05D1A:  MOVWF  FF7
05D1C:  MOVLW  00
05D1E:  MOVWF  FF8
05D20:  CALL   181E
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05D24:  MOVLB  3
05D26:  CLRF   xD5
05D28:  CLRF   xD4
05D2A:  MOVLB  0
05D2C:  MOVLB  3
05D2E:  MOVF   xD5,W
05D30:  SUBWF  x93,W
05D32:  BTFSC  FD8.0
05D34:  BRA    5D3C
05D36:  MOVLB  0
05D38:  GOTO   5E6A
05D3C:  MOVLB  0
05D3E:  BTFSS  FD8.2
05D40:  GOTO   5D56
05D44:  MOVLB  3
05D46:  MOVF   x92,W
05D48:  SUBWF  xD4,W
05D4A:  BTFSS  FD8.0
05D4C:  BRA    5D54
05D4E:  MOVLB  0
05D50:  GOTO   5E6A
05D54:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
05D56:  MOVLB  3
05D58:  RLCF   xD4,W
05D5A:  MOVWF  xD6
05D5C:  RLCF   xD5,W
05D5E:  MOVWF  xD7
05D60:  RLCF   xD6,F
05D62:  RLCF   xD7,F
05D64:  RLCF   xD6,F
05D66:  RLCF   xD7,F
05D68:  RLCF   xD6,F
05D6A:  RLCF   xD7,F
05D6C:  RLCF   xD6,F
05D6E:  RLCF   xD7,F
05D70:  RLCF   xD6,F
05D72:  RLCF   xD7,F
05D74:  MOVLW  C0
05D76:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
05D78:  CLRF   xD8
05D7A:  MOVLB  0
05D7C:  MOVLB  3
05D7E:  MOVF   xD8,W
05D80:  SUBLW  3F
05D82:  BTFSC  FD8.0
05D84:  BRA    5D8C
05D86:  MOVLB  0
05D88:  GOTO   5DEC
05D8C:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
05D8E:  CLRF   03
05D90:  MOVLB  3
05D92:  MOVF   xD8,W
05D94:  ADDLW  94
05D96:  MOVWF  FE9
05D98:  MOVLW  03
05D9A:  ADDWFC 03,W
05D9C:  MOVWF  FEA
05D9E:  MOVF   xD8,W
05DA0:  ADDWF  xD6,W
05DA2:  MOVWF  xDF
05DA4:  MOVLW  00
05DA6:  ADDWFC xD7,W
05DA8:  MOVWF  xE0
05DAA:  MOVF   xDF,W
05DAC:  MOVWF  00
05DAE:  CLRF   03
05DB0:  MOVF   00,W
05DB2:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05DB4:  CLRF   03
05DB6:  MOVF   xD8,W
05DB8:  ADDLW  94
05DBA:  MOVWF  FE9
05DBC:  MOVLW  03
05DBE:  ADDWFC 03,W
05DC0:  MOVWF  FEA
05DC2:  MOVFF  FEF,3DD
05DC6:  MOVFF  3DD,427
05DCA:  MOVLW  37
05DCC:  MOVLB  4
05DCE:  MOVWF  x28
05DD0:  MOVLB  0
05DD2:  CALL   1A10
05DD6:  MOVLW  20
05DD8:  MOVLB  8
05DDA:  MOVWF  x2F
05DDC:  MOVLB  0
05DDE:  CALL   17CC
05DE2:  MOVLB  3
05DE4:  INCF   xD8,F
05DE6:  MOVLB  0
05DE8:  GOTO   5D7C
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05DEC:  MOVLB  3
05DEE:  RLCF   xD4,W
05DF0:  MOVWF  02
05DF2:  RLCF   xD5,W
05DF4:  MOVWF  03
05DF6:  RLCF   02,F
05DF8:  RLCF   03,F
05DFA:  RLCF   02,F
05DFC:  RLCF   03,F
05DFE:  RLCF   02,F
05E00:  RLCF   03,F
05E02:  RLCF   02,F
05E04:  RLCF   03,F
05E06:  RLCF   02,F
05E08:  RLCF   03,F
05E0A:  MOVLW  C0
05E0C:  ANDWF  02,F
05E0E:  MOVF   02,W
05E10:  ADDWF  x8E,W
05E12:  MOVWF  xD9
05E14:  MOVF   03,W
05E16:  ADDWFC x8F,W
05E18:  MOVWF  xDA
05E1A:  MOVLW  00
05E1C:  ADDWFC x90,W
05E1E:  MOVWF  xDB
05E20:  MOVLW  00
05E22:  ADDWFC x91,W
05E24:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
05E26:  MOVFF  E1,82F
05E2A:  MOVFF  E0,82E
05E2E:  MOVFF  DF,82D
05E32:  MOVFF  DE,82C
05E36:  MOVFF  3DC,833
05E3A:  MOVFF  3DB,832
05E3E:  MOVFF  3DA,831
05E42:  MOVFF  3D9,830
05E46:  MOVLW  03
05E48:  MOVLB  8
05E4A:  MOVWF  x35
05E4C:  MOVLW  94
05E4E:  MOVWF  x34
05E50:  CLRF   x37
05E52:  MOVLW  40
05E54:  MOVWF  x36
05E56:  MOVLB  0
05E58:  CALL   2F30
05E5C:  MOVLB  3
05E5E:  INCF   xD4,F
05E60:  BTFSC  FD8.2
05E62:  INCF   xD5,F
05E64:  MOVLB  0
05E66:  GOTO   5D2C
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05E6A:  MOVFF  38D,492
05E6E:  MOVLW  02
05E70:  MOVLB  4
05E72:  MOVWF  x93
05E74:  MOVLB  0
05E76:  CALL   38F2
....................    fprintf(PC, "\r\n");
05E7A:  MOVLW  0D
05E7C:  MOVLB  8
05E7E:  MOVWF  x2F
05E80:  MOVLB  0
05E82:  CALL   17CC
05E86:  MOVLW  0A
05E88:  MOVLB  8
05E8A:  MOVWF  x2F
05E8C:  MOVLB  0
05E8E:  CALL   17CC
....................    fprintf(PC, "End Flash Write Demo\r\n");
05E92:  MOVLW  DC
05E94:  MOVWF  FF6
05E96:  MOVLW  12
05E98:  MOVWF  FF7
05E9A:  MOVLW  00
05E9C:  MOVWF  FF8
05E9E:  CALL   181E
05EA2:  GOTO   708E (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05ED6:  MOVLW  F4
05ED8:  MOVWF  FF6
05EDA:  MOVLW  12
05EDC:  MOVWF  FF7
05EDE:  MOVLW  00
05EE0:  MOVWF  FF8
05EE2:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05EE6:  MOVLB  3
05EE8:  MOVF   x8B,W
05EEA:  MOVWF  FE9
05EEC:  MOVF   x8C,W
05EEE:  MOVWF  FEA
05EF0:  MOVFF  FEF,491
05EF4:  MOVFF  491,492
05EF8:  MOVLW  01
05EFA:  MOVLB  4
05EFC:  MOVWF  x93
05EFE:  MOVLB  0
05F00:  CALL   38F2
....................    flash_setting(mis_fm);
05F04:  MOVFF  E1,494
05F08:  MOVFF  E0,493
05F0C:  MOVFF  DF,492
05F10:  MOVFF  DE,491
05F14:  CALL   5EA6
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
05F18:  MOVLB  3
05F1A:  CLRF   x90
05F1C:  CLRF   x8F
05F1E:  CLRF   x8E
05F20:  CLRF   x8D
05F22:  MOVLW  01
05F24:  MOVWF  x91
05F26:  MOVLW  02
05F28:  MOVWF  x92
05F2A:  MOVLW  03
05F2C:  MOVWF  x93
05F2E:  MOVLW  04
05F30:  MOVWF  x94
05F32:  CLRF   x95
05F34:  CLRF   x96
05F36:  CLRF   x97
05F38:  CLRF   x98
05F3A:  CLRF   x99
05F3C:  CLRF   x9A
05F3E:  CLRF   x9B
05F40:  CLRF   x9C
05F42:  CLRF   x9D
05F44:  CLRF   x9E
05F46:  CLRF   x9F
05F48:  CLRF   xA0
05F4A:  CLRF   xA1
05F4C:  CLRF   xA2
05F4E:  CLRF   xA3
05F50:  CLRF   xA4
05F52:  CLRF   xA5
05F54:  CLRF   xA6
05F56:  CLRF   xA7
05F58:  CLRF   xA8
05F5A:  CLRF   xA9
05F5C:  CLRF   xAA
05F5E:  CLRF   xAB
05F60:  CLRF   xAC
05F62:  CLRF   xAD
05F64:  CLRF   xAE
05F66:  CLRF   xAF
05F68:  CLRF   xB0
05F6A:  CLRF   xB1
05F6C:  CLRF   xB2
05F6E:  CLRF   xB3
05F70:  CLRF   xB4
05F72:  CLRF   xB5
05F74:  CLRF   xB6
05F76:  CLRF   xB7
05F78:  CLRF   xB8
05F7A:  CLRF   xB9
05F7C:  CLRF   xBA
05F7E:  CLRF   xBB
05F80:  CLRF   xBC
05F82:  CLRF   xBD
05F84:  CLRF   xBE
05F86:  CLRF   xBF
05F88:  CLRF   xC0
05F8A:  CLRF   xC1
05F8C:  CLRF   xC2
05F8E:  CLRF   xC3
05F90:  CLRF   xC4
05F92:  CLRF   xC5
05F94:  CLRF   xC6
05F96:  CLRF   xC7
05F98:  CLRF   xC8
05F9A:  CLRF   xC9
05F9C:  CLRF   xCA
05F9E:  CLRF   xCB
05FA0:  CLRF   xCC
05FA2:  CLRF   xCD
05FA4:  CLRF   xCE
05FA6:  CLRF   xCF
05FA8:  CLRF   xD0
05FAA:  CLRF   xD1
05FAC:  CLRF   xD2
05FAE:  CLRF   xD3
05FB0:  CLRF   xD4
05FB2:  CLRF   xD5
05FB4:  CLRF   xD6
05FB6:  CLRF   xD7
05FB8:  CLRF   xD8
05FBA:  CLRF   xD9
05FBC:  CLRF   xDA
05FBE:  CLRF   xDB
05FC0:  CLRF   xDC
05FC2:  CLRF   xDD
05FC4:  CLRF   xDE
05FC6:  CLRF   xDF
05FC8:  CLRF   xE0
05FCA:  CLRF   xE1
05FCC:  CLRF   xE2
05FCE:  CLRF   xE3
05FD0:  CLRF   xE4
05FD2:  CLRF   xE5
05FD4:  CLRF   xE6
05FD6:  CLRF   xE7
05FD8:  CLRF   xE8
05FDA:  CLRF   xE9
05FDC:  CLRF   xEA
05FDE:  CLRF   xEB
05FE0:  CLRF   xEC
05FE2:  CLRF   xED
05FE4:  CLRF   xEE
05FE6:  CLRF   xEF
05FE8:  CLRF   xF0
05FEA:  CLRF   xF1
05FEC:  CLRF   xF2
05FEE:  CLRF   xF3
05FF0:  CLRF   xF4
05FF2:  CLRF   xF5
05FF4:  CLRF   xF6
05FF6:  CLRF   xF7
05FF8:  CLRF   xF8
05FFA:  CLRF   xF9
05FFC:  CLRF   xFA
05FFE:  CLRF   xFB
06000:  CLRF   xFC
06002:  CLRF   xFD
06004:  CLRF   xFE
06006:  CLRF   xFF
06008:  MOVLB  4
0600A:  CLRF   x00
0600C:  CLRF   x01
0600E:  CLRF   x02
06010:  CLRF   x03
06012:  CLRF   x04
06014:  CLRF   x05
06016:  CLRF   x06
06018:  CLRF   x07
0601A:  CLRF   x08
0601C:  CLRF   x09
0601E:  CLRF   x0A
06020:  CLRF   x0B
06022:  CLRF   x0C
06024:  CLRF   x0D
06026:  CLRF   x0E
06028:  CLRF   x0F
0602A:  CLRF   x10
0602C:  CLRF   x11
0602E:  CLRF   x12
06030:  CLRF   x13
06032:  CLRF   x14
06034:  CLRF   x15
06036:  CLRF   x16
06038:  CLRF   x17
0603A:  CLRF   x18
0603C:  CLRF   x19
0603E:  CLRF   x1A
06040:  CLRF   x1B
06042:  CLRF   x1C
06044:  CLRF   x1D
06046:  CLRF   x1E
06048:  CLRF   x1F
0604A:  CLRF   x20
0604C:  CLRF   x21
0604E:  CLRF   x22
06050:  CLRF   x23
06052:  CLRF   x24
06054:  CLRF   x25
06056:  CLRF   x26
06058:  CLRF   x27
0605A:  CLRF   x28
0605C:  CLRF   x29
0605E:  CLRF   x2A
06060:  CLRF   x2B
06062:  CLRF   x2C
06064:  CLRF   x2D
06066:  CLRF   x2E
06068:  CLRF   x2F
0606A:  CLRF   x30
0606C:  CLRF   x31
0606E:  CLRF   x32
06070:  CLRF   x33
06072:  CLRF   x34
06074:  CLRF   x35
06076:  CLRF   x36
06078:  CLRF   x37
0607A:  CLRF   x38
0607C:  CLRF   x39
0607E:  CLRF   x3A
06080:  CLRF   x3B
06082:  CLRF   x3C
06084:  CLRF   x3D
06086:  CLRF   x3E
06088:  CLRF   x3F
0608A:  CLRF   x40
0608C:  CLRF   x41
0608E:  CLRF   x42
06090:  CLRF   x43
06092:  CLRF   x44
06094:  CLRF   x45
06096:  CLRF   x46
06098:  CLRF   x47
0609A:  CLRF   x48
0609C:  CLRF   x49
0609E:  CLRF   x4A
060A0:  CLRF   x4B
060A2:  CLRF   x4C
060A4:  CLRF   x4D
060A6:  CLRF   x4E
060A8:  CLRF   x4F
060AA:  CLRF   x50
060AC:  CLRF   x51
060AE:  CLRF   x52
060B0:  CLRF   x53
060B2:  CLRF   x54
060B4:  CLRF   x55
060B6:  CLRF   x56
060B8:  CLRF   x57
060BA:  CLRF   x58
060BC:  CLRF   x59
060BE:  CLRF   x5A
060C0:  CLRF   x5B
060C2:  CLRF   x5C
060C4:  CLRF   x5D
060C6:  CLRF   x5E
060C8:  CLRF   x5F
060CA:  CLRF   x60
060CC:  CLRF   x61
060CE:  CLRF   x62
060D0:  CLRF   x63
060D2:  CLRF   x64
060D4:  CLRF   x65
060D6:  CLRF   x66
060D8:  CLRF   x67
060DA:  CLRF   x68
060DC:  CLRF   x69
060DE:  CLRF   x6A
060E0:  CLRF   x6B
060E2:  CLRF   x6C
060E4:  CLRF   x6D
060E6:  CLRF   x6E
060E8:  CLRF   x6F
060EA:  CLRF   x70
060EC:  CLRF   x71
060EE:  CLRF   x72
060F0:  CLRF   x73
060F2:  CLRF   x74
060F4:  CLRF   x75
060F6:  CLRF   x76
060F8:  CLRF   x77
060FA:  CLRF   x78
060FC:  CLRF   x79
060FE:  CLRF   x7A
06100:  CLRF   x7B
06102:  CLRF   x7C
06104:  CLRF   x7D
06106:  CLRF   x7E
06108:  CLRF   x7F
0610A:  CLRF   x80
0610C:  CLRF   x81
0610E:  CLRF   x82
06110:  CLRF   x83
06112:  CLRF   x84
06114:  CLRF   x85
06116:  CLRF   x86
06118:  CLRF   x87
0611A:  CLRF   x88
0611C:  CLRF   x89
0611E:  CLRF   x8A
06120:  CLRF   x8B
06122:  CLRF   x8C
06124:  CLRF   x8D
06126:  CLRF   x8E
06128:  CLRF   x8F
0612A:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
0612C:  MOVFF  E1,82F
06130:  MOVFF  E0,82E
06134:  MOVFF  DF,82D
06138:  MOVFF  DE,82C
0613C:  MOVFF  390,833
06140:  MOVFF  38F,832
06144:  MOVFF  38E,831
06148:  MOVFF  38D,830
0614C:  MOVLW  03
0614E:  MOVLB  8
06150:  MOVWF  x35
06152:  MOVLW  91
06154:  MOVWF  x34
06156:  MOVLW  01
06158:  MOVWF  x37
0615A:  CLRF   x36
0615C:  MOVLB  0
0615E:  CALL   2F30
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06162:  MOVLB  3
06164:  MOVF   x8B,W
06166:  MOVWF  FE9
06168:  MOVF   x8C,W
0616A:  MOVWF  FEA
0616C:  MOVFF  FEF,491
06170:  MOVFF  491,492
06174:  MOVLW  02
06176:  MOVLB  4
06178:  MOVWF  x93
0617A:  MOVLB  0
0617C:  CALL   38F2
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06180:  MOVLW  1A
06182:  MOVWF  FF6
06184:  MOVLW  13
06186:  MOVWF  FF7
06188:  MOVLW  00
0618A:  MOVWF  FF8
0618C:  CALL   181E
06190:  GOTO   709E (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06194:  MOVLW  3E
06196:  MOVWF  FF6
06198:  MOVLW  13
0619A:  MOVWF  FF7
0619C:  MOVLW  00
0619E:  MOVWF  FF8
061A0:  CALL   181E
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
061A4:  MOVLB  3
061A6:  MOVF   x8B,W
061A8:  MOVWF  FE9
061AA:  MOVF   x8C,W
061AC:  MOVWF  FEA
061AE:  MOVFF  FEF,3DD
061B2:  MOVFF  3DD,492
061B6:  MOVLW  01
061B8:  MOVLB  4
061BA:  MOVWF  x93
061BC:  MOVLB  0
061BE:  CALL   38F2
....................    FLASH_PARAM flash_param = {0};
061C2:  MOVLB  3
061C4:  CLRF   x8D
061C6:  CLRF   x8E
061C8:  CLRF   x8F
061CA:  CLRF   x90
061CC:  CLRF   x91
061CE:  CLRF   x92
061D0:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
061D2:  MOVF   x8B,W
061D4:  MOVWF  FE9
061D6:  MOVF   x8C,W
061D8:  MOVWF  FEA
061DA:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
061DE:  MOVLW  01
061E0:  ADDWF  x8B,W
061E2:  MOVWF  FE9
061E4:  MOVLW  00
061E6:  ADDWFC x8C,W
061E8:  MOVWF  FEA
061EA:  MOVF   FEF,W
061EC:  CLRF   xE0
061EE:  CLRF   xDF
061F0:  CLRF   xDE
061F2:  MOVWF  xDD
061F4:  MOVFF  3DD,3E0
061F8:  CLRF   xDD
061FA:  CLRF   xDE
061FC:  CLRF   xDF
061FE:  MOVLW  02
06200:  ADDWF  x8B,W
06202:  MOVWF  FE9
06204:  MOVLW  00
06206:  ADDWFC x8C,W
06208:  MOVWF  FEA
0620A:  MOVF   FEF,W
0620C:  CLRF   xE5
0620E:  CLRF   xE4
06210:  CLRF   xE3
06212:  MOVWF  xE2
06214:  MOVFF  3E3,03
06218:  MOVFF  3E2,02
0621C:  CLRF   00
0621E:  CLRF   01
06220:  MOVF   00,W
06222:  IORWF  xDD,F
06224:  MOVF   01,W
06226:  IORWF  xDE,F
06228:  MOVF   02,W
0622A:  IORWF  xDF,F
0622C:  MOVF   03,W
0622E:  IORWF  xE0,F
06230:  MOVLW  03
06232:  ADDWF  x8B,W
06234:  MOVWF  FE9
06236:  MOVLW  00
06238:  ADDWFC x8C,W
0623A:  MOVWF  FEA
0623C:  MOVF   FEF,W
0623E:  CLRF   xE5
06240:  CLRF   xE4
06242:  CLRF   xE3
06244:  MOVWF  xE2
06246:  MOVFF  3E4,03
0624A:  MOVFF  3E3,02
0624E:  MOVFF  3E2,01
06252:  CLRF   00
06254:  MOVF   00,W
06256:  IORWF  xDD,F
06258:  MOVF   01,W
0625A:  IORWF  xDE,F
0625C:  MOVF   02,W
0625E:  IORWF  xDF,F
06260:  MOVF   03,W
06262:  IORWF  xE0,F
06264:  MOVLW  04
06266:  ADDWF  x8B,W
06268:  MOVWF  FE9
0626A:  MOVLW  00
0626C:  ADDWFC x8C,W
0626E:  MOVWF  FEA
06270:  MOVF   FEF,W
06272:  MOVWF  00
06274:  CLRF   01
06276:  CLRF   02
06278:  CLRF   03
0627A:  MOVF   00,W
0627C:  IORWF  xDD,W
0627E:  MOVWF  x90
06280:  MOVF   01,W
06282:  IORWF  xDE,W
06284:  MOVWF  x91
06286:  MOVF   02,W
06288:  IORWF  xDF,W
0628A:  MOVWF  x92
0628C:  MOVF   03,W
0628E:  IORWF  xE0,W
06290:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
06292:  MOVLW  07
06294:  ADDWF  x8B,W
06296:  MOVWF  FE9
06298:  MOVLW  00
0629A:  ADDWFC x8C,W
0629C:  MOVWF  FEA
0629E:  MOVF   FEF,W
062A0:  CLRF   xDE
062A2:  MOVWF  xDD
062A4:  MOVFF  3DD,3DE
062A8:  CLRF   xDD
062AA:  MOVLW  08
062AC:  ADDWF  x8B,W
062AE:  MOVWF  FE9
062B0:  MOVLW  00
062B2:  ADDWFC x8C,W
062B4:  MOVWF  FEA
062B6:  MOVF   FEF,W
062B8:  CLRF   03
062BA:  IORWF  xDD,W
062BC:  MOVWF  x8E
062BE:  MOVF   03,W
062C0:  IORWF  xDE,W
062C2:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
062C4:  MOVLW  52
062C6:  MOVWF  FF6
062C8:  MOVLW  13
062CA:  MOVWF  FF7
062CC:  MOVLW  00
062CE:  MOVWF  FF8
062D0:  MOVLW  0C
062D2:  MOVLB  7
062D4:  MOVWF  xEC
062D6:  MOVLB  0
062D8:  CALL   184E
062DC:  MOVFF  38D,427
062E0:  MOVLW  37
062E2:  MOVLB  4
062E4:  MOVWF  x28
062E6:  MOVLB  0
062E8:  CALL   1A10
062EC:  MOVLW  0D
062EE:  MOVLB  8
062F0:  MOVWF  x2F
062F2:  MOVLB  0
062F4:  CALL   17CC
062F8:  MOVLW  0A
062FA:  MOVLB  8
062FC:  MOVWF  x2F
062FE:  MOVLB  0
06300:  CALL   17CC
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06304:  MOVLW  66
06306:  MOVWF  FF6
06308:  MOVLW  13
0630A:  MOVWF  FF7
0630C:  MOVLW  00
0630E:  MOVWF  FF8
06310:  MOVLW  0E
06312:  MOVLB  7
06314:  MOVWF  xEC
06316:  MOVLB  0
06318:  CALL   184E
0631C:  MOVFF  393,427
06320:  MOVLW  37
06322:  MOVLB  4
06324:  MOVWF  x28
06326:  MOVLB  0
06328:  CALL   1A10
0632C:  MOVFF  392,427
06330:  MOVLW  37
06332:  MOVLB  4
06334:  MOVWF  x28
06336:  MOVLB  0
06338:  CALL   1A10
0633C:  MOVFF  391,427
06340:  MOVLW  37
06342:  MOVLB  4
06344:  MOVWF  x28
06346:  MOVLB  0
06348:  CALL   1A10
0634C:  MOVFF  390,427
06350:  MOVLW  37
06352:  MOVLB  4
06354:  MOVWF  x28
06356:  MOVLB  0
06358:  CALL   1A10
0635C:  MOVLW  0D
0635E:  MOVLB  8
06360:  MOVWF  x2F
06362:  MOVLB  0
06364:  CALL   17CC
06368:  MOVLW  0A
0636A:  MOVLB  8
0636C:  MOVWF  x2F
0636E:  MOVLB  0
06370:  CALL   17CC
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06374:  MOVLW  7C
06376:  MOVWF  FF6
06378:  MOVLW  13
0637A:  MOVWF  FF7
0637C:  MOVLW  00
0637E:  MOVWF  FF8
06380:  MOVLW  0E
06382:  MOVLB  7
06384:  MOVWF  xEC
06386:  MOVLB  0
06388:  CALL   184E
0638C:  MOVFF  38F,427
06390:  MOVLW  37
06392:  MOVLB  4
06394:  MOVWF  x28
06396:  MOVLB  0
06398:  CALL   1A10
0639C:  MOVFF  38E,427
063A0:  MOVLW  37
063A2:  MOVLB  4
063A4:  MOVWF  x28
063A6:  MOVLB  0
063A8:  CALL   1A10
063AC:  MOVLW  0D
063AE:  MOVLB  8
063B0:  MOVWF  x2F
063B2:  MOVLB  0
063B4:  CALL   17CC
063B8:  MOVLW  0A
063BA:  MOVLB  8
063BC:  MOVWF  x2F
063BE:  MOVLB  0
063C0:  CALL   17CC
....................    
....................    piclog_make(flash_param.id, 0x00);
063C4:  MOVFF  38D,492
063C8:  MOVLB  4
063CA:  CLRF   x93
063CC:  MOVLB  0
063CE:  CALL   38F2
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
063D2:  MOVLB  3
063D4:  CLRF   x94
063D6:  CLRF   x95
063D8:  CLRF   x96
063DA:  CLRF   x97
063DC:  CLRF   x98
063DE:  CLRF   x99
063E0:  CLRF   x9A
063E2:  CLRF   x9B
063E4:  CLRF   x9C
063E6:  CLRF   x9D
063E8:  CLRF   x9E
063EA:  CLRF   x9F
063EC:  CLRF   xA0
063EE:  CLRF   xA1
063F0:  CLRF   xA2
063F2:  CLRF   xA3
063F4:  CLRF   xA4
063F6:  CLRF   xA5
063F8:  CLRF   xA6
063FA:  CLRF   xA7
063FC:  CLRF   xA8
063FE:  CLRF   xA9
06400:  CLRF   xAA
06402:  CLRF   xAB
06404:  CLRF   xAC
06406:  CLRF   xAD
06408:  CLRF   xAE
0640A:  CLRF   xAF
0640C:  CLRF   xB0
0640E:  CLRF   xB1
06410:  CLRF   xB2
06412:  CLRF   xB3
06414:  CLRF   xB4
06416:  CLRF   xB5
06418:  CLRF   xB6
0641A:  CLRF   xB7
0641C:  CLRF   xB8
0641E:  CLRF   xB9
06420:  CLRF   xBA
06422:  CLRF   xBB
06424:  CLRF   xBC
06426:  CLRF   xBD
06428:  CLRF   xBE
0642A:  CLRF   xBF
0642C:  CLRF   xC0
0642E:  CLRF   xC1
06430:  CLRF   xC2
06432:  CLRF   xC3
06434:  CLRF   xC4
06436:  CLRF   xC5
06438:  CLRF   xC6
0643A:  CLRF   xC7
0643C:  CLRF   xC8
0643E:  CLRF   xC9
06440:  CLRF   xCA
06442:  CLRF   xCB
06444:  CLRF   xCC
06446:  CLRF   xCD
06448:  CLRF   xCE
0644A:  CLRF   xCF
0644C:  CLRF   xD0
0644E:  CLRF   xD1
06450:  CLRF   xD2
06452:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06454:  MOVLW  92
06456:  MOVWF  FF6
06458:  MOVLW  13
0645A:  MOVWF  FF7
0645C:  MOVLW  00
0645E:  MOVWF  FF8
06460:  MOVLB  0
06462:  CALL   181E
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06466:  MOVFF  E1,82F
0646A:  MOVFF  E0,82E
0646E:  MOVFF  DF,82D
06472:  MOVFF  DE,82C
06476:  CALL   1E4C
0647A:  MOVF   01,F
0647C:  BTFSS  FD8.2
0647E:  GOTO   6492
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06482:  MOVLW  9E
06484:  MOVWF  FF6
06486:  MOVLW  13
06488:  MOVWF  FF7
0648A:  MOVLW  00
0648C:  MOVWF  FF8
0648E:  CALL   181E
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06492:  MOVLB  3
06494:  CLRF   xDB
06496:  CLRF   xDA
06498:  CLRF   xD9
0649A:  CLRF   xD8
0649C:  MOVLB  0
0649E:  MOVLB  3
064A0:  MOVF   xDB,F
064A2:  BTFSC  FD8.2
064A4:  BRA    64AC
064A6:  MOVLB  0
064A8:  GOTO   65FA
064AC:  MOVLB  0
064AE:  MOVLB  3
064B0:  MOVF   xDA,F
064B2:  BTFSC  FD8.2
064B4:  BRA    64BC
064B6:  MOVLB  0
064B8:  GOTO   65FA
064BC:  MOVLB  0
064BE:  MOVLB  3
064C0:  MOVF   xD9,W
064C2:  SUBWF  x8F,W
064C4:  BTFSC  FD8.0
064C6:  BRA    64CE
064C8:  MOVLB  0
064CA:  GOTO   65FA
064CE:  MOVLB  0
064D0:  BTFSS  FD8.2
064D2:  GOTO   64E8
064D6:  MOVLB  3
064D8:  MOVF   x8E,W
064DA:  SUBWF  xD8,W
064DC:  BTFSS  FD8.0
064DE:  BRA    64E6
064E0:  MOVLB  0
064E2:  GOTO   65FA
064E6:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
064E8:  MOVLB  3
064EA:  RLCF   xD8,W
064EC:  MOVWF  00
064EE:  RLCF   xD9,W
064F0:  MOVWF  01
064F2:  RLCF   xDA,W
064F4:  MOVWF  02
064F6:  RLCF   xDB,W
064F8:  MOVWF  03
064FA:  RLCF   00,F
064FC:  RLCF   01,F
064FE:  RLCF   02,F
06500:  RLCF   03,F
06502:  RLCF   00,F
06504:  RLCF   01,F
06506:  RLCF   02,F
06508:  RLCF   03,F
0650A:  RLCF   00,F
0650C:  RLCF   01,F
0650E:  RLCF   02,F
06510:  RLCF   03,F
06512:  RLCF   00,F
06514:  RLCF   01,F
06516:  RLCF   02,F
06518:  RLCF   03,F
0651A:  RLCF   00,F
0651C:  RLCF   01,F
0651E:  RLCF   02,F
06520:  RLCF   03,F
06522:  MOVLW  C0
06524:  ANDWF  00,F
06526:  MOVF   00,W
06528:  ADDWF  x90,W
0652A:  MOVWF  xD4
0652C:  MOVF   01,W
0652E:  ADDWFC x91,W
06530:  MOVWF  xD5
06532:  MOVF   02,W
06534:  ADDWFC x92,W
06536:  MOVWF  xD6
06538:  MOVF   03,W
0653A:  ADDWFC x93,W
0653C:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
0653E:  MOVFF  E1,429
06542:  MOVFF  E0,428
06546:  MOVFF  DF,427
0654A:  MOVFF  DE,426
0654E:  MOVFF  3D7,42D
06552:  MOVFF  3D6,42C
06556:  MOVFF  3D5,42B
0655A:  MOVFF  3D4,42A
0655E:  MOVLW  03
06560:  MOVLB  4
06562:  MOVWF  x2F
06564:  MOVLW  94
06566:  MOVWF  x2E
06568:  CLRF   x33
0656A:  CLRF   x32
0656C:  CLRF   x31
0656E:  MOVLW  40
06570:  MOVWF  x30
06572:  MOVLB  0
06574:  CALL   1F0A
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06578:  MOVLB  3
0657A:  CLRF   xDC
0657C:  MOVLB  0
0657E:  MOVLB  3
06580:  MOVF   xDC,W
06582:  SUBLW  3F
06584:  BTFSC  FD8.0
06586:  BRA    658E
06588:  MOVLB  0
0658A:  GOTO   65CA
0658E:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06590:  CLRF   03
06592:  MOVLB  3
06594:  MOVF   xDC,W
06596:  ADDLW  94
06598:  MOVWF  FE9
0659A:  MOVLW  03
0659C:  ADDWFC 03,W
0659E:  MOVWF  FEA
065A0:  MOVFF  FEF,3DD
065A4:  MOVFF  3DD,427
065A8:  MOVLW  37
065AA:  MOVLB  4
065AC:  MOVWF  x28
065AE:  MOVLB  0
065B0:  CALL   1A10
065B4:  MOVLW  20
065B6:  MOVLB  8
065B8:  MOVWF  x2F
065BA:  MOVLB  0
065BC:  CALL   17CC
065C0:  MOVLB  3
065C2:  INCF   xDC,F
065C4:  MOVLB  0
065C6:  GOTO   657E
....................       }
....................       fprintf(PC,"\r\n");
065CA:  MOVLW  0D
065CC:  MOVLB  8
065CE:  MOVWF  x2F
065D0:  MOVLB  0
065D2:  CALL   17CC
065D6:  MOVLW  0A
065D8:  MOVLB  8
065DA:  MOVWF  x2F
065DC:  MOVLB  0
065DE:  CALL   17CC
065E2:  MOVLW  01
065E4:  MOVLB  3
065E6:  ADDWF  xD8,F
065E8:  BTFSC  FD8.0
065EA:  INCF   xD9,F
065EC:  BTFSC  FD8.2
065EE:  INCF   xDA,F
065F0:  BTFSC  FD8.2
065F2:  INCF   xDB,F
065F4:  MOVLB  0
065F6:  GOTO   649E
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
065FA:  MOVFF  38D,492
065FE:  MOVLW  02
06600:  MOVLB  4
06602:  MOVWF  x93
06604:  MOVLB  0
06606:  CALL   38F2
....................    fprintf(PC, "End Flash Read\r\n");
0660A:  MOVLW  C0
0660C:  MOVWF  FF6
0660E:  MOVLW  13
06610:  MOVWF  FF7
06612:  MOVLW  00
06614:  MOVWF  FF8
06616:  CALL   181E
0661A:  GOTO   70AE (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
0661E:  MOVLW  D2
06620:  MOVWF  FF6
06622:  MOVLW  13
06624:  MOVWF  FF7
06626:  MOVLW  00
06628:  MOVWF  FF8
0662A:  CALL   181E
....................    flash_setting(mis_fm);
0662E:  MOVFF  E1,494
06632:  MOVFF  E0,493
06636:  MOVFF  DF,492
0663A:  MOVFF  DE,491
0663E:  CALL   5EA6
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06642:  MOVLB  3
06644:  CLRF   x90
06646:  CLRF   x8F
06648:  CLRF   x8E
0664A:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
0664C:  MOVFF  E1,429
06650:  MOVFF  E0,428
06654:  MOVFF  DF,427
06658:  MOVFF  DE,426
0665C:  MOVFF  390,42D
06660:  MOVFF  38F,42C
06664:  MOVFF  38E,42B
06668:  MOVFF  38D,42A
0666C:  MOVLW  03
0666E:  MOVLB  4
06670:  MOVWF  x2F
06672:  MOVLW  91
06674:  MOVWF  x2E
06676:  CLRF   x33
06678:  CLRF   x32
0667A:  CLRF   x31
0667C:  MOVLW  04
0667E:  MOVWF  x30
06680:  MOVLB  0
06682:  CALL   1F0A
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06686:  MOVLW  EE
06688:  MOVWF  FF6
0668A:  MOVLW  13
0668C:  MOVWF  FF7
0668E:  MOVLW  00
06690:  MOVWF  FF8
06692:  MOVLW  0B
06694:  MOVLB  7
06696:  MOVWF  xEC
06698:  MOVLB  0
0669A:  CALL   184E
0669E:  MOVFF  391,427
066A2:  MOVLW  37
066A4:  MOVLB  4
066A6:  MOVWF  x28
066A8:  MOVLB  0
066AA:  CALL   1A10
066AE:  MOVLW  20
066B0:  MOVLB  8
066B2:  MOVWF  x2F
066B4:  MOVLB  0
066B6:  CALL   17CC
066BA:  MOVFF  392,427
066BE:  MOVLW  37
066C0:  MOVLB  4
066C2:  MOVWF  x28
066C4:  MOVLB  0
066C6:  CALL   1A10
066CA:  MOVLW  20
066CC:  MOVLB  8
066CE:  MOVWF  x2F
066D0:  MOVLB  0
066D2:  CALL   17CC
066D6:  MOVFF  393,427
066DA:  MOVLW  37
066DC:  MOVLB  4
066DE:  MOVWF  x28
066E0:  MOVLB  0
066E2:  CALL   1A10
066E6:  MOVLW  20
066E8:  MOVLB  8
066EA:  MOVWF  x2F
066EC:  MOVLB  0
066EE:  CALL   17CC
066F2:  MOVFF  394,427
066F6:  MOVLW  37
066F8:  MOVLB  4
066FA:  MOVWF  x28
066FC:  MOVLB  0
066FE:  CALL   1A10
06702:  MOVLW  0D
06704:  MOVLB  8
06706:  MOVWF  x2F
06708:  MOVLB  0
0670A:  CALL   17CC
0670E:  MOVLW  0A
06710:  MOVLB  8
06712:  MOVWF  x2F
06714:  MOVLB  0
06716:  CALL   17CC
....................    fprintf(PC, "End Flash Read Address\r\n");
0671A:  MOVLW  10
0671C:  MOVWF  FF6
0671E:  MOVLW  14
06720:  MOVWF  FF7
06722:  MOVLW  00
06724:  MOVWF  FF8
06726:  CALL   181E
0672A:  GOTO   70BE (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06842:  MOVLW  2A
06844:  MOVWF  FF6
06846:  MOVLW  14
06848:  MOVWF  FF7
0684A:  MOVLW  00
0684C:  MOVWF  FF8
0684E:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06852:  MOVLB  3
06854:  MOVF   x8B,W
06856:  MOVWF  FE9
06858:  MOVF   x8C,W
0685A:  MOVWF  FEA
0685C:  MOVFF  FEF,38D
06860:  MOVFF  38D,492
06864:  MOVLW  01
06866:  MOVLB  4
06868:  MOVWF  x93
0686A:  MOVLB  0
0686C:  CALL   38F2
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
06870:  MOVFF  38C,38E
06874:  MOVFF  38B,38D
06878:  CALL   5568
....................    mode_misf_address_reset(parameter); // Reset the address area
0687C:  MOVFF  38C,38E
06880:  MOVFF  38B,38D
06884:  GOTO   672E
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
06888:  MOVLW  48
0688A:  MOVWF  FF6
0688C:  MOVLW  14
0688E:  MOVWF  FF7
06890:  MOVLW  00
06892:  MOVWF  FF8
06894:  CALL   181E
06898:  GOTO   70CE (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
....................    flash_setting(mis_fm);
....................    flash_setting(smf);
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
....................    write_data_bytes(smf, dest_address, read_data, 256);
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
....................    flash_setting(smf);
....................    unsigned int32 erase_address = 0x00000000; // Example address
....................    sector_erase(smf, erase_address); // Erase the sector
....................    fprintf(PC, "End Flash SMF Erase\r\n");
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
0672E:  MOVLW  32
06730:  MOVWF  FF6
06732:  MOVLW  15
06734:  MOVWF  FF7
06736:  MOVLW  00
06738:  MOVWF  FF8
0673A:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0673E:  MOVLB  3
06740:  MOVF   x8D,W
06742:  MOVWF  FE9
06744:  MOVF   x8E,W
06746:  MOVWF  FEA
06748:  MOVFF  FEF,3CF
0674C:  MOVFF  3CF,492
06750:  MOVLW  01
06752:  MOVLB  4
06754:  MOVWF  x93
06756:  MOVLB  0
06758:  CALL   38F2
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
0675C:  MOVLB  3
0675E:  CLRF   x8F
06760:  CLRF   x90
06762:  CLRF   x91
06764:  CLRF   x92
06766:  CLRF   x93
06768:  CLRF   x94
0676A:  CLRF   x95
0676C:  CLRF   x96
0676E:  CLRF   x97
06770:  CLRF   x98
06772:  CLRF   x99
06774:  CLRF   x9A
06776:  CLRF   x9B
06778:  CLRF   x9C
0677A:  CLRF   x9D
0677C:  CLRF   x9E
0677E:  CLRF   x9F
06780:  CLRF   xA0
06782:  CLRF   xA1
06784:  CLRF   xA2
06786:  CLRF   xA3
06788:  CLRF   xA4
0678A:  CLRF   xA5
0678C:  CLRF   xA6
0678E:  CLRF   xA7
06790:  CLRF   xA8
06792:  CLRF   xA9
06794:  CLRF   xAA
06796:  CLRF   xAB
06798:  CLRF   xAC
0679A:  CLRF   xAD
0679C:  CLRF   xAE
0679E:  CLRF   xAF
067A0:  CLRF   xB0
067A2:  CLRF   xB1
067A4:  CLRF   xB2
067A6:  CLRF   xB3
067A8:  CLRF   xB4
067AA:  CLRF   xB5
067AC:  CLRF   xB6
067AE:  CLRF   xB7
067B0:  CLRF   xB8
067B2:  CLRF   xB9
067B4:  CLRF   xBA
067B6:  CLRF   xBB
067B8:  CLRF   xBC
067BA:  CLRF   xBD
067BC:  CLRF   xBE
067BE:  CLRF   xBF
067C0:  CLRF   xC0
067C2:  CLRF   xC1
067C4:  CLRF   xC2
067C6:  CLRF   xC3
067C8:  CLRF   xC4
067CA:  CLRF   xC5
067CC:  CLRF   xC6
067CE:  CLRF   xC7
067D0:  CLRF   xC8
067D2:  CLRF   xC9
067D4:  CLRF   xCA
067D6:  CLRF   xCB
067D8:  CLRF   xCC
067DA:  CLRF   xCD
067DC:  CLRF   xCE
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
067DE:  MOVFF  E1,82F
067E2:  MOVFF  E0,82E
067E6:  MOVFF  DF,82D
067EA:  MOVFF  DE,82C
067EE:  MOVLB  8
067F0:  CLRF   x33
067F2:  CLRF   x32
067F4:  CLRF   x31
067F6:  CLRF   x30
067F8:  MOVLW  03
067FA:  MOVWF  x35
067FC:  MOVLW  8F
067FE:  MOVWF  x34
06800:  CLRF   x37
06802:  MOVLW  40
06804:  MOVWF  x36
06806:  MOVLB  0
06808:  CALL   2F30
....................    misf_init(); // Update the address area after writing
0680C:  CALL   2122
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06810:  MOVLB  3
06812:  MOVF   x8D,W
06814:  MOVWF  FE9
06816:  MOVF   x8E,W
06818:  MOVWF  FEA
0681A:  MOVFF  FEF,3CF
0681E:  MOVFF  3CF,492
06822:  MOVLW  02
06824:  MOVLB  4
06826:  MOVWF  x93
06828:  MOVLB  0
0682A:  CALL   38F2
....................    fprintf(PC, "End Flash Address Reset\r\n");
0682E:  MOVLW  4E
06830:  MOVWF  FF6
06832:  MOVLW  15
06834:  MOVWF  FF7
06836:  MOVLW  00
06838:  MOVWF  FF8
0683A:  CALL   181E
0683E:  GOTO   6888 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
0689C:  MOVLW  01
0689E:  MOVLB  3
068A0:  ADDWF  x8B,W
068A2:  MOVWF  FE9
068A4:  MOVLW  00
068A6:  ADDWFC x8C,W
068A8:  MOVWF  FEA
068AA:  MOVF   FEF,W
068AC:  CLRF   xDD
068AE:  CLRF   xDC
068B0:  CLRF   xDB
068B2:  MOVWF  xDA
068B4:  MOVFF  3DA,3DD
068B8:  CLRF   xDA
068BA:  CLRF   xDB
068BC:  CLRF   xDC
068BE:  MOVLW  02
068C0:  ADDWF  x8B,W
068C2:  MOVWF  FE9
068C4:  MOVLW  00
068C6:  ADDWFC x8C,W
068C8:  MOVWF  FEA
068CA:  MOVF   FEF,W
068CC:  CLRF   xE2
068CE:  CLRF   xE1
068D0:  CLRF   xE0
068D2:  MOVWF  xDF
068D4:  MOVFF  3E0,03
068D8:  MOVFF  3DF,02
068DC:  CLRF   00
068DE:  CLRF   01
068E0:  MOVF   00,W
068E2:  IORWF  xDA,F
068E4:  MOVF   01,W
068E6:  IORWF  xDB,F
068E8:  MOVF   02,W
068EA:  IORWF  xDC,F
068EC:  MOVF   03,W
068EE:  IORWF  xDD,F
068F0:  MOVLW  03
068F2:  ADDWF  x8B,W
068F4:  MOVWF  FE9
068F6:  MOVLW  00
068F8:  ADDWFC x8C,W
068FA:  MOVWF  FEA
068FC:  MOVF   FEF,W
068FE:  CLRF   xE2
06900:  CLRF   xE1
06902:  CLRF   xE0
06904:  MOVWF  xDF
06906:  MOVFF  3E1,03
0690A:  MOVFF  3E0,02
0690E:  MOVFF  3DF,01
06912:  CLRF   00
06914:  MOVF   00,W
06916:  IORWF  xDA,F
06918:  MOVF   01,W
0691A:  IORWF  xDB,F
0691C:  MOVF   02,W
0691E:  IORWF  xDC,F
06920:  MOVF   03,W
06922:  IORWF  xDD,F
06924:  MOVLW  04
06926:  ADDWF  x8B,W
06928:  MOVWF  FE9
0692A:  MOVLW  00
0692C:  ADDWFC x8C,W
0692E:  MOVWF  FEA
06930:  MOVF   FEF,W
06932:  MOVWF  00
06934:  CLRF   01
06936:  CLRF   02
06938:  CLRF   03
0693A:  MOVF   00,W
0693C:  IORWF  xDA,W
0693E:  MOVWF  x8D
06940:  MOVF   01,W
06942:  IORWF  xDB,W
06944:  MOVWF  x8E
06946:  MOVF   02,W
06948:  IORWF  xDC,W
0694A:  MOVWF  x8F
0694C:  MOVF   03,W
0694E:  IORWF  xDD,W
06950:  MOVWF  x90
06952:  MOVLW  07
06954:  ADDWF  x8B,W
06956:  MOVWF  FE9
06958:  MOVLW  00
0695A:  ADDWFC x8C,W
0695C:  MOVWF  FEA
0695E:  MOVF   FEF,W
06960:  CLRF   xDB
06962:  MOVWF  xDA
06964:  MOVFF  3DA,3DB
06968:  CLRF   xDA
0696A:  MOVLW  08
0696C:  ADDWF  x8B,W
0696E:  MOVWF  FE9
06970:  MOVLW  00
06972:  ADDWFC x8C,W
06974:  MOVWF  FEA
06976:  MOVF   FEF,W
06978:  CLRF   03
0697A:  IORWF  xDA,W
0697C:  MOVWF  x91
0697E:  MOVF   03,W
06980:  IORWF  xDB,W
06982:  MOVWF  x92
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06984:  CLRF   x93
06986:  CLRF   x94
06988:  CLRF   x95
0698A:  CLRF   x96
0698C:  CLRF   x97
0698E:  CLRF   x98
06990:  CLRF   x99
06992:  CLRF   x9A
06994:  CLRF   x9B
06996:  CLRF   x9C
06998:  CLRF   x9D
0699A:  CLRF   x9E
0699C:  CLRF   x9F
0699E:  CLRF   xA0
069A0:  CLRF   xA1
069A2:  CLRF   xA2
069A4:  CLRF   xA3
069A6:  CLRF   xA4
069A8:  CLRF   xA5
069AA:  CLRF   xA6
069AC:  CLRF   xA7
069AE:  CLRF   xA8
069B0:  CLRF   xA9
069B2:  CLRF   xAA
069B4:  CLRF   xAB
069B6:  CLRF   xAC
069B8:  CLRF   xAD
069BA:  CLRF   xAE
069BC:  CLRF   xAF
069BE:  CLRF   xB0
069C0:  CLRF   xB1
069C2:  CLRF   xB2
069C4:  CLRF   xB3
069C6:  CLRF   xB4
069C8:  CLRF   xB5
069CA:  CLRF   xB6
069CC:  CLRF   xB7
069CE:  CLRF   xB8
069D0:  CLRF   xB9
069D2:  CLRF   xBA
069D4:  CLRF   xBB
069D6:  CLRF   xBC
069D8:  CLRF   xBD
069DA:  CLRF   xBE
069DC:  CLRF   xBF
069DE:  CLRF   xC0
069E0:  CLRF   xC1
069E2:  CLRF   xC2
069E4:  CLRF   xC3
069E6:  CLRF   xC4
069E8:  CLRF   xC5
069EA:  CLRF   xC6
069EC:  CLRF   xC7
069EE:  CLRF   xC8
069F0:  CLRF   xC9
069F2:  CLRF   xCA
069F4:  CLRF   xCB
069F6:  CLRF   xCC
069F8:  CLRF   xCD
069FA:  CLRF   xCE
069FC:  CLRF   xCF
069FE:  CLRF   xD0
06A00:  CLRF   xD1
06A02:  CLRF   xD2
....................    
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
06A04:  MOVLW  68
06A06:  MOVWF  FF6
06A08:  MOVLW  15
06A0A:  MOVWF  FF7
06A0C:  MOVLW  00
06A0E:  MOVWF  FF8
06A10:  MOVLB  0
06A12:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A16:  MOVLB  3
06A18:  MOVF   x8B,W
06A1A:  MOVWF  FE9
06A1C:  MOVF   x8C,W
06A1E:  MOVWF  FEA
06A20:  MOVFF  FEF,3DA
06A24:  MOVFF  3DA,492
06A28:  MOVLW  01
06A2A:  MOVLB  4
06A2C:  MOVWF  x93
06A2E:  MOVLB  0
06A30:  CALL   38F2
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
06A34:  MOVLW  86
06A36:  MOVWF  FF6
06A38:  MOVLW  15
06A3A:  MOVWF  FF7
06A3C:  MOVLW  00
06A3E:  MOVWF  FF8
06A40:  MOVLW  0E
06A42:  MOVLB  7
06A44:  MOVWF  xEC
06A46:  MOVLB  0
06A48:  CALL   184E
06A4C:  MOVFF  390,427
06A50:  MOVLW  37
06A52:  MOVLB  4
06A54:  MOVWF  x28
06A56:  MOVLB  0
06A58:  CALL   1A10
06A5C:  MOVFF  38F,427
06A60:  MOVLW  37
06A62:  MOVLB  4
06A64:  MOVWF  x28
06A66:  MOVLB  0
06A68:  CALL   1A10
06A6C:  MOVFF  38E,427
06A70:  MOVLW  37
06A72:  MOVLB  4
06A74:  MOVWF  x28
06A76:  MOVLB  0
06A78:  CALL   1A10
06A7C:  MOVFF  38D,427
06A80:  MOVLW  37
06A82:  MOVLB  4
06A84:  MOVWF  x28
06A86:  MOVLB  0
06A88:  CALL   1A10
06A8C:  MOVLW  0D
06A8E:  MOVLB  8
06A90:  MOVWF  x2F
06A92:  MOVLB  0
06A94:  CALL   17CC
06A98:  MOVLW  0A
06A9A:  MOVLB  8
06A9C:  MOVWF  x2F
06A9E:  MOVLB  0
06AA0:  CALL   17CC
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
06AA4:  MOVLW  9C
06AA6:  MOVWF  FF6
06AA8:  MOVLW  15
06AAA:  MOVWF  FF7
06AAC:  MOVLW  00
06AAE:  MOVWF  FF8
06AB0:  MOVLW  0E
06AB2:  MOVLB  7
06AB4:  MOVWF  xEC
06AB6:  MOVLB  0
06AB8:  CALL   184E
06ABC:  MOVFF  392,427
06AC0:  MOVLW  37
06AC2:  MOVLB  4
06AC4:  MOVWF  x28
06AC6:  MOVLB  0
06AC8:  CALL   1A10
06ACC:  MOVFF  391,427
06AD0:  MOVLW  37
06AD2:  MOVLB  4
06AD4:  MOVWF  x28
06AD6:  MOVLB  0
06AD8:  CALL   1A10
06ADC:  MOVLW  0D
06ADE:  MOVLB  8
06AE0:  MOVWF  x2F
06AE2:  MOVLB  0
06AE4:  CALL   17CC
06AE8:  MOVLW  0A
06AEA:  MOVLB  8
06AEC:  MOVWF  x2F
06AEE:  MOVLB  0
06AF0:  CALL   17CC
....................    fprintf(PC, "read data\r\n");
06AF4:  MOVLW  B2
06AF6:  MOVWF  FF6
06AF8:  MOVLW  15
06AFA:  MOVWF  FF7
06AFC:  MOVLW  00
06AFE:  MOVWF  FF8
06B00:  CALL   181E
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
06B04:  MOVLB  3
06B06:  CLRF   xD4
06B08:  CLRF   xD3
06B0A:  MOVLB  0
06B0C:  MOVLB  3
06B0E:  MOVF   xD4,W
06B10:  SUBWF  x92,W
06B12:  BTFSC  FD8.0
06B14:  BRA    6B1C
06B16:  MOVLB  0
06B18:  GOTO   6C24
06B1C:  MOVLB  0
06B1E:  BTFSS  FD8.2
06B20:  GOTO   6B36
06B24:  MOVLB  3
06B26:  MOVF   x91,W
06B28:  SUBWF  xD3,W
06B2A:  BTFSS  FD8.0
06B2C:  BRA    6B34
06B2E:  MOVLB  0
06B30:  GOTO   6C24
06B34:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
06B36:  MOVLB  3
06B38:  RLCF   xD3,W
06B3A:  MOVWF  02
06B3C:  RLCF   xD4,W
06B3E:  MOVWF  03
06B40:  RLCF   02,F
06B42:  RLCF   03,F
06B44:  RLCF   02,F
06B46:  RLCF   03,F
06B48:  RLCF   02,F
06B4A:  RLCF   03,F
06B4C:  RLCF   02,F
06B4E:  RLCF   03,F
06B50:  RLCF   02,F
06B52:  RLCF   03,F
06B54:  MOVLW  C0
06B56:  ANDWF  02,F
06B58:  MOVF   02,W
06B5A:  ADDWF  x8D,W
06B5C:  MOVWF  xD5
06B5E:  MOVF   03,W
06B60:  ADDWFC x8E,W
06B62:  MOVWF  xD6
06B64:  MOVLW  00
06B66:  ADDWFC x8F,W
06B68:  MOVWF  xD7
06B6A:  MOVLW  00
06B6C:  ADDWFC x90,W
06B6E:  MOVWF  xD8
06B70:  MOVLB  0
....................       //fprintf(PC, "Packet %d: Address 0x%08LX\r\n", packet_count, current_address);
....................       
....................       // Read data from the SMF
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
06B72:  MOVFF  E5,429
06B76:  MOVFF  E4,428
06B7A:  MOVFF  E3,427
06B7E:  MOVFF  E2,426
06B82:  MOVFF  3D8,42D
06B86:  MOVFF  3D7,42C
06B8A:  MOVFF  3D6,42B
06B8E:  MOVFF  3D5,42A
06B92:  MOVLW  03
06B94:  MOVLB  4
06B96:  MOVWF  x2F
06B98:  MOVLW  93
06B9A:  MOVWF  x2E
06B9C:  CLRF   x33
06B9E:  CLRF   x32
06BA0:  CLRF   x31
06BA2:  MOVLW  40
06BA4:  MOVWF  x30
06BA6:  MOVLB  0
06BA8:  CALL   1F0A
....................       
....................       // Print the read data
....................       //fprintf(PC, "Read Data: ");
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
06BAC:  MOVLB  3
06BAE:  CLRF   xD9
06BB0:  MOVLB  0
06BB2:  MOVLB  3
06BB4:  MOVF   xD9,W
06BB6:  SUBLW  3F
06BB8:  BTFSC  FD8.0
06BBA:  BRA    6BC2
06BBC:  MOVLB  0
06BBE:  GOTO   6BFE
06BC2:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
06BC4:  CLRF   03
06BC6:  MOVLB  3
06BC8:  MOVF   xD9,W
06BCA:  ADDLW  93
06BCC:  MOVWF  FE9
06BCE:  MOVLW  03
06BD0:  ADDWFC 03,W
06BD2:  MOVWF  FEA
06BD4:  MOVFF  FEF,3DA
06BD8:  MOVFF  3DA,427
06BDC:  MOVLW  37
06BDE:  MOVLB  4
06BE0:  MOVWF  x28
06BE2:  MOVLB  0
06BE4:  CALL   1A10
06BE8:  MOVLW  20
06BEA:  MOVLB  8
06BEC:  MOVWF  x2F
06BEE:  MOVLB  0
06BF0:  CALL   17CC
06BF4:  MOVLB  3
06BF6:  INCF   xD9,F
06BF8:  MOVLB  0
06BFA:  GOTO   6BB2
....................       }
....................       fprintf(PC, "\r\n");
06BFE:  MOVLW  0D
06C00:  MOVLB  8
06C02:  MOVWF  x2F
06C04:  MOVLB  0
06C06:  CALL   17CC
06C0A:  MOVLW  0A
06C0C:  MOVLB  8
06C0E:  MOVWF  x2F
06C10:  MOVLB  0
06C12:  CALL   17CC
06C16:  MOVLB  3
06C18:  INCF   xD3,F
06C1A:  BTFSC  FD8.2
06C1C:  INCF   xD4,F
06C1E:  MOVLB  0
06C20:  GOTO   6B0C
....................    }
....................    if(is_connect(smf) == FALSE) {
06C24:  MOVFF  E5,82F
06C28:  MOVFF  E4,82E
06C2C:  MOVFF  E3,82D
06C30:  MOVFF  E2,82C
06C34:  CALL   1E4C
06C38:  MOVF   01,F
06C3A:  BTFSS  FD8.2
06C3C:  GOTO   6C50
....................       fprintf(PC, "SMF is not connected\r\n");
06C40:  MOVLW  BE
06C42:  MOVWF  FF6
06C44:  MOVLW  15
06C46:  MOVWF  FF7
06C48:  MOVLW  00
06C4A:  MOVWF  FF8
06C4C:  CALL   181E
....................       // return;
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
06C50:  MOVLW  D6
06C52:  MOVWF  FF6
06C54:  MOVLW  15
06C56:  MOVWF  FF7
06C58:  MOVLW  00
06C5A:  MOVWF  FF8
06C5C:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06C60:  MOVLB  3
06C62:  MOVF   x8B,W
06C64:  MOVWF  FE9
06C66:  MOVF   x8C,W
06C68:  MOVWF  FEA
06C6A:  MOVFF  FEF,3DA
06C6E:  MOVFF  3DA,492
06C72:  MOVLW  02
06C74:  MOVLB  4
06C76:  MOVWF  x93
06C78:  MOVLB  0
06C7A:  CALL   38F2
06C7E:  GOTO   70DE (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
06C82:  MOVLW  F4
06C84:  MOVWF  FF6
06C86:  MOVLW  15
06C88:  MOVWF  FF7
06C8A:  MOVLW  00
06C8C:  MOVWF  FF8
06C8E:  CALL   181E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
06C92:  MOVLB  3
06C94:  MOVF   x8B,W
06C96:  MOVWF  FE9
06C98:  MOVF   x8C,W
06C9A:  MOVWF  FEA
06C9C:  MOVFF  FEF,38D
....................    piclog_make(cmd, 0x00); // Log the command execution
06CA0:  MOVFF  38D,492
06CA4:  MOVLB  4
06CA6:  CLRF   x93
06CA8:  MOVLB  0
06CAA:  CALL   38F2
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
06CAE:  MOVLB  3
06CB0:  CLRF   x91
06CB2:  CLRF   x90
06CB4:  CLRF   x8F
06CB6:  CLRF   x8E
06CB8:  MOVLB  0
06CBA:  MOVLB  3
06CBC:  MOVF   x91,F
06CBE:  BTFSC  FD8.2
06CC0:  BRA    6CC8
06CC2:  MOVLB  0
06CC4:  GOTO   6D28
06CC8:  MOVLB  0
06CCA:  MOVLB  3
06CCC:  MOVF   x90,W
06CCE:  SUBLW  F4
06CD0:  BTFSC  FD8.0
06CD2:  BRA    6CDA
06CD4:  MOVLB  0
06CD6:  GOTO   6D28
06CDA:  MOVLB  0
06CDC:  BTFSS  FD8.2
06CDE:  GOTO   6CF4
06CE2:  MOVLB  3
06CE4:  MOVF   x8F,W
06CE6:  SUBLW  23
06CE8:  BTFSC  FD8.0
06CEA:  BRA    6CF2
06CEC:  MOVLB  0
06CEE:  GOTO   6D28
06CF2:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06CF4:  MOVFF  E5,3D4
06CF8:  MOVFF  E4,3D3
06CFC:  MOVFF  E3,3D2
06D00:  MOVFF  E2,3D1
06D04:  MOVFF  391,3D8
06D08:  MOVFF  390,3D7
06D0C:  MOVFF  38F,3D6
06D10:  MOVFF  38E,3D5
06D14:  CALL   520C
06D18:  MOVLW  01
06D1A:  MOVLB  3
06D1C:  ADDWF  x90,F
06D1E:  MOVLW  00
06D20:  ADDWFC x91,F
06D22:  MOVLB  0
06D24:  GOTO   6CBA
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
06D28:  MOVFF  38D,492
06D2C:  MOVLW  02
06D2E:  MOVLB  4
06D30:  MOVWF  x93
06D32:  MOVLB  0
06D34:  CALL   38F2
....................    fprintf(PC, "End SMF Erase All\r\n");
06D38:  MOVLW  0A
06D3A:  MOVWF  FF6
06D3C:  MOVLW  16
06D3E:  MOVWF  FF7
06D40:  MOVLW  00
06D42:  MOVWF  FF8
06D44:  CALL   181E
06D48:  GOTO   70EE (RETURN)
.................... }
.................... 
.................... void mode_smf_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
06D50:  MOVLW  1E
06D52:  MOVWF  FF6
06D54:  MOVLW  16
06D56:  MOVWF  FF7
06D58:  MOVLW  00
06D5A:  MOVWF  FF8
06D5C:  CALL   181E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06D60:  MOVLB  3
06D62:  MOVF   x8B,W
06D64:  MOVWF  FE9
06D66:  MOVF   x8C,W
06D68:  MOVWF  FEA
06D6A:  MOVFF  FEF,3D1
06D6E:  MOVFF  3D1,492
06D72:  MOVLW  01
06D74:  MOVLB  4
06D76:  MOVWF  x93
06D78:  MOVLB  0
06D7A:  CALL   38F2
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06D7E:  MOVLB  3
06D80:  CLRF   x8D
06D82:  CLRF   x8E
06D84:  CLRF   x8F
06D86:  CLRF   x90
06D88:  CLRF   x91
06D8A:  CLRF   x92
06D8C:  CLRF   x93
06D8E:  CLRF   x94
06D90:  CLRF   x95
06D92:  CLRF   x96
06D94:  CLRF   x97
06D96:  CLRF   x98
06D98:  CLRF   x99
06D9A:  CLRF   x9A
06D9C:  CLRF   x9B
06D9E:  CLRF   x9C
06DA0:  CLRF   x9D
06DA2:  CLRF   x9E
06DA4:  CLRF   x9F
06DA6:  CLRF   xA0
06DA8:  CLRF   xA1
06DAA:  CLRF   xA2
06DAC:  CLRF   xA3
06DAE:  CLRF   xA4
06DB0:  CLRF   xA5
06DB2:  CLRF   xA6
06DB4:  CLRF   xA7
06DB6:  CLRF   xA8
06DB8:  CLRF   xA9
06DBA:  CLRF   xAA
06DBC:  CLRF   xAB
06DBE:  CLRF   xAC
06DC0:  CLRF   xAD
06DC2:  CLRF   xAE
06DC4:  CLRF   xAF
06DC6:  CLRF   xB0
06DC8:  CLRF   xB1
06DCA:  CLRF   xB2
06DCC:  CLRF   xB3
06DCE:  CLRF   xB4
06DD0:  CLRF   xB5
06DD2:  CLRF   xB6
06DD4:  CLRF   xB7
06DD6:  CLRF   xB8
06DD8:  CLRF   xB9
06DDA:  CLRF   xBA
06DDC:  CLRF   xBB
06DDE:  CLRF   xBC
06DE0:  CLRF   xBD
06DE2:  CLRF   xBE
06DE4:  CLRF   xBF
06DE6:  CLRF   xC0
06DE8:  CLRF   xC1
06DEA:  CLRF   xC2
06DEC:  CLRF   xC3
06DEE:  CLRF   xC4
06DF0:  CLRF   xC5
06DF2:  CLRF   xC6
06DF4:  CLRF   xC7
06DF6:  CLRF   xC8
06DF8:  CLRF   xC9
06DFA:  CLRF   xCA
06DFC:  CLRF   xCB
06DFE:  CLRF   xCC
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
06E00:  MOVLW  04
06E02:  MOVWF  xD0
06E04:  MOVLW  EC
06E06:  MOVWF  xCF
06E08:  CLRF   xCE
06E0A:  CLRF   xCD
06E0C:  MOVLB  0
06E0E:  MOVLB  3
06E10:  MOVF   xD0,W
06E12:  SUBLW  05
06E14:  BTFSC  FD8.0
06E16:  BRA    6E1E
06E18:  MOVLB  0
06E1A:  GOTO   6E9C
06E1E:  MOVLB  0
06E20:  BTFSS  FD8.2
06E22:  GOTO   6E68
06E26:  MOVLB  3
06E28:  MOVF   xCF,W
06E2A:  SUBLW  6B
06E2C:  BTFSC  FD8.0
06E2E:  BRA    6E36
06E30:  MOVLB  0
06E32:  GOTO   6E9C
06E36:  MOVLB  0
06E38:  BTFSS  FD8.2
06E3A:  GOTO   6E68
06E3E:  MOVLB  3
06E40:  MOVF   xCE,W
06E42:  SUBLW  FF
06E44:  BTFSC  FD8.0
06E46:  BRA    6E4E
06E48:  MOVLB  0
06E4A:  GOTO   6E9C
06E4E:  MOVLB  0
06E50:  BTFSS  FD8.2
06E52:  GOTO   6E68
06E56:  MOVLB  3
06E58:  MOVF   xCD,W
06E5A:  SUBLW  FE
06E5C:  BTFSC  FD8.0
06E5E:  BRA    6E66
06E60:  MOVLB  0
06E62:  GOTO   6E9C
06E66:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06E68:  MOVFF  E5,3D4
06E6C:  MOVFF  E4,3D3
06E70:  MOVFF  E3,3D2
06E74:  MOVFF  E2,3D1
06E78:  MOVFF  3D0,3D8
06E7C:  MOVFF  3CF,3D7
06E80:  MOVFF  3CE,3D6
06E84:  MOVFF  3CD,3D5
06E88:  CALL   520C
06E8C:  MOVLW  01
06E8E:  MOVLB  3
06E90:  ADDWF  xCF,F
06E92:  MOVLW  00
06E94:  ADDWFC xD0,F
06E96:  MOVLB  0
06E98:  GOTO   6E0E
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
06E9C:  MOVFF  E5,82F
06EA0:  MOVFF  E4,82E
06EA4:  MOVFF  E3,82D
06EA8:  MOVFF  E2,82C
06EAC:  MOVLW  04
06EAE:  MOVLB  8
06EB0:  MOVWF  x33
06EB2:  MOVLW  EC
06EB4:  MOVWF  x32
06EB6:  CLRF   x31
06EB8:  CLRF   x30
06EBA:  MOVLW  03
06EBC:  MOVWF  x35
06EBE:  MOVLW  8D
06EC0:  MOVWF  x34
06EC2:  CLRF   x37
06EC4:  MOVLW  40
06EC6:  MOVWF  x36
06EC8:  MOVLB  0
06ECA:  CALL   2F30
....................    smf_init(); // Update the address area after writing
06ECE:  GOTO   6D4C
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06ED2:  MOVLB  3
06ED4:  MOVF   x8B,W
06ED6:  MOVWF  FE9
06ED8:  MOVF   x8C,W
06EDA:  MOVWF  FEA
06EDC:  MOVFF  FEF,3D1
06EE0:  MOVFF  3D1,492
06EE4:  MOVLW  02
06EE6:  MOVLB  4
06EE8:  MOVWF  x93
06EEA:  MOVLB  0
06EEC:  CALL   38F2
....................    fprintf(PC, "End SMF Reset\r\n");
06EF0:  MOVLW  30
06EF2:  MOVWF  FF6
06EF4:  MOVLW  16
06EF6:  MOVWF  FF7
06EF8:  MOVLW  00
06EFA:  MOVWF  FF8
06EFC:  CALL   181E
06F00:  GOTO   70FE (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
08C02:  CLRF   FF8
08C04:  BCF    FD0.7
08C06:  BSF    07.7
08C08:  MOVLB  E
08C0A:  MOVLW  55
08C0C:  MOVWF  F7E
08C0E:  MOVLW  AA
08C10:  MOVWF  F7E
08C12:  BCF    F66.6
08C14:  MOVLW  F9
08C16:  MOVWF  x2C
08C18:  MOVLW  0F
08C1A:  MOVWF  x2E
08C1C:  MOVLW  40
08C1E:  MOVWF  x12
08C20:  MOVLW  30
08C22:  MOVWF  x13
08C24:  MOVLW  20
08C26:  MOVWF  x22
08C28:  MOVLW  55
08C2A:  MOVWF  F7E
08C2C:  MOVLW  AA
08C2E:  MOVWF  F7E
08C30:  BSF    F66.6
08C32:  CLRF   F9B
08C34:  CLRF   F64
08C36:  CLRF   F65
08C38:  CLRF   F66
08C3A:  MOVLW  02
08C3C:  MOVWF  FD3
08C3E:  CLRF   1B
08C40:  MOVLB  F
08C42:  BSF    x2D.3
08C44:  MOVLW  A0
08C46:  MOVWF  x2B
08C48:  MOVLW  01
08C4A:  MOVWF  x2C
08C4C:  MOVLW  A6
08C4E:  MOVWF  x2E
08C50:  MOVLW  90
08C52:  MOVWF  x2F
08C54:  BCF    F93.6
08C56:  BSF    F8A.6
08C58:  BSF    F92.1
08C5A:  BCF    F92.0
08C5C:  BCF    F92.3
08C5E:  BCF    F89.3
08C60:  BSF    F93.4
08C62:  BCF    F93.5
08C64:  BCF    F93.2
08C66:  BCF    F8A.2
08C68:  CLRF   1F
08C6A:  CLRF   1E
08C6C:  CLRF   1D
08C6E:  CLRF   1C
08C70:  CLRF   23
08C72:  CLRF   22
08C74:  CLRF   21
08C76:  CLRF   20
08C78:  CLRF   25
08C7A:  CLRF   24
08C7C:  CLRF   46
08C7E:  BCF    47.0
08C80:  MOVLB  3
08C82:  CLRF   x47
08C84:  CLRF   x46
08C86:  CLRF   x45
08C88:  CLRF   x44
08C8A:  CLRF   x49
08C8C:  CLRF   x48
08C8E:  CLRF   x4B
08C90:  CLRF   x4A
08C92:  CLRF   x4D
08C94:  CLRF   x4C
08C96:  CLRF   x4F
08C98:  CLRF   x4E
08C9A:  CLRF   x6D
08C9C:  MOVLW  1E
08C9E:  MOVWF  x72
08CA0:  CLRF   x74
08CA2:  CLRF   x73
08CA4:  MOVLB  E
08CA6:  CLRF   xD9
08CA8:  CLRF   xDA
08CAA:  CLRF   xCE
08CAC:  CLRF   xCF
08CAE:  CLRF   xD0
08CB0:  CLRF   xD1
08CB2:  CLRF   xD2
08CB4:  CLRF   xD3
08CB6:  CLRF   xD4
08CB8:  CLRF   xD5
08CBA:  CLRF   x45
08CBC:  CLRF   x46
08CBE:  CLRF   x47
08CC0:  BCF    x8D.7
08CC2:  BCF    x8D.6
08CC4:  BCF    x8D.5
08CC6:  MOVLB  F
08CC8:  CLRF   x53
08CCA:  CLRF   x38
08CCC:  CLRF   x37
08CCE:  MOVLB  0
08CD0:  CLRF   26
08CD2:  CLRF   27
08CD4:  CLRF   28
08CD6:  CLRF   29
08CD8:  CLRF   2A
08CDA:  CLRF   2B
08CDC:  CLRF   2C
08CDE:  CLRF   2D
08CE0:  CLRF   2E
08CE2:  CLRF   2F
08CE4:  CLRF   30
08CE6:  CLRF   31
08CE8:  CLRF   32
08CEA:  CLRF   33
08CEC:  CLRF   34
08CEE:  CLRF   35
08CF0:  CLRF   36
08CF2:  CLRF   37
08CF4:  CLRF   38
08CF6:  CLRF   39
08CF8:  CLRF   3A
08CFA:  CLRF   3B
08CFC:  CLRF   3C
08CFE:  CLRF   3D
08D00:  CLRF   3E
08D02:  CLRF   3F
08D04:  CLRF   40
08D06:  CLRF   41
08D08:  CLRF   42
08D0A:  CLRF   43
08D0C:  CLRF   44
08D0E:  CLRF   45
08D10:  MOVLW  03
08D12:  MOVWF  48
08D14:  CLRF   49
08D16:  CLRF   4A
08D18:  CLRF   4B
08D1A:  CLRF   4C
08D1C:  CLRF   4D
08D1E:  CLRF   4E
08D20:  CLRF   4F
08D22:  CLRF   50
08D24:  CLRF   51
08D26:  CLRF   52
08D28:  CLRF   53
08D2A:  CLRF   54
08D2C:  CLRF   55
08D2E:  CLRF   56
08D30:  CLRF   57
08D32:  CLRF   58
08D34:  CLRF   59
08D36:  CLRF   5A
08D38:  CLRF   5B
08D3A:  CLRF   5C
08D3C:  CLRF   5D
08D3E:  CLRF   5E
08D40:  CLRF   5F
08D42:  CLRF   x60
08D44:  CLRF   x61
08D46:  CLRF   x62
08D48:  CLRF   x63
08D4A:  CLRF   x64
08D4C:  CLRF   x65
08D4E:  CLRF   x66
08D50:  CLRF   x67
08D52:  CLRF   x68
08D54:  CLRF   x69
08D56:  CLRF   x6A
08D58:  CLRF   x6B
08D5A:  CLRF   x6C
08D5C:  CLRF   x6D
08D5E:  CLRF   x6E
08D60:  CLRF   x6F
08D62:  CLRF   x70
08D64:  CLRF   x71
08D66:  CLRF   x72
08D68:  CLRF   x73
08D6A:  CLRF   x74
08D6C:  CLRF   x75
08D6E:  CLRF   x76
08D70:  CLRF   x77
08D72:  CLRF   x78
08D74:  CLRF   x79
08D76:  CLRF   x7A
08D78:  CLRF   x7B
08D7A:  CLRF   x7C
08D7C:  CLRF   x7D
08D7E:  CLRF   x7E
08D80:  CLRF   x7F
08D82:  CLRF   x80
08D84:  CLRF   x81
08D86:  CLRF   x82
08D88:  CLRF   x83
08D8A:  CLRF   x84
08D8C:  CLRF   x85
08D8E:  CLRF   x86
08D90:  CLRF   x87
08D92:  CLRF   x88
08D94:  CLRF   x89
08D96:  CLRF   x8A
08D98:  CLRF   x8B
08D9A:  CLRF   x8C
08D9C:  CLRF   x8D
08D9E:  CLRF   x8E
08DA0:  CLRF   x8F
08DA2:  CLRF   x90
08DA4:  CLRF   x91
08DA6:  CLRF   x92
08DA8:  CLRF   x93
08DAA:  CLRF   x94
08DAC:  CLRF   x95
08DAE:  CLRF   x96
08DB0:  CLRF   x97
08DB2:  CLRF   x98
08DB4:  CLRF   x99
08DB6:  CLRF   x9A
08DB8:  CLRF   x9B
08DBA:  CLRF   x9C
08DBC:  CLRF   x9D
08DBE:  CLRF   x9E
08DC0:  CLRF   x9F
08DC2:  CLRF   xA0
08DC4:  CLRF   xA1
08DC6:  CLRF   xA2
08DC8:  CLRF   xA3
08DCA:  CLRF   xA4
08DCC:  CLRF   xA5
08DCE:  CLRF   xA6
08DD0:  CLRF   xA7
08DD2:  CLRF   xA8
08DD4:  CLRF   xA9
08DD6:  CLRF   xAA
08DD8:  CLRF   xAB
08DDA:  CLRF   xAC
08DDC:  CLRF   xAD
08DDE:  CLRF   xAE
08DE0:  CLRF   xAF
08DE2:  CLRF   xB0
08DE4:  CLRF   xB1
08DE6:  CLRF   xB2
08DE8:  CLRF   xB3
08DEA:  CLRF   xB4
08DEC:  CLRF   xB5
08DEE:  CLRF   xB6
08DF0:  CLRF   xB7
08DF2:  CLRF   xB8
08DF4:  CLRF   xB9
08DF6:  CLRF   xBA
08DF8:  CLRF   xBB
08DFA:  CLRF   xBC
08DFC:  CLRF   xBD
08DFE:  CLRF   xBE
08E00:  CLRF   xBF
08E02:  CLRF   xC0
08E04:  CLRF   xC1
08E06:  CLRF   xC2
08E08:  CLRF   xC3
08E0A:  CLRF   xC4
08E0C:  CLRF   xC5
08E0E:  CLRF   xC6
08E10:  CLRF   xC7
08E12:  CLRF   xC8
08E14:  CLRF   xC9
08E16:  CLRF   xCA
08E18:  CLRF   xCB
08E1A:  CLRF   xCC
08E1C:  CLRF   xCD
08E1E:  CLRF   xCE
08E20:  CLRF   xCF
08E22:  CLRF   xD0
08E24:  CLRF   xD1
08E26:  CLRF   xD2
08E28:  CLRF   xD3
08E2A:  CLRF   xD4
08E2C:  CLRF   xD5
08E2E:  CLRF   xD6
08E30:  CLRF   xD7
08E32:  CLRF   xD8
08E34:  CLRF   xD9
08E36:  CLRF   xDA
08E38:  CLRF   xDB
08E3A:  CLRF   xDC
08E3C:  CLRF   xDD
08E3E:  CLRF   xDE
08E40:  CLRF   xDF
08E42:  MOVLW  05
08E44:  MOVWF  xE0
08E46:  MOVLW  7C
08E48:  MOVWF  xE1
08E4A:  MOVLW  01
08E4C:  MOVWF  xE2
08E4E:  MOVLW  01
08E50:  MOVWF  xE3
08E52:  MOVLW  02
08E54:  MOVWF  xE4
08E56:  MOVLW  7C
08E58:  MOVWF  xE5
08E5A:  CLRF   xE6
08E5C:  MOVLW  09
08E5E:  MOVWF  xE7
08E60:  MOVLW  01
08E62:  MOVWF  xE8
08E64:  CLRF   xE9
08E66:  MOVLW  02
08E68:  MOVWF  xEA
08E6A:  MOVLW  01
08E6C:  MOVWF  xEB
08E6E:  CLRF   xEC
08E70:  CLRF   xED
08E72:  CLRF   xEE
08E74:  CLRF   xEF
08E76:  CLRF   xF0
08E78:  CLRF   xF1
08E7A:  CLRF   xF2
08E7C:  CLRF   xF3
08E7E:  CLRF   xF4
08E80:  CLRF   xF5
08E82:  CLRF   xF6
08E84:  CLRF   xF7
08E86:  CLRF   xF8
08E88:  CLRF   xF9
08E8A:  CLRF   xFA
08E8C:  CLRF   xFB
08E8E:  CLRF   xFC
08E90:  CLRF   xFD
08E92:  CLRF   xFE
08E94:  CLRF   xFF
08E96:  MOVLB  1
08E98:  CLRF   x00
08E9A:  CLRF   x01
08E9C:  CLRF   x02
08E9E:  CLRF   x03
08EA0:  CLRF   x04
08EA2:  CLRF   x05
08EA4:  CLRF   x06
08EA6:  CLRF   x07
08EA8:  CLRF   x08
08EAA:  CLRF   x09
08EAC:  CLRF   x0A
08EAE:  CLRF   x0B
08EB0:  CLRF   x0C
08EB2:  CLRF   x0D
08EB4:  CLRF   x0E
08EB6:  CLRF   x0F
08EB8:  CLRF   x10
08EBA:  CLRF   x11
08EBC:  CLRF   x12
08EBE:  CLRF   x13
08EC0:  CLRF   x14
08EC2:  CLRF   x15
08EC4:  CLRF   x16
08EC6:  CLRF   x17
08EC8:  CLRF   x18
08ECA:  CLRF   x19
08ECC:  CLRF   x1A
08ECE:  CLRF   x1B
08ED0:  CLRF   x1C
08ED2:  CLRF   x1D
08ED4:  CLRF   x1E
08ED6:  CLRF   x1F
08ED8:  CLRF   x20
08EDA:  CLRF   x21
08EDC:  CLRF   x22
08EDE:  CLRF   x23
08EE0:  CLRF   x24
08EE2:  CLRF   x25
08EE4:  CLRF   x26
08EE6:  CLRF   x27
08EE8:  CLRF   x28
08EEA:  CLRF   x29
08EEC:  CLRF   x2A
08EEE:  CLRF   x2B
08EF0:  CLRF   x2C
08EF2:  CLRF   x2D
08EF4:  CLRF   x2E
08EF6:  CLRF   x2F
08EF8:  CLRF   x30
08EFA:  CLRF   x31
08EFC:  CLRF   x32
08EFE:  CLRF   x33
08F00:  CLRF   x34
08F02:  CLRF   x35
08F04:  CLRF   x36
08F06:  CLRF   x37
08F08:  CLRF   x38
08F0A:  CLRF   x39
08F0C:  CLRF   x3A
08F0E:  CLRF   x3B
08F10:  CLRF   x3C
08F12:  CLRF   x3D
08F14:  CLRF   x3E
08F16:  CLRF   x3F
08F18:  CLRF   x40
08F1A:  CLRF   x41
08F1C:  CLRF   x42
08F1E:  CLRF   x43
08F20:  CLRF   x44
08F22:  CLRF   x45
08F24:  CLRF   x46
08F26:  CLRF   x47
08F28:  CLRF   x48
08F2A:  CLRF   x49
08F2C:  CLRF   x4A
08F2E:  CLRF   x4B
08F30:  CLRF   x4C
08F32:  CLRF   x4D
08F34:  CLRF   x4E
08F36:  CLRF   x4F
08F38:  CLRF   x50
08F3A:  CLRF   x51
08F3C:  CLRF   x52
08F3E:  CLRF   x53
08F40:  CLRF   x54
08F42:  CLRF   x55
08F44:  CLRF   x56
08F46:  CLRF   x57
08F48:  CLRF   x58
08F4A:  CLRF   x59
08F4C:  CLRF   x5A
08F4E:  CLRF   x5B
08F50:  CLRF   x5C
08F52:  CLRF   x5D
08F54:  CLRF   x5E
08F56:  CLRF   x5F
08F58:  CLRF   x60
08F5A:  CLRF   x61
08F5C:  CLRF   x62
08F5E:  CLRF   x63
08F60:  CLRF   x64
08F62:  CLRF   x65
08F64:  CLRF   x66
08F66:  CLRF   x67
08F68:  CLRF   x68
08F6A:  CLRF   x69
08F6C:  CLRF   x6A
08F6E:  CLRF   x6B
08F70:  CLRF   x6C
08F72:  CLRF   x6D
08F74:  CLRF   x6E
08F76:  CLRF   x6F
08F78:  CLRF   x70
08F7A:  CLRF   x71
08F7C:  CLRF   x72
08F7E:  CLRF   x73
08F80:  CLRF   x74
08F82:  CLRF   x75
08F84:  CLRF   x76
08F86:  CLRF   x77
08F88:  CLRF   x78
08F8A:  CLRF   x79
08F8C:  CLRF   x7A
08F8E:  CLRF   x7B
08F90:  CLRF   x7C
08F92:  CLRF   x7D
08F94:  CLRF   x7E
08F96:  CLRF   x7F
08F98:  CLRF   x80
08F9A:  CLRF   x81
08F9C:  CLRF   x82
08F9E:  CLRF   x83
08FA0:  CLRF   x84
08FA2:  CLRF   x85
08FA4:  CLRF   x86
08FA6:  CLRF   x87
08FA8:  CLRF   x88
08FAA:  CLRF   x89
08FAC:  CLRF   x8A
08FAE:  CLRF   x8B
08FB0:  CLRF   x8C
08FB2:  CLRF   x8D
08FB4:  CLRF   x8E
08FB6:  CLRF   x8F
08FB8:  CLRF   x90
08FBA:  CLRF   x91
08FBC:  CLRF   x92
08FBE:  CLRF   x93
08FC0:  CLRF   x94
08FC2:  CLRF   x95
08FC4:  CLRF   x96
08FC6:  CLRF   x97
08FC8:  CLRF   x98
08FCA:  CLRF   x99
08FCC:  CLRF   x9A
08FCE:  CLRF   x9B
08FD0:  CLRF   x9C
08FD2:  CLRF   x9D
08FD4:  CLRF   x9E
08FD6:  CLRF   x9F
08FD8:  CLRF   xA0
08FDA:  CLRF   xA1
08FDC:  CLRF   xA2
08FDE:  CLRF   xA3
08FE0:  CLRF   xA4
08FE2:  CLRF   xA5
08FE4:  CLRF   xA6
08FE6:  CLRF   xA7
08FE8:  CLRF   xA8
08FEA:  CLRF   xA9
08FEC:  CLRF   xAA
08FEE:  CLRF   xAB
08FF0:  CLRF   xAC
08FF2:  CLRF   xAD
08FF4:  CLRF   xAE
08FF6:  CLRF   xAF
08FF8:  CLRF   xB0
08FFA:  CLRF   xB1
08FFC:  CLRF   xB2
08FFE:  CLRF   xB3
09000:  CLRF   xB4
09002:  CLRF   xB5
09004:  CLRF   xB6
09006:  CLRF   xB7
09008:  CLRF   xB8
0900A:  CLRF   xB9
0900C:  CLRF   xBA
0900E:  CLRF   xBB
09010:  CLRF   xBC
09012:  CLRF   xBD
09014:  CLRF   xBE
09016:  CLRF   xBF
09018:  CLRF   xC0
0901A:  CLRF   xC1
0901C:  CLRF   xC2
0901E:  CLRF   xC3
09020:  CLRF   xC4
09022:  CLRF   xC5
09024:  CLRF   xC6
09026:  CLRF   xC7
09028:  CLRF   xC8
0902A:  CLRF   xC9
0902C:  CLRF   xCA
0902E:  CLRF   xCB
09030:  CLRF   xCC
09032:  CLRF   xCD
09034:  CLRF   xCE
09036:  CLRF   xCF
09038:  CLRF   xD0
0903A:  CLRF   xD1
0903C:  CLRF   xD2
0903E:  CLRF   xD3
09040:  CLRF   xD4
09042:  CLRF   xD5
09044:  CLRF   xD6
09046:  CLRF   xD7
09048:  CLRF   xD8
0904A:  CLRF   xD9
0904C:  CLRF   xDA
0904E:  CLRF   xDB
09050:  CLRF   xDC
09052:  CLRF   xDD
09054:  CLRF   xDE
09056:  CLRF   xDF
09058:  CLRF   xE0
0905A:  CLRF   xE1
0905C:  CLRF   xE2
0905E:  CLRF   xE3
09060:  CLRF   xE4
09062:  CLRF   xE5
09064:  CLRF   xE6
09066:  CLRF   xE7
09068:  CLRF   xE8
0906A:  CLRF   xE9
0906C:  CLRF   xEA
0906E:  CLRF   xEB
09070:  CLRF   xEC
09072:  CLRF   xED
09074:  CLRF   xEE
09076:  CLRF   xEF
09078:  CLRF   xF0
0907A:  CLRF   xF1
0907C:  CLRF   xF2
0907E:  CLRF   xF3
09080:  CLRF   xF4
09082:  CLRF   xF5
09084:  CLRF   xF6
09086:  CLRF   xF7
09088:  CLRF   xF8
0908A:  CLRF   xF9
0908C:  CLRF   xFA
0908E:  CLRF   xFB
09090:  CLRF   xFC
09092:  CLRF   xFD
09094:  CLRF   xFE
09096:  CLRF   xFF
09098:  MOVLB  2
0909A:  CLRF   x00
0909C:  CLRF   x01
0909E:  CLRF   x02
090A0:  CLRF   x03
090A2:  CLRF   x04
090A4:  CLRF   x05
090A6:  CLRF   x06
090A8:  CLRF   x07
090AA:  CLRF   x08
090AC:  CLRF   x09
090AE:  CLRF   x0A
090B0:  CLRF   x0B
090B2:  CLRF   x0C
090B4:  CLRF   x0D
090B6:  CLRF   x0E
090B8:  CLRF   x0F
090BA:  CLRF   x10
090BC:  CLRF   x11
090BE:  CLRF   x12
090C0:  CLRF   x13
090C2:  CLRF   x14
090C4:  CLRF   x15
090C6:  CLRF   x16
090C8:  CLRF   x17
090CA:  CLRF   x18
090CC:  CLRF   x19
090CE:  CLRF   x1A
090D0:  CLRF   x1B
090D2:  CLRF   x1C
090D4:  CLRF   x1D
090D6:  CLRF   x1E
090D8:  CLRF   x1F
090DA:  CLRF   x20
090DC:  CLRF   x21
090DE:  CLRF   x22
090E0:  CLRF   x23
090E2:  CLRF   x24
090E4:  CLRF   x25
090E6:  CLRF   x26
090E8:  CLRF   x27
090EA:  CLRF   x28
090EC:  CLRF   x29
090EE:  CLRF   x2A
090F0:  CLRF   x2B
090F2:  CLRF   x2C
090F4:  CLRF   x2D
090F6:  CLRF   x2E
090F8:  CLRF   x2F
090FA:  CLRF   x30
090FC:  CLRF   x31
090FE:  CLRF   x32
09100:  CLRF   x33
09102:  CLRF   x34
09104:  CLRF   x35
09106:  CLRF   x36
09108:  CLRF   x37
0910A:  CLRF   x38
0910C:  CLRF   x39
0910E:  CLRF   x3A
09110:  CLRF   x3B
09112:  CLRF   x3C
09114:  CLRF   x3D
09116:  CLRF   x3E
09118:  CLRF   x3F
0911A:  CLRF   x40
0911C:  CLRF   x41
0911E:  CLRF   x42
09120:  CLRF   x43
09122:  CLRF   x44
09124:  CLRF   x45
09126:  CLRF   x46
09128:  CLRF   x47
0912A:  CLRF   x48
0912C:  CLRF   x49
0912E:  CLRF   x4A
09130:  CLRF   x4B
09132:  CLRF   x4C
09134:  CLRF   x4D
09136:  CLRF   x4E
09138:  CLRF   x4F
0913A:  CLRF   x50
0913C:  CLRF   x51
0913E:  CLRF   x52
09140:  CLRF   x53
09142:  CLRF   x54
09144:  CLRF   x55
09146:  CLRF   x56
09148:  CLRF   x57
0914A:  CLRF   x58
0914C:  CLRF   x59
0914E:  CLRF   x5A
09150:  CLRF   x5B
09152:  CLRF   x5C
09154:  CLRF   x5D
09156:  CLRF   x5E
09158:  CLRF   x5F
0915A:  CLRF   x60
0915C:  CLRF   x61
0915E:  CLRF   x62
09160:  CLRF   x63
09162:  CLRF   x64
09164:  CLRF   x65
09166:  CLRF   x66
09168:  CLRF   x67
0916A:  CLRF   x68
0916C:  CLRF   x69
0916E:  CLRF   x6A
09170:  CLRF   x6B
09172:  CLRF   x6C
09174:  CLRF   x6D
09176:  CLRF   x6E
09178:  CLRF   x6F
0917A:  CLRF   x70
0917C:  CLRF   x71
0917E:  CLRF   x72
09180:  CLRF   x73
09182:  CLRF   x74
09184:  CLRF   x75
09186:  CLRF   x76
09188:  CLRF   x77
0918A:  CLRF   x78
0918C:  CLRF   x79
0918E:  CLRF   x7A
09190:  CLRF   x7B
09192:  CLRF   x7C
09194:  CLRF   x7D
09196:  CLRF   x7E
09198:  CLRF   x7F
0919A:  CLRF   x80
0919C:  CLRF   x81
0919E:  CLRF   x82
091A0:  CLRF   x83
091A2:  CLRF   x84
091A4:  CLRF   x85
091A6:  CLRF   x86
091A8:  CLRF   x87
091AA:  CLRF   x88
091AC:  CLRF   x89
091AE:  CLRF   x8A
091B0:  CLRF   x8B
091B2:  CLRF   x8C
091B4:  CLRF   x8D
091B6:  CLRF   x8E
091B8:  CLRF   x8F
091BA:  CLRF   x90
091BC:  CLRF   x91
091BE:  CLRF   x92
091C0:  CLRF   x93
091C2:  CLRF   x94
091C4:  CLRF   x95
091C6:  CLRF   x96
091C8:  CLRF   x97
091CA:  CLRF   x98
091CC:  CLRF   x99
091CE:  CLRF   x9A
091D0:  CLRF   x9B
091D2:  CLRF   x9C
091D4:  CLRF   x9D
091D6:  CLRF   x9E
091D8:  CLRF   x9F
091DA:  CLRF   xA0
091DC:  CLRF   xA1
091DE:  CLRF   xA2
091E0:  CLRF   xA3
091E2:  CLRF   xA4
091E4:  CLRF   xA5
091E6:  CLRF   xA6
091E8:  CLRF   xA7
091EA:  CLRF   xA8
091EC:  CLRF   xA9
091EE:  CLRF   xAA
091F0:  CLRF   xAB
091F2:  CLRF   xAC
091F4:  CLRF   xAD
091F6:  CLRF   xAE
091F8:  CLRF   xAF
091FA:  CLRF   xB0
091FC:  CLRF   xB1
091FE:  CLRF   xB2
09200:  CLRF   xB3
09202:  CLRF   xB4
09204:  CLRF   xB5
09206:  CLRF   xB6
09208:  CLRF   xB7
0920A:  CLRF   xB8
0920C:  CLRF   xB9
0920E:  CLRF   xBA
09210:  CLRF   xBB
09212:  CLRF   xBC
09214:  CLRF   xBD
09216:  CLRF   xBE
09218:  CLRF   xBF
0921A:  CLRF   xC0
0921C:  CLRF   xC1
0921E:  CLRF   xC2
09220:  CLRF   xC3
09222:  CLRF   xC4
09224:  CLRF   xC5
09226:  CLRF   xC6
09228:  CLRF   xC7
0922A:  CLRF   xC8
0922C:  CLRF   xC9
0922E:  CLRF   xCA
09230:  CLRF   xCB
09232:  CLRF   xCC
09234:  CLRF   xCD
09236:  CLRF   xCE
09238:  CLRF   xCF
0923A:  CLRF   xD0
0923C:  CLRF   xD1
0923E:  CLRF   xD2
09240:  CLRF   xD3
09242:  CLRF   xD4
09244:  CLRF   xD5
09246:  CLRF   xD6
09248:  CLRF   xD7
0924A:  CLRF   xD8
0924C:  CLRF   xD9
0924E:  CLRF   xDA
09250:  CLRF   xDB
09252:  CLRF   xDC
09254:  CLRF   xDD
09256:  CLRF   xDE
09258:  CLRF   xDF
0925A:  CLRF   xE0
0925C:  CLRF   xE1
0925E:  CLRF   xE2
09260:  CLRF   xE3
09262:  CLRF   xE4
09264:  CLRF   xE5
09266:  CLRF   xE6
09268:  CLRF   xE7
0926A:  CLRF   xE8
0926C:  CLRF   xE9
0926E:  CLRF   xEA
09270:  CLRF   xEB
09272:  CLRF   xEC
09274:  CLRF   xED
09276:  CLRF   xEE
09278:  CLRF   xEF
0927A:  CLRF   xF0
0927C:  CLRF   xF1
0927E:  CLRF   xF2
09280:  CLRF   xF3
09282:  CLRF   xF4
09284:  CLRF   xF5
09286:  CLRF   xF6
09288:  CLRF   xF7
0928A:  CLRF   xF8
0928C:  CLRF   xF9
0928E:  CLRF   xFA
09290:  CLRF   xFB
09292:  CLRF   xFC
09294:  CLRF   xFD
09296:  CLRF   xFE
09298:  CLRF   xFF
0929A:  MOVLB  3
0929C:  CLRF   x00
0929E:  CLRF   x01
092A0:  CLRF   x02
092A2:  CLRF   x03
092A4:  CLRF   x04
092A6:  CLRF   x05
092A8:  CLRF   x06
092AA:  CLRF   x07
092AC:  CLRF   x08
092AE:  CLRF   x09
092B0:  CLRF   x0A
092B2:  CLRF   x0B
092B4:  CLRF   x0C
092B6:  CLRF   x0D
092B8:  CLRF   x0E
092BA:  CLRF   x0F
092BC:  CLRF   x10
092BE:  CLRF   x11
092C0:  CLRF   x12
092C2:  CLRF   x13
092C4:  CLRF   x14
092C6:  CLRF   x15
092C8:  CLRF   x16
092CA:  CLRF   x17
092CC:  CLRF   x18
092CE:  CLRF   x19
092D0:  CLRF   x1A
092D2:  CLRF   x1B
092D4:  CLRF   x1C
092D6:  CLRF   x1D
092D8:  CLRF   x1E
092DA:  CLRF   x1F
092DC:  CLRF   x20
092DE:  CLRF   x21
092E0:  CLRF   x22
092E2:  CLRF   x23
092E4:  CLRF   x24
092E6:  CLRF   x25
092E8:  CLRF   x26
092EA:  CLRF   x27
092EC:  CLRF   x28
092EE:  CLRF   x29
092F0:  CLRF   x2A
092F2:  CLRF   x2B
092F4:  CLRF   x2C
092F6:  CLRF   x2D
092F8:  CLRF   x2E
092FA:  CLRF   x2F
092FC:  CLRF   x30
092FE:  CLRF   x31
09300:  CLRF   x32
09302:  CLRF   x33
09304:  CLRF   x34
09306:  CLRF   x35
09308:  CLRF   x36
0930A:  CLRF   x37
0930C:  CLRF   x38
0930E:  CLRF   x39
09310:  CLRF   x3A
09312:  CLRF   x3B
09314:  CLRF   x3C
09316:  CLRF   x3D
09318:  CLRF   x3E
0931A:  CLRF   x3F
0931C:  CLRF   x40
0931E:  CLRF   x41
09320:  CLRF   x42
09322:  CLRF   x43
09324:  CLRF   x6E
09326:  CLRF   x6F
09328:  CLRF   x70
0932A:  CLRF   x71
0932C:  MOVLB  0
.................... { 
....................    delay_ms(1000); // wait for power stable
0932E:  MOVLW  04
09330:  MOVLB  3
09332:  MOVWF  x82
09334:  MOVLB  0
09336:  MOVLW  FA
09338:  MOVLB  8
0933A:  MOVWF  x44
0933C:  MOVLB  0
0933E:  CALL   179E
09342:  MOVLB  3
09344:  DECFSZ x82,F
09346:  BRA    934C
09348:  BRA    9350
0934A:  MOVLB  0
0934C:  MOVLB  0
0934E:  BRA    9336
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
09350:  MOVLW  40
09352:  MOVWF  FF6
09354:  MOVLW  16
09356:  MOVWF  FF7
09358:  MOVLW  00
0935A:  MOVWF  FF8
0935C:  MOVLB  0
0935E:  CALL   181E
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
09362:  MOVLW  86
09364:  MOVWF  FF6
09366:  MOVLW  16
09368:  MOVWF  FF7
0936A:  MOVLW  00
0936C:  MOVWF  FF8
0936E:  CALL   181E
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
09372:  MOVLW  B4
09374:  MOVWF  FF6
09376:  MOVLW  16
09378:  MOVWF  FF7
0937A:  MOVLW  00
0937C:  MOVWF  FF8
0937E:  MOVLW  10
09380:  MOVLB  7
09382:  MOVWF  xEC
09384:  MOVLB  0
09386:  CALL   184E
0938A:  MOVLW  DA
0938C:  MOVWF  FF6
0938E:  MOVLW  16
09390:  MOVWF  FF7
09392:  MOVLW  00
09394:  MOVWF  FF8
09396:  CALL   181E
0939A:  MOVLW  20
0939C:  MOVLB  8
0939E:  MOVWF  x2F
093A0:  MOVLB  0
093A2:  CALL   17CC
093A6:  MOVLW  E4
093A8:  MOVWF  FF6
093AA:  MOVLW  16
093AC:  MOVWF  FF7
093AE:  MOVLW  00
093B0:  MOVWF  FF8
093B2:  CALL   181E
093B6:  MOVLW  C9
093B8:  MOVWF  FF6
093BA:  MOVLW  16
093BC:  MOVWF  FF7
093BE:  MOVLW  00
093C0:  MOVWF  FF8
093C2:  MOVLW  0F
093C4:  MOVLB  7
093C6:  MOVWF  xEC
093C8:  MOVLB  0
093CA:  CALL   184E
....................    
....................    //io_init();
....................    setup_uart_to_boss();
093CE:  GOTO   1884
....................    //setup_timer();
....................    ad7490_init();
093D2:  GOTO   1A80
....................    misf_init();
093D6:  CALL   2122
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
093DA:  MOVFF  36D,492
093DE:  MOVLB  4
093E0:  CLRF   x93
093E2:  MOVLB  0
093E4:  CALL   38F2
.................... 
....................    int1 is_finished = FALSE;
093E8:  MOVLB  3
093EA:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
093EC:  MOVLW  EE
093EE:  MOVWF  FF6
093F0:  MOVLW  16
093F2:  MOVWF  FF7
093F4:  MOVLW  00
093F6:  MOVWF  FF8
093F8:  MOVLB  0
093FA:  CALL   181E
....................    
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
093FE:  MOVLW  14
09400:  MOVWF  FF6
09402:  MOVLW  17
09404:  MOVWF  FF7
09406:  MOVLW  00
09408:  MOVWF  FF8
0940A:  CALL   181E
....................    
....................    //Start loop
....................    while(!is_finished)
0940E:  MOVLB  3
09410:  BTFSS  x75.0
09412:  BRA    941A
09414:  MOVLB  0
09416:  GOTO   94E8
0941A:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0941C:  MOVF   46,F
0941E:  BTFSC  FD8.2
09420:  GOTO   94A4
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
09424:  MOVLB  3
09426:  CLRF   x89
09428:  MOVLW  26
0942A:  MOVWF  x88
0942C:  MOVFF  46,38A
09430:  MOVLB  0
09432:  GOTO   3DBC
09436:  MOVFF  02,03
0943A:  MOVF   01,W
0943C:  MOVWF  FE1
0943E:  MOVFF  03,FE2
09442:  MOVLW  03
09444:  MOVWF  FEA
09446:  MOVLW  76
09448:  MOVWF  FE9
0944A:  MOVLW  0C
0944C:  MOVWF  01
0944E:  MOVFF  FE6,FEE
09452:  DECFSZ 01,F
09454:  GOTO   944E
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
09458:  MOVLB  3
0945A:  CLRF   x83
0945C:  MOVLW  26
0945E:  MOVWF  x82
09460:  CLRF   x85
09462:  MOVLW  46
09464:  MOVWF  x84
09466:  MOVLB  0
09468:  GOTO   3FDC
....................          
....................          if(recieve_cmd.is_exist)
0946C:  MOVLB  3
0946E:  BTFSC  x78.0
09470:  BRA    9478
09472:  MOVLB  0
09474:  GOTO   9494
09478:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
0947A:  MOVLW  03
0947C:  MOVLB  3
0947E:  MOVWF  x83
09480:  MOVLW  76
09482:  MOVWF  x82
09484:  MOVLB  0
09486:  GOTO   8B80
0948A:  MOVLB  3
0948C:  BCF    x75.1
0948E:  BTFSC  01.0
09490:  BSF    x75.1
09492:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
09494:  MOVLW  32
09496:  MOVWF  FF6
09498:  MOVLW  17
0949A:  MOVWF  FF7
0949C:  MOVLW  00
0949E:  MOVWF  FF8
094A0:  CALL   181E
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
094A4:  MOVLB  3
094A6:  BTFSC  x75.0
094A8:  BRA    94B0
094AA:  MOVLB  0
094AC:  GOTO   94B6
094B0:  MOVLB  0
....................          break;
094B2:  GOTO   94E8
....................          
....................       delay_ms(400);
094B6:  MOVLW  02
094B8:  MOVLB  3
094BA:  MOVWF  x82
094BC:  MOVLB  0
094BE:  MOVLW  C8
094C0:  MOVLB  8
094C2:  MOVWF  x44
094C4:  MOVLB  0
094C6:  CALL   179E
094CA:  MOVLB  3
094CC:  DECFSZ x82,F
094CE:  BRA    94D4
094D0:  BRA    94D8
094D2:  MOVLB  0
094D4:  MOVLB  0
094D6:  BRA    94BE
....................       fprintf(PC, ".");
094D8:  MOVLW  2E
094DA:  MOVLB  8
094DC:  MOVWF  x2F
094DE:  MOVLB  0
094E0:  CALL   17CC
094E4:  GOTO   940E
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
094E8:  MOVLW  52
094EA:  MOVWF  FF6
094EC:  MOVLW  17
094EE:  MOVWF  FF7
094F0:  MOVLW  00
094F2:  MOVWF  FF8
094F4:  CALL   181E
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
094F8:  MOVLW  2E
094FA:  MOVLB  8
094FC:  MOVWF  x2F
094FE:  MOVLB  0
09500:  CALL   17CC
....................       delay_ms(1000);
09504:  MOVLW  04
09506:  MOVLB  3
09508:  MOVWF  x82
0950A:  MOVLB  0
0950C:  MOVLW  FA
0950E:  MOVLB  8
09510:  MOVWF  x44
09512:  MOVLB  0
09514:  CALL   179E
09518:  MOVLB  3
0951A:  DECFSZ x82,F
0951C:  BRA    9522
0951E:  BRA    9526
09520:  MOVLB  0
09522:  MOVLB  0
09524:  BRA    950C
09526:  MOVLB  0
09528:  GOTO   94F8
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0952C:  MOVLW  92
0952E:  MOVWF  FF6
09530:  MOVLW  17
09532:  MOVWF  FF7
09534:  MOVLW  00
09536:  MOVWF  FF8
09538:  CALL   181E
....................    
.................... }
.................... 
0953C:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
