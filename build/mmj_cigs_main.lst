CCS PCM C Compiler, Version 5.104, 57077               20-6-25 13:44

               Filename:   build\mmj_cigs_main.lst

               ROM used:   14079 words (86%)
                           Largest free fragment is 2048
               RAM used:   1265 (62%) at main() level
                           1611 (79%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  30
0001:  GOTO   5E2
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06A
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005A:  DATA D4,34
005B:  DATA ED,32
005C:  DATA 72,10
005D:  DATA 49,37
005E:  DATA 69,3A
005F:  DATA E9,30
0060:  DATA EC,34
0061:  DATA FA,32
0062:  DATA 0D,05
0063:  DATA 00,00
0064:  DATA 89,21
0065:  DATA EF,36
0066:  DATA 70,36
0067:  DATA 65,3A
0068:  DATA E5,06
0069:  DATA 0A,00
*
0083:  DATA D5,20
0084:  DATA 52,2A
0085:  DATA A0,24
0086:  DATA EE,34
0087:  DATA F4,34
0088:  DATA 61,36
0089:  DATA 69,3D
008A:  DATA E5,06
008B:  DATA 0A,00
008C:  DATA 89,21
008D:  DATA EF,36
008E:  DATA 70,36
008F:  DATA 65,3A
0090:  DATA E5,06
0091:  DATA 0A,00
0092:  DATA CD,24
0093:  DATA D3,29
0094:  DATA C9,27
0095:  DATA 4E,10
0096:  DATA 46,26
0097:  DATA C1,29
0098:  DATA 48,10
0099:  DATA 49,37
009A:  DATA 69,3A
009B:  DATA E9,30
009C:  DATA EC,34
009D:  DATA FA,32
009E:  DATA 0D,05
009F:  DATA 00,01
00A0:  DATA 09,23
00A1:  DATA EC,30
00A2:  DATA 73,34
00A3:  DATA A0,34
00A4:  DATA 73,10
00A5:  DATA EE,37
00A6:  DATA 74,10
00A7:  DATA E3,37
00A8:  DATA 6E,37
00A9:  DATA E5,31
00AA:  DATA F4,32
00AB:  DATA E4,06
00AC:  DATA 0A,00
00AD:  DATA 09,23
00AE:  DATA EC,30
00AF:  DATA 73,34
00B0:  DATA A0,34
00B1:  DATA 73,10
00B2:  DATA E3,37
00B3:  DATA 6E,37
00B4:  DATA E5,31
00B5:  DATA F4,32
00B6:  DATA E4,06
00B7:  DATA 0A,00
00B8:  DATA 89,29
00B9:  DATA 4D,23
00BA:  DATA 20,28
00BB:  DATA C9,21
00BC:  DATA CC,27
00BD:  DATA 47,10
00BE:  DATA D5,39
00BF:  DATA 65,10
00C0:  DATA C3,37
00C1:  DATA 75,37
00C2:  DATA F4,32
00C3:  DATA 72,1D
00C4:  DATA A0,12
00C5:  DATA EC,3A
00C6:  DATA 0D,05
00C7:  DATA 00,00
00C8:  DATA 89,29
00C9:  DATA 4D,23
00CA:  DATA 20,28
00CB:  DATA C9,21
00CC:  DATA CC,27
00CD:  DATA 47,10
00CE:  DATA CC,37
00CF:  DATA 6F,38
00D0:  DATA A0,21
00D1:  DATA EF,3A
00D2:  DATA 6E,3A
00D3:  DATA 65,39
00D4:  DATA 3A,10
00D5:  DATA A5,3A
00D6:  DATA 0D,05
00D7:  DATA 00,05
00D8:  DATA 89,29
00D9:  DATA 4D,23
00DA:  DATA A0,26
00DB:  DATA C5,20
00DC:  DATA 53,10
00DD:  DATA D5,39
00DE:  DATA 65,10
00DF:  DATA C3,37
00E0:  DATA 75,37
00E1:  DATA F4,32
00E2:  DATA 72,1D
00E3:  DATA A0,12
00E4:  DATA EC,3A
00E5:  DATA 0D,05
00E6:  DATA 00,01
00E7:  DATA 89,29
00E8:  DATA 4D,23
00E9:  DATA A0,26
00EA:  DATA C5,20
00EB:  DATA 53,10
00EC:  DATA CC,37
00ED:  DATA 6F,38
00EE:  DATA A0,21
00EF:  DATA EF,3A
00F0:  DATA 6E,3A
00F1:  DATA 65,39
00F2:  DATA 3A,10
00F3:  DATA A5,3A
00F4:  DATA 0D,05
00F5:  DATA 00,01
00F6:  DATA 89,26
00F7:  DATA C9,29
00F8:  DATA 46,10
00F9:  DATA D0,24
00FA:  DATA 43,26
00FB:  DATA CF,23
00FC:  DATA A0,2A
00FD:  DATA F3,32
00FE:  DATA A0,21
00FF:  DATA EF,3A
0100:  DATA 6E,3A
0101:  DATA 65,39
0102:  DATA 3A,10
0103:  DATA 25,36
0104:  DATA F5,06
0105:  DATA 0A,00
0106:  DATA 89,26
0107:  DATA C9,29
0108:  DATA 46,10
0109:  DATA D0,24
010A:  DATA 43,26
010B:  DATA CF,23
010C:  DATA 20,26
010D:  DATA EF,37
010E:  DATA 70,10
010F:  DATA C3,37
0110:  DATA 75,37
0111:  DATA F4,32
0112:  DATA 72,1D
0113:  DATA A0,12
0114:  DATA F5,06
0115:  DATA 0A,00
0116:  DATA 89,26
0117:  DATA C9,29
0118:  DATA 46,10
0119:  DATA D0,24
011A:  DATA 43,26
011B:  DATA CF,23
011C:  DATA A0,2A
011D:  DATA EE,31
011E:  DATA 6F,38
011F:  DATA F9,32
0120:  DATA 64,10
0121:  DATA C3,37
0122:  DATA 75,37
0123:  DATA F4,32
0124:  DATA 72,1D
0125:  DATA A0,12
0126:  DATA EC,3A
0127:  DATA 0D,05
0128:  DATA 00,01
0129:  DATA 89,26
012A:  DATA C9,29
012B:  DATA 46,10
012C:  DATA CD,22
012D:  DATA C1,29
012E:  DATA A0,2A
012F:  DATA F3,32
0130:  DATA A0,21
0131:  DATA EF,3A
0132:  DATA 6E,3A
0133:  DATA 65,39
0134:  DATA 3A,10
0135:  DATA 25,36
0136:  DATA F5,06
0137:  DATA 0A,00
0138:  DATA 89,26
0139:  DATA C9,29
013A:  DATA 46,10
013B:  DATA CD,22
013C:  DATA C1,29
013D:  DATA 20,26
013E:  DATA EF,37
013F:  DATA 70,10
0140:  DATA C3,37
0141:  DATA 75,37
0142:  DATA F4,32
0143:  DATA 72,1D
0144:  DATA A0,12
0145:  DATA F5,06
0146:  DATA 0A,00
0147:  DATA 89,26
0148:  DATA C9,29
0149:  DATA 46,10
014A:  DATA CD,22
014B:  DATA C1,29
014C:  DATA A0,2A
014D:  DATA EE,31
014E:  DATA 6F,38
014F:  DATA F9,32
0150:  DATA 64,10
0151:  DATA C3,37
0152:  DATA 75,37
0153:  DATA F4,32
0154:  DATA 72,1D
0155:  DATA A0,12
0156:  DATA EC,3A
0157:  DATA 0D,05
0158:  DATA 00,01
0159:  DATA C3,37
015A:  DATA 6D,38
015B:  DATA EC,32
015C:  DATA F4,32
015D:  DATA 0D,05
015E:  DATA 00,00
015F:  DATA 55,38
0160:  DATA E4,30
0161:  DATA F4,32
0162:  DATA A0,26
0163:  DATA C9,29
0164:  DATA 46,10
0165:  DATA 41,32
0166:  DATA 64,39
0167:  DATA E5,39
0168:  DATA 73,10
0169:  DATA 41,39
016A:  DATA E5,30
016B:  DATA 0D,05
016C:  DATA 00,00
016D:  DATA 5B,28
016E:  DATA C9,21
016F:  DATA CC,27
0170:  DATA C7,2E
0171:  DATA 20,1D
0172:  DATA 20,00
0173:  DATA CD,34
0174:  DATA F3,39
0175:  DATA E9,37
0176:  DATA 6E,10
0177:  DATA 46,36
0178:  DATA E1,39
0179:  DATA 68,10
017A:  DATA E9,39
017B:  DATA 20,37
017C:  DATA 6F,3A
017D:  DATA A0,31
017E:  DATA 6F,37
017F:  DATA EE,32
0180:  DATA 63,3A
0181:  DATA 65,32
0182:  DATA 0D,05
0183:  DATA 00,00
0184:  DATA C9,27
0185:  DATA A0,24
0186:  DATA EE,34
0187:  DATA F4,34
0188:  DATA 61,36
0189:  DATA 69,3D
018A:  DATA E5,06
018B:  DATA 0A,00
018C:  DATA 89,21
018D:  DATA EF,36
018E:  DATA 70,36
018F:  DATA 65,3A
0190:  DATA E5,06
0191:  DATA 0A,00
0192:  DATA 41,22
0193:  DATA 43,10
0194:  DATA 49,37
0195:  DATA 69,3A
0196:  DATA E9,30
0197:  DATA EC,34
0198:  DATA FA,32
0199:  DATA 0D,05
019A:  DATA 00,01
019B:  DATA 89,21
019C:  DATA EF,36
019D:  DATA 70,36
019E:  DATA 65,3A
019F:  DATA E5,06
01A0:  DATA 0A,00
01A1:  DATA 53,3A
01A2:  DATA 61,39
01A3:  DATA 74,10
01A4:  DATA D3,2B
01A5:  DATA C5,22
01A6:  DATA D0,06
01A7:  DATA 0A,00
01A8:  DATA 89,29
01A9:  DATA F7,32
01AA:  DATA 65,38
01AB:  DATA A0,39
01AC:  DATA F4,32
01AD:  DATA 70,10
01AE:  DATA 3A,10
01AF:  DATA A5,3A
01B0:  DATA 0D,05
01B1:  DATA 00,01
01B2:  DATA 45,27
01B3:  DATA 44,10
01B4:  DATA D3,2B
01B5:  DATA C5,22
01B6:  DATA D0,06
01B7:  DATA 0A,00
01B8:  DATA CC,37
01B9:  DATA E7,33
01BA:  DATA 65,32
01BB:  DATA A0,21
01BC:  DATA C9,23
01BD:  DATA 53,10
01BE:  DATA E4,30
01BF:  DATA F4,30
01C0:  DATA 0D,05
01C1:  DATA 80,00
01C2:  DATA D3,26
01C3:  DATA 46,10
01C4:  DATA E4,30
01C5:  DATA F4,30
01C6:  DATA 20,36
01C7:  DATA E9,39
01C8:  DATA 74,10
01C9:  DATA E9,39
01CA:  DATA 20,33
01CB:  DATA 75,36
01CC:  DATA EC,10
01CD:  DATA A1,10
01CE:  DATA 0D,05
01CF:  DATA 00,00
01D0:  DATA D3,26
01D1:  DATA 46,10
01D2:  DATA E4,30
01D3:  DATA F4,30
01D4:  DATA 20,36
01D5:  DATA E9,39
01D6:  DATA 74,10
01D7:  DATA E9,39
01D8:  DATA A0,32
01D9:  DATA 6D,38
01DA:  DATA F4,3C
01DB:  DATA 0D,05
01DC:  DATA 00,00
01DD:  DATA 0D,05
01DE:  DATA 53,3A
01DF:  DATA 61,39
01E0:  DATA 74,10
01E1:  DATA ED,30
01E2:  DATA EB,32
01E3:  DATA 5F,39
01E4:  DATA E5,31
01E5:  DATA E5,34
01E6:  DATA F6,32
01E7:  DATA DF,31
01E8:  DATA EF,36
01E9:  DATA ED,30
01EA:  DATA 6E,32
01EB:  DATA 0D,05
01EC:  DATA 00,01
01ED:  DATA 89,2D
01EE:  DATA C2,27
01EF:  DATA D3,29
01F0:  DATA 5D,10
01F1:  DATA 3E,1F
01F2:  DATA 3E,10
01F3:  DATA 00,01
01F4:  DATA 45,37
01F5:  DATA 64,10
01F6:  DATA ED,30
01F7:  DATA EB,32
01F8:  DATA 5F,39
01F9:  DATA E5,31
01FA:  DATA 69,3B
01FB:  DATA E5,2F
01FC:  DATA E3,37
01FD:  DATA ED,36
01FE:  DATA 61,37
01FF:  DATA E4,06
0200:  DATA 8A,06
0201:  DATA 0A,00
0202:  DATA F3,34
0203:  DATA 67,37
0204:  DATA 61,36
0205:  DATA A0,32
0206:  DATA 6E,32
0207:  DATA A0,3B
0208:  DATA 69,3A
0209:  DATA 68,10
020A:  DATA 53,23
020B:  DATA C4,06
020C:  DATA 0A,00
020D:  DATA E4,37
020E:  DATA EE,13
020F:  DATA 74,10
0210:  DATA E6,34
0211:  DATA 6E,32
0212:  DATA A0,29
0213:  DATA 46,22
0214:  DATA 0D,05
0215:  DATA 00,00
0216:  DATA 89,16
0217:  DATA 3E,10
0218:  DATA 49,37
0219:  DATA F6,30
021A:  DATA EC,34
021B:  DATA 64,10
021C:  DATA 46,39
021D:  DATA E1,36
021E:  DATA 65,10
021F:  DATA 49,22
0220:  DATA 20,39
0221:  DATA E5,31
0222:  DATA E5,34
0223:  DATA F6,32
0224:  DATA 64,1D
0225:  DATA A0,12
0226:  DATA D8,06
0227:  DATA 0A,00
0228:  DATA 89,16
0229:  DATA 3E,10
022A:  DATA 43,29
022B:  DATA 43,10
022C:  DATA 65,39
022D:  DATA F2,37
022E:  DATA F2,10
022F:  DATA 0D,05
0230:  DATA 00,01
0231:  DATA 89,04
0232:  DATA 2D,1F
0233:  DATA 20,39
0234:  DATA E5,31
0235:  DATA E5,34
0236:  DATA F6,32
0237:  DATA 64,10
0238:  DATA 43,29
0239:  DATA 43,1D
023A:  DATA A0,12
023B:  DATA D8,06
023C:  DATA 0A,00
023D:  DATA 89,04
023E:  DATA 20,10
023F:  DATA A0,31
0240:  DATA 6F,36
0241:  DATA EC,32
0242:  DATA 63,3A
0243:  DATA A0,21
0244:  DATA D2,21
0245:  DATA 20,1D
0246:  DATA A0,12
0247:  DATA D8,06
0248:  DATA 0A,00
0249:  DATA 89,16
024A:  DATA 3E,10
024B:  DATA 49,37
024C:  DATA F6,30
024D:  DATA EC,34
024E:  DATA 64,10
024F:  DATA E4,32
0250:  DATA F6,34
0251:  DATA E3,32
0252:  DATA A0,24
0253:  DATA 44,10
0254:  DATA F2,32
0255:  DATA E3,32
0256:  DATA 69,3B
0257:  DATA 65,32
0258:  DATA 0D,05
0259:  DATA 00,01
025A:  DATA 89,04
025B:  DATA 2D,1F
025C:  DATA 20,39
025D:  DATA E5,31
025E:  DATA E5,34
025F:  DATA F6,32
0260:  DATA 64,1D
0261:  DATA 20,10
0262:  DATA 20,10
0263:  DATA A0,12
0264:  DATA D8,06
0265:  DATA 0A,00
0266:  DATA 89,04
0267:  DATA 20,10
0268:  DATA A0,26
0269:  DATA 79,10
026A:  DATA E4,32
026B:  DATA F6,34
026C:  DATA E3,32
026D:  DATA A0,24
026E:  DATA 44,1D
026F:  DATA A0,12
0270:  DATA D8,06
0271:  DATA 0A,00
0272:  DATA 89,2D
0273:  DATA C2,27
0274:  DATA D3,29
0275:  DATA 5D,10
0276:  DATA 3C,1E
0277:  DATA 3C,10
0278:  DATA 00,01
0279:  DATA 89,16
027A:  DATA 3E,10
027B:  DATA 46,39
027C:  DATA E1,36
027D:  DATA 65,10
027E:  DATA 49,22
027F:  DATA 3A,10
0280:  DATA 25,2C
0281:  DATA 0D,05
0282:  DATA 00,01
0283:  DATA 89,16
0284:  DATA 3E,10
0285:  DATA C3,37
0286:  DATA 6E,3A
0287:  DATA 65,37
0288:  DATA 74,10
0289:  DATA F3,34
028A:  DATA FA,32
028B:  DATA 3A,10
028C:  DATA 25,32
028D:  DATA 0D,05
028E:  DATA 00,10
028F:  DATA 53,3A
0290:  DATA 61,39
0291:  DATA 74,10
0292:  DATA D3,26
0293:  DATA 46,10
0294:  DATA F5,39
0295:  DATA 69,37
0296:  DATA 67,10
0297:  DATA F2,32
0298:  DATA F1,32
0299:  DATA 73,3A
029A:  DATA A0,39
029B:  DATA E5,30
029C:  DATA F1,3A
029D:  DATA 65,37
029E:  DATA E3,32
029F:  DATA 0D,05
02A0:  DATA 00,01
02A1:  DATA 45,39
02A2:  DATA F2,37
02A3:  DATA F2,10
02A4:  DATA 20,29
02A5:  DATA E5,31
02A6:  DATA E5,34
02A7:  DATA F6,34
02A8:  DATA EE,33
02A9:  DATA A0,31
02AA:  DATA EF,36
02AB:  DATA ED,30
02AC:  DATA 6E,32
02AD:  DATA A0,34
02AE:  DATA EE,31
02AF:  DATA 6F,37
02B0:  DATA F3,34
02B1:  DATA 73,3A
02B2:  DATA 65,37
02B3:  DATA 74,10
02B4:  DATA F7,34
02B5:  DATA 74,34
02B6:  DATA 20,3A
02B7:  DATA E8,32
02B8:  DATA 20,32
02B9:  DATA E5,39
02BA:  DATA E9,33
02BB:  DATA EE,06
02BC:  DATA 0A,00
02BD:  DATA D3,26
02BE:  DATA 46,10
02BF:  DATA F5,39
02C0:  DATA 65,10
02C1:  DATA F2,32
02C2:  DATA F1,3A
02C3:  DATA E5,39
02C4:  DATA 74,10
02C5:  DATA 61,36
02C6:  DATA EC,37
02C7:  DATA F7,32
02C8:  DATA E4,06
02C9:  DATA 0A,00
02CA:  DATA D3,26
02CB:  DATA 46,10
02CC:  DATA F5,39
02CD:  DATA 65,10
02CE:  DATA F2,32
02CF:  DATA F1,3A
02D0:  DATA E5,39
02D1:  DATA 74,10
02D2:  DATA E4,32
02D3:  DATA EE,3C
02D4:  DATA 65,32
02D5:  DATA 0D,05
02D6:  DATA 00,01
02D7:  DATA D2,32
02D8:  DATA 74,39
02D9:  DATA 79,10
02DA:  DATA F2,32
02DB:  DATA F1,3A
02DC:  DATA E5,39
02DD:  DATA 74,10
02DE:  DATA F4,37
02DF:  DATA 20,21
02E0:  DATA CF,29
02E1:  DATA 53,10
02E2:  DATA D0,24
02E3:  DATA C3,06
02E4:  DATA 0A,00
02E5:  DATA 45,39
02E6:  DATA F2,37
02E7:  DATA F2,10
02E8:  DATA 20,29
02E9:  DATA E5,31
02EA:  DATA E5,34
02EB:  DATA F6,34
02EC:  DATA EE,33
02ED:  DATA A0,31
02EE:  DATA EF,36
02EF:  DATA ED,30
02F0:  DATA 6E,32
02F1:  DATA A0,34
02F2:  DATA EE,31
02F3:  DATA 6F,37
02F4:  DATA F3,34
02F5:  DATA 73,3A
02F6:  DATA 65,37
02F7:  DATA 74,10
02F8:  DATA F7,34
02F9:  DATA 74,34
02FA:  DATA 20,3A
02FB:  DATA E8,32
02FC:  DATA 20,32
02FD:  DATA E5,39
02FE:  DATA E9,33
02FF:  DATA EE,06
0300:  DATA 0A,00
0301:  DATA 45,37
0302:  DATA 64,10
0303:  DATA D3,26
0304:  DATA 46,10
0305:  DATA F5,39
0306:  DATA 69,37
0307:  DATA 67,10
0308:  DATA F2,32
0309:  DATA F1,32
030A:  DATA 73,3A
030B:  DATA A0,39
030C:  DATA E5,30
030D:  DATA F1,3A
030E:  DATA 65,37
030F:  DATA E3,32
0310:  DATA 0D,05
0311:  DATA 00,00
0312:  DATA 53,3A
0313:  DATA 61,39
0314:  DATA 74,10
0315:  DATA CD,27
0316:  DATA C4,22
0317:  DATA 20,22
0318:  DATA D5,26
0319:  DATA CD,2C
031A:  DATA 0D,05
031B:  DATA 00,01
031C:  DATA 89,26
031D:  DATA 4F,22
031E:  DATA 45,10
031F:  DATA 20,10
0320:  DATA 20,10
0321:  DATA 3A,10
0322:  DATA 25,18
0323:  DATA 32,2C
0324:  DATA 0D,05
0325:  DATA 00,01
0326:  DATA 09,28
0327:  DATA 61,39
0328:  DATA E1,36
0329:  DATA 31,10
032A:  DATA 20,10
032B:  DATA 3A,10
032C:  DATA 30,3C
032D:  DATA 25,18
032E:  DATA 38,26
032F:  DATA D8,06
0330:  DATA 0A,00
0331:  DATA 09,28
0332:  DATA 61,39
0333:  DATA E1,36
0334:  DATA 32,10
0335:  DATA 20,10
0336:  DATA 3A,10
0337:  DATA 30,3C
0338:  DATA 25,18
0339:  DATA 34,26
033A:  DATA D8,06
033B:  DATA 0A,00
033C:  DATA 45,37
033D:  DATA 64,10
033E:  DATA CD,27
033F:  DATA C4,22
0340:  DATA 20,22
0341:  DATA D5,26
0342:  DATA CD,2C
0343:  DATA 0D,05
0344:  DATA 00,00
0345:  DATA 53,3A
0346:  DATA 61,39
0347:  DATA 74,10
0348:  DATA CD,27
0349:  DATA C4,22
034A:  DATA A0,26
034B:  DATA C5,20
034C:  DATA D3,2A
034D:  DATA D2,22
034E:  DATA 0D,05
034F:  DATA 00,00
0350:  DATA 53,3A
0351:  DATA 61,39
0352:  DATA 74,10
0353:  DATA CD,27
0354:  DATA C4,22
0355:  DATA A0,26
0356:  DATA C5,20
0357:  DATA D3,2A
0358:  DATA D2,22
0359:  DATA 20,2B
035A:  DATA 6F,36
035B:  DATA F4,30
035C:  DATA E7,32
035D:  DATA 0D,05
035E:  DATA 00,00
035F:  DATA 53,3A
0360:  DATA 61,39
0361:  DATA 74,10
0362:  DATA D3,2B
0363:  DATA C5,22
0364:  DATA D0,06
0365:  DATA 0A,00
0366:  DATA 89,29
0367:  DATA F7,32
0368:  DATA 65,38
0369:  DATA A0,39
036A:  DATA F4,32
036B:  DATA 70,10
036C:  DATA 3A,10
036D:  DATA A5,3A
036E:  DATA 0D,05
036F:  DATA 00,01
0370:  DATA 45,27
0371:  DATA 44,10
0372:  DATA D3,2B
0373:  DATA C5,22
0374:  DATA D0,06
0375:  DATA 0A,00
0376:  DATA F4,32
0377:  DATA 6D,38
0378:  DATA 5F,3A
0379:  DATA 6F,38
037A:  DATA 3A,10
037B:  DATA 25,2C
037C:  DATA 0D,05
037D:  DATA 00,01
037E:  DATA F4,32
037F:  DATA 6D,38
0380:  DATA 5F,31
0381:  DATA 6F,3A
0382:  DATA 3A,10
0383:  DATA 25,2C
0384:  DATA 0D,05
0385:  DATA 00,00
0386:  DATA 70,32
0387:  DATA 5F,3B
0388:  DATA 61,36
0389:  DATA F5,32
038A:  DATA 3A,10
038B:  DATA 25,2C
038C:  DATA 0D,05
038D:  DATA 00,00
038E:  DATA E3,34
038F:  DATA E7,39
0390:  DATA 5F,3B
0391:  DATA 61,36
0392:  DATA F5,32
0393:  DATA 3A,10
0394:  DATA 25,2C
0395:  DATA 0D,05
0396:  DATA 00,00
0397:  DATA E3,3A
0398:  DATA 72,39
0399:  DATA 65,37
039A:  DATA F4,2F
039B:  DATA F6,30
039C:  DATA EC,3A
039D:  DATA 65,1D
039E:  DATA A0,12
039F:  DATA D8,06
03A0:  DATA 0A,00
03A1:  DATA F6,37
03A2:  DATA 6C,3A
03A3:  DATA E1,33
03A4:  DATA E5,2F
03A5:  DATA F6,30
03A6:  DATA EC,3A
03A7:  DATA 65,1D
03A8:  DATA A0,12
03A9:  DATA D8,06
03AA:  DATA 0A,00
03AB:  DATA 53,3A
03AC:  DATA 61,39
03AD:  DATA 74,10
03AE:  DATA 46,36
03AF:  DATA E1,39
03B0:  DATA 68,10
03B1:  DATA 45,39
03B2:  DATA E1,39
03B3:  DATA 65,10
03B4:  DATA 41,36
03B5:  DATA EC,06
03B6:  DATA 0A,00
03B7:  DATA 45,37
03B8:  DATA 64,10
03B9:  DATA 46,36
03BA:  DATA E1,39
03BB:  DATA 68,10
03BC:  DATA 45,39
03BD:  DATA E1,39
03BE:  DATA 65,10
03BF:  DATA 41,36
03C0:  DATA EC,06
03C1:  DATA 0A,00
03C2:  DATA 53,3A
03C3:  DATA 61,39
03C4:  DATA 74,10
03C5:  DATA 46,36
03C6:  DATA E1,39
03C7:  DATA 68,10
03C8:  DATA 45,39
03C9:  DATA E1,39
03CA:  DATA 65,10
03CB:  DATA 31,10
03CC:  DATA D3,32
03CD:  DATA 63,3A
03CE:  DATA 6F,39
03CF:  DATA 0D,05
03D0:  DATA 00,01
03D1:  DATA 89,29
03D2:  DATA E5,31
03D3:  DATA F4,37
03D4:  DATA 72,10
03D5:  DATA 41,32
03D6:  DATA 64,39
03D7:  DATA E5,39
03D8:  DATA 73,1D
03D9:  DATA 20,18
03DA:  DATA F8,12
03DB:  DATA 30,1C
03DC:  DATA 4C,2C
03DD:  DATA 0D,05
03DE:  DATA 00,01
03DF:  DATA 45,37
03E0:  DATA 64,10
03E1:  DATA 46,36
03E2:  DATA E1,39
03E3:  DATA 68,10
03E4:  DATA 45,39
03E5:  DATA E1,39
03E6:  DATA 65,10
03E7:  DATA 31,10
03E8:  DATA D3,32
03E9:  DATA 63,3A
03EA:  DATA 6F,39
03EB:  DATA 0D,05
03EC:  DATA 00,00
03ED:  DATA 53,3A
03EE:  DATA 61,39
03EF:  DATA 74,10
03F0:  DATA 46,36
03F1:  DATA E1,39
03F2:  DATA 68,10
03F3:  DATA C3,37
03F4:  DATA F0,3C
03F5:  DATA A0,18
03F6:  DATA A0,29
03F7:  DATA E5,31
03F8:  DATA F4,37
03F9:  DATA F2,06
03FA:  DATA 0A,00
03FB:  DATA 89,29
03FC:  DATA 75,31
03FD:  DATA F3,32
03FE:  DATA 63,3A
03FF:  DATA 6F,39
0400:  DATA A0,20
0401:  DATA 64,32
0402:  DATA F2,32
0403:  DATA F3,39
0404:  DATA 3A,10
0405:  DATA 30,3C
0406:  DATA 25,18
0407:  DATA 38,26
0408:  DATA D8,06
0409:  DATA 0A,00
040A:  DATA 45,37
040B:  DATA 64,10
040C:  DATA 46,36
040D:  DATA E1,39
040E:  DATA 68,10
040F:  DATA C3,37
0410:  DATA F0,3C
0411:  DATA A0,18
0412:  DATA A0,29
0413:  DATA E5,31
0414:  DATA F4,37
0415:  DATA F2,06
0416:  DATA 0A,00
0417:  DATA 53,3A
0418:  DATA 61,39
0419:  DATA 74,10
041A:  DATA 46,36
041B:  DATA E1,39
041C:  DATA 68,10
041D:  DATA 57,39
041E:  DATA 69,3A
041F:  DATA 65,10
0420:  DATA C4,32
0421:  DATA ED,37
0422:  DATA 0D,05
0423:  DATA 00,01
0424:  DATA 89,26
0425:  DATA 4F,22
0426:  DATA 45,10
0427:  DATA 20,10
0428:  DATA 20,10
0429:  DATA 3A,10
042A:  DATA 25,18
042B:  DATA 32,2C
042C:  DATA 0D,05
042D:  DATA 00,01
042E:  DATA 89,20
042F:  DATA 64,32
0430:  DATA F2,32
0431:  DATA F3,39
0432:  DATA 20,10
0433:  DATA 3A,10
0434:  DATA 30,3C
0435:  DATA 25,18
0436:  DATA 38,26
0437:  DATA D8,06
0438:  DATA 0A,00
0439:  DATA 09,28
043A:  DATA E1,31
043B:  DATA EB,32
043C:  DATA 74,27
043D:  DATA F5,36
043E:  DATA 3A,10
043F:  DATA 30,3C
0440:  DATA 25,18
0441:  DATA 34,26
0442:  DATA D8,06
0443:  DATA 0A,00
0444:  DATA 57,39
0445:  DATA 69,3A
0446:  DATA 65,10
0447:  DATA C4,30
0448:  DATA F4,30
0449:  DATA 0D,05
044A:  DATA 00,01
044B:  DATA 45,37
044C:  DATA 64,10
044D:  DATA 46,36
044E:  DATA E1,39
044F:  DATA 68,10
0450:  DATA 57,39
0451:  DATA 69,3A
0452:  DATA 65,10
0453:  DATA C4,32
0454:  DATA ED,37
0455:  DATA 0D,05
0456:  DATA 00,00
0457:  DATA 53,3A
0458:  DATA 61,39
0459:  DATA 74,10
045A:  DATA 46,36
045B:  DATA E1,39
045C:  DATA 68,10
045D:  DATA 57,39
045E:  DATA 69,3A
045F:  DATA 65,10
0460:  DATA B4,35
0461:  DATA C2,3C
0462:  DATA F4,32
0463:  DATA A0,29
0464:  DATA 75,31
0465:  DATA F3,32
0466:  DATA 63,3A
0467:  DATA 6F,39
0468:  DATA 0D,05
0469:  DATA 00,01
046A:  DATA 45,37
046B:  DATA 64,10
046C:  DATA 46,36
046D:  DATA E1,39
046E:  DATA 68,10
046F:  DATA 57,39
0470:  DATA 69,3A
0471:  DATA 65,10
0472:  DATA B4,35
0473:  DATA C2,3C
0474:  DATA F4,32
0475:  DATA A0,29
0476:  DATA 75,31
0477:  DATA F3,32
0478:  DATA 63,3A
0479:  DATA 6F,39
047A:  DATA 0D,05
047B:  DATA 00,00
047C:  DATA 53,3A
047D:  DATA 61,39
047E:  DATA 74,10
047F:  DATA 46,36
0480:  DATA E1,39
0481:  DATA 68,10
0482:  DATA D2,32
0483:  DATA 61,32
0484:  DATA 0D,05
0485:  DATA 00,01
0486:  DATA 89,26
0487:  DATA 4F,22
0488:  DATA 45,10
0489:  DATA 20,10
048A:  DATA 20,10
048B:  DATA 3A,10
048C:  DATA 25,18
048D:  DATA 32,2C
048E:  DATA 0D,05
048F:  DATA 00,01
0490:  DATA 89,20
0491:  DATA 64,32
0492:  DATA F2,32
0493:  DATA F3,39
0494:  DATA 20,10
0495:  DATA 3A,10
0496:  DATA 30,3C
0497:  DATA 25,18
0498:  DATA 38,26
0499:  DATA D8,06
049A:  DATA 0A,00
049B:  DATA 09,28
049C:  DATA E1,31
049D:  DATA EB,32
049E:  DATA 74,27
049F:  DATA F5,36
04A0:  DATA 3A,10
04A1:  DATA 30,3C
04A2:  DATA 25,18
04A3:  DATA 34,26
04A4:  DATA D8,06
04A5:  DATA 0A,00
04A6:  DATA D2,22
04A7:  DATA 41,22
04A8:  DATA 20,22
04A9:  DATA 41,2A
04AA:  DATA C1,06
04AB:  DATA 0A,00
04AC:  DATA CD,34
04AD:  DATA F3,39
04AE:  DATA E9,37
04AF:  DATA 6E,10
04B0:  DATA 46,36
04B1:  DATA E1,39
04B2:  DATA 68,10
04B3:  DATA E9,39
04B4:  DATA 20,37
04B5:  DATA 6F,3A
04B6:  DATA A0,31
04B7:  DATA 6F,37
04B8:  DATA EE,32
04B9:  DATA 63,3A
04BA:  DATA 65,32
04BB:  DATA 0D,05
04BC:  DATA 00,01
04BD:  DATA 45,37
04BE:  DATA 64,10
04BF:  DATA 46,36
04C0:  DATA E1,39
04C1:  DATA 68,10
04C2:  DATA D2,32
04C3:  DATA 61,32
04C4:  DATA 0D,05
04C5:  DATA 00,00
04C6:  DATA 53,3A
04C7:  DATA 61,39
04C8:  DATA 74,10
04C9:  DATA 46,36
04CA:  DATA E1,39
04CB:  DATA 68,10
04CC:  DATA D2,32
04CD:  DATA 61,32
04CE:  DATA A0,20
04CF:  DATA 64,32
04D0:  DATA F2,32
04D1:  DATA F3,39
04D2:  DATA 0D,05
04D3:  DATA 00,01
04D4:  DATA D2,32
04D5:  DATA 61,32
04D6:  DATA 20,22
04D7:  DATA 61,3A
04D8:  DATA 61,1D
04D9:  DATA A0,12
04DA:  DATA 30,19
04DB:  DATA 58,10
04DC:  DATA 25,18
04DD:  DATA 32,2C
04DE:  DATA A0,12
04DF:  DATA 30,19
04E0:  DATA 58,10
04E1:  DATA 25,18
04E2:  DATA 32,2C
04E3:  DATA 0D,05
04E4:  DATA 00,01
04E5:  DATA 45,37
04E6:  DATA 64,10
04E7:  DATA 46,36
04E8:  DATA E1,39
04E9:  DATA 68,10
04EA:  DATA D2,32
04EB:  DATA 61,32
04EC:  DATA A0,20
04ED:  DATA 64,32
04EE:  DATA F2,32
04EF:  DATA F3,39
04F0:  DATA 0D,05
04F1:  DATA 00,00
04F2:  DATA 53,3A
04F3:  DATA 61,39
04F4:  DATA 74,10
04F5:  DATA 46,36
04F6:  DATA E1,39
04F7:  DATA 68,10
04F8:  DATA D3,26
04F9:  DATA 46,10
04FA:  DATA C3,37
04FB:  DATA F0,3C
04FC:  DATA 0D,05
04FD:  DATA 00,01
04FE:  DATA 45,37
04FF:  DATA 64,10
0500:  DATA 46,36
0501:  DATA E1,39
0502:  DATA 68,10
0503:  DATA D3,26
0504:  DATA 46,10
0505:  DATA C3,37
0506:  DATA F0,3C
0507:  DATA 0D,05
0508:  DATA 00,00
0509:  DATA 53,3A
050A:  DATA 61,39
050B:  DATA 74,10
050C:  DATA 46,36
050D:  DATA E1,39
050E:  DATA 68,10
050F:  DATA D3,26
0510:  DATA 46,10
0511:  DATA D2,32
0512:  DATA 61,32
0513:  DATA 0D,05
0514:  DATA 00,01
0515:  DATA D2,32
0516:  DATA 61,32
0517:  DATA 20,22
0518:  DATA 61,3A
0519:  DATA 61,1D
051A:  DATA 20,00
051B:  DATA 0D,05
051C:  DATA 45,37
051D:  DATA 64,10
051E:  DATA 46,36
051F:  DATA E1,39
0520:  DATA 68,10
0521:  DATA D3,26
0522:  DATA 46,10
0523:  DATA D2,32
0524:  DATA 61,32
0525:  DATA 0D,05
0526:  DATA 00,00
0527:  DATA 53,3A
0528:  DATA 61,39
0529:  DATA 74,10
052A:  DATA 46,36
052B:  DATA E1,39
052C:  DATA 68,10
052D:  DATA D3,26
052E:  DATA 46,10
052F:  DATA 57,39
0530:  DATA 69,3A
0531:  DATA E5,06
0532:  DATA 0A,00
0533:  DATA 45,37
0534:  DATA 64,10
0535:  DATA 46,36
0536:  DATA E1,39
0537:  DATA 68,10
0538:  DATA D3,26
0539:  DATA 46,10
053A:  DATA 57,39
053B:  DATA 69,3A
053C:  DATA E5,06
053D:  DATA 0A,00
053E:  DATA 53,3A
053F:  DATA 61,39
0540:  DATA 74,10
0541:  DATA 46,36
0542:  DATA E1,39
0543:  DATA 68,10
0544:  DATA 41,32
0545:  DATA 64,39
0546:  DATA E5,39
0547:  DATA 73,10
0548:  DATA D2,32
0549:  DATA F3,32
054A:  DATA F4,06
054B:  DATA 0A,00
054C:  DATA 45,37
054D:  DATA 64,10
054E:  DATA 46,36
054F:  DATA E1,39
0550:  DATA 68,10
0551:  DATA 41,32
0552:  DATA 64,39
0553:  DATA E5,39
0554:  DATA 73,10
0555:  DATA D2,32
0556:  DATA F3,32
0557:  DATA F4,06
0558:  DATA 0A,00
0559:  DATA 0D,05
055A:  DATA DF,2F
055B:  DATA DF,2F
055C:  DATA DF,2F
055D:  DATA DF,2F
055E:  DATA DF,2F
055F:  DATA DF,2F
0560:  DATA DF,2F
0561:  DATA DF,2F
0562:  DATA DF,2F
0563:  DATA DF,2F
0564:  DATA 0D,05
0565:  DATA 00,01
0566:  DATA DF,2F
0567:  DATA DF,29
0568:  DATA F4,30
0569:  DATA 72,3A
056A:  DATA A0,31
056B:  DATA 6F,38
056C:  DATA F9,2F
056D:  DATA E4,30
056E:  DATA F4,30
056F:  DATA DF,2F
0570:  DATA 0D,05
0571:  DATA 00,01
0572:  DATA 53,3A
0573:  DATA 61,39
0574:  DATA 74,10
0575:  DATA DB,12
0576:  DATA 64,10
0577:  DATA 74,34
0578:  DATA 5D,10
0579:  DATA E4,30
057A:  DATA F4,30
057B:  DATA A0,31
057C:  DATA 6F,38
057D:  DATA F9,06
057E:  DATA 8A,06
057F:  DATA 0A,00
0580:  DATA 0D,05
0581:  DATA DF,2F
0582:  DATA DF,22
0583:  DATA 6E,32
0584:  DATA A0,31
0585:  DATA 6F,38
0586:  DATA F9,2F
0587:  DATA E4,30
0588:  DATA F4,30
0589:  DATA DF,2F
058A:  DATA DF,2F
058B:  DATA 0D,05
058C:  DATA 00,01
058D:  DATA DF,2F
058E:  DATA DF,2F
058F:  DATA DF,2F
0590:  DATA DF,2F
0591:  DATA DF,2F
0592:  DATA DF,2F
0593:  DATA DF,2F
0594:  DATA DF,2F
0595:  DATA DF,2F
0596:  DATA DF,2F
0597:  DATA 0D,05
0598:  DATA 0D,05
0599:  DATA 00,00
059A:  DATA 49,37
059B:  DATA A0,39
059C:  DATA 6D,33
059D:  DATA A0,36
059E:  DATA E9,39
059F:  DATA F3,34
05A0:  DATA 6F,37
05A1:  DATA 20,32
05A2:  DATA 61,3A
05A3:  DATA 61,10
05A4:  DATA 73,3A
05A5:  DATA 61,39
05A6:  DATA 74,10
05A7:  DATA 20,10
05A8:  DATA 61,32
05A9:  DATA 64,39
05AA:  DATA E5,39
05AB:  DATA 73,1D
05AC:  DATA A0,12
05AD:  DATA 4C,2C
05AE:  DATA 0D,05
05AF:  DATA 00,01
05B0:  DATA 49,37
05B1:  DATA A0,39
05B2:  DATA 6D,33
05B3:  DATA A0,36
05B4:  DATA E9,39
05B5:  DATA F3,34
05B6:  DATA 6F,37
05B7:  DATA 20,32
05B8:  DATA 61,3A
05B9:  DATA 61,10
05BA:  DATA 65,37
05BB:  DATA 64,10
05BC:  DATA 20,10
05BD:  DATA 20,10
05BE:  DATA 61,32
05BF:  DATA 64,39
05C0:  DATA E5,39
05C1:  DATA 73,1D
05C2:  DATA A0,12
05C3:  DATA 4C,2C
05C4:  DATA 0D,05
05C5:  DATA 00,01
05C6:  DATA 49,37
05C7:  DATA A0,26
05C8:  DATA C9,29
05C9:  DATA 20,23
05CA:  DATA 4D,10
05CB:  DATA 57,39
05CC:  DATA 69,3A
05CD:  DATA 65,10
05CE:  DATA F3,37
05CF:  DATA 75,39
05D0:  DATA E3,32
05D1:  DATA 20,32
05D2:  DATA 61,3A
05D3:  DATA 61,10
05D4:  DATA 61,32
05D5:  DATA 64,39
05D6:  DATA E5,39
05D7:  DATA 73,1D
05D8:  DATA A0,12
05D9:  DATA 4C,2C
05DA:  DATA 0D,05
05DB:  DATA 00,01
05DC:  DATA 49,37
05DD:  DATA A0,26
05DE:  DATA C9,29
05DF:  DATA 20,23
05E0:  DATA 4D,10
05E1:  DATA 57,39
05E2:  DATA 69,3A
05E3:  DATA 65,10
05E4:  DATA E4,30
05E5:  DATA F4,30
05E6:  DATA A0,39
05E7:  DATA 69,3D
05E8:  DATA 65,10
05E9:  DATA 20,10
05EA:  DATA 20,10
05EB:  DATA 20,10
05EC:  DATA 20,10
05ED:  DATA 20,1D
05EE:  DATA A0,12
05EF:  DATA EC,3A
05F0:  DATA 0D,05
05F1:  DATA 0D,05
05F2:  DATA 00,01
05F3:  DATA D3,34
05F4:  DATA FA,32
05F5:  DATA A0,30
05F6:  DATA F2,32
05F7:  DATA 61,10
05F8:  DATA F2,32
05F9:  DATA 61,32
05FA:  DATA 0D,05
05FB:  DATA 00,01
05FC:  DATA F5,39
05FD:  DATA 65,32
05FE:  DATA DF,39
05FF:  DATA 69,3D
0600:  DATA 65,10
0601:  DATA 3D,10
0602:  DATA 25,36
0603:  DATA 75,10
0604:  DATA A8,39
0605:  DATA F2,31
0606:  DATA 20,18
0607:  DATA F8,12
0608:  DATA 30,1C
0609:  DATA 4C,2C
060A:  DATA A9,06
060B:  DATA 0A,00
060C:  DATA EC,37
060D:  DATA 6F,38
060E:  DATA A0,31
060F:  DATA EF,3A
0610:  DATA 6E,3A
0611:  DATA 3D,10
0612:  DATA 25,32
0613:  DATA 20,10
0614:  DATA A8,39
0615:  DATA F2,31
0616:  DATA 20,18
0617:  DATA F8,12
0618:  DATA 30,1C
0619:  DATA 4C,2C
061A:  DATA A9,06
061B:  DATA 8A,06
061C:  DATA 0A,00
061D:  DATA 57,39
061E:  DATA 61,38
061F:  DATA 20,3A
0620:  DATA F2,34
0621:  DATA E7,33
0622:  DATA 65,39
0623:  DATA 65,32
0624:  DATA 3A,10
0625:  DATA D2,32
0626:  DATA F3,32
0627:  DATA 74,3A
0628:  DATA 69,37
0629:  DATA 67,10
062A:  DATA E4,30
062B:  DATA F4,30
062C:  DATA DF,3B
062D:  DATA F2,34
062E:  DATA F4,32
062F:  DATA DF,30
0630:  DATA 64,32
0631:  DATA 72,10
0632:  DATA F4,37
0633:  DATA A0,39
0634:  DATA F4,30
0635:  DATA 72,3A
0636:  DATA 0D,05
0637:  DATA 00,00
0638:  DATA 55,38
0639:  DATA E4,30
063A:  DATA F4,32
063B:  DATA A0,39
063C:  DATA 69,3D
063D:  DATA 65,10
063E:  DATA 61,39
063F:  DATA E5,30
0640:  DATA 0D,05
0641:  DATA 00,01
0642:  DATA F5,39
0643:  DATA 65,32
0644:  DATA DF,39
0645:  DATA 69,3D
0646:  DATA 65,10
0647:  DATA 3D,10
0648:  DATA 25,36
0649:  DATA E4,06
064A:  DATA 0A,00
064B:  DATA EC,37
064C:  DATA 6F,38
064D:  DATA DF,31
064E:  DATA EF,3A
064F:  DATA 6E,3A
0650:  DATA A0,1E
0651:  DATA A0,12
0652:  DATA F5,06
0653:  DATA 8A,06
0654:  DATA 0A,00
0655:  DATA 0D,05
0656:  DATA DF,2F
0657:  DATA DF,2F
0658:  DATA DF,2F
0659:  DATA DF,2F
065A:  DATA DF,2F
065B:  DATA DF,2F
065C:  DATA DF,2F
065D:  DATA DF,2F
065E:  DATA DF,2F
065F:  DATA DF,2F
0660:  DATA DF,2F
0661:  DATA DF,2F
0662:  DATA DF,2F
0663:  DATA DF,2F
0664:  DATA DF,2F
0665:  DATA 0D,05
0666:  DATA DF,2F
0667:  DATA DF,2F
0668:  DATA DF,29
0669:  DATA F4,30
066A:  DATA 72,3A
066B:  DATA A0,32
066C:  DATA F8,32
066D:  DATA E3,3A
066E:  DATA F4,32
066F:  DATA DF,36
0670:  DATA E9,39
0671:  DATA F3,34
0672:  DATA 6F,37
0673:  DATA DF,2F
0674:  DATA DF,2F
0675:  DATA DF,06
0676:  DATA 8A,06
0677:  DATA 0A,00
0678:  DATA C3,37
0679:  DATA ED,36
067A:  DATA 61,37
067B:  DATA 64,10
067C:  DATA 49,22
067D:  DATA 3A,10
067E:  DATA 25,2C
067F:  DATA 0D,05
0680:  DATA 0D,05
0681:  DATA 00,01
0682:  DATA 89,04
0683:  DATA 2D,1F
0684:  DATA A0,24
0685:  DATA 6E,3B
0686:  DATA 61,36
0687:  DATA 69,32
0688:  DATA A0,21
0689:  DATA 4D,22
068A:  DATA A0,24
068B:  DATA C4,10
068C:  DATA 0D,05
068D:  DATA 00,01
068E:  DATA 0D,05
068F:  DATA DF,2F
0690:  DATA DF,2F
0691:  DATA DF,2F
0692:  DATA 45,37
0693:  DATA 64,10
0694:  DATA 65,3C
0695:  DATA E5,31
0696:  DATA 75,3A
0697:  DATA E5,2F
0698:  DATA ED,34
0699:  DATA F3,39
069A:  DATA E9,37
069B:  DATA EE,2F
069C:  DATA DF,2F
069D:  DATA DF,2F
069E:  DATA DF,06
069F:  DATA 8A,2F
06A0:  DATA DF,2F
06A1:  DATA DF,2F
06A2:  DATA DF,2F
06A3:  DATA DF,2F
06A4:  DATA DF,2F
06A5:  DATA DF,2F
06A6:  DATA DF,2F
06A7:  DATA DF,2F
06A8:  DATA DF,2F
06A9:  DATA DF,2F
06AA:  DATA DF,2F
06AB:  DATA DF,2F
06AC:  DATA DF,2F
06AD:  DATA DF,2F
06AE:  DATA DF,2F
06AF:  DATA 0D,05
06B0:  DATA 00,00
06B1:  DATA 53,3A
06B2:  DATA 61,39
06B3:  DATA 74,10
06B4:  DATA 65,3C
06B5:  DATA E5,31
06B6:  DATA 75,3A
06B7:  DATA E5,2F
06B8:  DATA E3,37
06B9:  DATA ED,36
06BA:  DATA 61,37
06BB:  DATA E4,06
06BC:  DATA 0A,00
06BD:  DATA 89,16
06BE:  DATA 3E,10
06BF:  DATA 55,38
06C0:  DATA EC,34
06C1:  DATA EE,35
06C2:  DATA A0,31
06C3:  DATA EF,36
06C4:  DATA ED,30
06C5:  DATA 6E,32
06C6:  DATA 0D,05
06C7:  DATA 00,01
06C8:  DATA 09,10
06C9:  DATA 20,10
06CA:  DATA 54,39
06CB:  DATA 61,37
06CC:  DATA F3,36
06CD:  DATA 69,3A
06CE:  DATA A0,20
06CF:  DATA E3,35
06D0:  DATA EE,37
06D1:  DATA EC,32
06D2:  DATA 67,32
06D3:  DATA E5,06
06D4:  DATA 0A,00
06D5:  DATA 89,16
06D6:  DATA 3E,10
06D7:  DATA 53,3A
06D8:  DATA 61,3A
06D9:  DATA F5,39
06DA:  DATA A0,31
06DB:  DATA E8,32
06DC:  DATA E3,35
06DD:  DATA 0D,05
06DE:  DATA 00,01
06DF:  DATA 09,10
06E0:  DATA 20,10
06E1:  DATA 54,39
06E2:  DATA 61,37
06E3:  DATA F3,36
06E4:  DATA 69,3A
06E5:  DATA A0,26
06E6:  DATA C9,29
06E7:  DATA A0,26
06E8:  DATA C3,2A
06E9:  DATA A0,29
06EA:  DATA F4,30
06EB:  DATA F4,3A
06EC:  DATA F3,06
06ED:  DATA 0A,00
06EE:  DATA E6,34
06EF:  DATA EE,34
06F0:  DATA 73,34
06F1:  DATA 65,32
06F2:  DATA A0,34
06F3:  DATA 6E,10
06F4:  DATA 73,3A
06F5:  DATA 61,3A
06F6:  DATA F5,39
06F7:  DATA DF,31
06F8:  DATA E8,32
06F9:  DATA E3,35
06FA:  DATA 0D,05
06FB:  DATA 00,00
06FC:  DATA 89,16
06FD:  DATA 3E,10
06FE:  DATA D3,26
06FF:  DATA 46,10
0700:  DATA 61,3B
0701:  DATA E1,34
0702:  DATA EC,30
0703:  DATA 62,36
0704:  DATA 65,10
0705:  DATA 63,34
0706:  DATA E5,31
0707:  DATA EB,06
0708:  DATA 0A,00
0709:  DATA 09,10
070A:  DATA 20,10
070B:  DATA 54,39
070C:  DATA 61,37
070D:  DATA F3,36
070E:  DATA 69,3A
070F:  DATA A0,20
0710:  DATA E3,35
0711:  DATA EE,37
0712:  DATA EC,32
0713:  DATA 67,32
0714:  DATA E5,06
0715:  DATA 0A,00
0716:  DATA 89,04
0717:  DATA 2D,1F
0718:  DATA A0,30
0719:  DATA 6C,36
071A:  DATA EF,3B
071B:  DATA E4,06
071C:  DATA 0A,00
071D:  DATA 89,04
071E:  DATA 2D,1F
071F:  DATA 20,32
0720:  DATA 65,37
0721:  DATA F9,32
0722:  DATA E4,06
0723:  DATA 0A,00
0724:  DATA 0D,05
0725:  DATA 0D,05
0726:  DATA 0D,05
0727:  DATA BD,1E
0728:  DATA BD,1E
0729:  DATA BD,1E
072A:  DATA BD,1E
072B:  DATA BD,1E
072C:  DATA BD,1E
072D:  DATA BD,1E
072E:  DATA BD,1E
072F:  DATA BD,1E
0730:  DATA BD,1E
0731:  DATA BD,1E
0732:  DATA BD,1E
0733:  DATA BD,1E
0734:  DATA BD,1E
0735:  DATA BD,1E
0736:  DATA BD,1E
0737:  DATA BD,1E
0738:  DATA BD,1E
0739:  DATA BD,1E
073A:  DATA BD,1E
073B:  DATA BD,1E
073C:  DATA BD,1E
073D:  DATA BD,1E
073E:  DATA BD,1E
073F:  DATA BD,1E
0740:  DATA BD,1E
0741:  DATA BD,1E
0742:  DATA BD,1E
0743:  DATA BD,1E
0744:  DATA BD,1E
0745:  DATA 0D,05
0746:  DATA 00,01
0747:  DATA 54,34
0748:  DATA E9,39
0749:  DATA A0,34
074A:  DATA 73,10
074B:  DATA CD,27
074C:  DATA CD,24
074D:  DATA CA,24
074E:  DATA A0,21
074F:  DATA C9,23
0750:  DATA 53,10
0751:  DATA D0,24
0752:  DATA 43,10
0753:  DATA 42,21
0754:  DATA 4D,10
0755:  DATA E6,37
0756:  DATA 72,10
0757:  DATA CD,24
0758:  DATA D3,1B
0759:  DATA 5F,21
075A:  DATA C2,26
075B:  DATA 31,17
075C:  DATA 0D,05
075D:  DATA 00,01
075E:  DATA CC,30
075F:  DATA 73,3A
0760:  DATA A0,3A
0761:  DATA 70,32
0762:  DATA 61,3A
0763:  DATA 65,32
0764:  DATA A0,37
0765:  DATA 6E,10
0766:  DATA 32,18
0767:  DATA B2,1A
0768:  DATA 2F,18
0769:  DATA B6,17
076A:  DATA B1,1A
076B:  DATA 2C,10
076C:  DATA E2,3C
076D:  DATA A0,24
076E:  DATA EE,37
076F:  DATA F5,32
0770:  DATA AE,06
0771:  DATA 8A,06
0772:  DATA 0A,00
0773:  DATA DF,2F
0774:  DATA DF,2F
0775:  DATA C3,24
0776:  DATA C7,29
0777:  DATA 20,28
0778:  DATA C9,21
0779:  DATA A0,29
077A:  DATA F4,30
077B:  DATA 72,3A
077C:  DATA A0,27
077D:  DATA F0,32
077E:  DATA F2,30
077F:  DATA F4,34
0780:  DATA 6F,37
0781:  DATA DF,2F
0782:  DATA DF,2F
0783:  DATA DF,06
0784:  DATA 8A,06
0785:  DATA 0A,00
0786:  DATA F7,30
0787:  DATA 69,3A
0788:  DATA 69,37
0789:  DATA 67,10
078A:  DATA E6,37
078B:  DATA 72,10
078C:  DATA C2,27
078D:  DATA D3,29
078E:  DATA 20,28
078F:  DATA C9,21
0790:  DATA A0,31
0791:  DATA EF,36
0792:  DATA ED,30
0793:  DATA 6E,32
0794:  DATA 00,01
0795:  DATA 0D,05
0796:  DATA F7,30
0797:  DATA 69,3A
0798:  DATA 69,37
0799:  DATA 67,10
079A:  DATA E6,37
079B:  DATA 72,10
079C:  DATA C2,27
079D:  DATA D3,29
079E:  DATA 20,28
079F:  DATA C9,21
07A0:  DATA A0,31
07A1:  DATA EF,36
07A2:  DATA ED,30
07A3:  DATA 6E,32
07A4:  DATA 00,01
07A5:  DATA 0D,05
07A6:  DATA 0D,05
07A7:  DATA BD,1E
07A8:  DATA BD,1E
07A9:  DATA BD,1E
07AA:  DATA 0D,05
07AB:  DATA 0D,05
07AC:  DATA C6,34
07AD:  DATA EE,34
07AE:  DATA 73,34
07AF:  DATA 65,32
07B0:  DATA 20,38
07B1:  DATA F2,37
07B2:  DATA E3,32
07B3:  DATA F3,39
07B4:  DATA AE,06
07B5:  DATA 8A,2B
07B6:  DATA E1,34
07B7:  DATA 74,10
07B8:  DATA E6,37
07B9:  DATA 72,10
07BA:  DATA C2,27
07BB:  DATA D3,29
07BC:  DATA 20,28
07BD:  DATA C9,21
07BE:  DATA 20,3A
07BF:  DATA 75,39
07C0:  DATA 6E,10
07C1:  DATA 6F,33
07C2:  DATA 66,10
07C3:  DATA ED,32
07C4:  DATA 00,01
07C5:  DATA 45,37
07C6:  DATA 64,10
07C7:  DATA ED,30
07C8:  DATA 69,37
07C9:  DATA 0D,05
07CA:  DATA 00,00
*
0800:  MOVF   0B,W
0801:  BCF    0B.7
0802:  MOVLB  03
0803:  BSF    15.7
0804:  BSF    15.0
0805:  NOP
0806:  NOP
0807:  BTFSC  09.7
0808:  BSF    0B.7
0809:  MOVF   13,W
080A:  ANDLW  7F
080B:  BTFSC  03.2
080C:  GOTO   050
080D:  MOVLB  13
080E:  MOVWF  28
080F:  MOVLB  03
0810:  MOVF   11,W
0811:  MOVLB  13
0812:  MOVWF  29
0813:  MOVLB  03
0814:  MOVF   12,W
0815:  MOVLB  13
0816:  MOVWF  2A
0817:  MOVF   28,W
0818:  MOVWF  2B
0819:  MOVLP  00
081A:  MOVLB  00
081B:  CALL   7CB
081C:  MOVLP  08
081D:  MOVLB  13
081E:  MOVF   29,W
081F:  MOVLB  03
0820:  MOVWF  11
0821:  MOVLB  13
0822:  MOVF   2A,W
0823:  MOVLB  03
0824:  MOVWF  12
0825:  MOVF   0B,W
0826:  BCF    0B.7
0827:  BSF    15.7
0828:  BSF    15.0
0829:  NOP
082A:  NOP
082B:  BTFSC  09.7
082C:  BSF    0B.7
082D:  RLF    13,W
082E:  RLF    14,W
082F:  ANDLW  7F
0830:  BTFSC  03.2
0831:  GOTO   050
0832:  MOVLB  13
0833:  MOVWF  28
0834:  MOVLB  03
0835:  MOVF   11,W
0836:  MOVLB  13
0837:  MOVWF  29
0838:  MOVLB  03
0839:  MOVF   12,W
083A:  MOVLB  13
083B:  MOVWF  2A
083C:  MOVF   28,W
083D:  MOVWF  2B
083E:  MOVLP  00
083F:  MOVLB  00
0840:  CALL   7CB
0841:  MOVLP  08
0842:  MOVLB  13
0843:  MOVF   29,W
0844:  MOVLB  03
0845:  MOVWF  11
0846:  MOVLB  13
0847:  MOVF   2A,W
0848:  MOVLB  03
0849:  MOVWF  12
084A:  INCF   11,F
084B:  BTFSC  03.2
084C:  INCF   12,F
084D:  MOVLB  00
084E:  GOTO   000
084F:  MOVLB  03
0850:  MOVLB  00
0851:  RETURN
*
08C3:  MOVLB  13
08C4:  MOVF   49,W
08C5:  ANDLW  07
08C6:  MOVWF  77
08C7:  RRF    49,W
08C8:  MOVWF  78
08C9:  RRF    78,F
08CA:  RRF    78,F
08CB:  MOVLW  1F
08CC:  ANDWF  78,F
08CD:  MOVF   78,W
08CE:  ADDWF  4B,W
08CF:  MOVWF  04
08D0:  MOVLW  00
08D1:  ADDWFC 4C,W
08D2:  MOVWF  05
08D3:  CLRF   78
08D4:  INCF   78,F
08D5:  INCF   77,F
08D6:  GOTO   0D8
08D7:  RLF    78,F
08D8:  DECFSZ 77,F
08D9:  GOTO   0D7
08DA:  MOVF   4A,F
08DB:  BTFSC  03.2
08DC:  GOTO   0E0
08DD:  MOVF   78,W
08DE:  IORWF  00,F
08DF:  GOTO   0E3
08E0:  COMF   78,F
08E1:  MOVF   78,W
08E2:  ANDWF  00,F
08E3:  MOVLB  00
08E4:  RETURN
*
0AEF:  MOVF   0B,W
0AF0:  BCF    0B.7
0AF1:  MOVLB  03
0AF2:  BSF    15.7
0AF3:  BSF    15.0
0AF4:  NOP
0AF5:  NOP
0AF6:  BTFSC  09.7
0AF7:  BSF    0B.7
0AF8:  BTFSC  03.0
0AF9:  GOTO   325
0AFA:  MOVF   13,W
0AFB:  ANDLW  7F
0AFC:  MOVLB  11
0AFD:  MOVWF  52
0AFE:  MOVLB  03
0AFF:  MOVF   11,W
0B00:  MOVLB  11
0B01:  MOVWF  53
0B02:  MOVLB  03
0B03:  MOVF   12,W
0B04:  MOVLB  11
0B05:  MOVWF  54
0B06:  MOVF   52,W
0B07:  MOVLB  13
0B08:  MOVWF  2B
0B09:  MOVLP  00
0B0A:  MOVLB  00
0B0B:  CALL   7CB
0B0C:  MOVLP  08
0B0D:  MOVLB  11
0B0E:  MOVF   53,W
0B0F:  MOVLB  03
0B10:  MOVWF  11
0B11:  MOVLB  11
0B12:  MOVF   54,W
0B13:  MOVLB  03
0B14:  MOVWF  12
0B15:  MOVF   0B,W
0B16:  BCF    0B.7
0B17:  BSF    15.7
0B18:  BSF    15.0
0B19:  NOP
0B1A:  NOP
0B1B:  BTFSC  09.7
0B1C:  BSF    0B.7
0B1D:  MOVLB  11
0B1E:  DECFSZ 51,F
0B1F:  GOTO   321
0B20:  GOTO   323
0B21:  MOVLB  03
0B22:  GOTO   325
0B23:  GOTO   34B
0B24:  MOVLB  03
0B25:  RLF    13,W
0B26:  RLF    14,W
0B27:  ANDLW  7F
0B28:  MOVLB  11
0B29:  MOVWF  52
0B2A:  MOVLB  03
0B2B:  MOVF   11,W
0B2C:  MOVLB  11
0B2D:  MOVWF  53
0B2E:  MOVLB  03
0B2F:  MOVF   12,W
0B30:  MOVLB  11
0B31:  MOVWF  54
0B32:  MOVF   52,W
0B33:  MOVLB  13
0B34:  MOVWF  2B
0B35:  MOVLP  00
0B36:  MOVLB  00
0B37:  CALL   7CB
0B38:  MOVLP  08
0B39:  MOVLB  11
0B3A:  MOVF   53,W
0B3B:  MOVLB  03
0B3C:  MOVWF  11
0B3D:  MOVLB  11
0B3E:  MOVF   54,W
0B3F:  MOVLB  03
0B40:  MOVWF  12
0B41:  INCF   11,F
0B42:  BTFSC  03.2
0B43:  INCF   12,F
0B44:  BCF    03.0
0B45:  MOVLB  11
0B46:  DECFSZ 51,F
0B47:  GOTO   349
0B48:  GOTO   34B
0B49:  MOVLB  00
0B4A:  GOTO   2EF
0B4B:  MOVLB  00
0B4C:  RETURN
0B4D:  BTFSC  03.1
0B4E:  GOTO   353
0B4F:  MOVLW  25
0B50:  MOVWF  05
0B51:  MOVLW  9B
0B52:  MOVWF  04
0B53:  CLRF   77
0B54:  CLRF   78
0B55:  CLRF   79
0B56:  CLRF   7A
0B57:  MOVLB  11
0B58:  CLRF   6B
0B59:  CLRF   6C
0B5A:  CLRF   6D
0B5B:  CLRF   6E
0B5C:  MOVF   67,W
0B5D:  IORWF  66,W
0B5E:  IORWF  65,W
0B5F:  IORWF  64,W
0B60:  BTFSC  03.2
0B61:  GOTO   392
0B62:  MOVLW  20
0B63:  MOVWF  6F
0B64:  BCF    03.0
0B65:  RLF    60,F
0B66:  RLF    61,F
0B67:  RLF    62,F
0B68:  RLF    63,F
0B69:  RLF    6B,F
0B6A:  RLF    6C,F
0B6B:  RLF    6D,F
0B6C:  RLF    6E,F
0B6D:  MOVF   67,W
0B6E:  SUBWF  6E,W
0B6F:  BTFSS  03.2
0B70:  GOTO   37B
0B71:  MOVF   66,W
0B72:  SUBWF  6D,W
0B73:  BTFSS  03.2
0B74:  GOTO   37B
0B75:  MOVF   65,W
0B76:  SUBWF  6C,W
0B77:  BTFSS  03.2
0B78:  GOTO   37B
0B79:  MOVF   64,W
0B7A:  SUBWF  6B,W
0B7B:  BTFSS  03.0
0B7C:  GOTO   38C
0B7D:  MOVF   64,W
0B7E:  SUBWF  6B,F
0B7F:  MOVF   65,W
0B80:  BTFSS  03.0
0B81:  INCFSZ 65,W
0B82:  SUBWF  6C,F
0B83:  MOVF   66,W
0B84:  BTFSS  03.0
0B85:  INCFSZ 66,W
0B86:  SUBWF  6D,F
0B87:  MOVF   67,W
0B88:  BTFSS  03.0
0B89:  INCFSZ 67,W
0B8A:  SUBWF  6E,F
0B8B:  BSF    03.0
0B8C:  RLF    77,F
0B8D:  RLF    78,F
0B8E:  RLF    79,F
0B8F:  RLF    7A,F
0B90:  DECFSZ 6F,F
0B91:  GOTO   364
0B92:  MOVF   6B,W
0B93:  MOVWF  00
0B94:  MOVF   6C,W
0B95:  MOVWI  W,[FSR0+01]
0B96:  MOVF   6D,W
0B97:  MOVWI  W,[FSR0+02]
0B98:  MOVF   6E,W
0B99:  MOVWI  W,[FSR0+03]
0B9A:  MOVLB  00
0B9B:  RETURN
0B9C:  MOVF   04,W
0B9D:  MOVLB  11
0B9E:  MOVWF  58
0B9F:  MOVLW  3B
0BA0:  MOVWF  5F
0BA1:  MOVLW  9A
0BA2:  MOVWF  5E
0BA3:  MOVLW  CA
0BA4:  MOVWF  5D
0BA5:  CLRF   5C
0BA6:  MOVLW  0A
0BA7:  MOVWF  5A
0BA8:  BSF    03.1
0BA9:  MOVLW  25
0BAA:  MOVWF  05
0BAB:  MOVLW  81
0BAC:  MOVWF  04
0BAD:  MOVF   54,W
0BAE:  MOVWF  63
0BAF:  MOVF   53,W
0BB0:  MOVWF  62
0BB1:  MOVF   52,W
0BB2:  MOVWF  61
0BB3:  MOVF   51,W
0BB4:  MOVWF  60
0BB5:  MOVF   5F,W
0BB6:  MOVWF  67
0BB7:  MOVF   5E,W
0BB8:  MOVWF  66
0BB9:  MOVF   5D,W
0BBA:  MOVWF  65
0BBB:  MOVF   5C,W
0BBC:  MOVWF  64
0BBD:  MOVLB  00
0BBE:  CALL   34D
0BBF:  MOVF   78,W
0BC0:  MOVF   77,F
0BC1:  BTFSS  03.2
0BC2:  GOTO   3DA
0BC3:  MOVLB  11
0BC4:  MOVF   5A,W
0BC5:  XORLW  01
0BC6:  BTFSS  03.2
0BC7:  GOTO   3CA
0BC8:  MOVLB  00
0BC9:  GOTO   3DA
0BCA:  MOVF   58,W
0BCB:  BTFSC  03.2
0BCC:  GOTO   3DC
0BCD:  ANDLW  0F
0BCE:  SUBWF  5A,W
0BCF:  BTFSC  03.2
0BD0:  GOTO   3D3
0BD1:  BTFSC  03.0
0BD2:  GOTO   3E6
0BD3:  BTFSC  58.7
0BD4:  GOTO   3E6
0BD5:  BTFSC  58.6
0BD6:  GOTO   3DC
0BD7:  MOVLW  20
0BD8:  GOTO   3DD
0BD9:  MOVLB  00
0BDA:  MOVLB  11
0BDB:  CLRF   58
0BDC:  MOVLW  30
0BDD:  ADDWF  77,F
0BDE:  MOVF   77,W
0BDF:  MOVLB  13
0BE0:  MOVWF  2B
0BE1:  MOVLP  00
0BE2:  MOVLB  00
0BE3:  CALL   7CB
0BE4:  MOVLP  08
0BE5:  MOVLB  11
0BE6:  BCF    03.1
0BE7:  MOVF   5F,W
0BE8:  MOVWF  63
0BE9:  MOVF   5E,W
0BEA:  MOVWF  62
0BEB:  MOVF   5D,W
0BEC:  MOVWF  61
0BED:  MOVF   5C,W
0BEE:  MOVWF  60
0BEF:  CLRF   67
0BF0:  CLRF   66
0BF1:  CLRF   65
0BF2:  MOVLW  0A
0BF3:  MOVWF  64
0BF4:  MOVLB  00
0BF5:  CALL   34D
0BF6:  MOVF   7A,W
0BF7:  MOVLB  11
0BF8:  MOVWF  5F
0BF9:  MOVF   79,W
0BFA:  MOVWF  5E
0BFB:  MOVF   78,W
0BFC:  MOVWF  5D
0BFD:  MOVF   77,W
0BFE:  MOVWF  5C
0BFF:  DECFSZ 5A,F
0C00:  GOTO   3A8
0C01:  MOVLB  00
0C02:  RETURN
0C03:  MOVLB  11
0C04:  MOVF   55,W
0C05:  CLRF   78
0C06:  SUBWF  54,W
0C07:  BTFSC  03.0
0C08:  GOTO   40C
0C09:  MOVF   54,W
0C0A:  MOVWF  77
0C0B:  GOTO   418
0C0C:  CLRF   77
0C0D:  MOVLW  08
0C0E:  MOVWF  56
0C0F:  RLF    54,F
0C10:  RLF    77,F
0C11:  MOVF   55,W
0C12:  SUBWF  77,W
0C13:  BTFSC  03.0
0C14:  MOVWF  77
0C15:  RLF    78,F
0C16:  DECFSZ 56,F
0C17:  GOTO   40F
0C18:  MOVLB  00
0C19:  RETURN
0C1A:  MOVF   78,W
0C1B:  MOVLB  11
0C1C:  MOVF   3A,W
0C1D:  MOVWF  54
0C1E:  MOVLW  64
0C1F:  MOVWF  55
0C20:  MOVLB  00
0C21:  CALL   403
0C22:  MOVF   77,W
0C23:  MOVLB  11
0C24:  MOVWF  3A
0C25:  MOVF   78,W
0C26:  MOVLW  30
0C27:  BTFSS  03.2
0C28:  GOTO   430
0C29:  BTFSS  3B.1
0C2A:  GOTO   43C
0C2B:  BTFSC  3B.3
0C2C:  GOTO   43C
0C2D:  BTFSC  3B.4
0C2E:  MOVLW  20
0C2F:  GOTO   433
0C30:  BCF    3B.3
0C31:  BCF    3B.4
0C32:  BSF    3B.0
0C33:  ADDWF  78,F
0C34:  MOVF   78,W
0C35:  MOVLB  13
0C36:  MOVWF  2B
0C37:  MOVLP  00
0C38:  MOVLB  00
0C39:  CALL   7CB
0C3A:  MOVLP  08
0C3B:  MOVLB  11
0C3C:  MOVF   3A,W
0C3D:  MOVWF  54
0C3E:  MOVLW  0A
0C3F:  MOVWF  55
0C40:  MOVLB  00
0C41:  CALL   403
0C42:  MOVF   77,W
0C43:  MOVLB  11
0C44:  MOVWF  3A
0C45:  MOVF   78,W
0C46:  MOVLW  30
0C47:  BTFSS  03.2
0C48:  GOTO   44F
0C49:  BTFSC  3B.3
0C4A:  GOTO   458
0C4B:  BTFSS  3B.0
0C4C:  GOTO   458
0C4D:  BTFSC  3B.4
0C4E:  MOVLW  20
0C4F:  ADDWF  78,F
0C50:  MOVF   78,W
0C51:  MOVLB  13
0C52:  MOVWF  2B
0C53:  MOVLP  00
0C54:  MOVLB  00
0C55:  CALL   7CB
0C56:  MOVLP  08
0C57:  MOVLB  11
0C58:  MOVLW  30
0C59:  ADDWF  3A,F
0C5A:  MOVF   3A,W
0C5B:  MOVLB  13
0C5C:  MOVWF  2B
0C5D:  MOVLP  00
0C5E:  MOVLB  00
0C5F:  CALL   7CB
0C60:  MOVLP  08
0C61:  RETURN
*
0EA2:  MOVLB  11
0EA3:  BTFSC  52.7
0EA4:  GOTO   6BA
0EA5:  MOVLW  0F
0EA6:  MOVWF  77
0EA7:  SWAPF  51,W
0EA8:  ANDWF  77,F
0EA9:  MOVLW  0A
0EAA:  SUBWF  77,W
0EAB:  BTFSC  03.0
0EAC:  GOTO   6B0
0EAD:  MOVLW  30
0EAE:  ADDWF  77,F
0EAF:  GOTO   6B2
0EB0:  MOVF   52,W
0EB1:  ADDWF  77,F
0EB2:  MOVF   77,W
0EB3:  MOVLB  13
0EB4:  MOVWF  2B
0EB5:  MOVLP  00
0EB6:  MOVLB  00
0EB7:  CALL   7CB
0EB8:  MOVLP  08
0EB9:  MOVLB  11
0EBA:  MOVLW  0F
0EBB:  ANDWF  51,F
0EBC:  MOVLW  0A
0EBD:  SUBWF  51,W
0EBE:  BTFSC  03.0
0EBF:  GOTO   6C2
0EC0:  MOVLW  30
0EC1:  GOTO   6C4
0EC2:  BCF    52.7
0EC3:  MOVF   52,W
0EC4:  ADDWF  51,F
0EC5:  MOVF   51,W
0EC6:  MOVLB  13
0EC7:  MOVWF  2B
0EC8:  MOVLP  00
0EC9:  MOVLB  00
0ECA:  CALL   7CB
0ECB:  MOVLP  08
0ECC:  RETURN
*
1559:  MOVF   78,W
155A:  BTFSC  03.2
155B:  GOTO   560
155C:  MOVF   77,W
155D:  MOVWI  W,[FSR0++]
155E:  DECFSZ 78,F
155F:  GOTO   55C
*
1FCF:  CLRF   77
1FD0:  CLRF   78
1FD1:  MOVLB  11
1FD2:  MOVF   2D,W
1FD3:  BCF    03.0
1FD4:  BTFSC  2E.0
1FD5:  ADDWF  77,F
1FD6:  RRF    77,F
1FD7:  RRF    78,F
1FD8:  BTFSC  2E.1
1FD9:  ADDWF  77,F
1FDA:  RRF    77,F
1FDB:  RRF    78,F
1FDC:  BTFSC  2E.2
1FDD:  ADDWF  77,F
1FDE:  RRF    77,F
1FDF:  RRF    78,F
1FE0:  BTFSC  2E.3
1FE1:  ADDWF  77,F
1FE2:  RRF    77,F
1FE3:  RRF    78,F
1FE4:  BTFSC  2E.4
1FE5:  ADDWF  77,F
1FE6:  RRF    77,F
1FE7:  RRF    78,F
1FE8:  BTFSC  2E.5
1FE9:  ADDWF  77,F
1FEA:  RRF    77,F
1FEB:  RRF    78,F
1FEC:  BTFSC  2E.6
1FED:  ADDWF  77,F
1FEE:  RRF    77,F
1FEF:  RRF    78,F
1FF0:  BTFSC  2E.7
1FF1:  ADDWF  77,F
1FF2:  RRF    77,F
1FF3:  RRF    78,F
1FF4:  MOVLB  00
1FF5:  RETURN
*
278B:  MOVLW  20
278C:  MOVLB  11
278D:  BTFSS  4F.4
278E:  MOVLW  30
278F:  MOVWF  50
2790:  MOVF   4E,W
2791:  MOVWF  77
2792:  BTFSS  4E.7
2793:  GOTO   79C
2794:  COMF   77,F
2795:  INCF   77,F
2796:  MOVF   77,W
2797:  MOVWF  4E
2798:  MOVLW  2D
2799:  MOVWF  50
279A:  BSF    4F.7
279B:  BSF    4F.0
279C:  MOVF   4E,W
279D:  MOVWF  54
279E:  MOVLW  64
279F:  MOVWF  55
27A0:  MOVLP  08
27A1:  MOVLB  00
27A2:  CALL   403
27A3:  MOVLP  20
27A4:  MOVF   77,W
27A5:  MOVLB  11
27A6:  MOVWF  4E
27A7:  MOVLW  30
27A8:  ADDWF  78,W
27A9:  MOVWF  51
27AA:  MOVF   4E,W
27AB:  MOVWF  54
27AC:  MOVLW  0A
27AD:  MOVWF  55
27AE:  MOVLP  08
27AF:  MOVLB  00
27B0:  CALL   403
27B1:  MOVLP  20
27B2:  MOVLW  30
27B3:  ADDWF  77,W
27B4:  MOVLB  11
27B5:  MOVWF  53
27B6:  MOVLW  30
27B7:  ADDWF  78,W
27B8:  MOVWF  52
27B9:  MOVF   50,W
27BA:  MOVWF  77
27BB:  MOVLW  30
27BC:  SUBWF  51,W
27BD:  BTFSC  03.2
27BE:  GOTO   7C3
27BF:  BSF    4F.1
27C0:  BTFSC  4F.7
27C1:  BSF    4F.2
27C2:  GOTO   7D7
27C3:  MOVF   50,W
27C4:  MOVWF  51
27C5:  MOVLW  20
27C6:  MOVWF  50
27C7:  MOVLW  30
27C8:  SUBWF  52,W
27C9:  BTFSC  03.2
27CA:  GOTO   7CF
27CB:  BSF    4F.0
27CC:  BTFSC  4F.7
27CD:  BSF    4F.1
27CE:  GOTO   7D7
27CF:  BTFSS  03.2
27D0:  BSF    4F.0
27D1:  BTFSS  03.2
27D2:  GOTO   7D7
27D3:  MOVF   51,W
27D4:  MOVWF  52
27D5:  MOVLW  20
27D6:  MOVWF  51
27D7:  BTFSC  4F.2
27D8:  GOTO   7DE
27D9:  BTFSC  4F.1
27DA:  GOTO   7E6
27DB:  BTFSC  4F.0
27DC:  GOTO   7EE
27DD:  GOTO   7F6
27DE:  MOVF   50,W
27DF:  MOVLB  13
27E0:  MOVWF  2B
27E1:  MOVLP  00
27E2:  MOVLB  00
27E3:  CALL   7CB
27E4:  MOVLP  20
27E5:  MOVLB  11
27E6:  MOVF   51,W
27E7:  MOVLB  13
27E8:  MOVWF  2B
27E9:  MOVLP  00
27EA:  MOVLB  00
27EB:  CALL   7CB
27EC:  MOVLP  20
27ED:  MOVLB  11
27EE:  MOVF   52,W
27EF:  MOVLB  13
27F0:  MOVWF  2B
27F1:  MOVLP  00
27F2:  MOVLB  00
27F3:  CALL   7CB
27F4:  MOVLP  20
27F5:  MOVLB  11
27F6:  MOVF   53,W
27F7:  MOVLB  13
27F8:  MOVWF  2B
27F9:  MOVLP  00
27FA:  MOVLB  00
27FB:  CALL   7CB
27FC:  MOVLP  20
27FD:  RETURN
*
32E9:  MOVF   04,W
32EA:  MOVWF  40
32EB:  BTFSS  3D.7
32EC:  GOTO   2FA
32ED:  DECF   40,F
32EE:  BSF    40.5
32EF:  COMF   3A,F
32F0:  COMF   3B,F
32F1:  COMF   3C,F
32F2:  COMF   3D,F
32F3:  INCF   3A,F
32F4:  BTFSC  03.2
32F5:  INCF   3B,F
32F6:  BTFSC  03.2
32F7:  INCF   3C,F
32F8:  BTFSC  03.2
32F9:  INCF   3D,F
32FA:  MOVLW  3B
32FB:  MOVWF  47
32FC:  MOVLW  9A
32FD:  MOVWF  46
32FE:  MOVLW  CA
32FF:  MOVWF  45
3300:  CLRF   44
3301:  MOVLW  0A
3302:  MOVWF  42
3303:  BSF    03.1
3304:  MOVLW  25
3305:  MOVWF  05
3306:  MOVLW  6A
3307:  MOVWF  04
3308:  MOVF   3D,W
3309:  MOVWF  63
330A:  MOVF   3C,W
330B:  MOVWF  62
330C:  MOVF   3B,W
330D:  MOVWF  61
330E:  MOVF   3A,W
330F:  MOVWF  60
3310:  MOVF   47,W
3311:  MOVWF  67
3312:  MOVF   46,W
3313:  MOVWF  66
3314:  MOVF   45,W
3315:  MOVWF  65
3316:  MOVF   44,W
3317:  MOVWF  64
3318:  MOVLP  08
3319:  MOVLB  00
331A:  CALL   34D
331B:  MOVLP  30
331C:  MOVF   78,W
331D:  MOVF   77,F
331E:  BTFSS  03.2
331F:  GOTO   337
3320:  MOVLB  11
3321:  MOVF   42,W
3322:  XORLW  01
3323:  BTFSS  03.2
3324:  GOTO   327
3325:  MOVLB  00
3326:  GOTO   337
3327:  MOVF   40,W
3328:  BTFSC  03.2
3329:  GOTO   33A
332A:  ANDLW  0F
332B:  SUBWF  42,W
332C:  BTFSC  03.2
332D:  GOTO   330
332E:  BTFSC  03.0
332F:  GOTO   365
3330:  BTFSC  40.7
3331:  GOTO   365
3332:  BTFSC  40.6
3333:  GOTO   33A
3334:  MOVLW  20
3335:  GOTO   35C
3336:  MOVLB  00
3337:  MOVLW  20
3338:  MOVLB  11
3339:  ANDWF  40,F
333A:  BTFSS  40.5
333B:  GOTO   34A
333C:  BCF    40.5
333D:  MOVF   77,W
333E:  MOVWF  40
333F:  MOVLW  2D
3340:  MOVLB  13
3341:  MOVWF  2B
3342:  MOVLP  00
3343:  MOVLB  00
3344:  CALL   7CB
3345:  MOVLP  30
3346:  MOVLB  11
3347:  MOVF   40,W
3348:  MOVWF  77
3349:  CLRF   40
334A:  MOVLW  30
334B:  BTFSS  40.5
334C:  GOTO   35C
334D:  BCF    40.5
334E:  MOVF   77,W
334F:  MOVWF  40
3350:  MOVLW  2D
3351:  MOVLB  13
3352:  MOVWF  2B
3353:  MOVLP  00
3354:  MOVLB  00
3355:  CALL   7CB
3356:  MOVLP  30
3357:  MOVLB  11
3358:  MOVF   40,W
3359:  MOVWF  77
335A:  CLRF   40
335B:  MOVLW  30
335C:  ADDWF  77,F
335D:  MOVF   77,W
335E:  MOVLB  13
335F:  MOVWF  2B
3360:  MOVLP  00
3361:  MOVLB  00
3362:  CALL   7CB
3363:  MOVLP  30
3364:  MOVLB  11
3365:  BCF    03.1
3366:  MOVF   47,W
3367:  MOVWF  63
3368:  MOVF   46,W
3369:  MOVWF  62
336A:  MOVF   45,W
336B:  MOVWF  61
336C:  MOVF   44,W
336D:  MOVWF  60
336E:  CLRF   67
336F:  CLRF   66
3370:  CLRF   65
3371:  MOVLW  0A
3372:  MOVWF  64
3373:  MOVLP  08
3374:  MOVLB  00
3375:  CALL   34D
3376:  MOVLP  30
3377:  MOVF   7A,W
3378:  MOVLB  11
3379:  MOVWF  47
337A:  MOVF   79,W
337B:  MOVWF  46
337C:  MOVF   78,W
337D:  MOVWF  45
337E:  MOVF   77,W
337F:  MOVWF  44
3380:  DECFSZ 42,F
3381:  GOTO   303
.................... 
.................... #list
.................... 
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
*
0FC3:  MOVLW  26
0FC4:  MOVWF  05
0FC5:  MOVLW  13
0FC6:  MOVWF  04
0FC7:  MOVF   00,W
0FC8:  BTFSC  03.2
0FC9:  GOTO   7D8
0FCA:  MOVLW  05
0FCB:  MOVWF  78
0FCC:  CLRF   77
0FCD:  DECFSZ 77,F
0FCE:  GOTO   7CD
0FCF:  DECFSZ 78,F
0FD0:  GOTO   7CC
0FD1:  MOVLW  2E
0FD2:  MOVWF  77
0FD3:  DECFSZ 77,F
0FD4:  GOTO   7D3
0FD5:  GOTO   7D6
0FD6:  DECFSZ 00,F
0FD7:  GOTO   7CA
0FD8:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
15BE:  MOVLB  00
15BF:  BTFSS  11.4
15C0:  GOTO   5BF
15C1:  MOVLB  03
15C2:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
07CB:  MOVLB  01
07CC:  BCF    0D.4
07CD:  MOVLB  02
07CE:  BCF    0D.4
07CF:  MOVLW  08
07D0:  MOVWF  78
07D1:  GOTO   7D2
07D2:  NOP
07D3:  BSF    78.7
07D4:  GOTO   7E5
07D5:  BCF    78.7
07D6:  MOVLB  13
07D7:  RRF    2B,F
07D8:  MOVLB  02
07D9:  BTFSC  03.0
07DA:  BSF    0D.4
07DB:  BTFSS  03.0
07DC:  BCF    0D.4
07DD:  BSF    78.6
07DE:  GOTO   7E5
07DF:  BCF    78.6
07E0:  DECFSZ 78,F
07E1:  GOTO   7D6
07E2:  GOTO   7E3
07E3:  NOP
07E4:  BSF    0D.4
07E5:  MOVLW  84
07E6:  MOVWF  04
07E7:  DECFSZ 04,F
07E8:  GOTO   7E7
07E9:  NOP
07EA:  BTFSC  78.7
07EB:  GOTO   7D5
07EC:  BTFSC  78.6
07ED:  GOTO   7DF
07EE:  MOVLB  00
07EF:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
08E5:  MOVLB  04
08E6:  MOVF   11,W
08E7:  MOVLB  13
08E8:  MOVF   66,W
08E9:  MOVLB  04
08EA:  MOVWF  11
08EB:  RRF    14,W
08EC:  BTFSS  03.0
08ED:  GOTO   0EB
08EE:  MOVF   11,W
08EF:  MOVWF  77
08F0:  MOVLB  00
08F1:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
08F2:  MOVLB  04
08F3:  MOVF   11,W
08F4:  MOVLB  13
08F5:  MOVF   66,W
08F6:  MOVLB  04
08F7:  MOVWF  11
08F8:  RRF    14,W
08F9:  BTFSS  03.0
08FA:  GOTO   0F8
08FB:  MOVF   11,W
08FC:  MOVWF  77
08FD:  MOVLB  00
08FE:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(CLOCK_FREQUENCY); //3.2767秒後に割り込みを発生させる
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  CLRF   16
004E:  NOP
....................    sec++;
004F:  MOVLW  01
0050:  ADDWF  31,F
0051:  BTFSC  03.0
0052:  INCF   32,F
0053:  BTFSC  03.2
0054:  INCF   33,F
0055:  BTFSC  03.2
0056:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0057:  BCF    11.0
0058:  MOVLP  00
0059:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
08A6:  MOVLW  5A
08A7:  MOVLB  03
08A8:  MOVWF  11
08A9:  MOVLW  00
08AA:  MOVWF  12
08AB:  MOVLB  00
08AC:  CALL   000
....................    clear_interrupt(INT_TIMER1);
08AD:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
08AE:  MOVLW  8F
08AF:  MOVWF  18
08B0:  CLRF   19
....................    set_timer1(CLOCK_FREQUENCY); 
08B1:  CLRF   16
08B2:  MOVLW  80
08B3:  MOVWF  17
08B4:  CLRF   16
08B5:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
08B6:  MOVLB  01
08B7:  BSF    11.0
....................    enable_interrupts(GLOBAL);
08B8:  MOVLW  C0
08B9:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
08BA:  MOVLW  64
08BB:  MOVLB  03
08BC:  MOVWF  11
08BD:  MOVLW  00
08BE:  MOVWF  12
08BF:  MOVLB  00
08C0:  CALL   000
08C1:  MOVLP  30
08C2:  GOTO   69A (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... 
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
11E7:  MOVF   31,W
11E8:  MOVWF  77
11E9:  MOVF   32,W
11EA:  MOVWF  78
11EB:  MOVF   33,W
11EC:  MOVWF  79
11ED:  MOVF   34,W
11EE:  MOVWF  7A
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006A:  GOTO   06D
006B:  BTFSS  28.0
006C:  GOTO   080
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006D:  MOVF   59,W
006E:  SUBLW  1F
006F:  BTFSS  03.0
0070:  GOTO   080
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0071:  MOVF   59,W
0072:  INCF   59,F
0073:  ANDLW  1F
0074:  ADDLW  19
0075:  MOVWF  04
0076:  MOVLW  20
0077:  MOVWF  05
0078:  BTFSC  03.0
0079:  INCF   05,F
007A:  BTFSS  11.5
007B:  GOTO   07A
007C:  MOVLB  03
007D:  MOVF   19,W
007E:  MOVWF  00
007F:  MOVLB  00
0080:  BCF    11.5
0081:  MOVLP  00
0082:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
0892:  MOVLW  83
0893:  MOVLB  03
0894:  MOVWF  11
0895:  MOVLW  00
0896:  MOVWF  12
0897:  MOVLB  00
0898:  CALL   000
....................    enable_interrupts(INT_RDA);
0899:  MOVLB  01
089A:  BSF    11.5
....................    enable_interrupts(global);
089B:  MOVLW  C0
089C:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
089D:  MOVLW  8C
089E:  MOVLB  03
089F:  MOVWF  11
08A0:  MOVLW  00
08A1:  MOVWF  12
08A2:  MOVLB  00
08A3:  CALL   000
08A4:  MOVLP  30
08A5:  GOTO   697 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
1549:  MOVLB  0F
154A:  MOVF   57,W
154B:  MOVWF  7A
154C:  MOVF   56,W
154D:  MOVWF  04
154E:  MOVF   7A,W
154F:  MOVWF  05
1550:  MOVF   00,W
1551:  MOVWF  58
1552:  MOVF   55,W
1553:  MOVWF  05
1554:  MOVF   54,W
1555:  MOVWF  04
1556:  CLRF   77
1557:  MOVF   58,W
1558:  MOVWF  78
....................    *receive_signal_size = 0;
*
1560:  MOVF   56,W
1561:  MOVWF  04
1562:  MOVF   57,W
1563:  MOVWF  05
1564:  CLRF   00
1565:  MOVLP  30
1566:  MOVLB  00
1567:  GOTO   6ED (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_SMF_START 0x000000
.................... #define ADDRESS_SMF_END   0xF42400
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... typedef struct FLASH_DATA_HEADER {
....................     unsigned int32  smf_piclog_use_counter;
....................     unsigned int8   smf_piclog_loop_counter;
....................     unsigned int32  smf_meas_use_counter;
....................     unsigned int8   smf_meas_loop_counter;
.................... 
....................     unsigned int32  misf_piclog_use_counter;
....................     unsigned int8   misf_piclog_loop_counter;
....................     unsigned int32  misf_piclog_uncopyed_counter;
....................     unsigned int8   misf_piclog_write_counter;
....................     unsigned int32  misf_meas_use_counter;
....................     unsigned int8   misf_meas_loop_counter;
....................     unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................     unsigned int8   reserve[34];
....................     unsigned int8   crc;
.................... }   FLASH_DATA_HEADER; // フィールド
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_SMF_START 0x000000
.................... #define ADDRESS_SMF_END   0xF42400
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... typedef struct FLASH_DATA_HEADER {
....................     unsigned int32  smf_piclog_use_counter;
....................     unsigned int8   smf_piclog_loop_counter;
....................     unsigned int32  smf_meas_use_counter;
....................     unsigned int8   smf_meas_loop_counter;
.................... 
....................     unsigned int32  misf_piclog_use_counter;
....................     unsigned int8   misf_piclog_loop_counter;
....................     unsigned int32  misf_piclog_uncopyed_counter;
....................     unsigned int8   misf_piclog_write_counter;
....................     unsigned int32  misf_meas_use_counter;
....................     unsigned int8   misf_meas_loop_counter;
....................     unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................     unsigned int8   reserve[34];
....................     unsigned int8   crc;
.................... }   FLASH_DATA_HEADER; // フィールド
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0ECD:  MOVLB  13
0ECE:  MOVF   43,W
0ECF:  XORLW  00
0ED0:  MOVLB  00
0ED1:  BTFSC  03.2
0ED2:  GOTO   6D7
0ED3:  XORLW  01
0ED4:  BTFSC  03.2
0ED5:  GOTO   6FF
0ED6:  GOTO   728
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0ED7:  MOVLB  13
0ED8:  CLRF   4C
0ED9:  CLRF   4B
0EDA:  MOVF   4C,W
0EDB:  SUBWF  4A,W
0EDC:  BTFSS  03.0
0EDD:  GOTO   6FE
0EDE:  BTFSS  03.2
0EDF:  GOTO   6E4
0EE0:  MOVF   49,W
0EE1:  SUBWF  4B,W
0EE2:  BTFSC  03.0
0EE3:  GOTO   6FE
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0EE4:  MOVF   47,W
0EE5:  ADDWF  4B,W
0EE6:  MOVWF  04
0EE7:  MOVF   48,W
0EE8:  ADDWFC 4C,W
0EE9:  MOVWF  05
0EEA:  MOVF   00,W
0EEB:  MOVWF  4F
0EEC:  MOVLB  04
0EED:  BCF    15.5
0EEE:  MOVLW  40
0EEF:  MOVWF  14
0EF0:  MOVLW  09
0EF1:  MOVWF  12
0EF2:  MOVLW  2A
0EF3:  MOVWF  15
0EF4:  MOVLB  13
0EF5:  MOVF   4F,W
0EF6:  MOVWF  66
0EF7:  MOVLB  00
0EF8:  CALL   0E5
0EF9:  MOVLB  13
0EFA:  INCF   4B,F
0EFB:  BTFSC  03.2
0EFC:  INCF   4C,F
0EFD:  GOTO   6DA
....................          break;
0EFE:  GOTO   729
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0EFF:  MOVLB  13
0F00:  CLRF   4E
0F01:  CLRF   4D
0F02:  MOVF   4E,W
0F03:  SUBWF  4A,W
0F04:  BTFSS  03.0
0F05:  GOTO   726
0F06:  BTFSS  03.2
0F07:  GOTO   70C
0F08:  MOVF   49,W
0F09:  SUBWF  4D,W
0F0A:  BTFSC  03.0
0F0B:  GOTO   726
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0F0C:  MOVF   47,W
0F0D:  ADDWF  4D,W
0F0E:  MOVWF  04
0F0F:  MOVF   48,W
0F10:  ADDWFC 4E,W
0F11:  MOVWF  05
0F12:  MOVF   00,W
0F13:  MOVWF  4F
0F14:  MOVLB  04
0F15:  BCF    15.5
0F16:  MOVLW  40
0F17:  MOVWF  14
0F18:  MOVLW  09
0F19:  MOVWF  12
0F1A:  MOVLW  2A
0F1B:  MOVWF  15
0F1C:  MOVLB  13
0F1D:  MOVF   4F,W
0F1E:  MOVWF  66
0F1F:  MOVLB  00
0F20:  CALL   0F2
0F21:  MOVLB  13
0F22:  INCF   4D,F
0F23:  BTFSC  03.2
0F24:  INCF   4E,F
0F25:  GOTO   702
....................          break;
0F26:  GOTO   729
0F27:  MOVLB  00
....................          
....................       default:
....................          break;
0F28:  MOVLB  13
....................    }
....................    return;
0F29:  MOVLB  00
0F2A:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
08FF:  MOVLB  13
0900:  MOVF   49,W
0901:  XORLW  00
0902:  MOVLB  00
0903:  BTFSC  03.2
0904:  GOTO   109
0905:  XORLW  01
0906:  BTFSC  03.2
0907:  GOTO   16A
0908:  GOTO   1CC
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0909:  MOVLB  13
090A:  CLRF   58
090B:  CLRF   57
090C:  MOVF   58,W
090D:  SUBWF  50,W
090E:  BTFSS  03.0
090F:  GOTO   130
0910:  BTFSS  03.2
0911:  GOTO   116
0912:  MOVF   4F,W
0913:  SUBWF  57,W
0914:  BTFSC  03.0
0915:  GOTO   130
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0916:  MOVF   4D,W
0917:  ADDWF  57,W
0918:  MOVWF  04
0919:  MOVF   4E,W
091A:  ADDWFC 58,W
091B:  MOVWF  05
091C:  MOVF   00,W
091D:  MOVWF  64
091E:  MOVLB  04
091F:  BCF    15.5
0920:  MOVLW  40
0921:  MOVWF  14
0922:  MOVLW  09
0923:  MOVWF  12
0924:  MOVLW  2A
0925:  MOVWF  15
0926:  MOVLB  13
0927:  MOVF   64,W
0928:  MOVWF  66
0929:  MOVLB  00
092A:  CALL   0E5
092B:  MOVLB  13
092C:  INCF   57,F
092D:  BTFSC  03.2
092E:  INCF   58,F
092F:  GOTO   10C
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0930:  CLRF   5C
0931:  CLRF   5B
0932:  CLRF   5A
0933:  CLRF   59
0934:  MOVF   5C,W
0935:  SUBWF  56,W
0936:  BTFSS  03.0
0937:  GOTO   169
0938:  BTFSS  03.2
0939:  GOTO   14A
093A:  MOVF   5B,W
093B:  SUBWF  55,W
093C:  BTFSS  03.0
093D:  GOTO   169
093E:  BTFSS  03.2
093F:  GOTO   14A
0940:  MOVF   5A,W
0941:  SUBWF  54,W
0942:  BTFSS  03.0
0943:  GOTO   169
0944:  BTFSS  03.2
0945:  GOTO   14A
0946:  MOVF   53,W
0947:  SUBWF  59,W
0948:  BTFSC  03.0
0949:  GOTO   169
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
094A:  MOVF   51,W
094B:  ADDWF  59,W
094C:  MOVWF  04
094D:  MOVF   52,W
094E:  ADDWFC 5A,W
094F:  MOVWF  05
0950:  MOVLB  04
0951:  BCF    15.5
0952:  MOVLW  40
0953:  MOVWF  14
0954:  MOVLW  09
0955:  MOVWF  12
0956:  MOVLW  2A
0957:  MOVWF  15
0958:  MOVLW  01
0959:  MOVLB  13
095A:  MOVWF  66
095B:  MOVLB  00
095C:  CALL   0E5
095D:  MOVF   77,W
095E:  MOVWF  00
095F:  MOVLW  01
0960:  MOVLB  13
0961:  ADDWF  59,F
0962:  BTFSC  03.0
0963:  INCF   5A,F
0964:  BTFSC  03.2
0965:  INCF   5B,F
0966:  BTFSC  03.2
0967:  INCF   5C,F
0968:  GOTO   134
....................          break;
0969:  GOTO   1CD
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
096A:  MOVLB  13
096B:  CLRF   5E
096C:  CLRF   5D
096D:  MOVF   5E,W
096E:  SUBWF  50,W
096F:  BTFSS  03.0
0970:  GOTO   191
0971:  BTFSS  03.2
0972:  GOTO   177
0973:  MOVF   4F,W
0974:  SUBWF  5D,W
0975:  BTFSC  03.0
0976:  GOTO   191
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0977:  MOVF   4D,W
0978:  ADDWF  5D,W
0979:  MOVWF  04
097A:  MOVF   4E,W
097B:  ADDWFC 5E,W
097C:  MOVWF  05
097D:  MOVF   00,W
097E:  MOVWF  64
097F:  MOVLB  04
0980:  BCF    15.5
0981:  MOVLW  40
0982:  MOVWF  14
0983:  MOVLW  09
0984:  MOVWF  12
0985:  MOVLW  2A
0986:  MOVWF  15
0987:  MOVLB  13
0988:  MOVF   64,W
0989:  MOVWF  66
098A:  MOVLB  00
098B:  CALL   0F2
098C:  MOVLB  13
098D:  INCF   5D,F
098E:  BTFSC  03.2
098F:  INCF   5E,F
0990:  GOTO   16D
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0991:  CLRF   62
0992:  CLRF   61
0993:  CLRF   60
0994:  CLRF   5F
0995:  MOVF   62,W
0996:  SUBWF  56,W
0997:  BTFSS  03.0
0998:  GOTO   1CA
0999:  BTFSS  03.2
099A:  GOTO   1AB
099B:  MOVF   61,W
099C:  SUBWF  55,W
099D:  BTFSS  03.0
099E:  GOTO   1CA
099F:  BTFSS  03.2
09A0:  GOTO   1AB
09A1:  MOVF   60,W
09A2:  SUBWF  54,W
09A3:  BTFSS  03.0
09A4:  GOTO   1CA
09A5:  BTFSS  03.2
09A6:  GOTO   1AB
09A7:  MOVF   53,W
09A8:  SUBWF  5F,W
09A9:  BTFSC  03.0
09AA:  GOTO   1CA
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
09AB:  MOVF   51,W
09AC:  ADDWF  5F,W
09AD:  MOVWF  04
09AE:  MOVF   52,W
09AF:  ADDWFC 60,W
09B0:  MOVWF  05
09B1:  MOVLB  04
09B2:  BCF    15.5
09B3:  MOVLW  40
09B4:  MOVWF  14
09B5:  MOVLW  09
09B6:  MOVWF  12
09B7:  MOVLW  2A
09B8:  MOVWF  15
09B9:  MOVLW  02
09BA:  MOVLB  13
09BB:  MOVWF  66
09BC:  MOVLB  00
09BD:  CALL   0F2
09BE:  MOVF   77,W
09BF:  MOVWF  00
09C0:  MOVLW  01
09C1:  MOVLB  13
09C2:  ADDWF  5F,F
09C3:  BTFSC  03.0
09C4:  INCF   60,F
09C5:  BTFSC  03.2
09C6:  INCF   61,F
09C7:  BTFSC  03.2
09C8:  INCF   62,F
09C9:  GOTO   195
....................          break;
09CA:  GOTO   1CD
09CB:  MOVLB  00
....................    
....................          
....................       default:
....................          break;
09CC:  MOVLB  13
....................    }
....................    return;
09CD:  MOVLB  00
09CE:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0F2B:  MOVLB  13
0F2C:  MOVF   43,W
0F2D:  XORLW  00
0F2E:  MOVLB  00
0F2F:  BTFSC  03.2
0F30:  GOTO   735
0F31:  XORLW  01
0F32:  BTFSC  03.2
0F33:  GOTO   77A
0F34:  GOTO   7C0
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0F35:  MOVLB  13
0F36:  CLRF   4E
0F37:  MOVF   49,W
0F38:  SUBWF  4E,W
0F39:  BTFSC  03.0
0F3A:  GOTO   753
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0F3B:  MOVF   4E,W
0F3C:  ADDWF  47,W
0F3D:  MOVWF  04
0F3E:  MOVLW  00
0F3F:  ADDWFC 48,W
0F40:  MOVWF  05
0F41:  MOVF   00,W
0F42:  MOVWF  54
0F43:  MOVLB  04
0F44:  BCF    15.5
0F45:  MOVLW  40
0F46:  MOVWF  14
0F47:  MOVLW  09
0F48:  MOVWF  12
0F49:  MOVLW  2A
0F4A:  MOVWF  15
0F4B:  MOVLB  13
0F4C:  MOVF   54,W
0F4D:  MOVWF  66
0F4E:  MOVLB  00
0F4F:  CALL   0E5
0F50:  MOVLB  13
0F51:  INCF   4E,F
0F52:  GOTO   737
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0F53:  CLRF   50
0F54:  CLRF   4F
0F55:  MOVF   50,W
0F56:  SUBWF  4D,W
0F57:  BTFSS  03.0
0F58:  GOTO   779
0F59:  BTFSS  03.2
0F5A:  GOTO   75F
0F5B:  MOVF   4C,W
0F5C:  SUBWF  4F,W
0F5D:  BTFSC  03.0
0F5E:  GOTO   779
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0F5F:  MOVF   4A,W
0F60:  ADDWF  4F,W
0F61:  MOVWF  04
0F62:  MOVF   4B,W
0F63:  ADDWFC 50,W
0F64:  MOVWF  05
0F65:  MOVF   00,W
0F66:  MOVWF  54
0F67:  MOVLB  04
0F68:  BCF    15.5
0F69:  MOVLW  40
0F6A:  MOVWF  14
0F6B:  MOVLW  09
0F6C:  MOVWF  12
0F6D:  MOVLW  2A
0F6E:  MOVWF  15
0F6F:  MOVLB  13
0F70:  MOVF   54,W
0F71:  MOVWF  66
0F72:  MOVLB  00
0F73:  CALL   0E5
0F74:  MOVLB  13
0F75:  INCF   4F,F
0F76:  BTFSC  03.2
0F77:  INCF   50,F
0F78:  GOTO   755
....................          break;
0F79:  GOTO   7C1
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0F7A:  MOVLB  13
0F7B:  CLRF   51
0F7C:  MOVF   49,W
0F7D:  SUBWF  51,W
0F7E:  BTFSC  03.0
0F7F:  GOTO   798
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0F80:  MOVF   51,W
0F81:  ADDWF  47,W
0F82:  MOVWF  04
0F83:  MOVLW  00
0F84:  ADDWFC 48,W
0F85:  MOVWF  05
0F86:  MOVF   00,W
0F87:  MOVWF  54
0F88:  MOVLB  04
0F89:  BCF    15.5
0F8A:  MOVLW  40
0F8B:  MOVWF  14
0F8C:  MOVLW  09
0F8D:  MOVWF  12
0F8E:  MOVLW  2A
0F8F:  MOVWF  15
0F90:  MOVLB  13
0F91:  MOVF   54,W
0F92:  MOVWF  66
0F93:  MOVLB  00
0F94:  CALL   0F2
0F95:  MOVLB  13
0F96:  INCF   51,F
0F97:  GOTO   77C
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0F98:  CLRF   53
0F99:  CLRF   52
0F9A:  MOVF   53,W
0F9B:  SUBWF  4D,W
0F9C:  BTFSS  03.0
0F9D:  GOTO   7BE
0F9E:  BTFSS  03.2
0F9F:  GOTO   7A4
0FA0:  MOVF   4C,W
0FA1:  SUBWF  52,W
0FA2:  BTFSC  03.0
0FA3:  GOTO   7BE
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0FA4:  MOVF   4A,W
0FA5:  ADDWF  52,W
0FA6:  MOVWF  04
0FA7:  MOVF   4B,W
0FA8:  ADDWFC 53,W
0FA9:  MOVWF  05
0FAA:  MOVF   00,W
0FAB:  MOVWF  54
0FAC:  MOVLB  04
0FAD:  BCF    15.5
0FAE:  MOVLW  40
0FAF:  MOVWF  14
0FB0:  MOVLW  09
0FB1:  MOVWF  12
0FB2:  MOVLW  2A
0FB3:  MOVWF  15
0FB4:  MOVLB  13
0FB5:  MOVF   54,W
0FB6:  MOVWF  66
0FB7:  MOVLB  00
0FB8:  CALL   0F2
0FB9:  MOVLB  13
0FBA:  INCF   52,F
0FBB:  BTFSC  03.2
0FBC:  INCF   53,F
0FBD:  GOTO   79A
....................          break;
0FBE:  GOTO   7C1
0FBF:  MOVLB  00
....................          
....................       default:
....................          break;
0FC0:  MOVLB  13
....................    }
....................    return;
0FC1:  MOVLB  00
0FC2:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
1789:  MOVLB  13
178A:  MOVF   29,W
178B:  MOVWF  49
178C:  MOVLW  01
178D:  MOVWF  4A
178E:  MOVWF  4C
178F:  CLRF   4B
1790:  MOVLP  08
1791:  MOVLB  00
1792:  CALL   0C3
1793:  MOVLP  10
1794:  MOVLB  13
1795:  MOVF   29,W
1796:  MOVWF  49
1797:  CLRF   4A
1798:  CLRF   4C
1799:  MOVLW  80
179A:  MOVWF  4B
179B:  MOVLP  08
179C:  MOVLB  00
179D:  CALL   0C3
179E:  MOVLP  10
179F:  RETURN
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
1000:  MOVLW  05
1001:  MOVLB  13
1002:  MOVWF  47
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
1003:  MOVF   45,W
1004:  MOVWF  49
1005:  CLRF   4A
1006:  MOVLW  01
1007:  MOVWF  4C
1008:  CLRF   4B
1009:  MOVLP  08
100A:  MOVLB  00
100B:  CALL   0C3
100C:  MOVLP  10
100D:  MOVLB  13
100E:  MOVF   45,W
100F:  MOVWF  49
1010:  CLRF   4A
1011:  CLRF   4C
1012:  MOVLW  80
1013:  MOVWF  4B
1014:  MOVLP  08
1015:  MOVLB  00
1016:  CALL   0C3
1017:  MOVLP  10
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
1018:  MOVLB  13
1019:  MOVF   46,W
101A:  MOVWF  4C
101B:  MOVF   45,W
101C:  MOVWF  4B
101D:  MOVF   44,W
101E:  MOVWF  4A
101F:  MOVF   43,W
1020:  MOVWF  49
1021:  MOVLW  26
1022:  MOVWF  4E
1023:  MOVLW  17
1024:  MOVWF  4D
1025:  CLRF   50
1026:  MOVLW  01
1027:  MOVWF  4F
1028:  MOVLW  26
1029:  MOVWF  52
102A:  MOVLW  18
102B:  MOVWF  51
102C:  CLRF   56
102D:  CLRF   55
102E:  CLRF   54
102F:  MOVLW  01
1030:  MOVWF  53
1031:  MOVLP  08
1032:  MOVLB  00
1033:  CALL   0FF
1034:  MOVLP  10
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
1035:  MOVLB  13
1036:  MOVF   45,W
1037:  MOVWF  49
1038:  MOVLW  01
1039:  MOVWF  4A
103A:  MOVWF  4C
103B:  CLRF   4B
103C:  MOVLP  08
103D:  MOVLB  00
103E:  CALL   0C3
103F:  MOVLP  10
1040:  MOVLB  13
1041:  MOVF   45,W
1042:  MOVWF  49
1043:  CLRF   4A
1044:  CLRF   4C
1045:  MOVLW  80
1046:  MOVWF  4B
1047:  MOVLP  08
1048:  MOVLB  00
1049:  CALL   0C3
104A:  MOVLP  10
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
104B:  MOVLB  13
104C:  MOVF   48,W
104D:  MOVWF  78
104E:  MOVLB  00
104F:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1800:  MOVLB  0F
1801:  MOVF   66,F
1802:  BTFSS  03.2
1803:  GOTO   0C7
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1804:  MOVLW  06
1805:  MOVWF  6D
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
1806:  MOVLW  D8
1807:  MOVWF  6E
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1808:  MOVF   6B,W
1809:  MOVLB  10
180A:  MOVWF  2B
180B:  MOVLB  0F
180C:  MOVF   6C,W
180D:  MOVLB  10
180E:  MOVWF  2C
180F:  CLRF   2D
1810:  CLRF   2E
1811:  CLRF   78
1812:  CLRF   79
1813:  CLRF   7A
1814:  MOVF   2B,W
1815:  MOVLB  0F
1816:  MOVWF  6F
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1817:  MOVF   6A,W
1818:  MOVLB  10
1819:  MOVWF  2B
181A:  MOVLB  0F
181B:  MOVF   6B,W
181C:  MOVLB  10
181D:  MOVWF  2C
181E:  MOVLB  0F
181F:  MOVF   6C,W
1820:  MOVLB  10
1821:  MOVWF  2D
1822:  CLRF   2E
1823:  CLRF   78
1824:  CLRF   79
1825:  CLRF   7A
1826:  MOVF   2B,W
1827:  MOVWF  20
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1828:  MOVLB  0F
1829:  CLRF   78
182A:  CLRF   79
182B:  CLRF   7A
182C:  MOVF   69,W
182D:  MOVLB  10
182E:  MOVWF  21
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
182F:  MOVLB  0F
1830:  MOVF   67,W
1831:  MOVLB  13
1832:  MOVWF  49
1833:  CLRF   4A
1834:  MOVLW  01
1835:  MOVWF  4C
1836:  CLRF   4B
1837:  MOVLP  08
1838:  MOVLB  00
1839:  CALL   0C3
183A:  MOVLP  18
183B:  MOVLB  0F
183C:  MOVF   67,W
183D:  MOVLB  13
183E:  MOVWF  49
183F:  CLRF   4A
1840:  CLRF   4C
1841:  MOVLW  80
1842:  MOVWF  4B
1843:  MOVLP  08
1844:  MOVLB  00
1845:  CALL   0C3
1846:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1847:  MOVLB  0F
1848:  MOVF   68,W
1849:  MOVLB  13
184A:  MOVWF  46
184B:  MOVLB  0F
184C:  MOVF   67,W
184D:  MOVLB  13
184E:  MOVWF  45
184F:  MOVLB  0F
1850:  MOVF   66,W
1851:  MOVLB  13
1852:  MOVWF  44
1853:  MOVLB  0F
1854:  MOVF   65,W
1855:  MOVLB  13
1856:  MOVWF  43
1857:  MOVLW  24
1858:  MOVWF  48
1859:  MOVLW  FD
185A:  MOVWF  47
185B:  CLRF   4A
185C:  MOVLW  01
185D:  MOVWF  49
185E:  MOVLP  08
185F:  MOVLB  00
1860:  CALL   6CD
1861:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1862:  MOVLB  0F
1863:  MOVF   67,W
1864:  MOVLB  13
1865:  MOVWF  49
1866:  MOVLW  01
1867:  MOVWF  4A
1868:  MOVWF  4C
1869:  CLRF   4B
186A:  MOVLP  08
186B:  MOVLB  00
186C:  CALL   0C3
186D:  MOVLP  18
186E:  MOVLB  0F
186F:  MOVF   67,W
1870:  MOVLB  13
1871:  MOVWF  49
1872:  CLRF   4A
1873:  CLRF   4C
1874:  MOVLW  80
1875:  MOVWF  4B
1876:  MOVLP  08
1877:  MOVLB  00
1878:  CALL   0C3
1879:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
187A:  MOVLB  0F
187B:  MOVF   67,W
187C:  MOVLB  13
187D:  MOVWF  49
187E:  CLRF   4A
187F:  MOVLW  01
1880:  MOVWF  4C
1881:  CLRF   4B
1882:  MOVLP  08
1883:  MOVLB  00
1884:  CALL   0C3
1885:  MOVLP  18
1886:  MOVLB  0F
1887:  MOVF   67,W
1888:  MOVLB  13
1889:  MOVWF  49
188A:  CLRF   4A
188B:  CLRF   4C
188C:  MOVLW  80
188D:  MOVWF  4B
188E:  MOVLP  08
188F:  MOVLB  00
1890:  CALL   0C3
1891:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1892:  MOVLB  0F
1893:  MOVF   68,W
1894:  MOVLB  13
1895:  MOVWF  46
1896:  MOVLB  0F
1897:  MOVF   67,W
1898:  MOVLB  13
1899:  MOVWF  45
189A:  MOVLB  0F
189B:  MOVF   66,W
189C:  MOVLB  13
189D:  MOVWF  44
189E:  MOVLB  0F
189F:  MOVF   65,W
18A0:  MOVLB  13
18A1:  MOVWF  43
18A2:  MOVLW  24
18A3:  MOVWF  48
18A4:  MOVLW  FE
18A5:  MOVWF  47
18A6:  CLRF   4A
18A7:  MOVLW  04
18A8:  MOVWF  49
18A9:  MOVLP  08
18AA:  MOVLB  00
18AB:  CALL   6CD
18AC:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
18AD:  MOVLB  0F
18AE:  MOVF   67,W
18AF:  MOVLB  13
18B0:  MOVWF  49
18B1:  MOVLW  01
18B2:  MOVWF  4A
18B3:  MOVWF  4C
18B4:  CLRF   4B
18B5:  MOVLP  08
18B6:  MOVLB  00
18B7:  CALL   0C3
18B8:  MOVLP  18
18B9:  MOVLB  0F
18BA:  MOVF   67,W
18BB:  MOVLB  13
18BC:  MOVWF  49
18BD:  CLRF   4A
18BE:  CLRF   4C
18BF:  MOVLW  80
18C0:  MOVWF  4B
18C1:  MOVLP  08
18C2:  MOVLB  00
18C3:  CALL   0C3
18C4:  MOVLP  18
....................    }
18C5:  GOTO   199
18C6:  MOVLB  0F
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
18C7:  DECFSZ 66,W
18C8:  GOTO   19A
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
18C9:  MOVLW  06
18CA:  MOVLB  10
18CB:  MOVWF  22
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
18CC:  MOVLW  DC
18CD:  MOVWF  23
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
18CE:  MOVLB  0F
18CF:  MOVF   6C,W
18D0:  MOVLB  10
18D1:  MOVWF  2B
18D2:  CLRF   2C
18D3:  CLRF   2D
18D4:  CLRF   2E
18D5:  CLRF   78
18D6:  CLRF   79
18D7:  CLRF   7A
18D8:  MOVF   2B,W
18D9:  MOVWF  24
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
18DA:  MOVLB  0F
18DB:  MOVF   6B,W
18DC:  MOVLB  10
18DD:  MOVWF  2B
18DE:  MOVLB  0F
18DF:  MOVF   6C,W
18E0:  MOVLB  10
18E1:  MOVWF  2C
18E2:  CLRF   2D
18E3:  CLRF   2E
18E4:  CLRF   78
18E5:  CLRF   79
18E6:  CLRF   7A
18E7:  MOVF   2B,W
18E8:  MOVWF  25
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
18E9:  MOVLB  0F
18EA:  MOVF   6A,W
18EB:  MOVLB  10
18EC:  MOVWF  2B
18ED:  MOVLB  0F
18EE:  MOVF   6B,W
18EF:  MOVLB  10
18F0:  MOVWF  2C
18F1:  MOVLB  0F
18F2:  MOVF   6C,W
18F3:  MOVLB  10
18F4:  MOVWF  2D
18F5:  CLRF   2E
18F6:  CLRF   78
18F7:  CLRF   79
18F8:  CLRF   7A
18F9:  MOVF   2B,W
18FA:  MOVWF  26
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
18FB:  MOVLB  0F
18FC:  CLRF   78
18FD:  CLRF   79
18FE:  CLRF   7A
18FF:  MOVF   69,W
1900:  MOVLB  10
1901:  MOVWF  27
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1902:  MOVLB  0F
1903:  MOVF   67,W
1904:  MOVLB  13
1905:  MOVWF  49
1906:  CLRF   4A
1907:  MOVLW  01
1908:  MOVWF  4C
1909:  CLRF   4B
190A:  MOVLP  08
190B:  MOVLB  00
190C:  CALL   0C3
190D:  MOVLP  18
190E:  MOVLB  0F
190F:  MOVF   67,W
1910:  MOVLB  13
1911:  MOVWF  49
1912:  CLRF   4A
1913:  CLRF   4C
1914:  MOVLW  80
1915:  MOVWF  4B
1916:  MOVLP  08
1917:  MOVLB  00
1918:  CALL   0C3
1919:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
191A:  MOVLB  0F
191B:  MOVF   68,W
191C:  MOVLB  13
191D:  MOVWF  46
191E:  MOVLB  0F
191F:  MOVF   67,W
1920:  MOVLB  13
1921:  MOVWF  45
1922:  MOVLB  0F
1923:  MOVF   66,W
1924:  MOVLB  13
1925:  MOVWF  44
1926:  MOVLB  0F
1927:  MOVF   65,W
1928:  MOVLB  13
1929:  MOVWF  43
192A:  MOVLW  25
192B:  MOVWF  48
192C:  MOVLW  02
192D:  MOVWF  47
192E:  CLRF   4A
192F:  MOVLW  01
1930:  MOVWF  49
1931:  MOVLP  08
1932:  MOVLB  00
1933:  CALL   6CD
1934:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1935:  MOVLB  0F
1936:  MOVF   67,W
1937:  MOVLB  13
1938:  MOVWF  49
1939:  MOVLW  01
193A:  MOVWF  4A
193B:  MOVWF  4C
193C:  CLRF   4B
193D:  MOVLP  08
193E:  MOVLB  00
193F:  CALL   0C3
1940:  MOVLP  18
1941:  MOVLB  0F
1942:  MOVF   67,W
1943:  MOVLB  13
1944:  MOVWF  49
1945:  CLRF   4A
1946:  CLRF   4C
1947:  MOVLW  80
1948:  MOVWF  4B
1949:  MOVLP  08
194A:  MOVLB  00
194B:  CALL   0C3
194C:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
194D:  MOVLB  0F
194E:  MOVF   67,W
194F:  MOVLB  13
1950:  MOVWF  49
1951:  CLRF   4A
1952:  MOVLW  01
1953:  MOVWF  4C
1954:  CLRF   4B
1955:  MOVLP  08
1956:  MOVLB  00
1957:  CALL   0C3
1958:  MOVLP  18
1959:  MOVLB  0F
195A:  MOVF   67,W
195B:  MOVLB  13
195C:  MOVWF  49
195D:  CLRF   4A
195E:  CLRF   4C
195F:  MOVLW  80
1960:  MOVWF  4B
1961:  MOVLP  08
1962:  MOVLB  00
1963:  CALL   0C3
1964:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1965:  MOVLB  0F
1966:  MOVF   68,W
1967:  MOVLB  13
1968:  MOVWF  46
1969:  MOVLB  0F
196A:  MOVF   67,W
196B:  MOVLB  13
196C:  MOVWF  45
196D:  MOVLB  0F
196E:  MOVF   66,W
196F:  MOVLB  13
1970:  MOVWF  44
1971:  MOVLB  0F
1972:  MOVF   65,W
1973:  MOVLB  13
1974:  MOVWF  43
1975:  MOVLW  25
1976:  MOVWF  48
1977:  MOVLW  03
1978:  MOVWF  47
1979:  CLRF   4A
197A:  MOVLW  05
197B:  MOVWF  49
197C:  MOVLP  08
197D:  MOVLB  00
197E:  CALL   6CD
197F:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1980:  MOVLB  0F
1981:  MOVF   67,W
1982:  MOVLB  13
1983:  MOVWF  49
1984:  MOVLW  01
1985:  MOVWF  4A
1986:  MOVWF  4C
1987:  CLRF   4B
1988:  MOVLP  08
1989:  MOVLB  00
198A:  CALL   0C3
198B:  MOVLP  18
198C:  MOVLB  0F
198D:  MOVF   67,W
198E:  MOVLB  13
198F:  MOVWF  49
1990:  CLRF   4A
1991:  CLRF   4C
1992:  MOVLW  80
1993:  MOVWF  4B
1994:  MOVLP  08
1995:  MOVLB  00
1996:  CALL   0C3
1997:  MOVLP  18
....................    }
1998:  GOTO   199
1999:  MOVLB  0F
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
199A:  MOVLB  10
199B:  CLRF   28
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
199C:  MOVLB  0F
199D:  MOVF   68,W
199E:  MOVLB  13
199F:  MOVWF  46
19A0:  MOVLB  0F
19A1:  MOVF   67,W
19A2:  MOVLB  13
19A3:  MOVWF  45
19A4:  MOVLB  0F
19A5:  MOVF   66,W
19A6:  MOVLB  13
19A7:  MOVWF  44
19A8:  MOVLB  0F
19A9:  MOVF   65,W
19AA:  MOVLB  13
19AB:  MOVWF  43
19AC:  MOVLP  10
19AD:  MOVLB  00
19AE:  CALL   000
19AF:  MOVLP  18
19B0:  MOVF   78,W
19B1:  ANDLW  01
19B2:  SUBLW  01
19B3:  BTFSS  03.2
19B4:  GOTO   1D4
....................       if(timeout_counter > 10)
19B5:  MOVLB  10
19B6:  MOVF   28,W
19B7:  SUBLW  0A
19B8:  BTFSC  03.0
19B9:  GOTO   1C3
....................          delay_ms(200);
19BA:  MOVLW  C8
19BB:  MOVLB  13
19BC:  MOVWF  43
19BD:  MOVLP  08
19BE:  MOVLB  00
19BF:  CALL   7C3
19C0:  MOVLP  18
19C1:  GOTO   1CA
19C2:  MOVLB  10
....................       else
....................          delay_ms(10);   
19C3:  MOVLW  0A
19C4:  MOVLB  13
19C5:  MOVWF  43
19C6:  MOVLP  08
19C7:  MOVLB  00
19C8:  CALL   7C3
19C9:  MOVLP  18
....................       
....................       if(timeout_counter > 100){
19CA:  MOVLB  10
19CB:  MOVF   28,W
19CC:  SUBLW  64
19CD:  BTFSC  03.0
19CE:  GOTO   1D2
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
19CF:  MOVLB  00
19D0:  GOTO   1D4
19D1:  MOVLB  10
....................       }  
....................       timeout_counter++;
19D2:  INCF   28,F
19D3:  GOTO   19C
19D4:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
19D5:  RETURN
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1AAC:  MOVLB  11
1AAD:  MOVF   45,F
1AAE:  BTFSS  03.2
1AAF:  GOTO   35D
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1AB0:  MOVLW  06
1AB1:  MOVWF  4C
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
1AB2:  MOVLW  20
1AB3:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1AB4:  CLRF   5F
1AB5:  CLRF   60
1AB6:  CLRF   78
1AB7:  CLRF   79
1AB8:  CLRF   7A
1AB9:  MOVF   4A,W
1ABA:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1ABB:  CLRF   60
1ABC:  CLRF   78
1ABD:  CLRF   79
1ABE:  CLRF   7A
1ABF:  MOVF   49,W
1AC0:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
1AC1:  CLRF   78
1AC2:  CLRF   79
1AC3:  CLRF   7A
1AC4:  MOVF   48,W
1AC5:  MOVWF  50
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1AC6:  MOVF   46,W
1AC7:  MOVLB  13
1AC8:  MOVWF  49
1AC9:  CLRF   4A
1ACA:  MOVLW  01
1ACB:  MOVWF  4C
1ACC:  CLRF   4B
1ACD:  MOVLP  08
1ACE:  MOVLB  00
1ACF:  CALL   0C3
1AD0:  MOVLP  18
1AD1:  MOVLB  11
1AD2:  MOVF   46,W
1AD3:  MOVLB  13
1AD4:  MOVWF  49
1AD5:  CLRF   4A
1AD6:  CLRF   4C
1AD7:  MOVLW  80
1AD8:  MOVWF  4B
1AD9:  MOVLP  08
1ADA:  MOVLB  00
1ADB:  CALL   0C3
1ADC:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1ADD:  MOVLB  11
1ADE:  MOVF   47,W
1ADF:  MOVLB  13
1AE0:  MOVWF  46
1AE1:  MOVLB  11
1AE2:  MOVF   46,W
1AE3:  MOVLB  13
1AE4:  MOVWF  45
1AE5:  MOVLB  11
1AE6:  MOVF   45,W
1AE7:  MOVLB  13
1AE8:  MOVWF  44
1AE9:  MOVLB  11
1AEA:  MOVF   44,W
1AEB:  MOVLB  13
1AEC:  MOVWF  43
1AED:  MOVLW  25
1AEE:  MOVWF  48
1AEF:  MOVLW  7C
1AF0:  MOVWF  47
1AF1:  CLRF   4A
1AF2:  MOVLW  01
1AF3:  MOVWF  49
1AF4:  MOVLP  08
1AF5:  MOVLB  00
1AF6:  CALL   6CD
1AF7:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1AF8:  MOVLB  11
1AF9:  MOVF   46,W
1AFA:  MOVLB  13
1AFB:  MOVWF  49
1AFC:  MOVLW  01
1AFD:  MOVWF  4A
1AFE:  MOVWF  4C
1AFF:  CLRF   4B
1B00:  MOVLP  08
1B01:  MOVLB  00
1B02:  CALL   0C3
1B03:  MOVLP  18
1B04:  MOVLB  11
1B05:  MOVF   46,W
1B06:  MOVLB  13
1B07:  MOVWF  49
1B08:  CLRF   4A
1B09:  CLRF   4C
1B0A:  MOVLW  80
1B0B:  MOVWF  4B
1B0C:  MOVLP  08
1B0D:  MOVLB  00
1B0E:  CALL   0C3
1B0F:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1B10:  MOVLB  11
1B11:  MOVF   46,W
1B12:  MOVLB  13
1B13:  MOVWF  49
1B14:  CLRF   4A
1B15:  MOVLW  01
1B16:  MOVWF  4C
1B17:  CLRF   4B
1B18:  MOVLP  08
1B19:  MOVLB  00
1B1A:  CALL   0C3
1B1B:  MOVLP  18
1B1C:  MOVLB  11
1B1D:  MOVF   46,W
1B1E:  MOVLB  13
1B1F:  MOVWF  49
1B20:  CLRF   4A
1B21:  CLRF   4C
1B22:  MOVLW  80
1B23:  MOVWF  4B
1B24:  MOVLP  08
1B25:  MOVLB  00
1B26:  CALL   0C3
1B27:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1B28:  MOVLB  11
1B29:  MOVF   47,W
1B2A:  MOVLB  13
1B2B:  MOVWF  46
1B2C:  MOVLB  11
1B2D:  MOVF   46,W
1B2E:  MOVLB  13
1B2F:  MOVWF  45
1B30:  MOVLB  11
1B31:  MOVF   45,W
1B32:  MOVLB  13
1B33:  MOVWF  44
1B34:  MOVLB  11
1B35:  MOVF   44,W
1B36:  MOVLB  13
1B37:  MOVWF  43
1B38:  MOVLW  25
1B39:  MOVWF  48
1B3A:  MOVLW  7D
1B3B:  MOVWF  47
1B3C:  CLRF   4A
1B3D:  MOVLW  04
1B3E:  MOVWF  49
1B3F:  MOVLP  08
1B40:  MOVLB  00
1B41:  CALL   6CD
1B42:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1B43:  MOVLB  11
1B44:  MOVF   46,W
1B45:  MOVLB  13
1B46:  MOVWF  49
1B47:  MOVLW  01
1B48:  MOVWF  4A
1B49:  MOVWF  4C
1B4A:  CLRF   4B
1B4B:  MOVLP  08
1B4C:  MOVLB  00
1B4D:  CALL   0C3
1B4E:  MOVLP  18
1B4F:  MOVLB  11
1B50:  MOVF   46,W
1B51:  MOVLB  13
1B52:  MOVWF  49
1B53:  CLRF   4A
1B54:  CLRF   4C
1B55:  MOVLW  80
1B56:  MOVWF  4B
1B57:  MOVLP  08
1B58:  MOVLB  00
1B59:  CALL   0C3
1B5A:  MOVLP  18
....................    }
1B5B:  GOTO   412
1B5C:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1B5D:  DECFSZ 45,W
1B5E:  GOTO   413
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1B5F:  MOVLW  06
1B60:  MOVWF  51
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
1B61:  MOVLW  21
1B62:  MOVWF  52
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1B63:  CLRF   5E
1B64:  CLRF   5F
1B65:  CLRF   60
1B66:  CLRF   78
1B67:  CLRF   79
1B68:  CLRF   7A
1B69:  MOVF   4B,W
1B6A:  MOVWF  53
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1B6B:  CLRF   5F
1B6C:  CLRF   60
1B6D:  CLRF   78
1B6E:  CLRF   79
1B6F:  CLRF   7A
1B70:  MOVF   4A,W
1B71:  MOVWF  54
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1B72:  CLRF   60
1B73:  CLRF   78
1B74:  CLRF   79
1B75:  CLRF   7A
1B76:  MOVF   49,W
1B77:  MOVWF  55
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
1B78:  CLRF   78
1B79:  CLRF   79
1B7A:  CLRF   7A
1B7B:  MOVF   48,W
1B7C:  MOVWF  56
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1B7D:  MOVF   46,W
1B7E:  MOVLB  13
1B7F:  MOVWF  49
1B80:  CLRF   4A
1B81:  MOVLW  01
1B82:  MOVWF  4C
1B83:  CLRF   4B
1B84:  MOVLP  08
1B85:  MOVLB  00
1B86:  CALL   0C3
1B87:  MOVLP  18
1B88:  MOVLB  11
1B89:  MOVF   46,W
1B8A:  MOVLB  13
1B8B:  MOVWF  49
1B8C:  CLRF   4A
1B8D:  CLRF   4C
1B8E:  MOVLW  80
1B8F:  MOVWF  4B
1B90:  MOVLP  08
1B91:  MOVLB  00
1B92:  CALL   0C3
1B93:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1B94:  MOVLB  11
1B95:  MOVF   47,W
1B96:  MOVLB  13
1B97:  MOVWF  46
1B98:  MOVLB  11
1B99:  MOVF   46,W
1B9A:  MOVLB  13
1B9B:  MOVWF  45
1B9C:  MOVLB  11
1B9D:  MOVF   45,W
1B9E:  MOVLB  13
1B9F:  MOVWF  44
1BA0:  MOVLB  11
1BA1:  MOVF   44,W
1BA2:  MOVLB  13
1BA3:  MOVWF  43
1BA4:  MOVLW  25
1BA5:  MOVWF  48
1BA6:  MOVLW  81
1BA7:  MOVWF  47
1BA8:  CLRF   4A
1BA9:  MOVLW  01
1BAA:  MOVWF  49
1BAB:  MOVLP  08
1BAC:  MOVLB  00
1BAD:  CALL   6CD
1BAE:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1BAF:  MOVLB  11
1BB0:  MOVF   46,W
1BB1:  MOVLB  13
1BB2:  MOVWF  49
1BB3:  MOVLW  01
1BB4:  MOVWF  4A
1BB5:  MOVWF  4C
1BB6:  CLRF   4B
1BB7:  MOVLP  08
1BB8:  MOVLB  00
1BB9:  CALL   0C3
1BBA:  MOVLP  18
1BBB:  MOVLB  11
1BBC:  MOVF   46,W
1BBD:  MOVLB  13
1BBE:  MOVWF  49
1BBF:  CLRF   4A
1BC0:  CLRF   4C
1BC1:  MOVLW  80
1BC2:  MOVWF  4B
1BC3:  MOVLP  08
1BC4:  MOVLB  00
1BC5:  CALL   0C3
1BC6:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1BC7:  MOVLB  11
1BC8:  MOVF   46,W
1BC9:  MOVLB  13
1BCA:  MOVWF  49
1BCB:  CLRF   4A
1BCC:  MOVLW  01
1BCD:  MOVWF  4C
1BCE:  CLRF   4B
1BCF:  MOVLP  08
1BD0:  MOVLB  00
1BD1:  CALL   0C3
1BD2:  MOVLP  18
1BD3:  MOVLB  11
1BD4:  MOVF   46,W
1BD5:  MOVLB  13
1BD6:  MOVWF  49
1BD7:  CLRF   4A
1BD8:  CLRF   4C
1BD9:  MOVLW  80
1BDA:  MOVWF  4B
1BDB:  MOVLP  08
1BDC:  MOVLB  00
1BDD:  CALL   0C3
1BDE:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1BDF:  MOVLB  11
1BE0:  MOVF   47,W
1BE1:  MOVLB  13
1BE2:  MOVWF  46
1BE3:  MOVLB  11
1BE4:  MOVF   46,W
1BE5:  MOVLB  13
1BE6:  MOVWF  45
1BE7:  MOVLB  11
1BE8:  MOVF   45,W
1BE9:  MOVLB  13
1BEA:  MOVWF  44
1BEB:  MOVLB  11
1BEC:  MOVF   44,W
1BED:  MOVLB  13
1BEE:  MOVWF  43
1BEF:  MOVLW  25
1BF0:  MOVWF  48
1BF1:  MOVLW  82
1BF2:  MOVWF  47
1BF3:  CLRF   4A
1BF4:  MOVLW  05
1BF5:  MOVWF  49
1BF6:  MOVLP  08
1BF7:  MOVLB  00
1BF8:  CALL   6CD
1BF9:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1BFA:  MOVLB  11
1BFB:  MOVF   46,W
1BFC:  MOVLB  13
1BFD:  MOVWF  49
1BFE:  MOVLW  01
1BFF:  MOVWF  4A
1C00:  MOVWF  4C
1C01:  CLRF   4B
1C02:  MOVLP  08
1C03:  MOVLB  00
1C04:  CALL   0C3
1C05:  MOVLP  18
1C06:  MOVLB  11
1C07:  MOVF   46,W
1C08:  MOVLB  13
1C09:  MOVWF  49
1C0A:  CLRF   4A
1C0B:  CLRF   4C
1C0C:  MOVLW  80
1C0D:  MOVWF  4B
1C0E:  MOVLP  08
1C0F:  MOVLB  00
1C10:  CALL   0C3
1C11:  MOVLP  18
....................    }
1C12:  MOVLB  11
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1C13:  CLRF   57
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1C14:  MOVF   47,W
1C15:  MOVLB  13
1C16:  MOVWF  46
1C17:  MOVLB  11
1C18:  MOVF   46,W
1C19:  MOVLB  13
1C1A:  MOVWF  45
1C1B:  MOVLB  11
1C1C:  MOVF   45,W
1C1D:  MOVLB  13
1C1E:  MOVWF  44
1C1F:  MOVLB  11
1C20:  MOVF   44,W
1C21:  MOVLB  13
1C22:  MOVWF  43
1C23:  MOVLP  10
1C24:  MOVLB  00
1C25:  CALL   000
1C26:  MOVLP  18
1C27:  MOVF   78,W
1C28:  ANDLW  01
1C29:  SUBLW  01
1C2A:  BTFSS  03.2
1C2B:  GOTO   44B
....................       if(timeout_counter > 10)
1C2C:  MOVLB  11
1C2D:  MOVF   57,W
1C2E:  SUBLW  0A
1C2F:  BTFSC  03.0
1C30:  GOTO   43A
....................          delay_ms(200);
1C31:  MOVLW  C8
1C32:  MOVLB  13
1C33:  MOVWF  43
1C34:  MOVLP  08
1C35:  MOVLB  00
1C36:  CALL   7C3
1C37:  MOVLP  18
1C38:  GOTO   441
1C39:  MOVLB  11
....................       else
....................          delay_ms(10);   
1C3A:  MOVLW  0A
1C3B:  MOVLB  13
1C3C:  MOVWF  43
1C3D:  MOVLP  08
1C3E:  MOVLB  00
1C3F:  CALL   7C3
1C40:  MOVLP  18
....................       
....................       if(timeout_counter > 100){
1C41:  MOVLB  11
1C42:  MOVF   57,W
1C43:  SUBLW  64
1C44:  BTFSC  03.0
1C45:  GOTO   449
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1C46:  MOVLB  00
1C47:  GOTO   44B
1C48:  MOVLB  11
....................       }  
....................       timeout_counter++;
1C49:  INCF   57,F
1C4A:  GOTO   414
1C4B:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
1C4C:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2995:  MOVLB  11
2996:  MOVF   50,F
2997:  BTFSS  03.2
2998:  GOTO   207
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
2999:  MOVLW  03
299A:  MOVWF  58
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
299B:  CLRF   64
299C:  CLRF   65
299D:  CLRF   78
299E:  CLRF   79
299F:  CLRF   7A
29A0:  MOVF   55,W
29A1:  MOVWF  59
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
29A2:  CLRF   65
29A3:  CLRF   78
29A4:  CLRF   79
29A5:  CLRF   7A
29A6:  MOVF   54,W
29A7:  MOVWF  5A
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
29A8:  CLRF   78
29A9:  CLRF   79
29AA:  CLRF   7A
29AB:  MOVF   53,W
29AC:  MOVWF  5B
....................             
....................       output_low(flash_stream.cs_pin);
29AD:  MOVF   51,W
29AE:  MOVLB  13
29AF:  MOVWF  49
29B0:  CLRF   4A
29B1:  MOVLW  01
29B2:  MOVWF  4C
29B3:  CLRF   4B
29B4:  MOVLP  08
29B5:  MOVLB  00
29B6:  CALL   0C3
29B7:  MOVLP  28
29B8:  MOVLB  11
29B9:  MOVF   51,W
29BA:  MOVLB  13
29BB:  MOVWF  49
29BC:  CLRF   4A
29BD:  CLRF   4C
29BE:  MOVLW  80
29BF:  MOVWF  4B
29C0:  MOVLP  08
29C1:  MOVLB  00
29C2:  CALL   0C3
29C3:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
29C4:  MOVLB  11
29C5:  MOVF   52,W
29C6:  MOVLB  13
29C7:  MOVWF  4C
29C8:  MOVLB  11
29C9:  MOVF   51,W
29CA:  MOVLB  13
29CB:  MOVWF  4B
29CC:  MOVLB  11
29CD:  MOVF   50,W
29CE:  MOVLB  13
29CF:  MOVWF  4A
29D0:  MOVLB  11
29D1:  MOVF   4F,W
29D2:  MOVLB  13
29D3:  MOVWF  49
29D4:  MOVLW  25
29D5:  MOVWF  4E
29D6:  MOVLW  88
29D7:  MOVWF  4D
29D8:  CLRF   50
29D9:  MOVLW  04
29DA:  MOVWF  4F
29DB:  MOVLW  25
29DC:  MOVWF  52
29DD:  MOVLW  87
29DE:  MOVWF  51
29DF:  CLRF   56
29E0:  CLRF   55
29E1:  CLRF   54
29E2:  MOVLW  01
29E3:  MOVWF  53
29E4:  MOVLP  08
29E5:  MOVLB  00
29E6:  CALL   0FF
29E7:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
29E8:  MOVLW  02
29E9:  MOVWF  77
29EA:  DECFSZ 77,F
29EB:  GOTO   1EA
29EC:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
29ED:  MOVLB  11
29EE:  MOVF   51,W
29EF:  MOVLB  13
29F0:  MOVWF  49
29F1:  MOVLW  01
29F2:  MOVWF  4A
29F3:  MOVWF  4C
29F4:  CLRF   4B
29F5:  MOVLP  08
29F6:  MOVLB  00
29F7:  CALL   0C3
29F8:  MOVLP  28
29F9:  MOVLB  11
29FA:  MOVF   51,W
29FB:  MOVLB  13
29FC:  MOVWF  49
29FD:  CLRF   4A
29FE:  CLRF   4C
29FF:  MOVLW  80
2A00:  MOVWF  4B
2A01:  MOVLP  08
2A02:  MOVLB  00
2A03:  CALL   0C3
2A04:  MOVLP  28
....................    }
2A05:  GOTO   27D
2A06:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
2A07:  DECFSZ 50,W
2A08:  GOTO   27E
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
2A09:  MOVLW  13
2A0A:  MOVWF  5C
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
2A0B:  CLRF   63
2A0C:  CLRF   64
2A0D:  CLRF   65
2A0E:  CLRF   78
2A0F:  CLRF   79
2A10:  CLRF   7A
2A11:  MOVF   56,W
2A12:  MOVWF  5D
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2A13:  CLRF   64
2A14:  CLRF   65
2A15:  CLRF   78
2A16:  CLRF   79
2A17:  CLRF   7A
2A18:  MOVF   55,W
2A19:  MOVWF  5E
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2A1A:  CLRF   65
2A1B:  CLRF   78
2A1C:  CLRF   79
2A1D:  CLRF   7A
2A1E:  MOVF   54,W
2A1F:  MOVWF  5F
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2A20:  CLRF   78
2A21:  CLRF   79
2A22:  CLRF   7A
2A23:  MOVF   53,W
2A24:  MOVWF  60
....................    
....................       output_low(flash_stream.cs_pin);
2A25:  MOVF   51,W
2A26:  MOVLB  13
2A27:  MOVWF  49
2A28:  CLRF   4A
2A29:  MOVLW  01
2A2A:  MOVWF  4C
2A2B:  CLRF   4B
2A2C:  MOVLP  08
2A2D:  MOVLB  00
2A2E:  CALL   0C3
2A2F:  MOVLP  28
2A30:  MOVLB  11
2A31:  MOVF   51,W
2A32:  MOVLB  13
2A33:  MOVWF  49
2A34:  CLRF   4A
2A35:  CLRF   4C
2A36:  MOVLW  80
2A37:  MOVWF  4B
2A38:  MOVLP  08
2A39:  MOVLB  00
2A3A:  CALL   0C3
2A3B:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
2A3C:  MOVLB  11
2A3D:  MOVF   52,W
2A3E:  MOVLB  13
2A3F:  MOVWF  4C
2A40:  MOVLB  11
2A41:  MOVF   51,W
2A42:  MOVLB  13
2A43:  MOVWF  4B
2A44:  MOVLB  11
2A45:  MOVF   50,W
2A46:  MOVLB  13
2A47:  MOVWF  4A
2A48:  MOVLB  11
2A49:  MOVF   4F,W
2A4A:  MOVLB  13
2A4B:  MOVWF  49
2A4C:  MOVLW  25
2A4D:  MOVWF  4E
2A4E:  MOVLW  8C
2A4F:  MOVWF  4D
2A50:  CLRF   50
2A51:  MOVLW  05
2A52:  MOVWF  4F
2A53:  MOVLW  25
2A54:  MOVWF  52
2A55:  MOVLW  87
2A56:  MOVWF  51
2A57:  CLRF   56
2A58:  CLRF   55
2A59:  CLRF   54
2A5A:  MOVLW  01
2A5B:  MOVWF  53
2A5C:  MOVLP  08
2A5D:  MOVLB  00
2A5E:  CALL   0FF
2A5F:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2A60:  MOVLW  02
2A61:  MOVWF  77
2A62:  DECFSZ 77,F
2A63:  GOTO   262
2A64:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2A65:  MOVLB  11
2A66:  MOVF   51,W
2A67:  MOVLB  13
2A68:  MOVWF  49
2A69:  MOVLW  01
2A6A:  MOVWF  4A
2A6B:  MOVWF  4C
2A6C:  CLRF   4B
2A6D:  MOVLP  08
2A6E:  MOVLB  00
2A6F:  CALL   0C3
2A70:  MOVLP  28
2A71:  MOVLB  11
2A72:  MOVF   51,W
2A73:  MOVLB  13
2A74:  MOVWF  49
2A75:  CLRF   4A
2A76:  CLRF   4C
2A77:  MOVLW  80
2A78:  MOVWF  4B
2A79:  MOVLP  08
2A7A:  MOVLB  00
2A7B:  CALL   0C3
2A7C:  MOVLP  28
2A7D:  MOVLB  11
....................    }
....................    return read_data;
2A7E:  MOVF   57,W
2A7F:  MOVWF  78
2A80:  MOVLP  28
2A81:  MOVLB  00
2A82:  GOTO   52A (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0A28:  MOVLB  13
0A29:  MOVF   28,F
0A2A:  BTFSS  03.2
0A2B:  GOTO   288
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0A2C:  MOVLW  03
0A2D:  MOVWF  35
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A2E:  CLRF   41
0A2F:  CLRF   42
0A30:  CLRF   78
0A31:  CLRF   79
0A32:  CLRF   7A
0A33:  MOVF   2D,W
0A34:  MOVWF  36
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A35:  CLRF   42
0A36:  CLRF   78
0A37:  CLRF   79
0A38:  CLRF   7A
0A39:  MOVF   2C,W
0A3A:  MOVWF  37
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0A3B:  CLRF   78
0A3C:  CLRF   79
0A3D:  CLRF   7A
0A3E:  MOVF   2B,W
0A3F:  MOVWF  38
....................             
....................       output_low(flash_stream.cs_pin);
0A40:  MOVF   29,W
0A41:  MOVWF  49
0A42:  CLRF   4A
0A43:  MOVLW  01
0A44:  MOVWF  4C
0A45:  CLRF   4B
0A46:  MOVLB  00
0A47:  CALL   0C3
0A48:  MOVLB  13
0A49:  MOVF   29,W
0A4A:  MOVWF  49
0A4B:  CLRF   4A
0A4C:  CLRF   4C
0A4D:  MOVLW  80
0A4E:  MOVWF  4B
0A4F:  MOVLB  00
0A50:  CALL   0C3
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0A51:  MOVLB  13
0A52:  MOVF   2A,W
0A53:  MOVWF  4C
0A54:  MOVF   29,W
0A55:  MOVWF  4B
0A56:  MOVF   28,W
0A57:  MOVWF  4A
0A58:  MOVF   27,W
0A59:  MOVWF  49
0A5A:  MOVLW  26
0A5B:  MOVWF  4E
0A5C:  MOVLW  05
0A5D:  MOVWF  4D
0A5E:  CLRF   50
0A5F:  MOVLW  04
0A60:  MOVWF  4F
0A61:  MOVF   30,W
0A62:  MOVWF  52
0A63:  MOVF   2F,W
0A64:  MOVWF  51
0A65:  MOVF   34,W
0A66:  MOVWF  56
0A67:  MOVF   33,W
0A68:  MOVWF  55
0A69:  MOVF   32,W
0A6A:  MOVWF  54
0A6B:  MOVF   31,W
0A6C:  MOVWF  53
0A6D:  MOVLB  00
0A6E:  CALL   0FF
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0A6F:  MOVLW  02
0A70:  MOVWF  77
0A71:  DECFSZ 77,F
0A72:  GOTO   271
0A73:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0A74:  MOVLB  13
0A75:  MOVF   29,W
0A76:  MOVWF  49
0A77:  MOVLW  01
0A78:  MOVWF  4A
0A79:  MOVWF  4C
0A7A:  CLRF   4B
0A7B:  MOVLB  00
0A7C:  CALL   0C3
0A7D:  MOVLB  13
0A7E:  MOVF   29,W
0A7F:  MOVWF  49
0A80:  CLRF   4A
0A81:  CLRF   4C
0A82:  MOVLW  80
0A83:  MOVWF  4B
0A84:  MOVLB  00
0A85:  CALL   0C3
....................    }
0A86:  GOTO   2EC
0A87:  MOVLB  13
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0A88:  DECFSZ 28,W
0A89:  GOTO   2ED
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0A8A:  MOVLW  13
0A8B:  MOVWF  39
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0A8C:  CLRF   40
0A8D:  CLRF   41
0A8E:  CLRF   42
0A8F:  CLRF   78
0A90:  CLRF   79
0A91:  CLRF   7A
0A92:  MOVF   2E,W
0A93:  MOVWF  3A
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A94:  CLRF   41
0A95:  CLRF   42
0A96:  CLRF   78
0A97:  CLRF   79
0A98:  CLRF   7A
0A99:  MOVF   2D,W
0A9A:  MOVWF  3B
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A9B:  CLRF   42
0A9C:  CLRF   78
0A9D:  CLRF   79
0A9E:  CLRF   7A
0A9F:  MOVF   2C,W
0AA0:  MOVWF  3C
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0AA1:  CLRF   78
0AA2:  CLRF   79
0AA3:  CLRF   7A
0AA4:  MOVF   2B,W
0AA5:  MOVWF  3D
....................    
....................       output_low(flash_stream.cs_pin);
0AA6:  MOVF   29,W
0AA7:  MOVWF  49
0AA8:  CLRF   4A
0AA9:  MOVLW  01
0AAA:  MOVWF  4C
0AAB:  CLRF   4B
0AAC:  MOVLB  00
0AAD:  CALL   0C3
0AAE:  MOVLB  13
0AAF:  MOVF   29,W
0AB0:  MOVWF  49
0AB1:  CLRF   4A
0AB2:  CLRF   4C
0AB3:  MOVLW  80
0AB4:  MOVWF  4B
0AB5:  MOVLB  00
0AB6:  CALL   0C3
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0AB7:  MOVLB  13
0AB8:  MOVF   2A,W
0AB9:  MOVWF  4C
0ABA:  MOVF   29,W
0ABB:  MOVWF  4B
0ABC:  MOVF   28,W
0ABD:  MOVWF  4A
0ABE:  MOVF   27,W
0ABF:  MOVWF  49
0AC0:  MOVLW  26
0AC1:  MOVWF  4E
0AC2:  MOVLW  09
0AC3:  MOVWF  4D
0AC4:  CLRF   50
0AC5:  MOVLW  05
0AC6:  MOVWF  4F
0AC7:  MOVF   30,W
0AC8:  MOVWF  52
0AC9:  MOVF   2F,W
0ACA:  MOVWF  51
0ACB:  MOVF   34,W
0ACC:  MOVWF  56
0ACD:  MOVF   33,W
0ACE:  MOVWF  55
0ACF:  MOVF   32,W
0AD0:  MOVWF  54
0AD1:  MOVF   31,W
0AD2:  MOVWF  53
0AD3:  MOVLB  00
0AD4:  CALL   0FF
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0AD5:  MOVLW  02
0AD6:  MOVWF  77
0AD7:  DECFSZ 77,F
0AD8:  GOTO   2D7
0AD9:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0ADA:  MOVLB  13
0ADB:  MOVF   29,W
0ADC:  MOVWF  49
0ADD:  MOVLW  01
0ADE:  MOVWF  4A
0ADF:  MOVWF  4C
0AE0:  CLRF   4B
0AE1:  MOVLB  00
0AE2:  CALL   0C3
0AE3:  MOVLB  13
0AE4:  MOVF   29,W
0AE5:  MOVWF  49
0AE6:  CLRF   4A
0AE7:  CLRF   4C
0AE8:  MOVLW  80
0AE9:  MOVWF  4B
0AEA:  MOVLB  00
0AEB:  CALL   0C3
0AEC:  MOVLB  13
....................    }
....................    return;
0AED:  MOVLB  00
0AEE:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
3000:  MOVLB  11
3001:  MOVF   44,F
3002:  BTFSS  03.2
3003:  GOTO   0C2
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
3004:  MOVLW  06
3005:  MOVWF  4C
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
3006:  MOVLW  02
3007:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3008:  MOVF   49,W
3009:  MOVWF  5D
300A:  MOVF   4A,W
300B:  MOVWF  5E
300C:  CLRF   5F
300D:  CLRF   60
300E:  CLRF   78
300F:  CLRF   79
3010:  CLRF   7A
3011:  MOVF   5D,W
3012:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3013:  MOVF   48,W
3014:  MOVWF  5D
3015:  MOVF   49,W
3016:  MOVWF  5E
3017:  MOVF   4A,W
3018:  MOVWF  5F
3019:  CLRF   60
301A:  CLRF   78
301B:  CLRF   79
301C:  CLRF   7A
301D:  MOVF   5D,W
301E:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
301F:  CLRF   78
3020:  CLRF   79
3021:  CLRF   7A
3022:  MOVF   47,W
3023:  MOVWF  50
....................       flash_cmd[4] = write_data;
3024:  MOVF   4B,W
3025:  MOVWF  51
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3026:  MOVF   45,W
3027:  MOVLB  13
3028:  MOVWF  49
3029:  CLRF   4A
302A:  MOVLW  01
302B:  MOVWF  4C
302C:  CLRF   4B
302D:  MOVLP  08
302E:  MOVLB  00
302F:  CALL   0C3
3030:  MOVLP  30
3031:  MOVLB  11
3032:  MOVF   45,W
3033:  MOVLB  13
3034:  MOVWF  49
3035:  CLRF   4A
3036:  CLRF   4C
3037:  MOVLW  80
3038:  MOVWF  4B
3039:  MOVLP  08
303A:  MOVLB  00
303B:  CALL   0C3
303C:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
303D:  MOVLB  11
303E:  MOVF   46,W
303F:  MOVLB  13
3040:  MOVWF  46
3041:  MOVLB  11
3042:  MOVF   45,W
3043:  MOVLB  13
3044:  MOVWF  45
3045:  MOVLB  11
3046:  MOVF   44,W
3047:  MOVLB  13
3048:  MOVWF  44
3049:  MOVLB  11
304A:  MOVF   43,W
304B:  MOVLB  13
304C:  MOVWF  43
304D:  MOVLW  25
304E:  MOVWF  48
304F:  MOVLW  7C
3050:  MOVWF  47
3051:  CLRF   4A
3052:  MOVLW  01
3053:  MOVWF  49
3054:  MOVLP  08
3055:  MOVLB  00
3056:  CALL   6CD
3057:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3058:  MOVLB  11
3059:  MOVF   45,W
305A:  MOVLB  13
305B:  MOVWF  49
305C:  MOVLW  01
305D:  MOVWF  4A
305E:  MOVWF  4C
305F:  CLRF   4B
3060:  MOVLP  08
3061:  MOVLB  00
3062:  CALL   0C3
3063:  MOVLP  30
3064:  MOVLB  11
3065:  MOVF   45,W
3066:  MOVLB  13
3067:  MOVWF  49
3068:  CLRF   4A
3069:  CLRF   4C
306A:  MOVLW  80
306B:  MOVWF  4B
306C:  MOVLP  08
306D:  MOVLB  00
306E:  CALL   0C3
306F:  MOVLP  30
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
3070:  MOVLB  11
3071:  MOVF   45,W
3072:  MOVLB  13
3073:  MOVWF  49
3074:  CLRF   4A
3075:  MOVLW  01
3076:  MOVWF  4C
3077:  CLRF   4B
3078:  MOVLP  08
3079:  MOVLB  00
307A:  CALL   0C3
307B:  MOVLP  30
307C:  MOVLB  11
307D:  MOVF   45,W
307E:  MOVLB  13
307F:  MOVWF  49
3080:  CLRF   4A
3081:  CLRF   4C
3082:  MOVLW  80
3083:  MOVWF  4B
3084:  MOVLP  08
3085:  MOVLB  00
3086:  CALL   0C3
3087:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
3088:  MOVLB  11
3089:  MOVF   46,W
308A:  MOVLB  13
308B:  MOVWF  46
308C:  MOVLB  11
308D:  MOVF   45,W
308E:  MOVLB  13
308F:  MOVWF  45
3090:  MOVLB  11
3091:  MOVF   44,W
3092:  MOVLB  13
3093:  MOVWF  44
3094:  MOVLB  11
3095:  MOVF   43,W
3096:  MOVLB  13
3097:  MOVWF  43
3098:  MOVLW  25
3099:  MOVWF  48
309A:  MOVLW  7D
309B:  MOVWF  47
309C:  CLRF   4A
309D:  MOVLW  05
309E:  MOVWF  49
309F:  MOVLP  08
30A0:  MOVLB  00
30A1:  CALL   6CD
30A2:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
30A3:  MOVLW  02
30A4:  MOVWF  77
30A5:  DECFSZ 77,F
30A6:  GOTO   0A5
30A7:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
30A8:  MOVLB  11
30A9:  MOVF   45,W
30AA:  MOVLB  13
30AB:  MOVWF  49
30AC:  MOVLW  01
30AD:  MOVWF  4A
30AE:  MOVWF  4C
30AF:  CLRF   4B
30B0:  MOVLP  08
30B1:  MOVLB  00
30B2:  CALL   0C3
30B3:  MOVLP  30
30B4:  MOVLB  11
30B5:  MOVF   45,W
30B6:  MOVLB  13
30B7:  MOVWF  49
30B8:  CLRF   4A
30B9:  CLRF   4C
30BA:  MOVLW  80
30BB:  MOVWF  4B
30BC:  MOVLP  08
30BD:  MOVLB  00
30BE:  CALL   0C3
30BF:  MOVLP  30
....................    }
30C0:  GOTO   18A
30C1:  MOVLB  11
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
30C2:  DECFSZ 44,W
30C3:  GOTO   18B
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
30C4:  MOVLW  06
30C5:  MOVWF  52
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
30C6:  MOVLW  12
30C7:  MOVWF  53
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
30C8:  MOVF   4A,W
30C9:  MOVWF  5D
30CA:  CLRF   5E
30CB:  CLRF   5F
30CC:  CLRF   60
30CD:  CLRF   78
30CE:  CLRF   79
30CF:  CLRF   7A
30D0:  MOVF   5D,W
30D1:  MOVWF  54
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
30D2:  MOVF   49,W
30D3:  MOVWF  5D
30D4:  MOVF   4A,W
30D5:  MOVWF  5E
30D6:  CLRF   5F
30D7:  CLRF   60
30D8:  CLRF   78
30D9:  CLRF   79
30DA:  CLRF   7A
30DB:  MOVF   5D,W
30DC:  MOVWF  55
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
30DD:  MOVF   48,W
30DE:  MOVWF  5D
30DF:  MOVF   49,W
30E0:  MOVWF  5E
30E1:  MOVF   4A,W
30E2:  MOVWF  5F
30E3:  CLRF   60
30E4:  CLRF   78
30E5:  CLRF   79
30E6:  CLRF   7A
30E7:  MOVF   5D,W
30E8:  MOVWF  56
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
30E9:  CLRF   78
30EA:  CLRF   79
30EB:  CLRF   7A
30EC:  MOVF   47,W
30ED:  MOVWF  57
....................       flash_cmd[5] = write_data;
30EE:  MOVF   4B,W
30EF:  MOVWF  58
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
30F0:  MOVF   45,W
30F1:  MOVLB  13
30F2:  MOVWF  49
30F3:  CLRF   4A
30F4:  MOVLW  01
30F5:  MOVWF  4C
30F6:  CLRF   4B
30F7:  MOVLP  08
30F8:  MOVLB  00
30F9:  CALL   0C3
30FA:  MOVLP  30
30FB:  MOVLB  11
30FC:  MOVF   45,W
30FD:  MOVLB  13
30FE:  MOVWF  49
30FF:  CLRF   4A
3100:  CLRF   4C
3101:  MOVLW  80
3102:  MOVWF  4B
3103:  MOVLP  08
3104:  MOVLB  00
3105:  CALL   0C3
3106:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
3107:  MOVLB  11
3108:  MOVF   46,W
3109:  MOVLB  13
310A:  MOVWF  46
310B:  MOVLB  11
310C:  MOVF   45,W
310D:  MOVLB  13
310E:  MOVWF  45
310F:  MOVLB  11
3110:  MOVF   44,W
3111:  MOVLB  13
3112:  MOVWF  44
3113:  MOVLB  11
3114:  MOVF   43,W
3115:  MOVLB  13
3116:  MOVWF  43
3117:  MOVLW  25
3118:  MOVWF  48
3119:  MOVLW  82
311A:  MOVWF  47
311B:  CLRF   4A
311C:  MOVLW  01
311D:  MOVWF  49
311E:  MOVLP  08
311F:  MOVLB  00
3120:  CALL   6CD
3121:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3122:  MOVLB  11
3123:  MOVF   45,W
3124:  MOVLB  13
3125:  MOVWF  49
3126:  MOVLW  01
3127:  MOVWF  4A
3128:  MOVWF  4C
3129:  CLRF   4B
312A:  MOVLP  08
312B:  MOVLB  00
312C:  CALL   0C3
312D:  MOVLP  30
312E:  MOVLB  11
312F:  MOVF   45,W
3130:  MOVLB  13
3131:  MOVWF  49
3132:  CLRF   4A
3133:  CLRF   4C
3134:  MOVLW  80
3135:  MOVWF  4B
3136:  MOVLP  08
3137:  MOVLB  00
3138:  CALL   0C3
3139:  MOVLP  30
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
313A:  MOVLB  11
313B:  MOVF   45,W
313C:  MOVLB  13
313D:  MOVWF  49
313E:  CLRF   4A
313F:  MOVLW  01
3140:  MOVWF  4C
3141:  CLRF   4B
3142:  MOVLP  08
3143:  MOVLB  00
3144:  CALL   0C3
3145:  MOVLP  30
3146:  MOVLB  11
3147:  MOVF   45,W
3148:  MOVLB  13
3149:  MOVWF  49
314A:  CLRF   4A
314B:  CLRF   4C
314C:  MOVLW  80
314D:  MOVWF  4B
314E:  MOVLP  08
314F:  MOVLB  00
3150:  CALL   0C3
3151:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
3152:  MOVLB  11
3153:  MOVF   46,W
3154:  MOVLB  13
3155:  MOVWF  46
3156:  MOVLB  11
3157:  MOVF   45,W
3158:  MOVLB  13
3159:  MOVWF  45
315A:  MOVLB  11
315B:  MOVF   44,W
315C:  MOVLB  13
315D:  MOVWF  44
315E:  MOVLB  11
315F:  MOVF   43,W
3160:  MOVLB  13
3161:  MOVWF  43
3162:  MOVLW  25
3163:  MOVWF  48
3164:  MOVLW  83
3165:  MOVWF  47
3166:  CLRF   4A
3167:  MOVLW  06
3168:  MOVWF  49
3169:  MOVLP  08
316A:  MOVLB  00
316B:  CALL   6CD
316C:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
316D:  MOVLW  02
316E:  MOVWF  77
316F:  DECFSZ 77,F
3170:  GOTO   16F
3171:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
3172:  MOVLB  11
3173:  MOVF   45,W
3174:  MOVLB  13
3175:  MOVWF  49
3176:  MOVLW  01
3177:  MOVWF  4A
3178:  MOVWF  4C
3179:  CLRF   4B
317A:  MOVLP  08
317B:  MOVLB  00
317C:  CALL   0C3
317D:  MOVLP  30
317E:  MOVLB  11
317F:  MOVF   45,W
3180:  MOVLB  13
3181:  MOVWF  49
3182:  CLRF   4A
3183:  CLRF   4C
3184:  MOVLW  80
3185:  MOVWF  4B
3186:  MOVLP  08
3187:  MOVLB  00
3188:  CALL   0C3
3189:  MOVLP  30
318A:  MOVLB  11
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
318B:  CLRF   59
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
318C:  MOVF   46,W
318D:  MOVLB  13
318E:  MOVWF  46
318F:  MOVLB  11
3190:  MOVF   45,W
3191:  MOVLB  13
3192:  MOVWF  45
3193:  MOVLB  11
3194:  MOVF   44,W
3195:  MOVLB  13
3196:  MOVWF  44
3197:  MOVLB  11
3198:  MOVF   43,W
3199:  MOVLB  13
319A:  MOVWF  43
319B:  MOVLP  10
319C:  MOVLB  00
319D:  CALL   000
319E:  MOVLP  30
319F:  MOVF   78,W
31A0:  ANDLW  01
31A1:  SUBLW  01
31A2:  BTFSS  03.2
31A3:  GOTO   1C3
....................       if(timeout_counter > 10)
31A4:  MOVLB  11
31A5:  MOVF   59,W
31A6:  SUBLW  0A
31A7:  BTFSC  03.0
31A8:  GOTO   1B2
....................          delay_ms(200);
31A9:  MOVLW  C8
31AA:  MOVLB  13
31AB:  MOVWF  43
31AC:  MOVLP  08
31AD:  MOVLB  00
31AE:  CALL   7C3
31AF:  MOVLP  30
31B0:  GOTO   1B9
31B1:  MOVLB  11
....................       else
....................          delay_ms(10);   
31B2:  MOVLW  0A
31B3:  MOVLB  13
31B4:  MOVWF  43
31B5:  MOVLP  08
31B6:  MOVLB  00
31B7:  CALL   7C3
31B8:  MOVLP  30
....................       
....................       if(timeout_counter > 100){
31B9:  MOVLB  11
31BA:  MOVF   59,W
31BB:  SUBLW  64
31BC:  BTFSC  03.0
31BD:  GOTO   1C1
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
31BE:  MOVLB  00
31BF:  GOTO   1C3
31C0:  MOVLB  11
....................       }  
....................       timeout_counter++;
31C1:  INCF   59,F
31C2:  GOTO   18C
31C3:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
31C4:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1050:  MOVLB  13
1051:  MOVF   28,F
1052:  BTFSS  03.2
1053:  GOTO   100
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1054:  MOVLW  06
1055:  MOVWF  33
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
1056:  MOVLW  02
1057:  MOVWF  34
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1058:  MOVF   2D,W
1059:  MOVWF  44
105A:  MOVF   2E,W
105B:  MOVWF  45
105C:  CLRF   46
105D:  CLRF   47
105E:  CLRF   78
105F:  CLRF   79
1060:  CLRF   7A
1061:  MOVF   44,W
1062:  MOVWF  35
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1063:  MOVF   2C,W
1064:  MOVWF  44
1065:  MOVF   2D,W
1066:  MOVWF  45
1067:  MOVF   2E,W
1068:  MOVWF  46
1069:  CLRF   47
106A:  CLRF   78
106B:  CLRF   79
106C:  CLRF   7A
106D:  MOVF   44,W
106E:  MOVWF  36
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
106F:  CLRF   78
1070:  CLRF   79
1071:  CLRF   7A
1072:  MOVF   2B,W
1073:  MOVWF  37
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1074:  MOVF   29,W
1075:  MOVWF  49
1076:  CLRF   4A
1077:  MOVLW  01
1078:  MOVWF  4C
1079:  CLRF   4B
107A:  MOVLP  08
107B:  MOVLB  00
107C:  CALL   0C3
107D:  MOVLP  10
107E:  MOVLB  13
107F:  MOVF   29,W
1080:  MOVWF  49
1081:  CLRF   4A
1082:  CLRF   4C
1083:  MOVLW  80
1084:  MOVWF  4B
1085:  MOVLP  08
1086:  MOVLB  00
1087:  CALL   0C3
1088:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1089:  MOVLB  13
108A:  MOVF   2A,W
108B:  MOVWF  46
108C:  MOVF   29,W
108D:  MOVWF  45
108E:  MOVF   28,W
108F:  MOVWF  44
1090:  MOVF   27,W
1091:  MOVWF  43
1092:  MOVLW  26
1093:  MOVWF  48
1094:  MOVLW  03
1095:  MOVWF  47
1096:  CLRF   4A
1097:  MOVLW  01
1098:  MOVWF  49
1099:  MOVLP  08
109A:  MOVLB  00
109B:  CALL   6CD
109C:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
109D:  MOVLB  13
109E:  MOVF   29,W
109F:  MOVWF  49
10A0:  MOVLW  01
10A1:  MOVWF  4A
10A2:  MOVWF  4C
10A3:  CLRF   4B
10A4:  MOVLP  08
10A5:  MOVLB  00
10A6:  CALL   0C3
10A7:  MOVLP  10
10A8:  MOVLB  13
10A9:  MOVF   29,W
10AA:  MOVWF  49
10AB:  CLRF   4A
10AC:  CLRF   4C
10AD:  MOVLW  80
10AE:  MOVWF  4B
10AF:  MOVLP  08
10B0:  MOVLB  00
10B1:  CALL   0C3
10B2:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
10B3:  MOVLB  13
10B4:  MOVF   29,W
10B5:  MOVWF  49
10B6:  CLRF   4A
10B7:  MOVLW  01
10B8:  MOVWF  4C
10B9:  CLRF   4B
10BA:  MOVLP  08
10BB:  MOVLB  00
10BC:  CALL   0C3
10BD:  MOVLP  10
10BE:  MOVLB  13
10BF:  MOVF   29,W
10C0:  MOVWF  49
10C1:  CLRF   4A
10C2:  CLRF   4C
10C3:  MOVLW  80
10C4:  MOVWF  4B
10C5:  MOVLP  08
10C6:  MOVLB  00
10C7:  CALL   0C3
10C8:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
10C9:  MOVLB  13
10CA:  MOVF   2A,W
10CB:  MOVWF  46
10CC:  MOVF   29,W
10CD:  MOVWF  45
10CE:  MOVF   28,W
10CF:  MOVWF  44
10D0:  MOVF   27,W
10D1:  MOVWF  43
10D2:  MOVLW  26
10D3:  MOVWF  48
10D4:  MOVLW  04
10D5:  MOVWF  47
10D6:  MOVWF  49
10D7:  MOVF   30,W
10D8:  MOVWF  4B
10D9:  MOVF   2F,W
10DA:  MOVWF  4A
10DB:  MOVF   32,W
10DC:  MOVWF  4D
10DD:  MOVF   31,W
10DE:  MOVWF  4C
10DF:  MOVLP  08
10E0:  MOVLB  00
10E1:  CALL   72B
10E2:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10E3:  MOVLW  02
10E4:  MOVWF  77
10E5:  DECFSZ 77,F
10E6:  GOTO   0E5
10E7:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10E8:  MOVLB  13
10E9:  MOVF   29,W
10EA:  MOVWF  49
10EB:  MOVLW  01
10EC:  MOVWF  4A
10ED:  MOVWF  4C
10EE:  CLRF   4B
10EF:  MOVLP  08
10F0:  MOVLB  00
10F1:  CALL   0C3
10F2:  MOVLP  10
10F3:  MOVLB  13
10F4:  MOVF   29,W
10F5:  MOVWF  49
10F6:  CLRF   4A
10F7:  CLRF   4C
10F8:  MOVLW  80
10F9:  MOVWF  4B
10FA:  MOVLP  08
10FB:  MOVLB  00
10FC:  CALL   0C3
10FD:  MOVLP  10
....................    }
10FE:  GOTO   1B7
10FF:  MOVLB  13
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1100:  DECFSZ 28,W
1101:  GOTO   1B8
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1102:  MOVLW  06
1103:  MOVWF  38
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
1104:  MOVLW  12
1105:  MOVWF  39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
1106:  MOVF   2E,W
1107:  MOVWF  44
1108:  CLRF   45
1109:  CLRF   46
110A:  CLRF   47
110B:  CLRF   78
110C:  CLRF   79
110D:  CLRF   7A
110E:  MOVF   44,W
110F:  MOVWF  3A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1110:  MOVF   2D,W
1111:  MOVWF  44
1112:  MOVF   2E,W
1113:  MOVWF  45
1114:  CLRF   46
1115:  CLRF   47
1116:  CLRF   78
1117:  CLRF   79
1118:  CLRF   7A
1119:  MOVF   44,W
111A:  MOVWF  3B
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
111B:  MOVF   2C,W
111C:  MOVWF  44
111D:  MOVF   2D,W
111E:  MOVWF  45
111F:  MOVF   2E,W
1120:  MOVWF  46
1121:  CLRF   47
1122:  CLRF   78
1123:  CLRF   79
1124:  CLRF   7A
1125:  MOVF   44,W
1126:  MOVWF  3C
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
1127:  CLRF   78
1128:  CLRF   79
1129:  CLRF   7A
112A:  MOVF   2B,W
112B:  MOVWF  3D
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
112C:  MOVF   29,W
112D:  MOVWF  49
112E:  CLRF   4A
112F:  MOVLW  01
1130:  MOVWF  4C
1131:  CLRF   4B
1132:  MOVLP  08
1133:  MOVLB  00
1134:  CALL   0C3
1135:  MOVLP  10
1136:  MOVLB  13
1137:  MOVF   29,W
1138:  MOVWF  49
1139:  CLRF   4A
113A:  CLRF   4C
113B:  MOVLW  80
113C:  MOVWF  4B
113D:  MOVLP  08
113E:  MOVLB  00
113F:  CALL   0C3
1140:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1141:  MOVLB  13
1142:  MOVF   2A,W
1143:  MOVWF  46
1144:  MOVF   29,W
1145:  MOVWF  45
1146:  MOVF   28,W
1147:  MOVWF  44
1148:  MOVF   27,W
1149:  MOVWF  43
114A:  MOVLW  26
114B:  MOVWF  48
114C:  MOVLW  08
114D:  MOVWF  47
114E:  CLRF   4A
114F:  MOVLW  01
1150:  MOVWF  49
1151:  MOVLP  08
1152:  MOVLB  00
1153:  CALL   6CD
1154:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1155:  MOVLB  13
1156:  MOVF   29,W
1157:  MOVWF  49
1158:  MOVLW  01
1159:  MOVWF  4A
115A:  MOVWF  4C
115B:  CLRF   4B
115C:  MOVLP  08
115D:  MOVLB  00
115E:  CALL   0C3
115F:  MOVLP  10
1160:  MOVLB  13
1161:  MOVF   29,W
1162:  MOVWF  49
1163:  CLRF   4A
1164:  CLRF   4C
1165:  MOVLW  80
1166:  MOVWF  4B
1167:  MOVLP  08
1168:  MOVLB  00
1169:  CALL   0C3
116A:  MOVLP  10
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
116B:  MOVLB  13
116C:  MOVF   29,W
116D:  MOVWF  49
116E:  CLRF   4A
116F:  MOVLW  01
1170:  MOVWF  4C
1171:  CLRF   4B
1172:  MOVLP  08
1173:  MOVLB  00
1174:  CALL   0C3
1175:  MOVLP  10
1176:  MOVLB  13
1177:  MOVF   29,W
1178:  MOVWF  49
1179:  CLRF   4A
117A:  CLRF   4C
117B:  MOVLW  80
117C:  MOVWF  4B
117D:  MOVLP  08
117E:  MOVLB  00
117F:  CALL   0C3
1180:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
1181:  MOVLB  13
1182:  MOVF   2A,W
1183:  MOVWF  46
1184:  MOVF   29,W
1185:  MOVWF  45
1186:  MOVF   28,W
1187:  MOVWF  44
1188:  MOVF   27,W
1189:  MOVWF  43
118A:  MOVLW  26
118B:  MOVWF  48
118C:  MOVLW  09
118D:  MOVWF  47
118E:  MOVLW  05
118F:  MOVWF  49
1190:  MOVF   30,W
1191:  MOVWF  4B
1192:  MOVF   2F,W
1193:  MOVWF  4A
1194:  MOVF   32,W
1195:  MOVWF  4D
1196:  MOVF   31,W
1197:  MOVWF  4C
1198:  MOVLP  08
1199:  MOVLB  00
119A:  CALL   72B
119B:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
119C:  MOVLW  02
119D:  MOVWF  77
119E:  DECFSZ 77,F
119F:  GOTO   19E
11A0:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
11A1:  MOVLB  13
11A2:  MOVF   29,W
11A3:  MOVWF  49
11A4:  MOVLW  01
11A5:  MOVWF  4A
11A6:  MOVWF  4C
11A7:  CLRF   4B
11A8:  MOVLP  08
11A9:  MOVLB  00
11AA:  CALL   0C3
11AB:  MOVLP  10
11AC:  MOVLB  13
11AD:  MOVF   29,W
11AE:  MOVWF  49
11AF:  CLRF   4A
11B0:  CLRF   4C
11B1:  MOVLW  80
11B2:  MOVWF  4B
11B3:  MOVLP  08
11B4:  MOVLB  00
11B5:  CALL   0C3
11B6:  MOVLP  10
11B7:  MOVLB  13
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
11B8:  CLRF   3E
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
11B9:  MOVF   2A,W
11BA:  MOVWF  46
11BB:  MOVF   29,W
11BC:  MOVWF  45
11BD:  MOVF   28,W
11BE:  MOVWF  44
11BF:  MOVF   27,W
11C0:  MOVWF  43
11C1:  MOVLB  00
11C2:  CALL   000
11C3:  MOVF   78,W
11C4:  ANDLW  01
11C5:  SUBLW  01
11C6:  BTFSS  03.2
11C7:  GOTO   1E5
....................       if(timeout_counter > 10)
11C8:  MOVLB  13
11C9:  MOVF   3E,W
11CA:  SUBLW  0A
11CB:  BTFSC  03.0
11CC:  GOTO   1D5
....................          delay_ms(200);
11CD:  MOVLW  C8
11CE:  MOVWF  43
11CF:  MOVLP  08
11D0:  MOVLB  00
11D1:  CALL   7C3
11D2:  MOVLP  10
11D3:  GOTO   1DB
11D4:  MOVLB  13
....................       else
....................          delay_ms(10);   
11D5:  MOVLW  0A
11D6:  MOVWF  43
11D7:  MOVLP  08
11D8:  MOVLB  00
11D9:  CALL   7C3
11DA:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
11DB:  MOVLB  13
11DC:  MOVF   3E,W
11DD:  SUBLW  64
11DE:  BTFSC  03.0
11DF:  GOTO   1E3
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
11E0:  MOVLB  00
11E1:  GOTO   1E5
11E2:  MOVLB  13
....................       }  
....................       timeout_counter++;
11E3:  INCF   3E,F
11E4:  GOTO   1B9
11E5:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
11E6:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
09CF:  MOVLW  9F
09D0:  MOVLB  11
09D1:  MOVWF  3C
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
09D2:  MOVF   36,W
09D3:  MOVLB  13
09D4:  MOVWF  49
09D5:  CLRF   4A
09D6:  MOVLW  01
09D7:  MOVWF  4C
09D8:  CLRF   4B
09D9:  MOVLB  00
09DA:  CALL   0C3
09DB:  MOVLB  11
09DC:  MOVF   36,W
09DD:  MOVLB  13
09DE:  MOVWF  49
09DF:  CLRF   4A
09E0:  CLRF   4C
09E1:  MOVLW  80
09E2:  MOVWF  4B
09E3:  MOVLB  00
09E4:  CALL   0C3
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
09E5:  MOVLB  11
09E6:  MOVF   37,W
09E7:  MOVLB  13
09E8:  MOVWF  4C
09E9:  MOVLB  11
09EA:  MOVF   36,W
09EB:  MOVLB  13
09EC:  MOVWF  4B
09ED:  MOVLB  11
09EE:  MOVF   35,W
09EF:  MOVLB  13
09F0:  MOVWF  4A
09F1:  MOVLB  11
09F2:  MOVF   34,W
09F3:  MOVLB  13
09F4:  MOVWF  49
09F5:  MOVLW  25
09F6:  MOVWF  4E
09F7:  MOVLW  6C
09F8:  MOVWF  4D
09F9:  CLRF   50
09FA:  MOVLW  01
09FB:  MOVWF  4F
09FC:  MOVLW  25
09FD:  MOVWF  52
09FE:  MOVLW  68
09FF:  MOVWF  51
0A00:  CLRF   56
0A01:  CLRF   55
0A02:  CLRF   54
0A03:  MOVLW  04
0A04:  MOVWF  53
0A05:  MOVLB  00
0A06:  CALL   0FF
....................    output_high(flash_stream.cs_pin);
0A07:  MOVLB  11
0A08:  MOVF   36,W
0A09:  MOVLB  13
0A0A:  MOVWF  49
0A0B:  MOVLW  01
0A0C:  MOVWF  4A
0A0D:  MOVWF  4C
0A0E:  CLRF   4B
0A0F:  MOVLB  00
0A10:  CALL   0C3
0A11:  MOVLB  11
0A12:  MOVF   36,W
0A13:  MOVLB  13
0A14:  MOVWF  49
0A15:  CLRF   4A
0A16:  CLRF   4C
0A17:  MOVLW  80
0A18:  MOVWF  4B
0A19:  MOVLB  00
0A1A:  CALL   0C3
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0A1B:  MOVLB  11
0A1C:  MOVF   38,W
0A1D:  SUBLW  20
0A1E:  BTFSS  03.2
0A1F:  GOTO   224
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0A20:  MOVLW  01
0A21:  MOVWF  78
0A22:  GOTO   226
....................    }
0A23:  GOTO   226
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0A24:  MOVLW  00
0A25:  MOVWF  78
....................    }
0A26:  MOVLB  00
0A27:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0C62:  MOVLW  92
0C63:  MOVLB  03
0C64:  MOVWF  11
0C65:  MOVLW  00
0C66:  MOVWF  12
0C67:  MOVLB  00
0C68:  CALL   000
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0C69:  MOVLB  01
0C6A:  BCF    0F.1
0C6B:  MOVLB  02
0C6C:  BSF    0F.1
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0C6D:  MOVLB  01
0C6E:  BCF    0F.2
0C6F:  MOVLB  02
0C70:  BSF    0F.2
....................     
....................     FLASH_DATA_HEADER flash_data_header;
....................     unsigned int8 readdata[PACKET_SIZE];
.................... 
....................     if (!is_connect(mis_fm)) {
0C71:  MOVLB  0D
0C72:  MOVF   45,W
0C73:  MOVLB  11
0C74:  MOVWF  37
0C75:  MOVLB  0D
0C76:  MOVF   44,W
0C77:  MOVLB  11
0C78:  MOVWF  36
0C79:  MOVLB  0D
0C7A:  MOVF   43,W
0C7B:  MOVLB  11
0C7C:  MOVWF  35
0C7D:  MOVLB  0D
0C7E:  MOVF   42,W
0C7F:  MOVLB  11
0C80:  MOVWF  34
0C81:  MOVLB  00
0C82:  CALL   1CF
0C83:  MOVF   78,F
0C84:  BTFSS  03.2
0C85:  GOTO   48F
....................         fprintf(PC, "\tFlash is not connected\r\n");
0C86:  MOVLW  A0
0C87:  MOVLB  03
0C88:  MOVWF  11
0C89:  MOVLW  00
0C8A:  MOVWF  12
0C8B:  MOVLB  00
0C8C:  CALL   000
....................         return;
0C8D:  GOTO   6A0
....................     }else {
0C8E:  GOTO   496
....................         fprintf(PC, "\tFlash is connected\r\n");
0C8F:  MOVLW  AD
0C90:  MOVLB  03
0C91:  MOVWF  11
0C92:  MOVLW  00
0C93:  MOVWF  12
0C94:  MOVLB  00
0C95:  CALL   000
....................     }
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
0C96:  MOVLB  0D
0C97:  MOVF   45,W
0C98:  MOVLB  13
0C99:  MOVWF  2A
0C9A:  MOVLB  0D
0C9B:  MOVF   44,W
0C9C:  MOVLB  13
0C9D:  MOVWF  29
0C9E:  MOVLB  0D
0C9F:  MOVF   43,W
0CA0:  MOVLB  13
0CA1:  MOVWF  28
0CA2:  MOVLB  0D
0CA3:  MOVF   42,W
0CA4:  MOVLB  13
0CA5:  MOVWF  27
0CA6:  CLRF   2E
0CA7:  CLRF   2D
0CA8:  CLRF   2C
0CA9:  CLRF   2B
0CAA:  MOVLW  25
0CAB:  MOVWF  30
0CAC:  MOVLW  24
0CAD:  MOVWF  2F
0CAE:  CLRF   34
0CAF:  CLRF   33
0CB0:  CLRF   32
0CB1:  MOVLW  40
0CB2:  MOVWF  31
0CB3:  MOVLB  00
0CB4:  CALL   228
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = readdata[0] | (readdata[1] << 8) | (readdata[2] << 16) | (readdata[3] << 24);
0CB5:  MOVLW  00
0CB6:  MOVLB  10
0CB7:  IORWF  44,W
0CB8:  MOVLB  11
0CB9:  MOVWF  35
0CBA:  MOVLW  00
0CBB:  IORWF  35,F
0CBC:  IORWF  35,W
0CBD:  MOVLB  0D
0CBE:  MOVWF  2A
0CBF:  CLRF   2B
0CC0:  CLRF   2C
0CC1:  CLRF   2D
....................     smf_piclog_loop_counter = readdata[4];
0CC2:  MOVLB  10
0CC3:  MOVF   48,W
0CC4:  MOVWF  71
....................     smf_meas_use_counter = readdata[5] | (readdata[6] << 8) | (readdata[7] << 16) | (readdata[8] << 24);
0CC5:  MOVLW  00
0CC6:  IORWF  49,W
0CC7:  MOVLB  11
0CC8:  MOVWF  35
0CC9:  MOVLW  00
0CCA:  IORWF  35,F
0CCB:  IORWF  35,W
0CCC:  MOVLB  0D
0CCD:  MOVWF  2E
0CCE:  CLRF   2F
0CCF:  CLRF   30
0CD0:  CLRF   31
....................     smf_meas_loop_counter = readdata[9];
0CD1:  MOVLB  10
0CD2:  MOVF   4D,W
0CD3:  MOVWF  72
....................     
....................     misf_piclog_use_counter = readdata[10] | (readdata[11] << 8) | (readdata[12] << 16) | (readdata[13] << 24);
0CD4:  MOVLW  00
0CD5:  IORWF  4E,W
0CD6:  MOVLB  11
0CD7:  MOVWF  35
0CD8:  MOVLW  00
0CD9:  IORWF  35,F
0CDA:  IORWF  35,W
0CDB:  MOVLB  0D
0CDC:  MOVWF  32
0CDD:  CLRF   33
0CDE:  CLRF   34
0CDF:  CLRF   35
....................     misf_piclog_loop_counter = readdata[14];
0CE0:  MOVLB  10
0CE1:  MOVF   52,W
0CE2:  MOVWF  73
....................     misf_piclog_uncopyed_counter = readdata[15] | (readdata[16] << 8) | (readdata[17] << 16) | (readdata[18] << 24);
0CE3:  MOVLW  00
0CE4:  IORWF  53,W
0CE5:  MOVLB  11
0CE6:  MOVWF  35
0CE7:  MOVLW  00
0CE8:  IORWF  35,F
0CE9:  IORWF  35,W
0CEA:  MOVLB  0D
0CEB:  MOVWF  36
0CEC:  CLRF   37
0CED:  CLRF   38
0CEE:  CLRF   39
....................     misf_meas_use_counter = readdata[19] | (readdata[20] << 8) | (readdata[21] << 16) | (readdata[22] << 24);
0CEF:  MOVLW  00
0CF0:  MOVLB  10
0CF1:  IORWF  57,W
0CF2:  MOVLB  11
0CF3:  MOVWF  35
0CF4:  MOVLW  00
0CF5:  IORWF  35,F
0CF6:  IORWF  35,W
0CF7:  MOVLB  0D
0CF8:  MOVWF  3A
0CF9:  CLRF   3B
0CFA:  CLRF   3C
0CFB:  CLRF   3D
....................     misf_meas_loop_counter = readdata[23];
0CFC:  MOVLB  10
0CFD:  MOVF   5B,W
0CFE:  MOVWF  75
....................     misf_meas_uncopyed_counter = readdata[24] | (readdata[25] << 8) | (readdata[26] << 16) | (readdata[27] << 24);  
0CFF:  MOVLW  00
0D00:  IORWF  5C,W
0D01:  MOVLB  11
0D02:  MOVWF  35
0D03:  MOVLW  00
0D04:  IORWF  35,F
0D05:  IORWF  35,W
0D06:  MOVLB  0D
0D07:  MOVWF  3E
0D08:  CLRF   3F
0D09:  CLRF   40
0D0A:  CLRF   41
....................     
....................     fprintf(PC, "\tSMF PICLOG Use Counter: %lu\r\n", smf_piclog_use_counter);
0D0B:  MOVLW  B8
0D0C:  MOVLB  03
0D0D:  MOVWF  11
0D0E:  MOVLW  00
0D0F:  MOVWF  12
0D10:  BCF    03.0
0D11:  MOVLW  19
0D12:  MOVLB  11
0D13:  MOVWF  51
0D14:  MOVLB  00
0D15:  CALL   2EF
0D16:  MOVLW  41
0D17:  MOVWF  04
0D18:  MOVLB  0D
0D19:  MOVF   2D,W
0D1A:  MOVLB  11
0D1B:  MOVWF  54
0D1C:  MOVLB  0D
0D1D:  MOVF   2C,W
0D1E:  MOVLB  11
0D1F:  MOVWF  53
0D20:  MOVLB  0D
0D21:  MOVF   2B,W
0D22:  MOVLB  11
0D23:  MOVWF  52
0D24:  MOVLB  0D
0D25:  MOVF   2A,W
0D26:  MOVLB  11
0D27:  MOVWF  51
0D28:  MOVLB  00
0D29:  CALL   39C
0D2A:  MOVLW  0D
0D2B:  MOVLB  13
0D2C:  MOVWF  2B
0D2D:  MOVLP  00
0D2E:  MOVLB  00
0D2F:  CALL   7CB
0D30:  MOVLP  08
0D31:  MOVLW  0A
0D32:  MOVLB  13
0D33:  MOVWF  2B
0D34:  MOVLP  00
0D35:  MOVLB  00
0D36:  CALL   7CB
0D37:  MOVLP  08
....................     fprintf(PC, "\tSMF PICLOG Loop Counter: %u\r\n", smf_piclog_loop_counter);
0D38:  MOVLW  C8
0D39:  MOVLB  03
0D3A:  MOVWF  11
0D3B:  MOVLW  00
0D3C:  MOVWF  12
0D3D:  BCF    03.0
0D3E:  MOVLW  1A
0D3F:  MOVLB  11
0D40:  MOVWF  51
0D41:  MOVLB  00
0D42:  CALL   2EF
0D43:  MOVF   71,W
0D44:  MOVLB  11
0D45:  MOVWF  3A
0D46:  MOVLW  1B
0D47:  MOVWF  3B
0D48:  MOVLB  00
0D49:  CALL   41A
0D4A:  MOVLW  0D
0D4B:  MOVLB  13
0D4C:  MOVWF  2B
0D4D:  MOVLP  00
0D4E:  MOVLB  00
0D4F:  CALL   7CB
0D50:  MOVLP  08
0D51:  MOVLW  0A
0D52:  MOVLB  13
0D53:  MOVWF  2B
0D54:  MOVLP  00
0D55:  MOVLB  00
0D56:  CALL   7CB
0D57:  MOVLP  08
....................     fprintf(PC, "\tSMF MEAS Use Counter: %lu\r\n", smf_meas_use_counter);
0D58:  MOVLW  D8
0D59:  MOVLB  03
0D5A:  MOVWF  11
0D5B:  MOVLW  00
0D5C:  MOVWF  12
0D5D:  BCF    03.0
0D5E:  MOVLW  17
0D5F:  MOVLB  11
0D60:  MOVWF  51
0D61:  MOVLB  00
0D62:  CALL   2EF
0D63:  MOVLW  41
0D64:  MOVWF  04
0D65:  MOVLB  0D
0D66:  MOVF   31,W
0D67:  MOVLB  11
0D68:  MOVWF  54
0D69:  MOVLB  0D
0D6A:  MOVF   30,W
0D6B:  MOVLB  11
0D6C:  MOVWF  53
0D6D:  MOVLB  0D
0D6E:  MOVF   2F,W
0D6F:  MOVLB  11
0D70:  MOVWF  52
0D71:  MOVLB  0D
0D72:  MOVF   2E,W
0D73:  MOVLB  11
0D74:  MOVWF  51
0D75:  MOVLB  00
0D76:  CALL   39C
0D77:  MOVLW  0D
0D78:  MOVLB  13
0D79:  MOVWF  2B
0D7A:  MOVLP  00
0D7B:  MOVLB  00
0D7C:  CALL   7CB
0D7D:  MOVLP  08
0D7E:  MOVLW  0A
0D7F:  MOVLB  13
0D80:  MOVWF  2B
0D81:  MOVLP  00
0D82:  MOVLB  00
0D83:  CALL   7CB
0D84:  MOVLP  08
....................     fprintf(PC, "\tSMF MEAS Loop Counter: %u\r\n", smf_meas_loop_counter);
0D85:  MOVLW  E7
0D86:  MOVLB  03
0D87:  MOVWF  11
0D88:  MOVLW  00
0D89:  MOVWF  12
0D8A:  BCF    03.0
0D8B:  MOVLW  18
0D8C:  MOVLB  11
0D8D:  MOVWF  51
0D8E:  MOVLB  00
0D8F:  CALL   2EF
0D90:  MOVF   72,W
0D91:  MOVLB  11
0D92:  MOVWF  3A
0D93:  MOVLW  1B
0D94:  MOVWF  3B
0D95:  MOVLB  00
0D96:  CALL   41A
0D97:  MOVLW  0D
0D98:  MOVLB  13
0D99:  MOVWF  2B
0D9A:  MOVLP  00
0D9B:  MOVLB  00
0D9C:  CALL   7CB
0D9D:  MOVLP  08
0D9E:  MOVLW  0A
0D9F:  MOVLB  13
0DA0:  MOVWF  2B
0DA1:  MOVLP  00
0DA2:  MOVLB  00
0DA3:  CALL   7CB
0DA4:  MOVLP  08
....................     fprintf(PC, "\tMISF PICLOG Use Counter: %lu\r\n", misf_piclog_use_counter);
0DA5:  MOVLW  F6
0DA6:  MOVLB  03
0DA7:  MOVWF  11
0DA8:  MOVLW  00
0DA9:  MOVWF  12
0DAA:  BCF    03.0
0DAB:  MOVLW  1A
0DAC:  MOVLB  11
0DAD:  MOVWF  51
0DAE:  MOVLB  00
0DAF:  CALL   2EF
0DB0:  MOVLW  41
0DB1:  MOVWF  04
0DB2:  MOVLB  0D
0DB3:  MOVF   35,W
0DB4:  MOVLB  11
0DB5:  MOVWF  54
0DB6:  MOVLB  0D
0DB7:  MOVF   34,W
0DB8:  MOVLB  11
0DB9:  MOVWF  53
0DBA:  MOVLB  0D
0DBB:  MOVF   33,W
0DBC:  MOVLB  11
0DBD:  MOVWF  52
0DBE:  MOVLB  0D
0DBF:  MOVF   32,W
0DC0:  MOVLB  11
0DC1:  MOVWF  51
0DC2:  MOVLB  00
0DC3:  CALL   39C
0DC4:  MOVLW  0D
0DC5:  MOVLB  13
0DC6:  MOVWF  2B
0DC7:  MOVLP  00
0DC8:  MOVLB  00
0DC9:  CALL   7CB
0DCA:  MOVLP  08
0DCB:  MOVLW  0A
0DCC:  MOVLB  13
0DCD:  MOVWF  2B
0DCE:  MOVLP  00
0DCF:  MOVLB  00
0DD0:  CALL   7CB
0DD1:  MOVLP  08
....................     fprintf(PC, "\tMISF PICLOG Loop Counter: %u\r\n", misf_piclog_loop_counter);
0DD2:  MOVLW  06
0DD3:  MOVLB  03
0DD4:  MOVWF  11
0DD5:  MOVLW  01
0DD6:  MOVWF  12
0DD7:  BCF    03.0
0DD8:  MOVLW  1B
0DD9:  MOVLB  11
0DDA:  MOVWF  51
0DDB:  MOVLB  00
0DDC:  CALL   2EF
0DDD:  MOVF   73,W
0DDE:  MOVLB  11
0DDF:  MOVWF  3A
0DE0:  MOVLW  1B
0DE1:  MOVWF  3B
0DE2:  MOVLB  00
0DE3:  CALL   41A
0DE4:  MOVLW  0D
0DE5:  MOVLB  13
0DE6:  MOVWF  2B
0DE7:  MOVLP  00
0DE8:  MOVLB  00
0DE9:  CALL   7CB
0DEA:  MOVLP  08
0DEB:  MOVLW  0A
0DEC:  MOVLB  13
0DED:  MOVWF  2B
0DEE:  MOVLP  00
0DEF:  MOVLB  00
0DF0:  CALL   7CB
0DF1:  MOVLP  08
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter: %lu\r\n", misf_piclog_uncopyed_counter);
0DF2:  MOVLW  16
0DF3:  MOVLB  03
0DF4:  MOVWF  11
0DF5:  MOVLW  01
0DF6:  MOVWF  12
0DF7:  BCF    03.0
0DF8:  MOVLW  1F
0DF9:  MOVLB  11
0DFA:  MOVWF  51
0DFB:  MOVLB  00
0DFC:  CALL   2EF
0DFD:  MOVLW  41
0DFE:  MOVWF  04
0DFF:  MOVLB  0D
0E00:  MOVF   39,W
0E01:  MOVLB  11
0E02:  MOVWF  54
0E03:  MOVLB  0D
0E04:  MOVF   38,W
0E05:  MOVLB  11
0E06:  MOVWF  53
0E07:  MOVLB  0D
0E08:  MOVF   37,W
0E09:  MOVLB  11
0E0A:  MOVWF  52
0E0B:  MOVLB  0D
0E0C:  MOVF   36,W
0E0D:  MOVLB  11
0E0E:  MOVWF  51
0E0F:  MOVLB  00
0E10:  CALL   39C
0E11:  MOVLW  0D
0E12:  MOVLB  13
0E13:  MOVWF  2B
0E14:  MOVLP  00
0E15:  MOVLB  00
0E16:  CALL   7CB
0E17:  MOVLP  08
0E18:  MOVLW  0A
0E19:  MOVLB  13
0E1A:  MOVWF  2B
0E1B:  MOVLP  00
0E1C:  MOVLB  00
0E1D:  CALL   7CB
0E1E:  MOVLP  08
....................     fprintf(PC, "\tMISF MEAS Use Counter: %lu\r\n", misf_meas_use_counter);
0E1F:  MOVLW  29
0E20:  MOVLB  03
0E21:  MOVWF  11
0E22:  MOVLW  01
0E23:  MOVWF  12
0E24:  BCF    03.0
0E25:  MOVLW  18
0E26:  MOVLB  11
0E27:  MOVWF  51
0E28:  MOVLB  00
0E29:  CALL   2EF
0E2A:  MOVLW  41
0E2B:  MOVWF  04
0E2C:  MOVLB  0D
0E2D:  MOVF   3D,W
0E2E:  MOVLB  11
0E2F:  MOVWF  54
0E30:  MOVLB  0D
0E31:  MOVF   3C,W
0E32:  MOVLB  11
0E33:  MOVWF  53
0E34:  MOVLB  0D
0E35:  MOVF   3B,W
0E36:  MOVLB  11
0E37:  MOVWF  52
0E38:  MOVLB  0D
0E39:  MOVF   3A,W
0E3A:  MOVLB  11
0E3B:  MOVWF  51
0E3C:  MOVLB  00
0E3D:  CALL   39C
0E3E:  MOVLW  0D
0E3F:  MOVLB  13
0E40:  MOVWF  2B
0E41:  MOVLP  00
0E42:  MOVLB  00
0E43:  CALL   7CB
0E44:  MOVLP  08
0E45:  MOVLW  0A
0E46:  MOVLB  13
0E47:  MOVWF  2B
0E48:  MOVLP  00
0E49:  MOVLB  00
0E4A:  CALL   7CB
0E4B:  MOVLP  08
....................     fprintf(PC, "\tMISF MEAS Loop Counter: %u\r\n", misf_meas_loop_counter);
0E4C:  MOVLW  38
0E4D:  MOVLB  03
0E4E:  MOVWF  11
0E4F:  MOVLW  01
0E50:  MOVWF  12
0E51:  BCF    03.0
0E52:  MOVLW  19
0E53:  MOVLB  11
0E54:  MOVWF  51
0E55:  MOVLB  00
0E56:  CALL   2EF
0E57:  MOVF   75,W
0E58:  MOVLB  11
0E59:  MOVWF  3A
0E5A:  MOVLW  1B
0E5B:  MOVWF  3B
0E5C:  MOVLB  00
0E5D:  CALL   41A
0E5E:  MOVLW  0D
0E5F:  MOVLB  13
0E60:  MOVWF  2B
0E61:  MOVLP  00
0E62:  MOVLB  00
0E63:  CALL   7CB
0E64:  MOVLP  08
0E65:  MOVLW  0A
0E66:  MOVLB  13
0E67:  MOVWF  2B
0E68:  MOVLP  00
0E69:  MOVLB  00
0E6A:  CALL   7CB
0E6B:  MOVLP  08
....................     fprintf(PC, "\tMISF MEAS Uncopyed Counter: %lu\r\n", misf_meas_uncopyed_counter);  
0E6C:  MOVLW  47
0E6D:  MOVLB  03
0E6E:  MOVWF  11
0E6F:  MOVLW  01
0E70:  MOVWF  12
0E71:  BCF    03.0
0E72:  MOVLW  1D
0E73:  MOVLB  11
0E74:  MOVWF  51
0E75:  MOVLB  00
0E76:  CALL   2EF
0E77:  MOVLW  41
0E78:  MOVWF  04
0E79:  MOVLB  0D
0E7A:  MOVF   41,W
0E7B:  MOVLB  11
0E7C:  MOVWF  54
0E7D:  MOVLB  0D
0E7E:  MOVF   40,W
0E7F:  MOVLB  11
0E80:  MOVWF  53
0E81:  MOVLB  0D
0E82:  MOVF   3F,W
0E83:  MOVLB  11
0E84:  MOVWF  52
0E85:  MOVLB  0D
0E86:  MOVF   3E,W
0E87:  MOVLB  11
0E88:  MOVWF  51
0E89:  MOVLB  00
0E8A:  CALL   39C
0E8B:  MOVLW  0D
0E8C:  MOVLB  13
0E8D:  MOVWF  2B
0E8E:  MOVLP  00
0E8F:  MOVLB  00
0E90:  CALL   7CB
0E91:  MOVLP  08
0E92:  MOVLW  0A
0E93:  MOVLB  13
0E94:  MOVWF  2B
0E95:  MOVLP  00
0E96:  MOVLB  00
0E97:  CALL   7CB
0E98:  MOVLP  08
....................     
....................     fprintf(PC, "Complete\r\n");
0E99:  MOVLW  59
0E9A:  MOVLB  03
0E9B:  MOVWF  11
0E9C:  MOVLW  01
0E9D:  MOVWF  12
0E9E:  MOVLB  00
0E9F:  CALL   000
0EA0:  MOVLP  30
0EA1:  GOTO   6A0 (RETURN)
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void update_misf_address_area()
.................... {
....................     fprintf(PC, "Update MISF Address Area\r\n");
....................     FLASH_DATA_HEADER flash_data_header;
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
....................     // Update the flash data header with the read data
....................     flash_data_header.smf_piclog_use_counter = readdata[0] | (readdata[1] << 8) | (readdata[2] << 16) | (readdata[3] << 24);
....................     flash_data_header.smf_piclog_loop_counter = readdata[4];
....................     flash_data_header.smf_meas_use_counter = readdata[5] | (readdata[6] << 8) | (readdata[7] << 16) | (readdata[8] << 24);
....................     flash_data_header.smf_meas_loop_counter = readdata[9];
....................     flash_data_header.misf_piclog_use_counter = readdata[10] | (readdata[11] << 8) | (readdata[12] << 16) | (readdata[13] << 24);
....................     flash_data_header.misf_piclog_loop_counter = readdata[14];
....................     flash_data_header.misf_piclog_uncopyed_counter = readdata[15] | (readdata[16] << 8) | (readdata[17] << 16) | (readdata[18] << 24);
....................     flash_data_header.misf_meas_use_counter = readdata[19] | (readdata[20] << 8) | (readdata[21] << 16) | (readdata[22] << 24);
....................     flash_data_header.misf_meas_loop_counter = readdata[23];
....................     flash_data_header.misf_meas_uncopyed_counter = readdata[24] | (readdata[25] << 8) | (readdata[26] << 16) | (readdata[27] << 24);
....................     // Write the updated flash data header back to the flash memory
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
11EF:  MOVF   7A,W
11F0:  MOVLB  11
11F1:  MOVWF  23
11F2:  MOVF   79,W
11F3:  MOVWF  22
11F4:  MOVF   78,W
11F5:  MOVWF  21
11F6:  MOVF   77,W
11F7:  MOVWF  20
.................... {
....................     int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
11F8:  CLRF   2C
11F9:  CLRF   2D
11FA:  CLRF   2E
11FB:  MOVF   23,W
11FC:  MOVLB  10
11FD:  MOVWF  67
....................     piclog[1] = (time >> 16) & 0xFF;
11FE:  MOVLB  11
11FF:  CLRF   2D
1200:  CLRF   2E
1201:  MOVF   22,W
1202:  MOVLB  10
1203:  MOVWF  68
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
1204:  MOVLB  11
1205:  CLRF   2E
1206:  MOVF   21,W
1207:  MOVLB  10
1208:  MOVWF  69
....................     piclog[3] = time & 0xFF;         // Time low byte
1209:  MOVLB  11
120A:  MOVF   20,W
120B:  MOVLB  10
120C:  MOVWF  6A
....................     piclog[4] = function;            // Function code
120D:  MOVF   65,W
120E:  MOVWF  6B
....................     piclog[5] = parameter;           // Parameter code
120F:  MOVF   66,W
1210:  MOVWF  6C
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
1211:  MOVLW  6D
1212:  MOVLB  03
1213:  MOVWF  11
1214:  MOVLW  01
1215:  MOVWF  12
1216:  MOVLP  08
1217:  MOVLB  00
1218:  CALL   000
1219:  MOVLP  10
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
121A:  MOVLB  10
121B:  CLRF   6D
121C:  MOVF   6D,W
121D:  SUBLW  05
121E:  BTFSS  03.0
121F:  GOTO   23B
....................             fprintf(PC, "%02X ", piclog[i]);
1220:  MOVLW  47
1221:  ADDWF  6D,W
1222:  MOVWF  04
1223:  MOVLW  25
1224:  MOVWF  05
1225:  BTFSC  03.0
1226:  INCF   05,F
1227:  MOVF   00,W
1228:  MOVLB  11
1229:  MOVWF  2A
122A:  MOVWF  51
122B:  MOVLW  37
122C:  MOVWF  52
122D:  MOVLP  08
122E:  MOVLB  00
122F:  CALL   6A2
1230:  MOVLP  10
1231:  MOVLW  20
1232:  MOVLB  13
1233:  MOVWF  2B
1234:  MOVLP  00
1235:  MOVLB  00
1236:  CALL   7CB
1237:  MOVLP  10
1238:  MOVLB  10
1239:  INCF   6D,F
123A:  GOTO   21C
....................         }
....................         fprintf(PC, "\r\n");
123B:  MOVLW  0D
123C:  MOVLB  13
123D:  MOVWF  2B
123E:  MOVLP  00
123F:  MOVLB  00
1240:  CALL   7CB
1241:  MOVLP  10
1242:  MOVLW  0A
1243:  MOVLB  13
1244:  MOVWF  2B
1245:  MOVLP  00
1246:  MOVLB  00
1247:  CALL   7CB
1248:  MOVLP  10
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1249:  MOVLB  0D
124A:  MOVF   32,W
124B:  MOVLB  11
124C:  MOVWF  24
124D:  MOVLW  02
124E:  MOVLB  0D
124F:  ADDWF  33,W
1250:  MOVLB  11
1251:  MOVWF  25
1252:  MOVLW  00
1253:  MOVLB  0D
1254:  ADDWFC 34,W
1255:  MOVLB  11
1256:  MOVWF  26
1257:  MOVLW  00
1258:  MOVLB  0D
1259:  ADDWFC 35,W
125A:  MOVLB  11
125B:  MOVWF  27
....................     if(is_connect(mis_fm) == FALSE) {
125C:  MOVLB  0D
125D:  MOVF   45,W
125E:  MOVLB  11
125F:  MOVWF  37
1260:  MOVLB  0D
1261:  MOVF   44,W
1262:  MOVLB  11
1263:  MOVWF  36
1264:  MOVLB  0D
1265:  MOVF   43,W
1266:  MOVLB  11
1267:  MOVWF  35
1268:  MOVLB  0D
1269:  MOVF   42,W
126A:  MOVLB  11
126B:  MOVWF  34
126C:  MOVLP  08
126D:  MOVLB  00
126E:  CALL   1CF
126F:  MOVLP  10
1270:  MOVF   78,F
1271:  BTFSS  03.2
1272:  GOTO   27D
....................         fprintf(PC, "Mission Flash is not connected\r\n");
1273:  MOVLW  73
1274:  MOVLB  03
1275:  MOVWF  11
1276:  MOVLW  01
1277:  MOVWF  12
1278:  MOVLP  08
1279:  MOVLB  00
127A:  CALL   000
127B:  MOVLP  10
....................         return;
127C:  GOTO   305
....................     }
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
127D:  MOVLB  0D
127E:  MOVF   45,W
127F:  MOVLB  13
1280:  MOVWF  2A
1281:  MOVLB  0D
1282:  MOVF   44,W
1283:  MOVLB  13
1284:  MOVWF  29
1285:  MOVLB  0D
1286:  MOVF   43,W
1287:  MOVLB  13
1288:  MOVWF  28
1289:  MOVLB  0D
128A:  MOVF   42,W
128B:  MOVLB  13
128C:  MOVWF  27
128D:  MOVLB  11
128E:  MOVF   27,W
128F:  MOVLB  13
1290:  MOVWF  2E
1291:  MOVLB  11
1292:  MOVF   26,W
1293:  MOVLB  13
1294:  MOVWF  2D
1295:  MOVLB  11
1296:  MOVF   25,W
1297:  MOVLB  13
1298:  MOVWF  2C
1299:  MOVLB  11
129A:  MOVF   24,W
129B:  MOVLB  13
129C:  MOVWF  2B
129D:  MOVLW  25
129E:  MOVWF  30
129F:  MOVLW  47
12A0:  MOVWF  2F
12A1:  CLRF   32
12A2:  MOVLW  06
12A3:  MOVWF  31
12A4:  MOVLB  00
12A5:  CALL   050
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
12A6:  MOVLW  06
12A7:  MOVLB  0D
12A8:  ADDWF  32,F
12A9:  MOVLW  00
12AA:  ADDWFC 33,F
12AB:  ADDWFC 34,F
12AC:  ADDWFC 35,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_use_counter + PICLOG_PACKET_SIZE >= MISF_PICLOG_MAX_COUNT) {
12AD:  MOVLW  06
12AE:  ADDWF  32,W
12AF:  MOVLB  11
12B0:  MOVWF  2A
12B1:  MOVLW  00
12B2:  MOVLB  0D
12B3:  ADDWFC 33,W
12B4:  MOVLB  11
12B5:  MOVWF  2B
12B6:  MOVLW  00
12B7:  MOVLB  0D
12B8:  ADDWFC 34,W
12B9:  MOVLB  11
12BA:  MOVWF  2C
12BB:  MOVLW  00
12BC:  MOVLB  0D
12BD:  ADDWFC 35,W
12BE:  MOVLB  11
12BF:  MOVWF  2D
12C0:  MOVF   2D,F
12C1:  BTFSS  03.2
12C2:  GOTO   2CD
12C3:  MOVF   2C,F
12C4:  BTFSS  03.2
12C5:  GOTO   2CD
12C6:  MOVF   2B,F
12C7:  BTFSS  03.2
12C8:  GOTO   2CD
12C9:  MOVF   2A,W
12CA:  SUBLW  3B
12CB:  BTFSC  03.0
12CC:  GOTO   305
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
12CD:  MOVLW  24
12CE:  MOVWF  7A
12CF:  MOVLW  16
12D0:  MOVWF  04
12D1:  MOVF   7A,W
12D2:  MOVWF  05
12D3:  MOVF   00,W
12D4:  MOVWF  2A
12D5:  MOVLB  0D
12D6:  MOVF   45,W
12D7:  MOVLB  13
12D8:  MOVWF  2A
12D9:  MOVLB  0D
12DA:  MOVF   44,W
12DB:  MOVLB  13
12DC:  MOVWF  29
12DD:  MOVLB  0D
12DE:  MOVF   43,W
12DF:  MOVLB  13
12E0:  MOVWF  28
12E1:  MOVLB  0D
12E2:  MOVF   42,W
12E3:  MOVLB  13
12E4:  MOVWF  27
12E5:  MOVLB  11
12E6:  MOVF   27,W
12E7:  MOVLB  13
12E8:  MOVWF  2E
12E9:  MOVLB  11
12EA:  MOVF   26,W
12EB:  MOVLB  13
12EC:  MOVWF  2D
12ED:  MOVLB  11
12EE:  MOVF   25,W
12EF:  MOVLB  13
12F0:  MOVWF  2C
12F1:  MOVLB  11
12F2:  MOVF   24,W
12F3:  MOVLB  13
12F4:  MOVWF  2B
12F5:  CLRF   30
12F6:  MOVLB  11
12F7:  MOVF   2A,W
12F8:  MOVLB  13
12F9:  MOVWF  2F
12FA:  CLRF   32
12FB:  MOVLW  06
12FC:  MOVWF  31
12FD:  MOVLB  00
12FE:  CALL   050
....................         misf_piclog_use_counter = 0; // Reset if max count reached
12FF:  MOVLB  0D
1300:  CLRF   35
1301:  CLRF   34
1302:  CLRF   33
1303:  CLRF   32
1304:  MOVLB  11
1305:  MOVLB  00
....................     }
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
1306:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0852:  MOVLW  84
0853:  MOVLB  03
0854:  MOVWF  11
0855:  MOVLW  01
0856:  MOVWF  12
0857:  MOVLB  00
0858:  CALL   000
....................     output_low(CONNECT_CIGS);
0859:  MOVLB  01
085A:  BCF    0E.0
085B:  MOVLB  02
085C:  BCF    0E.0
....................     output_low(EN_NPWR);
085D:  MOVLB  01
085E:  BCF    0E.3
085F:  MOVLB  02
0860:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
0861:  MOVLW  8C
0862:  MOVLB  03
0863:  MOVWF  11
0864:  MOVLW  01
0865:  MOVWF  12
0866:  MOVLB  00
0867:  CALL   000
0868:  MOVLP  30
0869:  GOTO   691 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
086A:  MOVLW  92
086B:  MOVLB  03
086C:  MOVWF  11
086D:  MOVLW  01
086E:  MOVWF  12
086F:  MOVLB  00
0870:  CALL   000
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
0871:  MOVLW  78
0872:  MOVLB  01
0873:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
0874:  BCF    1E.0
0875:  BCF    1E.1
0876:  BCF    1E.2
0877:  MOVLW  00
0878:  MOVLB  03
0879:  MOVWF  0C
087A:  MOVWF  10
087B:  MOVWF  0D
087C:  MOVLW  EB
087D:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
087E:  MOVLB  01
087F:  BCF    1E.4
0880:  BSF    1E.5
0881:  BSF    1E.6
0882:  BCF    1E.7
0883:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_FVR);                                        //DAC output at pin DAC output1 from 0-VDD volts  
0884:  MOVLW  98
0885:  MOVLB  02
0886:  MOVWF  18
....................    dac_write(50);                                                               
0887:  MOVLW  32
0888:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
0889:  MOVLW  9B
088A:  MOVLB  03
088B:  MOVWF  11
088C:  MOVLW  01
088D:  MOVWF  12
088E:  MOVLB  00
088F:  CALL   000
0890:  MOVLP  30
0891:  GOTO   694 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
.................... 
....................     set_adc_channel(TEMP_TOP);
....................     delay_us(10); 
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     set_adc_channel(TEMP_BOT);
....................     delay_us(10); 
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
....................    unsigned int32 current;
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_us(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
....................         
....................         set_adc_channel(CIGS_CURR);
....................         current = 0; // reset current value
....................         for(int k=0; k<10; k++)
....................         {
....................                                             //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + read_adc(ADC_START_AND_READ);
....................         }    
....................         
....................         current = current / 10; // average the current value
.................... 
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2+1] = current; // store the current value in the buffer
....................         //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
....................     // read PD value
....................     set_adc_channel(PD);
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     convert_cigs_data(measurement_step);
....................     //convert_header_data();    
....................     output_low(CONNECT_CIGS);
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
25BF:  MOVLW  B8
25C0:  MOVLB  03
25C1:  MOVWF  11
25C2:  MOVLW  01
25C3:  MOVWF  12
25C4:  MOVLP  08
25C5:  MOVLB  00
25C6:  CALL   000
25C7:  MOVLP  20
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
25C8:  MOVLB  0F
25C9:  CLRF   67
25CA:  MOVF   66,W
25CB:  SUBWF  67,W
25CC:  BTFSC  03.0
25CD:  GOTO   70E
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
25CE:  MOVF   67,W
25CF:  MOVLB  11
25D0:  MOVWF  2D
25D1:  MOVLW  03
25D2:  MOVWF  2E
25D3:  MOVLP  18
25D4:  MOVLB  00
25D5:  CALL   7CF
25D6:  MOVLP  20
25D7:  MOVLW  92
25D8:  ADDWF  78,W
25D9:  MOVWF  78
25DA:  MOVLW  22
25DB:  MOVWF  7A
25DC:  BTFSC  03.0
25DD:  INCF   7A,F
25DE:  MOVF   78,W
25DF:  MOVLB  0F
25E0:  MOVWF  6A
25E1:  MOVF   7A,W
25E2:  MOVWF  6B
25E3:  BCF    03.0
25E4:  RLF    67,W
25E5:  CLRF   7A
25E6:  MOVWF  79
25E7:  BCF    03.0
25E8:  RLF    79,F
25E9:  RLF    7A,F
25EA:  MOVF   79,W
25EB:  ADDLW  3A
25EC:  MOVWF  04
25ED:  MOVLW  20
25EE:  ADDWFC 7A,W
25EF:  MOVWF  05
25F0:  MOVF   00,W
25F1:  MOVWF  6C
25F2:  ADDFSR 01,FSR0
25F3:  MOVF   00,W
25F4:  MOVWF  6D
25F5:  ADDFSR 3F,FSR0
25F6:  RRF    6D,F
25F7:  RRF    6C,F
25F8:  RRF    6D,F
25F9:  RRF    6C,F
25FA:  RRF    6D,F
25FB:  RRF    6C,F
25FC:  RRF    6D,F
25FD:  RRF    6C,F
25FE:  MOVLW  0F
25FF:  ANDWF  6D,F
2600:  MOVF   6C,W
2601:  MOVWF  77
2602:  CLRF   7A
2603:  MOVF   7A,W
2604:  MOVWF  6D
2605:  MOVF   6B,W
2606:  MOVWF  05
2607:  MOVF   6A,W
2608:  MOVWF  04
2609:  MOVF   6C,W
260A:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
260B:  MOVF   67,W
260C:  MOVLB  11
260D:  MOVWF  2D
260E:  MOVLW  03
260F:  MOVWF  2E
2610:  MOVLP  18
2611:  MOVLB  00
2612:  CALL   7CF
2613:  MOVLP  20
2614:  MOVLW  92
2615:  ADDWF  78,W
2616:  MOVWF  04
2617:  MOVLW  22
2618:  MOVWF  05
2619:  BTFSC  03.0
261A:  INCF   05,F
261B:  MOVF   00,W
261C:  MOVLB  0F
261D:  MOVWF  6A
261E:  MOVLB  11
261F:  MOVWF  51
2620:  MOVLW  37
2621:  MOVWF  52
2622:  MOVLP  08
2623:  MOVLB  00
2624:  CALL   6A2
2625:  MOVLP  20
2626:  MOVLW  20
2627:  MOVLB  13
2628:  MOVWF  2B
2629:  MOVLP  00
262A:  MOVLB  00
262B:  CALL   7CB
262C:  MOVLP  20
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
262D:  MOVLB  0F
262E:  MOVF   67,W
262F:  MOVLB  11
2630:  MOVWF  2D
2631:  MOVLW  03
2632:  MOVWF  2E
2633:  MOVLP  18
2634:  MOVLB  00
2635:  CALL   7CF
2636:  MOVLP  20
2637:  MOVLW  01
2638:  ADDWF  78,W
2639:  ADDLW  92
263A:  MOVWF  78
263B:  MOVLW  22
263C:  MOVWF  7A
263D:  BTFSC  03.0
263E:  INCF   7A,F
263F:  MOVF   78,W
2640:  MOVLB  0F
2641:  MOVWF  6A
2642:  MOVF   7A,W
2643:  MOVWF  6B
2644:  BCF    03.0
2645:  RLF    67,W
2646:  CLRF   7A
2647:  MOVWF  79
2648:  BCF    03.0
2649:  RLF    79,F
264A:  RLF    7A,F
264B:  MOVF   79,W
264C:  ADDLW  3A
264D:  MOVWF  04
264E:  MOVLW  20
264F:  ADDWFC 7A,W
2650:  MOVWF  05
2651:  MOVF   00,W
2652:  MOVWF  6C
2653:  ADDFSR 01,FSR0
2654:  MOVF   00,W
2655:  MOVWF  6D
2656:  ADDFSR 3F,FSR0
2657:  MOVLW  0F
2658:  ANDWF  6C,F
2659:  CLRF   6D
265A:  RLF    6C,F
265B:  RLF    6D,F
265C:  RLF    6C,F
265D:  RLF    6D,F
265E:  RLF    6C,F
265F:  RLF    6D,F
2660:  RLF    6C,F
2661:  RLF    6D,F
2662:  MOVLW  F0
2663:  ANDWF  6C,F
2664:  BCF    03.0
2665:  RLF    67,W
2666:  ADDLW  01
2667:  CLRF   7A
2668:  MOVWF  79
2669:  BCF    03.0
266A:  RLF    79,F
266B:  RLF    7A,F
266C:  MOVF   79,W
266D:  ADDLW  3A
266E:  MOVWF  04
266F:  MOVLW  20
2670:  ADDWFC 7A,W
2671:  MOVWF  05
2672:  MOVF   00,W
2673:  MOVWF  6E
2674:  ADDFSR 01,FSR0
2675:  MOVF   00,W
2676:  MOVWF  6F
2677:  ADDFSR 3F,FSR0
2678:  MOVF   6F,W
2679:  MOVWF  6E
267A:  CLRF   6F
267B:  MOVF   6E,W
267C:  ANDLW  0F
267D:  MOVWF  77
267E:  CLRF   7A
267F:  MOVF   77,W
2680:  IORWF  6C,W
2681:  MOVWF  77
2682:  MOVF   7A,W
2683:  IORWF  6D,W
2684:  MOVWF  7A
2685:  MOVF   77,W
2686:  MOVWF  6C
2687:  MOVF   7A,W
2688:  MOVWF  6D
2689:  MOVF   6B,W
268A:  MOVWF  05
268B:  MOVF   6A,W
268C:  MOVWF  04
268D:  MOVF   6C,W
268E:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
268F:  MOVF   67,W
2690:  MOVLB  11
2691:  MOVWF  2D
2692:  MOVLW  03
2693:  MOVWF  2E
2694:  MOVLP  18
2695:  MOVLB  00
2696:  CALL   7CF
2697:  MOVLP  20
2698:  MOVLW  01
2699:  ADDWF  78,W
269A:  ADDLW  92
269B:  MOVWF  04
269C:  MOVLW  22
269D:  MOVWF  05
269E:  BTFSC  03.0
269F:  INCF   05,F
26A0:  MOVF   00,W
26A1:  MOVLB  0F
26A2:  MOVWF  6A
26A3:  MOVLB  11
26A4:  MOVWF  51
26A5:  MOVLW  37
26A6:  MOVWF  52
26A7:  MOVLP  08
26A8:  MOVLB  00
26A9:  CALL   6A2
26AA:  MOVLP  20
26AB:  MOVLW  20
26AC:  MOVLB  13
26AD:  MOVWF  2B
26AE:  MOVLP  00
26AF:  MOVLB  00
26B0:  CALL   7CB
26B1:  MOVLP  20
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
26B2:  MOVLB  0F
26B3:  MOVF   67,W
26B4:  MOVLB  11
26B5:  MOVWF  2D
26B6:  MOVLW  03
26B7:  MOVWF  2E
26B8:  MOVLP  18
26B9:  MOVLB  00
26BA:  CALL   7CF
26BB:  MOVLP  20
26BC:  MOVLW  02
26BD:  ADDWF  78,W
26BE:  ADDLW  92
26BF:  MOVWF  78
26C0:  MOVLW  22
26C1:  MOVWF  7A
26C2:  BTFSC  03.0
26C3:  INCF   7A,F
26C4:  MOVF   78,W
26C5:  MOVLB  0F
26C6:  MOVWF  6A
26C7:  MOVF   7A,W
26C8:  MOVWF  6B
26C9:  BCF    03.0
26CA:  RLF    67,W
26CB:  ADDLW  01
26CC:  CLRF   7A
26CD:  MOVWF  79
26CE:  BCF    03.0
26CF:  RLF    79,F
26D0:  RLF    7A,F
26D1:  MOVF   79,W
26D2:  ADDLW  3A
26D3:  MOVWF  04
26D4:  MOVLW  20
26D5:  ADDWFC 7A,W
26D6:  MOVWF  05
26D7:  MOVF   00,W
26D8:  MOVWF  6C
26D9:  ADDFSR 01,FSR0
26DA:  MOVF   00,W
26DB:  MOVWF  6D
26DC:  ADDFSR 3F,FSR0
26DD:  MOVF   6C,W
26DE:  MOVWF  77
26DF:  CLRF   7A
26E0:  MOVF   7A,W
26E1:  MOVWF  6D
26E2:  MOVF   6B,W
26E3:  MOVWF  05
26E4:  MOVF   6A,W
26E5:  MOVWF  04
26E6:  MOVF   6C,W
26E7:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
26E8:  MOVF   67,W
26E9:  MOVLB  11
26EA:  MOVWF  2D
26EB:  MOVLW  03
26EC:  MOVWF  2E
26ED:  MOVLP  18
26EE:  MOVLB  00
26EF:  CALL   7CF
26F0:  MOVLP  20
26F1:  MOVLW  02
26F2:  ADDWF  78,W
26F3:  ADDLW  92
26F4:  MOVWF  04
26F5:  MOVLW  22
26F6:  MOVWF  05
26F7:  BTFSC  03.0
26F8:  INCF   05,F
26F9:  MOVF   00,W
26FA:  MOVLB  0F
26FB:  MOVWF  6A
26FC:  MOVLB  11
26FD:  MOVWF  51
26FE:  MOVLW  37
26FF:  MOVWF  52
2700:  MOVLP  08
2701:  MOVLB  00
2702:  CALL   6A2
2703:  MOVLP  20
2704:  MOVLW  20
2705:  MOVLB  13
2706:  MOVWF  2B
2707:  MOVLP  00
2708:  MOVLB  00
2709:  CALL   7CB
270A:  MOVLP  20
270B:  MOVLB  0F
270C:  INCF   67,F
270D:  GOTO   5CA
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
270E:  MOVLW  0D
270F:  MOVLB  13
2710:  MOVWF  2B
2711:  MOVLP  00
2712:  MOVLB  00
2713:  CALL   7CB
2714:  MOVLP  20
2715:  MOVLW  0A
2716:  MOVLB  13
2717:  MOVWF  2B
2718:  MOVLP  00
2719:  MOVLB  00
271A:  CALL   7CB
271B:  MOVLP  20
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
28F6:  MOVLB  0F
28F7:  MOVF   3B,W
28F8:  SUBWF  3A,W
28F9:  BTFSS  03.2
28FA:  GOTO   10A
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
28FB:  MOVLW  D0
28FC:  MOVLB  03
28FD:  MOVWF  11
28FE:  MOVLW  01
28FF:  MOVWF  12
2900:  MOVLP  08
2901:  MOVLB  00
2902:  CALL   000
2903:  MOVLP  28
....................       return 0x00;
2904:  MOVLW  00
2905:  MOVWF  78
2906:  MOVWF  79
2907:  GOTO   124
....................    }
2908:  GOTO   124
2909:  MOVLB  0F
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
290A:  MOVF   3A,W
290B:  MOVLB  11
290C:  MOVWF  2C
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
290D:  MOVLW  01
290E:  MOVLB  0F
290F:  ADDWF  3A,W
2910:  ANDLW  0F
2911:  MOVWF  3A
....................       return &smf_queue.smf_data[current_head];
2912:  MOVLB  11
2913:  MOVF   2C,W
2914:  MOVWF  2D
2915:  MOVLW  09
2916:  MOVWF  2E
2917:  MOVLP  18
2918:  MOVLB  00
2919:  CALL   7CF
291A:  MOVLP  28
291B:  MOVF   78,W
291C:  ADDLW  3A
291D:  MOVWF  78
291E:  MOVLW  24
291F:  MOVWF  7A
2920:  BTFSC  03.0
2921:  INCF   7A,F
2922:  MOVF   7A,W
2923:  MOVWF  79
....................    }
2924:  MOVLP  30
2925:  GOTO   3F6 (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
17ED:  MOVLB  0F
17EE:  MOVF   3B,W
17EF:  SUBWF  3A,W
17F0:  BTFSC  03.2
17F1:  GOTO   7F4
17F2:  MOVLW  00
17F3:  GOTO   7F5
17F4:  MOVLW  01
17F5:  MOVWF  78
17F6:  MOVLB  00
17F7:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
2926:  MOVLB  11
2927:  CLRF   53
2928:  CLRF   54
2929:  CLRF   55
292A:  CLRF   56
292B:  CLRF   57
292C:  CLRF   58
292D:  CLRF   59
292E:  CLRF   5A
292F:  CLRF   5B
....................    
....................    if (mis_type == APRS_DATA)
2930:  MOVF   52,F
2931:  BTFSS  03.2
2932:  GOTO   144
....................    {
....................       mis_struct.start_address   = 0x02400000;
2933:  MOVLW  02
2934:  MOVWF  56
2935:  MOVLW  40
2936:  MOVWF  55
2937:  CLRF   54
2938:  CLRF   53
....................       mis_struct.end_address     = 0x02500FFF;
2939:  MOVLW  02
293A:  MOVWF  5A
293B:  MOVLW  50
293C:  MOVWF  59
293D:  MOVLW  0F
293E:  MOVWF  58
293F:  MOVLW  FF
2940:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000000;
2941:  MOVLW  80
2942:  MOVWF  5B
....................    }
2943:  GOTO   18E
....................    else if (mis_type == IN_VEHICLE)
2944:  DECFSZ 52,W
2945:  GOTO   158
....................    {
....................       mis_struct.start_address   = 0x02501000;
2946:  MOVLW  02
2947:  MOVWF  56
2948:  MOVLW  50
2949:  MOVWF  55
294A:  MOVLW  10
294B:  MOVWF  54
294C:  CLRF   53
....................       mis_struct.end_address     = 0x02501FFF;
294D:  MOVLW  02
294E:  MOVWF  5A
294F:  MOVLW  50
2950:  MOVWF  59
2951:  MOVLW  1F
2952:  MOVWF  58
2953:  MOVLW  FF
2954:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000001;  
2955:  MOVLW  81
2956:  MOVWF  5B
....................    }
2957:  GOTO   18E
....................    else if (mis_type == ECOSYSTEM_DATA)
2958:  MOVF   52,W
2959:  SUBLW  02
295A:  BTFSS  03.2
295B:  GOTO   16E
....................    {
....................       mis_struct.start_address   = 0x02506000;
295C:  MOVLW  02
295D:  MOVWF  56
295E:  MOVLW  50
295F:  MOVWF  55
2960:  MOVLW  60
2961:  MOVWF  54
2962:  CLRF   53
....................       mis_struct.end_address     = 0x02516FFF;
2963:  MOVLW  02
2964:  MOVWF  5A
2965:  MOVLW  51
2966:  MOVWF  59
2967:  MOVLW  6F
2968:  MOVWF  58
2969:  MOVLW  FF
296A:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000011;  
296B:  MOVLW  83
296C:  MOVWF  5B
....................    }
296D:  GOTO   18E
....................    else if (mis_type == APRS_PIC_LOG)
296E:  MOVF   52,W
296F:  SUBLW  03
2970:  BTFSS  03.2
2971:  GOTO   184
....................    {
....................       mis_struct.start_address   = 0x02517000;
2972:  MOVLW  02
2973:  MOVWF  56
2974:  MOVLW  51
2975:  MOVWF  55
2976:  MOVLW  70
2977:  MOVWF  54
2978:  CLRF   53
....................       mis_struct.end_address     = 0x02517FFF;
2979:  MOVLW  02
297A:  MOVWF  5A
297B:  MOVLW  51
297C:  MOVWF  59
297D:  MOVLW  7F
297E:  MOVWF  58
297F:  MOVLW  FF
2980:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000100;  
2981:  MOVLW  84
2982:  MOVWF  5B
....................    }
2983:  GOTO   18E
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
2984:  MOVLW  FF
2985:  MOVWF  56
2986:  MOVWF  55
2987:  MOVWF  54
2988:  MOVWF  53
....................       mis_struct.end_address     = 0xFFFFFFFF;
2989:  MOVWF  5A
298A:  MOVWF  59
298B:  MOVWF  58
298C:  MOVWF  57
....................       mis_struct.mission_flag    = 0b11111111; 
298D:  MOVWF  5B
....................    }
....................    
....................    return mis_struct;
298E:  MOVLW  D3
298F:  MOVWF  78
2990:  MOVLW  08
2991:  MOVWF  79
2992:  MOVLP  28
2993:  MOVLB  00
2994:  GOTO   294 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
1307:  MOVLB  0F
1308:  CLRF   5D
1309:  CLRF   5E
130A:  CLRF   5F
130B:  CLRF   60
130C:  CLRF   61
130D:  CLRF   62
130E:  CLRF   63
130F:  CLRF   64
1310:  CLRF   65
1311:  CLRF   66
1312:  CLRF   67
1313:  CLRF   68
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
1314:  MOVLW  DD
1315:  MOVLB  03
1316:  MOVWF  11
1317:  MOVLW  01
1318:  MOVWF  12
1319:  MOVLP  08
131A:  MOVLB  00
131B:  CALL   000
131C:  MOVLP  10
....................    fprintf(PC, "\t[BOSS] >>> ");
131D:  MOVLW  ED
131E:  MOVLB  03
131F:  MOVWF  11
1320:  MOVLW  01
1321:  MOVWF  12
1322:  MOVLP  08
1323:  MOVLB  00
1324:  CALL   000
1325:  MOVLP  10
....................    for (int8 i = 0; i < receive_signal_size; i++)
1326:  MOVLB  0F
1327:  CLRF   69
1328:  MOVF   5C,W
1329:  SUBWF  69,W
132A:  BTFSC  03.0
132B:  GOTO   347
....................       fprintf(PC, "%X ", receive_signal[i]);
132C:  MOVF   69,W
132D:  ADDWF  5A,W
132E:  MOVWF  04
132F:  MOVLW  00
1330:  ADDWFC 5B,W
1331:  MOVWF  05
1332:  MOVF   00,W
1333:  MOVLB  10
1334:  MOVWF  22
1335:  MOVLB  11
1336:  MOVWF  51
1337:  MOVLW  37
1338:  MOVWF  52
1339:  MOVLP  08
133A:  MOVLB  00
133B:  CALL   6A2
133C:  MOVLP  10
133D:  MOVLW  20
133E:  MOVLB  13
133F:  MOVWF  2B
1340:  MOVLP  00
1341:  MOVLB  00
1342:  CALL   7CB
1343:  MOVLP  10
1344:  MOVLB  0F
1345:  INCF   69,F
1346:  GOTO   328
....................    fprintf(PC, "\r\n");
1347:  MOVLW  0D
1348:  MOVLB  13
1349:  MOVWF  2B
134A:  MOVLP  00
134B:  MOVLB  00
134C:  CALL   7CB
134D:  MOVLP  10
134E:  MOVLW  0A
134F:  MOVLB  13
1350:  MOVWF  2B
1351:  MOVLP  00
1352:  MOVLB  00
1353:  CALL   7CB
1354:  MOVLP  10
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
1355:  MOVLB  0F
1356:  MOVF   5B,W
1357:  MOVLB  10
1358:  MOVWF  23
1359:  MOVLB  0F
135A:  MOVF   5A,W
135B:  MOVLB  10
135C:  MOVWF  22
135D:  MOVLB  0F
135E:  MOVF   5C,W
135F:  MOVLB  10
1360:  MOVWF  24
*
139C:  MOVF   78,W
139D:  MOVLB  0F
139E:  MOVWF  6A
....................    if (frame_start_position == -1)
139F:  MOVF   6A,W
13A0:  SUBLW  FF
13A1:  BTFSS  03.2
13A2:  GOTO   3A8
....................       return command;
13A3:  MOVLW  DD
13A4:  MOVWF  78
13A5:  MOVLW  07
13A6:  MOVWF  79
13A7:  GOTO   546
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
13A8:  MOVF   6A,W
13A9:  ADDWF  5A,W
13AA:  MOVWF  6B
13AB:  MOVLW  00
13AC:  ADDWFC 5B,W
13AD:  MOVWF  6C
13AE:  MOVF   6B,W
13AF:  MOVWF  04
13B0:  MOVF   6C,W
13B1:  MOVWF  05
13B2:  ADDFSR 00,FSR0
13B3:  MOVF   00,W
13B4:  ANDLW  0F
13B5:  MOVWF  6D
13B6:  MOVF   6D,W
13B7:  MOVLB  10
13B8:  MOVWF  22
*
1400:  MOVF   78,W
1401:  MOVLB  0F
1402:  MOVWF  6E
....................    if (content_size == -1)
1403:  MOVF   6E,W
1404:  SUBLW  FF
1405:  BTFSS  03.2
1406:  GOTO   40C
....................       return command;
1407:  MOVLW  DD
1408:  MOVWF  78
1409:  MOVLW  07
140A:  MOVWF  79
140B:  GOTO   546
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
140C:  MOVF   6A,W
140D:  SUBWF  5C,W
140E:  MOVWF  6F
....................    
....................    if (!check_crc(frame, receive_frame_size))
140F:  MOVF   6C,W
1410:  MOVLB  10
1411:  MOVWF  23
1412:  MOVLB  0F
1413:  MOVF   6B,W
1414:  MOVLB  10
1415:  MOVWF  22
1416:  MOVLB  0F
1417:  MOVF   6F,W
1418:  MOVLB  10
1419:  MOVWF  24
*
1491:  MOVF   78,F
1492:  BTFSS  03.2
1493:  GOTO   49B
....................       return command;
1494:  MOVLW  DD
1495:  MOVWF  78
1496:  MOVLW  07
1497:  MOVWF  79
1498:  MOVLB  0F
1499:  GOTO   546
149A:  MOVLB  10
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
149B:  MOVLB  0F
149C:  MOVF   6B,W
149D:  MOVWF  04
149E:  MOVF   6C,W
149F:  MOVWF  05
14A0:  ADDFSR 00,FSR0
14A1:  MOVF   00,W
14A2:  ANDLW  F0
14A3:  MOVWF  77
14A4:  SWAPF  77,W
14A5:  MOVLB  10
14A6:  MOVWF  22
14A7:  MOVLW  0F
14A8:  ANDWF  22,F
14A9:  MOVF   22,W
14AA:  MOVWF  23
*
1508:  MOVF   78,F
1509:  BTFSS  03.2
150A:  GOTO   512
....................       return command;
150B:  MOVLW  DD
150C:  MOVWF  78
150D:  MOVLW  07
150E:  MOVWF  79
150F:  MOVLB  0F
1510:  GOTO   546
1511:  MOVLB  10
.................... 
....................    command.frame_id = frame_id;
1512:  MOVLB  0F
1513:  MOVF   6D,W
1514:  MOVWF  5D
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
1515:  MOVLW  01
1516:  ADDWF  6B,W
1517:  MOVLB  10
1518:  MOVWF  22
1519:  MOVLW  00
151A:  MOVLB  0F
151B:  ADDWFC 6C,W
151C:  MOVLB  10
151D:  MOVWF  23
151E:  MOVLW  02
151F:  MOVLB  0F
1520:  SUBWF  6F,W
1521:  MOVLB  10
1522:  MOVWF  24
1523:  MOVF   23,W
1524:  MOVWF  05
1525:  MOVF   22,W
1526:  MOVWF  04
1527:  MOVF   24,W
1528:  MOVWF  78
1529:  BTFSC  03.2
152A:  GOTO   533
152B:  MOVLW  24
152C:  MOVWF  07
152D:  MOVLW  F0
152E:  MOVWF  06
152F:  MOVIW  [FSR0++],W
1530:  MOVWI  W,[FSR1++]
1531:  DECFSZ 78,F
1532:  GOTO   52F
....................    command.size = receive_frame_size-2;
1533:  MOVLW  02
1534:  MOVLB  0F
1535:  SUBWF  6F,W
1536:  MOVWF  5E
....................    command.is_exist = TRUE;
1537:  BSF    5F.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1538:  MOVLW  F4
1539:  MOVLB  03
153A:  MOVWF  11
153B:  MOVLW  01
153C:  MOVWF  12
153D:  MOVLP  08
153E:  MOVLB  00
153F:  CALL   000
1540:  MOVLP  10
....................    return command;
1541:  MOVLW  DD
1542:  MOVWF  78
1543:  MOVLW  07
1544:  MOVWF  79
1545:  MOVLB  0F
1546:  MOVLP  30
1547:  MOVLB  00
1548:  GOTO   6D0 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
1361:  CLRF   25
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
1362:  CLRF   25
1363:  MOVLW  01
1364:  SUBWF  24,W
1365:  SUBWF  25,W
1366:  BTFSC  03.0
1367:  GOTO   378
....................       if(receive_signal[i] == SFD)
1368:  MOVF   25,W
1369:  ADDWF  22,W
136A:  MOVWF  04
136B:  MOVLW  00
136C:  ADDWFC 23,W
136D:  MOVWF  05
136E:  MOVF   00,W
136F:  SUBLW  AA
1370:  BTFSS  03.2
1371:  GOTO   376
....................          return i+1;
1372:  MOVLW  01
1373:  ADDWF  25,W
1374:  MOVWF  78
1375:  GOTO   39C
1376:  INCF   25,F
1377:  GOTO   363
....................    if (receive_signal[i] == SFD)
1378:  MOVF   25,W
1379:  ADDWF  22,W
137A:  MOVWF  04
137B:  MOVLW  00
137C:  ADDWFC 23,W
137D:  MOVWF  05
137E:  MOVF   00,W
137F:  SUBLW  AA
1380:  BTFSS  03.2
1381:  GOTO   390
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
1382:  MOVLW  02
1383:  MOVLB  03
1384:  MOVWF  11
1385:  MOVLW  02
1386:  MOVWF  12
1387:  MOVLP  08
1388:  MOVLB  00
1389:  CALL   000
138A:  MOVLP  10
....................       return -1;
138B:  MOVLW  FF
138C:  MOVWF  78
138D:  MOVLB  10
138E:  GOTO   39C
....................    }
138F:  GOTO   39C
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
1390:  MOVLW  0D
1391:  MOVLB  03
1392:  MOVWF  11
1393:  MOVLW  02
1394:  MOVWF  12
1395:  MOVLP  08
1396:  MOVLB  00
1397:  CALL   000
1398:  MOVLP  10
....................       return -1;
1399:  MOVLW  FF
139A:  MOVWF  78
139B:  MOVLB  10
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
13B9:  CLRF   23
13BA:  MOVF   23,W
13BB:  SUBLW  02
13BC:  BTFSS  03.0
13BD:  GOTO   3D8
....................       if (frame_id == frame_ids[i].id)
13BE:  BCF    03.0
13BF:  RLF    23,W
13C0:  ADDLW  CC
13C1:  MOVWF  04
13C2:  MOVLW  24
13C3:  MOVWF  05
13C4:  BTFSC  03.0
13C5:  INCF   05,F
13C6:  MOVF   00,W
13C7:  SUBWF  22,W
13C8:  BTFSS  03.2
13C9:  GOTO   3D6
....................          return frame_ids[i].length;
13CA:  BCF    03.0
13CB:  RLF    23,W
13CC:  ADDLW  01
13CD:  ADDLW  CC
13CE:  MOVWF  04
13CF:  MOVLW  24
13D0:  MOVWF  05
13D1:  BTFSC  03.0
13D2:  INCF   05,F
13D3:  MOVF   00,W
13D4:  MOVWF  78
13D5:  GOTO   400
13D6:  INCF   23,F
13D7:  GOTO   3BA
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
13D8:  MOVLW  16
13D9:  MOVLB  03
13DA:  MOVWF  11
13DB:  MOVLW  02
13DC:  MOVWF  12
13DD:  BCF    03.0
13DE:  MOVLW  1F
13DF:  MOVLB  11
13E0:  MOVWF  51
13E1:  MOVLP  08
13E2:  MOVLB  00
13E3:  CALL   2EF
13E4:  MOVLP  10
13E5:  MOVLB  10
13E6:  MOVF   22,W
13E7:  MOVLB  11
13E8:  MOVWF  51
13E9:  MOVLW  37
13EA:  MOVWF  52
13EB:  MOVLP  08
13EC:  MOVLB  00
13ED:  CALL   6A2
13EE:  MOVLP  10
13EF:  MOVLW  0D
13F0:  MOVLB  13
13F1:  MOVWF  2B
13F2:  MOVLP  00
13F3:  MOVLB  00
13F4:  CALL   7CB
13F5:  MOVLP  10
13F6:  MOVLW  0A
13F7:  MOVLB  13
13F8:  MOVWF  2B
13F9:  MOVLP  00
13FA:  MOVLB  00
13FB:  CALL   7CB
13FC:  MOVLP  10
....................    return -1;
13FD:  MOVLW  FF
13FE:  MOVWF  78
13FF:  MOVLB  10
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
141A:  MOVLW  01
141B:  SUBWF  24,W
141C:  ADDWF  22,W
141D:  MOVWF  04
141E:  MOVLW  00
141F:  ADDWFC 23,W
1420:  MOVWF  05
1421:  MOVF   00,W
1422:  MOVWF  25
1423:  MOVLW  01
1424:  SUBWF  24,W
1425:  MOVWF  27
1426:  MOVF   23,W
1427:  MOVWF  29
1428:  MOVF   22,W
1429:  MOVWF  28
142A:  MOVF   27,W
142B:  MOVWF  2A
142C:  MOVLP  08
142D:  MOVLB  00
142E:  CALL   7D9
142F:  MOVLP  10
1430:  MOVF   78,W
1431:  MOVLB  10
1432:  MOVWF  26
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
1433:  MOVF   26,W
1434:  SUBWF  25,W
1435:  BTFSS  03.2
1436:  GOTO   43B
....................       return TRUE;
1437:  MOVLW  01
1438:  MOVWF  78
1439:  GOTO   491
143A:  GOTO   491
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
143B:  MOVLW  28
143C:  MOVLB  03
143D:  MOVWF  11
143E:  MOVLW  02
143F:  MOVWF  12
1440:  MOVLP  08
1441:  MOVLB  00
1442:  CALL   000
1443:  MOVLP  10
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
1444:  MOVLW  31
1445:  MOVLB  03
1446:  MOVWF  11
1447:  MOVLW  02
1448:  MOVWF  12
1449:  BCF    03.0
144A:  MOVLW  13
144B:  MOVLB  11
144C:  MOVWF  51
144D:  MOVLP  08
144E:  MOVLB  00
144F:  CALL   2EF
1450:  MOVLP  10
1451:  MOVLB  10
1452:  MOVF   25,W
1453:  MOVLB  11
1454:  MOVWF  51
1455:  MOVLW  37
1456:  MOVWF  52
1457:  MOVLP  08
1458:  MOVLB  00
1459:  CALL   6A2
145A:  MOVLP  10
145B:  MOVLW  0D
145C:  MOVLB  13
145D:  MOVWF  2B
145E:  MOVLP  00
145F:  MOVLB  00
1460:  CALL   7CB
1461:  MOVLP  10
1462:  MOVLW  0A
1463:  MOVLB  13
1464:  MOVWF  2B
1465:  MOVLP  00
1466:  MOVLB  00
1467:  CALL   7CB
1468:  MOVLP  10
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1469:  MOVLW  3D
146A:  MOVLB  03
146B:  MOVWF  11
146C:  MOVLW  02
146D:  MOVWF  12
146E:  BCF    03.0
146F:  MOVLW  13
1470:  MOVLB  11
1471:  MOVWF  51
1472:  MOVLP  08
1473:  MOVLB  00
1474:  CALL   2EF
1475:  MOVLP  10
1476:  MOVLB  10
1477:  MOVF   26,W
1478:  MOVLB  11
1479:  MOVWF  51
147A:  MOVLW  37
147B:  MOVWF  52
147C:  MOVLP  08
147D:  MOVLB  00
147E:  CALL   6A2
147F:  MOVLP  10
1480:  MOVLW  0D
1481:  MOVLB  13
1482:  MOVWF  2B
1483:  MOVLP  00
1484:  MOVLB  00
1485:  CALL   7CB
1486:  MOVLP  10
1487:  MOVLW  0A
1488:  MOVLB  13
1489:  MOVWF  2B
148A:  MOVLP  00
148B:  MOVLB  00
148C:  CALL   7CB
148D:  MOVLP  10
....................       return FALSE;
148E:  MOVLW  00
148F:  MOVWF  78
1490:  MOVLB  10
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
14AB:  MOVF   23,W
14AC:  SUBLW  0C
14AD:  BTFSS  03.2
14AE:  GOTO   4B3
....................       return TRUE;
14AF:  MOVLW  01
14B0:  MOVWF  78
14B1:  GOTO   508
14B2:  GOTO   508
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
14B3:  MOVLW  49
14B4:  MOVLB  03
14B5:  MOVWF  11
14B6:  MOVLW  02
14B7:  MOVWF  12
14B8:  MOVLP  08
14B9:  MOVLB  00
14BA:  CALL   000
14BB:  MOVLP  10
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
14BC:  MOVLW  5A
14BD:  MOVLB  03
14BE:  MOVWF  11
14BF:  MOVLW  02
14C0:  MOVWF  12
14C1:  BCF    03.0
14C2:  MOVLW  13
14C3:  MOVLB  11
14C4:  MOVWF  51
14C5:  MOVLP  08
14C6:  MOVLB  00
14C7:  CALL   2EF
14C8:  MOVLP  10
14C9:  MOVLB  10
14CA:  MOVF   23,W
14CB:  MOVLB  11
14CC:  MOVWF  51
14CD:  MOVLW  37
14CE:  MOVWF  52
14CF:  MOVLP  08
14D0:  MOVLB  00
14D1:  CALL   6A2
14D2:  MOVLP  10
14D3:  MOVLW  0D
14D4:  MOVLB  13
14D5:  MOVWF  2B
14D6:  MOVLP  00
14D7:  MOVLB  00
14D8:  CALL   7CB
14D9:  MOVLP  10
14DA:  MOVLW  0A
14DB:  MOVLB  13
14DC:  MOVWF  2B
14DD:  MOVLP  00
14DE:  MOVLB  00
14DF:  CALL   7CB
14E0:  MOVLP  10
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
14E1:  MOVLW  66
14E2:  MOVLB  03
14E3:  MOVWF  11
14E4:  MOVLW  02
14E5:  MOVWF  12
14E6:  BCF    03.0
14E7:  MOVLW  13
14E8:  MOVLB  11
14E9:  MOVWF  51
14EA:  MOVLP  08
14EB:  MOVLB  00
14EC:  CALL   2EF
14ED:  MOVLP  10
14EE:  MOVLW  0C
14EF:  MOVLB  11
14F0:  MOVWF  51
14F1:  MOVLW  37
14F2:  MOVWF  52
14F3:  MOVLP  08
14F4:  MOVLB  00
14F5:  CALL   6A2
14F6:  MOVLP  10
14F7:  MOVLW  0D
14F8:  MOVLB  13
14F9:  MOVWF  2B
14FA:  MOVLP  00
14FB:  MOVLB  00
14FC:  CALL   7CB
14FD:  MOVLP  10
14FE:  MOVLW  0A
14FF:  MOVLB  13
1500:  MOVWF  2B
1501:  MOVLP  00
1502:  MOVLB  00
1503:  CALL   7CB
1504:  MOVLP  10
....................       return FALSE;  
1505:  MOVLW  00
1506:  MOVWF  78
1507:  MOVLB  10
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
1568:  MOVLW  AA
1569:  MOVLB  0F
156A:  MOVWF  5C
....................    data[1] = (BOSS_PIC << 4) | frame_id;
156B:  MOVF   58,W
156C:  IORLW  50
156D:  MOVWF  5D
....................    memcpy(&data[2], content, size);
156E:  MOVF   5A,W
156F:  MOVWF  05
1570:  MOVF   59,W
1571:  MOVWF  04
1572:  MOVF   5B,W
1573:  MOVWF  78
1574:  BTFSC  03.2
1575:  GOTO   57E
1576:  MOVLW  24
1577:  MOVWF  07
1578:  MOVLW  EE
1579:  MOVWF  06
157A:  MOVIW  [FSR0++],W
157B:  MOVWI  W,[FSR1++]
157C:  DECFSZ 78,F
157D:  GOTO   57A
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
157E:  MOVLW  02
157F:  ADDWF  5B,W
1580:  MOVWF  6C
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
1581:  MOVLW  EC
1582:  ADDWF  6C,W
1583:  MOVWF  78
1584:  MOVLW  24
1585:  MOVWF  7A
1586:  BTFSC  03.0
1587:  INCF   7A,F
1588:  MOVF   78,W
1589:  MOVLB  10
158A:  MOVWF  22
158B:  MOVF   7A,W
158C:  MOVWF  23
158D:  MOVLW  01
158E:  MOVLB  0F
158F:  SUBWF  6C,W
1590:  MOVLB  10
1591:  MOVWF  24
1592:  MOVLW  24
1593:  MOVWF  29
1594:  MOVLW  ED
1595:  MOVWF  28
1596:  MOVF   24,W
1597:  MOVWF  2A
1598:  MOVLP  08
1599:  MOVLB  00
159A:  CALL   7D9
159B:  MOVLP  10
159C:  MOVLB  10
159D:  MOVF   23,W
159E:  MOVWF  05
159F:  MOVF   22,W
15A0:  MOVWF  04
15A1:  MOVF   78,W
15A2:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
15A3:  MOVLW  01
15A4:  MOVLB  0F
15A5:  ADDWF  6C,W
15A6:  MOVWF  6D
....................    
....................    transmit(data, data_size);
15A7:  MOVLW  24
15A8:  MOVLB  10
15A9:  MOVWF  23
15AA:  MOVLW  EC
15AB:  MOVWF  22
15AC:  MOVLB  0F
15AD:  MOVF   6D,W
15AE:  MOVLB  10
15AF:  MOVWF  24
*
15FD:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
15B0:  CLRF   25
15B1:  MOVF   24,W
15B2:  SUBWF  25,W
15B3:  BTFSC  03.0
15B4:  GOTO   5C6
....................       fputc(data[i], BOSS);
15B5:  MOVF   25,W
15B6:  ADDWF  22,W
15B7:  MOVWF  04
15B8:  MOVLW  00
15B9:  ADDWFC 23,W
15BA:  MOVWF  05
15BB:  MOVF   00,W
15BC:  MOVWF  27
15BD:  MOVF   27,W
*
15C3:  MOVLB  10
15C4:  INCF   25,F
15C5:  GOTO   5B1
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
15C6:  MOVLW  72
15C7:  MOVLB  03
15C8:  MOVWF  11
15C9:  MOVLW  02
15CA:  MOVWF  12
15CB:  MOVLP  08
15CC:  MOVLB  00
15CD:  CALL   000
15CE:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
15CF:  MOVLB  10
15D0:  CLRF   26
15D1:  MOVF   24,W
15D2:  SUBWF  26,W
15D3:  BTFSC  03.0
15D4:  GOTO   5EF
....................       fprintf(PC, "%X ", data[i]);
15D5:  MOVF   26,W
15D6:  ADDWF  22,W
15D7:  MOVWF  04
15D8:  MOVLW  00
15D9:  ADDWFC 23,W
15DA:  MOVWF  05
15DB:  MOVF   00,W
15DC:  MOVWF  27
15DD:  MOVLB  11
15DE:  MOVWF  51
15DF:  MOVLW  37
15E0:  MOVWF  52
15E1:  MOVLP  08
15E2:  MOVLB  00
15E3:  CALL   6A2
15E4:  MOVLP  10
15E5:  MOVLW  20
15E6:  MOVLB  13
15E7:  MOVWF  2B
15E8:  MOVLP  00
15E9:  MOVLB  00
15EA:  CALL   7CB
15EB:  MOVLP  10
15EC:  MOVLB  10
15ED:  INCF   26,F
15EE:  GOTO   5D1
....................    fprintf(PC, "\r\n");
15EF:  MOVLW  0D
15F0:  MOVLB  13
15F1:  MOVWF  2B
15F2:  MOVLP  00
15F3:  MOVLB  00
15F4:  CALL   7CB
15F5:  MOVLP  10
15F6:  MOVLW  0A
15F7:  MOVLB  13
15F8:  MOVWF  2B
15F9:  MOVLP  00
15FA:  MOVLB  00
15FB:  CALL   7CB
15FC:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0FD9:  MOVLB  10
0FDA:  MOVF   28,W
0FDB:  MOVWF  04
0FDC:  MOVF   29,W
0FDD:  MOVWF  05
0FDE:  MOVIW  [FSR0+00],W
0FDF:  MOVWF  2B
0FE0:  MOVLW  01
0FE1:  MOVWF  2C
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0FE2:  MOVF   2A,W
0FE3:  SUBWF  2C,W
0FE4:  BTFSC  03.0
0FE5:  GOTO   7F0
....................       crc ^= frame[i++];
0FE6:  MOVF   2C,W
0FE7:  INCF   2C,F
0FE8:  ADDWF  28,W
0FE9:  MOVWF  04
0FEA:  MOVLW  00
0FEB:  ADDWFC 29,W
0FEC:  MOVWF  05
0FED:  MOVF   00,W
0FEE:  XORWF  2B,F
0FEF:  GOTO   7E2
....................    return crc;
0FF0:  MOVF   2B,W
0FF1:  MOVWF  78
0FF2:  MOVLB  00
0FF3:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
0FF4:  MOVLW  0F
0FF5:  MOVLB  0F
0FF6:  MOVWF  58
0FF7:  CLRF   5A
0FF8:  CLRF   59
0FF9:  CLRF   5B
0FFA:  MOVLP  10
0FFB:  MOVLB  00
0FFC:  CALL   568
0FFD:  MOVLP  08
0FFE:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
2754:  MOVLW  03
2755:  MOVLB  0F
2756:  MOVWF  58
2757:  MOVLW  20
2758:  MOVWF  5A
2759:  MOVLW  09
275A:  MOVWF  59
275B:  MOVLW  04
275C:  MOVWF  5B
275D:  MOVLP  10
275E:  MOVLB  00
275F:  CALL   568
2760:  MOVLP  20
2761:  MOVLP  20
2762:  GOTO   776 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... union AD7490_RESISTOR reg;
.................... struct AD7490_STREAM adf7490_stream;
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     // Set default register values
....................     reg.coding = 0; // 1: Two's complement, 0: Binary
*
07F0:  MOVLB  0F
07F1:  BCF    42.0
....................     reg.write = 1;
07F2:  BSF    43.3
....................     reg.seq = 0; 
07F3:  BCF    43.2
....................     reg.randge = 0;
07F4:  BCF    42.1
....................     reg.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
07F5:  BCF    42.2
....................     reg.shadow = 0; // 1: Shadow register, 0: Direct access
07F6:  BCF    42.3
07F7:  MOVLP  30
07F8:  MOVLB  00
07F9:  GOTO   69D (RETURN)
.................... 
.................... }
.................... 
.................... unsigned int16 ad7490_read(int16 channel)
.................... {   
....................     set_add(channel);
*
17A0:  MOVLB  0F
17A1:  MOVF   69,W
17A2:  MOVWF  6D
17A3:  MOVF   68,W
17A4:  MOVWF  6C
....................     set_pm(AD7490_PM_NORMAL);
*
17D7:  CLRF   6C
....................     //spi_xfer(adf7490_stream.spi_stream, reg.value); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] << %04X\r\n", reg.value);
....................     #endif
....................     
....................     //unsigned int16 ans = spi_xfer(adf7490_stream.spi_stream);
....................     //unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata = 0;
*
17E5:  CLRF   6B
17E6:  CLRF   6A
....................     
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC,"\t[ADC] >> %04X\r\n", readdata);
....................     #endif
....................     return readdata;
17E7:  MOVF   6A,W
17E8:  MOVWF  78
17E9:  MOVF   6B,W
17EA:  MOVWF  79
17EB:  MOVLB  00
17EC:  RETURN
.................... }
.................... 
.................... void set_add(int16 channel)
.................... {
....................     reg.add0 = (channel >> 0) & 0x1;
*
17A5:  MOVF   6C,W
17A6:  ANDLW  01
17A7:  MOVWF  77
17A8:  CLRF   7A
17A9:  BCF    42.6
17AA:  BTFSC  77.0
17AB:  BSF    42.6
....................     reg.add1 = (channel >> 1) & 0x1;
17AC:  BCF    03.0
17AD:  RRF    6D,W
17AE:  MOVWF  6F
17AF:  RRF    6C,W
17B0:  MOVWF  6E
17B1:  ANDLW  01
17B2:  MOVWF  77
17B3:  CLRF   7A
17B4:  BCF    42.7
17B5:  BTFSC  77.0
17B6:  BSF    42.7
....................     reg.add2 = (channel >> 2) & 0x1;
17B7:  RRF    6D,W
17B8:  MOVWF  6F
17B9:  RRF    6C,W
17BA:  MOVWF  6E
17BB:  RRF    6F,F
17BC:  RRF    6E,F
17BD:  MOVLW  3F
17BE:  ANDWF  6F,F
17BF:  MOVF   6E,W
17C0:  ANDLW  01
17C1:  MOVWF  77
17C2:  CLRF   7A
17C3:  BCF    43.0
17C4:  BTFSC  77.0
17C5:  BSF    43.0
....................     reg.add3 = (channel >> 3) & 0x1;
17C6:  RRF    6D,W
17C7:  MOVWF  6F
17C8:  RRF    6C,W
17C9:  MOVWF  6E
17CA:  RRF    6F,F
17CB:  RRF    6E,F
17CC:  RRF    6F,F
17CD:  RRF    6E,F
17CE:  MOVLW  1F
17CF:  ANDWF  6F,F
17D0:  MOVF   6E,W
17D1:  ANDLW  01
17D2:  MOVWF  77
17D3:  CLRF   7A
17D4:  BCF    43.1
17D5:  BTFSC  77.0
17D6:  BSF    43.1
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.pm0 = (powermode >> 0) & 0x1;
*
17D8:  MOVF   6C,W
17D9:  ANDLW  01
17DA:  MOVWF  78
17DB:  BCF    42.4
17DC:  BTFSC  78.0
17DD:  BSF    42.4
....................     reg.pm1 = (powermode >> 1) & 0x1;
17DE:  BCF    03.0
17DF:  RRF    6C,W
17E0:  ANDLW  01
17E1:  MOVWF  78
17E2:  BCF    42.5
17E3:  BTFSC  78.0
17E4:  BSF    42.5
....................     
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_SMF_START 0x000000
.................... #define ADDRESS_SMF_END   0xF42400
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... typedef struct FLASH_DATA_HEADER {
....................     unsigned int32  smf_piclog_use_counter;
....................     unsigned int8   smf_piclog_loop_counter;
....................     unsigned int32  smf_meas_use_counter;
....................     unsigned int8   smf_meas_loop_counter;
.................... 
....................     unsigned int32  misf_piclog_use_counter;
....................     unsigned int8   misf_piclog_loop_counter;
....................     unsigned int32  misf_piclog_uncopyed_counter;
....................     unsigned int8   misf_piclog_write_counter;
....................     unsigned int32  misf_meas_use_counter;
....................     unsigned int8   misf_meas_loop_counter;
....................     unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................     unsigned int8   reserve[34];
....................     unsigned int8   crc;
.................... }   FLASH_DATA_HEADER; // フィールド
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
15FE:  MOVLW  12
15FF:  MOVLB  03
1600:  MOVWF  11
1601:  MOVLW  03
1602:  MOVWF  12
1603:  MOVLP  08
1604:  MOVLB  00
1605:  CALL   000
1606:  MOVLP  10
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
1607:  MOVLB  0F
1608:  MOVF   5D,W
1609:  MOVWF  04
160A:  MOVF   5E,W
160B:  MOVWF  05
160C:  MOVIW  [FSR0+00],W
160D:  MOVWF  5F
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
160E:  MOVF   5D,W
160F:  MOVWF  04
1610:  MOVF   5E,W
1611:  MOVWF  05
1612:  ADDFSR 01,FSR0
1613:  MOVF   00,W
1614:  MOVLB  10
1615:  CLRF   26
1616:  CLRF   25
1617:  CLRF   24
1618:  MOVWF  23
1619:  MOVWF  26
161A:  CLRF   23
161B:  CLRF   24
161C:  CLRF   25
161D:  MOVLB  0F
161E:  MOVF   5D,W
161F:  MOVWF  04
1620:  MOVF   5E,W
1621:  MOVWF  05
1622:  ADDFSR 02,FSR0
1623:  MOVF   00,W
1624:  MOVLB  10
1625:  CLRF   2B
1626:  CLRF   2A
1627:  CLRF   29
1628:  MOVWF  28
1629:  MOVF   29,W
162A:  MOVWF  7A
162B:  MOVF   28,W
162C:  MOVWF  79
162D:  CLRF   77
162E:  CLRF   78
162F:  MOVF   77,W
1630:  IORWF  23,F
1631:  MOVF   78,W
1632:  IORWF  24,F
1633:  MOVF   28,W
1634:  IORWF  25,F
1635:  MOVF   29,W
1636:  IORWF  26,F
1637:  MOVLB  0F
1638:  MOVF   5D,W
1639:  MOVWF  04
163A:  MOVF   5E,W
163B:  MOVWF  05
163C:  ADDFSR 03,FSR0
163D:  MOVF   00,W
163E:  MOVLB  10
163F:  CLRF   2B
1640:  CLRF   2A
1641:  CLRF   29
1642:  MOVWF  28
1643:  MOVF   2A,W
1644:  MOVWF  7A
1645:  MOVF   29,W
1646:  MOVWF  79
1647:  MOVF   28,W
1648:  MOVWF  78
1649:  CLRF   77
164A:  MOVF   77,W
164B:  IORWF  23,F
164C:  MOVF   28,W
164D:  IORWF  24,F
164E:  MOVF   29,W
164F:  IORWF  25,F
1650:  MOVF   2A,W
1651:  IORWF  26,F
1652:  MOVLB  0F
1653:  MOVF   5D,W
1654:  MOVWF  04
1655:  MOVF   5E,W
1656:  MOVWF  05
1657:  MOVIW  [FSR0+04],W
1658:  MOVWF  77
1659:  CLRF   78
165A:  CLRF   79
165B:  CLRF   7A
165C:  MOVF   77,W
165D:  MOVLB  10
165E:  IORWF  23,W
165F:  MOVLB  0F
1660:  MOVWF  60
1661:  MOVF   78,W
1662:  MOVLB  10
1663:  IORWF  24,W
1664:  MOVLB  0F
1665:  MOVWF  61
1666:  MOVF   79,W
1667:  MOVLB  10
1668:  IORWF  25,W
1669:  MOVLB  0F
166A:  MOVWF  62
166B:  MOVF   7A,W
166C:  MOVLB  10
166D:  IORWF  26,W
166E:  MOVLB  0F
166F:  MOVWF  63
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
1670:  MOVF   5D,W
1671:  MOVWF  04
1672:  MOVF   5E,W
1673:  MOVWF  05
1674:  ADDFSR 05,FSR0
1675:  MOVF   00,W
1676:  MOVLB  10
1677:  CLRF   24
1678:  MOVWF  23
1679:  MOVWF  24
167A:  CLRF   23
167B:  MOVLB  0F
167C:  MOVF   5D,W
167D:  MOVWF  04
167E:  MOVF   5E,W
167F:  MOVWF  05
1680:  MOVIW  [FSR0+06],W
1681:  CLRF   7A
1682:  MOVLB  10
1683:  IORWF  23,W
1684:  MOVLB  0F
1685:  MOVWF  64
1686:  MOVF   7A,W
1687:  MOVLB  10
1688:  IORWF  24,W
1689:  MOVLB  0F
168A:  MOVWF  65
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
168B:  MOVLW  1C
168C:  MOVLB  03
168D:  MOVWF  11
168E:  MOVLW  03
168F:  MOVWF  12
1690:  BCF    03.0
1691:  MOVLW  0C
1692:  MOVLB  11
1693:  MOVWF  51
1694:  MOVLP  08
1695:  MOVLB  00
1696:  CALL   2EF
1697:  MOVLP  10
1698:  MOVLB  0F
1699:  MOVF   5F,W
169A:  MOVLB  11
169B:  MOVWF  51
169C:  MOVLW  37
169D:  MOVWF  52
169E:  MOVLP  08
169F:  MOVLB  00
16A0:  CALL   6A2
16A1:  MOVLP  10
16A2:  MOVLW  0D
16A3:  MOVLB  13
16A4:  MOVWF  2B
16A5:  MOVLP  00
16A6:  MOVLB  00
16A7:  CALL   7CB
16A8:  MOVLP  10
16A9:  MOVLW  0A
16AA:  MOVLB  13
16AB:  MOVWF  2B
16AC:  MOVLP  00
16AD:  MOVLB  00
16AE:  CALL   7CB
16AF:  MOVLP  10
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
16B0:  MOVLW  26
16B1:  MOVLB  03
16B2:  MOVWF  11
16B3:  MOVLW  03
16B4:  MOVWF  12
16B5:  BCF    03.0
16B6:  MOVLW  0E
16B7:  MOVLB  11
16B8:  MOVWF  51
16B9:  MOVLP  08
16BA:  MOVLB  00
16BB:  CALL   2EF
16BC:  MOVLP  10
16BD:  MOVLB  0F
16BE:  MOVF   63,W
16BF:  MOVLB  11
16C0:  MOVWF  51
16C1:  MOVLW  37
16C2:  MOVWF  52
16C3:  MOVLP  08
16C4:  MOVLB  00
16C5:  CALL   6A2
16C6:  MOVLP  10
16C7:  MOVLB  0F
16C8:  MOVF   62,W
16C9:  MOVLB  11
16CA:  MOVWF  51
16CB:  MOVLW  37
16CC:  MOVWF  52
16CD:  MOVLP  08
16CE:  MOVLB  00
16CF:  CALL   6A2
16D0:  MOVLP  10
16D1:  MOVLB  0F
16D2:  MOVF   61,W
16D3:  MOVLB  11
16D4:  MOVWF  51
16D5:  MOVLW  37
16D6:  MOVWF  52
16D7:  MOVLP  08
16D8:  MOVLB  00
16D9:  CALL   6A2
16DA:  MOVLP  10
16DB:  MOVLB  0F
16DC:  MOVF   60,W
16DD:  MOVLB  11
16DE:  MOVWF  51
16DF:  MOVLW  37
16E0:  MOVWF  52
16E1:  MOVLP  08
16E2:  MOVLB  00
16E3:  CALL   6A2
16E4:  MOVLP  10
16E5:  MOVLW  0D
16E6:  MOVLB  13
16E7:  MOVWF  2B
16E8:  MOVLP  00
16E9:  MOVLB  00
16EA:  CALL   7CB
16EB:  MOVLP  10
16EC:  MOVLW  0A
16ED:  MOVLB  13
16EE:  MOVWF  2B
16EF:  MOVLP  00
16F0:  MOVLB  00
16F1:  CALL   7CB
16F2:  MOVLP  10
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
16F3:  MOVLW  31
16F4:  MOVLB  03
16F5:  MOVWF  11
16F6:  MOVLW  03
16F7:  MOVWF  12
16F8:  BCF    03.0
16F9:  MOVLW  0E
16FA:  MOVLB  11
16FB:  MOVWF  51
16FC:  MOVLP  08
16FD:  MOVLB  00
16FE:  CALL   2EF
16FF:  MOVLP  10
1700:  MOVLB  0F
1701:  MOVF   65,W
1702:  MOVLB  11
1703:  MOVWF  51
1704:  MOVLW  37
1705:  MOVWF  52
1706:  MOVLP  08
1707:  MOVLB  00
1708:  CALL   6A2
1709:  MOVLP  10
170A:  MOVLB  0F
170B:  MOVF   64,W
170C:  MOVLB  11
170D:  MOVWF  51
170E:  MOVLW  37
170F:  MOVWF  52
1710:  MOVLP  08
1711:  MOVLB  00
1712:  CALL   6A2
1713:  MOVLP  10
1714:  MOVLW  0D
1715:  MOVLB  13
1716:  MOVWF  2B
1717:  MOVLP  00
1718:  MOVLB  00
1719:  CALL   7CB
171A:  MOVLP  10
171B:  MOVLW  0A
171C:  MOVLB  13
171D:  MOVWF  2B
171E:  MOVLP  00
171F:  MOVLB  00
1720:  CALL   7CB
1721:  MOVLP  10
.................... 
....................    piclog_make(dummy_cmd.id, 0x00); // Log the command execution
1722:  MOVLB  0F
1723:  MOVF   5F,W
1724:  MOVLB  10
1725:  MOVWF  65
1726:  CLRF   66
1727:  MOVLB  00
1728:  CALL   1E7
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    fprintf(PC, "End MODE DUMMY\r\n");
1729:  MOVLW  3C
172A:  MOVLB  03
172B:  MOVWF  11
172C:  MOVLW  03
172D:  MOVWF  12
172E:  MOVLP  08
172F:  MOVLB  00
1730:  CALL   000
1731:  MOVLP  10
1732:  MOVLP  28
1733:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    
....................    //adc_init();
....................    sweep(sweep_step);
....................    //copy_data();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
2462:  MOVLW  5F
2463:  MOVLB  03
2464:  MOVWF  11
2465:  MOVLW  03
2466:  MOVWF  12
2467:  MOVLP  08
2468:  MOVLB  00
2469:  CALL   000
246A:  MOVLP  20
....................     unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
246B:  MOVLW  64
246C:  MOVLB  0F
246D:  MOVWF  5D
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
246E:  MOVLW  66
246F:  MOVLB  03
2470:  MOVWF  11
2471:  MOVLW  03
2472:  MOVWF  12
2473:  BCF    03.0
2474:  MOVLW  0E
2475:  MOVLB  11
2476:  MOVWF  51
2477:  MOVLP  08
2478:  MOVLB  00
2479:  CALL   2EF
247A:  MOVLP  20
247B:  MOVLB  0F
247C:  MOVF   5D,W
247D:  MOVLB  11
247E:  MOVWF  3A
247F:  MOVLW  1B
2480:  MOVWF  3B
2481:  MOVLP  08
2482:  MOVLB  00
2483:  CALL   41A
2484:  MOVLP  20
2485:  MOVLW  0D
2486:  MOVLB  13
2487:  MOVWF  2B
2488:  MOVLP  00
2489:  MOVLB  00
248A:  CALL   7CB
248B:  MOVLP  20
248C:  MOVLW  0A
248D:  MOVLB  13
248E:  MOVWF  2B
248F:  MOVLP  00
2490:  MOVLB  00
2491:  CALL   7CB
2492:  MOVLP  20
....................     output_high(CONNECT_CIGS);
2493:  MOVLB  01
2494:  BCF    0E.0
2495:  MOVLB  02
2496:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
2497:  MOVLW  20
2498:  MOVWF  78
2499:  MOVLB  01
249A:  MOVF   1D,W
249B:  ANDLW  83
249C:  IORWF  78,W
249D:  MOVWF  1D
249E:  MOVLW  0F
249F:  MOVWF  78
24A0:  MOVF   1F,W
24A1:  ANDLW  F0
24A2:  IORWF  78,W
24A3:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
24A4:  MOVLW  0D
24A5:  MOVWF  77
24A6:  DECFSZ 77,F
24A7:  GOTO   4A6
....................     measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
24A8:  MOVLB  0F
24A9:  CLRF   69
24AA:  CLRF   68
24AB:  MOVLP  10
24AC:  MOVLB  00
24AD:  CALL   7A0
24AE:  MOVLP  20
24AF:  MOVF   79,W
24B0:  MOVLB  0C
24B1:  MOVWF  33
24B2:  MOVF   78,W
24B3:  MOVWF  32
....................     set_adc_channel(TEMP_BOT);
24B4:  MOVLW  0C
24B5:  MOVWF  78
24B6:  MOVLB  01
24B7:  MOVF   1D,W
24B8:  ANDLW  83
24B9:  IORWF  78,W
24BA:  MOVWF  1D
24BB:  MOVLW  0F
24BC:  MOVWF  78
24BD:  MOVF   1F,W
24BE:  ANDLW  F0
24BF:  IORWF  78,W
24C0:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
24C1:  MOVLW  0D
24C2:  MOVWF  77
24C3:  DECFSZ 77,F
24C4:  GOTO   4C3
....................     measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
24C5:  MOVLB  0F
24C6:  CLRF   69
24C7:  CLRF   68
24C8:  MOVLP  10
24C9:  MOVLB  00
24CA:  CALL   7A0
24CB:  MOVLP  20
24CC:  MOVF   79,W
24CD:  MOVLB  0C
24CE:  MOVWF  35
24CF:  MOVF   78,W
24D0:  MOVWF  34
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
24D1:  MOVLW  00
24D2:  MOVWF  78
24D3:  MOVLB  01
24D4:  MOVF   1D,W
24D5:  ANDLW  83
24D6:  IORWF  78,W
24D7:  MOVWF  1D
24D8:  MOVLW  0F
24D9:  MOVWF  78
24DA:  MOVF   1F,W
24DB:  ANDLW  F0
24DC:  IORWF  78,W
24DD:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
24DE:  MOVLW  0D
24DF:  MOVWF  77
24E0:  DECFSZ 77,F
24E1:  GOTO   4E0
....................     measured_pd_start = ad7490_read(AD7490_VIN0); // voltage at adc pin
24E2:  MOVLB  0F
24E3:  CLRF   69
24E4:  CLRF   68
24E5:  MOVLP  10
24E6:  MOVLB  00
24E7:  CALL   7A0
24E8:  MOVLP  20
24E9:  MOVF   79,W
24EA:  MOVLB  0C
24EB:  MOVWF  2F
24EC:  MOVF   78,W
24ED:  MOVWF  2E
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
24EE:  MOVLB  0F
24EF:  CLRF   63
24F0:  CLRF   62
24F1:  MOVF   63,F
24F2:  BTFSS  03.2
24F3:  GOTO   59D
24F4:  MOVF   5D,W
24F5:  SUBWF  62,W
24F6:  BTFSC  03.0
24F7:  GOTO   59D
....................     {    
....................          // set DAC value
....................          dac_write(count);
24F8:  MOVF   62,W
24F9:  MOVLB  02
24FA:  MOVWF  19
....................          delay_us(100); // wait for the DAC to stabilize
24FB:  MOVLW  85
24FC:  MOVWF  77
24FD:  DECFSZ 77,F
24FE:  GOTO   4FD
.................... 
....................          // read CIGS voltage and current
....................          set_adc_channel(CIGS_VOLT);       
24FF:  MOVLW  00
2500:  MOVWF  78
2501:  MOVLB  01
2502:  MOVF   1D,W
2503:  ANDLW  83
2504:  IORWF  78,W
2505:  MOVWF  1D
2506:  MOVLW  0F
2507:  MOVWF  78
2508:  MOVF   1F,W
2509:  ANDLW  F0
250A:  IORWF  78,W
250B:  MOVWF  1F
....................          delay_us(10); // wait for the ADC to stabilize
250C:  MOVLW  0D
250D:  MOVWF  77
250E:  DECFSZ 77,F
250F:  GOTO   50E
....................          data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
2510:  BCF    03.0
2511:  MOVLB  0F
2512:  RLF    62,W
2513:  MOVWF  66
2514:  RLF    63,W
2515:  MOVWF  67
2516:  BCF    03.0
2517:  RLF    66,W
2518:  MOVWF  79
2519:  RLF    67,W
251A:  MOVWF  7A
251B:  MOVF   79,W
251C:  ADDLW  3A
251D:  MOVWF  66
251E:  MOVLW  20
251F:  ADDWFC 7A,W
2520:  MOVWF  67
2521:  CLRF   69
2522:  CLRF   68
2523:  MOVLP  10
2524:  MOVLB  00
2525:  CALL   7A0
2526:  MOVLP  20
2527:  MOVLB  0F
2528:  MOVF   67,W
2529:  MOVWF  05
252A:  MOVF   66,W
252B:  MOVWF  04
252C:  MOVF   78,W
252D:  MOVWF  00
252E:  MOVF   79,W
252F:  MOVWI  W,[FSR0+01]
....................          
....................          set_adc_channel(CIGS_CURR);
2530:  MOVLW  04
2531:  MOVWF  78
2532:  MOVLB  01
2533:  MOVF   1D,W
2534:  ANDLW  83
2535:  IORWF  78,W
2536:  MOVWF  1D
2537:  MOVLW  0F
2538:  MOVWF  78
2539:  MOVF   1F,W
253A:  ANDLW  F0
253B:  IORWF  78,W
253C:  MOVWF  1F
....................          current = 0; // reset current value
253D:  MOVLB  0F
253E:  CLRF   61
253F:  CLRF   60
2540:  CLRF   5F
2541:  CLRF   5E
....................          for(int k=0; k<10; k++)
2542:  CLRF   64
2543:  MOVF   64,W
2544:  SUBLW  09
2545:  BTFSS  03.0
2546:  GOTO   55B
....................          {
....................                                              //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................                delay_us(10);
2547:  MOVLW  0D
2548:  MOVWF  77
2549:  DECFSZ 77,F
254A:  GOTO   549
....................                current = current + ad7490_read(AD7490_VIN0); 
254B:  CLRF   69
254C:  CLRF   68
254D:  MOVLP  10
254E:  MOVLB  00
254F:  CALL   7A0
2550:  MOVLP  20
2551:  MOVF   78,W
2552:  MOVLB  0F
2553:  ADDWF  5E,F
2554:  MOVF   79,W
2555:  ADDWFC 5F,F
2556:  MOVLW  00
2557:  ADDWFC 60,F
2558:  ADDWFC 61,F
2559:  INCF   64,F
255A:  GOTO   543
....................          }    
....................          
....................          current = current / 10; // average the current value
255B:  BCF    03.1
255C:  MOVF   61,W
255D:  MOVLB  11
255E:  MOVWF  63
255F:  MOVLB  0F
2560:  MOVF   60,W
2561:  MOVLB  11
2562:  MOVWF  62
2563:  MOVLB  0F
2564:  MOVF   5F,W
2565:  MOVLB  11
2566:  MOVWF  61
2567:  MOVLB  0F
2568:  MOVF   5E,W
2569:  MOVLB  11
256A:  MOVWF  60
256B:  CLRF   67
256C:  CLRF   66
256D:  CLRF   65
256E:  MOVLW  0A
256F:  MOVWF  64
2570:  MOVLP  08
2571:  MOVLB  00
2572:  CALL   34D
2573:  MOVLP  20
2574:  MOVF   7A,W
2575:  MOVLB  0F
2576:  MOVWF  61
2577:  MOVF   79,W
2578:  MOVWF  60
2579:  MOVF   78,W
257A:  MOVWF  5F
257B:  MOVF   77,W
257C:  MOVWF  5E
.................... 
....................          delay_us(10); // wait for the ADC to stabilize
257D:  MOVLW  0D
257E:  MOVWF  77
257F:  DECFSZ 77,F
2580:  GOTO   57F
....................          data_buffer[count*2+1] = current; // store the current value in the buffer
2581:  BCF    03.0
2582:  RLF    62,W
2583:  MOVWF  66
2584:  RLF    63,W
2585:  MOVWF  67
2586:  MOVLW  01
2587:  ADDWF  66,F
2588:  MOVLW  00
2589:  ADDWFC 67,F
258A:  BCF    03.0
258B:  RLF    66,W
258C:  MOVWF  79
258D:  RLF    67,W
258E:  MOVWF  7A
258F:  MOVF   79,W
2590:  ADDLW  3A
2591:  MOVWF  04
2592:  MOVLW  20
2593:  ADDWFC 7A,W
2594:  MOVWF  05
2595:  MOVF   5E,W
2596:  MOVWF  00
2597:  MOVF   5F,W
2598:  MOVWI  W,[FSR0+01]
2599:  INCF   62,F
259A:  BTFSC  03.2
259B:  INCF   63,F
259C:  GOTO   4F1
....................          //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................       fprintf(PC, "END SWEEP\r\n");
259D:  MOVLW  70
259E:  MOVLB  03
259F:  MOVWF  11
25A0:  MOVLW  03
25A1:  MOVWF  12
25A2:  MOVLP  08
25A3:  MOVLB  00
25A4:  CALL   000
25A5:  MOVLP  20
....................       // read PD value
....................       set_adc_channel(PD);
25A6:  MOVLW  00
25A7:  MOVWF  78
25A8:  MOVLB  01
25A9:  MOVF   1D,W
25AA:  ANDLW  83
25AB:  IORWF  78,W
25AC:  MOVWF  1D
25AD:  MOVLW  0F
25AE:  MOVWF  78
25AF:  MOVF   1F,W
25B0:  ANDLW  F0
25B1:  IORWF  78,W
25B2:  MOVWF  1F
....................       measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
25B3:  BSF    1D.1
25B4:  BTFSC  1D.1
25B5:  GOTO   5B4
25B6:  MOVLB  0C
25B7:  CLRF   31
25B8:  MOVLB  01
25B9:  MOVF   1C,W
25BA:  MOVLB  0C
25BB:  MOVWF  30
.................... 
....................       convert_cigs_data(measurement_step);
25BC:  MOVLB  0F
25BD:  MOVF   5D,W
25BE:  MOVWF  66
....................       //convert_header_data();    
....................       output_low(CONNECT_CIGS);
*
271C:  MOVLB  01
271D:  BCF    0E.0
271E:  MOVLB  02
271F:  BCF    0E.0
2720:  MOVLB  00
2721:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
1734:  MOVLW  AB
1735:  MOVLB  03
1736:  MOVWF  11
1737:  MOVLW  03
1738:  MOVWF  12
1739:  MOVLP  08
173A:  MOVLB  00
173B:  CALL   000
173C:  MOVLP  10
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
173D:  MOVLB  0F
173E:  MOVF   5D,W
173F:  MOVWF  04
1740:  MOVF   5E,W
1741:  MOVWF  05
1742:  MOVIW  [FSR0+00],W
1743:  MOVWF  5F
....................    piclog_make(cmd, 0x00); // Log the command execution
1744:  MOVF   5F,W
1745:  MOVLB  10
1746:  MOVWF  65
1747:  CLRF   66
1748:  MOVLB  00
1749:  CALL   1E7
....................    for (unsigned int32 address = ADDRESS_SMF_START; address < ADDRESS_SMF_END; address += SECTOR_64K_BYTE) {
174A:  MOVLB  0F
174B:  CLRF   63
174C:  CLRF   62
174D:  CLRF   61
174E:  CLRF   60
174F:  MOVF   63,F
1750:  BTFSS  03.2
1751:  GOTO   77E
1752:  MOVF   62,W
1753:  SUBLW  F4
1754:  BTFSS  03.0
1755:  GOTO   77E
1756:  BTFSS  03.2
1757:  GOTO   75C
1758:  MOVF   61,W
1759:  SUBLW  23
175A:  BTFSS  03.0
175B:  GOTO   77E
....................       sector_erase(mis_fm, address); // Erase each sector
175C:  MOVLB  0D
175D:  MOVF   45,W
175E:  MOVLB  0F
175F:  MOVWF  68
1760:  MOVLB  0D
1761:  MOVF   44,W
1762:  MOVLB  0F
1763:  MOVWF  67
1764:  MOVLB  0D
1765:  MOVF   43,W
1766:  MOVLB  0F
1767:  MOVWF  66
1768:  MOVLB  0D
1769:  MOVF   42,W
176A:  MOVLB  0F
176B:  MOVWF  65
176C:  MOVF   63,W
176D:  MOVWF  6C
176E:  MOVF   62,W
176F:  MOVWF  6B
1770:  MOVF   61,W
1771:  MOVWF  6A
1772:  MOVF   60,W
1773:  MOVWF  69
1774:  MOVLP  18
1775:  MOVLB  00
1776:  CALL   000
1777:  MOVLP  10
1778:  MOVLW  01
1779:  MOVLB  0F
177A:  ADDWF  62,F
177B:  MOVLW  00
177C:  ADDWFC 63,F
177D:  GOTO   74F
....................    }
....................    fprintf(PC, "End Flash Erase All\r\n");
177E:  MOVLW  B7
177F:  MOVLB  03
1780:  MOVWF  11
1781:  MOVLW  03
1782:  MOVWF  12
1783:  MOVLP  08
1784:  MOVLB  00
1785:  CALL   000
1786:  MOVLP  10
1787:  MOVLP  28
1788:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
*
19D6:  MOVLW  C2
19D7:  MOVLB  03
19D8:  MOVWF  11
19D9:  MOVLW  03
19DA:  MOVWF  12
19DB:  MOVLP  08
19DC:  MOVLB  00
19DD:  CALL   000
19DE:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
19DF:  MOVLB  0F
19E0:  MOVF   5D,W
19E1:  MOVWF  04
19E2:  MOVF   5E,W
19E3:  MOVWF  05
19E4:  ADDFSR 00,FSR0
19E5:  MOVF   00,W
19E6:  MOVWF  5F
19E7:  MOVF   5D,W
19E8:  MOVWF  04
19E9:  MOVF   5E,W
19EA:  MOVWF  05
19EB:  ADDFSR 01,FSR0
19EC:  MOVF   00,W
19ED:  CLRF   68
19EE:  CLRF   67
19EF:  CLRF   66
19F0:  MOVWF  65
19F1:  MOVWF  68
19F2:  CLRF   65
19F3:  CLRF   66
19F4:  CLRF   67
19F5:  MOVF   5D,W
19F6:  MOVWF  04
19F7:  MOVF   5E,W
19F8:  MOVWF  05
19F9:  ADDFSR 02,FSR0
19FA:  MOVF   00,W
19FB:  CLRF   6D
19FC:  CLRF   6C
19FD:  CLRF   6B
19FE:  MOVWF  6A
19FF:  MOVF   6B,W
1A00:  MOVWF  7A
1A01:  MOVF   6A,W
1A02:  MOVWF  79
1A03:  CLRF   77
1A04:  CLRF   78
1A05:  MOVF   77,W
1A06:  IORWF  65,F
1A07:  MOVF   78,W
1A08:  IORWF  66,F
1A09:  MOVF   6A,W
1A0A:  IORWF  67,F
1A0B:  MOVF   6B,W
1A0C:  IORWF  68,F
1A0D:  MOVF   5D,W
1A0E:  MOVWF  04
1A0F:  MOVF   5E,W
1A10:  MOVWF  05
1A11:  ADDFSR 03,FSR0
1A12:  MOVF   00,W
1A13:  CLRF   6D
1A14:  CLRF   6C
1A15:  CLRF   6B
1A16:  MOVWF  6A
1A17:  MOVF   6C,W
1A18:  MOVWF  7A
1A19:  MOVF   6B,W
1A1A:  MOVWF  79
1A1B:  MOVF   6A,W
1A1C:  MOVWF  78
1A1D:  CLRF   77
1A1E:  MOVF   77,W
1A1F:  IORWF  65,F
1A20:  MOVF   6A,W
1A21:  IORWF  66,F
1A22:  MOVF   6B,W
1A23:  IORWF  67,F
1A24:  MOVF   6C,W
1A25:  IORWF  68,F
1A26:  MOVF   5D,W
1A27:  MOVWF  04
1A28:  MOVF   5E,W
1A29:  MOVWF  05
1A2A:  MOVIW  [FSR0+04],W
1A2B:  MOVWF  77
1A2C:  CLRF   78
1A2D:  CLRF   79
1A2E:  CLRF   7A
1A2F:  MOVF   77,W
1A30:  IORWF  65,W
1A31:  MOVWF  60
1A32:  MOVF   78,W
1A33:  IORWF  66,W
1A34:  MOVWF  61
1A35:  MOVF   79,W
1A36:  IORWF  67,W
1A37:  MOVWF  62
1A38:  MOVF   7A,W
1A39:  IORWF  68,W
1A3A:  MOVWF  63
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
1A3B:  MOVLW  D1
1A3C:  MOVLB  03
1A3D:  MOVWF  11
1A3E:  MOVLW  03
1A3F:  MOVWF  12
1A40:  BCF    03.0
1A41:  MOVLW  13
1A42:  MOVLB  11
1A43:  MOVWF  51
1A44:  MOVLP  08
1A45:  MOVLB  00
1A46:  CALL   2EF
1A47:  MOVLP  18
1A48:  MOVLB  0F
1A49:  MOVF   63,W
1A4A:  MOVLB  11
1A4B:  MOVWF  51
1A4C:  MOVLW  37
1A4D:  MOVWF  52
1A4E:  MOVLP  08
1A4F:  MOVLB  00
1A50:  CALL   6A2
1A51:  MOVLP  18
1A52:  MOVLB  0F
1A53:  MOVF   62,W
1A54:  MOVLB  11
1A55:  MOVWF  51
1A56:  MOVLW  37
1A57:  MOVWF  52
1A58:  MOVLP  08
1A59:  MOVLB  00
1A5A:  CALL   6A2
1A5B:  MOVLP  18
1A5C:  MOVLB  0F
1A5D:  MOVF   61,W
1A5E:  MOVLB  11
1A5F:  MOVWF  51
1A60:  MOVLW  37
1A61:  MOVWF  52
1A62:  MOVLP  08
1A63:  MOVLB  00
1A64:  CALL   6A2
1A65:  MOVLP  18
1A66:  MOVLB  0F
1A67:  MOVF   60,W
1A68:  MOVLB  11
1A69:  MOVWF  51
1A6A:  MOVLW  37
1A6B:  MOVWF  52
1A6C:  MOVLP  08
1A6D:  MOVLB  00
1A6E:  CALL   6A2
1A6F:  MOVLP  18
1A70:  MOVLW  0D
1A71:  MOVLB  13
1A72:  MOVWF  2B
1A73:  MOVLP  00
1A74:  MOVLB  00
1A75:  CALL   7CB
1A76:  MOVLP  18
1A77:  MOVLW  0A
1A78:  MOVLB  13
1A79:  MOVWF  2B
1A7A:  MOVLP  00
1A7B:  MOVLB  00
1A7C:  CALL   7CB
1A7D:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1A7E:  MOVLB  0F
1A7F:  MOVF   5F,W
1A80:  MOVLB  10
1A81:  MOVWF  65
1A82:  CLRF   66
1A83:  MOVLP  10
1A84:  MOVLB  00
1A85:  CALL   1E7
1A86:  MOVLP  18
....................    
....................    sector_erase(mis_fm, sector_address);
1A87:  MOVLB  0D
1A88:  MOVF   45,W
1A89:  MOVLB  0F
1A8A:  MOVWF  68
1A8B:  MOVLB  0D
1A8C:  MOVF   44,W
1A8D:  MOVLB  0F
1A8E:  MOVWF  67
1A8F:  MOVLB  0D
1A90:  MOVF   43,W
1A91:  MOVLB  0F
1A92:  MOVWF  66
1A93:  MOVLB  0D
1A94:  MOVF   42,W
1A95:  MOVLB  0F
1A96:  MOVWF  65
1A97:  MOVF   63,W
1A98:  MOVWF  6C
1A99:  MOVF   62,W
1A9A:  MOVWF  6B
1A9B:  MOVF   61,W
1A9C:  MOVWF  6A
1A9D:  MOVF   60,W
1A9E:  MOVWF  69
1A9F:  MOVLB  00
1AA0:  CALL   000
....................    
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
1AA1:  MOVLW  DF
1AA2:  MOVLB  03
1AA3:  MOVWF  11
1AA4:  MOVLW  03
1AA5:  MOVWF  12
1AA6:  MOVLP  08
1AA7:  MOVLB  00
1AA8:  CALL   000
1AA9:  MOVLP  18
1AAA:  MOVLP  28
1AAB:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
*
1C4D:  MOVLW  ED
1C4E:  MOVLB  03
1C4F:  MOVWF  11
1C50:  MOVLW  03
1C51:  MOVWF  12
1C52:  MOVLP  08
1C53:  MOVLB  00
1C54:  CALL   000
1C55:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1C56:  MOVLB  0F
1C57:  MOVF   5D,W
1C58:  MOVWF  04
1C59:  MOVF   5E,W
1C5A:  MOVWF  05
1C5B:  ADDFSR 00,FSR0
1C5C:  MOVF   00,W
1C5D:  MOVWF  5F
1C5E:  MOVF   5D,W
1C5F:  MOVWF  04
1C60:  MOVF   5E,W
1C61:  MOVWF  05
1C62:  ADDFSR 01,FSR0
1C63:  MOVF   00,W
1C64:  CLRF   68
1C65:  CLRF   67
1C66:  CLRF   66
1C67:  MOVWF  65
1C68:  MOVWF  68
1C69:  CLRF   65
1C6A:  CLRF   66
1C6B:  CLRF   67
1C6C:  MOVF   5D,W
1C6D:  MOVWF  04
1C6E:  MOVF   5E,W
1C6F:  MOVWF  05
1C70:  ADDFSR 02,FSR0
1C71:  MOVF   00,W
1C72:  CLRF   6D
1C73:  CLRF   6C
1C74:  CLRF   6B
1C75:  MOVWF  6A
1C76:  MOVF   6B,W
1C77:  MOVWF  7A
1C78:  MOVF   6A,W
1C79:  MOVWF  79
1C7A:  CLRF   77
1C7B:  CLRF   78
1C7C:  MOVF   77,W
1C7D:  IORWF  65,F
1C7E:  MOVF   78,W
1C7F:  IORWF  66,F
1C80:  MOVF   6A,W
1C81:  IORWF  67,F
1C82:  MOVF   6B,W
1C83:  IORWF  68,F
1C84:  MOVF   5D,W
1C85:  MOVWF  04
1C86:  MOVF   5E,W
1C87:  MOVWF  05
1C88:  ADDFSR 03,FSR0
1C89:  MOVF   00,W
1C8A:  CLRF   6D
1C8B:  CLRF   6C
1C8C:  CLRF   6B
1C8D:  MOVWF  6A
1C8E:  MOVF   6C,W
1C8F:  MOVWF  7A
1C90:  MOVF   6B,W
1C91:  MOVWF  79
1C92:  MOVF   6A,W
1C93:  MOVWF  78
1C94:  CLRF   77
1C95:  MOVF   77,W
1C96:  IORWF  65,F
1C97:  MOVF   6A,W
1C98:  IORWF  66,F
1C99:  MOVF   6B,W
1C9A:  IORWF  67,F
1C9B:  MOVF   6C,W
1C9C:  IORWF  68,F
1C9D:  MOVF   5D,W
1C9E:  MOVWF  04
1C9F:  MOVF   5E,W
1CA0:  MOVWF  05
1CA1:  MOVIW  [FSR0+04],W
1CA2:  MOVWF  77
1CA3:  CLRF   78
1CA4:  CLRF   79
1CA5:  CLRF   7A
1CA6:  MOVF   77,W
1CA7:  IORWF  65,W
1CA8:  MOVWF  60
1CA9:  MOVF   78,W
1CAA:  IORWF  66,W
1CAB:  MOVWF  61
1CAC:  MOVF   79,W
1CAD:  IORWF  67,W
1CAE:  MOVWF  62
1CAF:  MOVF   7A,W
1CB0:  IORWF  68,W
1CB1:  MOVWF  63
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
1CB2:  MOVLW  FB
1CB3:  MOVLB  03
1CB4:  MOVWF  11
1CB5:  MOVLW  03
1CB6:  MOVWF  12
1CB7:  BCF    03.0
1CB8:  MOVLW  16
1CB9:  MOVLB  11
1CBA:  MOVWF  51
1CBB:  MOVLP  08
1CBC:  MOVLB  00
1CBD:  CALL   2EF
1CBE:  MOVLP  18
1CBF:  MOVLB  0F
1CC0:  MOVF   63,W
1CC1:  MOVLB  11
1CC2:  MOVWF  51
1CC3:  MOVLW  37
1CC4:  MOVWF  52
1CC5:  MOVLP  08
1CC6:  MOVLB  00
1CC7:  CALL   6A2
1CC8:  MOVLP  18
1CC9:  MOVLB  0F
1CCA:  MOVF   62,W
1CCB:  MOVLB  11
1CCC:  MOVWF  51
1CCD:  MOVLW  37
1CCE:  MOVWF  52
1CCF:  MOVLP  08
1CD0:  MOVLB  00
1CD1:  CALL   6A2
1CD2:  MOVLP  18
1CD3:  MOVLB  0F
1CD4:  MOVF   61,W
1CD5:  MOVLB  11
1CD6:  MOVWF  51
1CD7:  MOVLW  37
1CD8:  MOVWF  52
1CD9:  MOVLP  08
1CDA:  MOVLB  00
1CDB:  CALL   6A2
1CDC:  MOVLP  18
1CDD:  MOVLB  0F
1CDE:  MOVF   60,W
1CDF:  MOVLB  11
1CE0:  MOVWF  51
1CE1:  MOVLW  37
1CE2:  MOVWF  52
1CE3:  MOVLP  08
1CE4:  MOVLB  00
1CE5:  CALL   6A2
1CE6:  MOVLP  18
1CE7:  MOVLW  0D
1CE8:  MOVLB  13
1CE9:  MOVWF  2B
1CEA:  MOVLP  00
1CEB:  MOVLB  00
1CEC:  CALL   7CB
1CED:  MOVLP  18
1CEE:  MOVLW  0A
1CEF:  MOVLB  13
1CF0:  MOVWF  2B
1CF1:  MOVLP  00
1CF2:  MOVLB  00
1CF3:  CALL   7CB
1CF4:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1CF5:  MOVLB  0F
1CF6:  MOVF   5F,W
1CF7:  MOVLB  10
1CF8:  MOVWF  65
1CF9:  CLRF   66
1CFA:  MOVLP  10
1CFB:  MOVLB  00
1CFC:  CALL   1E7
1CFD:  MOVLP  18
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
1CFE:  MOVLB  0D
1CFF:  MOVF   45,W
1D00:  MOVLB  11
1D01:  MOVWF  47
1D02:  MOVLB  0D
1D03:  MOVF   44,W
1D04:  MOVLB  11
1D05:  MOVWF  46
1D06:  MOVLB  0D
1D07:  MOVF   43,W
1D08:  MOVLB  11
1D09:  MOVWF  45
1D0A:  MOVLB  0D
1D0B:  MOVF   42,W
1D0C:  MOVLB  11
1D0D:  MOVWF  44
1D0E:  CLRF   4B
1D0F:  CLRF   4A
1D10:  CLRF   49
1D11:  CLRF   48
1D12:  MOVLB  00
1D13:  CALL   2AC
....................    
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
1D14:  MOVLW  0A
1D15:  MOVLB  03
1D16:  MOVWF  11
1D17:  MOVLW  04
1D18:  MOVWF  12
1D19:  MOVLP  08
1D1A:  MOVLB  00
1D1B:  CALL   000
1D1C:  MOVLP  18
1D1D:  MOVLP  28
1D1E:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
1D1F:  MOVLW  17
1D20:  MOVLB  03
1D21:  MOVWF  11
1D22:  MOVLW  04
1D23:  MOVWF  12
1D24:  MOVLP  08
1D25:  MOVLB  00
1D26:  CALL   000
1D27:  MOVLP  18
....................    FLASH_WRITE_PARAM flash_write_param = {0};
1D28:  MOVLB  0F
1D29:  CLRF   5F
1D2A:  CLRF   60
1D2B:  CLRF   61
1D2C:  CLRF   62
1D2D:  CLRF   63
1D2E:  CLRF   64
1D2F:  CLRF   65
....................    
....................    flash_write_param.id = parameter[0];
1D30:  MOVF   5D,W
1D31:  MOVWF  04
1D32:  MOVF   5E,W
1D33:  MOVWF  05
1D34:  MOVIW  [FSR0+00],W
1D35:  MOVWF  5F
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
1D36:  MOVF   5D,W
1D37:  MOVWF  04
1D38:  MOVF   5E,W
1D39:  MOVWF  05
1D3A:  ADDFSR 01,FSR0
1D3B:  MOVF   00,W
1D3C:  MOVLB  10
1D3D:  CLRF   68
1D3E:  CLRF   67
1D3F:  CLRF   66
1D40:  MOVWF  65
1D41:  MOVWF  68
1D42:  CLRF   65
1D43:  CLRF   66
1D44:  CLRF   67
1D45:  MOVLB  0F
1D46:  MOVF   5D,W
1D47:  MOVWF  04
1D48:  MOVF   5E,W
1D49:  MOVWF  05
1D4A:  ADDFSR 02,FSR0
1D4B:  MOVF   00,W
1D4C:  MOVLB  10
1D4D:  CLRF   6D
1D4E:  CLRF   6C
1D4F:  CLRF   6B
1D50:  MOVWF  6A
1D51:  MOVF   6B,W
1D52:  MOVWF  7A
1D53:  MOVF   6A,W
1D54:  MOVWF  79
1D55:  CLRF   77
1D56:  CLRF   78
1D57:  MOVF   77,W
1D58:  IORWF  65,F
1D59:  MOVF   78,W
1D5A:  IORWF  66,F
1D5B:  MOVF   6A,W
1D5C:  IORWF  67,F
1D5D:  MOVF   6B,W
1D5E:  IORWF  68,F
1D5F:  MOVLB  0F
1D60:  MOVF   5D,W
1D61:  MOVWF  04
1D62:  MOVF   5E,W
1D63:  MOVWF  05
1D64:  ADDFSR 03,FSR0
1D65:  MOVF   00,W
1D66:  MOVLB  10
1D67:  CLRF   6D
1D68:  CLRF   6C
1D69:  CLRF   6B
1D6A:  MOVWF  6A
1D6B:  MOVF   6C,W
1D6C:  MOVWF  7A
1D6D:  MOVF   6B,W
1D6E:  MOVWF  79
1D6F:  MOVF   6A,W
1D70:  MOVWF  78
1D71:  CLRF   77
1D72:  MOVF   77,W
1D73:  IORWF  65,F
1D74:  MOVF   6A,W
1D75:  IORWF  66,F
1D76:  MOVF   6B,W
1D77:  IORWF  67,F
1D78:  MOVF   6C,W
1D79:  IORWF  68,F
1D7A:  MOVLB  0F
1D7B:  MOVF   5D,W
1D7C:  MOVWF  04
1D7D:  MOVF   5E,W
1D7E:  MOVWF  05
1D7F:  MOVIW  [FSR0+04],W
1D80:  MOVWF  77
1D81:  CLRF   78
1D82:  CLRF   79
1D83:  CLRF   7A
1D84:  MOVF   77,W
1D85:  MOVLB  10
1D86:  IORWF  65,W
1D87:  MOVLB  0F
1D88:  MOVWF  60
1D89:  MOVF   78,W
1D8A:  MOVLB  10
1D8B:  IORWF  66,W
1D8C:  MOVLB  0F
1D8D:  MOVWF  61
1D8E:  MOVF   79,W
1D8F:  MOVLB  10
1D90:  IORWF  67,W
1D91:  MOVLB  0F
1D92:  MOVWF  62
1D93:  MOVF   7A,W
1D94:  MOVLB  10
1D95:  IORWF  68,W
1D96:  MOVLB  0F
1D97:  MOVWF  63
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
1D98:  MOVF   5D,W
1D99:  MOVWF  04
1D9A:  MOVF   5E,W
1D9B:  MOVWF  05
1D9C:  ADDFSR 07,FSR0
1D9D:  MOVF   00,W
1D9E:  MOVLB  10
1D9F:  CLRF   66
1DA0:  MOVWF  65
1DA1:  MOVWF  66
1DA2:  CLRF   65
1DA3:  MOVLB  0F
1DA4:  MOVF   5D,W
1DA5:  MOVWF  04
1DA6:  MOVF   5E,W
1DA7:  MOVWF  05
1DA8:  MOVIW  [FSR0+08],W
1DA9:  CLRF   7A
1DAA:  MOVLB  10
1DAB:  IORWF  65,W
1DAC:  MOVLB  0F
1DAD:  MOVWF  64
1DAE:  MOVF   7A,W
1DAF:  MOVLB  10
1DB0:  IORWF  66,W
1DB1:  MOVLB  0F
1DB2:  MOVWF  65
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
1DB3:  MOVLW  24
1DB4:  MOVLB  03
1DB5:  MOVWF  11
1DB6:  MOVLW  04
1DB7:  MOVWF  12
1DB8:  BCF    03.0
1DB9:  MOVLW  0C
1DBA:  MOVLB  11
1DBB:  MOVWF  51
1DBC:  MOVLP  08
1DBD:  MOVLB  00
1DBE:  CALL   2EF
1DBF:  MOVLP  18
1DC0:  MOVLB  0F
1DC1:  MOVF   5F,W
1DC2:  MOVLB  11
1DC3:  MOVWF  51
1DC4:  MOVLW  37
1DC5:  MOVWF  52
1DC6:  MOVLP  08
1DC7:  MOVLB  00
1DC8:  CALL   6A2
1DC9:  MOVLP  18
1DCA:  MOVLW  0D
1DCB:  MOVLB  13
1DCC:  MOVWF  2B
1DCD:  MOVLP  00
1DCE:  MOVLB  00
1DCF:  CALL   7CB
1DD0:  MOVLP  18
1DD1:  MOVLW  0A
1DD2:  MOVLB  13
1DD3:  MOVWF  2B
1DD4:  MOVLP  00
1DD5:  MOVLB  00
1DD6:  CALL   7CB
1DD7:  MOVLP  18
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
1DD8:  MOVLW  2E
1DD9:  MOVLB  03
1DDA:  MOVWF  11
1DDB:  MOVLW  04
1DDC:  MOVWF  12
1DDD:  BCF    03.0
1DDE:  MOVLW  0E
1DDF:  MOVLB  11
1DE0:  MOVWF  51
1DE1:  MOVLP  08
1DE2:  MOVLB  00
1DE3:  CALL   2EF
1DE4:  MOVLP  18
1DE5:  MOVLB  0F
1DE6:  MOVF   63,W
1DE7:  MOVLB  11
1DE8:  MOVWF  51
1DE9:  MOVLW  37
1DEA:  MOVWF  52
1DEB:  MOVLP  08
1DEC:  MOVLB  00
1DED:  CALL   6A2
1DEE:  MOVLP  18
1DEF:  MOVLB  0F
1DF0:  MOVF   62,W
1DF1:  MOVLB  11
1DF2:  MOVWF  51
1DF3:  MOVLW  37
1DF4:  MOVWF  52
1DF5:  MOVLP  08
1DF6:  MOVLB  00
1DF7:  CALL   6A2
1DF8:  MOVLP  18
1DF9:  MOVLB  0F
1DFA:  MOVF   61,W
1DFB:  MOVLB  11
1DFC:  MOVWF  51
1DFD:  MOVLW  37
1DFE:  MOVWF  52
1DFF:  MOVLP  08
1E00:  MOVLB  00
1E01:  CALL   6A2
1E02:  MOVLP  18
1E03:  MOVLB  0F
1E04:  MOVF   60,W
1E05:  MOVLB  11
1E06:  MOVWF  51
1E07:  MOVLW  37
1E08:  MOVWF  52
1E09:  MOVLP  08
1E0A:  MOVLB  00
1E0B:  CALL   6A2
1E0C:  MOVLP  18
1E0D:  MOVLW  0D
1E0E:  MOVLB  13
1E0F:  MOVWF  2B
1E10:  MOVLP  00
1E11:  MOVLB  00
1E12:  CALL   7CB
1E13:  MOVLP  18
1E14:  MOVLW  0A
1E15:  MOVLB  13
1E16:  MOVWF  2B
1E17:  MOVLP  00
1E18:  MOVLB  00
1E19:  CALL   7CB
1E1A:  MOVLP  18
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
1E1B:  MOVLW  39
1E1C:  MOVLB  03
1E1D:  MOVWF  11
1E1E:  MOVLW  04
1E1F:  MOVWF  12
1E20:  BCF    03.0
1E21:  MOVLW  0E
1E22:  MOVLB  11
1E23:  MOVWF  51
1E24:  MOVLP  08
1E25:  MOVLB  00
1E26:  CALL   2EF
1E27:  MOVLP  18
1E28:  MOVLB  0F
1E29:  MOVF   65,W
1E2A:  MOVLB  11
1E2B:  MOVWF  51
1E2C:  MOVLW  37
1E2D:  MOVWF  52
1E2E:  MOVLP  08
1E2F:  MOVLB  00
1E30:  CALL   6A2
1E31:  MOVLP  18
1E32:  MOVLB  0F
1E33:  MOVF   64,W
1E34:  MOVLB  11
1E35:  MOVWF  51
1E36:  MOVLW  37
1E37:  MOVWF  52
1E38:  MOVLP  08
1E39:  MOVLB  00
1E3A:  CALL   6A2
1E3B:  MOVLP  18
1E3C:  MOVLW  0D
1E3D:  MOVLB  13
1E3E:  MOVWF  2B
1E3F:  MOVLP  00
1E40:  MOVLB  00
1E41:  CALL   7CB
1E42:  MOVLP  18
1E43:  MOVLW  0A
1E44:  MOVLB  13
1E45:  MOVWF  2B
1E46:  MOVLP  00
1E47:  MOVLB  00
1E48:  CALL   7CB
1E49:  MOVLP  18
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
1E4A:  MOVLB  0F
1E4B:  MOVF   5F,W
1E4C:  MOVLB  10
1E4D:  MOVWF  65
1E4E:  CLRF   66
1E4F:  MOVLP  10
1E50:  MOVLB  00
1E51:  CALL   1E7
1E52:  MOVLP  18
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
1E53:  MOVLW  44
1E54:  MOVLB  03
1E55:  MOVWF  11
1E56:  MOVLW  04
1E57:  MOVWF  12
1E58:  MOVLP  08
1E59:  MOVLB  00
1E5A:  CALL   000
1E5B:  MOVLP  18
....................    for (p = 0; p < flash_write_param.packetnum; p++)
1E5C:  MOVLB  10
1E5D:  CLRF   57
1E5E:  CLRF   56
1E5F:  MOVF   57,W
1E60:  MOVLB  0F
1E61:  SUBWF  65,W
1E62:  BTFSS  03.0
1E63:  GOTO   704
1E64:  BTFSS  03.2
1E65:  GOTO   66E
1E66:  MOVF   64,W
1E67:  MOVLB  10
1E68:  SUBWF  56,W
1E69:  BTFSS  03.0
1E6A:  GOTO   66D
1E6B:  MOVLB  0F
1E6C:  GOTO   704
1E6D:  MOVLB  0F
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
1E6E:  MOVLB  10
1E6F:  RLF    56,W
1E70:  MOVWF  58
1E71:  RLF    57,W
1E72:  MOVWF  59
1E73:  RLF    58,F
1E74:  RLF    59,F
1E75:  RLF    58,F
1E76:  RLF    59,F
1E77:  RLF    58,F
1E78:  RLF    59,F
1E79:  RLF    58,F
1E7A:  RLF    59,F
1E7B:  RLF    58,F
1E7C:  RLF    59,F
1E7D:  MOVLW  C0
1E7E:  ANDWF  58,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
1E7F:  CLRF   5A
1E80:  MOVF   5A,W
1E81:  SUBLW  3F
1E82:  BTFSS  03.0
1E83:  GOTO   6AF
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
1E84:  MOVLW  F6
1E85:  ADDWF  5A,W
1E86:  MOVWF  04
1E87:  MOVLW  24
1E88:  MOVWF  05
1E89:  BTFSC  03.0
1E8A:  INCF   05,F
1E8B:  MOVF   5A,W
1E8C:  ADDWF  58,W
1E8D:  MOVWF  67
1E8E:  MOVLW  00
1E8F:  ADDWFC 59,W
1E90:  MOVWF  68
1E91:  CLRF   7A
1E92:  MOVF   67,W
1E93:  MOVWF  00
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
1E94:  MOVLW  F6
1E95:  ADDWF  5A,W
1E96:  MOVWF  04
1E97:  MOVLW  24
1E98:  MOVWF  05
1E99:  BTFSC  03.0
1E9A:  INCF   05,F
1E9B:  MOVF   00,W
1E9C:  MOVWF  65
1E9D:  MOVLB  11
1E9E:  MOVWF  51
1E9F:  MOVLW  37
1EA0:  MOVWF  52
1EA1:  MOVLP  08
1EA2:  MOVLB  00
1EA3:  CALL   6A2
1EA4:  MOVLP  18
1EA5:  MOVLW  20
1EA6:  MOVLB  13
1EA7:  MOVWF  2B
1EA8:  MOVLP  00
1EA9:  MOVLB  00
1EAA:  CALL   7CB
1EAB:  MOVLP  18
1EAC:  MOVLB  10
1EAD:  INCF   5A,F
1EAE:  GOTO   680
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
1EAF:  RLF    56,W
1EB0:  MOVWF  79
1EB1:  RLF    57,W
1EB2:  MOVWF  7A
1EB3:  RLF    79,F
1EB4:  RLF    7A,F
1EB5:  RLF    79,F
1EB6:  RLF    7A,F
1EB7:  RLF    79,F
1EB8:  RLF    7A,F
1EB9:  RLF    79,F
1EBA:  RLF    7A,F
1EBB:  RLF    79,F
1EBC:  RLF    7A,F
1EBD:  MOVLW  C0
1EBE:  ANDWF  79,F
1EBF:  MOVF   79,W
1EC0:  MOVLB  0F
1EC1:  ADDWF  60,W
1EC2:  MOVLB  10
1EC3:  MOVWF  5B
1EC4:  MOVF   7A,W
1EC5:  MOVLB  0F
1EC6:  ADDWFC 61,W
1EC7:  MOVLB  10
1EC8:  MOVWF  5C
1EC9:  MOVLW  00
1ECA:  MOVLB  0F
1ECB:  ADDWFC 62,W
1ECC:  MOVLB  10
1ECD:  MOVWF  5D
1ECE:  MOVLW  00
1ECF:  MOVLB  0F
1ED0:  ADDWFC 63,W
1ED1:  MOVLB  10
1ED2:  MOVWF  5E
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
1ED3:  MOVLB  0D
1ED4:  MOVF   45,W
1ED5:  MOVLB  13
1ED6:  MOVWF  2A
1ED7:  MOVLB  0D
1ED8:  MOVF   44,W
1ED9:  MOVLB  13
1EDA:  MOVWF  29
1EDB:  MOVLB  0D
1EDC:  MOVF   43,W
1EDD:  MOVLB  13
1EDE:  MOVWF  28
1EDF:  MOVLB  0D
1EE0:  MOVF   42,W
1EE1:  MOVLB  13
1EE2:  MOVWF  27
1EE3:  MOVLB  10
1EE4:  MOVF   5E,W
1EE5:  MOVLB  13
1EE6:  MOVWF  2E
1EE7:  MOVLB  10
1EE8:  MOVF   5D,W
1EE9:  MOVLB  13
1EEA:  MOVWF  2D
1EEB:  MOVLB  10
1EEC:  MOVF   5C,W
1EED:  MOVLB  13
1EEE:  MOVWF  2C
1EEF:  MOVLB  10
1EF0:  MOVF   5B,W
1EF1:  MOVLB  13
1EF2:  MOVWF  2B
1EF3:  MOVLW  24
1EF4:  MOVWF  30
1EF5:  MOVLW  F6
1EF6:  MOVWF  2F
1EF7:  CLRF   32
1EF8:  MOVLW  40
1EF9:  MOVWF  31
1EFA:  MOVLP  10
1EFB:  MOVLB  00
1EFC:  CALL   050
1EFD:  MOVLP  18
1EFE:  MOVLB  10
1EFF:  INCF   56,F
1F00:  BTFSC  03.2
1F01:  INCF   57,F
1F02:  GOTO   65F
1F03:  MOVLB  0F
....................    }
....................    fprintf(PC, "\r\n");
1F04:  MOVLW  0D
1F05:  MOVLB  13
1F06:  MOVWF  2B
1F07:  MOVLP  00
1F08:  MOVLB  00
1F09:  CALL   7CB
1F0A:  MOVLP  18
1F0B:  MOVLW  0A
1F0C:  MOVLB  13
1F0D:  MOVWF  2B
1F0E:  MOVLP  00
1F0F:  MOVLB  00
1F10:  CALL   7CB
1F11:  MOVLP  18
....................    fprintf(PC, "End Flash Write Demo\r\n");
1F12:  MOVLW  4B
1F13:  MOVLB  03
1F14:  MOVWF  11
1F15:  MOVLW  04
1F16:  MOVWF  12
1F17:  MOVLP  08
1F18:  MOVLB  00
1F19:  CALL   000
1F1A:  MOVLP  18
1F1B:  MOVLP  28
1F1C:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
2000:  MOVLW  57
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  04
2004:  MOVWF  12
2005:  MOVLP  08
2006:  MOVLB  00
2007:  CALL   000
2008:  MOVLP  20
....................    flash_setting(mis_fm);
2009:  MOVLB  0D
200A:  MOVF   45,W
200B:  MOVLB  13
200C:  MOVWF  2A
200D:  MOVLB  0D
200E:  MOVF   44,W
200F:  MOVLB  13
2010:  MOVWF  29
2011:  MOVLB  0D
2012:  MOVF   43,W
2013:  MOVLB  13
2014:  MOVWF  28
2015:  MOVLB  0D
2016:  MOVF   42,W
2017:  MOVLB  13
2018:  MOVWF  27
2019:  MOVLP  10
201A:  MOVLB  00
201B:  CALL   789
201C:  MOVLP  20
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
201D:  MOVLB  0F
201E:  CLRF   62
201F:  CLRF   61
2020:  CLRF   60
2021:  CLRF   5F
2022:  MOVLW  01
2023:  MOVWF  63
2024:  MOVLW  02
2025:  MOVWF  64
2026:  MOVLW  03
2027:  MOVWF  65
2028:  MOVLW  04
2029:  MOVWF  66
202A:  CLRF   67
202B:  CLRF   68
202C:  CLRF   69
202D:  CLRF   6A
202E:  CLRF   6B
202F:  CLRF   6C
2030:  CLRF   6D
2031:  CLRF   6E
2032:  CLRF   6F
2033:  MOVLB  10
2034:  CLRF   20
2035:  CLRF   21
2036:  CLRF   22
2037:  CLRF   23
2038:  CLRF   24
2039:  CLRF   25
203A:  CLRF   26
203B:  CLRF   27
203C:  CLRF   28
203D:  CLRF   29
203E:  CLRF   2A
203F:  CLRF   2B
2040:  CLRF   2C
2041:  CLRF   2D
2042:  CLRF   2E
2043:  CLRF   2F
2044:  CLRF   30
2045:  CLRF   31
2046:  CLRF   32
2047:  CLRF   33
2048:  CLRF   34
2049:  CLRF   35
204A:  CLRF   36
204B:  CLRF   37
204C:  CLRF   38
204D:  CLRF   39
204E:  CLRF   3A
204F:  CLRF   3B
2050:  CLRF   3C
2051:  CLRF   3D
2052:  CLRF   3E
2053:  CLRF   3F
2054:  CLRF   40
2055:  CLRF   41
2056:  CLRF   42
2057:  CLRF   43
2058:  CLRF   44
2059:  CLRF   45
205A:  CLRF   46
205B:  CLRF   47
205C:  CLRF   48
205D:  CLRF   49
205E:  CLRF   4A
205F:  CLRF   4B
2060:  CLRF   4C
2061:  CLRF   4D
2062:  CLRF   4E
2063:  CLRF   4F
2064:  CLRF   50
2065:  CLRF   51
2066:  CLRF   52
2067:  CLRF   53
2068:  CLRF   54
2069:  CLRF   55
206A:  CLRF   56
206B:  CLRF   57
206C:  CLRF   58
206D:  CLRF   59
206E:  CLRF   5A
206F:  CLRF   5B
2070:  CLRF   5C
2071:  CLRF   5D
2072:  CLRF   5E
2073:  CLRF   5F
2074:  CLRF   60
2075:  CLRF   61
2076:  CLRF   62
2077:  CLRF   63
2078:  CLRF   64
2079:  CLRF   65
207A:  CLRF   66
207B:  CLRF   67
207C:  CLRF   68
207D:  CLRF   69
207E:  CLRF   6A
207F:  CLRF   6B
2080:  CLRF   6C
2081:  CLRF   6D
2082:  CLRF   6E
2083:  CLRF   6F
2084:  MOVLB  11
2085:  CLRF   20
2086:  CLRF   21
2087:  CLRF   22
2088:  CLRF   23
2089:  CLRF   24
208A:  CLRF   25
208B:  CLRF   26
208C:  CLRF   27
208D:  CLRF   28
208E:  CLRF   29
208F:  CLRF   2A
2090:  CLRF   2B
2091:  CLRF   2C
2092:  CLRF   2D
2093:  CLRF   2E
2094:  CLRF   2F
2095:  CLRF   30
2096:  CLRF   31
2097:  CLRF   32
2098:  CLRF   33
2099:  CLRF   34
209A:  CLRF   35
209B:  CLRF   36
209C:  CLRF   37
209D:  CLRF   38
209E:  CLRF   39
209F:  CLRF   3A
20A0:  CLRF   3B
20A1:  CLRF   3C
20A2:  CLRF   3D
20A3:  CLRF   3E
20A4:  CLRF   3F
20A5:  CLRF   40
20A6:  CLRF   41
20A7:  CLRF   42
20A8:  CLRF   43
20A9:  CLRF   44
20AA:  CLRF   45
20AB:  CLRF   46
20AC:  CLRF   47
20AD:  CLRF   48
20AE:  CLRF   49
20AF:  CLRF   4A
20B0:  CLRF   4B
20B1:  CLRF   4C
20B2:  CLRF   4D
20B3:  CLRF   4E
20B4:  CLRF   4F
20B5:  CLRF   50
20B6:  CLRF   51
20B7:  CLRF   52
20B8:  CLRF   53
20B9:  CLRF   54
20BA:  CLRF   55
20BB:  CLRF   56
20BC:  CLRF   57
20BD:  CLRF   58
20BE:  CLRF   59
20BF:  CLRF   5A
20C0:  CLRF   5B
20C1:  CLRF   5C
20C2:  CLRF   5D
20C3:  CLRF   5E
20C4:  CLRF   5F
20C5:  CLRF   60
20C6:  CLRF   61
20C7:  CLRF   62
20C8:  CLRF   63
20C9:  CLRF   64
20CA:  CLRF   65
20CB:  CLRF   66
20CC:  CLRF   67
20CD:  CLRF   68
20CE:  CLRF   69
20CF:  CLRF   6A
20D0:  CLRF   6B
20D1:  CLRF   6C
20D2:  CLRF   6D
20D3:  CLRF   6E
20D4:  CLRF   6F
20D5:  MOVLB  12
20D6:  CLRF   20
20D7:  CLRF   21
20D8:  CLRF   22
20D9:  CLRF   23
20DA:  CLRF   24
20DB:  CLRF   25
20DC:  CLRF   26
20DD:  CLRF   27
20DE:  CLRF   28
20DF:  CLRF   29
20E0:  CLRF   2A
20E1:  CLRF   2B
20E2:  CLRF   2C
20E3:  CLRF   2D
20E4:  CLRF   2E
20E5:  CLRF   2F
20E6:  CLRF   30
20E7:  CLRF   31
20E8:  CLRF   32
20E9:  CLRF   33
20EA:  CLRF   34
20EB:  CLRF   35
20EC:  CLRF   36
20ED:  CLRF   37
20EE:  CLRF   38
20EF:  CLRF   39
20F0:  CLRF   3A
20F1:  CLRF   3B
20F2:  CLRF   3C
20F3:  CLRF   3D
20F4:  CLRF   3E
20F5:  CLRF   3F
20F6:  CLRF   40
20F7:  CLRF   41
20F8:  CLRF   42
20F9:  CLRF   43
20FA:  CLRF   44
20FB:  CLRF   45
20FC:  CLRF   46
20FD:  CLRF   47
20FE:  CLRF   48
20FF:  CLRF   49
2100:  CLRF   4A
2101:  CLRF   4B
2102:  CLRF   4C
2103:  CLRF   4D
2104:  CLRF   4E
2105:  CLRF   4F
2106:  CLRF   50
2107:  CLRF   51
2108:  CLRF   52
2109:  CLRF   53
210A:  CLRF   54
210B:  CLRF   55
210C:  CLRF   56
210D:  CLRF   57
210E:  CLRF   58
210F:  CLRF   59
2110:  CLRF   5A
2111:  CLRF   5B
2112:  CLRF   5C
2113:  CLRF   5D
2114:  CLRF   5E
2115:  CLRF   5F
2116:  CLRF   60
2117:  CLRF   61
2118:  CLRF   62
2119:  CLRF   63
211A:  CLRF   64
211B:  CLRF   65
211C:  CLRF   66
211D:  CLRF   67
211E:  CLRF   68
211F:  CLRF   69
2120:  CLRF   6A
2121:  CLRF   6B
2122:  CLRF   6C
2123:  CLRF   6D
2124:  CLRF   6E
2125:  CLRF   6F
2126:  MOVLB  13
2127:  CLRF   20
2128:  CLRF   21
2129:  CLRF   22
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
212A:  MOVLB  0D
212B:  MOVF   45,W
212C:  MOVLB  13
212D:  MOVWF  2A
212E:  MOVLB  0D
212F:  MOVF   44,W
2130:  MOVLB  13
2131:  MOVWF  29
2132:  MOVLB  0D
2133:  MOVF   43,W
2134:  MOVLB  13
2135:  MOVWF  28
2136:  MOVLB  0D
2137:  MOVF   42,W
2138:  MOVLB  13
2139:  MOVWF  27
213A:  MOVLB  0F
213B:  MOVF   62,W
213C:  MOVLB  13
213D:  MOVWF  2E
213E:  MOVLB  0F
213F:  MOVF   61,W
2140:  MOVLB  13
2141:  MOVWF  2D
2142:  MOVLB  0F
2143:  MOVF   60,W
2144:  MOVLB  13
2145:  MOVWF  2C
2146:  MOVLB  0F
2147:  MOVF   5F,W
2148:  MOVLB  13
2149:  MOVWF  2B
214A:  MOVLW  24
214B:  MOVWF  30
214C:  MOVLW  F3
214D:  MOVWF  2F
214E:  MOVLW  01
214F:  MOVWF  32
2150:  CLRF   31
2151:  MOVLP  10
2152:  MOVLB  00
2153:  CALL   050
2154:  MOVLP  20
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
2155:  MOVLW  6A
2156:  MOVLB  03
2157:  MOVWF  11
2158:  MOVLW  04
2159:  MOVWF  12
215A:  MOVLP  08
215B:  MOVLB  00
215C:  CALL   000
215D:  MOVLP  20
215E:  MOVLP  28
215F:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
2160:  MOVLW  7C
2161:  MOVLB  03
2162:  MOVWF  11
2163:  MOVLW  04
2164:  MOVWF  12
2165:  MOVLP  08
2166:  MOVLB  00
2167:  CALL   000
2168:  MOVLP  20
....................    FLASH_PARAM flash_param = {0};
2169:  MOVLB  0F
216A:  CLRF   5F
216B:  CLRF   60
216C:  CLRF   61
216D:  CLRF   62
216E:  CLRF   63
216F:  CLRF   64
2170:  CLRF   65
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
2171:  MOVF   5D,W
2172:  MOVWF  04
2173:  MOVF   5E,W
2174:  MOVWF  05
2175:  MOVIW  [FSR0+00],W
2176:  MOVWF  5F
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
2177:  MOVF   5D,W
2178:  MOVWF  04
2179:  MOVF   5E,W
217A:  MOVWF  05
217B:  ADDFSR 01,FSR0
217C:  MOVF   00,W
217D:  MOVLB  10
217E:  CLRF   5D
217F:  CLRF   5C
2180:  CLRF   5B
2181:  MOVWF  5A
2182:  MOVWF  5D
2183:  CLRF   5A
2184:  CLRF   5B
2185:  CLRF   5C
2186:  MOVLB  0F
2187:  MOVF   5D,W
2188:  MOVWF  04
2189:  MOVF   5E,W
218A:  MOVWF  05
218B:  ADDFSR 02,FSR0
218C:  MOVF   00,W
218D:  MOVLB  10
218E:  CLRF   62
218F:  CLRF   61
2190:  CLRF   60
2191:  MOVWF  5F
2192:  MOVF   60,W
2193:  MOVWF  7A
2194:  MOVF   5F,W
2195:  MOVWF  79
2196:  CLRF   77
2197:  CLRF   78
2198:  MOVF   77,W
2199:  IORWF  5A,F
219A:  MOVF   78,W
219B:  IORWF  5B,F
219C:  MOVF   5F,W
219D:  IORWF  5C,F
219E:  MOVF   60,W
219F:  IORWF  5D,F
21A0:  MOVLB  0F
21A1:  MOVF   5D,W
21A2:  MOVWF  04
21A3:  MOVF   5E,W
21A4:  MOVWF  05
21A5:  ADDFSR 03,FSR0
21A6:  MOVF   00,W
21A7:  MOVLB  10
21A8:  CLRF   62
21A9:  CLRF   61
21AA:  CLRF   60
21AB:  MOVWF  5F
21AC:  MOVF   61,W
21AD:  MOVWF  7A
21AE:  MOVF   60,W
21AF:  MOVWF  79
21B0:  MOVF   5F,W
21B1:  MOVWF  78
21B2:  CLRF   77
21B3:  MOVF   77,W
21B4:  IORWF  5A,F
21B5:  MOVF   5F,W
21B6:  IORWF  5B,F
21B7:  MOVF   60,W
21B8:  IORWF  5C,F
21B9:  MOVF   61,W
21BA:  IORWF  5D,F
21BB:  MOVLB  0F
21BC:  MOVF   5D,W
21BD:  MOVWF  04
21BE:  MOVF   5E,W
21BF:  MOVWF  05
21C0:  MOVIW  [FSR0+04],W
21C1:  MOVWF  77
21C2:  CLRF   78
21C3:  CLRF   79
21C4:  CLRF   7A
21C5:  MOVF   77,W
21C6:  MOVLB  10
21C7:  IORWF  5A,W
21C8:  MOVLB  0F
21C9:  MOVWF  62
21CA:  MOVF   78,W
21CB:  MOVLB  10
21CC:  IORWF  5B,W
21CD:  MOVLB  0F
21CE:  MOVWF  63
21CF:  MOVF   79,W
21D0:  MOVLB  10
21D1:  IORWF  5C,W
21D2:  MOVLB  0F
21D3:  MOVWF  64
21D4:  MOVF   7A,W
21D5:  MOVLB  10
21D6:  IORWF  5D,W
21D7:  MOVLB  0F
21D8:  MOVWF  65
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
21D9:  MOVF   5D,W
21DA:  MOVWF  04
21DB:  MOVF   5E,W
21DC:  MOVWF  05
21DD:  ADDFSR 07,FSR0
21DE:  MOVF   00,W
21DF:  MOVLB  10
21E0:  CLRF   5B
21E1:  MOVWF  5A
21E2:  MOVWF  5B
21E3:  CLRF   5A
21E4:  MOVLB  0F
21E5:  MOVF   5D,W
21E6:  MOVWF  04
21E7:  MOVF   5E,W
21E8:  MOVWF  05
21E9:  MOVIW  [FSR0+08],W
21EA:  CLRF   7A
21EB:  MOVLB  10
21EC:  IORWF  5A,W
21ED:  MOVLB  0F
21EE:  MOVWF  60
21EF:  MOVF   7A,W
21F0:  MOVLB  10
21F1:  IORWF  5B,W
21F2:  MOVLB  0F
21F3:  MOVWF  61
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
21F4:  MOVLW  86
21F5:  MOVLB  03
21F6:  MOVWF  11
21F7:  MOVLW  04
21F8:  MOVWF  12
21F9:  BCF    03.0
21FA:  MOVLW  0C
21FB:  MOVLB  11
21FC:  MOVWF  51
21FD:  MOVLP  08
21FE:  MOVLB  00
21FF:  CALL   2EF
2200:  MOVLP  20
2201:  MOVLB  0F
2202:  MOVF   5F,W
2203:  MOVLB  11
2204:  MOVWF  51
2205:  MOVLW  37
2206:  MOVWF  52
2207:  MOVLP  08
2208:  MOVLB  00
2209:  CALL   6A2
220A:  MOVLP  20
220B:  MOVLW  0D
220C:  MOVLB  13
220D:  MOVWF  2B
220E:  MOVLP  00
220F:  MOVLB  00
2210:  CALL   7CB
2211:  MOVLP  20
2212:  MOVLW  0A
2213:  MOVLB  13
2214:  MOVWF  2B
2215:  MOVLP  00
2216:  MOVLB  00
2217:  CALL   7CB
2218:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
2219:  MOVLW  90
221A:  MOVLB  03
221B:  MOVWF  11
221C:  MOVLW  04
221D:  MOVWF  12
221E:  BCF    03.0
221F:  MOVLW  0E
2220:  MOVLB  11
2221:  MOVWF  51
2222:  MOVLP  08
2223:  MOVLB  00
2224:  CALL   2EF
2225:  MOVLP  20
2226:  MOVLB  0F
2227:  MOVF   65,W
2228:  MOVLB  11
2229:  MOVWF  51
222A:  MOVLW  37
222B:  MOVWF  52
222C:  MOVLP  08
222D:  MOVLB  00
222E:  CALL   6A2
222F:  MOVLP  20
2230:  MOVLB  0F
2231:  MOVF   64,W
2232:  MOVLB  11
2233:  MOVWF  51
2234:  MOVLW  37
2235:  MOVWF  52
2236:  MOVLP  08
2237:  MOVLB  00
2238:  CALL   6A2
2239:  MOVLP  20
223A:  MOVLB  0F
223B:  MOVF   63,W
223C:  MOVLB  11
223D:  MOVWF  51
223E:  MOVLW  37
223F:  MOVWF  52
2240:  MOVLP  08
2241:  MOVLB  00
2242:  CALL   6A2
2243:  MOVLP  20
2244:  MOVLB  0F
2245:  MOVF   62,W
2246:  MOVLB  11
2247:  MOVWF  51
2248:  MOVLW  37
2249:  MOVWF  52
224A:  MOVLP  08
224B:  MOVLB  00
224C:  CALL   6A2
224D:  MOVLP  20
224E:  MOVLW  0D
224F:  MOVLB  13
2250:  MOVWF  2B
2251:  MOVLP  00
2252:  MOVLB  00
2253:  CALL   7CB
2254:  MOVLP  20
2255:  MOVLW  0A
2256:  MOVLB  13
2257:  MOVWF  2B
2258:  MOVLP  00
2259:  MOVLB  00
225A:  CALL   7CB
225B:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
225C:  MOVLW  9B
225D:  MOVLB  03
225E:  MOVWF  11
225F:  MOVLW  04
2260:  MOVWF  12
2261:  BCF    03.0
2262:  MOVLW  0E
2263:  MOVLB  11
2264:  MOVWF  51
2265:  MOVLP  08
2266:  MOVLB  00
2267:  CALL   2EF
2268:  MOVLP  20
2269:  MOVLB  0F
226A:  MOVF   61,W
226B:  MOVLB  11
226C:  MOVWF  51
226D:  MOVLW  37
226E:  MOVWF  52
226F:  MOVLP  08
2270:  MOVLB  00
2271:  CALL   6A2
2272:  MOVLP  20
2273:  MOVLB  0F
2274:  MOVF   60,W
2275:  MOVLB  11
2276:  MOVWF  51
2277:  MOVLW  37
2278:  MOVWF  52
2279:  MOVLP  08
227A:  MOVLB  00
227B:  CALL   6A2
227C:  MOVLP  20
227D:  MOVLW  0D
227E:  MOVLB  13
227F:  MOVWF  2B
2280:  MOVLP  00
2281:  MOVLB  00
2282:  CALL   7CB
2283:  MOVLP  20
2284:  MOVLW  0A
2285:  MOVLB  13
2286:  MOVWF  2B
2287:  MOVLP  00
2288:  MOVLB  00
2289:  CALL   7CB
228A:  MOVLP  20
....................    
....................    piclog_make(flash_param.id, 0x00);
228B:  MOVLB  0F
228C:  MOVF   5F,W
228D:  MOVLB  10
228E:  MOVWF  65
228F:  CLRF   66
2290:  MOVLP  10
2291:  MOVLB  00
2292:  CALL   1E7
2293:  MOVLP  20
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE];
....................    fprintf(PC, "READ DATA\r\n");
2294:  MOVLW  A6
2295:  MOVLB  03
2296:  MOVWF  11
2297:  MOVLW  04
2298:  MOVWF  12
2299:  MOVLP  08
229A:  MOVLB  00
229B:  CALL   000
229C:  MOVLP  20
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
229D:  MOVLB  0D
229E:  MOVF   45,W
229F:  MOVLB  11
22A0:  MOVWF  37
22A1:  MOVLB  0D
22A2:  MOVF   44,W
22A3:  MOVLB  11
22A4:  MOVWF  36
22A5:  MOVLB  0D
22A6:  MOVF   43,W
22A7:  MOVLB  11
22A8:  MOVWF  35
22A9:  MOVLB  0D
22AA:  MOVF   42,W
22AB:  MOVLB  11
22AC:  MOVWF  34
22AD:  MOVLP  08
22AE:  MOVLB  00
22AF:  CALL   1CF
22B0:  MOVLP  20
22B1:  MOVF   78,F
22B2:  BTFSS  03.2
22B3:  GOTO   2BE
....................       fprintf(PC, "Mission Flash is not connected\r\n");
22B4:  MOVLW  AC
22B5:  MOVLB  03
22B6:  MOVWF  11
22B7:  MOVLW  04
22B8:  MOVWF  12
22B9:  MOVLP  08
22BA:  MOVLB  00
22BB:  CALL   000
22BC:  MOVLP  20
....................       return;
22BD:  GOTO   34D
....................    }
....................    for (unsigned int8 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
22BE:  MOVLB  10
22BF:  CLRF   56
22C0:  MOVLB  0F
22C1:  MOVF   61,F
22C2:  BTFSS  03.2
22C3:  GOTO   2CA
22C4:  MOVF   60,W
22C5:  MOVLB  10
22C6:  SUBWF  56,W
22C7:  BTFSC  03.0
22C8:  GOTO   344
22C9:  MOVLB  0F
....................       read_data_bytes(mis_fm,flash_param.readaddress + packetcount * PACKET_SIZE, readdata, PACKET_SIZE);
22CA:  MOVLB  10
22CB:  SWAPF  56,W
22CC:  MOVWF  77
22CD:  RLF    77,F
22CE:  RLF    77,F
22CF:  MOVLW  C0
22D0:  ANDWF  77,F
22D1:  MOVF   77,W
22D2:  MOVLB  0F
22D3:  ADDWF  62,W
22D4:  MOVLB  10
22D5:  MOVWF  5A
22D6:  MOVLW  00
22D7:  MOVLB  0F
22D8:  ADDWFC 63,W
22D9:  MOVLB  10
22DA:  MOVWF  5B
22DB:  MOVLW  00
22DC:  MOVLB  0F
22DD:  ADDWFC 64,W
22DE:  MOVLB  10
22DF:  MOVWF  5C
22E0:  MOVLW  00
22E1:  MOVLB  0F
22E2:  ADDWFC 65,W
22E3:  MOVLB  10
22E4:  MOVWF  5D
22E5:  MOVLB  0D
22E6:  MOVF   45,W
22E7:  MOVLB  13
22E8:  MOVWF  2A
22E9:  MOVLB  0D
22EA:  MOVF   44,W
22EB:  MOVLB  13
22EC:  MOVWF  29
22ED:  MOVLB  0D
22EE:  MOVF   43,W
22EF:  MOVLB  13
22F0:  MOVWF  28
22F1:  MOVLB  0D
22F2:  MOVF   42,W
22F3:  MOVLB  13
22F4:  MOVWF  27
22F5:  MOVLB  10
22F6:  MOVF   5D,W
22F7:  MOVLB  13
22F8:  MOVWF  2E
22F9:  MOVLB  10
22FA:  MOVF   5C,W
22FB:  MOVLB  13
22FC:  MOVWF  2D
22FD:  MOVLB  10
22FE:  MOVF   5B,W
22FF:  MOVLB  13
2300:  MOVWF  2C
2301:  MOVLB  10
2302:  MOVF   5A,W
2303:  MOVLB  13
2304:  MOVWF  2B
2305:  MOVLW  24
2306:  MOVWF  30
2307:  MOVLW  F6
2308:  MOVWF  2F
2309:  CLRF   34
230A:  CLRF   33
230B:  CLRF   32
230C:  MOVLW  40
230D:  MOVWF  31
230E:  MOVLP  08
230F:  MOVLB  00
2310:  CALL   228
2311:  MOVLP  20
....................       for (unsigned int8 bitcount = 0; bitcount < PACKET_SIZE; bitcount++){
2312:  MOVLB  10
2313:  CLRF   57
2314:  MOVF   57,W
2315:  SUBLW  3F
2316:  BTFSS  03.0
2317:  GOTO   333
....................          fprintf(PC,"%02X ",readdata[bitcount]);
2318:  MOVLW  F6
2319:  ADDWF  57,W
231A:  MOVWF  04
231B:  MOVLW  24
231C:  MOVWF  05
231D:  BTFSC  03.0
231E:  INCF   05,F
231F:  MOVF   00,W
2320:  MOVWF  5A
2321:  MOVLB  11
2322:  MOVWF  51
2323:  MOVLW  37
2324:  MOVWF  52
2325:  MOVLP  08
2326:  MOVLB  00
2327:  CALL   6A2
2328:  MOVLP  20
2329:  MOVLW  20
232A:  MOVLB  13
232B:  MOVWF  2B
232C:  MOVLP  00
232D:  MOVLB  00
232E:  CALL   7CB
232F:  MOVLP  20
2330:  MOVLB  10
2331:  INCF   57,F
2332:  GOTO   314
....................       }
....................       fprintf(PC,"\r\n");
2333:  MOVLW  0D
2334:  MOVLB  13
2335:  MOVWF  2B
2336:  MOVLP  00
2337:  MOVLB  00
2338:  CALL   7CB
2339:  MOVLP  20
233A:  MOVLW  0A
233B:  MOVLB  13
233C:  MOVWF  2B
233D:  MOVLP  00
233E:  MOVLB  00
233F:  CALL   7CB
2340:  MOVLP  20
2341:  MOVLB  10
2342:  INCF   56,F
2343:  GOTO   2C0
....................    }
....................    fprintf(PC, "End Flash Read\r\n");
2344:  MOVLW  BD
2345:  MOVLB  03
2346:  MOVWF  11
2347:  MOVLW  04
2348:  MOVWF  12
2349:  MOVLP  08
234A:  MOVLB  00
234B:  CALL   000
234C:  MOVLP  20
234D:  MOVLP  28
234E:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
*
1F1D:  MOVLW  C6
1F1E:  MOVLB  03
1F1F:  MOVWF  11
1F20:  MOVLW  04
1F21:  MOVWF  12
1F22:  MOVLP  08
1F23:  MOVLB  00
1F24:  CALL   000
1F25:  MOVLP  18
....................    flash_setting(mis_fm);
1F26:  MOVLB  0D
1F27:  MOVF   45,W
1F28:  MOVLB  13
1F29:  MOVWF  2A
1F2A:  MOVLB  0D
1F2B:  MOVF   44,W
1F2C:  MOVLB  13
1F2D:  MOVWF  29
1F2E:  MOVLB  0D
1F2F:  MOVF   43,W
1F30:  MOVLB  13
1F31:  MOVWF  28
1F32:  MOVLB  0D
1F33:  MOVF   42,W
1F34:  MOVLB  13
1F35:  MOVWF  27
1F36:  MOVLP  10
1F37:  MOVLB  00
1F38:  CALL   789
1F39:  MOVLP  18
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
1F3A:  MOVLB  0F
1F3B:  CLRF   62
1F3C:  CLRF   61
1F3D:  CLRF   60
1F3E:  CLRF   5F
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
1F3F:  MOVLB  0D
1F40:  MOVF   45,W
1F41:  MOVLB  13
1F42:  MOVWF  2A
1F43:  MOVLB  0D
1F44:  MOVF   44,W
1F45:  MOVLB  13
1F46:  MOVWF  29
1F47:  MOVLB  0D
1F48:  MOVF   43,W
1F49:  MOVLB  13
1F4A:  MOVWF  28
1F4B:  MOVLB  0D
1F4C:  MOVF   42,W
1F4D:  MOVLB  13
1F4E:  MOVWF  27
1F4F:  MOVLB  0F
1F50:  MOVF   62,W
1F51:  MOVLB  13
1F52:  MOVWF  2E
1F53:  MOVLB  0F
1F54:  MOVF   61,W
1F55:  MOVLB  13
1F56:  MOVWF  2D
1F57:  MOVLB  0F
1F58:  MOVF   60,W
1F59:  MOVLB  13
1F5A:  MOVWF  2C
1F5B:  MOVLB  0F
1F5C:  MOVF   5F,W
1F5D:  MOVLB  13
1F5E:  MOVWF  2B
1F5F:  MOVLW  24
1F60:  MOVWF  30
1F61:  MOVLW  F3
1F62:  MOVWF  2F
1F63:  CLRF   34
1F64:  CLRF   33
1F65:  CLRF   32
1F66:  MOVLW  04
1F67:  MOVWF  31
1F68:  MOVLP  08
1F69:  MOVLB  00
1F6A:  CALL   228
1F6B:  MOVLP  18
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
1F6C:  MOVLW  D4
1F6D:  MOVLB  03
1F6E:  MOVWF  11
1F6F:  MOVLW  04
1F70:  MOVWF  12
1F71:  BCF    03.0
1F72:  MOVLW  0B
1F73:  MOVLB  11
1F74:  MOVWF  51
1F75:  MOVLP  08
1F76:  MOVLB  00
1F77:  CALL   2EF
1F78:  MOVLP  18
1F79:  MOVLB  0F
1F7A:  MOVF   63,W
1F7B:  MOVLB  11
1F7C:  MOVWF  51
1F7D:  MOVLW  37
1F7E:  MOVWF  52
1F7F:  MOVLP  08
1F80:  MOVLB  00
1F81:  CALL   6A2
1F82:  MOVLP  18
1F83:  MOVLW  20
1F84:  MOVLB  13
1F85:  MOVWF  2B
1F86:  MOVLP  00
1F87:  MOVLB  00
1F88:  CALL   7CB
1F89:  MOVLP  18
1F8A:  MOVLB  0F
1F8B:  MOVF   64,W
1F8C:  MOVLB  11
1F8D:  MOVWF  51
1F8E:  MOVLW  37
1F8F:  MOVWF  52
1F90:  MOVLP  08
1F91:  MOVLB  00
1F92:  CALL   6A2
1F93:  MOVLP  18
1F94:  MOVLW  20
1F95:  MOVLB  13
1F96:  MOVWF  2B
1F97:  MOVLP  00
1F98:  MOVLB  00
1F99:  CALL   7CB
1F9A:  MOVLP  18
1F9B:  MOVLB  0F
1F9C:  MOVF   65,W
1F9D:  MOVLB  11
1F9E:  MOVWF  51
1F9F:  MOVLW  37
1FA0:  MOVWF  52
1FA1:  MOVLP  08
1FA2:  MOVLB  00
1FA3:  CALL   6A2
1FA4:  MOVLP  18
1FA5:  MOVLW  20
1FA6:  MOVLB  13
1FA7:  MOVWF  2B
1FA8:  MOVLP  00
1FA9:  MOVLB  00
1FAA:  CALL   7CB
1FAB:  MOVLP  18
1FAC:  MOVLB  0F
1FAD:  MOVF   66,W
1FAE:  MOVLB  11
1FAF:  MOVWF  51
1FB0:  MOVLW  37
1FB1:  MOVWF  52
1FB2:  MOVLP  08
1FB3:  MOVLB  00
1FB4:  CALL   6A2
1FB5:  MOVLP  18
1FB6:  MOVLW  0D
1FB7:  MOVLB  13
1FB8:  MOVWF  2B
1FB9:  MOVLP  00
1FBA:  MOVLB  00
1FBB:  CALL   7CB
1FBC:  MOVLP  18
1FBD:  MOVLW  0A
1FBE:  MOVLB  13
1FBF:  MOVWF  2B
1FC0:  MOVLP  00
1FC1:  MOVLB  00
1FC2:  CALL   7CB
1FC3:  MOVLP  18
....................    fprintf(PC, "End Flash Read Address\r\n");
1FC4:  MOVLW  E5
1FC5:  MOVLB  03
1FC6:  MOVWF  11
1FC7:  MOVLW  04
1FC8:  MOVWF  12
1FC9:  MOVLP  08
1FCA:  MOVLB  00
1FCB:  CALL   000
1FCC:  MOVLP  18
1FCD:  MOVLP  28
1FCE:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
*
234F:  MOVLW  F2
2350:  MOVLB  03
2351:  MOVWF  11
2352:  MOVLW  04
2353:  MOVWF  12
2354:  MOVLP  08
2355:  MOVLB  00
2356:  CALL   000
2357:  MOVLP  20
....................    flash_setting(mis_fm);
2358:  MOVLB  0D
2359:  MOVF   45,W
235A:  MOVLB  13
235B:  MOVWF  2A
235C:  MOVLB  0D
235D:  MOVF   44,W
235E:  MOVLB  13
235F:  MOVWF  29
2360:  MOVLB  0D
2361:  MOVF   43,W
2362:  MOVLB  13
2363:  MOVWF  28
2364:  MOVLB  0D
2365:  MOVF   42,W
2366:  MOVLB  13
2367:  MOVWF  27
2368:  MOVLP  10
2369:  MOVLB  00
236A:  CALL   789
236B:  MOVLP  20
....................    flash_setting(smf);
236C:  MOVLB  0D
236D:  MOVF   49,W
236E:  MOVLB  13
236F:  MOVWF  2A
2370:  MOVLB  0D
2371:  MOVF   48,W
2372:  MOVLB  13
2373:  MOVWF  29
2374:  MOVLB  0D
2375:  MOVF   47,W
2376:  MOVLB  13
2377:  MOVWF  28
2378:  MOVLB  0D
2379:  MOVF   46,W
237A:  MOVLB  13
237B:  MOVWF  27
237C:  MOVLP  10
237D:  MOVLB  00
237E:  CALL   789
237F:  MOVLP  20
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
2380:  MOVLB  0F
2381:  CLRF   62
2382:  CLRF   61
2383:  CLRF   60
2384:  CLRF   5F
2385:  CLRF   66
2386:  CLRF   65
2387:  MOVLW  10
2388:  MOVWF  64
2389:  CLRF   63
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
238A:  MOVLB  0D
238B:  MOVF   45,W
238C:  MOVLB  13
238D:  MOVWF  2A
238E:  MOVLB  0D
238F:  MOVF   44,W
2390:  MOVLB  13
2391:  MOVWF  29
2392:  MOVLB  0D
2393:  MOVF   43,W
2394:  MOVLB  13
2395:  MOVWF  28
2396:  MOVLB  0D
2397:  MOVF   42,W
2398:  MOVLB  13
2399:  MOVWF  27
239A:  MOVLB  0F
239B:  MOVF   62,W
239C:  MOVLB  13
239D:  MOVWF  2E
239E:  MOVLB  0F
239F:  MOVF   61,W
23A0:  MOVLB  13
23A1:  MOVWF  2D
23A2:  MOVLB  0F
23A3:  MOVF   60,W
23A4:  MOVLB  13
23A5:  MOVWF  2C
23A6:  MOVLB  0F
23A7:  MOVF   5F,W
23A8:  MOVLB  13
23A9:  MOVWF  2B
23AA:  MOVLW  24
23AB:  MOVWF  30
23AC:  MOVLW  F7
23AD:  MOVWF  2F
23AE:  CLRF   34
23AF:  CLRF   33
23B0:  MOVLW  01
23B1:  MOVWF  32
23B2:  CLRF   31
23B3:  MOVLP  08
23B4:  MOVLB  00
23B5:  CALL   228
23B6:  MOVLP  20
....................    write_data_bytes(smf, dest_address, read_data, 256);
23B7:  MOVLB  0D
23B8:  MOVF   49,W
23B9:  MOVLB  13
23BA:  MOVWF  2A
23BB:  MOVLB  0D
23BC:  MOVF   48,W
23BD:  MOVLB  13
23BE:  MOVWF  29
23BF:  MOVLB  0D
23C0:  MOVF   47,W
23C1:  MOVLB  13
23C2:  MOVWF  28
23C3:  MOVLB  0D
23C4:  MOVF   46,W
23C5:  MOVLB  13
23C6:  MOVWF  27
23C7:  MOVLB  0F
23C8:  MOVF   66,W
23C9:  MOVLB  13
23CA:  MOVWF  2E
23CB:  MOVLB  0F
23CC:  MOVF   65,W
23CD:  MOVLB  13
23CE:  MOVWF  2D
23CF:  MOVLB  0F
23D0:  MOVF   64,W
23D1:  MOVLB  13
23D2:  MOVWF  2C
23D3:  MOVLB  0F
23D4:  MOVF   63,W
23D5:  MOVLB  13
23D6:  MOVWF  2B
23D7:  MOVLW  24
23D8:  MOVWF  30
23D9:  MOVLW  F7
23DA:  MOVWF  2F
23DB:  MOVLW  01
23DC:  MOVWF  32
23DD:  CLRF   31
23DE:  MOVLP  10
23DF:  MOVLB  00
23E0:  CALL   050
23E1:  MOVLP  20
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
23E2:  MOVLW  FE
23E3:  MOVLB  03
23E4:  MOVWF  11
23E5:  MOVLW  04
23E6:  MOVWF  12
23E7:  MOVLP  08
23E8:  MOVLB  00
23E9:  CALL   000
23EA:  MOVLP  20
23EB:  MOVLP  28
23EC:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
23ED:  MOVLW  3E
23EE:  MOVLB  03
23EF:  MOVWF  11
23F0:  MOVLW  05
23F1:  MOVWF  12
23F2:  MOVLP  08
23F3:  MOVLB  00
23F4:  CALL   000
23F5:  MOVLP  20
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
23F6:  MOVLB  0F
23F7:  CLRF   5F
23F8:  CLRF   60
23F9:  CLRF   61
23FA:  CLRF   62
23FB:  CLRF   63
23FC:  CLRF   64
23FD:  CLRF   65
23FE:  CLRF   66
23FF:  CLRF   67
2400:  CLRF   68
2401:  CLRF   69
2402:  CLRF   6A
2403:  CLRF   6B
2404:  CLRF   6C
2405:  CLRF   6D
2406:  CLRF   6E
2407:  CLRF   6F
2408:  MOVLB  10
2409:  CLRF   20
240A:  CLRF   21
240B:  CLRF   22
240C:  CLRF   23
240D:  CLRF   24
240E:  CLRF   25
240F:  CLRF   26
2410:  CLRF   27
2411:  CLRF   28
2412:  CLRF   29
2413:  CLRF   2A
2414:  CLRF   2B
2415:  CLRF   2C
2416:  CLRF   2D
2417:  CLRF   2E
2418:  CLRF   2F
2419:  CLRF   30
241A:  CLRF   31
241B:  CLRF   32
241C:  CLRF   33
241D:  CLRF   34
241E:  CLRF   35
241F:  CLRF   36
2420:  CLRF   37
2421:  CLRF   38
2422:  CLRF   39
2423:  CLRF   3A
2424:  CLRF   3B
2425:  CLRF   3C
2426:  CLRF   3D
2427:  CLRF   3E
2428:  CLRF   3F
2429:  CLRF   40
242A:  CLRF   41
242B:  CLRF   42
242C:  CLRF   43
242D:  CLRF   44
242E:  CLRF   45
242F:  CLRF   46
2430:  CLRF   47
2431:  CLRF   48
2432:  CLRF   49
2433:  CLRF   4A
2434:  CLRF   4B
2435:  CLRF   4C
2436:  CLRF   4D
2437:  CLRF   4E
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
2438:  MOVLB  0D
2439:  MOVF   45,W
243A:  MOVLB  13
243B:  MOVWF  2A
243C:  MOVLB  0D
243D:  MOVF   44,W
243E:  MOVLB  13
243F:  MOVWF  29
2440:  MOVLB  0D
2441:  MOVF   43,W
2442:  MOVLB  13
2443:  MOVWF  28
2444:  MOVLB  0D
2445:  MOVF   42,W
2446:  MOVLB  13
2447:  MOVWF  27
2448:  CLRF   2E
2449:  CLRF   2D
244A:  CLRF   2C
244B:  CLRF   2B
244C:  MOVLW  24
244D:  MOVWF  30
244E:  MOVLW  EF
244F:  MOVWF  2F
2450:  CLRF   32
2451:  MOVLW  40
2452:  MOVWF  31
2453:  MOVLP  10
2454:  MOVLB  00
2455:  CALL   050
2456:  MOVLP  20
.................... 
....................    fprintf(PC, "End Flash Address Reset\r\n");
2457:  MOVLW  4C
2458:  MOVLB  03
2459:  MOVWF  11
245A:  MOVLW  05
245B:  MOVWF  12
245C:  MOVLP  08
245D:  MOVLB  00
245E:  CALL   000
245F:  MOVLP  20
2460:  MOVLP  28
2461:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
33B5:  MOVLW  59
33B6:  MOVLB  03
33B7:  MOVWF  11
33B8:  MOVLW  05
33B9:  MOVWF  12
33BA:  MOVLP  08
33BB:  MOVLB  00
33BC:  CALL   000
33BD:  MOVLP  30
....................     fprintf(PC, "___Start copy_data__\r\n");
33BE:  MOVLW  66
33BF:  MOVLB  03
33C0:  MOVWF  11
33C1:  MOVLW  05
33C2:  MOVWF  12
33C3:  MOVLP  08
33C4:  MOVLB  00
33C5:  CALL   000
33C6:  MOVLP  30
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
33C7:  MOVLB  10
33C8:  CLRF   48
33C9:  MOVLP  10
33CA:  MOVLB  00
33CB:  CALL   7ED
33CC:  MOVLP  30
33CD:  MOVF   78,F
33CE:  BTFSS  03.2
33CF:  GOTO   555
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
33D0:  MOVLW  72
33D1:  MOVLB  03
33D2:  MOVWF  11
33D3:  MOVLW  05
33D4:  MOVWF  12
33D5:  BCF    03.0
33D6:  MOVLW  07
33D7:  MOVLB  11
33D8:  MOVWF  51
33D9:  MOVLP  08
33DA:  MOVLB  00
33DB:  CALL   2EF
33DC:  MOVLP  30
33DD:  MOVLB  10
33DE:  MOVF   48,W
33DF:  MOVLB  11
33E0:  MOVWF  4E
33E1:  MOVLW  18
33E2:  MOVWF  4F
33E3:  MOVLP  20
33E4:  MOVLB  00
33E5:  CALL   78B
33E6:  MOVLP  30
33E7:  MOVLW  76
33E8:  MOVLB  03
33E9:  MOVWF  11
33EA:  MOVLW  05
33EB:  MOVWF  12
33EC:  BSF    03.0
33ED:  MOVLW  12
33EE:  MOVLB  11
33EF:  MOVWF  51
33F0:  MOVLP  08
33F1:  MOVLB  00
33F2:  CALL   2EF
33F3:  MOVLP  30
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
33F4:  MOVLP  28
33F5:  GOTO   0F6
33F6:  MOVLP  30
33F7:  MOVF   79,W
33F8:  MOVLB  10
33F9:  MOVWF  4A
33FA:  MOVF   78,W
33FB:  MOVWF  49
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
33FC:  MOVF   4A,W
33FD:  MOVLB  11
33FE:  MOVWF  2D
33FF:  MOVLB  10
3400:  MOVF   49,W
3401:  MOVLB  11
3402:  MOVWF  2C
3403:  MOVLW  25
3404:  MOVWF  2F
3405:  MOVLW  2B
3406:  MOVWF  2E
3407:  MOVLW  25
3408:  MOVWF  31
3409:  MOVLW  34
340A:  MOVWF  30
340B:  MOVLW  25
340C:  MOVWF  33
340D:  MOVLW  38
340E:  MOVWF  32
340F:  MOVLW  25
3410:  MOVWF  35
3411:  MOVLW  3C
3412:  MOVWF  34
3413:  MOVLW  25
3414:  MOVWF  37
3415:  MOVLW  40
3416:  MOVWF  36
3417:  MOVLW  25
3418:  MOVWF  39
3419:  MOVLW  44
341A:  MOVWF  38
341B:  MOVLW  25
341C:  MOVWF  3B
341D:  MOVLW  45
341E:  MOVWF  3A
341F:  MOVLP  28
3420:  MOVLB  00
3421:  GOTO   283
3422:  MOVLP  30
....................         status[i+1] = mission_type.mission_flag;
3423:  MOVLW  01
3424:  MOVLB  10
3425:  ADDWF  48,W
3426:  ADDLW  09
3427:  MOVWF  04
3428:  MOVLW  20
3429:  MOVWF  05
342A:  BTFSC  03.0
342B:  INCF   05,F
342C:  MOVF   53,W
342D:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
342E:  MOVF   54,W
342F:  MOVWF  69
3430:  MOVLW  10
3431:  ADDWF  55,W
3432:  MOVWF  6A
3433:  MOVLW  00
3434:  ADDWFC 56,W
3435:  MOVWF  6B
3436:  MOVLW  00
3437:  ADDWFC 57,W
3438:  MOVWF  6C
3439:  MOVF   5B,W
343A:  MOVLB  11
343B:  MOVWF  23
343C:  MOVLB  10
343D:  MOVF   5A,W
343E:  MOVLB  11
343F:  MOVWF  22
3440:  MOVLB  10
3441:  MOVF   59,W
3442:  MOVLB  11
3443:  MOVWF  21
3444:  MOVLB  10
3445:  MOVF   58,W
3446:  MOVLB  11
3447:  MOVWF  20
3448:  MOVLB  10
3449:  MOVF   69,W
344A:  MOVLB  11
344B:  SUBWF  20,W
344C:  MOVWF  24
344D:  MOVLB  10
344E:  MOVF   6A,W
344F:  MOVLB  11
3450:  SUBWFC 21,W
3451:  MOVWF  25
3452:  MOVLB  10
3453:  MOVF   6B,W
3454:  MOVLB  11
3455:  SUBWFC 22,W
3456:  MOVWF  26
3457:  MOVLB  10
3458:  MOVF   6C,W
3459:  MOVLB  11
345A:  SUBWFC 23,W
345B:  MOVWF  27
345C:  MOVLB  10
345D:  MOVF   65,W
345E:  ADDWF  69,W
345F:  MOVLB  11
3460:  MOVWF  28
3461:  MOVLB  10
3462:  MOVF   66,W
3463:  ADDWFC 6A,W
3464:  MOVLB  11
3465:  MOVWF  29
3466:  MOVLB  10
3467:  MOVF   67,W
3468:  ADDWFC 6B,W
3469:  MOVLB  11
346A:  MOVWF  2A
346B:  MOVLB  10
346C:  MOVF   68,W
346D:  ADDWFC 6C,W
346E:  MOVLB  11
346F:  MOVWF  2B
.................... 
....................         if ((used_size + write_size) > data_region_size)
3470:  MOVLB  10
3471:  MOVF   60,W
3472:  ADDWF  65,W
3473:  MOVLB  11
3474:  MOVWF  2C
3475:  MOVLB  10
3476:  MOVF   61,W
3477:  ADDWFC 66,W
3478:  MOVLB  11
3479:  MOVWF  2D
347A:  MOVLB  10
347B:  MOVF   62,W
347C:  ADDWFC 67,W
347D:  MOVLB  11
347E:  MOVWF  2E
347F:  MOVLB  10
3480:  MOVF   63,W
3481:  ADDWFC 68,W
3482:  MOVLB  11
3483:  MOVWF  2F
3484:  MOVF   27,W
3485:  SUBWF  2F,W
3486:  BTFSS  03.0
3487:  GOTO   4CB
3488:  BTFSS  03.2
3489:  GOTO   49A
348A:  MOVF   26,W
348B:  SUBWF  2E,W
348C:  BTFSS  03.0
348D:  GOTO   4CB
348E:  BTFSS  03.2
348F:  GOTO   49A
3490:  MOVF   25,W
3491:  SUBWF  2D,W
3492:  BTFSS  03.0
3493:  GOTO   4CB
3494:  BTFSS  03.2
3495:  GOTO   49A
3496:  MOVF   2C,W
3497:  SUBWF  24,W
3498:  BTFSC  03.0
3499:  GOTO   4CB
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
349A:  MOVLB  10
349B:  MOVF   6C,W
349C:  MOVLB  11
349D:  MOVWF  2F
349E:  MOVLB  10
349F:  MOVF   6B,W
34A0:  MOVLB  11
34A1:  MOVWF  2E
34A2:  MOVLB  10
34A3:  MOVF   6A,W
34A4:  MOVLB  11
34A5:  MOVWF  2D
34A6:  MOVLB  10
34A7:  MOVF   69,W
34A8:  MOVLB  11
34A9:  MOVWF  2C
34AA:  MOVF   23,W
34AB:  MOVWF  33
34AC:  MOVF   22,W
34AD:  MOVWF  32
34AE:  MOVF   21,W
34AF:  MOVWF  31
34B0:  MOVF   20,W
34B1:  MOVWF  30
34B2:  MOVLP  28
34B3:  MOVLB  00
34B4:  GOTO   634
34B5:  MOVLP  30
....................             loop_count++;
34B6:  MOVLB  10
34B7:  INCF   64,F
....................             used_size = 0;
34B8:  CLRF   68
34B9:  CLRF   67
34BA:  CLRF   66
34BB:  CLRF   65
....................             data_write_addr = data_region_start;
34BC:  MOVF   6C,W
34BD:  MOVLB  11
34BE:  MOVWF  2B
34BF:  MOVLB  10
34C0:  MOVF   6B,W
34C1:  MOVLB  11
34C2:  MOVWF  2A
34C3:  MOVLB  10
34C4:  MOVF   6A,W
34C5:  MOVLB  11
34C6:  MOVWF  29
34C7:  MOVLB  10
34C8:  MOVF   69,W
34C9:  MOVLB  11
34CA:  MOVWF  28
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
34CB:  MOVF   2B,W
34CC:  MOVWF  2F
34CD:  MOVF   2A,W
34CE:  MOVWF  2E
34CF:  MOVF   29,W
34D0:  MOVWF  2D
34D1:  MOVF   28,W
34D2:  MOVWF  2C
34D3:  MOVLB  10
34D4:  MOVF   63,W
34D5:  MOVLB  11
34D6:  MOVWF  33
34D7:  MOVLB  10
34D8:  MOVF   62,W
34D9:  MOVLB  11
34DA:  MOVWF  32
34DB:  MOVLB  10
34DC:  MOVF   61,W
34DD:  MOVLB  11
34DE:  MOVWF  31
34DF:  MOVLB  10
34E0:  MOVF   60,W
34E1:  MOVLB  11
34E2:  MOVWF  30
34E3:  MOVLB  10
34E4:  MOVF   5B,W
34E5:  MOVLB  11
34E6:  MOVWF  37
34E7:  MOVLB  10
34E8:  MOVF   5A,W
34E9:  MOVLB  11
34EA:  MOVWF  36
34EB:  MOVLB  10
34EC:  MOVF   59,W
34ED:  MOVLB  11
34EE:  MOVWF  35
34EF:  MOVLB  10
34F0:  MOVF   58,W
34F1:  MOVLB  11
34F2:  MOVWF  34
34F3:  MOVLP  28
34F4:  MOVLB  00
34F5:  GOTO   682
34F6:  MOVLP  30
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
34F7:  MOVLB  10
34F8:  MOVF   5F,W
34F9:  MOVLB  11
34FA:  MOVWF  2F
34FB:  MOVLB  10
34FC:  MOVF   5E,W
34FD:  MOVLB  11
34FE:  MOVWF  2E
34FF:  MOVLB  10
3500:  MOVF   5D,W
3501:  MOVLB  11
3502:  MOVWF  2D
3503:  MOVLB  10
3504:  MOVF   5C,W
3505:  MOVLB  11
3506:  MOVWF  2C
3507:  MOVLB  10
3508:  MOVF   63,W
3509:  MOVLB  11
350A:  MOVWF  33
350B:  MOVLB  10
350C:  MOVF   62,W
350D:  MOVLB  11
350E:  MOVWF  32
350F:  MOVLB  10
3510:  MOVF   61,W
3511:  MOVLB  11
3512:  MOVWF  31
3513:  MOVLB  10
3514:  MOVF   60,W
3515:  MOVLB  11
3516:  MOVWF  30
3517:  MOVF   2B,W
3518:  MOVWF  37
3519:  MOVF   2A,W
351A:  MOVWF  36
351B:  MOVF   29,W
351C:  MOVWF  35
351D:  MOVF   28,W
351E:  MOVWF  34
351F:  MOVLW  24
3520:  MOVWF  39
3521:  MOVLW  E8
3522:  MOVWF  38
3523:  MOVLW  25
3524:  MOVWF  3B
3525:  MOVLW  45
3526:  MOVWF  3A
3527:  MOVLP  28
3528:  MOVLB  00
3529:  GOTO   6FC
352A:  MOVLP  30
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
352B:  MOVLB  10
352C:  MOVF   57,W
352D:  MOVLB  11
352E:  MOVWF  2F
352F:  MOVLB  10
3530:  MOVF   56,W
3531:  MOVLB  11
3532:  MOVWF  2E
3533:  MOVLB  10
3534:  MOVF   55,W
3535:  MOVLB  11
3536:  MOVWF  2D
3537:  MOVLB  10
3538:  MOVF   54,W
3539:  MOVLB  11
353A:  MOVWF  2C
353B:  MOVLB  10
353C:  MOVF   68,W
353D:  MOVLB  11
353E:  MOVWF  33
353F:  MOVLB  10
3540:  MOVF   67,W
3541:  MOVLB  11
3542:  MOVWF  32
3543:  MOVLB  10
3544:  MOVF   66,W
3545:  MOVLB  11
3546:  MOVWF  31
3547:  MOVLB  10
3548:  MOVF   65,W
3549:  MOVLB  11
354A:  MOVWF  30
354B:  MOVLB  10
354C:  MOVF   64,W
354D:  MOVLB  11
354E:  MOVWF  34
354F:  MOVLB  00
3550:  GOTO   1C5
3551:  MOVLB  10
3552:  INCF   48,F
3553:  GOTO   3C9
3554:  MOVLB  00
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
3555:  MOVLW  80
3556:  MOVLB  03
3557:  MOVWF  11
3558:  MOVLW  05
3559:  MOVWF  12
355A:  MOVLP  08
355B:  MOVLB  00
355C:  CALL   000
355D:  MOVLP  30
....................     fprintf(PC, "____________________\r\n\r\n");
355E:  MOVLW  8D
355F:  MOVLB  03
3560:  MOVWF  11
3561:  MOVLW  05
3562:  MOVWF  12
3563:  MOVLP  08
3564:  MOVLB  00
3565:  CALL   000
3566:  MOVLP  30
3567:  MOVLP  30
3568:  GOTO   593 (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
2A83:  MOVLB  11
2A84:  MOVF   2F,W
2A85:  MOVWF  7A
2A86:  MOVF   2E,W
2A87:  MOVWF  49
2A88:  MOVF   7A,W
2A89:  MOVWF  4A
2A8A:  MOVF   2C,W
2A8B:  MOVWF  04
2A8C:  MOVF   2D,W
2A8D:  MOVWF  05
2A8E:  ADDFSR 00,FSR0
2A8F:  MOVF   00,W
2A90:  MOVWF  4B
2A91:  MOVWF  52
2A92:  MOVLB  00
2A93:  GOTO   126
2A94:  MOVF   79,W
2A95:  MOVWF  7A
2A96:  MOVF   78,W
2A97:  MOVWF  04
2A98:  MOVF   7A,W
2A99:  MOVWF  05
2A9A:  MOVLW  09
2A9B:  MOVWF  78
2A9C:  MOVLB  11
2A9D:  MOVF   4A,W
2A9E:  MOVWF  07
2A9F:  MOVF   49,W
2AA0:  MOVWF  06
2AA1:  MOVIW  [FSR0++],W
2AA2:  MOVWI  W,[FSR1++]
2AA3:  DECFSZ 78,F
2AA4:  GOTO   2A1
....................     *mis_start_address = mission_type->start_address;
2AA5:  MOVF   31,W
2AA6:  MOVWF  7A
2AA7:  MOVF   7A,W
2AA8:  MOVWF  4A
2AA9:  MOVF   2E,W
2AAA:  MOVWF  04
2AAB:  MOVF   2F,W
2AAC:  MOVWF  05
2AAD:  ADDFSR 00,FSR0
2AAE:  MOVF   00,W
2AAF:  MOVWF  77
2AB0:  ADDFSR 01,FSR0
2AB1:  MOVF   00,W
2AB2:  MOVWF  78
2AB3:  ADDFSR 01,FSR0
2AB4:  MOVF   00,W
2AB5:  MOVWF  79
2AB6:  ADDFSR 01,FSR0
2AB7:  MOVF   00,W
2AB8:  MOVWF  7A
2AB9:  ADDFSR 3D,FSR0
2ABA:  MOVF   7A,W
2ABB:  MOVWF  4E
2ABC:  MOVF   79,W
2ABD:  MOVWF  4D
2ABE:  MOVF   78,W
2ABF:  MOVWF  4C
2AC0:  MOVF   77,W
2AC1:  MOVWF  4B
2AC2:  MOVF   4A,W
2AC3:  MOVWF  05
2AC4:  MOVF   30,W
2AC5:  MOVWF  04
2AC6:  MOVF   4B,W
2AC7:  MOVWF  00
2AC8:  MOVF   4C,W
2AC9:  MOVWI  W,[FSR0+01]
2ACA:  MOVF   4D,W
2ACB:  MOVWI  W,[FSR0+02]
2ACC:  MOVF   4E,W
2ACD:  MOVWI  W,[FSR0+03]
....................     *mis_end_address = mission_type->end_address;
2ACE:  MOVF   2E,W
2ACF:  MOVWF  04
2AD0:  MOVF   2F,W
2AD1:  MOVWF  05
2AD2:  ADDFSR 04,FSR0
2AD3:  MOVF   00,W
2AD4:  MOVWF  77
2AD5:  ADDFSR 01,FSR0
2AD6:  MOVF   00,W
2AD7:  MOVWF  78
2AD8:  ADDFSR 01,FSR0
2AD9:  MOVF   00,W
2ADA:  MOVWF  79
2ADB:  ADDFSR 01,FSR0
2ADC:  MOVF   00,W
2ADD:  MOVWF  7A
2ADE:  ADDFSR 3D,FSR0
2ADF:  MOVF   7A,W
2AE0:  MOVWF  4E
2AE1:  MOVF   79,W
2AE2:  MOVWF  4D
2AE3:  MOVF   78,W
2AE4:  MOVWF  4C
2AE5:  MOVF   77,W
2AE6:  MOVWF  4B
2AE7:  MOVF   33,W
2AE8:  MOVWF  05
2AE9:  MOVF   32,W
2AEA:  MOVWF  04
2AEB:  MOVF   4B,W
2AEC:  MOVWF  00
2AED:  MOVF   4C,W
2AEE:  MOVWI  W,[FSR0+01]
2AEF:  MOVF   4D,W
2AF0:  MOVWI  W,[FSR0+02]
2AF1:  MOVF   4E,W
2AF2:  MOVWI  W,[FSR0+03]
....................     *write_src = smf_data->src;
2AF3:  MOVF   2C,W
2AF4:  MOVWF  04
2AF5:  MOVF   2D,W
2AF6:  MOVWF  05
2AF7:  ADDFSR 01,FSR0
2AF8:  MOVF   00,W
2AF9:  MOVWF  77
2AFA:  ADDFSR 01,FSR0
2AFB:  MOVF   00,W
2AFC:  MOVWF  78
2AFD:  ADDFSR 01,FSR0
2AFE:  MOVF   00,W
2AFF:  MOVWF  79
2B00:  ADDFSR 01,FSR0
2B01:  MOVF   00,W
2B02:  MOVWF  7A
2B03:  ADDFSR 3D,FSR0
2B04:  MOVF   7A,W
2B05:  MOVWF  4E
2B06:  MOVF   79,W
2B07:  MOVWF  4D
2B08:  MOVF   78,W
2B09:  MOVWF  4C
2B0A:  MOVF   77,W
2B0B:  MOVWF  4B
2B0C:  MOVF   35,W
2B0D:  MOVWF  05
2B0E:  MOVF   34,W
2B0F:  MOVWF  04
2B10:  MOVF   4B,W
2B11:  MOVWF  00
2B12:  MOVF   4C,W
2B13:  MOVWI  W,[FSR0+01]
2B14:  MOVF   4D,W
2B15:  MOVWI  W,[FSR0+02]
2B16:  MOVF   4E,W
2B17:  MOVWI  W,[FSR0+03]
....................     *write_size = smf_data->size;
2B18:  MOVF   2C,W
2B19:  MOVWF  04
2B1A:  MOVF   2D,W
2B1B:  MOVWF  05
2B1C:  ADDFSR 05,FSR0
2B1D:  MOVF   00,W
2B1E:  MOVWF  77
2B1F:  ADDFSR 01,FSR0
2B20:  MOVF   00,W
2B21:  MOVWF  78
2B22:  ADDFSR 01,FSR0
2B23:  MOVF   00,W
2B24:  MOVWF  79
2B25:  ADDFSR 01,FSR0
2B26:  MOVF   00,W
2B27:  MOVWF  7A
2B28:  ADDFSR 3D,FSR0
2B29:  MOVF   7A,W
2B2A:  MOVWF  4E
2B2B:  MOVF   79,W
2B2C:  MOVWF  4D
2B2D:  MOVF   78,W
2B2E:  MOVWF  4C
2B2F:  MOVF   77,W
2B30:  MOVWF  4B
2B31:  MOVF   37,W
2B32:  MOVWF  05
2B33:  MOVF   36,W
2B34:  MOVWF  04
2B35:  MOVF   4B,W
2B36:  MOVWF  00
2B37:  MOVF   4C,W
2B38:  MOVWI  W,[FSR0+01]
2B39:  MOVF   4D,W
2B3A:  MOVWI  W,[FSR0+02]
2B3B:  MOVF   4E,W
2B3C:  MOVWI  W,[FSR0+03]
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
2B3D:  MOVF   31,W
2B3E:  MOVWF  7A
2B3F:  MOVF   30,W
2B40:  MOVWF  04
2B41:  MOVF   31,W
2B42:  MOVWF  05
2B43:  MOVF   00,W
2B44:  MOVWF  49
2B45:  ADDFSR 01,FSR0
2B46:  MOVF   00,W
2B47:  MOVWF  4A
2B48:  ADDFSR 01,FSR0
2B49:  MOVF   00,W
2B4A:  MOVWF  4B
2B4B:  ADDFSR 01,FSR0
2B4C:  MOVF   00,W
2B4D:  MOVWF  4C
2B4E:  ADDFSR 3D,FSR0
2B4F:  MOVLW  9A
2B50:  MOVLB  03
2B51:  MOVWF  11
2B52:  MOVLW  05
2B53:  MOVWF  12
2B54:  BCF    03.0
2B55:  MOVLW  25
2B56:  MOVLB  11
2B57:  MOVWF  51
2B58:  MOVLP  08
2B59:  MOVLB  00
2B5A:  CALL   2EF
2B5B:  MOVLP  28
2B5C:  MOVLB  11
2B5D:  MOVF   4C,W
2B5E:  MOVWF  51
2B5F:  MOVLW  37
2B60:  MOVWF  52
2B61:  MOVLP  08
2B62:  MOVLB  00
2B63:  CALL   6A2
2B64:  MOVLP  28
2B65:  MOVLB  11
2B66:  MOVF   4B,W
2B67:  MOVWF  51
2B68:  MOVLW  37
2B69:  MOVWF  52
2B6A:  MOVLP  08
2B6B:  MOVLB  00
2B6C:  CALL   6A2
2B6D:  MOVLP  28
2B6E:  MOVLB  11
2B6F:  MOVF   4A,W
2B70:  MOVWF  51
2B71:  MOVLW  37
2B72:  MOVWF  52
2B73:  MOVLP  08
2B74:  MOVLB  00
2B75:  CALL   6A2
2B76:  MOVLP  28
2B77:  MOVLB  11
2B78:  MOVF   49,W
2B79:  MOVWF  51
2B7A:  MOVLW  37
2B7B:  MOVWF  52
2B7C:  MOVLP  08
2B7D:  MOVLB  00
2B7E:  CALL   6A2
2B7F:  MOVLP  28
2B80:  MOVLW  0D
2B81:  MOVLB  13
2B82:  MOVWF  2B
2B83:  MOVLP  00
2B84:  MOVLB  00
2B85:  CALL   7CB
2B86:  MOVLP  28
2B87:  MOVLW  0A
2B88:  MOVLB  13
2B89:  MOVWF  2B
2B8A:  MOVLP  00
2B8B:  MOVLB  00
2B8C:  CALL   7CB
2B8D:  MOVLP  28
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
2B8E:  MOVLB  11
2B8F:  MOVF   33,W
2B90:  MOVWF  7A
2B91:  MOVF   32,W
2B92:  MOVWF  04
2B93:  MOVF   33,W
2B94:  MOVWF  05
2B95:  MOVF   00,W
2B96:  MOVWF  49
2B97:  ADDFSR 01,FSR0
2B98:  MOVF   00,W
2B99:  MOVWF  4A
2B9A:  ADDFSR 01,FSR0
2B9B:  MOVF   00,W
2B9C:  MOVWF  4B
2B9D:  ADDFSR 01,FSR0
2B9E:  MOVF   00,W
2B9F:  MOVWF  4C
2BA0:  ADDFSR 3D,FSR0
2BA1:  MOVLW  B0
2BA2:  MOVLB  03
2BA3:  MOVWF  11
2BA4:  MOVLW  05
2BA5:  MOVWF  12
2BA6:  BCF    03.0
2BA7:  MOVLW  25
2BA8:  MOVLB  11
2BA9:  MOVWF  51
2BAA:  MOVLP  08
2BAB:  MOVLB  00
2BAC:  CALL   2EF
2BAD:  MOVLP  28
2BAE:  MOVLB  11
2BAF:  MOVF   4C,W
2BB0:  MOVWF  51
2BB1:  MOVLW  37
2BB2:  MOVWF  52
2BB3:  MOVLP  08
2BB4:  MOVLB  00
2BB5:  CALL   6A2
2BB6:  MOVLP  28
2BB7:  MOVLB  11
2BB8:  MOVF   4B,W
2BB9:  MOVWF  51
2BBA:  MOVLW  37
2BBB:  MOVWF  52
2BBC:  MOVLP  08
2BBD:  MOVLB  00
2BBE:  CALL   6A2
2BBF:  MOVLP  28
2BC0:  MOVLB  11
2BC1:  MOVF   4A,W
2BC2:  MOVWF  51
2BC3:  MOVLW  37
2BC4:  MOVWF  52
2BC5:  MOVLP  08
2BC6:  MOVLB  00
2BC7:  CALL   6A2
2BC8:  MOVLP  28
2BC9:  MOVLB  11
2BCA:  MOVF   49,W
2BCB:  MOVWF  51
2BCC:  MOVLW  37
2BCD:  MOVWF  52
2BCE:  MOVLP  08
2BCF:  MOVLB  00
2BD0:  CALL   6A2
2BD1:  MOVLP  28
2BD2:  MOVLW  0D
2BD3:  MOVLB  13
2BD4:  MOVWF  2B
2BD5:  MOVLP  00
2BD6:  MOVLB  00
2BD7:  CALL   7CB
2BD8:  MOVLP  28
2BD9:  MOVLW  0A
2BDA:  MOVLB  13
2BDB:  MOVWF  2B
2BDC:  MOVLP  00
2BDD:  MOVLB  00
2BDE:  CALL   7CB
2BDF:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
2BE0:  MOVLB  11
2BE1:  MOVF   35,W
2BE2:  MOVWF  7A
2BE3:  MOVF   34,W
2BE4:  MOVWF  04
2BE5:  MOVF   35,W
2BE6:  MOVWF  05
2BE7:  MOVF   00,W
2BE8:  MOVWF  49
2BE9:  ADDFSR 01,FSR0
2BEA:  MOVF   00,W
2BEB:  MOVWF  4A
2BEC:  ADDFSR 01,FSR0
2BED:  MOVF   00,W
2BEE:  MOVWF  4B
2BEF:  ADDFSR 01,FSR0
2BF0:  MOVF   00,W
2BF1:  MOVWF  4C
2BF2:  ADDFSR 3D,FSR0
2BF3:  MOVLW  C6
2BF4:  MOVLB  03
2BF5:  MOVWF  11
2BF6:  MOVLW  05
2BF7:  MOVWF  12
2BF8:  BCF    03.0
2BF9:  MOVLW  25
2BFA:  MOVLB  11
2BFB:  MOVWF  51
2BFC:  MOVLP  08
2BFD:  MOVLB  00
2BFE:  CALL   2EF
2BFF:  MOVLP  28
2C00:  MOVLB  11
2C01:  MOVF   4C,W
2C02:  MOVWF  51
2C03:  MOVLW  37
2C04:  MOVWF  52
2C05:  MOVLP  08
2C06:  MOVLB  00
2C07:  CALL   6A2
2C08:  MOVLP  28
2C09:  MOVLB  11
2C0A:  MOVF   4B,W
2C0B:  MOVWF  51
2C0C:  MOVLW  37
2C0D:  MOVWF  52
2C0E:  MOVLP  08
2C0F:  MOVLB  00
2C10:  CALL   6A2
2C11:  MOVLP  28
2C12:  MOVLB  11
2C13:  MOVF   4A,W
2C14:  MOVWF  51
2C15:  MOVLW  37
2C16:  MOVWF  52
2C17:  MOVLP  08
2C18:  MOVLB  00
2C19:  CALL   6A2
2C1A:  MOVLP  28
2C1B:  MOVLB  11
2C1C:  MOVF   49,W
2C1D:  MOVWF  51
2C1E:  MOVLW  37
2C1F:  MOVWF  52
2C20:  MOVLP  08
2C21:  MOVLB  00
2C22:  CALL   6A2
2C23:  MOVLP  28
2C24:  MOVLW  0D
2C25:  MOVLB  13
2C26:  MOVWF  2B
2C27:  MOVLP  00
2C28:  MOVLB  00
2C29:  CALL   7CB
2C2A:  MOVLP  28
2C2B:  MOVLW  0A
2C2C:  MOVLB  13
2C2D:  MOVWF  2B
2C2E:  MOVLP  00
2C2F:  MOVLB  00
2C30:  CALL   7CB
2C31:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
2C32:  MOVLB  11
2C33:  MOVF   37,W
2C34:  MOVWF  7A
2C35:  MOVF   36,W
2C36:  MOVWF  04
2C37:  MOVF   37,W
2C38:  MOVWF  05
2C39:  MOVF   00,W
2C3A:  MOVWF  49
2C3B:  ADDFSR 01,FSR0
2C3C:  MOVF   00,W
2C3D:  MOVWF  4A
2C3E:  ADDFSR 01,FSR0
2C3F:  MOVF   00,W
2C40:  MOVWF  4B
2C41:  ADDFSR 01,FSR0
2C42:  MOVF   00,W
2C43:  MOVWF  4C
2C44:  ADDFSR 3D,FSR0
2C45:  MOVLW  DC
2C46:  MOVLB  03
2C47:  MOVWF  11
2C48:  MOVLW  05
2C49:  MOVWF  12
2C4A:  BCF    03.0
2C4B:  MOVLW  25
2C4C:  MOVLB  11
2C4D:  MOVWF  51
2C4E:  MOVLP  08
2C4F:  MOVLB  00
2C50:  CALL   2EF
2C51:  MOVLP  28
2C52:  MOVLW  41
2C53:  MOVWF  04
2C54:  MOVLB  11
2C55:  MOVF   4C,W
2C56:  MOVWF  54
2C57:  MOVF   4B,W
2C58:  MOVWF  53
2C59:  MOVF   4A,W
2C5A:  MOVWF  52
2C5B:  MOVF   49,W
2C5C:  MOVWF  51
2C5D:  MOVLP  08
2C5E:  MOVLB  00
2C5F:  CALL   39C
2C60:  MOVLP  28
2C61:  MOVLW  F0
2C62:  MOVLB  03
2C63:  MOVWF  11
2C64:  MOVLW  05
2C65:  MOVWF  12
2C66:  BCF    03.0
2C67:  MOVLW  04
2C68:  MOVLB  11
2C69:  MOVWF  51
2C6A:  MOVLP  08
2C6B:  MOVLB  00
2C6C:  CALL   2EF
2C6D:  MOVLP  28
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
2C6E:  MOVLB  11
2C6F:  MOVF   31,W
2C70:  MOVWF  7A
2C71:  MOVF   30,W
2C72:  MOVWF  04
2C73:  MOVF   31,W
2C74:  MOVWF  05
2C75:  MOVF   00,W
2C76:  MOVWF  49
2C77:  ADDFSR 01,FSR0
2C78:  MOVF   00,W
2C79:  MOVWF  4A
2C7A:  ADDFSR 01,FSR0
2C7B:  MOVF   00,W
2C7C:  MOVWF  4B
2C7D:  ADDFSR 01,FSR0
2C7E:  MOVF   00,W
2C7F:  MOVWF  4C
2C80:  ADDFSR 3D,FSR0
2C81:  MOVLB  0D
2C82:  MOVF   49,W
2C83:  MOVLB  13
2C84:  MOVWF  2A
2C85:  MOVLB  0D
2C86:  MOVF   48,W
2C87:  MOVLB  13
2C88:  MOVWF  29
2C89:  MOVLB  0D
2C8A:  MOVF   47,W
2C8B:  MOVLB  13
2C8C:  MOVWF  28
2C8D:  MOVLB  0D
2C8E:  MOVF   46,W
2C8F:  MOVLB  13
2C90:  MOVWF  27
2C91:  MOVLB  11
2C92:  MOVF   4C,W
2C93:  MOVLB  13
2C94:  MOVWF  2E
2C95:  MOVLB  11
2C96:  MOVF   4B,W
2C97:  MOVLB  13
2C98:  MOVWF  2D
2C99:  MOVLB  11
2C9A:  MOVF   4A,W
2C9B:  MOVLB  13
2C9C:  MOVWF  2C
2C9D:  MOVLB  11
2C9E:  MOVF   49,W
2C9F:  MOVLB  13
2CA0:  MOVWF  2B
2CA1:  MOVLW  25
2CA2:  MOVWF  30
2CA3:  MOVLW  6C
2CA4:  MOVWF  2F
2CA5:  CLRF   34
2CA6:  CLRF   33
2CA7:  CLRF   32
2CA8:  MOVLW  04
2CA9:  MOVWF  31
2CAA:  MOVLP  08
2CAB:  MOVLB  00
2CAC:  CALL   228
2CAD:  MOVLP  28
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
2CAE:  MOVLB  11
2CAF:  MOVF   3A,W
2CB0:  MOVWF  04
2CB1:  MOVF   3B,W
2CB2:  MOVWF  05
2CB3:  CLRF   4E
2CB4:  CLRF   4D
2CB5:  CLRF   4C
2CB6:  MOVF   3F,W
2CB7:  MOVWF  4B
2CB8:  MOVWF  4E
2CB9:  CLRF   4B
2CBA:  CLRF   4C
2CBB:  CLRF   4D
2CBC:  CLRF   53
2CBD:  CLRF   52
2CBE:  CLRF   51
2CBF:  MOVF   51,W
2CC0:  MOVWF  7A
2CC1:  CLRF   77
2CC2:  CLRF   78
2CC3:  MOVF   77,W
2CC4:  IORWF  4B,F
2CC5:  MOVF   78,W
2CC6:  IORWF  4C,F
2CC7:  MOVF   3E,W
2CC8:  IORWF  4D,F
2CC9:  MOVF   51,W
2CCA:  IORWF  4E,F
2CCB:  CLRF   53
2CCC:  CLRF   52
2CCD:  CLRF   51
2CCE:  MOVF   52,W
2CCF:  MOVWF  7A
2CD0:  MOVF   51,W
2CD1:  MOVWF  79
2CD2:  MOVF   3D,W
2CD3:  MOVWF  78
2CD4:  CLRF   77
2CD5:  MOVF   77,W
2CD6:  IORWF  4B,F
2CD7:  MOVF   3D,W
2CD8:  IORWF  4C,F
2CD9:  MOVF   51,W
2CDA:  IORWF  4D,F
2CDB:  MOVF   52,W
2CDC:  IORWF  4E,F
2CDD:  CLRF   78
2CDE:  CLRF   79
2CDF:  CLRF   7A
2CE0:  MOVF   3C,W
2CE1:  IORWF  4B,W
2CE2:  MOVWF  77
2CE3:  MOVF   78,W
2CE4:  IORWF  4C,W
2CE5:  MOVWF  78
2CE6:  MOVF   79,W
2CE7:  IORWF  4D,W
2CE8:  MOVWF  79
2CE9:  MOVF   7A,W
2CEA:  IORWF  4E,W
2CEB:  MOVWF  7A
2CEC:  MOVF   77,W
2CED:  MOVWF  00
2CEE:  MOVF   78,W
2CEF:  MOVWI  W,[FSR0+01]
2CF0:  MOVF   79,W
2CF1:  MOVWI  W,[FSR0+02]
2CF2:  MOVF   7A,W
2CF3:  MOVWI  W,[FSR0+03]
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
2CF4:  MOVF   38,W
2CF5:  MOVWF  49
2CF6:  MOVF   39,W
2CF7:  MOVWF  4A
2CF8:  MOVF   31,W
2CF9:  MOVWF  7A
2CFA:  MOVF   30,W
2CFB:  MOVWF  04
2CFC:  MOVF   31,W
2CFD:  MOVWF  05
2CFE:  MOVF   00,W
2CFF:  MOVWF  4B
2D00:  ADDFSR 01,FSR0
2D01:  MOVF   00,W
2D02:  MOVWF  4C
2D03:  ADDFSR 01,FSR0
2D04:  MOVF   00,W
2D05:  MOVWF  4D
2D06:  ADDFSR 01,FSR0
2D07:  MOVF   00,W
2D08:  MOVWF  4E
2D09:  ADDFSR 3D,FSR0
2D0A:  MOVLW  04
2D0B:  ADDWF  4B,F
2D0C:  MOVLW  00
2D0D:  ADDWFC 4C,F
2D0E:  ADDWFC 4D,F
2D0F:  ADDWFC 4E,F
2D10:  MOVLB  0D
2D11:  MOVF   49,W
2D12:  MOVLB  11
2D13:  MOVWF  52
2D14:  MOVLB  0D
2D15:  MOVF   48,W
2D16:  MOVLB  11
2D17:  MOVWF  51
2D18:  MOVLB  0D
2D19:  MOVF   47,W
2D1A:  MOVLB  11
2D1B:  MOVWF  50
2D1C:  MOVLB  0D
2D1D:  MOVF   46,W
2D1E:  MOVLB  11
2D1F:  MOVWF  4F
2D20:  MOVF   4E,W
2D21:  MOVWF  56
2D22:  MOVF   4D,W
2D23:  MOVWF  55
2D24:  MOVF   4C,W
2D25:  MOVWF  54
2D26:  MOVF   4B,W
2D27:  MOVWF  53
2D28:  MOVLB  00
2D29:  GOTO   195
2D2A:  MOVLB  11
2D2B:  MOVF   4A,W
2D2C:  MOVWF  05
2D2D:  MOVF   49,W
2D2E:  MOVWF  04
2D2F:  MOVF   78,W
2D30:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
2D31:  MOVLW  F3
2D32:  MOVLB  03
2D33:  MOVWF  11
2D34:  MOVLW  05
2D35:  MOVWF  12
2D36:  MOVLP  08
2D37:  MOVLB  00
2D38:  CALL   000
2D39:  MOVLP  28
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
2D3A:  MOVLB  11
2D3B:  MOVF   3A,W
2D3C:  MOVWF  04
2D3D:  MOVF   3B,W
2D3E:  MOVWF  05
2D3F:  MOVF   00,W
2D40:  MOVWF  49
2D41:  ADDFSR 01,FSR0
2D42:  MOVF   00,W
2D43:  MOVWF  4A
2D44:  ADDFSR 01,FSR0
2D45:  MOVF   00,W
2D46:  MOVWF  4B
2D47:  ADDFSR 01,FSR0
2D48:  MOVF   00,W
2D49:  MOVWF  4C
2D4A:  ADDFSR 3D,FSR0
2D4B:  MOVF   31,W
2D4C:  MOVWF  7A
2D4D:  MOVF   30,W
2D4E:  MOVWF  04
2D4F:  MOVF   31,W
2D50:  MOVWF  05
2D51:  MOVF   00,W
2D52:  MOVWF  4D
2D53:  ADDFSR 01,FSR0
2D54:  MOVF   00,W
2D55:  MOVWF  4E
2D56:  ADDFSR 01,FSR0
2D57:  MOVF   00,W
2D58:  MOVWF  4F
2D59:  ADDFSR 01,FSR0
2D5A:  MOVF   00,W
2D5B:  MOVWF  50
2D5C:  ADDFSR 3D,FSR0
2D5D:  MOVLW  FC
2D5E:  MOVLB  03
2D5F:  MOVWF  11
2D60:  MOVLW  05
2D61:  MOVWF  12
2D62:  BCF    03.0
2D63:  MOVLW  0C
2D64:  MOVLB  11
2D65:  MOVWF  51
2D66:  MOVLP  08
2D67:  MOVLB  00
2D68:  CALL   2EF
2D69:  MOVLP  28
2D6A:  MOVLW  41
2D6B:  MOVWF  04
2D6C:  MOVLB  11
2D6D:  MOVF   4C,W
2D6E:  MOVWF  54
2D6F:  MOVF   4B,W
2D70:  MOVWF  53
2D71:  MOVF   4A,W
2D72:  MOVWF  52
2D73:  MOVF   49,W
2D74:  MOVWF  51
2D75:  MOVLP  08
2D76:  MOVLB  00
2D77:  CALL   39C
2D78:  MOVLP  28
2D79:  MOVLW  03
2D7A:  MOVLB  03
2D7B:  MOVWF  11
2D7C:  MOVLW  06
2D7D:  MOVWF  12
2D7E:  BSF    03.0
2D7F:  MOVLW  08
2D80:  MOVLB  11
2D81:  MOVWF  51
2D82:  MOVLP  08
2D83:  MOVLB  00
2D84:  CALL   2EF
2D85:  MOVLP  28
2D86:  MOVLB  11
2D87:  MOVF   50,W
2D88:  MOVWF  51
2D89:  MOVLW  37
2D8A:  MOVWF  52
2D8B:  MOVLP  08
2D8C:  MOVLB  00
2D8D:  CALL   6A2
2D8E:  MOVLP  28
2D8F:  MOVLB  11
2D90:  MOVF   4F,W
2D91:  MOVWF  51
2D92:  MOVLW  37
2D93:  MOVWF  52
2D94:  MOVLP  08
2D95:  MOVLB  00
2D96:  CALL   6A2
2D97:  MOVLP  28
2D98:  MOVLB  11
2D99:  MOVF   4E,W
2D9A:  MOVWF  51
2D9B:  MOVLW  37
2D9C:  MOVWF  52
2D9D:  MOVLP  08
2D9E:  MOVLB  00
2D9F:  CALL   6A2
2DA0:  MOVLP  28
2DA1:  MOVLB  11
2DA2:  MOVF   4D,W
2DA3:  MOVWF  51
2DA4:  MOVLW  37
2DA5:  MOVWF  52
2DA6:  MOVLP  08
2DA7:  MOVLB  00
2DA8:  CALL   6A2
2DA9:  MOVLP  28
2DAA:  MOVLW  29
2DAB:  MOVLB  13
2DAC:  MOVWF  2B
2DAD:  MOVLP  00
2DAE:  MOVLB  00
2DAF:  CALL   7CB
2DB0:  MOVLP  28
2DB1:  MOVLW  0D
2DB2:  MOVLB  13
2DB3:  MOVWF  2B
2DB4:  MOVLP  00
2DB5:  MOVLB  00
2DB6:  CALL   7CB
2DB7:  MOVLP  28
2DB8:  MOVLW  0A
2DB9:  MOVLB  13
2DBA:  MOVWF  2B
2DBB:  MOVLP  00
2DBC:  MOVLB  00
2DBD:  CALL   7CB
2DBE:  MOVLP  28
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
2DBF:  MOVLB  11
2DC0:  MOVF   38,W
2DC1:  MOVWF  04
2DC2:  MOVF   39,W
2DC3:  MOVWF  05
2DC4:  MOVF   00,W
2DC5:  MOVWF  49
2DC6:  MOVF   31,W
2DC7:  MOVWF  7A
2DC8:  MOVF   30,W
2DC9:  MOVWF  04
2DCA:  MOVF   31,W
2DCB:  MOVWF  05
2DCC:  MOVF   00,W
2DCD:  MOVWF  4A
2DCE:  ADDFSR 01,FSR0
2DCF:  MOVF   00,W
2DD0:  MOVWF  4B
2DD1:  ADDFSR 01,FSR0
2DD2:  MOVF   00,W
2DD3:  MOVWF  4C
2DD4:  ADDFSR 01,FSR0
2DD5:  MOVF   00,W
2DD6:  MOVWF  4D
2DD7:  ADDFSR 3D,FSR0
2DD8:  MOVLW  04
2DD9:  ADDWF  4A,F
2DDA:  MOVLW  00
2DDB:  ADDWFC 4B,F
2DDC:  ADDWFC 4C,F
2DDD:  ADDWFC 4D,F
2DDE:  MOVLW  0C
2DDF:  MOVLB  03
2DE0:  MOVWF  11
2DE1:  MOVLW  06
2DE2:  MOVWF  12
2DE3:  BCF    03.0
2DE4:  MOVLW  0C
2DE5:  MOVLB  11
2DE6:  MOVWF  51
2DE7:  MOVLP  08
2DE8:  MOVLB  00
2DE9:  CALL   2EF
2DEA:  MOVLP  28
2DEB:  MOVLB  11
2DEC:  MOVF   49,W
2DED:  MOVWF  4E
2DEE:  MOVLW  18
2DEF:  MOVWF  4F
2DF0:  MOVLP  20
2DF1:  MOVLB  00
2DF2:  CALL   78B
2DF3:  MOVLP  28
2DF4:  MOVLW  13
2DF5:  MOVLB  03
2DF6:  MOVWF  11
2DF7:  MOVLW  06
2DF8:  MOVWF  12
2DF9:  BCF    03.0
2DFA:  MOVLW  09
2DFB:  MOVLB  11
2DFC:  MOVWF  51
2DFD:  MOVLP  08
2DFE:  MOVLB  00
2DFF:  CALL   2EF
2E00:  MOVLP  28
2E01:  MOVLB  11
2E02:  MOVF   4D,W
2E03:  MOVWF  51
2E04:  MOVLW  37
2E05:  MOVWF  52
2E06:  MOVLP  08
2E07:  MOVLB  00
2E08:  CALL   6A2
2E09:  MOVLP  28
2E0A:  MOVLB  11
2E0B:  MOVF   4C,W
2E0C:  MOVWF  51
2E0D:  MOVLW  37
2E0E:  MOVWF  52
2E0F:  MOVLP  08
2E10:  MOVLB  00
2E11:  CALL   6A2
2E12:  MOVLP  28
2E13:  MOVLB  11
2E14:  MOVF   4B,W
2E15:  MOVWF  51
2E16:  MOVLW  37
2E17:  MOVWF  52
2E18:  MOVLP  08
2E19:  MOVLB  00
2E1A:  CALL   6A2
2E1B:  MOVLP  28
2E1C:  MOVLB  11
2E1D:  MOVF   4A,W
2E1E:  MOVWF  51
2E1F:  MOVLW  37
2E20:  MOVWF  52
2E21:  MOVLP  08
2E22:  MOVLB  00
2E23:  CALL   6A2
2E24:  MOVLP  28
2E25:  MOVLW  1A
2E26:  MOVLB  03
2E27:  MOVWF  11
2E28:  MOVLW  06
2E29:  MOVWF  12
2E2A:  BCF    03.0
2E2B:  MOVLW  05
2E2C:  MOVLB  11
2E2D:  MOVWF  51
2E2E:  MOVLP  08
2E2F:  MOVLB  00
2E30:  CALL   2EF
2E31:  MOVLP  28
2E32:  MOVLP  30
2E33:  GOTO   422 (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
2E34:  MOVLW  1D
2E35:  MOVLB  03
2E36:  MOVWF  11
2E37:  MOVLW  06
2E38:  MOVWF  12
2E39:  MOVLP  08
2E3A:  MOVLB  00
2E3B:  CALL   000
2E3C:  MOVLP  28
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
2E3D:  MOVLB  11
2E3E:  MOVF   2F,W
2E3F:  MOVWF  37
2E40:  MOVF   2E,W
2E41:  MOVWF  36
2E42:  MOVF   2D,W
2E43:  MOVWF  35
2E44:  MOVF   2C,W
2E45:  MOVWF  34
2E46:  MOVF   37,W
2E47:  SUBWF  33,W
2E48:  BTFSS  03.0
2E49:  GOTO   67F
2E4A:  BTFSS  03.2
2E4B:  GOTO   65C
2E4C:  MOVF   36,W
2E4D:  SUBWF  32,W
2E4E:  BTFSS  03.0
2E4F:  GOTO   67F
2E50:  BTFSS  03.2
2E51:  GOTO   65C
2E52:  MOVF   35,W
2E53:  SUBWF  31,W
2E54:  BTFSS  03.0
2E55:  GOTO   67F
2E56:  BTFSS  03.2
2E57:  GOTO   65C
2E58:  MOVF   30,W
2E59:  SUBWF  34,W
2E5A:  BTFSC  03.0
2E5B:  GOTO   67F
....................         subsector_4kByte_erase(smf, addr);
2E5C:  MOVLB  0D
2E5D:  MOVF   49,W
2E5E:  MOVLB  11
2E5F:  MOVWF  47
2E60:  MOVLB  0D
2E61:  MOVF   48,W
2E62:  MOVLB  11
2E63:  MOVWF  46
2E64:  MOVLB  0D
2E65:  MOVF   47,W
2E66:  MOVLB  11
2E67:  MOVWF  45
2E68:  MOVLB  0D
2E69:  MOVF   46,W
2E6A:  MOVLB  11
2E6B:  MOVWF  44
2E6C:  MOVF   37,W
2E6D:  MOVWF  4B
2E6E:  MOVF   36,W
2E6F:  MOVWF  4A
2E70:  MOVF   35,W
2E71:  MOVWF  49
2E72:  MOVF   34,W
2E73:  MOVWF  48
2E74:  MOVLP  18
2E75:  MOVLB  00
2E76:  CALL   2AC
2E77:  MOVLP  28
2E78:  MOVLW  10
2E79:  MOVLB  11
2E7A:  ADDWF  35,F
2E7B:  MOVLW  00
2E7C:  ADDWFC 36,F
2E7D:  ADDWFC 37,F
2E7E:  GOTO   646
2E7F:  MOVLP  30
2E80:  MOVLB  00
2E81:  GOTO   4B5 (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
2E82:  MOVLB  11
2E83:  CLRF   38
2E84:  MOVF   2D,W
2E85:  ANDLW  F0
2E86:  MOVWF  39
2E87:  CLRF   3A
2E88:  CLRF   3B
2E89:  MOVF   30,W
2E8A:  ADDWF  2C,W
2E8B:  MOVWF  44
2E8C:  MOVF   31,W
2E8D:  ADDWFC 2D,W
2E8E:  MOVWF  45
2E8F:  MOVF   32,W
2E90:  ADDWFC 2E,W
2E91:  MOVWF  46
2E92:  MOVF   33,W
2E93:  ADDWFC 2F,W
2E94:  MOVWF  47
2E95:  MOVLW  FF
2E96:  ADDWF  44,F
2E97:  MOVLW  0F
2E98:  ADDWFC 45,F
2E99:  MOVLW  00
2E9A:  ADDWFC 46,F
2E9B:  ADDWFC 47,F
2E9C:  CLRF   3C
2E9D:  MOVF   45,W
2E9E:  ANDLW  F0
2E9F:  MOVWF  3D
2EA0:  CLRF   3E
2EA1:  CLRF   3F
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
2EA2:  MOVF   3B,W
2EA3:  MOVWF  43
2EA4:  MOVF   3A,W
2EA5:  MOVWF  42
2EA6:  MOVF   39,W
2EA7:  MOVWF  41
2EA8:  MOVF   38,W
2EA9:  MOVWF  40
2EAA:  MOVF   43,W
2EAB:  SUBWF  3F,W
2EAC:  BTFSS  03.0
2EAD:  GOTO   6F9
2EAE:  BTFSS  03.2
2EAF:  GOTO   6C0
2EB0:  MOVF   42,W
2EB1:  SUBWF  3E,W
2EB2:  BTFSS  03.0
2EB3:  GOTO   6F9
2EB4:  BTFSS  03.2
2EB5:  GOTO   6C0
2EB6:  MOVF   41,W
2EB7:  SUBWF  3D,W
2EB8:  BTFSS  03.0
2EB9:  GOTO   6F9
2EBA:  BTFSS  03.2
2EBB:  GOTO   6C0
2EBC:  MOVF   3C,W
2EBD:  SUBWF  40,W
2EBE:  BTFSC  03.0
2EBF:  GOTO   6F9
2EC0:  MOVF   43,W
2EC1:  SUBWF  37,W
2EC2:  BTFSS  03.0
2EC3:  GOTO   6F9
2EC4:  BTFSS  03.2
2EC5:  GOTO   6D6
2EC6:  MOVF   42,W
2EC7:  SUBWF  36,W
2EC8:  BTFSS  03.0
2EC9:  GOTO   6F9
2ECA:  BTFSS  03.2
2ECB:  GOTO   6D6
2ECC:  MOVF   41,W
2ECD:  SUBWF  35,W
2ECE:  BTFSS  03.0
2ECF:  GOTO   6F9
2ED0:  BTFSS  03.2
2ED1:  GOTO   6D6
2ED2:  MOVF   34,W
2ED3:  SUBWF  40,W
2ED4:  BTFSC  03.0
2ED5:  GOTO   6F9
....................         subsector_4kByte_erase(smf, addr);
2ED6:  MOVLB  0D
2ED7:  MOVF   49,W
2ED8:  MOVLB  11
2ED9:  MOVWF  47
2EDA:  MOVLB  0D
2EDB:  MOVF   48,W
2EDC:  MOVLB  11
2EDD:  MOVWF  46
2EDE:  MOVLB  0D
2EDF:  MOVF   47,W
2EE0:  MOVLB  11
2EE1:  MOVWF  45
2EE2:  MOVLB  0D
2EE3:  MOVF   46,W
2EE4:  MOVLB  11
2EE5:  MOVWF  44
2EE6:  MOVF   43,W
2EE7:  MOVWF  4B
2EE8:  MOVF   42,W
2EE9:  MOVWF  4A
2EEA:  MOVF   41,W
2EEB:  MOVWF  49
2EEC:  MOVF   40,W
2EED:  MOVWF  48
2EEE:  MOVLP  18
2EEF:  MOVLB  00
2EF0:  CALL   2AC
2EF1:  MOVLP  28
2EF2:  MOVLW  10
2EF3:  MOVLB  11
2EF4:  ADDWF  41,F
2EF5:  MOVLW  00
2EF6:  ADDWFC 42,F
2EF7:  ADDWFC 43,F
2EF8:  GOTO   6AA
2EF9:  MOVLP  30
2EFA:  MOVLB  00
2EFB:  GOTO   4F6 (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
2EFC:  MOVLB  11
2EFD:  MOVF   33,W
2EFE:  MOVWF  3F
2EFF:  MOVF   32,W
2F00:  MOVWF  3E
2F01:  MOVF   31,W
2F02:  MOVWF  3D
2F03:  MOVF   30,W
2F04:  MOVWF  3C
2F05:  MOVF   2F,W
2F06:  MOVWF  43
2F07:  MOVF   2E,W
2F08:  MOVWF  42
2F09:  MOVF   2D,W
2F0A:  MOVWF  41
2F0B:  MOVF   2C,W
2F0C:  MOVWF  40
2F0D:  MOVF   37,W
2F0E:  MOVWF  47
2F0F:  MOVF   36,W
2F10:  MOVWF  46
2F11:  MOVF   35,W
2F12:  MOVWF  45
2F13:  MOVF   34,W
2F14:  MOVWF  44
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
2F15:  MOVF   3C,F
2F16:  BTFSS  03.2
2F17:  GOTO   721
2F18:  MOVF   3D,F
2F19:  BTFSS  03.2
2F1A:  GOTO   721
2F1B:  MOVF   3E,F
2F1C:  BTFSS  03.2
2F1D:  GOTO   721
2F1E:  MOVF   3F,F
2F1F:  BTFSC  03.2
2F20:  GOTO   7D3
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
2F21:  MOVF   3F,F
2F22:  BTFSS  03.2
2F23:  GOTO   72E
2F24:  MOVF   3E,F
2F25:  BTFSS  03.2
2F26:  GOTO   72E
2F27:  MOVF   3D,F
2F28:  BTFSS  03.2
2F29:  GOTO   72E
2F2A:  MOVF   3C,W
2F2B:  SUBLW  40
2F2C:  BTFSC  03.0
2F2D:  GOTO   731
2F2E:  CLRF   7A
2F2F:  MOVLW  40
2F30:  GOTO   734
2F31:  MOVF   3D,W
2F32:  MOVWF  7A
2F33:  MOVF   3C,W
2F34:  MOVWF  48
2F35:  MOVF   7A,W
2F36:  MOVWF  49
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
2F37:  MOVLB  0D
2F38:  MOVF   45,W
2F39:  MOVLB  13
2F3A:  MOVWF  2A
2F3B:  MOVLB  0D
2F3C:  MOVF   44,W
2F3D:  MOVLB  13
2F3E:  MOVWF  29
2F3F:  MOVLB  0D
2F40:  MOVF   43,W
2F41:  MOVLB  13
2F42:  MOVWF  28
2F43:  MOVLB  0D
2F44:  MOVF   42,W
2F45:  MOVLB  13
2F46:  MOVWF  27
2F47:  MOVLB  11
2F48:  MOVF   43,W
2F49:  MOVLB  13
2F4A:  MOVWF  2E
2F4B:  MOVLB  11
2F4C:  MOVF   42,W
2F4D:  MOVLB  13
2F4E:  MOVWF  2D
2F4F:  MOVLB  11
2F50:  MOVF   41,W
2F51:  MOVLB  13
2F52:  MOVWF  2C
2F53:  MOVLB  11
2F54:  MOVF   40,W
2F55:  MOVLB  13
2F56:  MOVWF  2B
2F57:  MOVLB  11
2F58:  MOVF   39,W
2F59:  MOVLB  13
2F5A:  MOVWF  30
2F5B:  MOVLB  11
2F5C:  MOVF   38,W
2F5D:  MOVLB  13
2F5E:  MOVWF  2F
2F5F:  CLRF   34
2F60:  CLRF   33
2F61:  MOVLB  11
2F62:  MOVF   49,W
2F63:  MOVLB  13
2F64:  MOVWF  32
2F65:  MOVLB  11
2F66:  MOVF   48,W
2F67:  MOVLB  13
2F68:  MOVWF  31
2F69:  MOVLP  08
2F6A:  MOVLB  00
2F6B:  CALL   228
2F6C:  MOVLP  28
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
2F6D:  MOVLB  0D
2F6E:  MOVF   49,W
2F6F:  MOVLB  13
2F70:  MOVWF  2A
2F71:  MOVLB  0D
2F72:  MOVF   48,W
2F73:  MOVLB  13
2F74:  MOVWF  29
2F75:  MOVLB  0D
2F76:  MOVF   47,W
2F77:  MOVLB  13
2F78:  MOVWF  28
2F79:  MOVLB  0D
2F7A:  MOVF   46,W
2F7B:  MOVLB  13
2F7C:  MOVWF  27
2F7D:  MOVLB  11
2F7E:  MOVF   47,W
2F7F:  MOVLB  13
2F80:  MOVWF  2E
2F81:  MOVLB  11
2F82:  MOVF   46,W
2F83:  MOVLB  13
2F84:  MOVWF  2D
2F85:  MOVLB  11
2F86:  MOVF   45,W
2F87:  MOVLB  13
2F88:  MOVWF  2C
2F89:  MOVLB  11
2F8A:  MOVF   44,W
2F8B:  MOVLB  13
2F8C:  MOVWF  2B
2F8D:  MOVLB  11
2F8E:  MOVF   39,W
2F8F:  MOVLB  13
2F90:  MOVWF  30
2F91:  MOVLB  11
2F92:  MOVF   38,W
2F93:  MOVLB  13
2F94:  MOVWF  2F
2F95:  MOVLB  11
2F96:  MOVF   49,W
2F97:  MOVLB  13
2F98:  MOVWF  32
2F99:  MOVLB  11
2F9A:  MOVF   48,W
2F9B:  MOVLB  13
2F9C:  MOVWF  31
2F9D:  MOVLP  10
2F9E:  MOVLB  00
2F9F:  CALL   050
2FA0:  MOVLP  28
.................... 
....................         src_addr += chunk;
2FA1:  MOVLB  11
2FA2:  MOVF   48,W
2FA3:  ADDWF  40,F
2FA4:  MOVF   49,W
2FA5:  ADDWFC 41,F
2FA6:  MOVLW  00
2FA7:  ADDWFC 42,F
2FA8:  ADDWFC 43,F
....................         data_write_addr += chunk;
2FA9:  MOVF   48,W
2FAA:  ADDWF  44,F
2FAB:  MOVF   49,W
2FAC:  ADDWFC 45,F
2FAD:  MOVLW  00
2FAE:  ADDWFC 46,F
2FAF:  ADDWFC 47,F
....................         *used_size += chunk;
2FB0:  MOVF   3A,W
2FB1:  MOVWF  04
2FB2:  MOVF   3B,W
2FB3:  MOVWF  05
2FB4:  MOVF   48,W
2FB5:  ADDWF  00,W
2FB6:  MOVWF  77
2FB7:  ADDFSR 01,FSR0
2FB8:  MOVF   49,W
2FB9:  ADDWFC 00,W
2FBA:  MOVWF  78
2FBB:  ADDFSR 01,FSR0
2FBC:  MOVLW  00
2FBD:  ADDWFC 00,W
2FBE:  MOVWF  79
2FBF:  ADDFSR 01,FSR0
2FC0:  MOVLW  00
2FC1:  ADDWFC 00,W
2FC2:  MOVWF  7A
2FC3:  MOVF   77,W
2FC4:  MOVWI  W,[FSR0-03]
2FC5:  MOVF   78,W
2FC6:  MOVWI  W,[FSR0-02]
2FC7:  MOVF   79,W
2FC8:  MOVWI  W,[FSR0-01]
2FC9:  MOVF   7A,W
2FCA:  MOVWI  W,[FSR0+00]
....................         remaining -= chunk;
2FCB:  MOVF   48,W
2FCC:  SUBWF  3C,F
2FCD:  MOVF   49,W
2FCE:  SUBWFC 3D,F
2FCF:  MOVLW  00
2FD0:  SUBWFC 3E,F
2FD1:  SUBWFC 3F,F
2FD2:  GOTO   715
....................     }
2FD3:  MOVLP  30
2FD4:  MOVLB  00
2FD5:  GOTO   52A (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
31C5:  MOVLW  38
31C6:  MOVLB  03
31C7:  MOVWF  11
31C8:  MOVLW  06
31C9:  MOVWF  12
31CA:  MOVLP  08
31CB:  MOVLB  00
31CC:  CALL   000
31CD:  MOVLP  30
....................     subsector_4kByte_erase(smf, base_addr);
31CE:  MOVLB  0D
31CF:  MOVF   49,W
31D0:  MOVLB  11
31D1:  MOVWF  47
31D2:  MOVLB  0D
31D3:  MOVF   48,W
31D4:  MOVLB  11
31D5:  MOVWF  46
31D6:  MOVLB  0D
31D7:  MOVF   47,W
31D8:  MOVLB  11
31D9:  MOVWF  45
31DA:  MOVLB  0D
31DB:  MOVF   46,W
31DC:  MOVLB  11
31DD:  MOVWF  44
31DE:  MOVF   2F,W
31DF:  MOVWF  4B
31E0:  MOVF   2E,W
31E1:  MOVWF  4A
31E2:  MOVF   2D,W
31E3:  MOVWF  49
31E4:  MOVF   2C,W
31E5:  MOVWF  48
31E6:  MOVLP  18
31E7:  MOVLB  00
31E8:  CALL   2AC
31E9:  MOVLP  30
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
31EA:  MOVLB  11
31EB:  MOVF   33,W
31EC:  MOVWF  3E
31ED:  MOVF   32,W
31EE:  MOVWF  3D
31EF:  MOVF   31,W
31F0:  MOVWF  3C
31F1:  MOVF   30,W
31F2:  MOVWF  3B
31F3:  CLRF   3C
31F4:  CLRF   3D
31F5:  CLRF   3E
31F6:  MOVLB  0D
31F7:  MOVF   49,W
31F8:  MOVLB  11
31F9:  MOVWF  46
31FA:  MOVLB  0D
31FB:  MOVF   48,W
31FC:  MOVLB  11
31FD:  MOVWF  45
31FE:  MOVLB  0D
31FF:  MOVF   47,W
3200:  MOVLB  11
3201:  MOVWF  44
3202:  MOVLB  0D
3203:  MOVF   46,W
3204:  MOVLB  11
3205:  MOVWF  43
3206:  MOVF   2F,W
3207:  MOVWF  4A
3208:  MOVF   2E,W
3209:  MOVWF  49
320A:  MOVF   2D,W
320B:  MOVWF  48
320C:  MOVF   2C,W
320D:  MOVWF  47
320E:  MOVF   30,W
320F:  MOVWF  4B
3210:  MOVLB  00
3211:  CALL   000
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
3212:  MOVLW  01
3213:  MOVLB  11
3214:  ADDWF  2C,W
3215:  MOVWF  3A
3216:  MOVLW  00
3217:  ADDWFC 2D,W
3218:  MOVWF  3B
3219:  MOVLW  00
321A:  ADDWFC 2E,W
321B:  MOVWF  3C
321C:  MOVLW  00
321D:  ADDWFC 2F,W
321E:  MOVWF  3D
321F:  MOVF   31,W
3220:  MOVWF  3F
3221:  MOVF   32,W
3222:  MOVWF  40
3223:  MOVF   33,W
3224:  MOVWF  41
3225:  CLRF   42
3226:  CLRF   40
3227:  CLRF   41
3228:  CLRF   42
3229:  MOVLB  0D
322A:  MOVF   49,W
322B:  MOVLB  11
322C:  MOVWF  46
322D:  MOVLB  0D
322E:  MOVF   48,W
322F:  MOVLB  11
3230:  MOVWF  45
3231:  MOVLB  0D
3232:  MOVF   47,W
3233:  MOVLB  11
3234:  MOVWF  44
3235:  MOVLB  0D
3236:  MOVF   46,W
3237:  MOVLB  11
3238:  MOVWF  43
3239:  MOVF   3D,W
323A:  MOVWF  4A
323B:  MOVF   3C,W
323C:  MOVWF  49
323D:  MOVF   3B,W
323E:  MOVWF  48
323F:  MOVF   3A,W
3240:  MOVWF  47
3241:  MOVF   31,W
3242:  MOVWF  4B
3243:  MOVLB  00
3244:  CALL   000
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
3245:  MOVLW  02
3246:  MOVLB  11
3247:  ADDWF  2C,W
3248:  MOVWF  3A
3249:  MOVLW  00
324A:  ADDWFC 2D,W
324B:  MOVWF  3B
324C:  MOVLW  00
324D:  ADDWFC 2E,W
324E:  MOVWF  3C
324F:  MOVLW  00
3250:  ADDWFC 2F,W
3251:  MOVWF  3D
3252:  MOVF   32,W
3253:  MOVWF  3F
3254:  MOVF   33,W
3255:  MOVWF  40
3256:  CLRF   41
3257:  CLRF   42
3258:  CLRF   40
3259:  CLRF   41
325A:  CLRF   42
325B:  MOVLB  0D
325C:  MOVF   49,W
325D:  MOVLB  11
325E:  MOVWF  46
325F:  MOVLB  0D
3260:  MOVF   48,W
3261:  MOVLB  11
3262:  MOVWF  45
3263:  MOVLB  0D
3264:  MOVF   47,W
3265:  MOVLB  11
3266:  MOVWF  44
3267:  MOVLB  0D
3268:  MOVF   46,W
3269:  MOVLB  11
326A:  MOVWF  43
326B:  MOVF   3D,W
326C:  MOVWF  4A
326D:  MOVF   3C,W
326E:  MOVWF  49
326F:  MOVF   3B,W
3270:  MOVWF  48
3271:  MOVF   3A,W
3272:  MOVWF  47
3273:  MOVF   32,W
3274:  MOVWF  4B
3275:  MOVLB  00
3276:  CALL   000
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
3277:  MOVLW  03
3278:  MOVLB  11
3279:  ADDWF  2C,W
327A:  MOVWF  3A
327B:  MOVLW  00
327C:  ADDWFC 2D,W
327D:  MOVWF  3B
327E:  MOVLW  00
327F:  ADDWFC 2E,W
3280:  MOVWF  3C
3281:  MOVLW  00
3282:  ADDWFC 2F,W
3283:  MOVWF  3D
3284:  MOVF   33,W
3285:  MOVWF  3F
3286:  CLRF   40
3287:  CLRF   41
3288:  CLRF   42
3289:  CLRF   40
328A:  CLRF   41
328B:  CLRF   42
328C:  MOVLB  0D
328D:  MOVF   49,W
328E:  MOVLB  11
328F:  MOVWF  46
3290:  MOVLB  0D
3291:  MOVF   48,W
3292:  MOVLB  11
3293:  MOVWF  45
3294:  MOVLB  0D
3295:  MOVF   47,W
3296:  MOVLB  11
3297:  MOVWF  44
3298:  MOVLB  0D
3299:  MOVF   46,W
329A:  MOVLB  11
329B:  MOVWF  43
329C:  MOVF   3D,W
329D:  MOVWF  4A
329E:  MOVF   3C,W
329F:  MOVWF  49
32A0:  MOVF   3B,W
32A1:  MOVWF  48
32A2:  MOVF   3A,W
32A3:  MOVWF  47
32A4:  MOVF   33,W
32A5:  MOVWF  4B
32A6:  MOVLB  00
32A7:  CALL   000
....................     write_data_byte(smf, base_addr + 4, loop_count);
32A8:  MOVLW  04
32A9:  MOVLB  11
32AA:  ADDWF  2C,W
32AB:  MOVWF  3A
32AC:  MOVLW  00
32AD:  ADDWFC 2D,W
32AE:  MOVWF  3B
32AF:  MOVLW  00
32B0:  ADDWFC 2E,W
32B1:  MOVWF  3C
32B2:  MOVLW  00
32B3:  ADDWFC 2F,W
32B4:  MOVWF  3D
32B5:  MOVLB  0D
32B6:  MOVF   49,W
32B7:  MOVLB  11
32B8:  MOVWF  46
32B9:  MOVLB  0D
32BA:  MOVF   48,W
32BB:  MOVLB  11
32BC:  MOVWF  45
32BD:  MOVLB  0D
32BE:  MOVF   47,W
32BF:  MOVLB  11
32C0:  MOVWF  44
32C1:  MOVLB  0D
32C2:  MOVF   46,W
32C3:  MOVLB  11
32C4:  MOVWF  43
32C5:  MOVF   3D,W
32C6:  MOVWF  4A
32C7:  MOVF   3C,W
32C8:  MOVWF  49
32C9:  MOVF   3B,W
32CA:  MOVWF  48
32CB:  MOVF   3A,W
32CC:  MOVWF  47
32CD:  MOVF   34,W
32CE:  MOVWF  4B
32CF:  MOVLB  00
32D0:  CALL   000
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
32D1:  MOVLW  42
32D2:  MOVLB  03
32D3:  MOVWF  11
32D4:  MOVLW  06
32D5:  MOVWF  12
32D6:  BCF    03.0
32D7:  MOVLW  0C
32D8:  MOVLB  11
32D9:  MOVWF  51
32DA:  MOVLP  08
32DB:  MOVLB  00
32DC:  CALL   2EF
32DD:  MOVLP  30
32DE:  MOVLW  41
32DF:  MOVWF  04
32E0:  MOVLB  11
32E1:  MOVF   33,W
32E2:  MOVWF  3D
32E3:  MOVF   32,W
32E4:  MOVWF  3C
32E5:  MOVF   31,W
32E6:  MOVWF  3B
32E7:  MOVF   30,W
32E8:  MOVWF  3A
*
3382:  MOVLW  0D
3383:  MOVLB  13
3384:  MOVWF  2B
3385:  MOVLP  00
3386:  MOVLB  00
3387:  CALL   7CB
3388:  MOVLP  30
3389:  MOVLW  0A
338A:  MOVLB  13
338B:  MOVWF  2B
338C:  MOVLP  00
338D:  MOVLB  00
338E:  CALL   7CB
338F:  MOVLP  30
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
3390:  MOVLW  4B
3391:  MOVLB  03
3392:  MOVWF  11
3393:  MOVLW  06
3394:  MOVWF  12
3395:  BCF    03.0
3396:  MOVLW  0D
3397:  MOVLB  11
3398:  MOVWF  51
3399:  MOVLP  08
339A:  MOVLB  00
339B:  CALL   2EF
339C:  MOVLP  30
339D:  MOVLB  11
339E:  MOVF   34,W
339F:  MOVWF  3A
33A0:  MOVLW  1B
33A1:  MOVWF  3B
33A2:  MOVLP  08
33A3:  MOVLB  00
33A4:  CALL   41A
33A5:  MOVLP  30
33A6:  MOVLW  52
33A7:  MOVLB  03
33A8:  MOVWF  11
33A9:  MOVLW  06
33AA:  MOVWF  12
33AB:  BSF    03.0
33AC:  MOVLW  04
33AD:  MOVLB  11
33AE:  MOVWF  51
33AF:  MOVLP  08
33B0:  MOVLB  00
33B1:  CALL   2EF
33B2:  MOVLP  30
33B3:  MOVLP  30
33B4:  GOTO   551 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
2800:  MOVLB  0F
2801:  MOVF   5A,W
2802:  MOVWF  04
2803:  MOVF   5B,W
2804:  MOVWF  05
2805:  MOVIW  [FSR0+00],W
2806:  MOVWF  5C
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
2807:  MOVLW  55
2808:  MOVLB  03
2809:  MOVWF  11
280A:  MOVLW  06
280B:  MOVWF  12
280C:  MOVLP  08
280D:  MOVLB  00
280E:  CALL   000
280F:  MOVLP  28
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
2810:  MOVLW  78
2811:  MOVLB  03
2812:  MOVWF  11
2813:  MOVLW  06
2814:  MOVWF  12
2815:  BCF    03.0
2816:  MOVLW  0C
2817:  MOVLB  11
2818:  MOVWF  51
2819:  MOVLP  08
281A:  MOVLB  00
281B:  CALL   2EF
281C:  MOVLP  28
281D:  MOVLB  0F
281E:  MOVF   5C,W
281F:  MOVLB  11
2820:  MOVWF  51
2821:  MOVLW  37
2822:  MOVWF  52
2823:  MOVLP  08
2824:  MOVLB  00
2825:  CALL   6A2
2826:  MOVLP  28
2827:  MOVLW  7F
2828:  MOVLB  03
2829:  MOVWF  11
282A:  MOVLW  06
282B:  MOVWF  12
282C:  BCF    03.0
282D:  MOVLW  04
282E:  MOVLB  11
282F:  MOVWF  51
2830:  MOVLP  08
2831:  MOVLB  00
2832:  CALL   2EF
2833:  MOVLP  28
....................    switch(command_id)
2834:  MOVLB  0F
2835:  MOVF   5C,W
2836:  XORLW  00
2837:  MOVLB  00
2838:  BTFSC  03.2
2839:  GOTO   06B
283A:  XORLW  10
283B:  BTFSC  03.2
283C:  GOTO   075
283D:  XORLW  11
283E:  BTFSC  03.2
283F:  GOTO   076
2840:  XORLW  03
2841:  BTFSC  03.2
2842:  GOTO   077
2843:  XORLW  92
2844:  BTFSC  03.2
2845:  GOTO   078
2846:  XORLW  01
2847:  BTFSC  03.2
2848:  GOTO   082
2849:  XORLW  03
284A:  BTFSC  03.2
284B:  GOTO   08C
284C:  XORLW  01
284D:  BTFSC  03.2
284E:  GOTO   096
284F:  XORLW  07
2850:  BTFSC  03.2
2851:  GOTO   0A0
2852:  XORLW  02
2853:  BTFSC  03.2
2854:  GOTO   0AA
2855:  XORLW  01
2856:  BTFSC  03.2
2857:  GOTO   0B4
2858:  XORLW  0D
2859:  BTFSC  03.2
285A:  GOTO   0BE
285B:  XORLW  05
285C:  BTFSC  03.2
285D:  GOTO   0C8
285E:  XORLW  EE
285F:  BTFSC  03.2
2860:  GOTO   0D2
2861:  XORLW  03
2862:  BTFSC  03.2
2863:  GOTO   0D6
2864:  XORLW  01
2865:  BTFSC  03.2
2866:  GOTO   0DA
2867:  XORLW  03
2868:  BTFSC  03.2
2869:  GOTO   0DE
286A:  GOTO   0E2
....................    {
....................       case ID_DUMMY: // example command
....................          mode_dummy(content);
286B:  MOVLB  0F
286C:  MOVF   5B,W
286D:  MOVWF  5E
286E:  MOVF   5A,W
286F:  MOVWF  5D
2870:  MOVLP  10
2871:  MOVLB  00
2872:  GOTO   5FE
2873:  MOVLP  28
....................          //mode_iv_meas_adc();
....................          break;
2874:  GOTO   0EB
....................       case 0x10:
....................          //mode_measure(parameter);
....................          break;
2875:  GOTO   0EB
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
2876:  GOTO   0EB
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
2877:  GOTO   0EB
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
2878:  MOVLB  0F
2879:  MOVF   5B,W
287A:  MOVWF  5E
287B:  MOVF   5A,W
287C:  MOVWF  5D
287D:  MOVLP  10
287E:  MOVLB  00
287F:  GOTO   734
2880:  MOVLP  28
....................          break;
2881:  GOTO   0EB
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
2882:  MOVLB  0F
2883:  MOVF   5B,W
2884:  MOVWF  5E
2885:  MOVF   5A,W
2886:  MOVWF  5D
2887:  MOVLP  18
2888:  MOVLB  00
2889:  GOTO   1D6
288A:  MOVLP  28
....................          break;
288B:  GOTO   0EB
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
288C:  MOVLB  0F
288D:  MOVF   5B,W
288E:  MOVWF  5E
288F:  MOVF   5A,W
2890:  MOVWF  5D
2891:  MOVLP  18
2892:  MOVLB  00
2893:  GOTO   44D
2894:  MOVLP  28
....................          break;
2895:  GOTO   0EB
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
2896:  MOVLB  0F
2897:  MOVF   5B,W
2898:  MOVWF  5E
2899:  MOVF   5A,W
289A:  MOVWF  5D
289B:  MOVLP  18
289C:  MOVLB  00
289D:  GOTO   51F
289E:  MOVLP  28
....................          break;
289F:  GOTO   0EB
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
28A0:  MOVLB  0F
28A1:  MOVF   5B,W
28A2:  MOVWF  5E
28A3:  MOVF   5A,W
28A4:  MOVWF  5D
28A5:  MOVLP  20
28A6:  MOVLB  00
28A7:  GOTO   000
28A8:  MOVLP  28
....................          break;
28A9:  GOTO   0EB
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
28AA:  MOVLB  0F
28AB:  MOVF   5B,W
28AC:  MOVWF  5E
28AD:  MOVF   5A,W
28AE:  MOVWF  5D
28AF:  MOVLP  20
28B0:  MOVLB  00
28B1:  GOTO   160
28B2:  MOVLP  28
....................          break;
28B3:  GOTO   0EB
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
28B4:  MOVLB  0F
28B5:  MOVF   5B,W
28B6:  MOVWF  5E
28B7:  MOVF   5A,W
28B8:  MOVWF  5D
28B9:  MOVLP  18
28BA:  MOVLB  00
28BB:  GOTO   71D
28BC:  MOVLP  28
....................          break;
28BD:  GOTO   0EB
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
28BE:  MOVLB  0F
28BF:  MOVF   5B,W
28C0:  MOVWF  5E
28C1:  MOVF   5A,W
28C2:  MOVWF  5D
28C3:  MOVLP  20
28C4:  MOVLB  00
28C5:  GOTO   34F
28C6:  MOVLP  28
....................          break;
28C7:  GOTO   0EB
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
28C8:  MOVLB  0F
28C9:  MOVF   5B,W
28CA:  MOVWF  5E
28CB:  MOVF   5A,W
28CC:  MOVWF  5D
28CD:  MOVLP  20
28CE:  MOVLB  00
28CF:  GOTO   3ED
28D0:  MOVLP  28
....................          break;
28D1:  GOTO   0EB
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
28D2:  MOVLP  20
28D3:  CALL   462
28D4:  MOVLP  28
....................          break;
28D5:  GOTO   0EB
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
28D6:  MOVLP  20
28D7:  CALL   462
28D8:  MOVLP  28
....................          break;
28D9:  GOTO   0EB
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
28DA:  MOVLP  20
28DB:  CALL   462
28DC:  MOVLP  28
....................          break;
28DD:  GOTO   0EB
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
28DE:  MOVLP  20
28DF:  CALL   462
28E0:  MOVLP  28
....................          break;
28E1:  GOTO   0EB
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
28E2:  MOVLW  82
28E3:  MOVLB  03
28E4:  MOVWF  11
28E5:  MOVLW  06
28E6:  MOVWF  12
28E7:  MOVLP  08
28E8:  MOVLB  00
28E9:  CALL   000
28EA:  MOVLP  28
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
28EB:  MOVLW  8E
28EC:  MOVLB  03
28ED:  MOVWF  11
28EE:  MOVLW  06
28EF:  MOVWF  12
28F0:  MOVLP  08
28F1:  MOVLB  00
28F2:  CALL   000
28F3:  MOVLP  28
28F4:  MOVLP  20
28F5:  GOTO   746 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
35A2:  MOVLW  B1
35A3:  MOVLB  03
35A4:  MOVWF  11
35A5:  MOVLW  06
35A6:  MOVWF  12
35A7:  MOVLP  08
35A8:  MOVLB  00
35A9:  CALL   000
35AA:  MOVLP  30
....................    
....................    switch(command->frame_id)
35AB:  MOVLB  0F
35AC:  MOVF   54,W
35AD:  MOVWF  04
35AE:  MOVF   55,W
35AF:  MOVWF  05
35B0:  ADDFSR 00,FSR0
35B1:  MOVF   00,W
35B2:  XORLW  00
35B3:  MOVLB  00
35B4:  BTFSC  03.2
35B5:  GOTO   5BD
35B6:  XORLW  01
35B7:  BTFSC  03.2
35B8:  GOTO   5C7
35B9:  XORLW  03
35BA:  BTFSC  03.2
35BB:  GOTO   5D7
35BC:  GOTO   5DE
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
35BD:  MOVLB  0F
35BE:  MOVF   55,W
35BF:  MOVWF  57
35C0:  MOVF   54,W
35C1:  MOVWF  56
35C2:  MOVLP  20
35C3:  MOVLB  00
35C4:  GOTO   722
35C5:  MOVLP  30
....................          break;
35C6:  GOTO   5DE
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
35C7:  MOVLB  0F
35C8:  MOVF   55,W
35C9:  MOVWF  57
35CA:  MOVF   54,W
35CB:  MOVWF  56
35CC:  MOVLP  20
35CD:  MOVLB  00
35CE:  GOTO   763
35CF:  MOVLP  30
35D0:  MOVF   78,F
35D1:  BTFSC  03.2
35D2:  GOTO   5D6
....................             return TRUE; // if status is finished, return TRUE
35D3:  MOVLW  01
35D4:  MOVWF  78
35D5:  GOTO   5E0
....................          }        
....................          break;
35D6:  GOTO   5DE
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
35D7:  MOVLB  0F
35D8:  MOVF   55,W
35D9:  MOVWF  57
35DA:  MOVF   54,W
35DB:  MOVWF  56
35DC:  MOVLB  00
35DD:  GOTO   569
....................          break;
....................    }
....................    return FALSE;
35DE:  MOVLW  00
35DF:  MOVWF  78
35E0:  MOVLP  30
35E1:  GOTO   6F7 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
2722:  MOVLW  BD
2723:  MOVLB  03
2724:  MOVWF  11
2725:  MOVLW  06
2726:  MOVWF  12
2727:  MOVLP  08
2728:  MOVLB  00
2729:  CALL   000
272A:  MOVLP  20
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
272B:  MOVLW  C8
272C:  MOVLB  03
272D:  MOVWF  11
272E:  MOVLW  06
272F:  MOVWF  12
2730:  MOVLP  08
2731:  MOVLB  00
2732:  CALL   000
2733:  MOVLP  20
....................    transmit_ack();
2734:  MOVLP  08
2735:  CALL   7F4
2736:  MOVLP  20
.................... 
....................    status[0] = EXECUTING_MISSION;
2737:  MOVLW  02
2738:  MOVWF  29
....................    execute_mission(command->content);
2739:  MOVLW  03
273A:  MOVLB  0F
273B:  ADDWF  56,W
273C:  MOVWF  58
273D:  MOVLW  00
273E:  ADDWFC 57,W
273F:  MOVWF  59
2740:  MOVWF  5B
2741:  MOVF   58,W
2742:  MOVWF  5A
2743:  MOVLP  28
2744:  MOVLB  00
2745:  GOTO   000
2746:  MOVLP  20
....................    if (is_empty_smf_data())
2747:  MOVLP  10
2748:  CALL   7ED
2749:  MOVLP  20
274A:  MOVF   78,F
274B:  BTFSC  03.2
274C:  GOTO   750
....................       status[0] = FINISHED;
274D:  MOVLW  06
274E:  MOVWF  29
274F:  GOTO   752
....................    else
....................       status[0] = SMF_USE_REQ;
2750:  MOVLW  04
2751:  MOVWF  29
2752:  MOVLP  30
2753:  GOTO   5DE (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
2763:  MOVLW  D5
2764:  MOVLB  03
2765:  MOVWF  11
2766:  MOVLW  06
2767:  MOVWF  12
2768:  MOVLP  08
2769:  MOVLB  00
276A:  CALL   000
276B:  MOVLP  20
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
276C:  MOVLW  DF
276D:  MOVLB  03
276E:  MOVWF  11
276F:  MOVLW  06
2770:  MOVWF  12
2771:  MOVLP  08
2772:  MOVLB  00
2773:  CALL   000
2774:  MOVLP  20
....................    transmit_status();
2775:  GOTO   754
....................    if (status[0] == FINISHED)
2776:  MOVF   29,W
2777:  SUBLW  06
2778:  BTFSS  03.2
2779:  GOTO   787
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
277A:  MOVLW  EE
277B:  MOVLB  03
277C:  MOVWF  11
277D:  MOVLW  06
277E:  MOVWF  12
277F:  MOVLP  08
2780:  MOVLB  00
2781:  CALL   000
2782:  MOVLP  20
....................       return TRUE;
2783:  MOVLW  01
2784:  MOVWF  78
2785:  GOTO   789
....................    }
2786:  GOTO   789
....................    else{
....................       return FALSE;
2787:  MOVLW  00
2788:  MOVWF  78
....................    }
2789:  MOVLP  30
278A:  GOTO   5CF (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
3569:  MOVLW  FC
356A:  MOVLB  03
356B:  MOVWF  11
356C:  MOVLW  06
356D:  MOVWF  12
356E:  MOVLP  08
356F:  MOVLB  00
3570:  CALL   000
3571:  MOVLP  30
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
3572:  MOVLW  09
3573:  MOVLB  03
3574:  MOVWF  11
3575:  MOVLW  07
3576:  MOVWF  12
3577:  MOVLP  08
3578:  MOVLB  00
3579:  CALL   000
357A:  MOVLP  30
....................     transmit_ack();
357B:  MOVLP  08
357C:  CALL   7F4
357D:  MOVLP  30
....................     
....................     if (command->content[0] == ALLOW) {
357E:  MOVLB  0F
357F:  MOVF   56,W
3580:  MOVWF  04
3581:  MOVF   57,W
3582:  MOVWF  05
3583:  ADDFSR 03,FSR0
3584:  MOVF   00,F
3585:  BTFSS  03.2
3586:  GOTO   597
....................         fprintf(PC, "\t\t-> allowd\r\n");
3587:  MOVLW  16
3588:  MOVLB  03
3589:  MOVWF  11
358A:  MOVLW  07
358B:  MOVWF  12
358C:  MOVLP  08
358D:  MOVLB  00
358E:  CALL   000
358F:  MOVLP  30
....................         status[0] = COPYING;
3590:  MOVLW  05
3591:  MOVWF  29
....................         copy_data();
3592:  GOTO   3B5
....................         status[0] = FINISHED;
3593:  MOVLW  06
3594:  MOVWF  29
....................     } else {
3595:  GOTO   5A0
3596:  MOVLB  0F
....................         fprintf(PC, "\t\t-> denyed\r\n");
3597:  MOVLW  1D
3598:  MOVLB  03
3599:  MOVWF  11
359A:  MOVLW  07
359B:  MOVWF  12
359C:  MOVLP  08
359D:  MOVLB  00
359E:  CALL   000
359F:  MOVLP  30
....................     }
35A0:  MOVLP  30
35A1:  GOTO   5DE (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_SMF_START 0x000000
.................... #define ADDRESS_SMF_END   0xF42400
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... typedef struct FLASH_DATA_HEADER {
....................     unsigned int32  smf_piclog_use_counter;
....................     unsigned int8   smf_piclog_loop_counter;
....................     unsigned int32  smf_meas_use_counter;
....................     unsigned int8   smf_meas_loop_counter;
.................... 
....................     unsigned int32  misf_piclog_use_counter;
....................     unsigned int8   misf_piclog_loop_counter;
....................     unsigned int32  misf_piclog_uncopyed_counter;
....................     unsigned int8   misf_piclog_write_counter;
....................     unsigned int32  misf_meas_use_counter;
....................     unsigned int8   misf_meas_loop_counter;
....................     unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................     unsigned int8   reserve[34];
....................     unsigned int8   crc;
.................... }   FLASH_DATA_HEADER; // フィールド
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
35E2:  MOVLB  03
35E3:  BSF    1F.3
35E4:  MOVLW  A0
35E5:  MOVWF  1B
35E6:  MOVLW  01
35E7:  MOVWF  1C
35E8:  MOVLW  A6
35E9:  MOVWF  1E
35EA:  MOVLW  90
35EB:  MOVWF  1D
35EC:  MOVLB  01
35ED:  BCF    0D.4
35EE:  MOVLB  02
35EF:  BSF    0D.4
35F0:  MOVLB  04
35F1:  BCF    15.5
35F2:  MOVLW  40
35F3:  MOVWF  14
35F4:  MOVLW  09
35F5:  MOVWF  12
35F6:  MOVLW  2A
35F7:  MOVWF  15
35F8:  MOVLB  02
35F9:  BCF    1D.5
35FA:  BCF    1D.3
35FB:  BCF    1D.4
35FC:  MOVLB  01
35FD:  BCF    0E.5
35FE:  BSF    0E.4
35FF:  BCF    0E.3
3600:  MOVLB  00
3601:  BCF    28.0
3602:  CLRF   30
3603:  CLRF   2F
3604:  CLRF   2E
3605:  CLRF   2D
3606:  CLRF   34
3607:  CLRF   33
3608:  CLRF   32
3609:  CLRF   31
360A:  CLRF   36
360B:  CLRF   35
360C:  CLRF   38
360D:  CLRF   37
360E:  CLRF   59
360F:  MOVLB  0C
3610:  CLRF   2D
3611:  CLRF   2C
3612:  CLRF   2B
3613:  CLRF   2A
3614:  CLRF   2F
3615:  CLRF   2E
3616:  CLRF   31
3617:  CLRF   30
3618:  CLRF   33
3619:  CLRF   32
361A:  CLRF   35
361B:  CLRF   34
361C:  CLRF   70
361D:  MOVLW  1E
361E:  MOVWF  76
361F:  MOVLB  03
3620:  CLRF   0C
3621:  CLRF   0D
3622:  CLRF   0E
3623:  CLRF   0F
3624:  CLRF   10
3625:  MOVLB  02
3626:  CLRF   12
3627:  CLRF   11
3628:  GOTO   65A
3629:  DATA 04,34
362A:  DATA 20,34
362B:  DATA 09,34
362C:  DATA 03,34
362D:  DATA 00,34
362E:  DATA 00,34
362F:  DATA 00,34
3630:  DATA 20,34
3631:  DATA 60,34
3632:  DATA 19,34
3633:  DATA 00,34
3634:  DATA FF,34
3635:  DATA 60,34
3636:  DATA 3A,34
3637:  DATA 00,34
3638:  DATA FF,34
3639:  DATA C0,34
363A:  DATA 00,34
363B:  DATA FF,34
363C:  DATA C0,34
363D:  DATA 00,34
363E:  DATA 93,34
363F:  DATA C0,34
3640:  DATA 00,34
3641:  DATA 44,34
3642:  DATA 63,34
3643:  DATA D6,34
3644:  DATA 00,34
3645:  DATA 07,34
3646:  DATA 24,34
3647:  DATA 32,34
3648:  DATA 00,34
3649:  DATA 00,34
364A:  DATA 79,34
364B:  DATA 00,34
364C:  DATA 01,34
364D:  DATA 01,34
364E:  DATA 7A,34
364F:  DATA 94,34
3650:  DATA C0,34
3651:  DATA 00,34
3652:  DATA 05,34
3653:  DATA 80,34
3654:  DATA 09,34
3655:  DATA 01,34
3656:  DATA 00,34
3657:  DATA 02,34
3658:  DATA 01,34
3659:  DATA 00,34
365A:  MOVLW  36
365B:  MOVWF  05
365C:  MOVLW  29
365D:  MOVWF  04
365E:  BSF    05.7
365F:  MOVIW  [FSR0++],W
3660:  MOVWF  77
3661:  XORLW  00
3662:  BTFSC  03.2
3663:  GOTO   674
3664:  MOVIW  [FSR0++],W
3665:  MOVWF  78
3666:  BTFSC  78.7
3667:  GOTO   66C
3668:  ANDLW  3F
3669:  MOVWF  07
366A:  MOVIW  [FSR0++],W
366B:  MOVWF  06
366C:  BTFSC  78.6
366D:  MOVIW  [FSR0++],W
366E:  BTFSS  78.6
366F:  MOVIW  [FSR0++],W
3670:  MOVWI  W,[FSR1++]
3671:  DECFSZ 77,F
3672:  GOTO   66E
3673:  GOTO   65F
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
3674:  MOVLW  24
3675:  MOVLB  03
3676:  MOVWF  11
3677:  MOVLW  07
3678:  MOVWF  12
3679:  MOVLP  08
367A:  MOVLB  00
367B:  CALL   000
367C:  MOVLP  30
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
367D:  MOVLW  47
367E:  MOVLB  03
367F:  MOVWF  11
3680:  MOVLW  07
3681:  MOVWF  12
3682:  MOVLP  08
3683:  MOVLB  00
3684:  CALL   000
3685:  MOVLP  30
....................    fprintf(PC,"Last updated on 2025/06/15, by Inoue.\r\n\r\n");  
3686:  MOVLW  5E
3687:  MOVLB  03
3688:  MOVWF  11
3689:  MOVLW  07
368A:  MOVWF  12
368B:  MOVLP  08
368C:  MOVLB  00
368D:  CALL   000
368E:  MOVLP  30
.................... 
....................    
....................    io_init();
368F:  MOVLP  08
3690:  GOTO   052
3691:  MOVLP  30
....................    adc_init();
3692:  MOVLP  08
3693:  GOTO   06A
3694:  MOVLP  30
....................    setup_uart_to_boss();
3695:  MOVLP  08
3696:  GOTO   092
3697:  MOVLP  30
....................    setup_timer();
3698:  MOVLP  08
3699:  GOTO   0A6
369A:  MOVLP  30
....................    ad7490_init();
369B:  MOVLP  00
369C:  GOTO   7F0
369D:  MOVLP  30
....................    misf_init();
369E:  MOVLP  08
369F:  GOTO   462
36A0:  MOVLP  30
....................    piclog_make(PICLOG_STARTUP,0x00);
36A1:  MOVF   70,W
36A2:  MOVLB  10
36A3:  MOVWF  65
36A4:  CLRF   66
36A5:  MOVLP  10
36A6:  MOVLB  00
36A7:  CALL   1E7
36A8:  MOVLP  30
.................... 
....................    int1 is_finished = FALSE;
36A9:  MOVLB  0F
36AA:  BCF    47.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
36AB:  MOVLW  73
36AC:  MOVLB  03
36AD:  MOVWF  11
36AE:  MOVLW  07
36AF:  MOVWF  12
36B0:  MOVLP  08
36B1:  MOVLB  00
36B2:  CALL   000
36B3:  MOVLP  30
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
36B4:  MOVLW  86
36B5:  MOVLB  03
36B6:  MOVWF  11
36B7:  MOVLW  07
36B8:  MOVWF  12
36B9:  MOVLP  08
36BA:  MOVLB  00
36BB:  CALL   000
36BC:  MOVLP  30
....................    
....................    //Start loop
....................    while(!is_finished)
36BD:  MOVLB  0F
36BE:  BTFSC  47.0
36BF:  GOTO   71C
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
36C0:  MOVLB  00
36C1:  MOVF   59,F
36C2:  BTFSC  03.2
36C3:  GOTO   704
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
36C4:  MOVLW  20
36C5:  MOVLB  0F
36C6:  MOVWF  5B
36C7:  MOVLW  19
36C8:  MOVWF  5A
36C9:  MOVLB  00
36CA:  MOVF   59,W
36CB:  MOVLB  0F
36CC:  MOVWF  5C
36CD:  MOVLP  10
36CE:  MOVLB  00
36CF:  GOTO   307
36D0:  MOVLP  30
36D1:  MOVF   79,W
36D2:  MOVWF  7A
36D3:  MOVF   78,W
36D4:  MOVWF  04
36D5:  MOVF   7A,W
36D6:  MOVWF  05
36D7:  MOVLW  0C
36D8:  MOVWF  78
36D9:  MOVLW  24
36DA:  MOVWF  07
36DB:  MOVLW  D8
36DC:  MOVWF  06
36DD:  MOVIW  [FSR0++],W
36DE:  MOVWI  W,[FSR1++]
36DF:  DECFSZ 78,F
36E0:  GOTO   6DD
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
36E1:  MOVLW  20
36E2:  MOVLB  0F
36E3:  MOVWF  55
36E4:  MOVLW  19
36E5:  MOVWF  54
36E6:  MOVLW  20
36E7:  MOVWF  57
36E8:  MOVLW  39
36E9:  MOVWF  56
36EA:  MOVLP  10
36EB:  MOVLB  00
36EC:  GOTO   549
36ED:  MOVLP  30
....................          
....................          if(recieve_cmd.is_exist)
36EE:  MOVLB  0F
36EF:  BTFSS  4A.0
36F0:  GOTO   6FB
....................             is_finished = execute_command(&recieve_cmd); 
36F1:  MOVLW  24
36F2:  MOVWF  55
36F3:  MOVLW  D8
36F4:  MOVWF  54
36F5:  MOVLB  00
36F6:  GOTO   5A2
36F7:  MOVLB  0F
36F8:  BCF    47.0
36F9:  BTFSC  78.0
36FA:  BSF    47.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
36FB:  MOVLW  95
36FC:  MOVLB  03
36FD:  MOVWF  11
36FE:  MOVLW  07
36FF:  MOVWF  12
3700:  MOVLP  08
3701:  MOVLB  00
3702:  CALL   000
3703:  MOVLP  30
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
3704:  MOVLB  0F
3705:  BTFSC  47.0
....................          break;
3706:  GOTO   71C
....................          
....................       delay_ms(400);
3707:  MOVLW  02
3708:  MOVWF  54
3709:  MOVLW  C8
370A:  MOVLB  13
370B:  MOVWF  43
370C:  MOVLP  08
370D:  MOVLB  00
370E:  CALL   7C3
370F:  MOVLP  30
3710:  MOVLB  0F
3711:  DECFSZ 54,F
3712:  GOTO   709
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
3713:  MOVLW  2E
3714:  MOVLB  13
3715:  MOVWF  2B
3716:  MOVLP  00
3717:  MOVLB  00
3718:  CALL   7CB
3719:  MOVLP  30
371A:  GOTO   6BD
371B:  MOVLB  0F
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
371C:  MOVLW  A5
371D:  MOVLB  03
371E:  MOVWF  11
371F:  MOVLW  07
3720:  MOVWF  12
3721:  MOVLP  08
3722:  MOVLB  00
3723:  CALL   000
3724:  MOVLP  30
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3725:  MOVLW  2E
3726:  MOVLB  13
3727:  MOVWF  2B
3728:  MOVLP  00
3729:  MOVLB  00
372A:  CALL   7CB
372B:  MOVLP  30
....................       delay_ms(1000);
372C:  MOVLW  04
372D:  MOVLB  0F
372E:  MOVWF  54
372F:  MOVLW  FA
3730:  MOVLB  13
3731:  MOVWF  43
3732:  MOVLP  08
3733:  MOVLB  00
3734:  CALL   7C3
3735:  MOVLP  30
3736:  MOVLB  0F
3737:  DECFSZ 54,F
3738:  GOTO   72F
3739:  MOVLB  00
373A:  GOTO   725
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
373B:  MOVLW  C5
373C:  MOVLB  03
373D:  MOVWF  11
373E:  MOVLW  07
373F:  MOVWF  12
3740:  MOVLP  08
3741:  MOVLB  00
3742:  CALL   000
3743:  MOVLP  30
....................    
.................... }
.................... 
3744:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
