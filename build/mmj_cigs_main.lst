CCS PCH C Compiler, Version 5.104, 57077               26-7-25 16:50

               Filename:   build\mmj_cigs_main.lst

               ROM used:   38330 bytes (29%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           2160 (60%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   8C78
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/system/mmj_cigs_main.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 41,44
0019A:  DATA 37,34
0019C:  DATA 39,30
0019E:  DATA 20,49
001A0:  DATA 6E,69
001A2:  DATA 74,69
001A4:  DATA 61,6C
001A6:  DATA 69,7A
001A8:  DATA 65,0D
001AA:  DATA 0A,00
001AC:  DATA 09,5B
001AE:  DATA 41,44
001B0:  DATA 43,5D
001B2:  DATA 20,43
001B4:  DATA 6F,6E
001B6:  DATA 6E,65
001B8:  DATA 63,74
001BA:  DATA 20,65
001BC:  DATA 72,72
001BE:  DATA 6F,72
001C0:  DATA 21,0D
001C2:  DATA 0A,00
001C4:  DATA 09,5B
001C6:  DATA 41,44
001C8:  DATA 43,5D
001CA:  DATA 20,43
001CC:  DATA 6F,6E
001CE:  DATA 6E,65
001D0:  DATA 63,74
001D2:  DATA 20,73
001D4:  DATA 75,63
001D6:  DATA 63,65
001D8:  DATA 73,73
001DA:  DATA 66,75
001DC:  DATA 6C,0D
001DE:  DATA 0A,00
001E0:  DATA 09,43
001E2:  DATA 6F,6D
001E4:  DATA 70,6C
001E6:  DATA 65,74
001E8:  DATA 65,0D
001EA:  DATA 0A,00
001EC:  DATA 4D,43
001EE:  DATA 50,34
001F0:  DATA 39,30
001F2:  DATA 31,20
001F4:  DATA 49,6E
001F6:  DATA 69,74
001F8:  DATA 69,61
001FA:  DATA 6C,69
001FC:  DATA 7A,65
001FE:  DATA 0D,0A
00200:  DATA 00,00
00202:  DATA 09,5B
00204:  DATA 44,41
00206:  DATA 43,20
00208:  DATA 50,6F
0020A:  DATA 72,74
0020C:  DATA 20,31
0020E:  DATA 5D,20
00210:  DATA 43,6F
00212:  DATA 6E,6E
00214:  DATA 65,63
00216:  DATA 74,20
00218:  DATA 65,72
0021A:  DATA 72,6F
0021C:  DATA 72,21
0021E:  DATA 0D,0A
00220:  DATA 00,00
00222:  DATA 09,5B
00224:  DATA 44,41
00226:  DATA 43,20
00228:  DATA 50,6F
0022A:  DATA 72,74
0022C:  DATA 20,31
0022E:  DATA 5D,20
00230:  DATA 43,6F
00232:  DATA 6E,6E
00234:  DATA 65,63
00236:  DATA 74,20
00238:  DATA 73,75
0023A:  DATA 63,63
0023C:  DATA 65,73
0023E:  DATA 73,66
00240:  DATA 75,6C
00242:  DATA 0D,0A
00244:  DATA 00,00
00246:  DATA 09,5B
00248:  DATA 44,41
0024A:  DATA 43,20
0024C:  DATA 50,6F
0024E:  DATA 72,74
00250:  DATA 20,32
00252:  DATA 5D,20
00254:  DATA 43,6F
00256:  DATA 6E,6E
00258:  DATA 65,63
0025A:  DATA 74,20
0025C:  DATA 65,72
0025E:  DATA 72,6F
00260:  DATA 72,21
00262:  DATA 0D,0A
00264:  DATA 00,00
00266:  DATA 09,5B
00268:  DATA 44,41
0026A:  DATA 43,20
0026C:  DATA 50,6F
0026E:  DATA 72,74
00270:  DATA 20,32
00272:  DATA 5D,20
00274:  DATA 43,6F
00276:  DATA 6E,6E
00278:  DATA 65,63
0027A:  DATA 74,20
0027C:  DATA 73,75
0027E:  DATA 63,63
00280:  DATA 65,73
00282:  DATA 73,66
00284:  DATA 75,6C
00286:  DATA 0D,0A
00288:  DATA 00,00
0028A:  DATA 09,43
0028C:  DATA 6F,6D
0028E:  DATA 70,6C
00290:  DATA 65,74
00292:  DATA 65,0D
00294:  DATA 0A,00
00296:  DATA 0D,0A
00298:  DATA 5F,5F
0029A:  DATA 5F,5F
0029C:  DATA 5F,5F
0029E:  DATA 5F,5F
002A0:  DATA 5F,5F
002A2:  DATA 5F,5F
002A4:  DATA 5F,5F
002A6:  DATA 5F,5F
002A8:  DATA 5F,5F
002AA:  DATA 5F,5F
002AC:  DATA 0D,0A
002AE:  DATA 00,00
002B0:  DATA 5F,5F
002B2:  DATA 5F,53
002B4:  DATA 74,61
002B6:  DATA 72,74
002B8:  DATA 20,63
002BA:  DATA 6F,70
002BC:  DATA 79,5F
002BE:  DATA 64,61
002C0:  DATA 74,61
002C2:  DATA 5F,5F
002C4:  DATA 0D,0A
002C6:  DATA 00,00
002C8:  DATA 53,74
002CA:  DATA 61,72
002CC:  DATA 74,20
002CE:  DATA 5B,25
002D0:  DATA 64,20
002D2:  DATA 74,68
002D4:  DATA 5D,20
002D6:  DATA 64,61
002D8:  DATA 74,61
002DA:  DATA 20,63
002DC:  DATA 6F,70
002DE:  DATA 79,0D
002E0:  DATA 0A,0D
002E2:  DATA 0A,00
002E4:  DATA 49,6E
002E6:  DATA 20,53
002E8:  DATA 4D,46
002EA:  DATA 20,6D
002EC:  DATA 69,73
002EE:  DATA 73,69
002F0:  DATA 6F,6E
002F2:  DATA 20,64
002F4:  DATA 61,74
002F6:  DATA 61,20
002F8:  DATA 73,74
002FA:  DATA 61,72
002FC:  DATA 74,20
002FE:  DATA 20,20
00300:  DATA 61,64
00302:  DATA 64,72
00304:  DATA 65,73
00306:  DATA 73,3A
00308:  DATA 20,25
0030A:  DATA 4C,58
0030C:  DATA 0D,0A
0030E:  DATA 00,00
00310:  DATA 49,6E
00312:  DATA 20,53
00314:  DATA 4D,46
00316:  DATA 20,6D
00318:  DATA 69,73
0031A:  DATA 73,69
0031C:  DATA 6F,6E
0031E:  DATA 20,64
00320:  DATA 61,74
00322:  DATA 61,20
00324:  DATA 65,6E
00326:  DATA 64,20
00328:  DATA 20,20
0032A:  DATA 20,20
0032C:  DATA 61,64
0032E:  DATA 64,72
00330:  DATA 65,73
00332:  DATA 73,3A
00334:  DATA 20,25
00336:  DATA 4C,58
00338:  DATA 0D,0A
0033A:  DATA 00,00
0033C:  DATA 49,6E
0033E:  DATA 20,4D
00340:  DATA 49,53
00342:  DATA 20,46
00344:  DATA 4D,20
00346:  DATA 57,72
00348:  DATA 69,74
0034A:  DATA 65,20
0034C:  DATA 73,6F
0034E:  DATA 75,72
00350:  DATA 63,65
00352:  DATA 20,64
00354:  DATA 61,74
00356:  DATA 61,20
00358:  DATA 61,64
0035A:  DATA 64,72
0035C:  DATA 65,73
0035E:  DATA 73,3A
00360:  DATA 20,25
00362:  DATA 4C,58
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 49,6E
0036A:  DATA 20,4D
0036C:  DATA 49,53
0036E:  DATA 20,46
00370:  DATA 4D,20
00372:  DATA 57,72
00374:  DATA 69,74
00376:  DATA 65,20
00378:  DATA 64,61
0037A:  DATA 74,61
0037C:  DATA 20,73
0037E:  DATA 69,7A
00380:  DATA 65,20
00382:  DATA 20,20
00384:  DATA 20,20
00386:  DATA 20,20
00388:  DATA 20,20
0038A:  DATA 20,3A
0038C:  DATA 20,25
0038E:  DATA 6C,75
00390:  DATA 20,28
00392:  DATA 30,78
00394:  DATA 25,6C
00396:  DATA 78,29
00398:  DATA 0D,0A
0039A:  DATA 0D,0A
0039C:  DATA 00,00
0039E:  DATA 45,72
003A0:  DATA 72,6F
003A2:  DATA 72,3A
003A4:  DATA 20,4D
003A6:  DATA 49,53
003A8:  DATA 20,46
003AA:  DATA 4D,20
003AC:  DATA 69,73
003AE:  DATA 20,6E
003B0:  DATA 6F,74
003B2:  DATA 20,63
003B4:  DATA 6F,6E
003B6:  DATA 6E,65
003B8:  DATA 63,74
003BA:  DATA 65,64
003BC:  DATA 0D,0A
003BE:  DATA 00,00
003C0:  DATA 45,72
003C2:  DATA 72,6F
003C4:  DATA 72,3A
003C6:  DATA 20,53
003C8:  DATA 4D,46
003CA:  DATA 20,69
003CC:  DATA 73,20
003CE:  DATA 6E,6F
003D0:  DATA 74,20
003D2:  DATA 63,6F
003D4:  DATA 6E,6E
003D6:  DATA 65,63
003D8:  DATA 74,65
003DA:  DATA 64,0D
003DC:  DATA 0A,00
003DE:  DATA 45,72
003E0:  DATA 72,6F
003E2:  DATA 72,3A
003E4:  DATA 20,53
003E6:  DATA 4D,46
003E8:  DATA 20,69
003EA:  DATA 73,20
003EC:  DATA 6E,6F
003EE:  DATA 74,20
003F0:  DATA 63,6F
003F2:  DATA 6E,6E
003F4:  DATA 65,63
003F6:  DATA 74,65
003F8:  DATA 64,0D
003FA:  DATA 0A,00
003FC:  DATA 53,69
003FE:  DATA 7A,65
00400:  DATA 20,61
00402:  DATA 72,65
00404:  DATA 61,20
00406:  DATA 72,65
00408:  DATA 61,64
0040A:  DATA 0D,0A
0040C:  DATA 00,00
0040E:  DATA 75,73
00410:  DATA 65,64
00412:  DATA 5F,73
00414:  DATA 69,7A
00416:  DATA 65,20
00418:  DATA 3D,20
0041A:  DATA 25,6C
0041C:  DATA 75,20
0041E:  DATA 28,73
00420:  DATA 72,63
00422:  DATA 20,30
00424:  DATA 78,25
00426:  DATA 30,38
00428:  DATA 4C,58
0042A:  DATA 29,0D
0042C:  DATA 0A,00
0042E:  DATA 6C,6F
00430:  DATA 6F,70
00432:  DATA 20,63
00434:  DATA 6F,75
00436:  DATA 6E,74
00438:  DATA 3D,20
0043A:  DATA 25,64
0043C:  DATA 20,20
0043E:  DATA 28,73
00440:  DATA 72,63
00442:  DATA 20,30
00444:  DATA 78,25
00446:  DATA 30,38
00448:  DATA 4C,58
0044A:  DATA 29,0D
0044C:  DATA 0A,0D
0044E:  DATA 0A,00
00450:  DATA 57,72
00452:  DATA 61,70
00454:  DATA 20,74
00456:  DATA 72,69
00458:  DATA 67,67
0045A:  DATA 65,72
0045C:  DATA 65,64
0045E:  DATA 3A,20
00460:  DATA 52,65
00462:  DATA 73,65
00464:  DATA 74,74
00466:  DATA 69,6E
00468:  DATA 67,20
0046A:  DATA 64,61
0046C:  DATA 74,61
0046E:  DATA 5F,77
00470:  DATA 72,69
00472:  DATA 74,65
00474:  DATA 5F,61
00476:  DATA 64,64
00478:  DATA 72,20
0047A:  DATA 74,6F
0047C:  DATA 20,73
0047E:  DATA 74,61
00480:  DATA 72,74
00482:  DATA 0D,0A
00484:  DATA 00,00
00486:  DATA 55,70
00488:  DATA 64,61
0048A:  DATA 74,65
0048C:  DATA 20,73
0048E:  DATA 69,7A
00490:  DATA 65,20
00492:  DATA 61,72
00494:  DATA 65,61
00496:  DATA 0D,0A
00498:  DATA 00,00
0049A:  DATA 75,73
0049C:  DATA 65,64
0049E:  DATA 5F,73
004A0:  DATA 69,7A
004A2:  DATA 65,20
004A4:  DATA 3D,20
004A6:  DATA 25,6C
004A8:  DATA 64,0D
004AA:  DATA 0A,00
004AC:  DATA 6C,6F
004AE:  DATA 6F,70
004B0:  DATA 5F,63
004B2:  DATA 6F,75
004B4:  DATA 6E,74
004B6:  DATA 20,3D
004B8:  DATA 20,25
004BA:  DATA 75,0D
004BC:  DATA 0A,0D
004BE:  DATA 0A,00
004C0:  DATA 0D,0A
004C2:  DATA 5F,5F
004C4:  DATA 5F,45
004C6:  DATA 6E,64
004C8:  DATA 20,63
004CA:  DATA 6F,70
004CC:  DATA 79,5F
004CE:  DATA 64,61
004D0:  DATA 74,61
004D2:  DATA 5F,5F
004D4:  DATA 5F,5F
004D6:  DATA 0D,0A
004D8:  DATA 00,00
004DA:  DATA 5F,5F
004DC:  DATA 5F,5F
004DE:  DATA 5F,5F
004E0:  DATA 5F,5F
004E2:  DATA 5F,5F
004E4:  DATA 5F,5F
004E6:  DATA 5F,5F
004E8:  DATA 5F,5F
004EA:  DATA 5F,5F
004EC:  DATA 5F,5F
004EE:  DATA 0D,0A
004F0:  DATA 0D,0A
004F2:  DATA 00,00
004F4:  DATA 0D,0A
004F6:  DATA 5F,5F
004F8:  DATA 5F,5F
004FA:  DATA 5F,5F
004FC:  DATA 5F,5F
004FE:  DATA 5F,5F
00500:  DATA 5F,5F
00502:  DATA 5F,5F
00504:  DATA 5F,5F
00506:  DATA 5F,5F
00508:  DATA 5F,5F
0050A:  DATA 0D,0A
0050C:  DATA 00,00
0050E:  DATA 5F,5F
00510:  DATA 5F,53
00512:  DATA 74,61
00514:  DATA 72,74
00516:  DATA 20,73
00518:  DATA 6D,66
0051A:  DATA 5F,77
0051C:  DATA 72,69
0051E:  DATA 74,65
00520:  DATA 5F,5F
00522:  DATA 0D,0A
00524:  DATA 00,00
00526:  DATA 53,74
00528:  DATA 61,72
0052A:  DATA 74,20
0052C:  DATA 5B,25
0052E:  DATA 64,20
00530:  DATA 74,68
00532:  DATA 5D,20
00534:  DATA 64,61
00536:  DATA 74,61
00538:  DATA 20,63
0053A:  DATA 6F,70
0053C:  DATA 79,0D
0053E:  DATA 0A,0D
00540:  DATA 0A,00
00542:  DATA 49,6E
00544:  DATA 20,73
00546:  DATA 6D,66
00548:  DATA 20,6D
0054A:  DATA 69,73
0054C:  DATA 73,69
0054E:  DATA 6F,6E
00550:  DATA 20,64
00552:  DATA 61,74
00554:  DATA 61,20
00556:  DATA 73,74
00558:  DATA 61,72
0055A:  DATA 74,20
0055C:  DATA 20,20
0055E:  DATA 61,64
00560:  DATA 64,72
00562:  DATA 65,73
00564:  DATA 73,3A
00566:  DATA 20,25
00568:  DATA 30,38
0056A:  DATA 4C,58
0056C:  DATA 0D,0A
0056E:  DATA 00,00
00570:  DATA 49,6E
00572:  DATA 20,73
00574:  DATA 6D,66
00576:  DATA 20,6D
00578:  DATA 69,73
0057A:  DATA 73,69
0057C:  DATA 6F,6E
0057E:  DATA 20,64
00580:  DATA 61,74
00582:  DATA 61,20
00584:  DATA 65,6E
00586:  DATA 64,20
00588:  DATA 20,20
0058A:  DATA 20,20
0058C:  DATA 61,64
0058E:  DATA 64,72
00590:  DATA 65,73
00592:  DATA 73,3A
00594:  DATA 20,25
00596:  DATA 30,38
00598:  DATA 4C,58
0059A:  DATA 0D,0A
0059C:  DATA 00,00
0059E:  DATA 49,6E
005A0:  DATA 20,4D
005A2:  DATA 49,53
005A4:  DATA 20,46
005A6:  DATA 4D,20
005A8:  DATA 57,72
005AA:  DATA 69,74
005AC:  DATA 65,20
005AE:  DATA 73,6F
005B0:  DATA 75,72
005B2:  DATA 63,65
005B4:  DATA 20,64
005B6:  DATA 61,74
005B8:  DATA 61,20
005BA:  DATA 61,64
005BC:  DATA 64,72
005BE:  DATA 65,73
005C0:  DATA 73,3A
005C2:  DATA 20,25
005C4:  DATA 30,38
005C6:  DATA 4C,58
005C8:  DATA 0D,0A
005CA:  DATA 00,00
005CC:  DATA 49,6E
005CE:  DATA 20,4D
005D0:  DATA 49,53
005D2:  DATA 20,46
005D4:  DATA 4D,20
005D6:  DATA 57,72
005D8:  DATA 69,74
005DA:  DATA 65,20
005DC:  DATA 64,61
005DE:  DATA 74,61
005E0:  DATA 20,73
005E2:  DATA 69,7A
005E4:  DATA 65,20
005E6:  DATA 20,20
005E8:  DATA 20,20
005EA:  DATA 20,20
005EC:  DATA 20,20
005EE:  DATA 20,3A
005F0:  DATA 20,25
005F2:  DATA 6C,75
005F4:  DATA 20,28
005F6:  DATA 30,78
005F8:  DATA 25,6C
005FA:  DATA 78,29
005FC:  DATA 0D,0A
005FE:  DATA 0D,0A
00600:  DATA 00,00
00602:  DATA 45,72
00604:  DATA 72,6F
00606:  DATA 72,3A
00608:  DATA 20,53
0060A:  DATA 4D,46
0060C:  DATA 20,69
0060E:  DATA 73,20
00610:  DATA 6E,6F
00612:  DATA 74,20
00614:  DATA 63,6F
00616:  DATA 6E,6E
00618:  DATA 65,63
0061A:  DATA 74,65
0061C:  DATA 64,0D
0061E:  DATA 0A,00
00620:  DATA 53,69
00622:  DATA 7A,65
00624:  DATA 20,61
00626:  DATA 72,65
00628:  DATA 61,20
0062A:  DATA 72,65
0062C:  DATA 61,64
0062E:  DATA 0D,0A
00630:  DATA 00,00
00632:  DATA 75,73
00634:  DATA 65,64
00636:  DATA 5F,73
00638:  DATA 69,7A
0063A:  DATA 65,20
0063C:  DATA 3D,20
0063E:  DATA 25,6C
00640:  DATA 75,20
00642:  DATA 28,73
00644:  DATA 72,63
00646:  DATA 20,30
00648:  DATA 78,25
0064A:  DATA 30,38
0064C:  DATA 4C,58
0064E:  DATA 29,0D
00650:  DATA 0A,00
00652:  DATA 6C,6F
00654:  DATA 6F,70
00656:  DATA 20,63
00658:  DATA 6F,75
0065A:  DATA 6E,74
0065C:  DATA 3D,20
0065E:  DATA 25,64
00660:  DATA 20,20
00662:  DATA 28,73
00664:  DATA 72,63
00666:  DATA 20,30
00668:  DATA 78,25
0066A:  DATA 30,38
0066C:  DATA 4C,58
0066E:  DATA 29,0D
00670:  DATA 0A,0D
00672:  DATA 0A,00
00674:  DATA 57,72
00676:  DATA 61,70
00678:  DATA 20,74
0067A:  DATA 72,69
0067C:  DATA 67,67
0067E:  DATA 65,72
00680:  DATA 65,64
00682:  DATA 3A,20
00684:  DATA 52,65
00686:  DATA 73,65
00688:  DATA 74,74
0068A:  DATA 69,6E
0068C:  DATA 67,20
0068E:  DATA 64,61
00690:  DATA 74,61
00692:  DATA 5F,77
00694:  DATA 72,69
00696:  DATA 74,65
00698:  DATA 5F,61
0069A:  DATA 64,64
0069C:  DATA 72,20
0069E:  DATA 74,6F
006A0:  DATA 20,73
006A2:  DATA 74,61
006A4:  DATA 72,74
006A6:  DATA 0D,0A
006A8:  DATA 00,00
006AA:  DATA 55,70
006AC:  DATA 64,61
006AE:  DATA 74,65
006B0:  DATA 20,73
006B2:  DATA 69,7A
006B4:  DATA 65,20
006B6:  DATA 61,72
006B8:  DATA 65,61
006BA:  DATA 0D,0A
006BC:  DATA 00,00
006BE:  DATA 75,73
006C0:  DATA 65,64
006C2:  DATA 5F,73
006C4:  DATA 69,7A
006C6:  DATA 65,20
006C8:  DATA 3D,20
006CA:  DATA 25,6C
006CC:  DATA 64,0D
006CE:  DATA 0A,00
006D0:  DATA 6C,6F
006D2:  DATA 6F,70
006D4:  DATA 5F,63
006D6:  DATA 6F,75
006D8:  DATA 6E,74
006DA:  DATA 20,3D
006DC:  DATA 20,25
006DE:  DATA 75,0D
006E0:  DATA 0A,0D
006E2:  DATA 0A,00
006E4:  DATA 0D,0A
006E6:  DATA 5F,5F
006E8:  DATA 5F,45
006EA:  DATA 6E,64
006EC:  DATA 20,73
006EE:  DATA 6D,66
006F0:  DATA 5F,77
006F2:  DATA 72,69
006F4:  DATA 74,65
006F6:  DATA 5F,5F
006F8:  DATA 5F,5F
006FA:  DATA 0D,0A
006FC:  DATA 00,00
006FE:  DATA 5F,5F
00700:  DATA 5F,5F
00702:  DATA 5F,5F
00704:  DATA 5F,5F
00706:  DATA 5F,5F
00708:  DATA 5F,5F
0070A:  DATA 5F,5F
0070C:  DATA 5F,5F
0070E:  DATA 5F,5F
00710:  DATA 5F,5F
00712:  DATA 0D,0A
00714:  DATA 0D,0A
00716:  DATA 00,00
00718:  DATA 53,4D
0071A:  DATA 46,20
0071C:  DATA 64,61
0071E:  DATA 74,61
00720:  DATA 20,6C
00722:  DATA 69,73
00724:  DATA 74,20
00726:  DATA 69,73
00728:  DATA 20,66
0072A:  DATA 75,6C
0072C:  DATA 6C,21
0072E:  DATA 21,21
00730:  DATA 0D,0A
00732:  DATA 00,00
00734:  DATA 53,4D
00736:  DATA 46,20
00738:  DATA 64,61
0073A:  DATA 74,61
0073C:  DATA 20,6C
0073E:  DATA 69,73
00740:  DATA 74,20
00742:  DATA 69,73
00744:  DATA 20,65
00746:  DATA 6D,70
00748:  DATA 74,79
0074A:  DATA 0D,0A
0074C:  DATA 00,00
0074E:  DATA 0D,0A
00750:  DATA 53,74
00752:  DATA 61,72
00754:  DATA 74,20
00756:  DATA 6D,61
00758:  DATA 6B,65
0075A:  DATA 5F,72
0075C:  DATA 65,63
0075E:  DATA 65,69
00760:  DATA 76,65
00762:  DATA 5F,63
00764:  DATA 6F,6D
00766:  DATA 6D,61
00768:  DATA 6E,64
0076A:  DATA 0D,0A
0076C:  DATA 00,00
0076E:  DATA 09,5B
00770:  DATA 42,4F
00772:  DATA 53,53
00774:  DATA 5D,20
00776:  DATA 3E,3E
00778:  DATA 3E,20
0077A:  DATA 00,00
0077C:  DATA 45,6E
0077E:  DATA 64,20
00780:  DATA 6D,61
00782:  DATA 6B,65
00784:  DATA 5F,72
00786:  DATA 65,63
00788:  DATA 69,76
0078A:  DATA 65,5F
0078C:  DATA 63,6F
0078E:  DATA 6D,6D
00790:  DATA 61,6E
00792:  DATA 64,0D
00794:  DATA 0A,0D
00796:  DATA 0A,00
00798:  DATA 73,69
0079A:  DATA 67,6E
0079C:  DATA 61,6C
0079E:  DATA 20,65
007A0:  DATA 6E,64
007A2:  DATA 20,77
007A4:  DATA 69,74
007A6:  DATA 68,20
007A8:  DATA 53,46
007AA:  DATA 44,0D
007AC:  DATA 0A,00
007AE:  DATA 64,6F
007B0:  DATA 6E,27
007B2:  DATA 74,20
007B4:  DATA 66,69
007B6:  DATA 6E,64
007B8:  DATA 20,53
007BA:  DATA 46,44
007BC:  DATA 0D,0A
007BE:  DATA 00,00
007C0:  DATA 09,2D
007C2:  DATA 3E,20
007C4:  DATA 49,6E
007C6:  DATA 76,61
007C8:  DATA 6C,69
007CA:  DATA 64,20
007CC:  DATA 46,72
007CE:  DATA 61,6D
007D0:  DATA 65,20
007D2:  DATA 49,44
007D4:  DATA 20,72
007D6:  DATA 65,63
007D8:  DATA 65,69
007DA:  DATA 76,65
007DC:  DATA 64,3A
007DE:  DATA 20,25
007E0:  DATA 58,0D
007E2:  DATA 0A,00
007E4:  DATA 09,2D
007E6:  DATA 3E,20
007E8:  DATA 43,52
007EA:  DATA 43,20
007EC:  DATA 65,72
007EE:  DATA 72,6F
007F0:  DATA 72,21
007F2:  DATA 0D,0A
007F4:  DATA 00,00
007F6:  DATA 09,09
007F8:  DATA 2D,3E
007FA:  DATA 20,72
007FC:  DATA 65,63
007FE:  DATA 65,69
00800:  DATA 76,65
00802:  DATA 64,20
00804:  DATA 43,52
00806:  DATA 43,3A
00808:  DATA 20,25
0080A:  DATA 58,0D
0080C:  DATA 0A,00
0080E:  DATA 09,09
00810:  DATA 20,20
00812:  DATA 20,63
00814:  DATA 6F,6C
00816:  DATA 6C,65
00818:  DATA 63,74
0081A:  DATA 20,43
0081C:  DATA 52,43
0081E:  DATA 20,3A
00820:  DATA 20,25
00822:  DATA 58,0D
00824:  DATA 0A,00
00826:  DATA 09,2D
00828:  DATA 3E,20
0082A:  DATA 49,6E
0082C:  DATA 76,61
0082E:  DATA 6C,69
00830:  DATA 64,20
00832:  DATA 64,65
00834:  DATA 76,69
00836:  DATA 63,65
00838:  DATA 20,49
0083A:  DATA 44,20
0083C:  DATA 72,65
0083E:  DATA 63,65
00840:  DATA 69,76
00842:  DATA 65,64
00844:  DATA 0D,0A
00846:  DATA 00,00
00848:  DATA 09,09
0084A:  DATA 2D,3E
0084C:  DATA 20,72
0084E:  DATA 65,63
00850:  DATA 65,69
00852:  DATA 76,65
00854:  DATA 64,3A
00856:  DATA 20,20
00858:  DATA 20,20
0085A:  DATA 20,25
0085C:  DATA 58,0D
0085E:  DATA 0A,00
00860:  DATA 09,09
00862:  DATA 20,20
00864:  DATA 20,4D
00866:  DATA 79,20
00868:  DATA 64,65
0086A:  DATA 76,69
0086C:  DATA 63,65
0086E:  DATA 20,49
00870:  DATA 44,3A
00872:  DATA 20,25
00874:  DATA 58,0D
00876:  DATA 0A,00
00878:  DATA 09,5B
0087A:  DATA 42,4F
0087C:  DATA 53,53
0087E:  DATA 5D,20
00880:  DATA 3C,3C
00882:  DATA 3C,20
00884:  DATA 00,00
00886:  DATA 53,74
00888:  DATA 61,72
0088A:  DATA 74,20
0088C:  DATA 53,4D
0088E:  DATA 46,20
00890:  DATA 75,73
00892:  DATA 69,6E
00894:  DATA 67,20
00896:  DATA 72,65
00898:  DATA 71,65
0089A:  DATA 73,74
0089C:  DATA 20,73
0089E:  DATA 65,61
008A0:  DATA 71,75
008A2:  DATA 65,6E
008A4:  DATA 63,65
008A6:  DATA 0D,0A
008A8:  DATA 00,00
008AA:  DATA 45,72
008AC:  DATA 72,6F
008AE:  DATA 72,21
008B0:  DATA 20,52
008B2:  DATA 65,63
008B4:  DATA 65,69
008B6:  DATA 76,69
008B8:  DATA 6E,67
008BA:  DATA 20,63
008BC:  DATA 6F,6D
008BE:  DATA 6D,61
008C0:  DATA 6E,64
008C2:  DATA 20,69
008C4:  DATA 6E,63
008C6:  DATA 6F,6E
008C8:  DATA 73,69
008CA:  DATA 73,74
008CC:  DATA 65,6E
008CE:  DATA 74,20
008D0:  DATA 77,69
008D2:  DATA 74,68
008D4:  DATA 20,74
008D6:  DATA 68,65
008D8:  DATA 20,64
008DA:  DATA 65,73
008DC:  DATA 69,67
008DE:  DATA 6E,0D
008E0:  DATA 0A,00
008E2:  DATA 53,4D
008E4:  DATA 46,20
008E6:  DATA 75,73
008E8:  DATA 65,20
008EA:  DATA 72,65
008EC:  DATA 71,75
008EE:  DATA 65,73
008F0:  DATA 74,20
008F2:  DATA 61,6C
008F4:  DATA 6C,6F
008F6:  DATA 77,65
008F8:  DATA 64,0D
008FA:  DATA 0A,00
008FC:  DATA 53,4D
008FE:  DATA 46,20
00900:  DATA 75,73
00902:  DATA 65,20
00904:  DATA 72,65
00906:  DATA 71,75
00908:  DATA 65,73
0090A:  DATA 74,20
0090C:  DATA 64,65
0090E:  DATA 6E,79
00910:  DATA 65,64
00912:  DATA 0D,0A
00914:  DATA 00,00
00916:  DATA 52,65
00918:  DATA 74,72
0091A:  DATA 79,20
0091C:  DATA 72,65
0091E:  DATA 71,75
00920:  DATA 65,73
00922:  DATA 74,20
00924:  DATA 74,6F
00926:  DATA 20,42
00928:  DATA 4F,53
0092A:  DATA 53,20
0092C:  DATA 50,49
0092E:  DATA 43,0D
00930:  DATA 0A,00
00932:  DATA 45,72
00934:  DATA 72,6F
00936:  DATA 72,21
00938:  DATA 20,52
0093A:  DATA 65,63
0093C:  DATA 65,69
0093E:  DATA 76,69
00940:  DATA 6E,67
00942:  DATA 20,63
00944:  DATA 6F,6D
00946:  DATA 6D,61
00948:  DATA 6E,64
0094A:  DATA 20,69
0094C:  DATA 6E,63
0094E:  DATA 6F,6E
00950:  DATA 73,69
00952:  DATA 73,74
00954:  DATA 65,6E
00956:  DATA 74,20
00958:  DATA 77,69
0095A:  DATA 74,68
0095C:  DATA 20,74
0095E:  DATA 68,65
00960:  DATA 20,64
00962:  DATA 65,73
00964:  DATA 69,67
00966:  DATA 6E,0D
00968:  DATA 0A,00
0096A:  DATA 45,6E
0096C:  DATA 64,20
0096E:  DATA 53,4D
00970:  DATA 46,20
00972:  DATA 75,73
00974:  DATA 69,6E
00976:  DATA 67,20
00978:  DATA 72,65
0097A:  DATA 71,65
0097C:  DATA 73,74
0097E:  DATA 20,73
00980:  DATA 65,61
00982:  DATA 71,75
00984:  DATA 65,6E
00986:  DATA 63,65
00988:  DATA 0D,0A
0098A:  DATA 00,00
0098C:  DATA 49,4F
0098E:  DATA 20,49
00990:  DATA 6E,69
00992:  DATA 74,69
00994:  DATA 61,6C
00996:  DATA 69,7A
00998:  DATA 65,0D
0099A:  DATA 0A,00
0099C:  DATA 09,43
0099E:  DATA 6F,6D
009A0:  DATA 70,6C
009A2:  DATA 65,74
009A4:  DATA 65,0D
009A6:  DATA 0A,00
009A8:  DATA 41,44
009AA:  DATA 43,20
009AC:  DATA 49,6E
009AE:  DATA 69,74
009B0:  DATA 69,61
009B2:  DATA 6C,69
009B4:  DATA 7A,65
009B6:  DATA 0D,0A
009B8:  DATA 00,00
009BA:  DATA 09,43
009BC:  DATA 6F,6D
009BE:  DATA 70,6C
009C0:  DATA 65,74
009C2:  DATA 65,0D
009C4:  DATA 0A,00
009C6:  DATA 53,74
009C8:  DATA 61,72
009CA:  DATA 74,20
009CC:  DATA 53,57
009CE:  DATA 45,45
009D0:  DATA 50,0D
009D2:  DATA 0A,00
009D4:  DATA 09,53
009D6:  DATA 77,65
009D8:  DATA 65,70
009DA:  DATA 20,73
009DC:  DATA 74,65
009DE:  DATA 70,20
009E0:  DATA 3A,20
009E2:  DATA 25,75
009E4:  DATA 0D,0A
009E6:  DATA 00,00
009E8:  DATA 53,74
009EA:  DATA 61,72
009EC:  DATA 74,20
009EE:  DATA 54,45
009F0:  DATA 53,54
009F2:  DATA 20,53
009F4:  DATA 57,45
009F6:  DATA 45,50
009F8:  DATA 0D,0A
009FA:  DATA 00,00
009FC:  DATA 73,74
009FE:  DATA 65,70
00A00:  DATA 2C,20
00A02:  DATA 76,6F
00A04:  DATA 6C,74
00A06:  DATA 61,67
00A08:  DATA 65,2C
00A0A:  DATA 20,63
00A0C:  DATA 75,72
00A0E:  DATA 72,65
00A10:  DATA 6E,74
00A12:  DATA 0D,0A
00A14:  DATA 00,00
00A16:  DATA 53,74
00A18:  DATA 61,72
00A1A:  DATA 74,20
00A1C:  DATA 41,44
00A1E:  DATA 43,20
00A20:  DATA 54,45
00A22:  DATA 53,54
00A24:  DATA 0D,0A
00A26:  DATA 00,00
00A28:  DATA 41,44
00A2A:  DATA 43,20
00A2C:  DATA 56,6F
00A2E:  DATA 6C,74
00A30:  DATA 61,67
00A32:  DATA 65,3A
00A34:  DATA 20,25
00A36:  DATA 30,34
00A38:  DATA 4C,58
00A3A:  DATA 0D,0A
00A3C:  DATA 00,00
00A3E:  DATA 41,44
00A40:  DATA 43,20
00A42:  DATA 43,75
00A44:  DATA 72,72
00A46:  DATA 65,6E
00A48:  DATA 74,3A
00A4A:  DATA 20,25
00A4C:  DATA 30,34
00A4E:  DATA 4C,58
00A50:  DATA 0D,0A
00A52:  DATA 00,00
00A54:  DATA 41,44
00A56:  DATA 43,20
00A58:  DATA 43,49
00A5A:  DATA 47,53
00A5C:  DATA 31,20
00A5E:  DATA 41,6D
00A60:  DATA 70,3A
00A62:  DATA 20,25
00A64:  DATA 30,34
00A66:  DATA 4C,58
00A68:  DATA 0D,0A
00A6A:  DATA 00,00
00A6C:  DATA 41,44
00A6E:  DATA 43,20
00A70:  DATA 43,49
00A72:  DATA 47,53
00A74:  DATA 31,20
00A76:  DATA 56,52
00A78:  DATA 45,46
00A7A:  DATA 3A,20
00A7C:  DATA 25,30
00A7E:  DATA 34,4C
00A80:  DATA 58,0D
00A82:  DATA 0A,00
00A84:  DATA 53,74
00A86:  DATA 61,72
00A88:  DATA 74,20
00A8A:  DATA 53,57
00A8C:  DATA 45,45
00A8E:  DATA 50,20
00A90:  DATA 32,70
00A92:  DATA 6F,72
00A94:  DATA 74,73
00A96:  DATA 0D,0A
00A98:  DATA 00,00
00A9A:  DATA 09,53
00A9C:  DATA 77,65
00A9E:  DATA 65,70
00AA0:  DATA 20,73
00AA2:  DATA 74,65
00AA4:  DATA 70,20
00AA6:  DATA 3A,20
00AA8:  DATA 25,75
00AAA:  DATA 0D,0A
00AAC:  DATA 00,00
00AAE:  DATA 45,4E
00AB0:  DATA 44,20
00AB2:  DATA 53,57
00AB4:  DATA 45,45
00AB6:  DATA 50,20
00AB8:  DATA 32,70
00ABA:  DATA 6F,72
00ABC:  DATA 74,0D
00ABE:  DATA 0A,00
00AC0:  DATA 53,74
00AC2:  DATA 61,72
00AC4:  DATA 74,20
00AC6:  DATA 43,49
00AC8:  DATA 47,53
00ACA:  DATA 20,64
00ACC:  DATA 61,74
00ACE:  DATA 61,20
00AD0:  DATA 63,6F
00AD2:  DATA 6E,76
00AD4:  DATA 65,72
00AD6:  DATA 73,69
00AD8:  DATA 6F,6E
00ADA:  DATA 0D,0A
00ADC:  DATA 00,00
00ADE:  DATA 53,74
00AE0:  DATA 61,72
00AE2:  DATA 74,20
00AE4:  DATA 53,57
00AE6:  DATA 45,45
00AE8:  DATA 50,20
00AEA:  DATA 50,4F
00AEC:  DATA 52,54
00AEE:  DATA 31,0D
00AF0:  DATA 0A,00
00AF2:  DATA 09,53
00AF4:  DATA 77,65
00AF6:  DATA 65,70
00AF8:  DATA 20,73
00AFA:  DATA 74,65
00AFC:  DATA 70,20
00AFE:  DATA 3A,20
00B00:  DATA 25,75
00B02:  DATA 0D,0A
00B04:  DATA 00,00
00B06:  DATA 45,4E
00B08:  DATA 44,20
00B0A:  DATA 53,57
00B0C:  DATA 45,45
00B0E:  DATA 50,20
00B10:  DATA 50,4F
00B12:  DATA 52,54
00B14:  DATA 31,0D
00B16:  DATA 0A,00
00B18:  DATA 53,74
00B1A:  DATA 61,72
00B1C:  DATA 74,20
00B1E:  DATA 43,49
00B20:  DATA 47,53
00B22:  DATA 20,64
00B24:  DATA 61,74
00B26:  DATA 61,20
00B28:  DATA 63,6F
00B2A:  DATA 6E,76
00B2C:  DATA 65,72
00B2E:  DATA 73,69
00B30:  DATA 6F,6E
00B32:  DATA 0D,0A
00B34:  DATA 00,00
00B36:  DATA 45,6E
00B38:  DATA 64,20
00B3A:  DATA 43,49
00B3C:  DATA 47,53
00B3E:  DATA 20,64
00B40:  DATA 61,74
00B42:  DATA 61,20
00B44:  DATA 63,6F
00B46:  DATA 6E,76
00B48:  DATA 65,72
00B4A:  DATA 73,69
00B4C:  DATA 6F,6E
00B4E:  DATA 0D,0A
00B50:  DATA 00,00
00B52:  DATA 53,74
00B54:  DATA 61,72
00B56:  DATA 74,20
00B58:  DATA 53,57
00B5A:  DATA 45,45
00B5C:  DATA 50,20
00B5E:  DATA 50,4F
00B60:  DATA 52,54
00B62:  DATA 32,0D
00B64:  DATA 0A,00
00B66:  DATA 09,53
00B68:  DATA 77,65
00B6A:  DATA 65,70
00B6C:  DATA 20,73
00B6E:  DATA 74,65
00B70:  DATA 70,20
00B72:  DATA 3A,20
00B74:  DATA 25,75
00B76:  DATA 0D,0A
00B78:  DATA 00,00
00B7A:  DATA 45,4E
00B7C:  DATA 44,20
00B7E:  DATA 53,57
00B80:  DATA 45,45
00B82:  DATA 50,20
00B84:  DATA 50,4F
00B86:  DATA 52,54
00B88:  DATA 32,0D
00B8A:  DATA 0A,00
00B8C:  DATA 53,74
00B8E:  DATA 61,72
00B90:  DATA 74,20
00B92:  DATA 43,49
00B94:  DATA 47,53
00B96:  DATA 20,64
00B98:  DATA 61,74
00B9A:  DATA 61,20
00B9C:  DATA 63,6F
00B9E:  DATA 6E,76
00BA0:  DATA 65,72
00BA2:  DATA 73,69
00BA4:  DATA 6F,6E
00BA6:  DATA 0D,0A
00BA8:  DATA 00,00
00BAA:  DATA 4D,49
00BAC:  DATA 53,53
00BAE:  DATA 49,4F
00BB0:  DATA 4E,20
00BB2:  DATA 46,4C
00BB4:  DATA 41,53
00BB6:  DATA 48,20
00BB8:  DATA 49,6E
00BBA:  DATA 69,74
00BBC:  DATA 69,61
00BBE:  DATA 6C,69
00BC0:  DATA 7A,65
00BC2:  DATA 0D,0A
00BC4:  DATA 00,00
00BC6:  DATA 09,5B
00BC8:  DATA 4D,49
00BCA:  DATA 53,20
00BCC:  DATA 46,4D
00BCE:  DATA 5D,20
00BD0:  DATA 46,6C
00BD2:  DATA 61,73
00BD4:  DATA 68,20
00BD6:  DATA 49,44
00BD8:  DATA 3A,20
00BDA:  DATA 00,00
00BDC:  DATA 09,5B
00BDE:  DATA 53,4D
00BE0:  DATA 46,5D
00BE2:  DATA 20,46
00BE4:  DATA 6C,61
00BE6:  DATA 73,68
00BE8:  DATA 20,49
00BEA:  DATA 44,3A
00BEC:  DATA 20,00
00BEE:  DATA 09,5B
00BF0:  DATA 53,4D
00BF2:  DATA 46,5D
00BF4:  DATA 20,63
00BF6:  DATA 6F,6E
00BF8:  DATA 6E,65
00BFA:  DATA 63,74
00BFC:  DATA 20,65
00BFE:  DATA 72,72
00C00:  DATA 6F,72
00C02:  DATA 21,0D
00C04:  DATA 0A,00
00C06:  DATA 09,5B
00C08:  DATA 53,4D
00C0A:  DATA 46,5D
00C0C:  DATA 20,69
00C0E:  DATA 73,20
00C10:  DATA 63,6F
00C12:  DATA 6E,6E
00C14:  DATA 65,63
00C16:  DATA 74,65
00C18:  DATA 64,0D
00C1A:  DATA 0A,00
00C1C:  DATA 09,5B
00C1E:  DATA 4D,49
00C20:  DATA 53,20
00C22:  DATA 46,4D
00C24:  DATA 5D,20
00C26:  DATA 63,6F
00C28:  DATA 6E,6E
00C2A:  DATA 65,63
00C2C:  DATA 74,20
00C2E:  DATA 65,72
00C30:  DATA 72,6F
00C32:  DATA 72,21
00C34:  DATA 0D,0A
00C36:  DATA 00,00
00C38:  DATA 09,5B
00C3A:  DATA 4D,49
00C3C:  DATA 53,20
00C3E:  DATA 46,4D
00C40:  DATA 5D,20
00C42:  DATA 69,73
00C44:  DATA 20,63
00C46:  DATA 6F,6E
00C48:  DATA 6E,65
00C4A:  DATA 63,74
00C4C:  DATA 65,64
00C4E:  DATA 0D,0A
00C50:  DATA 00,00
00C52:  DATA 09,7C
00C54:  DATA 20,53
00C56:  DATA 4D,46
00C58:  DATA 20,20
00C5A:  DATA 7C,20
00C5C:  DATA 50,49
00C5E:  DATA 43,4C
00C60:  DATA 4F,47
00C62:  DATA 20,7C
00C64:  DATA 20,55
00C66:  DATA 73,65
00C68:  DATA 20,43
00C6A:  DATA 6F,75
00C6C:  DATA 6E,74
00C6E:  DATA 65,72
00C70:  DATA 20,20
00C72:  DATA 20,20
00C74:  DATA 20,20
00C76:  DATA 3A,20
00C78:  DATA 30,78
00C7A:  DATA 25,30
00C7C:  DATA 38,4C
00C7E:  DATA 58,0D
00C80:  DATA 0A,00
00C82:  DATA 09,7C
00C84:  DATA 20,53
00C86:  DATA 4D,46
00C88:  DATA 20,20
00C8A:  DATA 7C,20
00C8C:  DATA 50,49
00C8E:  DATA 43,4C
00C90:  DATA 4F,47
00C92:  DATA 20,7C
00C94:  DATA 20,4C
00C96:  DATA 6F,6F
00C98:  DATA 70,20
00C9A:  DATA 43,6F
00C9C:  DATA 75,6E
00C9E:  DATA 74,65
00CA0:  DATA 72,20
00CA2:  DATA 20,20
00CA4:  DATA 20,20
00CA6:  DATA 3A,20
00CA8:  DATA 30,78
00CAA:  DATA 25,30
00CAC:  DATA 32,58
00CAE:  DATA 0D,0A
00CB0:  DATA 00,00
00CB2:  DATA 09,7C
00CB4:  DATA 20,53
00CB6:  DATA 4D,46
00CB8:  DATA 20,20
00CBA:  DATA 7C,20
00CBC:  DATA 4D,45
00CBE:  DATA 41,53
00CC0:  DATA 20,20
00CC2:  DATA 20,7C
00CC4:  DATA 20,55
00CC6:  DATA 73,65
00CC8:  DATA 20,43
00CCA:  DATA 6F,75
00CCC:  DATA 6E,74
00CCE:  DATA 65,72
00CD0:  DATA 20,20
00CD2:  DATA 20,20
00CD4:  DATA 20,20
00CD6:  DATA 3A,20
00CD8:  DATA 30,78
00CDA:  DATA 25,30
00CDC:  DATA 38,4C
00CDE:  DATA 58,0D
00CE0:  DATA 0A,00
00CE2:  DATA 09,7C
00CE4:  DATA 20,53
00CE6:  DATA 4D,46
00CE8:  DATA 20,20
00CEA:  DATA 7C,20
00CEC:  DATA 4D,45
00CEE:  DATA 41,53
00CF0:  DATA 20,20
00CF2:  DATA 20,7C
00CF4:  DATA 20,4C
00CF6:  DATA 6F,6F
00CF8:  DATA 70,20
00CFA:  DATA 43,6F
00CFC:  DATA 75,6E
00CFE:  DATA 74,65
00D00:  DATA 72,20
00D02:  DATA 20,20
00D04:  DATA 20,20
00D06:  DATA 3A,20
00D08:  DATA 30,78
00D0A:  DATA 25,30
00D0C:  DATA 32,58
00D0E:  DATA 0D,0A
00D10:  DATA 00,00
00D12:  DATA 09,7C
00D14:  DATA 20,4D
00D16:  DATA 49,53
00D18:  DATA 46,20
00D1A:  DATA 7C,20
00D1C:  DATA 50,49
00D1E:  DATA 43,4C
00D20:  DATA 4F,47
00D22:  DATA 20,7C
00D24:  DATA 20,55
00D26:  DATA 73,65
00D28:  DATA 20,43
00D2A:  DATA 6F,75
00D2C:  DATA 6E,74
00D2E:  DATA 65,72
00D30:  DATA 20,20
00D32:  DATA 20,20
00D34:  DATA 20,20
00D36:  DATA 3A,20
00D38:  DATA 30,78
00D3A:  DATA 25,30
00D3C:  DATA 38,4C
00D3E:  DATA 58,0D
00D40:  DATA 0A,00
00D42:  DATA 09,7C
00D44:  DATA 20,4D
00D46:  DATA 49,53
00D48:  DATA 46,20
00D4A:  DATA 7C,20
00D4C:  DATA 50,49
00D4E:  DATA 43,4C
00D50:  DATA 4F,47
00D52:  DATA 20,7C
00D54:  DATA 20,55
00D56:  DATA 6E,63
00D58:  DATA 6F,70
00D5A:  DATA 79,65
00D5C:  DATA 64,20
00D5E:  DATA 43,6F
00D60:  DATA 75,6E
00D62:  DATA 74,65
00D64:  DATA 72,20
00D66:  DATA 3A,20
00D68:  DATA 30,78
00D6A:  DATA 25,30
00D6C:  DATA 38,4C
00D6E:  DATA 58,0D
00D70:  DATA 0A,00
00D72:  DATA 09,7C
00D74:  DATA 20,4D
00D76:  DATA 49,53
00D78:  DATA 46,20
00D7A:  DATA 7C,20
00D7C:  DATA 50,49
00D7E:  DATA 43,4C
00D80:  DATA 4F,47
00D82:  DATA 20,7C
00D84:  DATA 20,4C
00D86:  DATA 6F,6F
00D88:  DATA 70,20
00D8A:  DATA 43,6F
00D8C:  DATA 75,6E
00D8E:  DATA 74,65
00D90:  DATA 72,20
00D92:  DATA 20,20
00D94:  DATA 20,20
00D96:  DATA 3A,20
00D98:  DATA 30,78
00D9A:  DATA 25,30
00D9C:  DATA 32,58
00D9E:  DATA 0D,0A
00DA0:  DATA 00,00
00DA2:  DATA 09,7C
00DA4:  DATA 20,4D
00DA6:  DATA 49,53
00DA8:  DATA 46,20
00DAA:  DATA 7C,20
00DAC:  DATA 50,49
00DAE:  DATA 43,4C
00DB0:  DATA 4F,47
00DB2:  DATA 20,7C
00DB4:  DATA 20,57
00DB6:  DATA 72,69
00DB8:  DATA 74,65
00DBA:  DATA 20,43
00DBC:  DATA 6F,75
00DBE:  DATA 6E,74
00DC0:  DATA 65,72
00DC2:  DATA 20,20
00DC4:  DATA 20,20
00DC6:  DATA 3A,20
00DC8:  DATA 30,78
00DCA:  DATA 25,30
00DCC:  DATA 32,58
00DCE:  DATA 0D,0A
00DD0:  DATA 00,00
00DD2:  DATA 09,7C
00DD4:  DATA 20,4D
00DD6:  DATA 49,53
00DD8:  DATA 46,20
00DDA:  DATA 7C,20
00DDC:  DATA 4D,45
00DDE:  DATA 41,53
00DE0:  DATA 20,20
00DE2:  DATA 20,7C
00DE4:  DATA 20,55
00DE6:  DATA 73,65
00DE8:  DATA 20,43
00DEA:  DATA 6F,75
00DEC:  DATA 6E,74
00DEE:  DATA 65,72
00DF0:  DATA 20,20
00DF2:  DATA 20,20
00DF4:  DATA 20,20
00DF6:  DATA 3A,20
00DF8:  DATA 30,78
00DFA:  DATA 25,30
00DFC:  DATA 38,4C
00DFE:  DATA 58,0D
00E00:  DATA 0A,00
00E02:  DATA 09,7C
00E04:  DATA 20,4D
00E06:  DATA 49,53
00E08:  DATA 46,20
00E0A:  DATA 7C,20
00E0C:  DATA 4D,45
00E0E:  DATA 41,53
00E10:  DATA 20,20
00E12:  DATA 20,7C
00E14:  DATA 20,55
00E16:  DATA 6E,63
00E18:  DATA 6F,70
00E1A:  DATA 79,65
00E1C:  DATA 64,20
00E1E:  DATA 43,6F
00E20:  DATA 75,6E
00E22:  DATA 74,65
00E24:  DATA 72,20
00E26:  DATA 3A,20
00E28:  DATA 30,78
00E2A:  DATA 25,30
00E2C:  DATA 38,4C
00E2E:  DATA 58,0D
00E30:  DATA 0A,00
00E32:  DATA 09,7C
00E34:  DATA 20,4D
00E36:  DATA 49,53
00E38:  DATA 46,20
00E3A:  DATA 7C,20
00E3C:  DATA 4D,45
00E3E:  DATA 41,53
00E40:  DATA 20,20
00E42:  DATA 20,7C
00E44:  DATA 20,4C
00E46:  DATA 6F,6F
00E48:  DATA 70,20
00E4A:  DATA 43,6F
00E4C:  DATA 75,6E
00E4E:  DATA 74,65
00E50:  DATA 72,20
00E52:  DATA 20,20
00E54:  DATA 20,20
00E56:  DATA 3A,20
00E58:  DATA 30,78
00E5A:  DATA 25,30
00E5C:  DATA 32,58
00E5E:  DATA 0D,0A
00E60:  DATA 00,00
00E62:  DATA 09,43
00E64:  DATA 6F,6D
00E66:  DATA 70,6C
00E68:  DATA 65,74
00E6A:  DATA 65,0D
00E6C:  DATA 0A,00
00E6E:  DATA 4D,69
00E70:  DATA 73,73
00E72:  DATA 69,6F
00E74:  DATA 6E,20
00E76:  DATA 46,6C
00E78:  DATA 61,73
00E7A:  DATA 68,20
00E7C:  DATA 69,73
00E7E:  DATA 20,6E
00E80:  DATA 6F,74
00E82:  DATA 20,63
00E84:  DATA 6F,6E
00E86:  DATA 6E,65
00E88:  DATA 63,74
00E8A:  DATA 65,64
00E8C:  DATA 0D,0A
00E8E:  DATA 00,00
00E90:  DATA 4D,69
00E92:  DATA 73,73
00E94:  DATA 69,6F
00E96:  DATA 6E,20
00E98:  DATA 46,6C
00E9A:  DATA 61,73
00E9C:  DATA 68,20
00E9E:  DATA 69,73
00EA0:  DATA 20,6E
00EA2:  DATA 6F,74
00EA4:  DATA 20,63
00EA6:  DATA 6F,6E
00EA8:  DATA 6E,65
00EAA:  DATA 63,74
00EAC:  DATA 65,64
00EAE:  DATA 0D,0A
00EB0:  DATA 00,00
00EB2:  DATA 57,72
00EB4:  DATA 69,74
00EB6:  DATA 65,20
00EB8:  DATA 4D,49
00EBA:  DATA 53,46
00EBC:  DATA 20,41
00EBE:  DATA 64,64
00EC0:  DATA 72,65
00EC2:  DATA 73,73
00EC4:  DATA 20,41
00EC6:  DATA 72,65
00EC8:  DATA 61,20
00ECA:  DATA 43,6F
00ECC:  DATA 6D,70
00ECE:  DATA 6C,65
00ED0:  DATA 74,65
00ED2:  DATA 0D,0A
00ED4:  DATA 00,00
00ED6:  DATA 4D,69
00ED8:  DATA 73,73
00EDA:  DATA 69,6F
00EDC:  DATA 6E,20
00EDE:  DATA 46,6C
00EE0:  DATA 61,73
00EE2:  DATA 68,20
00EE4:  DATA 69,73
00EE6:  DATA 20,6E
00EE8:  DATA 6F,74
00EEA:  DATA 20,63
00EEC:  DATA 6F,6E
00EEE:  DATA 6E,65
00EF0:  DATA 63,74
00EF2:  DATA 65,64
00EF4:  DATA 0D,0A
00EF6:  DATA 00,00
00EF8:  DATA 0D,0A
00EFA:  DATA 5F,5F
00EFC:  DATA 5F,5F
00EFE:  DATA 5F,5F
00F00:  DATA 5F,5F
00F02:  DATA 5F,5F
00F04:  DATA 5F,5F
00F06:  DATA 5F,5F
00F08:  DATA 5F,5F
00F0A:  DATA 5F,5F
00F0C:  DATA 5F,5F
00F0E:  DATA 5F,5F
00F10:  DATA 5F,5F
00F12:  DATA 5F,5F
00F14:  DATA 5F,5F
00F16:  DATA 5F,5F
00F18:  DATA 0D,0A
00F1A:  DATA 5F,5F
00F1C:  DATA 5F,5F
00F1E:  DATA 5F,53
00F20:  DATA 74,61
00F22:  DATA 72,74
00F24:  DATA 20,65
00F26:  DATA 78,65
00F28:  DATA 63,75
00F2A:  DATA 74,65
00F2C:  DATA 5F,6D
00F2E:  DATA 69,73
00F30:  DATA 73,69
00F32:  DATA 6F,6E
00F34:  DATA 5F,5F
00F36:  DATA 5F,5F
00F38:  DATA 5F,0D
00F3A:  DATA 0A,0D
00F3C:  DATA 0A,00
00F3E:  DATA 43,6F
00F40:  DATA 6D,6D
00F42:  DATA 61,6E
00F44:  DATA 64,20
00F46:  DATA 49,44
00F48:  DATA 3A,20
00F4A:  DATA 25,58
00F4C:  DATA 0D,0A
00F4E:  DATA 0D,0A
00F50:  DATA 00,00
00F52:  DATA 09,09
00F54:  DATA 2D,3E
00F56:  DATA 20,49
00F58:  DATA 6E,76
00F5A:  DATA 61,6C
00F5C:  DATA 69,64
00F5E:  DATA 20,43
00F60:  DATA 4D,44
00F62:  DATA 20,49
00F64:  DATA 44,21
00F66:  DATA 0D,0A
00F68:  DATA 00,00
00F6A:  DATA 0D,0A
00F6C:  DATA 5F,5F
00F6E:  DATA 5F,5F
00F70:  DATA 5F,5F
00F72:  DATA 45,6E
00F74:  DATA 64,20
00F76:  DATA 65,78
00F78:  DATA 65,63
00F7A:  DATA 75,74
00F7C:  DATA 65,5F
00F7E:  DATA 6D,69
00F80:  DATA 73,73
00F82:  DATA 69,6F
00F84:  DATA 6E,5F
00F86:  DATA 5F,5F
00F88:  DATA 5F,5F
00F8A:  DATA 5F,0D
00F8C:  DATA 0A,5F
00F8E:  DATA 5F,5F
00F90:  DATA 5F,5F
00F92:  DATA 5F,5F
00F94:  DATA 5F,5F
00F96:  DATA 5F,5F
00F98:  DATA 5F,5F
00F9A:  DATA 5F,5F
00F9C:  DATA 5F,5F
00F9E:  DATA 5F,5F
00FA0:  DATA 5F,5F
00FA2:  DATA 5F,5F
00FA4:  DATA 5F,5F
00FA6:  DATA 5F,5F
00FA8:  DATA 5F,5F
00FAA:  DATA 5F,5F
00FAC:  DATA 0D,0A
00FAE:  DATA 00,00
00FB0:  DATA 53,74
00FB2:  DATA 61,72
00FB4:  DATA 74,20
00FB6:  DATA 65,78
00FB8:  DATA 65,63
00FBA:  DATA 75,74
00FBC:  DATA 65,5F
00FBE:  DATA 63,6F
00FC0:  DATA 6D,6D
00FC2:  DATA 61,6E
00FC4:  DATA 64,0D
00FC6:  DATA 0A,00
00FC8:  DATA 09,2D
00FCA:  DATA 3E,20
00FCC:  DATA 55,70
00FCE:  DATA 6C,69
00FD0:  DATA 6E,6B
00FD2:  DATA 20,63
00FD4:  DATA 6F,6D
00FD6:  DATA 6D,61
00FD8:  DATA 6E,64
00FDA:  DATA 0D,0A
00FDC:  DATA 00,00
00FDE:  DATA 09,20
00FE0:  DATA 20,20
00FE2:  DATA 54,72
00FE4:  DATA 61,6E
00FE6:  DATA 73,6D
00FE8:  DATA 69,74
00FEA:  DATA 20,41
00FEC:  DATA 63,6B
00FEE:  DATA 6E,6F
00FF0:  DATA 6C,65
00FF2:  DATA 67,64
00FF4:  DATA 65,0D
00FF6:  DATA 0A,00
00FF8:  DATA 09,2D
00FFA:  DATA 3E,20
00FFC:  DATA 53,74
00FFE:  DATA 61,74
01000:  DATA 75,73
01002:  DATA 20,63
01004:  DATA 68,65
01006:  DATA 63,6B
01008:  DATA 0D,0A
0100A:  DATA 00,00
0100C:  DATA 09,20
0100E:  DATA 20,20
01010:  DATA 54,72
01012:  DATA 61,6E
01014:  DATA 73,6D
01016:  DATA 69,74
01018:  DATA 20,4D
0101A:  DATA 49,53
0101C:  DATA 20,4D
0101E:  DATA 43,55
01020:  DATA 20,53
01022:  DATA 74,61
01024:  DATA 74,75
01026:  DATA 73,0D
01028:  DATA 0A,00
0102A:  DATA 66,69
0102C:  DATA 6E,69
0102E:  DATA 73,68
01030:  DATA 65,64
01032:  DATA 20,69
01034:  DATA 6E,20
01036:  DATA 73,74
01038:  DATA 61,74
0103A:  DATA 75,73
0103C:  DATA 5F,63
0103E:  DATA 68,65
01040:  DATA 63,6B
01042:  DATA 0D,0A
01044:  DATA 00,00
01046:  DATA 09,2D
01048:  DATA 3E,20
0104A:  DATA 53,4D
0104C:  DATA 46,20
0104E:  DATA 61,76
01050:  DATA 61,69
01052:  DATA 6C,61
01054:  DATA 62,6C
01056:  DATA 65,20
01058:  DATA 63,68
0105A:  DATA 65,63
0105C:  DATA 6B,0D
0105E:  DATA 0A,00
01060:  DATA 09,20
01062:  DATA 20,20
01064:  DATA 54,72
01066:  DATA 61,6E
01068:  DATA 73,6D
0106A:  DATA 69,74
0106C:  DATA 20,41
0106E:  DATA 63,6B
01070:  DATA 6E,6F
01072:  DATA 6C,65
01074:  DATA 67,64
01076:  DATA 65,0D
01078:  DATA 0A,00
0107A:  DATA 09,09
0107C:  DATA 2D,3E
0107E:  DATA 20,61
01080:  DATA 6C,6C
01082:  DATA 6F,77
01084:  DATA 64,0D
01086:  DATA 0A,00
01088:  DATA 09,09
0108A:  DATA 2D,3E
0108C:  DATA 20,64
0108E:  DATA 65,6E
01090:  DATA 79,65
01092:  DATA 64,0D
01094:  DATA 0A,00
01096:  DATA 53,74
01098:  DATA 61,72
0109A:  DATA 74,20
0109C:  DATA 4D,4F
0109E:  DATA 44,45
010A0:  DATA 20,44
010A2:  DATA 55,4D
010A4:  DATA 4D,59
010A6:  DATA 0D,0A
010A8:  DATA 00,00
010AA:  DATA 09,4D
010AC:  DATA 4F,44
010AE:  DATA 45,20
010B0:  DATA 20,20
010B2:  DATA 20,20
010B4:  DATA 3A,20
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 0D,0A
010BC:  DATA 00,00
010BE:  DATA 09,50
010C0:  DATA 61,72
010C2:  DATA 61,6D
010C4:  DATA 31,20
010C6:  DATA 20,20
010C8:  DATA 3A,20
010CA:  DATA 30,78
010CC:  DATA 25,30
010CE:  DATA 38,4C
010D0:  DATA 58,0D
010D2:  DATA 0A,00
010D4:  DATA 09,50
010D6:  DATA 61,72
010D8:  DATA 61,6D
010DA:  DATA 32,20
010DC:  DATA 20,20
010DE:  DATA 3A,20
010E0:  DATA 30,78
010E2:  DATA 25,30
010E4:  DATA 34,4C
010E6:  DATA 58,0D
010E8:  DATA 0A,00
010EA:  DATA 45,6E
010EC:  DATA 64,20
010EE:  DATA 4D,4F
010F0:  DATA 44,45
010F2:  DATA 20,44
010F4:  DATA 55,4D
010F6:  DATA 4D,59
010F8:  DATA 0D,0A
010FA:  DATA 00,00
010FC:  DATA 53,74
010FE:  DATA 61,72
01100:  DATA 74,20
01102:  DATA 4D,4F
01104:  DATA 44,45
01106:  DATA 20,54
01108:  DATA 45,53
0110A:  DATA 54,20
0110C:  DATA 49,56
0110E:  DATA 0D,0A
01110:  DATA 00,00
01112:  DATA 09,53
01114:  DATA 77,65
01116:  DATA 65,70
01118:  DATA 20,73
0111A:  DATA 74,65
0111C:  DATA 70,20
0111E:  DATA 3A,20
01120:  DATA 25,75
01122:  DATA 0D,0A
01124:  DATA 00,00
01126:  DATA 45,6E
01128:  DATA 64,20
0112A:  DATA 4D,4F
0112C:  DATA 44,45
0112E:  DATA 20,54
01130:  DATA 45,53
01132:  DATA 54,20
01134:  DATA 49,56
01136:  DATA 0D,0A
01138:  DATA 00,00
0113A:  DATA 53,74
0113C:  DATA 61,72
0113E:  DATA 74,20
01140:  DATA 4D,4F
01142:  DATA 44,45
01144:  DATA 20,4D
01146:  DATA 45,41
01148:  DATA 53,55
0114A:  DATA 52,45
0114C:  DATA 0D,0A
0114E:  DATA 00,00
01150:  DATA 53,74
01152:  DATA 61,72
01154:  DATA 74,20
01156:  DATA 53,57
01158:  DATA 45,45
0115A:  DATA 50,0D
0115C:  DATA 0A,00
0115E:  DATA 09,53
01160:  DATA 77,65
01162:  DATA 65,70
01164:  DATA 20,73
01166:  DATA 74,65
01168:  DATA 70,20
0116A:  DATA 3A,20
0116C:  DATA 25,75
0116E:  DATA 0D,0A
01170:  DATA 00,00
01172:  DATA 45,4E
01174:  DATA 44,20
01176:  DATA 53,57
01178:  DATA 45,45
0117A:  DATA 50,0D
0117C:  DATA 0A,00
0117E:  DATA 53,74
01180:  DATA 61,72
01182:  DATA 74,20
01184:  DATA 46,6C
01186:  DATA 61,73
01188:  DATA 68,20
0118A:  DATA 45,72
0118C:  DATA 61,73
0118E:  DATA 65,20
01190:  DATA 41,6C
01192:  DATA 6C,0D
01194:  DATA 0A,00
01196:  DATA 45,6E
01198:  DATA 64,20
0119A:  DATA 46,6C
0119C:  DATA 61,73
0119E:  DATA 68,20
011A0:  DATA 45,72
011A2:  DATA 61,73
011A4:  DATA 65,20
011A6:  DATA 41,6C
011A8:  DATA 6C,0D
011AA:  DATA 0A,00
011AC:  DATA 53,74
011AE:  DATA 61,72
011B0:  DATA 74,20
011B2:  DATA 46,6C
011B4:  DATA 61,73
011B6:  DATA 68,20
011B8:  DATA 45,72
011BA:  DATA 61,73
011BC:  DATA 65,20
011BE:  DATA 31,20
011C0:  DATA 53,65
011C2:  DATA 63,74
011C4:  DATA 6F,72
011C6:  DATA 0D,0A
011C8:  DATA 00,00
011CA:  DATA 09,53
011CC:  DATA 65,63
011CE:  DATA 74,6F
011D0:  DATA 72,20
011D2:  DATA 41,64
011D4:  DATA 64,72
011D6:  DATA 65,73
011D8:  DATA 73,3A
011DA:  DATA 20,30
011DC:  DATA 78,25
011DE:  DATA 30,38
011E0:  DATA 4C,58
011E2:  DATA 0D,0A
011E4:  DATA 00,00
011E6:  DATA 45,6E
011E8:  DATA 64,20
011EA:  DATA 46,6C
011EC:  DATA 61,73
011EE:  DATA 68,20
011F0:  DATA 45,72
011F2:  DATA 61,73
011F4:  DATA 65,20
011F6:  DATA 31,20
011F8:  DATA 53,65
011FA:  DATA 63,74
011FC:  DATA 6F,72
011FE:  DATA 0D,0A
01200:  DATA 00,00
01202:  DATA 53,74
01204:  DATA 61,72
01206:  DATA 74,20
01208:  DATA 46,6C
0120A:  DATA 61,73
0120C:  DATA 68,20
0120E:  DATA 43,6F
01210:  DATA 70,79
01212:  DATA 20,31
01214:  DATA 20,53
01216:  DATA 65,63
01218:  DATA 74,6F
0121A:  DATA 72,0D
0121C:  DATA 0A,00
0121E:  DATA 09,53
01220:  DATA 75,62
01222:  DATA 73,65
01224:  DATA 63,74
01226:  DATA 6F,72
01228:  DATA 20,41
0122A:  DATA 64,64
0122C:  DATA 72,65
0122E:  DATA 73,73
01230:  DATA 3A,20
01232:  DATA 30,78
01234:  DATA 25,30
01236:  DATA 38,4C
01238:  DATA 58,0D
0123A:  DATA 0A,00
0123C:  DATA 45,6E
0123E:  DATA 64,20
01240:  DATA 46,6C
01242:  DATA 61,73
01244:  DATA 68,20
01246:  DATA 43,6F
01248:  DATA 70,79
0124A:  DATA 20,31
0124C:  DATA 20,53
0124E:  DATA 65,63
01250:  DATA 74,6F
01252:  DATA 72,0D
01254:  DATA 0A,00
01256:  DATA 53,74
01258:  DATA 61,72
0125A:  DATA 74,20
0125C:  DATA 46,6C
0125E:  DATA 61,73
01260:  DATA 68,20
01262:  DATA 45,72
01264:  DATA 61,73
01266:  DATA 65,20
01268:  DATA 36,34
0126A:  DATA 6B,42
0126C:  DATA 79,74
0126E:  DATA 65,20
01270:  DATA 53,75
01272:  DATA 62,73
01274:  DATA 65,63
01276:  DATA 74,6F
01278:  DATA 72,0D
0127A:  DATA 0A,00
0127C:  DATA 09,53
0127E:  DATA 75,62
01280:  DATA 73,65
01282:  DATA 63,74
01284:  DATA 6F,72
01286:  DATA 20,41
01288:  DATA 64,64
0128A:  DATA 72,65
0128C:  DATA 73,73
0128E:  DATA 3A,20
01290:  DATA 30,78
01292:  DATA 25,30
01294:  DATA 38,4C
01296:  DATA 58,0D
01298:  DATA 0A,00
0129A:  DATA 45,6E
0129C:  DATA 64,20
0129E:  DATA 46,6C
012A0:  DATA 61,73
012A2:  DATA 68,20
012A4:  DATA 45,72
012A6:  DATA 61,73
012A8:  DATA 65,20
012AA:  DATA 36,34
012AC:  DATA 6B,42
012AE:  DATA 79,74
012B0:  DATA 65,20
012B2:  DATA 53,75
012B4:  DATA 62,73
012B6:  DATA 65,63
012B8:  DATA 74,6F
012BA:  DATA 72,0D
012BC:  DATA 0A,00
012BE:  DATA 53,74
012C0:  DATA 61,72
012C2:  DATA 74,20
012C4:  DATA 46,6C
012C6:  DATA 61,73
012C8:  DATA 68,20
012CA:  DATA 57,72
012CC:  DATA 69,74
012CE:  DATA 65,20
012D0:  DATA 44,65
012D2:  DATA 6D,6F
012D4:  DATA 0D,0A
012D6:  DATA 00,00
012D8:  DATA 09,4D
012DA:  DATA 4F,44
012DC:  DATA 45,20
012DE:  DATA 20,20
012E0:  DATA 20,20
012E2:  DATA 3A,20
012E4:  DATA 25,30
012E6:  DATA 32,58
012E8:  DATA 0D,0A
012EA:  DATA 00,00
012EC:  DATA 09,41
012EE:  DATA 64,64
012F0:  DATA 72,65
012F2:  DATA 73,73
012F4:  DATA 20,20
012F6:  DATA 3A,20
012F8:  DATA 30,78
012FA:  DATA 25,30
012FC:  DATA 38,4C
012FE:  DATA 58,0D
01300:  DATA 0A,00
01302:  DATA 09,50
01304:  DATA 61,63
01306:  DATA 6B,65
01308:  DATA 74,4E
0130A:  DATA 75,6D
0130C:  DATA 3A,20
0130E:  DATA 30,78
01310:  DATA 25,30
01312:  DATA 34,4C
01314:  DATA 58,0D
01316:  DATA 0A,00
01318:  DATA 57,72
0131A:  DATA 69,74
0131C:  DATA 65,20
0131E:  DATA 44,61
01320:  DATA 74,61
01322:  DATA 0D,0A
01324:  DATA 00,00
01326:  DATA 45,6E
01328:  DATA 64,20
0132A:  DATA 46,6C
0132C:  DATA 61,73
0132E:  DATA 68,20
01330:  DATA 57,72
01332:  DATA 69,74
01334:  DATA 65,20
01336:  DATA 44,65
01338:  DATA 6D,6F
0133A:  DATA 0D,0A
0133C:  DATA 00,00
0133E:  DATA 53,74
01340:  DATA 61,72
01342:  DATA 74,20
01344:  DATA 46,6C
01346:  DATA 61,73
01348:  DATA 68,20
0134A:  DATA 57,72
0134C:  DATA 69,74
0134E:  DATA 65,20
01350:  DATA 34,6B
01352:  DATA 42,79
01354:  DATA 74,65
01356:  DATA 20,53
01358:  DATA 75,62
0135A:  DATA 73,65
0135C:  DATA 63,74
0135E:  DATA 6F,72
01360:  DATA 0D,0A
01362:  DATA 00,00
01364:  DATA 45,6E
01366:  DATA 64,20
01368:  DATA 46,6C
0136A:  DATA 61,73
0136C:  DATA 68,20
0136E:  DATA 57,72
01370:  DATA 69,74
01372:  DATA 65,20
01374:  DATA 34,6B
01376:  DATA 42,79
01378:  DATA 74,65
0137A:  DATA 20,53
0137C:  DATA 75,62
0137E:  DATA 73,65
01380:  DATA 63,74
01382:  DATA 6F,72
01384:  DATA 0D,0A
01386:  DATA 00,00
01388:  DATA 53,74
0138A:  DATA 61,72
0138C:  DATA 74,20
0138E:  DATA 46,6C
01390:  DATA 61,73
01392:  DATA 68,20
01394:  DATA 52,65
01396:  DATA 61,64
01398:  DATA 0D,0A
0139A:  DATA 00,00
0139C:  DATA 09,4D
0139E:  DATA 4F,44
013A0:  DATA 45,20
013A2:  DATA 20,20
013A4:  DATA 20,20
013A6:  DATA 3A,20
013A8:  DATA 25,30
013AA:  DATA 32,58
013AC:  DATA 0D,0A
013AE:  DATA 00,00
013B0:  DATA 09,41
013B2:  DATA 64,64
013B4:  DATA 72,65
013B6:  DATA 73,73
013B8:  DATA 20,20
013BA:  DATA 3A,20
013BC:  DATA 30,78
013BE:  DATA 25,30
013C0:  DATA 38,4C
013C2:  DATA 58,0D
013C4:  DATA 0A,00
013C6:  DATA 09,50
013C8:  DATA 61,63
013CA:  DATA 6B,65
013CC:  DATA 74,4E
013CE:  DATA 75,6D
013D0:  DATA 3A,20
013D2:  DATA 30,78
013D4:  DATA 25,30
013D6:  DATA 34,4C
013D8:  DATA 58,0D
013DA:  DATA 0A,00
013DC:  DATA 52,45
013DE:  DATA 41,44
013E0:  DATA 20,44
013E2:  DATA 41,54
013E4:  DATA 41,0D
013E6:  DATA 0A,00
013E8:  DATA 4D,69
013EA:  DATA 73,73
013EC:  DATA 69,6F
013EE:  DATA 6E,20
013F0:  DATA 46,6C
013F2:  DATA 61,73
013F4:  DATA 68,20
013F6:  DATA 69,73
013F8:  DATA 20,6E
013FA:  DATA 6F,74
013FC:  DATA 20,63
013FE:  DATA 6F,6E
01400:  DATA 6E,65
01402:  DATA 63,74
01404:  DATA 65,64
01406:  DATA 0D,0A
01408:  DATA 00,00
0140A:  DATA 45,6E
0140C:  DATA 64,20
0140E:  DATA 46,6C
01410:  DATA 61,73
01412:  DATA 68,20
01414:  DATA 52,65
01416:  DATA 61,64
01418:  DATA 0D,0A
0141A:  DATA 00,00
0141C:  DATA 53,74
0141E:  DATA 61,72
01420:  DATA 74,20
01422:  DATA 46,6C
01424:  DATA 61,73
01426:  DATA 68,20
01428:  DATA 52,65
0142A:  DATA 61,64
0142C:  DATA 20,41
0142E:  DATA 64,64
01430:  DATA 72,65
01432:  DATA 73,73
01434:  DATA 0D,0A
01436:  DATA 00,00
01438:  DATA 52,65
0143A:  DATA 61,64
0143C:  DATA 20,44
0143E:  DATA 61,74
01440:  DATA 61,3A
01442:  DATA 20,25
01444:  DATA 30,32
01446:  DATA 58,20
01448:  DATA 25,30
0144A:  DATA 32,58
0144C:  DATA 20,25
0144E:  DATA 30,32
01450:  DATA 58,20
01452:  DATA 25,30
01454:  DATA 32,58
01456:  DATA 0D,0A
01458:  DATA 00,00
0145A:  DATA 45,6E
0145C:  DATA 64,20
0145E:  DATA 46,6C
01460:  DATA 61,73
01462:  DATA 68,20
01464:  DATA 52,65
01466:  DATA 61,64
01468:  DATA 20,41
0146A:  DATA 64,64
0146C:  DATA 72,65
0146E:  DATA 73,73
01470:  DATA 0D,0A
01472:  DATA 00,00
01474:  DATA 53,74
01476:  DATA 61,72
01478:  DATA 74,20
0147A:  DATA 46,6C
0147C:  DATA 61,73
0147E:  DATA 68,20
01480:  DATA 45,72
01482:  DATA 61,73
01484:  DATA 65,20
01486:  DATA 61,6E
01488:  DATA 64,20
0148A:  DATA 52,65
0148C:  DATA 73,65
0148E:  DATA 74,0D
01490:  DATA 0A,00
01492:  DATA 45,6E
01494:  DATA 64,20
01496:  DATA 46,6C
01498:  DATA 61,73
0149A:  DATA 68,20
0149C:  DATA 45,72
0149E:  DATA 61,73
014A0:  DATA 65,20
014A2:  DATA 61,6E
014A4:  DATA 64,20
014A6:  DATA 52,65
014A8:  DATA 73,65
014AA:  DATA 74,0D
014AC:  DATA 0A,00
014AE:  DATA 53,74
014B0:  DATA 61,72
014B2:  DATA 74,20
014B4:  DATA 46,6C
014B6:  DATA 61,73
014B8:  DATA 68,20
014BA:  DATA 41,64
014BC:  DATA 64,72
014BE:  DATA 65,73
014C0:  DATA 73,20
014C2:  DATA 52,65
014C4:  DATA 73,65
014C6:  DATA 74,0D
014C8:  DATA 0A,00
014CA:  DATA 45,6E
014CC:  DATA 64,20
014CE:  DATA 46,6C
014D0:  DATA 61,73
014D2:  DATA 68,20
014D4:  DATA 41,64
014D6:  DATA 64,72
014D8:  DATA 65,73
014DA:  DATA 73,20
014DC:  DATA 52,65
014DE:  DATA 73,65
014E0:  DATA 74,0D
014E2:  DATA 0A,00
014E4:  DATA 53,74
014E6:  DATA 61,72
014E8:  DATA 74,20
014EA:  DATA 46,6C
014EC:  DATA 61,73
014EE:  DATA 68,20
014F0:  DATA 53,4D
014F2:  DATA 46,20
014F4:  DATA 43,6F
014F6:  DATA 70,79
014F8:  DATA 0D,0A
014FA:  DATA 00,00
014FC:  DATA 45,6E
014FE:  DATA 64,20
01500:  DATA 46,6C
01502:  DATA 61,73
01504:  DATA 68,20
01506:  DATA 53,4D
01508:  DATA 46,20
0150A:  DATA 43,6F
0150C:  DATA 70,79
0150E:  DATA 0D,0A
01510:  DATA 00,00
01512:  DATA 53,74
01514:  DATA 61,72
01516:  DATA 74,20
01518:  DATA 46,6C
0151A:  DATA 61,73
0151C:  DATA 68,20
0151E:  DATA 53,4D
01520:  DATA 46,20
01522:  DATA 52,65
01524:  DATA 61,64
01526:  DATA 0D,0A
01528:  DATA 00,00
0152A:  DATA 52,65
0152C:  DATA 61,64
0152E:  DATA 20,44
01530:  DATA 61,74
01532:  DATA 61,3A
01534:  DATA 20,00
01536:  DATA 0D,0A
01538:  DATA 45,6E
0153A:  DATA 64,20
0153C:  DATA 46,6C
0153E:  DATA 61,73
01540:  DATA 68,20
01542:  DATA 53,4D
01544:  DATA 46,20
01546:  DATA 52,65
01548:  DATA 61,64
0154A:  DATA 0D,0A
0154C:  DATA 00,00
0154E:  DATA 53,74
01550:  DATA 61,72
01552:  DATA 74,20
01554:  DATA 46,6C
01556:  DATA 61,73
01558:  DATA 68,20
0155A:  DATA 53,4D
0155C:  DATA 46,20
0155E:  DATA 45,72
01560:  DATA 61,73
01562:  DATA 65,0D
01564:  DATA 0A,00
01566:  DATA 45,6E
01568:  DATA 64,20
0156A:  DATA 46,6C
0156C:  DATA 61,73
0156E:  DATA 68,20
01570:  DATA 53,4D
01572:  DATA 46,20
01574:  DATA 45,72
01576:  DATA 61,73
01578:  DATA 65,0D
0157A:  DATA 0A,00
0157C:  DATA 53,74
0157E:  DATA 61,72
01580:  DATA 74,20
01582:  DATA 46,6C
01584:  DATA 61,73
01586:  DATA 68,20
01588:  DATA 41,64
0158A:  DATA 64,72
0158C:  DATA 65,73
0158E:  DATA 73,20
01590:  DATA 52,65
01592:  DATA 73,65
01594:  DATA 74,0D
01596:  DATA 0A,00
01598:  DATA 45,6E
0159A:  DATA 64,20
0159C:  DATA 46,6C
0159E:  DATA 61,73
015A0:  DATA 68,20
015A2:  DATA 41,64
015A4:  DATA 64,72
015A6:  DATA 65,73
015A8:  DATA 73,20
015AA:  DATA 52,65
015AC:  DATA 73,65
015AE:  DATA 74,0D
015B0:  DATA 0A,00
015B2:  DATA 53,74
015B4:  DATA 61,72
015B6:  DATA 74,20
015B8:  DATA 46,6C
015BA:  DATA 61,73
015BC:  DATA 68,20
015BE:  DATA 53,4D
015C0:  DATA 46,20
015C2:  DATA 52,65
015C4:  DATA 61,64
015C6:  DATA 20,46
015C8:  DATA 6F,72
015CA:  DATA 63,65
015CC:  DATA 0D,0A
015CE:  DATA 00,00
015D0:  DATA 09,41
015D2:  DATA 64,64
015D4:  DATA 72,65
015D6:  DATA 73,73
015D8:  DATA 20,20
015DA:  DATA 3A,20
015DC:  DATA 30,78
015DE:  DATA 25,30
015E0:  DATA 38,4C
015E2:  DATA 58,0D
015E4:  DATA 0A,00
015E6:  DATA 09,50
015E8:  DATA 61,63
015EA:  DATA 6B,65
015EC:  DATA 74,4E
015EE:  DATA 75,6D
015F0:  DATA 3A,20
015F2:  DATA 30,78
015F4:  DATA 25,30
015F6:  DATA 34,4C
015F8:  DATA 58,0D
015FA:  DATA 0A,00
015FC:  DATA 72,65
015FE:  DATA 61,64
01600:  DATA 20,64
01602:  DATA 61,74
01604:  DATA 61,0D
01606:  DATA 0A,00
01608:  DATA 53,4D
0160A:  DATA 46,20
0160C:  DATA 69,73
0160E:  DATA 20,6E
01610:  DATA 6F,74
01612:  DATA 20,63
01614:  DATA 6F,6E
01616:  DATA 6E,65
01618:  DATA 63,74
0161A:  DATA 65,64
0161C:  DATA 0D,0A
0161E:  DATA 00,00
01620:  DATA 0D,0A
01622:  DATA 45,6E
01624:  DATA 64,20
01626:  DATA 46,6C
01628:  DATA 61,73
0162A:  DATA 68,20
0162C:  DATA 53,4D
0162E:  DATA 46,20
01630:  DATA 52,65
01632:  DATA 61,64
01634:  DATA 20,46
01636:  DATA 6F,72
01638:  DATA 63,65
0163A:  DATA 0D,0A
0163C:  DATA 00,00
0163E:  DATA 53,74
01640:  DATA 61,72
01642:  DATA 74,20
01644:  DATA 53,4D
01646:  DATA 46,20
01648:  DATA 45,72
0164A:  DATA 61,73
0164C:  DATA 65,20
0164E:  DATA 41,6C
01650:  DATA 6C,0D
01652:  DATA 0A,00
01654:  DATA 45,6E
01656:  DATA 64,20
01658:  DATA 53,4D
0165A:  DATA 46,20
0165C:  DATA 45,72
0165E:  DATA 61,73
01660:  DATA 65,20
01662:  DATA 41,6C
01664:  DATA 6C,0D
01666:  DATA 0A,00
01668:  DATA 53,74
0166A:  DATA 61,72
0166C:  DATA 74,20
0166E:  DATA 53,4D
01670:  DATA 46,20
01672:  DATA 52,65
01674:  DATA 73,65
01676:  DATA 74,0D
01678:  DATA 0A,00
0167A:  DATA 45,6E
0167C:  DATA 64,20
0167E:  DATA 53,4D
01680:  DATA 46,20
01682:  DATA 52,65
01684:  DATA 73,65
01686:  DATA 74,0D
01688:  DATA 0A,00
0168A:  DATA 0D,0A
0168C:  DATA 0D,0A
0168E:  DATA 0D,0A
01690:  DATA 3D,3D
01692:  DATA 3D,3D
01694:  DATA 3D,3D
01696:  DATA 3D,3D
01698:  DATA 3D,3D
0169A:  DATA 3D,3D
0169C:  DATA 3D,3D
0169E:  DATA 3D,3D
016A0:  DATA 3D,3D
016A2:  DATA 3D,3D
016A4:  DATA 3D,3D
016A6:  DATA 3D,3D
016A8:  DATA 3D,3D
016AA:  DATA 3D,3D
016AC:  DATA 3D,3D
016AE:  DATA 3D,3D
016B0:  DATA 3D,3D
016B2:  DATA 3D,3D
016B4:  DATA 3D,3D
016B6:  DATA 3D,3D
016B8:  DATA 3D,3D
016BA:  DATA 3D,3D
016BC:  DATA 3D,3D
016BE:  DATA 3D,3D
016C0:  DATA 3D,3D
016C2:  DATA 3D,3D
016C4:  DATA 3D,3D
016C6:  DATA 3D,3D
016C8:  DATA 3D,3D
016CA:  DATA 3D,3D
016CC:  DATA 0D,0A
016CE:  DATA 00,00
016D0:  DATA 54,68
016D2:  DATA 69,73
016D4:  DATA 20,69
016D6:  DATA 73,20
016D8:  DATA 4D,4F
016DA:  DATA 4D,49
016DC:  DATA 4A,49
016DE:  DATA 20,43
016E0:  DATA 49,47
016E2:  DATA 53,20
016E4:  DATA 50,49
016E6:  DATA 43,20
016E8:  DATA 42,42
016EA:  DATA 4D,20
016EC:  DATA 66,6F
016EE:  DATA 72,20
016F0:  DATA 4D,49
016F2:  DATA 53,37
016F4:  DATA 5F,42
016F6:  DATA 42,4D
016F8:  DATA 33,2E
016FA:  DATA 0D,0A
016FC:  DATA 00,00
016FE:  DATA 4C,61
01700:  DATA 73,74
01702:  DATA 20,75
01704:  DATA 70,64
01706:  DATA 61,74
01708:  DATA 65,64
0170A:  DATA 20,6F
0170C:  DATA 6E,20
0170E:  DATA 25,73
01710:  DATA 20,25
01712:  DATA 73,2C
01714:  DATA 20,62
01716:  DATA 79,20
01718:  DATA 49,6E
0171A:  DATA 6F,75
0171C:  DATA 65,2E
0171E:  DATA 0D,0A
01720:  DATA 0D,0A
01722:  DATA 00,00
01724:  DATA 32,36
01726:  DATA 2D,4A
01728:  DATA 75,6C
0172A:  DATA 2D,32
0172C:  DATA 35,00
0172E:  DATA 31,36
01730:  DATA 3A,35
01732:  DATA 30,3A
01734:  DATA 34,33
01736:  DATA 00,00
01738:  DATA 5F,5F
0173A:  DATA 5F,5F
0173C:  DATA 43,49
0173E:  DATA 47,53
01740:  DATA 20,50
01742:  DATA 49,43
01744:  DATA 20,53
01746:  DATA 74,61
01748:  DATA 72,74
0174A:  DATA 20,4F
0174C:  DATA 70,65
0174E:  DATA 72,61
01750:  DATA 74,69
01752:  DATA 6F,6E
01754:  DATA 5F,5F
01756:  DATA 5F,5F
01758:  DATA 5F,0D
0175A:  DATA 0A,0D
0175C:  DATA 0A,00
0175E:  DATA 77,61
01760:  DATA 69,74
01762:  DATA 69,6E
01764:  DATA 67,20
01766:  DATA 66,6F
01768:  DATA 72,20
0176A:  DATA 42,4F
0176C:  DATA 53,53
0176E:  DATA 20,50
01770:  DATA 49,43
01772:  DATA 20,63
01774:  DATA 6F,6D
01776:  DATA 6D,61
01778:  DATA 6E,64
0177A:  DATA 00,00
0177C:  DATA 0D,0A
0177E:  DATA 77,61
01780:  DATA 69,74
01782:  DATA 69,6E
01784:  DATA 67,20
01786:  DATA 66,6F
01788:  DATA 72,20
0178A:  DATA 42,4F
0178C:  DATA 53,53
0178E:  DATA 20,50
01790:  DATA 49,43
01792:  DATA 20,63
01794:  DATA 6F,6D
01796:  DATA 6D,61
01798:  DATA 6E,64
0179A:  DATA 00,00
0179C:  DATA 0D,0A
0179E:  DATA 0D,0A
017A0:  DATA 3D,3D
017A2:  DATA 3D,3D
017A4:  DATA 3D,3D
017A6:  DATA 0D,0A
017A8:  DATA 0D,0A
017AA:  DATA 46,69
017AC:  DATA 6E,69
017AE:  DATA 73,68
017B0:  DATA 65,64
017B2:  DATA 20,70
017B4:  DATA 72,6F
017B6:  DATA 63,65
017B8:  DATA 73,73
017BA:  DATA 2E,0D
017BC:  DATA 0A,57
017BE:  DATA 61,69
017C0:  DATA 74,20
017C2:  DATA 66,6F
017C4:  DATA 72,20
017C6:  DATA 42,4F
017C8:  DATA 53,53
017CA:  DATA 20,50
017CC:  DATA 49,43
017CE:  DATA 20,74
017D0:  DATA 75,72
017D2:  DATA 6E,20
017D4:  DATA 6F,66
017D6:  DATA 66,20
017D8:  DATA 6D,65
017DA:  DATA 00,00
017DC:  DATA 45,6E
017DE:  DATA 64,20
017E0:  DATA 6D,61
017E2:  DATA 69,6E
017E4:  DATA 0D,0A
017E6:  DATA 00,00
*
01868:  TBLRD*+
0186A:  MOVF   FF5,F
0186C:  BTFSC  FD8.2
0186E:  GOTO   1896
01872:  MOVFF  FF6,82C
01876:  MOVFF  FF7,82D
0187A:  MOVFF  FF8,82E
0187E:  MOVFF  FF5,82F
01882:  CALL   1816
01886:  MOVFF  82C,FF6
0188A:  MOVFF  82D,FF7
0188E:  MOVFF  82E,FF8
01892:  GOTO   1868
01896:  RETURN 0
01898:  TBLRD*+
0189A:  MOVFF  FF6,7ED
0189E:  MOVFF  FF7,7EE
018A2:  MOVFF  FF8,7EF
018A6:  MOVFF  FF5,82F
018AA:  CALL   1816
018AE:  MOVFF  7ED,FF6
018B2:  MOVFF  7EE,FF7
018B6:  MOVFF  7EF,FF8
018BA:  MOVLB  7
018BC:  DECFSZ xEC,F
018BE:  BRA    18C4
018C0:  BRA    18CA
018C2:  MOVLB  0
018C4:  MOVLB  0
018C6:  GOTO   1898
018CA:  MOVLB  0
018CC:  RETURN 0
*
01A5A:  MOVLB  4
01A5C:  BTFSS  x28.7
01A5E:  BRA    1A66
01A60:  MOVLB  0
01A62:  GOTO   1A96
01A66:  MOVLW  0F
01A68:  MOVWF  00
01A6A:  SWAPF  x27,W
01A6C:  ANDWF  00,F
01A6E:  MOVLW  0A
01A70:  SUBWF  00,W
01A72:  BTFSS  FD8.0
01A74:  BRA    1A7C
01A76:  MOVLB  0
01A78:  GOTO   1A86
01A7C:  MOVLW  30
01A7E:  ADDWF  00,F
01A80:  MOVLB  0
01A82:  GOTO   1A8E
01A86:  MOVLB  4
01A88:  MOVF   x28,W
01A8A:  ADDWF  00,F
01A8C:  MOVLB  0
01A8E:  MOVFF  00,82F
01A92:  CALL   1816
01A96:  MOVLW  0F
01A98:  MOVLB  4
01A9A:  ANDWF  x27,F
01A9C:  MOVLW  0A
01A9E:  SUBWF  x27,W
01AA0:  BTFSS  FD8.0
01AA2:  BRA    1AAA
01AA4:  MOVLB  0
01AA6:  GOTO   1AB2
01AAA:  MOVLW  30
01AAC:  MOVLB  0
01AAE:  GOTO   1ABA
01AB2:  MOVLB  4
01AB4:  BCF    x28.7
01AB6:  MOVF   x28,W
01AB8:  MOVLB  0
01ABA:  MOVLB  4
01ABC:  ADDWF  x27,F
01ABE:  MOVFF  427,82F
01AC2:  MOVLB  0
01AC4:  CALL   1816
01AC8:  RETURN 0
*
01BB6:  MOVLB  8
01BB8:  MOVF   x4A,W
01BBA:  ANDLW  07
01BBC:  MOVWF  00
01BBE:  RRCF   x4A,W
01BC0:  MOVWF  01
01BC2:  RRCF   01,F
01BC4:  RRCF   01,F
01BC6:  MOVLW  1F
01BC8:  ANDWF  01,F
01BCA:  MOVF   01,W
01BCC:  ADDWF  x4C,W
01BCE:  MOVWF  FE9
01BD0:  MOVLW  00
01BD2:  ADDWFC x4D,W
01BD4:  MOVWF  FEA
01BD6:  CLRF   01
01BD8:  INCF   01,F
01BDA:  INCF   00,F
01BDC:  MOVLB  0
01BDE:  GOTO   1BE4
01BE2:  RLCF   01,F
01BE4:  DECFSZ 00,F
01BE6:  GOTO   1BE2
01BEA:  MOVLB  8
01BEC:  MOVF   x4B,F
01BEE:  BTFSS  FD8.2
01BF0:  BRA    1BF8
01BF2:  MOVLB  0
01BF4:  GOTO   1C02
01BF8:  MOVF   01,W
01BFA:  IORWF  FEF,F
01BFC:  MOVLB  0
01BFE:  GOTO   1C08
01C02:  COMF   01,F
01C04:  MOVF   01,W
01C06:  ANDWF  FEF,F
01C08:  RETURN 0
*
040AA:  TSTFSZ 01
040AC:  GOTO   40BA
040B0:  TSTFSZ 02
040B2:  GOTO   40BC
040B6:  GOTO   40CC
040BA:  INCF   02,F
040BC:  MOVFF  00,FEE
040C0:  DECFSZ 01,F
040C2:  GOTO   40BC
040C6:  DECFSZ 02,F
040C8:  GOTO   40BC
040CC:  RETURN 0
*
044B4:  MOVLB  7
044B6:  MOVF   xEF,W
044B8:  CLRF   01
044BA:  SUBWF  xEE,W
044BC:  BTFSS  FD8.0
044BE:  BRA    44C6
044C0:  MOVLB  0
044C2:  GOTO   44D0
044C6:  MOVF   xEE,W
044C8:  MOVWF  00
044CA:  MOVLB  0
044CC:  GOTO   44FA
044D0:  CLRF   00
044D2:  MOVLW  08
044D4:  MOVLB  7
044D6:  MOVWF  xF0
044D8:  MOVLB  0
044DA:  MOVLB  7
044DC:  RLCF   xEE,F
044DE:  RLCF   00,F
044E0:  MOVF   xEF,W
044E2:  SUBWF  00,W
044E4:  BTFSC  FD8.0
044E6:  MOVWF  00
044E8:  RLCF   01,F
044EA:  DECFSZ xF0,F
044EC:  BRA    44F2
044EE:  BRA    44F8
044F0:  MOVLB  0
044F2:  MOVLB  0
044F4:  GOTO   44DA
044F8:  MOVLB  0
044FA:  RETURN 0
044FC:  MOVF   01,W
044FE:  MOVFF  7EC,7EE
04502:  MOVLW  64
04504:  MOVLB  7
04506:  MOVWF  xEF
04508:  MOVLB  0
0450A:  CALL   44B4
0450E:  MOVFF  00,7EC
04512:  MOVF   01,W
04514:  MOVLW  30
04516:  BTFSS  FD8.2
04518:  GOTO   453C
0451C:  MOVLB  7
0451E:  BTFSC  xED.1
04520:  BRA    4528
04522:  MOVLB  0
04524:  GOTO   4550
04528:  BTFSS  xED.3
0452A:  BRA    4532
0452C:  MOVLB  0
0452E:  GOTO   4550
04532:  BTFSC  xED.4
04534:  MOVLW  20
04536:  MOVLB  0
04538:  GOTO   4546
0453C:  MOVLB  7
0453E:  BCF    xED.3
04540:  BCF    xED.4
04542:  BSF    xED.0
04544:  MOVLB  0
04546:  ADDWF  01,F
04548:  MOVFF  01,82F
0454C:  CALL   1816
04550:  MOVFF  7EC,7EE
04554:  MOVLW  0A
04556:  MOVLB  7
04558:  MOVWF  xEF
0455A:  MOVLB  0
0455C:  CALL   44B4
04560:  MOVFF  00,7EC
04564:  MOVF   01,W
04566:  MOVLW  30
04568:  BTFSS  FD8.2
0456A:  GOTO   458A
0456E:  MOVLB  7
04570:  BTFSS  xED.3
04572:  BRA    457A
04574:  MOVLB  0
04576:  GOTO   4594
0457A:  BTFSC  xED.0
0457C:  BRA    4584
0457E:  MOVLB  0
04580:  GOTO   4594
04584:  BTFSC  xED.4
04586:  MOVLW  20
04588:  MOVLB  0
0458A:  ADDWF  01,F
0458C:  MOVFF  01,82F
04590:  CALL   1816
04594:  MOVLW  30
04596:  MOVLB  7
04598:  ADDWF  xEC,F
0459A:  MOVFF  7EC,82F
0459E:  MOVLB  0
045A0:  CALL   1816
045A4:  RETURN 0
*
0473A:  MOVFF  FEA,39E
0473E:  MOVFF  FE9,39D
04742:  MOVLB  3
04744:  SWAPF  x97,W
04746:  IORLW  F0
04748:  MOVWF  x99
0474A:  ADDWF  x99,F
0474C:  ADDLW  E2
0474E:  MOVWF  x9A
04750:  ADDLW  32
04752:  MOVWF  x9C
04754:  MOVF   x97,W
04756:  ANDLW  0F
04758:  ADDWF  x9A,F
0475A:  ADDWF  x9A,F
0475C:  ADDWF  x9C,F
0475E:  ADDLW  E9
04760:  MOVWF  x9B
04762:  ADDWF  x9B,F
04764:  ADDWF  x9B,F
04766:  SWAPF  x96,W
04768:  ANDLW  0F
0476A:  ADDWF  x9B,F
0476C:  ADDWF  x9C,F
0476E:  RLCF   x9B,F
04770:  RLCF   x9C,F
04772:  COMF   x9C,F
04774:  RLCF   x9C,F
04776:  MOVF   x96,W
04778:  ANDLW  0F
0477A:  ADDWF  x9C,F
0477C:  RLCF   x99,F
0477E:  MOVLW  07
04780:  MOVWF  x98
04782:  MOVLW  0A
04784:  MOVLB  0
04786:  MOVLB  3
04788:  DECF   x9B,F
0478A:  ADDWF  x9C,F
0478C:  BTFSC  FD8.0
0478E:  BRA    4796
04790:  MOVLB  0
04792:  GOTO   4786
04796:  MOVLB  0
04798:  MOVLB  3
0479A:  DECF   x9A,F
0479C:  ADDWF  x9B,F
0479E:  BTFSC  FD8.0
047A0:  BRA    47A8
047A2:  MOVLB  0
047A4:  GOTO   4798
047A8:  MOVLB  0
047AA:  MOVLB  3
047AC:  DECF   x99,F
047AE:  ADDWF  x9A,F
047B0:  BTFSC  FD8.0
047B2:  BRA    47BA
047B4:  MOVLB  0
047B6:  GOTO   47AA
047BA:  MOVLB  0
047BC:  MOVLB  3
047BE:  DECF   x98,F
047C0:  ADDWF  x99,F
047C2:  BTFSC  FD8.0
047C4:  BRA    47CC
047C6:  MOVLB  0
047C8:  GOTO   47BC
047CC:  MOVLW  03
047CE:  MOVWF  FEA
047D0:  MOVLW  98
047D2:  MOVWF  FE9
047D4:  MOVLW  07
047D6:  ANDWF  x9D,W
047D8:  BCF    x9D.6
047DA:  MOVLB  0
047DC:  ADDWF  FE9,F
047DE:  MOVLW  00
047E0:  ADDWFC FEA,F
047E2:  MOVF   FE9,W
047E4:  SUBLW  9C
047E6:  BTFSS  FD8.2
047E8:  GOTO   47FC
047EC:  MOVF   FEA,W
047EE:  SUBLW  03
047F0:  BTFSS  FD8.2
047F2:  GOTO   47FC
047F6:  MOVLB  3
047F8:  BSF    x9D.6
047FA:  MOVLB  0
047FC:  MOVF   FEF,W
047FE:  MOVWF  00
04800:  BTFSS  FD8.2
04802:  GOTO   482E
04806:  MOVLB  3
04808:  BTFSS  x9D.6
0480A:  BRA    4812
0480C:  MOVLB  0
0480E:  GOTO   482E
04812:  BTFSS  x9D.4
04814:  BRA    481C
04816:  MOVLB  0
04818:  GOTO   4852
0481C:  BTFSS  x9D.3
0481E:  BRA    4826
04820:  MOVLB  0
04822:  GOTO   482E
04826:  MOVLW  20
04828:  MOVLB  0
0482A:  GOTO   4838
0482E:  MOVLB  3
04830:  BSF    x9D.3
04832:  BCF    x9D.4
04834:  MOVLW  30
04836:  MOVLB  0
04838:  ADDWF  00,F
0483A:  MOVFF  FEA,397
0483E:  MOVFF  FE9,396
04842:  MOVFF  00,82F
04846:  CALL   1816
0484A:  MOVFF  397,FEA
0484E:  MOVFF  396,FE9
04852:  MOVF   FEE,W
04854:  MOVLB  3
04856:  BTFSC  x9D.6
04858:  BRA    4860
0485A:  MOVLB  0
0485C:  GOTO   47E2
04860:  MOVLB  0
04862:  RETURN 0
*
07306:  MOVLW  20
07308:  MOVLB  4
0730A:  BTFSS  x1A.4
0730C:  MOVLW  30
0730E:  MOVWF  x1B
07310:  MOVFF  419,00
07314:  BTFSC  00.7
07316:  BRA    731E
07318:  MOVLB  0
0731A:  GOTO   7330
0731E:  COMF   00,F
07320:  INCF   00,F
07322:  MOVFF  00,419
07326:  MOVLW  2D
07328:  MOVWF  x1B
0732A:  BSF    x1A.7
0732C:  BSF    x1A.0
0732E:  MOVLB  0
07330:  MOVF   01,W
07332:  MOVFF  419,7EE
07336:  MOVLW  64
07338:  MOVLB  7
0733A:  MOVWF  xEF
0733C:  MOVLB  0
0733E:  CALL   44B4
07342:  MOVFF  00,419
07346:  MOVLW  30
07348:  ADDWF  01,W
0734A:  MOVLB  4
0734C:  MOVWF  x1C
0734E:  MOVFF  419,7EE
07352:  MOVLW  0A
07354:  MOVLB  7
07356:  MOVWF  xEF
07358:  MOVLB  0
0735A:  CALL   44B4
0735E:  MOVLW  30
07360:  ADDWF  00,W
07362:  MOVLB  4
07364:  MOVWF  x1E
07366:  MOVLW  30
07368:  ADDWF  01,W
0736A:  MOVWF  x1D
0736C:  MOVFF  41B,00
07370:  MOVLB  0
07372:  MOVLW  30
07374:  MOVLB  4
07376:  SUBWF  x1C,W
07378:  BTFSS  FD8.2
0737A:  BRA    7382
0737C:  MOVLB  0
0737E:  GOTO   738E
07382:  BSF    x1A.1
07384:  BTFSC  x1A.7
07386:  BSF    x1A.2
07388:  MOVLB  0
0738A:  GOTO   73CE
0738E:  MOVFF  41B,41C
07392:  MOVLW  20
07394:  MOVLB  4
07396:  MOVWF  x1B
07398:  MOVLW  30
0739A:  SUBWF  x1D,W
0739C:  BTFSS  FD8.2
0739E:  BRA    73A6
073A0:  MOVLB  0
073A2:  GOTO   73B2
073A6:  BSF    x1A.0
073A8:  BTFSC  x1A.7
073AA:  BSF    x1A.1
073AC:  MOVLB  0
073AE:  GOTO   73CE
073B2:  BTFSC  FD8.2
073B4:  BRA    73BC
073B6:  MOVLB  4
073B8:  BSF    x1A.0
073BA:  MOVLB  0
073BC:  BTFSS  FD8.2
073BE:  GOTO   73CE
073C2:  MOVFF  41C,41D
073C6:  MOVLW  20
073C8:  MOVLB  4
073CA:  MOVWF  x1C
073CC:  MOVLB  0
073CE:  MOVLB  4
073D0:  BTFSS  x1A.2
073D2:  BRA    73DA
073D4:  MOVLB  0
073D6:  GOTO   73F4
073DA:  BTFSS  x1A.1
073DC:  BRA    73E4
073DE:  MOVLB  0
073E0:  GOTO   73FC
073E4:  BTFSS  x1A.0
073E6:  BRA    73EE
073E8:  MOVLB  0
073EA:  GOTO   7404
073EE:  MOVLB  0
073F0:  GOTO   740C
073F4:  MOVFF  41B,82F
073F8:  CALL   1816
073FC:  MOVFF  41C,82F
07400:  CALL   1816
07404:  MOVFF  41D,82F
07408:  CALL   1816
0740C:  MOVFF  41E,82F
07410:  CALL   1816
07414:  RETURN 0
*
0750E:  BTFSC  FD8.1
07510:  GOTO   751C
07514:  MOVLW  04
07516:  MOVWF  FEA
07518:  MOVLW  29
0751A:  MOVWF  FE9
0751C:  CLRF   00
0751E:  CLRF   01
07520:  CLRF   02
07522:  CLRF   03
07524:  MOVLB  4
07526:  CLRF   x29
07528:  CLRF   x2A
0752A:  CLRF   x2B
0752C:  CLRF   x2C
0752E:  MOVF   x28,W
07530:  IORWF  x27,W
07532:  IORWF  x26,W
07534:  IORWF  x25,W
07536:  BTFSS  FD8.2
07538:  BRA    7540
0753A:  MOVLB  0
0753C:  GOTO   75D0
07540:  MOVLB  0
07542:  MOVLW  20
07544:  MOVLB  4
07546:  MOVWF  x2D
07548:  MOVLB  0
0754A:  BCF    FD8.0
0754C:  MOVLB  4
0754E:  RLCF   x21,F
07550:  RLCF   x22,F
07552:  RLCF   x23,F
07554:  RLCF   x24,F
07556:  RLCF   x29,F
07558:  RLCF   x2A,F
0755A:  RLCF   x2B,F
0755C:  RLCF   x2C,F
0755E:  MOVF   x28,W
07560:  SUBWF  x2C,W
07562:  BTFSC  FD8.2
07564:  BRA    756C
07566:  MOVLB  0
07568:  GOTO   758E
0756C:  MOVF   x27,W
0756E:  SUBWF  x2B,W
07570:  BTFSC  FD8.2
07572:  BRA    757A
07574:  MOVLB  0
07576:  GOTO   758E
0757A:  MOVF   x26,W
0757C:  SUBWF  x2A,W
0757E:  BTFSC  FD8.2
07580:  BRA    7588
07582:  MOVLB  0
07584:  GOTO   758E
07588:  MOVF   x25,W
0758A:  SUBWF  x29,W
0758C:  MOVLB  0
0758E:  BTFSS  FD8.0
07590:  GOTO   75B6
07594:  MOVLB  4
07596:  MOVF   x25,W
07598:  SUBWF  x29,F
0759A:  MOVF   x26,W
0759C:  BTFSS  FD8.0
0759E:  INCFSZ x26,W
075A0:  SUBWF  x2A,F
075A2:  MOVF   x27,W
075A4:  BTFSS  FD8.0
075A6:  INCFSZ x27,W
075A8:  SUBWF  x2B,F
075AA:  MOVF   x28,W
075AC:  BTFSS  FD8.0
075AE:  INCFSZ x28,W
075B0:  SUBWF  x2C,F
075B2:  BSF    FD8.0
075B4:  MOVLB  0
075B6:  RLCF   00,F
075B8:  RLCF   01,F
075BA:  RLCF   02,F
075BC:  RLCF   03,F
075BE:  MOVLB  4
075C0:  DECFSZ x2D,F
075C2:  BRA    75C8
075C4:  BRA    75CE
075C6:  MOVLB  0
075C8:  MOVLB  0
075CA:  GOTO   754A
075CE:  MOVLB  0
075D0:  MOVFF  429,FEF
075D4:  MOVFF  42A,FEC
075D8:  MOVFF  42B,FEC
075DC:  MOVFF  42C,FEC
075E0:  MOVF   FED,F
075E2:  MOVF   FED,F
075E4:  MOVF   FED,F
075E6:  RETURN 0
075E8:  MOVF   FE9,W
075EA:  MOVLB  4
075EC:  MOVWF  x19
075EE:  MOVLW  3B
075F0:  MOVWF  x20
075F2:  MOVLW  9A
075F4:  MOVWF  x1F
075F6:  MOVLW  CA
075F8:  MOVWF  x1E
075FA:  CLRF   x1D
075FC:  MOVLW  0A
075FE:  MOVWF  x1B
07600:  MOVLB  0
07602:  BSF    FD8.1
07604:  MOVLW  04
07606:  MOVWF  FEA
07608:  MOVLW  15
0760A:  MOVWF  FE9
0760C:  MOVFF  418,424
07610:  MOVFF  417,423
07614:  MOVFF  416,422
07618:  MOVFF  415,421
0761C:  MOVFF  420,428
07620:  MOVFF  41F,427
07624:  MOVFF  41E,426
07628:  MOVFF  41D,425
0762C:  CALL   750E
07630:  MOVF   01,W
07632:  MOVF   00,F
07634:  BTFSS  FD8.2
07636:  GOTO   768E
0763A:  MOVLB  4
0763C:  MOVF   x1B,W
0763E:  XORLW  01
07640:  BTFSS  FD8.2
07642:  BRA    764A
07644:  MOVLB  0
07646:  GOTO   768E
0764A:  MOVF   x19,W
0764C:  BTFSS  FD8.2
0764E:  BRA    7656
07650:  MOVLB  0
07652:  GOTO   7694
07656:  ANDLW  0F
07658:  SUBWF  x1B,W
0765A:  BTFSS  FD8.2
0765C:  BRA    7664
0765E:  MOVLB  0
07660:  GOTO   7670
07664:  BTFSS  FD8.0
07666:  BRA    766E
07668:  MOVLB  0
0766A:  GOTO   76A0
0766E:  MOVLB  0
07670:  MOVLB  4
07672:  BTFSS  x19.7
07674:  BRA    767C
07676:  MOVLB  0
07678:  GOTO   76A0
0767C:  BTFSS  x19.6
0767E:  BRA    7686
07680:  MOVLB  0
07682:  GOTO   7694
07686:  MOVLW  20
07688:  MOVLB  0
0768A:  GOTO   7696
0768E:  MOVLB  4
07690:  CLRF   x19
07692:  MOVLB  0
07694:  MOVLW  30
07696:  ADDWF  00,F
07698:  MOVFF  00,82F
0769C:  CALL   1816
076A0:  BCF    FD8.1
076A2:  MOVFF  420,424
076A6:  MOVFF  41F,423
076AA:  MOVFF  41E,422
076AE:  MOVFF  41D,421
076B2:  MOVLB  4
076B4:  CLRF   x28
076B6:  CLRF   x27
076B8:  CLRF   x26
076BA:  MOVLW  0A
076BC:  MOVWF  x25
076BE:  MOVLB  0
076C0:  CALL   750E
076C4:  MOVFF  03,420
076C8:  MOVFF  02,41F
076CC:  MOVFF  01,41E
076D0:  MOVFF  00,41D
076D4:  MOVLB  4
076D6:  DECFSZ x1B,F
076D8:  BRA    76DE
076DA:  BRA    76E4
076DC:  MOVLB  0
076DE:  MOVLB  0
076E0:  GOTO   7602
076E4:  MOVLB  0
076E6:  RETURN 0
*
07C72:  MOVF   FE9,W
07C74:  MOVLB  4
07C76:  MOVWF  x19
07C78:  BTFSC  x18.7
07C7A:  BRA    7C82
07C7C:  MOVLB  0
07C7E:  GOTO   7C9E
07C82:  DECF   x19,F
07C84:  BSF    x19.5
07C86:  COMF   x15,F
07C88:  COMF   x16,F
07C8A:  COMF   x17,F
07C8C:  COMF   x18,F
07C8E:  INCF   x15,F
07C90:  BTFSC  FD8.2
07C92:  INCF   x16,F
07C94:  BTFSC  FD8.2
07C96:  INCF   x17,F
07C98:  BTFSC  FD8.2
07C9A:  INCF   x18,F
07C9C:  MOVLB  0
07C9E:  MOVLW  3B
07CA0:  MOVLB  4
07CA2:  MOVWF  x20
07CA4:  MOVLW  9A
07CA6:  MOVWF  x1F
07CA8:  MOVLW  CA
07CAA:  MOVWF  x1E
07CAC:  CLRF   x1D
07CAE:  MOVLW  0A
07CB0:  MOVWF  x1B
07CB2:  MOVLB  0
07CB4:  BSF    FD8.1
07CB6:  MOVLW  04
07CB8:  MOVWF  FEA
07CBA:  MOVLW  15
07CBC:  MOVWF  FE9
07CBE:  MOVFF  418,424
07CC2:  MOVFF  417,423
07CC6:  MOVFF  416,422
07CCA:  MOVFF  415,421
07CCE:  MOVFF  420,428
07CD2:  MOVFF  41F,427
07CD6:  MOVFF  41E,426
07CDA:  MOVFF  41D,425
07CDE:  CALL   750E
07CE2:  MOVF   01,W
07CE4:  MOVF   00,F
07CE6:  BTFSS  FD8.2
07CE8:  GOTO   7D40
07CEC:  MOVLB  4
07CEE:  MOVF   x1B,W
07CF0:  XORLW  01
07CF2:  BTFSS  FD8.2
07CF4:  BRA    7CFC
07CF6:  MOVLB  0
07CF8:  GOTO   7D40
07CFC:  MOVF   x19,W
07CFE:  BTFSS  FD8.2
07D00:  BRA    7D08
07D02:  MOVLB  0
07D04:  GOTO   7D48
07D08:  ANDLW  0F
07D0A:  SUBWF  x1B,W
07D0C:  BTFSS  FD8.2
07D0E:  BRA    7D16
07D10:  MOVLB  0
07D12:  GOTO   7D22
07D16:  BTFSS  FD8.0
07D18:  BRA    7D20
07D1A:  MOVLB  0
07D1C:  GOTO   7DA6
07D20:  MOVLB  0
07D22:  MOVLB  4
07D24:  BTFSS  x19.7
07D26:  BRA    7D2E
07D28:  MOVLB  0
07D2A:  GOTO   7DA6
07D2E:  BTFSS  x19.6
07D30:  BRA    7D38
07D32:  MOVLB  0
07D34:  GOTO   7D48
07D38:  MOVLW  20
07D3A:  MOVLB  0
07D3C:  GOTO   7D9C
07D40:  MOVLW  20
07D42:  MOVLB  4
07D44:  ANDWF  x19,F
07D46:  MOVLB  0
07D48:  MOVLB  4
07D4A:  BTFSC  x19.5
07D4C:  BRA    7D54
07D4E:  MOVLB  0
07D50:  GOTO   7D70
07D54:  BCF    x19.5
07D56:  MOVF   00,W
07D58:  MOVWF  x19
07D5A:  MOVLW  2D
07D5C:  MOVLB  8
07D5E:  MOVWF  x2F
07D60:  MOVLB  0
07D62:  CALL   1816
07D66:  MOVLB  4
07D68:  MOVF   x19,W
07D6A:  MOVWF  00
07D6C:  CLRF   x19
07D6E:  MOVLB  0
07D70:  MOVLW  30
07D72:  MOVLB  4
07D74:  BTFSC  x19.5
07D76:  BRA    7D7E
07D78:  MOVLB  0
07D7A:  GOTO   7D9C
07D7E:  BCF    x19.5
07D80:  MOVF   00,W
07D82:  MOVWF  x19
07D84:  MOVLW  2D
07D86:  MOVLB  8
07D88:  MOVWF  x2F
07D8A:  MOVLB  0
07D8C:  CALL   1816
07D90:  MOVLB  4
07D92:  MOVF   x19,W
07D94:  MOVWF  00
07D96:  CLRF   x19
07D98:  MOVLW  30
07D9A:  MOVLB  0
07D9C:  ADDWF  00,F
07D9E:  MOVFF  00,82F
07DA2:  CALL   1816
07DA6:  BCF    FD8.1
07DA8:  MOVFF  420,424
07DAC:  MOVFF  41F,423
07DB0:  MOVFF  41E,422
07DB4:  MOVFF  41D,421
07DB8:  MOVLB  4
07DBA:  CLRF   x28
07DBC:  CLRF   x27
07DBE:  CLRF   x26
07DC0:  MOVLW  0A
07DC2:  MOVWF  x25
07DC4:  MOVLB  0
07DC6:  CALL   750E
07DCA:  MOVFF  03,420
07DCE:  MOVFF  02,41F
07DD2:  MOVFF  01,41E
07DD6:  MOVFF  00,41D
07DDA:  MOVLB  4
07DDC:  DECFSZ x1B,F
07DDE:  BRA    7DE4
07DE0:  BRA    7DEA
07DE2:  MOVLB  0
07DE4:  MOVLB  0
07DE6:  GOTO   7CB4
07DEA:  MOVLB  0
07DEC:  GOTO   8AFA (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
017E8:  MOVLW  08
017EA:  MOVWF  FEA
017EC:  MOVLW  44
017EE:  MOVWF  FE9
017F0:  MOVF   FEF,W
017F2:  BTFSC  FD8.2
017F4:  GOTO   1814
017F8:  MOVLW  05
017FA:  MOVWF  01
017FC:  CLRF   00
017FE:  DECFSZ 00,F
01800:  BRA    17FE
01802:  DECFSZ 01,F
01804:  BRA    17FC
01806:  MOVLW  2E
01808:  MOVWF  00
0180A:  DECFSZ 00,F
0180C:  BRA    180A
0180E:  BRA    1810
01810:  DECFSZ FEF,F
01812:  BRA    17F8
01814:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
0410C:  BTFSS  FA6.4
0410E:  GOTO   410C
04112:  MOVLB  F
04114:  MOVWF  x29
04116:  MOVLB  0
04118:  GOTO   414E (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
01816:  BCF    F93.6
01818:  BCF    F8A.6
0181A:  MOVLW  08
0181C:  MOVWF  01
0181E:  BRA    1820
01820:  NOP   
01822:  BSF    01.7
01824:  GOTO   184C
01828:  BCF    01.7
0182A:  MOVLB  8
0182C:  RRCF   x2F,F
0182E:  MOVLB  0
01830:  BTFSC  FD8.0
01832:  BSF    F8A.6
01834:  BTFSS  FD8.0
01836:  BCF    F8A.6
01838:  BSF    01.6
0183A:  GOTO   184C
0183E:  BCF    01.6
01840:  DECFSZ 01,F
01842:  GOTO   182A
01846:  BRA    1848
01848:  NOP   
0184A:  BSF    F8A.6
0184C:  MOVLW  84
0184E:  MOVWF  FE9
01850:  DECFSZ FE9,F
01852:  GOTO   1850
01856:  BRA    1858
01858:  NOP   
0185A:  BTFSC  01.7
0185C:  GOTO   1828
01860:  BTFSC  01.6
01862:  GOTO   183E
01866:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
01C86:  MOVLB  8
01C88:  MOVF   x67,W
01C8A:  SUBLW  08
01C8C:  BTFSS  FD8.2
01C8E:  BRA    1C96
01C90:  MOVLB  0
01C92:  GOTO   1CAE
01C96:  MOVWF  x69
01C98:  MOVLB  0
01C9A:  MOVLB  8
01C9C:  RLCF   x66,F
01C9E:  DECFSZ x69,F
01CA0:  BRA    1CA6
01CA2:  BRA    1CAC
01CA4:  MOVLB  0
01CA6:  MOVLB  0
01CA8:  GOTO   1C9A
01CAC:  MOVLB  0
01CAE:  BSF    F92.1
01CB0:  BCF    F92.0
01CB2:  BCF    F92.3
01CB4:  BCF    F89.3
01CB6:  MOVFF  867,869
01CBA:  MOVLB  8
01CBC:  BTFSS  x66.7
01CBE:  BCF    F89.0
01CC0:  BTFSC  x66.7
01CC2:  BSF    F89.0
01CC4:  RLCF   x66,F
01CC6:  BSF    F89.3
01CC8:  MOVLW  02
01CCA:  MOVWF  x6A
01CCC:  MOVLB  0
01CCE:  MOVLB  8
01CD0:  DECFSZ x6A,F
01CD2:  BRA    1CD8
01CD4:  BRA    1CDE
01CD6:  MOVLB  0
01CD8:  MOVLB  0
01CDA:  GOTO   1CCE
01CDE:  RLCF   01,F
01CE0:  BTFSS  F80.1
01CE2:  BCF    01.0
01CE4:  BTFSC  F80.1
01CE6:  BSF    01.0
01CE8:  BCF    F89.3
01CEA:  MOVLB  0
01CEC:  BRA    1CEE
01CEE:  MOVLB  8
01CF0:  DECFSZ x69,F
01CF2:  BRA    1CF8
01CF4:  BRA    1CFE
01CF6:  MOVLB  0
01CF8:  MOVLB  0
01CFA:  GOTO   1CBA
01CFE:  MOVLB  0
01D00:  RETURN 0
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01C0A:  MOVLB  8
01C0C:  MOVF   x67,W
01C0E:  SUBLW  08
01C10:  BTFSS  FD8.2
01C12:  BRA    1C1A
01C14:  MOVLB  0
01C16:  GOTO   1C32
01C1A:  MOVWF  x69
01C1C:  MOVLB  0
01C1E:  MOVLB  8
01C20:  RLCF   x66,F
01C22:  DECFSZ x69,F
01C24:  BRA    1C2A
01C26:  BRA    1C30
01C28:  MOVLB  0
01C2A:  MOVLB  0
01C2C:  GOTO   1C1E
01C30:  MOVLB  0
01C32:  BSF    F96.4
01C34:  BCF    F96.1
01C36:  BCF    F95.7
01C38:  BCF    F8C.7
01C3A:  MOVFF  867,869
01C3E:  MOVLB  8
01C40:  BTFSS  x66.7
01C42:  BCF    F8D.1
01C44:  BTFSC  x66.7
01C46:  BSF    F8D.1
01C48:  RLCF   x66,F
01C4A:  BSF    F8C.7
01C4C:  MOVLW  02
01C4E:  MOVWF  x6A
01C50:  MOVLB  0
01C52:  MOVLB  8
01C54:  DECFSZ x6A,F
01C56:  BRA    1C5C
01C58:  BRA    1C62
01C5A:  MOVLB  0
01C5C:  MOVLB  0
01C5E:  GOTO   1C52
01C62:  RLCF   01,F
01C64:  BTFSS  F84.4
01C66:  BCF    01.0
01C68:  BTFSC  F84.4
01C6A:  BSF    01.0
01C6C:  BCF    F8C.7
01C6E:  MOVLB  0
01C70:  BRA    1C72
01C72:  MOVLB  8
01C74:  DECFSZ x69,F
01C76:  BRA    1C7C
01C78:  BRA    1C82
01C7A:  MOVLB  0
01C7C:  MOVLB  0
01C7E:  GOTO   1C3E
01C82:  MOVLB  0
01C84:  RETURN 0
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01968:  MOVLB  7
0196A:  MOVF   xF7,W
0196C:  SUBLW  10
0196E:  BTFSS  FD8.2
01970:  BRA    1978
01972:  MOVLB  0
01974:  GOTO   1992
01978:  MOVWF  xF9
0197A:  MOVLB  0
0197C:  MOVLB  7
0197E:  RLCF   xF5,F
01980:  RLCF   xF6,F
01982:  DECFSZ xF9,F
01984:  BRA    198A
01986:  BRA    1990
01988:  MOVLB  0
0198A:  MOVLB  0
0198C:  GOTO   197C
01990:  MOVLB  0
01992:  BSF    F93.4
01994:  BCF    F93.5
01996:  BCF    F93.2
01998:  BCF    F8A.2
0199A:  MOVFF  7F7,7F9
0199E:  MOVLB  7
019A0:  BTFSS  xF6.7
019A2:  BCF    F8A.5
019A4:  BTFSC  xF6.7
019A6:  BSF    F8A.5
019A8:  RLCF   xF5,F
019AA:  RLCF   xF6,F
019AC:  BSF    F8A.2
019AE:  RLCF   01,F
019B0:  RLCF   02,F
019B2:  BTFSS  F81.4
019B4:  BCF    01.0
019B6:  BTFSC  F81.4
019B8:  BSF    01.0
019BA:  BCF    F8A.2
019BC:  DECFSZ xF9,F
019BE:  BRA    19C4
019C0:  BRA    19CA
019C2:  MOVLB  0
019C4:  MOVLB  0
019C6:  GOTO   199E
019CA:  MOVLB  0
019CC:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
*
07E80:  MOVLW  00
07E82:  BTFSC  FEF.0
07E84:  MOVLW  01
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../hardware/mcu/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/mcu/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hardware/devices/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... 
.................... void smf_write(void);
.................... 
.................... 
.................... void smf_read(void);
.................... 
.................... 
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "../core/measurement/mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../core/storage/mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "../application/mission/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... #include "../hardware/mcu/src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  20,F
000D8:  BTFSC  FD8.0
000DA:  INCF   21,F
000DC:  BTFSC  FD8.2
000DE:  INCF   22,F
000E0:  BTFSC  FD8.2
000E2:  INCF   23,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02D04:  MOVFF  20,00
02D08:  MOVFF  21,01
02D0C:  MOVFF  22,02
02D10:  MOVFF  23,03
02D14:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../hardware/mcu/src/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  47.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   46,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   46,W
0014C:  INCF   46,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  26
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,86F
00160:  MOVFF  FE9,86E
00164:  GOTO   010A
00168:  MOVFF  86F,FEA
0016C:  MOVFF  86E,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
018CE:  MOVLW  7A
018D0:  MOVWF  FF6
018D2:  MOVLW  01
018D4:  MOVWF  FF7
018D6:  MOVLW  00
018D8:  MOVWF  FF8
018DA:  CALL   1868
....................    enable_interrupts(INT_RDA3);
018DE:  BSF    F61.5
....................    enable_interrupts(global);
018E0:  MOVLW  C0
018E2:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
018E4:  MOVLW  8C
018E6:  MOVWF  FF6
018E8:  MOVLW  01
018EA:  MOVWF  FF7
018EC:  MOVLW  00
018EE:  MOVWF  FF8
018F0:  CALL   1868
018F4:  GOTO   9450 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
040CE:  MOVFF  385,03
040D2:  MOVLB  3
040D4:  MOVF   x84,W
040D6:  MOVWF  FE9
040D8:  MOVFF  03,FEA
040DC:  MOVFF  FEF,386
040E0:  MOVFF  383,FEA
040E4:  MOVFF  382,FE9
040E8:  CLRF   00
040EA:  CLRF   02
040EC:  MOVFF  386,01
040F0:  MOVLB  0
040F2:  CALL   40AA
....................    *receive_signal_size = 0;
040F6:  MOVFF  385,03
040FA:  MOVLB  3
040FC:  MOVF   x84,W
040FE:  MOVWF  FE9
04100:  MOVFF  03,FEA
04104:  CLRF   FEF
04106:  MOVLB  0
04108:  GOTO   94EA (RETURN)
.................... }
.................... 
.................... 
.................... #include "../hardware/devices/src/ad7490_driver.c"
.................... #include "../ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
01ACA:  MOVLW  98
01ACC:  MOVWF  FF6
01ACE:  MOVLW  01
01AD0:  MOVWF  FF7
01AD2:  MOVLW  00
01AD4:  MOVWF  FF8
01AD6:  CALL   1868
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
01ADA:  BCF    F93.1
01ADC:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
01ADE:  MOVLW  0A
01AE0:  MOVLB  8
01AE2:  MOVWF  x44
01AE4:  MOVLB  0
01AE6:  CALL   17E8
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
01AEA:  MOVLW  0D
01AEC:  MOVLB  7
01AEE:  MOVWF  xEE
01AF0:  MOVLB  0
01AF2:  CALL   19CE
01AF6:  MOVFF  02,383
01AFA:  MOVFF  01,382
....................     fprintf(PC, "%04LX\r\n", readdata);
01AFE:  MOVFF  383,427
01B02:  MOVLW  37
01B04:  MOVLB  4
01B06:  MOVWF  x28
01B08:  MOVLB  0
01B0A:  CALL   1A5A
01B0E:  MOVFF  382,427
01B12:  MOVLW  37
01B14:  MOVLB  4
01B16:  MOVWF  x28
01B18:  MOVLB  0
01B1A:  CALL   1A5A
01B1E:  MOVLW  0D
01B20:  MOVLB  8
01B22:  MOVWF  x2F
01B24:  MOVLB  0
01B26:  CALL   1816
01B2A:  MOVLW  0A
01B2C:  MOVLB  8
01B2E:  MOVWF  x2F
01B30:  MOVLB  0
01B32:  CALL   1816
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
01B36:  MOVLB  3
01B38:  INCFSZ x82,W
01B3A:  BRA    1B40
01B3C:  BRA    1B46
01B3E:  MOVLB  0
01B40:  MOVLB  0
01B42:  GOTO   1B5E
01B46:  MOVLB  0
01B48:  MOVLB  3
01B4A:  INCFSZ x83,W
01B4C:  BRA    1B52
01B4E:  BRA    1B58
01B50:  MOVLB  0
01B52:  MOVLB  0
01B54:  GOTO   1B5E
01B58:  MOVLB  0
01B5A:  GOTO   1B7E
01B5E:  MOVLB  3
01B60:  MOVF   x82,F
01B62:  BTFSC  FD8.2
01B64:  BRA    1B6C
01B66:  MOVLB  0
01B68:  GOTO   1B92
01B6C:  MOVLB  0
01B6E:  MOVLB  3
01B70:  MOVF   x83,F
01B72:  BTFSC  FD8.2
01B74:  BRA    1B7C
01B76:  MOVLB  0
01B78:  GOTO   1B92
01B7C:  MOVLB  0
....................         fprintf(PC, "\t[ADC] Connect error!\r\n");
01B7E:  MOVLW  AC
01B80:  MOVWF  FF6
01B82:  MOVLW  01
01B84:  MOVWF  FF7
01B86:  MOVLW  00
01B88:  MOVWF  FF8
01B8A:  CALL   1868
....................     } else {
01B8E:  GOTO   1BA2
....................         fprintf(PC, "\t[ADC] Connect successful\r\n");
01B92:  MOVLW  C4
01B94:  MOVWF  FF6
01B96:  MOVLW  01
01B98:  MOVWF  FF7
01B9A:  MOVLW  00
01B9C:  MOVWF  FF8
01B9E:  CALL   1868
....................     }
....................     fprintf(PC, "\tComplete\r\n");
01BA2:  MOVLW  E0
01BA4:  MOVWF  FF6
01BA6:  MOVLW  01
01BA8:  MOVWF  FF7
01BAA:  MOVLW  00
01BAC:  MOVWF  FF8
01BAE:  CALL   1868
01BB2:  GOTO   9454 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
019CE:  MOVFF  7EE,7F5
019D2:  GOTO   18F8
019D6:  MOVFF  02,7F0
019DA:  MOVFF  01,7EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
019DE:  BCF    F93.1
019E0:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
019E2:  MOVLW  0D
019E4:  MOVWF  00
019E6:  DECFSZ 00,F
019E8:  BRA    19E6
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
019EA:  MOVFF  7F0,7F6
019EE:  MOVFF  7EF,7F5
019F2:  MOVLW  10
019F4:  MOVLB  7
019F6:  MOVWF  xF7
019F8:  MOVLW  01
019FA:  MOVWF  xF8
019FC:  MOVLB  0
019FE:  CALL   1968
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
01A02:  MOVLW  0D
01A04:  MOVWF  00
01A06:  DECFSZ 00,F
01A08:  BRA    1A06
....................     output_high(ADC_CS); // Set CS pin high to end communication
01A0A:  BCF    F93.1
01A0C:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
01A0E:  MOVLW  0D
01A10:  MOVWF  00
01A12:  DECFSZ 00,F
01A14:  BRA    1A12
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01A16:  BCF    F93.1
01A18:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
01A1A:  MOVLW  0D
01A1C:  MOVWF  00
01A1E:  DECFSZ 00,F
01A20:  BRA    1A1E
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
01A22:  MOVLB  7
01A24:  CLRF   xF6
01A26:  CLRF   xF5
01A28:  MOVLW  10
01A2A:  MOVWF  xF7
01A2C:  MOVLW  01
01A2E:  MOVWF  xF8
01A30:  MOVLB  0
01A32:  CALL   1968
01A36:  MOVFF  02,7F2
01A3A:  MOVFF  01,7F1
....................     output_high(ADC_CS); 
01A3E:  BCF    F93.1
01A40:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01A42:  MOVLB  7
01A44:  MOVF   xF1,W
01A46:  MOVWF  xF3
01A48:  MOVF   xF2,W
01A4A:  ANDLW  0F
01A4C:  MOVWF  xF4
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01A4E:  MOVF   xF3,W
01A50:  MOVWF  01
01A52:  MOVF   xF4,W
01A54:  MOVWF  02
01A56:  MOVLB  0
01A58:  RETURN 0
.................... }
.................... 
.................... #include "../hardware/devices/src/mcp4901_driver.c"
.................... #include "../mcp4901_driver.h"                        // 同じデバイスフォルダのヘッダー
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../../lib/device/mcp4901.h"              // DACデバイスライブラリ
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
....................     output_high(DAC1_CS); // Set CS pin high to deselect the DAC
....................     output_high(DAC2_CS); // Set CS pin high to deselect the second DAC
....................     delay_ms(10); // Wait for the DAC to stabilize
....................     mcp4901_1_write(0); // Initialize DAC 1 to 0
....................     mcp4901_2_write(0); // Initialize DAC 2 to 0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); // Read a dummy value to initialize the DAC
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
....................     readdata = ad7490_read(ADC_CIGS2_DAC); // Read a dummy value to initialize the second DAC
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
....................     } else {
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
....................     }
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
046FC:  MOVFF  7ED,7F1
04700:  MOVFF  7EC,7F0
04704:  GOTO   45A6
04708:  MOVFF  02,7EF
0470C:  MOVFF  01,7EE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
04710:  BCF    F93.3
04712:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
04714:  MOVLW  85
04716:  MOVWF  00
04718:  DECFSZ 00,F
0471A:  BRA    4718
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
0471C:  MOVFF  7EF,7F6
04720:  MOVFF  7EE,7F5
04724:  MOVLW  10
04726:  MOVLB  7
04728:  MOVWF  xF7
0472A:  MOVLW  01
0472C:  MOVWF  xF8
0472E:  MOVLB  0
04730:  CALL   1968
....................    output_high(DAC1_CS); // Deselect MCP4901
04734:  BCF    F93.3
04736:  BSF    F8A.3
04738:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
....................    delay_us(100); // Ensure CS is stable before sending data
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
....................    output_high(DAC2_CS); // Deselect MCP4901
.................... }
.................... 
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
018F8:  MOVLB  7
018FA:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
018FC:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
018FE:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
01900:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
01902:  BSF    xF6.4
....................     cmd.fields.range = 1; // Normal mode
01904:  BSF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01906:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
01908:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
0190A:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
0190C:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
0190E:  MOVF   xF5,W
01910:  ANDLW  01
01912:  MOVWF  01
01914:  BCF    xF7.2
01916:  BTFSC  01.0
01918:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0191A:  BCF    FD8.0
0191C:  RRCF   xF5,W
0191E:  ANDLW  01
01920:  MOVWF  01
01922:  BCF    xF7.3
01924:  BTFSC  01.0
01926:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01928:  RRCF   xF5,W
0192A:  MOVWF  00
0192C:  RRCF   00,F
0192E:  MOVLW  3F
01930:  ANDWF  00,F
01932:  MOVF   00,W
01934:  ANDLW  01
01936:  MOVWF  01
01938:  BCF    xF7.4
0193A:  BTFSC  01.0
0193C:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
0193E:  RRCF   xF5,W
01940:  MOVWF  00
01942:  RRCF   00,F
01944:  RRCF   00,F
01946:  MOVLW  1F
01948:  ANDWF  00,F
0194A:  MOVF   00,W
0194C:  ANDLW  01
0194E:  MOVWF  01
01950:  BCF    xF7.5
01952:  BTFSC  01.0
01954:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
01956:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
01958:  BSF    xF7.7
.................... 
.................... 
....................     return cmd.value;
0195A:  MOVF   xF6,W
0195C:  MOVWF  01
0195E:  MOVF   xF7,W
01960:  MOVWF  02
01962:  MOVLB  0
01964:  GOTO   19D6 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
045A6:  MOVLB  7
045A8:  BCF    xF3.7
....................    cmd.fields.buffer = 1; // Buffer used
045AA:  BSF    xF3.6
....................    cmd.fields.gain = 1; // Gain 1x
045AC:  BSF    xF3.5
....................    cmd.fields.shutdown = 1; // Normal operation
045AE:  BSF    xF3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
045B0:  RRCF   xF1,W
045B2:  MOVWF  xF5
045B4:  RRCF   xF0,W
045B6:  MOVWF  xF4
045B8:  RRCF   xF5,F
045BA:  RRCF   xF4,F
045BC:  RRCF   xF5,F
045BE:  RRCF   xF4,F
045C0:  RRCF   xF5,F
045C2:  RRCF   xF4,F
045C4:  RRCF   xF5,F
045C6:  RRCF   xF4,F
045C8:  RRCF   xF5,F
045CA:  RRCF   xF4,F
045CC:  RRCF   xF5,F
045CE:  RRCF   xF4,F
045D0:  MOVLW  01
045D2:  ANDWF  xF5,F
045D4:  MOVF   xF4,W
045D6:  ANDLW  01
045D8:  MOVWF  00
045DA:  CLRF   03
045DC:  MOVF   00,W
045DE:  MOVWF  01
045E0:  BCF    xF3.3
045E2:  BTFSC  01.0
045E4:  BSF    xF3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
045E6:  RRCF   xF1,W
045E8:  MOVWF  xF5
045EA:  RRCF   xF0,W
045EC:  MOVWF  xF4
045EE:  RRCF   xF5,F
045F0:  RRCF   xF4,F
045F2:  RRCF   xF5,F
045F4:  RRCF   xF4,F
045F6:  RRCF   xF5,F
045F8:  RRCF   xF4,F
045FA:  RRCF   xF5,F
045FC:  RRCF   xF4,F
045FE:  RRCF   xF5,F
04600:  RRCF   xF4,F
04602:  MOVLW  03
04604:  ANDWF  xF5,F
04606:  MOVF   xF4,W
04608:  ANDLW  01
0460A:  MOVWF  00
0460C:  CLRF   03
0460E:  MOVF   00,W
04610:  MOVWF  01
04612:  BCF    xF3.2
04614:  BTFSC  01.0
04616:  BSF    xF3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
04618:  RRCF   xF1,W
0461A:  MOVWF  xF5
0461C:  RRCF   xF0,W
0461E:  MOVWF  xF4
04620:  RRCF   xF5,F
04622:  RRCF   xF4,F
04624:  RRCF   xF5,F
04626:  RRCF   xF4,F
04628:  RRCF   xF5,F
0462A:  RRCF   xF4,F
0462C:  RRCF   xF5,F
0462E:  RRCF   xF4,F
04630:  MOVLW  07
04632:  ANDWF  xF5,F
04634:  MOVF   xF4,W
04636:  ANDLW  01
04638:  MOVWF  00
0463A:  CLRF   03
0463C:  MOVF   00,W
0463E:  MOVWF  01
04640:  BCF    xF3.1
04642:  BTFSC  01.0
04644:  BSF    xF3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
04646:  RRCF   xF1,W
04648:  MOVWF  xF5
0464A:  RRCF   xF0,W
0464C:  MOVWF  xF4
0464E:  RRCF   xF5,F
04650:  RRCF   xF4,F
04652:  RRCF   xF5,F
04654:  RRCF   xF4,F
04656:  RRCF   xF5,F
04658:  RRCF   xF4,F
0465A:  MOVLW  0F
0465C:  ANDWF  xF5,F
0465E:  MOVF   xF4,W
04660:  ANDLW  01
04662:  MOVWF  00
04664:  CLRF   03
04666:  MOVF   00,W
04668:  MOVWF  01
0466A:  BCF    xF3.0
0466C:  BTFSC  01.0
0466E:  BSF    xF3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
04670:  RRCF   xF1,W
04672:  MOVWF  xF5
04674:  RRCF   xF0,W
04676:  MOVWF  xF4
04678:  RRCF   xF5,F
0467A:  RRCF   xF4,F
0467C:  RRCF   xF5,F
0467E:  RRCF   xF4,F
04680:  MOVLW  1F
04682:  ANDWF  xF5,F
04684:  MOVF   xF4,W
04686:  ANDLW  01
04688:  MOVWF  00
0468A:  CLRF   03
0468C:  MOVF   00,W
0468E:  MOVWF  01
04690:  BCF    xF2.7
04692:  BTFSC  01.0
04694:  BSF    xF2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
04696:  RRCF   xF1,W
04698:  MOVWF  xF5
0469A:  RRCF   xF0,W
0469C:  MOVWF  xF4
0469E:  RRCF   xF5,F
046A0:  RRCF   xF4,F
046A2:  MOVLW  3F
046A4:  ANDWF  xF5,F
046A6:  MOVF   xF4,W
046A8:  ANDLW  01
046AA:  MOVWF  00
046AC:  CLRF   03
046AE:  MOVF   00,W
046B0:  MOVWF  01
046B2:  BCF    xF2.6
046B4:  BTFSC  01.0
046B6:  BSF    xF2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
046B8:  BCF    FD8.0
046BA:  RRCF   xF1,W
046BC:  MOVWF  xF5
046BE:  RRCF   xF0,W
046C0:  MOVWF  xF4
046C2:  MOVF   xF4,W
046C4:  ANDLW  01
046C6:  MOVWF  00
046C8:  CLRF   03
046CA:  MOVF   00,W
046CC:  MOVWF  01
046CE:  BCF    xF2.5
046D0:  BTFSC  01.0
046D2:  BSF    xF2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
046D4:  MOVF   xF0,W
046D6:  ANDLW  01
046D8:  MOVWF  00
046DA:  CLRF   03
046DC:  MOVF   00,W
046DE:  MOVWF  01
046E0:  BCF    xF2.4
046E2:  BTFSC  01.0
046E4:  BSF    xF2.4
....................    cmd.fields.reserved = 0; // Reserved bits
046E6:  BCF    xF2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
046E8:  BCF    xF2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
046EA:  BCF    xF2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
046EC:  BCF    xF2.0
.................... 
....................    return cmd.value;
046EE:  MOVF   xF2,W
046F0:  MOVWF  01
046F2:  MOVF   xF3,W
046F4:  MOVWF  02
046F6:  MOVLB  0
046F8:  GOTO   4708 (RETURN)
.................... }
.................... 
.................... #include "../../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02D16:  MOVLB  8
02D18:  MOVF   x44,W
02D1A:  XORLW  00
02D1C:  MOVLB  0
02D1E:  BTFSC  FD8.2
02D20:  GOTO   2D30
02D24:  XORLW  01
02D26:  BTFSC  FD8.2
02D28:  GOTO   2D98
02D2C:  GOTO   2E00
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02D30:  MOVLB  8
02D32:  CLRF   x4D
02D34:  CLRF   x4C
02D36:  MOVLB  0
02D38:  MOVLB  8
02D3A:  MOVF   x4D,W
02D3C:  SUBWF  x4B,W
02D3E:  BTFSC  FD8.0
02D40:  BRA    2D48
02D42:  MOVLB  0
02D44:  GOTO   2D94
02D48:  MOVLB  0
02D4A:  BTFSS  FD8.2
02D4C:  GOTO   2D62
02D50:  MOVLB  8
02D52:  MOVF   x4A,W
02D54:  SUBWF  x4C,W
02D56:  BTFSS  FD8.0
02D58:  BRA    2D60
02D5A:  MOVLB  0
02D5C:  GOTO   2D94
02D60:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02D62:  MOVLB  8
02D64:  MOVF   x48,W
02D66:  ADDWF  x4C,W
02D68:  MOVWF  FE9
02D6A:  MOVF   x49,W
02D6C:  ADDWFC x4D,W
02D6E:  MOVWF  FEA
02D70:  MOVFF  FEF,850
02D74:  MOVFF  850,866
02D78:  MOVLW  08
02D7A:  MOVWF  x67
02D7C:  MOVLW  01
02D7E:  MOVWF  x68
02D80:  MOVLB  0
02D82:  CALL   1C0A
02D86:  MOVLB  8
02D88:  INCF   x4C,F
02D8A:  BTFSC  FD8.2
02D8C:  INCF   x4D,F
02D8E:  MOVLB  0
02D90:  GOTO   2D38
....................          break;
02D94:  GOTO   2E04
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02D98:  MOVLB  8
02D9A:  CLRF   x4F
02D9C:  CLRF   x4E
02D9E:  MOVLB  0
02DA0:  MOVLB  8
02DA2:  MOVF   x4F,W
02DA4:  SUBWF  x4B,W
02DA6:  BTFSC  FD8.0
02DA8:  BRA    2DB0
02DAA:  MOVLB  0
02DAC:  GOTO   2DFC
02DB0:  MOVLB  0
02DB2:  BTFSS  FD8.2
02DB4:  GOTO   2DCA
02DB8:  MOVLB  8
02DBA:  MOVF   x4A,W
02DBC:  SUBWF  x4E,W
02DBE:  BTFSS  FD8.0
02DC0:  BRA    2DC8
02DC2:  MOVLB  0
02DC4:  GOTO   2DFC
02DC8:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02DCA:  MOVLB  8
02DCC:  MOVF   x48,W
02DCE:  ADDWF  x4E,W
02DD0:  MOVWF  FE9
02DD2:  MOVF   x49,W
02DD4:  ADDWFC x4F,W
02DD6:  MOVWF  FEA
02DD8:  MOVFF  FEF,850
02DDC:  MOVFF  850,866
02DE0:  MOVLW  08
02DE2:  MOVWF  x67
02DE4:  MOVLW  01
02DE6:  MOVWF  x68
02DE8:  MOVLB  0
02DEA:  CALL   1C86
02DEE:  MOVLB  8
02DF0:  INCF   x4E,F
02DF2:  BTFSC  FD8.2
02DF4:  INCF   x4F,F
02DF6:  MOVLB  0
02DF8:  GOTO   2DA0
....................          break;
02DFC:  GOTO   2E04
....................          
....................       default:
....................          break;
02E00:  GOTO   2E04
....................    }
....................    return;
02E04:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01D02:  MOVLB  8
01D04:  MOVF   x4A,W
01D06:  XORLW  00
01D08:  MOVLB  0
01D0A:  BTFSC  FD8.2
01D0C:  GOTO   1D1C
01D10:  XORLW  01
01D12:  BTFSC  FD8.2
01D14:  GOTO   1E26
01D18:  GOTO   1F30
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01D1C:  MOVLB  8
01D1E:  CLRF   x59
01D20:  CLRF   x58
01D22:  MOVLB  0
01D24:  MOVLB  8
01D26:  MOVF   x59,W
01D28:  SUBWF  x51,W
01D2A:  BTFSC  FD8.0
01D2C:  BRA    1D34
01D2E:  MOVLB  0
01D30:  GOTO   1D80
01D34:  MOVLB  0
01D36:  BTFSS  FD8.2
01D38:  GOTO   1D4E
01D3C:  MOVLB  8
01D3E:  MOVF   x50,W
01D40:  SUBWF  x58,W
01D42:  BTFSS  FD8.0
01D44:  BRA    1D4C
01D46:  MOVLB  0
01D48:  GOTO   1D80
01D4C:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01D4E:  MOVLB  8
01D50:  MOVF   x4E,W
01D52:  ADDWF  x58,W
01D54:  MOVWF  FE9
01D56:  MOVF   x4F,W
01D58:  ADDWFC x59,W
01D5A:  MOVWF  FEA
01D5C:  MOVFF  FEF,864
01D60:  MOVFF  864,866
01D64:  MOVLW  08
01D66:  MOVWF  x67
01D68:  MOVLW  01
01D6A:  MOVWF  x68
01D6C:  MOVLB  0
01D6E:  CALL   1C0A
01D72:  MOVLB  8
01D74:  INCF   x58,F
01D76:  BTFSC  FD8.2
01D78:  INCF   x59,F
01D7A:  MOVLB  0
01D7C:  GOTO   1D24
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01D80:  MOVLB  8
01D82:  CLRF   x5D
01D84:  CLRF   x5C
01D86:  CLRF   x5B
01D88:  CLRF   x5A
01D8A:  MOVLB  0
01D8C:  MOVLB  8
01D8E:  MOVF   x5D,W
01D90:  SUBWF  x57,W
01D92:  BTFSC  FD8.0
01D94:  BRA    1D9C
01D96:  MOVLB  0
01D98:  GOTO   1E22
01D9C:  MOVLB  0
01D9E:  BTFSS  FD8.2
01DA0:  GOTO   1DE6
01DA4:  MOVLB  8
01DA6:  MOVF   x5C,W
01DA8:  SUBWF  x56,W
01DAA:  BTFSC  FD8.0
01DAC:  BRA    1DB4
01DAE:  MOVLB  0
01DB0:  GOTO   1E22
01DB4:  MOVLB  0
01DB6:  BTFSS  FD8.2
01DB8:  GOTO   1DE6
01DBC:  MOVLB  8
01DBE:  MOVF   x5B,W
01DC0:  SUBWF  x55,W
01DC2:  BTFSC  FD8.0
01DC4:  BRA    1DCC
01DC6:  MOVLB  0
01DC8:  GOTO   1E22
01DCC:  MOVLB  0
01DCE:  BTFSS  FD8.2
01DD0:  GOTO   1DE6
01DD4:  MOVLB  8
01DD6:  MOVF   x54,W
01DD8:  SUBWF  x5A,W
01DDA:  BTFSS  FD8.0
01DDC:  BRA    1DE4
01DDE:  MOVLB  0
01DE0:  GOTO   1E22
01DE4:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
01DE6:  MOVLB  8
01DE8:  MOVF   x52,W
01DEA:  ADDWF  x5A,W
01DEC:  MOVWF  FE9
01DEE:  MOVF   x53,W
01DF0:  ADDWFC x5B,W
01DF2:  MOVWF  FEA
01DF4:  MOVLW  02
01DF6:  MOVWF  x66
01DF8:  MOVLW  08
01DFA:  MOVWF  x67
01DFC:  MOVLW  01
01DFE:  MOVWF  x68
01E00:  MOVLB  0
01E02:  CALL   1C0A
01E06:  MOVFF  01,FEF
01E0A:  MOVLW  01
01E0C:  MOVLB  8
01E0E:  ADDWF  x5A,F
01E10:  BTFSC  FD8.0
01E12:  INCF   x5B,F
01E14:  BTFSC  FD8.2
01E16:  INCF   x5C,F
01E18:  BTFSC  FD8.2
01E1A:  INCF   x5D,F
01E1C:  MOVLB  0
01E1E:  GOTO   1D8C
....................          break;
01E22:  GOTO   1F34
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01E26:  MOVLB  8
01E28:  CLRF   x5F
01E2A:  CLRF   x5E
01E2C:  MOVLB  0
01E2E:  MOVLB  8
01E30:  MOVF   x5F,W
01E32:  SUBWF  x51,W
01E34:  BTFSC  FD8.0
01E36:  BRA    1E3E
01E38:  MOVLB  0
01E3A:  GOTO   1E8A
01E3E:  MOVLB  0
01E40:  BTFSS  FD8.2
01E42:  GOTO   1E58
01E46:  MOVLB  8
01E48:  MOVF   x50,W
01E4A:  SUBWF  x5E,W
01E4C:  BTFSS  FD8.0
01E4E:  BRA    1E56
01E50:  MOVLB  0
01E52:  GOTO   1E8A
01E56:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
01E58:  MOVLB  8
01E5A:  MOVF   x4E,W
01E5C:  ADDWF  x5E,W
01E5E:  MOVWF  FE9
01E60:  MOVF   x4F,W
01E62:  ADDWFC x5F,W
01E64:  MOVWF  FEA
01E66:  MOVFF  FEF,864
01E6A:  MOVFF  864,866
01E6E:  MOVLW  08
01E70:  MOVWF  x67
01E72:  MOVLW  01
01E74:  MOVWF  x68
01E76:  MOVLB  0
01E78:  CALL   1C86
01E7C:  MOVLB  8
01E7E:  INCF   x5E,F
01E80:  BTFSC  FD8.2
01E82:  INCF   x5F,F
01E84:  MOVLB  0
01E86:  GOTO   1E2E
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01E8A:  MOVLB  8
01E8C:  CLRF   x63
01E8E:  CLRF   x62
01E90:  CLRF   x61
01E92:  CLRF   x60
01E94:  MOVLB  0
01E96:  MOVLB  8
01E98:  MOVF   x63,W
01E9A:  SUBWF  x57,W
01E9C:  BTFSC  FD8.0
01E9E:  BRA    1EA6
01EA0:  MOVLB  0
01EA2:  GOTO   1F2C
01EA6:  MOVLB  0
01EA8:  BTFSS  FD8.2
01EAA:  GOTO   1EF0
01EAE:  MOVLB  8
01EB0:  MOVF   x62,W
01EB2:  SUBWF  x56,W
01EB4:  BTFSC  FD8.0
01EB6:  BRA    1EBE
01EB8:  MOVLB  0
01EBA:  GOTO   1F2C
01EBE:  MOVLB  0
01EC0:  BTFSS  FD8.2
01EC2:  GOTO   1EF0
01EC6:  MOVLB  8
01EC8:  MOVF   x61,W
01ECA:  SUBWF  x55,W
01ECC:  BTFSC  FD8.0
01ECE:  BRA    1ED6
01ED0:  MOVLB  0
01ED2:  GOTO   1F2C
01ED6:  MOVLB  0
01ED8:  BTFSS  FD8.2
01EDA:  GOTO   1EF0
01EDE:  MOVLB  8
01EE0:  MOVF   x54,W
01EE2:  SUBWF  x60,W
01EE4:  BTFSS  FD8.0
01EE6:  BRA    1EEE
01EE8:  MOVLB  0
01EEA:  GOTO   1F2C
01EEE:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
01EF0:  MOVLB  8
01EF2:  MOVF   x52,W
01EF4:  ADDWF  x60,W
01EF6:  MOVWF  FE9
01EF8:  MOVF   x53,W
01EFA:  ADDWFC x61,W
01EFC:  MOVWF  FEA
01EFE:  MOVLW  01
01F00:  MOVWF  x66
01F02:  MOVLW  08
01F04:  MOVWF  x67
01F06:  MOVLW  01
01F08:  MOVWF  x68
01F0A:  MOVLB  0
01F0C:  CALL   1C86
01F10:  MOVFF  01,FEF
01F14:  MOVLW  01
01F16:  MOVLB  8
01F18:  ADDWF  x60,F
01F1A:  BTFSC  FD8.0
01F1C:  INCF   x61,F
01F1E:  BTFSC  FD8.2
01F20:  INCF   x62,F
01F22:  BTFSC  FD8.2
01F24:  INCF   x63,F
01F26:  MOVLB  0
01F28:  GOTO   1E96
....................          break;
01F2C:  GOTO   1F34
....................    
....................          
....................       default:
....................          break;
01F30:  GOTO   1F34
....................    }
....................    return;
01F34:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02E06:  MOVLB  8
02E08:  MOVF   x44,W
02E0A:  XORLW  00
02E0C:  MOVLB  0
02E0E:  BTFSC  FD8.2
02E10:  GOTO   2E20
02E14:  XORLW  01
02E16:  BTFSC  FD8.2
02E18:  GOTO   2ECE
02E1C:  GOTO   2F7C
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02E20:  MOVLB  8
02E22:  CLRF   x4F
02E24:  MOVLB  0
02E26:  MOVLB  8
02E28:  MOVF   x4A,W
02E2A:  SUBWF  x4F,W
02E2C:  BTFSS  FD8.0
02E2E:  BRA    2E36
02E30:  MOVLB  0
02E32:  GOTO   2E66
02E36:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02E38:  MOVLB  8
02E3A:  MOVF   x4F,W
02E3C:  ADDWF  x48,W
02E3E:  MOVWF  FE9
02E40:  MOVLW  00
02E42:  ADDWFC x49,W
02E44:  MOVWF  FEA
02E46:  MOVFF  FEF,855
02E4A:  MOVFF  855,866
02E4E:  MOVLW  08
02E50:  MOVWF  x67
02E52:  MOVLW  01
02E54:  MOVWF  x68
02E56:  MOVLB  0
02E58:  CALL   1C0A
02E5C:  MOVLB  8
02E5E:  INCF   x4F,F
02E60:  MOVLB  0
02E62:  GOTO   2E26
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02E66:  MOVLB  8
02E68:  CLRF   x51
02E6A:  CLRF   x50
02E6C:  MOVLB  0
02E6E:  MOVLB  8
02E70:  MOVF   x51,W
02E72:  SUBWF  x4E,W
02E74:  BTFSC  FD8.0
02E76:  BRA    2E7E
02E78:  MOVLB  0
02E7A:  GOTO   2ECA
02E7E:  MOVLB  0
02E80:  BTFSS  FD8.2
02E82:  GOTO   2E98
02E86:  MOVLB  8
02E88:  MOVF   x4D,W
02E8A:  SUBWF  x50,W
02E8C:  BTFSS  FD8.0
02E8E:  BRA    2E96
02E90:  MOVLB  0
02E92:  GOTO   2ECA
02E96:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02E98:  MOVLB  8
02E9A:  MOVF   x4B,W
02E9C:  ADDWF  x50,W
02E9E:  MOVWF  FE9
02EA0:  MOVF   x4C,W
02EA2:  ADDWFC x51,W
02EA4:  MOVWF  FEA
02EA6:  MOVFF  FEF,855
02EAA:  MOVFF  855,866
02EAE:  MOVLW  08
02EB0:  MOVWF  x67
02EB2:  MOVLW  01
02EB4:  MOVWF  x68
02EB6:  MOVLB  0
02EB8:  CALL   1C0A
02EBC:  MOVLB  8
02EBE:  INCF   x50,F
02EC0:  BTFSC  FD8.2
02EC2:  INCF   x51,F
02EC4:  MOVLB  0
02EC6:  GOTO   2E6E
....................          break;
02ECA:  GOTO   2F80
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02ECE:  MOVLB  8
02ED0:  CLRF   x52
02ED2:  MOVLB  0
02ED4:  MOVLB  8
02ED6:  MOVF   x4A,W
02ED8:  SUBWF  x52,W
02EDA:  BTFSS  FD8.0
02EDC:  BRA    2EE4
02EDE:  MOVLB  0
02EE0:  GOTO   2F14
02EE4:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
02EE6:  MOVLB  8
02EE8:  MOVF   x52,W
02EEA:  ADDWF  x48,W
02EEC:  MOVWF  FE9
02EEE:  MOVLW  00
02EF0:  ADDWFC x49,W
02EF2:  MOVWF  FEA
02EF4:  MOVFF  FEF,855
02EF8:  MOVFF  855,866
02EFC:  MOVLW  08
02EFE:  MOVWF  x67
02F00:  MOVLW  01
02F02:  MOVWF  x68
02F04:  MOVLB  0
02F06:  CALL   1C86
02F0A:  MOVLB  8
02F0C:  INCF   x52,F
02F0E:  MOVLB  0
02F10:  GOTO   2ED4
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02F14:  MOVLB  8
02F16:  CLRF   x54
02F18:  CLRF   x53
02F1A:  MOVLB  0
02F1C:  MOVLB  8
02F1E:  MOVF   x54,W
02F20:  SUBWF  x4E,W
02F22:  BTFSC  FD8.0
02F24:  BRA    2F2C
02F26:  MOVLB  0
02F28:  GOTO   2F78
02F2C:  MOVLB  0
02F2E:  BTFSS  FD8.2
02F30:  GOTO   2F46
02F34:  MOVLB  8
02F36:  MOVF   x4D,W
02F38:  SUBWF  x53,W
02F3A:  BTFSS  FD8.0
02F3C:  BRA    2F44
02F3E:  MOVLB  0
02F40:  GOTO   2F78
02F44:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02F46:  MOVLB  8
02F48:  MOVF   x4B,W
02F4A:  ADDWF  x53,W
02F4C:  MOVWF  FE9
02F4E:  MOVF   x4C,W
02F50:  ADDWFC x54,W
02F52:  MOVWF  FEA
02F54:  MOVFF  FEF,855
02F58:  MOVFF  855,866
02F5C:  MOVLW  08
02F5E:  MOVWF  x67
02F60:  MOVLW  01
02F62:  MOVWF  x68
02F64:  MOVLB  0
02F66:  CALL   1C86
02F6A:  MOVLB  8
02F6C:  INCF   x53,F
02F6E:  BTFSC  FD8.2
02F70:  INCF   x54,F
02F72:  MOVLB  0
02F74:  GOTO   2F1C
....................          break;
02F78:  GOTO   2F80
....................          
....................       default:
....................          break;
02F7C:  GOTO   2F80
....................    }
....................    return;
02F80:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
05F98:  MOVFF  493,84A
05F9C:  MOVLW  01
05F9E:  MOVLB  8
05FA0:  MOVWF  x4B
05FA2:  MOVLW  0F
05FA4:  MOVWF  x4D
05FA6:  MOVLW  89
05FA8:  MOVWF  x4C
05FAA:  MOVLB  0
05FAC:  CALL   1BB6
05FB0:  MOVFF  493,84A
05FB4:  MOVLB  8
05FB6:  CLRF   x4B
05FB8:  MOVLW  0F
05FBA:  MOVWF  x4D
05FBC:  MOVLW  92
05FBE:  MOVWF  x4C
05FC0:  MOVLB  0
05FC2:  CALL   1BB6
05FC6:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
02F82:  MOVLW  05
02F84:  MOVLB  8
02F86:  MOVWF  x48
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
02F88:  MOVFF  846,84A
02F8C:  CLRF   x4B
02F8E:  MOVLW  0F
02F90:  MOVWF  x4D
02F92:  MOVLW  89
02F94:  MOVWF  x4C
02F96:  MOVLB  0
02F98:  CALL   1BB6
02F9C:  MOVFF  846,84A
02FA0:  MOVLB  8
02FA2:  CLRF   x4B
02FA4:  MOVLW  0F
02FA6:  MOVWF  x4D
02FA8:  MOVLW  92
02FAA:  MOVWF  x4C
02FAC:  MOVLB  0
02FAE:  CALL   1BB6
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
02FB2:  MOVFF  847,84D
02FB6:  MOVFF  846,84C
02FBA:  MOVFF  845,84B
02FBE:  MOVFF  844,84A
02FC2:  MOVLW  08
02FC4:  MOVLB  8
02FC6:  MOVWF  x4F
02FC8:  MOVLW  48
02FCA:  MOVWF  x4E
02FCC:  CLRF   x51
02FCE:  MOVLW  01
02FD0:  MOVWF  x50
02FD2:  MOVLW  08
02FD4:  MOVWF  x53
02FD6:  MOVLW  49
02FD8:  MOVWF  x52
02FDA:  CLRF   x57
02FDC:  CLRF   x56
02FDE:  CLRF   x55
02FE0:  MOVLW  01
02FE2:  MOVWF  x54
02FE4:  MOVLB  0
02FE6:  CALL   1D02
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
02FEA:  MOVFF  846,84A
02FEE:  MOVLW  01
02FF0:  MOVLB  8
02FF2:  MOVWF  x4B
02FF4:  MOVLW  0F
02FF6:  MOVWF  x4D
02FF8:  MOVLW  89
02FFA:  MOVWF  x4C
02FFC:  MOVLB  0
02FFE:  CALL   1BB6
03002:  MOVFF  846,84A
03006:  MOVLB  8
03008:  CLRF   x4B
0300A:  MOVLW  0F
0300C:  MOVWF  x4D
0300E:  MOVLW  92
03010:  MOVWF  x4C
03012:  MOVLB  0
03014:  CALL   1BB6
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03018:  MOVLB  8
0301A:  MOVF   x49,W
0301C:  MOVWF  01
0301E:  MOVLB  0
03020:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
052FE:  MOVLB  3
05300:  MOVF   xD2,F
05302:  BTFSC  FD8.2
05304:  BRA    530C
05306:  MOVLB  0
05308:  GOTO   5464
0530C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0530E:  MOVLW  06
05310:  MOVLB  3
05312:  MOVWF  xD9
05314:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
05316:  MOVLW  D8
05318:  MOVLB  3
0531A:  MOVWF  xDA
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0531C:  MOVFF  3D7,3E6
05320:  MOVFF  3D8,3E7
05324:  CLRF   xE8
05326:  CLRF   xE9
05328:  MOVF   xE6,W
0532A:  MOVWF  00
0532C:  CLRF   01
0532E:  CLRF   02
05330:  CLRF   03
05332:  MOVFF  00,3DB
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05336:  MOVFF  3D6,3E6
0533A:  MOVFF  3D7,3E7
0533E:  MOVFF  3D8,3E8
05342:  CLRF   xE9
05344:  MOVF   xE6,W
05346:  MOVWF  00
05348:  CLRF   01
0534A:  CLRF   02
0534C:  CLRF   03
0534E:  MOVFF  00,3DC
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05352:  MOVF   xD5,W
05354:  MOVWF  00
05356:  CLRF   01
05358:  CLRF   02
0535A:  CLRF   03
0535C:  MOVFF  00,3DD
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05360:  MOVFF  3D3,84A
05364:  MOVLB  8
05366:  CLRF   x4B
05368:  MOVLW  0F
0536A:  MOVWF  x4D
0536C:  MOVLW  89
0536E:  MOVWF  x4C
05370:  MOVLB  0
05372:  CALL   1BB6
05376:  MOVFF  3D3,84A
0537A:  MOVLB  8
0537C:  CLRF   x4B
0537E:  MOVLW  0F
05380:  MOVWF  x4D
05382:  MOVLW  92
05384:  MOVWF  x4C
05386:  MOVLB  0
05388:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0538C:  MOVFF  3D4,847
05390:  MOVFF  3D3,846
05394:  MOVFF  3D2,845
05398:  MOVFF  3D1,844
0539C:  MOVLW  03
0539E:  MOVLB  8
053A0:  MOVWF  x49
053A2:  MOVLW  D9
053A4:  MOVWF  x48
053A6:  CLRF   x4B
053A8:  MOVLW  01
053AA:  MOVWF  x4A
053AC:  MOVLB  0
053AE:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
053B2:  MOVFF  3D3,84A
053B6:  MOVLW  01
053B8:  MOVLB  8
053BA:  MOVWF  x4B
053BC:  MOVLW  0F
053BE:  MOVWF  x4D
053C0:  MOVLW  89
053C2:  MOVWF  x4C
053C4:  MOVLB  0
053C6:  CALL   1BB6
053CA:  MOVFF  3D3,84A
053CE:  MOVLB  8
053D0:  CLRF   x4B
053D2:  MOVLW  0F
053D4:  MOVWF  x4D
053D6:  MOVLW  92
053D8:  MOVWF  x4C
053DA:  MOVLB  0
053DC:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
053E0:  MOVFF  3D3,84A
053E4:  MOVLB  8
053E6:  CLRF   x4B
053E8:  MOVLW  0F
053EA:  MOVWF  x4D
053EC:  MOVLW  89
053EE:  MOVWF  x4C
053F0:  MOVLB  0
053F2:  CALL   1BB6
053F6:  MOVFF  3D3,84A
053FA:  MOVLB  8
053FC:  CLRF   x4B
053FE:  MOVLW  0F
05400:  MOVWF  x4D
05402:  MOVLW  92
05404:  MOVWF  x4C
05406:  MOVLB  0
05408:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0540C:  MOVFF  3D4,847
05410:  MOVFF  3D3,846
05414:  MOVFF  3D2,845
05418:  MOVFF  3D1,844
0541C:  MOVLW  03
0541E:  MOVLB  8
05420:  MOVWF  x49
05422:  MOVLW  DA
05424:  MOVWF  x48
05426:  CLRF   x4B
05428:  MOVLW  04
0542A:  MOVWF  x4A
0542C:  MOVLB  0
0542E:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05432:  MOVFF  3D3,84A
05436:  MOVLW  01
05438:  MOVLB  8
0543A:  MOVWF  x4B
0543C:  MOVLW  0F
0543E:  MOVWF  x4D
05440:  MOVLW  89
05442:  MOVWF  x4C
05444:  MOVLB  0
05446:  CALL   1BB6
0544A:  MOVFF  3D3,84A
0544E:  MOVLB  8
05450:  CLRF   x4B
05452:  MOVLW  0F
05454:  MOVWF  x4D
05456:  MOVLW  92
05458:  MOVWF  x4C
0545A:  MOVLB  0
0545C:  CALL   1BB6
....................    }
05460:  GOTO   55E4
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05464:  MOVLB  3
05466:  DECFSZ xD2,W
05468:  BRA    546E
0546A:  BRA    5474
0546C:  MOVLB  0
0546E:  MOVLB  0
05470:  GOTO   55E4
05474:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05476:  MOVLW  06
05478:  MOVLB  3
0547A:  MOVWF  xDE
0547C:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
0547E:  MOVLW  DC
05480:  MOVLB  3
05482:  MOVWF  xDF
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05484:  MOVFF  3D8,3E6
05488:  CLRF   xE7
0548A:  CLRF   xE8
0548C:  CLRF   xE9
0548E:  MOVF   xE6,W
05490:  MOVWF  00
05492:  CLRF   01
05494:  CLRF   02
05496:  CLRF   03
05498:  MOVFF  00,3E0
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0549C:  MOVFF  3D7,3E6
054A0:  MOVFF  3D8,3E7
054A4:  CLRF   xE8
054A6:  CLRF   xE9
054A8:  MOVF   xE6,W
054AA:  MOVWF  00
054AC:  CLRF   01
054AE:  CLRF   02
054B0:  CLRF   03
054B2:  MOVFF  00,3E1
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
054B6:  MOVFF  3D6,3E6
054BA:  MOVFF  3D7,3E7
054BE:  MOVFF  3D8,3E8
054C2:  CLRF   xE9
054C4:  MOVF   xE6,W
054C6:  MOVWF  00
054C8:  CLRF   01
054CA:  CLRF   02
054CC:  CLRF   03
054CE:  MOVFF  00,3E2
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
054D2:  MOVF   xD5,W
054D4:  MOVWF  00
054D6:  CLRF   01
054D8:  CLRF   02
054DA:  CLRF   03
054DC:  MOVFF  00,3E3
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
054E0:  MOVFF  3D3,84A
054E4:  MOVLB  8
054E6:  CLRF   x4B
054E8:  MOVLW  0F
054EA:  MOVWF  x4D
054EC:  MOVLW  89
054EE:  MOVWF  x4C
054F0:  MOVLB  0
054F2:  CALL   1BB6
054F6:  MOVFF  3D3,84A
054FA:  MOVLB  8
054FC:  CLRF   x4B
054FE:  MOVLW  0F
05500:  MOVWF  x4D
05502:  MOVLW  92
05504:  MOVWF  x4C
05506:  MOVLB  0
05508:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0550C:  MOVFF  3D4,847
05510:  MOVFF  3D3,846
05514:  MOVFF  3D2,845
05518:  MOVFF  3D1,844
0551C:  MOVLW  03
0551E:  MOVLB  8
05520:  MOVWF  x49
05522:  MOVLW  DE
05524:  MOVWF  x48
05526:  CLRF   x4B
05528:  MOVLW  01
0552A:  MOVWF  x4A
0552C:  MOVLB  0
0552E:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
05532:  MOVFF  3D3,84A
05536:  MOVLW  01
05538:  MOVLB  8
0553A:  MOVWF  x4B
0553C:  MOVLW  0F
0553E:  MOVWF  x4D
05540:  MOVLW  89
05542:  MOVWF  x4C
05544:  MOVLB  0
05546:  CALL   1BB6
0554A:  MOVFF  3D3,84A
0554E:  MOVLB  8
05550:  CLRF   x4B
05552:  MOVLW  0F
05554:  MOVWF  x4D
05556:  MOVLW  92
05558:  MOVWF  x4C
0555A:  MOVLB  0
0555C:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05560:  MOVFF  3D3,84A
05564:  MOVLB  8
05566:  CLRF   x4B
05568:  MOVLW  0F
0556A:  MOVWF  x4D
0556C:  MOVLW  89
0556E:  MOVWF  x4C
05570:  MOVLB  0
05572:  CALL   1BB6
05576:  MOVFF  3D3,84A
0557A:  MOVLB  8
0557C:  CLRF   x4B
0557E:  MOVLW  0F
05580:  MOVWF  x4D
05582:  MOVLW  92
05584:  MOVWF  x4C
05586:  MOVLB  0
05588:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0558C:  MOVFF  3D4,847
05590:  MOVFF  3D3,846
05594:  MOVFF  3D2,845
05598:  MOVFF  3D1,844
0559C:  MOVLW  03
0559E:  MOVLB  8
055A0:  MOVWF  x49
055A2:  MOVLW  DF
055A4:  MOVWF  x48
055A6:  CLRF   x4B
055A8:  MOVLW  05
055AA:  MOVWF  x4A
055AC:  MOVLB  0
055AE:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
055B2:  MOVFF  3D3,84A
055B6:  MOVLW  01
055B8:  MOVLB  8
055BA:  MOVWF  x4B
055BC:  MOVLW  0F
055BE:  MOVWF  x4D
055C0:  MOVLW  89
055C2:  MOVWF  x4C
055C4:  MOVLB  0
055C6:  CALL   1BB6
055CA:  MOVFF  3D3,84A
055CE:  MOVLB  8
055D0:  CLRF   x4B
055D2:  MOVLW  0F
055D4:  MOVWF  x4D
055D6:  MOVLW  92
055D8:  MOVWF  x4C
055DA:  MOVLB  0
055DC:  CALL   1BB6
....................    }
055E0:  GOTO   55E4
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
055E4:  MOVLB  3
055E6:  CLRF   xE4
055E8:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
055EA:  MOVFF  3D4,847
055EE:  MOVFF  3D3,846
055F2:  MOVFF  3D2,845
055F6:  MOVFF  3D1,844
055FA:  CALL   2F82
055FE:  MOVF   01,W
05600:  ANDLW  01
05602:  SUBLW  01
05604:  BTFSS  FD8.2
05606:  GOTO   5658
....................       if(timeout_counter > 10)
0560A:  MOVLB  3
0560C:  MOVF   xE4,W
0560E:  SUBLW  0A
05610:  BTFSS  FD8.0
05612:  BRA    561A
05614:  MOVLB  0
05616:  GOTO   562C
0561A:  MOVLB  0
....................          delay_ms(200);
0561C:  MOVLW  C8
0561E:  MOVLB  8
05620:  MOVWF  x44
05622:  MOVLB  0
05624:  CALL   17E8
05628:  GOTO   5638
....................       else
....................          delay_ms(10);   
0562C:  MOVLW  0A
0562E:  MOVLB  8
05630:  MOVWF  x44
05632:  MOVLB  0
05634:  CALL   17E8
....................       
....................       if(timeout_counter > 100){
05638:  MOVLB  3
0563A:  MOVF   xE4,W
0563C:  SUBLW  64
0563E:  BTFSS  FD8.0
05640:  BRA    5648
05642:  MOVLB  0
05644:  GOTO   564E
05648:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0564A:  GOTO   5658
....................       }  
....................       timeout_counter++;
0564E:  MOVLB  3
05650:  INCF   xE4,F
05652:  MOVLB  0
05654:  GOTO   55EA
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05658:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
033A6:  MOVLB  8
033A8:  MOVF   x2D,F
033AA:  BTFSC  FD8.2
033AC:  BRA    33B4
033AE:  MOVLB  0
033B0:  GOTO   350A
033B4:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
033B6:  MOVLW  06
033B8:  MOVLB  8
033BA:  MOVWF  x34
033BC:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
033BE:  MOVLW  20
033C0:  MOVLB  8
033C2:  MOVWF  x35
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
033C4:  MOVFF  832,841
033C8:  MOVFF  833,842
033CC:  CLRF   x43
033CE:  CLRF   x44
033D0:  MOVF   x41,W
033D2:  MOVWF  00
033D4:  CLRF   01
033D6:  CLRF   02
033D8:  CLRF   03
033DA:  MOVFF  00,836
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
033DE:  MOVFF  831,841
033E2:  MOVFF  832,842
033E6:  MOVFF  833,843
033EA:  CLRF   x44
033EC:  MOVF   x41,W
033EE:  MOVWF  00
033F0:  CLRF   01
033F2:  CLRF   02
033F4:  CLRF   03
033F6:  MOVFF  00,837
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
033FA:  MOVF   x30,W
033FC:  MOVWF  00
033FE:  CLRF   01
03400:  CLRF   02
03402:  CLRF   03
03404:  MOVFF  00,838
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03408:  MOVFF  82E,84A
0340C:  CLRF   x4B
0340E:  MOVLW  0F
03410:  MOVWF  x4D
03412:  MOVLW  89
03414:  MOVWF  x4C
03416:  MOVLB  0
03418:  CALL   1BB6
0341C:  MOVFF  82E,84A
03420:  MOVLB  8
03422:  CLRF   x4B
03424:  MOVLW  0F
03426:  MOVWF  x4D
03428:  MOVLW  92
0342A:  MOVWF  x4C
0342C:  MOVLB  0
0342E:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03432:  MOVFF  82F,847
03436:  MOVFF  82E,846
0343A:  MOVFF  82D,845
0343E:  MOVFF  82C,844
03442:  MOVLW  08
03444:  MOVLB  8
03446:  MOVWF  x49
03448:  MOVLW  34
0344A:  MOVWF  x48
0344C:  CLRF   x4B
0344E:  MOVLW  01
03450:  MOVWF  x4A
03452:  MOVLB  0
03454:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
03458:  MOVFF  82E,84A
0345C:  MOVLW  01
0345E:  MOVLB  8
03460:  MOVWF  x4B
03462:  MOVLW  0F
03464:  MOVWF  x4D
03466:  MOVLW  89
03468:  MOVWF  x4C
0346A:  MOVLB  0
0346C:  CALL   1BB6
03470:  MOVFF  82E,84A
03474:  MOVLB  8
03476:  CLRF   x4B
03478:  MOVLW  0F
0347A:  MOVWF  x4D
0347C:  MOVLW  92
0347E:  MOVWF  x4C
03480:  MOVLB  0
03482:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03486:  MOVFF  82E,84A
0348A:  MOVLB  8
0348C:  CLRF   x4B
0348E:  MOVLW  0F
03490:  MOVWF  x4D
03492:  MOVLW  89
03494:  MOVWF  x4C
03496:  MOVLB  0
03498:  CALL   1BB6
0349C:  MOVFF  82E,84A
034A0:  MOVLB  8
034A2:  CLRF   x4B
034A4:  MOVLW  0F
034A6:  MOVWF  x4D
034A8:  MOVLW  92
034AA:  MOVWF  x4C
034AC:  MOVLB  0
034AE:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
034B2:  MOVFF  82F,847
034B6:  MOVFF  82E,846
034BA:  MOVFF  82D,845
034BE:  MOVFF  82C,844
034C2:  MOVLW  08
034C4:  MOVLB  8
034C6:  MOVWF  x49
034C8:  MOVLW  35
034CA:  MOVWF  x48
034CC:  CLRF   x4B
034CE:  MOVLW  04
034D0:  MOVWF  x4A
034D2:  MOVLB  0
034D4:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
034D8:  MOVFF  82E,84A
034DC:  MOVLW  01
034DE:  MOVLB  8
034E0:  MOVWF  x4B
034E2:  MOVLW  0F
034E4:  MOVWF  x4D
034E6:  MOVLW  89
034E8:  MOVWF  x4C
034EA:  MOVLB  0
034EC:  CALL   1BB6
034F0:  MOVFF  82E,84A
034F4:  MOVLB  8
034F6:  CLRF   x4B
034F8:  MOVLW  0F
034FA:  MOVWF  x4D
034FC:  MOVLW  92
034FE:  MOVWF  x4C
03500:  MOVLB  0
03502:  CALL   1BB6
....................    }
03506:  GOTO   3688
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0350A:  MOVLB  8
0350C:  DECFSZ x2D,W
0350E:  BRA    3514
03510:  BRA    351A
03512:  MOVLB  0
03514:  MOVLB  0
03516:  GOTO   3688
0351A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0351C:  MOVLW  06
0351E:  MOVLB  8
03520:  MOVWF  x39
03522:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
03524:  MOVLW  21
03526:  MOVLB  8
03528:  MOVWF  x3A
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
0352A:  MOVFF  833,841
0352E:  CLRF   x42
03530:  CLRF   x43
03532:  CLRF   x44
03534:  MOVF   x41,W
03536:  MOVWF  00
03538:  CLRF   01
0353A:  CLRF   02
0353C:  CLRF   03
0353E:  MOVFF  00,83B
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03542:  MOVFF  832,841
03546:  MOVFF  833,842
0354A:  CLRF   x43
0354C:  CLRF   x44
0354E:  MOVF   x41,W
03550:  MOVWF  00
03552:  CLRF   01
03554:  CLRF   02
03556:  CLRF   03
03558:  MOVFF  00,83C
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0355C:  MOVFF  831,841
03560:  MOVFF  832,842
03564:  MOVFF  833,843
03568:  CLRF   x44
0356A:  MOVF   x41,W
0356C:  MOVWF  00
0356E:  CLRF   01
03570:  CLRF   02
03572:  CLRF   03
03574:  MOVFF  00,83D
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03578:  MOVF   x30,W
0357A:  MOVWF  00
0357C:  CLRF   01
0357E:  CLRF   02
03580:  CLRF   03
03582:  MOVFF  00,83E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03586:  MOVFF  82E,84A
0358A:  CLRF   x4B
0358C:  MOVLW  0F
0358E:  MOVWF  x4D
03590:  MOVLW  89
03592:  MOVWF  x4C
03594:  MOVLB  0
03596:  CALL   1BB6
0359A:  MOVFF  82E,84A
0359E:  MOVLB  8
035A0:  CLRF   x4B
035A2:  MOVLW  0F
035A4:  MOVWF  x4D
035A6:  MOVLW  92
035A8:  MOVWF  x4C
035AA:  MOVLB  0
035AC:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
035B0:  MOVFF  82F,847
035B4:  MOVFF  82E,846
035B8:  MOVFF  82D,845
035BC:  MOVFF  82C,844
035C0:  MOVLW  08
035C2:  MOVLB  8
035C4:  MOVWF  x49
035C6:  MOVLW  39
035C8:  MOVWF  x48
035CA:  CLRF   x4B
035CC:  MOVLW  01
035CE:  MOVWF  x4A
035D0:  MOVLB  0
035D2:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
035D6:  MOVFF  82E,84A
035DA:  MOVLW  01
035DC:  MOVLB  8
035DE:  MOVWF  x4B
035E0:  MOVLW  0F
035E2:  MOVWF  x4D
035E4:  MOVLW  89
035E6:  MOVWF  x4C
035E8:  MOVLB  0
035EA:  CALL   1BB6
035EE:  MOVFF  82E,84A
035F2:  MOVLB  8
035F4:  CLRF   x4B
035F6:  MOVLW  0F
035F8:  MOVWF  x4D
035FA:  MOVLW  92
035FC:  MOVWF  x4C
035FE:  MOVLB  0
03600:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03604:  MOVFF  82E,84A
03608:  MOVLB  8
0360A:  CLRF   x4B
0360C:  MOVLW  0F
0360E:  MOVWF  x4D
03610:  MOVLW  89
03612:  MOVWF  x4C
03614:  MOVLB  0
03616:  CALL   1BB6
0361A:  MOVFF  82E,84A
0361E:  MOVLB  8
03620:  CLRF   x4B
03622:  MOVLW  0F
03624:  MOVWF  x4D
03626:  MOVLW  92
03628:  MOVWF  x4C
0362A:  MOVLB  0
0362C:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
03630:  MOVFF  82F,847
03634:  MOVFF  82E,846
03638:  MOVFF  82D,845
0363C:  MOVFF  82C,844
03640:  MOVLW  08
03642:  MOVLB  8
03644:  MOVWF  x49
03646:  MOVLW  3A
03648:  MOVWF  x48
0364A:  CLRF   x4B
0364C:  MOVLW  05
0364E:  MOVWF  x4A
03650:  MOVLB  0
03652:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03656:  MOVFF  82E,84A
0365A:  MOVLW  01
0365C:  MOVLB  8
0365E:  MOVWF  x4B
03660:  MOVLW  0F
03662:  MOVWF  x4D
03664:  MOVLW  89
03666:  MOVWF  x4C
03668:  MOVLB  0
0366A:  CALL   1BB6
0366E:  MOVFF  82E,84A
03672:  MOVLB  8
03674:  CLRF   x4B
03676:  MOVLW  0F
03678:  MOVWF  x4D
0367A:  MOVLW  92
0367C:  MOVWF  x4C
0367E:  MOVLB  0
03680:  CALL   1BB6
....................    }
03684:  GOTO   3688
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03688:  MOVLB  8
0368A:  CLRF   x3F
0368C:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0368E:  MOVFF  82F,847
03692:  MOVFF  82E,846
03696:  MOVFF  82D,845
0369A:  MOVFF  82C,844
0369E:  CALL   2F82
036A2:  MOVF   01,W
036A4:  ANDLW  01
036A6:  SUBLW  01
036A8:  BTFSS  FD8.2
036AA:  GOTO   36FC
....................       if(timeout_counter > 10)
036AE:  MOVLB  8
036B0:  MOVF   x3F,W
036B2:  SUBLW  0A
036B4:  BTFSS  FD8.0
036B6:  BRA    36BE
036B8:  MOVLB  0
036BA:  GOTO   36D0
036BE:  MOVLB  0
....................          delay_ms(200);
036C0:  MOVLW  C8
036C2:  MOVLB  8
036C4:  MOVWF  x44
036C6:  MOVLB  0
036C8:  CALL   17E8
036CC:  GOTO   36DC
....................       else
....................          delay_ms(10);   
036D0:  MOVLW  0A
036D2:  MOVLB  8
036D4:  MOVWF  x44
036D6:  MOVLB  0
036D8:  CALL   17E8
....................       
....................       if(timeout_counter > 100){
036DC:  MOVLB  8
036DE:  MOVF   x3F,W
036E0:  SUBLW  64
036E2:  BTFSS  FD8.0
036E4:  BRA    36EC
036E6:  MOVLB  0
036E8:  GOTO   36F2
036EC:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
036EE:  GOTO   36FC
....................       }  
....................       timeout_counter++;
036F2:  MOVLB  8
036F4:  INCF   x3F,F
036F6:  MOVLB  0
036F8:  GOTO   368E
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
036FC:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
076E8:  MOVLB  4
076EA:  MOVF   x21,F
076EC:  BTFSC  FD8.2
076EE:  BRA    76F6
076F0:  MOVLB  0
076F2:  GOTO   77E2
076F6:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
076F8:  MOVLW  03
076FA:  MOVLB  4
076FC:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
076FE:  MOVFF  426,433
07702:  MOVFF  427,434
07706:  CLRF   x35
07708:  CLRF   x36
0770A:  MOVF   x33,W
0770C:  MOVWF  00
0770E:  CLRF   01
07710:  CLRF   02
07712:  CLRF   03
07714:  MOVFF  00,42A
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07718:  MOVFF  425,433
0771C:  MOVFF  426,434
07720:  MOVFF  427,435
07724:  CLRF   x36
07726:  MOVF   x33,W
07728:  MOVWF  00
0772A:  CLRF   01
0772C:  CLRF   02
0772E:  CLRF   03
07730:  MOVFF  00,42B
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
07734:  MOVF   x24,W
07736:  MOVWF  00
07738:  CLRF   01
0773A:  CLRF   02
0773C:  CLRF   03
0773E:  MOVFF  00,42C
....................             
....................       output_low(flash_stream.cs_pin);
07742:  MOVFF  422,84A
07746:  MOVLB  8
07748:  CLRF   x4B
0774A:  MOVLW  0F
0774C:  MOVWF  x4D
0774E:  MOVLW  89
07750:  MOVWF  x4C
07752:  MOVLB  0
07754:  CALL   1BB6
07758:  MOVFF  422,84A
0775C:  MOVLB  8
0775E:  CLRF   x4B
07760:  MOVLW  0F
07762:  MOVWF  x4D
07764:  MOVLW  92
07766:  MOVWF  x4C
07768:  MOVLB  0
0776A:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
0776E:  MOVFF  423,84D
07772:  MOVFF  422,84C
07776:  MOVFF  421,84B
0777A:  MOVFF  420,84A
0777E:  MOVLW  04
07780:  MOVLB  8
07782:  MOVWF  x4F
07784:  MOVLW  29
07786:  MOVWF  x4E
07788:  CLRF   x51
0778A:  MOVLW  04
0778C:  MOVWF  x50
0778E:  MOVLW  04
07790:  MOVWF  x53
07792:  MOVLW  28
07794:  MOVWF  x52
07796:  CLRF   x57
07798:  CLRF   x56
0779A:  CLRF   x55
0779C:  MOVLW  01
0779E:  MOVWF  x54
077A0:  MOVLB  0
077A2:  CALL   1D02
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
077A6:  MOVLW  02
077A8:  MOVWF  00
077AA:  DECFSZ 00,F
077AC:  BRA    77AA
077AE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
077B0:  MOVFF  422,84A
077B4:  MOVLW  01
077B6:  MOVLB  8
077B8:  MOVWF  x4B
077BA:  MOVLW  0F
077BC:  MOVWF  x4D
077BE:  MOVLW  89
077C0:  MOVWF  x4C
077C2:  MOVLB  0
077C4:  CALL   1BB6
077C8:  MOVFF  422,84A
077CC:  MOVLB  8
077CE:  CLRF   x4B
077D0:  MOVLW  0F
077D2:  MOVWF  x4D
077D4:  MOVLW  92
077D6:  MOVWF  x4C
077D8:  MOVLB  0
077DA:  CALL   1BB6
....................    }
077DE:  GOTO   78F2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
077E2:  MOVLB  4
077E4:  DECFSZ x21,W
077E6:  BRA    77EC
077E8:  BRA    77F2
077EA:  MOVLB  0
077EC:  MOVLB  0
077EE:  GOTO   78F2
077F2:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
077F4:  MOVLW  13
077F6:  MOVLB  4
077F8:  MOVWF  x2D
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
077FA:  MOVFF  427,433
077FE:  CLRF   x34
07800:  CLRF   x35
07802:  CLRF   x36
07804:  MOVF   x33,W
07806:  MOVWF  00
07808:  CLRF   01
0780A:  CLRF   02
0780C:  CLRF   03
0780E:  MOVFF  00,42E
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07812:  MOVFF  426,433
07816:  MOVFF  427,434
0781A:  CLRF   x35
0781C:  CLRF   x36
0781E:  MOVF   x33,W
07820:  MOVWF  00
07822:  CLRF   01
07824:  CLRF   02
07826:  CLRF   03
07828:  MOVFF  00,42F
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0782C:  MOVFF  425,433
07830:  MOVFF  426,434
07834:  MOVFF  427,435
07838:  CLRF   x36
0783A:  MOVF   x33,W
0783C:  MOVWF  00
0783E:  CLRF   01
07840:  CLRF   02
07842:  CLRF   03
07844:  MOVFF  00,430
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
07848:  MOVF   x24,W
0784A:  MOVWF  00
0784C:  CLRF   01
0784E:  CLRF   02
07850:  CLRF   03
07852:  MOVFF  00,431
....................    
....................       output_low(flash_stream.cs_pin);
07856:  MOVFF  422,84A
0785A:  MOVLB  8
0785C:  CLRF   x4B
0785E:  MOVLW  0F
07860:  MOVWF  x4D
07862:  MOVLW  89
07864:  MOVWF  x4C
07866:  MOVLB  0
07868:  CALL   1BB6
0786C:  MOVFF  422,84A
07870:  MOVLB  8
07872:  CLRF   x4B
07874:  MOVLW  0F
07876:  MOVWF  x4D
07878:  MOVLW  92
0787A:  MOVWF  x4C
0787C:  MOVLB  0
0787E:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
07882:  MOVFF  423,84D
07886:  MOVFF  422,84C
0788A:  MOVFF  421,84B
0788E:  MOVFF  420,84A
07892:  MOVLW  04
07894:  MOVLB  8
07896:  MOVWF  x4F
07898:  MOVLW  2D
0789A:  MOVWF  x4E
0789C:  CLRF   x51
0789E:  MOVLW  05
078A0:  MOVWF  x50
078A2:  MOVLW  04
078A4:  MOVWF  x53
078A6:  MOVLW  28
078A8:  MOVWF  x52
078AA:  CLRF   x57
078AC:  CLRF   x56
078AE:  CLRF   x55
078B0:  MOVLW  01
078B2:  MOVWF  x54
078B4:  MOVLB  0
078B6:  CALL   1D02
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
078BA:  MOVLW  02
078BC:  MOVWF  00
078BE:  DECFSZ 00,F
078C0:  BRA    78BE
078C2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
078C4:  MOVFF  422,84A
078C8:  MOVLW  01
078CA:  MOVLB  8
078CC:  MOVWF  x4B
078CE:  MOVLW  0F
078D0:  MOVWF  x4D
078D2:  MOVLW  89
078D4:  MOVWF  x4C
078D6:  MOVLB  0
078D8:  CALL   1BB6
078DC:  MOVFF  422,84A
078E0:  MOVLB  8
078E2:  CLRF   x4B
078E4:  MOVLW  0F
078E6:  MOVWF  x4D
078E8:  MOVLW  92
078EA:  MOVWF  x4C
078EC:  MOVLB  0
078EE:  CALL   1BB6
....................    }
....................    return read_data;
078F2:  MOVLB  4
078F4:  MOVF   x28,W
078F6:  MOVWF  01
078F8:  MOVLB  0
078FA:  GOTO   82CE (RETURN)
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
01FFC:  MOVLB  4
01FFE:  MOVF   x27,F
02000:  BTFSC  FD8.2
02002:  BRA    200A
02004:  MOVLB  0
02006:  GOTO   20FC
0200A:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0200C:  MOVLW  03
0200E:  MOVLB  4
02010:  MOVWF  x34
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02012:  MOVFF  42C,43E
02016:  MOVFF  42D,43F
0201A:  CLRF   x40
0201C:  CLRF   x41
0201E:  MOVF   x3E,W
02020:  MOVWF  00
02022:  CLRF   01
02024:  CLRF   02
02026:  CLRF   03
02028:  MOVFF  00,435
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0202C:  MOVFF  42B,43E
02030:  MOVFF  42C,43F
02034:  MOVFF  42D,440
02038:  CLRF   x41
0203A:  MOVF   x3E,W
0203C:  MOVWF  00
0203E:  CLRF   01
02040:  CLRF   02
02042:  CLRF   03
02044:  MOVFF  00,436
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02048:  MOVF   x2A,W
0204A:  MOVWF  00
0204C:  CLRF   01
0204E:  CLRF   02
02050:  CLRF   03
02052:  MOVFF  00,437
....................             
....................       output_low(flash_stream.cs_pin);
02056:  MOVFF  428,84A
0205A:  MOVLB  8
0205C:  CLRF   x4B
0205E:  MOVLW  0F
02060:  MOVWF  x4D
02062:  MOVLW  89
02064:  MOVWF  x4C
02066:  MOVLB  0
02068:  CALL   1BB6
0206C:  MOVFF  428,84A
02070:  MOVLB  8
02072:  CLRF   x4B
02074:  MOVLW  0F
02076:  MOVWF  x4D
02078:  MOVLW  92
0207A:  MOVWF  x4C
0207C:  MOVLB  0
0207E:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02082:  MOVFF  429,84D
02086:  MOVFF  428,84C
0208A:  MOVFF  427,84B
0208E:  MOVFF  426,84A
02092:  MOVLW  04
02094:  MOVLB  8
02096:  MOVWF  x4F
02098:  MOVLW  34
0209A:  MOVWF  x4E
0209C:  CLRF   x51
0209E:  MOVLW  04
020A0:  MOVWF  x50
020A2:  MOVFF  42F,853
020A6:  MOVFF  42E,852
020AA:  MOVFF  433,857
020AE:  MOVFF  432,856
020B2:  MOVFF  431,855
020B6:  MOVFF  430,854
020BA:  MOVLB  0
020BC:  CALL   1D02
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
020C0:  MOVLW  02
020C2:  MOVWF  00
020C4:  DECFSZ 00,F
020C6:  BRA    20C4
020C8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
020CA:  MOVFF  428,84A
020CE:  MOVLW  01
020D0:  MOVLB  8
020D2:  MOVWF  x4B
020D4:  MOVLW  0F
020D6:  MOVWF  x4D
020D8:  MOVLW  89
020DA:  MOVWF  x4C
020DC:  MOVLB  0
020DE:  CALL   1BB6
020E2:  MOVFF  428,84A
020E6:  MOVLB  8
020E8:  CLRF   x4B
020EA:  MOVLW  0F
020EC:  MOVWF  x4D
020EE:  MOVLW  92
020F0:  MOVWF  x4C
020F2:  MOVLB  0
020F4:  CALL   1BB6
....................    }
020F8:  GOTO   2212
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
020FC:  MOVLB  4
020FE:  DECFSZ x27,W
02100:  BRA    2106
02102:  BRA    210C
02104:  MOVLB  0
02106:  MOVLB  0
02108:  GOTO   2212
0210C:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0210E:  MOVLW  13
02110:  MOVLB  4
02112:  MOVWF  x38
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02114:  MOVFF  42D,43E
02118:  CLRF   x3F
0211A:  CLRF   x40
0211C:  CLRF   x41
0211E:  MOVF   x3E,W
02120:  MOVWF  00
02122:  CLRF   01
02124:  CLRF   02
02126:  CLRF   03
02128:  MOVFF  00,439
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0212C:  MOVFF  42C,43E
02130:  MOVFF  42D,43F
02134:  CLRF   x40
02136:  CLRF   x41
02138:  MOVF   x3E,W
0213A:  MOVWF  00
0213C:  CLRF   01
0213E:  CLRF   02
02140:  CLRF   03
02142:  MOVFF  00,43A
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02146:  MOVFF  42B,43E
0214A:  MOVFF  42C,43F
0214E:  MOVFF  42D,440
02152:  CLRF   x41
02154:  MOVF   x3E,W
02156:  MOVWF  00
02158:  CLRF   01
0215A:  CLRF   02
0215C:  CLRF   03
0215E:  MOVFF  00,43B
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02162:  MOVF   x2A,W
02164:  MOVWF  00
02166:  CLRF   01
02168:  CLRF   02
0216A:  CLRF   03
0216C:  MOVFF  00,43C
....................    
....................       output_low(flash_stream.cs_pin);
02170:  MOVFF  428,84A
02174:  MOVLB  8
02176:  CLRF   x4B
02178:  MOVLW  0F
0217A:  MOVWF  x4D
0217C:  MOVLW  89
0217E:  MOVWF  x4C
02180:  MOVLB  0
02182:  CALL   1BB6
02186:  MOVFF  428,84A
0218A:  MOVLB  8
0218C:  CLRF   x4B
0218E:  MOVLW  0F
02190:  MOVWF  x4D
02192:  MOVLW  92
02194:  MOVWF  x4C
02196:  MOVLB  0
02198:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0219C:  MOVFF  429,84D
021A0:  MOVFF  428,84C
021A4:  MOVFF  427,84B
021A8:  MOVFF  426,84A
021AC:  MOVLW  04
021AE:  MOVLB  8
021B0:  MOVWF  x4F
021B2:  MOVLW  38
021B4:  MOVWF  x4E
021B6:  CLRF   x51
021B8:  MOVLW  05
021BA:  MOVWF  x50
021BC:  MOVFF  42F,853
021C0:  MOVFF  42E,852
021C4:  MOVFF  433,857
021C8:  MOVFF  432,856
021CC:  MOVFF  431,855
021D0:  MOVFF  430,854
021D4:  MOVLB  0
021D6:  CALL   1D02
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
021DA:  MOVLW  02
021DC:  MOVWF  00
021DE:  DECFSZ 00,F
021E0:  BRA    21DE
021E2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
021E4:  MOVFF  428,84A
021E8:  MOVLW  01
021EA:  MOVLB  8
021EC:  MOVWF  x4B
021EE:  MOVLW  0F
021F0:  MOVWF  x4D
021F2:  MOVLW  89
021F4:  MOVWF  x4C
021F6:  MOVLB  0
021F8:  CALL   1BB6
021FC:  MOVFF  428,84A
02200:  MOVLB  8
02202:  CLRF   x4B
02204:  MOVLW  0F
02206:  MOVWF  x4D
02208:  MOVLW  92
0220A:  MOVWF  x4C
0220C:  MOVLB  0
0220E:  CALL   1BB6
....................    }
....................    return;
02212:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
078FE:  MOVLB  4
07900:  MOVF   x1F,F
07902:  BTFSC  FD8.2
07904:  BRA    790C
07906:  MOVLB  0
07908:  GOTO   7A72
0790C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0790E:  MOVLW  06
07910:  MOVLB  4
07912:  MOVWF  x27
07914:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
07916:  MOVLW  02
07918:  MOVLB  4
0791A:  MOVWF  x28
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0791C:  MOVFF  424,436
07920:  MOVFF  425,437
07924:  CLRF   x38
07926:  CLRF   x39
07928:  MOVF   x36,W
0792A:  MOVWF  00
0792C:  CLRF   01
0792E:  CLRF   02
07930:  CLRF   03
07932:  MOVFF  00,429
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07936:  MOVFF  423,436
0793A:  MOVFF  424,437
0793E:  MOVFF  425,438
07942:  CLRF   x39
07944:  MOVF   x36,W
07946:  MOVWF  00
07948:  CLRF   01
0794A:  CLRF   02
0794C:  CLRF   03
0794E:  MOVFF  00,42A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
07952:  MOVF   x22,W
07954:  MOVWF  00
07956:  CLRF   01
07958:  CLRF   02
0795A:  CLRF   03
0795C:  MOVFF  00,42B
....................       flash_cmd[4] = write_data;
07960:  MOVFF  426,42C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07964:  MOVFF  420,84A
07968:  MOVLB  8
0796A:  CLRF   x4B
0796C:  MOVLW  0F
0796E:  MOVWF  x4D
07970:  MOVLW  89
07972:  MOVWF  x4C
07974:  MOVLB  0
07976:  CALL   1BB6
0797A:  MOVFF  420,84A
0797E:  MOVLB  8
07980:  CLRF   x4B
07982:  MOVLW  0F
07984:  MOVWF  x4D
07986:  MOVLW  92
07988:  MOVWF  x4C
0798A:  MOVLB  0
0798C:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
07990:  MOVFF  421,847
07994:  MOVFF  420,846
07998:  MOVFF  41F,845
0799C:  MOVFF  41E,844
079A0:  MOVLW  04
079A2:  MOVLB  8
079A4:  MOVWF  x49
079A6:  MOVLW  27
079A8:  MOVWF  x48
079AA:  CLRF   x4B
079AC:  MOVLW  01
079AE:  MOVWF  x4A
079B0:  MOVLB  0
079B2:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
079B6:  MOVFF  420,84A
079BA:  MOVLW  01
079BC:  MOVLB  8
079BE:  MOVWF  x4B
079C0:  MOVLW  0F
079C2:  MOVWF  x4D
079C4:  MOVLW  89
079C6:  MOVWF  x4C
079C8:  MOVLB  0
079CA:  CALL   1BB6
079CE:  MOVFF  420,84A
079D2:  MOVLB  8
079D4:  CLRF   x4B
079D6:  MOVLW  0F
079D8:  MOVWF  x4D
079DA:  MOVLW  92
079DC:  MOVWF  x4C
079DE:  MOVLB  0
079E0:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
079E4:  MOVFF  420,84A
079E8:  MOVLB  8
079EA:  CLRF   x4B
079EC:  MOVLW  0F
079EE:  MOVWF  x4D
079F0:  MOVLW  89
079F2:  MOVWF  x4C
079F4:  MOVLB  0
079F6:  CALL   1BB6
079FA:  MOVFF  420,84A
079FE:  MOVLB  8
07A00:  CLRF   x4B
07A02:  MOVLW  0F
07A04:  MOVWF  x4D
07A06:  MOVLW  92
07A08:  MOVWF  x4C
07A0A:  MOVLB  0
07A0C:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
07A10:  MOVFF  421,847
07A14:  MOVFF  420,846
07A18:  MOVFF  41F,845
07A1C:  MOVFF  41E,844
07A20:  MOVLW  04
07A22:  MOVLB  8
07A24:  MOVWF  x49
07A26:  MOVLW  28
07A28:  MOVWF  x48
07A2A:  CLRF   x4B
07A2C:  MOVLW  05
07A2E:  MOVWF  x4A
07A30:  MOVLB  0
07A32:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
07A36:  MOVLW  02
07A38:  MOVWF  00
07A3A:  DECFSZ 00,F
07A3C:  BRA    7A3A
07A3E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07A40:  MOVFF  420,84A
07A44:  MOVLW  01
07A46:  MOVLB  8
07A48:  MOVWF  x4B
07A4A:  MOVLW  0F
07A4C:  MOVWF  x4D
07A4E:  MOVLW  89
07A50:  MOVWF  x4C
07A52:  MOVLB  0
07A54:  CALL   1BB6
07A58:  MOVFF  420,84A
07A5C:  MOVLB  8
07A5E:  CLRF   x4B
07A60:  MOVLW  0F
07A62:  MOVWF  x4D
07A64:  MOVLW  92
07A66:  MOVWF  x4C
07A68:  MOVLB  0
07A6A:  CALL   1BB6
....................    }
07A6E:  GOTO   7BFC
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
07A72:  MOVLB  4
07A74:  DECFSZ x1F,W
07A76:  BRA    7A7C
07A78:  BRA    7A82
07A7A:  MOVLB  0
07A7C:  MOVLB  0
07A7E:  GOTO   7BFC
07A82:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
07A84:  MOVLW  06
07A86:  MOVLB  4
07A88:  MOVWF  x2D
07A8A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
07A8C:  MOVLW  12
07A8E:  MOVLB  4
07A90:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
07A92:  MOVFF  425,436
07A96:  CLRF   x37
07A98:  CLRF   x38
07A9A:  CLRF   x39
07A9C:  MOVF   x36,W
07A9E:  MOVWF  00
07AA0:  CLRF   01
07AA2:  CLRF   02
07AA4:  CLRF   03
07AA6:  MOVFF  00,42F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07AAA:  MOVFF  424,436
07AAE:  MOVFF  425,437
07AB2:  CLRF   x38
07AB4:  CLRF   x39
07AB6:  MOVF   x36,W
07AB8:  MOVWF  00
07ABA:  CLRF   01
07ABC:  CLRF   02
07ABE:  CLRF   03
07AC0:  MOVFF  00,430
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07AC4:  MOVFF  423,436
07AC8:  MOVFF  424,437
07ACC:  MOVFF  425,438
07AD0:  CLRF   x39
07AD2:  MOVF   x36,W
07AD4:  MOVWF  00
07AD6:  CLRF   01
07AD8:  CLRF   02
07ADA:  CLRF   03
07ADC:  MOVFF  00,431
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
07AE0:  MOVF   x22,W
07AE2:  MOVWF  00
07AE4:  CLRF   01
07AE6:  CLRF   02
07AE8:  CLRF   03
07AEA:  MOVFF  00,432
....................       flash_cmd[5] = write_data;
07AEE:  MOVFF  426,433
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07AF2:  MOVFF  420,84A
07AF6:  MOVLB  8
07AF8:  CLRF   x4B
07AFA:  MOVLW  0F
07AFC:  MOVWF  x4D
07AFE:  MOVLW  89
07B00:  MOVWF  x4C
07B02:  MOVLB  0
07B04:  CALL   1BB6
07B08:  MOVFF  420,84A
07B0C:  MOVLB  8
07B0E:  CLRF   x4B
07B10:  MOVLW  0F
07B12:  MOVWF  x4D
07B14:  MOVLW  92
07B16:  MOVWF  x4C
07B18:  MOVLB  0
07B1A:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
07B1E:  MOVFF  421,847
07B22:  MOVFF  420,846
07B26:  MOVFF  41F,845
07B2A:  MOVFF  41E,844
07B2E:  MOVLW  04
07B30:  MOVLB  8
07B32:  MOVWF  x49
07B34:  MOVLW  2D
07B36:  MOVWF  x48
07B38:  CLRF   x4B
07B3A:  MOVLW  01
07B3C:  MOVWF  x4A
07B3E:  MOVLB  0
07B40:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
07B44:  MOVFF  420,84A
07B48:  MOVLW  01
07B4A:  MOVLB  8
07B4C:  MOVWF  x4B
07B4E:  MOVLW  0F
07B50:  MOVWF  x4D
07B52:  MOVLW  89
07B54:  MOVWF  x4C
07B56:  MOVLB  0
07B58:  CALL   1BB6
07B5C:  MOVFF  420,84A
07B60:  MOVLB  8
07B62:  CLRF   x4B
07B64:  MOVLW  0F
07B66:  MOVWF  x4D
07B68:  MOVLW  92
07B6A:  MOVWF  x4C
07B6C:  MOVLB  0
07B6E:  CALL   1BB6
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
07B72:  MOVFF  420,84A
07B76:  MOVLB  8
07B78:  CLRF   x4B
07B7A:  MOVLW  0F
07B7C:  MOVWF  x4D
07B7E:  MOVLW  89
07B80:  MOVWF  x4C
07B82:  MOVLB  0
07B84:  CALL   1BB6
07B88:  MOVFF  420,84A
07B8C:  MOVLB  8
07B8E:  CLRF   x4B
07B90:  MOVLW  0F
07B92:  MOVWF  x4D
07B94:  MOVLW  92
07B96:  MOVWF  x4C
07B98:  MOVLB  0
07B9A:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
07B9E:  MOVFF  421,847
07BA2:  MOVFF  420,846
07BA6:  MOVFF  41F,845
07BAA:  MOVFF  41E,844
07BAE:  MOVLW  04
07BB0:  MOVLB  8
07BB2:  MOVWF  x49
07BB4:  MOVLW  2E
07BB6:  MOVWF  x48
07BB8:  CLRF   x4B
07BBA:  MOVLW  06
07BBC:  MOVWF  x4A
07BBE:  MOVLB  0
07BC0:  CALL   2D16
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
07BC4:  MOVLW  02
07BC6:  MOVWF  00
07BC8:  DECFSZ 00,F
07BCA:  BRA    7BC8
07BCC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07BCE:  MOVFF  420,84A
07BD2:  MOVLW  01
07BD4:  MOVLB  8
07BD6:  MOVWF  x4B
07BD8:  MOVLW  0F
07BDA:  MOVWF  x4D
07BDC:  MOVLW  89
07BDE:  MOVWF  x4C
07BE0:  MOVLB  0
07BE2:  CALL   1BB6
07BE6:  MOVFF  420,84A
07BEA:  MOVLB  8
07BEC:  CLRF   x4B
07BEE:  MOVLW  0F
07BF0:  MOVWF  x4D
07BF2:  MOVLW  92
07BF4:  MOVWF  x4C
07BF6:  MOVLB  0
07BF8:  CALL   1BB6
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
07BFC:  MOVLB  4
07BFE:  CLRF   x34
07C00:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
07C02:  MOVFF  421,847
07C06:  MOVFF  420,846
07C0A:  MOVFF  41F,845
07C0E:  MOVFF  41E,844
07C12:  CALL   2F82
07C16:  MOVF   01,W
07C18:  ANDLW  01
07C1A:  SUBLW  01
07C1C:  BTFSS  FD8.2
07C1E:  GOTO   7C70
....................       if(timeout_counter > 10)
07C22:  MOVLB  4
07C24:  MOVF   x34,W
07C26:  SUBLW  0A
07C28:  BTFSS  FD8.0
07C2A:  BRA    7C32
07C2C:  MOVLB  0
07C2E:  GOTO   7C44
07C32:  MOVLB  0
....................          delay_ms(200);
07C34:  MOVLW  C8
07C36:  MOVLB  8
07C38:  MOVWF  x44
07C3A:  MOVLB  0
07C3C:  CALL   17E8
07C40:  GOTO   7C50
....................       else
....................          delay_ms(10);   
07C44:  MOVLW  0A
07C46:  MOVLB  8
07C48:  MOVWF  x44
07C4A:  MOVLB  0
07C4C:  CALL   17E8
....................       
....................       if(timeout_counter > 100){
07C50:  MOVLB  4
07C52:  MOVF   x34,W
07C54:  SUBLW  64
07C56:  BTFSS  FD8.0
07C58:  BRA    7C60
07C5A:  MOVLB  0
07C5C:  GOTO   7C66
07C60:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
07C62:  GOTO   7C70
....................       }  
....................       timeout_counter++;
07C66:  MOVLB  4
07C68:  INCF   x34,F
07C6A:  MOVLB  0
07C6C:  GOTO   7C02
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
07C70:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03022:  MOVLB  8
03024:  MOVF   x2D,F
03026:  BTFSC  FD8.2
03028:  BRA    3030
0302A:  MOVLB  0
0302C:  GOTO   319E
03030:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03032:  MOVLW  06
03034:  MOVLB  8
03036:  MOVWF  x38
03038:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0303A:  MOVLW  02
0303C:  MOVLB  8
0303E:  MOVWF  x39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03040:  MOVFF  832,845
03044:  MOVFF  833,846
03048:  CLRF   x47
0304A:  CLRF   x48
0304C:  MOVF   x45,W
0304E:  MOVWF  00
03050:  CLRF   01
03052:  CLRF   02
03054:  CLRF   03
03056:  MOVFF  00,83A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0305A:  MOVFF  831,845
0305E:  MOVFF  832,846
03062:  MOVFF  833,847
03066:  CLRF   x48
03068:  MOVF   x45,W
0306A:  MOVWF  00
0306C:  CLRF   01
0306E:  CLRF   02
03070:  CLRF   03
03072:  MOVFF  00,83B
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03076:  MOVF   x30,W
03078:  MOVWF  00
0307A:  CLRF   01
0307C:  CLRF   02
0307E:  CLRF   03
03080:  MOVFF  00,83C
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03084:  MOVFF  82E,84A
03088:  CLRF   x4B
0308A:  MOVLW  0F
0308C:  MOVWF  x4D
0308E:  MOVLW  89
03090:  MOVWF  x4C
03092:  MOVLB  0
03094:  CALL   1BB6
03098:  MOVFF  82E,84A
0309C:  MOVLB  8
0309E:  CLRF   x4B
030A0:  MOVLW  0F
030A2:  MOVWF  x4D
030A4:  MOVLW  92
030A6:  MOVWF  x4C
030A8:  MOVLB  0
030AA:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
030AE:  MOVFF  82F,847
030B2:  MOVFF  82E,846
030B6:  MOVFF  82D,845
030BA:  MOVFF  82C,844
030BE:  MOVLW  08
030C0:  MOVLB  8
030C2:  MOVWF  x49
030C4:  MOVLW  38
030C6:  MOVWF  x48
030C8:  CLRF   x4B
030CA:  MOVLW  01
030CC:  MOVWF  x4A
030CE:  MOVLB  0
030D0:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
030D4:  MOVFF  82E,84A
030D8:  MOVLW  01
030DA:  MOVLB  8
030DC:  MOVWF  x4B
030DE:  MOVLW  0F
030E0:  MOVWF  x4D
030E2:  MOVLW  89
030E4:  MOVWF  x4C
030E6:  MOVLB  0
030E8:  CALL   1BB6
030EC:  MOVFF  82E,84A
030F0:  MOVLB  8
030F2:  CLRF   x4B
030F4:  MOVLW  0F
030F6:  MOVWF  x4D
030F8:  MOVLW  92
030FA:  MOVWF  x4C
030FC:  MOVLB  0
030FE:  CALL   1BB6
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03102:  MOVFF  82E,84A
03106:  MOVLB  8
03108:  CLRF   x4B
0310A:  MOVLW  0F
0310C:  MOVWF  x4D
0310E:  MOVLW  89
03110:  MOVWF  x4C
03112:  MOVLB  0
03114:  CALL   1BB6
03118:  MOVFF  82E,84A
0311C:  MOVLB  8
0311E:  CLRF   x4B
03120:  MOVLW  0F
03122:  MOVWF  x4D
03124:  MOVLW  92
03126:  MOVWF  x4C
03128:  MOVLB  0
0312A:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0312E:  MOVFF  82F,847
03132:  MOVFF  82E,846
03136:  MOVFF  82D,845
0313A:  MOVFF  82C,844
0313E:  MOVLW  08
03140:  MOVLB  8
03142:  MOVWF  x49
03144:  MOVLW  39
03146:  MOVWF  x48
03148:  MOVLW  04
0314A:  MOVWF  x4A
0314C:  MOVFF  835,84C
03150:  MOVFF  834,84B
03154:  MOVFF  837,84E
03158:  MOVFF  836,84D
0315C:  MOVLB  0
0315E:  CALL   2E06
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03162:  MOVLW  02
03164:  MOVWF  00
03166:  DECFSZ 00,F
03168:  BRA    3166
0316A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0316C:  MOVFF  82E,84A
03170:  MOVLW  01
03172:  MOVLB  8
03174:  MOVWF  x4B
03176:  MOVLW  0F
03178:  MOVWF  x4D
0317A:  MOVLW  89
0317C:  MOVWF  x4C
0317E:  MOVLB  0
03180:  CALL   1BB6
03184:  MOVFF  82E,84A
03188:  MOVLB  8
0318A:  CLRF   x4B
0318C:  MOVLW  0F
0318E:  MOVWF  x4D
03190:  MOVLW  92
03192:  MOVWF  x4C
03194:  MOVLB  0
03196:  CALL   1BB6
....................    }
0319A:  GOTO   3330
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0319E:  MOVLB  8
031A0:  DECFSZ x2D,W
031A2:  BRA    31A8
031A4:  BRA    31AE
031A6:  MOVLB  0
031A8:  MOVLB  0
031AA:  GOTO   3330
031AE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
031B0:  MOVLW  06
031B2:  MOVLB  8
031B4:  MOVWF  x3D
031B6:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
031B8:  MOVLW  12
031BA:  MOVLB  8
031BC:  MOVWF  x3E
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
031BE:  MOVFF  833,845
031C2:  CLRF   x46
031C4:  CLRF   x47
031C6:  CLRF   x48
031C8:  MOVF   x45,W
031CA:  MOVWF  00
031CC:  CLRF   01
031CE:  CLRF   02
031D0:  CLRF   03
031D2:  MOVFF  00,83F
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
031D6:  MOVFF  832,845
031DA:  MOVFF  833,846
031DE:  CLRF   x47
031E0:  CLRF   x48
031E2:  MOVF   x45,W
031E4:  MOVWF  00
031E6:  CLRF   01
031E8:  CLRF   02
031EA:  CLRF   03
031EC:  MOVFF  00,840
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
031F0:  MOVFF  831,845
031F4:  MOVFF  832,846
031F8:  MOVFF  833,847
031FC:  CLRF   x48
031FE:  MOVF   x45,W
03200:  MOVWF  00
03202:  CLRF   01
03204:  CLRF   02
03206:  CLRF   03
03208:  MOVFF  00,841
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
0320C:  MOVF   x30,W
0320E:  MOVWF  00
03210:  CLRF   01
03212:  CLRF   02
03214:  CLRF   03
03216:  MOVFF  00,842
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0321A:  MOVFF  82E,84A
0321E:  CLRF   x4B
03220:  MOVLW  0F
03222:  MOVWF  x4D
03224:  MOVLW  89
03226:  MOVWF  x4C
03228:  MOVLB  0
0322A:  CALL   1BB6
0322E:  MOVFF  82E,84A
03232:  MOVLB  8
03234:  CLRF   x4B
03236:  MOVLW  0F
03238:  MOVWF  x4D
0323A:  MOVLW  92
0323C:  MOVWF  x4C
0323E:  MOVLB  0
03240:  CALL   1BB6
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03244:  MOVFF  82F,847
03248:  MOVFF  82E,846
0324C:  MOVFF  82D,845
03250:  MOVFF  82C,844
03254:  MOVLW  08
03256:  MOVLB  8
03258:  MOVWF  x49
0325A:  MOVLW  3D
0325C:  MOVWF  x48
0325E:  CLRF   x4B
03260:  MOVLW  01
03262:  MOVWF  x4A
03264:  MOVLB  0
03266:  CALL   2D16
....................       output_high(flash_stream.cs_pin);
0326A:  MOVFF  82E,84A
0326E:  MOVLW  01
03270:  MOVLB  8
03272:  MOVWF  x4B
03274:  MOVLW  0F
03276:  MOVWF  x4D
03278:  MOVLW  89
0327A:  MOVWF  x4C
0327C:  MOVLB  0
0327E:  CALL   1BB6
03282:  MOVFF  82E,84A
03286:  MOVLB  8
03288:  CLRF   x4B
0328A:  MOVLW  0F
0328C:  MOVWF  x4D
0328E:  MOVLW  92
03290:  MOVWF  x4C
03292:  MOVLB  0
03294:  CALL   1BB6
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03298:  MOVFF  82E,84A
0329C:  MOVLB  8
0329E:  CLRF   x4B
032A0:  MOVLW  0F
032A2:  MOVWF  x4D
032A4:  MOVLW  89
032A6:  MOVWF  x4C
032A8:  MOVLB  0
032AA:  CALL   1BB6
032AE:  MOVFF  82E,84A
032B2:  MOVLB  8
032B4:  CLRF   x4B
032B6:  MOVLW  0F
032B8:  MOVWF  x4D
032BA:  MOVLW  92
032BC:  MOVWF  x4C
032BE:  MOVLB  0
032C0:  CALL   1BB6
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
032C4:  MOVFF  82F,847
032C8:  MOVFF  82E,846
032CC:  MOVFF  82D,845
032D0:  MOVFF  82C,844
032D4:  MOVLW  08
032D6:  MOVLB  8
032D8:  MOVWF  x49
032DA:  MOVLW  3E
032DC:  MOVWF  x48
032DE:  MOVLW  05
032E0:  MOVWF  x4A
032E2:  MOVFF  835,84C
032E6:  MOVFF  834,84B
032EA:  MOVFF  837,84E
032EE:  MOVFF  836,84D
032F2:  MOVLB  0
032F4:  CALL   2E06
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
032F8:  MOVLW  02
032FA:  MOVWF  00
032FC:  DECFSZ 00,F
032FE:  BRA    32FC
03300:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03302:  MOVFF  82E,84A
03306:  MOVLW  01
03308:  MOVLB  8
0330A:  MOVWF  x4B
0330C:  MOVLW  0F
0330E:  MOVWF  x4D
03310:  MOVLW  89
03312:  MOVWF  x4C
03314:  MOVLB  0
03316:  CALL   1BB6
0331A:  MOVFF  82E,84A
0331E:  MOVLB  8
03320:  CLRF   x4B
03322:  MOVLW  0F
03324:  MOVWF  x4D
03326:  MOVLW  92
03328:  MOVWF  x4C
0332A:  MOVLB  0
0332C:  CALL   1BB6
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03330:  MOVLB  8
03332:  CLRF   x43
03334:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03336:  MOVFF  82F,847
0333A:  MOVFF  82E,846
0333E:  MOVFF  82D,845
03342:  MOVFF  82C,844
03346:  CALL   2F82
0334A:  MOVF   01,W
0334C:  ANDLW  01
0334E:  SUBLW  01
03350:  BTFSS  FD8.2
03352:  GOTO   33A4
....................       if(timeout_counter > 10)
03356:  MOVLB  8
03358:  MOVF   x43,W
0335A:  SUBLW  0A
0335C:  BTFSS  FD8.0
0335E:  BRA    3366
03360:  MOVLB  0
03362:  GOTO   3378
03366:  MOVLB  0
....................          delay_ms(200);
03368:  MOVLW  C8
0336A:  MOVLB  8
0336C:  MOVWF  x44
0336E:  MOVLB  0
03370:  CALL   17E8
03374:  GOTO   3384
....................       else
....................          delay_ms(10);   
03378:  MOVLW  0A
0337A:  MOVLB  8
0337C:  MOVWF  x44
0337E:  MOVLB  0
03380:  CALL   17E8
....................       
....................       if(timeout_counter > 100){
03384:  MOVLB  8
03386:  MOVF   x43,W
03388:  SUBLW  64
0338A:  BTFSS  FD8.0
0338C:  BRA    3394
0338E:  MOVLB  0
03390:  GOTO   339A
03394:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03396:  GOTO   33A4
....................       }  
....................       timeout_counter++;
0339A:  MOVLB  8
0339C:  INCF   x43,F
0339E:  MOVLB  0
033A0:  GOTO   3336
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
033A4:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
01F36:  MOVLW  9F
01F38:  MOVLB  8
01F3A:  MOVWF  x44
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
01F3C:  MOVFF  82E,84A
01F40:  CLRF   x4B
01F42:  MOVLW  0F
01F44:  MOVWF  x4D
01F46:  MOVLW  89
01F48:  MOVWF  x4C
01F4A:  MOVLB  0
01F4C:  CALL   1BB6
01F50:  MOVFF  82E,84A
01F54:  MOVLB  8
01F56:  CLRF   x4B
01F58:  MOVLW  0F
01F5A:  MOVWF  x4D
01F5C:  MOVLW  92
01F5E:  MOVWF  x4C
01F60:  MOVLB  0
01F62:  CALL   1BB6
....................    delay_us(10);  
01F66:  MOVLW  0D
01F68:  MOVWF  00
01F6A:  DECFSZ 00,F
01F6C:  BRA    1F6A
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
01F6E:  MOVFF  82F,84D
01F72:  MOVFF  82E,84C
01F76:  MOVFF  82D,84B
01F7A:  MOVFF  82C,84A
01F7E:  MOVLW  08
01F80:  MOVLB  8
01F82:  MOVWF  x4F
01F84:  MOVLW  44
01F86:  MOVWF  x4E
01F88:  CLRF   x51
01F8A:  MOVLW  01
01F8C:  MOVWF  x50
01F8E:  MOVLW  08
01F90:  MOVWF  x53
01F92:  MOVLW  30
01F94:  MOVWF  x52
01F96:  CLRF   x57
01F98:  CLRF   x56
01F9A:  CLRF   x55
01F9C:  MOVLW  14
01F9E:  MOVWF  x54
01FA0:  MOVLB  0
01FA2:  CALL   1D02
....................    output_high(flash_stream.cs_pin);
01FA6:  MOVFF  82E,84A
01FAA:  MOVLW  01
01FAC:  MOVLB  8
01FAE:  MOVWF  x4B
01FB0:  MOVLW  0F
01FB2:  MOVWF  x4D
01FB4:  MOVLW  89
01FB6:  MOVWF  x4C
01FB8:  MOVLB  0
01FBA:  CALL   1BB6
01FBE:  MOVFF  82E,84A
01FC2:  MOVLB  8
01FC4:  CLRF   x4B
01FC6:  MOVLW  0F
01FC8:  MOVWF  x4D
01FCA:  MOVLW  92
01FCC:  MOVWF  x4C
01FCE:  MOVLB  0
01FD0:  CALL   1BB6
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
01FD4:  MOVLB  8
01FD6:  MOVF   x30,W
01FD8:  SUBLW  20
01FDA:  BTFSC  FD8.2
01FDC:  BRA    1FE4
01FDE:  MOVLB  0
01FE0:  GOTO   1FF2
01FE4:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
01FE6:  MOVLW  01
01FE8:  MOVWF  01
01FEA:  GOTO   1FFA
....................    }
01FEE:  GOTO   1FFA
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
01FF2:  MOVLW  00
01FF4:  MOVWF  01
01FF6:  GOTO   1FFA
....................    }
01FFA:  RETURN 0
.................... }
.................... 
.................... #include "../../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03CC0:  MOVLB  7
03CC2:  MOVF   xEC,W
03CC4:  MOVWF  FE9
03CC6:  MOVF   xED,W
03CC8:  MOVWF  FEA
03CCA:  MOVFF  FEF,7EF
03CCE:  MOVLW  01
03CD0:  MOVWF  xF0
03CD2:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03CD4:  MOVLB  7
03CD6:  MOVF   xEE,W
03CD8:  SUBWF  xF0,W
03CDA:  BTFSS  FD8.0
03CDC:  BRA    3CE4
03CDE:  MOVLB  0
03CE0:  GOTO   3D00
03CE4:  MOVLB  0
....................       crc ^= frame[i++];
03CE6:  MOVLB  7
03CE8:  MOVF   xF0,W
03CEA:  INCF   xF0,F
03CEC:  ADDWF  xEC,W
03CEE:  MOVWF  FE9
03CF0:  MOVLW  00
03CF2:  ADDWFC xED,W
03CF4:  MOVWF  FEA
03CF6:  MOVF   FEF,W
03CF8:  XORWF  xEF,F
03CFA:  MOVLB  0
03CFC:  GOTO   3CD4
....................    return crc;
03D00:  MOVLB  7
03D02:  MOVF   xEF,W
03D04:  MOVWF  01
03D06:  MOVLB  0
03D08:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #include "../../lib/tool/smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
07DF0:  MOVLW  96
07DF2:  MOVWF  FF6
07DF4:  MOVLW  02
07DF6:  MOVWF  FF7
07DF8:  MOVLW  00
07DFA:  MOVWF  FF8
07DFC:  CALL   1868
....................     fprintf(PC, "___Start copy_data__\r\n");
07E00:  MOVLW  B0
07E02:  MOVWF  FF6
07E04:  MOVLW  02
07E06:  MOVWF  FF7
07E08:  MOVLW  00
07E0A:  MOVWF  FF8
07E0C:  CALL   1868
....................     
....................     int8 buffer[MAX_READ_SIZE];
....................     
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
07E10:  MOVLB  3
07E12:  CLRF   xC6
07E14:  MOVLB  0
07E16:  CALL   7218
07E1A:  MOVF   01,F
07E1C:  BTFSS  FD8.2
07E1E:  GOTO   8B5C
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
07E22:  MOVLW  C8
07E24:  MOVWF  FF6
07E26:  MOVLW  02
07E28:  MOVWF  FF7
07E2A:  MOVLW  00
07E2C:  MOVWF  FF8
07E2E:  MOVLW  07
07E30:  MOVLB  7
07E32:  MOVWF  xEC
07E34:  MOVLB  0
07E36:  CALL   1898
07E3A:  MOVFF  3C6,419
07E3E:  MOVLW  18
07E40:  MOVLB  4
07E42:  MOVWF  x1A
07E44:  MOVLB  0
07E46:  CALL   7306
07E4A:  MOVLW  D1
07E4C:  MOVWF  FF6
07E4E:  MOVLW  02
07E50:  MOVWF  FF7
07E52:  MOVLW  00
07E54:  MOVWF  FF8
07E56:  MOVLW  12
07E58:  MOVLB  7
07E5A:  MOVWF  xEC
07E5C:  MOVLB  0
07E5E:  CALL   1898
....................         
....................         // value initialize
....................         SmfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
07E62:  GOTO   7416
07E66:  MOVFF  02,3C8
07E6A:  MOVFF  01,3C7
07E6E:  MOVLB  3
07E70:  MOVF   xC7,W
07E72:  MOVWF  01
07E74:  MOVF   xC8,W
07E76:  MOVWF  03
07E78:  MOVF   01,W
07E7A:  MOVWF  FE9
07E7C:  MOVFF  03,FEA
*
07E86:  MOVLB  4
07E88:  MOVWF  x15
07E8A:  MOVFF  415,41C
07E8E:  MOVLB  0
07E90:  GOTO   7470
07E94:  MOVFF  02,03
07E98:  MOVF   01,W
07E9A:  MOVWF  FE1
07E9C:  MOVFF  03,FE2
07EA0:  MOVLW  03
07EA2:  MOVWF  FEA
07EA4:  MOVLW  C9
07EA6:  MOVWF  FE9
07EA8:  MOVLW  09
07EAA:  MOVWF  01
07EAC:  MOVFF  FE6,FEE
07EB0:  DECFSZ 01,F
07EB2:  GOTO   7EAC
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
07EB6:  MOVLW  01
07EB8:  MOVLB  3
07EBA:  ADDWF  xC6,W
07EBC:  CLRF   03
07EBE:  ADDLW  48
07EC0:  MOVWF  FE9
07EC2:  MOVLW  00
07EC4:  ADDWFC 03,W
07EC6:  MOVWF  FEA
07EC8:  MOVFF  3D1,FEF
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
07ECC:  MOVFF  3CC,3D5
07ED0:  MOVFF  3CB,3D4
07ED4:  MOVFF  3CA,3D3
07ED8:  MOVFF  3C9,3D2
07EDC:  MOVFF  3D0,3D9
07EE0:  MOVFF  3CF,3D8
07EE4:  MOVFF  3CE,3D7
07EE8:  MOVFF  3CD,3D6
07EEC:  MOVLW  01
07EEE:  ADDWF  xC7,W
07EF0:  MOVWF  FE9
07EF2:  MOVLW  00
07EF4:  ADDWFC xC8,W
07EF6:  MOVWF  FEA
07EF8:  MOVFF  FEF,3DA
07EFC:  MOVFF  FEC,3DB
07F00:  MOVFF  FEC,3DC
07F04:  MOVFF  FEC,3DD
07F08:  MOVF   FED,F
07F0A:  MOVF   FED,F
07F0C:  MOVF   FED,F
07F0E:  MOVLW  05
07F10:  ADDWF  xC7,W
07F12:  MOVWF  FE9
07F14:  MOVLW  00
07F16:  ADDWFC xC8,W
07F18:  MOVWF  FEA
07F1A:  MOVFF  FEF,3DE
07F1E:  MOVFF  FEC,3DF
07F22:  MOVFF  FEC,3E0
07F26:  MOVFF  FEC,3E1
07F2A:  MOVF   FED,F
07F2C:  MOVF   FED,F
07F2E:  MOVF   FED,F
....................         fprintf(PC, "In SMF mission data start   address: %LX\r\n", mis_start_address);
07F30:  MOVLW  E4
07F32:  MOVWF  FF6
07F34:  MOVLW  02
07F36:  MOVWF  FF7
07F38:  MOVLW  00
07F3A:  MOVWF  FF8
07F3C:  MOVLW  25
07F3E:  MOVLB  7
07F40:  MOVWF  xEC
07F42:  MOVLB  0
07F44:  CALL   1898
07F48:  MOVFF  3D5,427
07F4C:  MOVLW  37
07F4E:  MOVLB  4
07F50:  MOVWF  x28
07F52:  MOVLB  0
07F54:  CALL   1A5A
07F58:  MOVFF  3D4,427
07F5C:  MOVLW  37
07F5E:  MOVLB  4
07F60:  MOVWF  x28
07F62:  MOVLB  0
07F64:  CALL   1A5A
07F68:  MOVFF  3D3,427
07F6C:  MOVLW  37
07F6E:  MOVLB  4
07F70:  MOVWF  x28
07F72:  MOVLB  0
07F74:  CALL   1A5A
07F78:  MOVFF  3D2,427
07F7C:  MOVLW  37
07F7E:  MOVLB  4
07F80:  MOVWF  x28
07F82:  MOVLB  0
07F84:  CALL   1A5A
07F88:  MOVLW  0D
07F8A:  MOVLB  8
07F8C:  MOVWF  x2F
07F8E:  MOVLB  0
07F90:  CALL   1816
07F94:  MOVLW  0A
07F96:  MOVLB  8
07F98:  MOVWF  x2F
07F9A:  MOVLB  0
07F9C:  CALL   1816
....................         fprintf(PC, "In SMF mission data end     address: %LX\r\n", mis_end_address);
07FA0:  MOVLW  10
07FA2:  MOVWF  FF6
07FA4:  MOVLW  03
07FA6:  MOVWF  FF7
07FA8:  MOVLW  00
07FAA:  MOVWF  FF8
07FAC:  MOVLW  25
07FAE:  MOVLB  7
07FB0:  MOVWF  xEC
07FB2:  MOVLB  0
07FB4:  CALL   1898
07FB8:  MOVFF  3D9,427
07FBC:  MOVLW  37
07FBE:  MOVLB  4
07FC0:  MOVWF  x28
07FC2:  MOVLB  0
07FC4:  CALL   1A5A
07FC8:  MOVFF  3D8,427
07FCC:  MOVLW  37
07FCE:  MOVLB  4
07FD0:  MOVWF  x28
07FD2:  MOVLB  0
07FD4:  CALL   1A5A
07FD8:  MOVFF  3D7,427
07FDC:  MOVLW  37
07FDE:  MOVLB  4
07FE0:  MOVWF  x28
07FE2:  MOVLB  0
07FE4:  CALL   1A5A
07FE8:  MOVFF  3D6,427
07FEC:  MOVLW  37
07FEE:  MOVLB  4
07FF0:  MOVWF  x28
07FF2:  MOVLB  0
07FF4:  CALL   1A5A
07FF8:  MOVLW  0D
07FFA:  MOVLB  8
07FFC:  MOVWF  x2F
07FFE:  MOVLB  0
08000:  CALL   1816
08004:  MOVLW  0A
08006:  MOVLB  8
08008:  MOVWF  x2F
0800A:  MOVLB  0
0800C:  CALL   1816
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
08010:  MOVLW  3C
08012:  MOVWF  FF6
08014:  MOVLW  03
08016:  MOVWF  FF7
08018:  MOVLW  00
0801A:  MOVWF  FF8
0801C:  MOVLW  25
0801E:  MOVLB  7
08020:  MOVWF  xEC
08022:  MOVLB  0
08024:  CALL   1898
08028:  MOVFF  3DD,427
0802C:  MOVLW  37
0802E:  MOVLB  4
08030:  MOVWF  x28
08032:  MOVLB  0
08034:  CALL   1A5A
08038:  MOVFF  3DC,427
0803C:  MOVLW  37
0803E:  MOVLB  4
08040:  MOVWF  x28
08042:  MOVLB  0
08044:  CALL   1A5A
08048:  MOVFF  3DB,427
0804C:  MOVLW  37
0804E:  MOVLB  4
08050:  MOVWF  x28
08052:  MOVLB  0
08054:  CALL   1A5A
08058:  MOVFF  3DA,427
0805C:  MOVLW  37
0805E:  MOVLB  4
08060:  MOVWF  x28
08062:  MOVLB  0
08064:  CALL   1A5A
08068:  MOVLW  0D
0806A:  MOVLB  8
0806C:  MOVWF  x2F
0806E:  MOVLB  0
08070:  CALL   1816
08074:  MOVLW  0A
08076:  MOVLB  8
08078:  MOVWF  x2F
0807A:  MOVLB  0
0807C:  CALL   1816
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
08080:  MOVLW  68
08082:  MOVWF  FF6
08084:  MOVLW  03
08086:  MOVWF  FF7
08088:  MOVLW  00
0808A:  MOVWF  FF8
0808C:  MOVLW  25
0808E:  MOVLB  7
08090:  MOVWF  xEC
08092:  MOVLB  0
08094:  CALL   1898
08098:  MOVLW  41
0809A:  MOVWF  FE9
0809C:  MOVFF  3E1,418
080A0:  MOVFF  3E0,417
080A4:  MOVFF  3DF,416
080A8:  MOVFF  3DE,415
080AC:  CALL   75E8
080B0:  MOVLW  90
080B2:  MOVWF  FF6
080B4:  MOVLW  03
080B6:  MOVWF  FF7
080B8:  MOVLW  00
080BA:  MOVWF  FF8
080BC:  MOVLW  04
080BE:  MOVLB  7
080C0:  MOVWF  xEC
080C2:  MOVLB  0
080C4:  CALL   1898
080C8:  MOVFF  3E1,427
080CC:  MOVLW  57
080CE:  MOVLB  4
080D0:  MOVWF  x28
080D2:  MOVLB  0
080D4:  CALL   1A5A
080D8:  MOVFF  3E0,427
080DC:  MOVLW  57
080DE:  MOVLB  4
080E0:  MOVWF  x28
080E2:  MOVLB  0
080E4:  CALL   1A5A
080E8:  MOVFF  3DF,427
080EC:  MOVLW  57
080EE:  MOVLB  4
080F0:  MOVWF  x28
080F2:  MOVLB  0
080F4:  CALL   1A5A
080F8:  MOVFF  3DE,427
080FC:  MOVLW  57
080FE:  MOVLB  4
08100:  MOVWF  x28
08102:  MOVLB  0
08104:  CALL   1A5A
08108:  MOVLW  97
0810A:  MOVWF  FF6
0810C:  MOVLW  03
0810E:  MOVWF  FF7
08110:  MOVLW  00
08112:  MOVWF  FF8
08114:  MOVLW  05
08116:  MOVLB  7
08118:  MOVWF  xEC
0811A:  MOVLB  0
0811C:  CALL   1898
.................... 
....................         if (!is_connect(mis_fm))
08120:  MOVFF  E1,82F
08124:  MOVFF  E0,82E
08128:  MOVFF  DF,82D
0812C:  MOVFF  DE,82C
08130:  CALL   1F36
08134:  MOVF   01,F
08136:  BTFSS  FD8.2
08138:  GOTO   814C
....................         {
....................             fprintf(PC, "Error: MIS FM is not connected\r\n");
0813C:  MOVLW  9E
0813E:  MOVWF  FF6
08140:  MOVLW  03
08142:  MOVWF  FF7
08144:  MOVLW  00
08146:  MOVWF  FF8
08148:  CALL   1868
....................         }    
.................... 
.................... 
....................         if (!is_connect(smf))
0814C:  MOVFF  E5,82F
08150:  MOVFF  E4,82E
08154:  MOVFF  E3,82D
08158:  MOVFF  E2,82C
0815C:  CALL   1F36
08160:  MOVF   01,F
08162:  BTFSS  FD8.2
08164:  GOTO   8178
....................         {
....................           fprintf(PC, "Error: SMF is not connected\r\n");
08168:  MOVLW  C0
0816A:  MOVWF  FF6
0816C:  MOVLW  03
0816E:  MOVWF  FF7
08170:  MOVLW  00
08172:  MOVWF  FF8
08174:  CALL   1868
....................         }    
.................... 
....................         while (!is_connect(smf))
08178:  MOVFF  E5,82F
0817C:  MOVFF  E4,82E
08180:  MOVFF  E3,82D
08184:  MOVFF  E2,82C
08188:  CALL   1F36
0818C:  MOVF   01,F
0818E:  BTFSS  FD8.2
08190:  GOTO   81B4
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
08194:  MOVLW  DE
08196:  MOVWF  FF6
08198:  MOVLW  03
0819A:  MOVWF  FF7
0819C:  MOVLW  00
0819E:  MOVWF  FF8
081A0:  CALL   1868
....................             delay_ms(100);
081A4:  MOVLW  64
081A6:  MOVLB  8
081A8:  MOVWF  x44
081AA:  MOVLB  0
081AC:  CALL   17E8
081B0:  GOTO   8178
....................         }
.................... 
.................... 
....................         // read size area
....................         unsigned int8 used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
081B4:  MOVFF  E5,429
081B8:  MOVFF  E4,428
081BC:  MOVFF  E3,427
081C0:  MOVFF  E2,426
081C4:  MOVFF  3D5,42D
081C8:  MOVFF  3D4,42C
081CC:  MOVFF  3D3,42B
081D0:  MOVFF  3D2,42A
081D4:  MOVLW  03
081D6:  MOVLB  4
081D8:  MOVWF  x2F
081DA:  MOVLW  E2
081DC:  MOVWF  x2E
081DE:  CLRF   x33
081E0:  CLRF   x32
081E2:  CLRF   x31
081E4:  MOVLW  04
081E6:  MOVWF  x30
081E8:  MOVLB  0
081EA:  CALL   1FFC
....................         unsigned int32 used_size = 
....................             ((unsigned int32)used_size_bytes[3] << 24) |
....................             ((unsigned int32)used_size_bytes[2] << 16) |
....................             ((unsigned int32)used_size_bytes[1] << 8)  |
....................             ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
081EE:  MOVLB  4
081F0:  CLRF   x18
081F2:  CLRF   x17
081F4:  CLRF   x16
081F6:  MOVFF  3E5,415
081FA:  MOVFF  415,418
081FE:  CLRF   x15
08200:  CLRF   x16
08202:  CLRF   x17
08204:  CLRF   x1D
08206:  CLRF   x1C
08208:  CLRF   x1B
0820A:  MOVFF  3E4,41A
0820E:  MOVFF  41B,03
08212:  MOVFF  41A,02
08216:  CLRF   00
08218:  CLRF   01
0821A:  MOVF   00,W
0821C:  IORWF  x15,F
0821E:  MOVF   01,W
08220:  IORWF  x16,F
08222:  MOVF   02,W
08224:  IORWF  x17,F
08226:  MOVF   03,W
08228:  IORWF  x18,F
0822A:  CLRF   x1D
0822C:  CLRF   x1C
0822E:  CLRF   x1B
08230:  MOVFF  3E3,41A
08234:  MOVFF  41C,03
08238:  MOVFF  41B,02
0823C:  MOVFF  41A,01
08240:  CLRF   00
08242:  MOVF   00,W
08244:  IORWF  x15,F
08246:  MOVF   01,W
08248:  IORWF  x16,F
0824A:  MOVF   02,W
0824C:  IORWF  x17,F
0824E:  MOVF   03,W
08250:  IORWF  x18,F
08252:  MOVFF  3E2,00
08256:  CLRF   01
08258:  CLRF   02
0825A:  CLRF   03
0825C:  MOVF   00,W
0825E:  IORWF  x15,W
08260:  MOVLB  3
08262:  MOVWF  xE6
08264:  MOVF   01,W
08266:  MOVLB  4
08268:  IORWF  x16,W
0826A:  MOVLB  3
0826C:  MOVWF  xE7
0826E:  MOVF   02,W
08270:  MOVLB  4
08272:  IORWF  x17,W
08274:  MOVLB  3
08276:  MOVWF  xE8
08278:  MOVF   03,W
0827A:  MOVLB  4
0827C:  IORWF  x18,W
0827E:  MOVLB  3
08280:  MOVWF  xE9
08282:  MOVLW  04
08284:  ADDWF  xD2,W
08286:  MOVLB  4
08288:  MOVWF  x15
0828A:  MOVLW  00
0828C:  MOVLB  3
0828E:  ADDWFC xD3,W
08290:  MOVLB  4
08292:  MOVWF  x16
08294:  MOVLW  00
08296:  MOVLB  3
08298:  ADDWFC xD4,W
0829A:  MOVLB  4
0829C:  MOVWF  x17
0829E:  MOVLW  00
082A0:  MOVLB  3
082A2:  ADDWFC xD5,W
082A4:  MOVLB  4
082A6:  MOVWF  x18
082A8:  MOVFF  E5,423
082AC:  MOVFF  E4,422
082B0:  MOVFF  E3,421
082B4:  MOVFF  E2,420
082B8:  MOVFF  418,427
082BC:  MOVFF  417,426
082C0:  MOVFF  416,425
082C4:  MOVFF  415,424
082C8:  MOVLB  0
082CA:  GOTO   76E8
082CE:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
082D2:  MOVLW  FC
082D4:  MOVWF  FF6
082D6:  MOVLW  03
082D8:  MOVWF  FF7
082DA:  MOVLW  00
082DC:  MOVWF  FF8
082DE:  CALL   1868
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
082E2:  MOVLW  0E
082E4:  MOVWF  FF6
082E6:  MOVLW  04
082E8:  MOVWF  FF7
082EA:  MOVLW  00
082EC:  MOVWF  FF8
082EE:  MOVLW  0C
082F0:  MOVLB  7
082F2:  MOVWF  xEC
082F4:  MOVLB  0
082F6:  CALL   1898
082FA:  MOVLW  41
082FC:  MOVWF  FE9
082FE:  MOVFF  3E9,418
08302:  MOVFF  3E8,417
08306:  MOVFF  3E7,416
0830A:  MOVFF  3E6,415
0830E:  CALL   75E8
08312:  MOVLW  1D
08314:  MOVWF  FF6
08316:  MOVLW  04
08318:  MOVWF  FF7
0831A:  MOVLW  00
0831C:  MOVWF  FF8
0831E:  MOVLW  08
08320:  MOVLB  7
08322:  MOVWF  xEC
08324:  MOVLB  0
08326:  CALL   1898
0832A:  MOVFF  3D5,427
0832E:  MOVLW  37
08330:  MOVLB  4
08332:  MOVWF  x28
08334:  MOVLB  0
08336:  CALL   1A5A
0833A:  MOVFF  3D4,427
0833E:  MOVLW  37
08340:  MOVLB  4
08342:  MOVWF  x28
08344:  MOVLB  0
08346:  CALL   1A5A
0834A:  MOVFF  3D3,427
0834E:  MOVLW  37
08350:  MOVLB  4
08352:  MOVWF  x28
08354:  MOVLB  0
08356:  CALL   1A5A
0835A:  MOVFF  3D2,427
0835E:  MOVLW  37
08360:  MOVLB  4
08362:  MOVWF  x28
08364:  MOVLB  0
08366:  CALL   1A5A
0836A:  MOVLW  2A
0836C:  MOVWF  FF6
0836E:  MOVLW  04
08370:  MOVWF  FF7
08372:  MOVLW  00
08374:  MOVWF  FF8
08376:  MOVLW  03
08378:  MOVLB  7
0837A:  MOVWF  xEC
0837C:  MOVLB  0
0837E:  CALL   1898
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
08382:  MOVLW  04
08384:  MOVLB  3
08386:  ADDWF  xD2,W
08388:  MOVLB  4
0838A:  MOVWF  x15
0838C:  MOVLW  00
0838E:  MOVLB  3
08390:  ADDWFC xD3,W
08392:  MOVLB  4
08394:  MOVWF  x16
08396:  MOVLW  00
08398:  MOVLB  3
0839A:  ADDWFC xD4,W
0839C:  MOVLB  4
0839E:  MOVWF  x17
083A0:  MOVLW  00
083A2:  MOVLB  3
083A4:  ADDWFC xD5,W
083A6:  MOVLB  4
083A8:  MOVWF  x18
083AA:  MOVLW  2E
083AC:  MOVWF  FF6
083AE:  MOVLW  04
083B0:  MOVWF  FF7
083B2:  MOVLW  00
083B4:  MOVWF  FF8
083B6:  MOVLW  0C
083B8:  MOVLB  7
083BA:  MOVWF  xEC
083BC:  MOVLB  0
083BE:  CALL   1898
083C2:  MOVFF  3EA,419
083C6:  MOVLW  18
083C8:  MOVLB  4
083CA:  MOVWF  x1A
083CC:  MOVLB  0
083CE:  CALL   7306
083D2:  MOVLW  3C
083D4:  MOVWF  FF6
083D6:  MOVLW  04
083D8:  MOVWF  FF7
083DA:  MOVLW  00
083DC:  MOVWF  FF8
083DE:  MOVLW  09
083E0:  MOVLB  7
083E2:  MOVWF  xEC
083E4:  MOVLB  0
083E6:  CALL   1898
083EA:  MOVFF  418,427
083EE:  MOVLW  37
083F0:  MOVLB  4
083F2:  MOVWF  x28
083F4:  MOVLB  0
083F6:  CALL   1A5A
083FA:  MOVFF  417,427
083FE:  MOVLW  37
08400:  MOVLB  4
08402:  MOVWF  x28
08404:  MOVLB  0
08406:  CALL   1A5A
0840A:  MOVFF  416,427
0840E:  MOVLW  37
08410:  MOVLB  4
08412:  MOVWF  x28
08414:  MOVLB  0
08416:  CALL   1A5A
0841A:  MOVFF  415,427
0841E:  MOVLW  37
08420:  MOVLB  4
08422:  MOVWF  x28
08424:  MOVLB  0
08426:  CALL   1A5A
0842A:  MOVLW  4A
0842C:  MOVWF  FF6
0842E:  MOVLW  04
08430:  MOVWF  FF7
08432:  MOVLW  00
08434:  MOVWF  FF8
08436:  MOVLW  05
08438:  MOVLB  7
0843A:  MOVWF  xEC
0843C:  MOVLB  0
0843E:  CALL   1898
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
08442:  MOVLB  3
08444:  MOVF   xD2,W
08446:  MOVWF  xEB
08448:  MOVLW  10
0844A:  ADDWF  xD3,W
0844C:  MOVWF  xEC
0844E:  MOVLW  00
08450:  ADDWFC xD4,W
08452:  MOVWF  xED
08454:  MOVLW  00
08456:  ADDWFC xD5,W
08458:  MOVWF  xEE
0845A:  MOVFF  3D9,3F2
0845E:  MOVFF  3D8,3F1
08462:  MOVFF  3D7,3F0
08466:  MOVFF  3D6,3EF
0846A:  MOVF   xEB,W
0846C:  SUBWF  xEF,W
0846E:  MOVWF  xF3
08470:  MOVF   xEC,W
08472:  SUBWFB xF0,W
08474:  MOVWF  xF4
08476:  MOVF   xED,W
08478:  SUBWFB xF1,W
0847A:  MOVWF  xF5
0847C:  MOVF   xEE,W
0847E:  SUBWFB xF2,W
08480:  MOVWF  xF6
08482:  MOVF   xE6,W
08484:  ADDWF  xEB,W
08486:  MOVWF  xF7
08488:  MOVF   xE7,W
0848A:  ADDWFC xEC,W
0848C:  MOVWF  xF8
0848E:  MOVF   xE8,W
08490:  ADDWFC xED,W
08492:  MOVWF  xF9
08494:  MOVF   xE9,W
08496:  ADDWFC xEE,W
08498:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
0849A:  MOVF   xDE,W
0849C:  ADDWF  xE6,W
0849E:  MOVLB  4
084A0:  MOVWF  x15
084A2:  MOVLB  3
084A4:  MOVF   xDF,W
084A6:  ADDWFC xE7,W
084A8:  MOVLB  4
084AA:  MOVWF  x16
084AC:  MOVLB  3
084AE:  MOVF   xE0,W
084B0:  ADDWFC xE8,W
084B2:  MOVLB  4
084B4:  MOVWF  x17
084B6:  MOVLB  3
084B8:  MOVF   xE1,W
084BA:  ADDWFC xE9,W
084BC:  MOVLB  4
084BE:  MOVWF  x18
084C0:  MOVLB  3
084C2:  MOVF   xF6,W
084C4:  MOVLB  4
084C6:  SUBWF  x18,W
084C8:  BTFSC  FD8.0
084CA:  BRA    84D2
084CC:  MOVLB  0
084CE:  GOTO   85F2
084D2:  MOVLB  0
084D4:  BTFSS  FD8.2
084D6:  GOTO   8522
084DA:  MOVLB  3
084DC:  MOVF   xF5,W
084DE:  MOVLB  4
084E0:  SUBWF  x17,W
084E2:  BTFSC  FD8.0
084E4:  BRA    84EC
084E6:  MOVLB  0
084E8:  GOTO   85F2
084EC:  MOVLB  0
084EE:  BTFSS  FD8.2
084F0:  GOTO   8522
084F4:  MOVLB  3
084F6:  MOVF   xF4,W
084F8:  MOVLB  4
084FA:  SUBWF  x16,W
084FC:  BTFSC  FD8.0
084FE:  BRA    8506
08500:  MOVLB  0
08502:  GOTO   85F2
08506:  MOVLB  0
08508:  BTFSS  FD8.2
0850A:  GOTO   8522
0850E:  MOVLB  4
08510:  MOVF   x15,W
08512:  MOVLB  3
08514:  SUBWF  xF3,W
08516:  BTFSS  FD8.0
08518:  BRA    8520
0851A:  MOVLB  0
0851C:  GOTO   85F2
08520:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
08522:  MOVLW  50
08524:  MOVWF  FF6
08526:  MOVLW  04
08528:  MOVWF  FF7
0852A:  MOVLW  00
0852C:  MOVWF  FF8
0852E:  CALL   1868
....................             loop_count++;
08532:  MOVLB  3
08534:  INCF   xEA,F
....................             used_size = 0;
08536:  CLRF   xE9
08538:  CLRF   xE8
0853A:  CLRF   xE7
0853C:  CLRF   xE6
....................             data_write_addr = data_region_start;
0853E:  MOVFF  3EE,3FA
08542:  MOVFF  3ED,3F9
08546:  MOVFF  3EC,3F8
0854A:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
0854E:  MOVFF  3EE,3FE
08552:  MOVFF  3ED,3FD
08556:  MOVFF  3EC,3FC
0855A:  MOVFF  3EB,3FB
0855E:  MOVLB  0
....................             while (erase_ptr < data_region_end)
08560:  MOVLB  3
08562:  MOVF   xFE,W
08564:  SUBWF  xF2,W
08566:  BTFSC  FD8.0
08568:  BRA    8570
0856A:  MOVLB  0
0856C:  GOTO   85F2
08570:  MOVLB  0
08572:  BTFSS  FD8.2
08574:  GOTO   85BA
08578:  MOVLB  3
0857A:  MOVF   xFD,W
0857C:  SUBWF  xF1,W
0857E:  BTFSC  FD8.0
08580:  BRA    8588
08582:  MOVLB  0
08584:  GOTO   85F2
08588:  MOVLB  0
0858A:  BTFSS  FD8.2
0858C:  GOTO   85BA
08590:  MOVLB  3
08592:  MOVF   xFC,W
08594:  SUBWF  xF0,W
08596:  BTFSC  FD8.0
08598:  BRA    85A0
0859A:  MOVLB  0
0859C:  GOTO   85F2
085A0:  MOVLB  0
085A2:  BTFSS  FD8.2
085A4:  GOTO   85BA
085A8:  MOVLB  3
085AA:  MOVF   xEF,W
085AC:  SUBWF  xFB,W
085AE:  BTFSS  FD8.0
085B0:  BRA    85B8
085B2:  MOVLB  0
085B4:  GOTO   85F2
085B8:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
085BA:  MOVFF  E5,82F
085BE:  MOVFF  E4,82E
085C2:  MOVFF  E3,82D
085C6:  MOVFF  E2,82C
085CA:  MOVFF  3FE,833
085CE:  MOVFF  3FD,832
085D2:  MOVFF  3FC,831
085D6:  MOVFF  3FB,830
085DA:  CALL   33A6
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
085DE:  MOVLW  10
085E0:  MOVLB  3
085E2:  ADDWF  xFC,F
085E4:  MOVLW  00
085E6:  ADDWFC xFD,F
085E8:  MOVLW  00
085EA:  ADDWFC xFE,F
085EC:  MOVLB  0
085EE:  GOTO   8560
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
085F2:  MOVLB  3
085F4:  CLRF   xFF
085F6:  MOVF   xF8,W
085F8:  ANDLW  F0
085FA:  MOVLB  4
085FC:  MOVWF  x00
085FE:  CLRF   x01
08600:  CLRF   x02
08602:  MOVLB  3
08604:  MOVF   xDE,W
08606:  ADDWF  xF7,W
08608:  MOVLB  4
0860A:  MOVWF  x15
0860C:  MOVLB  3
0860E:  MOVF   xDF,W
08610:  ADDWFC xF8,W
08612:  MOVLB  4
08614:  MOVWF  x16
08616:  MOVLB  3
08618:  MOVF   xE0,W
0861A:  ADDWFC xF9,W
0861C:  MOVLB  4
0861E:  MOVWF  x17
08620:  MOVLB  3
08622:  MOVF   xE1,W
08624:  ADDWFC xFA,W
08626:  MOVLB  4
08628:  MOVWF  x18
0862A:  MOVLW  FF
0862C:  ADDWF  x15,F
0862E:  MOVLW  0F
08630:  ADDWFC x16,F
08632:  MOVLW  00
08634:  ADDWFC x17,F
08636:  MOVLW  00
08638:  ADDWFC x18,F
0863A:  CLRF   x03
0863C:  MOVF   x16,W
0863E:  ANDLW  F0
08640:  MOVWF  x04
08642:  CLRF   x05
08644:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
08646:  MOVFF  402,40A
0864A:  MOVFF  401,409
0864E:  MOVFF  400,408
08652:  MOVFF  3FF,407
08656:  MOVLB  0
08658:  MOVLB  4
0865A:  MOVF   x0A,W
0865C:  SUBWF  x06,W
0865E:  BTFSC  FD8.0
08660:  BRA    8668
08662:  MOVLB  0
08664:  GOTO   874C
08668:  MOVLB  0
0866A:  BTFSS  FD8.2
0866C:  GOTO   86B2
08670:  MOVLB  4
08672:  MOVF   x09,W
08674:  SUBWF  x05,W
08676:  BTFSC  FD8.0
08678:  BRA    8680
0867A:  MOVLB  0
0867C:  GOTO   874C
08680:  MOVLB  0
08682:  BTFSS  FD8.2
08684:  GOTO   86B2
08688:  MOVLB  4
0868A:  MOVF   x08,W
0868C:  SUBWF  x04,W
0868E:  BTFSC  FD8.0
08690:  BRA    8698
08692:  MOVLB  0
08694:  GOTO   874C
08698:  MOVLB  0
0869A:  BTFSS  FD8.2
0869C:  GOTO   86B2
086A0:  MOVLB  4
086A2:  MOVF   x03,W
086A4:  SUBWF  x07,W
086A6:  BTFSS  FD8.0
086A8:  BRA    86B0
086AA:  MOVLB  0
086AC:  GOTO   874C
086B0:  MOVLB  0
086B2:  MOVLB  4
086B4:  MOVF   x0A,W
086B6:  MOVLB  3
086B8:  SUBWF  xD9,W
086BA:  BTFSC  FD8.0
086BC:  BRA    86C4
086BE:  MOVLB  0
086C0:  GOTO   874C
086C4:  MOVLB  0
086C6:  BTFSS  FD8.2
086C8:  GOTO   8714
086CC:  MOVLB  4
086CE:  MOVF   x09,W
086D0:  MOVLB  3
086D2:  SUBWF  xD8,W
086D4:  BTFSC  FD8.0
086D6:  BRA    86DE
086D8:  MOVLB  0
086DA:  GOTO   874C
086DE:  MOVLB  0
086E0:  BTFSS  FD8.2
086E2:  GOTO   8714
086E6:  MOVLB  4
086E8:  MOVF   x08,W
086EA:  MOVLB  3
086EC:  SUBWF  xD7,W
086EE:  BTFSC  FD8.0
086F0:  BRA    86F8
086F2:  MOVLB  0
086F4:  GOTO   874C
086F8:  MOVLB  0
086FA:  BTFSS  FD8.2
086FC:  GOTO   8714
08700:  MOVLB  3
08702:  MOVF   xD6,W
08704:  MOVLB  4
08706:  SUBWF  x07,W
08708:  BTFSS  FD8.0
0870A:  BRA    8712
0870C:  MOVLB  0
0870E:  GOTO   874C
08712:  MOVLB  0
....................             subsector_4kByte_erase(smf, addr);
08714:  MOVFF  E5,82F
08718:  MOVFF  E4,82E
0871C:  MOVFF  E3,82D
08720:  MOVFF  E2,82C
08724:  MOVFF  40A,833
08728:  MOVFF  409,832
0872C:  MOVFF  408,831
08730:  MOVFF  407,830
08734:  CALL   33A6
08738:  MOVLW  10
0873A:  MOVLB  4
0873C:  ADDWF  x08,F
0873E:  MOVLW  00
08740:  ADDWFC x09,F
08742:  MOVLW  00
08744:  ADDWFC x0A,F
08746:  MOVLB  0
08748:  GOTO   8658
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
0874C:  MOVFF  3E1,40E
08750:  MOVFF  3E0,40D
08754:  MOVFF  3DF,40C
08758:  MOVFF  3DE,40B
0875C:  MOVFF  3DD,412
08760:  MOVFF  3DC,411
08764:  MOVFF  3DB,410
08768:  MOVFF  3DA,40F
....................         while (remaining > 0)
0876C:  MOVLB  4
0876E:  MOVF   x0B,F
08770:  BTFSC  FD8.2
08772:  BRA    877A
08774:  MOVLB  0
08776:  GOTO   87AC
0877A:  MOVLB  0
0877C:  MOVLB  4
0877E:  MOVF   x0C,F
08780:  BTFSC  FD8.2
08782:  BRA    878A
08784:  MOVLB  0
08786:  GOTO   87AC
0878A:  MOVLB  0
0878C:  MOVLB  4
0878E:  MOVF   x0D,F
08790:  BTFSC  FD8.2
08792:  BRA    879A
08794:  MOVLB  0
08796:  GOTO   87AC
0879A:  MOVLB  0
0879C:  MOVLB  4
0879E:  MOVF   x0E,F
087A0:  BTFSS  FD8.2
087A2:  BRA    87AA
087A4:  MOVLB  0
087A6:  GOTO   88D6
087AA:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
087AC:  MOVLB  4
087AE:  MOVF   x0E,F
087B0:  BTFSC  FD8.2
087B2:  BRA    87BA
087B4:  MOVLB  0
087B6:  GOTO   87EE
087BA:  MOVLB  0
087BC:  MOVLB  4
087BE:  MOVF   x0D,F
087C0:  BTFSC  FD8.2
087C2:  BRA    87CA
087C4:  MOVLB  0
087C6:  GOTO   87EE
087CA:  MOVLB  0
087CC:  MOVLB  4
087CE:  MOVF   x0C,F
087D0:  BTFSC  FD8.2
087D2:  BRA    87DA
087D4:  MOVLB  0
087D6:  GOTO   87EE
087DA:  MOVLB  0
087DC:  MOVLB  4
087DE:  MOVF   x0B,W
087E0:  SUBLW  40
087E2:  BTFSS  FD8.0
087E4:  BRA    87EC
087E6:  MOVLB  0
087E8:  GOTO   87F6
087EC:  MOVLB  0
087EE:  CLRF   03
087F0:  MOVLW  40
087F2:  GOTO   8800
087F6:  MOVFF  40C,03
087FA:  MOVLB  4
087FC:  MOVF   x0B,W
087FE:  MOVLB  0
08800:  MOVLB  4
08802:  MOVWF  x13
08804:  MOVFF  03,414
08808:  MOVLB  0
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
0880A:  MOVFF  E1,429
0880E:  MOVFF  E0,428
08812:  MOVFF  DF,427
08816:  MOVFF  DE,426
0881A:  MOVFF  412,42D
0881E:  MOVFF  411,42C
08822:  MOVFF  410,42B
08826:  MOVFF  40F,42A
0882A:  MOVLW  03
0882C:  MOVLB  4
0882E:  MOVWF  x2F
08830:  MOVLW  86
08832:  MOVWF  x2E
08834:  CLRF   x33
08836:  CLRF   x32
08838:  MOVFF  414,431
0883C:  MOVFF  413,430
08840:  MOVLB  0
08842:  CALL   1FFC
....................             /*
....................             fprintf(PC, "[MIS FM]\r\n");
....................             for (unsigned int8 byte_count = 0; byte_count < chunk; byte_count++)
....................             {
....................                 fprintf(PC, "%02X ", buffer[byte_count]);
....................             }
....................             fprintf(PC, "\r\n");
....................             */
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
08846:  MOVFF  E5,82F
0884A:  MOVFF  E4,82E
0884E:  MOVFF  E3,82D
08852:  MOVFF  E2,82C
08856:  MOVFF  3FA,833
0885A:  MOVFF  3F9,832
0885E:  MOVFF  3F8,831
08862:  MOVFF  3F7,830
08866:  MOVLW  03
08868:  MOVLB  8
0886A:  MOVWF  x35
0886C:  MOVLW  86
0886E:  MOVWF  x34
08870:  MOVFF  414,837
08874:  MOVFF  413,836
08878:  MOVLB  0
0887A:  CALL   3022
....................             /*
....................             fprintf(PC, "[SMF]\r\n");
....................             for (unsigned int8 byte_count = 0; byte_count < chunk; byte_count++)
....................             {
....................                 fprintf(PC, "%02X ", buffer[byte_count]);
....................             }
....................             fprintf(PC, "\r\n");
....................             */
....................             src_addr += chunk;
0887E:  MOVLB  4
08880:  MOVF   x13,W
08882:  ADDWF  x0F,F
08884:  MOVF   x14,W
08886:  ADDWFC x10,F
08888:  MOVLW  00
0888A:  ADDWFC x11,F
0888C:  MOVLW  00
0888E:  ADDWFC x12,F
....................             data_write_addr += chunk;
08890:  MOVF   x13,W
08892:  MOVLB  3
08894:  ADDWF  xF7,F
08896:  MOVLB  4
08898:  MOVF   x14,W
0889A:  MOVLB  3
0889C:  ADDWFC xF8,F
0889E:  MOVLW  00
088A0:  ADDWFC xF9,F
088A2:  MOVLW  00
088A4:  ADDWFC xFA,F
....................             used_size += chunk;
088A6:  MOVLB  4
088A8:  MOVF   x13,W
088AA:  MOVLB  3
088AC:  ADDWF  xE6,F
088AE:  MOVLB  4
088B0:  MOVF   x14,W
088B2:  MOVLB  3
088B4:  ADDWFC xE7,F
088B6:  MOVLW  00
088B8:  ADDWFC xE8,F
088BA:  MOVLW  00
088BC:  ADDWFC xE9,F
....................             remaining -= chunk;
088BE:  MOVLB  4
088C0:  MOVF   x13,W
088C2:  SUBWF  x0B,F
088C4:  MOVF   x14,W
088C6:  SUBWFB x0C,F
088C8:  MOVLW  00
088CA:  SUBWFB x0D,F
088CC:  MOVLW  00
088CE:  SUBWFB x0E,F
088D0:  MOVLB  0
088D2:  GOTO   876C
....................         }
.................... 
.................... 
....................        // write size area
....................        fprintf(PC, "Update size area\r\n");
088D6:  MOVLW  86
088D8:  MOVWF  FF6
088DA:  MOVLW  04
088DC:  MOVWF  FF7
088DE:  MOVLW  00
088E0:  MOVWF  FF8
088E2:  CALL   1868
....................        subsector_4kByte_erase(smf, mis_start_address);
088E6:  MOVFF  E5,82F
088EA:  MOVFF  E4,82E
088EE:  MOVFF  E3,82D
088F2:  MOVFF  E2,82C
088F6:  MOVFF  3D5,833
088FA:  MOVFF  3D4,832
088FE:  MOVFF  3D3,831
08902:  MOVFF  3D2,830
08906:  CALL   33A6
....................        write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
0890A:  MOVFF  3E9,419
0890E:  MOVFF  3E8,418
08912:  MOVFF  3E7,417
08916:  MOVFF  3E6,416
0891A:  MOVLB  4
0891C:  CLRF   x17
0891E:  CLRF   x18
08920:  CLRF   x19
08922:  MOVFF  E5,421
08926:  MOVFF  E4,420
0892A:  MOVFF  E3,41F
0892E:  MOVFF  E2,41E
08932:  MOVFF  3D5,425
08936:  MOVFF  3D4,424
0893A:  MOVFF  3D3,423
0893E:  MOVFF  3D2,422
08942:  MOVFF  416,426
08946:  MOVLB  0
08948:  CALL   78FE
....................        write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
0894C:  MOVLW  01
0894E:  MOVLB  3
08950:  ADDWF  xD2,W
08952:  MOVLB  4
08954:  MOVWF  x15
08956:  MOVLW  00
08958:  MOVLB  3
0895A:  ADDWFC xD3,W
0895C:  MOVLB  4
0895E:  MOVWF  x16
08960:  MOVLW  00
08962:  MOVLB  3
08964:  ADDWFC xD4,W
08966:  MOVLB  4
08968:  MOVWF  x17
0896A:  MOVLW  00
0896C:  MOVLB  3
0896E:  ADDWFC xD5,W
08970:  MOVLB  4
08972:  MOVWF  x18
08974:  MOVFF  3E7,41A
08978:  MOVFF  3E8,41B
0897C:  MOVFF  3E9,41C
08980:  CLRF   x1D
08982:  CLRF   x1B
08984:  CLRF   x1C
08986:  CLRF   x1D
08988:  MOVFF  E5,421
0898C:  MOVFF  E4,420
08990:  MOVFF  E3,41F
08994:  MOVFF  E2,41E
08998:  MOVFF  418,425
0899C:  MOVFF  417,424
089A0:  MOVFF  416,423
089A4:  MOVFF  415,422
089A8:  MOVFF  41A,426
089AC:  MOVLB  0
089AE:  CALL   78FE
....................        write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
089B2:  MOVLW  02
089B4:  MOVLB  3
089B6:  ADDWF  xD2,W
089B8:  MOVLB  4
089BA:  MOVWF  x15
089BC:  MOVLW  00
089BE:  MOVLB  3
089C0:  ADDWFC xD3,W
089C2:  MOVLB  4
089C4:  MOVWF  x16
089C6:  MOVLW  00
089C8:  MOVLB  3
089CA:  ADDWFC xD4,W
089CC:  MOVLB  4
089CE:  MOVWF  x17
089D0:  MOVLW  00
089D2:  MOVLB  3
089D4:  ADDWFC xD5,W
089D6:  MOVLB  4
089D8:  MOVWF  x18
089DA:  MOVFF  3E8,41A
089DE:  MOVFF  3E9,41B
089E2:  CLRF   x1C
089E4:  CLRF   x1D
089E6:  CLRF   x1B
089E8:  CLRF   x1C
089EA:  CLRF   x1D
089EC:  MOVFF  E5,421
089F0:  MOVFF  E4,420
089F4:  MOVFF  E3,41F
089F8:  MOVFF  E2,41E
089FC:  MOVFF  418,425
08A00:  MOVFF  417,424
08A04:  MOVFF  416,423
08A08:  MOVFF  415,422
08A0C:  MOVFF  41A,426
08A10:  MOVLB  0
08A12:  CALL   78FE
....................        write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
08A16:  MOVLW  03
08A18:  MOVLB  3
08A1A:  ADDWF  xD2,W
08A1C:  MOVLB  4
08A1E:  MOVWF  x15
08A20:  MOVLW  00
08A22:  MOVLB  3
08A24:  ADDWFC xD3,W
08A26:  MOVLB  4
08A28:  MOVWF  x16
08A2A:  MOVLW  00
08A2C:  MOVLB  3
08A2E:  ADDWFC xD4,W
08A30:  MOVLB  4
08A32:  MOVWF  x17
08A34:  MOVLW  00
08A36:  MOVLB  3
08A38:  ADDWFC xD5,W
08A3A:  MOVLB  4
08A3C:  MOVWF  x18
08A3E:  MOVFF  3E9,41A
08A42:  CLRF   x1B
08A44:  CLRF   x1C
08A46:  CLRF   x1D
08A48:  CLRF   x1B
08A4A:  CLRF   x1C
08A4C:  CLRF   x1D
08A4E:  MOVFF  E5,421
08A52:  MOVFF  E4,420
08A56:  MOVFF  E3,41F
08A5A:  MOVFF  E2,41E
08A5E:  MOVFF  418,425
08A62:  MOVFF  417,424
08A66:  MOVFF  416,423
08A6A:  MOVFF  415,422
08A6E:  MOVFF  41A,426
08A72:  MOVLB  0
08A74:  CALL   78FE
....................        write_data_byte(smf, mis_start_address + 4, loop_count);
08A78:  MOVLW  04
08A7A:  MOVLB  3
08A7C:  ADDWF  xD2,W
08A7E:  MOVLB  4
08A80:  MOVWF  x15
08A82:  MOVLW  00
08A84:  MOVLB  3
08A86:  ADDWFC xD3,W
08A88:  MOVLB  4
08A8A:  MOVWF  x16
08A8C:  MOVLW  00
08A8E:  MOVLB  3
08A90:  ADDWFC xD4,W
08A92:  MOVLB  4
08A94:  MOVWF  x17
08A96:  MOVLW  00
08A98:  MOVLB  3
08A9A:  ADDWFC xD5,W
08A9C:  MOVLB  4
08A9E:  MOVWF  x18
08AA0:  MOVFF  E5,421
08AA4:  MOVFF  E4,420
08AA8:  MOVFF  E3,41F
08AAC:  MOVFF  E2,41E
08AB0:  MOVFF  418,425
08AB4:  MOVFF  417,424
08AB8:  MOVFF  416,423
08ABC:  MOVFF  415,422
08AC0:  MOVFF  3EA,426
08AC4:  MOVLB  0
08AC6:  CALL   78FE
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
08ACA:  MOVLW  9A
08ACC:  MOVWF  FF6
08ACE:  MOVLW  04
08AD0:  MOVWF  FF7
08AD2:  MOVLW  00
08AD4:  MOVWF  FF8
08AD6:  MOVLW  0C
08AD8:  MOVLB  7
08ADA:  MOVWF  xEC
08ADC:  MOVLB  0
08ADE:  CALL   1898
08AE2:  MOVLW  41
08AE4:  MOVWF  FE9
08AE6:  MOVFF  3E9,418
08AEA:  MOVFF  3E8,417
08AEE:  MOVFF  3E7,416
08AF2:  MOVFF  3E6,415
08AF6:  GOTO   7C72
08AFA:  MOVLW  0D
08AFC:  MOVLB  8
08AFE:  MOVWF  x2F
08B00:  MOVLB  0
08B02:  CALL   1816
08B06:  MOVLW  0A
08B08:  MOVLB  8
08B0A:  MOVWF  x2F
08B0C:  MOVLB  0
08B0E:  CALL   1816
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
08B12:  MOVLW  AC
08B14:  MOVWF  FF6
08B16:  MOVLW  04
08B18:  MOVWF  FF7
08B1A:  MOVLW  00
08B1C:  MOVWF  FF8
08B1E:  MOVLW  0D
08B20:  MOVLB  7
08B22:  MOVWF  xEC
08B24:  MOVLB  0
08B26:  CALL   1898
08B2A:  MOVFF  3EA,7EC
08B2E:  MOVLW  1B
08B30:  MOVLB  7
08B32:  MOVWF  xED
08B34:  MOVLB  0
08B36:  CALL   44FC
08B3A:  MOVLW  BB
08B3C:  MOVWF  FF6
08B3E:  MOVLW  04
08B40:  MOVWF  FF7
08B42:  MOVLW  00
08B44:  MOVWF  FF8
08B46:  MOVLW  04
08B48:  MOVLB  7
08B4A:  MOVWF  xEC
08B4C:  MOVLB  0
08B4E:  CALL   1898
08B52:  MOVLB  3
08B54:  INCF   xC6,F
08B56:  MOVLB  0
08B58:  GOTO   7E16
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
08B5C:  MOVLW  C0
08B5E:  MOVWF  FF6
08B60:  MOVLW  04
08B62:  MOVWF  FF7
08B64:  MOVLW  00
08B66:  MOVWF  FF8
08B68:  CALL   1868
....................     fprintf(PC, "____________________\r\n\r\n");
08B6C:  MOVLW  DA
08B6E:  MOVWF  FF6
08B70:  MOVLW  04
08B72:  MOVWF  FF7
08B74:  MOVLW  00
08B76:  MOVWF  FF8
08B78:  CALL   1868
08B7C:  GOTO   8BDA (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.c"
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
05112:  MOVLW  01
05114:  ADDWF  xDD,W
05116:  ANDLW  0F
05118:  MOVLB  3
0511A:  MOVWF  x98
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
0511C:  MOVLB  0
0511E:  MOVF   xDC,W
05120:  MOVLB  3
05122:  SUBWF  x98,W
05124:  BTFSC  FD8.2
05126:  BRA    512E
05128:  MOVLB  0
0512A:  GOTO   5144
0512E:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
05130:  MOVLW  18
05132:  MOVWF  FF6
05134:  MOVLW  07
05136:  MOVWF  FF7
05138:  MOVLW  00
0513A:  MOVWF  FF8
0513C:  CALL   1868
05140:  GOTO   529A
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
05144:  MOVF   xDD,W
05146:  MULLW  09
05148:  MOVF   FF3,W
0514A:  MOVLB  3
0514C:  CLRF   x9A
0514E:  MOVWF  x99
05150:  MOVLW  4C
05152:  ADDWF  x99,W
05154:  MOVWF  01
05156:  MOVLW  00
05158:  ADDWFC x9A,W
0515A:  MOVWF  03
0515C:  MOVF   01,W
0515E:  MOVWF  x9B
05160:  MOVFF  03,39C
05164:  MOVF   x96,W
05166:  MOVWF  01
05168:  MOVF   x97,W
0516A:  MOVWF  03
0516C:  MOVF   01,W
0516E:  MOVWF  FE9
05170:  MOVFF  03,FEA
05174:  MOVLW  00
05176:  BTFSC  FEF.0
05178:  MOVLW  01
0517A:  MOVWF  01
0517C:  BTFSS  01.0
0517E:  BRA    5186
05180:  MOVLB  0
05182:  GOTO   5196
05186:  MOVLB  0
05188:  MOVFF  39C,FEA
0518C:  MOVFF  39B,FE9
05190:  BCF    FEF.0
05192:  GOTO   51A0
05196:  MOVFF  39C,FEA
0519A:  MOVFF  39B,FE9
0519E:  BSF    FEF.0
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
051A0:  MOVF   xDD,W
051A2:  MULLW  09
051A4:  MOVF   FF3,W
051A6:  MOVLB  3
051A8:  CLRF   x9A
051AA:  MOVWF  x99
051AC:  MOVLW  01
051AE:  ADDWF  x99,W
051B0:  MOVWF  01
051B2:  MOVLW  00
051B4:  ADDWFC x9A,W
051B6:  MOVWF  03
051B8:  MOVF   01,W
051BA:  ADDLW  4C
051BC:  MOVWF  01
051BE:  MOVLW  00
051C0:  ADDWFC 03,F
051C2:  MOVF   01,W
051C4:  MOVWF  x99
051C6:  MOVFF  03,39A
051CA:  MOVLW  01
051CC:  ADDWF  x96,W
051CE:  MOVWF  FE9
051D0:  MOVLW  00
051D2:  ADDWFC x97,W
051D4:  MOVWF  FEA
051D6:  MOVFF  FEF,00
051DA:  MOVFF  FEC,01
051DE:  MOVFF  FEC,02
051E2:  MOVFF  FEC,03
051E6:  MOVF   FED,F
051E8:  MOVF   FED,F
051EA:  MOVF   FED,F
051EC:  MOVFF  03,39E
051F0:  MOVFF  02,39D
051F4:  MOVFF  01,39C
051F8:  MOVFF  00,39B
051FC:  MOVFF  39A,FEA
05200:  MOVFF  399,FE9
05204:  MOVFF  39B,FEF
05208:  MOVFF  39C,FEC
0520C:  MOVFF  39D,FEC
05210:  MOVFF  39E,FEC
05214:  MOVF   FED,F
05216:  MOVF   FED,F
05218:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
0521A:  MOVLB  0
0521C:  MOVF   xDD,W
0521E:  MULLW  09
05220:  MOVF   FF3,W
05222:  MOVLB  3
05224:  CLRF   x9A
05226:  MOVWF  x99
05228:  MOVLW  05
0522A:  ADDWF  x99,W
0522C:  MOVWF  01
0522E:  MOVLW  00
05230:  ADDWFC x9A,W
05232:  MOVWF  03
05234:  MOVF   01,W
05236:  ADDLW  4C
05238:  MOVWF  01
0523A:  MOVLW  00
0523C:  ADDWFC 03,F
0523E:  MOVF   01,W
05240:  MOVWF  x99
05242:  MOVFF  03,39A
05246:  MOVLW  05
05248:  ADDWF  x96,W
0524A:  MOVWF  FE9
0524C:  MOVLW  00
0524E:  ADDWFC x97,W
05250:  MOVWF  FEA
05252:  MOVFF  FEF,00
05256:  MOVFF  FEC,01
0525A:  MOVFF  FEC,02
0525E:  MOVFF  FEC,03
05262:  MOVF   FED,F
05264:  MOVF   FED,F
05266:  MOVF   FED,F
05268:  MOVFF  03,39E
0526C:  MOVFF  02,39D
05270:  MOVFF  01,39C
05274:  MOVFF  00,39B
05278:  MOVFF  39A,FEA
0527C:  MOVFF  399,FE9
05280:  MOVFF  39B,FEF
05284:  MOVFF  39C,FEC
05288:  MOVFF  39D,FEC
0528C:  MOVFF  39E,FEC
05290:  MOVF   FED,F
05292:  MOVF   FED,F
05294:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
05296:  MOVFF  398,DD
0529A:  MOVLB  0
....................    }
0529C:  GOTO   52FA (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
07416:  MOVF   xDD,W
07418:  SUBWF  xDC,W
0741A:  BTFSS  FD8.2
0741C:  GOTO   7440
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
07420:  MOVLW  34
07422:  MOVWF  FF6
07424:  MOVLW  07
07426:  MOVWF  FF7
07428:  MOVLW  00
0742A:  MOVWF  FF8
0742C:  CALL   1868
....................       return 0x00;
07430:  MOVLW  00
07432:  MOVWF  01
07434:  MOVLW  00
07436:  MOVWF  02
07438:  GOTO   746C
....................    }
0743C:  GOTO   746C
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
07440:  MOVFF  DC,415
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
07444:  MOVLW  01
07446:  ADDWF  xDC,W
07448:  ANDLW  0F
0744A:  MOVWF  xDC
....................       return &smf_queue.smf_data[current_head];
0744C:  MOVLB  4
0744E:  MOVF   x15,W
07450:  MULLW  09
07452:  MOVF   FF3,W
07454:  CLRF   03
07456:  ADDLW  4C
07458:  MOVWF  01
0745A:  MOVLW  00
0745C:  ADDWFC 03,F
0745E:  MOVF   01,W
07460:  MOVWF  01
07462:  MOVF   03,W
07464:  MOVWF  02
07466:  MOVLB  0
07468:  GOTO   746C
....................    }
0746C:  GOTO   7E66 (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
07218:  MOVF   xDD,W
0721A:  SUBWF  xDC,W
0721C:  BTFSC  FD8.2
0721E:  GOTO   7228
07222:  MOVLW  00
07224:  GOTO   722A
07228:  MOVLW  01
0722A:  MOVWF  01
0722C:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
07470:  MOVLB  4
07472:  CLRF   x1D
07474:  CLRF   x1E
07476:  CLRF   x1F
07478:  CLRF   x20
0747A:  CLRF   x21
0747C:  CLRF   x22
0747E:  CLRF   x23
07480:  CLRF   x24
07482:  CLRF   x25
....................    
....................    if (mis_type == MEAURE_DATA)
07484:  MOVF   x1C,F
07486:  BTFSC  FD8.2
07488:  BRA    7490
0748A:  MOVLB  0
0748C:  GOTO   74B6
07490:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
07492:  MOVLW  04
07494:  MOVLB  4
07496:  MOVWF  x20
07498:  MOVLW  EC
0749A:  MOVWF  x1F
0749C:  CLRF   x1E
0749E:  CLRF   x1D
....................       mis_struct.end_address     = 0x056BFFFF;
074A0:  MOVLW  05
074A2:  MOVWF  x24
074A4:  MOVLW  6B
074A6:  MOVWF  x23
074A8:  SETF   x22
074AA:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000000;
074AC:  MOVLW  80
074AE:  MOVWF  x25
074B0:  MOVLB  0
....................    }
074B2:  GOTO   7502
....................    else if (mis_type == PICLOG_DATA)
074B6:  MOVLB  4
074B8:  DECFSZ x1C,W
074BA:  BRA    74C0
074BC:  BRA    74C6
074BE:  MOVLB  0
074C0:  MOVLB  0
074C2:  GOTO   74EC
074C6:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
074C8:  MOVLW  04
074CA:  MOVLB  4
074CC:  MOVWF  x20
074CE:  MOVLW  DC
074D0:  MOVWF  x1F
074D2:  CLRF   x1E
074D4:  CLRF   x1D
....................       mis_struct.end_address     = 0x04EBFFFF;
074D6:  MOVLW  04
074D8:  MOVWF  x24
074DA:  MOVLW  EB
074DC:  MOVWF  x23
074DE:  SETF   x22
074E0:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000001;  
074E2:  MOVLW  81
074E4:  MOVWF  x25
074E6:  MOVLB  0
....................    }
074E8:  GOTO   7502
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
074EC:  MOVLB  4
074EE:  SETF   x20
074F0:  SETF   x1F
074F2:  SETF   x1E
074F4:  SETF   x1D
....................       mis_struct.end_address     = 0xFFFFFFFF;
074F6:  SETF   x24
074F8:  SETF   x23
074FA:  SETF   x22
074FC:  SETF   x21
....................       mis_struct.mission_flag    = 0b11111111; 
074FE:  SETF   x25
07500:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
07502:  MOVLW  1D
07504:  MOVWF  01
07506:  MOVLW  04
07508:  MOVWF  02
0750A:  GOTO   7E94 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
03EAE:  MOVLB  3
03EB0:  CLRF   x8B
03EB2:  CLRF   x8C
03EB4:  CLRF   x8D
03EB6:  CLRF   x8E
03EB8:  CLRF   x8F
03EBA:  CLRF   x90
03EBC:  CLRF   x91
03EBE:  CLRF   x92
03EC0:  CLRF   x93
03EC2:  CLRF   x94
03EC4:  CLRF   x95
03EC6:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
03EC8:  MOVLW  4E
03ECA:  MOVWF  FF6
03ECC:  MOVLW  07
03ECE:  MOVWF  FF7
03ED0:  MOVLW  00
03ED2:  MOVWF  FF8
03ED4:  MOVLB  0
03ED6:  CALL   1868
....................    fprintf(PC, "\t[BOSS] >>> ");
03EDA:  MOVLW  6E
03EDC:  MOVWF  FF6
03EDE:  MOVLW  07
03EE0:  MOVWF  FF7
03EE2:  MOVLW  00
03EE4:  MOVWF  FF8
03EE6:  CALL   1868
....................    for (int8 i = 0; i < receive_signal_size; i++)
03EEA:  MOVLB  3
03EEC:  CLRF   x97
03EEE:  MOVLB  0
03EF0:  MOVLB  3
03EF2:  MOVF   x8A,W
03EF4:  SUBWF  x97,W
03EF6:  BTFSS  FD8.0
03EF8:  BRA    3F00
03EFA:  MOVLB  0
03EFC:  GOTO   3F3A
03F00:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
03F02:  MOVLB  3
03F04:  MOVF   x97,W
03F06:  ADDWF  x88,W
03F08:  MOVWF  FE9
03F0A:  MOVLW  00
03F0C:  ADDWFC x89,W
03F0E:  MOVWF  FEA
03F10:  MOVFF  FEF,39E
03F14:  MOVFF  39E,427
03F18:  MOVLW  37
03F1A:  MOVLB  4
03F1C:  MOVWF  x28
03F1E:  MOVLB  0
03F20:  CALL   1A5A
03F24:  MOVLW  20
03F26:  MOVLB  8
03F28:  MOVWF  x2F
03F2A:  MOVLB  0
03F2C:  CALL   1816
03F30:  MOVLB  3
03F32:  INCF   x97,F
03F34:  MOVLB  0
03F36:  GOTO   3EF0
....................    fprintf(PC, "\r\n");
03F3A:  MOVLW  0D
03F3C:  MOVLB  8
03F3E:  MOVWF  x2F
03F40:  MOVLB  0
03F42:  CALL   1816
03F46:  MOVLW  0A
03F48:  MOVLB  8
03F4A:  MOVWF  x2F
03F4C:  MOVLB  0
03F4E:  CALL   1816
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
03F52:  MOVFF  389,39F
03F56:  MOVFF  388,39E
03F5A:  MOVFF  38A,3A0
03F5E:  GOTO   3B5C
03F62:  MOVFF  01,398
....................    if (frame_start_position == -1)
03F66:  MOVLB  3
03F68:  MOVF   x98,W
03F6A:  SUBLW  FF
03F6C:  BTFSC  FD8.2
03F6E:  BRA    3F76
03F70:  MOVLB  0
03F72:  GOTO   3F84
03F76:  MOVLB  0
....................       return command;
03F78:  MOVLW  8B
03F7A:  MOVWF  01
03F7C:  MOVLW  03
03F7E:  MOVWF  02
03F80:  GOTO   40A6
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
03F84:  MOVLB  3
03F86:  MOVF   x98,W
03F88:  ADDWF  x88,W
03F8A:  MOVWF  01
03F8C:  MOVLW  00
03F8E:  ADDWFC x89,W
03F90:  MOVWF  03
03F92:  MOVF   01,W
03F94:  MOVWF  x99
03F96:  MOVFF  03,39A
03F9A:  MOVF   x99,W
03F9C:  MOVWF  FE9
03F9E:  MOVF   x9A,W
03FA0:  MOVWF  FEA
03FA2:  MOVF   FEF,W
03FA4:  ANDLW  0F
03FA6:  MOVWF  x9B
03FA8:  MOVFF  39B,39E
03FAC:  MOVLB  0
03FAE:  GOTO   3C04
03FB2:  MOVFF  01,39C
....................    if (content_size == -1)
03FB6:  MOVLB  3
03FB8:  MOVF   x9C,W
03FBA:  SUBLW  FF
03FBC:  BTFSC  FD8.2
03FBE:  BRA    3FC6
03FC0:  MOVLB  0
03FC2:  GOTO   3FD4
03FC6:  MOVLB  0
....................       return command;
03FC8:  MOVLW  8B
03FCA:  MOVWF  01
03FCC:  MOVLW  03
03FCE:  MOVWF  02
03FD0:  GOTO   40A6
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
03FD4:  MOVLB  3
03FD6:  MOVF   x98,W
03FD8:  SUBWF  x8A,W
03FDA:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
03FDC:  MOVFF  39A,39F
03FE0:  MOVFF  399,39E
03FE4:  MOVFF  39D,3A0
03FE8:  MOVLB  0
03FEA:  GOTO   3D0A
03FEE:  MOVF   01,F
03FF0:  BTFSS  FD8.2
03FF2:  GOTO   4002
....................       return command;
03FF6:  MOVLW  8B
03FF8:  MOVWF  01
03FFA:  MOVLW  03
03FFC:  MOVWF  02
03FFE:  GOTO   40A6
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
04002:  MOVLB  3
04004:  MOVF   x99,W
04006:  MOVWF  FE9
04008:  MOVF   x9A,W
0400A:  MOVWF  FEA
0400C:  MOVF   FEF,W
0400E:  ANDLW  F0
04010:  MOVWF  00
04012:  SWAPF  00,W
04014:  MOVWF  x9E
04016:  MOVLW  0F
04018:  ANDWF  x9E,F
0401A:  MOVFF  39E,39F
0401E:  MOVLB  0
04020:  GOTO   3DF4
04024:  MOVF   01,F
04026:  BTFSS  FD8.2
04028:  GOTO   4038
....................       return command;
0402C:  MOVLW  8B
0402E:  MOVWF  01
04030:  MOVLW  03
04032:  MOVWF  02
04034:  GOTO   40A6
.................... 
....................    command.frame_id = frame_id;
04038:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0403C:  MOVLW  01
0403E:  MOVLB  3
04040:  ADDWF  x99,W
04042:  MOVWF  01
04044:  MOVLW  00
04046:  ADDWFC x9A,W
04048:  MOVWF  03
0404A:  MOVF   01,W
0404C:  MOVWF  x9E
0404E:  MOVFF  03,39F
04052:  MOVLW  02
04054:  SUBWF  x9D,W
04056:  MOVWF  xA0
04058:  MOVLW  03
0405A:  MOVWF  FEA
0405C:  MOVLW  8E
0405E:  MOVWF  FE9
04060:  MOVFF  39F,FE2
04064:  MOVFF  39E,FE1
04068:  MOVF   xA0,W
0406A:  MOVWF  01
0406C:  BTFSS  FD8.2
0406E:  BRA    4076
04070:  MOVLB  0
04072:  GOTO   4082
04076:  MOVLB  0
04078:  MOVFF  FE6,FEE
0407C:  DECFSZ 01,F
0407E:  GOTO   4078
....................    command.size = receive_frame_size-2;
04082:  MOVLW  02
04084:  MOVLB  3
04086:  SUBWF  x9D,W
04088:  MOVWF  x8C
....................    command.is_exist = TRUE;
0408A:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
0408C:  MOVLW  7C
0408E:  MOVWF  FF6
04090:  MOVLW  07
04092:  MOVWF  FF7
04094:  MOVLW  00
04096:  MOVWF  FF8
04098:  MOVLB  0
0409A:  CALL   1868
....................    return command;
0409E:  MOVLW  8B
040A0:  MOVWF  01
040A2:  MOVLW  03
040A4:  MOVWF  02
040A6:  GOTO   94B4 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03B5C:  MOVLB  3
03B5E:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03B60:  CLRF   xA1
03B62:  MOVLB  0
03B64:  MOVLW  01
03B66:  MOVLB  3
03B68:  SUBWF  xA0,W
03B6A:  SUBWF  xA1,W
03B6C:  BTFSS  FD8.0
03B6E:  BRA    3B76
03B70:  MOVLB  0
03B72:  GOTO   3BAE
03B76:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03B78:  MOVLB  3
03B7A:  MOVF   xA1,W
03B7C:  ADDWF  x9E,W
03B7E:  MOVWF  FE9
03B80:  MOVLW  00
03B82:  ADDWFC x9F,W
03B84:  MOVWF  FEA
03B86:  MOVF   FEF,W
03B88:  SUBLW  AA
03B8A:  BTFSC  FD8.2
03B8C:  BRA    3B94
03B8E:  MOVLB  0
03B90:  GOTO   3BA4
03B94:  MOVLB  0
....................          return i+1;
03B96:  MOVLW  01
03B98:  MOVLB  3
03B9A:  ADDWF  xA1,W
03B9C:  MOVWF  01
03B9E:  MOVLB  0
03BA0:  GOTO   3C00
03BA4:  MOVLB  3
03BA6:  INCF   xA1,F
03BA8:  MOVLB  0
03BAA:  GOTO   3B64
....................    if (receive_signal[i] == SFD)
03BAE:  MOVLB  3
03BB0:  MOVF   xA1,W
03BB2:  ADDWF  x9E,W
03BB4:  MOVWF  FE9
03BB6:  MOVLW  00
03BB8:  ADDWFC x9F,W
03BBA:  MOVWF  FEA
03BBC:  MOVF   FEF,W
03BBE:  SUBLW  AA
03BC0:  BTFSC  FD8.2
03BC2:  BRA    3BCA
03BC4:  MOVLB  0
03BC6:  GOTO   3BE8
03BCA:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03BCC:  MOVLW  98
03BCE:  MOVWF  FF6
03BD0:  MOVLW  07
03BD2:  MOVWF  FF7
03BD4:  MOVLW  00
03BD6:  MOVWF  FF8
03BD8:  CALL   1868
....................       return -1;
03BDC:  MOVLW  FF
03BDE:  MOVWF  01
03BE0:  GOTO   3C00
....................    }
03BE4:  GOTO   3C00
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03BE8:  MOVLW  AE
03BEA:  MOVWF  FF6
03BEC:  MOVLW  07
03BEE:  MOVWF  FF7
03BF0:  MOVLW  00
03BF2:  MOVWF  FF8
03BF4:  CALL   1868
....................       return -1;
03BF8:  MOVLW  FF
03BFA:  MOVWF  01
03BFC:  GOTO   3C00
....................    }
03C00:  GOTO   3F62 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03C04:  MOVLB  3
03C06:  CLRF   x9F
03C08:  MOVLB  0
03C0A:  MOVLB  3
03C0C:  MOVF   x9F,W
03C0E:  SUBLW  02
03C10:  BTFSC  FD8.0
03C12:  BRA    3C1A
03C14:  MOVLB  0
03C16:  GOTO   3C78
03C1A:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03C1C:  BCF    FD8.0
03C1E:  MOVLB  3
03C20:  RLCF   x9F,W
03C22:  CLRF   xA1
03C24:  MOVWF  xA0
03C26:  MOVLW  E6
03C28:  ADDWF  xA0,W
03C2A:  MOVWF  FE9
03C2C:  MOVLW  00
03C2E:  ADDWFC xA1,W
03C30:  MOVWF  FEA
03C32:  MOVF   FEF,W
03C34:  SUBWF  x9E,W
03C36:  BTFSC  FD8.2
03C38:  BRA    3C40
03C3A:  MOVLB  0
03C3C:  GOTO   3C6E
03C40:  MOVLB  0
....................          return frame_ids[i].length;
03C42:  BCF    FD8.0
03C44:  MOVLB  3
03C46:  RLCF   x9F,W
03C48:  CLRF   xA1
03C4A:  MOVWF  xA0
03C4C:  MOVLW  01
03C4E:  ADDWF  xA0,W
03C50:  MOVWF  01
03C52:  MOVLW  00
03C54:  ADDWFC xA1,W
03C56:  MOVWF  03
03C58:  MOVF   01,W
03C5A:  ADDLW  E6
03C5C:  MOVWF  FE9
03C5E:  MOVLW  00
03C60:  ADDWFC 03,W
03C62:  MOVWF  FEA
03C64:  MOVF   FEF,W
03C66:  MOVWF  01
03C68:  MOVLB  0
03C6A:  GOTO   3CBC
03C6E:  MOVLB  3
03C70:  INCF   x9F,F
03C72:  MOVLB  0
03C74:  GOTO   3C0A
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
03C78:  MOVLW  C0
03C7A:  MOVWF  FF6
03C7C:  MOVLW  07
03C7E:  MOVWF  FF7
03C80:  MOVLW  00
03C82:  MOVWF  FF8
03C84:  MOVLW  1F
03C86:  MOVLB  7
03C88:  MOVWF  xEC
03C8A:  MOVLB  0
03C8C:  CALL   1898
03C90:  MOVFF  39E,427
03C94:  MOVLW  37
03C96:  MOVLB  4
03C98:  MOVWF  x28
03C9A:  MOVLB  0
03C9C:  CALL   1A5A
03CA0:  MOVLW  0D
03CA2:  MOVLB  8
03CA4:  MOVWF  x2F
03CA6:  MOVLB  0
03CA8:  CALL   1816
03CAC:  MOVLW  0A
03CAE:  MOVLB  8
03CB0:  MOVWF  x2F
03CB2:  MOVLB  0
03CB4:  CALL   1816
....................    return -1;
03CB8:  MOVLW  FF
03CBA:  MOVWF  01
03CBC:  GOTO   3FB2 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03D0A:  MOVLW  01
03D0C:  MOVLB  3
03D0E:  SUBWF  xA0,W
03D10:  ADDWF  x9E,W
03D12:  MOVWF  FE9
03D14:  MOVLW  00
03D16:  ADDWFC x9F,W
03D18:  MOVWF  FEA
03D1A:  MOVFF  FEF,3A1
03D1E:  MOVLW  01
03D20:  SUBWF  xA0,W
03D22:  MOVWF  xA3
03D24:  MOVFF  39F,7ED
03D28:  MOVFF  39E,7EC
03D2C:  MOVFF  3A3,7EE
03D30:  MOVLB  0
03D32:  CALL   3CC0
03D36:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03D3A:  MOVLB  3
03D3C:  MOVF   xA2,W
03D3E:  SUBWF  xA1,W
03D40:  BTFSC  FD8.2
03D42:  BRA    3D4A
03D44:  MOVLB  0
03D46:  GOTO   3D58
03D4A:  MOVLB  0
....................       return TRUE;
03D4C:  MOVLW  01
03D4E:  MOVWF  01
03D50:  GOTO   3DF0
03D54:  GOTO   3DF0
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03D58:  MOVLW  E4
03D5A:  MOVWF  FF6
03D5C:  MOVLW  07
03D5E:  MOVWF  FF7
03D60:  MOVLW  00
03D62:  MOVWF  FF8
03D64:  CALL   1868
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03D68:  MOVLW  F6
03D6A:  MOVWF  FF6
03D6C:  MOVLW  07
03D6E:  MOVWF  FF7
03D70:  MOVLW  00
03D72:  MOVWF  FF8
03D74:  MOVLW  13
03D76:  MOVLB  7
03D78:  MOVWF  xEC
03D7A:  MOVLB  0
03D7C:  CALL   1898
03D80:  MOVFF  3A1,427
03D84:  MOVLW  37
03D86:  MOVLB  4
03D88:  MOVWF  x28
03D8A:  MOVLB  0
03D8C:  CALL   1A5A
03D90:  MOVLW  0D
03D92:  MOVLB  8
03D94:  MOVWF  x2F
03D96:  MOVLB  0
03D98:  CALL   1816
03D9C:  MOVLW  0A
03D9E:  MOVLB  8
03DA0:  MOVWF  x2F
03DA2:  MOVLB  0
03DA4:  CALL   1816
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03DA8:  MOVLW  0E
03DAA:  MOVWF  FF6
03DAC:  MOVLW  08
03DAE:  MOVWF  FF7
03DB0:  MOVLW  00
03DB2:  MOVWF  FF8
03DB4:  MOVLW  13
03DB6:  MOVLB  7
03DB8:  MOVWF  xEC
03DBA:  MOVLB  0
03DBC:  CALL   1898
03DC0:  MOVFF  3A2,427
03DC4:  MOVLW  37
03DC6:  MOVLB  4
03DC8:  MOVWF  x28
03DCA:  MOVLB  0
03DCC:  CALL   1A5A
03DD0:  MOVLW  0D
03DD2:  MOVLB  8
03DD4:  MOVWF  x2F
03DD6:  MOVLB  0
03DD8:  CALL   1816
03DDC:  MOVLW  0A
03DDE:  MOVLB  8
03DE0:  MOVWF  x2F
03DE2:  MOVLB  0
03DE4:  CALL   1816
....................       return FALSE;
03DE8:  MOVLW  00
03DEA:  MOVWF  01
03DEC:  GOTO   3DF0
....................    }
03DF0:  GOTO   3FEE (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03DF4:  MOVLB  3
03DF6:  MOVF   x9F,W
03DF8:  SUBLW  0C
03DFA:  BTFSC  FD8.2
03DFC:  BRA    3E04
03DFE:  MOVLB  0
03E00:  GOTO   3E12
03E04:  MOVLB  0
....................       return TRUE;
03E06:  MOVLW  01
03E08:  MOVWF  01
03E0A:  GOTO   3EAA
03E0E:  GOTO   3EAA
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03E12:  MOVLW  26
03E14:  MOVWF  FF6
03E16:  MOVLW  08
03E18:  MOVWF  FF7
03E1A:  MOVLW  00
03E1C:  MOVWF  FF8
03E1E:  CALL   1868
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03E22:  MOVLW  48
03E24:  MOVWF  FF6
03E26:  MOVLW  08
03E28:  MOVWF  FF7
03E2A:  MOVLW  00
03E2C:  MOVWF  FF8
03E2E:  MOVLW  13
03E30:  MOVLB  7
03E32:  MOVWF  xEC
03E34:  MOVLB  0
03E36:  CALL   1898
03E3A:  MOVFF  39F,427
03E3E:  MOVLW  37
03E40:  MOVLB  4
03E42:  MOVWF  x28
03E44:  MOVLB  0
03E46:  CALL   1A5A
03E4A:  MOVLW  0D
03E4C:  MOVLB  8
03E4E:  MOVWF  x2F
03E50:  MOVLB  0
03E52:  CALL   1816
03E56:  MOVLW  0A
03E58:  MOVLB  8
03E5A:  MOVWF  x2F
03E5C:  MOVLB  0
03E5E:  CALL   1816
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
03E62:  MOVLW  60
03E64:  MOVWF  FF6
03E66:  MOVLW  08
03E68:  MOVWF  FF7
03E6A:  MOVLW  00
03E6C:  MOVWF  FF8
03E6E:  MOVLW  13
03E70:  MOVLB  7
03E72:  MOVWF  xEC
03E74:  MOVLB  0
03E76:  CALL   1898
03E7A:  MOVLW  0C
03E7C:  MOVLB  4
03E7E:  MOVWF  x27
03E80:  MOVLW  37
03E82:  MOVWF  x28
03E84:  MOVLB  0
03E86:  CALL   1A5A
03E8A:  MOVLW  0D
03E8C:  MOVLB  8
03E8E:  MOVWF  x2F
03E90:  MOVLB  0
03E92:  CALL   1816
03E96:  MOVLW  0A
03E98:  MOVLB  8
03E9A:  MOVWF  x2F
03E9C:  MOVLB  0
03E9E:  CALL   1816
....................       return FALSE;  
03EA2:  MOVLW  00
03EA4:  MOVWF  01
03EA6:  GOTO   3EAA
....................    }
03EAA:  GOTO   4024 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
041D4:  MOVLW  AA
041D6:  MOVLB  3
041D8:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
041DA:  MOVF   x86,W
041DC:  IORLW  50
041DE:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
041E0:  MOVLW  03
041E2:  MOVWF  FEA
041E4:  MOVLW  8C
041E6:  MOVWF  FE9
041E8:  MOVFF  388,FE2
041EC:  MOVFF  387,FE1
041F0:  MOVF   x89,W
041F2:  MOVWF  01
041F4:  BTFSS  FD8.2
041F6:  BRA    41FE
041F8:  MOVLB  0
041FA:  GOTO   420A
041FE:  MOVLB  0
04200:  MOVFF  FE6,FEE
04204:  DECFSZ 01,F
04206:  GOTO   4200
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0420A:  MOVLW  02
0420C:  MOVLB  3
0420E:  ADDWF  x89,W
04210:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
04212:  CLRF   03
04214:  MOVF   x9A,W
04216:  ADDLW  8A
04218:  MOVWF  01
0421A:  MOVLW  03
0421C:  ADDWFC 03,F
0421E:  MOVF   01,W
04220:  MOVWF  x9C
04222:  MOVFF  03,39D
04226:  MOVLW  01
04228:  SUBWF  x9A,W
0422A:  MOVWF  x9E
0422C:  MOVLW  03
0422E:  MOVLB  7
04230:  MOVWF  xED
04232:  MOVLW  8B
04234:  MOVWF  xEC
04236:  MOVFF  39E,7EE
0423A:  MOVLB  0
0423C:  CALL   3CC0
04240:  MOVFF  39D,FEA
04244:  MOVFF  39C,FE9
04248:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0424C:  MOVLW  01
0424E:  MOVLB  3
04250:  ADDWF  x9A,W
04252:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
04254:  MOVLW  03
04256:  MOVWF  x9D
04258:  MOVLW  8A
0425A:  MOVWF  x9C
0425C:  MOVFF  39B,39E
04260:  MOVLB  0
04262:  GOTO   411C
04266:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0411C:  MOVLB  3
0411E:  CLRF   x9F
04120:  MOVLB  0
04122:  MOVLB  3
04124:  MOVF   x9E,W
04126:  SUBWF  x9F,W
04128:  BTFSS  FD8.0
0412A:  BRA    4132
0412C:  MOVLB  0
0412E:  GOTO   4158
04132:  MOVLB  0
....................       fputc(data[i], BOSS);
04134:  MOVLB  3
04136:  MOVF   x9F,W
04138:  ADDWF  x9C,W
0413A:  MOVWF  FE9
0413C:  MOVLW  00
0413E:  ADDWFC x9D,W
04140:  MOVWF  FEA
04142:  MOVFF  FEF,3A1
04146:  MOVF   xA1,W
04148:  MOVLB  0
0414A:  GOTO   410C
0414E:  MOVLB  3
04150:  INCF   x9F,F
04152:  MOVLB  0
04154:  GOTO   4122
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04158:  MOVLW  78
0415A:  MOVWF  FF6
0415C:  MOVLW  08
0415E:  MOVWF  FF7
04160:  MOVLW  00
04162:  MOVWF  FF8
04164:  CALL   1868
....................    for(int i = 0; i < data_size; i++)
04168:  MOVLB  3
0416A:  CLRF   xA0
0416C:  MOVLB  0
0416E:  MOVLB  3
04170:  MOVF   x9E,W
04172:  SUBWF  xA0,W
04174:  BTFSS  FD8.0
04176:  BRA    417E
04178:  MOVLB  0
0417A:  GOTO   41B8
0417E:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
04180:  MOVLB  3
04182:  MOVF   xA0,W
04184:  ADDWF  x9C,W
04186:  MOVWF  FE9
04188:  MOVLW  00
0418A:  ADDWFC x9D,W
0418C:  MOVWF  FEA
0418E:  MOVFF  FEF,3A1
04192:  MOVFF  3A1,427
04196:  MOVLW  37
04198:  MOVLB  4
0419A:  MOVWF  x28
0419C:  MOVLB  0
0419E:  CALL   1A5A
041A2:  MOVLW  20
041A4:  MOVLB  8
041A6:  MOVWF  x2F
041A8:  MOVLB  0
041AA:  CALL   1816
041AE:  MOVLB  3
041B0:  INCF   xA0,F
041B2:  MOVLB  0
041B4:  GOTO   416E
....................    fprintf(PC, "\r\n");
041B8:  MOVLW  0D
041BA:  MOVLB  8
041BC:  MOVWF  x2F
041BE:  MOVLB  0
041C0:  CALL   1816
041C4:  MOVLW  0A
041C6:  MOVLB  8
041C8:  MOVWF  x2F
041CA:  MOVLB  0
041CC:  CALL   1816
041D0:  GOTO   4266 (RETURN)
.................... }
.................... 
.................... #include "../../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04268:  MOVLW  0F
0426A:  MOVLB  3
0426C:  MOVWF  x86
0426E:  CLRF   x88
04270:  CLRF   x87
04272:  CLRF   x89
04274:  MOVLB  0
04276:  CALL   41D4
0427A:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
07296:  MOVLW  03
07298:  MOVLB  3
0729A:  MOVWF  x86
0729C:  CLRF   x88
0729E:  MOVLW  48
072A0:  MOVWF  x87
072A2:  MOVLW  04
072A4:  MOVWF  x89
072A6:  MOVLB  0
072A8:  CALL   41D4
072AC:  GOTO   72D4 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "../core/measurement/mmj_cigs_func.c"
.................... #include "mmj_cigs_func.h"               // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/devices/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../storage/mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
....................     output_high(ADC_CS); // ADC Chip Select
....................     output_high(MIS_FM_CS); // DAC Chip Select
....................     output_high(SMF_CS); // SMF Chip Select
....................     output_low(CONNECT_CIGS1);
....................     output_high(EN_NPWR);
....................     delay_ms(1);
....................     fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
04864:  MOVLW  E8
04866:  MOVWF  FF6
04868:  MOVLW  09
0486A:  MOVWF  FF7
0486C:  MOVLW  00
0486E:  MOVWF  FF8
04870:  CALL   1868
....................     output_high(CONNECT_CIGS1);
04874:  BCF    F94.0
04876:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04878:  BCF    F94.7
0487A:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
0487C:  MOVLW  85
0487E:  MOVWF  00
04880:  DECFSZ 00,F
04882:  BRA    4880
....................     fprintf(PC, "step, voltage, current\r\n");
04884:  MOVLW  FC
04886:  MOVWF  FF6
04888:  MOVLW  09
0488A:  MOVWF  FF7
0488C:  MOVLW  00
0488E:  MOVWF  FF8
04890:  CALL   1868
....................     mcp4901_1_write(0); // Initialize DAC to 0
04894:  MOVLB  7
04896:  CLRF   xED
04898:  CLRF   xEC
0489A:  MOVLB  0
0489C:  CALL   46FC
....................     delay_ms(100); // wait for the DAC to stabilize
048A0:  MOVLW  64
048A2:  MOVLB  8
048A4:  MOVWF  x44
048A6:  MOVLB  0
048A8:  CALL   17E8
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
048AC:  MOVLB  3
048AE:  CLRF   x95
048B0:  MOVLB  0
048B2:  MOVLB  3
048B4:  MOVF   x90,W
048B6:  SUBWF  x95,W
048B8:  BTFSS  FD8.0
048BA:  BRA    48C2
048BC:  MOVLB  0
048BE:  GOTO   4988
048C2:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
048C4:  MOVLB  7
048C6:  CLRF   xED
048C8:  MOVFF  395,7EC
048CC:  MOVLB  0
048CE:  CALL   46FC
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
048D2:  MOVLW  02
048D4:  MOVLB  7
048D6:  MOVWF  xEE
048D8:  MOVLB  0
048DA:  CALL   19CE
048DE:  MOVFF  02,392
048E2:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
048E6:  MOVLW  01
048E8:  MOVLB  7
048EA:  MOVWF  xEE
048EC:  MOVLB  0
048EE:  CALL   19CE
048F2:  MOVFF  02,394
048F6:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
048FA:  MOVFF  395,7EC
048FE:  MOVLW  1B
04900:  MOVLB  7
04902:  MOVWF  xED
04904:  MOVLB  0
04906:  CALL   44FC
0490A:  MOVLW  2C
0490C:  MOVLB  8
0490E:  MOVWF  x2F
04910:  MOVLB  0
04912:  CALL   1816
04916:  MOVLW  20
04918:  MOVLB  8
0491A:  MOVWF  x2F
0491C:  MOVLB  0
0491E:  CALL   1816
04922:  MOVLW  10
04924:  MOVWF  FE9
04926:  MOVFF  392,397
0492A:  MOVFF  391,396
0492E:  CALL   473A
04932:  MOVLW  2C
04934:  MOVLB  8
04936:  MOVWF  x2F
04938:  MOVLB  0
0493A:  CALL   1816
0493E:  MOVLW  20
04940:  MOVLB  8
04942:  MOVWF  x2F
04944:  MOVLB  0
04946:  CALL   1816
0494A:  MOVLW  10
0494C:  MOVWF  FE9
0494E:  MOVFF  394,397
04952:  MOVFF  393,396
04956:  CALL   473A
0495A:  MOVLW  0D
0495C:  MOVLB  8
0495E:  MOVWF  x2F
04960:  MOVLB  0
04962:  CALL   1816
04966:  MOVLW  0A
04968:  MOVLB  8
0496A:  MOVWF  x2F
0496C:  MOVLB  0
0496E:  CALL   1816
....................         delay_ms(1); // wait for the ADC to stabilize
04972:  MOVLW  01
04974:  MOVLB  8
04976:  MOVWF  x44
04978:  MOVLB  0
0497A:  CALL   17E8
0497E:  MOVLB  3
04980:  INCF   x95,F
04982:  MOVLB  0
04984:  GOTO   48B2
....................     }
04988:  GOTO   4A00 (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
04A1C:  MOVLB  7
04A1E:  CLRF   xED
04A20:  CLRF   xEC
04A22:  MOVLB  0
04A24:  CALL   46FC
....................     fprintf(PC, "Start ADC TEST\r\n");
04A28:  MOVLW  16
04A2A:  MOVWF  FF6
04A2C:  MOVLW  0A
04A2E:  MOVWF  FF7
04A30:  MOVLW  00
04A32:  MOVWF  FF8
04A34:  CALL   1868
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
04A38:  MOVLB  7
04A3A:  CLRF   xEE
04A3C:  MOVLB  0
04A3E:  CALL   19CE
04A42:  MOVFF  02,38C
04A46:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04A4A:  MOVLW  28
04A4C:  MOVWF  FF6
04A4E:  MOVLW  0A
04A50:  MOVWF  FF7
04A52:  MOVLW  00
04A54:  MOVWF  FF8
04A56:  MOVLW  0D
04A58:  MOVLB  7
04A5A:  MOVWF  xEC
04A5C:  MOVLB  0
04A5E:  CALL   1898
04A62:  MOVFF  38C,427
04A66:  MOVLW  37
04A68:  MOVLB  4
04A6A:  MOVWF  x28
04A6C:  MOVLB  0
04A6E:  CALL   1A5A
04A72:  MOVFF  38B,427
04A76:  MOVLW  37
04A78:  MOVLB  4
04A7A:  MOVWF  x28
04A7C:  MOVLB  0
04A7E:  CALL   1A5A
04A82:  MOVLW  0D
04A84:  MOVLB  8
04A86:  MOVWF  x2F
04A88:  MOVLB  0
04A8A:  CALL   1816
04A8E:  MOVLW  0A
04A90:  MOVLB  8
04A92:  MOVWF  x2F
04A94:  MOVLB  0
04A96:  CALL   1816
....................     ans = ad7490_read(ADC_CIGS1_CURR);
04A9A:  MOVLW  01
04A9C:  MOVLB  7
04A9E:  MOVWF  xEE
04AA0:  MOVLB  0
04AA2:  CALL   19CE
04AA6:  MOVFF  02,38C
04AAA:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04AAE:  MOVLW  3E
04AB0:  MOVWF  FF6
04AB2:  MOVLW  0A
04AB4:  MOVWF  FF7
04AB6:  MOVLW  00
04AB8:  MOVWF  FF8
04ABA:  MOVLW  0D
04ABC:  MOVLB  7
04ABE:  MOVWF  xEC
04AC0:  MOVLB  0
04AC2:  CALL   1898
04AC6:  MOVFF  38C,427
04ACA:  MOVLW  37
04ACC:  MOVLB  4
04ACE:  MOVWF  x28
04AD0:  MOVLB  0
04AD2:  CALL   1A5A
04AD6:  MOVFF  38B,427
04ADA:  MOVLW  37
04ADC:  MOVLB  4
04ADE:  MOVWF  x28
04AE0:  MOVLB  0
04AE2:  CALL   1A5A
04AE6:  MOVLW  0D
04AE8:  MOVLB  8
04AEA:  MOVWF  x2F
04AEC:  MOVLB  0
04AEE:  CALL   1816
04AF2:  MOVLW  0A
04AF4:  MOVLB  8
04AF6:  MOVWF  x2F
04AF8:  MOVLB  0
04AFA:  CALL   1816
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04AFE:  MOVLW  02
04B00:  MOVLB  7
04B02:  MOVWF  xEE
04B04:  MOVLB  0
04B06:  CALL   19CE
04B0A:  MOVFF  02,38C
04B0E:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
04B12:  MOVLW  54
04B14:  MOVWF  FF6
04B16:  MOVLW  0A
04B18:  MOVWF  FF7
04B1A:  MOVLW  00
04B1C:  MOVWF  FF8
04B1E:  MOVLW  0F
04B20:  MOVLB  7
04B22:  MOVWF  xEC
04B24:  MOVLB  0
04B26:  CALL   1898
04B2A:  MOVFF  38C,427
04B2E:  MOVLW  37
04B30:  MOVLB  4
04B32:  MOVWF  x28
04B34:  MOVLB  0
04B36:  CALL   1A5A
04B3A:  MOVFF  38B,427
04B3E:  MOVLW  37
04B40:  MOVLB  4
04B42:  MOVWF  x28
04B44:  MOVLB  0
04B46:  CALL   1A5A
04B4A:  MOVLW  0D
04B4C:  MOVLB  8
04B4E:  MOVWF  x2F
04B50:  MOVLB  0
04B52:  CALL   1816
04B56:  MOVLW  0A
04B58:  MOVLB  8
04B5A:  MOVWF  x2F
04B5C:  MOVLB  0
04B5E:  CALL   1816
....................     ans = ad7490_read(ADC_CIGS1_VREF);
04B62:  MOVLW  03
04B64:  MOVLB  7
04B66:  MOVWF  xEE
04B68:  MOVLB  0
04B6A:  CALL   19CE
04B6E:  MOVFF  02,38C
04B72:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04B76:  MOVLW  6C
04B78:  MOVWF  FF6
04B7A:  MOVLW  0A
04B7C:  MOVWF  FF7
04B7E:  MOVLW  00
04B80:  MOVWF  FF8
04B82:  MOVLW  10
04B84:  MOVLB  7
04B86:  MOVWF  xEC
04B88:  MOVLB  0
04B8A:  CALL   1898
04B8E:  MOVFF  38C,427
04B92:  MOVLW  37
04B94:  MOVLB  4
04B96:  MOVWF  x28
04B98:  MOVLB  0
04B9A:  CALL   1A5A
04B9E:  MOVFF  38B,427
04BA2:  MOVLW  37
04BA4:  MOVLB  4
04BA6:  MOVWF  x28
04BA8:  MOVLB  0
04BAA:  CALL   1A5A
04BAE:  MOVLW  0D
04BB0:  MOVLB  8
04BB2:  MOVWF  x2F
04BB4:  MOVLB  0
04BB6:  CALL   1816
04BBA:  MOVLW  0A
04BBC:  MOVLB  8
04BBE:  MOVWF  x2F
04BC0:  MOVLB  0
04BC2:  CALL   1816
04BC6:  GOTO   710C (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
04BCA:  MOVLW  DE
04BCC:  MOVWF  FF6
04BCE:  MOVLW  0A
04BD0:  MOVWF  FF7
04BD2:  MOVLW  00
04BD4:  MOVWF  FF8
04BD6:  CALL   1868
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04BDA:  MOVLW  F2
04BDC:  MOVWF  FF6
04BDE:  MOVLW  0A
04BE0:  MOVWF  FF7
04BE2:  MOVLW  00
04BE4:  MOVWF  FF8
04BE6:  MOVLW  0E
04BE8:  MOVLB  7
04BEA:  MOVWF  xEC
04BEC:  MOVLB  0
04BEE:  CALL   1898
04BF2:  MOVFF  396,7EC
04BF6:  MOVLW  1B
04BF8:  MOVLB  7
04BFA:  MOVWF  xED
04BFC:  MOVLB  0
04BFE:  CALL   44FC
04C02:  MOVLW  0D
04C04:  MOVLB  8
04C06:  MOVWF  x2F
04C08:  MOVLB  0
04C0A:  CALL   1816
04C0E:  MOVLW  0A
04C10:  MOVLB  8
04C12:  MOVWF  x2F
04C14:  MOVLB  0
04C16:  CALL   1816
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
04C1A:  BCF    F94.0
04C1C:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
04C1E:  BCF    F94.5
04C20:  BCF    F8B.5
....................     output_low(EN_NPWR); 
04C22:  BCF    F94.7
04C24:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
04C26:  CALL   2D04
04C2A:  MOVFF  03,39A
04C2E:  MOVFF  02,399
04C32:  MOVFF  01,398
04C36:  MOVFF  00,397
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
04C3A:  MOVLW  0D
04C3C:  MOVLB  7
04C3E:  MOVWF  xEE
04C40:  MOVLB  0
04C42:  CALL   19CE
04C46:  MOVFF  02,39C
04C4A:  MOVFF  01,39B
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
04C4E:  MOVLW  0E
04C50:  MOVLB  7
04C52:  MOVWF  xEE
04C54:  MOVLB  0
04C56:  CALL   19CE
04C5A:  MOVFF  02,39E
04C5E:  MOVFF  01,39D
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
04C62:  MOVLW  0C
04C64:  MOVLB  7
04C66:  MOVWF  xEE
04C68:  MOVLB  0
04C6A:  CALL   19CE
04C6E:  MOVFF  02,3A0
04C72:  MOVFF  01,39F
....................     measured_data.pd = ad7490_read(ADC_PD); 
04C76:  MOVLW  0F
04C78:  MOVLB  7
04C7A:  MOVWF  xEE
04C7C:  MOVLB  0
04C7E:  CALL   19CE
04C82:  MOVFF  02,3A2
04C86:  MOVFF  01,3A1
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
04C8A:  MOVLB  7
04C8C:  CLRF   x9F
04C8E:  MOVLB  0
04C90:  MOVLB  3
04C92:  MOVF   x96,W
04C94:  MOVLB  7
04C96:  SUBWF  x9F,W
04C98:  BTFSS  FD8.0
04C9A:  BRA    4CA2
04C9C:  MOVLB  0
04C9E:  GOTO   4D40
04CA2:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04CA4:  MOVLB  7
04CA6:  CLRF   xED
04CA8:  MOVFF  79F,7EC
04CAC:  MOVLB  0
04CAE:  CALL   46FC
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
04CB2:  MOVLW  0A
04CB4:  MOVLB  8
04CB6:  MOVWF  x44
04CB8:  MOVLB  0
04CBA:  CALL   17E8
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
04CBE:  CLRF   03
04CC0:  MOVLB  7
04CC2:  MOVF   x9F,W
04CC4:  MOVWF  02
04CC6:  BCF    FD8.0
04CC8:  RLCF   02,F
04CCA:  RLCF   03,F
04CCC:  MOVF   02,W
04CCE:  ADDLW  A3
04CD0:  MOVWF  01
04CD2:  MOVLW  03
04CD4:  ADDWFC 03,F
04CD6:  MOVF   01,W
04CD8:  MOVWF  xEC
04CDA:  MOVFF  03,7ED
04CDE:  MOVLW  02
04CE0:  MOVWF  xEE
04CE2:  MOVLB  0
04CE4:  CALL   19CE
04CE8:  MOVFF  7ED,FEA
04CEC:  MOVFF  7EC,FE9
04CF0:  MOVFF  02,FEC
04CF4:  MOVF   FED,F
04CF6:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
04CFA:  CLRF   03
04CFC:  MOVLB  7
04CFE:  MOVF   x9F,W
04D00:  MOVWF  02
04D02:  BCF    FD8.0
04D04:  RLCF   02,F
04D06:  RLCF   03,F
04D08:  MOVF   02,W
04D0A:  ADDLW  A1
04D0C:  MOVWF  01
04D0E:  MOVLW  05
04D10:  ADDWFC 03,F
04D12:  MOVF   01,W
04D14:  MOVWF  xEC
04D16:  MOVFF  03,7ED
04D1A:  MOVLW  01
04D1C:  MOVWF  xEE
04D1E:  MOVLB  0
04D20:  CALL   19CE
04D24:  MOVFF  7ED,FEA
04D28:  MOVFF  7EC,FE9
04D2C:  MOVFF  02,FEC
04D30:  MOVF   FED,F
04D32:  MOVFF  01,FEF
04D36:  MOVLB  7
04D38:  INCF   x9F,F
04D3A:  MOVLB  0
04D3C:  GOTO   4C90
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
04D40:  BCF    F94.0
04D42:  BCF    F8B.0
....................     output_high(EN_NPWR);
04D44:  BCF    F94.7
04D46:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
04D48:  MOVLW  06
04D4A:  MOVWF  FF6
04D4C:  MOVLW  0B
04D4E:  MOVWF  FF7
04D50:  MOVLW  00
04D52:  MOVWF  FF8
04D54:  CALL   1868
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
04D58:  MOVLW  18
04D5A:  MOVWF  FF6
04D5C:  MOVLW  0B
04D5E:  MOVWF  FF7
04D60:  MOVLW  00
04D62:  MOVWF  FF8
04D64:  CALL   1868
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
04D68:  MOVLB  7
04D6A:  CLRF   xA0
04D6C:  CLRF   xA1
04D6E:  CLRF   xA2
04D70:  CLRF   xA3
04D72:  CLRF   xA4
04D74:  CLRF   xA5
04D76:  CLRF   xA6
04D78:  CLRF   xA7
04D7A:  CLRF   xA8
04D7C:  CLRF   xA9
04D7E:  CLRF   xAA
04D80:  CLRF   xAB
04D82:  CLRF   xAC
04D84:  CLRF   xAD
04D86:  CLRF   xAE
04D88:  CLRF   xAF
04D8A:  CLRF   xB0
04D8C:  CLRF   xB1
04D8E:  CLRF   xB2
04D90:  CLRF   xB3
04D92:  CLRF   xB4
04D94:  CLRF   xB5
04D96:  CLRF   xB6
04D98:  CLRF   xB7
04D9A:  CLRF   xB8
04D9C:  CLRF   xB9
04D9E:  CLRF   xBA
04DA0:  CLRF   xBB
04DA2:  CLRF   xBC
04DA4:  CLRF   xBD
04DA6:  CLRF   xBE
04DA8:  CLRF   xBF
04DAA:  CLRF   xC0
04DAC:  CLRF   xC1
04DAE:  CLRF   xC2
04DB0:  CLRF   xC3
04DB2:  CLRF   xC4
04DB4:  CLRF   xC5
04DB6:  CLRF   xC6
04DB8:  CLRF   xC7
04DBA:  CLRF   xC8
04DBC:  CLRF   xC9
04DBE:  CLRF   xCA
04DC0:  CLRF   xCB
04DC2:  CLRF   xCC
04DC4:  CLRF   xCD
04DC6:  CLRF   xCE
04DC8:  CLRF   xCF
04DCA:  CLRF   xD0
04DCC:  CLRF   xD1
04DCE:  CLRF   xD2
04DD0:  CLRF   xD3
04DD2:  CLRF   xD4
04DD4:  CLRF   xD5
04DD6:  CLRF   xD6
04DD8:  CLRF   xD7
04DDA:  CLRF   xD8
04DDC:  CLRF   xD9
04DDE:  CLRF   xDA
04DE0:  CLRF   xDB
04DE2:  CLRF   xDC
04DE4:  CLRF   xDD
04DE6:  CLRF   xDE
04DE8:  CLRF   xDF
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
04DEA:  CLRF   xE0
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
04DEC:  CLRF   xE2
04DEE:  CLRF   xE1
04DF0:  MOVLB  0
04DF2:  MOVLB  7
04DF4:  MOVF   xE2,F
04DF6:  BTFSC  FD8.2
04DF8:  BRA    4E00
04DFA:  MOVLB  0
04DFC:  GOTO   5036
04E00:  MOVLB  0
04E02:  MOVLB  3
04E04:  MOVF   x96,W
04E06:  MOVLB  7
04E08:  SUBWF  xE1,W
04E0A:  BTFSS  FD8.0
04E0C:  BRA    4E14
04E0E:  MOVLB  0
04E10:  GOTO   5036
04E14:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
04E16:  CLRF   03
04E18:  MOVLB  7
04E1A:  MOVF   xE0,W
04E1C:  ADDLW  A0
04E1E:  MOVWF  01
04E20:  MOVLW  07
04E22:  ADDWFC 03,F
04E24:  MOVF   01,W
04E26:  MOVWF  xEC
04E28:  MOVFF  03,7ED
04E2C:  BCF    FD8.0
04E2E:  RLCF   xE1,W
04E30:  MOVWF  02
04E32:  RLCF   xE2,W
04E34:  MOVWF  03
04E36:  MOVF   02,W
04E38:  ADDLW  A3
04E3A:  MOVWF  FE9
04E3C:  MOVLW  03
04E3E:  ADDWFC 03,W
04E40:  MOVWF  FEA
04E42:  MOVFF  FEC,7EF
04E46:  MOVF   FED,F
04E48:  MOVFF  FEF,7EE
04E4C:  RRCF   xEF,F
04E4E:  RRCF   xEE,F
04E50:  RRCF   xEF,F
04E52:  RRCF   xEE,F
04E54:  RRCF   xEF,F
04E56:  RRCF   xEE,F
04E58:  RRCF   xEF,F
04E5A:  RRCF   xEE,F
04E5C:  MOVLW  0F
04E5E:  ANDWF  xEF,F
04E60:  MOVF   xEE,W
04E62:  MOVWF  00
04E64:  CLRF   03
04E66:  MOVF   00,W
04E68:  MOVWF  xEE
04E6A:  MOVFF  03,7EF
04E6E:  MOVFF  7ED,FEA
04E72:  MOVFF  7EC,FE9
04E76:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04E7A:  INCF   xE0,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
04E7C:  CLRF   03
04E7E:  MOVF   xE0,W
04E80:  ADDLW  A0
04E82:  MOVWF  01
04E84:  MOVLW  07
04E86:  ADDWFC 03,F
04E88:  MOVF   01,W
04E8A:  MOVWF  xEC
04E8C:  MOVFF  03,7ED
04E90:  BCF    FD8.0
04E92:  RLCF   xE1,W
04E94:  MOVWF  02
04E96:  RLCF   xE2,W
04E98:  MOVWF  03
04E9A:  MOVF   02,W
04E9C:  ADDLW  A3
04E9E:  MOVWF  FE9
04EA0:  MOVLW  03
04EA2:  ADDWFC 03,W
04EA4:  MOVWF  FEA
04EA6:  MOVFF  FEC,7EF
04EAA:  MOVF   FED,F
04EAC:  MOVFF  FEF,7EE
04EB0:  MOVLW  0F
04EB2:  ANDWF  xEE,F
04EB4:  CLRF   xEF
04EB6:  RLCF   xEE,F
04EB8:  RLCF   xEF,F
04EBA:  RLCF   xEE,F
04EBC:  RLCF   xEF,F
04EBE:  RLCF   xEE,F
04EC0:  RLCF   xEF,F
04EC2:  RLCF   xEE,F
04EC4:  RLCF   xEF,F
04EC6:  MOVLW  F0
04EC8:  ANDWF  xEE,F
04ECA:  BCF    FD8.0
04ECC:  RLCF   xE1,W
04ECE:  MOVWF  02
04ED0:  RLCF   xE2,W
04ED2:  MOVWF  03
04ED4:  MOVF   02,W
04ED6:  ADDLW  A1
04ED8:  MOVWF  FE9
04EDA:  MOVLW  05
04EDC:  ADDWFC 03,W
04EDE:  MOVWF  FEA
04EE0:  MOVFF  FEC,7F1
04EE4:  MOVF   FED,F
04EE6:  MOVFF  FEF,7F0
04EEA:  MOVFF  7F1,7F0
04EEE:  CLRF   xF1
04EF0:  MOVF   xF0,W
04EF2:  ANDLW  0F
04EF4:  MOVWF  00
04EF6:  CLRF   03
04EF8:  MOVF   00,W
04EFA:  IORWF  xEE,W
04EFC:  MOVWF  00
04EFE:  MOVF   03,W
04F00:  IORWF  xEF,W
04F02:  MOVWF  03
04F04:  MOVF   00,W
04F06:  MOVWF  xEE
04F08:  MOVFF  03,7EF
04F0C:  MOVFF  7ED,FEA
04F10:  MOVFF  7EC,FE9
04F14:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04F18:  INCF   xE0,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
04F1A:  CLRF   03
04F1C:  MOVF   xE0,W
04F1E:  ADDLW  A0
04F20:  MOVWF  01
04F22:  MOVLW  07
04F24:  ADDWFC 03,F
04F26:  MOVF   01,W
04F28:  MOVWF  xEC
04F2A:  MOVFF  03,7ED
04F2E:  BCF    FD8.0
04F30:  RLCF   xE1,W
04F32:  MOVWF  02
04F34:  RLCF   xE2,W
04F36:  MOVWF  03
04F38:  MOVF   02,W
04F3A:  ADDLW  A1
04F3C:  MOVWF  FE9
04F3E:  MOVLW  05
04F40:  ADDWFC 03,W
04F42:  MOVWF  FEA
04F44:  MOVFF  FEC,7EF
04F48:  MOVF   FED,F
04F4A:  MOVFF  FEF,7EE
04F4E:  MOVF   xEE,W
04F50:  MOVWF  00
04F52:  CLRF   03
04F54:  MOVF   00,W
04F56:  MOVWF  xEE
04F58:  MOVFF  03,7EF
04F5C:  MOVFF  7ED,FEA
04F60:  MOVFF  7EC,FE9
04F64:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04F68:  INCF   xE0,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
04F6A:  MOVF   xE0,W
04F6C:  SUBLW  3F
04F6E:  BTFSC  FD8.2
04F70:  BRA    4F78
04F72:  MOVLB  0
04F74:  GOTO   5028
04F78:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
04F7A:  MOVLW  07
04F7C:  MOVLB  7
04F7E:  MOVWF  xED
04F80:  MOVLW  A0
04F82:  MOVWF  xEC
04F84:  MOVLW  3F
04F86:  MOVWF  xEE
04F88:  MOVLB  0
04F8A:  CALL   3CC0
04F8E:  MOVFF  01,7DF
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04F92:  MOVLB  3
04F94:  MOVF   x64,W
04F96:  MOVLB  7
04F98:  MOVWF  xE3
04F9A:  MOVLB  3
04F9C:  MOVF   x65,W
04F9E:  MOVLB  7
04FA0:  MOVWF  xE4
04FA2:  MOVLW  16
04FA4:  MOVLB  3
04FA6:  ADDWF  x66,W
04FA8:  MOVLB  7
04FAA:  MOVWF  xE5
04FAC:  MOVLW  00
04FAE:  MOVLB  3
04FB0:  ADDWFC x67,W
04FB2:  MOVLB  7
04FB4:  MOVWF  xE6
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04FB6:  MOVFF  E1,82F
04FBA:  MOVFF  E0,82E
04FBE:  MOVFF  DF,82D
04FC2:  MOVFF  DE,82C
04FC6:  MOVFF  7E6,833
04FCA:  MOVFF  7E5,832
04FCE:  MOVFF  7E4,831
04FD2:  MOVFF  7E3,830
04FD6:  MOVLW  07
04FD8:  MOVLB  8
04FDA:  MOVWF  x35
04FDC:  MOVLW  A0
04FDE:  MOVWF  x34
04FE0:  CLRF   x37
04FE2:  MOVLW  40
04FE4:  MOVWF  x36
04FE6:  MOVLB  0
04FE8:  CALL   3022
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
04FEC:  MOVLW  40
04FEE:  MOVLB  3
04FF0:  ADDWF  x64,F
04FF2:  MOVLW  00
04FF4:  ADDWFC x65,F
04FF6:  MOVLW  00
04FF8:  ADDWFC x66,F
04FFA:  MOVLW  00
04FFC:  ADDWFC x67,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
04FFE:  MOVLW  40
05000:  ADDWF  x69,F
05002:  MOVLW  00
05004:  ADDWFC x6A,F
05006:  MOVLW  00
05008:  ADDWFC x6B,F
0500A:  MOVLW  00
0500C:  ADDWFC x6C,F
....................             packetdata_index = 0; // Reset packet byte counter
0500E:  MOVLB  7
05010:  CLRF   xE0
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
05012:  MOVLW  07
05014:  MOVWF  FEA
05016:  MOVLW  A0
05018:  MOVWF  FE9
0501A:  CLRF   00
0501C:  CLRF   02
0501E:  MOVLW  40
05020:  MOVWF  01
05022:  MOVLB  0
05024:  CALL   40AA
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
05028:  MOVLB  7
0502A:  INCF   xE1,F
0502C:  BTFSC  FD8.2
0502E:  INCF   xE2,F
05030:  MOVLB  0
05032:  GOTO   4DF2
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
05036:  MOVLB  7
05038:  MOVF   xE0,W
0503A:  SUBLW  3E
0503C:  BTFSC  FD8.0
0503E:  BRA    5046
05040:  MOVLB  0
05042:  GOTO   50FA
05046:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
05048:  MOVFF  7E0,7E7
0504C:  MOVLB  7
0504E:  MOVF   xE7,W
05050:  SUBLW  3E
05052:  BTFSC  FD8.0
05054:  BRA    505C
05056:  MOVLB  0
05058:  GOTO   507C
0505C:  MOVLB  0
....................             packetdata[j] = 0x00;
0505E:  CLRF   03
05060:  MOVLB  7
05062:  MOVF   xE7,W
05064:  ADDLW  A0
05066:  MOVWF  FE9
05068:  MOVLW  07
0506A:  ADDWFC 03,W
0506C:  MOVWF  FEA
0506E:  CLRF   FEF
05070:  MOVLB  0
05072:  MOVLB  7
05074:  INCF   xE7,F
05076:  MOVLB  0
05078:  GOTO   504C
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
0507C:  MOVLB  3
0507E:  MOVF   x64,W
05080:  MOVLB  7
05082:  MOVWF  xE8
05084:  MOVLB  3
05086:  MOVF   x65,W
05088:  MOVLB  7
0508A:  MOVWF  xE9
0508C:  MOVLW  16
0508E:  MOVLB  3
05090:  ADDWF  x66,W
05092:  MOVLB  7
05094:  MOVWF  xEA
05096:  MOVLW  00
05098:  MOVLB  3
0509A:  ADDWFC x67,W
0509C:  MOVLB  7
0509E:  MOVWF  xEB
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
050A0:  MOVFF  E1,82F
050A4:  MOVFF  E0,82E
050A8:  MOVFF  DF,82D
050AC:  MOVFF  DE,82C
050B0:  MOVFF  7EB,833
050B4:  MOVFF  7EA,832
050B8:  MOVFF  7E9,831
050BC:  MOVFF  7E8,830
050C0:  MOVLW  07
050C2:  MOVLB  8
050C4:  MOVWF  x35
050C6:  MOVLW  A0
050C8:  MOVWF  x34
050CA:  CLRF   x37
050CC:  MOVLW  40
050CE:  MOVWF  x36
050D0:  MOVLB  0
050D2:  CALL   3022
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
050D6:  MOVLW  40
050D8:  MOVLB  3
050DA:  ADDWF  x64,F
050DC:  MOVLW  00
050DE:  ADDWFC x65,F
050E0:  MOVLW  00
050E2:  ADDWFC x66,F
050E4:  MOVLW  00
050E6:  ADDWFC x67,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
050E8:  MOVLW  40
050EA:  ADDWF  x69,F
050EC:  MOVLW  00
050EE:  ADDWFC x6A,F
050F0:  MOVLW  00
050F2:  ADDWFC x6B,F
050F4:  MOVLW  00
050F6:  ADDWFC x6C,F
050F8:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
050FA:  CALL   36FE
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
050FE:  MOVLW  36
05100:  MOVWF  FF6
05102:  MOVLW  0B
05104:  MOVWF  FF7
05106:  MOVLW  00
05108:  MOVWF  FF8
0510A:  CALL   1868
0510E:  GOTO   52AC (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... #include "../core/storage/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           // 同じフォルダのヘッダー
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../system/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
.................... 
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
....................     // #define MIS_FM_STREAM FLASH_STREAM PIN_E1
....................     #use spi (MASTER, CLK=PIN_D7, DI=PIN_E4, DO=PIN_E1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
....................     //#use spi (MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/device/mt25q.h"                // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
02214:  MOVLW  AA
02216:  MOVWF  FF6
02218:  MOVLW  0B
0221A:  MOVWF  FF7
0221C:  MOVLW  00
0221E:  MOVWF  FF8
02220:  CALL   1868
.................... 
....................     output_high(MIS_FM_CS);
02224:  BCF    F92.5
02226:  BSF    F89.5
....................     output_high(SMF_CS);
02228:  BCF    F92.2
0222A:  BSF    F89.2
....................     delay_ms(100); 
0222C:  MOVLW  64
0222E:  MOVLB  8
02230:  MOVWF  x44
02232:  MOVLB  0
02234:  CALL   17E8
.................... 
....................     READ_ID_DATA read_id_data;
....................     int8 flash_cmd = CMD_READ_ID;
02238:  MOVLW  9F
0223A:  MOVLB  3
0223C:  MOVWF  xE3
....................     output_low(mis_fm.cs_pin);
0223E:  MOVFF  E0,84A
02242:  MOVLB  8
02244:  CLRF   x4B
02246:  MOVLW  0F
02248:  MOVWF  x4D
0224A:  MOVLW  89
0224C:  MOVWF  x4C
0224E:  MOVLB  0
02250:  CALL   1BB6
02254:  MOVFF  E0,84A
02258:  MOVLB  8
0225A:  CLRF   x4B
0225C:  MOVLW  0F
0225E:  MOVWF  x4D
02260:  MOVLW  92
02262:  MOVWF  x4C
02264:  MOVLB  0
02266:  CALL   1BB6
....................     spi_xfer_and_read_select_stream(mis_fm, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
0226A:  MOVFF  E1,84D
0226E:  MOVFF  E0,84C
02272:  MOVFF  DF,84B
02276:  MOVFF  DE,84A
0227A:  MOVLW  03
0227C:  MOVLB  8
0227E:  MOVWF  x4F
02280:  MOVLW  E3
02282:  MOVWF  x4E
02284:  CLRF   x51
02286:  MOVLW  01
02288:  MOVWF  x50
0228A:  MOVLW  03
0228C:  MOVWF  x53
0228E:  MOVLW  CF
02290:  MOVWF  x52
02292:  CLRF   x57
02294:  CLRF   x56
02296:  CLRF   x55
02298:  MOVLW  14
0229A:  MOVWF  x54
0229C:  MOVLB  0
0229E:  CALL   1D02
....................     output_high(mis_fm.cs_pin);
022A2:  MOVFF  E0,84A
022A6:  MOVLW  01
022A8:  MOVLB  8
022AA:  MOVWF  x4B
022AC:  MOVLW  0F
022AE:  MOVWF  x4D
022B0:  MOVLW  89
022B2:  MOVWF  x4C
022B4:  MOVLB  0
022B6:  CALL   1BB6
022BA:  MOVFF  E0,84A
022BE:  MOVLB  8
022C0:  CLRF   x4B
022C2:  MOVLW  0F
022C4:  MOVWF  x4D
022C6:  MOVLW  92
022C8:  MOVWF  x4C
022CA:  MOVLB  0
022CC:  CALL   1BB6
....................     fprintf(PC, "\t[MIS FM] Flash ID: ");
022D0:  MOVLW  C6
022D2:  MOVWF  FF6
022D4:  MOVLW  0B
022D6:  MOVWF  FF7
022D8:  MOVLW  00
022DA:  MOVWF  FF8
022DC:  CALL   1868
....................     for (unsigned int8 index = 0; index < READ_ID_DATASIZE; index++)
022E0:  MOVLB  3
022E2:  CLRF   xE4
022E4:  MOVLB  0
022E6:  MOVLB  3
022E8:  MOVF   xE4,W
022EA:  SUBLW  13
022EC:  BTFSC  FD8.0
022EE:  BRA    22F6
022F0:  MOVLB  0
022F2:  GOTO   2332
022F6:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
022F8:  CLRF   03
022FA:  MOVLB  3
022FC:  MOVF   xE4,W
022FE:  ADDLW  CF
02300:  MOVWF  FE9
02302:  MOVLW  03
02304:  ADDWFC 03,W
02306:  MOVWF  FEA
02308:  MOVFF  FEF,426
0230C:  MOVFF  426,427
02310:  MOVLW  37
02312:  MOVLB  4
02314:  MOVWF  x28
02316:  MOVLB  0
02318:  CALL   1A5A
0231C:  MOVLW  20
0231E:  MOVLB  8
02320:  MOVWF  x2F
02322:  MOVLB  0
02324:  CALL   1816
02328:  MOVLB  3
0232A:  INCF   xE4,F
0232C:  MOVLB  0
0232E:  GOTO   22E6
....................     }
....................     fprintf(PC,"\r\n");
02332:  MOVLW  0D
02334:  MOVLB  8
02336:  MOVWF  x2F
02338:  MOVLB  0
0233A:  CALL   1816
0233E:  MOVLW  0A
02340:  MOVLB  8
02342:  MOVWF  x2F
02344:  MOVLB  0
02346:  CALL   1816
.................... 
....................     output_low(smf.cs_pin);
0234A:  MOVFF  E4,84A
0234E:  MOVLB  8
02350:  CLRF   x4B
02352:  MOVLW  0F
02354:  MOVWF  x4D
02356:  MOVLW  89
02358:  MOVWF  x4C
0235A:  MOVLB  0
0235C:  CALL   1BB6
02360:  MOVFF  E4,84A
02364:  MOVLB  8
02366:  CLRF   x4B
02368:  MOVLW  0F
0236A:  MOVWF  x4D
0236C:  MOVLW  92
0236E:  MOVWF  x4C
02370:  MOVLB  0
02372:  CALL   1BB6
....................     spi_xfer_and_read_select_stream(smf, &flash_cmd, 1, read_id_data.bytes, READ_ID_DATASIZE);
02376:  MOVFF  E5,84D
0237A:  MOVFF  E4,84C
0237E:  MOVFF  E3,84B
02382:  MOVFF  E2,84A
02386:  MOVLW  03
02388:  MOVLB  8
0238A:  MOVWF  x4F
0238C:  MOVLW  E3
0238E:  MOVWF  x4E
02390:  CLRF   x51
02392:  MOVLW  01
02394:  MOVWF  x50
02396:  MOVLW  03
02398:  MOVWF  x53
0239A:  MOVLW  CF
0239C:  MOVWF  x52
0239E:  CLRF   x57
023A0:  CLRF   x56
023A2:  CLRF   x55
023A4:  MOVLW  14
023A6:  MOVWF  x54
023A8:  MOVLB  0
023AA:  CALL   1D02
....................     output_high(smf.cs_pin);
023AE:  MOVFF  E4,84A
023B2:  MOVLW  01
023B4:  MOVLB  8
023B6:  MOVWF  x4B
023B8:  MOVLW  0F
023BA:  MOVWF  x4D
023BC:  MOVLW  89
023BE:  MOVWF  x4C
023C0:  MOVLB  0
023C2:  CALL   1BB6
023C6:  MOVFF  E4,84A
023CA:  MOVLB  8
023CC:  CLRF   x4B
023CE:  MOVLW  0F
023D0:  MOVWF  x4D
023D2:  MOVLW  92
023D4:  MOVWF  x4C
023D6:  MOVLB  0
023D8:  CALL   1BB6
....................     fprintf(PC, "\t[SMF] Flash ID: ");
023DC:  MOVLW  DC
023DE:  MOVWF  FF6
023E0:  MOVLW  0B
023E2:  MOVWF  FF7
023E4:  MOVLW  00
023E6:  MOVWF  FF8
023E8:  CALL   1868
....................     for (unsigned int8 index = 0; index < READ_ID_DATASIZE; index++)
023EC:  MOVLB  3
023EE:  CLRF   xE5
023F0:  MOVLB  0
023F2:  MOVLB  3
023F4:  MOVF   xE5,W
023F6:  SUBLW  13
023F8:  BTFSC  FD8.0
023FA:  BRA    2402
023FC:  MOVLB  0
023FE:  GOTO   243E
02402:  MOVLB  0
....................     {
....................         fprintf(PC, "%02X ", read_id_data.bytes[index]);
02404:  CLRF   03
02406:  MOVLB  3
02408:  MOVF   xE5,W
0240A:  ADDLW  CF
0240C:  MOVWF  FE9
0240E:  MOVLW  03
02410:  ADDWFC 03,W
02412:  MOVWF  FEA
02414:  MOVFF  FEF,426
02418:  MOVFF  426,427
0241C:  MOVLW  37
0241E:  MOVLB  4
02420:  MOVWF  x28
02422:  MOVLB  0
02424:  CALL   1A5A
02428:  MOVLW  20
0242A:  MOVLB  8
0242C:  MOVWF  x2F
0242E:  MOVLB  0
02430:  CALL   1816
02434:  MOVLB  3
02436:  INCF   xE5,F
02438:  MOVLB  0
0243A:  GOTO   23F2
....................     }
....................     fprintf(PC,"\r\n");
0243E:  MOVLW  0D
02440:  MOVLB  8
02442:  MOVWF  x2F
02444:  MOVLB  0
02446:  CALL   1816
0244A:  MOVLW  0A
0244C:  MOVLB  8
0244E:  MOVWF  x2F
02450:  MOVLB  0
02452:  CALL   1816
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
....................     if (!is_connect(smf)) {
02456:  MOVFF  E5,82F
0245A:  MOVFF  E4,82E
0245E:  MOVFF  E3,82D
02462:  MOVFF  E2,82C
02466:  CALL   1F36
0246A:  MOVF   01,F
0246C:  BTFSS  FD8.2
0246E:  GOTO   2486
....................         fprintf(PC, "\t[SMF] connect error!\r\n");
02472:  MOVLW  EE
02474:  MOVWF  FF6
02476:  MOVLW  0B
02478:  MOVWF  FF7
0247A:  MOVLW  00
0247C:  MOVWF  FF8
0247E:  CALL   1868
....................         // return;
....................     }else {
02482:  GOTO   2496
....................         fprintf(PC, "\t[SMF] is connected\r\n");
02486:  MOVLW  06
02488:  MOVWF  FF6
0248A:  MOVLW  0C
0248C:  MOVWF  FF7
0248E:  MOVLW  00
02490:  MOVWF  FF8
02492:  CALL   1868
....................     }
....................     delay_ms(100); // Wait for the flash to stabilize
02496:  MOVLW  64
02498:  MOVLB  8
0249A:  MOVWF  x44
0249C:  MOVLB  0
0249E:  CALL   17E8
....................     if (!is_connect(mis_fm)) {
024A2:  MOVFF  E1,82F
024A6:  MOVFF  E0,82E
024AA:  MOVFF  DF,82D
024AE:  MOVFF  DE,82C
024B2:  CALL   1F36
024B6:  MOVF   01,F
024B8:  BTFSS  FD8.2
024BA:  GOTO   24D2
....................         fprintf(PC, "\t[MIS FM] connect error!\r\n");
024BE:  MOVLW  1C
024C0:  MOVWF  FF6
024C2:  MOVLW  0C
024C4:  MOVWF  FF7
024C6:  MOVLW  00
024C8:  MOVWF  FF8
024CA:  CALL   1868
....................     }else {
024CE:  GOTO   24E2
....................         fprintf(PC, "\t[MIS FM] is connected\r\n");
024D2:  MOVLW  38
024D4:  MOVWF  FF6
024D6:  MOVLW  0C
024D8:  MOVWF  FF7
024DA:  MOVLW  00
024DC:  MOVWF  FF8
024DE:  CALL   1868
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
024E2:  MOVFF  E1,429
024E6:  MOVFF  E0,428
024EA:  MOVFF  DF,427
024EE:  MOVFF  DE,426
024F2:  MOVLB  4
024F4:  CLRF   x2D
024F6:  CLRF   x2C
024F8:  CLRF   x2B
024FA:  CLRF   x2A
024FC:  MOVLW  03
024FE:  MOVWF  x2F
02500:  MOVLW  E6
02502:  MOVWF  x2E
02504:  CLRF   x33
02506:  CLRF   x32
02508:  CLRF   x31
0250A:  MOVLW  40
0250C:  MOVWF  x30
0250E:  MOVLB  0
02510:  CALL   1FFC
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
02514:  MOVLB  4
02516:  CLRF   x29
02518:  CLRF   x28
0251A:  CLRF   x27
0251C:  MOVFF  3E6,426
02520:  MOVFF  426,429
02524:  CLRF   x26
02526:  CLRF   x27
02528:  CLRF   x28
0252A:  CLRF   x2E
0252C:  CLRF   x2D
0252E:  CLRF   x2C
02530:  MOVFF  3E7,42B
02534:  MOVFF  42C,03
02538:  MOVFF  42B,02
0253C:  CLRF   00
0253E:  CLRF   01
02540:  MOVF   00,W
02542:  IORWF  x26,F
02544:  MOVF   01,W
02546:  IORWF  x27,F
02548:  MOVF   02,W
0254A:  IORWF  x28,F
0254C:  MOVF   03,W
0254E:  IORWF  x29,F
02550:  CLRF   x2E
02552:  CLRF   x2D
02554:  CLRF   x2C
02556:  MOVFF  3E8,42B
0255A:  MOVFF  42D,03
0255E:  MOVFF  42C,02
02562:  MOVFF  42B,01
02566:  CLRF   00
02568:  MOVF   00,W
0256A:  IORWF  x26,F
0256C:  MOVF   01,W
0256E:  IORWF  x27,F
02570:  MOVF   02,W
02572:  IORWF  x28,F
02574:  MOVF   03,W
02576:  IORWF  x29,F
02578:  MOVFF  3E9,00
0257C:  CLRF   01
0257E:  CLRF   02
02580:  CLRF   03
02582:  MOVF   00,W
02584:  IORWF  x26,W
02586:  MOVLB  3
02588:  MOVWF  x50
0258A:  MOVF   01,W
0258C:  MOVLB  4
0258E:  IORWF  x27,W
02590:  MOVLB  3
02592:  MOVWF  x51
02594:  MOVF   02,W
02596:  MOVLB  4
02598:  IORWF  x28,W
0259A:  MOVLB  3
0259C:  MOVWF  x52
0259E:  MOVF   03,W
025A0:  MOVLB  4
025A2:  IORWF  x29,W
025A4:  MOVLB  3
025A6:  MOVWF  x53
....................     smf_piclog_loop_counter = readdata[4];
025A8:  MOVFF  3EA,354
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
025AC:  MOVLB  4
025AE:  CLRF   x29
025B0:  CLRF   x28
025B2:  CLRF   x27
025B4:  MOVFF  3EB,426
025B8:  MOVFF  426,429
025BC:  CLRF   x26
025BE:  CLRF   x27
025C0:  CLRF   x28
025C2:  CLRF   x2E
025C4:  CLRF   x2D
025C6:  CLRF   x2C
025C8:  MOVFF  3EC,42B
025CC:  MOVFF  42C,03
025D0:  MOVFF  42B,02
025D4:  CLRF   00
025D6:  CLRF   01
025D8:  MOVF   00,W
025DA:  IORWF  x26,F
025DC:  MOVF   01,W
025DE:  IORWF  x27,F
025E0:  MOVF   02,W
025E2:  IORWF  x28,F
025E4:  MOVF   03,W
025E6:  IORWF  x29,F
025E8:  CLRF   x2E
025EA:  CLRF   x2D
025EC:  CLRF   x2C
025EE:  MOVFF  3ED,42B
025F2:  MOVFF  42D,03
025F6:  MOVFF  42C,02
025FA:  MOVFF  42B,01
025FE:  CLRF   00
02600:  MOVF   00,W
02602:  IORWF  x26,F
02604:  MOVF   01,W
02606:  IORWF  x27,F
02608:  MOVF   02,W
0260A:  IORWF  x28,F
0260C:  MOVF   03,W
0260E:  IORWF  x29,F
02610:  MOVFF  3EE,00
02614:  CLRF   01
02616:  CLRF   02
02618:  CLRF   03
0261A:  MOVF   00,W
0261C:  IORWF  x26,W
0261E:  MOVLB  3
02620:  MOVWF  x55
02622:  MOVF   01,W
02624:  MOVLB  4
02626:  IORWF  x27,W
02628:  MOVLB  3
0262A:  MOVWF  x56
0262C:  MOVF   02,W
0262E:  MOVLB  4
02630:  IORWF  x28,W
02632:  MOVLB  3
02634:  MOVWF  x57
02636:  MOVF   03,W
02638:  MOVLB  4
0263A:  IORWF  x29,W
0263C:  MOVLB  3
0263E:  MOVWF  x58
....................     smf_meas_loop_counter = readdata[9];
02640:  MOVFF  3EF,359
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
02644:  MOVLB  4
02646:  CLRF   x29
02648:  CLRF   x28
0264A:  CLRF   x27
0264C:  MOVFF  3F0,426
02650:  MOVFF  426,429
02654:  CLRF   x26
02656:  CLRF   x27
02658:  CLRF   x28
0265A:  CLRF   x2E
0265C:  CLRF   x2D
0265E:  CLRF   x2C
02660:  MOVFF  3F1,42B
02664:  MOVFF  42C,03
02668:  MOVFF  42B,02
0266C:  CLRF   00
0266E:  CLRF   01
02670:  MOVF   00,W
02672:  IORWF  x26,F
02674:  MOVF   01,W
02676:  IORWF  x27,F
02678:  MOVF   02,W
0267A:  IORWF  x28,F
0267C:  MOVF   03,W
0267E:  IORWF  x29,F
02680:  CLRF   x2E
02682:  CLRF   x2D
02684:  CLRF   x2C
02686:  MOVFF  3F2,42B
0268A:  MOVFF  42D,03
0268E:  MOVFF  42C,02
02692:  MOVFF  42B,01
02696:  CLRF   00
02698:  MOVF   00,W
0269A:  IORWF  x26,F
0269C:  MOVF   01,W
0269E:  IORWF  x27,F
026A0:  MOVF   02,W
026A2:  IORWF  x28,F
026A4:  MOVF   03,W
026A6:  IORWF  x29,F
026A8:  MOVFF  3F3,00
026AC:  CLRF   01
026AE:  CLRF   02
026B0:  CLRF   03
026B2:  MOVF   00,W
026B4:  IORWF  x26,W
026B6:  MOVLB  3
026B8:  MOVWF  x5A
026BA:  MOVF   01,W
026BC:  MOVLB  4
026BE:  IORWF  x27,W
026C0:  MOVLB  3
026C2:  MOVWF  x5B
026C4:  MOVF   02,W
026C6:  MOVLB  4
026C8:  IORWF  x28,W
026CA:  MOVLB  3
026CC:  MOVWF  x5C
026CE:  MOVF   03,W
026D0:  MOVLB  4
026D2:  IORWF  x29,W
026D4:  MOVLB  3
026D6:  MOVWF  x5D
....................     misf_piclog_loop_counter = readdata[14];
026D8:  MOVFF  3F4,35E
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
026DC:  MOVLB  4
026DE:  CLRF   x29
026E0:  CLRF   x28
026E2:  CLRF   x27
026E4:  MOVFF  3F5,426
026E8:  MOVFF  426,429
026EC:  CLRF   x26
026EE:  CLRF   x27
026F0:  CLRF   x28
026F2:  CLRF   x2E
026F4:  CLRF   x2D
026F6:  CLRF   x2C
026F8:  MOVFF  3F6,42B
026FC:  MOVFF  42C,03
02700:  MOVFF  42B,02
02704:  CLRF   00
02706:  CLRF   01
02708:  MOVF   00,W
0270A:  IORWF  x26,F
0270C:  MOVF   01,W
0270E:  IORWF  x27,F
02710:  MOVF   02,W
02712:  IORWF  x28,F
02714:  MOVF   03,W
02716:  IORWF  x29,F
02718:  CLRF   x2E
0271A:  CLRF   x2D
0271C:  CLRF   x2C
0271E:  MOVFF  3F7,42B
02722:  MOVFF  42D,03
02726:  MOVFF  42C,02
0272A:  MOVFF  42B,01
0272E:  CLRF   00
02730:  MOVF   00,W
02732:  IORWF  x26,F
02734:  MOVF   01,W
02736:  IORWF  x27,F
02738:  MOVF   02,W
0273A:  IORWF  x28,F
0273C:  MOVF   03,W
0273E:  IORWF  x29,F
02740:  MOVFF  3F8,00
02744:  CLRF   01
02746:  CLRF   02
02748:  CLRF   03
0274A:  MOVF   00,W
0274C:  IORWF  x26,W
0274E:  MOVLB  3
02750:  MOVWF  x5F
02752:  MOVF   01,W
02754:  MOVLB  4
02756:  IORWF  x27,W
02758:  MOVLB  3
0275A:  MOVWF  x60
0275C:  MOVF   02,W
0275E:  MOVLB  4
02760:  IORWF  x28,W
02762:  MOVLB  3
02764:  MOVWF  x61
02766:  MOVF   03,W
02768:  MOVLB  4
0276A:  IORWF  x29,W
0276C:  MOVLB  3
0276E:  MOVWF  x62
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
02770:  MOVLB  4
02772:  CLRF   x29
02774:  CLRF   x28
02776:  CLRF   x27
02778:  MOVFF  3F9,426
0277C:  MOVFF  426,429
02780:  CLRF   x26
02782:  CLRF   x27
02784:  CLRF   x28
02786:  CLRF   x2E
02788:  CLRF   x2D
0278A:  CLRF   x2C
0278C:  MOVFF  3FA,42B
02790:  MOVFF  42C,03
02794:  MOVFF  42B,02
02798:  CLRF   00
0279A:  CLRF   01
0279C:  MOVF   00,W
0279E:  IORWF  x26,F
027A0:  MOVF   01,W
027A2:  IORWF  x27,F
027A4:  MOVF   02,W
027A6:  IORWF  x28,F
027A8:  MOVF   03,W
027AA:  IORWF  x29,F
027AC:  CLRF   x2E
027AE:  CLRF   x2D
027B0:  CLRF   x2C
027B2:  MOVFF  3FB,42B
027B6:  MOVFF  42D,03
027BA:  MOVFF  42C,02
027BE:  MOVFF  42B,01
027C2:  CLRF   00
027C4:  MOVF   00,W
027C6:  IORWF  x26,F
027C8:  MOVF   01,W
027CA:  IORWF  x27,F
027CC:  MOVF   02,W
027CE:  IORWF  x28,F
027D0:  MOVF   03,W
027D2:  IORWF  x29,F
027D4:  MOVFF  3FC,00
027D8:  CLRF   01
027DA:  CLRF   02
027DC:  CLRF   03
027DE:  MOVF   00,W
027E0:  IORWF  x26,W
027E2:  MOVLB  3
027E4:  MOVWF  x63
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
027E6:  MOVLB  4
027E8:  CLRF   x29
027EA:  CLRF   x28
027EC:  CLRF   x27
027EE:  MOVFF  3FD,426
027F2:  MOVFF  426,429
027F6:  CLRF   x26
027F8:  CLRF   x27
027FA:  CLRF   x28
027FC:  CLRF   x2E
027FE:  CLRF   x2D
02800:  CLRF   x2C
02802:  MOVFF  3FE,42B
02806:  MOVFF  42C,03
0280A:  MOVFF  42B,02
0280E:  CLRF   00
02810:  CLRF   01
02812:  MOVF   00,W
02814:  IORWF  x26,F
02816:  MOVF   01,W
02818:  IORWF  x27,F
0281A:  MOVF   02,W
0281C:  IORWF  x28,F
0281E:  MOVF   03,W
02820:  IORWF  x29,F
02822:  CLRF   x2E
02824:  CLRF   x2D
02826:  CLRF   x2C
02828:  MOVFF  3FF,42B
0282C:  MOVFF  42D,03
02830:  MOVFF  42C,02
02834:  MOVFF  42B,01
02838:  CLRF   00
0283A:  MOVF   00,W
0283C:  IORWF  x26,F
0283E:  MOVF   01,W
02840:  IORWF  x27,F
02842:  MOVF   02,W
02844:  IORWF  x28,F
02846:  MOVF   03,W
02848:  IORWF  x29,F
0284A:  MOVFF  400,00
0284E:  CLRF   01
02850:  CLRF   02
02852:  CLRF   03
02854:  MOVF   00,W
02856:  IORWF  x26,W
02858:  MOVLB  3
0285A:  MOVWF  x64
0285C:  MOVF   01,W
0285E:  MOVLB  4
02860:  IORWF  x27,W
02862:  MOVLB  3
02864:  MOVWF  x65
02866:  MOVF   02,W
02868:  MOVLB  4
0286A:  IORWF  x28,W
0286C:  MOVLB  3
0286E:  MOVWF  x66
02870:  MOVF   03,W
02872:  MOVLB  4
02874:  IORWF  x29,W
02876:  MOVLB  3
02878:  MOVWF  x67
....................     misf_meas_loop_counter = readdata[27];
0287A:  MOVFF  401,368
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
0287E:  MOVLB  4
02880:  CLRF   x29
02882:  CLRF   x28
02884:  CLRF   x27
02886:  MOVFF  402,426
0288A:  MOVFF  426,429
0288E:  CLRF   x26
02890:  CLRF   x27
02892:  CLRF   x28
02894:  CLRF   x2E
02896:  CLRF   x2D
02898:  CLRF   x2C
0289A:  MOVFF  403,42B
0289E:  MOVFF  42C,03
028A2:  MOVFF  42B,02
028A6:  CLRF   00
028A8:  CLRF   01
028AA:  MOVF   00,W
028AC:  IORWF  x26,F
028AE:  MOVF   01,W
028B0:  IORWF  x27,F
028B2:  MOVF   02,W
028B4:  IORWF  x28,F
028B6:  MOVF   03,W
028B8:  IORWF  x29,F
028BA:  CLRF   x2E
028BC:  CLRF   x2D
028BE:  CLRF   x2C
028C0:  MOVFF  404,42B
028C4:  MOVFF  42D,03
028C8:  MOVFF  42C,02
028CC:  MOVFF  42B,01
028D0:  CLRF   00
028D2:  MOVF   00,W
028D4:  IORWF  x26,F
028D6:  MOVF   01,W
028D8:  IORWF  x27,F
028DA:  MOVF   02,W
028DC:  IORWF  x28,F
028DE:  MOVF   03,W
028E0:  IORWF  x29,F
028E2:  MOVFF  405,00
028E6:  CLRF   01
028E8:  CLRF   02
028EA:  CLRF   03
028EC:  MOVF   00,W
028EE:  IORWF  x26,W
028F0:  MOVLB  3
028F2:  MOVWF  x69
028F4:  MOVF   01,W
028F6:  MOVLB  4
028F8:  IORWF  x27,W
028FA:  MOVLB  3
028FC:  MOVWF  x6A
028FE:  MOVF   02,W
02900:  MOVLB  4
02902:  IORWF  x28,W
02904:  MOVLB  3
02906:  MOVWF  x6B
02908:  MOVF   03,W
0290A:  MOVLB  4
0290C:  IORWF  x29,W
0290E:  MOVLB  3
02910:  MOVWF  x6C
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
02912:  MOVLW  52
02914:  MOVWF  FF6
02916:  MOVLW  0C
02918:  MOVWF  FF7
0291A:  MOVLW  00
0291C:  MOVWF  FF8
0291E:  MOVLW  28
02920:  MOVLB  7
02922:  MOVWF  xEC
02924:  MOVLB  0
02926:  CALL   1898
0292A:  MOVFF  353,427
0292E:  MOVLW  37
02930:  MOVLB  4
02932:  MOVWF  x28
02934:  MOVLB  0
02936:  CALL   1A5A
0293A:  MOVFF  352,427
0293E:  MOVLW  37
02940:  MOVLB  4
02942:  MOVWF  x28
02944:  MOVLB  0
02946:  CALL   1A5A
0294A:  MOVFF  351,427
0294E:  MOVLW  37
02950:  MOVLB  4
02952:  MOVWF  x28
02954:  MOVLB  0
02956:  CALL   1A5A
0295A:  MOVFF  350,427
0295E:  MOVLW  37
02960:  MOVLB  4
02962:  MOVWF  x28
02964:  MOVLB  0
02966:  CALL   1A5A
0296A:  MOVLW  0D
0296C:  MOVLB  8
0296E:  MOVWF  x2F
02970:  MOVLB  0
02972:  CALL   1816
02976:  MOVLW  0A
02978:  MOVLB  8
0297A:  MOVWF  x2F
0297C:  MOVLB  0
0297E:  CALL   1816
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
02982:  MOVLW  82
02984:  MOVWF  FF6
02986:  MOVLW  0C
02988:  MOVWF  FF7
0298A:  MOVLW  00
0298C:  MOVWF  FF8
0298E:  MOVLW  28
02990:  MOVLB  7
02992:  MOVWF  xEC
02994:  MOVLB  0
02996:  CALL   1898
0299A:  MOVFF  354,427
0299E:  MOVLW  37
029A0:  MOVLB  4
029A2:  MOVWF  x28
029A4:  MOVLB  0
029A6:  CALL   1A5A
029AA:  MOVLW  0D
029AC:  MOVLB  8
029AE:  MOVWF  x2F
029B0:  MOVLB  0
029B2:  CALL   1816
029B6:  MOVLW  0A
029B8:  MOVLB  8
029BA:  MOVWF  x2F
029BC:  MOVLB  0
029BE:  CALL   1816
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
029C2:  MOVLW  B2
029C4:  MOVWF  FF6
029C6:  MOVLW  0C
029C8:  MOVWF  FF7
029CA:  MOVLW  00
029CC:  MOVWF  FF8
029CE:  MOVLW  28
029D0:  MOVLB  7
029D2:  MOVWF  xEC
029D4:  MOVLB  0
029D6:  CALL   1898
029DA:  MOVFF  358,427
029DE:  MOVLW  37
029E0:  MOVLB  4
029E2:  MOVWF  x28
029E4:  MOVLB  0
029E6:  CALL   1A5A
029EA:  MOVFF  357,427
029EE:  MOVLW  37
029F0:  MOVLB  4
029F2:  MOVWF  x28
029F4:  MOVLB  0
029F6:  CALL   1A5A
029FA:  MOVFF  356,427
029FE:  MOVLW  37
02A00:  MOVLB  4
02A02:  MOVWF  x28
02A04:  MOVLB  0
02A06:  CALL   1A5A
02A0A:  MOVFF  355,427
02A0E:  MOVLW  37
02A10:  MOVLB  4
02A12:  MOVWF  x28
02A14:  MOVLB  0
02A16:  CALL   1A5A
02A1A:  MOVLW  0D
02A1C:  MOVLB  8
02A1E:  MOVWF  x2F
02A20:  MOVLB  0
02A22:  CALL   1816
02A26:  MOVLW  0A
02A28:  MOVLB  8
02A2A:  MOVWF  x2F
02A2C:  MOVLB  0
02A2E:  CALL   1816
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02A32:  MOVLW  E2
02A34:  MOVWF  FF6
02A36:  MOVLW  0C
02A38:  MOVWF  FF7
02A3A:  MOVLW  00
02A3C:  MOVWF  FF8
02A3E:  MOVLW  28
02A40:  MOVLB  7
02A42:  MOVWF  xEC
02A44:  MOVLB  0
02A46:  CALL   1898
02A4A:  MOVFF  359,427
02A4E:  MOVLW  37
02A50:  MOVLB  4
02A52:  MOVWF  x28
02A54:  MOVLB  0
02A56:  CALL   1A5A
02A5A:  MOVLW  0D
02A5C:  MOVLB  8
02A5E:  MOVWF  x2F
02A60:  MOVLB  0
02A62:  CALL   1816
02A66:  MOVLW  0A
02A68:  MOVLB  8
02A6A:  MOVWF  x2F
02A6C:  MOVLB  0
02A6E:  CALL   1816
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
02A72:  MOVLW  12
02A74:  MOVWF  FF6
02A76:  MOVLW  0D
02A78:  MOVWF  FF7
02A7A:  MOVLW  00
02A7C:  MOVWF  FF8
02A7E:  MOVLW  28
02A80:  MOVLB  7
02A82:  MOVWF  xEC
02A84:  MOVLB  0
02A86:  CALL   1898
02A8A:  MOVFF  35D,427
02A8E:  MOVLW  37
02A90:  MOVLB  4
02A92:  MOVWF  x28
02A94:  MOVLB  0
02A96:  CALL   1A5A
02A9A:  MOVFF  35C,427
02A9E:  MOVLW  37
02AA0:  MOVLB  4
02AA2:  MOVWF  x28
02AA4:  MOVLB  0
02AA6:  CALL   1A5A
02AAA:  MOVFF  35B,427
02AAE:  MOVLW  37
02AB0:  MOVLB  4
02AB2:  MOVWF  x28
02AB4:  MOVLB  0
02AB6:  CALL   1A5A
02ABA:  MOVFF  35A,427
02ABE:  MOVLW  37
02AC0:  MOVLB  4
02AC2:  MOVWF  x28
02AC4:  MOVLB  0
02AC6:  CALL   1A5A
02ACA:  MOVLW  0D
02ACC:  MOVLB  8
02ACE:  MOVWF  x2F
02AD0:  MOVLB  0
02AD2:  CALL   1816
02AD6:  MOVLW  0A
02AD8:  MOVLB  8
02ADA:  MOVWF  x2F
02ADC:  MOVLB  0
02ADE:  CALL   1816
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02AE2:  MOVLW  42
02AE4:  MOVWF  FF6
02AE6:  MOVLW  0D
02AE8:  MOVWF  FF7
02AEA:  MOVLW  00
02AEC:  MOVWF  FF8
02AEE:  MOVLW  28
02AF0:  MOVLB  7
02AF2:  MOVWF  xEC
02AF4:  MOVLB  0
02AF6:  CALL   1898
02AFA:  MOVFF  362,427
02AFE:  MOVLW  37
02B00:  MOVLB  4
02B02:  MOVWF  x28
02B04:  MOVLB  0
02B06:  CALL   1A5A
02B0A:  MOVFF  361,427
02B0E:  MOVLW  37
02B10:  MOVLB  4
02B12:  MOVWF  x28
02B14:  MOVLB  0
02B16:  CALL   1A5A
02B1A:  MOVFF  360,427
02B1E:  MOVLW  37
02B20:  MOVLB  4
02B22:  MOVWF  x28
02B24:  MOVLB  0
02B26:  CALL   1A5A
02B2A:  MOVFF  35F,427
02B2E:  MOVLW  37
02B30:  MOVLB  4
02B32:  MOVWF  x28
02B34:  MOVLB  0
02B36:  CALL   1A5A
02B3A:  MOVLW  0D
02B3C:  MOVLB  8
02B3E:  MOVWF  x2F
02B40:  MOVLB  0
02B42:  CALL   1816
02B46:  MOVLW  0A
02B48:  MOVLB  8
02B4A:  MOVWF  x2F
02B4C:  MOVLB  0
02B4E:  CALL   1816
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02B52:  MOVLW  72
02B54:  MOVWF  FF6
02B56:  MOVLW  0D
02B58:  MOVWF  FF7
02B5A:  MOVLW  00
02B5C:  MOVWF  FF8
02B5E:  MOVLW  28
02B60:  MOVLB  7
02B62:  MOVWF  xEC
02B64:  MOVLB  0
02B66:  CALL   1898
02B6A:  MOVFF  35E,427
02B6E:  MOVLW  37
02B70:  MOVLB  4
02B72:  MOVWF  x28
02B74:  MOVLB  0
02B76:  CALL   1A5A
02B7A:  MOVLW  0D
02B7C:  MOVLB  8
02B7E:  MOVWF  x2F
02B80:  MOVLB  0
02B82:  CALL   1816
02B86:  MOVLW  0A
02B88:  MOVLB  8
02B8A:  MOVWF  x2F
02B8C:  MOVLB  0
02B8E:  CALL   1816
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02B92:  MOVLW  A2
02B94:  MOVWF  FF6
02B96:  MOVLW  0D
02B98:  MOVWF  FF7
02B9A:  MOVLW  00
02B9C:  MOVWF  FF8
02B9E:  MOVLW  28
02BA0:  MOVLB  7
02BA2:  MOVWF  xEC
02BA4:  MOVLB  0
02BA6:  CALL   1898
02BAA:  MOVFF  363,427
02BAE:  MOVLW  37
02BB0:  MOVLB  4
02BB2:  MOVWF  x28
02BB4:  MOVLB  0
02BB6:  CALL   1A5A
02BBA:  MOVLW  0D
02BBC:  MOVLB  8
02BBE:  MOVWF  x2F
02BC0:  MOVLB  0
02BC2:  CALL   1816
02BC6:  MOVLW  0A
02BC8:  MOVLB  8
02BCA:  MOVWF  x2F
02BCC:  MOVLB  0
02BCE:  CALL   1816
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02BD2:  MOVLW  D2
02BD4:  MOVWF  FF6
02BD6:  MOVLW  0D
02BD8:  MOVWF  FF7
02BDA:  MOVLW  00
02BDC:  MOVWF  FF8
02BDE:  MOVLW  28
02BE0:  MOVLB  7
02BE2:  MOVWF  xEC
02BE4:  MOVLB  0
02BE6:  CALL   1898
02BEA:  MOVFF  367,427
02BEE:  MOVLW  37
02BF0:  MOVLB  4
02BF2:  MOVWF  x28
02BF4:  MOVLB  0
02BF6:  CALL   1A5A
02BFA:  MOVFF  366,427
02BFE:  MOVLW  37
02C00:  MOVLB  4
02C02:  MOVWF  x28
02C04:  MOVLB  0
02C06:  CALL   1A5A
02C0A:  MOVFF  365,427
02C0E:  MOVLW  37
02C10:  MOVLB  4
02C12:  MOVWF  x28
02C14:  MOVLB  0
02C16:  CALL   1A5A
02C1A:  MOVFF  364,427
02C1E:  MOVLW  37
02C20:  MOVLB  4
02C22:  MOVWF  x28
02C24:  MOVLB  0
02C26:  CALL   1A5A
02C2A:  MOVLW  0D
02C2C:  MOVLB  8
02C2E:  MOVWF  x2F
02C30:  MOVLB  0
02C32:  CALL   1816
02C36:  MOVLW  0A
02C38:  MOVLB  8
02C3A:  MOVWF  x2F
02C3C:  MOVLB  0
02C3E:  CALL   1816
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02C42:  MOVLW  02
02C44:  MOVWF  FF6
02C46:  MOVLW  0E
02C48:  MOVWF  FF7
02C4A:  MOVLW  00
02C4C:  MOVWF  FF8
02C4E:  MOVLW  28
02C50:  MOVLB  7
02C52:  MOVWF  xEC
02C54:  MOVLB  0
02C56:  CALL   1898
02C5A:  MOVFF  36C,427
02C5E:  MOVLW  37
02C60:  MOVLB  4
02C62:  MOVWF  x28
02C64:  MOVLB  0
02C66:  CALL   1A5A
02C6A:  MOVFF  36B,427
02C6E:  MOVLW  37
02C70:  MOVLB  4
02C72:  MOVWF  x28
02C74:  MOVLB  0
02C76:  CALL   1A5A
02C7A:  MOVFF  36A,427
02C7E:  MOVLW  37
02C80:  MOVLB  4
02C82:  MOVWF  x28
02C84:  MOVLB  0
02C86:  CALL   1A5A
02C8A:  MOVFF  369,427
02C8E:  MOVLW  37
02C90:  MOVLB  4
02C92:  MOVWF  x28
02C94:  MOVLB  0
02C96:  CALL   1A5A
02C9A:  MOVLW  0D
02C9C:  MOVLB  8
02C9E:  MOVWF  x2F
02CA0:  MOVLB  0
02CA2:  CALL   1816
02CA6:  MOVLW  0A
02CA8:  MOVLB  8
02CAA:  MOVWF  x2F
02CAC:  MOVLB  0
02CAE:  CALL   1816
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
02CB2:  MOVLW  32
02CB4:  MOVWF  FF6
02CB6:  MOVLW  0E
02CB8:  MOVWF  FF7
02CBA:  MOVLW  00
02CBC:  MOVWF  FF8
02CBE:  MOVLW  28
02CC0:  MOVLB  7
02CC2:  MOVWF  xEC
02CC4:  MOVLB  0
02CC6:  CALL   1898
02CCA:  MOVFF  368,427
02CCE:  MOVLW  37
02CD0:  MOVLB  4
02CD2:  MOVWF  x28
02CD4:  MOVLB  0
02CD6:  CALL   1A5A
02CDA:  MOVLW  0D
02CDC:  MOVLB  8
02CDE:  MOVWF  x2F
02CE0:  MOVLB  0
02CE2:  CALL   1816
02CE6:  MOVLW  0A
02CE8:  MOVLB  8
02CEA:  MOVWF  x2F
02CEC:  MOVLB  0
02CEE:  CALL   1816
....................     fprintf(PC, "\tComplete\r\n");
02CF2:  MOVLW  62
02CF4:  MOVWF  FF6
02CF6:  MOVLW  0E
02CF8:  MOVWF  FF7
02CFA:  MOVLW  00
02CFC:  MOVWF  FF8
02CFE:  CALL   1868
02D02:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
*
06E3E:  GOTO   6FC4 (RETURN)
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     if (!is_connect(mis_fm)) {
*
036FE:  MOVFF  E1,82F
03702:  MOVFF  E0,82E
03706:  MOVFF  DF,82D
0370A:  MOVFF  DE,82C
0370E:  CALL   1F36
03712:  MOVF   01,F
03714:  BTFSS  FD8.2
03716:  GOTO   372E
....................         fprintf(PC, "Mission Flash is not connected\r\n");
0371A:  MOVLW  6E
0371C:  MOVWF  FF6
0371E:  MOVLW  0E
03720:  MOVWF  FF7
03722:  MOVLW  00
03724:  MOVWF  FF8
03726:  CALL   1868
....................         return;
0372A:  GOTO   39E2
....................     }
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
0372E:  MOVLB  7
03730:  CLRF   xEC
03732:  CLRF   xED
03734:  CLRF   xEE
03736:  CLRF   xEF
03738:  CLRF   xF0
0373A:  CLRF   xF1
0373C:  CLRF   xF2
0373E:  CLRF   xF3
03740:  CLRF   xF4
03742:  CLRF   xF5
03744:  CLRF   xF6
03746:  CLRF   xF7
03748:  CLRF   xF8
0374A:  CLRF   xF9
0374C:  CLRF   xFA
0374E:  CLRF   xFB
03750:  CLRF   xFC
03752:  CLRF   xFD
03754:  CLRF   xFE
03756:  CLRF   xFF
03758:  MOVLB  8
0375A:  CLRF   x00
0375C:  CLRF   x01
0375E:  CLRF   x02
03760:  CLRF   x03
03762:  CLRF   x04
03764:  CLRF   x05
03766:  CLRF   x06
03768:  CLRF   x07
0376A:  CLRF   x08
0376C:  CLRF   x09
0376E:  CLRF   x0A
03770:  CLRF   x0B
03772:  CLRF   x0C
03774:  CLRF   x0D
03776:  CLRF   x0E
03778:  CLRF   x0F
0377A:  CLRF   x10
0377C:  CLRF   x11
0377E:  CLRF   x12
03780:  CLRF   x13
03782:  CLRF   x14
03784:  CLRF   x15
03786:  CLRF   x16
03788:  CLRF   x17
0378A:  CLRF   x18
0378C:  CLRF   x19
0378E:  CLRF   x1A
03790:  CLRF   x1B
03792:  CLRF   x1C
03794:  CLRF   x1D
03796:  CLRF   x1E
03798:  CLRF   x1F
0379A:  CLRF   x20
0379C:  CLRF   x21
0379E:  CLRF   x22
037A0:  CLRF   x23
037A2:  CLRF   x24
037A4:  CLRF   x25
037A6:  CLRF   x26
037A8:  CLRF   x27
037AA:  CLRF   x28
037AC:  CLRF   x29
037AE:  CLRF   x2A
037B0:  CLRF   x2B
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
037B2:  MOVFF  353,82D
037B6:  CLRF   x2E
037B8:  CLRF   x2F
037BA:  CLRF   x30
037BC:  MOVF   x2D,W
037BE:  MOVLB  7
037C0:  MOVWF  xEC
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
037C2:  MOVFF  352,82D
037C6:  MOVFF  353,82E
037CA:  MOVLB  8
037CC:  CLRF   x2F
037CE:  CLRF   x30
037D0:  MOVF   x2D,W
037D2:  MOVLB  7
037D4:  MOVWF  xED
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
037D6:  MOVFF  351,82D
037DA:  MOVFF  352,82E
037DE:  MOVFF  353,82F
037E2:  MOVLB  8
037E4:  CLRF   x30
037E6:  MOVF   x2D,W
037E8:  MOVLB  7
037EA:  MOVWF  xEE
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
037EC:  MOVLB  3
037EE:  MOVF   x50,W
037F0:  MOVLB  7
037F2:  MOVWF  xEF
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
037F4:  MOVFF  354,7F0
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
037F8:  MOVFF  358,82D
037FC:  MOVLB  8
037FE:  CLRF   x2E
03800:  CLRF   x2F
03802:  CLRF   x30
03804:  MOVF   x2D,W
03806:  MOVLB  7
03808:  MOVWF  xF1
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
0380A:  MOVFF  357,82D
0380E:  MOVFF  358,82E
03812:  MOVLB  8
03814:  CLRF   x2F
03816:  CLRF   x30
03818:  MOVF   x2D,W
0381A:  MOVLB  7
0381C:  MOVWF  xF2
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
0381E:  MOVFF  356,82D
03822:  MOVFF  357,82E
03826:  MOVFF  358,82F
0382A:  MOVLB  8
0382C:  CLRF   x30
0382E:  MOVF   x2D,W
03830:  MOVLB  7
03832:  MOVWF  xF3
....................     writedata[8] = smf_meas_use_counter & 0xFF;
03834:  MOVLB  3
03836:  MOVF   x55,W
03838:  MOVLB  7
0383A:  MOVWF  xF4
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
0383C:  MOVFF  359,7F5
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
03840:  MOVFF  35D,82D
03844:  MOVLB  8
03846:  CLRF   x2E
03848:  CLRF   x2F
0384A:  CLRF   x30
0384C:  MOVF   x2D,W
0384E:  MOVLB  7
03850:  MOVWF  xF6
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
03852:  MOVFF  35C,82D
03856:  MOVFF  35D,82E
0385A:  MOVLB  8
0385C:  CLRF   x2F
0385E:  CLRF   x30
03860:  MOVF   x2D,W
03862:  MOVLB  7
03864:  MOVWF  xF7
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03866:  MOVFF  35B,82D
0386A:  MOVFF  35C,82E
0386E:  MOVFF  35D,82F
03872:  MOVLB  8
03874:  CLRF   x30
03876:  MOVF   x2D,W
03878:  MOVLB  7
0387A:  MOVWF  xF8
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
0387C:  MOVLB  3
0387E:  MOVF   x5A,W
03880:  MOVLB  7
03882:  MOVWF  xF9
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
03884:  MOVFF  35E,7FA
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
03888:  MOVFF  362,82D
0388C:  MOVLB  8
0388E:  CLRF   x2E
03890:  CLRF   x2F
03892:  CLRF   x30
03894:  MOVF   x2D,W
03896:  MOVLB  7
03898:  MOVWF  xFB
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
0389A:  MOVFF  361,82D
0389E:  MOVFF  362,82E
038A2:  MOVLB  8
038A4:  CLRF   x2F
038A6:  CLRF   x30
038A8:  MOVF   x2D,W
038AA:  MOVLB  7
038AC:  MOVWF  xFC
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
038AE:  MOVFF  360,82D
038B2:  MOVFF  361,82E
038B6:  MOVFF  362,82F
038BA:  MOVLB  8
038BC:  CLRF   x30
038BE:  MOVF   x2D,W
038C0:  MOVLB  7
038C2:  MOVWF  xFD
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
038C4:  MOVLB  3
038C6:  MOVF   x5F,W
038C8:  MOVLB  7
038CA:  MOVWF  xFE
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
038CC:  MOVLW  00
038CE:  MOVWF  xFF
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
038D0:  MOVLW  00
038D2:  MOVLB  8
038D4:  MOVWF  x00
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
038D6:  MOVLW  00
038D8:  MOVWF  x01
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
038DA:  MOVLB  3
038DC:  MOVF   x63,W
038DE:  MOVLB  8
038E0:  MOVWF  x02
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
038E2:  MOVFF  367,82D
038E6:  CLRF   x2E
038E8:  CLRF   x2F
038EA:  CLRF   x30
038EC:  MOVF   x2D,W
038EE:  MOVWF  x03
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
038F0:  MOVFF  366,82D
038F4:  MOVFF  367,82E
038F8:  CLRF   x2F
038FA:  CLRF   x30
038FC:  MOVF   x2D,W
038FE:  MOVWF  x04
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
03900:  MOVFF  365,82D
03904:  MOVFF  366,82E
03908:  MOVFF  367,82F
0390C:  CLRF   x30
0390E:  MOVF   x2D,W
03910:  MOVWF  x05
....................     writedata[26] = misf_meas_use_counter & 0xFF;
03912:  MOVLB  3
03914:  MOVF   x64,W
03916:  MOVLB  8
03918:  MOVWF  x06
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
0391A:  MOVFF  368,807
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
0391E:  MOVFF  36C,82D
03922:  CLRF   x2E
03924:  CLRF   x2F
03926:  CLRF   x30
03928:  MOVF   x2D,W
0392A:  MOVWF  x08
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
0392C:  MOVFF  36B,82D
03930:  MOVFF  36C,82E
03934:  CLRF   x2F
03936:  CLRF   x30
03938:  MOVF   x2D,W
0393A:  MOVWF  x09
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
0393C:  MOVFF  36A,82D
03940:  MOVFF  36B,82E
03944:  MOVFF  36C,82F
03948:  CLRF   x30
0394A:  MOVF   x2D,W
0394C:  MOVWF  x0A
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
0394E:  MOVLB  3
03950:  MOVF   x69,W
03952:  MOVLB  8
03954:  MOVWF  x0B
.................... 
....................     if (!is_connect(mis_fm)) {
03956:  MOVFF  E1,82F
0395A:  MOVFF  E0,82E
0395E:  MOVFF  DF,82D
03962:  MOVFF  DE,82C
03966:  MOVLB  0
03968:  CALL   1F36
0396C:  MOVF   01,F
0396E:  BTFSS  FD8.2
03970:  GOTO   3984
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03974:  MOVLW  90
03976:  MOVWF  FF6
03978:  MOVLW  0E
0397A:  MOVWF  FF7
0397C:  MOVLW  00
0397E:  MOVWF  FF8
03980:  CALL   1868
....................         // return;
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
03984:  MOVFF  E1,82F
03988:  MOVFF  E0,82E
0398C:  MOVFF  DF,82D
03990:  MOVFF  DE,82C
03994:  MOVLB  8
03996:  CLRF   x33
03998:  CLRF   x32
0399A:  CLRF   x31
0399C:  CLRF   x30
0399E:  MOVLB  0
039A0:  CALL   33A6
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
039A4:  MOVFF  E1,82F
039A8:  MOVFF  E0,82E
039AC:  MOVFF  DF,82D
039B0:  MOVFF  DE,82C
039B4:  MOVLB  8
039B6:  CLRF   x33
039B8:  CLRF   x32
039BA:  CLRF   x31
039BC:  CLRF   x30
039BE:  MOVLW  07
039C0:  MOVWF  x35
039C2:  MOVLW  EC
039C4:  MOVWF  x34
039C6:  CLRF   x37
039C8:  MOVLW  40
039CA:  MOVWF  x36
039CC:  MOVLB  0
039CE:  CALL   3022
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
039D2:  MOVLW  B2
039D4:  MOVWF  FF6
039D6:  MOVLW  0E
039D8:  MOVWF  FF7
039DA:  MOVLW  00
039DC:  MOVWF  FF8
039DE:  CALL   1868
039E2:  RETURN 0
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "../core/logging/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../hardware/mcu/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../storage/mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
039E4:  CALL   2D04
039E8:  MOVFF  03,49D
039EC:  MOVFF  02,49C
039F0:  MOVFF  01,49B
039F4:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
039F8:  MOVFF  49D,4A3
039FC:  MOVLB  4
039FE:  CLRF   xA4
03A00:  CLRF   xA5
03A02:  CLRF   xA6
03A04:  MOVF   xA3,W
03A06:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
03A08:  MOVFF  49C,4A3
03A0C:  MOVFF  49D,4A4
03A10:  CLRF   xA5
03A12:  CLRF   xA6
03A14:  MOVF   xA3,W
03A16:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03A18:  MOVFF  49B,4A3
03A1C:  MOVFF  49C,4A4
03A20:  MOVFF  49D,4A5
03A24:  CLRF   xA6
03A26:  MOVF   xA3,W
03A28:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
03A2A:  MOVF   x9A,W
03A2C:  MOVWF  x97
....................     piclog[4] = function;            // Function code
03A2E:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
03A32:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
....................             fprintf(PC, "%02X ", piclog[i]);
....................         }
....................         fprintf(PC, "\r\n");
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03A36:  MOVLB  3
03A38:  MOVF   x5A,W
03A3A:  MOVLB  4
03A3C:  MOVWF  x9E
03A3E:  MOVLB  3
03A40:  MOVF   x5B,W
03A42:  MOVLB  4
03A44:  MOVWF  x9F
03A46:  MOVLW  02
03A48:  MOVLB  3
03A4A:  ADDWF  x5C,W
03A4C:  MOVLB  4
03A4E:  MOVWF  xA0
03A50:  MOVLW  00
03A52:  MOVLB  3
03A54:  ADDWFC x5D,W
03A56:  MOVLB  4
03A58:  MOVWF  xA1
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03A5A:  MOVFF  E1,82F
03A5E:  MOVFF  E0,82E
03A62:  MOVFF  DF,82D
03A66:  MOVFF  DE,82C
03A6A:  MOVLB  0
03A6C:  CALL   1F36
03A70:  MOVF   01,F
03A72:  BTFSS  FD8.2
03A74:  GOTO   3A88
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03A78:  MOVLW  D6
03A7A:  MOVWF  FF6
03A7C:  MOVLW  0E
03A7E:  MOVWF  FF7
03A80:  MOVLW  00
03A82:  MOVWF  FF8
03A84:  CALL   1868
....................         // return;
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03A88:  MOVFF  E1,82F
03A8C:  MOVFF  E0,82E
03A90:  MOVFF  DF,82D
03A94:  MOVFF  DE,82C
03A98:  MOVFF  4A1,833
03A9C:  MOVFF  4A0,832
03AA0:  MOVFF  49F,831
03AA4:  MOVFF  49E,830
03AA8:  MOVLW  04
03AAA:  MOVLB  8
03AAC:  MOVWF  x35
03AAE:  MOVLW  94
03AB0:  MOVWF  x34
03AB2:  CLRF   x37
03AB4:  MOVLW  06
03AB6:  MOVWF  x36
03AB8:  MOVLB  0
03ABA:  CALL   3022
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03ABE:  MOVLW  06
03AC0:  MOVLB  3
03AC2:  ADDWF  x5A,F
03AC4:  MOVLW  00
03AC6:  ADDWFC x5B,F
03AC8:  MOVLW  00
03ACA:  ADDWFC x5C,F
03ACC:  MOVLW  00
03ACE:  ADDWFC x5D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
03AD0:  MOVLW  06
03AD2:  ADDWF  x5F,F
03AD4:  MOVLW  00
03AD6:  ADDWFC x60,F
03AD8:  MOVLW  00
03ADA:  ADDWFC x61,F
03ADC:  MOVLW  00
03ADE:  ADDWFC x62,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
03AE0:  MOVLW  06
03AE2:  ADDWF  x63,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03AE4:  MOVLW  06
03AE6:  ADDWF  x63,W
03AE8:  SUBLW  3F
03AEA:  BTFSS  FD8.0
03AEC:  BRA    3AF4
03AEE:  MOVLB  0
03AF0:  GOTO   3B56
03AF4:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03AF6:  MOVLB  3
03AF8:  MOVF   x5A,W
03AFA:  MOVLB  4
03AFC:  MOVWF  x9E
03AFE:  MOVLB  3
03B00:  MOVF   x5B,W
03B02:  MOVLB  4
03B04:  MOVWF  x9F
03B06:  MOVLW  02
03B08:  MOVLB  3
03B0A:  ADDWF  x5C,W
03B0C:  MOVLB  4
03B0E:  MOVWF  xA0
03B10:  MOVLW  00
03B12:  MOVLB  3
03B14:  ADDWFC x5D,W
03B16:  MOVLB  4
03B18:  MOVWF  xA1
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03B1A:  MOVFF  E1,82F
03B1E:  MOVFF  E0,82E
03B22:  MOVFF  DF,82D
03B26:  MOVFF  DE,82C
03B2A:  MOVFF  4A1,833
03B2E:  MOVFF  4A0,832
03B32:  MOVFF  49F,831
03B36:  MOVFF  49E,830
03B3A:  MOVLW  03
03B3C:  MOVLB  8
03B3E:  MOVWF  x35
03B40:  MOVLW  6E
03B42:  MOVWF  x34
03B44:  CLRF   x37
03B46:  MOVLW  06
03B48:  MOVWF  x36
03B4A:  MOVLB  0
03B4C:  CALL   3022
....................         misf_piclog_write_counter = 0;
03B50:  MOVLB  3
03B52:  CLRF   x63
03B54:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03B56:  CALL   36FE
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
03B5A:  RETURN 0
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
.................... }
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "../application/mission/mmj_cigs_excute_mission.c"
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
06FF6:  MOVLB  3
06FF8:  MOVF   x88,W
06FFA:  MOVWF  FE9
06FFC:  MOVF   x89,W
06FFE:  MOVWF  FEA
07000:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
07004:  MOVLW  F8
07006:  MOVWF  FF6
07008:  MOVLW  0E
0700A:  MOVWF  FF7
0700C:  MOVLW  00
0700E:  MOVWF  FF8
07010:  MOVLB  0
07012:  CALL   1868
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
07016:  MOVLW  3E
07018:  MOVWF  FF6
0701A:  MOVLW  0F
0701C:  MOVWF  FF7
0701E:  MOVLW  00
07020:  MOVWF  FF8
07022:  MOVLW  0C
07024:  MOVLB  7
07026:  MOVWF  xEC
07028:  MOVLB  0
0702A:  CALL   1898
0702E:  MOVFF  38A,427
07032:  MOVLW  37
07034:  MOVLB  4
07036:  MOVWF  x28
07038:  MOVLB  0
0703A:  CALL   1A5A
0703E:  MOVLW  4C
07040:  MOVWF  FF6
07042:  MOVLW  0F
07044:  MOVWF  FF7
07046:  MOVLW  00
07048:  MOVWF  FF8
0704A:  MOVLW  04
0704C:  MOVLB  7
0704E:  MOVWF  xEC
07050:  MOVLB  0
07052:  CALL   1898
....................    switch(command_id)
07056:  MOVLB  3
07058:  MOVF   x8A,W
0705A:  XORLW  10
0705C:  MOVLB  0
0705E:  BTFSC  FD8.2
07060:  GOTO   70E8
07064:  XORLW  01
07066:  BTFSC  FD8.2
07068:  GOTO   70F8
0706C:  XORLW  03
0706E:  BTFSC  FD8.2
07070:  GOTO   7108
07074:  XORLW  13
07076:  BTFSC  FD8.2
07078:  GOTO   7110
0707C:  XORLW  12
0707E:  BTFSC  FD8.2
07080:  GOTO   7114
07084:  XORLW  93
07086:  BTFSC  FD8.2
07088:  GOTO   7134
0708C:  XORLW  01
0708E:  BTFSC  FD8.2
07090:  GOTO   7144
07094:  XORLW  03
07096:  BTFSC  FD8.2
07098:  GOTO   7154
0709C:  XORLW  01
0709E:  BTFSC  FD8.2
070A0:  GOTO   7164
070A4:  XORLW  07
070A6:  BTFSC  FD8.2
070A8:  GOTO   7174
070AC:  XORLW  01
070AE:  BTFSC  FD8.2
070B0:  GOTO   7184
070B4:  XORLW  03
070B6:  BTFSC  FD8.2
070B8:  GOTO   7194
070BC:  XORLW  01
070BE:  BTFSC  FD8.2
070C0:  GOTO   71A4
070C4:  XORLW  0F
070C6:  BTFSC  FD8.2
070C8:  GOTO   71B4
070CC:  XORLW  1C
070CE:  BTFSC  FD8.2
070D0:  GOTO   71C4
070D4:  XORLW  01
070D6:  BTFSC  FD8.2
070D8:  GOTO   71D4
070DC:  XORLW  03
070DE:  BTFSC  FD8.2
070E0:  GOTO   71E4
070E4:  GOTO   71F4
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
070E8:  MOVFF  389,38C
070EC:  MOVFF  388,38B
070F0:  GOTO   427C
....................          //mode_iv_meas_adc();
....................          break;
070F4:  GOTO   7204
....................       case 0x11:
....................          mode_test_iv(content);
070F8:  MOVFF  389,38C
070FC:  MOVFF  388,38B
07100:  GOTO   498C
....................          break;
07104:  GOTO   7204
....................       case 0x12:
....................          test_adc();
07108:  GOTO   4A1C
....................          break;
0710C:  GOTO   7204
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
07110:  GOTO   7204
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
07114:  MOVLW  01
07116:  MOVLB  3
07118:  ADDWF  x88,W
0711A:  MOVWF  FE9
0711C:  MOVLW  00
0711E:  ADDWFC x89,W
07120:  MOVWF  FEA
07122:  MOVFF  FEF,38B
07126:  MOVFF  38B,38C
0712A:  MOVLB  0
0712C:  GOTO   52A0
....................          break;
07130:  GOTO   7204
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
07134:  MOVFF  389,38E
07138:  MOVFF  388,38D
0713C:  CALL   565A
....................          break;
07140:  GOTO   7204
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
07144:  MOVFF  389,38C
07148:  MOVFF  388,38B
0714C:  GOTO   5722
....................          break;
07150:  GOTO   7204
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
07154:  MOVFF  389,38C
07158:  MOVFF  388,38B
0715C:  GOTO   58BC
....................          break;
07160:  GOTO   7204
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
07164:  MOVFF  389,38C
07168:  MOVFF  388,38B
0716C:  GOTO   5A52
....................          break;
07170:  GOTO   7204
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
07174:  MOVFF  389,38C
07178:  MOVFF  388,38B
0717C:  GOTO   5BC8
....................          break;
07180:  GOTO   7204
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
07184:  MOVFF  389,38C
07188:  MOVFF  388,38B
0718C:  GOTO   5FC8
....................          break;
07190:  GOTO   7204
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
07194:  MOVFF  389,38C
07198:  MOVFF  388,38B
0719C:  GOTO   6286
....................          break;
071A0:  GOTO   7204
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
071A4:  MOVFF  389,38C
071A8:  MOVFF  388,38B
071AC:  GOTO   6710
....................          break;
071B0:  GOTO   7204
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
071B4:  MOVFF  389,38C
071B8:  MOVFF  388,38B
071BC:  GOTO   6934
....................          break;
071C0:  GOTO   7204
.................... 
....................       // ___________________ SMF Commands ______________________
....................       /*
....................       case ID_SMF_COPY:
....................          mode_misf_smf_copy(content);
....................          break;
....................       case ID_SMF_READ:
....................          mode_flash_smf_read(content);
....................          break;
....................       case ID_SMF_ERASE:
....................          mode_flash_smf_erase(content);
....................          break;
....................       case ID_SMF_COPY_FORCE:
....................          mode_flash_address_reset(content);
....................          break;
....................       */
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
071C4:  MOVFF  389,38C
071C8:  MOVFF  388,38B
071CC:  GOTO   698E
....................          break;
071D0:  GOTO   7204
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
071D4:  MOVFF  389,38C
071D8:  MOVFF  388,38B
071DC:  GOTO   6D74
....................          break;
071E0:  GOTO   7204
....................       case ID_SMF_RESET:
....................          mode_smf_reset(content);
071E4:  MOVFF  389,38C
071E8:  MOVFF  388,38B
071EC:  GOTO   6E42
....................          break;
071F0:  GOTO   7204
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
071F4:  MOVLW  52
071F6:  MOVWF  FF6
071F8:  MOVLW  0F
071FA:  MOVWF  FF7
071FC:  MOVLW  00
071FE:  MOVWF  FF8
07200:  CALL   1868
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
07204:  MOVLW  6A
07206:  MOVWF  FF6
07208:  MOVLW  0F
0720A:  MOVWF  FF7
0720C:  MOVLW  00
0720E:  MOVWF  FF8
07210:  CALL   1868
07214:  GOTO   727A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
08BF6:  MOVLW  B0
08BF8:  MOVWF  FF6
08BFA:  MOVLW  0F
08BFC:  MOVWF  FF7
08BFE:  MOVLW  00
08C00:  MOVWF  FF8
08C02:  CALL   1868
....................    
....................    switch(command->frame_id)
08C06:  MOVLB  3
08C08:  MOVF   x82,W
08C0A:  MOVWF  FE9
08C0C:  MOVF   x83,W
08C0E:  MOVWF  FEA
08C10:  MOVF   FEF,W
08C12:  XORLW  00
08C14:  MOVLB  0
08C16:  BTFSC  FD8.2
08C18:  GOTO   8C30
08C1C:  XORLW  01
08C1E:  BTFSC  FD8.2
08C20:  GOTO   8C40
08C24:  XORLW  03
08C26:  BTFSC  FD8.2
08C28:  GOTO   8C60
08C2C:  GOTO   8C70
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
08C30:  MOVFF  383,385
08C34:  MOVFF  382,384
08C38:  GOTO   722E
....................          break;
08C3C:  GOTO   8C70
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
08C40:  MOVFF  383,385
08C44:  MOVFF  382,384
08C48:  GOTO   72B0
08C4C:  MOVF   01,F
08C4E:  BTFSC  FD8.2
08C50:  GOTO   8C5C
....................             return TRUE; // if status is finished, return TRUE
08C54:  MOVLW  01
08C56:  MOVWF  01
08C58:  GOTO   8C74
....................          }        
....................          break;
08C5C:  GOTO   8C70
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
08C60:  MOVFF  383,385
08C64:  MOVFF  382,384
08C68:  GOTO   8B80
....................          break;
08C6C:  GOTO   8C70
....................    }
....................    return FALSE;
08C70:  MOVLW  00
08C72:  MOVWF  01
08C74:  GOTO   9508 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0722E:  MOVLW  C8
07230:  MOVWF  FF6
07232:  MOVLW  0F
07234:  MOVWF  FF7
07236:  MOVLW  00
07238:  MOVWF  FF8
0723A:  CALL   1868
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0723E:  MOVLW  DE
07240:  MOVWF  FF6
07242:  MOVLW  0F
07244:  MOVWF  FF7
07246:  MOVLW  00
07248:  MOVWF  FF8
0724A:  CALL   1868
....................    transmit_ack();
0724E:  CALL   4268
.................... 
....................    status[0] = EXECUTING_MISSION;
07252:  MOVLW  02
07254:  MOVWF  48
....................    execute_mission(command->content);
07256:  MOVLW  03
07258:  MOVLB  3
0725A:  ADDWF  x84,W
0725C:  MOVWF  01
0725E:  MOVLW  00
07260:  ADDWFC x85,W
07262:  MOVWF  03
07264:  MOVF   01,W
07266:  MOVWF  x86
07268:  MOVFF  03,387
0726C:  MOVFF  387,389
07270:  MOVFF  386,388
07274:  MOVLB  0
07276:  GOTO   6FF6
....................    if (is_empty_smf_data())
0727A:  CALL   7218
0727E:  MOVF   01,F
07280:  BTFSC  FD8.2
07282:  GOTO   728E
....................       status[0] = FINISHED;
07286:  MOVLW  06
07288:  MOVWF  48
0728A:  GOTO   7292
....................    else
....................       status[0] = SMF_USE_REQ;
0728E:  MOVLW  04
07290:  MOVWF  48
07292:  GOTO   8C3C (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
072B0:  MOVLW  F8
072B2:  MOVWF  FF6
072B4:  MOVLW  0F
072B6:  MOVWF  FF7
072B8:  MOVLW  00
072BA:  MOVWF  FF8
072BC:  CALL   1868
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
072C0:  MOVLW  0C
072C2:  MOVWF  FF6
072C4:  MOVLW  10
072C6:  MOVWF  FF7
072C8:  MOVLW  00
072CA:  MOVWF  FF8
072CC:  CALL   1868
....................    transmit_status();
072D0:  GOTO   7296
....................    if (status[0] == FINISHED)
072D4:  MOVF   48,W
072D6:  SUBLW  06
072D8:  BTFSS  FD8.2
072DA:  GOTO   72FA
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
072DE:  MOVLW  2A
072E0:  MOVWF  FF6
072E2:  MOVLW  10
072E4:  MOVWF  FF7
072E6:  MOVLW  00
072E8:  MOVWF  FF8
072EA:  CALL   1868
....................       return TRUE;
072EE:  MOVLW  01
072F0:  MOVWF  01
072F2:  GOTO   7302
....................    }
072F6:  GOTO   7302
....................    else{
....................       return FALSE;
072FA:  MOVLW  00
072FC:  MOVWF  01
072FE:  GOTO   7302
....................    }
07302:  GOTO   8C4C (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
08B80:  MOVLW  46
08B82:  MOVWF  FF6
08B84:  MOVLW  10
08B86:  MOVWF  FF7
08B88:  MOVLW  00
08B8A:  MOVWF  FF8
08B8C:  CALL   1868
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
08B90:  MOVLW  60
08B92:  MOVWF  FF6
08B94:  MOVLW  10
08B96:  MOVWF  FF7
08B98:  MOVLW  00
08B9A:  MOVWF  FF8
08B9C:  CALL   1868
....................     transmit_ack();
08BA0:  CALL   4268
....................     
....................     if (command->content[0] == ALLOW) {
08BA4:  MOVLW  03
08BA6:  MOVLB  3
08BA8:  ADDWF  x84,W
08BAA:  MOVWF  FE9
08BAC:  MOVLW  00
08BAE:  ADDWFC x85,W
08BB0:  MOVWF  FEA
08BB2:  DECFSZ FEF,W
08BB4:  BRA    8BBA
08BB6:  BRA    8BC0
08BB8:  MOVLB  0
08BBA:  MOVLB  0
08BBC:  GOTO   8BE2
08BC0:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
08BC2:  MOVLW  7A
08BC4:  MOVWF  FF6
08BC6:  MOVLW  10
08BC8:  MOVWF  FF7
08BCA:  MOVLW  00
08BCC:  MOVWF  FF8
08BCE:  CALL   1868
....................         status[0] = COPYING;
08BD2:  MOVLW  05
08BD4:  MOVWF  48
....................       //   smf_write();
....................          data_copy();
08BD6:  GOTO   7DF0
....................         status[0] = FINISHED;
08BDA:  MOVLW  06
08BDC:  MOVWF  48
....................     } else {
08BDE:  GOTO   8BF2
....................         fprintf(PC, "\t\t-> denyed\r\n");
08BE2:  MOVLW  88
08BE4:  MOVWF  FF6
08BE6:  MOVLW  10
08BE8:  MOVWF  FF7
08BEA:  MOVLW  00
08BEC:  MOVWF  FF8
08BEE:  CALL   1868
....................     }
08BF2:  GOTO   8C6C (RETURN)
.................... }
.................... 
.................... #include "../application/mission/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
0427C:  MOVLW  96
0427E:  MOVWF  FF6
04280:  MOVLW  10
04282:  MOVWF  FF7
04284:  MOVLW  00
04286:  MOVWF  FF8
04288:  CALL   1868
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
0428C:  MOVLB  3
0428E:  MOVF   x8B,W
04290:  MOVWF  FE9
04292:  MOVF   x8C,W
04294:  MOVWF  FEA
04296:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
0429A:  MOVLW  01
0429C:  ADDWF  x8B,W
0429E:  MOVWF  FE9
042A0:  MOVLW  00
042A2:  ADDWFC x8C,W
042A4:  MOVWF  FEA
042A6:  MOVF   FEF,W
042A8:  CLRF   x97
042AA:  CLRF   x96
042AC:  CLRF   x95
042AE:  MOVWF  x94
042B0:  MOVFF  394,397
042B4:  CLRF   x94
042B6:  CLRF   x95
042B8:  CLRF   x96
042BA:  MOVLW  02
042BC:  ADDWF  x8B,W
042BE:  MOVWF  FE9
042C0:  MOVLW  00
042C2:  ADDWFC x8C,W
042C4:  MOVWF  FEA
042C6:  MOVF   FEF,W
042C8:  CLRF   x9C
042CA:  CLRF   x9B
042CC:  CLRF   x9A
042CE:  MOVWF  x99
042D0:  MOVFF  39A,03
042D4:  MOVFF  399,02
042D8:  CLRF   00
042DA:  CLRF   01
042DC:  MOVF   00,W
042DE:  IORWF  x94,F
042E0:  MOVF   01,W
042E2:  IORWF  x95,F
042E4:  MOVF   02,W
042E6:  IORWF  x96,F
042E8:  MOVF   03,W
042EA:  IORWF  x97,F
042EC:  MOVLW  03
042EE:  ADDWF  x8B,W
042F0:  MOVWF  FE9
042F2:  MOVLW  00
042F4:  ADDWFC x8C,W
042F6:  MOVWF  FEA
042F8:  MOVF   FEF,W
042FA:  CLRF   x9C
042FC:  CLRF   x9B
042FE:  CLRF   x9A
04300:  MOVWF  x99
04302:  MOVFF  39B,03
04306:  MOVFF  39A,02
0430A:  MOVFF  399,01
0430E:  CLRF   00
04310:  MOVF   00,W
04312:  IORWF  x94,F
04314:  MOVF   01,W
04316:  IORWF  x95,F
04318:  MOVF   02,W
0431A:  IORWF  x96,F
0431C:  MOVF   03,W
0431E:  IORWF  x97,F
04320:  MOVLW  04
04322:  ADDWF  x8B,W
04324:  MOVWF  FE9
04326:  MOVLW  00
04328:  ADDWFC x8C,W
0432A:  MOVWF  FEA
0432C:  MOVF   FEF,W
0432E:  MOVWF  00
04330:  CLRF   01
04332:  CLRF   02
04334:  CLRF   03
04336:  MOVF   00,W
04338:  IORWF  x94,W
0433A:  MOVWF  x8E
0433C:  MOVF   01,W
0433E:  IORWF  x95,W
04340:  MOVWF  x8F
04342:  MOVF   02,W
04344:  IORWF  x96,W
04346:  MOVWF  x90
04348:  MOVF   03,W
0434A:  IORWF  x97,W
0434C:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
0434E:  MOVLW  05
04350:  ADDWF  x8B,W
04352:  MOVWF  FE9
04354:  MOVLW  00
04356:  ADDWFC x8C,W
04358:  MOVWF  FEA
0435A:  MOVF   FEF,W
0435C:  CLRF   x95
0435E:  MOVWF  x94
04360:  MOVFF  394,395
04364:  CLRF   x94
04366:  MOVLW  06
04368:  ADDWF  x8B,W
0436A:  MOVWF  FE9
0436C:  MOVLW  00
0436E:  ADDWFC x8C,W
04370:  MOVWF  FEA
04372:  MOVF   FEF,W
04374:  CLRF   03
04376:  IORWF  x94,W
04378:  MOVWF  x92
0437A:  MOVF   03,W
0437C:  IORWF  x95,W
0437E:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
04380:  MOVLW  AA
04382:  MOVWF  FF6
04384:  MOVLW  10
04386:  MOVWF  FF7
04388:  MOVLW  00
0438A:  MOVWF  FF8
0438C:  MOVLW  0C
0438E:  MOVLB  7
04390:  MOVWF  xEC
04392:  MOVLB  0
04394:  CALL   1898
04398:  MOVFF  38D,427
0439C:  MOVLW  37
0439E:  MOVLB  4
043A0:  MOVWF  x28
043A2:  MOVLB  0
043A4:  CALL   1A5A
043A8:  MOVLW  0D
043AA:  MOVLB  8
043AC:  MOVWF  x2F
043AE:  MOVLB  0
043B0:  CALL   1816
043B4:  MOVLW  0A
043B6:  MOVLB  8
043B8:  MOVWF  x2F
043BA:  MOVLB  0
043BC:  CALL   1816
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
043C0:  MOVLW  BE
043C2:  MOVWF  FF6
043C4:  MOVLW  10
043C6:  MOVWF  FF7
043C8:  MOVLW  00
043CA:  MOVWF  FF8
043CC:  MOVLW  0E
043CE:  MOVLB  7
043D0:  MOVWF  xEC
043D2:  MOVLB  0
043D4:  CALL   1898
043D8:  MOVFF  391,427
043DC:  MOVLW  37
043DE:  MOVLB  4
043E0:  MOVWF  x28
043E2:  MOVLB  0
043E4:  CALL   1A5A
043E8:  MOVFF  390,427
043EC:  MOVLW  37
043EE:  MOVLB  4
043F0:  MOVWF  x28
043F2:  MOVLB  0
043F4:  CALL   1A5A
043F8:  MOVFF  38F,427
043FC:  MOVLW  37
043FE:  MOVLB  4
04400:  MOVWF  x28
04402:  MOVLB  0
04404:  CALL   1A5A
04408:  MOVFF  38E,427
0440C:  MOVLW  37
0440E:  MOVLB  4
04410:  MOVWF  x28
04412:  MOVLB  0
04414:  CALL   1A5A
04418:  MOVLW  0D
0441A:  MOVLB  8
0441C:  MOVWF  x2F
0441E:  MOVLB  0
04420:  CALL   1816
04424:  MOVLW  0A
04426:  MOVLB  8
04428:  MOVWF  x2F
0442A:  MOVLB  0
0442C:  CALL   1816
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
04430:  MOVLW  D4
04432:  MOVWF  FF6
04434:  MOVLW  10
04436:  MOVWF  FF7
04438:  MOVLW  00
0443A:  MOVWF  FF8
0443C:  MOVLW  0E
0443E:  MOVLB  7
04440:  MOVWF  xEC
04442:  MOVLB  0
04444:  CALL   1898
04448:  MOVFF  393,427
0444C:  MOVLW  37
0444E:  MOVLB  4
04450:  MOVWF  x28
04452:  MOVLB  0
04454:  CALL   1A5A
04458:  MOVFF  392,427
0445C:  MOVLW  37
0445E:  MOVLB  4
04460:  MOVWF  x28
04462:  MOVLB  0
04464:  CALL   1A5A
04468:  MOVLW  0D
0446A:  MOVLB  8
0446C:  MOVWF  x2F
0446E:  MOVLB  0
04470:  CALL   1816
04474:  MOVLW  0A
04476:  MOVLB  8
04478:  MOVWF  x2F
0447A:  MOVLB  0
0447C:  CALL   1816
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
04480:  MOVFF  38D,492
04484:  MOVLW  01
04486:  MOVLB  4
04488:  MOVWF  x93
0448A:  MOVLB  0
0448C:  CALL   39E4
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
04490:  MOVFF  38D,492
04494:  MOVLW  02
04496:  MOVLB  4
04498:  MOVWF  x93
0449A:  MOVLB  0
0449C:  CALL   39E4
....................    fprintf(PC, "End MODE DUMMY\r\n");
044A0:  MOVLW  EA
044A2:  MOVWF  FF6
044A4:  MOVLW  10
044A6:  MOVWF  FF7
044A8:  MOVLW  00
044AA:  MOVWF  FF8
044AC:  CALL   1868
044B0:  GOTO   70F4 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
0498C:  MOVLW  01
0498E:  MOVLB  3
04990:  ADDWF  x8B,W
04992:  MOVWF  FE9
04994:  MOVLW  00
04996:  ADDWFC x8C,W
04998:  MOVWF  FEA
0499A:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
0499E:  MOVLW  FC
049A0:  MOVWF  FF6
049A2:  MOVLW  10
049A4:  MOVWF  FF7
049A6:  MOVLW  00
049A8:  MOVWF  FF8
049AA:  MOVLB  0
049AC:  CALL   1868
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
049B0:  MOVLW  12
049B2:  MOVWF  FF6
049B4:  MOVLW  11
049B6:  MOVWF  FF7
049B8:  MOVLW  00
049BA:  MOVWF  FF8
049BC:  MOVLW  0E
049BE:  MOVLB  7
049C0:  MOVWF  xEC
049C2:  MOVLB  0
049C4:  CALL   1898
049C8:  MOVFF  38D,7EC
049CC:  MOVLW  1B
049CE:  MOVLB  7
049D0:  MOVWF  xED
049D2:  MOVLB  0
049D4:  CALL   44FC
049D8:  MOVLW  0D
049DA:  MOVLB  8
049DC:  MOVWF  x2F
049DE:  MOVLB  0
049E0:  CALL   1816
049E4:  MOVLW  0A
049E6:  MOVLB  8
049E8:  MOVWF  x2F
049EA:  MOVLB  0
049EC:  CALL   1816
....................    output_high(CONNECT_CIGS1);
049F0:  BCF    F94.0
049F2:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
049F4:  BCF    F94.7
049F6:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
049F8:  MOVFF  38B,390
049FC:  GOTO   4864
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
04A00:  MOVLW  26
04A02:  MOVWF  FF6
04A04:  MOVLW  11
04A06:  MOVWF  FF7
04A08:  MOVLW  00
04A0A:  MOVWF  FF8
04A0C:  CALL   1868
....................    output_low(CONNECT_CIGS1);
04A10:  BCF    F94.0
04A12:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
04A14:  BCF    F94.7
04A16:  BSF    F8B.7
04A18:  GOTO   7104 (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................    }
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
052A0:  MOVLW  50
052A2:  MOVLB  3
052A4:  MOVWF  x96
052A6:  MOVLB  0
052A8:  GOTO   4BCA
....................    SmfDataStruct data;
....................    data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
052AC:  MOVLB  3
052AE:  BCF    x8D.0
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
052B0:  MOVF   x64,W
052B2:  MOVWF  x96
052B4:  MOVF   x65,W
052B6:  MOVWF  x97
052B8:  MOVLW  16
052BA:  ADDWF  x66,W
052BC:  MOVWF  x98
052BE:  MOVLW  00
052C0:  ADDWFC x67,W
052C2:  MOVWF  x99
052C4:  MOVF   x69,W
052C6:  SUBWF  x96,W
052C8:  MOVWF  x8E
052CA:  MOVF   x6A,W
052CC:  SUBWFB x97,W
052CE:  MOVWF  x8F
052D0:  MOVF   x6B,W
052D2:  SUBWFB x98,W
052D4:  MOVWF  x90
052D6:  MOVF   x6C,W
052D8:  SUBWFB x99,W
052DA:  MOVWF  x91
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
052DC:  MOVFF  36C,395
052E0:  MOVFF  36B,394
052E4:  MOVFF  36A,393
052E8:  MOVFF  369,392
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
052EC:  MOVLW  03
052EE:  MOVWF  x97
052F0:  MOVLW  8D
052F2:  MOVWF  x96
052F4:  MOVLB  0
052F6:  GOTO   5112
052FA:  GOTO   7130 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../application/mission/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/measurement/mmj_cigs_func.h"          // 測定機能
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../core/storage/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../core/logging/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
0565A:  MOVLW  7E
0565C:  MOVWF  FF6
0565E:  MOVLW  11
05660:  MOVWF  FF7
05662:  MOVLW  00
05664:  MOVWF  FF8
05666:  CALL   1868
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
0566A:  MOVLB  3
0566C:  MOVF   x8D,W
0566E:  MOVWF  FE9
05670:  MOVF   x8E,W
05672:  MOVWF  FEA
05674:  MOVFF  FEF,38F
....................    piclog_make(cmd, 0x00); // Log the command execution
05678:  MOVFF  38F,492
0567C:  MOVLB  4
0567E:  CLRF   x93
05680:  MOVLB  0
05682:  CALL   39E4
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
05686:  MOVLB  3
05688:  CLRF   x93
0568A:  CLRF   x92
0568C:  CLRF   x91
0568E:  CLRF   x90
05690:  MOVLB  0
05692:  MOVLB  3
05694:  MOVF   x93,F
05696:  BTFSC  FD8.2
05698:  BRA    56A0
0569A:  MOVLB  0
0569C:  GOTO   5700
056A0:  MOVLB  0
056A2:  MOVLB  3
056A4:  MOVF   x92,W
056A6:  SUBLW  F4
056A8:  BTFSC  FD8.0
056AA:  BRA    56B2
056AC:  MOVLB  0
056AE:  GOTO   5700
056B2:  MOVLB  0
056B4:  BTFSS  FD8.2
056B6:  GOTO   56CC
056BA:  MOVLB  3
056BC:  MOVF   x91,W
056BE:  SUBLW  23
056C0:  BTFSC  FD8.0
056C2:  BRA    56CA
056C4:  MOVLB  0
056C6:  GOTO   5700
056CA:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
056CC:  MOVFF  E1,3D4
056D0:  MOVFF  E0,3D3
056D4:  MOVFF  DF,3D2
056D8:  MOVFF  DE,3D1
056DC:  MOVFF  393,3D8
056E0:  MOVFF  392,3D7
056E4:  MOVFF  391,3D6
056E8:  MOVFF  390,3D5
056EC:  CALL   52FE
056F0:  MOVLW  01
056F2:  MOVLB  3
056F4:  ADDWF  x92,F
056F6:  MOVLW  00
056F8:  ADDWFC x93,F
056FA:  MOVLB  0
056FC:  GOTO   5692
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05700:  MOVFF  38F,492
05704:  MOVLW  02
05706:  MOVLB  4
05708:  MOVWF  x93
0570A:  MOVLB  0
0570C:  CALL   39E4
....................    fprintf(PC, "End Flash Erase All\r\n");
05710:  MOVLW  96
05712:  MOVWF  FF6
05714:  MOVLW  11
05716:  MOVWF  FF7
05718:  MOVLW  00
0571A:  MOVWF  FF8
0571C:  CALL   1868
05720:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
05722:  MOVLW  AC
05724:  MOVWF  FF6
05726:  MOVLW  11
05728:  MOVWF  FF7
0572A:  MOVLW  00
0572C:  MOVWF  FF8
0572E:  CALL   1868
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05732:  MOVLB  3
05734:  MOVF   x8B,W
05736:  MOVWF  FE9
05738:  MOVF   x8C,W
0573A:  MOVWF  FEA
0573C:  MOVFF  FEF,38D
05740:  MOVLW  01
05742:  ADDWF  x8B,W
05744:  MOVWF  FE9
05746:  MOVLW  00
05748:  ADDWFC x8C,W
0574A:  MOVWF  FEA
0574C:  MOVF   FEF,W
0574E:  CLRF   x95
05750:  CLRF   x94
05752:  CLRF   x93
05754:  MOVWF  x92
05756:  MOVFF  392,395
0575A:  CLRF   x92
0575C:  CLRF   x93
0575E:  CLRF   x94
05760:  MOVLW  02
05762:  ADDWF  x8B,W
05764:  MOVWF  FE9
05766:  MOVLW  00
05768:  ADDWFC x8C,W
0576A:  MOVWF  FEA
0576C:  MOVF   FEF,W
0576E:  CLRF   x9A
05770:  CLRF   x99
05772:  CLRF   x98
05774:  MOVWF  x97
05776:  MOVFF  398,03
0577A:  MOVFF  397,02
0577E:  CLRF   00
05780:  CLRF   01
05782:  MOVF   00,W
05784:  IORWF  x92,F
05786:  MOVF   01,W
05788:  IORWF  x93,F
0578A:  MOVF   02,W
0578C:  IORWF  x94,F
0578E:  MOVF   03,W
05790:  IORWF  x95,F
05792:  MOVLW  03
05794:  ADDWF  x8B,W
05796:  MOVWF  FE9
05798:  MOVLW  00
0579A:  ADDWFC x8C,W
0579C:  MOVWF  FEA
0579E:  MOVF   FEF,W
057A0:  CLRF   x9A
057A2:  CLRF   x99
057A4:  CLRF   x98
057A6:  MOVWF  x97
057A8:  MOVFF  399,03
057AC:  MOVFF  398,02
057B0:  MOVFF  397,01
057B4:  CLRF   00
057B6:  MOVF   00,W
057B8:  IORWF  x92,F
057BA:  MOVF   01,W
057BC:  IORWF  x93,F
057BE:  MOVF   02,W
057C0:  IORWF  x94,F
057C2:  MOVF   03,W
057C4:  IORWF  x95,F
057C6:  MOVLW  04
057C8:  ADDWF  x8B,W
057CA:  MOVWF  FE9
057CC:  MOVLW  00
057CE:  ADDWFC x8C,W
057D0:  MOVWF  FEA
057D2:  MOVF   FEF,W
057D4:  MOVWF  00
057D6:  CLRF   01
057D8:  CLRF   02
057DA:  CLRF   03
057DC:  MOVF   00,W
057DE:  IORWF  x92,W
057E0:  MOVWF  x8E
057E2:  MOVF   01,W
057E4:  IORWF  x93,W
057E6:  MOVWF  x8F
057E8:  MOVF   02,W
057EA:  IORWF  x94,W
057EC:  MOVWF  x90
057EE:  MOVF   03,W
057F0:  IORWF  x95,W
057F2:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
057F4:  MOVLW  CA
057F6:  MOVWF  FF6
057F8:  MOVLW  11
057FA:  MOVWF  FF7
057FC:  MOVLW  00
057FE:  MOVWF  FF8
05800:  MOVLW  13
05802:  MOVLB  7
05804:  MOVWF  xEC
05806:  MOVLB  0
05808:  CALL   1898
0580C:  MOVFF  391,427
05810:  MOVLW  37
05812:  MOVLB  4
05814:  MOVWF  x28
05816:  MOVLB  0
05818:  CALL   1A5A
0581C:  MOVFF  390,427
05820:  MOVLW  37
05822:  MOVLB  4
05824:  MOVWF  x28
05826:  MOVLB  0
05828:  CALL   1A5A
0582C:  MOVFF  38F,427
05830:  MOVLW  37
05832:  MOVLB  4
05834:  MOVWF  x28
05836:  MOVLB  0
05838:  CALL   1A5A
0583C:  MOVFF  38E,427
05840:  MOVLW  37
05842:  MOVLB  4
05844:  MOVWF  x28
05846:  MOVLB  0
05848:  CALL   1A5A
0584C:  MOVLW  0D
0584E:  MOVLB  8
05850:  MOVWF  x2F
05852:  MOVLB  0
05854:  CALL   1816
05858:  MOVLW  0A
0585A:  MOVLB  8
0585C:  MOVWF  x2F
0585E:  MOVLB  0
05860:  CALL   1816
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05864:  MOVFF  38D,492
05868:  MOVLW  01
0586A:  MOVLB  4
0586C:  MOVWF  x93
0586E:  MOVLB  0
05870:  CALL   39E4
....................    
....................    sector_erase(mis_fm, sector_address);
05874:  MOVFF  E1,3D4
05878:  MOVFF  E0,3D3
0587C:  MOVFF  DF,3D2
05880:  MOVFF  DE,3D1
05884:  MOVFF  391,3D8
05888:  MOVFF  390,3D7
0588C:  MOVFF  38F,3D6
05890:  MOVFF  38E,3D5
05894:  CALL   52FE
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05898:  MOVFF  38D,492
0589C:  MOVLW  02
0589E:  MOVLB  4
058A0:  MOVWF  x93
058A2:  MOVLB  0
058A4:  CALL   39E4
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
058A8:  MOVLW  E6
058AA:  MOVWF  FF6
058AC:  MOVLW  11
058AE:  MOVWF  FF7
058B0:  MOVLW  00
058B2:  MOVWF  FF8
058B4:  CALL   1868
058B8:  GOTO   7150 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
058BC:  MOVLW  02
058BE:  MOVWF  FF6
058C0:  MOVLW  12
058C2:  MOVWF  FF7
058C4:  MOVLW  00
058C6:  MOVWF  FF8
058C8:  CALL   1868
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
058CC:  MOVLB  3
058CE:  MOVF   x8B,W
058D0:  MOVWF  FE9
058D2:  MOVF   x8C,W
058D4:  MOVWF  FEA
058D6:  MOVFF  FEF,38D
058DA:  MOVLW  01
058DC:  ADDWF  x8B,W
058DE:  MOVWF  FE9
058E0:  MOVLW  00
058E2:  ADDWFC x8C,W
058E4:  MOVWF  FEA
058E6:  MOVF   FEF,W
058E8:  CLRF   x95
058EA:  CLRF   x94
058EC:  CLRF   x93
058EE:  MOVWF  x92
058F0:  MOVFF  392,395
058F4:  CLRF   x92
058F6:  CLRF   x93
058F8:  CLRF   x94
058FA:  MOVLW  02
058FC:  ADDWF  x8B,W
058FE:  MOVWF  FE9
05900:  MOVLW  00
05902:  ADDWFC x8C,W
05904:  MOVWF  FEA
05906:  MOVF   FEF,W
05908:  CLRF   x9A
0590A:  CLRF   x99
0590C:  CLRF   x98
0590E:  MOVWF  x97
05910:  MOVFF  398,03
05914:  MOVFF  397,02
05918:  CLRF   00
0591A:  CLRF   01
0591C:  MOVF   00,W
0591E:  IORWF  x92,F
05920:  MOVF   01,W
05922:  IORWF  x93,F
05924:  MOVF   02,W
05926:  IORWF  x94,F
05928:  MOVF   03,W
0592A:  IORWF  x95,F
0592C:  MOVLW  03
0592E:  ADDWF  x8B,W
05930:  MOVWF  FE9
05932:  MOVLW  00
05934:  ADDWFC x8C,W
05936:  MOVWF  FEA
05938:  MOVF   FEF,W
0593A:  CLRF   x9A
0593C:  CLRF   x99
0593E:  CLRF   x98
05940:  MOVWF  x97
05942:  MOVFF  399,03
05946:  MOVFF  398,02
0594A:  MOVFF  397,01
0594E:  CLRF   00
05950:  MOVF   00,W
05952:  IORWF  x92,F
05954:  MOVF   01,W
05956:  IORWF  x93,F
05958:  MOVF   02,W
0595A:  IORWF  x94,F
0595C:  MOVF   03,W
0595E:  IORWF  x95,F
05960:  MOVLW  04
05962:  ADDWF  x8B,W
05964:  MOVWF  FE9
05966:  MOVLW  00
05968:  ADDWFC x8C,W
0596A:  MOVWF  FEA
0596C:  MOVF   FEF,W
0596E:  MOVWF  00
05970:  CLRF   01
05972:  CLRF   02
05974:  CLRF   03
05976:  MOVF   00,W
05978:  IORWF  x92,W
0597A:  MOVWF  x8E
0597C:  MOVF   01,W
0597E:  IORWF  x93,W
05980:  MOVWF  x8F
05982:  MOVF   02,W
05984:  IORWF  x94,W
05986:  MOVWF  x90
05988:  MOVF   03,W
0598A:  IORWF  x95,W
0598C:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
0598E:  MOVLW  1E
05990:  MOVWF  FF6
05992:  MOVLW  12
05994:  MOVWF  FF7
05996:  MOVLW  00
05998:  MOVWF  FF8
0599A:  MOVLW  16
0599C:  MOVLB  7
0599E:  MOVWF  xEC
059A0:  MOVLB  0
059A2:  CALL   1898
059A6:  MOVFF  391,427
059AA:  MOVLW  37
059AC:  MOVLB  4
059AE:  MOVWF  x28
059B0:  MOVLB  0
059B2:  CALL   1A5A
059B6:  MOVFF  390,427
059BA:  MOVLW  37
059BC:  MOVLB  4
059BE:  MOVWF  x28
059C0:  MOVLB  0
059C2:  CALL   1A5A
059C6:  MOVFF  38F,427
059CA:  MOVLW  37
059CC:  MOVLB  4
059CE:  MOVWF  x28
059D0:  MOVLB  0
059D2:  CALL   1A5A
059D6:  MOVFF  38E,427
059DA:  MOVLW  37
059DC:  MOVLB  4
059DE:  MOVWF  x28
059E0:  MOVLB  0
059E2:  CALL   1A5A
059E6:  MOVLW  0D
059E8:  MOVLB  8
059EA:  MOVWF  x2F
059EC:  MOVLB  0
059EE:  CALL   1816
059F2:  MOVLW  0A
059F4:  MOVLB  8
059F6:  MOVWF  x2F
059F8:  MOVLB  0
059FA:  CALL   1816
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
059FE:  MOVFF  38D,492
05A02:  MOVLW  01
05A04:  MOVLB  4
05A06:  MOVWF  x93
05A08:  MOVLB  0
05A0A:  CALL   39E4
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
05A0E:  MOVFF  E1,82F
05A12:  MOVFF  E0,82E
05A16:  MOVFF  DF,82D
05A1A:  MOVFF  DE,82C
05A1E:  MOVLB  8
05A20:  CLRF   x33
05A22:  CLRF   x32
05A24:  CLRF   x31
05A26:  CLRF   x30
05A28:  MOVLB  0
05A2A:  CALL   33A6
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05A2E:  MOVFF  38D,492
05A32:  MOVLW  02
05A34:  MOVLB  4
05A36:  MOVWF  x93
05A38:  MOVLB  0
05A3A:  CALL   39E4
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
05A3E:  MOVLW  3C
05A40:  MOVWF  FF6
05A42:  MOVLW  12
05A44:  MOVWF  FF7
05A46:  MOVLW  00
05A48:  MOVWF  FF8
05A4A:  CALL   1868
05A4E:  GOTO   7160 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05A52:  MOVLW  56
05A54:  MOVWF  FF6
05A56:  MOVLW  12
05A58:  MOVWF  FF7
05A5A:  MOVLW  00
05A5C:  MOVWF  FF8
05A5E:  CALL   1868
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05A62:  MOVLB  3
05A64:  MOVF   x8B,W
05A66:  MOVWF  FE9
05A68:  MOVF   x8C,W
05A6A:  MOVWF  FEA
05A6C:  MOVFF  FEF,38D
05A70:  MOVLW  01
05A72:  ADDWF  x8B,W
05A74:  MOVWF  FE9
05A76:  MOVLW  00
05A78:  ADDWFC x8C,W
05A7A:  MOVWF  FEA
05A7C:  MOVF   FEF,W
05A7E:  CLRF   x95
05A80:  CLRF   x94
05A82:  CLRF   x93
05A84:  MOVWF  x92
05A86:  MOVFF  392,395
05A8A:  CLRF   x92
05A8C:  CLRF   x93
05A8E:  CLRF   x94
05A90:  MOVLW  02
05A92:  ADDWF  x8B,W
05A94:  MOVWF  FE9
05A96:  MOVLW  00
05A98:  ADDWFC x8C,W
05A9A:  MOVWF  FEA
05A9C:  MOVF   FEF,W
05A9E:  CLRF   x9A
05AA0:  CLRF   x99
05AA2:  CLRF   x98
05AA4:  MOVWF  x97
05AA6:  MOVFF  398,03
05AAA:  MOVFF  397,02
05AAE:  CLRF   00
05AB0:  CLRF   01
05AB2:  MOVF   00,W
05AB4:  IORWF  x92,F
05AB6:  MOVF   01,W
05AB8:  IORWF  x93,F
05ABA:  MOVF   02,W
05ABC:  IORWF  x94,F
05ABE:  MOVF   03,W
05AC0:  IORWF  x95,F
05AC2:  MOVLW  03
05AC4:  ADDWF  x8B,W
05AC6:  MOVWF  FE9
05AC8:  MOVLW  00
05ACA:  ADDWFC x8C,W
05ACC:  MOVWF  FEA
05ACE:  MOVF   FEF,W
05AD0:  CLRF   x9A
05AD2:  CLRF   x99
05AD4:  CLRF   x98
05AD6:  MOVWF  x97
05AD8:  MOVFF  399,03
05ADC:  MOVFF  398,02
05AE0:  MOVFF  397,01
05AE4:  CLRF   00
05AE6:  MOVF   00,W
05AE8:  IORWF  x92,F
05AEA:  MOVF   01,W
05AEC:  IORWF  x93,F
05AEE:  MOVF   02,W
05AF0:  IORWF  x94,F
05AF2:  MOVF   03,W
05AF4:  IORWF  x95,F
05AF6:  MOVLW  04
05AF8:  ADDWF  x8B,W
05AFA:  MOVWF  FE9
05AFC:  MOVLW  00
05AFE:  ADDWFC x8C,W
05B00:  MOVWF  FEA
05B02:  MOVF   FEF,W
05B04:  MOVWF  00
05B06:  CLRF   01
05B08:  CLRF   02
05B0A:  CLRF   03
05B0C:  MOVF   00,W
05B0E:  IORWF  x92,W
05B10:  MOVWF  x8E
05B12:  MOVF   01,W
05B14:  IORWF  x93,W
05B16:  MOVWF  x8F
05B18:  MOVF   02,W
05B1A:  IORWF  x94,W
05B1C:  MOVWF  x90
05B1E:  MOVF   03,W
05B20:  IORWF  x95,W
05B22:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05B24:  MOVLW  7C
05B26:  MOVWF  FF6
05B28:  MOVLW  12
05B2A:  MOVWF  FF7
05B2C:  MOVLW  00
05B2E:  MOVWF  FF8
05B30:  MOVLW  16
05B32:  MOVLB  7
05B34:  MOVWF  xEC
05B36:  MOVLB  0
05B38:  CALL   1898
05B3C:  MOVFF  391,427
05B40:  MOVLW  37
05B42:  MOVLB  4
05B44:  MOVWF  x28
05B46:  MOVLB  0
05B48:  CALL   1A5A
05B4C:  MOVFF  390,427
05B50:  MOVLW  37
05B52:  MOVLB  4
05B54:  MOVWF  x28
05B56:  MOVLB  0
05B58:  CALL   1A5A
05B5C:  MOVFF  38F,427
05B60:  MOVLW  37
05B62:  MOVLB  4
05B64:  MOVWF  x28
05B66:  MOVLB  0
05B68:  CALL   1A5A
05B6C:  MOVFF  38E,427
05B70:  MOVLW  37
05B72:  MOVLB  4
05B74:  MOVWF  x28
05B76:  MOVLB  0
05B78:  CALL   1A5A
05B7C:  MOVLW  0D
05B7E:  MOVLB  8
05B80:  MOVWF  x2F
05B82:  MOVLB  0
05B84:  CALL   1816
05B88:  MOVLW  0A
05B8A:  MOVLB  8
05B8C:  MOVWF  x2F
05B8E:  MOVLB  0
05B90:  CALL   1816
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05B94:  MOVFF  38D,492
05B98:  MOVLW  01
05B9A:  MOVLB  4
05B9C:  MOVWF  x93
05B9E:  MOVLB  0
05BA0:  CALL   39E4
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05BA4:  MOVFF  38D,492
05BA8:  MOVLW  02
05BAA:  MOVLB  4
05BAC:  MOVWF  x93
05BAE:  MOVLB  0
05BB0:  CALL   39E4
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05BB4:  MOVLW  9A
05BB6:  MOVWF  FF6
05BB8:  MOVLW  12
05BBA:  MOVWF  FF7
05BBC:  MOVLW  00
05BBE:  MOVWF  FF8
05BC0:  CALL   1868
05BC4:  GOTO   7170 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
05BC8:  MOVLW  BE
05BCA:  MOVWF  FF6
05BCC:  MOVLW  12
05BCE:  MOVWF  FF7
05BD0:  MOVLW  00
05BD2:  MOVWF  FF8
05BD4:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05BD8:  MOVLB  3
05BDA:  MOVF   x8B,W
05BDC:  MOVWF  FE9
05BDE:  MOVF   x8C,W
05BE0:  MOVWF  FEA
05BE2:  MOVFF  FEF,3DD
05BE6:  MOVFF  3DD,492
05BEA:  MOVLW  01
05BEC:  MOVLB  4
05BEE:  MOVWF  x93
05BF0:  MOVLB  0
05BF2:  CALL   39E4
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05BF6:  MOVLB  3
05BF8:  CLRF   x8D
05BFA:  CLRF   x8E
05BFC:  CLRF   x8F
05BFE:  CLRF   x90
05C00:  CLRF   x91
05C02:  CLRF   x92
05C04:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
05C06:  MOVF   x8B,W
05C08:  MOVWF  FE9
05C0A:  MOVF   x8C,W
05C0C:  MOVWF  FEA
05C0E:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05C12:  MOVLW  01
05C14:  ADDWF  x8B,W
05C16:  MOVWF  FE9
05C18:  MOVLW  00
05C1A:  ADDWFC x8C,W
05C1C:  MOVWF  FEA
05C1E:  MOVF   FEF,W
05C20:  CLRF   xE0
05C22:  CLRF   xDF
05C24:  CLRF   xDE
05C26:  MOVWF  xDD
05C28:  MOVFF  3DD,3E0
05C2C:  CLRF   xDD
05C2E:  CLRF   xDE
05C30:  CLRF   xDF
05C32:  MOVLW  02
05C34:  ADDWF  x8B,W
05C36:  MOVWF  FE9
05C38:  MOVLW  00
05C3A:  ADDWFC x8C,W
05C3C:  MOVWF  FEA
05C3E:  MOVF   FEF,W
05C40:  CLRF   xE5
05C42:  CLRF   xE4
05C44:  CLRF   xE3
05C46:  MOVWF  xE2
05C48:  MOVFF  3E3,03
05C4C:  MOVFF  3E2,02
05C50:  CLRF   00
05C52:  CLRF   01
05C54:  MOVF   00,W
05C56:  IORWF  xDD,F
05C58:  MOVF   01,W
05C5A:  IORWF  xDE,F
05C5C:  MOVF   02,W
05C5E:  IORWF  xDF,F
05C60:  MOVF   03,W
05C62:  IORWF  xE0,F
05C64:  MOVLW  03
05C66:  ADDWF  x8B,W
05C68:  MOVWF  FE9
05C6A:  MOVLW  00
05C6C:  ADDWFC x8C,W
05C6E:  MOVWF  FEA
05C70:  MOVF   FEF,W
05C72:  CLRF   xE5
05C74:  CLRF   xE4
05C76:  CLRF   xE3
05C78:  MOVWF  xE2
05C7A:  MOVFF  3E4,03
05C7E:  MOVFF  3E3,02
05C82:  MOVFF  3E2,01
05C86:  CLRF   00
05C88:  MOVF   00,W
05C8A:  IORWF  xDD,F
05C8C:  MOVF   01,W
05C8E:  IORWF  xDE,F
05C90:  MOVF   02,W
05C92:  IORWF  xDF,F
05C94:  MOVF   03,W
05C96:  IORWF  xE0,F
05C98:  MOVLW  04
05C9A:  ADDWF  x8B,W
05C9C:  MOVWF  FE9
05C9E:  MOVLW  00
05CA0:  ADDWFC x8C,W
05CA2:  MOVWF  FEA
05CA4:  MOVF   FEF,W
05CA6:  MOVWF  00
05CA8:  CLRF   01
05CAA:  CLRF   02
05CAC:  CLRF   03
05CAE:  MOVF   00,W
05CB0:  IORWF  xDD,W
05CB2:  MOVWF  x8E
05CB4:  MOVF   01,W
05CB6:  IORWF  xDE,W
05CB8:  MOVWF  x8F
05CBA:  MOVF   02,W
05CBC:  IORWF  xDF,W
05CBE:  MOVWF  x90
05CC0:  MOVF   03,W
05CC2:  IORWF  xE0,W
05CC4:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05CC6:  MOVLW  07
05CC8:  ADDWF  x8B,W
05CCA:  MOVWF  FE9
05CCC:  MOVLW  00
05CCE:  ADDWFC x8C,W
05CD0:  MOVWF  FEA
05CD2:  MOVF   FEF,W
05CD4:  CLRF   xDE
05CD6:  MOVWF  xDD
05CD8:  MOVFF  3DD,3DE
05CDC:  CLRF   xDD
05CDE:  MOVLW  08
05CE0:  ADDWF  x8B,W
05CE2:  MOVWF  FE9
05CE4:  MOVLW  00
05CE6:  ADDWFC x8C,W
05CE8:  MOVWF  FEA
05CEA:  MOVF   FEF,W
05CEC:  CLRF   03
05CEE:  IORWF  xDD,W
05CF0:  MOVWF  x92
05CF2:  MOVF   03,W
05CF4:  IORWF  xDE,W
05CF6:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05CF8:  MOVLW  D8
05CFA:  MOVWF  FF6
05CFC:  MOVLW  12
05CFE:  MOVWF  FF7
05D00:  MOVLW  00
05D02:  MOVWF  FF8
05D04:  MOVLW  0C
05D06:  MOVLB  7
05D08:  MOVWF  xEC
05D0A:  MOVLB  0
05D0C:  CALL   1898
05D10:  MOVFF  38D,427
05D14:  MOVLW  37
05D16:  MOVLB  4
05D18:  MOVWF  x28
05D1A:  MOVLB  0
05D1C:  CALL   1A5A
05D20:  MOVLW  0D
05D22:  MOVLB  8
05D24:  MOVWF  x2F
05D26:  MOVLB  0
05D28:  CALL   1816
05D2C:  MOVLW  0A
05D2E:  MOVLB  8
05D30:  MOVWF  x2F
05D32:  MOVLB  0
05D34:  CALL   1816
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05D38:  MOVLW  EC
05D3A:  MOVWF  FF6
05D3C:  MOVLW  12
05D3E:  MOVWF  FF7
05D40:  MOVLW  00
05D42:  MOVWF  FF8
05D44:  MOVLW  0E
05D46:  MOVLB  7
05D48:  MOVWF  xEC
05D4A:  MOVLB  0
05D4C:  CALL   1898
05D50:  MOVFF  391,427
05D54:  MOVLW  37
05D56:  MOVLB  4
05D58:  MOVWF  x28
05D5A:  MOVLB  0
05D5C:  CALL   1A5A
05D60:  MOVFF  390,427
05D64:  MOVLW  37
05D66:  MOVLB  4
05D68:  MOVWF  x28
05D6A:  MOVLB  0
05D6C:  CALL   1A5A
05D70:  MOVFF  38F,427
05D74:  MOVLW  37
05D76:  MOVLB  4
05D78:  MOVWF  x28
05D7A:  MOVLB  0
05D7C:  CALL   1A5A
05D80:  MOVFF  38E,427
05D84:  MOVLW  37
05D86:  MOVLB  4
05D88:  MOVWF  x28
05D8A:  MOVLB  0
05D8C:  CALL   1A5A
05D90:  MOVLW  0D
05D92:  MOVLB  8
05D94:  MOVWF  x2F
05D96:  MOVLB  0
05D98:  CALL   1816
05D9C:  MOVLW  0A
05D9E:  MOVLB  8
05DA0:  MOVWF  x2F
05DA2:  MOVLB  0
05DA4:  CALL   1816
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05DA8:  MOVLW  02
05DAA:  MOVWF  FF6
05DAC:  MOVLW  13
05DAE:  MOVWF  FF7
05DB0:  MOVLW  00
05DB2:  MOVWF  FF8
05DB4:  MOVLW  0E
05DB6:  MOVLB  7
05DB8:  MOVWF  xEC
05DBA:  MOVLB  0
05DBC:  CALL   1898
05DC0:  MOVFF  393,427
05DC4:  MOVLW  37
05DC6:  MOVLB  4
05DC8:  MOVWF  x28
05DCA:  MOVLB  0
05DCC:  CALL   1A5A
05DD0:  MOVFF  392,427
05DD4:  MOVLW  37
05DD6:  MOVLB  4
05DD8:  MOVWF  x28
05DDA:  MOVLB  0
05DDC:  CALL   1A5A
05DE0:  MOVLW  0D
05DE2:  MOVLB  8
05DE4:  MOVWF  x2F
05DE6:  MOVLB  0
05DE8:  CALL   1816
05DEC:  MOVLW  0A
05DEE:  MOVLB  8
05DF0:  MOVWF  x2F
05DF2:  MOVLB  0
05DF4:  CALL   1816
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05DF8:  MOVFF  38D,492
05DFC:  MOVLB  4
05DFE:  CLRF   x93
05E00:  MOVLB  0
05E02:  CALL   39E4
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05E06:  MOVLW  18
05E08:  MOVWF  FF6
05E0A:  MOVLW  13
05E0C:  MOVWF  FF7
05E0E:  MOVLW  00
05E10:  MOVWF  FF8
05E12:  CALL   1868
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05E16:  MOVLB  3
05E18:  CLRF   xD5
05E1A:  CLRF   xD4
05E1C:  MOVLB  0
05E1E:  MOVLB  3
05E20:  MOVF   xD5,W
05E22:  SUBWF  x93,W
05E24:  BTFSC  FD8.0
05E26:  BRA    5E2E
05E28:  MOVLB  0
05E2A:  GOTO   5F5C
05E2E:  MOVLB  0
05E30:  BTFSS  FD8.2
05E32:  GOTO   5E48
05E36:  MOVLB  3
05E38:  MOVF   x92,W
05E3A:  SUBWF  xD4,W
05E3C:  BTFSS  FD8.0
05E3E:  BRA    5E46
05E40:  MOVLB  0
05E42:  GOTO   5F5C
05E46:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
05E48:  MOVLB  3
05E4A:  RLCF   xD4,W
05E4C:  MOVWF  xD6
05E4E:  RLCF   xD5,W
05E50:  MOVWF  xD7
05E52:  RLCF   xD6,F
05E54:  RLCF   xD7,F
05E56:  RLCF   xD6,F
05E58:  RLCF   xD7,F
05E5A:  RLCF   xD6,F
05E5C:  RLCF   xD7,F
05E5E:  RLCF   xD6,F
05E60:  RLCF   xD7,F
05E62:  RLCF   xD6,F
05E64:  RLCF   xD7,F
05E66:  MOVLW  C0
05E68:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
05E6A:  CLRF   xD8
05E6C:  MOVLB  0
05E6E:  MOVLB  3
05E70:  MOVF   xD8,W
05E72:  SUBLW  3F
05E74:  BTFSC  FD8.0
05E76:  BRA    5E7E
05E78:  MOVLB  0
05E7A:  GOTO   5EDE
05E7E:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
05E80:  CLRF   03
05E82:  MOVLB  3
05E84:  MOVF   xD8,W
05E86:  ADDLW  94
05E88:  MOVWF  FE9
05E8A:  MOVLW  03
05E8C:  ADDWFC 03,W
05E8E:  MOVWF  FEA
05E90:  MOVF   xD8,W
05E92:  ADDWF  xD6,W
05E94:  MOVWF  xDF
05E96:  MOVLW  00
05E98:  ADDWFC xD7,W
05E9A:  MOVWF  xE0
05E9C:  MOVF   xDF,W
05E9E:  MOVWF  00
05EA0:  CLRF   03
05EA2:  MOVF   00,W
05EA4:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05EA6:  CLRF   03
05EA8:  MOVF   xD8,W
05EAA:  ADDLW  94
05EAC:  MOVWF  FE9
05EAE:  MOVLW  03
05EB0:  ADDWFC 03,W
05EB2:  MOVWF  FEA
05EB4:  MOVFF  FEF,3DD
05EB8:  MOVFF  3DD,427
05EBC:  MOVLW  37
05EBE:  MOVLB  4
05EC0:  MOVWF  x28
05EC2:  MOVLB  0
05EC4:  CALL   1A5A
05EC8:  MOVLW  20
05ECA:  MOVLB  8
05ECC:  MOVWF  x2F
05ECE:  MOVLB  0
05ED0:  CALL   1816
05ED4:  MOVLB  3
05ED6:  INCF   xD8,F
05ED8:  MOVLB  0
05EDA:  GOTO   5E6E
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05EDE:  MOVLB  3
05EE0:  RLCF   xD4,W
05EE2:  MOVWF  02
05EE4:  RLCF   xD5,W
05EE6:  MOVWF  03
05EE8:  RLCF   02,F
05EEA:  RLCF   03,F
05EEC:  RLCF   02,F
05EEE:  RLCF   03,F
05EF0:  RLCF   02,F
05EF2:  RLCF   03,F
05EF4:  RLCF   02,F
05EF6:  RLCF   03,F
05EF8:  RLCF   02,F
05EFA:  RLCF   03,F
05EFC:  MOVLW  C0
05EFE:  ANDWF  02,F
05F00:  MOVF   02,W
05F02:  ADDWF  x8E,W
05F04:  MOVWF  xD9
05F06:  MOVF   03,W
05F08:  ADDWFC x8F,W
05F0A:  MOVWF  xDA
05F0C:  MOVLW  00
05F0E:  ADDWFC x90,W
05F10:  MOVWF  xDB
05F12:  MOVLW  00
05F14:  ADDWFC x91,W
05F16:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
05F18:  MOVFF  E1,82F
05F1C:  MOVFF  E0,82E
05F20:  MOVFF  DF,82D
05F24:  MOVFF  DE,82C
05F28:  MOVFF  3DC,833
05F2C:  MOVFF  3DB,832
05F30:  MOVFF  3DA,831
05F34:  MOVFF  3D9,830
05F38:  MOVLW  03
05F3A:  MOVLB  8
05F3C:  MOVWF  x35
05F3E:  MOVLW  94
05F40:  MOVWF  x34
05F42:  CLRF   x37
05F44:  MOVLW  40
05F46:  MOVWF  x36
05F48:  MOVLB  0
05F4A:  CALL   3022
05F4E:  MOVLB  3
05F50:  INCF   xD4,F
05F52:  BTFSC  FD8.2
05F54:  INCF   xD5,F
05F56:  MOVLB  0
05F58:  GOTO   5E1E
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05F5C:  MOVFF  38D,492
05F60:  MOVLW  02
05F62:  MOVLB  4
05F64:  MOVWF  x93
05F66:  MOVLB  0
05F68:  CALL   39E4
....................    fprintf(PC, "\r\n");
05F6C:  MOVLW  0D
05F6E:  MOVLB  8
05F70:  MOVWF  x2F
05F72:  MOVLB  0
05F74:  CALL   1816
05F78:  MOVLW  0A
05F7A:  MOVLB  8
05F7C:  MOVWF  x2F
05F7E:  MOVLB  0
05F80:  CALL   1816
....................    fprintf(PC, "End Flash Write Demo\r\n");
05F84:  MOVLW  26
05F86:  MOVWF  FF6
05F88:  MOVLW  13
05F8A:  MOVWF  FF7
05F8C:  MOVLW  00
05F8E:  MOVWF  FF8
05F90:  CALL   1868
05F94:  GOTO   7180 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05FC8:  MOVLW  3E
05FCA:  MOVWF  FF6
05FCC:  MOVLW  13
05FCE:  MOVWF  FF7
05FD0:  MOVLW  00
05FD2:  MOVWF  FF8
05FD4:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05FD8:  MOVLB  3
05FDA:  MOVF   x8B,W
05FDC:  MOVWF  FE9
05FDE:  MOVF   x8C,W
05FE0:  MOVWF  FEA
05FE2:  MOVFF  FEF,491
05FE6:  MOVFF  491,492
05FEA:  MOVLW  01
05FEC:  MOVLB  4
05FEE:  MOVWF  x93
05FF0:  MOVLB  0
05FF2:  CALL   39E4
....................    flash_setting(mis_fm);
05FF6:  MOVFF  E1,494
05FFA:  MOVFF  E0,493
05FFE:  MOVFF  DF,492
06002:  MOVFF  DE,491
06006:  CALL   5F98
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
0600A:  MOVLB  3
0600C:  CLRF   x90
0600E:  CLRF   x8F
06010:  CLRF   x8E
06012:  CLRF   x8D
06014:  MOVLW  01
06016:  MOVWF  x91
06018:  MOVLW  02
0601A:  MOVWF  x92
0601C:  MOVLW  03
0601E:  MOVWF  x93
06020:  MOVLW  04
06022:  MOVWF  x94
06024:  CLRF   x95
06026:  CLRF   x96
06028:  CLRF   x97
0602A:  CLRF   x98
0602C:  CLRF   x99
0602E:  CLRF   x9A
06030:  CLRF   x9B
06032:  CLRF   x9C
06034:  CLRF   x9D
06036:  CLRF   x9E
06038:  CLRF   x9F
0603A:  CLRF   xA0
0603C:  CLRF   xA1
0603E:  CLRF   xA2
06040:  CLRF   xA3
06042:  CLRF   xA4
06044:  CLRF   xA5
06046:  CLRF   xA6
06048:  CLRF   xA7
0604A:  CLRF   xA8
0604C:  CLRF   xA9
0604E:  CLRF   xAA
06050:  CLRF   xAB
06052:  CLRF   xAC
06054:  CLRF   xAD
06056:  CLRF   xAE
06058:  CLRF   xAF
0605A:  CLRF   xB0
0605C:  CLRF   xB1
0605E:  CLRF   xB2
06060:  CLRF   xB3
06062:  CLRF   xB4
06064:  CLRF   xB5
06066:  CLRF   xB6
06068:  CLRF   xB7
0606A:  CLRF   xB8
0606C:  CLRF   xB9
0606E:  CLRF   xBA
06070:  CLRF   xBB
06072:  CLRF   xBC
06074:  CLRF   xBD
06076:  CLRF   xBE
06078:  CLRF   xBF
0607A:  CLRF   xC0
0607C:  CLRF   xC1
0607E:  CLRF   xC2
06080:  CLRF   xC3
06082:  CLRF   xC4
06084:  CLRF   xC5
06086:  CLRF   xC6
06088:  CLRF   xC7
0608A:  CLRF   xC8
0608C:  CLRF   xC9
0608E:  CLRF   xCA
06090:  CLRF   xCB
06092:  CLRF   xCC
06094:  CLRF   xCD
06096:  CLRF   xCE
06098:  CLRF   xCF
0609A:  CLRF   xD0
0609C:  CLRF   xD1
0609E:  CLRF   xD2
060A0:  CLRF   xD3
060A2:  CLRF   xD4
060A4:  CLRF   xD5
060A6:  CLRF   xD6
060A8:  CLRF   xD7
060AA:  CLRF   xD8
060AC:  CLRF   xD9
060AE:  CLRF   xDA
060B0:  CLRF   xDB
060B2:  CLRF   xDC
060B4:  CLRF   xDD
060B6:  CLRF   xDE
060B8:  CLRF   xDF
060BA:  CLRF   xE0
060BC:  CLRF   xE1
060BE:  CLRF   xE2
060C0:  CLRF   xE3
060C2:  CLRF   xE4
060C4:  CLRF   xE5
060C6:  CLRF   xE6
060C8:  CLRF   xE7
060CA:  CLRF   xE8
060CC:  CLRF   xE9
060CE:  CLRF   xEA
060D0:  CLRF   xEB
060D2:  CLRF   xEC
060D4:  CLRF   xED
060D6:  CLRF   xEE
060D8:  CLRF   xEF
060DA:  CLRF   xF0
060DC:  CLRF   xF1
060DE:  CLRF   xF2
060E0:  CLRF   xF3
060E2:  CLRF   xF4
060E4:  CLRF   xF5
060E6:  CLRF   xF6
060E8:  CLRF   xF7
060EA:  CLRF   xF8
060EC:  CLRF   xF9
060EE:  CLRF   xFA
060F0:  CLRF   xFB
060F2:  CLRF   xFC
060F4:  CLRF   xFD
060F6:  CLRF   xFE
060F8:  CLRF   xFF
060FA:  MOVLB  4
060FC:  CLRF   x00
060FE:  CLRF   x01
06100:  CLRF   x02
06102:  CLRF   x03
06104:  CLRF   x04
06106:  CLRF   x05
06108:  CLRF   x06
0610A:  CLRF   x07
0610C:  CLRF   x08
0610E:  CLRF   x09
06110:  CLRF   x0A
06112:  CLRF   x0B
06114:  CLRF   x0C
06116:  CLRF   x0D
06118:  CLRF   x0E
0611A:  CLRF   x0F
0611C:  CLRF   x10
0611E:  CLRF   x11
06120:  CLRF   x12
06122:  CLRF   x13
06124:  CLRF   x14
06126:  CLRF   x15
06128:  CLRF   x16
0612A:  CLRF   x17
0612C:  CLRF   x18
0612E:  CLRF   x19
06130:  CLRF   x1A
06132:  CLRF   x1B
06134:  CLRF   x1C
06136:  CLRF   x1D
06138:  CLRF   x1E
0613A:  CLRF   x1F
0613C:  CLRF   x20
0613E:  CLRF   x21
06140:  CLRF   x22
06142:  CLRF   x23
06144:  CLRF   x24
06146:  CLRF   x25
06148:  CLRF   x26
0614A:  CLRF   x27
0614C:  CLRF   x28
0614E:  CLRF   x29
06150:  CLRF   x2A
06152:  CLRF   x2B
06154:  CLRF   x2C
06156:  CLRF   x2D
06158:  CLRF   x2E
0615A:  CLRF   x2F
0615C:  CLRF   x30
0615E:  CLRF   x31
06160:  CLRF   x32
06162:  CLRF   x33
06164:  CLRF   x34
06166:  CLRF   x35
06168:  CLRF   x36
0616A:  CLRF   x37
0616C:  CLRF   x38
0616E:  CLRF   x39
06170:  CLRF   x3A
06172:  CLRF   x3B
06174:  CLRF   x3C
06176:  CLRF   x3D
06178:  CLRF   x3E
0617A:  CLRF   x3F
0617C:  CLRF   x40
0617E:  CLRF   x41
06180:  CLRF   x42
06182:  CLRF   x43
06184:  CLRF   x44
06186:  CLRF   x45
06188:  CLRF   x46
0618A:  CLRF   x47
0618C:  CLRF   x48
0618E:  CLRF   x49
06190:  CLRF   x4A
06192:  CLRF   x4B
06194:  CLRF   x4C
06196:  CLRF   x4D
06198:  CLRF   x4E
0619A:  CLRF   x4F
0619C:  CLRF   x50
0619E:  CLRF   x51
061A0:  CLRF   x52
061A2:  CLRF   x53
061A4:  CLRF   x54
061A6:  CLRF   x55
061A8:  CLRF   x56
061AA:  CLRF   x57
061AC:  CLRF   x58
061AE:  CLRF   x59
061B0:  CLRF   x5A
061B2:  CLRF   x5B
061B4:  CLRF   x5C
061B6:  CLRF   x5D
061B8:  CLRF   x5E
061BA:  CLRF   x5F
061BC:  CLRF   x60
061BE:  CLRF   x61
061C0:  CLRF   x62
061C2:  CLRF   x63
061C4:  CLRF   x64
061C6:  CLRF   x65
061C8:  CLRF   x66
061CA:  CLRF   x67
061CC:  CLRF   x68
061CE:  CLRF   x69
061D0:  CLRF   x6A
061D2:  CLRF   x6B
061D4:  CLRF   x6C
061D6:  CLRF   x6D
061D8:  CLRF   x6E
061DA:  CLRF   x6F
061DC:  CLRF   x70
061DE:  CLRF   x71
061E0:  CLRF   x72
061E2:  CLRF   x73
061E4:  CLRF   x74
061E6:  CLRF   x75
061E8:  CLRF   x76
061EA:  CLRF   x77
061EC:  CLRF   x78
061EE:  CLRF   x79
061F0:  CLRF   x7A
061F2:  CLRF   x7B
061F4:  CLRF   x7C
061F6:  CLRF   x7D
061F8:  CLRF   x7E
061FA:  CLRF   x7F
061FC:  CLRF   x80
061FE:  CLRF   x81
06200:  CLRF   x82
06202:  CLRF   x83
06204:  CLRF   x84
06206:  CLRF   x85
06208:  CLRF   x86
0620A:  CLRF   x87
0620C:  CLRF   x88
0620E:  CLRF   x89
06210:  CLRF   x8A
06212:  CLRF   x8B
06214:  CLRF   x8C
06216:  CLRF   x8D
06218:  CLRF   x8E
0621A:  CLRF   x8F
0621C:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
0621E:  MOVFF  E1,82F
06222:  MOVFF  E0,82E
06226:  MOVFF  DF,82D
0622A:  MOVFF  DE,82C
0622E:  MOVFF  390,833
06232:  MOVFF  38F,832
06236:  MOVFF  38E,831
0623A:  MOVFF  38D,830
0623E:  MOVLW  03
06240:  MOVLB  8
06242:  MOVWF  x35
06244:  MOVLW  91
06246:  MOVWF  x34
06248:  MOVLW  01
0624A:  MOVWF  x37
0624C:  CLRF   x36
0624E:  MOVLB  0
06250:  CALL   3022
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06254:  MOVLB  3
06256:  MOVF   x8B,W
06258:  MOVWF  FE9
0625A:  MOVF   x8C,W
0625C:  MOVWF  FEA
0625E:  MOVFF  FEF,491
06262:  MOVFF  491,492
06266:  MOVLW  02
06268:  MOVLB  4
0626A:  MOVWF  x93
0626C:  MOVLB  0
0626E:  CALL   39E4
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06272:  MOVLW  64
06274:  MOVWF  FF6
06276:  MOVLW  13
06278:  MOVWF  FF7
0627A:  MOVLW  00
0627C:  MOVWF  FF8
0627E:  CALL   1868
06282:  GOTO   7190 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06286:  MOVLW  88
06288:  MOVWF  FF6
0628A:  MOVLW  13
0628C:  MOVWF  FF7
0628E:  MOVLW  00
06290:  MOVWF  FF8
06292:  CALL   1868
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
06296:  MOVLB  3
06298:  MOVF   x8B,W
0629A:  MOVWF  FE9
0629C:  MOVF   x8C,W
0629E:  MOVWF  FEA
062A0:  MOVFF  FEF,3DD
062A4:  MOVFF  3DD,492
062A8:  MOVLW  01
062AA:  MOVLB  4
062AC:  MOVWF  x93
062AE:  MOVLB  0
062B0:  CALL   39E4
....................    FLASH_PARAM flash_param = {0};
062B4:  MOVLB  3
062B6:  CLRF   x8D
062B8:  CLRF   x8E
062BA:  CLRF   x8F
062BC:  CLRF   x90
062BE:  CLRF   x91
062C0:  CLRF   x92
062C2:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
062C4:  MOVF   x8B,W
062C6:  MOVWF  FE9
062C8:  MOVF   x8C,W
062CA:  MOVWF  FEA
062CC:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
062D0:  MOVLW  01
062D2:  ADDWF  x8B,W
062D4:  MOVWF  FE9
062D6:  MOVLW  00
062D8:  ADDWFC x8C,W
062DA:  MOVWF  FEA
062DC:  MOVF   FEF,W
062DE:  CLRF   xE0
062E0:  CLRF   xDF
062E2:  CLRF   xDE
062E4:  MOVWF  xDD
062E6:  MOVFF  3DD,3E0
062EA:  CLRF   xDD
062EC:  CLRF   xDE
062EE:  CLRF   xDF
062F0:  MOVLW  02
062F2:  ADDWF  x8B,W
062F4:  MOVWF  FE9
062F6:  MOVLW  00
062F8:  ADDWFC x8C,W
062FA:  MOVWF  FEA
062FC:  MOVF   FEF,W
062FE:  CLRF   xE5
06300:  CLRF   xE4
06302:  CLRF   xE3
06304:  MOVWF  xE2
06306:  MOVFF  3E3,03
0630A:  MOVFF  3E2,02
0630E:  CLRF   00
06310:  CLRF   01
06312:  MOVF   00,W
06314:  IORWF  xDD,F
06316:  MOVF   01,W
06318:  IORWF  xDE,F
0631A:  MOVF   02,W
0631C:  IORWF  xDF,F
0631E:  MOVF   03,W
06320:  IORWF  xE0,F
06322:  MOVLW  03
06324:  ADDWF  x8B,W
06326:  MOVWF  FE9
06328:  MOVLW  00
0632A:  ADDWFC x8C,W
0632C:  MOVWF  FEA
0632E:  MOVF   FEF,W
06330:  CLRF   xE5
06332:  CLRF   xE4
06334:  CLRF   xE3
06336:  MOVWF  xE2
06338:  MOVFF  3E4,03
0633C:  MOVFF  3E3,02
06340:  MOVFF  3E2,01
06344:  CLRF   00
06346:  MOVF   00,W
06348:  IORWF  xDD,F
0634A:  MOVF   01,W
0634C:  IORWF  xDE,F
0634E:  MOVF   02,W
06350:  IORWF  xDF,F
06352:  MOVF   03,W
06354:  IORWF  xE0,F
06356:  MOVLW  04
06358:  ADDWF  x8B,W
0635A:  MOVWF  FE9
0635C:  MOVLW  00
0635E:  ADDWFC x8C,W
06360:  MOVWF  FEA
06362:  MOVF   FEF,W
06364:  MOVWF  00
06366:  CLRF   01
06368:  CLRF   02
0636A:  CLRF   03
0636C:  MOVF   00,W
0636E:  IORWF  xDD,W
06370:  MOVWF  x90
06372:  MOVF   01,W
06374:  IORWF  xDE,W
06376:  MOVWF  x91
06378:  MOVF   02,W
0637A:  IORWF  xDF,W
0637C:  MOVWF  x92
0637E:  MOVF   03,W
06380:  IORWF  xE0,W
06382:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
06384:  MOVLW  07
06386:  ADDWF  x8B,W
06388:  MOVWF  FE9
0638A:  MOVLW  00
0638C:  ADDWFC x8C,W
0638E:  MOVWF  FEA
06390:  MOVF   FEF,W
06392:  CLRF   xDE
06394:  MOVWF  xDD
06396:  MOVFF  3DD,3DE
0639A:  CLRF   xDD
0639C:  MOVLW  08
0639E:  ADDWF  x8B,W
063A0:  MOVWF  FE9
063A2:  MOVLW  00
063A4:  ADDWFC x8C,W
063A6:  MOVWF  FEA
063A8:  MOVF   FEF,W
063AA:  CLRF   03
063AC:  IORWF  xDD,W
063AE:  MOVWF  x8E
063B0:  MOVF   03,W
063B2:  IORWF  xDE,W
063B4:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
063B6:  MOVLW  9C
063B8:  MOVWF  FF6
063BA:  MOVLW  13
063BC:  MOVWF  FF7
063BE:  MOVLW  00
063C0:  MOVWF  FF8
063C2:  MOVLW  0C
063C4:  MOVLB  7
063C6:  MOVWF  xEC
063C8:  MOVLB  0
063CA:  CALL   1898
063CE:  MOVFF  38D,427
063D2:  MOVLW  37
063D4:  MOVLB  4
063D6:  MOVWF  x28
063D8:  MOVLB  0
063DA:  CALL   1A5A
063DE:  MOVLW  0D
063E0:  MOVLB  8
063E2:  MOVWF  x2F
063E4:  MOVLB  0
063E6:  CALL   1816
063EA:  MOVLW  0A
063EC:  MOVLB  8
063EE:  MOVWF  x2F
063F0:  MOVLB  0
063F2:  CALL   1816
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
063F6:  MOVLW  B0
063F8:  MOVWF  FF6
063FA:  MOVLW  13
063FC:  MOVWF  FF7
063FE:  MOVLW  00
06400:  MOVWF  FF8
06402:  MOVLW  0E
06404:  MOVLB  7
06406:  MOVWF  xEC
06408:  MOVLB  0
0640A:  CALL   1898
0640E:  MOVFF  393,427
06412:  MOVLW  37
06414:  MOVLB  4
06416:  MOVWF  x28
06418:  MOVLB  0
0641A:  CALL   1A5A
0641E:  MOVFF  392,427
06422:  MOVLW  37
06424:  MOVLB  4
06426:  MOVWF  x28
06428:  MOVLB  0
0642A:  CALL   1A5A
0642E:  MOVFF  391,427
06432:  MOVLW  37
06434:  MOVLB  4
06436:  MOVWF  x28
06438:  MOVLB  0
0643A:  CALL   1A5A
0643E:  MOVFF  390,427
06442:  MOVLW  37
06444:  MOVLB  4
06446:  MOVWF  x28
06448:  MOVLB  0
0644A:  CALL   1A5A
0644E:  MOVLW  0D
06450:  MOVLB  8
06452:  MOVWF  x2F
06454:  MOVLB  0
06456:  CALL   1816
0645A:  MOVLW  0A
0645C:  MOVLB  8
0645E:  MOVWF  x2F
06460:  MOVLB  0
06462:  CALL   1816
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06466:  MOVLW  C6
06468:  MOVWF  FF6
0646A:  MOVLW  13
0646C:  MOVWF  FF7
0646E:  MOVLW  00
06470:  MOVWF  FF8
06472:  MOVLW  0E
06474:  MOVLB  7
06476:  MOVWF  xEC
06478:  MOVLB  0
0647A:  CALL   1898
0647E:  MOVFF  38F,427
06482:  MOVLW  37
06484:  MOVLB  4
06486:  MOVWF  x28
06488:  MOVLB  0
0648A:  CALL   1A5A
0648E:  MOVFF  38E,427
06492:  MOVLW  37
06494:  MOVLB  4
06496:  MOVWF  x28
06498:  MOVLB  0
0649A:  CALL   1A5A
0649E:  MOVLW  0D
064A0:  MOVLB  8
064A2:  MOVWF  x2F
064A4:  MOVLB  0
064A6:  CALL   1816
064AA:  MOVLW  0A
064AC:  MOVLB  8
064AE:  MOVWF  x2F
064B0:  MOVLB  0
064B2:  CALL   1816
....................    
....................    piclog_make(flash_param.id, 0x00);
064B6:  MOVFF  38D,492
064BA:  MOVLB  4
064BC:  CLRF   x93
064BE:  MOVLB  0
064C0:  CALL   39E4
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
064C4:  MOVLB  3
064C6:  CLRF   x94
064C8:  CLRF   x95
064CA:  CLRF   x96
064CC:  CLRF   x97
064CE:  CLRF   x98
064D0:  CLRF   x99
064D2:  CLRF   x9A
064D4:  CLRF   x9B
064D6:  CLRF   x9C
064D8:  CLRF   x9D
064DA:  CLRF   x9E
064DC:  CLRF   x9F
064DE:  CLRF   xA0
064E0:  CLRF   xA1
064E2:  CLRF   xA2
064E4:  CLRF   xA3
064E6:  CLRF   xA4
064E8:  CLRF   xA5
064EA:  CLRF   xA6
064EC:  CLRF   xA7
064EE:  CLRF   xA8
064F0:  CLRF   xA9
064F2:  CLRF   xAA
064F4:  CLRF   xAB
064F6:  CLRF   xAC
064F8:  CLRF   xAD
064FA:  CLRF   xAE
064FC:  CLRF   xAF
064FE:  CLRF   xB0
06500:  CLRF   xB1
06502:  CLRF   xB2
06504:  CLRF   xB3
06506:  CLRF   xB4
06508:  CLRF   xB5
0650A:  CLRF   xB6
0650C:  CLRF   xB7
0650E:  CLRF   xB8
06510:  CLRF   xB9
06512:  CLRF   xBA
06514:  CLRF   xBB
06516:  CLRF   xBC
06518:  CLRF   xBD
0651A:  CLRF   xBE
0651C:  CLRF   xBF
0651E:  CLRF   xC0
06520:  CLRF   xC1
06522:  CLRF   xC2
06524:  CLRF   xC3
06526:  CLRF   xC4
06528:  CLRF   xC5
0652A:  CLRF   xC6
0652C:  CLRF   xC7
0652E:  CLRF   xC8
06530:  CLRF   xC9
06532:  CLRF   xCA
06534:  CLRF   xCB
06536:  CLRF   xCC
06538:  CLRF   xCD
0653A:  CLRF   xCE
0653C:  CLRF   xCF
0653E:  CLRF   xD0
06540:  CLRF   xD1
06542:  CLRF   xD2
06544:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06546:  MOVLW  DC
06548:  MOVWF  FF6
0654A:  MOVLW  13
0654C:  MOVWF  FF7
0654E:  MOVLW  00
06550:  MOVWF  FF8
06552:  MOVLB  0
06554:  CALL   1868
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06558:  MOVFF  E1,82F
0655C:  MOVFF  E0,82E
06560:  MOVFF  DF,82D
06564:  MOVFF  DE,82C
06568:  CALL   1F36
0656C:  MOVF   01,F
0656E:  BTFSS  FD8.2
06570:  GOTO   6584
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06574:  MOVLW  E8
06576:  MOVWF  FF6
06578:  MOVLW  13
0657A:  MOVWF  FF7
0657C:  MOVLW  00
0657E:  MOVWF  FF8
06580:  CALL   1868
....................       // return;
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06584:  MOVLB  3
06586:  CLRF   xDB
06588:  CLRF   xDA
0658A:  CLRF   xD9
0658C:  CLRF   xD8
0658E:  MOVLB  0
06590:  MOVLB  3
06592:  MOVF   xDB,F
06594:  BTFSC  FD8.2
06596:  BRA    659E
06598:  MOVLB  0
0659A:  GOTO   66EC
0659E:  MOVLB  0
065A0:  MOVLB  3
065A2:  MOVF   xDA,F
065A4:  BTFSC  FD8.2
065A6:  BRA    65AE
065A8:  MOVLB  0
065AA:  GOTO   66EC
065AE:  MOVLB  0
065B0:  MOVLB  3
065B2:  MOVF   xD9,W
065B4:  SUBWF  x8F,W
065B6:  BTFSC  FD8.0
065B8:  BRA    65C0
065BA:  MOVLB  0
065BC:  GOTO   66EC
065C0:  MOVLB  0
065C2:  BTFSS  FD8.2
065C4:  GOTO   65DA
065C8:  MOVLB  3
065CA:  MOVF   x8E,W
065CC:  SUBWF  xD8,W
065CE:  BTFSS  FD8.0
065D0:  BRA    65D8
065D2:  MOVLB  0
065D4:  GOTO   66EC
065D8:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
065DA:  MOVLB  3
065DC:  RLCF   xD8,W
065DE:  MOVWF  00
065E0:  RLCF   xD9,W
065E2:  MOVWF  01
065E4:  RLCF   xDA,W
065E6:  MOVWF  02
065E8:  RLCF   xDB,W
065EA:  MOVWF  03
065EC:  RLCF   00,F
065EE:  RLCF   01,F
065F0:  RLCF   02,F
065F2:  RLCF   03,F
065F4:  RLCF   00,F
065F6:  RLCF   01,F
065F8:  RLCF   02,F
065FA:  RLCF   03,F
065FC:  RLCF   00,F
065FE:  RLCF   01,F
06600:  RLCF   02,F
06602:  RLCF   03,F
06604:  RLCF   00,F
06606:  RLCF   01,F
06608:  RLCF   02,F
0660A:  RLCF   03,F
0660C:  RLCF   00,F
0660E:  RLCF   01,F
06610:  RLCF   02,F
06612:  RLCF   03,F
06614:  MOVLW  C0
06616:  ANDWF  00,F
06618:  MOVF   00,W
0661A:  ADDWF  x90,W
0661C:  MOVWF  xD4
0661E:  MOVF   01,W
06620:  ADDWFC x91,W
06622:  MOVWF  xD5
06624:  MOVF   02,W
06626:  ADDWFC x92,W
06628:  MOVWF  xD6
0662A:  MOVF   03,W
0662C:  ADDWFC x93,W
0662E:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06630:  MOVFF  E1,429
06634:  MOVFF  E0,428
06638:  MOVFF  DF,427
0663C:  MOVFF  DE,426
06640:  MOVFF  3D7,42D
06644:  MOVFF  3D6,42C
06648:  MOVFF  3D5,42B
0664C:  MOVFF  3D4,42A
06650:  MOVLW  03
06652:  MOVLB  4
06654:  MOVWF  x2F
06656:  MOVLW  94
06658:  MOVWF  x2E
0665A:  CLRF   x33
0665C:  CLRF   x32
0665E:  CLRF   x31
06660:  MOVLW  40
06662:  MOVWF  x30
06664:  MOVLB  0
06666:  CALL   1FFC
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
0666A:  MOVLB  3
0666C:  CLRF   xDC
0666E:  MOVLB  0
06670:  MOVLB  3
06672:  MOVF   xDC,W
06674:  SUBLW  3F
06676:  BTFSC  FD8.0
06678:  BRA    6680
0667A:  MOVLB  0
0667C:  GOTO   66BC
06680:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06682:  CLRF   03
06684:  MOVLB  3
06686:  MOVF   xDC,W
06688:  ADDLW  94
0668A:  MOVWF  FE9
0668C:  MOVLW  03
0668E:  ADDWFC 03,W
06690:  MOVWF  FEA
06692:  MOVFF  FEF,3DD
06696:  MOVFF  3DD,427
0669A:  MOVLW  37
0669C:  MOVLB  4
0669E:  MOVWF  x28
066A0:  MOVLB  0
066A2:  CALL   1A5A
066A6:  MOVLW  20
066A8:  MOVLB  8
066AA:  MOVWF  x2F
066AC:  MOVLB  0
066AE:  CALL   1816
066B2:  MOVLB  3
066B4:  INCF   xDC,F
066B6:  MOVLB  0
066B8:  GOTO   6670
....................       }
....................       fprintf(PC,"\r\n");
066BC:  MOVLW  0D
066BE:  MOVLB  8
066C0:  MOVWF  x2F
066C2:  MOVLB  0
066C4:  CALL   1816
066C8:  MOVLW  0A
066CA:  MOVLB  8
066CC:  MOVWF  x2F
066CE:  MOVLB  0
066D0:  CALL   1816
066D4:  MOVLW  01
066D6:  MOVLB  3
066D8:  ADDWF  xD8,F
066DA:  BTFSC  FD8.0
066DC:  INCF   xD9,F
066DE:  BTFSC  FD8.2
066E0:  INCF   xDA,F
066E2:  BTFSC  FD8.2
066E4:  INCF   xDB,F
066E6:  MOVLB  0
066E8:  GOTO   6590
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
066EC:  MOVFF  38D,492
066F0:  MOVLW  02
066F2:  MOVLB  4
066F4:  MOVWF  x93
066F6:  MOVLB  0
066F8:  CALL   39E4
....................    fprintf(PC, "End Flash Read\r\n");
066FC:  MOVLW  0A
066FE:  MOVWF  FF6
06700:  MOVLW  14
06702:  MOVWF  FF7
06704:  MOVLW  00
06706:  MOVWF  FF8
06708:  CALL   1868
0670C:  GOTO   71A0 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06710:  MOVLW  1C
06712:  MOVWF  FF6
06714:  MOVLW  14
06716:  MOVWF  FF7
06718:  MOVLW  00
0671A:  MOVWF  FF8
0671C:  CALL   1868
....................    flash_setting(mis_fm);
06720:  MOVFF  E1,494
06724:  MOVFF  E0,493
06728:  MOVFF  DF,492
0672C:  MOVFF  DE,491
06730:  CALL   5F98
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06734:  MOVLB  3
06736:  CLRF   x90
06738:  CLRF   x8F
0673A:  CLRF   x8E
0673C:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
0673E:  MOVFF  E1,429
06742:  MOVFF  E0,428
06746:  MOVFF  DF,427
0674A:  MOVFF  DE,426
0674E:  MOVFF  390,42D
06752:  MOVFF  38F,42C
06756:  MOVFF  38E,42B
0675A:  MOVFF  38D,42A
0675E:  MOVLW  03
06760:  MOVLB  4
06762:  MOVWF  x2F
06764:  MOVLW  91
06766:  MOVWF  x2E
06768:  CLRF   x33
0676A:  CLRF   x32
0676C:  CLRF   x31
0676E:  MOVLW  04
06770:  MOVWF  x30
06772:  MOVLB  0
06774:  CALL   1FFC
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06778:  MOVLW  38
0677A:  MOVWF  FF6
0677C:  MOVLW  14
0677E:  MOVWF  FF7
06780:  MOVLW  00
06782:  MOVWF  FF8
06784:  MOVLW  0B
06786:  MOVLB  7
06788:  MOVWF  xEC
0678A:  MOVLB  0
0678C:  CALL   1898
06790:  MOVFF  391,427
06794:  MOVLW  37
06796:  MOVLB  4
06798:  MOVWF  x28
0679A:  MOVLB  0
0679C:  CALL   1A5A
067A0:  MOVLW  20
067A2:  MOVLB  8
067A4:  MOVWF  x2F
067A6:  MOVLB  0
067A8:  CALL   1816
067AC:  MOVFF  392,427
067B0:  MOVLW  37
067B2:  MOVLB  4
067B4:  MOVWF  x28
067B6:  MOVLB  0
067B8:  CALL   1A5A
067BC:  MOVLW  20
067BE:  MOVLB  8
067C0:  MOVWF  x2F
067C2:  MOVLB  0
067C4:  CALL   1816
067C8:  MOVFF  393,427
067CC:  MOVLW  37
067CE:  MOVLB  4
067D0:  MOVWF  x28
067D2:  MOVLB  0
067D4:  CALL   1A5A
067D8:  MOVLW  20
067DA:  MOVLB  8
067DC:  MOVWF  x2F
067DE:  MOVLB  0
067E0:  CALL   1816
067E4:  MOVFF  394,427
067E8:  MOVLW  37
067EA:  MOVLB  4
067EC:  MOVWF  x28
067EE:  MOVLB  0
067F0:  CALL   1A5A
067F4:  MOVLW  0D
067F6:  MOVLB  8
067F8:  MOVWF  x2F
067FA:  MOVLB  0
067FC:  CALL   1816
06800:  MOVLW  0A
06802:  MOVLB  8
06804:  MOVWF  x2F
06806:  MOVLB  0
06808:  CALL   1816
....................    fprintf(PC, "End Flash Read Address\r\n");
0680C:  MOVLW  5A
0680E:  MOVWF  FF6
06810:  MOVLW  14
06812:  MOVWF  FF7
06814:  MOVLW  00
06816:  MOVWF  FF8
06818:  CALL   1868
0681C:  GOTO   71B0 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06934:  MOVLW  74
06936:  MOVWF  FF6
06938:  MOVLW  14
0693A:  MOVWF  FF7
0693C:  MOVLW  00
0693E:  MOVWF  FF8
06940:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06944:  MOVLB  3
06946:  MOVF   x8B,W
06948:  MOVWF  FE9
0694A:  MOVF   x8C,W
0694C:  MOVWF  FEA
0694E:  MOVFF  FEF,38D
06952:  MOVFF  38D,492
06956:  MOVLW  01
06958:  MOVLB  4
0695A:  MOVWF  x93
0695C:  MOVLB  0
0695E:  CALL   39E4
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
06962:  MOVFF  38C,38E
06966:  MOVFF  38B,38D
0696A:  CALL   565A
....................    mode_misf_address_reset(parameter); // Reset the address area
0696E:  MOVFF  38C,38E
06972:  MOVFF  38B,38D
06976:  GOTO   6820
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0697A:  MOVLW  92
0697C:  MOVWF  FF6
0697E:  MOVLW  14
06980:  MOVWF  FF7
06982:  MOVLW  00
06984:  MOVWF  FF8
06986:  CALL   1868
0698A:  GOTO   71C0 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
....................    flash_setting(mis_fm);
....................    flash_setting(smf);
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
....................    write_data_bytes(smf, dest_address, read_data, 256);
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
....................    flash_setting(smf);
....................    unsigned int32 erase_address = 0x00000000; // Example address
....................    sector_erase(smf, erase_address); // Erase the sector
....................    fprintf(PC, "End Flash SMF Erase\r\n");
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06820:  MOVLW  7C
06822:  MOVWF  FF6
06824:  MOVLW  15
06826:  MOVWF  FF7
06828:  MOVLW  00
0682A:  MOVWF  FF8
0682C:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06830:  MOVLB  3
06832:  MOVF   x8D,W
06834:  MOVWF  FE9
06836:  MOVF   x8E,W
06838:  MOVWF  FEA
0683A:  MOVFF  FEF,3CF
0683E:  MOVFF  3CF,492
06842:  MOVLW  01
06844:  MOVLB  4
06846:  MOVWF  x93
06848:  MOVLB  0
0684A:  CALL   39E4
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
0684E:  MOVLB  3
06850:  CLRF   x8F
06852:  CLRF   x90
06854:  CLRF   x91
06856:  CLRF   x92
06858:  CLRF   x93
0685A:  CLRF   x94
0685C:  CLRF   x95
0685E:  CLRF   x96
06860:  CLRF   x97
06862:  CLRF   x98
06864:  CLRF   x99
06866:  CLRF   x9A
06868:  CLRF   x9B
0686A:  CLRF   x9C
0686C:  CLRF   x9D
0686E:  CLRF   x9E
06870:  CLRF   x9F
06872:  CLRF   xA0
06874:  CLRF   xA1
06876:  CLRF   xA2
06878:  CLRF   xA3
0687A:  CLRF   xA4
0687C:  CLRF   xA5
0687E:  CLRF   xA6
06880:  CLRF   xA7
06882:  CLRF   xA8
06884:  CLRF   xA9
06886:  CLRF   xAA
06888:  CLRF   xAB
0688A:  CLRF   xAC
0688C:  CLRF   xAD
0688E:  CLRF   xAE
06890:  CLRF   xAF
06892:  CLRF   xB0
06894:  CLRF   xB1
06896:  CLRF   xB2
06898:  CLRF   xB3
0689A:  CLRF   xB4
0689C:  CLRF   xB5
0689E:  CLRF   xB6
068A0:  CLRF   xB7
068A2:  CLRF   xB8
068A4:  CLRF   xB9
068A6:  CLRF   xBA
068A8:  CLRF   xBB
068AA:  CLRF   xBC
068AC:  CLRF   xBD
068AE:  CLRF   xBE
068B0:  CLRF   xBF
068B2:  CLRF   xC0
068B4:  CLRF   xC1
068B6:  CLRF   xC2
068B8:  CLRF   xC3
068BA:  CLRF   xC4
068BC:  CLRF   xC5
068BE:  CLRF   xC6
068C0:  CLRF   xC7
068C2:  CLRF   xC8
068C4:  CLRF   xC9
068C6:  CLRF   xCA
068C8:  CLRF   xCB
068CA:  CLRF   xCC
068CC:  CLRF   xCD
068CE:  CLRF   xCE
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
068D0:  MOVFF  E1,82F
068D4:  MOVFF  E0,82E
068D8:  MOVFF  DF,82D
068DC:  MOVFF  DE,82C
068E0:  MOVLB  8
068E2:  CLRF   x33
068E4:  CLRF   x32
068E6:  CLRF   x31
068E8:  CLRF   x30
068EA:  MOVLW  03
068EC:  MOVWF  x35
068EE:  MOVLW  8F
068F0:  MOVWF  x34
068F2:  CLRF   x37
068F4:  MOVLW  40
068F6:  MOVWF  x36
068F8:  MOVLB  0
068FA:  CALL   3022
....................    misf_init(); // Update the address area after writing
068FE:  CALL   2214
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06902:  MOVLB  3
06904:  MOVF   x8D,W
06906:  MOVWF  FE9
06908:  MOVF   x8E,W
0690A:  MOVWF  FEA
0690C:  MOVFF  FEF,3CF
06910:  MOVFF  3CF,492
06914:  MOVLW  02
06916:  MOVLB  4
06918:  MOVWF  x93
0691A:  MOVLB  0
0691C:  CALL   39E4
....................    fprintf(PC, "End Flash Address Reset\r\n");
06920:  MOVLW  98
06922:  MOVWF  FF6
06924:  MOVLW  15
06926:  MOVWF  FF7
06928:  MOVLW  00
0692A:  MOVWF  FF8
0692C:  CALL   1868
06930:  GOTO   697A (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(unsigned int8 parameter[])
*
0698E:  MOVLW  01
06990:  MOVLB  3
06992:  ADDWF  x8B,W
06994:  MOVWF  FE9
06996:  MOVLW  00
06998:  ADDWFC x8C,W
0699A:  MOVWF  FEA
0699C:  MOVF   FEF,W
0699E:  CLRF   xDD
069A0:  CLRF   xDC
069A2:  CLRF   xDB
069A4:  MOVWF  xDA
069A6:  MOVFF  3DA,3DD
069AA:  CLRF   xDA
069AC:  CLRF   xDB
069AE:  CLRF   xDC
069B0:  MOVLW  02
069B2:  ADDWF  x8B,W
069B4:  MOVWF  FE9
069B6:  MOVLW  00
069B8:  ADDWFC x8C,W
069BA:  MOVWF  FEA
069BC:  MOVF   FEF,W
069BE:  CLRF   xE2
069C0:  CLRF   xE1
069C2:  CLRF   xE0
069C4:  MOVWF  xDF
069C6:  MOVFF  3E0,03
069CA:  MOVFF  3DF,02
069CE:  CLRF   00
069D0:  CLRF   01
069D2:  MOVF   00,W
069D4:  IORWF  xDA,F
069D6:  MOVF   01,W
069D8:  IORWF  xDB,F
069DA:  MOVF   02,W
069DC:  IORWF  xDC,F
069DE:  MOVF   03,W
069E0:  IORWF  xDD,F
069E2:  MOVLW  03
069E4:  ADDWF  x8B,W
069E6:  MOVWF  FE9
069E8:  MOVLW  00
069EA:  ADDWFC x8C,W
069EC:  MOVWF  FEA
069EE:  MOVF   FEF,W
069F0:  CLRF   xE2
069F2:  CLRF   xE1
069F4:  CLRF   xE0
069F6:  MOVWF  xDF
069F8:  MOVFF  3E1,03
069FC:  MOVFF  3E0,02
06A00:  MOVFF  3DF,01
06A04:  CLRF   00
06A06:  MOVF   00,W
06A08:  IORWF  xDA,F
06A0A:  MOVF   01,W
06A0C:  IORWF  xDB,F
06A0E:  MOVF   02,W
06A10:  IORWF  xDC,F
06A12:  MOVF   03,W
06A14:  IORWF  xDD,F
06A16:  MOVLW  04
06A18:  ADDWF  x8B,W
06A1A:  MOVWF  FE9
06A1C:  MOVLW  00
06A1E:  ADDWFC x8C,W
06A20:  MOVWF  FEA
06A22:  MOVF   FEF,W
06A24:  MOVWF  00
06A26:  CLRF   01
06A28:  CLRF   02
06A2A:  CLRF   03
06A2C:  MOVF   00,W
06A2E:  IORWF  xDA,W
06A30:  MOVWF  x8D
06A32:  MOVF   01,W
06A34:  IORWF  xDB,W
06A36:  MOVWF  x8E
06A38:  MOVF   02,W
06A3A:  IORWF  xDC,W
06A3C:  MOVWF  x8F
06A3E:  MOVF   03,W
06A40:  IORWF  xDD,W
06A42:  MOVWF  x90
06A44:  MOVLW  07
06A46:  ADDWF  x8B,W
06A48:  MOVWF  FE9
06A4A:  MOVLW  00
06A4C:  ADDWFC x8C,W
06A4E:  MOVWF  FEA
06A50:  MOVF   FEF,W
06A52:  CLRF   xDB
06A54:  MOVWF  xDA
06A56:  MOVFF  3DA,3DB
06A5A:  CLRF   xDA
06A5C:  MOVLW  08
06A5E:  ADDWF  x8B,W
06A60:  MOVWF  FE9
06A62:  MOVLW  00
06A64:  ADDWFC x8C,W
06A66:  MOVWF  FEA
06A68:  MOVF   FEF,W
06A6A:  CLRF   03
06A6C:  IORWF  xDA,W
06A6E:  MOVWF  x91
06A70:  MOVF   03,W
06A72:  IORWF  xDB,W
06A74:  MOVWF  x92
.................... {
....................    unsigned int32 address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    unsigned int16 packet_num = 
....................       ((unsigned int16)parameter[7] << 8) |
....................       ((unsigned int16)parameter[8]);
....................       
....................    unsigned int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06A76:  CLRF   x93
06A78:  CLRF   x94
06A7A:  CLRF   x95
06A7C:  CLRF   x96
06A7E:  CLRF   x97
06A80:  CLRF   x98
06A82:  CLRF   x99
06A84:  CLRF   x9A
06A86:  CLRF   x9B
06A88:  CLRF   x9C
06A8A:  CLRF   x9D
06A8C:  CLRF   x9E
06A8E:  CLRF   x9F
06A90:  CLRF   xA0
06A92:  CLRF   xA1
06A94:  CLRF   xA2
06A96:  CLRF   xA3
06A98:  CLRF   xA4
06A9A:  CLRF   xA5
06A9C:  CLRF   xA6
06A9E:  CLRF   xA7
06AA0:  CLRF   xA8
06AA2:  CLRF   xA9
06AA4:  CLRF   xAA
06AA6:  CLRF   xAB
06AA8:  CLRF   xAC
06AAA:  CLRF   xAD
06AAC:  CLRF   xAE
06AAE:  CLRF   xAF
06AB0:  CLRF   xB0
06AB2:  CLRF   xB1
06AB4:  CLRF   xB2
06AB6:  CLRF   xB3
06AB8:  CLRF   xB4
06ABA:  CLRF   xB5
06ABC:  CLRF   xB6
06ABE:  CLRF   xB7
06AC0:  CLRF   xB8
06AC2:  CLRF   xB9
06AC4:  CLRF   xBA
06AC6:  CLRF   xBB
06AC8:  CLRF   xBC
06ACA:  CLRF   xBD
06ACC:  CLRF   xBE
06ACE:  CLRF   xBF
06AD0:  CLRF   xC0
06AD2:  CLRF   xC1
06AD4:  CLRF   xC2
06AD6:  CLRF   xC3
06AD8:  CLRF   xC4
06ADA:  CLRF   xC5
06ADC:  CLRF   xC6
06ADE:  CLRF   xC7
06AE0:  CLRF   xC8
06AE2:  CLRF   xC9
06AE4:  CLRF   xCA
06AE6:  CLRF   xCB
06AE8:  CLRF   xCC
06AEA:  CLRF   xCD
06AEC:  CLRF   xCE
06AEE:  CLRF   xCF
06AF0:  CLRF   xD0
06AF2:  CLRF   xD1
06AF4:  CLRF   xD2
....................    
....................    fprintf(PC, "Start Flash SMF Read Force\r\n");
06AF6:  MOVLW  B2
06AF8:  MOVWF  FF6
06AFA:  MOVLW  15
06AFC:  MOVWF  FF7
06AFE:  MOVLW  00
06B00:  MOVWF  FF8
06B02:  MOVLB  0
06B04:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06B08:  MOVLB  3
06B0A:  MOVF   x8B,W
06B0C:  MOVWF  FE9
06B0E:  MOVF   x8C,W
06B10:  MOVWF  FEA
06B12:  MOVFF  FEF,3DA
06B16:  MOVFF  3DA,492
06B1A:  MOVLW  01
06B1C:  MOVLB  4
06B1E:  MOVWF  x93
06B20:  MOVLB  0
06B22:  CALL   39E4
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", address);
06B26:  MOVLW  D0
06B28:  MOVWF  FF6
06B2A:  MOVLW  15
06B2C:  MOVWF  FF7
06B2E:  MOVLW  00
06B30:  MOVWF  FF8
06B32:  MOVLW  0E
06B34:  MOVLB  7
06B36:  MOVWF  xEC
06B38:  MOVLB  0
06B3A:  CALL   1898
06B3E:  MOVFF  390,427
06B42:  MOVLW  37
06B44:  MOVLB  4
06B46:  MOVWF  x28
06B48:  MOVLB  0
06B4A:  CALL   1A5A
06B4E:  MOVFF  38F,427
06B52:  MOVLW  37
06B54:  MOVLB  4
06B56:  MOVWF  x28
06B58:  MOVLB  0
06B5A:  CALL   1A5A
06B5E:  MOVFF  38E,427
06B62:  MOVLW  37
06B64:  MOVLB  4
06B66:  MOVWF  x28
06B68:  MOVLB  0
06B6A:  CALL   1A5A
06B6E:  MOVFF  38D,427
06B72:  MOVLW  37
06B74:  MOVLB  4
06B76:  MOVWF  x28
06B78:  MOVLB  0
06B7A:  CALL   1A5A
06B7E:  MOVLW  0D
06B80:  MOVLB  8
06B82:  MOVWF  x2F
06B84:  MOVLB  0
06B86:  CALL   1816
06B8A:  MOVLW  0A
06B8C:  MOVLB  8
06B8E:  MOVWF  x2F
06B90:  MOVLB  0
06B92:  CALL   1816
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", packet_num);
06B96:  MOVLW  E6
06B98:  MOVWF  FF6
06B9A:  MOVLW  15
06B9C:  MOVWF  FF7
06B9E:  MOVLW  00
06BA0:  MOVWF  FF8
06BA2:  MOVLW  0E
06BA4:  MOVLB  7
06BA6:  MOVWF  xEC
06BA8:  MOVLB  0
06BAA:  CALL   1898
06BAE:  MOVFF  392,427
06BB2:  MOVLW  37
06BB4:  MOVLB  4
06BB6:  MOVWF  x28
06BB8:  MOVLB  0
06BBA:  CALL   1A5A
06BBE:  MOVFF  391,427
06BC2:  MOVLW  37
06BC4:  MOVLB  4
06BC6:  MOVWF  x28
06BC8:  MOVLB  0
06BCA:  CALL   1A5A
06BCE:  MOVLW  0D
06BD0:  MOVLB  8
06BD2:  MOVWF  x2F
06BD4:  MOVLB  0
06BD6:  CALL   1816
06BDA:  MOVLW  0A
06BDC:  MOVLB  8
06BDE:  MOVWF  x2F
06BE0:  MOVLB  0
06BE2:  CALL   1816
....................    fprintf(PC, "read data\r\n");
06BE6:  MOVLW  FC
06BE8:  MOVWF  FF6
06BEA:  MOVLW  15
06BEC:  MOVWF  FF7
06BEE:  MOVLW  00
06BF0:  MOVWF  FF8
06BF2:  CALL   1868
....................    for (unsigned int16 packet_count = 0; packet_count < packet_num; packet_count++)
06BF6:  MOVLB  3
06BF8:  CLRF   xD4
06BFA:  CLRF   xD3
06BFC:  MOVLB  0
06BFE:  MOVLB  3
06C00:  MOVF   xD4,W
06C02:  SUBWF  x92,W
06C04:  BTFSC  FD8.0
06C06:  BRA    6C0E
06C08:  MOVLB  0
06C0A:  GOTO   6D16
06C0E:  MOVLB  0
06C10:  BTFSS  FD8.2
06C12:  GOTO   6C28
06C16:  MOVLB  3
06C18:  MOVF   x91,W
06C1A:  SUBWF  xD3,W
06C1C:  BTFSS  FD8.0
06C1E:  BRA    6C26
06C20:  MOVLB  0
06C22:  GOTO   6D16
06C26:  MOVLB  0
....................    {
....................       unsigned int32 current_address = address + (packet_count * PACKET_SIZE);
06C28:  MOVLB  3
06C2A:  RLCF   xD3,W
06C2C:  MOVWF  02
06C2E:  RLCF   xD4,W
06C30:  MOVWF  03
06C32:  RLCF   02,F
06C34:  RLCF   03,F
06C36:  RLCF   02,F
06C38:  RLCF   03,F
06C3A:  RLCF   02,F
06C3C:  RLCF   03,F
06C3E:  RLCF   02,F
06C40:  RLCF   03,F
06C42:  RLCF   02,F
06C44:  RLCF   03,F
06C46:  MOVLW  C0
06C48:  ANDWF  02,F
06C4A:  MOVF   02,W
06C4C:  ADDWF  x8D,W
06C4E:  MOVWF  xD5
06C50:  MOVF   03,W
06C52:  ADDWFC x8E,W
06C54:  MOVWF  xD6
06C56:  MOVLW  00
06C58:  ADDWFC x8F,W
06C5A:  MOVWF  xD7
06C5C:  MOVLW  00
06C5E:  ADDWFC x90,W
06C60:  MOVWF  xD8
06C62:  MOVLB  0
....................       //fprintf(PC, "Packet %d: Address 0x%08LX\r\n", packet_count, current_address);
....................       
....................       // Read data from the SMF
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
06C64:  MOVFF  E5,429
06C68:  MOVFF  E4,428
06C6C:  MOVFF  E3,427
06C70:  MOVFF  E2,426
06C74:  MOVFF  3D8,42D
06C78:  MOVFF  3D7,42C
06C7C:  MOVFF  3D6,42B
06C80:  MOVFF  3D5,42A
06C84:  MOVLW  03
06C86:  MOVLB  4
06C88:  MOVWF  x2F
06C8A:  MOVLW  93
06C8C:  MOVWF  x2E
06C8E:  CLRF   x33
06C90:  CLRF   x32
06C92:  CLRF   x31
06C94:  MOVLW  40
06C96:  MOVWF  x30
06C98:  MOVLB  0
06C9A:  CALL   1FFC
....................       
....................       // Print the read data
....................       //fprintf(PC, "Read Data: ");
....................       for (unsigned int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
06C9E:  MOVLB  3
06CA0:  CLRF   xD9
06CA2:  MOVLB  0
06CA4:  MOVLB  3
06CA6:  MOVF   xD9,W
06CA8:  SUBLW  3F
06CAA:  BTFSC  FD8.0
06CAC:  BRA    6CB4
06CAE:  MOVLB  0
06CB0:  GOTO   6CF0
06CB4:  MOVLB  0
....................       {
....................          fprintf(PC, "%02X ", read_data[byte_count]);
06CB6:  CLRF   03
06CB8:  MOVLB  3
06CBA:  MOVF   xD9,W
06CBC:  ADDLW  93
06CBE:  MOVWF  FE9
06CC0:  MOVLW  03
06CC2:  ADDWFC 03,W
06CC4:  MOVWF  FEA
06CC6:  MOVFF  FEF,3DA
06CCA:  MOVFF  3DA,427
06CCE:  MOVLW  37
06CD0:  MOVLB  4
06CD2:  MOVWF  x28
06CD4:  MOVLB  0
06CD6:  CALL   1A5A
06CDA:  MOVLW  20
06CDC:  MOVLB  8
06CDE:  MOVWF  x2F
06CE0:  MOVLB  0
06CE2:  CALL   1816
06CE6:  MOVLB  3
06CE8:  INCF   xD9,F
06CEA:  MOVLB  0
06CEC:  GOTO   6CA4
....................       }
....................       fprintf(PC, "\r\n");
06CF0:  MOVLW  0D
06CF2:  MOVLB  8
06CF4:  MOVWF  x2F
06CF6:  MOVLB  0
06CF8:  CALL   1816
06CFC:  MOVLW  0A
06CFE:  MOVLB  8
06D00:  MOVWF  x2F
06D02:  MOVLB  0
06D04:  CALL   1816
06D08:  MOVLB  3
06D0A:  INCF   xD3,F
06D0C:  BTFSC  FD8.2
06D0E:  INCF   xD4,F
06D10:  MOVLB  0
06D12:  GOTO   6BFE
....................    }
....................    if(is_connect(smf) == FALSE) {
06D16:  MOVFF  E5,82F
06D1A:  MOVFF  E4,82E
06D1E:  MOVFF  E3,82D
06D22:  MOVFF  E2,82C
06D26:  CALL   1F36
06D2A:  MOVF   01,F
06D2C:  BTFSS  FD8.2
06D2E:  GOTO   6D42
....................       fprintf(PC, "SMF is not connected\r\n");
06D32:  MOVLW  08
06D34:  MOVWF  FF6
06D36:  MOVLW  16
06D38:  MOVWF  FF7
06D3A:  MOVLW  00
06D3C:  MOVWF  FF8
06D3E:  CALL   1868
....................       // return;
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read Force\r\n");
06D42:  MOVLW  20
06D44:  MOVWF  FF6
06D46:  MOVLW  16
06D48:  MOVWF  FF7
06D4A:  MOVLW  00
06D4C:  MOVWF  FF8
06D4E:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06D52:  MOVLB  3
06D54:  MOVF   x8B,W
06D56:  MOVWF  FE9
06D58:  MOVF   x8C,W
06D5A:  MOVWF  FEA
06D5C:  MOVFF  FEF,3DA
06D60:  MOVFF  3DA,492
06D64:  MOVLW  02
06D66:  MOVLB  4
06D68:  MOVWF  x93
06D6A:  MOVLB  0
06D6C:  CALL   39E4
06D70:  GOTO   71D0 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Erase All\r\n");
06D74:  MOVLW  3E
06D76:  MOVWF  FF6
06D78:  MOVLW  16
06D7A:  MOVWF  FF7
06D7C:  MOVLW  00
06D7E:  MOVWF  FF8
06D80:  CALL   1868
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
06D84:  MOVLB  3
06D86:  MOVF   x8B,W
06D88:  MOVWF  FE9
06D8A:  MOVF   x8C,W
06D8C:  MOVWF  FEA
06D8E:  MOVFF  FEF,38D
....................    piclog_make(cmd, 0x00); // Log the command execution
06D92:  MOVFF  38D,492
06D96:  MOVLB  4
06D98:  CLRF   x93
06D9A:  MOVLB  0
06D9C:  CALL   39E4
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
06DA0:  MOVLB  3
06DA2:  CLRF   x91
06DA4:  CLRF   x90
06DA6:  CLRF   x8F
06DA8:  CLRF   x8E
06DAA:  MOVLB  0
06DAC:  MOVLB  3
06DAE:  MOVF   x91,F
06DB0:  BTFSC  FD8.2
06DB2:  BRA    6DBA
06DB4:  MOVLB  0
06DB6:  GOTO   6E1A
06DBA:  MOVLB  0
06DBC:  MOVLB  3
06DBE:  MOVF   x90,W
06DC0:  SUBLW  F4
06DC2:  BTFSC  FD8.0
06DC4:  BRA    6DCC
06DC6:  MOVLB  0
06DC8:  GOTO   6E1A
06DCC:  MOVLB  0
06DCE:  BTFSS  FD8.2
06DD0:  GOTO   6DE6
06DD4:  MOVLB  3
06DD6:  MOVF   x8F,W
06DD8:  SUBLW  23
06DDA:  BTFSC  FD8.0
06DDC:  BRA    6DE4
06DDE:  MOVLB  0
06DE0:  GOTO   6E1A
06DE4:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06DE6:  MOVFF  E5,3D4
06DEA:  MOVFF  E4,3D3
06DEE:  MOVFF  E3,3D2
06DF2:  MOVFF  E2,3D1
06DF6:  MOVFF  391,3D8
06DFA:  MOVFF  390,3D7
06DFE:  MOVFF  38F,3D6
06E02:  MOVFF  38E,3D5
06E06:  CALL   52FE
06E0A:  MOVLW  01
06E0C:  MOVLB  3
06E0E:  ADDWF  x90,F
06E10:  MOVLW  00
06E12:  ADDWFC x91,F
06E14:  MOVLB  0
06E16:  GOTO   6DAC
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
06E1A:  MOVFF  38D,492
06E1E:  MOVLW  02
06E20:  MOVLB  4
06E22:  MOVWF  x93
06E24:  MOVLB  0
06E26:  CALL   39E4
....................    fprintf(PC, "End SMF Erase All\r\n");
06E2A:  MOVLW  54
06E2C:  MOVWF  FF6
06E2E:  MOVLW  16
06E30:  MOVWF  FF7
06E32:  MOVLW  00
06E34:  MOVWF  FF8
06E36:  CALL   1868
06E3A:  GOTO   71E0 (RETURN)
.................... }
.................... 
.................... void mode_smf_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start SMF Reset\r\n");
*
06E42:  MOVLW  68
06E44:  MOVWF  FF6
06E46:  MOVLW  16
06E48:  MOVWF  FF7
06E4A:  MOVLW  00
06E4C:  MOVWF  FF8
06E4E:  CALL   1868
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06E52:  MOVLB  3
06E54:  MOVF   x8B,W
06E56:  MOVWF  FE9
06E58:  MOVF   x8C,W
06E5A:  MOVWF  FEA
06E5C:  MOVFF  FEF,3D1
06E60:  MOVFF  3D1,492
06E64:  MOVLW  01
06E66:  MOVLB  4
06E68:  MOVWF  x93
06E6A:  MOVLB  0
06E6C:  CALL   39E4
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06E70:  MOVLB  3
06E72:  CLRF   x8D
06E74:  CLRF   x8E
06E76:  CLRF   x8F
06E78:  CLRF   x90
06E7A:  CLRF   x91
06E7C:  CLRF   x92
06E7E:  CLRF   x93
06E80:  CLRF   x94
06E82:  CLRF   x95
06E84:  CLRF   x96
06E86:  CLRF   x97
06E88:  CLRF   x98
06E8A:  CLRF   x99
06E8C:  CLRF   x9A
06E8E:  CLRF   x9B
06E90:  CLRF   x9C
06E92:  CLRF   x9D
06E94:  CLRF   x9E
06E96:  CLRF   x9F
06E98:  CLRF   xA0
06E9A:  CLRF   xA1
06E9C:  CLRF   xA2
06E9E:  CLRF   xA3
06EA0:  CLRF   xA4
06EA2:  CLRF   xA5
06EA4:  CLRF   xA6
06EA6:  CLRF   xA7
06EA8:  CLRF   xA8
06EAA:  CLRF   xA9
06EAC:  CLRF   xAA
06EAE:  CLRF   xAB
06EB0:  CLRF   xAC
06EB2:  CLRF   xAD
06EB4:  CLRF   xAE
06EB6:  CLRF   xAF
06EB8:  CLRF   xB0
06EBA:  CLRF   xB1
06EBC:  CLRF   xB2
06EBE:  CLRF   xB3
06EC0:  CLRF   xB4
06EC2:  CLRF   xB5
06EC4:  CLRF   xB6
06EC6:  CLRF   xB7
06EC8:  CLRF   xB8
06ECA:  CLRF   xB9
06ECC:  CLRF   xBA
06ECE:  CLRF   xBB
06ED0:  CLRF   xBC
06ED2:  CLRF   xBD
06ED4:  CLRF   xBE
06ED6:  CLRF   xBF
06ED8:  CLRF   xC0
06EDA:  CLRF   xC1
06EDC:  CLRF   xC2
06EDE:  CLRF   xC3
06EE0:  CLRF   xC4
06EE2:  CLRF   xC5
06EE4:  CLRF   xC6
06EE6:  CLRF   xC7
06EE8:  CLRF   xC8
06EEA:  CLRF   xC9
06EEC:  CLRF   xCA
06EEE:  CLRF   xCB
06EF0:  CLRF   xCC
....................    
....................    for (unsigned int32 address = 0x04EC0000; address < 0x056BFFFF; address += SECTOR_64K_BYTE) {
06EF2:  MOVLW  04
06EF4:  MOVWF  xD0
06EF6:  MOVLW  EC
06EF8:  MOVWF  xCF
06EFA:  CLRF   xCE
06EFC:  CLRF   xCD
06EFE:  MOVLB  0
06F00:  MOVLB  3
06F02:  MOVF   xD0,W
06F04:  SUBLW  05
06F06:  BTFSC  FD8.0
06F08:  BRA    6F10
06F0A:  MOVLB  0
06F0C:  GOTO   6F8E
06F10:  MOVLB  0
06F12:  BTFSS  FD8.2
06F14:  GOTO   6F5A
06F18:  MOVLB  3
06F1A:  MOVF   xCF,W
06F1C:  SUBLW  6B
06F1E:  BTFSC  FD8.0
06F20:  BRA    6F28
06F22:  MOVLB  0
06F24:  GOTO   6F8E
06F28:  MOVLB  0
06F2A:  BTFSS  FD8.2
06F2C:  GOTO   6F5A
06F30:  MOVLB  3
06F32:  MOVF   xCE,W
06F34:  SUBLW  FF
06F36:  BTFSC  FD8.0
06F38:  BRA    6F40
06F3A:  MOVLB  0
06F3C:  GOTO   6F8E
06F40:  MOVLB  0
06F42:  BTFSS  FD8.2
06F44:  GOTO   6F5A
06F48:  MOVLB  3
06F4A:  MOVF   xCD,W
06F4C:  SUBLW  FE
06F4E:  BTFSC  FD8.0
06F50:  BRA    6F58
06F52:  MOVLB  0
06F54:  GOTO   6F8E
06F58:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
06F5A:  MOVFF  E5,3D4
06F5E:  MOVFF  E4,3D3
06F62:  MOVFF  E3,3D2
06F66:  MOVFF  E2,3D1
06F6A:  MOVFF  3D0,3D8
06F6E:  MOVFF  3CF,3D7
06F72:  MOVFF  3CE,3D6
06F76:  MOVFF  3CD,3D5
06F7A:  CALL   52FE
06F7E:  MOVLW  01
06F80:  MOVLB  3
06F82:  ADDWF  xCF,F
06F84:  MOVLW  00
06F86:  ADDWFC xD0,F
06F88:  MOVLB  0
06F8A:  GOTO   6F00
....................    }
.................... 
....................    write_data_bytes(smf, 0x04EC0000, writedata, PACKET_SIZE);
06F8E:  MOVFF  E5,82F
06F92:  MOVFF  E4,82E
06F96:  MOVFF  E3,82D
06F9A:  MOVFF  E2,82C
06F9E:  MOVLW  04
06FA0:  MOVLB  8
06FA2:  MOVWF  x33
06FA4:  MOVLW  EC
06FA6:  MOVWF  x32
06FA8:  CLRF   x31
06FAA:  CLRF   x30
06FAC:  MOVLW  03
06FAE:  MOVWF  x35
06FB0:  MOVLW  8D
06FB2:  MOVWF  x34
06FB4:  CLRF   x37
06FB6:  MOVLW  40
06FB8:  MOVWF  x36
06FBA:  MOVLB  0
06FBC:  CALL   3022
....................    smf_init(); // Update the address area after writing
06FC0:  GOTO   6E3E
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06FC4:  MOVLB  3
06FC6:  MOVF   x8B,W
06FC8:  MOVWF  FE9
06FCA:  MOVF   x8C,W
06FCC:  MOVWF  FEA
06FCE:  MOVFF  FEF,3D1
06FD2:  MOVFF  3D1,492
06FD6:  MOVLW  02
06FD8:  MOVLB  4
06FDA:  MOVWF  x93
06FDC:  MOVLB  0
06FDE:  CALL   39E4
....................    fprintf(PC, "End SMF Reset\r\n");
06FE2:  MOVLW  7A
06FE4:  MOVWF  FF6
06FE6:  MOVLW  16
06FE8:  MOVWF  FF7
06FEA:  MOVLW  00
06FEC:  MOVWF  FF8
06FEE:  CALL   1868
06FF2:  GOTO   71F0 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
08C78:  CLRF   FF8
08C7A:  BCF    FD0.7
08C7C:  BSF    07.7
08C7E:  MOVLB  E
08C80:  MOVLW  55
08C82:  MOVWF  F7E
08C84:  MOVLW  AA
08C86:  MOVWF  F7E
08C88:  BCF    F66.6
08C8A:  MOVLW  F9
08C8C:  MOVWF  x2C
08C8E:  MOVLW  0F
08C90:  MOVWF  x2E
08C92:  MOVLW  40
08C94:  MOVWF  x12
08C96:  MOVLW  30
08C98:  MOVWF  x13
08C9A:  MOVLW  20
08C9C:  MOVWF  x22
08C9E:  MOVLW  55
08CA0:  MOVWF  F7E
08CA2:  MOVLW  AA
08CA4:  MOVWF  F7E
08CA6:  BSF    F66.6
08CA8:  CLRF   F9B
08CAA:  CLRF   F64
08CAC:  CLRF   F65
08CAE:  CLRF   F66
08CB0:  MOVLW  02
08CB2:  MOVWF  FD3
08CB4:  CLRF   1B
08CB6:  MOVLB  F
08CB8:  BSF    x2D.3
08CBA:  MOVLW  A0
08CBC:  MOVWF  x2B
08CBE:  MOVLW  01
08CC0:  MOVWF  x2C
08CC2:  MOVLW  A6
08CC4:  MOVWF  x2E
08CC6:  MOVLW  90
08CC8:  MOVWF  x2F
08CCA:  BCF    F93.6
08CCC:  BSF    F8A.6
08CCE:  BSF    F92.1
08CD0:  BCF    F92.0
08CD2:  BCF    F92.3
08CD4:  BCF    F89.3
08CD6:  BSF    F96.4
08CD8:  BCF    F96.1
08CDA:  BCF    F95.7
08CDC:  BCF    F8C.7
08CDE:  BSF    F93.4
08CE0:  BCF    F93.5
08CE2:  BCF    F93.2
08CE4:  BCF    F8A.2
08CE6:  CLRF   1F
08CE8:  CLRF   1E
08CEA:  CLRF   1D
08CEC:  CLRF   1C
08CEE:  CLRF   23
08CF0:  CLRF   22
08CF2:  CLRF   21
08CF4:  CLRF   20
08CF6:  CLRF   25
08CF8:  CLRF   24
08CFA:  CLRF   46
08CFC:  BCF    47.0
08CFE:  MOVLB  3
08D00:  CLRF   x47
08D02:  CLRF   x46
08D04:  CLRF   x45
08D06:  CLRF   x44
08D08:  CLRF   x49
08D0A:  CLRF   x48
08D0C:  CLRF   x4B
08D0E:  CLRF   x4A
08D10:  CLRF   x4D
08D12:  CLRF   x4C
08D14:  CLRF   x4F
08D16:  CLRF   x4E
08D18:  CLRF   x6D
08D1A:  MOVLW  1E
08D1C:  MOVWF  x72
08D1E:  CLRF   x74
08D20:  CLRF   x73
08D22:  MOVLB  E
08D24:  CLRF   xD9
08D26:  CLRF   xDA
08D28:  CLRF   xCE
08D2A:  CLRF   xCF
08D2C:  CLRF   xD0
08D2E:  CLRF   xD1
08D30:  CLRF   xD2
08D32:  CLRF   xD3
08D34:  CLRF   xD4
08D36:  CLRF   xD5
08D38:  CLRF   x45
08D3A:  CLRF   x46
08D3C:  CLRF   x47
08D3E:  BCF    x8D.7
08D40:  BCF    x8D.6
08D42:  BCF    x8D.5
08D44:  MOVLB  F
08D46:  CLRF   x53
08D48:  CLRF   x38
08D4A:  CLRF   x37
08D4C:  MOVLB  0
08D4E:  CLRF   26
08D50:  CLRF   27
08D52:  CLRF   28
08D54:  CLRF   29
08D56:  CLRF   2A
08D58:  CLRF   2B
08D5A:  CLRF   2C
08D5C:  CLRF   2D
08D5E:  CLRF   2E
08D60:  CLRF   2F
08D62:  CLRF   30
08D64:  CLRF   31
08D66:  CLRF   32
08D68:  CLRF   33
08D6A:  CLRF   34
08D6C:  CLRF   35
08D6E:  CLRF   36
08D70:  CLRF   37
08D72:  CLRF   38
08D74:  CLRF   39
08D76:  CLRF   3A
08D78:  CLRF   3B
08D7A:  CLRF   3C
08D7C:  CLRF   3D
08D7E:  CLRF   3E
08D80:  CLRF   3F
08D82:  CLRF   40
08D84:  CLRF   41
08D86:  CLRF   42
08D88:  CLRF   43
08D8A:  CLRF   44
08D8C:  CLRF   45
08D8E:  MOVLW  03
08D90:  MOVWF  48
08D92:  CLRF   49
08D94:  CLRF   4A
08D96:  CLRF   4B
08D98:  CLRF   4C
08D9A:  CLRF   4D
08D9C:  CLRF   4E
08D9E:  CLRF   4F
08DA0:  CLRF   50
08DA2:  CLRF   51
08DA4:  CLRF   52
08DA6:  CLRF   53
08DA8:  CLRF   54
08DAA:  CLRF   55
08DAC:  CLRF   56
08DAE:  CLRF   57
08DB0:  CLRF   58
08DB2:  CLRF   59
08DB4:  CLRF   5A
08DB6:  CLRF   5B
08DB8:  CLRF   5C
08DBA:  CLRF   5D
08DBC:  CLRF   5E
08DBE:  CLRF   5F
08DC0:  CLRF   x60
08DC2:  CLRF   x61
08DC4:  CLRF   x62
08DC6:  CLRF   x63
08DC8:  CLRF   x64
08DCA:  CLRF   x65
08DCC:  CLRF   x66
08DCE:  CLRF   x67
08DD0:  CLRF   x68
08DD2:  CLRF   x69
08DD4:  CLRF   x6A
08DD6:  CLRF   x6B
08DD8:  CLRF   x6C
08DDA:  CLRF   x6D
08DDC:  CLRF   x6E
08DDE:  CLRF   x6F
08DE0:  CLRF   x70
08DE2:  CLRF   x71
08DE4:  CLRF   x72
08DE6:  CLRF   x73
08DE8:  CLRF   x74
08DEA:  CLRF   x75
08DEC:  CLRF   x76
08DEE:  CLRF   x77
08DF0:  CLRF   x78
08DF2:  CLRF   x79
08DF4:  CLRF   x7A
08DF6:  CLRF   x7B
08DF8:  CLRF   x7C
08DFA:  CLRF   x7D
08DFC:  CLRF   x7E
08DFE:  CLRF   x7F
08E00:  CLRF   x80
08E02:  CLRF   x81
08E04:  CLRF   x82
08E06:  CLRF   x83
08E08:  CLRF   x84
08E0A:  CLRF   x85
08E0C:  CLRF   x86
08E0E:  CLRF   x87
08E10:  CLRF   x88
08E12:  CLRF   x89
08E14:  CLRF   x8A
08E16:  CLRF   x8B
08E18:  CLRF   x8C
08E1A:  CLRF   x8D
08E1C:  CLRF   x8E
08E1E:  CLRF   x8F
08E20:  CLRF   x90
08E22:  CLRF   x91
08E24:  CLRF   x92
08E26:  CLRF   x93
08E28:  CLRF   x94
08E2A:  CLRF   x95
08E2C:  CLRF   x96
08E2E:  CLRF   x97
08E30:  CLRF   x98
08E32:  CLRF   x99
08E34:  CLRF   x9A
08E36:  CLRF   x9B
08E38:  CLRF   x9C
08E3A:  CLRF   x9D
08E3C:  CLRF   x9E
08E3E:  CLRF   x9F
08E40:  CLRF   xA0
08E42:  CLRF   xA1
08E44:  CLRF   xA2
08E46:  CLRF   xA3
08E48:  CLRF   xA4
08E4A:  CLRF   xA5
08E4C:  CLRF   xA6
08E4E:  CLRF   xA7
08E50:  CLRF   xA8
08E52:  CLRF   xA9
08E54:  CLRF   xAA
08E56:  CLRF   xAB
08E58:  CLRF   xAC
08E5A:  CLRF   xAD
08E5C:  CLRF   xAE
08E5E:  CLRF   xAF
08E60:  CLRF   xB0
08E62:  CLRF   xB1
08E64:  CLRF   xB2
08E66:  CLRF   xB3
08E68:  CLRF   xB4
08E6A:  CLRF   xB5
08E6C:  CLRF   xB6
08E6E:  CLRF   xB7
08E70:  CLRF   xB8
08E72:  CLRF   xB9
08E74:  CLRF   xBA
08E76:  CLRF   xBB
08E78:  CLRF   xBC
08E7A:  CLRF   xBD
08E7C:  CLRF   xBE
08E7E:  CLRF   xBF
08E80:  CLRF   xC0
08E82:  CLRF   xC1
08E84:  CLRF   xC2
08E86:  CLRF   xC3
08E88:  CLRF   xC4
08E8A:  CLRF   xC5
08E8C:  CLRF   xC6
08E8E:  CLRF   xC7
08E90:  CLRF   xC8
08E92:  CLRF   xC9
08E94:  CLRF   xCA
08E96:  CLRF   xCB
08E98:  CLRF   xCC
08E9A:  CLRF   xCD
08E9C:  CLRF   xCE
08E9E:  CLRF   xCF
08EA0:  CLRF   xD0
08EA2:  CLRF   xD1
08EA4:  CLRF   xD2
08EA6:  CLRF   xD3
08EA8:  CLRF   xD4
08EAA:  CLRF   xD5
08EAC:  CLRF   xD6
08EAE:  CLRF   xD7
08EB0:  CLRF   xD8
08EB2:  CLRF   xD9
08EB4:  CLRF   xDA
08EB6:  CLRF   xDB
08EB8:  CLRF   xDC
08EBA:  CLRF   xDD
08EBC:  CLRF   xDE
08EBE:  CLRF   xDF
08EC0:  MOVLW  05
08EC2:  MOVWF  xE0
08EC4:  MOVLW  7C
08EC6:  MOVWF  xE1
08EC8:  MOVLW  01
08ECA:  MOVWF  xE2
08ECC:  MOVLW  01
08ECE:  MOVWF  xE3
08ED0:  MOVLW  02
08ED2:  MOVWF  xE4
08ED4:  MOVLW  7C
08ED6:  MOVWF  xE5
08ED8:  CLRF   xE6
08EDA:  MOVLW  09
08EDC:  MOVWF  xE7
08EDE:  MOVLW  01
08EE0:  MOVWF  xE8
08EE2:  CLRF   xE9
08EE4:  MOVLW  02
08EE6:  MOVWF  xEA
08EE8:  MOVLW  01
08EEA:  MOVWF  xEB
08EEC:  CLRF   xEC
08EEE:  CLRF   xED
08EF0:  CLRF   xEE
08EF2:  CLRF   xEF
08EF4:  CLRF   xF0
08EF6:  CLRF   xF1
08EF8:  CLRF   xF2
08EFA:  CLRF   xF3
08EFC:  CLRF   xF4
08EFE:  CLRF   xF5
08F00:  CLRF   xF6
08F02:  CLRF   xF7
08F04:  CLRF   xF8
08F06:  CLRF   xF9
08F08:  CLRF   xFA
08F0A:  CLRF   xFB
08F0C:  CLRF   xFC
08F0E:  CLRF   xFD
08F10:  CLRF   xFE
08F12:  CLRF   xFF
08F14:  MOVLB  1
08F16:  CLRF   x00
08F18:  CLRF   x01
08F1A:  CLRF   x02
08F1C:  CLRF   x03
08F1E:  CLRF   x04
08F20:  CLRF   x05
08F22:  CLRF   x06
08F24:  CLRF   x07
08F26:  CLRF   x08
08F28:  CLRF   x09
08F2A:  CLRF   x0A
08F2C:  CLRF   x0B
08F2E:  CLRF   x0C
08F30:  CLRF   x0D
08F32:  CLRF   x0E
08F34:  CLRF   x0F
08F36:  CLRF   x10
08F38:  CLRF   x11
08F3A:  CLRF   x12
08F3C:  CLRF   x13
08F3E:  CLRF   x14
08F40:  CLRF   x15
08F42:  CLRF   x16
08F44:  CLRF   x17
08F46:  CLRF   x18
08F48:  CLRF   x19
08F4A:  CLRF   x1A
08F4C:  CLRF   x1B
08F4E:  CLRF   x1C
08F50:  CLRF   x1D
08F52:  CLRF   x1E
08F54:  CLRF   x1F
08F56:  CLRF   x20
08F58:  CLRF   x21
08F5A:  CLRF   x22
08F5C:  CLRF   x23
08F5E:  CLRF   x24
08F60:  CLRF   x25
08F62:  CLRF   x26
08F64:  CLRF   x27
08F66:  CLRF   x28
08F68:  CLRF   x29
08F6A:  CLRF   x2A
08F6C:  CLRF   x2B
08F6E:  CLRF   x2C
08F70:  CLRF   x2D
08F72:  CLRF   x2E
08F74:  CLRF   x2F
08F76:  CLRF   x30
08F78:  CLRF   x31
08F7A:  CLRF   x32
08F7C:  CLRF   x33
08F7E:  CLRF   x34
08F80:  CLRF   x35
08F82:  CLRF   x36
08F84:  CLRF   x37
08F86:  CLRF   x38
08F88:  CLRF   x39
08F8A:  CLRF   x3A
08F8C:  CLRF   x3B
08F8E:  CLRF   x3C
08F90:  CLRF   x3D
08F92:  CLRF   x3E
08F94:  CLRF   x3F
08F96:  CLRF   x40
08F98:  CLRF   x41
08F9A:  CLRF   x42
08F9C:  CLRF   x43
08F9E:  CLRF   x44
08FA0:  CLRF   x45
08FA2:  CLRF   x46
08FA4:  CLRF   x47
08FA6:  CLRF   x48
08FA8:  CLRF   x49
08FAA:  CLRF   x4A
08FAC:  CLRF   x4B
08FAE:  CLRF   x4C
08FB0:  CLRF   x4D
08FB2:  CLRF   x4E
08FB4:  CLRF   x4F
08FB6:  CLRF   x50
08FB8:  CLRF   x51
08FBA:  CLRF   x52
08FBC:  CLRF   x53
08FBE:  CLRF   x54
08FC0:  CLRF   x55
08FC2:  CLRF   x56
08FC4:  CLRF   x57
08FC6:  CLRF   x58
08FC8:  CLRF   x59
08FCA:  CLRF   x5A
08FCC:  CLRF   x5B
08FCE:  CLRF   x5C
08FD0:  CLRF   x5D
08FD2:  CLRF   x5E
08FD4:  CLRF   x5F
08FD6:  CLRF   x60
08FD8:  CLRF   x61
08FDA:  CLRF   x62
08FDC:  CLRF   x63
08FDE:  CLRF   x64
08FE0:  CLRF   x65
08FE2:  CLRF   x66
08FE4:  CLRF   x67
08FE6:  CLRF   x68
08FE8:  CLRF   x69
08FEA:  CLRF   x6A
08FEC:  CLRF   x6B
08FEE:  CLRF   x6C
08FF0:  CLRF   x6D
08FF2:  CLRF   x6E
08FF4:  CLRF   x6F
08FF6:  CLRF   x70
08FF8:  CLRF   x71
08FFA:  CLRF   x72
08FFC:  CLRF   x73
08FFE:  CLRF   x74
09000:  CLRF   x75
09002:  CLRF   x76
09004:  CLRF   x77
09006:  CLRF   x78
09008:  CLRF   x79
0900A:  CLRF   x7A
0900C:  CLRF   x7B
0900E:  CLRF   x7C
09010:  CLRF   x7D
09012:  CLRF   x7E
09014:  CLRF   x7F
09016:  CLRF   x80
09018:  CLRF   x81
0901A:  CLRF   x82
0901C:  CLRF   x83
0901E:  CLRF   x84
09020:  CLRF   x85
09022:  CLRF   x86
09024:  CLRF   x87
09026:  CLRF   x88
09028:  CLRF   x89
0902A:  CLRF   x8A
0902C:  CLRF   x8B
0902E:  CLRF   x8C
09030:  CLRF   x8D
09032:  CLRF   x8E
09034:  CLRF   x8F
09036:  CLRF   x90
09038:  CLRF   x91
0903A:  CLRF   x92
0903C:  CLRF   x93
0903E:  CLRF   x94
09040:  CLRF   x95
09042:  CLRF   x96
09044:  CLRF   x97
09046:  CLRF   x98
09048:  CLRF   x99
0904A:  CLRF   x9A
0904C:  CLRF   x9B
0904E:  CLRF   x9C
09050:  CLRF   x9D
09052:  CLRF   x9E
09054:  CLRF   x9F
09056:  CLRF   xA0
09058:  CLRF   xA1
0905A:  CLRF   xA2
0905C:  CLRF   xA3
0905E:  CLRF   xA4
09060:  CLRF   xA5
09062:  CLRF   xA6
09064:  CLRF   xA7
09066:  CLRF   xA8
09068:  CLRF   xA9
0906A:  CLRF   xAA
0906C:  CLRF   xAB
0906E:  CLRF   xAC
09070:  CLRF   xAD
09072:  CLRF   xAE
09074:  CLRF   xAF
09076:  CLRF   xB0
09078:  CLRF   xB1
0907A:  CLRF   xB2
0907C:  CLRF   xB3
0907E:  CLRF   xB4
09080:  CLRF   xB5
09082:  CLRF   xB6
09084:  CLRF   xB7
09086:  CLRF   xB8
09088:  CLRF   xB9
0908A:  CLRF   xBA
0908C:  CLRF   xBB
0908E:  CLRF   xBC
09090:  CLRF   xBD
09092:  CLRF   xBE
09094:  CLRF   xBF
09096:  CLRF   xC0
09098:  CLRF   xC1
0909A:  CLRF   xC2
0909C:  CLRF   xC3
0909E:  CLRF   xC4
090A0:  CLRF   xC5
090A2:  CLRF   xC6
090A4:  CLRF   xC7
090A6:  CLRF   xC8
090A8:  CLRF   xC9
090AA:  CLRF   xCA
090AC:  CLRF   xCB
090AE:  CLRF   xCC
090B0:  CLRF   xCD
090B2:  CLRF   xCE
090B4:  CLRF   xCF
090B6:  CLRF   xD0
090B8:  CLRF   xD1
090BA:  CLRF   xD2
090BC:  CLRF   xD3
090BE:  CLRF   xD4
090C0:  CLRF   xD5
090C2:  CLRF   xD6
090C4:  CLRF   xD7
090C6:  CLRF   xD8
090C8:  CLRF   xD9
090CA:  CLRF   xDA
090CC:  CLRF   xDB
090CE:  CLRF   xDC
090D0:  CLRF   xDD
090D2:  CLRF   xDE
090D4:  CLRF   xDF
090D6:  CLRF   xE0
090D8:  CLRF   xE1
090DA:  CLRF   xE2
090DC:  CLRF   xE3
090DE:  CLRF   xE4
090E0:  CLRF   xE5
090E2:  CLRF   xE6
090E4:  CLRF   xE7
090E6:  CLRF   xE8
090E8:  CLRF   xE9
090EA:  CLRF   xEA
090EC:  CLRF   xEB
090EE:  CLRF   xEC
090F0:  CLRF   xED
090F2:  CLRF   xEE
090F4:  CLRF   xEF
090F6:  CLRF   xF0
090F8:  CLRF   xF1
090FA:  CLRF   xF2
090FC:  CLRF   xF3
090FE:  CLRF   xF4
09100:  CLRF   xF5
09102:  CLRF   xF6
09104:  CLRF   xF7
09106:  CLRF   xF8
09108:  CLRF   xF9
0910A:  CLRF   xFA
0910C:  CLRF   xFB
0910E:  CLRF   xFC
09110:  CLRF   xFD
09112:  CLRF   xFE
09114:  CLRF   xFF
09116:  MOVLB  2
09118:  CLRF   x00
0911A:  CLRF   x01
0911C:  CLRF   x02
0911E:  CLRF   x03
09120:  CLRF   x04
09122:  CLRF   x05
09124:  CLRF   x06
09126:  CLRF   x07
09128:  CLRF   x08
0912A:  CLRF   x09
0912C:  CLRF   x0A
0912E:  CLRF   x0B
09130:  CLRF   x0C
09132:  CLRF   x0D
09134:  CLRF   x0E
09136:  CLRF   x0F
09138:  CLRF   x10
0913A:  CLRF   x11
0913C:  CLRF   x12
0913E:  CLRF   x13
09140:  CLRF   x14
09142:  CLRF   x15
09144:  CLRF   x16
09146:  CLRF   x17
09148:  CLRF   x18
0914A:  CLRF   x19
0914C:  CLRF   x1A
0914E:  CLRF   x1B
09150:  CLRF   x1C
09152:  CLRF   x1D
09154:  CLRF   x1E
09156:  CLRF   x1F
09158:  CLRF   x20
0915A:  CLRF   x21
0915C:  CLRF   x22
0915E:  CLRF   x23
09160:  CLRF   x24
09162:  CLRF   x25
09164:  CLRF   x26
09166:  CLRF   x27
09168:  CLRF   x28
0916A:  CLRF   x29
0916C:  CLRF   x2A
0916E:  CLRF   x2B
09170:  CLRF   x2C
09172:  CLRF   x2D
09174:  CLRF   x2E
09176:  CLRF   x2F
09178:  CLRF   x30
0917A:  CLRF   x31
0917C:  CLRF   x32
0917E:  CLRF   x33
09180:  CLRF   x34
09182:  CLRF   x35
09184:  CLRF   x36
09186:  CLRF   x37
09188:  CLRF   x38
0918A:  CLRF   x39
0918C:  CLRF   x3A
0918E:  CLRF   x3B
09190:  CLRF   x3C
09192:  CLRF   x3D
09194:  CLRF   x3E
09196:  CLRF   x3F
09198:  CLRF   x40
0919A:  CLRF   x41
0919C:  CLRF   x42
0919E:  CLRF   x43
091A0:  CLRF   x44
091A2:  CLRF   x45
091A4:  CLRF   x46
091A6:  CLRF   x47
091A8:  CLRF   x48
091AA:  CLRF   x49
091AC:  CLRF   x4A
091AE:  CLRF   x4B
091B0:  CLRF   x4C
091B2:  CLRF   x4D
091B4:  CLRF   x4E
091B6:  CLRF   x4F
091B8:  CLRF   x50
091BA:  CLRF   x51
091BC:  CLRF   x52
091BE:  CLRF   x53
091C0:  CLRF   x54
091C2:  CLRF   x55
091C4:  CLRF   x56
091C6:  CLRF   x57
091C8:  CLRF   x58
091CA:  CLRF   x59
091CC:  CLRF   x5A
091CE:  CLRF   x5B
091D0:  CLRF   x5C
091D2:  CLRF   x5D
091D4:  CLRF   x5E
091D6:  CLRF   x5F
091D8:  CLRF   x60
091DA:  CLRF   x61
091DC:  CLRF   x62
091DE:  CLRF   x63
091E0:  CLRF   x64
091E2:  CLRF   x65
091E4:  CLRF   x66
091E6:  CLRF   x67
091E8:  CLRF   x68
091EA:  CLRF   x69
091EC:  CLRF   x6A
091EE:  CLRF   x6B
091F0:  CLRF   x6C
091F2:  CLRF   x6D
091F4:  CLRF   x6E
091F6:  CLRF   x6F
091F8:  CLRF   x70
091FA:  CLRF   x71
091FC:  CLRF   x72
091FE:  CLRF   x73
09200:  CLRF   x74
09202:  CLRF   x75
09204:  CLRF   x76
09206:  CLRF   x77
09208:  CLRF   x78
0920A:  CLRF   x79
0920C:  CLRF   x7A
0920E:  CLRF   x7B
09210:  CLRF   x7C
09212:  CLRF   x7D
09214:  CLRF   x7E
09216:  CLRF   x7F
09218:  CLRF   x80
0921A:  CLRF   x81
0921C:  CLRF   x82
0921E:  CLRF   x83
09220:  CLRF   x84
09222:  CLRF   x85
09224:  CLRF   x86
09226:  CLRF   x87
09228:  CLRF   x88
0922A:  CLRF   x89
0922C:  CLRF   x8A
0922E:  CLRF   x8B
09230:  CLRF   x8C
09232:  CLRF   x8D
09234:  CLRF   x8E
09236:  CLRF   x8F
09238:  CLRF   x90
0923A:  CLRF   x91
0923C:  CLRF   x92
0923E:  CLRF   x93
09240:  CLRF   x94
09242:  CLRF   x95
09244:  CLRF   x96
09246:  CLRF   x97
09248:  CLRF   x98
0924A:  CLRF   x99
0924C:  CLRF   x9A
0924E:  CLRF   x9B
09250:  CLRF   x9C
09252:  CLRF   x9D
09254:  CLRF   x9E
09256:  CLRF   x9F
09258:  CLRF   xA0
0925A:  CLRF   xA1
0925C:  CLRF   xA2
0925E:  CLRF   xA3
09260:  CLRF   xA4
09262:  CLRF   xA5
09264:  CLRF   xA6
09266:  CLRF   xA7
09268:  CLRF   xA8
0926A:  CLRF   xA9
0926C:  CLRF   xAA
0926E:  CLRF   xAB
09270:  CLRF   xAC
09272:  CLRF   xAD
09274:  CLRF   xAE
09276:  CLRF   xAF
09278:  CLRF   xB0
0927A:  CLRF   xB1
0927C:  CLRF   xB2
0927E:  CLRF   xB3
09280:  CLRF   xB4
09282:  CLRF   xB5
09284:  CLRF   xB6
09286:  CLRF   xB7
09288:  CLRF   xB8
0928A:  CLRF   xB9
0928C:  CLRF   xBA
0928E:  CLRF   xBB
09290:  CLRF   xBC
09292:  CLRF   xBD
09294:  CLRF   xBE
09296:  CLRF   xBF
09298:  CLRF   xC0
0929A:  CLRF   xC1
0929C:  CLRF   xC2
0929E:  CLRF   xC3
092A0:  CLRF   xC4
092A2:  CLRF   xC5
092A4:  CLRF   xC6
092A6:  CLRF   xC7
092A8:  CLRF   xC8
092AA:  CLRF   xC9
092AC:  CLRF   xCA
092AE:  CLRF   xCB
092B0:  CLRF   xCC
092B2:  CLRF   xCD
092B4:  CLRF   xCE
092B6:  CLRF   xCF
092B8:  CLRF   xD0
092BA:  CLRF   xD1
092BC:  CLRF   xD2
092BE:  CLRF   xD3
092C0:  CLRF   xD4
092C2:  CLRF   xD5
092C4:  CLRF   xD6
092C6:  CLRF   xD7
092C8:  CLRF   xD8
092CA:  CLRF   xD9
092CC:  CLRF   xDA
092CE:  CLRF   xDB
092D0:  CLRF   xDC
092D2:  CLRF   xDD
092D4:  CLRF   xDE
092D6:  CLRF   xDF
092D8:  CLRF   xE0
092DA:  CLRF   xE1
092DC:  CLRF   xE2
092DE:  CLRF   xE3
092E0:  CLRF   xE4
092E2:  CLRF   xE5
092E4:  CLRF   xE6
092E6:  CLRF   xE7
092E8:  CLRF   xE8
092EA:  CLRF   xE9
092EC:  CLRF   xEA
092EE:  CLRF   xEB
092F0:  CLRF   xEC
092F2:  CLRF   xED
092F4:  CLRF   xEE
092F6:  CLRF   xEF
092F8:  CLRF   xF0
092FA:  CLRF   xF1
092FC:  CLRF   xF2
092FE:  CLRF   xF3
09300:  CLRF   xF4
09302:  CLRF   xF5
09304:  CLRF   xF6
09306:  CLRF   xF7
09308:  CLRF   xF8
0930A:  CLRF   xF9
0930C:  CLRF   xFA
0930E:  CLRF   xFB
09310:  CLRF   xFC
09312:  CLRF   xFD
09314:  CLRF   xFE
09316:  CLRF   xFF
09318:  MOVLB  3
0931A:  CLRF   x00
0931C:  CLRF   x01
0931E:  CLRF   x02
09320:  CLRF   x03
09322:  CLRF   x04
09324:  CLRF   x05
09326:  CLRF   x06
09328:  CLRF   x07
0932A:  CLRF   x08
0932C:  CLRF   x09
0932E:  CLRF   x0A
09330:  CLRF   x0B
09332:  CLRF   x0C
09334:  CLRF   x0D
09336:  CLRF   x0E
09338:  CLRF   x0F
0933A:  CLRF   x10
0933C:  CLRF   x11
0933E:  CLRF   x12
09340:  CLRF   x13
09342:  CLRF   x14
09344:  CLRF   x15
09346:  CLRF   x16
09348:  CLRF   x17
0934A:  CLRF   x18
0934C:  CLRF   x19
0934E:  CLRF   x1A
09350:  CLRF   x1B
09352:  CLRF   x1C
09354:  CLRF   x1D
09356:  CLRF   x1E
09358:  CLRF   x1F
0935A:  CLRF   x20
0935C:  CLRF   x21
0935E:  CLRF   x22
09360:  CLRF   x23
09362:  CLRF   x24
09364:  CLRF   x25
09366:  CLRF   x26
09368:  CLRF   x27
0936A:  CLRF   x28
0936C:  CLRF   x29
0936E:  CLRF   x2A
09370:  CLRF   x2B
09372:  CLRF   x2C
09374:  CLRF   x2D
09376:  CLRF   x2E
09378:  CLRF   x2F
0937A:  CLRF   x30
0937C:  CLRF   x31
0937E:  CLRF   x32
09380:  CLRF   x33
09382:  CLRF   x34
09384:  CLRF   x35
09386:  CLRF   x36
09388:  CLRF   x37
0938A:  CLRF   x38
0938C:  CLRF   x39
0938E:  CLRF   x3A
09390:  CLRF   x3B
09392:  CLRF   x3C
09394:  CLRF   x3D
09396:  CLRF   x3E
09398:  CLRF   x3F
0939A:  CLRF   x40
0939C:  CLRF   x41
0939E:  CLRF   x42
093A0:  CLRF   x43
093A2:  CLRF   x6E
093A4:  CLRF   x6F
093A6:  CLRF   x70
093A8:  CLRF   x71
093AA:  MOVLB  0
.................... { 
....................    delay_ms(1000); // wait for power stable
093AC:  MOVLW  04
093AE:  MOVLB  3
093B0:  MOVWF  x82
093B2:  MOVLB  0
093B4:  MOVLW  FA
093B6:  MOVLB  8
093B8:  MOVWF  x44
093BA:  MOVLB  0
093BC:  CALL   17E8
093C0:  MOVLB  3
093C2:  DECFSZ x82,F
093C4:  BRA    93CA
093C6:  BRA    93CE
093C8:  MOVLB  0
093CA:  MOVLB  0
093CC:  BRA    93B4
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
093CE:  MOVLW  8A
093D0:  MOVWF  FF6
093D2:  MOVLW  16
093D4:  MOVWF  FF7
093D6:  MOVLW  00
093D8:  MOVWF  FF8
093DA:  MOVLB  0
093DC:  CALL   1868
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
093E0:  MOVLW  D0
093E2:  MOVWF  FF6
093E4:  MOVLW  16
093E6:  MOVWF  FF7
093E8:  MOVLW  00
093EA:  MOVWF  FF8
093EC:  CALL   1868
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
093F0:  MOVLW  FE
093F2:  MOVWF  FF6
093F4:  MOVLW  16
093F6:  MOVWF  FF7
093F8:  MOVLW  00
093FA:  MOVWF  FF8
093FC:  MOVLW  10
093FE:  MOVLB  7
09400:  MOVWF  xEC
09402:  MOVLB  0
09404:  CALL   1898
09408:  MOVLW  24
0940A:  MOVWF  FF6
0940C:  MOVLW  17
0940E:  MOVWF  FF7
09410:  MOVLW  00
09412:  MOVWF  FF8
09414:  CALL   1868
09418:  MOVLW  20
0941A:  MOVLB  8
0941C:  MOVWF  x2F
0941E:  MOVLB  0
09420:  CALL   1816
09424:  MOVLW  2E
09426:  MOVWF  FF6
09428:  MOVLW  17
0942A:  MOVWF  FF7
0942C:  MOVLW  00
0942E:  MOVWF  FF8
09430:  CALL   1868
09434:  MOVLW  13
09436:  MOVWF  FF6
09438:  MOVLW  17
0943A:  MOVWF  FF7
0943C:  MOVLW  00
0943E:  MOVWF  FF8
09440:  MOVLW  0F
09442:  MOVLB  7
09444:  MOVWF  xEC
09446:  MOVLB  0
09448:  CALL   1898
....................    
....................    //io_init();
....................    setup_uart_to_boss();
0944C:  GOTO   18CE
....................    //setup_timer();
....................    ad7490_init();
09450:  GOTO   1ACA
....................    misf_init();
09454:  CALL   2214
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
09458:  MOVFF  36D,492
0945C:  MOVLB  4
0945E:  CLRF   x93
09460:  MOVLB  0
09462:  CALL   39E4
.................... 
....................    int1 is_finished = FALSE;
09466:  MOVLB  3
09468:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
0946A:  MOVLW  38
0946C:  MOVWF  FF6
0946E:  MOVLW  17
09470:  MOVWF  FF7
09472:  MOVLW  00
09474:  MOVWF  FF8
09476:  MOVLB  0
09478:  CALL   1868
....................    
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
0947C:  MOVLW  5E
0947E:  MOVWF  FF6
09480:  MOVLW  17
09482:  MOVWF  FF7
09484:  MOVLW  00
09486:  MOVWF  FF8
09488:  CALL   1868
....................    
....................    //Start loop
....................    while(!is_finished)
0948C:  MOVLB  3
0948E:  BTFSS  x75.0
09490:  BRA    9498
09492:  MOVLB  0
09494:  GOTO   9566
09498:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0949A:  MOVF   46,F
0949C:  BTFSC  FD8.2
0949E:  GOTO   9522
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
094A2:  MOVLB  3
094A4:  CLRF   x89
094A6:  MOVLW  26
094A8:  MOVWF  x88
094AA:  MOVFF  46,38A
094AE:  MOVLB  0
094B0:  GOTO   3EAE
094B4:  MOVFF  02,03
094B8:  MOVF   01,W
094BA:  MOVWF  FE1
094BC:  MOVFF  03,FE2
094C0:  MOVLW  03
094C2:  MOVWF  FEA
094C4:  MOVLW  76
094C6:  MOVWF  FE9
094C8:  MOVLW  0C
094CA:  MOVWF  01
094CC:  MOVFF  FE6,FEE
094D0:  DECFSZ 01,F
094D2:  GOTO   94CC
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
094D6:  MOVLB  3
094D8:  CLRF   x83
094DA:  MOVLW  26
094DC:  MOVWF  x82
094DE:  CLRF   x85
094E0:  MOVLW  46
094E2:  MOVWF  x84
094E4:  MOVLB  0
094E6:  GOTO   40CE
....................          
....................          if(recieve_cmd.is_exist)
094EA:  MOVLB  3
094EC:  BTFSC  x78.0
094EE:  BRA    94F6
094F0:  MOVLB  0
094F2:  GOTO   9512
094F6:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
094F8:  MOVLW  03
094FA:  MOVLB  3
094FC:  MOVWF  x83
094FE:  MOVLW  76
09500:  MOVWF  x82
09502:  MOVLB  0
09504:  GOTO   8BF6
09508:  MOVLB  3
0950A:  BCF    x75.1
0950C:  BTFSC  01.0
0950E:  BSF    x75.1
09510:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
09512:  MOVLW  7C
09514:  MOVWF  FF6
09516:  MOVLW  17
09518:  MOVWF  FF7
0951A:  MOVLW  00
0951C:  MOVWF  FF8
0951E:  CALL   1868
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
09522:  MOVLB  3
09524:  BTFSC  x75.0
09526:  BRA    952E
09528:  MOVLB  0
0952A:  GOTO   9534
0952E:  MOVLB  0
....................          break;
09530:  GOTO   9566
....................          
....................       delay_ms(400);
09534:  MOVLW  02
09536:  MOVLB  3
09538:  MOVWF  x82
0953A:  MOVLB  0
0953C:  MOVLW  C8
0953E:  MOVLB  8
09540:  MOVWF  x44
09542:  MOVLB  0
09544:  CALL   17E8
09548:  MOVLB  3
0954A:  DECFSZ x82,F
0954C:  BRA    9552
0954E:  BRA    9556
09550:  MOVLB  0
09552:  MOVLB  0
09554:  BRA    953C
....................       fprintf(PC, ".");
09556:  MOVLW  2E
09558:  MOVLB  8
0955A:  MOVWF  x2F
0955C:  MOVLB  0
0955E:  CALL   1816
09562:  GOTO   948C
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
09566:  MOVLW  9C
09568:  MOVWF  FF6
0956A:  MOVLW  17
0956C:  MOVWF  FF7
0956E:  MOVLW  00
09570:  MOVWF  FF8
09572:  CALL   1868
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
09576:  MOVLW  2E
09578:  MOVLB  8
0957A:  MOVWF  x2F
0957C:  MOVLB  0
0957E:  CALL   1816
....................       delay_ms(1000);
09582:  MOVLW  04
09584:  MOVLB  3
09586:  MOVWF  x82
09588:  MOVLB  0
0958A:  MOVLW  FA
0958C:  MOVLB  8
0958E:  MOVWF  x44
09590:  MOVLB  0
09592:  CALL   17E8
09596:  MOVLB  3
09598:  DECFSZ x82,F
0959A:  BRA    95A0
0959C:  BRA    95A4
0959E:  MOVLB  0
095A0:  MOVLB  0
095A2:  BRA    958A
095A4:  MOVLB  0
095A6:  GOTO   9576
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
095AA:  MOVLW  DC
095AC:  MOVWF  FF6
095AE:  MOVLW  17
095B0:  MOVWF  FF7
095B2:  MOVLW  00
095B4:  MOVWF  FF8
095B6:  CALL   1868
....................    
.................... }
.................... 
095BA:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
